
build/Application:     file format elf64-x86-64


Disassembly of section .init:

0000000000005000 <_init>:
    5000:	48 83 ec 08          	sub    $0x8,%rsp
    5004:	48 8b 05 b5 bf 03 00 	mov    0x3bfb5(%rip),%rax        # 40fc0 <__gmon_start__@Base>
    500b:	48 85 c0             	test   %rax,%rax
    500e:	74 02                	je     5012 <_init+0x12>
    5010:	ff d0                	call   *%rax
    5012:	48 83 c4 08          	add    $0x8,%rsp
    5016:	c3                   	ret

Disassembly of section .plt:

0000000000005020 <_Znam@plt-0x10>:
    5020:	ff 35 ca bf 03 00    	push   0x3bfca(%rip)        # 40ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
    5026:	ff 25 cc bf 03 00    	jmp    *0x3bfcc(%rip)        # 40ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
    502c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005030 <_Znam@plt>:
    5030:	ff 25 ca bf 03 00    	jmp    *0x3bfca(%rip)        # 41000 <_Znam@GLIBCXX_3.4>
    5036:	68 00 00 00 00       	push   $0x0
    503b:	e9 e0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005040 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>:
    5040:	ff 25 c2 bf 03 00    	jmp    *0x3bfc2(%rip)        # 41008 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@GLIBCXX_3.4>
    5046:	68 01 00 00 00       	push   $0x1
    504b:	e9 d0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005050 <_ZNSaIcED2Ev@plt>:
    5050:	ff 25 ba bf 03 00    	jmp    *0x3bfba(%rip)        # 41010 <_ZNSaIcED2Ev@GLIBCXX_3.4>
    5056:	68 02 00 00 00       	push   $0x2
    505b:	e9 c0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005060 <glfwDestroyWindow@plt>:
    5060:	ff 25 b2 bf 03 00    	jmp    *0x3bfb2(%rip)        # 41018 <glfwDestroyWindow@Base>
    5066:	68 03 00 00 00       	push   $0x3
    506b:	e9 b0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005070 <_ZNSolsEPFRSt8ios_baseS0_E@plt>:
    5070:	ff 25 aa bf 03 00    	jmp    *0x3bfaa(%rip)        # 41020 <_ZNSolsEPFRSt8ios_baseS0_E@GLIBCXX_3.4>
    5076:	68 04 00 00 00       	push   $0x4
    507b:	e9 a0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005080 <_ZSt17__throw_bad_allocv@plt>:
    5080:	ff 25 a2 bf 03 00    	jmp    *0x3bfa2(%rip)        # 41028 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
    5086:	68 05 00 00 00       	push   $0x5
    508b:	e9 90 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005090 <_ZNSt13runtime_errorC1EPKc@plt>:
    5090:	ff 25 9a bf 03 00    	jmp    *0x3bf9a(%rip)        # 41030 <_ZNSt13runtime_errorC1EPKc@GLIBCXX_3.4.21>
    5096:	68 06 00 00 00       	push   $0x6
    509b:	e9 80 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050a0 <__cxa_begin_catch@plt>:
    50a0:	ff 25 92 bf 03 00    	jmp    *0x3bf92(%rip)        # 41038 <__cxa_begin_catch@CXXABI_1.3>
    50a6:	68 07 00 00 00       	push   $0x7
    50ab:	e9 70 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050b0 <strlen@plt>:
    50b0:	ff 25 8a bf 03 00    	jmp    *0x3bf8a(%rip)        # 41040 <strlen@GLIBC_2.2.5>
    50b6:	68 08 00 00 00       	push   $0x8
    50bb:	e9 60 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050c0 <memcmp@plt>:
    50c0:	ff 25 82 bf 03 00    	jmp    *0x3bf82(%rip)        # 41048 <memcmp@GLIBC_2.2.5>
    50c6:	68 09 00 00 00       	push   $0x9
    50cb:	e9 50 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050d0 <__cxa_allocate_exception@plt>:
    50d0:	ff 25 7a bf 03 00    	jmp    *0x3bf7a(%rip)        # 41050 <__cxa_allocate_exception@CXXABI_1.3>
    50d6:	68 0a 00 00 00       	push   $0xa
    50db:	e9 40 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050e0 <_ZSt20__throw_length_errorPKc@plt>:
    50e0:	ff 25 72 bf 03 00    	jmp    *0x3bf72(%rip)        # 41058 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
    50e6:	68 0b 00 00 00       	push   $0xb
    50eb:	e9 30 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050f0 <__cxa_guard_abort@plt>:
    50f0:	ff 25 6a bf 03 00    	jmp    *0x3bf6a(%rip)        # 41060 <__cxa_guard_abort@CXXABI_1.3>
    50f6:	68 0c 00 00 00       	push   $0xc
    50fb:	e9 20 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005100 <__cxa_guard_release@plt>:
    5100:	ff 25 62 bf 03 00    	jmp    *0x3bf62(%rip)        # 41068 <__cxa_guard_release@CXXABI_1.3>
    5106:	68 0d 00 00 00       	push   $0xd
    510b:	e9 10 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005110 <__assert_fail@plt>:
    5110:	ff 25 5a bf 03 00    	jmp    *0x3bf5a(%rip)        # 41070 <__assert_fail@GLIBC_2.2.5>
    5116:	68 0e 00 00 00       	push   $0xe
    511b:	e9 00 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005120 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>:
    5120:	ff 25 52 bf 03 00    	jmp    *0x3bf52(%rip)        # 41078 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    5126:	68 0f 00 00 00       	push   $0xf
    512b:	e9 f0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005130 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@plt>:
    5130:	ff 25 4a bf 03 00    	jmp    *0x3bf4a(%rip)        # 41080 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@GLIBCXX_3.4.26>
    5136:	68 10 00 00 00       	push   $0x10
    513b:	e9 e0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005140 <_ZSt19__throw_logic_errorPKc@plt>:
    5140:	ff 25 42 bf 03 00    	jmp    *0x3bf42(%rip)        # 41088 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
    5146:	68 11 00 00 00       	push   $0x11
    514b:	e9 d0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005150 <__cxa_free_exception@plt>:
    5150:	ff 25 3a bf 03 00    	jmp    *0x3bf3a(%rip)        # 41090 <__cxa_free_exception@CXXABI_1.3>
    5156:	68 12 00 00 00       	push   $0x12
    515b:	e9 c0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005160 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>:
    5160:	ff 25 32 bf 03 00    	jmp    *0x3bf32(%rip)        # 41098 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    5166:	68 13 00 00 00       	push   $0x13
    516b:	e9 b0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005170 <glfwGetRequiredInstanceExtensions@plt>:
    5170:	ff 25 2a bf 03 00    	jmp    *0x3bf2a(%rip)        # 410a0 <glfwGetRequiredInstanceExtensions@Base>
    5176:	68 14 00 00 00       	push   $0x14
    517b:	e9 a0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005180 <_ZSt28__throw_bad_array_new_lengthv@plt>:
    5180:	ff 25 22 bf 03 00    	jmp    *0x3bf22(%rip)        # 410a8 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
    5186:	68 15 00 00 00       	push   $0x15
    518b:	e9 90 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005190 <dlclose@plt>:
    5190:	ff 25 1a bf 03 00    	jmp    *0x3bf1a(%rip)        # 410b0 <dlclose@GLIBC_2.34>
    5196:	68 16 00 00 00       	push   $0x16
    519b:	e9 80 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051a0 <memcpy@plt>:
    51a0:	ff 25 12 bf 03 00    	jmp    *0x3bf12(%rip)        # 410b8 <memcpy@GLIBC_2.14>
    51a6:	68 17 00 00 00       	push   $0x17
    51ab:	e9 70 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051b0 <glfwWindowHint@plt>:
    51b0:	ff 25 0a bf 03 00    	jmp    *0x3bf0a(%rip)        # 410c0 <glfwWindowHint@Base>
    51b6:	68 18 00 00 00       	push   $0x18
    51bb:	e9 60 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051c0 <_ZNSt12system_errorD2Ev@plt>:
    51c0:	ff 25 02 bf 03 00    	jmp    *0x3bf02(%rip)        # 410c8 <_ZNSt12system_errorD2Ev@GLIBCXX_3.4.11>
    51c6:	68 19 00 00 00       	push   $0x19
    51cb:	e9 50 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051d0 <__cxa_atexit@plt>:
    51d0:	ff 25 fa be 03 00    	jmp    *0x3befa(%rip)        # 410d0 <__cxa_atexit@GLIBC_2.2.5>
    51d6:	68 1a 00 00 00       	push   $0x1a
    51db:	e9 40 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051e0 <dlsym@plt>:
    51e0:	ff 25 f2 be 03 00    	jmp    *0x3bef2(%rip)        # 410d8 <dlsym@GLIBC_2.34>
    51e6:	68 1b 00 00 00       	push   $0x1b
    51eb:	e9 30 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051f0 <_ZdlPv@plt>:
    51f0:	ff 25 ea be 03 00    	jmp    *0x3beea(%rip)        # 410e0 <_ZdlPv@GLIBCXX_3.4>
    51f6:	68 1c 00 00 00       	push   $0x1c
    51fb:	e9 20 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005200 <glfwPollEvents@plt>:
    5200:	ff 25 e2 be 03 00    	jmp    *0x3bee2(%rip)        # 410e8 <glfwPollEvents@Base>
    5206:	68 1d 00 00 00       	push   $0x1d
    520b:	e9 10 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
    5210:	ff 25 da be 03 00    	jmp    *0x3beda(%rip)        # 410f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
    5216:	68 1e 00 00 00       	push   $0x1e
    521b:	e9 00 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005220 <_Znwm@plt>:
    5220:	ff 25 d2 be 03 00    	jmp    *0x3bed2(%rip)        # 410f8 <_Znwm@GLIBCXX_3.4>
    5226:	68 1f 00 00 00       	push   $0x1f
    522b:	e9 f0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005230 <_ZdlPvm@plt>:
    5230:	ff 25 ca be 03 00    	jmp    *0x3beca(%rip)        # 41100 <_ZdlPvm@CXXABI_1.3.9>
    5236:	68 20 00 00 00       	push   $0x20
    523b:	e9 e0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005240 <glfwTerminate@plt>:
    5240:	ff 25 c2 be 03 00    	jmp    *0x3bec2(%rip)        # 41108 <glfwTerminate@Base>
    5246:	68 21 00 00 00       	push   $0x21
    524b:	e9 d0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005250 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>:
    5250:	ff 25 ba be 03 00    	jmp    *0x3beba(%rip)        # 41110 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    5256:	68 22 00 00 00       	push   $0x22
    525b:	e9 c0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005260 <_ZNSolsEPFRSoS_E@plt>:
    5260:	ff 25 b2 be 03 00    	jmp    *0x3beb2(%rip)        # 41118 <_ZNSolsEPFRSoS_E@GLIBCXX_3.4>
    5266:	68 23 00 00 00       	push   $0x23
    526b:	e9 b0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005270 <_ZNSaIcED1Ev@plt>:
    5270:	ff 25 aa be 03 00    	jmp    *0x3beaa(%rip)        # 41120 <_ZNSaIcED1Ev@GLIBCXX_3.4>
    5276:	68 24 00 00 00       	push   $0x24
    527b:	e9 a0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005280 <vkEnumerateInstanceLayerProperties@plt>:
    5280:	ff 25 a2 be 03 00    	jmp    *0x3bea2(%rip)        # 41128 <vkEnumerateInstanceLayerProperties@Base>
    5286:	68 25 00 00 00       	push   $0x25
    528b:	e9 90 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005290 <glfwInit@plt>:
    5290:	ff 25 9a be 03 00    	jmp    *0x3be9a(%rip)        # 41130 <glfwInit@Base>
    5296:	68 26 00 00 00       	push   $0x26
    529b:	e9 80 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>:
    52a0:	ff 25 92 be 03 00    	jmp    *0x3be92(%rip)        # 41138 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@GLIBCXX_3.4>
    52a6:	68 27 00 00 00       	push   $0x27
    52ab:	e9 70 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052b0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
    52b0:	ff 25 8a be 03 00    	jmp    *0x3be8a(%rip)        # 41140 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
    52b6:	68 28 00 00 00       	push   $0x28
    52bb:	e9 60 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052c0 <_ZdaPv@plt>:
    52c0:	ff 25 82 be 03 00    	jmp    *0x3be82(%rip)        # 41148 <_ZdaPv@GLIBCXX_3.4>
    52c6:	68 29 00 00 00       	push   $0x29
    52cb:	e9 50 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052d0 <_ZNSolsEj@plt>:
    52d0:	ff 25 7a be 03 00    	jmp    *0x3be7a(%rip)        # 41150 <_ZNSolsEj@GLIBCXX_3.4>
    52d6:	68 2a 00 00 00       	push   $0x2a
    52db:	e9 40 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052e0 <_ZNKSt13runtime_error4whatEv@plt>:
    52e0:	ff 25 72 be 03 00    	jmp    *0x3be72(%rip)        # 41158 <_ZNKSt13runtime_error4whatEv@GLIBCXX_3.4>
    52e6:	68 2b 00 00 00       	push   $0x2b
    52eb:	e9 30 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052f0 <dlopen@plt>:
    52f0:	ff 25 6a be 03 00    	jmp    *0x3be6a(%rip)        # 41160 <dlopen@GLIBC_2.34>
    52f6:	68 2c 00 00 00       	push   $0x2c
    52fb:	e9 20 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005300 <_ZNSaIcEC2ERKS_@plt>:
    5300:	ff 25 62 be 03 00    	jmp    *0x3be62(%rip)        # 41168 <_ZNSaIcEC2ERKS_@GLIBCXX_3.4>
    5306:	68 2d 00 00 00       	push   $0x2d
    530b:	e9 10 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005310 <__cxa_rethrow@plt>:
    5310:	ff 25 5a be 03 00    	jmp    *0x3be5a(%rip)        # 41170 <__cxa_rethrow@CXXABI_1.3>
    5316:	68 2e 00 00 00       	push   $0x2e
    531b:	e9 00 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005320 <_ZSt24__throw_out_of_range_fmtPKcz@plt>:
    5320:	ff 25 52 be 03 00    	jmp    *0x3be52(%rip)        # 41178 <_ZSt24__throw_out_of_range_fmtPKcz@GLIBCXX_3.4.20>
    5326:	68 2f 00 00 00       	push   $0x2f
    532b:	e9 f0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005330 <_ZNSt8ios_base4InitC1Ev@plt>:
    5330:	ff 25 4a be 03 00    	jmp    *0x3be4a(%rip)        # 41180 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
    5336:	68 30 00 00 00       	push   $0x30
    533b:	e9 e0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005340 <glfwCreateWindowSurface@plt>:
    5340:	ff 25 42 be 03 00    	jmp    *0x3be42(%rip)        # 41188 <glfwCreateWindowSurface@Base>
    5346:	68 31 00 00 00       	push   $0x31
    534b:	e9 d0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005350 <glfwCreateWindow@plt>:
    5350:	ff 25 3a be 03 00    	jmp    *0x3be3a(%rip)        # 41190 <glfwCreateWindow@Base>
    5356:	68 32 00 00 00       	push   $0x32
    535b:	e9 c0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005360 <memmove@plt>:
    5360:	ff 25 32 be 03 00    	jmp    *0x3be32(%rip)        # 41198 <memmove@GLIBC_2.2.5>
    5366:	68 33 00 00 00       	push   $0x33
    536b:	e9 b0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005370 <__cxa_end_catch@plt>:
    5370:	ff 25 2a be 03 00    	jmp    *0x3be2a(%rip)        # 411a0 <__cxa_end_catch@CXXABI_1.3>
    5376:	68 34 00 00 00       	push   $0x34
    537b:	e9 a0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005380 <__cxa_throw@plt>:
    5380:	ff 25 22 be 03 00    	jmp    *0x3be22(%rip)        # 411a8 <__cxa_throw@CXXABI_1.3>
    5386:	68 35 00 00 00       	push   $0x35
    538b:	e9 90 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005390 <_ZNSt3_V214error_categoryD2Ev@plt>:
    5390:	ff 25 1a be 03 00    	jmp    *0x3be1a(%rip)        # 411b0 <_ZNSt3_V214error_categoryD2Ev@GLIBCXX_3.4.21>
    5396:	68 36 00 00 00       	push   $0x36
    539b:	e9 80 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053a0 <_Unwind_Resume@plt>:
    53a0:	ff 25 12 be 03 00    	jmp    *0x3be12(%rip)        # 411b8 <_Unwind_Resume@GCC_3.0>
    53a6:	68 37 00 00 00       	push   $0x37
    53ab:	e9 70 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053b0 <_ZNSaIcEC1Ev@plt>:
    53b0:	ff 25 0a be 03 00    	jmp    *0x3be0a(%rip)        # 411c0 <_ZNSaIcEC1Ev@GLIBCXX_3.4>
    53b6:	68 38 00 00 00       	push   $0x38
    53bb:	e9 60 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053c0 <__cxa_guard_acquire@plt>:
    53c0:	ff 25 02 be 03 00    	jmp    *0x3be02(%rip)        # 411c8 <__cxa_guard_acquire@CXXABI_1.3>
    53c6:	68 39 00 00 00       	push   $0x39
    53cb:	e9 50 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053d0 <_ZNKRSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@plt>:
    53d0:	ff 25 fa bd 03 00    	jmp    *0x3bdfa(%rip)        # 411d0 <_ZNKRSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@GLIBCXX_3.4.29>
    53d6:	68 3a 00 00 00       	push   $0x3a
    53db:	e9 40 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053e0 <_ZNSt9exceptionD2Ev@plt>:
    53e0:	ff 25 f2 bd 03 00    	jmp    *0x3bdf2(%rip)        # 411d8 <_ZNSt9exceptionD2Ev@GLIBCXX_3.4>
    53e6:	68 3b 00 00 00       	push   $0x3b
    53eb:	e9 30 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053f0 <glfwWindowShouldClose@plt>:
    53f0:	ff 25 ea bd 03 00    	jmp    *0x3bdea(%rip)        # 411e0 <glfwWindowShouldClose@Base>
    53f6:	68 3c 00 00 00       	push   $0x3c
    53fb:	e9 20 fc ff ff       	jmp    5020 <_init+0x20>

Disassembly of section .plt.got:

0000000000005400 <__cxa_finalize@plt>:
    5400:	ff 25 92 bb 03 00    	jmp    *0x3bb92(%rip)        # 40f98 <__cxa_finalize@GLIBC_2.2.5>
    5406:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000005410 <_start>:
    5410:	31 ed                	xor    %ebp,%ebp
    5412:	49 89 d1             	mov    %rdx,%r9
    5415:	5e                   	pop    %rsi
    5416:	48 89 e2             	mov    %rsp,%rdx
    5419:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    541d:	50                   	push   %rax
    541e:	54                   	push   %rsp
    541f:	45 31 c0             	xor    %r8d,%r8d
    5422:	31 c9                	xor    %ecx,%ecx
    5424:	48 8d 3d c3 0b 00 00 	lea    0xbc3(%rip),%rdi        # 5fee <main>
    542b:	ff 15 77 bb 03 00    	call   *0x3bb77(%rip)        # 40fa8 <__libc_start_main@GLIBC_2.34>
    5431:	f4                   	hlt
    5432:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    5439:	00 00 00 
    543c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005440 <deregister_tm_clones>:
    5440:	48 8d 3d e9 bd 03 00 	lea    0x3bde9(%rip),%rdi        # 41230 <__TMC_END__>
    5447:	48 8d 05 e2 bd 03 00 	lea    0x3bde2(%rip),%rax        # 41230 <__TMC_END__>
    544e:	48 39 f8             	cmp    %rdi,%rax
    5451:	74 15                	je     5468 <deregister_tm_clones+0x28>
    5453:	48 8b 05 5e bb 03 00 	mov    0x3bb5e(%rip),%rax        # 40fb8 <_ITM_deregisterTMCloneTable@Base>
    545a:	48 85 c0             	test   %rax,%rax
    545d:	74 09                	je     5468 <deregister_tm_clones+0x28>
    545f:	ff e0                	jmp    *%rax
    5461:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5468:	c3                   	ret
    5469:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000005470 <register_tm_clones>:
    5470:	48 8d 3d b9 bd 03 00 	lea    0x3bdb9(%rip),%rdi        # 41230 <__TMC_END__>
    5477:	48 8d 35 b2 bd 03 00 	lea    0x3bdb2(%rip),%rsi        # 41230 <__TMC_END__>
    547e:	48 29 fe             	sub    %rdi,%rsi
    5481:	48 89 f0             	mov    %rsi,%rax
    5484:	48 c1 ee 3f          	shr    $0x3f,%rsi
    5488:	48 c1 f8 03          	sar    $0x3,%rax
    548c:	48 01 c6             	add    %rax,%rsi
    548f:	48 d1 fe             	sar    %rsi
    5492:	74 14                	je     54a8 <register_tm_clones+0x38>
    5494:	48 8b 05 2d bb 03 00 	mov    0x3bb2d(%rip),%rax        # 40fc8 <_ITM_registerTMCloneTable@Base>
    549b:	48 85 c0             	test   %rax,%rax
    549e:	74 08                	je     54a8 <register_tm_clones+0x38>
    54a0:	ff e0                	jmp    *%rax
    54a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    54a8:	c3                   	ret
    54a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000054b0 <__do_global_dtors_aux>:
    54b0:	f3 0f 1e fa          	endbr64
    54b4:	80 3d 95 be 03 00 00 	cmpb   $0x0,0x3be95(%rip)        # 41350 <completed.0>
    54bb:	75 2b                	jne    54e8 <__do_global_dtors_aux+0x38>
    54bd:	55                   	push   %rbp
    54be:	48 83 3d d2 ba 03 00 	cmpq   $0x0,0x3bad2(%rip)        # 40f98 <__cxa_finalize@GLIBC_2.2.5>
    54c5:	00 
    54c6:	48 89 e5             	mov    %rsp,%rbp
    54c9:	74 0c                	je     54d7 <__do_global_dtors_aux+0x27>
    54cb:	48 8b 3d 26 bd 03 00 	mov    0x3bd26(%rip),%rdi        # 411f8 <__dso_handle>
    54d2:	e8 29 ff ff ff       	call   5400 <__cxa_finalize@plt>
    54d7:	e8 64 ff ff ff       	call   5440 <deregister_tm_clones>
    54dc:	c6 05 6d be 03 00 01 	movb   $0x1,0x3be6d(%rip)        # 41350 <completed.0>
    54e3:	5d                   	pop    %rbp
    54e4:	c3                   	ret
    54e5:	0f 1f 00             	nopl   (%rax)
    54e8:	c3                   	ret
    54e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000054f0 <frame_dummy>:
    54f0:	f3 0f 1e fa          	endbr64
    54f4:	e9 77 ff ff ff       	jmp    5470 <register_tm_clones>

00000000000054f9 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
  };

  namespace
  {
    [[noreturn]] void throwResultException( Result result, char const * message )
    {
    54f9:	55                   	push   %rbp
    54fa:	48 89 e5             	mov    %rsp,%rbp
    54fd:	41 54                	push   %r12
    54ff:	53                   	push   %rbx
    5500:	48 83 ec 30          	sub    $0x30,%rsp
    5504:	89 7d cc             	mov    %edi,-0x34(%rbp)
    5507:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
    550b:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    550f:	0f 89 28 07 00 00    	jns    5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5515:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
    5519:	0f 8d 3d 01 00 00    	jge    565c <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
    551f:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    5526:	0f 84 19 05 00 00    	je     5a45 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
    552c:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    5533:	0f 8f 04 07 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5539:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    5540:	0f 84 37 05 00 00    	je     5a7d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
    5546:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    554d:	0f 8f ea 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5553:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    555a:	0f 84 55 05 00 00    	je     5ab5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
    5560:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    5567:	0f 8f d0 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    556d:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    5574:	0f 84 73 05 00 00    	je     5aed <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
    557a:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    5581:	0f 8f b6 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5587:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    558e:	0f 84 91 05 00 00    	je     5b25 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
    5594:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    559b:	0f 8f 9c 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55a1:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    55a8:	0f 84 af 05 00 00    	je     5b5d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
    55ae:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    55b5:	0f 8f 82 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55bb:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    55c2:	0f 84 9d 03 00 00    	je     5965 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
    55c8:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    55cf:	0f 8f 68 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55d5:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    55dc:	0f 84 bb 03 00 00    	je     599d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
    55e2:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    55e9:	0f 8f 4e 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55ef:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    55f6:	0f 84 99 05 00 00    	je     5b95 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
    55fc:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    5603:	0f 8f 34 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5609:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    5610:	0f 84 bf 03 00 00    	je     59d5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
    5616:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    561d:	0f 8f 1a 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5623:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    562a:	0f 84 9d 05 00 00    	je     5bcd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
    5630:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    5637:	0f 8f 00 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    563d:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
    5644:	0f 84 bb 05 00 00    	je     5c05 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
    564a:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
    5651:	0f 84 b6 03 00 00    	je     5a0d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
    5657:	e9 e1 05 00 00       	jmp    5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    565c:	8b 45 cc             	mov    -0x34(%rbp),%eax
    565f:	83 c0 0d             	add    $0xd,%eax
    5662:	83 f8 0c             	cmp    $0xc,%eax
    5665:	0f 87 d2 05 00 00    	ja     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    566b:	89 c0                	mov    %eax,%eax
    566d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    5674:	00 
    5675:	48 8d 05 64 33 02 00 	lea    0x23364(%rip),%rax        # 289e0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    567c:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    567f:	48 98                	cltq
    5681:	48 8d 15 58 33 02 00 	lea    0x23358(%rip),%rdx        # 289e0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    5688:	48 01 d0             	add    %rdx,%rax
    568b:	ff e0                	jmp    *%rax
      {
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    568d:	bf 28 00 00 00       	mov    $0x28,%edi
    5692:	e8 39 fa ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5697:	48 89 c3             	mov    %rax,%rbx
    569a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    569e:	48 89 c6             	mov    %rax,%rsi
    56a1:	48 89 df             	mov    %rbx,%rdi
    56a4:	e8 1d 23 00 00       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
    56a9:	48 8d 05 46 75 00 00 	lea    0x7546(%rip),%rax        # cbf6 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    56b0:	48 89 c2             	mov    %rax,%rdx
    56b3:	48 8d 05 2e b6 03 00 	lea    0x3b62e(%rip),%rax        # 40ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    56ba:	48 89 c6             	mov    %rax,%rsi
    56bd:	48 89 df             	mov    %rbx,%rdi
    56c0:	e8 bb fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    56c5:	bf 28 00 00 00       	mov    $0x28,%edi
    56ca:	e8 01 fa ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    56cf:	48 89 c3             	mov    %rax,%rbx
    56d2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    56d6:	48 89 c6             	mov    %rax,%rsi
    56d9:	48 89 df             	mov    %rbx,%rdi
    56dc:	e8 b7 23 00 00       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
    56e1:	48 8d 05 9e 74 00 00 	lea    0x749e(%rip),%rax        # cb86 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    56e8:	48 89 c2             	mov    %rax,%rdx
    56eb:	48 8d 05 de b5 03 00 	lea    0x3b5de(%rip),%rax        # 40cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    56f2:	48 89 c6             	mov    %rax,%rsi
    56f5:	48 89 df             	mov    %rbx,%rdi
    56f8:	e8 83 fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    56fd:	bf 28 00 00 00       	mov    $0x28,%edi
    5702:	e8 c9 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5707:	48 89 c3             	mov    %rax,%rbx
    570a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    570e:	48 89 c6             	mov    %rax,%rsi
    5711:	48 89 df             	mov    %rbx,%rdi
    5714:	e8 51 24 00 00       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
    5719:	48 8d 05 f6 73 00 00 	lea    0x73f6(%rip),%rax        # cb16 <_ZN2vk25InitializationFailedErrorD1Ev>
    5720:	48 89 c2             	mov    %rax,%rdx
    5723:	48 8d 05 8e b5 03 00 	lea    0x3b58e(%rip),%rax        # 40cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    572a:	48 89 c6             	mov    %rax,%rsi
    572d:	48 89 df             	mov    %rbx,%rdi
    5730:	e8 4b fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    5735:	bf 28 00 00 00       	mov    $0x28,%edi
    573a:	e8 91 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    573f:	48 89 c3             	mov    %rax,%rbx
    5742:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5746:	48 89 c6             	mov    %rax,%rsi
    5749:	48 89 df             	mov    %rbx,%rdi
    574c:	e8 eb 24 00 00       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
    5751:	48 8d 05 4e 73 00 00 	lea    0x734e(%rip),%rax        # caa6 <_ZN2vk15DeviceLostErrorD1Ev>
    5758:	48 89 c2             	mov    %rax,%rdx
    575b:	48 8d 05 3e b5 03 00 	lea    0x3b53e(%rip),%rax        # 40ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5762:	48 89 c6             	mov    %rax,%rsi
    5765:	48 89 df             	mov    %rbx,%rdi
    5768:	e8 13 fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    576d:	bf 28 00 00 00       	mov    $0x28,%edi
    5772:	e8 59 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5777:	48 89 c3             	mov    %rax,%rbx
    577a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    577e:	48 89 c6             	mov    %rax,%rsi
    5781:	48 89 df             	mov    %rbx,%rdi
    5784:	e8 85 25 00 00       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
    5789:	48 8d 05 a6 72 00 00 	lea    0x72a6(%rip),%rax        # ca36 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    5790:	48 89 c2             	mov    %rax,%rdx
    5793:	48 8d 05 ee b4 03 00 	lea    0x3b4ee(%rip),%rax        # 40c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    579a:	48 89 c6             	mov    %rax,%rsi
    579d:	48 89 df             	mov    %rbx,%rdi
    57a0:	e8 db fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    57a5:	bf 28 00 00 00       	mov    $0x28,%edi
    57aa:	e8 21 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    57af:	48 89 c3             	mov    %rax,%rbx
    57b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    57b6:	48 89 c6             	mov    %rax,%rsi
    57b9:	48 89 df             	mov    %rbx,%rdi
    57bc:	e8 1f 26 00 00       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
    57c1:	48 8d 05 fe 71 00 00 	lea    0x71fe(%rip),%rax        # c9c6 <_ZN2vk20LayerNotPresentErrorD1Ev>
    57c8:	48 89 c2             	mov    %rax,%rdx
    57cb:	48 8d 05 9e b4 03 00 	lea    0x3b49e(%rip),%rax        # 40c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    57d2:	48 89 c6             	mov    %rax,%rsi
    57d5:	48 89 df             	mov    %rbx,%rdi
    57d8:	e8 a3 fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    57dd:	bf 28 00 00 00       	mov    $0x28,%edi
    57e2:	e8 e9 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    57e7:	48 89 c3             	mov    %rax,%rbx
    57ea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    57ee:	48 89 c6             	mov    %rax,%rsi
    57f1:	48 89 df             	mov    %rbx,%rdi
    57f4:	e8 b9 26 00 00       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
    57f9:	48 8d 05 56 71 00 00 	lea    0x7156(%rip),%rax        # c956 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    5800:	48 89 c2             	mov    %rax,%rdx
    5803:	48 8d 05 4e b4 03 00 	lea    0x3b44e(%rip),%rax        # 40c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    580a:	48 89 c6             	mov    %rax,%rsi
    580d:	48 89 df             	mov    %rbx,%rdi
    5810:	e8 6b fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    5815:	bf 28 00 00 00       	mov    $0x28,%edi
    581a:	e8 b1 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    581f:	48 89 c3             	mov    %rax,%rbx
    5822:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5826:	48 89 c6             	mov    %rax,%rsi
    5829:	48 89 df             	mov    %rbx,%rdi
    582c:	e8 53 27 00 00       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
    5831:	48 8d 05 ae 70 00 00 	lea    0x70ae(%rip),%rax        # c8e6 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    5838:	48 89 c2             	mov    %rax,%rdx
    583b:	48 8d 05 fe b3 03 00 	lea    0x3b3fe(%rip),%rax        # 40c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5842:	48 89 c6             	mov    %rax,%rsi
    5845:	48 89 df             	mov    %rbx,%rdi
    5848:	e8 33 fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    584d:	bf 28 00 00 00       	mov    $0x28,%edi
    5852:	e8 79 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5857:	48 89 c3             	mov    %rax,%rbx
    585a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    585e:	48 89 c6             	mov    %rax,%rsi
    5861:	48 89 df             	mov    %rbx,%rdi
    5864:	e8 ed 27 00 00       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
    5869:	48 8d 05 06 70 00 00 	lea    0x7006(%rip),%rax        # c876 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    5870:	48 89 c2             	mov    %rax,%rdx
    5873:	48 8d 05 ae b3 03 00 	lea    0x3b3ae(%rip),%rax        # 40c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    587a:	48 89 c6             	mov    %rax,%rsi
    587d:	48 89 df             	mov    %rbx,%rdi
    5880:	e8 fb fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    5885:	bf 28 00 00 00       	mov    $0x28,%edi
    588a:	e8 41 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    588f:	48 89 c3             	mov    %rax,%rbx
    5892:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5896:	48 89 c6             	mov    %rax,%rsi
    5899:	48 89 df             	mov    %rbx,%rdi
    589c:	e8 87 28 00 00       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
    58a1:	48 8d 05 5e 6f 00 00 	lea    0x6f5e(%rip),%rax        # c806 <_ZN2vk19TooManyObjectsErrorD1Ev>
    58a8:	48 89 c2             	mov    %rax,%rdx
    58ab:	48 8d 05 5e b3 03 00 	lea    0x3b35e(%rip),%rax        # 40c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    58b2:	48 89 c6             	mov    %rax,%rsi
    58b5:	48 89 df             	mov    %rbx,%rdi
    58b8:	e8 c3 fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    58bd:	bf 28 00 00 00       	mov    $0x28,%edi
    58c2:	e8 09 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    58c7:	48 89 c3             	mov    %rax,%rbx
    58ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    58ce:	48 89 c6             	mov    %rax,%rsi
    58d1:	48 89 df             	mov    %rbx,%rdi
    58d4:	e8 21 29 00 00       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
    58d9:	48 8d 05 b6 6e 00 00 	lea    0x6eb6(%rip),%rax        # c796 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    58e0:	48 89 c2             	mov    %rax,%rdx
    58e3:	48 8d 05 0e b3 03 00 	lea    0x3b30e(%rip),%rax        # 40bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    58ea:	48 89 c6             	mov    %rax,%rsi
    58ed:	48 89 df             	mov    %rbx,%rdi
    58f0:	e8 8b fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    58f5:	bf 28 00 00 00       	mov    $0x28,%edi
    58fa:	e8 d1 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    58ff:	48 89 c3             	mov    %rax,%rbx
    5902:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5906:	48 89 c6             	mov    %rax,%rsi
    5909:	48 89 df             	mov    %rbx,%rdi
    590c:	e8 bb 29 00 00       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
    5911:	48 8d 05 0e 6e 00 00 	lea    0x6e0e(%rip),%rax        # c726 <_ZN2vk19FragmentedPoolErrorD1Ev>
    5918:	48 89 c2             	mov    %rax,%rdx
    591b:	48 8d 05 be b2 03 00 	lea    0x3b2be(%rip),%rax        # 40be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5922:	48 89 c6             	mov    %rax,%rsi
    5925:	48 89 df             	mov    %rbx,%rdi
    5928:	e8 53 fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    592d:	bf 28 00 00 00       	mov    $0x28,%edi
    5932:	e8 99 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5937:	48 89 c3             	mov    %rax,%rbx
    593a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    593e:	48 89 c6             	mov    %rax,%rsi
    5941:	48 89 df             	mov    %rbx,%rdi
    5944:	e8 55 2a 00 00       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
    5949:	48 8d 05 66 6d 00 00 	lea    0x6d66(%rip),%rax        # c6b6 <_ZN2vk12UnknownErrorD1Ev>
    5950:	48 89 c2             	mov    %rax,%rdx
    5953:	48 8d 05 6e b2 03 00 	lea    0x3b26e(%rip),%rax        # 40bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    595a:	48 89 c6             	mov    %rax,%rsi
    595d:	48 89 df             	mov    %rbx,%rdi
    5960:	e8 1b fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    5965:	bf 28 00 00 00       	mov    $0x28,%edi
    596a:	e8 61 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    596f:	48 89 c3             	mov    %rax,%rbx
    5972:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5976:	48 89 c6             	mov    %rax,%rsi
    5979:	48 89 df             	mov    %rbx,%rdi
    597c:	e8 ef 2a 00 00       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
    5981:	48 8d 05 be 6c 00 00 	lea    0x6cbe(%rip),%rax        # c646 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    5988:	48 89 c2             	mov    %rax,%rdx
    598b:	48 8d 05 1e b2 03 00 	lea    0x3b21e(%rip),%rax        # 40bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5992:	48 89 c6             	mov    %rax,%rsi
    5995:	48 89 df             	mov    %rbx,%rdi
    5998:	e8 e3 f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    599d:	bf 28 00 00 00       	mov    $0x28,%edi
    59a2:	e8 29 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    59a7:	48 89 c3             	mov    %rax,%rbx
    59aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    59ae:	48 89 c6             	mov    %rax,%rsi
    59b1:	48 89 df             	mov    %rbx,%rdi
    59b4:	e8 89 2b 00 00       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
    59b9:	48 8d 05 16 6c 00 00 	lea    0x6c16(%rip),%rax        # c5d6 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    59c0:	48 89 c2             	mov    %rax,%rdx
    59c3:	48 8d 05 ce b1 03 00 	lea    0x3b1ce(%rip),%rax        # 40b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    59ca:	48 89 c6             	mov    %rax,%rsi
    59cd:	48 89 df             	mov    %rbx,%rdi
    59d0:	e8 ab f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    59d5:	bf 28 00 00 00       	mov    $0x28,%edi
    59da:	e8 f1 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    59df:	48 89 c3             	mov    %rax,%rbx
    59e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    59e6:	48 89 c6             	mov    %rax,%rsi
    59e9:	48 89 df             	mov    %rbx,%rdi
    59ec:	e8 23 2c 00 00       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
    59f1:	48 8d 05 6e 6b 00 00 	lea    0x6b6e(%rip),%rax        # c566 <_ZN2vk18FragmentationErrorD1Ev>
    59f8:	48 89 c2             	mov    %rax,%rdx
    59fb:	48 8d 05 7e b1 03 00 	lea    0x3b17e(%rip),%rax        # 40b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5a02:	48 89 c6             	mov    %rax,%rsi
    5a05:	48 89 df             	mov    %rbx,%rdi
    5a08:	e8 73 f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    5a0d:	bf 28 00 00 00       	mov    $0x28,%edi
    5a12:	e8 b9 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5a17:	48 89 c3             	mov    %rax,%rbx
    5a1a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5a1e:	48 89 c6             	mov    %rax,%rsi
    5a21:	48 89 df             	mov    %rbx,%rdi
    5a24:	e8 bd 2c 00 00       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
    5a29:	48 8d 05 c6 6a 00 00 	lea    0x6ac6(%rip),%rax        # c4f6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    5a30:	48 89 c2             	mov    %rax,%rdx
    5a33:	48 8d 05 2e b1 03 00 	lea    0x3b12e(%rip),%rax        # 40b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5a3a:	48 89 c6             	mov    %rax,%rsi
    5a3d:	48 89 df             	mov    %rbx,%rdi
    5a40:	e8 3b f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    5a45:	bf 28 00 00 00       	mov    $0x28,%edi
    5a4a:	e8 81 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5a4f:	48 89 c3             	mov    %rax,%rbx
    5a52:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5a56:	48 89 c6             	mov    %rax,%rsi
    5a59:	48 89 df             	mov    %rbx,%rdi
    5a5c:	e8 57 2d 00 00       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
    5a61:	48 8d 05 1e 6a 00 00 	lea    0x6a1e(%rip),%rax        # c486 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    5a68:	48 89 c2             	mov    %rax,%rdx
    5a6b:	48 8d 05 de b0 03 00 	lea    0x3b0de(%rip),%rax        # 40b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5a72:	48 89 c6             	mov    %rax,%rsi
    5a75:	48 89 df             	mov    %rbx,%rdi
    5a78:	e8 03 f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    5a7d:	bf 28 00 00 00       	mov    $0x28,%edi
    5a82:	e8 49 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5a87:	48 89 c3             	mov    %rax,%rbx
    5a8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5a8e:	48 89 c6             	mov    %rax,%rsi
    5a91:	48 89 df             	mov    %rbx,%rdi
    5a94:	e8 f1 2d 00 00       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
    5a99:	48 8d 05 76 69 00 00 	lea    0x6976(%rip),%rax        # c416 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    5aa0:	48 89 c2             	mov    %rax,%rdx
    5aa3:	48 8d 05 8e b0 03 00 	lea    0x3b08e(%rip),%rax        # 40b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5aaa:	48 89 c6             	mov    %rax,%rsi
    5aad:	48 89 df             	mov    %rbx,%rdi
    5ab0:	e8 cb f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    5ab5:	bf 28 00 00 00       	mov    $0x28,%edi
    5aba:	e8 11 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5abf:	48 89 c3             	mov    %rax,%rbx
    5ac2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5ac6:	48 89 c6             	mov    %rax,%rsi
    5ac9:	48 89 df             	mov    %rbx,%rdi
    5acc:	e8 8b 2e 00 00       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
    5ad1:	48 8d 05 ce 68 00 00 	lea    0x68ce(%rip),%rax        # c3a6 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    5ad8:	48 89 c2             	mov    %rax,%rdx
    5adb:	48 8d 05 3e b0 03 00 	lea    0x3b03e(%rip),%rax        # 40b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5ae2:	48 89 c6             	mov    %rax,%rsi
    5ae5:	48 89 df             	mov    %rbx,%rdi
    5ae8:	e8 93 f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    5aed:	bf 28 00 00 00       	mov    $0x28,%edi
    5af2:	e8 d9 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5af7:	48 89 c3             	mov    %rax,%rbx
    5afa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5afe:	48 89 c6             	mov    %rax,%rsi
    5b01:	48 89 df             	mov    %rbx,%rdi
    5b04:	e8 25 2f 00 00       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
    5b09:	48 8d 05 26 68 00 00 	lea    0x6826(%rip),%rax        # c336 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    5b10:	48 89 c2             	mov    %rax,%rdx
    5b13:	48 8d 05 ee af 03 00 	lea    0x3afee(%rip),%rax        # 40b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5b1a:	48 89 c6             	mov    %rax,%rsi
    5b1d:	48 89 df             	mov    %rbx,%rdi
    5b20:	e8 5b f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    5b25:	bf 28 00 00 00       	mov    $0x28,%edi
    5b2a:	e8 a1 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5b2f:	48 89 c3             	mov    %rax,%rbx
    5b32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5b36:	48 89 c6             	mov    %rax,%rsi
    5b39:	48 89 df             	mov    %rbx,%rdi
    5b3c:	e8 bf 2f 00 00       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
    5b41:	48 8d 05 7e 67 00 00 	lea    0x677e(%rip),%rax        # c2c6 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    5b48:	48 89 c2             	mov    %rax,%rdx
    5b4b:	48 8d 05 9e af 03 00 	lea    0x3af9e(%rip),%rax        # 40af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5b52:	48 89 c6             	mov    %rax,%rsi
    5b55:	48 89 df             	mov    %rbx,%rdi
    5b58:	e8 23 f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    5b5d:	bf 28 00 00 00       	mov    $0x28,%edi
    5b62:	e8 69 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5b67:	48 89 c3             	mov    %rax,%rbx
    5b6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5b6e:	48 89 c6             	mov    %rax,%rsi
    5b71:	48 89 df             	mov    %rbx,%rdi
    5b74:	e8 59 30 00 00       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
    5b79:	48 8d 05 d6 66 00 00 	lea    0x66d6(%rip),%rax        # c256 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    5b80:	48 89 c2             	mov    %rax,%rdx
    5b83:	48 8d 05 4e af 03 00 	lea    0x3af4e(%rip),%rax        # 40ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5b8a:	48 89 c6             	mov    %rax,%rsi
    5b8d:	48 89 df             	mov    %rbx,%rdi
    5b90:	e8 eb f7 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorVideoProfileCodecNotSupportedKHR: throw VideoProfileCodecNotSupportedKHRError( message );
#  endif /*VK_ENABLE_BETA_EXTENSIONS*/
#  if defined( VK_ENABLE_BETA_EXTENSIONS )
        case Result::eErrorVideoStdVersionNotSupportedKHR: throw VideoStdVersionNotSupportedKHRError( message );
#  endif /*VK_ENABLE_BETA_EXTENSIONS*/
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    5b95:	bf 28 00 00 00       	mov    $0x28,%edi
    5b9a:	e8 31 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5b9f:	48 89 c3             	mov    %rax,%rbx
    5ba2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5ba6:	48 89 c6             	mov    %rax,%rsi
    5ba9:	48 89 df             	mov    %rbx,%rdi
    5bac:	e8 f3 30 00 00       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
    5bb1:	48 8d 05 2e 66 00 00 	lea    0x662e(%rip),%rax        # c1e6 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    5bb8:	48 89 c2             	mov    %rax,%rdx
    5bbb:	48 8d 05 fe ae 03 00 	lea    0x3aefe(%rip),%rax        # 40ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5bc2:	48 89 c6             	mov    %rax,%rsi
    5bc5:	48 89 df             	mov    %rbx,%rdi
    5bc8:	e8 b3 f7 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    5bcd:	bf 28 00 00 00       	mov    $0x28,%edi
    5bd2:	e8 f9 f4 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5bd7:	48 89 c3             	mov    %rax,%rbx
    5bda:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5bde:	48 89 c6             	mov    %rax,%rsi
    5be1:	48 89 df             	mov    %rbx,%rdi
    5be4:	e8 8d 31 00 00       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
    5be9:	48 8d 05 86 65 00 00 	lea    0x6586(%rip),%rax        # c176 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    5bf0:	48 89 c2             	mov    %rax,%rdx
    5bf3:	48 8d 05 ae ae 03 00 	lea    0x3aeae(%rip),%rax        # 40aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5bfa:	48 89 c6             	mov    %rax,%rsi
    5bfd:	48 89 df             	mov    %rbx,%rdi
    5c00:	e8 7b f7 ff ff       	call   5380 <__cxa_throw@plt>
#  if defined( VK_USE_PLATFORM_WIN32_KHR )
        case Result::eErrorFullScreenExclusiveModeLostEXT: throw FullScreenExclusiveModeLostEXTError( message );
#  endif /*VK_USE_PLATFORM_WIN32_KHR*/
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    5c05:	bf 28 00 00 00       	mov    $0x28,%edi
    5c0a:	e8 c1 f4 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5c0f:	48 89 c3             	mov    %rax,%rbx
    5c12:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5c16:	48 89 c6             	mov    %rax,%rsi
    5c19:	48 89 df             	mov    %rbx,%rdi
    5c1c:	e8 27 32 00 00       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
    5c21:	48 8d 05 de 64 00 00 	lea    0x64de(%rip),%rax        # c106 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    5c28:	48 89 c2             	mov    %rax,%rdx
    5c2b:	48 8d 05 5e ae 03 00 	lea    0x3ae5e(%rip),%rax        # 40a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5c32:	48 89 c6             	mov    %rax,%rsi
    5c35:	48 89 df             	mov    %rbx,%rdi
    5c38:	e8 43 f7 ff ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
    5c3d:	bf 28 00 00 00       	mov    $0x28,%edi
    5c42:	e8 89 f4 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5c47:	48 89 c3             	mov    %rax,%rbx
    5c4a:	8b 45 cc             	mov    -0x34(%rbp),%eax
    5c4d:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    5c50:	0f b6 05 01 b7 03 00 	movzbl 0x3b701(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    5c57:	84 c0                	test   %al,%al
    5c59:	0f 94 c0             	sete   %al
    5c5c:	84 c0                	test   %al,%al
    5c5e:	74 4a                	je     5caa <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    5c60:	48 8d 05 f1 b6 03 00 	lea    0x3b6f1(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    5c67:	48 89 c7             	mov    %rax,%rdi
    5c6a:	e8 51 f7 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    5c6f:	85 c0                	test   %eax,%eax
    5c71:	0f 95 c0             	setne  %al
    5c74:	84 c0                	test   %al,%al
    5c76:	74 32                	je     5caa <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    5c78:	48 8d 05 79 b5 03 00 	lea    0x3b579(%rip),%rax        # 411f8 <__dso_handle>
    5c7f:	48 89 c2             	mov    %rax,%rdx
    5c82:	48 8d 05 77 b5 03 00 	lea    0x3b577(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    5c89:	48 89 c6             	mov    %rax,%rsi
    5c8c:	48 8d 05 d3 6f 00 00 	lea    0x6fd3(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    5c93:	48 89 c7             	mov    %rax,%rdi
    5c96:	e8 35 f5 ff ff       	call   51d0 <__cxa_atexit@plt>
    5c9b:	48 8d 05 b6 b6 03 00 	lea    0x3b6b6(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    5ca2:	48 89 c7             	mov    %rax,%rdi
    5ca5:	e8 56 f4 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    5caa:	48 8d 15 4f b5 03 00 	lea    0x3b54f(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    5cb1:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    5cb4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5cb8:	89 ce                	mov    %ecx,%esi
    5cba:	48 89 c7             	mov    %rax,%rdi
    5cbd:	e8 46 06 00 00       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    5cc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5cc6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
    5cca:	48 89 c6             	mov    %rax,%rsi
    5ccd:	48 89 d7             	mov    %rdx,%rdi
    5cd0:	89 f1                	mov    %esi,%ecx
    5cd2:	48 89 d0             	mov    %rdx,%rax
    5cd5:	89 ce                	mov    %ecx,%esi
    5cd7:	48 89 c2             	mov    %rax,%rdx
    5cda:	48 89 df             	mov    %rbx,%rdi
    5cdd:	e8 2e 1b 00 00       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
    5ce2:	48 8d 05 5d 1c 00 00 	lea    0x1c5d(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
    5ce9:	48 89 c2             	mov    %rax,%rdx
    5cec:	48 8d 05 0d b0 03 00 	lea    0x3b00d(%rip),%rax        # 40d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
    5cf3:	48 89 c6             	mov    %rax,%rsi
    5cf6:	48 89 df             	mov    %rbx,%rdi
    5cf9:	e8 82 f6 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    5cfe:	49 89 c4             	mov    %rax,%r12
    5d01:	48 89 df             	mov    %rbx,%rdi
    5d04:	e8 47 f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d09:	4c 89 e0             	mov    %r12,%rax
    5d0c:	48 89 c7             	mov    %rax,%rdi
    5d0f:	e8 8c f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    5d14:	49 89 c4             	mov    %rax,%r12
    5d17:	48 89 df             	mov    %rbx,%rdi
    5d1a:	e8 31 f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d1f:	4c 89 e0             	mov    %r12,%rax
    5d22:	48 89 c7             	mov    %rax,%rdi
    5d25:	e8 76 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    5d2a:	49 89 c4             	mov    %rax,%r12
    5d2d:	48 89 df             	mov    %rbx,%rdi
    5d30:	e8 1b f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d35:	4c 89 e0             	mov    %r12,%rax
    5d38:	48 89 c7             	mov    %rax,%rdi
    5d3b:	e8 60 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    5d40:	49 89 c4             	mov    %rax,%r12
    5d43:	48 89 df             	mov    %rbx,%rdi
    5d46:	e8 05 f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d4b:	4c 89 e0             	mov    %r12,%rax
    5d4e:	48 89 c7             	mov    %rax,%rdi
    5d51:	e8 4a f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    5d56:	49 89 c4             	mov    %rax,%r12
    5d59:	48 89 df             	mov    %rbx,%rdi
    5d5c:	e8 ef f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d61:	4c 89 e0             	mov    %r12,%rax
    5d64:	48 89 c7             	mov    %rax,%rdi
    5d67:	e8 34 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    5d6c:	49 89 c4             	mov    %rax,%r12
    5d6f:	48 89 df             	mov    %rbx,%rdi
    5d72:	e8 d9 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d77:	4c 89 e0             	mov    %r12,%rax
    5d7a:	48 89 c7             	mov    %rax,%rdi
    5d7d:	e8 1e f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    5d82:	49 89 c4             	mov    %rax,%r12
    5d85:	48 89 df             	mov    %rbx,%rdi
    5d88:	e8 c3 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d8d:	4c 89 e0             	mov    %r12,%rax
    5d90:	48 89 c7             	mov    %rax,%rdi
    5d93:	e8 08 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    5d98:	49 89 c4             	mov    %rax,%r12
    5d9b:	48 89 df             	mov    %rbx,%rdi
    5d9e:	e8 ad f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5da3:	4c 89 e0             	mov    %r12,%rax
    5da6:	48 89 c7             	mov    %rax,%rdi
    5da9:	e8 f2 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    5dae:	49 89 c4             	mov    %rax,%r12
    5db1:	48 89 df             	mov    %rbx,%rdi
    5db4:	e8 97 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5db9:	4c 89 e0             	mov    %r12,%rax
    5dbc:	48 89 c7             	mov    %rax,%rdi
    5dbf:	e8 dc f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    5dc4:	49 89 c4             	mov    %rax,%r12
    5dc7:	48 89 df             	mov    %rbx,%rdi
    5dca:	e8 81 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5dcf:	4c 89 e0             	mov    %r12,%rax
    5dd2:	48 89 c7             	mov    %rax,%rdi
    5dd5:	e8 c6 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    5dda:	49 89 c4             	mov    %rax,%r12
    5ddd:	48 89 df             	mov    %rbx,%rdi
    5de0:	e8 6b f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5de5:	4c 89 e0             	mov    %r12,%rax
    5de8:	48 89 c7             	mov    %rax,%rdi
    5deb:	e8 b0 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    5df0:	49 89 c4             	mov    %rax,%r12
    5df3:	48 89 df             	mov    %rbx,%rdi
    5df6:	e8 55 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5dfb:	4c 89 e0             	mov    %r12,%rax
    5dfe:	48 89 c7             	mov    %rax,%rdi
    5e01:	e8 9a f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    5e06:	49 89 c4             	mov    %rax,%r12
    5e09:	48 89 df             	mov    %rbx,%rdi
    5e0c:	e8 3f f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e11:	4c 89 e0             	mov    %r12,%rax
    5e14:	48 89 c7             	mov    %rax,%rdi
    5e17:	e8 84 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    5e1c:	49 89 c4             	mov    %rax,%r12
    5e1f:	48 89 df             	mov    %rbx,%rdi
    5e22:	e8 29 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e27:	4c 89 e0             	mov    %r12,%rax
    5e2a:	48 89 c7             	mov    %rax,%rdi
    5e2d:	e8 6e f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    5e32:	49 89 c4             	mov    %rax,%r12
    5e35:	48 89 df             	mov    %rbx,%rdi
    5e38:	e8 13 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e3d:	4c 89 e0             	mov    %r12,%rax
    5e40:	48 89 c7             	mov    %rax,%rdi
    5e43:	e8 58 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    5e48:	49 89 c4             	mov    %rax,%r12
    5e4b:	48 89 df             	mov    %rbx,%rdi
    5e4e:	e8 fd f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e53:	4c 89 e0             	mov    %r12,%rax
    5e56:	48 89 c7             	mov    %rax,%rdi
    5e59:	e8 42 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    5e5e:	49 89 c4             	mov    %rax,%r12
    5e61:	48 89 df             	mov    %rbx,%rdi
    5e64:	e8 e7 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e69:	4c 89 e0             	mov    %r12,%rax
    5e6c:	48 89 c7             	mov    %rax,%rdi
    5e6f:	e8 2c f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    5e74:	49 89 c4             	mov    %rax,%r12
    5e77:	48 89 df             	mov    %rbx,%rdi
    5e7a:	e8 d1 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e7f:	4c 89 e0             	mov    %r12,%rax
    5e82:	48 89 c7             	mov    %rax,%rdi
    5e85:	e8 16 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    5e8a:	49 89 c4             	mov    %rax,%r12
    5e8d:	48 89 df             	mov    %rbx,%rdi
    5e90:	e8 bb f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e95:	4c 89 e0             	mov    %r12,%rax
    5e98:	48 89 c7             	mov    %rax,%rdi
    5e9b:	e8 00 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    5ea0:	49 89 c4             	mov    %rax,%r12
    5ea3:	48 89 df             	mov    %rbx,%rdi
    5ea6:	e8 a5 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5eab:	4c 89 e0             	mov    %r12,%rax
    5eae:	48 89 c7             	mov    %rax,%rdi
    5eb1:	e8 ea f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    5eb6:	49 89 c4             	mov    %rax,%r12
    5eb9:	48 89 df             	mov    %rbx,%rdi
    5ebc:	e8 8f f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5ec1:	4c 89 e0             	mov    %r12,%rax
    5ec4:	48 89 c7             	mov    %rax,%rdi
    5ec7:	e8 d4 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    5ecc:	49 89 c4             	mov    %rax,%r12
    5ecf:	48 89 df             	mov    %rbx,%rdi
    5ed2:	e8 79 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5ed7:	4c 89 e0             	mov    %r12,%rax
    5eda:	48 89 c7             	mov    %rax,%rdi
    5edd:	e8 be f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    5ee2:	49 89 c4             	mov    %rax,%r12
    5ee5:	48 89 df             	mov    %rbx,%rdi
    5ee8:	e8 63 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5eed:	4c 89 e0             	mov    %r12,%rax
    5ef0:	48 89 c7             	mov    %rax,%rdi
    5ef3:	e8 a8 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    5ef8:	49 89 c4             	mov    %rax,%r12
    5efb:	48 89 df             	mov    %rbx,%rdi
    5efe:	e8 4d f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f03:	4c 89 e0             	mov    %r12,%rax
    5f06:	48 89 c7             	mov    %rax,%rdi
    5f09:	e8 92 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    5f0e:	49 89 c4             	mov    %rax,%r12
    5f11:	48 89 df             	mov    %rbx,%rdi
    5f14:	e8 37 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f19:	4c 89 e0             	mov    %r12,%rax
    5f1c:	48 89 c7             	mov    %rax,%rdi
    5f1f:	e8 7c f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    5f24:	49 89 c4             	mov    %rax,%r12
    5f27:	48 89 df             	mov    %rbx,%rdi
    5f2a:	e8 21 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f2f:	4c 89 e0             	mov    %r12,%rax
    5f32:	48 89 c7             	mov    %rax,%rdi
    5f35:	e8 66 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
    5f3a:	49 89 c4             	mov    %rax,%r12
    5f3d:	48 89 df             	mov    %rbx,%rdi
    5f40:	e8 0b f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f45:	4c 89 e0             	mov    %r12,%rax
    5f48:	48 89 c7             	mov    %rax,%rdi
    5f4b:	e8 50 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>

0000000000005f50 <_Z14protected_mainv>:
#include <vulkan_app.hpp>

#include <iostream>

int protected_main() {
    5f50:	55                   	push   %rbp
    5f51:	48 89 e5             	mov    %rsp,%rbp
    5f54:	41 55                	push   %r13
    5f56:	41 54                	push   %r12
    5f58:	53                   	push   %rbx
    5f59:	48 83 ec 18          	sub    $0x18,%rsp
  auto app = new rtvc::VulkanApp{};
    5f5d:	bf 28 01 00 00       	mov    $0x128,%edi
    5f62:	e8 b9 f2 ff ff       	call   5220 <_Znwm@plt>
    5f67:	48 89 c3             	mov    %rax,%rbx
    5f6a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    5f70:	48 89 de             	mov    %rbx,%rsi
    5f73:	b8 00 00 00 00       	mov    $0x0,%eax
    5f78:	ba 25 00 00 00       	mov    $0x25,%edx
    5f7d:	48 89 f7             	mov    %rsi,%rdi
    5f80:	48 89 d1             	mov    %rdx,%rcx
    5f83:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    5f86:	48 89 df             	mov    %rbx,%rdi
    5f89:	e8 ee 3e 00 00       	call   9e7c <_ZN4rtvc9VulkanAppC1Ev>
    5f8e:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  app->render();
    5f92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f96:	48 89 c7             	mov    %rax,%rdi
    5f99:	e8 a6 3e 00 00       	call   9e44 <_ZN4rtvc9VulkanApp6renderEv>
  delete app;
    5f9e:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    5fa2:	48 85 db             	test   %rbx,%rbx
    5fa5:	74 15                	je     5fbc <_Z14protected_mainv+0x6c>
    5fa7:	48 89 df             	mov    %rbx,%rdi
    5faa:	e8 d5 40 00 00       	call   a084 <_ZN4rtvc9VulkanAppD1Ev>
    5faf:	be 28 01 00 00       	mov    $0x128,%esi
    5fb4:	48 89 df             	mov    %rbx,%rdi
    5fb7:	e8 74 f2 ff ff       	call   5230 <_ZdlPvm@plt>
  return EXIT_SUCCESS;
    5fbc:	b8 00 00 00 00       	mov    $0x0,%eax
    5fc1:	eb 20                	jmp    5fe3 <_Z14protected_mainv+0x93>
  auto app = new rtvc::VulkanApp{};
    5fc3:	49 89 c4             	mov    %rax,%r12
    5fc6:	45 84 ed             	test   %r13b,%r13b
    5fc9:	74 0d                	je     5fd8 <_Z14protected_mainv+0x88>
    5fcb:	be 28 01 00 00       	mov    $0x128,%esi
    5fd0:	48 89 df             	mov    %rbx,%rdi
    5fd3:	e8 58 f2 ff ff       	call   5230 <_ZdlPvm@plt>
    5fd8:	4c 89 e0             	mov    %r12,%rax
    5fdb:	48 89 c7             	mov    %rax,%rdi
    5fde:	e8 bd f3 ff ff       	call   53a0 <_Unwind_Resume@plt>
}
    5fe3:	48 83 c4 18          	add    $0x18,%rsp
    5fe7:	5b                   	pop    %rbx
    5fe8:	41 5c                	pop    %r12
    5fea:	41 5d                	pop    %r13
    5fec:	5d                   	pop    %rbp
    5fed:	c3                   	ret

0000000000005fee <main>:

int main() {
    5fee:	55                   	push   %rbp
    5fef:	48 89 e5             	mov    %rsp,%rbp
    5ff2:	53                   	push   %rbx
    5ff3:	48 83 ec 18          	sub    $0x18,%rsp
  try {
    return protected_main();
    5ff7:	e8 54 ff ff ff       	call   5f50 <_Z14protected_mainv>
    5ffc:	e9 30 01 00 00       	jmp    6131 <main+0x143>
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  } catch (...) {
    std::cerr << "Uncaught exception" << std::endl;
  }
  return EXIT_FAILURE;
    6001:	b8 01 00 00 00       	mov    $0x1,%eax
    6006:	e9 26 01 00 00       	jmp    6131 <main+0x143>
  } catch (vk::SystemError &e) {
    600b:	48 83 fa 01          	cmp    $0x1,%rdx
    600f:	74 0b                	je     601c <main+0x2e>
    6011:	48 83 fa 02          	cmp    $0x2,%rdx
    6015:	74 53                	je     606a <main+0x7c>
    6017:	e9 9f 00 00 00       	jmp    60bb <main+0xcd>
    601c:	48 89 c7             	mov    %rax,%rdi
    601f:	e8 7c f0 ff ff       	call   50a0 <__cxa_begin_catch@plt>
    6024:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    std::cerr << e.what() << std::endl;
    6028:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    602c:	48 8b 00             	mov    (%rax),%rax
    602f:	48 83 c0 10          	add    $0x10,%rax
    6033:	48 8b 10             	mov    (%rax),%rdx
    6036:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    603a:	48 89 c7             	mov    %rax,%rdi
    603d:	ff d2                	call   *%rdx
    603f:	48 89 c6             	mov    %rax,%rsi
    6042:	48 8d 05 f7 b1 03 00 	lea    0x3b1f7(%rip),%rax        # 41240 <_ZSt4cerr@GLIBCXX_3.4>
    6049:	48 89 c7             	mov    %rax,%rdi
    604c:	e8 bf f1 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    6051:	48 8b 15 48 af 03 00 	mov    0x3af48(%rip),%rdx        # 40fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    6058:	48 89 d6             	mov    %rdx,%rsi
    605b:	48 89 c7             	mov    %rax,%rdi
    605e:	e8 fd f1 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  } catch (std::exception &e) {
    6063:	e8 08 f3 ff ff       	call   5370 <__cxa_end_catch@plt>
    6068:	eb 97                	jmp    6001 <main+0x13>
    606a:	48 89 c7             	mov    %rax,%rdi
    606d:	e8 2e f0 ff ff       	call   50a0 <__cxa_begin_catch@plt>
    6072:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    std::cerr << e.what() << std::endl;
    6076:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    607a:	48 8b 00             	mov    (%rax),%rax
    607d:	48 83 c0 10          	add    $0x10,%rax
    6081:	48 8b 10             	mov    (%rax),%rdx
    6084:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6088:	48 89 c7             	mov    %rax,%rdi
    608b:	ff d2                	call   *%rdx
    608d:	48 89 c6             	mov    %rax,%rsi
    6090:	48 8d 05 a9 b1 03 00 	lea    0x3b1a9(%rip),%rax        # 41240 <_ZSt4cerr@GLIBCXX_3.4>
    6097:	48 89 c7             	mov    %rax,%rdi
    609a:	e8 71 f1 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    609f:	48 8b 15 fa ae 03 00 	mov    0x3aefa(%rip),%rdx        # 40fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    60a6:	48 89 d6             	mov    %rdx,%rsi
    60a9:	48 89 c7             	mov    %rax,%rdi
    60ac:	e8 af f1 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  } catch (...) {
    60b1:	e8 ba f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    60b6:	e9 46 ff ff ff       	jmp    6001 <main+0x13>
    60bb:	48 89 c7             	mov    %rax,%rdi
    60be:	e8 dd ef ff ff       	call   50a0 <__cxa_begin_catch@plt>
    std::cerr << "Uncaught exception" << std::endl;
    60c3:	48 8d 05 f0 2c 02 00 	lea    0x22cf0(%rip),%rax        # 28dba <_ZNSt8__detailL19__atomic_spin_countE+0x356>
    60ca:	48 89 c6             	mov    %rax,%rsi
    60cd:	48 8d 05 6c b1 03 00 	lea    0x3b16c(%rip),%rax        # 41240 <_ZSt4cerr@GLIBCXX_3.4>
    60d4:	48 89 c7             	mov    %rax,%rdi
    60d7:	e8 34 f1 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    60dc:	48 8b 15 bd ae 03 00 	mov    0x3aebd(%rip),%rdx        # 40fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    60e3:	48 89 d6             	mov    %rdx,%rsi
    60e6:	48 89 c7             	mov    %rax,%rdi
    60e9:	e8 72 f1 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  }
    60ee:	e8 7d f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    60f3:	e9 09 ff ff ff       	jmp    6001 <main+0x13>
  } catch (std::exception &e) {
    60f8:	48 89 c3             	mov    %rax,%rbx
    60fb:	e8 70 f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    6100:	48 89 d8             	mov    %rbx,%rax
    6103:	48 89 c7             	mov    %rax,%rdi
    6106:	e8 95 f2 ff ff       	call   53a0 <_Unwind_Resume@plt>
  } catch (...) {
    610b:	48 89 c3             	mov    %rax,%rbx
    610e:	e8 5d f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    6113:	48 89 d8             	mov    %rbx,%rax
    6116:	48 89 c7             	mov    %rax,%rdi
    6119:	e8 82 f2 ff ff       	call   53a0 <_Unwind_Resume@plt>
  }
    611e:	48 89 c3             	mov    %rax,%rbx
    6121:	e8 4a f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    6126:	48 89 d8             	mov    %rbx,%rax
    6129:	48 89 c7             	mov    %rax,%rdi
    612c:	e8 6f f2 ff ff       	call   53a0 <_Unwind_Resume@plt>
    6131:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6135:	c9                   	leave
    6136:	c3                   	ret

0000000000006137 <_Z41__static_initialization_and_destruction_0ii>:
    6137:	55                   	push   %rbp
    6138:	48 89 e5             	mov    %rsp,%rbp
    613b:	48 83 ec 10          	sub    $0x10,%rsp
    613f:	89 7d fc             	mov    %edi,-0x4(%rbp)
    6142:	89 75 f8             	mov    %esi,-0x8(%rbp)
    6145:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    6149:	75 3b                	jne    6186 <_Z41__static_initialization_and_destruction_0ii+0x4f>
    614b:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    6152:	75 32                	jne    6186 <_Z41__static_initialization_and_destruction_0ii+0x4f>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    6154:	48 8d 05 f6 b1 03 00 	lea    0x3b1f6(%rip),%rax        # 41351 <_ZStL8__ioinit>
    615b:	48 89 c7             	mov    %rax,%rdi
    615e:	e8 cd f1 ff ff       	call   5330 <_ZNSt8ios_base4InitC1Ev@plt>
    6163:	48 8d 05 8e b0 03 00 	lea    0x3b08e(%rip),%rax        # 411f8 <__dso_handle>
    616a:	48 89 c2             	mov    %rax,%rdx
    616d:	48 8d 05 dd b1 03 00 	lea    0x3b1dd(%rip),%rax        # 41351 <_ZStL8__ioinit>
    6174:	48 89 c6             	mov    %rax,%rsi
    6177:	48 8b 05 52 ae 03 00 	mov    0x3ae52(%rip),%rax        # 40fd0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    617e:	48 89 c7             	mov    %rax,%rdi
    6181:	e8 4a f0 ff ff       	call   51d0 <__cxa_atexit@plt>
    6186:	90                   	nop
    6187:	c9                   	leave
    6188:	c3                   	ret

0000000000006189 <_GLOBAL__sub_I__Z14protected_mainv>:
    6189:	55                   	push   %rbp
    618a:	48 89 e5             	mov    %rsp,%rbp
    618d:	be ff ff 00 00       	mov    $0xffff,%esi
    6192:	bf 01 00 00 00       	mov    $0x1,%edi
    6197:	e8 9b ff ff ff       	call   6137 <_Z41__static_initialization_and_destruction_0ii>
    619c:	5d                   	pop    %rbp
    619d:	c3                   	ret

000000000000619e <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
    619e:	55                   	push   %rbp
    619f:	48 89 e5             	mov    %rsp,%rbp
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
    61a2:	b8 00 00 00 00       	mov    $0x0,%eax
#else
    return false;
#endif
  }
    61a7:	5d                   	pop    %rbp
    61a8:	c3                   	ret

00000000000061a9 <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
    61a9:	55                   	push   %rbp
    61aa:	48 89 e5             	mov    %rsp,%rbp
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
    61ad:	b8 00 00 00 00       	mov    $0x0,%eax
#endif
  }
    61b2:	5d                   	pop    %rbp
    61b3:	c3                   	ret

00000000000061b4 <_ZnwmPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
    61b4:	55                   	push   %rbp
    61b5:	48 89 e5             	mov    %rsp,%rbp
    61b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    61bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    61c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    61c4:	5d                   	pop    %rbp
    61c5:	c3                   	ret

00000000000061c6 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
    61c6:	55                   	push   %rbp
    61c7:	48 89 e5             	mov    %rsp,%rbp
    61ca:	48 83 ec 10          	sub    $0x10,%rsp
    61ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    61d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
    61d6:	e8 c3 ff ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    61db:	84 c0                	test   %al,%al
    61dd:	74 15                	je     61f4 <_ZNSt11char_traitsIcE6assignERcRKc+0x2e>
	  std::construct_at(__builtin_addressof(__c1), __c2);
    61df:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    61e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    61e7:	48 89 d6             	mov    %rdx,%rsi
    61ea:	48 89 c7             	mov    %rax,%rdi
    61ed:	e8 43 3f 00 00       	call   a135 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	else
#endif
	__c1 = __c2;
      }
    61f2:	eb 0d                	jmp    6201 <_ZNSt11char_traitsIcE6assignERcRKc+0x3b>
	__c1 = __c2;
    61f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    61f8:	0f b6 10             	movzbl (%rax),%edx
    61fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    61ff:	88 10                	mov    %dl,(%rax)
      }
    6201:	90                   	nop
    6202:	c9                   	leave
    6203:	c3                   	ret

0000000000006204 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
    6204:	55                   	push   %rbp
    6205:	48 89 e5             	mov    %rsp,%rbp
    6208:	48 83 ec 10          	sub    $0x10,%rsp
    620c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
    6210:	e8 89 ff ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    6215:	84 c0                	test   %al,%al
    6217:	74 0e                	je     6227 <_ZNSt11char_traitsIcE6lengthEPKc+0x23>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
    6219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    621d:	48 89 c7             	mov    %rax,%rdi
    6220:	e8 7f 3a 00 00       	call   9ca4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
    6225:	eb 0d                	jmp    6234 <_ZNSt11char_traitsIcE6lengthEPKc+0x30>
#endif
	return __builtin_strlen(__s);
    6227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    622b:	48 89 c7             	mov    %rax,%rdi
    622e:	e8 7d ee ff ff       	call   50b0 <strlen@plt>
    6233:	90                   	nop
      }
    6234:	c9                   	leave
    6235:	c3                   	ret

0000000000006236 <_ZNSt11char_traitsIcE4moveEPcPKcm>:
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
    6236:	55                   	push   %rbp
    6237:	48 89 e5             	mov    %rsp,%rbp
    623a:	48 83 ec 20          	sub    $0x20,%rsp
    623e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6242:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6246:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
    624a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    624f:	75 06                	jne    6257 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x21>
	  return __s1;
    6251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6255:	eb 3a                	jmp    6291 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
    6257:	e8 42 ff ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    625c:	84 c0                	test   %al,%al
    625e:	74 19                	je     6279 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
    6260:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6264:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    626c:	48 89 ce             	mov    %rcx,%rsi
    626f:	48 89 c7             	mov    %rax,%rdi
    6272:	e8 fd 3e 00 00       	call   a174 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>
    6277:	eb 18                	jmp    6291 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    6279:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    627d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6285:	48 89 ce             	mov    %rcx,%rsi
    6288:	48 89 c7             	mov    %rax,%rdi
    628b:	e8 d0 f0 ff ff       	call   5360 <memmove@plt>
    6290:	90                   	nop
      }
    6291:	c9                   	leave
    6292:	c3                   	ret

0000000000006293 <_ZNSt11char_traitsIcE4copyEPcPKcm>:

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
    6293:	55                   	push   %rbp
    6294:	48 89 e5             	mov    %rsp,%rbp
    6297:	48 83 ec 20          	sub    $0x20,%rsp
    629b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    629f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    62a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
    62a7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    62ac:	75 06                	jne    62b4 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x21>
	  return __s1;
    62ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    62b2:	eb 40                	jmp    62f4 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
    62b4:	e8 e5 fe ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    62b9:	84 c0                	test   %al,%al
    62bb:	74 19                	je     62d6 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
    62bd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    62c1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    62c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    62c9:	48 89 ce             	mov    %rcx,%rsi
    62cc:	48 89 c7             	mov    %rax,%rdi
    62cf:	e8 52 3f 00 00       	call   a226 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
    62d4:	eb 1e                	jmp    62f4 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    62d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    62da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    62de:	48 89 d1             	mov    %rdx,%rcx
    62e1:	48 89 c6             	mov    %rax,%rsi
    62e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    62e8:	48 89 c2             	mov    %rax,%rdx
    62eb:	48 89 cf             	mov    %rcx,%rdi
    62ee:	e8 ad ee ff ff       	call   51a0 <memcpy@plt>
    62f3:	90                   	nop
      }
    62f4:	c9                   	leave
    62f5:	c3                   	ret

00000000000062f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
    62f6:	55                   	push   %rbp
    62f7:	48 89 e5             	mov    %rsp,%rbp
    62fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
    62fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6302:	48 8b 40 08          	mov    0x8(%rax),%rax
    6306:	5d                   	pop    %rbp
    6307:	c3                   	ret

0000000000006308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>:
  {
  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    6308:	55                   	push   %rbp
    6309:	48 89 e5             	mov    %rsp,%rbp
    630c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6310:	89 75 f4             	mov    %esi,-0xc(%rbp)
    6313:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    : _M_value(__v), _M_cat(&__cat) { }
    6317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    631b:	8b 55 f4             	mov    -0xc(%rbp),%edx
    631e:	89 10                	mov    %edx,(%rax)
    6320:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6324:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6328:	48 89 50 08          	mov    %rdx,0x8(%rax)
    632c:	90                   	nop
    632d:	5d                   	pop    %rbp
    632e:	c3                   	ret
    632f:	90                   	nop

0000000000006330 <_ZNKSt10error_code5valueEv>:
			 error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }
    6330:	55                   	push   %rbp
    6331:	48 89 e5             	mov    %rsp,%rbp
    6334:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    633c:	8b 00                	mov    (%rax),%eax
    633e:	5d                   	pop    %rbp
    633f:	c3                   	ret

0000000000006340 <_ZNKSt10error_code8categoryEv>:

    const error_category&
    category() const noexcept { return *_M_cat; }
    6340:	55                   	push   %rbp
    6341:	48 89 e5             	mov    %rsp,%rbp
    6344:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6348:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    634c:	48 8b 40 08          	mov    0x8(%rax),%rax
    6350:	5d                   	pop    %rbp
    6351:	c3                   	ret

0000000000006352 <_ZNKSt10error_code7messageB5cxx11Ev>:
    error_condition
    default_error_condition() const noexcept;

    _GLIBCXX_DEFAULT_ABI_TAG
    string
    message() const
    6352:	55                   	push   %rbp
    6353:	48 89 e5             	mov    %rsp,%rbp
    6356:	41 54                	push   %r12
    6358:	53                   	push   %rbx
    6359:	48 83 ec 10          	sub    $0x10,%rsp
    635d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6361:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return category().message(value()); }
    6365:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6369:	48 89 c7             	mov    %rax,%rdi
    636c:	e8 cf ff ff ff       	call   6340 <_ZNKSt10error_code8categoryEv>
    6371:	48 89 c3             	mov    %rax,%rbx
    6374:	48 8b 03             	mov    (%rbx),%rax
    6377:	48 83 c0 20          	add    $0x20,%rax
    637b:	4c 8b 20             	mov    (%rax),%r12
    637e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6382:	48 89 c7             	mov    %rax,%rdi
    6385:	e8 a6 ff ff ff       	call   6330 <_ZNKSt10error_code5valueEv>
    638a:	89 c2                	mov    %eax,%edx
    638c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6390:	48 89 de             	mov    %rbx,%rsi
    6393:	48 89 c7             	mov    %rax,%rdi
    6396:	41 ff d4             	call   *%r12
    6399:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    639d:	48 83 c4 10          	add    $0x10,%rsp
    63a1:	5b                   	pop    %rbx
    63a2:	41 5c                	pop    %r12
    63a4:	5d                   	pop    %rbp
    63a5:	c3                   	ret

00000000000063a6 <_ZNSt12system_errorC1ESt10error_code>:
  {
  private:
    error_code 	_M_code;

  public:
    system_error(error_code __ec = error_code())
    63a6:	55                   	push   %rbp
    63a7:	48 89 e5             	mov    %rsp,%rbp
    63aa:	53                   	push   %rbx
    63ab:	48 83 ec 48          	sub    $0x48,%rsp
    63af:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    63b3:	48 89 d1             	mov    %rdx,%rcx
    63b6:	48 89 f0             	mov    %rsi,%rax
    63b9:	48 89 fa             	mov    %rdi,%rdx
    63bc:	48 89 ca             	mov    %rcx,%rdx
    63bf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    63c3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    : runtime_error(__ec.message()), _M_code(__ec) { }
    63c7:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    63cb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63cf:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    63d3:	48 89 d6             	mov    %rdx,%rsi
    63d6:	48 89 c7             	mov    %rax,%rdi
    63d9:	e8 74 ff ff ff       	call   6352 <_ZNKSt10error_code7messageB5cxx11Ev>
    63de:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63e2:	48 89 c6             	mov    %rax,%rsi
    63e5:	48 89 df             	mov    %rbx,%rdi
    63e8:	e8 c3 ee ff ff       	call   52b0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
    63ed:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63f1:	48 89 c7             	mov    %rax,%rdi
    63f4:	e8 c7 3e 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    63f9:	48 8d 15 d8 a5 03 00 	lea    0x3a5d8(%rip),%rdx        # 409d8 <_ZTVSt12system_error@GLIBCXX_3.4.11+0x10>
    6400:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6404:	48 89 10             	mov    %rdx,(%rax)
    6407:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    640b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    640f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6413:	48 89 41 10          	mov    %rax,0x10(%rcx)
    6417:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    641b:	eb 1a                	jmp    6437 <_ZNSt12system_errorC1ESt10error_code+0x91>
    641d:	48 89 c3             	mov    %rax,%rbx
    6420:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6424:	48 89 c7             	mov    %rax,%rdi
    6427:	e8 94 3e 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    642c:	48 89 d8             	mov    %rbx,%rax
    642f:	48 89 c7             	mov    %rax,%rdi
    6432:	e8 69 ef ff ff       	call   53a0 <_Unwind_Resume@plt>
    6437:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    643b:	c9                   	leave
    643c:	c3                   	ret
    643d:	90                   	nop

000000000000643e <_ZNSt12system_errorC1ESt10error_codePKc>:

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    643e:	55                   	push   %rbp
    643f:	48 89 e5             	mov    %rsp,%rbp
    6442:	53                   	push   %rbx
    6443:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    644a:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    644e:	89 f0                	mov    %esi,%eax
    6450:	48 89 d6             	mov    %rdx,%rsi
    6453:	48 89 f2             	mov    %rsi,%rdx
    6456:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    645d:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    6464:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }
    6468:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
    646c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6470:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6477:	48 89 d6             	mov    %rdx,%rsi
    647a:	48 89 c7             	mov    %rax,%rdi
    647d:	e8 d0 fe ff ff       	call   6352 <_ZNKSt10error_code7messageB5cxx11Ev>
    6482:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6486:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    648a:	48 8d 0d af 21 02 00 	lea    0x221af(%rip),%rcx        # 28640 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8>
    6491:	48 89 ce             	mov    %rcx,%rsi
    6494:	48 89 c7             	mov    %rax,%rdi
    6497:	e8 70 3f 00 00       	call   a40c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
    649c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    64a0:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    64a4:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    64a8:	48 89 ce             	mov    %rcx,%rsi
    64ab:	48 89 c7             	mov    %rax,%rdi
    64ae:	e8 59 3f 00 00       	call   a40c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
    64b3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    64b7:	48 89 c6             	mov    %rax,%rsi
    64ba:	48 89 df             	mov    %rbx,%rdi
    64bd:	e8 ee ed ff ff       	call   52b0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
    64c2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    64c6:	48 89 c7             	mov    %rax,%rdi
    64c9:	e8 f2 3d 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    64ce:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    64d2:	48 89 c7             	mov    %rax,%rdi
    64d5:	e8 e6 3d 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    64da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    64de:	48 89 c7             	mov    %rax,%rdi
    64e1:	e8 da 3d 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    64e6:	48 8d 15 eb a4 03 00 	lea    0x3a4eb(%rip),%rdx        # 409d8 <_ZTVSt12system_error@GLIBCXX_3.4.11+0x10>
    64ed:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    64f1:	48 89 10             	mov    %rdx,(%rax)
    64f4:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
    64f8:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    64ff:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    6506:	48 89 41 10          	mov    %rax,0x10(%rcx)
    650a:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    650e:	eb 3c                	jmp    654c <_ZNSt12system_errorC1ESt10error_codePKc+0x10e>
    6510:	48 89 c3             	mov    %rax,%rbx
    6513:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6517:	48 89 c7             	mov    %rax,%rdi
    651a:	e8 a1 3d 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    651f:	eb 03                	jmp    6524 <_ZNSt12system_errorC1ESt10error_codePKc+0xe6>
    6521:	48 89 c3             	mov    %rax,%rbx
    6524:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6528:	48 89 c7             	mov    %rax,%rdi
    652b:	e8 90 3d 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    6530:	eb 03                	jmp    6535 <_ZNSt12system_errorC1ESt10error_codePKc+0xf7>
    6532:	48 89 c3             	mov    %rax,%rbx
    6535:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6539:	48 89 c7             	mov    %rax,%rdi
    653c:	e8 7f 3d 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    6541:	48 89 d8             	mov    %rbx,%rax
    6544:	48 89 c7             	mov    %rax,%rdi
    6547:	e8 54 ee ff ff       	call   53a0 <_Unwind_Resume@plt>
    654c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6550:	c9                   	leave
    6551:	c3                   	ret

0000000000006552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>:
    size_t getVkHeaderVersion() const
    6552:	55                   	push   %rbp
    6553:	48 89 e5             	mov    %rsp,%rbp
    6556:	48 83 ec 10          	sub    $0x10,%rsp
    655a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      VULKAN_HPP_ASSERT( m_valid );
    655e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6562:	0f b6 40 08          	movzbl 0x8(%rax),%eax
    6566:	84 c0                	test   %al,%al
    6568:	75 28                	jne    6592 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv+0x40>
    656a:	48 8d 05 d7 20 02 00 	lea    0x220d7(%rip),%rax        # 28648 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x10>
    6571:	48 89 c1             	mov    %rax,%rcx
    6574:	ba 16 05 00 00       	mov    $0x516,%edx
    6579:	48 8d 05 08 21 02 00 	lea    0x22108(%rip),%rax        # 28688 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x50>
    6580:	48 89 c6             	mov    %rax,%rsi
    6583:	48 8d 05 1d 21 02 00 	lea    0x2211d(%rip),%rax        # 286a7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x6f>
    658a:	48 89 c7             	mov    %rax,%rdi
    658d:	e8 7e eb ff ff       	call   5110 <__assert_fail@plt>
      return vkHeaderVersion;
    6592:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6596:	48 8b 00             	mov    (%rax),%rax
    }
    6599:	c9                   	leave
    659a:	c3                   	ret
    659b:	90                   	nop

000000000000659c <_ZN2vk18DispatchLoaderBaseC1Ev>:
    DispatchLoaderBase() = default;
    659c:	55                   	push   %rbp
    659d:	48 89 e5             	mov    %rsp,%rbp
    65a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    65a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65a8:	48 c7 00 e7 00 00 00 	movq   $0xe7,(%rax)
    65af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65b3:	c6 40 08 01          	movb   $0x1,0x8(%rax)
    65b7:	90                   	nop
    65b8:	5d                   	pop    %rbp
    65b9:	c3                   	ret

00000000000065ba <_ZStanSt13_Ios_FmtflagsS_>:
      _S_ios_fmtflags_min = ~__INT_MAX__
    };

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
    65ba:	55                   	push   %rbp
    65bb:	48 89 e5             	mov    %rsp,%rbp
    65be:	89 7d fc             	mov    %edi,-0x4(%rbp)
    65c1:	89 75 f8             	mov    %esi,-0x8(%rbp)
    65c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
    65c7:	23 45 f8             	and    -0x8(%rbp),%eax
    65ca:	5d                   	pop    %rbp
    65cb:	c3                   	ret

00000000000065cc <_ZStorSt13_Ios_FmtflagsS_>:

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }
    65cc:	55                   	push   %rbp
    65cd:	48 89 e5             	mov    %rsp,%rbp
    65d0:	89 7d fc             	mov    %edi,-0x4(%rbp)
    65d3:	89 75 f8             	mov    %esi,-0x8(%rbp)
    65d6:	8b 45 fc             	mov    -0x4(%rbp),%eax
    65d9:	0b 45 f8             	or     -0x8(%rbp),%eax
    65dc:	5d                   	pop    %rbp
    65dd:	c3                   	ret

00000000000065de <_ZStcoSt13_Ios_Fmtflags>:
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }
    65de:	55                   	push   %rbp
    65df:	48 89 e5             	mov    %rsp,%rbp
    65e2:	89 7d fc             	mov    %edi,-0x4(%rbp)
    65e5:	8b 45 fc             	mov    -0x4(%rbp),%eax
    65e8:	f7 d0                	not    %eax
    65ea:	5d                   	pop    %rbp
    65eb:	c3                   	ret

00000000000065ec <_ZStoRRSt13_Ios_FmtflagsS_>:

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }
    65ec:	55                   	push   %rbp
    65ed:	48 89 e5             	mov    %rsp,%rbp
    65f0:	48 83 ec 10          	sub    $0x10,%rsp
    65f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    65f8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    65fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65ff:	8b 00                	mov    (%rax),%eax
    6601:	8b 55 f4             	mov    -0xc(%rbp),%edx
    6604:	89 d6                	mov    %edx,%esi
    6606:	89 c7                	mov    %eax,%edi
    6608:	e8 bf ff ff ff       	call   65cc <_ZStorSt13_Ios_FmtflagsS_>
    660d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    6611:	89 02                	mov    %eax,(%rdx)
    6613:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6617:	c9                   	leave
    6618:	c3                   	ret

0000000000006619 <_ZStaNRSt13_Ios_FmtflagsS_>:

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }
    6619:	55                   	push   %rbp
    661a:	48 89 e5             	mov    %rsp,%rbp
    661d:	48 83 ec 10          	sub    $0x10,%rsp
    6621:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6625:	89 75 f4             	mov    %esi,-0xc(%rbp)
    6628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    662c:	8b 00                	mov    (%rax),%eax
    662e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    6631:	89 d6                	mov    %edx,%esi
    6633:	89 c7                	mov    %eax,%edi
    6635:	e8 80 ff ff ff       	call   65ba <_ZStanSt13_Ios_FmtflagsS_>
    663a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    663e:	89 02                	mov    %eax,(%rdx)
    6640:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6644:	c9                   	leave
    6645:	c3                   	ret

0000000000006646 <_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_>:
     *
     *  This function clears @a mask in the format flags, then sets
     *  @a fmtfl @c & @a mask.  An example mask is @c ios_base::adjustfield.
    */
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    6646:	55                   	push   %rbp
    6647:	48 89 e5             	mov    %rsp,%rbp
    664a:	48 83 ec 20          	sub    $0x20,%rsp
    664e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6652:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    6655:	89 55 e0             	mov    %edx,-0x20(%rbp)
    {
      fmtflags __old = _M_flags;
    6658:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    665c:	8b 40 18             	mov    0x18(%rax),%eax
    665f:	89 45 fc             	mov    %eax,-0x4(%rbp)
      _M_flags &= ~__mask;
    6662:	8b 45 e0             	mov    -0x20(%rbp),%eax
    6665:	89 c7                	mov    %eax,%edi
    6667:	e8 72 ff ff ff       	call   65de <_ZStcoSt13_Ios_Fmtflags>
    666c:	89 c2                	mov    %eax,%edx
    666e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6672:	48 83 c0 18          	add    $0x18,%rax
    6676:	89 d6                	mov    %edx,%esi
    6678:	48 89 c7             	mov    %rax,%rdi
    667b:	e8 99 ff ff ff       	call   6619 <_ZStaNRSt13_Ios_FmtflagsS_>
      _M_flags |= (__fmtfl & __mask);
    6680:	8b 55 e0             	mov    -0x20(%rbp),%edx
    6683:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    6686:	89 d6                	mov    %edx,%esi
    6688:	89 c7                	mov    %eax,%edi
    668a:	e8 2b ff ff ff       	call   65ba <_ZStanSt13_Ios_FmtflagsS_>
    668f:	89 c2                	mov    %eax,%edx
    6691:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6695:	48 83 c0 18          	add    $0x18,%rax
    6699:	89 d6                	mov    %edx,%esi
    669b:	48 89 c7             	mov    %rax,%rdi
    669e:	e8 49 ff ff ff       	call   65ec <_ZStoRRSt13_Ios_FmtflagsS_>
      return __old;
    66a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
    66a6:	c9                   	leave
    66a7:	c3                   	ret

00000000000066a8 <_ZSt3hexRSt8ios_base>:
  }

  /// Calls base.setf(ios_base::hex, ios_base::basefield).
  inline ios_base&
  hex(ios_base& __base)
  {
    66a8:	55                   	push   %rbp
    66a9:	48 89 e5             	mov    %rsp,%rbp
    66ac:	48 83 ec 10          	sub    $0x10,%rsp
    66b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    __base.setf(ios_base::hex, ios_base::basefield);
    66b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    66b8:	ba 4a 00 00 00       	mov    $0x4a,%edx
    66bd:	be 08 00 00 00       	mov    $0x8,%esi
    66c2:	48 89 c7             	mov    %rax,%rdi
    66c5:	e8 7c ff ff ff       	call   6646 <_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_>
    return __base;
    66ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  }
    66ce:	c9                   	leave
    66cf:	c3                   	ret

00000000000066d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      struct _Alloc_hider : allocator_type // TODO check __is_final
    66d0:	55                   	push   %rbp
    66d1:	48 89 e5             	mov    %rsp,%rbp
    66d4:	48 83 ec 10          	sub    $0x10,%rsp
    66d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    66dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    66e0:	48 89 c7             	mov    %rax,%rdi
    66e3:	e8 68 e9 ff ff       	call   5050 <_ZNSaIcED2Ev@plt>
    66e8:	90                   	nop
    66e9:	c9                   	leave
    66ea:	c3                   	ret
    66eb:	90                   	nop

00000000000066ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
      basic_string()
    66ec:	55                   	push   %rbp
    66ed:	48 89 e5             	mov    %rsp,%rbp
    66f0:	53                   	push   %rbx
    66f1:	48 83 ec 48          	sub    $0x48,%rsp
    66f5:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
      : _M_dataplus(_M_local_data())
    66f9:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
    66fd:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    6701:	48 89 c7             	mov    %rax,%rdi
    6704:	e8 a7 ec ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6709:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    670d:	48 89 c7             	mov    %rax,%rdi
    6710:	e8 97 00 00 00       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    6715:	48 89 c1             	mov    %rax,%rcx
    6718:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    671c:	48 89 c2             	mov    %rax,%rdx
    671f:	48 89 ce             	mov    %rcx,%rsi
    6722:	48 89 df             	mov    %rbx,%rdi
    6725:	e8 e2 00 00 00       	call   680c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
    672a:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    672e:	48 89 c7             	mov    %rax,%rdi
    6731:	e8 3a eb ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6736:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    673a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::is_constant_evaluated())
    673e:	e8 66 fa ff ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
    6743:	84 c0                	test   %al,%al
    6745:	74 40                	je     6787 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x9b>
	  for (_CharT& __c : _M_local_buf)
    6747:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    674b:	48 83 c0 10          	add    $0x10,%rax
    674f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    6753:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6757:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    675b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    675f:	48 83 c0 10          	add    $0x10,%rax
    6763:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6767:	eb 14                	jmp    677d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x91>
    6769:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    676d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	    __c = _CharT();
    6771:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6775:	c6 00 00             	movb   $0x0,(%rax)
	  for (_CharT& __c : _M_local_buf)
    6778:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
    677d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6781:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    6785:	75 e2                	jne    6769 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x7d>
	return _M_local_data();
    6787:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    678b:	48 89 c7             	mov    %rax,%rdi
    678e:	e8 19 00 00 00       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    6793:	90                   	nop
	_M_set_length(0);
    6794:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6798:	be 00 00 00 00       	mov    $0x0,%esi
    679d:	48 89 c7             	mov    %rax,%rdi
    67a0:	e8 51 3d 00 00       	call   a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
    67a5:	90                   	nop
    67a6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    67aa:	c9                   	leave
    67ab:	c3                   	ret

00000000000067ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data()
    67ac:	55                   	push   %rbp
    67ad:	48 89 e5             	mov    %rsp,%rbp
    67b0:	48 83 ec 10          	sub    $0x10,%rsp
    67b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    67b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67bc:	48 83 c0 10          	add    $0x10,%rax
    67c0:	48 89 c7             	mov    %rax,%rdi
    67c3:	e8 02 00 00 00       	call   67ca <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>
      }
    67c8:	c9                   	leave
    67c9:	c3                   	ret

00000000000067ca <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
    67ca:	55                   	push   %rbp
    67cb:	48 89 e5             	mov    %rsp,%rbp
    67ce:	48 83 ec 10          	sub    $0x10,%rsp
    67d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
    67d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67da:	48 89 c7             	mov    %rax,%rdi
    67dd:	e8 02 00 00 00       	call   67e4 <_ZSt9addressofIcEPT_RS0_>
    67e2:	c9                   	leave
    67e3:	c3                   	ret

00000000000067e4 <_ZSt9addressofIcEPT_RS0_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
    67e4:	55                   	push   %rbp
    67e5:	48 89 e5             	mov    %rsp,%rbp
    67e8:	48 83 ec 10          	sub    $0x10,%rsp
    67ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
    67f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67f4:	48 89 c7             	mov    %rax,%rdi
    67f7:	e8 02 00 00 00       	call   67fe <_ZSt11__addressofIcEPT_RS0_>
    67fc:	c9                   	leave
    67fd:	c3                   	ret

00000000000067fe <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    67fe:	55                   	push   %rbp
    67ff:	48 89 e5             	mov    %rsp,%rbp
    6802:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    6806:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    680a:	5d                   	pop    %rbp
    680b:	c3                   	ret

000000000000680c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
    680c:	55                   	push   %rbp
    680d:	48 89 e5             	mov    %rsp,%rbp
    6810:	48 83 ec 20          	sub    $0x20,%rsp
    6814:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6818:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    681c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    6820:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6824:	48 89 c7             	mov    %rax,%rdi
    6827:	e8 20 00 00 00       	call   684c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
    682c:	48 89 c2             	mov    %rax,%rdx
    682f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6833:	48 89 d6             	mov    %rdx,%rsi
    6836:	48 89 c7             	mov    %rax,%rdi
    6839:	e8 c2 ea ff ff       	call   5300 <_ZNSaIcEC2ERKS_@plt>
    683e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6842:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6846:	48 89 10             	mov    %rdx,(%rax)
    6849:	90                   	nop
    684a:	c9                   	leave
    684b:	c3                   	ret

000000000000684c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
    684c:	55                   	push   %rbp
    684d:	48 89 e5             	mov    %rsp,%rbp
    6850:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    6854:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6858:	5d                   	pop    %rbp
    6859:	c3                   	ret

000000000000685a <_ZNK2vk17ErrorCategoryImpl4nameEv>:
    virtual const char * name() const VULKAN_HPP_NOEXCEPT override
    685a:	55                   	push   %rbp
    685b:	48 89 e5             	mov    %rsp,%rbp
    685e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return VULKAN_HPP_NAMESPACE_STRING "::Result";
    6862:	48 8d 05 46 1e 02 00 	lea    0x21e46(%rip),%rax        # 286af <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x77>
    }
    6869:	5d                   	pop    %rbp
    686a:	c3                   	ret
    686b:	90                   	nop

000000000000686c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei>:
    virtual std::string message( int ev ) const override
    686c:	55                   	push   %rbp
    686d:	48 89 e5             	mov    %rsp,%rbp
    6870:	41 54                	push   %r12
    6872:	53                   	push   %rbx
    6873:	48 81 ec 20 02 00 00 	sub    $0x220,%rsp
    687a:	48 89 bd e8 fd ff ff 	mov    %rdi,-0x218(%rbp)
    6881:	48 89 b5 e0 fd ff ff 	mov    %rsi,-0x220(%rbp)
    6888:	89 95 dc fd ff ff    	mov    %edx,-0x224(%rbp)
    688e:	8b 85 dc fd ff ff    	mov    -0x224(%rbp),%eax
    6894:	89 45 ec             	mov    %eax,-0x14(%rbp)
    6897:	48 8b 9d e8 fd ff ff 	mov    -0x218(%rbp),%rbx

  //=== VK_VERSION_1_0 ===

  VULKAN_HPP_INLINE std::string to_string( Result value )
  {
    switch ( value )
    689e:	81 7d ec 28 52 9f 3b 	cmpl   $0x3b9f5228,-0x14(%rbp)
    68a5:	0f 84 eb 06 00 00    	je     6f96 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x72a>
    68ab:	81 7d ec 28 52 9f 3b 	cmpl   $0x3b9f5228,-0x14(%rbp)
    68b2:	0f 8f 08 0a 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    68b8:	81 7d ec e3 e0 9e 3b 	cmpl   $0x3b9ee0e3,-0x14(%rbp)
    68bf:	0f 84 8f 09 00 00    	je     7254 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x9e8>
    68c5:	81 7d ec e3 e0 9e 3b 	cmpl   $0x3b9ee0e3,-0x14(%rbp)
    68cc:	0f 8f ee 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    68d2:	81 7d ec e2 e0 9e 3b 	cmpl   $0x3b9ee0e2,-0x14(%rbp)
    68d9:	0f 84 3f 09 00 00    	je     721e <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x9b2>
    68df:	81 7d ec e2 e0 9e 3b 	cmpl   $0x3b9ee0e2,-0x14(%rbp)
    68e6:	0f 8f d4 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    68ec:	81 7d ec e1 e0 9e 3b 	cmpl   $0x3b9ee0e1,-0x14(%rbp)
    68f3:	0f 84 ef 08 00 00    	je     71e8 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x97c>
    68f9:	81 7d ec e1 e0 9e 3b 	cmpl   $0x3b9ee0e1,-0x14(%rbp)
    6900:	0f 8f ba 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6906:	81 7d ec e0 e0 9e 3b 	cmpl   $0x3b9ee0e0,-0x14(%rbp)
    690d:	0f 84 9f 08 00 00    	je     71b2 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x946>
    6913:	81 7d ec e0 e0 9e 3b 	cmpl   $0x3b9ee0e0,-0x14(%rbp)
    691a:	0f 8f a0 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6920:	81 7d ec eb cd 9a 3b 	cmpl   $0x3b9acdeb,-0x14(%rbp)
    6927:	0f 84 0b 07 00 00    	je     7038 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x7cc>
    692d:	81 7d ec eb cd 9a 3b 	cmpl   $0x3b9acdeb,-0x14(%rbp)
    6934:	0f 8f 86 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    693a:	83 7d ec 05          	cmpl   $0x5,-0x14(%rbp)
    693e:	0f 8f 7c 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6944:	83 7d ec f3          	cmpl   $0xfffffff3,-0x14(%rbp)
    6948:	0f 8d 3d 01 00 00    	jge    6a8b <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x21f>
    694e:	81 7d ec 00 36 65 c4 	cmpl   $0xc4653600,-0x14(%rbp)
    6955:	0f 84 71 06 00 00    	je     6fcc <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x760>
    695b:	81 7d ec 00 36 65 c4 	cmpl   $0xc4653600,-0x14(%rbp)
    6962:	0f 8f 58 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6968:	81 7d ec ff 35 65 c4 	cmpl   $0xc46535ff,-0x14(%rbp)
    696f:	0f 84 8d 06 00 00    	je     7002 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x796>
    6975:	81 7d ec ff 35 65 c4 	cmpl   $0xc46535ff,-0x14(%rbp)
    697c:	0f 8f 3e 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6982:	81 7d ec 14 32 65 c4 	cmpl   $0xc4653214,-0x14(%rbp)
    6989:	0f 84 df 06 00 00    	je     706e <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x802>
    698f:	81 7d ec 14 32 65 c4 	cmpl   $0xc4653214,-0x14(%rbp)
    6996:	0f 8f 24 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    699c:	81 7d ec 47 2a 65 c4 	cmpl   $0xc4652a47,-0x14(%rbp)
    69a3:	0f 84 fb 06 00 00    	je     70a4 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x838>
    69a9:	81 7d ec 47 2a 65 c4 	cmpl   $0xc4652a47,-0x14(%rbp)
    69b0:	0f 8f 0a 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    69b6:	81 7d ec 07 0b 65 c4 	cmpl   $0xc4650b07,-0x14(%rbp)
    69bd:	0f 84 17 07 00 00    	je     70da <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x86e>
    69c3:	81 7d ec 07 0b 65 c4 	cmpl   $0xc4650b07,-0x14(%rbp)
    69ca:	0f 8f f0 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    69d0:	81 7d ec 20 07 65 c4 	cmpl   $0xc4650720,-0x14(%rbp)
    69d7:	0f 84 33 07 00 00    	je     7110 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x8a4>
    69dd:	81 7d ec 20 07 65 c4 	cmpl   $0xc4650720,-0x14(%rbp)
    69e4:	0f 8f d6 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    69ea:	81 7d ec 78 28 64 c4 	cmpl   $0xc4642878,-0x14(%rbp)
    69f1:	0f 84 c7 04 00 00    	je     6ebe <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x652>
    69f7:	81 7d ec 78 28 64 c4 	cmpl   $0xc4642878,-0x14(%rbp)
    69fe:	0f 8f bc 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a04:	81 7d ec bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x14(%rbp)
    6a0b:	0f 84 e3 04 00 00    	je     6ef4 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x688>
    6a11:	81 7d ec bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x14(%rbp)
    6a18:	0f 8f a2 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a1e:	81 7d ec d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x14(%rbp)
    6a25:	0f 84 1b 07 00 00    	je     7146 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x8da>
    6a2b:	81 7d ec d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x14(%rbp)
    6a32:	0f 8f 88 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a38:	81 7d ec 18 c1 62 c4 	cmpl   $0xc462c118,-0x14(%rbp)
    6a3f:	0f 84 e5 04 00 00    	je     6f2a <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x6be>
    6a45:	81 7d ec 18 c1 62 c4 	cmpl   $0xc462c118,-0x14(%rbp)
    6a4c:	0f 8f 6e 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a52:	81 7d ec 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x14(%rbp)
    6a59:	0f 84 1d 07 00 00    	je     717c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x910>
    6a5f:	81 7d ec 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x14(%rbp)
    6a66:	0f 8f 54 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a6c:	81 7d ec b0 0d 60 c4 	cmpl   $0xc4600db0,-0x14(%rbp)
    6a73:	0f 84 11 08 00 00    	je     728a <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa1e>
    6a79:	81 7d ec 18 4a 61 c4 	cmpl   $0xc4614a18,-0x14(%rbp)
    6a80:	0f 84 da 04 00 00    	je     6f60 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x6f4>
    6a86:	e9 35 08 00 00       	jmp    72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a8b:	8b 45 ec             	mov    -0x14(%rbp),%eax
    6a8e:	83 c0 0d             	add    $0xd,%eax
    6a91:	83 f8 12             	cmp    $0x12,%eax
    6a94:	0f 87 26 08 00 00    	ja     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a9a:	89 c0                	mov    %eax,%eax
    6a9c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    6aa3:	00 
    6aa4:	48 8d 05 ed 23 02 00 	lea    0x223ed(%rip),%rax        # 28e98 <_ZNSt8__detailL19__atomic_spin_countE+0x434>
    6aab:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    6aae:	48 98                	cltq
    6ab0:	48 8d 15 e1 23 02 00 	lea    0x223e1(%rip),%rdx        # 28e98 <_ZNSt8__detailL19__atomic_spin_countE+0x434>
    6ab7:	48 01 d0             	add    %rdx,%rax
    6aba:	ff e0                	jmp    *%rax
    {
      case Result::eSuccess: return "Success";
    6abc:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    6ac0:	48 89 c7             	mov    %rax,%rdi
    6ac3:	e8 e8 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6ac8:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    6acc:	48 89 c2             	mov    %rax,%rdx
    6acf:	48 8d 05 e4 1b 02 00 	lea    0x21be4(%rip),%rax        # 286ba <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x82>
    6ad6:	48 89 c6             	mov    %rax,%rsi
    6ad9:	48 89 df             	mov    %rbx,%rdi
    6adc:	e8 75 39 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ae1:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    6ae5:	48 89 c7             	mov    %rax,%rdi
    6ae8:	e8 83 e7 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
      return VULKAN_HPP_NAMESPACE::to_string( static_cast<VULKAN_HPP_NAMESPACE::Result>( ev ) );
    6aed:	e9 aa 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eNotReady: return "NotReady";
    6af2:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    6af6:	48 89 c7             	mov    %rax,%rdi
    6af9:	e8 b2 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6afe:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    6b02:	48 89 c2             	mov    %rax,%rdx
    6b05:	48 8d 05 b6 1b 02 00 	lea    0x21bb6(%rip),%rax        # 286c2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8a>
    6b0c:	48 89 c6             	mov    %rax,%rsi
    6b0f:	48 89 df             	mov    %rbx,%rdi
    6b12:	e8 3f 39 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6b17:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    6b1b:	48 89 c7             	mov    %rax,%rdi
    6b1e:	e8 4d e7 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6b23:	e9 74 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eTimeout: return "Timeout";
    6b28:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    6b2c:	48 89 c7             	mov    %rax,%rdi
    6b2f:	e8 7c e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6b34:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    6b38:	48 89 c2             	mov    %rax,%rdx
    6b3b:	48 8d 05 89 1b 02 00 	lea    0x21b89(%rip),%rax        # 286cb <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x93>
    6b42:	48 89 c6             	mov    %rax,%rsi
    6b45:	48 89 df             	mov    %rbx,%rdi
    6b48:	e8 09 39 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6b4d:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    6b51:	48 89 c7             	mov    %rax,%rdi
    6b54:	e8 17 e7 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6b59:	e9 3e 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eEventSet: return "EventSet";
    6b5e:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    6b62:	48 89 c7             	mov    %rax,%rdi
    6b65:	e8 46 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6b6a:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    6b6e:	48 89 c2             	mov    %rax,%rdx
    6b71:	48 8d 05 5b 1b 02 00 	lea    0x21b5b(%rip),%rax        # 286d3 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x9b>
    6b78:	48 89 c6             	mov    %rax,%rsi
    6b7b:	48 89 df             	mov    %rbx,%rdi
    6b7e:	e8 d3 38 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6b83:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    6b87:	48 89 c7             	mov    %rax,%rdi
    6b8a:	e8 e1 e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6b8f:	e9 08 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eEventReset: return "EventReset";
    6b94:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    6b98:	48 89 c7             	mov    %rax,%rdi
    6b9b:	e8 10 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6ba0:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    6ba4:	48 89 c2             	mov    %rax,%rdx
    6ba7:	48 8d 05 2e 1b 02 00 	lea    0x21b2e(%rip),%rax        # 286dc <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xa4>
    6bae:	48 89 c6             	mov    %rax,%rsi
    6bb1:	48 89 df             	mov    %rbx,%rdi
    6bb4:	e8 9d 38 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6bb9:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    6bbd:	48 89 c7             	mov    %rax,%rdi
    6bc0:	e8 ab e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6bc5:	e9 d2 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eIncomplete: return "Incomplete";
    6bca:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    6bce:	48 89 c7             	mov    %rax,%rdi
    6bd1:	e8 da e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6bd6:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    6bda:	48 89 c2             	mov    %rax,%rdx
    6bdd:	48 8d 05 03 1b 02 00 	lea    0x21b03(%rip),%rax        # 286e7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xaf>
    6be4:	48 89 c6             	mov    %rax,%rsi
    6be7:	48 89 df             	mov    %rbx,%rdi
    6bea:	e8 67 38 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6bef:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    6bf3:	48 89 c7             	mov    %rax,%rdi
    6bf6:	e8 75 e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6bfb:	e9 9c 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfHostMemory: return "ErrorOutOfHostMemory";
    6c00:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    6c04:	48 89 c7             	mov    %rax,%rdi
    6c07:	e8 a4 e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6c0c:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    6c10:	48 89 c2             	mov    %rax,%rdx
    6c13:	48 8d 05 d8 1a 02 00 	lea    0x21ad8(%rip),%rax        # 286f2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xba>
    6c1a:	48 89 c6             	mov    %rax,%rsi
    6c1d:	48 89 df             	mov    %rbx,%rdi
    6c20:	e8 31 38 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6c25:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    6c29:	48 89 c7             	mov    %rax,%rdi
    6c2c:	e8 3f e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6c31:	e9 66 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfDeviceMemory: return "ErrorOutOfDeviceMemory";
    6c36:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6c3a:	48 89 c7             	mov    %rax,%rdi
    6c3d:	e8 6e e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6c42:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6c46:	48 89 c2             	mov    %rax,%rdx
    6c49:	48 8d 05 b7 1a 02 00 	lea    0x21ab7(%rip),%rax        # 28707 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xcf>
    6c50:	48 89 c6             	mov    %rax,%rsi
    6c53:	48 89 df             	mov    %rbx,%rdi
    6c56:	e8 fb 37 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6c5b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6c5f:	48 89 c7             	mov    %rax,%rdi
    6c62:	e8 09 e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6c67:	e9 30 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInitializationFailed: return "ErrorInitializationFailed";
    6c6c:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    6c70:	48 89 c7             	mov    %rax,%rdi
    6c73:	e8 38 e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6c78:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    6c7c:	48 89 c2             	mov    %rax,%rdx
    6c7f:	48 8d 05 98 1a 02 00 	lea    0x21a98(%rip),%rax        # 2871e <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xe6>
    6c86:	48 89 c6             	mov    %rax,%rsi
    6c89:	48 89 df             	mov    %rbx,%rdi
    6c8c:	e8 c5 37 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6c91:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    6c95:	48 89 c7             	mov    %rax,%rdi
    6c98:	e8 d3 e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6c9d:	e9 fa 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorDeviceLost: return "ErrorDeviceLost";
    6ca2:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    6ca6:	48 89 c7             	mov    %rax,%rdi
    6ca9:	e8 02 e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6cae:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    6cb2:	48 89 c2             	mov    %rax,%rdx
    6cb5:	48 8d 05 7c 1a 02 00 	lea    0x21a7c(%rip),%rax        # 28738 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x100>
    6cbc:	48 89 c6             	mov    %rax,%rsi
    6cbf:	48 89 df             	mov    %rbx,%rdi
    6cc2:	e8 8f 37 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6cc7:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    6ccb:	48 89 c7             	mov    %rax,%rdi
    6cce:	e8 9d e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6cd3:	e9 c4 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorMemoryMapFailed: return "ErrorMemoryMapFailed";
    6cd8:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    6cdc:	48 89 c7             	mov    %rax,%rdi
    6cdf:	e8 cc e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6ce4:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    6ce8:	48 89 c2             	mov    %rax,%rdx
    6ceb:	48 8d 05 56 1a 02 00 	lea    0x21a56(%rip),%rax        # 28748 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x110>
    6cf2:	48 89 c6             	mov    %rax,%rsi
    6cf5:	48 89 df             	mov    %rbx,%rdi
    6cf8:	e8 59 37 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6cfd:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    6d01:	48 89 c7             	mov    %rax,%rdi
    6d04:	e8 67 e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6d09:	e9 8e 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorLayerNotPresent: return "ErrorLayerNotPresent";
    6d0e:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    6d12:	48 89 c7             	mov    %rax,%rdi
    6d15:	e8 96 e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6d1a:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    6d1e:	48 89 c2             	mov    %rax,%rdx
    6d21:	48 8d 05 35 1a 02 00 	lea    0x21a35(%rip),%rax        # 2875d <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x125>
    6d28:	48 89 c6             	mov    %rax,%rsi
    6d2b:	48 89 df             	mov    %rbx,%rdi
    6d2e:	e8 23 37 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6d33:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    6d37:	48 89 c7             	mov    %rax,%rdi
    6d3a:	e8 31 e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6d3f:	e9 58 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorExtensionNotPresent: return "ErrorExtensionNotPresent";
    6d44:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    6d48:	48 89 c7             	mov    %rax,%rdi
    6d4b:	e8 60 e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6d50:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    6d54:	48 89 c2             	mov    %rax,%rdx
    6d57:	48 8d 05 14 1a 02 00 	lea    0x21a14(%rip),%rax        # 28772 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x13a>
    6d5e:	48 89 c6             	mov    %rax,%rsi
    6d61:	48 89 df             	mov    %rbx,%rdi
    6d64:	e8 ed 36 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6d69:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    6d6d:	48 89 c7             	mov    %rax,%rdi
    6d70:	e8 fb e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6d75:	e9 22 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFeatureNotPresent: return "ErrorFeatureNotPresent";
    6d7a:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    6d7e:	48 89 c7             	mov    %rax,%rdi
    6d81:	e8 2a e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6d86:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    6d8a:	48 89 c2             	mov    %rax,%rdx
    6d8d:	48 8d 05 f7 19 02 00 	lea    0x219f7(%rip),%rax        # 2878b <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x153>
    6d94:	48 89 c6             	mov    %rax,%rsi
    6d97:	48 89 df             	mov    %rbx,%rdi
    6d9a:	e8 b7 36 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6d9f:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    6da3:	48 89 c7             	mov    %rax,%rdi
    6da6:	e8 c5 e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6dab:	e9 ec 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorIncompatibleDriver: return "ErrorIncompatibleDriver";
    6db0:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    6db4:	48 89 c7             	mov    %rax,%rdi
    6db7:	e8 f4 e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6dbc:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    6dc0:	48 89 c2             	mov    %rax,%rdx
    6dc3:	48 8d 05 d8 19 02 00 	lea    0x219d8(%rip),%rax        # 287a2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x16a>
    6dca:	48 89 c6             	mov    %rax,%rsi
    6dcd:	48 89 df             	mov    %rbx,%rdi
    6dd0:	e8 81 36 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6dd5:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    6dd9:	48 89 c7             	mov    %rax,%rdi
    6ddc:	e8 8f e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6de1:	e9 b6 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorTooManyObjects: return "ErrorTooManyObjects";
    6de6:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6dea:	48 89 c7             	mov    %rax,%rdi
    6ded:	e8 be e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6df2:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6df6:	48 89 c2             	mov    %rax,%rdx
    6df9:	48 8d 05 ba 19 02 00 	lea    0x219ba(%rip),%rax        # 287ba <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x182>
    6e00:	48 89 c6             	mov    %rax,%rsi
    6e03:	48 89 df             	mov    %rbx,%rdi
    6e06:	e8 4b 36 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6e0b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6e0f:	48 89 c7             	mov    %rax,%rdi
    6e12:	e8 59 e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6e17:	e9 80 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFormatNotSupported: return "ErrorFormatNotSupported";
    6e1c:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6e20:	48 89 c7             	mov    %rax,%rdi
    6e23:	e8 88 e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6e28:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6e2c:	48 89 c2             	mov    %rax,%rdx
    6e2f:	48 8d 05 98 19 02 00 	lea    0x21998(%rip),%rax        # 287ce <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x196>
    6e36:	48 89 c6             	mov    %rax,%rsi
    6e39:	48 89 df             	mov    %rbx,%rdi
    6e3c:	e8 15 36 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6e41:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6e45:	48 89 c7             	mov    %rax,%rdi
    6e48:	e8 23 e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6e4d:	e9 4a 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFragmentedPool: return "ErrorFragmentedPool";
    6e52:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    6e56:	48 89 c7             	mov    %rax,%rdi
    6e59:	e8 52 e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6e5e:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    6e62:	48 89 c2             	mov    %rax,%rdx
    6e65:	48 8d 05 7a 19 02 00 	lea    0x2197a(%rip),%rax        # 287e6 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1ae>
    6e6c:	48 89 c6             	mov    %rax,%rsi
    6e6f:	48 89 df             	mov    %rbx,%rdi
    6e72:	e8 df 35 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6e77:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    6e7b:	48 89 c7             	mov    %rax,%rdi
    6e7e:	e8 ed e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6e83:	e9 14 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorUnknown: return "ErrorUnknown";
    6e88:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    6e8c:	48 89 c7             	mov    %rax,%rdi
    6e8f:	e8 1c e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6e94:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    6e98:	48 89 c2             	mov    %rax,%rdx
    6e9b:	48 8d 05 58 19 02 00 	lea    0x21958(%rip),%rax        # 287fa <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1c2>
    6ea2:	48 89 c6             	mov    %rax,%rsi
    6ea5:	48 89 df             	mov    %rbx,%rdi
    6ea8:	e8 a9 35 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ead:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    6eb1:	48 89 c7             	mov    %rax,%rdi
    6eb4:	e8 b7 e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6eb9:	e9 de 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfPoolMemory: return "ErrorOutOfPoolMemory";
    6ebe:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    6ec2:	48 89 c7             	mov    %rax,%rdi
    6ec5:	e8 e6 e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6eca:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    6ece:	48 89 c2             	mov    %rax,%rdx
    6ed1:	48 8d 05 2f 19 02 00 	lea    0x2192f(%rip),%rax        # 28807 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1cf>
    6ed8:	48 89 c6             	mov    %rax,%rsi
    6edb:	48 89 df             	mov    %rbx,%rdi
    6ede:	e8 73 35 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ee3:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    6ee7:	48 89 c7             	mov    %rax,%rdi
    6eea:	e8 81 e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6eef:	e9 a8 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInvalidExternalHandle: return "ErrorInvalidExternalHandle";
    6ef4:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    6ef8:	48 89 c7             	mov    %rax,%rdi
    6efb:	e8 b0 e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6f00:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    6f04:	48 89 c2             	mov    %rax,%rdx
    6f07:	48 8d 05 0e 19 02 00 	lea    0x2190e(%rip),%rax        # 2881c <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1e4>
    6f0e:	48 89 c6             	mov    %rax,%rsi
    6f11:	48 89 df             	mov    %rbx,%rdi
    6f14:	e8 3d 35 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6f19:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    6f1d:	48 89 c7             	mov    %rax,%rdi
    6f20:	e8 4b e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6f25:	e9 72 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFragmentation: return "ErrorFragmentation";
    6f2a:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    6f2e:	48 89 c7             	mov    %rax,%rdi
    6f31:	e8 7a e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6f36:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    6f3a:	48 89 c2             	mov    %rax,%rdx
    6f3d:	48 8d 05 f3 18 02 00 	lea    0x218f3(%rip),%rax        # 28837 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1ff>
    6f44:	48 89 c6             	mov    %rax,%rsi
    6f47:	48 89 df             	mov    %rbx,%rdi
    6f4a:	e8 07 35 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6f4f:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    6f53:	48 89 c7             	mov    %rax,%rdi
    6f56:	e8 15 e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6f5b:	e9 3c 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInvalidOpaqueCaptureAddress: return "ErrorInvalidOpaqueCaptureAddress";
    6f60:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    6f64:	48 89 c7             	mov    %rax,%rdi
    6f67:	e8 44 e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6f6c:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    6f70:	48 89 c2             	mov    %rax,%rdx
    6f73:	48 8d 05 d6 18 02 00 	lea    0x218d6(%rip),%rax        # 28850 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x218>
    6f7a:	48 89 c6             	mov    %rax,%rsi
    6f7d:	48 89 df             	mov    %rbx,%rdi
    6f80:	e8 d1 34 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6f85:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    6f89:	48 89 c7             	mov    %rax,%rdi
    6f8c:	e8 df e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6f91:	e9 06 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::ePipelineCompileRequired: return "PipelineCompileRequired";
    6f96:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6f9a:	48 89 c7             	mov    %rax,%rdi
    6f9d:	e8 0e e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6fa2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fa6:	48 89 c2             	mov    %rax,%rdx
    6fa9:	48 8d 05 c1 18 02 00 	lea    0x218c1(%rip),%rax        # 28871 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x239>
    6fb0:	48 89 c6             	mov    %rax,%rsi
    6fb3:	48 89 df             	mov    %rbx,%rdi
    6fb6:	e8 9b 34 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6fbb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fbf:	48 89 c7             	mov    %rax,%rdi
    6fc2:	e8 a9 e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6fc7:	e9 d0 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorSurfaceLostKHR: return "ErrorSurfaceLostKHR";
    6fcc:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    6fd0:	48 89 c7             	mov    %rax,%rdi
    6fd3:	e8 d8 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6fd8:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    6fdc:	48 89 c2             	mov    %rax,%rdx
    6fdf:	48 8d 05 a3 18 02 00 	lea    0x218a3(%rip),%rax        # 28889 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x251>
    6fe6:	48 89 c6             	mov    %rax,%rsi
    6fe9:	48 89 df             	mov    %rbx,%rdi
    6fec:	e8 65 34 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ff1:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    6ff5:	48 89 c7             	mov    %rax,%rdi
    6ff8:	e8 73 e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6ffd:	e9 9a 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorNativeWindowInUseKHR: return "ErrorNativeWindowInUseKHR";
    7002:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    7006:	48 89 c7             	mov    %rax,%rdi
    7009:	e8 a2 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    700e:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    7012:	48 89 c2             	mov    %rax,%rdx
    7015:	48 8d 05 81 18 02 00 	lea    0x21881(%rip),%rax        # 2889d <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x265>
    701c:	48 89 c6             	mov    %rax,%rsi
    701f:	48 89 df             	mov    %rbx,%rdi
    7022:	e8 2f 34 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7027:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    702b:	48 89 c7             	mov    %rax,%rdi
    702e:	e8 3d e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7033:	e9 64 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eSuboptimalKHR: return "SuboptimalKHR";
    7038:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    703c:	48 89 c7             	mov    %rax,%rdi
    703f:	e8 6c e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7044:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    7048:	48 89 c2             	mov    %rax,%rdx
    704b:	48 8d 05 65 18 02 00 	lea    0x21865(%rip),%rax        # 288b7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x27f>
    7052:	48 89 c6             	mov    %rax,%rsi
    7055:	48 89 df             	mov    %rbx,%rdi
    7058:	e8 f9 33 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    705d:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    7061:	48 89 c7             	mov    %rax,%rdi
    7064:	e8 07 e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7069:	e9 2e 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfDateKHR: return "ErrorOutOfDateKHR";
    706e:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    7072:	48 89 c7             	mov    %rax,%rdi
    7075:	e8 36 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    707a:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    707e:	48 89 c2             	mov    %rax,%rdx
    7081:	48 8d 05 3d 18 02 00 	lea    0x2183d(%rip),%rax        # 288c5 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x28d>
    7088:	48 89 c6             	mov    %rax,%rsi
    708b:	48 89 df             	mov    %rbx,%rdi
    708e:	e8 c3 33 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7093:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    7097:	48 89 c7             	mov    %rax,%rdi
    709a:	e8 d1 e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    709f:	e9 f8 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorIncompatibleDisplayKHR: return "ErrorIncompatibleDisplayKHR";
    70a4:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    70a8:	48 89 c7             	mov    %rax,%rdi
    70ab:	e8 00 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    70b0:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    70b4:	48 89 c2             	mov    %rax,%rdx
    70b7:	48 8d 05 19 18 02 00 	lea    0x21819(%rip),%rax        # 288d7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x29f>
    70be:	48 89 c6             	mov    %rax,%rsi
    70c1:	48 89 df             	mov    %rbx,%rdi
    70c4:	e8 8d 33 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    70c9:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    70cd:	48 89 c7             	mov    %rax,%rdi
    70d0:	e8 9b e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    70d5:	e9 c2 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorValidationFailedEXT: return "ErrorValidationFailedEXT";
    70da:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    70de:	48 89 c7             	mov    %rax,%rdi
    70e1:	e8 ca e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    70e6:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    70ea:	48 89 c2             	mov    %rax,%rdx
    70ed:	48 8d 05 ff 17 02 00 	lea    0x217ff(%rip),%rax        # 288f3 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2bb>
    70f4:	48 89 c6             	mov    %rax,%rsi
    70f7:	48 89 df             	mov    %rbx,%rdi
    70fa:	e8 57 33 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    70ff:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    7103:	48 89 c7             	mov    %rax,%rdi
    7106:	e8 65 e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    710b:	e9 8c 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInvalidShaderNV: return "ErrorInvalidShaderNV";
    7110:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    7114:	48 89 c7             	mov    %rax,%rdi
    7117:	e8 94 e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    711c:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    7120:	48 89 c2             	mov    %rax,%rdx
    7123:	48 8d 05 e2 17 02 00 	lea    0x217e2(%rip),%rax        # 2890c <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2d4>
    712a:	48 89 c6             	mov    %rax,%rsi
    712d:	48 89 df             	mov    %rbx,%rdi
    7130:	e8 21 33 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7135:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    7139:	48 89 c7             	mov    %rax,%rdi
    713c:	e8 2f e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7141:	e9 56 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorVideoProfileOperationNotSupportedKHR: return "ErrorVideoProfileOperationNotSupportedKHR";
      case Result::eErrorVideoProfileFormatNotSupportedKHR: return "ErrorVideoProfileFormatNotSupportedKHR";
      case Result::eErrorVideoProfileCodecNotSupportedKHR: return "ErrorVideoProfileCodecNotSupportedKHR";
      case Result::eErrorVideoStdVersionNotSupportedKHR: return "ErrorVideoStdVersionNotSupportedKHR";
#endif /*VK_ENABLE_BETA_EXTENSIONS*/
      case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: return "ErrorInvalidDrmFormatModifierPlaneLayoutEXT";
    7146:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    714a:	48 89 c7             	mov    %rax,%rdi
    714d:	e8 5e e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7152:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    7156:	48 89 c2             	mov    %rax,%rdx
    7159:	48 8d 05 c8 17 02 00 	lea    0x217c8(%rip),%rax        # 28928 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2f0>
    7160:	48 89 c6             	mov    %rax,%rsi
    7163:	48 89 df             	mov    %rbx,%rdi
    7166:	e8 eb 32 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    716b:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    716f:	48 89 c7             	mov    %rax,%rdi
    7172:	e8 f9 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7177:	e9 20 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorNotPermittedKHR: return "ErrorNotPermittedKHR";
    717c:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    7180:	48 89 c7             	mov    %rax,%rdi
    7183:	e8 28 e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7188:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    718c:	48 89 c2             	mov    %rax,%rdx
    718f:	48 8d 05 be 17 02 00 	lea    0x217be(%rip),%rax        # 28954 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x31c>
    7196:	48 89 c6             	mov    %rax,%rsi
    7199:	48 89 df             	mov    %rbx,%rdi
    719c:	e8 b5 32 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    71a1:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    71a5:	48 89 c7             	mov    %rax,%rdi
    71a8:	e8 c3 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    71ad:	e9 ea 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
#if defined( VK_USE_PLATFORM_WIN32_KHR )
      case Result::eErrorFullScreenExclusiveModeLostEXT: return "ErrorFullScreenExclusiveModeLostEXT";
#endif /*VK_USE_PLATFORM_WIN32_KHR*/
      case Result::eThreadIdleKHR: return "ThreadIdleKHR";
    71b2:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    71b6:	48 89 c7             	mov    %rax,%rdi
    71b9:	e8 f2 e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    71be:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    71c2:	48 89 c2             	mov    %rax,%rdx
    71c5:	48 8d 05 9d 17 02 00 	lea    0x2179d(%rip),%rax        # 28969 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x331>
    71cc:	48 89 c6             	mov    %rax,%rsi
    71cf:	48 89 df             	mov    %rbx,%rdi
    71d2:	e8 7f 32 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    71d7:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    71db:	48 89 c7             	mov    %rax,%rdi
    71de:	e8 8d e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    71e3:	e9 b4 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eThreadDoneKHR: return "ThreadDoneKHR";
    71e8:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    71ec:	48 89 c7             	mov    %rax,%rdi
    71ef:	e8 bc e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    71f4:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    71f8:	48 89 c2             	mov    %rax,%rdx
    71fb:	48 8d 05 75 17 02 00 	lea    0x21775(%rip),%rax        # 28977 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x33f>
    7202:	48 89 c6             	mov    %rax,%rsi
    7205:	48 89 df             	mov    %rbx,%rdi
    7208:	e8 49 32 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    720d:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    7211:	48 89 c7             	mov    %rax,%rdi
    7214:	e8 57 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7219:	e9 7e 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eOperationDeferredKHR: return "OperationDeferredKHR";
    721e:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    7222:	48 89 c7             	mov    %rax,%rdi
    7225:	e8 86 e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    722a:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    722e:	48 89 c2             	mov    %rax,%rdx
    7231:	48 8d 05 4d 17 02 00 	lea    0x2174d(%rip),%rax        # 28985 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x34d>
    7238:	48 89 c6             	mov    %rax,%rsi
    723b:	48 89 df             	mov    %rbx,%rdi
    723e:	e8 13 32 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7243:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    7247:	48 89 c7             	mov    %rax,%rdi
    724a:	e8 21 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    724f:	e9 48 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eOperationNotDeferredKHR: return "OperationNotDeferredKHR";
    7254:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    7258:	48 89 c7             	mov    %rax,%rdi
    725b:	e8 50 e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7260:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    7264:	48 89 c2             	mov    %rax,%rdx
    7267:	48 8d 05 2c 17 02 00 	lea    0x2172c(%rip),%rax        # 2899a <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x362>
    726e:	48 89 c6             	mov    %rax,%rsi
    7271:	48 89 df             	mov    %rbx,%rdi
    7274:	e8 dd 31 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7279:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    727d:	48 89 c7             	mov    %rax,%rdi
    7280:	e8 eb df ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7285:	e9 12 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorCompressionExhaustedEXT: return "ErrorCompressionExhaustedEXT";
    728a:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    728e:	48 89 c7             	mov    %rax,%rdi
    7291:	e8 1a e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7296:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    729a:	48 89 c2             	mov    %rax,%rdx
    729d:	48 8d 05 0e 17 02 00 	lea    0x2170e(%rip),%rax        # 289b2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x37a>
    72a4:	48 89 c6             	mov    %rax,%rsi
    72a7:	48 89 df             	mov    %rbx,%rdi
    72aa:	e8 a7 31 00 00       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    72af:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    72b3:	48 89 c7             	mov    %rax,%rdi
    72b6:	e8 b5 df ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    72bb:	e9 dc 04 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    72c0:	8b 45 ec             	mov    -0x14(%rbp),%eax
    72c3:	89 45 e8             	mov    %eax,-0x18(%rbp)
    72c6:	4c 8d 65 80          	lea    -0x80(%rbp),%r12
    std::stringstream stream;
    72ca:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    72d1:	48 89 c7             	mov    %rax,%rdi
    72d4:	e8 57 de ff ff       	call   5130 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@plt>
    stream << std::hex << value;
    72d9:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    72e0:	48 83 c0 10          	add    $0x10,%rax
    72e4:	48 8d 15 bd f3 ff ff 	lea    -0xc43(%rip),%rdx        # 66a8 <_ZSt3hexRSt8ios_base>
    72eb:	48 89 d6             	mov    %rdx,%rsi
    72ee:	48 89 c7             	mov    %rax,%rdi
    72f1:	e8 7a dd ff ff       	call   5070 <_ZNSolsEPFRSt8ios_baseS0_E@plt>
    72f6:	48 89 c2             	mov    %rax,%rdx
    72f9:	8b 45 e8             	mov    -0x18(%rbp),%eax
    72fc:	89 c6                	mov    %eax,%esi
    72fe:	48 89 d7             	mov    %rdx,%rdi
    7301:	e8 ca df ff ff       	call   52d0 <_ZNSolsEj@plt>
    return stream.str();
    7306:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    730d:	48 89 c6             	mov    %rax,%rsi
    7310:	4c 89 e7             	mov    %r12,%rdi
    7313:	e8 b8 e0 ff ff       	call   53d0 <_ZNKRSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@plt>
    7318:	90                   	nop
  }
    7319:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    7320:	48 89 c7             	mov    %rax,%rdi
    7323:	e8 38 de ff ff       	call   5160 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>
    return stream.str();
    7328:	90                   	nop
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    7329:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    732d:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    7331:	48 8d 0d 97 16 02 00 	lea    0x21697(%rip),%rcx        # 289cf <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x397>
    7338:	48 89 ce             	mov    %rcx,%rsi
    733b:	48 89 c7             	mov    %rax,%rdi
    733e:	e8 c9 30 00 00       	call   a40c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
    7343:	eb 1a                	jmp    735f <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xaf3>
  }
    7345:	48 89 c3             	mov    %rax,%rbx
    7348:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    734f:	48 89 c7             	mov    %rax,%rdi
    7352:	e8 09 de ff ff       	call   5160 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>
    7357:	48 89 d8             	mov    %rbx,%rax
    735a:	e9 35 04 00 00       	jmp    7794 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf28>
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    735f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7363:	48 8d 15 70 16 02 00 	lea    0x21670(%rip),%rdx        # 289da <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a2>
    736a:	48 89 c6             	mov    %rax,%rsi
    736d:	48 89 df             	mov    %rbx,%rdi
    7370:	e8 cd 31 00 00       	call   a542 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
    7375:	90                   	nop
    7376:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    737a:	48 89 c7             	mov    %rax,%rdi
    737d:	e8 3e 2f 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    7382:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7386:	48 89 c7             	mov    %rax,%rdi
    7389:	e8 32 2f 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    738e:	e9 09 04 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eSuccess: return "Success";
    7393:	48 89 c3             	mov    %rax,%rbx
    7396:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    739a:	48 89 c7             	mov    %rax,%rdi
    739d:	e8 ce de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73a2:	48 89 d8             	mov    %rbx,%rax
    73a5:	48 89 c7             	mov    %rax,%rdi
    73a8:	e8 f3 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eNotReady: return "NotReady";
    73ad:	48 89 c3             	mov    %rax,%rbx
    73b0:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    73b4:	48 89 c7             	mov    %rax,%rdi
    73b7:	e8 b4 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73bc:	48 89 d8             	mov    %rbx,%rax
    73bf:	48 89 c7             	mov    %rax,%rdi
    73c2:	e8 d9 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eTimeout: return "Timeout";
    73c7:	48 89 c3             	mov    %rax,%rbx
    73ca:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    73ce:	48 89 c7             	mov    %rax,%rdi
    73d1:	e8 9a de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73d6:	48 89 d8             	mov    %rbx,%rax
    73d9:	48 89 c7             	mov    %rax,%rdi
    73dc:	e8 bf df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eEventSet: return "EventSet";
    73e1:	48 89 c3             	mov    %rax,%rbx
    73e4:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    73e8:	48 89 c7             	mov    %rax,%rdi
    73eb:	e8 80 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73f0:	48 89 d8             	mov    %rbx,%rax
    73f3:	48 89 c7             	mov    %rax,%rdi
    73f6:	e8 a5 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eEventReset: return "EventReset";
    73fb:	48 89 c3             	mov    %rax,%rbx
    73fe:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    7402:	48 89 c7             	mov    %rax,%rdi
    7405:	e8 66 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    740a:	48 89 d8             	mov    %rbx,%rax
    740d:	48 89 c7             	mov    %rax,%rdi
    7410:	e8 8b df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eIncomplete: return "Incomplete";
    7415:	48 89 c3             	mov    %rax,%rbx
    7418:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    741c:	48 89 c7             	mov    %rax,%rdi
    741f:	e8 4c de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7424:	48 89 d8             	mov    %rbx,%rax
    7427:	48 89 c7             	mov    %rax,%rdi
    742a:	e8 71 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfHostMemory: return "ErrorOutOfHostMemory";
    742f:	48 89 c3             	mov    %rax,%rbx
    7432:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    7436:	48 89 c7             	mov    %rax,%rdi
    7439:	e8 32 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    743e:	48 89 d8             	mov    %rbx,%rax
    7441:	48 89 c7             	mov    %rax,%rdi
    7444:	e8 57 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfDeviceMemory: return "ErrorOutOfDeviceMemory";
    7449:	48 89 c3             	mov    %rax,%rbx
    744c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7450:	48 89 c7             	mov    %rax,%rdi
    7453:	e8 18 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7458:	48 89 d8             	mov    %rbx,%rax
    745b:	48 89 c7             	mov    %rax,%rdi
    745e:	e8 3d df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInitializationFailed: return "ErrorInitializationFailed";
    7463:	48 89 c3             	mov    %rax,%rbx
    7466:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    746a:	48 89 c7             	mov    %rax,%rdi
    746d:	e8 fe dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7472:	48 89 d8             	mov    %rbx,%rax
    7475:	48 89 c7             	mov    %rax,%rdi
    7478:	e8 23 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorDeviceLost: return "ErrorDeviceLost";
    747d:	48 89 c3             	mov    %rax,%rbx
    7480:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    7484:	48 89 c7             	mov    %rax,%rdi
    7487:	e8 e4 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    748c:	48 89 d8             	mov    %rbx,%rax
    748f:	48 89 c7             	mov    %rax,%rdi
    7492:	e8 09 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorMemoryMapFailed: return "ErrorMemoryMapFailed";
    7497:	48 89 c3             	mov    %rax,%rbx
    749a:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    749e:	48 89 c7             	mov    %rax,%rdi
    74a1:	e8 ca dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74a6:	48 89 d8             	mov    %rbx,%rax
    74a9:	48 89 c7             	mov    %rax,%rdi
    74ac:	e8 ef de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorLayerNotPresent: return "ErrorLayerNotPresent";
    74b1:	48 89 c3             	mov    %rax,%rbx
    74b4:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    74b8:	48 89 c7             	mov    %rax,%rdi
    74bb:	e8 b0 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74c0:	48 89 d8             	mov    %rbx,%rax
    74c3:	48 89 c7             	mov    %rax,%rdi
    74c6:	e8 d5 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorExtensionNotPresent: return "ErrorExtensionNotPresent";
    74cb:	48 89 c3             	mov    %rax,%rbx
    74ce:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    74d2:	48 89 c7             	mov    %rax,%rdi
    74d5:	e8 96 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74da:	48 89 d8             	mov    %rbx,%rax
    74dd:	48 89 c7             	mov    %rax,%rdi
    74e0:	e8 bb de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFeatureNotPresent: return "ErrorFeatureNotPresent";
    74e5:	48 89 c3             	mov    %rax,%rbx
    74e8:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    74ec:	48 89 c7             	mov    %rax,%rdi
    74ef:	e8 7c dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74f4:	48 89 d8             	mov    %rbx,%rax
    74f7:	48 89 c7             	mov    %rax,%rdi
    74fa:	e8 a1 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorIncompatibleDriver: return "ErrorIncompatibleDriver";
    74ff:	48 89 c3             	mov    %rax,%rbx
    7502:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    7506:	48 89 c7             	mov    %rax,%rdi
    7509:	e8 62 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    750e:	48 89 d8             	mov    %rbx,%rax
    7511:	48 89 c7             	mov    %rax,%rdi
    7514:	e8 87 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorTooManyObjects: return "ErrorTooManyObjects";
    7519:	48 89 c3             	mov    %rax,%rbx
    751c:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    7520:	48 89 c7             	mov    %rax,%rdi
    7523:	e8 48 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7528:	48 89 d8             	mov    %rbx,%rax
    752b:	48 89 c7             	mov    %rax,%rdi
    752e:	e8 6d de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFormatNotSupported: return "ErrorFormatNotSupported";
    7533:	48 89 c3             	mov    %rax,%rbx
    7536:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    753a:	48 89 c7             	mov    %rax,%rdi
    753d:	e8 2e dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7542:	48 89 d8             	mov    %rbx,%rax
    7545:	48 89 c7             	mov    %rax,%rdi
    7548:	e8 53 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFragmentedPool: return "ErrorFragmentedPool";
    754d:	48 89 c3             	mov    %rax,%rbx
    7550:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    7554:	48 89 c7             	mov    %rax,%rdi
    7557:	e8 14 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    755c:	48 89 d8             	mov    %rbx,%rax
    755f:	48 89 c7             	mov    %rax,%rdi
    7562:	e8 39 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorUnknown: return "ErrorUnknown";
    7567:	48 89 c3             	mov    %rax,%rbx
    756a:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    756e:	48 89 c7             	mov    %rax,%rdi
    7571:	e8 fa dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7576:	48 89 d8             	mov    %rbx,%rax
    7579:	48 89 c7             	mov    %rax,%rdi
    757c:	e8 1f de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfPoolMemory: return "ErrorOutOfPoolMemory";
    7581:	48 89 c3             	mov    %rax,%rbx
    7584:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    7588:	48 89 c7             	mov    %rax,%rdi
    758b:	e8 e0 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7590:	48 89 d8             	mov    %rbx,%rax
    7593:	48 89 c7             	mov    %rax,%rdi
    7596:	e8 05 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidExternalHandle: return "ErrorInvalidExternalHandle";
    759b:	48 89 c3             	mov    %rax,%rbx
    759e:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    75a2:	48 89 c7             	mov    %rax,%rdi
    75a5:	e8 c6 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75aa:	48 89 d8             	mov    %rbx,%rax
    75ad:	48 89 c7             	mov    %rax,%rdi
    75b0:	e8 eb dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFragmentation: return "ErrorFragmentation";
    75b5:	48 89 c3             	mov    %rax,%rbx
    75b8:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    75bc:	48 89 c7             	mov    %rax,%rdi
    75bf:	e8 ac dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75c4:	48 89 d8             	mov    %rbx,%rax
    75c7:	48 89 c7             	mov    %rax,%rdi
    75ca:	e8 d1 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidOpaqueCaptureAddress: return "ErrorInvalidOpaqueCaptureAddress";
    75cf:	48 89 c3             	mov    %rax,%rbx
    75d2:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    75d6:	48 89 c7             	mov    %rax,%rdi
    75d9:	e8 92 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75de:	48 89 d8             	mov    %rbx,%rax
    75e1:	48 89 c7             	mov    %rax,%rdi
    75e4:	e8 b7 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::ePipelineCompileRequired: return "PipelineCompileRequired";
    75e9:	48 89 c3             	mov    %rax,%rbx
    75ec:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    75f0:	48 89 c7             	mov    %rax,%rdi
    75f3:	e8 78 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75f8:	48 89 d8             	mov    %rbx,%rax
    75fb:	48 89 c7             	mov    %rax,%rdi
    75fe:	e8 9d dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorSurfaceLostKHR: return "ErrorSurfaceLostKHR";
    7603:	48 89 c3             	mov    %rax,%rbx
    7606:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    760a:	48 89 c7             	mov    %rax,%rdi
    760d:	e8 5e dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7612:	48 89 d8             	mov    %rbx,%rax
    7615:	48 89 c7             	mov    %rax,%rdi
    7618:	e8 83 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorNativeWindowInUseKHR: return "ErrorNativeWindowInUseKHR";
    761d:	48 89 c3             	mov    %rax,%rbx
    7620:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    7624:	48 89 c7             	mov    %rax,%rdi
    7627:	e8 44 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    762c:	48 89 d8             	mov    %rbx,%rax
    762f:	48 89 c7             	mov    %rax,%rdi
    7632:	e8 69 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eSuboptimalKHR: return "SuboptimalKHR";
    7637:	48 89 c3             	mov    %rax,%rbx
    763a:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    763e:	48 89 c7             	mov    %rax,%rdi
    7641:	e8 2a dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7646:	48 89 d8             	mov    %rbx,%rax
    7649:	48 89 c7             	mov    %rax,%rdi
    764c:	e8 4f dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfDateKHR: return "ErrorOutOfDateKHR";
    7651:	48 89 c3             	mov    %rax,%rbx
    7654:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    7658:	48 89 c7             	mov    %rax,%rdi
    765b:	e8 10 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7660:	48 89 d8             	mov    %rbx,%rax
    7663:	48 89 c7             	mov    %rax,%rdi
    7666:	e8 35 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorIncompatibleDisplayKHR: return "ErrorIncompatibleDisplayKHR";
    766b:	48 89 c3             	mov    %rax,%rbx
    766e:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    7672:	48 89 c7             	mov    %rax,%rdi
    7675:	e8 f6 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    767a:	48 89 d8             	mov    %rbx,%rax
    767d:	48 89 c7             	mov    %rax,%rdi
    7680:	e8 1b dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorValidationFailedEXT: return "ErrorValidationFailedEXT";
    7685:	48 89 c3             	mov    %rax,%rbx
    7688:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    768c:	48 89 c7             	mov    %rax,%rdi
    768f:	e8 dc db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7694:	48 89 d8             	mov    %rbx,%rax
    7697:	48 89 c7             	mov    %rax,%rdi
    769a:	e8 01 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidShaderNV: return "ErrorInvalidShaderNV";
    769f:	48 89 c3             	mov    %rax,%rbx
    76a2:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    76a6:	48 89 c7             	mov    %rax,%rdi
    76a9:	e8 c2 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76ae:	48 89 d8             	mov    %rbx,%rax
    76b1:	48 89 c7             	mov    %rax,%rdi
    76b4:	e8 e7 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: return "ErrorInvalidDrmFormatModifierPlaneLayoutEXT";
    76b9:	48 89 c3             	mov    %rax,%rbx
    76bc:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    76c0:	48 89 c7             	mov    %rax,%rdi
    76c3:	e8 a8 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76c8:	48 89 d8             	mov    %rbx,%rax
    76cb:	48 89 c7             	mov    %rax,%rdi
    76ce:	e8 cd dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorNotPermittedKHR: return "ErrorNotPermittedKHR";
    76d3:	48 89 c3             	mov    %rax,%rbx
    76d6:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    76da:	48 89 c7             	mov    %rax,%rdi
    76dd:	e8 8e db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76e2:	48 89 d8             	mov    %rbx,%rax
    76e5:	48 89 c7             	mov    %rax,%rdi
    76e8:	e8 b3 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eThreadIdleKHR: return "ThreadIdleKHR";
    76ed:	48 89 c3             	mov    %rax,%rbx
    76f0:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    76f4:	48 89 c7             	mov    %rax,%rdi
    76f7:	e8 74 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76fc:	48 89 d8             	mov    %rbx,%rax
    76ff:	48 89 c7             	mov    %rax,%rdi
    7702:	e8 99 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eThreadDoneKHR: return "ThreadDoneKHR";
    7707:	48 89 c3             	mov    %rax,%rbx
    770a:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    770e:	48 89 c7             	mov    %rax,%rdi
    7711:	e8 5a db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7716:	48 89 d8             	mov    %rbx,%rax
    7719:	48 89 c7             	mov    %rax,%rdi
    771c:	e8 7f dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eOperationDeferredKHR: return "OperationDeferredKHR";
    7721:	48 89 c3             	mov    %rax,%rbx
    7724:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    7728:	48 89 c7             	mov    %rax,%rdi
    772b:	e8 40 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7730:	48 89 d8             	mov    %rbx,%rax
    7733:	48 89 c7             	mov    %rax,%rdi
    7736:	e8 65 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eOperationNotDeferredKHR: return "OperationNotDeferredKHR";
    773b:	48 89 c3             	mov    %rax,%rbx
    773e:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    7742:	48 89 c7             	mov    %rax,%rdi
    7745:	e8 26 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    774a:	48 89 d8             	mov    %rbx,%rax
    774d:	48 89 c7             	mov    %rax,%rdi
    7750:	e8 4b dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorCompressionExhaustedEXT: return "ErrorCompressionExhaustedEXT";
    7755:	48 89 c3             	mov    %rax,%rbx
    7758:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    775c:	48 89 c7             	mov    %rax,%rdi
    775f:	e8 0c db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7764:	48 89 d8             	mov    %rbx,%rax
    7767:	48 89 c7             	mov    %rax,%rdi
    776a:	e8 31 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    776f:	48 89 c3             	mov    %rax,%rbx
    7772:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7776:	48 89 c7             	mov    %rax,%rdi
    7779:	e8 42 2b 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    777e:	eb 03                	jmp    7783 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf17>
    7780:	48 89 c3             	mov    %rax,%rbx
    7783:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7787:	48 89 c7             	mov    %rax,%rdi
    778a:	e8 31 2b 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    778f:	48 89 d8             	mov    %rbx,%rax
    7792:	eb 00                	jmp    7794 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf28>
    7794:	48 89 c7             	mov    %rax,%rdi
    7797:	e8 04 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
    }
    779c:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
    77a3:	48 81 c4 20 02 00 00 	add    $0x220,%rsp
    77aa:	5b                   	pop    %rbx
    77ab:	41 5c                	pop    %r12
    77ad:	5d                   	pop    %rbp
    77ae:	c3                   	ret
    77af:	90                   	nop

00000000000077b0 <_ZN2vk5ErrorC1Ev>:
    Error() VULKAN_HPP_NOEXCEPT                = default;
    77b0:	55                   	push   %rbp
    77b1:	48 89 e5             	mov    %rsp,%rbp
    77b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77b8:	48 8d 15 69 92 03 00 	lea    0x39269(%rip),%rdx        # 40a28 <_ZTVN2vk5ErrorE+0x10>
    77bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77c3:	48 89 10             	mov    %rdx,(%rax)
    77c6:	90                   	nop
    77c7:	5d                   	pop    %rbp
    77c8:	c3                   	ret
    77c9:	90                   	nop

00000000000077ca <_ZN2vk5ErrorD1Ev>:
    virtual ~Error() VULKAN_HPP_NOEXCEPT       = default;
    77ca:	55                   	push   %rbp
    77cb:	48 89 e5             	mov    %rsp,%rbp
    77ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77d2:	48 8d 15 4f 92 03 00 	lea    0x3924f(%rip),%rdx        # 40a28 <_ZTVN2vk5ErrorE+0x10>
    77d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77dd:	48 89 10             	mov    %rdx,(%rax)
    77e0:	90                   	nop
    77e1:	5d                   	pop    %rbp
    77e2:	c3                   	ret
    77e3:	90                   	nop

00000000000077e4 <_ZN2vk5ErrorD0Ev>:
    77e4:	55                   	push   %rbp
    77e5:	48 89 e5             	mov    %rsp,%rbp
    77e8:	48 83 ec 10          	sub    $0x10,%rsp
    77ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77f4:	48 89 c7             	mov    %rax,%rdi
    77f7:	e8 ce ff ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    77fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7800:	be 08 00 00 00       	mov    $0x8,%esi
    7805:	48 89 c7             	mov    %rax,%rdi
    7808:	e8 23 da ff ff       	call   5230 <_ZdlPvm@plt>
    780d:	c9                   	leave
    780e:	c3                   	ret
    780f:	90                   	nop

0000000000007810 <_ZN2vk11SystemErrorC1ESt10error_code>:
    SystemError( std::error_code ec ) : Error(), std::system_error( ec ) {}
    7810:	55                   	push   %rbp
    7811:	48 89 e5             	mov    %rsp,%rbp
    7814:	53                   	push   %rbx
    7815:	48 83 ec 28          	sub    $0x28,%rsp
    7819:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    781d:	48 89 d1             	mov    %rdx,%rcx
    7820:	48 89 f0             	mov    %rsi,%rax
    7823:	48 89 fa             	mov    %rdi,%rdx
    7826:	48 89 ca             	mov    %rcx,%rdx
    7829:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    782d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7831:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7835:	48 89 c7             	mov    %rax,%rdi
    7838:	e8 73 ff ff ff       	call   77b0 <_ZN2vk5ErrorC1Ev>
    783d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7841:	48 8d 48 08          	lea    0x8(%rax),%rcx
    7845:	8b 55 d0             	mov    -0x30(%rbp),%edx
    7848:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    784c:	89 d6                	mov    %edx,%esi
    784e:	48 89 c2             	mov    %rax,%rdx
    7851:	48 89 cf             	mov    %rcx,%rdi
    7854:	e8 4d eb ff ff       	call   63a6 <_ZNSt12system_errorC1ESt10error_code>
    7859:	48 8d 15 b0 90 03 00 	lea    0x390b0(%rip),%rdx        # 40910 <_ZTVN2vk11SystemErrorE+0x10>
    7860:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7864:	48 89 10             	mov    %rdx,(%rax)
    7867:	48 8d 15 ca 90 03 00 	lea    0x390ca(%rip),%rdx        # 40938 <_ZTVN2vk11SystemErrorE+0x38>
    786e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7872:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7876:	eb 1a                	jmp    7892 <_ZN2vk11SystemErrorC1ESt10error_code+0x82>
    7878:	48 89 c3             	mov    %rax,%rbx
    787b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    787f:	48 89 c7             	mov    %rax,%rdi
    7882:	e8 43 ff ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    7887:	48 89 d8             	mov    %rbx,%rax
    788a:	48 89 c7             	mov    %rax,%rdi
    788d:	e8 0e db ff ff       	call   53a0 <_Unwind_Resume@plt>
    7892:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7896:	c9                   	leave
    7897:	c3                   	ret

0000000000007898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>:
    SystemError( std::error_code ec, char const * what ) : Error(), std::system_error( ec, what ) {}
    7898:	55                   	push   %rbp
    7899:	48 89 e5             	mov    %rsp,%rbp
    789c:	53                   	push   %rbx
    789d:	48 83 ec 28          	sub    $0x28,%rsp
    78a1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    78a5:	89 f0                	mov    %esi,%eax
    78a7:	48 89 d6             	mov    %rdx,%rsi
    78aa:	48 89 f2             	mov    %rsi,%rdx
    78ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    78b1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    78b5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    78b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78bd:	48 89 c7             	mov    %rax,%rdi
    78c0:	e8 eb fe ff ff       	call   77b0 <_ZN2vk5ErrorC1Ev>
    78c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78c9:	48 8d 78 08          	lea    0x8(%rax),%rdi
    78cd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    78d1:	8b 55 d0             	mov    -0x30(%rbp),%edx
    78d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    78d8:	89 d6                	mov    %edx,%esi
    78da:	48 89 c2             	mov    %rax,%rdx
    78dd:	e8 5c eb ff ff       	call   643e <_ZNSt12system_errorC1ESt10error_codePKc>
    78e2:	48 8d 15 27 90 03 00 	lea    0x39027(%rip),%rdx        # 40910 <_ZTVN2vk11SystemErrorE+0x10>
    78e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78ed:	48 89 10             	mov    %rdx,(%rax)
    78f0:	48 8d 15 41 90 03 00 	lea    0x39041(%rip),%rdx        # 40938 <_ZTVN2vk11SystemErrorE+0x38>
    78f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78fb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    78ff:	eb 1a                	jmp    791b <_ZN2vk11SystemErrorC1ESt10error_codePKc+0x83>
    7901:	48 89 c3             	mov    %rax,%rbx
    7904:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7908:	48 89 c7             	mov    %rax,%rdi
    790b:	e8 ba fe ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    7910:	48 89 d8             	mov    %rbx,%rax
    7913:	48 89 c7             	mov    %rax,%rdi
    7916:	e8 85 da ff ff       	call   53a0 <_Unwind_Resume@plt>
    791b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    791f:	c9                   	leave
    7920:	c3                   	ret
    7921:	90                   	nop

0000000000007922 <_ZNK2vk11SystemError4whatEv>:
    virtual const char * what() const VULKAN_HPP_NOEXCEPT
    7922:	55                   	push   %rbp
    7923:	48 89 e5             	mov    %rsp,%rbp
    7926:	48 83 ec 10          	sub    $0x10,%rsp
    792a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return std::system_error::what();
    792e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7932:	48 83 c0 08          	add    $0x8,%rax
    7936:	48 89 c7             	mov    %rax,%rdi
    7939:	e8 a2 d9 ff ff       	call   52e0 <_ZNKSt13runtime_error4whatEv@plt>
    }
    793e:	c9                   	leave
    793f:	c3                   	ret

0000000000007940 <_ZThn8_NK2vk11SystemError4whatEv>:
    virtual const char * what() const VULKAN_HPP_NOEXCEPT
    7940:	48 83 ef 08          	sub    $0x8,%rdi
    7944:	eb dc                	jmp    7922 <_ZNK2vk11SystemError4whatEv>

0000000000007946 <_ZN2vk11SystemErrorD1Ev>:
  class SystemError
    7946:	55                   	push   %rbp
    7947:	48 89 e5             	mov    %rsp,%rbp
    794a:	48 83 ec 10          	sub    $0x10,%rsp
    794e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7952:	48 8d 15 b7 8f 03 00 	lea    0x38fb7(%rip),%rdx        # 40910 <_ZTVN2vk11SystemErrorE+0x10>
    7959:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    795d:	48 89 10             	mov    %rdx,(%rax)
    7960:	48 8d 15 d1 8f 03 00 	lea    0x38fd1(%rip),%rdx        # 40938 <_ZTVN2vk11SystemErrorE+0x38>
    7967:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    796b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    796f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7973:	48 83 c0 08          	add    $0x8,%rax
    7977:	48 89 c7             	mov    %rax,%rdi
    797a:	e8 41 d8 ff ff       	call   51c0 <_ZNSt12system_errorD2Ev@plt>
    797f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7983:	48 89 c7             	mov    %rax,%rdi
    7986:	e8 3f fe ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    798b:	90                   	nop
    798c:	c9                   	leave
    798d:	c3                   	ret

000000000000798e <_ZThn8_N2vk11SystemErrorD1Ev>:
    798e:	48 83 ef 08          	sub    $0x8,%rdi
    7992:	eb b2                	jmp    7946 <_ZN2vk11SystemErrorD1Ev>

0000000000007994 <_ZN2vk11SystemErrorD0Ev>:
    7994:	55                   	push   %rbp
    7995:	48 89 e5             	mov    %rsp,%rbp
    7998:	48 83 ec 10          	sub    $0x10,%rsp
    799c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    79a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    79a4:	48 89 c7             	mov    %rax,%rdi
    79a7:	e8 9a ff ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    79ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    79b0:	be 28 00 00 00       	mov    $0x28,%esi
    79b5:	48 89 c7             	mov    %rax,%rdi
    79b8:	e8 73 d8 ff ff       	call   5230 <_ZdlPvm@plt>
    79bd:	c9                   	leave
    79be:	c3                   	ret

00000000000079bf <_ZThn8_N2vk11SystemErrorD0Ev>:
    79bf:	48 83 ef 08          	sub    $0x8,%rdi
    79c3:	eb cf                	jmp    7994 <_ZN2vk11SystemErrorD0Ev>
    79c5:	90                   	nop

00000000000079c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>:
    OutOfHostMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfHostMemory ), message ) {}
    79c6:	55                   	push   %rbp
    79c7:	48 89 e5             	mov    %rsp,%rbp
    79ca:	53                   	push   %rbx
    79cb:	48 83 ec 38          	sub    $0x38,%rsp
    79cf:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    79d3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    79d7:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    79db:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    79e2:	0f b6 05 6f 99 03 00 	movzbl 0x3996f(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    79e9:	84 c0                	test   %al,%al
    79eb:	0f 94 c0             	sete   %al
    79ee:	84 c0                	test   %al,%al
    79f0:	74 4a                	je     7a3c <_ZN2vk20OutOfHostMemoryErrorC1EPKc+0x76>
    79f2:	48 8d 05 5f 99 03 00 	lea    0x3995f(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    79f9:	48 89 c7             	mov    %rax,%rdi
    79fc:	e8 bf d9 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7a01:	85 c0                	test   %eax,%eax
    7a03:	0f 95 c0             	setne  %al
    7a06:	84 c0                	test   %al,%al
    7a08:	74 32                	je     7a3c <_ZN2vk20OutOfHostMemoryErrorC1EPKc+0x76>
    7a0a:	48 8d 05 e7 97 03 00 	lea    0x397e7(%rip),%rax        # 411f8 <__dso_handle>
    7a11:	48 89 c2             	mov    %rax,%rdx
    7a14:	48 8d 05 e5 97 03 00 	lea    0x397e5(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    7a1b:	48 89 c6             	mov    %rax,%rsi
    7a1e:	48 8d 05 41 52 00 00 	lea    0x5241(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    7a25:	48 89 c7             	mov    %rax,%rdi
    7a28:	e8 a3 d7 ff ff       	call   51d0 <__cxa_atexit@plt>
    7a2d:	48 8d 05 24 99 03 00 	lea    0x39924(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7a34:	48 89 c7             	mov    %rax,%rdi
    7a37:	e8 c4 d6 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7a3c:	48 8d 15 bd 97 03 00 	lea    0x397bd(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7a43:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7a46:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a4a:	89 ce                	mov    %ecx,%esi
    7a4c:	48 89 c7             	mov    %rax,%rdi
    7a4f:	e8 b4 e8 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7a54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7a58:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfHostMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfHostMemory ), message ) {}
    7a5c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7a60:	48 89 c6             	mov    %rax,%rsi
    7a63:	48 89 d7             	mov    %rdx,%rdi
    7a66:	48 89 d0             	mov    %rdx,%rax
    7a69:	48 89 c2             	mov    %rax,%rdx
    7a6c:	48 89 df             	mov    %rbx,%rdi
    7a6f:	e8 24 fe ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7a74:	48 8d 15 45 8e 03 00 	lea    0x38e45(%rip),%rdx        # 408c0 <_ZTVN2vk20OutOfHostMemoryErrorE+0x10>
    7a7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a7f:	48 89 10             	mov    %rdx,(%rax)
    7a82:	48 8d 15 5f 8e 03 00 	lea    0x38e5f(%rip),%rdx        # 408e8 <_ZTVN2vk20OutOfHostMemoryErrorE+0x38>
    7a89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a8d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7a91:	90                   	nop
    7a92:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7a96:	c9                   	leave
    7a97:	c3                   	ret

0000000000007a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>:
    OutOfDeviceMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDeviceMemory ), message ) {}
    7a98:	55                   	push   %rbp
    7a99:	48 89 e5             	mov    %rsp,%rbp
    7a9c:	53                   	push   %rbx
    7a9d:	48 83 ec 38          	sub    $0x38,%rsp
    7aa1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7aa5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7aa9:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7aad:	c7 45 ec fe ff ff ff 	movl   $0xfffffffe,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7ab4:	0f b6 05 9d 98 03 00 	movzbl 0x3989d(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7abb:	84 c0                	test   %al,%al
    7abd:	0f 94 c0             	sete   %al
    7ac0:	84 c0                	test   %al,%al
    7ac2:	74 4a                	je     7b0e <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc+0x76>
    7ac4:	48 8d 05 8d 98 03 00 	lea    0x3988d(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7acb:	48 89 c7             	mov    %rax,%rdi
    7ace:	e8 ed d8 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7ad3:	85 c0                	test   %eax,%eax
    7ad5:	0f 95 c0             	setne  %al
    7ad8:	84 c0                	test   %al,%al
    7ada:	74 32                	je     7b0e <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc+0x76>
    7adc:	48 8d 05 15 97 03 00 	lea    0x39715(%rip),%rax        # 411f8 <__dso_handle>
    7ae3:	48 89 c2             	mov    %rax,%rdx
    7ae6:	48 8d 05 13 97 03 00 	lea    0x39713(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    7aed:	48 89 c6             	mov    %rax,%rsi
    7af0:	48 8d 05 6f 51 00 00 	lea    0x516f(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    7af7:	48 89 c7             	mov    %rax,%rdi
    7afa:	e8 d1 d6 ff ff       	call   51d0 <__cxa_atexit@plt>
    7aff:	48 8d 05 52 98 03 00 	lea    0x39852(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7b06:	48 89 c7             	mov    %rax,%rdi
    7b09:	e8 f2 d5 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7b0e:	48 8d 15 eb 96 03 00 	lea    0x396eb(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7b15:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7b18:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7b1c:	89 ce                	mov    %ecx,%esi
    7b1e:	48 89 c7             	mov    %rax,%rdi
    7b21:	e8 e2 e7 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7b26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7b2a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfDeviceMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDeviceMemory ), message ) {}
    7b2e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7b32:	48 89 c6             	mov    %rax,%rsi
    7b35:	48 89 d7             	mov    %rdx,%rdi
    7b38:	48 89 d0             	mov    %rdx,%rax
    7b3b:	48 89 c2             	mov    %rax,%rdx
    7b3e:	48 89 df             	mov    %rbx,%rdi
    7b41:	e8 52 fd ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7b46:	48 8d 15 23 8d 03 00 	lea    0x38d23(%rip),%rdx        # 40870 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x10>
    7b4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b51:	48 89 10             	mov    %rdx,(%rax)
    7b54:	48 8d 15 3d 8d 03 00 	lea    0x38d3d(%rip),%rdx        # 40898 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x38>
    7b5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b5f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7b63:	90                   	nop
    7b64:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7b68:	c9                   	leave
    7b69:	c3                   	ret

0000000000007b6a <_ZN2vk25InitializationFailedErrorC1EPKc>:
    InitializationFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorInitializationFailed ), message ) {}
    7b6a:	55                   	push   %rbp
    7b6b:	48 89 e5             	mov    %rsp,%rbp
    7b6e:	53                   	push   %rbx
    7b6f:	48 83 ec 38          	sub    $0x38,%rsp
    7b73:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7b77:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7b7b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7b7f:	c7 45 ec fd ff ff ff 	movl   $0xfffffffd,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7b86:	0f b6 05 cb 97 03 00 	movzbl 0x397cb(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7b8d:	84 c0                	test   %al,%al
    7b8f:	0f 94 c0             	sete   %al
    7b92:	84 c0                	test   %al,%al
    7b94:	74 4a                	je     7be0 <_ZN2vk25InitializationFailedErrorC1EPKc+0x76>
    7b96:	48 8d 05 bb 97 03 00 	lea    0x397bb(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7b9d:	48 89 c7             	mov    %rax,%rdi
    7ba0:	e8 1b d8 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7ba5:	85 c0                	test   %eax,%eax
    7ba7:	0f 95 c0             	setne  %al
    7baa:	84 c0                	test   %al,%al
    7bac:	74 32                	je     7be0 <_ZN2vk25InitializationFailedErrorC1EPKc+0x76>
    7bae:	48 8d 05 43 96 03 00 	lea    0x39643(%rip),%rax        # 411f8 <__dso_handle>
    7bb5:	48 89 c2             	mov    %rax,%rdx
    7bb8:	48 8d 05 41 96 03 00 	lea    0x39641(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    7bbf:	48 89 c6             	mov    %rax,%rsi
    7bc2:	48 8d 05 9d 50 00 00 	lea    0x509d(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    7bc9:	48 89 c7             	mov    %rax,%rdi
    7bcc:	e8 ff d5 ff ff       	call   51d0 <__cxa_atexit@plt>
    7bd1:	48 8d 05 80 97 03 00 	lea    0x39780(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7bd8:	48 89 c7             	mov    %rax,%rdi
    7bdb:	e8 20 d5 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7be0:	48 8d 15 19 96 03 00 	lea    0x39619(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7be7:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7bea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7bee:	89 ce                	mov    %ecx,%esi
    7bf0:	48 89 c7             	mov    %rax,%rdi
    7bf3:	e8 10 e7 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7bf8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7bfc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InitializationFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorInitializationFailed ), message ) {}
    7c00:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7c04:	48 89 c6             	mov    %rax,%rsi
    7c07:	48 89 d7             	mov    %rdx,%rdi
    7c0a:	48 89 d0             	mov    %rdx,%rax
    7c0d:	48 89 c2             	mov    %rax,%rdx
    7c10:	48 89 df             	mov    %rbx,%rdi
    7c13:	e8 80 fc ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7c18:	48 8d 15 01 8c 03 00 	lea    0x38c01(%rip),%rdx        # 40820 <_ZTVN2vk25InitializationFailedErrorE+0x10>
    7c1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7c23:	48 89 10             	mov    %rdx,(%rax)
    7c26:	48 8d 15 1b 8c 03 00 	lea    0x38c1b(%rip),%rdx        # 40848 <_ZTVN2vk25InitializationFailedErrorE+0x38>
    7c2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7c31:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7c35:	90                   	nop
    7c36:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7c3a:	c9                   	leave
    7c3b:	c3                   	ret

0000000000007c3c <_ZN2vk15DeviceLostErrorC1EPKc>:
    DeviceLostError( char const * message ) : SystemError( make_error_code( Result::eErrorDeviceLost ), message ) {}
    7c3c:	55                   	push   %rbp
    7c3d:	48 89 e5             	mov    %rsp,%rbp
    7c40:	53                   	push   %rbx
    7c41:	48 83 ec 38          	sub    $0x38,%rsp
    7c45:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7c49:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7c4d:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7c51:	c7 45 ec fc ff ff ff 	movl   $0xfffffffc,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7c58:	0f b6 05 f9 96 03 00 	movzbl 0x396f9(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7c5f:	84 c0                	test   %al,%al
    7c61:	0f 94 c0             	sete   %al
    7c64:	84 c0                	test   %al,%al
    7c66:	74 4a                	je     7cb2 <_ZN2vk15DeviceLostErrorC1EPKc+0x76>
    7c68:	48 8d 05 e9 96 03 00 	lea    0x396e9(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7c6f:	48 89 c7             	mov    %rax,%rdi
    7c72:	e8 49 d7 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7c77:	85 c0                	test   %eax,%eax
    7c79:	0f 95 c0             	setne  %al
    7c7c:	84 c0                	test   %al,%al
    7c7e:	74 32                	je     7cb2 <_ZN2vk15DeviceLostErrorC1EPKc+0x76>
    7c80:	48 8d 05 71 95 03 00 	lea    0x39571(%rip),%rax        # 411f8 <__dso_handle>
    7c87:	48 89 c2             	mov    %rax,%rdx
    7c8a:	48 8d 05 6f 95 03 00 	lea    0x3956f(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    7c91:	48 89 c6             	mov    %rax,%rsi
    7c94:	48 8d 05 cb 4f 00 00 	lea    0x4fcb(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    7c9b:	48 89 c7             	mov    %rax,%rdi
    7c9e:	e8 2d d5 ff ff       	call   51d0 <__cxa_atexit@plt>
    7ca3:	48 8d 05 ae 96 03 00 	lea    0x396ae(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7caa:	48 89 c7             	mov    %rax,%rdi
    7cad:	e8 4e d4 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7cb2:	48 8d 15 47 95 03 00 	lea    0x39547(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7cb9:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7cbc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7cc0:	89 ce                	mov    %ecx,%esi
    7cc2:	48 89 c7             	mov    %rax,%rdi
    7cc5:	e8 3e e6 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7cca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7cce:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    DeviceLostError( char const * message ) : SystemError( make_error_code( Result::eErrorDeviceLost ), message ) {}
    7cd2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7cd6:	48 89 c6             	mov    %rax,%rsi
    7cd9:	48 89 d7             	mov    %rdx,%rdi
    7cdc:	48 89 d0             	mov    %rdx,%rax
    7cdf:	48 89 c2             	mov    %rax,%rdx
    7ce2:	48 89 df             	mov    %rbx,%rdi
    7ce5:	e8 ae fb ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7cea:	48 8d 15 df 8a 03 00 	lea    0x38adf(%rip),%rdx        # 407d0 <_ZTVN2vk15DeviceLostErrorE+0x10>
    7cf1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7cf5:	48 89 10             	mov    %rdx,(%rax)
    7cf8:	48 8d 15 f9 8a 03 00 	lea    0x38af9(%rip),%rdx        # 407f8 <_ZTVN2vk15DeviceLostErrorE+0x38>
    7cff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7d03:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7d07:	90                   	nop
    7d08:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7d0c:	c9                   	leave
    7d0d:	c3                   	ret

0000000000007d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>:
    MemoryMapFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorMemoryMapFailed ), message ) {}
    7d0e:	55                   	push   %rbp
    7d0f:	48 89 e5             	mov    %rsp,%rbp
    7d12:	53                   	push   %rbx
    7d13:	48 83 ec 38          	sub    $0x38,%rsp
    7d17:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7d1b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7d1f:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7d23:	c7 45 ec fb ff ff ff 	movl   $0xfffffffb,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7d2a:	0f b6 05 27 96 03 00 	movzbl 0x39627(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7d31:	84 c0                	test   %al,%al
    7d33:	0f 94 c0             	sete   %al
    7d36:	84 c0                	test   %al,%al
    7d38:	74 4a                	je     7d84 <_ZN2vk20MemoryMapFailedErrorC1EPKc+0x76>
    7d3a:	48 8d 05 17 96 03 00 	lea    0x39617(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7d41:	48 89 c7             	mov    %rax,%rdi
    7d44:	e8 77 d6 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7d49:	85 c0                	test   %eax,%eax
    7d4b:	0f 95 c0             	setne  %al
    7d4e:	84 c0                	test   %al,%al
    7d50:	74 32                	je     7d84 <_ZN2vk20MemoryMapFailedErrorC1EPKc+0x76>
    7d52:	48 8d 05 9f 94 03 00 	lea    0x3949f(%rip),%rax        # 411f8 <__dso_handle>
    7d59:	48 89 c2             	mov    %rax,%rdx
    7d5c:	48 8d 05 9d 94 03 00 	lea    0x3949d(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    7d63:	48 89 c6             	mov    %rax,%rsi
    7d66:	48 8d 05 f9 4e 00 00 	lea    0x4ef9(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    7d6d:	48 89 c7             	mov    %rax,%rdi
    7d70:	e8 5b d4 ff ff       	call   51d0 <__cxa_atexit@plt>
    7d75:	48 8d 05 dc 95 03 00 	lea    0x395dc(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7d7c:	48 89 c7             	mov    %rax,%rdi
    7d7f:	e8 7c d3 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7d84:	48 8d 15 75 94 03 00 	lea    0x39475(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7d8b:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7d8e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7d92:	89 ce                	mov    %ecx,%esi
    7d94:	48 89 c7             	mov    %rax,%rdi
    7d97:	e8 6c e5 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7d9c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7da0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    MemoryMapFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorMemoryMapFailed ), message ) {}
    7da4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7da8:	48 89 c6             	mov    %rax,%rsi
    7dab:	48 89 d7             	mov    %rdx,%rdi
    7dae:	48 89 d0             	mov    %rdx,%rax
    7db1:	48 89 c2             	mov    %rax,%rdx
    7db4:	48 89 df             	mov    %rbx,%rdi
    7db7:	e8 dc fa ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7dbc:	48 8d 15 bd 89 03 00 	lea    0x389bd(%rip),%rdx        # 40780 <_ZTVN2vk20MemoryMapFailedErrorE+0x10>
    7dc3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7dc7:	48 89 10             	mov    %rdx,(%rax)
    7dca:	48 8d 15 d7 89 03 00 	lea    0x389d7(%rip),%rdx        # 407a8 <_ZTVN2vk20MemoryMapFailedErrorE+0x38>
    7dd1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7dd5:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7dd9:	90                   	nop
    7dda:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7dde:	c9                   	leave
    7ddf:	c3                   	ret

0000000000007de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>:
    LayerNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorLayerNotPresent ), message ) {}
    7de0:	55                   	push   %rbp
    7de1:	48 89 e5             	mov    %rsp,%rbp
    7de4:	53                   	push   %rbx
    7de5:	48 83 ec 38          	sub    $0x38,%rsp
    7de9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7ded:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7df1:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7df5:	c7 45 ec fa ff ff ff 	movl   $0xfffffffa,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7dfc:	0f b6 05 55 95 03 00 	movzbl 0x39555(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7e03:	84 c0                	test   %al,%al
    7e05:	0f 94 c0             	sete   %al
    7e08:	84 c0                	test   %al,%al
    7e0a:	74 4a                	je     7e56 <_ZN2vk20LayerNotPresentErrorC1EPKc+0x76>
    7e0c:	48 8d 05 45 95 03 00 	lea    0x39545(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7e13:	48 89 c7             	mov    %rax,%rdi
    7e16:	e8 a5 d5 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7e1b:	85 c0                	test   %eax,%eax
    7e1d:	0f 95 c0             	setne  %al
    7e20:	84 c0                	test   %al,%al
    7e22:	74 32                	je     7e56 <_ZN2vk20LayerNotPresentErrorC1EPKc+0x76>
    7e24:	48 8d 05 cd 93 03 00 	lea    0x393cd(%rip),%rax        # 411f8 <__dso_handle>
    7e2b:	48 89 c2             	mov    %rax,%rdx
    7e2e:	48 8d 05 cb 93 03 00 	lea    0x393cb(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    7e35:	48 89 c6             	mov    %rax,%rsi
    7e38:	48 8d 05 27 4e 00 00 	lea    0x4e27(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    7e3f:	48 89 c7             	mov    %rax,%rdi
    7e42:	e8 89 d3 ff ff       	call   51d0 <__cxa_atexit@plt>
    7e47:	48 8d 05 0a 95 03 00 	lea    0x3950a(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7e4e:	48 89 c7             	mov    %rax,%rdi
    7e51:	e8 aa d2 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7e56:	48 8d 15 a3 93 03 00 	lea    0x393a3(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7e5d:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7e60:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7e64:	89 ce                	mov    %ecx,%esi
    7e66:	48 89 c7             	mov    %rax,%rdi
    7e69:	e8 9a e4 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7e6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7e72:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    LayerNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorLayerNotPresent ), message ) {}
    7e76:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7e7a:	48 89 c6             	mov    %rax,%rsi
    7e7d:	48 89 d7             	mov    %rdx,%rdi
    7e80:	48 89 d0             	mov    %rdx,%rax
    7e83:	48 89 c2             	mov    %rax,%rdx
    7e86:	48 89 df             	mov    %rbx,%rdi
    7e89:	e8 0a fa ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7e8e:	48 8d 15 9b 88 03 00 	lea    0x3889b(%rip),%rdx        # 40730 <_ZTVN2vk20LayerNotPresentErrorE+0x10>
    7e95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7e99:	48 89 10             	mov    %rdx,(%rax)
    7e9c:	48 8d 15 b5 88 03 00 	lea    0x388b5(%rip),%rdx        # 40758 <_ZTVN2vk20LayerNotPresentErrorE+0x38>
    7ea3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7ea7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7eab:	90                   	nop
    7eac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7eb0:	c9                   	leave
    7eb1:	c3                   	ret

0000000000007eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>:
    ExtensionNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorExtensionNotPresent ), message ) {}
    7eb2:	55                   	push   %rbp
    7eb3:	48 89 e5             	mov    %rsp,%rbp
    7eb6:	53                   	push   %rbx
    7eb7:	48 83 ec 38          	sub    $0x38,%rsp
    7ebb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7ebf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7ec3:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7ec7:	c7 45 ec f9 ff ff ff 	movl   $0xfffffff9,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7ece:	0f b6 05 83 94 03 00 	movzbl 0x39483(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7ed5:	84 c0                	test   %al,%al
    7ed7:	0f 94 c0             	sete   %al
    7eda:	84 c0                	test   %al,%al
    7edc:	74 4a                	je     7f28 <_ZN2vk24ExtensionNotPresentErrorC1EPKc+0x76>
    7ede:	48 8d 05 73 94 03 00 	lea    0x39473(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7ee5:	48 89 c7             	mov    %rax,%rdi
    7ee8:	e8 d3 d4 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7eed:	85 c0                	test   %eax,%eax
    7eef:	0f 95 c0             	setne  %al
    7ef2:	84 c0                	test   %al,%al
    7ef4:	74 32                	je     7f28 <_ZN2vk24ExtensionNotPresentErrorC1EPKc+0x76>
    7ef6:	48 8d 05 fb 92 03 00 	lea    0x392fb(%rip),%rax        # 411f8 <__dso_handle>
    7efd:	48 89 c2             	mov    %rax,%rdx
    7f00:	48 8d 05 f9 92 03 00 	lea    0x392f9(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    7f07:	48 89 c6             	mov    %rax,%rsi
    7f0a:	48 8d 05 55 4d 00 00 	lea    0x4d55(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    7f11:	48 89 c7             	mov    %rax,%rdi
    7f14:	e8 b7 d2 ff ff       	call   51d0 <__cxa_atexit@plt>
    7f19:	48 8d 05 38 94 03 00 	lea    0x39438(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7f20:	48 89 c7             	mov    %rax,%rdi
    7f23:	e8 d8 d1 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7f28:	48 8d 15 d1 92 03 00 	lea    0x392d1(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7f2f:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7f32:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7f36:	89 ce                	mov    %ecx,%esi
    7f38:	48 89 c7             	mov    %rax,%rdi
    7f3b:	e8 c8 e3 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7f40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7f44:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ExtensionNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorExtensionNotPresent ), message ) {}
    7f48:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7f4c:	48 89 c6             	mov    %rax,%rsi
    7f4f:	48 89 d7             	mov    %rdx,%rdi
    7f52:	48 89 d0             	mov    %rdx,%rax
    7f55:	48 89 c2             	mov    %rax,%rdx
    7f58:	48 89 df             	mov    %rbx,%rdi
    7f5b:	e8 38 f9 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7f60:	48 8d 15 79 87 03 00 	lea    0x38779(%rip),%rdx        # 406e0 <_ZTVN2vk24ExtensionNotPresentErrorE+0x10>
    7f67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7f6b:	48 89 10             	mov    %rdx,(%rax)
    7f6e:	48 8d 15 93 87 03 00 	lea    0x38793(%rip),%rdx        # 40708 <_ZTVN2vk24ExtensionNotPresentErrorE+0x38>
    7f75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7f79:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7f7d:	90                   	nop
    7f7e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7f82:	c9                   	leave
    7f83:	c3                   	ret

0000000000007f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>:
    FeatureNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorFeatureNotPresent ), message ) {}
    7f84:	55                   	push   %rbp
    7f85:	48 89 e5             	mov    %rsp,%rbp
    7f88:	53                   	push   %rbx
    7f89:	48 83 ec 38          	sub    $0x38,%rsp
    7f8d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7f91:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7f95:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7f99:	c7 45 ec f8 ff ff ff 	movl   $0xfffffff8,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7fa0:	0f b6 05 b1 93 03 00 	movzbl 0x393b1(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7fa7:	84 c0                	test   %al,%al
    7fa9:	0f 94 c0             	sete   %al
    7fac:	84 c0                	test   %al,%al
    7fae:	74 4a                	je     7ffa <_ZN2vk22FeatureNotPresentErrorC1EPKc+0x76>
    7fb0:	48 8d 05 a1 93 03 00 	lea    0x393a1(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7fb7:	48 89 c7             	mov    %rax,%rdi
    7fba:	e8 01 d4 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7fbf:	85 c0                	test   %eax,%eax
    7fc1:	0f 95 c0             	setne  %al
    7fc4:	84 c0                	test   %al,%al
    7fc6:	74 32                	je     7ffa <_ZN2vk22FeatureNotPresentErrorC1EPKc+0x76>
    7fc8:	48 8d 05 29 92 03 00 	lea    0x39229(%rip),%rax        # 411f8 <__dso_handle>
    7fcf:	48 89 c2             	mov    %rax,%rdx
    7fd2:	48 8d 05 27 92 03 00 	lea    0x39227(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    7fd9:	48 89 c6             	mov    %rax,%rsi
    7fdc:	48 8d 05 83 4c 00 00 	lea    0x4c83(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    7fe3:	48 89 c7             	mov    %rax,%rdi
    7fe6:	e8 e5 d1 ff ff       	call   51d0 <__cxa_atexit@plt>
    7feb:	48 8d 05 66 93 03 00 	lea    0x39366(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7ff2:	48 89 c7             	mov    %rax,%rdi
    7ff5:	e8 06 d1 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7ffa:	48 8d 15 ff 91 03 00 	lea    0x391ff(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8001:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8004:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8008:	89 ce                	mov    %ecx,%esi
    800a:	48 89 c7             	mov    %rax,%rdi
    800d:	e8 f6 e2 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8012:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8016:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FeatureNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorFeatureNotPresent ), message ) {}
    801a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    801e:	48 89 c6             	mov    %rax,%rsi
    8021:	48 89 d7             	mov    %rdx,%rdi
    8024:	48 89 d0             	mov    %rdx,%rax
    8027:	48 89 c2             	mov    %rax,%rdx
    802a:	48 89 df             	mov    %rbx,%rdi
    802d:	e8 66 f8 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8032:	48 8d 15 57 86 03 00 	lea    0x38657(%rip),%rdx        # 40690 <_ZTVN2vk22FeatureNotPresentErrorE+0x10>
    8039:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    803d:	48 89 10             	mov    %rdx,(%rax)
    8040:	48 8d 15 71 86 03 00 	lea    0x38671(%rip),%rdx        # 406b8 <_ZTVN2vk22FeatureNotPresentErrorE+0x38>
    8047:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    804b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    804f:	90                   	nop
    8050:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8054:	c9                   	leave
    8055:	c3                   	ret

0000000000008056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>:
    IncompatibleDriverError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDriver ), message ) {}
    8056:	55                   	push   %rbp
    8057:	48 89 e5             	mov    %rsp,%rbp
    805a:	53                   	push   %rbx
    805b:	48 83 ec 38          	sub    $0x38,%rsp
    805f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8063:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8067:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    806b:	c7 45 ec f7 ff ff ff 	movl   $0xfffffff7,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8072:	0f b6 05 df 92 03 00 	movzbl 0x392df(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8079:	84 c0                	test   %al,%al
    807b:	0f 94 c0             	sete   %al
    807e:	84 c0                	test   %al,%al
    8080:	74 4a                	je     80cc <_ZN2vk23IncompatibleDriverErrorC1EPKc+0x76>
    8082:	48 8d 05 cf 92 03 00 	lea    0x392cf(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8089:	48 89 c7             	mov    %rax,%rdi
    808c:	e8 2f d3 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8091:	85 c0                	test   %eax,%eax
    8093:	0f 95 c0             	setne  %al
    8096:	84 c0                	test   %al,%al
    8098:	74 32                	je     80cc <_ZN2vk23IncompatibleDriverErrorC1EPKc+0x76>
    809a:	48 8d 05 57 91 03 00 	lea    0x39157(%rip),%rax        # 411f8 <__dso_handle>
    80a1:	48 89 c2             	mov    %rax,%rdx
    80a4:	48 8d 05 55 91 03 00 	lea    0x39155(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    80ab:	48 89 c6             	mov    %rax,%rsi
    80ae:	48 8d 05 b1 4b 00 00 	lea    0x4bb1(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    80b5:	48 89 c7             	mov    %rax,%rdi
    80b8:	e8 13 d1 ff ff       	call   51d0 <__cxa_atexit@plt>
    80bd:	48 8d 05 94 92 03 00 	lea    0x39294(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    80c4:	48 89 c7             	mov    %rax,%rdi
    80c7:	e8 34 d0 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    80cc:	48 8d 15 2d 91 03 00 	lea    0x3912d(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    80d3:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    80d6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    80da:	89 ce                	mov    %ecx,%esi
    80dc:	48 89 c7             	mov    %rax,%rdi
    80df:	e8 24 e2 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    80e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    80e8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    IncompatibleDriverError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDriver ), message ) {}
    80ec:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    80f0:	48 89 c6             	mov    %rax,%rsi
    80f3:	48 89 d7             	mov    %rdx,%rdi
    80f6:	48 89 d0             	mov    %rdx,%rax
    80f9:	48 89 c2             	mov    %rax,%rdx
    80fc:	48 89 df             	mov    %rbx,%rdi
    80ff:	e8 94 f7 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8104:	48 8d 15 35 85 03 00 	lea    0x38535(%rip),%rdx        # 40640 <_ZTVN2vk23IncompatibleDriverErrorE+0x10>
    810b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    810f:	48 89 10             	mov    %rdx,(%rax)
    8112:	48 8d 15 4f 85 03 00 	lea    0x3854f(%rip),%rdx        # 40668 <_ZTVN2vk23IncompatibleDriverErrorE+0x38>
    8119:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    811d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8121:	90                   	nop
    8122:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8126:	c9                   	leave
    8127:	c3                   	ret

0000000000008128 <_ZN2vk19TooManyObjectsErrorC1EPKc>:
    TooManyObjectsError( char const * message ) : SystemError( make_error_code( Result::eErrorTooManyObjects ), message ) {}
    8128:	55                   	push   %rbp
    8129:	48 89 e5             	mov    %rsp,%rbp
    812c:	53                   	push   %rbx
    812d:	48 83 ec 38          	sub    $0x38,%rsp
    8131:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8135:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8139:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    813d:	c7 45 ec f6 ff ff ff 	movl   $0xfffffff6,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8144:	0f b6 05 0d 92 03 00 	movzbl 0x3920d(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    814b:	84 c0                	test   %al,%al
    814d:	0f 94 c0             	sete   %al
    8150:	84 c0                	test   %al,%al
    8152:	74 4a                	je     819e <_ZN2vk19TooManyObjectsErrorC1EPKc+0x76>
    8154:	48 8d 05 fd 91 03 00 	lea    0x391fd(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    815b:	48 89 c7             	mov    %rax,%rdi
    815e:	e8 5d d2 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8163:	85 c0                	test   %eax,%eax
    8165:	0f 95 c0             	setne  %al
    8168:	84 c0                	test   %al,%al
    816a:	74 32                	je     819e <_ZN2vk19TooManyObjectsErrorC1EPKc+0x76>
    816c:	48 8d 05 85 90 03 00 	lea    0x39085(%rip),%rax        # 411f8 <__dso_handle>
    8173:	48 89 c2             	mov    %rax,%rdx
    8176:	48 8d 05 83 90 03 00 	lea    0x39083(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    817d:	48 89 c6             	mov    %rax,%rsi
    8180:	48 8d 05 df 4a 00 00 	lea    0x4adf(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8187:	48 89 c7             	mov    %rax,%rdi
    818a:	e8 41 d0 ff ff       	call   51d0 <__cxa_atexit@plt>
    818f:	48 8d 05 c2 91 03 00 	lea    0x391c2(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8196:	48 89 c7             	mov    %rax,%rdi
    8199:	e8 62 cf ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    819e:	48 8d 15 5b 90 03 00 	lea    0x3905b(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    81a5:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    81a8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    81ac:	89 ce                	mov    %ecx,%esi
    81ae:	48 89 c7             	mov    %rax,%rdi
    81b1:	e8 52 e1 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    81b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    81ba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    TooManyObjectsError( char const * message ) : SystemError( make_error_code( Result::eErrorTooManyObjects ), message ) {}
    81be:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    81c2:	48 89 c6             	mov    %rax,%rsi
    81c5:	48 89 d7             	mov    %rdx,%rdi
    81c8:	48 89 d0             	mov    %rdx,%rax
    81cb:	48 89 c2             	mov    %rax,%rdx
    81ce:	48 89 df             	mov    %rbx,%rdi
    81d1:	e8 c2 f6 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    81d6:	48 8d 15 13 84 03 00 	lea    0x38413(%rip),%rdx        # 405f0 <_ZTVN2vk19TooManyObjectsErrorE+0x10>
    81dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    81e1:	48 89 10             	mov    %rdx,(%rax)
    81e4:	48 8d 15 2d 84 03 00 	lea    0x3842d(%rip),%rdx        # 40618 <_ZTVN2vk19TooManyObjectsErrorE+0x38>
    81eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    81ef:	48 89 50 08          	mov    %rdx,0x8(%rax)
    81f3:	90                   	nop
    81f4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    81f8:	c9                   	leave
    81f9:	c3                   	ret

00000000000081fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>:
    FormatNotSupportedError( char const * message ) : SystemError( make_error_code( Result::eErrorFormatNotSupported ), message ) {}
    81fa:	55                   	push   %rbp
    81fb:	48 89 e5             	mov    %rsp,%rbp
    81fe:	53                   	push   %rbx
    81ff:	48 83 ec 38          	sub    $0x38,%rsp
    8203:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8207:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    820b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    820f:	c7 45 ec f5 ff ff ff 	movl   $0xfffffff5,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8216:	0f b6 05 3b 91 03 00 	movzbl 0x3913b(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    821d:	84 c0                	test   %al,%al
    821f:	0f 94 c0             	sete   %al
    8222:	84 c0                	test   %al,%al
    8224:	74 4a                	je     8270 <_ZN2vk23FormatNotSupportedErrorC1EPKc+0x76>
    8226:	48 8d 05 2b 91 03 00 	lea    0x3912b(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    822d:	48 89 c7             	mov    %rax,%rdi
    8230:	e8 8b d1 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8235:	85 c0                	test   %eax,%eax
    8237:	0f 95 c0             	setne  %al
    823a:	84 c0                	test   %al,%al
    823c:	74 32                	je     8270 <_ZN2vk23FormatNotSupportedErrorC1EPKc+0x76>
    823e:	48 8d 05 b3 8f 03 00 	lea    0x38fb3(%rip),%rax        # 411f8 <__dso_handle>
    8245:	48 89 c2             	mov    %rax,%rdx
    8248:	48 8d 05 b1 8f 03 00 	lea    0x38fb1(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    824f:	48 89 c6             	mov    %rax,%rsi
    8252:	48 8d 05 0d 4a 00 00 	lea    0x4a0d(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8259:	48 89 c7             	mov    %rax,%rdi
    825c:	e8 6f cf ff ff       	call   51d0 <__cxa_atexit@plt>
    8261:	48 8d 05 f0 90 03 00 	lea    0x390f0(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8268:	48 89 c7             	mov    %rax,%rdi
    826b:	e8 90 ce ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8270:	48 8d 15 89 8f 03 00 	lea    0x38f89(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8277:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    827a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    827e:	89 ce                	mov    %ecx,%esi
    8280:	48 89 c7             	mov    %rax,%rdi
    8283:	e8 80 e0 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8288:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    828c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FormatNotSupportedError( char const * message ) : SystemError( make_error_code( Result::eErrorFormatNotSupported ), message ) {}
    8290:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8294:	48 89 c6             	mov    %rax,%rsi
    8297:	48 89 d7             	mov    %rdx,%rdi
    829a:	48 89 d0             	mov    %rdx,%rax
    829d:	48 89 c2             	mov    %rax,%rdx
    82a0:	48 89 df             	mov    %rbx,%rdi
    82a3:	e8 f0 f5 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    82a8:	48 8d 15 f1 82 03 00 	lea    0x382f1(%rip),%rdx        # 405a0 <_ZTVN2vk23FormatNotSupportedErrorE+0x10>
    82af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    82b3:	48 89 10             	mov    %rdx,(%rax)
    82b6:	48 8d 15 0b 83 03 00 	lea    0x3830b(%rip),%rdx        # 405c8 <_ZTVN2vk23FormatNotSupportedErrorE+0x38>
    82bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    82c1:	48 89 50 08          	mov    %rdx,0x8(%rax)
    82c5:	90                   	nop
    82c6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    82ca:	c9                   	leave
    82cb:	c3                   	ret

00000000000082cc <_ZN2vk19FragmentedPoolErrorC1EPKc>:
    FragmentedPoolError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentedPool ), message ) {}
    82cc:	55                   	push   %rbp
    82cd:	48 89 e5             	mov    %rsp,%rbp
    82d0:	53                   	push   %rbx
    82d1:	48 83 ec 38          	sub    $0x38,%rsp
    82d5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    82d9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    82dd:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    82e1:	c7 45 ec f4 ff ff ff 	movl   $0xfffffff4,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    82e8:	0f b6 05 69 90 03 00 	movzbl 0x39069(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    82ef:	84 c0                	test   %al,%al
    82f1:	0f 94 c0             	sete   %al
    82f4:	84 c0                	test   %al,%al
    82f6:	74 4a                	je     8342 <_ZN2vk19FragmentedPoolErrorC1EPKc+0x76>
    82f8:	48 8d 05 59 90 03 00 	lea    0x39059(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    82ff:	48 89 c7             	mov    %rax,%rdi
    8302:	e8 b9 d0 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8307:	85 c0                	test   %eax,%eax
    8309:	0f 95 c0             	setne  %al
    830c:	84 c0                	test   %al,%al
    830e:	74 32                	je     8342 <_ZN2vk19FragmentedPoolErrorC1EPKc+0x76>
    8310:	48 8d 05 e1 8e 03 00 	lea    0x38ee1(%rip),%rax        # 411f8 <__dso_handle>
    8317:	48 89 c2             	mov    %rax,%rdx
    831a:	48 8d 05 df 8e 03 00 	lea    0x38edf(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    8321:	48 89 c6             	mov    %rax,%rsi
    8324:	48 8d 05 3b 49 00 00 	lea    0x493b(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    832b:	48 89 c7             	mov    %rax,%rdi
    832e:	e8 9d ce ff ff       	call   51d0 <__cxa_atexit@plt>
    8333:	48 8d 05 1e 90 03 00 	lea    0x3901e(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    833a:	48 89 c7             	mov    %rax,%rdi
    833d:	e8 be cd ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8342:	48 8d 15 b7 8e 03 00 	lea    0x38eb7(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8349:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    834c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8350:	89 ce                	mov    %ecx,%esi
    8352:	48 89 c7             	mov    %rax,%rdi
    8355:	e8 ae df ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    835a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    835e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FragmentedPoolError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentedPool ), message ) {}
    8362:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8366:	48 89 c6             	mov    %rax,%rsi
    8369:	48 89 d7             	mov    %rdx,%rdi
    836c:	48 89 d0             	mov    %rdx,%rax
    836f:	48 89 c2             	mov    %rax,%rdx
    8372:	48 89 df             	mov    %rbx,%rdi
    8375:	e8 1e f5 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    837a:	48 8d 15 cf 81 03 00 	lea    0x381cf(%rip),%rdx        # 40550 <_ZTVN2vk19FragmentedPoolErrorE+0x10>
    8381:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8385:	48 89 10             	mov    %rdx,(%rax)
    8388:	48 8d 15 e9 81 03 00 	lea    0x381e9(%rip),%rdx        # 40578 <_ZTVN2vk19FragmentedPoolErrorE+0x38>
    838f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8393:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8397:	90                   	nop
    8398:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    839c:	c9                   	leave
    839d:	c3                   	ret

000000000000839e <_ZN2vk12UnknownErrorC1EPKc>:
    UnknownError( char const * message ) : SystemError( make_error_code( Result::eErrorUnknown ), message ) {}
    839e:	55                   	push   %rbp
    839f:	48 89 e5             	mov    %rsp,%rbp
    83a2:	53                   	push   %rbx
    83a3:	48 83 ec 38          	sub    $0x38,%rsp
    83a7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    83ab:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    83af:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    83b3:	c7 45 ec f3 ff ff ff 	movl   $0xfffffff3,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    83ba:	0f b6 05 97 8f 03 00 	movzbl 0x38f97(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    83c1:	84 c0                	test   %al,%al
    83c3:	0f 94 c0             	sete   %al
    83c6:	84 c0                	test   %al,%al
    83c8:	74 4a                	je     8414 <_ZN2vk12UnknownErrorC1EPKc+0x76>
    83ca:	48 8d 05 87 8f 03 00 	lea    0x38f87(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    83d1:	48 89 c7             	mov    %rax,%rdi
    83d4:	e8 e7 cf ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    83d9:	85 c0                	test   %eax,%eax
    83db:	0f 95 c0             	setne  %al
    83de:	84 c0                	test   %al,%al
    83e0:	74 32                	je     8414 <_ZN2vk12UnknownErrorC1EPKc+0x76>
    83e2:	48 8d 05 0f 8e 03 00 	lea    0x38e0f(%rip),%rax        # 411f8 <__dso_handle>
    83e9:	48 89 c2             	mov    %rax,%rdx
    83ec:	48 8d 05 0d 8e 03 00 	lea    0x38e0d(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    83f3:	48 89 c6             	mov    %rax,%rsi
    83f6:	48 8d 05 69 48 00 00 	lea    0x4869(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    83fd:	48 89 c7             	mov    %rax,%rdi
    8400:	e8 cb cd ff ff       	call   51d0 <__cxa_atexit@plt>
    8405:	48 8d 05 4c 8f 03 00 	lea    0x38f4c(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    840c:	48 89 c7             	mov    %rax,%rdi
    840f:	e8 ec cc ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8414:	48 8d 15 e5 8d 03 00 	lea    0x38de5(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    841b:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    841e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8422:	89 ce                	mov    %ecx,%esi
    8424:	48 89 c7             	mov    %rax,%rdi
    8427:	e8 dc de ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    842c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8430:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    UnknownError( char const * message ) : SystemError( make_error_code( Result::eErrorUnknown ), message ) {}
    8434:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8438:	48 89 c6             	mov    %rax,%rsi
    843b:	48 89 d7             	mov    %rdx,%rdi
    843e:	48 89 d0             	mov    %rdx,%rax
    8441:	48 89 c2             	mov    %rax,%rdx
    8444:	48 89 df             	mov    %rbx,%rdi
    8447:	e8 4c f4 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    844c:	48 8d 15 ad 80 03 00 	lea    0x380ad(%rip),%rdx        # 40500 <_ZTVN2vk12UnknownErrorE+0x10>
    8453:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8457:	48 89 10             	mov    %rdx,(%rax)
    845a:	48 8d 15 c7 80 03 00 	lea    0x380c7(%rip),%rdx        # 40528 <_ZTVN2vk12UnknownErrorE+0x38>
    8461:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8465:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8469:	90                   	nop
    846a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    846e:	c9                   	leave
    846f:	c3                   	ret

0000000000008470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>:
    OutOfPoolMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfPoolMemory ), message ) {}
    8470:	55                   	push   %rbp
    8471:	48 89 e5             	mov    %rsp,%rbp
    8474:	53                   	push   %rbx
    8475:	48 83 ec 38          	sub    $0x38,%rsp
    8479:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    847d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8481:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8485:	c7 45 ec 78 28 64 c4 	movl   $0xc4642878,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    848c:	0f b6 05 c5 8e 03 00 	movzbl 0x38ec5(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8493:	84 c0                	test   %al,%al
    8495:	0f 94 c0             	sete   %al
    8498:	84 c0                	test   %al,%al
    849a:	74 4a                	je     84e6 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc+0x76>
    849c:	48 8d 05 b5 8e 03 00 	lea    0x38eb5(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    84a3:	48 89 c7             	mov    %rax,%rdi
    84a6:	e8 15 cf ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    84ab:	85 c0                	test   %eax,%eax
    84ad:	0f 95 c0             	setne  %al
    84b0:	84 c0                	test   %al,%al
    84b2:	74 32                	je     84e6 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc+0x76>
    84b4:	48 8d 05 3d 8d 03 00 	lea    0x38d3d(%rip),%rax        # 411f8 <__dso_handle>
    84bb:	48 89 c2             	mov    %rax,%rdx
    84be:	48 8d 05 3b 8d 03 00 	lea    0x38d3b(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    84c5:	48 89 c6             	mov    %rax,%rsi
    84c8:	48 8d 05 97 47 00 00 	lea    0x4797(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    84cf:	48 89 c7             	mov    %rax,%rdi
    84d2:	e8 f9 cc ff ff       	call   51d0 <__cxa_atexit@plt>
    84d7:	48 8d 05 7a 8e 03 00 	lea    0x38e7a(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    84de:	48 89 c7             	mov    %rax,%rdi
    84e1:	e8 1a cc ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    84e6:	48 8d 15 13 8d 03 00 	lea    0x38d13(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    84ed:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    84f0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    84f4:	89 ce                	mov    %ecx,%esi
    84f6:	48 89 c7             	mov    %rax,%rdi
    84f9:	e8 0a de ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    84fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8502:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfPoolMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfPoolMemory ), message ) {}
    8506:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    850a:	48 89 c6             	mov    %rax,%rsi
    850d:	48 89 d7             	mov    %rdx,%rdi
    8510:	48 89 d0             	mov    %rdx,%rax
    8513:	48 89 c2             	mov    %rax,%rdx
    8516:	48 89 df             	mov    %rbx,%rdi
    8519:	e8 7a f3 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    851e:	48 8d 15 8b 7f 03 00 	lea    0x37f8b(%rip),%rdx        # 404b0 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x10>
    8525:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8529:	48 89 10             	mov    %rdx,(%rax)
    852c:	48 8d 15 a5 7f 03 00 	lea    0x37fa5(%rip),%rdx        # 404d8 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x38>
    8533:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8537:	48 89 50 08          	mov    %rdx,0x8(%rax)
    853b:	90                   	nop
    853c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8540:	c9                   	leave
    8541:	c3                   	ret

0000000000008542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>:
    InvalidExternalHandleError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidExternalHandle ), message ) {}
    8542:	55                   	push   %rbp
    8543:	48 89 e5             	mov    %rsp,%rbp
    8546:	53                   	push   %rbx
    8547:	48 83 ec 38          	sub    $0x38,%rsp
    854b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    854f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8553:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8557:	c7 45 ec bd 1c 64 c4 	movl   $0xc4641cbd,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    855e:	0f b6 05 f3 8d 03 00 	movzbl 0x38df3(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8565:	84 c0                	test   %al,%al
    8567:	0f 94 c0             	sete   %al
    856a:	84 c0                	test   %al,%al
    856c:	74 4a                	je     85b8 <_ZN2vk26InvalidExternalHandleErrorC1EPKc+0x76>
    856e:	48 8d 05 e3 8d 03 00 	lea    0x38de3(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8575:	48 89 c7             	mov    %rax,%rdi
    8578:	e8 43 ce ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    857d:	85 c0                	test   %eax,%eax
    857f:	0f 95 c0             	setne  %al
    8582:	84 c0                	test   %al,%al
    8584:	74 32                	je     85b8 <_ZN2vk26InvalidExternalHandleErrorC1EPKc+0x76>
    8586:	48 8d 05 6b 8c 03 00 	lea    0x38c6b(%rip),%rax        # 411f8 <__dso_handle>
    858d:	48 89 c2             	mov    %rax,%rdx
    8590:	48 8d 05 69 8c 03 00 	lea    0x38c69(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    8597:	48 89 c6             	mov    %rax,%rsi
    859a:	48 8d 05 c5 46 00 00 	lea    0x46c5(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    85a1:	48 89 c7             	mov    %rax,%rdi
    85a4:	e8 27 cc ff ff       	call   51d0 <__cxa_atexit@plt>
    85a9:	48 8d 05 a8 8d 03 00 	lea    0x38da8(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    85b0:	48 89 c7             	mov    %rax,%rdi
    85b3:	e8 48 cb ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    85b8:	48 8d 15 41 8c 03 00 	lea    0x38c41(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    85bf:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    85c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    85c6:	89 ce                	mov    %ecx,%esi
    85c8:	48 89 c7             	mov    %rax,%rdi
    85cb:	e8 38 dd ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    85d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    85d4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InvalidExternalHandleError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidExternalHandle ), message ) {}
    85d8:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    85dc:	48 89 c6             	mov    %rax,%rsi
    85df:	48 89 d7             	mov    %rdx,%rdi
    85e2:	48 89 d0             	mov    %rdx,%rax
    85e5:	48 89 c2             	mov    %rax,%rdx
    85e8:	48 89 df             	mov    %rbx,%rdi
    85eb:	e8 a8 f2 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    85f0:	48 8d 15 69 7e 03 00 	lea    0x37e69(%rip),%rdx        # 40460 <_ZTVN2vk26InvalidExternalHandleErrorE+0x10>
    85f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    85fb:	48 89 10             	mov    %rdx,(%rax)
    85fe:	48 8d 15 83 7e 03 00 	lea    0x37e83(%rip),%rdx        # 40488 <_ZTVN2vk26InvalidExternalHandleErrorE+0x38>
    8605:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8609:	48 89 50 08          	mov    %rdx,0x8(%rax)
    860d:	90                   	nop
    860e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8612:	c9                   	leave
    8613:	c3                   	ret

0000000000008614 <_ZN2vk18FragmentationErrorC1EPKc>:
    FragmentationError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentation ), message ) {}
    8614:	55                   	push   %rbp
    8615:	48 89 e5             	mov    %rsp,%rbp
    8618:	53                   	push   %rbx
    8619:	48 83 ec 38          	sub    $0x38,%rsp
    861d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8621:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8625:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8629:	c7 45 ec 18 c1 62 c4 	movl   $0xc462c118,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8630:	0f b6 05 21 8d 03 00 	movzbl 0x38d21(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8637:	84 c0                	test   %al,%al
    8639:	0f 94 c0             	sete   %al
    863c:	84 c0                	test   %al,%al
    863e:	74 4a                	je     868a <_ZN2vk18FragmentationErrorC1EPKc+0x76>
    8640:	48 8d 05 11 8d 03 00 	lea    0x38d11(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8647:	48 89 c7             	mov    %rax,%rdi
    864a:	e8 71 cd ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    864f:	85 c0                	test   %eax,%eax
    8651:	0f 95 c0             	setne  %al
    8654:	84 c0                	test   %al,%al
    8656:	74 32                	je     868a <_ZN2vk18FragmentationErrorC1EPKc+0x76>
    8658:	48 8d 05 99 8b 03 00 	lea    0x38b99(%rip),%rax        # 411f8 <__dso_handle>
    865f:	48 89 c2             	mov    %rax,%rdx
    8662:	48 8d 05 97 8b 03 00 	lea    0x38b97(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    8669:	48 89 c6             	mov    %rax,%rsi
    866c:	48 8d 05 f3 45 00 00 	lea    0x45f3(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8673:	48 89 c7             	mov    %rax,%rdi
    8676:	e8 55 cb ff ff       	call   51d0 <__cxa_atexit@plt>
    867b:	48 8d 05 d6 8c 03 00 	lea    0x38cd6(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8682:	48 89 c7             	mov    %rax,%rdi
    8685:	e8 76 ca ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    868a:	48 8d 15 6f 8b 03 00 	lea    0x38b6f(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8691:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8694:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8698:	89 ce                	mov    %ecx,%esi
    869a:	48 89 c7             	mov    %rax,%rdi
    869d:	e8 66 dc ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    86a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    86a6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FragmentationError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentation ), message ) {}
    86aa:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    86ae:	48 89 c6             	mov    %rax,%rsi
    86b1:	48 89 d7             	mov    %rdx,%rdi
    86b4:	48 89 d0             	mov    %rdx,%rax
    86b7:	48 89 c2             	mov    %rax,%rdx
    86ba:	48 89 df             	mov    %rbx,%rdi
    86bd:	e8 d6 f1 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    86c2:	48 8d 15 47 7d 03 00 	lea    0x37d47(%rip),%rdx        # 40410 <_ZTVN2vk18FragmentationErrorE+0x10>
    86c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    86cd:	48 89 10             	mov    %rdx,(%rax)
    86d0:	48 8d 15 61 7d 03 00 	lea    0x37d61(%rip),%rdx        # 40438 <_ZTVN2vk18FragmentationErrorE+0x38>
    86d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    86db:	48 89 50 08          	mov    %rdx,0x8(%rax)
    86df:	90                   	nop
    86e0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    86e4:	c9                   	leave
    86e5:	c3                   	ret

00000000000086e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>:
    InvalidOpaqueCaptureAddressError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidOpaqueCaptureAddress ), message ) {}
    86e6:	55                   	push   %rbp
    86e7:	48 89 e5             	mov    %rsp,%rbp
    86ea:	53                   	push   %rbx
    86eb:	48 83 ec 38          	sub    $0x38,%rsp
    86ef:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    86f3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    86f7:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    86fb:	c7 45 ec 18 4a 61 c4 	movl   $0xc4614a18,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8702:	0f b6 05 4f 8c 03 00 	movzbl 0x38c4f(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8709:	84 c0                	test   %al,%al
    870b:	0f 94 c0             	sete   %al
    870e:	84 c0                	test   %al,%al
    8710:	74 4a                	je     875c <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc+0x76>
    8712:	48 8d 05 3f 8c 03 00 	lea    0x38c3f(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8719:	48 89 c7             	mov    %rax,%rdi
    871c:	e8 9f cc ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8721:	85 c0                	test   %eax,%eax
    8723:	0f 95 c0             	setne  %al
    8726:	84 c0                	test   %al,%al
    8728:	74 32                	je     875c <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc+0x76>
    872a:	48 8d 05 c7 8a 03 00 	lea    0x38ac7(%rip),%rax        # 411f8 <__dso_handle>
    8731:	48 89 c2             	mov    %rax,%rdx
    8734:	48 8d 05 c5 8a 03 00 	lea    0x38ac5(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    873b:	48 89 c6             	mov    %rax,%rsi
    873e:	48 8d 05 21 45 00 00 	lea    0x4521(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8745:	48 89 c7             	mov    %rax,%rdi
    8748:	e8 83 ca ff ff       	call   51d0 <__cxa_atexit@plt>
    874d:	48 8d 05 04 8c 03 00 	lea    0x38c04(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8754:	48 89 c7             	mov    %rax,%rdi
    8757:	e8 a4 c9 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    875c:	48 8d 15 9d 8a 03 00 	lea    0x38a9d(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8763:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8766:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    876a:	89 ce                	mov    %ecx,%esi
    876c:	48 89 c7             	mov    %rax,%rdi
    876f:	e8 94 db ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8774:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8778:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InvalidOpaqueCaptureAddressError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidOpaqueCaptureAddress ), message ) {}
    877c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8780:	48 89 c6             	mov    %rax,%rsi
    8783:	48 89 d7             	mov    %rdx,%rdi
    8786:	48 89 d0             	mov    %rdx,%rax
    8789:	48 89 c2             	mov    %rax,%rdx
    878c:	48 89 df             	mov    %rbx,%rdi
    878f:	e8 04 f1 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8794:	48 8d 15 25 7c 03 00 	lea    0x37c25(%rip),%rdx        # 403c0 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x10>
    879b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    879f:	48 89 10             	mov    %rdx,(%rax)
    87a2:	48 8d 15 3f 7c 03 00 	lea    0x37c3f(%rip),%rdx        # 403e8 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x38>
    87a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    87ad:	48 89 50 08          	mov    %rdx,0x8(%rax)
    87b1:	90                   	nop
    87b2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    87b6:	c9                   	leave
    87b7:	c3                   	ret

00000000000087b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>:
    SurfaceLostKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorSurfaceLostKHR ), message ) {}
    87b8:	55                   	push   %rbp
    87b9:	48 89 e5             	mov    %rsp,%rbp
    87bc:	53                   	push   %rbx
    87bd:	48 83 ec 38          	sub    $0x38,%rsp
    87c1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    87c5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    87c9:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    87cd:	c7 45 ec 00 36 65 c4 	movl   $0xc4653600,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    87d4:	0f b6 05 7d 8b 03 00 	movzbl 0x38b7d(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    87db:	84 c0                	test   %al,%al
    87dd:	0f 94 c0             	sete   %al
    87e0:	84 c0                	test   %al,%al
    87e2:	74 4a                	je     882e <_ZN2vk19SurfaceLostKHRErrorC1EPKc+0x76>
    87e4:	48 8d 05 6d 8b 03 00 	lea    0x38b6d(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    87eb:	48 89 c7             	mov    %rax,%rdi
    87ee:	e8 cd cb ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    87f3:	85 c0                	test   %eax,%eax
    87f5:	0f 95 c0             	setne  %al
    87f8:	84 c0                	test   %al,%al
    87fa:	74 32                	je     882e <_ZN2vk19SurfaceLostKHRErrorC1EPKc+0x76>
    87fc:	48 8d 05 f5 89 03 00 	lea    0x389f5(%rip),%rax        # 411f8 <__dso_handle>
    8803:	48 89 c2             	mov    %rax,%rdx
    8806:	48 8d 05 f3 89 03 00 	lea    0x389f3(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    880d:	48 89 c6             	mov    %rax,%rsi
    8810:	48 8d 05 4f 44 00 00 	lea    0x444f(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8817:	48 89 c7             	mov    %rax,%rdi
    881a:	e8 b1 c9 ff ff       	call   51d0 <__cxa_atexit@plt>
    881f:	48 8d 05 32 8b 03 00 	lea    0x38b32(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8826:	48 89 c7             	mov    %rax,%rdi
    8829:	e8 d2 c8 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    882e:	48 8d 15 cb 89 03 00 	lea    0x389cb(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8835:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8838:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    883c:	89 ce                	mov    %ecx,%esi
    883e:	48 89 c7             	mov    %rax,%rdi
    8841:	e8 c2 da ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8846:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    884a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    SurfaceLostKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorSurfaceLostKHR ), message ) {}
    884e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8852:	48 89 c6             	mov    %rax,%rsi
    8855:	48 89 d7             	mov    %rdx,%rdi
    8858:	48 89 d0             	mov    %rdx,%rax
    885b:	48 89 c2             	mov    %rax,%rdx
    885e:	48 89 df             	mov    %rbx,%rdi
    8861:	e8 32 f0 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8866:	48 8d 15 03 7b 03 00 	lea    0x37b03(%rip),%rdx        # 40370 <_ZTVN2vk19SurfaceLostKHRErrorE+0x10>
    886d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8871:	48 89 10             	mov    %rdx,(%rax)
    8874:	48 8d 15 1d 7b 03 00 	lea    0x37b1d(%rip),%rdx        # 40398 <_ZTVN2vk19SurfaceLostKHRErrorE+0x38>
    887b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    887f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8883:	90                   	nop
    8884:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8888:	c9                   	leave
    8889:	c3                   	ret

000000000000888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>:
    NativeWindowInUseKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNativeWindowInUseKHR ), message ) {}
    888a:	55                   	push   %rbp
    888b:	48 89 e5             	mov    %rsp,%rbp
    888e:	53                   	push   %rbx
    888f:	48 83 ec 38          	sub    $0x38,%rsp
    8893:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8897:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    889b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    889f:	c7 45 ec ff 35 65 c4 	movl   $0xc46535ff,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    88a6:	0f b6 05 ab 8a 03 00 	movzbl 0x38aab(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    88ad:	84 c0                	test   %al,%al
    88af:	0f 94 c0             	sete   %al
    88b2:	84 c0                	test   %al,%al
    88b4:	74 4a                	je     8900 <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc+0x76>
    88b6:	48 8d 05 9b 8a 03 00 	lea    0x38a9b(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    88bd:	48 89 c7             	mov    %rax,%rdi
    88c0:	e8 fb ca ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    88c5:	85 c0                	test   %eax,%eax
    88c7:	0f 95 c0             	setne  %al
    88ca:	84 c0                	test   %al,%al
    88cc:	74 32                	je     8900 <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc+0x76>
    88ce:	48 8d 05 23 89 03 00 	lea    0x38923(%rip),%rax        # 411f8 <__dso_handle>
    88d5:	48 89 c2             	mov    %rax,%rdx
    88d8:	48 8d 05 21 89 03 00 	lea    0x38921(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    88df:	48 89 c6             	mov    %rax,%rsi
    88e2:	48 8d 05 7d 43 00 00 	lea    0x437d(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    88e9:	48 89 c7             	mov    %rax,%rdi
    88ec:	e8 df c8 ff ff       	call   51d0 <__cxa_atexit@plt>
    88f1:	48 8d 05 60 8a 03 00 	lea    0x38a60(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    88f8:	48 89 c7             	mov    %rax,%rdi
    88fb:	e8 00 c8 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8900:	48 8d 15 f9 88 03 00 	lea    0x388f9(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8907:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    890a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    890e:	89 ce                	mov    %ecx,%esi
    8910:	48 89 c7             	mov    %rax,%rdi
    8913:	e8 f0 d9 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8918:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    891c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    NativeWindowInUseKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNativeWindowInUseKHR ), message ) {}
    8920:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8924:	48 89 c6             	mov    %rax,%rsi
    8927:	48 89 d7             	mov    %rdx,%rdi
    892a:	48 89 d0             	mov    %rdx,%rax
    892d:	48 89 c2             	mov    %rax,%rdx
    8930:	48 89 df             	mov    %rbx,%rdi
    8933:	e8 60 ef ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8938:	48 8d 15 e1 79 03 00 	lea    0x379e1(%rip),%rdx        # 40320 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x10>
    893f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8943:	48 89 10             	mov    %rdx,(%rax)
    8946:	48 8d 15 fb 79 03 00 	lea    0x379fb(%rip),%rdx        # 40348 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x38>
    894d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8951:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8955:	90                   	nop
    8956:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    895a:	c9                   	leave
    895b:	c3                   	ret

000000000000895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>:
    OutOfDateKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDateKHR ), message ) {}
    895c:	55                   	push   %rbp
    895d:	48 89 e5             	mov    %rsp,%rbp
    8960:	53                   	push   %rbx
    8961:	48 83 ec 38          	sub    $0x38,%rsp
    8965:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8969:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    896d:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8971:	c7 45 ec 14 32 65 c4 	movl   $0xc4653214,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8978:	0f b6 05 d9 89 03 00 	movzbl 0x389d9(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    897f:	84 c0                	test   %al,%al
    8981:	0f 94 c0             	sete   %al
    8984:	84 c0                	test   %al,%al
    8986:	74 4a                	je     89d2 <_ZN2vk17OutOfDateKHRErrorC1EPKc+0x76>
    8988:	48 8d 05 c9 89 03 00 	lea    0x389c9(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    898f:	48 89 c7             	mov    %rax,%rdi
    8992:	e8 29 ca ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8997:	85 c0                	test   %eax,%eax
    8999:	0f 95 c0             	setne  %al
    899c:	84 c0                	test   %al,%al
    899e:	74 32                	je     89d2 <_ZN2vk17OutOfDateKHRErrorC1EPKc+0x76>
    89a0:	48 8d 05 51 88 03 00 	lea    0x38851(%rip),%rax        # 411f8 <__dso_handle>
    89a7:	48 89 c2             	mov    %rax,%rdx
    89aa:	48 8d 05 4f 88 03 00 	lea    0x3884f(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    89b1:	48 89 c6             	mov    %rax,%rsi
    89b4:	48 8d 05 ab 42 00 00 	lea    0x42ab(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    89bb:	48 89 c7             	mov    %rax,%rdi
    89be:	e8 0d c8 ff ff       	call   51d0 <__cxa_atexit@plt>
    89c3:	48 8d 05 8e 89 03 00 	lea    0x3898e(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    89ca:	48 89 c7             	mov    %rax,%rdi
    89cd:	e8 2e c7 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    89d2:	48 8d 15 27 88 03 00 	lea    0x38827(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    89d9:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    89dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    89e0:	89 ce                	mov    %ecx,%esi
    89e2:	48 89 c7             	mov    %rax,%rdi
    89e5:	e8 1e d9 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    89ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    89ee:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfDateKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDateKHR ), message ) {}
    89f2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    89f6:	48 89 c6             	mov    %rax,%rsi
    89f9:	48 89 d7             	mov    %rdx,%rdi
    89fc:	48 89 d0             	mov    %rdx,%rax
    89ff:	48 89 c2             	mov    %rax,%rdx
    8a02:	48 89 df             	mov    %rbx,%rdi
    8a05:	e8 8e ee ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8a0a:	48 8d 15 bf 78 03 00 	lea    0x378bf(%rip),%rdx        # 402d0 <_ZTVN2vk17OutOfDateKHRErrorE+0x10>
    8a11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8a15:	48 89 10             	mov    %rdx,(%rax)
    8a18:	48 8d 15 d9 78 03 00 	lea    0x378d9(%rip),%rdx        # 402f8 <_ZTVN2vk17OutOfDateKHRErrorE+0x38>
    8a1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8a23:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8a27:	90                   	nop
    8a28:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8a2c:	c9                   	leave
    8a2d:	c3                   	ret

0000000000008a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>:
    IncompatibleDisplayKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDisplayKHR ), message ) {}
    8a2e:	55                   	push   %rbp
    8a2f:	48 89 e5             	mov    %rsp,%rbp
    8a32:	53                   	push   %rbx
    8a33:	48 83 ec 38          	sub    $0x38,%rsp
    8a37:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8a3b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8a3f:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8a43:	c7 45 ec 47 2a 65 c4 	movl   $0xc4652a47,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8a4a:	0f b6 05 07 89 03 00 	movzbl 0x38907(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8a51:	84 c0                	test   %al,%al
    8a53:	0f 94 c0             	sete   %al
    8a56:	84 c0                	test   %al,%al
    8a58:	74 4a                	je     8aa4 <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc+0x76>
    8a5a:	48 8d 05 f7 88 03 00 	lea    0x388f7(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8a61:	48 89 c7             	mov    %rax,%rdi
    8a64:	e8 57 c9 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8a69:	85 c0                	test   %eax,%eax
    8a6b:	0f 95 c0             	setne  %al
    8a6e:	84 c0                	test   %al,%al
    8a70:	74 32                	je     8aa4 <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc+0x76>
    8a72:	48 8d 05 7f 87 03 00 	lea    0x3877f(%rip),%rax        # 411f8 <__dso_handle>
    8a79:	48 89 c2             	mov    %rax,%rdx
    8a7c:	48 8d 05 7d 87 03 00 	lea    0x3877d(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    8a83:	48 89 c6             	mov    %rax,%rsi
    8a86:	48 8d 05 d9 41 00 00 	lea    0x41d9(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8a8d:	48 89 c7             	mov    %rax,%rdi
    8a90:	e8 3b c7 ff ff       	call   51d0 <__cxa_atexit@plt>
    8a95:	48 8d 05 bc 88 03 00 	lea    0x388bc(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8a9c:	48 89 c7             	mov    %rax,%rdi
    8a9f:	e8 5c c6 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8aa4:	48 8d 15 55 87 03 00 	lea    0x38755(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8aab:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8aae:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8ab2:	89 ce                	mov    %ecx,%esi
    8ab4:	48 89 c7             	mov    %rax,%rdi
    8ab7:	e8 4c d8 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8abc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8ac0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    IncompatibleDisplayKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDisplayKHR ), message ) {}
    8ac4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8ac8:	48 89 c6             	mov    %rax,%rsi
    8acb:	48 89 d7             	mov    %rdx,%rdi
    8ace:	48 89 d0             	mov    %rdx,%rax
    8ad1:	48 89 c2             	mov    %rax,%rdx
    8ad4:	48 89 df             	mov    %rbx,%rdi
    8ad7:	e8 bc ed ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8adc:	48 8d 15 9d 77 03 00 	lea    0x3779d(%rip),%rdx        # 40280 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x10>
    8ae3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8ae7:	48 89 10             	mov    %rdx,(%rax)
    8aea:	48 8d 15 b7 77 03 00 	lea    0x377b7(%rip),%rdx        # 402a8 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x38>
    8af1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8af5:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8af9:	90                   	nop
    8afa:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8afe:	c9                   	leave
    8aff:	c3                   	ret

0000000000008b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>:
    ValidationFailedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorValidationFailedEXT ), message ) {}
    8b00:	55                   	push   %rbp
    8b01:	48 89 e5             	mov    %rsp,%rbp
    8b04:	53                   	push   %rbx
    8b05:	48 83 ec 38          	sub    $0x38,%rsp
    8b09:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8b0d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8b11:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8b15:	c7 45 ec 07 0b 65 c4 	movl   $0xc4650b07,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8b1c:	0f b6 05 35 88 03 00 	movzbl 0x38835(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8b23:	84 c0                	test   %al,%al
    8b25:	0f 94 c0             	sete   %al
    8b28:	84 c0                	test   %al,%al
    8b2a:	74 4a                	je     8b76 <_ZN2vk24ValidationFailedEXTErrorC1EPKc+0x76>
    8b2c:	48 8d 05 25 88 03 00 	lea    0x38825(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8b33:	48 89 c7             	mov    %rax,%rdi
    8b36:	e8 85 c8 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8b3b:	85 c0                	test   %eax,%eax
    8b3d:	0f 95 c0             	setne  %al
    8b40:	84 c0                	test   %al,%al
    8b42:	74 32                	je     8b76 <_ZN2vk24ValidationFailedEXTErrorC1EPKc+0x76>
    8b44:	48 8d 05 ad 86 03 00 	lea    0x386ad(%rip),%rax        # 411f8 <__dso_handle>
    8b4b:	48 89 c2             	mov    %rax,%rdx
    8b4e:	48 8d 05 ab 86 03 00 	lea    0x386ab(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    8b55:	48 89 c6             	mov    %rax,%rsi
    8b58:	48 8d 05 07 41 00 00 	lea    0x4107(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8b5f:	48 89 c7             	mov    %rax,%rdi
    8b62:	e8 69 c6 ff ff       	call   51d0 <__cxa_atexit@plt>
    8b67:	48 8d 05 ea 87 03 00 	lea    0x387ea(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8b6e:	48 89 c7             	mov    %rax,%rdi
    8b71:	e8 8a c5 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8b76:	48 8d 15 83 86 03 00 	lea    0x38683(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8b7d:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8b80:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8b84:	89 ce                	mov    %ecx,%esi
    8b86:	48 89 c7             	mov    %rax,%rdi
    8b89:	e8 7a d7 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8b8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8b92:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ValidationFailedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorValidationFailedEXT ), message ) {}
    8b96:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8b9a:	48 89 c6             	mov    %rax,%rsi
    8b9d:	48 89 d7             	mov    %rdx,%rdi
    8ba0:	48 89 d0             	mov    %rdx,%rax
    8ba3:	48 89 c2             	mov    %rax,%rdx
    8ba6:	48 89 df             	mov    %rbx,%rdi
    8ba9:	e8 ea ec ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8bae:	48 8d 15 7b 76 03 00 	lea    0x3767b(%rip),%rdx        # 40230 <_ZTVN2vk24ValidationFailedEXTErrorE+0x10>
    8bb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8bb9:	48 89 10             	mov    %rdx,(%rax)
    8bbc:	48 8d 15 95 76 03 00 	lea    0x37695(%rip),%rdx        # 40258 <_ZTVN2vk24ValidationFailedEXTErrorE+0x38>
    8bc3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8bc7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8bcb:	90                   	nop
    8bcc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8bd0:	c9                   	leave
    8bd1:	c3                   	ret

0000000000008bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>:
    InvalidShaderNVError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidShaderNV ), message ) {}
    8bd2:	55                   	push   %rbp
    8bd3:	48 89 e5             	mov    %rsp,%rbp
    8bd6:	53                   	push   %rbx
    8bd7:	48 83 ec 38          	sub    $0x38,%rsp
    8bdb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8bdf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8be3:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8be7:	c7 45 ec 20 07 65 c4 	movl   $0xc4650720,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8bee:	0f b6 05 63 87 03 00 	movzbl 0x38763(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8bf5:	84 c0                	test   %al,%al
    8bf7:	0f 94 c0             	sete   %al
    8bfa:	84 c0                	test   %al,%al
    8bfc:	74 4a                	je     8c48 <_ZN2vk20InvalidShaderNVErrorC1EPKc+0x76>
    8bfe:	48 8d 05 53 87 03 00 	lea    0x38753(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8c05:	48 89 c7             	mov    %rax,%rdi
    8c08:	e8 b3 c7 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8c0d:	85 c0                	test   %eax,%eax
    8c0f:	0f 95 c0             	setne  %al
    8c12:	84 c0                	test   %al,%al
    8c14:	74 32                	je     8c48 <_ZN2vk20InvalidShaderNVErrorC1EPKc+0x76>
    8c16:	48 8d 05 db 85 03 00 	lea    0x385db(%rip),%rax        # 411f8 <__dso_handle>
    8c1d:	48 89 c2             	mov    %rax,%rdx
    8c20:	48 8d 05 d9 85 03 00 	lea    0x385d9(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    8c27:	48 89 c6             	mov    %rax,%rsi
    8c2a:	48 8d 05 35 40 00 00 	lea    0x4035(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8c31:	48 89 c7             	mov    %rax,%rdi
    8c34:	e8 97 c5 ff ff       	call   51d0 <__cxa_atexit@plt>
    8c39:	48 8d 05 18 87 03 00 	lea    0x38718(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8c40:	48 89 c7             	mov    %rax,%rdi
    8c43:	e8 b8 c4 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8c48:	48 8d 15 b1 85 03 00 	lea    0x385b1(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8c4f:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8c52:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8c56:	89 ce                	mov    %ecx,%esi
    8c58:	48 89 c7             	mov    %rax,%rdi
    8c5b:	e8 a8 d6 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8c60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8c64:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InvalidShaderNVError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidShaderNV ), message ) {}
    8c68:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8c6c:	48 89 c6             	mov    %rax,%rsi
    8c6f:	48 89 d7             	mov    %rdx,%rdi
    8c72:	48 89 d0             	mov    %rdx,%rax
    8c75:	48 89 c2             	mov    %rax,%rdx
    8c78:	48 89 df             	mov    %rbx,%rdi
    8c7b:	e8 18 ec ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8c80:	48 8d 15 59 75 03 00 	lea    0x37559(%rip),%rdx        # 401e0 <_ZTVN2vk20InvalidShaderNVErrorE+0x10>
    8c87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8c8b:	48 89 10             	mov    %rdx,(%rax)
    8c8e:	48 8d 15 73 75 03 00 	lea    0x37573(%rip),%rdx        # 40208 <_ZTVN2vk20InvalidShaderNVErrorE+0x38>
    8c95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8c99:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8c9d:	90                   	nop
    8c9e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8ca2:	c9                   	leave
    8ca3:	c3                   	ret

0000000000008ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>:
    InvalidDrmFormatModifierPlaneLayoutEXTError( char const * message )
    8ca4:	55                   	push   %rbp
    8ca5:	48 89 e5             	mov    %rsp,%rbp
    8ca8:	53                   	push   %rbx
    8ca9:	48 83 ec 38          	sub    $0x38,%rsp
    8cad:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8cb1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      : SystemError( make_error_code( Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT ), message )
    8cb5:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8cb9:	c7 45 ec d0 cc 62 c4 	movl   $0xc462ccd0,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8cc0:	0f b6 05 91 86 03 00 	movzbl 0x38691(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8cc7:	84 c0                	test   %al,%al
    8cc9:	0f 94 c0             	sete   %al
    8ccc:	84 c0                	test   %al,%al
    8cce:	74 4a                	je     8d1a <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc+0x76>
    8cd0:	48 8d 05 81 86 03 00 	lea    0x38681(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8cd7:	48 89 c7             	mov    %rax,%rdi
    8cda:	e8 e1 c6 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8cdf:	85 c0                	test   %eax,%eax
    8ce1:	0f 95 c0             	setne  %al
    8ce4:	84 c0                	test   %al,%al
    8ce6:	74 32                	je     8d1a <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc+0x76>
    8ce8:	48 8d 05 09 85 03 00 	lea    0x38509(%rip),%rax        # 411f8 <__dso_handle>
    8cef:	48 89 c2             	mov    %rax,%rdx
    8cf2:	48 8d 05 07 85 03 00 	lea    0x38507(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    8cf9:	48 89 c6             	mov    %rax,%rsi
    8cfc:	48 8d 05 63 3f 00 00 	lea    0x3f63(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8d03:	48 89 c7             	mov    %rax,%rdi
    8d06:	e8 c5 c4 ff ff       	call   51d0 <__cxa_atexit@plt>
    8d0b:	48 8d 05 46 86 03 00 	lea    0x38646(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8d12:	48 89 c7             	mov    %rax,%rdi
    8d15:	e8 e6 c3 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8d1a:	48 8d 15 df 84 03 00 	lea    0x384df(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8d21:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8d24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8d28:	89 ce                	mov    %ecx,%esi
    8d2a:	48 89 c7             	mov    %rax,%rdi
    8d2d:	e8 d6 d5 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8d32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8d36:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
      : SystemError( make_error_code( Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT ), message )
    8d3a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8d3e:	48 89 c6             	mov    %rax,%rsi
    8d41:	48 89 d7             	mov    %rdx,%rdi
    8d44:	48 89 d0             	mov    %rdx,%rax
    8d47:	48 89 c2             	mov    %rax,%rdx
    8d4a:	48 89 df             	mov    %rbx,%rdi
    8d4d:	e8 46 eb ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8d52:	48 8d 15 37 74 03 00 	lea    0x37437(%rip),%rdx        # 40190 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x10>
    8d59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8d5d:	48 89 10             	mov    %rdx,(%rax)
    8d60:	48 8d 15 51 74 03 00 	lea    0x37451(%rip),%rdx        # 401b8 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x38>
    8d67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8d6b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    }
    8d6f:	90                   	nop
    8d70:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8d74:	c9                   	leave
    8d75:	c3                   	ret

0000000000008d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>:
    NotPermittedKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNotPermittedKHR ), message ) {}
    8d76:	55                   	push   %rbp
    8d77:	48 89 e5             	mov    %rsp,%rbp
    8d7a:	53                   	push   %rbx
    8d7b:	48 83 ec 38          	sub    $0x38,%rsp
    8d7f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8d83:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8d87:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8d8b:	c7 45 ec 4f 8e 62 c4 	movl   $0xc4628e4f,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8d92:	0f b6 05 bf 85 03 00 	movzbl 0x385bf(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8d99:	84 c0                	test   %al,%al
    8d9b:	0f 94 c0             	sete   %al
    8d9e:	84 c0                	test   %al,%al
    8da0:	74 4a                	je     8dec <_ZN2vk20NotPermittedKHRErrorC1EPKc+0x76>
    8da2:	48 8d 05 af 85 03 00 	lea    0x385af(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8da9:	48 89 c7             	mov    %rax,%rdi
    8dac:	e8 0f c6 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8db1:	85 c0                	test   %eax,%eax
    8db3:	0f 95 c0             	setne  %al
    8db6:	84 c0                	test   %al,%al
    8db8:	74 32                	je     8dec <_ZN2vk20NotPermittedKHRErrorC1EPKc+0x76>
    8dba:	48 8d 05 37 84 03 00 	lea    0x38437(%rip),%rax        # 411f8 <__dso_handle>
    8dc1:	48 89 c2             	mov    %rax,%rdx
    8dc4:	48 8d 05 35 84 03 00 	lea    0x38435(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    8dcb:	48 89 c6             	mov    %rax,%rsi
    8dce:	48 8d 05 91 3e 00 00 	lea    0x3e91(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8dd5:	48 89 c7             	mov    %rax,%rdi
    8dd8:	e8 f3 c3 ff ff       	call   51d0 <__cxa_atexit@plt>
    8ddd:	48 8d 05 74 85 03 00 	lea    0x38574(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8de4:	48 89 c7             	mov    %rax,%rdi
    8de7:	e8 14 c3 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8dec:	48 8d 15 0d 84 03 00 	lea    0x3840d(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8df3:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8df6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8dfa:	89 ce                	mov    %ecx,%esi
    8dfc:	48 89 c7             	mov    %rax,%rdi
    8dff:	e8 04 d5 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8e04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8e08:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    NotPermittedKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNotPermittedKHR ), message ) {}
    8e0c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8e10:	48 89 c6             	mov    %rax,%rsi
    8e13:	48 89 d7             	mov    %rdx,%rdi
    8e16:	48 89 d0             	mov    %rdx,%rax
    8e19:	48 89 c2             	mov    %rax,%rdx
    8e1c:	48 89 df             	mov    %rbx,%rdi
    8e1f:	e8 74 ea ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8e24:	48 8d 15 15 73 03 00 	lea    0x37315(%rip),%rdx        # 40140 <_ZTVN2vk20NotPermittedKHRErrorE+0x10>
    8e2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8e2f:	48 89 10             	mov    %rdx,(%rax)
    8e32:	48 8d 15 2f 73 03 00 	lea    0x3732f(%rip),%rdx        # 40168 <_ZTVN2vk20NotPermittedKHRErrorE+0x38>
    8e39:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8e3d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8e41:	90                   	nop
    8e42:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8e46:	c9                   	leave
    8e47:	c3                   	ret

0000000000008e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>:
    CompressionExhaustedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorCompressionExhaustedEXT ), message ) {}
    8e48:	55                   	push   %rbp
    8e49:	48 89 e5             	mov    %rsp,%rbp
    8e4c:	53                   	push   %rbx
    8e4d:	48 83 ec 38          	sub    $0x38,%rsp
    8e51:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8e55:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8e59:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8e5d:	c7 45 ec b0 0d 60 c4 	movl   $0xc4600db0,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8e64:	0f b6 05 ed 84 03 00 	movzbl 0x384ed(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8e6b:	84 c0                	test   %al,%al
    8e6d:	0f 94 c0             	sete   %al
    8e70:	84 c0                	test   %al,%al
    8e72:	74 4a                	je     8ebe <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc+0x76>
    8e74:	48 8d 05 dd 84 03 00 	lea    0x384dd(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8e7b:	48 89 c7             	mov    %rax,%rdi
    8e7e:	e8 3d c5 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8e83:	85 c0                	test   %eax,%eax
    8e85:	0f 95 c0             	setne  %al
    8e88:	84 c0                	test   %al,%al
    8e8a:	74 32                	je     8ebe <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc+0x76>
    8e8c:	48 8d 05 65 83 03 00 	lea    0x38365(%rip),%rax        # 411f8 <__dso_handle>
    8e93:	48 89 c2             	mov    %rax,%rdx
    8e96:	48 8d 05 63 83 03 00 	lea    0x38363(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    8e9d:	48 89 c6             	mov    %rax,%rsi
    8ea0:	48 8d 05 bf 3d 00 00 	lea    0x3dbf(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    8ea7:	48 89 c7             	mov    %rax,%rdi
    8eaa:	e8 21 c3 ff ff       	call   51d0 <__cxa_atexit@plt>
    8eaf:	48 8d 05 a2 84 03 00 	lea    0x384a2(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8eb6:	48 89 c7             	mov    %rax,%rdi
    8eb9:	e8 42 c2 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8ebe:	48 8d 15 3b 83 03 00 	lea    0x3833b(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8ec5:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8ec8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8ecc:	89 ce                	mov    %ecx,%esi
    8ece:	48 89 c7             	mov    %rax,%rdi
    8ed1:	e8 32 d4 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8ed6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8eda:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    CompressionExhaustedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorCompressionExhaustedEXT ), message ) {}
    8ede:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8ee2:	48 89 c6             	mov    %rax,%rsi
    8ee5:	48 89 d7             	mov    %rdx,%rdi
    8ee8:	48 89 d0             	mov    %rdx,%rax
    8eeb:	48 89 c2             	mov    %rax,%rdx
    8eee:	48 89 df             	mov    %rbx,%rdi
    8ef1:	e8 a2 e9 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8ef6:	48 8d 15 f3 71 03 00 	lea    0x371f3(%rip),%rdx        # 400f0 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x10>
    8efd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8f01:	48 89 10             	mov    %rdx,(%rax)
    8f04:	48 8d 15 0d 72 03 00 	lea    0x3720d(%rip),%rdx        # 40118 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x38>
    8f0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8f0f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8f13:	90                   	nop
    8f14:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8f18:	c9                   	leave
    8f19:	c3                   	ret

0000000000008f1a <_ZN2vk10SurfaceKHRaSEDn>:
      m_surfaceKHR = surfaceKHR;
      return *this;
    }
#endif

    SurfaceKHR & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8f1a:	55                   	push   %rbp
    8f1b:	48 89 e5             	mov    %rsp,%rbp
    8f1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8f22:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_surfaceKHR = {};
    8f26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f2a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    8f31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    8f35:	5d                   	pop    %rbp
    8f36:	c3                   	ret
    8f37:	90                   	nop

0000000000008f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>:
    {
      return m_surfaceKHR < rhs.m_surfaceKHR;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkSurfaceKHR() const VULKAN_HPP_NOEXCEPT
    8f38:	55                   	push   %rbp
    8f39:	48 89 e5             	mov    %rsp,%rbp
    8f3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_surfaceKHR;
    8f40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f44:	48 8b 00             	mov    (%rax),%rax
    }
    8f47:	5d                   	pop    %rbp
    8f48:	c3                   	ret
    8f49:	90                   	nop

0000000000008f4a <_ZNK2vk10SurfaceKHRcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    8f4a:	55                   	push   %rbp
    8f4b:	48 89 e5             	mov    %rsp,%rbp
    8f4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_surfaceKHR != VK_NULL_HANDLE;
    8f52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f56:	48 8b 00             	mov    (%rax),%rax
    8f59:	48 85 c0             	test   %rax,%rax
    8f5c:	0f 95 c0             	setne  %al
    }
    8f5f:	5d                   	pop    %rbp
    8f60:	c3                   	ret
    8f61:	90                   	nop

0000000000008f62 <_ZN2vk22DebugUtilsMessengerEXTaSEDn>:
      m_debugUtilsMessengerEXT = debugUtilsMessengerEXT;
      return *this;
    }
#endif

    DebugUtilsMessengerEXT & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8f62:	55                   	push   %rbp
    8f63:	48 89 e5             	mov    %rsp,%rbp
    8f66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8f6a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_debugUtilsMessengerEXT = {};
    8f6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    8f79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    8f7d:	5d                   	pop    %rbp
    8f7e:	c3                   	ret
    8f7f:	90                   	nop

0000000000008f80 <_ZNK2vk22DebugUtilsMessengerEXTcvP26VkDebugUtilsMessengerEXT_TEv>:
    {
      return m_debugUtilsMessengerEXT < rhs.m_debugUtilsMessengerEXT;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkDebugUtilsMessengerEXT() const VULKAN_HPP_NOEXCEPT
    8f80:	55                   	push   %rbp
    8f81:	48 89 e5             	mov    %rsp,%rbp
    8f84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_debugUtilsMessengerEXT;
    8f88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f8c:	48 8b 00             	mov    (%rax),%rax
    }
    8f8f:	5d                   	pop    %rbp
    8f90:	c3                   	ret
    8f91:	90                   	nop

0000000000008f92 <_ZNK2vk22DebugUtilsMessengerEXTcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    8f92:	55                   	push   %rbp
    8f93:	48 89 e5             	mov    %rsp,%rbp
    8f96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_debugUtilsMessengerEXT != VK_NULL_HANDLE;
    8f9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f9e:	48 8b 00             	mov    (%rax),%rax
    8fa1:	48 85 c0             	test   %rax,%rax
    8fa4:	0f 95 c0             	setne  %al
    }
    8fa7:	5d                   	pop    %rbp
    8fa8:	c3                   	ret
    8fa9:	90                   	nop

0000000000008faa <_ZN2vk12SwapchainKHRaSEDn>:
      m_swapchainKHR = swapchainKHR;
      return *this;
    }
#endif

    SwapchainKHR & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8faa:	55                   	push   %rbp
    8fab:	48 89 e5             	mov    %rsp,%rbp
    8fae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8fb2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_swapchainKHR = {};
    8fb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    8fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    8fc5:	5d                   	pop    %rbp
    8fc6:	c3                   	ret
    8fc7:	90                   	nop

0000000000008fc8 <_ZNK2vk12SwapchainKHRcvP16VkSwapchainKHR_TEv>:
    {
      return m_swapchainKHR < rhs.m_swapchainKHR;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkSwapchainKHR() const VULKAN_HPP_NOEXCEPT
    8fc8:	55                   	push   %rbp
    8fc9:	48 89 e5             	mov    %rsp,%rbp
    8fcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_swapchainKHR;
    8fd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fd4:	48 8b 00             	mov    (%rax),%rax
    }
    8fd7:	5d                   	pop    %rbp
    8fd8:	c3                   	ret
    8fd9:	90                   	nop

0000000000008fda <_ZNK2vk12SwapchainKHRcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    8fda:	55                   	push   %rbp
    8fdb:	48 89 e5             	mov    %rsp,%rbp
    8fde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_swapchainKHR != VK_NULL_HANDLE;
    8fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fe6:	48 8b 00             	mov    (%rax),%rax
    8fe9:	48 85 c0             	test   %rax,%rax
    8fec:	0f 95 c0             	setne  %al
    }
    8fef:	5d                   	pop    %rbp
    8ff0:	c3                   	ret
    8ff1:	90                   	nop

0000000000008ff2 <_ZN2vk13CommandBufferaSEDn>:
    {
      m_commandBuffer = commandBuffer;
      return *this;
    }

    CommandBuffer & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8ff2:	55                   	push   %rbp
    8ff3:	48 89 e5             	mov    %rsp,%rbp
    8ff6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8ffa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_commandBuffer = {};
    8ffe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9002:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    9009:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    900d:	5d                   	pop    %rbp
    900e:	c3                   	ret
    900f:	90                   	nop

0000000000009010 <_ZNK2vk13CommandBuffercvbEv>:
    operator VkCommandBuffer() const VULKAN_HPP_NOEXCEPT
    {
      return m_commandBuffer;
    }

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    9010:	55                   	push   %rbp
    9011:	48 89 e5             	mov    %rsp,%rbp
    9014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_commandBuffer != VK_NULL_HANDLE;
    9018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    901c:	48 8b 00             	mov    (%rax),%rax
    901f:	48 85 c0             	test   %rax,%rax
    9022:	0f 95 c0             	setne  %al
    }
    9025:	5d                   	pop    %rbp
    9026:	c3                   	ret
    9027:	90                   	nop

0000000000009028 <_ZN2vk11CommandPoolaSEDn>:
      m_commandPool = commandPool;
      return *this;
    }
#endif

    CommandPool & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    9028:	55                   	push   %rbp
    9029:	48 89 e5             	mov    %rsp,%rbp
    902c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9030:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_commandPool = {};
    9034:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9038:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    903f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    9043:	5d                   	pop    %rbp
    9044:	c3                   	ret
    9045:	90                   	nop

0000000000009046 <_ZNK2vk11CommandPoolcvP15VkCommandPool_TEv>:
    {
      return m_commandPool < rhs.m_commandPool;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkCommandPool() const VULKAN_HPP_NOEXCEPT
    9046:	55                   	push   %rbp
    9047:	48 89 e5             	mov    %rsp,%rbp
    904a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_commandPool;
    904e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9052:	48 8b 00             	mov    (%rax),%rax
    }
    9055:	5d                   	pop    %rbp
    9056:	c3                   	ret
    9057:	90                   	nop

0000000000009058 <_ZNK2vk11CommandPoolcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    9058:	55                   	push   %rbp
    9059:	48 89 e5             	mov    %rsp,%rbp
    905c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_commandPool != VK_NULL_HANDLE;
    9060:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9064:	48 8b 00             	mov    (%rax),%rax
    9067:	48 85 c0             	test   %rax,%rax
    906a:	0f 95 c0             	setne  %al
    }
    906d:	5d                   	pop    %rbp
    906e:	c3                   	ret
    906f:	90                   	nop

0000000000009070 <_ZN2vk5QueueaSEDn>:
    {
      m_queue = queue;
      return *this;
    }

    Queue & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    9070:	55                   	push   %rbp
    9071:	48 89 e5             	mov    %rsp,%rbp
    9074:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9078:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_queue = {};
    907c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9080:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    9087:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    908b:	5d                   	pop    %rbp
    908c:	c3                   	ret
    908d:	90                   	nop

000000000000908e <_ZN2vk6DeviceaSEDn>:
    {
      m_device = device;
      return *this;
    }

    Device & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    908e:	55                   	push   %rbp
    908f:	48 89 e5             	mov    %rsp,%rbp
    9092:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9096:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_device = {};
    909a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    909e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    90a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    90a9:	5d                   	pop    %rbp
    90aa:	c3                   	ret
    90ab:	90                   	nop

00000000000090ac <_ZNK2vk6DevicecvP10VkDevice_TEv>:
    VULKAN_HPP_NODISCARD VULKAN_HPP_NAMESPACE::TilePropertiesQCOM
                         getDynamicRenderingTilePropertiesQCOM( const VULKAN_HPP_NAMESPACE::RenderingInfo & renderingInfo,
                                                                Dispatch const & d                          VULKAN_HPP_DEFAULT_DISPATCHER_ASSIGNMENT ) const VULKAN_HPP_NOEXCEPT;
#endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/

    operator VkDevice() const VULKAN_HPP_NOEXCEPT
    90ac:	55                   	push   %rbp
    90ad:	48 89 e5             	mov    %rsp,%rbp
    90b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_device;
    90b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90b8:	48 8b 00             	mov    (%rax),%rax
    }
    90bb:	5d                   	pop    %rbp
    90bc:	c3                   	ret
    90bd:	90                   	nop

00000000000090be <_ZNK2vk6DevicecvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    90be:	55                   	push   %rbp
    90bf:	48 89 e5             	mov    %rsp,%rbp
    90c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_device != VK_NULL_HANDLE;
    90c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90ca:	48 8b 00             	mov    (%rax),%rax
    90cd:	48 85 c0             	test   %rax,%rax
    90d0:	0f 95 c0             	setne  %al
    }
    90d3:	5d                   	pop    %rbp
    90d4:	c3                   	ret
    90d5:	90                   	nop

00000000000090d6 <_ZN2vk14PhysicalDeviceaSEDn>:
    {
      m_physicalDevice = physicalDevice;
      return *this;
    }

    PhysicalDevice & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    90d6:	55                   	push   %rbp
    90d7:	48 89 e5             	mov    %rsp,%rbp
    90da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    90de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_physicalDevice = {};
    90e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90e6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    90ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    90f1:	5d                   	pop    %rbp
    90f2:	c3                   	ret
    90f3:	90                   	nop

00000000000090f4 <_ZN2vk8InstanceaSEDn>:
    {
      m_instance = instance;
      return *this;
    }

    Instance & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    90f4:	55                   	push   %rbp
    90f5:	48 89 e5             	mov    %rsp,%rbp
    90f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    90fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_instance = {};
    9100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9104:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    910b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    910f:	5d                   	pop    %rbp
    9110:	c3                   	ret
    9111:	90                   	nop

0000000000009112 <_ZNK2vk8InstancecvP12VkInstance_TEv>:
                                    Dispatch const & d                                                  VULKAN_HPP_DEFAULT_DISPATCHER_ASSIGNMENT ) const;
#    endif /*VULKAN_HPP_NO_SMART_HANDLE*/
#  endif   /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/
#endif     /*VK_USE_PLATFORM_SCREEN_QNX*/

    operator VkInstance() const VULKAN_HPP_NOEXCEPT
    9112:	55                   	push   %rbp
    9113:	48 89 e5             	mov    %rsp,%rbp
    9116:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_instance;
    911a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    911e:	48 8b 00             	mov    (%rax),%rax
    }
    9121:	5d                   	pop    %rbp
    9122:	c3                   	ret
    9123:	90                   	nop

0000000000009124 <_ZNK2vk8InstancecvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    9124:	55                   	push   %rbp
    9125:	48 89 e5             	mov    %rsp,%rbp
    9128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_instance != VK_NULL_HANDLE;
    912c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9130:	48 8b 00             	mov    (%rax),%rax
    9133:	48 85 c0             	test   %rax,%rax
    9136:	0f 95 c0             	setne  %al
    }
    9139:	5d                   	pop    %rbp
    913a:	c3                   	ret
    913b:	90                   	nop

000000000000913c <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  {
  public:
#  ifdef VULKAN_HPP_NO_EXCEPTIONS
    DynamicLoader( std::string const & vulkanLibraryName = {} ) VULKAN_HPP_NOEXCEPT
#  else
    DynamicLoader( std::string const & vulkanLibraryName = {} )
    913c:	55                   	push   %rbp
    913d:	48 89 e5             	mov    %rsp,%rbp
    9140:	41 54                	push   %r12
    9142:	53                   	push   %rbx
    9143:	48 83 ec 10          	sub    $0x10,%rsp
    9147:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    914b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#  endif
    {
      if ( !vulkanLibraryName.empty() )
    914f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9153:	48 89 c7             	mov    %rax,%rdi
    9156:	e8 2f 14 00 00       	call   a58a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
    915b:	83 f0 01             	xor    $0x1,%eax
    915e:	84 c0                	test   %al,%al
    9160:	74 22                	je     9184 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
      {
#  if defined( __unix__ ) || defined( __APPLE__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
        m_library = dlopen( vulkanLibraryName.c_str(), RTLD_NOW | RTLD_LOCAL );
    9162:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9166:	48 89 c7             	mov    %rax,%rdi
    9169:	e8 38 11 00 00       	call   a2a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
    916e:	be 02 00 00 00       	mov    $0x2,%esi
    9173:	48 89 c7             	mov    %rax,%rdi
    9176:	e8 75 c1 ff ff       	call   52f0 <dlopen@plt>
    917b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    917f:	48 89 02             	mov    %rax,(%rdx)
    9182:	eb 42                	jmp    91c6 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
#  endif
      }
      else
      {
#  if defined( __unix__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
        m_library = dlopen( "libvulkan.so", RTLD_NOW | RTLD_LOCAL );
    9184:	be 02 00 00 00       	mov    $0x2,%esi
    9189:	48 8d 05 84 f8 01 00 	lea    0x1f884(%rip),%rax        # 28a14 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3dc>
    9190:	48 89 c7             	mov    %rax,%rdi
    9193:	e8 58 c1 ff ff       	call   52f0 <dlopen@plt>
    9198:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    919c:	48 89 02             	mov    %rax,(%rdx)
        if ( m_library == nullptr )
    919f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    91a3:	48 8b 00             	mov    (%rax),%rax
    91a6:	48 85 c0             	test   %rax,%rax
    91a9:	75 1b                	jne    91c6 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
        {
          m_library = dlopen( "libvulkan.so.1", RTLD_NOW | RTLD_LOCAL );
    91ab:	be 02 00 00 00       	mov    $0x2,%esi
    91b0:	48 8d 05 6a f8 01 00 	lea    0x1f86a(%rip),%rax        # 28a21 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3e9>
    91b7:	48 89 c7             	mov    %rax,%rdi
    91ba:	e8 31 c1 ff ff       	call   52f0 <dlopen@plt>
    91bf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    91c3:	48 89 02             	mov    %rax,(%rdx)
#    error unsupported platform
#  endif
      }

#  ifndef VULKAN_HPP_NO_EXCEPTIONS
      if ( m_library == nullptr )
    91c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    91ca:	48 8b 00             	mov    (%rax),%rax
    91cd:	48 85 c0             	test   %rax,%rax
    91d0:	75 51                	jne    9223 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe7>
      {
        // NOTE there should be an InitializationFailedError, but msvc insists on the symbol does not exist within the scope of this function.
        throw std::runtime_error( "Failed to load vulkan library!" );
    91d2:	bf 10 00 00 00       	mov    $0x10,%edi
    91d7:	e8 f4 be ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    91dc:	48 89 c3             	mov    %rax,%rbx
    91df:	48 8d 05 4a f8 01 00 	lea    0x1f84a(%rip),%rax        # 28a30 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3f8>
    91e6:	48 89 c6             	mov    %rax,%rsi
    91e9:	48 89 df             	mov    %rbx,%rdi
    91ec:	e8 9f be ff ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
    91f1:	48 8b 05 b8 7d 03 00 	mov    0x37db8(%rip),%rax        # 40fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    91f8:	48 89 c2             	mov    %rax,%rdx
    91fb:	48 8d 05 fe 77 03 00 	lea    0x377fe(%rip),%rax        # 40a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9202:	48 89 c6             	mov    %rax,%rsi
    9205:	48 89 df             	mov    %rbx,%rdi
    9208:	e8 73 c1 ff ff       	call   5380 <__cxa_throw@plt>
    920d:	49 89 c4             	mov    %rax,%r12
    9210:	48 89 df             	mov    %rbx,%rdi
    9213:	e8 38 bf ff ff       	call   5150 <__cxa_free_exception@plt>
    9218:	4c 89 e0             	mov    %r12,%rax
    921b:	48 89 c7             	mov    %rax,%rdi
    921e:	e8 7d c1 ff ff       	call   53a0 <_Unwind_Resume@plt>
      }
#  endif
    }
    9223:	90                   	nop
    9224:	48 83 c4 10          	add    $0x10,%rsp
    9228:	5b                   	pop    %rbx
    9229:	41 5c                	pop    %r12
    922b:	5d                   	pop    %rbp
    922c:	c3                   	ret
    922d:	90                   	nop

000000000000922e <_ZN2vk13DynamicLoaderD1Ev>:
    {
      std::swap( m_library, other.m_library );
      return *this;
    }

    ~DynamicLoader() VULKAN_HPP_NOEXCEPT
    922e:	55                   	push   %rbp
    922f:	48 89 e5             	mov    %rsp,%rbp
    9232:	48 83 ec 10          	sub    $0x10,%rsp
    9236:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if ( m_library )
    923a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    923e:	48 8b 00             	mov    (%rax),%rax
    9241:	48 85 c0             	test   %rax,%rax
    9244:	74 0f                	je     9255 <_ZN2vk13DynamicLoaderD1Ev+0x27>
      {
#  if defined( __unix__ ) || defined( __APPLE__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
        dlclose( m_library );
    9246:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    924a:	48 8b 00             	mov    (%rax),%rax
    924d:	48 89 c7             	mov    %rax,%rdi
    9250:	e8 3b bf ff ff       	call   5190 <dlclose@plt>
        ::FreeLibrary( m_library );
#  else
#    error unsupported platform
#  endif
      }
    }
    9255:	90                   	nop
    9256:	c9                   	leave
    9257:	c3                   	ret

0000000000009258 <_ZN2vk4raii17ContextDispatcherC1EPFPFvvEP12VkInstance_TPKcE>:
    }

    class ContextDispatcher : public DispatchLoaderBase
    {
    public:
      ContextDispatcher( PFN_vkGetInstanceProcAddr getProcAddr )
    9258:	55                   	push   %rbp
    9259:	48 89 e5             	mov    %rsp,%rbp
    925c:	48 83 ec 10          	sub    $0x10,%rsp
    9260:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9264:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        //=== VK_VERSION_1_0 ===
        , vkCreateInstance( PFN_vkCreateInstance( getProcAddr( NULL, "vkCreateInstance" ) ) )
        , vkEnumerateInstanceExtensionProperties( PFN_vkEnumerateInstanceExtensionProperties( getProcAddr( NULL, "vkEnumerateInstanceExtensionProperties" ) ) )
        , vkEnumerateInstanceLayerProperties( PFN_vkEnumerateInstanceLayerProperties( getProcAddr( NULL, "vkEnumerateInstanceLayerProperties" ) ) )
        //=== VK_VERSION_1_1 ===
        , vkEnumerateInstanceVersion( PFN_vkEnumerateInstanceVersion( getProcAddr( NULL, "vkEnumerateInstanceVersion" ) ) )
    9268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    926c:	48 89 c7             	mov    %rax,%rdi
    926f:	e8 28 d3 ff ff       	call   659c <_ZN2vk18DispatchLoaderBaseC1Ev>
        : vkGetInstanceProcAddr( getProcAddr )
    9274:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9278:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    927c:	48 89 50 10          	mov    %rdx,0x10(%rax)
        , vkCreateInstance( PFN_vkCreateInstance( getProcAddr( NULL, "vkCreateInstance" ) ) )
    9280:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9284:	48 8d 15 dd f7 01 00 	lea    0x1f7dd(%rip),%rdx        # 28a68 <_ZNSt8__detailL19__atomic_spin_countE+0x4>
    928b:	48 89 d6             	mov    %rdx,%rsi
    928e:	bf 00 00 00 00       	mov    $0x0,%edi
    9293:	ff d0                	call   *%rax
    9295:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9299:	48 89 42 18          	mov    %rax,0x18(%rdx)
        , vkEnumerateInstanceExtensionProperties( PFN_vkEnumerateInstanceExtensionProperties( getProcAddr( NULL, "vkEnumerateInstanceExtensionProperties" ) ) )
    929d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    92a1:	48 8d 15 d8 f7 01 00 	lea    0x1f7d8(%rip),%rdx        # 28a80 <_ZNSt8__detailL19__atomic_spin_countE+0x1c>
    92a8:	48 89 d6             	mov    %rdx,%rsi
    92ab:	bf 00 00 00 00       	mov    $0x0,%edi
    92b0:	ff d0                	call   *%rax
    92b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    92b6:	48 89 42 20          	mov    %rax,0x20(%rdx)
        , vkEnumerateInstanceLayerProperties( PFN_vkEnumerateInstanceLayerProperties( getProcAddr( NULL, "vkEnumerateInstanceLayerProperties" ) ) )
    92ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    92be:	48 8d 15 e3 f7 01 00 	lea    0x1f7e3(%rip),%rdx        # 28aa8 <_ZNSt8__detailL19__atomic_spin_countE+0x44>
    92c5:	48 89 d6             	mov    %rdx,%rsi
    92c8:	bf 00 00 00 00       	mov    $0x0,%edi
    92cd:	ff d0                	call   *%rax
    92cf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    92d3:	48 89 42 28          	mov    %rax,0x28(%rdx)
        , vkEnumerateInstanceVersion( PFN_vkEnumerateInstanceVersion( getProcAddr( NULL, "vkEnumerateInstanceVersion" ) ) )
    92d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    92db:	48 8d 15 e9 f7 01 00 	lea    0x1f7e9(%rip),%rdx        # 28acb <_ZNSt8__detailL19__atomic_spin_countE+0x67>
    92e2:	48 89 d6             	mov    %rdx,%rsi
    92e5:	bf 00 00 00 00       	mov    $0x0,%edi
    92ea:	ff d0                	call   *%rax
    92ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    92f0:	48 89 42 30          	mov    %rax,0x30(%rdx)
      {
      }
    92f4:	90                   	nop
    92f5:	c9                   	leave
    92f6:	c3                   	ret
    92f7:	90                   	nop

00000000000092f8 <_ZN2vk4raii7ContextC1Ev>:

    class Context
    {
    public:
#  if VULKAN_HPP_ENABLE_DYNAMIC_LOADER_TOOL
      Context()
    92f8:	55                   	push   %rbp
    92f9:	48 89 e5             	mov    %rsp,%rbp
    92fc:	41 54                	push   %r12
    92fe:	53                   	push   %rbx
    92ff:	48 83 ec 30          	sub    $0x30,%rsp
    9303:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    9307:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    930b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    930f:	48 89 c7             	mov    %rax,%rdi
    9312:	e8 d5 d3 ff ff       	call   66ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    9317:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    931b:	48 89 c6             	mov    %rax,%rsi
    931e:	48 89 df             	mov    %rbx,%rdi
    9321:	e8 16 fe ff ff       	call   913c <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    9326:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    932a:	48 89 c7             	mov    %rax,%rdi
    932d:	e8 8e 0f 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    9332:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    9336:	48 8d 58 08          	lea    0x8(%rax),%rbx
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    933a:	bf 38 00 00 00       	mov    $0x38,%edi
    933f:	e8 dc be ff ff       	call   5220 <_Znwm@plt>
    9344:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    9348:	41 bc 01 00 00 00    	mov    $0x1,%r12d
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    934e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    9352:	48 8d 15 8d f7 01 00 	lea    0x1f78d(%rip),%rdx        # 28ae6 <_ZNSt8__detailL19__atomic_spin_countE+0x82>
    9359:	48 89 d6             	mov    %rdx,%rsi
    935c:	48 89 c7             	mov    %rax,%rdi
    935f:	e8 46 12 00 00       	call   a5aa <_ZNK2vk13DynamicLoader14getProcAddressIPFPFvvEP12VkInstance_TPKcEEET_S7_>
    9364:	48 89 c6             	mov    %rax,%rsi
    9367:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    936b:	e8 e8 fe ff ff       	call   9258 <_ZN2vk4raii17ContextDispatcherC1EPFPFvvEP12VkInstance_TPKcE>
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    9370:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    9374:	48 89 df             	mov    %rbx,%rdi
    9377:	e8 7c 12 00 00       	call   a5f8 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1IS4_vEEPS2_>
#  else
      Context( PFN_vkGetInstanceProcAddr getInstanceProcAddr )
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher( getInstanceProcAddr ) )
#  endif
      {
      }
    937c:	eb 4c                	jmp    93ca <_ZN2vk4raii7ContextC1Ev+0xd2>
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    937e:	48 89 c3             	mov    %rax,%rbx
    9381:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    9385:	48 89 c7             	mov    %rax,%rdi
    9388:	e8 33 0f 00 00       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    938d:	48 89 d8             	mov    %rbx,%rax
    9390:	48 89 c7             	mov    %rax,%rdi
    9393:	e8 08 c0 ff ff       	call   53a0 <_Unwind_Resume@plt>
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    9398:	48 89 c3             	mov    %rax,%rbx
    939b:	45 84 e4             	test   %r12b,%r12b
    939e:	74 13                	je     93b3 <_ZN2vk4raii7ContextC1Ev+0xbb>
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    93a0:	be 38 00 00 00       	mov    $0x38,%esi
    93a5:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    93a9:	e8 82 be ff ff       	call   5230 <_ZdlPvm@plt>
    93ae:	eb 03                	jmp    93b3 <_ZN2vk4raii7ContextC1Ev+0xbb>
      }
    93b0:	48 89 c3             	mov    %rax,%rbx
    93b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    93b7:	48 89 c7             	mov    %rax,%rdi
    93ba:	e8 6f fe ff ff       	call   922e <_ZN2vk13DynamicLoaderD1Ev>
    93bf:	48 89 d8             	mov    %rbx,%rax
    93c2:	48 89 c7             	mov    %rax,%rdi
    93c5:	e8 d6 bf ff ff       	call   53a0 <_Unwind_Resume@plt>
    93ca:	48 83 c4 30          	add    $0x30,%rsp
    93ce:	5b                   	pop    %rbx
    93cf:	41 5c                	pop    %r12
    93d1:	5d                   	pop    %rbp
    93d2:	c3                   	ret
    93d3:	90                   	nop

00000000000093d4 <_ZN2vk4raii8InstanceD1Ev>:
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
      }

      Instance( std::nullptr_t ) {}

      ~Instance()
    93d4:	55                   	push   %rbp
    93d5:	48 89 e5             	mov    %rsp,%rbp
    93d8:	48 83 ec 10          	sub    $0x10,%rsp
    93dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    93e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    93e4:	48 89 c7             	mov    %rax,%rdi
    93e7:	e8 14 00 00 00       	call   9400 <_ZN2vk4raii8Instance5clearEv>
      }
    93ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    93f0:	48 83 c0 10          	add    $0x10,%rax
    93f4:	48 89 c7             	mov    %rax,%rdi
    93f7:	e8 86 12 00 00       	call   a682 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev>
    93fc:	90                   	nop
    93fd:	c9                   	leave
    93fe:	c3                   	ret
    93ff:	90                   	nop

0000000000009400 <_ZN2vk4raii8Instance5clearEv>:
      VULKAN_HPP_NAMESPACE::Instance const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_instance;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9400:	55                   	push   %rbp
    9401:	48 89 e5             	mov    %rsp,%rbp
    9404:	41 54                	push   %r12
    9406:	53                   	push   %rbx
    9407:	48 83 ec 10          	sub    $0x10,%rsp
    940b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        if ( m_instance )
    940f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9413:	48 89 c7             	mov    %rax,%rdi
    9416:	e8 09 fd ff ff       	call   9124 <_ZNK2vk8InstancecvbEv>
    941b:	84 c0                	test   %al,%al
    941d:	74 2d                	je     944c <_ZN2vk4raii8Instance5clearEv+0x4c>
        {
          getDispatcher()->vkDestroyInstance( static_cast<VkInstance>( m_instance ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    941f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9423:	48 89 c7             	mov    %rax,%rdi
    9426:	e8 5d 00 00 00       	call   9488 <_ZNK2vk4raii8Instance13getDispatcherEv>
    942b:	4c 8b 60 10          	mov    0x10(%rax),%r12
    942f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9433:	48 8b 58 08          	mov    0x8(%rax),%rbx
    9437:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    943b:	48 89 c7             	mov    %rax,%rdi
    943e:	e8 cf fc ff ff       	call   9112 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    9443:	48 89 de             	mov    %rbx,%rsi
    9446:	48 89 c7             	mov    %rax,%rdi
    9449:	41 ff d4             	call   *%r12
        }
        m_instance   = nullptr;
    944c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9450:	be 00 00 00 00       	mov    $0x0,%esi
    9455:	48 89 c7             	mov    %rax,%rdi
    9458:	e8 97 fc ff ff       	call   90f4 <_ZN2vk8InstanceaSEDn>
        m_allocator  = nullptr;
    945d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9461:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9468:	00 
        m_dispatcher = nullptr;
    9469:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    946d:	48 83 c0 10          	add    $0x10,%rax
    9471:	be 00 00 00 00       	mov    $0x0,%esi
    9476:	48 89 c7             	mov    %rax,%rdi
    9479:	e8 9e 12 00 00       	call   a71c <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEaSEDn>
      }
    947e:	90                   	nop
    947f:	48 83 c4 10          	add    $0x10,%rsp
    9483:	5b                   	pop    %rbx
    9484:	41 5c                	pop    %r12
    9486:	5d                   	pop    %rbp
    9487:	c3                   	ret

0000000000009488 <_ZNK2vk4raii8Instance13getDispatcherEv>:

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
    9488:	55                   	push   %rbp
    9489:	48 89 e5             	mov    %rsp,%rbp
    948c:	48 83 ec 10          	sub    $0x10,%rsp
    9490:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9498:	48 83 c0 10          	add    $0x10,%rax
    949c:	48 89 c7             	mov    %rax,%rdi
    949f:	e8 a0 12 00 00       	call   a744 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEptEv>
    94a4:	48 89 c7             	mov    %rax,%rdi
    94a7:	e8 a6 d0 ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    94ac:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    94b2:	74 28                	je     94dc <_ZNK2vk4raii8Instance13getDispatcherEv+0x54>
    94b4:	48 8d 05 45 f6 01 00 	lea    0x1f645(%rip),%rax        # 28b00 <_ZNSt8__detailL19__atomic_spin_countE+0x9c>
    94bb:	48 89 c1             	mov    %rax,%rcx
    94be:	ba 25 0a 00 00       	mov    $0xa25,%edx
    94c3:	48 8d 05 86 f6 01 00 	lea    0x1f686(%rip),%rax        # 28b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    94ca:	48 89 c6             	mov    %rax,%rsi
    94cd:	48 8d 05 a4 f6 01 00 	lea    0x1f6a4(%rip),%rax        # 28b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    94d4:	48 89 c7             	mov    %rax,%rdi
    94d7:	e8 34 bc ff ff       	call   5110 <__assert_fail@plt>
        return &*m_dispatcher;
    94dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94e0:	48 83 c0 10          	add    $0x10,%rax
    94e4:	48 89 c7             	mov    %rax,%rdi
    94e7:	e8 72 12 00 00       	call   a75e <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv>
      }
    94ec:	c9                   	leave
    94ed:	c3                   	ret

00000000000094ee <_ZN2vk4raii14PhysicalDeviceD1Ev>:
      {
      }

      PhysicalDevice( std::nullptr_t ) {}

      ~PhysicalDevice()
    94ee:	55                   	push   %rbp
    94ef:	48 89 e5             	mov    %rsp,%rbp
    94f2:	48 83 ec 10          	sub    $0x10,%rsp
    94f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    94fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94fe:	48 89 c7             	mov    %rax,%rdi
    9501:	e8 04 00 00 00       	call   950a <_ZN2vk4raii14PhysicalDevice5clearEv>
      }
    9506:	90                   	nop
    9507:	c9                   	leave
    9508:	c3                   	ret
    9509:	90                   	nop

000000000000950a <_ZN2vk4raii14PhysicalDevice5clearEv>:
      VULKAN_HPP_NAMESPACE::PhysicalDevice const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_physicalDevice;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    950a:	55                   	push   %rbp
    950b:	48 89 e5             	mov    %rsp,%rbp
    950e:	48 83 ec 10          	sub    $0x10,%rsp
    9512:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        m_physicalDevice = nullptr;
    9516:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    951a:	be 00 00 00 00       	mov    $0x0,%esi
    951f:	48 89 c7             	mov    %rax,%rdi
    9522:	e8 af fb ff ff       	call   90d6 <_ZN2vk14PhysicalDeviceaSEDn>
        m_dispatcher     = nullptr;
    9527:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    952b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9532:	00 
      }
    9533:	90                   	nop
    9534:	c9                   	leave
    9535:	c3                   	ret

0000000000009536 <_ZN2vk4raii6DeviceD1Ev>:
                                                                                                   static_cast<VkDevice>( m_device ) ) );
      }

      Device( std::nullptr_t ) {}

      ~Device()
    9536:	55                   	push   %rbp
    9537:	48 89 e5             	mov    %rsp,%rbp
    953a:	48 83 ec 10          	sub    $0x10,%rsp
    953e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9542:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9546:	48 89 c7             	mov    %rax,%rdi
    9549:	e8 14 00 00 00       	call   9562 <_ZN2vk4raii6Device5clearEv>
      }
    954e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9552:	48 83 c0 10          	add    $0x10,%rax
    9556:	48 89 c7             	mov    %rax,%rdi
    9559:	e8 42 12 00 00       	call   a7a0 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev>
    955e:	90                   	nop
    955f:	c9                   	leave
    9560:	c3                   	ret
    9561:	90                   	nop

0000000000009562 <_ZN2vk4raii6Device5clearEv>:
      VULKAN_HPP_NAMESPACE::Device const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_device;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9562:	55                   	push   %rbp
    9563:	48 89 e5             	mov    %rsp,%rbp
    9566:	41 54                	push   %r12
    9568:	53                   	push   %rbx
    9569:	48 83 ec 10          	sub    $0x10,%rsp
    956d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        if ( m_device )
    9571:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9575:	48 89 c7             	mov    %rax,%rdi
    9578:	e8 41 fb ff ff       	call   90be <_ZNK2vk6DevicecvbEv>
    957d:	84 c0                	test   %al,%al
    957f:	74 2d                	je     95ae <_ZN2vk4raii6Device5clearEv+0x4c>
        {
          getDispatcher()->vkDestroyDevice( static_cast<VkDevice>( m_device ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    9581:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9585:	48 89 c7             	mov    %rax,%rdi
    9588:	e8 5d 00 00 00       	call   95ea <_ZNK2vk4raii6Device13getDispatcherEv>
    958d:	4c 8b 60 18          	mov    0x18(%rax),%r12
    9591:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9595:	48 8b 58 08          	mov    0x8(%rax),%rbx
    9599:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    959d:	48 89 c7             	mov    %rax,%rdi
    95a0:	e8 07 fb ff ff       	call   90ac <_ZNK2vk6DevicecvP10VkDevice_TEv>
    95a5:	48 89 de             	mov    %rbx,%rsi
    95a8:	48 89 c7             	mov    %rax,%rdi
    95ab:	41 ff d4             	call   *%r12
        }
        m_device     = nullptr;
    95ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    95b2:	be 00 00 00 00       	mov    $0x0,%esi
    95b7:	48 89 c7             	mov    %rax,%rdi
    95ba:	e8 cf fa ff ff       	call   908e <_ZN2vk6DeviceaSEDn>
        m_allocator  = nullptr;
    95bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    95c3:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    95ca:	00 
        m_dispatcher = nullptr;
    95cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    95cf:	48 83 c0 10          	add    $0x10,%rax
    95d3:	be 00 00 00 00       	mov    $0x0,%esi
    95d8:	48 89 c7             	mov    %rax,%rdi
    95db:	e8 5a 12 00 00       	call   a83a <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEaSEDn>
      }
    95e0:	90                   	nop
    95e1:	48 83 c4 10          	add    $0x10,%rsp
    95e5:	5b                   	pop    %rbx
    95e6:	41 5c                	pop    %r12
    95e8:	5d                   	pop    %rbp
    95e9:	c3                   	ret

00000000000095ea <_ZNK2vk4raii6Device13getDispatcherEv>:

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
    95ea:	55                   	push   %rbp
    95eb:	48 89 e5             	mov    %rsp,%rbp
    95ee:	48 83 ec 10          	sub    $0x10,%rsp
    95f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    95f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    95fa:	48 83 c0 10          	add    $0x10,%rax
    95fe:	48 89 c7             	mov    %rax,%rdi
    9601:	e8 5c 12 00 00       	call   a862 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEptEv>
    9606:	48 89 c7             	mov    %rax,%rdi
    9609:	e8 44 cf ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    960e:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    9614:	74 28                	je     963e <_ZNK2vk4raii6Device13getDispatcherEv+0x54>
    9616:	48 8d 05 93 f5 01 00 	lea    0x1f593(%rip),%rax        # 28bb0 <_ZNSt8__detailL19__atomic_spin_countE+0x14c>
    961d:	48 89 c1             	mov    %rax,%rcx
    9620:	ba d7 0c 00 00       	mov    $0xcd7,%edx
    9625:	48 8d 05 24 f5 01 00 	lea    0x1f524(%rip),%rax        # 28b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    962c:	48 89 c6             	mov    %rax,%rsi
    962f:	48 8d 05 42 f5 01 00 	lea    0x1f542(%rip),%rax        # 28b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9636:	48 89 c7             	mov    %rax,%rdi
    9639:	e8 d2 ba ff ff       	call   5110 <__assert_fail@plt>
        return &*m_dispatcher;
    963e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9642:	48 83 c0 10          	add    $0x10,%rax
    9646:	48 89 c7             	mov    %rax,%rdi
    9649:	e8 2e 12 00 00       	call   a87c <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv>
      }
    964e:	c9                   	leave
    964f:	c3                   	ret

0000000000009650 <_ZN2vk4raii11CommandPoolD1Ev>:
      {
      }

      CommandPool( std::nullptr_t ) {}

      ~CommandPool()
    9650:	55                   	push   %rbp
    9651:	48 89 e5             	mov    %rsp,%rbp
    9654:	48 83 ec 10          	sub    $0x10,%rsp
    9658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    965c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9660:	48 89 c7             	mov    %rax,%rdi
    9663:	e8 04 00 00 00       	call   966c <_ZN2vk4raii11CommandPool5clearEv>
      }
    9668:	90                   	nop
    9669:	c9                   	leave
    966a:	c3                   	ret
    966b:	90                   	nop

000000000000966c <_ZN2vk4raii11CommandPool5clearEv>:
      VULKAN_HPP_NAMESPACE::CommandPool const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_commandPool;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    966c:	55                   	push   %rbp
    966d:	48 89 e5             	mov    %rsp,%rbp
    9670:	41 55                	push   %r13
    9672:	41 54                	push   %r12
    9674:	53                   	push   %rbx
    9675:	48 83 ec 18          	sub    $0x18,%rsp
    9679:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_commandPool )
    967d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9681:	48 83 c0 08          	add    $0x8,%rax
    9685:	48 89 c7             	mov    %rax,%rdi
    9688:	e8 cb f9 ff ff       	call   9058 <_ZNK2vk11CommandPoolcvbEv>
    968d:	84 c0                	test   %al,%al
    968f:	74 46                	je     96d7 <_ZN2vk4raii11CommandPool5clearEv+0x6b>
        {
          getDispatcher()->vkDestroyCommandPool(
    9691:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9695:	48 89 c7             	mov    %rax,%rdi
    9698:	e8 85 00 00 00       	call   9722 <_ZNK2vk4raii11CommandPool13getDispatcherEv>
    969d:	4c 8b a0 40 02 00 00 	mov    0x240(%rax),%r12
            static_cast<VkDevice>( m_device ), static_cast<VkCommandPool>( m_commandPool ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    96a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    96a8:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroyCommandPool(
    96ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    96b0:	48 83 c0 08          	add    $0x8,%rax
    96b4:	48 89 c7             	mov    %rax,%rdi
    96b7:	e8 8a f9 ff ff       	call   9046 <_ZNK2vk11CommandPoolcvP15VkCommandPool_TEv>
    96bc:	49 89 c5             	mov    %rax,%r13
    96bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    96c3:	48 89 c7             	mov    %rax,%rdi
    96c6:	e8 e1 f9 ff ff       	call   90ac <_ZNK2vk6DevicecvP10VkDevice_TEv>
    96cb:	48 89 da             	mov    %rbx,%rdx
    96ce:	4c 89 ee             	mov    %r13,%rsi
    96d1:	48 89 c7             	mov    %rax,%rdi
    96d4:	41 ff d4             	call   *%r12
        }
        m_device      = nullptr;
    96d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    96db:	be 00 00 00 00       	mov    $0x0,%esi
    96e0:	48 89 c7             	mov    %rax,%rdi
    96e3:	e8 a6 f9 ff ff       	call   908e <_ZN2vk6DeviceaSEDn>
        m_commandPool = nullptr;
    96e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    96ec:	48 83 c0 08          	add    $0x8,%rax
    96f0:	be 00 00 00 00       	mov    $0x0,%esi
    96f5:	48 89 c7             	mov    %rax,%rdi
    96f8:	e8 2b f9 ff ff       	call   9028 <_ZN2vk11CommandPoolaSEDn>
        m_allocator   = nullptr;
    96fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9701:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9708:	00 
        m_dispatcher  = nullptr;
    9709:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    970d:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    9714:	00 
      }
    9715:	90                   	nop
    9716:	48 83 c4 18          	add    $0x18,%rsp
    971a:	5b                   	pop    %rbx
    971b:	41 5c                	pop    %r12
    971d:	41 5d                	pop    %r13
    971f:	5d                   	pop    %rbp
    9720:	c3                   	ret
    9721:	90                   	nop

0000000000009722 <_ZNK2vk4raii11CommandPool13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Device getDevice() const
      {
        return m_device;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
    9722:	55                   	push   %rbp
    9723:	48 89 e5             	mov    %rsp,%rbp
    9726:	48 83 ec 10          	sub    $0x10,%rsp
    972a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    972e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9732:	48 8b 40 18          	mov    0x18(%rax),%rax
    9736:	48 89 c7             	mov    %rax,%rdi
    9739:	e8 14 ce ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    973e:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    9744:	74 28                	je     976e <_ZNK2vk4raii11CommandPool13getDispatcherEv+0x4c>
    9746:	48 8d 05 b3 f4 01 00 	lea    0x1f4b3(%rip),%rax        # 28c00 <_ZNSt8__detailL19__atomic_spin_countE+0x19c>
    974d:	48 89 c1             	mov    %rax,%rcx
    9750:	ba 77 12 00 00       	mov    $0x1277,%edx
    9755:	48 8d 05 f4 f3 01 00 	lea    0x1f3f4(%rip),%rax        # 28b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    975c:	48 89 c6             	mov    %rax,%rsi
    975f:	48 8d 05 12 f4 01 00 	lea    0x1f412(%rip),%rax        # 28b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9766:	48 89 c7             	mov    %rax,%rdi
    9769:	e8 a2 b9 ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    976e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9772:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    9776:	c9                   	leave
    9777:	c3                   	ret

0000000000009778 <_ZN2vk4raii13CommandBufferD1Ev>:
      {
      }

      CommandBuffer( std::nullptr_t ) {}

      ~CommandBuffer()
    9778:	55                   	push   %rbp
    9779:	48 89 e5             	mov    %rsp,%rbp
    977c:	48 83 ec 10          	sub    $0x10,%rsp
    9780:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9788:	48 89 c7             	mov    %rax,%rdi
    978b:	e8 04 00 00 00       	call   9794 <_ZN2vk4raii13CommandBuffer5clearEv>
      }
    9790:	90                   	nop
    9791:	c9                   	leave
    9792:	c3                   	ret
    9793:	90                   	nop

0000000000009794 <_ZN2vk4raii13CommandBuffer5clearEv>:
      VULKAN_HPP_NAMESPACE::CommandBuffer const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_commandBuffer;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9794:	55                   	push   %rbp
    9795:	48 89 e5             	mov    %rsp,%rbp
    9798:	41 55                	push   %r13
    979a:	41 54                	push   %r12
    979c:	53                   	push   %rbx
    979d:	48 83 ec 18          	sub    $0x18,%rsp
    97a1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_commandBuffer )
    97a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    97a9:	48 83 c0 10          	add    $0x10,%rax
    97ad:	48 89 c7             	mov    %rax,%rdi
    97b0:	e8 5b f8 ff ff       	call   9010 <_ZNK2vk13CommandBuffercvbEv>
    97b5:	84 c0                	test   %al,%al
    97b7:	74 4a                	je     9803 <_ZN2vk4raii13CommandBuffer5clearEv+0x6f>
        {
          getDispatcher()->vkFreeCommandBuffers(
    97b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    97bd:	48 89 c7             	mov    %rax,%rdi
    97c0:	e8 91 00 00 00       	call   9856 <_ZNK2vk4raii13CommandBuffer13getDispatcherEv>
    97c5:	48 8b 98 58 02 00 00 	mov    0x258(%rax),%rbx
            static_cast<VkDevice>( m_device ), static_cast<VkCommandPool>( m_commandPool ), 1, reinterpret_cast<VkCommandBuffer const *>( &m_commandBuffer ) );
    97cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    97d0:	4c 8d 60 10          	lea    0x10(%rax),%r12
          getDispatcher()->vkFreeCommandBuffers(
    97d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    97d8:	48 83 c0 08          	add    $0x8,%rax
    97dc:	48 89 c7             	mov    %rax,%rdi
    97df:	e8 62 f8 ff ff       	call   9046 <_ZNK2vk11CommandPoolcvP15VkCommandPool_TEv>
    97e4:	49 89 c5             	mov    %rax,%r13
    97e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    97eb:	48 89 c7             	mov    %rax,%rdi
    97ee:	e8 b9 f8 ff ff       	call   90ac <_ZNK2vk6DevicecvP10VkDevice_TEv>
    97f3:	4c 89 e1             	mov    %r12,%rcx
    97f6:	ba 01 00 00 00       	mov    $0x1,%edx
    97fb:	4c 89 ee             	mov    %r13,%rsi
    97fe:	48 89 c7             	mov    %rax,%rdi
    9801:	ff d3                	call   *%rbx
        }
        m_device        = nullptr;
    9803:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9807:	be 00 00 00 00       	mov    $0x0,%esi
    980c:	48 89 c7             	mov    %rax,%rdi
    980f:	e8 7a f8 ff ff       	call   908e <_ZN2vk6DeviceaSEDn>
        m_commandPool   = nullptr;
    9814:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9818:	48 83 c0 08          	add    $0x8,%rax
    981c:	be 00 00 00 00       	mov    $0x0,%esi
    9821:	48 89 c7             	mov    %rax,%rdi
    9824:	e8 ff f7 ff ff       	call   9028 <_ZN2vk11CommandPoolaSEDn>
        m_commandBuffer = nullptr;
    9829:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    982d:	48 83 c0 10          	add    $0x10,%rax
    9831:	be 00 00 00 00       	mov    $0x0,%esi
    9836:	48 89 c7             	mov    %rax,%rdi
    9839:	e8 b4 f7 ff ff       	call   8ff2 <_ZN2vk13CommandBufferaSEDn>
        m_dispatcher    = nullptr;
    983e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9842:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    9849:	00 
      }
    984a:	90                   	nop
    984b:	48 83 c4 18          	add    $0x18,%rsp
    984f:	5b                   	pop    %rbx
    9850:	41 5c                	pop    %r12
    9852:	41 5d                	pop    %r13
    9854:	5d                   	pop    %rbp
    9855:	c3                   	ret

0000000000009856 <_ZNK2vk4raii13CommandBuffer13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Device getDevice() const
      {
        return m_device;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
    9856:	55                   	push   %rbp
    9857:	48 89 e5             	mov    %rsp,%rbp
    985a:	48 83 ec 10          	sub    $0x10,%rsp
    985e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9862:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9866:	48 8b 40 18          	mov    0x18(%rax),%rax
    986a:	48 89 c7             	mov    %rax,%rdi
    986d:	e8 e0 cc ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    9872:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    9878:	74 28                	je     98a2 <_ZNK2vk4raii13CommandBuffer13getDispatcherEv+0x4c>
    987a:	48 8d 05 cf f3 01 00 	lea    0x1f3cf(%rip),%rax        # 28c50 <_ZNSt8__detailL19__atomic_spin_countE+0x1ec>
    9881:	48 89 c1             	mov    %rax,%rcx
    9884:	ba dc 12 00 00       	mov    $0x12dc,%edx
    9889:	48 8d 05 c0 f2 01 00 	lea    0x1f2c0(%rip),%rax        # 28b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    9890:	48 89 c6             	mov    %rax,%rsi
    9893:	48 8d 05 de f2 01 00 	lea    0x1f2de(%rip),%rax        # 28b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    989a:	48 89 c7             	mov    %rax,%rdi
    989d:	e8 6e b8 ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    98a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98a6:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    98aa:	c9                   	leave
    98ab:	c3                   	ret

00000000000098ac <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
    98ac:	55                   	push   %rbp
    98ad:	48 89 e5             	mov    %rsp,%rbp
    98b0:	48 83 ec 10          	sub    $0x10,%rsp
    98b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    98b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98bc:	48 89 c7             	mov    %rax,%rdi
    98bf:	e8 fa 0f 00 00       	call   a8be <_ZNSaIN2vk4raii13CommandBufferEED1Ev>
    98c4:	90                   	nop
    98c5:	c9                   	leave
    98c6:	c3                   	ret
    98c7:	90                   	nop

00000000000098c8 <_ZN2vk4raii22DebugUtilsMessengerEXTD1Ev>:
      {
      }

      DebugUtilsMessengerEXT( std::nullptr_t ) {}

      ~DebugUtilsMessengerEXT()
    98c8:	55                   	push   %rbp
    98c9:	48 89 e5             	mov    %rsp,%rbp
    98cc:	48 83 ec 10          	sub    $0x10,%rsp
    98d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    98d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98d8:	48 89 c7             	mov    %rax,%rdi
    98db:	e8 04 00 00 00       	call   98e4 <_ZN2vk4raii22DebugUtilsMessengerEXT5clearEv>
      }
    98e0:	90                   	nop
    98e1:	c9                   	leave
    98e2:	c3                   	ret
    98e3:	90                   	nop

00000000000098e4 <_ZN2vk4raii22DebugUtilsMessengerEXT5clearEv>:
      VULKAN_HPP_NAMESPACE::DebugUtilsMessengerEXT const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_messenger;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    98e4:	55                   	push   %rbp
    98e5:	48 89 e5             	mov    %rsp,%rbp
    98e8:	41 55                	push   %r13
    98ea:	41 54                	push   %r12
    98ec:	53                   	push   %rbx
    98ed:	48 83 ec 18          	sub    $0x18,%rsp
    98f1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_messenger )
    98f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98f9:	48 83 c0 08          	add    $0x8,%rax
    98fd:	48 89 c7             	mov    %rax,%rdi
    9900:	e8 8d f6 ff ff       	call   8f92 <_ZNK2vk22DebugUtilsMessengerEXTcvbEv>
    9905:	84 c0                	test   %al,%al
    9907:	74 46                	je     994f <_ZN2vk4raii22DebugUtilsMessengerEXT5clearEv+0x6b>
        {
          getDispatcher()->vkDestroyDebugUtilsMessengerEXT( static_cast<VkInstance>( m_instance ),
    9909:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    990d:	48 89 c7             	mov    %rax,%rdi
    9910:	e8 85 00 00 00       	call   999a <_ZNK2vk4raii22DebugUtilsMessengerEXT13getDispatcherEv>
    9915:	4c 8b a0 20 01 00 00 	mov    0x120(%rax),%r12
                                                            static_cast<VkDebugUtilsMessengerEXT>( m_messenger ),
                                                            reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    991c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9920:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroyDebugUtilsMessengerEXT( static_cast<VkInstance>( m_instance ),
    9924:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9928:	48 83 c0 08          	add    $0x8,%rax
    992c:	48 89 c7             	mov    %rax,%rdi
    992f:	e8 4c f6 ff ff       	call   8f80 <_ZNK2vk22DebugUtilsMessengerEXTcvP26VkDebugUtilsMessengerEXT_TEv>
    9934:	49 89 c5             	mov    %rax,%r13
    9937:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    993b:	48 89 c7             	mov    %rax,%rdi
    993e:	e8 cf f7 ff ff       	call   9112 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    9943:	48 89 da             	mov    %rbx,%rdx
    9946:	4c 89 ee             	mov    %r13,%rsi
    9949:	48 89 c7             	mov    %rax,%rdi
    994c:	41 ff d4             	call   *%r12
        }
        m_instance   = nullptr;
    994f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9953:	be 00 00 00 00       	mov    $0x0,%esi
    9958:	48 89 c7             	mov    %rax,%rdi
    995b:	e8 94 f7 ff ff       	call   90f4 <_ZN2vk8InstanceaSEDn>
        m_messenger  = nullptr;
    9960:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9964:	48 83 c0 08          	add    $0x8,%rax
    9968:	be 00 00 00 00       	mov    $0x0,%esi
    996d:	48 89 c7             	mov    %rax,%rdi
    9970:	e8 ed f5 ff ff       	call   8f62 <_ZN2vk22DebugUtilsMessengerEXTaSEDn>
        m_allocator  = nullptr;
    9975:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9979:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9980:	00 
        m_dispatcher = nullptr;
    9981:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9985:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    998c:	00 
      }
    998d:	90                   	nop
    998e:	48 83 c4 18          	add    $0x18,%rsp
    9992:	5b                   	pop    %rbx
    9993:	41 5c                	pop    %r12
    9995:	41 5d                	pop    %r13
    9997:	5d                   	pop    %rbp
    9998:	c3                   	ret
    9999:	90                   	nop

000000000000999a <_ZNK2vk4raii22DebugUtilsMessengerEXT13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Instance getInstance() const
      {
        return m_instance;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
    999a:	55                   	push   %rbp
    999b:	48 89 e5             	mov    %rsp,%rbp
    999e:	48 83 ec 10          	sub    $0x10,%rsp
    99a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    99a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99aa:	48 8b 40 18          	mov    0x18(%rax),%rax
    99ae:	48 89 c7             	mov    %rax,%rdi
    99b1:	e8 9c cb ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    99b6:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    99bc:	74 28                	je     99e6 <_ZNK2vk4raii22DebugUtilsMessengerEXT13getDispatcherEv+0x4c>
    99be:	48 8d 05 e3 f2 01 00 	lea    0x1f2e3(%rip),%rax        # 28ca8 <_ZNSt8__detailL19__atomic_spin_countE+0x244>
    99c5:	48 89 c1             	mov    %rax,%rcx
    99c8:	ba f5 17 00 00       	mov    $0x17f5,%edx
    99cd:	48 8d 05 7c f1 01 00 	lea    0x1f17c(%rip),%rax        # 28b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    99d4:	48 89 c6             	mov    %rax,%rsi
    99d7:	48 8d 05 9a f1 01 00 	lea    0x1f19a(%rip),%rax        # 28b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    99de:	48 89 c7             	mov    %rax,%rdi
    99e1:	e8 2a b7 ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    99e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99ea:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    99ee:	c9                   	leave
    99ef:	c3                   	ret

00000000000099f0 <_ZN2vk4raii5QueueD1Ev>:
      {
      }

      Queue( std::nullptr_t ) {}

      ~Queue()
    99f0:	55                   	push   %rbp
    99f1:	48 89 e5             	mov    %rsp,%rbp
    99f4:	48 83 ec 10          	sub    $0x10,%rsp
    99f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    99fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a00:	48 89 c7             	mov    %rax,%rdi
    9a03:	e8 04 00 00 00       	call   9a0c <_ZN2vk4raii5Queue5clearEv>
      }
    9a08:	90                   	nop
    9a09:	c9                   	leave
    9a0a:	c3                   	ret
    9a0b:	90                   	nop

0000000000009a0c <_ZN2vk4raii5Queue5clearEv>:
      VULKAN_HPP_NAMESPACE::Queue const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_queue;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9a0c:	55                   	push   %rbp
    9a0d:	48 89 e5             	mov    %rsp,%rbp
    9a10:	48 83 ec 10          	sub    $0x10,%rsp
    9a14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        m_queue      = nullptr;
    9a18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a1c:	be 00 00 00 00       	mov    $0x0,%esi
    9a21:	48 89 c7             	mov    %rax,%rdi
    9a24:	e8 47 f6 ff ff       	call   9070 <_ZN2vk5QueueaSEDn>
        m_dispatcher = nullptr;
    9a29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a2d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9a34:	00 
      }
    9a35:	90                   	nop
    9a36:	c9                   	leave
    9a37:	c3                   	ret

0000000000009a38 <_ZN2vk4raii10SurfaceKHRD1Ev>:
      {
      }

      SurfaceKHR( std::nullptr_t ) {}

      ~SurfaceKHR()
    9a38:	55                   	push   %rbp
    9a39:	48 89 e5             	mov    %rsp,%rbp
    9a3c:	48 83 ec 10          	sub    $0x10,%rsp
    9a40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9a44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a48:	48 89 c7             	mov    %rax,%rdi
    9a4b:	e8 04 00 00 00       	call   9a54 <_ZN2vk4raii10SurfaceKHR5clearEv>
      }
    9a50:	90                   	nop
    9a51:	c9                   	leave
    9a52:	c3                   	ret
    9a53:	90                   	nop

0000000000009a54 <_ZN2vk4raii10SurfaceKHR5clearEv>:
      VULKAN_HPP_NAMESPACE::SurfaceKHR const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_surface;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9a54:	55                   	push   %rbp
    9a55:	48 89 e5             	mov    %rsp,%rbp
    9a58:	41 55                	push   %r13
    9a5a:	41 54                	push   %r12
    9a5c:	53                   	push   %rbx
    9a5d:	48 83 ec 18          	sub    $0x18,%rsp
    9a61:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_surface )
    9a65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9a69:	48 83 c0 08          	add    $0x8,%rax
    9a6d:	48 89 c7             	mov    %rax,%rdi
    9a70:	e8 d5 f4 ff ff       	call   8f4a <_ZNK2vk10SurfaceKHRcvbEv>
    9a75:	84 c0                	test   %al,%al
    9a77:	74 46                	je     9abf <_ZN2vk4raii10SurfaceKHR5clearEv+0x6b>
        {
          getDispatcher()->vkDestroySurfaceKHR(
    9a79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9a7d:	48 89 c7             	mov    %rax,%rdi
    9a80:	e8 85 00 00 00       	call   9b0a <_ZNK2vk4raii10SurfaceKHR13getDispatcherEv>
    9a85:	4c 8b a0 70 02 00 00 	mov    0x270(%rax),%r12
            static_cast<VkInstance>( m_instance ), static_cast<VkSurfaceKHR>( m_surface ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    9a8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9a90:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroySurfaceKHR(
    9a94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9a98:	48 83 c0 08          	add    $0x8,%rax
    9a9c:	48 89 c7             	mov    %rax,%rdi
    9a9f:	e8 94 f4 ff ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
    9aa4:	49 89 c5             	mov    %rax,%r13
    9aa7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9aab:	48 89 c7             	mov    %rax,%rdi
    9aae:	e8 5f f6 ff ff       	call   9112 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    9ab3:	48 89 da             	mov    %rbx,%rdx
    9ab6:	4c 89 ee             	mov    %r13,%rsi
    9ab9:	48 89 c7             	mov    %rax,%rdi
    9abc:	41 ff d4             	call   *%r12
        }
        m_instance   = nullptr;
    9abf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ac3:	be 00 00 00 00       	mov    $0x0,%esi
    9ac8:	48 89 c7             	mov    %rax,%rdi
    9acb:	e8 24 f6 ff ff       	call   90f4 <_ZN2vk8InstanceaSEDn>
        m_surface    = nullptr;
    9ad0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ad4:	48 83 c0 08          	add    $0x8,%rax
    9ad8:	be 00 00 00 00       	mov    $0x0,%esi
    9add:	48 89 c7             	mov    %rax,%rdi
    9ae0:	e8 35 f4 ff ff       	call   8f1a <_ZN2vk10SurfaceKHRaSEDn>
        m_allocator  = nullptr;
    9ae5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ae9:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9af0:	00 
        m_dispatcher = nullptr;
    9af1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9af5:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    9afc:	00 
      }
    9afd:	90                   	nop
    9afe:	48 83 c4 18          	add    $0x18,%rsp
    9b02:	5b                   	pop    %rbx
    9b03:	41 5c                	pop    %r12
    9b05:	41 5d                	pop    %r13
    9b07:	5d                   	pop    %rbp
    9b08:	c3                   	ret
    9b09:	90                   	nop

0000000000009b0a <_ZNK2vk4raii10SurfaceKHR13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Instance getInstance() const
      {
        return m_instance;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
    9b0a:	55                   	push   %rbp
    9b0b:	48 89 e5             	mov    %rsp,%rbp
    9b0e:	48 83 ec 10          	sub    $0x10,%rsp
    9b12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9b16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b1a:	48 8b 40 18          	mov    0x18(%rax),%rax
    9b1e:	48 89 c7             	mov    %rax,%rdi
    9b21:	e8 2c ca ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    9b26:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    9b2c:	74 28                	je     9b56 <_ZNK2vk4raii10SurfaceKHR13getDispatcherEv+0x4c>
    9b2e:	48 8d 05 d3 f1 01 00 	lea    0x1f1d3(%rip),%rax        # 28d08 <_ZNSt8__detailL19__atomic_spin_countE+0x2a4>
    9b35:	48 89 c1             	mov    %rax,%rcx
    9b38:	ba ca 27 00 00       	mov    $0x27ca,%edx
    9b3d:	48 8d 05 0c f0 01 00 	lea    0x1f00c(%rip),%rax        # 28b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    9b44:	48 89 c6             	mov    %rax,%rsi
    9b47:	48 8d 05 2a f0 01 00 	lea    0x1f02a(%rip),%rax        # 28b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9b4e:	48 89 c7             	mov    %rax,%rdi
    9b51:	e8 ba b5 ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    9b56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b5a:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    9b5e:	c9                   	leave
    9b5f:	c3                   	ret

0000000000009b60 <_ZN2vk4raii12SwapchainKHRD1Ev>:
      {
      }

      SwapchainKHR( std::nullptr_t ) {}

      ~SwapchainKHR()
    9b60:	55                   	push   %rbp
    9b61:	48 89 e5             	mov    %rsp,%rbp
    9b64:	48 83 ec 10          	sub    $0x10,%rsp
    9b68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9b6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b70:	48 89 c7             	mov    %rax,%rdi
    9b73:	e8 04 00 00 00       	call   9b7c <_ZN2vk4raii12SwapchainKHR5clearEv>
      }
    9b78:	90                   	nop
    9b79:	c9                   	leave
    9b7a:	c3                   	ret
    9b7b:	90                   	nop

0000000000009b7c <_ZN2vk4raii12SwapchainKHR5clearEv>:
      VULKAN_HPP_NAMESPACE::SwapchainKHR const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_swapchain;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9b7c:	55                   	push   %rbp
    9b7d:	48 89 e5             	mov    %rsp,%rbp
    9b80:	41 55                	push   %r13
    9b82:	41 54                	push   %r12
    9b84:	53                   	push   %rbx
    9b85:	48 83 ec 18          	sub    $0x18,%rsp
    9b89:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_swapchain )
    9b8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9b91:	48 83 c0 08          	add    $0x8,%rax
    9b95:	48 89 c7             	mov    %rax,%rdi
    9b98:	e8 3d f4 ff ff       	call   8fda <_ZNK2vk12SwapchainKHRcvbEv>
    9b9d:	84 c0                	test   %al,%al
    9b9f:	74 46                	je     9be7 <_ZN2vk4raii12SwapchainKHR5clearEv+0x6b>
        {
          getDispatcher()->vkDestroySwapchainKHR(
    9ba1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ba5:	48 89 c7             	mov    %rax,%rdi
    9ba8:	e8 85 00 00 00       	call   9c32 <_ZNK2vk4raii12SwapchainKHR13getDispatcherEv>
    9bad:	4c 8b a0 70 0d 00 00 	mov    0xd70(%rax),%r12
            static_cast<VkDevice>( m_device ), static_cast<VkSwapchainKHR>( m_swapchain ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    9bb4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9bb8:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroySwapchainKHR(
    9bbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9bc0:	48 83 c0 08          	add    $0x8,%rax
    9bc4:	48 89 c7             	mov    %rax,%rdi
    9bc7:	e8 fc f3 ff ff       	call   8fc8 <_ZNK2vk12SwapchainKHRcvP16VkSwapchainKHR_TEv>
    9bcc:	49 89 c5             	mov    %rax,%r13
    9bcf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9bd3:	48 89 c7             	mov    %rax,%rdi
    9bd6:	e8 d1 f4 ff ff       	call   90ac <_ZNK2vk6DevicecvP10VkDevice_TEv>
    9bdb:	48 89 da             	mov    %rbx,%rdx
    9bde:	4c 89 ee             	mov    %r13,%rsi
    9be1:	48 89 c7             	mov    %rax,%rdi
    9be4:	41 ff d4             	call   *%r12
        }
        m_device     = nullptr;
    9be7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9beb:	be 00 00 00 00       	mov    $0x0,%esi
    9bf0:	48 89 c7             	mov    %rax,%rdi
    9bf3:	e8 96 f4 ff ff       	call   908e <_ZN2vk6DeviceaSEDn>
        m_swapchain  = nullptr;
    9bf8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9bfc:	48 83 c0 08          	add    $0x8,%rax
    9c00:	be 00 00 00 00       	mov    $0x0,%esi
    9c05:	48 89 c7             	mov    %rax,%rdi
    9c08:	e8 9d f3 ff ff       	call   8faa <_ZN2vk12SwapchainKHRaSEDn>
        m_allocator  = nullptr;
    9c0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9c11:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9c18:	00 
        m_dispatcher = nullptr;
    9c19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9c1d:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    9c24:	00 
      }
    9c25:	90                   	nop
    9c26:	48 83 c4 18          	add    $0x18,%rsp
    9c2a:	5b                   	pop    %rbx
    9c2b:	41 5c                	pop    %r12
    9c2d:	41 5d                	pop    %r13
    9c2f:	5d                   	pop    %rbp
    9c30:	c3                   	ret
    9c31:	90                   	nop

0000000000009c32 <_ZNK2vk4raii12SwapchainKHR13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Device getDevice() const
      {
        return m_device;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
    9c32:	55                   	push   %rbp
    9c33:	48 89 e5             	mov    %rsp,%rbp
    9c36:	48 83 ec 10          	sub    $0x10,%rsp
    9c3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9c3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c42:	48 8b 40 18          	mov    0x18(%rax),%rax
    9c46:	48 89 c7             	mov    %rax,%rdi
    9c49:	e8 04 c9 ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    9c4e:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    9c54:	74 28                	je     9c7e <_ZNK2vk4raii12SwapchainKHR13getDispatcherEv+0x4c>
    9c56:	48 8d 05 fb f0 01 00 	lea    0x1f0fb(%rip),%rax        # 28d58 <_ZNSt8__detailL19__atomic_spin_countE+0x2f4>
    9c5d:	48 89 c1             	mov    %rax,%rcx
    9c60:	ba 3a 28 00 00       	mov    $0x283a,%edx
    9c65:	48 8d 05 e4 ee 01 00 	lea    0x1eee4(%rip),%rax        # 28b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    9c6c:	48 89 c6             	mov    %rax,%rsi
    9c6f:	48 8d 05 02 ef 01 00 	lea    0x1ef02(%rip),%rax        # 28b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9c76:	48 89 c7             	mov    %rax,%rdi
    9c79:	e8 92 b4 ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    9c7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c82:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    9c86:	c9                   	leave
    9c87:	c3                   	ret

0000000000009c88 <_ZN2vk4raii14CommandBuffersD1Ev>:
    class CommandBuffers : public std::vector<VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::CommandBuffer>
    9c88:	55                   	push   %rbp
    9c89:	48 89 e5             	mov    %rsp,%rbp
    9c8c:	48 83 ec 10          	sub    $0x10,%rsp
    9c90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9c94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c98:	48 89 c7             	mov    %rax,%rdi
    9c9b:	e8 78 0c 00 00       	call   a918 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EED1Ev>
    9ca0:	90                   	nop
    9ca1:	c9                   	leave
    9ca2:	c3                   	ret
    9ca3:	90                   	nop

0000000000009ca4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
    9ca4:	55                   	push   %rbp
    9ca5:	48 89 e5             	mov    %rsp,%rbp
    9ca8:	48 83 ec 20          	sub    $0x20,%rsp
    9cac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      std::size_t __i = 0;
    9cb0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    9cb7:	00 
      while (!eq(__p[__i], char_type()))
    9cb8:	eb 05                	jmp    9cbf <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x1b>
        ++__i;
    9cba:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
      while (!eq(__p[__i], char_type()))
    9cbf:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
    9cc3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9cc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ccb:	48 01 c2             	add    %rax,%rdx
    9cce:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
    9cd2:	48 89 c6             	mov    %rax,%rsi
    9cd5:	48 89 d7             	mov    %rdx,%rdi
    9cd8:	e8 0d 00 00 00       	call   9cea <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
    9cdd:	83 f0 01             	xor    $0x1,%eax
    9ce0:	84 c0                	test   %al,%al
    9ce2:	75 d6                	jne    9cba <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x16>
      return __i;
    9ce4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    9ce8:	c9                   	leave
    9ce9:	c3                   	ret

0000000000009cea <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
    9cea:	55                   	push   %rbp
    9ceb:	48 89 e5             	mov    %rsp,%rbp
    9cee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9cf2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
    9cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9cfa:	0f b6 10             	movzbl (%rax),%edx
    9cfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9d01:	0f b6 00             	movzbl (%rax),%eax
    9d04:	38 c2                	cmp    %al,%dl
    9d06:	0f 94 c0             	sete   %al
    9d09:	5d                   	pop    %rbp
    9d0a:	c3                   	ret
    9d0b:	90                   	nop

0000000000009d0c <_ZN4rtvc4GLFWC1Ev>:
    "VK_LAYER_KHRONOS_validation";
inline constexpr std::string_view mangohudLayerName =
    "VK_LAYER_MANGOHUD_overlay";

struct GLFW {
  GLFW() { glfwInit(); }
    9d0c:	55                   	push   %rbp
    9d0d:	48 89 e5             	mov    %rsp,%rbp
    9d10:	48 83 ec 10          	sub    $0x10,%rsp
    9d14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9d18:	e8 73 b5 ff ff       	call   5290 <glfwInit@plt>
    9d1d:	90                   	nop
    9d1e:	c9                   	leave
    9d1f:	c3                   	ret

0000000000009d20 <_ZN4rtvc4GLFWD1Ev>:
  ~GLFW() { glfwTerminate(); }
    9d20:	55                   	push   %rbp
    9d21:	48 89 e5             	mov    %rsp,%rbp
    9d24:	48 83 ec 10          	sub    $0x10,%rsp
    9d28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9d2c:	e8 0f b5 ff ff       	call   5240 <glfwTerminate@plt>
    9d31:	90                   	nop
    9d32:	c9                   	leave
    9d33:	c3                   	ret

0000000000009d34 <_ZN4rtvc6WindowC1Ev>:

class Window {
  typedef GLFWwindow *pGLFWwindow;

public:
  Window() {
    9d34:	55                   	push   %rbp
    9d35:	48 89 e5             	mov    %rsp,%rbp
    9d38:	48 83 ec 10          	sub    $0x10,%rsp
    9d3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
    9d40:	be 00 00 00 00       	mov    $0x0,%esi
    9d45:	bf 01 20 02 00       	mov    $0x22001,%edi
    9d4a:	e8 61 b4 ff ff       	call   51b0 <glfwWindowHint@plt>
    glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
    9d4f:	be 00 00 00 00       	mov    $0x0,%esi
    9d54:	bf 03 00 02 00       	mov    $0x20003,%edi
    9d59:	e8 52 b4 ff ff       	call   51b0 <glfwWindowHint@plt>
    _window = glfwCreateWindow(800, 600, "VulkanApplication", nullptr, nullptr);
    9d5e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    9d64:	b9 00 00 00 00       	mov    $0x0,%ecx
    9d69:	48 8d 05 38 f0 01 00 	lea    0x1f038(%rip),%rax        # 28da8 <_ZNSt8__detailL19__atomic_spin_countE+0x344>
    9d70:	48 89 c2             	mov    %rax,%rdx
    9d73:	be 58 02 00 00       	mov    $0x258,%esi
    9d78:	bf 20 03 00 00       	mov    $0x320,%edi
    9d7d:	e8 ce b5 ff ff       	call   5350 <glfwCreateWindow@plt>
    9d82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9d86:	48 89 02             	mov    %rax,(%rdx)
  }
    9d89:	90                   	nop
    9d8a:	c9                   	leave
    9d8b:	c3                   	ret

0000000000009d8c <_ZN4rtvc6WindowD1Ev>:
  ~Window() { glfwDestroyWindow(_window); }
    9d8c:	55                   	push   %rbp
    9d8d:	48 89 e5             	mov    %rsp,%rbp
    9d90:	48 83 ec 10          	sub    $0x10,%rsp
    9d94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d9c:	48 8b 00             	mov    (%rax),%rax
    9d9f:	48 89 c7             	mov    %rax,%rdi
    9da2:	e8 b9 b2 ff ff       	call   5060 <glfwDestroyWindow@plt>
    9da7:	90                   	nop
    9da8:	c9                   	leave
    9da9:	c3                   	ret

0000000000009daa <_ZNK4rtvc6WindowdeEv>:
  Window(const Window &) = delete;
  Window(Window &&) = delete;
  Window &operator=(const Window &) = delete;
  Window &operator=(Window &&) = delete;

  pGLFWwindow operator*() const noexcept { return _window; }
    9daa:	55                   	push   %rbp
    9dab:	48 89 e5             	mov    %rsp,%rbp
    9dae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9db2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9db6:	48 8b 00             	mov    (%rax),%rax
    9db9:	5d                   	pop    %rbp
    9dba:	c3                   	ret
    9dbb:	90                   	nop

0000000000009dbc <_ZN2vk4raii7ContextD1Ev>:
      ~Context() = default;
    9dbc:	55                   	push   %rbp
    9dbd:	48 89 e5             	mov    %rsp,%rbp
    9dc0:	48 83 ec 10          	sub    $0x10,%rsp
    9dc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9dc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9dcc:	48 83 c0 08          	add    $0x8,%rax
    9dd0:	48 89 c7             	mov    %rax,%rdi
    9dd3:	e8 46 08 00 00       	call   a61e <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EED1Ev>
    9dd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ddc:	48 89 c7             	mov    %rax,%rdi
    9ddf:	e8 4a f4 ff ff       	call   922e <_ZN2vk13DynamicLoaderD1Ev>
    9de4:	90                   	nop
    9de5:	c9                   	leave
    9de6:	c3                   	ret
    9de7:	90                   	nop

0000000000009de8 <_ZN4rtvc13DeviceWrapperD1Ev>:

private:
  pGLFWwindow _window;
};

struct DeviceWrapper {
    9de8:	55                   	push   %rbp
    9de9:	48 89 e5             	mov    %rsp,%rbp
    9dec:	48 83 ec 10          	sub    $0x10,%rsp
    9df0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9df4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9df8:	48 83 c0 28          	add    $0x28,%rax
    9dfc:	48 89 c7             	mov    %rax,%rdi
    9dff:	e8 32 f7 ff ff       	call   9536 <_ZN2vk4raii6DeviceD1Ev>
    9e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e08:	48 83 c0 18          	add    $0x18,%rax
    9e0c:	48 89 c7             	mov    %rax,%rdi
    9e0f:	e8 da f6 ff ff       	call   94ee <_ZN2vk4raii14PhysicalDeviceD1Ev>
    9e14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e18:	48 83 c0 08          	add    $0x8,%rax
    9e1c:	48 89 c7             	mov    %rax,%rdi
    9e1f:	e8 cc fb ff ff       	call   99f0 <_ZN2vk4raii5QueueD1Ev>
    9e24:	90                   	nop
    9e25:	c9                   	leave
    9e26:	c3                   	ret
    9e27:	90                   	nop

0000000000009e28 <_ZN4rtvc16SwapchainWrapperD1Ev>:
  vk::raii::Queue queue;
  vk::raii::PhysicalDevice physical = VK_NULL_HANDLE;
  vk::raii::Device logical = VK_NULL_HANDLE;
};

struct SwapchainWrapper {
    9e28:	55                   	push   %rbp
    9e29:	48 89 e5             	mov    %rsp,%rbp
    9e2c:	48 83 ec 10          	sub    $0x10,%rsp
    9e30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9e34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e38:	48 89 c7             	mov    %rax,%rdi
    9e3b:	e8 20 fd ff ff       	call   9b60 <_ZN2vk4raii12SwapchainKHRD1Ev>
    9e40:	90                   	nop
    9e41:	c9                   	leave
    9e42:	c3                   	ret
    9e43:	90                   	nop

0000000000009e44 <_ZN4rtvc9VulkanApp6renderEv>:
  VulkanApp(const VulkanApp &) = delete;
  VulkanApp(VulkanApp &&) = delete;
  VulkanApp &operator=(const VulkanApp &) = delete;
  VulkanApp &operator=(VulkanApp &&) = delete;

  void render() {
    9e44:	55                   	push   %rbp
    9e45:	48 89 e5             	mov    %rsp,%rbp
    9e48:	48 83 ec 10          	sub    $0x10,%rsp
    9e4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    while (!glfwWindowShouldClose(*_window)) {
    9e50:	eb 05                	jmp    9e57 <_ZN4rtvc9VulkanApp6renderEv+0x13>
      glfwPollEvents();
    9e52:	e8 a9 b3 ff ff       	call   5200 <glfwPollEvents@plt>
    while (!glfwWindowShouldClose(*_window)) {
    9e57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e5b:	48 83 c0 18          	add    $0x18,%rax
    9e5f:	48 89 c7             	mov    %rax,%rdi
    9e62:	e8 43 ff ff ff       	call   9daa <_ZNK4rtvc6WindowdeEv>
    9e67:	48 89 c7             	mov    %rax,%rdi
    9e6a:	e8 81 b5 ff ff       	call   53f0 <glfwWindowShouldClose@plt>
    9e6f:	85 c0                	test   %eax,%eax
    9e71:	0f 94 c0             	sete   %al
    9e74:	84 c0                	test   %al,%al
    9e76:	75 da                	jne    9e52 <_ZN4rtvc9VulkanApp6renderEv+0xe>
    }
  }
    9e78:	90                   	nop
    9e79:	90                   	nop
    9e7a:	c9                   	leave
    9e7b:	c3                   	ret

0000000000009e7c <_ZN4rtvc9VulkanAppC1Ev>:
  VulkanApp() = default;
    9e7c:	55                   	push   %rbp
    9e7d:	48 89 e5             	mov    %rsp,%rbp
    9e80:	53                   	push   %rbx
    9e81:	48 83 ec 18          	sub    $0x18,%rsp
    9e85:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9e89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e8d:	48 89 c7             	mov    %rax,%rdi
    9e90:	e8 63 f4 ff ff       	call   92f8 <_ZN2vk4raii7ContextC1Ev>
    9e95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e99:	48 83 c0 10          	add    $0x10,%rax
    9e9d:	48 89 c7             	mov    %rax,%rdi
    9ea0:	e8 67 fe ff ff       	call   9d0c <_ZN4rtvc4GLFWC1Ev>
    9ea5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ea9:	48 83 c0 18          	add    $0x18,%rax
    9ead:	48 89 c7             	mov    %rax,%rdi
    9eb0:	e8 7f fe ff ff       	call   9d34 <_ZN4rtvc6WindowC1Ev>
    9eb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9eb9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9ebd:	48 83 c2 20          	add    $0x20,%rdx
    9ec1:	48 89 c6             	mov    %rax,%rsi
    9ec4:	48 89 d7             	mov    %rdx,%rdi
    9ec7:	e8 a1 a4 01 00       	call   2436d <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE>
    9ecc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ed0:	48 8d 50 20          	lea    0x20(%rax),%rdx
    9ed4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ed8:	48 83 c0 38          	add    $0x38,%rax
    9edc:	48 89 d6             	mov    %rdx,%rsi
    9edf:	48 89 c7             	mov    %rax,%rdi
    9ee2:	e8 c7 a8 01 00       	call   247ae <_ZN4rtvc18makeDebugMessengerERKN2vk4raii8InstanceE>
    9ee7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9eeb:	48 8d 50 18          	lea    0x18(%rax),%rdx
    9eef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ef3:	48 8d 48 20          	lea    0x20(%rax),%rcx
    9ef7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9efb:	48 83 c0 58          	add    $0x58,%rax
    9eff:	48 89 ce             	mov    %rcx,%rsi
    9f02:	48 89 c7             	mov    %rax,%rdi
    9f05:	e8 ef a8 01 00       	call   247f9 <_ZN4rtvc11makeSurfaceERKN2vk4raii8InstanceERKNS_6WindowE>
    9f0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f0e:	48 8d 50 58          	lea    0x58(%rax),%rdx
    9f12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f16:	48 8d 48 20          	lea    0x20(%rax),%rcx
    9f1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f1e:	48 83 c0 78          	add    $0x78,%rax
    9f22:	48 89 ce             	mov    %rcx,%rsi
    9f25:	48 89 c7             	mov    %rax,%rdi
    9f28:	e8 3c 42 00 00       	call   e169 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE>
    9f2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f31:	48 8d 50 78          	lea    0x78(%rax),%rdx
    9f35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f39:	48 05 b8 00 00 00    	add    $0xb8,%rax
    9f3f:	48 89 d6             	mov    %rdx,%rsi
    9f42:	48 89 c7             	mov    %rax,%rdi
    9f45:	e8 ae 79 01 00       	call   218f8 <_ZN4rtvc15makeCommandPoolERKNS_13DeviceWrapperE>
    9f4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f4e:	c7 80 d8 00 00 00 02 	movl   $0x2,0xd8(%rax)
    9f55:	00 00 00 
    9f58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f5c:	48 8d 90 b8 00 00 00 	lea    0xb8(%rax),%rdx
    9f63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f67:	48 8d b0 a0 00 00 00 	lea    0xa0(%rax),%rsi
    9f6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f72:	48 05 e0 00 00 00    	add    $0xe0,%rax
    9f78:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    9f7e:	b9 02 00 00 00       	mov    $0x2,%ecx
    9f83:	48 89 c7             	mov    %rax,%rdi
    9f86:	e8 dc 79 01 00       	call   21967 <_ZN4rtvc18makeCommandBuffersERKN2vk4raii6DeviceERKNS1_11CommandPoolEjNS0_18CommandBufferLevelE>
    9f8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f8f:	48 8d 50 78          	lea    0x78(%rax),%rdx
    9f93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f97:	48 8d 70 58          	lea    0x58(%rax),%rsi
    9f9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f9f:	48 05 f8 00 00 00    	add    $0xf8,%rax
    9fa5:	b9 00 00 00 00       	mov    $0x0,%ecx
    9faa:	48 89 c7             	mov    %rax,%rdi
    9fad:	e8 66 47 01 00       	call   1e718 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE>
    9fb2:	e9 c6 00 00 00       	jmp    a07d <_ZN4rtvc9VulkanAppC1Ev+0x201>
    9fb7:	48 89 c3             	mov    %rax,%rbx
    9fba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fbe:	48 05 e0 00 00 00    	add    $0xe0,%rax
    9fc4:	48 89 c7             	mov    %rax,%rdi
    9fc7:	e8 bc fc ff ff       	call   9c88 <_ZN2vk4raii14CommandBuffersD1Ev>
    9fcc:	eb 03                	jmp    9fd1 <_ZN4rtvc9VulkanAppC1Ev+0x155>
    9fce:	48 89 c3             	mov    %rax,%rbx
    9fd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fd5:	48 05 b8 00 00 00    	add    $0xb8,%rax
    9fdb:	48 89 c7             	mov    %rax,%rdi
    9fde:	e8 6d f6 ff ff       	call   9650 <_ZN2vk4raii11CommandPoolD1Ev>
    9fe3:	eb 03                	jmp    9fe8 <_ZN4rtvc9VulkanAppC1Ev+0x16c>
    9fe5:	48 89 c3             	mov    %rax,%rbx
    9fe8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fec:	48 83 c0 78          	add    $0x78,%rax
    9ff0:	48 89 c7             	mov    %rax,%rdi
    9ff3:	e8 f0 fd ff ff       	call   9de8 <_ZN4rtvc13DeviceWrapperD1Ev>
    9ff8:	eb 03                	jmp    9ffd <_ZN4rtvc9VulkanAppC1Ev+0x181>
    9ffa:	48 89 c3             	mov    %rax,%rbx
    9ffd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a001:	48 83 c0 58          	add    $0x58,%rax
    a005:	48 89 c7             	mov    %rax,%rdi
    a008:	e8 2b fa ff ff       	call   9a38 <_ZN2vk4raii10SurfaceKHRD1Ev>
    a00d:	eb 03                	jmp    a012 <_ZN4rtvc9VulkanAppC1Ev+0x196>
    a00f:	48 89 c3             	mov    %rax,%rbx
    a012:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a016:	48 83 c0 38          	add    $0x38,%rax
    a01a:	48 89 c7             	mov    %rax,%rdi
    a01d:	e8 a6 f8 ff ff       	call   98c8 <_ZN2vk4raii22DebugUtilsMessengerEXTD1Ev>
    a022:	eb 03                	jmp    a027 <_ZN4rtvc9VulkanAppC1Ev+0x1ab>
    a024:	48 89 c3             	mov    %rax,%rbx
    a027:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a02b:	48 83 c0 20          	add    $0x20,%rax
    a02f:	48 89 c7             	mov    %rax,%rdi
    a032:	e8 9d f3 ff ff       	call   93d4 <_ZN2vk4raii8InstanceD1Ev>
    a037:	eb 03                	jmp    a03c <_ZN4rtvc9VulkanAppC1Ev+0x1c0>
    a039:	48 89 c3             	mov    %rax,%rbx
    a03c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a040:	48 83 c0 18          	add    $0x18,%rax
    a044:	48 89 c7             	mov    %rax,%rdi
    a047:	e8 40 fd ff ff       	call   9d8c <_ZN4rtvc6WindowD1Ev>
    a04c:	eb 03                	jmp    a051 <_ZN4rtvc9VulkanAppC1Ev+0x1d5>
    a04e:	48 89 c3             	mov    %rax,%rbx
    a051:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a055:	48 83 c0 10          	add    $0x10,%rax
    a059:	48 89 c7             	mov    %rax,%rdi
    a05c:	e8 bf fc ff ff       	call   9d20 <_ZN4rtvc4GLFWD1Ev>
    a061:	eb 03                	jmp    a066 <_ZN4rtvc9VulkanAppC1Ev+0x1ea>
    a063:	48 89 c3             	mov    %rax,%rbx
    a066:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a06a:	48 89 c7             	mov    %rax,%rdi
    a06d:	e8 4a fd ff ff       	call   9dbc <_ZN2vk4raii7ContextD1Ev>
    a072:	48 89 d8             	mov    %rbx,%rax
    a075:	48 89 c7             	mov    %rax,%rdi
    a078:	e8 23 b3 ff ff       	call   53a0 <_Unwind_Resume@plt>
    a07d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a081:	c9                   	leave
    a082:	c3                   	ret
    a083:	90                   	nop

000000000000a084 <_ZN4rtvc9VulkanAppD1Ev>:
  ~VulkanApp() = default;
    a084:	55                   	push   %rbp
    a085:	48 89 e5             	mov    %rsp,%rbp
    a088:	48 83 ec 10          	sub    $0x10,%rsp
    a08c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a090:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a094:	48 05 f8 00 00 00    	add    $0xf8,%rax
    a09a:	48 89 c7             	mov    %rax,%rdi
    a09d:	e8 86 fd ff ff       	call   9e28 <_ZN4rtvc16SwapchainWrapperD1Ev>
    a0a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0a6:	48 05 e0 00 00 00    	add    $0xe0,%rax
    a0ac:	48 89 c7             	mov    %rax,%rdi
    a0af:	e8 d4 fb ff ff       	call   9c88 <_ZN2vk4raii14CommandBuffersD1Ev>
    a0b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0b8:	48 05 b8 00 00 00    	add    $0xb8,%rax
    a0be:	48 89 c7             	mov    %rax,%rdi
    a0c1:	e8 8a f5 ff ff       	call   9650 <_ZN2vk4raii11CommandPoolD1Ev>
    a0c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0ca:	48 83 c0 78          	add    $0x78,%rax
    a0ce:	48 89 c7             	mov    %rax,%rdi
    a0d1:	e8 12 fd ff ff       	call   9de8 <_ZN4rtvc13DeviceWrapperD1Ev>
    a0d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0da:	48 83 c0 58          	add    $0x58,%rax
    a0de:	48 89 c7             	mov    %rax,%rdi
    a0e1:	e8 52 f9 ff ff       	call   9a38 <_ZN2vk4raii10SurfaceKHRD1Ev>
    a0e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0ea:	48 83 c0 38          	add    $0x38,%rax
    a0ee:	48 89 c7             	mov    %rax,%rdi
    a0f1:	e8 d2 f7 ff ff       	call   98c8 <_ZN2vk4raii22DebugUtilsMessengerEXTD1Ev>
    a0f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0fa:	48 83 c0 20          	add    $0x20,%rax
    a0fe:	48 89 c7             	mov    %rax,%rdi
    a101:	e8 ce f2 ff ff       	call   93d4 <_ZN2vk4raii8InstanceD1Ev>
    a106:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a10a:	48 83 c0 18          	add    $0x18,%rax
    a10e:	48 89 c7             	mov    %rax,%rdi
    a111:	e8 76 fc ff ff       	call   9d8c <_ZN4rtvc6WindowD1Ev>
    a116:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a11a:	48 83 c0 10          	add    $0x10,%rax
    a11e:	48 89 c7             	mov    %rax,%rdi
    a121:	e8 fa fb ff ff       	call   9d20 <_ZN4rtvc4GLFWD1Ev>
    a126:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a12a:	48 89 c7             	mov    %rax,%rdi
    a12d:	e8 8a fc ff ff       	call   9dbc <_ZN2vk4raii7ContextD1Ev>
    a132:	90                   	nop
    a133:	c9                   	leave
    a134:	c3                   	ret

000000000000a135 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
    a135:	55                   	push   %rbp
    a136:	48 89 e5             	mov    %rsp,%rbp
    a139:	53                   	push   %rbx
    a13a:	48 83 ec 18          	sub    $0x18,%rsp
    a13e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a142:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
    a146:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a14a:	48 89 c6             	mov    %rax,%rsi
    a14d:	bf 01 00 00 00       	mov    $0x1,%edi
    a152:	e8 5d c0 ff ff       	call   61b4 <_ZnwmPv>
    a157:	48 89 c3             	mov    %rax,%rbx
    a15a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a15e:	48 89 c7             	mov    %rax,%rdi
    a161:	e8 f6 07 00 00       	call   a95c <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
    a166:	0f b6 00             	movzbl (%rax),%eax
    a169:	88 03                	mov    %al,(%rbx)
    a16b:	48 89 d8             	mov    %rbx,%rax
    a16e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a172:	c9                   	leave
    a173:	c3                   	ret

000000000000a174 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>:
    char_traits<_CharT>::
    a174:	55                   	push   %rbp
    a175:	48 89 e5             	mov    %rsp,%rbp
    a178:	48 83 ec 30          	sub    $0x30,%rsp
    a17c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a180:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a184:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__n == 0)
    a188:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    a18d:	75 09                	jne    a198 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x24>
	return __s1;
    a18f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a193:	e9 8b 00 00 00       	jmp    a223 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0xaf>
      if (std::__is_constant_evaluated())
    a198:	e8 01 c0 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    a19d:	84 c0                	test   %al,%al
    a19f:	74 67                	je     a208 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x94>
	  if (__s1 == __s2) // unlikely, but saves a lot of work
    a1a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    a1a9:	75 06                	jne    a1b1 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x3d>
	    return __s1;
    a1ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1af:	eb 72                	jmp    a223 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0xaf>
	  char_type* __tmp = new char_type[__n];
    a1b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a1b5:	48 89 c7             	mov    %rax,%rdi
    a1b8:	e8 73 ae ff ff       	call   5030 <_Znam@plt>
    a1bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  copy(__tmp, __s2, __n);
    a1c1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a1c5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    a1c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1cd:	48 89 ce             	mov    %rcx,%rsi
    a1d0:	48 89 c7             	mov    %rax,%rdi
    a1d3:	e8 4e 00 00 00       	call   a226 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
	  copy(__s1, __tmp, __n);
    a1d8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a1dc:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    a1e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1e4:	48 89 ce             	mov    %rcx,%rsi
    a1e7:	48 89 c7             	mov    %rax,%rdi
    a1ea:	e8 37 00 00 00       	call   a226 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
	  delete[] __tmp;
    a1ef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    a1f4:	74 0c                	je     a202 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x8e>
    a1f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1fa:	48 89 c7             	mov    %rax,%rdi
    a1fd:	e8 be b0 ff ff       	call   52c0 <_ZdaPv@plt>
	  return __s1;
    a202:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a206:	eb 1b                	jmp    a223 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0xaf>
      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));
    a208:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a20c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    a210:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a214:	48 89 ce             	mov    %rcx,%rsi
    a217:	48 89 c7             	mov    %rax,%rdi
    a21a:	e8 41 b1 ff ff       	call   5360 <memmove@plt>
      return __s1;
    a21f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
    a223:	c9                   	leave
    a224:	c3                   	ret
    a225:	90                   	nop

000000000000a226 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>:
    char_traits<_CharT>::
    a226:	55                   	push   %rbp
    a227:	48 89 e5             	mov    %rsp,%rbp
    a22a:	48 83 ec 30          	sub    $0x30,%rsp
    a22e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a232:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a236:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (std::__is_constant_evaluated())
    a23a:	e8 5f bf ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    a23f:	84 c0                	test   %al,%al
    a241:	74 40                	je     a283 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x5d>
	  for (std::size_t __i = 0; __i < __n; ++__i)
    a243:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    a24a:	00 
    a24b:	eb 26                	jmp    a273 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x4d>
	    std::construct_at(__s1 + __i, __s2[__i]);
    a24d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a255:	48 01 c2             	add    %rax,%rdx
    a258:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    a25c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a260:	48 01 c8             	add    %rcx,%rax
    a263:	48 89 d6             	mov    %rdx,%rsi
    a266:	48 89 c7             	mov    %rax,%rdi
    a269:	e8 c7 fe ff ff       	call   a135 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
    a26e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    a273:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a277:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    a27b:	72 d0                	jb     a24d <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x27>
	  return __s1;
    a27d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a281:	eb 21                	jmp    a2a4 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x7e>
      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
    a283:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a287:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a28b:	48 89 d1             	mov    %rdx,%rcx
    a28e:	48 89 c6             	mov    %rax,%rsi
    a291:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a295:	48 89 c2             	mov    %rax,%rdx
    a298:	48 89 cf             	mov    %rcx,%rdi
    a29b:	e8 00 af ff ff       	call   51a0 <memcpy@plt>
      return __s1;
    a2a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
    a2a4:	c9                   	leave
    a2a5:	c3                   	ret

000000000000a2a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
       *  This is a handle to internal data.  Do not modify or dire things may
       *  happen.
      */
      _GLIBCXX20_CONSTEXPR
      const _CharT*
      c_str() const _GLIBCXX_NOEXCEPT
    a2a6:	55                   	push   %rbp
    a2a7:	48 89 e5             	mov    %rsp,%rbp
    a2aa:	48 83 ec 10          	sub    $0x10,%rsp
    a2ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
    a2b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a2b6:	48 89 c7             	mov    %rax,%rdi
    a2b9:	e8 ac 06 00 00       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    a2be:	c9                   	leave
    a2bf:	c3                   	ret

000000000000a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
      ~basic_string()
    a2c0:	55                   	push   %rbp
    a2c1:	48 89 e5             	mov    %rsp,%rbp
    a2c4:	48 83 ec 10          	sub    $0x10,%rsp
    a2c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_dispose(); }
    a2cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a2d0:	48 89 c7             	mov    %rax,%rdi
    a2d3:	e8 da 06 00 00       	call   a9b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    a2d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a2dc:	48 89 c7             	mov    %rax,%rdi
    a2df:	e8 ec c3 ff ff       	call   66d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
    a2e4:	90                   	nop
    a2e5:	c9                   	leave
    a2e6:	c3                   	ret
    a2e7:	90                   	nop

000000000000a2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
      basic_string(basic_string&& __str) noexcept
    a2e8:	55                   	push   %rbp
    a2e9:	48 89 e5             	mov    %rsp,%rbp
    a2ec:	41 54                	push   %r12
    a2ee:	53                   	push   %rbx
    a2ef:	48 83 ec 10          	sub    $0x10,%rsp
    a2f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a2f7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
    a2fb:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a2ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a303:	48 89 c7             	mov    %rax,%rdi
    a306:	e8 e1 06 00 00       	call   a9ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    a30b:	48 89 c7             	mov    %rax,%rdi
    a30e:	e8 39 c5 ff ff       	call   684c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
    a313:	49 89 c4             	mov    %rax,%r12
    a316:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a31a:	48 89 c7             	mov    %rax,%rdi
    a31d:	e8 8a c4 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    a322:	4c 89 e2             	mov    %r12,%rdx
    a325:	48 89 c6             	mov    %rax,%rsi
    a328:	48 89 df             	mov    %rbx,%rdi
    a32b:	e8 dc c4 ff ff       	call   680c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
	if (__str._M_is_local())
    a330:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a334:	48 89 c7             	mov    %rax,%rdi
    a337:	e8 be 06 00 00       	call   a9fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
    a33c:	84 c0                	test   %al,%al
    a33e:	74 2d                	je     a36d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x85>
			      __str.length() + 1);
    a340:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a344:	48 89 c7             	mov    %rax,%rdi
    a347:	e8 ae 00 00 00       	call   a3fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    a34c:	48 8d 50 01          	lea    0x1(%rax),%rdx
    a350:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a354:	48 8d 48 10          	lea    0x10(%rax),%rcx
    a358:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a35c:	48 83 c0 10          	add    $0x10,%rax
    a360:	48 89 ce             	mov    %rcx,%rsi
    a363:	48 89 c7             	mov    %rax,%rdi
    a366:	e8 28 bf ff ff       	call   6293 <_ZNSt11char_traitsIcE4copyEPcPKcm>
    a36b:	eb 35                	jmp    a3a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0xba>
	    _M_data(__str._M_data());
    a36d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a371:	48 89 c7             	mov    %rax,%rdi
    a374:	e8 f1 05 00 00       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    a379:	48 89 c2             	mov    %rax,%rdx
    a37c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a380:	48 89 d6             	mov    %rdx,%rsi
    a383:	48 89 c7             	mov    %rax,%rdi
    a386:	e8 a3 06 00 00       	call   aa2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__str._M_allocated_capacity);
    a38b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a38f:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a393:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a397:	48 89 d6             	mov    %rdx,%rsi
    a39a:	48 89 c7             	mov    %rax,%rdi
    a39d:	e8 a6 06 00 00       	call   aa48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	_M_length(__str.length());
    a3a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a3a6:	48 89 c7             	mov    %rax,%rdi
    a3a9:	e8 4c 00 00 00       	call   a3fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
    a3ae:	48 89 c2             	mov    %rax,%rdx
    a3b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a3b5:	48 89 d6             	mov    %rdx,%rsi
    a3b8:	48 89 c7             	mov    %rax,%rdi
    a3bb:	e8 a4 06 00 00       	call   aa64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	__str._M_data(__str._M_local_data());
    a3c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a3c4:	48 89 c7             	mov    %rax,%rdi
    a3c7:	e8 e0 c3 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    a3cc:	48 89 c2             	mov    %rax,%rdx
    a3cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a3d3:	48 89 d6             	mov    %rdx,%rsi
    a3d6:	48 89 c7             	mov    %rax,%rdi
    a3d9:	e8 50 06 00 00       	call   aa2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	__str._M_set_length(0);
    a3de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a3e2:	be 00 00 00 00       	mov    $0x0,%esi
    a3e7:	48 89 c7             	mov    %rax,%rdi
    a3ea:	e8 07 01 00 00       	call   a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
    a3ef:	90                   	nop
    a3f0:	48 83 c4 10          	add    $0x10,%rsp
    a3f4:	5b                   	pop    %rbx
    a3f5:	41 5c                	pop    %r12
    a3f7:	5d                   	pop    %rbp
    a3f8:	c3                   	ret
    a3f9:	90                   	nop

000000000000a3fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
      length() const _GLIBCXX_NOEXCEPT
    a3fa:	55                   	push   %rbp
    a3fb:	48 89 e5             	mov    %rsp,%rbp
    a3fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
    a402:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a406:	48 8b 40 08          	mov    0x8(%rax),%rax
    a40a:	5d                   	pop    %rbp
    a40b:	c3                   	ret

000000000000a40c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
    a40c:	55                   	push   %rbp
    a40d:	48 89 e5             	mov    %rsp,%rbp
    a410:	48 83 ec 20          	sub    $0x20,%rsp
    a414:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a418:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a41c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }
    a420:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a424:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a428:	be 00 00 00 00       	mov    $0x0,%esi
    a42d:	48 89 c7             	mov    %rax,%rdi
    a430:	e8 51 08 00 00       	call   ac86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc>
    a435:	48 89 c7             	mov    %rax,%rdi
    a438:	e8 3a 08 00 00       	call   ac77 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
    a43d:	48 89 c2             	mov    %rax,%rdx
    a440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a444:	48 89 d6             	mov    %rdx,%rsi
    a447:	48 89 c7             	mov    %rax,%rdi
    a44a:	e8 99 fe ff ff       	call   a2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    a44f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a453:	c9                   	leave
    a454:	c3                   	ret
    a455:	90                   	nop

000000000000a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
    a456:	55                   	push   %rbp
    a457:	48 89 e5             	mov    %rsp,%rbp
    a45a:	53                   	push   %rbx
    a45b:	48 83 ec 38          	sub    $0x38,%rsp
    a45f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a463:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    a467:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      : _M_dataplus(_M_local_data(), __a)
    a46b:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    a46f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a473:	48 89 c7             	mov    %rax,%rdi
    a476:	e8 31 c3 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    a47b:	48 89 c1             	mov    %rax,%rcx
    a47e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a482:	48 89 c2             	mov    %rax,%rdx
    a485:	48 89 ce             	mov    %rcx,%rsi
    a488:	48 89 df             	mov    %rbx,%rdi
    a48b:	e8 ec 04 00 00       	call   a97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
    a490:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    a495:	75 0f                	jne    a4a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>
	  std::__throw_logic_error(__N("basic_string: "
    a497:	48 8d 05 32 e9 01 00 	lea    0x1e932(%rip),%rax        # 28dd0 <_ZNSt8__detailL19__atomic_spin_countE+0x36c>
    a49e:	48 89 c7             	mov    %rax,%rdi
    a4a1:	e8 9a ac ff ff       	call   5140 <_ZSt19__throw_logic_errorPKc@plt>
	const _CharT* __end = __s + traits_type::length(__s);
    a4a6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a4aa:	48 89 c7             	mov    %rax,%rdi
    a4ad:	e8 52 bd ff ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
    a4b2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a4b6:	48 01 d0             	add    %rdx,%rax
    a4b9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_construct(__s, __end, forward_iterator_tag());
    a4bd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a4c1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    a4c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a4c9:	48 89 ce             	mov    %rcx,%rsi
    a4cc:	48 89 c7             	mov    %rax,%rdi
    a4cf:	e8 f0 05 00 00       	call   aac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
    a4d4:	eb 1a                	jmp    a4f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x9a>
    a4d6:	48 89 c3             	mov    %rax,%rbx
    a4d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a4dd:	48 89 c7             	mov    %rax,%rdi
    a4e0:	e8 eb c1 ff ff       	call   66d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
    a4e5:	48 89 d8             	mov    %rbx,%rax
    a4e8:	48 89 c7             	mov    %rax,%rdi
    a4eb:	e8 b0 ae ff ff       	call   53a0 <_Unwind_Resume@plt>
    a4f0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a4f4:	c9                   	leave
    a4f5:	c3                   	ret

000000000000a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>:
      _M_set_length(size_type __n)
    a4f6:	55                   	push   %rbp
    a4f7:	48 89 e5             	mov    %rsp,%rbp
    a4fa:	48 83 ec 20          	sub    $0x20,%rsp
    a4fe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a502:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_length(__n);
    a506:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a50a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a50e:	48 89 d6             	mov    %rdx,%rsi
    a511:	48 89 c7             	mov    %rax,%rdi
    a514:	e8 4b 05 00 00       	call   aa64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	traits_type::assign(_M_data()[__n], _CharT());
    a519:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    a51d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a521:	48 89 c7             	mov    %rax,%rdi
    a524:	e8 41 04 00 00       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    a529:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a52d:	48 01 c2             	add    %rax,%rdx
    a530:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    a534:	48 89 c6             	mov    %rax,%rsi
    a537:	48 89 d7             	mov    %rdx,%rdi
    a53a:	e8 87 bc ff ff       	call   61c6 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
    a53f:	90                   	nop
    a540:	c9                   	leave
    a541:	c3                   	ret

000000000000a542 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
    a542:	55                   	push   %rbp
    a543:	48 89 e5             	mov    %rsp,%rbp
    a546:	48 83 ec 20          	sub    $0x20,%rsp
    a54a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a54e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a552:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
    a556:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a55a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a55e:	48 89 d6             	mov    %rdx,%rsi
    a561:	48 89 c7             	mov    %rax,%rdi
    a564:	e8 8b 06 00 00       	call   abf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
    a569:	48 89 c7             	mov    %rax,%rdi
    a56c:	e8 06 07 00 00       	call   ac77 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
    a571:	48 89 c2             	mov    %rax,%rdx
    a574:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a578:	48 89 d6             	mov    %rdx,%rsi
    a57b:	48 89 c7             	mov    %rax,%rdi
    a57e:	e8 65 fd ff ff       	call   a2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    a583:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a587:	c9                   	leave
    a588:	c3                   	ret
    a589:	90                   	nop

000000000000a58a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
    a58a:	55                   	push   %rbp
    a58b:	48 89 e5             	mov    %rsp,%rbp
    a58e:	48 83 ec 10          	sub    $0x10,%rsp
    a592:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->size() == 0; }
    a596:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a59a:	48 89 c7             	mov    %rax,%rdi
    a59d:	e8 54 bd ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    a5a2:	48 85 c0             	test   %rax,%rax
    a5a5:	0f 94 c0             	sete   %al
    a5a8:	c9                   	leave
    a5a9:	c3                   	ret

000000000000a5aa <_ZNK2vk13DynamicLoader14getProcAddressIPFPFvvEP12VkInstance_TPKcEEET_S7_>:

    template <typename T>
    T getProcAddress( const char * function ) const VULKAN_HPP_NOEXCEPT
    a5aa:	55                   	push   %rbp
    a5ab:	48 89 e5             	mov    %rsp,%rbp
    a5ae:	48 83 ec 10          	sub    $0x10,%rsp
    a5b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
#  if defined( __unix__ ) || defined( __APPLE__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
      return (T)dlsym( m_library, function );
    a5ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a5be:	48 8b 00             	mov    (%rax),%rax
    a5c1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a5c5:	48 89 d6             	mov    %rdx,%rsi
    a5c8:	48 89 c7             	mov    %rax,%rdi
    a5cb:	e8 10 ac ff ff       	call   51e0 <dlsym@plt>
#  elif defined( _WIN32 )
      return ( T )::GetProcAddress( m_library, function );
#  else
#    error unsupported platform
#  endif
    }
    a5d0:	c9                   	leave
    a5d1:	c3                   	ret

000000000000a5d2 <_ZNSt15__uniq_ptr_dataIN2vk4raii17ContextDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
    a5d2:	55                   	push   %rbp
    a5d3:	48 89 e5             	mov    %rsp,%rbp
    a5d6:	48 83 ec 10          	sub    $0x10,%rsp
    a5da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a5e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a5e6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a5ea:	48 89 d6             	mov    %rdx,%rsi
    a5ed:	48 89 c7             	mov    %rax,%rdi
    a5f0:	e8 35 07 00 00       	call   ad2a <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1EPS2_>
    a5f5:	90                   	nop
    a5f6:	c9                   	leave
    a5f7:	c3                   	ret

000000000000a5f8 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1IS4_vEEPS2_>:
       * The deleter will be value-initialized.
       */
      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
	_GLIBCXX23_CONSTEXPR
	explicit
	unique_ptr(pointer __p) noexcept
    a5f8:	55                   	push   %rbp
    a5f9:	48 89 e5             	mov    %rsp,%rbp
    a5fc:	48 83 ec 10          	sub    $0x10,%rsp
    a600:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a604:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_t(__p)
    a608:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a60c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a610:	48 89 d6             	mov    %rdx,%rsi
    a613:	48 89 c7             	mov    %rax,%rdi
    a616:	e8 b7 ff ff ff       	call   a5d2 <_ZNSt15__uniq_ptr_dataIN2vk4raii17ContextDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>
        { }
    a61b:	90                   	nop
    a61c:	c9                   	leave
    a61d:	c3                   	ret

000000000000a61e <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EED1Ev>:

      /// Destructor, invokes the deleter if the stored pointer is not null.
#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~unique_ptr() noexcept
    a61e:	55                   	push   %rbp
    a61f:	48 89 e5             	mov    %rsp,%rbp
    a622:	53                   	push   %rbx
    a623:	48 83 ec 28          	sub    $0x28,%rsp
    a627:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
    a62b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a62f:	48 89 c7             	mov    %rax,%rdi
    a632:	e8 2b 07 00 00       	call   ad62 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a637:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
    a63b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a63f:	48 8b 00             	mov    (%rax),%rax
    a642:	48 85 c0             	test   %rax,%rax
    a645:	74 29                	je     a670 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EED1Ev+0x52>
	  get_deleter()(std::move(__ptr));
    a647:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a64b:	48 89 c7             	mov    %rax,%rdi
    a64e:	e8 29 07 00 00       	call   ad7c <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE11get_deleterEv>
    a653:	48 89 c3             	mov    %rax,%rbx
    a656:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a65a:	48 89 c7             	mov    %rax,%rdi
    a65d:	e8 34 07 00 00       	call   ad96 <_ZSt4moveIRPN2vk4raii17ContextDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a662:	48 8b 00             	mov    (%rax),%rax
    a665:	48 89 c6             	mov    %rax,%rsi
    a668:	48 89 df             	mov    %rbx,%rdi
    a66b:	e8 34 07 00 00       	call   ada4 <_ZNKSt14default_deleteIN2vk4raii17ContextDispatcherEEclEPS2_>
	__ptr = pointer();
    a670:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a674:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
    a67b:	90                   	nop
    a67c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a680:	c9                   	leave
    a681:	c3                   	ret

000000000000a682 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev>:
      ~unique_ptr() noexcept
    a682:	55                   	push   %rbp
    a683:	48 89 e5             	mov    %rsp,%rbp
    a686:	53                   	push   %rbx
    a687:	48 83 ec 28          	sub    $0x28,%rsp
    a68b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	auto& __ptr = _M_t._M_ptr();
    a68f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a693:	48 89 c7             	mov    %rax,%rdi
    a696:	e8 33 07 00 00       	call   adce <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a69b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
    a69f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a6a3:	48 8b 00             	mov    (%rax),%rax
    a6a6:	48 85 c0             	test   %rax,%rax
    a6a9:	74 29                	je     a6d4 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev+0x52>
	  get_deleter()(std::move(__ptr));
    a6ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a6af:	48 89 c7             	mov    %rax,%rdi
    a6b2:	e8 31 07 00 00       	call   ade8 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE11get_deleterEv>
    a6b7:	48 89 c3             	mov    %rax,%rbx
    a6ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a6be:	48 89 c7             	mov    %rax,%rdi
    a6c1:	e8 3c 07 00 00       	call   ae02 <_ZSt4moveIRPN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a6c6:	48 8b 00             	mov    (%rax),%rax
    a6c9:	48 89 c6             	mov    %rax,%rsi
    a6cc:	48 89 df             	mov    %rbx,%rdi
    a6cf:	e8 3c 07 00 00       	call   ae10 <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_>
	__ptr = pointer();
    a6d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a6d8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
    a6df:	90                   	nop
    a6e0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a6e4:	c9                   	leave
    a6e5:	c3                   	ret

000000000000a6e6 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
    a6e6:	55                   	push   %rbp
    a6e7:	48 89 e5             	mov    %rsp,%rbp
    a6ea:	53                   	push   %rbx
    a6eb:	48 83 ec 18          	sub    $0x18,%rsp
    a6ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a6f3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
    a6f7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a6fb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    a6ff:	48 89 c7             	mov    %rax,%rdi
    a702:	e8 fb 06 00 00       	call   ae02 <_ZSt4moveIRPN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a707:	48 8b 00             	mov    (%rax),%rax
    a70a:	48 89 c6             	mov    %rax,%rsi
    a70d:	48 89 df             	mov    %rbx,%rdi
    a710:	e8 25 07 00 00       	call   ae3a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
    a715:	90                   	nop
    a716:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a71a:	c9                   	leave
    a71b:	c3                   	ret

000000000000a71c <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEaSEDn>:
      operator=(nullptr_t) noexcept
    a71c:	55                   	push   %rbp
    a71d:	48 89 e5             	mov    %rsp,%rbp
    a720:	48 83 ec 10          	sub    $0x10,%rsp
    a724:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a728:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	reset();
    a72c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a730:	be 00 00 00 00       	mov    $0x0,%esi
    a735:	48 89 c7             	mov    %rax,%rdi
    a738:	e8 a9 ff ff ff       	call   a6e6 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
	return *this;
    a73d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    a741:	c9                   	leave
    a742:	c3                   	ret
    a743:	90                   	nop

000000000000a744 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
    a744:	55                   	push   %rbp
    a745:	48 89 e5             	mov    %rsp,%rbp
    a748:	48 83 ec 10          	sub    $0x10,%rsp
    a74c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return get();
    a750:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a754:	48 89 c7             	mov    %rax,%rdi
    a757:	e8 42 07 00 00       	call   ae9e <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a75c:	c9                   	leave
    a75d:	c3                   	ret

000000000000a75e <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
    a75e:	55                   	push   %rbp
    a75f:	48 89 e5             	mov    %rsp,%rbp
    a762:	48 83 ec 10          	sub    $0x10,%rsp
    a766:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(get() != pointer());
    a76a:	e8 2f ba ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    a76f:	84 c0                	test   %al,%al
    a771:	74 18                	je     a78b <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a773:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a777:	48 89 c7             	mov    %rax,%rdi
    a77a:	e8 1f 07 00 00       	call   ae9e <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>
    a77f:	48 85 c0             	test   %rax,%rax
    a782:	75 07                	jne    a78b <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a784:	b8 01 00 00 00       	mov    $0x1,%eax
    a789:	eb 05                	jmp    a790 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv+0x32>
    a78b:	b8 00 00 00 00       	mov    $0x0,%eax
    a790:	84 c0                	test   %al,%al
	return *get();
    a792:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a796:	48 89 c7             	mov    %rax,%rdi
    a799:	e8 00 07 00 00       	call   ae9e <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a79e:	c9                   	leave
    a79f:	c3                   	ret

000000000000a7a0 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev>:
      ~unique_ptr() noexcept
    a7a0:	55                   	push   %rbp
    a7a1:	48 89 e5             	mov    %rsp,%rbp
    a7a4:	53                   	push   %rbx
    a7a5:	48 83 ec 28          	sub    $0x28,%rsp
    a7a9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	auto& __ptr = _M_t._M_ptr();
    a7ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a7b1:	48 89 c7             	mov    %rax,%rdi
    a7b4:	e8 ff 06 00 00       	call   aeb8 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a7b9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
    a7bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7c1:	48 8b 00             	mov    (%rax),%rax
    a7c4:	48 85 c0             	test   %rax,%rax
    a7c7:	74 29                	je     a7f2 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev+0x52>
	  get_deleter()(std::move(__ptr));
    a7c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a7cd:	48 89 c7             	mov    %rax,%rdi
    a7d0:	e8 fd 06 00 00       	call   aed2 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE11get_deleterEv>
    a7d5:	48 89 c3             	mov    %rax,%rbx
    a7d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7dc:	48 89 c7             	mov    %rax,%rdi
    a7df:	e8 08 07 00 00       	call   aeec <_ZSt4moveIRPN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a7e4:	48 8b 00             	mov    (%rax),%rax
    a7e7:	48 89 c6             	mov    %rax,%rsi
    a7ea:	48 89 df             	mov    %rbx,%rdi
    a7ed:	e8 08 07 00 00       	call   aefa <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_>
	__ptr = pointer();
    a7f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7f6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
    a7fd:	90                   	nop
    a7fe:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a802:	c9                   	leave
    a803:	c3                   	ret

000000000000a804 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
      reset(pointer __p = pointer()) noexcept
    a804:	55                   	push   %rbp
    a805:	48 89 e5             	mov    %rsp,%rbp
    a808:	53                   	push   %rbx
    a809:	48 83 ec 18          	sub    $0x18,%rsp
    a80d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a811:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_t.reset(std::move(__p));
    a815:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a819:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    a81d:	48 89 c7             	mov    %rax,%rdi
    a820:	e8 c7 06 00 00       	call   aeec <_ZSt4moveIRPN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a825:	48 8b 00             	mov    (%rax),%rax
    a828:	48 89 c6             	mov    %rax,%rsi
    a82b:	48 89 df             	mov    %rbx,%rdi
    a82e:	e8 f1 06 00 00       	call   af24 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
    a833:	90                   	nop
    a834:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a838:	c9                   	leave
    a839:	c3                   	ret

000000000000a83a <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEaSEDn>:
      operator=(nullptr_t) noexcept
    a83a:	55                   	push   %rbp
    a83b:	48 89 e5             	mov    %rsp,%rbp
    a83e:	48 83 ec 10          	sub    $0x10,%rsp
    a842:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a846:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	reset();
    a84a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a84e:	be 00 00 00 00       	mov    $0x0,%esi
    a853:	48 89 c7             	mov    %rax,%rdi
    a856:	e8 a9 ff ff ff       	call   a804 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
	return *this;
    a85b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    a85f:	c9                   	leave
    a860:	c3                   	ret
    a861:	90                   	nop

000000000000a862 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
    a862:	55                   	push   %rbp
    a863:	48 89 e5             	mov    %rsp,%rbp
    a866:	48 83 ec 10          	sub    $0x10,%rsp
    a86a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return get();
    a86e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a872:	48 89 c7             	mov    %rax,%rdi
    a875:	e8 0e 07 00 00       	call   af88 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a87a:	c9                   	leave
    a87b:	c3                   	ret

000000000000a87c <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
    a87c:	55                   	push   %rbp
    a87d:	48 89 e5             	mov    %rsp,%rbp
    a880:	48 83 ec 10          	sub    $0x10,%rsp
    a884:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(get() != pointer());
    a888:	e8 11 b9 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    a88d:	84 c0                	test   %al,%al
    a88f:	74 18                	je     a8a9 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a891:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a895:	48 89 c7             	mov    %rax,%rdi
    a898:	e8 eb 06 00 00       	call   af88 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>
    a89d:	48 85 c0             	test   %rax,%rax
    a8a0:	75 07                	jne    a8a9 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a8a2:	b8 01 00 00 00       	mov    $0x1,%eax
    a8a7:	eb 05                	jmp    a8ae <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv+0x32>
    a8a9:	b8 00 00 00 00       	mov    $0x0,%eax
    a8ae:	84 c0                	test   %al,%al
	return *get();
    a8b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8b4:	48 89 c7             	mov    %rax,%rdi
    a8b7:	e8 cc 06 00 00       	call   af88 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a8bc:	c9                   	leave
    a8bd:	c3                   	ret

000000000000a8be <_ZNSaIN2vk4raii13CommandBufferEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
    a8be:	55                   	push   %rbp
    a8bf:	48 89 e5             	mov    %rsp,%rbp
    a8c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a8c6:	90                   	nop
    a8c7:	5d                   	pop    %rbp
    a8c8:	c3                   	ret
    a8c9:	90                   	nop

000000000000a8ca <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EED1Ev>:
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      _GLIBCXX20_CONSTEXPR
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    a8ca:	55                   	push   %rbp
    a8cb:	48 89 e5             	mov    %rsp,%rbp
    a8ce:	48 83 ec 10          	sub    $0x10,%rsp
    a8d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	_M_deallocate(_M_impl._M_start,
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    a8d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8da:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a8de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8e2:	48 8b 00             	mov    (%rax),%rax
    a8e5:	48 29 c2             	sub    %rax,%rdx
    a8e8:	48 89 d0             	mov    %rdx,%rax
    a8eb:	48 c1 f8 05          	sar    $0x5,%rax
	_M_deallocate(_M_impl._M_start,
    a8ef:	48 89 c2             	mov    %rax,%rdx
    a8f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8f6:	48 8b 08             	mov    (%rax),%rcx
    a8f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8fd:	48 89 ce             	mov    %rcx,%rsi
    a900:	48 89 c7             	mov    %rax,%rdi
    a903:	e8 9a 06 00 00       	call   afa2 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE13_M_deallocateEPS2_m>
      }
    a908:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a90c:	48 89 c7             	mov    %rax,%rdi
    a90f:	e8 98 ef ff ff       	call   98ac <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE12_Vector_implD1Ev>
    a914:	90                   	nop
    a915:	c9                   	leave
    a916:	c3                   	ret
    a917:	90                   	nop

000000000000a918 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
    a918:	55                   	push   %rbp
    a919:	48 89 e5             	mov    %rsp,%rbp
    a91c:	48 83 ec 10          	sub    $0x10,%rsp
    a920:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
    a924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a928:	48 89 c7             	mov    %rax,%rdi
    a92b:	e8 a8 06 00 00       	call   afd8 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE19_M_get_Tp_allocatorEv>
    a930:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    a933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a937:	48 8b 48 08          	mov    0x8(%rax),%rcx
    a93b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a93f:	48 8b 00             	mov    (%rax),%rax
    a942:	48 89 ce             	mov    %rcx,%rsi
    a945:	48 89 c7             	mov    %rax,%rdi
    a948:	e8 99 06 00 00       	call   afe6 <_ZSt8_DestroyIPN2vk4raii13CommandBufferES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
    a94d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a951:	48 89 c7             	mov    %rax,%rdi
    a954:	e8 71 ff ff ff       	call   a8ca <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EED1Ev>
    a959:	90                   	nop
    a95a:	c9                   	leave
    a95b:	c3                   	ret

000000000000a95c <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    a95c:	55                   	push   %rbp
    a95d:	48 89 e5             	mov    %rsp,%rbp
    a960:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    a964:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a968:	5d                   	pop    %rbp
    a969:	c3                   	ret

000000000000a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
    a96a:	55                   	push   %rbp
    a96b:	48 89 e5             	mov    %rsp,%rbp
    a96e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus._M_p; }
    a972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a976:	48 8b 00             	mov    (%rax),%rax
    a979:	5d                   	pop    %rbp
    a97a:	c3                   	ret
    a97b:	90                   	nop

000000000000a97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
    a97c:	55                   	push   %rbp
    a97d:	48 89 e5             	mov    %rsp,%rbp
    a980:	48 83 ec 20          	sub    $0x20,%rsp
    a984:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a988:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a98c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: allocator_type(__a), _M_p(__dat) { }
    a990:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a994:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a998:	48 89 d6             	mov    %rdx,%rsi
    a99b:	48 89 c7             	mov    %rax,%rdi
    a99e:	e8 5d a9 ff ff       	call   5300 <_ZNSaIcEC2ERKS_@plt>
    a9a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9a7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a9ab:	48 89 10             	mov    %rdx,(%rax)
    a9ae:	90                   	nop
    a9af:	c9                   	leave
    a9b0:	c3                   	ret
    a9b1:	90                   	nop

000000000000a9b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
    a9b2:	55                   	push   %rbp
    a9b3:	48 89 e5             	mov    %rsp,%rbp
    a9b6:	48 83 ec 10          	sub    $0x10,%rsp
    a9ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (!_M_is_local())
    a9be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9c2:	48 89 c7             	mov    %rax,%rdi
    a9c5:	e8 30 00 00 00       	call   a9fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
    a9ca:	83 f0 01             	xor    $0x1,%eax
    a9cd:	84 c0                	test   %al,%al
    a9cf:	74 17                	je     a9e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x36>
	  _M_destroy(_M_allocated_capacity);
    a9d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a9d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9dd:	48 89 d6             	mov    %rdx,%rsi
    a9e0:	48 89 c7             	mov    %rax,%rdi
    a9e3:	e8 f0 06 00 00       	call   b0d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
      }
    a9e8:	90                   	nop
    a9e9:	c9                   	leave
    a9ea:	c3                   	ret
    a9eb:	90                   	nop

000000000000a9ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
    a9ec:	55                   	push   %rbp
    a9ed:	48 89 e5             	mov    %rsp,%rbp
    a9f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
    a9f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9f8:	5d                   	pop    %rbp
    a9f9:	c3                   	ret

000000000000a9fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
    a9fa:	55                   	push   %rbp
    a9fb:	48 89 e5             	mov    %rsp,%rbp
    a9fe:	53                   	push   %rbx
    a9ff:	48 83 ec 18          	sub    $0x18,%rsp
    aa03:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return _M_data() == _M_local_data(); }
    aa07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aa0b:	48 89 c7             	mov    %rax,%rdi
    aa0e:	e8 57 ff ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    aa13:	48 89 c3             	mov    %rax,%rbx
    aa16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aa1a:	48 89 c7             	mov    %rax,%rdi
    aa1d:	e8 04 07 00 00       	call   b126 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    aa22:	48 39 c3             	cmp    %rax,%rbx
    aa25:	0f 94 c0             	sete   %al
    aa28:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    aa2c:	c9                   	leave
    aa2d:	c3                   	ret

000000000000aa2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
    aa2e:	55                   	push   %rbp
    aa2f:	48 89 e5             	mov    %rsp,%rbp
    aa32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa36:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_dataplus._M_p = __p; }
    aa3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa3e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    aa42:	48 89 10             	mov    %rdx,(%rax)
    aa45:	90                   	nop
    aa46:	5d                   	pop    %rbp
    aa47:	c3                   	ret

000000000000aa48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>:
      _M_capacity(size_type __capacity)
    aa48:	55                   	push   %rbp
    aa49:	48 89 e5             	mov    %rsp,%rbp
    aa4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa50:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_allocated_capacity = __capacity; }
    aa54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa58:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    aa5c:	48 89 50 10          	mov    %rdx,0x10(%rax)
    aa60:	90                   	nop
    aa61:	5d                   	pop    %rbp
    aa62:	c3                   	ret
    aa63:	90                   	nop

000000000000aa64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>:
      _M_length(size_type __length)
    aa64:	55                   	push   %rbp
    aa65:	48 89 e5             	mov    %rsp,%rbp
    aa68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_string_length = __length; }
    aa70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa74:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    aa78:	48 89 50 08          	mov    %rdx,0x8(%rax)
    aa7c:	90                   	nop
    aa7d:	5d                   	pop    %rbp
    aa7e:	c3                   	ret
    aa7f:	90                   	nop

000000000000aa80 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
    aa80:	55                   	push   %rbp
    aa81:	48 89 e5             	mov    %rsp,%rbp
    aa84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aa8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa90:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    aa94:	48 89 10             	mov    %rdx,(%rax)
    aa97:	90                   	nop
    aa98:	5d                   	pop    %rbp
    aa99:	c3                   	ret

000000000000aa9a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
    aa9a:	55                   	push   %rbp
    aa9b:	48 89 e5             	mov    %rsp,%rbp
    aa9e:	48 83 ec 10          	sub    $0x10,%rsp
    aaa2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aaa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aaaa:	48 8b 00             	mov    (%rax),%rax
    aaad:	48 85 c0             	test   %rax,%rax
    aab0:	74 0f                	je     aac1 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x27>
    aab2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aab6:	48 8b 00             	mov    (%rax),%rax
    aab9:	48 89 c7             	mov    %rax,%rdi
    aabc:	e8 f1 fe ff ff       	call   a9b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    aac1:	90                   	nop
    aac2:	c9                   	leave
    aac3:	c3                   	ret

000000000000aac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
    aac4:	55                   	push   %rbp
    aac5:	48 89 e5             	mov    %rsp,%rbp
    aac8:	48 83 ec 60          	sub    $0x60,%rsp
    aacc:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    aad0:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    aad4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    aad8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    aadc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    aae0:	48 89 d6             	mov    %rdx,%rsi
    aae3:	48 89 c7             	mov    %rax,%rdi
    aae6:	e8 59 06 00 00       	call   b144 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
    aaeb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	if (__dnew > size_type(_S_local_capacity))
    aaef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    aaf3:	48 83 f8 0f          	cmp    $0xf,%rax
    aaf7:	76 3f                	jbe    ab38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x74>
	    _M_data(_M_create(__dnew, size_type(0)));
    aaf9:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    aafd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    ab01:	ba 00 00 00 00       	mov    $0x0,%edx
    ab06:	48 89 ce             	mov    %rcx,%rsi
    ab09:	48 89 c7             	mov    %rax,%rdi
    ab0c:	e8 ff 04 00 00       	call   b010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
    ab11:	48 89 c2             	mov    %rax,%rdx
    ab14:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    ab18:	48 89 d6             	mov    %rdx,%rsi
    ab1b:	48 89 c7             	mov    %rax,%rdi
    ab1e:	e8 0b ff ff ff       	call   aa2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
    ab23:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ab27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    ab2b:	48 89 d6             	mov    %rdx,%rsi
    ab2e:	48 89 c7             	mov    %rax,%rdi
    ab31:	e8 12 ff ff ff       	call   aa48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
    ab36:	eb 5e                	jmp    ab96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xd2>
    ab38:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    ab3c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (std::is_constant_evaluated())
    ab40:	e8 64 b6 ff ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
    ab45:	84 c0                	test   %al,%al
    ab47:	74 40                	je     ab89 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc5>
	  for (_CharT& __c : _M_local_buf)
    ab49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab4d:	48 83 c0 10          	add    $0x10,%rax
    ab51:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ab55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ab59:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ab5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ab61:	48 83 c0 10          	add    $0x10,%rax
    ab65:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ab69:	eb 14                	jmp    ab7f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xbb>
    ab6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab6f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	    __c = _CharT();
    ab73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ab77:	c6 00 00             	movb   $0x0,(%rax)
	  for (_CharT& __c : _M_local_buf)
    ab7a:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    ab7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab83:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    ab87:	75 e2                	jne    ab6b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xa7>
	return _M_local_data();
    ab89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab8d:	48 89 c7             	mov    %rax,%rdi
    ab90:	e8 17 bc ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    ab95:	90                   	nop

	  basic_string* _M_guarded;
	} __guard(this);
    ab96:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    ab9a:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    ab9e:	48 89 d6             	mov    %rdx,%rsi
    aba1:	48 89 c7             	mov    %rax,%rdi
    aba4:	e8 d7 fe ff ff       	call   aa80 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
    aba9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    abad:	48 89 c7             	mov    %rax,%rdi
    abb0:	e8 b5 fd ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    abb5:	48 89 c1             	mov    %rax,%rcx
    abb8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    abbc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    abc0:	48 89 c6             	mov    %rax,%rsi
    abc3:	48 89 cf             	mov    %rcx,%rdi
    abc6:	e8 aa 05 00 00       	call   b175 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
    abcb:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    abd2:	00 

	_M_set_length(__dnew);
    abd3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    abd7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    abdb:	48 89 d6             	mov    %rdx,%rsi
    abde:	48 89 c7             	mov    %rax,%rdi
    abe1:	e8 10 f9 ff ff       	call   a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
    abe6:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    abea:	48 89 c7             	mov    %rax,%rdi
    abed:	e8 a8 fe ff ff       	call   aa9a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
    abf2:	c9                   	leave
    abf3:	c3                   	ret

000000000000abf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
      append(const _CharT* __s)
    abf4:	55                   	push   %rbp
    abf5:	48 89 e5             	mov    %rsp,%rbp
    abf8:	48 83 ec 20          	sub    $0x20,%rsp
    abfc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ac00:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const size_type __n = traits_type::length(__s);
    ac04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ac08:	48 89 c7             	mov    %rax,%rdi
    ac0b:	e8 f4 b5 ff ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
    ac10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	_M_check_length(size_type(0), __n, "basic_string::append");
    ac14:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ac18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac1c:	48 8d 0d df e1 01 00 	lea    0x1e1df(%rip),%rcx        # 28e02 <_ZNSt8__detailL19__atomic_spin_countE+0x39e>
    ac23:	be 00 00 00 00       	mov    $0x0,%esi
    ac28:	48 89 c7             	mov    %rax,%rdi
    ac2b:	e8 88 05 00 00       	call   b1b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>
	return _M_append(__s, __n);
    ac30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ac34:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    ac38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac3c:	48 89 ce             	mov    %rcx,%rsi
    ac3f:	48 89 c7             	mov    %rax,%rdi
    ac42:	e8 cf 05 00 00       	call   b216 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>
      }
    ac47:	c9                   	leave
    ac48:	c3                   	ret
    ac49:	90                   	nop

000000000000ac4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
    ac4a:	55                   	push   %rbp
    ac4b:	48 89 e5             	mov    %rsp,%rbp
    ac4e:	48 83 ec 10          	sub    $0x10,%rsp
    ac52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _M_is_local() ? size_type(_S_local_capacity)
    ac56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac5a:	48 89 c7             	mov    %rax,%rdi
    ac5d:	e8 98 fd ff ff       	call   a9fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
    ac62:	84 c0                	test   %al,%al
    ac64:	74 07                	je     ac6d <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x23>
    ac66:	b8 0f 00 00 00       	mov    $0xf,%eax
	                     : _M_allocated_capacity;
    ac6b:	eb 08                	jmp    ac75 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x2b>
	return _M_is_local() ? size_type(_S_local_capacity)
    ac6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac71:	48 8b 40 10          	mov    0x10(%rax),%rax
      }
    ac75:	c9                   	leave
    ac76:	c3                   	ret

000000000000ac77 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
    ac77:	55                   	push   %rbp
    ac78:	48 89 e5             	mov    %rsp,%rbp
    ac7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    ac7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac83:	5d                   	pop    %rbp
    ac84:	c3                   	ret
    ac85:	90                   	nop

000000000000ac86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc>:
      insert(size_type __pos, const _CharT* __s)
    ac86:	55                   	push   %rbp
    ac87:	48 89 e5             	mov    %rsp,%rbp
    ac8a:	48 83 ec 20          	sub    $0x20,%rsp
    ac8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ac96:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	return this->replace(__pos, size_type(0), __s,
    ac9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac9e:	48 89 c7             	mov    %rax,%rdi
    aca1:	e8 5e b5 ff ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
    aca6:	48 89 c1             	mov    %rax,%rcx
    aca9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    acad:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    acb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acb5:	49 89 c8             	mov    %rcx,%r8
    acb8:	48 89 d1             	mov    %rdx,%rcx
    acbb:	ba 00 00 00 00       	mov    $0x0,%edx
    acc0:	48 89 c7             	mov    %rax,%rdi
    acc3:	e8 18 06 00 00       	call   b2e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm>
      }
    acc8:	c9                   	leave
    acc9:	c3                   	ret

000000000000acca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>:
      _M_check(size_type __pos, const char* __s) const
    acca:	55                   	push   %rbp
    accb:	48 89 e5             	mov    %rsp,%rbp
    acce:	48 83 ec 20          	sub    $0x20,%rsp
    acd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    acd6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    acda:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__pos > this->size())
    acde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ace2:	48 89 c7             	mov    %rax,%rdi
    ace5:	e8 0c b6 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    acea:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    acee:	0f 92 c0             	setb   %al
    acf1:	84 c0                	test   %al,%al
    acf3:	74 2e                	je     ad23 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc+0x59>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    acf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acf9:	48 89 c7             	mov    %rax,%rdi
    acfc:	e8 f5 b5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    ad01:	48 89 c1             	mov    %rax,%rcx
    ad04:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ad08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ad0c:	48 89 c6             	mov    %rax,%rsi
    ad0f:	48 8d 05 02 e1 01 00 	lea    0x1e102(%rip),%rax        # 28e18 <_ZNSt8__detailL19__atomic_spin_countE+0x3b4>
    ad16:	48 89 c7             	mov    %rax,%rdi
    ad19:	b8 00 00 00 00       	mov    $0x0,%eax
    ad1e:	e8 fd a5 ff ff       	call   5320 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
	return __pos;
    ad23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
    ad27:	c9                   	leave
    ad28:	c3                   	ret
    ad29:	90                   	nop

000000000000ad2a <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1EPS2_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    ad2a:	55                   	push   %rbp
    ad2b:	48 89 e5             	mov    %rsp,%rbp
    ad2e:	53                   	push   %rbx
    ad2f:	48 83 ec 18          	sub    $0x18,%rsp
    ad33:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ad37:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ad3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ad3f:	48 89 c7             	mov    %rax,%rdi
    ad42:	e8 5d 06 00 00       	call   b3a4 <_ZNSt5tupleIJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
    ad47:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
    ad4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ad4f:	48 89 c7             	mov    %rax,%rdi
    ad52:	e8 0b 00 00 00       	call   ad62 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    ad57:	48 89 18             	mov    %rbx,(%rax)
    ad5a:	90                   	nop
    ad5b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ad5f:	c9                   	leave
    ad60:	c3                   	ret
    ad61:	90                   	nop

000000000000ad62 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
    ad62:	55                   	push   %rbp
    ad63:	48 89 e5             	mov    %rsp,%rbp
    ad66:	48 83 ec 10          	sub    $0x10,%rsp
    ad6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad72:	48 89 c7             	mov    %rax,%rdi
    ad75:	e8 45 06 00 00       	call   b3bf <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    ad7a:	c9                   	leave
    ad7b:	c3                   	ret

000000000000ad7c <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE11get_deleterEv>:
      get_deleter() noexcept
    ad7c:	55                   	push   %rbp
    ad7d:	48 89 e5             	mov    %rsp,%rbp
    ad80:	48 83 ec 10          	sub    $0x10,%rsp
    ad84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
    ad88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad8c:	48 89 c7             	mov    %rax,%rdi
    ad8f:	e8 46 06 00 00       	call   b3da <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    ad94:	c9                   	leave
    ad95:	c3                   	ret

000000000000ad96 <_ZSt4moveIRPN2vk4raii17ContextDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
    ad96:	55                   	push   %rbp
    ad97:	48 89 e5             	mov    %rsp,%rbp
    ad9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    ad9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ada2:	5d                   	pop    %rbp
    ada3:	c3                   	ret

000000000000ada4 <_ZNKSt14default_deleteIN2vk4raii17ContextDispatcherEEclEPS2_>:
      operator()(_Tp* __ptr) const
    ada4:	55                   	push   %rbp
    ada5:	48 89 e5             	mov    %rsp,%rbp
    ada8:	48 83 ec 10          	sub    $0x10,%rsp
    adac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    adb0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
    adb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    adb8:	48 85 c0             	test   %rax,%rax
    adbb:	74 0d                	je     adca <_ZNKSt14default_deleteIN2vk4raii17ContextDispatcherEEclEPS2_+0x26>
    adbd:	be 38 00 00 00       	mov    $0x38,%esi
    adc2:	48 89 c7             	mov    %rax,%rdi
    adc5:	e8 66 a4 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    adca:	90                   	nop
    adcb:	c9                   	leave
    adcc:	c3                   	ret
    adcd:	90                   	nop

000000000000adce <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
    adce:	55                   	push   %rbp
    adcf:	48 89 e5             	mov    %rsp,%rbp
    add2:	48 83 ec 10          	sub    $0x10,%rsp
    add6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    adda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adde:	48 89 c7             	mov    %rax,%rdi
    ade1:	e8 0e 06 00 00       	call   b3f4 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    ade6:	c9                   	leave
    ade7:	c3                   	ret

000000000000ade8 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE11get_deleterEv>:
      get_deleter() noexcept
    ade8:	55                   	push   %rbp
    ade9:	48 89 e5             	mov    %rsp,%rbp
    adec:	48 83 ec 10          	sub    $0x10,%rsp
    adf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
    adf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adf8:	48 89 c7             	mov    %rax,%rdi
    adfb:	e8 0e 06 00 00       	call   b40e <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    ae00:	c9                   	leave
    ae01:	c3                   	ret

000000000000ae02 <_ZSt4moveIRPN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
    ae02:	55                   	push   %rbp
    ae03:	48 89 e5             	mov    %rsp,%rbp
    ae06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    ae0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae0e:	5d                   	pop    %rbp
    ae0f:	c3                   	ret

000000000000ae10 <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_>:
      operator()(_Tp* __ptr) const
    ae10:	55                   	push   %rbp
    ae11:	48 89 e5             	mov    %rsp,%rbp
    ae14:	48 83 ec 10          	sub    $0x10,%rsp
    ae18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ae1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
    ae20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ae24:	48 85 c0             	test   %rax,%rax
    ae27:	74 0d                	je     ae36 <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_+0x26>
    ae29:	be 48 03 00 00       	mov    $0x348,%esi
    ae2e:	48 89 c7             	mov    %rax,%rdi
    ae31:	e8 fa a3 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    ae36:	90                   	nop
    ae37:	c9                   	leave
    ae38:	c3                   	ret
    ae39:	90                   	nop

000000000000ae3a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
      void reset(pointer __p) noexcept
    ae3a:	55                   	push   %rbp
    ae3b:	48 89 e5             	mov    %rsp,%rbp
    ae3e:	53                   	push   %rbx
    ae3f:	48 83 ec 28          	sub    $0x28,%rsp
    ae43:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ae47:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	const pointer __old_p = _M_ptr();
    ae4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ae4f:	48 89 c7             	mov    %rax,%rdi
    ae52:	e8 77 ff ff ff       	call   adce <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    ae57:	48 8b 00             	mov    (%rax),%rax
    ae5a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_ptr() = __p;
    ae5e:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    ae62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ae66:	48 89 c7             	mov    %rax,%rdi
    ae69:	e8 60 ff ff ff       	call   adce <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    ae6e:	48 89 18             	mov    %rbx,(%rax)
	if (__old_p)
    ae71:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    ae76:	74 1e                	je     ae96 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_+0x5c>
	  _M_deleter()(__old_p);
    ae78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ae7c:	48 89 c7             	mov    %rax,%rdi
    ae7f:	e8 8a 05 00 00       	call   b40e <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    ae84:	48 89 c2             	mov    %rax,%rdx
    ae87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae8b:	48 89 c6             	mov    %rax,%rsi
    ae8e:	48 89 d7             	mov    %rdx,%rdi
    ae91:	e8 7a ff ff ff       	call   ae10 <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_>
      }
    ae96:	90                   	nop
    ae97:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ae9b:	c9                   	leave
    ae9c:	c3                   	ret
    ae9d:	90                   	nop

000000000000ae9e <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
    ae9e:	55                   	push   %rbp
    ae9f:	48 89 e5             	mov    %rsp,%rbp
    aea2:	48 83 ec 10          	sub    $0x10,%rsp
    aea6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
    aeaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aeae:	48 89 c7             	mov    %rax,%rdi
    aeb1:	e8 72 05 00 00       	call   b428 <_ZNKSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    aeb6:	c9                   	leave
    aeb7:	c3                   	ret

000000000000aeb8 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
    aeb8:	55                   	push   %rbp
    aeb9:	48 89 e5             	mov    %rsp,%rbp
    aebc:	48 83 ec 10          	sub    $0x10,%rsp
    aec0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aec4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aec8:	48 89 c7             	mov    %rax,%rdi
    aecb:	e8 75 05 00 00       	call   b445 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    aed0:	c9                   	leave
    aed1:	c3                   	ret

000000000000aed2 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE11get_deleterEv>:
      get_deleter() noexcept
    aed2:	55                   	push   %rbp
    aed3:	48 89 e5             	mov    %rsp,%rbp
    aed6:	48 83 ec 10          	sub    $0x10,%rsp
    aeda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
    aede:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aee2:	48 89 c7             	mov    %rax,%rdi
    aee5:	e8 76 05 00 00       	call   b460 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    aeea:	c9                   	leave
    aeeb:	c3                   	ret

000000000000aeec <_ZSt4moveIRPN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
    aeec:	55                   	push   %rbp
    aeed:	48 89 e5             	mov    %rsp,%rbp
    aef0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    aef4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aef8:	5d                   	pop    %rbp
    aef9:	c3                   	ret

000000000000aefa <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_>:
      operator()(_Tp* __ptr) const
    aefa:	55                   	push   %rbp
    aefb:	48 89 e5             	mov    %rsp,%rbp
    aefe:	48 83 ec 10          	sub    $0x10,%rsp
    af02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
    af0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    af0e:	48 85 c0             	test   %rax,%rax
    af11:	74 0d                	je     af20 <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_+0x26>
    af13:	be b8 0f 00 00       	mov    $0xfb8,%esi
    af18:	48 89 c7             	mov    %rax,%rdi
    af1b:	e8 10 a3 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    af20:	90                   	nop
    af21:	c9                   	leave
    af22:	c3                   	ret
    af23:	90                   	nop

000000000000af24 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
      void reset(pointer __p) noexcept
    af24:	55                   	push   %rbp
    af25:	48 89 e5             	mov    %rsp,%rbp
    af28:	53                   	push   %rbx
    af29:	48 83 ec 28          	sub    $0x28,%rsp
    af2d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    af31:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	const pointer __old_p = _M_ptr();
    af35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    af39:	48 89 c7             	mov    %rax,%rdi
    af3c:	e8 77 ff ff ff       	call   aeb8 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    af41:	48 8b 00             	mov    (%rax),%rax
    af44:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_ptr() = __p;
    af48:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    af4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    af50:	48 89 c7             	mov    %rax,%rdi
    af53:	e8 60 ff ff ff       	call   aeb8 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    af58:	48 89 18             	mov    %rbx,(%rax)
	if (__old_p)
    af5b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    af60:	74 1e                	je     af80 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_+0x5c>
	  _M_deleter()(__old_p);
    af62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    af66:	48 89 c7             	mov    %rax,%rdi
    af69:	e8 f2 04 00 00       	call   b460 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    af6e:	48 89 c2             	mov    %rax,%rdx
    af71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    af75:	48 89 c6             	mov    %rax,%rsi
    af78:	48 89 d7             	mov    %rdx,%rdi
    af7b:	e8 7a ff ff ff       	call   aefa <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_>
      }
    af80:	90                   	nop
    af81:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    af85:	c9                   	leave
    af86:	c3                   	ret
    af87:	90                   	nop

000000000000af88 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
    af88:	55                   	push   %rbp
    af89:	48 89 e5             	mov    %rsp,%rbp
    af8c:	48 83 ec 10          	sub    $0x10,%rsp
    af90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
    af94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af98:	48 89 c7             	mov    %rax,%rdi
    af9b:	e8 da 04 00 00       	call   b47a <_ZNKSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    afa0:	c9                   	leave
    afa1:	c3                   	ret

000000000000afa2 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE13_M_deallocateEPS2_m>:
      _M_deallocate(pointer __p, size_t __n)
    afa2:	55                   	push   %rbp
    afa3:	48 89 e5             	mov    %rsp,%rbp
    afa6:	48 83 ec 20          	sub    $0x20,%rsp
    afaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    afae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    afb2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    afb6:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    afbb:	74 17                	je     afd4 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE13_M_deallocateEPS2_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    afbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    afc1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    afc5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    afc9:	48 89 ce             	mov    %rcx,%rsi
    afcc:	48 89 c7             	mov    %rax,%rdi
    afcf:	e8 c3 04 00 00       	call   b497 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE10deallocateERS3_PS2_m>
      }
    afd4:	90                   	nop
    afd5:	c9                   	leave
    afd6:	c3                   	ret
    afd7:	90                   	nop

000000000000afd8 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    afd8:	55                   	push   %rbp
    afd9:	48 89 e5             	mov    %rsp,%rbp
    afdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    afe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    afe4:	5d                   	pop    %rbp
    afe5:	c3                   	ret

000000000000afe6 <_ZSt8_DestroyIPN2vk4raii13CommandBufferES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    afe6:	55                   	push   %rbp
    afe7:	48 89 e5             	mov    %rsp,%rbp
    afea:	48 83 ec 20          	sub    $0x20,%rsp
    afee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aff2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aff6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    affa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    affe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b002:	48 89 d6             	mov    %rdx,%rsi
    b005:	48 89 c7             	mov    %rax,%rdi
    b008:	e8 e8 04 00 00       	call   b4f5 <_ZSt8_DestroyIPN2vk4raii13CommandBufferEEvT_S4_>
    }
    b00d:	90                   	nop
    b00e:	c9                   	leave
    b00f:	c3                   	ret

000000000000b010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>:
    basic_string<_CharT, _Traits, _Alloc>::
    b010:	55                   	push   %rbp
    b011:	48 89 e5             	mov    %rsp,%rbp
    b014:	53                   	push   %rbx
    b015:	48 83 ec 28          	sub    $0x28,%rsp
    b019:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b01d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b021:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__capacity > max_size())
    b025:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b029:	48 8b 18             	mov    (%rax),%rbx
    b02c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b030:	48 89 c7             	mov    %rax,%rdi
    b033:	e8 00 05 00 00       	call   b538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    b038:	48 39 d8             	cmp    %rbx,%rax
    b03b:	0f 92 c0             	setb   %al
    b03e:	84 c0                	test   %al,%al
    b040:	74 0f                	je     b051 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x41>
	std::__throw_length_error(__N("basic_string::_M_create"));
    b042:	48 8d 05 06 de 01 00 	lea    0x1de06(%rip),%rax        # 28e4f <_ZNSt8__detailL19__atomic_spin_countE+0x3eb>
    b049:	48 89 c7             	mov    %rax,%rdi
    b04c:	e8 8f a0 ff ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    b051:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b055:	48 8b 00             	mov    (%rax),%rax
    b058:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    b05c:	73 52                	jae    b0b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0xa0>
    b05e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b062:	48 8b 10             	mov    (%rax),%rdx
    b065:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b069:	48 01 c0             	add    %rax,%rax
    b06c:	48 39 c2             	cmp    %rax,%rdx
    b06f:	73 3f                	jae    b0b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0xa0>
	  __capacity = 2 * __old_capacity;
    b071:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b075:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
    b079:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b07d:	48 89 10             	mov    %rdx,(%rax)
	  if (__capacity > max_size())
    b080:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b084:	48 8b 18             	mov    (%rax),%rbx
    b087:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b08b:	48 89 c7             	mov    %rax,%rdi
    b08e:	e8 a5 04 00 00       	call   b538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    b093:	48 39 d8             	cmp    %rbx,%rax
    b096:	0f 92 c0             	setb   %al
    b099:	84 c0                	test   %al,%al
    b09b:	74 13                	je     b0b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0xa0>
	    __capacity = max_size();
    b09d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b0a1:	48 89 c7             	mov    %rax,%rdi
    b0a4:	e8 8f 04 00 00       	call   b538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    b0a9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b0ad:	48 89 02             	mov    %rax,(%rdx)
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    b0b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b0b4:	48 8b 00             	mov    (%rax),%rax
    b0b7:	48 8d 58 01          	lea    0x1(%rax),%rbx
    b0bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b0bf:	48 89 c7             	mov    %rax,%rdi
    b0c2:	e8 25 f9 ff ff       	call   a9ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    b0c7:	48 89 de             	mov    %rbx,%rsi
    b0ca:	48 89 c7             	mov    %rax,%rdi
    b0cd:	e8 8f 04 00 00       	call   b561 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>
    }
    b0d2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b0d6:	c9                   	leave
    b0d7:	c3                   	ret

000000000000b0d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>:
      _M_destroy(size_type __size) throw()
    b0d8:	55                   	push   %rbp
    b0d9:	48 89 e5             	mov    %rsp,%rbp
    b0dc:	41 54                	push   %r12
    b0de:	53                   	push   %rbx
    b0df:	48 83 ec 10          	sub    $0x10,%rsp
    b0e3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b0e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    b0eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b0ef:	48 8d 58 01          	lea    0x1(%rax),%rbx
    b0f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b0f7:	48 89 c7             	mov    %rax,%rdi
    b0fa:	e8 6b f8 ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b0ff:	49 89 c4             	mov    %rax,%r12
    b102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b106:	48 89 c7             	mov    %rax,%rdi
    b109:	e8 de f8 ff ff       	call   a9ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    b10e:	48 89 da             	mov    %rbx,%rdx
    b111:	4c 89 e6             	mov    %r12,%rsi
    b114:	48 89 c7             	mov    %rax,%rdi
    b117:	e8 b3 04 00 00       	call   b5cf <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm>
    b11c:	90                   	nop
    b11d:	48 83 c4 10          	add    $0x10,%rsp
    b121:	5b                   	pop    %rbx
    b122:	41 5c                	pop    %r12
    b124:	5d                   	pop    %rbp
    b125:	c3                   	ret

000000000000b126 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
    b126:	55                   	push   %rbp
    b127:	48 89 e5             	mov    %rsp,%rbp
    b12a:	48 83 ec 10          	sub    $0x10,%rsp
    b12e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    b132:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b136:	48 83 c0 10          	add    $0x10,%rax
    b13a:	48 89 c7             	mov    %rax,%rdi
    b13d:	e8 eb 04 00 00       	call   b62d <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>
      }
    b142:	c9                   	leave
    b143:	c3                   	ret

000000000000b144 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    b144:	55                   	push   %rbp
    b145:	48 89 e5             	mov    %rsp,%rbp
    b148:	48 83 ec 10          	sub    $0x10,%rsp
    b14c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b150:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
    b154:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    b158:	48 89 c7             	mov    %rax,%rdi
    b15b:	e8 e7 04 00 00       	call   b647 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
    b160:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b164:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b168:	48 89 d6             	mov    %rdx,%rsi
    b16b:	48 89 c7             	mov    %rax,%rdi
    b16e:	e8 df 04 00 00       	call   b652 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
    }
    b173:	c9                   	leave
    b174:	c3                   	ret

000000000000b175 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
    b175:	55                   	push   %rbp
    b176:	48 89 e5             	mov    %rsp,%rbp
    b179:	48 83 ec 20          	sub    $0x20,%rsp
    b17d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b181:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b185:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { _S_copy(__p, __k1, __k2 - __k1); }
    b189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b18d:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    b191:	48 89 c2             	mov    %rax,%rdx
    b194:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b198:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b19c:	48 89 ce             	mov    %rcx,%rsi
    b19f:	48 89 c7             	mov    %rax,%rdi
    b1a2:	e8 c1 04 00 00       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    b1a7:	90                   	nop
    b1a8:	c9                   	leave
    b1a9:	c3                   	ret

000000000000b1aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
    b1aa:	55                   	push   %rbp
    b1ab:	48 89 e5             	mov    %rsp,%rbp
    b1ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
    b1b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b1b6:	5d                   	pop    %rbp
    b1b7:	c3                   	ret

000000000000b1b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>:
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
    b1b8:	55                   	push   %rbp
    b1b9:	48 89 e5             	mov    %rsp,%rbp
    b1bc:	53                   	push   %rbx
    b1bd:	48 83 ec 28          	sub    $0x28,%rsp
    b1c1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b1c5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b1c9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    b1cd:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (this->max_size() - (this->size() - __n1) < __n2)
    b1d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b1d5:	48 89 c7             	mov    %rax,%rdi
    b1d8:	e8 5b 03 00 00       	call   b538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    b1dd:	48 89 c3             	mov    %rax,%rbx
    b1e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b1e4:	48 89 c7             	mov    %rax,%rdi
    b1e7:	e8 0a b1 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b1ec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b1f0:	48 29 c2             	sub    %rax,%rdx
    b1f3:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
    b1f7:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    b1fb:	0f 92 c0             	setb   %al
    b1fe:	84 c0                	test   %al,%al
    b200:	74 0c                	je     b20e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc+0x56>
	  __throw_length_error(__N(__s));
    b202:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b206:	48 89 c7             	mov    %rax,%rdi
    b209:	e8 d2 9e ff ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      }
    b20e:	90                   	nop
    b20f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b213:	c9                   	leave
    b214:	c3                   	ret
    b215:	90                   	nop

000000000000b216 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    b216:	55                   	push   %rbp
    b217:	48 89 e5             	mov    %rsp,%rbp
    b21a:	53                   	push   %rbx
    b21b:	48 83 ec 38          	sub    $0x38,%rsp
    b21f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b223:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b227:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();
    b22b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b22f:	48 89 c7             	mov    %rax,%rdi
    b232:	e8 bf b0 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b237:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    b23b:	48 01 d0             	add    %rdx,%rax
    b23e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

      if (__len <= this->capacity())
    b242:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b246:	48 89 c7             	mov    %rax,%rdi
    b249:	e8 fc f9 ff ff       	call   ac4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
    b24e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    b252:	0f 93 c0             	setae  %al
    b255:	84 c0                	test   %al,%al
    b257:	74 3b                	je     b294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0x7e>
	{
	  if (__n)
    b259:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    b25e:	74 62                	je     b2c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    b260:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b264:	48 89 c7             	mov    %rax,%rdi
    b267:	e8 fe f6 ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b26c:	48 89 c3             	mov    %rax,%rbx
    b26f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b273:	48 89 c7             	mov    %rax,%rdi
    b276:	e8 7b b0 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b27b:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
    b27f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    b283:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b287:	48 89 c6             	mov    %rax,%rsi
    b28a:	48 89 cf             	mov    %rcx,%rdi
    b28d:	e8 d6 03 00 00       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    b292:	eb 2e                	jmp    b2c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	}
      else
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    b294:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b298:	48 89 c7             	mov    %rax,%rdi
    b29b:	e8 56 b0 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b2a0:	48 89 c6             	mov    %rax,%rsi
    b2a3:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    b2a7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b2ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b2af:	49 89 c8             	mov    %rcx,%r8
    b2b2:	48 89 d1             	mov    %rdx,%rcx
    b2b5:	ba 00 00 00 00       	mov    $0x0,%edx
    b2ba:	48 89 c7             	mov    %rax,%rdi
    b2bd:	e8 f0 03 00 00       	call   b6b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>

      this->_M_set_length(__len);
    b2c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b2c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b2ca:	48 89 d6             	mov    %rdx,%rsi
    b2cd:	48 89 c7             	mov    %rax,%rdi
    b2d0:	e8 21 f2 ff ff       	call   a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
    b2d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
    b2d9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b2dd:	c9                   	leave
    b2de:	c3                   	ret
    b2df:	90                   	nop

000000000000b2e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm>:
      replace(size_type __pos, size_type __n1, const _CharT* __s,
    b2e0:	55                   	push   %rbp
    b2e1:	48 89 e5             	mov    %rsp,%rbp
    b2e4:	53                   	push   %rbx
    b2e5:	48 83 ec 38          	sub    $0x38,%rsp
    b2e9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b2ed:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b2f1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    b2f5:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    b2f9:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
    b2fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b301:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    b305:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b309:	48 89 ce             	mov    %rcx,%rsi
    b30c:	48 89 c7             	mov    %rax,%rdi
    b30f:	e8 44 00 00 00       	call   b358 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm>
    b314:	48 89 c3             	mov    %rax,%rbx
    b317:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    b31b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b31f:	48 8d 15 41 db 01 00 	lea    0x1db41(%rip),%rdx        # 28e67 <_ZNSt8__detailL19__atomic_spin_countE+0x403>
    b326:	48 89 ce             	mov    %rcx,%rsi
    b329:	48 89 c7             	mov    %rax,%rdi
    b32c:	e8 99 f9 ff ff       	call   acca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>
    b331:	48 89 c6             	mov    %rax,%rsi
    b334:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    b338:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b33c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b340:	49 89 c8             	mov    %rcx,%r8
    b343:	48 89 d1             	mov    %rdx,%rcx
    b346:	48 89 da             	mov    %rbx,%rdx
    b349:	48 89 c7             	mov    %rax,%rdi
    b34c:	e8 a5 04 00 00       	call   b7f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>
      }
    b351:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b355:	c9                   	leave
    b356:	c3                   	ret
    b357:	90                   	nop

000000000000b358 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm>:
      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
    b358:	55                   	push   %rbp
    b359:	48 89 e5             	mov    %rsp,%rbp
    b35c:	48 83 ec 30          	sub    $0x30,%rsp
    b360:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b364:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b368:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const bool __testoff =  __off < this->size() - __pos;
    b36c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b370:	48 89 c7             	mov    %rax,%rdi
    b373:	e8 7e af ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b378:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    b37c:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    b380:	0f 92 c0             	setb   %al
    b383:	88 45 ff             	mov    %al,-0x1(%rbp)
	return __testoff ? __off : this->size() - __pos;
    b386:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
    b38a:	74 06                	je     b392 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm+0x3a>
    b38c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b390:	eb 10                	jmp    b3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm+0x4a>
    b392:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b396:	48 89 c7             	mov    %rax,%rdi
    b399:	e8 58 af ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b39e:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
      }
    b3a2:	c9                   	leave
    b3a3:	c3                   	ret

000000000000b3a4 <_ZNSt5tupleIJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
    b3a4:	55                   	push   %rbp
    b3a5:	48 89 e5             	mov    %rsp,%rbp
    b3a8:	48 83 ec 10          	sub    $0x10,%rsp
    b3ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
    b3b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b3b4:	48 89 c7             	mov    %rax,%rdi
    b3b7:	e8 e2 07 00 00       	call   bb9e <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1Ev>
    b3bc:	90                   	nop
    b3bd:	c9                   	leave
    b3be:	c3                   	ret

000000000000b3bf <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    b3bf:	55                   	push   %rbp
    b3c0:	48 89 e5             	mov    %rsp,%rbp
    b3c3:	48 83 ec 10          	sub    $0x10,%rsp
    b3c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b3cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b3cf:	48 89 c7             	mov    %rax,%rdi
    b3d2:	e8 ee 07 00 00       	call   bbc5 <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
    b3d7:	c9                   	leave
    b3d8:	c3                   	ret
    b3d9:	90                   	nop

000000000000b3da <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
    b3da:	55                   	push   %rbp
    b3db:	48 89 e5             	mov    %rsp,%rbp
    b3de:	48 83 ec 10          	sub    $0x10,%rsp
    b3e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b3e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b3ea:	48 89 c7             	mov    %rax,%rdi
    b3ed:	e8 ed 07 00 00       	call   bbdf <_ZSt3getILm1EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    b3f2:	c9                   	leave
    b3f3:	c3                   	ret

000000000000b3f4 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    b3f4:	55                   	push   %rbp
    b3f5:	48 89 e5             	mov    %rsp,%rbp
    b3f8:	48 83 ec 10          	sub    $0x10,%rsp
    b3fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b400:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b404:	48 89 c7             	mov    %rax,%rdi
    b407:	e8 ed 07 00 00       	call   bbf9 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
    b40c:	c9                   	leave
    b40d:	c3                   	ret

000000000000b40e <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>:
    b40e:	55                   	push   %rbp
    b40f:	48 89 e5             	mov    %rsp,%rbp
    b412:	48 83 ec 10          	sub    $0x10,%rsp
    b416:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b41a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b41e:	48 89 c7             	mov    %rax,%rdi
    b421:	e8 ed 07 00 00       	call   bc13 <_ZSt3getILm1EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    b426:	c9                   	leave
    b427:	c3                   	ret

000000000000b428 <_ZNKSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
    b428:	55                   	push   %rbp
    b429:	48 89 e5             	mov    %rsp,%rbp
    b42c:	48 83 ec 10          	sub    $0x10,%rsp
    b430:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b434:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b438:	48 89 c7             	mov    %rax,%rdi
    b43b:	e8 ed 07 00 00       	call   bc2d <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
    b440:	48 8b 00             	mov    (%rax),%rax
    b443:	c9                   	leave
    b444:	c3                   	ret

000000000000b445 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    b445:	55                   	push   %rbp
    b446:	48 89 e5             	mov    %rsp,%rbp
    b449:	48 83 ec 10          	sub    $0x10,%rsp
    b44d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b451:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b455:	48 89 c7             	mov    %rax,%rdi
    b458:	e8 ea 07 00 00       	call   bc47 <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
    b45d:	c9                   	leave
    b45e:	c3                   	ret
    b45f:	90                   	nop

000000000000b460 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
    b460:	55                   	push   %rbp
    b461:	48 89 e5             	mov    %rsp,%rbp
    b464:	48 83 ec 10          	sub    $0x10,%rsp
    b468:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b46c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b470:	48 89 c7             	mov    %rax,%rdi
    b473:	e8 e9 07 00 00       	call   bc61 <_ZSt3getILm1EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    b478:	c9                   	leave
    b479:	c3                   	ret

000000000000b47a <_ZNKSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
    b47a:	55                   	push   %rbp
    b47b:	48 89 e5             	mov    %rsp,%rbp
    b47e:	48 83 ec 10          	sub    $0x10,%rsp
    b482:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b48a:	48 89 c7             	mov    %rax,%rdi
    b48d:	e8 e9 07 00 00       	call   bc7b <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
    b492:	48 8b 00             	mov    (%rax),%rax
    b495:	c9                   	leave
    b496:	c3                   	ret

000000000000b497 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE10deallocateERS3_PS2_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    b497:	55                   	push   %rbp
    b498:	48 89 e5             	mov    %rsp,%rbp
    b49b:	48 83 ec 40          	sub    $0x40,%rsp
    b49f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b4a3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b4a7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    b4ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b4af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b4b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b4b7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b4bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b4bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
    b4c3:	e8 d6 ac ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b4c8:	84 c0                	test   %al,%al
    b4ca:	74 0e                	je     b4da <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE10deallocateERS3_PS2_m+0x43>
	  {
	    ::operator delete(__p);
    b4cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b4d0:	48 89 c7             	mov    %rax,%rdi
    b4d3:	e8 18 9d ff ff       	call   51f0 <_ZdlPv@plt>
	    return;
    b4d8:	eb 18                	jmp    b4f2 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE10deallocateERS3_PS2_m+0x5b>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
    b4da:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b4de:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b4e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b4e6:	48 89 ce             	mov    %rcx,%rsi
    b4e9:	48 89 c7             	mov    %rax,%rdi
    b4ec:	e8 ef 09 00 00       	call   bee0 <_ZNSt15__new_allocatorIN2vk4raii13CommandBufferEE10deallocateEPS2_m>
      { __a.deallocate(__p, __n); }
    b4f1:	90                   	nop
    b4f2:	90                   	nop
    b4f3:	c9                   	leave
    b4f4:	c3                   	ret

000000000000b4f5 <_ZSt8_DestroyIPN2vk4raii13CommandBufferEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    b4f5:	55                   	push   %rbp
    b4f6:	48 89 e5             	mov    %rsp,%rbp
    b4f9:	48 83 ec 10          	sub    $0x10,%rsp
    b4fd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b501:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
    b505:	e8 94 ac ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b50a:	84 c0                	test   %al,%al
    b50c:	74 15                	je     b523 <_ZSt8_DestroyIPN2vk4raii13CommandBufferEEvT_S4_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
    b50e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b512:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b516:	48 89 d6             	mov    %rdx,%rsi
    b519:	48 89 c7             	mov    %rax,%rdi
    b51c:	e8 74 07 00 00       	call   bc95 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii13CommandBufferEEEvT_S6_>
    b521:	eb 13                	jmp    b536 <_ZSt8_DestroyIPN2vk4raii13CommandBufferEEvT_S4_+0x41>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
    b523:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b527:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b52b:	48 89 d6             	mov    %rdx,%rsi
    b52e:	48 89 c7             	mov    %rax,%rdi
    b531:	e8 5f 07 00 00       	call   bc95 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii13CommandBufferEEEvT_S6_>
    }
    b536:	c9                   	leave
    b537:	c3                   	ret

000000000000b538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
    b538:	55                   	push   %rbp
    b539:	48 89 e5             	mov    %rsp,%rbp
    b53c:	48 83 ec 10          	sub    $0x10,%rsp
    b540:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
    b544:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b548:	48 89 c7             	mov    %rax,%rdi
    b54b:	e8 5a fc ff ff       	call   b1aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    b550:	48 89 c7             	mov    %rax,%rdi
    b553:	e8 91 07 00 00       	call   bce9 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
    b558:	48 83 e8 01          	sub    $0x1,%rax
    b55c:	48 d1 e8             	shr    %rax
    b55f:	c9                   	leave
    b560:	c3                   	ret

000000000000b561 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>:
      allocate(allocator_type& __a, size_type __n)
    b561:	55                   	push   %rbp
    b562:	48 89 e5             	mov    %rsp,%rbp
    b565:	48 83 ec 20          	sub    $0x20,%rsp
    b569:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b56d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b571:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b575:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b579:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b57d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
    b581:	e8 18 ac ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b586:	84 c0                	test   %al,%al
    b588:	74 2a                	je     b5b4 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m+0x53>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
    b58a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b58e:	ba 00 00 00 00       	mov    $0x0,%edx
    b593:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b597:	48 89 d0             	mov    %rdx,%rax
    b59a:	83 e0 01             	and    $0x1,%eax
    b59d:	84 c0                	test   %al,%al
    b59f:	74 05                	je     b5a6 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m+0x45>
	      std::__throw_bad_array_new_length();
    b5a1:	e8 da 9b ff ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
    b5a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b5aa:	48 89 c7             	mov    %rax,%rdi
    b5ad:	e8 6e 9c ff ff       	call   5220 <_Znwm@plt>
    b5b2:	eb 19                	jmp    b5cd <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m+0x6c>
	return __allocator_base<_Tp>::allocate(__n, 0);
    b5b4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b5b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b5bc:	ba 00 00 00 00       	mov    $0x0,%edx
    b5c1:	48 89 ce             	mov    %rcx,%rsi
    b5c4:	48 89 c7             	mov    %rax,%rdi
    b5c7:	e8 6e 09 00 00       	call   bf3a <_ZNSt15__new_allocatorIcE8allocateEmPKv>
    b5cc:	90                   	nop
      { return __a.allocate(__n); }
    b5cd:	c9                   	leave
    b5ce:	c3                   	ret

000000000000b5cf <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    b5cf:	55                   	push   %rbp
    b5d0:	48 89 e5             	mov    %rsp,%rbp
    b5d3:	48 83 ec 40          	sub    $0x40,%rsp
    b5d7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b5db:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b5df:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    b5e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b5e7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b5eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b5ef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b5f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b5f7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
    b5fb:	e8 9e ab ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b600:	84 c0                	test   %al,%al
    b602:	74 0e                	je     b612 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm+0x43>
	    ::operator delete(__p);
    b604:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b608:	48 89 c7             	mov    %rax,%rdi
    b60b:	e8 e0 9b ff ff       	call   51f0 <_ZdlPv@plt>
	    return;
    b610:	eb 18                	jmp    b62a <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
    b612:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b616:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b61a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b61e:	48 89 ce             	mov    %rcx,%rsi
    b621:	48 89 c7             	mov    %rax,%rdi
    b624:	e8 59 09 00 00       	call   bf82 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
      { __a.deallocate(__p, __n); }
    b629:	90                   	nop
    b62a:	90                   	nop
    b62b:	c9                   	leave
    b62c:	c3                   	ret

000000000000b62d <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>:
      pointer_to(element_type& __r) noexcept
    b62d:	55                   	push   %rbp
    b62e:	48 89 e5             	mov    %rsp,%rbp
    b631:	48 83 ec 10          	sub    $0x10,%rsp
    b635:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
    b639:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b63d:	48 89 c7             	mov    %rax,%rdi
    b640:	e8 b5 06 00 00       	call   bcfa <_ZSt9addressofIKcEPT_RS1_>
    b645:	c9                   	leave
    b646:	c3                   	ret

000000000000b647 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    b647:	55                   	push   %rbp
    b648:	48 89 e5             	mov    %rsp,%rbp
    b64b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    b64f:	90                   	nop
    b650:	5d                   	pop    %rbp
    b651:	c3                   	ret

000000000000b652 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    b652:	55                   	push   %rbp
    b653:	48 89 e5             	mov    %rsp,%rbp
    b656:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b65a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
    b65e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b662:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    }
    b666:	5d                   	pop    %rbp
    b667:	c3                   	ret

000000000000b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
    b668:	55                   	push   %rbp
    b669:	48 89 e5             	mov    %rsp,%rbp
    b66c:	48 83 ec 20          	sub    $0x20,%rsp
    b670:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b674:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b678:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
    b67c:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
    b681:	75 15                	jne    b698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
    b683:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b687:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b68b:	48 89 d6             	mov    %rdx,%rsi
    b68e:	48 89 c7             	mov    %rax,%rdi
    b691:	e8 30 ab ff ff       	call   61c6 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
    b696:	eb 17                	jmp    b6af <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x47>
	  traits_type::copy(__d, __s, __n);
    b698:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b69c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b6a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6a4:	48 89 ce             	mov    %rcx,%rsi
    b6a7:	48 89 c7             	mov    %rax,%rdi
    b6aa:	e8 e4 ab ff ff       	call   6293 <_ZNSt11char_traitsIcE4copyEPcPKcm>
      }
    b6af:	90                   	nop
    b6b0:	c9                   	leave
    b6b1:	c3                   	ret

000000000000b6b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>:
    basic_string<_CharT, _Traits, _Alloc>::
    b6b2:	55                   	push   %rbp
    b6b3:	48 89 e5             	mov    %rsp,%rbp
    b6b6:	48 83 ec 50          	sub    $0x50,%rsp
    b6ba:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b6be:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b6c2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    b6c6:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    b6ca:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
      const size_type __how_much = length() - __pos - __len1;
    b6ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b6d2:	48 89 c7             	mov    %rax,%rdi
    b6d5:	e8 20 ed ff ff       	call   a3fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
    b6da:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
    b6de:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    b6e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      size_type __new_capacity = length() + __len2 - __len1;
    b6e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b6ea:	48 89 c7             	mov    %rax,%rdi
    b6ed:	e8 08 ed ff ff       	call   a3fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
    b6f2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    b6f6:	48 01 d0             	add    %rdx,%rax
    b6f9:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    b6fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __r = _M_create(__new_capacity, capacity());
    b701:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b705:	48 89 c7             	mov    %rax,%rdi
    b708:	e8 3d f5 ff ff       	call   ac4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
    b70d:	48 89 c2             	mov    %rax,%rdx
    b710:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    b714:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b718:	48 89 ce             	mov    %rcx,%rsi
    b71b:	48 89 c7             	mov    %rax,%rdi
    b71e:	e8 ed f8 ff ff       	call   b010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
    b723:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (__pos)
    b727:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    b72c:	74 22                	je     b750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x9e>
	this->_S_copy(__r, _M_data(), __pos);
    b72e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b732:	48 89 c7             	mov    %rax,%rdi
    b735:	e8 30 f2 ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b73a:	48 89 c1             	mov    %rax,%rcx
    b73d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b741:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b745:	48 89 ce             	mov    %rcx,%rsi
    b748:	48 89 c7             	mov    %rax,%rdi
    b74b:	e8 18 ff ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__s && __len2)
    b750:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    b755:	74 26                	je     b77d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
    b757:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    b75c:	74 1f                	je     b77d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
	this->_S_copy(__r + __pos, __s, __len2);
    b75e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b762:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b766:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b76a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    b76e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b772:	48 89 c6             	mov    %rax,%rsi
    b775:	48 89 cf             	mov    %rcx,%rdi
    b778:	e8 eb fe ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__how_much)
    b77d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    b782:	74 3d                	je     b7c1 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x10f>
		      _M_data() + __pos + __len1, __how_much);
    b784:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b788:	48 89 c7             	mov    %rax,%rdi
    b78b:	e8 da f1 ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b790:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b794:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    b798:	48 01 ca             	add    %rcx,%rdx
    b79b:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
	this->_S_copy(__r + __pos + __len2,
    b79f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b7a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b7a7:	48 01 c2             	add    %rax,%rdx
    b7aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b7ae:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b7b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7b6:	48 89 c2             	mov    %rax,%rdx
    b7b9:	48 89 cf             	mov    %rcx,%rdi
    b7bc:	e8 a7 fe ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      _M_dispose();
    b7c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b7c5:	48 89 c7             	mov    %rax,%rdi
    b7c8:	e8 e5 f1 ff ff       	call   a9b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__r);
    b7cd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b7d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b7d5:	48 89 d6             	mov    %rdx,%rsi
    b7d8:	48 89 c7             	mov    %rax,%rdi
    b7db:	e8 4e f2 ff ff       	call   aa2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__new_capacity);
    b7e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b7e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b7e8:	48 89 d6             	mov    %rdx,%rsi
    b7eb:	48 89 c7             	mov    %rax,%rdi
    b7ee:	e8 55 f2 ff ff       	call   aa48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
    }
    b7f3:	90                   	nop
    b7f4:	c9                   	leave
    b7f5:	c3                   	ret

000000000000b7f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    b7f6:	55                   	push   %rbp
    b7f7:	48 89 e5             	mov    %rsp,%rbp
    b7fa:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
    b7fe:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    b802:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    b806:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    b80a:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
    b80e:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
	       const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");
    b812:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b816:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    b81a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b81e:	48 8d 0d 58 d6 01 00 	lea    0x1d658(%rip),%rcx        # 28e7d <_ZNSt8__detailL19__atomic_spin_countE+0x419>
    b825:	48 89 c7             	mov    %rax,%rdi
    b828:	e8 8b f9 ff ff       	call   b1b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>

      const size_type __old_size = this->size();
    b82d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b831:	48 89 c7             	mov    %rax,%rdi
    b834:	e8 bd aa ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b839:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      const size_type __new_size = __old_size + __len2 - __len1;
    b83d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b841:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b845:	48 01 d0             	add    %rdx,%rax
    b848:	48 2b 45 98          	sub    -0x68(%rbp),%rax
    b84c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

      if (__new_size <= this->capacity())
    b850:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b854:	48 89 c7             	mov    %rax,%rdi
    b857:	e8 ee f3 ff ff       	call   ac4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
    b85c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b860:	0f 93 c0             	setae  %al
    b863:	84 c0                	test   %al,%al
    b865:	0f 84 fa 02 00 00    	je     bb65 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x36f>
	{
	  pointer __p = this->_M_data() + __pos;
    b86b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b86f:	48 89 c7             	mov    %rax,%rdi
    b872:	e8 f3 f0 ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b877:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b87b:	48 01 d0             	add    %rdx,%rax
    b87e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	  const size_type __how_much = __old_size - __pos - __len1;
    b882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b886:	48 2b 45 a0          	sub    -0x60(%rbp),%rax
    b88a:	48 2b 45 98          	sub    -0x68(%rbp),%rax
    b88e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if __cpp_lib_is_constant_evaluated
	  if (std::is_constant_evaluated())
    b892:	e8 12 a9 ff ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
    b897:	84 c0                	test   %al,%al
    b899:	0f 84 09 01 00 00    	je     b9a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x1b2>
	    {
	      auto __newp = _Alloc_traits::allocate(_M_get_allocator(),
    b89f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b8a3:	48 89 c7             	mov    %rax,%rdi
    b8a6:	e8 41 f1 ff ff       	call   a9ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    b8ab:	48 89 c2             	mov    %rax,%rdx
    b8ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b8b2:	48 89 c6             	mov    %rax,%rsi
    b8b5:	48 89 d7             	mov    %rdx,%rdi
    b8b8:	e8 a4 fc ff ff       	call   b561 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>
    b8bd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
						    __new_size);
	      _S_copy(__newp, this->_M_data(), __pos);
    b8c1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b8c5:	48 89 c7             	mov    %rax,%rdi
    b8c8:	e8 9d f0 ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b8cd:	48 89 c1             	mov    %rax,%rcx
    b8d0:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b8d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b8d8:	48 89 ce             	mov    %rcx,%rsi
    b8db:	48 89 c7             	mov    %rax,%rdi
    b8de:	e8 85 fd ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos, __s, __len2);
    b8e3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    b8e7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b8eb:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b8ef:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b8f3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    b8f7:	48 89 c6             	mov    %rax,%rsi
    b8fa:	48 89 cf             	mov    %rcx,%rdi
    b8fd:	e8 66 fd ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos + __len2, __p + __len1, __how_much);
    b902:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b906:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b90a:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    b90e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b912:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b916:	48 01 c2             	add    %rax,%rdx
    b919:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b91d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b921:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b925:	48 89 c2             	mov    %rax,%rdx
    b928:	48 89 cf             	mov    %rcx,%rdi
    b92b:	e8 38 fd ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(this->_M_data(), __newp, __new_size);
    b930:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b934:	48 89 c7             	mov    %rax,%rdi
    b937:	e8 2e f0 ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b93c:	48 89 c1             	mov    %rax,%rcx
    b93f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b943:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b947:	48 89 c6             	mov    %rax,%rsi
    b94a:	48 89 cf             	mov    %rcx,%rdi
    b94d:	e8 16 fd ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      this->_M_get_allocator().deallocate(__newp, __new_size);
    b952:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b956:	48 89 c7             	mov    %rax,%rdi
    b959:	e8 8e f0 ff ff       	call   a9ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    b95e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b962:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b966:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b96a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b96e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	if (std::__is_constant_evaluated())
    b972:	e8 27 a8 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b977:	84 c0                	test   %al,%al
    b979:	74 11                	je     b98c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x196>
	    ::operator delete(__p);
    b97b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b97f:	48 89 c7             	mov    %rax,%rdi
    b982:	e8 69 98 ff ff       	call   51f0 <_ZdlPv@plt>
	    return;
    b987:	e9 f8 01 00 00       	jmp    bb84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
	__allocator_base<_Tp>::deallocate(__p, __n);
    b98c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    b990:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    b994:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b998:	48 89 ce             	mov    %rcx,%rsi
    b99b:	48 89 c7             	mov    %rax,%rdi
    b99e:	e8 df 05 00 00       	call   bf82 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
    b9a3:	e9 dc 01 00 00       	jmp    bb84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
	    }
	  else
#endif
	  if (_M_disjunct(__s))
    b9a8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    b9ac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b9b0:	48 89 d6             	mov    %rdx,%rsi
    b9b3:	48 89 c7             	mov    %rax,%rdi
    b9b6:	e8 59 03 00 00       	call   bd14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
    b9bb:	84 c0                	test   %al,%al
    b9bd:	74 5f                	je     ba1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x228>
	    {
	      if (__how_much && __len1 != __len2)
    b9bf:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    b9c4:	74 31                	je     b9f7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x201>
    b9c6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b9ca:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
    b9ce:	74 27                	je     b9f7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x201>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
    b9d0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b9d4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b9d8:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    b9dc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b9e0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b9e4:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b9e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b9ec:	48 89 c2             	mov    %rax,%rdx
    b9ef:	48 89 cf             	mov    %rcx,%rdi
    b9f2:	e8 9c 03 00 00       	call   bd93 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__len2)
    b9f7:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    b9fc:	0f 84 82 01 00 00    	je     bb84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		this->_S_copy(__p, __s, __len2);
    ba02:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    ba06:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    ba0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ba0e:	48 89 ce             	mov    %rcx,%rsi
    ba11:	48 89 c7             	mov    %rax,%rdi
    ba14:	e8 4f fc ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    ba19:	e9 66 01 00 00       	jmp    bb84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
	    }
	  else
	    {
	      // Work in-place.
	      if (__len2 && __len2 <= __len1)
    ba1e:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    ba23:	74 21                	je     ba46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x250>
    ba25:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    ba29:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    ba2d:	72 17                	jb     ba46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x250>
		this->_S_move(__p, __s, __len2);
    ba2f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    ba33:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    ba37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ba3b:	48 89 ce             	mov    %rcx,%rsi
    ba3e:	48 89 c7             	mov    %rax,%rdi
    ba41:	e8 4d 03 00 00       	call   bd93 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__how_much && __len1 != __len2)
    ba46:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    ba4b:	74 31                	je     ba7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x288>
    ba4d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    ba51:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
    ba55:	74 27                	je     ba7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x288>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
    ba57:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ba5b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    ba5f:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    ba63:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ba67:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    ba6b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    ba6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ba73:	48 89 c2             	mov    %rax,%rdx
    ba76:	48 89 cf             	mov    %rcx,%rdi
    ba79:	e8 15 03 00 00       	call   bd93 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__len2 > __len1)
    ba7e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    ba82:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    ba86:	0f 83 f8 00 00 00    	jae    bb84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		{
		  if (__s + __len2 <= __p + __len1)
    ba8c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    ba90:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    ba94:	48 01 d0             	add    %rdx,%rax
    ba97:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    ba9b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    ba9f:	48 01 ca             	add    %rcx,%rdx
    baa2:	48 39 c2             	cmp    %rax,%rdx
    baa5:	72 1c                	jb     bac3 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x2cd>
		    this->_S_move(__p, __s, __len2);
    baa7:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    baab:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    baaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bab3:	48 89 ce             	mov    %rcx,%rsi
    bab6:	48 89 c7             	mov    %rax,%rdi
    bab9:	e8 d5 02 00 00       	call   bd93 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
    babe:	e9 c1 00 00 00       	jmp    bb84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		  else if (__s >= __p + __len1)
    bac3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bac7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    bacb:	48 01 d0             	add    %rdx,%rax
    bace:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    bad2:	72 3b                	jb     bb0f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x319>
		    {
		      // Hint to middle end that __p and __s overlap
		      // (PR 98465).
		      const size_type __poff = (__s - __p) + (__len2 - __len1);
    bad4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    bad8:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    badc:	48 89 c2             	mov    %rax,%rdx
    badf:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    bae3:	48 2b 45 98          	sub    -0x68(%rbp),%rax
    bae7:	48 01 d0             	add    %rdx,%rax
    baea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		      this->_S_copy(__p, __p + __poff, __len2);
    baee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    baf2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    baf6:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    bafa:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    bafe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bb02:	48 89 ce             	mov    %rcx,%rsi
    bb05:	48 89 c7             	mov    %rax,%rdi
    bb08:	e8 5b fb ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    bb0d:	eb 75                	jmp    bb84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		    }
		  else
		    {
		      const size_type __nleft = (__p + __len1) - __s;
    bb0f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bb13:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    bb17:	48 01 d0             	add    %rdx,%rax
    bb1a:	48 2b 45 90          	sub    -0x70(%rbp),%rax
    bb1e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		      this->_S_move(__p, __s, __nleft);
    bb22:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    bb26:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    bb2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bb2e:	48 89 ce             	mov    %rcx,%rsi
    bb31:	48 89 c7             	mov    %rax,%rdi
    bb34:	e8 5a 02 00 00       	call   bd93 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
		      this->_S_copy(__p + __nleft, __p + __len2,
    bb39:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    bb3d:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
    bb41:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    bb45:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    bb49:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
    bb4d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    bb51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    bb55:	48 01 d1             	add    %rdx,%rcx
    bb58:	48 89 c2             	mov    %rax,%rdx
    bb5b:	48 89 cf             	mov    %rcx,%rdi
    bb5e:	e8 05 fb ff ff       	call   b668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    bb63:	eb 1f                	jmp    bb84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		    }
		}
	    }
	}
      else
	this->_M_mutate(__pos, __len1, __s, __len2);
    bb65:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
    bb69:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    bb6d:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    bb71:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    bb75:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    bb79:	49 89 f8             	mov    %rdi,%r8
    bb7c:	48 89 c7             	mov    %rax,%rdi
    bb7f:	e8 2e fb ff ff       	call   b6b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>

      this->_M_set_length(__new_size);
    bb84:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bb88:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    bb8c:	48 89 d6             	mov    %rdx,%rsi
    bb8f:	48 89 c7             	mov    %rax,%rdi
    bb92:	e8 5f e9 ff ff       	call   a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
    bb97:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    }
    bb9b:	c9                   	leave
    bb9c:	c3                   	ret
    bb9d:	90                   	nop

000000000000bb9e <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
    bb9e:	55                   	push   %rbp
    bb9f:	48 89 e5             	mov    %rsp,%rbp
    bba2:	48 83 ec 10          	sub    $0x10,%rsp
    bba6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
    bbaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbae:	48 89 c7             	mov    %rax,%rdi
    bbb1:	e8 28 02 00 00       	call   bdde <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEEC1Ev>
    bbb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbba:	48 89 c7             	mov    %rax,%rdi
    bbbd:	e8 38 02 00 00       	call   bdfa <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EEC1Ev>
    bbc2:	90                   	nop
    bbc3:	c9                   	leave
    bbc4:	c3                   	ret

000000000000bbc5 <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    bbc5:	55                   	push   %rbp
    bbc6:	48 89 e5             	mov    %rsp,%rbp
    bbc9:	48 83 ec 10          	sub    $0x10,%rsp
    bbcd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    bbd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbd5:	48 89 c7             	mov    %rax,%rdi
    bbd8:	e8 33 02 00 00       	call   be10 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>
    bbdd:	c9                   	leave
    bbde:	c3                   	ret

000000000000bbdf <_ZSt3getILm1EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    bbdf:	55                   	push   %rbp
    bbe0:	48 89 e5             	mov    %rsp,%rbp
    bbe3:	48 83 ec 10          	sub    $0x10,%rsp
    bbe7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    bbeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbef:	48 89 c7             	mov    %rax,%rdi
    bbf2:	e8 33 02 00 00       	call   be2a <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
    bbf7:	c9                   	leave
    bbf8:	c3                   	ret

000000000000bbf9 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    bbf9:	55                   	push   %rbp
    bbfa:	48 89 e5             	mov    %rsp,%rbp
    bbfd:	48 83 ec 10          	sub    $0x10,%rsp
    bc01:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    bc05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc09:	48 89 c7             	mov    %rax,%rdi
    bc0c:	e8 33 02 00 00       	call   be44 <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>
    bc11:	c9                   	leave
    bc12:	c3                   	ret

000000000000bc13 <_ZSt3getILm1EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    bc13:	55                   	push   %rbp
    bc14:	48 89 e5             	mov    %rsp,%rbp
    bc17:	48 83 ec 10          	sub    $0x10,%rsp
    bc1b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    bc1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc23:	48 89 c7             	mov    %rax,%rdi
    bc26:	e8 33 02 00 00       	call   be5e <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
    bc2b:	c9                   	leave
    bc2c:	c3                   	ret

000000000000bc2d <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    bc2d:	55                   	push   %rbp
    bc2e:	48 89 e5             	mov    %rsp,%rbp
    bc31:	48 83 ec 10          	sub    $0x10,%rsp
    bc35:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    bc39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc3d:	48 89 c7             	mov    %rax,%rdi
    bc40:	e8 33 02 00 00       	call   be78 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
    bc45:	c9                   	leave
    bc46:	c3                   	ret

000000000000bc47 <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    bc47:	55                   	push   %rbp
    bc48:	48 89 e5             	mov    %rsp,%rbp
    bc4b:	48 83 ec 10          	sub    $0x10,%rsp
    bc4f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    bc53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc57:	48 89 c7             	mov    %rax,%rdi
    bc5a:	e8 33 02 00 00       	call   be92 <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>
    bc5f:	c9                   	leave
    bc60:	c3                   	ret

000000000000bc61 <_ZSt3getILm1EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    bc61:	55                   	push   %rbp
    bc62:	48 89 e5             	mov    %rsp,%rbp
    bc65:	48 83 ec 10          	sub    $0x10,%rsp
    bc69:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    bc6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc71:	48 89 c7             	mov    %rax,%rdi
    bc74:	e8 33 02 00 00       	call   beac <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
    bc79:	c9                   	leave
    bc7a:	c3                   	ret

000000000000bc7b <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
    bc7b:	55                   	push   %rbp
    bc7c:	48 89 e5             	mov    %rsp,%rbp
    bc7f:	48 83 ec 10          	sub    $0x10,%rsp
    bc83:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    bc87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc8b:	48 89 c7             	mov    %rax,%rdi
    bc8e:	e8 33 02 00 00       	call   bec6 <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
    bc93:	c9                   	leave
    bc94:	c3                   	ret

000000000000bc95 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii13CommandBufferEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
    bc95:	55                   	push   %rbp
    bc96:	48 89 e5             	mov    %rsp,%rbp
    bc99:	48 83 ec 10          	sub    $0x10,%rsp
    bc9d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bca1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
    bca5:	eb 19                	jmp    bcc0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii13CommandBufferEEEvT_S6_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
    bca7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcab:	48 89 c7             	mov    %rax,%rdi
    bcae:	e8 5d 02 00 00       	call   bf10 <_ZSt11__addressofIN2vk4raii13CommandBufferEEPT_RS3_>
    bcb3:	48 89 c7             	mov    %rax,%rdi
    bcb6:	e8 63 02 00 00       	call   bf1e <_ZSt8_DestroyIN2vk4raii13CommandBufferEEvPT_>
	  for (; __first != __last; ++__first)
    bcbb:	48 83 45 f8 20       	addq   $0x20,-0x8(%rbp)
    bcc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcc4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    bcc8:	75 dd                	jne    bca7 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii13CommandBufferEEEvT_S6_+0x12>
	}
    bcca:	90                   	nop
    bccb:	90                   	nop
    bccc:	c9                   	leave
    bccd:	c3                   	ret

000000000000bcce <_ZSt10destroy_atIN2vk4raii13CommandBufferEEvPT_>:
    destroy_at(_Tp* __location)
    bcce:	55                   	push   %rbp
    bccf:	48 89 e5             	mov    %rsp,%rbp
    bcd2:	48 83 ec 10          	sub    $0x10,%rsp
    bcd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__location->~_Tp();
    bcda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcde:	48 89 c7             	mov    %rax,%rdi
    bce1:	e8 92 da ff ff       	call   9778 <_ZN2vk4raii13CommandBufferD1Ev>
    }
    bce6:	90                   	nop
    bce7:	c9                   	leave
    bce8:	c3                   	ret

000000000000bce9 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    bce9:	55                   	push   %rbp
    bcea:	48 89 e5             	mov    %rsp,%rbp
    bced:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
    bcf1:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
      }
    bcf8:	5d                   	pop    %rbp
    bcf9:	c3                   	ret

000000000000bcfa <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
    bcfa:	55                   	push   %rbp
    bcfb:	48 89 e5             	mov    %rsp,%rbp
    bcfe:	48 83 ec 10          	sub    $0x10,%rsp
    bd02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
    bd06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd0a:	48 89 c7             	mov    %rax,%rdi
    bd0d:	e8 99 02 00 00       	call   bfab <_ZSt11__addressofIKcEPT_RS1_>
    bd12:	c9                   	leave
    bd13:	c3                   	ret

000000000000bd14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
    bd14:	55                   	push   %rbp
    bd15:	48 89 e5             	mov    %rsp,%rbp
    bd18:	53                   	push   %rbx
    bd19:	48 83 ec 28          	sub    $0x28,%rsp
    bd1d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    bd21:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	return (less<const _CharT*>()(__s, _M_data())
    bd25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    bd29:	48 89 c7             	mov    %rax,%rdi
    bd2c:	e8 39 ec ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    bd31:	48 89 c2             	mov    %rax,%rdx
    bd34:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    bd38:	48 8d 45 ee          	lea    -0x12(%rbp),%rax
    bd3c:	48 89 ce             	mov    %rcx,%rsi
    bd3f:	48 89 c7             	mov    %rax,%rdi
    bd42:	e8 73 02 00 00       	call   bfba <_ZNKSt4lessIPKcEclES1_S1_>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    bd47:	84 c0                	test   %al,%al
    bd49:	75 36                	jne    bd81 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x6d>
    bd4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    bd4f:	48 89 c7             	mov    %rax,%rdi
    bd52:	e8 13 ec ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    bd57:	48 89 c3             	mov    %rax,%rbx
    bd5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    bd5e:	48 89 c7             	mov    %rax,%rdi
    bd61:	e8 90 a5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    bd66:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
    bd6a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    bd6e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    bd72:	48 89 ce             	mov    %rcx,%rsi
    bd75:	48 89 c7             	mov    %rax,%rdi
    bd78:	e8 3d 02 00 00       	call   bfba <_ZNKSt4lessIPKcEclES1_S1_>
    bd7d:	84 c0                	test   %al,%al
    bd7f:	74 07                	je     bd88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x74>
    bd81:	b8 01 00 00 00       	mov    $0x1,%eax
    bd86:	eb 05                	jmp    bd8d <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x79>
    bd88:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    bd8d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    bd91:	c9                   	leave
    bd92:	c3                   	ret

000000000000bd93 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>:
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
    bd93:	55                   	push   %rbp
    bd94:	48 89 e5             	mov    %rsp,%rbp
    bd97:	48 83 ec 20          	sub    $0x20,%rsp
    bd9b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd9f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bda3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
    bda7:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
    bdac:	75 15                	jne    bdc3 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
    bdae:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bdb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdb6:	48 89 d6             	mov    %rdx,%rsi
    bdb9:	48 89 c7             	mov    %rax,%rdi
    bdbc:	e8 05 a4 ff ff       	call   61c6 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
    bdc1:	eb 17                	jmp    bdda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x47>
	  traits_type::move(__d, __s, __n);
    bdc3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bdc7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    bdcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdcf:	48 89 ce             	mov    %rcx,%rsi
    bdd2:	48 89 c7             	mov    %rax,%rdi
    bdd5:	e8 5c a4 ff ff       	call   6236 <_ZNSt11char_traitsIcE4moveEPcPKcm>
      }
    bdda:	90                   	nop
    bddb:	c9                   	leave
    bddc:	c3                   	ret
    bddd:	90                   	nop

000000000000bdde <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEEC1Ev>:
      _Tuple_impl()
    bdde:	55                   	push   %rbp
    bddf:	48 89 e5             	mov    %rsp,%rbp
    bde2:	48 83 ec 10          	sub    $0x10,%rsp
    bde6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
    bdea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdee:	48 89 c7             	mov    %rax,%rdi
    bdf1:	e8 fe 01 00 00       	call   bff4 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EEC1Ev>
    bdf6:	90                   	nop
    bdf7:	c9                   	leave
    bdf8:	c3                   	ret
    bdf9:	90                   	nop

000000000000bdfa <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EEC1Ev>:
      constexpr _Head_base()
    bdfa:	55                   	push   %rbp
    bdfb:	48 89 e5             	mov    %rsp,%rbp
    bdfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
    be02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be06:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    be0d:	90                   	nop
    be0e:	5d                   	pop    %rbp
    be0f:	c3                   	ret

000000000000be10 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    be10:	55                   	push   %rbp
    be11:	48 89 e5             	mov    %rsp,%rbp
    be14:	48 83 ec 10          	sub    $0x10,%rsp
    be18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be20:	48 89 c7             	mov    %rax,%rdi
    be23:	e8 d7 01 00 00       	call   bfff <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERS4_>
    be28:	c9                   	leave
    be29:	c3                   	ret

000000000000be2a <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    be2a:	55                   	push   %rbp
    be2b:	48 89 e5             	mov    %rsp,%rbp
    be2e:	48 83 ec 10          	sub    $0x10,%rsp
    be32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    be36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be3a:	48 89 c7             	mov    %rax,%rdi
    be3d:	e8 cb 01 00 00       	call   c00d <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEE7_M_headERS5_>
    be42:	c9                   	leave
    be43:	c3                   	ret

000000000000be44 <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    be44:	55                   	push   %rbp
    be45:	48 89 e5             	mov    %rsp,%rbp
    be48:	48 83 ec 10          	sub    $0x10,%rsp
    be4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be54:	48 89 c7             	mov    %rax,%rdi
    be57:	e8 cb 01 00 00       	call   c027 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERS4_>
    be5c:	c9                   	leave
    be5d:	c3                   	ret

000000000000be5e <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    be5e:	55                   	push   %rbp
    be5f:	48 89 e5             	mov    %rsp,%rbp
    be62:	48 83 ec 10          	sub    $0x10,%rsp
    be66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    be6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be6e:	48 89 c7             	mov    %rax,%rdi
    be71:	e8 bf 01 00 00       	call   c035 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEE7_M_headERS5_>
    be76:	c9                   	leave
    be77:	c3                   	ret

000000000000be78 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    be78:	55                   	push   %rbp
    be79:	48 89 e5             	mov    %rsp,%rbp
    be7c:	48 83 ec 10          	sub    $0x10,%rsp
    be80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    be84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be88:	48 89 c7             	mov    %rax,%rdi
    be8b:	e8 bf 01 00 00       	call   c04f <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>
    be90:	c9                   	leave
    be91:	c3                   	ret

000000000000be92 <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    be92:	55                   	push   %rbp
    be93:	48 89 e5             	mov    %rsp,%rbp
    be96:	48 83 ec 10          	sub    $0x10,%rsp
    be9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bea2:	48 89 c7             	mov    %rax,%rdi
    bea5:	e8 bf 01 00 00       	call   c069 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERS4_>
    beaa:	c9                   	leave
    beab:	c3                   	ret

000000000000beac <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    beac:	55                   	push   %rbp
    bead:	48 89 e5             	mov    %rsp,%rbp
    beb0:	48 83 ec 10          	sub    $0x10,%rsp
    beb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    beb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bebc:	48 89 c7             	mov    %rax,%rdi
    bebf:	e8 b3 01 00 00       	call   c077 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEE7_M_headERS5_>
    bec4:	c9                   	leave
    bec5:	c3                   	ret

000000000000bec6 <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    bec6:	55                   	push   %rbp
    bec7:	48 89 e5             	mov    %rsp,%rbp
    beca:	48 83 ec 10          	sub    $0x10,%rsp
    bece:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    bed2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bed6:	48 89 c7             	mov    %rax,%rdi
    bed9:	e8 b3 01 00 00       	call   c091 <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>
    bede:	c9                   	leave
    bedf:	c3                   	ret

000000000000bee0 <_ZNSt15__new_allocatorIN2vk4raii13CommandBufferEE10deallocateEPS2_m>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    bee0:	55                   	push   %rbp
    bee1:	48 89 e5             	mov    %rsp,%rbp
    bee4:	48 83 ec 20          	sub    $0x20,%rsp
    bee8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    beec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bef0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    bef4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bef8:	48 c1 e0 05          	shl    $0x5,%rax
    befc:	48 89 c2             	mov    %rax,%rdx
    beff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bf03:	48 89 d6             	mov    %rdx,%rsi
    bf06:	48 89 c7             	mov    %rax,%rdi
    bf09:	e8 22 93 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    bf0e:	c9                   	leave
    bf0f:	c3                   	ret

000000000000bf10 <_ZSt11__addressofIN2vk4raii13CommandBufferEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    bf10:	55                   	push   %rbp
    bf11:	48 89 e5             	mov    %rsp,%rbp
    bf14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    bf18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf1c:	5d                   	pop    %rbp
    bf1d:	c3                   	ret

000000000000bf1e <_ZSt8_DestroyIN2vk4raii13CommandBufferEEvPT_>:
    _Destroy(_Tp* __pointer)
    bf1e:	55                   	push   %rbp
    bf1f:	48 89 e5             	mov    %rsp,%rbp
    bf22:	48 83 ec 10          	sub    $0x10,%rsp
    bf26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
    bf2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf2e:	48 89 c7             	mov    %rax,%rdi
    bf31:	e8 98 fd ff ff       	call   bcce <_ZSt10destroy_atIN2vk4raii13CommandBufferEEvPT_>
    }
    bf36:	90                   	nop
    bf37:	c9                   	leave
    bf38:	c3                   	ret
    bf39:	90                   	nop

000000000000bf3a <_ZNSt15__new_allocatorIcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    bf3a:	55                   	push   %rbp
    bf3b:	48 89 e5             	mov    %rsp,%rbp
    bf3e:	48 83 ec 20          	sub    $0x20,%rsp
    bf42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf46:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bf4a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    bf4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf52:	48 89 c7             	mov    %rax,%rdi
    bf55:	e8 52 01 00 00       	call   c0ac <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>
    bf5a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    bf5e:	0f 92 c0             	setb   %al
    bf61:	0f b6 c0             	movzbl %al,%eax
    bf64:	48 85 c0             	test   %rax,%rax
    bf67:	0f 95 c0             	setne  %al
    bf6a:	84 c0                	test   %al,%al
    bf6c:	74 05                	je     bf73 <_ZNSt15__new_allocatorIcE8allocateEmPKv+0x39>
	    std::__throw_bad_alloc();
    bf6e:	e8 0d 91 ff ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    bf73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bf77:	48 89 c7             	mov    %rax,%rdi
    bf7a:	e8 a1 92 ff ff       	call   5220 <_Znwm@plt>
    bf7f:	90                   	nop
      }
    bf80:	c9                   	leave
    bf81:	c3                   	ret

000000000000bf82 <_ZNSt15__new_allocatorIcE10deallocateEPcm>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    bf82:	55                   	push   %rbp
    bf83:	48 89 e5             	mov    %rsp,%rbp
    bf86:	48 83 ec 20          	sub    $0x20,%rsp
    bf8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf8e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bf92:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    bf96:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bf9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bf9e:	48 89 d6             	mov    %rdx,%rsi
    bfa1:	48 89 c7             	mov    %rax,%rdi
    bfa4:	e8 87 92 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    bfa9:	c9                   	leave
    bfaa:	c3                   	ret

000000000000bfab <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    bfab:	55                   	push   %rbp
    bfac:	48 89 e5             	mov    %rsp,%rbp
    bfaf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    bfb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfb7:	5d                   	pop    %rbp
    bfb8:	c3                   	ret
    bfb9:	90                   	nop

000000000000bfba <_ZNKSt4lessIPKcEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
    bfba:	55                   	push   %rbp
    bfbb:	48 89 e5             	mov    %rsp,%rbp
    bfbe:	48 83 ec 20          	sub    $0x20,%rsp
    bfc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bfc6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bfca:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
    bfce:	e8 cb a1 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    bfd3:	84 c0                	test   %al,%al
    bfd5:	74 0d                	je     bfe4 <_ZNKSt4lessIPKcEclES1_S1_+0x2a>
	  return __x < __y;
    bfd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bfdb:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    bfdf:	0f 92 c0             	setb   %al
    bfe2:	eb 0e                	jmp    bff2 <_ZNKSt4lessIPKcEclES1_S1_+0x38>
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
    bfe4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bfe8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bfec:	48 39 c2             	cmp    %rax,%rdx
    bfef:	0f 92 c0             	setb   %al
      }
    bff2:	c9                   	leave
    bff3:	c3                   	ret

000000000000bff4 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EEC1Ev>:
      constexpr _Head_base()
    bff4:	55                   	push   %rbp
    bff5:	48 89 e5             	mov    %rsp,%rbp
    bff8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
    bffc:	90                   	nop
    bffd:	5d                   	pop    %rbp
    bffe:	c3                   	ret

000000000000bfff <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    bfff:	55                   	push   %rbp
    c000:	48 89 e5             	mov    %rsp,%rbp
    c003:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c00b:	5d                   	pop    %rbp
    c00c:	c3                   	ret

000000000000c00d <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    c00d:	55                   	push   %rbp
    c00e:	48 89 e5             	mov    %rsp,%rbp
    c011:	48 83 ec 10          	sub    $0x10,%rsp
    c015:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c019:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c01d:	48 89 c7             	mov    %rax,%rdi
    c020:	e8 9b 00 00 00       	call   c0c0 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EE7_M_headERS5_>
    c025:	c9                   	leave
    c026:	c3                   	ret

000000000000c027 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    c027:	55                   	push   %rbp
    c028:	48 89 e5             	mov    %rsp,%rbp
    c02b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c02f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c033:	5d                   	pop    %rbp
    c034:	c3                   	ret

000000000000c035 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    c035:	55                   	push   %rbp
    c036:	48 89 e5             	mov    %rsp,%rbp
    c039:	48 83 ec 10          	sub    $0x10,%rsp
    c03d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c041:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c045:	48 89 c7             	mov    %rax,%rdi
    c048:	e8 81 00 00 00       	call   c0ce <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EE7_M_headERS5_>
    c04d:	c9                   	leave
    c04e:	c3                   	ret

000000000000c04f <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    c04f:	55                   	push   %rbp
    c050:	48 89 e5             	mov    %rsp,%rbp
    c053:	48 83 ec 10          	sub    $0x10,%rsp
    c057:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c05b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c05f:	48 89 c7             	mov    %rax,%rdi
    c062:	e8 75 00 00 00       	call   c0dc <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERKS4_>
    c067:	c9                   	leave
    c068:	c3                   	ret

000000000000c069 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    c069:	55                   	push   %rbp
    c06a:	48 89 e5             	mov    %rsp,%rbp
    c06d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c071:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c075:	5d                   	pop    %rbp
    c076:	c3                   	ret

000000000000c077 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    c077:	55                   	push   %rbp
    c078:	48 89 e5             	mov    %rsp,%rbp
    c07b:	48 83 ec 10          	sub    $0x10,%rsp
    c07f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c083:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c087:	48 89 c7             	mov    %rax,%rdi
    c08a:	e8 5b 00 00 00       	call   c0ea <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EE7_M_headERS5_>
    c08f:	c9                   	leave
    c090:	c3                   	ret

000000000000c091 <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    c091:	55                   	push   %rbp
    c092:	48 89 e5             	mov    %rsp,%rbp
    c095:	48 83 ec 10          	sub    $0x10,%rsp
    c099:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c09d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0a1:	48 89 c7             	mov    %rax,%rdi
    c0a4:	e8 4f 00 00 00       	call   c0f8 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERKS4_>
    c0a9:	c9                   	leave
    c0aa:	c3                   	ret
    c0ab:	90                   	nop

000000000000c0ac <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    c0ac:	55                   	push   %rbp
    c0ad:	48 89 e5             	mov    %rsp,%rbp
    c0b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    c0b4:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
    c0bb:	ff ff 7f 
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
    c0be:	5d                   	pop    %rbp
    c0bf:	c3                   	ret

000000000000c0c0 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EE7_M_headERS5_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    c0c0:	55                   	push   %rbp
    c0c1:	48 89 e5             	mov    %rsp,%rbp
    c0c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0cc:	5d                   	pop    %rbp
    c0cd:	c3                   	ret

000000000000c0ce <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EE7_M_headERS5_>:
    c0ce:	55                   	push   %rbp
    c0cf:	48 89 e5             	mov    %rsp,%rbp
    c0d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0da:	5d                   	pop    %rbp
    c0db:	c3                   	ret

000000000000c0dc <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
    c0dc:	55                   	push   %rbp
    c0dd:	48 89 e5             	mov    %rsp,%rbp
    c0e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0e8:	5d                   	pop    %rbp
    c0e9:	c3                   	ret

000000000000c0ea <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EE7_M_headERS5_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    c0ea:	55                   	push   %rbp
    c0eb:	48 89 e5             	mov    %rsp,%rbp
    c0ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0f6:	5d                   	pop    %rbp
    c0f7:	c3                   	ret

000000000000c0f8 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
    c0f8:	55                   	push   %rbp
    c0f9:	48 89 e5             	mov    %rsp,%rbp
    c0fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c104:	5d                   	pop    %rbp
    c105:	c3                   	ret

000000000000c106 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>:
  class CompressionExhaustedEXTError : public SystemError
    c106:	55                   	push   %rbp
    c107:	48 89 e5             	mov    %rsp,%rbp
    c10a:	48 83 ec 10          	sub    $0x10,%rsp
    c10e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c112:	48 8d 15 d7 3f 03 00 	lea    0x33fd7(%rip),%rdx        # 400f0 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x10>
    c119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c11d:	48 89 10             	mov    %rdx,(%rax)
    c120:	48 8d 15 f1 3f 03 00 	lea    0x33ff1(%rip),%rdx        # 40118 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x38>
    c127:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c12b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c12f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c133:	48 89 c7             	mov    %rax,%rdi
    c136:	e8 0b b8 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c13b:	90                   	nop
    c13c:	c9                   	leave
    c13d:	c3                   	ret

000000000000c13e <_ZThn8_N2vk28CompressionExhaustedEXTErrorD1Ev>:
    c13e:	48 83 ef 08          	sub    $0x8,%rdi
    c142:	eb c2                	jmp    c106 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>

000000000000c144 <_ZN2vk28CompressionExhaustedEXTErrorD0Ev>:
    c144:	55                   	push   %rbp
    c145:	48 89 e5             	mov    %rsp,%rbp
    c148:	48 83 ec 10          	sub    $0x10,%rsp
    c14c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c154:	48 89 c7             	mov    %rax,%rdi
    c157:	e8 aa ff ff ff       	call   c106 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    c15c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c160:	be 28 00 00 00       	mov    $0x28,%esi
    c165:	48 89 c7             	mov    %rax,%rdi
    c168:	e8 c3 90 ff ff       	call   5230 <_ZdlPvm@plt>
    c16d:	c9                   	leave
    c16e:	c3                   	ret

000000000000c16f <_ZThn8_N2vk28CompressionExhaustedEXTErrorD0Ev>:
    c16f:	48 83 ef 08          	sub    $0x8,%rdi
    c173:	eb cf                	jmp    c144 <_ZN2vk28CompressionExhaustedEXTErrorD0Ev>
    c175:	90                   	nop

000000000000c176 <_ZN2vk20NotPermittedKHRErrorD1Ev>:
  class NotPermittedKHRError : public SystemError
    c176:	55                   	push   %rbp
    c177:	48 89 e5             	mov    %rsp,%rbp
    c17a:	48 83 ec 10          	sub    $0x10,%rsp
    c17e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c182:	48 8d 15 b7 3f 03 00 	lea    0x33fb7(%rip),%rdx        # 40140 <_ZTVN2vk20NotPermittedKHRErrorE+0x10>
    c189:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c18d:	48 89 10             	mov    %rdx,(%rax)
    c190:	48 8d 15 d1 3f 03 00 	lea    0x33fd1(%rip),%rdx        # 40168 <_ZTVN2vk20NotPermittedKHRErrorE+0x38>
    c197:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c19b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c19f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1a3:	48 89 c7             	mov    %rax,%rdi
    c1a6:	e8 9b b7 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c1ab:	90                   	nop
    c1ac:	c9                   	leave
    c1ad:	c3                   	ret

000000000000c1ae <_ZThn8_N2vk20NotPermittedKHRErrorD1Ev>:
    c1ae:	48 83 ef 08          	sub    $0x8,%rdi
    c1b2:	eb c2                	jmp    c176 <_ZN2vk20NotPermittedKHRErrorD1Ev>

000000000000c1b4 <_ZN2vk20NotPermittedKHRErrorD0Ev>:
    c1b4:	55                   	push   %rbp
    c1b5:	48 89 e5             	mov    %rsp,%rbp
    c1b8:	48 83 ec 10          	sub    $0x10,%rsp
    c1bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c1c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1c4:	48 89 c7             	mov    %rax,%rdi
    c1c7:	e8 aa ff ff ff       	call   c176 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    c1cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1d0:	be 28 00 00 00       	mov    $0x28,%esi
    c1d5:	48 89 c7             	mov    %rax,%rdi
    c1d8:	e8 53 90 ff ff       	call   5230 <_ZdlPvm@plt>
    c1dd:	c9                   	leave
    c1de:	c3                   	ret

000000000000c1df <_ZThn8_N2vk20NotPermittedKHRErrorD0Ev>:
    c1df:	48 83 ef 08          	sub    $0x8,%rdi
    c1e3:	eb cf                	jmp    c1b4 <_ZN2vk20NotPermittedKHRErrorD0Ev>
    c1e5:	90                   	nop

000000000000c1e6 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>:
  class InvalidDrmFormatModifierPlaneLayoutEXTError : public SystemError
    c1e6:	55                   	push   %rbp
    c1e7:	48 89 e5             	mov    %rsp,%rbp
    c1ea:	48 83 ec 10          	sub    $0x10,%rsp
    c1ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c1f2:	48 8d 15 97 3f 03 00 	lea    0x33f97(%rip),%rdx        # 40190 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x10>
    c1f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1fd:	48 89 10             	mov    %rdx,(%rax)
    c200:	48 8d 15 b1 3f 03 00 	lea    0x33fb1(%rip),%rdx        # 401b8 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x38>
    c207:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c20b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c20f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c213:	48 89 c7             	mov    %rax,%rdi
    c216:	e8 2b b7 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c21b:	90                   	nop
    c21c:	c9                   	leave
    c21d:	c3                   	ret

000000000000c21e <_ZThn8_N2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>:
    c21e:	48 83 ef 08          	sub    $0x8,%rdi
    c222:	eb c2                	jmp    c1e6 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>

000000000000c224 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD0Ev>:
    c224:	55                   	push   %rbp
    c225:	48 89 e5             	mov    %rsp,%rbp
    c228:	48 83 ec 10          	sub    $0x10,%rsp
    c22c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c230:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c234:	48 89 c7             	mov    %rax,%rdi
    c237:	e8 aa ff ff ff       	call   c1e6 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    c23c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c240:	be 28 00 00 00       	mov    $0x28,%esi
    c245:	48 89 c7             	mov    %rax,%rdi
    c248:	e8 e3 8f ff ff       	call   5230 <_ZdlPvm@plt>
    c24d:	c9                   	leave
    c24e:	c3                   	ret

000000000000c24f <_ZThn8_N2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD0Ev>:
    c24f:	48 83 ef 08          	sub    $0x8,%rdi
    c253:	eb cf                	jmp    c224 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD0Ev>
    c255:	90                   	nop

000000000000c256 <_ZN2vk20InvalidShaderNVErrorD1Ev>:
  class InvalidShaderNVError : public SystemError
    c256:	55                   	push   %rbp
    c257:	48 89 e5             	mov    %rsp,%rbp
    c25a:	48 83 ec 10          	sub    $0x10,%rsp
    c25e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c262:	48 8d 15 77 3f 03 00 	lea    0x33f77(%rip),%rdx        # 401e0 <_ZTVN2vk20InvalidShaderNVErrorE+0x10>
    c269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c26d:	48 89 10             	mov    %rdx,(%rax)
    c270:	48 8d 15 91 3f 03 00 	lea    0x33f91(%rip),%rdx        # 40208 <_ZTVN2vk20InvalidShaderNVErrorE+0x38>
    c277:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c27b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c27f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c283:	48 89 c7             	mov    %rax,%rdi
    c286:	e8 bb b6 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c28b:	90                   	nop
    c28c:	c9                   	leave
    c28d:	c3                   	ret

000000000000c28e <_ZThn8_N2vk20InvalidShaderNVErrorD1Ev>:
    c28e:	48 83 ef 08          	sub    $0x8,%rdi
    c292:	eb c2                	jmp    c256 <_ZN2vk20InvalidShaderNVErrorD1Ev>

000000000000c294 <_ZN2vk20InvalidShaderNVErrorD0Ev>:
    c294:	55                   	push   %rbp
    c295:	48 89 e5             	mov    %rsp,%rbp
    c298:	48 83 ec 10          	sub    $0x10,%rsp
    c29c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c2a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2a4:	48 89 c7             	mov    %rax,%rdi
    c2a7:	e8 aa ff ff ff       	call   c256 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    c2ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2b0:	be 28 00 00 00       	mov    $0x28,%esi
    c2b5:	48 89 c7             	mov    %rax,%rdi
    c2b8:	e8 73 8f ff ff       	call   5230 <_ZdlPvm@plt>
    c2bd:	c9                   	leave
    c2be:	c3                   	ret

000000000000c2bf <_ZThn8_N2vk20InvalidShaderNVErrorD0Ev>:
    c2bf:	48 83 ef 08          	sub    $0x8,%rdi
    c2c3:	eb cf                	jmp    c294 <_ZN2vk20InvalidShaderNVErrorD0Ev>
    c2c5:	90                   	nop

000000000000c2c6 <_ZN2vk24ValidationFailedEXTErrorD1Ev>:
  class ValidationFailedEXTError : public SystemError
    c2c6:	55                   	push   %rbp
    c2c7:	48 89 e5             	mov    %rsp,%rbp
    c2ca:	48 83 ec 10          	sub    $0x10,%rsp
    c2ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c2d2:	48 8d 15 57 3f 03 00 	lea    0x33f57(%rip),%rdx        # 40230 <_ZTVN2vk24ValidationFailedEXTErrorE+0x10>
    c2d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2dd:	48 89 10             	mov    %rdx,(%rax)
    c2e0:	48 8d 15 71 3f 03 00 	lea    0x33f71(%rip),%rdx        # 40258 <_ZTVN2vk24ValidationFailedEXTErrorE+0x38>
    c2e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c2ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2f3:	48 89 c7             	mov    %rax,%rdi
    c2f6:	e8 4b b6 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c2fb:	90                   	nop
    c2fc:	c9                   	leave
    c2fd:	c3                   	ret

000000000000c2fe <_ZThn8_N2vk24ValidationFailedEXTErrorD1Ev>:
    c2fe:	48 83 ef 08          	sub    $0x8,%rdi
    c302:	eb c2                	jmp    c2c6 <_ZN2vk24ValidationFailedEXTErrorD1Ev>

000000000000c304 <_ZN2vk24ValidationFailedEXTErrorD0Ev>:
    c304:	55                   	push   %rbp
    c305:	48 89 e5             	mov    %rsp,%rbp
    c308:	48 83 ec 10          	sub    $0x10,%rsp
    c30c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c310:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c314:	48 89 c7             	mov    %rax,%rdi
    c317:	e8 aa ff ff ff       	call   c2c6 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    c31c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c320:	be 28 00 00 00       	mov    $0x28,%esi
    c325:	48 89 c7             	mov    %rax,%rdi
    c328:	e8 03 8f ff ff       	call   5230 <_ZdlPvm@plt>
    c32d:	c9                   	leave
    c32e:	c3                   	ret

000000000000c32f <_ZThn8_N2vk24ValidationFailedEXTErrorD0Ev>:
    c32f:	48 83 ef 08          	sub    $0x8,%rdi
    c333:	eb cf                	jmp    c304 <_ZN2vk24ValidationFailedEXTErrorD0Ev>
    c335:	90                   	nop

000000000000c336 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>:
  class IncompatibleDisplayKHRError : public SystemError
    c336:	55                   	push   %rbp
    c337:	48 89 e5             	mov    %rsp,%rbp
    c33a:	48 83 ec 10          	sub    $0x10,%rsp
    c33e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c342:	48 8d 15 37 3f 03 00 	lea    0x33f37(%rip),%rdx        # 40280 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x10>
    c349:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c34d:	48 89 10             	mov    %rdx,(%rax)
    c350:	48 8d 15 51 3f 03 00 	lea    0x33f51(%rip),%rdx        # 402a8 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x38>
    c357:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c35b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c35f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c363:	48 89 c7             	mov    %rax,%rdi
    c366:	e8 db b5 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c36b:	90                   	nop
    c36c:	c9                   	leave
    c36d:	c3                   	ret

000000000000c36e <_ZThn8_N2vk27IncompatibleDisplayKHRErrorD1Ev>:
    c36e:	48 83 ef 08          	sub    $0x8,%rdi
    c372:	eb c2                	jmp    c336 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>

000000000000c374 <_ZN2vk27IncompatibleDisplayKHRErrorD0Ev>:
    c374:	55                   	push   %rbp
    c375:	48 89 e5             	mov    %rsp,%rbp
    c378:	48 83 ec 10          	sub    $0x10,%rsp
    c37c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c380:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c384:	48 89 c7             	mov    %rax,%rdi
    c387:	e8 aa ff ff ff       	call   c336 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    c38c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c390:	be 28 00 00 00       	mov    $0x28,%esi
    c395:	48 89 c7             	mov    %rax,%rdi
    c398:	e8 93 8e ff ff       	call   5230 <_ZdlPvm@plt>
    c39d:	c9                   	leave
    c39e:	c3                   	ret

000000000000c39f <_ZThn8_N2vk27IncompatibleDisplayKHRErrorD0Ev>:
    c39f:	48 83 ef 08          	sub    $0x8,%rdi
    c3a3:	eb cf                	jmp    c374 <_ZN2vk27IncompatibleDisplayKHRErrorD0Ev>
    c3a5:	90                   	nop

000000000000c3a6 <_ZN2vk17OutOfDateKHRErrorD1Ev>:
  class OutOfDateKHRError : public SystemError
    c3a6:	55                   	push   %rbp
    c3a7:	48 89 e5             	mov    %rsp,%rbp
    c3aa:	48 83 ec 10          	sub    $0x10,%rsp
    c3ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c3b2:	48 8d 15 17 3f 03 00 	lea    0x33f17(%rip),%rdx        # 402d0 <_ZTVN2vk17OutOfDateKHRErrorE+0x10>
    c3b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3bd:	48 89 10             	mov    %rdx,(%rax)
    c3c0:	48 8d 15 31 3f 03 00 	lea    0x33f31(%rip),%rdx        # 402f8 <_ZTVN2vk17OutOfDateKHRErrorE+0x38>
    c3c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3cb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c3cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3d3:	48 89 c7             	mov    %rax,%rdi
    c3d6:	e8 6b b5 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c3db:	90                   	nop
    c3dc:	c9                   	leave
    c3dd:	c3                   	ret

000000000000c3de <_ZThn8_N2vk17OutOfDateKHRErrorD1Ev>:
    c3de:	48 83 ef 08          	sub    $0x8,%rdi
    c3e2:	eb c2                	jmp    c3a6 <_ZN2vk17OutOfDateKHRErrorD1Ev>

000000000000c3e4 <_ZN2vk17OutOfDateKHRErrorD0Ev>:
    c3e4:	55                   	push   %rbp
    c3e5:	48 89 e5             	mov    %rsp,%rbp
    c3e8:	48 83 ec 10          	sub    $0x10,%rsp
    c3ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c3f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3f4:	48 89 c7             	mov    %rax,%rdi
    c3f7:	e8 aa ff ff ff       	call   c3a6 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    c3fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c400:	be 28 00 00 00       	mov    $0x28,%esi
    c405:	48 89 c7             	mov    %rax,%rdi
    c408:	e8 23 8e ff ff       	call   5230 <_ZdlPvm@plt>
    c40d:	c9                   	leave
    c40e:	c3                   	ret

000000000000c40f <_ZThn8_N2vk17OutOfDateKHRErrorD0Ev>:
    c40f:	48 83 ef 08          	sub    $0x8,%rdi
    c413:	eb cf                	jmp    c3e4 <_ZN2vk17OutOfDateKHRErrorD0Ev>
    c415:	90                   	nop

000000000000c416 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>:
  class NativeWindowInUseKHRError : public SystemError
    c416:	55                   	push   %rbp
    c417:	48 89 e5             	mov    %rsp,%rbp
    c41a:	48 83 ec 10          	sub    $0x10,%rsp
    c41e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c422:	48 8d 15 f7 3e 03 00 	lea    0x33ef7(%rip),%rdx        # 40320 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x10>
    c429:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c42d:	48 89 10             	mov    %rdx,(%rax)
    c430:	48 8d 15 11 3f 03 00 	lea    0x33f11(%rip),%rdx        # 40348 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x38>
    c437:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c43b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c43f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c443:	48 89 c7             	mov    %rax,%rdi
    c446:	e8 fb b4 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c44b:	90                   	nop
    c44c:	c9                   	leave
    c44d:	c3                   	ret

000000000000c44e <_ZThn8_N2vk25NativeWindowInUseKHRErrorD1Ev>:
    c44e:	48 83 ef 08          	sub    $0x8,%rdi
    c452:	eb c2                	jmp    c416 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>

000000000000c454 <_ZN2vk25NativeWindowInUseKHRErrorD0Ev>:
    c454:	55                   	push   %rbp
    c455:	48 89 e5             	mov    %rsp,%rbp
    c458:	48 83 ec 10          	sub    $0x10,%rsp
    c45c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c460:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c464:	48 89 c7             	mov    %rax,%rdi
    c467:	e8 aa ff ff ff       	call   c416 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    c46c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c470:	be 28 00 00 00       	mov    $0x28,%esi
    c475:	48 89 c7             	mov    %rax,%rdi
    c478:	e8 b3 8d ff ff       	call   5230 <_ZdlPvm@plt>
    c47d:	c9                   	leave
    c47e:	c3                   	ret

000000000000c47f <_ZThn8_N2vk25NativeWindowInUseKHRErrorD0Ev>:
    c47f:	48 83 ef 08          	sub    $0x8,%rdi
    c483:	eb cf                	jmp    c454 <_ZN2vk25NativeWindowInUseKHRErrorD0Ev>
    c485:	90                   	nop

000000000000c486 <_ZN2vk19SurfaceLostKHRErrorD1Ev>:
  class SurfaceLostKHRError : public SystemError
    c486:	55                   	push   %rbp
    c487:	48 89 e5             	mov    %rsp,%rbp
    c48a:	48 83 ec 10          	sub    $0x10,%rsp
    c48e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c492:	48 8d 15 d7 3e 03 00 	lea    0x33ed7(%rip),%rdx        # 40370 <_ZTVN2vk19SurfaceLostKHRErrorE+0x10>
    c499:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c49d:	48 89 10             	mov    %rdx,(%rax)
    c4a0:	48 8d 15 f1 3e 03 00 	lea    0x33ef1(%rip),%rdx        # 40398 <_ZTVN2vk19SurfaceLostKHRErrorE+0x38>
    c4a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4ab:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c4af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4b3:	48 89 c7             	mov    %rax,%rdi
    c4b6:	e8 8b b4 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c4bb:	90                   	nop
    c4bc:	c9                   	leave
    c4bd:	c3                   	ret

000000000000c4be <_ZThn8_N2vk19SurfaceLostKHRErrorD1Ev>:
    c4be:	48 83 ef 08          	sub    $0x8,%rdi
    c4c2:	eb c2                	jmp    c486 <_ZN2vk19SurfaceLostKHRErrorD1Ev>

000000000000c4c4 <_ZN2vk19SurfaceLostKHRErrorD0Ev>:
    c4c4:	55                   	push   %rbp
    c4c5:	48 89 e5             	mov    %rsp,%rbp
    c4c8:	48 83 ec 10          	sub    $0x10,%rsp
    c4cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c4d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4d4:	48 89 c7             	mov    %rax,%rdi
    c4d7:	e8 aa ff ff ff       	call   c486 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    c4dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4e0:	be 28 00 00 00       	mov    $0x28,%esi
    c4e5:	48 89 c7             	mov    %rax,%rdi
    c4e8:	e8 43 8d ff ff       	call   5230 <_ZdlPvm@plt>
    c4ed:	c9                   	leave
    c4ee:	c3                   	ret

000000000000c4ef <_ZThn8_N2vk19SurfaceLostKHRErrorD0Ev>:
    c4ef:	48 83 ef 08          	sub    $0x8,%rdi
    c4f3:	eb cf                	jmp    c4c4 <_ZN2vk19SurfaceLostKHRErrorD0Ev>
    c4f5:	90                   	nop

000000000000c4f6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>:
  class InvalidOpaqueCaptureAddressError : public SystemError
    c4f6:	55                   	push   %rbp
    c4f7:	48 89 e5             	mov    %rsp,%rbp
    c4fa:	48 83 ec 10          	sub    $0x10,%rsp
    c4fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c502:	48 8d 15 b7 3e 03 00 	lea    0x33eb7(%rip),%rdx        # 403c0 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x10>
    c509:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c50d:	48 89 10             	mov    %rdx,(%rax)
    c510:	48 8d 15 d1 3e 03 00 	lea    0x33ed1(%rip),%rdx        # 403e8 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x38>
    c517:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c51b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c51f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c523:	48 89 c7             	mov    %rax,%rdi
    c526:	e8 1b b4 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c52b:	90                   	nop
    c52c:	c9                   	leave
    c52d:	c3                   	ret

000000000000c52e <_ZThn8_N2vk32InvalidOpaqueCaptureAddressErrorD1Ev>:
    c52e:	48 83 ef 08          	sub    $0x8,%rdi
    c532:	eb c2                	jmp    c4f6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>

000000000000c534 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD0Ev>:
    c534:	55                   	push   %rbp
    c535:	48 89 e5             	mov    %rsp,%rbp
    c538:	48 83 ec 10          	sub    $0x10,%rsp
    c53c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c540:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c544:	48 89 c7             	mov    %rax,%rdi
    c547:	e8 aa ff ff ff       	call   c4f6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    c54c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c550:	be 28 00 00 00       	mov    $0x28,%esi
    c555:	48 89 c7             	mov    %rax,%rdi
    c558:	e8 d3 8c ff ff       	call   5230 <_ZdlPvm@plt>
    c55d:	c9                   	leave
    c55e:	c3                   	ret

000000000000c55f <_ZThn8_N2vk32InvalidOpaqueCaptureAddressErrorD0Ev>:
    c55f:	48 83 ef 08          	sub    $0x8,%rdi
    c563:	eb cf                	jmp    c534 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD0Ev>
    c565:	90                   	nop

000000000000c566 <_ZN2vk18FragmentationErrorD1Ev>:
  class FragmentationError : public SystemError
    c566:	55                   	push   %rbp
    c567:	48 89 e5             	mov    %rsp,%rbp
    c56a:	48 83 ec 10          	sub    $0x10,%rsp
    c56e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c572:	48 8d 15 97 3e 03 00 	lea    0x33e97(%rip),%rdx        # 40410 <_ZTVN2vk18FragmentationErrorE+0x10>
    c579:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c57d:	48 89 10             	mov    %rdx,(%rax)
    c580:	48 8d 15 b1 3e 03 00 	lea    0x33eb1(%rip),%rdx        # 40438 <_ZTVN2vk18FragmentationErrorE+0x38>
    c587:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c58b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c58f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c593:	48 89 c7             	mov    %rax,%rdi
    c596:	e8 ab b3 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c59b:	90                   	nop
    c59c:	c9                   	leave
    c59d:	c3                   	ret

000000000000c59e <_ZThn8_N2vk18FragmentationErrorD1Ev>:
    c59e:	48 83 ef 08          	sub    $0x8,%rdi
    c5a2:	eb c2                	jmp    c566 <_ZN2vk18FragmentationErrorD1Ev>

000000000000c5a4 <_ZN2vk18FragmentationErrorD0Ev>:
    c5a4:	55                   	push   %rbp
    c5a5:	48 89 e5             	mov    %rsp,%rbp
    c5a8:	48 83 ec 10          	sub    $0x10,%rsp
    c5ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c5b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5b4:	48 89 c7             	mov    %rax,%rdi
    c5b7:	e8 aa ff ff ff       	call   c566 <_ZN2vk18FragmentationErrorD1Ev>
    c5bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5c0:	be 28 00 00 00       	mov    $0x28,%esi
    c5c5:	48 89 c7             	mov    %rax,%rdi
    c5c8:	e8 63 8c ff ff       	call   5230 <_ZdlPvm@plt>
    c5cd:	c9                   	leave
    c5ce:	c3                   	ret

000000000000c5cf <_ZThn8_N2vk18FragmentationErrorD0Ev>:
    c5cf:	48 83 ef 08          	sub    $0x8,%rdi
    c5d3:	eb cf                	jmp    c5a4 <_ZN2vk18FragmentationErrorD0Ev>
    c5d5:	90                   	nop

000000000000c5d6 <_ZN2vk26InvalidExternalHandleErrorD1Ev>:
  class InvalidExternalHandleError : public SystemError
    c5d6:	55                   	push   %rbp
    c5d7:	48 89 e5             	mov    %rsp,%rbp
    c5da:	48 83 ec 10          	sub    $0x10,%rsp
    c5de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c5e2:	48 8d 15 77 3e 03 00 	lea    0x33e77(%rip),%rdx        # 40460 <_ZTVN2vk26InvalidExternalHandleErrorE+0x10>
    c5e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5ed:	48 89 10             	mov    %rdx,(%rax)
    c5f0:	48 8d 15 91 3e 03 00 	lea    0x33e91(%rip),%rdx        # 40488 <_ZTVN2vk26InvalidExternalHandleErrorE+0x38>
    c5f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5fb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c5ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c603:	48 89 c7             	mov    %rax,%rdi
    c606:	e8 3b b3 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c60b:	90                   	nop
    c60c:	c9                   	leave
    c60d:	c3                   	ret

000000000000c60e <_ZThn8_N2vk26InvalidExternalHandleErrorD1Ev>:
    c60e:	48 83 ef 08          	sub    $0x8,%rdi
    c612:	eb c2                	jmp    c5d6 <_ZN2vk26InvalidExternalHandleErrorD1Ev>

000000000000c614 <_ZN2vk26InvalidExternalHandleErrorD0Ev>:
    c614:	55                   	push   %rbp
    c615:	48 89 e5             	mov    %rsp,%rbp
    c618:	48 83 ec 10          	sub    $0x10,%rsp
    c61c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c620:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c624:	48 89 c7             	mov    %rax,%rdi
    c627:	e8 aa ff ff ff       	call   c5d6 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    c62c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c630:	be 28 00 00 00       	mov    $0x28,%esi
    c635:	48 89 c7             	mov    %rax,%rdi
    c638:	e8 f3 8b ff ff       	call   5230 <_ZdlPvm@plt>
    c63d:	c9                   	leave
    c63e:	c3                   	ret

000000000000c63f <_ZThn8_N2vk26InvalidExternalHandleErrorD0Ev>:
    c63f:	48 83 ef 08          	sub    $0x8,%rdi
    c643:	eb cf                	jmp    c614 <_ZN2vk26InvalidExternalHandleErrorD0Ev>
    c645:	90                   	nop

000000000000c646 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>:
  class OutOfPoolMemoryError : public SystemError
    c646:	55                   	push   %rbp
    c647:	48 89 e5             	mov    %rsp,%rbp
    c64a:	48 83 ec 10          	sub    $0x10,%rsp
    c64e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c652:	48 8d 15 57 3e 03 00 	lea    0x33e57(%rip),%rdx        # 404b0 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x10>
    c659:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c65d:	48 89 10             	mov    %rdx,(%rax)
    c660:	48 8d 15 71 3e 03 00 	lea    0x33e71(%rip),%rdx        # 404d8 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x38>
    c667:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c66b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c66f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c673:	48 89 c7             	mov    %rax,%rdi
    c676:	e8 cb b2 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c67b:	90                   	nop
    c67c:	c9                   	leave
    c67d:	c3                   	ret

000000000000c67e <_ZThn8_N2vk20OutOfPoolMemoryErrorD1Ev>:
    c67e:	48 83 ef 08          	sub    $0x8,%rdi
    c682:	eb c2                	jmp    c646 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>

000000000000c684 <_ZN2vk20OutOfPoolMemoryErrorD0Ev>:
    c684:	55                   	push   %rbp
    c685:	48 89 e5             	mov    %rsp,%rbp
    c688:	48 83 ec 10          	sub    $0x10,%rsp
    c68c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c690:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c694:	48 89 c7             	mov    %rax,%rdi
    c697:	e8 aa ff ff ff       	call   c646 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    c69c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c6a0:	be 28 00 00 00       	mov    $0x28,%esi
    c6a5:	48 89 c7             	mov    %rax,%rdi
    c6a8:	e8 83 8b ff ff       	call   5230 <_ZdlPvm@plt>
    c6ad:	c9                   	leave
    c6ae:	c3                   	ret

000000000000c6af <_ZThn8_N2vk20OutOfPoolMemoryErrorD0Ev>:
    c6af:	48 83 ef 08          	sub    $0x8,%rdi
    c6b3:	eb cf                	jmp    c684 <_ZN2vk20OutOfPoolMemoryErrorD0Ev>
    c6b5:	90                   	nop

000000000000c6b6 <_ZN2vk12UnknownErrorD1Ev>:
  class UnknownError : public SystemError
    c6b6:	55                   	push   %rbp
    c6b7:	48 89 e5             	mov    %rsp,%rbp
    c6ba:	48 83 ec 10          	sub    $0x10,%rsp
    c6be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c6c2:	48 8d 15 37 3e 03 00 	lea    0x33e37(%rip),%rdx        # 40500 <_ZTVN2vk12UnknownErrorE+0x10>
    c6c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c6cd:	48 89 10             	mov    %rdx,(%rax)
    c6d0:	48 8d 15 51 3e 03 00 	lea    0x33e51(%rip),%rdx        # 40528 <_ZTVN2vk12UnknownErrorE+0x38>
    c6d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c6db:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c6df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c6e3:	48 89 c7             	mov    %rax,%rdi
    c6e6:	e8 5b b2 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c6eb:	90                   	nop
    c6ec:	c9                   	leave
    c6ed:	c3                   	ret

000000000000c6ee <_ZThn8_N2vk12UnknownErrorD1Ev>:
    c6ee:	48 83 ef 08          	sub    $0x8,%rdi
    c6f2:	eb c2                	jmp    c6b6 <_ZN2vk12UnknownErrorD1Ev>

000000000000c6f4 <_ZN2vk12UnknownErrorD0Ev>:
    c6f4:	55                   	push   %rbp
    c6f5:	48 89 e5             	mov    %rsp,%rbp
    c6f8:	48 83 ec 10          	sub    $0x10,%rsp
    c6fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c700:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c704:	48 89 c7             	mov    %rax,%rdi
    c707:	e8 aa ff ff ff       	call   c6b6 <_ZN2vk12UnknownErrorD1Ev>
    c70c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c710:	be 28 00 00 00       	mov    $0x28,%esi
    c715:	48 89 c7             	mov    %rax,%rdi
    c718:	e8 13 8b ff ff       	call   5230 <_ZdlPvm@plt>
    c71d:	c9                   	leave
    c71e:	c3                   	ret

000000000000c71f <_ZThn8_N2vk12UnknownErrorD0Ev>:
    c71f:	48 83 ef 08          	sub    $0x8,%rdi
    c723:	eb cf                	jmp    c6f4 <_ZN2vk12UnknownErrorD0Ev>
    c725:	90                   	nop

000000000000c726 <_ZN2vk19FragmentedPoolErrorD1Ev>:
  class FragmentedPoolError : public SystemError
    c726:	55                   	push   %rbp
    c727:	48 89 e5             	mov    %rsp,%rbp
    c72a:	48 83 ec 10          	sub    $0x10,%rsp
    c72e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c732:	48 8d 15 17 3e 03 00 	lea    0x33e17(%rip),%rdx        # 40550 <_ZTVN2vk19FragmentedPoolErrorE+0x10>
    c739:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c73d:	48 89 10             	mov    %rdx,(%rax)
    c740:	48 8d 15 31 3e 03 00 	lea    0x33e31(%rip),%rdx        # 40578 <_ZTVN2vk19FragmentedPoolErrorE+0x38>
    c747:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c74b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c74f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c753:	48 89 c7             	mov    %rax,%rdi
    c756:	e8 eb b1 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c75b:	90                   	nop
    c75c:	c9                   	leave
    c75d:	c3                   	ret

000000000000c75e <_ZThn8_N2vk19FragmentedPoolErrorD1Ev>:
    c75e:	48 83 ef 08          	sub    $0x8,%rdi
    c762:	eb c2                	jmp    c726 <_ZN2vk19FragmentedPoolErrorD1Ev>

000000000000c764 <_ZN2vk19FragmentedPoolErrorD0Ev>:
    c764:	55                   	push   %rbp
    c765:	48 89 e5             	mov    %rsp,%rbp
    c768:	48 83 ec 10          	sub    $0x10,%rsp
    c76c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c774:	48 89 c7             	mov    %rax,%rdi
    c777:	e8 aa ff ff ff       	call   c726 <_ZN2vk19FragmentedPoolErrorD1Ev>
    c77c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c780:	be 28 00 00 00       	mov    $0x28,%esi
    c785:	48 89 c7             	mov    %rax,%rdi
    c788:	e8 a3 8a ff ff       	call   5230 <_ZdlPvm@plt>
    c78d:	c9                   	leave
    c78e:	c3                   	ret

000000000000c78f <_ZThn8_N2vk19FragmentedPoolErrorD0Ev>:
    c78f:	48 83 ef 08          	sub    $0x8,%rdi
    c793:	eb cf                	jmp    c764 <_ZN2vk19FragmentedPoolErrorD0Ev>
    c795:	90                   	nop

000000000000c796 <_ZN2vk23FormatNotSupportedErrorD1Ev>:
  class FormatNotSupportedError : public SystemError
    c796:	55                   	push   %rbp
    c797:	48 89 e5             	mov    %rsp,%rbp
    c79a:	48 83 ec 10          	sub    $0x10,%rsp
    c79e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c7a2:	48 8d 15 f7 3d 03 00 	lea    0x33df7(%rip),%rdx        # 405a0 <_ZTVN2vk23FormatNotSupportedErrorE+0x10>
    c7a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7ad:	48 89 10             	mov    %rdx,(%rax)
    c7b0:	48 8d 15 11 3e 03 00 	lea    0x33e11(%rip),%rdx        # 405c8 <_ZTVN2vk23FormatNotSupportedErrorE+0x38>
    c7b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7bb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c7bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7c3:	48 89 c7             	mov    %rax,%rdi
    c7c6:	e8 7b b1 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c7cb:	90                   	nop
    c7cc:	c9                   	leave
    c7cd:	c3                   	ret

000000000000c7ce <_ZThn8_N2vk23FormatNotSupportedErrorD1Ev>:
    c7ce:	48 83 ef 08          	sub    $0x8,%rdi
    c7d2:	eb c2                	jmp    c796 <_ZN2vk23FormatNotSupportedErrorD1Ev>

000000000000c7d4 <_ZN2vk23FormatNotSupportedErrorD0Ev>:
    c7d4:	55                   	push   %rbp
    c7d5:	48 89 e5             	mov    %rsp,%rbp
    c7d8:	48 83 ec 10          	sub    $0x10,%rsp
    c7dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c7e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7e4:	48 89 c7             	mov    %rax,%rdi
    c7e7:	e8 aa ff ff ff       	call   c796 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    c7ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7f0:	be 28 00 00 00       	mov    $0x28,%esi
    c7f5:	48 89 c7             	mov    %rax,%rdi
    c7f8:	e8 33 8a ff ff       	call   5230 <_ZdlPvm@plt>
    c7fd:	c9                   	leave
    c7fe:	c3                   	ret

000000000000c7ff <_ZThn8_N2vk23FormatNotSupportedErrorD0Ev>:
    c7ff:	48 83 ef 08          	sub    $0x8,%rdi
    c803:	eb cf                	jmp    c7d4 <_ZN2vk23FormatNotSupportedErrorD0Ev>
    c805:	90                   	nop

000000000000c806 <_ZN2vk19TooManyObjectsErrorD1Ev>:
  class TooManyObjectsError : public SystemError
    c806:	55                   	push   %rbp
    c807:	48 89 e5             	mov    %rsp,%rbp
    c80a:	48 83 ec 10          	sub    $0x10,%rsp
    c80e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c812:	48 8d 15 d7 3d 03 00 	lea    0x33dd7(%rip),%rdx        # 405f0 <_ZTVN2vk19TooManyObjectsErrorE+0x10>
    c819:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c81d:	48 89 10             	mov    %rdx,(%rax)
    c820:	48 8d 15 f1 3d 03 00 	lea    0x33df1(%rip),%rdx        # 40618 <_ZTVN2vk19TooManyObjectsErrorE+0x38>
    c827:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c82b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c82f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c833:	48 89 c7             	mov    %rax,%rdi
    c836:	e8 0b b1 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c83b:	90                   	nop
    c83c:	c9                   	leave
    c83d:	c3                   	ret

000000000000c83e <_ZThn8_N2vk19TooManyObjectsErrorD1Ev>:
    c83e:	48 83 ef 08          	sub    $0x8,%rdi
    c842:	eb c2                	jmp    c806 <_ZN2vk19TooManyObjectsErrorD1Ev>

000000000000c844 <_ZN2vk19TooManyObjectsErrorD0Ev>:
    c844:	55                   	push   %rbp
    c845:	48 89 e5             	mov    %rsp,%rbp
    c848:	48 83 ec 10          	sub    $0x10,%rsp
    c84c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c854:	48 89 c7             	mov    %rax,%rdi
    c857:	e8 aa ff ff ff       	call   c806 <_ZN2vk19TooManyObjectsErrorD1Ev>
    c85c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c860:	be 28 00 00 00       	mov    $0x28,%esi
    c865:	48 89 c7             	mov    %rax,%rdi
    c868:	e8 c3 89 ff ff       	call   5230 <_ZdlPvm@plt>
    c86d:	c9                   	leave
    c86e:	c3                   	ret

000000000000c86f <_ZThn8_N2vk19TooManyObjectsErrorD0Ev>:
    c86f:	48 83 ef 08          	sub    $0x8,%rdi
    c873:	eb cf                	jmp    c844 <_ZN2vk19TooManyObjectsErrorD0Ev>
    c875:	90                   	nop

000000000000c876 <_ZN2vk23IncompatibleDriverErrorD1Ev>:
  class IncompatibleDriverError : public SystemError
    c876:	55                   	push   %rbp
    c877:	48 89 e5             	mov    %rsp,%rbp
    c87a:	48 83 ec 10          	sub    $0x10,%rsp
    c87e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c882:	48 8d 15 b7 3d 03 00 	lea    0x33db7(%rip),%rdx        # 40640 <_ZTVN2vk23IncompatibleDriverErrorE+0x10>
    c889:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c88d:	48 89 10             	mov    %rdx,(%rax)
    c890:	48 8d 15 d1 3d 03 00 	lea    0x33dd1(%rip),%rdx        # 40668 <_ZTVN2vk23IncompatibleDriverErrorE+0x38>
    c897:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c89b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c89f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c8a3:	48 89 c7             	mov    %rax,%rdi
    c8a6:	e8 9b b0 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c8ab:	90                   	nop
    c8ac:	c9                   	leave
    c8ad:	c3                   	ret

000000000000c8ae <_ZThn8_N2vk23IncompatibleDriverErrorD1Ev>:
    c8ae:	48 83 ef 08          	sub    $0x8,%rdi
    c8b2:	eb c2                	jmp    c876 <_ZN2vk23IncompatibleDriverErrorD1Ev>

000000000000c8b4 <_ZN2vk23IncompatibleDriverErrorD0Ev>:
    c8b4:	55                   	push   %rbp
    c8b5:	48 89 e5             	mov    %rsp,%rbp
    c8b8:	48 83 ec 10          	sub    $0x10,%rsp
    c8bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c8c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c8c4:	48 89 c7             	mov    %rax,%rdi
    c8c7:	e8 aa ff ff ff       	call   c876 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    c8cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c8d0:	be 28 00 00 00       	mov    $0x28,%esi
    c8d5:	48 89 c7             	mov    %rax,%rdi
    c8d8:	e8 53 89 ff ff       	call   5230 <_ZdlPvm@plt>
    c8dd:	c9                   	leave
    c8de:	c3                   	ret

000000000000c8df <_ZThn8_N2vk23IncompatibleDriverErrorD0Ev>:
    c8df:	48 83 ef 08          	sub    $0x8,%rdi
    c8e3:	eb cf                	jmp    c8b4 <_ZN2vk23IncompatibleDriverErrorD0Ev>
    c8e5:	90                   	nop

000000000000c8e6 <_ZN2vk22FeatureNotPresentErrorD1Ev>:
  class FeatureNotPresentError : public SystemError
    c8e6:	55                   	push   %rbp
    c8e7:	48 89 e5             	mov    %rsp,%rbp
    c8ea:	48 83 ec 10          	sub    $0x10,%rsp
    c8ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c8f2:	48 8d 15 97 3d 03 00 	lea    0x33d97(%rip),%rdx        # 40690 <_ZTVN2vk22FeatureNotPresentErrorE+0x10>
    c8f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c8fd:	48 89 10             	mov    %rdx,(%rax)
    c900:	48 8d 15 b1 3d 03 00 	lea    0x33db1(%rip),%rdx        # 406b8 <_ZTVN2vk22FeatureNotPresentErrorE+0x38>
    c907:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c90b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c90f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c913:	48 89 c7             	mov    %rax,%rdi
    c916:	e8 2b b0 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c91b:	90                   	nop
    c91c:	c9                   	leave
    c91d:	c3                   	ret

000000000000c91e <_ZThn8_N2vk22FeatureNotPresentErrorD1Ev>:
    c91e:	48 83 ef 08          	sub    $0x8,%rdi
    c922:	eb c2                	jmp    c8e6 <_ZN2vk22FeatureNotPresentErrorD1Ev>

000000000000c924 <_ZN2vk22FeatureNotPresentErrorD0Ev>:
    c924:	55                   	push   %rbp
    c925:	48 89 e5             	mov    %rsp,%rbp
    c928:	48 83 ec 10          	sub    $0x10,%rsp
    c92c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c930:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c934:	48 89 c7             	mov    %rax,%rdi
    c937:	e8 aa ff ff ff       	call   c8e6 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    c93c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c940:	be 28 00 00 00       	mov    $0x28,%esi
    c945:	48 89 c7             	mov    %rax,%rdi
    c948:	e8 e3 88 ff ff       	call   5230 <_ZdlPvm@plt>
    c94d:	c9                   	leave
    c94e:	c3                   	ret

000000000000c94f <_ZThn8_N2vk22FeatureNotPresentErrorD0Ev>:
    c94f:	48 83 ef 08          	sub    $0x8,%rdi
    c953:	eb cf                	jmp    c924 <_ZN2vk22FeatureNotPresentErrorD0Ev>
    c955:	90                   	nop

000000000000c956 <_ZN2vk24ExtensionNotPresentErrorD1Ev>:
  class ExtensionNotPresentError : public SystemError
    c956:	55                   	push   %rbp
    c957:	48 89 e5             	mov    %rsp,%rbp
    c95a:	48 83 ec 10          	sub    $0x10,%rsp
    c95e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c962:	48 8d 15 77 3d 03 00 	lea    0x33d77(%rip),%rdx        # 406e0 <_ZTVN2vk24ExtensionNotPresentErrorE+0x10>
    c969:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c96d:	48 89 10             	mov    %rdx,(%rax)
    c970:	48 8d 15 91 3d 03 00 	lea    0x33d91(%rip),%rdx        # 40708 <_ZTVN2vk24ExtensionNotPresentErrorE+0x38>
    c977:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c97b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c97f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c983:	48 89 c7             	mov    %rax,%rdi
    c986:	e8 bb af ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c98b:	90                   	nop
    c98c:	c9                   	leave
    c98d:	c3                   	ret

000000000000c98e <_ZThn8_N2vk24ExtensionNotPresentErrorD1Ev>:
    c98e:	48 83 ef 08          	sub    $0x8,%rdi
    c992:	eb c2                	jmp    c956 <_ZN2vk24ExtensionNotPresentErrorD1Ev>

000000000000c994 <_ZN2vk24ExtensionNotPresentErrorD0Ev>:
    c994:	55                   	push   %rbp
    c995:	48 89 e5             	mov    %rsp,%rbp
    c998:	48 83 ec 10          	sub    $0x10,%rsp
    c99c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c9a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9a4:	48 89 c7             	mov    %rax,%rdi
    c9a7:	e8 aa ff ff ff       	call   c956 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    c9ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9b0:	be 28 00 00 00       	mov    $0x28,%esi
    c9b5:	48 89 c7             	mov    %rax,%rdi
    c9b8:	e8 73 88 ff ff       	call   5230 <_ZdlPvm@plt>
    c9bd:	c9                   	leave
    c9be:	c3                   	ret

000000000000c9bf <_ZThn8_N2vk24ExtensionNotPresentErrorD0Ev>:
    c9bf:	48 83 ef 08          	sub    $0x8,%rdi
    c9c3:	eb cf                	jmp    c994 <_ZN2vk24ExtensionNotPresentErrorD0Ev>
    c9c5:	90                   	nop

000000000000c9c6 <_ZN2vk20LayerNotPresentErrorD1Ev>:
  class LayerNotPresentError : public SystemError
    c9c6:	55                   	push   %rbp
    c9c7:	48 89 e5             	mov    %rsp,%rbp
    c9ca:	48 83 ec 10          	sub    $0x10,%rsp
    c9ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c9d2:	48 8d 15 57 3d 03 00 	lea    0x33d57(%rip),%rdx        # 40730 <_ZTVN2vk20LayerNotPresentErrorE+0x10>
    c9d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9dd:	48 89 10             	mov    %rdx,(%rax)
    c9e0:	48 8d 15 71 3d 03 00 	lea    0x33d71(%rip),%rdx        # 40758 <_ZTVN2vk20LayerNotPresentErrorE+0x38>
    c9e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c9ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9f3:	48 89 c7             	mov    %rax,%rdi
    c9f6:	e8 4b af ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c9fb:	90                   	nop
    c9fc:	c9                   	leave
    c9fd:	c3                   	ret

000000000000c9fe <_ZThn8_N2vk20LayerNotPresentErrorD1Ev>:
    c9fe:	48 83 ef 08          	sub    $0x8,%rdi
    ca02:	eb c2                	jmp    c9c6 <_ZN2vk20LayerNotPresentErrorD1Ev>

000000000000ca04 <_ZN2vk20LayerNotPresentErrorD0Ev>:
    ca04:	55                   	push   %rbp
    ca05:	48 89 e5             	mov    %rsp,%rbp
    ca08:	48 83 ec 10          	sub    $0x10,%rsp
    ca0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ca10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca14:	48 89 c7             	mov    %rax,%rdi
    ca17:	e8 aa ff ff ff       	call   c9c6 <_ZN2vk20LayerNotPresentErrorD1Ev>
    ca1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca20:	be 28 00 00 00       	mov    $0x28,%esi
    ca25:	48 89 c7             	mov    %rax,%rdi
    ca28:	e8 03 88 ff ff       	call   5230 <_ZdlPvm@plt>
    ca2d:	c9                   	leave
    ca2e:	c3                   	ret

000000000000ca2f <_ZThn8_N2vk20LayerNotPresentErrorD0Ev>:
    ca2f:	48 83 ef 08          	sub    $0x8,%rdi
    ca33:	eb cf                	jmp    ca04 <_ZN2vk20LayerNotPresentErrorD0Ev>
    ca35:	90                   	nop

000000000000ca36 <_ZN2vk20MemoryMapFailedErrorD1Ev>:
  class MemoryMapFailedError : public SystemError
    ca36:	55                   	push   %rbp
    ca37:	48 89 e5             	mov    %rsp,%rbp
    ca3a:	48 83 ec 10          	sub    $0x10,%rsp
    ca3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ca42:	48 8d 15 37 3d 03 00 	lea    0x33d37(%rip),%rdx        # 40780 <_ZTVN2vk20MemoryMapFailedErrorE+0x10>
    ca49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca4d:	48 89 10             	mov    %rdx,(%rax)
    ca50:	48 8d 15 51 3d 03 00 	lea    0x33d51(%rip),%rdx        # 407a8 <_ZTVN2vk20MemoryMapFailedErrorE+0x38>
    ca57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca5b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ca5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca63:	48 89 c7             	mov    %rax,%rdi
    ca66:	e8 db ae ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    ca6b:	90                   	nop
    ca6c:	c9                   	leave
    ca6d:	c3                   	ret

000000000000ca6e <_ZThn8_N2vk20MemoryMapFailedErrorD1Ev>:
    ca6e:	48 83 ef 08          	sub    $0x8,%rdi
    ca72:	eb c2                	jmp    ca36 <_ZN2vk20MemoryMapFailedErrorD1Ev>

000000000000ca74 <_ZN2vk20MemoryMapFailedErrorD0Ev>:
    ca74:	55                   	push   %rbp
    ca75:	48 89 e5             	mov    %rsp,%rbp
    ca78:	48 83 ec 10          	sub    $0x10,%rsp
    ca7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ca80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca84:	48 89 c7             	mov    %rax,%rdi
    ca87:	e8 aa ff ff ff       	call   ca36 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    ca8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca90:	be 28 00 00 00       	mov    $0x28,%esi
    ca95:	48 89 c7             	mov    %rax,%rdi
    ca98:	e8 93 87 ff ff       	call   5230 <_ZdlPvm@plt>
    ca9d:	c9                   	leave
    ca9e:	c3                   	ret

000000000000ca9f <_ZThn8_N2vk20MemoryMapFailedErrorD0Ev>:
    ca9f:	48 83 ef 08          	sub    $0x8,%rdi
    caa3:	eb cf                	jmp    ca74 <_ZN2vk20MemoryMapFailedErrorD0Ev>
    caa5:	90                   	nop

000000000000caa6 <_ZN2vk15DeviceLostErrorD1Ev>:
  class DeviceLostError : public SystemError
    caa6:	55                   	push   %rbp
    caa7:	48 89 e5             	mov    %rsp,%rbp
    caaa:	48 83 ec 10          	sub    $0x10,%rsp
    caae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cab2:	48 8d 15 17 3d 03 00 	lea    0x33d17(%rip),%rdx        # 407d0 <_ZTVN2vk15DeviceLostErrorE+0x10>
    cab9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cabd:	48 89 10             	mov    %rdx,(%rax)
    cac0:	48 8d 15 31 3d 03 00 	lea    0x33d31(%rip),%rdx        # 407f8 <_ZTVN2vk15DeviceLostErrorE+0x38>
    cac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cacb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    cacf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cad3:	48 89 c7             	mov    %rax,%rdi
    cad6:	e8 6b ae ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    cadb:	90                   	nop
    cadc:	c9                   	leave
    cadd:	c3                   	ret

000000000000cade <_ZThn8_N2vk15DeviceLostErrorD1Ev>:
    cade:	48 83 ef 08          	sub    $0x8,%rdi
    cae2:	eb c2                	jmp    caa6 <_ZN2vk15DeviceLostErrorD1Ev>

000000000000cae4 <_ZN2vk15DeviceLostErrorD0Ev>:
    cae4:	55                   	push   %rbp
    cae5:	48 89 e5             	mov    %rsp,%rbp
    cae8:	48 83 ec 10          	sub    $0x10,%rsp
    caec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    caf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    caf4:	48 89 c7             	mov    %rax,%rdi
    caf7:	e8 aa ff ff ff       	call   caa6 <_ZN2vk15DeviceLostErrorD1Ev>
    cafc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb00:	be 28 00 00 00       	mov    $0x28,%esi
    cb05:	48 89 c7             	mov    %rax,%rdi
    cb08:	e8 23 87 ff ff       	call   5230 <_ZdlPvm@plt>
    cb0d:	c9                   	leave
    cb0e:	c3                   	ret

000000000000cb0f <_ZThn8_N2vk15DeviceLostErrorD0Ev>:
    cb0f:	48 83 ef 08          	sub    $0x8,%rdi
    cb13:	eb cf                	jmp    cae4 <_ZN2vk15DeviceLostErrorD0Ev>
    cb15:	90                   	nop

000000000000cb16 <_ZN2vk25InitializationFailedErrorD1Ev>:
  class InitializationFailedError : public SystemError
    cb16:	55                   	push   %rbp
    cb17:	48 89 e5             	mov    %rsp,%rbp
    cb1a:	48 83 ec 10          	sub    $0x10,%rsp
    cb1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cb22:	48 8d 15 f7 3c 03 00 	lea    0x33cf7(%rip),%rdx        # 40820 <_ZTVN2vk25InitializationFailedErrorE+0x10>
    cb29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb2d:	48 89 10             	mov    %rdx,(%rax)
    cb30:	48 8d 15 11 3d 03 00 	lea    0x33d11(%rip),%rdx        # 40848 <_ZTVN2vk25InitializationFailedErrorE+0x38>
    cb37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb3b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    cb3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb43:	48 89 c7             	mov    %rax,%rdi
    cb46:	e8 fb ad ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    cb4b:	90                   	nop
    cb4c:	c9                   	leave
    cb4d:	c3                   	ret

000000000000cb4e <_ZThn8_N2vk25InitializationFailedErrorD1Ev>:
    cb4e:	48 83 ef 08          	sub    $0x8,%rdi
    cb52:	eb c2                	jmp    cb16 <_ZN2vk25InitializationFailedErrorD1Ev>

000000000000cb54 <_ZN2vk25InitializationFailedErrorD0Ev>:
    cb54:	55                   	push   %rbp
    cb55:	48 89 e5             	mov    %rsp,%rbp
    cb58:	48 83 ec 10          	sub    $0x10,%rsp
    cb5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cb60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb64:	48 89 c7             	mov    %rax,%rdi
    cb67:	e8 aa ff ff ff       	call   cb16 <_ZN2vk25InitializationFailedErrorD1Ev>
    cb6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb70:	be 28 00 00 00       	mov    $0x28,%esi
    cb75:	48 89 c7             	mov    %rax,%rdi
    cb78:	e8 b3 86 ff ff       	call   5230 <_ZdlPvm@plt>
    cb7d:	c9                   	leave
    cb7e:	c3                   	ret

000000000000cb7f <_ZThn8_N2vk25InitializationFailedErrorD0Ev>:
    cb7f:	48 83 ef 08          	sub    $0x8,%rdi
    cb83:	eb cf                	jmp    cb54 <_ZN2vk25InitializationFailedErrorD0Ev>
    cb85:	90                   	nop

000000000000cb86 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>:
  class OutOfDeviceMemoryError : public SystemError
    cb86:	55                   	push   %rbp
    cb87:	48 89 e5             	mov    %rsp,%rbp
    cb8a:	48 83 ec 10          	sub    $0x10,%rsp
    cb8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cb92:	48 8d 15 d7 3c 03 00 	lea    0x33cd7(%rip),%rdx        # 40870 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x10>
    cb99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb9d:	48 89 10             	mov    %rdx,(%rax)
    cba0:	48 8d 15 f1 3c 03 00 	lea    0x33cf1(%rip),%rdx        # 40898 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x38>
    cba7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cbab:	48 89 50 08          	mov    %rdx,0x8(%rax)
    cbaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cbb3:	48 89 c7             	mov    %rax,%rdi
    cbb6:	e8 8b ad ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    cbbb:	90                   	nop
    cbbc:	c9                   	leave
    cbbd:	c3                   	ret

000000000000cbbe <_ZThn8_N2vk22OutOfDeviceMemoryErrorD1Ev>:
    cbbe:	48 83 ef 08          	sub    $0x8,%rdi
    cbc2:	eb c2                	jmp    cb86 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>

000000000000cbc4 <_ZN2vk22OutOfDeviceMemoryErrorD0Ev>:
    cbc4:	55                   	push   %rbp
    cbc5:	48 89 e5             	mov    %rsp,%rbp
    cbc8:	48 83 ec 10          	sub    $0x10,%rsp
    cbcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cbd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cbd4:	48 89 c7             	mov    %rax,%rdi
    cbd7:	e8 aa ff ff ff       	call   cb86 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    cbdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cbe0:	be 28 00 00 00       	mov    $0x28,%esi
    cbe5:	48 89 c7             	mov    %rax,%rdi
    cbe8:	e8 43 86 ff ff       	call   5230 <_ZdlPvm@plt>
    cbed:	c9                   	leave
    cbee:	c3                   	ret

000000000000cbef <_ZThn8_N2vk22OutOfDeviceMemoryErrorD0Ev>:
    cbef:	48 83 ef 08          	sub    $0x8,%rdi
    cbf3:	eb cf                	jmp    cbc4 <_ZN2vk22OutOfDeviceMemoryErrorD0Ev>
    cbf5:	90                   	nop

000000000000cbf6 <_ZN2vk20OutOfHostMemoryErrorD1Ev>:
  class OutOfHostMemoryError : public SystemError
    cbf6:	55                   	push   %rbp
    cbf7:	48 89 e5             	mov    %rsp,%rbp
    cbfa:	48 83 ec 10          	sub    $0x10,%rsp
    cbfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cc02:	48 8d 15 b7 3c 03 00 	lea    0x33cb7(%rip),%rdx        # 408c0 <_ZTVN2vk20OutOfHostMemoryErrorE+0x10>
    cc09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc0d:	48 89 10             	mov    %rdx,(%rax)
    cc10:	48 8d 15 d1 3c 03 00 	lea    0x33cd1(%rip),%rdx        # 408e8 <_ZTVN2vk20OutOfHostMemoryErrorE+0x38>
    cc17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc1b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    cc1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc23:	48 89 c7             	mov    %rax,%rdi
    cc26:	e8 1b ad ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    cc2b:	90                   	nop
    cc2c:	c9                   	leave
    cc2d:	c3                   	ret

000000000000cc2e <_ZThn8_N2vk20OutOfHostMemoryErrorD1Ev>:
    cc2e:	48 83 ef 08          	sub    $0x8,%rdi
    cc32:	eb c2                	jmp    cbf6 <_ZN2vk20OutOfHostMemoryErrorD1Ev>

000000000000cc34 <_ZN2vk20OutOfHostMemoryErrorD0Ev>:
    cc34:	55                   	push   %rbp
    cc35:	48 89 e5             	mov    %rsp,%rbp
    cc38:	48 83 ec 10          	sub    $0x10,%rsp
    cc3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cc40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc44:	48 89 c7             	mov    %rax,%rdi
    cc47:	e8 aa ff ff ff       	call   cbf6 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    cc4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc50:	be 28 00 00 00       	mov    $0x28,%esi
    cc55:	48 89 c7             	mov    %rax,%rdi
    cc58:	e8 d3 85 ff ff       	call   5230 <_ZdlPvm@plt>
    cc5d:	c9                   	leave
    cc5e:	c3                   	ret

000000000000cc5f <_ZThn8_N2vk20OutOfHostMemoryErrorD0Ev>:
    cc5f:	48 83 ef 08          	sub    $0x8,%rdi
    cc63:	eb cf                	jmp    cc34 <_ZN2vk20OutOfHostMemoryErrorD0Ev>
    cc65:	90                   	nop

000000000000cc66 <_ZN2vk17ErrorCategoryImplD1Ev>:
  class ErrorCategoryImpl : public std::error_category
    cc66:	55                   	push   %rbp
    cc67:	48 89 e5             	mov    %rsp,%rbp
    cc6a:	48 83 ec 10          	sub    $0x10,%rsp
    cc6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cc72:	48 8d 15 d7 3d 03 00 	lea    0x33dd7(%rip),%rdx        # 40a50 <_ZTVN2vk17ErrorCategoryImplE+0x10>
    cc79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc7d:	48 89 10             	mov    %rdx,(%rax)
    cc80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc84:	48 89 c7             	mov    %rax,%rdi
    cc87:	e8 04 87 ff ff       	call   5390 <_ZNSt3_V214error_categoryD2Ev@plt>
    cc8c:	90                   	nop
    cc8d:	c9                   	leave
    cc8e:	c3                   	ret
    cc8f:	90                   	nop

000000000000cc90 <_ZN2vk17ErrorCategoryImplD0Ev>:
    cc90:	55                   	push   %rbp
    cc91:	48 89 e5             	mov    %rsp,%rbp
    cc94:	48 83 ec 10          	sub    $0x10,%rsp
    cc98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cc9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cca0:	48 89 c7             	mov    %rax,%rdi
    cca3:	e8 be ff ff ff       	call   cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    cca8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ccac:	be 08 00 00 00       	mov    $0x8,%esi
    ccb1:	48 89 c7             	mov    %rax,%rdi
    ccb4:	e8 77 85 ff ff       	call   5230 <_ZdlPvm@plt>
    ccb9:	c9                   	leave
    ccba:	c3                   	ret

000000000000ccbb <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
    ccbb:	55                   	push   %rbp
    ccbc:	48 89 e5             	mov    %rsp,%rbp
    ccbf:	41 54                	push   %r12
    ccc1:	53                   	push   %rbx
    ccc2:	48 83 ec 30          	sub    $0x30,%rsp
    ccc6:	89 7d cc             	mov    %edi,-0x34(%rbp)
    ccc9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
    cccd:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    ccd1:	0f 89 28 07 00 00    	jns    d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    ccd7:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
    ccdb:	0f 8d 3d 01 00 00    	jge    ce1e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
    cce1:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    cce8:	0f 84 19 05 00 00    	je     d207 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
    ccee:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    ccf5:	0f 8f 04 07 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    ccfb:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    cd02:	0f 84 37 05 00 00    	je     d23f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
    cd08:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    cd0f:	0f 8f ea 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cd15:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    cd1c:	0f 84 55 05 00 00    	je     d277 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
    cd22:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    cd29:	0f 8f d0 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cd2f:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    cd36:	0f 84 73 05 00 00    	je     d2af <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
    cd3c:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    cd43:	0f 8f b6 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cd49:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    cd50:	0f 84 91 05 00 00    	je     d2e7 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
    cd56:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    cd5d:	0f 8f 9c 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cd63:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    cd6a:	0f 84 af 05 00 00    	je     d31f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
    cd70:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    cd77:	0f 8f 82 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cd7d:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    cd84:	0f 84 9d 03 00 00    	je     d127 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
    cd8a:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    cd91:	0f 8f 68 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cd97:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    cd9e:	0f 84 bb 03 00 00    	je     d15f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
    cda4:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    cdab:	0f 8f 4e 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cdb1:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    cdb8:	0f 84 99 05 00 00    	je     d357 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
    cdbe:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    cdc5:	0f 8f 34 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cdcb:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    cdd2:	0f 84 bf 03 00 00    	je     d197 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
    cdd8:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    cddf:	0f 8f 1a 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cde5:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    cdec:	0f 84 9d 05 00 00    	je     d38f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
    cdf2:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    cdf9:	0f 8f 00 06 00 00    	jg     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    cdff:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
    ce06:	0f 84 bb 05 00 00    	je     d3c7 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
    ce0c:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
    ce13:	0f 84 b6 03 00 00    	je     d1cf <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
    ce19:	e9 e1 05 00 00       	jmp    d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    ce1e:	8b 45 cc             	mov    -0x34(%rbp),%eax
    ce21:	83 c0 0d             	add    $0xd,%eax
    ce24:	83 f8 0c             	cmp    $0xc,%eax
    ce27:	0f 87 d2 05 00 00    	ja     d3ff <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    ce2d:	89 c0                	mov    %eax,%eax
    ce2f:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    ce36:	00 
    ce37:	48 8d 05 8a ce 01 00 	lea    0x1ce8a(%rip),%rax        # 29cc8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x338>
    ce3e:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    ce41:	48 98                	cltq
    ce43:	48 8d 15 7e ce 01 00 	lea    0x1ce7e(%rip),%rdx        # 29cc8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x338>
    ce4a:	48 01 d0             	add    %rdx,%rax
    ce4d:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    ce4f:	bf 28 00 00 00       	mov    $0x28,%edi
    ce54:	e8 77 82 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ce59:	48 89 c3             	mov    %rax,%rbx
    ce5c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ce60:	48 89 c6             	mov    %rax,%rsi
    ce63:	48 89 df             	mov    %rbx,%rdi
    ce66:	e8 5b ab ff ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
    ce6b:	48 8d 05 84 fd ff ff 	lea    -0x27c(%rip),%rax        # cbf6 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    ce72:	48 89 c2             	mov    %rax,%rdx
    ce75:	48 8d 05 6c 3e 03 00 	lea    0x33e6c(%rip),%rax        # 40ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ce7c:	48 89 c6             	mov    %rax,%rsi
    ce7f:	48 89 df             	mov    %rbx,%rdi
    ce82:	e8 f9 84 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    ce87:	bf 28 00 00 00       	mov    $0x28,%edi
    ce8c:	e8 3f 82 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ce91:	48 89 c3             	mov    %rax,%rbx
    ce94:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ce98:	48 89 c6             	mov    %rax,%rsi
    ce9b:	48 89 df             	mov    %rbx,%rdi
    ce9e:	e8 f5 ab ff ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
    cea3:	48 8d 05 dc fc ff ff 	lea    -0x324(%rip),%rax        # cb86 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    ceaa:	48 89 c2             	mov    %rax,%rdx
    cead:	48 8d 05 1c 3e 03 00 	lea    0x33e1c(%rip),%rax        # 40cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ceb4:	48 89 c6             	mov    %rax,%rsi
    ceb7:	48 89 df             	mov    %rbx,%rdi
    ceba:	e8 c1 84 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    cebf:	bf 28 00 00 00       	mov    $0x28,%edi
    cec4:	e8 07 82 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cec9:	48 89 c3             	mov    %rax,%rbx
    cecc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ced0:	48 89 c6             	mov    %rax,%rsi
    ced3:	48 89 df             	mov    %rbx,%rdi
    ced6:	e8 8f ac ff ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
    cedb:	48 8d 05 34 fc ff ff 	lea    -0x3cc(%rip),%rax        # cb16 <_ZN2vk25InitializationFailedErrorD1Ev>
    cee2:	48 89 c2             	mov    %rax,%rdx
    cee5:	48 8d 05 cc 3d 03 00 	lea    0x33dcc(%rip),%rax        # 40cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ceec:	48 89 c6             	mov    %rax,%rsi
    ceef:	48 89 df             	mov    %rbx,%rdi
    cef2:	e8 89 84 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    cef7:	bf 28 00 00 00       	mov    $0x28,%edi
    cefc:	e8 cf 81 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cf01:	48 89 c3             	mov    %rax,%rbx
    cf04:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cf08:	48 89 c6             	mov    %rax,%rsi
    cf0b:	48 89 df             	mov    %rbx,%rdi
    cf0e:	e8 29 ad ff ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
    cf13:	48 8d 05 8c fb ff ff 	lea    -0x474(%rip),%rax        # caa6 <_ZN2vk15DeviceLostErrorD1Ev>
    cf1a:	48 89 c2             	mov    %rax,%rdx
    cf1d:	48 8d 05 7c 3d 03 00 	lea    0x33d7c(%rip),%rax        # 40ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cf24:	48 89 c6             	mov    %rax,%rsi
    cf27:	48 89 df             	mov    %rbx,%rdi
    cf2a:	e8 51 84 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    cf2f:	bf 28 00 00 00       	mov    $0x28,%edi
    cf34:	e8 97 81 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cf39:	48 89 c3             	mov    %rax,%rbx
    cf3c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cf40:	48 89 c6             	mov    %rax,%rsi
    cf43:	48 89 df             	mov    %rbx,%rdi
    cf46:	e8 c3 ad ff ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
    cf4b:	48 8d 05 e4 fa ff ff 	lea    -0x51c(%rip),%rax        # ca36 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    cf52:	48 89 c2             	mov    %rax,%rdx
    cf55:	48 8d 05 2c 3d 03 00 	lea    0x33d2c(%rip),%rax        # 40c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cf5c:	48 89 c6             	mov    %rax,%rsi
    cf5f:	48 89 df             	mov    %rbx,%rdi
    cf62:	e8 19 84 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    cf67:	bf 28 00 00 00       	mov    $0x28,%edi
    cf6c:	e8 5f 81 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cf71:	48 89 c3             	mov    %rax,%rbx
    cf74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cf78:	48 89 c6             	mov    %rax,%rsi
    cf7b:	48 89 df             	mov    %rbx,%rdi
    cf7e:	e8 5d ae ff ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
    cf83:	48 8d 05 3c fa ff ff 	lea    -0x5c4(%rip),%rax        # c9c6 <_ZN2vk20LayerNotPresentErrorD1Ev>
    cf8a:	48 89 c2             	mov    %rax,%rdx
    cf8d:	48 8d 05 dc 3c 03 00 	lea    0x33cdc(%rip),%rax        # 40c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cf94:	48 89 c6             	mov    %rax,%rsi
    cf97:	48 89 df             	mov    %rbx,%rdi
    cf9a:	e8 e1 83 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    cf9f:	bf 28 00 00 00       	mov    $0x28,%edi
    cfa4:	e8 27 81 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cfa9:	48 89 c3             	mov    %rax,%rbx
    cfac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cfb0:	48 89 c6             	mov    %rax,%rsi
    cfb3:	48 89 df             	mov    %rbx,%rdi
    cfb6:	e8 f7 ae ff ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
    cfbb:	48 8d 05 94 f9 ff ff 	lea    -0x66c(%rip),%rax        # c956 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    cfc2:	48 89 c2             	mov    %rax,%rdx
    cfc5:	48 8d 05 8c 3c 03 00 	lea    0x33c8c(%rip),%rax        # 40c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cfcc:	48 89 c6             	mov    %rax,%rsi
    cfcf:	48 89 df             	mov    %rbx,%rdi
    cfd2:	e8 a9 83 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    cfd7:	bf 28 00 00 00       	mov    $0x28,%edi
    cfdc:	e8 ef 80 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cfe1:	48 89 c3             	mov    %rax,%rbx
    cfe4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cfe8:	48 89 c6             	mov    %rax,%rsi
    cfeb:	48 89 df             	mov    %rbx,%rdi
    cfee:	e8 91 af ff ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
    cff3:	48 8d 05 ec f8 ff ff 	lea    -0x714(%rip),%rax        # c8e6 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    cffa:	48 89 c2             	mov    %rax,%rdx
    cffd:	48 8d 05 3c 3c 03 00 	lea    0x33c3c(%rip),%rax        # 40c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d004:	48 89 c6             	mov    %rax,%rsi
    d007:	48 89 df             	mov    %rbx,%rdi
    d00a:	e8 71 83 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    d00f:	bf 28 00 00 00       	mov    $0x28,%edi
    d014:	e8 b7 80 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d019:	48 89 c3             	mov    %rax,%rbx
    d01c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d020:	48 89 c6             	mov    %rax,%rsi
    d023:	48 89 df             	mov    %rbx,%rdi
    d026:	e8 2b b0 ff ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
    d02b:	48 8d 05 44 f8 ff ff 	lea    -0x7bc(%rip),%rax        # c876 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    d032:	48 89 c2             	mov    %rax,%rdx
    d035:	48 8d 05 ec 3b 03 00 	lea    0x33bec(%rip),%rax        # 40c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d03c:	48 89 c6             	mov    %rax,%rsi
    d03f:	48 89 df             	mov    %rbx,%rdi
    d042:	e8 39 83 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    d047:	bf 28 00 00 00       	mov    $0x28,%edi
    d04c:	e8 7f 80 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d051:	48 89 c3             	mov    %rax,%rbx
    d054:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d058:	48 89 c6             	mov    %rax,%rsi
    d05b:	48 89 df             	mov    %rbx,%rdi
    d05e:	e8 c5 b0 ff ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
    d063:	48 8d 05 9c f7 ff ff 	lea    -0x864(%rip),%rax        # c806 <_ZN2vk19TooManyObjectsErrorD1Ev>
    d06a:	48 89 c2             	mov    %rax,%rdx
    d06d:	48 8d 05 9c 3b 03 00 	lea    0x33b9c(%rip),%rax        # 40c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d074:	48 89 c6             	mov    %rax,%rsi
    d077:	48 89 df             	mov    %rbx,%rdi
    d07a:	e8 01 83 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    d07f:	bf 28 00 00 00       	mov    $0x28,%edi
    d084:	e8 47 80 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d089:	48 89 c3             	mov    %rax,%rbx
    d08c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d090:	48 89 c6             	mov    %rax,%rsi
    d093:	48 89 df             	mov    %rbx,%rdi
    d096:	e8 5f b1 ff ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
    d09b:	48 8d 05 f4 f6 ff ff 	lea    -0x90c(%rip),%rax        # c796 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    d0a2:	48 89 c2             	mov    %rax,%rdx
    d0a5:	48 8d 05 4c 3b 03 00 	lea    0x33b4c(%rip),%rax        # 40bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d0ac:	48 89 c6             	mov    %rax,%rsi
    d0af:	48 89 df             	mov    %rbx,%rdi
    d0b2:	e8 c9 82 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    d0b7:	bf 28 00 00 00       	mov    $0x28,%edi
    d0bc:	e8 0f 80 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d0c1:	48 89 c3             	mov    %rax,%rbx
    d0c4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d0c8:	48 89 c6             	mov    %rax,%rsi
    d0cb:	48 89 df             	mov    %rbx,%rdi
    d0ce:	e8 f9 b1 ff ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
    d0d3:	48 8d 05 4c f6 ff ff 	lea    -0x9b4(%rip),%rax        # c726 <_ZN2vk19FragmentedPoolErrorD1Ev>
    d0da:	48 89 c2             	mov    %rax,%rdx
    d0dd:	48 8d 05 fc 3a 03 00 	lea    0x33afc(%rip),%rax        # 40be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d0e4:	48 89 c6             	mov    %rax,%rsi
    d0e7:	48 89 df             	mov    %rbx,%rdi
    d0ea:	e8 91 82 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    d0ef:	bf 28 00 00 00       	mov    $0x28,%edi
    d0f4:	e8 d7 7f ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d0f9:	48 89 c3             	mov    %rax,%rbx
    d0fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d100:	48 89 c6             	mov    %rax,%rsi
    d103:	48 89 df             	mov    %rbx,%rdi
    d106:	e8 93 b2 ff ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
    d10b:	48 8d 05 a4 f5 ff ff 	lea    -0xa5c(%rip),%rax        # c6b6 <_ZN2vk12UnknownErrorD1Ev>
    d112:	48 89 c2             	mov    %rax,%rdx
    d115:	48 8d 05 ac 3a 03 00 	lea    0x33aac(%rip),%rax        # 40bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d11c:	48 89 c6             	mov    %rax,%rsi
    d11f:	48 89 df             	mov    %rbx,%rdi
    d122:	e8 59 82 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    d127:	bf 28 00 00 00       	mov    $0x28,%edi
    d12c:	e8 9f 7f ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d131:	48 89 c3             	mov    %rax,%rbx
    d134:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d138:	48 89 c6             	mov    %rax,%rsi
    d13b:	48 89 df             	mov    %rbx,%rdi
    d13e:	e8 2d b3 ff ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
    d143:	48 8d 05 fc f4 ff ff 	lea    -0xb04(%rip),%rax        # c646 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    d14a:	48 89 c2             	mov    %rax,%rdx
    d14d:	48 8d 05 5c 3a 03 00 	lea    0x33a5c(%rip),%rax        # 40bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d154:	48 89 c6             	mov    %rax,%rsi
    d157:	48 89 df             	mov    %rbx,%rdi
    d15a:	e8 21 82 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    d15f:	bf 28 00 00 00       	mov    $0x28,%edi
    d164:	e8 67 7f ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d169:	48 89 c3             	mov    %rax,%rbx
    d16c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d170:	48 89 c6             	mov    %rax,%rsi
    d173:	48 89 df             	mov    %rbx,%rdi
    d176:	e8 c7 b3 ff ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
    d17b:	48 8d 05 54 f4 ff ff 	lea    -0xbac(%rip),%rax        # c5d6 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    d182:	48 89 c2             	mov    %rax,%rdx
    d185:	48 8d 05 0c 3a 03 00 	lea    0x33a0c(%rip),%rax        # 40b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d18c:	48 89 c6             	mov    %rax,%rsi
    d18f:	48 89 df             	mov    %rbx,%rdi
    d192:	e8 e9 81 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    d197:	bf 28 00 00 00       	mov    $0x28,%edi
    d19c:	e8 2f 7f ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d1a1:	48 89 c3             	mov    %rax,%rbx
    d1a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d1a8:	48 89 c6             	mov    %rax,%rsi
    d1ab:	48 89 df             	mov    %rbx,%rdi
    d1ae:	e8 61 b4 ff ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
    d1b3:	48 8d 05 ac f3 ff ff 	lea    -0xc54(%rip),%rax        # c566 <_ZN2vk18FragmentationErrorD1Ev>
    d1ba:	48 89 c2             	mov    %rax,%rdx
    d1bd:	48 8d 05 bc 39 03 00 	lea    0x339bc(%rip),%rax        # 40b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d1c4:	48 89 c6             	mov    %rax,%rsi
    d1c7:	48 89 df             	mov    %rbx,%rdi
    d1ca:	e8 b1 81 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    d1cf:	bf 28 00 00 00       	mov    $0x28,%edi
    d1d4:	e8 f7 7e ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d1d9:	48 89 c3             	mov    %rax,%rbx
    d1dc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d1e0:	48 89 c6             	mov    %rax,%rsi
    d1e3:	48 89 df             	mov    %rbx,%rdi
    d1e6:	e8 fb b4 ff ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
    d1eb:	48 8d 05 04 f3 ff ff 	lea    -0xcfc(%rip),%rax        # c4f6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    d1f2:	48 89 c2             	mov    %rax,%rdx
    d1f5:	48 8d 05 6c 39 03 00 	lea    0x3396c(%rip),%rax        # 40b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d1fc:	48 89 c6             	mov    %rax,%rsi
    d1ff:	48 89 df             	mov    %rbx,%rdi
    d202:	e8 79 81 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    d207:	bf 28 00 00 00       	mov    $0x28,%edi
    d20c:	e8 bf 7e ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d211:	48 89 c3             	mov    %rax,%rbx
    d214:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d218:	48 89 c6             	mov    %rax,%rsi
    d21b:	48 89 df             	mov    %rbx,%rdi
    d21e:	e8 95 b5 ff ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
    d223:	48 8d 05 5c f2 ff ff 	lea    -0xda4(%rip),%rax        # c486 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    d22a:	48 89 c2             	mov    %rax,%rdx
    d22d:	48 8d 05 1c 39 03 00 	lea    0x3391c(%rip),%rax        # 40b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d234:	48 89 c6             	mov    %rax,%rsi
    d237:	48 89 df             	mov    %rbx,%rdi
    d23a:	e8 41 81 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    d23f:	bf 28 00 00 00       	mov    $0x28,%edi
    d244:	e8 87 7e ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d249:	48 89 c3             	mov    %rax,%rbx
    d24c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d250:	48 89 c6             	mov    %rax,%rsi
    d253:	48 89 df             	mov    %rbx,%rdi
    d256:	e8 2f b6 ff ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
    d25b:	48 8d 05 b4 f1 ff ff 	lea    -0xe4c(%rip),%rax        # c416 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    d262:	48 89 c2             	mov    %rax,%rdx
    d265:	48 8d 05 cc 38 03 00 	lea    0x338cc(%rip),%rax        # 40b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d26c:	48 89 c6             	mov    %rax,%rsi
    d26f:	48 89 df             	mov    %rbx,%rdi
    d272:	e8 09 81 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    d277:	bf 28 00 00 00       	mov    $0x28,%edi
    d27c:	e8 4f 7e ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d281:	48 89 c3             	mov    %rax,%rbx
    d284:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d288:	48 89 c6             	mov    %rax,%rsi
    d28b:	48 89 df             	mov    %rbx,%rdi
    d28e:	e8 c9 b6 ff ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
    d293:	48 8d 05 0c f1 ff ff 	lea    -0xef4(%rip),%rax        # c3a6 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    d29a:	48 89 c2             	mov    %rax,%rdx
    d29d:	48 8d 05 7c 38 03 00 	lea    0x3387c(%rip),%rax        # 40b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d2a4:	48 89 c6             	mov    %rax,%rsi
    d2a7:	48 89 df             	mov    %rbx,%rdi
    d2aa:	e8 d1 80 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    d2af:	bf 28 00 00 00       	mov    $0x28,%edi
    d2b4:	e8 17 7e ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d2b9:	48 89 c3             	mov    %rax,%rbx
    d2bc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d2c0:	48 89 c6             	mov    %rax,%rsi
    d2c3:	48 89 df             	mov    %rbx,%rdi
    d2c6:	e8 63 b7 ff ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
    d2cb:	48 8d 05 64 f0 ff ff 	lea    -0xf9c(%rip),%rax        # c336 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    d2d2:	48 89 c2             	mov    %rax,%rdx
    d2d5:	48 8d 05 2c 38 03 00 	lea    0x3382c(%rip),%rax        # 40b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d2dc:	48 89 c6             	mov    %rax,%rsi
    d2df:	48 89 df             	mov    %rbx,%rdi
    d2e2:	e8 99 80 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    d2e7:	bf 28 00 00 00       	mov    $0x28,%edi
    d2ec:	e8 df 7d ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d2f1:	48 89 c3             	mov    %rax,%rbx
    d2f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d2f8:	48 89 c6             	mov    %rax,%rsi
    d2fb:	48 89 df             	mov    %rbx,%rdi
    d2fe:	e8 fd b7 ff ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
    d303:	48 8d 05 bc ef ff ff 	lea    -0x1044(%rip),%rax        # c2c6 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    d30a:	48 89 c2             	mov    %rax,%rdx
    d30d:	48 8d 05 dc 37 03 00 	lea    0x337dc(%rip),%rax        # 40af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d314:	48 89 c6             	mov    %rax,%rsi
    d317:	48 89 df             	mov    %rbx,%rdi
    d31a:	e8 61 80 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    d31f:	bf 28 00 00 00       	mov    $0x28,%edi
    d324:	e8 a7 7d ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d329:	48 89 c3             	mov    %rax,%rbx
    d32c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d330:	48 89 c6             	mov    %rax,%rsi
    d333:	48 89 df             	mov    %rbx,%rdi
    d336:	e8 97 b8 ff ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
    d33b:	48 8d 05 14 ef ff ff 	lea    -0x10ec(%rip),%rax        # c256 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    d342:	48 89 c2             	mov    %rax,%rdx
    d345:	48 8d 05 8c 37 03 00 	lea    0x3378c(%rip),%rax        # 40ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d34c:	48 89 c6             	mov    %rax,%rsi
    d34f:	48 89 df             	mov    %rbx,%rdi
    d352:	e8 29 80 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    d357:	bf 28 00 00 00       	mov    $0x28,%edi
    d35c:	e8 6f 7d ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d361:	48 89 c3             	mov    %rax,%rbx
    d364:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d368:	48 89 c6             	mov    %rax,%rsi
    d36b:	48 89 df             	mov    %rbx,%rdi
    d36e:	e8 31 b9 ff ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
    d373:	48 8d 05 6c ee ff ff 	lea    -0x1194(%rip),%rax        # c1e6 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    d37a:	48 89 c2             	mov    %rax,%rdx
    d37d:	48 8d 05 3c 37 03 00 	lea    0x3373c(%rip),%rax        # 40ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d384:	48 89 c6             	mov    %rax,%rsi
    d387:	48 89 df             	mov    %rbx,%rdi
    d38a:	e8 f1 7f ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    d38f:	bf 28 00 00 00       	mov    $0x28,%edi
    d394:	e8 37 7d ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d399:	48 89 c3             	mov    %rax,%rbx
    d39c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d3a0:	48 89 c6             	mov    %rax,%rsi
    d3a3:	48 89 df             	mov    %rbx,%rdi
    d3a6:	e8 cb b9 ff ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
    d3ab:	48 8d 05 c4 ed ff ff 	lea    -0x123c(%rip),%rax        # c176 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    d3b2:	48 89 c2             	mov    %rax,%rdx
    d3b5:	48 8d 05 ec 36 03 00 	lea    0x336ec(%rip),%rax        # 40aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d3bc:	48 89 c6             	mov    %rax,%rsi
    d3bf:	48 89 df             	mov    %rbx,%rdi
    d3c2:	e8 b9 7f ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    d3c7:	bf 28 00 00 00       	mov    $0x28,%edi
    d3cc:	e8 ff 7c ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d3d1:	48 89 c3             	mov    %rax,%rbx
    d3d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d3d8:	48 89 c6             	mov    %rax,%rsi
    d3db:	48 89 df             	mov    %rbx,%rdi
    d3de:	e8 65 ba ff ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
    d3e3:	48 8d 05 1c ed ff ff 	lea    -0x12e4(%rip),%rax        # c106 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    d3ea:	48 89 c2             	mov    %rax,%rdx
    d3ed:	48 8d 05 9c 36 03 00 	lea    0x3369c(%rip),%rax        # 40a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d3f4:	48 89 c6             	mov    %rax,%rsi
    d3f7:	48 89 df             	mov    %rbx,%rdi
    d3fa:	e8 81 7f ff ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
    d3ff:	bf 28 00 00 00       	mov    $0x28,%edi
    d404:	e8 c7 7c ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d409:	48 89 c3             	mov    %rax,%rbx
    d40c:	8b 45 cc             	mov    -0x34(%rbp),%eax
    d40f:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    d412:	0f b6 05 3f 3f 03 00 	movzbl 0x33f3f(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    d419:	84 c0                	test   %al,%al
    d41b:	0f 94 c0             	sete   %al
    d41e:	84 c0                	test   %al,%al
    d420:	74 4a                	je     d46c <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    d422:	48 8d 05 2f 3f 03 00 	lea    0x33f2f(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    d429:	48 89 c7             	mov    %rax,%rdi
    d42c:	e8 8f 7f ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    d431:	85 c0                	test   %eax,%eax
    d433:	0f 95 c0             	setne  %al
    d436:	84 c0                	test   %al,%al
    d438:	74 32                	je     d46c <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    d43a:	48 8d 05 b7 3d 03 00 	lea    0x33db7(%rip),%rax        # 411f8 <__dso_handle>
    d441:	48 89 c2             	mov    %rax,%rdx
    d444:	48 8d 05 b5 3d 03 00 	lea    0x33db5(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    d44b:	48 89 c6             	mov    %rax,%rsi
    d44e:	48 8d 05 11 f8 ff ff 	lea    -0x7ef(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    d455:	48 89 c7             	mov    %rax,%rdi
    d458:	e8 73 7d ff ff       	call   51d0 <__cxa_atexit@plt>
    d45d:	48 8d 05 f4 3e 03 00 	lea    0x33ef4(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    d464:	48 89 c7             	mov    %rax,%rdi
    d467:	e8 94 7c ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    d46c:	48 8d 15 8d 3d 03 00 	lea    0x33d8d(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    d473:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    d476:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    d47a:	89 ce                	mov    %ecx,%esi
    d47c:	48 89 c7             	mov    %rax,%rdi
    d47f:	e8 84 8e ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    d484:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d488:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
    d48c:	48 89 c6             	mov    %rax,%rsi
    d48f:	48 89 d7             	mov    %rdx,%rdi
    d492:	89 f1                	mov    %esi,%ecx
    d494:	48 89 d0             	mov    %rdx,%rax
    d497:	89 ce                	mov    %ecx,%esi
    d499:	48 89 c2             	mov    %rax,%rdx
    d49c:	48 89 df             	mov    %rbx,%rdi
    d49f:	e8 6c a3 ff ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
    d4a4:	48 8d 05 9b a4 ff ff 	lea    -0x5b65(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
    d4ab:	48 89 c2             	mov    %rax,%rdx
    d4ae:	48 8d 05 4b 38 03 00 	lea    0x3384b(%rip),%rax        # 40d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
    d4b5:	48 89 c6             	mov    %rax,%rsi
    d4b8:	48 89 df             	mov    %rbx,%rdi
    d4bb:	e8 c0 7e ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    d4c0:	49 89 c4             	mov    %rax,%r12
    d4c3:	48 89 df             	mov    %rbx,%rdi
    d4c6:	e8 85 7c ff ff       	call   5150 <__cxa_free_exception@plt>
    d4cb:	4c 89 e0             	mov    %r12,%rax
    d4ce:	48 89 c7             	mov    %rax,%rdi
    d4d1:	e8 ca 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    d4d6:	49 89 c4             	mov    %rax,%r12
    d4d9:	48 89 df             	mov    %rbx,%rdi
    d4dc:	e8 6f 7c ff ff       	call   5150 <__cxa_free_exception@plt>
    d4e1:	4c 89 e0             	mov    %r12,%rax
    d4e4:	48 89 c7             	mov    %rax,%rdi
    d4e7:	e8 b4 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    d4ec:	49 89 c4             	mov    %rax,%r12
    d4ef:	48 89 df             	mov    %rbx,%rdi
    d4f2:	e8 59 7c ff ff       	call   5150 <__cxa_free_exception@plt>
    d4f7:	4c 89 e0             	mov    %r12,%rax
    d4fa:	48 89 c7             	mov    %rax,%rdi
    d4fd:	e8 9e 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    d502:	49 89 c4             	mov    %rax,%r12
    d505:	48 89 df             	mov    %rbx,%rdi
    d508:	e8 43 7c ff ff       	call   5150 <__cxa_free_exception@plt>
    d50d:	4c 89 e0             	mov    %r12,%rax
    d510:	48 89 c7             	mov    %rax,%rdi
    d513:	e8 88 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    d518:	49 89 c4             	mov    %rax,%r12
    d51b:	48 89 df             	mov    %rbx,%rdi
    d51e:	e8 2d 7c ff ff       	call   5150 <__cxa_free_exception@plt>
    d523:	4c 89 e0             	mov    %r12,%rax
    d526:	48 89 c7             	mov    %rax,%rdi
    d529:	e8 72 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    d52e:	49 89 c4             	mov    %rax,%r12
    d531:	48 89 df             	mov    %rbx,%rdi
    d534:	e8 17 7c ff ff       	call   5150 <__cxa_free_exception@plt>
    d539:	4c 89 e0             	mov    %r12,%rax
    d53c:	48 89 c7             	mov    %rax,%rdi
    d53f:	e8 5c 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    d544:	49 89 c4             	mov    %rax,%r12
    d547:	48 89 df             	mov    %rbx,%rdi
    d54a:	e8 01 7c ff ff       	call   5150 <__cxa_free_exception@plt>
    d54f:	4c 89 e0             	mov    %r12,%rax
    d552:	48 89 c7             	mov    %rax,%rdi
    d555:	e8 46 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    d55a:	49 89 c4             	mov    %rax,%r12
    d55d:	48 89 df             	mov    %rbx,%rdi
    d560:	e8 eb 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d565:	4c 89 e0             	mov    %r12,%rax
    d568:	48 89 c7             	mov    %rax,%rdi
    d56b:	e8 30 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    d570:	49 89 c4             	mov    %rax,%r12
    d573:	48 89 df             	mov    %rbx,%rdi
    d576:	e8 d5 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d57b:	4c 89 e0             	mov    %r12,%rax
    d57e:	48 89 c7             	mov    %rax,%rdi
    d581:	e8 1a 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    d586:	49 89 c4             	mov    %rax,%r12
    d589:	48 89 df             	mov    %rbx,%rdi
    d58c:	e8 bf 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d591:	4c 89 e0             	mov    %r12,%rax
    d594:	48 89 c7             	mov    %rax,%rdi
    d597:	e8 04 7e ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    d59c:	49 89 c4             	mov    %rax,%r12
    d59f:	48 89 df             	mov    %rbx,%rdi
    d5a2:	e8 a9 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d5a7:	4c 89 e0             	mov    %r12,%rax
    d5aa:	48 89 c7             	mov    %rax,%rdi
    d5ad:	e8 ee 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    d5b2:	49 89 c4             	mov    %rax,%r12
    d5b5:	48 89 df             	mov    %rbx,%rdi
    d5b8:	e8 93 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d5bd:	4c 89 e0             	mov    %r12,%rax
    d5c0:	48 89 c7             	mov    %rax,%rdi
    d5c3:	e8 d8 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    d5c8:	49 89 c4             	mov    %rax,%r12
    d5cb:	48 89 df             	mov    %rbx,%rdi
    d5ce:	e8 7d 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d5d3:	4c 89 e0             	mov    %r12,%rax
    d5d6:	48 89 c7             	mov    %rax,%rdi
    d5d9:	e8 c2 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    d5de:	49 89 c4             	mov    %rax,%r12
    d5e1:	48 89 df             	mov    %rbx,%rdi
    d5e4:	e8 67 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d5e9:	4c 89 e0             	mov    %r12,%rax
    d5ec:	48 89 c7             	mov    %rax,%rdi
    d5ef:	e8 ac 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    d5f4:	49 89 c4             	mov    %rax,%r12
    d5f7:	48 89 df             	mov    %rbx,%rdi
    d5fa:	e8 51 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d5ff:	4c 89 e0             	mov    %r12,%rax
    d602:	48 89 c7             	mov    %rax,%rdi
    d605:	e8 96 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    d60a:	49 89 c4             	mov    %rax,%r12
    d60d:	48 89 df             	mov    %rbx,%rdi
    d610:	e8 3b 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d615:	4c 89 e0             	mov    %r12,%rax
    d618:	48 89 c7             	mov    %rax,%rdi
    d61b:	e8 80 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    d620:	49 89 c4             	mov    %rax,%r12
    d623:	48 89 df             	mov    %rbx,%rdi
    d626:	e8 25 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d62b:	4c 89 e0             	mov    %r12,%rax
    d62e:	48 89 c7             	mov    %rax,%rdi
    d631:	e8 6a 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    d636:	49 89 c4             	mov    %rax,%r12
    d639:	48 89 df             	mov    %rbx,%rdi
    d63c:	e8 0f 7b ff ff       	call   5150 <__cxa_free_exception@plt>
    d641:	4c 89 e0             	mov    %r12,%rax
    d644:	48 89 c7             	mov    %rax,%rdi
    d647:	e8 54 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    d64c:	49 89 c4             	mov    %rax,%r12
    d64f:	48 89 df             	mov    %rbx,%rdi
    d652:	e8 f9 7a ff ff       	call   5150 <__cxa_free_exception@plt>
    d657:	4c 89 e0             	mov    %r12,%rax
    d65a:	48 89 c7             	mov    %rax,%rdi
    d65d:	e8 3e 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    d662:	49 89 c4             	mov    %rax,%r12
    d665:	48 89 df             	mov    %rbx,%rdi
    d668:	e8 e3 7a ff ff       	call   5150 <__cxa_free_exception@plt>
    d66d:	4c 89 e0             	mov    %r12,%rax
    d670:	48 89 c7             	mov    %rax,%rdi
    d673:	e8 28 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    d678:	49 89 c4             	mov    %rax,%r12
    d67b:	48 89 df             	mov    %rbx,%rdi
    d67e:	e8 cd 7a ff ff       	call   5150 <__cxa_free_exception@plt>
    d683:	4c 89 e0             	mov    %r12,%rax
    d686:	48 89 c7             	mov    %rax,%rdi
    d689:	e8 12 7d ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    d68e:	49 89 c4             	mov    %rax,%r12
    d691:	48 89 df             	mov    %rbx,%rdi
    d694:	e8 b7 7a ff ff       	call   5150 <__cxa_free_exception@plt>
    d699:	4c 89 e0             	mov    %r12,%rax
    d69c:	48 89 c7             	mov    %rax,%rdi
    d69f:	e8 fc 7c ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    d6a4:	49 89 c4             	mov    %rax,%r12
    d6a7:	48 89 df             	mov    %rbx,%rdi
    d6aa:	e8 a1 7a ff ff       	call   5150 <__cxa_free_exception@plt>
    d6af:	4c 89 e0             	mov    %r12,%rax
    d6b2:	48 89 c7             	mov    %rax,%rdi
    d6b5:	e8 e6 7c ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    d6ba:	49 89 c4             	mov    %rax,%r12
    d6bd:	48 89 df             	mov    %rbx,%rdi
    d6c0:	e8 8b 7a ff ff       	call   5150 <__cxa_free_exception@plt>
    d6c5:	4c 89 e0             	mov    %r12,%rax
    d6c8:	48 89 c7             	mov    %rax,%rdi
    d6cb:	e8 d0 7c ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    d6d0:	49 89 c4             	mov    %rax,%r12
    d6d3:	48 89 df             	mov    %rbx,%rdi
    d6d6:	e8 75 7a ff ff       	call   5150 <__cxa_free_exception@plt>
    d6db:	4c 89 e0             	mov    %r12,%rax
    d6de:	48 89 c7             	mov    %rax,%rdi
    d6e1:	e8 ba 7c ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    d6e6:	49 89 c4             	mov    %rax,%r12
    d6e9:	48 89 df             	mov    %rbx,%rdi
    d6ec:	e8 5f 7a ff ff       	call   5150 <__cxa_free_exception@plt>
    d6f1:	4c 89 e0             	mov    %r12,%rax
    d6f4:	48 89 c7             	mov    %rax,%rdi
    d6f7:	e8 a4 7c ff ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
    d6fc:	49 89 c4             	mov    %rax,%r12
    d6ff:	48 89 df             	mov    %rbx,%rdi
    d702:	e8 49 7a ff ff       	call   5150 <__cxa_free_exception@plt>
    d707:	4c 89 e0             	mov    %r12,%rax
    d70a:	48 89 c7             	mov    %rax,%rdi
    d70d:	e8 8e 7c ff ff       	call   53a0 <_Unwind_Resume@plt>

000000000000d712 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
    d712:	55                   	push   %rbp
    d713:	48 89 e5             	mov    %rsp,%rbp
    d716:	41 54                	push   %r12
    d718:	53                   	push   %rbx
    d719:	48 83 ec 30          	sub    $0x30,%rsp
    d71d:	89 7d cc             	mov    %edi,-0x34(%rbp)
    d720:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
    d724:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    d728:	0f 89 28 07 00 00    	jns    de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d72e:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
    d732:	0f 8d 3d 01 00 00    	jge    d875 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
    d738:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    d73f:	0f 84 19 05 00 00    	je     dc5e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
    d745:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    d74c:	0f 8f 04 07 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d752:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    d759:	0f 84 37 05 00 00    	je     dc96 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
    d75f:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    d766:	0f 8f ea 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d76c:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    d773:	0f 84 55 05 00 00    	je     dcce <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
    d779:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    d780:	0f 8f d0 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d786:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    d78d:	0f 84 73 05 00 00    	je     dd06 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
    d793:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    d79a:	0f 8f b6 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d7a0:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    d7a7:	0f 84 91 05 00 00    	je     dd3e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
    d7ad:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    d7b4:	0f 8f 9c 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d7ba:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    d7c1:	0f 84 af 05 00 00    	je     dd76 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
    d7c7:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    d7ce:	0f 8f 82 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d7d4:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    d7db:	0f 84 9d 03 00 00    	je     db7e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
    d7e1:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    d7e8:	0f 8f 68 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d7ee:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    d7f5:	0f 84 bb 03 00 00    	je     dbb6 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
    d7fb:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    d802:	0f 8f 4e 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d808:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    d80f:	0f 84 99 05 00 00    	je     ddae <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
    d815:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    d81c:	0f 8f 34 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d822:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    d829:	0f 84 bf 03 00 00    	je     dbee <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
    d82f:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    d836:	0f 8f 1a 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d83c:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    d843:	0f 84 9d 05 00 00    	je     dde6 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
    d849:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    d850:	0f 8f 00 06 00 00    	jg     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d856:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
    d85d:	0f 84 bb 05 00 00    	je     de1e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
    d863:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
    d86a:	0f 84 b6 03 00 00    	je     dc26 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
    d870:	e9 e1 05 00 00       	jmp    de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d875:	8b 45 cc             	mov    -0x34(%rbp),%eax
    d878:	83 c0 0d             	add    $0xd,%eax
    d87b:	83 f8 0c             	cmp    $0xc,%eax
    d87e:	0f 87 d2 05 00 00    	ja     de56 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d884:	89 c0                	mov    %eax,%eax
    d886:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    d88d:	00 
    d88e:	48 8d 05 1b cf 01 00 	lea    0x1cf1b(%rip),%rax        # 2a7b0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    d895:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    d898:	48 98                	cltq
    d89a:	48 8d 15 0f cf 01 00 	lea    0x1cf0f(%rip),%rdx        # 2a7b0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    d8a1:	48 01 d0             	add    %rdx,%rax
    d8a4:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    d8a6:	bf 28 00 00 00       	mov    $0x28,%edi
    d8ab:	e8 20 78 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d8b0:	48 89 c3             	mov    %rax,%rbx
    d8b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d8b7:	48 89 c6             	mov    %rax,%rsi
    d8ba:	48 89 df             	mov    %rbx,%rdi
    d8bd:	e8 04 a1 ff ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
    d8c2:	48 8d 05 2d f3 ff ff 	lea    -0xcd3(%rip),%rax        # cbf6 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    d8c9:	48 89 c2             	mov    %rax,%rdx
    d8cc:	48 8d 05 15 34 03 00 	lea    0x33415(%rip),%rax        # 40ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d8d3:	48 89 c6             	mov    %rax,%rsi
    d8d6:	48 89 df             	mov    %rbx,%rdi
    d8d9:	e8 a2 7a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    d8de:	bf 28 00 00 00       	mov    $0x28,%edi
    d8e3:	e8 e8 77 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d8e8:	48 89 c3             	mov    %rax,%rbx
    d8eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d8ef:	48 89 c6             	mov    %rax,%rsi
    d8f2:	48 89 df             	mov    %rbx,%rdi
    d8f5:	e8 9e a1 ff ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
    d8fa:	48 8d 05 85 f2 ff ff 	lea    -0xd7b(%rip),%rax        # cb86 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    d901:	48 89 c2             	mov    %rax,%rdx
    d904:	48 8d 05 c5 33 03 00 	lea    0x333c5(%rip),%rax        # 40cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d90b:	48 89 c6             	mov    %rax,%rsi
    d90e:	48 89 df             	mov    %rbx,%rdi
    d911:	e8 6a 7a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    d916:	bf 28 00 00 00       	mov    $0x28,%edi
    d91b:	e8 b0 77 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d920:	48 89 c3             	mov    %rax,%rbx
    d923:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d927:	48 89 c6             	mov    %rax,%rsi
    d92a:	48 89 df             	mov    %rbx,%rdi
    d92d:	e8 38 a2 ff ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
    d932:	48 8d 05 dd f1 ff ff 	lea    -0xe23(%rip),%rax        # cb16 <_ZN2vk25InitializationFailedErrorD1Ev>
    d939:	48 89 c2             	mov    %rax,%rdx
    d93c:	48 8d 05 75 33 03 00 	lea    0x33375(%rip),%rax        # 40cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d943:	48 89 c6             	mov    %rax,%rsi
    d946:	48 89 df             	mov    %rbx,%rdi
    d949:	e8 32 7a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    d94e:	bf 28 00 00 00       	mov    $0x28,%edi
    d953:	e8 78 77 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d958:	48 89 c3             	mov    %rax,%rbx
    d95b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d95f:	48 89 c6             	mov    %rax,%rsi
    d962:	48 89 df             	mov    %rbx,%rdi
    d965:	e8 d2 a2 ff ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
    d96a:	48 8d 05 35 f1 ff ff 	lea    -0xecb(%rip),%rax        # caa6 <_ZN2vk15DeviceLostErrorD1Ev>
    d971:	48 89 c2             	mov    %rax,%rdx
    d974:	48 8d 05 25 33 03 00 	lea    0x33325(%rip),%rax        # 40ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d97b:	48 89 c6             	mov    %rax,%rsi
    d97e:	48 89 df             	mov    %rbx,%rdi
    d981:	e8 fa 79 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    d986:	bf 28 00 00 00       	mov    $0x28,%edi
    d98b:	e8 40 77 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d990:	48 89 c3             	mov    %rax,%rbx
    d993:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d997:	48 89 c6             	mov    %rax,%rsi
    d99a:	48 89 df             	mov    %rbx,%rdi
    d99d:	e8 6c a3 ff ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
    d9a2:	48 8d 05 8d f0 ff ff 	lea    -0xf73(%rip),%rax        # ca36 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    d9a9:	48 89 c2             	mov    %rax,%rdx
    d9ac:	48 8d 05 d5 32 03 00 	lea    0x332d5(%rip),%rax        # 40c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d9b3:	48 89 c6             	mov    %rax,%rsi
    d9b6:	48 89 df             	mov    %rbx,%rdi
    d9b9:	e8 c2 79 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    d9be:	bf 28 00 00 00       	mov    $0x28,%edi
    d9c3:	e8 08 77 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d9c8:	48 89 c3             	mov    %rax,%rbx
    d9cb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d9cf:	48 89 c6             	mov    %rax,%rsi
    d9d2:	48 89 df             	mov    %rbx,%rdi
    d9d5:	e8 06 a4 ff ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
    d9da:	48 8d 05 e5 ef ff ff 	lea    -0x101b(%rip),%rax        # c9c6 <_ZN2vk20LayerNotPresentErrorD1Ev>
    d9e1:	48 89 c2             	mov    %rax,%rdx
    d9e4:	48 8d 05 85 32 03 00 	lea    0x33285(%rip),%rax        # 40c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d9eb:	48 89 c6             	mov    %rax,%rsi
    d9ee:	48 89 df             	mov    %rbx,%rdi
    d9f1:	e8 8a 79 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    d9f6:	bf 28 00 00 00       	mov    $0x28,%edi
    d9fb:	e8 d0 76 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    da00:	48 89 c3             	mov    %rax,%rbx
    da03:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    da07:	48 89 c6             	mov    %rax,%rsi
    da0a:	48 89 df             	mov    %rbx,%rdi
    da0d:	e8 a0 a4 ff ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
    da12:	48 8d 05 3d ef ff ff 	lea    -0x10c3(%rip),%rax        # c956 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    da19:	48 89 c2             	mov    %rax,%rdx
    da1c:	48 8d 05 35 32 03 00 	lea    0x33235(%rip),%rax        # 40c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    da23:	48 89 c6             	mov    %rax,%rsi
    da26:	48 89 df             	mov    %rbx,%rdi
    da29:	e8 52 79 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    da2e:	bf 28 00 00 00       	mov    $0x28,%edi
    da33:	e8 98 76 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    da38:	48 89 c3             	mov    %rax,%rbx
    da3b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    da3f:	48 89 c6             	mov    %rax,%rsi
    da42:	48 89 df             	mov    %rbx,%rdi
    da45:	e8 3a a5 ff ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
    da4a:	48 8d 05 95 ee ff ff 	lea    -0x116b(%rip),%rax        # c8e6 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    da51:	48 89 c2             	mov    %rax,%rdx
    da54:	48 8d 05 e5 31 03 00 	lea    0x331e5(%rip),%rax        # 40c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    da5b:	48 89 c6             	mov    %rax,%rsi
    da5e:	48 89 df             	mov    %rbx,%rdi
    da61:	e8 1a 79 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    da66:	bf 28 00 00 00       	mov    $0x28,%edi
    da6b:	e8 60 76 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    da70:	48 89 c3             	mov    %rax,%rbx
    da73:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    da77:	48 89 c6             	mov    %rax,%rsi
    da7a:	48 89 df             	mov    %rbx,%rdi
    da7d:	e8 d4 a5 ff ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
    da82:	48 8d 05 ed ed ff ff 	lea    -0x1213(%rip),%rax        # c876 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    da89:	48 89 c2             	mov    %rax,%rdx
    da8c:	48 8d 05 95 31 03 00 	lea    0x33195(%rip),%rax        # 40c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    da93:	48 89 c6             	mov    %rax,%rsi
    da96:	48 89 df             	mov    %rbx,%rdi
    da99:	e8 e2 78 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    da9e:	bf 28 00 00 00       	mov    $0x28,%edi
    daa3:	e8 28 76 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    daa8:	48 89 c3             	mov    %rax,%rbx
    daab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    daaf:	48 89 c6             	mov    %rax,%rsi
    dab2:	48 89 df             	mov    %rbx,%rdi
    dab5:	e8 6e a6 ff ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
    daba:	48 8d 05 45 ed ff ff 	lea    -0x12bb(%rip),%rax        # c806 <_ZN2vk19TooManyObjectsErrorD1Ev>
    dac1:	48 89 c2             	mov    %rax,%rdx
    dac4:	48 8d 05 45 31 03 00 	lea    0x33145(%rip),%rax        # 40c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dacb:	48 89 c6             	mov    %rax,%rsi
    dace:	48 89 df             	mov    %rbx,%rdi
    dad1:	e8 aa 78 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    dad6:	bf 28 00 00 00       	mov    $0x28,%edi
    dadb:	e8 f0 75 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dae0:	48 89 c3             	mov    %rax,%rbx
    dae3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dae7:	48 89 c6             	mov    %rax,%rsi
    daea:	48 89 df             	mov    %rbx,%rdi
    daed:	e8 08 a7 ff ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
    daf2:	48 8d 05 9d ec ff ff 	lea    -0x1363(%rip),%rax        # c796 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    daf9:	48 89 c2             	mov    %rax,%rdx
    dafc:	48 8d 05 f5 30 03 00 	lea    0x330f5(%rip),%rax        # 40bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    db03:	48 89 c6             	mov    %rax,%rsi
    db06:	48 89 df             	mov    %rbx,%rdi
    db09:	e8 72 78 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    db0e:	bf 28 00 00 00       	mov    $0x28,%edi
    db13:	e8 b8 75 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    db18:	48 89 c3             	mov    %rax,%rbx
    db1b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    db1f:	48 89 c6             	mov    %rax,%rsi
    db22:	48 89 df             	mov    %rbx,%rdi
    db25:	e8 a2 a7 ff ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
    db2a:	48 8d 05 f5 eb ff ff 	lea    -0x140b(%rip),%rax        # c726 <_ZN2vk19FragmentedPoolErrorD1Ev>
    db31:	48 89 c2             	mov    %rax,%rdx
    db34:	48 8d 05 a5 30 03 00 	lea    0x330a5(%rip),%rax        # 40be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    db3b:	48 89 c6             	mov    %rax,%rsi
    db3e:	48 89 df             	mov    %rbx,%rdi
    db41:	e8 3a 78 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    db46:	bf 28 00 00 00       	mov    $0x28,%edi
    db4b:	e8 80 75 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    db50:	48 89 c3             	mov    %rax,%rbx
    db53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    db57:	48 89 c6             	mov    %rax,%rsi
    db5a:	48 89 df             	mov    %rbx,%rdi
    db5d:	e8 3c a8 ff ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
    db62:	48 8d 05 4d eb ff ff 	lea    -0x14b3(%rip),%rax        # c6b6 <_ZN2vk12UnknownErrorD1Ev>
    db69:	48 89 c2             	mov    %rax,%rdx
    db6c:	48 8d 05 55 30 03 00 	lea    0x33055(%rip),%rax        # 40bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    db73:	48 89 c6             	mov    %rax,%rsi
    db76:	48 89 df             	mov    %rbx,%rdi
    db79:	e8 02 78 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    db7e:	bf 28 00 00 00       	mov    $0x28,%edi
    db83:	e8 48 75 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    db88:	48 89 c3             	mov    %rax,%rbx
    db8b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    db8f:	48 89 c6             	mov    %rax,%rsi
    db92:	48 89 df             	mov    %rbx,%rdi
    db95:	e8 d6 a8 ff ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
    db9a:	48 8d 05 a5 ea ff ff 	lea    -0x155b(%rip),%rax        # c646 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    dba1:	48 89 c2             	mov    %rax,%rdx
    dba4:	48 8d 05 05 30 03 00 	lea    0x33005(%rip),%rax        # 40bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dbab:	48 89 c6             	mov    %rax,%rsi
    dbae:	48 89 df             	mov    %rbx,%rdi
    dbb1:	e8 ca 77 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    dbb6:	bf 28 00 00 00       	mov    $0x28,%edi
    dbbb:	e8 10 75 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dbc0:	48 89 c3             	mov    %rax,%rbx
    dbc3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dbc7:	48 89 c6             	mov    %rax,%rsi
    dbca:	48 89 df             	mov    %rbx,%rdi
    dbcd:	e8 70 a9 ff ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
    dbd2:	48 8d 05 fd e9 ff ff 	lea    -0x1603(%rip),%rax        # c5d6 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    dbd9:	48 89 c2             	mov    %rax,%rdx
    dbdc:	48 8d 05 b5 2f 03 00 	lea    0x32fb5(%rip),%rax        # 40b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dbe3:	48 89 c6             	mov    %rax,%rsi
    dbe6:	48 89 df             	mov    %rbx,%rdi
    dbe9:	e8 92 77 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    dbee:	bf 28 00 00 00       	mov    $0x28,%edi
    dbf3:	e8 d8 74 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dbf8:	48 89 c3             	mov    %rax,%rbx
    dbfb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dbff:	48 89 c6             	mov    %rax,%rsi
    dc02:	48 89 df             	mov    %rbx,%rdi
    dc05:	e8 0a aa ff ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
    dc0a:	48 8d 05 55 e9 ff ff 	lea    -0x16ab(%rip),%rax        # c566 <_ZN2vk18FragmentationErrorD1Ev>
    dc11:	48 89 c2             	mov    %rax,%rdx
    dc14:	48 8d 05 65 2f 03 00 	lea    0x32f65(%rip),%rax        # 40b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dc1b:	48 89 c6             	mov    %rax,%rsi
    dc1e:	48 89 df             	mov    %rbx,%rdi
    dc21:	e8 5a 77 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    dc26:	bf 28 00 00 00       	mov    $0x28,%edi
    dc2b:	e8 a0 74 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dc30:	48 89 c3             	mov    %rax,%rbx
    dc33:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dc37:	48 89 c6             	mov    %rax,%rsi
    dc3a:	48 89 df             	mov    %rbx,%rdi
    dc3d:	e8 a4 aa ff ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
    dc42:	48 8d 05 ad e8 ff ff 	lea    -0x1753(%rip),%rax        # c4f6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    dc49:	48 89 c2             	mov    %rax,%rdx
    dc4c:	48 8d 05 15 2f 03 00 	lea    0x32f15(%rip),%rax        # 40b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dc53:	48 89 c6             	mov    %rax,%rsi
    dc56:	48 89 df             	mov    %rbx,%rdi
    dc59:	e8 22 77 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    dc5e:	bf 28 00 00 00       	mov    $0x28,%edi
    dc63:	e8 68 74 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dc68:	48 89 c3             	mov    %rax,%rbx
    dc6b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dc6f:	48 89 c6             	mov    %rax,%rsi
    dc72:	48 89 df             	mov    %rbx,%rdi
    dc75:	e8 3e ab ff ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
    dc7a:	48 8d 05 05 e8 ff ff 	lea    -0x17fb(%rip),%rax        # c486 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    dc81:	48 89 c2             	mov    %rax,%rdx
    dc84:	48 8d 05 c5 2e 03 00 	lea    0x32ec5(%rip),%rax        # 40b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dc8b:	48 89 c6             	mov    %rax,%rsi
    dc8e:	48 89 df             	mov    %rbx,%rdi
    dc91:	e8 ea 76 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    dc96:	bf 28 00 00 00       	mov    $0x28,%edi
    dc9b:	e8 30 74 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dca0:	48 89 c3             	mov    %rax,%rbx
    dca3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dca7:	48 89 c6             	mov    %rax,%rsi
    dcaa:	48 89 df             	mov    %rbx,%rdi
    dcad:	e8 d8 ab ff ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
    dcb2:	48 8d 05 5d e7 ff ff 	lea    -0x18a3(%rip),%rax        # c416 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    dcb9:	48 89 c2             	mov    %rax,%rdx
    dcbc:	48 8d 05 75 2e 03 00 	lea    0x32e75(%rip),%rax        # 40b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dcc3:	48 89 c6             	mov    %rax,%rsi
    dcc6:	48 89 df             	mov    %rbx,%rdi
    dcc9:	e8 b2 76 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    dcce:	bf 28 00 00 00       	mov    $0x28,%edi
    dcd3:	e8 f8 73 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dcd8:	48 89 c3             	mov    %rax,%rbx
    dcdb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dcdf:	48 89 c6             	mov    %rax,%rsi
    dce2:	48 89 df             	mov    %rbx,%rdi
    dce5:	e8 72 ac ff ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
    dcea:	48 8d 05 b5 e6 ff ff 	lea    -0x194b(%rip),%rax        # c3a6 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    dcf1:	48 89 c2             	mov    %rax,%rdx
    dcf4:	48 8d 05 25 2e 03 00 	lea    0x32e25(%rip),%rax        # 40b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dcfb:	48 89 c6             	mov    %rax,%rsi
    dcfe:	48 89 df             	mov    %rbx,%rdi
    dd01:	e8 7a 76 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    dd06:	bf 28 00 00 00       	mov    $0x28,%edi
    dd0b:	e8 c0 73 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dd10:	48 89 c3             	mov    %rax,%rbx
    dd13:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dd17:	48 89 c6             	mov    %rax,%rsi
    dd1a:	48 89 df             	mov    %rbx,%rdi
    dd1d:	e8 0c ad ff ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
    dd22:	48 8d 05 0d e6 ff ff 	lea    -0x19f3(%rip),%rax        # c336 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    dd29:	48 89 c2             	mov    %rax,%rdx
    dd2c:	48 8d 05 d5 2d 03 00 	lea    0x32dd5(%rip),%rax        # 40b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dd33:	48 89 c6             	mov    %rax,%rsi
    dd36:	48 89 df             	mov    %rbx,%rdi
    dd39:	e8 42 76 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    dd3e:	bf 28 00 00 00       	mov    $0x28,%edi
    dd43:	e8 88 73 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dd48:	48 89 c3             	mov    %rax,%rbx
    dd4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dd4f:	48 89 c6             	mov    %rax,%rsi
    dd52:	48 89 df             	mov    %rbx,%rdi
    dd55:	e8 a6 ad ff ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
    dd5a:	48 8d 05 65 e5 ff ff 	lea    -0x1a9b(%rip),%rax        # c2c6 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    dd61:	48 89 c2             	mov    %rax,%rdx
    dd64:	48 8d 05 85 2d 03 00 	lea    0x32d85(%rip),%rax        # 40af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dd6b:	48 89 c6             	mov    %rax,%rsi
    dd6e:	48 89 df             	mov    %rbx,%rdi
    dd71:	e8 0a 76 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    dd76:	bf 28 00 00 00       	mov    $0x28,%edi
    dd7b:	e8 50 73 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    dd80:	48 89 c3             	mov    %rax,%rbx
    dd83:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dd87:	48 89 c6             	mov    %rax,%rsi
    dd8a:	48 89 df             	mov    %rbx,%rdi
    dd8d:	e8 40 ae ff ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
    dd92:	48 8d 05 bd e4 ff ff 	lea    -0x1b43(%rip),%rax        # c256 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    dd99:	48 89 c2             	mov    %rax,%rdx
    dd9c:	48 8d 05 35 2d 03 00 	lea    0x32d35(%rip),%rax        # 40ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dda3:	48 89 c6             	mov    %rax,%rsi
    dda6:	48 89 df             	mov    %rbx,%rdi
    dda9:	e8 d2 75 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    ddae:	bf 28 00 00 00       	mov    $0x28,%edi
    ddb3:	e8 18 73 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ddb8:	48 89 c3             	mov    %rax,%rbx
    ddbb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ddbf:	48 89 c6             	mov    %rax,%rsi
    ddc2:	48 89 df             	mov    %rbx,%rdi
    ddc5:	e8 da ae ff ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
    ddca:	48 8d 05 15 e4 ff ff 	lea    -0x1beb(%rip),%rax        # c1e6 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    ddd1:	48 89 c2             	mov    %rax,%rdx
    ddd4:	48 8d 05 e5 2c 03 00 	lea    0x32ce5(%rip),%rax        # 40ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    dddb:	48 89 c6             	mov    %rax,%rsi
    ddde:	48 89 df             	mov    %rbx,%rdi
    dde1:	e8 9a 75 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    dde6:	bf 28 00 00 00       	mov    $0x28,%edi
    ddeb:	e8 e0 72 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ddf0:	48 89 c3             	mov    %rax,%rbx
    ddf3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ddf7:	48 89 c6             	mov    %rax,%rsi
    ddfa:	48 89 df             	mov    %rbx,%rdi
    ddfd:	e8 74 af ff ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
    de02:	48 8d 05 6d e3 ff ff 	lea    -0x1c93(%rip),%rax        # c176 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    de09:	48 89 c2             	mov    %rax,%rdx
    de0c:	48 8d 05 95 2c 03 00 	lea    0x32c95(%rip),%rax        # 40aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    de13:	48 89 c6             	mov    %rax,%rsi
    de16:	48 89 df             	mov    %rbx,%rdi
    de19:	e8 62 75 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    de1e:	bf 28 00 00 00       	mov    $0x28,%edi
    de23:	e8 a8 72 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    de28:	48 89 c3             	mov    %rax,%rbx
    de2b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    de2f:	48 89 c6             	mov    %rax,%rsi
    de32:	48 89 df             	mov    %rbx,%rdi
    de35:	e8 0e b0 ff ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
    de3a:	48 8d 05 c5 e2 ff ff 	lea    -0x1d3b(%rip),%rax        # c106 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    de41:	48 89 c2             	mov    %rax,%rdx
    de44:	48 8d 05 45 2c 03 00 	lea    0x32c45(%rip),%rax        # 40a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    de4b:	48 89 c6             	mov    %rax,%rsi
    de4e:	48 89 df             	mov    %rbx,%rdi
    de51:	e8 2a 75 ff ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
    de56:	bf 28 00 00 00       	mov    $0x28,%edi
    de5b:	e8 70 72 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    de60:	48 89 c3             	mov    %rax,%rbx
    de63:	8b 45 cc             	mov    -0x34(%rbp),%eax
    de66:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    de69:	0f b6 05 e8 34 03 00 	movzbl 0x334e8(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    de70:	84 c0                	test   %al,%al
    de72:	0f 94 c0             	sete   %al
    de75:	84 c0                	test   %al,%al
    de77:	74 4a                	je     dec3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    de79:	48 8d 05 d8 34 03 00 	lea    0x334d8(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    de80:	48 89 c7             	mov    %rax,%rdi
    de83:	e8 38 75 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    de88:	85 c0                	test   %eax,%eax
    de8a:	0f 95 c0             	setne  %al
    de8d:	84 c0                	test   %al,%al
    de8f:	74 32                	je     dec3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    de91:	48 8d 05 60 33 03 00 	lea    0x33360(%rip),%rax        # 411f8 <__dso_handle>
    de98:	48 89 c2             	mov    %rax,%rdx
    de9b:	48 8d 05 5e 33 03 00 	lea    0x3335e(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    dea2:	48 89 c6             	mov    %rax,%rsi
    dea5:	48 8d 05 ba ed ff ff 	lea    -0x1246(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
    deac:	48 89 c7             	mov    %rax,%rdi
    deaf:	e8 1c 73 ff ff       	call   51d0 <__cxa_atexit@plt>
    deb4:	48 8d 05 9d 34 03 00 	lea    0x3349d(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
    debb:	48 89 c7             	mov    %rax,%rdi
    debe:	e8 3d 72 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    dec3:	48 8d 15 36 33 03 00 	lea    0x33336(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    deca:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    decd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    ded1:	89 ce                	mov    %ecx,%esi
    ded3:	48 89 c7             	mov    %rax,%rdi
    ded6:	e8 2d 84 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    dedb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    dedf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
    dee3:	48 89 c6             	mov    %rax,%rsi
    dee6:	48 89 d7             	mov    %rdx,%rdi
    dee9:	89 f1                	mov    %esi,%ecx
    deeb:	48 89 d0             	mov    %rdx,%rax
    deee:	89 ce                	mov    %ecx,%esi
    def0:	48 89 c2             	mov    %rax,%rdx
    def3:	48 89 df             	mov    %rbx,%rdi
    def6:	e8 15 99 ff ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
    defb:	48 8d 05 44 9a ff ff 	lea    -0x65bc(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
    df02:	48 89 c2             	mov    %rax,%rdx
    df05:	48 8d 05 f4 2d 03 00 	lea    0x32df4(%rip),%rax        # 40d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
    df0c:	48 89 c6             	mov    %rax,%rsi
    df0f:	48 89 df             	mov    %rbx,%rdi
    df12:	e8 69 74 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    df17:	49 89 c4             	mov    %rax,%r12
    df1a:	48 89 df             	mov    %rbx,%rdi
    df1d:	e8 2e 72 ff ff       	call   5150 <__cxa_free_exception@plt>
    df22:	4c 89 e0             	mov    %r12,%rax
    df25:	48 89 c7             	mov    %rax,%rdi
    df28:	e8 73 74 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    df2d:	49 89 c4             	mov    %rax,%r12
    df30:	48 89 df             	mov    %rbx,%rdi
    df33:	e8 18 72 ff ff       	call   5150 <__cxa_free_exception@plt>
    df38:	4c 89 e0             	mov    %r12,%rax
    df3b:	48 89 c7             	mov    %rax,%rdi
    df3e:	e8 5d 74 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    df43:	49 89 c4             	mov    %rax,%r12
    df46:	48 89 df             	mov    %rbx,%rdi
    df49:	e8 02 72 ff ff       	call   5150 <__cxa_free_exception@plt>
    df4e:	4c 89 e0             	mov    %r12,%rax
    df51:	48 89 c7             	mov    %rax,%rdi
    df54:	e8 47 74 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    df59:	49 89 c4             	mov    %rax,%r12
    df5c:	48 89 df             	mov    %rbx,%rdi
    df5f:	e8 ec 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    df64:	4c 89 e0             	mov    %r12,%rax
    df67:	48 89 c7             	mov    %rax,%rdi
    df6a:	e8 31 74 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    df6f:	49 89 c4             	mov    %rax,%r12
    df72:	48 89 df             	mov    %rbx,%rdi
    df75:	e8 d6 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    df7a:	4c 89 e0             	mov    %r12,%rax
    df7d:	48 89 c7             	mov    %rax,%rdi
    df80:	e8 1b 74 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    df85:	49 89 c4             	mov    %rax,%r12
    df88:	48 89 df             	mov    %rbx,%rdi
    df8b:	e8 c0 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    df90:	4c 89 e0             	mov    %r12,%rax
    df93:	48 89 c7             	mov    %rax,%rdi
    df96:	e8 05 74 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    df9b:	49 89 c4             	mov    %rax,%r12
    df9e:	48 89 df             	mov    %rbx,%rdi
    dfa1:	e8 aa 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    dfa6:	4c 89 e0             	mov    %r12,%rax
    dfa9:	48 89 c7             	mov    %rax,%rdi
    dfac:	e8 ef 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    dfb1:	49 89 c4             	mov    %rax,%r12
    dfb4:	48 89 df             	mov    %rbx,%rdi
    dfb7:	e8 94 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    dfbc:	4c 89 e0             	mov    %r12,%rax
    dfbf:	48 89 c7             	mov    %rax,%rdi
    dfc2:	e8 d9 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    dfc7:	49 89 c4             	mov    %rax,%r12
    dfca:	48 89 df             	mov    %rbx,%rdi
    dfcd:	e8 7e 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    dfd2:	4c 89 e0             	mov    %r12,%rax
    dfd5:	48 89 c7             	mov    %rax,%rdi
    dfd8:	e8 c3 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    dfdd:	49 89 c4             	mov    %rax,%r12
    dfe0:	48 89 df             	mov    %rbx,%rdi
    dfe3:	e8 68 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    dfe8:	4c 89 e0             	mov    %r12,%rax
    dfeb:	48 89 c7             	mov    %rax,%rdi
    dfee:	e8 ad 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    dff3:	49 89 c4             	mov    %rax,%r12
    dff6:	48 89 df             	mov    %rbx,%rdi
    dff9:	e8 52 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    dffe:	4c 89 e0             	mov    %r12,%rax
    e001:	48 89 c7             	mov    %rax,%rdi
    e004:	e8 97 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    e009:	49 89 c4             	mov    %rax,%r12
    e00c:	48 89 df             	mov    %rbx,%rdi
    e00f:	e8 3c 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    e014:	4c 89 e0             	mov    %r12,%rax
    e017:	48 89 c7             	mov    %rax,%rdi
    e01a:	e8 81 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    e01f:	49 89 c4             	mov    %rax,%r12
    e022:	48 89 df             	mov    %rbx,%rdi
    e025:	e8 26 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    e02a:	4c 89 e0             	mov    %r12,%rax
    e02d:	48 89 c7             	mov    %rax,%rdi
    e030:	e8 6b 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    e035:	49 89 c4             	mov    %rax,%r12
    e038:	48 89 df             	mov    %rbx,%rdi
    e03b:	e8 10 71 ff ff       	call   5150 <__cxa_free_exception@plt>
    e040:	4c 89 e0             	mov    %r12,%rax
    e043:	48 89 c7             	mov    %rax,%rdi
    e046:	e8 55 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    e04b:	49 89 c4             	mov    %rax,%r12
    e04e:	48 89 df             	mov    %rbx,%rdi
    e051:	e8 fa 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e056:	4c 89 e0             	mov    %r12,%rax
    e059:	48 89 c7             	mov    %rax,%rdi
    e05c:	e8 3f 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    e061:	49 89 c4             	mov    %rax,%r12
    e064:	48 89 df             	mov    %rbx,%rdi
    e067:	e8 e4 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e06c:	4c 89 e0             	mov    %r12,%rax
    e06f:	48 89 c7             	mov    %rax,%rdi
    e072:	e8 29 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    e077:	49 89 c4             	mov    %rax,%r12
    e07a:	48 89 df             	mov    %rbx,%rdi
    e07d:	e8 ce 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e082:	4c 89 e0             	mov    %r12,%rax
    e085:	48 89 c7             	mov    %rax,%rdi
    e088:	e8 13 73 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    e08d:	49 89 c4             	mov    %rax,%r12
    e090:	48 89 df             	mov    %rbx,%rdi
    e093:	e8 b8 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e098:	4c 89 e0             	mov    %r12,%rax
    e09b:	48 89 c7             	mov    %rax,%rdi
    e09e:	e8 fd 72 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    e0a3:	49 89 c4             	mov    %rax,%r12
    e0a6:	48 89 df             	mov    %rbx,%rdi
    e0a9:	e8 a2 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e0ae:	4c 89 e0             	mov    %r12,%rax
    e0b1:	48 89 c7             	mov    %rax,%rdi
    e0b4:	e8 e7 72 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    e0b9:	49 89 c4             	mov    %rax,%r12
    e0bc:	48 89 df             	mov    %rbx,%rdi
    e0bf:	e8 8c 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e0c4:	4c 89 e0             	mov    %r12,%rax
    e0c7:	48 89 c7             	mov    %rax,%rdi
    e0ca:	e8 d1 72 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    e0cf:	49 89 c4             	mov    %rax,%r12
    e0d2:	48 89 df             	mov    %rbx,%rdi
    e0d5:	e8 76 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e0da:	4c 89 e0             	mov    %r12,%rax
    e0dd:	48 89 c7             	mov    %rax,%rdi
    e0e0:	e8 bb 72 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    e0e5:	49 89 c4             	mov    %rax,%r12
    e0e8:	48 89 df             	mov    %rbx,%rdi
    e0eb:	e8 60 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e0f0:	4c 89 e0             	mov    %r12,%rax
    e0f3:	48 89 c7             	mov    %rax,%rdi
    e0f6:	e8 a5 72 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    e0fb:	49 89 c4             	mov    %rax,%r12
    e0fe:	48 89 df             	mov    %rbx,%rdi
    e101:	e8 4a 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e106:	4c 89 e0             	mov    %r12,%rax
    e109:	48 89 c7             	mov    %rax,%rdi
    e10c:	e8 8f 72 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    e111:	49 89 c4             	mov    %rax,%r12
    e114:	48 89 df             	mov    %rbx,%rdi
    e117:	e8 34 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e11c:	4c 89 e0             	mov    %r12,%rax
    e11f:	48 89 c7             	mov    %rax,%rdi
    e122:	e8 79 72 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    e127:	49 89 c4             	mov    %rax,%r12
    e12a:	48 89 df             	mov    %rbx,%rdi
    e12d:	e8 1e 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e132:	4c 89 e0             	mov    %r12,%rax
    e135:	48 89 c7             	mov    %rax,%rdi
    e138:	e8 63 72 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    e13d:	49 89 c4             	mov    %rax,%r12
    e140:	48 89 df             	mov    %rbx,%rdi
    e143:	e8 08 70 ff ff       	call   5150 <__cxa_free_exception@plt>
    e148:	4c 89 e0             	mov    %r12,%rax
    e14b:	48 89 c7             	mov    %rax,%rdi
    e14e:	e8 4d 72 ff ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
    e153:	49 89 c4             	mov    %rax,%r12
    e156:	48 89 df             	mov    %rbx,%rdi
    e159:	e8 f2 6f ff ff       	call   5150 <__cxa_free_exception@plt>
    e15e:	4c 89 e0             	mov    %r12,%rax
    e161:	48 89 c7             	mov    %rax,%rdi
    e164:	e8 37 72 ff ff       	call   53a0 <_Unwind_Resume@plt>

000000000000e169 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE>:
#include <optional>

namespace rtvc {

DeviceWrapper makeLogicalDevice(const vk::raii::Instance &instance,
                                const vk::raii::SurfaceKHR &surface) {
    e169:	55                   	push   %rbp
    e16a:	48 89 e5             	mov    %rsp,%rbp
    e16d:	41 57                	push   %r15
    e16f:	41 56                	push   %r14
    e171:	41 55                	push   %r13
    e173:	41 54                	push   %r12
    e175:	53                   	push   %rbx
    e176:	48 81 ec b8 07 00 00 	sub    $0x7b8,%rsp
    e17d:	48 89 bd 38 f8 ff ff 	mov    %rdi,-0x7c8(%rbp)
    e184:	48 89 b5 30 f8 ff ff 	mov    %rsi,-0x7d0(%rbp)
    e18b:	48 89 95 28 f8 ff ff 	mov    %rdx,-0x7d8(%rbp)
  static const std::vector<const char *> requiredExtensions = {
      VK_KHR_SWAPCHAIN_EXTENSION_NAME,
  };
    e192:	0f b6 05 df 31 03 00 	movzbl 0x331df(%rip),%eax        # 41378 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    e199:	84 c0                	test   %al,%al
    e19b:	0f 94 c0             	sete   %al
    e19e:	84 c0                	test   %al,%al
    e1a0:	0f 84 b9 00 00 00    	je     e25f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xf6>
    e1a6:	48 8d 05 cb 31 03 00 	lea    0x331cb(%rip),%rax        # 41378 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    e1ad:	48 89 c7             	mov    %rax,%rdi
    e1b0:	e8 0b 72 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    e1b5:	85 c0                	test   %eax,%eax
    e1b7:	0f 95 c0             	setne  %al
    e1ba:	84 c0                	test   %al,%al
    e1bc:	0f 84 9d 00 00 00    	je     e25f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xf6>
    e1c2:	c6 85 27 f8 ff ff 00 	movb   $0x0,-0x7d9(%rbp)
    e1c9:	48 8d 05 a1 fa 01 00 	lea    0x1faa1(%rip),%rax        # 2dc71 <_ZNSt8__detailL19__atomic_spin_countE+0x347d>
    e1d0:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
    e1d7:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
    e1de:	49 89 c6             	mov    %rax,%r14
    e1e1:	41 bf 01 00 00 00    	mov    $0x1,%r15d
    e1e7:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    e1ee:	48 89 c7             	mov    %rax,%rdi
    e1f1:	e8 0a 8c 00 00       	call   16e00 <_ZNSaIPKcEC1Ev>
    e1f6:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    e1fd:	4c 89 f6             	mov    %r14,%rsi
    e200:	4c 89 ff             	mov    %r15,%rdi
    e203:	4c 89 f1             	mov    %r14,%rcx
    e206:	4c 89 fb             	mov    %r15,%rbx
    e209:	48 89 da             	mov    %rbx,%rdx
    e20c:	48 89 c1             	mov    %rax,%rcx
    e20f:	48 8d 05 4a 31 03 00 	lea    0x3314a(%rip),%rax        # 41360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    e216:	48 89 c7             	mov    %rax,%rdi
    e219:	e8 5a 8b 00 00       	call   16d78 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    e21e:	48 8d 05 d3 2f 03 00 	lea    0x32fd3(%rip),%rax        # 411f8 <__dso_handle>
    e225:	48 89 c2             	mov    %rax,%rdx
    e228:	48 8d 05 31 31 03 00 	lea    0x33131(%rip),%rax        # 41360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    e22f:	48 89 c6             	mov    %rax,%rsi
    e232:	48 8d 05 35 a0 00 00 	lea    0xa035(%rip),%rax        # 1826e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    e239:	48 89 c7             	mov    %rax,%rdi
    e23c:	e8 8f 6f ff ff       	call   51d0 <__cxa_atexit@plt>
    e241:	48 8d 05 30 31 03 00 	lea    0x33130(%rip),%rax        # 41378 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    e248:	48 89 c7             	mov    %rax,%rdi
    e24b:	e8 b0 6e ff ff       	call   5100 <__cxa_guard_release@plt>
    e250:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    e257:	48 89 c7             	mov    %rax,%rdi
    e25a:	e8 c9 8b 00 00       	call   16e28 <_ZNSaIPKcED1Ev>
  static const std::vector<const char *> instanceLayers = {
      validationLayerName.data(),
      mangohudLayerName.data(),
  };
    e25f:	0f b6 05 32 31 03 00 	movzbl 0x33132(%rip),%eax        # 41398 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    e266:	84 c0                	test   %al,%al
    e268:	0f 94 c0             	sete   %al
    e26b:	84 c0                	test   %al,%al
    e26d:	0f 84 c6 00 00 00    	je     e339 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1d0>
    e273:	48 8d 05 1e 31 03 00 	lea    0x3311e(%rip),%rax        # 41398 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    e27a:	48 89 c7             	mov    %rax,%rdi
    e27d:	e8 3e 71 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    e282:	85 c0                	test   %eax,%eax
    e284:	0f 95 c0             	setne  %al
    e287:	84 c0                	test   %al,%al
    e289:	0f 84 aa 00 00 00    	je     e339 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1d0>
    e28f:	41 be 00 00 00 00    	mov    $0x0,%r14d
    e295:	48 8d 05 e6 f9 01 00 	lea    0x1f9e6(%rip),%rax        # 2dc82 <_ZNSt8__detailL19__atomic_spin_countE+0x348e>
    e29c:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
    e2a3:	48 8d 05 f4 f9 01 00 	lea    0x1f9f4(%rip),%rax        # 2dc9e <_ZNSt8__detailL19__atomic_spin_countE+0x34aa>
    e2aa:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
    e2b1:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
    e2b8:	49 89 c4             	mov    %rax,%r12
    e2bb:	41 bd 02 00 00 00    	mov    $0x2,%r13d
    e2c1:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    e2c8:	48 89 c7             	mov    %rax,%rdi
    e2cb:	e8 30 8b 00 00       	call   16e00 <_ZNSaIPKcEC1Ev>
    e2d0:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    e2d7:	4c 89 e6             	mov    %r12,%rsi
    e2da:	4c 89 ef             	mov    %r13,%rdi
    e2dd:	4c 89 e1             	mov    %r12,%rcx
    e2e0:	4c 89 eb             	mov    %r13,%rbx
    e2e3:	48 89 da             	mov    %rbx,%rdx
    e2e6:	48 89 c1             	mov    %rax,%rcx
    e2e9:	48 8d 05 90 30 03 00 	lea    0x33090(%rip),%rax        # 41380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    e2f0:	48 89 c7             	mov    %rax,%rdi
    e2f3:	e8 80 8a 00 00       	call   16d78 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    e2f8:	48 8d 05 f9 2e 03 00 	lea    0x32ef9(%rip),%rax        # 411f8 <__dso_handle>
    e2ff:	48 89 c2             	mov    %rax,%rdx
    e302:	48 8d 05 77 30 03 00 	lea    0x33077(%rip),%rax        # 41380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    e309:	48 89 c6             	mov    %rax,%rsi
    e30c:	48 8d 05 5b 9f 00 00 	lea    0x9f5b(%rip),%rax        # 1826e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    e313:	48 89 c7             	mov    %rax,%rdi
    e316:	e8 b5 6e ff ff       	call   51d0 <__cxa_atexit@plt>
    e31b:	48 8d 05 76 30 03 00 	lea    0x33076(%rip),%rax        # 41398 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    e322:	48 89 c7             	mov    %rax,%rdi
    e325:	e8 d6 6d ff ff       	call   5100 <__cxa_guard_release@plt>
    e32a:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    e331:	48 89 c7             	mov    %rax,%rdi
    e334:	e8 ef 8a 00 00       	call   16e28 <_ZNSaIPKcED1Ev>

  vk::raii::PhysicalDevices physicalDevices{instance};
    e339:	48 8b 95 30 f8 ff ff 	mov    -0x7d0(%rbp),%rdx
    e340:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    e347:	48 89 d6             	mov    %rdx,%rsi
    e34a:	48 89 c7             	mov    %rax,%rdi
    e34d:	e8 e2 83 00 00       	call   16734 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE>
  for (const auto &physicalDevice : physicalDevices) {
    e352:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    e359:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    e35d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    e361:	48 89 c7             	mov    %rax,%rdi
    e364:	e8 49 9f 00 00       	call   182b2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE5beginEv>
    e369:	48 89 85 78 fd ff ff 	mov    %rax,-0x288(%rbp)
    e370:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    e374:	48 89 c7             	mov    %rax,%rdi
    e377:	e8 5c 9f 00 00       	call   182d8 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>
    e37c:	48 89 85 70 fd ff ff 	mov    %rax,-0x290(%rbp)
    e383:	e9 b3 10 00 00       	jmp    f43b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12d2>
    e388:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    e38f:	48 89 c7             	mov    %rax,%rdi
    e392:	e8 67 90 00 00       	call   173fe <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEdeEv>
    e397:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    e39b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e39f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
      return imageFormatProperties;
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE VULKAN_HPP_NAMESPACE::PhysicalDeviceProperties PhysicalDevice::getProperties() const VULKAN_HPP_NOEXCEPT
    {
      VULKAN_HPP_NAMESPACE::PhysicalDeviceProperties properties;
    e3a6:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    e3ad:	b8 00 00 00 00       	mov    $0x0,%eax
    e3b2:	b9 67 00 00 00       	mov    $0x67,%ecx
    e3b7:	48 89 d7             	mov    %rdx,%rdi
    e3ba:	f3 48 ab             	rep stos %rax,%es:(%rdi)
      getDispatcher()->vkGetPhysicalDeviceProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e3bd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    e3c4:	48 89 c7             	mov    %rax,%rdi
    e3c7:	e8 48 82 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e3cc:	48 8b 58 38          	mov    0x38(%rax),%rbx
    e3d0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    e3d7:	48 89 c7             	mov    %rax,%rdi
    e3da:	e8 5d 14 00 00       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e3df:	48 89 c2             	mov    %rax,%rdx
    e3e2:	48 8d 85 20 f9 ff ff 	lea    -0x6e0(%rbp),%rax
    e3e9:	48 89 c6             	mov    %rax,%rsi
    e3ec:	48 89 d7             	mov    %rdx,%rdi
    e3ef:	ff d3                	call   *%rbx
                                                      reinterpret_cast<VkPhysicalDeviceProperties *>( &properties ) );

      return properties;
    e3f1:	90                   	nop
    if (auto properties = physicalDevice.getProperties();
        properties.deviceType != vk::PhysicalDeviceType::eDiscreteGpu) {
    e3f2:	8b 85 30 f9 ff ff    	mov    -0x6d0(%rbp),%eax
    if (auto properties = physicalDevice.getProperties();
    e3f8:	83 f8 02             	cmp    $0x2,%eax
    e3fb:	0f 85 14 10 00 00    	jne    f415 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12ac>
      continue;
    }

    bool extensionsSupported = true;
    e401:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
    auto supportedExtensions =
        physicalDevice.enumerateDeviceExtensionProperties();
    e405:	48 8d 85 c8 fd ff ff 	lea    -0x238(%rbp),%rax
    e40c:	be 00 00 00 00       	mov    $0x0,%esi
    e411:	48 89 c7             	mov    %rax,%rdi
    e414:	e8 09 9f 00 00       	call   18322 <_ZN2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1EDn>
    e419:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e41d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    e424:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
    e42b:	48 89 85 b0 fc ff ff 	mov    %rax,-0x350(%rbp)
    e432:	48 8d 9d 50 fd ff ff 	lea    -0x2b0(%rbp),%rbx
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE std::vector<VULKAN_HPP_NAMESPACE::ExtensionProperties>
                                           PhysicalDevice::enumerateDeviceExtensionProperties( Optional<const std::string> layerName ) const
    {
      std::vector<VULKAN_HPP_NAMESPACE::ExtensionProperties> properties;
    e439:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e43d:	0f 11 03             	movups %xmm0,(%rbx)
    e440:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      uint32_t                                               propertyCount;
      VkResult                                               result;
      do
      {
        result = getDispatcher()->vkEnumerateDeviceExtensionProperties(
    e445:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    e44c:	48 89 c7             	mov    %rax,%rdi
    e44f:	e8 c0 81 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e454:	4c 8b 60 60          	mov    0x60(%rax),%r12
          static_cast<VkPhysicalDevice>( m_physicalDevice ), layerName ? layerName->c_str() : nullptr, &propertyCount, nullptr );
    e458:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    e45f:	48 89 c7             	mov    %rax,%rdi
    e462:	e8 57 9a 00 00       	call   17ebe <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvbEv>
        result = getDispatcher()->vkEnumerateDeviceExtensionProperties(
    e467:	84 c0                	test   %al,%al
    e469:	74 1c                	je     e487 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x31e>
          static_cast<VkPhysicalDevice>( m_physicalDevice ), layerName ? layerName->c_str() : nullptr, &propertyCount, nullptr );
    e46b:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    e472:	48 89 c7             	mov    %rax,%rdi
    e475:	e8 32 9a 00 00       	call   17eac <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv>
    e47a:	48 89 c7             	mov    %rax,%rdi
    e47d:	e8 24 be ff ff       	call   a2a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
    e482:	49 89 c5             	mov    %rax,%r13
    e485:	eb 06                	jmp    e48d <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x324>
        result = getDispatcher()->vkEnumerateDeviceExtensionProperties(
    e487:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    e48d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    e494:	48 89 c7             	mov    %rax,%rdi
    e497:	e8 a0 13 00 00       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e49c:	48 89 c7             	mov    %rax,%rdi
    e49f:	48 8d 85 ac fc ff ff 	lea    -0x354(%rbp),%rax
    e4a6:	b9 00 00 00 00       	mov    $0x0,%ecx
    e4ab:	48 89 c2             	mov    %rax,%rdx
    e4ae:	4c 89 ee             	mov    %r13,%rsi
    e4b1:	41 ff d4             	call   *%r12
    e4b4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if ( ( result == VK_SUCCESS ) && propertyCount )
    e4ba:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
    e4c1:	0f 85 9f 00 00 00    	jne    e566 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3fd>
    e4c7:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    e4cd:	85 c0                	test   %eax,%eax
    e4cf:	0f 84 91 00 00 00    	je     e566 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3fd>
        {
          properties.resize( propertyCount );
    e4d5:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    e4db:	89 c0                	mov    %eax,%eax
    e4dd:	48 89 c6             	mov    %rax,%rsi
    e4e0:	48 89 df             	mov    %rbx,%rdi
    e4e3:	e8 ee 99 00 00       	call   17ed6 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm>
          result = getDispatcher()->vkEnumerateDeviceExtensionProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e4e8:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    e4ef:	48 89 c7             	mov    %rax,%rdi
    e4f2:	e8 1d 81 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e4f7:	4c 8b 60 60          	mov    0x60(%rax),%r12
                                                                          layerName ? layerName->c_str() : nullptr,
                                                                          &propertyCount,
                                                                          reinterpret_cast<VkExtensionProperties *>( properties.data() ) );
    e4fb:	48 89 df             	mov    %rbx,%rdi
    e4fe:	e8 65 9a 00 00       	call   17f68 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4dataEv>
    e503:	49 89 c6             	mov    %rax,%r14
                                                                          layerName ? layerName->c_str() : nullptr,
    e506:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    e50d:	48 89 c7             	mov    %rax,%rdi
    e510:	e8 a9 99 00 00       	call   17ebe <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvbEv>
          result = getDispatcher()->vkEnumerateDeviceExtensionProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e515:	84 c0                	test   %al,%al
    e517:	74 1c                	je     e535 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3cc>
                                                                          layerName ? layerName->c_str() : nullptr,
    e519:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    e520:	48 89 c7             	mov    %rax,%rdi
    e523:	e8 84 99 00 00       	call   17eac <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv>
    e528:	48 89 c7             	mov    %rax,%rdi
    e52b:	e8 76 bd ff ff       	call   a2a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
    e530:	49 89 c5             	mov    %rax,%r13
    e533:	eb 06                	jmp    e53b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3d2>
          result = getDispatcher()->vkEnumerateDeviceExtensionProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e535:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    e53b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    e542:	48 89 c7             	mov    %rax,%rdi
    e545:	e8 f2 12 00 00       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e54a:	48 89 c7             	mov    %rax,%rdi
    e54d:	48 8d 85 ac fc ff ff 	lea    -0x354(%rbp),%rax
    e554:	4c 89 f1             	mov    %r14,%rcx
    e557:	48 89 c2             	mov    %rax,%rdx
    e55a:	4c 89 ee             	mov    %r13,%rsi
    e55d:	41 ff d4             	call   *%r12
    e560:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        }
      } while ( result == VK_INCOMPLETE );
    e566:	83 bd 5c ff ff ff 05 	cmpl   $0x5,-0xa4(%rbp)
    e56d:	0f 84 d2 fe ff ff    	je     e445 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x2dc>
    e573:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    e579:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
    e57f:	48 8d 05 32 f7 01 00 	lea    0x1f732(%rip),%rax        # 2dcb8 <_ZNSt8__detailL19__atomic_spin_countE+0x34c4>
    e586:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    if ( result != Result::eSuccess )
    e58d:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
    e594:	74 17                	je     e5ad <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x444>
      throwResultException( result, message );
    e596:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    e59d:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
    e5a3:	48 89 d6             	mov    %rdx,%rsi
    e5a6:	89 c7                	mov    %eax,%edi
    e5a8:	e8 65 f1 ff ff       	call   d712 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    e5ad:	90                   	nop
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::enumerateDeviceExtensionProperties" );
      VULKAN_HPP_ASSERT( propertyCount <= properties.size() );
    e5ae:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    e5b4:	41 89 c4             	mov    %eax,%r12d
    e5b7:	48 89 df             	mov    %rbx,%rdi
    e5ba:	e8 cd 99 00 00       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
    e5bf:	4c 39 e0             	cmp    %r12,%rax
    e5c2:	73 28                	jae    e5ec <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x483>
    e5c4:	48 8d 05 25 f7 01 00 	lea    0x1f725(%rip),%rax        # 2dcf0 <_ZNSt8__detailL19__atomic_spin_countE+0x34fc>
    e5cb:	48 89 c1             	mov    %rax,%rcx
    e5ce:	ba a0 2a 00 00       	mov    $0x2aa0,%edx
    e5d3:	48 8d 05 5e f4 01 00 	lea    0x1f45e(%rip),%rax        # 2da38 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
    e5da:	48 89 c6             	mov    %rax,%rsi
    e5dd:	48 8d 05 ac f7 01 00 	lea    0x1f7ac(%rip),%rax        # 2dd90 <_ZNSt8__detailL19__atomic_spin_countE+0x359c>
    e5e4:	48 89 c7             	mov    %rax,%rdi
    e5e7:	e8 24 6b ff ff       	call   5110 <__assert_fail@plt>
      if ( propertyCount < properties.size() )
    e5ec:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    e5f2:	41 89 c4             	mov    %eax,%r12d
    e5f5:	48 89 df             	mov    %rbx,%rdi
    e5f8:	e8 8f 99 00 00       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
    e5fd:	49 39 c4             	cmp    %rax,%r12
    e600:	0f 92 c0             	setb   %al
    e603:	84 c0                	test   %al,%al
    e605:	74 28                	je     e62f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x4c6>
      {
        properties.resize( propertyCount );
    e607:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    e60d:	89 c0                	mov    %eax,%eax
    e60f:	48 89 c6             	mov    %rax,%rsi
    e612:	48 89 df             	mov    %rbx,%rdi
    e615:	e8 bc 98 00 00       	call   17ed6 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm>
      }
      return properties;
    e61a:	eb 13                	jmp    e62f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x4c6>
    }
    e61c:	49 89 c4             	mov    %rax,%r12
    e61f:	48 89 df             	mov    %rbx,%rdi
    e622:	e8 41 98 00 00       	call   17e68 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
    e627:	4c 89 e3             	mov    %r12,%rbx
    e62a:	e9 85 10 00 00       	jmp    f6b4 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x154b>
      return properties;
    e62f:	90                   	nop
    std::map<std::string, uint32_t> extensionsMap{};
    e630:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e634:	0f 29 85 70 f8 ff ff 	movaps %xmm0,-0x790(%rbp)
    e63b:	0f 29 85 80 f8 ff ff 	movaps %xmm0,-0x780(%rbp)
    e642:	0f 29 85 90 f8 ff ff 	movaps %xmm0,-0x770(%rbp)
    e649:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    e650:	48 89 c7             	mov    %rax,%rdi
    e653:	e8 f0 8d 00 00       	call   17448 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>
    for (const auto &extension : supportedExtensions) {
    e658:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    e65f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    e663:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e667:	48 89 c7             	mov    %rax,%rdi
    e66a:	e8 4b 9d 00 00       	call   183ba <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE5beginEv>
    e66f:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    e676:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e67a:	48 89 c7             	mov    %rax,%rdi
    e67d:	e8 5e 9d 00 00       	call   183e0 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE3endEv>
    e682:	48 89 85 98 fc ff ff 	mov    %rax,-0x368(%rbp)
    e689:	eb 6d                	jmp    e6f8 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x58f>
    e68b:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
    e692:	48 89 c7             	mov    %rax,%rdi
    e695:	e8 2e 8e 00 00       	call   174c8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
    e69a:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
      extensionsMap[extension.extensionName]++;
    e6a1:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    e6a8:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    e6af:	48 89 d6             	mov    %rdx,%rsi
    e6b2:	48 89 c7             	mov    %rax,%rdi
    e6b5:	e8 74 9d 00 00       	call   1842e <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv>
    e6ba:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
    e6c1:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    e6c8:	48 89 d6             	mov    %rdx,%rsi
    e6cb:	48 89 c7             	mov    %rax,%rdi
    e6ce:	e8 cd 9d 00 00       	call   184a0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e6d3:	8b 10                	mov    (%rax),%edx
    e6d5:	83 c2 01             	add    $0x1,%edx
    e6d8:	89 10                	mov    %edx,(%rax)
    e6da:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    e6e1:	48 89 c7             	mov    %rax,%rdi
    e6e4:	e8 d7 bb ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    for (const auto &extension : supportedExtensions) {
    e6e9:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
    e6f0:	48 89 c7             	mov    %rax,%rdi
    e6f3:	e8 12 9d 00 00       	call   1840a <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEppEv>
    e6f8:	48 8d 95 98 fc ff ff 	lea    -0x368(%rbp),%rdx
    e6ff:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
    e706:	48 89 d6             	mov    %rdx,%rsi
    e709:	48 89 c7             	mov    %rax,%rdi
    e70c:	e8 6e 8d 00 00       	call   1747f <_ZN9__gnu_cxxeqIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    e711:	83 f0 01             	xor    $0x1,%eax
    e714:	84 c0                	test   %al,%al
    e716:	0f 85 6f ff ff ff    	jne    e68b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x522>
    }
    for (const auto &extension : requiredExtensions) {
    e71c:	48 8d 05 3d 2c 03 00 	lea    0x32c3d(%rip),%rax        # 41360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    e723:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    e727:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    e72b:	48 89 c7             	mov    %rax,%rdi
    e72e:	e8 a7 8d 00 00       	call   174da <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>
    e733:	48 89 85 90 fc ff ff 	mov    %rax,-0x370(%rbp)
    e73a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    e73e:	48 89 c7             	mov    %rax,%rdi
    e741:	e8 d8 8d 00 00       	call   1751e <_ZNKSt6vectorIPKcSaIS1_EE3endEv>
    e746:	48 89 85 88 fc ff ff 	mov    %rax,-0x378(%rbp)
    e74d:	e9 0e 01 00 00       	jmp    e860 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x6f7>
    e752:	48 8d 85 90 fc ff ff 	lea    -0x370(%rbp),%rax
    e759:	48 89 c7             	mov    %rax,%rdi
    e75c:	e8 2f 8e 00 00       	call   17590 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>
    e761:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
      extensionsMap[extension]++;
    e768:	48 8d 85 1f fe ff ff 	lea    -0x1e1(%rbp),%rax
    e76f:	48 89 c7             	mov    %rax,%rdi
    e772:	e8 39 6c ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    e777:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    e77e:	48 8b 08             	mov    (%rax),%rcx
    e781:	48 8d 95 1f fe ff ff 	lea    -0x1e1(%rbp),%rdx
    e788:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    e78f:	48 89 ce             	mov    %rcx,%rsi
    e792:	48 89 c7             	mov    %rax,%rdi
    e795:	e8 bc bc ff ff       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    e79a:	48 8d 95 f0 fd ff ff 	lea    -0x210(%rbp),%rdx
    e7a1:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    e7a8:	48 89 d6             	mov    %rdx,%rsi
    e7ab:	48 89 c7             	mov    %rax,%rdi
    e7ae:	e8 ed 9c 00 00       	call   184a0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e7b3:	8b 10                	mov    (%rax),%edx
    e7b5:	83 c2 01             	add    $0x1,%edx
    e7b8:	89 10                	mov    %edx,(%rax)
    e7ba:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    e7c1:	48 89 c7             	mov    %rax,%rdi
    e7c4:	e8 f7 ba ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    e7c9:	48 8d 85 1f fe ff ff 	lea    -0x1e1(%rbp),%rax
    e7d0:	48 89 c7             	mov    %rax,%rdi
    e7d3:	e8 98 6a ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
      if (extensionsMap[extension] < 2) {
    e7d8:	48 8d 85 4f fe ff ff 	lea    -0x1b1(%rbp),%rax
    e7df:	48 89 c7             	mov    %rax,%rdi
    e7e2:	e8 c9 6b ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    e7e7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    e7ee:	48 8b 08             	mov    (%rax),%rcx
    e7f1:	48 8d 95 4f fe ff ff 	lea    -0x1b1(%rbp),%rdx
    e7f8:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    e7ff:	48 89 ce             	mov    %rcx,%rsi
    e802:	48 89 c7             	mov    %rax,%rdi
    e805:	e8 4c bc ff ff       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    e80a:	48 8d 95 20 fe ff ff 	lea    -0x1e0(%rbp),%rdx
    e811:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    e818:	48 89 d6             	mov    %rdx,%rsi
    e81b:	48 89 c7             	mov    %rax,%rdi
    e81e:	e8 7d 9c 00 00       	call   184a0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e823:	8b 00                	mov    (%rax),%eax
    e825:	83 f8 01             	cmp    $0x1,%eax
    e828:	0f 96 c3             	setbe  %bl
    e82b:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    e832:	48 89 c7             	mov    %rax,%rdi
    e835:	e8 86 ba ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    e83a:	48 8d 85 4f fe ff ff 	lea    -0x1b1(%rbp),%rax
    e841:	48 89 c7             	mov    %rax,%rdi
    e844:	e8 27 6a ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    e849:	84 db                	test   %bl,%bl
    e84b:	74 04                	je     e851 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x6e8>
        extensionsSupported = false;
    e84d:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
    for (const auto &extension : requiredExtensions) {
    e851:	48 8d 85 90 fc ff ff 	lea    -0x370(%rbp),%rax
    e858:	48 89 c7             	mov    %rax,%rdi
    e85b:	e8 44 9d 00 00       	call   185a4 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>
    e860:	48 8d 95 88 fc ff ff 	lea    -0x378(%rbp),%rdx
    e867:	48 8d 85 90 fc ff ff 	lea    -0x370(%rbp),%rax
    e86e:	48 89 d6             	mov    %rdx,%rsi
    e871:	48 89 c7             	mov    %rax,%rdi
    e874:	e8 ce 8c 00 00       	call   17547 <_ZN9__gnu_cxxeqIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    e879:	83 f0 01             	xor    $0x1,%eax
    e87c:	84 c0                	test   %al,%al
    e87e:	0f 85 ce fe ff ff    	jne    e752 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x5e9>
      }
    }
    if (!extensionsSupported) {
    e884:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
    e888:	83 f0 01             	xor    $0x1,%eax
    e88b:	84 c0                	test   %al,%al
    e88d:	74 0a                	je     e899 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x730>
      continue;
    e88f:	bb 00 00 00 00       	mov    $0x0,%ebx
    e894:	e9 48 0b 00 00       	jmp    f3e1 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1278>
    }

    bool layerSupported = true;
    e899:	c6 45 ce 01          	movb   $0x1,-0x32(%rbp)
    e89d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e8a1:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    e8a8:	48 8d 9d 30 fd ff ff 	lea    -0x2d0(%rbp),%rbx
      return properties;
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE std::vector<VULKAN_HPP_NAMESPACE::LayerProperties> PhysicalDevice::enumerateDeviceLayerProperties() const
    {
      std::vector<VULKAN_HPP_NAMESPACE::LayerProperties> properties;
    e8af:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e8b3:	0f 11 03             	movups %xmm0,(%rbx)
    e8b6:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      uint32_t                                           propertyCount;
      VkResult                                           result;
      do
      {
        result = getDispatcher()->vkEnumerateDeviceLayerProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ), &propertyCount, nullptr );
    e8bb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e8c2:	48 89 c7             	mov    %rax,%rdi
    e8c5:	e8 4a 7d 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e8ca:	4c 8b 60 68          	mov    0x68(%rax),%r12
    e8ce:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e8d5:	48 89 c7             	mov    %rax,%rdi
    e8d8:	e8 5f 0f 00 00       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e8dd:	48 89 c1             	mov    %rax,%rcx
    e8e0:	48 8d 85 b8 fc ff ff 	lea    -0x348(%rbp),%rax
    e8e7:	ba 00 00 00 00       	mov    $0x0,%edx
    e8ec:	48 89 c6             	mov    %rax,%rsi
    e8ef:	48 89 cf             	mov    %rcx,%rdi
    e8f2:	41 ff d4             	call   *%r12
    e8f5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        if ( ( result == VK_SUCCESS ) && propertyCount )
    e8fb:	83 bd 44 ff ff ff 00 	cmpl   $0x0,-0xbc(%rbp)
    e902:	75 66                	jne    e96a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x801>
    e904:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e90a:	85 c0                	test   %eax,%eax
    e90c:	74 5c                	je     e96a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x801>
        {
          properties.resize( propertyCount );
    e90e:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e914:	89 c0                	mov    %eax,%eax
    e916:	48 89 c6             	mov    %rax,%rsi
    e919:	48 89 df             	mov    %rbx,%rdi
    e91c:	e8 41 97 00 00       	call   18062 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
          result = getDispatcher()->vkEnumerateDeviceLayerProperties(
    e921:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e928:	48 89 c7             	mov    %rax,%rdi
    e92b:	e8 e4 7c 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e930:	4c 8b 60 68          	mov    0x68(%rax),%r12
            static_cast<VkPhysicalDevice>( m_physicalDevice ), &propertyCount, reinterpret_cast<VkLayerProperties *>( properties.data() ) );
    e934:	48 89 df             	mov    %rbx,%rdi
    e937:	e8 b8 97 00 00       	call   180f4 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE4dataEv>
    e93c:	49 89 c5             	mov    %rax,%r13
          result = getDispatcher()->vkEnumerateDeviceLayerProperties(
    e93f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e946:	48 89 c7             	mov    %rax,%rdi
    e949:	e8 ee 0e 00 00       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e94e:	48 89 c1             	mov    %rax,%rcx
    e951:	48 8d 85 b8 fc ff ff 	lea    -0x348(%rbp),%rax
    e958:	4c 89 ea             	mov    %r13,%rdx
    e95b:	48 89 c6             	mov    %rax,%rsi
    e95e:	48 89 cf             	mov    %rcx,%rdi
    e961:	41 ff d4             	call   *%r12
    e964:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        }
      } while ( result == VK_INCOMPLETE );
    e96a:	83 bd 44 ff ff ff 05 	cmpl   $0x5,-0xbc(%rbp)
    e971:	0f 84 44 ff ff ff    	je     e8bb <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x752>
    e977:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    e97d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
    e983:	48 8d 05 2e f4 01 00 	lea    0x1f42e(%rip),%rax        # 2ddb8 <_ZNSt8__detailL19__atomic_spin_countE+0x35c4>
    e98a:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    if ( result != Result::eSuccess )
    e991:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)
    e998:	74 17                	je     e9b1 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x848>
      throwResultException( result, message );
    e99a:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    e9a1:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    e9a7:	48 89 d6             	mov    %rdx,%rsi
    e9aa:	89 c7                	mov    %eax,%edi
    e9ac:	e8 61 ed ff ff       	call   d712 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    e9b1:	90                   	nop
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::enumerateDeviceLayerProperties" );
      VULKAN_HPP_ASSERT( propertyCount <= properties.size() );
    e9b2:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e9b8:	41 89 c4             	mov    %eax,%r12d
    e9bb:	48 89 df             	mov    %rbx,%rdi
    e9be:	e8 55 97 00 00       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
    e9c3:	4c 39 e0             	cmp    %r12,%rax
    e9c6:	73 28                	jae    e9f0 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x887>
    e9c8:	48 8d 05 21 f4 01 00 	lea    0x1f421(%rip),%rax        # 2ddf0 <_ZNSt8__detailL19__atomic_spin_countE+0x35fc>
    e9cf:	48 89 c1             	mov    %rax,%rcx
    e9d2:	ba cf 2a 00 00       	mov    $0x2acf,%edx
    e9d7:	48 8d 05 5a f0 01 00 	lea    0x1f05a(%rip),%rax        # 2da38 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
    e9de:	48 89 c6             	mov    %rax,%rsi
    e9e1:	48 8d 05 a8 f3 01 00 	lea    0x1f3a8(%rip),%rax        # 2dd90 <_ZNSt8__detailL19__atomic_spin_countE+0x359c>
    e9e8:	48 89 c7             	mov    %rax,%rdi
    e9eb:	e8 20 67 ff ff       	call   5110 <__assert_fail@plt>
      if ( propertyCount < properties.size() )
    e9f0:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e9f6:	41 89 c4             	mov    %eax,%r12d
    e9f9:	48 89 df             	mov    %rbx,%rdi
    e9fc:	e8 17 97 00 00       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
    ea01:	49 39 c4             	cmp    %rax,%r12
    ea04:	0f 92 c0             	setb   %al
    ea07:	84 c0                	test   %al,%al
    ea09:	74 28                	je     ea33 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x8ca>
      {
        properties.resize( propertyCount );
    ea0b:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    ea11:	89 c0                	mov    %eax,%eax
    ea13:	48 89 c6             	mov    %rax,%rsi
    ea16:	48 89 df             	mov    %rbx,%rdi
    ea19:	e8 44 96 00 00       	call   18062 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
      }
      return properties;
    ea1e:	eb 13                	jmp    ea33 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x8ca>
    }
    ea20:	49 89 c4             	mov    %rax,%r12
    ea23:	48 89 df             	mov    %rbx,%rdi
    ea26:	e8 f3 95 00 00       	call   1801e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    ea2b:	4c 89 e3             	mov    %r12,%rbx
    ea2e:	e9 4e 0c 00 00       	jmp    f681 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      return properties;
    ea33:	90                   	nop
    auto supportedLayers = physicalDevice.enumerateDeviceLayerProperties();
    std::map<std::string, uint32_t> layerMap{};
    ea34:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ea38:	0f 29 85 a0 f8 ff ff 	movaps %xmm0,-0x760(%rbp)
    ea3f:	0f 29 85 b0 f8 ff ff 	movaps %xmm0,-0x750(%rbp)
    ea46:	0f 29 85 c0 f8 ff ff 	movaps %xmm0,-0x740(%rbp)
    ea4d:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    ea54:	48 89 c7             	mov    %rax,%rdi
    ea57:	e8 ec 89 00 00       	call   17448 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>
    for (const auto &layer : supportedLayers) {
    ea5c:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
    ea63:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    ea67:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    ea6b:	48 89 c7             	mov    %rax,%rdi
    ea6e:	e8 51 9b 00 00       	call   185c4 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>
    ea73:	48 89 85 80 fc ff ff 	mov    %rax,-0x380(%rbp)
    ea7a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    ea7e:	48 89 c7             	mov    %rax,%rdi
    ea81:	e8 64 9b 00 00       	call   185ea <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>
    ea86:	48 89 85 78 fc ff ff 	mov    %rax,-0x388(%rbp)
    ea8d:	eb 67                	jmp    eaf6 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x98d>
    ea8f:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
    ea96:	48 89 c7             	mov    %rax,%rdi
    ea99:	e8 4c 8b 00 00       	call   175ea <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
    ea9e:	48 89 45 80          	mov    %rax,-0x80(%rbp)
      layerMap[layer.layerName]++;
    eaa2:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    eaa6:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    eaad:	48 89 d6             	mov    %rdx,%rsi
    eab0:	48 89 c7             	mov    %rax,%rdi
    eab3:	e8 76 99 00 00       	call   1842e <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv>
    eab8:	48 8d 95 50 fe ff ff 	lea    -0x1b0(%rbp),%rdx
    eabf:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    eac6:	48 89 d6             	mov    %rdx,%rsi
    eac9:	48 89 c7             	mov    %rax,%rdi
    eacc:	e8 cf 99 00 00       	call   184a0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    ead1:	8b 10                	mov    (%rax),%edx
    ead3:	83 c2 01             	add    $0x1,%edx
    ead6:	89 10                	mov    %edx,(%rax)
    ead8:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    eadf:	48 89 c7             	mov    %rax,%rdi
    eae2:	e8 d9 b7 ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    for (const auto &layer : supportedLayers) {
    eae7:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
    eaee:	48 89 c7             	mov    %rax,%rdi
    eaf1:	e8 1e 9b 00 00       	call   18614 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>
    eaf6:	48 8d 95 78 fc ff ff 	lea    -0x388(%rbp),%rdx
    eafd:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
    eb04:	48 89 d6             	mov    %rdx,%rsi
    eb07:	48 89 c7             	mov    %rax,%rdi
    eb0a:	e8 92 8a 00 00       	call   175a1 <_ZN9__gnu_cxxeqIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    eb0f:	83 f0 01             	xor    $0x1,%eax
    eb12:	84 c0                	test   %al,%al
    eb14:	0f 85 75 ff ff ff    	jne    ea8f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x926>
    }
    for (const auto &layer : instanceLayers) {
    eb1a:	48 8d 05 5f 28 03 00 	lea    0x3285f(%rip),%rax        # 41380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    eb21:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    eb25:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    eb29:	48 89 c7             	mov    %rax,%rdi
    eb2c:	e8 a9 89 00 00       	call   174da <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>
    eb31:	48 89 85 70 fc ff ff 	mov    %rax,-0x390(%rbp)
    eb38:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    eb3c:	48 89 c7             	mov    %rax,%rdi
    eb3f:	e8 da 89 00 00       	call   1751e <_ZNKSt6vectorIPKcSaIS1_EE3endEv>
    eb44:	48 89 85 68 fc ff ff 	mov    %rax,-0x398(%rbp)
    eb4b:	e9 05 01 00 00       	jmp    ec55 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xaec>
    eb50:	48 8d 85 70 fc ff ff 	lea    -0x390(%rbp),%rax
    eb57:	48 89 c7             	mov    %rax,%rdi
    eb5a:	e8 31 8a 00 00       	call   17590 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>
    eb5f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
      layerMap[layer]++;
    eb63:	48 8d 85 9f fe ff ff 	lea    -0x161(%rbp),%rax
    eb6a:	48 89 c7             	mov    %rax,%rdi
    eb6d:	e8 3e 68 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    eb72:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    eb76:	48 8b 08             	mov    (%rax),%rcx
    eb79:	48 8d 95 9f fe ff ff 	lea    -0x161(%rbp),%rdx
    eb80:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    eb87:	48 89 ce             	mov    %rcx,%rsi
    eb8a:	48 89 c7             	mov    %rax,%rdi
    eb8d:	e8 c4 b8 ff ff       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    eb92:	48 8d 95 70 fe ff ff 	lea    -0x190(%rbp),%rdx
    eb99:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    eba0:	48 89 d6             	mov    %rdx,%rsi
    eba3:	48 89 c7             	mov    %rax,%rdi
    eba6:	e8 f5 98 00 00       	call   184a0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    ebab:	8b 10                	mov    (%rax),%edx
    ebad:	83 c2 01             	add    $0x1,%edx
    ebb0:	89 10                	mov    %edx,(%rax)
    ebb2:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    ebb9:	48 89 c7             	mov    %rax,%rdi
    ebbc:	e8 ff b6 ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ebc1:	48 8d 85 9f fe ff ff 	lea    -0x161(%rbp),%rax
    ebc8:	48 89 c7             	mov    %rax,%rdi
    ebcb:	e8 a0 66 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
      if (layerMap[layer] < 2) {
    ebd0:	48 8d 85 c3 fe ff ff 	lea    -0x13d(%rbp),%rax
    ebd7:	48 89 c7             	mov    %rax,%rdi
    ebda:	e8 d1 67 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    ebdf:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    ebe3:	48 8b 08             	mov    (%rax),%rcx
    ebe6:	48 8d 95 c3 fe ff ff 	lea    -0x13d(%rbp),%rdx
    ebed:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    ebf4:	48 89 ce             	mov    %rcx,%rsi
    ebf7:	48 89 c7             	mov    %rax,%rdi
    ebfa:	e8 57 b8 ff ff       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    ebff:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    ec06:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    ec0d:	48 89 d6             	mov    %rdx,%rsi
    ec10:	48 89 c7             	mov    %rax,%rdi
    ec13:	e8 88 98 00 00       	call   184a0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    ec18:	8b 00                	mov    (%rax),%eax
    ec1a:	83 f8 01             	cmp    $0x1,%eax
    ec1d:	0f 96 c3             	setbe  %bl
    ec20:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    ec27:	48 89 c7             	mov    %rax,%rdi
    ec2a:	e8 91 b6 ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ec2f:	48 8d 85 c3 fe ff ff 	lea    -0x13d(%rbp),%rax
    ec36:	48 89 c7             	mov    %rax,%rdi
    ec39:	e8 32 66 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    ec3e:	84 db                	test   %bl,%bl
    ec40:	74 04                	je     ec46 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xadd>
        layerSupported = false;
    ec42:	c6 45 ce 00          	movb   $0x0,-0x32(%rbp)
    for (const auto &layer : instanceLayers) {
    ec46:	48 8d 85 70 fc ff ff 	lea    -0x390(%rbp),%rax
    ec4d:	48 89 c7             	mov    %rax,%rdi
    ec50:	e8 4f 99 00 00       	call   185a4 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>
    ec55:	48 8d 95 68 fc ff ff 	lea    -0x398(%rbp),%rdx
    ec5c:	48 8d 85 70 fc ff ff 	lea    -0x390(%rbp),%rax
    ec63:	48 89 d6             	mov    %rdx,%rsi
    ec66:	48 89 c7             	mov    %rax,%rdi
    ec69:	e8 d9 88 00 00       	call   17547 <_ZN9__gnu_cxxeqIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    ec6e:	83 f0 01             	xor    $0x1,%eax
    ec71:	84 c0                	test   %al,%al
    ec73:	0f 85 d7 fe ff ff    	jne    eb50 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x9e7>
      }
    }
    if (!layerSupported) {
    ec79:	0f b6 45 ce          	movzbl -0x32(%rbp),%eax
    ec7d:	83 f0 01             	xor    $0x1,%eax
    ec80:	84 c0                	test   %al,%al
    ec82:	74 0a                	je     ec8e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xb25>
      continue;
    ec84:	bb 00 00 00 00       	mov    $0x0,%ebx
    ec89:	e9 15 07 00 00       	jmp    f3a3 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x123a>
    ec8e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    ec92:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
      VULKAN_HPP_NAMESPACE::PhysicalDeviceFeatures features;
    ec99:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    eca0:	b8 00 00 00 00       	mov    $0x0,%eax
    eca5:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    ecaa:	48 89 d7             	mov    %rdx,%rdi
    ecad:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    ecb0:	48 89 fa             	mov    %rdi,%rdx
    ecb3:	89 02                	mov    %eax,(%rdx)
    ecb5:	48 83 c2 04          	add    $0x4,%rdx
      getDispatcher()->vkGetPhysicalDeviceFeatures( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    ecb9:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    ecc0:	48 89 c7             	mov    %rax,%rdi
    ecc3:	e8 4c 79 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    ecc8:	48 8b 58 20          	mov    0x20(%rax),%rbx
    eccc:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    ecd3:	48 89 c7             	mov    %rax,%rdi
    ecd6:	e8 61 0b 00 00       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    ecdb:	48 89 c2             	mov    %rax,%rdx
    ecde:	48 8d 85 20 f9 ff ff 	lea    -0x6e0(%rbp),%rax
    ece5:	48 89 c6             	mov    %rax,%rsi
    ece8:	48 89 d7             	mov    %rdx,%rdi
    eceb:	ff d3                	call   *%rbx
      return features;
    eced:	90                   	nop
    }

    if (auto features = physicalDevice.getFeatures();
        !features.samplerAnisotropy) {
    ecee:	8b 85 6c f9 ff ff    	mov    -0x694(%rbp),%eax
    if (auto features = physicalDevice.getFeatures();
    ecf4:	85 c0                	test   %eax,%eax
    ecf6:	75 0a                	jne    ed02 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xb99>
    ecf8:	bb 00 00 00 00       	mov    $0x0,%ebx
    ecfd:	e9 a1 06 00 00       	jmp    f3a3 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x123a>
    ed02:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    ed06:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    ed0d:	48 8d 9d 10 fd ff ff 	lea    -0x2f0(%rbp),%rbx
      std::vector<VULKAN_HPP_NAMESPACE::QueueFamilyProperties> queueFamilyProperties;
    ed14:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ed18:	0f 11 03             	movups %xmm0,(%rbx)
    ed1b:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      getDispatcher()->vkGetPhysicalDeviceQueueFamilyProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ), &queueFamilyPropertyCount, nullptr );
    ed20:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    ed27:	48 89 c7             	mov    %rax,%rdi
    ed2a:	e8 e5 78 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    ed2f:	4c 8b 60 40          	mov    0x40(%rax),%r12
    ed33:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    ed3a:	48 89 c7             	mov    %rax,%rdi
    ed3d:	e8 fa 0a 00 00       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    ed42:	48 89 c1             	mov    %rax,%rcx
    ed45:	48 8d 85 bc fc ff ff 	lea    -0x344(%rbp),%rax
    ed4c:	ba 00 00 00 00       	mov    $0x0,%edx
    ed51:	48 89 c6             	mov    %rax,%rsi
    ed54:	48 89 cf             	mov    %rcx,%rdi
    ed57:	41 ff d4             	call   *%r12
      queueFamilyProperties.resize( queueFamilyPropertyCount );
    ed5a:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    ed60:	89 c0                	mov    %eax,%eax
    ed62:	48 89 c6             	mov    %rax,%rsi
    ed65:	48 89 df             	mov    %rbx,%rdi
    ed68:	e8 b5 8f 00 00       	call   17d22 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm>
      getDispatcher()->vkGetPhysicalDeviceQueueFamilyProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    ed6d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    ed74:	48 89 c7             	mov    %rax,%rdi
    ed77:	e8 98 78 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    ed7c:	4c 8b 60 40          	mov    0x40(%rax),%r12
                                                                 reinterpret_cast<VkQueueFamilyProperties *>( queueFamilyProperties.data() ) );
    ed80:	48 89 df             	mov    %rbx,%rdi
    ed83:	e8 2a 90 00 00       	call   17db2 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4dataEv>
    ed88:	49 89 c5             	mov    %rax,%r13
      getDispatcher()->vkGetPhysicalDeviceQueueFamilyProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    ed8b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    ed92:	48 89 c7             	mov    %rax,%rdi
    ed95:	e8 a2 0a 00 00       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    ed9a:	48 89 c1             	mov    %rax,%rcx
    ed9d:	48 8d 85 bc fc ff ff 	lea    -0x344(%rbp),%rax
    eda4:	4c 89 ea             	mov    %r13,%rdx
    eda7:	48 89 c6             	mov    %rax,%rsi
    edaa:	48 89 cf             	mov    %rcx,%rdi
    edad:	41 ff d4             	call   *%r12
      VULKAN_HPP_ASSERT( queueFamilyPropertyCount <= queueFamilyProperties.size() );
    edb0:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    edb6:	41 89 c4             	mov    %eax,%r12d
    edb9:	48 89 df             	mov    %rbx,%rdi
    edbc:	e8 15 90 00 00       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
    edc1:	4c 39 e0             	cmp    %r12,%rax
    edc4:	73 28                	jae    edee <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xc85>
    edc6:	48 8d 05 8b f0 01 00 	lea    0x1f08b(%rip),%rax        # 2de58 <_ZNSt8__detailL19__atomic_spin_countE+0x3664>
    edcd:	48 89 c1             	mov    %rax,%rcx
    edd0:	ba 4d 2a 00 00       	mov    $0x2a4d,%edx
    edd5:	48 8d 05 5c ec 01 00 	lea    0x1ec5c(%rip),%rax        # 2da38 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
    eddc:	48 89 c6             	mov    %rax,%rsi
    eddf:	48 8d 05 da f0 01 00 	lea    0x1f0da(%rip),%rax        # 2dec0 <_ZNSt8__detailL19__atomic_spin_countE+0x36cc>
    ede6:	48 89 c7             	mov    %rax,%rdi
    ede9:	e8 22 63 ff ff       	call   5110 <__assert_fail@plt>
      if ( queueFamilyPropertyCount < queueFamilyProperties.size() )
    edee:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    edf4:	41 89 c4             	mov    %eax,%r12d
    edf7:	48 89 df             	mov    %rbx,%rdi
    edfa:	e8 d7 8f 00 00       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
    edff:	49 39 c4             	cmp    %rax,%r12
    ee02:	0f 92 c0             	setb   %al
    ee05:	84 c0                	test   %al,%al
    ee07:	74 28                	je     ee31 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xcc8>
        queueFamilyProperties.resize( queueFamilyPropertyCount );
    ee09:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    ee0f:	89 c0                	mov    %eax,%eax
    ee11:	48 89 c6             	mov    %rax,%rsi
    ee14:	48 89 df             	mov    %rbx,%rdi
    ee17:	e8 06 8f 00 00       	call   17d22 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm>
      return queueFamilyProperties;
    ee1c:	eb 13                	jmp    ee31 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xcc8>
    }
    ee1e:	49 89 c4             	mov    %rax,%r12
    ee21:	48 89 df             	mov    %rbx,%rdi
    ee24:	e8 b5 8e 00 00       	call   17cde <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
    ee29:	4c 89 e3             	mov    %r12,%rbx
    ee2c:	e9 2d 08 00 00       	jmp    f65e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      return queueFamilyProperties;
    ee31:	90                   	nop
      continue;
    }

    auto queueFamilies = physicalDevice.getQueueFamilyProperties();
    std::optional<uint32_t> selectedQueueFamilyIndex;
    ee32:	48 c7 85 08 fd ff ff 	movq   $0x0,-0x2f8(%rbp)
    ee39:	00 00 00 00 
    for (size_t i = 0; i < queueFamilies.size(); ++i) {
    ee3d:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    ee44:	00 
    ee45:	e9 17 02 00 00       	jmp    f061 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xef8>
      if ((queueFamilies[i].queueFlags & vk::QueueFlagBits::eGraphics) &&
    ee4a:	48 8d 85 c8 fe ff ff 	lea    -0x138(%rbp),%rax
    ee51:	be 01 00 00 00       	mov    $0x1,%esi
    ee56:	48 89 c7             	mov    %rax,%rdi
    ee59:	e8 8a 88 00 00       	call   176e8 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1ES1_>
    ee5e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    ee62:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    ee69:	48 89 d6             	mov    %rdx,%rsi
    ee6c:	48 89 c7             	mov    %rax,%rdi
    ee6f:	e8 c4 97 00 00       	call   18638 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EEixEm>
    ee74:	48 89 c2             	mov    %rax,%rdx
    ee77:	48 8d 85 c8 fe ff ff 	lea    -0x138(%rbp),%rax
    ee7e:	48 89 c6             	mov    %rax,%rsi
    ee81:	48 89 d7             	mov    %rdx,%rdi
    ee84:	e8 77 88 00 00       	call   17700 <_ZNK2vk5FlagsINS_13QueueFlagBitsEEanERKS2_>
    ee89:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
          (queueFamilies[i].queueFlags & vk::QueueFlagBits::eCompute) &&
    ee8f:	48 8d 85 c4 fe ff ff 	lea    -0x13c(%rbp),%rax
    ee96:	48 89 c7             	mov    %rax,%rdi
    ee99:	e8 94 88 00 00       	call   17732 <_ZNK2vk5FlagsINS_13QueueFlagBitsEEcvbEv>
    ee9e:	84 c0                	test   %al,%al
    eea0:	0f 84 7c 01 00 00    	je     f022 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb9>
    eea6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    eead:	be 02 00 00 00       	mov    $0x2,%esi
    eeb2:	48 89 c7             	mov    %rax,%rdi
    eeb5:	e8 2e 88 00 00       	call   176e8 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1ES1_>
    eeba:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    eebe:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    eec5:	48 89 d6             	mov    %rdx,%rsi
    eec8:	48 89 c7             	mov    %rax,%rdi
    eecb:	e8 68 97 00 00       	call   18638 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EEixEm>
    eed0:	48 89 c2             	mov    %rax,%rdx
    eed3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    eeda:	48 89 c6             	mov    %rax,%rsi
    eedd:	48 89 d7             	mov    %rdx,%rdi
    eee0:	e8 1b 88 00 00       	call   17700 <_ZNK2vk5FlagsINS_13QueueFlagBitsEEanERKS2_>
    eee5:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    eeeb:	48 8d 85 cc fe ff ff 	lea    -0x134(%rbp),%rax
    eef2:	48 89 c7             	mov    %rax,%rdi
    eef5:	e8 38 88 00 00       	call   17732 <_ZNK2vk5FlagsINS_13QueueFlagBitsEEcvbEv>
      if ((queueFamilies[i].queueFlags & vk::QueueFlagBits::eGraphics) &&
    eefa:	84 c0                	test   %al,%al
    eefc:	0f 84 20 01 00 00    	je     f022 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb9>
          (physicalDevice.getSurfaceSupportKHR(static_cast<uint32_t>(i),
                                               *surface))) {
    ef02:	48 8b 85 28 f8 ff ff 	mov    -0x7d8(%rbp),%rax
    ef09:	48 89 c7             	mov    %rax,%rdi
    ef0c:	e8 bd 7c 00 00       	call   16bce <_ZNK2vk4raii10SurfaceKHRdeEv>
          (physicalDevice.getSurfaceSupportKHR(static_cast<uint32_t>(i),
    ef11:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    ef15:	89 d1                	mov    %edx,%ecx
    ef17:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    ef1b:	48 89 95 20 ff ff ff 	mov    %rdx,-0xe0(%rbp)
    ef22:	89 8d 1c ff ff ff    	mov    %ecx,-0xe4(%rbp)
    ef28:	48 8b 00             	mov    (%rax),%rax
    ef2b:	48 89 85 60 fc ff ff 	mov    %rax,-0x3a0(%rbp)
    //=== VK_KHR_surface ===

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE VULKAN_HPP_NAMESPACE::Bool32 PhysicalDevice::getSurfaceSupportKHR( uint32_t                         queueFamilyIndex,
                                                                                                              VULKAN_HPP_NAMESPACE::SurfaceKHR surface ) const
    {
      VULKAN_HPP_ASSERT( getDispatcher()->vkGetPhysicalDeviceSurfaceSupportKHR &&
    ef32:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    ef39:	48 89 c7             	mov    %rax,%rdi
    ef3c:	e8 d3 76 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    ef41:	48 8b 80 78 02 00 00 	mov    0x278(%rax),%rax
    ef48:	48 85 c0             	test   %rax,%rax
    ef4b:	75 28                	jne    ef75 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xe0c>
    ef4d:	48 8d 05 ac ef 01 00 	lea    0x1efac(%rip),%rax        # 2df00 <_ZNSt8__detailL19__atomic_spin_countE+0x370c>
    ef54:	48 89 c1             	mov    %rax,%rcx
    ef57:	ba 0b 32 00 00       	mov    $0x320b,%edx
    ef5c:	48 8d 05 d5 ea 01 00 	lea    0x1ead5(%rip),%rax        # 2da38 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
    ef63:	48 89 c6             	mov    %rax,%rsi
    ef66:	48 8d 05 f3 ef 01 00 	lea    0x1eff3(%rip),%rax        # 2df60 <_ZNSt8__detailL19__atomic_spin_countE+0x376c>
    ef6d:	48 89 c7             	mov    %rax,%rdi
    ef70:	e8 9b 61 ff ff       	call   5110 <__assert_fail@plt>
                         "Function <vkGetPhysicalDeviceSurfaceSupportKHR> needs extension <VK_KHR_surface> enabled!" );

      VULKAN_HPP_NAMESPACE::Bool32 supported;
      VkResult                     result = getDispatcher()->vkGetPhysicalDeviceSurfaceSupportKHR(
    ef75:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    ef7c:	48 89 c7             	mov    %rax,%rdi
    ef7f:	e8 90 76 00 00       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    ef84:	48 8b 98 78 02 00 00 	mov    0x278(%rax),%rbx
    ef8b:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
    ef92:	48 89 c7             	mov    %rax,%rdi
    ef95:	e8 9e 9f ff ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
    ef9a:	49 89 c4             	mov    %rax,%r12
    ef9d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    efa4:	48 89 c7             	mov    %rax,%rdi
    efa7:	e8 90 08 00 00       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    efac:	48 89 c7             	mov    %rax,%rdi
    efaf:	48 8d 95 5c fc ff ff 	lea    -0x3a4(%rbp),%rdx
    efb6:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    efbc:	48 89 d1             	mov    %rdx,%rcx
    efbf:	4c 89 e2             	mov    %r12,%rdx
    efc2:	89 c6                	mov    %eax,%esi
    efc4:	ff d3                	call   *%rbx
    efc6:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
    efcc:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    efd2:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
    efd8:	48 8d 05 19 f0 01 00 	lea    0x1f019(%rip),%rax        # 2dff8 <_ZNSt8__detailL19__atomic_spin_countE+0x3804>
    efdf:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    if ( result != Result::eSuccess )
    efe6:	83 bd 14 ff ff ff 00 	cmpl   $0x0,-0xec(%rbp)
    efed:	74 17                	je     f006 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xe9d>
      throwResultException( result, message );
    efef:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    eff6:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
    effc:	48 89 d6             	mov    %rdx,%rsi
    efff:	89 c7                	mov    %eax,%edi
    f001:	e8 0c e7 ff ff       	call   d712 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    f006:	90                   	nop
        static_cast<VkPhysicalDevice>( m_physicalDevice ), queueFamilyIndex, static_cast<VkSurfaceKHR>( surface ), reinterpret_cast<VkBool32 *>( &supported ) );
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::getSurfaceSupportKHR" );

      return supported;
    f007:	8b 85 5c fc ff ff    	mov    -0x3a4(%rbp),%eax
          (queueFamilies[i].queueFlags & vk::QueueFlagBits::eCompute) &&
    f00d:	85 c0                	test   %eax,%eax
    f00f:	74 11                	je     f022 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb9>
    f011:	eb 08                	jmp    f01b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb2>
    f013:	48 89 c3             	mov    %rax,%rbx
    f016:	e9 2f 06 00 00       	jmp    f64a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14e1>
    f01b:	b8 01 00 00 00       	mov    $0x1,%eax
    f020:	eb 05                	jmp    f027 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xebe>
    f022:	b8 00 00 00 00       	mov    $0x0,%eax
      if ((queueFamilies[i].queueFlags & vk::QueueFlagBits::eGraphics) &&
    f027:	84 c0                	test   %al,%al
    f029:	74 31                	je     f05c <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xef3>
        selectedQueueFamilyIndex = static_cast<uint32_t>(i);
    f02b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    f02f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
    f035:	48 8d 95 dc fe ff ff 	lea    -0x124(%rbp),%rdx
    f03c:	48 8d 85 d4 fe ff ff 	lea    -0x12c(%rbp),%rax
    f043:	48 89 d6             	mov    %rdx,%rsi
    f046:	48 89 c7             	mov    %rax,%rdi
    f049:	e8 14 96 00 00       	call   18662 <_ZNSt8optionalIjEC1IjLb1EEEOT_>
    f04e:	48 8b 85 d4 fe ff ff 	mov    -0x12c(%rbp),%rax
    f055:	48 89 85 08 fd ff ff 	mov    %rax,-0x2f8(%rbp)
    for (size_t i = 0; i < queueFamilies.size(); ++i) {
    f05c:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
    f061:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    f068:	48 89 c7             	mov    %rax,%rdi
    f06b:	e8 66 8d 00 00       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
    f070:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    f074:	0f 92 c0             	setb   %al
    f077:	84 c0                	test   %al,%al
    f079:	0f 85 cb fd ff ff    	jne    ee4a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xce1>
      }
    }
    if (!selectedQueueFamilyIndex.has_value()) {
    f07f:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    f086:	48 89 c7             	mov    %rax,%rdi
    f089:	e8 6e 85 00 00       	call   175fc <_ZNKSt8optionalIjE9has_valueEv>
    f08e:	83 f0 01             	xor    $0x1,%eax
    f091:	84 c0                	test   %al,%al
    f093:	74 3b                	je     f0d0 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xf67>
      throw std::runtime_error("Failed to select queue families");
    f095:	bf 10 00 00 00       	mov    $0x10,%edi
    f09a:	e8 31 60 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    f09f:	48 89 c3             	mov    %rax,%rbx
    f0a2:	48 8d 05 7f ef 01 00 	lea    0x1ef7f(%rip),%rax        # 2e028 <_ZNSt8__detailL19__atomic_spin_countE+0x3834>
    f0a9:	48 89 c6             	mov    %rax,%rsi
    f0ac:	48 89 df             	mov    %rbx,%rdi
    f0af:	e8 dc 5f ff ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
    f0b4:	48 8b 05 f5 1e 03 00 	mov    0x31ef5(%rip),%rax        # 40fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    f0bb:	48 89 c2             	mov    %rax,%rdx
    f0be:	48 8d 05 3b 19 03 00 	lea    0x3193b(%rip),%rax        # 40a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
    f0c5:	48 89 c6             	mov    %rax,%rsi
    f0c8:	48 89 df             	mov    %rbx,%rdi
    f0cb:	e8 b0 62 ff ff       	call   5380 <__cxa_throw@plt>
    }

    const float queuePriorities = 1.0f;
    f0d0:	f3 0f 10 05 a4 f0 01 	movss  0x1f0a4(%rip),%xmm0        # 2e17c <_ZNSt8__detailL19__atomic_spin_countE+0x3988>
    f0d7:	00 
    f0d8:	f3 0f 11 85 04 fd ff 	movss  %xmm0,-0x2fc(%rbp)
    f0df:	ff 
    vk::DeviceQueueCreateInfo queueInfo{
    f0e0:	66 0f ef c0          	pxor   %xmm0,%xmm0
    f0e4:	0f 29 85 40 f8 ff ff 	movaps %xmm0,-0x7c0(%rbp)
    f0eb:	0f 29 85 50 f8 ff ff 	movaps %xmm0,-0x7b0(%rbp)
    f0f2:	66 0f d6 85 60 f8 ff 	movq   %xmm0,-0x7a0(%rbp)
    f0f9:	ff 
    f0fa:	c7 85 40 f8 ff ff 02 	movl   $0x2,-0x7c0(%rbp)
    f101:	00 00 00 
    f104:	c7 85 58 f8 ff ff 01 	movl   $0x1,-0x7a8(%rbp)
    f10b:	00 00 00 
        .queueFamilyIndex{selectedQueueFamilyIndex.value()},
        .queueCount{1},
        .pQueuePriorities{&queuePriorities},
    }; // namespace rtvc
    f10e:	48 8d 85 40 f8 ff ff 	lea    -0x7c0(%rbp),%rax
    f115:	48 83 c0 10          	add    $0x10,%rax
    f119:	48 89 c7             	mov    %rax,%rdi
    f11c:	e8 39 85 00 00       	call   1765a <_ZN2vk5FlagsINS_25DeviceQueueCreateFlagBitsEEC1Ev>
        .queueFamilyIndex{selectedQueueFamilyIndex.value()},
    f121:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    f128:	48 89 c7             	mov    %rax,%rdi
    f12b:	e8 f8 84 00 00       	call   17628 <_ZNRSt8optionalIjE5valueEv>
    f130:	8b 00                	mov    (%rax),%eax
    }; // namespace rtvc
    f132:	89 85 54 f8 ff ff    	mov    %eax,-0x7ac(%rbp)
    f138:	48 8d 85 04 fd ff ff 	lea    -0x2fc(%rbp),%rax
    f13f:	48 89 85 60 f8 ff ff 	mov    %rax,-0x7a0(%rbp)

    vk::PhysicalDeviceFeatures features{};
    f146:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    f14d:	b8 00 00 00 00       	mov    $0x0,%eax
    f152:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    f157:	48 89 d7             	mov    %rdx,%rdi
    f15a:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    f15d:	48 89 fa             	mov    %rdi,%rdx
    f160:	89 02                	mov    %eax,(%rdx)
    f162:	48 83 c2 04          	add    $0x4,%rdx
    // features.samplerAnisotropy = VK_TRUE;
    // features.sample

    vk::DeviceCreateInfo deviceInfo{
    f166:	66 0f ef c0          	pxor   %xmm0,%xmm0
    f16a:	0f 29 85 d0 f8 ff ff 	movaps %xmm0,-0x730(%rbp)
    f171:	0f 29 85 e0 f8 ff ff 	movaps %xmm0,-0x720(%rbp)
    f178:	0f 29 85 f0 f8 ff ff 	movaps %xmm0,-0x710(%rbp)
    f17f:	0f 29 85 00 f9 ff ff 	movaps %xmm0,-0x700(%rbp)
    f186:	66 0f d6 85 10 f9 ff 	movq   %xmm0,-0x6f0(%rbp)
    f18d:	ff 
    f18e:	c7 85 d0 f8 ff ff 03 	movl   $0x3,-0x730(%rbp)
    f195:	00 00 00 
    f198:	c7 85 e4 f8 ff ff 01 	movl   $0x1,-0x71c(%rbp)
    f19f:	00 00 00 
        .ppEnabledLayerNames{instanceLayers.data()},
        .enabledExtensionCount{
            static_cast<uint32_t>(requiredExtensions.size())},
        .ppEnabledExtensionNames{requiredExtensions.data()},
        .pEnabledFeatures{&features},
    };
    f1a2:	48 8d 85 d0 f8 ff ff 	lea    -0x730(%rbp),%rax
    f1a9:	48 83 c0 10          	add    $0x10,%rax
    f1ad:	48 89 c7             	mov    %rax,%rdi
    f1b0:	e8 03 85 00 00       	call   176b8 <_ZN2vk5FlagsINS_20DeviceCreateFlagBitsEEC1Ev>
    f1b5:	48 8d 85 40 f8 ff ff 	lea    -0x7c0(%rbp),%rax
    f1bc:	48 89 85 e8 f8 ff ff 	mov    %rax,-0x718(%rbp)
        .enabledLayerCount{static_cast<uint32_t>(instanceLayers.size())},
    f1c3:	48 8d 05 b6 21 03 00 	lea    0x321b6(%rip),%rax        # 41380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    f1ca:	48 89 c7             	mov    %rax,%rdi
    f1cd:	e8 9e 84 00 00       	call   17670 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
    };
    f1d2:	89 85 f0 f8 ff ff    	mov    %eax,-0x710(%rbp)
        .ppEnabledLayerNames{instanceLayers.data()},
    f1d8:	48 8d 05 a1 21 03 00 	lea    0x321a1(%rip),%rax        # 41380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    f1df:	48 89 c7             	mov    %rax,%rdi
    f1e2:	e8 ad 84 00 00       	call   17694 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    };
    f1e7:	48 89 85 f8 f8 ff ff 	mov    %rax,-0x708(%rbp)
            static_cast<uint32_t>(requiredExtensions.size())},
    f1ee:	48 8d 05 6b 21 03 00 	lea    0x3216b(%rip),%rax        # 41360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    f1f5:	48 89 c7             	mov    %rax,%rdi
    f1f8:	e8 73 84 00 00       	call   17670 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
    };
    f1fd:	89 85 00 f9 ff ff    	mov    %eax,-0x700(%rbp)
        .ppEnabledExtensionNames{requiredExtensions.data()},
    f203:	48 8d 05 56 21 03 00 	lea    0x32156(%rip),%rax        # 41360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    f20a:	48 89 c7             	mov    %rax,%rdi
    f20d:	e8 82 84 00 00       	call   17694 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    };
    f212:	48 89 85 08 f9 ff ff 	mov    %rax,-0x6f8(%rbp)
    f219:	48 8d 85 20 f9 ff ff 	lea    -0x6e0(%rbp),%rax
    f220:	48 89 85 10 f9 ff ff 	mov    %rax,-0x6f0(%rbp)

    auto device = physicalDevice.createDevice(deviceInfo);
    f227:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    f22e:	be 00 00 00 00       	mov    $0x0,%esi
    f233:	48 89 c7             	mov    %rax,%rdi
    f236:	e8 b1 94 00 00       	call   186ec <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    f23b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    f23f:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    f246:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    f24d:	48 89 85 c0 fc ff ff 	mov    %rax,-0x340(%rbp)
    f254:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
      return VULKAN_HPP_RAII_NAMESPACE::Device( *this, createInfo, allocator );
    f25b:	48 8b 8d c0 fc ff ff 	mov    -0x340(%rbp),%rcx
    f262:	48 8d 95 d0 f8 ff ff 	lea    -0x730(%rbp),%rdx
    f269:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    f270:	48 89 c7             	mov    %rax,%rdi
    f273:	e8 d2 76 00 00       	call   1694a <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
    f278:	90                   	nop
    auto queue = device.getQueue(selectedQueueFamilyIndex.value(), 0);
    f279:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    f280:	48 89 c7             	mov    %rax,%rdi
    f283:	e8 a0 83 00 00       	call   17628 <_ZNRSt8optionalIjE5valueEv>
    f288:	8b 00                	mov    (%rax),%eax
    f28a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
    f290:	c7 85 f8 fe ff ff 00 	movl   $0x0,-0x108(%rbp)
    f297:	00 00 00 
    f29a:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
      return VULKAN_HPP_RAII_NAMESPACE::Queue( *this, queueFamilyIndex, queueIndex );
    f2a1:	8b 8d f8 fe ff ff    	mov    -0x108(%rbp),%ecx
    f2a7:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
    f2ad:	48 8d b5 e0 fc ff ff 	lea    -0x320(%rbp),%rsi
    f2b4:	48 89 c7             	mov    %rax,%rdi
    f2b7:	e8 06 78 00 00       	call   16ac2 <_ZN2vk4raii5QueueC1ERKNS0_6DeviceEjj>
    f2bc:	90                   	nop

    return {
        selectedQueueFamilyIndex.value(),
    f2bd:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    f2c4:	48 89 c7             	mov    %rax,%rdi
    f2c7:	e8 5c 83 00 00       	call   17628 <_ZNRSt8optionalIjE5valueEv>
    f2cc:	8b 10                	mov    (%rax),%edx
        physicalDevice,
        physicalDevice.createDevice(deviceInfo),
    };
  }
  throw std::runtime_error("Failed to create a logical device");
}
    f2ce:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    f2d5:	89 10                	mov    %edx,(%rax)
    f2d7:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    f2de:	48 8d 50 08          	lea    0x8(%rax),%rdx
    f2e2:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    f2e9:	48 89 c6             	mov    %rax,%rsi
    f2ec:	48 89 d7             	mov    %rdx,%rdi
    f2ef:	e8 56 78 00 00       	call   16b4a <_ZN2vk4raii5QueueC1ERKS1_>
    f2f4:	41 bc 01 00 00 00    	mov    $0x1,%r12d
    f2fa:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    f301:	48 8d 50 18          	lea    0x18(%rax),%rdx
    f305:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    f309:	48 89 c6             	mov    %rax,%rsi
    f30c:	48 89 d7             	mov    %rdx,%rdi
    f30f:	e8 30 72 00 00       	call   16544 <_ZN2vk4raii14PhysicalDeviceC1ERKS1_>
    f314:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    f31a:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    f321:	be 00 00 00 00       	mov    $0x0,%esi
    f326:	48 89 c7             	mov    %rax,%rdi
    f329:	e8 be 93 00 00       	call   186ec <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    f32e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    f332:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    f339:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    f340:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
    f347:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    f34e:	48 8d 78 28          	lea    0x28(%rax),%rdi
      return VULKAN_HPP_RAII_NAMESPACE::Device( *this, createInfo, allocator );
    f352:	48 8b 8d c8 fc ff ff 	mov    -0x338(%rbp),%rcx
    f359:	48 8d 95 d0 f8 ff ff 	lea    -0x730(%rbp),%rdx
    f360:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    f367:	48 89 c6             	mov    %rax,%rsi
    f36a:	e8 db 75 00 00       	call   1694a <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
    f36f:	90                   	nop
    };
    f370:	90                   	nop
  }
    f371:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    f378:	48 89 c7             	mov    %rax,%rdi
    f37b:	e8 70 a6 ff ff       	call   99f0 <_ZN2vk4raii5QueueD1Ev>
    f380:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
    f387:	48 89 c7             	mov    %rax,%rdi
    f38a:	e8 a7 a1 ff ff       	call   9536 <_ZN2vk4raii6DeviceD1Ev>
    f38f:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    f396:	48 89 c7             	mov    %rax,%rdi
    f399:	e8 40 89 00 00       	call   17cde <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
    f39e:	bb 01 00 00 00       	mov    $0x1,%ebx
    f3a3:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    f3aa:	48 89 c7             	mov    %rax,%rdi
    f3ad:	e8 b2 80 00 00       	call   17464 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    f3b2:	85 db                	test   %ebx,%ebx
    f3b4:	75 07                	jne    f3bd <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1254>
    f3b6:	bb 00 00 00 00       	mov    $0x0,%ebx
    f3bb:	eb 05                	jmp    f3c2 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1259>
    f3bd:	bb 01 00 00 00       	mov    $0x1,%ebx
    f3c2:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
    f3c9:	48 89 c7             	mov    %rax,%rdi
    f3cc:	e8 4d 8c 00 00       	call   1801e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    f3d1:	85 db                	test   %ebx,%ebx
    f3d3:	75 07                	jne    f3dc <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1273>
    f3d5:	bb 00 00 00 00       	mov    $0x0,%ebx
    f3da:	eb 05                	jmp    f3e1 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1278>
    f3dc:	bb 01 00 00 00       	mov    $0x1,%ebx
    f3e1:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    f3e8:	48 89 c7             	mov    %rax,%rdi
    f3eb:	e8 74 80 00 00       	call   17464 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    f3f0:	85 db                	test   %ebx,%ebx
    f3f2:	75 07                	jne    f3fb <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1292>
    f3f4:	bb 00 00 00 00       	mov    $0x0,%ebx
    f3f9:	eb 05                	jmp    f400 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1297>
    f3fb:	bb 01 00 00 00       	mov    $0x1,%ebx
    f400:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    f407:	48 89 c7             	mov    %rax,%rdi
    f40a:	e8 59 8a 00 00       	call   17e68 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
    f40f:	85 db                	test   %ebx,%ebx
    f411:	75 14                	jne    f427 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12be>
    f413:	eb 01                	jmp    f416 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12ad>
      continue;
    f415:	90                   	nop
  for (const auto &physicalDevice : physicalDevices) {
    f416:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    f41d:	48 89 c7             	mov    %rax,%rdi
    f420:	e8 dd 8e 00 00       	call   18302 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEppEv>
    f425:	eb 14                	jmp    f43b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12d2>
}
    f427:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    f42e:	48 89 c7             	mov    %rax,%rdi
    f431:	e8 aa 77 00 00       	call   16be0 <_ZN2vk4raii15PhysicalDevicesD1Ev>
    };
    f436:	e9 93 02 00 00       	jmp    f6ce <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1565>
  for (const auto &physicalDevice : physicalDevices) {
    f43b:	48 8d 95 70 fd ff ff 	lea    -0x290(%rbp),%rdx
    f442:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    f449:	48 89 d6             	mov    %rdx,%rsi
    f44c:	48 89 c7             	mov    %rax,%rdi
    f44f:	e8 60 7f 00 00       	call   173b4 <_ZN9__gnu_cxxeqIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    f454:	83 f0 01             	xor    $0x1,%eax
    f457:	84 c0                	test   %al,%al
    f459:	0f 85 29 ef ff ff    	jne    e388 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x21f>
  throw std::runtime_error("Failed to create a logical device");
    f45f:	bf 10 00 00 00       	mov    $0x10,%edi
    f464:	e8 67 5c ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    f469:	48 89 c3             	mov    %rax,%rbx
    f46c:	48 8d 05 d5 eb 01 00 	lea    0x1ebd5(%rip),%rax        # 2e048 <_ZNSt8__detailL19__atomic_spin_countE+0x3854>
    f473:	48 89 c6             	mov    %rax,%rsi
    f476:	48 89 df             	mov    %rbx,%rdi
    f479:	e8 12 5c ff ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
    f47e:	48 8b 05 2b 1b 03 00 	mov    0x31b2b(%rip),%rax        # 40fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    f485:	48 89 c2             	mov    %rax,%rdx
    f488:	48 8d 05 71 15 03 00 	lea    0x31571(%rip),%rax        # 40a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
    f48f:	48 89 c6             	mov    %rax,%rsi
    f492:	48 89 df             	mov    %rbx,%rdi
    f495:	e8 e6 5e ff ff       	call   5380 <__cxa_throw@plt>
  };
    f49a:	48 89 c3             	mov    %rax,%rbx
    f49d:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    f4a4:	48 89 c7             	mov    %rax,%rdi
    f4a7:	e8 7c 79 00 00       	call   16e28 <_ZNSaIPKcED1Ev>
    f4ac:	80 bd 27 f8 ff ff 00 	cmpb   $0x0,-0x7d9(%rbp)
    f4b3:	75 0f                	jne    f4c4 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x135b>
    f4b5:	48 8d 05 bc 1e 03 00 	lea    0x31ebc(%rip),%rax        # 41378 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    f4bc:	48 89 c7             	mov    %rax,%rdi
    f4bf:	e8 2c 5c ff ff       	call   50f0 <__cxa_guard_abort@plt>
    f4c4:	48 89 d8             	mov    %rbx,%rax
    f4c7:	48 89 c7             	mov    %rax,%rdi
    f4ca:	e8 d1 5e ff ff       	call   53a0 <_Unwind_Resume@plt>
  };
    f4cf:	48 89 c3             	mov    %rax,%rbx
    f4d2:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    f4d9:	48 89 c7             	mov    %rax,%rdi
    f4dc:	e8 47 79 00 00       	call   16e28 <_ZNSaIPKcED1Ev>
    f4e1:	45 84 f6             	test   %r14b,%r14b
    f4e4:	75 0f                	jne    f4f5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x138c>
    f4e6:	48 8d 05 ab 1e 03 00 	lea    0x31eab(%rip),%rax        # 41398 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    f4ed:	48 89 c7             	mov    %rax,%rdi
    f4f0:	e8 fb 5b ff ff       	call   50f0 <__cxa_guard_abort@plt>
    f4f5:	48 89 d8             	mov    %rbx,%rax
    f4f8:	48 89 c7             	mov    %rax,%rdi
    f4fb:	e8 a0 5e ff ff       	call   53a0 <_Unwind_Resume@plt>
      extensionsMap[extension.extensionName]++;
    f500:	48 89 c3             	mov    %rax,%rbx
    f503:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    f50a:	48 89 c7             	mov    %rax,%rdi
    f50d:	e8 ae ad ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    f512:	e9 6a 01 00 00       	jmp    f681 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      extensionsMap[extension]++;
    f517:	48 89 c3             	mov    %rax,%rbx
    f51a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    f521:	48 89 c7             	mov    %rax,%rdi
    f524:	e8 97 ad ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    f529:	eb 03                	jmp    f52e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x13c5>
    f52b:	48 89 c3             	mov    %rax,%rbx
    f52e:	48 8d 85 1f fe ff ff 	lea    -0x1e1(%rbp),%rax
    f535:	48 89 c7             	mov    %rax,%rdi
    f538:	e8 33 5d ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    f53d:	e9 3f 01 00 00       	jmp    f681 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      if (extensionsMap[extension] < 2) {
    f542:	48 89 c3             	mov    %rax,%rbx
    f545:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    f54c:	48 89 c7             	mov    %rax,%rdi
    f54f:	e8 6c ad ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    f554:	eb 03                	jmp    f559 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x13f0>
    f556:	48 89 c3             	mov    %rax,%rbx
    f559:	48 8d 85 4f fe ff ff 	lea    -0x1b1(%rbp),%rax
    f560:	48 89 c7             	mov    %rax,%rdi
    f563:	e8 08 5d ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    f568:	e9 14 01 00 00       	jmp    f681 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      layerMap[layer.layerName]++;
    f56d:	48 89 c3             	mov    %rax,%rbx
    f570:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    f577:	48 89 c7             	mov    %rax,%rdi
    f57a:	e8 41 ad ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    f57f:	e9 da 00 00 00       	jmp    f65e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      layerMap[layer]++;
    f584:	48 89 c3             	mov    %rax,%rbx
    f587:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    f58e:	48 89 c7             	mov    %rax,%rdi
    f591:	e8 2a ad ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    f596:	eb 03                	jmp    f59b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1432>
    f598:	48 89 c3             	mov    %rax,%rbx
    f59b:	48 8d 85 9f fe ff ff 	lea    -0x161(%rbp),%rax
    f5a2:	48 89 c7             	mov    %rax,%rdi
    f5a5:	e8 c6 5c ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    f5aa:	e9 af 00 00 00       	jmp    f65e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      if (layerMap[layer] < 2) {
    f5af:	48 89 c3             	mov    %rax,%rbx
    f5b2:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    f5b9:	48 89 c7             	mov    %rax,%rdi
    f5bc:	e8 ff ac ff ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    f5c1:	eb 03                	jmp    f5c6 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x145d>
    f5c3:	48 89 c3             	mov    %rax,%rbx
    f5c6:	48 8d 85 c3 fe ff ff 	lea    -0x13d(%rbp),%rax
    f5cd:	48 89 c7             	mov    %rax,%rdi
    f5d0:	e8 9b 5c ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    f5d5:	e9 84 00 00 00       	jmp    f65e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      throw std::runtime_error("Failed to select queue families");
    f5da:	49 89 c4             	mov    %rax,%r12
    f5dd:	48 89 df             	mov    %rbx,%rdi
    f5e0:	e8 6b 5b ff ff       	call   5150 <__cxa_free_exception@plt>
    f5e5:	4c 89 e3             	mov    %r12,%rbx
    f5e8:	eb 60                	jmp    f64a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14e1>
}
    f5ea:	48 89 c3             	mov    %rax,%rbx
    f5ed:	45 84 ed             	test   %r13b,%r13b
    f5f0:	74 13                	je     f605 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x149c>
    f5f2:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    f5f9:	48 83 c0 18          	add    $0x18,%rax
    f5fd:	48 89 c7             	mov    %rax,%rdi
    f600:	e8 e9 9e ff ff       	call   94ee <_ZN2vk4raii14PhysicalDeviceD1Ev>
    f605:	45 84 e4             	test   %r12b,%r12b
    f608:	74 18                	je     f622 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14b9>
    f60a:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    f611:	48 83 c0 08          	add    $0x8,%rax
    f615:	48 89 c7             	mov    %rax,%rdi
    f618:	e8 d3 a3 ff ff       	call   99f0 <_ZN2vk4raii5QueueD1Ev>
    f61d:	eb 03                	jmp    f622 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14b9>
  }
    f61f:	48 89 c3             	mov    %rax,%rbx
    f622:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    f629:	48 89 c7             	mov    %rax,%rdi
    f62c:	e8 bf a3 ff ff       	call   99f0 <_ZN2vk4raii5QueueD1Ev>
    f631:	eb 03                	jmp    f636 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14cd>
    f633:	48 89 c3             	mov    %rax,%rbx
    f636:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
    f63d:	48 89 c7             	mov    %rax,%rdi
    f640:	e8 f1 9e ff ff       	call   9536 <_ZN2vk4raii6DeviceD1Ev>
    f645:	eb 03                	jmp    f64a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14e1>
    f647:	48 89 c3             	mov    %rax,%rbx
    f64a:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    f651:	48 89 c7             	mov    %rax,%rdi
    f654:	e8 85 86 00 00       	call   17cde <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
    f659:	eb 03                	jmp    f65e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
    f65b:	48 89 c3             	mov    %rax,%rbx
    f65e:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    f665:	48 89 c7             	mov    %rax,%rdi
    f668:	e8 f7 7d 00 00       	call   17464 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    f66d:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
    f674:	48 89 c7             	mov    %rax,%rdi
    f677:	e8 a2 89 00 00       	call   1801e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    f67c:	eb 03                	jmp    f681 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
    f67e:	48 89 c3             	mov    %rax,%rbx
    f681:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    f688:	48 89 c7             	mov    %rax,%rdi
    f68b:	e8 d4 7d 00 00       	call   17464 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    f690:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    f697:	48 89 c7             	mov    %rax,%rdi
    f69a:	e8 c9 87 00 00       	call   17e68 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
    f69f:	eb 13                	jmp    f6b4 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x154b>
  throw std::runtime_error("Failed to create a logical device");
    f6a1:	49 89 c4             	mov    %rax,%r12
    f6a4:	48 89 df             	mov    %rbx,%rdi
    f6a7:	e8 a4 5a ff ff       	call   5150 <__cxa_free_exception@plt>
    f6ac:	4c 89 e3             	mov    %r12,%rbx
    f6af:	eb 03                	jmp    f6b4 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x154b>
}
    f6b1:	48 89 c3             	mov    %rax,%rbx
    f6b4:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    f6bb:	48 89 c7             	mov    %rax,%rdi
    f6be:	e8 1d 75 00 00       	call   16be0 <_ZN2vk4raii15PhysicalDevicesD1Ev>
    f6c3:	48 89 d8             	mov    %rbx,%rax
    f6c6:	48 89 c7             	mov    %rax,%rdi
    f6c9:	e8 d2 5c ff ff       	call   53a0 <_Unwind_Resume@plt>
    f6ce:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    f6d5:	48 81 c4 b8 07 00 00 	add    $0x7b8,%rsp
    f6dc:	5b                   	pop    %rbx
    f6dd:	41 5c                	pop    %r12
    f6df:	41 5d                	pop    %r13
    f6e1:	41 5e                	pop    %r14
    f6e3:	41 5f                	pop    %r15
    f6e5:	5d                   	pop    %rbp
    f6e6:	c3                   	ret
    f6e7:	90                   	nop

000000000000f6e8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
    f6e8:	55                   	push   %rbp
    f6e9:	48 89 e5             	mov    %rsp,%rbp
    f6ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f6f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f6f4:	90                   	nop
    f6f5:	5d                   	pop    %rbp
    f6f6:	c3                   	ret

000000000000f6f7 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    [[nodiscard]]
    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
    f6f7:	55                   	push   %rbp
    f6f8:	48 89 e5             	mov    %rsp,%rbp
    f6fb:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
    { return __v._M_value < 0; }
    f6ff:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
    f703:	c0 e8 07             	shr    $0x7,%al
    f706:	5d                   	pop    %rbp
    f707:	c3                   	ret

000000000000f708 <_ZNSt9exceptionC1Ev>:
   *  throw non-class data (e.g., fundamental types).
   */
  class exception
  {
  public:
    exception() _GLIBCXX_NOTHROW { }
    f708:	55                   	push   %rbp
    f709:	48 89 e5             	mov    %rsp,%rbp
    f70c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f710:	48 8d 15 99 12 03 00 	lea    0x31299(%rip),%rdx        # 409b0 <_ZTVSt9exception@GLIBCXX_3.4+0x10>
    f717:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f71b:	48 89 10             	mov    %rdx,(%rax)
    f71e:	90                   	nop
    f71f:	5d                   	pop    %rbp
    f720:	c3                   	ret

000000000000f721 <_ZdlPvS_>:
_GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
    f721:	55                   	push   %rbp
    f722:	48 89 e5             	mov    %rsp,%rbp
    f725:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f729:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f72d:	90                   	nop
    f72e:	5d                   	pop    %rbp
    f72f:	c3                   	ret

000000000000f730 <_ZSt17__size_to_integerm>:
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR long
  __size_to_integer(long __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
    f730:	55                   	push   %rbp
    f731:	48 89 e5             	mov    %rsp,%rbp
    f734:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f738:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f73c:	5d                   	pop    %rbp
    f73d:	c3                   	ret

000000000000f73e <_ZNSt11char_traitsIcE2ltERKcS2_>:
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
    f73e:	55                   	push   %rbp
    f73f:	48 89 e5             	mov    %rsp,%rbp
    f742:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f746:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return (static_cast<unsigned char>(__c1)
    f74a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f74e:	0f b6 00             	movzbl (%rax),%eax
    f751:	89 c2                	mov    %eax,%edx
		< static_cast<unsigned char>(__c2));
    f753:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f757:	0f b6 00             	movzbl (%rax),%eax
    f75a:	38 c2                	cmp    %al,%dl
    f75c:	0f 92 c0             	setb   %al
      }
    f75f:	5d                   	pop    %rbp
    f760:	c3                   	ret

000000000000f761 <_ZNSt11char_traitsIcE7compareEPKcS2_m>:
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
    f761:	55                   	push   %rbp
    f762:	48 89 e5             	mov    %rsp,%rbp
    f765:	48 83 ec 30          	sub    $0x30,%rsp
    f769:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f76d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    f771:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (__n == 0)
    f775:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    f77a:	75 0a                	jne    f786 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x25>
	  return 0;
    f77c:	b8 00 00 00 00       	mov    $0x0,%eax
    f781:	e9 99 00 00 00       	jmp    f81f <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	if (std::__is_constant_evaluated())
    f786:	e8 13 6a ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    f78b:	84 c0                	test   %al,%al
    f78d:	74 78                	je     f807 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xa6>
	    for (size_t __i = 0; __i < __n; ++__i)
    f78f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    f796:	00 
    f797:	eb 5d                	jmp    f7f6 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x95>
	      if (lt(__s1[__i], __s2[__i]))
    f799:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f79d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7a1:	48 01 c2             	add    %rax,%rdx
    f7a4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    f7a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7ac:	48 01 c8             	add    %rcx,%rax
    f7af:	48 89 d6             	mov    %rdx,%rsi
    f7b2:	48 89 c7             	mov    %rax,%rdi
    f7b5:	e8 84 ff ff ff       	call   f73e <_ZNSt11char_traitsIcE2ltERKcS2_>
    f7ba:	84 c0                	test   %al,%al
    f7bc:	74 07                	je     f7c5 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x64>
		return -1;
    f7be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    f7c3:	eb 5a                	jmp    f81f <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	      else if (lt(__s2[__i], __s1[__i]))
    f7c5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f7c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7cd:	48 01 c2             	add    %rax,%rdx
    f7d0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    f7d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7d8:	48 01 c8             	add    %rcx,%rax
    f7db:	48 89 d6             	mov    %rdx,%rsi
    f7de:	48 89 c7             	mov    %rax,%rdi
    f7e1:	e8 58 ff ff ff       	call   f73e <_ZNSt11char_traitsIcE2ltERKcS2_>
    f7e6:	84 c0                	test   %al,%al
    f7e8:	74 07                	je     f7f1 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x90>
		return 1;
    f7ea:	b8 01 00 00 00       	mov    $0x1,%eax
    f7ef:	eb 2e                	jmp    f81f <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	    for (size_t __i = 0; __i < __n; ++__i)
    f7f1:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    f7f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7fa:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    f7fe:	72 99                	jb     f799 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x38>
	    return 0;
    f800:	b8 00 00 00 00       	mov    $0x0,%eax
    f805:	eb 18                	jmp    f81f <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	return __builtin_memcmp(__s1, __s2, __n);
    f807:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    f80b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    f80f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f813:	48 89 ce             	mov    %rcx,%rsi
    f816:	48 89 c7             	mov    %rax,%rdi
    f819:	e8 a2 58 ff ff       	call   50c0 <memcmp@plt>
    f81e:	90                   	nop
      }
    f81f:	c9                   	leave
    f820:	c3                   	ret
    f821:	90                   	nop

000000000000f822 <_ZN2vk14PhysicalDeviceC1EP18VkPhysicalDevice_T>:
    PhysicalDevice( VkPhysicalDevice physicalDevice ) VULKAN_HPP_NOEXCEPT : m_physicalDevice( physicalDevice ) {}
    f822:	55                   	push   %rbp
    f823:	48 89 e5             	mov    %rsp,%rbp
    f826:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f82a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f82e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f832:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f836:	48 89 10             	mov    %rdx,(%rax)
    f839:	90                   	nop
    f83a:	5d                   	pop    %rbp
    f83b:	c3                   	ret

000000000000f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>:
    operator VkPhysicalDevice() const VULKAN_HPP_NOEXCEPT
    f83c:	55                   	push   %rbp
    f83d:	48 89 e5             	mov    %rsp,%rbp
    f840:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return m_physicalDevice;
    f844:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f848:	48 8b 00             	mov    (%rax),%rax
    }
    f84b:	5d                   	pop    %rbp
    f84c:	c3                   	ret
    f84d:	90                   	nop

000000000000f84e <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_>:
      DeviceDispatcher( PFN_vkGetDeviceProcAddr getProcAddr, VkDevice device ) : vkGetDeviceProcAddr( getProcAddr )
    f84e:	55                   	push   %rbp
    f84f:	48 89 e5             	mov    %rsp,%rbp
    f852:	48 83 ec 20          	sub    $0x20,%rsp
    f856:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f85a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f85e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    f862:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f866:	48 89 c7             	mov    %rax,%rdi
    f869:	e8 2e 6d ff ff       	call   659c <_ZN2vk18DispatchLoaderBaseC1Ev>
    f86e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f872:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f876:	48 89 50 10          	mov    %rdx,0x10(%rax)
    f87a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f87e:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    f885:	00 
    f886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f88a:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    f891:	00 
    f892:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f896:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    f89d:	00 
    f89e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8a2:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
    f8a9:	00 
    f8aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8ae:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
    f8b5:	00 
    f8b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8ba:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
    f8c1:	00 
    f8c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8c6:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
    f8cd:	00 
    f8ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8d2:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
    f8d9:	00 
    f8da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8de:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
    f8e5:	00 
    f8e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8ea:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
    f8f1:	00 
    f8f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8f6:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
    f8fd:	00 
    f8fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f902:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
    f909:	00 
    f90a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f90e:	48 c7 40 78 00 00 00 	movq   $0x0,0x78(%rax)
    f915:	00 
    f916:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f91a:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
    f921:	00 00 00 00 
    f925:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f929:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
    f930:	00 00 00 00 
    f934:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f938:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
    f93f:	00 00 00 00 
    f943:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f947:	48 c7 80 98 00 00 00 	movq   $0x0,0x98(%rax)
    f94e:	00 00 00 00 
    f952:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f956:	48 c7 80 a0 00 00 00 	movq   $0x0,0xa0(%rax)
    f95d:	00 00 00 00 
    f961:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f965:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
    f96c:	00 00 00 00 
    f970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f974:	48 c7 80 b0 00 00 00 	movq   $0x0,0xb0(%rax)
    f97b:	00 00 00 00 
    f97f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f983:	48 c7 80 b8 00 00 00 	movq   $0x0,0xb8(%rax)
    f98a:	00 00 00 00 
    f98e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f992:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
    f999:	00 00 00 00 
    f99d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9a1:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)
    f9a8:	00 00 00 00 
    f9ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9b0:	48 c7 80 d0 00 00 00 	movq   $0x0,0xd0(%rax)
    f9b7:	00 00 00 00 
    f9bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9bf:	48 c7 80 d8 00 00 00 	movq   $0x0,0xd8(%rax)
    f9c6:	00 00 00 00 
    f9ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9ce:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
    f9d5:	00 00 00 00 
    f9d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9dd:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
    f9e4:	00 00 00 00 
    f9e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9ec:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
    f9f3:	00 00 00 00 
    f9f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9fb:	48 c7 80 f8 00 00 00 	movq   $0x0,0xf8(%rax)
    fa02:	00 00 00 00 
    fa06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa0a:	48 c7 80 00 01 00 00 	movq   $0x0,0x100(%rax)
    fa11:	00 00 00 00 
    fa15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa19:	48 c7 80 08 01 00 00 	movq   $0x0,0x108(%rax)
    fa20:	00 00 00 00 
    fa24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa28:	48 c7 80 10 01 00 00 	movq   $0x0,0x110(%rax)
    fa2f:	00 00 00 00 
    fa33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa37:	48 c7 80 18 01 00 00 	movq   $0x0,0x118(%rax)
    fa3e:	00 00 00 00 
    fa42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa46:	48 c7 80 20 01 00 00 	movq   $0x0,0x120(%rax)
    fa4d:	00 00 00 00 
    fa51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa55:	48 c7 80 28 01 00 00 	movq   $0x0,0x128(%rax)
    fa5c:	00 00 00 00 
    fa60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa64:	48 c7 80 30 01 00 00 	movq   $0x0,0x130(%rax)
    fa6b:	00 00 00 00 
    fa6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa73:	48 c7 80 38 01 00 00 	movq   $0x0,0x138(%rax)
    fa7a:	00 00 00 00 
    fa7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa82:	48 c7 80 40 01 00 00 	movq   $0x0,0x140(%rax)
    fa89:	00 00 00 00 
    fa8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa91:	48 c7 80 48 01 00 00 	movq   $0x0,0x148(%rax)
    fa98:	00 00 00 00 
    fa9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    faa0:	48 c7 80 50 01 00 00 	movq   $0x0,0x150(%rax)
    faa7:	00 00 00 00 
    faab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    faaf:	48 c7 80 58 01 00 00 	movq   $0x0,0x158(%rax)
    fab6:	00 00 00 00 
    faba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fabe:	48 c7 80 60 01 00 00 	movq   $0x0,0x160(%rax)
    fac5:	00 00 00 00 
    fac9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    facd:	48 c7 80 68 01 00 00 	movq   $0x0,0x168(%rax)
    fad4:	00 00 00 00 
    fad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fadc:	48 c7 80 70 01 00 00 	movq   $0x0,0x170(%rax)
    fae3:	00 00 00 00 
    fae7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    faeb:	48 c7 80 78 01 00 00 	movq   $0x0,0x178(%rax)
    faf2:	00 00 00 00 
    faf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fafa:	48 c7 80 80 01 00 00 	movq   $0x0,0x180(%rax)
    fb01:	00 00 00 00 
    fb05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb09:	48 c7 80 88 01 00 00 	movq   $0x0,0x188(%rax)
    fb10:	00 00 00 00 
    fb14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb18:	48 c7 80 90 01 00 00 	movq   $0x0,0x190(%rax)
    fb1f:	00 00 00 00 
    fb23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb27:	48 c7 80 98 01 00 00 	movq   $0x0,0x198(%rax)
    fb2e:	00 00 00 00 
    fb32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb36:	48 c7 80 a0 01 00 00 	movq   $0x0,0x1a0(%rax)
    fb3d:	00 00 00 00 
    fb41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb45:	48 c7 80 a8 01 00 00 	movq   $0x0,0x1a8(%rax)
    fb4c:	00 00 00 00 
    fb50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb54:	48 c7 80 b0 01 00 00 	movq   $0x0,0x1b0(%rax)
    fb5b:	00 00 00 00 
    fb5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb63:	48 c7 80 b8 01 00 00 	movq   $0x0,0x1b8(%rax)
    fb6a:	00 00 00 00 
    fb6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb72:	48 c7 80 c0 01 00 00 	movq   $0x0,0x1c0(%rax)
    fb79:	00 00 00 00 
    fb7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb81:	48 c7 80 c8 01 00 00 	movq   $0x0,0x1c8(%rax)
    fb88:	00 00 00 00 
    fb8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb90:	48 c7 80 d0 01 00 00 	movq   $0x0,0x1d0(%rax)
    fb97:	00 00 00 00 
    fb9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb9f:	48 c7 80 d8 01 00 00 	movq   $0x0,0x1d8(%rax)
    fba6:	00 00 00 00 
    fbaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbae:	48 c7 80 e0 01 00 00 	movq   $0x0,0x1e0(%rax)
    fbb5:	00 00 00 00 
    fbb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbbd:	48 c7 80 e8 01 00 00 	movq   $0x0,0x1e8(%rax)
    fbc4:	00 00 00 00 
    fbc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbcc:	48 c7 80 f0 01 00 00 	movq   $0x0,0x1f0(%rax)
    fbd3:	00 00 00 00 
    fbd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbdb:	48 c7 80 f8 01 00 00 	movq   $0x0,0x1f8(%rax)
    fbe2:	00 00 00 00 
    fbe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbea:	48 c7 80 00 02 00 00 	movq   $0x0,0x200(%rax)
    fbf1:	00 00 00 00 
    fbf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbf9:	48 c7 80 08 02 00 00 	movq   $0x0,0x208(%rax)
    fc00:	00 00 00 00 
    fc04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc08:	48 c7 80 10 02 00 00 	movq   $0x0,0x210(%rax)
    fc0f:	00 00 00 00 
    fc13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc17:	48 c7 80 18 02 00 00 	movq   $0x0,0x218(%rax)
    fc1e:	00 00 00 00 
    fc22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc26:	48 c7 80 20 02 00 00 	movq   $0x0,0x220(%rax)
    fc2d:	00 00 00 00 
    fc31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc35:	48 c7 80 28 02 00 00 	movq   $0x0,0x228(%rax)
    fc3c:	00 00 00 00 
    fc40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc44:	48 c7 80 30 02 00 00 	movq   $0x0,0x230(%rax)
    fc4b:	00 00 00 00 
    fc4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc53:	48 c7 80 38 02 00 00 	movq   $0x0,0x238(%rax)
    fc5a:	00 00 00 00 
    fc5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc62:	48 c7 80 40 02 00 00 	movq   $0x0,0x240(%rax)
    fc69:	00 00 00 00 
    fc6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc71:	48 c7 80 48 02 00 00 	movq   $0x0,0x248(%rax)
    fc78:	00 00 00 00 
    fc7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc80:	48 c7 80 50 02 00 00 	movq   $0x0,0x250(%rax)
    fc87:	00 00 00 00 
    fc8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc8f:	48 c7 80 58 02 00 00 	movq   $0x0,0x258(%rax)
    fc96:	00 00 00 00 
    fc9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc9e:	48 c7 80 60 02 00 00 	movq   $0x0,0x260(%rax)
    fca5:	00 00 00 00 
    fca9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcad:	48 c7 80 68 02 00 00 	movq   $0x0,0x268(%rax)
    fcb4:	00 00 00 00 
    fcb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcbc:	48 c7 80 70 02 00 00 	movq   $0x0,0x270(%rax)
    fcc3:	00 00 00 00 
    fcc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fccb:	48 c7 80 78 02 00 00 	movq   $0x0,0x278(%rax)
    fcd2:	00 00 00 00 
    fcd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcda:	48 c7 80 80 02 00 00 	movq   $0x0,0x280(%rax)
    fce1:	00 00 00 00 
    fce5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fce9:	48 c7 80 88 02 00 00 	movq   $0x0,0x288(%rax)
    fcf0:	00 00 00 00 
    fcf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcf8:	48 c7 80 90 02 00 00 	movq   $0x0,0x290(%rax)
    fcff:	00 00 00 00 
    fd03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd07:	48 c7 80 98 02 00 00 	movq   $0x0,0x298(%rax)
    fd0e:	00 00 00 00 
    fd12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd16:	48 c7 80 a0 02 00 00 	movq   $0x0,0x2a0(%rax)
    fd1d:	00 00 00 00 
    fd21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd25:	48 c7 80 a8 02 00 00 	movq   $0x0,0x2a8(%rax)
    fd2c:	00 00 00 00 
    fd30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd34:	48 c7 80 b0 02 00 00 	movq   $0x0,0x2b0(%rax)
    fd3b:	00 00 00 00 
    fd3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd43:	48 c7 80 b8 02 00 00 	movq   $0x0,0x2b8(%rax)
    fd4a:	00 00 00 00 
    fd4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd52:	48 c7 80 c0 02 00 00 	movq   $0x0,0x2c0(%rax)
    fd59:	00 00 00 00 
    fd5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd61:	48 c7 80 c8 02 00 00 	movq   $0x0,0x2c8(%rax)
    fd68:	00 00 00 00 
    fd6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd70:	48 c7 80 d0 02 00 00 	movq   $0x0,0x2d0(%rax)
    fd77:	00 00 00 00 
    fd7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd7f:	48 c7 80 d8 02 00 00 	movq   $0x0,0x2d8(%rax)
    fd86:	00 00 00 00 
    fd8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd8e:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
    fd95:	00 00 00 00 
    fd99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd9d:	48 c7 80 e8 02 00 00 	movq   $0x0,0x2e8(%rax)
    fda4:	00 00 00 00 
    fda8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdac:	48 c7 80 f0 02 00 00 	movq   $0x0,0x2f0(%rax)
    fdb3:	00 00 00 00 
    fdb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdbb:	48 c7 80 f8 02 00 00 	movq   $0x0,0x2f8(%rax)
    fdc2:	00 00 00 00 
    fdc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdca:	48 c7 80 00 03 00 00 	movq   $0x0,0x300(%rax)
    fdd1:	00 00 00 00 
    fdd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdd9:	48 c7 80 08 03 00 00 	movq   $0x0,0x308(%rax)
    fde0:	00 00 00 00 
    fde4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fde8:	48 c7 80 10 03 00 00 	movq   $0x0,0x310(%rax)
    fdef:	00 00 00 00 
    fdf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdf7:	48 c7 80 18 03 00 00 	movq   $0x0,0x318(%rax)
    fdfe:	00 00 00 00 
    fe02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe06:	48 c7 80 20 03 00 00 	movq   $0x0,0x320(%rax)
    fe0d:	00 00 00 00 
    fe11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe15:	48 c7 80 28 03 00 00 	movq   $0x0,0x328(%rax)
    fe1c:	00 00 00 00 
    fe20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe24:	48 c7 80 30 03 00 00 	movq   $0x0,0x330(%rax)
    fe2b:	00 00 00 00 
    fe2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe33:	48 c7 80 38 03 00 00 	movq   $0x0,0x338(%rax)
    fe3a:	00 00 00 00 
    fe3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe42:	48 c7 80 40 03 00 00 	movq   $0x0,0x340(%rax)
    fe49:	00 00 00 00 
    fe4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe51:	48 c7 80 48 03 00 00 	movq   $0x0,0x348(%rax)
    fe58:	00 00 00 00 
    fe5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe60:	48 c7 80 50 03 00 00 	movq   $0x0,0x350(%rax)
    fe67:	00 00 00 00 
    fe6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe6f:	48 c7 80 58 03 00 00 	movq   $0x0,0x358(%rax)
    fe76:	00 00 00 00 
    fe7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe7e:	48 c7 80 60 03 00 00 	movq   $0x0,0x360(%rax)
    fe85:	00 00 00 00 
    fe89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe8d:	48 c7 80 68 03 00 00 	movq   $0x0,0x368(%rax)
    fe94:	00 00 00 00 
    fe98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe9c:	48 c7 80 70 03 00 00 	movq   $0x0,0x370(%rax)
    fea3:	00 00 00 00 
    fea7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    feab:	48 c7 80 78 03 00 00 	movq   $0x0,0x378(%rax)
    feb2:	00 00 00 00 
    feb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    feba:	48 c7 80 80 03 00 00 	movq   $0x0,0x380(%rax)
    fec1:	00 00 00 00 
    fec5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fec9:	48 c7 80 88 03 00 00 	movq   $0x0,0x388(%rax)
    fed0:	00 00 00 00 
    fed4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fed8:	48 c7 80 90 03 00 00 	movq   $0x0,0x390(%rax)
    fedf:	00 00 00 00 
    fee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fee7:	48 c7 80 98 03 00 00 	movq   $0x0,0x398(%rax)
    feee:	00 00 00 00 
    fef2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fef6:	48 c7 80 a0 03 00 00 	movq   $0x0,0x3a0(%rax)
    fefd:	00 00 00 00 
    ff01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff05:	48 c7 80 a8 03 00 00 	movq   $0x0,0x3a8(%rax)
    ff0c:	00 00 00 00 
    ff10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff14:	48 c7 80 b0 03 00 00 	movq   $0x0,0x3b0(%rax)
    ff1b:	00 00 00 00 
    ff1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff23:	48 c7 80 b8 03 00 00 	movq   $0x0,0x3b8(%rax)
    ff2a:	00 00 00 00 
    ff2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff32:	48 c7 80 c0 03 00 00 	movq   $0x0,0x3c0(%rax)
    ff39:	00 00 00 00 
    ff3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff41:	48 c7 80 c8 03 00 00 	movq   $0x0,0x3c8(%rax)
    ff48:	00 00 00 00 
    ff4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff50:	48 c7 80 d0 03 00 00 	movq   $0x0,0x3d0(%rax)
    ff57:	00 00 00 00 
    ff5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff5f:	48 c7 80 d8 03 00 00 	movq   $0x0,0x3d8(%rax)
    ff66:	00 00 00 00 
    ff6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff6e:	48 c7 80 e0 03 00 00 	movq   $0x0,0x3e0(%rax)
    ff75:	00 00 00 00 
    ff79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff7d:	48 c7 80 e8 03 00 00 	movq   $0x0,0x3e8(%rax)
    ff84:	00 00 00 00 
    ff88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff8c:	48 c7 80 f0 03 00 00 	movq   $0x0,0x3f0(%rax)
    ff93:	00 00 00 00 
    ff97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff9b:	48 c7 80 f8 03 00 00 	movq   $0x0,0x3f8(%rax)
    ffa2:	00 00 00 00 
    ffa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffaa:	48 c7 80 00 04 00 00 	movq   $0x0,0x400(%rax)
    ffb1:	00 00 00 00 
    ffb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffb9:	48 c7 80 08 04 00 00 	movq   $0x0,0x408(%rax)
    ffc0:	00 00 00 00 
    ffc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffc8:	48 c7 80 10 04 00 00 	movq   $0x0,0x410(%rax)
    ffcf:	00 00 00 00 
    ffd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffd7:	48 c7 80 18 04 00 00 	movq   $0x0,0x418(%rax)
    ffde:	00 00 00 00 
    ffe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffe6:	48 c7 80 20 04 00 00 	movq   $0x0,0x420(%rax)
    ffed:	00 00 00 00 
    fff1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fff5:	48 c7 80 28 04 00 00 	movq   $0x0,0x428(%rax)
    fffc:	00 00 00 00 
   10000:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10004:	48 c7 80 30 04 00 00 	movq   $0x0,0x430(%rax)
   1000b:	00 00 00 00 
   1000f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10013:	48 c7 80 38 04 00 00 	movq   $0x0,0x438(%rax)
   1001a:	00 00 00 00 
   1001e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10022:	48 c7 80 40 04 00 00 	movq   $0x0,0x440(%rax)
   10029:	00 00 00 00 
   1002d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10031:	48 c7 80 48 04 00 00 	movq   $0x0,0x448(%rax)
   10038:	00 00 00 00 
   1003c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10040:	48 c7 80 50 04 00 00 	movq   $0x0,0x450(%rax)
   10047:	00 00 00 00 
   1004b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1004f:	48 c7 80 58 04 00 00 	movq   $0x0,0x458(%rax)
   10056:	00 00 00 00 
   1005a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1005e:	48 c7 80 60 04 00 00 	movq   $0x0,0x460(%rax)
   10065:	00 00 00 00 
   10069:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1006d:	48 c7 80 68 04 00 00 	movq   $0x0,0x468(%rax)
   10074:	00 00 00 00 
   10078:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1007c:	48 c7 80 70 04 00 00 	movq   $0x0,0x470(%rax)
   10083:	00 00 00 00 
   10087:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1008b:	48 c7 80 78 04 00 00 	movq   $0x0,0x478(%rax)
   10092:	00 00 00 00 
   10096:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1009a:	48 c7 80 80 04 00 00 	movq   $0x0,0x480(%rax)
   100a1:	00 00 00 00 
   100a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100a9:	48 c7 80 88 04 00 00 	movq   $0x0,0x488(%rax)
   100b0:	00 00 00 00 
   100b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100b8:	48 c7 80 90 04 00 00 	movq   $0x0,0x490(%rax)
   100bf:	00 00 00 00 
   100c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100c7:	48 c7 80 98 04 00 00 	movq   $0x0,0x498(%rax)
   100ce:	00 00 00 00 
   100d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100d6:	48 c7 80 a0 04 00 00 	movq   $0x0,0x4a0(%rax)
   100dd:	00 00 00 00 
   100e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100e5:	48 c7 80 a8 04 00 00 	movq   $0x0,0x4a8(%rax)
   100ec:	00 00 00 00 
   100f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100f4:	48 c7 80 b0 04 00 00 	movq   $0x0,0x4b0(%rax)
   100fb:	00 00 00 00 
   100ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10103:	48 c7 80 b8 04 00 00 	movq   $0x0,0x4b8(%rax)
   1010a:	00 00 00 00 
   1010e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10112:	48 c7 80 c0 04 00 00 	movq   $0x0,0x4c0(%rax)
   10119:	00 00 00 00 
   1011d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10121:	48 c7 80 c8 04 00 00 	movq   $0x0,0x4c8(%rax)
   10128:	00 00 00 00 
   1012c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10130:	48 c7 80 d0 04 00 00 	movq   $0x0,0x4d0(%rax)
   10137:	00 00 00 00 
   1013b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1013f:	48 c7 80 d8 04 00 00 	movq   $0x0,0x4d8(%rax)
   10146:	00 00 00 00 
   1014a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1014e:	48 c7 80 e0 04 00 00 	movq   $0x0,0x4e0(%rax)
   10155:	00 00 00 00 
   10159:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1015d:	48 c7 80 e8 04 00 00 	movq   $0x0,0x4e8(%rax)
   10164:	00 00 00 00 
   10168:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1016c:	48 c7 80 f0 04 00 00 	movq   $0x0,0x4f0(%rax)
   10173:	00 00 00 00 
   10177:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1017b:	48 c7 80 f8 04 00 00 	movq   $0x0,0x4f8(%rax)
   10182:	00 00 00 00 
   10186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1018a:	48 c7 80 00 05 00 00 	movq   $0x0,0x500(%rax)
   10191:	00 00 00 00 
   10195:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10199:	48 c7 80 08 05 00 00 	movq   $0x0,0x508(%rax)
   101a0:	00 00 00 00 
   101a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101a8:	48 c7 80 10 05 00 00 	movq   $0x0,0x510(%rax)
   101af:	00 00 00 00 
   101b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101b7:	48 c7 80 18 05 00 00 	movq   $0x0,0x518(%rax)
   101be:	00 00 00 00 
   101c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101c6:	48 c7 80 20 05 00 00 	movq   $0x0,0x520(%rax)
   101cd:	00 00 00 00 
   101d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101d5:	48 c7 80 28 05 00 00 	movq   $0x0,0x528(%rax)
   101dc:	00 00 00 00 
   101e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101e4:	48 c7 80 30 05 00 00 	movq   $0x0,0x530(%rax)
   101eb:	00 00 00 00 
   101ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101f3:	48 c7 80 38 05 00 00 	movq   $0x0,0x538(%rax)
   101fa:	00 00 00 00 
   101fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10202:	48 c7 80 40 05 00 00 	movq   $0x0,0x540(%rax)
   10209:	00 00 00 00 
   1020d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10211:	48 c7 80 48 05 00 00 	movq   $0x0,0x548(%rax)
   10218:	00 00 00 00 
   1021c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10220:	48 c7 80 50 05 00 00 	movq   $0x0,0x550(%rax)
   10227:	00 00 00 00 
   1022b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1022f:	48 c7 80 58 05 00 00 	movq   $0x0,0x558(%rax)
   10236:	00 00 00 00 
   1023a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1023e:	48 c7 80 60 05 00 00 	movq   $0x0,0x560(%rax)
   10245:	00 00 00 00 
   10249:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1024d:	48 c7 80 68 05 00 00 	movq   $0x0,0x568(%rax)
   10254:	00 00 00 00 
   10258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1025c:	48 c7 80 70 05 00 00 	movq   $0x0,0x570(%rax)
   10263:	00 00 00 00 
   10267:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1026b:	48 c7 80 78 05 00 00 	movq   $0x0,0x578(%rax)
   10272:	00 00 00 00 
   10276:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1027a:	48 c7 80 80 05 00 00 	movq   $0x0,0x580(%rax)
   10281:	00 00 00 00 
   10285:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10289:	48 c7 80 88 05 00 00 	movq   $0x0,0x588(%rax)
   10290:	00 00 00 00 
   10294:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10298:	48 c7 80 90 05 00 00 	movq   $0x0,0x590(%rax)
   1029f:	00 00 00 00 
   102a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102a7:	48 c7 80 98 05 00 00 	movq   $0x0,0x598(%rax)
   102ae:	00 00 00 00 
   102b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102b6:	48 c7 80 a0 05 00 00 	movq   $0x0,0x5a0(%rax)
   102bd:	00 00 00 00 
   102c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102c5:	48 c7 80 a8 05 00 00 	movq   $0x0,0x5a8(%rax)
   102cc:	00 00 00 00 
   102d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102d4:	48 c7 80 b0 05 00 00 	movq   $0x0,0x5b0(%rax)
   102db:	00 00 00 00 
   102df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102e3:	48 c7 80 b8 05 00 00 	movq   $0x0,0x5b8(%rax)
   102ea:	00 00 00 00 
   102ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102f2:	48 c7 80 c0 05 00 00 	movq   $0x0,0x5c0(%rax)
   102f9:	00 00 00 00 
   102fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10301:	48 c7 80 c8 05 00 00 	movq   $0x0,0x5c8(%rax)
   10308:	00 00 00 00 
   1030c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10310:	48 c7 80 d0 05 00 00 	movq   $0x0,0x5d0(%rax)
   10317:	00 00 00 00 
   1031b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1031f:	48 c7 80 d8 05 00 00 	movq   $0x0,0x5d8(%rax)
   10326:	00 00 00 00 
   1032a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1032e:	48 c7 80 e0 05 00 00 	movq   $0x0,0x5e0(%rax)
   10335:	00 00 00 00 
   10339:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1033d:	48 c7 80 e8 05 00 00 	movq   $0x0,0x5e8(%rax)
   10344:	00 00 00 00 
   10348:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1034c:	48 c7 80 f0 05 00 00 	movq   $0x0,0x5f0(%rax)
   10353:	00 00 00 00 
   10357:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1035b:	48 c7 80 f8 05 00 00 	movq   $0x0,0x5f8(%rax)
   10362:	00 00 00 00 
   10366:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1036a:	48 c7 80 00 06 00 00 	movq   $0x0,0x600(%rax)
   10371:	00 00 00 00 
   10375:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10379:	48 c7 80 08 06 00 00 	movq   $0x0,0x608(%rax)
   10380:	00 00 00 00 
   10384:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10388:	48 c7 80 10 06 00 00 	movq   $0x0,0x610(%rax)
   1038f:	00 00 00 00 
   10393:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10397:	48 c7 80 18 06 00 00 	movq   $0x0,0x618(%rax)
   1039e:	00 00 00 00 
   103a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103a6:	48 c7 80 20 06 00 00 	movq   $0x0,0x620(%rax)
   103ad:	00 00 00 00 
   103b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103b5:	48 c7 80 28 06 00 00 	movq   $0x0,0x628(%rax)
   103bc:	00 00 00 00 
   103c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103c4:	48 c7 80 30 06 00 00 	movq   $0x0,0x630(%rax)
   103cb:	00 00 00 00 
   103cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103d3:	48 c7 80 38 06 00 00 	movq   $0x0,0x638(%rax)
   103da:	00 00 00 00 
   103de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103e2:	48 c7 80 40 06 00 00 	movq   $0x0,0x640(%rax)
   103e9:	00 00 00 00 
   103ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103f1:	48 c7 80 48 06 00 00 	movq   $0x0,0x648(%rax)
   103f8:	00 00 00 00 
   103fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10400:	48 c7 80 50 06 00 00 	movq   $0x0,0x650(%rax)
   10407:	00 00 00 00 
   1040b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1040f:	48 c7 80 58 06 00 00 	movq   $0x0,0x658(%rax)
   10416:	00 00 00 00 
   1041a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1041e:	48 c7 80 60 06 00 00 	movq   $0x0,0x660(%rax)
   10425:	00 00 00 00 
   10429:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1042d:	48 c7 80 68 06 00 00 	movq   $0x0,0x668(%rax)
   10434:	00 00 00 00 
   10438:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1043c:	48 c7 80 70 06 00 00 	movq   $0x0,0x670(%rax)
   10443:	00 00 00 00 
   10447:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1044b:	48 c7 80 78 06 00 00 	movq   $0x0,0x678(%rax)
   10452:	00 00 00 00 
   10456:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1045a:	48 c7 80 80 06 00 00 	movq   $0x0,0x680(%rax)
   10461:	00 00 00 00 
   10465:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10469:	48 c7 80 88 06 00 00 	movq   $0x0,0x688(%rax)
   10470:	00 00 00 00 
   10474:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10478:	48 c7 80 90 06 00 00 	movq   $0x0,0x690(%rax)
   1047f:	00 00 00 00 
   10483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10487:	48 c7 80 98 06 00 00 	movq   $0x0,0x698(%rax)
   1048e:	00 00 00 00 
   10492:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10496:	48 c7 80 a0 06 00 00 	movq   $0x0,0x6a0(%rax)
   1049d:	00 00 00 00 
   104a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104a5:	48 c7 80 a8 06 00 00 	movq   $0x0,0x6a8(%rax)
   104ac:	00 00 00 00 
   104b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104b4:	48 c7 80 b0 06 00 00 	movq   $0x0,0x6b0(%rax)
   104bb:	00 00 00 00 
   104bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104c3:	48 c7 80 b8 06 00 00 	movq   $0x0,0x6b8(%rax)
   104ca:	00 00 00 00 
   104ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104d2:	48 c7 80 c0 06 00 00 	movq   $0x0,0x6c0(%rax)
   104d9:	00 00 00 00 
   104dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104e1:	48 c7 80 c8 06 00 00 	movq   $0x0,0x6c8(%rax)
   104e8:	00 00 00 00 
   104ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104f0:	48 c7 80 d0 06 00 00 	movq   $0x0,0x6d0(%rax)
   104f7:	00 00 00 00 
   104fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104ff:	48 c7 80 d8 06 00 00 	movq   $0x0,0x6d8(%rax)
   10506:	00 00 00 00 
   1050a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1050e:	48 c7 80 e0 06 00 00 	movq   $0x0,0x6e0(%rax)
   10515:	00 00 00 00 
   10519:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1051d:	48 c7 80 e8 06 00 00 	movq   $0x0,0x6e8(%rax)
   10524:	00 00 00 00 
   10528:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1052c:	48 c7 80 f0 06 00 00 	movq   $0x0,0x6f0(%rax)
   10533:	00 00 00 00 
   10537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1053b:	48 c7 80 f8 06 00 00 	movq   $0x0,0x6f8(%rax)
   10542:	00 00 00 00 
   10546:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1054a:	48 c7 80 00 07 00 00 	movq   $0x0,0x700(%rax)
   10551:	00 00 00 00 
   10555:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10559:	48 c7 80 08 07 00 00 	movq   $0x0,0x708(%rax)
   10560:	00 00 00 00 
   10564:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10568:	48 c7 80 10 07 00 00 	movq   $0x0,0x710(%rax)
   1056f:	00 00 00 00 
   10573:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10577:	48 c7 80 18 07 00 00 	movq   $0x0,0x718(%rax)
   1057e:	00 00 00 00 
   10582:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10586:	48 c7 80 20 07 00 00 	movq   $0x0,0x720(%rax)
   1058d:	00 00 00 00 
   10591:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10595:	48 c7 80 28 07 00 00 	movq   $0x0,0x728(%rax)
   1059c:	00 00 00 00 
   105a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105a4:	48 c7 80 30 07 00 00 	movq   $0x0,0x730(%rax)
   105ab:	00 00 00 00 
   105af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105b3:	48 c7 80 38 07 00 00 	movq   $0x0,0x738(%rax)
   105ba:	00 00 00 00 
   105be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105c2:	48 c7 80 40 07 00 00 	movq   $0x0,0x740(%rax)
   105c9:	00 00 00 00 
   105cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105d1:	48 c7 80 48 07 00 00 	movq   $0x0,0x748(%rax)
   105d8:	00 00 00 00 
   105dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105e0:	48 c7 80 50 07 00 00 	movq   $0x0,0x750(%rax)
   105e7:	00 00 00 00 
   105eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105ef:	48 c7 80 58 07 00 00 	movq   $0x0,0x758(%rax)
   105f6:	00 00 00 00 
   105fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105fe:	48 c7 80 60 07 00 00 	movq   $0x0,0x760(%rax)
   10605:	00 00 00 00 
   10609:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1060d:	48 c7 80 68 07 00 00 	movq   $0x0,0x768(%rax)
   10614:	00 00 00 00 
   10618:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1061c:	48 c7 80 70 07 00 00 	movq   $0x0,0x770(%rax)
   10623:	00 00 00 00 
   10627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1062b:	48 c7 80 78 07 00 00 	movq   $0x0,0x778(%rax)
   10632:	00 00 00 00 
   10636:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1063a:	48 c7 80 80 07 00 00 	movq   $0x0,0x780(%rax)
   10641:	00 00 00 00 
   10645:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10649:	48 c7 80 88 07 00 00 	movq   $0x0,0x788(%rax)
   10650:	00 00 00 00 
   10654:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10658:	48 c7 80 90 07 00 00 	movq   $0x0,0x790(%rax)
   1065f:	00 00 00 00 
   10663:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10667:	48 c7 80 98 07 00 00 	movq   $0x0,0x798(%rax)
   1066e:	00 00 00 00 
   10672:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10676:	48 c7 80 a0 07 00 00 	movq   $0x0,0x7a0(%rax)
   1067d:	00 00 00 00 
   10681:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10685:	48 c7 80 a8 07 00 00 	movq   $0x0,0x7a8(%rax)
   1068c:	00 00 00 00 
   10690:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10694:	48 c7 80 b0 07 00 00 	movq   $0x0,0x7b0(%rax)
   1069b:	00 00 00 00 
   1069f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106a3:	48 c7 80 b8 07 00 00 	movq   $0x0,0x7b8(%rax)
   106aa:	00 00 00 00 
   106ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106b2:	48 c7 80 c0 07 00 00 	movq   $0x0,0x7c0(%rax)
   106b9:	00 00 00 00 
   106bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106c1:	48 c7 80 c8 07 00 00 	movq   $0x0,0x7c8(%rax)
   106c8:	00 00 00 00 
   106cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106d0:	48 c7 80 d0 07 00 00 	movq   $0x0,0x7d0(%rax)
   106d7:	00 00 00 00 
   106db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106df:	48 c7 80 d8 07 00 00 	movq   $0x0,0x7d8(%rax)
   106e6:	00 00 00 00 
   106ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106ee:	48 c7 80 e0 07 00 00 	movq   $0x0,0x7e0(%rax)
   106f5:	00 00 00 00 
   106f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106fd:	48 c7 80 e8 07 00 00 	movq   $0x0,0x7e8(%rax)
   10704:	00 00 00 00 
   10708:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1070c:	48 c7 80 f0 07 00 00 	movq   $0x0,0x7f0(%rax)
   10713:	00 00 00 00 
   10717:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1071b:	48 c7 80 f8 07 00 00 	movq   $0x0,0x7f8(%rax)
   10722:	00 00 00 00 
   10726:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1072a:	48 c7 80 00 08 00 00 	movq   $0x0,0x800(%rax)
   10731:	00 00 00 00 
   10735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10739:	48 c7 80 08 08 00 00 	movq   $0x0,0x808(%rax)
   10740:	00 00 00 00 
   10744:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10748:	48 c7 80 10 08 00 00 	movq   $0x0,0x810(%rax)
   1074f:	00 00 00 00 
   10753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10757:	48 c7 80 18 08 00 00 	movq   $0x0,0x818(%rax)
   1075e:	00 00 00 00 
   10762:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10766:	48 c7 80 20 08 00 00 	movq   $0x0,0x820(%rax)
   1076d:	00 00 00 00 
   10771:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10775:	48 c7 80 28 08 00 00 	movq   $0x0,0x828(%rax)
   1077c:	00 00 00 00 
   10780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10784:	48 c7 80 30 08 00 00 	movq   $0x0,0x830(%rax)
   1078b:	00 00 00 00 
   1078f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10793:	48 c7 80 38 08 00 00 	movq   $0x0,0x838(%rax)
   1079a:	00 00 00 00 
   1079e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107a2:	48 c7 80 40 08 00 00 	movq   $0x0,0x840(%rax)
   107a9:	00 00 00 00 
   107ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107b1:	48 c7 80 48 08 00 00 	movq   $0x0,0x848(%rax)
   107b8:	00 00 00 00 
   107bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107c0:	48 c7 80 50 08 00 00 	movq   $0x0,0x850(%rax)
   107c7:	00 00 00 00 
   107cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107cf:	48 c7 80 58 08 00 00 	movq   $0x0,0x858(%rax)
   107d6:	00 00 00 00 
   107da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107de:	48 c7 80 60 08 00 00 	movq   $0x0,0x860(%rax)
   107e5:	00 00 00 00 
   107e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107ed:	48 c7 80 68 08 00 00 	movq   $0x0,0x868(%rax)
   107f4:	00 00 00 00 
   107f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107fc:	48 c7 80 70 08 00 00 	movq   $0x0,0x870(%rax)
   10803:	00 00 00 00 
   10807:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1080b:	48 c7 80 78 08 00 00 	movq   $0x0,0x878(%rax)
   10812:	00 00 00 00 
   10816:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1081a:	48 c7 80 80 08 00 00 	movq   $0x0,0x880(%rax)
   10821:	00 00 00 00 
   10825:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10829:	48 c7 80 88 08 00 00 	movq   $0x0,0x888(%rax)
   10830:	00 00 00 00 
   10834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10838:	48 c7 80 90 08 00 00 	movq   $0x0,0x890(%rax)
   1083f:	00 00 00 00 
   10843:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10847:	48 c7 80 98 08 00 00 	movq   $0x0,0x898(%rax)
   1084e:	00 00 00 00 
   10852:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10856:	48 c7 80 a0 08 00 00 	movq   $0x0,0x8a0(%rax)
   1085d:	00 00 00 00 
   10861:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10865:	48 c7 80 a8 08 00 00 	movq   $0x0,0x8a8(%rax)
   1086c:	00 00 00 00 
   10870:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10874:	48 c7 80 b0 08 00 00 	movq   $0x0,0x8b0(%rax)
   1087b:	00 00 00 00 
   1087f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10883:	48 c7 80 b8 08 00 00 	movq   $0x0,0x8b8(%rax)
   1088a:	00 00 00 00 
   1088e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10892:	48 c7 80 c0 08 00 00 	movq   $0x0,0x8c0(%rax)
   10899:	00 00 00 00 
   1089d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108a1:	48 c7 80 c8 08 00 00 	movq   $0x0,0x8c8(%rax)
   108a8:	00 00 00 00 
   108ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108b0:	48 c7 80 d0 08 00 00 	movq   $0x0,0x8d0(%rax)
   108b7:	00 00 00 00 
   108bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108bf:	48 c7 80 d8 08 00 00 	movq   $0x0,0x8d8(%rax)
   108c6:	00 00 00 00 
   108ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108ce:	48 c7 80 e0 08 00 00 	movq   $0x0,0x8e0(%rax)
   108d5:	00 00 00 00 
   108d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108dd:	48 c7 80 e8 08 00 00 	movq   $0x0,0x8e8(%rax)
   108e4:	00 00 00 00 
   108e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108ec:	48 c7 80 f0 08 00 00 	movq   $0x0,0x8f0(%rax)
   108f3:	00 00 00 00 
   108f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108fb:	48 c7 80 f8 08 00 00 	movq   $0x0,0x8f8(%rax)
   10902:	00 00 00 00 
   10906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1090a:	48 c7 80 00 09 00 00 	movq   $0x0,0x900(%rax)
   10911:	00 00 00 00 
   10915:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10919:	48 c7 80 08 09 00 00 	movq   $0x0,0x908(%rax)
   10920:	00 00 00 00 
   10924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10928:	48 c7 80 10 09 00 00 	movq   $0x0,0x910(%rax)
   1092f:	00 00 00 00 
   10933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10937:	48 c7 80 18 09 00 00 	movq   $0x0,0x918(%rax)
   1093e:	00 00 00 00 
   10942:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10946:	48 c7 80 20 09 00 00 	movq   $0x0,0x920(%rax)
   1094d:	00 00 00 00 
   10951:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10955:	48 c7 80 28 09 00 00 	movq   $0x0,0x928(%rax)
   1095c:	00 00 00 00 
   10960:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10964:	48 c7 80 30 09 00 00 	movq   $0x0,0x930(%rax)
   1096b:	00 00 00 00 
   1096f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10973:	48 c7 80 38 09 00 00 	movq   $0x0,0x938(%rax)
   1097a:	00 00 00 00 
   1097e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10982:	48 c7 80 40 09 00 00 	movq   $0x0,0x940(%rax)
   10989:	00 00 00 00 
   1098d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10991:	48 c7 80 48 09 00 00 	movq   $0x0,0x948(%rax)
   10998:	00 00 00 00 
   1099c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109a0:	48 c7 80 50 09 00 00 	movq   $0x0,0x950(%rax)
   109a7:	00 00 00 00 
   109ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109af:	48 c7 80 58 09 00 00 	movq   $0x0,0x958(%rax)
   109b6:	00 00 00 00 
   109ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109be:	48 c7 80 60 09 00 00 	movq   $0x0,0x960(%rax)
   109c5:	00 00 00 00 
   109c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109cd:	48 c7 80 68 09 00 00 	movq   $0x0,0x968(%rax)
   109d4:	00 00 00 00 
   109d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109dc:	48 c7 80 70 09 00 00 	movq   $0x0,0x970(%rax)
   109e3:	00 00 00 00 
   109e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109eb:	48 c7 80 78 09 00 00 	movq   $0x0,0x978(%rax)
   109f2:	00 00 00 00 
   109f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109fa:	48 c7 80 80 09 00 00 	movq   $0x0,0x980(%rax)
   10a01:	00 00 00 00 
   10a05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a09:	48 c7 80 88 09 00 00 	movq   $0x0,0x988(%rax)
   10a10:	00 00 00 00 
   10a14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a18:	48 c7 80 90 09 00 00 	movq   $0x0,0x990(%rax)
   10a1f:	00 00 00 00 
   10a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a27:	48 c7 80 98 09 00 00 	movq   $0x0,0x998(%rax)
   10a2e:	00 00 00 00 
   10a32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a36:	48 c7 80 a0 09 00 00 	movq   $0x0,0x9a0(%rax)
   10a3d:	00 00 00 00 
   10a41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a45:	48 c7 80 a8 09 00 00 	movq   $0x0,0x9a8(%rax)
   10a4c:	00 00 00 00 
   10a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a54:	48 c7 80 b0 09 00 00 	movq   $0x0,0x9b0(%rax)
   10a5b:	00 00 00 00 
   10a5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a63:	48 c7 80 b8 09 00 00 	movq   $0x0,0x9b8(%rax)
   10a6a:	00 00 00 00 
   10a6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a72:	48 c7 80 c0 09 00 00 	movq   $0x0,0x9c0(%rax)
   10a79:	00 00 00 00 
   10a7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a81:	48 c7 80 c8 09 00 00 	movq   $0x0,0x9c8(%rax)
   10a88:	00 00 00 00 
   10a8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a90:	48 c7 80 d0 09 00 00 	movq   $0x0,0x9d0(%rax)
   10a97:	00 00 00 00 
   10a9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a9f:	48 c7 80 d8 09 00 00 	movq   $0x0,0x9d8(%rax)
   10aa6:	00 00 00 00 
   10aaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10aae:	48 c7 80 e0 09 00 00 	movq   $0x0,0x9e0(%rax)
   10ab5:	00 00 00 00 
   10ab9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10abd:	48 c7 80 e8 09 00 00 	movq   $0x0,0x9e8(%rax)
   10ac4:	00 00 00 00 
   10ac8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10acc:	48 c7 80 f0 09 00 00 	movq   $0x0,0x9f0(%rax)
   10ad3:	00 00 00 00 
   10ad7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10adb:	48 c7 80 f8 09 00 00 	movq   $0x0,0x9f8(%rax)
   10ae2:	00 00 00 00 
   10ae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10aea:	48 c7 80 00 0a 00 00 	movq   $0x0,0xa00(%rax)
   10af1:	00 00 00 00 
   10af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10af9:	48 c7 80 08 0a 00 00 	movq   $0x0,0xa08(%rax)
   10b00:	00 00 00 00 
   10b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b08:	48 c7 80 10 0a 00 00 	movq   $0x0,0xa10(%rax)
   10b0f:	00 00 00 00 
   10b13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b17:	48 c7 80 18 0a 00 00 	movq   $0x0,0xa18(%rax)
   10b1e:	00 00 00 00 
   10b22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b26:	48 c7 80 20 0a 00 00 	movq   $0x0,0xa20(%rax)
   10b2d:	00 00 00 00 
   10b31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b35:	48 c7 80 28 0a 00 00 	movq   $0x0,0xa28(%rax)
   10b3c:	00 00 00 00 
   10b40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b44:	48 c7 80 30 0a 00 00 	movq   $0x0,0xa30(%rax)
   10b4b:	00 00 00 00 
   10b4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b53:	48 c7 80 38 0a 00 00 	movq   $0x0,0xa38(%rax)
   10b5a:	00 00 00 00 
   10b5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b62:	48 c7 80 40 0a 00 00 	movq   $0x0,0xa40(%rax)
   10b69:	00 00 00 00 
   10b6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b71:	48 c7 80 48 0a 00 00 	movq   $0x0,0xa48(%rax)
   10b78:	00 00 00 00 
   10b7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b80:	48 c7 80 50 0a 00 00 	movq   $0x0,0xa50(%rax)
   10b87:	00 00 00 00 
   10b8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b8f:	48 c7 80 58 0a 00 00 	movq   $0x0,0xa58(%rax)
   10b96:	00 00 00 00 
   10b9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b9e:	48 c7 80 60 0a 00 00 	movq   $0x0,0xa60(%rax)
   10ba5:	00 00 00 00 
   10ba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bad:	48 c7 80 68 0a 00 00 	movq   $0x0,0xa68(%rax)
   10bb4:	00 00 00 00 
   10bb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bbc:	48 c7 80 70 0a 00 00 	movq   $0x0,0xa70(%rax)
   10bc3:	00 00 00 00 
   10bc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bcb:	48 c7 80 78 0a 00 00 	movq   $0x0,0xa78(%rax)
   10bd2:	00 00 00 00 
   10bd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bda:	48 c7 80 80 0a 00 00 	movq   $0x0,0xa80(%rax)
   10be1:	00 00 00 00 
   10be5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10be9:	48 c7 80 88 0a 00 00 	movq   $0x0,0xa88(%rax)
   10bf0:	00 00 00 00 
   10bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bf8:	48 c7 80 90 0a 00 00 	movq   $0x0,0xa90(%rax)
   10bff:	00 00 00 00 
   10c03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c07:	48 c7 80 98 0a 00 00 	movq   $0x0,0xa98(%rax)
   10c0e:	00 00 00 00 
   10c12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c16:	48 c7 80 a0 0a 00 00 	movq   $0x0,0xaa0(%rax)
   10c1d:	00 00 00 00 
   10c21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c25:	48 c7 80 a8 0a 00 00 	movq   $0x0,0xaa8(%rax)
   10c2c:	00 00 00 00 
   10c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c34:	48 c7 80 b0 0a 00 00 	movq   $0x0,0xab0(%rax)
   10c3b:	00 00 00 00 
   10c3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c43:	48 c7 80 b8 0a 00 00 	movq   $0x0,0xab8(%rax)
   10c4a:	00 00 00 00 
   10c4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c52:	48 c7 80 c0 0a 00 00 	movq   $0x0,0xac0(%rax)
   10c59:	00 00 00 00 
   10c5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c61:	48 c7 80 c8 0a 00 00 	movq   $0x0,0xac8(%rax)
   10c68:	00 00 00 00 
   10c6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c70:	48 c7 80 d0 0a 00 00 	movq   $0x0,0xad0(%rax)
   10c77:	00 00 00 00 
   10c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c7f:	48 c7 80 d8 0a 00 00 	movq   $0x0,0xad8(%rax)
   10c86:	00 00 00 00 
   10c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c8e:	48 c7 80 e0 0a 00 00 	movq   $0x0,0xae0(%rax)
   10c95:	00 00 00 00 
   10c99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c9d:	48 c7 80 e8 0a 00 00 	movq   $0x0,0xae8(%rax)
   10ca4:	00 00 00 00 
   10ca8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cac:	48 c7 80 f0 0a 00 00 	movq   $0x0,0xaf0(%rax)
   10cb3:	00 00 00 00 
   10cb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cbb:	48 c7 80 f8 0a 00 00 	movq   $0x0,0xaf8(%rax)
   10cc2:	00 00 00 00 
   10cc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cca:	48 c7 80 00 0b 00 00 	movq   $0x0,0xb00(%rax)
   10cd1:	00 00 00 00 
   10cd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cd9:	48 c7 80 08 0b 00 00 	movq   $0x0,0xb08(%rax)
   10ce0:	00 00 00 00 
   10ce4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ce8:	48 c7 80 10 0b 00 00 	movq   $0x0,0xb10(%rax)
   10cef:	00 00 00 00 
   10cf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cf7:	48 c7 80 18 0b 00 00 	movq   $0x0,0xb18(%rax)
   10cfe:	00 00 00 00 
   10d02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d06:	48 c7 80 20 0b 00 00 	movq   $0x0,0xb20(%rax)
   10d0d:	00 00 00 00 
   10d11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d15:	48 c7 80 28 0b 00 00 	movq   $0x0,0xb28(%rax)
   10d1c:	00 00 00 00 
   10d20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d24:	48 c7 80 30 0b 00 00 	movq   $0x0,0xb30(%rax)
   10d2b:	00 00 00 00 
   10d2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d33:	48 c7 80 38 0b 00 00 	movq   $0x0,0xb38(%rax)
   10d3a:	00 00 00 00 
   10d3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d42:	48 c7 80 40 0b 00 00 	movq   $0x0,0xb40(%rax)
   10d49:	00 00 00 00 
   10d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d51:	48 c7 80 48 0b 00 00 	movq   $0x0,0xb48(%rax)
   10d58:	00 00 00 00 
   10d5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d60:	48 c7 80 50 0b 00 00 	movq   $0x0,0xb50(%rax)
   10d67:	00 00 00 00 
   10d6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d6f:	48 c7 80 58 0b 00 00 	movq   $0x0,0xb58(%rax)
   10d76:	00 00 00 00 
   10d7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d7e:	48 c7 80 60 0b 00 00 	movq   $0x0,0xb60(%rax)
   10d85:	00 00 00 00 
   10d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d8d:	48 c7 80 68 0b 00 00 	movq   $0x0,0xb68(%rax)
   10d94:	00 00 00 00 
   10d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d9c:	48 c7 80 70 0b 00 00 	movq   $0x0,0xb70(%rax)
   10da3:	00 00 00 00 
   10da7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dab:	48 c7 80 78 0b 00 00 	movq   $0x0,0xb78(%rax)
   10db2:	00 00 00 00 
   10db6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dba:	48 c7 80 80 0b 00 00 	movq   $0x0,0xb80(%rax)
   10dc1:	00 00 00 00 
   10dc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dc9:	48 c7 80 88 0b 00 00 	movq   $0x0,0xb88(%rax)
   10dd0:	00 00 00 00 
   10dd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dd8:	48 c7 80 90 0b 00 00 	movq   $0x0,0xb90(%rax)
   10ddf:	00 00 00 00 
   10de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10de7:	48 c7 80 98 0b 00 00 	movq   $0x0,0xb98(%rax)
   10dee:	00 00 00 00 
   10df2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10df6:	48 c7 80 a0 0b 00 00 	movq   $0x0,0xba0(%rax)
   10dfd:	00 00 00 00 
   10e01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e05:	48 c7 80 a8 0b 00 00 	movq   $0x0,0xba8(%rax)
   10e0c:	00 00 00 00 
   10e10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e14:	48 c7 80 b0 0b 00 00 	movq   $0x0,0xbb0(%rax)
   10e1b:	00 00 00 00 
   10e1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e23:	48 c7 80 b8 0b 00 00 	movq   $0x0,0xbb8(%rax)
   10e2a:	00 00 00 00 
   10e2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e32:	48 c7 80 c0 0b 00 00 	movq   $0x0,0xbc0(%rax)
   10e39:	00 00 00 00 
   10e3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e41:	48 c7 80 c8 0b 00 00 	movq   $0x0,0xbc8(%rax)
   10e48:	00 00 00 00 
   10e4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e50:	48 c7 80 d0 0b 00 00 	movq   $0x0,0xbd0(%rax)
   10e57:	00 00 00 00 
   10e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e5f:	48 c7 80 d8 0b 00 00 	movq   $0x0,0xbd8(%rax)
   10e66:	00 00 00 00 
   10e6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e6e:	48 c7 80 e0 0b 00 00 	movq   $0x0,0xbe0(%rax)
   10e75:	00 00 00 00 
   10e79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e7d:	48 c7 80 e8 0b 00 00 	movq   $0x0,0xbe8(%rax)
   10e84:	00 00 00 00 
   10e88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e8c:	48 c7 80 f0 0b 00 00 	movq   $0x0,0xbf0(%rax)
   10e93:	00 00 00 00 
   10e97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e9b:	48 c7 80 f8 0b 00 00 	movq   $0x0,0xbf8(%rax)
   10ea2:	00 00 00 00 
   10ea6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10eaa:	48 c7 80 00 0c 00 00 	movq   $0x0,0xc00(%rax)
   10eb1:	00 00 00 00 
   10eb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10eb9:	48 c7 80 08 0c 00 00 	movq   $0x0,0xc08(%rax)
   10ec0:	00 00 00 00 
   10ec4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ec8:	48 c7 80 10 0c 00 00 	movq   $0x0,0xc10(%rax)
   10ecf:	00 00 00 00 
   10ed3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ed7:	48 c7 80 18 0c 00 00 	movq   $0x0,0xc18(%rax)
   10ede:	00 00 00 00 
   10ee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ee6:	48 c7 80 20 0c 00 00 	movq   $0x0,0xc20(%rax)
   10eed:	00 00 00 00 
   10ef1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ef5:	48 c7 80 28 0c 00 00 	movq   $0x0,0xc28(%rax)
   10efc:	00 00 00 00 
   10f00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f04:	48 c7 80 30 0c 00 00 	movq   $0x0,0xc30(%rax)
   10f0b:	00 00 00 00 
   10f0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f13:	48 c7 80 38 0c 00 00 	movq   $0x0,0xc38(%rax)
   10f1a:	00 00 00 00 
   10f1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f22:	48 c7 80 40 0c 00 00 	movq   $0x0,0xc40(%rax)
   10f29:	00 00 00 00 
   10f2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f31:	48 c7 80 48 0c 00 00 	movq   $0x0,0xc48(%rax)
   10f38:	00 00 00 00 
   10f3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f40:	48 c7 80 50 0c 00 00 	movq   $0x0,0xc50(%rax)
   10f47:	00 00 00 00 
   10f4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f4f:	48 c7 80 58 0c 00 00 	movq   $0x0,0xc58(%rax)
   10f56:	00 00 00 00 
   10f5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f5e:	48 c7 80 60 0c 00 00 	movq   $0x0,0xc60(%rax)
   10f65:	00 00 00 00 
   10f69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f6d:	48 c7 80 68 0c 00 00 	movq   $0x0,0xc68(%rax)
   10f74:	00 00 00 00 
   10f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f7c:	48 c7 80 70 0c 00 00 	movq   $0x0,0xc70(%rax)
   10f83:	00 00 00 00 
   10f87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f8b:	48 c7 80 78 0c 00 00 	movq   $0x0,0xc78(%rax)
   10f92:	00 00 00 00 
   10f96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f9a:	48 c7 80 80 0c 00 00 	movq   $0x0,0xc80(%rax)
   10fa1:	00 00 00 00 
   10fa5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fa9:	48 c7 80 88 0c 00 00 	movq   $0x0,0xc88(%rax)
   10fb0:	00 00 00 00 
   10fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fb8:	48 c7 80 90 0c 00 00 	movq   $0x0,0xc90(%rax)
   10fbf:	00 00 00 00 
   10fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fc7:	48 c7 80 98 0c 00 00 	movq   $0x0,0xc98(%rax)
   10fce:	00 00 00 00 
   10fd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fd6:	48 c7 80 a0 0c 00 00 	movq   $0x0,0xca0(%rax)
   10fdd:	00 00 00 00 
   10fe1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fe5:	48 c7 80 a8 0c 00 00 	movq   $0x0,0xca8(%rax)
   10fec:	00 00 00 00 
   10ff0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ff4:	48 c7 80 b0 0c 00 00 	movq   $0x0,0xcb0(%rax)
   10ffb:	00 00 00 00 
   10fff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11003:	48 c7 80 b8 0c 00 00 	movq   $0x0,0xcb8(%rax)
   1100a:	00 00 00 00 
   1100e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11012:	48 c7 80 c0 0c 00 00 	movq   $0x0,0xcc0(%rax)
   11019:	00 00 00 00 
   1101d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11021:	48 c7 80 c8 0c 00 00 	movq   $0x0,0xcc8(%rax)
   11028:	00 00 00 00 
   1102c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11030:	48 c7 80 d0 0c 00 00 	movq   $0x0,0xcd0(%rax)
   11037:	00 00 00 00 
   1103b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1103f:	48 c7 80 d8 0c 00 00 	movq   $0x0,0xcd8(%rax)
   11046:	00 00 00 00 
   1104a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1104e:	48 c7 80 e0 0c 00 00 	movq   $0x0,0xce0(%rax)
   11055:	00 00 00 00 
   11059:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1105d:	48 c7 80 e8 0c 00 00 	movq   $0x0,0xce8(%rax)
   11064:	00 00 00 00 
   11068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1106c:	48 c7 80 f0 0c 00 00 	movq   $0x0,0xcf0(%rax)
   11073:	00 00 00 00 
   11077:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1107b:	48 c7 80 f8 0c 00 00 	movq   $0x0,0xcf8(%rax)
   11082:	00 00 00 00 
   11086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1108a:	48 c7 80 00 0d 00 00 	movq   $0x0,0xd00(%rax)
   11091:	00 00 00 00 
   11095:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11099:	48 c7 80 08 0d 00 00 	movq   $0x0,0xd08(%rax)
   110a0:	00 00 00 00 
   110a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110a8:	48 c7 80 10 0d 00 00 	movq   $0x0,0xd10(%rax)
   110af:	00 00 00 00 
   110b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110b7:	48 c7 80 18 0d 00 00 	movq   $0x0,0xd18(%rax)
   110be:	00 00 00 00 
   110c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110c6:	48 c7 80 20 0d 00 00 	movq   $0x0,0xd20(%rax)
   110cd:	00 00 00 00 
   110d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110d5:	48 c7 80 28 0d 00 00 	movq   $0x0,0xd28(%rax)
   110dc:	00 00 00 00 
   110e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110e4:	48 c7 80 30 0d 00 00 	movq   $0x0,0xd30(%rax)
   110eb:	00 00 00 00 
   110ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110f3:	48 c7 80 38 0d 00 00 	movq   $0x0,0xd38(%rax)
   110fa:	00 00 00 00 
   110fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11102:	48 c7 80 40 0d 00 00 	movq   $0x0,0xd40(%rax)
   11109:	00 00 00 00 
   1110d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11111:	48 c7 80 48 0d 00 00 	movq   $0x0,0xd48(%rax)
   11118:	00 00 00 00 
   1111c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11120:	48 c7 80 50 0d 00 00 	movq   $0x0,0xd50(%rax)
   11127:	00 00 00 00 
   1112b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1112f:	48 c7 80 58 0d 00 00 	movq   $0x0,0xd58(%rax)
   11136:	00 00 00 00 
   1113a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1113e:	48 c7 80 60 0d 00 00 	movq   $0x0,0xd60(%rax)
   11145:	00 00 00 00 
   11149:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1114d:	48 c7 80 68 0d 00 00 	movq   $0x0,0xd68(%rax)
   11154:	00 00 00 00 
   11158:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1115c:	48 c7 80 70 0d 00 00 	movq   $0x0,0xd70(%rax)
   11163:	00 00 00 00 
   11167:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1116b:	48 c7 80 78 0d 00 00 	movq   $0x0,0xd78(%rax)
   11172:	00 00 00 00 
   11176:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1117a:	48 c7 80 80 0d 00 00 	movq   $0x0,0xd80(%rax)
   11181:	00 00 00 00 
   11185:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11189:	48 c7 80 88 0d 00 00 	movq   $0x0,0xd88(%rax)
   11190:	00 00 00 00 
   11194:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11198:	48 c7 80 90 0d 00 00 	movq   $0x0,0xd90(%rax)
   1119f:	00 00 00 00 
   111a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111a7:	48 c7 80 98 0d 00 00 	movq   $0x0,0xd98(%rax)
   111ae:	00 00 00 00 
   111b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111b6:	48 c7 80 a0 0d 00 00 	movq   $0x0,0xda0(%rax)
   111bd:	00 00 00 00 
   111c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111c5:	48 c7 80 a8 0d 00 00 	movq   $0x0,0xda8(%rax)
   111cc:	00 00 00 00 
   111d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111d4:	48 c7 80 b0 0d 00 00 	movq   $0x0,0xdb0(%rax)
   111db:	00 00 00 00 
   111df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111e3:	48 c7 80 b8 0d 00 00 	movq   $0x0,0xdb8(%rax)
   111ea:	00 00 00 00 
   111ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111f2:	48 c7 80 c0 0d 00 00 	movq   $0x0,0xdc0(%rax)
   111f9:	00 00 00 00 
   111fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11201:	48 c7 80 c8 0d 00 00 	movq   $0x0,0xdc8(%rax)
   11208:	00 00 00 00 
   1120c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11210:	48 c7 80 d0 0d 00 00 	movq   $0x0,0xdd0(%rax)
   11217:	00 00 00 00 
   1121b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1121f:	48 c7 80 d8 0d 00 00 	movq   $0x0,0xdd8(%rax)
   11226:	00 00 00 00 
   1122a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1122e:	48 c7 80 e0 0d 00 00 	movq   $0x0,0xde0(%rax)
   11235:	00 00 00 00 
   11239:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1123d:	48 c7 80 e8 0d 00 00 	movq   $0x0,0xde8(%rax)
   11244:	00 00 00 00 
   11248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1124c:	48 c7 80 f0 0d 00 00 	movq   $0x0,0xdf0(%rax)
   11253:	00 00 00 00 
   11257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1125b:	48 c7 80 f8 0d 00 00 	movq   $0x0,0xdf8(%rax)
   11262:	00 00 00 00 
   11266:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1126a:	48 c7 80 00 0e 00 00 	movq   $0x0,0xe00(%rax)
   11271:	00 00 00 00 
   11275:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11279:	48 c7 80 08 0e 00 00 	movq   $0x0,0xe08(%rax)
   11280:	00 00 00 00 
   11284:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11288:	48 c7 80 10 0e 00 00 	movq   $0x0,0xe10(%rax)
   1128f:	00 00 00 00 
   11293:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11297:	48 c7 80 18 0e 00 00 	movq   $0x0,0xe18(%rax)
   1129e:	00 00 00 00 
   112a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112a6:	48 c7 80 20 0e 00 00 	movq   $0x0,0xe20(%rax)
   112ad:	00 00 00 00 
   112b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112b5:	48 c7 80 28 0e 00 00 	movq   $0x0,0xe28(%rax)
   112bc:	00 00 00 00 
   112c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112c4:	48 c7 80 30 0e 00 00 	movq   $0x0,0xe30(%rax)
   112cb:	00 00 00 00 
   112cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112d3:	48 c7 80 38 0e 00 00 	movq   $0x0,0xe38(%rax)
   112da:	00 00 00 00 
   112de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112e2:	48 c7 80 40 0e 00 00 	movq   $0x0,0xe40(%rax)
   112e9:	00 00 00 00 
   112ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112f1:	48 c7 80 48 0e 00 00 	movq   $0x0,0xe48(%rax)
   112f8:	00 00 00 00 
   112fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11300:	48 c7 80 50 0e 00 00 	movq   $0x0,0xe50(%rax)
   11307:	00 00 00 00 
   1130b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1130f:	48 c7 80 58 0e 00 00 	movq   $0x0,0xe58(%rax)
   11316:	00 00 00 00 
   1131a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1131e:	48 c7 80 60 0e 00 00 	movq   $0x0,0xe60(%rax)
   11325:	00 00 00 00 
   11329:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1132d:	48 c7 80 68 0e 00 00 	movq   $0x0,0xe68(%rax)
   11334:	00 00 00 00 
   11338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1133c:	48 c7 80 70 0e 00 00 	movq   $0x0,0xe70(%rax)
   11343:	00 00 00 00 
   11347:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1134b:	48 c7 80 78 0e 00 00 	movq   $0x0,0xe78(%rax)
   11352:	00 00 00 00 
   11356:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1135a:	48 c7 80 80 0e 00 00 	movq   $0x0,0xe80(%rax)
   11361:	00 00 00 00 
   11365:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11369:	48 c7 80 88 0e 00 00 	movq   $0x0,0xe88(%rax)
   11370:	00 00 00 00 
   11374:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11378:	48 c7 80 90 0e 00 00 	movq   $0x0,0xe90(%rax)
   1137f:	00 00 00 00 
   11383:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11387:	48 c7 80 98 0e 00 00 	movq   $0x0,0xe98(%rax)
   1138e:	00 00 00 00 
   11392:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11396:	48 c7 80 a0 0e 00 00 	movq   $0x0,0xea0(%rax)
   1139d:	00 00 00 00 
   113a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113a5:	48 c7 80 a8 0e 00 00 	movq   $0x0,0xea8(%rax)
   113ac:	00 00 00 00 
   113b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113b4:	48 c7 80 b0 0e 00 00 	movq   $0x0,0xeb0(%rax)
   113bb:	00 00 00 00 
   113bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113c3:	48 c7 80 b8 0e 00 00 	movq   $0x0,0xeb8(%rax)
   113ca:	00 00 00 00 
   113ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113d2:	48 c7 80 c0 0e 00 00 	movq   $0x0,0xec0(%rax)
   113d9:	00 00 00 00 
   113dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113e1:	48 c7 80 c8 0e 00 00 	movq   $0x0,0xec8(%rax)
   113e8:	00 00 00 00 
   113ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113f0:	48 c7 80 d0 0e 00 00 	movq   $0x0,0xed0(%rax)
   113f7:	00 00 00 00 
   113fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113ff:	48 c7 80 d8 0e 00 00 	movq   $0x0,0xed8(%rax)
   11406:	00 00 00 00 
   1140a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1140e:	48 c7 80 e0 0e 00 00 	movq   $0x0,0xee0(%rax)
   11415:	00 00 00 00 
   11419:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1141d:	48 c7 80 e8 0e 00 00 	movq   $0x0,0xee8(%rax)
   11424:	00 00 00 00 
   11428:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1142c:	48 c7 80 f0 0e 00 00 	movq   $0x0,0xef0(%rax)
   11433:	00 00 00 00 
   11437:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1143b:	48 c7 80 f8 0e 00 00 	movq   $0x0,0xef8(%rax)
   11442:	00 00 00 00 
   11446:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1144a:	48 c7 80 00 0f 00 00 	movq   $0x0,0xf00(%rax)
   11451:	00 00 00 00 
   11455:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11459:	48 c7 80 08 0f 00 00 	movq   $0x0,0xf08(%rax)
   11460:	00 00 00 00 
   11464:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11468:	48 c7 80 10 0f 00 00 	movq   $0x0,0xf10(%rax)
   1146f:	00 00 00 00 
   11473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11477:	48 c7 80 18 0f 00 00 	movq   $0x0,0xf18(%rax)
   1147e:	00 00 00 00 
   11482:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11486:	48 c7 80 20 0f 00 00 	movq   $0x0,0xf20(%rax)
   1148d:	00 00 00 00 
   11491:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11495:	48 c7 80 28 0f 00 00 	movq   $0x0,0xf28(%rax)
   1149c:	00 00 00 00 
   114a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114a4:	48 c7 80 30 0f 00 00 	movq   $0x0,0xf30(%rax)
   114ab:	00 00 00 00 
   114af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114b3:	48 c7 80 38 0f 00 00 	movq   $0x0,0xf38(%rax)
   114ba:	00 00 00 00 
   114be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114c2:	48 c7 80 40 0f 00 00 	movq   $0x0,0xf40(%rax)
   114c9:	00 00 00 00 
   114cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114d1:	48 c7 80 48 0f 00 00 	movq   $0x0,0xf48(%rax)
   114d8:	00 00 00 00 
   114dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114e0:	48 c7 80 50 0f 00 00 	movq   $0x0,0xf50(%rax)
   114e7:	00 00 00 00 
   114eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114ef:	48 c7 80 58 0f 00 00 	movq   $0x0,0xf58(%rax)
   114f6:	00 00 00 00 
   114fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114fe:	48 c7 80 60 0f 00 00 	movq   $0x0,0xf60(%rax)
   11505:	00 00 00 00 
   11509:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1150d:	48 c7 80 68 0f 00 00 	movq   $0x0,0xf68(%rax)
   11514:	00 00 00 00 
   11518:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1151c:	48 c7 80 70 0f 00 00 	movq   $0x0,0xf70(%rax)
   11523:	00 00 00 00 
   11527:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1152b:	48 c7 80 78 0f 00 00 	movq   $0x0,0xf78(%rax)
   11532:	00 00 00 00 
   11536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1153a:	48 c7 80 80 0f 00 00 	movq   $0x0,0xf80(%rax)
   11541:	00 00 00 00 
   11545:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11549:	48 c7 80 88 0f 00 00 	movq   $0x0,0xf88(%rax)
   11550:	00 00 00 00 
   11554:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11558:	48 c7 80 90 0f 00 00 	movq   $0x0,0xf90(%rax)
   1155f:	00 00 00 00 
   11563:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11567:	48 c7 80 98 0f 00 00 	movq   $0x0,0xf98(%rax)
   1156e:	00 00 00 00 
   11572:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11576:	48 c7 80 a0 0f 00 00 	movq   $0x0,0xfa0(%rax)
   1157d:	00 00 00 00 
   11581:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11585:	48 c7 80 a8 0f 00 00 	movq   $0x0,0xfa8(%rax)
   1158c:	00 00 00 00 
   11590:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11594:	48 c7 80 b0 0f 00 00 	movq   $0x0,0xfb0(%rax)
   1159b:	00 00 00 00 
        vkGetDeviceProcAddr                = PFN_vkGetDeviceProcAddr( vkGetDeviceProcAddr( device, "vkGetDeviceProcAddr" ) );
   1159f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   115a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   115ab:	48 8d 0d 46 92 01 00 	lea    0x19246(%rip),%rcx        # 2a7f8 <_ZNSt8__detailL19__atomic_spin_countE+0x4>
   115b2:	48 89 ce             	mov    %rcx,%rsi
   115b5:	48 89 c7             	mov    %rax,%rdi
   115b8:	ff d2                	call   *%rdx
   115ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   115be:	48 89 42 10          	mov    %rax,0x10(%rdx)
        vkDestroyDevice                    = PFN_vkDestroyDevice( vkGetDeviceProcAddr( device, "vkDestroyDevice" ) );
   115c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115c6:	48 8b 50 10          	mov    0x10(%rax),%rdx
   115ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   115ce:	48 8d 0d 37 92 01 00 	lea    0x19237(%rip),%rcx        # 2a80c <_ZNSt8__detailL19__atomic_spin_countE+0x18>
   115d5:	48 89 ce             	mov    %rcx,%rsi
   115d8:	48 89 c7             	mov    %rax,%rdi
   115db:	ff d2                	call   *%rdx
   115dd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   115e1:	48 89 42 18          	mov    %rax,0x18(%rdx)
        vkGetDeviceQueue                   = PFN_vkGetDeviceQueue( vkGetDeviceProcAddr( device, "vkGetDeviceQueue" ) );
   115e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   115ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   115f1:	48 8d 0d 24 92 01 00 	lea    0x19224(%rip),%rcx        # 2a81c <_ZNSt8__detailL19__atomic_spin_countE+0x28>
   115f8:	48 89 ce             	mov    %rcx,%rsi
   115fb:	48 89 c7             	mov    %rax,%rdi
   115fe:	ff d2                	call   *%rdx
   11600:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11604:	48 89 42 20          	mov    %rax,0x20(%rdx)
        vkQueueSubmit                      = PFN_vkQueueSubmit( vkGetDeviceProcAddr( device, "vkQueueSubmit" ) );
   11608:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1160c:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11610:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11614:	48 8d 0d 12 92 01 00 	lea    0x19212(%rip),%rcx        # 2a82d <_ZNSt8__detailL19__atomic_spin_countE+0x39>
   1161b:	48 89 ce             	mov    %rcx,%rsi
   1161e:	48 89 c7             	mov    %rax,%rdi
   11621:	ff d2                	call   *%rdx
   11623:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11627:	48 89 42 28          	mov    %rax,0x28(%rdx)
        vkQueueWaitIdle                    = PFN_vkQueueWaitIdle( vkGetDeviceProcAddr( device, "vkQueueWaitIdle" ) );
   1162b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1162f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11633:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11637:	48 8d 0d fd 91 01 00 	lea    0x191fd(%rip),%rcx        # 2a83b <_ZNSt8__detailL19__atomic_spin_countE+0x47>
   1163e:	48 89 ce             	mov    %rcx,%rsi
   11641:	48 89 c7             	mov    %rax,%rdi
   11644:	ff d2                	call   *%rdx
   11646:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1164a:	48 89 42 30          	mov    %rax,0x30(%rdx)
        vkDeviceWaitIdle                   = PFN_vkDeviceWaitIdle( vkGetDeviceProcAddr( device, "vkDeviceWaitIdle" ) );
   1164e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11652:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11656:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1165a:	48 8d 0d ea 91 01 00 	lea    0x191ea(%rip),%rcx        # 2a84b <_ZNSt8__detailL19__atomic_spin_countE+0x57>
   11661:	48 89 ce             	mov    %rcx,%rsi
   11664:	48 89 c7             	mov    %rax,%rdi
   11667:	ff d2                	call   *%rdx
   11669:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1166d:	48 89 42 38          	mov    %rax,0x38(%rdx)
        vkAllocateMemory                   = PFN_vkAllocateMemory( vkGetDeviceProcAddr( device, "vkAllocateMemory" ) );
   11671:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11675:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11679:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1167d:	48 8d 0d d8 91 01 00 	lea    0x191d8(%rip),%rcx        # 2a85c <_ZNSt8__detailL19__atomic_spin_countE+0x68>
   11684:	48 89 ce             	mov    %rcx,%rsi
   11687:	48 89 c7             	mov    %rax,%rdi
   1168a:	ff d2                	call   *%rdx
   1168c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11690:	48 89 42 40          	mov    %rax,0x40(%rdx)
        vkFreeMemory                       = PFN_vkFreeMemory( vkGetDeviceProcAddr( device, "vkFreeMemory" ) );
   11694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11698:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1169c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   116a0:	48 8d 0d c6 91 01 00 	lea    0x191c6(%rip),%rcx        # 2a86d <_ZNSt8__detailL19__atomic_spin_countE+0x79>
   116a7:	48 89 ce             	mov    %rcx,%rsi
   116aa:	48 89 c7             	mov    %rax,%rdi
   116ad:	ff d2                	call   *%rdx
   116af:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   116b3:	48 89 42 48          	mov    %rax,0x48(%rdx)
        vkMapMemory                        = PFN_vkMapMemory( vkGetDeviceProcAddr( device, "vkMapMemory" ) );
   116b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116bb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   116bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   116c3:	48 8d 0d b0 91 01 00 	lea    0x191b0(%rip),%rcx        # 2a87a <_ZNSt8__detailL19__atomic_spin_countE+0x86>
   116ca:	48 89 ce             	mov    %rcx,%rsi
   116cd:	48 89 c7             	mov    %rax,%rdi
   116d0:	ff d2                	call   *%rdx
   116d2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   116d6:	48 89 42 50          	mov    %rax,0x50(%rdx)
        vkUnmapMemory                      = PFN_vkUnmapMemory( vkGetDeviceProcAddr( device, "vkUnmapMemory" ) );
   116da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116de:	48 8b 50 10          	mov    0x10(%rax),%rdx
   116e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   116e6:	48 8d 0d 99 91 01 00 	lea    0x19199(%rip),%rcx        # 2a886 <_ZNSt8__detailL19__atomic_spin_countE+0x92>
   116ed:	48 89 ce             	mov    %rcx,%rsi
   116f0:	48 89 c7             	mov    %rax,%rdi
   116f3:	ff d2                	call   *%rdx
   116f5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   116f9:	48 89 42 58          	mov    %rax,0x58(%rdx)
        vkFlushMappedMemoryRanges          = PFN_vkFlushMappedMemoryRanges( vkGetDeviceProcAddr( device, "vkFlushMappedMemoryRanges" ) );
   116fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11701:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11709:	48 8d 0d 84 91 01 00 	lea    0x19184(%rip),%rcx        # 2a894 <_ZNSt8__detailL19__atomic_spin_countE+0xa0>
   11710:	48 89 ce             	mov    %rcx,%rsi
   11713:	48 89 c7             	mov    %rax,%rdi
   11716:	ff d2                	call   *%rdx
   11718:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1171c:	48 89 42 60          	mov    %rax,0x60(%rdx)
        vkInvalidateMappedMemoryRanges     = PFN_vkInvalidateMappedMemoryRanges( vkGetDeviceProcAddr( device, "vkInvalidateMappedMemoryRanges" ) );
   11720:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11724:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11728:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1172c:	48 8d 0d 7d 91 01 00 	lea    0x1917d(%rip),%rcx        # 2a8b0 <_ZNSt8__detailL19__atomic_spin_countE+0xbc>
   11733:	48 89 ce             	mov    %rcx,%rsi
   11736:	48 89 c7             	mov    %rax,%rdi
   11739:	ff d2                	call   *%rdx
   1173b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1173f:	48 89 42 68          	mov    %rax,0x68(%rdx)
        vkGetDeviceMemoryCommitment        = PFN_vkGetDeviceMemoryCommitment( vkGetDeviceProcAddr( device, "vkGetDeviceMemoryCommitment" ) );
   11743:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11747:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1174b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1174f:	48 8d 0d 79 91 01 00 	lea    0x19179(%rip),%rcx        # 2a8cf <_ZNSt8__detailL19__atomic_spin_countE+0xdb>
   11756:	48 89 ce             	mov    %rcx,%rsi
   11759:	48 89 c7             	mov    %rax,%rdi
   1175c:	ff d2                	call   *%rdx
   1175e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11762:	48 89 42 70          	mov    %rax,0x70(%rdx)
        vkBindBufferMemory                 = PFN_vkBindBufferMemory( vkGetDeviceProcAddr( device, "vkBindBufferMemory" ) );
   11766:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1176a:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1176e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11772:	48 8d 0d 72 91 01 00 	lea    0x19172(%rip),%rcx        # 2a8eb <_ZNSt8__detailL19__atomic_spin_countE+0xf7>
   11779:	48 89 ce             	mov    %rcx,%rsi
   1177c:	48 89 c7             	mov    %rax,%rdi
   1177f:	ff d2                	call   *%rdx
   11781:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11785:	48 89 42 78          	mov    %rax,0x78(%rdx)
        vkBindImageMemory                  = PFN_vkBindImageMemory( vkGetDeviceProcAddr( device, "vkBindImageMemory" ) );
   11789:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1178d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11791:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11795:	48 8d 0d 62 91 01 00 	lea    0x19162(%rip),%rcx        # 2a8fe <_ZNSt8__detailL19__atomic_spin_countE+0x10a>
   1179c:	48 89 ce             	mov    %rcx,%rsi
   1179f:	48 89 c7             	mov    %rax,%rdi
   117a2:	ff d2                	call   *%rdx
   117a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   117a8:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        vkGetBufferMemoryRequirements      = PFN_vkGetBufferMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetBufferMemoryRequirements" ) );
   117af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117b3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   117b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   117bb:	48 8d 0d 4e 91 01 00 	lea    0x1914e(%rip),%rcx        # 2a910 <_ZNSt8__detailL19__atomic_spin_countE+0x11c>
   117c2:	48 89 ce             	mov    %rcx,%rsi
   117c5:	48 89 c7             	mov    %rax,%rdi
   117c8:	ff d2                	call   *%rdx
   117ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   117ce:	48 89 82 88 00 00 00 	mov    %rax,0x88(%rdx)
        vkGetImageMemoryRequirements       = PFN_vkGetImageMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetImageMemoryRequirements" ) );
   117d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   117dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   117e1:	48 8d 0d 46 91 01 00 	lea    0x19146(%rip),%rcx        # 2a92e <_ZNSt8__detailL19__atomic_spin_countE+0x13a>
   117e8:	48 89 ce             	mov    %rcx,%rsi
   117eb:	48 89 c7             	mov    %rax,%rdi
   117ee:	ff d2                	call   *%rdx
   117f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   117f4:	48 89 82 90 00 00 00 	mov    %rax,0x90(%rdx)
        vkGetImageSparseMemoryRequirements = PFN_vkGetImageSparseMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetImageSparseMemoryRequirements" ) );
   117fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117ff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11803:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11807:	48 8d 0d 42 91 01 00 	lea    0x19142(%rip),%rcx        # 2a950 <_ZNSt8__detailL19__atomic_spin_countE+0x15c>
   1180e:	48 89 ce             	mov    %rcx,%rsi
   11811:	48 89 c7             	mov    %rax,%rdi
   11814:	ff d2                	call   *%rdx
   11816:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1181a:	48 89 82 98 00 00 00 	mov    %rax,0x98(%rdx)
        vkQueueBindSparse                  = PFN_vkQueueBindSparse( vkGetDeviceProcAddr( device, "vkQueueBindSparse" ) );
   11821:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11825:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1182d:	48 8d 0d 3f 91 01 00 	lea    0x1913f(%rip),%rcx        # 2a973 <_ZNSt8__detailL19__atomic_spin_countE+0x17f>
   11834:	48 89 ce             	mov    %rcx,%rsi
   11837:	48 89 c7             	mov    %rax,%rdi
   1183a:	ff d2                	call   *%rdx
   1183c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11840:	48 89 82 a0 00 00 00 	mov    %rax,0xa0(%rdx)
        vkCreateFence                      = PFN_vkCreateFence( vkGetDeviceProcAddr( device, "vkCreateFence" ) );
   11847:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1184b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1184f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11853:	48 8d 0d 2b 91 01 00 	lea    0x1912b(%rip),%rcx        # 2a985 <_ZNSt8__detailL19__atomic_spin_countE+0x191>
   1185a:	48 89 ce             	mov    %rcx,%rsi
   1185d:	48 89 c7             	mov    %rax,%rdi
   11860:	ff d2                	call   *%rdx
   11862:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11866:	48 89 82 a8 00 00 00 	mov    %rax,0xa8(%rdx)
        vkDestroyFence                     = PFN_vkDestroyFence( vkGetDeviceProcAddr( device, "vkDestroyFence" ) );
   1186d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11871:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11875:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11879:	48 8d 0d 13 91 01 00 	lea    0x19113(%rip),%rcx        # 2a993 <_ZNSt8__detailL19__atomic_spin_countE+0x19f>
   11880:	48 89 ce             	mov    %rcx,%rsi
   11883:	48 89 c7             	mov    %rax,%rdi
   11886:	ff d2                	call   *%rdx
   11888:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1188c:	48 89 82 b0 00 00 00 	mov    %rax,0xb0(%rdx)
        vkResetFences                      = PFN_vkResetFences( vkGetDeviceProcAddr( device, "vkResetFences" ) );
   11893:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11897:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1189b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1189f:	48 8d 0d fc 90 01 00 	lea    0x190fc(%rip),%rcx        # 2a9a2 <_ZNSt8__detailL19__atomic_spin_countE+0x1ae>
   118a6:	48 89 ce             	mov    %rcx,%rsi
   118a9:	48 89 c7             	mov    %rax,%rdi
   118ac:	ff d2                	call   *%rdx
   118ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   118b2:	48 89 82 b8 00 00 00 	mov    %rax,0xb8(%rdx)
        vkGetFenceStatus                   = PFN_vkGetFenceStatus( vkGetDeviceProcAddr( device, "vkGetFenceStatus" ) );
   118b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118bd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   118c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   118c5:	48 8d 0d e4 90 01 00 	lea    0x190e4(%rip),%rcx        # 2a9b0 <_ZNSt8__detailL19__atomic_spin_countE+0x1bc>
   118cc:	48 89 ce             	mov    %rcx,%rsi
   118cf:	48 89 c7             	mov    %rax,%rdi
   118d2:	ff d2                	call   *%rdx
   118d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   118d8:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
        vkWaitForFences                    = PFN_vkWaitForFences( vkGetDeviceProcAddr( device, "vkWaitForFences" ) );
   118df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118e3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   118e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   118eb:	48 8d 0d cf 90 01 00 	lea    0x190cf(%rip),%rcx        # 2a9c1 <_ZNSt8__detailL19__atomic_spin_countE+0x1cd>
   118f2:	48 89 ce             	mov    %rcx,%rsi
   118f5:	48 89 c7             	mov    %rax,%rdi
   118f8:	ff d2                	call   *%rdx
   118fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   118fe:	48 89 82 c8 00 00 00 	mov    %rax,0xc8(%rdx)
        vkCreateSemaphore                  = PFN_vkCreateSemaphore( vkGetDeviceProcAddr( device, "vkCreateSemaphore" ) );
   11905:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11909:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1190d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11911:	48 8d 0d b9 90 01 00 	lea    0x190b9(%rip),%rcx        # 2a9d1 <_ZNSt8__detailL19__atomic_spin_countE+0x1dd>
   11918:	48 89 ce             	mov    %rcx,%rsi
   1191b:	48 89 c7             	mov    %rax,%rdi
   1191e:	ff d2                	call   *%rdx
   11920:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11924:	48 89 82 d0 00 00 00 	mov    %rax,0xd0(%rdx)
        vkDestroySemaphore                 = PFN_vkDestroySemaphore( vkGetDeviceProcAddr( device, "vkDestroySemaphore" ) );
   1192b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1192f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11933:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11937:	48 8d 0d a5 90 01 00 	lea    0x190a5(%rip),%rcx        # 2a9e3 <_ZNSt8__detailL19__atomic_spin_countE+0x1ef>
   1193e:	48 89 ce             	mov    %rcx,%rsi
   11941:	48 89 c7             	mov    %rax,%rdi
   11944:	ff d2                	call   *%rdx
   11946:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1194a:	48 89 82 d8 00 00 00 	mov    %rax,0xd8(%rdx)
        vkCreateEvent                      = PFN_vkCreateEvent( vkGetDeviceProcAddr( device, "vkCreateEvent" ) );
   11951:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11955:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11959:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1195d:	48 8d 0d 92 90 01 00 	lea    0x19092(%rip),%rcx        # 2a9f6 <_ZNSt8__detailL19__atomic_spin_countE+0x202>
   11964:	48 89 ce             	mov    %rcx,%rsi
   11967:	48 89 c7             	mov    %rax,%rdi
   1196a:	ff d2                	call   *%rdx
   1196c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11970:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
        vkDestroyEvent                     = PFN_vkDestroyEvent( vkGetDeviceProcAddr( device, "vkDestroyEvent" ) );
   11977:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1197b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1197f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11983:	48 8d 0d 7a 90 01 00 	lea    0x1907a(%rip),%rcx        # 2aa04 <_ZNSt8__detailL19__atomic_spin_countE+0x210>
   1198a:	48 89 ce             	mov    %rcx,%rsi
   1198d:	48 89 c7             	mov    %rax,%rdi
   11990:	ff d2                	call   *%rdx
   11992:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11996:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)
        vkGetEventStatus                   = PFN_vkGetEventStatus( vkGetDeviceProcAddr( device, "vkGetEventStatus" ) );
   1199d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119a1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   119a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   119a9:	48 8d 0d 63 90 01 00 	lea    0x19063(%rip),%rcx        # 2aa13 <_ZNSt8__detailL19__atomic_spin_countE+0x21f>
   119b0:	48 89 ce             	mov    %rcx,%rsi
   119b3:	48 89 c7             	mov    %rax,%rdi
   119b6:	ff d2                	call   *%rdx
   119b8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   119bc:	48 89 82 f0 00 00 00 	mov    %rax,0xf0(%rdx)
        vkSetEvent                         = PFN_vkSetEvent( vkGetDeviceProcAddr( device, "vkSetEvent" ) );
   119c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119c7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   119cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   119cf:	48 8d 0d 4e 90 01 00 	lea    0x1904e(%rip),%rcx        # 2aa24 <_ZNSt8__detailL19__atomic_spin_countE+0x230>
   119d6:	48 89 ce             	mov    %rcx,%rsi
   119d9:	48 89 c7             	mov    %rax,%rdi
   119dc:	ff d2                	call   *%rdx
   119de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   119e2:	48 89 82 f8 00 00 00 	mov    %rax,0xf8(%rdx)
        vkResetEvent                       = PFN_vkResetEvent( vkGetDeviceProcAddr( device, "vkResetEvent" ) );
   119e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119ed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   119f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   119f5:	48 8d 0d 33 90 01 00 	lea    0x19033(%rip),%rcx        # 2aa2f <_ZNSt8__detailL19__atomic_spin_countE+0x23b>
   119fc:	48 89 ce             	mov    %rcx,%rsi
   119ff:	48 89 c7             	mov    %rax,%rdi
   11a02:	ff d2                	call   *%rdx
   11a04:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11a08:	48 89 82 00 01 00 00 	mov    %rax,0x100(%rdx)
        vkCreateQueryPool                  = PFN_vkCreateQueryPool( vkGetDeviceProcAddr( device, "vkCreateQueryPool" ) );
   11a0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a13:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11a17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11a1b:	48 8d 0d 1a 90 01 00 	lea    0x1901a(%rip),%rcx        # 2aa3c <_ZNSt8__detailL19__atomic_spin_countE+0x248>
   11a22:	48 89 ce             	mov    %rcx,%rsi
   11a25:	48 89 c7             	mov    %rax,%rdi
   11a28:	ff d2                	call   *%rdx
   11a2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11a2e:	48 89 82 08 01 00 00 	mov    %rax,0x108(%rdx)
        vkDestroyQueryPool                 = PFN_vkDestroyQueryPool( vkGetDeviceProcAddr( device, "vkDestroyQueryPool" ) );
   11a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a39:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11a3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11a41:	48 8d 0d 06 90 01 00 	lea    0x19006(%rip),%rcx        # 2aa4e <_ZNSt8__detailL19__atomic_spin_countE+0x25a>
   11a48:	48 89 ce             	mov    %rcx,%rsi
   11a4b:	48 89 c7             	mov    %rax,%rdi
   11a4e:	ff d2                	call   *%rdx
   11a50:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11a54:	48 89 82 10 01 00 00 	mov    %rax,0x110(%rdx)
        vkGetQueryPoolResults              = PFN_vkGetQueryPoolResults( vkGetDeviceProcAddr( device, "vkGetQueryPoolResults" ) );
   11a5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a5f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11a63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11a67:	48 8d 0d f3 8f 01 00 	lea    0x18ff3(%rip),%rcx        # 2aa61 <_ZNSt8__detailL19__atomic_spin_countE+0x26d>
   11a6e:	48 89 ce             	mov    %rcx,%rsi
   11a71:	48 89 c7             	mov    %rax,%rdi
   11a74:	ff d2                	call   *%rdx
   11a76:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11a7a:	48 89 82 18 01 00 00 	mov    %rax,0x118(%rdx)
        vkCreateBuffer                     = PFN_vkCreateBuffer( vkGetDeviceProcAddr( device, "vkCreateBuffer" ) );
   11a81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a85:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11a89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11a8d:	48 8d 0d e3 8f 01 00 	lea    0x18fe3(%rip),%rcx        # 2aa77 <_ZNSt8__detailL19__atomic_spin_countE+0x283>
   11a94:	48 89 ce             	mov    %rcx,%rsi
   11a97:	48 89 c7             	mov    %rax,%rdi
   11a9a:	ff d2                	call   *%rdx
   11a9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11aa0:	48 89 82 20 01 00 00 	mov    %rax,0x120(%rdx)
        vkDestroyBuffer                    = PFN_vkDestroyBuffer( vkGetDeviceProcAddr( device, "vkDestroyBuffer" ) );
   11aa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11aab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11aaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ab3:	48 8d 0d cc 8f 01 00 	lea    0x18fcc(%rip),%rcx        # 2aa86 <_ZNSt8__detailL19__atomic_spin_countE+0x292>
   11aba:	48 89 ce             	mov    %rcx,%rsi
   11abd:	48 89 c7             	mov    %rax,%rdi
   11ac0:	ff d2                	call   *%rdx
   11ac2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ac6:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)
        vkCreateBufferView                 = PFN_vkCreateBufferView( vkGetDeviceProcAddr( device, "vkCreateBufferView" ) );
   11acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ad1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11ad5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ad9:	48 8d 0d b6 8f 01 00 	lea    0x18fb6(%rip),%rcx        # 2aa96 <_ZNSt8__detailL19__atomic_spin_countE+0x2a2>
   11ae0:	48 89 ce             	mov    %rcx,%rsi
   11ae3:	48 89 c7             	mov    %rax,%rdi
   11ae6:	ff d2                	call   *%rdx
   11ae8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11aec:	48 89 82 30 01 00 00 	mov    %rax,0x130(%rdx)
        vkDestroyBufferView                = PFN_vkDestroyBufferView( vkGetDeviceProcAddr( device, "vkDestroyBufferView" ) );
   11af3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11af7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11aff:	48 8d 0d a3 8f 01 00 	lea    0x18fa3(%rip),%rcx        # 2aaa9 <_ZNSt8__detailL19__atomic_spin_countE+0x2b5>
   11b06:	48 89 ce             	mov    %rcx,%rsi
   11b09:	48 89 c7             	mov    %rax,%rdi
   11b0c:	ff d2                	call   *%rdx
   11b0e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11b12:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)
        vkCreateImage                      = PFN_vkCreateImage( vkGetDeviceProcAddr( device, "vkCreateImage" ) );
   11b19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b1d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11b21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11b25:	48 8d 0d 91 8f 01 00 	lea    0x18f91(%rip),%rcx        # 2aabd <_ZNSt8__detailL19__atomic_spin_countE+0x2c9>
   11b2c:	48 89 ce             	mov    %rcx,%rsi
   11b2f:	48 89 c7             	mov    %rax,%rdi
   11b32:	ff d2                	call   *%rdx
   11b34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11b38:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)
        vkDestroyImage                     = PFN_vkDestroyImage( vkGetDeviceProcAddr( device, "vkDestroyImage" ) );
   11b3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b43:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11b47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11b4b:	48 8d 0d 79 8f 01 00 	lea    0x18f79(%rip),%rcx        # 2aacb <_ZNSt8__detailL19__atomic_spin_countE+0x2d7>
   11b52:	48 89 ce             	mov    %rcx,%rsi
   11b55:	48 89 c7             	mov    %rax,%rdi
   11b58:	ff d2                	call   *%rdx
   11b5a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11b5e:	48 89 82 48 01 00 00 	mov    %rax,0x148(%rdx)
        vkGetImageSubresourceLayout        = PFN_vkGetImageSubresourceLayout( vkGetDeviceProcAddr( device, "vkGetImageSubresourceLayout" ) );
   11b65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b69:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11b6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11b71:	48 8d 0d 62 8f 01 00 	lea    0x18f62(%rip),%rcx        # 2aada <_ZNSt8__detailL19__atomic_spin_countE+0x2e6>
   11b78:	48 89 ce             	mov    %rcx,%rsi
   11b7b:	48 89 c7             	mov    %rax,%rdi
   11b7e:	ff d2                	call   *%rdx
   11b80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11b84:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
        vkCreateImageView                  = PFN_vkCreateImageView( vkGetDeviceProcAddr( device, "vkCreateImageView" ) );
   11b8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b8f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11b93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11b97:	48 8d 0d 58 8f 01 00 	lea    0x18f58(%rip),%rcx        # 2aaf6 <_ZNSt8__detailL19__atomic_spin_countE+0x302>
   11b9e:	48 89 ce             	mov    %rcx,%rsi
   11ba1:	48 89 c7             	mov    %rax,%rdi
   11ba4:	ff d2                	call   *%rdx
   11ba6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11baa:	48 89 82 58 01 00 00 	mov    %rax,0x158(%rdx)
        vkDestroyImageView                 = PFN_vkDestroyImageView( vkGetDeviceProcAddr( device, "vkDestroyImageView" ) );
   11bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bb5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11bb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11bbd:	48 8d 0d 44 8f 01 00 	lea    0x18f44(%rip),%rcx        # 2ab08 <_ZNSt8__detailL19__atomic_spin_countE+0x314>
   11bc4:	48 89 ce             	mov    %rcx,%rsi
   11bc7:	48 89 c7             	mov    %rax,%rdi
   11bca:	ff d2                	call   *%rdx
   11bcc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11bd0:	48 89 82 60 01 00 00 	mov    %rax,0x160(%rdx)
        vkCreateShaderModule               = PFN_vkCreateShaderModule( vkGetDeviceProcAddr( device, "vkCreateShaderModule" ) );
   11bd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bdb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11bdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11be3:	48 8d 0d 31 8f 01 00 	lea    0x18f31(%rip),%rcx        # 2ab1b <_ZNSt8__detailL19__atomic_spin_countE+0x327>
   11bea:	48 89 ce             	mov    %rcx,%rsi
   11bed:	48 89 c7             	mov    %rax,%rdi
   11bf0:	ff d2                	call   *%rdx
   11bf2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11bf6:	48 89 82 68 01 00 00 	mov    %rax,0x168(%rdx)
        vkDestroyShaderModule              = PFN_vkDestroyShaderModule( vkGetDeviceProcAddr( device, "vkDestroyShaderModule" ) );
   11bfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c01:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11c05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c09:	48 8d 0d 20 8f 01 00 	lea    0x18f20(%rip),%rcx        # 2ab30 <_ZNSt8__detailL19__atomic_spin_countE+0x33c>
   11c10:	48 89 ce             	mov    %rcx,%rsi
   11c13:	48 89 c7             	mov    %rax,%rdi
   11c16:	ff d2                	call   *%rdx
   11c18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11c1c:	48 89 82 70 01 00 00 	mov    %rax,0x170(%rdx)
        vkCreatePipelineCache              = PFN_vkCreatePipelineCache( vkGetDeviceProcAddr( device, "vkCreatePipelineCache" ) );
   11c23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c27:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11c2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c2f:	48 8d 0d 10 8f 01 00 	lea    0x18f10(%rip),%rcx        # 2ab46 <_ZNSt8__detailL19__atomic_spin_countE+0x352>
   11c36:	48 89 ce             	mov    %rcx,%rsi
   11c39:	48 89 c7             	mov    %rax,%rdi
   11c3c:	ff d2                	call   *%rdx
   11c3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11c42:	48 89 82 78 01 00 00 	mov    %rax,0x178(%rdx)
        vkDestroyPipelineCache             = PFN_vkDestroyPipelineCache( vkGetDeviceProcAddr( device, "vkDestroyPipelineCache" ) );
   11c49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c4d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11c51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c55:	48 8d 0d 00 8f 01 00 	lea    0x18f00(%rip),%rcx        # 2ab5c <_ZNSt8__detailL19__atomic_spin_countE+0x368>
   11c5c:	48 89 ce             	mov    %rcx,%rsi
   11c5f:	48 89 c7             	mov    %rax,%rdi
   11c62:	ff d2                	call   *%rdx
   11c64:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11c68:	48 89 82 80 01 00 00 	mov    %rax,0x180(%rdx)
        vkGetPipelineCacheData             = PFN_vkGetPipelineCacheData( vkGetDeviceProcAddr( device, "vkGetPipelineCacheData" ) );
   11c6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c73:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11c77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c7b:	48 8d 0d f1 8e 01 00 	lea    0x18ef1(%rip),%rcx        # 2ab73 <_ZNSt8__detailL19__atomic_spin_countE+0x37f>
   11c82:	48 89 ce             	mov    %rcx,%rsi
   11c85:	48 89 c7             	mov    %rax,%rdi
   11c88:	ff d2                	call   *%rdx
   11c8a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11c8e:	48 89 82 88 01 00 00 	mov    %rax,0x188(%rdx)
        vkMergePipelineCaches              = PFN_vkMergePipelineCaches( vkGetDeviceProcAddr( device, "vkMergePipelineCaches" ) );
   11c95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c99:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11c9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ca1:	48 8d 0d e2 8e 01 00 	lea    0x18ee2(%rip),%rcx        # 2ab8a <_ZNSt8__detailL19__atomic_spin_countE+0x396>
   11ca8:	48 89 ce             	mov    %rcx,%rsi
   11cab:	48 89 c7             	mov    %rax,%rdi
   11cae:	ff d2                	call   *%rdx
   11cb0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11cb4:	48 89 82 90 01 00 00 	mov    %rax,0x190(%rdx)
        vkCreateGraphicsPipelines          = PFN_vkCreateGraphicsPipelines( vkGetDeviceProcAddr( device, "vkCreateGraphicsPipelines" ) );
   11cbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cbf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11cc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11cc7:	48 8d 0d d2 8e 01 00 	lea    0x18ed2(%rip),%rcx        # 2aba0 <_ZNSt8__detailL19__atomic_spin_countE+0x3ac>
   11cce:	48 89 ce             	mov    %rcx,%rsi
   11cd1:	48 89 c7             	mov    %rax,%rdi
   11cd4:	ff d2                	call   *%rdx
   11cd6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11cda:	48 89 82 98 01 00 00 	mov    %rax,0x198(%rdx)
        vkCreateComputePipelines           = PFN_vkCreateComputePipelines( vkGetDeviceProcAddr( device, "vkCreateComputePipelines" ) );
   11ce1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ce5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11ce9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ced:	48 8d 0d c6 8e 01 00 	lea    0x18ec6(%rip),%rcx        # 2abba <_ZNSt8__detailL19__atomic_spin_countE+0x3c6>
   11cf4:	48 89 ce             	mov    %rcx,%rsi
   11cf7:	48 89 c7             	mov    %rax,%rdi
   11cfa:	ff d2                	call   *%rdx
   11cfc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11d00:	48 89 82 a0 01 00 00 	mov    %rax,0x1a0(%rdx)
        vkDestroyPipeline                  = PFN_vkDestroyPipeline( vkGetDeviceProcAddr( device, "vkDestroyPipeline" ) );
   11d07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d0b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11d0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d13:	48 8d 0d b9 8e 01 00 	lea    0x18eb9(%rip),%rcx        # 2abd3 <_ZNSt8__detailL19__atomic_spin_countE+0x3df>
   11d1a:	48 89 ce             	mov    %rcx,%rsi
   11d1d:	48 89 c7             	mov    %rax,%rdi
   11d20:	ff d2                	call   *%rdx
   11d22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11d26:	48 89 82 a8 01 00 00 	mov    %rax,0x1a8(%rdx)
        vkCreatePipelineLayout             = PFN_vkCreatePipelineLayout( vkGetDeviceProcAddr( device, "vkCreatePipelineLayout" ) );
   11d2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d31:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11d35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d39:	48 8d 0d a5 8e 01 00 	lea    0x18ea5(%rip),%rcx        # 2abe5 <_ZNSt8__detailL19__atomic_spin_countE+0x3f1>
   11d40:	48 89 ce             	mov    %rcx,%rsi
   11d43:	48 89 c7             	mov    %rax,%rdi
   11d46:	ff d2                	call   *%rdx
   11d48:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11d4c:	48 89 82 b0 01 00 00 	mov    %rax,0x1b0(%rdx)
        vkDestroyPipelineLayout            = PFN_vkDestroyPipelineLayout( vkGetDeviceProcAddr( device, "vkDestroyPipelineLayout" ) );
   11d53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d57:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11d5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d5f:	48 8d 0d 96 8e 01 00 	lea    0x18e96(%rip),%rcx        # 2abfc <_ZNSt8__detailL19__atomic_spin_countE+0x408>
   11d66:	48 89 ce             	mov    %rcx,%rsi
   11d69:	48 89 c7             	mov    %rax,%rdi
   11d6c:	ff d2                	call   *%rdx
   11d6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11d72:	48 89 82 b8 01 00 00 	mov    %rax,0x1b8(%rdx)
        vkCreateSampler                    = PFN_vkCreateSampler( vkGetDeviceProcAddr( device, "vkCreateSampler" ) );
   11d79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d7d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11d81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d85:	48 8d 0d 88 8e 01 00 	lea    0x18e88(%rip),%rcx        # 2ac14 <_ZNSt8__detailL19__atomic_spin_countE+0x420>
   11d8c:	48 89 ce             	mov    %rcx,%rsi
   11d8f:	48 89 c7             	mov    %rax,%rdi
   11d92:	ff d2                	call   *%rdx
   11d94:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11d98:	48 89 82 c0 01 00 00 	mov    %rax,0x1c0(%rdx)
        vkDestroySampler                   = PFN_vkDestroySampler( vkGetDeviceProcAddr( device, "vkDestroySampler" ) );
   11d9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11da3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11da7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11dab:	48 8d 0d 72 8e 01 00 	lea    0x18e72(%rip),%rcx        # 2ac24 <_ZNSt8__detailL19__atomic_spin_countE+0x430>
   11db2:	48 89 ce             	mov    %rcx,%rsi
   11db5:	48 89 c7             	mov    %rax,%rdi
   11db8:	ff d2                	call   *%rdx
   11dba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11dbe:	48 89 82 c8 01 00 00 	mov    %rax,0x1c8(%rdx)
        vkCreateDescriptorSetLayout        = PFN_vkCreateDescriptorSetLayout( vkGetDeviceProcAddr( device, "vkCreateDescriptorSetLayout" ) );
   11dc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11dc9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11dcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11dd1:	48 8d 0d 5d 8e 01 00 	lea    0x18e5d(%rip),%rcx        # 2ac35 <_ZNSt8__detailL19__atomic_spin_countE+0x441>
   11dd8:	48 89 ce             	mov    %rcx,%rsi
   11ddb:	48 89 c7             	mov    %rax,%rdi
   11dde:	ff d2                	call   *%rdx
   11de0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11de4:	48 89 82 d0 01 00 00 	mov    %rax,0x1d0(%rdx)
        vkDestroyDescriptorSetLayout       = PFN_vkDestroyDescriptorSetLayout( vkGetDeviceProcAddr( device, "vkDestroyDescriptorSetLayout" ) );
   11deb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11def:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11df3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11df7:	48 8d 0d 53 8e 01 00 	lea    0x18e53(%rip),%rcx        # 2ac51 <_ZNSt8__detailL19__atomic_spin_countE+0x45d>
   11dfe:	48 89 ce             	mov    %rcx,%rsi
   11e01:	48 89 c7             	mov    %rax,%rdi
   11e04:	ff d2                	call   *%rdx
   11e06:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11e0a:	48 89 82 d8 01 00 00 	mov    %rax,0x1d8(%rdx)
        vkCreateDescriptorPool             = PFN_vkCreateDescriptorPool( vkGetDeviceProcAddr( device, "vkCreateDescriptorPool" ) );
   11e11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e15:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11e19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e1d:	48 8d 0d 4a 8e 01 00 	lea    0x18e4a(%rip),%rcx        # 2ac6e <_ZNSt8__detailL19__atomic_spin_countE+0x47a>
   11e24:	48 89 ce             	mov    %rcx,%rsi
   11e27:	48 89 c7             	mov    %rax,%rdi
   11e2a:	ff d2                	call   *%rdx
   11e2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11e30:	48 89 82 e0 01 00 00 	mov    %rax,0x1e0(%rdx)
        vkDestroyDescriptorPool            = PFN_vkDestroyDescriptorPool( vkGetDeviceProcAddr( device, "vkDestroyDescriptorPool" ) );
   11e37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e3b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11e3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e43:	48 8d 0d 3b 8e 01 00 	lea    0x18e3b(%rip),%rcx        # 2ac85 <_ZNSt8__detailL19__atomic_spin_countE+0x491>
   11e4a:	48 89 ce             	mov    %rcx,%rsi
   11e4d:	48 89 c7             	mov    %rax,%rdi
   11e50:	ff d2                	call   *%rdx
   11e52:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11e56:	48 89 82 e8 01 00 00 	mov    %rax,0x1e8(%rdx)
        vkResetDescriptorPool              = PFN_vkResetDescriptorPool( vkGetDeviceProcAddr( device, "vkResetDescriptorPool" ) );
   11e5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e61:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11e65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e69:	48 8d 0d 2d 8e 01 00 	lea    0x18e2d(%rip),%rcx        # 2ac9d <_ZNSt8__detailL19__atomic_spin_countE+0x4a9>
   11e70:	48 89 ce             	mov    %rcx,%rsi
   11e73:	48 89 c7             	mov    %rax,%rdi
   11e76:	ff d2                	call   *%rdx
   11e78:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11e7c:	48 89 82 f0 01 00 00 	mov    %rax,0x1f0(%rdx)
        vkAllocateDescriptorSets           = PFN_vkAllocateDescriptorSets( vkGetDeviceProcAddr( device, "vkAllocateDescriptorSets" ) );
   11e83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e87:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11e8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e8f:	48 8d 0d 1d 8e 01 00 	lea    0x18e1d(%rip),%rcx        # 2acb3 <_ZNSt8__detailL19__atomic_spin_countE+0x4bf>
   11e96:	48 89 ce             	mov    %rcx,%rsi
   11e99:	48 89 c7             	mov    %rax,%rdi
   11e9c:	ff d2                	call   *%rdx
   11e9e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ea2:	48 89 82 f8 01 00 00 	mov    %rax,0x1f8(%rdx)
        vkFreeDescriptorSets               = PFN_vkFreeDescriptorSets( vkGetDeviceProcAddr( device, "vkFreeDescriptorSets" ) );
   11ea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ead:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11eb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11eb5:	48 8d 0d 10 8e 01 00 	lea    0x18e10(%rip),%rcx        # 2accc <_ZNSt8__detailL19__atomic_spin_countE+0x4d8>
   11ebc:	48 89 ce             	mov    %rcx,%rsi
   11ebf:	48 89 c7             	mov    %rax,%rdi
   11ec2:	ff d2                	call   *%rdx
   11ec4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ec8:	48 89 82 00 02 00 00 	mov    %rax,0x200(%rdx)
        vkUpdateDescriptorSets             = PFN_vkUpdateDescriptorSets( vkGetDeviceProcAddr( device, "vkUpdateDescriptorSets" ) );
   11ecf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ed3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11ed7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11edb:	48 8d 0d ff 8d 01 00 	lea    0x18dff(%rip),%rcx        # 2ace1 <_ZNSt8__detailL19__atomic_spin_countE+0x4ed>
   11ee2:	48 89 ce             	mov    %rcx,%rsi
   11ee5:	48 89 c7             	mov    %rax,%rdi
   11ee8:	ff d2                	call   *%rdx
   11eea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11eee:	48 89 82 08 02 00 00 	mov    %rax,0x208(%rdx)
        vkCreateFramebuffer                = PFN_vkCreateFramebuffer( vkGetDeviceProcAddr( device, "vkCreateFramebuffer" ) );
   11ef5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ef9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11efd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f01:	48 8d 0d f0 8d 01 00 	lea    0x18df0(%rip),%rcx        # 2acf8 <_ZNSt8__detailL19__atomic_spin_countE+0x504>
   11f08:	48 89 ce             	mov    %rcx,%rsi
   11f0b:	48 89 c7             	mov    %rax,%rdi
   11f0e:	ff d2                	call   *%rdx
   11f10:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11f14:	48 89 82 10 02 00 00 	mov    %rax,0x210(%rdx)
        vkDestroyFramebuffer               = PFN_vkDestroyFramebuffer( vkGetDeviceProcAddr( device, "vkDestroyFramebuffer" ) );
   11f1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f1f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11f23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f27:	48 8d 0d de 8d 01 00 	lea    0x18dde(%rip),%rcx        # 2ad0c <_ZNSt8__detailL19__atomic_spin_countE+0x518>
   11f2e:	48 89 ce             	mov    %rcx,%rsi
   11f31:	48 89 c7             	mov    %rax,%rdi
   11f34:	ff d2                	call   *%rdx
   11f36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11f3a:	48 89 82 18 02 00 00 	mov    %rax,0x218(%rdx)
        vkCreateRenderPass                 = PFN_vkCreateRenderPass( vkGetDeviceProcAddr( device, "vkCreateRenderPass" ) );
   11f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f45:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11f49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f4d:	48 8d 0d cd 8d 01 00 	lea    0x18dcd(%rip),%rcx        # 2ad21 <_ZNSt8__detailL19__atomic_spin_countE+0x52d>
   11f54:	48 89 ce             	mov    %rcx,%rsi
   11f57:	48 89 c7             	mov    %rax,%rdi
   11f5a:	ff d2                	call   *%rdx
   11f5c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11f60:	48 89 82 20 02 00 00 	mov    %rax,0x220(%rdx)
        vkDestroyRenderPass                = PFN_vkDestroyRenderPass( vkGetDeviceProcAddr( device, "vkDestroyRenderPass" ) );
   11f67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f6b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11f6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f73:	48 8d 0d ba 8d 01 00 	lea    0x18dba(%rip),%rcx        # 2ad34 <_ZNSt8__detailL19__atomic_spin_countE+0x540>
   11f7a:	48 89 ce             	mov    %rcx,%rsi
   11f7d:	48 89 c7             	mov    %rax,%rdi
   11f80:	ff d2                	call   *%rdx
   11f82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11f86:	48 89 82 28 02 00 00 	mov    %rax,0x228(%rdx)
        vkGetRenderAreaGranularity         = PFN_vkGetRenderAreaGranularity( vkGetDeviceProcAddr( device, "vkGetRenderAreaGranularity" ) );
   11f8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f91:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11f95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f99:	48 8d 0d a8 8d 01 00 	lea    0x18da8(%rip),%rcx        # 2ad48 <_ZNSt8__detailL19__atomic_spin_countE+0x554>
   11fa0:	48 89 ce             	mov    %rcx,%rsi
   11fa3:	48 89 c7             	mov    %rax,%rdi
   11fa6:	ff d2                	call   *%rdx
   11fa8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11fac:	48 89 82 30 02 00 00 	mov    %rax,0x230(%rdx)
        vkCreateCommandPool                = PFN_vkCreateCommandPool( vkGetDeviceProcAddr( device, "vkCreateCommandPool" ) );
   11fb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fb7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11fbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11fbf:	48 8d 0d 9d 8d 01 00 	lea    0x18d9d(%rip),%rcx        # 2ad63 <_ZNSt8__detailL19__atomic_spin_countE+0x56f>
   11fc6:	48 89 ce             	mov    %rcx,%rsi
   11fc9:	48 89 c7             	mov    %rax,%rdi
   11fcc:	ff d2                	call   *%rdx
   11fce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11fd2:	48 89 82 38 02 00 00 	mov    %rax,0x238(%rdx)
        vkDestroyCommandPool               = PFN_vkDestroyCommandPool( vkGetDeviceProcAddr( device, "vkDestroyCommandPool" ) );
   11fd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fdd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11fe1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11fe5:	48 8d 0d 8b 8d 01 00 	lea    0x18d8b(%rip),%rcx        # 2ad77 <_ZNSt8__detailL19__atomic_spin_countE+0x583>
   11fec:	48 89 ce             	mov    %rcx,%rsi
   11fef:	48 89 c7             	mov    %rax,%rdi
   11ff2:	ff d2                	call   *%rdx
   11ff4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ff8:	48 89 82 40 02 00 00 	mov    %rax,0x240(%rdx)
        vkResetCommandPool                 = PFN_vkResetCommandPool( vkGetDeviceProcAddr( device, "vkResetCommandPool" ) );
   11fff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12003:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12007:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1200b:	48 8d 0d 7a 8d 01 00 	lea    0x18d7a(%rip),%rcx        # 2ad8c <_ZNSt8__detailL19__atomic_spin_countE+0x598>
   12012:	48 89 ce             	mov    %rcx,%rsi
   12015:	48 89 c7             	mov    %rax,%rdi
   12018:	ff d2                	call   *%rdx
   1201a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1201e:	48 89 82 48 02 00 00 	mov    %rax,0x248(%rdx)
        vkAllocateCommandBuffers           = PFN_vkAllocateCommandBuffers( vkGetDeviceProcAddr( device, "vkAllocateCommandBuffers" ) );
   12025:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12029:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1202d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12031:	48 8d 0d 67 8d 01 00 	lea    0x18d67(%rip),%rcx        # 2ad9f <_ZNSt8__detailL19__atomic_spin_countE+0x5ab>
   12038:	48 89 ce             	mov    %rcx,%rsi
   1203b:	48 89 c7             	mov    %rax,%rdi
   1203e:	ff d2                	call   *%rdx
   12040:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12044:	48 89 82 50 02 00 00 	mov    %rax,0x250(%rdx)
        vkFreeCommandBuffers               = PFN_vkFreeCommandBuffers( vkGetDeviceProcAddr( device, "vkFreeCommandBuffers" ) );
   1204b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1204f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12053:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12057:	48 8d 0d 5a 8d 01 00 	lea    0x18d5a(%rip),%rcx        # 2adb8 <_ZNSt8__detailL19__atomic_spin_countE+0x5c4>
   1205e:	48 89 ce             	mov    %rcx,%rsi
   12061:	48 89 c7             	mov    %rax,%rdi
   12064:	ff d2                	call   *%rdx
   12066:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1206a:	48 89 82 58 02 00 00 	mov    %rax,0x258(%rdx)
        vkBeginCommandBuffer               = PFN_vkBeginCommandBuffer( vkGetDeviceProcAddr( device, "vkBeginCommandBuffer" ) );
   12071:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12075:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12079:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1207d:	48 8d 0d 49 8d 01 00 	lea    0x18d49(%rip),%rcx        # 2adcd <_ZNSt8__detailL19__atomic_spin_countE+0x5d9>
   12084:	48 89 ce             	mov    %rcx,%rsi
   12087:	48 89 c7             	mov    %rax,%rdi
   1208a:	ff d2                	call   *%rdx
   1208c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12090:	48 89 82 60 02 00 00 	mov    %rax,0x260(%rdx)
        vkEndCommandBuffer                 = PFN_vkEndCommandBuffer( vkGetDeviceProcAddr( device, "vkEndCommandBuffer" ) );
   12097:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1209b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1209f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   120a3:	48 8d 0d 38 8d 01 00 	lea    0x18d38(%rip),%rcx        # 2ade2 <_ZNSt8__detailL19__atomic_spin_countE+0x5ee>
   120aa:	48 89 ce             	mov    %rcx,%rsi
   120ad:	48 89 c7             	mov    %rax,%rdi
   120b0:	ff d2                	call   *%rdx
   120b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   120b6:	48 89 82 68 02 00 00 	mov    %rax,0x268(%rdx)
        vkResetCommandBuffer               = PFN_vkResetCommandBuffer( vkGetDeviceProcAddr( device, "vkResetCommandBuffer" ) );
   120bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   120c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   120c9:	48 8d 0d 25 8d 01 00 	lea    0x18d25(%rip),%rcx        # 2adf5 <_ZNSt8__detailL19__atomic_spin_countE+0x601>
   120d0:	48 89 ce             	mov    %rcx,%rsi
   120d3:	48 89 c7             	mov    %rax,%rdi
   120d6:	ff d2                	call   *%rdx
   120d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   120dc:	48 89 82 70 02 00 00 	mov    %rax,0x270(%rdx)
        vkCmdBindPipeline                  = PFN_vkCmdBindPipeline( vkGetDeviceProcAddr( device, "vkCmdBindPipeline" ) );
   120e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   120eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   120ef:	48 8d 0d 14 8d 01 00 	lea    0x18d14(%rip),%rcx        # 2ae0a <_ZNSt8__detailL19__atomic_spin_countE+0x616>
   120f6:	48 89 ce             	mov    %rcx,%rsi
   120f9:	48 89 c7             	mov    %rax,%rdi
   120fc:	ff d2                	call   *%rdx
   120fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12102:	48 89 82 78 02 00 00 	mov    %rax,0x278(%rdx)
        vkCmdSetViewport                   = PFN_vkCmdSetViewport( vkGetDeviceProcAddr( device, "vkCmdSetViewport" ) );
   12109:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1210d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12111:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12115:	48 8d 0d 00 8d 01 00 	lea    0x18d00(%rip),%rcx        # 2ae1c <_ZNSt8__detailL19__atomic_spin_countE+0x628>
   1211c:	48 89 ce             	mov    %rcx,%rsi
   1211f:	48 89 c7             	mov    %rax,%rdi
   12122:	ff d2                	call   *%rdx
   12124:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12128:	48 89 82 80 02 00 00 	mov    %rax,0x280(%rdx)
        vkCmdSetScissor                    = PFN_vkCmdSetScissor( vkGetDeviceProcAddr( device, "vkCmdSetScissor" ) );
   1212f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12133:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12137:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1213b:	48 8d 0d eb 8c 01 00 	lea    0x18ceb(%rip),%rcx        # 2ae2d <_ZNSt8__detailL19__atomic_spin_countE+0x639>
   12142:	48 89 ce             	mov    %rcx,%rsi
   12145:	48 89 c7             	mov    %rax,%rdi
   12148:	ff d2                	call   *%rdx
   1214a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1214e:	48 89 82 88 02 00 00 	mov    %rax,0x288(%rdx)
        vkCmdSetLineWidth                  = PFN_vkCmdSetLineWidth( vkGetDeviceProcAddr( device, "vkCmdSetLineWidth" ) );
   12155:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12159:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1215d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12161:	48 8d 0d d5 8c 01 00 	lea    0x18cd5(%rip),%rcx        # 2ae3d <_ZNSt8__detailL19__atomic_spin_countE+0x649>
   12168:	48 89 ce             	mov    %rcx,%rsi
   1216b:	48 89 c7             	mov    %rax,%rdi
   1216e:	ff d2                	call   *%rdx
   12170:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12174:	48 89 82 90 02 00 00 	mov    %rax,0x290(%rdx)
        vkCmdSetDepthBias                  = PFN_vkCmdSetDepthBias( vkGetDeviceProcAddr( device, "vkCmdSetDepthBias" ) );
   1217b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1217f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12183:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12187:	48 8d 0d c1 8c 01 00 	lea    0x18cc1(%rip),%rcx        # 2ae4f <_ZNSt8__detailL19__atomic_spin_countE+0x65b>
   1218e:	48 89 ce             	mov    %rcx,%rsi
   12191:	48 89 c7             	mov    %rax,%rdi
   12194:	ff d2                	call   *%rdx
   12196:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1219a:	48 89 82 98 02 00 00 	mov    %rax,0x298(%rdx)
        vkCmdSetBlendConstants             = PFN_vkCmdSetBlendConstants( vkGetDeviceProcAddr( device, "vkCmdSetBlendConstants" ) );
   121a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121a5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   121a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   121ad:	48 8d 0d ad 8c 01 00 	lea    0x18cad(%rip),%rcx        # 2ae61 <_ZNSt8__detailL19__atomic_spin_countE+0x66d>
   121b4:	48 89 ce             	mov    %rcx,%rsi
   121b7:	48 89 c7             	mov    %rax,%rdi
   121ba:	ff d2                	call   *%rdx
   121bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   121c0:	48 89 82 a0 02 00 00 	mov    %rax,0x2a0(%rdx)
        vkCmdSetDepthBounds                = PFN_vkCmdSetDepthBounds( vkGetDeviceProcAddr( device, "vkCmdSetDepthBounds" ) );
   121c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121cb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   121cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   121d3:	48 8d 0d 9e 8c 01 00 	lea    0x18c9e(%rip),%rcx        # 2ae78 <_ZNSt8__detailL19__atomic_spin_countE+0x684>
   121da:	48 89 ce             	mov    %rcx,%rsi
   121dd:	48 89 c7             	mov    %rax,%rdi
   121e0:	ff d2                	call   *%rdx
   121e2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   121e6:	48 89 82 a8 02 00 00 	mov    %rax,0x2a8(%rdx)
        vkCmdSetStencilCompareMask         = PFN_vkCmdSetStencilCompareMask( vkGetDeviceProcAddr( device, "vkCmdSetStencilCompareMask" ) );
   121ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121f1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   121f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   121f9:	48 8d 0d 8c 8c 01 00 	lea    0x18c8c(%rip),%rcx        # 2ae8c <_ZNSt8__detailL19__atomic_spin_countE+0x698>
   12200:	48 89 ce             	mov    %rcx,%rsi
   12203:	48 89 c7             	mov    %rax,%rdi
   12206:	ff d2                	call   *%rdx
   12208:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1220c:	48 89 82 b0 02 00 00 	mov    %rax,0x2b0(%rdx)
        vkCmdSetStencilWriteMask           = PFN_vkCmdSetStencilWriteMask( vkGetDeviceProcAddr( device, "vkCmdSetStencilWriteMask" ) );
   12213:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12217:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1221b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1221f:	48 8d 0d 81 8c 01 00 	lea    0x18c81(%rip),%rcx        # 2aea7 <_ZNSt8__detailL19__atomic_spin_countE+0x6b3>
   12226:	48 89 ce             	mov    %rcx,%rsi
   12229:	48 89 c7             	mov    %rax,%rdi
   1222c:	ff d2                	call   *%rdx
   1222e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12232:	48 89 82 b8 02 00 00 	mov    %rax,0x2b8(%rdx)
        vkCmdSetStencilReference           = PFN_vkCmdSetStencilReference( vkGetDeviceProcAddr( device, "vkCmdSetStencilReference" ) );
   12239:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1223d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12241:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12245:	48 8d 0d 74 8c 01 00 	lea    0x18c74(%rip),%rcx        # 2aec0 <_ZNSt8__detailL19__atomic_spin_countE+0x6cc>
   1224c:	48 89 ce             	mov    %rcx,%rsi
   1224f:	48 89 c7             	mov    %rax,%rdi
   12252:	ff d2                	call   *%rdx
   12254:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12258:	48 89 82 c0 02 00 00 	mov    %rax,0x2c0(%rdx)
        vkCmdBindDescriptorSets            = PFN_vkCmdBindDescriptorSets( vkGetDeviceProcAddr( device, "vkCmdBindDescriptorSets" ) );
   1225f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12263:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12267:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1226b:	48 8d 0d 67 8c 01 00 	lea    0x18c67(%rip),%rcx        # 2aed9 <_ZNSt8__detailL19__atomic_spin_countE+0x6e5>
   12272:	48 89 ce             	mov    %rcx,%rsi
   12275:	48 89 c7             	mov    %rax,%rdi
   12278:	ff d2                	call   *%rdx
   1227a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1227e:	48 89 82 c8 02 00 00 	mov    %rax,0x2c8(%rdx)
        vkCmdBindIndexBuffer               = PFN_vkCmdBindIndexBuffer( vkGetDeviceProcAddr( device, "vkCmdBindIndexBuffer" ) );
   12285:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12289:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1228d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12291:	48 8d 0d 59 8c 01 00 	lea    0x18c59(%rip),%rcx        # 2aef1 <_ZNSt8__detailL19__atomic_spin_countE+0x6fd>
   12298:	48 89 ce             	mov    %rcx,%rsi
   1229b:	48 89 c7             	mov    %rax,%rdi
   1229e:	ff d2                	call   *%rdx
   122a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   122a4:	48 89 82 d0 02 00 00 	mov    %rax,0x2d0(%rdx)
        vkCmdBindVertexBuffers             = PFN_vkCmdBindVertexBuffers( vkGetDeviceProcAddr( device, "vkCmdBindVertexBuffers" ) );
   122ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122af:	48 8b 50 10          	mov    0x10(%rax),%rdx
   122b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   122b7:	48 8d 0d 48 8c 01 00 	lea    0x18c48(%rip),%rcx        # 2af06 <_ZNSt8__detailL19__atomic_spin_countE+0x712>
   122be:	48 89 ce             	mov    %rcx,%rsi
   122c1:	48 89 c7             	mov    %rax,%rdi
   122c4:	ff d2                	call   *%rdx
   122c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   122ca:	48 89 82 d8 02 00 00 	mov    %rax,0x2d8(%rdx)
        vkCmdDraw                          = PFN_vkCmdDraw( vkGetDeviceProcAddr( device, "vkCmdDraw" ) );
   122d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   122d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   122dd:	48 8d 0d 39 8c 01 00 	lea    0x18c39(%rip),%rcx        # 2af1d <_ZNSt8__detailL19__atomic_spin_countE+0x729>
   122e4:	48 89 ce             	mov    %rcx,%rsi
   122e7:	48 89 c7             	mov    %rax,%rdi
   122ea:	ff d2                	call   *%rdx
   122ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   122f0:	48 89 82 e0 02 00 00 	mov    %rax,0x2e0(%rdx)
        vkCmdDrawIndexed                   = PFN_vkCmdDrawIndexed( vkGetDeviceProcAddr( device, "vkCmdDrawIndexed" ) );
   122f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122fb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   122ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12303:	48 8d 0d 1d 8c 01 00 	lea    0x18c1d(%rip),%rcx        # 2af27 <_ZNSt8__detailL19__atomic_spin_countE+0x733>
   1230a:	48 89 ce             	mov    %rcx,%rsi
   1230d:	48 89 c7             	mov    %rax,%rdi
   12310:	ff d2                	call   *%rdx
   12312:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12316:	48 89 82 e8 02 00 00 	mov    %rax,0x2e8(%rdx)
        vkCmdDrawIndirect                  = PFN_vkCmdDrawIndirect( vkGetDeviceProcAddr( device, "vkCmdDrawIndirect" ) );
   1231d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12321:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12325:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12329:	48 8d 0d 08 8c 01 00 	lea    0x18c08(%rip),%rcx        # 2af38 <_ZNSt8__detailL19__atomic_spin_countE+0x744>
   12330:	48 89 ce             	mov    %rcx,%rsi
   12333:	48 89 c7             	mov    %rax,%rdi
   12336:	ff d2                	call   *%rdx
   12338:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1233c:	48 89 82 f0 02 00 00 	mov    %rax,0x2f0(%rdx)
        vkCmdDrawIndexedIndirect           = PFN_vkCmdDrawIndexedIndirect( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirect" ) );
   12343:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12347:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1234b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1234f:	48 8d 0d f4 8b 01 00 	lea    0x18bf4(%rip),%rcx        # 2af4a <_ZNSt8__detailL19__atomic_spin_countE+0x756>
   12356:	48 89 ce             	mov    %rcx,%rsi
   12359:	48 89 c7             	mov    %rax,%rdi
   1235c:	ff d2                	call   *%rdx
   1235e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12362:	48 89 82 f8 02 00 00 	mov    %rax,0x2f8(%rdx)
        vkCmdDispatch                      = PFN_vkCmdDispatch( vkGetDeviceProcAddr( device, "vkCmdDispatch" ) );
   12369:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1236d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12371:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12375:	48 8d 0d e7 8b 01 00 	lea    0x18be7(%rip),%rcx        # 2af63 <_ZNSt8__detailL19__atomic_spin_countE+0x76f>
   1237c:	48 89 ce             	mov    %rcx,%rsi
   1237f:	48 89 c7             	mov    %rax,%rdi
   12382:	ff d2                	call   *%rdx
   12384:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12388:	48 89 82 00 03 00 00 	mov    %rax,0x300(%rdx)
        vkCmdDispatchIndirect              = PFN_vkCmdDispatchIndirect( vkGetDeviceProcAddr( device, "vkCmdDispatchIndirect" ) );
   1238f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12393:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12397:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1239b:	48 8d 0d cf 8b 01 00 	lea    0x18bcf(%rip),%rcx        # 2af71 <_ZNSt8__detailL19__atomic_spin_countE+0x77d>
   123a2:	48 89 ce             	mov    %rcx,%rsi
   123a5:	48 89 c7             	mov    %rax,%rdi
   123a8:	ff d2                	call   *%rdx
   123aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   123ae:	48 89 82 08 03 00 00 	mov    %rax,0x308(%rdx)
        vkCmdCopyBuffer                    = PFN_vkCmdCopyBuffer( vkGetDeviceProcAddr( device, "vkCmdCopyBuffer" ) );
   123b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123b9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   123bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   123c1:	48 8d 0d bf 8b 01 00 	lea    0x18bbf(%rip),%rcx        # 2af87 <_ZNSt8__detailL19__atomic_spin_countE+0x793>
   123c8:	48 89 ce             	mov    %rcx,%rsi
   123cb:	48 89 c7             	mov    %rax,%rdi
   123ce:	ff d2                	call   *%rdx
   123d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   123d4:	48 89 82 10 03 00 00 	mov    %rax,0x310(%rdx)
        vkCmdCopyImage                     = PFN_vkCmdCopyImage( vkGetDeviceProcAddr( device, "vkCmdCopyImage" ) );
   123db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123df:	48 8b 50 10          	mov    0x10(%rax),%rdx
   123e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   123e7:	48 8d 0d a9 8b 01 00 	lea    0x18ba9(%rip),%rcx        # 2af97 <_ZNSt8__detailL19__atomic_spin_countE+0x7a3>
   123ee:	48 89 ce             	mov    %rcx,%rsi
   123f1:	48 89 c7             	mov    %rax,%rdi
   123f4:	ff d2                	call   *%rdx
   123f6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   123fa:	48 89 82 18 03 00 00 	mov    %rax,0x318(%rdx)
        vkCmdBlitImage                     = PFN_vkCmdBlitImage( vkGetDeviceProcAddr( device, "vkCmdBlitImage" ) );
   12401:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12405:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12409:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1240d:	48 8d 0d 92 8b 01 00 	lea    0x18b92(%rip),%rcx        # 2afa6 <_ZNSt8__detailL19__atomic_spin_countE+0x7b2>
   12414:	48 89 ce             	mov    %rcx,%rsi
   12417:	48 89 c7             	mov    %rax,%rdi
   1241a:	ff d2                	call   *%rdx
   1241c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12420:	48 89 82 20 03 00 00 	mov    %rax,0x320(%rdx)
        vkCmdCopyBufferToImage             = PFN_vkCmdCopyBufferToImage( vkGetDeviceProcAddr( device, "vkCmdCopyBufferToImage" ) );
   12427:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1242b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1242f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12433:	48 8d 0d 7b 8b 01 00 	lea    0x18b7b(%rip),%rcx        # 2afb5 <_ZNSt8__detailL19__atomic_spin_countE+0x7c1>
   1243a:	48 89 ce             	mov    %rcx,%rsi
   1243d:	48 89 c7             	mov    %rax,%rdi
   12440:	ff d2                	call   *%rdx
   12442:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12446:	48 89 82 28 03 00 00 	mov    %rax,0x328(%rdx)
        vkCmdCopyImageToBuffer             = PFN_vkCmdCopyImageToBuffer( vkGetDeviceProcAddr( device, "vkCmdCopyImageToBuffer" ) );
   1244d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12451:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12455:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12459:	48 8d 0d 6c 8b 01 00 	lea    0x18b6c(%rip),%rcx        # 2afcc <_ZNSt8__detailL19__atomic_spin_countE+0x7d8>
   12460:	48 89 ce             	mov    %rcx,%rsi
   12463:	48 89 c7             	mov    %rax,%rdi
   12466:	ff d2                	call   *%rdx
   12468:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1246c:	48 89 82 30 03 00 00 	mov    %rax,0x330(%rdx)
        vkCmdUpdateBuffer                  = PFN_vkCmdUpdateBuffer( vkGetDeviceProcAddr( device, "vkCmdUpdateBuffer" ) );
   12473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12477:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1247b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1247f:	48 8d 0d 5d 8b 01 00 	lea    0x18b5d(%rip),%rcx        # 2afe3 <_ZNSt8__detailL19__atomic_spin_countE+0x7ef>
   12486:	48 89 ce             	mov    %rcx,%rsi
   12489:	48 89 c7             	mov    %rax,%rdi
   1248c:	ff d2                	call   *%rdx
   1248e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12492:	48 89 82 38 03 00 00 	mov    %rax,0x338(%rdx)
        vkCmdFillBuffer                    = PFN_vkCmdFillBuffer( vkGetDeviceProcAddr( device, "vkCmdFillBuffer" ) );
   12499:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1249d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   124a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   124a5:	48 8d 0d 49 8b 01 00 	lea    0x18b49(%rip),%rcx        # 2aff5 <_ZNSt8__detailL19__atomic_spin_countE+0x801>
   124ac:	48 89 ce             	mov    %rcx,%rsi
   124af:	48 89 c7             	mov    %rax,%rdi
   124b2:	ff d2                	call   *%rdx
   124b4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   124b8:	48 89 82 40 03 00 00 	mov    %rax,0x340(%rdx)
        vkCmdClearColorImage               = PFN_vkCmdClearColorImage( vkGetDeviceProcAddr( device, "vkCmdClearColorImage" ) );
   124bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   124c3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   124c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   124cb:	48 8d 0d 33 8b 01 00 	lea    0x18b33(%rip),%rcx        # 2b005 <_ZNSt8__detailL19__atomic_spin_countE+0x811>
   124d2:	48 89 ce             	mov    %rcx,%rsi
   124d5:	48 89 c7             	mov    %rax,%rdi
   124d8:	ff d2                	call   *%rdx
   124da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   124de:	48 89 82 48 03 00 00 	mov    %rax,0x348(%rdx)
        vkCmdClearDepthStencilImage        = PFN_vkCmdClearDepthStencilImage( vkGetDeviceProcAddr( device, "vkCmdClearDepthStencilImage" ) );
   124e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   124e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   124ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   124f1:	48 8d 0d 22 8b 01 00 	lea    0x18b22(%rip),%rcx        # 2b01a <_ZNSt8__detailL19__atomic_spin_countE+0x826>
   124f8:	48 89 ce             	mov    %rcx,%rsi
   124fb:	48 89 c7             	mov    %rax,%rdi
   124fe:	ff d2                	call   *%rdx
   12500:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12504:	48 89 82 50 03 00 00 	mov    %rax,0x350(%rdx)
        vkCmdClearAttachments              = PFN_vkCmdClearAttachments( vkGetDeviceProcAddr( device, "vkCmdClearAttachments" ) );
   1250b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1250f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12513:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12517:	48 8d 0d 18 8b 01 00 	lea    0x18b18(%rip),%rcx        # 2b036 <_ZNSt8__detailL19__atomic_spin_countE+0x842>
   1251e:	48 89 ce             	mov    %rcx,%rsi
   12521:	48 89 c7             	mov    %rax,%rdi
   12524:	ff d2                	call   *%rdx
   12526:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1252a:	48 89 82 58 03 00 00 	mov    %rax,0x358(%rdx)
        vkCmdResolveImage                  = PFN_vkCmdResolveImage( vkGetDeviceProcAddr( device, "vkCmdResolveImage" ) );
   12531:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12535:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12539:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1253d:	48 8d 0d 08 8b 01 00 	lea    0x18b08(%rip),%rcx        # 2b04c <_ZNSt8__detailL19__atomic_spin_countE+0x858>
   12544:	48 89 ce             	mov    %rcx,%rsi
   12547:	48 89 c7             	mov    %rax,%rdi
   1254a:	ff d2                	call   *%rdx
   1254c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12550:	48 89 82 60 03 00 00 	mov    %rax,0x360(%rdx)
        vkCmdSetEvent                      = PFN_vkCmdSetEvent( vkGetDeviceProcAddr( device, "vkCmdSetEvent" ) );
   12557:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1255b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1255f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12563:	48 8d 0d f4 8a 01 00 	lea    0x18af4(%rip),%rcx        # 2b05e <_ZNSt8__detailL19__atomic_spin_countE+0x86a>
   1256a:	48 89 ce             	mov    %rcx,%rsi
   1256d:	48 89 c7             	mov    %rax,%rdi
   12570:	ff d2                	call   *%rdx
   12572:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12576:	48 89 82 68 03 00 00 	mov    %rax,0x368(%rdx)
        vkCmdResetEvent                    = PFN_vkCmdResetEvent( vkGetDeviceProcAddr( device, "vkCmdResetEvent" ) );
   1257d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12581:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12585:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12589:	48 8d 0d dc 8a 01 00 	lea    0x18adc(%rip),%rcx        # 2b06c <_ZNSt8__detailL19__atomic_spin_countE+0x878>
   12590:	48 89 ce             	mov    %rcx,%rsi
   12593:	48 89 c7             	mov    %rax,%rdi
   12596:	ff d2                	call   *%rdx
   12598:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1259c:	48 89 82 70 03 00 00 	mov    %rax,0x370(%rdx)
        vkCmdWaitEvents                    = PFN_vkCmdWaitEvents( vkGetDeviceProcAddr( device, "vkCmdWaitEvents" ) );
   125a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   125a7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   125ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   125af:	48 8d 0d c6 8a 01 00 	lea    0x18ac6(%rip),%rcx        # 2b07c <_ZNSt8__detailL19__atomic_spin_countE+0x888>
   125b6:	48 89 ce             	mov    %rcx,%rsi
   125b9:	48 89 c7             	mov    %rax,%rdi
   125bc:	ff d2                	call   *%rdx
   125be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   125c2:	48 89 82 78 03 00 00 	mov    %rax,0x378(%rdx)
        vkCmdPipelineBarrier               = PFN_vkCmdPipelineBarrier( vkGetDeviceProcAddr( device, "vkCmdPipelineBarrier" ) );
   125c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   125cd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   125d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   125d5:	48 8d 0d b0 8a 01 00 	lea    0x18ab0(%rip),%rcx        # 2b08c <_ZNSt8__detailL19__atomic_spin_countE+0x898>
   125dc:	48 89 ce             	mov    %rcx,%rsi
   125df:	48 89 c7             	mov    %rax,%rdi
   125e2:	ff d2                	call   *%rdx
   125e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   125e8:	48 89 82 80 03 00 00 	mov    %rax,0x380(%rdx)
        vkCmdBeginQuery                    = PFN_vkCmdBeginQuery( vkGetDeviceProcAddr( device, "vkCmdBeginQuery" ) );
   125ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   125f3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   125f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   125fb:	48 8d 0d 9f 8a 01 00 	lea    0x18a9f(%rip),%rcx        # 2b0a1 <_ZNSt8__detailL19__atomic_spin_countE+0x8ad>
   12602:	48 89 ce             	mov    %rcx,%rsi
   12605:	48 89 c7             	mov    %rax,%rdi
   12608:	ff d2                	call   *%rdx
   1260a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1260e:	48 89 82 88 03 00 00 	mov    %rax,0x388(%rdx)
        vkCmdEndQuery                      = PFN_vkCmdEndQuery( vkGetDeviceProcAddr( device, "vkCmdEndQuery" ) );
   12615:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12619:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1261d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12621:	48 8d 0d 89 8a 01 00 	lea    0x18a89(%rip),%rcx        # 2b0b1 <_ZNSt8__detailL19__atomic_spin_countE+0x8bd>
   12628:	48 89 ce             	mov    %rcx,%rsi
   1262b:	48 89 c7             	mov    %rax,%rdi
   1262e:	ff d2                	call   *%rdx
   12630:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12634:	48 89 82 90 03 00 00 	mov    %rax,0x390(%rdx)
        vkCmdResetQueryPool                = PFN_vkCmdResetQueryPool( vkGetDeviceProcAddr( device, "vkCmdResetQueryPool" ) );
   1263b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1263f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12643:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12647:	48 8d 0d 71 8a 01 00 	lea    0x18a71(%rip),%rcx        # 2b0bf <_ZNSt8__detailL19__atomic_spin_countE+0x8cb>
   1264e:	48 89 ce             	mov    %rcx,%rsi
   12651:	48 89 c7             	mov    %rax,%rdi
   12654:	ff d2                	call   *%rdx
   12656:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1265a:	48 89 82 98 03 00 00 	mov    %rax,0x398(%rdx)
        vkCmdWriteTimestamp                = PFN_vkCmdWriteTimestamp( vkGetDeviceProcAddr( device, "vkCmdWriteTimestamp" ) );
   12661:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12665:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12669:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1266d:	48 8d 0d 5f 8a 01 00 	lea    0x18a5f(%rip),%rcx        # 2b0d3 <_ZNSt8__detailL19__atomic_spin_countE+0x8df>
   12674:	48 89 ce             	mov    %rcx,%rsi
   12677:	48 89 c7             	mov    %rax,%rdi
   1267a:	ff d2                	call   *%rdx
   1267c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12680:	48 89 82 a0 03 00 00 	mov    %rax,0x3a0(%rdx)
        vkCmdCopyQueryPoolResults          = PFN_vkCmdCopyQueryPoolResults( vkGetDeviceProcAddr( device, "vkCmdCopyQueryPoolResults" ) );
   12687:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1268b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1268f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12693:	48 8d 0d 4d 8a 01 00 	lea    0x18a4d(%rip),%rcx        # 2b0e7 <_ZNSt8__detailL19__atomic_spin_countE+0x8f3>
   1269a:	48 89 ce             	mov    %rcx,%rsi
   1269d:	48 89 c7             	mov    %rax,%rdi
   126a0:	ff d2                	call   *%rdx
   126a2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   126a6:	48 89 82 a8 03 00 00 	mov    %rax,0x3a8(%rdx)
        vkCmdPushConstants                 = PFN_vkCmdPushConstants( vkGetDeviceProcAddr( device, "vkCmdPushConstants" ) );
   126ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   126b1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   126b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126b9:	48 8d 0d 41 8a 01 00 	lea    0x18a41(%rip),%rcx        # 2b101 <_ZNSt8__detailL19__atomic_spin_countE+0x90d>
   126c0:	48 89 ce             	mov    %rcx,%rsi
   126c3:	48 89 c7             	mov    %rax,%rdi
   126c6:	ff d2                	call   *%rdx
   126c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   126cc:	48 89 82 b0 03 00 00 	mov    %rax,0x3b0(%rdx)
        vkCmdBeginRenderPass               = PFN_vkCmdBeginRenderPass( vkGetDeviceProcAddr( device, "vkCmdBeginRenderPass" ) );
   126d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   126d7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   126db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126df:	48 8d 0d 2e 8a 01 00 	lea    0x18a2e(%rip),%rcx        # 2b114 <_ZNSt8__detailL19__atomic_spin_countE+0x920>
   126e6:	48 89 ce             	mov    %rcx,%rsi
   126e9:	48 89 c7             	mov    %rax,%rdi
   126ec:	ff d2                	call   *%rdx
   126ee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   126f2:	48 89 82 b8 03 00 00 	mov    %rax,0x3b8(%rdx)
        vkCmdNextSubpass                   = PFN_vkCmdNextSubpass( vkGetDeviceProcAddr( device, "vkCmdNextSubpass" ) );
   126f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   126fd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12701:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12705:	48 8d 0d 1d 8a 01 00 	lea    0x18a1d(%rip),%rcx        # 2b129 <_ZNSt8__detailL19__atomic_spin_countE+0x935>
   1270c:	48 89 ce             	mov    %rcx,%rsi
   1270f:	48 89 c7             	mov    %rax,%rdi
   12712:	ff d2                	call   *%rdx
   12714:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12718:	48 89 82 c0 03 00 00 	mov    %rax,0x3c0(%rdx)
        vkCmdEndRenderPass                 = PFN_vkCmdEndRenderPass( vkGetDeviceProcAddr( device, "vkCmdEndRenderPass" ) );
   1271f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12723:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12727:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1272b:	48 8d 0d 08 8a 01 00 	lea    0x18a08(%rip),%rcx        # 2b13a <_ZNSt8__detailL19__atomic_spin_countE+0x946>
   12732:	48 89 ce             	mov    %rcx,%rsi
   12735:	48 89 c7             	mov    %rax,%rdi
   12738:	ff d2                	call   *%rdx
   1273a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1273e:	48 89 82 c8 03 00 00 	mov    %rax,0x3c8(%rdx)
        vkCmdExecuteCommands               = PFN_vkCmdExecuteCommands( vkGetDeviceProcAddr( device, "vkCmdExecuteCommands" ) );
   12745:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12749:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1274d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12751:	48 8d 0d f5 89 01 00 	lea    0x189f5(%rip),%rcx        # 2b14d <_ZNSt8__detailL19__atomic_spin_countE+0x959>
   12758:	48 89 ce             	mov    %rcx,%rsi
   1275b:	48 89 c7             	mov    %rax,%rdi
   1275e:	ff d2                	call   *%rdx
   12760:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12764:	48 89 82 d0 03 00 00 	mov    %rax,0x3d0(%rdx)
        vkBindBufferMemory2                 = PFN_vkBindBufferMemory2( vkGetDeviceProcAddr( device, "vkBindBufferMemory2" ) );
   1276b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1276f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12773:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12777:	48 8d 0d e4 89 01 00 	lea    0x189e4(%rip),%rcx        # 2b162 <_ZNSt8__detailL19__atomic_spin_countE+0x96e>
   1277e:	48 89 ce             	mov    %rcx,%rsi
   12781:	48 89 c7             	mov    %rax,%rdi
   12784:	ff d2                	call   *%rdx
   12786:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1278a:	48 89 82 d8 03 00 00 	mov    %rax,0x3d8(%rdx)
        vkBindImageMemory2                  = PFN_vkBindImageMemory2( vkGetDeviceProcAddr( device, "vkBindImageMemory2" ) );
   12791:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12795:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12799:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1279d:	48 8d 0d d2 89 01 00 	lea    0x189d2(%rip),%rcx        # 2b176 <_ZNSt8__detailL19__atomic_spin_countE+0x982>
   127a4:	48 89 ce             	mov    %rcx,%rsi
   127a7:	48 89 c7             	mov    %rax,%rdi
   127aa:	ff d2                	call   *%rdx
   127ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   127b0:	48 89 82 e0 03 00 00 	mov    %rax,0x3e0(%rdx)
        vkGetDeviceGroupPeerMemoryFeatures  = PFN_vkGetDeviceGroupPeerMemoryFeatures( vkGetDeviceProcAddr( device, "vkGetDeviceGroupPeerMemoryFeatures" ) );
   127b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   127bb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   127bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   127c3:	48 8d 0d c6 89 01 00 	lea    0x189c6(%rip),%rcx        # 2b190 <_ZNSt8__detailL19__atomic_spin_countE+0x99c>
   127ca:	48 89 ce             	mov    %rcx,%rsi
   127cd:	48 89 c7             	mov    %rax,%rdi
   127d0:	ff d2                	call   *%rdx
   127d2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   127d6:	48 89 82 e8 03 00 00 	mov    %rax,0x3e8(%rdx)
        vkCmdSetDeviceMask                  = PFN_vkCmdSetDeviceMask( vkGetDeviceProcAddr( device, "vkCmdSetDeviceMask" ) );
   127dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   127e1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   127e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   127e9:	48 8d 0d c3 89 01 00 	lea    0x189c3(%rip),%rcx        # 2b1b3 <_ZNSt8__detailL19__atomic_spin_countE+0x9bf>
   127f0:	48 89 ce             	mov    %rcx,%rsi
   127f3:	48 89 c7             	mov    %rax,%rdi
   127f6:	ff d2                	call   *%rdx
   127f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   127fc:	48 89 82 f0 03 00 00 	mov    %rax,0x3f0(%rdx)
        vkCmdDispatchBase                   = PFN_vkCmdDispatchBase( vkGetDeviceProcAddr( device, "vkCmdDispatchBase" ) );
   12803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12807:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1280b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1280f:	48 8d 0d b0 89 01 00 	lea    0x189b0(%rip),%rcx        # 2b1c6 <_ZNSt8__detailL19__atomic_spin_countE+0x9d2>
   12816:	48 89 ce             	mov    %rcx,%rsi
   12819:	48 89 c7             	mov    %rax,%rdi
   1281c:	ff d2                	call   *%rdx
   1281e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12822:	48 89 82 f8 03 00 00 	mov    %rax,0x3f8(%rdx)
        vkGetImageMemoryRequirements2       = PFN_vkGetImageMemoryRequirements2( vkGetDeviceProcAddr( device, "vkGetImageMemoryRequirements2" ) );
   12829:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1282d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12831:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12835:	48 8d 0d 9c 89 01 00 	lea    0x1899c(%rip),%rcx        # 2b1d8 <_ZNSt8__detailL19__atomic_spin_countE+0x9e4>
   1283c:	48 89 ce             	mov    %rcx,%rsi
   1283f:	48 89 c7             	mov    %rax,%rdi
   12842:	ff d2                	call   *%rdx
   12844:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12848:	48 89 82 00 04 00 00 	mov    %rax,0x400(%rdx)
        vkGetBufferMemoryRequirements2      = PFN_vkGetBufferMemoryRequirements2( vkGetDeviceProcAddr( device, "vkGetBufferMemoryRequirements2" ) );
   1284f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12853:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12857:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1285b:	48 8d 0d 96 89 01 00 	lea    0x18996(%rip),%rcx        # 2b1f8 <_ZNSt8__detailL19__atomic_spin_countE+0xa04>
   12862:	48 89 ce             	mov    %rcx,%rsi
   12865:	48 89 c7             	mov    %rax,%rdi
   12868:	ff d2                	call   *%rdx
   1286a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1286e:	48 89 82 08 04 00 00 	mov    %rax,0x408(%rdx)
        vkGetImageSparseMemoryRequirements2 = PFN_vkGetImageSparseMemoryRequirements2( vkGetDeviceProcAddr( device, "vkGetImageSparseMemoryRequirements2" ) );
   12875:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12879:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1287d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12881:	48 8d 0d 90 89 01 00 	lea    0x18990(%rip),%rcx        # 2b218 <_ZNSt8__detailL19__atomic_spin_countE+0xa24>
   12888:	48 89 ce             	mov    %rcx,%rsi
   1288b:	48 89 c7             	mov    %rax,%rdi
   1288e:	ff d2                	call   *%rdx
   12890:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12894:	48 89 82 10 04 00 00 	mov    %rax,0x410(%rdx)
        vkTrimCommandPool                   = PFN_vkTrimCommandPool( vkGetDeviceProcAddr( device, "vkTrimCommandPool" ) );
   1289b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1289f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   128a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   128a7:	48 8d 0d 8e 89 01 00 	lea    0x1898e(%rip),%rcx        # 2b23c <_ZNSt8__detailL19__atomic_spin_countE+0xa48>
   128ae:	48 89 ce             	mov    %rcx,%rsi
   128b1:	48 89 c7             	mov    %rax,%rdi
   128b4:	ff d2                	call   *%rdx
   128b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   128ba:	48 89 82 18 04 00 00 	mov    %rax,0x418(%rdx)
        vkGetDeviceQueue2                   = PFN_vkGetDeviceQueue2( vkGetDeviceProcAddr( device, "vkGetDeviceQueue2" ) );
   128c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128c5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   128c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   128cd:	48 8d 0d 7a 89 01 00 	lea    0x1897a(%rip),%rcx        # 2b24e <_ZNSt8__detailL19__atomic_spin_countE+0xa5a>
   128d4:	48 89 ce             	mov    %rcx,%rsi
   128d7:	48 89 c7             	mov    %rax,%rdi
   128da:	ff d2                	call   *%rdx
   128dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   128e0:	48 89 82 20 04 00 00 	mov    %rax,0x420(%rdx)
        vkCreateSamplerYcbcrConversion      = PFN_vkCreateSamplerYcbcrConversion( vkGetDeviceProcAddr( device, "vkCreateSamplerYcbcrConversion" ) );
   128e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   128ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   128f3:	48 8d 0d 66 89 01 00 	lea    0x18966(%rip),%rcx        # 2b260 <_ZNSt8__detailL19__atomic_spin_countE+0xa6c>
   128fa:	48 89 ce             	mov    %rcx,%rsi
   128fd:	48 89 c7             	mov    %rax,%rdi
   12900:	ff d2                	call   *%rdx
   12902:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12906:	48 89 82 28 04 00 00 	mov    %rax,0x428(%rdx)
        vkDestroySamplerYcbcrConversion     = PFN_vkDestroySamplerYcbcrConversion( vkGetDeviceProcAddr( device, "vkDestroySamplerYcbcrConversion" ) );
   1290d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12911:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12915:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12919:	48 8d 0d 60 89 01 00 	lea    0x18960(%rip),%rcx        # 2b280 <_ZNSt8__detailL19__atomic_spin_countE+0xa8c>
   12920:	48 89 ce             	mov    %rcx,%rsi
   12923:	48 89 c7             	mov    %rax,%rdi
   12926:	ff d2                	call   *%rdx
   12928:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1292c:	48 89 82 30 04 00 00 	mov    %rax,0x430(%rdx)
        vkCreateDescriptorUpdateTemplate    = PFN_vkCreateDescriptorUpdateTemplate( vkGetDeviceProcAddr( device, "vkCreateDescriptorUpdateTemplate" ) );
   12933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12937:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1293b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1293f:	48 8d 0d 5a 89 01 00 	lea    0x1895a(%rip),%rcx        # 2b2a0 <_ZNSt8__detailL19__atomic_spin_countE+0xaac>
   12946:	48 89 ce             	mov    %rcx,%rsi
   12949:	48 89 c7             	mov    %rax,%rdi
   1294c:	ff d2                	call   *%rdx
   1294e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12952:	48 89 82 38 04 00 00 	mov    %rax,0x438(%rdx)
        vkDestroyDescriptorUpdateTemplate   = PFN_vkDestroyDescriptorUpdateTemplate( vkGetDeviceProcAddr( device, "vkDestroyDescriptorUpdateTemplate" ) );
   12959:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1295d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12961:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12965:	48 8d 0d 5c 89 01 00 	lea    0x1895c(%rip),%rcx        # 2b2c8 <_ZNSt8__detailL19__atomic_spin_countE+0xad4>
   1296c:	48 89 ce             	mov    %rcx,%rsi
   1296f:	48 89 c7             	mov    %rax,%rdi
   12972:	ff d2                	call   *%rdx
   12974:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12978:	48 89 82 40 04 00 00 	mov    %rax,0x440(%rdx)
        vkUpdateDescriptorSetWithTemplate   = PFN_vkUpdateDescriptorSetWithTemplate( vkGetDeviceProcAddr( device, "vkUpdateDescriptorSetWithTemplate" ) );
   1297f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12983:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12987:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1298b:	48 8d 0d 5e 89 01 00 	lea    0x1895e(%rip),%rcx        # 2b2f0 <_ZNSt8__detailL19__atomic_spin_countE+0xafc>
   12992:	48 89 ce             	mov    %rcx,%rsi
   12995:	48 89 c7             	mov    %rax,%rdi
   12998:	ff d2                	call   *%rdx
   1299a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1299e:	48 89 82 48 04 00 00 	mov    %rax,0x448(%rdx)
        vkGetDescriptorSetLayoutSupport     = PFN_vkGetDescriptorSetLayoutSupport( vkGetDeviceProcAddr( device, "vkGetDescriptorSetLayoutSupport" ) );
   129a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   129a9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   129ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129b1:	48 8d 0d 60 89 01 00 	lea    0x18960(%rip),%rcx        # 2b318 <_ZNSt8__detailL19__atomic_spin_countE+0xb24>
   129b8:	48 89 ce             	mov    %rcx,%rsi
   129bb:	48 89 c7             	mov    %rax,%rdi
   129be:	ff d2                	call   *%rdx
   129c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   129c4:	48 89 82 50 04 00 00 	mov    %rax,0x450(%rdx)
        vkCmdDrawIndirectCount          = PFN_vkCmdDrawIndirectCount( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectCount" ) );
   129cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   129cf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   129d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129d7:	48 8d 0d 5a 89 01 00 	lea    0x1895a(%rip),%rcx        # 2b338 <_ZNSt8__detailL19__atomic_spin_countE+0xb44>
   129de:	48 89 ce             	mov    %rcx,%rsi
   129e1:	48 89 c7             	mov    %rax,%rdi
   129e4:	ff d2                	call   *%rdx
   129e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   129ea:	48 89 82 58 04 00 00 	mov    %rax,0x458(%rdx)
        vkCmdDrawIndexedIndirectCount   = PFN_vkCmdDrawIndexedIndirectCount( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirectCount" ) );
   129f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   129f5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   129f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129fd:	48 8d 0d 4b 89 01 00 	lea    0x1894b(%rip),%rcx        # 2b34f <_ZNSt8__detailL19__atomic_spin_countE+0xb5b>
   12a04:	48 89 ce             	mov    %rcx,%rsi
   12a07:	48 89 c7             	mov    %rax,%rdi
   12a0a:	ff d2                	call   *%rdx
   12a0c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a10:	48 89 82 60 04 00 00 	mov    %rax,0x460(%rdx)
        vkCreateRenderPass2             = PFN_vkCreateRenderPass2( vkGetDeviceProcAddr( device, "vkCreateRenderPass2" ) );
   12a17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a1b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a23:	48 8d 0d 43 89 01 00 	lea    0x18943(%rip),%rcx        # 2b36d <_ZNSt8__detailL19__atomic_spin_countE+0xb79>
   12a2a:	48 89 ce             	mov    %rcx,%rsi
   12a2d:	48 89 c7             	mov    %rax,%rdi
   12a30:	ff d2                	call   *%rdx
   12a32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a36:	48 89 82 68 04 00 00 	mov    %rax,0x468(%rdx)
        vkCmdBeginRenderPass2           = PFN_vkCmdBeginRenderPass2( vkGetDeviceProcAddr( device, "vkCmdBeginRenderPass2" ) );
   12a3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a41:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a49:	48 8d 0d 31 89 01 00 	lea    0x18931(%rip),%rcx        # 2b381 <_ZNSt8__detailL19__atomic_spin_countE+0xb8d>
   12a50:	48 89 ce             	mov    %rcx,%rsi
   12a53:	48 89 c7             	mov    %rax,%rdi
   12a56:	ff d2                	call   *%rdx
   12a58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a5c:	48 89 82 70 04 00 00 	mov    %rax,0x470(%rdx)
        vkCmdNextSubpass2               = PFN_vkCmdNextSubpass2( vkGetDeviceProcAddr( device, "vkCmdNextSubpass2" ) );
   12a63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a67:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a6f:	48 8d 0d 21 89 01 00 	lea    0x18921(%rip),%rcx        # 2b397 <_ZNSt8__detailL19__atomic_spin_countE+0xba3>
   12a76:	48 89 ce             	mov    %rcx,%rsi
   12a79:	48 89 c7             	mov    %rax,%rdi
   12a7c:	ff d2                	call   *%rdx
   12a7e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a82:	48 89 82 78 04 00 00 	mov    %rax,0x478(%rdx)
        vkCmdEndRenderPass2             = PFN_vkCmdEndRenderPass2( vkGetDeviceProcAddr( device, "vkCmdEndRenderPass2" ) );
   12a89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a8d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a95:	48 8d 0d 0d 89 01 00 	lea    0x1890d(%rip),%rcx        # 2b3a9 <_ZNSt8__detailL19__atomic_spin_countE+0xbb5>
   12a9c:	48 89 ce             	mov    %rcx,%rsi
   12a9f:	48 89 c7             	mov    %rax,%rdi
   12aa2:	ff d2                	call   *%rdx
   12aa4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12aa8:	48 89 82 80 04 00 00 	mov    %rax,0x480(%rdx)
        vkResetQueryPool                = PFN_vkResetQueryPool( vkGetDeviceProcAddr( device, "vkResetQueryPool" ) );
   12aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ab3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ab7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12abb:	48 8d 0d fb 88 01 00 	lea    0x188fb(%rip),%rcx        # 2b3bd <_ZNSt8__detailL19__atomic_spin_countE+0xbc9>
   12ac2:	48 89 ce             	mov    %rcx,%rsi
   12ac5:	48 89 c7             	mov    %rax,%rdi
   12ac8:	ff d2                	call   *%rdx
   12aca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ace:	48 89 82 88 04 00 00 	mov    %rax,0x488(%rdx)
        vkGetSemaphoreCounterValue      = PFN_vkGetSemaphoreCounterValue( vkGetDeviceProcAddr( device, "vkGetSemaphoreCounterValue" ) );
   12ad5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ad9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12add:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ae1:	48 8d 0d e6 88 01 00 	lea    0x188e6(%rip),%rcx        # 2b3ce <_ZNSt8__detailL19__atomic_spin_countE+0xbda>
   12ae8:	48 89 ce             	mov    %rcx,%rsi
   12aeb:	48 89 c7             	mov    %rax,%rdi
   12aee:	ff d2                	call   *%rdx
   12af0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12af4:	48 89 82 90 04 00 00 	mov    %rax,0x490(%rdx)
        vkWaitSemaphores                = PFN_vkWaitSemaphores( vkGetDeviceProcAddr( device, "vkWaitSemaphores" ) );
   12afb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12aff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b07:	48 8d 0d db 88 01 00 	lea    0x188db(%rip),%rcx        # 2b3e9 <_ZNSt8__detailL19__atomic_spin_countE+0xbf5>
   12b0e:	48 89 ce             	mov    %rcx,%rsi
   12b11:	48 89 c7             	mov    %rax,%rdi
   12b14:	ff d2                	call   *%rdx
   12b16:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b1a:	48 89 82 98 04 00 00 	mov    %rax,0x498(%rdx)
        vkSignalSemaphore               = PFN_vkSignalSemaphore( vkGetDeviceProcAddr( device, "vkSignalSemaphore" ) );
   12b21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b25:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b2d:	48 8d 0d c6 88 01 00 	lea    0x188c6(%rip),%rcx        # 2b3fa <_ZNSt8__detailL19__atomic_spin_countE+0xc06>
   12b34:	48 89 ce             	mov    %rcx,%rsi
   12b37:	48 89 c7             	mov    %rax,%rdi
   12b3a:	ff d2                	call   *%rdx
   12b3c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b40:	48 89 82 a0 04 00 00 	mov    %rax,0x4a0(%rdx)
        vkGetBufferDeviceAddress        = PFN_vkGetBufferDeviceAddress( vkGetDeviceProcAddr( device, "vkGetBufferDeviceAddress" ) );
   12b47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b4b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b53:	48 8d 0d b2 88 01 00 	lea    0x188b2(%rip),%rcx        # 2b40c <_ZNSt8__detailL19__atomic_spin_countE+0xc18>
   12b5a:	48 89 ce             	mov    %rcx,%rsi
   12b5d:	48 89 c7             	mov    %rax,%rdi
   12b60:	ff d2                	call   *%rdx
   12b62:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b66:	48 89 82 a8 04 00 00 	mov    %rax,0x4a8(%rdx)
        vkGetBufferOpaqueCaptureAddress = PFN_vkGetBufferOpaqueCaptureAddress( vkGetDeviceProcAddr( device, "vkGetBufferOpaqueCaptureAddress" ) );
   12b6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b71:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b79:	48 8d 0d a8 88 01 00 	lea    0x188a8(%rip),%rcx        # 2b428 <_ZNSt8__detailL19__atomic_spin_countE+0xc34>
   12b80:	48 89 ce             	mov    %rcx,%rsi
   12b83:	48 89 c7             	mov    %rax,%rdi
   12b86:	ff d2                	call   *%rdx
   12b88:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b8c:	48 89 82 b0 04 00 00 	mov    %rax,0x4b0(%rdx)
          PFN_vkGetDeviceMemoryOpaqueCaptureAddress( vkGetDeviceProcAddr( device, "vkGetDeviceMemoryOpaqueCaptureAddress" ) );
   12b93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b97:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b9f:	48 8d 0d a2 88 01 00 	lea    0x188a2(%rip),%rcx        # 2b448 <_ZNSt8__detailL19__atomic_spin_countE+0xc54>
   12ba6:	48 89 ce             	mov    %rcx,%rsi
   12ba9:	48 89 c7             	mov    %rax,%rdi
   12bac:	ff d2                	call   *%rdx
        vkGetDeviceMemoryOpaqueCaptureAddress =
   12bae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12bb2:	48 89 82 b8 04 00 00 	mov    %rax,0x4b8(%rdx)
        vkCreatePrivateDataSlot             = PFN_vkCreatePrivateDataSlot( vkGetDeviceProcAddr( device, "vkCreatePrivateDataSlot" ) );
   12bb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12bbd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12bc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12bc5:	48 8d 0d a2 88 01 00 	lea    0x188a2(%rip),%rcx        # 2b46e <_ZNSt8__detailL19__atomic_spin_countE+0xc7a>
   12bcc:	48 89 ce             	mov    %rcx,%rsi
   12bcf:	48 89 c7             	mov    %rax,%rdi
   12bd2:	ff d2                	call   *%rdx
   12bd4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12bd8:	48 89 82 c0 04 00 00 	mov    %rax,0x4c0(%rdx)
        vkDestroyPrivateDataSlot            = PFN_vkDestroyPrivateDataSlot( vkGetDeviceProcAddr( device, "vkDestroyPrivateDataSlot" ) );
   12bdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12be3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12be7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12beb:	48 8d 0d 94 88 01 00 	lea    0x18894(%rip),%rcx        # 2b486 <_ZNSt8__detailL19__atomic_spin_countE+0xc92>
   12bf2:	48 89 ce             	mov    %rcx,%rsi
   12bf5:	48 89 c7             	mov    %rax,%rdi
   12bf8:	ff d2                	call   *%rdx
   12bfa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12bfe:	48 89 82 c8 04 00 00 	mov    %rax,0x4c8(%rdx)
        vkSetPrivateData                    = PFN_vkSetPrivateData( vkGetDeviceProcAddr( device, "vkSetPrivateData" ) );
   12c05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c09:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c11:	48 8d 0d 87 88 01 00 	lea    0x18887(%rip),%rcx        # 2b49f <_ZNSt8__detailL19__atomic_spin_countE+0xcab>
   12c18:	48 89 ce             	mov    %rcx,%rsi
   12c1b:	48 89 c7             	mov    %rax,%rdi
   12c1e:	ff d2                	call   *%rdx
   12c20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c24:	48 89 82 d0 04 00 00 	mov    %rax,0x4d0(%rdx)
        vkGetPrivateData                    = PFN_vkGetPrivateData( vkGetDeviceProcAddr( device, "vkGetPrivateData" ) );
   12c2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c2f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c37:	48 8d 0d 72 88 01 00 	lea    0x18872(%rip),%rcx        # 2b4b0 <_ZNSt8__detailL19__atomic_spin_countE+0xcbc>
   12c3e:	48 89 ce             	mov    %rcx,%rsi
   12c41:	48 89 c7             	mov    %rax,%rdi
   12c44:	ff d2                	call   *%rdx
   12c46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c4a:	48 89 82 d8 04 00 00 	mov    %rax,0x4d8(%rdx)
        vkCmdSetEvent2                      = PFN_vkCmdSetEvent2( vkGetDeviceProcAddr( device, "vkCmdSetEvent2" ) );
   12c51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c55:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c5d:	48 8d 0d 5d 88 01 00 	lea    0x1885d(%rip),%rcx        # 2b4c1 <_ZNSt8__detailL19__atomic_spin_countE+0xccd>
   12c64:	48 89 ce             	mov    %rcx,%rsi
   12c67:	48 89 c7             	mov    %rax,%rdi
   12c6a:	ff d2                	call   *%rdx
   12c6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c70:	48 89 82 e0 04 00 00 	mov    %rax,0x4e0(%rdx)
        vkCmdResetEvent2                    = PFN_vkCmdResetEvent2( vkGetDeviceProcAddr( device, "vkCmdResetEvent2" ) );
   12c77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c7b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c83:	48 8d 0d 46 88 01 00 	lea    0x18846(%rip),%rcx        # 2b4d0 <_ZNSt8__detailL19__atomic_spin_countE+0xcdc>
   12c8a:	48 89 ce             	mov    %rcx,%rsi
   12c8d:	48 89 c7             	mov    %rax,%rdi
   12c90:	ff d2                	call   *%rdx
   12c92:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c96:	48 89 82 e8 04 00 00 	mov    %rax,0x4e8(%rdx)
        vkCmdWaitEvents2                    = PFN_vkCmdWaitEvents2( vkGetDeviceProcAddr( device, "vkCmdWaitEvents2" ) );
   12c9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ca1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ca5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ca9:	48 8d 0d 31 88 01 00 	lea    0x18831(%rip),%rcx        # 2b4e1 <_ZNSt8__detailL19__atomic_spin_countE+0xced>
   12cb0:	48 89 ce             	mov    %rcx,%rsi
   12cb3:	48 89 c7             	mov    %rax,%rdi
   12cb6:	ff d2                	call   *%rdx
   12cb8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12cbc:	48 89 82 f0 04 00 00 	mov    %rax,0x4f0(%rdx)
        vkCmdPipelineBarrier2               = PFN_vkCmdPipelineBarrier2( vkGetDeviceProcAddr( device, "vkCmdPipelineBarrier2" ) );
   12cc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12cc7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ccb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ccf:	48 8d 0d 1c 88 01 00 	lea    0x1881c(%rip),%rcx        # 2b4f2 <_ZNSt8__detailL19__atomic_spin_countE+0xcfe>
   12cd6:	48 89 ce             	mov    %rcx,%rsi
   12cd9:	48 89 c7             	mov    %rax,%rdi
   12cdc:	ff d2                	call   *%rdx
   12cde:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ce2:	48 89 82 f8 04 00 00 	mov    %rax,0x4f8(%rdx)
        vkCmdWriteTimestamp2                = PFN_vkCmdWriteTimestamp2( vkGetDeviceProcAddr( device, "vkCmdWriteTimestamp2" ) );
   12ce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ced:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12cf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12cf5:	48 8d 0d 0c 88 01 00 	lea    0x1880c(%rip),%rcx        # 2b508 <_ZNSt8__detailL19__atomic_spin_countE+0xd14>
   12cfc:	48 89 ce             	mov    %rcx,%rsi
   12cff:	48 89 c7             	mov    %rax,%rdi
   12d02:	ff d2                	call   *%rdx
   12d04:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d08:	48 89 82 00 05 00 00 	mov    %rax,0x500(%rdx)
        vkQueueSubmit2                      = PFN_vkQueueSubmit2( vkGetDeviceProcAddr( device, "vkQueueSubmit2" ) );
   12d0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d13:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d1b:	48 8d 0d fb 87 01 00 	lea    0x187fb(%rip),%rcx        # 2b51d <_ZNSt8__detailL19__atomic_spin_countE+0xd29>
   12d22:	48 89 ce             	mov    %rcx,%rsi
   12d25:	48 89 c7             	mov    %rax,%rdi
   12d28:	ff d2                	call   *%rdx
   12d2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d2e:	48 89 82 08 05 00 00 	mov    %rax,0x508(%rdx)
        vkCmdCopyBuffer2                    = PFN_vkCmdCopyBuffer2( vkGetDeviceProcAddr( device, "vkCmdCopyBuffer2" ) );
   12d35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d39:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d41:	48 8d 0d e4 87 01 00 	lea    0x187e4(%rip),%rcx        # 2b52c <_ZNSt8__detailL19__atomic_spin_countE+0xd38>
   12d48:	48 89 ce             	mov    %rcx,%rsi
   12d4b:	48 89 c7             	mov    %rax,%rdi
   12d4e:	ff d2                	call   *%rdx
   12d50:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d54:	48 89 82 10 05 00 00 	mov    %rax,0x510(%rdx)
        vkCmdCopyImage2                     = PFN_vkCmdCopyImage2( vkGetDeviceProcAddr( device, "vkCmdCopyImage2" ) );
   12d5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d5f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d67:	48 8d 0d cf 87 01 00 	lea    0x187cf(%rip),%rcx        # 2b53d <_ZNSt8__detailL19__atomic_spin_countE+0xd49>
   12d6e:	48 89 ce             	mov    %rcx,%rsi
   12d71:	48 89 c7             	mov    %rax,%rdi
   12d74:	ff d2                	call   *%rdx
   12d76:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d7a:	48 89 82 18 05 00 00 	mov    %rax,0x518(%rdx)
        vkCmdCopyBufferToImage2             = PFN_vkCmdCopyBufferToImage2( vkGetDeviceProcAddr( device, "vkCmdCopyBufferToImage2" ) );
   12d81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d85:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d8d:	48 8d 0d b9 87 01 00 	lea    0x187b9(%rip),%rcx        # 2b54d <_ZNSt8__detailL19__atomic_spin_countE+0xd59>
   12d94:	48 89 ce             	mov    %rcx,%rsi
   12d97:	48 89 c7             	mov    %rax,%rdi
   12d9a:	ff d2                	call   *%rdx
   12d9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12da0:	48 89 82 20 05 00 00 	mov    %rax,0x520(%rdx)
        vkCmdCopyImageToBuffer2             = PFN_vkCmdCopyImageToBuffer2( vkGetDeviceProcAddr( device, "vkCmdCopyImageToBuffer2" ) );
   12da7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12dab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12daf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12db3:	48 8d 0d ab 87 01 00 	lea    0x187ab(%rip),%rcx        # 2b565 <_ZNSt8__detailL19__atomic_spin_countE+0xd71>
   12dba:	48 89 ce             	mov    %rcx,%rsi
   12dbd:	48 89 c7             	mov    %rax,%rdi
   12dc0:	ff d2                	call   *%rdx
   12dc2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12dc6:	48 89 82 28 05 00 00 	mov    %rax,0x528(%rdx)
        vkCmdBlitImage2                     = PFN_vkCmdBlitImage2( vkGetDeviceProcAddr( device, "vkCmdBlitImage2" ) );
   12dcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12dd1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12dd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12dd9:	48 8d 0d 9d 87 01 00 	lea    0x1879d(%rip),%rcx        # 2b57d <_ZNSt8__detailL19__atomic_spin_countE+0xd89>
   12de0:	48 89 ce             	mov    %rcx,%rsi
   12de3:	48 89 c7             	mov    %rax,%rdi
   12de6:	ff d2                	call   *%rdx
   12de8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12dec:	48 89 82 30 05 00 00 	mov    %rax,0x530(%rdx)
        vkCmdResolveImage2                  = PFN_vkCmdResolveImage2( vkGetDeviceProcAddr( device, "vkCmdResolveImage2" ) );
   12df3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12df7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12dfb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12dff:	48 8d 0d 87 87 01 00 	lea    0x18787(%rip),%rcx        # 2b58d <_ZNSt8__detailL19__atomic_spin_countE+0xd99>
   12e06:	48 89 ce             	mov    %rcx,%rsi
   12e09:	48 89 c7             	mov    %rax,%rdi
   12e0c:	ff d2                	call   *%rdx
   12e0e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e12:	48 89 82 38 05 00 00 	mov    %rax,0x538(%rdx)
        vkCmdBeginRendering                 = PFN_vkCmdBeginRendering( vkGetDeviceProcAddr( device, "vkCmdBeginRendering" ) );
   12e19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e1d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e25:	48 8d 0d 74 87 01 00 	lea    0x18774(%rip),%rcx        # 2b5a0 <_ZNSt8__detailL19__atomic_spin_countE+0xdac>
   12e2c:	48 89 ce             	mov    %rcx,%rsi
   12e2f:	48 89 c7             	mov    %rax,%rdi
   12e32:	ff d2                	call   *%rdx
   12e34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e38:	48 89 82 40 05 00 00 	mov    %rax,0x540(%rdx)
        vkCmdEndRendering                   = PFN_vkCmdEndRendering( vkGetDeviceProcAddr( device, "vkCmdEndRendering" ) );
   12e3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e43:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e4b:	48 8d 0d 62 87 01 00 	lea    0x18762(%rip),%rcx        # 2b5b4 <_ZNSt8__detailL19__atomic_spin_countE+0xdc0>
   12e52:	48 89 ce             	mov    %rcx,%rsi
   12e55:	48 89 c7             	mov    %rax,%rdi
   12e58:	ff d2                	call   *%rdx
   12e5a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e5e:	48 89 82 48 05 00 00 	mov    %rax,0x548(%rdx)
        vkCmdSetCullMode                    = PFN_vkCmdSetCullMode( vkGetDeviceProcAddr( device, "vkCmdSetCullMode" ) );
   12e65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e69:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e71:	48 8d 0d 4e 87 01 00 	lea    0x1874e(%rip),%rcx        # 2b5c6 <_ZNSt8__detailL19__atomic_spin_countE+0xdd2>
   12e78:	48 89 ce             	mov    %rcx,%rsi
   12e7b:	48 89 c7             	mov    %rax,%rdi
   12e7e:	ff d2                	call   *%rdx
   12e80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e84:	48 89 82 50 05 00 00 	mov    %rax,0x550(%rdx)
        vkCmdSetFrontFace                   = PFN_vkCmdSetFrontFace( vkGetDeviceProcAddr( device, "vkCmdSetFrontFace" ) );
   12e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e8f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e97:	48 8d 0d 39 87 01 00 	lea    0x18739(%rip),%rcx        # 2b5d7 <_ZNSt8__detailL19__atomic_spin_countE+0xde3>
   12e9e:	48 89 ce             	mov    %rcx,%rsi
   12ea1:	48 89 c7             	mov    %rax,%rdi
   12ea4:	ff d2                	call   *%rdx
   12ea6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12eaa:	48 89 82 58 05 00 00 	mov    %rax,0x558(%rdx)
        vkCmdSetPrimitiveTopology           = PFN_vkCmdSetPrimitiveTopology( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveTopology" ) );
   12eb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12eb5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12eb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ebd:	48 8d 0d 25 87 01 00 	lea    0x18725(%rip),%rcx        # 2b5e9 <_ZNSt8__detailL19__atomic_spin_countE+0xdf5>
   12ec4:	48 89 ce             	mov    %rcx,%rsi
   12ec7:	48 89 c7             	mov    %rax,%rdi
   12eca:	ff d2                	call   *%rdx
   12ecc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ed0:	48 89 82 60 05 00 00 	mov    %rax,0x560(%rdx)
        vkCmdSetViewportWithCount           = PFN_vkCmdSetViewportWithCount( vkGetDeviceProcAddr( device, "vkCmdSetViewportWithCount" ) );
   12ed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12edb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12edf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ee3:	48 8d 0d 19 87 01 00 	lea    0x18719(%rip),%rcx        # 2b603 <_ZNSt8__detailL19__atomic_spin_countE+0xe0f>
   12eea:	48 89 ce             	mov    %rcx,%rsi
   12eed:	48 89 c7             	mov    %rax,%rdi
   12ef0:	ff d2                	call   *%rdx
   12ef2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ef6:	48 89 82 68 05 00 00 	mov    %rax,0x568(%rdx)
        vkCmdSetScissorWithCount            = PFN_vkCmdSetScissorWithCount( vkGetDeviceProcAddr( device, "vkCmdSetScissorWithCount" ) );
   12efd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f01:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f09:	48 8d 0d 0d 87 01 00 	lea    0x1870d(%rip),%rcx        # 2b61d <_ZNSt8__detailL19__atomic_spin_countE+0xe29>
   12f10:	48 89 ce             	mov    %rcx,%rsi
   12f13:	48 89 c7             	mov    %rax,%rdi
   12f16:	ff d2                	call   *%rdx
   12f18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f1c:	48 89 82 70 05 00 00 	mov    %rax,0x570(%rdx)
        vkCmdBindVertexBuffers2             = PFN_vkCmdBindVertexBuffers2( vkGetDeviceProcAddr( device, "vkCmdBindVertexBuffers2" ) );
   12f23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f27:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f2f:	48 8d 0d 00 87 01 00 	lea    0x18700(%rip),%rcx        # 2b636 <_ZNSt8__detailL19__atomic_spin_countE+0xe42>
   12f36:	48 89 ce             	mov    %rcx,%rsi
   12f39:	48 89 c7             	mov    %rax,%rdi
   12f3c:	ff d2                	call   *%rdx
   12f3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f42:	48 89 82 78 05 00 00 	mov    %rax,0x578(%rdx)
        vkCmdSetDepthTestEnable             = PFN_vkCmdSetDepthTestEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthTestEnable" ) );
   12f49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f4d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f55:	48 8d 0d f2 86 01 00 	lea    0x186f2(%rip),%rcx        # 2b64e <_ZNSt8__detailL19__atomic_spin_countE+0xe5a>
   12f5c:	48 89 ce             	mov    %rcx,%rsi
   12f5f:	48 89 c7             	mov    %rax,%rdi
   12f62:	ff d2                	call   *%rdx
   12f64:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f68:	48 89 82 80 05 00 00 	mov    %rax,0x580(%rdx)
        vkCmdSetDepthWriteEnable            = PFN_vkCmdSetDepthWriteEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthWriteEnable" ) );
   12f6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f73:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f7b:	48 8d 0d e4 86 01 00 	lea    0x186e4(%rip),%rcx        # 2b666 <_ZNSt8__detailL19__atomic_spin_countE+0xe72>
   12f82:	48 89 ce             	mov    %rcx,%rsi
   12f85:	48 89 c7             	mov    %rax,%rdi
   12f88:	ff d2                	call   *%rdx
   12f8a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f8e:	48 89 82 88 05 00 00 	mov    %rax,0x588(%rdx)
        vkCmdSetDepthCompareOp              = PFN_vkCmdSetDepthCompareOp( vkGetDeviceProcAddr( device, "vkCmdSetDepthCompareOp" ) );
   12f95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f99:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12fa1:	48 8d 0d d7 86 01 00 	lea    0x186d7(%rip),%rcx        # 2b67f <_ZNSt8__detailL19__atomic_spin_countE+0xe8b>
   12fa8:	48 89 ce             	mov    %rcx,%rsi
   12fab:	48 89 c7             	mov    %rax,%rdi
   12fae:	ff d2                	call   *%rdx
   12fb0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12fb4:	48 89 82 90 05 00 00 	mov    %rax,0x590(%rdx)
        vkCmdSetDepthBoundsTestEnable       = PFN_vkCmdSetDepthBoundsTestEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthBoundsTestEnable" ) );
   12fbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12fbf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12fc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12fc7:	48 8d 0d c8 86 01 00 	lea    0x186c8(%rip),%rcx        # 2b696 <_ZNSt8__detailL19__atomic_spin_countE+0xea2>
   12fce:	48 89 ce             	mov    %rcx,%rsi
   12fd1:	48 89 c7             	mov    %rax,%rdi
   12fd4:	ff d2                	call   *%rdx
   12fd6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12fda:	48 89 82 98 05 00 00 	mov    %rax,0x598(%rdx)
        vkCmdSetStencilTestEnable           = PFN_vkCmdSetStencilTestEnable( vkGetDeviceProcAddr( device, "vkCmdSetStencilTestEnable" ) );
   12fe1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12fe5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12fe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12fed:	48 8d 0d c0 86 01 00 	lea    0x186c0(%rip),%rcx        # 2b6b4 <_ZNSt8__detailL19__atomic_spin_countE+0xec0>
   12ff4:	48 89 ce             	mov    %rcx,%rsi
   12ff7:	48 89 c7             	mov    %rax,%rdi
   12ffa:	ff d2                	call   *%rdx
   12ffc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13000:	48 89 82 a0 05 00 00 	mov    %rax,0x5a0(%rdx)
        vkCmdSetStencilOp                   = PFN_vkCmdSetStencilOp( vkGetDeviceProcAddr( device, "vkCmdSetStencilOp" ) );
   13007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1300b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1300f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13013:	48 8d 0d b4 86 01 00 	lea    0x186b4(%rip),%rcx        # 2b6ce <_ZNSt8__detailL19__atomic_spin_countE+0xeda>
   1301a:	48 89 ce             	mov    %rcx,%rsi
   1301d:	48 89 c7             	mov    %rax,%rdi
   13020:	ff d2                	call   *%rdx
   13022:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13026:	48 89 82 a8 05 00 00 	mov    %rax,0x5a8(%rdx)
        vkCmdSetRasterizerDiscardEnable     = PFN_vkCmdSetRasterizerDiscardEnable( vkGetDeviceProcAddr( device, "vkCmdSetRasterizerDiscardEnable" ) );
   1302d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13031:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13035:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13039:	48 8d 0d a0 86 01 00 	lea    0x186a0(%rip),%rcx        # 2b6e0 <_ZNSt8__detailL19__atomic_spin_countE+0xeec>
   13040:	48 89 ce             	mov    %rcx,%rsi
   13043:	48 89 c7             	mov    %rax,%rdi
   13046:	ff d2                	call   *%rdx
   13048:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1304c:	48 89 82 b0 05 00 00 	mov    %rax,0x5b0(%rdx)
        vkCmdSetDepthBiasEnable             = PFN_vkCmdSetDepthBiasEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthBiasEnable" ) );
   13053:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13057:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1305b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1305f:	48 8d 0d 9a 86 01 00 	lea    0x1869a(%rip),%rcx        # 2b700 <_ZNSt8__detailL19__atomic_spin_countE+0xf0c>
   13066:	48 89 ce             	mov    %rcx,%rsi
   13069:	48 89 c7             	mov    %rax,%rdi
   1306c:	ff d2                	call   *%rdx
   1306e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13072:	48 89 82 b8 05 00 00 	mov    %rax,0x5b8(%rdx)
        vkCmdSetPrimitiveRestartEnable      = PFN_vkCmdSetPrimitiveRestartEnable( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveRestartEnable" ) );
   13079:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1307d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13081:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13085:	48 8d 0d 8c 86 01 00 	lea    0x1868c(%rip),%rcx        # 2b718 <_ZNSt8__detailL19__atomic_spin_countE+0xf24>
   1308c:	48 89 ce             	mov    %rcx,%rsi
   1308f:	48 89 c7             	mov    %rax,%rdi
   13092:	ff d2                	call   *%rdx
   13094:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13098:	48 89 82 c0 05 00 00 	mov    %rax,0x5c0(%rdx)
        vkGetDeviceBufferMemoryRequirements = PFN_vkGetDeviceBufferMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetDeviceBufferMemoryRequirements" ) );
   1309f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   130a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   130ab:	48 8d 0d 86 86 01 00 	lea    0x18686(%rip),%rcx        # 2b738 <_ZNSt8__detailL19__atomic_spin_countE+0xf44>
   130b2:	48 89 ce             	mov    %rcx,%rsi
   130b5:	48 89 c7             	mov    %rax,%rdi
   130b8:	ff d2                	call   *%rdx
   130ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   130be:	48 89 82 c8 05 00 00 	mov    %rax,0x5c8(%rdx)
        vkGetDeviceImageMemoryRequirements  = PFN_vkGetDeviceImageMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetDeviceImageMemoryRequirements" ) );
   130c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130c9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   130cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   130d1:	48 8d 0d 88 86 01 00 	lea    0x18688(%rip),%rcx        # 2b760 <_ZNSt8__detailL19__atomic_spin_countE+0xf6c>
   130d8:	48 89 ce             	mov    %rcx,%rsi
   130db:	48 89 c7             	mov    %rax,%rdi
   130de:	ff d2                	call   *%rdx
   130e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   130e4:	48 89 82 d0 05 00 00 	mov    %rax,0x5d0(%rdx)
          PFN_vkGetDeviceImageSparseMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetDeviceImageSparseMemoryRequirements" ) );
   130eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130ef:	48 8b 50 10          	mov    0x10(%rax),%rdx
   130f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   130f7:	48 8d 0d 8a 86 01 00 	lea    0x1868a(%rip),%rcx        # 2b788 <_ZNSt8__detailL19__atomic_spin_countE+0xf94>
   130fe:	48 89 ce             	mov    %rcx,%rsi
   13101:	48 89 c7             	mov    %rax,%rdi
   13104:	ff d2                	call   *%rdx
        vkGetDeviceImageSparseMemoryRequirements =
   13106:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1310a:	48 89 82 d8 05 00 00 	mov    %rax,0x5d8(%rdx)
        vkCmdWriteBufferMarkerAMD = PFN_vkCmdWriteBufferMarkerAMD( vkGetDeviceProcAddr( device, "vkCmdWriteBufferMarkerAMD" ) );
   13111:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13115:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1311d:	48 8d 0d 8d 86 01 00 	lea    0x1868d(%rip),%rcx        # 2b7b1 <_ZNSt8__detailL19__atomic_spin_countE+0xfbd>
   13124:	48 89 ce             	mov    %rcx,%rsi
   13127:	48 89 c7             	mov    %rax,%rdi
   1312a:	ff d2                	call   *%rdx
   1312c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13130:	48 89 82 e0 05 00 00 	mov    %rax,0x5e0(%rdx)
        vkSetLocalDimmingAMD = PFN_vkSetLocalDimmingAMD( vkGetDeviceProcAddr( device, "vkSetLocalDimmingAMD" ) );
   13137:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1313b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1313f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13143:	48 8d 0d 81 86 01 00 	lea    0x18681(%rip),%rcx        # 2b7cb <_ZNSt8__detailL19__atomic_spin_countE+0xfd7>
   1314a:	48 89 ce             	mov    %rcx,%rsi
   1314d:	48 89 c7             	mov    %rax,%rdi
   13150:	ff d2                	call   *%rdx
   13152:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13156:	48 89 82 e8 05 00 00 	mov    %rax,0x5e8(%rdx)
        vkCmdDrawIndirectCountAMD = PFN_vkCmdDrawIndirectCountAMD( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectCountAMD" ) );
   1315d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13161:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13165:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13169:	48 8d 0d 70 86 01 00 	lea    0x18670(%rip),%rcx        # 2b7e0 <_ZNSt8__detailL19__atomic_spin_countE+0xfec>
   13170:	48 89 ce             	mov    %rcx,%rsi
   13173:	48 89 c7             	mov    %rax,%rdi
   13176:	ff d2                	call   *%rdx
   13178:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1317c:	48 89 82 f0 05 00 00 	mov    %rax,0x5f0(%rdx)
        if ( !vkCmdDrawIndirectCount )
   13183:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13187:	48 8b 80 58 04 00 00 	mov    0x458(%rax),%rax
   1318e:	48 85 c0             	test   %rax,%rax
   13191:	75 16                	jne    131a9 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x395b>
          vkCmdDrawIndirectCount = vkCmdDrawIndirectCountAMD;
   13193:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13197:	48 8b 90 f0 05 00 00 	mov    0x5f0(%rax),%rdx
   1319e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131a2:	48 89 90 58 04 00 00 	mov    %rdx,0x458(%rax)
        vkCmdDrawIndexedIndirectCountAMD = PFN_vkCmdDrawIndexedIndirectCountAMD( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirectCountAMD" ) );
   131a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131ad:	48 8b 50 10          	mov    0x10(%rax),%rdx
   131b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   131b5:	48 8d 0d 44 86 01 00 	lea    0x18644(%rip),%rcx        # 2b800 <_ZNSt8__detailL19__atomic_spin_countE+0x100c>
   131bc:	48 89 ce             	mov    %rcx,%rsi
   131bf:	48 89 c7             	mov    %rax,%rdi
   131c2:	ff d2                	call   *%rdx
   131c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   131c8:	48 89 82 f8 05 00 00 	mov    %rax,0x5f8(%rdx)
        if ( !vkCmdDrawIndexedIndirectCount )
   131cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131d3:	48 8b 80 60 04 00 00 	mov    0x460(%rax),%rax
   131da:	48 85 c0             	test   %rax,%rax
   131dd:	75 16                	jne    131f5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x39a7>
          vkCmdDrawIndexedIndirectCount = vkCmdDrawIndexedIndirectCountAMD;
   131df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131e3:	48 8b 90 f8 05 00 00 	mov    0x5f8(%rax),%rdx
   131ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131ee:	48 89 90 60 04 00 00 	mov    %rdx,0x460(%rax)
        vkGetShaderInfoAMD = PFN_vkGetShaderInfoAMD( vkGetDeviceProcAddr( device, "vkGetShaderInfoAMD" ) );
   131f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131f9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   131fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13201:	48 8d 0d 19 86 01 00 	lea    0x18619(%rip),%rcx        # 2b821 <_ZNSt8__detailL19__atomic_spin_countE+0x102d>
   13208:	48 89 ce             	mov    %rcx,%rsi
   1320b:	48 89 c7             	mov    %rax,%rdi
   1320e:	ff d2                	call   *%rdx
   13210:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13214:	48 89 82 00 06 00 00 	mov    %rax,0x600(%rdx)
        vkGetBufferDeviceAddressEXT = PFN_vkGetBufferDeviceAddressEXT( vkGetDeviceProcAddr( device, "vkGetBufferDeviceAddressEXT" ) );
   1321b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1321f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13223:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13227:	48 8d 0d 06 86 01 00 	lea    0x18606(%rip),%rcx        # 2b834 <_ZNSt8__detailL19__atomic_spin_countE+0x1040>
   1322e:	48 89 ce             	mov    %rcx,%rsi
   13231:	48 89 c7             	mov    %rax,%rdi
   13234:	ff d2                	call   *%rdx
   13236:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1323a:	48 89 82 18 06 00 00 	mov    %rax,0x618(%rdx)
        if ( !vkGetBufferDeviceAddress )
   13241:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13245:	48 8b 80 a8 04 00 00 	mov    0x4a8(%rax),%rax
   1324c:	48 85 c0             	test   %rax,%rax
   1324f:	75 16                	jne    13267 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3a19>
          vkGetBufferDeviceAddress = vkGetBufferDeviceAddressEXT;
   13251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13255:	48 8b 90 18 06 00 00 	mov    0x618(%rax),%rdx
   1325c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13260:	48 89 90 a8 04 00 00 	mov    %rdx,0x4a8(%rax)
        vkGetCalibratedTimestampsEXT = PFN_vkGetCalibratedTimestampsEXT( vkGetDeviceProcAddr( device, "vkGetCalibratedTimestampsEXT" ) );
   13267:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1326b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1326f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13273:	48 8d 0d d6 85 01 00 	lea    0x185d6(%rip),%rcx        # 2b850 <_ZNSt8__detailL19__atomic_spin_countE+0x105c>
   1327a:	48 89 ce             	mov    %rcx,%rsi
   1327d:	48 89 c7             	mov    %rax,%rdi
   13280:	ff d2                	call   *%rdx
   13282:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13286:	48 89 82 20 06 00 00 	mov    %rax,0x620(%rdx)
        vkCmdSetColorWriteEnableEXT = PFN_vkCmdSetColorWriteEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorWriteEnableEXT" ) );
   1328d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13291:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13299:	48 8d 0d cd 85 01 00 	lea    0x185cd(%rip),%rcx        # 2b86d <_ZNSt8__detailL19__atomic_spin_countE+0x1079>
   132a0:	48 89 ce             	mov    %rcx,%rsi
   132a3:	48 89 c7             	mov    %rax,%rdi
   132a6:	ff d2                	call   *%rdx
   132a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   132ac:	48 89 82 28 06 00 00 	mov    %rax,0x628(%rdx)
        vkCmdBeginConditionalRenderingEXT = PFN_vkCmdBeginConditionalRenderingEXT( vkGetDeviceProcAddr( device, "vkCmdBeginConditionalRenderingEXT" ) );
   132b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132b7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   132bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   132bf:	48 8d 0d ca 85 01 00 	lea    0x185ca(%rip),%rcx        # 2b890 <_ZNSt8__detailL19__atomic_spin_countE+0x109c>
   132c6:	48 89 ce             	mov    %rcx,%rsi
   132c9:	48 89 c7             	mov    %rax,%rdi
   132cc:	ff d2                	call   *%rdx
   132ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   132d2:	48 89 82 30 06 00 00 	mov    %rax,0x630(%rdx)
        vkCmdEndConditionalRenderingEXT   = PFN_vkCmdEndConditionalRenderingEXT( vkGetDeviceProcAddr( device, "vkCmdEndConditionalRenderingEXT" ) );
   132d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132dd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   132e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   132e5:	48 8d 0d cc 85 01 00 	lea    0x185cc(%rip),%rcx        # 2b8b8 <_ZNSt8__detailL19__atomic_spin_countE+0x10c4>
   132ec:	48 89 ce             	mov    %rcx,%rsi
   132ef:	48 89 c7             	mov    %rax,%rdi
   132f2:	ff d2                	call   *%rdx
   132f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   132f8:	48 89 82 38 06 00 00 	mov    %rax,0x638(%rdx)
        vkDebugMarkerSetObjectTagEXT  = PFN_vkDebugMarkerSetObjectTagEXT( vkGetDeviceProcAddr( device, "vkDebugMarkerSetObjectTagEXT" ) );
   132ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13303:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13307:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1330b:	48 8d 0d c6 85 01 00 	lea    0x185c6(%rip),%rcx        # 2b8d8 <_ZNSt8__detailL19__atomic_spin_countE+0x10e4>
   13312:	48 89 ce             	mov    %rcx,%rsi
   13315:	48 89 c7             	mov    %rax,%rdi
   13318:	ff d2                	call   *%rdx
   1331a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1331e:	48 89 82 40 06 00 00 	mov    %rax,0x640(%rdx)
        vkDebugMarkerSetObjectNameEXT = PFN_vkDebugMarkerSetObjectNameEXT( vkGetDeviceProcAddr( device, "vkDebugMarkerSetObjectNameEXT" ) );
   13325:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13329:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1332d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13331:	48 8d 0d bd 85 01 00 	lea    0x185bd(%rip),%rcx        # 2b8f5 <_ZNSt8__detailL19__atomic_spin_countE+0x1101>
   13338:	48 89 ce             	mov    %rcx,%rsi
   1333b:	48 89 c7             	mov    %rax,%rdi
   1333e:	ff d2                	call   *%rdx
   13340:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13344:	48 89 82 48 06 00 00 	mov    %rax,0x648(%rdx)
        vkCmdDebugMarkerBeginEXT      = PFN_vkCmdDebugMarkerBeginEXT( vkGetDeviceProcAddr( device, "vkCmdDebugMarkerBeginEXT" ) );
   1334b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1334f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13353:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13357:	48 8d 0d b5 85 01 00 	lea    0x185b5(%rip),%rcx        # 2b913 <_ZNSt8__detailL19__atomic_spin_countE+0x111f>
   1335e:	48 89 ce             	mov    %rcx,%rsi
   13361:	48 89 c7             	mov    %rax,%rdi
   13364:	ff d2                	call   *%rdx
   13366:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1336a:	48 89 82 50 06 00 00 	mov    %rax,0x650(%rdx)
        vkCmdDebugMarkerEndEXT        = PFN_vkCmdDebugMarkerEndEXT( vkGetDeviceProcAddr( device, "vkCmdDebugMarkerEndEXT" ) );
   13371:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13375:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13379:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1337d:	48 8d 0d a8 85 01 00 	lea    0x185a8(%rip),%rcx        # 2b92c <_ZNSt8__detailL19__atomic_spin_countE+0x1138>
   13384:	48 89 ce             	mov    %rcx,%rsi
   13387:	48 89 c7             	mov    %rax,%rdi
   1338a:	ff d2                	call   *%rdx
   1338c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13390:	48 89 82 58 06 00 00 	mov    %rax,0x658(%rdx)
        vkCmdDebugMarkerInsertEXT     = PFN_vkCmdDebugMarkerInsertEXT( vkGetDeviceProcAddr( device, "vkCmdDebugMarkerInsertEXT" ) );
   13397:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1339b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1339f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   133a3:	48 8d 0d 99 85 01 00 	lea    0x18599(%rip),%rcx        # 2b943 <_ZNSt8__detailL19__atomic_spin_countE+0x114f>
   133aa:	48 89 ce             	mov    %rcx,%rsi
   133ad:	48 89 c7             	mov    %rax,%rdi
   133b0:	ff d2                	call   *%rdx
   133b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   133b6:	48 89 82 60 06 00 00 	mov    %rax,0x660(%rdx)
        vkSetDebugUtilsObjectNameEXT    = PFN_vkSetDebugUtilsObjectNameEXT( vkGetDeviceProcAddr( device, "vkSetDebugUtilsObjectNameEXT" ) );
   133bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   133c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   133c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   133c9:	48 8d 0d 8d 85 01 00 	lea    0x1858d(%rip),%rcx        # 2b95d <_ZNSt8__detailL19__atomic_spin_countE+0x1169>
   133d0:	48 89 ce             	mov    %rcx,%rsi
   133d3:	48 89 c7             	mov    %rax,%rdi
   133d6:	ff d2                	call   *%rdx
   133d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   133dc:	48 89 82 68 06 00 00 	mov    %rax,0x668(%rdx)
        vkSetDebugUtilsObjectTagEXT     = PFN_vkSetDebugUtilsObjectTagEXT( vkGetDeviceProcAddr( device, "vkSetDebugUtilsObjectTagEXT" ) );
   133e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   133e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   133eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   133ef:	48 8d 0d 84 85 01 00 	lea    0x18584(%rip),%rcx        # 2b97a <_ZNSt8__detailL19__atomic_spin_countE+0x1186>
   133f6:	48 89 ce             	mov    %rcx,%rsi
   133f9:	48 89 c7             	mov    %rax,%rdi
   133fc:	ff d2                	call   *%rdx
   133fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13402:	48 89 82 70 06 00 00 	mov    %rax,0x670(%rdx)
        vkQueueBeginDebugUtilsLabelEXT  = PFN_vkQueueBeginDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkQueueBeginDebugUtilsLabelEXT" ) );
   13409:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1340d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13411:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13415:	48 8d 0d 7c 85 01 00 	lea    0x1857c(%rip),%rcx        # 2b998 <_ZNSt8__detailL19__atomic_spin_countE+0x11a4>
   1341c:	48 89 ce             	mov    %rcx,%rsi
   1341f:	48 89 c7             	mov    %rax,%rdi
   13422:	ff d2                	call   *%rdx
   13424:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13428:	48 89 82 78 06 00 00 	mov    %rax,0x678(%rdx)
        vkQueueEndDebugUtilsLabelEXT    = PFN_vkQueueEndDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkQueueEndDebugUtilsLabelEXT" ) );
   1342f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13433:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13437:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1343b:	48 8d 0d 75 85 01 00 	lea    0x18575(%rip),%rcx        # 2b9b7 <_ZNSt8__detailL19__atomic_spin_countE+0x11c3>
   13442:	48 89 ce             	mov    %rcx,%rsi
   13445:	48 89 c7             	mov    %rax,%rdi
   13448:	ff d2                	call   *%rdx
   1344a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1344e:	48 89 82 80 06 00 00 	mov    %rax,0x680(%rdx)
        vkQueueInsertDebugUtilsLabelEXT = PFN_vkQueueInsertDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkQueueInsertDebugUtilsLabelEXT" ) );
   13455:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13459:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1345d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13461:	48 8d 0d 70 85 01 00 	lea    0x18570(%rip),%rcx        # 2b9d8 <_ZNSt8__detailL19__atomic_spin_countE+0x11e4>
   13468:	48 89 ce             	mov    %rcx,%rsi
   1346b:	48 89 c7             	mov    %rax,%rdi
   1346e:	ff d2                	call   *%rdx
   13470:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13474:	48 89 82 88 06 00 00 	mov    %rax,0x688(%rdx)
        vkCmdBeginDebugUtilsLabelEXT    = PFN_vkCmdBeginDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkCmdBeginDebugUtilsLabelEXT" ) );
   1347b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1347f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13483:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13487:	48 8d 0d 6a 85 01 00 	lea    0x1856a(%rip),%rcx        # 2b9f8 <_ZNSt8__detailL19__atomic_spin_countE+0x1204>
   1348e:	48 89 ce             	mov    %rcx,%rsi
   13491:	48 89 c7             	mov    %rax,%rdi
   13494:	ff d2                	call   *%rdx
   13496:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1349a:	48 89 82 90 06 00 00 	mov    %rax,0x690(%rdx)
        vkCmdEndDebugUtilsLabelEXT      = PFN_vkCmdEndDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkCmdEndDebugUtilsLabelEXT" ) );
   134a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   134a5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   134a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   134ad:	48 8d 0d 61 85 01 00 	lea    0x18561(%rip),%rcx        # 2ba15 <_ZNSt8__detailL19__atomic_spin_countE+0x1221>
   134b4:	48 89 ce             	mov    %rcx,%rsi
   134b7:	48 89 c7             	mov    %rax,%rdi
   134ba:	ff d2                	call   *%rdx
   134bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   134c0:	48 89 82 98 06 00 00 	mov    %rax,0x698(%rdx)
        vkCmdInsertDebugUtilsLabelEXT   = PFN_vkCmdInsertDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkCmdInsertDebugUtilsLabelEXT" ) );
   134c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   134cb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   134cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   134d3:	48 8d 0d 56 85 01 00 	lea    0x18556(%rip),%rcx        # 2ba30 <_ZNSt8__detailL19__atomic_spin_countE+0x123c>
   134da:	48 89 ce             	mov    %rcx,%rsi
   134dd:	48 89 c7             	mov    %rax,%rdi
   134e0:	ff d2                	call   *%rdx
   134e2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   134e6:	48 89 82 a0 06 00 00 	mov    %rax,0x6a0(%rdx)
        vkGetDeviceFaultInfoEXT = PFN_vkGetDeviceFaultInfoEXT( vkGetDeviceProcAddr( device, "vkGetDeviceFaultInfoEXT" ) );
   134ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   134f1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   134f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   134f9:	48 8d 0d 4e 85 01 00 	lea    0x1854e(%rip),%rcx        # 2ba4e <_ZNSt8__detailL19__atomic_spin_countE+0x125a>
   13500:	48 89 ce             	mov    %rcx,%rsi
   13503:	48 89 c7             	mov    %rax,%rdi
   13506:	ff d2                	call   *%rdx
   13508:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1350c:	48 89 82 a8 06 00 00 	mov    %rax,0x6a8(%rdx)
        vkCmdSetDiscardRectangleEXT = PFN_vkCmdSetDiscardRectangleEXT( vkGetDeviceProcAddr( device, "vkCmdSetDiscardRectangleEXT" ) );
   13513:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13517:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1351b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1351f:	48 8d 0d 40 85 01 00 	lea    0x18540(%rip),%rcx        # 2ba66 <_ZNSt8__detailL19__atomic_spin_countE+0x1272>
   13526:	48 89 ce             	mov    %rcx,%rsi
   13529:	48 89 c7             	mov    %rax,%rdi
   1352c:	ff d2                	call   *%rdx
   1352e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13532:	48 89 82 b0 06 00 00 	mov    %rax,0x6b0(%rdx)
        vkDisplayPowerControlEXT  = PFN_vkDisplayPowerControlEXT( vkGetDeviceProcAddr( device, "vkDisplayPowerControlEXT" ) );
   13539:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1353d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13541:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13545:	48 8d 0d 36 85 01 00 	lea    0x18536(%rip),%rcx        # 2ba82 <_ZNSt8__detailL19__atomic_spin_countE+0x128e>
   1354c:	48 89 ce             	mov    %rcx,%rsi
   1354f:	48 89 c7             	mov    %rax,%rdi
   13552:	ff d2                	call   *%rdx
   13554:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13558:	48 89 82 b8 06 00 00 	mov    %rax,0x6b8(%rdx)
        vkRegisterDeviceEventEXT  = PFN_vkRegisterDeviceEventEXT( vkGetDeviceProcAddr( device, "vkRegisterDeviceEventEXT" ) );
   1355f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13563:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13567:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1356b:	48 8d 0d 29 85 01 00 	lea    0x18529(%rip),%rcx        # 2ba9b <_ZNSt8__detailL19__atomic_spin_countE+0x12a7>
   13572:	48 89 ce             	mov    %rcx,%rsi
   13575:	48 89 c7             	mov    %rax,%rdi
   13578:	ff d2                	call   *%rdx
   1357a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1357e:	48 89 82 c0 06 00 00 	mov    %rax,0x6c0(%rdx)
        vkRegisterDisplayEventEXT = PFN_vkRegisterDisplayEventEXT( vkGetDeviceProcAddr( device, "vkRegisterDisplayEventEXT" ) );
   13585:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13589:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1358d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13591:	48 8d 0d 1c 85 01 00 	lea    0x1851c(%rip),%rcx        # 2bab4 <_ZNSt8__detailL19__atomic_spin_countE+0x12c0>
   13598:	48 89 ce             	mov    %rcx,%rsi
   1359b:	48 89 c7             	mov    %rax,%rdi
   1359e:	ff d2                	call   *%rdx
   135a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   135a4:	48 89 82 c8 06 00 00 	mov    %rax,0x6c8(%rdx)
        vkGetSwapchainCounterEXT  = PFN_vkGetSwapchainCounterEXT( vkGetDeviceProcAddr( device, "vkGetSwapchainCounterEXT" ) );
   135ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   135af:	48 8b 50 10          	mov    0x10(%rax),%rdx
   135b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   135b7:	48 8d 0d 10 85 01 00 	lea    0x18510(%rip),%rcx        # 2bace <_ZNSt8__detailL19__atomic_spin_countE+0x12da>
   135be:	48 89 ce             	mov    %rcx,%rsi
   135c1:	48 89 c7             	mov    %rax,%rdi
   135c4:	ff d2                	call   *%rdx
   135c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   135ca:	48 89 82 d0 06 00 00 	mov    %rax,0x6d0(%rdx)
        vkCmdSetCullModeEXT = PFN_vkCmdSetCullModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetCullModeEXT" ) );
   135d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   135d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   135d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   135dd:	48 8d 0d 03 85 01 00 	lea    0x18503(%rip),%rcx        # 2bae7 <_ZNSt8__detailL19__atomic_spin_countE+0x12f3>
   135e4:	48 89 ce             	mov    %rcx,%rsi
   135e7:	48 89 c7             	mov    %rax,%rdi
   135ea:	ff d2                	call   *%rdx
   135ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   135f0:	48 89 82 d8 06 00 00 	mov    %rax,0x6d8(%rdx)
        if ( !vkCmdSetCullMode )
   135f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   135fb:	48 8b 80 50 05 00 00 	mov    0x550(%rax),%rax
   13602:	48 85 c0             	test   %rax,%rax
   13605:	75 16                	jne    1361d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3dcf>
          vkCmdSetCullMode = vkCmdSetCullModeEXT;
   13607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1360b:	48 8b 90 d8 06 00 00 	mov    0x6d8(%rax),%rdx
   13612:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13616:	48 89 90 50 05 00 00 	mov    %rdx,0x550(%rax)
        vkCmdSetFrontFaceEXT = PFN_vkCmdSetFrontFaceEXT( vkGetDeviceProcAddr( device, "vkCmdSetFrontFaceEXT" ) );
   1361d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13621:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13625:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13629:	48 8d 0d cb 84 01 00 	lea    0x184cb(%rip),%rcx        # 2bafb <_ZNSt8__detailL19__atomic_spin_countE+0x1307>
   13630:	48 89 ce             	mov    %rcx,%rsi
   13633:	48 89 c7             	mov    %rax,%rdi
   13636:	ff d2                	call   *%rdx
   13638:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1363c:	48 89 82 e0 06 00 00 	mov    %rax,0x6e0(%rdx)
        if ( !vkCmdSetFrontFace )
   13643:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13647:	48 8b 80 58 05 00 00 	mov    0x558(%rax),%rax
   1364e:	48 85 c0             	test   %rax,%rax
   13651:	75 16                	jne    13669 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3e1b>
          vkCmdSetFrontFace = vkCmdSetFrontFaceEXT;
   13653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13657:	48 8b 90 e0 06 00 00 	mov    0x6e0(%rax),%rdx
   1365e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13662:	48 89 90 58 05 00 00 	mov    %rdx,0x558(%rax)
        vkCmdSetPrimitiveTopologyEXT = PFN_vkCmdSetPrimitiveTopologyEXT( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveTopologyEXT" ) );
   13669:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1366d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13671:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13675:	48 8d 0d 94 84 01 00 	lea    0x18494(%rip),%rcx        # 2bb10 <_ZNSt8__detailL19__atomic_spin_countE+0x131c>
   1367c:	48 89 ce             	mov    %rcx,%rsi
   1367f:	48 89 c7             	mov    %rax,%rdi
   13682:	ff d2                	call   *%rdx
   13684:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13688:	48 89 82 e8 06 00 00 	mov    %rax,0x6e8(%rdx)
        if ( !vkCmdSetPrimitiveTopology )
   1368f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13693:	48 8b 80 60 05 00 00 	mov    0x560(%rax),%rax
   1369a:	48 85 c0             	test   %rax,%rax
   1369d:	75 16                	jne    136b5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3e67>
          vkCmdSetPrimitiveTopology = vkCmdSetPrimitiveTopologyEXT;
   1369f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136a3:	48 8b 90 e8 06 00 00 	mov    0x6e8(%rax),%rdx
   136aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136ae:	48 89 90 60 05 00 00 	mov    %rdx,0x560(%rax)
        vkCmdSetViewportWithCountEXT = PFN_vkCmdSetViewportWithCountEXT( vkGetDeviceProcAddr( device, "vkCmdSetViewportWithCountEXT" ) );
   136b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136b9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   136bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   136c1:	48 8d 0d 65 84 01 00 	lea    0x18465(%rip),%rcx        # 2bb2d <_ZNSt8__detailL19__atomic_spin_countE+0x1339>
   136c8:	48 89 ce             	mov    %rcx,%rsi
   136cb:	48 89 c7             	mov    %rax,%rdi
   136ce:	ff d2                	call   *%rdx
   136d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   136d4:	48 89 82 f0 06 00 00 	mov    %rax,0x6f0(%rdx)
        if ( !vkCmdSetViewportWithCount )
   136db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136df:	48 8b 80 68 05 00 00 	mov    0x568(%rax),%rax
   136e6:	48 85 c0             	test   %rax,%rax
   136e9:	75 16                	jne    13701 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3eb3>
          vkCmdSetViewportWithCount = vkCmdSetViewportWithCountEXT;
   136eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136ef:	48 8b 90 f0 06 00 00 	mov    0x6f0(%rax),%rdx
   136f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136fa:	48 89 90 68 05 00 00 	mov    %rdx,0x568(%rax)
        vkCmdSetScissorWithCountEXT = PFN_vkCmdSetScissorWithCountEXT( vkGetDeviceProcAddr( device, "vkCmdSetScissorWithCountEXT" ) );
   13701:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13705:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13709:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1370d:	48 8d 0d 36 84 01 00 	lea    0x18436(%rip),%rcx        # 2bb4a <_ZNSt8__detailL19__atomic_spin_countE+0x1356>
   13714:	48 89 ce             	mov    %rcx,%rsi
   13717:	48 89 c7             	mov    %rax,%rdi
   1371a:	ff d2                	call   *%rdx
   1371c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13720:	48 89 82 f8 06 00 00 	mov    %rax,0x6f8(%rdx)
        if ( !vkCmdSetScissorWithCount )
   13727:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1372b:	48 8b 80 70 05 00 00 	mov    0x570(%rax),%rax
   13732:	48 85 c0             	test   %rax,%rax
   13735:	75 16                	jne    1374d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3eff>
          vkCmdSetScissorWithCount = vkCmdSetScissorWithCountEXT;
   13737:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1373b:	48 8b 90 f8 06 00 00 	mov    0x6f8(%rax),%rdx
   13742:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13746:	48 89 90 70 05 00 00 	mov    %rdx,0x570(%rax)
        vkCmdBindVertexBuffers2EXT = PFN_vkCmdBindVertexBuffers2EXT( vkGetDeviceProcAddr( device, "vkCmdBindVertexBuffers2EXT" ) );
   1374d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13751:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13755:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13759:	48 8d 0d 06 84 01 00 	lea    0x18406(%rip),%rcx        # 2bb66 <_ZNSt8__detailL19__atomic_spin_countE+0x1372>
   13760:	48 89 ce             	mov    %rcx,%rsi
   13763:	48 89 c7             	mov    %rax,%rdi
   13766:	ff d2                	call   *%rdx
   13768:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1376c:	48 89 82 00 07 00 00 	mov    %rax,0x700(%rdx)
        if ( !vkCmdBindVertexBuffers2 )
   13773:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13777:	48 8b 80 78 05 00 00 	mov    0x578(%rax),%rax
   1377e:	48 85 c0             	test   %rax,%rax
   13781:	75 16                	jne    13799 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3f4b>
          vkCmdBindVertexBuffers2 = vkCmdBindVertexBuffers2EXT;
   13783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13787:	48 8b 90 00 07 00 00 	mov    0x700(%rax),%rdx
   1378e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13792:	48 89 90 78 05 00 00 	mov    %rdx,0x578(%rax)
        vkCmdSetDepthTestEnableEXT = PFN_vkCmdSetDepthTestEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthTestEnableEXT" ) );
   13799:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1379d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   137a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   137a5:	48 8d 0d d5 83 01 00 	lea    0x183d5(%rip),%rcx        # 2bb81 <_ZNSt8__detailL19__atomic_spin_countE+0x138d>
   137ac:	48 89 ce             	mov    %rcx,%rsi
   137af:	48 89 c7             	mov    %rax,%rdi
   137b2:	ff d2                	call   *%rdx
   137b4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   137b8:	48 89 82 08 07 00 00 	mov    %rax,0x708(%rdx)
        if ( !vkCmdSetDepthTestEnable )
   137bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137c3:	48 8b 80 80 05 00 00 	mov    0x580(%rax),%rax
   137ca:	48 85 c0             	test   %rax,%rax
   137cd:	75 16                	jne    137e5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3f97>
          vkCmdSetDepthTestEnable = vkCmdSetDepthTestEnableEXT;
   137cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137d3:	48 8b 90 08 07 00 00 	mov    0x708(%rax),%rdx
   137da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137de:	48 89 90 80 05 00 00 	mov    %rdx,0x580(%rax)
        vkCmdSetDepthWriteEnableEXT = PFN_vkCmdSetDepthWriteEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthWriteEnableEXT" ) );
   137e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   137ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   137f1:	48 8d 0d a4 83 01 00 	lea    0x183a4(%rip),%rcx        # 2bb9c <_ZNSt8__detailL19__atomic_spin_countE+0x13a8>
   137f8:	48 89 ce             	mov    %rcx,%rsi
   137fb:	48 89 c7             	mov    %rax,%rdi
   137fe:	ff d2                	call   *%rdx
   13800:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13804:	48 89 82 10 07 00 00 	mov    %rax,0x710(%rdx)
        if ( !vkCmdSetDepthWriteEnable )
   1380b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1380f:	48 8b 80 88 05 00 00 	mov    0x588(%rax),%rax
   13816:	48 85 c0             	test   %rax,%rax
   13819:	75 16                	jne    13831 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3fe3>
          vkCmdSetDepthWriteEnable = vkCmdSetDepthWriteEnableEXT;
   1381b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1381f:	48 8b 90 10 07 00 00 	mov    0x710(%rax),%rdx
   13826:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1382a:	48 89 90 88 05 00 00 	mov    %rdx,0x588(%rax)
        vkCmdSetDepthCompareOpEXT = PFN_vkCmdSetDepthCompareOpEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthCompareOpEXT" ) );
   13831:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13835:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13839:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1383d:	48 8d 0d 74 83 01 00 	lea    0x18374(%rip),%rcx        # 2bbb8 <_ZNSt8__detailL19__atomic_spin_countE+0x13c4>
   13844:	48 89 ce             	mov    %rcx,%rsi
   13847:	48 89 c7             	mov    %rax,%rdi
   1384a:	ff d2                	call   *%rdx
   1384c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13850:	48 89 82 18 07 00 00 	mov    %rax,0x718(%rdx)
        if ( !vkCmdSetDepthCompareOp )
   13857:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1385b:	48 8b 80 90 05 00 00 	mov    0x590(%rax),%rax
   13862:	48 85 c0             	test   %rax,%rax
   13865:	75 16                	jne    1387d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x402f>
          vkCmdSetDepthCompareOp = vkCmdSetDepthCompareOpEXT;
   13867:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1386b:	48 8b 90 18 07 00 00 	mov    0x718(%rax),%rdx
   13872:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13876:	48 89 90 90 05 00 00 	mov    %rdx,0x590(%rax)
        vkCmdSetDepthBoundsTestEnableEXT = PFN_vkCmdSetDepthBoundsTestEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthBoundsTestEnableEXT" ) );
   1387d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13881:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13885:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13889:	48 8d 0d 48 83 01 00 	lea    0x18348(%rip),%rcx        # 2bbd8 <_ZNSt8__detailL19__atomic_spin_countE+0x13e4>
   13890:	48 89 ce             	mov    %rcx,%rsi
   13893:	48 89 c7             	mov    %rax,%rdi
   13896:	ff d2                	call   *%rdx
   13898:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1389c:	48 89 82 20 07 00 00 	mov    %rax,0x720(%rdx)
        if ( !vkCmdSetDepthBoundsTestEnable )
   138a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138a7:	48 8b 80 98 05 00 00 	mov    0x598(%rax),%rax
   138ae:	48 85 c0             	test   %rax,%rax
   138b1:	75 16                	jne    138c9 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x407b>
          vkCmdSetDepthBoundsTestEnable = vkCmdSetDepthBoundsTestEnableEXT;
   138b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138b7:	48 8b 90 20 07 00 00 	mov    0x720(%rax),%rdx
   138be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138c2:	48 89 90 98 05 00 00 	mov    %rdx,0x598(%rax)
        vkCmdSetStencilTestEnableEXT = PFN_vkCmdSetStencilTestEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetStencilTestEnableEXT" ) );
   138c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138cd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   138d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   138d5:	48 8d 0d 1d 83 01 00 	lea    0x1831d(%rip),%rcx        # 2bbf9 <_ZNSt8__detailL19__atomic_spin_countE+0x1405>
   138dc:	48 89 ce             	mov    %rcx,%rsi
   138df:	48 89 c7             	mov    %rax,%rdi
   138e2:	ff d2                	call   *%rdx
   138e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   138e8:	48 89 82 28 07 00 00 	mov    %rax,0x728(%rdx)
        if ( !vkCmdSetStencilTestEnable )
   138ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138f3:	48 8b 80 a0 05 00 00 	mov    0x5a0(%rax),%rax
   138fa:	48 85 c0             	test   %rax,%rax
   138fd:	75 16                	jne    13915 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x40c7>
          vkCmdSetStencilTestEnable = vkCmdSetStencilTestEnableEXT;
   138ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13903:	48 8b 90 28 07 00 00 	mov    0x728(%rax),%rdx
   1390a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1390e:	48 89 90 a0 05 00 00 	mov    %rdx,0x5a0(%rax)
        vkCmdSetStencilOpEXT = PFN_vkCmdSetStencilOpEXT( vkGetDeviceProcAddr( device, "vkCmdSetStencilOpEXT" ) );
   13915:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13919:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1391d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13921:	48 8d 0d ee 82 01 00 	lea    0x182ee(%rip),%rcx        # 2bc16 <_ZNSt8__detailL19__atomic_spin_countE+0x1422>
   13928:	48 89 ce             	mov    %rcx,%rsi
   1392b:	48 89 c7             	mov    %rax,%rdi
   1392e:	ff d2                	call   *%rdx
   13930:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13934:	48 89 82 30 07 00 00 	mov    %rax,0x730(%rdx)
        if ( !vkCmdSetStencilOp )
   1393b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1393f:	48 8b 80 a8 05 00 00 	mov    0x5a8(%rax),%rax
   13946:	48 85 c0             	test   %rax,%rax
   13949:	75 16                	jne    13961 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4113>
          vkCmdSetStencilOp = vkCmdSetStencilOpEXT;
   1394b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1394f:	48 8b 90 30 07 00 00 	mov    0x730(%rax),%rdx
   13956:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1395a:	48 89 90 a8 05 00 00 	mov    %rdx,0x5a8(%rax)
        vkCmdSetPatchControlPointsEXT      = PFN_vkCmdSetPatchControlPointsEXT( vkGetDeviceProcAddr( device, "vkCmdSetPatchControlPointsEXT" ) );
   13961:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13965:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13969:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1396d:	48 8d 0d b7 82 01 00 	lea    0x182b7(%rip),%rcx        # 2bc2b <_ZNSt8__detailL19__atomic_spin_countE+0x1437>
   13974:	48 89 ce             	mov    %rcx,%rsi
   13977:	48 89 c7             	mov    %rax,%rdi
   1397a:	ff d2                	call   *%rdx
   1397c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13980:	48 89 82 38 07 00 00 	mov    %rax,0x738(%rdx)
        vkCmdSetRasterizerDiscardEnableEXT = PFN_vkCmdSetRasterizerDiscardEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetRasterizerDiscardEnableEXT" ) );
   13987:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1398b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1398f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13993:	48 8d 0d b6 82 01 00 	lea    0x182b6(%rip),%rcx        # 2bc50 <_ZNSt8__detailL19__atomic_spin_countE+0x145c>
   1399a:	48 89 ce             	mov    %rcx,%rsi
   1399d:	48 89 c7             	mov    %rax,%rdi
   139a0:	ff d2                	call   *%rdx
   139a2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   139a6:	48 89 82 40 07 00 00 	mov    %rax,0x740(%rdx)
        if ( !vkCmdSetRasterizerDiscardEnable )
   139ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139b1:	48 8b 80 b0 05 00 00 	mov    0x5b0(%rax),%rax
   139b8:	48 85 c0             	test   %rax,%rax
   139bb:	75 16                	jne    139d3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4185>
          vkCmdSetRasterizerDiscardEnable = vkCmdSetRasterizerDiscardEnableEXT;
   139bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139c1:	48 8b 90 40 07 00 00 	mov    0x740(%rax),%rdx
   139c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139cc:	48 89 90 b0 05 00 00 	mov    %rdx,0x5b0(%rax)
        vkCmdSetDepthBiasEnableEXT = PFN_vkCmdSetDepthBiasEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthBiasEnableEXT" ) );
   139d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139d7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   139db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   139df:	48 8d 0d 8d 82 01 00 	lea    0x1828d(%rip),%rcx        # 2bc73 <_ZNSt8__detailL19__atomic_spin_countE+0x147f>
   139e6:	48 89 ce             	mov    %rcx,%rsi
   139e9:	48 89 c7             	mov    %rax,%rdi
   139ec:	ff d2                	call   *%rdx
   139ee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   139f2:	48 89 82 48 07 00 00 	mov    %rax,0x748(%rdx)
        if ( !vkCmdSetDepthBiasEnable )
   139f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139fd:	48 8b 80 b8 05 00 00 	mov    0x5b8(%rax),%rax
   13a04:	48 85 c0             	test   %rax,%rax
   13a07:	75 16                	jne    13a1f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x41d1>
          vkCmdSetDepthBiasEnable = vkCmdSetDepthBiasEnableEXT;
   13a09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a0d:	48 8b 90 48 07 00 00 	mov    0x748(%rax),%rdx
   13a14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a18:	48 89 90 b8 05 00 00 	mov    %rdx,0x5b8(%rax)
        vkCmdSetLogicOpEXT                = PFN_vkCmdSetLogicOpEXT( vkGetDeviceProcAddr( device, "vkCmdSetLogicOpEXT" ) );
   13a1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a23:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a2b:	48 8d 0d 5c 82 01 00 	lea    0x1825c(%rip),%rcx        # 2bc8e <_ZNSt8__detailL19__atomic_spin_countE+0x149a>
   13a32:	48 89 ce             	mov    %rcx,%rsi
   13a35:	48 89 c7             	mov    %rax,%rdi
   13a38:	ff d2                	call   *%rdx
   13a3a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a3e:	48 89 82 50 07 00 00 	mov    %rax,0x750(%rdx)
        vkCmdSetPrimitiveRestartEnableEXT = PFN_vkCmdSetPrimitiveRestartEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveRestartEnableEXT" ) );
   13a45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a49:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a51:	48 8d 0d 50 82 01 00 	lea    0x18250(%rip),%rcx        # 2bca8 <_ZNSt8__detailL19__atomic_spin_countE+0x14b4>
   13a58:	48 89 ce             	mov    %rcx,%rsi
   13a5b:	48 89 c7             	mov    %rax,%rdi
   13a5e:	ff d2                	call   *%rdx
   13a60:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a64:	48 89 82 58 07 00 00 	mov    %rax,0x758(%rdx)
        if ( !vkCmdSetPrimitiveRestartEnable )
   13a6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a6f:	48 8b 80 c0 05 00 00 	mov    0x5c0(%rax),%rax
   13a76:	48 85 c0             	test   %rax,%rax
   13a79:	75 16                	jne    13a91 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4243>
          vkCmdSetPrimitiveRestartEnable = vkCmdSetPrimitiveRestartEnableEXT;
   13a7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a7f:	48 8b 90 58 07 00 00 	mov    0x758(%rax),%rdx
   13a86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a8a:	48 89 90 c0 05 00 00 	mov    %rdx,0x5c0(%rax)
        vkCmdSetTessellationDomainOriginEXT = PFN_vkCmdSetTessellationDomainOriginEXT( vkGetDeviceProcAddr( device, "vkCmdSetTessellationDomainOriginEXT" ) );
   13a91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a95:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a9d:	48 8d 0d 2c 82 01 00 	lea    0x1822c(%rip),%rcx        # 2bcd0 <_ZNSt8__detailL19__atomic_spin_countE+0x14dc>
   13aa4:	48 89 ce             	mov    %rcx,%rsi
   13aa7:	48 89 c7             	mov    %rax,%rdi
   13aaa:	ff d2                	call   *%rdx
   13aac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ab0:	48 89 82 60 07 00 00 	mov    %rax,0x760(%rdx)
        vkCmdSetDepthClampEnableEXT         = PFN_vkCmdSetDepthClampEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthClampEnableEXT" ) );
   13ab7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13abb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13abf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ac3:	48 8d 0d 2a 82 01 00 	lea    0x1822a(%rip),%rcx        # 2bcf4 <_ZNSt8__detailL19__atomic_spin_countE+0x1500>
   13aca:	48 89 ce             	mov    %rcx,%rsi
   13acd:	48 89 c7             	mov    %rax,%rdi
   13ad0:	ff d2                	call   *%rdx
   13ad2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ad6:	48 89 82 68 07 00 00 	mov    %rax,0x768(%rdx)
        vkCmdSetPolygonModeEXT              = PFN_vkCmdSetPolygonModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetPolygonModeEXT" ) );
   13add:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ae1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ae5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ae9:	48 8d 0d 20 82 01 00 	lea    0x18220(%rip),%rcx        # 2bd10 <_ZNSt8__detailL19__atomic_spin_countE+0x151c>
   13af0:	48 89 ce             	mov    %rcx,%rsi
   13af3:	48 89 c7             	mov    %rax,%rdi
   13af6:	ff d2                	call   *%rdx
   13af8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13afc:	48 89 82 70 07 00 00 	mov    %rax,0x770(%rdx)
        vkCmdSetRasterizationSamplesEXT     = PFN_vkCmdSetRasterizationSamplesEXT( vkGetDeviceProcAddr( device, "vkCmdSetRasterizationSamplesEXT" ) );
   13b03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b07:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b0f:	48 8d 0d 12 82 01 00 	lea    0x18212(%rip),%rcx        # 2bd28 <_ZNSt8__detailL19__atomic_spin_countE+0x1534>
   13b16:	48 89 ce             	mov    %rcx,%rsi
   13b19:	48 89 c7             	mov    %rax,%rdi
   13b1c:	ff d2                	call   *%rdx
   13b1e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b22:	48 89 82 78 07 00 00 	mov    %rax,0x778(%rdx)
        vkCmdSetSampleMaskEXT               = PFN_vkCmdSetSampleMaskEXT( vkGetDeviceProcAddr( device, "vkCmdSetSampleMaskEXT" ) );
   13b29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b2d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b35:	48 8d 0d 0c 82 01 00 	lea    0x1820c(%rip),%rcx        # 2bd48 <_ZNSt8__detailL19__atomic_spin_countE+0x1554>
   13b3c:	48 89 ce             	mov    %rcx,%rsi
   13b3f:	48 89 c7             	mov    %rax,%rdi
   13b42:	ff d2                	call   *%rdx
   13b44:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b48:	48 89 82 80 07 00 00 	mov    %rax,0x780(%rdx)
        vkCmdSetAlphaToCoverageEnableEXT    = PFN_vkCmdSetAlphaToCoverageEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetAlphaToCoverageEnableEXT" ) );
   13b4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b53:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b5b:	48 8d 0d fe 81 01 00 	lea    0x181fe(%rip),%rcx        # 2bd60 <_ZNSt8__detailL19__atomic_spin_countE+0x156c>
   13b62:	48 89 ce             	mov    %rcx,%rsi
   13b65:	48 89 c7             	mov    %rax,%rdi
   13b68:	ff d2                	call   *%rdx
   13b6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b6e:	48 89 82 88 07 00 00 	mov    %rax,0x788(%rdx)
        vkCmdSetAlphaToOneEnableEXT         = PFN_vkCmdSetAlphaToOneEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetAlphaToOneEnableEXT" ) );
   13b75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b79:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b81:	48 8d 0d f9 81 01 00 	lea    0x181f9(%rip),%rcx        # 2bd81 <_ZNSt8__detailL19__atomic_spin_countE+0x158d>
   13b88:	48 89 ce             	mov    %rcx,%rsi
   13b8b:	48 89 c7             	mov    %rax,%rdi
   13b8e:	ff d2                	call   *%rdx
   13b90:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b94:	48 89 82 90 07 00 00 	mov    %rax,0x790(%rdx)
        vkCmdSetLogicOpEnableEXT            = PFN_vkCmdSetLogicOpEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetLogicOpEnableEXT" ) );
   13b9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b9f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ba3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ba7:	48 8d 0d ef 81 01 00 	lea    0x181ef(%rip),%rcx        # 2bd9d <_ZNSt8__detailL19__atomic_spin_countE+0x15a9>
   13bae:	48 89 ce             	mov    %rcx,%rsi
   13bb1:	48 89 c7             	mov    %rax,%rdi
   13bb4:	ff d2                	call   *%rdx
   13bb6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13bba:	48 89 82 98 07 00 00 	mov    %rax,0x798(%rdx)
        vkCmdSetColorBlendEnableEXT         = PFN_vkCmdSetColorBlendEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorBlendEnableEXT" ) );
   13bc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13bc5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13bc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13bcd:	48 8d 0d e2 81 01 00 	lea    0x181e2(%rip),%rcx        # 2bdb6 <_ZNSt8__detailL19__atomic_spin_countE+0x15c2>
   13bd4:	48 89 ce             	mov    %rcx,%rsi
   13bd7:	48 89 c7             	mov    %rax,%rdi
   13bda:	ff d2                	call   *%rdx
   13bdc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13be0:	48 89 82 a0 07 00 00 	mov    %rax,0x7a0(%rdx)
        vkCmdSetColorBlendEquationEXT       = PFN_vkCmdSetColorBlendEquationEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorBlendEquationEXT" ) );
   13be7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13beb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13bef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13bf3:	48 8d 0d d8 81 01 00 	lea    0x181d8(%rip),%rcx        # 2bdd2 <_ZNSt8__detailL19__atomic_spin_countE+0x15de>
   13bfa:	48 89 ce             	mov    %rcx,%rsi
   13bfd:	48 89 c7             	mov    %rax,%rdi
   13c00:	ff d2                	call   *%rdx
   13c02:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c06:	48 89 82 a8 07 00 00 	mov    %rax,0x7a8(%rdx)
        vkCmdSetColorWriteMaskEXT           = PFN_vkCmdSetColorWriteMaskEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorWriteMaskEXT" ) );
   13c0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c11:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c19:	48 8d 0d d0 81 01 00 	lea    0x181d0(%rip),%rcx        # 2bdf0 <_ZNSt8__detailL19__atomic_spin_countE+0x15fc>
   13c20:	48 89 ce             	mov    %rcx,%rsi
   13c23:	48 89 c7             	mov    %rax,%rdi
   13c26:	ff d2                	call   *%rdx
   13c28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c2c:	48 89 82 b0 07 00 00 	mov    %rax,0x7b0(%rdx)
        vkCmdSetRasterizationStreamEXT      = PFN_vkCmdSetRasterizationStreamEXT( vkGetDeviceProcAddr( device, "vkCmdSetRasterizationStreamEXT" ) );
   13c33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c37:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c3f:	48 8d 0d ca 81 01 00 	lea    0x181ca(%rip),%rcx        # 2be10 <_ZNSt8__detailL19__atomic_spin_countE+0x161c>
   13c46:	48 89 ce             	mov    %rcx,%rsi
   13c49:	48 89 c7             	mov    %rax,%rdi
   13c4c:	ff d2                	call   *%rdx
   13c4e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c52:	48 89 82 b8 07 00 00 	mov    %rax,0x7b8(%rdx)
          PFN_vkCmdSetConservativeRasterizationModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetConservativeRasterizationModeEXT" ) );
   13c59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c5d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c65:	48 8d 0d c4 81 01 00 	lea    0x181c4(%rip),%rcx        # 2be30 <_ZNSt8__detailL19__atomic_spin_countE+0x163c>
   13c6c:	48 89 ce             	mov    %rcx,%rsi
   13c6f:	48 89 c7             	mov    %rax,%rdi
   13c72:	ff d2                	call   *%rdx
        vkCmdSetConservativeRasterizationModeEXT =
   13c74:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c78:	48 89 82 c0 07 00 00 	mov    %rax,0x7c0(%rdx)
          PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT( vkGetDeviceProcAddr( device, "vkCmdSetExtraPrimitiveOverestimationSizeEXT" ) );
   13c7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c83:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c8b:	48 8d 0d ce 81 01 00 	lea    0x181ce(%rip),%rcx        # 2be60 <_ZNSt8__detailL19__atomic_spin_countE+0x166c>
   13c92:	48 89 ce             	mov    %rcx,%rsi
   13c95:	48 89 c7             	mov    %rax,%rdi
   13c98:	ff d2                	call   *%rdx
        vkCmdSetExtraPrimitiveOverestimationSizeEXT =
   13c9a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c9e:	48 89 82 c8 07 00 00 	mov    %rax,0x7c8(%rdx)
        vkCmdSetDepthClipEnableEXT       = PFN_vkCmdSetDepthClipEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthClipEnableEXT" ) );
   13ca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ca9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13cad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13cb1:	48 8d 0d d4 81 01 00 	lea    0x181d4(%rip),%rcx        # 2be8c <_ZNSt8__detailL19__atomic_spin_countE+0x1698>
   13cb8:	48 89 ce             	mov    %rcx,%rsi
   13cbb:	48 89 c7             	mov    %rax,%rdi
   13cbe:	ff d2                	call   *%rdx
   13cc0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13cc4:	48 89 82 d0 07 00 00 	mov    %rax,0x7d0(%rdx)
        vkCmdSetSampleLocationsEnableEXT = PFN_vkCmdSetSampleLocationsEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetSampleLocationsEnableEXT" ) );
   13ccb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ccf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13cd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13cd7:	48 8d 0d ca 81 01 00 	lea    0x181ca(%rip),%rcx        # 2bea8 <_ZNSt8__detailL19__atomic_spin_countE+0x16b4>
   13cde:	48 89 ce             	mov    %rcx,%rsi
   13ce1:	48 89 c7             	mov    %rax,%rdi
   13ce4:	ff d2                	call   *%rdx
   13ce6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13cea:	48 89 82 d8 07 00 00 	mov    %rax,0x7d8(%rdx)
        vkCmdSetColorBlendAdvancedEXT    = PFN_vkCmdSetColorBlendAdvancedEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorBlendAdvancedEXT" ) );
   13cf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13cf5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13cf9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13cfd:	48 8d 0d c5 81 01 00 	lea    0x181c5(%rip),%rcx        # 2bec9 <_ZNSt8__detailL19__atomic_spin_countE+0x16d5>
   13d04:	48 89 ce             	mov    %rcx,%rsi
   13d07:	48 89 c7             	mov    %rax,%rdi
   13d0a:	ff d2                	call   *%rdx
   13d0c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d10:	48 89 82 e0 07 00 00 	mov    %rax,0x7e0(%rdx)
        vkCmdSetProvokingVertexModeEXT   = PFN_vkCmdSetProvokingVertexModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetProvokingVertexModeEXT" ) );
   13d17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d1b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13d1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d23:	48 8d 0d be 81 01 00 	lea    0x181be(%rip),%rcx        # 2bee8 <_ZNSt8__detailL19__atomic_spin_countE+0x16f4>
   13d2a:	48 89 ce             	mov    %rcx,%rsi
   13d2d:	48 89 c7             	mov    %rax,%rdi
   13d30:	ff d2                	call   *%rdx
   13d32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d36:	48 89 82 e8 07 00 00 	mov    %rax,0x7e8(%rdx)
        vkCmdSetLineRasterizationModeEXT = PFN_vkCmdSetLineRasterizationModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetLineRasterizationModeEXT" ) );
   13d3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d41:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13d45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d49:	48 8d 0d b8 81 01 00 	lea    0x181b8(%rip),%rcx        # 2bf08 <_ZNSt8__detailL19__atomic_spin_countE+0x1714>
   13d50:	48 89 ce             	mov    %rcx,%rsi
   13d53:	48 89 c7             	mov    %rax,%rdi
   13d56:	ff d2                	call   *%rdx
   13d58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d5c:	48 89 82 f0 07 00 00 	mov    %rax,0x7f0(%rdx)
        vkCmdSetLineStippleEnableEXT     = PFN_vkCmdSetLineStippleEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetLineStippleEnableEXT" ) );
   13d63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d67:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13d6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d6f:	48 8d 0d b3 81 01 00 	lea    0x181b3(%rip),%rcx        # 2bf29 <_ZNSt8__detailL19__atomic_spin_countE+0x1735>
   13d76:	48 89 ce             	mov    %rcx,%rsi
   13d79:	48 89 c7             	mov    %rax,%rdi
   13d7c:	ff d2                	call   *%rdx
   13d7e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d82:	48 89 82 f8 07 00 00 	mov    %rax,0x7f8(%rdx)
          PFN_vkCmdSetDepthClipNegativeOneToOneEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthClipNegativeOneToOneEXT" ) );
   13d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d8d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13d91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d95:	48 8d 0d ac 81 01 00 	lea    0x181ac(%rip),%rcx        # 2bf48 <_ZNSt8__detailL19__atomic_spin_countE+0x1754>
   13d9c:	48 89 ce             	mov    %rcx,%rsi
   13d9f:	48 89 c7             	mov    %rax,%rdi
   13da2:	ff d2                	call   *%rdx
        vkCmdSetDepthClipNegativeOneToOneEXT =
   13da4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13da8:	48 89 82 00 08 00 00 	mov    %rax,0x800(%rdx)
        vkCmdSetViewportWScalingEnableNV  = PFN_vkCmdSetViewportWScalingEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportWScalingEnableNV" ) );
   13daf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13db3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13db7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13dbb:	48 8d 0d ae 81 01 00 	lea    0x181ae(%rip),%rcx        # 2bf70 <_ZNSt8__detailL19__atomic_spin_countE+0x177c>
   13dc2:	48 89 ce             	mov    %rcx,%rsi
   13dc5:	48 89 c7             	mov    %rax,%rdi
   13dc8:	ff d2                	call   *%rdx
   13dca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13dce:	48 89 82 08 08 00 00 	mov    %rax,0x808(%rdx)
        vkCmdSetViewportSwizzleNV         = PFN_vkCmdSetViewportSwizzleNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportSwizzleNV" ) );
   13dd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13dd9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13de1:	48 8d 0d a9 81 01 00 	lea    0x181a9(%rip),%rcx        # 2bf91 <_ZNSt8__detailL19__atomic_spin_countE+0x179d>
   13de8:	48 89 ce             	mov    %rcx,%rsi
   13deb:	48 89 c7             	mov    %rax,%rdi
   13dee:	ff d2                	call   *%rdx
   13df0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13df4:	48 89 82 10 08 00 00 	mov    %rax,0x810(%rdx)
        vkCmdSetCoverageToColorEnableNV   = PFN_vkCmdSetCoverageToColorEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageToColorEnableNV" ) );
   13dfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13dff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e07:	48 8d 0d a2 81 01 00 	lea    0x181a2(%rip),%rcx        # 2bfb0 <_ZNSt8__detailL19__atomic_spin_countE+0x17bc>
   13e0e:	48 89 ce             	mov    %rcx,%rsi
   13e11:	48 89 c7             	mov    %rax,%rdi
   13e14:	ff d2                	call   *%rdx
   13e16:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e1a:	48 89 82 18 08 00 00 	mov    %rax,0x818(%rdx)
        vkCmdSetCoverageToColorLocationNV = PFN_vkCmdSetCoverageToColorLocationNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageToColorLocationNV" ) );
   13e21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e25:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e2d:	48 8d 0d 9c 81 01 00 	lea    0x1819c(%rip),%rcx        # 2bfd0 <_ZNSt8__detailL19__atomic_spin_countE+0x17dc>
   13e34:	48 89 ce             	mov    %rcx,%rsi
   13e37:	48 89 c7             	mov    %rax,%rdi
   13e3a:	ff d2                	call   *%rdx
   13e3c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e40:	48 89 82 20 08 00 00 	mov    %rax,0x820(%rdx)
        vkCmdSetCoverageModulationModeNV  = PFN_vkCmdSetCoverageModulationModeNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageModulationModeNV" ) );
   13e47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e4b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e53:	48 8d 0d 9e 81 01 00 	lea    0x1819e(%rip),%rcx        # 2bff8 <_ZNSt8__detailL19__atomic_spin_countE+0x1804>
   13e5a:	48 89 ce             	mov    %rcx,%rsi
   13e5d:	48 89 c7             	mov    %rax,%rdi
   13e60:	ff d2                	call   *%rdx
   13e62:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e66:	48 89 82 28 08 00 00 	mov    %rax,0x828(%rdx)
          PFN_vkCmdSetCoverageModulationTableEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageModulationTableEnableNV" ) );
   13e6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e71:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e79:	48 8d 0d a0 81 01 00 	lea    0x181a0(%rip),%rcx        # 2c020 <_ZNSt8__detailL19__atomic_spin_countE+0x182c>
   13e80:	48 89 ce             	mov    %rcx,%rsi
   13e83:	48 89 c7             	mov    %rax,%rdi
   13e86:	ff d2                	call   *%rdx
        vkCmdSetCoverageModulationTableEnableNV =
   13e88:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e8c:	48 89 82 30 08 00 00 	mov    %rax,0x830(%rdx)
        vkCmdSetCoverageModulationTableNV = PFN_vkCmdSetCoverageModulationTableNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageModulationTableNV" ) );
   13e93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e97:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e9f:	48 8d 0d a2 81 01 00 	lea    0x181a2(%rip),%rcx        # 2c048 <_ZNSt8__detailL19__atomic_spin_countE+0x1854>
   13ea6:	48 89 ce             	mov    %rcx,%rsi
   13ea9:	48 89 c7             	mov    %rax,%rdi
   13eac:	ff d2                	call   *%rdx
   13eae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13eb2:	48 89 82 38 08 00 00 	mov    %rax,0x838(%rdx)
        vkCmdSetShadingRateImageEnableNV  = PFN_vkCmdSetShadingRateImageEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetShadingRateImageEnableNV" ) );
   13eb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ebd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ec1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ec5:	48 8d 0d a4 81 01 00 	lea    0x181a4(%rip),%rcx        # 2c070 <_ZNSt8__detailL19__atomic_spin_countE+0x187c>
   13ecc:	48 89 ce             	mov    %rcx,%rsi
   13ecf:	48 89 c7             	mov    %rax,%rdi
   13ed2:	ff d2                	call   *%rdx
   13ed4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ed8:	48 89 82 40 08 00 00 	mov    %rax,0x840(%rdx)
          PFN_vkCmdSetRepresentativeFragmentTestEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetRepresentativeFragmentTestEnableNV" ) );
   13edf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ee3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ee7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13eeb:	48 8d 0d a6 81 01 00 	lea    0x181a6(%rip),%rcx        # 2c098 <_ZNSt8__detailL19__atomic_spin_countE+0x18a4>
   13ef2:	48 89 ce             	mov    %rcx,%rsi
   13ef5:	48 89 c7             	mov    %rax,%rdi
   13ef8:	ff d2                	call   *%rdx
        vkCmdSetRepresentativeFragmentTestEnableNV =
   13efa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13efe:	48 89 82 48 08 00 00 	mov    %rax,0x848(%rdx)
        vkCmdSetCoverageReductionModeNV = PFN_vkCmdSetCoverageReductionModeNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageReductionModeNV" ) );
   13f05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f09:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f11:	48 8d 0d b0 81 01 00 	lea    0x181b0(%rip),%rcx        # 2c0c8 <_ZNSt8__detailL19__atomic_spin_countE+0x18d4>
   13f18:	48 89 ce             	mov    %rcx,%rsi
   13f1b:	48 89 c7             	mov    %rax,%rdi
   13f1e:	ff d2                	call   *%rdx
   13f20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f24:	48 89 82 50 08 00 00 	mov    %rax,0x850(%rdx)
        vkGetMemoryHostPointerPropertiesEXT = PFN_vkGetMemoryHostPointerPropertiesEXT( vkGetDeviceProcAddr( device, "vkGetMemoryHostPointerPropertiesEXT" ) );
   13f2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f2f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f37:	48 8d 0d aa 81 01 00 	lea    0x181aa(%rip),%rcx        # 2c0e8 <_ZNSt8__detailL19__atomic_spin_countE+0x18f4>
   13f3e:	48 89 ce             	mov    %rcx,%rsi
   13f41:	48 89 c7             	mov    %rax,%rdi
   13f44:	ff d2                	call   *%rdx
   13f46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f4a:	48 89 82 58 08 00 00 	mov    %rax,0x858(%rdx)
        vkSetHdrMetadataEXT = PFN_vkSetHdrMetadataEXT( vkGetDeviceProcAddr( device, "vkSetHdrMetadataEXT" ) );
   13f51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f55:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f5d:	48 8d 0d a8 81 01 00 	lea    0x181a8(%rip),%rcx        # 2c10c <_ZNSt8__detailL19__atomic_spin_countE+0x1918>
   13f64:	48 89 ce             	mov    %rcx,%rsi
   13f67:	48 89 c7             	mov    %rax,%rdi
   13f6a:	ff d2                	call   *%rdx
   13f6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f70:	48 89 82 78 08 00 00 	mov    %rax,0x878(%rdx)
        vkResetQueryPoolEXT = PFN_vkResetQueryPoolEXT( vkGetDeviceProcAddr( device, "vkResetQueryPoolEXT" ) );
   13f77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f7b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f83:	48 8d 0d 96 81 01 00 	lea    0x18196(%rip),%rcx        # 2c120 <_ZNSt8__detailL19__atomic_spin_countE+0x192c>
   13f8a:	48 89 ce             	mov    %rcx,%rsi
   13f8d:	48 89 c7             	mov    %rax,%rdi
   13f90:	ff d2                	call   *%rdx
   13f92:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f96:	48 89 82 80 08 00 00 	mov    %rax,0x880(%rdx)
        if ( !vkResetQueryPool )
   13f9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fa1:	48 8b 80 88 04 00 00 	mov    0x488(%rax),%rax
   13fa8:	48 85 c0             	test   %rax,%rax
   13fab:	75 16                	jne    13fc3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4775>
          vkResetQueryPool = vkResetQueryPoolEXT;
   13fad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fb1:	48 8b 90 80 08 00 00 	mov    0x880(%rax),%rdx
   13fb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fbc:	48 89 90 88 04 00 00 	mov    %rdx,0x488(%rax)
        vkGetImageSubresourceLayout2EXT = PFN_vkGetImageSubresourceLayout2EXT( vkGetDeviceProcAddr( device, "vkGetImageSubresourceLayout2EXT" ) );
   13fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fc7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13fcb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13fcf:	48 8d 0d 62 81 01 00 	lea    0x18162(%rip),%rcx        # 2c138 <_ZNSt8__detailL19__atomic_spin_countE+0x1944>
   13fd6:	48 89 ce             	mov    %rcx,%rsi
   13fd9:	48 89 c7             	mov    %rax,%rdi
   13fdc:	ff d2                	call   *%rdx
   13fde:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13fe2:	48 89 82 88 08 00 00 	mov    %rax,0x888(%rdx)
          PFN_vkGetImageDrmFormatModifierPropertiesEXT( vkGetDeviceProcAddr( device, "vkGetImageDrmFormatModifierPropertiesEXT" ) );
   13fe9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ff1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ff5:	48 8d 0d 5c 81 01 00 	lea    0x1815c(%rip),%rcx        # 2c158 <_ZNSt8__detailL19__atomic_spin_countE+0x1964>
   13ffc:	48 89 ce             	mov    %rcx,%rsi
   13fff:	48 89 c7             	mov    %rax,%rdi
   14002:	ff d2                	call   *%rdx
        vkGetImageDrmFormatModifierPropertiesEXT =
   14004:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14008:	48 89 82 90 08 00 00 	mov    %rax,0x890(%rdx)
        vkCmdSetLineStippleEXT = PFN_vkCmdSetLineStippleEXT( vkGetDeviceProcAddr( device, "vkCmdSetLineStippleEXT" ) );
   1400f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14013:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14017:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1401b:	48 8d 0d 5f 81 01 00 	lea    0x1815f(%rip),%rcx        # 2c181 <_ZNSt8__detailL19__atomic_spin_countE+0x198d>
   14022:	48 89 ce             	mov    %rcx,%rsi
   14025:	48 89 c7             	mov    %rax,%rdi
   14028:	ff d2                	call   *%rdx
   1402a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1402e:	48 89 82 98 08 00 00 	mov    %rax,0x898(%rdx)
        vkCmdDrawMeshTasksEXT              = PFN_vkCmdDrawMeshTasksEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksEXT" ) );
   14035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14039:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1403d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14041:	48 8d 0d 50 81 01 00 	lea    0x18150(%rip),%rcx        # 2c198 <_ZNSt8__detailL19__atomic_spin_countE+0x19a4>
   14048:	48 89 ce             	mov    %rcx,%rsi
   1404b:	48 89 c7             	mov    %rax,%rdi
   1404e:	ff d2                	call   *%rdx
   14050:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14054:	48 89 82 a0 08 00 00 	mov    %rax,0x8a0(%rdx)
        vkCmdDrawMeshTasksIndirectEXT      = PFN_vkCmdDrawMeshTasksIndirectEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectEXT" ) );
   1405b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1405f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14063:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14067:	48 8d 0d 40 81 01 00 	lea    0x18140(%rip),%rcx        # 2c1ae <_ZNSt8__detailL19__atomic_spin_countE+0x19ba>
   1406e:	48 89 ce             	mov    %rcx,%rsi
   14071:	48 89 c7             	mov    %rax,%rdi
   14074:	ff d2                	call   *%rdx
   14076:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1407a:	48 89 82 a8 08 00 00 	mov    %rax,0x8a8(%rdx)
        vkCmdDrawMeshTasksIndirectCountEXT = PFN_vkCmdDrawMeshTasksIndirectCountEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectCountEXT" ) );
   14081:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14085:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14089:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1408d:	48 8d 0d 3c 81 01 00 	lea    0x1813c(%rip),%rcx        # 2c1d0 <_ZNSt8__detailL19__atomic_spin_countE+0x19dc>
   14094:	48 89 ce             	mov    %rcx,%rsi
   14097:	48 89 c7             	mov    %rax,%rdi
   1409a:	ff d2                	call   *%rdx
   1409c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   140a0:	48 89 82 b0 08 00 00 	mov    %rax,0x8b0(%rdx)
        vkCmdDrawMultiEXT        = PFN_vkCmdDrawMultiEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMultiEXT" ) );
   140a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140ab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   140af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140b3:	48 8d 0d 39 81 01 00 	lea    0x18139(%rip),%rcx        # 2c1f3 <_ZNSt8__detailL19__atomic_spin_countE+0x19ff>
   140ba:	48 89 ce             	mov    %rcx,%rsi
   140bd:	48 89 c7             	mov    %rax,%rdi
   140c0:	ff d2                	call   *%rdx
   140c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   140c6:	48 89 82 c0 08 00 00 	mov    %rax,0x8c0(%rdx)
        vkCmdDrawMultiIndexedEXT = PFN_vkCmdDrawMultiIndexedEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMultiIndexedEXT" ) );
   140cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140d1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   140d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140d9:	48 8d 0d 25 81 01 00 	lea    0x18125(%rip),%rcx        # 2c205 <_ZNSt8__detailL19__atomic_spin_countE+0x1a11>
   140e0:	48 89 ce             	mov    %rcx,%rsi
   140e3:	48 89 c7             	mov    %rax,%rdi
   140e6:	ff d2                	call   *%rdx
   140e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   140ec:	48 89 82 c8 08 00 00 	mov    %rax,0x8c8(%rdx)
        vkCreateMicromapEXT                 = PFN_vkCreateMicromapEXT( vkGetDeviceProcAddr( device, "vkCreateMicromapEXT" ) );
   140f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140f7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   140fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140ff:	48 8d 0d 18 81 01 00 	lea    0x18118(%rip),%rcx        # 2c21e <_ZNSt8__detailL19__atomic_spin_countE+0x1a2a>
   14106:	48 89 ce             	mov    %rcx,%rsi
   14109:	48 89 c7             	mov    %rax,%rdi
   1410c:	ff d2                	call   *%rdx
   1410e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14112:	48 89 82 d0 08 00 00 	mov    %rax,0x8d0(%rdx)
        vkDestroyMicromapEXT                = PFN_vkDestroyMicromapEXT( vkGetDeviceProcAddr( device, "vkDestroyMicromapEXT" ) );
   14119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1411d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14125:	48 8d 0d 06 81 01 00 	lea    0x18106(%rip),%rcx        # 2c232 <_ZNSt8__detailL19__atomic_spin_countE+0x1a3e>
   1412c:	48 89 ce             	mov    %rcx,%rsi
   1412f:	48 89 c7             	mov    %rax,%rdi
   14132:	ff d2                	call   *%rdx
   14134:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14138:	48 89 82 d8 08 00 00 	mov    %rax,0x8d8(%rdx)
        vkCmdBuildMicromapsEXT              = PFN_vkCmdBuildMicromapsEXT( vkGetDeviceProcAddr( device, "vkCmdBuildMicromapsEXT" ) );
   1413f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14143:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14147:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1414b:	48 8d 0d f5 80 01 00 	lea    0x180f5(%rip),%rcx        # 2c247 <_ZNSt8__detailL19__atomic_spin_countE+0x1a53>
   14152:	48 89 ce             	mov    %rcx,%rsi
   14155:	48 89 c7             	mov    %rax,%rdi
   14158:	ff d2                	call   *%rdx
   1415a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1415e:	48 89 82 e0 08 00 00 	mov    %rax,0x8e0(%rdx)
        vkBuildMicromapsEXT                 = PFN_vkBuildMicromapsEXT( vkGetDeviceProcAddr( device, "vkBuildMicromapsEXT" ) );
   14165:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14169:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1416d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14171:	48 8d 0d e6 80 01 00 	lea    0x180e6(%rip),%rcx        # 2c25e <_ZNSt8__detailL19__atomic_spin_countE+0x1a6a>
   14178:	48 89 ce             	mov    %rcx,%rsi
   1417b:	48 89 c7             	mov    %rax,%rdi
   1417e:	ff d2                	call   *%rdx
   14180:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14184:	48 89 82 e8 08 00 00 	mov    %rax,0x8e8(%rdx)
        vkCopyMicromapEXT                   = PFN_vkCopyMicromapEXT( vkGetDeviceProcAddr( device, "vkCopyMicromapEXT" ) );
   1418b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1418f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14197:	48 8d 0d d4 80 01 00 	lea    0x180d4(%rip),%rcx        # 2c272 <_ZNSt8__detailL19__atomic_spin_countE+0x1a7e>
   1419e:	48 89 ce             	mov    %rcx,%rsi
   141a1:	48 89 c7             	mov    %rax,%rdi
   141a4:	ff d2                	call   *%rdx
   141a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   141aa:	48 89 82 f0 08 00 00 	mov    %rax,0x8f0(%rdx)
        vkCopyMicromapToMemoryEXT           = PFN_vkCopyMicromapToMemoryEXT( vkGetDeviceProcAddr( device, "vkCopyMicromapToMemoryEXT" ) );
   141b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141b5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   141b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   141bd:	48 8d 0d c0 80 01 00 	lea    0x180c0(%rip),%rcx        # 2c284 <_ZNSt8__detailL19__atomic_spin_countE+0x1a90>
   141c4:	48 89 ce             	mov    %rcx,%rsi
   141c7:	48 89 c7             	mov    %rax,%rdi
   141ca:	ff d2                	call   *%rdx
   141cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   141d0:	48 89 82 f8 08 00 00 	mov    %rax,0x8f8(%rdx)
        vkCopyMemoryToMicromapEXT           = PFN_vkCopyMemoryToMicromapEXT( vkGetDeviceProcAddr( device, "vkCopyMemoryToMicromapEXT" ) );
   141d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141db:	48 8b 50 10          	mov    0x10(%rax),%rdx
   141df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   141e3:	48 8d 0d b4 80 01 00 	lea    0x180b4(%rip),%rcx        # 2c29e <_ZNSt8__detailL19__atomic_spin_countE+0x1aaa>
   141ea:	48 89 ce             	mov    %rcx,%rsi
   141ed:	48 89 c7             	mov    %rax,%rdi
   141f0:	ff d2                	call   *%rdx
   141f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   141f6:	48 89 82 00 09 00 00 	mov    %rax,0x900(%rdx)
        vkWriteMicromapsPropertiesEXT       = PFN_vkWriteMicromapsPropertiesEXT( vkGetDeviceProcAddr( device, "vkWriteMicromapsPropertiesEXT" ) );
   141fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14201:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14205:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14209:	48 8d 0d a8 80 01 00 	lea    0x180a8(%rip),%rcx        # 2c2b8 <_ZNSt8__detailL19__atomic_spin_countE+0x1ac4>
   14210:	48 89 ce             	mov    %rcx,%rsi
   14213:	48 89 c7             	mov    %rax,%rdi
   14216:	ff d2                	call   *%rdx
   14218:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1421c:	48 89 82 08 09 00 00 	mov    %rax,0x908(%rdx)
        vkCmdCopyMicromapEXT                = PFN_vkCmdCopyMicromapEXT( vkGetDeviceProcAddr( device, "vkCmdCopyMicromapEXT" ) );
   14223:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14227:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1422b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1422f:	48 8d 0d a0 80 01 00 	lea    0x180a0(%rip),%rcx        # 2c2d6 <_ZNSt8__detailL19__atomic_spin_countE+0x1ae2>
   14236:	48 89 ce             	mov    %rcx,%rsi
   14239:	48 89 c7             	mov    %rax,%rdi
   1423c:	ff d2                	call   *%rdx
   1423e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14242:	48 89 82 10 09 00 00 	mov    %rax,0x910(%rdx)
        vkCmdCopyMicromapToMemoryEXT        = PFN_vkCmdCopyMicromapToMemoryEXT( vkGetDeviceProcAddr( device, "vkCmdCopyMicromapToMemoryEXT" ) );
   14249:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1424d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14251:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14255:	48 8d 0d 8f 80 01 00 	lea    0x1808f(%rip),%rcx        # 2c2eb <_ZNSt8__detailL19__atomic_spin_countE+0x1af7>
   1425c:	48 89 ce             	mov    %rcx,%rsi
   1425f:	48 89 c7             	mov    %rax,%rdi
   14262:	ff d2                	call   *%rdx
   14264:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14268:	48 89 82 18 09 00 00 	mov    %rax,0x918(%rdx)
        vkCmdCopyMemoryToMicromapEXT        = PFN_vkCmdCopyMemoryToMicromapEXT( vkGetDeviceProcAddr( device, "vkCmdCopyMemoryToMicromapEXT" ) );
   1426f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14273:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14277:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1427b:	48 8d 0d 86 80 01 00 	lea    0x18086(%rip),%rcx        # 2c308 <_ZNSt8__detailL19__atomic_spin_countE+0x1b14>
   14282:	48 89 ce             	mov    %rcx,%rsi
   14285:	48 89 c7             	mov    %rax,%rdi
   14288:	ff d2                	call   *%rdx
   1428a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1428e:	48 89 82 20 09 00 00 	mov    %rax,0x920(%rdx)
        vkCmdWriteMicromapsPropertiesEXT    = PFN_vkCmdWriteMicromapsPropertiesEXT( vkGetDeviceProcAddr( device, "vkCmdWriteMicromapsPropertiesEXT" ) );
   14295:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14299:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1429d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   142a1:	48 8d 0d 80 80 01 00 	lea    0x18080(%rip),%rcx        # 2c328 <_ZNSt8__detailL19__atomic_spin_countE+0x1b34>
   142a8:	48 89 ce             	mov    %rcx,%rsi
   142ab:	48 89 c7             	mov    %rax,%rdi
   142ae:	ff d2                	call   *%rdx
   142b0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   142b4:	48 89 82 28 09 00 00 	mov    %rax,0x928(%rdx)
        vkGetDeviceMicromapCompatibilityEXT = PFN_vkGetDeviceMicromapCompatibilityEXT( vkGetDeviceProcAddr( device, "vkGetDeviceMicromapCompatibilityEXT" ) );
   142bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142bf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   142c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   142c7:	48 8d 0d 82 80 01 00 	lea    0x18082(%rip),%rcx        # 2c350 <_ZNSt8__detailL19__atomic_spin_countE+0x1b5c>
   142ce:	48 89 ce             	mov    %rcx,%rsi
   142d1:	48 89 c7             	mov    %rax,%rdi
   142d4:	ff d2                	call   *%rdx
   142d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   142da:	48 89 82 30 09 00 00 	mov    %rax,0x930(%rdx)
        vkGetMicromapBuildSizesEXT          = PFN_vkGetMicromapBuildSizesEXT( vkGetDeviceProcAddr( device, "vkGetMicromapBuildSizesEXT" ) );
   142e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142e5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   142e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   142ed:	48 8d 0d 80 80 01 00 	lea    0x18080(%rip),%rcx        # 2c374 <_ZNSt8__detailL19__atomic_spin_countE+0x1b80>
   142f4:	48 89 ce             	mov    %rcx,%rsi
   142f7:	48 89 c7             	mov    %rax,%rdi
   142fa:	ff d2                	call   *%rdx
   142fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14300:	48 89 82 38 09 00 00 	mov    %rax,0x938(%rdx)
        vkSetDeviceMemoryPriorityEXT = PFN_vkSetDeviceMemoryPriorityEXT( vkGetDeviceProcAddr( device, "vkSetDeviceMemoryPriorityEXT" ) );
   14307:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1430b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1430f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14313:	48 8d 0d 75 80 01 00 	lea    0x18075(%rip),%rcx        # 2c38f <_ZNSt8__detailL19__atomic_spin_countE+0x1b9b>
   1431a:	48 89 ce             	mov    %rcx,%rsi
   1431d:	48 89 c7             	mov    %rax,%rdi
   14320:	ff d2                	call   *%rdx
   14322:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14326:	48 89 82 40 09 00 00 	mov    %rax,0x940(%rdx)
        vkGetPipelinePropertiesEXT = PFN_vkGetPipelinePropertiesEXT( vkGetDeviceProcAddr( device, "vkGetPipelinePropertiesEXT" ) );
   1432d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14331:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14335:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14339:	48 8d 0d 6c 80 01 00 	lea    0x1806c(%rip),%rcx        # 2c3ac <_ZNSt8__detailL19__atomic_spin_countE+0x1bb8>
   14340:	48 89 ce             	mov    %rcx,%rsi
   14343:	48 89 c7             	mov    %rax,%rdi
   14346:	ff d2                	call   *%rdx
   14348:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1434c:	48 89 82 48 09 00 00 	mov    %rax,0x948(%rdx)
        vkCreatePrivateDataSlotEXT = PFN_vkCreatePrivateDataSlotEXT( vkGetDeviceProcAddr( device, "vkCreatePrivateDataSlotEXT" ) );
   14353:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14357:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1435b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1435f:	48 8d 0d 61 80 01 00 	lea    0x18061(%rip),%rcx        # 2c3c7 <_ZNSt8__detailL19__atomic_spin_countE+0x1bd3>
   14366:	48 89 ce             	mov    %rcx,%rsi
   14369:	48 89 c7             	mov    %rax,%rdi
   1436c:	ff d2                	call   *%rdx
   1436e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14372:	48 89 82 50 09 00 00 	mov    %rax,0x950(%rdx)
        if ( !vkCreatePrivateDataSlot )
   14379:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1437d:	48 8b 80 c0 04 00 00 	mov    0x4c0(%rax),%rax
   14384:	48 85 c0             	test   %rax,%rax
   14387:	75 16                	jne    1439f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4b51>
          vkCreatePrivateDataSlot = vkCreatePrivateDataSlotEXT;
   14389:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1438d:	48 8b 90 50 09 00 00 	mov    0x950(%rax),%rdx
   14394:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14398:	48 89 90 c0 04 00 00 	mov    %rdx,0x4c0(%rax)
        vkDestroyPrivateDataSlotEXT = PFN_vkDestroyPrivateDataSlotEXT( vkGetDeviceProcAddr( device, "vkDestroyPrivateDataSlotEXT" ) );
   1439f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   143a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   143ab:	48 8d 0d 30 80 01 00 	lea    0x18030(%rip),%rcx        # 2c3e2 <_ZNSt8__detailL19__atomic_spin_countE+0x1bee>
   143b2:	48 89 ce             	mov    %rcx,%rsi
   143b5:	48 89 c7             	mov    %rax,%rdi
   143b8:	ff d2                	call   *%rdx
   143ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   143be:	48 89 82 58 09 00 00 	mov    %rax,0x958(%rdx)
        if ( !vkDestroyPrivateDataSlot )
   143c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143c9:	48 8b 80 c8 04 00 00 	mov    0x4c8(%rax),%rax
   143d0:	48 85 c0             	test   %rax,%rax
   143d3:	75 16                	jne    143eb <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4b9d>
          vkDestroyPrivateDataSlot = vkDestroyPrivateDataSlotEXT;
   143d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143d9:	48 8b 90 58 09 00 00 	mov    0x958(%rax),%rdx
   143e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143e4:	48 89 90 c8 04 00 00 	mov    %rdx,0x4c8(%rax)
        vkSetPrivateDataEXT = PFN_vkSetPrivateDataEXT( vkGetDeviceProcAddr( device, "vkSetPrivateDataEXT" ) );
   143eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143ef:	48 8b 50 10          	mov    0x10(%rax),%rdx
   143f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   143f7:	48 8d 0d 00 80 01 00 	lea    0x18000(%rip),%rcx        # 2c3fe <_ZNSt8__detailL19__atomic_spin_countE+0x1c0a>
   143fe:	48 89 ce             	mov    %rcx,%rsi
   14401:	48 89 c7             	mov    %rax,%rdi
   14404:	ff d2                	call   *%rdx
   14406:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1440a:	48 89 82 60 09 00 00 	mov    %rax,0x960(%rdx)
        if ( !vkSetPrivateData )
   14411:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14415:	48 8b 80 d0 04 00 00 	mov    0x4d0(%rax),%rax
   1441c:	48 85 c0             	test   %rax,%rax
   1441f:	75 16                	jne    14437 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4be9>
          vkSetPrivateData = vkSetPrivateDataEXT;
   14421:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14425:	48 8b 90 60 09 00 00 	mov    0x960(%rax),%rdx
   1442c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14430:	48 89 90 d0 04 00 00 	mov    %rdx,0x4d0(%rax)
        vkGetPrivateDataEXT = PFN_vkGetPrivateDataEXT( vkGetDeviceProcAddr( device, "vkGetPrivateDataEXT" ) );
   14437:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1443b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1443f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14443:	48 8d 0d c8 7f 01 00 	lea    0x17fc8(%rip),%rcx        # 2c412 <_ZNSt8__detailL19__atomic_spin_countE+0x1c1e>
   1444a:	48 89 ce             	mov    %rcx,%rsi
   1444d:	48 89 c7             	mov    %rax,%rdi
   14450:	ff d2                	call   *%rdx
   14452:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14456:	48 89 82 68 09 00 00 	mov    %rax,0x968(%rdx)
        if ( !vkGetPrivateData )
   1445d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14461:	48 8b 80 d8 04 00 00 	mov    0x4d8(%rax),%rax
   14468:	48 85 c0             	test   %rax,%rax
   1446b:	75 16                	jne    14483 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4c35>
          vkGetPrivateData = vkGetPrivateDataEXT;
   1446d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14471:	48 8b 90 68 09 00 00 	mov    0x968(%rax),%rdx
   14478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1447c:	48 89 90 d8 04 00 00 	mov    %rdx,0x4d8(%rax)
        vkCmdSetSampleLocationsEXT = PFN_vkCmdSetSampleLocationsEXT( vkGetDeviceProcAddr( device, "vkCmdSetSampleLocationsEXT" ) );
   14483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14487:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1448b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1448f:	48 8d 0d 90 7f 01 00 	lea    0x17f90(%rip),%rcx        # 2c426 <_ZNSt8__detailL19__atomic_spin_countE+0x1c32>
   14496:	48 89 ce             	mov    %rcx,%rsi
   14499:	48 89 c7             	mov    %rax,%rdi
   1449c:	ff d2                	call   *%rdx
   1449e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   144a2:	48 89 82 70 09 00 00 	mov    %rax,0x970(%rdx)
        vkGetShaderModuleIdentifierEXT = PFN_vkGetShaderModuleIdentifierEXT( vkGetDeviceProcAddr( device, "vkGetShaderModuleIdentifierEXT" ) );
   144a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144ad:	48 8b 50 10          	mov    0x10(%rax),%rdx
   144b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   144b5:	48 8d 0d 8c 7f 01 00 	lea    0x17f8c(%rip),%rcx        # 2c448 <_ZNSt8__detailL19__atomic_spin_countE+0x1c54>
   144bc:	48 89 ce             	mov    %rcx,%rsi
   144bf:	48 89 c7             	mov    %rax,%rdi
   144c2:	ff d2                	call   *%rdx
   144c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   144c8:	48 89 82 78 09 00 00 	mov    %rax,0x978(%rdx)
          PFN_vkGetShaderModuleCreateInfoIdentifierEXT( vkGetDeviceProcAddr( device, "vkGetShaderModuleCreateInfoIdentifierEXT" ) );
   144cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144d3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   144d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   144db:	48 8d 0d 86 7f 01 00 	lea    0x17f86(%rip),%rcx        # 2c468 <_ZNSt8__detailL19__atomic_spin_countE+0x1c74>
   144e2:	48 89 ce             	mov    %rcx,%rsi
   144e5:	48 89 c7             	mov    %rax,%rdi
   144e8:	ff d2                	call   *%rdx
        vkGetShaderModuleCreateInfoIdentifierEXT =
   144ea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   144ee:	48 89 82 80 09 00 00 	mov    %rax,0x980(%rdx)
          PFN_vkCmdBindTransformFeedbackBuffersEXT( vkGetDeviceProcAddr( device, "vkCmdBindTransformFeedbackBuffersEXT" ) );
   144f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144f9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   144fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14501:	48 8d 0d 90 7f 01 00 	lea    0x17f90(%rip),%rcx        # 2c498 <_ZNSt8__detailL19__atomic_spin_countE+0x1ca4>
   14508:	48 89 ce             	mov    %rcx,%rsi
   1450b:	48 89 c7             	mov    %rax,%rdi
   1450e:	ff d2                	call   *%rdx
        vkCmdBindTransformFeedbackBuffersEXT =
   14510:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14514:	48 89 82 88 09 00 00 	mov    %rax,0x988(%rdx)
        vkCmdBeginTransformFeedbackEXT = PFN_vkCmdBeginTransformFeedbackEXT( vkGetDeviceProcAddr( device, "vkCmdBeginTransformFeedbackEXT" ) );
   1451b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1451f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14523:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14527:	48 8d 0d 92 7f 01 00 	lea    0x17f92(%rip),%rcx        # 2c4c0 <_ZNSt8__detailL19__atomic_spin_countE+0x1ccc>
   1452e:	48 89 ce             	mov    %rcx,%rsi
   14531:	48 89 c7             	mov    %rax,%rdi
   14534:	ff d2                	call   *%rdx
   14536:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1453a:	48 89 82 90 09 00 00 	mov    %rax,0x990(%rdx)
        vkCmdEndTransformFeedbackEXT   = PFN_vkCmdEndTransformFeedbackEXT( vkGetDeviceProcAddr( device, "vkCmdEndTransformFeedbackEXT" ) );
   14541:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14545:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14549:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1454d:	48 8d 0d 8b 7f 01 00 	lea    0x17f8b(%rip),%rcx        # 2c4df <_ZNSt8__detailL19__atomic_spin_countE+0x1ceb>
   14554:	48 89 ce             	mov    %rcx,%rsi
   14557:	48 89 c7             	mov    %rax,%rdi
   1455a:	ff d2                	call   *%rdx
   1455c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14560:	48 89 82 98 09 00 00 	mov    %rax,0x998(%rdx)
        vkCmdBeginQueryIndexedEXT      = PFN_vkCmdBeginQueryIndexedEXT( vkGetDeviceProcAddr( device, "vkCmdBeginQueryIndexedEXT" ) );
   14567:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1456b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1456f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14573:	48 8d 0d 82 7f 01 00 	lea    0x17f82(%rip),%rcx        # 2c4fc <_ZNSt8__detailL19__atomic_spin_countE+0x1d08>
   1457a:	48 89 ce             	mov    %rcx,%rsi
   1457d:	48 89 c7             	mov    %rax,%rdi
   14580:	ff d2                	call   *%rdx
   14582:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14586:	48 89 82 a0 09 00 00 	mov    %rax,0x9a0(%rdx)
        vkCmdEndQueryIndexedEXT        = PFN_vkCmdEndQueryIndexedEXT( vkGetDeviceProcAddr( device, "vkCmdEndQueryIndexedEXT" ) );
   1458d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14591:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14595:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14599:	48 8d 0d 76 7f 01 00 	lea    0x17f76(%rip),%rcx        # 2c516 <_ZNSt8__detailL19__atomic_spin_countE+0x1d22>
   145a0:	48 89 ce             	mov    %rcx,%rsi
   145a3:	48 89 c7             	mov    %rax,%rdi
   145a6:	ff d2                	call   *%rdx
   145a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   145ac:	48 89 82 a8 09 00 00 	mov    %rax,0x9a8(%rdx)
        vkCmdDrawIndirectByteCountEXT  = PFN_vkCmdDrawIndirectByteCountEXT( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectByteCountEXT" ) );
   145b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145b7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   145bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   145bf:	48 8d 0d 68 7f 01 00 	lea    0x17f68(%rip),%rcx        # 2c52e <_ZNSt8__detailL19__atomic_spin_countE+0x1d3a>
   145c6:	48 89 ce             	mov    %rcx,%rsi
   145c9:	48 89 c7             	mov    %rax,%rdi
   145cc:	ff d2                	call   *%rdx
   145ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   145d2:	48 89 82 b0 09 00 00 	mov    %rax,0x9b0(%rdx)
        vkCreateValidationCacheEXT  = PFN_vkCreateValidationCacheEXT( vkGetDeviceProcAddr( device, "vkCreateValidationCacheEXT" ) );
   145d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145dd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   145e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   145e5:	48 8d 0d 60 7f 01 00 	lea    0x17f60(%rip),%rcx        # 2c54c <_ZNSt8__detailL19__atomic_spin_countE+0x1d58>
   145ec:	48 89 ce             	mov    %rcx,%rsi
   145ef:	48 89 c7             	mov    %rax,%rdi
   145f2:	ff d2                	call   *%rdx
   145f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   145f8:	48 89 82 b8 09 00 00 	mov    %rax,0x9b8(%rdx)
        vkDestroyValidationCacheEXT = PFN_vkDestroyValidationCacheEXT( vkGetDeviceProcAddr( device, "vkDestroyValidationCacheEXT" ) );
   145ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14603:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14607:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1460b:	48 8d 0d 55 7f 01 00 	lea    0x17f55(%rip),%rcx        # 2c567 <_ZNSt8__detailL19__atomic_spin_countE+0x1d73>
   14612:	48 89 ce             	mov    %rcx,%rsi
   14615:	48 89 c7             	mov    %rax,%rdi
   14618:	ff d2                	call   *%rdx
   1461a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1461e:	48 89 82 c0 09 00 00 	mov    %rax,0x9c0(%rdx)
        vkMergeValidationCachesEXT  = PFN_vkMergeValidationCachesEXT( vkGetDeviceProcAddr( device, "vkMergeValidationCachesEXT" ) );
   14625:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14629:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1462d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14631:	48 8d 0d 4b 7f 01 00 	lea    0x17f4b(%rip),%rcx        # 2c583 <_ZNSt8__detailL19__atomic_spin_countE+0x1d8f>
   14638:	48 89 ce             	mov    %rcx,%rsi
   1463b:	48 89 c7             	mov    %rax,%rdi
   1463e:	ff d2                	call   *%rdx
   14640:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14644:	48 89 82 c8 09 00 00 	mov    %rax,0x9c8(%rdx)
        vkGetValidationCacheDataEXT = PFN_vkGetValidationCacheDataEXT( vkGetDeviceProcAddr( device, "vkGetValidationCacheDataEXT" ) );
   1464b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1464f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14653:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14657:	48 8d 0d 40 7f 01 00 	lea    0x17f40(%rip),%rcx        # 2c59e <_ZNSt8__detailL19__atomic_spin_countE+0x1daa>
   1465e:	48 89 ce             	mov    %rcx,%rsi
   14661:	48 89 c7             	mov    %rax,%rdi
   14664:	ff d2                	call   *%rdx
   14666:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1466a:	48 89 82 d0 09 00 00 	mov    %rax,0x9d0(%rdx)
        vkCmdSetVertexInputEXT = PFN_vkCmdSetVertexInputEXT( vkGetDeviceProcAddr( device, "vkCmdSetVertexInputEXT" ) );
   14671:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14675:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14679:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1467d:	48 8d 0d 36 7f 01 00 	lea    0x17f36(%rip),%rcx        # 2c5ba <_ZNSt8__detailL19__atomic_spin_countE+0x1dc6>
   14684:	48 89 ce             	mov    %rcx,%rsi
   14687:	48 89 c7             	mov    %rax,%rdi
   1468a:	ff d2                	call   *%rdx
   1468c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14690:	48 89 82 d8 09 00 00 	mov    %rax,0x9d8(%rdx)
        vkGetRefreshCycleDurationGOOGLE   = PFN_vkGetRefreshCycleDurationGOOGLE( vkGetDeviceProcAddr( device, "vkGetRefreshCycleDurationGOOGLE" ) );
   14697:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1469b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1469f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   146a3:	48 8d 0d 2e 7f 01 00 	lea    0x17f2e(%rip),%rcx        # 2c5d8 <_ZNSt8__detailL19__atomic_spin_countE+0x1de4>
   146aa:	48 89 ce             	mov    %rcx,%rsi
   146ad:	48 89 c7             	mov    %rax,%rdi
   146b0:	ff d2                	call   *%rdx
   146b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   146b6:	48 89 82 28 0a 00 00 	mov    %rax,0xa28(%rdx)
        vkGetPastPresentationTimingGOOGLE = PFN_vkGetPastPresentationTimingGOOGLE( vkGetDeviceProcAddr( device, "vkGetPastPresentationTimingGOOGLE" ) );
   146bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   146c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   146c9:	48 8d 0d 28 7f 01 00 	lea    0x17f28(%rip),%rcx        # 2c5f8 <_ZNSt8__detailL19__atomic_spin_countE+0x1e04>
   146d0:	48 89 ce             	mov    %rcx,%rsi
   146d3:	48 89 c7             	mov    %rax,%rdi
   146d6:	ff d2                	call   *%rdx
   146d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   146dc:	48 89 82 30 0a 00 00 	mov    %rax,0xa30(%rdx)
        vkCmdBindInvocationMaskHUAWEI = PFN_vkCmdBindInvocationMaskHUAWEI( vkGetDeviceProcAddr( device, "vkCmdBindInvocationMaskHUAWEI" ) );
   146e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   146eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   146ef:	48 8d 0d 24 7f 01 00 	lea    0x17f24(%rip),%rcx        # 2c61a <_ZNSt8__detailL19__atomic_spin_countE+0x1e26>
   146f6:	48 89 ce             	mov    %rcx,%rsi
   146f9:	48 89 c7             	mov    %rax,%rdi
   146fc:	ff d2                	call   *%rdx
   146fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14702:	48 89 82 38 0a 00 00 	mov    %rax,0xa38(%rdx)
          PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI( vkGetDeviceProcAddr( device, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI" ) );
   14709:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1470d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14711:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14715:	48 8d 0d 1c 7f 01 00 	lea    0x17f1c(%rip),%rcx        # 2c638 <_ZNSt8__detailL19__atomic_spin_countE+0x1e44>
   1471c:	48 89 ce             	mov    %rcx,%rsi
   1471f:	48 89 c7             	mov    %rax,%rdi
   14722:	ff d2                	call   *%rdx
        vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI =
   14724:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14728:	48 89 82 40 0a 00 00 	mov    %rax,0xa40(%rdx)
        vkCmdSubpassShadingHUAWEI = PFN_vkCmdSubpassShadingHUAWEI( vkGetDeviceProcAddr( device, "vkCmdSubpassShadingHUAWEI" ) );
   1472f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14733:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1473b:	48 8d 0d 26 7f 01 00 	lea    0x17f26(%rip),%rcx        # 2c668 <_ZNSt8__detailL19__atomic_spin_countE+0x1e74>
   14742:	48 89 ce             	mov    %rcx,%rsi
   14745:	48 89 c7             	mov    %rax,%rdi
   14748:	ff d2                	call   *%rdx
   1474a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1474e:	48 89 82 48 0a 00 00 	mov    %rax,0xa48(%rdx)
        vkInitializePerformanceApiINTEL   = PFN_vkInitializePerformanceApiINTEL( vkGetDeviceProcAddr( device, "vkInitializePerformanceApiINTEL" ) );
   14755:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14759:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1475d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14761:	48 8d 0d 20 7f 01 00 	lea    0x17f20(%rip),%rcx        # 2c688 <_ZNSt8__detailL19__atomic_spin_countE+0x1e94>
   14768:	48 89 ce             	mov    %rcx,%rsi
   1476b:	48 89 c7             	mov    %rax,%rdi
   1476e:	ff d2                	call   *%rdx
   14770:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14774:	48 89 82 50 0a 00 00 	mov    %rax,0xa50(%rdx)
        vkUninitializePerformanceApiINTEL = PFN_vkUninitializePerformanceApiINTEL( vkGetDeviceProcAddr( device, "vkUninitializePerformanceApiINTEL" ) );
   1477b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1477f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14783:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14787:	48 8d 0d 1a 7f 01 00 	lea    0x17f1a(%rip),%rcx        # 2c6a8 <_ZNSt8__detailL19__atomic_spin_countE+0x1eb4>
   1478e:	48 89 ce             	mov    %rcx,%rsi
   14791:	48 89 c7             	mov    %rax,%rdi
   14794:	ff d2                	call   *%rdx
   14796:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1479a:	48 89 82 58 0a 00 00 	mov    %rax,0xa58(%rdx)
        vkCmdSetPerformanceMarkerINTEL    = PFN_vkCmdSetPerformanceMarkerINTEL( vkGetDeviceProcAddr( device, "vkCmdSetPerformanceMarkerINTEL" ) );
   147a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147a5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   147a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   147ad:	48 8d 0d 1c 7f 01 00 	lea    0x17f1c(%rip),%rcx        # 2c6d0 <_ZNSt8__detailL19__atomic_spin_countE+0x1edc>
   147b4:	48 89 ce             	mov    %rcx,%rsi
   147b7:	48 89 c7             	mov    %rax,%rdi
   147ba:	ff d2                	call   *%rdx
   147bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   147c0:	48 89 82 60 0a 00 00 	mov    %rax,0xa60(%rdx)
          PFN_vkCmdSetPerformanceStreamMarkerINTEL( vkGetDeviceProcAddr( device, "vkCmdSetPerformanceStreamMarkerINTEL" ) );
   147c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147cb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   147cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   147d3:	48 8d 0d 16 7f 01 00 	lea    0x17f16(%rip),%rcx        # 2c6f0 <_ZNSt8__detailL19__atomic_spin_countE+0x1efc>
   147da:	48 89 ce             	mov    %rcx,%rsi
   147dd:	48 89 c7             	mov    %rax,%rdi
   147e0:	ff d2                	call   *%rdx
        vkCmdSetPerformanceStreamMarkerINTEL =
   147e2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   147e6:	48 89 82 68 0a 00 00 	mov    %rax,0xa68(%rdx)
        vkCmdSetPerformanceOverrideINTEL = PFN_vkCmdSetPerformanceOverrideINTEL( vkGetDeviceProcAddr( device, "vkCmdSetPerformanceOverrideINTEL" ) );
   147ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147f1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   147f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   147f9:	48 8d 0d 18 7f 01 00 	lea    0x17f18(%rip),%rcx        # 2c718 <_ZNSt8__detailL19__atomic_spin_countE+0x1f24>
   14800:	48 89 ce             	mov    %rcx,%rsi
   14803:	48 89 c7             	mov    %rax,%rdi
   14806:	ff d2                	call   *%rdx
   14808:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1480c:	48 89 82 70 0a 00 00 	mov    %rax,0xa70(%rdx)
          PFN_vkAcquirePerformanceConfigurationINTEL( vkGetDeviceProcAddr( device, "vkAcquirePerformanceConfigurationINTEL" ) );
   14813:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14817:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1481b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1481f:	48 8d 0d 1a 7f 01 00 	lea    0x17f1a(%rip),%rcx        # 2c740 <_ZNSt8__detailL19__atomic_spin_countE+0x1f4c>
   14826:	48 89 ce             	mov    %rcx,%rsi
   14829:	48 89 c7             	mov    %rax,%rdi
   1482c:	ff d2                	call   *%rdx
        vkAcquirePerformanceConfigurationINTEL =
   1482e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14832:	48 89 82 78 0a 00 00 	mov    %rax,0xa78(%rdx)
          PFN_vkReleasePerformanceConfigurationINTEL( vkGetDeviceProcAddr( device, "vkReleasePerformanceConfigurationINTEL" ) );
   14839:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1483d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14841:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14845:	48 8d 0d 1c 7f 01 00 	lea    0x17f1c(%rip),%rcx        # 2c768 <_ZNSt8__detailL19__atomic_spin_countE+0x1f74>
   1484c:	48 89 ce             	mov    %rcx,%rsi
   1484f:	48 89 c7             	mov    %rax,%rdi
   14852:	ff d2                	call   *%rdx
        vkReleasePerformanceConfigurationINTEL =
   14854:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14858:	48 89 82 80 0a 00 00 	mov    %rax,0xa80(%rdx)
          PFN_vkQueueSetPerformanceConfigurationINTEL( vkGetDeviceProcAddr( device, "vkQueueSetPerformanceConfigurationINTEL" ) );
   1485f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14863:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14867:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1486b:	48 8d 0d 1e 7f 01 00 	lea    0x17f1e(%rip),%rcx        # 2c790 <_ZNSt8__detailL19__atomic_spin_countE+0x1f9c>
   14872:	48 89 ce             	mov    %rcx,%rsi
   14875:	48 89 c7             	mov    %rax,%rdi
   14878:	ff d2                	call   *%rdx
        vkQueueSetPerformanceConfigurationINTEL =
   1487a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1487e:	48 89 82 88 0a 00 00 	mov    %rax,0xa88(%rdx)
        vkGetPerformanceParameterINTEL = PFN_vkGetPerformanceParameterINTEL( vkGetDeviceProcAddr( device, "vkGetPerformanceParameterINTEL" ) );
   14885:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14889:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1488d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14891:	48 8d 0d 20 7f 01 00 	lea    0x17f20(%rip),%rcx        # 2c7b8 <_ZNSt8__detailL19__atomic_spin_countE+0x1fc4>
   14898:	48 89 ce             	mov    %rcx,%rsi
   1489b:	48 89 c7             	mov    %rax,%rdi
   1489e:	ff d2                	call   *%rdx
   148a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   148a4:	48 89 82 90 0a 00 00 	mov    %rax,0xa90(%rdx)
        vkCreateAccelerationStructureKHR    = PFN_vkCreateAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCreateAccelerationStructureKHR" ) );
   148ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148af:	48 8b 50 10          	mov    0x10(%rax),%rdx
   148b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   148b7:	48 8d 0d 1a 7f 01 00 	lea    0x17f1a(%rip),%rcx        # 2c7d8 <_ZNSt8__detailL19__atomic_spin_countE+0x1fe4>
   148be:	48 89 ce             	mov    %rcx,%rsi
   148c1:	48 89 c7             	mov    %rax,%rdi
   148c4:	ff d2                	call   *%rdx
   148c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   148ca:	48 89 82 98 0a 00 00 	mov    %rax,0xa98(%rdx)
        vkDestroyAccelerationStructureKHR   = PFN_vkDestroyAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkDestroyAccelerationStructureKHR" ) );
   148d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   148d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   148dd:	48 8d 0d 1c 7f 01 00 	lea    0x17f1c(%rip),%rcx        # 2c800 <_ZNSt8__detailL19__atomic_spin_countE+0x200c>
   148e4:	48 89 ce             	mov    %rcx,%rsi
   148e7:	48 89 c7             	mov    %rax,%rdi
   148ea:	ff d2                	call   *%rdx
   148ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   148f0:	48 89 82 a0 0a 00 00 	mov    %rax,0xaa0(%rdx)
        vkCmdBuildAccelerationStructuresKHR = PFN_vkCmdBuildAccelerationStructuresKHR( vkGetDeviceProcAddr( device, "vkCmdBuildAccelerationStructuresKHR" ) );
   148f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148fb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   148ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14903:	48 8d 0d 1e 7f 01 00 	lea    0x17f1e(%rip),%rcx        # 2c828 <_ZNSt8__detailL19__atomic_spin_countE+0x2034>
   1490a:	48 89 ce             	mov    %rcx,%rsi
   1490d:	48 89 c7             	mov    %rax,%rdi
   14910:	ff d2                	call   *%rdx
   14912:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14916:	48 89 82 a8 0a 00 00 	mov    %rax,0xaa8(%rdx)
          PFN_vkCmdBuildAccelerationStructuresIndirectKHR( vkGetDeviceProcAddr( device, "vkCmdBuildAccelerationStructuresIndirectKHR" ) );
   1491d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14921:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14925:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14929:	48 8d 0d 20 7f 01 00 	lea    0x17f20(%rip),%rcx        # 2c850 <_ZNSt8__detailL19__atomic_spin_countE+0x205c>
   14930:	48 89 ce             	mov    %rcx,%rsi
   14933:	48 89 c7             	mov    %rax,%rdi
   14936:	ff d2                	call   *%rdx
        vkCmdBuildAccelerationStructuresIndirectKHR =
   14938:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1493c:	48 89 82 b0 0a 00 00 	mov    %rax,0xab0(%rdx)
        vkBuildAccelerationStructuresKHR = PFN_vkBuildAccelerationStructuresKHR( vkGetDeviceProcAddr( device, "vkBuildAccelerationStructuresKHR" ) );
   14943:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14947:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1494b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1494f:	48 8d 0d 2a 7f 01 00 	lea    0x17f2a(%rip),%rcx        # 2c880 <_ZNSt8__detailL19__atomic_spin_countE+0x208c>
   14956:	48 89 ce             	mov    %rcx,%rsi
   14959:	48 89 c7             	mov    %rax,%rdi
   1495c:	ff d2                	call   *%rdx
   1495e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14962:	48 89 82 b8 0a 00 00 	mov    %rax,0xab8(%rdx)
        vkCopyAccelerationStructureKHR   = PFN_vkCopyAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCopyAccelerationStructureKHR" ) );
   14969:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1496d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14971:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14975:	48 8d 0d 2c 7f 01 00 	lea    0x17f2c(%rip),%rcx        # 2c8a8 <_ZNSt8__detailL19__atomic_spin_countE+0x20b4>
   1497c:	48 89 ce             	mov    %rcx,%rsi
   1497f:	48 89 c7             	mov    %rax,%rdi
   14982:	ff d2                	call   *%rdx
   14984:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14988:	48 89 82 c0 0a 00 00 	mov    %rax,0xac0(%rdx)
          PFN_vkCopyAccelerationStructureToMemoryKHR( vkGetDeviceProcAddr( device, "vkCopyAccelerationStructureToMemoryKHR" ) );
   1498f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14993:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14997:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1499b:	48 8d 0d 26 7f 01 00 	lea    0x17f26(%rip),%rcx        # 2c8c8 <_ZNSt8__detailL19__atomic_spin_countE+0x20d4>
   149a2:	48 89 ce             	mov    %rcx,%rsi
   149a5:	48 89 c7             	mov    %rax,%rdi
   149a8:	ff d2                	call   *%rdx
        vkCopyAccelerationStructureToMemoryKHR =
   149aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   149ae:	48 89 82 c8 0a 00 00 	mov    %rax,0xac8(%rdx)
          PFN_vkCopyMemoryToAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCopyMemoryToAccelerationStructureKHR" ) );
   149b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149b9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   149bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   149c1:	48 8d 0d 28 7f 01 00 	lea    0x17f28(%rip),%rcx        # 2c8f0 <_ZNSt8__detailL19__atomic_spin_countE+0x20fc>
   149c8:	48 89 ce             	mov    %rcx,%rsi
   149cb:	48 89 c7             	mov    %rax,%rdi
   149ce:	ff d2                	call   *%rdx
        vkCopyMemoryToAccelerationStructureKHR =
   149d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   149d4:	48 89 82 d0 0a 00 00 	mov    %rax,0xad0(%rdx)
          PFN_vkWriteAccelerationStructuresPropertiesKHR( vkGetDeviceProcAddr( device, "vkWriteAccelerationStructuresPropertiesKHR" ) );
   149db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149df:	48 8b 50 10          	mov    0x10(%rax),%rdx
   149e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   149e7:	48 8d 0d 2a 7f 01 00 	lea    0x17f2a(%rip),%rcx        # 2c918 <_ZNSt8__detailL19__atomic_spin_countE+0x2124>
   149ee:	48 89 ce             	mov    %rcx,%rsi
   149f1:	48 89 c7             	mov    %rax,%rdi
   149f4:	ff d2                	call   *%rdx
        vkWriteAccelerationStructuresPropertiesKHR =
   149f6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   149fa:	48 89 82 d8 0a 00 00 	mov    %rax,0xad8(%rdx)
        vkCmdCopyAccelerationStructureKHR = PFN_vkCmdCopyAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCmdCopyAccelerationStructureKHR" ) );
   14a01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a05:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a0d:	48 8d 0d 34 7f 01 00 	lea    0x17f34(%rip),%rcx        # 2c948 <_ZNSt8__detailL19__atomic_spin_countE+0x2154>
   14a14:	48 89 ce             	mov    %rcx,%rsi
   14a17:	48 89 c7             	mov    %rax,%rdi
   14a1a:	ff d2                	call   *%rdx
   14a1c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a20:	48 89 82 e0 0a 00 00 	mov    %rax,0xae0(%rdx)
          PFN_vkCmdCopyAccelerationStructureToMemoryKHR( vkGetDeviceProcAddr( device, "vkCmdCopyAccelerationStructureToMemoryKHR" ) );
   14a27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a2b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a33:	48 8d 0d 36 7f 01 00 	lea    0x17f36(%rip),%rcx        # 2c970 <_ZNSt8__detailL19__atomic_spin_countE+0x217c>
   14a3a:	48 89 ce             	mov    %rcx,%rsi
   14a3d:	48 89 c7             	mov    %rax,%rdi
   14a40:	ff d2                	call   *%rdx
        vkCmdCopyAccelerationStructureToMemoryKHR =
   14a42:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a46:	48 89 82 e8 0a 00 00 	mov    %rax,0xae8(%rdx)
          PFN_vkCmdCopyMemoryToAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCmdCopyMemoryToAccelerationStructureKHR" ) );
   14a4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a51:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a59:	48 8d 0d 40 7f 01 00 	lea    0x17f40(%rip),%rcx        # 2c9a0 <_ZNSt8__detailL19__atomic_spin_countE+0x21ac>
   14a60:	48 89 ce             	mov    %rcx,%rsi
   14a63:	48 89 c7             	mov    %rax,%rdi
   14a66:	ff d2                	call   *%rdx
        vkCmdCopyMemoryToAccelerationStructureKHR =
   14a68:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a6c:	48 89 82 f0 0a 00 00 	mov    %rax,0xaf0(%rdx)
          PFN_vkGetAccelerationStructureDeviceAddressKHR( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureDeviceAddressKHR" ) );
   14a73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a77:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a7f:	48 8d 0d 4a 7f 01 00 	lea    0x17f4a(%rip),%rcx        # 2c9d0 <_ZNSt8__detailL19__atomic_spin_countE+0x21dc>
   14a86:	48 89 ce             	mov    %rcx,%rsi
   14a89:	48 89 c7             	mov    %rax,%rdi
   14a8c:	ff d2                	call   *%rdx
        vkGetAccelerationStructureDeviceAddressKHR =
   14a8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a92:	48 89 82 f8 0a 00 00 	mov    %rax,0xaf8(%rdx)
          PFN_vkCmdWriteAccelerationStructuresPropertiesKHR( vkGetDeviceProcAddr( device, "vkCmdWriteAccelerationStructuresPropertiesKHR" ) );
   14a99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a9d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14aa1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14aa5:	48 8d 0d 54 7f 01 00 	lea    0x17f54(%rip),%rcx        # 2ca00 <_ZNSt8__detailL19__atomic_spin_countE+0x220c>
   14aac:	48 89 ce             	mov    %rcx,%rsi
   14aaf:	48 89 c7             	mov    %rax,%rdi
   14ab2:	ff d2                	call   *%rdx
        vkCmdWriteAccelerationStructuresPropertiesKHR =
   14ab4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14ab8:	48 89 82 00 0b 00 00 	mov    %rax,0xb00(%rdx)
          PFN_vkGetDeviceAccelerationStructureCompatibilityKHR( vkGetDeviceProcAddr( device, "vkGetDeviceAccelerationStructureCompatibilityKHR" ) );
   14abf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ac3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ac7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14acb:	48 8d 0d 5e 7f 01 00 	lea    0x17f5e(%rip),%rcx        # 2ca30 <_ZNSt8__detailL19__atomic_spin_countE+0x223c>
   14ad2:	48 89 ce             	mov    %rcx,%rsi
   14ad5:	48 89 c7             	mov    %rax,%rdi
   14ad8:	ff d2                	call   *%rdx
        vkGetDeviceAccelerationStructureCompatibilityKHR =
   14ada:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14ade:	48 89 82 08 0b 00 00 	mov    %rax,0xb08(%rdx)
          PFN_vkGetAccelerationStructureBuildSizesKHR( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureBuildSizesKHR" ) );
   14ae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ae9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14aed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14af1:	48 8d 0d 70 7f 01 00 	lea    0x17f70(%rip),%rcx        # 2ca68 <_ZNSt8__detailL19__atomic_spin_countE+0x2274>
   14af8:	48 89 ce             	mov    %rcx,%rsi
   14afb:	48 89 c7             	mov    %rax,%rdi
   14afe:	ff d2                	call   *%rdx
        vkGetAccelerationStructureBuildSizesKHR =
   14b00:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14b04:	48 89 82 10 0b 00 00 	mov    %rax,0xb10(%rdx)
        vkBindBufferMemory2KHR = PFN_vkBindBufferMemory2KHR( vkGetDeviceProcAddr( device, "vkBindBufferMemory2KHR" ) );
   14b0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b0f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14b13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14b17:	48 8d 0d 72 7f 01 00 	lea    0x17f72(%rip),%rcx        # 2ca90 <_ZNSt8__detailL19__atomic_spin_countE+0x229c>
   14b1e:	48 89 ce             	mov    %rcx,%rsi
   14b21:	48 89 c7             	mov    %rax,%rdi
   14b24:	ff d2                	call   *%rdx
   14b26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14b2a:	48 89 82 18 0b 00 00 	mov    %rax,0xb18(%rdx)
        if ( !vkBindBufferMemory2 )
   14b31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b35:	48 8b 80 d8 03 00 00 	mov    0x3d8(%rax),%rax
   14b3c:	48 85 c0             	test   %rax,%rax
   14b3f:	75 16                	jne    14b57 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5309>
          vkBindBufferMemory2 = vkBindBufferMemory2KHR;
   14b41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b45:	48 8b 90 18 0b 00 00 	mov    0xb18(%rax),%rdx
   14b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b50:	48 89 90 d8 03 00 00 	mov    %rdx,0x3d8(%rax)
        vkBindImageMemory2KHR = PFN_vkBindImageMemory2KHR( vkGetDeviceProcAddr( device, "vkBindImageMemory2KHR" ) );
   14b57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b5b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14b5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14b63:	48 8d 0d 3d 7f 01 00 	lea    0x17f3d(%rip),%rcx        # 2caa7 <_ZNSt8__detailL19__atomic_spin_countE+0x22b3>
   14b6a:	48 89 ce             	mov    %rcx,%rsi
   14b6d:	48 89 c7             	mov    %rax,%rdi
   14b70:	ff d2                	call   *%rdx
   14b72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14b76:	48 89 82 20 0b 00 00 	mov    %rax,0xb20(%rdx)
        if ( !vkBindImageMemory2 )
   14b7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b81:	48 8b 80 e0 03 00 00 	mov    0x3e0(%rax),%rax
   14b88:	48 85 c0             	test   %rax,%rax
   14b8b:	75 16                	jne    14ba3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5355>
          vkBindImageMemory2 = vkBindImageMemory2KHR;
   14b8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b91:	48 8b 90 20 0b 00 00 	mov    0xb20(%rax),%rdx
   14b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b9c:	48 89 90 e0 03 00 00 	mov    %rdx,0x3e0(%rax)
        vkGetBufferDeviceAddressKHR = PFN_vkGetBufferDeviceAddressKHR( vkGetDeviceProcAddr( device, "vkGetBufferDeviceAddressKHR" ) );
   14ba3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ba7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14baf:	48 8d 0d 07 7f 01 00 	lea    0x17f07(%rip),%rcx        # 2cabd <_ZNSt8__detailL19__atomic_spin_countE+0x22c9>
   14bb6:	48 89 ce             	mov    %rcx,%rsi
   14bb9:	48 89 c7             	mov    %rax,%rdi
   14bbc:	ff d2                	call   *%rdx
   14bbe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14bc2:	48 89 82 28 0b 00 00 	mov    %rax,0xb28(%rdx)
        if ( !vkGetBufferDeviceAddress )
   14bc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14bcd:	48 8b 80 a8 04 00 00 	mov    0x4a8(%rax),%rax
   14bd4:	48 85 c0             	test   %rax,%rax
   14bd7:	75 16                	jne    14bef <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x53a1>
          vkGetBufferDeviceAddress = vkGetBufferDeviceAddressKHR;
   14bd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14bdd:	48 8b 90 28 0b 00 00 	mov    0xb28(%rax),%rdx
   14be4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14be8:	48 89 90 a8 04 00 00 	mov    %rdx,0x4a8(%rax)
        vkGetBufferOpaqueCaptureAddressKHR = PFN_vkGetBufferOpaqueCaptureAddressKHR( vkGetDeviceProcAddr( device, "vkGetBufferOpaqueCaptureAddressKHR" ) );
   14bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14bf3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14bf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14bfb:	48 8d 0d de 7e 01 00 	lea    0x17ede(%rip),%rcx        # 2cae0 <_ZNSt8__detailL19__atomic_spin_countE+0x22ec>
   14c02:	48 89 ce             	mov    %rcx,%rsi
   14c05:	48 89 c7             	mov    %rax,%rdi
   14c08:	ff d2                	call   *%rdx
   14c0a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c0e:	48 89 82 30 0b 00 00 	mov    %rax,0xb30(%rdx)
        if ( !vkGetBufferOpaqueCaptureAddress )
   14c15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c19:	48 8b 80 b0 04 00 00 	mov    0x4b0(%rax),%rax
   14c20:	48 85 c0             	test   %rax,%rax
   14c23:	75 16                	jne    14c3b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x53ed>
          vkGetBufferOpaqueCaptureAddress = vkGetBufferOpaqueCaptureAddressKHR;
   14c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c29:	48 8b 90 30 0b 00 00 	mov    0xb30(%rax),%rdx
   14c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c34:	48 89 90 b0 04 00 00 	mov    %rdx,0x4b0(%rax)
          PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR( vkGetDeviceProcAddr( device, "vkGetDeviceMemoryOpaqueCaptureAddressKHR" ) );
   14c3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c3f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c47:	48 8d 0d ba 7e 01 00 	lea    0x17eba(%rip),%rcx        # 2cb08 <_ZNSt8__detailL19__atomic_spin_countE+0x2314>
   14c4e:	48 89 ce             	mov    %rcx,%rsi
   14c51:	48 89 c7             	mov    %rax,%rdi
   14c54:	ff d2                	call   *%rdx
        vkGetDeviceMemoryOpaqueCaptureAddressKHR =
   14c56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c5a:	48 89 82 38 0b 00 00 	mov    %rax,0xb38(%rdx)
        if ( !vkGetDeviceMemoryOpaqueCaptureAddress )
   14c61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c65:	48 8b 80 b8 04 00 00 	mov    0x4b8(%rax),%rax
   14c6c:	48 85 c0             	test   %rax,%rax
   14c6f:	75 16                	jne    14c87 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5439>
          vkGetDeviceMemoryOpaqueCaptureAddress = vkGetDeviceMemoryOpaqueCaptureAddressKHR;
   14c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c75:	48 8b 90 38 0b 00 00 	mov    0xb38(%rax),%rdx
   14c7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c80:	48 89 90 b8 04 00 00 	mov    %rdx,0x4b8(%rax)
        vkCmdCopyBuffer2KHR = PFN_vkCmdCopyBuffer2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyBuffer2KHR" ) );
   14c87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c8b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c93:	48 8d 0d 97 7e 01 00 	lea    0x17e97(%rip),%rcx        # 2cb31 <_ZNSt8__detailL19__atomic_spin_countE+0x233d>
   14c9a:	48 89 ce             	mov    %rcx,%rsi
   14c9d:	48 89 c7             	mov    %rax,%rdi
   14ca0:	ff d2                	call   *%rdx
   14ca2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14ca6:	48 89 82 40 0b 00 00 	mov    %rax,0xb40(%rdx)
        if ( !vkCmdCopyBuffer2 )
   14cad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cb1:	48 8b 80 10 05 00 00 	mov    0x510(%rax),%rax
   14cb8:	48 85 c0             	test   %rax,%rax
   14cbb:	75 16                	jne    14cd3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5485>
          vkCmdCopyBuffer2 = vkCmdCopyBuffer2KHR;
   14cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cc1:	48 8b 90 40 0b 00 00 	mov    0xb40(%rax),%rdx
   14cc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ccc:	48 89 90 10 05 00 00 	mov    %rdx,0x510(%rax)
        vkCmdCopyImage2KHR = PFN_vkCmdCopyImage2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyImage2KHR" ) );
   14cd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cd7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14cdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14cdf:	48 8d 0d 5f 7e 01 00 	lea    0x17e5f(%rip),%rcx        # 2cb45 <_ZNSt8__detailL19__atomic_spin_countE+0x2351>
   14ce6:	48 89 ce             	mov    %rcx,%rsi
   14ce9:	48 89 c7             	mov    %rax,%rdi
   14cec:	ff d2                	call   *%rdx
   14cee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14cf2:	48 89 82 48 0b 00 00 	mov    %rax,0xb48(%rdx)
        if ( !vkCmdCopyImage2 )
   14cf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cfd:	48 8b 80 18 05 00 00 	mov    0x518(%rax),%rax
   14d04:	48 85 c0             	test   %rax,%rax
   14d07:	75 16                	jne    14d1f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x54d1>
          vkCmdCopyImage2 = vkCmdCopyImage2KHR;
   14d09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d0d:	48 8b 90 48 0b 00 00 	mov    0xb48(%rax),%rdx
   14d14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d18:	48 89 90 18 05 00 00 	mov    %rdx,0x518(%rax)
        vkCmdCopyBufferToImage2KHR = PFN_vkCmdCopyBufferToImage2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyBufferToImage2KHR" ) );
   14d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d23:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d2b:	48 8d 0d 26 7e 01 00 	lea    0x17e26(%rip),%rcx        # 2cb58 <_ZNSt8__detailL19__atomic_spin_countE+0x2364>
   14d32:	48 89 ce             	mov    %rcx,%rsi
   14d35:	48 89 c7             	mov    %rax,%rdi
   14d38:	ff d2                	call   *%rdx
   14d3a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14d3e:	48 89 82 50 0b 00 00 	mov    %rax,0xb50(%rdx)
        if ( !vkCmdCopyBufferToImage2 )
   14d45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d49:	48 8b 80 20 05 00 00 	mov    0x520(%rax),%rax
   14d50:	48 85 c0             	test   %rax,%rax
   14d53:	75 16                	jne    14d6b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x551d>
          vkCmdCopyBufferToImage2 = vkCmdCopyBufferToImage2KHR;
   14d55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d59:	48 8b 90 50 0b 00 00 	mov    0xb50(%rax),%rdx
   14d60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d64:	48 89 90 20 05 00 00 	mov    %rdx,0x520(%rax)
        vkCmdCopyImageToBuffer2KHR = PFN_vkCmdCopyImageToBuffer2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyImageToBuffer2KHR" ) );
   14d6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d6f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14d73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d77:	48 8d 0d f5 7d 01 00 	lea    0x17df5(%rip),%rcx        # 2cb73 <_ZNSt8__detailL19__atomic_spin_countE+0x237f>
   14d7e:	48 89 ce             	mov    %rcx,%rsi
   14d81:	48 89 c7             	mov    %rax,%rdi
   14d84:	ff d2                	call   *%rdx
   14d86:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14d8a:	48 89 82 58 0b 00 00 	mov    %rax,0xb58(%rdx)
        if ( !vkCmdCopyImageToBuffer2 )
   14d91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d95:	48 8b 80 28 05 00 00 	mov    0x528(%rax),%rax
   14d9c:	48 85 c0             	test   %rax,%rax
   14d9f:	75 16                	jne    14db7 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5569>
          vkCmdCopyImageToBuffer2 = vkCmdCopyImageToBuffer2KHR;
   14da1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14da5:	48 8b 90 58 0b 00 00 	mov    0xb58(%rax),%rdx
   14dac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14db0:	48 89 90 28 05 00 00 	mov    %rdx,0x528(%rax)
        vkCmdBlitImage2KHR = PFN_vkCmdBlitImage2KHR( vkGetDeviceProcAddr( device, "vkCmdBlitImage2KHR" ) );
   14db7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14dbb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14dbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14dc3:	48 8d 0d c4 7d 01 00 	lea    0x17dc4(%rip),%rcx        # 2cb8e <_ZNSt8__detailL19__atomic_spin_countE+0x239a>
   14dca:	48 89 ce             	mov    %rcx,%rsi
   14dcd:	48 89 c7             	mov    %rax,%rdi
   14dd0:	ff d2                	call   *%rdx
   14dd2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14dd6:	48 89 82 60 0b 00 00 	mov    %rax,0xb60(%rdx)
        if ( !vkCmdBlitImage2 )
   14ddd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14de1:	48 8b 80 30 05 00 00 	mov    0x530(%rax),%rax
   14de8:	48 85 c0             	test   %rax,%rax
   14deb:	75 16                	jne    14e03 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x55b5>
          vkCmdBlitImage2 = vkCmdBlitImage2KHR;
   14ded:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14df1:	48 8b 90 60 0b 00 00 	mov    0xb60(%rax),%rdx
   14df8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14dfc:	48 89 90 30 05 00 00 	mov    %rdx,0x530(%rax)
        vkCmdResolveImage2KHR = PFN_vkCmdResolveImage2KHR( vkGetDeviceProcAddr( device, "vkCmdResolveImage2KHR" ) );
   14e03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e07:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e0f:	48 8d 0d 8b 7d 01 00 	lea    0x17d8b(%rip),%rcx        # 2cba1 <_ZNSt8__detailL19__atomic_spin_countE+0x23ad>
   14e16:	48 89 ce             	mov    %rcx,%rsi
   14e19:	48 89 c7             	mov    %rax,%rdi
   14e1c:	ff d2                	call   *%rdx
   14e1e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e22:	48 89 82 68 0b 00 00 	mov    %rax,0xb68(%rdx)
        if ( !vkCmdResolveImage2 )
   14e29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e2d:	48 8b 80 38 05 00 00 	mov    0x538(%rax),%rax
   14e34:	48 85 c0             	test   %rax,%rax
   14e37:	75 16                	jne    14e4f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5601>
          vkCmdResolveImage2 = vkCmdResolveImage2KHR;
   14e39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e3d:	48 8b 90 68 0b 00 00 	mov    0xb68(%rax),%rdx
   14e44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e48:	48 89 90 38 05 00 00 	mov    %rdx,0x538(%rax)
        vkCreateRenderPass2KHR = PFN_vkCreateRenderPass2KHR( vkGetDeviceProcAddr( device, "vkCreateRenderPass2KHR" ) );
   14e4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e53:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e5b:	48 8d 0d 55 7d 01 00 	lea    0x17d55(%rip),%rcx        # 2cbb7 <_ZNSt8__detailL19__atomic_spin_countE+0x23c3>
   14e62:	48 89 ce             	mov    %rcx,%rsi
   14e65:	48 89 c7             	mov    %rax,%rdi
   14e68:	ff d2                	call   *%rdx
   14e6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e6e:	48 89 82 70 0b 00 00 	mov    %rax,0xb70(%rdx)
        if ( !vkCreateRenderPass2 )
   14e75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e79:	48 8b 80 68 04 00 00 	mov    0x468(%rax),%rax
   14e80:	48 85 c0             	test   %rax,%rax
   14e83:	75 16                	jne    14e9b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x564d>
          vkCreateRenderPass2 = vkCreateRenderPass2KHR;
   14e85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e89:	48 8b 90 70 0b 00 00 	mov    0xb70(%rax),%rdx
   14e90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e94:	48 89 90 68 04 00 00 	mov    %rdx,0x468(%rax)
        vkCmdBeginRenderPass2KHR = PFN_vkCmdBeginRenderPass2KHR( vkGetDeviceProcAddr( device, "vkCmdBeginRenderPass2KHR" ) );
   14e9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e9f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ea3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ea7:	48 8d 0d 20 7d 01 00 	lea    0x17d20(%rip),%rcx        # 2cbce <_ZNSt8__detailL19__atomic_spin_countE+0x23da>
   14eae:	48 89 ce             	mov    %rcx,%rsi
   14eb1:	48 89 c7             	mov    %rax,%rdi
   14eb4:	ff d2                	call   *%rdx
   14eb6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14eba:	48 89 82 78 0b 00 00 	mov    %rax,0xb78(%rdx)
        if ( !vkCmdBeginRenderPass2 )
   14ec1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ec5:	48 8b 80 70 04 00 00 	mov    0x470(%rax),%rax
   14ecc:	48 85 c0             	test   %rax,%rax
   14ecf:	75 16                	jne    14ee7 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5699>
          vkCmdBeginRenderPass2 = vkCmdBeginRenderPass2KHR;
   14ed1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ed5:	48 8b 90 78 0b 00 00 	mov    0xb78(%rax),%rdx
   14edc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ee0:	48 89 90 70 04 00 00 	mov    %rdx,0x470(%rax)
        vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2KHR( vkGetDeviceProcAddr( device, "vkCmdNextSubpass2KHR" ) );
   14ee7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14eeb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14eef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ef3:	48 8d 0d ed 7c 01 00 	lea    0x17ced(%rip),%rcx        # 2cbe7 <_ZNSt8__detailL19__atomic_spin_countE+0x23f3>
   14efa:	48 89 ce             	mov    %rcx,%rsi
   14efd:	48 89 c7             	mov    %rax,%rdi
   14f00:	ff d2                	call   *%rdx
   14f02:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14f06:	48 89 82 80 0b 00 00 	mov    %rax,0xb80(%rdx)
        if ( !vkCmdNextSubpass2 )
   14f0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f11:	48 8b 80 78 04 00 00 	mov    0x478(%rax),%rax
   14f18:	48 85 c0             	test   %rax,%rax
   14f1b:	75 16                	jne    14f33 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x56e5>
          vkCmdNextSubpass2 = vkCmdNextSubpass2KHR;
   14f1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f21:	48 8b 90 80 0b 00 00 	mov    0xb80(%rax),%rdx
   14f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f2c:	48 89 90 78 04 00 00 	mov    %rdx,0x478(%rax)
        vkCmdEndRenderPass2KHR = PFN_vkCmdEndRenderPass2KHR( vkGetDeviceProcAddr( device, "vkCmdEndRenderPass2KHR" ) );
   14f33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f37:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14f3f:	48 8d 0d b6 7c 01 00 	lea    0x17cb6(%rip),%rcx        # 2cbfc <_ZNSt8__detailL19__atomic_spin_countE+0x2408>
   14f46:	48 89 ce             	mov    %rcx,%rsi
   14f49:	48 89 c7             	mov    %rax,%rdi
   14f4c:	ff d2                	call   *%rdx
   14f4e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14f52:	48 89 82 88 0b 00 00 	mov    %rax,0xb88(%rdx)
        if ( !vkCmdEndRenderPass2 )
   14f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f5d:	48 8b 80 80 04 00 00 	mov    0x480(%rax),%rax
   14f64:	48 85 c0             	test   %rax,%rax
   14f67:	75 16                	jne    14f7f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5731>
          vkCmdEndRenderPass2 = vkCmdEndRenderPass2KHR;
   14f69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f6d:	48 8b 90 88 0b 00 00 	mov    0xb88(%rax),%rdx
   14f74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f78:	48 89 90 80 04 00 00 	mov    %rdx,0x480(%rax)
        vkCreateDeferredOperationKHR  = PFN_vkCreateDeferredOperationKHR( vkGetDeviceProcAddr( device, "vkCreateDeferredOperationKHR" ) );
   14f7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f83:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14f87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14f8b:	48 8d 0d 81 7c 01 00 	lea    0x17c81(%rip),%rcx        # 2cc13 <_ZNSt8__detailL19__atomic_spin_countE+0x241f>
   14f92:	48 89 ce             	mov    %rcx,%rsi
   14f95:	48 89 c7             	mov    %rax,%rdi
   14f98:	ff d2                	call   *%rdx
   14f9a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14f9e:	48 89 82 90 0b 00 00 	mov    %rax,0xb90(%rdx)
        vkDestroyDeferredOperationKHR = PFN_vkDestroyDeferredOperationKHR( vkGetDeviceProcAddr( device, "vkDestroyDeferredOperationKHR" ) );
   14fa5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fa9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14fad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14fb1:	48 8d 0d 78 7c 01 00 	lea    0x17c78(%rip),%rcx        # 2cc30 <_ZNSt8__detailL19__atomic_spin_countE+0x243c>
   14fb8:	48 89 ce             	mov    %rcx,%rsi
   14fbb:	48 89 c7             	mov    %rax,%rdi
   14fbe:	ff d2                	call   *%rdx
   14fc0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14fc4:	48 89 82 98 0b 00 00 	mov    %rax,0xb98(%rdx)
          PFN_vkGetDeferredOperationMaxConcurrencyKHR( vkGetDeviceProcAddr( device, "vkGetDeferredOperationMaxConcurrencyKHR" ) );
   14fcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fcf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14fd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14fd7:	48 8d 0d 72 7c 01 00 	lea    0x17c72(%rip),%rcx        # 2cc50 <_ZNSt8__detailL19__atomic_spin_countE+0x245c>
   14fde:	48 89 ce             	mov    %rcx,%rsi
   14fe1:	48 89 c7             	mov    %rax,%rdi
   14fe4:	ff d2                	call   *%rdx
        vkGetDeferredOperationMaxConcurrencyKHR =
   14fe6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14fea:	48 89 82 a0 0b 00 00 	mov    %rax,0xba0(%rdx)
        vkGetDeferredOperationResultKHR = PFN_vkGetDeferredOperationResultKHR( vkGetDeviceProcAddr( device, "vkGetDeferredOperationResultKHR" ) );
   14ff1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ff5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ff9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ffd:	48 8d 0d 74 7c 01 00 	lea    0x17c74(%rip),%rcx        # 2cc78 <_ZNSt8__detailL19__atomic_spin_countE+0x2484>
   15004:	48 89 ce             	mov    %rcx,%rsi
   15007:	48 89 c7             	mov    %rax,%rdi
   1500a:	ff d2                	call   *%rdx
   1500c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15010:	48 89 82 a8 0b 00 00 	mov    %rax,0xba8(%rdx)
        vkDeferredOperationJoinKHR      = PFN_vkDeferredOperationJoinKHR( vkGetDeviceProcAddr( device, "vkDeferredOperationJoinKHR" ) );
   15017:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1501b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1501f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15023:	48 8d 0d 6e 7c 01 00 	lea    0x17c6e(%rip),%rcx        # 2cc98 <_ZNSt8__detailL19__atomic_spin_countE+0x24a4>
   1502a:	48 89 ce             	mov    %rcx,%rsi
   1502d:	48 89 c7             	mov    %rax,%rdi
   15030:	ff d2                	call   *%rdx
   15032:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15036:	48 89 82 b0 0b 00 00 	mov    %rax,0xbb0(%rdx)
        vkCreateDescriptorUpdateTemplateKHR = PFN_vkCreateDescriptorUpdateTemplateKHR( vkGetDeviceProcAddr( device, "vkCreateDescriptorUpdateTemplateKHR" ) );
   1503d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15041:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15045:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15049:	48 8d 0d 68 7c 01 00 	lea    0x17c68(%rip),%rcx        # 2ccb8 <_ZNSt8__detailL19__atomic_spin_countE+0x24c4>
   15050:	48 89 ce             	mov    %rcx,%rsi
   15053:	48 89 c7             	mov    %rax,%rdi
   15056:	ff d2                	call   *%rdx
   15058:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1505c:	48 89 82 b8 0b 00 00 	mov    %rax,0xbb8(%rdx)
        if ( !vkCreateDescriptorUpdateTemplate )
   15063:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15067:	48 8b 80 38 04 00 00 	mov    0x438(%rax),%rax
   1506e:	48 85 c0             	test   %rax,%rax
   15071:	75 16                	jne    15089 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x583b>
          vkCreateDescriptorUpdateTemplate = vkCreateDescriptorUpdateTemplateKHR;
   15073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15077:	48 8b 90 b8 0b 00 00 	mov    0xbb8(%rax),%rdx
   1507e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15082:	48 89 90 38 04 00 00 	mov    %rdx,0x438(%rax)
          PFN_vkDestroyDescriptorUpdateTemplateKHR( vkGetDeviceProcAddr( device, "vkDestroyDescriptorUpdateTemplateKHR" ) );
   15089:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1508d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15091:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15095:	48 8d 0d 44 7c 01 00 	lea    0x17c44(%rip),%rcx        # 2cce0 <_ZNSt8__detailL19__atomic_spin_countE+0x24ec>
   1509c:	48 89 ce             	mov    %rcx,%rsi
   1509f:	48 89 c7             	mov    %rax,%rdi
   150a2:	ff d2                	call   *%rdx
        vkDestroyDescriptorUpdateTemplateKHR =
   150a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   150a8:	48 89 82 c0 0b 00 00 	mov    %rax,0xbc0(%rdx)
        if ( !vkDestroyDescriptorUpdateTemplate )
   150af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150b3:	48 8b 80 40 04 00 00 	mov    0x440(%rax),%rax
   150ba:	48 85 c0             	test   %rax,%rax
   150bd:	75 16                	jne    150d5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5887>
          vkDestroyDescriptorUpdateTemplate = vkDestroyDescriptorUpdateTemplateKHR;
   150bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150c3:	48 8b 90 c0 0b 00 00 	mov    0xbc0(%rax),%rdx
   150ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150ce:	48 89 90 40 04 00 00 	mov    %rdx,0x440(%rax)
          PFN_vkUpdateDescriptorSetWithTemplateKHR( vkGetDeviceProcAddr( device, "vkUpdateDescriptorSetWithTemplateKHR" ) );
   150d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   150dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   150e1:	48 8d 0d 20 7c 01 00 	lea    0x17c20(%rip),%rcx        # 2cd08 <_ZNSt8__detailL19__atomic_spin_countE+0x2514>
   150e8:	48 89 ce             	mov    %rcx,%rsi
   150eb:	48 89 c7             	mov    %rax,%rdi
   150ee:	ff d2                	call   *%rdx
        vkUpdateDescriptorSetWithTemplateKHR =
   150f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   150f4:	48 89 82 c8 0b 00 00 	mov    %rax,0xbc8(%rdx)
        if ( !vkUpdateDescriptorSetWithTemplate )
   150fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150ff:	48 8b 80 48 04 00 00 	mov    0x448(%rax),%rax
   15106:	48 85 c0             	test   %rax,%rax
   15109:	75 16                	jne    15121 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x58d3>
          vkUpdateDescriptorSetWithTemplate = vkUpdateDescriptorSetWithTemplateKHR;
   1510b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1510f:	48 8b 90 c8 0b 00 00 	mov    0xbc8(%rax),%rdx
   15116:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1511a:	48 89 90 48 04 00 00 	mov    %rdx,0x448(%rax)
          PFN_vkCmdPushDescriptorSetWithTemplateKHR( vkGetDeviceProcAddr( device, "vkCmdPushDescriptorSetWithTemplateKHR" ) );
   15121:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15125:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15129:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1512d:	48 8d 0d fc 7b 01 00 	lea    0x17bfc(%rip),%rcx        # 2cd30 <_ZNSt8__detailL19__atomic_spin_countE+0x253c>
   15134:	48 89 ce             	mov    %rcx,%rsi
   15137:	48 89 c7             	mov    %rax,%rdi
   1513a:	ff d2                	call   *%rdx
        vkCmdPushDescriptorSetWithTemplateKHR =
   1513c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15140:	48 89 82 d0 0b 00 00 	mov    %rax,0xbd0(%rdx)
          PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR( vkGetDeviceProcAddr( device, "vkGetDeviceGroupPeerMemoryFeaturesKHR" ) );
   15147:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1514b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1514f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15153:	48 8d 0d fe 7b 01 00 	lea    0x17bfe(%rip),%rcx        # 2cd58 <_ZNSt8__detailL19__atomic_spin_countE+0x2564>
   1515a:	48 89 ce             	mov    %rcx,%rsi
   1515d:	48 89 c7             	mov    %rax,%rdi
   15160:	ff d2                	call   *%rdx
        vkGetDeviceGroupPeerMemoryFeaturesKHR =
   15162:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15166:	48 89 82 d8 0b 00 00 	mov    %rax,0xbd8(%rdx)
        if ( !vkGetDeviceGroupPeerMemoryFeatures )
   1516d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15171:	48 8b 80 e8 03 00 00 	mov    0x3e8(%rax),%rax
   15178:	48 85 c0             	test   %rax,%rax
   1517b:	75 16                	jne    15193 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5945>
          vkGetDeviceGroupPeerMemoryFeatures = vkGetDeviceGroupPeerMemoryFeaturesKHR;
   1517d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15181:	48 8b 90 d8 0b 00 00 	mov    0xbd8(%rax),%rdx
   15188:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1518c:	48 89 90 e8 03 00 00 	mov    %rdx,0x3e8(%rax)
        vkCmdSetDeviceMaskKHR = PFN_vkCmdSetDeviceMaskKHR( vkGetDeviceProcAddr( device, "vkCmdSetDeviceMaskKHR" ) );
   15193:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15197:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1519b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1519f:	48 8d 0d d8 7b 01 00 	lea    0x17bd8(%rip),%rcx        # 2cd7e <_ZNSt8__detailL19__atomic_spin_countE+0x258a>
   151a6:	48 89 ce             	mov    %rcx,%rsi
   151a9:	48 89 c7             	mov    %rax,%rdi
   151ac:	ff d2                	call   *%rdx
   151ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   151b2:	48 89 82 e0 0b 00 00 	mov    %rax,0xbe0(%rdx)
        if ( !vkCmdSetDeviceMask )
   151b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   151bd:	48 8b 80 f0 03 00 00 	mov    0x3f0(%rax),%rax
   151c4:	48 85 c0             	test   %rax,%rax
   151c7:	75 16                	jne    151df <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5991>
          vkCmdSetDeviceMask = vkCmdSetDeviceMaskKHR;
   151c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   151cd:	48 8b 90 e0 0b 00 00 	mov    0xbe0(%rax),%rdx
   151d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   151d8:	48 89 90 f0 03 00 00 	mov    %rdx,0x3f0(%rax)
        vkCmdDispatchBaseKHR = PFN_vkCmdDispatchBaseKHR( vkGetDeviceProcAddr( device, "vkCmdDispatchBaseKHR" ) );
   151df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   151e3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   151e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   151eb:	48 8d 0d a2 7b 01 00 	lea    0x17ba2(%rip),%rcx        # 2cd94 <_ZNSt8__detailL19__atomic_spin_countE+0x25a0>
   151f2:	48 89 ce             	mov    %rcx,%rsi
   151f5:	48 89 c7             	mov    %rax,%rdi
   151f8:	ff d2                	call   *%rdx
   151fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   151fe:	48 89 82 e8 0b 00 00 	mov    %rax,0xbe8(%rdx)
        if ( !vkCmdDispatchBase )
   15205:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15209:	48 8b 80 f8 03 00 00 	mov    0x3f8(%rax),%rax
   15210:	48 85 c0             	test   %rax,%rax
   15213:	75 16                	jne    1522b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x59dd>
          vkCmdDispatchBase = vkCmdDispatchBaseKHR;
   15215:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15219:	48 8b 90 e8 0b 00 00 	mov    0xbe8(%rax),%rdx
   15220:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15224:	48 89 90 f8 03 00 00 	mov    %rdx,0x3f8(%rax)
          PFN_vkGetDeviceGroupPresentCapabilitiesKHR( vkGetDeviceProcAddr( device, "vkGetDeviceGroupPresentCapabilitiesKHR" ) );
   1522b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1522f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15233:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15237:	48 8d 0d 72 7b 01 00 	lea    0x17b72(%rip),%rcx        # 2cdb0 <_ZNSt8__detailL19__atomic_spin_countE+0x25bc>
   1523e:	48 89 ce             	mov    %rcx,%rsi
   15241:	48 89 c7             	mov    %rax,%rdi
   15244:	ff d2                	call   *%rdx
        vkGetDeviceGroupPresentCapabilitiesKHR =
   15246:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1524a:	48 89 82 f0 0b 00 00 	mov    %rax,0xbf0(%rdx)
          PFN_vkGetDeviceGroupSurfacePresentModesKHR( vkGetDeviceProcAddr( device, "vkGetDeviceGroupSurfacePresentModesKHR" ) );
   15251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15255:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15259:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1525d:	48 8d 0d 74 7b 01 00 	lea    0x17b74(%rip),%rcx        # 2cdd8 <_ZNSt8__detailL19__atomic_spin_countE+0x25e4>
   15264:	48 89 ce             	mov    %rcx,%rsi
   15267:	48 89 c7             	mov    %rax,%rdi
   1526a:	ff d2                	call   *%rdx
        vkGetDeviceGroupSurfacePresentModesKHR =
   1526c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15270:	48 89 82 f8 0b 00 00 	mov    %rax,0xbf8(%rdx)
        vkAcquireNextImage2KHR = PFN_vkAcquireNextImage2KHR( vkGetDeviceProcAddr( device, "vkAcquireNextImage2KHR" ) );
   15277:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1527b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1527f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15283:	48 8d 0d 75 7b 01 00 	lea    0x17b75(%rip),%rcx        # 2cdff <_ZNSt8__detailL19__atomic_spin_countE+0x260b>
   1528a:	48 89 ce             	mov    %rcx,%rsi
   1528d:	48 89 c7             	mov    %rax,%rdi
   15290:	ff d2                	call   *%rdx
   15292:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15296:	48 89 82 00 0c 00 00 	mov    %rax,0xc00(%rdx)
        vkCreateSharedSwapchainsKHR = PFN_vkCreateSharedSwapchainsKHR( vkGetDeviceProcAddr( device, "vkCreateSharedSwapchainsKHR" ) );
   1529d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152a1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   152a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   152a9:	48 8d 0d 66 7b 01 00 	lea    0x17b66(%rip),%rcx        # 2ce16 <_ZNSt8__detailL19__atomic_spin_countE+0x2622>
   152b0:	48 89 ce             	mov    %rcx,%rsi
   152b3:	48 89 c7             	mov    %rax,%rdi
   152b6:	ff d2                	call   *%rdx
   152b8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   152bc:	48 89 82 08 0c 00 00 	mov    %rax,0xc08(%rdx)
        vkCmdDrawIndirectCountKHR = PFN_vkCmdDrawIndirectCountKHR( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectCountKHR" ) );
   152c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152c7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   152cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   152cf:	48 8d 0d 5c 7b 01 00 	lea    0x17b5c(%rip),%rcx        # 2ce32 <_ZNSt8__detailL19__atomic_spin_countE+0x263e>
   152d6:	48 89 ce             	mov    %rcx,%rsi
   152d9:	48 89 c7             	mov    %rax,%rdi
   152dc:	ff d2                	call   *%rdx
   152de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   152e2:	48 89 82 10 0c 00 00 	mov    %rax,0xc10(%rdx)
        if ( !vkCmdDrawIndirectCount )
   152e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152ed:	48 8b 80 58 04 00 00 	mov    0x458(%rax),%rax
   152f4:	48 85 c0             	test   %rax,%rax
   152f7:	75 16                	jne    1530f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ac1>
          vkCmdDrawIndirectCount = vkCmdDrawIndirectCountKHR;
   152f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152fd:	48 8b 90 10 0c 00 00 	mov    0xc10(%rax),%rdx
   15304:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15308:	48 89 90 58 04 00 00 	mov    %rdx,0x458(%rax)
        vkCmdDrawIndexedIndirectCountKHR = PFN_vkCmdDrawIndexedIndirectCountKHR( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirectCountKHR" ) );
   1530f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15313:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15317:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1531b:	48 8d 0d 2e 7b 01 00 	lea    0x17b2e(%rip),%rcx        # 2ce50 <_ZNSt8__detailL19__atomic_spin_countE+0x265c>
   15322:	48 89 ce             	mov    %rcx,%rsi
   15325:	48 89 c7             	mov    %rax,%rdi
   15328:	ff d2                	call   *%rdx
   1532a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1532e:	48 89 82 18 0c 00 00 	mov    %rax,0xc18(%rdx)
        if ( !vkCmdDrawIndexedIndirectCount )
   15335:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15339:	48 8b 80 60 04 00 00 	mov    0x460(%rax),%rax
   15340:	48 85 c0             	test   %rax,%rax
   15343:	75 16                	jne    1535b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5b0d>
          vkCmdDrawIndexedIndirectCount = vkCmdDrawIndexedIndirectCountKHR;
   15345:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15349:	48 8b 90 18 0c 00 00 	mov    0xc18(%rax),%rdx
   15350:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15354:	48 89 90 60 04 00 00 	mov    %rdx,0x460(%rax)
        vkCmdBeginRenderingKHR = PFN_vkCmdBeginRenderingKHR( vkGetDeviceProcAddr( device, "vkCmdBeginRenderingKHR" ) );
   1535b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1535f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15363:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15367:	48 8d 0d 03 7b 01 00 	lea    0x17b03(%rip),%rcx        # 2ce71 <_ZNSt8__detailL19__atomic_spin_countE+0x267d>
   1536e:	48 89 ce             	mov    %rcx,%rsi
   15371:	48 89 c7             	mov    %rax,%rdi
   15374:	ff d2                	call   *%rdx
   15376:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1537a:	48 89 82 20 0c 00 00 	mov    %rax,0xc20(%rdx)
        if ( !vkCmdBeginRendering )
   15381:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15385:	48 8b 80 40 05 00 00 	mov    0x540(%rax),%rax
   1538c:	48 85 c0             	test   %rax,%rax
   1538f:	75 16                	jne    153a7 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5b59>
          vkCmdBeginRendering = vkCmdBeginRenderingKHR;
   15391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15395:	48 8b 90 20 0c 00 00 	mov    0xc20(%rax),%rdx
   1539c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153a0:	48 89 90 40 05 00 00 	mov    %rdx,0x540(%rax)
        vkCmdEndRenderingKHR = PFN_vkCmdEndRenderingKHR( vkGetDeviceProcAddr( device, "vkCmdEndRenderingKHR" ) );
   153a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153ab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   153af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   153b3:	48 8d 0d ce 7a 01 00 	lea    0x17ace(%rip),%rcx        # 2ce88 <_ZNSt8__detailL19__atomic_spin_countE+0x2694>
   153ba:	48 89 ce             	mov    %rcx,%rsi
   153bd:	48 89 c7             	mov    %rax,%rdi
   153c0:	ff d2                	call   *%rdx
   153c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   153c6:	48 89 82 28 0c 00 00 	mov    %rax,0xc28(%rdx)
        if ( !vkCmdEndRendering )
   153cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153d1:	48 8b 80 48 05 00 00 	mov    0x548(%rax),%rax
   153d8:	48 85 c0             	test   %rax,%rax
   153db:	75 16                	jne    153f3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ba5>
          vkCmdEndRendering = vkCmdEndRenderingKHR;
   153dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153e1:	48 8b 90 28 0c 00 00 	mov    0xc28(%rax),%rdx
   153e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153ec:	48 89 90 48 05 00 00 	mov    %rdx,0x548(%rax)
        vkImportFenceFdKHR = PFN_vkImportFenceFdKHR( vkGetDeviceProcAddr( device, "vkImportFenceFdKHR" ) );
   153f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153f7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   153fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   153ff:	48 8d 0d 97 7a 01 00 	lea    0x17a97(%rip),%rcx        # 2ce9d <_ZNSt8__detailL19__atomic_spin_countE+0x26a9>
   15406:	48 89 ce             	mov    %rcx,%rsi
   15409:	48 89 c7             	mov    %rax,%rdi
   1540c:	ff d2                	call   *%rdx
   1540e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15412:	48 89 82 30 0c 00 00 	mov    %rax,0xc30(%rdx)
        vkGetFenceFdKHR    = PFN_vkGetFenceFdKHR( vkGetDeviceProcAddr( device, "vkGetFenceFdKHR" ) );
   15419:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1541d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15421:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15425:	48 8d 0d 84 7a 01 00 	lea    0x17a84(%rip),%rcx        # 2ceb0 <_ZNSt8__detailL19__atomic_spin_countE+0x26bc>
   1542c:	48 89 ce             	mov    %rcx,%rsi
   1542f:	48 89 c7             	mov    %rax,%rdi
   15432:	ff d2                	call   *%rdx
   15434:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15438:	48 89 82 38 0c 00 00 	mov    %rax,0xc38(%rdx)
        vkGetMemoryFdKHR           = PFN_vkGetMemoryFdKHR( vkGetDeviceProcAddr( device, "vkGetMemoryFdKHR" ) );
   1543f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15443:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15447:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1544b:	48 8d 0d 6e 7a 01 00 	lea    0x17a6e(%rip),%rcx        # 2cec0 <_ZNSt8__detailL19__atomic_spin_countE+0x26cc>
   15452:	48 89 ce             	mov    %rcx,%rsi
   15455:	48 89 c7             	mov    %rax,%rdi
   15458:	ff d2                	call   *%rdx
   1545a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1545e:	48 89 82 50 0c 00 00 	mov    %rax,0xc50(%rdx)
        vkGetMemoryFdPropertiesKHR = PFN_vkGetMemoryFdPropertiesKHR( vkGetDeviceProcAddr( device, "vkGetMemoryFdPropertiesKHR" ) );
   15465:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15469:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1546d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15471:	48 8d 0d 59 7a 01 00 	lea    0x17a59(%rip),%rcx        # 2ced1 <_ZNSt8__detailL19__atomic_spin_countE+0x26dd>
   15478:	48 89 ce             	mov    %rcx,%rsi
   1547b:	48 89 c7             	mov    %rax,%rdi
   1547e:	ff d2                	call   *%rdx
   15480:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15484:	48 89 82 58 0c 00 00 	mov    %rax,0xc58(%rdx)
        vkImportSemaphoreFdKHR = PFN_vkImportSemaphoreFdKHR( vkGetDeviceProcAddr( device, "vkImportSemaphoreFdKHR" ) );
   1548b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1548f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15493:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15497:	48 8d 0d 4e 7a 01 00 	lea    0x17a4e(%rip),%rcx        # 2ceec <_ZNSt8__detailL19__atomic_spin_countE+0x26f8>
   1549e:	48 89 ce             	mov    %rcx,%rsi
   154a1:	48 89 c7             	mov    %rax,%rdi
   154a4:	ff d2                	call   *%rdx
   154a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   154aa:	48 89 82 70 0c 00 00 	mov    %rax,0xc70(%rdx)
        vkGetSemaphoreFdKHR    = PFN_vkGetSemaphoreFdKHR( vkGetDeviceProcAddr( device, "vkGetSemaphoreFdKHR" ) );
   154b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154b5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   154b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   154bd:	48 8d 0d 3f 7a 01 00 	lea    0x17a3f(%rip),%rcx        # 2cf03 <_ZNSt8__detailL19__atomic_spin_countE+0x270f>
   154c4:	48 89 ce             	mov    %rcx,%rsi
   154c7:	48 89 c7             	mov    %rax,%rdi
   154ca:	ff d2                	call   *%rdx
   154cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   154d0:	48 89 82 78 0c 00 00 	mov    %rax,0xc78(%rdx)
        vkCmdSetFragmentShadingRateKHR = PFN_vkCmdSetFragmentShadingRateKHR( vkGetDeviceProcAddr( device, "vkCmdSetFragmentShadingRateKHR" ) );
   154d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154db:	48 8b 50 10          	mov    0x10(%rax),%rdx
   154df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   154e3:	48 8d 0d 2e 7a 01 00 	lea    0x17a2e(%rip),%rcx        # 2cf18 <_ZNSt8__detailL19__atomic_spin_countE+0x2724>
   154ea:	48 89 ce             	mov    %rcx,%rsi
   154ed:	48 89 c7             	mov    %rax,%rdi
   154f0:	ff d2                	call   *%rdx
   154f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   154f6:	48 89 82 90 0c 00 00 	mov    %rax,0xc90(%rdx)
        vkGetImageMemoryRequirements2KHR = PFN_vkGetImageMemoryRequirements2KHR( vkGetDeviceProcAddr( device, "vkGetImageMemoryRequirements2KHR" ) );
   154fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15501:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15505:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15509:	48 8d 0d 28 7a 01 00 	lea    0x17a28(%rip),%rcx        # 2cf38 <_ZNSt8__detailL19__atomic_spin_countE+0x2744>
   15510:	48 89 ce             	mov    %rcx,%rsi
   15513:	48 89 c7             	mov    %rax,%rdi
   15516:	ff d2                	call   *%rdx
   15518:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1551c:	48 89 82 98 0c 00 00 	mov    %rax,0xc98(%rdx)
        if ( !vkGetImageMemoryRequirements2 )
   15523:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15527:	48 8b 80 00 04 00 00 	mov    0x400(%rax),%rax
   1552e:	48 85 c0             	test   %rax,%rax
   15531:	75 16                	jne    15549 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5cfb>
          vkGetImageMemoryRequirements2 = vkGetImageMemoryRequirements2KHR;
   15533:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15537:	48 8b 90 98 0c 00 00 	mov    0xc98(%rax),%rdx
   1553e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15542:	48 89 90 00 04 00 00 	mov    %rdx,0x400(%rax)
        vkGetBufferMemoryRequirements2KHR = PFN_vkGetBufferMemoryRequirements2KHR( vkGetDeviceProcAddr( device, "vkGetBufferMemoryRequirements2KHR" ) );
   15549:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1554d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15551:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15555:	48 8d 0d 04 7a 01 00 	lea    0x17a04(%rip),%rcx        # 2cf60 <_ZNSt8__detailL19__atomic_spin_countE+0x276c>
   1555c:	48 89 ce             	mov    %rcx,%rsi
   1555f:	48 89 c7             	mov    %rax,%rdi
   15562:	ff d2                	call   *%rdx
   15564:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15568:	48 89 82 a0 0c 00 00 	mov    %rax,0xca0(%rdx)
        if ( !vkGetBufferMemoryRequirements2 )
   1556f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15573:	48 8b 80 08 04 00 00 	mov    0x408(%rax),%rax
   1557a:	48 85 c0             	test   %rax,%rax
   1557d:	75 16                	jne    15595 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5d47>
          vkGetBufferMemoryRequirements2 = vkGetBufferMemoryRequirements2KHR;
   1557f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15583:	48 8b 90 a0 0c 00 00 	mov    0xca0(%rax),%rdx
   1558a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1558e:	48 89 90 08 04 00 00 	mov    %rdx,0x408(%rax)
          PFN_vkGetImageSparseMemoryRequirements2KHR( vkGetDeviceProcAddr( device, "vkGetImageSparseMemoryRequirements2KHR" ) );
   15595:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15599:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1559d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   155a1:	48 8d 0d e0 79 01 00 	lea    0x179e0(%rip),%rcx        # 2cf88 <_ZNSt8__detailL19__atomic_spin_countE+0x2794>
   155a8:	48 89 ce             	mov    %rcx,%rsi
   155ab:	48 89 c7             	mov    %rax,%rdi
   155ae:	ff d2                	call   *%rdx
        vkGetImageSparseMemoryRequirements2KHR =
   155b0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   155b4:	48 89 82 a8 0c 00 00 	mov    %rax,0xca8(%rdx)
        if ( !vkGetImageSparseMemoryRequirements2 )
   155bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155bf:	48 8b 80 10 04 00 00 	mov    0x410(%rax),%rax
   155c6:	48 85 c0             	test   %rax,%rax
   155c9:	75 16                	jne    155e1 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5d93>
          vkGetImageSparseMemoryRequirements2 = vkGetImageSparseMemoryRequirements2KHR;
   155cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155cf:	48 8b 90 a8 0c 00 00 	mov    0xca8(%rax),%rdx
   155d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155da:	48 89 90 10 04 00 00 	mov    %rdx,0x410(%rax)
        vkTrimCommandPoolKHR = PFN_vkTrimCommandPoolKHR( vkGetDeviceProcAddr( device, "vkTrimCommandPoolKHR" ) );
   155e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155e5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   155e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   155ed:	48 8d 0d bb 79 01 00 	lea    0x179bb(%rip),%rcx        # 2cfaf <_ZNSt8__detailL19__atomic_spin_countE+0x27bb>
   155f4:	48 89 ce             	mov    %rcx,%rsi
   155f7:	48 89 c7             	mov    %rax,%rdi
   155fa:	ff d2                	call   *%rdx
   155fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15600:	48 89 82 b0 0c 00 00 	mov    %rax,0xcb0(%rdx)
        if ( !vkTrimCommandPool )
   15607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1560b:	48 8b 80 18 04 00 00 	mov    0x418(%rax),%rax
   15612:	48 85 c0             	test   %rax,%rax
   15615:	75 16                	jne    1562d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ddf>
          vkTrimCommandPool = vkTrimCommandPoolKHR;
   15617:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1561b:	48 8b 90 b0 0c 00 00 	mov    0xcb0(%rax),%rdx
   15622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15626:	48 89 90 18 04 00 00 	mov    %rdx,0x418(%rax)
        vkGetDescriptorSetLayoutSupportKHR = PFN_vkGetDescriptorSetLayoutSupportKHR( vkGetDeviceProcAddr( device, "vkGetDescriptorSetLayoutSupportKHR" ) );
   1562d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15631:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15635:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15639:	48 8d 0d 88 79 01 00 	lea    0x17988(%rip),%rcx        # 2cfc8 <_ZNSt8__detailL19__atomic_spin_countE+0x27d4>
   15640:	48 89 ce             	mov    %rcx,%rsi
   15643:	48 89 c7             	mov    %rax,%rdi
   15646:	ff d2                	call   *%rdx
   15648:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1564c:	48 89 82 b8 0c 00 00 	mov    %rax,0xcb8(%rdx)
        if ( !vkGetDescriptorSetLayoutSupport )
   15653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15657:	48 8b 80 50 04 00 00 	mov    0x450(%rax),%rax
   1565e:	48 85 c0             	test   %rax,%rax
   15661:	75 16                	jne    15679 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5e2b>
          vkGetDescriptorSetLayoutSupport = vkGetDescriptorSetLayoutSupportKHR;
   15663:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15667:	48 8b 90 b8 0c 00 00 	mov    0xcb8(%rax),%rdx
   1566e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15672:	48 89 90 50 04 00 00 	mov    %rdx,0x450(%rax)
          PFN_vkGetDeviceBufferMemoryRequirementsKHR( vkGetDeviceProcAddr( device, "vkGetDeviceBufferMemoryRequirementsKHR" ) );
   15679:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1567d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15681:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15685:	48 8d 0d 64 79 01 00 	lea    0x17964(%rip),%rcx        # 2cff0 <_ZNSt8__detailL19__atomic_spin_countE+0x27fc>
   1568c:	48 89 ce             	mov    %rcx,%rsi
   1568f:	48 89 c7             	mov    %rax,%rdi
   15692:	ff d2                	call   *%rdx
        vkGetDeviceBufferMemoryRequirementsKHR =
   15694:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15698:	48 89 82 c0 0c 00 00 	mov    %rax,0xcc0(%rdx)
        if ( !vkGetDeviceBufferMemoryRequirements )
   1569f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156a3:	48 8b 80 c8 05 00 00 	mov    0x5c8(%rax),%rax
   156aa:	48 85 c0             	test   %rax,%rax
   156ad:	75 16                	jne    156c5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5e77>
          vkGetDeviceBufferMemoryRequirements = vkGetDeviceBufferMemoryRequirementsKHR;
   156af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156b3:	48 8b 90 c0 0c 00 00 	mov    0xcc0(%rax),%rdx
   156ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156be:	48 89 90 c8 05 00 00 	mov    %rdx,0x5c8(%rax)
          PFN_vkGetDeviceImageMemoryRequirementsKHR( vkGetDeviceProcAddr( device, "vkGetDeviceImageMemoryRequirementsKHR" ) );
   156c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156c9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   156cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   156d1:	48 8d 0d 40 79 01 00 	lea    0x17940(%rip),%rcx        # 2d018 <_ZNSt8__detailL19__atomic_spin_countE+0x2824>
   156d8:	48 89 ce             	mov    %rcx,%rsi
   156db:	48 89 c7             	mov    %rax,%rdi
   156de:	ff d2                	call   *%rdx
        vkGetDeviceImageMemoryRequirementsKHR =
   156e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   156e4:	48 89 82 c8 0c 00 00 	mov    %rax,0xcc8(%rdx)
        if ( !vkGetDeviceImageMemoryRequirements )
   156eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156ef:	48 8b 80 d0 05 00 00 	mov    0x5d0(%rax),%rax
   156f6:	48 85 c0             	test   %rax,%rax
   156f9:	75 16                	jne    15711 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ec3>
          vkGetDeviceImageMemoryRequirements = vkGetDeviceImageMemoryRequirementsKHR;
   156fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156ff:	48 8b 90 c8 0c 00 00 	mov    0xcc8(%rax),%rdx
   15706:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1570a:	48 89 90 d0 05 00 00 	mov    %rdx,0x5d0(%rax)
          PFN_vkGetDeviceImageSparseMemoryRequirementsKHR( vkGetDeviceProcAddr( device, "vkGetDeviceImageSparseMemoryRequirementsKHR" ) );
   15711:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15715:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15719:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1571d:	48 8d 0d 1c 79 01 00 	lea    0x1791c(%rip),%rcx        # 2d040 <_ZNSt8__detailL19__atomic_spin_countE+0x284c>
   15724:	48 89 ce             	mov    %rcx,%rsi
   15727:	48 89 c7             	mov    %rax,%rdi
   1572a:	ff d2                	call   *%rdx
        vkGetDeviceImageSparseMemoryRequirementsKHR =
   1572c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15730:	48 89 82 d0 0c 00 00 	mov    %rax,0xcd0(%rdx)
        if ( !vkGetDeviceImageSparseMemoryRequirements )
   15737:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1573b:	48 8b 80 d8 05 00 00 	mov    0x5d8(%rax),%rax
   15742:	48 85 c0             	test   %rax,%rax
   15745:	75 16                	jne    1575d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5f0f>
          vkGetDeviceImageSparseMemoryRequirements = vkGetDeviceImageSparseMemoryRequirementsKHR;
   15747:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1574b:	48 8b 90 d0 0c 00 00 	mov    0xcd0(%rax),%rdx
   15752:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15756:	48 89 90 d8 05 00 00 	mov    %rdx,0x5d8(%rax)
        vkAcquireProfilingLockKHR = PFN_vkAcquireProfilingLockKHR( vkGetDeviceProcAddr( device, "vkAcquireProfilingLockKHR" ) );
   1575d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15761:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15765:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15769:	48 8d 0d fc 78 01 00 	lea    0x178fc(%rip),%rcx        # 2d06c <_ZNSt8__detailL19__atomic_spin_countE+0x2878>
   15770:	48 89 ce             	mov    %rcx,%rsi
   15773:	48 89 c7             	mov    %rax,%rdi
   15776:	ff d2                	call   *%rdx
   15778:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1577c:	48 89 82 d8 0c 00 00 	mov    %rax,0xcd8(%rdx)
        vkReleaseProfilingLockKHR = PFN_vkReleaseProfilingLockKHR( vkGetDeviceProcAddr( device, "vkReleaseProfilingLockKHR" ) );
   15783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15787:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1578b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1578f:	48 8d 0d f0 78 01 00 	lea    0x178f0(%rip),%rcx        # 2d086 <_ZNSt8__detailL19__atomic_spin_countE+0x2892>
   15796:	48 89 ce             	mov    %rcx,%rsi
   15799:	48 89 c7             	mov    %rax,%rdi
   1579c:	ff d2                	call   *%rdx
   1579e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   157a2:	48 89 82 e0 0c 00 00 	mov    %rax,0xce0(%rdx)
          PFN_vkGetPipelineExecutablePropertiesKHR( vkGetDeviceProcAddr( device, "vkGetPipelineExecutablePropertiesKHR" ) );
   157a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157ad:	48 8b 50 10          	mov    0x10(%rax),%rdx
   157b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   157b5:	48 8d 0d e4 78 01 00 	lea    0x178e4(%rip),%rcx        # 2d0a0 <_ZNSt8__detailL19__atomic_spin_countE+0x28ac>
   157bc:	48 89 ce             	mov    %rcx,%rsi
   157bf:	48 89 c7             	mov    %rax,%rdi
   157c2:	ff d2                	call   *%rdx
        vkGetPipelineExecutablePropertiesKHR =
   157c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   157c8:	48 89 82 e8 0c 00 00 	mov    %rax,0xce8(%rdx)
          PFN_vkGetPipelineExecutableStatisticsKHR( vkGetDeviceProcAddr( device, "vkGetPipelineExecutableStatisticsKHR" ) );
   157cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157d3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   157d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   157db:	48 8d 0d e6 78 01 00 	lea    0x178e6(%rip),%rcx        # 2d0c8 <_ZNSt8__detailL19__atomic_spin_countE+0x28d4>
   157e2:	48 89 ce             	mov    %rcx,%rsi
   157e5:	48 89 c7             	mov    %rax,%rdi
   157e8:	ff d2                	call   *%rdx
        vkGetPipelineExecutableStatisticsKHR =
   157ea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   157ee:	48 89 82 f0 0c 00 00 	mov    %rax,0xcf0(%rdx)
          PFN_vkGetPipelineExecutableInternalRepresentationsKHR( vkGetDeviceProcAddr( device, "vkGetPipelineExecutableInternalRepresentationsKHR" ) );
   157f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157f9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   157fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15801:	48 8d 0d e8 78 01 00 	lea    0x178e8(%rip),%rcx        # 2d0f0 <_ZNSt8__detailL19__atomic_spin_countE+0x28fc>
   15808:	48 89 ce             	mov    %rcx,%rsi
   1580b:	48 89 c7             	mov    %rax,%rdi
   1580e:	ff d2                	call   *%rdx
        vkGetPipelineExecutableInternalRepresentationsKHR =
   15810:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15814:	48 89 82 f8 0c 00 00 	mov    %rax,0xcf8(%rdx)
        vkWaitForPresentKHR = PFN_vkWaitForPresentKHR( vkGetDeviceProcAddr( device, "vkWaitForPresentKHR" ) );
   1581b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1581f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15823:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15827:	48 8d 0d f4 78 01 00 	lea    0x178f4(%rip),%rcx        # 2d122 <_ZNSt8__detailL19__atomic_spin_countE+0x292e>
   1582e:	48 89 ce             	mov    %rcx,%rsi
   15831:	48 89 c7             	mov    %rax,%rdi
   15834:	ff d2                	call   *%rdx
   15836:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1583a:	48 89 82 00 0d 00 00 	mov    %rax,0xd00(%rdx)
        vkCmdPushDescriptorSetKHR = PFN_vkCmdPushDescriptorSetKHR( vkGetDeviceProcAddr( device, "vkCmdPushDescriptorSetKHR" ) );
   15841:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15845:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15849:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1584d:	48 8d 0d e2 78 01 00 	lea    0x178e2(%rip),%rcx        # 2d136 <_ZNSt8__detailL19__atomic_spin_countE+0x2942>
   15854:	48 89 ce             	mov    %rcx,%rsi
   15857:	48 89 c7             	mov    %rax,%rdi
   1585a:	ff d2                	call   *%rdx
   1585c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15860:	48 89 82 08 0d 00 00 	mov    %rax,0xd08(%rdx)
        vkCmdTraceRaysIndirect2KHR = PFN_vkCmdTraceRaysIndirect2KHR( vkGetDeviceProcAddr( device, "vkCmdTraceRaysIndirect2KHR" ) );
   15867:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1586b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1586f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15873:	48 8d 0d d6 78 01 00 	lea    0x178d6(%rip),%rcx        # 2d150 <_ZNSt8__detailL19__atomic_spin_countE+0x295c>
   1587a:	48 89 ce             	mov    %rcx,%rsi
   1587d:	48 89 c7             	mov    %rax,%rdi
   15880:	ff d2                	call   *%rdx
   15882:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15886:	48 89 82 10 0d 00 00 	mov    %rax,0xd10(%rdx)
        vkCmdTraceRaysKHR              = PFN_vkCmdTraceRaysKHR( vkGetDeviceProcAddr( device, "vkCmdTraceRaysKHR" ) );
   1588d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15891:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15895:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15899:	48 8d 0d cb 78 01 00 	lea    0x178cb(%rip),%rcx        # 2d16b <_ZNSt8__detailL19__atomic_spin_countE+0x2977>
   158a0:	48 89 ce             	mov    %rcx,%rsi
   158a3:	48 89 c7             	mov    %rax,%rdi
   158a6:	ff d2                	call   *%rdx
   158a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   158ac:	48 89 82 18 0d 00 00 	mov    %rax,0xd18(%rdx)
        vkCreateRayTracingPipelinesKHR = PFN_vkCreateRayTracingPipelinesKHR( vkGetDeviceProcAddr( device, "vkCreateRayTracingPipelinesKHR" ) );
   158b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158b7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   158bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   158bf:	48 8d 0d ba 78 01 00 	lea    0x178ba(%rip),%rcx        # 2d180 <_ZNSt8__detailL19__atomic_spin_countE+0x298c>
   158c6:	48 89 ce             	mov    %rcx,%rsi
   158c9:	48 89 c7             	mov    %rax,%rdi
   158cc:	ff d2                	call   *%rdx
   158ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   158d2:	48 89 82 20 0d 00 00 	mov    %rax,0xd20(%rdx)
          PFN_vkGetRayTracingShaderGroupHandlesKHR( vkGetDeviceProcAddr( device, "vkGetRayTracingShaderGroupHandlesKHR" ) );
   158d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158dd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   158e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   158e5:	48 8d 0d b4 78 01 00 	lea    0x178b4(%rip),%rcx        # 2d1a0 <_ZNSt8__detailL19__atomic_spin_countE+0x29ac>
   158ec:	48 89 ce             	mov    %rcx,%rsi
   158ef:	48 89 c7             	mov    %rax,%rdi
   158f2:	ff d2                	call   *%rdx
        vkGetRayTracingShaderGroupHandlesKHR =
   158f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   158f8:	48 89 82 28 0d 00 00 	mov    %rax,0xd28(%rdx)
          PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR( vkGetDeviceProcAddr( device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR" ) );
   158ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15903:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15907:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1590b:	48 8d 0d b6 78 01 00 	lea    0x178b6(%rip),%rcx        # 2d1c8 <_ZNSt8__detailL19__atomic_spin_countE+0x29d4>
   15912:	48 89 ce             	mov    %rcx,%rsi
   15915:	48 89 c7             	mov    %rax,%rdi
   15918:	ff d2                	call   *%rdx
        vkGetRayTracingCaptureReplayShaderGroupHandlesKHR =
   1591a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1591e:	48 89 82 30 0d 00 00 	mov    %rax,0xd30(%rdx)
        vkCmdTraceRaysIndirectKHR = PFN_vkCmdTraceRaysIndirectKHR( vkGetDeviceProcAddr( device, "vkCmdTraceRaysIndirectKHR" ) );
   15925:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15929:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1592d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15931:	48 8d 0d c2 78 01 00 	lea    0x178c2(%rip),%rcx        # 2d1fa <_ZNSt8__detailL19__atomic_spin_countE+0x2a06>
   15938:	48 89 ce             	mov    %rcx,%rsi
   1593b:	48 89 c7             	mov    %rax,%rdi
   1593e:	ff d2                	call   *%rdx
   15940:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15944:	48 89 82 38 0d 00 00 	mov    %rax,0xd38(%rdx)
          PFN_vkGetRayTracingShaderGroupStackSizeKHR( vkGetDeviceProcAddr( device, "vkGetRayTracingShaderGroupStackSizeKHR" ) );
   1594b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1594f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15953:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15957:	48 8d 0d ba 78 01 00 	lea    0x178ba(%rip),%rcx        # 2d218 <_ZNSt8__detailL19__atomic_spin_countE+0x2a24>
   1595e:	48 89 ce             	mov    %rcx,%rsi
   15961:	48 89 c7             	mov    %rax,%rdi
   15964:	ff d2                	call   *%rdx
        vkGetRayTracingShaderGroupStackSizeKHR =
   15966:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1596a:	48 89 82 40 0d 00 00 	mov    %rax,0xd40(%rdx)
          PFN_vkCmdSetRayTracingPipelineStackSizeKHR( vkGetDeviceProcAddr( device, "vkCmdSetRayTracingPipelineStackSizeKHR" ) );
   15971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15975:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15979:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1597d:	48 8d 0d bc 78 01 00 	lea    0x178bc(%rip),%rcx        # 2d240 <_ZNSt8__detailL19__atomic_spin_countE+0x2a4c>
   15984:	48 89 ce             	mov    %rcx,%rsi
   15987:	48 89 c7             	mov    %rax,%rdi
   1598a:	ff d2                	call   *%rdx
        vkCmdSetRayTracingPipelineStackSizeKHR =
   1598c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15990:	48 89 82 48 0d 00 00 	mov    %rax,0xd48(%rdx)
        vkCreateSamplerYcbcrConversionKHR = PFN_vkCreateSamplerYcbcrConversionKHR( vkGetDeviceProcAddr( device, "vkCreateSamplerYcbcrConversionKHR" ) );
   15997:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1599b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1599f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   159a3:	48 8d 0d be 78 01 00 	lea    0x178be(%rip),%rcx        # 2d268 <_ZNSt8__detailL19__atomic_spin_countE+0x2a74>
   159aa:	48 89 ce             	mov    %rcx,%rsi
   159ad:	48 89 c7             	mov    %rax,%rdi
   159b0:	ff d2                	call   *%rdx
   159b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   159b6:	48 89 82 50 0d 00 00 	mov    %rax,0xd50(%rdx)
        if ( !vkCreateSamplerYcbcrConversion )
   159bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159c1:	48 8b 80 28 04 00 00 	mov    0x428(%rax),%rax
   159c8:	48 85 c0             	test   %rax,%rax
   159cb:	75 16                	jne    159e3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6195>
          vkCreateSamplerYcbcrConversion = vkCreateSamplerYcbcrConversionKHR;
   159cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159d1:	48 8b 90 50 0d 00 00 	mov    0xd50(%rax),%rdx
   159d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159dc:	48 89 90 28 04 00 00 	mov    %rdx,0x428(%rax)
        vkDestroySamplerYcbcrConversionKHR = PFN_vkDestroySamplerYcbcrConversionKHR( vkGetDeviceProcAddr( device, "vkDestroySamplerYcbcrConversionKHR" ) );
   159e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   159eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   159ef:	48 8d 0d 9a 78 01 00 	lea    0x1789a(%rip),%rcx        # 2d290 <_ZNSt8__detailL19__atomic_spin_countE+0x2a9c>
   159f6:	48 89 ce             	mov    %rcx,%rsi
   159f9:	48 89 c7             	mov    %rax,%rdi
   159fc:	ff d2                	call   *%rdx
   159fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a02:	48 89 82 58 0d 00 00 	mov    %rax,0xd58(%rdx)
        if ( !vkDestroySamplerYcbcrConversion )
   15a09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a0d:	48 8b 80 30 04 00 00 	mov    0x430(%rax),%rax
   15a14:	48 85 c0             	test   %rax,%rax
   15a17:	75 16                	jne    15a2f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x61e1>
          vkDestroySamplerYcbcrConversion = vkDestroySamplerYcbcrConversionKHR;
   15a19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a1d:	48 8b 90 58 0d 00 00 	mov    0xd58(%rax),%rdx
   15a24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a28:	48 89 90 30 04 00 00 	mov    %rdx,0x430(%rax)
        vkGetSwapchainStatusKHR = PFN_vkGetSwapchainStatusKHR( vkGetDeviceProcAddr( device, "vkGetSwapchainStatusKHR" ) );
   15a2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a33:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a3b:	48 8d 0d 71 78 01 00 	lea    0x17871(%rip),%rcx        # 2d2b3 <_ZNSt8__detailL19__atomic_spin_countE+0x2abf>
   15a42:	48 89 ce             	mov    %rcx,%rsi
   15a45:	48 89 c7             	mov    %rax,%rdi
   15a48:	ff d2                	call   *%rdx
   15a4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a4e:	48 89 82 60 0d 00 00 	mov    %rax,0xd60(%rdx)
        vkCreateSwapchainKHR    = PFN_vkCreateSwapchainKHR( vkGetDeviceProcAddr( device, "vkCreateSwapchainKHR" ) );
   15a55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a59:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a61:	48 8d 0d 63 78 01 00 	lea    0x17863(%rip),%rcx        # 2d2cb <_ZNSt8__detailL19__atomic_spin_countE+0x2ad7>
   15a68:	48 89 ce             	mov    %rcx,%rsi
   15a6b:	48 89 c7             	mov    %rax,%rdi
   15a6e:	ff d2                	call   *%rdx
   15a70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a74:	48 89 82 68 0d 00 00 	mov    %rax,0xd68(%rdx)
        vkDestroySwapchainKHR   = PFN_vkDestroySwapchainKHR( vkGetDeviceProcAddr( device, "vkDestroySwapchainKHR" ) );
   15a7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a7f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a87:	48 8d 0d 52 78 01 00 	lea    0x17852(%rip),%rcx        # 2d2e0 <_ZNSt8__detailL19__atomic_spin_countE+0x2aec>
   15a8e:	48 89 ce             	mov    %rcx,%rsi
   15a91:	48 89 c7             	mov    %rax,%rdi
   15a94:	ff d2                	call   *%rdx
   15a96:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a9a:	48 89 82 70 0d 00 00 	mov    %rax,0xd70(%rdx)
        vkGetSwapchainImagesKHR = PFN_vkGetSwapchainImagesKHR( vkGetDeviceProcAddr( device, "vkGetSwapchainImagesKHR" ) );
   15aa1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15aa5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15aa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15aad:	48 8d 0d 42 78 01 00 	lea    0x17842(%rip),%rcx        # 2d2f6 <_ZNSt8__detailL19__atomic_spin_countE+0x2b02>
   15ab4:	48 89 ce             	mov    %rcx,%rsi
   15ab7:	48 89 c7             	mov    %rax,%rdi
   15aba:	ff d2                	call   *%rdx
   15abc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15ac0:	48 89 82 78 0d 00 00 	mov    %rax,0xd78(%rdx)
        vkAcquireNextImageKHR   = PFN_vkAcquireNextImageKHR( vkGetDeviceProcAddr( device, "vkAcquireNextImageKHR" ) );
   15ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15acb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15acf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15ad3:	48 8d 0d 34 78 01 00 	lea    0x17834(%rip),%rcx        # 2d30e <_ZNSt8__detailL19__atomic_spin_countE+0x2b1a>
   15ada:	48 89 ce             	mov    %rcx,%rsi
   15add:	48 89 c7             	mov    %rax,%rdi
   15ae0:	ff d2                	call   *%rdx
   15ae2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15ae6:	48 89 82 80 0d 00 00 	mov    %rax,0xd80(%rdx)
        vkQueuePresentKHR       = PFN_vkQueuePresentKHR( vkGetDeviceProcAddr( device, "vkQueuePresentKHR" ) );
   15aed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15af1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15af5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15af9:	48 8d 0d 24 78 01 00 	lea    0x17824(%rip),%rcx        # 2d324 <_ZNSt8__detailL19__atomic_spin_countE+0x2b30>
   15b00:	48 89 ce             	mov    %rcx,%rsi
   15b03:	48 89 c7             	mov    %rax,%rdi
   15b06:	ff d2                	call   *%rdx
   15b08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b0c:	48 89 82 88 0d 00 00 	mov    %rax,0xd88(%rdx)
        vkCmdSetEvent2KHR = PFN_vkCmdSetEvent2KHR( vkGetDeviceProcAddr( device, "vkCmdSetEvent2KHR" ) );
   15b13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b17:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b1f:	48 8d 0d 10 78 01 00 	lea    0x17810(%rip),%rcx        # 2d336 <_ZNSt8__detailL19__atomic_spin_countE+0x2b42>
   15b26:	48 89 ce             	mov    %rcx,%rsi
   15b29:	48 89 c7             	mov    %rax,%rdi
   15b2c:	ff d2                	call   *%rdx
   15b2e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b32:	48 89 82 90 0d 00 00 	mov    %rax,0xd90(%rdx)
        if ( !vkCmdSetEvent2 )
   15b39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b3d:	48 8b 80 e0 04 00 00 	mov    0x4e0(%rax),%rax
   15b44:	48 85 c0             	test   %rax,%rax
   15b47:	75 16                	jne    15b5f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6311>
          vkCmdSetEvent2 = vkCmdSetEvent2KHR;
   15b49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b4d:	48 8b 90 90 0d 00 00 	mov    0xd90(%rax),%rdx
   15b54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b58:	48 89 90 e0 04 00 00 	mov    %rdx,0x4e0(%rax)
        vkCmdResetEvent2KHR = PFN_vkCmdResetEvent2KHR( vkGetDeviceProcAddr( device, "vkCmdResetEvent2KHR" ) );
   15b5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b63:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b6b:	48 8d 0d d6 77 01 00 	lea    0x177d6(%rip),%rcx        # 2d348 <_ZNSt8__detailL19__atomic_spin_countE+0x2b54>
   15b72:	48 89 ce             	mov    %rcx,%rsi
   15b75:	48 89 c7             	mov    %rax,%rdi
   15b78:	ff d2                	call   *%rdx
   15b7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b7e:	48 89 82 98 0d 00 00 	mov    %rax,0xd98(%rdx)
        if ( !vkCmdResetEvent2 )
   15b85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b89:	48 8b 80 e8 04 00 00 	mov    0x4e8(%rax),%rax
   15b90:	48 85 c0             	test   %rax,%rax
   15b93:	75 16                	jne    15bab <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x635d>
          vkCmdResetEvent2 = vkCmdResetEvent2KHR;
   15b95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b99:	48 8b 90 98 0d 00 00 	mov    0xd98(%rax),%rdx
   15ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ba4:	48 89 90 e8 04 00 00 	mov    %rdx,0x4e8(%rax)
        vkCmdWaitEvents2KHR = PFN_vkCmdWaitEvents2KHR( vkGetDeviceProcAddr( device, "vkCmdWaitEvents2KHR" ) );
   15bab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15baf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15bb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15bb7:	48 8d 0d 9e 77 01 00 	lea    0x1779e(%rip),%rcx        # 2d35c <_ZNSt8__detailL19__atomic_spin_countE+0x2b68>
   15bbe:	48 89 ce             	mov    %rcx,%rsi
   15bc1:	48 89 c7             	mov    %rax,%rdi
   15bc4:	ff d2                	call   *%rdx
   15bc6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15bca:	48 89 82 a0 0d 00 00 	mov    %rax,0xda0(%rdx)
        if ( !vkCmdWaitEvents2 )
   15bd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15bd5:	48 8b 80 f0 04 00 00 	mov    0x4f0(%rax),%rax
   15bdc:	48 85 c0             	test   %rax,%rax
   15bdf:	75 16                	jne    15bf7 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x63a9>
          vkCmdWaitEvents2 = vkCmdWaitEvents2KHR;
   15be1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15be5:	48 8b 90 a0 0d 00 00 	mov    0xda0(%rax),%rdx
   15bec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15bf0:	48 89 90 f0 04 00 00 	mov    %rdx,0x4f0(%rax)
        vkCmdPipelineBarrier2KHR = PFN_vkCmdPipelineBarrier2KHR( vkGetDeviceProcAddr( device, "vkCmdPipelineBarrier2KHR" ) );
   15bf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15bfb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15bff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c03:	48 8d 0d 66 77 01 00 	lea    0x17766(%rip),%rcx        # 2d370 <_ZNSt8__detailL19__atomic_spin_countE+0x2b7c>
   15c0a:	48 89 ce             	mov    %rcx,%rsi
   15c0d:	48 89 c7             	mov    %rax,%rdi
   15c10:	ff d2                	call   *%rdx
   15c12:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15c16:	48 89 82 a8 0d 00 00 	mov    %rax,0xda8(%rdx)
        if ( !vkCmdPipelineBarrier2 )
   15c1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c21:	48 8b 80 f8 04 00 00 	mov    0x4f8(%rax),%rax
   15c28:	48 85 c0             	test   %rax,%rax
   15c2b:	75 16                	jne    15c43 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x63f5>
          vkCmdPipelineBarrier2 = vkCmdPipelineBarrier2KHR;
   15c2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c31:	48 8b 90 a8 0d 00 00 	mov    0xda8(%rax),%rdx
   15c38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c3c:	48 89 90 f8 04 00 00 	mov    %rdx,0x4f8(%rax)
        vkCmdWriteTimestamp2KHR = PFN_vkCmdWriteTimestamp2KHR( vkGetDeviceProcAddr( device, "vkCmdWriteTimestamp2KHR" ) );
   15c43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c47:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15c4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c4f:	48 8d 0d 33 77 01 00 	lea    0x17733(%rip),%rcx        # 2d389 <_ZNSt8__detailL19__atomic_spin_countE+0x2b95>
   15c56:	48 89 ce             	mov    %rcx,%rsi
   15c59:	48 89 c7             	mov    %rax,%rdi
   15c5c:	ff d2                	call   *%rdx
   15c5e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15c62:	48 89 82 b0 0d 00 00 	mov    %rax,0xdb0(%rdx)
        if ( !vkCmdWriteTimestamp2 )
   15c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c6d:	48 8b 80 00 05 00 00 	mov    0x500(%rax),%rax
   15c74:	48 85 c0             	test   %rax,%rax
   15c77:	75 16                	jne    15c8f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6441>
          vkCmdWriteTimestamp2 = vkCmdWriteTimestamp2KHR;
   15c79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c7d:	48 8b 90 b0 0d 00 00 	mov    0xdb0(%rax),%rdx
   15c84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c88:	48 89 90 00 05 00 00 	mov    %rdx,0x500(%rax)
        vkQueueSubmit2KHR = PFN_vkQueueSubmit2KHR( vkGetDeviceProcAddr( device, "vkQueueSubmit2KHR" ) );
   15c8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c93:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15c97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c9b:	48 8d 0d ff 76 01 00 	lea    0x176ff(%rip),%rcx        # 2d3a1 <_ZNSt8__detailL19__atomic_spin_countE+0x2bad>
   15ca2:	48 89 ce             	mov    %rcx,%rsi
   15ca5:	48 89 c7             	mov    %rax,%rdi
   15ca8:	ff d2                	call   *%rdx
   15caa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15cae:	48 89 82 b8 0d 00 00 	mov    %rax,0xdb8(%rdx)
        if ( !vkQueueSubmit2 )
   15cb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cb9:	48 8b 80 08 05 00 00 	mov    0x508(%rax),%rax
   15cc0:	48 85 c0             	test   %rax,%rax
   15cc3:	75 16                	jne    15cdb <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x648d>
          vkQueueSubmit2 = vkQueueSubmit2KHR;
   15cc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cc9:	48 8b 90 b8 0d 00 00 	mov    0xdb8(%rax),%rdx
   15cd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cd4:	48 89 90 08 05 00 00 	mov    %rdx,0x508(%rax)
        vkCmdWriteBufferMarker2AMD  = PFN_vkCmdWriteBufferMarker2AMD( vkGetDeviceProcAddr( device, "vkCmdWriteBufferMarker2AMD" ) );
   15cdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cdf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15ce3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15ce7:	48 8d 0d c5 76 01 00 	lea    0x176c5(%rip),%rcx        # 2d3b3 <_ZNSt8__detailL19__atomic_spin_countE+0x2bbf>
   15cee:	48 89 ce             	mov    %rcx,%rsi
   15cf1:	48 89 c7             	mov    %rax,%rdi
   15cf4:	ff d2                	call   *%rdx
   15cf6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15cfa:	48 89 82 c0 0d 00 00 	mov    %rax,0xdc0(%rdx)
        vkGetQueueCheckpointData2NV = PFN_vkGetQueueCheckpointData2NV( vkGetDeviceProcAddr( device, "vkGetQueueCheckpointData2NV" ) );
   15d01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d05:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d0d:	48 8d 0d ba 76 01 00 	lea    0x176ba(%rip),%rcx        # 2d3ce <_ZNSt8__detailL19__atomic_spin_countE+0x2bda>
   15d14:	48 89 ce             	mov    %rcx,%rsi
   15d17:	48 89 c7             	mov    %rax,%rdi
   15d1a:	ff d2                	call   *%rdx
   15d1c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d20:	48 89 82 c8 0d 00 00 	mov    %rax,0xdc8(%rdx)
        vkGetSemaphoreCounterValueKHR = PFN_vkGetSemaphoreCounterValueKHR( vkGetDeviceProcAddr( device, "vkGetSemaphoreCounterValueKHR" ) );
   15d27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d2b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d33:	48 8d 0d b0 76 01 00 	lea    0x176b0(%rip),%rcx        # 2d3ea <_ZNSt8__detailL19__atomic_spin_countE+0x2bf6>
   15d3a:	48 89 ce             	mov    %rcx,%rsi
   15d3d:	48 89 c7             	mov    %rax,%rdi
   15d40:	ff d2                	call   *%rdx
   15d42:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d46:	48 89 82 d0 0d 00 00 	mov    %rax,0xdd0(%rdx)
        if ( !vkGetSemaphoreCounterValue )
   15d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d51:	48 8b 80 90 04 00 00 	mov    0x490(%rax),%rax
   15d58:	48 85 c0             	test   %rax,%rax
   15d5b:	75 16                	jne    15d73 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6525>
          vkGetSemaphoreCounterValue = vkGetSemaphoreCounterValueKHR;
   15d5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d61:	48 8b 90 d0 0d 00 00 	mov    0xdd0(%rax),%rdx
   15d68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d6c:	48 89 90 90 04 00 00 	mov    %rdx,0x490(%rax)
        vkWaitSemaphoresKHR = PFN_vkWaitSemaphoresKHR( vkGetDeviceProcAddr( device, "vkWaitSemaphoresKHR" ) );
   15d73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d77:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d7f:	48 8d 0d 82 76 01 00 	lea    0x17682(%rip),%rcx        # 2d408 <_ZNSt8__detailL19__atomic_spin_countE+0x2c14>
   15d86:	48 89 ce             	mov    %rcx,%rsi
   15d89:	48 89 c7             	mov    %rax,%rdi
   15d8c:	ff d2                	call   *%rdx
   15d8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d92:	48 89 82 d8 0d 00 00 	mov    %rax,0xdd8(%rdx)
        if ( !vkWaitSemaphores )
   15d99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d9d:	48 8b 80 98 04 00 00 	mov    0x498(%rax),%rax
   15da4:	48 85 c0             	test   %rax,%rax
   15da7:	75 16                	jne    15dbf <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6571>
          vkWaitSemaphores = vkWaitSemaphoresKHR;
   15da9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15dad:	48 8b 90 d8 0d 00 00 	mov    0xdd8(%rax),%rdx
   15db4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15db8:	48 89 90 98 04 00 00 	mov    %rdx,0x498(%rax)
        vkSignalSemaphoreKHR = PFN_vkSignalSemaphoreKHR( vkGetDeviceProcAddr( device, "vkSignalSemaphoreKHR" ) );
   15dbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15dc3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15dc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15dcb:	48 8d 0d 4a 76 01 00 	lea    0x1764a(%rip),%rcx        # 2d41c <_ZNSt8__detailL19__atomic_spin_countE+0x2c28>
   15dd2:	48 89 ce             	mov    %rcx,%rsi
   15dd5:	48 89 c7             	mov    %rax,%rdi
   15dd8:	ff d2                	call   *%rdx
   15dda:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15dde:	48 89 82 e0 0d 00 00 	mov    %rax,0xde0(%rdx)
        if ( !vkSignalSemaphore )
   15de5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15de9:	48 8b 80 a0 04 00 00 	mov    0x4a0(%rax),%rax
   15df0:	48 85 c0             	test   %rax,%rax
   15df3:	75 16                	jne    15e0b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x65bd>
          vkSignalSemaphore = vkSignalSemaphoreKHR;
   15df5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15df9:	48 8b 90 e0 0d 00 00 	mov    0xde0(%rax),%rdx
   15e00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e04:	48 89 90 a0 04 00 00 	mov    %rdx,0x4a0(%rax)
        vkCreateCuModuleNVX    = PFN_vkCreateCuModuleNVX( vkGetDeviceProcAddr( device, "vkCreateCuModuleNVX" ) );
   15e0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e0f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e17:	48 8d 0d 13 76 01 00 	lea    0x17613(%rip),%rcx        # 2d431 <_ZNSt8__detailL19__atomic_spin_countE+0x2c3d>
   15e1e:	48 89 ce             	mov    %rcx,%rsi
   15e21:	48 89 c7             	mov    %rax,%rdi
   15e24:	ff d2                	call   *%rdx
   15e26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e2a:	48 89 82 48 0e 00 00 	mov    %rax,0xe48(%rdx)
        vkCreateCuFunctionNVX  = PFN_vkCreateCuFunctionNVX( vkGetDeviceProcAddr( device, "vkCreateCuFunctionNVX" ) );
   15e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e35:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e3d:	48 8d 0d 01 76 01 00 	lea    0x17601(%rip),%rcx        # 2d445 <_ZNSt8__detailL19__atomic_spin_countE+0x2c51>
   15e44:	48 89 ce             	mov    %rcx,%rsi
   15e47:	48 89 c7             	mov    %rax,%rdi
   15e4a:	ff d2                	call   *%rdx
   15e4c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e50:	48 89 82 50 0e 00 00 	mov    %rax,0xe50(%rdx)
        vkDestroyCuModuleNVX   = PFN_vkDestroyCuModuleNVX( vkGetDeviceProcAddr( device, "vkDestroyCuModuleNVX" ) );
   15e57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e5b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e63:	48 8d 0d f1 75 01 00 	lea    0x175f1(%rip),%rcx        # 2d45b <_ZNSt8__detailL19__atomic_spin_countE+0x2c67>
   15e6a:	48 89 ce             	mov    %rcx,%rsi
   15e6d:	48 89 c7             	mov    %rax,%rdi
   15e70:	ff d2                	call   *%rdx
   15e72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e76:	48 89 82 58 0e 00 00 	mov    %rax,0xe58(%rdx)
        vkDestroyCuFunctionNVX = PFN_vkDestroyCuFunctionNVX( vkGetDeviceProcAddr( device, "vkDestroyCuFunctionNVX" ) );
   15e7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e81:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e89:	48 8d 0d e0 75 01 00 	lea    0x175e0(%rip),%rcx        # 2d470 <_ZNSt8__detailL19__atomic_spin_countE+0x2c7c>
   15e90:	48 89 ce             	mov    %rcx,%rsi
   15e93:	48 89 c7             	mov    %rax,%rdi
   15e96:	ff d2                	call   *%rdx
   15e98:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e9c:	48 89 82 60 0e 00 00 	mov    %rax,0xe60(%rdx)
        vkCmdCuLaunchKernelNVX = PFN_vkCmdCuLaunchKernelNVX( vkGetDeviceProcAddr( device, "vkCmdCuLaunchKernelNVX" ) );
   15ea3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ea7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15eab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15eaf:	48 8d 0d d1 75 01 00 	lea    0x175d1(%rip),%rcx        # 2d487 <_ZNSt8__detailL19__atomic_spin_countE+0x2c93>
   15eb6:	48 89 ce             	mov    %rcx,%rsi
   15eb9:	48 89 c7             	mov    %rax,%rdi
   15ebc:	ff d2                	call   *%rdx
   15ebe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15ec2:	48 89 82 68 0e 00 00 	mov    %rax,0xe68(%rdx)
        vkGetImageViewHandleNVX  = PFN_vkGetImageViewHandleNVX( vkGetDeviceProcAddr( device, "vkGetImageViewHandleNVX" ) );
   15ec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ecd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15ed1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15ed5:	48 8d 0d c2 75 01 00 	lea    0x175c2(%rip),%rcx        # 2d49e <_ZNSt8__detailL19__atomic_spin_countE+0x2caa>
   15edc:	48 89 ce             	mov    %rcx,%rsi
   15edf:	48 89 c7             	mov    %rax,%rdi
   15ee2:	ff d2                	call   *%rdx
   15ee4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15ee8:	48 89 82 70 0e 00 00 	mov    %rax,0xe70(%rdx)
        vkGetImageViewAddressNVX = PFN_vkGetImageViewAddressNVX( vkGetDeviceProcAddr( device, "vkGetImageViewAddressNVX" ) );
   15eef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ef3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15ef7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15efb:	48 8d 0d b4 75 01 00 	lea    0x175b4(%rip),%rcx        # 2d4b6 <_ZNSt8__detailL19__atomic_spin_countE+0x2cc2>
   15f02:	48 89 ce             	mov    %rcx,%rsi
   15f05:	48 89 c7             	mov    %rax,%rdi
   15f08:	ff d2                	call   *%rdx
   15f0a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15f0e:	48 89 82 78 0e 00 00 	mov    %rax,0xe78(%rdx)
        vkCmdSetViewportWScalingNV = PFN_vkCmdSetViewportWScalingNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportWScalingNV" ) );
   15f15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f19:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15f1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15f21:	48 8d 0d a7 75 01 00 	lea    0x175a7(%rip),%rcx        # 2d4cf <_ZNSt8__detailL19__atomic_spin_countE+0x2cdb>
   15f28:	48 89 ce             	mov    %rcx,%rsi
   15f2b:	48 89 c7             	mov    %rax,%rdi
   15f2e:	ff d2                	call   *%rdx
   15f30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15f34:	48 89 82 80 0e 00 00 	mov    %rax,0xe80(%rdx)
        vkCmdSetCheckpointNV       = PFN_vkCmdSetCheckpointNV( vkGetDeviceProcAddr( device, "vkCmdSetCheckpointNV" ) );
   15f3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f3f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15f43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15f47:	48 8d 0d 9c 75 01 00 	lea    0x1759c(%rip),%rcx        # 2d4ea <_ZNSt8__detailL19__atomic_spin_countE+0x2cf6>
   15f4e:	48 89 ce             	mov    %rcx,%rsi
   15f51:	48 89 c7             	mov    %rax,%rdi
   15f54:	ff d2                	call   *%rdx
   15f56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15f5a:	48 89 82 88 0e 00 00 	mov    %rax,0xe88(%rdx)
        vkGetQueueCheckpointDataNV = PFN_vkGetQueueCheckpointDataNV( vkGetDeviceProcAddr( device, "vkGetQueueCheckpointDataNV" ) );
   15f61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f65:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15f69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15f6d:	48 8d 0d 8b 75 01 00 	lea    0x1758b(%rip),%rcx        # 2d4ff <_ZNSt8__detailL19__atomic_spin_countE+0x2d0b>
   15f74:	48 89 ce             	mov    %rcx,%rsi
   15f77:	48 89 c7             	mov    %rax,%rdi
   15f7a:	ff d2                	call   *%rdx
   15f7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15f80:	48 89 82 90 0e 00 00 	mov    %rax,0xe90(%rdx)
          PFN_vkGetGeneratedCommandsMemoryRequirementsNV( vkGetDeviceProcAddr( device, "vkGetGeneratedCommandsMemoryRequirementsNV" ) );
   15f87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f8b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15f8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15f93:	48 8d 0d 86 75 01 00 	lea    0x17586(%rip),%rcx        # 2d520 <_ZNSt8__detailL19__atomic_spin_countE+0x2d2c>
   15f9a:	48 89 ce             	mov    %rcx,%rsi
   15f9d:	48 89 c7             	mov    %rax,%rdi
   15fa0:	ff d2                	call   *%rdx
        vkGetGeneratedCommandsMemoryRequirementsNV =
   15fa2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15fa6:	48 89 82 98 0e 00 00 	mov    %rax,0xe98(%rdx)
        vkCmdPreprocessGeneratedCommandsNV = PFN_vkCmdPreprocessGeneratedCommandsNV( vkGetDeviceProcAddr( device, "vkCmdPreprocessGeneratedCommandsNV" ) );
   15fad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15fb1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15fb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15fb9:	48 8d 0d 90 75 01 00 	lea    0x17590(%rip),%rcx        # 2d550 <_ZNSt8__detailL19__atomic_spin_countE+0x2d5c>
   15fc0:	48 89 ce             	mov    %rcx,%rsi
   15fc3:	48 89 c7             	mov    %rax,%rdi
   15fc6:	ff d2                	call   *%rdx
   15fc8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15fcc:	48 89 82 a0 0e 00 00 	mov    %rax,0xea0(%rdx)
        vkCmdExecuteGeneratedCommandsNV    = PFN_vkCmdExecuteGeneratedCommandsNV( vkGetDeviceProcAddr( device, "vkCmdExecuteGeneratedCommandsNV" ) );
   15fd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15fd7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15fdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15fdf:	48 8d 0d 92 75 01 00 	lea    0x17592(%rip),%rcx        # 2d578 <_ZNSt8__detailL19__atomic_spin_countE+0x2d84>
   15fe6:	48 89 ce             	mov    %rcx,%rsi
   15fe9:	48 89 c7             	mov    %rax,%rdi
   15fec:	ff d2                	call   *%rdx
   15fee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15ff2:	48 89 82 a8 0e 00 00 	mov    %rax,0xea8(%rdx)
        vkCmdBindPipelineShaderGroupNV     = PFN_vkCmdBindPipelineShaderGroupNV( vkGetDeviceProcAddr( device, "vkCmdBindPipelineShaderGroupNV" ) );
   15ff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ffd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16001:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16005:	48 8d 0d 8c 75 01 00 	lea    0x1758c(%rip),%rcx        # 2d598 <_ZNSt8__detailL19__atomic_spin_countE+0x2da4>
   1600c:	48 89 ce             	mov    %rcx,%rsi
   1600f:	48 89 c7             	mov    %rax,%rdi
   16012:	ff d2                	call   *%rdx
   16014:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16018:	48 89 82 b0 0e 00 00 	mov    %rax,0xeb0(%rdx)
        vkCreateIndirectCommandsLayoutNV   = PFN_vkCreateIndirectCommandsLayoutNV( vkGetDeviceProcAddr( device, "vkCreateIndirectCommandsLayoutNV" ) );
   1601f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16023:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16027:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1602b:	48 8d 0d 86 75 01 00 	lea    0x17586(%rip),%rcx        # 2d5b8 <_ZNSt8__detailL19__atomic_spin_countE+0x2dc4>
   16032:	48 89 ce             	mov    %rcx,%rsi
   16035:	48 89 c7             	mov    %rax,%rdi
   16038:	ff d2                	call   *%rdx
   1603a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1603e:	48 89 82 b8 0e 00 00 	mov    %rax,0xeb8(%rdx)
        vkDestroyIndirectCommandsLayoutNV  = PFN_vkDestroyIndirectCommandsLayoutNV( vkGetDeviceProcAddr( device, "vkDestroyIndirectCommandsLayoutNV" ) );
   16045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16049:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1604d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16051:	48 8d 0d 88 75 01 00 	lea    0x17588(%rip),%rcx        # 2d5e0 <_ZNSt8__detailL19__atomic_spin_countE+0x2dec>
   16058:	48 89 ce             	mov    %rcx,%rsi
   1605b:	48 89 c7             	mov    %rax,%rdi
   1605e:	ff d2                	call   *%rdx
   16060:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16064:	48 89 82 c0 0e 00 00 	mov    %rax,0xec0(%rdx)
        vkGetMemoryRemoteAddressNV = PFN_vkGetMemoryRemoteAddressNV( vkGetDeviceProcAddr( device, "vkGetMemoryRemoteAddressNV" ) );
   1606b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1606f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16073:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16077:	48 8d 0d 84 75 01 00 	lea    0x17584(%rip),%rcx        # 2d602 <_ZNSt8__detailL19__atomic_spin_countE+0x2e0e>
   1607e:	48 89 ce             	mov    %rcx,%rsi
   16081:	48 89 c7             	mov    %rax,%rdi
   16084:	ff d2                	call   *%rdx
   16086:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1608a:	48 89 82 c8 0e 00 00 	mov    %rax,0xec8(%rdx)
        vkCmdSetFragmentShadingRateEnumNV = PFN_vkCmdSetFragmentShadingRateEnumNV( vkGetDeviceProcAddr( device, "vkCmdSetFragmentShadingRateEnumNV" ) );
   16091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16095:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16099:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1609d:	48 8d 0d 7c 75 01 00 	lea    0x1757c(%rip),%rcx        # 2d620 <_ZNSt8__detailL19__atomic_spin_countE+0x2e2c>
   160a4:	48 89 ce             	mov    %rcx,%rsi
   160a7:	48 89 c7             	mov    %rax,%rdi
   160aa:	ff d2                	call   *%rdx
   160ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   160b0:	48 89 82 d8 0e 00 00 	mov    %rax,0xed8(%rdx)
        vkCmdDrawMeshTasksNV              = PFN_vkCmdDrawMeshTasksNV( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksNV" ) );
   160b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160bb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   160bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   160c3:	48 8d 0d 78 75 01 00 	lea    0x17578(%rip),%rcx        # 2d642 <_ZNSt8__detailL19__atomic_spin_countE+0x2e4e>
   160ca:	48 89 ce             	mov    %rcx,%rsi
   160cd:	48 89 c7             	mov    %rax,%rdi
   160d0:	ff d2                	call   *%rdx
   160d2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   160d6:	48 89 82 e0 0e 00 00 	mov    %rax,0xee0(%rdx)
        vkCmdDrawMeshTasksIndirectNV      = PFN_vkCmdDrawMeshTasksIndirectNV( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectNV" ) );
   160dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160e1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   160e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   160e9:	48 8d 0d 67 75 01 00 	lea    0x17567(%rip),%rcx        # 2d657 <_ZNSt8__detailL19__atomic_spin_countE+0x2e63>
   160f0:	48 89 ce             	mov    %rcx,%rsi
   160f3:	48 89 c7             	mov    %rax,%rdi
   160f6:	ff d2                	call   *%rdx
   160f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   160fc:	48 89 82 e8 0e 00 00 	mov    %rax,0xee8(%rdx)
        vkCmdDrawMeshTasksIndirectCountNV = PFN_vkCmdDrawMeshTasksIndirectCountNV( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectCountNV" ) );
   16103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16107:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1610b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1610f:	48 8d 0d 62 75 01 00 	lea    0x17562(%rip),%rcx        # 2d678 <_ZNSt8__detailL19__atomic_spin_countE+0x2e84>
   16116:	48 89 ce             	mov    %rcx,%rsi
   16119:	48 89 c7             	mov    %rax,%rdi
   1611c:	ff d2                	call   *%rdx
   1611e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16122:	48 89 82 f0 0e 00 00 	mov    %rax,0xef0(%rdx)
        vkCreateOpticalFlowSessionNV    = PFN_vkCreateOpticalFlowSessionNV( vkGetDeviceProcAddr( device, "vkCreateOpticalFlowSessionNV" ) );
   16129:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1612d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16131:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16135:	48 8d 0d 5e 75 01 00 	lea    0x1755e(%rip),%rcx        # 2d69a <_ZNSt8__detailL19__atomic_spin_countE+0x2ea6>
   1613c:	48 89 ce             	mov    %rcx,%rsi
   1613f:	48 89 c7             	mov    %rax,%rdi
   16142:	ff d2                	call   *%rdx
   16144:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16148:	48 89 82 f8 0e 00 00 	mov    %rax,0xef8(%rdx)
        vkDestroyOpticalFlowSessionNV   = PFN_vkDestroyOpticalFlowSessionNV( vkGetDeviceProcAddr( device, "vkDestroyOpticalFlowSessionNV" ) );
   1614f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16153:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16157:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1615b:	48 8d 0d 55 75 01 00 	lea    0x17555(%rip),%rcx        # 2d6b7 <_ZNSt8__detailL19__atomic_spin_countE+0x2ec3>
   16162:	48 89 ce             	mov    %rcx,%rsi
   16165:	48 89 c7             	mov    %rax,%rdi
   16168:	ff d2                	call   *%rdx
   1616a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1616e:	48 89 82 00 0f 00 00 	mov    %rax,0xf00(%rdx)
        vkBindOpticalFlowSessionImageNV = PFN_vkBindOpticalFlowSessionImageNV( vkGetDeviceProcAddr( device, "vkBindOpticalFlowSessionImageNV" ) );
   16175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16179:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1617d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16181:	48 8d 0d 50 75 01 00 	lea    0x17550(%rip),%rcx        # 2d6d8 <_ZNSt8__detailL19__atomic_spin_countE+0x2ee4>
   16188:	48 89 ce             	mov    %rcx,%rsi
   1618b:	48 89 c7             	mov    %rax,%rdi
   1618e:	ff d2                	call   *%rdx
   16190:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16194:	48 89 82 08 0f 00 00 	mov    %rax,0xf08(%rdx)
        vkCmdOpticalFlowExecuteNV       = PFN_vkCmdOpticalFlowExecuteNV( vkGetDeviceProcAddr( device, "vkCmdOpticalFlowExecuteNV" ) );
   1619b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1619f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   161a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   161a7:	48 8d 0d 4a 75 01 00 	lea    0x1754a(%rip),%rcx        # 2d6f8 <_ZNSt8__detailL19__atomic_spin_countE+0x2f04>
   161ae:	48 89 ce             	mov    %rcx,%rsi
   161b1:	48 89 c7             	mov    %rax,%rdi
   161b4:	ff d2                	call   *%rdx
   161b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   161ba:	48 89 82 10 0f 00 00 	mov    %rax,0xf10(%rdx)
        vkCreateAccelerationStructureNV  = PFN_vkCreateAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkCreateAccelerationStructureNV" ) );
   161c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   161c5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   161c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   161cd:	48 8d 0d 44 75 01 00 	lea    0x17544(%rip),%rcx        # 2d718 <_ZNSt8__detailL19__atomic_spin_countE+0x2f24>
   161d4:	48 89 ce             	mov    %rcx,%rsi
   161d7:	48 89 c7             	mov    %rax,%rdi
   161da:	ff d2                	call   *%rdx
   161dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   161e0:	48 89 82 18 0f 00 00 	mov    %rax,0xf18(%rdx)
        vkDestroyAccelerationStructureNV = PFN_vkDestroyAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkDestroyAccelerationStructureNV" ) );
   161e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   161eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   161ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   161f3:	48 8d 0d 3e 75 01 00 	lea    0x1753e(%rip),%rcx        # 2d738 <_ZNSt8__detailL19__atomic_spin_countE+0x2f44>
   161fa:	48 89 ce             	mov    %rcx,%rsi
   161fd:	48 89 c7             	mov    %rax,%rdi
   16200:	ff d2                	call   *%rdx
   16202:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16206:	48 89 82 20 0f 00 00 	mov    %rax,0xf20(%rdx)
          PFN_vkGetAccelerationStructureMemoryRequirementsNV( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureMemoryRequirementsNV" ) );
   1620d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16211:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16215:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16219:	48 8d 0d 40 75 01 00 	lea    0x17540(%rip),%rcx        # 2d760 <_ZNSt8__detailL19__atomic_spin_countE+0x2f6c>
   16220:	48 89 ce             	mov    %rcx,%rsi
   16223:	48 89 c7             	mov    %rax,%rdi
   16226:	ff d2                	call   *%rdx
        vkGetAccelerationStructureMemoryRequirementsNV =
   16228:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1622c:	48 89 82 28 0f 00 00 	mov    %rax,0xf28(%rdx)
        vkBindAccelerationStructureMemoryNV = PFN_vkBindAccelerationStructureMemoryNV( vkGetDeviceProcAddr( device, "vkBindAccelerationStructureMemoryNV" ) );
   16233:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16237:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1623b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1623f:	48 8d 0d 4a 75 01 00 	lea    0x1754a(%rip),%rcx        # 2d790 <_ZNSt8__detailL19__atomic_spin_countE+0x2f9c>
   16246:	48 89 ce             	mov    %rcx,%rsi
   16249:	48 89 c7             	mov    %rax,%rdi
   1624c:	ff d2                	call   *%rdx
   1624e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16252:	48 89 82 30 0f 00 00 	mov    %rax,0xf30(%rdx)
        vkCmdBuildAccelerationStructureNV   = PFN_vkCmdBuildAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkCmdBuildAccelerationStructureNV" ) );
   16259:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1625d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16261:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16265:	48 8d 0d 4c 75 01 00 	lea    0x1754c(%rip),%rcx        # 2d7b8 <_ZNSt8__detailL19__atomic_spin_countE+0x2fc4>
   1626c:	48 89 ce             	mov    %rcx,%rsi
   1626f:	48 89 c7             	mov    %rax,%rdi
   16272:	ff d2                	call   *%rdx
   16274:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16278:	48 89 82 38 0f 00 00 	mov    %rax,0xf38(%rdx)
        vkCmdCopyAccelerationStructureNV    = PFN_vkCmdCopyAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkCmdCopyAccelerationStructureNV" ) );
   1627f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16283:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16287:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1628b:	48 8d 0d 4e 75 01 00 	lea    0x1754e(%rip),%rcx        # 2d7e0 <_ZNSt8__detailL19__atomic_spin_countE+0x2fec>
   16292:	48 89 ce             	mov    %rcx,%rsi
   16295:	48 89 c7             	mov    %rax,%rdi
   16298:	ff d2                	call   *%rdx
   1629a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1629e:	48 89 82 40 0f 00 00 	mov    %rax,0xf40(%rdx)
        vkCmdTraceRaysNV                    = PFN_vkCmdTraceRaysNV( vkGetDeviceProcAddr( device, "vkCmdTraceRaysNV" ) );
   162a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   162a9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   162ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   162b1:	48 8d 0d 49 75 01 00 	lea    0x17549(%rip),%rcx        # 2d801 <_ZNSt8__detailL19__atomic_spin_countE+0x300d>
   162b8:	48 89 ce             	mov    %rcx,%rsi
   162bb:	48 89 c7             	mov    %rax,%rdi
   162be:	ff d2                	call   *%rdx
   162c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   162c4:	48 89 82 48 0f 00 00 	mov    %rax,0xf48(%rdx)
        vkCreateRayTracingPipelinesNV       = PFN_vkCreateRayTracingPipelinesNV( vkGetDeviceProcAddr( device, "vkCreateRayTracingPipelinesNV" ) );
   162cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   162cf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   162d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   162d7:	48 8d 0d 34 75 01 00 	lea    0x17534(%rip),%rcx        # 2d812 <_ZNSt8__detailL19__atomic_spin_countE+0x301e>
   162de:	48 89 ce             	mov    %rcx,%rsi
   162e1:	48 89 c7             	mov    %rax,%rdi
   162e4:	ff d2                	call   *%rdx
   162e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   162ea:	48 89 82 50 0f 00 00 	mov    %rax,0xf50(%rdx)
        vkGetRayTracingShaderGroupHandlesNV = PFN_vkGetRayTracingShaderGroupHandlesNV( vkGetDeviceProcAddr( device, "vkGetRayTracingShaderGroupHandlesNV" ) );
   162f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   162f5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   162f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   162fd:	48 8d 0d 2c 75 01 00 	lea    0x1752c(%rip),%rcx        # 2d830 <_ZNSt8__detailL19__atomic_spin_countE+0x303c>
   16304:	48 89 ce             	mov    %rcx,%rsi
   16307:	48 89 c7             	mov    %rax,%rdi
   1630a:	ff d2                	call   *%rdx
   1630c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16310:	48 89 82 58 0f 00 00 	mov    %rax,0xf58(%rdx)
        if ( !vkGetRayTracingShaderGroupHandlesKHR )
   16317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1631b:	48 8b 80 28 0d 00 00 	mov    0xd28(%rax),%rax
   16322:	48 85 c0             	test   %rax,%rax
   16325:	75 16                	jne    1633d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6aef>
          vkGetRayTracingShaderGroupHandlesKHR = vkGetRayTracingShaderGroupHandlesNV;
   16327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1632b:	48 8b 90 58 0f 00 00 	mov    0xf58(%rax),%rdx
   16332:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16336:	48 89 90 28 0d 00 00 	mov    %rdx,0xd28(%rax)
        vkGetAccelerationStructureHandleNV = PFN_vkGetAccelerationStructureHandleNV( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureHandleNV" ) );
   1633d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16341:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16345:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16349:	48 8d 0d 08 75 01 00 	lea    0x17508(%rip),%rcx        # 2d858 <_ZNSt8__detailL19__atomic_spin_countE+0x3064>
   16350:	48 89 ce             	mov    %rcx,%rsi
   16353:	48 89 c7             	mov    %rax,%rdi
   16356:	ff d2                	call   *%rdx
   16358:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1635c:	48 89 82 60 0f 00 00 	mov    %rax,0xf60(%rdx)
          PFN_vkCmdWriteAccelerationStructuresPropertiesNV( vkGetDeviceProcAddr( device, "vkCmdWriteAccelerationStructuresPropertiesNV" ) );
   16363:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16367:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1636b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1636f:	48 8d 0d 0a 75 01 00 	lea    0x1750a(%rip),%rcx        # 2d880 <_ZNSt8__detailL19__atomic_spin_countE+0x308c>
   16376:	48 89 ce             	mov    %rcx,%rsi
   16379:	48 89 c7             	mov    %rax,%rdi
   1637c:	ff d2                	call   *%rdx
        vkCmdWriteAccelerationStructuresPropertiesNV =
   1637e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16382:	48 89 82 68 0f 00 00 	mov    %rax,0xf68(%rdx)
        vkCompileDeferredNV = PFN_vkCompileDeferredNV( vkGetDeviceProcAddr( device, "vkCompileDeferredNV" ) );
   16389:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1638d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16391:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16395:	48 8d 0d 11 75 01 00 	lea    0x17511(%rip),%rcx        # 2d8ad <_ZNSt8__detailL19__atomic_spin_countE+0x30b9>
   1639c:	48 89 ce             	mov    %rcx,%rsi
   1639f:	48 89 c7             	mov    %rax,%rdi
   163a2:	ff d2                	call   *%rdx
   163a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   163a8:	48 89 82 70 0f 00 00 	mov    %rax,0xf70(%rdx)
        vkCmdSetExclusiveScissorNV = PFN_vkCmdSetExclusiveScissorNV( vkGetDeviceProcAddr( device, "vkCmdSetExclusiveScissorNV" ) );
   163af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   163b3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   163b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   163bb:	48 8d 0d ff 74 01 00 	lea    0x174ff(%rip),%rcx        # 2d8c1 <_ZNSt8__detailL19__atomic_spin_countE+0x30cd>
   163c2:	48 89 ce             	mov    %rcx,%rsi
   163c5:	48 89 c7             	mov    %rax,%rdi
   163c8:	ff d2                	call   *%rdx
   163ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   163ce:	48 89 82 78 0f 00 00 	mov    %rax,0xf78(%rdx)
        vkCmdBindShadingRateImageNV = PFN_vkCmdBindShadingRateImageNV( vkGetDeviceProcAddr( device, "vkCmdBindShadingRateImageNV" ) );
   163d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   163d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   163dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   163e1:	48 8d 0d f4 74 01 00 	lea    0x174f4(%rip),%rcx        # 2d8dc <_ZNSt8__detailL19__atomic_spin_countE+0x30e8>
   163e8:	48 89 ce             	mov    %rcx,%rsi
   163eb:	48 89 c7             	mov    %rax,%rdi
   163ee:	ff d2                	call   *%rdx
   163f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   163f4:	48 89 82 80 0f 00 00 	mov    %rax,0xf80(%rdx)
          PFN_vkCmdSetViewportShadingRatePaletteNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportShadingRatePaletteNV" ) );
   163fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   163ff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16403:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16407:	48 8d 0d ea 74 01 00 	lea    0x174ea(%rip),%rcx        # 2d8f8 <_ZNSt8__detailL19__atomic_spin_countE+0x3104>
   1640e:	48 89 ce             	mov    %rcx,%rsi
   16411:	48 89 c7             	mov    %rax,%rdi
   16414:	ff d2                	call   *%rdx
        vkCmdSetViewportShadingRatePaletteNV =
   16416:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1641a:	48 89 82 88 0f 00 00 	mov    %rax,0xf88(%rdx)
        vkCmdSetCoarseSampleOrderNV = PFN_vkCmdSetCoarseSampleOrderNV( vkGetDeviceProcAddr( device, "vkCmdSetCoarseSampleOrderNV" ) );
   16421:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16425:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16429:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1642d:	48 8d 0d e9 74 01 00 	lea    0x174e9(%rip),%rcx        # 2d91d <_ZNSt8__detailL19__atomic_spin_countE+0x3129>
   16434:	48 89 ce             	mov    %rcx,%rsi
   16437:	48 89 c7             	mov    %rax,%rdi
   1643a:	ff d2                	call   *%rdx
   1643c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16440:	48 89 82 90 0f 00 00 	mov    %rax,0xf90(%rdx)
        vkGetFramebufferTilePropertiesQCOM = PFN_vkGetFramebufferTilePropertiesQCOM( vkGetDeviceProcAddr( device, "vkGetFramebufferTilePropertiesQCOM" ) );
   16447:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1644b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1644f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16453:	48 8d 0d e6 74 01 00 	lea    0x174e6(%rip),%rcx        # 2d940 <_ZNSt8__detailL19__atomic_spin_countE+0x314c>
   1645a:	48 89 ce             	mov    %rcx,%rsi
   1645d:	48 89 c7             	mov    %rax,%rdi
   16460:	ff d2                	call   *%rdx
   16462:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16466:	48 89 82 98 0f 00 00 	mov    %rax,0xf98(%rdx)
          PFN_vkGetDynamicRenderingTilePropertiesQCOM( vkGetDeviceProcAddr( device, "vkGetDynamicRenderingTilePropertiesQCOM" ) );
   1646d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16471:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16475:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16479:	48 8d 0d e8 74 01 00 	lea    0x174e8(%rip),%rcx        # 2d968 <_ZNSt8__detailL19__atomic_spin_countE+0x3174>
   16480:	48 89 ce             	mov    %rcx,%rsi
   16483:	48 89 c7             	mov    %rax,%rdi
   16486:	ff d2                	call   *%rdx
        vkGetDynamicRenderingTilePropertiesQCOM =
   16488:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1648c:	48 89 82 a0 0f 00 00 	mov    %rax,0xfa0(%rdx)
          PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE( vkGetDeviceProcAddr( device, "vkGetDescriptorSetLayoutHostMappingInfoVALVE" ) );
   16493:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16497:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1649b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1649f:	48 8d 0d ea 74 01 00 	lea    0x174ea(%rip),%rcx        # 2d990 <_ZNSt8__detailL19__atomic_spin_countE+0x319c>
   164a6:	48 89 ce             	mov    %rcx,%rsi
   164a9:	48 89 c7             	mov    %rax,%rdi
   164ac:	ff d2                	call   *%rdx
        vkGetDescriptorSetLayoutHostMappingInfoVALVE =
   164ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   164b2:	48 89 82 a8 0f 00 00 	mov    %rax,0xfa8(%rdx)
        vkGetDescriptorSetHostMappingVALVE = PFN_vkGetDescriptorSetHostMappingVALVE( vkGetDeviceProcAddr( device, "vkGetDescriptorSetHostMappingVALVE" ) );
   164b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   164bd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   164c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   164c5:	48 8d 0d f4 74 01 00 	lea    0x174f4(%rip),%rcx        # 2d9c0 <_ZNSt8__detailL19__atomic_spin_countE+0x31cc>
   164cc:	48 89 ce             	mov    %rcx,%rsi
   164cf:	48 89 c7             	mov    %rax,%rdi
   164d2:	ff d2                	call   *%rdx
   164d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   164d8:	48 89 82 b0 0f 00 00 	mov    %rax,0xfb0(%rdx)
      }
   164df:	90                   	nop
   164e0:	c9                   	leave
   164e1:	c3                   	ret

00000000000164e2 <_ZNK2vk4raii8InstancedeEv>:
      VULKAN_HPP_NAMESPACE::Instance const & operator*() const VULKAN_HPP_NOEXCEPT
   164e2:	55                   	push   %rbp
   164e3:	48 89 e5             	mov    %rsp,%rbp
   164e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_instance;
   164ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   164ee:	5d                   	pop    %rbp
   164ef:	c3                   	ret

00000000000164f0 <_ZN2vk14PhysicalDeviceC1Ev>:
    VULKAN_HPP_CONSTEXPR PhysicalDevice() = default;
   164f0:	55                   	push   %rbp
   164f1:	48 89 e5             	mov    %rsp,%rbp
   164f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   164f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   164fc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   16503:	90                   	nop
   16504:	5d                   	pop    %rbp
   16505:	c3                   	ret

0000000000016506 <_ZN2vk4raii14PhysicalDeviceC1ERKNS0_8InstanceEP18VkPhysicalDevice_T>:
      PhysicalDevice( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const & instance, VkPhysicalDevice physicalDevice )
   16506:	55                   	push   %rbp
   16507:	48 89 e5             	mov    %rsp,%rbp
   1650a:	48 83 ec 20          	sub    $0x20,%rsp
   1650e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16512:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16516:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        : m_physicalDevice( physicalDevice ), m_dispatcher( instance.getDispatcher() )
   1651a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1651e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16522:	48 89 d6             	mov    %rdx,%rsi
   16525:	48 89 c7             	mov    %rax,%rdi
   16528:	e8 f5 92 ff ff       	call   f822 <_ZN2vk14PhysicalDeviceC1EP18VkPhysicalDevice_T>
   1652d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16531:	48 89 c7             	mov    %rax,%rdi
   16534:	e8 4f 2f ff ff       	call   9488 <_ZNK2vk4raii8Instance13getDispatcherEv>
   16539:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1653d:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   16541:	90                   	nop
   16542:	c9                   	leave
   16543:	c3                   	ret

0000000000016544 <_ZN2vk4raii14PhysicalDeviceC1ERKS1_>:
      PhysicalDevice( PhysicalDevice const & rhs ) : m_physicalDevice( rhs.m_physicalDevice ), m_dispatcher( rhs.m_dispatcher ) {}
   16544:	55                   	push   %rbp
   16545:	48 89 e5             	mov    %rsp,%rbp
   16548:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1654c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16550:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16554:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16558:	48 8b 12             	mov    (%rdx),%rdx
   1655b:	48 89 10             	mov    %rdx,(%rax)
   1655e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16562:	48 8b 50 08          	mov    0x8(%rax),%rdx
   16566:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1656a:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1656e:	90                   	nop
   1656f:	5d                   	pop    %rbp
   16570:	c3                   	ret
   16571:	90                   	nop

0000000000016572 <_ZN2vk4raii14PhysicalDeviceC1EOS1_>:
      PhysicalDevice( PhysicalDevice && rhs ) VULKAN_HPP_NOEXCEPT
   16572:	55                   	push   %rbp
   16573:	48 89 e5             	mov    %rsp,%rbp
   16576:	48 83 ec 30          	sub    $0x30,%rsp
   1657a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1657e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        : m_physicalDevice( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_physicalDevice, {} ) )
   16582:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   16589:	00 
   1658a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1658e:	48 89 c7             	mov    %rax,%rdi
   16591:	e8 5a ff ff ff       	call   164f0 <_ZN2vk14PhysicalDeviceC1Ev>
   16596:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1659a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   1659e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   165a2:	48 89 c7             	mov    %rax,%rdi
   165a5:	e8 73 21 00 00       	call   1871d <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   165aa:	48 89 c2             	mov    %rax,%rdx
   165ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   165b1:	48 89 d6             	mov    %rdx,%rsi
   165b4:	48 89 c7             	mov    %rax,%rdi
   165b7:	e8 6f 21 00 00       	call   1872b <_ZSt8exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>
   165bc:	90                   	nop
   165bd:	48 89 c2             	mov    %rax,%rdx
        : m_physicalDevice( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_physicalDevice, {} ) )
   165c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   165c4:	48 89 10             	mov    %rdx,(%rax)
        , m_dispatcher( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_dispatcher, nullptr ) )
   165c7:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   165ce:	00 
   165cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   165d3:	48 83 c0 08          	add    $0x8,%rax
   165d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   165db:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   165df:	48 89 c7             	mov    %rax,%rdi
   165e2:	e8 74 21 00 00       	call   1875b <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   165e7:	48 89 c2             	mov    %rax,%rdx
   165ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   165ee:	48 89 d6             	mov    %rdx,%rsi
   165f1:	48 89 c7             	mov    %rax,%rdi
   165f4:	e8 70 21 00 00       	call   18769 <_ZSt8exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>
   165f9:	90                   	nop
        , m_dispatcher( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_dispatcher, nullptr ) )
   165fa:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   165fe:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   16602:	90                   	nop
   16603:	c9                   	leave
   16604:	c3                   	ret
   16605:	90                   	nop

0000000000016606 <_ZNK2vk4raii14PhysicalDevicedeEv>:
      VULKAN_HPP_NAMESPACE::PhysicalDevice const & operator*() const VULKAN_HPP_NOEXCEPT
   16606:	55                   	push   %rbp
   16607:	48 89 e5             	mov    %rsp,%rbp
   1660a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_physicalDevice;
   1660e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   16612:	5d                   	pop    %rbp
   16613:	c3                   	ret

0000000000016614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
   16614:	55                   	push   %rbp
   16615:	48 89 e5             	mov    %rsp,%rbp
   16618:	48 83 ec 10          	sub    $0x10,%rsp
   1661c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
   16620:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16624:	48 8b 40 08          	mov    0x8(%rax),%rax
   16628:	48 89 c7             	mov    %rax,%rdi
   1662b:	e8 22 ff fe ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   16630:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   16636:	74 28                	je     16660 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv+0x4c>
   16638:	48 8d 05 59 74 01 00 	lea    0x17459(%rip),%rax        # 2da98 <_ZNSt8__detailL19__atomic_spin_countE+0x32a4>
   1663f:	48 89 c1             	mov    %rax,%rcx
   16642:	ba 0a 0b 00 00       	mov    $0xb0a,%edx
   16647:	48 8d 05 ea 73 01 00 	lea    0x173ea(%rip),%rax        # 2da38 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
   1664e:	48 89 c6             	mov    %rax,%rsi
   16651:	48 8d 05 08 74 01 00 	lea    0x17408(%rip),%rax        # 2da60 <_ZNSt8__detailL19__atomic_spin_countE+0x326c>
   16658:	48 89 c7             	mov    %rax,%rdi
   1665b:	e8 b0 ea fe ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
   16660:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16664:	48 8b 40 08          	mov    0x8(%rax),%rax
      }
   16668:	c9                   	leave
   16669:	c3                   	ret

000000000001666a <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   1666a:	55                   	push   %rbp
   1666b:	48 89 e5             	mov    %rsp,%rbp
   1666e:	48 83 ec 10          	sub    $0x10,%rsp
   16672:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16676:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1667a:	48 89 c7             	mov    %rax,%rdi
   1667d:	e8 16 11 00 00       	call   17798 <_ZNSaIN2vk4raii14PhysicalDeviceEED1Ev>
   16682:	90                   	nop
   16683:	c9                   	leave
   16684:	c3                   	ret
   16685:	90                   	nop

0000000000016686 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>:
      _Vector_base() = default;
   16686:	55                   	push   %rbp
   16687:	48 89 e5             	mov    %rsp,%rbp
   1668a:	48 83 ec 10          	sub    $0x10,%rsp
   1668e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16692:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16696:	48 89 c7             	mov    %rax,%rdi
   16699:	e8 d2 10 00 00       	call   17770 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implC1Ev>
   1669e:	90                   	nop
   1669f:	c9                   	leave
   166a0:	c3                   	ret
   166a1:	90                   	nop

00000000000166a2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>:
      vector() = default;
   166a2:	55                   	push   %rbp
   166a3:	48 89 e5             	mov    %rsp,%rbp
   166a6:	48 83 ec 10          	sub    $0x10,%rsp
   166aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   166ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166b2:	48 89 c7             	mov    %rax,%rdi
   166b5:	e8 cc ff ff ff       	call   16686 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>
   166ba:	90                   	nop
   166bb:	c9                   	leave
   166bc:	c3                   	ret
   166bd:	90                   	nop

00000000000166be <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   166be:	55                   	push   %rbp
   166bf:	48 89 e5             	mov    %rsp,%rbp
   166c2:	48 83 ec 10          	sub    $0x10,%rsp
   166c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   166ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166ce:	48 89 c7             	mov    %rax,%rdi
   166d1:	e8 60 11 00 00       	call   17836 <_ZNSaIP18VkPhysicalDevice_TED1Ev>
   166d6:	90                   	nop
   166d7:	c9                   	leave
   166d8:	c3                   	ret

00000000000166d9 <_ZN9__gnu_cxxeqIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    [[nodiscard]]
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   166d9:	55                   	push   %rbp
   166da:	48 89 e5             	mov    %rsp,%rbp
   166dd:	53                   	push   %rbx
   166de:	48 83 ec 18          	sub    $0x18,%rsp
   166e2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   166e6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
   166ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   166ee:	48 89 c7             	mov    %rax,%rdi
   166f1:	e8 1e 00 00 00       	call   16714 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
   166f6:	48 8b 18             	mov    (%rax),%rbx
   166f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   166fd:	48 89 c7             	mov    %rax,%rdi
   16700:	e8 0f 00 00 00       	call   16714 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
   16705:	48 8b 00             	mov    (%rax),%rax
   16708:	48 39 c3             	cmp    %rax,%rbx
   1670b:	0f 94 c0             	sete   %al
   1670e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16712:	c9                   	leave
   16713:	c3                   	ret

0000000000016714 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   16714:	55                   	push   %rbp
   16715:	48 89 e5             	mov    %rsp,%rbp
   16718:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1671c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16720:	5d                   	pop    %rbp
   16721:	c3                   	ret

0000000000016722 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   16722:	55                   	push   %rbp
   16723:	48 89 e5             	mov    %rsp,%rbp
   16726:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1672a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1672e:	48 8b 00             	mov    (%rax),%rax
   16731:	5d                   	pop    %rbp
   16732:	c3                   	ret
   16733:	90                   	nop

0000000000016734 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE>:
      PhysicalDevices( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const & instance )
   16734:	55                   	push   %rbp
   16735:	48 89 e5             	mov    %rsp,%rbp
   16738:	41 54                	push   %r12
   1673a:	53                   	push   %rbx
   1673b:	48 83 ec 70          	sub    $0x70,%rsp
   1673f:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   16743:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
      {
   16747:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1674b:	48 89 c7             	mov    %rax,%rdi
   1674e:	e8 4f ff ff ff       	call   166a2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>
        VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * dispatcher = instance.getDispatcher();
   16753:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   16757:	48 89 c7             	mov    %rax,%rdi
   1675a:	e8 29 2d ff ff       	call   9488 <_ZNK2vk4raii8Instance13getDispatcherEv>
   1675f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        std::vector<VkPhysicalDevice>                                               physicalDevices;
   16763:	66 0f ef c0          	pxor   %xmm0,%xmm0
   16767:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
   1676b:	66 0f d6 45 c0       	movq   %xmm0,-0x40(%rbp)
            dispatcher->vkEnumeratePhysicalDevices( static_cast<VkInstance>( *instance ), &physicalDeviceCount, nullptr ) );
   16770:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16774:	48 8b 58 18          	mov    0x18(%rax),%rbx
   16778:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1677c:	48 89 c7             	mov    %rax,%rdi
   1677f:	e8 5e fd ff ff       	call   164e2 <_ZNK2vk4raii8InstancedeEv>
   16784:	48 89 c7             	mov    %rax,%rdi
   16787:	e8 86 29 ff ff       	call   9112 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   1678c:	48 89 c1             	mov    %rax,%rcx
   1678f:	48 8d 45 ac          	lea    -0x54(%rbp),%rax
   16793:	ba 00 00 00 00       	mov    $0x0,%edx
   16798:	48 89 c6             	mov    %rax,%rsi
   1679b:	48 89 cf             	mov    %rcx,%rdi
   1679e:	ff d3                	call   *%rbx
   167a0:	89 45 ec             	mov    %eax,-0x14(%rbp)
          if ( ( result == VULKAN_HPP_NAMESPACE::Result::eSuccess ) && physicalDeviceCount )
   167a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   167a7:	75 5b                	jne    16804 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0xd0>
   167a9:	8b 45 ac             	mov    -0x54(%rbp),%eax
   167ac:	85 c0                	test   %eax,%eax
   167ae:	74 54                	je     16804 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0xd0>
            physicalDevices.resize( physicalDeviceCount );
   167b0:	8b 45 ac             	mov    -0x54(%rbp),%eax
   167b3:	89 c2                	mov    %eax,%edx
   167b5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   167b9:	48 89 d6             	mov    %rdx,%rsi
   167bc:	48 89 c7             	mov    %rax,%rdi
   167bf:	e8 10 11 00 00       	call   178d4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm>
              dispatcher->vkEnumeratePhysicalDevices( static_cast<VkInstance>( *instance ), &physicalDeviceCount, physicalDevices.data() ) );
   167c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   167c8:	48 8b 58 18          	mov    0x18(%rax),%rbx
   167cc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   167d0:	48 89 c7             	mov    %rax,%rdi
   167d3:	e8 82 11 00 00       	call   1795a <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>
   167d8:	49 89 c4             	mov    %rax,%r12
   167db:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   167df:	48 89 c7             	mov    %rax,%rdi
   167e2:	e8 fb fc ff ff       	call   164e2 <_ZNK2vk4raii8InstancedeEv>
   167e7:	48 89 c7             	mov    %rax,%rdi
   167ea:	e8 23 29 ff ff       	call   9112 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   167ef:	48 89 c1             	mov    %rax,%rcx
   167f2:	48 8d 45 ac          	lea    -0x54(%rbp),%rax
   167f6:	4c 89 e2             	mov    %r12,%rdx
   167f9:	48 89 c6             	mov    %rax,%rsi
   167fc:	48 89 cf             	mov    %rcx,%rdi
   167ff:	ff d3                	call   *%rbx
   16801:	89 45 ec             	mov    %eax,-0x14(%rbp)
        } while ( result == VULKAN_HPP_NAMESPACE::Result::eIncomplete );
   16804:	83 7d ec 05          	cmpl   $0x5,-0x14(%rbp)
   16808:	0f 84 62 ff ff ff    	je     16770 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x3c>
        if ( result == VULKAN_HPP_NAMESPACE::Result::eSuccess )
   1680e:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   16812:	0f 85 cb 00 00 00    	jne    168e3 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x1af>
          VULKAN_HPP_ASSERT( physicalDeviceCount <= physicalDevices.size() );
   16818:	8b 45 ac             	mov    -0x54(%rbp),%eax
   1681b:	89 c3                	mov    %eax,%ebx
   1681d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   16821:	48 89 c7             	mov    %rax,%rdi
   16824:	e8 55 11 00 00       	call   1797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   16829:	48 39 d8             	cmp    %rbx,%rax
   1682c:	73 28                	jae    16856 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x122>
   1682e:	48 8d 05 bb 72 01 00 	lea    0x172bb(%rip),%rax        # 2daf0 <_ZNSt8__detailL19__atomic_spin_countE+0x32fc>
   16835:	48 89 c1             	mov    %rax,%rcx
   16838:	ba 6e 0c 00 00       	mov    $0xc6e,%edx
   1683d:	48 8d 05 f4 71 01 00 	lea    0x171f4(%rip),%rax        # 2da38 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
   16844:	48 89 c6             	mov    %rax,%rsi
   16847:	48 8d 05 ea 72 01 00 	lea    0x172ea(%rip),%rax        # 2db38 <_ZNSt8__detailL19__atomic_spin_countE+0x3344>
   1684e:	48 89 c7             	mov    %rax,%rdi
   16851:	e8 ba e8 fe ff       	call   5110 <__assert_fail@plt>
          this->reserve( physicalDeviceCount );
   16856:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1685a:	8b 55 ac             	mov    -0x54(%rbp),%edx
   1685d:	89 d2                	mov    %edx,%edx
   1685f:	48 89 d6             	mov    %rdx,%rsi
   16862:	48 89 c7             	mov    %rax,%rdi
   16865:	e8 5c 11 00 00       	call   179c6 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm>
          for ( auto const & physicalDevice : physicalDevices )
   1686a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1686e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   16872:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16876:	48 89 c7             	mov    %rax,%rdi
   16879:	e8 62 12 00 00       	call   17ae0 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>
   1687e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   16882:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16886:	48 89 c7             	mov    %rax,%rdi
   16889:	e8 78 12 00 00       	call   17b06 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>
   1688e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   16892:	eb 33                	jmp    168c7 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x193>
   16894:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   16898:	48 89 c7             	mov    %rax,%rdi
   1689b:	e8 82 fe ff ff       	call   16722 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>
   168a0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            this->emplace_back( instance, physicalDevice );
   168a4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   168a8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   168ac:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   168b0:	48 89 ce             	mov    %rcx,%rsi
   168b3:	48 89 c7             	mov    %rax,%rdi
   168b6:	e8 95 12 00 00       	call   17b50 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_>
          for ( auto const & physicalDevice : physicalDevices )
   168bb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   168bf:	48 89 c7             	mov    %rax,%rdi
   168c2:	e8 69 12 00 00       	call   17b30 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>
   168c7:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   168cb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   168cf:	48 89 d6             	mov    %rdx,%rsi
   168d2:	48 89 c7             	mov    %rax,%rdi
   168d5:	e8 ff fd ff ff       	call   166d9 <_ZN9__gnu_cxxeqIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   168da:	83 f0 01             	xor    $0x1,%eax
   168dd:	84 c0                	test   %al,%al
   168df:	75 b3                	jne    16894 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x160>
   168e1:	eb 14                	jmp    168f7 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x1c3>
          throwResultException( result, "vkEnumeratePhysicalDevices" );
   168e3:	8b 45 ec             	mov    -0x14(%rbp),%eax
   168e6:	48 8d 15 79 72 01 00 	lea    0x17279(%rip),%rdx        # 2db66 <_ZNSt8__detailL19__atomic_spin_countE+0x3372>
   168ed:	48 89 d6             	mov    %rdx,%rsi
   168f0:	89 c7                	mov    %eax,%edi
   168f2:	e8 1b 6e ff ff       	call   d712 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   168f7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   168fb:	48 89 c7             	mov    %rax,%rdi
   168fe:	e8 8d 0f 00 00       	call   17890 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   16903:	eb 26                	jmp    1692b <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x1f7>
   16905:	48 89 c3             	mov    %rax,%rbx
   16908:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1690c:	48 89 c7             	mov    %rax,%rdi
   1690f:	e8 7c 0f 00 00       	call   17890 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   16914:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   16918:	48 89 c7             	mov    %rax,%rdi
   1691b:	e8 d2 0e 00 00       	call   177f2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>
   16920:	48 89 d8             	mov    %rbx,%rax
   16923:	48 89 c7             	mov    %rax,%rdi
   16926:	e8 75 ea fe ff       	call   53a0 <_Unwind_Resume@plt>
   1692b:	48 83 c4 70          	add    $0x70,%rsp
   1692f:	5b                   	pop    %rbx
   16930:	41 5c                	pop    %r12
   16932:	5d                   	pop    %rbp
   16933:	c3                   	ret

0000000000016934 <_ZN2vk6DeviceC1Ev>:
    VULKAN_HPP_CONSTEXPR Device() = default;
   16934:	55                   	push   %rbp
   16935:	48 89 e5             	mov    %rsp,%rbp
   16938:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1693c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16940:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   16947:	90                   	nop
   16948:	5d                   	pop    %rbp
   16949:	c3                   	ret

000000000001694a <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      Device( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::PhysicalDevice const &         physicalDevice,
   1694a:	55                   	push   %rbp
   1694b:	48 89 e5             	mov    %rsp,%rbp
   1694e:	41 55                	push   %r13
   16950:	41 54                	push   %r12
   16952:	53                   	push   %rbx
   16953:	48 83 ec 48          	sub    $0x48,%rsp
   16957:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1695b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   1695f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   16963:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   16967:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1696b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   16972:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   16976:	48 89 c7             	mov    %rax,%rdi
   16979:	e8 b6 ff ff ff       	call   16934 <_ZN2vk6DeviceC1Ev>
   1697e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   16982:	48 89 c7             	mov    %rax,%rdi
   16985:	e8 d4 0d 00 00       	call   1775e <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   1698a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1698e:	48 89 42 08          	mov    %rax,0x8(%rdx)
   16992:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   16996:	48 83 c0 10          	add    $0x10,%rax
   1699a:	48 89 c7             	mov    %rax,%rdi
   1699d:	e8 b2 12 00 00       	call   17c54 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>
          physicalDevice.getDispatcher()->vkCreateDevice( static_cast<VkPhysicalDevice>( *physicalDevice ),
   169a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   169a6:	48 89 c7             	mov    %rax,%rdi
   169a9:	e8 66 fc ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   169ae:	4c 8b 68 58          	mov    0x58(%rax),%r13
                                                          reinterpret_cast<VkDevice *>( &m_device ) ) );
   169b2:	4c 8b 65 c8          	mov    -0x38(%rbp),%r12
                                                          reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   169b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   169ba:	48 8b 58 08          	mov    0x8(%rax),%rbx
          physicalDevice.getDispatcher()->vkCreateDevice( static_cast<VkPhysicalDevice>( *physicalDevice ),
   169be:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   169c2:	48 89 c7             	mov    %rax,%rdi
   169c5:	e8 3c fc ff ff       	call   16606 <_ZNK2vk4raii14PhysicalDevicedeEv>
   169ca:	48 89 c7             	mov    %rax,%rdi
   169cd:	e8 6a 8e ff ff       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
   169d2:	48 89 c7             	mov    %rax,%rdi
   169d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   169d9:	4c 89 e1             	mov    %r12,%rcx
   169dc:	48 89 da             	mov    %rbx,%rdx
   169df:	48 89 c6             	mov    %rax,%rsi
   169e2:	41 ff d5             	call   *%r13
   169e5:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   169e8:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   169ec:	74 14                	je     16a02 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0xb8>
          throwResultException( result, "vkCreateDevice" );
   169ee:	8b 45 dc             	mov    -0x24(%rbp),%eax
   169f1:	48 8d 15 89 71 01 00 	lea    0x17189(%rip),%rdx        # 2db81 <_ZNSt8__detailL19__atomic_spin_countE+0x338d>
   169f8:	48 89 d6             	mov    %rdx,%rsi
   169fb:	89 c7                	mov    %eax,%edi
   169fd:	e8 10 6d ff ff       	call   d712 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   16a02:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   16a06:	48 8d 58 10          	lea    0x10(%rax),%rbx
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   16a0a:	bf b8 0f 00 00       	mov    $0xfb8,%edi
   16a0f:	e8 0c e8 fe ff       	call   5220 <_Znwm@plt>
   16a14:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   16a18:	41 bd 01 00 00 00    	mov    $0x1,%r13d
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   16a1e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   16a22:	48 89 c7             	mov    %rax,%rdi
   16a25:	e8 82 26 ff ff       	call   90ac <_ZNK2vk6DevicecvP10VkDevice_TEv>
   16a2a:	49 89 c4             	mov    %rax,%r12
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   16a2d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   16a31:	48 89 c7             	mov    %rax,%rdi
   16a34:	e8 db fb ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   16a39:	48 8b 80 40 03 00 00 	mov    0x340(%rax),%rax
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   16a40:	4c 89 e2             	mov    %r12,%rdx
   16a43:	48 89 c6             	mov    %rax,%rsi
   16a46:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   16a4a:	e8 ff 8d ff ff       	call   f84e <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   16a4f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   16a53:	48 89 df             	mov    %rbx,%rdi
   16a56:	e8 a9 3d ff ff       	call   a804 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
   16a5b:	eb 36                	jmp    16a93 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x149>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   16a5d:	48 89 c3             	mov    %rax,%rbx
   16a60:	45 84 ed             	test   %r13b,%r13b
   16a63:	74 13                	je     16a78 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x12e>
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   16a65:	be b8 0f 00 00       	mov    $0xfb8,%esi
   16a6a:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   16a6e:	e8 bd e7 fe ff       	call   5230 <_ZdlPvm@plt>
   16a73:	eb 03                	jmp    16a78 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x12e>
      }
   16a75:	48 89 c3             	mov    %rax,%rbx
   16a78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   16a7c:	48 83 c0 10          	add    $0x10,%rax
   16a80:	48 89 c7             	mov    %rax,%rdi
   16a83:	e8 18 3d ff ff       	call   a7a0 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev>
   16a88:	48 89 d8             	mov    %rbx,%rax
   16a8b:	48 89 c7             	mov    %rax,%rdi
   16a8e:	e8 0d e9 fe ff       	call   53a0 <_Unwind_Resume@plt>
   16a93:	48 83 c4 48          	add    $0x48,%rsp
   16a97:	5b                   	pop    %rbx
   16a98:	41 5c                	pop    %r12
   16a9a:	41 5d                	pop    %r13
   16a9c:	5d                   	pop    %rbp
   16a9d:	c3                   	ret

0000000000016a9e <_ZNK2vk4raii6DevicedeEv>:
      VULKAN_HPP_NAMESPACE::Device const & operator*() const VULKAN_HPP_NOEXCEPT
   16a9e:	55                   	push   %rbp
   16a9f:	48 89 e5             	mov    %rsp,%rbp
   16aa2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_device;
   16aa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   16aaa:	5d                   	pop    %rbp
   16aab:	c3                   	ret

0000000000016aac <_ZN2vk5QueueC1Ev>:
    VULKAN_HPP_CONSTEXPR Queue() = default;
   16aac:	55                   	push   %rbp
   16aad:	48 89 e5             	mov    %rsp,%rbp
   16ab0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16ab4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ab8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   16abf:	90                   	nop
   16ac0:	5d                   	pop    %rbp
   16ac1:	c3                   	ret

0000000000016ac2 <_ZN2vk4raii5QueueC1ERKNS0_6DeviceEjj>:
      Queue( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Device const & device, uint32_t queueFamilyIndex, uint32_t queueIndex )
   16ac2:	55                   	push   %rbp
   16ac3:	48 89 e5             	mov    %rsp,%rbp
   16ac6:	41 54                	push   %r12
   16ac8:	53                   	push   %rbx
   16ac9:	48 83 ec 20          	sub    $0x20,%rsp
   16acd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16ad1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   16ad5:	89 55 dc             	mov    %edx,-0x24(%rbp)
   16ad8:	89 4d d8             	mov    %ecx,-0x28(%rbp)
        : m_dispatcher( device.getDispatcher() )
   16adb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16adf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   16ae6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16aea:	48 89 c7             	mov    %rax,%rdi
   16aed:	e8 ba ff ff ff       	call   16aac <_ZN2vk5QueueC1Ev>
   16af2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16af6:	48 89 c7             	mov    %rax,%rdi
   16af9:	e8 ec 2a ff ff       	call   95ea <_ZNK2vk4raii6Device13getDispatcherEv>
   16afe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16b02:	48 89 42 08          	mov    %rax,0x8(%rdx)
        getDispatcher()->vkGetDeviceQueue( static_cast<VkDevice>( *device ), queueFamilyIndex, queueIndex, reinterpret_cast<VkQueue *>( &m_queue ) );
   16b06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b0a:	48 89 c7             	mov    %rax,%rdi
   16b0d:	e8 66 00 00 00       	call   16b78 <_ZNK2vk4raii5Queue13getDispatcherEv>
   16b12:	4c 8b 60 20          	mov    0x20(%rax),%r12
   16b16:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   16b1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16b1e:	48 89 c7             	mov    %rax,%rdi
   16b21:	e8 78 ff ff ff       	call   16a9e <_ZNK2vk4raii6DevicedeEv>
   16b26:	48 89 c7             	mov    %rax,%rdi
   16b29:	e8 7e 25 ff ff       	call   90ac <_ZNK2vk6DevicecvP10VkDevice_TEv>
   16b2e:	48 89 c7             	mov    %rax,%rdi
   16b31:	8b 55 d8             	mov    -0x28(%rbp),%edx
   16b34:	8b 45 dc             	mov    -0x24(%rbp),%eax
   16b37:	48 89 d9             	mov    %rbx,%rcx
   16b3a:	89 c6                	mov    %eax,%esi
   16b3c:	41 ff d4             	call   *%r12
      }
   16b3f:	90                   	nop
   16b40:	48 83 c4 20          	add    $0x20,%rsp
   16b44:	5b                   	pop    %rbx
   16b45:	41 5c                	pop    %r12
   16b47:	5d                   	pop    %rbp
   16b48:	c3                   	ret
   16b49:	90                   	nop

0000000000016b4a <_ZN2vk4raii5QueueC1ERKS1_>:
      Queue( Queue const & rhs ) : m_queue( rhs.m_queue ), m_dispatcher( rhs.m_dispatcher ) {}
   16b4a:	55                   	push   %rbp
   16b4b:	48 89 e5             	mov    %rsp,%rbp
   16b4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16b52:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16b56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b5a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16b5e:	48 8b 12             	mov    (%rdx),%rdx
   16b61:	48 89 10             	mov    %rdx,(%rax)
   16b64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16b68:	48 8b 50 08          	mov    0x8(%rax),%rdx
   16b6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b70:	48 89 50 08          	mov    %rdx,0x8(%rax)
   16b74:	90                   	nop
   16b75:	5d                   	pop    %rbp
   16b76:	c3                   	ret
   16b77:	90                   	nop

0000000000016b78 <_ZNK2vk4raii5Queue13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
   16b78:	55                   	push   %rbp
   16b79:	48 89 e5             	mov    %rsp,%rbp
   16b7c:	48 83 ec 10          	sub    $0x10,%rsp
   16b80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
   16b84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b88:	48 8b 40 08          	mov    0x8(%rax),%rax
   16b8c:	48 89 c7             	mov    %rax,%rdi
   16b8f:	e8 be f9 fe ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   16b94:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   16b9a:	74 28                	je     16bc4 <_ZNK2vk4raii5Queue13getDispatcherEv+0x4c>
   16b9c:	48 8d 05 3d 70 01 00 	lea    0x1703d(%rip),%rax        # 2dbe0 <_ZNSt8__detailL19__atomic_spin_countE+0x33ec>
   16ba3:	48 89 c1             	mov    %rax,%rcx
   16ba6:	ba c7 23 00 00       	mov    $0x23c7,%edx
   16bab:	48 8d 05 86 6e 01 00 	lea    0x16e86(%rip),%rax        # 2da38 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
   16bb2:	48 89 c6             	mov    %rax,%rsi
   16bb5:	48 8d 05 a4 6e 01 00 	lea    0x16ea4(%rip),%rax        # 2da60 <_ZNSt8__detailL19__atomic_spin_countE+0x326c>
   16bbc:	48 89 c7             	mov    %rax,%rdi
   16bbf:	e8 4c e5 fe ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
   16bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bc8:	48 8b 40 08          	mov    0x8(%rax),%rax
      }
   16bcc:	c9                   	leave
   16bcd:	c3                   	ret

0000000000016bce <_ZNK2vk4raii10SurfaceKHRdeEv>:
      VULKAN_HPP_NAMESPACE::SurfaceKHR const & operator*() const VULKAN_HPP_NOEXCEPT
   16bce:	55                   	push   %rbp
   16bcf:	48 89 e5             	mov    %rsp,%rbp
   16bd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_surface;
   16bd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bda:	48 83 c0 08          	add    $0x8,%rax
      }
   16bde:	5d                   	pop    %rbp
   16bdf:	c3                   	ret

0000000000016be0 <_ZN2vk4raii15PhysicalDevicesD1Ev>:
    class PhysicalDevices : public std::vector<VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::PhysicalDevice>
   16be0:	55                   	push   %rbp
   16be1:	48 89 e5             	mov    %rsp,%rbp
   16be4:	48 83 ec 10          	sub    $0x10,%rsp
   16be8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16bec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bf0:	48 89 c7             	mov    %rax,%rdi
   16bf3:	e8 fa 0b 00 00       	call   177f2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>
   16bf8:	90                   	nop
   16bf9:	c9                   	leave
   16bfa:	c3                   	ret
   16bfb:	90                   	nop

0000000000016bfc <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>:
    VULKAN_HPP_CONSTEXPR ArrayWrapper1D() VULKAN_HPP_NOEXCEPT : std::array<T, N>() {}
   16bfc:	55                   	push   %rbp
   16bfd:	48 89 e5             	mov    %rsp,%rbp
   16c00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16c04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c08:	b9 00 01 00 00       	mov    $0x100,%ecx
   16c0d:	be 00 00 00 00       	mov    $0x0,%esi
   16c12:	48 89 30             	mov    %rsi,(%rax)
   16c15:	89 ca                	mov    %ecx,%edx
   16c17:	48 01 c2             	add    %rax,%rdx
   16c1a:	48 83 c2 08          	add    $0x8,%rdx
   16c1e:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   16c22:	48 8d 50 08          	lea    0x8(%rax),%rdx
   16c26:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   16c2a:	48 29 d0             	sub    %rdx,%rax
   16c2d:	01 c1                	add    %eax,%ecx
   16c2f:	83 e1 f8             	and    $0xfffffff8,%ecx
   16c32:	89 c8                	mov    %ecx,%eax
   16c34:	c1 e8 03             	shr    $0x3,%eax
   16c37:	89 c1                	mov    %eax,%ecx
   16c39:	48 89 d7             	mov    %rdx,%rdi
   16c3c:	48 89 f0             	mov    %rsi,%rax
   16c3f:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   16c42:	90                   	nop
   16c43:	5d                   	pop    %rbp
   16c44:	c3                   	ret
   16c45:	90                   	nop

0000000000016c46 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE12_Vector_implD1Ev>:
   16c46:	55                   	push   %rbp
   16c47:	48 89 e5             	mov    %rsp,%rbp
   16c4a:	48 83 ec 10          	sub    $0x10,%rsp
   16c4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16c52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c56:	48 89 c7             	mov    %rax,%rdi
   16c59:	e8 1c 10 00 00       	call   17c7a <_ZNSaIN2vk21QueueFamilyPropertiesEED1Ev>
   16c5e:	90                   	nop
   16c5f:	c9                   	leave
   16c60:	c3                   	ret
   16c61:	90                   	nop

0000000000016c62 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE12_Vector_implD1Ev>:
   16c62:	55                   	push   %rbp
   16c63:	48 89 e5             	mov    %rsp,%rbp
   16c66:	48 83 ec 10          	sub    $0x10,%rsp
   16c6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16c6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c72:	48 89 c7             	mov    %rax,%rdi
   16c75:	e8 8a 11 00 00       	call   17e04 <_ZNSaIN2vk19ExtensionPropertiesEED1Ev>
   16c7a:	90                   	nop
   16c7b:	c9                   	leave
   16c7c:	c3                   	ret
   16c7d:	90                   	nop

0000000000016c7e <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implD1Ev>:
   16c7e:	55                   	push   %rbp
   16c7f:	48 89 e5             	mov    %rsp,%rbp
   16c82:	48 83 ec 10          	sub    $0x10,%rsp
   16c86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c8e:	48 89 c7             	mov    %rax,%rdi
   16c91:	e8 24 13 00 00       	call   17fba <_ZNSaIN2vk15LayerPropertiesEED1Ev>
   16c96:	90                   	nop
   16c97:	c9                   	leave
   16c98:	c3                   	ret
   16c99:	90                   	nop

0000000000016c9a <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
   16c9a:	55                   	push   %rbp
   16c9b:	48 89 e5             	mov    %rsp,%rbp
   16c9e:	48 83 ec 10          	sub    $0x10,%rsp
   16ca2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_color = _S_red;
   16ca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16caa:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      _M_reset();
   16cb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cb4:	48 89 c7             	mov    %rax,%rdi
   16cb7:	e8 04 00 00 00       	call   16cc0 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
   16cbc:	90                   	nop
   16cbd:	c9                   	leave
   16cbe:	c3                   	ret
   16cbf:	90                   	nop

0000000000016cc0 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
   16cc0:	55                   	push   %rbp
   16cc1:	48 89 e5             	mov    %rsp,%rbp
   16cc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_parent = 0;
   16cc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ccc:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   16cd3:	00 
      _M_header._M_left = &_M_header;
   16cd4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16cd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cdc:	48 89 50 10          	mov    %rdx,0x10(%rax)
      _M_header._M_right = &_M_header;
   16ce0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16ce4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ce8:	48 89 50 18          	mov    %rdx,0x18(%rax)
      _M_node_count = 0;
   16cec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cf0:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   16cf7:	00 
    }
   16cf8:	90                   	nop
   16cf9:	5d                   	pop    %rbp
   16cfa:	c3                   	ret
   16cfb:	90                   	nop

0000000000016cfc <_ZNKSt19bad_optional_access4whatEv>:
  {
  public:
    bad_optional_access() = default;
    virtual ~bad_optional_access() = default;

    const char* what() const noexcept override
   16cfc:	55                   	push   %rbp
   16cfd:	48 89 e5             	mov    %rsp,%rbp
   16d00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return "bad optional access"; }
   16d04:	48 8d 05 1e 6f 01 00 	lea    0x16f1e(%rip),%rax        # 2dc29 <_ZNSt8__detailL19__atomic_spin_countE+0x3435>
   16d0b:	5d                   	pop    %rbp
   16d0c:	c3                   	ret
   16d0d:	90                   	nop

0000000000016d0e <_ZNSt19bad_optional_accessC1Ev>:
    bad_optional_access() = default;
   16d0e:	55                   	push   %rbp
   16d0f:	48 89 e5             	mov    %rsp,%rbp
   16d12:	48 83 ec 10          	sub    $0x10,%rsp
   16d16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16d1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d1e:	48 89 c7             	mov    %rax,%rdi
   16d21:	e8 e2 89 ff ff       	call   f708 <_ZNSt9exceptionC1Ev>
   16d26:	48 8d 15 33 9c 02 00 	lea    0x29c33(%rip),%rdx        # 40960 <_ZTVSt19bad_optional_access+0x10>
   16d2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d31:	48 89 10             	mov    %rdx,(%rax)
   16d34:	90                   	nop
   16d35:	c9                   	leave
   16d36:	c3                   	ret

0000000000016d37 <_ZSt27__throw_bad_optional_accessv>:
  };

  // XXX Does not belong here.
  [[__noreturn__]] inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
   16d37:	55                   	push   %rbp
   16d38:	48 89 e5             	mov    %rsp,%rbp
   16d3b:	53                   	push   %rbx
   16d3c:	48 83 ec 08          	sub    $0x8,%rsp
   16d40:	bf 08 00 00 00       	mov    $0x8,%edi
   16d45:	e8 86 e3 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   16d4a:	48 89 c3             	mov    %rax,%rbx
   16d4d:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
   16d54:	48 89 df             	mov    %rbx,%rdi
   16d57:	e8 b2 ff ff ff       	call   16d0e <_ZNSt19bad_optional_accessC1Ev>
   16d5c:	48 8d 05 09 6f 00 00 	lea    0x6f09(%rip),%rax        # 1dc6c <_ZNSt19bad_optional_accessD1Ev>
   16d63:	48 89 c2             	mov    %rax,%rdx
   16d66:	48 8d 05 f3 9f 02 00 	lea    0x29ff3(%rip),%rax        # 40d60 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   16d6d:	48 89 c6             	mov    %rax,%rsi
   16d70:	48 89 df             	mov    %rbx,%rdi
   16d73:	e8 08 e6 fe ff       	call   5380 <__cxa_throw@plt>

0000000000016d78 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
   16d78:	55                   	push   %rbp
   16d79:	48 89 e5             	mov    %rsp,%rbp
   16d7c:	53                   	push   %rbx
   16d7d:	48 83 ec 38          	sub    $0x38,%rsp
   16d81:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   16d85:	48 89 f0             	mov    %rsi,%rax
   16d88:	48 89 d6             	mov    %rdx,%rsi
   16d8b:	48 89 f2             	mov    %rsi,%rdx
   16d8e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   16d92:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   16d96:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      : _Base(__a)
   16d9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16d9e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   16da2:	48 89 d6             	mov    %rdx,%rsi
   16da5:	48 89 c7             	mov    %rax,%rdi
   16da8:	e8 af 00 00 00       	call   16e5c <_ZNSt12_Vector_baseIPKcSaIS1_EEC2ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
   16dad:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   16db1:	48 89 c7             	mov    %rax,%rdi
   16db4:	e8 97 01 00 00       	call   16f50 <_ZNKSt16initializer_listIPKcE3endEv>
   16db9:	48 89 c3             	mov    %rax,%rbx
   16dbc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   16dc0:	48 89 c7             	mov    %rax,%rdi
   16dc3:	e8 76 01 00 00       	call   16f3e <_ZNKSt16initializer_listIPKcE5beginEv>
   16dc8:	48 89 c1             	mov    %rax,%rcx
   16dcb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16dcf:	48 89 da             	mov    %rbx,%rdx
   16dd2:	48 89 ce             	mov    %rcx,%rsi
   16dd5:	48 89 c7             	mov    %rax,%rdi
   16dd8:	e8 ed 01 00 00       	call   16fca <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
   16ddd:	eb 1a                	jmp    16df9 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_+0x81>
   16ddf:	48 89 c3             	mov    %rax,%rbx
   16de2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16de6:	48 89 c7             	mov    %rax,%rdi
   16de9:	e8 58 13 00 00       	call   18146 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   16dee:	48 89 d8             	mov    %rbx,%rax
   16df1:	48 89 c7             	mov    %rax,%rdi
   16df4:	e8 a7 e5 fe ff       	call   53a0 <_Unwind_Resume@plt>
   16df9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16dfd:	c9                   	leave
   16dfe:	c3                   	ret
   16dff:	90                   	nop

0000000000016e00 <_ZNSaIPKcEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   16e00:	55                   	push   %rbp
   16e01:	48 89 e5             	mov    %rsp,%rbp
   16e04:	48 83 ec 10          	sub    $0x10,%rsp
   16e08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e10:	48 89 c7             	mov    %rax,%rdi
   16e13:	e8 1c 00 00 00       	call   16e34 <_ZNSt15__new_allocatorIPKcEC2Ev>
   16e18:	90                   	nop
   16e19:	c9                   	leave
   16e1a:	c3                   	ret
   16e1b:	90                   	nop

0000000000016e1c <_ZNSaIPKcED2Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   16e1c:	55                   	push   %rbp
   16e1d:	48 89 e5             	mov    %rsp,%rbp
   16e20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e24:	90                   	nop
   16e25:	5d                   	pop    %rbp
   16e26:	c3                   	ret
   16e27:	90                   	nop

0000000000016e28 <_ZNSaIPKcED1Ev>:
   16e28:	55                   	push   %rbp
   16e29:	48 89 e5             	mov    %rsp,%rbp
   16e2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e30:	90                   	nop
   16e31:	5d                   	pop    %rbp
   16e32:	c3                   	ret
   16e33:	90                   	nop

0000000000016e34 <_ZNSt15__new_allocatorIPKcEC2Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16e34:	55                   	push   %rbp
   16e35:	48 89 e5             	mov    %rsp,%rbp
   16e38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e3c:	90                   	nop
   16e3d:	5d                   	pop    %rbp
   16e3e:	c3                   	ret
   16e3f:	90                   	nop

0000000000016e40 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   16e40:	55                   	push   %rbp
   16e41:	48 89 e5             	mov    %rsp,%rbp
   16e44:	48 83 ec 10          	sub    $0x10,%rsp
   16e48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e50:	48 89 c7             	mov    %rax,%rdi
   16e53:	e8 c4 ff ff ff       	call   16e1c <_ZNSaIPKcED2Ev>
   16e58:	90                   	nop
   16e59:	c9                   	leave
   16e5a:	c3                   	ret
   16e5b:	90                   	nop

0000000000016e5c <_ZNSt12_Vector_baseIPKcSaIS1_EEC2ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   16e5c:	55                   	push   %rbp
   16e5d:	48 89 e5             	mov    %rsp,%rbp
   16e60:	48 83 ec 10          	sub    $0x10,%rsp
   16e64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e68:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   16e6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e70:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16e74:	48 89 d6             	mov    %rdx,%rsi
   16e77:	48 89 c7             	mov    %rax,%rdi
   16e7a:	e8 03 00 00 00       	call   16e82 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
   16e7f:	90                   	nop
   16e80:	c9                   	leave
   16e81:	c3                   	ret

0000000000016e82 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   16e82:	55                   	push   %rbp
   16e83:	48 89 e5             	mov    %rsp,%rbp
   16e86:	48 83 ec 10          	sub    $0x10,%rsp
   16e8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e8e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   16e92:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16e96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e9a:	48 89 d6             	mov    %rdx,%rsi
   16e9d:	48 89 c7             	mov    %rax,%rdi
   16ea0:	e8 0f 00 00 00       	call   16eb4 <_ZNSaIPKcEC2ERKS1_>
   16ea5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ea9:	48 89 c7             	mov    %rax,%rdi
   16eac:	e8 5f 00 00 00       	call   16f10 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
   16eb1:	90                   	nop
   16eb2:	c9                   	leave
   16eb3:	c3                   	ret

0000000000016eb4 <_ZNSaIPKcEC2ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   16eb4:	55                   	push   %rbp
   16eb5:	48 89 e5             	mov    %rsp,%rbp
   16eb8:	48 83 ec 10          	sub    $0x10,%rsp
   16ebc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16ec0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   16ec4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16ec8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ecc:	48 89 d6             	mov    %rdx,%rsi
   16ecf:	48 89 c7             	mov    %rax,%rdi
   16ed2:	e8 29 00 00 00       	call   16f00 <_ZNSt15__new_allocatorIPKcEC2ERKS2_>
   16ed7:	90                   	nop
   16ed8:	c9                   	leave
   16ed9:	c3                   	ret

0000000000016eda <_ZNSaIPKcEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   16eda:	55                   	push   %rbp
   16edb:	48 89 e5             	mov    %rsp,%rbp
   16ede:	48 83 ec 10          	sub    $0x10,%rsp
   16ee2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16ee6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   16eea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16eee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ef2:	48 89 d6             	mov    %rdx,%rsi
   16ef5:	48 89 c7             	mov    %rax,%rdi
   16ef8:	e8 03 00 00 00       	call   16f00 <_ZNSt15__new_allocatorIPKcEC2ERKS2_>
   16efd:	90                   	nop
   16efe:	c9                   	leave
   16eff:	c3                   	ret

0000000000016f00 <_ZNSt15__new_allocatorIPKcEC2ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   16f00:	55                   	push   %rbp
   16f01:	48 89 e5             	mov    %rsp,%rbp
   16f04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16f08:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16f0c:	90                   	nop
   16f0d:	5d                   	pop    %rbp
   16f0e:	c3                   	ret
   16f0f:	90                   	nop

0000000000016f10 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   16f10:	55                   	push   %rbp
   16f11:	48 89 e5             	mov    %rsp,%rbp
   16f14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   16f18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f1c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   16f23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f27:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   16f2e:	00 
   16f2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f33:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   16f3a:	00 
	{ }
   16f3b:	90                   	nop
   16f3c:	5d                   	pop    %rbp
   16f3d:	c3                   	ret

0000000000016f3e <_ZNKSt16initializer_listIPKcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
   16f3e:	55                   	push   %rbp
   16f3f:	48 89 e5             	mov    %rsp,%rbp
   16f42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16f46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f4a:	48 8b 00             	mov    (%rax),%rax
   16f4d:	5d                   	pop    %rbp
   16f4e:	c3                   	ret
   16f4f:	90                   	nop

0000000000016f50 <_ZNKSt16initializer_listIPKcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   16f50:	55                   	push   %rbp
   16f51:	48 89 e5             	mov    %rsp,%rbp
   16f54:	53                   	push   %rbx
   16f55:	48 83 ec 18          	sub    $0x18,%rsp
   16f59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16f5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f61:	48 89 c7             	mov    %rax,%rdi
   16f64:	e8 d5 ff ff ff       	call   16f3e <_ZNKSt16initializer_listIPKcE5beginEv>
   16f69:	48 89 c3             	mov    %rax,%rbx
   16f6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f70:	48 89 c7             	mov    %rax,%rdi
   16f73:	e8 0e 00 00 00       	call   16f86 <_ZNKSt16initializer_listIPKcE4sizeEv>
   16f78:	48 c1 e0 03          	shl    $0x3,%rax
   16f7c:	48 01 d8             	add    %rbx,%rax
   16f7f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16f83:	c9                   	leave
   16f84:	c3                   	ret
   16f85:	90                   	nop

0000000000016f86 <_ZNKSt16initializer_listIPKcE4sizeEv>:
      size() const noexcept { return _M_len; }
   16f86:	55                   	push   %rbp
   16f87:	48 89 e5             	mov    %rsp,%rbp
   16f8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16f8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f92:	48 8b 40 08          	mov    0x8(%rax),%rax
   16f96:	5d                   	pop    %rbp
   16f97:	c3                   	ret

0000000000016f98 <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
   16f98:	55                   	push   %rbp
   16f99:	48 89 e5             	mov    %rsp,%rbp
   16f9c:	48 83 ec 10          	sub    $0x10,%rsp
   16fa0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16fa4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
   16fa8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   16fac:	48 89 c7             	mov    %rax,%rdi
   16faf:	e8 c5 00 00 00       	call   17079 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
   16fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fb8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16fbc:	48 89 d6             	mov    %rdx,%rsi
   16fbf:	48 89 c7             	mov    %rax,%rdi
   16fc2:	e8 bd 00 00 00       	call   17084 <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
    }
   16fc7:	c9                   	leave
   16fc8:	c3                   	ret
   16fc9:	90                   	nop

0000000000016fca <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
   16fca:	55                   	push   %rbp
   16fcb:	48 89 e5             	mov    %rsp,%rbp
   16fce:	53                   	push   %rbx
   16fcf:	48 83 ec 38          	sub    $0x38,%rsp
   16fd3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   16fd7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   16fdb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
   16fdf:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   16fe3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   16fe7:	48 89 d6             	mov    %rdx,%rsi
   16fea:	48 89 c7             	mov    %rax,%rdi
   16fed:	e8 a6 ff ff ff       	call   16f98 <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>
   16ff2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   16ff6:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   16ffa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16ffe:	48 89 c7             	mov    %rax,%rdi
   17001:	e8 98 00 00 00       	call   1709e <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   17006:	48 89 c2             	mov    %rax,%rdx
   17009:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1700d:	48 89 d6             	mov    %rdx,%rsi
   17010:	48 89 c7             	mov    %rax,%rdi
   17013:	e8 94 00 00 00       	call   170ac <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
   17018:	48 89 c6             	mov    %rax,%rsi
   1701b:	48 89 df             	mov    %rbx,%rdi
   1701e:	e8 6b 01 00 00       	call   1718e <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   17023:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   17027:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   1702a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1702e:	48 8b 00             	mov    (%rax),%rax
   17031:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17035:	48 c1 e2 03          	shl    $0x3,%rdx
   17039:	48 01 c2             	add    %rax,%rdx
   1703c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17040:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
   17044:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17048:	48 89 c7             	mov    %rax,%rdi
   1704b:	e8 4e 00 00 00       	call   1709e <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   17050:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
   17053:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17057:	48 8b 10             	mov    (%rax),%rdx
   1705a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1705e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17062:	48 89 c7             	mov    %rax,%rdi
   17065:	e8 de 01 00 00       	call   17248 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>
	  this->_M_impl._M_finish =
   1706a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1706e:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
   17072:	90                   	nop
   17073:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17077:	c9                   	leave
   17078:	c3                   	ret

0000000000017079 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
   17079:	55                   	push   %rbp
   1707a:	48 89 e5             	mov    %rsp,%rbp
   1707d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   17081:	90                   	nop
   17082:	5d                   	pop    %rbp
   17083:	c3                   	ret

0000000000017084 <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   17084:	55                   	push   %rbp
   17085:	48 89 e5             	mov    %rsp,%rbp
   17088:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1708c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
   17090:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17094:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   17098:	48 c1 f8 03          	sar    $0x3,%rax
    }
   1709c:	5d                   	pop    %rbp
   1709d:	c3                   	ret

000000000001709e <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   1709e:	55                   	push   %rbp
   1709f:	48 89 e5             	mov    %rsp,%rbp
   170a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   170a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   170aa:	5d                   	pop    %rbp
   170ab:	c3                   	ret

00000000000170ac <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
   170ac:	55                   	push   %rbp
   170ad:	48 89 e5             	mov    %rsp,%rbp
   170b0:	53                   	push   %rbx
   170b1:	48 83 ec 28          	sub    $0x28,%rsp
   170b5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   170b9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   170bd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   170c1:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   170c5:	48 89 d6             	mov    %rdx,%rsi
   170c8:	48 89 c7             	mov    %rax,%rdi
   170cb:	e8 0a fe ff ff       	call   16eda <_ZNSaIPKcEC1ERKS1_>
   170d0:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   170d4:	48 89 c7             	mov    %rax,%rdi
   170d7:	e8 44 00 00 00       	call   17120 <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
   170dc:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   170e0:	0f 92 c3             	setb   %bl
   170e3:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   170e7:	48 89 c7             	mov    %rax,%rdi
   170ea:	e8 39 fd ff ff       	call   16e28 <_ZNSaIPKcED1Ev>
   170ef:	84 db                	test   %bl,%bl
   170f1:	74 0f                	je     17102 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
   170f3:	48 8d 05 46 6b 01 00 	lea    0x16b46(%rip),%rax        # 2dc40 <_ZNSt8__detailL19__atomic_spin_countE+0x344c>
   170fa:	48 89 c7             	mov    %rax,%rdi
   170fd:	e8 de df fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
   17102:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
   17106:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1710a:	c9                   	leave
   1710b:	c3                   	ret

000000000001710c <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1710c:	55                   	push   %rbp
   1710d:	48 89 e5             	mov    %rsp,%rbp
   17110:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   17114:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1711b:	ff ff 1f 
      }
   1711e:	5d                   	pop    %rbp
   1711f:	c3                   	ret

0000000000017120 <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   17120:	55                   	push   %rbp
   17121:	48 89 e5             	mov    %rsp,%rbp
   17124:	48 83 ec 20          	sub    $0x20,%rsp
   17128:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
   1712c:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   17133:	ff ff 0f 
   17136:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1713a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1713e:	48 89 c7             	mov    %rax,%rdi
   17141:	e8 c6 ff ff ff       	call   1710c <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>
   17146:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1714a:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1714e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17152:	48 89 d6             	mov    %rdx,%rsi
   17155:	48 89 c7             	mov    %rax,%rdi
   17158:	e8 05 00 00 00       	call   17162 <_ZSt3minImERKT_S2_S2_>
   1715d:	48 8b 00             	mov    (%rax),%rax
      }
   17160:	c9                   	leave
   17161:	c3                   	ret

0000000000017162 <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
   17162:	55                   	push   %rbp
   17163:	48 89 e5             	mov    %rsp,%rbp
   17166:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1716a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__b < __a)
   1716e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17172:	48 8b 10             	mov    (%rax),%rdx
   17175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17179:	48 8b 00             	mov    (%rax),%rax
   1717c:	48 39 c2             	cmp    %rax,%rdx
   1717f:	73 06                	jae    17187 <_ZSt3minImERKT_S2_S2_+0x25>
	return __b;
   17181:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17185:	eb 04                	jmp    1718b <_ZSt3minImERKT_S2_S2_+0x29>
      return __a;
   17187:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   1718b:	5d                   	pop    %rbp
   1718c:	c3                   	ret
   1718d:	90                   	nop

000000000001718e <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1718e:	55                   	push   %rbp
   1718f:	48 89 e5             	mov    %rsp,%rbp
   17192:	48 83 ec 10          	sub    $0x10,%rsp
   17196:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1719a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1719e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   171a3:	74 15                	je     171ba <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x2c>
   171a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   171a9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   171ad:	48 89 d6             	mov    %rdx,%rsi
   171b0:	48 89 c7             	mov    %rax,%rdi
   171b3:	e8 09 00 00 00       	call   171c1 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>
   171b8:	eb 05                	jmp    171bf <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x31>
   171ba:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   171bf:	c9                   	leave
   171c0:	c3                   	ret

00000000000171c1 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   171c1:	55                   	push   %rbp
   171c2:	48 89 e5             	mov    %rsp,%rbp
   171c5:	48 83 ec 20          	sub    $0x20,%rsp
   171c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   171cd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   171d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   171d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   171d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   171dd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   171e1:	e8 b8 ef fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   171e6:	84 c0                	test   %al,%al
   171e8:	74 43                	je     1722d <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x6c>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   171ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   171ee:	b9 00 00 00 00       	mov    $0x0,%ecx
   171f3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   171fa:	00 
   171fb:	48 c1 e8 3d          	shr    $0x3d,%rax
   171ff:	48 85 c0             	test   %rax,%rax
   17202:	74 05                	je     17209 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x48>
   17204:	b9 01 00 00 00       	mov    $0x1,%ecx
   17209:	48 89 d0             	mov    %rdx,%rax
   1720c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17210:	48 89 c8             	mov    %rcx,%rax
   17213:	83 e0 01             	and    $0x1,%eax
   17216:	84 c0                	test   %al,%al
   17218:	74 05                	je     1721f <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x5e>
	      std::__throw_bad_array_new_length();
   1721a:	e8 61 df fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1721f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17223:	48 89 c7             	mov    %rax,%rdi
   17226:	e8 f5 df fe ff       	call   5220 <_Znwm@plt>
   1722b:	eb 19                	jmp    17246 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x85>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1722d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   17231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17235:	ba 00 00 00 00       	mov    $0x0,%edx
   1723a:	48 89 ce             	mov    %rcx,%rsi
   1723d:	48 89 c7             	mov    %rax,%rdi
   17240:	e8 4f 0f 00 00       	call   18194 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>
   17245:	90                   	nop
      { return __a.allocate(__n); }
   17246:	c9                   	leave
   17247:	c3                   	ret

0000000000017248 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   17248:	55                   	push   %rbp
   17249:	48 89 e5             	mov    %rsp,%rbp
   1724c:	48 83 ec 20          	sub    $0x20,%rsp
   17250:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17254:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17258:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1725c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
   17260:	e8 44 ef fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   17265:	84 c0                	test   %al,%al
   17267:	74 19                	je     17282 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E+0x3a>
	return std::__do_uninit_copy(__first, __last, __result);
   17269:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1726d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   17271:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17275:	48 89 ce             	mov    %rcx,%rsi
   17278:	48 89 c7             	mov    %rax,%rdi
   1727b:	e8 1c 00 00 00       	call   1729c <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_>
   17280:	eb 18                	jmp    1729a <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E+0x52>
#endif
      return std::uninitialized_copy(__first, __last, __result);
   17282:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17286:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1728a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1728e:	48 89 ce             	mov    %rcx,%rsi
   17291:	48 89 c7             	mov    %rax,%rdi
   17294:	e8 5c 0f 00 00       	call   181f5 <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>
   17299:	90                   	nop
    }
   1729a:	c9                   	leave
   1729b:	c3                   	ret

000000000001729c <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
   1729c:	55                   	push   %rbp
   1729d:	48 89 e5             	mov    %rsp,%rbp
   172a0:	48 83 ec 30          	sub    $0x30,%rsp
   172a4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   172a8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   172ac:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      _ForwardIterator __cur = __result;
   172b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   172b4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  for (; __first != __last; ++__first, (void)++__cur)
   172b8:	eb 28                	jmp    172e2 <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_+0x46>
	    std::_Construct(std::__addressof(*__cur), *__first);
   172ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   172be:	48 89 c7             	mov    %rax,%rdi
   172c1:	e8 2c 00 00 00       	call   172f2 <_ZSt11__addressofIPKcEPT_RS2_>
   172c6:	48 89 c2             	mov    %rax,%rdx
   172c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   172cd:	48 89 c6             	mov    %rax,%rsi
   172d0:	48 89 d7             	mov    %rdx,%rdi
   172d3:	e8 28 00 00 00       	call   17300 <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
   172d8:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   172dd:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   172e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   172e6:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   172ea:	75 ce                	jne    172ba <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_+0x1e>
	  return __cur;
   172ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   172f0:	c9                   	leave
   172f1:	c3                   	ret

00000000000172f2 <_ZSt11__addressofIPKcEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   172f2:	55                   	push   %rbp
   172f3:	48 89 e5             	mov    %rsp,%rbp
   172f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   172fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   172fe:	5d                   	pop    %rbp
   172ff:	c3                   	ret

0000000000017300 <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   17300:	55                   	push   %rbp
   17301:	48 89 e5             	mov    %rsp,%rbp
   17304:	53                   	push   %rbx
   17305:	48 83 ec 18          	sub    $0x18,%rsp
   17309:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1730d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      if (std::__is_constant_evaluated())
   17311:	e8 88 ee fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   17316:	84 c0                	test   %al,%al
   17318:	74 20                	je     1733a <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_+0x3a>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1731a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1731e:	48 89 c7             	mov    %rax,%rdi
   17321:	e8 40 00 00 00       	call   17366 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
   17326:	48 89 c2             	mov    %rax,%rdx
   17329:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1732d:	48 89 d6             	mov    %rdx,%rsi
   17330:	48 89 c7             	mov    %rax,%rdi
   17333:	e8 3c 00 00 00       	call   17374 <_ZSt12construct_atIPKcJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	  return;
   17338:	eb 26                	jmp    17360 <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_+0x60>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1733a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1733e:	48 89 c6             	mov    %rax,%rsi
   17341:	bf 08 00 00 00       	mov    $0x8,%edi
   17346:	e8 69 ee fe ff       	call   61b4 <_ZnwmPv>
   1734b:	48 89 c3             	mov    %rax,%rbx
   1734e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17352:	48 89 c7             	mov    %rax,%rdi
   17355:	e8 0c 00 00 00       	call   17366 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
   1735a:	48 8b 00             	mov    (%rax),%rax
   1735d:	48 89 03             	mov    %rax,(%rbx)
    }
   17360:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17364:	c9                   	leave
   17365:	c3                   	ret

0000000000017366 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   17366:	55                   	push   %rbp
   17367:	48 89 e5             	mov    %rsp,%rbp
   1736a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1736e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17372:	5d                   	pop    %rbp
   17373:	c3                   	ret

0000000000017374 <_ZSt12construct_atIPKcJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
   17374:	55                   	push   %rbp
   17375:	48 89 e5             	mov    %rsp,%rbp
   17378:	53                   	push   %rbx
   17379:	48 83 ec 18          	sub    $0x18,%rsp
   1737d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17381:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   17385:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17389:	48 89 c6             	mov    %rax,%rsi
   1738c:	bf 08 00 00 00       	mov    $0x8,%edi
   17391:	e8 1e ee fe ff       	call   61b4 <_ZnwmPv>
   17396:	48 89 c3             	mov    %rax,%rbx
   17399:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1739d:	48 89 c7             	mov    %rax,%rdi
   173a0:	e8 c1 ff ff ff       	call   17366 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
   173a5:	48 8b 00             	mov    (%rax),%rax
   173a8:	48 89 03             	mov    %rax,(%rbx)
   173ab:	48 89 d8             	mov    %rbx,%rax
   173ae:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   173b2:	c9                   	leave
   173b3:	c3                   	ret

00000000000173b4 <_ZN9__gnu_cxxeqIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   173b4:	55                   	push   %rbp
   173b5:	48 89 e5             	mov    %rsp,%rbp
   173b8:	53                   	push   %rbx
   173b9:	48 83 ec 18          	sub    $0x18,%rsp
   173bd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   173c1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   173c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   173c9:	48 89 c7             	mov    %rax,%rdi
   173cc:	e8 1f 00 00 00       	call   173f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   173d1:	48 8b 18             	mov    (%rax),%rbx
   173d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   173d8:	48 89 c7             	mov    %rax,%rdi
   173db:	e8 10 00 00 00       	call   173f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   173e0:	48 8b 00             	mov    (%rax),%rax
   173e3:	48 39 c3             	cmp    %rax,%rbx
   173e6:	0f 94 c0             	sete   %al
   173e9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   173ed:	c9                   	leave
   173ee:	c3                   	ret
   173ef:	90                   	nop

00000000000173f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   173f0:	55                   	push   %rbp
   173f1:	48 89 e5             	mov    %rsp,%rbp
   173f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   173f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   173fc:	5d                   	pop    %rbp
   173fd:	c3                   	ret

00000000000173fe <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   173fe:	55                   	push   %rbp
   173ff:	48 89 e5             	mov    %rsp,%rbp
   17402:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   17406:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1740a:	48 8b 00             	mov    (%rax),%rax
   1740d:	5d                   	pop    %rbp
   1740e:	c3                   	ret
   1740f:	90                   	nop

0000000000017410 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
   17410:	55                   	push   %rbp
   17411:	48 89 e5             	mov    %rsp,%rbp
   17414:	48 83 ec 10          	sub    $0x10,%rsp
   17418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1741c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17420:	48 89 c7             	mov    %rax,%rdi
   17423:	e8 4c 0f 00 00       	call   18374 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>
   17428:	90                   	nop
   17429:	c9                   	leave
   1742a:	c3                   	ret
   1742b:	90                   	nop

000000000001742c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
   1742c:	55                   	push   %rbp
   1742d:	48 89 e5             	mov    %rsp,%rbp
   17430:	48 83 ec 10          	sub    $0x10,%rsp
   17434:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17438:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1743c:	48 89 c7             	mov    %rax,%rdi
   1743f:	e8 f8 0e 00 00       	call   1833c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>
   17444:	90                   	nop
   17445:	c9                   	leave
   17446:	c3                   	ret
   17447:	90                   	nop

0000000000017448 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
   17448:	55                   	push   %rbp
   17449:	48 89 e5             	mov    %rsp,%rbp
   1744c:	48 83 ec 10          	sub    $0x10,%rsp
   17450:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17454:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17458:	48 89 c7             	mov    %rax,%rdi
   1745b:	e8 cc ff ff ff       	call   1742c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>
   17460:	90                   	nop
   17461:	c9                   	leave
   17462:	c3                   	ret
   17463:	90                   	nop

0000000000017464 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
   17464:	55                   	push   %rbp
   17465:	48 89 e5             	mov    %rsp,%rbp
   17468:	48 83 ec 10          	sub    $0x10,%rsp
   1746c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17470:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17474:	48 89 c7             	mov    %rax,%rdi
   17477:	e8 04 0f 00 00       	call   18380 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>
   1747c:	90                   	nop
   1747d:	c9                   	leave
   1747e:	c3                   	ret

000000000001747f <_ZN9__gnu_cxxeqIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   1747f:	55                   	push   %rbp
   17480:	48 89 e5             	mov    %rsp,%rbp
   17483:	53                   	push   %rbx
   17484:	48 83 ec 18          	sub    $0x18,%rsp
   17488:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1748c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   17490:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17494:	48 89 c7             	mov    %rax,%rdi
   17497:	e8 1e 00 00 00       	call   174ba <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   1749c:	48 8b 18             	mov    (%rax),%rbx
   1749f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   174a3:	48 89 c7             	mov    %rax,%rdi
   174a6:	e8 0f 00 00 00       	call   174ba <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   174ab:	48 8b 00             	mov    (%rax),%rax
   174ae:	48 39 c3             	cmp    %rax,%rbx
   174b1:	0f 94 c0             	sete   %al
   174b4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   174b8:	c9                   	leave
   174b9:	c3                   	ret

00000000000174ba <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   174ba:	55                   	push   %rbp
   174bb:	48 89 e5             	mov    %rsp,%rbp
   174be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   174c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   174c6:	5d                   	pop    %rbp
   174c7:	c3                   	ret

00000000000174c8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   174c8:	55                   	push   %rbp
   174c9:	48 89 e5             	mov    %rsp,%rbp
   174cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   174d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   174d4:	48 8b 00             	mov    (%rax),%rax
   174d7:	5d                   	pop    %rbp
   174d8:	c3                   	ret
   174d9:	90                   	nop

00000000000174da <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
   174da:	55                   	push   %rbp
   174db:	48 89 e5             	mov    %rsp,%rbp
   174de:	48 83 ec 20          	sub    $0x20,%rsp
   174e2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
   174e6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   174ea:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   174ee:	48 89 d6             	mov    %rdx,%rsi
   174f1:	48 89 c7             	mov    %rax,%rdi
   174f4:	e8 07 00 00 00       	call   17500 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
   174f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   174fd:	c9                   	leave
   174fe:	c3                   	ret
   174ff:	90                   	nop

0000000000017500 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   17500:	55                   	push   %rbp
   17501:	48 89 e5             	mov    %rsp,%rbp
   17504:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17508:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1750c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17510:	48 8b 10             	mov    (%rax),%rdx
   17513:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17517:	48 89 10             	mov    %rdx,(%rax)
   1751a:	90                   	nop
   1751b:	5d                   	pop    %rbp
   1751c:	c3                   	ret
   1751d:	90                   	nop

000000000001751e <_ZNKSt6vectorIPKcSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
   1751e:	55                   	push   %rbp
   1751f:	48 89 e5             	mov    %rsp,%rbp
   17522:	48 83 ec 20          	sub    $0x20,%rsp
   17526:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
   1752a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1752e:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17532:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17536:	48 89 d6             	mov    %rdx,%rsi
   17539:	48 89 c7             	mov    %rax,%rdi
   1753c:	e8 bf ff ff ff       	call   17500 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
   17541:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17545:	c9                   	leave
   17546:	c3                   	ret

0000000000017547 <_ZN9__gnu_cxxeqIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   17547:	55                   	push   %rbp
   17548:	48 89 e5             	mov    %rsp,%rbp
   1754b:	53                   	push   %rbx
   1754c:	48 83 ec 18          	sub    $0x18,%rsp
   17550:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17554:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   17558:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1755c:	48 89 c7             	mov    %rax,%rdi
   1755f:	e8 1e 00 00 00       	call   17582 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   17564:	48 8b 18             	mov    (%rax),%rbx
   17567:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1756b:	48 89 c7             	mov    %rax,%rdi
   1756e:	e8 0f 00 00 00       	call   17582 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   17573:	48 8b 00             	mov    (%rax),%rax
   17576:	48 39 c3             	cmp    %rax,%rbx
   17579:	0f 94 c0             	sete   %al
   1757c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17580:	c9                   	leave
   17581:	c3                   	ret

0000000000017582 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   17582:	55                   	push   %rbp
   17583:	48 89 e5             	mov    %rsp,%rbp
   17586:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1758a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1758e:	5d                   	pop    %rbp
   1758f:	c3                   	ret

0000000000017590 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   17590:	55                   	push   %rbp
   17591:	48 89 e5             	mov    %rsp,%rbp
   17594:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   17598:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1759c:	48 8b 00             	mov    (%rax),%rax
   1759f:	5d                   	pop    %rbp
   175a0:	c3                   	ret

00000000000175a1 <_ZN9__gnu_cxxeqIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   175a1:	55                   	push   %rbp
   175a2:	48 89 e5             	mov    %rsp,%rbp
   175a5:	53                   	push   %rbx
   175a6:	48 83 ec 18          	sub    $0x18,%rsp
   175aa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   175ae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   175b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175b6:	48 89 c7             	mov    %rax,%rdi
   175b9:	e8 1e 00 00 00       	call   175dc <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   175be:	48 8b 18             	mov    (%rax),%rbx
   175c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   175c5:	48 89 c7             	mov    %rax,%rdi
   175c8:	e8 0f 00 00 00       	call   175dc <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   175cd:	48 8b 00             	mov    (%rax),%rax
   175d0:	48 39 c3             	cmp    %rax,%rbx
   175d3:	0f 94 c0             	sete   %al
   175d6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   175da:	c9                   	leave
   175db:	c3                   	ret

00000000000175dc <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   175dc:	55                   	push   %rbp
   175dd:	48 89 e5             	mov    %rsp,%rbp
   175e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   175e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   175e8:	5d                   	pop    %rbp
   175e9:	c3                   	ret

00000000000175ea <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   175ea:	55                   	push   %rbp
   175eb:	48 89 e5             	mov    %rsp,%rbp
   175ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   175f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   175f6:	48 8b 00             	mov    (%rax),%rax
   175f9:	5d                   	pop    %rbp
   175fa:	c3                   	ret
   175fb:	90                   	nop

00000000000175fc <_ZNKSt8optionalIjE9has_valueEv>:
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
      { return this->_M_is_engaged(); }

      constexpr bool has_value() const noexcept
   175fc:	55                   	push   %rbp
   175fd:	48 89 e5             	mov    %rsp,%rbp
   17600:	48 83 ec 10          	sub    $0x10,%rsp
   17604:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_is_engaged(); }
   17608:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1760c:	48 89 c7             	mov    %rax,%rdi
   1760f:	e8 02 00 00 00       	call   17616 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>
   17614:	c9                   	leave
   17615:	c3                   	ret

0000000000017616 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
   17616:	55                   	push   %rbp
   17617:	48 89 e5             	mov    %rsp,%rbp
   1761a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
   1761e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17622:	0f b6 40 04          	movzbl 0x4(%rax),%eax
   17626:	5d                   	pop    %rbp
   17627:	c3                   	ret

0000000000017628 <_ZNRSt8optionalIjE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
   17628:	55                   	push   %rbp
   17629:	48 89 e5             	mov    %rsp,%rbp
   1762c:	48 83 ec 10          	sub    $0x10,%rsp
   17630:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (this->_M_is_engaged())
   17634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17638:	48 89 c7             	mov    %rax,%rdi
   1763b:	e8 d6 ff ff ff       	call   17616 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>
   17640:	84 c0                	test   %al,%al
   17642:	74 0e                	je     17652 <_ZNRSt8optionalIjE5valueEv+0x2a>
	  return this->_M_get();
   17644:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17648:	48 89 c7             	mov    %rax,%rdi
   1764b:	e8 46 10 00 00       	call   18696 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv>
   17650:	eb 05                	jmp    17657 <_ZNRSt8optionalIjE5valueEv+0x2f>
	__throw_bad_optional_access();
   17652:	e8 e0 f6 ff ff       	call   16d37 <_ZSt27__throw_bad_optional_accessv>
      }
   17657:	c9                   	leave
   17658:	c3                   	ret
   17659:	90                   	nop

000000000001765a <_ZN2vk5FlagsINS_25DeviceQueueCreateFlagBitsEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   1765a:	55                   	push   %rbp
   1765b:	48 89 e5             	mov    %rsp,%rbp
   1765e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17662:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17666:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   1766c:	90                   	nop
   1766d:	5d                   	pop    %rbp
   1766e:	c3                   	ret
   1766f:	90                   	nop

0000000000017670 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   17670:	55                   	push   %rbp
   17671:	48 89 e5             	mov    %rsp,%rbp
   17674:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17678:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1767c:	48 8b 50 08          	mov    0x8(%rax),%rdx
   17680:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17684:	48 8b 00             	mov    (%rax),%rax
   17687:	48 29 c2             	sub    %rax,%rdx
   1768a:	48 89 d0             	mov    %rdx,%rax
   1768d:	48 c1 f8 03          	sar    $0x3,%rax
   17691:	5d                   	pop    %rbp
   17692:	c3                   	ret
   17693:	90                   	nop

0000000000017694 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   17694:	55                   	push   %rbp
   17695:	48 89 e5             	mov    %rsp,%rbp
   17698:	48 83 ec 10          	sub    $0x10,%rsp
   1769c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   176a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176a4:	48 8b 10             	mov    (%rax),%rdx
   176a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176ab:	48 89 d6             	mov    %rdx,%rsi
   176ae:	48 89 c7             	mov    %rax,%rdi
   176b1:	e8 24 10 00 00       	call   186da <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   176b6:	c9                   	leave
   176b7:	c3                   	ret

00000000000176b8 <_ZN2vk5FlagsINS_20DeviceCreateFlagBitsEEC1Ev>:
   176b8:	55                   	push   %rbp
   176b9:	48 89 e5             	mov    %rsp,%rbp
   176bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   176c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176c4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   176ca:	90                   	nop
   176cb:	5d                   	pop    %rbp
   176cc:	c3                   	ret
   176cd:	90                   	nop

00000000000176ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   176ce:	55                   	push   %rbp
   176cf:	48 89 e5             	mov    %rsp,%rbp
   176d2:	48 83 ec 10          	sub    $0x10,%rsp
   176d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
   176da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176de:	48 89 c7             	mov    %rax,%rdi
   176e1:	e8 84 32 ff ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
   176e6:	c9                   	leave
   176e7:	c3                   	ret

00000000000176e8 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1ES1_>:
    VULKAN_HPP_CONSTEXPR Flags( BitType bit ) VULKAN_HPP_NOEXCEPT : m_mask( static_cast<MaskType>( bit ) ) {}
   176e8:	55                   	push   %rbp
   176e9:	48 89 e5             	mov    %rsp,%rbp
   176ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   176f0:	89 75 f4             	mov    %esi,-0xc(%rbp)
   176f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176f7:	8b 55 f4             	mov    -0xc(%rbp),%edx
   176fa:	89 10                	mov    %edx,(%rax)
   176fc:	90                   	nop
   176fd:	5d                   	pop    %rbp
   176fe:	c3                   	ret
   176ff:	90                   	nop

0000000000017700 <_ZNK2vk5FlagsINS_13QueueFlagBitsEEanERKS2_>:
    VULKAN_HPP_CONSTEXPR Flags<BitType> operator&( Flags<BitType> const & rhs ) const VULKAN_HPP_NOEXCEPT
   17700:	55                   	push   %rbp
   17701:	48 89 e5             	mov    %rsp,%rbp
   17704:	48 83 ec 20          	sub    $0x20,%rsp
   17708:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1770c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return Flags<BitType>( m_mask & rhs.m_mask );
   17710:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17714:	8b 10                	mov    (%rax),%edx
   17716:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1771a:	8b 00                	mov    (%rax),%eax
   1771c:	21 c2                	and    %eax,%edx
   1771e:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
   17722:	89 d6                	mov    %edx,%esi
   17724:	48 89 c7             	mov    %rax,%rdi
   17727:	e8 da 0f 00 00       	call   18706 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ej>
   1772c:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
   1772f:	c9                   	leave
   17730:	c3                   	ret
   17731:	90                   	nop

0000000000017732 <_ZNK2vk5FlagsINS_13QueueFlagBitsEEcvbEv>:
    explicit VULKAN_HPP_CONSTEXPR operator bool() const VULKAN_HPP_NOEXCEPT
   17732:	55                   	push   %rbp
   17733:	48 89 e5             	mov    %rsp,%rbp
   17736:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return !!m_mask;
   1773a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1773e:	8b 00                	mov    (%rax),%eax
   17740:	85 c0                	test   %eax,%eax
   17742:	0f 95 c0             	setne  %al
    }
   17745:	5d                   	pop    %rbp
   17746:	c3                   	ret
   17747:	90                   	nop

0000000000017748 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   17748:	55                   	push   %rbp
   17749:	48 89 e5             	mov    %rsp,%rbp
   1774c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17750:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17754:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   1775a:	90                   	nop
   1775b:	5d                   	pop    %rbp
   1775c:	c3                   	ret
   1775d:	90                   	nop

000000000001775e <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>:
    operator RefType *() const VULKAN_HPP_NOEXCEPT
   1775e:	55                   	push   %rbp
   1775f:	48 89 e5             	mov    %rsp,%rbp
   17762:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return m_ptr;
   17766:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1776a:	48 8b 00             	mov    (%rax),%rax
    }
   1776d:	5d                   	pop    %rbp
   1776e:	c3                   	ret
   1776f:	90                   	nop

0000000000017770 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   17770:	55                   	push   %rbp
   17771:	48 89 e5             	mov    %rsp,%rbp
   17774:	48 83 ec 10          	sub    $0x10,%rsp
   17778:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   1777c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17780:	48 89 c7             	mov    %rax,%rdi
   17783:	e8 2e 10 00 00       	call   187b6 <_ZNSaIN2vk4raii14PhysicalDeviceEEC1Ev>
   17788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1778c:	48 89 c7             	mov    %rax,%rdi
   1778f:	e8 3e 10 00 00       	call   187d2 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
   17794:	90                   	nop
   17795:	c9                   	leave
   17796:	c3                   	ret
   17797:	90                   	nop

0000000000017798 <_ZNSaIN2vk4raii14PhysicalDeviceEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   17798:	55                   	push   %rbp
   17799:	48 89 e5             	mov    %rsp,%rbp
   1779c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   177a0:	90                   	nop
   177a1:	5d                   	pop    %rbp
   177a2:	c3                   	ret
   177a3:	90                   	nop

00000000000177a4 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   177a4:	55                   	push   %rbp
   177a5:	48 89 e5             	mov    %rsp,%rbp
   177a8:	48 83 ec 10          	sub    $0x10,%rsp
   177ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   177b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   177b4:	48 8b 50 10          	mov    0x10(%rax),%rdx
   177b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   177bc:	48 8b 00             	mov    (%rax),%rax
   177bf:	48 29 c2             	sub    %rax,%rdx
   177c2:	48 89 d0             	mov    %rdx,%rax
   177c5:	48 c1 f8 04          	sar    $0x4,%rax
	_M_deallocate(_M_impl._M_start,
   177c9:	48 89 c2             	mov    %rax,%rdx
   177cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   177d0:	48 8b 08             	mov    (%rax),%rcx
   177d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   177d7:	48 89 ce             	mov    %rcx,%rsi
   177da:	48 89 c7             	mov    %rax,%rdi
   177dd:	e8 1e 10 00 00       	call   18800 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>
      }
   177e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   177e6:	48 89 c7             	mov    %rax,%rdi
   177e9:	e8 7c ee ff ff       	call   1666a <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implD1Ev>
   177ee:	90                   	nop
   177ef:	c9                   	leave
   177f0:	c3                   	ret
   177f1:	90                   	nop

00000000000177f2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   177f2:	55                   	push   %rbp
   177f3:	48 89 e5             	mov    %rsp,%rbp
   177f6:	48 83 ec 10          	sub    $0x10,%rsp
   177fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   177fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17802:	48 89 c7             	mov    %rax,%rdi
   17805:	e8 2c 10 00 00       	call   18836 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   1780a:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1780d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17811:	48 8b 48 08          	mov    0x8(%rax),%rcx
   17815:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17819:	48 8b 00             	mov    (%rax),%rax
   1781c:	48 89 ce             	mov    %rcx,%rsi
   1781f:	48 89 c7             	mov    %rax,%rdi
   17822:	e8 1d 10 00 00       	call   18844 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceES2_EvT_S4_RSaIT0_E>
      }
   17827:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1782b:	48 89 c7             	mov    %rax,%rdi
   1782e:	e8 71 ff ff ff       	call   177a4 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>
   17833:	90                   	nop
   17834:	c9                   	leave
   17835:	c3                   	ret

0000000000017836 <_ZNSaIP18VkPhysicalDevice_TED1Ev>:
   17836:	55                   	push   %rbp
   17837:	48 89 e5             	mov    %rsp,%rbp
   1783a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1783e:	90                   	nop
   1783f:	5d                   	pop    %rbp
   17840:	c3                   	ret
   17841:	90                   	nop

0000000000017842 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17842:	55                   	push   %rbp
   17843:	48 89 e5             	mov    %rsp,%rbp
   17846:	48 83 ec 10          	sub    $0x10,%rsp
   1784a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1784e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17852:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17856:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1785a:	48 8b 00             	mov    (%rax),%rax
   1785d:	48 29 c2             	sub    %rax,%rdx
   17860:	48 89 d0             	mov    %rdx,%rax
   17863:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   17867:	48 89 c2             	mov    %rax,%rdx
   1786a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1786e:	48 8b 08             	mov    (%rax),%rcx
   17871:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17875:	48 89 ce             	mov    %rcx,%rsi
   17878:	48 89 c7             	mov    %rax,%rdi
   1787b:	e8 ee 0f 00 00       	call   1886e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   17880:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17884:	48 89 c7             	mov    %rax,%rdi
   17887:	e8 32 ee ff ff       	call   166be <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>
   1788c:	90                   	nop
   1788d:	c9                   	leave
   1788e:	c3                   	ret
   1788f:	90                   	nop

0000000000017890 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   17890:	55                   	push   %rbp
   17891:	48 89 e5             	mov    %rsp,%rbp
   17894:	48 83 ec 10          	sub    $0x10,%rsp
   17898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   1789c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178a0:	48 89 c7             	mov    %rax,%rdi
   178a3:	e8 fc 0f 00 00       	call   188a4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   178a8:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   178ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178af:	48 8b 48 08          	mov    0x8(%rax),%rcx
   178b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178b7:	48 8b 00             	mov    (%rax),%rax
   178ba:	48 89 ce             	mov    %rcx,%rsi
   178bd:	48 89 c7             	mov    %rax,%rdi
   178c0:	e8 ed 0f 00 00       	call   188b2 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>
      }
   178c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178c9:	48 89 c7             	mov    %rax,%rdi
   178cc:	e8 71 ff ff ff       	call   17842 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   178d1:	90                   	nop
   178d2:	c9                   	leave
   178d3:	c3                   	ret

00000000000178d4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   178d4:	55                   	push   %rbp
   178d5:	48 89 e5             	mov    %rsp,%rbp
   178d8:	48 83 ec 10          	sub    $0x10,%rsp
   178dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   178e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   178e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178e8:	48 89 c7             	mov    %rax,%rdi
   178eb:	e8 8e 00 00 00       	call   1797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   178f0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   178f4:	0f 92 c0             	setb   %al
   178f7:	84 c0                	test   %al,%al
   178f9:	74 24                	je     1791f <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   178fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178ff:	48 89 c7             	mov    %rax,%rdi
   17902:	e8 77 00 00 00       	call   1797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   17907:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1790b:	48 29 c2             	sub    %rax,%rdx
   1790e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17912:	48 89 d6             	mov    %rdx,%rsi
   17915:	48 89 c7             	mov    %rax,%rdi
   17918:	e8 b3 10 00 00       	call   189d0 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm>
      }
   1791d:	eb 38                	jmp    17957 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   1791f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17923:	48 89 c7             	mov    %rax,%rdi
   17926:	e8 53 00 00 00       	call   1797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   1792b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   1792f:	0f 92 c0             	setb   %al
   17932:	84 c0                	test   %al,%al
   17934:	74 21                	je     17957 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   17936:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1793a:	48 8b 00             	mov    (%rax),%rax
   1793d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17941:	48 c1 e2 03          	shl    $0x3,%rdx
   17945:	48 01 c2             	add    %rax,%rdx
   17948:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1794c:	48 89 d6             	mov    %rdx,%rsi
   1794f:	48 89 c7             	mov    %rax,%rdi
   17952:	e8 83 12 00 00       	call   18bda <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
   17957:	90                   	nop
   17958:	c9                   	leave
   17959:	c3                   	ret

000000000001795a <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   1795a:	55                   	push   %rbp
   1795b:	48 89 e5             	mov    %rsp,%rbp
   1795e:	48 83 ec 10          	sub    $0x10,%rsp
   17962:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   17966:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1796a:	48 8b 10             	mov    (%rax),%rdx
   1796d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17971:	48 89 d6             	mov    %rdx,%rsi
   17974:	48 89 c7             	mov    %rax,%rdi
   17977:	e8 be 12 00 00       	call   18c3a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   1797c:	c9                   	leave
   1797d:	c3                   	ret

000000000001797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1797e:	55                   	push   %rbp
   1797f:	48 89 e5             	mov    %rsp,%rbp
   17982:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17986:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1798a:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1798e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17992:	48 8b 00             	mov    (%rax),%rax
   17995:	48 29 c2             	sub    %rax,%rdx
   17998:	48 89 d0             	mov    %rdx,%rax
   1799b:	48 c1 f8 03          	sar    $0x3,%rax
   1799f:	5d                   	pop    %rbp
   179a0:	c3                   	ret
   179a1:	90                   	nop

00000000000179a2 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   179a2:	55                   	push   %rbp
   179a3:	48 89 e5             	mov    %rsp,%rbp
   179a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   179aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   179ae:	48 8b 50 08          	mov    0x8(%rax),%rdx
   179b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   179b6:	48 8b 00             	mov    (%rax),%rax
   179b9:	48 29 c2             	sub    %rax,%rdx
   179bc:	48 89 d0             	mov    %rdx,%rax
   179bf:	48 c1 f8 04          	sar    $0x4,%rax
   179c3:	5d                   	pop    %rbp
   179c4:	c3                   	ret
   179c5:	90                   	nop

00000000000179c6 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm>:
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
   179c6:	55                   	push   %rbp
   179c7:	48 89 e5             	mov    %rsp,%rbp
   179ca:	48 83 ec 20          	sub    $0x20,%rsp
   179ce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   179d2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    reserve(size_type __n)
    {
      if (__n > this->max_size())
   179d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   179da:	48 89 c7             	mov    %rax,%rdi
   179dd:	e8 6a 12 00 00       	call   18c4c <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   179e2:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   179e6:	0f 92 c0             	setb   %al
   179e9:	84 c0                	test   %al,%al
   179eb:	74 0f                	je     179fc <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm+0x36>
	__throw_length_error(__N("vector::reserve"));
   179ed:	48 8d 05 ae 66 01 00 	lea    0x166ae(%rip),%rax        # 2e0a2 <_ZNSt8__detailL19__atomic_spin_countE+0x38ae>
   179f4:	48 89 c7             	mov    %rax,%rdi
   179f7:	e8 e4 d6 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      if (this->capacity() < __n)
   179fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17a00:	48 89 c7             	mov    %rax,%rdi
   17a03:	e8 66 12 00 00       	call   18c6e <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8capacityEv>
   17a08:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   17a0c:	0f 92 c0             	setb   %al
   17a0f:	84 c0                	test   %al,%al
   17a11:	0f 84 c5 00 00 00    	je     17adc <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm+0x116>
	{
	  const size_type __old_size = size();
   17a17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17a1b:	48 89 c7             	mov    %rax,%rdi
   17a1e:	e8 7f ff ff ff       	call   179a2 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   17a23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __tmp = this->_M_allocate(__n);
   17a27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17a2b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   17a2f:	48 89 d6             	mov    %rdx,%rsi
   17a32:	48 89 c7             	mov    %rax,%rdi
   17a35:	e8 58 12 00 00       	call   18c92 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm>
   17a3a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
			  __tmp, _M_get_Tp_allocator());
   17a3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17a42:	48 89 c7             	mov    %rax,%rdi
   17a45:	e8 ec 0d 00 00       	call   18836 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   17a4a:	48 89 c1             	mov    %rax,%rcx
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   17a4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17a51:	48 8b 70 08          	mov    0x8(%rax),%rsi
   17a55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17a59:	48 8b 00             	mov    (%rax),%rax
   17a5c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17a60:	48 89 c7             	mov    %rax,%rdi
   17a63:	e8 5d 12 00 00       	call   18cc5 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
   17a68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
			this->_M_impl._M_end_of_storage
   17a6c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17a70:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			- this->_M_impl._M_start);
   17a74:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17a78:	48 8b 12             	mov    (%rdx),%rdx
   17a7b:	48 29 d1             	sub    %rdx,%rcx
   17a7e:	48 c1 f9 04          	sar    $0x4,%rcx
   17a82:	48 89 ca             	mov    %rcx,%rdx
	  _M_deallocate(this->_M_impl._M_start,
   17a85:	48 89 d6             	mov    %rdx,%rsi
   17a88:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17a8c:	48 8b 0a             	mov    (%rdx),%rcx
   17a8f:	48 89 f2             	mov    %rsi,%rdx
   17a92:	48 89 ce             	mov    %rcx,%rsi
   17a95:	48 89 c7             	mov    %rax,%rdi
   17a98:	e8 63 0d 00 00       	call   18800 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>
	  this->_M_impl._M_start = __tmp;
   17a9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17aa1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17aa5:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_finish = __tmp + __old_size;
   17aa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17aac:	48 c1 e0 04          	shl    $0x4,%rax
   17ab0:	48 89 c2             	mov    %rax,%rdx
   17ab3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17ab7:	48 01 c2             	add    %rax,%rdx
   17aba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17abe:	48 89 50 08          	mov    %rdx,0x8(%rax)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   17ac2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17ac6:	48 8b 00             	mov    (%rax),%rax
   17ac9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   17acd:	48 c1 e2 04          	shl    $0x4,%rdx
   17ad1:	48 01 c2             	add    %rax,%rdx
   17ad4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17ad8:	48 89 50 10          	mov    %rdx,0x10(%rax)
	}
    }
   17adc:	90                   	nop
   17add:	c9                   	leave
   17ade:	c3                   	ret
   17adf:	90                   	nop

0000000000017ae0 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   17ae0:	55                   	push   %rbp
   17ae1:	48 89 e5             	mov    %rsp,%rbp
   17ae4:	48 83 ec 20          	sub    $0x20,%rsp
   17ae8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   17aec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17af0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17af4:	48 89 d6             	mov    %rdx,%rsi
   17af7:	48 89 c7             	mov    %rax,%rdi
   17afa:	e8 f9 11 00 00       	call   18cf8 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   17aff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b03:	c9                   	leave
   17b04:	c3                   	ret
   17b05:	90                   	nop

0000000000017b06 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   17b06:	55                   	push   %rbp
   17b07:	48 89 e5             	mov    %rsp,%rbp
   17b0a:	48 83 ec 20          	sub    $0x20,%rsp
   17b0e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   17b12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17b16:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17b1a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17b1e:	48 89 d6             	mov    %rdx,%rsi
   17b21:	48 89 c7             	mov    %rax,%rdi
   17b24:	e8 cf 11 00 00       	call   18cf8 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   17b29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b2d:	c9                   	leave
   17b2e:	c3                   	ret
   17b2f:	90                   	nop

0000000000017b30 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   17b30:	55                   	push   %rbp
   17b31:	48 89 e5             	mov    %rsp,%rbp
   17b34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   17b38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b3c:	48 8b 00             	mov    (%rax),%rax
   17b3f:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17b43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b47:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   17b4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   17b4e:	5d                   	pop    %rbp
   17b4f:	c3                   	ret

0000000000017b50 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
   17b50:	55                   	push   %rbp
   17b51:	48 89 e5             	mov    %rsp,%rbp
   17b54:	41 54                	push   %r12
   17b56:	53                   	push   %rbx
   17b57:	48 83 ec 20          	sub    $0x20,%rsp
   17b5b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17b5f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   17b63:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   17b67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17b6b:	48 8b 50 08          	mov    0x8(%rax),%rdx
   17b6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17b73:	48 8b 40 10          	mov    0x10(%rax),%rax
   17b77:	48 39 c2             	cmp    %rax,%rdx
   17b7a:	74 4b                	je     17bc7 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_+0x77>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
   17b7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17b80:	48 89 c7             	mov    %rax,%rdi
   17b83:	e8 9b 11 00 00       	call   18d23 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   17b88:	48 89 c3             	mov    %rax,%rbx
   17b8b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17b8f:	48 89 c7             	mov    %rax,%rdi
   17b92:	e8 7e 11 00 00       	call   18d15 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   17b97:	48 89 c2             	mov    %rax,%rdx
   17b9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17b9e:	48 8b 70 08          	mov    0x8(%rax),%rsi
   17ba2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17ba6:	48 89 d9             	mov    %rbx,%rcx
   17ba9:	48 89 c7             	mov    %rax,%rdi
   17bac:	e8 80 11 00 00       	call   18d31 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
   17bb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17bb5:	48 8b 40 08          	mov    0x8(%rax),%rax
   17bb9:	48 8d 50 10          	lea    0x10(%rax),%rdx
   17bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17bc1:	48 89 50 08          	mov    %rdx,0x8(%rax)
   17bc5:	eb 3f                	jmp    17c06 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_+0xb6>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   17bc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17bcb:	48 89 c7             	mov    %rax,%rdi
   17bce:	e8 50 11 00 00       	call   18d23 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   17bd3:	49 89 c4             	mov    %rax,%r12
   17bd6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17bda:	48 89 c7             	mov    %rax,%rdi
   17bdd:	e8 33 11 00 00       	call   18d15 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   17be2:	48 89 c3             	mov    %rax,%rbx
   17be5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17be9:	48 89 c7             	mov    %rax,%rdi
   17bec:	e8 e7 06 00 00       	call   182d8 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>
   17bf1:	48 89 c6             	mov    %rax,%rsi
   17bf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17bf8:	4c 89 e1             	mov    %r12,%rcx
   17bfb:	48 89 da             	mov    %rbx,%rdx
   17bfe:	48 89 c7             	mov    %rax,%rdi
   17c01:	e8 86 12 00 00       	call   18e8c <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE17_M_realloc_insertIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
#if __cplusplus > 201402L
	return back();
   17c06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17c0a:	48 89 c7             	mov    %rax,%rdi
   17c0d:	e8 1e 14 00 00       	call   19030 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4backEv>
#endif
      }
   17c12:	48 83 c4 20          	add    $0x20,%rsp
   17c16:	5b                   	pop    %rbx
   17c17:	41 5c                	pop    %r12
   17c19:	5d                   	pop    %rbp
   17c1a:	c3                   	ret
   17c1b:	90                   	nop

0000000000017c1c <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1Ev>:
      __uniq_ptr_impl() = default;
   17c1c:	55                   	push   %rbp
   17c1d:	48 89 e5             	mov    %rsp,%rbp
   17c20:	48 83 ec 10          	sub    $0x10,%rsp
   17c24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c2c:	48 89 c7             	mov    %rax,%rdi
   17c2f:	e8 3c 14 00 00       	call   19070 <_ZNSt5tupleIJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
   17c34:	90                   	nop
   17c35:	c9                   	leave
   17c36:	c3                   	ret
   17c37:	90                   	nop

0000000000017c38 <_ZNSt15__uniq_ptr_dataIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
   17c38:	55                   	push   %rbp
   17c39:	48 89 e5             	mov    %rsp,%rbp
   17c3c:	48 83 ec 10          	sub    $0x10,%rsp
   17c40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c48:	48 89 c7             	mov    %rax,%rdi
   17c4b:	e8 cc ff ff ff       	call   17c1c <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1Ev>
   17c50:	90                   	nop
   17c51:	c9                   	leave
   17c52:	c3                   	ret
   17c53:	90                   	nop

0000000000017c54 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>:
	constexpr unique_ptr() noexcept
   17c54:	55                   	push   %rbp
   17c55:	48 89 e5             	mov    %rsp,%rbp
   17c58:	48 83 ec 10          	sub    $0x10,%rsp
   17c5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_t()
   17c60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c64:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   17c6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c6f:	48 89 c7             	mov    %rax,%rdi
   17c72:	e8 c1 ff ff ff       	call   17c38 <_ZNSt15__uniq_ptr_dataIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>
	{ }
   17c77:	90                   	nop
   17c78:	c9                   	leave
   17c79:	c3                   	ret

0000000000017c7a <_ZNSaIN2vk21QueueFamilyPropertiesEED1Ev>:
   17c7a:	55                   	push   %rbp
   17c7b:	48 89 e5             	mov    %rsp,%rbp
   17c7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c82:	90                   	nop
   17c83:	5d                   	pop    %rbp
   17c84:	c3                   	ret
   17c85:	90                   	nop

0000000000017c86 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17c86:	55                   	push   %rbp
   17c87:	48 89 e5             	mov    %rsp,%rbp
   17c8a:	48 83 ec 10          	sub    $0x10,%rsp
   17c8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   17c92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c96:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17c9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c9e:	48 8b 00             	mov    (%rax),%rax
   17ca1:	48 29 c2             	sub    %rax,%rdx
   17ca4:	48 c1 fa 03          	sar    $0x3,%rdx
   17ca8:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   17caf:	aa aa aa 
   17cb2:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   17cb6:	48 89 c2             	mov    %rax,%rdx
   17cb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cbd:	48 8b 08             	mov    (%rax),%rcx
   17cc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cc4:	48 89 ce             	mov    %rcx,%rsi
   17cc7:	48 89 c7             	mov    %rax,%rdi
   17cca:	e8 bd 13 00 00       	call   1908c <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>
      }
   17ccf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cd3:	48 89 c7             	mov    %rax,%rdi
   17cd6:	e8 6b ef ff ff       	call   16c46 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE12_Vector_implD1Ev>
   17cdb:	90                   	nop
   17cdc:	c9                   	leave
   17cdd:	c3                   	ret

0000000000017cde <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   17cde:	55                   	push   %rbp
   17cdf:	48 89 e5             	mov    %rsp,%rbp
   17ce2:	48 83 ec 10          	sub    $0x10,%rsp
   17ce6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   17cea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cee:	48 89 c7             	mov    %rax,%rdi
   17cf1:	e8 cc 13 00 00       	call   190c2 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   17cf6:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17cf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cfd:	48 8b 48 08          	mov    0x8(%rax),%rcx
   17d01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d05:	48 8b 00             	mov    (%rax),%rax
   17d08:	48 89 ce             	mov    %rcx,%rsi
   17d0b:	48 89 c7             	mov    %rax,%rdi
   17d0e:	e8 bd 13 00 00       	call   190d0 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesES1_EvT_S3_RSaIT0_E>
      }
   17d13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d17:	48 89 c7             	mov    %rax,%rdi
   17d1a:	e8 67 ff ff ff       	call   17c86 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
   17d1f:	90                   	nop
   17d20:	c9                   	leave
   17d21:	c3                   	ret

0000000000017d22 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   17d22:	55                   	push   %rbp
   17d23:	48 89 e5             	mov    %rsp,%rbp
   17d26:	48 83 ec 10          	sub    $0x10,%rsp
   17d2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17d2e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   17d32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d36:	48 89 c7             	mov    %rax,%rdi
   17d39:	e8 98 00 00 00       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   17d3e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   17d42:	0f 92 c0             	setb   %al
   17d45:	84 c0                	test   %al,%al
   17d47:	74 24                	je     17d6d <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   17d49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d4d:	48 89 c7             	mov    %rax,%rdi
   17d50:	e8 81 00 00 00       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   17d55:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17d59:	48 29 c2             	sub    %rax,%rdx
   17d5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d60:	48 89 d6             	mov    %rdx,%rsi
   17d63:	48 89 c7             	mov    %rax,%rdi
   17d66:	e8 57 14 00 00       	call   191c2 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm>
      }
   17d6b:	eb 42                	jmp    17daf <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm+0x8d>
	else if (__new_size < size())
   17d6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d71:	48 89 c7             	mov    %rax,%rdi
   17d74:	e8 5d 00 00 00       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   17d79:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   17d7d:	0f 92 c0             	setb   %al
   17d80:	84 c0                	test   %al,%al
   17d82:	74 2b                	je     17daf <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm+0x8d>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   17d84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d88:	48 8b 08             	mov    (%rax),%rcx
   17d8b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17d8f:	48 89 d0             	mov    %rdx,%rax
   17d92:	48 01 c0             	add    %rax,%rax
   17d95:	48 01 d0             	add    %rdx,%rax
   17d98:	48 c1 e0 03          	shl    $0x3,%rax
   17d9c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   17da0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17da4:	48 89 d6             	mov    %rdx,%rsi
   17da7:	48 89 c7             	mov    %rax,%rdi
   17daa:	e8 4f 16 00 00       	call   193fe <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE15_M_erase_at_endEPS1_>
      }
   17daf:	90                   	nop
   17db0:	c9                   	leave
   17db1:	c3                   	ret

0000000000017db2 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   17db2:	55                   	push   %rbp
   17db3:	48 89 e5             	mov    %rsp,%rbp
   17db6:	48 83 ec 10          	sub    $0x10,%rsp
   17dba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   17dbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17dc2:	48 8b 10             	mov    (%rax),%rdx
   17dc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17dc9:	48 89 d6             	mov    %rdx,%rsi
   17dcc:	48 89 c7             	mov    %rax,%rdi
   17dcf:	e8 9c 16 00 00       	call   19470 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   17dd4:	c9                   	leave
   17dd5:	c3                   	ret

0000000000017dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   17dd6:	55                   	push   %rbp
   17dd7:	48 89 e5             	mov    %rsp,%rbp
   17dda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17dde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17de2:	48 8b 50 08          	mov    0x8(%rax),%rdx
   17de6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17dea:	48 8b 00             	mov    (%rax),%rax
   17ded:	48 29 c2             	sub    %rax,%rdx
   17df0:	48 c1 fa 03          	sar    $0x3,%rdx
   17df4:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   17dfb:	aa aa aa 
   17dfe:	48 0f af c2          	imul   %rdx,%rax
   17e02:	5d                   	pop    %rbp
   17e03:	c3                   	ret

0000000000017e04 <_ZNSaIN2vk19ExtensionPropertiesEED1Ev>:
   17e04:	55                   	push   %rbp
   17e05:	48 89 e5             	mov    %rsp,%rbp
   17e08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17e0c:	90                   	nop
   17e0d:	5d                   	pop    %rbp
   17e0e:	c3                   	ret
   17e0f:	90                   	nop

0000000000017e10 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17e10:	55                   	push   %rbp
   17e11:	48 89 e5             	mov    %rsp,%rbp
   17e14:	48 83 ec 10          	sub    $0x10,%rsp
   17e18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   17e1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17e20:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17e24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17e28:	48 8b 00             	mov    (%rax),%rax
   17e2b:	48 29 c2             	sub    %rax,%rdx
   17e2e:	48 c1 fa 02          	sar    $0x2,%rdx
   17e32:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   17e39:	fc c0 0f 
   17e3c:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   17e40:	48 89 c2             	mov    %rax,%rdx
   17e43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17e47:	48 8b 08             	mov    (%rax),%rcx
   17e4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17e4e:	48 89 ce             	mov    %rcx,%rsi
   17e51:	48 89 c7             	mov    %rax,%rdi
   17e54:	e8 29 16 00 00       	call   19482 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>
      }
   17e59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17e5d:	48 89 c7             	mov    %rax,%rdi
   17e60:	e8 fd ed ff ff       	call   16c62 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE12_Vector_implD1Ev>
   17e65:	90                   	nop
   17e66:	c9                   	leave
   17e67:	c3                   	ret

0000000000017e68 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   17e68:	55                   	push   %rbp
   17e69:	48 89 e5             	mov    %rsp,%rbp
   17e6c:	48 83 ec 10          	sub    $0x10,%rsp
   17e70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   17e74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17e78:	48 89 c7             	mov    %rax,%rdi
   17e7b:	e8 38 16 00 00       	call   194b8 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   17e80:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17e83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17e87:	48 8b 48 08          	mov    0x8(%rax),%rcx
   17e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17e8f:	48 8b 00             	mov    (%rax),%rax
   17e92:	48 89 ce             	mov    %rcx,%rsi
   17e95:	48 89 c7             	mov    %rax,%rdi
   17e98:	e8 29 16 00 00       	call   194c6 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesES1_EvT_S3_RSaIT0_E>
      }
   17e9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ea1:	48 89 c7             	mov    %rax,%rdi
   17ea4:	e8 67 ff ff ff       	call   17e10 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
   17ea9:	90                   	nop
   17eaa:	c9                   	leave
   17eab:	c3                   	ret

0000000000017eac <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv>:
    RefType const * operator->() const VULKAN_HPP_NOEXCEPT
   17eac:	55                   	push   %rbp
   17ead:	48 89 e5             	mov    %rsp,%rbp
   17eb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return m_ptr;
   17eb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17eb8:	48 8b 00             	mov    (%rax),%rax
    }
   17ebb:	5d                   	pop    %rbp
   17ebc:	c3                   	ret
   17ebd:	90                   	nop

0000000000017ebe <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvbEv>:
    explicit operator bool() const VULKAN_HPP_NOEXCEPT
   17ebe:	55                   	push   %rbp
   17ebf:	48 89 e5             	mov    %rsp,%rbp
   17ec2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return !!m_ptr;
   17ec6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17eca:	48 8b 00             	mov    (%rax),%rax
   17ecd:	48 85 c0             	test   %rax,%rax
   17ed0:	0f 95 c0             	setne  %al
    }
   17ed3:	5d                   	pop    %rbp
   17ed4:	c3                   	ret
   17ed5:	90                   	nop

0000000000017ed6 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   17ed6:	55                   	push   %rbp
   17ed7:	48 89 e5             	mov    %rsp,%rbp
   17eda:	48 83 ec 10          	sub    $0x10,%rsp
   17ede:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ee2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   17ee6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17eea:	48 89 c7             	mov    %rax,%rdi
   17eed:	e8 9a 00 00 00       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   17ef2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   17ef6:	0f 92 c0             	setb   %al
   17ef9:	84 c0                	test   %al,%al
   17efb:	74 24                	je     17f21 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   17efd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f01:	48 89 c7             	mov    %rax,%rdi
   17f04:	e8 83 00 00 00       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   17f09:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17f0d:	48 29 c2             	sub    %rax,%rdx
   17f10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f14:	48 89 d6             	mov    %rdx,%rsi
   17f17:	48 89 c7             	mov    %rax,%rdi
   17f1a:	e8 99 16 00 00       	call   195b8 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm>
      }
   17f1f:	eb 43                	jmp    17f64 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm+0x8e>
	else if (__new_size < size())
   17f21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f25:	48 89 c7             	mov    %rax,%rdi
   17f28:	e8 5f 00 00 00       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   17f2d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   17f31:	0f 92 c0             	setb   %al
   17f34:	84 c0                	test   %al,%al
   17f36:	74 2c                	je     17f64 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm+0x8e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   17f38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f3c:	48 8b 08             	mov    (%rax),%rcx
   17f3f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17f43:	48 89 d0             	mov    %rdx,%rax
   17f46:	48 c1 e0 06          	shl    $0x6,%rax
   17f4a:	48 01 d0             	add    %rdx,%rax
   17f4d:	48 c1 e0 02          	shl    $0x2,%rax
   17f51:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   17f55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f59:	48 89 d6             	mov    %rdx,%rsi
   17f5c:	48 89 c7             	mov    %rax,%rdi
   17f5f:	e8 94 18 00 00       	call   197f8 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE15_M_erase_at_endEPS1_>
      }
   17f64:	90                   	nop
   17f65:	c9                   	leave
   17f66:	c3                   	ret
   17f67:	90                   	nop

0000000000017f68 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   17f68:	55                   	push   %rbp
   17f69:	48 89 e5             	mov    %rsp,%rbp
   17f6c:	48 83 ec 10          	sub    $0x10,%rsp
   17f70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   17f74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f78:	48 8b 10             	mov    (%rax),%rdx
   17f7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f7f:	48 89 d6             	mov    %rdx,%rsi
   17f82:	48 89 c7             	mov    %rax,%rdi
   17f85:	e8 e0 18 00 00       	call   1986a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   17f8a:	c9                   	leave
   17f8b:	c3                   	ret

0000000000017f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   17f8c:	55                   	push   %rbp
   17f8d:	48 89 e5             	mov    %rsp,%rbp
   17f90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f98:	48 8b 50 08          	mov    0x8(%rax),%rdx
   17f9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fa0:	48 8b 00             	mov    (%rax),%rax
   17fa3:	48 29 c2             	sub    %rax,%rdx
   17fa6:	48 c1 fa 02          	sar    $0x2,%rdx
   17faa:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   17fb1:	fc c0 0f 
   17fb4:	48 0f af c2          	imul   %rdx,%rax
   17fb8:	5d                   	pop    %rbp
   17fb9:	c3                   	ret

0000000000017fba <_ZNSaIN2vk15LayerPropertiesEED1Ev>:
   17fba:	55                   	push   %rbp
   17fbb:	48 89 e5             	mov    %rsp,%rbp
   17fbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17fc2:	90                   	nop
   17fc3:	5d                   	pop    %rbp
   17fc4:	c3                   	ret
   17fc5:	90                   	nop

0000000000017fc6 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17fc6:	55                   	push   %rbp
   17fc7:	48 89 e5             	mov    %rsp,%rbp
   17fca:	48 83 ec 10          	sub    $0x10,%rsp
   17fce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   17fd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fd6:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17fda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fde:	48 8b 00             	mov    (%rax),%rax
   17fe1:	48 29 c2             	sub    %rax,%rdx
   17fe4:	48 c1 fa 03          	sar    $0x3,%rdx
   17fe8:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   17fef:	fc c0 0f 
   17ff2:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   17ff6:	48 89 c2             	mov    %rax,%rdx
   17ff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ffd:	48 8b 08             	mov    (%rax),%rcx
   18000:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18004:	48 89 ce             	mov    %rcx,%rsi
   18007:	48 89 c7             	mov    %rax,%rdi
   1800a:	e8 6d 18 00 00       	call   1987c <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>
      }
   1800f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18013:	48 89 c7             	mov    %rax,%rdi
   18016:	e8 63 ec ff ff       	call   16c7e <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implD1Ev>
   1801b:	90                   	nop
   1801c:	c9                   	leave
   1801d:	c3                   	ret

000000000001801e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1801e:	55                   	push   %rbp
   1801f:	48 89 e5             	mov    %rsp,%rbp
   18022:	48 83 ec 10          	sub    $0x10,%rsp
   18026:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   1802a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1802e:	48 89 c7             	mov    %rax,%rdi
   18031:	e8 7c 18 00 00       	call   198b2 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   18036:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1803d:	48 8b 48 08          	mov    0x8(%rax),%rcx
   18041:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18045:	48 8b 00             	mov    (%rax),%rax
   18048:	48 89 ce             	mov    %rcx,%rsi
   1804b:	48 89 c7             	mov    %rax,%rdi
   1804e:	e8 6d 18 00 00       	call   198c0 <_ZSt8_DestroyIPN2vk15LayerPropertiesES1_EvT_S3_RSaIT0_E>
      }
   18053:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18057:	48 89 c7             	mov    %rax,%rdi
   1805a:	e8 67 ff ff ff       	call   17fc6 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EED1Ev>
   1805f:	90                   	nop
   18060:	c9                   	leave
   18061:	c3                   	ret

0000000000018062 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   18062:	55                   	push   %rbp
   18063:	48 89 e5             	mov    %rsp,%rbp
   18066:	48 83 ec 10          	sub    $0x10,%rsp
   1806a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1806e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   18072:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18076:	48 89 c7             	mov    %rax,%rdi
   18079:	e8 9a 00 00 00       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1807e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   18082:	0f 92 c0             	setb   %al
   18085:	84 c0                	test   %al,%al
   18087:	74 24                	je     180ad <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   18089:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1808d:	48 89 c7             	mov    %rax,%rdi
   18090:	e8 83 00 00 00       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   18095:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18099:	48 29 c2             	sub    %rax,%rdx
   1809c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   180a0:	48 89 d6             	mov    %rdx,%rsi
   180a3:	48 89 c7             	mov    %rax,%rdi
   180a6:	e8 07 19 00 00       	call   199b2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm>
      }
   180ab:	eb 43                	jmp    180f0 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm+0x8e>
	else if (__new_size < size())
   180ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   180b1:	48 89 c7             	mov    %rax,%rdi
   180b4:	e8 5f 00 00 00       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   180b9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   180bd:	0f 92 c0             	setb   %al
   180c0:	84 c0                	test   %al,%al
   180c2:	74 2c                	je     180f0 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm+0x8e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   180c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   180c8:	48 8b 08             	mov    (%rax),%rcx
   180cb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   180cf:	48 89 d0             	mov    %rdx,%rax
   180d2:	48 c1 e0 06          	shl    $0x6,%rax
   180d6:	48 01 d0             	add    %rdx,%rax
   180d9:	48 c1 e0 03          	shl    $0x3,%rax
   180dd:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   180e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   180e5:	48 89 d6             	mov    %rdx,%rsi
   180e8:	48 89 c7             	mov    %rax,%rdi
   180eb:	e8 02 1b 00 00       	call   19bf2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE15_M_erase_at_endEPS1_>
      }
   180f0:	90                   	nop
   180f1:	c9                   	leave
   180f2:	c3                   	ret
   180f3:	90                   	nop

00000000000180f4 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   180f4:	55                   	push   %rbp
   180f5:	48 89 e5             	mov    %rsp,%rbp
   180f8:	48 83 ec 10          	sub    $0x10,%rsp
   180fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   18100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18104:	48 8b 10             	mov    (%rax),%rdx
   18107:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1810b:	48 89 d6             	mov    %rdx,%rsi
   1810e:	48 89 c7             	mov    %rax,%rdi
   18111:	e8 4e 1b 00 00       	call   19c64 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   18116:	c9                   	leave
   18117:	c3                   	ret

0000000000018118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   18118:	55                   	push   %rbp
   18119:	48 89 e5             	mov    %rsp,%rbp
   1811c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   18120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18124:	48 8b 50 08          	mov    0x8(%rax),%rdx
   18128:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1812c:	48 8b 00             	mov    (%rax),%rax
   1812f:	48 29 c2             	sub    %rax,%rdx
   18132:	48 c1 fa 03          	sar    $0x3,%rdx
   18136:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   1813d:	fc c0 0f 
   18140:	48 0f af c2          	imul   %rdx,%rax
   18144:	5d                   	pop    %rbp
   18145:	c3                   	ret

0000000000018146 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   18146:	55                   	push   %rbp
   18147:	48 89 e5             	mov    %rsp,%rbp
   1814a:	48 83 ec 10          	sub    $0x10,%rsp
   1814e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   18152:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18156:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1815a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1815e:	48 8b 00             	mov    (%rax),%rax
   18161:	48 29 c2             	sub    %rax,%rdx
   18164:	48 89 d0             	mov    %rdx,%rax
   18167:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   1816b:	48 89 c2             	mov    %rax,%rdx
   1816e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18172:	48 8b 08             	mov    (%rax),%rcx
   18175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18179:	48 89 ce             	mov    %rcx,%rsi
   1817c:	48 89 c7             	mov    %rax,%rdi
   1817f:	e8 00 1b 00 00       	call   19c84 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      }
   18184:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18188:	48 89 c7             	mov    %rax,%rdi
   1818b:	e8 b0 ec ff ff       	call   16e40 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
   18190:	90                   	nop
   18191:	c9                   	leave
   18192:	c3                   	ret
   18193:	90                   	nop

0000000000018194 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   18194:	55                   	push   %rbp
   18195:	48 89 e5             	mov    %rsp,%rbp
   18198:	48 83 ec 20          	sub    $0x20,%rsp
   1819c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   181a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   181a4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   181a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   181ac:	48 89 c7             	mov    %rax,%rdi
   181af:	e8 06 1b 00 00       	call   19cba <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>
   181b4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   181b8:	0f 92 c0             	setb   %al
   181bb:	0f b6 c0             	movzbl %al,%eax
   181be:	48 85 c0             	test   %rax,%rax
   181c1:	0f 95 c0             	setne  %al
   181c4:	84 c0                	test   %al,%al
   181c6:	74 1a                	je     181e2 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   181c8:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   181cf:	ff ff 1f 
   181d2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   181d6:	73 05                	jae    181dd <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   181d8:	e8 a3 cf fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   181dd:	e8 9e ce fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   181e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   181e6:	48 c1 e0 03          	shl    $0x3,%rax
   181ea:	48 89 c7             	mov    %rax,%rdi
   181ed:	e8 2e d0 fe ff       	call   5220 <_Znwm@plt>
   181f2:	90                   	nop
      }
   181f3:	c9                   	leave
   181f4:	c3                   	ret

00000000000181f5 <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   181f5:	55                   	push   %rbp
   181f6:	48 89 e5             	mov    %rsp,%rbp
   181f9:	48 83 ec 30          	sub    $0x30,%rsp
   181fd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18201:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   18205:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   18209:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
   1820d:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   18211:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18215:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   18219:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1821d:	48 89 ce             	mov    %rcx,%rsi
   18220:	48 89 c7             	mov    %rax,%rdi
   18223:	e8 a6 1a 00 00       	call   19cce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>
    }
   18228:	c9                   	leave
   18229:	c3                   	ret

000000000001822a <_ZSt8_DestroyIPPKcEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1822a:	55                   	push   %rbp
   1822b:	48 89 e5             	mov    %rsp,%rbp
   1822e:	48 83 ec 10          	sub    $0x10,%rsp
   18232:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18236:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1823a:	e8 5f df fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1823f:	84 c0                	test   %al,%al
   18241:	74 15                	je     18258 <_ZSt8_DestroyIPPKcEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   18243:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18247:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1824b:	48 89 d6             	mov    %rdx,%rsi
   1824e:	48 89 c7             	mov    %rax,%rdi
   18251:	e8 a5 1a 00 00       	call   19cfb <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_>
   18256:	eb 13                	jmp    1826b <_ZSt8_DestroyIPPKcEvT_S3_+0x41>
	__destroy(__first, __last);
   18258:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1825c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18260:	48 89 d6             	mov    %rdx,%rsi
   18263:	48 89 c7             	mov    %rax,%rdi
   18266:	e8 c9 1a 00 00       	call   19d34 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>
    }
   1826b:	c9                   	leave
   1826c:	c3                   	ret
   1826d:	90                   	nop

000000000001826e <_ZNSt6vectorIPKcSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1826e:	55                   	push   %rbp
   1826f:	48 89 e5             	mov    %rsp,%rbp
   18272:	48 83 ec 10          	sub    $0x10,%rsp
   18276:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   1827a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1827e:	48 89 c7             	mov    %rax,%rdi
   18281:	e8 18 ee ff ff       	call   1709e <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   18286:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18289:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1828d:	48 8b 48 08          	mov    0x8(%rax),%rcx
   18291:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18295:	48 8b 00             	mov    (%rax),%rax
   18298:	48 89 ce             	mov    %rcx,%rsi
   1829b:	48 89 c7             	mov    %rax,%rdi
   1829e:	e8 a0 1a 00 00       	call   19d43 <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>
      }
   182a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   182a7:	48 89 c7             	mov    %rax,%rdi
   182aa:	e8 97 fe ff ff       	call   18146 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   182af:	90                   	nop
   182b0:	c9                   	leave
   182b1:	c3                   	ret

00000000000182b2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   182b2:	55                   	push   %rbp
   182b3:	48 89 e5             	mov    %rsp,%rbp
   182b6:	48 83 ec 20          	sub    $0x20,%rsp
   182ba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   182be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   182c2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   182c6:	48 89 d6             	mov    %rdx,%rsi
   182c9:	48 89 c7             	mov    %rax,%rdi
   182cc:	e8 9d 1a 00 00       	call   19d6e <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   182d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   182d5:	c9                   	leave
   182d6:	c3                   	ret
   182d7:	90                   	nop

00000000000182d8 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   182d8:	55                   	push   %rbp
   182d9:	48 89 e5             	mov    %rsp,%rbp
   182dc:	48 83 ec 20          	sub    $0x20,%rsp
   182e0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   182e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   182e8:	48 8d 50 08          	lea    0x8(%rax),%rdx
   182ec:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   182f0:	48 89 d6             	mov    %rdx,%rsi
   182f3:	48 89 c7             	mov    %rax,%rdi
   182f6:	e8 73 1a 00 00       	call   19d6e <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   182fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   182ff:	c9                   	leave
   18300:	c3                   	ret
   18301:	90                   	nop

0000000000018302 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   18302:	55                   	push   %rbp
   18303:	48 89 e5             	mov    %rsp,%rbp
   18306:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   1830a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1830e:	48 8b 00             	mov    (%rax),%rax
   18311:	48 8d 50 10          	lea    0x10(%rax),%rdx
   18315:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18319:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   1831c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   18320:	5d                   	pop    %rbp
   18321:	c3                   	ret

0000000000018322 <_ZN2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1EDn>:
    Optional( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
   18322:	55                   	push   %rbp
   18323:	48 89 e5             	mov    %rsp,%rbp
   18326:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1832a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      m_ptr = nullptr;
   1832e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18332:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   18339:	90                   	nop
   1833a:	5d                   	pop    %rbp
   1833b:	c3                   	ret

000000000001833c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>:
	  _Rb_tree_impl()
   1833c:	55                   	push   %rbp
   1833d:	48 89 e5             	mov    %rsp,%rbp
   18340:	48 83 ec 10          	sub    $0x10,%rsp
   18344:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  : _Node_allocator()
   18348:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1834c:	48 89 c7             	mov    %rax,%rdi
   1834f:	e8 38 1a 00 00       	call   19d8c <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
   18354:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18358:	48 89 c7             	mov    %rax,%rdi
   1835b:	e8 48 1a 00 00       	call   19da8 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
   18360:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18364:	48 83 c0 08          	add    $0x8,%rax
   18368:	48 89 c7             	mov    %rax,%rdi
   1836b:	e8 2a e9 ff ff       	call   16c9a <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
   18370:	90                   	nop
   18371:	c9                   	leave
   18372:	c3                   	ret
   18373:	90                   	nop

0000000000018374 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>:
   18374:	55                   	push   %rbp
   18375:	48 89 e5             	mov    %rsp,%rbp
   18378:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1837c:	90                   	nop
   1837d:	5d                   	pop    %rbp
   1837e:	c3                   	ret
   1837f:	90                   	nop

0000000000018380 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
   18380:	55                   	push   %rbp
   18381:	48 89 e5             	mov    %rsp,%rbp
   18384:	48 83 ec 10          	sub    $0x10,%rsp
   18388:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_erase(_M_begin()); }
   1838c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18390:	48 89 c7             	mov    %rax,%rdi
   18393:	e8 82 1a 00 00       	call   19e1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   18398:	48 89 c2             	mov    %rax,%rdx
   1839b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1839f:	48 89 d6             	mov    %rdx,%rsi
   183a2:	48 89 c7             	mov    %rax,%rdi
   183a5:	e8 0a 1a 00 00       	call   19db4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
   183aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   183ae:	48 89 c7             	mov    %rax,%rdi
   183b1:	e8 5a f0 ff ff       	call   17410 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
   183b6:	90                   	nop
   183b7:	c9                   	leave
   183b8:	c3                   	ret
   183b9:	90                   	nop

00000000000183ba <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   183ba:	55                   	push   %rbp
   183bb:	48 89 e5             	mov    %rsp,%rbp
   183be:	48 83 ec 20          	sub    $0x20,%rsp
   183c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   183c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   183ca:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   183ce:	48 89 d6             	mov    %rdx,%rsi
   183d1:	48 89 c7             	mov    %rax,%rdi
   183d4:	e8 5b 1a 00 00       	call   19e34 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   183d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   183dd:	c9                   	leave
   183de:	c3                   	ret
   183df:	90                   	nop

00000000000183e0 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   183e0:	55                   	push   %rbp
   183e1:	48 89 e5             	mov    %rsp,%rbp
   183e4:	48 83 ec 20          	sub    $0x20,%rsp
   183e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   183ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   183f0:	48 8d 50 08          	lea    0x8(%rax),%rdx
   183f4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   183f8:	48 89 d6             	mov    %rdx,%rsi
   183fb:	48 89 c7             	mov    %rax,%rdi
   183fe:	e8 31 1a 00 00       	call   19e34 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   18403:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18407:	c9                   	leave
   18408:	c3                   	ret
   18409:	90                   	nop

000000000001840a <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1840a:	55                   	push   %rbp
   1840b:	48 89 e5             	mov    %rsp,%rbp
   1840e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   18412:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18416:	48 8b 00             	mov    (%rax),%rax
   18419:	48 8d 90 04 01 00 00 	lea    0x104(%rax),%rdx
   18420:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18424:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   18427:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1842b:	5d                   	pop    %rbp
   1842c:	c3                   	ret
   1842d:	90                   	nop

000000000001842e <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv>:
    operator std::string() const
   1842e:	55                   	push   %rbp
   1842f:	48 89 e5             	mov    %rsp,%rbp
   18432:	53                   	push   %rbx
   18433:	48 83 ec 28          	sub    $0x28,%rsp
   18437:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1843b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      return std::string( this->data() );
   1843f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   18443:	48 89 c7             	mov    %rax,%rdi
   18446:	e8 65 cf fe ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
   1844b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1844f:	48 89 c7             	mov    %rax,%rdi
   18452:	e8 fb 19 00 00       	call   19e52 <_ZNKSt5arrayIcLm256EE4dataEv>
   18457:	48 89 c1             	mov    %rax,%rcx
   1845a:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   1845e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18462:	48 89 ce             	mov    %rcx,%rsi
   18465:	48 89 c7             	mov    %rax,%rdi
   18468:	e8 e9 1f ff ff       	call   a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   1846d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   18471:	48 89 c7             	mov    %rax,%rdi
   18474:	e8 f7 cd fe ff       	call   5270 <_ZNSaIcED1Ev@plt>
   18479:	eb 1a                	jmp    18495 <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv+0x67>
   1847b:	48 89 c3             	mov    %rax,%rbx
   1847e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   18482:	48 89 c7             	mov    %rax,%rdi
   18485:	e8 e6 cd fe ff       	call   5270 <_ZNSaIcED1Ev@plt>
   1848a:	48 89 d8             	mov    %rbx,%rax
   1848d:	48 89 c7             	mov    %rax,%rdi
   18490:	e8 0b cf fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   18495:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18499:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1849d:	c9                   	leave
   1849e:	c3                   	ret
   1849f:	90                   	nop

00000000000184a0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   184a0:	55                   	push   %rbp
   184a1:	48 89 e5             	mov    %rsp,%rbp
   184a4:	53                   	push   %rbx
   184a5:	48 83 ec 48          	sub    $0x48,%rsp
   184a9:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   184ad:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
   184b1:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   184b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   184b9:	48 89 d6             	mov    %rdx,%rsi
   184bc:	48 89 c7             	mov    %rax,%rdi
   184bf:	e8 a8 19 00 00       	call   19e6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>
   184c4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   184c8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   184cc:	48 89 c7             	mov    %rax,%rdi
   184cf:	e8 be 19 00 00       	call   19e92 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>
   184d4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   184d8:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   184dc:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   184e0:	48 89 d6             	mov    %rdx,%rsi
   184e3:	48 89 c7             	mov    %rax,%rdi
   184e6:	e8 c1 19 00 00       	call   19eac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
   184eb:	84 c0                	test   %al,%al
   184ed:	75 32                	jne    18521 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x81>
   184ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   184f3:	48 89 c7             	mov    %rax,%rdi
   184f6:	e8 d3 19 00 00       	call   19ece <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>
   184fb:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   184ff:	48 89 c7             	mov    %rax,%rdi
   18502:	e8 e3 19 00 00       	call   19eea <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
   18507:	48 89 c2             	mov    %rax,%rdx
   1850a:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   1850e:	48 8d 45 de          	lea    -0x22(%rbp),%rax
   18512:	48 89 ce             	mov    %rcx,%rsi
   18515:	48 89 c7             	mov    %rax,%rdi
   18518:	e8 11 1a 00 00       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1851d:	84 c0                	test   %al,%al
   1851f:	74 07                	je     18528 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x88>
   18521:	b8 01 00 00 00       	mov    $0x1,%eax
   18526:	eb 05                	jmp    1852d <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x8d>
   18528:	b8 00 00 00 00       	mov    $0x0,%eax
   1852d:	84 c0                	test   %al,%al
   1852f:	74 5d                	je     1858e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0xee>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   18531:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
					std::forward_as_tuple(std::move(__k)),
   18535:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   18539:	48 89 c7             	mov    %rax,%rdi
   1853c:	e8 36 27 ff ff       	call   ac77 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
   18541:	48 89 c2             	mov    %rax,%rdx
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   18544:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   18548:	48 89 d6             	mov    %rdx,%rsi
   1854b:	48 89 c7             	mov    %rax,%rdi
   1854e:	e8 1c 1a 00 00       	call   19f6f <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>
   18553:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
   18557:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1855b:	48 89 d6             	mov    %rdx,%rsi
   1855e:	48 89 c7             	mov    %rax,%rdi
   18561:	e8 3e 1a 00 00       	call   19fa4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>
   18566:	48 8d 4d df          	lea    -0x21(%rbp),%rcx
   1856a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   1856e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18572:	49 89 c8             	mov    %rcx,%r8
   18575:	48 89 d1             	mov    %rdx,%rcx
   18578:	48 8d 15 57 18 01 00 	lea    0x11857(%rip),%rdx        # 29dd6 <_ZSt19piecewise_construct>
   1857f:	48 89 c6             	mov    %rax,%rsi
   18582:	48 89 df             	mov    %rbx,%rdi
   18585:	e8 38 1a 00 00       	call   19fc2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
   1858a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
					std::tuple<>());
	return (*__i).second;
   1858e:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   18592:	48 89 c7             	mov    %rax,%rdi
   18595:	e8 50 19 00 00       	call   19eea <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
   1859a:	48 83 c0 20          	add    $0x20,%rax
      }
   1859e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   185a2:	c9                   	leave
   185a3:	c3                   	ret

00000000000185a4 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   185a4:	55                   	push   %rbp
   185a5:	48 89 e5             	mov    %rsp,%rbp
   185a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   185ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   185b0:	48 8b 00             	mov    (%rax),%rax
   185b3:	48 8d 50 08          	lea    0x8(%rax),%rdx
   185b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   185bb:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   185be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   185c2:	5d                   	pop    %rbp
   185c3:	c3                   	ret

00000000000185c4 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   185c4:	55                   	push   %rbp
   185c5:	48 89 e5             	mov    %rsp,%rbp
   185c8:	48 83 ec 20          	sub    $0x20,%rsp
   185cc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   185d0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   185d4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   185d8:	48 89 d6             	mov    %rdx,%rsi
   185db:	48 89 c7             	mov    %rax,%rdi
   185de:	e8 db 1a 00 00       	call   1a0be <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   185e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   185e7:	c9                   	leave
   185e8:	c3                   	ret
   185e9:	90                   	nop

00000000000185ea <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   185ea:	55                   	push   %rbp
   185eb:	48 89 e5             	mov    %rsp,%rbp
   185ee:	48 83 ec 20          	sub    $0x20,%rsp
   185f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   185f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   185fa:	48 8d 50 08          	lea    0x8(%rax),%rdx
   185fe:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   18602:	48 89 d6             	mov    %rdx,%rsi
   18605:	48 89 c7             	mov    %rax,%rdi
   18608:	e8 b1 1a 00 00       	call   1a0be <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1860d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18611:	c9                   	leave
   18612:	c3                   	ret
   18613:	90                   	nop

0000000000018614 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   18614:	55                   	push   %rbp
   18615:	48 89 e5             	mov    %rsp,%rbp
   18618:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   1861c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18620:	48 8b 00             	mov    (%rax),%rax
   18623:	48 8d 90 08 02 00 00 	lea    0x208(%rax),%rdx
   1862a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1862e:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   18631:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   18635:	5d                   	pop    %rbp
   18636:	c3                   	ret
   18637:	90                   	nop

0000000000018638 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   18638:	55                   	push   %rbp
   18639:	48 89 e5             	mov    %rsp,%rbp
   1863c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18640:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   18644:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18648:	48 8b 08             	mov    (%rax),%rcx
   1864b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1864f:	48 89 d0             	mov    %rdx,%rax
   18652:	48 01 c0             	add    %rax,%rax
   18655:	48 01 d0             	add    %rdx,%rax
   18658:	48 c1 e0 03          	shl    $0x3,%rax
   1865c:	48 01 c8             	add    %rcx,%rax
      }
   1865f:	5d                   	pop    %rbp
   18660:	c3                   	ret
   18661:	90                   	nop

0000000000018662 <_ZNSt8optionalIjEC1IjLb1EEEOT_>:
	optional(_Up&& __t)
   18662:	55                   	push   %rbp
   18663:	48 89 e5             	mov    %rsp,%rbp
   18666:	53                   	push   %rbx
   18667:	48 83 ec 18          	sub    $0x18,%rsp
   1866b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1866f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
   18673:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   18677:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1867b:	48 89 c7             	mov    %rax,%rdi
   1867e:	e8 f3 15 00 00       	call   19c76 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   18683:	48 89 c6             	mov    %rax,%rsi
   18686:	48 89 df             	mov    %rbx,%rdi
   18689:	e8 74 1a 00 00       	call   1a102 <_ZNSt14_Optional_baseIjLb1ELb1EEC1IJjELb0EEESt10in_place_tDpOT_>
   1868e:	90                   	nop
   1868f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18693:	c9                   	leave
   18694:	c3                   	ret
   18695:	90                   	nop

0000000000018696 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
   18696:	55                   	push   %rbp
   18697:	48 89 e5             	mov    %rsp,%rbp
   1869a:	48 83 ec 10          	sub    $0x10,%rsp
   1869e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(this->_M_is_engaged());
   186a2:	e8 f7 da fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   186a7:	84 c0                	test   %al,%al
   186a9:	74 1a                	je     186c5 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv+0x2f>
   186ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186af:	48 89 c7             	mov    %rax,%rdi
   186b2:	e8 5f ef ff ff       	call   17616 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>
   186b7:	83 f0 01             	xor    $0x1,%eax
   186ba:	84 c0                	test   %al,%al
   186bc:	74 07                	je     186c5 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv+0x2f>
   186be:	b8 01 00 00 00       	mov    $0x1,%eax
   186c3:	eb 05                	jmp    186ca <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv+0x34>
   186c5:	b8 00 00 00 00       	mov    $0x0,%eax
   186ca:	84 c0                	test   %al,%al
	return static_cast<_Dp*>(this)->_M_payload._M_get();
   186cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186d0:	48 89 c7             	mov    %rax,%rdi
   186d3:	e8 5e 1a 00 00       	call   1a136 <_ZNSt22_Optional_payload_baseIjE6_M_getEv>
      }
   186d8:	c9                   	leave
   186d9:	c3                   	ret

00000000000186da <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
#endif

      template<typename _Up>
	_GLIBCXX20_CONSTEXPR
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   186da:	55                   	push   %rbp
   186db:	48 89 e5             	mov    %rsp,%rbp
   186de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   186e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   186e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   186ea:	5d                   	pop    %rbp
   186eb:	c3                   	ret

00000000000186ec <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>:
    Optional( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
   186ec:	55                   	push   %rbp
   186ed:	48 89 e5             	mov    %rsp,%rbp
   186f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   186f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      m_ptr = nullptr;
   186f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186fc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   18703:	90                   	nop
   18704:	5d                   	pop    %rbp
   18705:	c3                   	ret

0000000000018706 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ej>:
    VULKAN_HPP_CONSTEXPR explicit Flags( MaskType flags ) VULKAN_HPP_NOEXCEPT : m_mask( flags ) {}
   18706:	55                   	push   %rbp
   18707:	48 89 e5             	mov    %rsp,%rbp
   1870a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1870e:	89 75 f4             	mov    %esi,-0xc(%rbp)
   18711:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18715:	8b 55 f4             	mov    -0xc(%rbp),%edx
   18718:	89 10                	mov    %edx,(%rax)
   1871a:	90                   	nop
   1871b:	5d                   	pop    %rbp
   1871c:	c3                   	ret

000000000001871d <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1871d:	55                   	push   %rbp
   1871e:	48 89 e5             	mov    %rsp,%rbp
   18721:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   18725:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18729:	5d                   	pop    %rbp
   1872a:	c3                   	ret

000000000001872b <_ZSt8exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>:

  /// Assign @p __new_val to @p __obj and return its previous value.
  template <typename _Tp, typename _Up = _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
   1872b:	55                   	push   %rbp
   1872c:	48 89 e5             	mov    %rsp,%rbp
   1872f:	48 83 ec 10          	sub    $0x10,%rsp
   18733:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18737:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
		    is_nothrow_assignable<_Tp&, _Up>>::value)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   1873b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1873f:	48 89 c7             	mov    %rax,%rdi
   18742:	e8 d6 ff ff ff       	call   1871d <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   18747:	48 89 c2             	mov    %rax,%rdx
   1874a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1874e:	48 89 d6             	mov    %rdx,%rsi
   18751:	48 89 c7             	mov    %rax,%rdi
   18754:	e8 eb 19 00 00       	call   1a144 <_ZSt10__exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>
   18759:	c9                   	leave
   1875a:	c3                   	ret

000000000001875b <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1875b:	55                   	push   %rbp
   1875c:	48 89 e5             	mov    %rsp,%rbp
   1875f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   18763:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18767:	5d                   	pop    %rbp
   18768:	c3                   	ret

0000000000018769 <_ZSt8exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>:
    exchange(_Tp& __obj, _Up&& __new_val)
   18769:	55                   	push   %rbp
   1876a:	48 89 e5             	mov    %rsp,%rbp
   1876d:	48 83 ec 10          	sub    $0x10,%rsp
   18771:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18775:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   18779:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1877d:	48 89 c7             	mov    %rax,%rdi
   18780:	e8 d6 ff ff ff       	call   1875b <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   18785:	48 89 c2             	mov    %rax,%rdx
   18788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1878c:	48 89 d6             	mov    %rdx,%rsi
   1878f:	48 89 c7             	mov    %rax,%rdi
   18792:	e8 ec 19 00 00       	call   1a183 <_ZSt10__exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>
   18797:	c9                   	leave
   18798:	c3                   	ret

0000000000018799 <_ZSt4moveIRN2vk14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   18799:	55                   	push   %rbp
   1879a:	48 89 e5             	mov    %rsp,%rbp
   1879d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   187a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   187a5:	5d                   	pop    %rbp
   187a6:	c3                   	ret

00000000000187a7 <_ZSt4moveIRPKN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
   187a7:	55                   	push   %rbp
   187a8:	48 89 e5             	mov    %rsp,%rbp
   187ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   187af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   187b3:	5d                   	pop    %rbp
   187b4:	c3                   	ret
   187b5:	90                   	nop

00000000000187b6 <_ZNSaIN2vk4raii14PhysicalDeviceEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   187b6:	55                   	push   %rbp
   187b7:	48 89 e5             	mov    %rsp,%rbp
   187ba:	48 83 ec 10          	sub    $0x10,%rsp
   187be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   187c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   187c6:	48 89 c7             	mov    %rax,%rdi
   187c9:	e8 f6 19 00 00       	call   1a1c4 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEEC1Ev>
   187ce:	90                   	nop
   187cf:	c9                   	leave
   187d0:	c3                   	ret
   187d1:	90                   	nop

00000000000187d2 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   187d2:	55                   	push   %rbp
   187d3:	48 89 e5             	mov    %rsp,%rbp
   187d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   187da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   187de:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   187e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   187e9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   187f0:	00 
   187f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   187f5:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   187fc:	00 
	{ }
   187fd:	90                   	nop
   187fe:	5d                   	pop    %rbp
   187ff:	c3                   	ret

0000000000018800 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>:
      _M_deallocate(pointer __p, size_t __n)
   18800:	55                   	push   %rbp
   18801:	48 89 e5             	mov    %rsp,%rbp
   18804:	48 83 ec 20          	sub    $0x20,%rsp
   18808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1880c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18810:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   18814:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   18819:	74 17                	je     18832 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1881b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1881f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18823:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   18827:	48 89 ce             	mov    %rcx,%rsi
   1882a:	48 89 c7             	mov    %rax,%rdi
   1882d:	e8 9d 19 00 00       	call   1a1cf <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m>
      }
   18832:	90                   	nop
   18833:	c9                   	leave
   18834:	c3                   	ret
   18835:	90                   	nop

0000000000018836 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   18836:	55                   	push   %rbp
   18837:	48 89 e5             	mov    %rsp,%rbp
   1883a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1883e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18842:	5d                   	pop    %rbp
   18843:	c3                   	ret

0000000000018844 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   18844:	55                   	push   %rbp
   18845:	48 89 e5             	mov    %rsp,%rbp
   18848:	48 83 ec 20          	sub    $0x20,%rsp
   1884c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18850:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18854:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   18858:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1885c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18860:	48 89 d6             	mov    %rdx,%rsi
   18863:	48 89 c7             	mov    %rax,%rdi
   18866:	e8 c2 19 00 00       	call   1a22d <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_>
    }
   1886b:	90                   	nop
   1886c:	c9                   	leave
   1886d:	c3                   	ret

000000000001886e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1886e:	55                   	push   %rbp
   1886f:	48 89 e5             	mov    %rsp,%rbp
   18872:	48 83 ec 20          	sub    $0x20,%rsp
   18876:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1887a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1887e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   18882:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   18887:	74 17                	je     188a0 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   18889:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1888d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18891:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   18895:	48 89 ce             	mov    %rcx,%rsi
   18898:	48 89 c7             	mov    %rax,%rdi
   1889b:	e8 d0 19 00 00       	call   1a270 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>
      }
   188a0:	90                   	nop
   188a1:	c9                   	leave
   188a2:	c3                   	ret
   188a3:	90                   	nop

00000000000188a4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   188a4:	55                   	push   %rbp
   188a5:	48 89 e5             	mov    %rsp,%rbp
   188a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   188ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   188b0:	5d                   	pop    %rbp
   188b1:	c3                   	ret

00000000000188b2 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   188b2:	55                   	push   %rbp
   188b3:	48 89 e5             	mov    %rsp,%rbp
   188b6:	48 83 ec 20          	sub    $0x20,%rsp
   188ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   188be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   188c2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   188c6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   188ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   188ce:	48 89 d6             	mov    %rdx,%rsi
   188d1:	48 89 c7             	mov    %rax,%rdi
   188d4:	e8 f5 19 00 00       	call   1a2ce <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>
    }
   188d9:	90                   	nop
   188da:	c9                   	leave
   188db:	c3                   	ret

00000000000188dc <_ZSt3maxImERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
   188dc:	55                   	push   %rbp
   188dd:	48 89 e5             	mov    %rsp,%rbp
   188e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   188e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__a < __b)
   188e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   188ec:	48 8b 10             	mov    (%rax),%rdx
   188ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   188f3:	48 8b 00             	mov    (%rax),%rax
   188f6:	48 39 c2             	cmp    %rax,%rdx
   188f9:	73 06                	jae    18901 <_ZSt3maxImERKT_S2_S2_+0x25>
	return __b;
   188fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   188ff:	eb 04                	jmp    18905 <_ZSt3maxImERKT_S2_S2_+0x29>
      return __a;
   18901:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   18905:	5d                   	pop    %rbp
   18906:	c3                   	ret
   18907:	90                   	nop

0000000000018908 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   18908:	55                   	push   %rbp
   18909:	48 89 e5             	mov    %rsp,%rbp
   1890c:	53                   	push   %rbx
   1890d:	48 83 ec 38          	sub    $0x38,%rsp
   18911:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   18915:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   18919:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1891d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18921:	48 89 c7             	mov    %rax,%rdi
   18924:	e8 e9 19 00 00       	call   1a312 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   18929:	48 89 c3             	mov    %rax,%rbx
   1892c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18930:	48 89 c7             	mov    %rax,%rdi
   18933:	e8 46 f0 ff ff       	call   1797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   18938:	48 29 c3             	sub    %rax,%rbx
   1893b:	48 89 da             	mov    %rbx,%rdx
   1893e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18942:	48 39 c2             	cmp    %rax,%rdx
   18945:	0f 92 c0             	setb   %al
   18948:	84 c0                	test   %al,%al
   1894a:	74 0c                	je     18958 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1894c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18950:	48 89 c7             	mov    %rax,%rdi
   18953:	e8 88 c7 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   18958:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1895c:	48 89 c7             	mov    %rax,%rdi
   1895f:	e8 1a f0 ff ff       	call   1797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   18964:	48 89 c3             	mov    %rax,%rbx
   18967:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1896b:	48 89 c7             	mov    %rax,%rdi
   1896e:	e8 0b f0 ff ff       	call   1797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   18973:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18977:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1897b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1897f:	48 89 d6             	mov    %rdx,%rsi
   18982:	48 89 c7             	mov    %rax,%rdi
   18985:	e8 52 ff ff ff       	call   188dc <_ZSt3maxImERKT_S2_S2_>
   1898a:	48 8b 00             	mov    (%rax),%rax
   1898d:	48 01 d8             	add    %rbx,%rax
   18990:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   18994:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18998:	48 89 c7             	mov    %rax,%rdi
   1899b:	e8 de ef ff ff       	call   1797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   189a0:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   189a4:	72 12                	jb     189b8 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   189a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   189aa:	48 89 c7             	mov    %rax,%rdi
   189ad:	e8 60 19 00 00       	call   1a312 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   189b2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   189b6:	73 0e                	jae    189c6 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   189b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   189bc:	48 89 c7             	mov    %rax,%rdi
   189bf:	e8 4e 19 00 00       	call   1a312 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   189c4:	eb 04                	jmp    189ca <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   189c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   189ca:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   189ce:	c9                   	leave
   189cf:	c3                   	ret

00000000000189d0 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
   189d0:	55                   	push   %rbp
   189d1:	48 89 e5             	mov    %rsp,%rbp
   189d4:	53                   	push   %rbx
   189d5:	48 83 ec 38          	sub    $0x38,%rsp
   189d9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   189dd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   189e1:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   189e6:	0f 84 e7 01 00 00    	je     18bd3 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x203>
	{
	  const size_type __size = size();
   189ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   189f0:	48 89 c7             	mov    %rax,%rdi
   189f3:	e8 86 ef ff ff       	call   1797e <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   189f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   189fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a00:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   18a04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a08:	48 8b 40 08          	mov    0x8(%rax),%rax
   18a0c:	48 29 c2             	sub    %rax,%rdx
   18a0f:	48 89 d0             	mov    %rdx,%rax
   18a12:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   18a16:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	  if (__size > max_size() || __navail > max_size() - __size)
   18a1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a1e:	48 89 c7             	mov    %rax,%rdi
   18a21:	e8 ec 18 00 00       	call   1a312 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   18a26:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   18a2a:	72 16                	jb     18a42 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x72>
   18a2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a30:	48 89 c7             	mov    %rax,%rdi
   18a33:	e8 da 18 00 00       	call   1a312 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   18a38:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   18a3c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   18a40:	73 07                	jae    18a49 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x79>
   18a42:	b8 01 00 00 00       	mov    $0x1,%eax
   18a47:	eb 05                	jmp    18a4e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x7e>
   18a49:	b8 00 00 00 00       	mov    $0x0,%eax
   18a4e:	84 c0                	test   %al,%al
	    __builtin_unreachable();

	  if (__navail >= __n)
   18a50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18a54:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   18a58:	72 33                	jb     18a8d <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0xbd>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
						 __n, _M_get_Tp_allocator());
   18a5a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a5e:	48 89 c7             	mov    %rax,%rdi
   18a61:	e8 3e fe ff ff       	call   188a4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18a66:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   18a69:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a6d:	48 8b 40 08          	mov    0x8(%rax),%rax
   18a71:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   18a75:	48 89 ce             	mov    %rcx,%rsi
   18a78:	48 89 c7             	mov    %rax,%rdi
   18a7b:	e8 b4 18 00 00       	call   1a334 <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   18a80:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18a84:	48 89 42 08          	mov    %rax,0x8(%rdx)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   18a88:	e9 46 01 00 00       	jmp    18bd3 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   18a8d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   18a91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a95:	48 8d 15 63 56 01 00 	lea    0x15663(%rip),%rdx        # 2e0ff <_ZNSt8__detailL19__atomic_spin_countE+0x390b>
   18a9c:	48 89 ce             	mov    %rcx,%rsi
   18a9f:	48 89 c7             	mov    %rax,%rdi
   18aa2:	e8 61 fe ff ff       	call   18908 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc>
   18aa7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   18aab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18aaf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18ab3:	48 89 d6             	mov    %rdx,%rsi
   18ab6:	48 89 c7             	mov    %rax,%rdi
   18ab9:	e8 a0 18 00 00       	call   1a35e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>
   18abe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   18ac2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18ac6:	48 89 c7             	mov    %rax,%rdi
   18ac9:	e8 d6 fd ff ff       	call   188a4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18ace:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   18ad1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18ad5:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   18adc:	00 
   18add:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18ae1:	48 01 c1             	add    %rax,%rcx
   18ae4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   18ae8:	48 89 c6             	mov    %rax,%rsi
   18aeb:	48 89 cf             	mov    %rcx,%rdi
   18aee:	e8 41 18 00 00       	call   1a334 <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   18af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18af7:	48 89 c7             	mov    %rax,%rdi
   18afa:	e8 a5 fd ff ff       	call   188a4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18aff:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   18b02:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18b06:	48 8b 70 08          	mov    0x8(%rax),%rsi
   18b0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18b0e:	48 8b 00             	mov    (%rax),%rax
   18b11:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   18b15:	48 89 c7             	mov    %rax,%rdi
   18b18:	e8 74 18 00 00       	call   1a391 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   18b1d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   18b21:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18b25:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   18b29:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18b2d:	48 8b 12             	mov    (%rdx),%rdx
   18b30:	48 29 d1             	sub    %rdx,%rcx
   18b33:	48 c1 f9 03          	sar    $0x3,%rcx
   18b37:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   18b3a:	48 89 d6             	mov    %rdx,%rsi
   18b3d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18b41:	48 8b 0a             	mov    (%rdx),%rcx
   18b44:	48 89 f2             	mov    %rsi,%rdx
   18b47:	48 89 ce             	mov    %rcx,%rsi
   18b4a:	48 89 c7             	mov    %rax,%rdi
   18b4d:	e8 1c fd ff ff       	call   1886e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   18b52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18b56:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   18b5a:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   18b5d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18b61:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   18b65:	48 01 d0             	add    %rdx,%rax
   18b68:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   18b6f:	00 
   18b70:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18b74:	48 01 c2             	add    %rax,%rdx
   18b77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18b7b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   18b7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18b83:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   18b8a:	00 
   18b8b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18b8f:	48 01 c2             	add    %rax,%rdx
   18b92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18b96:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   18b9a:	eb 37                	jmp    18bd3 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   18b9c:	48 89 c7             	mov    %rax,%rdi
   18b9f:	e8 fc c4 fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   18ba4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18ba8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18bac:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   18bb0:	48 89 ce             	mov    %rcx,%rsi
   18bb3:	48 89 c7             	mov    %rax,%rdi
   18bb6:	e8 b3 fc ff ff       	call   1886e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   18bbb:	e8 50 c7 fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   18bc0:	48 89 c3             	mov    %rax,%rbx
   18bc3:	e8 a8 c7 fe ff       	call   5370 <__cxa_end_catch@plt>
   18bc8:	48 89 d8             	mov    %rbx,%rax
   18bcb:	48 89 c7             	mov    %rax,%rdi
   18bce:	e8 cd c7 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   18bd3:	90                   	nop
   18bd4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18bd8:	c9                   	leave
   18bd9:	c3                   	ret

0000000000018bda <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   18bda:	55                   	push   %rbp
   18bdb:	48 89 e5             	mov    %rsp,%rbp
   18bde:	48 83 ec 20          	sub    $0x20,%rsp
   18be2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18be6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   18bea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18bee:	48 8b 40 08          	mov    0x8(%rax),%rax
   18bf2:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   18bf6:	48 c1 f8 03          	sar    $0x3,%rax
   18bfa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18bfe:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   18c03:	74 32                	je     18c37 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   18c05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18c09:	48 89 c7             	mov    %rax,%rdi
   18c0c:	e8 93 fc ff ff       	call   188a4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18c11:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   18c14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18c18:	48 8b 48 08          	mov    0x8(%rax),%rcx
   18c1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18c20:	48 89 ce             	mov    %rcx,%rsi
   18c23:	48 89 c7             	mov    %rax,%rdi
   18c26:	e8 87 fc ff ff       	call   188b2 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   18c2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18c2f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   18c33:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   18c37:	90                   	nop
   18c38:	c9                   	leave
   18c39:	c3                   	ret

0000000000018c3a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   18c3a:	55                   	push   %rbp
   18c3b:	48 89 e5             	mov    %rsp,%rbp
   18c3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18c42:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   18c46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18c4a:	5d                   	pop    %rbp
   18c4b:	c3                   	ret

0000000000018c4c <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   18c4c:	55                   	push   %rbp
   18c4d:	48 89 e5             	mov    %rsp,%rbp
   18c50:	48 83 ec 10          	sub    $0x10,%rsp
   18c54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   18c58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c5c:	48 89 c7             	mov    %rax,%rdi
   18c5f:	e8 b6 17 00 00       	call   1a41a <_ZNKSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   18c64:	48 89 c7             	mov    %rax,%rdi
   18c67:	e8 6b 17 00 00       	call   1a3d7 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_max_sizeERKS3_>
   18c6c:	c9                   	leave
   18c6d:	c3                   	ret

0000000000018c6e <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
   18c6e:	55                   	push   %rbp
   18c6f:	48 89 e5             	mov    %rsp,%rbp
   18c72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_end_of_storage
   18c76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c7a:	48 8b 50 10          	mov    0x10(%rax),%rdx
			 - this->_M_impl._M_start); }
   18c7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c82:	48 8b 00             	mov    (%rax),%rax
   18c85:	48 29 c2             	sub    %rax,%rdx
   18c88:	48 89 d0             	mov    %rdx,%rax
   18c8b:	48 c1 f8 04          	sar    $0x4,%rax
   18c8f:	5d                   	pop    %rbp
   18c90:	c3                   	ret
   18c91:	90                   	nop

0000000000018c92 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   18c92:	55                   	push   %rbp
   18c93:	48 89 e5             	mov    %rsp,%rbp
   18c96:	48 83 ec 10          	sub    $0x10,%rsp
   18c9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18c9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   18ca2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   18ca7:	74 15                	je     18cbe <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm+0x2c>
   18ca9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18cad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18cb1:	48 89 d6             	mov    %rdx,%rsi
   18cb4:	48 89 c7             	mov    %rax,%rdi
   18cb7:	e8 6c 17 00 00       	call   1a428 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m>
   18cbc:	eb 05                	jmp    18cc3 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm+0x31>
   18cbe:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   18cc3:	c9                   	leave
   18cc4:	c3                   	ret

0000000000018cc5 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   18cc5:	55                   	push   %rbp
   18cc6:	48 89 e5             	mov    %rsp,%rbp
   18cc9:	48 83 ec 20          	sub    $0x20,%rsp
   18ccd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18cd1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18cd5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   18cd9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   18cdd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   18ce1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18ce5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   18ce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ced:	48 89 c7             	mov    %rax,%rdi
   18cf0:	e8 b9 17 00 00       	call   1a4ae <_ZSt12__relocate_aIPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>
      }
   18cf5:	c9                   	leave
   18cf6:	c3                   	ret
   18cf7:	90                   	nop

0000000000018cf8 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   18cf8:	55                   	push   %rbp
   18cf9:	48 89 e5             	mov    %rsp,%rbp
   18cfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18d00:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   18d04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18d08:	48 8b 10             	mov    (%rax),%rdx
   18d0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18d0f:	48 89 10             	mov    %rdx,(%rax)
   18d12:	90                   	nop
   18d13:	5d                   	pop    %rbp
   18d14:	c3                   	ret

0000000000018d15 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   18d15:	55                   	push   %rbp
   18d16:	48 89 e5             	mov    %rsp,%rbp
   18d19:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   18d1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18d21:	5d                   	pop    %rbp
   18d22:	c3                   	ret

0000000000018d23 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   18d23:	55                   	push   %rbp
   18d24:	48 89 e5             	mov    %rsp,%rbp
   18d27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   18d2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18d2f:	5d                   	pop    %rbp
   18d30:	c3                   	ret

0000000000018d31 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   18d31:	55                   	push   %rbp
   18d32:	48 89 e5             	mov    %rsp,%rbp
   18d35:	53                   	push   %rbx
   18d36:	48 83 ec 28          	sub    $0x28,%rsp
   18d3a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18d3e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   18d42:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   18d46:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   18d4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18d4e:	48 89 c7             	mov    %rax,%rdi
   18d51:	e8 cd ff ff ff       	call   18d23 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   18d56:	48 89 c3             	mov    %rax,%rbx
   18d59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18d5d:	48 89 c7             	mov    %rax,%rdi
   18d60:	e8 b0 ff ff ff       	call   18d15 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   18d65:	48 89 c1             	mov    %rax,%rcx
   18d68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18d6c:	48 89 da             	mov    %rbx,%rdx
   18d6f:	48 89 ce             	mov    %rcx,%rsi
   18d72:	48 89 c7             	mov    %rax,%rdi
   18d75:	e8 97 17 00 00       	call   1a511 <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>
	}
   18d7a:	90                   	nop
   18d7b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18d7f:	c9                   	leave
   18d80:	c3                   	ret
   18d81:	90                   	nop

0000000000018d82 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   18d82:	55                   	push   %rbp
   18d83:	48 89 e5             	mov    %rsp,%rbp
   18d86:	53                   	push   %rbx
   18d87:	48 83 ec 38          	sub    $0x38,%rsp
   18d8b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   18d8f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   18d93:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   18d97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18d9b:	48 89 c7             	mov    %rax,%rdi
   18d9e:	e8 a9 fe ff ff       	call   18c4c <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   18da3:	48 89 c3             	mov    %rax,%rbx
   18da6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18daa:	48 89 c7             	mov    %rax,%rdi
   18dad:	e8 f0 eb ff ff       	call   179a2 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   18db2:	48 29 c3             	sub    %rax,%rbx
   18db5:	48 89 da             	mov    %rbx,%rdx
   18db8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18dbc:	48 39 c2             	cmp    %rax,%rdx
   18dbf:	0f 92 c0             	setb   %al
   18dc2:	84 c0                	test   %al,%al
   18dc4:	74 0c                	je     18dd2 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   18dc6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18dca:	48 89 c7             	mov    %rax,%rdi
   18dcd:	e8 0e c3 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   18dd2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18dd6:	48 89 c7             	mov    %rax,%rdi
   18dd9:	e8 c4 eb ff ff       	call   179a2 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   18dde:	48 89 c3             	mov    %rax,%rbx
   18de1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18de5:	48 89 c7             	mov    %rax,%rdi
   18de8:	e8 b5 eb ff ff       	call   179a2 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   18ded:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18df1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   18df5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   18df9:	48 89 d6             	mov    %rdx,%rsi
   18dfc:	48 89 c7             	mov    %rax,%rdi
   18dff:	e8 d8 fa ff ff       	call   188dc <_ZSt3maxImERKT_S2_S2_>
   18e04:	48 8b 00             	mov    (%rax),%rax
   18e07:	48 01 d8             	add    %rbx,%rax
   18e0a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   18e0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18e12:	48 89 c7             	mov    %rax,%rdi
   18e15:	e8 88 eb ff ff       	call   179a2 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   18e1a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   18e1e:	72 12                	jb     18e32 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0xb0>
   18e20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18e24:	48 89 c7             	mov    %rax,%rdi
   18e27:	e8 20 fe ff ff       	call   18c4c <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   18e2c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   18e30:	73 0e                	jae    18e40 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0xbe>
   18e32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18e36:	48 89 c7             	mov    %rax,%rdi
   18e39:	e8 0e fe ff ff       	call   18c4c <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   18e3e:	eb 04                	jmp    18e44 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0xc2>
   18e40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   18e44:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18e48:	c9                   	leave
   18e49:	c3                   	ret

0000000000018e4a <_ZN9__gnu_cxxmiIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
   18e4a:	55                   	push   %rbp
   18e4b:	48 89 e5             	mov    %rsp,%rbp
   18e4e:	53                   	push   %rbx
   18e4f:	48 83 ec 18          	sub    $0x18,%rsp
   18e53:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18e57:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   18e5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18e5f:	48 89 c7             	mov    %rax,%rdi
   18e62:	e8 89 e5 ff ff       	call   173f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   18e67:	48 8b 18             	mov    (%rax),%rbx
   18e6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18e6e:	48 89 c7             	mov    %rax,%rdi
   18e71:	e8 7a e5 ff ff       	call   173f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   18e76:	48 8b 00             	mov    (%rax),%rax
   18e79:	48 89 da             	mov    %rbx,%rdx
   18e7c:	48 29 c2             	sub    %rax,%rdx
   18e7f:	48 89 d0             	mov    %rdx,%rax
   18e82:	48 c1 f8 04          	sar    $0x4,%rax
   18e86:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18e8a:	c9                   	leave
   18e8b:	c3                   	ret

0000000000018e8c <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE17_M_realloc_insertIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   18e8c:	55                   	push   %rbp
   18e8d:	48 89 e5             	mov    %rsp,%rbp
   18e90:	53                   	push   %rbx
   18e91:	48 83 ec 68          	sub    $0x68,%rsp
   18e95:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   18e99:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   18e9d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   18ea1:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   18ea5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ea9:	48 8d 15 69 52 01 00 	lea    0x15269(%rip),%rdx        # 2e119 <_ZNSt8__detailL19__atomic_spin_countE+0x3925>
   18eb0:	be 01 00 00 00       	mov    $0x1,%esi
   18eb5:	48 89 c7             	mov    %rax,%rdi
   18eb8:	e8 c5 fe ff ff       	call   18d82 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc>
   18ebd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __old_start = this->_M_impl._M_start;
   18ec1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ec5:	48 8b 00             	mov    (%rax),%rax
   18ec8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pointer __old_finish = this->_M_impl._M_finish;
   18ecc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ed0:	48 8b 40 08          	mov    0x8(%rax),%rax
   18ed4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      const size_type __elems_before = __position - begin();
   18ed8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18edc:	48 89 c7             	mov    %rax,%rdi
   18edf:	e8 ce f3 ff ff       	call   182b2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE5beginEv>
   18ee4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   18ee8:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   18eec:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   18ef0:	48 89 d6             	mov    %rdx,%rsi
   18ef3:	48 89 c7             	mov    %rax,%rdi
   18ef6:	e8 4f ff ff ff       	call   18e4a <_ZN9__gnu_cxxmiIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
   18efb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_start(this->_M_allocate(__len));
   18eff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f03:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18f07:	48 89 d6             	mov    %rdx,%rsi
   18f0a:	48 89 c7             	mov    %rax,%rdi
   18f0d:	e8 80 fd ff ff       	call   18c92 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm>
   18f12:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      pointer __new_finish(__new_start);
   18f16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18f1a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
   18f1e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   18f22:	48 89 c7             	mov    %rax,%rdi
   18f25:	e8 f9 fd ff ff       	call   18d23 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   18f2a:	48 89 c3             	mov    %rax,%rbx
   18f2d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   18f31:	48 89 c7             	mov    %rax,%rdi
   18f34:	e8 dc fd ff ff       	call   18d15 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   18f39:	48 89 c2             	mov    %rax,%rdx
				   __new_start + __elems_before,
   18f3c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18f40:	48 c1 e0 04          	shl    $0x4,%rax
   18f44:	48 89 c1             	mov    %rax,%rcx
	  _Alloc_traits::construct(this->_M_impl,
   18f47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18f4b:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
   18f4f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f53:	48 89 d9             	mov    %rbx,%rcx
   18f56:	48 89 c7             	mov    %rax,%rdi
   18f59:	e8 d3 fd ff ff       	call   18d31 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
   18f5e:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   18f65:	00 
					 __new_start, _M_get_Tp_allocator());
   18f66:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f6a:	48 89 c7             	mov    %rax,%rdi
   18f6d:	e8 c4 f8 ff ff       	call   18836 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   18f72:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__old_start, __position.base(),
   18f75:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   18f79:	48 89 c7             	mov    %rax,%rdi
   18f7c:	e8 6f e4 ff ff       	call   173f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   18f81:	48 8b 30             	mov    (%rax),%rsi
   18f84:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18f88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18f8c:	48 89 d9             	mov    %rbx,%rcx
   18f8f:	48 89 c7             	mov    %rax,%rdi
   18f92:	e8 2e fd ff ff       	call   18cc5 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
   18f97:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	      ++__new_finish;
   18f9b:	48 83 45 c0 10       	addq   $0x10,-0x40(%rbp)
					 __new_finish, _M_get_Tp_allocator());
   18fa0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18fa4:	48 89 c7             	mov    %rax,%rdi
   18fa7:	e8 8a f8 ff ff       	call   18836 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   18fac:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__position.base(), __old_finish,
   18faf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   18fb3:	48 89 c7             	mov    %rax,%rdi
   18fb6:	e8 35 e4 ff ff       	call   173f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   18fbb:	48 8b 00             	mov    (%rax),%rax
   18fbe:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   18fc2:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   18fc6:	48 89 d9             	mov    %rbx,%rcx
   18fc9:	48 89 c7             	mov    %rax,%rdi
   18fcc:	e8 f4 fc ff ff       	call   18cc5 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
   18fd1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _M_deallocate(__old_start,
   18fd5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
		    this->_M_impl._M_end_of_storage - __old_start);
   18fd9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   18fdd:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   18fe1:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
   18fe5:	48 c1 fa 04          	sar    $0x4,%rdx
      _M_deallocate(__old_start,
   18fe9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   18fed:	48 89 ce             	mov    %rcx,%rsi
   18ff0:	48 89 c7             	mov    %rax,%rdi
   18ff3:	e8 08 f8 ff ff       	call   18800 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>
      this->_M_impl._M_start = __new_start;
   18ff8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ffc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19000:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
   19003:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   19007:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1900b:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1900f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19013:	48 c1 e0 04          	shl    $0x4,%rax
   19017:	48 89 c2             	mov    %rax,%rdx
   1901a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1901e:	48 01 c2             	add    %rax,%rdx
   19021:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   19025:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   19029:	90                   	nop
   1902a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1902e:	c9                   	leave
   1902f:	c3                   	ret

0000000000019030 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
   19030:	55                   	push   %rbp
   19031:	48 89 e5             	mov    %rsp,%rbp
   19034:	48 83 ec 20          	sub    $0x20,%rsp
   19038:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
   1903c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19040:	48 89 c7             	mov    %rax,%rdi
   19043:	e8 90 f2 ff ff       	call   182d8 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>
   19048:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1904c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   19050:	be 01 00 00 00       	mov    $0x1,%esi
   19055:	48 89 c7             	mov    %rax,%rdi
   19058:	e8 33 15 00 00       	call   1a590 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEmiEl>
   1905d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   19061:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   19065:	48 89 c7             	mov    %rax,%rdi
   19068:	e8 91 e3 ff ff       	call   173fe <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEdeEv>
      }
   1906d:	c9                   	leave
   1906e:	c3                   	ret
   1906f:	90                   	nop

0000000000019070 <_ZNSt5tupleIJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:
	tuple()
   19070:	55                   	push   %rbp
   19071:	48 89 e5             	mov    %rsp,%rbp
   19074:	48 83 ec 10          	sub    $0x10,%rsp
   19078:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Inherited() { }
   1907c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19080:	48 89 c7             	mov    %rax,%rdi
   19083:	e8 4a 15 00 00       	call   1a5d2 <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1Ev>
   19088:	90                   	nop
   19089:	c9                   	leave
   1908a:	c3                   	ret
   1908b:	90                   	nop

000000000001908c <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1908c:	55                   	push   %rbp
   1908d:	48 89 e5             	mov    %rsp,%rbp
   19090:	48 83 ec 20          	sub    $0x20,%rsp
   19094:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19098:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1909c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   190a0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   190a5:	74 17                	je     190be <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   190a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   190ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   190af:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   190b3:	48 89 ce             	mov    %rcx,%rsi
   190b6:	48 89 c7             	mov    %rax,%rdi
   190b9:	e8 3b 15 00 00       	call   1a5f9 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m>
      }
   190be:	90                   	nop
   190bf:	c9                   	leave
   190c0:	c3                   	ret
   190c1:	90                   	nop

00000000000190c2 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   190c2:	55                   	push   %rbp
   190c3:	48 89 e5             	mov    %rsp,%rbp
   190c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   190ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   190ce:	5d                   	pop    %rbp
   190cf:	c3                   	ret

00000000000190d0 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   190d0:	55                   	push   %rbp
   190d1:	48 89 e5             	mov    %rsp,%rbp
   190d4:	48 83 ec 20          	sub    $0x20,%rsp
   190d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   190dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   190e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   190e4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   190e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   190ec:	48 89 d6             	mov    %rdx,%rsi
   190ef:	48 89 c7             	mov    %rax,%rdi
   190f2:	e8 60 15 00 00       	call   1a657 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_>
    }
   190f7:	90                   	nop
   190f8:	c9                   	leave
   190f9:	c3                   	ret

00000000000190fa <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   190fa:	55                   	push   %rbp
   190fb:	48 89 e5             	mov    %rsp,%rbp
   190fe:	53                   	push   %rbx
   190ff:	48 83 ec 38          	sub    $0x38,%rsp
   19103:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   19107:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1910b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1910f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19113:	48 89 c7             	mov    %rax,%rdi
   19116:	e8 7f 15 00 00       	call   1a69a <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   1911b:	48 89 c3             	mov    %rax,%rbx
   1911e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19122:	48 89 c7             	mov    %rax,%rdi
   19125:	e8 ac ec ff ff       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   1912a:	48 29 c3             	sub    %rax,%rbx
   1912d:	48 89 da             	mov    %rbx,%rdx
   19130:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19134:	48 39 c2             	cmp    %rax,%rdx
   19137:	0f 92 c0             	setb   %al
   1913a:	84 c0                	test   %al,%al
   1913c:	74 0c                	je     1914a <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1913e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19142:	48 89 c7             	mov    %rax,%rdi
   19145:	e8 96 bf fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1914a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1914e:	48 89 c7             	mov    %rax,%rdi
   19151:	e8 80 ec ff ff       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   19156:	48 89 c3             	mov    %rax,%rbx
   19159:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1915d:	48 89 c7             	mov    %rax,%rdi
   19160:	e8 71 ec ff ff       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   19165:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19169:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1916d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19171:	48 89 d6             	mov    %rdx,%rsi
   19174:	48 89 c7             	mov    %rax,%rdi
   19177:	e8 60 f7 ff ff       	call   188dc <_ZSt3maxImERKT_S2_S2_>
   1917c:	48 8b 00             	mov    (%rax),%rax
   1917f:	48 01 d8             	add    %rbx,%rax
   19182:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   19186:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1918a:	48 89 c7             	mov    %rax,%rdi
   1918d:	e8 44 ec ff ff       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   19192:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   19196:	72 12                	jb     191aa <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0xb0>
   19198:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1919c:	48 89 c7             	mov    %rax,%rdi
   1919f:	e8 f6 14 00 00       	call   1a69a <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   191a4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   191a8:	73 0e                	jae    191b8 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0xbe>
   191aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   191ae:	48 89 c7             	mov    %rax,%rdi
   191b1:	e8 e4 14 00 00       	call   1a69a <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   191b6:	eb 04                	jmp    191bc <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0xc2>
   191b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   191bc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   191c0:	c9                   	leave
   191c1:	c3                   	ret

00000000000191c2 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   191c2:	55                   	push   %rbp
   191c3:	48 89 e5             	mov    %rsp,%rbp
   191c6:	53                   	push   %rbx
   191c7:	48 83 ec 38          	sub    $0x38,%rsp
   191cb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   191cf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   191d3:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   191d8:	0f 84 19 02 00 00    	je     193f7 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x235>
	  const size_type __size = size();
   191de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   191e2:	48 89 c7             	mov    %rax,%rdi
   191e5:	e8 ec eb ff ff       	call   17dd6 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   191ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   191ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   191f2:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   191f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   191fa:	48 8b 40 08          	mov    0x8(%rax),%rax
   191fe:	48 29 c2             	sub    %rax,%rdx
   19201:	48 c1 fa 03          	sar    $0x3,%rdx
   19205:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   1920c:	aa aa aa 
   1920f:	48 0f af c2          	imul   %rdx,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   19213:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   19217:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1921b:	48 89 c7             	mov    %rax,%rdi
   1921e:	e8 77 14 00 00       	call   1a69a <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   19223:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   19227:	72 16                	jb     1923f <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x7d>
   19229:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1922d:	48 89 c7             	mov    %rax,%rdi
   19230:	e8 65 14 00 00       	call   1a69a <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   19235:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   19239:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1923d:	73 07                	jae    19246 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x84>
   1923f:	b8 01 00 00 00       	mov    $0x1,%eax
   19244:	eb 05                	jmp    1924b <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x89>
   19246:	b8 00 00 00 00       	mov    $0x0,%eax
   1924b:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   1924d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19251:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   19255:	72 33                	jb     1928a <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0xc8>
						 __n, _M_get_Tp_allocator());
   19257:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1925b:	48 89 c7             	mov    %rax,%rdi
   1925e:	e8 5f fe ff ff       	call   190c2 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19263:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   19266:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1926a:	48 8b 40 08          	mov    0x8(%rax),%rax
   1926e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19272:	48 89 ce             	mov    %rcx,%rsi
   19275:	48 89 c7             	mov    %rax,%rdi
   19278:	e8 3f 14 00 00       	call   1a6bc <_ZSt27__uninitialized_default_n_aIPN2vk21QueueFamilyPropertiesEmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   1927d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19281:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   19285:	e9 6d 01 00 00       	jmp    193f7 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x235>
		_M_check_len(__n, "vector::_M_default_append");
   1928a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1928e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19292:	48 8d 15 66 4e 01 00 	lea    0x14e66(%rip),%rdx        # 2e0ff <_ZNSt8__detailL19__atomic_spin_countE+0x390b>
   19299:	48 89 ce             	mov    %rcx,%rsi
   1929c:	48 89 c7             	mov    %rax,%rdi
   1929f:	e8 56 fe ff ff       	call   190fa <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc>
   192a4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   192a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   192ac:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   192b0:	48 89 d6             	mov    %rdx,%rsi
   192b3:	48 89 c7             	mov    %rax,%rdi
   192b6:	e8 2b 14 00 00       	call   1a6e6 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm>
   192bb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   192bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   192c3:	48 89 c7             	mov    %rax,%rdi
   192c6:	e8 f7 fd ff ff       	call   190c2 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   192cb:	48 89 c6             	mov    %rax,%rsi
		      std::__uninitialized_default_n_a(__new_start + __size,
   192ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   192d2:	48 89 d0             	mov    %rdx,%rax
   192d5:	48 01 c0             	add    %rax,%rax
   192d8:	48 01 d0             	add    %rdx,%rax
   192db:	48 c1 e0 03          	shl    $0x3,%rax
   192df:	48 89 c2             	mov    %rax,%rdx
   192e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   192e6:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   192ea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   192ee:	48 89 f2             	mov    %rsi,%rdx
   192f1:	48 89 c6             	mov    %rax,%rsi
   192f4:	48 89 cf             	mov    %rcx,%rdi
   192f7:	e8 c0 13 00 00       	call   1a6bc <_ZSt27__uninitialized_default_n_aIPN2vk21QueueFamilyPropertiesEmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   192fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19300:	48 89 c7             	mov    %rax,%rdi
   19303:	e8 ba fd ff ff       	call   190c2 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19308:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1930b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1930f:	48 8b 70 08          	mov    0x8(%rax),%rsi
   19313:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19317:	48 8b 00             	mov    (%rax),%rax
   1931a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1931e:	48 89 c7             	mov    %rax,%rdi
   19321:	e8 f3 13 00 00       	call   1a719 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   19326:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   1932a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1932e:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   19332:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19336:	48 8b 12             	mov    (%rdx),%rdx
   19339:	48 29 d1             	sub    %rdx,%rcx
   1933c:	48 c1 f9 03          	sar    $0x3,%rcx
   19340:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
   19347:	aa aa aa 
   1934a:	48 0f af d1          	imul   %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   1934e:	48 89 d6             	mov    %rdx,%rsi
   19351:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19355:	48 8b 0a             	mov    (%rdx),%rcx
   19358:	48 89 f2             	mov    %rsi,%rdx
   1935b:	48 89 ce             	mov    %rcx,%rsi
   1935e:	48 89 c7             	mov    %rax,%rdi
   19361:	e8 26 fd ff ff       	call   1908c <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   19366:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1936a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1936e:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   19371:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19375:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19379:	48 01 c2             	add    %rax,%rdx
   1937c:	48 89 d0             	mov    %rdx,%rax
   1937f:	48 01 c0             	add    %rax,%rax
   19382:	48 01 d0             	add    %rdx,%rax
   19385:	48 c1 e0 03          	shl    $0x3,%rax
   19389:	48 89 c2             	mov    %rax,%rdx
   1938c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19390:	48 01 c2             	add    %rax,%rdx
   19393:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19397:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1939b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1939f:	48 89 d0             	mov    %rdx,%rax
   193a2:	48 01 c0             	add    %rax,%rax
   193a5:	48 01 d0             	add    %rdx,%rax
   193a8:	48 c1 e0 03          	shl    $0x3,%rax
   193ac:	48 89 c2             	mov    %rax,%rdx
   193af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   193b3:	48 01 c2             	add    %rax,%rdx
   193b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   193ba:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   193be:	eb 37                	jmp    193f7 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x235>
		  __catch(...)
   193c0:	48 89 c7             	mov    %rax,%rdi
   193c3:	e8 d8 bc fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   193c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   193cc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   193d0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   193d4:	48 89 ce             	mov    %rcx,%rsi
   193d7:	48 89 c7             	mov    %rax,%rdi
   193da:	e8 ad fc ff ff       	call   1908c <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   193df:	e8 2c bf fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   193e4:	48 89 c3             	mov    %rax,%rbx
   193e7:	e8 84 bf fe ff       	call   5370 <__cxa_end_catch@plt>
   193ec:	48 89 d8             	mov    %rbx,%rax
   193ef:	48 89 c7             	mov    %rax,%rdi
   193f2:	e8 a9 bf fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   193f7:	90                   	nop
   193f8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   193fc:	c9                   	leave
   193fd:	c3                   	ret

00000000000193fe <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   193fe:	55                   	push   %rbp
   193ff:	48 89 e5             	mov    %rsp,%rbp
   19402:	48 83 ec 20          	sub    $0x20,%rsp
   19406:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1940a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1940e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19412:	48 8b 40 08          	mov    0x8(%rax),%rax
   19416:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1941a:	48 c1 f8 03          	sar    $0x3,%rax
   1941e:	48 89 c2             	mov    %rax,%rdx
   19421:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   19428:	aa aa aa 
   1942b:	48 0f af c2          	imul   %rdx,%rax
   1942f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19433:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   19438:	74 32                	je     1946c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE15_M_erase_at_endEPS1_+0x6e>
			  _M_get_Tp_allocator());
   1943a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1943e:	48 89 c7             	mov    %rax,%rdi
   19441:	e8 7c fc ff ff       	call   190c2 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19446:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   19449:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1944d:	48 8b 48 08          	mov    0x8(%rax),%rcx
   19451:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19455:	48 89 ce             	mov    %rcx,%rsi
   19458:	48 89 c7             	mov    %rax,%rdi
   1945b:	e8 70 fc ff ff       	call   190d0 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   19460:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19464:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   19468:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   1946c:	90                   	nop
   1946d:	c9                   	leave
   1946e:	c3                   	ret
   1946f:	90                   	nop

0000000000019470 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   19470:	55                   	push   %rbp
   19471:	48 89 e5             	mov    %rsp,%rbp
   19474:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19478:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1947c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19480:	5d                   	pop    %rbp
   19481:	c3                   	ret

0000000000019482 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   19482:	55                   	push   %rbp
   19483:	48 89 e5             	mov    %rsp,%rbp
   19486:	48 83 ec 20          	sub    $0x20,%rsp
   1948a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1948e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19492:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19496:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1949b:	74 17                	je     194b4 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1949d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   194a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   194a5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   194a9:	48 89 ce             	mov    %rcx,%rsi
   194ac:	48 89 c7             	mov    %rax,%rdi
   194af:	e8 97 12 00 00       	call   1a74b <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m>
      }
   194b4:	90                   	nop
   194b5:	c9                   	leave
   194b6:	c3                   	ret
   194b7:	90                   	nop

00000000000194b8 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   194b8:	55                   	push   %rbp
   194b9:	48 89 e5             	mov    %rsp,%rbp
   194bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   194c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   194c4:	5d                   	pop    %rbp
   194c5:	c3                   	ret

00000000000194c6 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   194c6:	55                   	push   %rbp
   194c7:	48 89 e5             	mov    %rsp,%rbp
   194ca:	48 83 ec 20          	sub    $0x20,%rsp
   194ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   194d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   194d6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   194da:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   194de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   194e2:	48 89 d6             	mov    %rdx,%rsi
   194e5:	48 89 c7             	mov    %rax,%rdi
   194e8:	e8 bc 12 00 00       	call   1a7a9 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_>
    }
   194ed:	90                   	nop
   194ee:	c9                   	leave
   194ef:	c3                   	ret

00000000000194f0 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   194f0:	55                   	push   %rbp
   194f1:	48 89 e5             	mov    %rsp,%rbp
   194f4:	53                   	push   %rbx
   194f5:	48 83 ec 38          	sub    $0x38,%rsp
   194f9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   194fd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   19501:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   19505:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19509:	48 89 c7             	mov    %rax,%rdi
   1950c:	e8 db 12 00 00       	call   1a7ec <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   19511:	48 89 c3             	mov    %rax,%rbx
   19514:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19518:	48 89 c7             	mov    %rax,%rdi
   1951b:	e8 6c ea ff ff       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   19520:	48 29 c3             	sub    %rax,%rbx
   19523:	48 89 da             	mov    %rbx,%rdx
   19526:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1952a:	48 39 c2             	cmp    %rax,%rdx
   1952d:	0f 92 c0             	setb   %al
   19530:	84 c0                	test   %al,%al
   19532:	74 0c                	je     19540 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   19534:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19538:	48 89 c7             	mov    %rax,%rdi
   1953b:	e8 a0 bb fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   19540:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19544:	48 89 c7             	mov    %rax,%rdi
   19547:	e8 40 ea ff ff       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   1954c:	48 89 c3             	mov    %rax,%rbx
   1954f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19553:	48 89 c7             	mov    %rax,%rdi
   19556:	e8 31 ea ff ff       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   1955b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1955f:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   19563:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19567:	48 89 d6             	mov    %rdx,%rsi
   1956a:	48 89 c7             	mov    %rax,%rdi
   1956d:	e8 6a f3 ff ff       	call   188dc <_ZSt3maxImERKT_S2_S2_>
   19572:	48 8b 00             	mov    (%rax),%rax
   19575:	48 01 d8             	add    %rbx,%rax
   19578:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1957c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19580:	48 89 c7             	mov    %rax,%rdi
   19583:	e8 04 ea ff ff       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   19588:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1958c:	72 12                	jb     195a0 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0xb0>
   1958e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19592:	48 89 c7             	mov    %rax,%rdi
   19595:	e8 52 12 00 00       	call   1a7ec <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   1959a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1959e:	73 0e                	jae    195ae <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0xbe>
   195a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   195a4:	48 89 c7             	mov    %rax,%rdi
   195a7:	e8 40 12 00 00       	call   1a7ec <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   195ac:	eb 04                	jmp    195b2 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0xc2>
   195ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   195b2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   195b6:	c9                   	leave
   195b7:	c3                   	ret

00000000000195b8 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   195b8:	55                   	push   %rbp
   195b9:	48 89 e5             	mov    %rsp,%rbp
   195bc:	53                   	push   %rbx
   195bd:	48 83 ec 38          	sub    $0x38,%rsp
   195c1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   195c5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   195c9:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   195ce:	0f 84 1c 02 00 00    	je     197f0 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x238>
	  const size_type __size = size();
   195d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   195d8:	48 89 c7             	mov    %rax,%rdi
   195db:	e8 ac e9 ff ff       	call   17f8c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   195e0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   195e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   195e8:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   195ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   195f0:	48 8b 40 08          	mov    0x8(%rax),%rax
   195f4:	48 29 c2             	sub    %rax,%rdx
   195f7:	48 c1 fa 02          	sar    $0x2,%rdx
   195fb:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   19602:	fc c0 0f 
   19605:	48 0f af c2          	imul   %rdx,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   19609:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   1960d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19611:	48 89 c7             	mov    %rax,%rdi
   19614:	e8 d3 11 00 00       	call   1a7ec <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   19619:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1961d:	72 16                	jb     19635 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x7d>
   1961f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19623:	48 89 c7             	mov    %rax,%rdi
   19626:	e8 c1 11 00 00       	call   1a7ec <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   1962b:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1962f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   19633:	73 07                	jae    1963c <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x84>
   19635:	b8 01 00 00 00       	mov    $0x1,%eax
   1963a:	eb 05                	jmp    19641 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x89>
   1963c:	b8 00 00 00 00       	mov    $0x0,%eax
   19641:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   19643:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19647:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1964b:	72 33                	jb     19680 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0xc8>
						 __n, _M_get_Tp_allocator());
   1964d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19651:	48 89 c7             	mov    %rax,%rdi
   19654:	e8 5f fe ff ff       	call   194b8 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19659:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   1965c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19660:	48 8b 40 08          	mov    0x8(%rax),%rax
   19664:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19668:	48 89 ce             	mov    %rcx,%rsi
   1966b:	48 89 c7             	mov    %rax,%rdi
   1966e:	e8 9b 11 00 00       	call   1a80e <_ZSt27__uninitialized_default_n_aIPN2vk19ExtensionPropertiesEmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   19673:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19677:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   1967b:	e9 70 01 00 00       	jmp    197f0 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		_M_check_len(__n, "vector::_M_default_append");
   19680:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19684:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19688:	48 8d 15 70 4a 01 00 	lea    0x14a70(%rip),%rdx        # 2e0ff <_ZNSt8__detailL19__atomic_spin_countE+0x390b>
   1968f:	48 89 ce             	mov    %rcx,%rsi
   19692:	48 89 c7             	mov    %rax,%rdi
   19695:	e8 56 fe ff ff       	call   194f0 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc>
   1969a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   1969e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   196a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   196a6:	48 89 d6             	mov    %rdx,%rsi
   196a9:	48 89 c7             	mov    %rax,%rdi
   196ac:	e8 87 11 00 00       	call   1a838 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm>
   196b1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   196b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   196b9:	48 89 c7             	mov    %rax,%rdi
   196bc:	e8 f7 fd ff ff       	call   194b8 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   196c1:	48 89 c6             	mov    %rax,%rsi
		      std::__uninitialized_default_n_a(__new_start + __size,
   196c4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   196c8:	48 89 d0             	mov    %rdx,%rax
   196cb:	48 c1 e0 06          	shl    $0x6,%rax
   196cf:	48 01 d0             	add    %rdx,%rax
   196d2:	48 c1 e0 02          	shl    $0x2,%rax
   196d6:	48 89 c2             	mov    %rax,%rdx
   196d9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   196dd:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   196e1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   196e5:	48 89 f2             	mov    %rsi,%rdx
   196e8:	48 89 c6             	mov    %rax,%rsi
   196eb:	48 89 cf             	mov    %rcx,%rdi
   196ee:	e8 1b 11 00 00       	call   1a80e <_ZSt27__uninitialized_default_n_aIPN2vk19ExtensionPropertiesEmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   196f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   196f7:	48 89 c7             	mov    %rax,%rdi
   196fa:	e8 b9 fd ff ff       	call   194b8 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   196ff:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   19702:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19706:	48 8b 70 08          	mov    0x8(%rax),%rsi
   1970a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1970e:	48 8b 00             	mov    (%rax),%rax
   19711:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19715:	48 89 c7             	mov    %rax,%rdi
   19718:	e8 4e 11 00 00       	call   1a86b <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   1971d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   19721:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19725:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   19729:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1972d:	48 8b 12             	mov    (%rdx),%rdx
   19730:	48 29 d1             	sub    %rdx,%rcx
   19733:	48 c1 f9 02          	sar    $0x2,%rcx
   19737:	48 ba c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rdx
   1973e:	fc c0 0f 
   19741:	48 0f af d1          	imul   %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   19745:	48 89 d6             	mov    %rdx,%rsi
   19748:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1974c:	48 8b 0a             	mov    (%rdx),%rcx
   1974f:	48 89 f2             	mov    %rsi,%rdx
   19752:	48 89 ce             	mov    %rcx,%rsi
   19755:	48 89 c7             	mov    %rax,%rdi
   19758:	e8 25 fd ff ff       	call   19482 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   1975d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19761:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19765:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   19768:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1976c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19770:	48 01 c2             	add    %rax,%rdx
   19773:	48 89 d0             	mov    %rdx,%rax
   19776:	48 c1 e0 06          	shl    $0x6,%rax
   1977a:	48 01 d0             	add    %rdx,%rax
   1977d:	48 c1 e0 02          	shl    $0x2,%rax
   19781:	48 89 c2             	mov    %rax,%rdx
   19784:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19788:	48 01 c2             	add    %rax,%rdx
   1978b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1978f:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   19793:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19797:	48 89 d0             	mov    %rdx,%rax
   1979a:	48 c1 e0 06          	shl    $0x6,%rax
   1979e:	48 01 d0             	add    %rdx,%rax
   197a1:	48 c1 e0 02          	shl    $0x2,%rax
   197a5:	48 89 c2             	mov    %rax,%rdx
   197a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   197ac:	48 01 c2             	add    %rax,%rdx
   197af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   197b3:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   197b7:	eb 37                	jmp    197f0 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		  __catch(...)
   197b9:	48 89 c7             	mov    %rax,%rdi
   197bc:	e8 df b8 fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   197c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   197c5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   197c9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   197cd:	48 89 ce             	mov    %rcx,%rsi
   197d0:	48 89 c7             	mov    %rax,%rdi
   197d3:	e8 aa fc ff ff       	call   19482 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   197d8:	e8 33 bb fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   197dd:	48 89 c3             	mov    %rax,%rbx
   197e0:	e8 8b bb fe ff       	call   5370 <__cxa_end_catch@plt>
   197e5:	48 89 d8             	mov    %rbx,%rax
   197e8:	48 89 c7             	mov    %rax,%rdi
   197eb:	e8 b0 bb fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   197f0:	90                   	nop
   197f1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   197f5:	c9                   	leave
   197f6:	c3                   	ret
   197f7:	90                   	nop

00000000000197f8 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   197f8:	55                   	push   %rbp
   197f9:	48 89 e5             	mov    %rsp,%rbp
   197fc:	48 83 ec 20          	sub    $0x20,%rsp
   19800:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19804:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   19808:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1980c:	48 8b 40 08          	mov    0x8(%rax),%rax
   19810:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   19814:	48 c1 f8 02          	sar    $0x2,%rax
   19818:	48 89 c2             	mov    %rax,%rdx
   1981b:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   19822:	fc c0 0f 
   19825:	48 0f af c2          	imul   %rdx,%rax
   19829:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1982d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   19832:	74 32                	je     19866 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE15_M_erase_at_endEPS1_+0x6e>
			  _M_get_Tp_allocator());
   19834:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19838:	48 89 c7             	mov    %rax,%rdi
   1983b:	e8 78 fc ff ff       	call   194b8 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19840:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   19843:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19847:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1984b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1984f:	48 89 ce             	mov    %rcx,%rsi
   19852:	48 89 c7             	mov    %rax,%rdi
   19855:	e8 6c fc ff ff       	call   194c6 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   1985a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1985e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   19862:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   19866:	90                   	nop
   19867:	c9                   	leave
   19868:	c3                   	ret
   19869:	90                   	nop

000000000001986a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   1986a:	55                   	push   %rbp
   1986b:	48 89 e5             	mov    %rsp,%rbp
   1986e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19872:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   19876:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1987a:	5d                   	pop    %rbp
   1987b:	c3                   	ret

000000000001987c <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1987c:	55                   	push   %rbp
   1987d:	48 89 e5             	mov    %rsp,%rbp
   19880:	48 83 ec 20          	sub    $0x20,%rsp
   19884:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19888:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1988c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19890:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19895:	74 17                	je     198ae <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19897:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1989b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1989f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   198a3:	48 89 ce             	mov    %rcx,%rsi
   198a6:	48 89 c7             	mov    %rax,%rdi
   198a9:	e8 ef 0f 00 00       	call   1a89d <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m>
      }
   198ae:	90                   	nop
   198af:	c9                   	leave
   198b0:	c3                   	ret
   198b1:	90                   	nop

00000000000198b2 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   198b2:	55                   	push   %rbp
   198b3:	48 89 e5             	mov    %rsp,%rbp
   198b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   198ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   198be:	5d                   	pop    %rbp
   198bf:	c3                   	ret

00000000000198c0 <_ZSt8_DestroyIPN2vk15LayerPropertiesES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   198c0:	55                   	push   %rbp
   198c1:	48 89 e5             	mov    %rsp,%rbp
   198c4:	48 83 ec 20          	sub    $0x20,%rsp
   198c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   198cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   198d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   198d4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   198d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   198dc:	48 89 d6             	mov    %rdx,%rsi
   198df:	48 89 c7             	mov    %rax,%rdi
   198e2:	e8 14 10 00 00       	call   1a8fb <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_>
    }
   198e7:	90                   	nop
   198e8:	c9                   	leave
   198e9:	c3                   	ret

00000000000198ea <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   198ea:	55                   	push   %rbp
   198eb:	48 89 e5             	mov    %rsp,%rbp
   198ee:	53                   	push   %rbx
   198ef:	48 83 ec 38          	sub    $0x38,%rsp
   198f3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   198f7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   198fb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   198ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19903:	48 89 c7             	mov    %rax,%rdi
   19906:	e8 33 10 00 00       	call   1a93e <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   1990b:	48 89 c3             	mov    %rax,%rbx
   1990e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19912:	48 89 c7             	mov    %rax,%rdi
   19915:	e8 fe e7 ff ff       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1991a:	48 29 c3             	sub    %rax,%rbx
   1991d:	48 89 da             	mov    %rbx,%rdx
   19920:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19924:	48 39 c2             	cmp    %rax,%rdx
   19927:	0f 92 c0             	setb   %al
   1992a:	84 c0                	test   %al,%al
   1992c:	74 0c                	je     1993a <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1992e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19932:	48 89 c7             	mov    %rax,%rdi
   19935:	e8 a6 b7 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1993a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1993e:	48 89 c7             	mov    %rax,%rdi
   19941:	e8 d2 e7 ff ff       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   19946:	48 89 c3             	mov    %rax,%rbx
   19949:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1994d:	48 89 c7             	mov    %rax,%rdi
   19950:	e8 c3 e7 ff ff       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   19955:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19959:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1995d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19961:	48 89 d6             	mov    %rdx,%rsi
   19964:	48 89 c7             	mov    %rax,%rdi
   19967:	e8 70 ef ff ff       	call   188dc <_ZSt3maxImERKT_S2_S2_>
   1996c:	48 8b 00             	mov    (%rax),%rax
   1996f:	48 01 d8             	add    %rbx,%rax
   19972:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   19976:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1997a:	48 89 c7             	mov    %rax,%rdi
   1997d:	e8 96 e7 ff ff       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   19982:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   19986:	72 12                	jb     1999a <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0xb0>
   19988:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1998c:	48 89 c7             	mov    %rax,%rdi
   1998f:	e8 aa 0f 00 00       	call   1a93e <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   19994:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   19998:	73 0e                	jae    199a8 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0xbe>
   1999a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1999e:	48 89 c7             	mov    %rax,%rdi
   199a1:	e8 98 0f 00 00       	call   1a93e <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   199a6:	eb 04                	jmp    199ac <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0xc2>
   199a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   199ac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   199b0:	c9                   	leave
   199b1:	c3                   	ret

00000000000199b2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   199b2:	55                   	push   %rbp
   199b3:	48 89 e5             	mov    %rsp,%rbp
   199b6:	53                   	push   %rbx
   199b7:	48 83 ec 38          	sub    $0x38,%rsp
   199bb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   199bf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   199c3:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   199c8:	0f 84 1c 02 00 00    	je     19bea <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x238>
	  const size_type __size = size();
   199ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   199d2:	48 89 c7             	mov    %rax,%rdi
   199d5:	e8 3e e7 ff ff       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   199da:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   199de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   199e2:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   199e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   199ea:	48 8b 40 08          	mov    0x8(%rax),%rax
   199ee:	48 29 c2             	sub    %rax,%rdx
   199f1:	48 c1 fa 03          	sar    $0x3,%rdx
   199f5:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   199fc:	fc c0 0f 
   199ff:	48 0f af c2          	imul   %rdx,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   19a03:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   19a07:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19a0b:	48 89 c7             	mov    %rax,%rdi
   19a0e:	e8 2b 0f 00 00       	call   1a93e <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   19a13:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   19a17:	72 16                	jb     19a2f <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x7d>
   19a19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19a1d:	48 89 c7             	mov    %rax,%rdi
   19a20:	e8 19 0f 00 00       	call   1a93e <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   19a25:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   19a29:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   19a2d:	73 07                	jae    19a36 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x84>
   19a2f:	b8 01 00 00 00       	mov    $0x1,%eax
   19a34:	eb 05                	jmp    19a3b <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x89>
   19a36:	b8 00 00 00 00       	mov    $0x0,%eax
   19a3b:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   19a3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19a41:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   19a45:	72 33                	jb     19a7a <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0xc8>
						 __n, _M_get_Tp_allocator());
   19a47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19a4b:	48 89 c7             	mov    %rax,%rdi
   19a4e:	e8 5f fe ff ff       	call   198b2 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19a53:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   19a56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19a5a:	48 8b 40 08          	mov    0x8(%rax),%rax
   19a5e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19a62:	48 89 ce             	mov    %rcx,%rsi
   19a65:	48 89 c7             	mov    %rax,%rdi
   19a68:	e8 f3 0e 00 00       	call   1a960 <_ZSt27__uninitialized_default_n_aIPN2vk15LayerPropertiesEmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   19a6d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19a71:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   19a75:	e9 70 01 00 00       	jmp    19bea <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		_M_check_len(__n, "vector::_M_default_append");
   19a7a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19a7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19a82:	48 8d 15 76 46 01 00 	lea    0x14676(%rip),%rdx        # 2e0ff <_ZNSt8__detailL19__atomic_spin_countE+0x390b>
   19a89:	48 89 ce             	mov    %rcx,%rsi
   19a8c:	48 89 c7             	mov    %rax,%rdi
   19a8f:	e8 56 fe ff ff       	call   198ea <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc>
   19a94:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   19a98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19a9c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19aa0:	48 89 d6             	mov    %rdx,%rsi
   19aa3:	48 89 c7             	mov    %rax,%rdi
   19aa6:	e8 df 0e 00 00       	call   1a98a <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm>
   19aab:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   19aaf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19ab3:	48 89 c7             	mov    %rax,%rdi
   19ab6:	e8 f7 fd ff ff       	call   198b2 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19abb:	48 89 c6             	mov    %rax,%rsi
		      std::__uninitialized_default_n_a(__new_start + __size,
   19abe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19ac2:	48 89 d0             	mov    %rdx,%rax
   19ac5:	48 c1 e0 06          	shl    $0x6,%rax
   19ac9:	48 01 d0             	add    %rdx,%rax
   19acc:	48 c1 e0 03          	shl    $0x3,%rax
   19ad0:	48 89 c2             	mov    %rax,%rdx
   19ad3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19ad7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   19adb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19adf:	48 89 f2             	mov    %rsi,%rdx
   19ae2:	48 89 c6             	mov    %rax,%rsi
   19ae5:	48 89 cf             	mov    %rcx,%rdi
   19ae8:	e8 73 0e 00 00       	call   1a960 <_ZSt27__uninitialized_default_n_aIPN2vk15LayerPropertiesEmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   19aed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19af1:	48 89 c7             	mov    %rax,%rdi
   19af4:	e8 b9 fd ff ff       	call   198b2 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19af9:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   19afc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19b00:	48 8b 70 08          	mov    0x8(%rax),%rsi
   19b04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19b08:	48 8b 00             	mov    (%rax),%rax
   19b0b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19b0f:	48 89 c7             	mov    %rax,%rdi
   19b12:	e8 a6 0e 00 00       	call   1a9bd <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   19b17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   19b1b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19b1f:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   19b23:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19b27:	48 8b 12             	mov    (%rdx),%rdx
   19b2a:	48 29 d1             	sub    %rdx,%rcx
   19b2d:	48 c1 f9 03          	sar    $0x3,%rcx
   19b31:	48 ba c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rdx
   19b38:	fc c0 0f 
   19b3b:	48 0f af d1          	imul   %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   19b3f:	48 89 d6             	mov    %rdx,%rsi
   19b42:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19b46:	48 8b 0a             	mov    (%rdx),%rcx
   19b49:	48 89 f2             	mov    %rsi,%rdx
   19b4c:	48 89 ce             	mov    %rcx,%rsi
   19b4f:	48 89 c7             	mov    %rax,%rdi
   19b52:	e8 25 fd ff ff       	call   1987c <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   19b57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19b5b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19b5f:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   19b62:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19b66:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19b6a:	48 01 c2             	add    %rax,%rdx
   19b6d:	48 89 d0             	mov    %rdx,%rax
   19b70:	48 c1 e0 06          	shl    $0x6,%rax
   19b74:	48 01 d0             	add    %rdx,%rax
   19b77:	48 c1 e0 03          	shl    $0x3,%rax
   19b7b:	48 89 c2             	mov    %rax,%rdx
   19b7e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19b82:	48 01 c2             	add    %rax,%rdx
   19b85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19b89:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   19b8d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19b91:	48 89 d0             	mov    %rdx,%rax
   19b94:	48 c1 e0 06          	shl    $0x6,%rax
   19b98:	48 01 d0             	add    %rdx,%rax
   19b9b:	48 c1 e0 03          	shl    $0x3,%rax
   19b9f:	48 89 c2             	mov    %rax,%rdx
   19ba2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19ba6:	48 01 c2             	add    %rax,%rdx
   19ba9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19bad:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   19bb1:	eb 37                	jmp    19bea <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		  __catch(...)
   19bb3:	48 89 c7             	mov    %rax,%rdi
   19bb6:	e8 e5 b4 fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   19bbb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19bbf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19bc3:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   19bc7:	48 89 ce             	mov    %rcx,%rsi
   19bca:	48 89 c7             	mov    %rax,%rdi
   19bcd:	e8 aa fc ff ff       	call   1987c <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   19bd2:	e8 39 b7 fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   19bd7:	48 89 c3             	mov    %rax,%rbx
   19bda:	e8 91 b7 fe ff       	call   5370 <__cxa_end_catch@plt>
   19bdf:	48 89 d8             	mov    %rbx,%rax
   19be2:	48 89 c7             	mov    %rax,%rdi
   19be5:	e8 b6 b7 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   19bea:	90                   	nop
   19beb:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19bef:	c9                   	leave
   19bf0:	c3                   	ret
   19bf1:	90                   	nop

0000000000019bf2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   19bf2:	55                   	push   %rbp
   19bf3:	48 89 e5             	mov    %rsp,%rbp
   19bf6:	48 83 ec 20          	sub    $0x20,%rsp
   19bfa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19bfe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   19c02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19c06:	48 8b 40 08          	mov    0x8(%rax),%rax
   19c0a:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   19c0e:	48 c1 f8 03          	sar    $0x3,%rax
   19c12:	48 89 c2             	mov    %rax,%rdx
   19c15:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   19c1c:	fc c0 0f 
   19c1f:	48 0f af c2          	imul   %rdx,%rax
   19c23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19c27:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   19c2c:	74 32                	je     19c60 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE15_M_erase_at_endEPS1_+0x6e>
			  _M_get_Tp_allocator());
   19c2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19c32:	48 89 c7             	mov    %rax,%rdi
   19c35:	e8 78 fc ff ff       	call   198b2 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19c3a:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   19c3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19c41:	48 8b 48 08          	mov    0x8(%rax),%rcx
   19c45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19c49:	48 89 ce             	mov    %rcx,%rsi
   19c4c:	48 89 c7             	mov    %rax,%rdi
   19c4f:	e8 6c fc ff ff       	call   198c0 <_ZSt8_DestroyIPN2vk15LayerPropertiesES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   19c54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19c58:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   19c5c:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   19c60:	90                   	nop
   19c61:	c9                   	leave
   19c62:	c3                   	ret
   19c63:	90                   	nop

0000000000019c64 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   19c64:	55                   	push   %rbp
   19c65:	48 89 e5             	mov    %rsp,%rbp
   19c68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19c6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   19c70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19c74:	5d                   	pop    %rbp
   19c75:	c3                   	ret

0000000000019c76 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   19c76:	55                   	push   %rbp
   19c77:	48 89 e5             	mov    %rsp,%rbp
   19c7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   19c7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19c82:	5d                   	pop    %rbp
   19c83:	c3                   	ret

0000000000019c84 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   19c84:	55                   	push   %rbp
   19c85:	48 89 e5             	mov    %rsp,%rbp
   19c88:	48 83 ec 20          	sub    $0x20,%rsp
   19c8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19c90:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19c94:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19c98:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19c9d:	74 17                	je     19cb6 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19c9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ca3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19ca7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19cab:	48 89 ce             	mov    %rcx,%rsi
   19cae:	48 89 c7             	mov    %rax,%rdi
   19cb1:	e8 39 0d 00 00       	call   1a9ef <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>
      }
   19cb6:	90                   	nop
   19cb7:	c9                   	leave
   19cb8:	c3                   	ret
   19cb9:	90                   	nop

0000000000019cba <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   19cba:	55                   	push   %rbp
   19cbb:	48 89 e5             	mov    %rsp,%rbp
   19cbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   19cc2:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   19cc9:	ff ff 0f 
      }
   19ccc:	5d                   	pop    %rbp
   19ccd:	c3                   	ret

0000000000019cce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   19cce:	55                   	push   %rbp
   19ccf:	48 89 e5             	mov    %rsp,%rbp
   19cd2:	48 83 ec 20          	sub    $0x20,%rsp
   19cd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19cda:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19cde:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
   19ce2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19ce6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19cea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19cee:	48 89 ce             	mov    %rcx,%rsi
   19cf1:	48 89 c7             	mov    %rax,%rdi
   19cf4:	e8 54 0d 00 00       	call   1aa4d <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>
   19cf9:	c9                   	leave
   19cfa:	c3                   	ret

0000000000019cfb <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   19cfb:	55                   	push   %rbp
   19cfc:	48 89 e5             	mov    %rsp,%rbp
   19cff:	48 83 ec 10          	sub    $0x10,%rsp
   19d03:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d07:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   19d0b:	eb 19                	jmp    19d26 <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   19d0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d11:	48 89 c7             	mov    %rax,%rdi
   19d14:	e8 d9 d5 ff ff       	call   172f2 <_ZSt11__addressofIPKcEPT_RS2_>
   19d19:	48 89 c7             	mov    %rax,%rdi
   19d1c:	e8 77 0d 00 00       	call   1aa98 <_ZSt8_DestroyIPKcEvPT_>
	  for (; __first != __last; ++__first)
   19d21:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   19d26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d2a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   19d2e:	75 dd                	jne    19d0d <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_+0x12>
	}
   19d30:	90                   	nop
   19d31:	90                   	nop
   19d32:	c9                   	leave
   19d33:	c3                   	ret

0000000000019d34 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   19d34:	55                   	push   %rbp
   19d35:	48 89 e5             	mov    %rsp,%rbp
   19d38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19d40:	90                   	nop
   19d41:	5d                   	pop    %rbp
   19d42:	c3                   	ret

0000000000019d43 <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   19d43:	55                   	push   %rbp
   19d44:	48 89 e5             	mov    %rsp,%rbp
   19d47:	48 83 ec 20          	sub    $0x20,%rsp
   19d4b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d4f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19d53:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   19d57:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19d5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d5f:	48 89 d6             	mov    %rdx,%rsi
   19d62:	48 89 c7             	mov    %rax,%rdi
   19d65:	e8 c0 e4 ff ff       	call   1822a <_ZSt8_DestroyIPPKcEvT_S3_>
    }
   19d6a:	90                   	nop
   19d6b:	c9                   	leave
   19d6c:	c3                   	ret
   19d6d:	90                   	nop

0000000000019d6e <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   19d6e:	55                   	push   %rbp
   19d6f:	48 89 e5             	mov    %rsp,%rbp
   19d72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d76:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   19d7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19d7e:	48 8b 10             	mov    (%rax),%rdx
   19d81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d85:	48 89 10             	mov    %rdx,(%rax)
   19d88:	90                   	nop
   19d89:	5d                   	pop    %rbp
   19d8a:	c3                   	ret
   19d8b:	90                   	nop

0000000000019d8c <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
   19d8c:	55                   	push   %rbp
   19d8d:	48 89 e5             	mov    %rsp,%rbp
   19d90:	48 83 ec 10          	sub    $0x10,%rsp
   19d94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d9c:	48 89 c7             	mov    %rax,%rdi
   19d9f:	e8 10 0d 00 00       	call   1aab4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
   19da4:	90                   	nop
   19da5:	c9                   	leave
   19da6:	c3                   	ret
   19da7:	90                   	nop

0000000000019da8 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
   19da8:	55                   	push   %rbp
   19da9:	48 89 e5             	mov    %rsp,%rbp
   19dac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { }
   19db0:	90                   	nop
   19db1:	5d                   	pop    %rbp
   19db2:	c3                   	ret
   19db3:	90                   	nop

0000000000019db4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   19db4:	55                   	push   %rbp
   19db5:	48 89 e5             	mov    %rsp,%rbp
   19db8:	48 83 ec 20          	sub    $0x20,%rsp
   19dbc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19dc0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   19dc4:	eb 49                	jmp    19e0f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x5b>
	{
	  _M_erase(_S_right(__x));
   19dc6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19dca:	48 89 c7             	mov    %rax,%rdi
   19dcd:	e8 ed 0c 00 00       	call   1aabf <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   19dd2:	48 89 c2             	mov    %rax,%rdx
   19dd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19dd9:	48 89 d6             	mov    %rdx,%rsi
   19ddc:	48 89 c7             	mov    %rax,%rdi
   19ddf:	e8 d0 ff ff ff       	call   19db4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
   19de4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19de8:	48 89 c7             	mov    %rax,%rdi
   19deb:	e8 e1 0c 00 00       	call   1aad1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   19df0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_drop_node(__x);
   19df4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   19df8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19dfc:	48 89 d6             	mov    %rdx,%rsi
   19dff:	48 89 c7             	mov    %rax,%rdi
   19e02:	e8 dd 0c 00 00       	call   1aae4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
   19e07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e0b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      while (__x != 0)
   19e0f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   19e14:	75 b0                	jne    19dc6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x12>
	}
    }
   19e16:	90                   	nop
   19e17:	90                   	nop
   19e18:	c9                   	leave
   19e19:	c3                   	ret

0000000000019e1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
   19e1a:	55                   	push   %rbp
   19e1b:	48 89 e5             	mov    %rsp,%rbp
   19e1e:	48 83 ec 10          	sub    $0x10,%rsp
   19e22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_mbegin(); }
   19e26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e2a:	48 89 c7             	mov    %rax,%rdi
   19e2d:	e8 ec 0c 00 00       	call   1ab1e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>
   19e32:	c9                   	leave
   19e33:	c3                   	ret

0000000000019e34 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   19e34:	55                   	push   %rbp
   19e35:	48 89 e5             	mov    %rsp,%rbp
   19e38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19e3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   19e40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19e44:	48 8b 10             	mov    (%rax),%rdx
   19e47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e4b:	48 89 10             	mov    %rdx,(%rax)
   19e4e:	90                   	nop
   19e4f:	5d                   	pop    %rbp
   19e50:	c3                   	ret
   19e51:	90                   	nop

0000000000019e52 <_ZNKSt5arrayIcLm256EE4dataEv>:
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
   19e52:	55                   	push   %rbp
   19e53:	48 89 e5             	mov    %rsp,%rbp
   19e56:	48 83 ec 10          	sub    $0x10,%rsp
   19e5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _AT_Type::_S_ptr(_M_elems); }
   19e5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e62:	48 89 c7             	mov    %rax,%rdi
   19e65:	e8 c6 0c 00 00       	call   1ab30 <_ZNSt14__array_traitsIcLm256EE6_S_ptrERA256_Kc>
   19e6a:	c9                   	leave
   19e6b:	c3                   	ret

0000000000019e6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
   19e6c:	55                   	push   %rbp
   19e6d:	48 89 e5             	mov    %rsp,%rbp
   19e70:	48 83 ec 10          	sub    $0x10,%rsp
   19e74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19e78:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_t.lower_bound(__x); }
   19e7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e80:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19e84:	48 89 d6             	mov    %rdx,%rsi
   19e87:	48 89 c7             	mov    %rax,%rdi
   19e8a:	e8 af 0c 00 00       	call   1ab3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>
   19e8f:	c9                   	leave
   19e90:	c3                   	ret
   19e91:	90                   	nop

0000000000019e92 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   19e92:	55                   	push   %rbp
   19e93:	48 89 e5             	mov    %rsp,%rbp
   19e96:	48 83 ec 10          	sub    $0x10,%rsp
   19e9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.end(); }
   19e9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ea2:	48 89 c7             	mov    %rax,%rdi
   19ea5:	e8 e0 0c 00 00       	call   1ab8a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>
   19eaa:	c9                   	leave
   19eab:	c3                   	ret

0000000000019eac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
   19eac:	55                   	push   %rbp
   19ead:	48 89 e5             	mov    %rsp,%rbp
   19eb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19eb4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x._M_node == __y._M_node; }
   19eb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ebc:	48 8b 10             	mov    (%rax),%rdx
   19ebf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19ec3:	48 8b 00             	mov    (%rax),%rax
   19ec6:	48 39 c2             	cmp    %rax,%rdx
   19ec9:	0f 94 c0             	sete   %al
   19ecc:	5d                   	pop    %rbp
   19ecd:	c3                   	ret

0000000000019ece <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>:
      key_comp() const
   19ece:	55                   	push   %rbp
   19ecf:	48 89 e5             	mov    %rsp,%rbp
   19ed2:	48 83 ec 10          	sub    $0x10,%rsp
   19ed6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.key_comp(); }
   19eda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ede:	48 89 c7             	mov    %rax,%rdi
   19ee1:	e8 ce 0c 00 00       	call   1abb4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>
   19ee6:	90                   	nop
   19ee7:	c9                   	leave
   19ee8:	c3                   	ret
   19ee9:	90                   	nop

0000000000019eea <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   19eea:	55                   	push   %rbp
   19eeb:	48 89 e5             	mov    %rsp,%rbp
   19eee:	48 83 ec 10          	sub    $0x10,%rsp
   19ef2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
   19ef6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19efa:	48 8b 00             	mov    (%rax),%rax
   19efd:	48 89 c7             	mov    %rax,%rdi
   19f00:	e8 bb 0c 00 00       	call   1abc0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   19f05:	c9                   	leave
   19f06:	c3                   	ret

0000000000019f07 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai>:
#if __cpp_lib_three_way_comparison
  namespace __detail
  {
    template<typename _ChTraits>
      constexpr auto
      __char_traits_cmp_cat(int __cmp) noexcept
   19f07:	55                   	push   %rbp
   19f08:	48 89 e5             	mov    %rsp,%rbp
   19f0b:	89 7d fc             	mov    %edi,-0x4(%rbp)
      {
	if constexpr (requires { typename _ChTraits::comparison_category; })
	  {
	    using _Cat = typename _ChTraits::comparison_category;
	    static_assert( !is_void_v<common_comparison_category_t<_Cat>> );
	    return static_cast<_Cat>(__cmp <=> 0);
   19f0e:	8b 45 fc             	mov    -0x4(%rbp),%eax
   19f11:	85 c0                	test   %eax,%eax
   19f13:	74 12                	je     19f27 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x20>
   19f15:	85 c0                	test   %eax,%eax
   19f17:	79 07                	jns    19f20 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x19>
   19f19:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   19f1e:	eb 0c                	jmp    19f2c <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x25>
   19f20:	b8 01 00 00 00       	mov    $0x1,%eax
   19f25:	eb 05                	jmp    19f2c <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x25>
   19f27:	b8 00 00 00 00       	mov    $0x0,%eax
	  }
	else
	  return static_cast<weak_ordering>(__cmp <=> 0);
      }
   19f2c:	5d                   	pop    %rbp
   19f2d:	c3                   	ret

0000000000019f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
      operator()(const _Tp& __x, const _Tp& __y) const
   19f2e:	55                   	push   %rbp
   19f2f:	48 89 e5             	mov    %rsp,%rbp
   19f32:	48 83 ec 30          	sub    $0x30,%rsp
   19f36:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19f3a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   19f3e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      { return __x < __y; }
   19f42:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   19f46:	be 00 00 00 00       	mov    $0x0,%esi
   19f4b:	48 89 c7             	mov    %rax,%rdi
   19f4e:	e8 95 57 ff ff       	call   f6e8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
   19f53:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19f57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19f5b:	48 89 d6             	mov    %rdx,%rsi
   19f5e:	48 89 c7             	mov    %rax,%rdi
   19f61:	e8 78 0c 00 00       	call   1abde <_ZStssIcSt11char_traitsIcESaIcEEDTcl21__char_traits_cmp_catIT0_ELi0EEERKNSt7__cxx1112basic_stringIT_S3_T1_EESB_>
   19f66:	89 c7                	mov    %eax,%edi
   19f68:	e8 8a 57 ff ff       	call   f6f7 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
   19f6d:	c9                   	leave
   19f6e:	c3                   	ret

0000000000019f6f <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
   19f6f:	55                   	push   %rbp
   19f70:	48 89 e5             	mov    %rsp,%rbp
   19f73:	48 83 ec 10          	sub    $0x10,%rsp
   19f77:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19f7b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
   19f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19f83:	48 89 c7             	mov    %rax,%rdi
   19f86:	e8 7f 0c 00 00       	call   1ac0a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   19f8b:	48 89 c2             	mov    %rax,%rdx
   19f8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f92:	48 89 d6             	mov    %rdx,%rsi
   19f95:	48 89 c7             	mov    %rax,%rdi
   19f98:	e8 7b 0c 00 00       	call   1ac18 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>
   19f9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19fa1:	c9                   	leave
   19fa2:	c3                   	ret
   19fa3:	90                   	nop

0000000000019fa4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
   19fa4:	55                   	push   %rbp
   19fa5:	48 89 e5             	mov    %rsp,%rbp
   19fa8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19fac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__it._M_node) { }
   19fb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19fb4:	48 8b 10             	mov    (%rax),%rdx
   19fb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19fbb:	48 89 10             	mov    %rdx,(%rax)
   19fbe:	90                   	nop
   19fbf:	5d                   	pop    %rbp
   19fc0:	c3                   	ret
   19fc1:	90                   	nop

0000000000019fc2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   19fc2:	55                   	push   %rbp
   19fc3:	48 89 e5             	mov    %rsp,%rbp
   19fc6:	41 54                	push   %r12
   19fc8:	53                   	push   %rbx
   19fc9:	48 83 ec 60          	sub    $0x60,%rsp
   19fcd:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   19fd1:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
   19fd5:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   19fd9:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   19fdd:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
   19fe1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   19fe5:	48 89 c7             	mov    %rax,%rdi
   19fe8:	e8 7a 0c 00 00       	call   1ac67 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   19fed:	49 89 c4             	mov    %rax,%r12
   19ff0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   19ff4:	48 89 c7             	mov    %rax,%rdi
   19ff7:	e8 5d 0c 00 00       	call   1ac59 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   19ffc:	48 89 c3             	mov    %rax,%rbx
   19fff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a003:	48 89 c7             	mov    %rax,%rdi
   1a006:	e8 40 0c 00 00       	call   1ac4b <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1a00b:	48 89 c2             	mov    %rax,%rdx
   1a00e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   1a012:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1a016:	4d 89 e0             	mov    %r12,%r8
   1a019:	48 89 d9             	mov    %rbx,%rcx
   1a01c:	48 89 c7             	mov    %rax,%rdi
   1a01f:	e8 52 0c 00 00       	call   1ac76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   1a024:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1a028:	48 89 c7             	mov    %rax,%rdi
   1a02b:	e8 46 11 00 00       	call   1b176 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>
   1a030:	48 89 c2             	mov    %rax,%rdx
   1a033:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   1a037:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1a03b:	48 89 ce             	mov    %rcx,%rsi
   1a03e:	48 89 c7             	mov    %rax,%rdi
   1a041:	e8 e2 0c 00 00       	call   1ad28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>
   1a046:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1a04a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__res.second)
   1a04e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a052:	48 85 c0             	test   %rax,%rax
   1a055:	74 1c                	je     1a073 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb1>
	  return __z._M_insert(__res);
   1a057:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1a05b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a05f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1a063:	48 89 ce             	mov    %rcx,%rsi
   1a066:	48 89 c7             	mov    %rax,%rdi
   1a069:	e8 26 11 00 00       	call   1b194 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>
   1a06e:	48 89 c3             	mov    %rax,%rbx
   1a071:	eb 17                	jmp    1a08a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc8>
	return iterator(__res.first);
   1a073:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1a077:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1a07b:	48 89 d6             	mov    %rdx,%rsi
   1a07e:	48 89 c7             	mov    %rax,%rdi
   1a081:	e8 64 11 00 00       	call   1b1ea <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1a086:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
      }
   1a08a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1a08e:	48 89 c7             	mov    %rax,%rdi
   1a091:	e8 5c 0c 00 00       	call   1acf2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
   1a096:	48 89 d8             	mov    %rbx,%rax
   1a099:	eb 1a                	jmp    1a0b5 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xf3>
   1a09b:	48 89 c3             	mov    %rax,%rbx
   1a09e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1a0a2:	48 89 c7             	mov    %rax,%rdi
   1a0a5:	e8 48 0c 00 00       	call   1acf2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
   1a0aa:	48 89 d8             	mov    %rbx,%rax
   1a0ad:	48 89 c7             	mov    %rax,%rdi
   1a0b0:	e8 eb b2 fe ff       	call   53a0 <_Unwind_Resume@plt>
   1a0b5:	48 83 c4 60          	add    $0x60,%rsp
   1a0b9:	5b                   	pop    %rbx
   1a0ba:	41 5c                	pop    %r12
   1a0bc:	5d                   	pop    %rbp
   1a0bd:	c3                   	ret

000000000001a0be <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1a0be:	55                   	push   %rbp
   1a0bf:	48 89 e5             	mov    %rsp,%rbp
   1a0c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a0c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1a0ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a0ce:	48 8b 10             	mov    (%rax),%rdx
   1a0d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a0d5:	48 89 10             	mov    %rdx,(%rax)
   1a0d8:	90                   	nop
   1a0d9:	5d                   	pop    %rbp
   1a0da:	c3                   	ret
   1a0db:	90                   	nop

000000000001a0dc <_ZNSt17_Optional_payloadIjLb1ELb1ELb1EECI1St22_Optional_payload_baseIjEIJjEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
   1a0dc:	55                   	push   %rbp
   1a0dd:	48 89 e5             	mov    %rsp,%rbp
   1a0e0:	48 83 ec 20          	sub    $0x20,%rsp
   1a0e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a0e8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1a0ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a0f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a0f4:	48 89 d6             	mov    %rdx,%rsi
   1a0f7:	48 89 c7             	mov    %rax,%rdi
   1a0fa:	e8 05 11 00 00       	call   1b204 <_ZNSt22_Optional_payload_baseIjEC1IJjEEESt10in_place_tDpOT_>
   1a0ff:	90                   	nop
   1a100:	c9                   	leave
   1a101:	c3                   	ret

000000000001a102 <_ZNSt14_Optional_baseIjLb1ELb1EEC1IJjELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
   1a102:	55                   	push   %rbp
   1a103:	48 89 e5             	mov    %rsp,%rbp
   1a106:	53                   	push   %rbx
   1a107:	48 83 ec 18          	sub    $0x18,%rsp
   1a10b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a10f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_payload(in_place, std::forward<_Args>(__args)...)
   1a113:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1a117:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a11b:	48 89 c7             	mov    %rax,%rdi
   1a11e:	e8 53 fb ff ff       	call   19c76 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   1a123:	48 89 c6             	mov    %rax,%rsi
   1a126:	48 89 df             	mov    %rbx,%rdi
   1a129:	e8 ae ff ff ff       	call   1a0dc <_ZNSt17_Optional_payloadIjLb1ELb1ELb1EECI1St22_Optional_payload_baseIjEIJjEEESt10in_place_tDpOT_>
	{ }
   1a12e:	90                   	nop
   1a12f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a133:	c9                   	leave
   1a134:	c3                   	ret
   1a135:	90                   	nop

000000000001a136 <_ZNSt22_Optional_payload_baseIjE6_M_getEv>:
      _M_get() noexcept
   1a136:	55                   	push   %rbp
   1a137:	48 89 e5             	mov    %rsp,%rbp
   1a13a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_payload._M_value; }
   1a13e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a142:	5d                   	pop    %rbp
   1a143:	c3                   	ret

000000000001a144 <_ZSt10__exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>:

  // C++11 version of std::exchange for internal use.
  template <typename _Tp, typename _Up = _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
   1a144:	55                   	push   %rbp
   1a145:	48 89 e5             	mov    %rsp,%rbp
   1a148:	48 83 ec 20          	sub    $0x20,%rsp
   1a14c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a150:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    {
      _Tp __old_val = std::move(__obj);
   1a154:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a158:	48 89 c7             	mov    %rax,%rdi
   1a15b:	e8 39 e6 ff ff       	call   18799 <_ZSt4moveIRN2vk14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS4_>
   1a160:	48 8b 00             	mov    (%rax),%rax
   1a163:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   1a167:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a16b:	48 89 c7             	mov    %rax,%rdi
   1a16e:	e8 aa e5 ff ff       	call   1871d <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   1a173:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a177:	48 8b 00             	mov    (%rax),%rax
   1a17a:	48 89 02             	mov    %rax,(%rdx)
      return __old_val;
   1a17d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   1a181:	c9                   	leave
   1a182:	c3                   	ret

000000000001a183 <_ZSt10__exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>:
    __exchange(_Tp& __obj, _Up&& __new_val)
   1a183:	55                   	push   %rbp
   1a184:	48 89 e5             	mov    %rsp,%rbp
   1a187:	48 83 ec 20          	sub    $0x20,%rsp
   1a18b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a18f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      _Tp __old_val = std::move(__obj);
   1a193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a197:	48 89 c7             	mov    %rax,%rdi
   1a19a:	e8 08 e6 ff ff       	call   187a7 <_ZSt4moveIRPKN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS7_>
   1a19f:	48 8b 00             	mov    (%rax),%rax
   1a1a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   1a1a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a1aa:	48 89 c7             	mov    %rax,%rdi
   1a1ad:	e8 a9 e5 ff ff       	call   1875b <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   1a1b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a1b6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return __old_val;
   1a1bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   1a1c1:	c9                   	leave
   1a1c2:	c3                   	ret
   1a1c3:	90                   	nop

000000000001a1c4 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1a1c4:	55                   	push   %rbp
   1a1c5:	48 89 e5             	mov    %rsp,%rbp
   1a1c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a1cc:	90                   	nop
   1a1cd:	5d                   	pop    %rbp
   1a1ce:	c3                   	ret

000000000001a1cf <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1a1cf:	55                   	push   %rbp
   1a1d0:	48 89 e5             	mov    %rsp,%rbp
   1a1d3:	48 83 ec 40          	sub    $0x40,%rsp
   1a1d7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a1db:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a1df:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1a1e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a1e7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a1eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a1ef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a1f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a1f7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1a1fb:	e8 9e bf fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a200:	84 c0                	test   %al,%al
   1a202:	74 0e                	je     1a212 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m+0x43>
	    ::operator delete(__p);
   1a204:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a208:	48 89 c7             	mov    %rax,%rdi
   1a20b:	e8 e0 af fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1a210:	eb 18                	jmp    1a22a <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1a212:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a216:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a21a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a21e:	48 89 ce             	mov    %rcx,%rsi
   1a221:	48 89 c7             	mov    %rax,%rdi
   1a224:	e8 d7 1e 00 00       	call   1c100 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE10deallocateEPS2_m>
      { __a.deallocate(__p, __n); }
   1a229:	90                   	nop
   1a22a:	90                   	nop
   1a22b:	c9                   	leave
   1a22c:	c3                   	ret

000000000001a22d <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1a22d:	55                   	push   %rbp
   1a22e:	48 89 e5             	mov    %rsp,%rbp
   1a231:	48 83 ec 10          	sub    $0x10,%rsp
   1a235:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a239:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1a23d:	e8 5c bf fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a242:	84 c0                	test   %al,%al
   1a244:	74 15                	je     1a25b <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1a246:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a24a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a24e:	48 89 d6             	mov    %rdx,%rsi
   1a251:	48 89 c7             	mov    %rax,%rdi
   1a254:	e8 e6 0f 00 00       	call   1b23f <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_>
   1a259:	eb 13                	jmp    1a26e <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_+0x41>
	__destroy(__first, __last);
   1a25b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a25f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a263:	48 89 d6             	mov    %rdx,%rsi
   1a266:	48 89 c7             	mov    %rax,%rdi
   1a269:	e8 d1 0f 00 00       	call   1b23f <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_>
    }
   1a26e:	c9                   	leave
   1a26f:	c3                   	ret

000000000001a270 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1a270:	55                   	push   %rbp
   1a271:	48 89 e5             	mov    %rsp,%rbp
   1a274:	48 83 ec 40          	sub    $0x40,%rsp
   1a278:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a27c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a280:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1a284:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a288:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a28c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a290:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a294:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a298:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1a29c:	e8 fd be fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a2a1:	84 c0                	test   %al,%al
   1a2a3:	74 0e                	je     1a2b3 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1a2a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a2a9:	48 89 c7             	mov    %rax,%rdi
   1a2ac:	e8 3f af fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1a2b1:	eb 18                	jmp    1a2cb <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1a2b3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a2b7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a2bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a2bf:	48 89 ce             	mov    %rcx,%rsi
   1a2c2:	48 89 c7             	mov    %rax,%rdi
   1a2c5:	e8 90 1e 00 00       	call   1c15a <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1a2ca:	90                   	nop
   1a2cb:	90                   	nop
   1a2cc:	c9                   	leave
   1a2cd:	c3                   	ret

000000000001a2ce <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1a2ce:	55                   	push   %rbp
   1a2cf:	48 89 e5             	mov    %rsp,%rbp
   1a2d2:	48 83 ec 10          	sub    $0x10,%rsp
   1a2d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a2da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1a2de:	e8 bb be fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a2e3:	84 c0                	test   %al,%al
   1a2e5:	74 15                	je     1a2fc <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1a2e7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a2eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a2ef:	48 89 d6             	mov    %rdx,%rsi
   1a2f2:	48 89 c7             	mov    %rax,%rdi
   1a2f5:	e8 7e 0f 00 00       	call   1b278 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>
   1a2fa:	eb 13                	jmp    1a30f <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_+0x41>
	__destroy(__first, __last);
   1a2fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a300:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a304:	48 89 d6             	mov    %rdx,%rsi
   1a307:	48 89 c7             	mov    %rax,%rdi
   1a30a:	e8 a2 0f 00 00       	call   1b2b1 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>
    }
   1a30f:	c9                   	leave
   1a310:	c3                   	ret
   1a311:	90                   	nop

000000000001a312 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1a312:	55                   	push   %rbp
   1a313:	48 89 e5             	mov    %rsp,%rbp
   1a316:	48 83 ec 10          	sub    $0x10,%rsp
   1a31a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1a31e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a322:	48 89 c7             	mov    %rax,%rdi
   1a325:	e8 ec 0f 00 00       	call   1b316 <_ZNKSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1a32a:	48 89 c7             	mov    %rax,%rdi
   1a32d:	e8 a2 0f 00 00       	call   1b2d4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>
   1a332:	c9                   	leave
   1a333:	c3                   	ret

000000000001a334 <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>:
  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1a334:	55                   	push   %rbp
   1a335:	48 89 e5             	mov    %rsp,%rbp
   1a338:	48 83 ec 20          	sub    $0x20,%rsp
   1a33c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a340:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a344:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
   1a348:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a34c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a350:	48 89 d6             	mov    %rdx,%rsi
   1a353:	48 89 c7             	mov    %rax,%rdi
   1a356:	e8 c9 0f 00 00       	call   1b324 <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>
   1a35b:	c9                   	leave
   1a35c:	c3                   	ret
   1a35d:	90                   	nop

000000000001a35e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1a35e:	55                   	push   %rbp
   1a35f:	48 89 e5             	mov    %rsp,%rbp
   1a362:	48 83 ec 10          	sub    $0x10,%rsp
   1a366:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a36a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a36e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a373:	74 15                	je     1a38a <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x2c>
   1a375:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a379:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a37d:	48 89 d6             	mov    %rdx,%rsi
   1a380:	48 89 c7             	mov    %rax,%rdi
   1a383:	e8 c5 0f 00 00       	call   1b34d <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>
   1a388:	eb 05                	jmp    1a38f <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x31>
   1a38a:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1a38f:	c9                   	leave
   1a390:	c3                   	ret

000000000001a391 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1a391:	55                   	push   %rbp
   1a392:	48 89 e5             	mov    %rsp,%rbp
   1a395:	48 83 ec 20          	sub    $0x20,%rsp
   1a399:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a39d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a3a1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a3a5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1a3a9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1a3ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a3b1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a3b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a3b9:	48 89 c7             	mov    %rax,%rdi
   1a3bc:	e8 13 10 00 00       	call   1b3d4 <_ZSt12__relocate_aIPP18VkPhysicalDevice_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1a3c1:	c9                   	leave
   1a3c2:	c3                   	ret

000000000001a3c3 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1a3c3:	55                   	push   %rbp
   1a3c4:	48 89 e5             	mov    %rsp,%rbp
   1a3c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1a3cb:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1a3d2:	ff ff 0f 
      }
   1a3d5:	5d                   	pop    %rbp
   1a3d6:	c3                   	ret

000000000001a3d7 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1a3d7:	55                   	push   %rbp
   1a3d8:	48 89 e5             	mov    %rsp,%rbp
   1a3db:	48 83 ec 20          	sub    $0x20,%rsp
   1a3df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1a3e3:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
   1a3ea:	ff ff 07 
   1a3ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1a3f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a3f5:	48 89 c7             	mov    %rax,%rdi
   1a3f8:	e8 c6 ff ff ff       	call   1a3c3 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8max_sizeERKS3_>
   1a3fd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1a401:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1a405:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1a409:	48 89 d6             	mov    %rdx,%rsi
   1a40c:	48 89 c7             	mov    %rax,%rdi
   1a40f:	e8 4e cd ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   1a414:	48 8b 00             	mov    (%rax),%rax
      }
   1a417:	c9                   	leave
   1a418:	c3                   	ret
   1a419:	90                   	nop

000000000001a41a <_ZNKSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1a41a:	55                   	push   %rbp
   1a41b:	48 89 e5             	mov    %rsp,%rbp
   1a41e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1a422:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a426:	5d                   	pop    %rbp
   1a427:	c3                   	ret

000000000001a428 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m>:
      allocate(allocator_type& __a, size_type __n)
   1a428:	55                   	push   %rbp
   1a429:	48 89 e5             	mov    %rsp,%rbp
   1a42c:	48 83 ec 20          	sub    $0x20,%rsp
   1a430:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a434:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a438:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a43c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a440:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a444:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1a448:	e8 51 bd fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a44d:	84 c0                	test   %al,%al
   1a44f:	74 42                	je     1a493 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x6b>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1a451:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a455:	b9 00 00 00 00       	mov    $0x0,%ecx
   1a45a:	48 89 c2             	mov    %rax,%rdx
   1a45d:	48 c1 e2 04          	shl    $0x4,%rdx
   1a461:	48 c1 e8 3c          	shr    $0x3c,%rax
   1a465:	48 85 c0             	test   %rax,%rax
   1a468:	74 05                	je     1a46f <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x47>
   1a46a:	b9 01 00 00 00       	mov    $0x1,%ecx
   1a46f:	48 89 d0             	mov    %rdx,%rax
   1a472:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a476:	48 89 c8             	mov    %rcx,%rax
   1a479:	83 e0 01             	and    $0x1,%eax
   1a47c:	84 c0                	test   %al,%al
   1a47e:	74 05                	je     1a485 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x5d>
	      std::__throw_bad_array_new_length();
   1a480:	e8 fb ac fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1a485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a489:	48 89 c7             	mov    %rax,%rdi
   1a48c:	e8 8f ad fe ff       	call   5220 <_Znwm@plt>
   1a491:	eb 19                	jmp    1a4ac <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x84>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1a493:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a497:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a49b:	ba 00 00 00 00       	mov    $0x0,%edx
   1a4a0:	48 89 ce             	mov    %rcx,%rsi
   1a4a3:	48 89 c7             	mov    %rax,%rdi
   1a4a6:	e8 3b 1e 00 00       	call   1c2e6 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv>
   1a4ab:	90                   	nop
      { return __a.allocate(__n); }
   1a4ac:	c9                   	leave
   1a4ad:	c3                   	ret

000000000001a4ae <_ZSt12__relocate_aIPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1a4ae:	55                   	push   %rbp
   1a4af:	48 89 e5             	mov    %rsp,%rbp
   1a4b2:	41 54                	push   %r12
   1a4b4:	53                   	push   %rbx
   1a4b5:	48 83 ec 20          	sub    $0x20,%rsp
   1a4b9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a4bd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a4c1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1a4c5:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
   1a4c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a4cd:	48 89 c7             	mov    %rax,%rdi
   1a4d0:	e8 62 0f 00 00       	call   1b437 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>
   1a4d5:	49 89 c4             	mov    %rax,%r12
   1a4d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a4dc:	48 89 c7             	mov    %rax,%rdi
   1a4df:	e8 53 0f 00 00       	call   1b437 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>
   1a4e4:	48 89 c3             	mov    %rax,%rbx
   1a4e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a4eb:	48 89 c7             	mov    %rax,%rdi
   1a4ee:	e8 44 0f 00 00       	call   1b437 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>
   1a4f3:	48 89 c7             	mov    %rax,%rdi
   1a4f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a4fa:	48 89 c1             	mov    %rax,%rcx
   1a4fd:	4c 89 e2             	mov    %r12,%rdx
   1a500:	48 89 de             	mov    %rbx,%rsi
   1a503:	e8 3d 0f 00 00       	call   1b445 <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
   1a508:	48 83 c4 20          	add    $0x20,%rsp
   1a50c:	5b                   	pop    %rbx
   1a50d:	41 5c                	pop    %r12
   1a50f:	5d                   	pop    %rbp
   1a510:	c3                   	ret

000000000001a511 <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1a511:	55                   	push   %rbp
   1a512:	48 89 e5             	mov    %rsp,%rbp
   1a515:	41 54                	push   %r12
   1a517:	53                   	push   %rbx
   1a518:	48 83 ec 20          	sub    $0x20,%rsp
   1a51c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a520:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a524:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1a528:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a52c:	48 89 c6             	mov    %rax,%rsi
   1a52f:	bf 10 00 00 00       	mov    $0x10,%edi
   1a534:	e8 7b bc fe ff       	call   61b4 <_ZnwmPv>
   1a539:	48 89 c3             	mov    %rax,%rbx
   1a53c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a540:	48 89 c7             	mov    %rax,%rdi
   1a543:	e8 db e7 ff ff       	call   18d23 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   1a548:	4c 8b 20             	mov    (%rax),%r12
   1a54b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a54f:	48 89 c7             	mov    %rax,%rdi
   1a552:	e8 be e7 ff ff       	call   18d15 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   1a557:	4c 89 e2             	mov    %r12,%rdx
   1a55a:	48 89 c6             	mov    %rax,%rsi
   1a55d:	48 89 df             	mov    %rbx,%rdi
   1a560:	e8 a1 bf ff ff       	call   16506 <_ZN2vk4raii14PhysicalDeviceC1ERKNS0_8InstanceEP18VkPhysicalDevice_T>
   1a565:	48 89 d8             	mov    %rbx,%rax
   1a568:	48 83 c4 20          	add    $0x20,%rsp
   1a56c:	5b                   	pop    %rbx
   1a56d:	41 5c                	pop    %r12
   1a56f:	5d                   	pop    %rbp
   1a570:	c3                   	ret

000000000001a571 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1a571:	55                   	push   %rbp
   1a572:	48 89 e5             	mov    %rsp,%rbp
   1a575:	48 83 ec 10          	sub    $0x10,%rsp
   1a579:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a57d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1a581:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a585:	48 89 c7             	mov    %rax,%rdi
   1a588:	e8 29 0f 00 00       	call   1b4b6 <_ZSt10destroy_atIN2vk4raii14PhysicalDeviceEEvPT_>
	}
   1a58d:	90                   	nop
   1a58e:	c9                   	leave
   1a58f:	c3                   	ret

000000000001a590 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEmiEl>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
   1a590:	55                   	push   %rbp
   1a591:	48 89 e5             	mov    %rsp,%rbp
   1a594:	48 83 ec 20          	sub    $0x20,%rsp
   1a598:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a59c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
   1a5a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a5a4:	48 8b 00             	mov    (%rax),%rax
   1a5a7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1a5ab:	48 c1 e2 04          	shl    $0x4,%rdx
   1a5af:	48 f7 da             	neg    %rdx
   1a5b2:	48 01 d0             	add    %rdx,%rax
   1a5b5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a5b9:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   1a5bd:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1a5c1:	48 89 d6             	mov    %rdx,%rsi
   1a5c4:	48 89 c7             	mov    %rax,%rdi
   1a5c7:	e8 a2 f7 ff ff       	call   19d6e <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   1a5cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a5d0:	c9                   	leave
   1a5d1:	c3                   	ret

000000000001a5d2 <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
   1a5d2:	55                   	push   %rbp
   1a5d3:	48 89 e5             	mov    %rsp,%rbp
   1a5d6:	48 83 ec 10          	sub    $0x10,%rsp
   1a5da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
   1a5de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a5e2:	48 89 c7             	mov    %rax,%rdi
   1a5e5:	e8 e8 0e 00 00       	call   1b4d2 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEEC1Ev>
   1a5ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a5ee:	48 89 c7             	mov    %rax,%rdi
   1a5f1:	e8 f8 0e 00 00       	call   1b4ee <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EEC1Ev>
   1a5f6:	90                   	nop
   1a5f7:	c9                   	leave
   1a5f8:	c3                   	ret

000000000001a5f9 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1a5f9:	55                   	push   %rbp
   1a5fa:	48 89 e5             	mov    %rsp,%rbp
   1a5fd:	48 83 ec 40          	sub    $0x40,%rsp
   1a601:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a605:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a609:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1a60d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a611:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a615:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a619:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a61d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a621:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1a625:	e8 74 bb fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a62a:	84 c0                	test   %al,%al
   1a62c:	74 0e                	je     1a63c <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1a62e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a632:	48 89 c7             	mov    %rax,%rdi
   1a635:	e8 b6 ab fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1a63a:	eb 18                	jmp    1a654 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1a63c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a640:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a644:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a648:	48 89 ce             	mov    %rcx,%rsi
   1a64b:	48 89 c7             	mov    %rax,%rdi
   1a64e:	e8 57 1d 00 00       	call   1c3aa <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1a653:	90                   	nop
   1a654:	90                   	nop
   1a655:	c9                   	leave
   1a656:	c3                   	ret

000000000001a657 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1a657:	55                   	push   %rbp
   1a658:	48 89 e5             	mov    %rsp,%rbp
   1a65b:	48 83 ec 10          	sub    $0x10,%rsp
   1a65f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a663:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1a667:	e8 32 bb fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a66c:	84 c0                	test   %al,%al
   1a66e:	74 15                	je     1a685 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1a670:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a674:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a678:	48 89 d6             	mov    %rdx,%rsi
   1a67b:	48 89 c7             	mov    %rax,%rdi
   1a67e:	e8 81 0e 00 00       	call   1b504 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>
   1a683:	eb 13                	jmp    1a698 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_+0x41>
	__destroy(__first, __last);
   1a685:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a689:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a68d:	48 89 d6             	mov    %rdx,%rsi
   1a690:	48 89 c7             	mov    %rax,%rdi
   1a693:	e8 a5 0e 00 00       	call   1b53d <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>
    }
   1a698:	c9                   	leave
   1a699:	c3                   	ret

000000000001a69a <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1a69a:	55                   	push   %rbp
   1a69b:	48 89 e5             	mov    %rsp,%rbp
   1a69e:	48 83 ec 10          	sub    $0x10,%rsp
   1a6a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1a6a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a6aa:	48 89 c7             	mov    %rax,%rdi
   1a6ad:	e8 f0 0e 00 00       	call   1b5a2 <_ZNKSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a6b2:	48 89 c7             	mov    %rax,%rdi
   1a6b5:	e8 a6 0e 00 00       	call   1b560 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_max_sizeERKS2_>
   1a6ba:	c9                   	leave
   1a6bb:	c3                   	ret

000000000001a6bc <_ZSt27__uninitialized_default_n_aIPN2vk21QueueFamilyPropertiesEmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1a6bc:	55                   	push   %rbp
   1a6bd:	48 89 e5             	mov    %rsp,%rbp
   1a6c0:	48 83 ec 20          	sub    $0x20,%rsp
   1a6c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a6c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a6cc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1a6d0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a6d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a6d8:	48 89 d6             	mov    %rdx,%rsi
   1a6db:	48 89 c7             	mov    %rax,%rdi
   1a6de:	e8 cd 0e 00 00       	call   1b5b0 <_ZSt25__uninitialized_default_nIPN2vk21QueueFamilyPropertiesEmET_S3_T0_>
   1a6e3:	c9                   	leave
   1a6e4:	c3                   	ret
   1a6e5:	90                   	nop

000000000001a6e6 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1a6e6:	55                   	push   %rbp
   1a6e7:	48 89 e5             	mov    %rsp,%rbp
   1a6ea:	48 83 ec 10          	sub    $0x10,%rsp
   1a6ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a6f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a6f6:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a6fb:	74 15                	je     1a712 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm+0x2c>
   1a6fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a701:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a705:	48 89 d6             	mov    %rdx,%rsi
   1a708:	48 89 c7             	mov    %rax,%rdi
   1a70b:	e8 c9 0e 00 00       	call   1b5d9 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m>
   1a710:	eb 05                	jmp    1a717 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm+0x31>
   1a712:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1a717:	c9                   	leave
   1a718:	c3                   	ret

000000000001a719 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1a719:	55                   	push   %rbp
   1a71a:	48 89 e5             	mov    %rsp,%rbp
   1a71d:	48 83 ec 20          	sub    $0x20,%rsp
   1a721:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a725:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a729:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a72d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1a731:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1a735:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a739:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a73d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a741:	48 89 c7             	mov    %rax,%rdi
   1a744:	e8 0d 0f 00 00       	call   1b656 <_ZSt12__relocate_aIPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1a749:	c9                   	leave
   1a74a:	c3                   	ret

000000000001a74b <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1a74b:	55                   	push   %rbp
   1a74c:	48 89 e5             	mov    %rsp,%rbp
   1a74f:	48 83 ec 40          	sub    $0x40,%rsp
   1a753:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a757:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a75b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1a75f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a763:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a767:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a76b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a76f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a773:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1a777:	e8 22 ba fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a77c:	84 c0                	test   %al,%al
   1a77e:	74 0e                	je     1a78e <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1a780:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a784:	48 89 c7             	mov    %rax,%rdi
   1a787:	e8 64 aa fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1a78c:	eb 18                	jmp    1a7a6 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1a78e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a792:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a796:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a79a:	48 89 ce             	mov    %rcx,%rsi
   1a79d:	48 89 c7             	mov    %rax,%rdi
   1a7a0:	e8 2b 1d 00 00       	call   1c4d0 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1a7a5:	90                   	nop
   1a7a6:	90                   	nop
   1a7a7:	c9                   	leave
   1a7a8:	c3                   	ret

000000000001a7a9 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1a7a9:	55                   	push   %rbp
   1a7aa:	48 89 e5             	mov    %rsp,%rbp
   1a7ad:	48 83 ec 10          	sub    $0x10,%rsp
   1a7b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a7b5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1a7b9:	e8 e0 b9 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a7be:	84 c0                	test   %al,%al
   1a7c0:	74 15                	je     1a7d7 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1a7c2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a7c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a7ca:	48 89 d6             	mov    %rdx,%rsi
   1a7cd:	48 89 c7             	mov    %rax,%rdi
   1a7d0:	e8 e4 0e 00 00       	call   1b6b9 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>
   1a7d5:	eb 13                	jmp    1a7ea <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_+0x41>
	__destroy(__first, __last);
   1a7d7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a7db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a7df:	48 89 d6             	mov    %rdx,%rsi
   1a7e2:	48 89 c7             	mov    %rax,%rdi
   1a7e5:	e8 0b 0f 00 00       	call   1b6f5 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>
    }
   1a7ea:	c9                   	leave
   1a7eb:	c3                   	ret

000000000001a7ec <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1a7ec:	55                   	push   %rbp
   1a7ed:	48 89 e5             	mov    %rsp,%rbp
   1a7f0:	48 83 ec 10          	sub    $0x10,%rsp
   1a7f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1a7f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a7fc:	48 89 c7             	mov    %rax,%rdi
   1a7ff:	e8 56 0f 00 00       	call   1b75a <_ZNKSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a804:	48 89 c7             	mov    %rax,%rdi
   1a807:	e8 0c 0f 00 00       	call   1b718 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_max_sizeERKS2_>
   1a80c:	c9                   	leave
   1a80d:	c3                   	ret

000000000001a80e <_ZSt27__uninitialized_default_n_aIPN2vk19ExtensionPropertiesEmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1a80e:	55                   	push   %rbp
   1a80f:	48 89 e5             	mov    %rsp,%rbp
   1a812:	48 83 ec 20          	sub    $0x20,%rsp
   1a816:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a81a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a81e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1a822:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a826:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a82a:	48 89 d6             	mov    %rdx,%rsi
   1a82d:	48 89 c7             	mov    %rax,%rdi
   1a830:	e8 33 0f 00 00       	call   1b768 <_ZSt25__uninitialized_default_nIPN2vk19ExtensionPropertiesEmET_S3_T0_>
   1a835:	c9                   	leave
   1a836:	c3                   	ret
   1a837:	90                   	nop

000000000001a838 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1a838:	55                   	push   %rbp
   1a839:	48 89 e5             	mov    %rsp,%rbp
   1a83c:	48 83 ec 10          	sub    $0x10,%rsp
   1a840:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a844:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a848:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a84d:	74 15                	je     1a864 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm+0x2c>
   1a84f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a853:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a857:	48 89 d6             	mov    %rdx,%rsi
   1a85a:	48 89 c7             	mov    %rax,%rdi
   1a85d:	e8 2f 0f 00 00       	call   1b791 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m>
   1a862:	eb 05                	jmp    1a869 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm+0x31>
   1a864:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1a869:	c9                   	leave
   1a86a:	c3                   	ret

000000000001a86b <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1a86b:	55                   	push   %rbp
   1a86c:	48 89 e5             	mov    %rsp,%rbp
   1a86f:	48 83 ec 20          	sub    $0x20,%rsp
   1a873:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a877:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a87b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a87f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1a883:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1a887:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a88b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a88f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a893:	48 89 c7             	mov    %rax,%rdi
   1a896:	e8 73 0f 00 00       	call   1b80e <_ZSt12__relocate_aIPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1a89b:	c9                   	leave
   1a89c:	c3                   	ret

000000000001a89d <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1a89d:	55                   	push   %rbp
   1a89e:	48 89 e5             	mov    %rsp,%rbp
   1a8a1:	48 83 ec 40          	sub    $0x40,%rsp
   1a8a5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a8a9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a8ad:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1a8b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a8b5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a8b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a8bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a8c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a8c5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1a8c9:	e8 d0 b8 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a8ce:	84 c0                	test   %al,%al
   1a8d0:	74 0e                	je     1a8e0 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1a8d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a8d6:	48 89 c7             	mov    %rax,%rdi
   1a8d9:	e8 12 a9 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1a8de:	eb 18                	jmp    1a8f8 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1a8e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a8e4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a8e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a8ec:	48 89 ce             	mov    %rcx,%rsi
   1a8ef:	48 89 c7             	mov    %rax,%rdi
   1a8f2:	e8 09 1d 00 00       	call   1c600 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1a8f7:	90                   	nop
   1a8f8:	90                   	nop
   1a8f9:	c9                   	leave
   1a8fa:	c3                   	ret

000000000001a8fb <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1a8fb:	55                   	push   %rbp
   1a8fc:	48 89 e5             	mov    %rsp,%rbp
   1a8ff:	48 83 ec 10          	sub    $0x10,%rsp
   1a903:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a907:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1a90b:	e8 8e b8 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a910:	84 c0                	test   %al,%al
   1a912:	74 15                	je     1a929 <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1a914:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a918:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a91c:	48 89 d6             	mov    %rdx,%rsi
   1a91f:	48 89 c7             	mov    %rax,%rdi
   1a922:	e8 4a 0f 00 00       	call   1b871 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>
   1a927:	eb 13                	jmp    1a93c <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_+0x41>
	__destroy(__first, __last);
   1a929:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a92d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a931:	48 89 d6             	mov    %rdx,%rsi
   1a934:	48 89 c7             	mov    %rax,%rdi
   1a937:	e8 71 0f 00 00       	call   1b8ad <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>
    }
   1a93c:	c9                   	leave
   1a93d:	c3                   	ret

000000000001a93e <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1a93e:	55                   	push   %rbp
   1a93f:	48 89 e5             	mov    %rsp,%rbp
   1a942:	48 83 ec 10          	sub    $0x10,%rsp
   1a946:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1a94a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a94e:	48 89 c7             	mov    %rax,%rdi
   1a951:	e8 bc 0f 00 00       	call   1b912 <_ZNKSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a956:	48 89 c7             	mov    %rax,%rdi
   1a959:	e8 72 0f 00 00       	call   1b8d0 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_max_sizeERKS2_>
   1a95e:	c9                   	leave
   1a95f:	c3                   	ret

000000000001a960 <_ZSt27__uninitialized_default_n_aIPN2vk15LayerPropertiesEmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1a960:	55                   	push   %rbp
   1a961:	48 89 e5             	mov    %rsp,%rbp
   1a964:	48 83 ec 20          	sub    $0x20,%rsp
   1a968:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a96c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a970:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1a974:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a978:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a97c:	48 89 d6             	mov    %rdx,%rsi
   1a97f:	48 89 c7             	mov    %rax,%rdi
   1a982:	e8 99 0f 00 00       	call   1b920 <_ZSt25__uninitialized_default_nIPN2vk15LayerPropertiesEmET_S3_T0_>
   1a987:	c9                   	leave
   1a988:	c3                   	ret
   1a989:	90                   	nop

000000000001a98a <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1a98a:	55                   	push   %rbp
   1a98b:	48 89 e5             	mov    %rsp,%rbp
   1a98e:	48 83 ec 10          	sub    $0x10,%rsp
   1a992:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a996:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a99a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a99f:	74 15                	je     1a9b6 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm+0x2c>
   1a9a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a9a5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a9a9:	48 89 d6             	mov    %rdx,%rsi
   1a9ac:	48 89 c7             	mov    %rax,%rdi
   1a9af:	e8 95 0f 00 00       	call   1b949 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m>
   1a9b4:	eb 05                	jmp    1a9bb <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm+0x31>
   1a9b6:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1a9bb:	c9                   	leave
   1a9bc:	c3                   	ret

000000000001a9bd <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1a9bd:	55                   	push   %rbp
   1a9be:	48 89 e5             	mov    %rsp,%rbp
   1a9c1:	48 83 ec 20          	sub    $0x20,%rsp
   1a9c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a9c9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a9cd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a9d1:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1a9d5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1a9d9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a9dd:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a9e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a9e5:	48 89 c7             	mov    %rax,%rdi
   1a9e8:	e8 d9 0f 00 00       	call   1b9c6 <_ZSt12__relocate_aIPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1a9ed:	c9                   	leave
   1a9ee:	c3                   	ret

000000000001a9ef <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1a9ef:	55                   	push   %rbp
   1a9f0:	48 89 e5             	mov    %rsp,%rbp
   1a9f3:	48 83 ec 40          	sub    $0x40,%rsp
   1a9f7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a9fb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a9ff:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1aa03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1aa07:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1aa0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1aa0f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1aa13:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1aa17:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1aa1b:	e8 7e b7 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1aa20:	84 c0                	test   %al,%al
   1aa22:	74 0e                	je     1aa32 <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1aa24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1aa28:	48 89 c7             	mov    %rax,%rdi
   1aa2b:	e8 c0 a7 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1aa30:	eb 18                	jmp    1aa4a <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1aa32:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1aa36:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1aa3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aa3e:	48 89 ce             	mov    %rcx,%rsi
   1aa41:	48 89 c7             	mov    %rax,%rdi
   1aa44:	e8 e7 1c 00 00       	call   1c730 <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1aa49:	90                   	nop
   1aa4a:	90                   	nop
   1aa4b:	c9                   	leave
   1aa4c:	c3                   	ret

000000000001aa4d <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
   1aa4d:	55                   	push   %rbp
   1aa4e:	48 89 e5             	mov    %rsp,%rbp
   1aa51:	53                   	push   %rbx
   1aa52:	48 83 ec 28          	sub    $0x28,%rsp
   1aa56:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1aa5a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1aa5e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1aa62:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1aa66:	48 89 c7             	mov    %rax,%rdi
   1aa69:	e8 bb 0f 00 00       	call   1ba29 <_ZSt12__miter_baseIPKPKcET_S4_>
   1aa6e:	48 89 c3             	mov    %rax,%rbx
   1aa71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aa75:	48 89 c7             	mov    %rax,%rdi
   1aa78:	e8 ac 0f 00 00       	call   1ba29 <_ZSt12__miter_baseIPKPKcET_S4_>
   1aa7d:	48 89 c1             	mov    %rax,%rcx
   1aa80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1aa84:	48 89 c2             	mov    %rax,%rdx
   1aa87:	48 89 de             	mov    %rbx,%rsi
   1aa8a:	48 89 cf             	mov    %rcx,%rdi
   1aa8d:	e8 a5 0f 00 00       	call   1ba37 <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>
    }
   1aa92:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1aa96:	c9                   	leave
   1aa97:	c3                   	ret

000000000001aa98 <_ZSt8_DestroyIPKcEvPT_>:
    _Destroy(_Tp* __pointer)
   1aa98:	55                   	push   %rbp
   1aa99:	48 89 e5             	mov    %rsp,%rbp
   1aa9c:	48 83 ec 10          	sub    $0x10,%rsp
   1aaa0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1aaa4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aaa8:	48 89 c7             	mov    %rax,%rdi
   1aaab:	e8 f1 0f 00 00       	call   1baa1 <_ZSt10destroy_atIPKcEvPT_>
    }
   1aab0:	90                   	nop
   1aab1:	c9                   	leave
   1aab2:	c3                   	ret
   1aab3:	90                   	nop

000000000001aab4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
   1aab4:	55                   	push   %rbp
   1aab5:	48 89 e5             	mov    %rsp,%rbp
   1aab8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1aabc:	90                   	nop
   1aabd:	5d                   	pop    %rbp
   1aabe:	c3                   	ret

000000000001aabf <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1aabf:	55                   	push   %rbp
   1aac0:	48 89 e5             	mov    %rsp,%rbp
   1aac3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_right); }
   1aac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aacb:	48 8b 40 18          	mov    0x18(%rax),%rax
   1aacf:	5d                   	pop    %rbp
   1aad0:	c3                   	ret

000000000001aad1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1aad1:	55                   	push   %rbp
   1aad2:	48 89 e5             	mov    %rsp,%rbp
   1aad5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_left); }
   1aad9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aadd:	48 8b 40 10          	mov    0x10(%rax),%rax
   1aae1:	5d                   	pop    %rbp
   1aae2:	c3                   	ret
   1aae3:	90                   	nop

000000000001aae4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1aae4:	55                   	push   %rbp
   1aae5:	48 89 e5             	mov    %rsp,%rbp
   1aae8:	48 83 ec 10          	sub    $0x10,%rsp
   1aaec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1aaf0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	_M_destroy_node(__p);
   1aaf4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1aaf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aafc:	48 89 d6             	mov    %rdx,%rsi
   1aaff:	48 89 c7             	mov    %rax,%rdi
   1ab02:	e8 a5 0f 00 00       	call   1baac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
   1ab07:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ab0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ab0f:	48 89 d6             	mov    %rdx,%rsi
   1ab12:	48 89 c7             	mov    %rax,%rdi
   1ab15:	e8 d0 0f 00 00       	call   1baea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
   1ab1a:	90                   	nop
   1ab1b:	c9                   	leave
   1ab1c:	c3                   	ret
   1ab1d:	90                   	nop

000000000001ab1e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
   1ab1e:	55                   	push   %rbp
   1ab1f:	48 89 e5             	mov    %rsp,%rbp
   1ab22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1ab26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ab2a:	48 8b 40 10          	mov    0x10(%rax),%rax
   1ab2e:	5d                   	pop    %rbp
   1ab2f:	c3                   	ret

000000000001ab30 <_ZNSt14__array_traitsIcLm256EE6_S_ptrERA256_Kc>:
      _S_ptr(const _Type& __t) noexcept
   1ab30:	55                   	push   %rbp
   1ab31:	48 89 e5             	mov    %rsp,%rbp
   1ab34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_cast<_Tp*>(__t); }
   1ab38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ab3c:	5d                   	pop    %rbp
   1ab3d:	c3                   	ret

000000000001ab3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>:
      lower_bound(const key_type& __k)
   1ab3e:	55                   	push   %rbp
   1ab3f:	48 89 e5             	mov    %rsp,%rbp
   1ab42:	53                   	push   %rbx
   1ab43:	48 83 ec 18          	sub    $0x18,%rsp
   1ab47:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ab4b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   1ab4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ab53:	48 89 c7             	mov    %rax,%rdi
   1ab56:	e8 c5 0f 00 00       	call   1bb20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1ab5b:	48 89 c3             	mov    %rax,%rbx
   1ab5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ab62:	48 89 c7             	mov    %rax,%rdi
   1ab65:	e8 b0 f2 ff ff       	call   19e1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   1ab6a:	48 89 c6             	mov    %rax,%rsi
   1ab6d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1ab71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ab75:	48 89 d1             	mov    %rdx,%rcx
   1ab78:	48 89 da             	mov    %rbx,%rdx
   1ab7b:	48 89 c7             	mov    %rax,%rdi
   1ab7e:	e8 af 0f 00 00       	call   1bb32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>
   1ab83:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ab87:	c9                   	leave
   1ab88:	c3                   	ret
   1ab89:	90                   	nop

000000000001ab8a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   1ab8a:	55                   	push   %rbp
   1ab8b:	48 89 e5             	mov    %rsp,%rbp
   1ab8e:	48 83 ec 20          	sub    $0x20,%rsp
   1ab92:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(&this->_M_impl._M_header); }
   1ab96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ab9a:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1ab9e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1aba2:	48 89 d6             	mov    %rdx,%rsi
   1aba5:	48 89 c7             	mov    %rax,%rdi
   1aba8:	e8 3d 06 00 00       	call   1b1ea <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1abad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1abb1:	c9                   	leave
   1abb2:	c3                   	ret
   1abb3:	90                   	nop

000000000001abb4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>:
      key_comp() const
   1abb4:	55                   	push   %rbp
   1abb5:	48 89 e5             	mov    %rsp,%rbp
   1abb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_key_compare; }
   1abbc:	90                   	nop
   1abbd:	5d                   	pop    %rbp
   1abbe:	c3                   	ret
   1abbf:	90                   	nop

000000000001abc0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr()
   1abc0:	55                   	push   %rbp
   1abc1:	48 89 e5             	mov    %rsp,%rbp
   1abc4:	48 83 ec 10          	sub    $0x10,%rsp
   1abc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   1abcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1abd0:	48 83 c0 20          	add    $0x20,%rax
   1abd4:	48 89 c7             	mov    %rax,%rdi
   1abd7:	e8 ec 0f 00 00       	call   1bbc8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   1abdc:	c9                   	leave
   1abdd:	c3                   	ret

000000000001abde <_ZStssIcSt11char_traitsIcESaIcEEDTcl21__char_traits_cmp_catIT0_ELi0EEERKNSt7__cxx1112basic_stringIT_S3_T1_EESB_>:
   *  @return  A value indicating whether `__lhs` is less than, equal to,
   *	       greater than, or incomparable with `__rhs`.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    constexpr auto
    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   1abde:	55                   	push   %rbp
   1abdf:	48 89 e5             	mov    %rsp,%rbp
   1abe2:	48 83 ec 10          	sub    $0x10,%rsp
   1abe6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1abea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		const basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept
    -> decltype(__detail::__char_traits_cmp_cat<_Traits>(0))
    { return __detail::__char_traits_cmp_cat<_Traits>(__lhs.compare(__rhs)); }
   1abee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1abf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1abf6:	48 89 d6             	mov    %rdx,%rsi
   1abf9:	48 89 c7             	mov    %rax,%rdi
   1abfc:	e8 e1 0f 00 00       	call   1bbe2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
   1ac01:	89 c7                	mov    %eax,%edi
   1ac03:	e8 ff f2 ff ff       	call   19f07 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai>
   1ac08:	c9                   	leave
   1ac09:	c3                   	ret

000000000001ac0a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1ac0a:	55                   	push   %rbp
   1ac0b:	48 89 e5             	mov    %rsp,%rbp
   1ac0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1ac12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac16:	5d                   	pop    %rbp
   1ac17:	c3                   	ret

000000000001ac18 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
   1ac18:	55                   	push   %rbp
   1ac19:	48 89 e5             	mov    %rsp,%rbp
   1ac1c:	53                   	push   %rbx
   1ac1d:	48 83 ec 18          	sub    $0x18,%rsp
   1ac21:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ac25:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Inherited(std::forward<_UElements>(__elements)...) { }
   1ac29:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1ac2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ac31:	48 89 c7             	mov    %rax,%rdi
   1ac34:	e8 d1 ff ff ff       	call   1ac0a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1ac39:	48 89 c6             	mov    %rax,%rsi
   1ac3c:	48 89 df             	mov    %rbx,%rdi
   1ac3f:	e8 42 10 00 00       	call   1bc86 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>
   1ac44:	90                   	nop
   1ac45:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ac49:	c9                   	leave
   1ac4a:	c3                   	ret

000000000001ac4b <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1ac4b:	55                   	push   %rbp
   1ac4c:	48 89 e5             	mov    %rsp,%rbp
   1ac4f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1ac53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac57:	5d                   	pop    %rbp
   1ac58:	c3                   	ret

000000000001ac59 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1ac59:	55                   	push   %rbp
   1ac5a:	48 89 e5             	mov    %rsp,%rbp
   1ac5d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1ac61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac65:	5d                   	pop    %rbp
   1ac66:	c3                   	ret

000000000001ac67 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1ac67:	55                   	push   %rbp
   1ac68:	48 89 e5             	mov    %rsp,%rbp
   1ac6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1ac6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac73:	5d                   	pop    %rbp
   1ac74:	c3                   	ret
   1ac75:	90                   	nop

000000000001ac76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
   1ac76:	55                   	push   %rbp
   1ac77:	48 89 e5             	mov    %rsp,%rbp
   1ac7a:	41 54                	push   %r12
   1ac7c:	53                   	push   %rbx
   1ac7d:	48 83 ec 30          	sub    $0x30,%rsp
   1ac81:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ac85:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ac89:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1ac8d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1ac91:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  : _M_t(__t),
   1ac95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ac99:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1ac9d:	48 89 10             	mov    %rdx,(%rax)
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
   1aca0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1aca4:	48 89 c7             	mov    %rax,%rdi
   1aca7:	e8 bb ff ff ff       	call   1ac67 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1acac:	49 89 c4             	mov    %rax,%r12
   1acaf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1acb3:	48 89 c7             	mov    %rax,%rdi
   1acb6:	e8 9e ff ff ff       	call   1ac59 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1acbb:	48 89 c3             	mov    %rax,%rbx
   1acbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1acc2:	48 89 c7             	mov    %rax,%rdi
   1acc5:	e8 81 ff ff ff       	call   1ac4b <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1acca:	48 89 c6             	mov    %rax,%rsi
   1accd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1acd1:	4c 89 e1             	mov    %r12,%rcx
   1acd4:	48 89 da             	mov    %rbx,%rdx
   1acd7:	48 89 c7             	mov    %rax,%rdi
   1acda:	e8 db 0f 00 00       	call   1bcba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
   1acdf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ace3:	48 89 42 08          	mov    %rax,0x8(%rdx)
	  { }
   1ace7:	90                   	nop
   1ace8:	48 83 c4 30          	add    $0x30,%rsp
   1acec:	5b                   	pop    %rbx
   1aced:	41 5c                	pop    %r12
   1acef:	5d                   	pop    %rbp
   1acf0:	c3                   	ret
   1acf1:	90                   	nop

000000000001acf2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
   1acf2:	55                   	push   %rbp
   1acf3:	48 89 e5             	mov    %rsp,%rbp
   1acf6:	48 83 ec 10          	sub    $0x10,%rsp
   1acfa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (_M_node)
   1acfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ad02:	48 8b 40 08          	mov    0x8(%rax),%rax
   1ad06:	48 85 c0             	test   %rax,%rax
   1ad09:	74 1a                	je     1ad25 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev+0x33>
	    _M_t._M_drop_node(_M_node);
   1ad0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ad0f:	48 8b 00             	mov    (%rax),%rax
   1ad12:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ad16:	48 8b 52 08          	mov    0x8(%rdx),%rdx
   1ad1a:	48 89 d6             	mov    %rdx,%rsi
   1ad1d:	48 89 c7             	mov    %rax,%rdi
   1ad20:	e8 bf fd ff ff       	call   1aae4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	}
   1ad25:	90                   	nop
   1ad26:	c9                   	leave
   1ad27:	c3                   	ret

000000000001ad28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1ad28:	55                   	push   %rbp
   1ad29:	48 89 e5             	mov    %rsp,%rbp
   1ad2c:	53                   	push   %rbx
   1ad2d:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
   1ad34:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
   1ad3b:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
   1ad42:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
      iterator __pos = __position._M_const_cast();
   1ad49:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1ad50:	48 89 c7             	mov    %rax,%rdi
   1ad53:	e8 de 0f 00 00       	call   1bd36 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>
   1ad58:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
      if (__pos._M_node == _M_end())
   1ad5f:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1ad66:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1ad6d:	48 89 c7             	mov    %rax,%rdi
   1ad70:	e8 ab 0d 00 00       	call   1bb20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1ad75:	48 39 c3             	cmp    %rax,%rbx
   1ad78:	0f 94 c0             	sete   %al
   1ad7b:	84 c0                	test   %al,%al
   1ad7d:	0f 84 c8 00 00 00    	je     1ae4b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x123>
	  if (size() > 0
   1ad83:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1ad8a:	48 89 c7             	mov    %rax,%rdi
   1ad8d:	e8 cc 0f 00 00       	call   1bd5e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1ad92:	48 85 c0             	test   %rax,%rax
   1ad95:	74 44                	je     1addb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   1ad97:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1ad9e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1ada5:	48 89 c7             	mov    %rax,%rdi
   1ada8:	e8 c3 0f 00 00       	call   1bd70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1adad:	48 8b 00             	mov    (%rax),%rax
   1adb0:	48 89 c7             	mov    %rax,%rdi
   1adb3:	e8 ca 0f 00 00       	call   1bd82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1adb8:	48 89 c1             	mov    %rax,%rcx
   1adbb:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1adc2:	48 89 c2             	mov    %rax,%rdx
   1adc5:	48 89 ce             	mov    %rcx,%rsi
   1adc8:	48 89 df             	mov    %rbx,%rdi
   1adcb:	e8 5e f1 ff ff       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1add0:	84 c0                	test   %al,%al
   1add2:	74 07                	je     1addb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   1add4:	b8 01 00 00 00       	mov    $0x1,%eax
   1add9:	eb 05                	jmp    1ade0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb8>
   1addb:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (size() > 0
   1ade0:	84 c0                	test   %al,%al
   1ade2:	74 49                	je     1ae2d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x105>
	    return _Res(0, _M_rightmost());
   1ade4:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1adeb:	48 89 c7             	mov    %rax,%rdi
   1adee:	e8 7d 0f 00 00       	call   1bd70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1adf3:	48 89 c2             	mov    %rax,%rdx
   1adf6:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
   1adfd:	00 00 00 00 
   1ae01:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
   1ae08:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1ae0f:	48 89 ce             	mov    %rcx,%rsi
   1ae12:	48 89 c7             	mov    %rax,%rdi
   1ae15:	e8 82 0f 00 00       	call   1bd9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1ae1a:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   1ae21:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
   1ae28:	e9 43 03 00 00       	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1ae2d:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1ae34:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1ae3b:	48 89 d6             	mov    %rdx,%rsi
   1ae3e:	48 89 c7             	mov    %rax,%rdi
   1ae41:	e8 86 0f 00 00       	call   1bdcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1ae46:	e9 25 03 00 00       	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1ae4b:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1ae52:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1ae59:	48 89 c7             	mov    %rax,%rdi
   1ae5c:	e8 21 0f 00 00       	call   1bd82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1ae61:	48 89 c2             	mov    %rax,%rdx
   1ae64:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1ae6b:	48 89 c6             	mov    %rax,%rsi
   1ae6e:	48 89 df             	mov    %rbx,%rdi
   1ae71:	e8 b8 f0 ff ff       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1ae76:	84 c0                	test   %al,%al
   1ae78:	0f 84 66 01 00 00    	je     1afe4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x2bc>
	  iterator __before = __pos;
   1ae7e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1ae85:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
	  if (__pos._M_node == _M_leftmost()) // begin()
   1ae8c:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1ae93:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1ae9a:	48 89 c7             	mov    %rax,%rdi
   1ae9d:	e8 a0 10 00 00       	call   1bf42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1aea2:	48 8b 00             	mov    (%rax),%rax
   1aea5:	48 39 c3             	cmp    %rax,%rbx
   1aea8:	0f 94 c0             	sete   %al
   1aeab:	84 c0                	test   %al,%al
   1aead:	74 4c                	je     1aefb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1d3>
	    return _Res(_M_leftmost(), _M_leftmost());
   1aeaf:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1aeb6:	48 89 c7             	mov    %rax,%rdi
   1aeb9:	e8 84 10 00 00       	call   1bf42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1aebe:	48 89 c3             	mov    %rax,%rbx
   1aec1:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1aec8:	48 89 c7             	mov    %rax,%rdi
   1aecb:	e8 72 10 00 00       	call   1bf42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1aed0:	48 89 c1             	mov    %rax,%rcx
   1aed3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1aeda:	48 89 da             	mov    %rbx,%rdx
   1aedd:	48 89 ce             	mov    %rcx,%rsi
   1aee0:	48 89 c7             	mov    %rax,%rdi
   1aee3:	e8 6c 10 00 00       	call   1bf54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
   1aee8:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1aeef:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
   1aef6:	e9 75 02 00 00       	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1aefb:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1af02:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
   1af09:	48 89 c7             	mov    %rax,%rdi
   1af0c:	e8 87 10 00 00       	call   1bf98 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
   1af11:	48 8b 00             	mov    (%rax),%rax
   1af14:	48 89 c7             	mov    %rax,%rdi
   1af17:	e8 66 0e 00 00       	call   1bd82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1af1c:	48 89 c1             	mov    %rax,%rcx
   1af1f:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1af26:	48 89 c2             	mov    %rax,%rdx
   1af29:	48 89 ce             	mov    %rcx,%rsi
   1af2c:	48 89 df             	mov    %rbx,%rdi
   1af2f:	e8 fa ef ff ff       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1af34:	84 c0                	test   %al,%al
   1af36:	0f 84 8a 00 00 00    	je     1afc6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x29e>
	      if (_S_right(__before._M_node) == 0)
   1af3c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   1af43:	48 89 c7             	mov    %rax,%rdi
   1af46:	e8 74 fb ff ff       	call   1aabf <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1af4b:	48 85 c0             	test   %rax,%rax
   1af4e:	0f 94 c0             	sete   %al
   1af51:	84 c0                	test   %al,%al
   1af53:	74 3e                	je     1af93 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x26b>
		return _Res(0, __before._M_node);
   1af55:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1af5c:	00 00 00 00 
   1af60:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
   1af67:	48 8d 8d 68 ff ff ff 	lea    -0x98(%rbp),%rcx
   1af6e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1af75:	48 89 ce             	mov    %rcx,%rsi
   1af78:	48 89 c7             	mov    %rax,%rdi
   1af7b:	e8 1c 0e 00 00       	call   1bd9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1af80:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   1af87:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
   1af8e:	e9 dd 01 00 00       	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__pos._M_node, __pos._M_node);
   1af93:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   1af9a:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   1afa1:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   1afa8:	48 89 ce             	mov    %rcx,%rsi
   1afab:	48 89 c7             	mov    %rax,%rdi
   1afae:	e8 a1 0f 00 00       	call   1bf54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
   1afb3:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1afba:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   1afc1:	e9 aa 01 00 00       	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1afc6:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1afcd:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1afd4:	48 89 d6             	mov    %rdx,%rsi
   1afd7:	48 89 c7             	mov    %rax,%rdi
   1afda:	e8 ed 0d 00 00       	call   1bdcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1afdf:	e9 8c 01 00 00       	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1afe4:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1afeb:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1aff2:	48 89 c7             	mov    %rax,%rdi
   1aff5:	e8 88 0d 00 00       	call   1bd82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1affa:	48 89 c1             	mov    %rax,%rcx
   1affd:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1b004:	48 89 c2             	mov    %rax,%rdx
   1b007:	48 89 ce             	mov    %rcx,%rsi
   1b00a:	48 89 df             	mov    %rbx,%rdi
   1b00d:	e8 1c ef ff ff       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1b012:	84 c0                	test   %al,%al
   1b014:	0f 84 2c 01 00 00    	je     1b146 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x41e>
	  iterator __after = __pos;
   1b01a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1b021:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
	  if (__pos._M_node == _M_rightmost())
   1b028:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1b02f:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1b036:	48 89 c7             	mov    %rax,%rdi
   1b039:	e8 32 0d 00 00       	call   1bd70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1b03e:	48 8b 00             	mov    (%rax),%rax
   1b041:	48 39 c3             	cmp    %rax,%rbx
   1b044:	0f 94 c0             	sete   %al
   1b047:	84 c0                	test   %al,%al
   1b049:	74 3a                	je     1b085 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x35d>
	    return _Res(0, _M_rightmost());
   1b04b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1b052:	48 89 c7             	mov    %rax,%rdi
   1b055:	e8 16 0d 00 00       	call   1bd70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1b05a:	48 89 c2             	mov    %rax,%rdx
   1b05d:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
   1b064:	00 
   1b065:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
   1b069:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   1b06d:	48 89 ce             	mov    %rcx,%rsi
   1b070:	48 89 c7             	mov    %rax,%rdi
   1b073:	e8 24 0d 00 00       	call   1bd9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1b078:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1b07c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1b080:	e9 eb 00 00 00       	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1b085:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1b08c:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
   1b093:	48 89 c7             	mov    %rax,%rdi
   1b096:	e8 25 0f 00 00       	call   1bfc0 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>
   1b09b:	48 8b 00             	mov    (%rax),%rax
   1b09e:	48 89 c7             	mov    %rax,%rdi
   1b0a1:	e8 dc 0c 00 00       	call   1bd82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1b0a6:	48 89 c2             	mov    %rax,%rdx
   1b0a9:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1b0b0:	48 89 c6             	mov    %rax,%rsi
   1b0b3:	48 89 df             	mov    %rbx,%rdi
   1b0b6:	e8 73 ee ff ff       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1b0bb:	84 c0                	test   %al,%al
   1b0bd:	74 6c                	je     1b12b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x403>
	      if (_S_right(__pos._M_node) == 0)
   1b0bf:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1b0c6:	48 89 c7             	mov    %rax,%rdi
   1b0c9:	e8 f1 f9 ff ff       	call   1aabf <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1b0ce:	48 85 c0             	test   %rax,%rax
   1b0d1:	0f 94 c0             	sete   %al
   1b0d4:	84 c0                	test   %al,%al
   1b0d6:	74 2c                	je     1b104 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x3dc>
		return _Res(0, __pos._M_node);
   1b0d8:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   1b0df:	00 
   1b0e0:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   1b0e7:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
   1b0eb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1b0ef:	48 89 ce             	mov    %rcx,%rsi
   1b0f2:	48 89 c7             	mov    %rax,%rdi
   1b0f5:	e8 a2 0c 00 00       	call   1bd9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1b0fa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1b0fe:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1b102:	eb 6c                	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__after._M_node, __after._M_node);
   1b104:	48 8d 95 08 ff ff ff 	lea    -0xf8(%rbp),%rdx
   1b10b:	48 8d 8d 08 ff ff ff 	lea    -0xf8(%rbp),%rcx
   1b112:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1b116:	48 89 ce             	mov    %rcx,%rsi
   1b119:	48 89 c7             	mov    %rax,%rdi
   1b11c:	e8 33 0e 00 00       	call   1bf54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
   1b121:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1b125:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1b129:	eb 45                	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1b12b:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1b132:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1b139:	48 89 d6             	mov    %rdx,%rsi
   1b13c:	48 89 c7             	mov    %rax,%rdi
   1b13f:	e8 88 0c 00 00       	call   1bdcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1b144:	eb 2a                	jmp    1b170 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	return _Res(__pos._M_node, 0);
   1b146:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1b14d:	00 
   1b14e:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   1b152:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   1b159:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1b15d:	48 89 ce             	mov    %rcx,%rsi
   1b160:	48 89 c7             	mov    %rax,%rdi
   1b163:	e8 34 0c 00 00       	call   1bd9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1b168:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b16c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   1b170:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b174:	c9                   	leave
   1b175:	c3                   	ret

000000000001b176 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>:
	_M_key() const
   1b176:	55                   	push   %rbp
   1b177:	48 89 e5             	mov    %rsp,%rbp
   1b17a:	48 83 ec 10          	sub    $0x10,%rsp
   1b17e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return _S_key(_M_node); }
   1b182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b186:	48 8b 40 08          	mov    0x8(%rax),%rax
   1b18a:	48 89 c7             	mov    %rax,%rdi
   1b18d:	e8 56 0e 00 00       	call   1bfe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1b192:	c9                   	leave
   1b193:	c3                   	ret

000000000001b194 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
   1b194:	55                   	push   %rbp
   1b195:	48 89 e5             	mov    %rsp,%rbp
   1b198:	48 83 ec 30          	sub    $0x30,%rsp
   1b19c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b1a0:	48 89 d1             	mov    %rdx,%rcx
   1b1a3:	48 89 f0             	mov    %rsi,%rax
   1b1a6:	48 89 fa             	mov    %rdi,%rdx
   1b1a9:	48 89 ca             	mov    %rcx,%rdx
   1b1ac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1b1b0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
   1b1b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b1b8:	48 8b 00             	mov    (%rax),%rax
   1b1bb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b1bf:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
   1b1c3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1b1c7:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   1b1cb:	48 89 c7             	mov    %rax,%rdi
   1b1ce:	e8 41 0e 00 00       	call   1c014 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
   1b1d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_node = nullptr;
   1b1d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b1db:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1b1e2:	00 
	  return __it;
   1b1e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1b1e7:	c9                   	leave
   1b1e8:	c3                   	ret
   1b1e9:	90                   	nop

000000000001b1ea <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1b1ea:	55                   	push   %rbp
   1b1eb:	48 89 e5             	mov    %rsp,%rbp
   1b1ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b1f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__x) { }
   1b1f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b1fa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b1fe:	48 89 10             	mov    %rdx,(%rax)
   1b201:	90                   	nop
   1b202:	5d                   	pop    %rbp
   1b203:	c3                   	ret

000000000001b204 <_ZNSt22_Optional_payload_baseIjEC1IJjEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
   1b204:	55                   	push   %rbp
   1b205:	48 89 e5             	mov    %rsp,%rbp
   1b208:	53                   	push   %rbx
   1b209:	48 83 ec 28          	sub    $0x28,%rsp
   1b20d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b211:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
   1b215:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1b219:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b21d:	48 89 c7             	mov    %rax,%rdi
   1b220:	e8 51 ea ff ff       	call   19c76 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   1b225:	48 89 c6             	mov    %rax,%rsi
   1b228:	48 89 df             	mov    %rbx,%rdi
   1b22b:	e8 a8 0e 00 00       	call   1c0d8 <_ZNSt22_Optional_payload_baseIjE8_StorageIjLb1EEC1IJjEEESt10in_place_tDpOT_>
	  _M_engaged(true)
   1b230:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b234:	c6 40 04 01          	movb   $0x1,0x4(%rax)
	{ }
   1b238:	90                   	nop
   1b239:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b23d:	c9                   	leave
   1b23e:	c3                   	ret

000000000001b23f <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b23f:	55                   	push   %rbp
   1b240:	48 89 e5             	mov    %rsp,%rbp
   1b243:	48 83 ec 10          	sub    $0x10,%rsp
   1b247:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b24b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1b24f:	eb 19                	jmp    1b26a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1b251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b255:	48 89 c7             	mov    %rax,%rdi
   1b258:	e8 d3 0e 00 00       	call   1c130 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1b25d:	48 89 c7             	mov    %rax,%rdi
   1b260:	e8 d9 0e 00 00       	call   1c13e <_ZSt8_DestroyIN2vk4raii14PhysicalDeviceEEvPT_>
	  for (; __first != __last; ++__first)
   1b265:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
   1b26a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b26e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1b272:	75 dd                	jne    1b251 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_+0x12>
	}
   1b274:	90                   	nop
   1b275:	90                   	nop
   1b276:	c9                   	leave
   1b277:	c3                   	ret

000000000001b278 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b278:	55                   	push   %rbp
   1b279:	48 89 e5             	mov    %rsp,%rbp
   1b27c:	48 83 ec 10          	sub    $0x10,%rsp
   1b280:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b284:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1b288:	eb 19                	jmp    1b2a3 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1b28a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b28e:	48 89 c7             	mov    %rax,%rdi
   1b291:	e8 f5 0e 00 00       	call   1c18b <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1b296:	48 89 c7             	mov    %rax,%rdi
   1b299:	e8 fb 0e 00 00       	call   1c199 <_ZSt8_DestroyIP18VkPhysicalDevice_TEvPT_>
	  for (; __first != __last; ++__first)
   1b29e:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   1b2a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b2a7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1b2ab:	75 dd                	jne    1b28a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_+0x12>
	}
   1b2ad:	90                   	nop
   1b2ae:	90                   	nop
   1b2af:	c9                   	leave
   1b2b0:	c3                   	ret

000000000001b2b1 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1b2b1:	55                   	push   %rbp
   1b2b2:	48 89 e5             	mov    %rsp,%rbp
   1b2b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b2b9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b2bd:	90                   	nop
   1b2be:	5d                   	pop    %rbp
   1b2bf:	c3                   	ret

000000000001b2c0 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1b2c0:	55                   	push   %rbp
   1b2c1:	48 89 e5             	mov    %rsp,%rbp
   1b2c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1b2c8:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1b2cf:	ff ff 1f 
      }
   1b2d2:	5d                   	pop    %rbp
   1b2d3:	c3                   	ret

000000000001b2d4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1b2d4:	55                   	push   %rbp
   1b2d5:	48 89 e5             	mov    %rsp,%rbp
   1b2d8:	48 83 ec 20          	sub    $0x20,%rsp
   1b2dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1b2e0:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1b2e7:	ff ff 0f 
   1b2ea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1b2ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b2f2:	48 89 c7             	mov    %rax,%rdi
   1b2f5:	e8 c6 ff ff ff       	call   1b2c0 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>
   1b2fa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1b2fe:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1b302:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1b306:	48 89 d6             	mov    %rdx,%rsi
   1b309:	48 89 c7             	mov    %rax,%rdi
   1b30c:	e8 51 be ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   1b311:	48 8b 00             	mov    (%rax),%rax
      }
   1b314:	c9                   	leave
   1b315:	c3                   	ret

000000000001b316 <_ZNKSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1b316:	55                   	push   %rbp
   1b317:	48 89 e5             	mov    %rsp,%rbp
   1b31a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1b31e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b322:	5d                   	pop    %rbp
   1b323:	c3                   	ret

000000000001b324 <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1b324:	55                   	push   %rbp
   1b325:	48 89 e5             	mov    %rsp,%rbp
   1b328:	48 83 ec 20          	sub    $0x20,%rsp
   1b32c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b330:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1b334:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1b338:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1b33c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b340:	48 89 d6             	mov    %rdx,%rsi
   1b343:	48 89 c7             	mov    %rax,%rdi
   1b346:	e8 69 0e 00 00       	call   1c1b4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>
    }
   1b34b:	c9                   	leave
   1b34c:	c3                   	ret

000000000001b34d <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1b34d:	55                   	push   %rbp
   1b34e:	48 89 e5             	mov    %rsp,%rbp
   1b351:	48 83 ec 20          	sub    $0x20,%rsp
   1b355:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b359:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b35d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b361:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b365:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b369:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1b36d:	e8 2c ae fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b372:	84 c0                	test   %al,%al
   1b374:	74 43                	je     1b3b9 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x6c>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1b376:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b37a:	b9 00 00 00 00       	mov    $0x0,%ecx
   1b37f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1b386:	00 
   1b387:	48 c1 e8 3d          	shr    $0x3d,%rax
   1b38b:	48 85 c0             	test   %rax,%rax
   1b38e:	74 05                	je     1b395 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x48>
   1b390:	b9 01 00 00 00       	mov    $0x1,%ecx
   1b395:	48 89 d0             	mov    %rdx,%rax
   1b398:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b39c:	48 89 c8             	mov    %rcx,%rax
   1b39f:	83 e0 01             	and    $0x1,%eax
   1b3a2:	84 c0                	test   %al,%al
   1b3a4:	74 05                	je     1b3ab <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x5e>
	      std::__throw_bad_array_new_length();
   1b3a6:	e8 d5 9d fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1b3ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b3af:	48 89 c7             	mov    %rax,%rdi
   1b3b2:	e8 69 9e fe ff       	call   5220 <_Znwm@plt>
   1b3b7:	eb 19                	jmp    1b3d2 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x85>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1b3b9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b3bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b3c1:	ba 00 00 00 00       	mov    $0x0,%edx
   1b3c6:	48 89 ce             	mov    %rcx,%rsi
   1b3c9:	48 89 c7             	mov    %rax,%rdi
   1b3cc:	e8 25 17 00 00       	call   1caf6 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>
   1b3d1:	90                   	nop
      { return __a.allocate(__n); }
   1b3d2:	c9                   	leave
   1b3d3:	c3                   	ret

000000000001b3d4 <_ZSt12__relocate_aIPP18VkPhysicalDevice_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1b3d4:	55                   	push   %rbp
   1b3d5:	48 89 e5             	mov    %rsp,%rbp
   1b3d8:	41 54                	push   %r12
   1b3da:	53                   	push   %rbx
   1b3db:	48 83 ec 20          	sub    $0x20,%rsp
   1b3df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b3e3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b3e7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1b3eb:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1b3ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b3f3:	48 89 c7             	mov    %rax,%rdi
   1b3f6:	e8 16 0e 00 00       	call   1c211 <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>
   1b3fb:	49 89 c4             	mov    %rax,%r12
   1b3fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b402:	48 89 c7             	mov    %rax,%rdi
   1b405:	e8 07 0e 00 00       	call   1c211 <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>
   1b40a:	48 89 c3             	mov    %rax,%rbx
   1b40d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b411:	48 89 c7             	mov    %rax,%rdi
   1b414:	e8 f8 0d 00 00       	call   1c211 <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>
   1b419:	48 89 c7             	mov    %rax,%rdi
   1b41c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b420:	48 89 c1             	mov    %rax,%rcx
   1b423:	4c 89 e2             	mov    %r12,%rdx
   1b426:	48 89 de             	mov    %rbx,%rsi
   1b429:	e8 0f 0e 00 00       	call   1c23d <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1b42e:	48 83 c4 20          	add    $0x20,%rsp
   1b432:	5b                   	pop    %rbx
   1b433:	41 5c                	pop    %r12
   1b435:	5d                   	pop    %rbp
   1b436:	c3                   	ret

000000000001b437 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>:
    __niter_base(_Iterator __it)
   1b437:	55                   	push   %rbp
   1b438:	48 89 e5             	mov    %rsp,%rbp
   1b43b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1b43f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b443:	5d                   	pop    %rbp
   1b444:	c3                   	ret

000000000001b445 <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1b445:	55                   	push   %rbp
   1b446:	48 89 e5             	mov    %rsp,%rbp
   1b449:	53                   	push   %rbx
   1b44a:	48 83 ec 38          	sub    $0x38,%rsp
   1b44e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b452:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1b456:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1b45a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1b45e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b462:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1b466:	eb 3a                	jmp    1b4a2 <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_+0x5d>
	std::__relocate_object_a(std::__addressof(*__cur),
   1b468:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b46c:	48 89 c7             	mov    %rax,%rdi
   1b46f:	e8 bc 0c 00 00       	call   1c130 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1b474:	48 89 c3             	mov    %rax,%rbx
   1b477:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b47b:	48 89 c7             	mov    %rax,%rdi
   1b47e:	e8 ad 0c 00 00       	call   1c130 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1b483:	48 89 c1             	mov    %rax,%rcx
   1b486:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1b48a:	48 89 c2             	mov    %rax,%rdx
   1b48d:	48 89 de             	mov    %rbx,%rsi
   1b490:	48 89 cf             	mov    %rcx,%rdi
   1b493:	e8 af 0e 00 00       	call   1c347 <_ZSt19__relocate_object_aIN2vk4raii14PhysicalDeviceES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1b498:	48 83 45 d8 10       	addq   $0x10,-0x28(%rbp)
   1b49d:	48 83 45 e8 10       	addq   $0x10,-0x18(%rbp)
   1b4a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b4a6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1b4aa:	75 bc                	jne    1b468 <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_+0x23>
      return __cur;
   1b4ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1b4b0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b4b4:	c9                   	leave
   1b4b5:	c3                   	ret

000000000001b4b6 <_ZSt10destroy_atIN2vk4raii14PhysicalDeviceEEvPT_>:
    destroy_at(_Tp* __location)
   1b4b6:	55                   	push   %rbp
   1b4b7:	48 89 e5             	mov    %rsp,%rbp
   1b4ba:	48 83 ec 10          	sub    $0x10,%rsp
   1b4be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__location->~_Tp();
   1b4c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b4c6:	48 89 c7             	mov    %rax,%rdi
   1b4c9:	e8 20 e0 fe ff       	call   94ee <_ZN2vk4raii14PhysicalDeviceD1Ev>
    }
   1b4ce:	90                   	nop
   1b4cf:	c9                   	leave
   1b4d0:	c3                   	ret
   1b4d1:	90                   	nop

000000000001b4d2 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEEC1Ev>:
      _Tuple_impl()
   1b4d2:	55                   	push   %rbp
   1b4d3:	48 89 e5             	mov    %rsp,%rbp
   1b4d6:	48 83 ec 10          	sub    $0x10,%rsp
   1b4da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
   1b4de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b4e2:	48 89 c7             	mov    %rax,%rdi
   1b4e5:	e8 b4 0e 00 00       	call   1c39e <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EEC1Ev>
   1b4ea:	90                   	nop
   1b4eb:	c9                   	leave
   1b4ec:	c3                   	ret
   1b4ed:	90                   	nop

000000000001b4ee <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EEC1Ev>:
      constexpr _Head_base()
   1b4ee:	55                   	push   %rbp
   1b4ef:	48 89 e5             	mov    %rsp,%rbp
   1b4f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   1b4f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b4fa:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1b501:	90                   	nop
   1b502:	5d                   	pop    %rbp
   1b503:	c3                   	ret

000000000001b504 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b504:	55                   	push   %rbp
   1b505:	48 89 e5             	mov    %rsp,%rbp
   1b508:	48 83 ec 10          	sub    $0x10,%rsp
   1b50c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b510:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1b514:	eb 19                	jmp    1b52f <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1b516:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b51a:	48 89 c7             	mov    %rax,%rdi
   1b51d:	e8 c1 0e 00 00       	call   1c3e3 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1b522:	48 89 c7             	mov    %rax,%rdi
   1b525:	e8 c7 0e 00 00       	call   1c3f1 <_ZSt8_DestroyIN2vk21QueueFamilyPropertiesEEvPT_>
	  for (; __first != __last; ++__first)
   1b52a:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
   1b52f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b533:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1b537:	75 dd                	jne    1b516 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_+0x12>
	}
   1b539:	90                   	nop
   1b53a:	90                   	nop
   1b53b:	c9                   	leave
   1b53c:	c3                   	ret

000000000001b53d <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1b53d:	55                   	push   %rbp
   1b53e:	48 89 e5             	mov    %rsp,%rbp
   1b541:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b545:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b549:	90                   	nop
   1b54a:	5d                   	pop    %rbp
   1b54b:	c3                   	ret

000000000001b54c <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1b54c:	55                   	push   %rbp
   1b54d:	48 89 e5             	mov    %rsp,%rbp
   1b550:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1b554:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
   1b55b:	aa aa 0a 
      }
   1b55e:	5d                   	pop    %rbp
   1b55f:	c3                   	ret

000000000001b560 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1b560:	55                   	push   %rbp
   1b561:	48 89 e5             	mov    %rsp,%rbp
   1b564:	48 83 ec 20          	sub    $0x20,%rsp
   1b568:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1b56c:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
   1b573:	55 55 05 
   1b576:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1b57a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b57e:	48 89 c7             	mov    %rax,%rdi
   1b581:	e8 c6 ff ff ff       	call   1b54c <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8max_sizeERKS2_>
   1b586:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1b58a:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1b58e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1b592:	48 89 d6             	mov    %rdx,%rsi
   1b595:	48 89 c7             	mov    %rax,%rdi
   1b598:	e8 c5 bb ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   1b59d:	48 8b 00             	mov    (%rax),%rax
      }
   1b5a0:	c9                   	leave
   1b5a1:	c3                   	ret

000000000001b5a2 <_ZNKSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1b5a2:	55                   	push   %rbp
   1b5a3:	48 89 e5             	mov    %rsp,%rbp
   1b5a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1b5aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b5ae:	5d                   	pop    %rbp
   1b5af:	c3                   	ret

000000000001b5b0 <_ZSt25__uninitialized_default_nIPN2vk21QueueFamilyPropertiesEmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1b5b0:	55                   	push   %rbp
   1b5b1:	48 89 e5             	mov    %rsp,%rbp
   1b5b4:	48 83 ec 20          	sub    $0x20,%rsp
   1b5b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b5bc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1b5c0:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1b5c4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1b5c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b5cc:	48 89 d6             	mov    %rdx,%rsi
   1b5cf:	48 89 c7             	mov    %rax,%rdi
   1b5d2:	e8 35 0e 00 00       	call   1c40c <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_>
    }
   1b5d7:	c9                   	leave
   1b5d8:	c3                   	ret

000000000001b5d9 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1b5d9:	55                   	push   %rbp
   1b5da:	48 89 e5             	mov    %rsp,%rbp
   1b5dd:	48 83 ec 20          	sub    $0x20,%rsp
   1b5e1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b5e5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b5e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b5ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b5f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b5f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1b5f9:	e8 a0 ab fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b5fe:	84 c0                	test   %al,%al
   1b600:	74 39                	je     1b63b <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1b602:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b606:	b9 00 00 00 00       	mov    $0x0,%ecx
   1b60b:	ba 18 00 00 00       	mov    $0x18,%edx
   1b610:	48 f7 e2             	mul    %rdx
   1b613:	71 05                	jno    1b61a <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x41>
   1b615:	b9 01 00 00 00       	mov    $0x1,%ecx
   1b61a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b61e:	48 89 c8             	mov    %rcx,%rax
   1b621:	83 e0 01             	and    $0x1,%eax
   1b624:	84 c0                	test   %al,%al
   1b626:	74 05                	je     1b62d <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x54>
	      std::__throw_bad_array_new_length();
   1b628:	e8 53 9b fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1b62d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b631:	48 89 c7             	mov    %rax,%rdi
   1b634:	e8 e7 9b fe ff       	call   5220 <_Znwm@plt>
   1b639:	eb 19                	jmp    1b654 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1b63b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b63f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b643:	ba 00 00 00 00       	mov    $0x0,%edx
   1b648:	48 89 ce             	mov    %rcx,%rsi
   1b64b:	48 89 c7             	mov    %rax,%rdi
   1b64e:	e8 af 16 00 00       	call   1cd02 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv>
   1b653:	90                   	nop
      { return __a.allocate(__n); }
   1b654:	c9                   	leave
   1b655:	c3                   	ret

000000000001b656 <_ZSt12__relocate_aIPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1b656:	55                   	push   %rbp
   1b657:	48 89 e5             	mov    %rsp,%rbp
   1b65a:	41 54                	push   %r12
   1b65c:	53                   	push   %rbx
   1b65d:	48 83 ec 20          	sub    $0x20,%rsp
   1b661:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b665:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b669:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1b66d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1b671:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b675:	48 89 c7             	mov    %rax,%rdi
   1b678:	e8 d4 0d 00 00       	call   1c451 <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>
   1b67d:	49 89 c4             	mov    %rax,%r12
   1b680:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b684:	48 89 c7             	mov    %rax,%rdi
   1b687:	e8 c5 0d 00 00       	call   1c451 <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>
   1b68c:	48 89 c3             	mov    %rax,%rbx
   1b68f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b693:	48 89 c7             	mov    %rax,%rdi
   1b696:	e8 b6 0d 00 00       	call   1c451 <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>
   1b69b:	48 89 c7             	mov    %rax,%rdi
   1b69e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b6a2:	48 89 c1             	mov    %rax,%rcx
   1b6a5:	4c 89 e2             	mov    %r12,%rdx
   1b6a8:	48 89 de             	mov    %rbx,%rsi
   1b6ab:	e8 af 0d 00 00       	call   1c45f <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   1b6b0:	48 83 c4 20          	add    $0x20,%rsp
   1b6b4:	5b                   	pop    %rbx
   1b6b5:	41 5c                	pop    %r12
   1b6b7:	5d                   	pop    %rbp
   1b6b8:	c3                   	ret

000000000001b6b9 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b6b9:	55                   	push   %rbp
   1b6ba:	48 89 e5             	mov    %rsp,%rbp
   1b6bd:	48 83 ec 10          	sub    $0x10,%rsp
   1b6c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b6c5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1b6c9:	eb 1c                	jmp    1b6e7 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_+0x2e>
	    std::_Destroy(std::__addressof(*__first));
   1b6cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b6cf:	48 89 c7             	mov    %rax,%rdi
   1b6d2:	e8 33 0e 00 00       	call   1c50a <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1b6d7:	48 89 c7             	mov    %rax,%rdi
   1b6da:	e8 39 0e 00 00       	call   1c518 <_ZSt8_DestroyIN2vk19ExtensionPropertiesEEvPT_>
	  for (; __first != __last; ++__first)
   1b6df:	48 81 45 f8 04 01 00 	addq   $0x104,-0x8(%rbp)
   1b6e6:	00 
   1b6e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b6eb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1b6ef:	75 da                	jne    1b6cb <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_+0x12>
	}
   1b6f1:	90                   	nop
   1b6f2:	90                   	nop
   1b6f3:	c9                   	leave
   1b6f4:	c3                   	ret

000000000001b6f5 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1b6f5:	55                   	push   %rbp
   1b6f6:	48 89 e5             	mov    %rsp,%rbp
   1b6f9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b6fd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b701:	90                   	nop
   1b702:	5d                   	pop    %rbp
   1b703:	c3                   	ret

000000000001b704 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1b704:	55                   	push   %rbp
   1b705:	48 89 e5             	mov    %rsp,%rbp
   1b708:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1b70c:	48 b8 fc c0 0f fc c0 	movabs $0xfc0fc0fc0fc0fc,%rax
   1b713:	0f fc 00 
      }
   1b716:	5d                   	pop    %rbp
   1b717:	c3                   	ret

000000000001b718 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1b718:	55                   	push   %rbp
   1b719:	48 89 e5             	mov    %rsp,%rbp
   1b71c:	48 83 ec 20          	sub    $0x20,%rsp
   1b720:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1b724:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1b72b:	07 7e 00 
   1b72e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1b732:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b736:	48 89 c7             	mov    %rax,%rdi
   1b739:	e8 c6 ff ff ff       	call   1b704 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8max_sizeERKS2_>
   1b73e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1b742:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1b746:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1b74a:	48 89 d6             	mov    %rdx,%rsi
   1b74d:	48 89 c7             	mov    %rax,%rdi
   1b750:	e8 0d ba ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   1b755:	48 8b 00             	mov    (%rax),%rax
      }
   1b758:	c9                   	leave
   1b759:	c3                   	ret

000000000001b75a <_ZNKSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1b75a:	55                   	push   %rbp
   1b75b:	48 89 e5             	mov    %rsp,%rbp
   1b75e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1b762:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b766:	5d                   	pop    %rbp
   1b767:	c3                   	ret

000000000001b768 <_ZSt25__uninitialized_default_nIPN2vk19ExtensionPropertiesEmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1b768:	55                   	push   %rbp
   1b769:	48 89 e5             	mov    %rsp,%rbp
   1b76c:	48 83 ec 20          	sub    $0x20,%rsp
   1b770:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b774:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1b778:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1b77c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1b780:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b784:	48 89 d6             	mov    %rdx,%rsi
   1b787:	48 89 c7             	mov    %rax,%rdi
   1b78a:	e8 a4 0d 00 00       	call   1c533 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_>
    }
   1b78f:	c9                   	leave
   1b790:	c3                   	ret

000000000001b791 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1b791:	55                   	push   %rbp
   1b792:	48 89 e5             	mov    %rsp,%rbp
   1b795:	48 83 ec 20          	sub    $0x20,%rsp
   1b799:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b79d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b7a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b7a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b7a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b7ad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1b7b1:	e8 e8 a9 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b7b6:	84 c0                	test   %al,%al
   1b7b8:	74 39                	je     1b7f3 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1b7ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b7be:	b9 00 00 00 00       	mov    $0x0,%ecx
   1b7c3:	ba 04 01 00 00       	mov    $0x104,%edx
   1b7c8:	48 f7 e2             	mul    %rdx
   1b7cb:	71 05                	jno    1b7d2 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x41>
   1b7cd:	b9 01 00 00 00       	mov    $0x1,%ecx
   1b7d2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b7d6:	48 89 c8             	mov    %rcx,%rax
   1b7d9:	83 e0 01             	and    $0x1,%eax
   1b7dc:	84 c0                	test   %al,%al
   1b7de:	74 05                	je     1b7e5 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x54>
	      std::__throw_bad_array_new_length();
   1b7e0:	e8 9b 99 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1b7e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b7e9:	48 89 c7             	mov    %rax,%rdi
   1b7ec:	e8 2f 9a fe ff       	call   5220 <_Znwm@plt>
   1b7f1:	eb 19                	jmp    1b80c <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1b7f3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b7f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b7fb:	ba 00 00 00 00       	mov    $0x0,%edx
   1b800:	48 89 ce             	mov    %rcx,%rsi
   1b803:	48 89 c7             	mov    %rax,%rdi
   1b806:	e8 6b 16 00 00       	call   1ce76 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv>
   1b80b:	90                   	nop
      { return __a.allocate(__n); }
   1b80c:	c9                   	leave
   1b80d:	c3                   	ret

000000000001b80e <_ZSt12__relocate_aIPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1b80e:	55                   	push   %rbp
   1b80f:	48 89 e5             	mov    %rsp,%rbp
   1b812:	41 54                	push   %r12
   1b814:	53                   	push   %rbx
   1b815:	48 83 ec 20          	sub    $0x20,%rsp
   1b819:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b81d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b821:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1b825:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1b829:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b82d:	48 89 c7             	mov    %rax,%rdi
   1b830:	e8 46 0d 00 00       	call   1c57b <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>
   1b835:	49 89 c4             	mov    %rax,%r12
   1b838:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b83c:	48 89 c7             	mov    %rax,%rdi
   1b83f:	e8 37 0d 00 00       	call   1c57b <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>
   1b844:	48 89 c3             	mov    %rax,%rbx
   1b847:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b84b:	48 89 c7             	mov    %rax,%rdi
   1b84e:	e8 28 0d 00 00       	call   1c57b <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>
   1b853:	48 89 c7             	mov    %rax,%rdi
   1b856:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b85a:	48 89 c1             	mov    %rax,%rcx
   1b85d:	4c 89 e2             	mov    %r12,%rdx
   1b860:	48 89 de             	mov    %rbx,%rsi
   1b863:	e8 21 0d 00 00       	call   1c589 <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   1b868:	48 83 c4 20          	add    $0x20,%rsp
   1b86c:	5b                   	pop    %rbx
   1b86d:	41 5c                	pop    %r12
   1b86f:	5d                   	pop    %rbp
   1b870:	c3                   	ret

000000000001b871 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b871:	55                   	push   %rbp
   1b872:	48 89 e5             	mov    %rsp,%rbp
   1b875:	48 83 ec 10          	sub    $0x10,%rsp
   1b879:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b87d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1b881:	eb 1c                	jmp    1b89f <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_+0x2e>
	    std::_Destroy(std::__addressof(*__first));
   1b883:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b887:	48 89 c7             	mov    %rax,%rdi
   1b88a:	e8 ab 0d 00 00       	call   1c63a <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1b88f:	48 89 c7             	mov    %rax,%rdi
   1b892:	e8 b1 0d 00 00       	call   1c648 <_ZSt8_DestroyIN2vk15LayerPropertiesEEvPT_>
	  for (; __first != __last; ++__first)
   1b897:	48 81 45 f8 08 02 00 	addq   $0x208,-0x8(%rbp)
   1b89e:	00 
   1b89f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b8a3:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1b8a7:	75 da                	jne    1b883 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_+0x12>
	}
   1b8a9:	90                   	nop
   1b8aa:	90                   	nop
   1b8ab:	c9                   	leave
   1b8ac:	c3                   	ret

000000000001b8ad <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1b8ad:	55                   	push   %rbp
   1b8ae:	48 89 e5             	mov    %rsp,%rbp
   1b8b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b8b5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b8b9:	90                   	nop
   1b8ba:	5d                   	pop    %rbp
   1b8bb:	c3                   	ret

000000000001b8bc <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1b8bc:	55                   	push   %rbp
   1b8bd:	48 89 e5             	mov    %rsp,%rbp
   1b8c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1b8c4:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1b8cb:	07 7e 00 
      }
   1b8ce:	5d                   	pop    %rbp
   1b8cf:	c3                   	ret

000000000001b8d0 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1b8d0:	55                   	push   %rbp
   1b8d1:	48 89 e5             	mov    %rsp,%rbp
   1b8d4:	48 83 ec 20          	sub    $0x20,%rsp
   1b8d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1b8dc:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
   1b8e3:	03 3f 00 
   1b8e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1b8ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b8ee:	48 89 c7             	mov    %rax,%rdi
   1b8f1:	e8 c6 ff ff ff       	call   1b8bc <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8max_sizeERKS2_>
   1b8f6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1b8fa:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1b8fe:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1b902:	48 89 d6             	mov    %rdx,%rsi
   1b905:	48 89 c7             	mov    %rax,%rdi
   1b908:	e8 55 b8 ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   1b90d:	48 8b 00             	mov    (%rax),%rax
      }
   1b910:	c9                   	leave
   1b911:	c3                   	ret

000000000001b912 <_ZNKSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1b912:	55                   	push   %rbp
   1b913:	48 89 e5             	mov    %rsp,%rbp
   1b916:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1b91a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b91e:	5d                   	pop    %rbp
   1b91f:	c3                   	ret

000000000001b920 <_ZSt25__uninitialized_default_nIPN2vk15LayerPropertiesEmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1b920:	55                   	push   %rbp
   1b921:	48 89 e5             	mov    %rsp,%rbp
   1b924:	48 83 ec 20          	sub    $0x20,%rsp
   1b928:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b92c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1b930:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1b934:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1b938:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b93c:	48 89 d6             	mov    %rdx,%rsi
   1b93f:	48 89 c7             	mov    %rax,%rdi
   1b942:	e8 1c 0d 00 00       	call   1c663 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_>
    }
   1b947:	c9                   	leave
   1b948:	c3                   	ret

000000000001b949 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1b949:	55                   	push   %rbp
   1b94a:	48 89 e5             	mov    %rsp,%rbp
   1b94d:	48 83 ec 20          	sub    $0x20,%rsp
   1b951:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b955:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b959:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b95d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b961:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b965:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1b969:	e8 30 a8 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b96e:	84 c0                	test   %al,%al
   1b970:	74 39                	je     1b9ab <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1b972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b976:	b9 00 00 00 00       	mov    $0x0,%ecx
   1b97b:	ba 08 02 00 00       	mov    $0x208,%edx
   1b980:	48 f7 e2             	mul    %rdx
   1b983:	71 05                	jno    1b98a <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x41>
   1b985:	b9 01 00 00 00       	mov    $0x1,%ecx
   1b98a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b98e:	48 89 c8             	mov    %rcx,%rax
   1b991:	83 e0 01             	and    $0x1,%eax
   1b994:	84 c0                	test   %al,%al
   1b996:	74 05                	je     1b99d <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x54>
	      std::__throw_bad_array_new_length();
   1b998:	e8 e3 97 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1b99d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b9a1:	48 89 c7             	mov    %rax,%rdi
   1b9a4:	e8 77 98 fe ff       	call   5220 <_Znwm@plt>
   1b9a9:	eb 19                	jmp    1b9c4 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1b9ab:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b9af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b9b3:	ba 00 00 00 00       	mov    $0x0,%edx
   1b9b8:	48 89 ce             	mov    %rcx,%rsi
   1b9bb:	48 89 c7             	mov    %rax,%rdi
   1b9be:	e8 49 16 00 00       	call   1d00c <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv>
   1b9c3:	90                   	nop
      { return __a.allocate(__n); }
   1b9c4:	c9                   	leave
   1b9c5:	c3                   	ret

000000000001b9c6 <_ZSt12__relocate_aIPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1b9c6:	55                   	push   %rbp
   1b9c7:	48 89 e5             	mov    %rsp,%rbp
   1b9ca:	41 54                	push   %r12
   1b9cc:	53                   	push   %rbx
   1b9cd:	48 83 ec 20          	sub    $0x20,%rsp
   1b9d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b9d5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b9d9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1b9dd:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1b9e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b9e5:	48 89 c7             	mov    %rax,%rdi
   1b9e8:	e8 be 0c 00 00       	call   1c6ab <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>
   1b9ed:	49 89 c4             	mov    %rax,%r12
   1b9f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b9f4:	48 89 c7             	mov    %rax,%rdi
   1b9f7:	e8 af 0c 00 00       	call   1c6ab <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>
   1b9fc:	48 89 c3             	mov    %rax,%rbx
   1b9ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ba03:	48 89 c7             	mov    %rax,%rdi
   1ba06:	e8 a0 0c 00 00       	call   1c6ab <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>
   1ba0b:	48 89 c7             	mov    %rax,%rdi
   1ba0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ba12:	48 89 c1             	mov    %rax,%rcx
   1ba15:	4c 89 e2             	mov    %r12,%rdx
   1ba18:	48 89 de             	mov    %rbx,%rsi
   1ba1b:	e8 99 0c 00 00       	call   1c6b9 <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   1ba20:	48 83 c4 20          	add    $0x20,%rsp
   1ba24:	5b                   	pop    %rbx
   1ba25:	41 5c                	pop    %r12
   1ba27:	5d                   	pop    %rbp
   1ba28:	c3                   	ret

000000000001ba29 <_ZSt12__miter_baseIPKPKcET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
   1ba29:	55                   	push   %rbp
   1ba2a:	48 89 e5             	mov    %rsp,%rbp
   1ba2d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1ba31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ba35:	5d                   	pop    %rbp
   1ba36:	c3                   	ret

000000000001ba37 <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   1ba37:	55                   	push   %rbp
   1ba38:	48 89 e5             	mov    %rsp,%rbp
   1ba3b:	41 54                	push   %r12
   1ba3d:	53                   	push   %rbx
   1ba3e:	48 83 ec 20          	sub    $0x20,%rsp
   1ba42:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ba46:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ba4a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
   1ba4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ba52:	48 89 c7             	mov    %rax,%rdi
   1ba55:	e8 15 0d 00 00       	call   1c76f <_ZSt12__niter_baseIPPKcET_S3_>
   1ba5a:	49 89 c4             	mov    %rax,%r12
   1ba5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ba61:	48 89 c7             	mov    %rax,%rdi
   1ba64:	e8 f8 0c 00 00       	call   1c761 <_ZSt12__niter_baseIPKPKcET_S4_>
   1ba69:	48 89 c3             	mov    %rax,%rbx
   1ba6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ba70:	48 89 c7             	mov    %rax,%rdi
   1ba73:	e8 e9 0c 00 00       	call   1c761 <_ZSt12__niter_baseIPKPKcET_S4_>
   1ba78:	4c 89 e2             	mov    %r12,%rdx
   1ba7b:	48 89 de             	mov    %rbx,%rsi
   1ba7e:	48 89 c7             	mov    %rax,%rdi
   1ba81:	e8 f7 0c 00 00       	call   1c77d <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   1ba86:	48 89 c2             	mov    %rax,%rdx
   1ba89:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1ba8d:	48 89 d6             	mov    %rdx,%rsi
   1ba90:	48 89 c7             	mov    %rax,%rdi
   1ba93:	e8 12 0d 00 00       	call   1c7aa <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>
    }
   1ba98:	48 83 c4 20          	add    $0x20,%rsp
   1ba9c:	5b                   	pop    %rbx
   1ba9d:	41 5c                	pop    %r12
   1ba9f:	5d                   	pop    %rbp
   1baa0:	c3                   	ret

000000000001baa1 <_ZSt10destroy_atIPKcEvPT_>:
    destroy_at(_Tp* __location)
   1baa1:	55                   	push   %rbp
   1baa2:	48 89 e5             	mov    %rsp,%rbp
   1baa5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1baa9:	90                   	nop
   1baaa:	5d                   	pop    %rbp
   1baab:	c3                   	ret

000000000001baac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1baac:	55                   	push   %rbp
   1baad:	48 89 e5             	mov    %rsp,%rbp
   1bab0:	53                   	push   %rbx
   1bab1:	48 83 ec 18          	sub    $0x18,%rsp
   1bab5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1bab9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
   1babd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bac1:	48 89 c7             	mov    %rax,%rdi
   1bac4:	e8 f7 f0 ff ff       	call   1abc0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1bac9:	48 89 c3             	mov    %rax,%rbx
   1bacc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bad0:	48 89 c7             	mov    %rax,%rdi
   1bad3:	e8 e4 0c 00 00       	call   1c7bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1bad8:	48 89 de             	mov    %rbx,%rsi
   1badb:	48 89 c7             	mov    %rax,%rdi
   1bade:	e8 e7 0c 00 00       	call   1c7ca <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>
      }
   1bae3:	90                   	nop
   1bae4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1bae8:	c9                   	leave
   1bae9:	c3                   	ret

000000000001baea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1baea:	55                   	push   %rbp
   1baeb:	48 89 e5             	mov    %rsp,%rbp
   1baee:	48 83 ec 10          	sub    $0x10,%rsp
   1baf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1baf6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
   1bafa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bafe:	48 89 c7             	mov    %rax,%rdi
   1bb01:	e8 b6 0c 00 00       	call   1c7bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1bb06:	48 89 c1             	mov    %rax,%rcx
   1bb09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bb0d:	ba 01 00 00 00       	mov    $0x1,%edx
   1bb12:	48 89 c6             	mov    %rax,%rsi
   1bb15:	48 89 cf             	mov    %rcx,%rdi
   1bb18:	e8 cc 0c 00 00       	call   1c7e9 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>
   1bb1d:	90                   	nop
   1bb1e:	c9                   	leave
   1bb1f:	c3                   	ret

000000000001bb20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
   1bb20:	55                   	push   %rbp
   1bb21:	48 89 e5             	mov    %rsp,%rbp
   1bb24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return &this->_M_impl._M_header; }
   1bb28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bb2c:	48 83 c0 08          	add    $0x8,%rax
   1bb30:	5d                   	pop    %rbp
   1bb31:	c3                   	ret

000000000001bb32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1bb32:	55                   	push   %rbp
   1bb33:	48 89 e5             	mov    %rsp,%rbp
   1bb36:	53                   	push   %rbx
   1bb37:	48 83 ec 38          	sub    $0x38,%rsp
   1bb3b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1bb3f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1bb43:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1bb47:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      while (__x != 0)
   1bb4b:	eb 56                	jmp    1bba3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   1bb4d:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   1bb51:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bb55:	48 89 c7             	mov    %rax,%rdi
   1bb58:	e8 8b 04 00 00       	call   1bfe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1bb5d:	48 89 c1             	mov    %rax,%rcx
   1bb60:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bb64:	48 89 c2             	mov    %rax,%rdx
   1bb67:	48 89 ce             	mov    %rcx,%rsi
   1bb6a:	48 89 df             	mov    %rbx,%rdi
   1bb6d:	e8 bc e3 ff ff       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1bb72:	83 f0 01             	xor    $0x1,%eax
   1bb75:	84 c0                	test   %al,%al
   1bb77:	74 1a                	je     1bb93 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x61>
	  __y = __x, __x = _S_left(__x);
   1bb79:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bb7d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1bb81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bb85:	48 89 c7             	mov    %rax,%rdi
   1bb88:	e8 44 ef ff ff       	call   1aad1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   1bb8d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1bb91:	eb 10                	jmp    1bba3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	  __x = _S_right(__x);
   1bb93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bb97:	48 89 c7             	mov    %rax,%rdi
   1bb9a:	e8 20 ef ff ff       	call   1aabf <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1bb9f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      while (__x != 0)
   1bba3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   1bba8:	75 a3                	jne    1bb4d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x1b>
      return iterator(__y);
   1bbaa:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1bbae:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1bbb2:	48 89 d6             	mov    %rdx,%rsi
   1bbb5:	48 89 c7             	mov    %rax,%rdi
   1bbb8:	e8 2d f6 ff ff       	call   1b1ea <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1bbbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1bbc1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1bbc5:	c9                   	leave
   1bbc6:	c3                   	ret
   1bbc7:	90                   	nop

000000000001bbc8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
   1bbc8:	55                   	push   %rbp
   1bbc9:	48 89 e5             	mov    %rsp,%rbp
   1bbcc:	48 83 ec 10          	sub    $0x10,%rsp
   1bbd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
   1bbd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bbd8:	48 89 c7             	mov    %rax,%rdi
   1bbdb:	e8 68 0c 00 00       	call   1c848 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   1bbe0:	c9                   	leave
   1bbe1:	c3                   	ret

000000000001bbe2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
      compare(const basic_string& __str) const
   1bbe2:	55                   	push   %rbp
   1bbe3:	48 89 e5             	mov    %rsp,%rbp
   1bbe6:	53                   	push   %rbx
   1bbe7:	48 83 ec 38          	sub    $0x38,%rsp
   1bbeb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1bbef:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	const size_type __size = this->size();
   1bbf3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bbf7:	48 89 c7             	mov    %rax,%rdi
   1bbfa:	e8 f7 a6 fe ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
   1bbff:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	const size_type __osize = __str.size();
   1bc03:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bc07:	48 89 c7             	mov    %rax,%rdi
   1bc0a:	e8 e7 a6 fe ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
   1bc0f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	const size_type __len = std::min(__size, __osize);
   1bc13:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1bc17:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1bc1b:	48 89 d6             	mov    %rdx,%rsi
   1bc1e:	48 89 c7             	mov    %rax,%rdi
   1bc21:	e8 3c b5 ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   1bc26:	48 8b 00             	mov    (%rax),%rax
   1bc29:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int __r = traits_type::compare(_M_data(), __str.data(), __len);
   1bc2d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bc31:	48 89 c7             	mov    %rax,%rdi
   1bc34:	e8 95 ba ff ff       	call   176ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
   1bc39:	48 89 c3             	mov    %rax,%rbx
   1bc3c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bc40:	48 89 c7             	mov    %rax,%rdi
   1bc43:	e8 22 ed fe ff       	call   a96a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
   1bc48:	48 89 c1             	mov    %rax,%rcx
   1bc4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bc4f:	48 89 c2             	mov    %rax,%rdx
   1bc52:	48 89 de             	mov    %rbx,%rsi
   1bc55:	48 89 cf             	mov    %rcx,%rdi
   1bc58:	e8 04 3b ff ff       	call   f761 <_ZNSt11char_traitsIcE7compareEPKcS2_m>
   1bc5d:	89 45 ec             	mov    %eax,-0x14(%rbp)
	if (!__r)
   1bc60:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   1bc64:	75 16                	jne    1bc7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x9a>
	  __r = _S_compare(__size, __osize);
   1bc66:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1bc6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bc6e:	48 89 d6             	mov    %rdx,%rsi
   1bc71:	48 89 c7             	mov    %rax,%rdi
   1bc74:	e8 dd 0b 00 00       	call   1c856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm>
   1bc79:	89 45 ec             	mov    %eax,-0x14(%rbp)
	return __r;
   1bc7c:	8b 45 ec             	mov    -0x14(%rbp),%eax
      }
   1bc7f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1bc83:	c9                   	leave
   1bc84:	c3                   	ret
   1bc85:	90                   	nop

000000000001bc86 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>:
	_Tuple_impl(_UHead&& __head)
   1bc86:	55                   	push   %rbp
   1bc87:	48 89 e5             	mov    %rsp,%rbp
   1bc8a:	53                   	push   %rbx
   1bc8b:	48 83 ec 18          	sub    $0x18,%rsp
   1bc8f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1bc93:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::forward<_UHead>(__head))
   1bc97:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1bc9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bc9f:	48 89 c7             	mov    %rax,%rdi
   1bca2:	e8 63 ef ff ff       	call   1ac0a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1bca7:	48 89 c6             	mov    %rax,%rsi
   1bcaa:	48 89 df             	mov    %rbx,%rdi
   1bcad:	e8 ec 0b 00 00       	call   1c89e <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>
	{ }
   1bcb2:	90                   	nop
   1bcb3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1bcb7:	c9                   	leave
   1bcb8:	c3                   	ret
   1bcb9:	90                   	nop

000000000001bcba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
   1bcba:	55                   	push   %rbp
   1bcbb:	48 89 e5             	mov    %rsp,%rbp
   1bcbe:	41 54                	push   %r12
   1bcc0:	53                   	push   %rbx
   1bcc1:	48 83 ec 30          	sub    $0x30,%rsp
   1bcc5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1bcc9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1bccd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1bcd1:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	  _Link_type __tmp = _M_get_node();
   1bcd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bcd9:	48 89 c7             	mov    %rax,%rdi
   1bcdc:	e8 e3 0b 00 00       	call   1c8c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>
   1bce1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   1bce5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bce9:	48 89 c7             	mov    %rax,%rdi
   1bcec:	e8 76 ef ff ff       	call   1ac67 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1bcf1:	49 89 c4             	mov    %rax,%r12
   1bcf4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bcf8:	48 89 c7             	mov    %rax,%rdi
   1bcfb:	e8 59 ef ff ff       	call   1ac59 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1bd00:	48 89 c3             	mov    %rax,%rbx
   1bd03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bd07:	48 89 c7             	mov    %rax,%rdi
   1bd0a:	e8 3c ef ff ff       	call   1ac4b <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1bd0f:	48 89 c2             	mov    %rax,%rdx
   1bd12:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1bd16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bd1a:	4d 89 e0             	mov    %r12,%r8
   1bd1d:	48 89 d9             	mov    %rbx,%rcx
   1bd20:	48 89 c7             	mov    %rax,%rdi
   1bd23:	e8 c4 0b 00 00       	call   1c8ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
   1bd28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1bd2c:	48 83 c4 30          	add    $0x30,%rsp
   1bd30:	5b                   	pop    %rbx
   1bd31:	41 5c                	pop    %r12
   1bd33:	5d                   	pop    %rbp
   1bd34:	c3                   	ret
   1bd35:	90                   	nop

000000000001bd36 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
   1bd36:	55                   	push   %rbp
   1bd37:	48 89 e5             	mov    %rsp,%rbp
   1bd3a:	48 83 ec 20          	sub    $0x20,%rsp
   1bd3e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
   1bd42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bd46:	48 8b 10             	mov    (%rax),%rdx
   1bd49:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1bd4d:	48 89 d6             	mov    %rdx,%rsi
   1bd50:	48 89 c7             	mov    %rax,%rdi
   1bd53:	e8 92 f4 ff ff       	call   1b1ea <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1bd58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bd5c:	c9                   	leave
   1bd5d:	c3                   	ret

000000000001bd5e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1bd5e:	55                   	push   %rbp
   1bd5f:	48 89 e5             	mov    %rsp,%rbp
   1bd62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_node_count; }
   1bd66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bd6a:	48 8b 40 28          	mov    0x28(%rax),%rax
   1bd6e:	5d                   	pop    %rbp
   1bd6f:	c3                   	ret

000000000001bd70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
   1bd70:	55                   	push   %rbp
   1bd71:	48 89 e5             	mov    %rsp,%rbp
   1bd74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_right; }
   1bd78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bd7c:	48 83 c0 20          	add    $0x20,%rax
   1bd80:	5d                   	pop    %rbp
   1bd81:	c3                   	ret

000000000001bd82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
   1bd82:	55                   	push   %rbp
   1bd83:	48 89 e5             	mov    %rsp,%rbp
   1bd86:	48 83 ec 10          	sub    $0x10,%rsp
   1bd8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
   1bd8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bd92:	48 89 c7             	mov    %rax,%rdi
   1bd95:	e8 4e 02 00 00       	call   1bfe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1bd9a:	c9                   	leave
   1bd9b:	c3                   	ret

000000000001bd9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>:

    public:

      /// Constructor accepting lvalues of `first_type` and `second_type`
      constexpr explicit(!_S_convertible<const _T1&, const _T2&>())
      pair(const _T1& __x, const _T2& __y)
   1bd9c:	55                   	push   %rbp
   1bd9d:	48 89 e5             	mov    %rsp,%rbp
   1bda0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bda4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bda8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      noexcept(_S_nothrow_constructible<const _T1&, const _T2&>())
      requires (_S_constructible<const _T1&, const _T2&>())
      : first(__x), second(__y)
   1bdac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bdb0:	48 8b 10             	mov    (%rax),%rdx
   1bdb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bdb7:	48 89 10             	mov    %rdx,(%rax)
   1bdba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bdbe:	48 8b 10             	mov    (%rax),%rdx
   1bdc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bdc5:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
   1bdc9:	90                   	nop
   1bdca:	5d                   	pop    %rbp
   1bdcb:	c3                   	ret

000000000001bdcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1bdcc:	55                   	push   %rbp
   1bdcd:	48 89 e5             	mov    %rsp,%rbp
   1bdd0:	53                   	push   %rbx
   1bdd1:	48 83 ec 78          	sub    $0x78,%rsp
   1bdd5:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   1bdd9:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
      _Link_type __x = _M_begin();
   1bddd:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1bde1:	48 89 c7             	mov    %rax,%rdi
   1bde4:	e8 31 e0 ff ff       	call   19e1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   1bde9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      _Base_ptr __y = _M_end();
   1bded:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1bdf1:	48 89 c7             	mov    %rax,%rdi
   1bdf4:	e8 27 fd ff ff       	call   1bb20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1bdf9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      bool __comp = true;
   1bdfd:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
      while (__x != 0)
   1be01:	eb 51                	jmp    1be54 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x88>
	  __y = __x;
   1be03:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1be07:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   1be0b:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   1be0f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1be13:	48 89 c7             	mov    %rax,%rdi
   1be16:	e8 cd 01 00 00       	call   1bfe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1be1b:	48 89 c2             	mov    %rax,%rdx
   1be1e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1be22:	48 89 c6             	mov    %rax,%rsi
   1be25:	48 89 df             	mov    %rbx,%rdi
   1be28:	e8 01 e1 ff ff       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1be2d:	88 45 ef             	mov    %al,-0x11(%rbp)
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1be30:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1be34:	74 0e                	je     1be44 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x78>
   1be36:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1be3a:	48 89 c7             	mov    %rax,%rdi
   1be3d:	e8 8f ec ff ff       	call   1aad1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   1be42:	eb 0c                	jmp    1be50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x84>
   1be44:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1be48:	48 89 c7             	mov    %rax,%rdi
   1be4b:	e8 6f ec ff ff       	call   1aabf <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1be50:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      while (__x != 0)
   1be54:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1be58:	48 85 c0             	test   %rax,%rax
   1be5b:	75 a6                	jne    1be03 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x37>
      iterator __j = iterator(__y);
   1be5d:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   1be61:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1be65:	48 89 d6             	mov    %rdx,%rsi
   1be68:	48 89 c7             	mov    %rax,%rdi
   1be6b:	e8 7a f3 ff ff       	call   1b1ea <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
   1be70:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1be74:	74 54                	je     1beca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xfe>
	  if (__j == begin())
   1be76:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1be7a:	48 89 c7             	mov    %rax,%rdi
   1be7d:	e8 3c 0b 00 00       	call   1c9be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>
   1be82:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1be86:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
   1be8a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1be8e:	48 89 d6             	mov    %rdx,%rsi
   1be91:	48 89 c7             	mov    %rax,%rdi
   1be94:	e8 13 e0 ff ff       	call   19eac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
   1be99:	84 c0                	test   %al,%al
   1be9b:	74 21                	je     1bebe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf2>
	    return _Res(__x, __y);
   1be9d:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   1bea1:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   1bea5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1bea9:	48 89 ce             	mov    %rcx,%rsi
   1beac:	48 89 c7             	mov    %rax,%rdi
   1beaf:	e8 34 0b 00 00       	call   1c9e8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_EEOT_OT0_>
   1beb4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1beb8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   1bebc:	eb 7d                	jmp    1bf3b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
	    --__j;
   1bebe:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1bec2:	48 89 c7             	mov    %rax,%rdi
   1bec5:	e8 ce 00 00 00       	call   1bf98 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1beca:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   1bece:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1bed2:	48 89 c7             	mov    %rax,%rdi
   1bed5:	e8 a8 fe ff ff       	call   1bd82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1beda:	48 89 c1             	mov    %rax,%rcx
   1bedd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1bee1:	48 89 c2             	mov    %rax,%rdx
   1bee4:	48 89 ce             	mov    %rcx,%rsi
   1bee7:	48 89 df             	mov    %rbx,%rdi
   1beea:	e8 3f e0 ff ff       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1beef:	84 c0                	test   %al,%al
   1bef1:	74 21                	je     1bf14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x148>
	return _Res(__x, __y);
   1bef3:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   1bef7:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   1befb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1beff:	48 89 ce             	mov    %rcx,%rsi
   1bf02:	48 89 c7             	mov    %rax,%rdi
   1bf05:	e8 de 0a 00 00       	call   1c9e8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_EEOT_OT0_>
   1bf0a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bf0e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1bf12:	eb 27                	jmp    1bf3b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
      return _Res(__j._M_node, 0);
   1bf14:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1bf1b:	00 
   1bf1c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   1bf20:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
   1bf24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1bf28:	48 89 ce             	mov    %rcx,%rsi
   1bf2b:	48 89 c7             	mov    %rax,%rdi
   1bf2e:	e8 69 fe ff ff       	call   1bd9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1bf33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bf37:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   1bf3b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1bf3f:	c9                   	leave
   1bf40:	c3                   	ret
   1bf41:	90                   	nop

000000000001bf42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
   1bf42:	55                   	push   %rbp
   1bf43:	48 89 e5             	mov    %rsp,%rbp
   1bf46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_left; }
   1bf4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bf4e:	48 83 c0 18          	add    $0x18,%rax
   1bf52:	5d                   	pop    %rbp
   1bf53:	c3                   	ret

000000000001bf54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>:

      /// Constructor accepting two values of arbitrary types
      template<typename _U1, typename _U2>
	requires (_S_constructible<_U1, _U2>())
	constexpr explicit(!_S_convertible<_U1, _U2>())
	pair(_U1&& __x, _U2&& __y)
   1bf54:	55                   	push   %rbp
   1bf55:	48 89 e5             	mov    %rsp,%rbp
   1bf58:	48 83 ec 20          	sub    $0x20,%rsp
   1bf5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bf60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bf64:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	noexcept(_S_nothrow_constructible<_U1, _U2>())
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
   1bf68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bf6c:	48 89 c7             	mov    %rax,%rdi
   1bf6f:	e8 b8 0a 00 00       	call   1ca2c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1bf74:	48 8b 10             	mov    (%rax),%rdx
   1bf77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bf7b:	48 89 10             	mov    %rdx,(%rax)
   1bf7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bf82:	48 89 c7             	mov    %rax,%rdi
   1bf85:	e8 a2 0a 00 00       	call   1ca2c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1bf8a:	48 8b 10             	mov    (%rax),%rdx
   1bf8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bf91:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
   1bf95:	90                   	nop
   1bf96:	c9                   	leave
   1bf97:	c3                   	ret

000000000001bf98 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
   1bf98:	55                   	push   %rbp
   1bf99:	48 89 e5             	mov    %rsp,%rbp
   1bf9c:	48 83 ec 10          	sub    $0x10,%rsp
   1bfa0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_decrement(_M_node);
   1bfa4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bfa8:	48 8b 00             	mov    (%rax),%rax
   1bfab:	48 89 c7             	mov    %rax,%rdi
   1bfae:	e8 9d 92 fe ff       	call   5250 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>
   1bfb3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1bfb7:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   1bfba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1bfbe:	c9                   	leave
   1bfbf:	c3                   	ret

000000000001bfc0 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1bfc0:	55                   	push   %rbp
   1bfc1:	48 89 e5             	mov    %rsp,%rbp
   1bfc4:	48 83 ec 10          	sub    $0x10,%rsp
   1bfc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_increment(_M_node);
   1bfcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bfd0:	48 8b 00             	mov    (%rax),%rax
   1bfd3:	48 89 c7             	mov    %rax,%rdi
   1bfd6:	e8 45 91 fe ff       	call   5120 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>
   1bfdb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1bfdf:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   1bfe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1bfe6:	c9                   	leave
   1bfe7:	c3                   	ret

000000000001bfe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
   1bfe8:	55                   	push   %rbp
   1bfe9:	48 89 e5             	mov    %rsp,%rbp
   1bfec:	48 83 ec 20          	sub    $0x20,%rsp
   1bff0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return _KeyOfValue()(*__x->_M_valptr());
   1bff4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bff8:	48 89 c7             	mov    %rax,%rdi
   1bffb:	e8 3a 0a 00 00       	call   1ca3a <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1c000:	48 89 c2             	mov    %rax,%rdx
   1c003:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   1c007:	48 89 d6             	mov    %rdx,%rsi
   1c00a:	48 89 c7             	mov    %rax,%rdi
   1c00d:	e8 46 0a 00 00       	call   1ca58 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>
      }
   1c012:	c9                   	leave
   1c013:	c3                   	ret

000000000001c014 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1c014:	55                   	push   %rbp
   1c015:	48 89 e5             	mov    %rsp,%rbp
   1c018:	41 54                	push   %r12
   1c01a:	53                   	push   %rbx
   1c01b:	48 83 ec 30          	sub    $0x30,%rsp
   1c01f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c023:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c027:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c02b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
			    || _M_impl._M_key_compare(_S_key(__z),
   1c02f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   1c034:	75 43                	jne    1c079 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
      bool __insert_left = (__x != 0 || __p == _M_end()
   1c036:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c03a:	48 89 c7             	mov    %rax,%rdi
   1c03d:	e8 de fa ff ff       	call   1bb20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1c042:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
   1c046:	74 31                	je     1c079 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
			    || _M_impl._M_key_compare(_S_key(__z),
   1c048:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   1c04c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c050:	48 89 c7             	mov    %rax,%rdi
   1c053:	e8 2a fd ff ff       	call   1bd82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1c058:	49 89 c4             	mov    %rax,%r12
   1c05b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c05f:	48 89 c7             	mov    %rax,%rdi
   1c062:	e8 81 ff ff ff       	call   1bfe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1c067:	4c 89 e2             	mov    %r12,%rdx
   1c06a:	48 89 c6             	mov    %rax,%rsi
   1c06d:	48 89 df             	mov    %rbx,%rdi
   1c070:	e8 b9 de ff ff       	call   19f2e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1c075:	84 c0                	test   %al,%al
   1c077:	74 07                	je     1c080 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x6c>
   1c079:	b8 01 00 00 00       	mov    $0x1,%eax
   1c07e:	eb 05                	jmp    1c085 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x71>
   1c080:	b8 00 00 00 00       	mov    $0x0,%eax
      bool __insert_left = (__x != 0 || __p == _M_end()
   1c085:	88 45 ef             	mov    %al,-0x11(%rbp)
				    this->_M_impl._M_header);
   1c088:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c08c:	48 8d 48 08          	lea    0x8(%rax),%rcx
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1c090:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
   1c094:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1c098:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1c09c:	89 c7                	mov    %eax,%edi
   1c09e:	e8 9d 8f fe ff       	call   5040 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>
      ++_M_impl._M_node_count;
   1c0a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c0a7:	48 8b 40 28          	mov    0x28(%rax),%rax
   1c0ab:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1c0af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c0b3:	48 89 50 28          	mov    %rdx,0x28(%rax)
      return iterator(__z);
   1c0b7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1c0bb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1c0bf:	48 89 d6             	mov    %rdx,%rsi
   1c0c2:	48 89 c7             	mov    %rax,%rdi
   1c0c5:	e8 20 f1 ff ff       	call   1b1ea <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1c0ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
   1c0ce:	48 83 c4 30          	add    $0x30,%rsp
   1c0d2:	5b                   	pop    %rbx
   1c0d3:	41 5c                	pop    %r12
   1c0d5:	5d                   	pop    %rbp
   1c0d6:	c3                   	ret
   1c0d7:	90                   	nop

000000000001c0d8 <_ZNSt22_Optional_payload_baseIjE8_StorageIjLb1EEC1IJjEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
   1c0d8:	55                   	push   %rbp
   1c0d9:	48 89 e5             	mov    %rsp,%rbp
   1c0dc:	48 83 ec 10          	sub    $0x10,%rsp
   1c0e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c0e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    : _M_value(std::forward<_Args>(__args)...)
   1c0e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c0ec:	48 89 c7             	mov    %rax,%rdi
   1c0ef:	e8 82 db ff ff       	call   19c76 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   1c0f4:	8b 10                	mov    (%rax),%edx
   1c0f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c0fa:	89 10                	mov    %edx,(%rax)
	    { }
   1c0fc:	90                   	nop
   1c0fd:	c9                   	leave
   1c0fe:	c3                   	ret
   1c0ff:	90                   	nop

000000000001c100 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE10deallocateEPS2_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1c100:	55                   	push   %rbp
   1c101:	48 89 e5             	mov    %rsp,%rbp
   1c104:	48 83 ec 20          	sub    $0x20,%rsp
   1c108:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c10c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c110:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c114:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c118:	48 c1 e0 04          	shl    $0x4,%rax
   1c11c:	48 89 c2             	mov    %rax,%rdx
   1c11f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c123:	48 89 d6             	mov    %rdx,%rsi
   1c126:	48 89 c7             	mov    %rax,%rdi
   1c129:	e8 02 91 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1c12e:	c9                   	leave
   1c12f:	c3                   	ret

000000000001c130 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1c130:	55                   	push   %rbp
   1c131:	48 89 e5             	mov    %rsp,%rbp
   1c134:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1c138:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c13c:	5d                   	pop    %rbp
   1c13d:	c3                   	ret

000000000001c13e <_ZSt8_DestroyIN2vk4raii14PhysicalDeviceEEvPT_>:
    _Destroy(_Tp* __pointer)
   1c13e:	55                   	push   %rbp
   1c13f:	48 89 e5             	mov    %rsp,%rbp
   1c142:	48 83 ec 10          	sub    $0x10,%rsp
   1c146:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1c14a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c14e:	48 89 c7             	mov    %rax,%rdi
   1c151:	e8 60 f3 ff ff       	call   1b4b6 <_ZSt10destroy_atIN2vk4raii14PhysicalDeviceEEvPT_>
    }
   1c156:	90                   	nop
   1c157:	c9                   	leave
   1c158:	c3                   	ret
   1c159:	90                   	nop

000000000001c15a <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1c15a:	55                   	push   %rbp
   1c15b:	48 89 e5             	mov    %rsp,%rbp
   1c15e:	48 83 ec 20          	sub    $0x20,%rsp
   1c162:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c166:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c16a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c16e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c172:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1c179:	00 
   1c17a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c17e:	48 89 d6             	mov    %rdx,%rsi
   1c181:	48 89 c7             	mov    %rax,%rdi
   1c184:	e8 a7 90 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1c189:	c9                   	leave
   1c18a:	c3                   	ret

000000000001c18b <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1c18b:	55                   	push   %rbp
   1c18c:	48 89 e5             	mov    %rsp,%rbp
   1c18f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1c193:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c197:	5d                   	pop    %rbp
   1c198:	c3                   	ret

000000000001c199 <_ZSt8_DestroyIP18VkPhysicalDevice_TEvPT_>:
    _Destroy(_Tp* __pointer)
   1c199:	55                   	push   %rbp
   1c19a:	48 89 e5             	mov    %rsp,%rbp
   1c19d:	48 83 ec 10          	sub    $0x10,%rsp
   1c1a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1c1a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c1a9:	48 89 c7             	mov    %rax,%rdi
   1c1ac:	e8 b9 08 00 00       	call   1ca6a <_ZSt10destroy_atIP18VkPhysicalDevice_TEvPT_>
    }
   1c1b1:	90                   	nop
   1c1b2:	c9                   	leave
   1c1b3:	c3                   	ret

000000000001c1b4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1c1b4:	55                   	push   %rbp
   1c1b5:	48 89 e5             	mov    %rsp,%rbp
   1c1b8:	48 83 ec 20          	sub    $0x20,%rsp
   1c1bc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c1c0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1c1c4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1c1c9:	74 40                	je     1c20b <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1c1cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c1cf:	48 89 c7             	mov    %rax,%rdi
   1c1d2:	e8 b4 ff ff ff       	call   1c18b <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1c1d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1c1db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c1df:	48 89 c7             	mov    %rax,%rdi
   1c1e2:	e8 8e 08 00 00       	call   1ca75 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>
	      ++__first;
   1c1e7:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1c1ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c1f0:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1c1f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c1f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c1fc:	48 89 ce             	mov    %rcx,%rsi
   1c1ff:	48 89 c7             	mov    %rax,%rdi
   1c202:	e8 ab 08 00 00       	call   1cab2 <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>
   1c207:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1c20b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1c20f:	c9                   	leave
   1c210:	c3                   	ret

000000000001c211 <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>:
    __niter_base(_Iterator __it)
   1c211:	55                   	push   %rbp
   1c212:	48 89 e5             	mov    %rsp,%rbp
   1c215:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1c219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c21d:	5d                   	pop    %rbp
   1c21e:	c3                   	ret
   1c21f:	90                   	nop

000000000001c220 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1c220:	55                   	push   %rbp
   1c221:	48 89 e5             	mov    %rsp,%rbp
   1c224:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c228:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1c22c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c230:	48 8b 10             	mov    (%rax),%rdx
   1c233:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c237:	48 89 10             	mov    %rdx,(%rax)
   1c23a:	90                   	nop
   1c23b:	5d                   	pop    %rbp
   1c23c:	c3                   	ret

000000000001c23d <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1c23d:	55                   	push   %rbp
   1c23e:	48 89 e5             	mov    %rsp,%rbp
   1c241:	48 83 ec 30          	sub    $0x30,%rsp
   1c245:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c249:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c24d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1c251:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1c255:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c259:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1c25d:	48 c1 f8 03          	sar    $0x3,%rax
   1c261:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1c265:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1c26a:	7e 68                	jle    1c2d4 <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x97>
	  if (std::is_constant_evaluated())
   1c26c:	e8 38 9f fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   1c271:	84 c0                	test   %al,%al
   1c273:	74 40                	je     1c2b5 <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x78>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
   1c275:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   1c279:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1c27d:	48 89 d6             	mov    %rdx,%rsi
   1c280:	48 89 c7             	mov    %rax,%rdi
   1c283:	e8 98 ff ff ff       	call   1c220 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEC1ERKS3_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
   1c288:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1c28c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c290:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1c294:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c298:	48 89 c7             	mov    %rax,%rdi
   1c29b:	e8 b7 08 00 00       	call   1cb57 <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>
   1c2a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      return __out.base();
   1c2a4:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1c2a8:	48 89 c7             	mov    %rax,%rdi
   1c2ab:	e8 28 09 00 00       	call   1cbd8 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvE4baseEv>
   1c2b0:	48 8b 00             	mov    (%rax),%rax
   1c2b3:	eb 2e                	jmp    1c2e3 <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0xa6>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1c2b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c2b9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1c2c0:	00 
   1c2c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c2c5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1c2c9:	48 89 ce             	mov    %rcx,%rsi
   1c2cc:	48 89 c7             	mov    %rax,%rdi
   1c2cf:	e8 8c 90 fe ff       	call   5360 <memmove@plt>
      return __result + __count;
   1c2d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c2d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c2dc:	48 c1 e2 03          	shl    $0x3,%rdx
   1c2e0:	48 01 d0             	add    %rdx,%rax
    }
   1c2e3:	c9                   	leave
   1c2e4:	c3                   	ret
   1c2e5:	90                   	nop

000000000001c2e6 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1c2e6:	55                   	push   %rbp
   1c2e7:	48 89 e5             	mov    %rsp,%rbp
   1c2ea:	48 83 ec 20          	sub    $0x20,%rsp
   1c2ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c2f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c2f6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1c2fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c2fe:	48 89 c7             	mov    %rax,%rdi
   1c301:	e8 e0 08 00 00       	call   1cbe6 <_ZNKSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE11_M_max_sizeEv>
   1c306:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c30a:	0f 92 c0             	setb   %al
   1c30d:	0f b6 c0             	movzbl %al,%eax
   1c310:	48 85 c0             	test   %rax,%rax
   1c313:	0f 95 c0             	setne  %al
   1c316:	84 c0                	test   %al,%al
   1c318:	74 1a                	je     1c334 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1c31a:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1c321:	ff ff 0f 
   1c324:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c328:	73 05                	jae    1c32f <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1c32a:	e8 51 8e fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1c32f:	e8 4c 8d fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c334:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c338:	48 c1 e0 04          	shl    $0x4,%rax
   1c33c:	48 89 c7             	mov    %rax,%rdi
   1c33f:	e8 dc 8e fe ff       	call   5220 <_Znwm@plt>
   1c344:	90                   	nop
      }
   1c345:	c9                   	leave
   1c346:	c3                   	ret

000000000001c347 <_ZSt19__relocate_object_aIN2vk4raii14PhysicalDeviceES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1c347:	55                   	push   %rbp
   1c348:	48 89 e5             	mov    %rsp,%rbp
   1c34b:	48 83 ec 20          	sub    $0x20,%rsp
   1c34f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c353:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c357:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1c35b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c35f:	48 89 c7             	mov    %rax,%rdi
   1c362:	e8 93 08 00 00       	call   1cbfa <_ZSt4moveIRN2vk4raii14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS5_>
   1c367:	48 89 c2             	mov    %rax,%rdx
   1c36a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1c36e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c372:	48 89 ce             	mov    %rcx,%rsi
   1c375:	48 89 c7             	mov    %rax,%rdi
   1c378:	e8 8b 08 00 00       	call   1cc08 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1c37d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c381:	48 89 c7             	mov    %rax,%rdi
   1c384:	e8 a7 fd ff ff       	call   1c130 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1c389:	48 89 c2             	mov    %rax,%rdx
   1c38c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c390:	48 89 d6             	mov    %rdx,%rsi
   1c393:	48 89 c7             	mov    %rax,%rdi
   1c396:	e8 d6 e1 ff ff       	call   1a571 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE7destroyIS2_EEvRS3_PT_>
    }
   1c39b:	90                   	nop
   1c39c:	c9                   	leave
   1c39d:	c3                   	ret

000000000001c39e <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EEC1Ev>:
      constexpr _Head_base()
   1c39e:	55                   	push   %rbp
   1c39f:	48 89 e5             	mov    %rsp,%rbp
   1c3a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   1c3a6:	90                   	nop
   1c3a7:	5d                   	pop    %rbp
   1c3a8:	c3                   	ret
   1c3a9:	90                   	nop

000000000001c3aa <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1c3aa:	55                   	push   %rbp
   1c3ab:	48 89 e5             	mov    %rsp,%rbp
   1c3ae:	48 83 ec 20          	sub    $0x20,%rsp
   1c3b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c3b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c3ba:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c3be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c3c2:	48 89 d0             	mov    %rdx,%rax
   1c3c5:	48 01 c0             	add    %rax,%rax
   1c3c8:	48 01 d0             	add    %rdx,%rax
   1c3cb:	48 c1 e0 03          	shl    $0x3,%rax
   1c3cf:	48 89 c2             	mov    %rax,%rdx
   1c3d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c3d6:	48 89 d6             	mov    %rdx,%rsi
   1c3d9:	48 89 c7             	mov    %rax,%rdi
   1c3dc:	e8 4f 8e fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1c3e1:	c9                   	leave
   1c3e2:	c3                   	ret

000000000001c3e3 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1c3e3:	55                   	push   %rbp
   1c3e4:	48 89 e5             	mov    %rsp,%rbp
   1c3e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1c3eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c3ef:	5d                   	pop    %rbp
   1c3f0:	c3                   	ret

000000000001c3f1 <_ZSt8_DestroyIN2vk21QueueFamilyPropertiesEEvPT_>:
    _Destroy(_Tp* __pointer)
   1c3f1:	55                   	push   %rbp
   1c3f2:	48 89 e5             	mov    %rsp,%rbp
   1c3f5:	48 83 ec 10          	sub    $0x10,%rsp
   1c3f9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1c3fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c401:	48 89 c7             	mov    %rax,%rdi
   1c404:	e8 34 08 00 00       	call   1cc3d <_ZSt10destroy_atIN2vk21QueueFamilyPropertiesEEvPT_>
    }
   1c409:	90                   	nop
   1c40a:	c9                   	leave
   1c40b:	c3                   	ret

000000000001c40c <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1c40c:	55                   	push   %rbp
   1c40d:	48 89 e5             	mov    %rsp,%rbp
   1c410:	48 83 ec 20          	sub    $0x20,%rsp
   1c414:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c418:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   1c41c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c420:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   1c424:	eb 1e                	jmp    1c444 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_+0x38>
		std::_Construct(std::__addressof(*__cur));
   1c426:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c42a:	48 89 c7             	mov    %rax,%rdi
   1c42d:	e8 b1 ff ff ff       	call   1c3e3 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1c432:	48 89 c7             	mov    %rax,%rdi
   1c435:	e8 60 08 00 00       	call   1cc9a <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   1c43a:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   1c43f:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
   1c444:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1c449:	75 db                	jne    1c426 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_+0x1a>
	      return __cur;
   1c44b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1c44f:	c9                   	leave
   1c450:	c3                   	ret

000000000001c451 <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>:
    __niter_base(_Iterator __it)
   1c451:	55                   	push   %rbp
   1c452:	48 89 e5             	mov    %rsp,%rbp
   1c455:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1c459:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c45d:	5d                   	pop    %rbp
   1c45e:	c3                   	ret

000000000001c45f <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1c45f:	55                   	push   %rbp
   1c460:	48 89 e5             	mov    %rsp,%rbp
   1c463:	53                   	push   %rbx
   1c464:	48 83 ec 38          	sub    $0x38,%rsp
   1c468:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c46c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c470:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c474:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1c478:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c47c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1c480:	eb 3a                	jmp    1c4bc <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x5d>
	std::__relocate_object_a(std::__addressof(*__cur),
   1c482:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c486:	48 89 c7             	mov    %rax,%rdi
   1c489:	e8 55 ff ff ff       	call   1c3e3 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1c48e:	48 89 c3             	mov    %rax,%rbx
   1c491:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c495:	48 89 c7             	mov    %rax,%rdi
   1c498:	e8 46 ff ff ff       	call   1c3e3 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1c49d:	48 89 c1             	mov    %rax,%rcx
   1c4a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c4a4:	48 89 c2             	mov    %rax,%rdx
   1c4a7:	48 89 de             	mov    %rbx,%rsi
   1c4aa:	48 89 cf             	mov    %rcx,%rdi
   1c4ad:	e8 ba 08 00 00       	call   1cd6c <_ZSt19__relocate_object_aIN2vk21QueueFamilyPropertiesES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1c4b2:	48 83 45 d8 18       	addq   $0x18,-0x28(%rbp)
   1c4b7:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
   1c4bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c4c0:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1c4c4:	75 bc                	jne    1c482 <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   1c4c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1c4ca:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c4ce:	c9                   	leave
   1c4cf:	c3                   	ret

000000000001c4d0 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1c4d0:	55                   	push   %rbp
   1c4d1:	48 89 e5             	mov    %rsp,%rbp
   1c4d4:	48 83 ec 20          	sub    $0x20,%rsp
   1c4d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c4dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c4e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c4e4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c4e8:	48 89 d0             	mov    %rdx,%rax
   1c4eb:	48 c1 e0 06          	shl    $0x6,%rax
   1c4ef:	48 01 d0             	add    %rdx,%rax
   1c4f2:	48 c1 e0 02          	shl    $0x2,%rax
   1c4f6:	48 89 c2             	mov    %rax,%rdx
   1c4f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c4fd:	48 89 d6             	mov    %rdx,%rsi
   1c500:	48 89 c7             	mov    %rax,%rdi
   1c503:	e8 28 8d fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1c508:	c9                   	leave
   1c509:	c3                   	ret

000000000001c50a <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1c50a:	55                   	push   %rbp
   1c50b:	48 89 e5             	mov    %rsp,%rbp
   1c50e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1c512:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c516:	5d                   	pop    %rbp
   1c517:	c3                   	ret

000000000001c518 <_ZSt8_DestroyIN2vk19ExtensionPropertiesEEvPT_>:
    _Destroy(_Tp* __pointer)
   1c518:	55                   	push   %rbp
   1c519:	48 89 e5             	mov    %rsp,%rbp
   1c51c:	48 83 ec 10          	sub    $0x10,%rsp
   1c520:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1c524:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c528:	48 89 c7             	mov    %rax,%rdi
   1c52b:	e8 93 08 00 00       	call   1cdc3 <_ZSt10destroy_atIN2vk19ExtensionPropertiesEEvPT_>
    }
   1c530:	90                   	nop
   1c531:	c9                   	leave
   1c532:	c3                   	ret

000000000001c533 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1c533:	55                   	push   %rbp
   1c534:	48 89 e5             	mov    %rsp,%rbp
   1c537:	48 83 ec 20          	sub    $0x20,%rsp
   1c53b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c53f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   1c543:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c547:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   1c54b:	eb 21                	jmp    1c56e <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_+0x3b>
		std::_Construct(std::__addressof(*__cur));
   1c54d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c551:	48 89 c7             	mov    %rax,%rdi
   1c554:	e8 b1 ff ff ff       	call   1c50a <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1c559:	48 89 c7             	mov    %rax,%rdi
   1c55c:	e8 96 08 00 00       	call   1cdf7 <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   1c561:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   1c566:	48 81 45 f8 04 01 00 	addq   $0x104,-0x8(%rbp)
   1c56d:	00 
   1c56e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1c573:	75 d8                	jne    1c54d <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_+0x1a>
	      return __cur;
   1c575:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1c579:	c9                   	leave
   1c57a:	c3                   	ret

000000000001c57b <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>:
    __niter_base(_Iterator __it)
   1c57b:	55                   	push   %rbp
   1c57c:	48 89 e5             	mov    %rsp,%rbp
   1c57f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1c583:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c587:	5d                   	pop    %rbp
   1c588:	c3                   	ret

000000000001c589 <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1c589:	55                   	push   %rbp
   1c58a:	48 89 e5             	mov    %rsp,%rbp
   1c58d:	53                   	push   %rbx
   1c58e:	48 83 ec 38          	sub    $0x38,%rsp
   1c592:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c596:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c59a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c59e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1c5a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c5a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1c5aa:	eb 40                	jmp    1c5ec <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x63>
	std::__relocate_object_a(std::__addressof(*__cur),
   1c5ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c5b0:	48 89 c7             	mov    %rax,%rdi
   1c5b3:	e8 52 ff ff ff       	call   1c50a <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1c5b8:	48 89 c3             	mov    %rax,%rbx
   1c5bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c5bf:	48 89 c7             	mov    %rax,%rdi
   1c5c2:	e8 43 ff ff ff       	call   1c50a <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1c5c7:	48 89 c1             	mov    %rax,%rcx
   1c5ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c5ce:	48 89 c2             	mov    %rax,%rdx
   1c5d1:	48 89 de             	mov    %rbx,%rsi
   1c5d4:	48 89 cf             	mov    %rcx,%rdi
   1c5d7:	e8 05 09 00 00       	call   1cee1 <_ZSt19__relocate_object_aIN2vk19ExtensionPropertiesES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1c5dc:	48 81 45 d8 04 01 00 	addq   $0x104,-0x28(%rbp)
   1c5e3:	00 
   1c5e4:	48 81 45 e8 04 01 00 	addq   $0x104,-0x18(%rbp)
   1c5eb:	00 
   1c5ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c5f0:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1c5f4:	75 b6                	jne    1c5ac <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   1c5f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1c5fa:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c5fe:	c9                   	leave
   1c5ff:	c3                   	ret

000000000001c600 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1c600:	55                   	push   %rbp
   1c601:	48 89 e5             	mov    %rsp,%rbp
   1c604:	48 83 ec 20          	sub    $0x20,%rsp
   1c608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c60c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c610:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c614:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c618:	48 89 d0             	mov    %rdx,%rax
   1c61b:	48 c1 e0 06          	shl    $0x6,%rax
   1c61f:	48 01 d0             	add    %rdx,%rax
   1c622:	48 c1 e0 03          	shl    $0x3,%rax
   1c626:	48 89 c2             	mov    %rax,%rdx
   1c629:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c62d:	48 89 d6             	mov    %rdx,%rsi
   1c630:	48 89 c7             	mov    %rax,%rdi
   1c633:	e8 f8 8b fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1c638:	c9                   	leave
   1c639:	c3                   	ret

000000000001c63a <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1c63a:	55                   	push   %rbp
   1c63b:	48 89 e5             	mov    %rsp,%rbp
   1c63e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1c642:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c646:	5d                   	pop    %rbp
   1c647:	c3                   	ret

000000000001c648 <_ZSt8_DestroyIN2vk15LayerPropertiesEEvPT_>:
    _Destroy(_Tp* __pointer)
   1c648:	55                   	push   %rbp
   1c649:	48 89 e5             	mov    %rsp,%rbp
   1c64c:	48 83 ec 10          	sub    $0x10,%rsp
   1c650:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1c654:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c658:	48 89 c7             	mov    %rax,%rdi
   1c65b:	e8 d8 08 00 00       	call   1cf38 <_ZSt10destroy_atIN2vk15LayerPropertiesEEvPT_>
    }
   1c660:	90                   	nop
   1c661:	c9                   	leave
   1c662:	c3                   	ret

000000000001c663 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1c663:	55                   	push   %rbp
   1c664:	48 89 e5             	mov    %rsp,%rbp
   1c667:	48 83 ec 20          	sub    $0x20,%rsp
   1c66b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c66f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   1c673:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c677:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   1c67b:	eb 21                	jmp    1c69e <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_+0x3b>
		std::_Construct(std::__addressof(*__cur));
   1c67d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c681:	48 89 c7             	mov    %rax,%rdi
   1c684:	e8 b1 ff ff ff       	call   1c63a <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1c689:	48 89 c7             	mov    %rax,%rdi
   1c68c:	e8 fc 08 00 00       	call   1cf8d <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   1c691:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   1c696:	48 81 45 f8 08 02 00 	addq   $0x208,-0x8(%rbp)
   1c69d:	00 
   1c69e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1c6a3:	75 d8                	jne    1c67d <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_+0x1a>
	      return __cur;
   1c6a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1c6a9:	c9                   	leave
   1c6aa:	c3                   	ret

000000000001c6ab <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>:
    __niter_base(_Iterator __it)
   1c6ab:	55                   	push   %rbp
   1c6ac:	48 89 e5             	mov    %rsp,%rbp
   1c6af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1c6b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c6b7:	5d                   	pop    %rbp
   1c6b8:	c3                   	ret

000000000001c6b9 <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1c6b9:	55                   	push   %rbp
   1c6ba:	48 89 e5             	mov    %rsp,%rbp
   1c6bd:	53                   	push   %rbx
   1c6be:	48 83 ec 38          	sub    $0x38,%rsp
   1c6c2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c6c6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c6ca:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c6ce:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1c6d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c6d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1c6da:	eb 40                	jmp    1c71c <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x63>
	std::__relocate_object_a(std::__addressof(*__cur),
   1c6dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c6e0:	48 89 c7             	mov    %rax,%rdi
   1c6e3:	e8 52 ff ff ff       	call   1c63a <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1c6e8:	48 89 c3             	mov    %rax,%rbx
   1c6eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c6ef:	48 89 c7             	mov    %rax,%rdi
   1c6f2:	e8 43 ff ff ff       	call   1c63a <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1c6f7:	48 89 c1             	mov    %rax,%rcx
   1c6fa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c6fe:	48 89 c2             	mov    %rax,%rdx
   1c701:	48 89 de             	mov    %rbx,%rsi
   1c704:	48 89 cf             	mov    %rcx,%rdi
   1c707:	e8 6b 09 00 00       	call   1d077 <_ZSt19__relocate_object_aIN2vk15LayerPropertiesES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1c70c:	48 81 45 d8 08 02 00 	addq   $0x208,-0x28(%rbp)
   1c713:	00 
   1c714:	48 81 45 e8 08 02 00 	addq   $0x208,-0x18(%rbp)
   1c71b:	00 
   1c71c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c720:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1c724:	75 b6                	jne    1c6dc <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   1c726:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1c72a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c72e:	c9                   	leave
   1c72f:	c3                   	ret

000000000001c730 <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1c730:	55                   	push   %rbp
   1c731:	48 89 e5             	mov    %rsp,%rbp
   1c734:	48 83 ec 20          	sub    $0x20,%rsp
   1c738:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c73c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c740:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c744:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c748:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1c74f:	00 
   1c750:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c754:	48 89 d6             	mov    %rdx,%rsi
   1c757:	48 89 c7             	mov    %rax,%rdi
   1c75a:	e8 d1 8a fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1c75f:	c9                   	leave
   1c760:	c3                   	ret

000000000001c761 <_ZSt12__niter_baseIPKPKcET_S4_>:
    __niter_base(_Iterator __it)
   1c761:	55                   	push   %rbp
   1c762:	48 89 e5             	mov    %rsp,%rbp
   1c765:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1c769:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c76d:	5d                   	pop    %rbp
   1c76e:	c3                   	ret

000000000001c76f <_ZSt12__niter_baseIPPKcET_S3_>:
    __niter_base(_Iterator __it)
   1c76f:	55                   	push   %rbp
   1c770:	48 89 e5             	mov    %rsp,%rbp
   1c773:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1c777:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c77b:	5d                   	pop    %rbp
   1c77c:	c3                   	ret

000000000001c77d <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   1c77d:	55                   	push   %rbp
   1c77e:	48 89 e5             	mov    %rsp,%rbp
   1c781:	48 83 ec 20          	sub    $0x20,%rsp
   1c785:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c789:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c78d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   1c791:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c795:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c799:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c79d:	48 89 ce             	mov    %rcx,%rsi
   1c7a0:	48 89 c7             	mov    %rax,%rdi
   1c7a3:	e8 26 09 00 00       	call   1d0ce <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   1c7a8:	c9                   	leave
   1c7a9:	c3                   	ret

000000000001c7aa <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   1c7aa:	55                   	push   %rbp
   1c7ab:	48 89 e5             	mov    %rsp,%rbp
   1c7ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c7b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
   1c7b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c7ba:	5d                   	pop    %rbp
   1c7bb:	c3                   	ret

000000000001c7bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
   1c7bc:	55                   	push   %rbp
   1c7bd:	48 89 e5             	mov    %rsp,%rbp
   1c7c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1c7c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c7c8:	5d                   	pop    %rbp
   1c7c9:	c3                   	ret

000000000001c7ca <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1c7ca:	55                   	push   %rbp
   1c7cb:	48 89 e5             	mov    %rsp,%rbp
   1c7ce:	48 83 ec 10          	sub    $0x10,%rsp
   1c7d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c7d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1c7da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c7de:	48 89 c7             	mov    %rax,%rdi
   1c7e1:	e8 53 09 00 00       	call   1d139 <_ZSt10destroy_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEvPT_>
	}
   1c7e6:	90                   	nop
   1c7e7:	c9                   	leave
   1c7e8:	c3                   	ret

000000000001c7e9 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1c7e9:	55                   	push   %rbp
   1c7ea:	48 89 e5             	mov    %rsp,%rbp
   1c7ed:	48 83 ec 40          	sub    $0x40,%rsp
   1c7f1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c7f5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c7f9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c7fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c801:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c805:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c809:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c80d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c811:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1c815:	e8 84 99 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1c81a:	84 c0                	test   %al,%al
   1c81c:	74 0e                	je     1c82c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m+0x43>
	    ::operator delete(__p);
   1c81e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c822:	48 89 c7             	mov    %rax,%rdi
   1c825:	e8 c6 89 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1c82a:	eb 18                	jmp    1c844 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1c82c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c830:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c838:	48 89 ce             	mov    %rcx,%rsi
   1c83b:	48 89 c7             	mov    %rax,%rdi
   1c83e:	e8 e5 0e 00 00       	call   1d728 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>
      { __a.deallocate(__p, __n); }
   1c843:	90                   	nop
   1c844:	90                   	nop
   1c845:	c9                   	leave
   1c846:	c3                   	ret
   1c847:	90                   	nop

000000000001c848 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() noexcept
   1c848:	55                   	push   %rbp
   1c849:	48 89 e5             	mov    %rsp,%rbp
   1c84c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
   1c850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c854:	5d                   	pop    %rbp
   1c855:	c3                   	ret

000000000001c856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm>:
      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
   1c856:	55                   	push   %rbp
   1c857:	48 89 e5             	mov    %rsp,%rbp
   1c85a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c85e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const difference_type __d = difference_type(__n1 - __n2);
   1c862:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c866:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1c86a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   1c86e:	b8 00 00 00 80       	mov    $0x80000000,%eax
   1c873:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1c877:	7c 07                	jl     1c880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x2a>
	  return __gnu_cxx::__numeric_traits<int>::__max;
   1c879:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1c87e:	eb 1b                	jmp    1c89b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x45>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   1c880:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
   1c887:	ff ff ff 
   1c88a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1c88e:	7f 07                	jg     1c897 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x41>
	  return __gnu_cxx::__numeric_traits<int>::__min;
   1c890:	b8 00 00 00 80       	mov    $0x80000000,%eax
   1c895:	eb 04                	jmp    1c89b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x45>
	  return int(__d);
   1c897:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1c89b:	5d                   	pop    %rbp
   1c89c:	c3                   	ret
   1c89d:	90                   	nop

000000000001c89e <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
   1c89e:	55                   	push   %rbp
   1c89f:	48 89 e5             	mov    %rsp,%rbp
   1c8a2:	48 83 ec 10          	sub    $0x10,%rsp
   1c8a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c8aa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   1c8ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c8b2:	48 89 c7             	mov    %rax,%rdi
   1c8b5:	e8 50 e3 ff ff       	call   1ac0a <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1c8ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c8be:	48 89 02             	mov    %rax,(%rdx)
   1c8c1:	90                   	nop
   1c8c2:	c9                   	leave
   1c8c3:	c3                   	ret

000000000001c8c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
   1c8c4:	55                   	push   %rbp
   1c8c5:	48 89 e5             	mov    %rsp,%rbp
   1c8c8:	48 83 ec 10          	sub    $0x10,%rsp
   1c8cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
   1c8d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c8d4:	48 89 c7             	mov    %rax,%rdi
   1c8d7:	e8 e0 fe ff ff       	call   1c7bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1c8dc:	be 01 00 00 00       	mov    $0x1,%esi
   1c8e1:	48 89 c7             	mov    %rax,%rdi
   1c8e4:	e8 6b 08 00 00       	call   1d154 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>
   1c8e9:	c9                   	leave
   1c8ea:	c3                   	ret
   1c8eb:	90                   	nop

000000000001c8ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
   1c8ec:	55                   	push   %rbp
   1c8ed:	48 89 e5             	mov    %rsp,%rbp
   1c8f0:	41 56                	push   %r14
   1c8f2:	41 55                	push   %r13
   1c8f4:	41 54                	push   %r12
   1c8f6:	53                   	push   %rbx
   1c8f7:	48 83 ec 30          	sub    $0x30,%rsp
   1c8fb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c8ff:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c903:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c907:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   1c90b:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	      ::new(__node) _Rb_tree_node<_Val>;
   1c90f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c913:	48 89 c6             	mov    %rax,%rsi
   1c916:	bf 48 00 00 00       	mov    $0x48,%edi
   1c91b:	e8 94 98 fe ff       	call   61b4 <_ZnwmPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
   1c920:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1c924:	48 89 c7             	mov    %rax,%rdi
   1c927:	e8 3b e3 ff ff       	call   1ac67 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1c92c:	49 89 c6             	mov    %rax,%r14
   1c92f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c933:	48 89 c7             	mov    %rax,%rdi
   1c936:	e8 1e e3 ff ff       	call   1ac59 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1c93b:	49 89 c5             	mov    %rax,%r13
   1c93e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c942:	48 89 c7             	mov    %rax,%rdi
   1c945:	e8 01 e3 ff ff       	call   1ac4b <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1c94a:	49 89 c4             	mov    %rax,%r12
   1c94d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c951:	48 89 c7             	mov    %rax,%rdi
   1c954:	e8 67 e2 ff ff       	call   1abc0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1c959:	48 89 c3             	mov    %rax,%rbx
   1c95c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c960:	48 89 c7             	mov    %rax,%rdi
   1c963:	e8 54 fe ff ff       	call   1c7bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1c968:	4d 89 f0             	mov    %r14,%r8
   1c96b:	4c 89 e9             	mov    %r13,%rcx
   1c96e:	4c 89 e2             	mov    %r12,%rdx
   1c971:	48 89 de             	mov    %rbx,%rsi
   1c974:	48 89 c7             	mov    %rax,%rdi
   1c977:	e8 55 08 00 00       	call   1d1d1 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>
	}
   1c97c:	eb 33                	jmp    1c9b1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_+0xc5>
	  __catch(...)
   1c97e:	48 89 c7             	mov    %rax,%rdi
   1c981:	e8 1a 87 fe ff       	call   50a0 <__cxa_begin_catch@plt>
	      _M_put_node(__node);
   1c986:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1c98a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c98e:	48 89 d6             	mov    %rdx,%rsi
   1c991:	48 89 c7             	mov    %rax,%rdi
   1c994:	e8 51 f1 ff ff       	call   1baea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
	      __throw_exception_again;
   1c999:	e8 72 89 fe ff       	call   5310 <__cxa_rethrow@plt>
	  __catch(...)
   1c99e:	48 89 c3             	mov    %rax,%rbx
   1c9a1:	e8 ca 89 fe ff       	call   5370 <__cxa_end_catch@plt>
   1c9a6:	48 89 d8             	mov    %rbx,%rax
   1c9a9:	48 89 c7             	mov    %rax,%rdi
   1c9ac:	e8 ef 89 fe ff       	call   53a0 <_Unwind_Resume@plt>
	}
   1c9b1:	48 83 c4 30          	add    $0x30,%rsp
   1c9b5:	5b                   	pop    %rbx
   1c9b6:	41 5c                	pop    %r12
   1c9b8:	41 5d                	pop    %r13
   1c9ba:	41 5e                	pop    %r14
   1c9bc:	5d                   	pop    %rbp
   1c9bd:	c3                   	ret

000000000001c9be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1c9be:	55                   	push   %rbp
   1c9bf:	48 89 e5             	mov    %rsp,%rbp
   1c9c2:	48 83 ec 20          	sub    $0x20,%rsp
   1c9c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_header._M_left); }
   1c9ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c9ce:	48 8b 50 18          	mov    0x18(%rax),%rdx
   1c9d2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1c9d6:	48 89 d6             	mov    %rdx,%rsi
   1c9d9:	48 89 c7             	mov    %rax,%rdi
   1c9dc:	e8 09 e8 ff ff       	call   1b1ea <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1c9e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c9e5:	c9                   	leave
   1c9e6:	c3                   	ret
   1c9e7:	90                   	nop

000000000001c9e8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
   1c9e8:	55                   	push   %rbp
   1c9e9:	48 89 e5             	mov    %rsp,%rbp
   1c9ec:	48 83 ec 20          	sub    $0x20,%rsp
   1c9f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c9f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c9f8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
   1c9fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ca00:	48 89 c7             	mov    %rax,%rdi
   1ca03:	e8 31 08 00 00       	call   1d239 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>
   1ca08:	48 8b 10             	mov    (%rax),%rdx
   1ca0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca0f:	48 89 10             	mov    %rdx,(%rax)
   1ca12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ca16:	48 89 c7             	mov    %rax,%rdi
   1ca19:	e8 0e 00 00 00       	call   1ca2c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1ca1e:	48 8b 10             	mov    (%rax),%rdx
   1ca21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca25:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
   1ca29:	90                   	nop
   1ca2a:	c9                   	leave
   1ca2b:	c3                   	ret

000000000001ca2c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1ca2c:	55                   	push   %rbp
   1ca2d:	48 89 e5             	mov    %rsp,%rbp
   1ca30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1ca34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca38:	5d                   	pop    %rbp
   1ca39:	c3                   	ret

000000000001ca3a <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr() const
   1ca3a:	55                   	push   %rbp
   1ca3b:	48 89 e5             	mov    %rsp,%rbp
   1ca3e:	48 83 ec 10          	sub    $0x10,%rsp
   1ca42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   1ca46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca4a:	48 83 c0 20          	add    $0x20,%rax
   1ca4e:	48 89 c7             	mov    %rax,%rdi
   1ca51:	e8 f2 07 00 00       	call   1d248 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   1ca56:	c9                   	leave
   1ca57:	c3                   	ret

000000000001ca58 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
   1ca58:	55                   	push   %rbp
   1ca59:	48 89 e5             	mov    %rsp,%rbp
   1ca5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ca60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x.first; }
   1ca64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ca68:	5d                   	pop    %rbp
   1ca69:	c3                   	ret

000000000001ca6a <_ZSt10destroy_atIP18VkPhysicalDevice_TEvPT_>:
    destroy_at(_Tp* __location)
   1ca6a:	55                   	push   %rbp
   1ca6b:	48 89 e5             	mov    %rsp,%rbp
   1ca6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1ca72:	90                   	nop
   1ca73:	5d                   	pop    %rbp
   1ca74:	c3                   	ret

000000000001ca75 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1ca75:	55                   	push   %rbp
   1ca76:	48 89 e5             	mov    %rsp,%rbp
   1ca79:	48 83 ec 10          	sub    $0x10,%rsp
   1ca7d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1ca81:	e8 18 97 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1ca86:	84 c0                	test   %al,%al
   1ca88:	74 0e                	je     1ca98 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1ca8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca8e:	48 89 c7             	mov    %rax,%rdi
   1ca91:	e8 cc 07 00 00       	call   1d262 <_ZSt12construct_atIP18VkPhysicalDevice_TJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1ca96:	eb 18                	jmp    1cab0 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_+0x3b>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ca98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca9c:	48 89 c6             	mov    %rax,%rsi
   1ca9f:	bf 08 00 00 00       	mov    $0x8,%edi
   1caa4:	e8 0b 97 fe ff       	call   61b4 <_ZnwmPv>
   1caa9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1cab0:	c9                   	leave
   1cab1:	c3                   	ret

000000000001cab2 <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1cab2:	55                   	push   %rbp
   1cab3:	48 89 e5             	mov    %rsp,%rbp
   1cab6:	48 83 ec 20          	sub    $0x20,%rsp
   1caba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cabe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cac2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
			       std::__iterator_category(__first));
   1cac6:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1caca:	48 89 c7             	mov    %rax,%rdi
   1cacd:	e8 b6 07 00 00       	call   1d288 <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1cad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cad6:	48 89 c7             	mov    %rax,%rdi
   1cad9:	e8 52 2c ff ff       	call   f730 <_ZSt17__size_to_integerm>
   1cade:	48 89 c1             	mov    %rax,%rcx
   1cae1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cae5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1cae9:	48 89 ce             	mov    %rcx,%rsi
   1caec:	48 89 c7             	mov    %rax,%rdi
   1caef:	e8 9f 07 00 00       	call   1d293 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1caf4:	c9                   	leave
   1caf5:	c3                   	ret

000000000001caf6 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1caf6:	55                   	push   %rbp
   1caf7:	48 89 e5             	mov    %rsp,%rbp
   1cafa:	48 83 ec 20          	sub    $0x20,%rsp
   1cafe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cb02:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cb06:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1cb0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb0e:	48 89 c7             	mov    %rax,%rdi
   1cb11:	e8 da 07 00 00       	call   1d2f0 <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>
   1cb16:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1cb1a:	0f 92 c0             	setb   %al
   1cb1d:	0f b6 c0             	movzbl %al,%eax
   1cb20:	48 85 c0             	test   %rax,%rax
   1cb23:	0f 95 c0             	setne  %al
   1cb26:	84 c0                	test   %al,%al
   1cb28:	74 1a                	je     1cb44 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1cb2a:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1cb31:	ff ff 1f 
   1cb34:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1cb38:	73 05                	jae    1cb3f <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1cb3a:	e8 41 86 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1cb3f:	e8 3c 85 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1cb44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cb48:	48 c1 e0 03          	shl    $0x3,%rax
   1cb4c:	48 89 c7             	mov    %rax,%rdi
   1cb4f:	e8 cc 86 fe ff       	call   5220 <_Znwm@plt>
   1cb54:	90                   	nop
      }
   1cb55:	c9                   	leave
   1cb56:	c3                   	ret

000000000001cb57 <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1cb57:	55                   	push   %rbp
   1cb58:	48 89 e5             	mov    %rsp,%rbp
   1cb5b:	53                   	push   %rbx
   1cb5c:	48 83 ec 38          	sub    $0x38,%rsp
   1cb60:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1cb64:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1cb68:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1cb6c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1cb70:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1cb74:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1cb78:	eb 49                	jmp    1cbc3 <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x6c>
	std::__relocate_object_a(std::__addressof(*__cur),
   1cb7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1cb7e:	48 89 c7             	mov    %rax,%rdi
   1cb81:	e8 05 f6 ff ff       	call   1c18b <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1cb86:	48 89 c3             	mov    %rax,%rbx
   1cb89:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1cb8d:	48 89 c7             	mov    %rax,%rdi
   1cb90:	e8 8f 07 00 00       	call   1d324 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEdeEv>
   1cb95:	48 89 c7             	mov    %rax,%rdi
   1cb98:	e8 ee f5 ff ff       	call   1c18b <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1cb9d:	48 89 c1             	mov    %rax,%rcx
   1cba0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1cba4:	48 89 c2             	mov    %rax,%rdx
   1cba7:	48 89 de             	mov    %rbx,%rsi
   1cbaa:	48 89 cf             	mov    %rcx,%rdi
   1cbad:	e8 83 07 00 00       	call   1d335 <_ZSt19__relocate_object_aIP18VkPhysicalDevice_TS1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1cbb2:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
   1cbb7:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1cbbb:	48 89 c7             	mov    %rax,%rdi
   1cbbe:	e8 41 07 00 00       	call   1d304 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEppEv>
   1cbc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1cbc7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1cbcb:	75 ad                	jne    1cb7a <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x23>
      return __cur;
   1cbcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1cbd1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1cbd5:	c9                   	leave
   1cbd6:	c3                   	ret
   1cbd7:	90                   	nop

000000000001cbd8 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1cbd8:	55                   	push   %rbp
   1cbd9:	48 89 e5             	mov    %rsp,%rbp
   1cbdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1cbe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cbe4:	5d                   	pop    %rbp
   1cbe5:	c3                   	ret

000000000001cbe6 <_ZNKSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1cbe6:	55                   	push   %rbp
   1cbe7:	48 89 e5             	mov    %rsp,%rbp
   1cbea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1cbee:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
   1cbf5:	ff ff 07 
      }
   1cbf8:	5d                   	pop    %rbp
   1cbf9:	c3                   	ret

000000000001cbfa <_ZSt4moveIRN2vk4raii14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
   1cbfa:	55                   	push   %rbp
   1cbfb:	48 89 e5             	mov    %rsp,%rbp
   1cbfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1cc02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc06:	5d                   	pop    %rbp
   1cc07:	c3                   	ret

000000000001cc08 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1cc08:	55                   	push   %rbp
   1cc09:	48 89 e5             	mov    %rsp,%rbp
   1cc0c:	48 83 ec 20          	sub    $0x20,%rsp
   1cc10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cc14:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cc18:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1cc1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cc20:	48 89 c7             	mov    %rax,%rdi
   1cc23:	e8 64 07 00 00       	call   1d38c <_ZSt7forwardIN2vk4raii14PhysicalDeviceEEOT_RNSt16remove_referenceIS3_E4typeE>
   1cc28:	48 89 c2             	mov    %rax,%rdx
   1cc2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cc2f:	48 89 d6             	mov    %rdx,%rsi
   1cc32:	48 89 c7             	mov    %rax,%rdi
   1cc35:	e8 60 07 00 00       	call   1d39a <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
   1cc3a:	90                   	nop
   1cc3b:	c9                   	leave
   1cc3c:	c3                   	ret

000000000001cc3d <_ZSt10destroy_atIN2vk21QueueFamilyPropertiesEEvPT_>:
    destroy_at(_Tp* __location)
   1cc3d:	55                   	push   %rbp
   1cc3e:	48 89 e5             	mov    %rsp,%rbp
   1cc41:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1cc45:	90                   	nop
   1cc46:	5d                   	pop    %rbp
   1cc47:	c3                   	ret

000000000001cc48 <_ZN2vk21QueueFamilyPropertiesC1Ev>:
  {
    using Type = QueueFamilyGlobalPriorityPropertiesKHR;
  };
  using QueueFamilyGlobalPriorityPropertiesEXT = QueueFamilyGlobalPriorityPropertiesKHR;

  struct QueueFamilyProperties
   1cc48:	55                   	push   %rbp
   1cc49:	48 89 e5             	mov    %rsp,%rbp
   1cc4c:	48 83 ec 10          	sub    $0x10,%rsp
   1cc50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cc54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc58:	48 89 c7             	mov    %rax,%rdi
   1cc5b:	e8 e8 aa ff ff       	call   17748 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ev>
   1cc60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc64:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   1cc6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc6f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
   1cc76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc7a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
   1cc81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc85:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
   1cc8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc90:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
   1cc97:	90                   	nop
   1cc98:	c9                   	leave
   1cc99:	c3                   	ret

000000000001cc9a <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1cc9a:	55                   	push   %rbp
   1cc9b:	48 89 e5             	mov    %rsp,%rbp
   1cc9e:	48 83 ec 10          	sub    $0x10,%rsp
   1cca2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1cca6:	e8 f3 94 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1ccab:	84 c0                	test   %al,%al
   1ccad:	74 0e                	je     1ccbd <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1ccaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ccb3:	48 89 c7             	mov    %rax,%rdi
   1ccb6:	e8 24 07 00 00       	call   1d3df <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1ccbb:	eb 42                	jmp    1ccff <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_+0x65>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ccbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ccc1:	48 89 c6             	mov    %rax,%rsi
   1ccc4:	bf 18 00 00 00       	mov    $0x18,%edi
   1ccc9:	e8 e6 94 fe ff       	call   61b4 <_ZnwmPv>
   1ccce:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   1ccd4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   1ccdb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
   1cce2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
   1cce9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
   1ccf0:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
   1ccf7:	48 89 c7             	mov    %rax,%rdi
   1ccfa:	e8 49 ff ff ff       	call   1cc48 <_ZN2vk21QueueFamilyPropertiesC1Ev>
    }
   1ccff:	c9                   	leave
   1cd00:	c3                   	ret
   1cd01:	90                   	nop

000000000001cd02 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1cd02:	55                   	push   %rbp
   1cd03:	48 89 e5             	mov    %rsp,%rbp
   1cd06:	48 83 ec 20          	sub    $0x20,%rsp
   1cd0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cd0e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cd12:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1cd16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd1a:	48 89 c7             	mov    %rax,%rdi
   1cd1d:	e8 18 07 00 00       	call   1d43a <_ZNKSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE11_M_max_sizeEv>
   1cd22:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1cd26:	0f 92 c0             	setb   %al
   1cd29:	0f b6 c0             	movzbl %al,%eax
   1cd2c:	48 85 c0             	test   %rax,%rax
   1cd2f:	0f 95 c0             	setne  %al
   1cd32:	84 c0                	test   %al,%al
   1cd34:	74 1a                	je     1cd50 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1cd36:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
   1cd3d:	aa aa 0a 
   1cd40:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1cd44:	73 05                	jae    1cd4b <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1cd46:	e8 35 84 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1cd4b:	e8 30 83 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1cd50:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cd54:	48 89 d0             	mov    %rdx,%rax
   1cd57:	48 01 c0             	add    %rax,%rax
   1cd5a:	48 01 d0             	add    %rdx,%rax
   1cd5d:	48 c1 e0 03          	shl    $0x3,%rax
   1cd61:	48 89 c7             	mov    %rax,%rdi
   1cd64:	e8 b7 84 fe ff       	call   5220 <_Znwm@plt>
   1cd69:	90                   	nop
      }
   1cd6a:	c9                   	leave
   1cd6b:	c3                   	ret

000000000001cd6c <_ZSt19__relocate_object_aIN2vk21QueueFamilyPropertiesES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1cd6c:	55                   	push   %rbp
   1cd6d:	48 89 e5             	mov    %rsp,%rbp
   1cd70:	48 83 ec 20          	sub    $0x20,%rsp
   1cd74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cd78:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cd7c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1cd80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cd84:	48 89 c7             	mov    %rax,%rdi
   1cd87:	e8 c2 06 00 00       	call   1d44e <_ZSt4moveIRN2vk21QueueFamilyPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>
   1cd8c:	48 89 c2             	mov    %rax,%rdx
   1cd8f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1cd93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cd97:	48 89 ce             	mov    %rcx,%rsi
   1cd9a:	48 89 c7             	mov    %rax,%rdi
   1cd9d:	e8 ba 06 00 00       	call   1d45c <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1cda2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cda6:	48 89 c7             	mov    %rax,%rdi
   1cda9:	e8 35 f6 ff ff       	call   1c3e3 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1cdae:	48 89 c2             	mov    %rax,%rdx
   1cdb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cdb5:	48 89 d6             	mov    %rdx,%rsi
   1cdb8:	48 89 c7             	mov    %rax,%rdi
   1cdbb:	e8 d1 06 00 00       	call   1d491 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE7destroyIS1_EEvRS2_PT_>
    }
   1cdc0:	90                   	nop
   1cdc1:	c9                   	leave
   1cdc2:	c3                   	ret

000000000001cdc3 <_ZSt10destroy_atIN2vk19ExtensionPropertiesEEvPT_>:
    destroy_at(_Tp* __location)
   1cdc3:	55                   	push   %rbp
   1cdc4:	48 89 e5             	mov    %rsp,%rbp
   1cdc7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1cdcb:	90                   	nop
   1cdcc:	5d                   	pop    %rbp
   1cdcd:	c3                   	ret

000000000001cdce <_ZN2vk19ExtensionPropertiesC1Ev>:
  struct ExtensionProperties
   1cdce:	55                   	push   %rbp
   1cdcf:	48 89 e5             	mov    %rsp,%rbp
   1cdd2:	48 83 ec 10          	sub    $0x10,%rsp
   1cdd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cdda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cdde:	48 89 c7             	mov    %rax,%rdi
   1cde1:	e8 16 9e ff ff       	call   16bfc <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>
   1cde6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cdea:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%rax)
   1cdf1:	00 00 00 
   1cdf4:	90                   	nop
   1cdf5:	c9                   	leave
   1cdf6:	c3                   	ret

000000000001cdf7 <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1cdf7:	55                   	push   %rbp
   1cdf8:	48 89 e5             	mov    %rsp,%rbp
   1cdfb:	48 83 ec 10          	sub    $0x10,%rsp
   1cdff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1ce03:	e8 96 93 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1ce08:	84 c0                	test   %al,%al
   1ce0a:	74 0e                	je     1ce1a <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1ce0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ce10:	48 89 c7             	mov    %rax,%rdi
   1ce13:	e8 98 06 00 00       	call   1d4b0 <_ZSt12construct_atIN2vk19ExtensionPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1ce18:	eb 59                	jmp    1ce73 <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_+0x7c>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ce1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ce1e:	48 89 c6             	mov    %rax,%rsi
   1ce21:	bf 04 01 00 00       	mov    $0x104,%edi
   1ce26:	e8 89 93 fe ff       	call   61b4 <_ZnwmPv>
   1ce2b:	49 89 c0             	mov    %rax,%r8
   1ce2e:	4c 89 c0             	mov    %r8,%rax
   1ce31:	b9 04 01 00 00       	mov    $0x104,%ecx
   1ce36:	be 00 00 00 00       	mov    $0x0,%esi
   1ce3b:	48 89 30             	mov    %rsi,(%rax)
   1ce3e:	89 ca                	mov    %ecx,%edx
   1ce40:	48 01 c2             	add    %rax,%rdx
   1ce43:	48 83 c2 08          	add    $0x8,%rdx
   1ce47:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1ce4b:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1ce4f:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1ce53:	48 29 d0             	sub    %rdx,%rax
   1ce56:	01 c1                	add    %eax,%ecx
   1ce58:	83 e1 f8             	and    $0xfffffff8,%ecx
   1ce5b:	89 c8                	mov    %ecx,%eax
   1ce5d:	c1 e8 03             	shr    $0x3,%eax
   1ce60:	89 c1                	mov    %eax,%ecx
   1ce62:	48 89 d7             	mov    %rdx,%rdi
   1ce65:	48 89 f0             	mov    %rsi,%rax
   1ce68:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1ce6b:	4c 89 c7             	mov    %r8,%rdi
   1ce6e:	e8 5b ff ff ff       	call   1cdce <_ZN2vk19ExtensionPropertiesC1Ev>
    }
   1ce73:	c9                   	leave
   1ce74:	c3                   	ret
   1ce75:	90                   	nop

000000000001ce76 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1ce76:	55                   	push   %rbp
   1ce77:	48 89 e5             	mov    %rsp,%rbp
   1ce7a:	48 83 ec 20          	sub    $0x20,%rsp
   1ce7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ce82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ce86:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1ce8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ce8e:	48 89 c7             	mov    %rax,%rdi
   1ce91:	e8 8a 06 00 00       	call   1d520 <_ZNKSt15__new_allocatorIN2vk19ExtensionPropertiesEE11_M_max_sizeEv>
   1ce96:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ce9a:	0f 92 c0             	setb   %al
   1ce9d:	0f b6 c0             	movzbl %al,%eax
   1cea0:	48 85 c0             	test   %rax,%rax
   1cea3:	0f 95 c0             	setne  %al
   1cea6:	84 c0                	test   %al,%al
   1cea8:	74 1a                	je     1cec4 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1ceaa:	48 b8 fc c0 0f fc c0 	movabs $0xfc0fc0fc0fc0fc,%rax
   1ceb1:	0f fc 00 
   1ceb4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ceb8:	73 05                	jae    1cebf <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1ceba:	e8 c1 82 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1cebf:	e8 bc 81 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1cec4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cec8:	48 89 d0             	mov    %rdx,%rax
   1cecb:	48 c1 e0 06          	shl    $0x6,%rax
   1cecf:	48 01 d0             	add    %rdx,%rax
   1ced2:	48 c1 e0 02          	shl    $0x2,%rax
   1ced6:	48 89 c7             	mov    %rax,%rdi
   1ced9:	e8 42 83 fe ff       	call   5220 <_Znwm@plt>
   1cede:	90                   	nop
      }
   1cedf:	c9                   	leave
   1cee0:	c3                   	ret

000000000001cee1 <_ZSt19__relocate_object_aIN2vk19ExtensionPropertiesES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1cee1:	55                   	push   %rbp
   1cee2:	48 89 e5             	mov    %rsp,%rbp
   1cee5:	48 83 ec 20          	sub    $0x20,%rsp
   1cee9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ceed:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cef1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1cef5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cef9:	48 89 c7             	mov    %rax,%rdi
   1cefc:	e8 33 06 00 00       	call   1d534 <_ZSt4moveIRN2vk19ExtensionPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>
   1cf01:	48 89 c2             	mov    %rax,%rdx
   1cf04:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1cf08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cf0c:	48 89 ce             	mov    %rcx,%rsi
   1cf0f:	48 89 c7             	mov    %rax,%rdi
   1cf12:	e8 2b 06 00 00       	call   1d542 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1cf17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cf1b:	48 89 c7             	mov    %rax,%rdi
   1cf1e:	e8 e7 f5 ff ff       	call   1c50a <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1cf23:	48 89 c2             	mov    %rax,%rdx
   1cf26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cf2a:	48 89 d6             	mov    %rdx,%rsi
   1cf2d:	48 89 c7             	mov    %rax,%rdi
   1cf30:	e8 42 06 00 00       	call   1d577 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE7destroyIS1_EEvRS2_PT_>
    }
   1cf35:	90                   	nop
   1cf36:	c9                   	leave
   1cf37:	c3                   	ret

000000000001cf38 <_ZSt10destroy_atIN2vk15LayerPropertiesEEvPT_>:
    destroy_at(_Tp* __location)
   1cf38:	55                   	push   %rbp
   1cf39:	48 89 e5             	mov    %rsp,%rbp
   1cf3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1cf40:	90                   	nop
   1cf41:	5d                   	pop    %rbp
   1cf42:	c3                   	ret
   1cf43:	90                   	nop

000000000001cf44 <_ZN2vk15LayerPropertiesC1Ev>:
  struct LayerProperties
   1cf44:	55                   	push   %rbp
   1cf45:	48 89 e5             	mov    %rsp,%rbp
   1cf48:	48 83 ec 10          	sub    $0x10,%rsp
   1cf4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cf50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf54:	48 89 c7             	mov    %rax,%rdi
   1cf57:	e8 a0 9c ff ff       	call   16bfc <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>
   1cf5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf60:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%rax)
   1cf67:	00 00 00 
   1cf6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf6e:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%rax)
   1cf75:	00 00 00 
   1cf78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf7c:	48 05 08 01 00 00    	add    $0x108,%rax
   1cf82:	48 89 c7             	mov    %rax,%rdi
   1cf85:	e8 72 9c ff ff       	call   16bfc <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>
   1cf8a:	90                   	nop
   1cf8b:	c9                   	leave
   1cf8c:	c3                   	ret

000000000001cf8d <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1cf8d:	55                   	push   %rbp
   1cf8e:	48 89 e5             	mov    %rsp,%rbp
   1cf91:	48 83 ec 10          	sub    $0x10,%rsp
   1cf95:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1cf99:	e8 00 92 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1cf9e:	84 c0                	test   %al,%al
   1cfa0:	74 0e                	je     1cfb0 <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1cfa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cfa6:	48 89 c7             	mov    %rax,%rdi
   1cfa9:	e8 e8 05 00 00       	call   1d596 <_ZSt12construct_atIN2vk15LayerPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1cfae:	eb 59                	jmp    1d009 <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_+0x7c>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1cfb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cfb4:	48 89 c6             	mov    %rax,%rsi
   1cfb7:	bf 08 02 00 00       	mov    $0x208,%edi
   1cfbc:	e8 f3 91 fe ff       	call   61b4 <_ZnwmPv>
   1cfc1:	49 89 c0             	mov    %rax,%r8
   1cfc4:	4c 89 c0             	mov    %r8,%rax
   1cfc7:	b9 08 02 00 00       	mov    $0x208,%ecx
   1cfcc:	be 00 00 00 00       	mov    $0x0,%esi
   1cfd1:	48 89 30             	mov    %rsi,(%rax)
   1cfd4:	89 ca                	mov    %ecx,%edx
   1cfd6:	48 01 c2             	add    %rax,%rdx
   1cfd9:	48 83 c2 08          	add    $0x8,%rdx
   1cfdd:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1cfe1:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1cfe5:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1cfe9:	48 29 d0             	sub    %rdx,%rax
   1cfec:	01 c1                	add    %eax,%ecx
   1cfee:	83 e1 f8             	and    $0xfffffff8,%ecx
   1cff1:	89 c8                	mov    %ecx,%eax
   1cff3:	c1 e8 03             	shr    $0x3,%eax
   1cff6:	89 c1                	mov    %eax,%ecx
   1cff8:	48 89 d7             	mov    %rdx,%rdi
   1cffb:	48 89 f0             	mov    %rsi,%rax
   1cffe:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1d001:	4c 89 c7             	mov    %r8,%rdi
   1d004:	e8 3b ff ff ff       	call   1cf44 <_ZN2vk15LayerPropertiesC1Ev>
    }
   1d009:	c9                   	leave
   1d00a:	c3                   	ret
   1d00b:	90                   	nop

000000000001d00c <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1d00c:	55                   	push   %rbp
   1d00d:	48 89 e5             	mov    %rsp,%rbp
   1d010:	48 83 ec 20          	sub    $0x20,%rsp
   1d014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d018:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d01c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1d020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d024:	48 89 c7             	mov    %rax,%rdi
   1d027:	e8 da 05 00 00       	call   1d606 <_ZNKSt15__new_allocatorIN2vk15LayerPropertiesEE11_M_max_sizeEv>
   1d02c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1d030:	0f 92 c0             	setb   %al
   1d033:	0f b6 c0             	movzbl %al,%eax
   1d036:	48 85 c0             	test   %rax,%rax
   1d039:	0f 95 c0             	setne  %al
   1d03c:	84 c0                	test   %al,%al
   1d03e:	74 1a                	je     1d05a <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1d040:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1d047:	07 7e 00 
   1d04a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1d04e:	73 05                	jae    1d055 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1d050:	e8 2b 81 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1d055:	e8 26 80 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1d05a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1d05e:	48 89 d0             	mov    %rdx,%rax
   1d061:	48 c1 e0 06          	shl    $0x6,%rax
   1d065:	48 01 d0             	add    %rdx,%rax
   1d068:	48 c1 e0 03          	shl    $0x3,%rax
   1d06c:	48 89 c7             	mov    %rax,%rdi
   1d06f:	e8 ac 81 fe ff       	call   5220 <_Znwm@plt>
   1d074:	90                   	nop
      }
   1d075:	c9                   	leave
   1d076:	c3                   	ret

000000000001d077 <_ZSt19__relocate_object_aIN2vk15LayerPropertiesES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1d077:	55                   	push   %rbp
   1d078:	48 89 e5             	mov    %rsp,%rbp
   1d07b:	48 83 ec 20          	sub    $0x20,%rsp
   1d07f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d083:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d087:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1d08b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d08f:	48 89 c7             	mov    %rax,%rdi
   1d092:	e8 83 05 00 00       	call   1d61a <_ZSt4moveIRN2vk15LayerPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>
   1d097:	48 89 c2             	mov    %rax,%rdx
   1d09a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1d09e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d0a2:	48 89 ce             	mov    %rcx,%rsi
   1d0a5:	48 89 c7             	mov    %rax,%rdi
   1d0a8:	e8 7b 05 00 00       	call   1d628 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1d0ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d0b1:	48 89 c7             	mov    %rax,%rdi
   1d0b4:	e8 81 f5 ff ff       	call   1c63a <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1d0b9:	48 89 c2             	mov    %rax,%rdx
   1d0bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d0c0:	48 89 d6             	mov    %rdx,%rsi
   1d0c3:	48 89 c7             	mov    %rax,%rdi
   1d0c6:	e8 92 05 00 00       	call   1d65d <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE7destroyIS1_EEvRS2_PT_>
    }
   1d0cb:	90                   	nop
   1d0cc:	c9                   	leave
   1d0cd:	c3                   	ret

000000000001d0ce <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   1d0ce:	55                   	push   %rbp
   1d0cf:	48 89 e5             	mov    %rsp,%rbp
   1d0d2:	48 83 ec 20          	sub    $0x20,%rsp
   1d0d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d0da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d0de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (std::is_constant_evaluated())
   1d0e2:	e8 c2 90 fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   1d0e7:	84 c0                	test   %al,%al
   1d0e9:	74 19                	je     1d104 <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_+0x36>
	  __copy_m(__first, __last, __result);
   1d0eb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d0ef:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d0f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d0f7:	48 89 ce             	mov    %rcx,%rsi
   1d0fa:	48 89 c7             	mov    %rax,%rdi
   1d0fd:	e8 7a 05 00 00       	call   1d67c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_>
   1d102:	eb 18                	jmp    1d11c <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_+0x4e>
			      _Category>::__copy_m(__first, __last, __result);
   1d104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d108:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d10c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d110:	48 89 ce             	mov    %rcx,%rsi
   1d113:	48 89 c7             	mov    %rax,%rdi
   1d116:	e8 ad 05 00 00       	call   1d6c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>
   1d11b:	90                   	nop
    }
   1d11c:	c9                   	leave
   1d11d:	c3                   	ret

000000000001d11e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>:
    struct pair
   1d11e:	55                   	push   %rbp
   1d11f:	48 89 e5             	mov    %rsp,%rbp
   1d122:	48 83 ec 10          	sub    $0x10,%rsp
   1d126:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d12a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d12e:	48 89 c7             	mov    %rax,%rdi
   1d131:	e8 8a d1 fe ff       	call   a2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
   1d136:	90                   	nop
   1d137:	c9                   	leave
   1d138:	c3                   	ret

000000000001d139 <_ZSt10destroy_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEvPT_>:
    destroy_at(_Tp* __location)
   1d139:	55                   	push   %rbp
   1d13a:	48 89 e5             	mov    %rsp,%rbp
   1d13d:	48 83 ec 10          	sub    $0x10,%rsp
   1d141:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__location->~_Tp();
   1d145:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d149:	48 89 c7             	mov    %rax,%rdi
   1d14c:	e8 cd ff ff ff       	call   1d11e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>
    }
   1d151:	90                   	nop
   1d152:	c9                   	leave
   1d153:	c3                   	ret

000000000001d154 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>:
      allocate(allocator_type& __a, size_type __n)
   1d154:	55                   	push   %rbp
   1d155:	48 89 e5             	mov    %rsp,%rbp
   1d158:	48 83 ec 20          	sub    $0x20,%rsp
   1d15c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d160:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d168:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d16c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d170:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1d174:	e8 25 90 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1d179:	84 c0                	test   %al,%al
   1d17b:	74 39                	je     1d1b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1d17d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d181:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d186:	ba 48 00 00 00       	mov    $0x48,%edx
   1d18b:	48 f7 e2             	mul    %rdx
   1d18e:	71 05                	jno    1d195 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x41>
   1d190:	b9 01 00 00 00       	mov    $0x1,%ecx
   1d195:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1d199:	48 89 c8             	mov    %rcx,%rax
   1d19c:	83 e0 01             	and    $0x1,%eax
   1d19f:	84 c0                	test   %al,%al
   1d1a1:	74 05                	je     1d1a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x54>
	      std::__throw_bad_array_new_length();
   1d1a3:	e8 d8 7f fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1d1a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d1ac:	48 89 c7             	mov    %rax,%rdi
   1d1af:	e8 6c 80 fe ff       	call   5220 <_Znwm@plt>
   1d1b4:	eb 19                	jmp    1d1cf <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1d1b6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d1ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d1be:	ba 00 00 00 00       	mov    $0x0,%edx
   1d1c3:	48 89 ce             	mov    %rcx,%rsi
   1d1c6:	48 89 c7             	mov    %rax,%rdi
   1d1c9:	e8 94 08 00 00       	call   1da62 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>
   1d1ce:	90                   	nop
      { return __a.allocate(__n); }
   1d1cf:	c9                   	leave
   1d1d0:	c3                   	ret

000000000001d1d1 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1d1d1:	55                   	push   %rbp
   1d1d2:	48 89 e5             	mov    %rsp,%rbp
   1d1d5:	41 54                	push   %r12
   1d1d7:	53                   	push   %rbx
   1d1d8:	48 83 ec 30          	sub    $0x30,%rsp
   1d1dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d1e0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d1e4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1d1e8:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1d1ec:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1d1f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1d1f4:	48 89 c7             	mov    %rax,%rdi
   1d1f7:	e8 6b da ff ff       	call   1ac67 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d1fc:	49 89 c4             	mov    %rax,%r12
   1d1ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d203:	48 89 c7             	mov    %rax,%rdi
   1d206:	e8 4e da ff ff       	call   1ac59 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1d20b:	48 89 c3             	mov    %rax,%rbx
   1d20e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d212:	48 89 c7             	mov    %rax,%rdi
   1d215:	e8 31 da ff ff       	call   1ac4b <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1d21a:	48 89 c6             	mov    %rax,%rsi
   1d21d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d221:	4c 89 e1             	mov    %r12,%rcx
   1d224:	48 89 da             	mov    %rbx,%rdx
   1d227:	48 89 c7             	mov    %rax,%rdi
   1d22a:	e8 59 05 00 00       	call   1d788 <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_>
	}
   1d22f:	90                   	nop
   1d230:	48 83 c4 30          	add    $0x30,%rsp
   1d234:	5b                   	pop    %rbx
   1d235:	41 5c                	pop    %r12
   1d237:	5d                   	pop    %rbp
   1d238:	c3                   	ret

000000000001d239 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d239:	55                   	push   %rbp
   1d23a:	48 89 e5             	mov    %rsp,%rbp
   1d23d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d241:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d245:	5d                   	pop    %rbp
   1d246:	c3                   	ret
   1d247:	90                   	nop

000000000001d248 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
   1d248:	55                   	push   %rbp
   1d249:	48 89 e5             	mov    %rsp,%rbp
   1d24c:	48 83 ec 10          	sub    $0x10,%rsp
   1d250:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Tp*>(_M_addr()); }
   1d254:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d258:	48 89 c7             	mov    %rax,%rdi
   1d25b:	e8 d6 05 00 00       	call   1d836 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   1d260:	c9                   	leave
   1d261:	c3                   	ret

000000000001d262 <_ZSt12construct_atIP18VkPhysicalDevice_TJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d262:	55                   	push   %rbp
   1d263:	48 89 e5             	mov    %rsp,%rbp
   1d266:	48 83 ec 10          	sub    $0x10,%rsp
   1d26a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d26e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d272:	48 89 c6             	mov    %rax,%rsi
   1d275:	bf 08 00 00 00       	mov    $0x8,%edi
   1d27a:	e8 35 8f fe ff       	call   61b4 <_ZnwmPv>
   1d27f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1d286:	c9                   	leave
   1d287:	c3                   	ret

000000000001d288 <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1d288:	55                   	push   %rbp
   1d289:	48 89 e5             	mov    %rsp,%rbp
   1d28c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1d290:	90                   	nop
   1d291:	5d                   	pop    %rbp
   1d292:	c3                   	ret

000000000001d293 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1d293:	55                   	push   %rbp
   1d294:	48 89 e5             	mov    %rsp,%rbp
   1d297:	48 83 ec 20          	sub    $0x20,%rsp
   1d29b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d29f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d2a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1d2a7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1d2ac:	75 06                	jne    1d2b4 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1d2ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d2b2:	eb 3a                	jmp    1d2ee <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1d2b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d2b8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d2bf:	00 
   1d2c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d2c4:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1d2c8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d2cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d2d0:	48 89 ce             	mov    %rcx,%rsi
   1d2d3:	48 89 c7             	mov    %rax,%rdi
   1d2d6:	e8 69 05 00 00       	call   1d844 <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1d2db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d2df:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d2e6:	00 
   1d2e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d2eb:	48 01 d0             	add    %rdx,%rax
    }
   1d2ee:	c9                   	leave
   1d2ef:	c3                   	ret

000000000001d2f0 <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1d2f0:	55                   	push   %rbp
   1d2f1:	48 89 e5             	mov    %rsp,%rbp
   1d2f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1d2f8:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1d2ff:	ff ff 0f 
      }
   1d302:	5d                   	pop    %rbp
   1d303:	c3                   	ret

000000000001d304 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1d304:	55                   	push   %rbp
   1d305:	48 89 e5             	mov    %rsp,%rbp
   1d308:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   1d30c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d310:	48 8b 00             	mov    (%rax),%rax
   1d313:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1d317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d31b:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   1d31e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1d322:	5d                   	pop    %rbp
   1d323:	c3                   	ret

000000000001d324 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   1d324:	55                   	push   %rbp
   1d325:	48 89 e5             	mov    %rsp,%rbp
   1d328:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1d32c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d330:	48 8b 00             	mov    (%rax),%rax
   1d333:	5d                   	pop    %rbp
   1d334:	c3                   	ret

000000000001d335 <_ZSt19__relocate_object_aIP18VkPhysicalDevice_TS1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1d335:	55                   	push   %rbp
   1d336:	48 89 e5             	mov    %rsp,%rbp
   1d339:	48 83 ec 20          	sub    $0x20,%rsp
   1d33d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d341:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d345:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1d349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d34d:	48 89 c7             	mov    %rax,%rdi
   1d350:	e8 1d 05 00 00       	call   1d872 <_ZSt4moveIRP18VkPhysicalDevice_TEONSt16remove_referenceIT_E4typeEOS4_>
   1d355:	48 89 c2             	mov    %rax,%rdx
   1d358:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1d35c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d360:	48 89 ce             	mov    %rcx,%rsi
   1d363:	48 89 c7             	mov    %rax,%rdi
   1d366:	e8 15 05 00 00       	call   1d880 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1d36b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d36f:	48 89 c7             	mov    %rax,%rdi
   1d372:	e8 14 ee ff ff       	call   1c18b <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1d377:	48 89 c2             	mov    %rax,%rdx
   1d37a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d37e:	48 89 d6             	mov    %rdx,%rsi
   1d381:	48 89 c7             	mov    %rax,%rdi
   1d384:	e8 2c 05 00 00       	call   1d8b5 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE7destroyIS1_EEvRS2_PT_>
    }
   1d389:	90                   	nop
   1d38a:	c9                   	leave
   1d38b:	c3                   	ret

000000000001d38c <_ZSt7forwardIN2vk4raii14PhysicalDeviceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d38c:	55                   	push   %rbp
   1d38d:	48 89 e5             	mov    %rsp,%rbp
   1d390:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d394:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d398:	5d                   	pop    %rbp
   1d399:	c3                   	ret

000000000001d39a <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d39a:	55                   	push   %rbp
   1d39b:	48 89 e5             	mov    %rsp,%rbp
   1d39e:	53                   	push   %rbx
   1d39f:	48 83 ec 18          	sub    $0x18,%rsp
   1d3a3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d3a7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d3ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d3af:	48 89 c6             	mov    %rax,%rsi
   1d3b2:	bf 10 00 00 00       	mov    $0x10,%edi
   1d3b7:	e8 f8 8d fe ff       	call   61b4 <_ZnwmPv>
   1d3bc:	48 89 c3             	mov    %rax,%rbx
   1d3bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d3c3:	48 89 c7             	mov    %rax,%rdi
   1d3c6:	e8 c1 ff ff ff       	call   1d38c <_ZSt7forwardIN2vk4raii14PhysicalDeviceEEOT_RNSt16remove_referenceIS3_E4typeE>
   1d3cb:	48 89 c6             	mov    %rax,%rsi
   1d3ce:	48 89 df             	mov    %rbx,%rdi
   1d3d1:	e8 9c 91 ff ff       	call   16572 <_ZN2vk4raii14PhysicalDeviceC1EOS1_>
   1d3d6:	48 89 d8             	mov    %rbx,%rax
   1d3d9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d3dd:	c9                   	leave
   1d3de:	c3                   	ret

000000000001d3df <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d3df:	55                   	push   %rbp
   1d3e0:	48 89 e5             	mov    %rsp,%rbp
   1d3e3:	53                   	push   %rbx
   1d3e4:	48 83 ec 18          	sub    $0x18,%rsp
   1d3e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d3ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d3f0:	48 89 c6             	mov    %rax,%rsi
   1d3f3:	bf 18 00 00 00       	mov    $0x18,%edi
   1d3f8:	e8 b7 8d fe ff       	call   61b4 <_ZnwmPv>
   1d3fd:	48 89 c3             	mov    %rax,%rbx
   1d400:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
   1d406:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%rbx)
   1d40d:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
   1d414:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
   1d41b:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
   1d422:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%rbx)
   1d429:	48 89 df             	mov    %rbx,%rdi
   1d42c:	e8 17 f8 ff ff       	call   1cc48 <_ZN2vk21QueueFamilyPropertiesC1Ev>
   1d431:	48 89 d8             	mov    %rbx,%rax
   1d434:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d438:	c9                   	leave
   1d439:	c3                   	ret

000000000001d43a <_ZNKSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1d43a:	55                   	push   %rbp
   1d43b:	48 89 e5             	mov    %rsp,%rbp
   1d43e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1d442:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
   1d449:	55 55 05 
      }
   1d44c:	5d                   	pop    %rbp
   1d44d:	c3                   	ret

000000000001d44e <_ZSt4moveIRN2vk21QueueFamilyPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1d44e:	55                   	push   %rbp
   1d44f:	48 89 e5             	mov    %rsp,%rbp
   1d452:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1d456:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d45a:	5d                   	pop    %rbp
   1d45b:	c3                   	ret

000000000001d45c <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1d45c:	55                   	push   %rbp
   1d45d:	48 89 e5             	mov    %rsp,%rbp
   1d460:	48 83 ec 20          	sub    $0x20,%rsp
   1d464:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d468:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d46c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1d470:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d474:	48 89 c7             	mov    %rax,%rdi
   1d477:	e8 58 04 00 00       	call   1d8d4 <_ZSt7forwardIN2vk21QueueFamilyPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d47c:	48 89 c2             	mov    %rax,%rdx
   1d47f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d483:	48 89 d6             	mov    %rdx,%rsi
   1d486:	48 89 c7             	mov    %rax,%rdi
   1d489:	e8 54 04 00 00       	call   1d8e2 <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1d48e:	90                   	nop
   1d48f:	c9                   	leave
   1d490:	c3                   	ret

000000000001d491 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1d491:	55                   	push   %rbp
   1d492:	48 89 e5             	mov    %rsp,%rbp
   1d495:	48 83 ec 10          	sub    $0x10,%rsp
   1d499:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d49d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1d4a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d4a5:	48 89 c7             	mov    %rax,%rdi
   1d4a8:	e8 90 f7 ff ff       	call   1cc3d <_ZSt10destroy_atIN2vk21QueueFamilyPropertiesEEvPT_>
	}
   1d4ad:	90                   	nop
   1d4ae:	c9                   	leave
   1d4af:	c3                   	ret

000000000001d4b0 <_ZSt12construct_atIN2vk19ExtensionPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d4b0:	55                   	push   %rbp
   1d4b1:	48 89 e5             	mov    %rsp,%rbp
   1d4b4:	53                   	push   %rbx
   1d4b5:	48 83 ec 18          	sub    $0x18,%rsp
   1d4b9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d4bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d4c1:	48 89 c6             	mov    %rax,%rsi
   1d4c4:	bf 04 01 00 00       	mov    $0x104,%edi
   1d4c9:	e8 e6 8c fe ff       	call   61b4 <_ZnwmPv>
   1d4ce:	48 89 c3             	mov    %rax,%rbx
   1d4d1:	48 89 d8             	mov    %rbx,%rax
   1d4d4:	b9 04 01 00 00       	mov    $0x104,%ecx
   1d4d9:	be 00 00 00 00       	mov    $0x0,%esi
   1d4de:	48 89 30             	mov    %rsi,(%rax)
   1d4e1:	89 ca                	mov    %ecx,%edx
   1d4e3:	48 01 c2             	add    %rax,%rdx
   1d4e6:	48 83 c2 08          	add    $0x8,%rdx
   1d4ea:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1d4ee:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1d4f2:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1d4f6:	48 29 d0             	sub    %rdx,%rax
   1d4f9:	01 c1                	add    %eax,%ecx
   1d4fb:	83 e1 f8             	and    $0xfffffff8,%ecx
   1d4fe:	89 c8                	mov    %ecx,%eax
   1d500:	c1 e8 03             	shr    $0x3,%eax
   1d503:	89 c1                	mov    %eax,%ecx
   1d505:	48 89 d7             	mov    %rdx,%rdi
   1d508:	48 89 f0             	mov    %rsi,%rax
   1d50b:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1d50e:	48 89 df             	mov    %rbx,%rdi
   1d511:	e8 b8 f8 ff ff       	call   1cdce <_ZN2vk19ExtensionPropertiesC1Ev>
   1d516:	48 89 d8             	mov    %rbx,%rax
   1d519:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d51d:	c9                   	leave
   1d51e:	c3                   	ret
   1d51f:	90                   	nop

000000000001d520 <_ZNKSt15__new_allocatorIN2vk19ExtensionPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1d520:	55                   	push   %rbp
   1d521:	48 89 e5             	mov    %rsp,%rbp
   1d524:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1d528:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1d52f:	07 7e 00 
      }
   1d532:	5d                   	pop    %rbp
   1d533:	c3                   	ret

000000000001d534 <_ZSt4moveIRN2vk19ExtensionPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1d534:	55                   	push   %rbp
   1d535:	48 89 e5             	mov    %rsp,%rbp
   1d538:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1d53c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d540:	5d                   	pop    %rbp
   1d541:	c3                   	ret

000000000001d542 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1d542:	55                   	push   %rbp
   1d543:	48 89 e5             	mov    %rsp,%rbp
   1d546:	48 83 ec 20          	sub    $0x20,%rsp
   1d54a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d54e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d552:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1d556:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d55a:	48 89 c7             	mov    %rax,%rdi
   1d55d:	e8 d3 03 00 00       	call   1d935 <_ZSt7forwardIN2vk19ExtensionPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d562:	48 89 c2             	mov    %rax,%rdx
   1d565:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d569:	48 89 d6             	mov    %rdx,%rsi
   1d56c:	48 89 c7             	mov    %rax,%rdi
   1d56f:	e8 cf 03 00 00       	call   1d943 <_ZSt12construct_atIN2vk19ExtensionPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1d574:	90                   	nop
   1d575:	c9                   	leave
   1d576:	c3                   	ret

000000000001d577 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1d577:	55                   	push   %rbp
   1d578:	48 89 e5             	mov    %rsp,%rbp
   1d57b:	48 83 ec 10          	sub    $0x10,%rsp
   1d57f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d583:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1d587:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d58b:	48 89 c7             	mov    %rax,%rdi
   1d58e:	e8 30 f8 ff ff       	call   1cdc3 <_ZSt10destroy_atIN2vk19ExtensionPropertiesEEvPT_>
	}
   1d593:	90                   	nop
   1d594:	c9                   	leave
   1d595:	c3                   	ret

000000000001d596 <_ZSt12construct_atIN2vk15LayerPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d596:	55                   	push   %rbp
   1d597:	48 89 e5             	mov    %rsp,%rbp
   1d59a:	53                   	push   %rbx
   1d59b:	48 83 ec 18          	sub    $0x18,%rsp
   1d59f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d5a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d5a7:	48 89 c6             	mov    %rax,%rsi
   1d5aa:	bf 08 02 00 00       	mov    $0x208,%edi
   1d5af:	e8 00 8c fe ff       	call   61b4 <_ZnwmPv>
   1d5b4:	48 89 c3             	mov    %rax,%rbx
   1d5b7:	48 89 d8             	mov    %rbx,%rax
   1d5ba:	b9 08 02 00 00       	mov    $0x208,%ecx
   1d5bf:	be 00 00 00 00       	mov    $0x0,%esi
   1d5c4:	48 89 30             	mov    %rsi,(%rax)
   1d5c7:	89 ca                	mov    %ecx,%edx
   1d5c9:	48 01 c2             	add    %rax,%rdx
   1d5cc:	48 83 c2 08          	add    $0x8,%rdx
   1d5d0:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1d5d4:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1d5d8:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1d5dc:	48 29 d0             	sub    %rdx,%rax
   1d5df:	01 c1                	add    %eax,%ecx
   1d5e1:	83 e1 f8             	and    $0xfffffff8,%ecx
   1d5e4:	89 c8                	mov    %ecx,%eax
   1d5e6:	c1 e8 03             	shr    $0x3,%eax
   1d5e9:	89 c1                	mov    %eax,%ecx
   1d5eb:	48 89 d7             	mov    %rdx,%rdi
   1d5ee:	48 89 f0             	mov    %rsi,%rax
   1d5f1:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1d5f4:	48 89 df             	mov    %rbx,%rdi
   1d5f7:	e8 48 f9 ff ff       	call   1cf44 <_ZN2vk15LayerPropertiesC1Ev>
   1d5fc:	48 89 d8             	mov    %rbx,%rax
   1d5ff:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d603:	c9                   	leave
   1d604:	c3                   	ret
   1d605:	90                   	nop

000000000001d606 <_ZNKSt15__new_allocatorIN2vk15LayerPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1d606:	55                   	push   %rbp
   1d607:	48 89 e5             	mov    %rsp,%rbp
   1d60a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1d60e:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
   1d615:	03 3f 00 
      }
   1d618:	5d                   	pop    %rbp
   1d619:	c3                   	ret

000000000001d61a <_ZSt4moveIRN2vk15LayerPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1d61a:	55                   	push   %rbp
   1d61b:	48 89 e5             	mov    %rsp,%rbp
   1d61e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1d622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d626:	5d                   	pop    %rbp
   1d627:	c3                   	ret

000000000001d628 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1d628:	55                   	push   %rbp
   1d629:	48 89 e5             	mov    %rsp,%rbp
   1d62c:	48 83 ec 20          	sub    $0x20,%rsp
   1d630:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d634:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d638:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1d63c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d640:	48 89 c7             	mov    %rax,%rdi
   1d643:	e8 83 03 00 00       	call   1d9cb <_ZSt7forwardIN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d648:	48 89 c2             	mov    %rax,%rdx
   1d64b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d64f:	48 89 d6             	mov    %rdx,%rsi
   1d652:	48 89 c7             	mov    %rax,%rdi
   1d655:	e8 7f 03 00 00       	call   1d9d9 <_ZSt12construct_atIN2vk15LayerPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1d65a:	90                   	nop
   1d65b:	c9                   	leave
   1d65c:	c3                   	ret

000000000001d65d <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1d65d:	55                   	push   %rbp
   1d65e:	48 89 e5             	mov    %rsp,%rbp
   1d661:	48 83 ec 10          	sub    $0x10,%rsp
   1d665:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d669:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1d66d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d671:	48 89 c7             	mov    %rax,%rdi
   1d674:	e8 bf f8 ff ff       	call   1cf38 <_ZSt10destroy_atIN2vk15LayerPropertiesEEvPT_>
	}
   1d679:	90                   	nop
   1d67a:	c9                   	leave
   1d67b:	c3                   	ret

000000000001d67c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_>:
	__copy_m(_II __first, _II __last, _OI __result)
   1d67c:	55                   	push   %rbp
   1d67d:	48 89 e5             	mov    %rsp,%rbp
   1d680:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d684:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d688:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   1d68c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d690:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1d694:	48 c1 f8 03          	sar    $0x3,%rax
   1d698:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d69c:	eb 1d                	jmp    1d6bb <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_+0x3f>
	      *__result = *__first;
   1d69e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d6a2:	48 8b 10             	mov    (%rax),%rdx
   1d6a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d6a9:	48 89 10             	mov    %rdx,(%rax)
	      ++__first;
   1d6ac:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      ++__result;
   1d6b1:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   1d6b6:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   1d6bb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1d6c0:	7f dc                	jg     1d69e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_+0x22>
	  return __result;
   1d6c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
	}
   1d6c6:	5d                   	pop    %rbp
   1d6c7:	c3                   	ret

000000000001d6c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   1d6c8:	55                   	push   %rbp
   1d6c9:	48 89 e5             	mov    %rsp,%rbp
   1d6cc:	48 83 ec 30          	sub    $0x30,%rsp
   1d6d0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d6d4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d6d8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
   1d6dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d6e0:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1d6e4:	48 c1 f8 03          	sar    $0x3,%rax
   1d6e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
   1d6ec:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1d6f1:	74 1f                	je     1d712 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_+0x4a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1d6f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d6f7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d6fe:	00 
   1d6ff:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1d703:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d707:	48 89 ce             	mov    %rcx,%rsi
   1d70a:	48 89 c7             	mov    %rax,%rdi
   1d70d:	e8 4e 7c fe ff       	call   5360 <memmove@plt>
	  return __result + _Num;
   1d712:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d716:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d71d:	00 
   1d71e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d722:	48 01 d0             	add    %rdx,%rax
	}
   1d725:	c9                   	leave
   1d726:	c3                   	ret
   1d727:	90                   	nop

000000000001d728 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1d728:	55                   	push   %rbp
   1d729:	48 89 e5             	mov    %rsp,%rbp
   1d72c:	48 83 ec 20          	sub    $0x20,%rsp
   1d730:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d734:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d738:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d73c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d740:	48 89 d0             	mov    %rdx,%rax
   1d743:	48 c1 e0 03          	shl    $0x3,%rax
   1d747:	48 01 d0             	add    %rdx,%rax
   1d74a:	48 c1 e0 03          	shl    $0x3,%rax
   1d74e:	48 89 c2             	mov    %rax,%rdx
   1d751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d755:	48 89 d6             	mov    %rdx,%rsi
   1d758:	48 89 c7             	mov    %rax,%rdi
   1d75b:	e8 d0 7a fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1d760:	c9                   	leave
   1d761:	c3                   	ret

000000000001d762 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      constexpr tuple(tuple&&) = default;
   1d762:	55                   	push   %rbp
   1d763:	48 89 e5             	mov    %rsp,%rbp
   1d766:	48 83 ec 10          	sub    $0x10,%rsp
   1d76a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d76e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d772:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d776:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1d77a:	48 89 d6             	mov    %rdx,%rsi
   1d77d:	48 89 c7             	mov    %rax,%rdi
   1d780:	e8 49 03 00 00       	call   1dace <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   1d785:	90                   	nop
   1d786:	c9                   	leave
   1d787:	c3                   	ret

000000000001d788 <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d788:	55                   	push   %rbp
   1d789:	48 89 e5             	mov    %rsp,%rbp
   1d78c:	41 56                	push   %r14
   1d78e:	41 55                	push   %r13
   1d790:	41 54                	push   %r12
   1d792:	53                   	push   %rbx
   1d793:	48 83 ec 30          	sub    $0x30,%rsp
   1d797:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1d79b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   1d79f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   1d7a3:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d7a7:	4c 8b 65 c8          	mov    -0x38(%rbp),%r12
   1d7ab:	4c 89 e6             	mov    %r12,%rsi
   1d7ae:	bf 28 00 00 00       	mov    $0x28,%edi
   1d7b3:	e8 fc 89 fe ff       	call   61b4 <_ZnwmPv>
   1d7b8:	48 89 c3             	mov    %rax,%rbx
   1d7bb:	41 be 01 00 00 00    	mov    $0x1,%r14d
   1d7c1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1d7c5:	48 89 c7             	mov    %rax,%rdi
   1d7c8:	e8 9a d4 ff ff       	call   1ac67 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d7cd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1d7d1:	48 89 c7             	mov    %rax,%rdi
   1d7d4:	e8 80 d4 ff ff       	call   1ac59 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1d7d9:	48 89 c2             	mov    %rax,%rdx
   1d7dc:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1d7e0:	48 89 d6             	mov    %rdx,%rsi
   1d7e3:	48 89 c7             	mov    %rax,%rdi
   1d7e6:	e8 77 ff ff ff       	call   1d762 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   1d7eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d7ef:	48 89 c7             	mov    %rax,%rdi
   1d7f2:	e8 54 d4 ff ff       	call   1ac4b <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1d7f7:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1d7fb:	48 89 c6             	mov    %rax,%rsi
   1d7fe:	48 89 df             	mov    %rbx,%rdi
   1d801:	e8 e6 02 00 00       	call   1daec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
   1d806:	48 89 d8             	mov    %rbx,%rax
   1d809:	eb 1e                	jmp    1d829 <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_+0xa1>
   1d80b:	49 89 c5             	mov    %rax,%r13
   1d80e:	45 84 f6             	test   %r14b,%r14b
   1d811:	74 0b                	je     1d81e <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_+0x96>
   1d813:	4c 89 e6             	mov    %r12,%rsi
   1d816:	48 89 df             	mov    %rbx,%rdi
   1d819:	e8 03 1f ff ff       	call   f721 <_ZdlPvS_>
   1d81e:	4c 89 e8             	mov    %r13,%rax
   1d821:	48 89 c7             	mov    %rax,%rdi
   1d824:	e8 77 7b fe ff       	call   53a0 <_Unwind_Resume@plt>
   1d829:	48 83 c4 30          	add    $0x30,%rsp
   1d82d:	5b                   	pop    %rbx
   1d82e:	41 5c                	pop    %r12
   1d830:	41 5d                	pop    %r13
   1d832:	41 5e                	pop    %r14
   1d834:	5d                   	pop    %rbp
   1d835:	c3                   	ret

000000000001d836 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() const noexcept
   1d836:	55                   	push   %rbp
   1d837:	48 89 e5             	mov    %rsp,%rbp
   1d83a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const void*>(&_M_storage); }
   1d83e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d842:	5d                   	pop    %rbp
   1d843:	c3                   	ret

000000000001d844 <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1d844:	55                   	push   %rbp
   1d845:	48 89 e5             	mov    %rsp,%rbp
   1d848:	48 83 ec 20          	sub    $0x20,%rsp
   1d84c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d850:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d854:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1d858:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d85c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d860:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d864:	48 89 ce             	mov    %rcx,%rsi
   1d867:	48 89 c7             	mov    %rax,%rdi
   1d86a:	e8 a7 02 00 00       	call   1db16 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1d86f:	90                   	nop
   1d870:	c9                   	leave
   1d871:	c3                   	ret

000000000001d872 <_ZSt4moveIRP18VkPhysicalDevice_TEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1d872:	55                   	push   %rbp
   1d873:	48 89 e5             	mov    %rsp,%rbp
   1d876:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1d87a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d87e:	5d                   	pop    %rbp
   1d87f:	c3                   	ret

000000000001d880 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1d880:	55                   	push   %rbp
   1d881:	48 89 e5             	mov    %rsp,%rbp
   1d884:	48 83 ec 20          	sub    $0x20,%rsp
   1d888:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d88c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d890:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1d894:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d898:	48 89 c7             	mov    %rax,%rdi
   1d89b:	e8 b1 02 00 00       	call   1db51 <_ZSt7forwardIP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS2_E4typeE>
   1d8a0:	48 89 c2             	mov    %rax,%rdx
   1d8a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d8a7:	48 89 d6             	mov    %rdx,%rsi
   1d8aa:	48 89 c7             	mov    %rax,%rdi
   1d8ad:	e8 ad 02 00 00       	call   1db5f <_ZSt12construct_atIP18VkPhysicalDevice_TJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1d8b2:	90                   	nop
   1d8b3:	c9                   	leave
   1d8b4:	c3                   	ret

000000000001d8b5 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1d8b5:	55                   	push   %rbp
   1d8b6:	48 89 e5             	mov    %rsp,%rbp
   1d8b9:	48 83 ec 10          	sub    $0x10,%rsp
   1d8bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d8c1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1d8c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d8c9:	48 89 c7             	mov    %rax,%rdi
   1d8cc:	e8 99 f1 ff ff       	call   1ca6a <_ZSt10destroy_atIP18VkPhysicalDevice_TEvPT_>
	}
   1d8d1:	90                   	nop
   1d8d2:	c9                   	leave
   1d8d3:	c3                   	ret

000000000001d8d4 <_ZSt7forwardIN2vk21QueueFamilyPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d8d4:	55                   	push   %rbp
   1d8d5:	48 89 e5             	mov    %rsp,%rbp
   1d8d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d8dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d8e0:	5d                   	pop    %rbp
   1d8e1:	c3                   	ret

000000000001d8e2 <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d8e2:	55                   	push   %rbp
   1d8e3:	48 89 e5             	mov    %rsp,%rbp
   1d8e6:	53                   	push   %rbx
   1d8e7:	48 83 ec 18          	sub    $0x18,%rsp
   1d8eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d8ef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d8f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d8f7:	48 89 c6             	mov    %rax,%rsi
   1d8fa:	bf 18 00 00 00       	mov    $0x18,%edi
   1d8ff:	e8 b0 88 fe ff       	call   61b4 <_ZnwmPv>
   1d904:	48 89 c3             	mov    %rax,%rbx
   1d907:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d90b:	48 89 c7             	mov    %rax,%rdi
   1d90e:	e8 c1 ff ff ff       	call   1d8d4 <_ZSt7forwardIN2vk21QueueFamilyPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d913:	48 89 c1             	mov    %rax,%rcx
   1d916:	48 8b 01             	mov    (%rcx),%rax
   1d919:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   1d91d:	48 89 03             	mov    %rax,(%rbx)
   1d920:	48 89 53 08          	mov    %rdx,0x8(%rbx)
   1d924:	48 8b 41 10          	mov    0x10(%rcx),%rax
   1d928:	48 89 43 10          	mov    %rax,0x10(%rbx)
   1d92c:	48 89 d8             	mov    %rbx,%rax
   1d92f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d933:	c9                   	leave
   1d934:	c3                   	ret

000000000001d935 <_ZSt7forwardIN2vk19ExtensionPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d935:	55                   	push   %rbp
   1d936:	48 89 e5             	mov    %rsp,%rbp
   1d939:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d93d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d941:	5d                   	pop    %rbp
   1d942:	c3                   	ret

000000000001d943 <_ZSt12construct_atIN2vk19ExtensionPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d943:	55                   	push   %rbp
   1d944:	48 89 e5             	mov    %rsp,%rbp
   1d947:	53                   	push   %rbx
   1d948:	48 83 ec 18          	sub    $0x18,%rsp
   1d94c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d950:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d954:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d958:	48 89 c6             	mov    %rax,%rsi
   1d95b:	bf 04 01 00 00       	mov    $0x104,%edi
   1d960:	e8 4f 88 fe ff       	call   61b4 <_ZnwmPv>
   1d965:	48 89 c3             	mov    %rax,%rbx
   1d968:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d96c:	48 89 c7             	mov    %rax,%rdi
   1d96f:	e8 c1 ff ff ff       	call   1d935 <_ZSt7forwardIN2vk19ExtensionPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d974:	48 89 c2             	mov    %rax,%rdx
   1d977:	48 89 d8             	mov    %rbx,%rax
   1d97a:	b9 04 01 00 00       	mov    $0x104,%ecx
   1d97f:	48 8b 32             	mov    (%rdx),%rsi
   1d982:	48 89 30             	mov    %rsi,(%rax)
   1d985:	89 ce                	mov    %ecx,%esi
   1d987:	48 01 c6             	add    %rax,%rsi
   1d98a:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   1d98e:	89 ce                	mov    %ecx,%esi
   1d990:	48 01 d6             	add    %rdx,%rsi
   1d993:	48 83 c6 08          	add    $0x8,%rsi
   1d997:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   1d99b:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   1d99f:	48 8d 78 08          	lea    0x8(%rax),%rdi
   1d9a3:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1d9a7:	48 29 f8             	sub    %rdi,%rax
   1d9aa:	48 29 c2             	sub    %rax,%rdx
   1d9ad:	01 c1                	add    %eax,%ecx
   1d9af:	83 e1 f8             	and    $0xfffffff8,%ecx
   1d9b2:	89 c8                	mov    %ecx,%eax
   1d9b4:	c1 e8 03             	shr    $0x3,%eax
   1d9b7:	89 c0                	mov    %eax,%eax
   1d9b9:	48 89 d6             	mov    %rdx,%rsi
   1d9bc:	48 89 c1             	mov    %rax,%rcx
   1d9bf:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   1d9c2:	48 89 d8             	mov    %rbx,%rax
   1d9c5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d9c9:	c9                   	leave
   1d9ca:	c3                   	ret

000000000001d9cb <_ZSt7forwardIN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d9cb:	55                   	push   %rbp
   1d9cc:	48 89 e5             	mov    %rsp,%rbp
   1d9cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d9d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d9d7:	5d                   	pop    %rbp
   1d9d8:	c3                   	ret

000000000001d9d9 <_ZSt12construct_atIN2vk15LayerPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d9d9:	55                   	push   %rbp
   1d9da:	48 89 e5             	mov    %rsp,%rbp
   1d9dd:	53                   	push   %rbx
   1d9de:	48 83 ec 18          	sub    $0x18,%rsp
   1d9e2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d9e6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d9ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d9ee:	48 89 c6             	mov    %rax,%rsi
   1d9f1:	bf 08 02 00 00       	mov    $0x208,%edi
   1d9f6:	e8 b9 87 fe ff       	call   61b4 <_ZnwmPv>
   1d9fb:	48 89 c3             	mov    %rax,%rbx
   1d9fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1da02:	48 89 c7             	mov    %rax,%rdi
   1da05:	e8 c1 ff ff ff       	call   1d9cb <_ZSt7forwardIN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1da0a:	48 89 c2             	mov    %rax,%rdx
   1da0d:	48 89 d8             	mov    %rbx,%rax
   1da10:	b9 08 02 00 00       	mov    $0x208,%ecx
   1da15:	48 8b 32             	mov    (%rdx),%rsi
   1da18:	48 89 30             	mov    %rsi,(%rax)
   1da1b:	89 ce                	mov    %ecx,%esi
   1da1d:	48 01 c6             	add    %rax,%rsi
   1da20:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   1da24:	89 ce                	mov    %ecx,%esi
   1da26:	48 01 d6             	add    %rdx,%rsi
   1da29:	48 83 c6 08          	add    $0x8,%rsi
   1da2d:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   1da31:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   1da35:	48 8d 78 08          	lea    0x8(%rax),%rdi
   1da39:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1da3d:	48 29 f8             	sub    %rdi,%rax
   1da40:	48 29 c2             	sub    %rax,%rdx
   1da43:	01 c1                	add    %eax,%ecx
   1da45:	83 e1 f8             	and    $0xfffffff8,%ecx
   1da48:	89 c8                	mov    %ecx,%eax
   1da4a:	c1 e8 03             	shr    $0x3,%eax
   1da4d:	89 c0                	mov    %eax,%eax
   1da4f:	48 89 d6             	mov    %rdx,%rsi
   1da52:	48 89 c1             	mov    %rax,%rcx
   1da55:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   1da58:	48 89 d8             	mov    %rbx,%rax
   1da5b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1da5f:	c9                   	leave
   1da60:	c3                   	ret
   1da61:	90                   	nop

000000000001da62 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1da62:	55                   	push   %rbp
   1da63:	48 89 e5             	mov    %rsp,%rbp
   1da66:	48 83 ec 20          	sub    $0x20,%rsp
   1da6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1da6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1da72:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1da76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da7a:	48 89 c7             	mov    %rax,%rdi
   1da7d:	e8 1e 01 00 00       	call   1dba0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>
   1da82:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1da86:	0f 92 c0             	setb   %al
   1da89:	0f b6 c0             	movzbl %al,%eax
   1da8c:	48 85 c0             	test   %rax,%rax
   1da8f:	0f 95 c0             	setne  %al
   1da92:	84 c0                	test   %al,%al
   1da94:	74 1a                	je     1dab0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1da96:	48 b8 8e e3 38 8e e3 	movabs $0x38e38e38e38e38e,%rax
   1da9d:	38 8e 03 
   1daa0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1daa4:	73 05                	jae    1daab <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1daa6:	e8 d5 76 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1daab:	e8 d0 75 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1dab0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1dab4:	48 89 d0             	mov    %rdx,%rax
   1dab7:	48 c1 e0 03          	shl    $0x3,%rax
   1dabb:	48 01 d0             	add    %rdx,%rax
   1dabe:	48 c1 e0 03          	shl    $0x3,%rax
   1dac2:	48 89 c7             	mov    %rax,%rdi
   1dac5:	e8 56 77 fe ff       	call   5220 <_Znwm@plt>
   1daca:	90                   	nop
      }
   1dacb:	c9                   	leave
   1dacc:	c3                   	ret
   1dacd:	90                   	nop

000000000001dace <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
   1dace:	55                   	push   %rbp
   1dacf:	48 89 e5             	mov    %rsp,%rbp
   1dad2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dad6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(static_cast<_Base&&>(__in))
   1dada:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dade:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1dae2:	48 8b 12             	mov    (%rdx),%rdx
   1dae5:	48 89 10             	mov    %rdx,(%rax)
      { }
   1dae8:	90                   	nop
   1dae9:	5d                   	pop    %rbp
   1daea:	c3                   	ret
   1daeb:	90                   	nop

000000000001daec <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
   1daec:	55                   	push   %rbp
   1daed:	48 89 e5             	mov    %rsp,%rbp
   1daf0:	48 83 ec 20          	sub    $0x20,%rsp
   1daf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1daf8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
   1dafc:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   1db00:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1db04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1db08:	48 89 ce             	mov    %rcx,%rsi
   1db0b:	48 89 c7             	mov    %rax,%rdi
   1db0e:	e8 a1 00 00 00       	call   1dbb4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
   1db13:	90                   	nop
   1db14:	c9                   	leave
   1db15:	c3                   	ret

000000000001db16 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1db16:	55                   	push   %rbp
   1db17:	48 89 e5             	mov    %rsp,%rbp
   1db1a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1db1e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1db22:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1db26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1db2a:	48 8b 00             	mov    (%rax),%rax
   1db2d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1db31:	eb 10                	jmp    1db43 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1db33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1db37:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1db3b:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1db3e:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1db43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1db47:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1db4b:	75 e6                	jne    1db33 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   1db4d:	90                   	nop
   1db4e:	90                   	nop
   1db4f:	5d                   	pop    %rbp
   1db50:	c3                   	ret

000000000001db51 <_ZSt7forwardIP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1db51:	55                   	push   %rbp
   1db52:	48 89 e5             	mov    %rsp,%rbp
   1db55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1db59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1db5d:	5d                   	pop    %rbp
   1db5e:	c3                   	ret

000000000001db5f <_ZSt12construct_atIP18VkPhysicalDevice_TJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1db5f:	55                   	push   %rbp
   1db60:	48 89 e5             	mov    %rsp,%rbp
   1db63:	53                   	push   %rbx
   1db64:	48 83 ec 18          	sub    $0x18,%rsp
   1db68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1db6c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1db70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1db74:	48 89 c6             	mov    %rax,%rsi
   1db77:	bf 08 00 00 00       	mov    $0x8,%edi
   1db7c:	e8 33 86 fe ff       	call   61b4 <_ZnwmPv>
   1db81:	48 89 c3             	mov    %rax,%rbx
   1db84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1db88:	48 89 c7             	mov    %rax,%rdi
   1db8b:	e8 c1 ff ff ff       	call   1db51 <_ZSt7forwardIP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS2_E4typeE>
   1db90:	48 8b 00             	mov    (%rax),%rax
   1db93:	48 89 03             	mov    %rax,(%rbx)
   1db96:	48 89 d8             	mov    %rbx,%rax
   1db99:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1db9d:	c9                   	leave
   1db9e:	c3                   	ret
   1db9f:	90                   	nop

000000000001dba0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1dba0:	55                   	push   %rbp
   1dba1:	48 89 e5             	mov    %rsp,%rbp
   1dba4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1dba8:	48 b8 c7 71 1c c7 71 	movabs $0x1c71c71c71c71c7,%rax
   1dbaf:	1c c7 01 
      }
   1dbb2:	5d                   	pop    %rbp
   1dbb3:	c3                   	ret

000000000001dbb4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
   1dbb4:	55                   	push   %rbp
   1dbb5:	48 89 e5             	mov    %rsp,%rbp
   1dbb8:	53                   	push   %rbx
   1dbb9:	48 83 ec 28          	sub    $0x28,%rsp
   1dbbd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1dbc1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1dbc5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   1dbc9:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1dbcd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1dbd1:	48 89 c7             	mov    %rax,%rdi
   1dbd4:	e8 25 00 00 00       	call   1dbfe <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>
   1dbd9:	48 89 c7             	mov    %rax,%rdi
   1dbdc:	e8 37 00 00 00       	call   1dc18 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
   1dbe1:	48 89 c6             	mov    %rax,%rsi
   1dbe4:	48 89 df             	mov    %rbx,%rdi
   1dbe7:	e8 fc c6 fe ff       	call   a2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   1dbec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dbf0:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
      { }
   1dbf7:	90                   	nop
   1dbf8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1dbfc:	c9                   	leave
   1dbfd:	c3                   	ret

000000000001dbfe <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>:
    get(tuple<_Elements...>& __t) noexcept
   1dbfe:	55                   	push   %rbp
   1dbff:	48 89 e5             	mov    %rsp,%rbp
   1dc02:	48 83 ec 10          	sub    $0x10,%rsp
   1dc06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
   1dc0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc0e:	48 89 c7             	mov    %rax,%rdi
   1dc11:	e8 10 00 00 00       	call   1dc26 <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
   1dc16:	c9                   	leave
   1dc17:	c3                   	ret

000000000001dc18 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1dc18:	55                   	push   %rbp
   1dc19:	48 89 e5             	mov    %rsp,%rbp
   1dc1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1dc20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc24:	5d                   	pop    %rbp
   1dc25:	c3                   	ret

000000000001dc26 <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   1dc26:	55                   	push   %rbp
   1dc27:	48 89 e5             	mov    %rsp,%rbp
   1dc2a:	48 83 ec 10          	sub    $0x10,%rsp
   1dc2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
   1dc32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc36:	48 89 c7             	mov    %rax,%rdi
   1dc39:	e8 02 00 00 00       	call   1dc40 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>
   1dc3e:	c9                   	leave
   1dc3f:	c3                   	ret

000000000001dc40 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   1dc40:	55                   	push   %rbp
   1dc41:	48 89 e5             	mov    %rsp,%rbp
   1dc44:	48 83 ec 10          	sub    $0x10,%rsp
   1dc48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dc4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc50:	48 89 c7             	mov    %rax,%rdi
   1dc53:	e8 02 00 00 00       	call   1dc5a <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>
   1dc58:	c9                   	leave
   1dc59:	c3                   	ret

000000000001dc5a <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   1dc5a:	55                   	push   %rbp
   1dc5b:	48 89 e5             	mov    %rsp,%rbp
   1dc5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dc62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc66:	48 8b 00             	mov    (%rax),%rax
   1dc69:	5d                   	pop    %rbp
   1dc6a:	c3                   	ret
   1dc6b:	90                   	nop

000000000001dc6c <_ZNSt19bad_optional_accessD1Ev>:
    virtual ~bad_optional_access() = default;
   1dc6c:	55                   	push   %rbp
   1dc6d:	48 89 e5             	mov    %rsp,%rbp
   1dc70:	48 83 ec 10          	sub    $0x10,%rsp
   1dc74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dc78:	48 8d 15 e1 2c 02 00 	lea    0x22ce1(%rip),%rdx        # 40960 <_ZTVSt19bad_optional_access+0x10>
   1dc7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc83:	48 89 10             	mov    %rdx,(%rax)
   1dc86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc8a:	48 89 c7             	mov    %rax,%rdi
   1dc8d:	e8 4e 77 fe ff       	call   53e0 <_ZNSt9exceptionD2Ev@plt>
   1dc92:	90                   	nop
   1dc93:	c9                   	leave
   1dc94:	c3                   	ret
   1dc95:	90                   	nop

000000000001dc96 <_ZNSt19bad_optional_accessD0Ev>:
   1dc96:	55                   	push   %rbp
   1dc97:	48 89 e5             	mov    %rsp,%rbp
   1dc9a:	48 83 ec 10          	sub    $0x10,%rsp
   1dc9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dca6:	48 89 c7             	mov    %rax,%rdi
   1dca9:	e8 be ff ff ff       	call   1dc6c <_ZNSt19bad_optional_accessD1Ev>
   1dcae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dcb2:	be 08 00 00 00       	mov    $0x8,%esi
   1dcb7:	48 89 c7             	mov    %rax,%rdi
   1dcba:	e8 71 75 fe ff       	call   5230 <_ZdlPvm@plt>
   1dcbf:	c9                   	leave
   1dcc0:	c3                   	ret

000000000001dcc1 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
   1dcc1:	55                   	push   %rbp
   1dcc2:	48 89 e5             	mov    %rsp,%rbp
   1dcc5:	41 54                	push   %r12
   1dcc7:	53                   	push   %rbx
   1dcc8:	48 83 ec 30          	sub    $0x30,%rsp
   1dccc:	89 7d cc             	mov    %edi,-0x34(%rbp)
   1dccf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
   1dcd3:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   1dcd7:	0f 89 28 07 00 00    	jns    1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1dcdd:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
   1dce1:	0f 8d 3d 01 00 00    	jge    1de24 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
   1dce7:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   1dcee:	0f 84 19 05 00 00    	je     1e20d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
   1dcf4:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   1dcfb:	0f 8f 04 07 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1dd01:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   1dd08:	0f 84 37 05 00 00    	je     1e245 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
   1dd0e:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   1dd15:	0f 8f ea 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1dd1b:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   1dd22:	0f 84 55 05 00 00    	je     1e27d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
   1dd28:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   1dd2f:	0f 8f d0 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1dd35:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   1dd3c:	0f 84 73 05 00 00    	je     1e2b5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
   1dd42:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   1dd49:	0f 8f b6 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1dd4f:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   1dd56:	0f 84 91 05 00 00    	je     1e2ed <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
   1dd5c:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   1dd63:	0f 8f 9c 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1dd69:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   1dd70:	0f 84 af 05 00 00    	je     1e325 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
   1dd76:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   1dd7d:	0f 8f 82 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1dd83:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   1dd8a:	0f 84 9d 03 00 00    	je     1e12d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
   1dd90:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   1dd97:	0f 8f 68 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1dd9d:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   1dda4:	0f 84 bb 03 00 00    	je     1e165 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
   1ddaa:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   1ddb1:	0f 8f 4e 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1ddb7:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   1ddbe:	0f 84 99 05 00 00    	je     1e35d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
   1ddc4:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   1ddcb:	0f 8f 34 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1ddd1:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   1ddd8:	0f 84 bf 03 00 00    	je     1e19d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
   1ddde:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   1dde5:	0f 8f 1a 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1ddeb:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   1ddf2:	0f 84 9d 05 00 00    	je     1e395 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
   1ddf8:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   1ddff:	0f 8f 00 06 00 00    	jg     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1de05:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
   1de0c:	0f 84 bb 05 00 00    	je     1e3cd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
   1de12:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
   1de19:	0f 84 b6 03 00 00    	je     1e1d5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
   1de1f:	e9 e1 05 00 00       	jmp    1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1de24:	8b 45 cc             	mov    -0x34(%rbp),%eax
   1de27:	83 c0 0d             	add    $0xd,%eax
   1de2a:	83 f8 0c             	cmp    $0xc,%eax
   1de2d:	0f 87 d2 05 00 00    	ja     1e405 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1de33:	89 c0                	mov    %eax,%eax
   1de35:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1de3c:	00 
   1de3d:	48 8d 05 2c 0d 01 00 	lea    0x10d2c(%rip),%rax        # 2eb70 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   1de44:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1de47:	48 98                	cltq
   1de49:	48 8d 15 20 0d 01 00 	lea    0x10d20(%rip),%rdx        # 2eb70 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   1de50:	48 01 d0             	add    %rdx,%rax
   1de53:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   1de55:	bf 28 00 00 00       	mov    $0x28,%edi
   1de5a:	e8 71 72 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1de5f:	48 89 c3             	mov    %rax,%rbx
   1de62:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1de66:	48 89 c6             	mov    %rax,%rsi
   1de69:	48 89 df             	mov    %rbx,%rdi
   1de6c:	e8 55 9b fe ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
   1de71:	48 8d 05 7e ed fe ff 	lea    -0x11282(%rip),%rax        # cbf6 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
   1de78:	48 89 c2             	mov    %rax,%rdx
   1de7b:	48 8d 05 66 2e 02 00 	lea    0x22e66(%rip),%rax        # 40ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1de82:	48 89 c6             	mov    %rax,%rsi
   1de85:	48 89 df             	mov    %rbx,%rdi
   1de88:	e8 f3 74 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   1de8d:	bf 28 00 00 00       	mov    $0x28,%edi
   1de92:	e8 39 72 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1de97:	48 89 c3             	mov    %rax,%rbx
   1de9a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1de9e:	48 89 c6             	mov    %rax,%rsi
   1dea1:	48 89 df             	mov    %rbx,%rdi
   1dea4:	e8 ef 9b fe ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
   1dea9:	48 8d 05 d6 ec fe ff 	lea    -0x1132a(%rip),%rax        # cb86 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
   1deb0:	48 89 c2             	mov    %rax,%rdx
   1deb3:	48 8d 05 16 2e 02 00 	lea    0x22e16(%rip),%rax        # 40cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1deba:	48 89 c6             	mov    %rax,%rsi
   1debd:	48 89 df             	mov    %rbx,%rdi
   1dec0:	e8 bb 74 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   1dec5:	bf 28 00 00 00       	mov    $0x28,%edi
   1deca:	e8 01 72 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1decf:	48 89 c3             	mov    %rax,%rbx
   1ded2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ded6:	48 89 c6             	mov    %rax,%rsi
   1ded9:	48 89 df             	mov    %rbx,%rdi
   1dedc:	e8 89 9c fe ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
   1dee1:	48 8d 05 2e ec fe ff 	lea    -0x113d2(%rip),%rax        # cb16 <_ZN2vk25InitializationFailedErrorD1Ev>
   1dee8:	48 89 c2             	mov    %rax,%rdx
   1deeb:	48 8d 05 c6 2d 02 00 	lea    0x22dc6(%rip),%rax        # 40cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1def2:	48 89 c6             	mov    %rax,%rsi
   1def5:	48 89 df             	mov    %rbx,%rdi
   1def8:	e8 83 74 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   1defd:	bf 28 00 00 00       	mov    $0x28,%edi
   1df02:	e8 c9 71 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1df07:	48 89 c3             	mov    %rax,%rbx
   1df0a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1df0e:	48 89 c6             	mov    %rax,%rsi
   1df11:	48 89 df             	mov    %rbx,%rdi
   1df14:	e8 23 9d fe ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
   1df19:	48 8d 05 86 eb fe ff 	lea    -0x1147a(%rip),%rax        # caa6 <_ZN2vk15DeviceLostErrorD1Ev>
   1df20:	48 89 c2             	mov    %rax,%rdx
   1df23:	48 8d 05 76 2d 02 00 	lea    0x22d76(%rip),%rax        # 40ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1df2a:	48 89 c6             	mov    %rax,%rsi
   1df2d:	48 89 df             	mov    %rbx,%rdi
   1df30:	e8 4b 74 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   1df35:	bf 28 00 00 00       	mov    $0x28,%edi
   1df3a:	e8 91 71 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1df3f:	48 89 c3             	mov    %rax,%rbx
   1df42:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1df46:	48 89 c6             	mov    %rax,%rsi
   1df49:	48 89 df             	mov    %rbx,%rdi
   1df4c:	e8 bd 9d fe ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
   1df51:	48 8d 05 de ea fe ff 	lea    -0x11522(%rip),%rax        # ca36 <_ZN2vk20MemoryMapFailedErrorD1Ev>
   1df58:	48 89 c2             	mov    %rax,%rdx
   1df5b:	48 8d 05 26 2d 02 00 	lea    0x22d26(%rip),%rax        # 40c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1df62:	48 89 c6             	mov    %rax,%rsi
   1df65:	48 89 df             	mov    %rbx,%rdi
   1df68:	e8 13 74 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   1df6d:	bf 28 00 00 00       	mov    $0x28,%edi
   1df72:	e8 59 71 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1df77:	48 89 c3             	mov    %rax,%rbx
   1df7a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1df7e:	48 89 c6             	mov    %rax,%rsi
   1df81:	48 89 df             	mov    %rbx,%rdi
   1df84:	e8 57 9e fe ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
   1df89:	48 8d 05 36 ea fe ff 	lea    -0x115ca(%rip),%rax        # c9c6 <_ZN2vk20LayerNotPresentErrorD1Ev>
   1df90:	48 89 c2             	mov    %rax,%rdx
   1df93:	48 8d 05 d6 2c 02 00 	lea    0x22cd6(%rip),%rax        # 40c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1df9a:	48 89 c6             	mov    %rax,%rsi
   1df9d:	48 89 df             	mov    %rbx,%rdi
   1dfa0:	e8 db 73 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   1dfa5:	bf 28 00 00 00       	mov    $0x28,%edi
   1dfaa:	e8 21 71 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dfaf:	48 89 c3             	mov    %rax,%rbx
   1dfb2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dfb6:	48 89 c6             	mov    %rax,%rsi
   1dfb9:	48 89 df             	mov    %rbx,%rdi
   1dfbc:	e8 f1 9e fe ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
   1dfc1:	48 8d 05 8e e9 fe ff 	lea    -0x11672(%rip),%rax        # c956 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
   1dfc8:	48 89 c2             	mov    %rax,%rdx
   1dfcb:	48 8d 05 86 2c 02 00 	lea    0x22c86(%rip),%rax        # 40c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dfd2:	48 89 c6             	mov    %rax,%rsi
   1dfd5:	48 89 df             	mov    %rbx,%rdi
   1dfd8:	e8 a3 73 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   1dfdd:	bf 28 00 00 00       	mov    $0x28,%edi
   1dfe2:	e8 e9 70 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dfe7:	48 89 c3             	mov    %rax,%rbx
   1dfea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dfee:	48 89 c6             	mov    %rax,%rsi
   1dff1:	48 89 df             	mov    %rbx,%rdi
   1dff4:	e8 8b 9f fe ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
   1dff9:	48 8d 05 e6 e8 fe ff 	lea    -0x1171a(%rip),%rax        # c8e6 <_ZN2vk22FeatureNotPresentErrorD1Ev>
   1e000:	48 89 c2             	mov    %rax,%rdx
   1e003:	48 8d 05 36 2c 02 00 	lea    0x22c36(%rip),%rax        # 40c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e00a:	48 89 c6             	mov    %rax,%rsi
   1e00d:	48 89 df             	mov    %rbx,%rdi
   1e010:	e8 6b 73 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   1e015:	bf 28 00 00 00       	mov    $0x28,%edi
   1e01a:	e8 b1 70 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e01f:	48 89 c3             	mov    %rax,%rbx
   1e022:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e026:	48 89 c6             	mov    %rax,%rsi
   1e029:	48 89 df             	mov    %rbx,%rdi
   1e02c:	e8 25 a0 fe ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
   1e031:	48 8d 05 3e e8 fe ff 	lea    -0x117c2(%rip),%rax        # c876 <_ZN2vk23IncompatibleDriverErrorD1Ev>
   1e038:	48 89 c2             	mov    %rax,%rdx
   1e03b:	48 8d 05 e6 2b 02 00 	lea    0x22be6(%rip),%rax        # 40c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e042:	48 89 c6             	mov    %rax,%rsi
   1e045:	48 89 df             	mov    %rbx,%rdi
   1e048:	e8 33 73 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   1e04d:	bf 28 00 00 00       	mov    $0x28,%edi
   1e052:	e8 79 70 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e057:	48 89 c3             	mov    %rax,%rbx
   1e05a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e05e:	48 89 c6             	mov    %rax,%rsi
   1e061:	48 89 df             	mov    %rbx,%rdi
   1e064:	e8 bf a0 fe ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
   1e069:	48 8d 05 96 e7 fe ff 	lea    -0x1186a(%rip),%rax        # c806 <_ZN2vk19TooManyObjectsErrorD1Ev>
   1e070:	48 89 c2             	mov    %rax,%rdx
   1e073:	48 8d 05 96 2b 02 00 	lea    0x22b96(%rip),%rax        # 40c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e07a:	48 89 c6             	mov    %rax,%rsi
   1e07d:	48 89 df             	mov    %rbx,%rdi
   1e080:	e8 fb 72 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   1e085:	bf 28 00 00 00       	mov    $0x28,%edi
   1e08a:	e8 41 70 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e08f:	48 89 c3             	mov    %rax,%rbx
   1e092:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e096:	48 89 c6             	mov    %rax,%rsi
   1e099:	48 89 df             	mov    %rbx,%rdi
   1e09c:	e8 59 a1 fe ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
   1e0a1:	48 8d 05 ee e6 fe ff 	lea    -0x11912(%rip),%rax        # c796 <_ZN2vk23FormatNotSupportedErrorD1Ev>
   1e0a8:	48 89 c2             	mov    %rax,%rdx
   1e0ab:	48 8d 05 46 2b 02 00 	lea    0x22b46(%rip),%rax        # 40bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e0b2:	48 89 c6             	mov    %rax,%rsi
   1e0b5:	48 89 df             	mov    %rbx,%rdi
   1e0b8:	e8 c3 72 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   1e0bd:	bf 28 00 00 00       	mov    $0x28,%edi
   1e0c2:	e8 09 70 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e0c7:	48 89 c3             	mov    %rax,%rbx
   1e0ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e0ce:	48 89 c6             	mov    %rax,%rsi
   1e0d1:	48 89 df             	mov    %rbx,%rdi
   1e0d4:	e8 f3 a1 fe ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
   1e0d9:	48 8d 05 46 e6 fe ff 	lea    -0x119ba(%rip),%rax        # c726 <_ZN2vk19FragmentedPoolErrorD1Ev>
   1e0e0:	48 89 c2             	mov    %rax,%rdx
   1e0e3:	48 8d 05 f6 2a 02 00 	lea    0x22af6(%rip),%rax        # 40be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e0ea:	48 89 c6             	mov    %rax,%rsi
   1e0ed:	48 89 df             	mov    %rbx,%rdi
   1e0f0:	e8 8b 72 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   1e0f5:	bf 28 00 00 00       	mov    $0x28,%edi
   1e0fa:	e8 d1 6f fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e0ff:	48 89 c3             	mov    %rax,%rbx
   1e102:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e106:	48 89 c6             	mov    %rax,%rsi
   1e109:	48 89 df             	mov    %rbx,%rdi
   1e10c:	e8 8d a2 fe ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
   1e111:	48 8d 05 9e e5 fe ff 	lea    -0x11a62(%rip),%rax        # c6b6 <_ZN2vk12UnknownErrorD1Ev>
   1e118:	48 89 c2             	mov    %rax,%rdx
   1e11b:	48 8d 05 a6 2a 02 00 	lea    0x22aa6(%rip),%rax        # 40bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e122:	48 89 c6             	mov    %rax,%rsi
   1e125:	48 89 df             	mov    %rbx,%rdi
   1e128:	e8 53 72 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   1e12d:	bf 28 00 00 00       	mov    $0x28,%edi
   1e132:	e8 99 6f fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e137:	48 89 c3             	mov    %rax,%rbx
   1e13a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e13e:	48 89 c6             	mov    %rax,%rsi
   1e141:	48 89 df             	mov    %rbx,%rdi
   1e144:	e8 27 a3 fe ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
   1e149:	48 8d 05 f6 e4 fe ff 	lea    -0x11b0a(%rip),%rax        # c646 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
   1e150:	48 89 c2             	mov    %rax,%rdx
   1e153:	48 8d 05 56 2a 02 00 	lea    0x22a56(%rip),%rax        # 40bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e15a:	48 89 c6             	mov    %rax,%rsi
   1e15d:	48 89 df             	mov    %rbx,%rdi
   1e160:	e8 1b 72 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   1e165:	bf 28 00 00 00       	mov    $0x28,%edi
   1e16a:	e8 61 6f fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e16f:	48 89 c3             	mov    %rax,%rbx
   1e172:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e176:	48 89 c6             	mov    %rax,%rsi
   1e179:	48 89 df             	mov    %rbx,%rdi
   1e17c:	e8 c1 a3 fe ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
   1e181:	48 8d 05 4e e4 fe ff 	lea    -0x11bb2(%rip),%rax        # c5d6 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
   1e188:	48 89 c2             	mov    %rax,%rdx
   1e18b:	48 8d 05 06 2a 02 00 	lea    0x22a06(%rip),%rax        # 40b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e192:	48 89 c6             	mov    %rax,%rsi
   1e195:	48 89 df             	mov    %rbx,%rdi
   1e198:	e8 e3 71 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   1e19d:	bf 28 00 00 00       	mov    $0x28,%edi
   1e1a2:	e8 29 6f fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e1a7:	48 89 c3             	mov    %rax,%rbx
   1e1aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e1ae:	48 89 c6             	mov    %rax,%rsi
   1e1b1:	48 89 df             	mov    %rbx,%rdi
   1e1b4:	e8 5b a4 fe ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
   1e1b9:	48 8d 05 a6 e3 fe ff 	lea    -0x11c5a(%rip),%rax        # c566 <_ZN2vk18FragmentationErrorD1Ev>
   1e1c0:	48 89 c2             	mov    %rax,%rdx
   1e1c3:	48 8d 05 b6 29 02 00 	lea    0x229b6(%rip),%rax        # 40b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e1ca:	48 89 c6             	mov    %rax,%rsi
   1e1cd:	48 89 df             	mov    %rbx,%rdi
   1e1d0:	e8 ab 71 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   1e1d5:	bf 28 00 00 00       	mov    $0x28,%edi
   1e1da:	e8 f1 6e fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e1df:	48 89 c3             	mov    %rax,%rbx
   1e1e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e1e6:	48 89 c6             	mov    %rax,%rsi
   1e1e9:	48 89 df             	mov    %rbx,%rdi
   1e1ec:	e8 f5 a4 fe ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
   1e1f1:	48 8d 05 fe e2 fe ff 	lea    -0x11d02(%rip),%rax        # c4f6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
   1e1f8:	48 89 c2             	mov    %rax,%rdx
   1e1fb:	48 8d 05 66 29 02 00 	lea    0x22966(%rip),%rax        # 40b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e202:	48 89 c6             	mov    %rax,%rsi
   1e205:	48 89 df             	mov    %rbx,%rdi
   1e208:	e8 73 71 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   1e20d:	bf 28 00 00 00       	mov    $0x28,%edi
   1e212:	e8 b9 6e fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e217:	48 89 c3             	mov    %rax,%rbx
   1e21a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e21e:	48 89 c6             	mov    %rax,%rsi
   1e221:	48 89 df             	mov    %rbx,%rdi
   1e224:	e8 8f a5 fe ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
   1e229:	48 8d 05 56 e2 fe ff 	lea    -0x11daa(%rip),%rax        # c486 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
   1e230:	48 89 c2             	mov    %rax,%rdx
   1e233:	48 8d 05 16 29 02 00 	lea    0x22916(%rip),%rax        # 40b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e23a:	48 89 c6             	mov    %rax,%rsi
   1e23d:	48 89 df             	mov    %rbx,%rdi
   1e240:	e8 3b 71 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   1e245:	bf 28 00 00 00       	mov    $0x28,%edi
   1e24a:	e8 81 6e fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e24f:	48 89 c3             	mov    %rax,%rbx
   1e252:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e256:	48 89 c6             	mov    %rax,%rsi
   1e259:	48 89 df             	mov    %rbx,%rdi
   1e25c:	e8 29 a6 fe ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
   1e261:	48 8d 05 ae e1 fe ff 	lea    -0x11e52(%rip),%rax        # c416 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
   1e268:	48 89 c2             	mov    %rax,%rdx
   1e26b:	48 8d 05 c6 28 02 00 	lea    0x228c6(%rip),%rax        # 40b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e272:	48 89 c6             	mov    %rax,%rsi
   1e275:	48 89 df             	mov    %rbx,%rdi
   1e278:	e8 03 71 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   1e27d:	bf 28 00 00 00       	mov    $0x28,%edi
   1e282:	e8 49 6e fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e287:	48 89 c3             	mov    %rax,%rbx
   1e28a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e28e:	48 89 c6             	mov    %rax,%rsi
   1e291:	48 89 df             	mov    %rbx,%rdi
   1e294:	e8 c3 a6 fe ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
   1e299:	48 8d 05 06 e1 fe ff 	lea    -0x11efa(%rip),%rax        # c3a6 <_ZN2vk17OutOfDateKHRErrorD1Ev>
   1e2a0:	48 89 c2             	mov    %rax,%rdx
   1e2a3:	48 8d 05 76 28 02 00 	lea    0x22876(%rip),%rax        # 40b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e2aa:	48 89 c6             	mov    %rax,%rsi
   1e2ad:	48 89 df             	mov    %rbx,%rdi
   1e2b0:	e8 cb 70 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   1e2b5:	bf 28 00 00 00       	mov    $0x28,%edi
   1e2ba:	e8 11 6e fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e2bf:	48 89 c3             	mov    %rax,%rbx
   1e2c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e2c6:	48 89 c6             	mov    %rax,%rsi
   1e2c9:	48 89 df             	mov    %rbx,%rdi
   1e2cc:	e8 5d a7 fe ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
   1e2d1:	48 8d 05 5e e0 fe ff 	lea    -0x11fa2(%rip),%rax        # c336 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
   1e2d8:	48 89 c2             	mov    %rax,%rdx
   1e2db:	48 8d 05 26 28 02 00 	lea    0x22826(%rip),%rax        # 40b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e2e2:	48 89 c6             	mov    %rax,%rsi
   1e2e5:	48 89 df             	mov    %rbx,%rdi
   1e2e8:	e8 93 70 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   1e2ed:	bf 28 00 00 00       	mov    $0x28,%edi
   1e2f2:	e8 d9 6d fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e2f7:	48 89 c3             	mov    %rax,%rbx
   1e2fa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e2fe:	48 89 c6             	mov    %rax,%rsi
   1e301:	48 89 df             	mov    %rbx,%rdi
   1e304:	e8 f7 a7 fe ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
   1e309:	48 8d 05 b6 df fe ff 	lea    -0x1204a(%rip),%rax        # c2c6 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
   1e310:	48 89 c2             	mov    %rax,%rdx
   1e313:	48 8d 05 d6 27 02 00 	lea    0x227d6(%rip),%rax        # 40af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e31a:	48 89 c6             	mov    %rax,%rsi
   1e31d:	48 89 df             	mov    %rbx,%rdi
   1e320:	e8 5b 70 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   1e325:	bf 28 00 00 00       	mov    $0x28,%edi
   1e32a:	e8 a1 6d fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e32f:	48 89 c3             	mov    %rax,%rbx
   1e332:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e336:	48 89 c6             	mov    %rax,%rsi
   1e339:	48 89 df             	mov    %rbx,%rdi
   1e33c:	e8 91 a8 fe ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
   1e341:	48 8d 05 0e df fe ff 	lea    -0x120f2(%rip),%rax        # c256 <_ZN2vk20InvalidShaderNVErrorD1Ev>
   1e348:	48 89 c2             	mov    %rax,%rdx
   1e34b:	48 8d 05 86 27 02 00 	lea    0x22786(%rip),%rax        # 40ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e352:	48 89 c6             	mov    %rax,%rsi
   1e355:	48 89 df             	mov    %rbx,%rdi
   1e358:	e8 23 70 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   1e35d:	bf 28 00 00 00       	mov    $0x28,%edi
   1e362:	e8 69 6d fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e367:	48 89 c3             	mov    %rax,%rbx
   1e36a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e36e:	48 89 c6             	mov    %rax,%rsi
   1e371:	48 89 df             	mov    %rbx,%rdi
   1e374:	e8 2b a9 fe ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
   1e379:	48 8d 05 66 de fe ff 	lea    -0x1219a(%rip),%rax        # c1e6 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
   1e380:	48 89 c2             	mov    %rax,%rdx
   1e383:	48 8d 05 36 27 02 00 	lea    0x22736(%rip),%rax        # 40ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e38a:	48 89 c6             	mov    %rax,%rsi
   1e38d:	48 89 df             	mov    %rbx,%rdi
   1e390:	e8 eb 6f fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   1e395:	bf 28 00 00 00       	mov    $0x28,%edi
   1e39a:	e8 31 6d fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e39f:	48 89 c3             	mov    %rax,%rbx
   1e3a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e3a6:	48 89 c6             	mov    %rax,%rsi
   1e3a9:	48 89 df             	mov    %rbx,%rdi
   1e3ac:	e8 c5 a9 fe ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
   1e3b1:	48 8d 05 be dd fe ff 	lea    -0x12242(%rip),%rax        # c176 <_ZN2vk20NotPermittedKHRErrorD1Ev>
   1e3b8:	48 89 c2             	mov    %rax,%rdx
   1e3bb:	48 8d 05 e6 26 02 00 	lea    0x226e6(%rip),%rax        # 40aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e3c2:	48 89 c6             	mov    %rax,%rsi
   1e3c5:	48 89 df             	mov    %rbx,%rdi
   1e3c8:	e8 b3 6f fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   1e3cd:	bf 28 00 00 00       	mov    $0x28,%edi
   1e3d2:	e8 f9 6c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e3d7:	48 89 c3             	mov    %rax,%rbx
   1e3da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e3de:	48 89 c6             	mov    %rax,%rsi
   1e3e1:	48 89 df             	mov    %rbx,%rdi
   1e3e4:	e8 5f aa fe ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
   1e3e9:	48 8d 05 16 dd fe ff 	lea    -0x122ea(%rip),%rax        # c106 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
   1e3f0:	48 89 c2             	mov    %rax,%rdx
   1e3f3:	48 8d 05 96 26 02 00 	lea    0x22696(%rip),%rax        # 40a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e3fa:	48 89 c6             	mov    %rax,%rsi
   1e3fd:	48 89 df             	mov    %rbx,%rdi
   1e400:	e8 7b 6f fe ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
   1e405:	bf 28 00 00 00       	mov    $0x28,%edi
   1e40a:	e8 c1 6c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e40f:	48 89 c3             	mov    %rax,%rbx
   1e412:	8b 45 cc             	mov    -0x34(%rbp),%eax
   1e415:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
   1e418:	0f b6 05 39 2f 02 00 	movzbl 0x22f39(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
   1e41f:	84 c0                	test   %al,%al
   1e421:	0f 94 c0             	sete   %al
   1e424:	84 c0                	test   %al,%al
   1e426:	74 4a                	je     1e472 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   1e428:	48 8d 05 29 2f 02 00 	lea    0x22f29(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
   1e42f:	48 89 c7             	mov    %rax,%rdi
   1e432:	e8 89 6f fe ff       	call   53c0 <__cxa_guard_acquire@plt>
   1e437:	85 c0                	test   %eax,%eax
   1e439:	0f 95 c0             	setne  %al
   1e43c:	84 c0                	test   %al,%al
   1e43e:	74 32                	je     1e472 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   1e440:	48 8d 05 b1 2d 02 00 	lea    0x22db1(%rip),%rax        # 411f8 <__dso_handle>
   1e447:	48 89 c2             	mov    %rax,%rdx
   1e44a:	48 8d 05 af 2d 02 00 	lea    0x22daf(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
   1e451:	48 89 c6             	mov    %rax,%rsi
   1e454:	48 8d 05 0b e8 fe ff 	lea    -0x117f5(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
   1e45b:	48 89 c7             	mov    %rax,%rdi
   1e45e:	e8 6d 6d fe ff       	call   51d0 <__cxa_atexit@plt>
   1e463:	48 8d 05 ee 2e 02 00 	lea    0x22eee(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
   1e46a:	48 89 c7             	mov    %rax,%rdi
   1e46d:	e8 8e 6c fe ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
   1e472:	48 8d 15 87 2d 02 00 	lea    0x22d87(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
   1e479:	8b 4d ec             	mov    -0x14(%rbp),%ecx
   1e47c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1e480:	89 ce                	mov    %ecx,%esi
   1e482:	48 89 c7             	mov    %rax,%rdi
   1e485:	e8 7e 7e fe ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
   1e48a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e48e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
   1e492:	48 89 c6             	mov    %rax,%rsi
   1e495:	48 89 d7             	mov    %rdx,%rdi
   1e498:	89 f1                	mov    %esi,%ecx
   1e49a:	48 89 d0             	mov    %rdx,%rax
   1e49d:	89 ce                	mov    %ecx,%esi
   1e49f:	48 89 c2             	mov    %rax,%rdx
   1e4a2:	48 89 df             	mov    %rbx,%rdi
   1e4a5:	e8 66 93 fe ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
   1e4aa:	48 8d 05 95 94 fe ff 	lea    -0x16b6b(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
   1e4b1:	48 89 c2             	mov    %rax,%rdx
   1e4b4:	48 8d 05 45 28 02 00 	lea    0x22845(%rip),%rax        # 40d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
   1e4bb:	48 89 c6             	mov    %rax,%rsi
   1e4be:	48 89 df             	mov    %rbx,%rdi
   1e4c1:	e8 ba 6e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   1e4c6:	49 89 c4             	mov    %rax,%r12
   1e4c9:	48 89 df             	mov    %rbx,%rdi
   1e4cc:	e8 7f 6c fe ff       	call   5150 <__cxa_free_exception@plt>
   1e4d1:	4c 89 e0             	mov    %r12,%rax
   1e4d4:	48 89 c7             	mov    %rax,%rdi
   1e4d7:	e8 c4 6e fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   1e4dc:	49 89 c4             	mov    %rax,%r12
   1e4df:	48 89 df             	mov    %rbx,%rdi
   1e4e2:	e8 69 6c fe ff       	call   5150 <__cxa_free_exception@plt>
   1e4e7:	4c 89 e0             	mov    %r12,%rax
   1e4ea:	48 89 c7             	mov    %rax,%rdi
   1e4ed:	e8 ae 6e fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   1e4f2:	49 89 c4             	mov    %rax,%r12
   1e4f5:	48 89 df             	mov    %rbx,%rdi
   1e4f8:	e8 53 6c fe ff       	call   5150 <__cxa_free_exception@plt>
   1e4fd:	4c 89 e0             	mov    %r12,%rax
   1e500:	48 89 c7             	mov    %rax,%rdi
   1e503:	e8 98 6e fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   1e508:	49 89 c4             	mov    %rax,%r12
   1e50b:	48 89 df             	mov    %rbx,%rdi
   1e50e:	e8 3d 6c fe ff       	call   5150 <__cxa_free_exception@plt>
   1e513:	4c 89 e0             	mov    %r12,%rax
   1e516:	48 89 c7             	mov    %rax,%rdi
   1e519:	e8 82 6e fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   1e51e:	49 89 c4             	mov    %rax,%r12
   1e521:	48 89 df             	mov    %rbx,%rdi
   1e524:	e8 27 6c fe ff       	call   5150 <__cxa_free_exception@plt>
   1e529:	4c 89 e0             	mov    %r12,%rax
   1e52c:	48 89 c7             	mov    %rax,%rdi
   1e52f:	e8 6c 6e fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   1e534:	49 89 c4             	mov    %rax,%r12
   1e537:	48 89 df             	mov    %rbx,%rdi
   1e53a:	e8 11 6c fe ff       	call   5150 <__cxa_free_exception@plt>
   1e53f:	4c 89 e0             	mov    %r12,%rax
   1e542:	48 89 c7             	mov    %rax,%rdi
   1e545:	e8 56 6e fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   1e54a:	49 89 c4             	mov    %rax,%r12
   1e54d:	48 89 df             	mov    %rbx,%rdi
   1e550:	e8 fb 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e555:	4c 89 e0             	mov    %r12,%rax
   1e558:	48 89 c7             	mov    %rax,%rdi
   1e55b:	e8 40 6e fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   1e560:	49 89 c4             	mov    %rax,%r12
   1e563:	48 89 df             	mov    %rbx,%rdi
   1e566:	e8 e5 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e56b:	4c 89 e0             	mov    %r12,%rax
   1e56e:	48 89 c7             	mov    %rax,%rdi
   1e571:	e8 2a 6e fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   1e576:	49 89 c4             	mov    %rax,%r12
   1e579:	48 89 df             	mov    %rbx,%rdi
   1e57c:	e8 cf 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e581:	4c 89 e0             	mov    %r12,%rax
   1e584:	48 89 c7             	mov    %rax,%rdi
   1e587:	e8 14 6e fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   1e58c:	49 89 c4             	mov    %rax,%r12
   1e58f:	48 89 df             	mov    %rbx,%rdi
   1e592:	e8 b9 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e597:	4c 89 e0             	mov    %r12,%rax
   1e59a:	48 89 c7             	mov    %rax,%rdi
   1e59d:	e8 fe 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   1e5a2:	49 89 c4             	mov    %rax,%r12
   1e5a5:	48 89 df             	mov    %rbx,%rdi
   1e5a8:	e8 a3 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e5ad:	4c 89 e0             	mov    %r12,%rax
   1e5b0:	48 89 c7             	mov    %rax,%rdi
   1e5b3:	e8 e8 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   1e5b8:	49 89 c4             	mov    %rax,%r12
   1e5bb:	48 89 df             	mov    %rbx,%rdi
   1e5be:	e8 8d 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e5c3:	4c 89 e0             	mov    %r12,%rax
   1e5c6:	48 89 c7             	mov    %rax,%rdi
   1e5c9:	e8 d2 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   1e5ce:	49 89 c4             	mov    %rax,%r12
   1e5d1:	48 89 df             	mov    %rbx,%rdi
   1e5d4:	e8 77 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e5d9:	4c 89 e0             	mov    %r12,%rax
   1e5dc:	48 89 c7             	mov    %rax,%rdi
   1e5df:	e8 bc 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   1e5e4:	49 89 c4             	mov    %rax,%r12
   1e5e7:	48 89 df             	mov    %rbx,%rdi
   1e5ea:	e8 61 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e5ef:	4c 89 e0             	mov    %r12,%rax
   1e5f2:	48 89 c7             	mov    %rax,%rdi
   1e5f5:	e8 a6 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   1e5fa:	49 89 c4             	mov    %rax,%r12
   1e5fd:	48 89 df             	mov    %rbx,%rdi
   1e600:	e8 4b 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e605:	4c 89 e0             	mov    %r12,%rax
   1e608:	48 89 c7             	mov    %rax,%rdi
   1e60b:	e8 90 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   1e610:	49 89 c4             	mov    %rax,%r12
   1e613:	48 89 df             	mov    %rbx,%rdi
   1e616:	e8 35 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e61b:	4c 89 e0             	mov    %r12,%rax
   1e61e:	48 89 c7             	mov    %rax,%rdi
   1e621:	e8 7a 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   1e626:	49 89 c4             	mov    %rax,%r12
   1e629:	48 89 df             	mov    %rbx,%rdi
   1e62c:	e8 1f 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e631:	4c 89 e0             	mov    %r12,%rax
   1e634:	48 89 c7             	mov    %rax,%rdi
   1e637:	e8 64 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   1e63c:	49 89 c4             	mov    %rax,%r12
   1e63f:	48 89 df             	mov    %rbx,%rdi
   1e642:	e8 09 6b fe ff       	call   5150 <__cxa_free_exception@plt>
   1e647:	4c 89 e0             	mov    %r12,%rax
   1e64a:	48 89 c7             	mov    %rax,%rdi
   1e64d:	e8 4e 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   1e652:	49 89 c4             	mov    %rax,%r12
   1e655:	48 89 df             	mov    %rbx,%rdi
   1e658:	e8 f3 6a fe ff       	call   5150 <__cxa_free_exception@plt>
   1e65d:	4c 89 e0             	mov    %r12,%rax
   1e660:	48 89 c7             	mov    %rax,%rdi
   1e663:	e8 38 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   1e668:	49 89 c4             	mov    %rax,%r12
   1e66b:	48 89 df             	mov    %rbx,%rdi
   1e66e:	e8 dd 6a fe ff       	call   5150 <__cxa_free_exception@plt>
   1e673:	4c 89 e0             	mov    %r12,%rax
   1e676:	48 89 c7             	mov    %rax,%rdi
   1e679:	e8 22 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   1e67e:	49 89 c4             	mov    %rax,%r12
   1e681:	48 89 df             	mov    %rbx,%rdi
   1e684:	e8 c7 6a fe ff       	call   5150 <__cxa_free_exception@plt>
   1e689:	4c 89 e0             	mov    %r12,%rax
   1e68c:	48 89 c7             	mov    %rax,%rdi
   1e68f:	e8 0c 6d fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   1e694:	49 89 c4             	mov    %rax,%r12
   1e697:	48 89 df             	mov    %rbx,%rdi
   1e69a:	e8 b1 6a fe ff       	call   5150 <__cxa_free_exception@plt>
   1e69f:	4c 89 e0             	mov    %r12,%rax
   1e6a2:	48 89 c7             	mov    %rax,%rdi
   1e6a5:	e8 f6 6c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   1e6aa:	49 89 c4             	mov    %rax,%r12
   1e6ad:	48 89 df             	mov    %rbx,%rdi
   1e6b0:	e8 9b 6a fe ff       	call   5150 <__cxa_free_exception@plt>
   1e6b5:	4c 89 e0             	mov    %r12,%rax
   1e6b8:	48 89 c7             	mov    %rax,%rdi
   1e6bb:	e8 e0 6c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   1e6c0:	49 89 c4             	mov    %rax,%r12
   1e6c3:	48 89 df             	mov    %rbx,%rdi
   1e6c6:	e8 85 6a fe ff       	call   5150 <__cxa_free_exception@plt>
   1e6cb:	4c 89 e0             	mov    %r12,%rax
   1e6ce:	48 89 c7             	mov    %rax,%rdi
   1e6d1:	e8 ca 6c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   1e6d6:	49 89 c4             	mov    %rax,%r12
   1e6d9:	48 89 df             	mov    %rbx,%rdi
   1e6dc:	e8 6f 6a fe ff       	call   5150 <__cxa_free_exception@plt>
   1e6e1:	4c 89 e0             	mov    %r12,%rax
   1e6e4:	48 89 c7             	mov    %rax,%rdi
   1e6e7:	e8 b4 6c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   1e6ec:	49 89 c4             	mov    %rax,%r12
   1e6ef:	48 89 df             	mov    %rbx,%rdi
   1e6f2:	e8 59 6a fe ff       	call   5150 <__cxa_free_exception@plt>
   1e6f7:	4c 89 e0             	mov    %r12,%rax
   1e6fa:	48 89 c7             	mov    %rax,%rdi
   1e6fd:	e8 9e 6c fe ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
   1e702:	49 89 c4             	mov    %rax,%r12
   1e705:	48 89 df             	mov    %rbx,%rdi
   1e708:	e8 43 6a fe ff       	call   5150 <__cxa_free_exception@plt>
   1e70d:	4c 89 e0             	mov    %r12,%rax
   1e710:	48 89 c7             	mov    %rax,%rdi
   1e713:	e8 88 6c fe ff       	call   53a0 <_Unwind_Resume@plt>

000000000001e718 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE>:

namespace rtvc {

SwapchainWrapper makeSwapchain(const vk::raii::SurfaceKHR &surface,
                               const DeviceWrapper &device,
                               vk::PresentModeKHR preferredPresentMode) {
   1e718:	55                   	push   %rbp
   1e719:	48 89 e5             	mov    %rsp,%rbp
   1e71c:	41 56                	push   %r14
   1e71e:	41 55                	push   %r13
   1e720:	41 54                	push   %r12
   1e722:	53                   	push   %rbx
   1e723:	48 81 ec e0 01 00 00 	sub    $0x1e0,%rsp
   1e72a:	48 89 bd 18 fe ff ff 	mov    %rdi,-0x1e8(%rbp)
   1e731:	48 89 b5 10 fe ff ff 	mov    %rsi,-0x1f0(%rbp)
   1e738:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
   1e73f:	89 8d 04 fe ff ff    	mov    %ecx,-0x1fc(%rbp)
  auto surfaceCapabilities =
      device.physical.getSurfaceCapabilitiesKHR(*surface);
   1e745:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
   1e74c:	48 8d 58 18          	lea    0x18(%rax),%rbx
   1e750:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
   1e757:	48 89 c7             	mov    %rax,%rdi
   1e75a:	e8 6f 84 ff ff       	call   16bce <_ZNK2vk4raii10SurfaceKHRdeEv>
   1e75f:	48 89 5d a0          	mov    %rbx,-0x60(%rbp)
   1e763:	48 8b 00             	mov    (%rax),%rax
   1e766:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE VULKAN_HPP_NAMESPACE::SurfaceCapabilitiesKHR
                                           PhysicalDevice::getSurfaceCapabilitiesKHR( VULKAN_HPP_NAMESPACE::SurfaceKHR surface ) const
    {
      VULKAN_HPP_ASSERT( getDispatcher()->vkGetPhysicalDeviceSurfaceCapabilitiesKHR &&
   1e76d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1e771:	48 89 c7             	mov    %rax,%rdi
   1e774:	e8 9b 7e ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1e779:	48 8b 80 80 02 00 00 	mov    0x280(%rax),%rax
   1e780:	48 85 c0             	test   %rax,%rax
   1e783:	75 28                	jne    1e7ad <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x95>
   1e785:	48 8d 05 44 05 01 00 	lea    0x10544(%rip),%rax        # 2ecd0 <_ZNSt8__detailL19__atomic_spin_countE+0x11c>
   1e78c:	48 89 c1             	mov    %rax,%rcx
   1e78f:	ba 19 32 00 00       	mov    $0x3219,%edx
   1e794:	48 8d 05 75 04 01 00 	lea    0x10475(%rip),%rax        # 2ec10 <_ZNSt8__detailL19__atomic_spin_countE+0x5c>
   1e79b:	48 89 c6             	mov    %rax,%rsi
   1e79e:	48 8d 05 93 05 01 00 	lea    0x10593(%rip),%rax        # 2ed38 <_ZNSt8__detailL19__atomic_spin_countE+0x184>
   1e7a5:	48 89 c7             	mov    %rax,%rdi
   1e7a8:	e8 63 69 fe ff       	call   5110 <__assert_fail@plt>
                         "Function <vkGetPhysicalDeviceSurfaceCapabilitiesKHR> needs extension <VK_KHR_surface> enabled!" );

      VULKAN_HPP_NAMESPACE::SurfaceCapabilitiesKHR surfaceCapabilities;
   1e7ad:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1e7b1:	0f 29 85 10 ff ff ff 	movaps %xmm0,-0xf0(%rbp)
   1e7b8:	0f 29 85 20 ff ff ff 	movaps %xmm0,-0xe0(%rbp)
   1e7bf:	0f 29 85 30 ff ff ff 	movaps %xmm0,-0xd0(%rbp)
   1e7c6:	66 0f 7e 85 40 ff ff 	movd   %xmm0,-0xc0(%rbp)
   1e7cd:	ff 
   1e7ce:	c7 85 38 ff ff ff 01 	movl   $0x1,-0xc8(%rbp)
   1e7d5:	00 00 00 
      VkResult result = getDispatcher()->vkGetPhysicalDeviceSurfaceCapabilitiesKHR( static_cast<VkPhysicalDevice>( m_physicalDevice ),
   1e7d8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1e7dc:	48 89 c7             	mov    %rax,%rdi
   1e7df:	e8 30 7e ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1e7e4:	48 8b 98 80 02 00 00 	mov    0x280(%rax),%rbx
   1e7eb:	48 8d 85 38 fe ff ff 	lea    -0x1c8(%rbp),%rax
   1e7f2:	48 89 c7             	mov    %rax,%rdi
   1e7f5:	e8 3e a7 fe ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
   1e7fa:	49 89 c4             	mov    %rax,%r12
   1e7fd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1e801:	48 89 c7             	mov    %rax,%rdi
   1e804:	e8 33 10 ff ff       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
   1e809:	48 89 c1             	mov    %rax,%rcx
   1e80c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
   1e813:	48 89 c2             	mov    %rax,%rdx
   1e816:	4c 89 e6             	mov    %r12,%rsi
   1e819:	48 89 cf             	mov    %rcx,%rdi
   1e81c:	ff d3                	call   *%rbx
   1e81e:	89 45 9c             	mov    %eax,-0x64(%rbp)
   1e821:	8b 45 9c             	mov    -0x64(%rbp),%eax
   1e824:	89 45 98             	mov    %eax,-0x68(%rbp)
   1e827:	48 8d 05 aa 05 01 00 	lea    0x105aa(%rip),%rax        # 2edd8 <_ZNSt8__detailL19__atomic_spin_countE+0x224>
   1e82e:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    if ( result != Result::eSuccess )
   1e832:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
   1e836:	74 11                	je     1e849 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x131>
      throwResultException( result, message );
   1e838:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   1e83c:	8b 45 98             	mov    -0x68(%rbp),%eax
   1e83f:	48 89 d6             	mov    %rdx,%rsi
   1e842:	89 c7                	mov    %eax,%edi
   1e844:	e8 78 f4 ff ff       	call   1dcc1 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
   1e849:	90                   	nop
                                                                                    static_cast<VkSurfaceKHR>( surface ),
                                                                                    reinterpret_cast<VkSurfaceCapabilitiesKHR *>( &surfaceCapabilities ) );
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::getSurfaceCapabilitiesKHR" );

      return surfaceCapabilities;
   1e84a:	90                   	nop
  auto surfaceFormats = device.physical.getSurfaceFormatsKHR(*surface);
   1e84b:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
   1e852:	48 8d 58 18          	lea    0x18(%rax),%rbx
   1e856:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
   1e85d:	48 89 c7             	mov    %rax,%rdi
   1e860:	e8 69 83 ff ff       	call   16bce <_ZNK2vk4raii10SurfaceKHRdeEv>
   1e865:	48 89 5d 88          	mov    %rbx,-0x78(%rbp)
   1e869:	48 8b 00             	mov    (%rax),%rax
   1e86c:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
   1e873:	48 8d 9d f0 fe ff ff 	lea    -0x110(%rbp),%rbx
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE std::vector<VULKAN_HPP_NAMESPACE::SurfaceFormatKHR>
                                           PhysicalDevice::getSurfaceFormatsKHR( VULKAN_HPP_NAMESPACE::SurfaceKHR surface ) const
    {
      VULKAN_HPP_ASSERT( getDispatcher()->vkGetPhysicalDeviceSurfaceFormatsKHR &&
   1e87a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1e87e:	48 89 c7             	mov    %rax,%rdi
   1e881:	e8 8e 7d ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1e886:	48 8b 80 88 02 00 00 	mov    0x288(%rax),%rax
   1e88d:	48 85 c0             	test   %rax,%rax
   1e890:	75 28                	jne    1e8ba <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x1a2>
   1e892:	48 8d 05 6f 05 01 00 	lea    0x1056f(%rip),%rax        # 2ee08 <_ZNSt8__detailL19__atomic_spin_countE+0x254>
   1e899:	48 89 c1             	mov    %rax,%rcx
   1e89c:	ba 28 32 00 00       	mov    $0x3228,%edx
   1e8a1:	48 8d 05 68 03 01 00 	lea    0x10368(%rip),%rax        # 2ec10 <_ZNSt8__detailL19__atomic_spin_countE+0x5c>
   1e8a8:	48 89 c6             	mov    %rax,%rsi
   1e8ab:	48 8d 05 be 05 01 00 	lea    0x105be(%rip),%rax        # 2ee70 <_ZNSt8__detailL19__atomic_spin_countE+0x2bc>
   1e8b2:	48 89 c7             	mov    %rax,%rdi
   1e8b5:	e8 56 68 fe ff       	call   5110 <__assert_fail@plt>
                         "Function <vkGetPhysicalDeviceSurfaceFormatsKHR> needs extension <VK_KHR_surface> enabled!" );

      std::vector<VULKAN_HPP_NAMESPACE::SurfaceFormatKHR> surfaceFormats;
   1e8ba:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1e8be:	0f 11 03             	movups %xmm0,(%rbx)
   1e8c1:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      uint32_t                                            surfaceFormatCount;
      VkResult                                            result;
      do
      {
        result = getDispatcher()->vkGetPhysicalDeviceSurfaceFormatsKHR(
   1e8c6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1e8ca:	48 89 c7             	mov    %rax,%rdi
   1e8cd:	e8 42 7d ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1e8d2:	4c 8b a0 88 02 00 00 	mov    0x288(%rax),%r12
   1e8d9:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
   1e8e0:	48 89 c7             	mov    %rax,%rdi
   1e8e3:	e8 50 a6 fe ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
   1e8e8:	49 89 c5             	mov    %rax,%r13
   1e8eb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1e8ef:	48 89 c7             	mov    %rax,%rdi
   1e8f2:	e8 45 0f ff ff       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
   1e8f7:	48 89 c7             	mov    %rax,%rdi
   1e8fa:	48 8d 85 44 fe ff ff 	lea    -0x1bc(%rbp),%rax
   1e901:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e906:	48 89 c2             	mov    %rax,%rdx
   1e909:	4c 89 ee             	mov    %r13,%rsi
   1e90c:	41 ff d4             	call   *%r12
   1e90f:	89 45 84             	mov    %eax,-0x7c(%rbp)
          static_cast<VkPhysicalDevice>( m_physicalDevice ), static_cast<VkSurfaceKHR>( surface ), &surfaceFormatCount, nullptr );
        if ( ( result == VK_SUCCESS ) && surfaceFormatCount )
   1e912:	83 7d 84 00          	cmpl   $0x0,-0x7c(%rbp)
   1e916:	75 72                	jne    1e98a <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x272>
   1e918:	8b 85 44 fe ff ff    	mov    -0x1bc(%rbp),%eax
   1e91e:	85 c0                	test   %eax,%eax
   1e920:	74 68                	je     1e98a <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x272>
        {
          surfaceFormats.resize( surfaceFormatCount );
   1e922:	8b 85 44 fe ff ff    	mov    -0x1bc(%rbp),%eax
   1e928:	89 c0                	mov    %eax,%eax
   1e92a:	48 89 c6             	mov    %rax,%rsi
   1e92d:	48 89 df             	mov    %rbx,%rdi
   1e930:	e8 65 0b 00 00       	call   1f49a <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE6resizeEm>
          result = getDispatcher()->vkGetPhysicalDeviceSurfaceFormatsKHR( static_cast<VkPhysicalDevice>( m_physicalDevice ),
   1e935:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1e939:	48 89 c7             	mov    %rax,%rdi
   1e93c:	e8 d3 7c ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1e941:	4c 8b a0 88 02 00 00 	mov    0x288(%rax),%r12
                                                                          static_cast<VkSurfaceKHR>( surface ),
                                                                          &surfaceFormatCount,
                                                                          reinterpret_cast<VkSurfaceFormatKHR *>( surfaceFormats.data() ) );
   1e948:	48 89 df             	mov    %rbx,%rdi
   1e94b:	e8 d0 0b 00 00       	call   1f520 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4dataEv>
   1e950:	49 89 c6             	mov    %rax,%r14
          result = getDispatcher()->vkGetPhysicalDeviceSurfaceFormatsKHR( static_cast<VkPhysicalDevice>( m_physicalDevice ),
   1e953:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
   1e95a:	48 89 c7             	mov    %rax,%rdi
   1e95d:	e8 d6 a5 fe ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
   1e962:	49 89 c5             	mov    %rax,%r13
   1e965:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1e969:	48 89 c7             	mov    %rax,%rdi
   1e96c:	e8 cb 0e ff ff       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
   1e971:	48 89 c7             	mov    %rax,%rdi
   1e974:	48 8d 85 44 fe ff ff 	lea    -0x1bc(%rbp),%rax
   1e97b:	4c 89 f1             	mov    %r14,%rcx
   1e97e:	48 89 c2             	mov    %rax,%rdx
   1e981:	4c 89 ee             	mov    %r13,%rsi
   1e984:	41 ff d4             	call   *%r12
   1e987:	89 45 84             	mov    %eax,-0x7c(%rbp)
        }
      } while ( result == VK_INCOMPLETE );
   1e98a:	83 7d 84 05          	cmpl   $0x5,-0x7c(%rbp)
   1e98e:	0f 84 32 ff ff ff    	je     1e8c6 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x1ae>
   1e994:	8b 45 84             	mov    -0x7c(%rbp),%eax
   1e997:	89 45 80             	mov    %eax,-0x80(%rbp)
   1e99a:	48 8d 05 67 05 01 00 	lea    0x10567(%rip),%rax        # 2ef08 <_ZNSt8__detailL19__atomic_spin_countE+0x354>
   1e9a1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    if ( result != Result::eSuccess )
   1e9a8:	83 7d 80 00          	cmpl   $0x0,-0x80(%rbp)
   1e9ac:	74 14                	je     1e9c2 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x2aa>
      throwResultException( result, message );
   1e9ae:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   1e9b5:	8b 45 80             	mov    -0x80(%rbp),%eax
   1e9b8:	48 89 d6             	mov    %rdx,%rsi
   1e9bb:	89 c7                	mov    %eax,%edi
   1e9bd:	e8 ff f2 ff ff       	call   1dcc1 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
   1e9c2:	90                   	nop
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::getSurfaceFormatsKHR" );
      VULKAN_HPP_ASSERT( surfaceFormatCount <= surfaceFormats.size() );
   1e9c3:	8b 85 44 fe ff ff    	mov    -0x1bc(%rbp),%eax
   1e9c9:	41 89 c4             	mov    %eax,%r12d
   1e9cc:	48 89 df             	mov    %rbx,%rdi
   1e9cf:	e8 70 0b 00 00       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1e9d4:	4c 39 e0             	cmp    %r12,%rax
   1e9d7:	73 28                	jae    1ea01 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x2e9>
   1e9d9:	48 8d 05 28 04 01 00 	lea    0x10428(%rip),%rax        # 2ee08 <_ZNSt8__detailL19__atomic_spin_countE+0x254>
   1e9e0:	48 89 c1             	mov    %rax,%rcx
   1e9e3:	ba 3c 32 00 00       	mov    $0x323c,%edx
   1e9e8:	48 8d 05 21 02 01 00 	lea    0x10221(%rip),%rax        # 2ec10 <_ZNSt8__detailL19__atomic_spin_countE+0x5c>
   1e9ef:	48 89 c6             	mov    %rax,%rsi
   1e9f2:	48 8d 05 3f 05 01 00 	lea    0x1053f(%rip),%rax        # 2ef38 <_ZNSt8__detailL19__atomic_spin_countE+0x384>
   1e9f9:	48 89 c7             	mov    %rax,%rdi
   1e9fc:	e8 0f 67 fe ff       	call   5110 <__assert_fail@plt>
      if ( surfaceFormatCount < surfaceFormats.size() )
   1ea01:	8b 85 44 fe ff ff    	mov    -0x1bc(%rbp),%eax
   1ea07:	41 89 c4             	mov    %eax,%r12d
   1ea0a:	48 89 df             	mov    %rbx,%rdi
   1ea0d:	e8 32 0b 00 00       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1ea12:	49 39 c4             	cmp    %rax,%r12
   1ea15:	0f 92 c0             	setb   %al
   1ea18:	84 c0                	test   %al,%al
   1ea1a:	74 2b                	je     1ea47 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x32f>
      {
        surfaceFormats.resize( surfaceFormatCount );
   1ea1c:	8b 85 44 fe ff ff    	mov    -0x1bc(%rbp),%eax
   1ea22:	89 c0                	mov    %eax,%eax
   1ea24:	48 89 c6             	mov    %rax,%rsi
   1ea27:	48 89 df             	mov    %rbx,%rdi
   1ea2a:	e8 6b 0a 00 00       	call   1f49a <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE6resizeEm>
      }
      return surfaceFormats;
   1ea2f:	eb 16                	jmp    1ea47 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x32f>
    }
   1ea31:	49 89 c4             	mov    %rax,%r12
   1ea34:	48 89 df             	mov    %rbx,%rdi
   1ea37:	e8 1a 0a 00 00       	call   1f456 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EED1Ev>
   1ea3c:	4c 89 e0             	mov    %r12,%rax
   1ea3f:	48 89 c7             	mov    %rax,%rdi
   1ea42:	e8 59 69 fe ff       	call   53a0 <_Unwind_Resume@plt>
      return surfaceFormats;
   1ea47:	90                   	nop
  auto surfacePresentModes =
      device.physical.getSurfacePresentModesKHR(*surface);
   1ea48:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
   1ea4f:	48 8d 58 18          	lea    0x18(%rax),%rbx
   1ea53:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
   1ea5a:	48 89 c7             	mov    %rax,%rdi
   1ea5d:	e8 6c 81 ff ff       	call   16bce <_ZNK2vk4raii10SurfaceKHRdeEv>
   1ea62:	48 89 9d 70 ff ff ff 	mov    %rbx,-0x90(%rbp)
   1ea69:	48 8b 00             	mov    (%rax),%rax
   1ea6c:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
   1ea73:	48 8d 9d d0 fe ff ff 	lea    -0x130(%rbp),%rbx

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE std::vector<VULKAN_HPP_NAMESPACE::PresentModeKHR>
                                           PhysicalDevice::getSurfacePresentModesKHR( VULKAN_HPP_NAMESPACE::SurfaceKHR surface ) const
    {
      VULKAN_HPP_ASSERT( getDispatcher()->vkGetPhysicalDeviceSurfacePresentModesKHR &&
   1ea7a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1ea81:	48 89 c7             	mov    %rax,%rdi
   1ea84:	e8 8b 7b ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1ea89:	48 8b 80 90 02 00 00 	mov    0x290(%rax),%rax
   1ea90:	48 85 c0             	test   %rax,%rax
   1ea93:	75 28                	jne    1eabd <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x3a5>
   1ea95:	48 8d 05 cc 04 01 00 	lea    0x104cc(%rip),%rax        # 2ef68 <_ZNSt8__detailL19__atomic_spin_countE+0x3b4>
   1ea9c:	48 89 c1             	mov    %rax,%rcx
   1ea9f:	ba 47 32 00 00       	mov    $0x3247,%edx
   1eaa4:	48 8d 05 65 01 01 00 	lea    0x10165(%rip),%rax        # 2ec10 <_ZNSt8__detailL19__atomic_spin_countE+0x5c>
   1eaab:	48 89 c6             	mov    %rax,%rsi
   1eaae:	48 8d 05 23 05 01 00 	lea    0x10523(%rip),%rax        # 2efd8 <_ZNSt8__detailL19__atomic_spin_countE+0x424>
   1eab5:	48 89 c7             	mov    %rax,%rdi
   1eab8:	e8 53 66 fe ff       	call   5110 <__assert_fail@plt>
                         "Function <vkGetPhysicalDeviceSurfacePresentModesKHR> needs extension <VK_KHR_surface> enabled!" );

      std::vector<VULKAN_HPP_NAMESPACE::PresentModeKHR> presentModes;
   1eabd:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1eac1:	0f 11 03             	movups %xmm0,(%rbx)
   1eac4:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      uint32_t                                          presentModeCount;
      VkResult                                          result;
      do
      {
        result = getDispatcher()->vkGetPhysicalDeviceSurfacePresentModesKHR(
   1eac9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1ead0:	48 89 c7             	mov    %rax,%rdi
   1ead3:	e8 3c 7b ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1ead8:	4c 8b a0 90 02 00 00 	mov    0x290(%rax),%r12
   1eadf:	48 8d 85 58 fe ff ff 	lea    -0x1a8(%rbp),%rax
   1eae6:	48 89 c7             	mov    %rax,%rdi
   1eae9:	e8 4a a4 fe ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
   1eaee:	49 89 c5             	mov    %rax,%r13
   1eaf1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1eaf8:	48 89 c7             	mov    %rax,%rdi
   1eafb:	e8 3c 0d ff ff       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
   1eb00:	48 89 c7             	mov    %rax,%rdi
   1eb03:	48 8d 85 54 fe ff ff 	lea    -0x1ac(%rbp),%rax
   1eb0a:	b9 00 00 00 00       	mov    $0x0,%ecx
   1eb0f:	48 89 c2             	mov    %rax,%rdx
   1eb12:	4c 89 ee             	mov    %r13,%rsi
   1eb15:	41 ff d4             	call   *%r12
   1eb18:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
          static_cast<VkPhysicalDevice>( m_physicalDevice ), static_cast<VkSurfaceKHR>( surface ), &presentModeCount, nullptr );
        if ( ( result == VK_SUCCESS ) && presentModeCount )
   1eb1e:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%rbp)
   1eb25:	75 7b                	jne    1eba2 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x48a>
   1eb27:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
   1eb2d:	85 c0                	test   %eax,%eax
   1eb2f:	74 71                	je     1eba2 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x48a>
        {
          presentModes.resize( presentModeCount );
   1eb31:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
   1eb37:	89 c0                	mov    %eax,%eax
   1eb39:	48 89 c6             	mov    %rax,%rsi
   1eb3c:	48 89 df             	mov    %rbx,%rdi
   1eb3f:	e8 c2 0a 00 00       	call   1f606 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE6resizeEm>
          result = getDispatcher()->vkGetPhysicalDeviceSurfacePresentModesKHR( static_cast<VkPhysicalDevice>( m_physicalDevice ),
   1eb44:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1eb4b:	48 89 c7             	mov    %rax,%rdi
   1eb4e:	e8 c1 7a ff ff       	call   16614 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1eb53:	4c 8b a0 90 02 00 00 	mov    0x290(%rax),%r12
                                                                               static_cast<VkSurfaceKHR>( surface ),
                                                                               &presentModeCount,
                                                                               reinterpret_cast<VkPresentModeKHR *>( presentModes.data() ) );
   1eb5a:	48 89 df             	mov    %rbx,%rdi
   1eb5d:	e8 2a 0b 00 00       	call   1f68c <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE4dataEv>
   1eb62:	49 89 c6             	mov    %rax,%r14
          result = getDispatcher()->vkGetPhysicalDeviceSurfacePresentModesKHR( static_cast<VkPhysicalDevice>( m_physicalDevice ),
   1eb65:	48 8d 85 58 fe ff ff 	lea    -0x1a8(%rbp),%rax
   1eb6c:	48 89 c7             	mov    %rax,%rdi
   1eb6f:	e8 c4 a3 fe ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
   1eb74:	49 89 c5             	mov    %rax,%r13
   1eb77:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1eb7e:	48 89 c7             	mov    %rax,%rdi
   1eb81:	e8 b6 0c ff ff       	call   f83c <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
   1eb86:	48 89 c7             	mov    %rax,%rdi
   1eb89:	48 8d 85 54 fe ff ff 	lea    -0x1ac(%rbp),%rax
   1eb90:	4c 89 f1             	mov    %r14,%rcx
   1eb93:	48 89 c2             	mov    %rax,%rdx
   1eb96:	4c 89 ee             	mov    %r13,%rsi
   1eb99:	41 ff d4             	call   *%r12
   1eb9c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
        }
      } while ( result == VK_INCOMPLETE );
   1eba2:	83 bd 6c ff ff ff 05 	cmpl   $0x5,-0x94(%rbp)
   1eba9:	0f 84 1a ff ff ff    	je     1eac9 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x3b1>
   1ebaf:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
   1ebb5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
   1ebbb:	48 8d 05 b6 04 01 00 	lea    0x104b6(%rip),%rax        # 2f078 <_ZNSt8__detailL19__atomic_spin_countE+0x4c4>
   1ebc2:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    if ( result != Result::eSuccess )
   1ebc9:	83 bd 68 ff ff ff 00 	cmpl   $0x0,-0x98(%rbp)
   1ebd0:	74 17                	je     1ebe9 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x4d1>
      throwResultException( result, message );
   1ebd2:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
   1ebd9:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
   1ebdf:	48 89 d6             	mov    %rdx,%rsi
   1ebe2:	89 c7                	mov    %eax,%edi
   1ebe4:	e8 d8 f0 ff ff       	call   1dcc1 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
   1ebe9:	90                   	nop
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::getSurfacePresentModesKHR" );
      VULKAN_HPP_ASSERT( presentModeCount <= presentModes.size() );
   1ebea:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
   1ebf0:	41 89 c4             	mov    %eax,%r12d
   1ebf3:	48 89 df             	mov    %rbx,%rdi
   1ebf6:	e8 b5 0a 00 00       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1ebfb:	4c 39 e0             	cmp    %r12,%rax
   1ebfe:	73 28                	jae    1ec28 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x510>
   1ec00:	48 8d 05 61 03 01 00 	lea    0x10361(%rip),%rax        # 2ef68 <_ZNSt8__detailL19__atomic_spin_countE+0x3b4>
   1ec07:	48 89 c1             	mov    %rax,%rcx
   1ec0a:	ba 5b 32 00 00       	mov    $0x325b,%edx
   1ec0f:	48 8d 05 fa ff 00 00 	lea    0xfffa(%rip),%rax        # 2ec10 <_ZNSt8__detailL19__atomic_spin_countE+0x5c>
   1ec16:	48 89 c6             	mov    %rax,%rsi
   1ec19:	48 8d 05 88 04 01 00 	lea    0x10488(%rip),%rax        # 2f0a8 <_ZNSt8__detailL19__atomic_spin_countE+0x4f4>
   1ec20:	48 89 c7             	mov    %rax,%rdi
   1ec23:	e8 e8 64 fe ff       	call   5110 <__assert_fail@plt>
      if ( presentModeCount < presentModes.size() )
   1ec28:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
   1ec2e:	41 89 c4             	mov    %eax,%r12d
   1ec31:	48 89 df             	mov    %rbx,%rdi
   1ec34:	e8 77 0a 00 00       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1ec39:	49 39 c4             	cmp    %rax,%r12
   1ec3c:	0f 92 c0             	setb   %al
   1ec3f:	84 c0                	test   %al,%al
   1ec41:	74 28                	je     1ec6b <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x553>
      {
        presentModes.resize( presentModeCount );
   1ec43:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
   1ec49:	89 c0                	mov    %eax,%eax
   1ec4b:	48 89 c6             	mov    %rax,%rsi
   1ec4e:	48 89 df             	mov    %rbx,%rdi
   1ec51:	e8 b0 09 00 00       	call   1f606 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE6resizeEm>
      }
      return presentModes;
   1ec56:	eb 13                	jmp    1ec6b <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x553>
    }
   1ec58:	49 89 c4             	mov    %rax,%r12
   1ec5b:	48 89 df             	mov    %rbx,%rdi
   1ec5e:	e8 5f 09 00 00       	call   1f5c2 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EED1Ev>
   1ec63:	4c 89 e3             	mov    %r12,%rbx
   1ec66:	e9 d5 04 00 00       	jmp    1f140 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0xa28>
      return presentModes;
   1ec6b:	90                   	nop

  uint32_t minImageCount = surfaceCapabilities.minImageCount + 1;
   1ec6c:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
   1ec72:	83 c0 01             	add    $0x1,%eax
   1ec75:	89 45 dc             	mov    %eax,-0x24(%rbp)
  if (surfaceCapabilities.maxImageCount > 0 &&
   1ec78:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
   1ec7e:	85 c0                	test   %eax,%eax
   1ec80:	74 14                	je     1ec96 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x57e>
      minImageCount > surfaceCapabilities.maxImageCount) {
   1ec82:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  if (surfaceCapabilities.maxImageCount > 0 &&
   1ec88:	3b 45 dc             	cmp    -0x24(%rbp),%eax
   1ec8b:	73 09                	jae    1ec96 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x57e>
    minImageCount = surfaceCapabilities.maxImageCount;
   1ec8d:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
   1ec93:	89 45 dc             	mov    %eax,-0x24(%rbp)
  }

  if (surfaceFormats.empty()) {
   1ec96:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1ec9d:	48 89 c7             	mov    %rax,%rdi
   1eca0:	e8 2f 0a 00 00       	call   1f6d4 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE5emptyEv>
   1eca5:	84 c0                	test   %al,%al
   1eca7:	74 3b                	je     1ece4 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x5cc>
    throw std::runtime_error("No surface format available");
   1eca9:	bf 10 00 00 00       	mov    $0x10,%edi
   1ecae:	e8 1d 64 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1ecb3:	48 89 c3             	mov    %rax,%rbx
   1ecb6:	48 8d 05 13 04 01 00 	lea    0x10413(%rip),%rax        # 2f0d0 <_ZNSt8__detailL19__atomic_spin_countE+0x51c>
   1ecbd:	48 89 c6             	mov    %rax,%rsi
   1ecc0:	48 89 df             	mov    %rbx,%rdi
   1ecc3:	e8 c8 63 fe ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
   1ecc8:	48 8b 05 e1 22 02 00 	mov    0x222e1(%rip),%rax        # 40fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   1eccf:	48 89 c2             	mov    %rax,%rdx
   1ecd2:	48 8d 05 27 1d 02 00 	lea    0x21d27(%rip),%rax        # 40a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
   1ecd9:	48 89 c6             	mov    %rax,%rsi
   1ecdc:	48 89 df             	mov    %rbx,%rdi
   1ecdf:	e8 9c 66 fe ff       	call   5380 <__cxa_throw@plt>
  }
  vk::Format selectedImageFormat = surfaceFormats[0].format;
   1ece4:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1eceb:	be 00 00 00 00       	mov    $0x0,%esi
   1ecf0:	48 89 c7             	mov    %rax,%rdi
   1ecf3:	e8 b2 05 00 00       	call   1f2aa <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EEixEm>
   1ecf8:	8b 00                	mov    (%rax),%eax
   1ecfa:	89 45 d8             	mov    %eax,-0x28(%rbp)
  vk::ColorSpaceKHR selectedColorSpace = surfaceFormats[0].colorSpace;
   1ecfd:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1ed04:	be 00 00 00 00       	mov    $0x0,%esi
   1ed09:	48 89 c7             	mov    %rax,%rdi
   1ed0c:	e8 99 05 00 00       	call   1f2aa <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EEixEm>
   1ed11:	8b 40 04             	mov    0x4(%rax),%eax
   1ed14:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  for (size_t i = 1; i < surfaceFormats.size(); ++i) {
   1ed17:	48 c7 45 c8 01 00 00 	movq   $0x1,-0x38(%rbp)
   1ed1e:	00 
   1ed1f:	e9 88 00 00 00       	jmp    1edac <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x694>
    if (surfaceFormats[i].format == vk::Format::eR8G8B8A8Srgb &&
   1ed24:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ed28:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1ed2f:	48 89 d6             	mov    %rdx,%rsi
   1ed32:	48 89 c7             	mov    %rax,%rdi
   1ed35:	e8 70 05 00 00       	call   1f2aa <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EEixEm>
   1ed3a:	8b 00                	mov    (%rax),%eax
   1ed3c:	83 f8 2b             	cmp    $0x2b,%eax
   1ed3f:	75 24                	jne    1ed65 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x64d>
        surfaceFormats[i].colorSpace == vk::ColorSpaceKHR::eSrgbNonlinear) {
   1ed41:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ed45:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1ed4c:	48 89 d6             	mov    %rdx,%rsi
   1ed4f:	48 89 c7             	mov    %rax,%rdi
   1ed52:	e8 53 05 00 00       	call   1f2aa <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EEixEm>
   1ed57:	8b 40 04             	mov    0x4(%rax),%eax
    if (surfaceFormats[i].format == vk::Format::eR8G8B8A8Srgb &&
   1ed5a:	85 c0                	test   %eax,%eax
   1ed5c:	75 07                	jne    1ed65 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x64d>
   1ed5e:	b8 01 00 00 00       	mov    $0x1,%eax
   1ed63:	eb 05                	jmp    1ed6a <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x652>
   1ed65:	b8 00 00 00 00       	mov    $0x0,%eax
   1ed6a:	84 c0                	test   %al,%al
   1ed6c:	74 39                	je     1eda7 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x68f>
      selectedImageFormat = surfaceFormats[i].format;
   1ed6e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ed72:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1ed79:	48 89 d6             	mov    %rdx,%rsi
   1ed7c:	48 89 c7             	mov    %rax,%rdi
   1ed7f:	e8 26 05 00 00       	call   1f2aa <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EEixEm>
   1ed84:	8b 00                	mov    (%rax),%eax
   1ed86:	89 45 d8             	mov    %eax,-0x28(%rbp)
      selectedColorSpace = surfaceFormats[i].colorSpace;
   1ed89:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ed8d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1ed94:	48 89 d6             	mov    %rdx,%rsi
   1ed97:	48 89 c7             	mov    %rax,%rdi
   1ed9a:	e8 0b 05 00 00       	call   1f2aa <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EEixEm>
   1ed9f:	8b 40 04             	mov    0x4(%rax),%eax
   1eda2:	89 45 d4             	mov    %eax,-0x2c(%rbp)
      break;
   1eda5:	eb 23                	jmp    1edca <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x6b2>
  for (size_t i = 1; i < surfaceFormats.size(); ++i) {
   1eda7:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
   1edac:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1edb3:	48 89 c7             	mov    %rax,%rdi
   1edb6:	e8 89 07 00 00       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1edbb:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
   1edbf:	0f 92 c0             	setb   %al
   1edc2:	84 c0                	test   %al,%al
   1edc4:	0f 85 5a ff ff ff    	jne    1ed24 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x60c>
    }
  }

  vk::Extent2D selectedImageExtent = surfaceCapabilities.currentExtent;
   1edca:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1edd1:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  if (selectedImageExtent.width > surfaceCapabilities.currentExtent.width ||
   1edd8:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
   1edde:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
   1ede4:	39 c2                	cmp    %eax,%edx
   1ede6:	72 10                	jb     1edf8 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x6e0>
      selectedImageExtent.height > surfaceCapabilities.currentExtent.height) {
   1ede8:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
   1edee:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  if (selectedImageExtent.width > surfaceCapabilities.currentExtent.width ||
   1edf4:	39 c2                	cmp    %eax,%edx
   1edf6:	73 0e                	jae    1ee06 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x6ee>
    selectedImageExtent = surfaceCapabilities.maxImageExtent;
   1edf8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
   1edff:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  }

  vk::PresentModeKHR selectedPresentMode = vk::PresentModeKHR::eFifo;
   1ee06:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%rbp)
  if (preferredPresentMode != selectedPresentMode) {
   1ee0d:	8b 85 04 fe ff ff    	mov    -0x1fc(%rbp),%eax
   1ee13:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
   1ee16:	0f 84 8e 00 00 00    	je     1eeaa <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x792>
    for (auto &presentMode : surfacePresentModes) {
   1ee1c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
   1ee23:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1ee27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1ee2b:	48 89 c7             	mov    %rax,%rdi
   1ee2e:	e8 e3 08 00 00       	call   1f716 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE5beginEv>
   1ee33:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
   1ee3a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1ee3e:	48 89 c7             	mov    %rax,%rdi
   1ee41:	e8 f6 08 00 00       	call   1f73c <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE3endEv>
   1ee46:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
   1ee4d:	eb 3b                	jmp    1ee8a <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x772>
   1ee4f:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
   1ee56:	48 89 c7             	mov    %rax,%rdi
   1ee59:	e8 b6 04 00 00       	call   1f314 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEEdeEv>
   1ee5e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      if (presentMode == preferredPresentMode) {
   1ee62:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1ee66:	8b 00                	mov    (%rax),%eax
   1ee68:	39 85 04 fe ff ff    	cmp    %eax,-0x1fc(%rbp)
   1ee6e:	75 0b                	jne    1ee7b <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x763>
        selectedPresentMode = presentMode;
   1ee70:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1ee74:	8b 00                	mov    (%rax),%eax
   1ee76:	89 45 c4             	mov    %eax,-0x3c(%rbp)
        break;
   1ee79:	eb 2f                	jmp    1eeaa <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x792>
    for (auto &presentMode : surfacePresentModes) {
   1ee7b:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
   1ee82:	48 89 c7             	mov    %rax,%rdi
   1ee85:	e8 dc 08 00 00       	call   1f766 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEEppEv>
   1ee8a:	48 8d 95 28 fe ff ff 	lea    -0x1d8(%rbp),%rdx
   1ee91:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
   1ee98:	48 89 d6             	mov    %rdx,%rsi
   1ee9b:	48 89 c7             	mov    %rax,%rdi
   1ee9e:	e8 27 04 00 00       	call   1f2ca <_ZN9__gnu_cxxeqIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   1eea3:	83 f0 01             	xor    $0x1,%eax
   1eea6:	84 c0                	test   %al,%al
   1eea8:	75 a5                	jne    1ee4f <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x737>
    }
  }

  vk::SurfaceTransformFlagBitsKHR selectedTransform;
  if (surfaceCapabilities.supportedTransforms &
      vk::SurfaceTransformFlagBitsKHR::eIdentity) {
   1eeaa:	48 8d 85 4c ff ff ff 	lea    -0xb4(%rbp),%rax
   1eeb1:	be 01 00 00 00       	mov    $0x1,%esi
   1eeb6:	48 89 c7             	mov    %rax,%rdi
   1eeb9:	e8 c8 04 00 00       	call   1f386 <_ZN2vk5FlagsINS_27SurfaceTransformFlagBitsKHREEC1ES1_>
   1eebe:	48 8d 85 4c ff ff ff 	lea    -0xb4(%rbp),%rax
   1eec5:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
   1eecc:	48 83 c2 24          	add    $0x24,%rdx
   1eed0:	48 89 c6             	mov    %rax,%rsi
   1eed3:	48 89 d7             	mov    %rdx,%rdi
   1eed6:	e8 c3 04 00 00       	call   1f39e <_ZNK2vk5FlagsINS_27SurfaceTransformFlagBitsKHREEanERKS2_>
   1eedb:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  if (surfaceCapabilities.supportedTransforms &
   1eee1:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
   1eee8:	48 89 c7             	mov    %rax,%rdi
   1eeeb:	e8 e0 04 00 00       	call   1f3d0 <_ZNK2vk5FlagsINS_27SurfaceTransformFlagBitsKHREEcvbEv>
   1eef0:	84 c0                	test   %al,%al
   1eef2:	74 57                	je     1ef4b <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x833>
    selectedTransform = vk::SurfaceTransformFlagBitsKHR::eIdentity;
   1eef4:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%rbp)
    throw std::runtime_error("Identity transform not supported");
  }

  vk::CompositeAlphaFlagBitsKHR selectedCompositeAlpha;
  if (surfaceCapabilities.supportedCompositeAlpha &
      vk::CompositeAlphaFlagBitsKHR::eOpaque) {
   1eefb:	48 8d 85 54 ff ff ff 	lea    -0xac(%rbp),%rax
   1ef02:	be 01 00 00 00       	mov    $0x1,%esi
   1ef07:	48 89 c7             	mov    %rax,%rdi
   1ef0a:	e8 17 04 00 00       	call   1f326 <_ZN2vk5FlagsINS_25CompositeAlphaFlagBitsKHREEC1ES1_>
   1ef0f:	48 8d 85 54 ff ff ff 	lea    -0xac(%rbp),%rax
   1ef16:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
   1ef1d:	48 83 c2 2c          	add    $0x2c,%rdx
   1ef21:	48 89 c6             	mov    %rax,%rsi
   1ef24:	48 89 d7             	mov    %rdx,%rdi
   1ef27:	e8 12 04 00 00       	call   1f33e <_ZNK2vk5FlagsINS_25CompositeAlphaFlagBitsKHREEanERKS2_>
   1ef2c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
  if (surfaceCapabilities.supportedCompositeAlpha &
   1ef32:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1ef39:	48 89 c7             	mov    %rax,%rdi
   1ef3c:	e8 2f 04 00 00       	call   1f370 <_ZNK2vk5FlagsINS_25CompositeAlphaFlagBitsKHREEcvbEv>
   1ef41:	84 c0                	test   %al,%al
   1ef43:	0f 84 3a 01 00 00    	je     1f083 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x96b>
   1ef49:	eb 3b                	jmp    1ef86 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x86e>
    throw std::runtime_error("Identity transform not supported");
   1ef4b:	bf 10 00 00 00       	mov    $0x10,%edi
   1ef50:	e8 7b 61 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1ef55:	48 89 c3             	mov    %rax,%rbx
   1ef58:	48 8d 05 91 01 01 00 	lea    0x10191(%rip),%rax        # 2f0f0 <_ZNSt8__detailL19__atomic_spin_countE+0x53c>
   1ef5f:	48 89 c6             	mov    %rax,%rsi
   1ef62:	48 89 df             	mov    %rbx,%rdi
   1ef65:	e8 26 61 fe ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
   1ef6a:	48 8b 05 3f 20 02 00 	mov    0x2203f(%rip),%rax        # 40fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   1ef71:	48 89 c2             	mov    %rax,%rdx
   1ef74:	48 8d 05 85 1a 02 00 	lea    0x21a85(%rip),%rax        # 40a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
   1ef7b:	48 89 c6             	mov    %rax,%rsi
   1ef7e:	48 89 df             	mov    %rbx,%rdi
   1ef81:	e8 fa 63 fe ff       	call   5380 <__cxa_throw@plt>
    selectedCompositeAlpha = vk::CompositeAlphaFlagBitsKHR::eOpaque;
   1ef86:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)
  } else {
    throw std::runtime_error("Opaque composite alpha not supported");
  }

  vk::SwapchainCreateInfoKHR swapchainInfo{
   1ef8d:	48 8d 95 60 fe ff ff 	lea    -0x1a0(%rbp),%rdx
   1ef94:	b8 00 00 00 00       	mov    $0x0,%eax
   1ef99:	b9 0d 00 00 00       	mov    $0xd,%ecx
   1ef9e:	48 89 d7             	mov    %rdx,%rdi
   1efa1:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1efa4:	c7 85 60 fe ff ff e8 	movl   $0x3b9acde8,-0x1a0(%rbp)
   1efab:	cd 9a 3b 
   1efae:	c7 85 94 fe ff ff 01 	movl   $0x1,-0x16c(%rbp)
   1efb5:	00 00 00 
   1efb8:	c7 85 98 fe ff ff 10 	movl   $0x10,-0x168(%rbp)
   1efbf:	00 00 00 
   1efc2:	c7 85 bc fe ff ff 01 	movl   $0x1,-0x144(%rbp)
   1efc9:	00 00 00 
      .preTransform{selectedTransform},
      .compositeAlpha{selectedCompositeAlpha},
      .presentMode{selectedPresentMode},
      .clipped{VK_TRUE},
      .oldSwapchain{VK_NULL_HANDLE},
  };
   1efcc:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
   1efd3:	48 83 c0 10          	add    $0x10,%rax
   1efd7:	48 89 c7             	mov    %rax,%rdi
   1efda:	e8 07 04 00 00       	call   1f3e6 <_ZN2vk5FlagsINS_26SwapchainCreateFlagBitsKHREEC1Ev>
      .surface{*surface},
   1efdf:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
   1efe6:	48 89 c7             	mov    %rax,%rdi
   1efe9:	e8 e0 7b ff ff       	call   16bce <_ZNK2vk4raii10SurfaceKHRdeEv>
  };
   1efee:	48 8b 00             	mov    (%rax),%rax
   1eff1:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
   1eff8:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1effb:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
   1f001:	8b 45 d8             	mov    -0x28(%rbp),%eax
   1f004:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%rbp)
   1f00a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   1f00d:	89 85 88 fe ff ff    	mov    %eax,-0x178(%rbp)
   1f013:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
   1f01a:	48 89 85 8c fe ff ff 	mov    %rax,-0x174(%rbp)
   1f021:	8b 45 ac             	mov    -0x54(%rbp),%eax
   1f024:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%rbp)
   1f02a:	8b 45 a8             	mov    -0x58(%rbp),%eax
   1f02d:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%rbp)
   1f033:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   1f036:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
  return {
      .self{device.logical, swapchainInfo},
      .format{selectedImageFormat},
      .extent{selectedImageExtent},
  };
}
   1f03c:	48 8b 9d 18 fe ff ff 	mov    -0x1e8(%rbp),%rbx
      .self{device.logical, swapchainInfo},
   1f043:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
   1f04a:	4c 8d 60 28          	lea    0x28(%rax),%r12
}
   1f04e:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
   1f055:	be 00 00 00 00       	mov    $0x0,%esi
   1f05a:	48 89 c7             	mov    %rax,%rdi
   1f05d:	e8 8a 96 ff ff       	call   186ec <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
   1f062:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
   1f069:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
   1f070:	48 89 d1             	mov    %rdx,%rcx
   1f073:	48 89 c2             	mov    %rax,%rdx
   1f076:	4c 89 e6             	mov    %r12,%rsi
   1f079:	48 89 df             	mov    %rbx,%rdi
   1f07c:	e8 07 01 00 00       	call   1f188 <_ZN2vk4raii12SwapchainKHRC1ERKNS0_6DeviceERKNS_22SwapchainCreateInfoKHRENS_8OptionalIKNS_19AllocationCallbacksEEE>
   1f081:	eb 3b                	jmp    1f0be <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0x9a6>
    throw std::runtime_error("Opaque composite alpha not supported");
   1f083:	bf 10 00 00 00       	mov    $0x10,%edi
   1f088:	e8 43 60 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1f08d:	48 89 c3             	mov    %rax,%rbx
   1f090:	48 8d 05 81 00 01 00 	lea    0x10081(%rip),%rax        # 2f118 <_ZNSt8__detailL19__atomic_spin_countE+0x564>
   1f097:	48 89 c6             	mov    %rax,%rsi
   1f09a:	48 89 df             	mov    %rbx,%rdi
   1f09d:	e8 ee 5f fe ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
   1f0a2:	48 8b 05 07 1f 02 00 	mov    0x21f07(%rip),%rax        # 40fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   1f0a9:	48 89 c2             	mov    %rax,%rdx
   1f0ac:	48 8d 05 4d 19 02 00 	lea    0x2194d(%rip),%rax        # 40a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
   1f0b3:	48 89 c6             	mov    %rax,%rsi
   1f0b6:	48 89 df             	mov    %rbx,%rdi
   1f0b9:	e8 c2 62 fe ff       	call   5380 <__cxa_throw@plt>
}
   1f0be:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   1f0c5:	8b 55 d8             	mov    -0x28(%rbp),%edx
   1f0c8:	89 50 20             	mov    %edx,0x20(%rax)
   1f0cb:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   1f0d2:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
   1f0d9:	48 89 50 24          	mov    %rdx,0x24(%rax)
  };
   1f0dd:	90                   	nop
}
   1f0de:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
   1f0e5:	48 89 c7             	mov    %rax,%rdi
   1f0e8:	e8 d5 04 00 00       	call   1f5c2 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EED1Ev>
   1f0ed:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1f0f4:	48 89 c7             	mov    %rax,%rdi
   1f0f7:	e8 5a 03 00 00       	call   1f456 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EED1Ev>
  };
   1f0fc:	eb 5c                	jmp    1f15a <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0xa42>
    throw std::runtime_error("No surface format available");
   1f0fe:	49 89 c4             	mov    %rax,%r12
   1f101:	48 89 df             	mov    %rbx,%rdi
   1f104:	e8 47 60 fe ff       	call   5150 <__cxa_free_exception@plt>
   1f109:	4c 89 e3             	mov    %r12,%rbx
   1f10c:	eb 23                	jmp    1f131 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0xa19>
    throw std::runtime_error("Identity transform not supported");
   1f10e:	49 89 c4             	mov    %rax,%r12
   1f111:	48 89 df             	mov    %rbx,%rdi
   1f114:	e8 37 60 fe ff       	call   5150 <__cxa_free_exception@plt>
   1f119:	4c 89 e3             	mov    %r12,%rbx
   1f11c:	eb 13                	jmp    1f131 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0xa19>
    throw std::runtime_error("Opaque composite alpha not supported");
   1f11e:	49 89 c4             	mov    %rax,%r12
   1f121:	48 89 df             	mov    %rbx,%rdi
   1f124:	e8 27 60 fe ff       	call   5150 <__cxa_free_exception@plt>
   1f129:	4c 89 e3             	mov    %r12,%rbx
   1f12c:	eb 03                	jmp    1f131 <_ZN4rtvc13makeSwapchainERKN2vk4raii10SurfaceKHRERKNS_13DeviceWrapperENS0_14PresentModeKHRE+0xa19>
}
   1f12e:	48 89 c3             	mov    %rax,%rbx
   1f131:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
   1f138:	48 89 c7             	mov    %rax,%rdi
   1f13b:	e8 82 04 00 00       	call   1f5c2 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EED1Ev>
   1f140:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1f147:	48 89 c7             	mov    %rax,%rdi
   1f14a:	e8 07 03 00 00       	call   1f456 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EED1Ev>
   1f14f:	48 89 d8             	mov    %rbx,%rax
   1f152:	48 89 c7             	mov    %rax,%rdi
   1f155:	e8 46 62 fe ff       	call   53a0 <_Unwind_Resume@plt>
   1f15a:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   1f161:	48 81 c4 e0 01 00 00 	add    $0x1e0,%rsp
   1f168:	5b                   	pop    %rbx
   1f169:	41 5c                	pop    %r12
   1f16b:	41 5d                	pop    %r13
   1f16d:	41 5e                	pop    %r14
   1f16f:	5d                   	pop    %rbp
   1f170:	c3                   	ret
   1f171:	90                   	nop

000000000001f172 <_ZN2vk12SwapchainKHRC1Ev>:
    VULKAN_HPP_CONSTEXPR         SwapchainKHR() = default;
   1f172:	55                   	push   %rbp
   1f173:	48 89 e5             	mov    %rsp,%rbp
   1f176:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f17a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f17e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1f185:	90                   	nop
   1f186:	5d                   	pop    %rbp
   1f187:	c3                   	ret

000000000001f188 <_ZN2vk4raii12SwapchainKHRC1ERKNS0_6DeviceERKNS_22SwapchainCreateInfoKHRENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      SwapchainKHR( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Device const &                 device,
   1f188:	55                   	push   %rbp
   1f189:	48 89 e5             	mov    %rsp,%rbp
   1f18c:	41 55                	push   %r13
   1f18e:	41 54                	push   %r12
   1f190:	53                   	push   %rbx
   1f191:	48 83 ec 38          	sub    $0x38,%rsp
   1f195:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1f199:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   1f19d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   1f1a1:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_device( *device )
   1f1a5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1f1a9:	48 89 c7             	mov    %rax,%rdi
   1f1ac:	e8 ed 78 ff ff       	call   16a9e <_ZNK2vk4raii6DevicedeEv>
   1f1b1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1f1b5:	48 8b 00             	mov    (%rax),%rax
   1f1b8:	48 89 02             	mov    %rax,(%rdx)
        , m_dispatcher( device.getDispatcher() )
   1f1bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f1bf:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1f1c6:	00 
   1f1c7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f1cb:	48 83 c0 08          	add    $0x8,%rax
   1f1cf:	48 89 c7             	mov    %rax,%rdi
   1f1d2:	e8 9b ff ff ff       	call   1f172 <_ZN2vk12SwapchainKHRC1Ev>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   1f1d7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1f1db:	48 89 c7             	mov    %rax,%rdi
   1f1de:	e8 7b 85 ff ff       	call   1775e <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   1f1e3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1f1e7:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( device.getDispatcher() )
   1f1eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1f1ef:	48 89 c7             	mov    %rax,%rdi
   1f1f2:	e8 f3 a3 fe ff       	call   95ea <_ZNK2vk4raii6Device13getDispatcherEv>
   1f1f7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1f1fb:	48 89 42 18          	mov    %rax,0x18(%rdx)
          device.getDispatcher()->vkCreateSwapchainKHR( static_cast<VkDevice>( *device ),
   1f1ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1f203:	48 89 c7             	mov    %rax,%rdi
   1f206:	e8 df a3 fe ff       	call   95ea <_ZNK2vk4raii6Device13getDispatcherEv>
   1f20b:	4c 8b a0 68 0d 00 00 	mov    0xd68(%rax),%r12
                                                        reinterpret_cast<VkSwapchainKHR *>( &m_swapchain ) ) );
   1f212:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f216:	4c 8d 68 08          	lea    0x8(%rax),%r13
                                                        reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   1f21a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f21e:	48 8b 58 10          	mov    0x10(%rax),%rbx
          device.getDispatcher()->vkCreateSwapchainKHR( static_cast<VkDevice>( *device ),
   1f222:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1f226:	48 89 c7             	mov    %rax,%rdi
   1f229:	e8 70 78 ff ff       	call   16a9e <_ZNK2vk4raii6DevicedeEv>
   1f22e:	48 89 c7             	mov    %rax,%rdi
   1f231:	e8 76 9e fe ff       	call   90ac <_ZNK2vk6DevicecvP10VkDevice_TEv>
   1f236:	48 89 c7             	mov    %rax,%rdi
   1f239:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f23d:	4c 89 e9             	mov    %r13,%rcx
   1f240:	48 89 da             	mov    %rbx,%rdx
   1f243:	48 89 c6             	mov    %rax,%rsi
   1f246:	41 ff d4             	call   *%r12
   1f249:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   1f24c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   1f250:	74 14                	je     1f266 <_ZN2vk4raii12SwapchainKHRC1ERKNS0_6DeviceERKNS_22SwapchainCreateInfoKHRENS_8OptionalIKNS_19AllocationCallbacksEEE+0xde>
          throwResultException( result, "vkCreateSwapchainKHR" );
   1f252:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1f255:	48 8d 15 5e fa 00 00 	lea    0xfa5e(%rip),%rdx        # 2ecba <_ZNSt8__detailL19__atomic_spin_countE+0x106>
   1f25c:	48 89 d6             	mov    %rdx,%rsi
   1f25f:	89 c7                	mov    %eax,%edi
   1f261:	e8 5b ea ff ff       	call   1dcc1 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   1f266:	90                   	nop
   1f267:	48 83 c4 38          	add    $0x38,%rsp
   1f26b:	5b                   	pop    %rbx
   1f26c:	41 5c                	pop    %r12
   1f26e:	41 5d                	pop    %r13
   1f270:	5d                   	pop    %rbp
   1f271:	c3                   	ret

000000000001f272 <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   1f272:	55                   	push   %rbp
   1f273:	48 89 e5             	mov    %rsp,%rbp
   1f276:	48 83 ec 10          	sub    $0x10,%rsp
   1f27a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f27e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f282:	48 89 c7             	mov    %rax,%rdi
   1f285:	e8 72 01 00 00       	call   1f3fc <_ZNSaIN2vk16SurfaceFormatKHREED1Ev>
   1f28a:	90                   	nop
   1f28b:	c9                   	leave
   1f28c:	c3                   	ret
   1f28d:	90                   	nop

000000000001f28e <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE12_Vector_implD1Ev>:
   1f28e:	55                   	push   %rbp
   1f28f:	48 89 e5             	mov    %rsp,%rbp
   1f292:	48 83 ec 10          	sub    $0x10,%rsp
   1f296:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f29a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f29e:	48 89 c7             	mov    %rax,%rdi
   1f2a1:	e8 c2 02 00 00       	call   1f568 <_ZNSaIN2vk14PresentModeKHREED1Ev>
   1f2a6:	90                   	nop
   1f2a7:	c9                   	leave
   1f2a8:	c3                   	ret
   1f2a9:	90                   	nop

000000000001f2aa <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   1f2aa:	55                   	push   %rbp
   1f2ab:	48 89 e5             	mov    %rsp,%rbp
   1f2ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f2b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   1f2b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f2ba:	48 8b 00             	mov    (%rax),%rax
   1f2bd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f2c1:	48 c1 e2 03          	shl    $0x3,%rdx
   1f2c5:	48 01 d0             	add    %rdx,%rax
      }
   1f2c8:	5d                   	pop    %rbp
   1f2c9:	c3                   	ret

000000000001f2ca <_ZN9__gnu_cxxeqIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   1f2ca:	55                   	push   %rbp
   1f2cb:	48 89 e5             	mov    %rsp,%rbp
   1f2ce:	53                   	push   %rbx
   1f2cf:	48 83 ec 18          	sub    $0x18,%rsp
   1f2d3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f2d7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   1f2db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f2df:	48 89 c7             	mov    %rax,%rdi
   1f2e2:	e8 1f 00 00 00       	call   1f306 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEE4baseEv>
   1f2e7:	48 8b 18             	mov    (%rax),%rbx
   1f2ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f2ee:	48 89 c7             	mov    %rax,%rdi
   1f2f1:	e8 10 00 00 00       	call   1f306 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEE4baseEv>
   1f2f6:	48 8b 00             	mov    (%rax),%rax
   1f2f9:	48 39 c3             	cmp    %rax,%rbx
   1f2fc:	0f 94 c0             	sete   %al
   1f2ff:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1f303:	c9                   	leave
   1f304:	c3                   	ret
   1f305:	90                   	nop

000000000001f306 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1f306:	55                   	push   %rbp
   1f307:	48 89 e5             	mov    %rsp,%rbp
   1f30a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1f30e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f312:	5d                   	pop    %rbp
   1f313:	c3                   	ret

000000000001f314 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   1f314:	55                   	push   %rbp
   1f315:	48 89 e5             	mov    %rsp,%rbp
   1f318:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1f31c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f320:	48 8b 00             	mov    (%rax),%rax
   1f323:	5d                   	pop    %rbp
   1f324:	c3                   	ret
   1f325:	90                   	nop

000000000001f326 <_ZN2vk5FlagsINS_25CompositeAlphaFlagBitsKHREEC1ES1_>:
    VULKAN_HPP_CONSTEXPR Flags( BitType bit ) VULKAN_HPP_NOEXCEPT : m_mask( static_cast<MaskType>( bit ) ) {}
   1f326:	55                   	push   %rbp
   1f327:	48 89 e5             	mov    %rsp,%rbp
   1f32a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f32e:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1f331:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f335:	8b 55 f4             	mov    -0xc(%rbp),%edx
   1f338:	89 10                	mov    %edx,(%rax)
   1f33a:	90                   	nop
   1f33b:	5d                   	pop    %rbp
   1f33c:	c3                   	ret
   1f33d:	90                   	nop

000000000001f33e <_ZNK2vk5FlagsINS_25CompositeAlphaFlagBitsKHREEanERKS2_>:
    VULKAN_HPP_CONSTEXPR Flags<BitType> operator&( Flags<BitType> const & rhs ) const VULKAN_HPP_NOEXCEPT
   1f33e:	55                   	push   %rbp
   1f33f:	48 89 e5             	mov    %rsp,%rbp
   1f342:	48 83 ec 20          	sub    $0x20,%rsp
   1f346:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f34a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return Flags<BitType>( m_mask & rhs.m_mask );
   1f34e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f352:	8b 10                	mov    (%rax),%edx
   1f354:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f358:	8b 00                	mov    (%rax),%eax
   1f35a:	21 c2                	and    %eax,%edx
   1f35c:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
   1f360:	89 d6                	mov    %edx,%esi
   1f362:	48 89 c7             	mov    %rax,%rdi
   1f365:	e8 1c 04 00 00       	call   1f786 <_ZN2vk5FlagsINS_25CompositeAlphaFlagBitsKHREEC1Ej>
   1f36a:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
   1f36d:	c9                   	leave
   1f36e:	c3                   	ret
   1f36f:	90                   	nop

000000000001f370 <_ZNK2vk5FlagsINS_25CompositeAlphaFlagBitsKHREEcvbEv>:
    explicit VULKAN_HPP_CONSTEXPR operator bool() const VULKAN_HPP_NOEXCEPT
   1f370:	55                   	push   %rbp
   1f371:	48 89 e5             	mov    %rsp,%rbp
   1f374:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return !!m_mask;
   1f378:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f37c:	8b 00                	mov    (%rax),%eax
   1f37e:	85 c0                	test   %eax,%eax
   1f380:	0f 95 c0             	setne  %al
    }
   1f383:	5d                   	pop    %rbp
   1f384:	c3                   	ret
   1f385:	90                   	nop

000000000001f386 <_ZN2vk5FlagsINS_27SurfaceTransformFlagBitsKHREEC1ES1_>:
    VULKAN_HPP_CONSTEXPR Flags( BitType bit ) VULKAN_HPP_NOEXCEPT : m_mask( static_cast<MaskType>( bit ) ) {}
   1f386:	55                   	push   %rbp
   1f387:	48 89 e5             	mov    %rsp,%rbp
   1f38a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f38e:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1f391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f395:	8b 55 f4             	mov    -0xc(%rbp),%edx
   1f398:	89 10                	mov    %edx,(%rax)
   1f39a:	90                   	nop
   1f39b:	5d                   	pop    %rbp
   1f39c:	c3                   	ret
   1f39d:	90                   	nop

000000000001f39e <_ZNK2vk5FlagsINS_27SurfaceTransformFlagBitsKHREEanERKS2_>:
    VULKAN_HPP_CONSTEXPR Flags<BitType> operator&( Flags<BitType> const & rhs ) const VULKAN_HPP_NOEXCEPT
   1f39e:	55                   	push   %rbp
   1f39f:	48 89 e5             	mov    %rsp,%rbp
   1f3a2:	48 83 ec 20          	sub    $0x20,%rsp
   1f3a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f3aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return Flags<BitType>( m_mask & rhs.m_mask );
   1f3ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f3b2:	8b 10                	mov    (%rax),%edx
   1f3b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f3b8:	8b 00                	mov    (%rax),%eax
   1f3ba:	21 c2                	and    %eax,%edx
   1f3bc:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
   1f3c0:	89 d6                	mov    %edx,%esi
   1f3c2:	48 89 c7             	mov    %rax,%rdi
   1f3c5:	e8 d4 03 00 00       	call   1f79e <_ZN2vk5FlagsINS_27SurfaceTransformFlagBitsKHREEC1Ej>
   1f3ca:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
   1f3cd:	c9                   	leave
   1f3ce:	c3                   	ret
   1f3cf:	90                   	nop

000000000001f3d0 <_ZNK2vk5FlagsINS_27SurfaceTransformFlagBitsKHREEcvbEv>:
    explicit VULKAN_HPP_CONSTEXPR operator bool() const VULKAN_HPP_NOEXCEPT
   1f3d0:	55                   	push   %rbp
   1f3d1:	48 89 e5             	mov    %rsp,%rbp
   1f3d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return !!m_mask;
   1f3d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f3dc:	8b 00                	mov    (%rax),%eax
   1f3de:	85 c0                	test   %eax,%eax
   1f3e0:	0f 95 c0             	setne  %al
    }
   1f3e3:	5d                   	pop    %rbp
   1f3e4:	c3                   	ret
   1f3e5:	90                   	nop

000000000001f3e6 <_ZN2vk5FlagsINS_26SwapchainCreateFlagBitsKHREEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   1f3e6:	55                   	push   %rbp
   1f3e7:	48 89 e5             	mov    %rsp,%rbp
   1f3ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f3ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f3f2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   1f3f8:	90                   	nop
   1f3f9:	5d                   	pop    %rbp
   1f3fa:	c3                   	ret
   1f3fb:	90                   	nop

000000000001f3fc <_ZNSaIN2vk16SurfaceFormatKHREED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   1f3fc:	55                   	push   %rbp
   1f3fd:	48 89 e5             	mov    %rsp,%rbp
   1f400:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f404:	90                   	nop
   1f405:	5d                   	pop    %rbp
   1f406:	c3                   	ret
   1f407:	90                   	nop

000000000001f408 <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   1f408:	55                   	push   %rbp
   1f409:	48 89 e5             	mov    %rsp,%rbp
   1f40c:	48 83 ec 10          	sub    $0x10,%rsp
   1f410:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1f414:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f418:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1f41c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f420:	48 8b 00             	mov    (%rax),%rax
   1f423:	48 29 c2             	sub    %rax,%rdx
   1f426:	48 89 d0             	mov    %rdx,%rax
   1f429:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   1f42d:	48 89 c2             	mov    %rax,%rdx
   1f430:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f434:	48 8b 08             	mov    (%rax),%rcx
   1f437:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f43b:	48 89 ce             	mov    %rcx,%rsi
   1f43e:	48 89 c7             	mov    %rax,%rdi
   1f441:	e8 70 03 00 00       	call   1f7b6 <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE13_M_deallocateEPS1_m>
      }
   1f446:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f44a:	48 89 c7             	mov    %rax,%rdi
   1f44d:	e8 20 fe ff ff       	call   1f272 <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE12_Vector_implD1Ev>
   1f452:	90                   	nop
   1f453:	c9                   	leave
   1f454:	c3                   	ret
   1f455:	90                   	nop

000000000001f456 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1f456:	55                   	push   %rbp
   1f457:	48 89 e5             	mov    %rsp,%rbp
   1f45a:	48 83 ec 10          	sub    $0x10,%rsp
   1f45e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   1f462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f466:	48 89 c7             	mov    %rax,%rdi
   1f469:	e8 7e 03 00 00       	call   1f7ec <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1f46e:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1f471:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f475:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1f479:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f47d:	48 8b 00             	mov    (%rax),%rax
   1f480:	48 89 ce             	mov    %rcx,%rsi
   1f483:	48 89 c7             	mov    %rax,%rdi
   1f486:	e8 6f 03 00 00       	call   1f7fa <_ZSt8_DestroyIPN2vk16SurfaceFormatKHRES1_EvT_S3_RSaIT0_E>
      }
   1f48b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f48f:	48 89 c7             	mov    %rax,%rdi
   1f492:	e8 71 ff ff ff       	call   1f408 <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EED1Ev>
   1f497:	90                   	nop
   1f498:	c9                   	leave
   1f499:	c3                   	ret

000000000001f49a <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   1f49a:	55                   	push   %rbp
   1f49b:	48 89 e5             	mov    %rsp,%rbp
   1f49e:	48 83 ec 10          	sub    $0x10,%rsp
   1f4a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f4a6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   1f4aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4ae:	48 89 c7             	mov    %rax,%rdi
   1f4b1:	e8 8e 00 00 00       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1f4b6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f4ba:	0f 92 c0             	setb   %al
   1f4bd:	84 c0                	test   %al,%al
   1f4bf:	74 24                	je     1f4e5 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   1f4c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4c5:	48 89 c7             	mov    %rax,%rdi
   1f4c8:	e8 77 00 00 00       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1f4cd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f4d1:	48 29 c2             	sub    %rax,%rdx
   1f4d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4d8:	48 89 d6             	mov    %rdx,%rsi
   1f4db:	48 89 c7             	mov    %rax,%rdi
   1f4de:	e8 09 04 00 00       	call   1f8ec <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE17_M_default_appendEm>
      }
   1f4e3:	eb 38                	jmp    1f51d <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   1f4e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4e9:	48 89 c7             	mov    %rax,%rdi
   1f4ec:	e8 53 00 00 00       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1f4f1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   1f4f5:	0f 92 c0             	setb   %al
   1f4f8:	84 c0                	test   %al,%al
   1f4fa:	74 21                	je     1f51d <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   1f4fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f500:	48 8b 00             	mov    (%rax),%rax
   1f503:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f507:	48 c1 e2 03          	shl    $0x3,%rdx
   1f50b:	48 01 c2             	add    %rax,%rdx
   1f50e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f512:	48 89 d6             	mov    %rdx,%rsi
   1f515:	48 89 c7             	mov    %rax,%rdi
   1f518:	e8 d9 05 00 00       	call   1faf6 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE15_M_erase_at_endEPS1_>
      }
   1f51d:	90                   	nop
   1f51e:	c9                   	leave
   1f51f:	c3                   	ret

000000000001f520 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   1f520:	55                   	push   %rbp
   1f521:	48 89 e5             	mov    %rsp,%rbp
   1f524:	48 83 ec 10          	sub    $0x10,%rsp
   1f528:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   1f52c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f530:	48 8b 10             	mov    (%rax),%rdx
   1f533:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f537:	48 89 d6             	mov    %rdx,%rsi
   1f53a:	48 89 c7             	mov    %rax,%rdi
   1f53d:	e8 14 06 00 00       	call   1fb56 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   1f542:	c9                   	leave
   1f543:	c3                   	ret

000000000001f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1f544:	55                   	push   %rbp
   1f545:	48 89 e5             	mov    %rsp,%rbp
   1f548:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f54c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f550:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1f554:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f558:	48 8b 00             	mov    (%rax),%rax
   1f55b:	48 29 c2             	sub    %rax,%rdx
   1f55e:	48 89 d0             	mov    %rdx,%rax
   1f561:	48 c1 f8 03          	sar    $0x3,%rax
   1f565:	5d                   	pop    %rbp
   1f566:	c3                   	ret
   1f567:	90                   	nop

000000000001f568 <_ZNSaIN2vk14PresentModeKHREED1Ev>:
   1f568:	55                   	push   %rbp
   1f569:	48 89 e5             	mov    %rsp,%rbp
   1f56c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f570:	90                   	nop
   1f571:	5d                   	pop    %rbp
   1f572:	c3                   	ret
   1f573:	90                   	nop

000000000001f574 <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   1f574:	55                   	push   %rbp
   1f575:	48 89 e5             	mov    %rsp,%rbp
   1f578:	48 83 ec 10          	sub    $0x10,%rsp
   1f57c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1f580:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f584:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1f588:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f58c:	48 8b 00             	mov    (%rax),%rax
   1f58f:	48 29 c2             	sub    %rax,%rdx
   1f592:	48 89 d0             	mov    %rdx,%rax
   1f595:	48 c1 f8 02          	sar    $0x2,%rax
	_M_deallocate(_M_impl._M_start,
   1f599:	48 89 c2             	mov    %rax,%rdx
   1f59c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5a0:	48 8b 08             	mov    (%rax),%rcx
   1f5a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5a7:	48 89 ce             	mov    %rcx,%rsi
   1f5aa:	48 89 c7             	mov    %rax,%rdi
   1f5ad:	e8 b6 05 00 00       	call   1fb68 <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE13_M_deallocateEPS1_m>
      }
   1f5b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5b6:	48 89 c7             	mov    %rax,%rdi
   1f5b9:	e8 d0 fc ff ff       	call   1f28e <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE12_Vector_implD1Ev>
   1f5be:	90                   	nop
   1f5bf:	c9                   	leave
   1f5c0:	c3                   	ret
   1f5c1:	90                   	nop

000000000001f5c2 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1f5c2:	55                   	push   %rbp
   1f5c3:	48 89 e5             	mov    %rsp,%rbp
   1f5c6:	48 83 ec 10          	sub    $0x10,%rsp
   1f5ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   1f5ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5d2:	48 89 c7             	mov    %rax,%rdi
   1f5d5:	e8 c4 05 00 00       	call   1fb9e <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1f5da:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1f5dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5e1:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1f5e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5e9:	48 8b 00             	mov    (%rax),%rax
   1f5ec:	48 89 ce             	mov    %rcx,%rsi
   1f5ef:	48 89 c7             	mov    %rax,%rdi
   1f5f2:	e8 b5 05 00 00       	call   1fbac <_ZSt8_DestroyIPN2vk14PresentModeKHRES1_EvT_S3_RSaIT0_E>
      }
   1f5f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5fb:	48 89 c7             	mov    %rax,%rdi
   1f5fe:	e8 71 ff ff ff       	call   1f574 <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EED1Ev>
   1f603:	90                   	nop
   1f604:	c9                   	leave
   1f605:	c3                   	ret

000000000001f606 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   1f606:	55                   	push   %rbp
   1f607:	48 89 e5             	mov    %rsp,%rbp
   1f60a:	48 83 ec 10          	sub    $0x10,%rsp
   1f60e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f612:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   1f616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f61a:	48 89 c7             	mov    %rax,%rdi
   1f61d:	e8 8e 00 00 00       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1f622:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f626:	0f 92 c0             	setb   %al
   1f629:	84 c0                	test   %al,%al
   1f62b:	74 24                	je     1f651 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   1f62d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f631:	48 89 c7             	mov    %rax,%rdi
   1f634:	e8 77 00 00 00       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1f639:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f63d:	48 29 c2             	sub    %rax,%rdx
   1f640:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f644:	48 89 d6             	mov    %rdx,%rsi
   1f647:	48 89 c7             	mov    %rax,%rdi
   1f64a:	e8 4f 06 00 00       	call   1fc9e <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE17_M_default_appendEm>
      }
   1f64f:	eb 38                	jmp    1f689 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   1f651:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f655:	48 89 c7             	mov    %rax,%rdi
   1f658:	e8 53 00 00 00       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1f65d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   1f661:	0f 92 c0             	setb   %al
   1f664:	84 c0                	test   %al,%al
   1f666:	74 21                	je     1f689 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   1f668:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f66c:	48 8b 00             	mov    (%rax),%rax
   1f66f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f673:	48 c1 e2 02          	shl    $0x2,%rdx
   1f677:	48 01 c2             	add    %rax,%rdx
   1f67a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f67e:	48 89 d6             	mov    %rdx,%rsi
   1f681:	48 89 c7             	mov    %rax,%rdi
   1f684:	e8 1f 08 00 00       	call   1fea8 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE15_M_erase_at_endEPS1_>
      }
   1f689:	90                   	nop
   1f68a:	c9                   	leave
   1f68b:	c3                   	ret

000000000001f68c <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   1f68c:	55                   	push   %rbp
   1f68d:	48 89 e5             	mov    %rsp,%rbp
   1f690:	48 83 ec 10          	sub    $0x10,%rsp
   1f694:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   1f698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f69c:	48 8b 10             	mov    (%rax),%rdx
   1f69f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6a3:	48 89 d6             	mov    %rdx,%rsi
   1f6a6:	48 89 c7             	mov    %rax,%rdi
   1f6a9:	e8 5a 08 00 00       	call   1ff08 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   1f6ae:	c9                   	leave
   1f6af:	c3                   	ret

000000000001f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1f6b0:	55                   	push   %rbp
   1f6b1:	48 89 e5             	mov    %rsp,%rbp
   1f6b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f6b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6bc:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1f6c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6c4:	48 8b 00             	mov    (%rax),%rax
   1f6c7:	48 29 c2             	sub    %rax,%rdx
   1f6ca:	48 89 d0             	mov    %rdx,%rax
   1f6cd:	48 c1 f8 02          	sar    $0x2,%rax
   1f6d1:	5d                   	pop    %rbp
   1f6d2:	c3                   	ret
   1f6d3:	90                   	nop

000000000001f6d4 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
   1f6d4:	55                   	push   %rbp
   1f6d5:	48 89 e5             	mov    %rsp,%rbp
   1f6d8:	48 83 ec 20          	sub    $0x20,%rsp
   1f6dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return begin() == end(); }
   1f6e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f6e4:	48 89 c7             	mov    %rax,%rdi
   1f6e7:	e8 54 08 00 00       	call   1ff40 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE3endEv>
   1f6ec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1f6f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f6f4:	48 89 c7             	mov    %rax,%rdi
   1f6f7:	e8 1e 08 00 00       	call   1ff1a <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE5beginEv>
   1f6fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f700:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1f704:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1f708:	48 89 d6             	mov    %rdx,%rsi
   1f70b:	48 89 c7             	mov    %rax,%rdi
   1f70e:	e8 56 08 00 00       	call   1ff69 <_ZN9__gnu_cxxeqIPKN2vk16SurfaceFormatKHRESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
   1f713:	c9                   	leave
   1f714:	c3                   	ret
   1f715:	90                   	nop

000000000001f716 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1f716:	55                   	push   %rbp
   1f717:	48 89 e5             	mov    %rsp,%rbp
   1f71a:	48 83 ec 20          	sub    $0x20,%rsp
   1f71e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   1f722:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f726:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1f72a:	48 89 d6             	mov    %rdx,%rsi
   1f72d:	48 89 c7             	mov    %rax,%rdi
   1f730:	e8 6f 08 00 00       	call   1ffa4 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1f735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f739:	c9                   	leave
   1f73a:	c3                   	ret
   1f73b:	90                   	nop

000000000001f73c <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   1f73c:	55                   	push   %rbp
   1f73d:	48 89 e5             	mov    %rsp,%rbp
   1f740:	48 83 ec 20          	sub    $0x20,%rsp
   1f744:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   1f748:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f74c:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1f750:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1f754:	48 89 d6             	mov    %rdx,%rsi
   1f757:	48 89 c7             	mov    %rax,%rdi
   1f75a:	e8 45 08 00 00       	call   1ffa4 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1f75f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f763:	c9                   	leave
   1f764:	c3                   	ret
   1f765:	90                   	nop

000000000001f766 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1f766:	55                   	push   %rbp
   1f767:	48 89 e5             	mov    %rsp,%rbp
   1f76a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   1f76e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f772:	48 8b 00             	mov    (%rax),%rax
   1f775:	48 8d 50 04          	lea    0x4(%rax),%rdx
   1f779:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f77d:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   1f780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1f784:	5d                   	pop    %rbp
   1f785:	c3                   	ret

000000000001f786 <_ZN2vk5FlagsINS_25CompositeAlphaFlagBitsKHREEC1Ej>:
    VULKAN_HPP_CONSTEXPR explicit Flags( MaskType flags ) VULKAN_HPP_NOEXCEPT : m_mask( flags ) {}
   1f786:	55                   	push   %rbp
   1f787:	48 89 e5             	mov    %rsp,%rbp
   1f78a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f78e:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1f791:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f795:	8b 55 f4             	mov    -0xc(%rbp),%edx
   1f798:	89 10                	mov    %edx,(%rax)
   1f79a:	90                   	nop
   1f79b:	5d                   	pop    %rbp
   1f79c:	c3                   	ret
   1f79d:	90                   	nop

000000000001f79e <_ZN2vk5FlagsINS_27SurfaceTransformFlagBitsKHREEC1Ej>:
   1f79e:	55                   	push   %rbp
   1f79f:	48 89 e5             	mov    %rsp,%rbp
   1f7a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f7a6:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1f7a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7ad:	8b 55 f4             	mov    -0xc(%rbp),%edx
   1f7b0:	89 10                	mov    %edx,(%rax)
   1f7b2:	90                   	nop
   1f7b3:	5d                   	pop    %rbp
   1f7b4:	c3                   	ret
   1f7b5:	90                   	nop

000000000001f7b6 <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1f7b6:	55                   	push   %rbp
   1f7b7:	48 89 e5             	mov    %rsp,%rbp
   1f7ba:	48 83 ec 20          	sub    $0x20,%rsp
   1f7be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f7c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f7c6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1f7ca:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f7cf:	74 17                	je     1f7e8 <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1f7d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f7d9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f7dd:	48 89 ce             	mov    %rcx,%rsi
   1f7e0:	48 89 c7             	mov    %rax,%rdi
   1f7e3:	e8 d9 07 00 00       	call   1ffc1 <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE10deallocateERS2_PS1_m>
      }
   1f7e8:	90                   	nop
   1f7e9:	c9                   	leave
   1f7ea:	c3                   	ret
   1f7eb:	90                   	nop

000000000001f7ec <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   1f7ec:	55                   	push   %rbp
   1f7ed:	48 89 e5             	mov    %rsp,%rbp
   1f7f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1f7f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7f8:	5d                   	pop    %rbp
   1f7f9:	c3                   	ret

000000000001f7fa <_ZSt8_DestroyIPN2vk16SurfaceFormatKHRES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1f7fa:	55                   	push   %rbp
   1f7fb:	48 89 e5             	mov    %rsp,%rbp
   1f7fe:	48 83 ec 20          	sub    $0x20,%rsp
   1f802:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f806:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f80a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   1f80e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f812:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f816:	48 89 d6             	mov    %rdx,%rsi
   1f819:	48 89 c7             	mov    %rax,%rdi
   1f81c:	e8 fe 07 00 00       	call   2001f <_ZSt8_DestroyIPN2vk16SurfaceFormatKHREEvT_S3_>
    }
   1f821:	90                   	nop
   1f822:	c9                   	leave
   1f823:	c3                   	ret

000000000001f824 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1f824:	55                   	push   %rbp
   1f825:	48 89 e5             	mov    %rsp,%rbp
   1f828:	53                   	push   %rbx
   1f829:	48 83 ec 38          	sub    $0x38,%rsp
   1f82d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1f831:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1f835:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1f839:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f83d:	48 89 c7             	mov    %rax,%rdi
   1f840:	e8 1d 08 00 00       	call   20062 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE8max_sizeEv>
   1f845:	48 89 c3             	mov    %rax,%rbx
   1f848:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f84c:	48 89 c7             	mov    %rax,%rdi
   1f84f:	e8 f0 fc ff ff       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1f854:	48 29 c3             	sub    %rax,%rbx
   1f857:	48 89 da             	mov    %rbx,%rdx
   1f85a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f85e:	48 39 c2             	cmp    %rax,%rdx
   1f861:	0f 92 c0             	setb   %al
   1f864:	84 c0                	test   %al,%al
   1f866:	74 0c                	je     1f874 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1f868:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f86c:	48 89 c7             	mov    %rax,%rdi
   1f86f:	e8 6c 58 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1f874:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f878:	48 89 c7             	mov    %rax,%rdi
   1f87b:	e8 c4 fc ff ff       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1f880:	48 89 c3             	mov    %rax,%rbx
   1f883:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f887:	48 89 c7             	mov    %rax,%rdi
   1f88a:	e8 b5 fc ff ff       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1f88f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f893:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1f897:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1f89b:	48 89 d6             	mov    %rdx,%rsi
   1f89e:	48 89 c7             	mov    %rax,%rdi
   1f8a1:	e8 36 90 ff ff       	call   188dc <_ZSt3maxImERKT_S2_S2_>
   1f8a6:	48 8b 00             	mov    (%rax),%rax
   1f8a9:	48 01 d8             	add    %rbx,%rax
   1f8ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f8b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f8b4:	48 89 c7             	mov    %rax,%rdi
   1f8b7:	e8 88 fc ff ff       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1f8bc:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1f8c0:	72 12                	jb     1f8d4 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE12_M_check_lenEmPKc+0xb0>
   1f8c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f8c6:	48 89 c7             	mov    %rax,%rdi
   1f8c9:	e8 94 07 00 00       	call   20062 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE8max_sizeEv>
   1f8ce:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1f8d2:	73 0e                	jae    1f8e2 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE12_M_check_lenEmPKc+0xbe>
   1f8d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f8d8:	48 89 c7             	mov    %rax,%rdi
   1f8db:	e8 82 07 00 00       	call   20062 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE8max_sizeEv>
   1f8e0:	eb 04                	jmp    1f8e6 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE12_M_check_lenEmPKc+0xc2>
   1f8e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1f8e6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1f8ea:	c9                   	leave
   1f8eb:	c3                   	ret

000000000001f8ec <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   1f8ec:	55                   	push   %rbp
   1f8ed:	48 89 e5             	mov    %rsp,%rbp
   1f8f0:	53                   	push   %rbx
   1f8f1:	48 83 ec 38          	sub    $0x38,%rsp
   1f8f5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1f8f9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   1f8fd:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   1f902:	0f 84 e7 01 00 00    	je     1faef <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE17_M_default_appendEm+0x203>
	  const size_type __size = size();
   1f908:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f90c:	48 89 c7             	mov    %rax,%rdi
   1f90f:	e8 30 fc ff ff       	call   1f544 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE4sizeEv>
   1f914:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1f918:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f91c:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   1f920:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f924:	48 8b 40 08          	mov    0x8(%rax),%rax
   1f928:	48 29 c2             	sub    %rax,%rdx
   1f92b:	48 89 d0             	mov    %rdx,%rax
   1f92e:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1f932:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   1f936:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f93a:	48 89 c7             	mov    %rax,%rdi
   1f93d:	e8 20 07 00 00       	call   20062 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE8max_sizeEv>
   1f942:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1f946:	72 16                	jb     1f95e <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE17_M_default_appendEm+0x72>
   1f948:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f94c:	48 89 c7             	mov    %rax,%rdi
   1f94f:	e8 0e 07 00 00       	call   20062 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE8max_sizeEv>
   1f954:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1f958:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1f95c:	73 07                	jae    1f965 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE17_M_default_appendEm+0x79>
   1f95e:	b8 01 00 00 00       	mov    $0x1,%eax
   1f963:	eb 05                	jmp    1f96a <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE17_M_default_appendEm+0x7e>
   1f965:	b8 00 00 00 00       	mov    $0x0,%eax
   1f96a:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   1f96c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f970:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1f974:	72 33                	jb     1f9a9 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE17_M_default_appendEm+0xbd>
						 __n, _M_get_Tp_allocator());
   1f976:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f97a:	48 89 c7             	mov    %rax,%rdi
   1f97d:	e8 6a fe ff ff       	call   1f7ec <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1f982:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   1f985:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f989:	48 8b 40 08          	mov    0x8(%rax),%rax
   1f98d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1f991:	48 89 ce             	mov    %rcx,%rsi
   1f994:	48 89 c7             	mov    %rax,%rdi
   1f997:	e8 e8 06 00 00       	call   20084 <_ZSt27__uninitialized_default_n_aIPN2vk16SurfaceFormatKHREmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   1f99c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1f9a0:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   1f9a4:	e9 46 01 00 00       	jmp    1faef <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   1f9a9:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1f9ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f9b1:	48 8d 15 07 f8 00 00 	lea    0xf807(%rip),%rdx        # 2f1bf <_ZNSt8__detailL19__atomic_spin_countE+0x60b>
   1f9b8:	48 89 ce             	mov    %rcx,%rsi
   1f9bb:	48 89 c7             	mov    %rax,%rdi
   1f9be:	e8 61 fe ff ff       	call   1f824 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE12_M_check_lenEmPKc>
   1f9c3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   1f9c7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f9cb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1f9cf:	48 89 d6             	mov    %rdx,%rsi
   1f9d2:	48 89 c7             	mov    %rax,%rdi
   1f9d5:	e8 d4 06 00 00       	call   200ae <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE11_M_allocateEm>
   1f9da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   1f9de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f9e2:	48 89 c7             	mov    %rax,%rdi
   1f9e5:	e8 02 fe ff ff       	call   1f7ec <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1f9ea:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   1f9ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f9f1:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   1f9f8:	00 
   1f9f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f9fd:	48 01 c1             	add    %rax,%rcx
   1fa00:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1fa04:	48 89 c6             	mov    %rax,%rsi
   1fa07:	48 89 cf             	mov    %rcx,%rdi
   1fa0a:	e8 75 06 00 00       	call   20084 <_ZSt27__uninitialized_default_n_aIPN2vk16SurfaceFormatKHREmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   1fa0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fa13:	48 89 c7             	mov    %rax,%rdi
   1fa16:	e8 d1 fd ff ff       	call   1f7ec <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1fa1b:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1fa1e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fa22:	48 8b 70 08          	mov    0x8(%rax),%rsi
   1fa26:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fa2a:	48 8b 00             	mov    (%rax),%rax
   1fa2d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1fa31:	48 89 c7             	mov    %rax,%rdi
   1fa34:	e8 a8 06 00 00       	call   200e1 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   1fa39:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   1fa3d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1fa41:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   1fa45:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1fa49:	48 8b 12             	mov    (%rdx),%rdx
   1fa4c:	48 29 d1             	sub    %rdx,%rcx
   1fa4f:	48 c1 f9 03          	sar    $0x3,%rcx
   1fa53:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   1fa56:	48 89 d6             	mov    %rdx,%rsi
   1fa59:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1fa5d:	48 8b 0a             	mov    (%rdx),%rcx
   1fa60:	48 89 f2             	mov    %rsi,%rdx
   1fa63:	48 89 ce             	mov    %rcx,%rsi
   1fa66:	48 89 c7             	mov    %rax,%rdi
   1fa69:	e8 48 fd ff ff       	call   1f7b6 <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   1fa6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fa72:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1fa76:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1fa79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fa7d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1fa81:	48 01 d0             	add    %rdx,%rax
   1fa84:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1fa8b:	00 
   1fa8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1fa90:	48 01 c2             	add    %rax,%rdx
   1fa93:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fa97:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1fa9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fa9f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1faa6:	00 
   1faa7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1faab:	48 01 c2             	add    %rax,%rdx
   1faae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fab2:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1fab6:	eb 37                	jmp    1faef <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   1fab8:	48 89 c7             	mov    %rax,%rdi
   1fabb:	e8 e0 55 fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   1fac0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fac4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1fac8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1facc:	48 89 ce             	mov    %rcx,%rsi
   1facf:	48 89 c7             	mov    %rax,%rdi
   1fad2:	e8 df fc ff ff       	call   1f7b6 <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   1fad7:	e8 34 58 fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   1fadc:	48 89 c3             	mov    %rax,%rbx
   1fadf:	e8 8c 58 fe ff       	call   5370 <__cxa_end_catch@plt>
   1fae4:	48 89 d8             	mov    %rbx,%rax
   1fae7:	48 89 c7             	mov    %rax,%rdi
   1faea:	e8 b1 58 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   1faef:	90                   	nop
   1faf0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1faf4:	c9                   	leave
   1faf5:	c3                   	ret

000000000001faf6 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   1faf6:	55                   	push   %rbp
   1faf7:	48 89 e5             	mov    %rsp,%rbp
   1fafa:	48 83 ec 20          	sub    $0x20,%rsp
   1fafe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fb02:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1fb06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb0a:	48 8b 40 08          	mov    0x8(%rax),%rax
   1fb0e:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1fb12:	48 c1 f8 03          	sar    $0x3,%rax
   1fb16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1fb1a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1fb1f:	74 32                	je     1fb53 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   1fb21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb25:	48 89 c7             	mov    %rax,%rdi
   1fb28:	e8 bf fc ff ff       	call   1f7ec <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1fb2d:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   1fb30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb34:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1fb38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fb3c:	48 89 ce             	mov    %rcx,%rsi
   1fb3f:	48 89 c7             	mov    %rax,%rdi
   1fb42:	e8 b3 fc ff ff       	call   1f7fa <_ZSt8_DestroyIPN2vk16SurfaceFormatKHRES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   1fb47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb4b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1fb4f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   1fb53:	90                   	nop
   1fb54:	c9                   	leave
   1fb55:	c3                   	ret

000000000001fb56 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   1fb56:	55                   	push   %rbp
   1fb57:	48 89 e5             	mov    %rsp,%rbp
   1fb5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fb5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1fb62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fb66:	5d                   	pop    %rbp
   1fb67:	c3                   	ret

000000000001fb68 <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1fb68:	55                   	push   %rbp
   1fb69:	48 89 e5             	mov    %rsp,%rbp
   1fb6c:	48 83 ec 20          	sub    $0x20,%rsp
   1fb70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fb74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fb78:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1fb7c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1fb81:	74 17                	je     1fb9a <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1fb83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb87:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fb8b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fb8f:	48 89 ce             	mov    %rcx,%rsi
   1fb92:	48 89 c7             	mov    %rax,%rdi
   1fb95:	e8 79 05 00 00       	call   20113 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE10deallocateERS2_PS1_m>
      }
   1fb9a:	90                   	nop
   1fb9b:	c9                   	leave
   1fb9c:	c3                   	ret
   1fb9d:	90                   	nop

000000000001fb9e <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   1fb9e:	55                   	push   %rbp
   1fb9f:	48 89 e5             	mov    %rsp,%rbp
   1fba2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1fba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fbaa:	5d                   	pop    %rbp
   1fbab:	c3                   	ret

000000000001fbac <_ZSt8_DestroyIPN2vk14PresentModeKHRES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1fbac:	55                   	push   %rbp
   1fbad:	48 89 e5             	mov    %rsp,%rbp
   1fbb0:	48 83 ec 20          	sub    $0x20,%rsp
   1fbb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fbb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fbbc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   1fbc0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1fbc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fbc8:	48 89 d6             	mov    %rdx,%rsi
   1fbcb:	48 89 c7             	mov    %rax,%rdi
   1fbce:	e8 9e 05 00 00       	call   20171 <_ZSt8_DestroyIPN2vk14PresentModeKHREEvT_S3_>
    }
   1fbd3:	90                   	nop
   1fbd4:	c9                   	leave
   1fbd5:	c3                   	ret

000000000001fbd6 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1fbd6:	55                   	push   %rbp
   1fbd7:	48 89 e5             	mov    %rsp,%rbp
   1fbda:	53                   	push   %rbx
   1fbdb:	48 83 ec 38          	sub    $0x38,%rsp
   1fbdf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1fbe3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1fbe7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1fbeb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fbef:	48 89 c7             	mov    %rax,%rdi
   1fbf2:	e8 bd 05 00 00       	call   201b4 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE8max_sizeEv>
   1fbf7:	48 89 c3             	mov    %rax,%rbx
   1fbfa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fbfe:	48 89 c7             	mov    %rax,%rdi
   1fc01:	e8 aa fa ff ff       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1fc06:	48 29 c3             	sub    %rax,%rbx
   1fc09:	48 89 da             	mov    %rbx,%rdx
   1fc0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1fc10:	48 39 c2             	cmp    %rax,%rdx
   1fc13:	0f 92 c0             	setb   %al
   1fc16:	84 c0                	test   %al,%al
   1fc18:	74 0c                	je     1fc26 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1fc1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fc1e:	48 89 c7             	mov    %rax,%rdi
   1fc21:	e8 ba 54 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1fc26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fc2a:	48 89 c7             	mov    %rax,%rdi
   1fc2d:	e8 7e fa ff ff       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1fc32:	48 89 c3             	mov    %rax,%rbx
   1fc35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fc39:	48 89 c7             	mov    %rax,%rdi
   1fc3c:	e8 6f fa ff ff       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1fc41:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1fc45:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1fc49:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1fc4d:	48 89 d6             	mov    %rdx,%rsi
   1fc50:	48 89 c7             	mov    %rax,%rdi
   1fc53:	e8 84 8c ff ff       	call   188dc <_ZSt3maxImERKT_S2_S2_>
   1fc58:	48 8b 00             	mov    (%rax),%rax
   1fc5b:	48 01 d8             	add    %rbx,%rax
   1fc5e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1fc62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fc66:	48 89 c7             	mov    %rax,%rdi
   1fc69:	e8 42 fa ff ff       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1fc6e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1fc72:	72 12                	jb     1fc86 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE12_M_check_lenEmPKc+0xb0>
   1fc74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fc78:	48 89 c7             	mov    %rax,%rdi
   1fc7b:	e8 34 05 00 00       	call   201b4 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE8max_sizeEv>
   1fc80:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1fc84:	73 0e                	jae    1fc94 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE12_M_check_lenEmPKc+0xbe>
   1fc86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fc8a:	48 89 c7             	mov    %rax,%rdi
   1fc8d:	e8 22 05 00 00       	call   201b4 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE8max_sizeEv>
   1fc92:	eb 04                	jmp    1fc98 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE12_M_check_lenEmPKc+0xc2>
   1fc94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1fc98:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1fc9c:	c9                   	leave
   1fc9d:	c3                   	ret

000000000001fc9e <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   1fc9e:	55                   	push   %rbp
   1fc9f:	48 89 e5             	mov    %rsp,%rbp
   1fca2:	53                   	push   %rbx
   1fca3:	48 83 ec 38          	sub    $0x38,%rsp
   1fca7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1fcab:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   1fcaf:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   1fcb4:	0f 84 e7 01 00 00    	je     1fea1 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE17_M_default_appendEm+0x203>
	  const size_type __size = size();
   1fcba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fcbe:	48 89 c7             	mov    %rax,%rdi
   1fcc1:	e8 ea f9 ff ff       	call   1f6b0 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE4sizeEv>
   1fcc6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1fcca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fcce:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   1fcd2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fcd6:	48 8b 40 08          	mov    0x8(%rax),%rax
   1fcda:	48 29 c2             	sub    %rax,%rdx
   1fcdd:	48 89 d0             	mov    %rdx,%rax
   1fce0:	48 c1 f8 02          	sar    $0x2,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1fce4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   1fce8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fcec:	48 89 c7             	mov    %rax,%rdi
   1fcef:	e8 c0 04 00 00       	call   201b4 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE8max_sizeEv>
   1fcf4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1fcf8:	72 16                	jb     1fd10 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE17_M_default_appendEm+0x72>
   1fcfa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fcfe:	48 89 c7             	mov    %rax,%rdi
   1fd01:	e8 ae 04 00 00       	call   201b4 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE8max_sizeEv>
   1fd06:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1fd0a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1fd0e:	73 07                	jae    1fd17 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE17_M_default_appendEm+0x79>
   1fd10:	b8 01 00 00 00       	mov    $0x1,%eax
   1fd15:	eb 05                	jmp    1fd1c <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE17_M_default_appendEm+0x7e>
   1fd17:	b8 00 00 00 00       	mov    $0x0,%eax
   1fd1c:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   1fd1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fd22:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1fd26:	72 33                	jb     1fd5b <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE17_M_default_appendEm+0xbd>
						 __n, _M_get_Tp_allocator());
   1fd28:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fd2c:	48 89 c7             	mov    %rax,%rdi
   1fd2f:	e8 6a fe ff ff       	call   1fb9e <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1fd34:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   1fd37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fd3b:	48 8b 40 08          	mov    0x8(%rax),%rax
   1fd3f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1fd43:	48 89 ce             	mov    %rcx,%rsi
   1fd46:	48 89 c7             	mov    %rax,%rdi
   1fd49:	e8 88 04 00 00       	call   201d6 <_ZSt27__uninitialized_default_n_aIPN2vk14PresentModeKHREmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   1fd4e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1fd52:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   1fd56:	e9 46 01 00 00       	jmp    1fea1 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   1fd5b:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1fd5f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fd63:	48 8d 15 55 f4 00 00 	lea    0xf455(%rip),%rdx        # 2f1bf <_ZNSt8__detailL19__atomic_spin_countE+0x60b>
   1fd6a:	48 89 ce             	mov    %rcx,%rsi
   1fd6d:	48 89 c7             	mov    %rax,%rdi
   1fd70:	e8 61 fe ff ff       	call   1fbd6 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE12_M_check_lenEmPKc>
   1fd75:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   1fd79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fd7d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1fd81:	48 89 d6             	mov    %rdx,%rsi
   1fd84:	48 89 c7             	mov    %rax,%rdi
   1fd87:	e8 74 04 00 00       	call   20200 <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE11_M_allocateEm>
   1fd8c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   1fd90:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fd94:	48 89 c7             	mov    %rax,%rdi
   1fd97:	e8 02 fe ff ff       	call   1fb9e <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1fd9c:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   1fd9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fda3:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
   1fdaa:	00 
   1fdab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1fdaf:	48 01 c1             	add    %rax,%rcx
   1fdb2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1fdb6:	48 89 c6             	mov    %rax,%rsi
   1fdb9:	48 89 cf             	mov    %rcx,%rdi
   1fdbc:	e8 15 04 00 00       	call   201d6 <_ZSt27__uninitialized_default_n_aIPN2vk14PresentModeKHREmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   1fdc1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fdc5:	48 89 c7             	mov    %rax,%rdi
   1fdc8:	e8 d1 fd ff ff       	call   1fb9e <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1fdcd:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1fdd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fdd4:	48 8b 70 08          	mov    0x8(%rax),%rsi
   1fdd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fddc:	48 8b 00             	mov    (%rax),%rax
   1fddf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1fde3:	48 89 c7             	mov    %rax,%rdi
   1fde6:	e8 48 04 00 00       	call   20233 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   1fdeb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   1fdef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1fdf3:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   1fdf7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1fdfb:	48 8b 12             	mov    (%rdx),%rdx
   1fdfe:	48 29 d1             	sub    %rdx,%rcx
   1fe01:	48 c1 f9 02          	sar    $0x2,%rcx
   1fe05:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   1fe08:	48 89 d6             	mov    %rdx,%rsi
   1fe0b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1fe0f:	48 8b 0a             	mov    (%rdx),%rcx
   1fe12:	48 89 f2             	mov    %rsi,%rdx
   1fe15:	48 89 ce             	mov    %rcx,%rsi
   1fe18:	48 89 c7             	mov    %rax,%rdi
   1fe1b:	e8 48 fd ff ff       	call   1fb68 <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   1fe20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fe24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1fe28:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1fe2b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fe2f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1fe33:	48 01 d0             	add    %rdx,%rax
   1fe36:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1fe3d:	00 
   1fe3e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1fe42:	48 01 c2             	add    %rax,%rdx
   1fe45:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fe49:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1fe4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fe51:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1fe58:	00 
   1fe59:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1fe5d:	48 01 c2             	add    %rax,%rdx
   1fe60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fe64:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1fe68:	eb 37                	jmp    1fea1 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   1fe6a:	48 89 c7             	mov    %rax,%rdi
   1fe6d:	e8 2e 52 fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   1fe72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fe76:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1fe7a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1fe7e:	48 89 ce             	mov    %rcx,%rsi
   1fe81:	48 89 c7             	mov    %rax,%rdi
   1fe84:	e8 df fc ff ff       	call   1fb68 <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   1fe89:	e8 82 54 fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   1fe8e:	48 89 c3             	mov    %rax,%rbx
   1fe91:	e8 da 54 fe ff       	call   5370 <__cxa_end_catch@plt>
   1fe96:	48 89 d8             	mov    %rbx,%rax
   1fe99:	48 89 c7             	mov    %rax,%rdi
   1fe9c:	e8 ff 54 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   1fea1:	90                   	nop
   1fea2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1fea6:	c9                   	leave
   1fea7:	c3                   	ret

000000000001fea8 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   1fea8:	55                   	push   %rbp
   1fea9:	48 89 e5             	mov    %rsp,%rbp
   1feac:	48 83 ec 20          	sub    $0x20,%rsp
   1feb0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1feb4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1feb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1febc:	48 8b 40 08          	mov    0x8(%rax),%rax
   1fec0:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1fec4:	48 c1 f8 02          	sar    $0x2,%rax
   1fec8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1fecc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1fed1:	74 32                	je     1ff05 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   1fed3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fed7:	48 89 c7             	mov    %rax,%rdi
   1feda:	e8 bf fc ff ff       	call   1fb9e <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   1fedf:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   1fee2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fee6:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1feea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1feee:	48 89 ce             	mov    %rcx,%rsi
   1fef1:	48 89 c7             	mov    %rax,%rdi
   1fef4:	e8 b3 fc ff ff       	call   1fbac <_ZSt8_DestroyIPN2vk14PresentModeKHRES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   1fef9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fefd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1ff01:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   1ff05:	90                   	nop
   1ff06:	c9                   	leave
   1ff07:	c3                   	ret

000000000001ff08 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   1ff08:	55                   	push   %rbp
   1ff09:	48 89 e5             	mov    %rsp,%rbp
   1ff0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ff10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1ff14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ff18:	5d                   	pop    %rbp
   1ff19:	c3                   	ret

000000000001ff1a <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
   1ff1a:	55                   	push   %rbp
   1ff1b:	48 89 e5             	mov    %rsp,%rbp
   1ff1e:	48 83 ec 20          	sub    $0x20,%rsp
   1ff22:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
   1ff26:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ff2a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1ff2e:	48 89 d6             	mov    %rdx,%rsi
   1ff31:	48 89 c7             	mov    %rax,%rdi
   1ff34:	e8 2d 03 00 00       	call   20266 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk16SurfaceFormatKHRESt6vectorIS2_SaIS2_EEEC1ERKS4_>
   1ff39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff3d:	c9                   	leave
   1ff3e:	c3                   	ret
   1ff3f:	90                   	nop

000000000001ff40 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
   1ff40:	55                   	push   %rbp
   1ff41:	48 89 e5             	mov    %rsp,%rbp
   1ff44:	48 83 ec 20          	sub    $0x20,%rsp
   1ff48:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
   1ff4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ff50:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1ff54:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1ff58:	48 89 d6             	mov    %rdx,%rsi
   1ff5b:	48 89 c7             	mov    %rax,%rdi
   1ff5e:	e8 03 03 00 00       	call   20266 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk16SurfaceFormatKHRESt6vectorIS2_SaIS2_EEEC1ERKS4_>
   1ff63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff67:	c9                   	leave
   1ff68:	c3                   	ret

000000000001ff69 <_ZN9__gnu_cxxeqIPKN2vk16SurfaceFormatKHRESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   1ff69:	55                   	push   %rbp
   1ff6a:	48 89 e5             	mov    %rsp,%rbp
   1ff6d:	53                   	push   %rbx
   1ff6e:	48 83 ec 18          	sub    $0x18,%rsp
   1ff72:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ff76:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   1ff7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ff7e:	48 89 c7             	mov    %rax,%rdi
   1ff81:	e8 fe 02 00 00       	call   20284 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk16SurfaceFormatKHRESt6vectorIS2_SaIS2_EEE4baseEv>
   1ff86:	48 8b 18             	mov    (%rax),%rbx
   1ff89:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ff8d:	48 89 c7             	mov    %rax,%rdi
   1ff90:	e8 ef 02 00 00       	call   20284 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk16SurfaceFormatKHRESt6vectorIS2_SaIS2_EEE4baseEv>
   1ff95:	48 8b 00             	mov    (%rax),%rax
   1ff98:	48 39 c3             	cmp    %rax,%rbx
   1ff9b:	0f 94 c0             	sete   %al
   1ff9e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ffa2:	c9                   	leave
   1ffa3:	c3                   	ret

000000000001ffa4 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHRESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1ffa4:	55                   	push   %rbp
   1ffa5:	48 89 e5             	mov    %rsp,%rbp
   1ffa8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ffac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1ffb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ffb4:	48 8b 10             	mov    (%rax),%rdx
   1ffb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ffbb:	48 89 10             	mov    %rdx,(%rax)
   1ffbe:	90                   	nop
   1ffbf:	5d                   	pop    %rbp
   1ffc0:	c3                   	ret

000000000001ffc1 <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1ffc1:	55                   	push   %rbp
   1ffc2:	48 89 e5             	mov    %rsp,%rbp
   1ffc5:	48 83 ec 40          	sub    $0x40,%rsp
   1ffc9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1ffcd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1ffd1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1ffd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ffd9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1ffdd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ffe1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1ffe5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ffe9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1ffed:	e8 ac 61 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1fff2:	84 c0                	test   %al,%al
   1fff4:	74 0e                	je     20004 <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1fff6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fffa:	48 89 c7             	mov    %rax,%rdi
   1fffd:	e8 ee 51 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   20002:	eb 18                	jmp    2001c <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   20004:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   20008:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   2000c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20010:	48 89 ce             	mov    %rcx,%rsi
   20013:	48 89 c7             	mov    %rax,%rdi
   20016:	e8 f7 05 00 00       	call   20612 <_ZNSt15__new_allocatorIN2vk16SurfaceFormatKHREE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   2001b:	90                   	nop
   2001c:	90                   	nop
   2001d:	c9                   	leave
   2001e:	c3                   	ret

000000000002001f <_ZSt8_DestroyIPN2vk16SurfaceFormatKHREEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   2001f:	55                   	push   %rbp
   20020:	48 89 e5             	mov    %rsp,%rbp
   20023:	48 83 ec 10          	sub    $0x10,%rsp
   20027:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2002b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   2002f:	e8 6a 61 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   20034:	84 c0                	test   %al,%al
   20036:	74 15                	je     2004d <_ZSt8_DestroyIPN2vk16SurfaceFormatKHREEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   20038:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2003c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20040:	48 89 d6             	mov    %rdx,%rsi
   20043:	48 89 c7             	mov    %rax,%rdi
   20046:	e8 47 02 00 00       	call   20292 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk16SurfaceFormatKHREEEvT_S5_>
   2004b:	eb 13                	jmp    20060 <_ZSt8_DestroyIPN2vk16SurfaceFormatKHREEvT_S3_+0x41>
	__destroy(__first, __last);
   2004d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20051:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20055:	48 89 d6             	mov    %rdx,%rsi
   20058:	48 89 c7             	mov    %rax,%rdi
   2005b:	e8 6b 02 00 00       	call   202cb <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk16SurfaceFormatKHREEEvT_S5_>
    }
   20060:	c9                   	leave
   20061:	c3                   	ret

0000000000020062 <_ZNKSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   20062:	55                   	push   %rbp
   20063:	48 89 e5             	mov    %rsp,%rbp
   20066:	48 83 ec 10          	sub    $0x10,%rsp
   2006a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   2006e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20072:	48 89 c7             	mov    %rax,%rdi
   20075:	e8 b6 02 00 00       	call   20330 <_ZNKSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   2007a:	48 89 c7             	mov    %rax,%rdi
   2007d:	e8 6c 02 00 00       	call   202ee <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE11_S_max_sizeERKS2_>
   20082:	c9                   	leave
   20083:	c3                   	ret

0000000000020084 <_ZSt27__uninitialized_default_n_aIPN2vk16SurfaceFormatKHREmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   20084:	55                   	push   %rbp
   20085:	48 89 e5             	mov    %rsp,%rbp
   20088:	48 83 ec 20          	sub    $0x20,%rsp
   2008c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20090:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20094:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   20098:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2009c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   200a0:	48 89 d6             	mov    %rdx,%rsi
   200a3:	48 89 c7             	mov    %rax,%rdi
   200a6:	e8 93 02 00 00       	call   2033e <_ZSt25__uninitialized_default_nIPN2vk16SurfaceFormatKHREmET_S3_T0_>
   200ab:	c9                   	leave
   200ac:	c3                   	ret
   200ad:	90                   	nop

00000000000200ae <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   200ae:	55                   	push   %rbp
   200af:	48 89 e5             	mov    %rsp,%rbp
   200b2:	48 83 ec 10          	sub    $0x10,%rsp
   200b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   200ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   200be:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   200c3:	74 15                	je     200da <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE11_M_allocateEm+0x2c>
   200c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   200c9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   200cd:	48 89 d6             	mov    %rdx,%rsi
   200d0:	48 89 c7             	mov    %rax,%rdi
   200d3:	e8 8f 02 00 00       	call   20367 <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE8allocateERS2_m>
   200d8:	eb 05                	jmp    200df <_ZNSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE11_M_allocateEm+0x31>
   200da:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   200df:	c9                   	leave
   200e0:	c3                   	ret

00000000000200e1 <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   200e1:	55                   	push   %rbp
   200e2:	48 89 e5             	mov    %rsp,%rbp
   200e5:	48 83 ec 20          	sub    $0x20,%rsp
   200e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   200ed:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   200f1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   200f5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   200f9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   200fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   20101:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   20105:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20109:	48 89 c7             	mov    %rax,%rdi
   2010c:	e8 dd 02 00 00       	call   203ee <_ZSt12__relocate_aIPN2vk16SurfaceFormatKHRES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   20111:	c9                   	leave
   20112:	c3                   	ret

0000000000020113 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   20113:	55                   	push   %rbp
   20114:	48 89 e5             	mov    %rsp,%rbp
   20117:	48 83 ec 40          	sub    $0x40,%rsp
   2011b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2011f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   20123:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   20127:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2012b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2012f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   20133:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   20137:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2013b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   2013f:	e8 5a 60 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   20144:	84 c0                	test   %al,%al
   20146:	74 0e                	je     20156 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   20148:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2014c:	48 89 c7             	mov    %rax,%rdi
   2014f:	e8 9c 50 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   20154:	eb 18                	jmp    2016e <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   20156:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2015a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   2015e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20162:	48 89 ce             	mov    %rcx,%rsi
   20165:	48 89 c7             	mov    %rax,%rdi
   20168:	e8 c3 05 00 00       	call   20730 <_ZNSt15__new_allocatorIN2vk14PresentModeKHREE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   2016d:	90                   	nop
   2016e:	90                   	nop
   2016f:	c9                   	leave
   20170:	c3                   	ret

0000000000020171 <_ZSt8_DestroyIPN2vk14PresentModeKHREEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   20171:	55                   	push   %rbp
   20172:	48 89 e5             	mov    %rsp,%rbp
   20175:	48 83 ec 10          	sub    $0x10,%rsp
   20179:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2017d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   20181:	e8 18 60 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   20186:	84 c0                	test   %al,%al
   20188:	74 15                	je     2019f <_ZSt8_DestroyIPN2vk14PresentModeKHREEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   2018a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2018e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20192:	48 89 d6             	mov    %rdx,%rsi
   20195:	48 89 c7             	mov    %rax,%rdi
   20198:	e8 b4 02 00 00       	call   20451 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk14PresentModeKHREEEvT_S5_>
   2019d:	eb 13                	jmp    201b2 <_ZSt8_DestroyIPN2vk14PresentModeKHREEvT_S3_+0x41>
	__destroy(__first, __last);
   2019f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   201a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   201a7:	48 89 d6             	mov    %rdx,%rsi
   201aa:	48 89 c7             	mov    %rax,%rdi
   201ad:	e8 d8 02 00 00       	call   2048a <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk14PresentModeKHREEEvT_S5_>
    }
   201b2:	c9                   	leave
   201b3:	c3                   	ret

00000000000201b4 <_ZNKSt6vectorIN2vk14PresentModeKHRESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   201b4:	55                   	push   %rbp
   201b5:	48 89 e5             	mov    %rsp,%rbp
   201b8:	48 83 ec 10          	sub    $0x10,%rsp
   201bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   201c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   201c4:	48 89 c7             	mov    %rax,%rdi
   201c7:	e8 24 03 00 00       	call   204f0 <_ZNKSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE19_M_get_Tp_allocatorEv>
   201cc:	48 89 c7             	mov    %rax,%rdi
   201cf:	e8 d9 02 00 00       	call   204ad <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE11_S_max_sizeERKS2_>
   201d4:	c9                   	leave
   201d5:	c3                   	ret

00000000000201d6 <_ZSt27__uninitialized_default_n_aIPN2vk14PresentModeKHREmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   201d6:	55                   	push   %rbp
   201d7:	48 89 e5             	mov    %rsp,%rbp
   201da:	48 83 ec 20          	sub    $0x20,%rsp
   201de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   201e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   201e6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   201ea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   201ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   201f2:	48 89 d6             	mov    %rdx,%rsi
   201f5:	48 89 c7             	mov    %rax,%rdi
   201f8:	e8 01 03 00 00       	call   204fe <_ZSt25__uninitialized_default_nIPN2vk14PresentModeKHREmET_S3_T0_>
   201fd:	c9                   	leave
   201fe:	c3                   	ret
   201ff:	90                   	nop

0000000000020200 <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   20200:	55                   	push   %rbp
   20201:	48 89 e5             	mov    %rsp,%rbp
   20204:	48 83 ec 10          	sub    $0x10,%rsp
   20208:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2020c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   20210:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   20215:	74 15                	je     2022c <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE11_M_allocateEm+0x2c>
   20217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2021b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2021f:	48 89 d6             	mov    %rdx,%rsi
   20222:	48 89 c7             	mov    %rax,%rdi
   20225:	e8 fd 02 00 00       	call   20527 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE8allocateERS2_m>
   2022a:	eb 05                	jmp    20231 <_ZNSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE11_M_allocateEm+0x31>
   2022c:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   20231:	c9                   	leave
   20232:	c3                   	ret

0000000000020233 <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   20233:	55                   	push   %rbp
   20234:	48 89 e5             	mov    %rsp,%rbp
   20237:	48 83 ec 20          	sub    $0x20,%rsp
   2023b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2023f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20243:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20247:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   2024b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2024f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   20253:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   20257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2025b:	48 89 c7             	mov    %rax,%rdi
   2025e:	e8 4b 03 00 00       	call   205ae <_ZSt12__relocate_aIPN2vk14PresentModeKHRES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   20263:	c9                   	leave
   20264:	c3                   	ret
   20265:	90                   	nop

0000000000020266 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk16SurfaceFormatKHRESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   20266:	55                   	push   %rbp
   20267:	48 89 e5             	mov    %rsp,%rbp
   2026a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2026e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   20272:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20276:	48 8b 10             	mov    (%rax),%rdx
   20279:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2027d:	48 89 10             	mov    %rdx,(%rax)
   20280:	90                   	nop
   20281:	5d                   	pop    %rbp
   20282:	c3                   	ret
   20283:	90                   	nop

0000000000020284 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk16SurfaceFormatKHRESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   20284:	55                   	push   %rbp
   20285:	48 89 e5             	mov    %rsp,%rbp
   20288:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   2028c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20290:	5d                   	pop    %rbp
   20291:	c3                   	ret

0000000000020292 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk16SurfaceFormatKHREEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   20292:	55                   	push   %rbp
   20293:	48 89 e5             	mov    %rsp,%rbp
   20296:	48 83 ec 10          	sub    $0x10,%rsp
   2029a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2029e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   202a2:	eb 19                	jmp    202bd <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk16SurfaceFormatKHREEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   202a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   202a8:	48 89 c7             	mov    %rax,%rdi
   202ab:	e8 93 03 00 00       	call   20643 <_ZSt11__addressofIN2vk16SurfaceFormatKHREEPT_RS2_>
   202b0:	48 89 c7             	mov    %rax,%rdi
   202b3:	e8 99 03 00 00       	call   20651 <_ZSt8_DestroyIN2vk16SurfaceFormatKHREEvPT_>
	  for (; __first != __last; ++__first)
   202b8:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   202bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   202c1:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   202c5:	75 dd                	jne    202a4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk16SurfaceFormatKHREEEvT_S5_+0x12>
	}
   202c7:	90                   	nop
   202c8:	90                   	nop
   202c9:	c9                   	leave
   202ca:	c3                   	ret

00000000000202cb <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk16SurfaceFormatKHREEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   202cb:	55                   	push   %rbp
   202cc:	48 89 e5             	mov    %rsp,%rbp
   202cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   202d3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   202d7:	90                   	nop
   202d8:	5d                   	pop    %rbp
   202d9:	c3                   	ret

00000000000202da <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   202da:	55                   	push   %rbp
   202db:	48 89 e5             	mov    %rsp,%rbp
   202de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   202e2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   202e9:	ff ff 1f 
      }
   202ec:	5d                   	pop    %rbp
   202ed:	c3                   	ret

00000000000202ee <_ZNSt6vectorIN2vk16SurfaceFormatKHRESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   202ee:	55                   	push   %rbp
   202ef:	48 89 e5             	mov    %rsp,%rbp
   202f2:	48 83 ec 20          	sub    $0x20,%rsp
   202f6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   202fa:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   20301:	ff ff 0f 
   20304:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   20308:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2030c:	48 89 c7             	mov    %rax,%rdi
   2030f:	e8 c6 ff ff ff       	call   202da <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE8max_sizeERKS2_>
   20314:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   20318:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   2031c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   20320:	48 89 d6             	mov    %rdx,%rsi
   20323:	48 89 c7             	mov    %rax,%rdi
   20326:	e8 37 6e ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   2032b:	48 8b 00             	mov    (%rax),%rax
      }
   2032e:	c9                   	leave
   2032f:	c3                   	ret

0000000000020330 <_ZNKSt12_Vector_baseIN2vk16SurfaceFormatKHRESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   20330:	55                   	push   %rbp
   20331:	48 89 e5             	mov    %rsp,%rbp
   20334:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   20338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2033c:	5d                   	pop    %rbp
   2033d:	c3                   	ret

000000000002033e <_ZSt25__uninitialized_default_nIPN2vk16SurfaceFormatKHREmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   2033e:	55                   	push   %rbp
   2033f:	48 89 e5             	mov    %rsp,%rbp
   20342:	48 83 ec 20          	sub    $0x20,%rsp
   20346:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2034a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   2034e:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   20352:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   20356:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2035a:	48 89 d6             	mov    %rdx,%rsi
   2035d:	48 89 c7             	mov    %rax,%rdi
   20360:	e8 07 03 00 00       	call   2066c <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk16SurfaceFormatKHREmEET_S5_T0_>
    }
   20365:	c9                   	leave
   20366:	c3                   	ret

0000000000020367 <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   20367:	55                   	push   %rbp
   20368:	48 89 e5             	mov    %rsp,%rbp
   2036b:	48 83 ec 20          	sub    $0x20,%rsp
   2036f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20373:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   20377:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2037b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2037f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20383:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   20387:	e8 12 5e fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   2038c:	84 c0                	test   %al,%al
   2038e:	74 43                	je     203d3 <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE8allocateERS2_m+0x6c>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   20390:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20394:	b9 00 00 00 00       	mov    $0x0,%ecx
   20399:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   203a0:	00 
   203a1:	48 c1 e8 3d          	shr    $0x3d,%rax
   203a5:	48 85 c0             	test   %rax,%rax
   203a8:	74 05                	je     203af <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE8allocateERS2_m+0x48>
   203aa:	b9 01 00 00 00       	mov    $0x1,%ecx
   203af:	48 89 d0             	mov    %rdx,%rax
   203b2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   203b6:	48 89 c8             	mov    %rcx,%rax
   203b9:	83 e0 01             	and    $0x1,%eax
   203bc:	84 c0                	test   %al,%al
   203be:	74 05                	je     203c5 <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE8allocateERS2_m+0x5e>
	      std::__throw_bad_array_new_length();
   203c0:	e8 bb 4d fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   203c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   203c9:	48 89 c7             	mov    %rax,%rdi
   203cc:	e8 4f 4e fe ff       	call   5220 <_Znwm@plt>
   203d1:	eb 19                	jmp    203ec <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE8allocateERS2_m+0x85>
	return __allocator_base<_Tp>::allocate(__n, 0);
   203d3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   203d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   203db:	ba 00 00 00 00       	mov    $0x0,%edx
   203e0:	48 89 ce             	mov    %rcx,%rsi
   203e3:	48 89 c7             	mov    %rax,%rdi
   203e6:	e8 47 05 00 00       	call   20932 <_ZNSt15__new_allocatorIN2vk16SurfaceFormatKHREE8allocateEmPKv>
   203eb:	90                   	nop
      { return __a.allocate(__n); }
   203ec:	c9                   	leave
   203ed:	c3                   	ret

00000000000203ee <_ZSt12__relocate_aIPN2vk16SurfaceFormatKHRES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   203ee:	55                   	push   %rbp
   203ef:	48 89 e5             	mov    %rsp,%rbp
   203f2:	41 54                	push   %r12
   203f4:	53                   	push   %rbx
   203f5:	48 83 ec 20          	sub    $0x20,%rsp
   203f9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   203fd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   20401:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   20405:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   20409:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2040d:	48 89 c7             	mov    %rax,%rdi
   20410:	e8 9c 02 00 00       	call   206b1 <_ZSt12__niter_baseIPN2vk16SurfaceFormatKHREET_S3_>
   20415:	49 89 c4             	mov    %rax,%r12
   20418:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2041c:	48 89 c7             	mov    %rax,%rdi
   2041f:	e8 8d 02 00 00       	call   206b1 <_ZSt12__niter_baseIPN2vk16SurfaceFormatKHREET_S3_>
   20424:	48 89 c3             	mov    %rax,%rbx
   20427:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2042b:	48 89 c7             	mov    %rax,%rdi
   2042e:	e8 7e 02 00 00       	call   206b1 <_ZSt12__niter_baseIPN2vk16SurfaceFormatKHREET_S3_>
   20433:	48 89 c7             	mov    %rax,%rdi
   20436:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2043a:	48 89 c1             	mov    %rax,%rcx
   2043d:	4c 89 e2             	mov    %r12,%rdx
   20440:	48 89 de             	mov    %rbx,%rsi
   20443:	e8 77 02 00 00       	call   206bf <_ZSt14__relocate_a_1IPN2vk16SurfaceFormatKHRES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   20448:	48 83 c4 20          	add    $0x20,%rsp
   2044c:	5b                   	pop    %rbx
   2044d:	41 5c                	pop    %r12
   2044f:	5d                   	pop    %rbp
   20450:	c3                   	ret

0000000000020451 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk14PresentModeKHREEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   20451:	55                   	push   %rbp
   20452:	48 89 e5             	mov    %rsp,%rbp
   20455:	48 83 ec 10          	sub    $0x10,%rsp
   20459:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2045d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   20461:	eb 19                	jmp    2047c <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk14PresentModeKHREEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   20463:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20467:	48 89 c7             	mov    %rax,%rdi
   2046a:	e8 f2 02 00 00       	call   20761 <_ZSt11__addressofIN2vk14PresentModeKHREEPT_RS2_>
   2046f:	48 89 c7             	mov    %rax,%rdi
   20472:	e8 f8 02 00 00       	call   2076f <_ZSt8_DestroyIN2vk14PresentModeKHREEvPT_>
	  for (; __first != __last; ++__first)
   20477:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
   2047c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20480:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   20484:	75 dd                	jne    20463 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk14PresentModeKHREEEvT_S5_+0x12>
	}
   20486:	90                   	nop
   20487:	90                   	nop
   20488:	c9                   	leave
   20489:	c3                   	ret

000000000002048a <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk14PresentModeKHREEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   2048a:	55                   	push   %rbp
   2048b:	48 89 e5             	mov    %rsp,%rbp
   2048e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20492:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20496:	90                   	nop
   20497:	5d                   	pop    %rbp
   20498:	c3                   	ret

0000000000020499 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   20499:	55                   	push   %rbp
   2049a:	48 89 e5             	mov    %rsp,%rbp
   2049d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   204a1:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
   204a8:	ff ff 3f 
      }
   204ab:	5d                   	pop    %rbp
   204ac:	c3                   	ret

00000000000204ad <_ZNSt6vectorIN2vk14PresentModeKHRESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   204ad:	55                   	push   %rbp
   204ae:	48 89 e5             	mov    %rsp,%rbp
   204b1:	48 83 ec 20          	sub    $0x20,%rsp
   204b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   204b9:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   204c0:	ff ff 1f 
   204c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   204c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   204cb:	48 89 c7             	mov    %rax,%rdi
   204ce:	e8 c6 ff ff ff       	call   20499 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE8max_sizeERKS2_>
   204d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   204d7:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   204db:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   204df:	48 89 d6             	mov    %rdx,%rsi
   204e2:	48 89 c7             	mov    %rax,%rdi
   204e5:	e8 78 6c ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   204ea:	48 8b 00             	mov    (%rax),%rax
      }
   204ed:	c9                   	leave
   204ee:	c3                   	ret
   204ef:	90                   	nop

00000000000204f0 <_ZNKSt12_Vector_baseIN2vk14PresentModeKHRESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   204f0:	55                   	push   %rbp
   204f1:	48 89 e5             	mov    %rsp,%rbp
   204f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   204f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   204fc:	5d                   	pop    %rbp
   204fd:	c3                   	ret

00000000000204fe <_ZSt25__uninitialized_default_nIPN2vk14PresentModeKHREmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   204fe:	55                   	push   %rbp
   204ff:	48 89 e5             	mov    %rsp,%rbp
   20502:	48 83 ec 20          	sub    $0x20,%rsp
   20506:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2050a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   2050e:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   20512:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   20516:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2051a:	48 89 d6             	mov    %rdx,%rsi
   2051d:	48 89 c7             	mov    %rax,%rdi
   20520:	e8 65 02 00 00       	call   2078a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPN2vk14PresentModeKHREmEET_S5_T0_>
    }
   20525:	c9                   	leave
   20526:	c3                   	ret

0000000000020527 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   20527:	55                   	push   %rbp
   20528:	48 89 e5             	mov    %rsp,%rbp
   2052b:	48 83 ec 20          	sub    $0x20,%rsp
   2052f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20533:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   20537:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2053b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2053f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20543:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   20547:	e8 52 5c fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   2054c:	84 c0                	test   %al,%al
   2054e:	74 43                	je     20593 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE8allocateERS2_m+0x6c>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   20550:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20554:	b9 00 00 00 00       	mov    $0x0,%ecx
   20559:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   20560:	00 
   20561:	48 c1 e8 3e          	shr    $0x3e,%rax
   20565:	48 85 c0             	test   %rax,%rax
   20568:	74 05                	je     2056f <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE8allocateERS2_m+0x48>
   2056a:	b9 01 00 00 00       	mov    $0x1,%ecx
   2056f:	48 89 d0             	mov    %rdx,%rax
   20572:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   20576:	48 89 c8             	mov    %rcx,%rax
   20579:	83 e0 01             	and    $0x1,%eax
   2057c:	84 c0                	test   %al,%al
   2057e:	74 05                	je     20585 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE8allocateERS2_m+0x5e>
	      std::__throw_bad_array_new_length();
   20580:	e8 fb 4b fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   20585:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20589:	48 89 c7             	mov    %rax,%rdi
   2058c:	e8 8f 4c fe ff       	call   5220 <_Znwm@plt>
   20591:	eb 19                	jmp    205ac <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE8allocateERS2_m+0x85>
	return __allocator_base<_Tp>::allocate(__n, 0);
   20593:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   20597:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2059b:	ba 00 00 00 00       	mov    $0x0,%edx
   205a0:	48 89 ce             	mov    %rcx,%rsi
   205a3:	48 89 c7             	mov    %rax,%rdi
   205a6:	e8 cb 04 00 00       	call   20a76 <_ZNSt15__new_allocatorIN2vk14PresentModeKHREE8allocateEmPKv>
   205ab:	90                   	nop
      { return __a.allocate(__n); }
   205ac:	c9                   	leave
   205ad:	c3                   	ret

00000000000205ae <_ZSt12__relocate_aIPN2vk14PresentModeKHRES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   205ae:	55                   	push   %rbp
   205af:	48 89 e5             	mov    %rsp,%rbp
   205b2:	41 54                	push   %r12
   205b4:	53                   	push   %rbx
   205b5:	48 83 ec 20          	sub    $0x20,%rsp
   205b9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   205bd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   205c1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   205c5:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   205c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   205cd:	48 89 c7             	mov    %rax,%rdi
   205d0:	e8 12 02 00 00       	call   207e7 <_ZSt12__niter_baseIPN2vk14PresentModeKHREET_S3_>
   205d5:	49 89 c4             	mov    %rax,%r12
   205d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   205dc:	48 89 c7             	mov    %rax,%rdi
   205df:	e8 03 02 00 00       	call   207e7 <_ZSt12__niter_baseIPN2vk14PresentModeKHREET_S3_>
   205e4:	48 89 c3             	mov    %rax,%rbx
   205e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   205eb:	48 89 c7             	mov    %rax,%rdi
   205ee:	e8 f4 01 00 00       	call   207e7 <_ZSt12__niter_baseIPN2vk14PresentModeKHREET_S3_>
   205f3:	48 89 c7             	mov    %rax,%rdi
   205f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   205fa:	48 89 c1             	mov    %rax,%rcx
   205fd:	4c 89 e2             	mov    %r12,%rdx
   20600:	48 89 de             	mov    %rbx,%rsi
   20603:	e8 0b 02 00 00       	call   20813 <_ZSt14__relocate_a_1IN2vk14PresentModeKHRES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   20608:	48 83 c4 20          	add    $0x20,%rsp
   2060c:	5b                   	pop    %rbx
   2060d:	41 5c                	pop    %r12
   2060f:	5d                   	pop    %rbp
   20610:	c3                   	ret
   20611:	90                   	nop

0000000000020612 <_ZNSt15__new_allocatorIN2vk16SurfaceFormatKHREE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   20612:	55                   	push   %rbp
   20613:	48 89 e5             	mov    %rsp,%rbp
   20616:	48 83 ec 20          	sub    $0x20,%rsp
   2061a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2061e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20622:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   20626:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2062a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   20631:	00 
   20632:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20636:	48 89 d6             	mov    %rdx,%rsi
   20639:	48 89 c7             	mov    %rax,%rdi
   2063c:	e8 ef 4b fe ff       	call   5230 <_ZdlPvm@plt>
      }
   20641:	c9                   	leave
   20642:	c3                   	ret

0000000000020643 <_ZSt11__addressofIN2vk16SurfaceFormatKHREEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   20643:	55                   	push   %rbp
   20644:	48 89 e5             	mov    %rsp,%rbp
   20647:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   2064b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2064f:	5d                   	pop    %rbp
   20650:	c3                   	ret

0000000000020651 <_ZSt8_DestroyIN2vk16SurfaceFormatKHREEvPT_>:
    _Destroy(_Tp* __pointer)
   20651:	55                   	push   %rbp
   20652:	48 89 e5             	mov    %rsp,%rbp
   20655:	48 83 ec 10          	sub    $0x10,%rsp
   20659:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   2065d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20661:	48 89 c7             	mov    %rax,%rdi
   20664:	e8 52 02 00 00       	call   208bb <_ZSt10destroy_atIN2vk16SurfaceFormatKHREEvPT_>
    }
   20669:	90                   	nop
   2066a:	c9                   	leave
   2066b:	c3                   	ret

000000000002066c <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk16SurfaceFormatKHREmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   2066c:	55                   	push   %rbp
   2066d:	48 89 e5             	mov    %rsp,%rbp
   20670:	48 83 ec 20          	sub    $0x20,%rsp
   20674:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20678:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   2067c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20680:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   20684:	eb 1e                	jmp    206a4 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk16SurfaceFormatKHREmEET_S5_T0_+0x38>
		std::_Construct(std::__addressof(*__cur));
   20686:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2068a:	48 89 c7             	mov    %rax,%rdi
   2068d:	e8 b1 ff ff ff       	call   20643 <_ZSt11__addressofIN2vk16SurfaceFormatKHREEPT_RS2_>
   20692:	48 89 c7             	mov    %rax,%rdi
   20695:	e8 4c 02 00 00       	call   208e6 <_ZSt10_ConstructIN2vk16SurfaceFormatKHREJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   2069a:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   2069f:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   206a4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   206a9:	75 db                	jne    20686 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk16SurfaceFormatKHREmEET_S5_T0_+0x1a>
	      return __cur;
   206ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   206af:	c9                   	leave
   206b0:	c3                   	ret

00000000000206b1 <_ZSt12__niter_baseIPN2vk16SurfaceFormatKHREET_S3_>:
    __niter_base(_Iterator __it)
   206b1:	55                   	push   %rbp
   206b2:	48 89 e5             	mov    %rsp,%rbp
   206b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   206b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   206bd:	5d                   	pop    %rbp
   206be:	c3                   	ret

00000000000206bf <_ZSt14__relocate_a_1IPN2vk16SurfaceFormatKHRES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   206bf:	55                   	push   %rbp
   206c0:	48 89 e5             	mov    %rsp,%rbp
   206c3:	53                   	push   %rbx
   206c4:	48 83 ec 38          	sub    $0x38,%rsp
   206c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   206cc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   206d0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   206d4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   206d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   206dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   206e0:	eb 3a                	jmp    2071c <_ZSt14__relocate_a_1IPN2vk16SurfaceFormatKHRES2_SaIS1_EET0_T_S5_S4_RT1_+0x5d>
	std::__relocate_object_a(std::__addressof(*__cur),
   206e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   206e6:	48 89 c7             	mov    %rax,%rdi
   206e9:	e8 55 ff ff ff       	call   20643 <_ZSt11__addressofIN2vk16SurfaceFormatKHREEPT_RS2_>
   206ee:	48 89 c3             	mov    %rax,%rbx
   206f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   206f5:	48 89 c7             	mov    %rax,%rdi
   206f8:	e8 46 ff ff ff       	call   20643 <_ZSt11__addressofIN2vk16SurfaceFormatKHREEPT_RS2_>
   206fd:	48 89 c1             	mov    %rax,%rcx
   20700:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   20704:	48 89 c2             	mov    %rax,%rdx
   20707:	48 89 de             	mov    %rbx,%rsi
   2070a:	48 89 cf             	mov    %rcx,%rdi
   2070d:	e8 81 02 00 00       	call   20993 <_ZSt19__relocate_object_aIN2vk16SurfaceFormatKHRES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   20712:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
   20717:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   2071c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   20720:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   20724:	75 bc                	jne    206e2 <_ZSt14__relocate_a_1IPN2vk16SurfaceFormatKHRES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   20726:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   2072a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   2072e:	c9                   	leave
   2072f:	c3                   	ret

0000000000020730 <_ZNSt15__new_allocatorIN2vk14PresentModeKHREE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   20730:	55                   	push   %rbp
   20731:	48 89 e5             	mov    %rsp,%rbp
   20734:	48 83 ec 20          	sub    $0x20,%rsp
   20738:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2073c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20740:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   20744:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20748:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2074f:	00 
   20750:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20754:	48 89 d6             	mov    %rdx,%rsi
   20757:	48 89 c7             	mov    %rax,%rdi
   2075a:	e8 d1 4a fe ff       	call   5230 <_ZdlPvm@plt>
      }
   2075f:	c9                   	leave
   20760:	c3                   	ret

0000000000020761 <_ZSt11__addressofIN2vk14PresentModeKHREEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   20761:	55                   	push   %rbp
   20762:	48 89 e5             	mov    %rsp,%rbp
   20765:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   20769:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2076d:	5d                   	pop    %rbp
   2076e:	c3                   	ret

000000000002076f <_ZSt8_DestroyIN2vk14PresentModeKHREEvPT_>:
    _Destroy(_Tp* __pointer)
   2076f:	55                   	push   %rbp
   20770:	48 89 e5             	mov    %rsp,%rbp
   20773:	48 83 ec 10          	sub    $0x10,%rsp
   20777:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   2077b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2077f:	48 89 c7             	mov    %rax,%rdi
   20782:	e8 63 02 00 00       	call   209ea <_ZSt10destroy_atIN2vk14PresentModeKHREEvPT_>
    }
   20787:	90                   	nop
   20788:	c9                   	leave
   20789:	c3                   	ret

000000000002078a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPN2vk14PresentModeKHREmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   2078a:	55                   	push   %rbp
   2078b:	48 89 e5             	mov    %rsp,%rbp
   2078e:	48 83 ec 20          	sub    $0x20,%rsp
   20792:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20796:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   2079a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   2079f:	74 40                	je     207e1 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPN2vk14PresentModeKHREmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   207a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   207a5:	48 89 c7             	mov    %rax,%rdi
   207a8:	e8 b4 ff ff ff       	call   20761 <_ZSt11__addressofIN2vk14PresentModeKHREEPT_RS2_>
   207ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   207b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   207b5:	48 89 c7             	mov    %rax,%rdi
   207b8:	e8 38 02 00 00       	call   209f5 <_ZSt10_ConstructIN2vk14PresentModeKHREJEEvPT_DpOT0_>
	      ++__first;
   207bd:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   207c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   207c6:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   207ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   207ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   207d2:	48 89 ce             	mov    %rcx,%rsi
   207d5:	48 89 c7             	mov    %rax,%rdi
   207d8:	e8 54 02 00 00       	call   20a31 <_ZSt6fill_nIPN2vk14PresentModeKHREmS1_ET_S3_T0_RKT1_>
   207dd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   207e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   207e5:	c9                   	leave
   207e6:	c3                   	ret

00000000000207e7 <_ZSt12__niter_baseIPN2vk14PresentModeKHREET_S3_>:
    __niter_base(_Iterator __it)
   207e7:	55                   	push   %rbp
   207e8:	48 89 e5             	mov    %rsp,%rbp
   207eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   207ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   207f3:	5d                   	pop    %rbp
   207f4:	c3                   	ret
   207f5:	90                   	nop

00000000000207f6 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHREvEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   207f6:	55                   	push   %rbp
   207f7:	48 89 e5             	mov    %rsp,%rbp
   207fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   207fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   20802:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20806:	48 8b 10             	mov    (%rax),%rdx
   20809:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2080d:	48 89 10             	mov    %rdx,(%rax)
   20810:	90                   	nop
   20811:	5d                   	pop    %rbp
   20812:	c3                   	ret

0000000000020813 <_ZSt14__relocate_a_1IN2vk14PresentModeKHRES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   20813:	55                   	push   %rbp
   20814:	48 89 e5             	mov    %rsp,%rbp
   20817:	48 83 ec 30          	sub    $0x30,%rsp
   2081b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2081f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   20823:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   20827:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   2082b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2082f:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   20833:	48 c1 f8 02          	sar    $0x2,%rax
   20837:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   2083b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   20840:	7e 68                	jle    208aa <_ZSt14__relocate_a_1IN2vk14PresentModeKHRES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x97>
	  if (std::is_constant_evaluated())
   20842:	e8 62 59 fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   20847:	84 c0                	test   %al,%al
   20849:	74 40                	je     2088b <_ZSt14__relocate_a_1IN2vk14PresentModeKHRES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x78>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
   2084b:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   2084f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   20853:	48 89 d6             	mov    %rdx,%rsi
   20856:	48 89 c7             	mov    %rax,%rdi
   20859:	e8 98 ff ff ff       	call   207f6 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHREvEC1ERKS3_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
   2085e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   20862:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20866:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2086a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2086e:	48 89 c7             	mov    %rax,%rdi
   20871:	e8 61 02 00 00       	call   20ad7 <_ZSt14__relocate_a_1IPN2vk14PresentModeKHREN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>
   20876:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      return __out.base();
   2087a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   2087e:	48 89 c7             	mov    %rax,%rdi
   20881:	e8 d2 02 00 00       	call   20b58 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHREvE4baseEv>
   20886:	48 8b 00             	mov    (%rax),%rax
   20889:	eb 2e                	jmp    208b9 <_ZSt14__relocate_a_1IN2vk14PresentModeKHRES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0xa6>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2088b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2088f:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   20896:	00 
   20897:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2089b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2089f:	48 89 ce             	mov    %rcx,%rsi
   208a2:	48 89 c7             	mov    %rax,%rdi
   208a5:	e8 b6 4a fe ff       	call   5360 <memmove@plt>
      return __result + __count;
   208aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   208ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   208b2:	48 c1 e2 02          	shl    $0x2,%rdx
   208b6:	48 01 d0             	add    %rdx,%rax
    }
   208b9:	c9                   	leave
   208ba:	c3                   	ret

00000000000208bb <_ZSt10destroy_atIN2vk16SurfaceFormatKHREEvPT_>:
    destroy_at(_Tp* __location)
   208bb:	55                   	push   %rbp
   208bc:	48 89 e5             	mov    %rsp,%rbp
   208bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   208c3:	90                   	nop
   208c4:	5d                   	pop    %rbp
   208c5:	c3                   	ret

00000000000208c6 <_ZN2vk16SurfaceFormatKHRC1Ev>:
  struct CppType<StructureType, StructureType::eSurfaceCapabilitiesPresentBarrierNV>
  {
    using Type = SurfaceCapabilitiesPresentBarrierNV;
  };

  struct SurfaceFormatKHR
   208c6:	55                   	push   %rbp
   208c7:	48 89 e5             	mov    %rsp,%rbp
   208ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   208ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   208d2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   208d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   208dc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   208e3:	90                   	nop
   208e4:	5d                   	pop    %rbp
   208e5:	c3                   	ret

00000000000208e6 <_ZSt10_ConstructIN2vk16SurfaceFormatKHREJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   208e6:	55                   	push   %rbp
   208e7:	48 89 e5             	mov    %rsp,%rbp
   208ea:	48 83 ec 10          	sub    $0x10,%rsp
   208ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   208f2:	e8 a7 58 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   208f7:	84 c0                	test   %al,%al
   208f9:	74 0e                	je     20909 <_ZSt10_ConstructIN2vk16SurfaceFormatKHREJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   208fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   208ff:	48 89 c7             	mov    %rax,%rdi
   20902:	e8 5f 02 00 00       	call   20b66 <_ZSt12construct_atIN2vk16SurfaceFormatKHREJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   20907:	eb 26                	jmp    2092f <_ZSt10_ConstructIN2vk16SurfaceFormatKHREJEEvPT_DpOT0_+0x49>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   20909:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2090d:	48 89 c6             	mov    %rax,%rsi
   20910:	bf 08 00 00 00       	mov    $0x8,%edi
   20915:	e8 9a 58 fe ff       	call   61b4 <_ZnwmPv>
   2091a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   20920:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   20927:	48 89 c7             	mov    %rax,%rdi
   2092a:	e8 97 ff ff ff       	call   208c6 <_ZN2vk16SurfaceFormatKHRC1Ev>
    }
   2092f:	c9                   	leave
   20930:	c3                   	ret
   20931:	90                   	nop

0000000000020932 <_ZNSt15__new_allocatorIN2vk16SurfaceFormatKHREE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   20932:	55                   	push   %rbp
   20933:	48 89 e5             	mov    %rsp,%rbp
   20936:	48 83 ec 20          	sub    $0x20,%rsp
   2093a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2093e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20942:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   20946:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2094a:	48 89 c7             	mov    %rax,%rdi
   2094d:	e8 54 02 00 00       	call   20ba6 <_ZNKSt15__new_allocatorIN2vk16SurfaceFormatKHREE11_M_max_sizeEv>
   20952:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   20956:	0f 92 c0             	setb   %al
   20959:	0f b6 c0             	movzbl %al,%eax
   2095c:	48 85 c0             	test   %rax,%rax
   2095f:	0f 95 c0             	setne  %al
   20962:	84 c0                	test   %al,%al
   20964:	74 1a                	je     20980 <_ZNSt15__new_allocatorIN2vk16SurfaceFormatKHREE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   20966:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   2096d:	ff ff 1f 
   20970:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   20974:	73 05                	jae    2097b <_ZNSt15__new_allocatorIN2vk16SurfaceFormatKHREE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   20976:	e8 05 48 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   2097b:	e8 00 47 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   20980:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20984:	48 c1 e0 03          	shl    $0x3,%rax
   20988:	48 89 c7             	mov    %rax,%rdi
   2098b:	e8 90 48 fe ff       	call   5220 <_Znwm@plt>
   20990:	90                   	nop
      }
   20991:	c9                   	leave
   20992:	c3                   	ret

0000000000020993 <_ZSt19__relocate_object_aIN2vk16SurfaceFormatKHRES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   20993:	55                   	push   %rbp
   20994:	48 89 e5             	mov    %rsp,%rbp
   20997:	48 83 ec 20          	sub    $0x20,%rsp
   2099b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2099f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   209a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   209a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   209ab:	48 89 c7             	mov    %rax,%rdi
   209ae:	e8 07 02 00 00       	call   20bba <_ZSt4moveIRN2vk16SurfaceFormatKHREEONSt16remove_referenceIT_E4typeEOS4_>
   209b3:	48 89 c2             	mov    %rax,%rdx
   209b6:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   209ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   209be:	48 89 ce             	mov    %rcx,%rsi
   209c1:	48 89 c7             	mov    %rax,%rdi
   209c4:	e8 ff 01 00 00       	call   20bc8 <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   209c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   209cd:	48 89 c7             	mov    %rax,%rdi
   209d0:	e8 6e fc ff ff       	call   20643 <_ZSt11__addressofIN2vk16SurfaceFormatKHREEPT_RS2_>
   209d5:	48 89 c2             	mov    %rax,%rdx
   209d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   209dc:	48 89 d6             	mov    %rdx,%rsi
   209df:	48 89 c7             	mov    %rax,%rdi
   209e2:	e8 16 02 00 00       	call   20bfd <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE7destroyIS1_EEvRS2_PT_>
    }
   209e7:	90                   	nop
   209e8:	c9                   	leave
   209e9:	c3                   	ret

00000000000209ea <_ZSt10destroy_atIN2vk14PresentModeKHREEvPT_>:
    destroy_at(_Tp* __location)
   209ea:	55                   	push   %rbp
   209eb:	48 89 e5             	mov    %rsp,%rbp
   209ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   209f2:	90                   	nop
   209f3:	5d                   	pop    %rbp
   209f4:	c3                   	ret

00000000000209f5 <_ZSt10_ConstructIN2vk14PresentModeKHREJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   209f5:	55                   	push   %rbp
   209f6:	48 89 e5             	mov    %rsp,%rbp
   209f9:	48 83 ec 10          	sub    $0x10,%rsp
   209fd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   20a01:	e8 98 57 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   20a06:	84 c0                	test   %al,%al
   20a08:	74 0e                	je     20a18 <_ZSt10_ConstructIN2vk14PresentModeKHREJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   20a0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20a0e:	48 89 c7             	mov    %rax,%rdi
   20a11:	e8 06 02 00 00       	call   20c1c <_ZSt12construct_atIN2vk14PresentModeKHREJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   20a16:	eb 17                	jmp    20a2f <_ZSt10_ConstructIN2vk14PresentModeKHREJEEvPT_DpOT0_+0x3a>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   20a18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20a1c:	48 89 c6             	mov    %rax,%rsi
   20a1f:	bf 04 00 00 00       	mov    $0x4,%edi
   20a24:	e8 8b 57 fe ff       	call   61b4 <_ZnwmPv>
   20a29:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    }
   20a2f:	c9                   	leave
   20a30:	c3                   	ret

0000000000020a31 <_ZSt6fill_nIPN2vk14PresentModeKHREmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   20a31:	55                   	push   %rbp
   20a32:	48 89 e5             	mov    %rsp,%rbp
   20a35:	48 83 ec 20          	sub    $0x20,%rsp
   20a39:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20a3d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20a41:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   20a45:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   20a49:	48 89 c7             	mov    %rax,%rdi
   20a4c:	e8 f0 01 00 00       	call   20c41 <_ZSt19__iterator_categoryIPN2vk14PresentModeKHREENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   20a51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20a55:	48 89 c7             	mov    %rax,%rdi
   20a58:	e8 d3 ec fe ff       	call   f730 <_ZSt17__size_to_integerm>
   20a5d:	48 89 c1             	mov    %rax,%rcx
   20a60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20a64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   20a68:	48 89 ce             	mov    %rcx,%rsi
   20a6b:	48 89 c7             	mov    %rax,%rdi
   20a6e:	e8 d9 01 00 00       	call   20c4c <_ZSt10__fill_n_aIPN2vk14PresentModeKHREmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   20a73:	c9                   	leave
   20a74:	c3                   	ret
   20a75:	90                   	nop

0000000000020a76 <_ZNSt15__new_allocatorIN2vk14PresentModeKHREE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   20a76:	55                   	push   %rbp
   20a77:	48 89 e5             	mov    %rsp,%rbp
   20a7a:	48 83 ec 20          	sub    $0x20,%rsp
   20a7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20a82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20a86:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   20a8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20a8e:	48 89 c7             	mov    %rax,%rdi
   20a91:	e8 14 02 00 00       	call   20caa <_ZNKSt15__new_allocatorIN2vk14PresentModeKHREE11_M_max_sizeEv>
   20a96:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   20a9a:	0f 92 c0             	setb   %al
   20a9d:	0f b6 c0             	movzbl %al,%eax
   20aa0:	48 85 c0             	test   %rax,%rax
   20aa3:	0f 95 c0             	setne  %al
   20aa6:	84 c0                	test   %al,%al
   20aa8:	74 1a                	je     20ac4 <_ZNSt15__new_allocatorIN2vk14PresentModeKHREE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   20aaa:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
   20ab1:	ff ff 3f 
   20ab4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   20ab8:	73 05                	jae    20abf <_ZNSt15__new_allocatorIN2vk14PresentModeKHREE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   20aba:	e8 c1 46 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   20abf:	e8 bc 45 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   20ac4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20ac8:	48 c1 e0 02          	shl    $0x2,%rax
   20acc:	48 89 c7             	mov    %rax,%rdi
   20acf:	e8 4c 47 fe ff       	call   5220 <_Znwm@plt>
   20ad4:	90                   	nop
      }
   20ad5:	c9                   	leave
   20ad6:	c3                   	ret

0000000000020ad7 <_ZSt14__relocate_a_1IPN2vk14PresentModeKHREN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   20ad7:	55                   	push   %rbp
   20ad8:	48 89 e5             	mov    %rsp,%rbp
   20adb:	53                   	push   %rbx
   20adc:	48 83 ec 38          	sub    $0x38,%rsp
   20ae0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   20ae4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   20ae8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   20aec:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   20af0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   20af4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   20af8:	eb 49                	jmp    20b43 <_ZSt14__relocate_a_1IPN2vk14PresentModeKHREN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x6c>
	std::__relocate_object_a(std::__addressof(*__cur),
   20afa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   20afe:	48 89 c7             	mov    %rax,%rdi
   20b01:	e8 5b fc ff ff       	call   20761 <_ZSt11__addressofIN2vk14PresentModeKHREEPT_RS2_>
   20b06:	48 89 c3             	mov    %rax,%rbx
   20b09:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   20b0d:	48 89 c7             	mov    %rax,%rdi
   20b10:	e8 c9 01 00 00       	call   20cde <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHREvEdeEv>
   20b15:	48 89 c7             	mov    %rax,%rdi
   20b18:	e8 44 fc ff ff       	call   20761 <_ZSt11__addressofIN2vk14PresentModeKHREEPT_RS2_>
   20b1d:	48 89 c1             	mov    %rax,%rcx
   20b20:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   20b24:	48 89 c2             	mov    %rax,%rdx
   20b27:	48 89 de             	mov    %rbx,%rsi
   20b2a:	48 89 cf             	mov    %rcx,%rdi
   20b2d:	e8 bd 01 00 00       	call   20cef <_ZSt19__relocate_object_aIN2vk14PresentModeKHRES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   20b32:	48 83 45 d8 04       	addq   $0x4,-0x28(%rbp)
   20b37:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   20b3b:	48 89 c7             	mov    %rax,%rdi
   20b3e:	e8 7b 01 00 00       	call   20cbe <_ZN9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHREvEppEv>
   20b43:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   20b47:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   20b4b:	75 ad                	jne    20afa <_ZSt14__relocate_a_1IPN2vk14PresentModeKHREN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x23>
      return __cur;
   20b4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   20b51:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   20b55:	c9                   	leave
   20b56:	c3                   	ret
   20b57:	90                   	nop

0000000000020b58 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHREvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   20b58:	55                   	push   %rbp
   20b59:	48 89 e5             	mov    %rsp,%rbp
   20b5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   20b60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20b64:	5d                   	pop    %rbp
   20b65:	c3                   	ret

0000000000020b66 <_ZSt12construct_atIN2vk16SurfaceFormatKHREJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   20b66:	55                   	push   %rbp
   20b67:	48 89 e5             	mov    %rsp,%rbp
   20b6a:	53                   	push   %rbx
   20b6b:	48 83 ec 18          	sub    $0x18,%rsp
   20b6f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   20b73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20b77:	48 89 c6             	mov    %rax,%rsi
   20b7a:	bf 08 00 00 00       	mov    $0x8,%edi
   20b7f:	e8 30 56 fe ff       	call   61b4 <_ZnwmPv>
   20b84:	48 89 c3             	mov    %rax,%rbx
   20b87:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
   20b8d:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%rbx)
   20b94:	48 89 df             	mov    %rbx,%rdi
   20b97:	e8 2a fd ff ff       	call   208c6 <_ZN2vk16SurfaceFormatKHRC1Ev>
   20b9c:	48 89 d8             	mov    %rbx,%rax
   20b9f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   20ba3:	c9                   	leave
   20ba4:	c3                   	ret
   20ba5:	90                   	nop

0000000000020ba6 <_ZNKSt15__new_allocatorIN2vk16SurfaceFormatKHREE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   20ba6:	55                   	push   %rbp
   20ba7:	48 89 e5             	mov    %rsp,%rbp
   20baa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   20bae:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   20bb5:	ff ff 0f 
      }
   20bb8:	5d                   	pop    %rbp
   20bb9:	c3                   	ret

0000000000020bba <_ZSt4moveIRN2vk16SurfaceFormatKHREEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   20bba:	55                   	push   %rbp
   20bbb:	48 89 e5             	mov    %rsp,%rbp
   20bbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   20bc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20bc6:	5d                   	pop    %rbp
   20bc7:	c3                   	ret

0000000000020bc8 <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   20bc8:	55                   	push   %rbp
   20bc9:	48 89 e5             	mov    %rsp,%rbp
   20bcc:	48 83 ec 20          	sub    $0x20,%rsp
   20bd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20bd4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20bd8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   20bdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20be0:	48 89 c7             	mov    %rax,%rdi
   20be3:	e8 5e 01 00 00       	call   20d46 <_ZSt7forwardIN2vk16SurfaceFormatKHREEOT_RNSt16remove_referenceIS2_E4typeE>
   20be8:	48 89 c2             	mov    %rax,%rdx
   20beb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20bef:	48 89 d6             	mov    %rdx,%rsi
   20bf2:	48 89 c7             	mov    %rax,%rdi
   20bf5:	e8 5a 01 00 00       	call   20d54 <_ZSt12construct_atIN2vk16SurfaceFormatKHREJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   20bfa:	90                   	nop
   20bfb:	c9                   	leave
   20bfc:	c3                   	ret

0000000000020bfd <_ZNSt16allocator_traitsISaIN2vk16SurfaceFormatKHREEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   20bfd:	55                   	push   %rbp
   20bfe:	48 89 e5             	mov    %rsp,%rbp
   20c01:	48 83 ec 10          	sub    $0x10,%rsp
   20c05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20c09:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   20c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20c11:	48 89 c7             	mov    %rax,%rdi
   20c14:	e8 a2 fc ff ff       	call   208bb <_ZSt10destroy_atIN2vk16SurfaceFormatKHREEvPT_>
	}
   20c19:	90                   	nop
   20c1a:	c9                   	leave
   20c1b:	c3                   	ret

0000000000020c1c <_ZSt12construct_atIN2vk14PresentModeKHREJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   20c1c:	55                   	push   %rbp
   20c1d:	48 89 e5             	mov    %rsp,%rbp
   20c20:	48 83 ec 10          	sub    $0x10,%rsp
   20c24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   20c28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20c2c:	48 89 c6             	mov    %rax,%rsi
   20c2f:	bf 04 00 00 00       	mov    $0x4,%edi
   20c34:	e8 7b 55 fe ff       	call   61b4 <_ZnwmPv>
   20c39:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   20c3f:	c9                   	leave
   20c40:	c3                   	ret

0000000000020c41 <_ZSt19__iterator_categoryIPN2vk14PresentModeKHREENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   20c41:	55                   	push   %rbp
   20c42:	48 89 e5             	mov    %rsp,%rbp
   20c45:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   20c49:	90                   	nop
   20c4a:	5d                   	pop    %rbp
   20c4b:	c3                   	ret

0000000000020c4c <_ZSt10__fill_n_aIPN2vk14PresentModeKHREmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   20c4c:	55                   	push   %rbp
   20c4d:	48 89 e5             	mov    %rsp,%rbp
   20c50:	48 83 ec 20          	sub    $0x20,%rsp
   20c54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20c58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20c5c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   20c60:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   20c65:	75 06                	jne    20c6d <_ZSt10__fill_n_aIPN2vk14PresentModeKHREmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   20c67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20c6b:	eb 3a                	jmp    20ca7 <_ZSt10__fill_n_aIPN2vk14PresentModeKHREmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   20c6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20c71:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   20c78:	00 
   20c79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20c7d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   20c81:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   20c85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20c89:	48 89 ce             	mov    %rcx,%rsi
   20c8c:	48 89 c7             	mov    %rax,%rdi
   20c8f:	e8 00 01 00 00       	call   20d94 <_ZSt8__fill_aIPN2vk14PresentModeKHRES1_EvT_S3_RKT0_>
      return __first + __n;
   20c94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20c98:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   20c9f:	00 
   20ca0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20ca4:	48 01 d0             	add    %rdx,%rax
    }
   20ca7:	c9                   	leave
   20ca8:	c3                   	ret
   20ca9:	90                   	nop

0000000000020caa <_ZNKSt15__new_allocatorIN2vk14PresentModeKHREE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   20caa:	55                   	push   %rbp
   20cab:	48 89 e5             	mov    %rsp,%rbp
   20cae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   20cb2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   20cb9:	ff ff 1f 
      }
   20cbc:	5d                   	pop    %rbp
   20cbd:	c3                   	ret

0000000000020cbe <_ZN9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHREvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   20cbe:	55                   	push   %rbp
   20cbf:	48 89 e5             	mov    %rsp,%rbp
   20cc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   20cc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20cca:	48 8b 00             	mov    (%rax),%rax
   20ccd:	48 8d 50 04          	lea    0x4(%rax),%rdx
   20cd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20cd5:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   20cd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   20cdc:	5d                   	pop    %rbp
   20cdd:	c3                   	ret

0000000000020cde <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk14PresentModeKHREvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   20cde:	55                   	push   %rbp
   20cdf:	48 89 e5             	mov    %rsp,%rbp
   20ce2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   20ce6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20cea:	48 8b 00             	mov    (%rax),%rax
   20ced:	5d                   	pop    %rbp
   20cee:	c3                   	ret

0000000000020cef <_ZSt19__relocate_object_aIN2vk14PresentModeKHRES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   20cef:	55                   	push   %rbp
   20cf0:	48 89 e5             	mov    %rsp,%rbp
   20cf3:	48 83 ec 20          	sub    $0x20,%rsp
   20cf7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20cfb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20cff:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   20d03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20d07:	48 89 c7             	mov    %rax,%rdi
   20d0a:	e8 b3 00 00 00       	call   20dc2 <_ZSt4moveIRN2vk14PresentModeKHREEONSt16remove_referenceIT_E4typeEOS4_>
   20d0f:	48 89 c2             	mov    %rax,%rdx
   20d12:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   20d16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20d1a:	48 89 ce             	mov    %rcx,%rsi
   20d1d:	48 89 c7             	mov    %rax,%rdi
   20d20:	e8 ab 00 00 00       	call   20dd0 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   20d25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20d29:	48 89 c7             	mov    %rax,%rdi
   20d2c:	e8 30 fa ff ff       	call   20761 <_ZSt11__addressofIN2vk14PresentModeKHREEPT_RS2_>
   20d31:	48 89 c2             	mov    %rax,%rdx
   20d34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20d38:	48 89 d6             	mov    %rdx,%rsi
   20d3b:	48 89 c7             	mov    %rax,%rdi
   20d3e:	e8 c2 00 00 00       	call   20e05 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE7destroyIS1_EEvRS2_PT_>
    }
   20d43:	90                   	nop
   20d44:	c9                   	leave
   20d45:	c3                   	ret

0000000000020d46 <_ZSt7forwardIN2vk16SurfaceFormatKHREEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   20d46:	55                   	push   %rbp
   20d47:	48 89 e5             	mov    %rsp,%rbp
   20d4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   20d4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20d52:	5d                   	pop    %rbp
   20d53:	c3                   	ret

0000000000020d54 <_ZSt12construct_atIN2vk16SurfaceFormatKHREJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   20d54:	55                   	push   %rbp
   20d55:	48 89 e5             	mov    %rsp,%rbp
   20d58:	53                   	push   %rbx
   20d59:	48 83 ec 18          	sub    $0x18,%rsp
   20d5d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20d61:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   20d65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20d69:	48 89 c6             	mov    %rax,%rsi
   20d6c:	bf 08 00 00 00       	mov    $0x8,%edi
   20d71:	e8 3e 54 fe ff       	call   61b4 <_ZnwmPv>
   20d76:	48 89 c3             	mov    %rax,%rbx
   20d79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20d7d:	48 89 c7             	mov    %rax,%rdi
   20d80:	e8 c1 ff ff ff       	call   20d46 <_ZSt7forwardIN2vk16SurfaceFormatKHREEOT_RNSt16remove_referenceIS2_E4typeE>
   20d85:	48 8b 00             	mov    (%rax),%rax
   20d88:	48 89 03             	mov    %rax,(%rbx)
   20d8b:	48 89 d8             	mov    %rbx,%rax
   20d8e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   20d92:	c9                   	leave
   20d93:	c3                   	ret

0000000000020d94 <_ZSt8__fill_aIPN2vk14PresentModeKHRES1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   20d94:	55                   	push   %rbp
   20d95:	48 89 e5             	mov    %rsp,%rbp
   20d98:	48 83 ec 20          	sub    $0x20,%rsp
   20d9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20da0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20da4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   20da8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   20dac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   20db0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20db4:	48 89 ce             	mov    %rcx,%rsi
   20db7:	48 89 c7             	mov    %rax,%rdi
   20dba:	e8 65 00 00 00       	call   20e24 <_ZSt9__fill_a1IPN2vk14PresentModeKHRES1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   20dbf:	90                   	nop
   20dc0:	c9                   	leave
   20dc1:	c3                   	ret

0000000000020dc2 <_ZSt4moveIRN2vk14PresentModeKHREEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   20dc2:	55                   	push   %rbp
   20dc3:	48 89 e5             	mov    %rsp,%rbp
   20dc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   20dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20dce:	5d                   	pop    %rbp
   20dcf:	c3                   	ret

0000000000020dd0 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   20dd0:	55                   	push   %rbp
   20dd1:	48 89 e5             	mov    %rsp,%rbp
   20dd4:	48 83 ec 20          	sub    $0x20,%rsp
   20dd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20ddc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20de0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   20de4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20de8:	48 89 c7             	mov    %rax,%rdi
   20deb:	e8 65 00 00 00       	call   20e55 <_ZSt7forwardIN2vk14PresentModeKHREEOT_RNSt16remove_referenceIS2_E4typeE>
   20df0:	48 89 c2             	mov    %rax,%rdx
   20df3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20df7:	48 89 d6             	mov    %rdx,%rsi
   20dfa:	48 89 c7             	mov    %rax,%rdi
   20dfd:	e8 61 00 00 00       	call   20e63 <_ZSt12construct_atIN2vk14PresentModeKHREJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   20e02:	90                   	nop
   20e03:	c9                   	leave
   20e04:	c3                   	ret

0000000000020e05 <_ZNSt16allocator_traitsISaIN2vk14PresentModeKHREEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   20e05:	55                   	push   %rbp
   20e06:	48 89 e5             	mov    %rsp,%rbp
   20e09:	48 83 ec 10          	sub    $0x10,%rsp
   20e0d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20e11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   20e15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20e19:	48 89 c7             	mov    %rax,%rdi
   20e1c:	e8 c9 fb ff ff       	call   209ea <_ZSt10destroy_atIN2vk14PresentModeKHREEvPT_>
	}
   20e21:	90                   	nop
   20e22:	c9                   	leave
   20e23:	c3                   	ret

0000000000020e24 <_ZSt9__fill_a1IPN2vk14PresentModeKHRES1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   20e24:	55                   	push   %rbp
   20e25:	48 89 e5             	mov    %rsp,%rbp
   20e28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20e2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20e30:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
   20e34:	eb 11                	jmp    20e47 <_ZSt9__fill_a1IPN2vk14PresentModeKHRES1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x23>
	*__first = __value;
   20e36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20e3a:	8b 10                	mov    (%rax),%edx
   20e3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e40:	89 10                	mov    %edx,(%rax)
      for (; __first != __last; ++__first)
   20e42:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
   20e47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e4b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   20e4f:	75 e5                	jne    20e36 <_ZSt9__fill_a1IPN2vk14PresentModeKHRES1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x12>
    }
   20e51:	90                   	nop
   20e52:	90                   	nop
   20e53:	5d                   	pop    %rbp
   20e54:	c3                   	ret

0000000000020e55 <_ZSt7forwardIN2vk14PresentModeKHREEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   20e55:	55                   	push   %rbp
   20e56:	48 89 e5             	mov    %rsp,%rbp
   20e59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   20e5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e61:	5d                   	pop    %rbp
   20e62:	c3                   	ret

0000000000020e63 <_ZSt12construct_atIN2vk14PresentModeKHREJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   20e63:	55                   	push   %rbp
   20e64:	48 89 e5             	mov    %rsp,%rbp
   20e67:	53                   	push   %rbx
   20e68:	48 83 ec 18          	sub    $0x18,%rsp
   20e6c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20e70:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   20e74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20e78:	48 89 c6             	mov    %rax,%rsi
   20e7b:	bf 04 00 00 00       	mov    $0x4,%edi
   20e80:	e8 2f 53 fe ff       	call   61b4 <_ZnwmPv>
   20e85:	48 89 c3             	mov    %rax,%rbx
   20e88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20e8c:	48 89 c7             	mov    %rax,%rdi
   20e8f:	e8 c1 ff ff ff       	call   20e55 <_ZSt7forwardIN2vk14PresentModeKHREEOT_RNSt16remove_referenceIS2_E4typeE>
   20e94:	8b 00                	mov    (%rax),%eax
   20e96:	89 03                	mov    %eax,(%rbx)
   20e98:	48 89 d8             	mov    %rbx,%rax
   20e9b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   20e9f:	c9                   	leave
   20ea0:	c3                   	ret

0000000000020ea1 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
   20ea1:	55                   	push   %rbp
   20ea2:	48 89 e5             	mov    %rsp,%rbp
   20ea5:	41 54                	push   %r12
   20ea7:	53                   	push   %rbx
   20ea8:	48 83 ec 30          	sub    $0x30,%rsp
   20eac:	89 7d cc             	mov    %edi,-0x34(%rbp)
   20eaf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
   20eb3:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   20eb7:	0f 89 28 07 00 00    	jns    215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20ebd:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
   20ec1:	0f 8d 3d 01 00 00    	jge    21004 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
   20ec7:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   20ece:	0f 84 19 05 00 00    	je     213ed <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
   20ed4:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   20edb:	0f 8f 04 07 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20ee1:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   20ee8:	0f 84 37 05 00 00    	je     21425 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
   20eee:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   20ef5:	0f 8f ea 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20efb:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   20f02:	0f 84 55 05 00 00    	je     2145d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
   20f08:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   20f0f:	0f 8f d0 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20f15:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   20f1c:	0f 84 73 05 00 00    	je     21495 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
   20f22:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   20f29:	0f 8f b6 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20f2f:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   20f36:	0f 84 91 05 00 00    	je     214cd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
   20f3c:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   20f43:	0f 8f 9c 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20f49:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   20f50:	0f 84 af 05 00 00    	je     21505 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
   20f56:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   20f5d:	0f 8f 82 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20f63:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   20f6a:	0f 84 9d 03 00 00    	je     2130d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
   20f70:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   20f77:	0f 8f 68 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20f7d:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   20f84:	0f 84 bb 03 00 00    	je     21345 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
   20f8a:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   20f91:	0f 8f 4e 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20f97:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   20f9e:	0f 84 99 05 00 00    	je     2153d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
   20fa4:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   20fab:	0f 8f 34 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20fb1:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   20fb8:	0f 84 bf 03 00 00    	je     2137d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
   20fbe:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   20fc5:	0f 8f 1a 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20fcb:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   20fd2:	0f 84 9d 05 00 00    	je     21575 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
   20fd8:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   20fdf:	0f 8f 00 06 00 00    	jg     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   20fe5:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
   20fec:	0f 84 bb 05 00 00    	je     215ad <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
   20ff2:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
   20ff9:	0f 84 b6 03 00 00    	je     213b5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
   20fff:	e9 e1 05 00 00       	jmp    215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   21004:	8b 45 cc             	mov    -0x34(%rbp),%eax
   21007:	83 c0 0d             	add    $0xd,%eax
   2100a:	83 f8 0c             	cmp    $0xc,%eax
   2100d:	0f 87 d2 05 00 00    	ja     215e5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   21013:	89 c0                	mov    %eax,%eax
   21015:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2101c:	00 
   2101d:	48 8d 05 d4 eb 00 00 	lea    0xebd4(%rip),%rax        # 2fbf8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   21024:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   21027:	48 98                	cltq
   21029:	48 8d 15 c8 eb 00 00 	lea    0xebc8(%rip),%rdx        # 2fbf8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   21030:	48 01 d0             	add    %rdx,%rax
   21033:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   21035:	bf 28 00 00 00       	mov    $0x28,%edi
   2103a:	e8 91 40 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   2103f:	48 89 c3             	mov    %rax,%rbx
   21042:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21046:	48 89 c6             	mov    %rax,%rsi
   21049:	48 89 df             	mov    %rbx,%rdi
   2104c:	e8 75 69 fe ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
   21051:	48 8d 05 9e bb fe ff 	lea    -0x14462(%rip),%rax        # cbf6 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
   21058:	48 89 c2             	mov    %rax,%rdx
   2105b:	48 8d 05 86 fc 01 00 	lea    0x1fc86(%rip),%rax        # 40ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   21062:	48 89 c6             	mov    %rax,%rsi
   21065:	48 89 df             	mov    %rbx,%rdi
   21068:	e8 13 43 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   2106d:	bf 28 00 00 00       	mov    $0x28,%edi
   21072:	e8 59 40 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   21077:	48 89 c3             	mov    %rax,%rbx
   2107a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2107e:	48 89 c6             	mov    %rax,%rsi
   21081:	48 89 df             	mov    %rbx,%rdi
   21084:	e8 0f 6a fe ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
   21089:	48 8d 05 f6 ba fe ff 	lea    -0x1450a(%rip),%rax        # cb86 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
   21090:	48 89 c2             	mov    %rax,%rdx
   21093:	48 8d 05 36 fc 01 00 	lea    0x1fc36(%rip),%rax        # 40cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2109a:	48 89 c6             	mov    %rax,%rsi
   2109d:	48 89 df             	mov    %rbx,%rdi
   210a0:	e8 db 42 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   210a5:	bf 28 00 00 00       	mov    $0x28,%edi
   210aa:	e8 21 40 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   210af:	48 89 c3             	mov    %rax,%rbx
   210b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   210b6:	48 89 c6             	mov    %rax,%rsi
   210b9:	48 89 df             	mov    %rbx,%rdi
   210bc:	e8 a9 6a fe ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
   210c1:	48 8d 05 4e ba fe ff 	lea    -0x145b2(%rip),%rax        # cb16 <_ZN2vk25InitializationFailedErrorD1Ev>
   210c8:	48 89 c2             	mov    %rax,%rdx
   210cb:	48 8d 05 e6 fb 01 00 	lea    0x1fbe6(%rip),%rax        # 40cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   210d2:	48 89 c6             	mov    %rax,%rsi
   210d5:	48 89 df             	mov    %rbx,%rdi
   210d8:	e8 a3 42 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   210dd:	bf 28 00 00 00       	mov    $0x28,%edi
   210e2:	e8 e9 3f fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   210e7:	48 89 c3             	mov    %rax,%rbx
   210ea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   210ee:	48 89 c6             	mov    %rax,%rsi
   210f1:	48 89 df             	mov    %rbx,%rdi
   210f4:	e8 43 6b fe ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
   210f9:	48 8d 05 a6 b9 fe ff 	lea    -0x1465a(%rip),%rax        # caa6 <_ZN2vk15DeviceLostErrorD1Ev>
   21100:	48 89 c2             	mov    %rax,%rdx
   21103:	48 8d 05 96 fb 01 00 	lea    0x1fb96(%rip),%rax        # 40ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2110a:	48 89 c6             	mov    %rax,%rsi
   2110d:	48 89 df             	mov    %rbx,%rdi
   21110:	e8 6b 42 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   21115:	bf 28 00 00 00       	mov    $0x28,%edi
   2111a:	e8 b1 3f fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   2111f:	48 89 c3             	mov    %rax,%rbx
   21122:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21126:	48 89 c6             	mov    %rax,%rsi
   21129:	48 89 df             	mov    %rbx,%rdi
   2112c:	e8 dd 6b fe ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
   21131:	48 8d 05 fe b8 fe ff 	lea    -0x14702(%rip),%rax        # ca36 <_ZN2vk20MemoryMapFailedErrorD1Ev>
   21138:	48 89 c2             	mov    %rax,%rdx
   2113b:	48 8d 05 46 fb 01 00 	lea    0x1fb46(%rip),%rax        # 40c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   21142:	48 89 c6             	mov    %rax,%rsi
   21145:	48 89 df             	mov    %rbx,%rdi
   21148:	e8 33 42 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   2114d:	bf 28 00 00 00       	mov    $0x28,%edi
   21152:	e8 79 3f fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   21157:	48 89 c3             	mov    %rax,%rbx
   2115a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2115e:	48 89 c6             	mov    %rax,%rsi
   21161:	48 89 df             	mov    %rbx,%rdi
   21164:	e8 77 6c fe ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
   21169:	48 8d 05 56 b8 fe ff 	lea    -0x147aa(%rip),%rax        # c9c6 <_ZN2vk20LayerNotPresentErrorD1Ev>
   21170:	48 89 c2             	mov    %rax,%rdx
   21173:	48 8d 05 f6 fa 01 00 	lea    0x1faf6(%rip),%rax        # 40c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2117a:	48 89 c6             	mov    %rax,%rsi
   2117d:	48 89 df             	mov    %rbx,%rdi
   21180:	e8 fb 41 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   21185:	bf 28 00 00 00       	mov    $0x28,%edi
   2118a:	e8 41 3f fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   2118f:	48 89 c3             	mov    %rax,%rbx
   21192:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21196:	48 89 c6             	mov    %rax,%rsi
   21199:	48 89 df             	mov    %rbx,%rdi
   2119c:	e8 11 6d fe ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
   211a1:	48 8d 05 ae b7 fe ff 	lea    -0x14852(%rip),%rax        # c956 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
   211a8:	48 89 c2             	mov    %rax,%rdx
   211ab:	48 8d 05 a6 fa 01 00 	lea    0x1faa6(%rip),%rax        # 40c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   211b2:	48 89 c6             	mov    %rax,%rsi
   211b5:	48 89 df             	mov    %rbx,%rdi
   211b8:	e8 c3 41 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   211bd:	bf 28 00 00 00       	mov    $0x28,%edi
   211c2:	e8 09 3f fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   211c7:	48 89 c3             	mov    %rax,%rbx
   211ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   211ce:	48 89 c6             	mov    %rax,%rsi
   211d1:	48 89 df             	mov    %rbx,%rdi
   211d4:	e8 ab 6d fe ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
   211d9:	48 8d 05 06 b7 fe ff 	lea    -0x148fa(%rip),%rax        # c8e6 <_ZN2vk22FeatureNotPresentErrorD1Ev>
   211e0:	48 89 c2             	mov    %rax,%rdx
   211e3:	48 8d 05 56 fa 01 00 	lea    0x1fa56(%rip),%rax        # 40c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   211ea:	48 89 c6             	mov    %rax,%rsi
   211ed:	48 89 df             	mov    %rbx,%rdi
   211f0:	e8 8b 41 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   211f5:	bf 28 00 00 00       	mov    $0x28,%edi
   211fa:	e8 d1 3e fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   211ff:	48 89 c3             	mov    %rax,%rbx
   21202:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21206:	48 89 c6             	mov    %rax,%rsi
   21209:	48 89 df             	mov    %rbx,%rdi
   2120c:	e8 45 6e fe ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
   21211:	48 8d 05 5e b6 fe ff 	lea    -0x149a2(%rip),%rax        # c876 <_ZN2vk23IncompatibleDriverErrorD1Ev>
   21218:	48 89 c2             	mov    %rax,%rdx
   2121b:	48 8d 05 06 fa 01 00 	lea    0x1fa06(%rip),%rax        # 40c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   21222:	48 89 c6             	mov    %rax,%rsi
   21225:	48 89 df             	mov    %rbx,%rdi
   21228:	e8 53 41 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   2122d:	bf 28 00 00 00       	mov    $0x28,%edi
   21232:	e8 99 3e fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   21237:	48 89 c3             	mov    %rax,%rbx
   2123a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2123e:	48 89 c6             	mov    %rax,%rsi
   21241:	48 89 df             	mov    %rbx,%rdi
   21244:	e8 df 6e fe ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
   21249:	48 8d 05 b6 b5 fe ff 	lea    -0x14a4a(%rip),%rax        # c806 <_ZN2vk19TooManyObjectsErrorD1Ev>
   21250:	48 89 c2             	mov    %rax,%rdx
   21253:	48 8d 05 b6 f9 01 00 	lea    0x1f9b6(%rip),%rax        # 40c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2125a:	48 89 c6             	mov    %rax,%rsi
   2125d:	48 89 df             	mov    %rbx,%rdi
   21260:	e8 1b 41 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   21265:	bf 28 00 00 00       	mov    $0x28,%edi
   2126a:	e8 61 3e fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   2126f:	48 89 c3             	mov    %rax,%rbx
   21272:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21276:	48 89 c6             	mov    %rax,%rsi
   21279:	48 89 df             	mov    %rbx,%rdi
   2127c:	e8 79 6f fe ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
   21281:	48 8d 05 0e b5 fe ff 	lea    -0x14af2(%rip),%rax        # c796 <_ZN2vk23FormatNotSupportedErrorD1Ev>
   21288:	48 89 c2             	mov    %rax,%rdx
   2128b:	48 8d 05 66 f9 01 00 	lea    0x1f966(%rip),%rax        # 40bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   21292:	48 89 c6             	mov    %rax,%rsi
   21295:	48 89 df             	mov    %rbx,%rdi
   21298:	e8 e3 40 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   2129d:	bf 28 00 00 00       	mov    $0x28,%edi
   212a2:	e8 29 3e fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   212a7:	48 89 c3             	mov    %rax,%rbx
   212aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   212ae:	48 89 c6             	mov    %rax,%rsi
   212b1:	48 89 df             	mov    %rbx,%rdi
   212b4:	e8 13 70 fe ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
   212b9:	48 8d 05 66 b4 fe ff 	lea    -0x14b9a(%rip),%rax        # c726 <_ZN2vk19FragmentedPoolErrorD1Ev>
   212c0:	48 89 c2             	mov    %rax,%rdx
   212c3:	48 8d 05 16 f9 01 00 	lea    0x1f916(%rip),%rax        # 40be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   212ca:	48 89 c6             	mov    %rax,%rsi
   212cd:	48 89 df             	mov    %rbx,%rdi
   212d0:	e8 ab 40 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   212d5:	bf 28 00 00 00       	mov    $0x28,%edi
   212da:	e8 f1 3d fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   212df:	48 89 c3             	mov    %rax,%rbx
   212e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   212e6:	48 89 c6             	mov    %rax,%rsi
   212e9:	48 89 df             	mov    %rbx,%rdi
   212ec:	e8 ad 70 fe ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
   212f1:	48 8d 05 be b3 fe ff 	lea    -0x14c42(%rip),%rax        # c6b6 <_ZN2vk12UnknownErrorD1Ev>
   212f8:	48 89 c2             	mov    %rax,%rdx
   212fb:	48 8d 05 c6 f8 01 00 	lea    0x1f8c6(%rip),%rax        # 40bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   21302:	48 89 c6             	mov    %rax,%rsi
   21305:	48 89 df             	mov    %rbx,%rdi
   21308:	e8 73 40 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   2130d:	bf 28 00 00 00       	mov    $0x28,%edi
   21312:	e8 b9 3d fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   21317:	48 89 c3             	mov    %rax,%rbx
   2131a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2131e:	48 89 c6             	mov    %rax,%rsi
   21321:	48 89 df             	mov    %rbx,%rdi
   21324:	e8 47 71 fe ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
   21329:	48 8d 05 16 b3 fe ff 	lea    -0x14cea(%rip),%rax        # c646 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
   21330:	48 89 c2             	mov    %rax,%rdx
   21333:	48 8d 05 76 f8 01 00 	lea    0x1f876(%rip),%rax        # 40bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2133a:	48 89 c6             	mov    %rax,%rsi
   2133d:	48 89 df             	mov    %rbx,%rdi
   21340:	e8 3b 40 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   21345:	bf 28 00 00 00       	mov    $0x28,%edi
   2134a:	e8 81 3d fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   2134f:	48 89 c3             	mov    %rax,%rbx
   21352:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21356:	48 89 c6             	mov    %rax,%rsi
   21359:	48 89 df             	mov    %rbx,%rdi
   2135c:	e8 e1 71 fe ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
   21361:	48 8d 05 6e b2 fe ff 	lea    -0x14d92(%rip),%rax        # c5d6 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
   21368:	48 89 c2             	mov    %rax,%rdx
   2136b:	48 8d 05 26 f8 01 00 	lea    0x1f826(%rip),%rax        # 40b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   21372:	48 89 c6             	mov    %rax,%rsi
   21375:	48 89 df             	mov    %rbx,%rdi
   21378:	e8 03 40 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   2137d:	bf 28 00 00 00       	mov    $0x28,%edi
   21382:	e8 49 3d fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   21387:	48 89 c3             	mov    %rax,%rbx
   2138a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2138e:	48 89 c6             	mov    %rax,%rsi
   21391:	48 89 df             	mov    %rbx,%rdi
   21394:	e8 7b 72 fe ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
   21399:	48 8d 05 c6 b1 fe ff 	lea    -0x14e3a(%rip),%rax        # c566 <_ZN2vk18FragmentationErrorD1Ev>
   213a0:	48 89 c2             	mov    %rax,%rdx
   213a3:	48 8d 05 d6 f7 01 00 	lea    0x1f7d6(%rip),%rax        # 40b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   213aa:	48 89 c6             	mov    %rax,%rsi
   213ad:	48 89 df             	mov    %rbx,%rdi
   213b0:	e8 cb 3f fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   213b5:	bf 28 00 00 00       	mov    $0x28,%edi
   213ba:	e8 11 3d fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   213bf:	48 89 c3             	mov    %rax,%rbx
   213c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   213c6:	48 89 c6             	mov    %rax,%rsi
   213c9:	48 89 df             	mov    %rbx,%rdi
   213cc:	e8 15 73 fe ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
   213d1:	48 8d 05 1e b1 fe ff 	lea    -0x14ee2(%rip),%rax        # c4f6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
   213d8:	48 89 c2             	mov    %rax,%rdx
   213db:	48 8d 05 86 f7 01 00 	lea    0x1f786(%rip),%rax        # 40b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   213e2:	48 89 c6             	mov    %rax,%rsi
   213e5:	48 89 df             	mov    %rbx,%rdi
   213e8:	e8 93 3f fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   213ed:	bf 28 00 00 00       	mov    $0x28,%edi
   213f2:	e8 d9 3c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   213f7:	48 89 c3             	mov    %rax,%rbx
   213fa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   213fe:	48 89 c6             	mov    %rax,%rsi
   21401:	48 89 df             	mov    %rbx,%rdi
   21404:	e8 af 73 fe ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
   21409:	48 8d 05 76 b0 fe ff 	lea    -0x14f8a(%rip),%rax        # c486 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
   21410:	48 89 c2             	mov    %rax,%rdx
   21413:	48 8d 05 36 f7 01 00 	lea    0x1f736(%rip),%rax        # 40b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2141a:	48 89 c6             	mov    %rax,%rsi
   2141d:	48 89 df             	mov    %rbx,%rdi
   21420:	e8 5b 3f fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   21425:	bf 28 00 00 00       	mov    $0x28,%edi
   2142a:	e8 a1 3c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   2142f:	48 89 c3             	mov    %rax,%rbx
   21432:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21436:	48 89 c6             	mov    %rax,%rsi
   21439:	48 89 df             	mov    %rbx,%rdi
   2143c:	e8 49 74 fe ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
   21441:	48 8d 05 ce af fe ff 	lea    -0x15032(%rip),%rax        # c416 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
   21448:	48 89 c2             	mov    %rax,%rdx
   2144b:	48 8d 05 e6 f6 01 00 	lea    0x1f6e6(%rip),%rax        # 40b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   21452:	48 89 c6             	mov    %rax,%rsi
   21455:	48 89 df             	mov    %rbx,%rdi
   21458:	e8 23 3f fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   2145d:	bf 28 00 00 00       	mov    $0x28,%edi
   21462:	e8 69 3c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   21467:	48 89 c3             	mov    %rax,%rbx
   2146a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2146e:	48 89 c6             	mov    %rax,%rsi
   21471:	48 89 df             	mov    %rbx,%rdi
   21474:	e8 e3 74 fe ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
   21479:	48 8d 05 26 af fe ff 	lea    -0x150da(%rip),%rax        # c3a6 <_ZN2vk17OutOfDateKHRErrorD1Ev>
   21480:	48 89 c2             	mov    %rax,%rdx
   21483:	48 8d 05 96 f6 01 00 	lea    0x1f696(%rip),%rax        # 40b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2148a:	48 89 c6             	mov    %rax,%rsi
   2148d:	48 89 df             	mov    %rbx,%rdi
   21490:	e8 eb 3e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   21495:	bf 28 00 00 00       	mov    $0x28,%edi
   2149a:	e8 31 3c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   2149f:	48 89 c3             	mov    %rax,%rbx
   214a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   214a6:	48 89 c6             	mov    %rax,%rsi
   214a9:	48 89 df             	mov    %rbx,%rdi
   214ac:	e8 7d 75 fe ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
   214b1:	48 8d 05 7e ae fe ff 	lea    -0x15182(%rip),%rax        # c336 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
   214b8:	48 89 c2             	mov    %rax,%rdx
   214bb:	48 8d 05 46 f6 01 00 	lea    0x1f646(%rip),%rax        # 40b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   214c2:	48 89 c6             	mov    %rax,%rsi
   214c5:	48 89 df             	mov    %rbx,%rdi
   214c8:	e8 b3 3e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   214cd:	bf 28 00 00 00       	mov    $0x28,%edi
   214d2:	e8 f9 3b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   214d7:	48 89 c3             	mov    %rax,%rbx
   214da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   214de:	48 89 c6             	mov    %rax,%rsi
   214e1:	48 89 df             	mov    %rbx,%rdi
   214e4:	e8 17 76 fe ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
   214e9:	48 8d 05 d6 ad fe ff 	lea    -0x1522a(%rip),%rax        # c2c6 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
   214f0:	48 89 c2             	mov    %rax,%rdx
   214f3:	48 8d 05 f6 f5 01 00 	lea    0x1f5f6(%rip),%rax        # 40af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   214fa:	48 89 c6             	mov    %rax,%rsi
   214fd:	48 89 df             	mov    %rbx,%rdi
   21500:	e8 7b 3e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   21505:	bf 28 00 00 00       	mov    $0x28,%edi
   2150a:	e8 c1 3b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   2150f:	48 89 c3             	mov    %rax,%rbx
   21512:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21516:	48 89 c6             	mov    %rax,%rsi
   21519:	48 89 df             	mov    %rbx,%rdi
   2151c:	e8 b1 76 fe ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
   21521:	48 8d 05 2e ad fe ff 	lea    -0x152d2(%rip),%rax        # c256 <_ZN2vk20InvalidShaderNVErrorD1Ev>
   21528:	48 89 c2             	mov    %rax,%rdx
   2152b:	48 8d 05 a6 f5 01 00 	lea    0x1f5a6(%rip),%rax        # 40ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   21532:	48 89 c6             	mov    %rax,%rsi
   21535:	48 89 df             	mov    %rbx,%rdi
   21538:	e8 43 3e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   2153d:	bf 28 00 00 00       	mov    $0x28,%edi
   21542:	e8 89 3b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   21547:	48 89 c3             	mov    %rax,%rbx
   2154a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2154e:	48 89 c6             	mov    %rax,%rsi
   21551:	48 89 df             	mov    %rbx,%rdi
   21554:	e8 4b 77 fe ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
   21559:	48 8d 05 86 ac fe ff 	lea    -0x1537a(%rip),%rax        # c1e6 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
   21560:	48 89 c2             	mov    %rax,%rdx
   21563:	48 8d 05 56 f5 01 00 	lea    0x1f556(%rip),%rax        # 40ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2156a:	48 89 c6             	mov    %rax,%rsi
   2156d:	48 89 df             	mov    %rbx,%rdi
   21570:	e8 0b 3e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   21575:	bf 28 00 00 00       	mov    $0x28,%edi
   2157a:	e8 51 3b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   2157f:	48 89 c3             	mov    %rax,%rbx
   21582:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21586:	48 89 c6             	mov    %rax,%rsi
   21589:	48 89 df             	mov    %rbx,%rdi
   2158c:	e8 e5 77 fe ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
   21591:	48 8d 05 de ab fe ff 	lea    -0x15422(%rip),%rax        # c176 <_ZN2vk20NotPermittedKHRErrorD1Ev>
   21598:	48 89 c2             	mov    %rax,%rdx
   2159b:	48 8d 05 06 f5 01 00 	lea    0x1f506(%rip),%rax        # 40aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   215a2:	48 89 c6             	mov    %rax,%rsi
   215a5:	48 89 df             	mov    %rbx,%rdi
   215a8:	e8 d3 3d fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   215ad:	bf 28 00 00 00       	mov    $0x28,%edi
   215b2:	e8 19 3b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   215b7:	48 89 c3             	mov    %rax,%rbx
   215ba:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   215be:	48 89 c6             	mov    %rax,%rsi
   215c1:	48 89 df             	mov    %rbx,%rdi
   215c4:	e8 7f 78 fe ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
   215c9:	48 8d 05 36 ab fe ff 	lea    -0x154ca(%rip),%rax        # c106 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
   215d0:	48 89 c2             	mov    %rax,%rdx
   215d3:	48 8d 05 b6 f4 01 00 	lea    0x1f4b6(%rip),%rax        # 40a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   215da:	48 89 c6             	mov    %rax,%rsi
   215dd:	48 89 df             	mov    %rbx,%rdi
   215e0:	e8 9b 3d fe ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
   215e5:	bf 28 00 00 00       	mov    $0x28,%edi
   215ea:	e8 e1 3a fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   215ef:	48 89 c3             	mov    %rax,%rbx
   215f2:	8b 45 cc             	mov    -0x34(%rbp),%eax
   215f5:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
   215f8:	0f b6 05 59 fd 01 00 	movzbl 0x1fd59(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
   215ff:	84 c0                	test   %al,%al
   21601:	0f 94 c0             	sete   %al
   21604:	84 c0                	test   %al,%al
   21606:	74 4a                	je     21652 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   21608:	48 8d 05 49 fd 01 00 	lea    0x1fd49(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
   2160f:	48 89 c7             	mov    %rax,%rdi
   21612:	e8 a9 3d fe ff       	call   53c0 <__cxa_guard_acquire@plt>
   21617:	85 c0                	test   %eax,%eax
   21619:	0f 95 c0             	setne  %al
   2161c:	84 c0                	test   %al,%al
   2161e:	74 32                	je     21652 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   21620:	48 8d 05 d1 fb 01 00 	lea    0x1fbd1(%rip),%rax        # 411f8 <__dso_handle>
   21627:	48 89 c2             	mov    %rax,%rdx
   2162a:	48 8d 05 cf fb 01 00 	lea    0x1fbcf(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
   21631:	48 89 c6             	mov    %rax,%rsi
   21634:	48 8d 05 2b b6 fe ff 	lea    -0x149d5(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
   2163b:	48 89 c7             	mov    %rax,%rdi
   2163e:	e8 8d 3b fe ff       	call   51d0 <__cxa_atexit@plt>
   21643:	48 8d 05 0e fd 01 00 	lea    0x1fd0e(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
   2164a:	48 89 c7             	mov    %rax,%rdi
   2164d:	e8 ae 3a fe ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
   21652:	48 8d 15 a7 fb 01 00 	lea    0x1fba7(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
   21659:	8b 4d ec             	mov    -0x14(%rbp),%ecx
   2165c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   21660:	89 ce                	mov    %ecx,%esi
   21662:	48 89 c7             	mov    %rax,%rdi
   21665:	e8 9e 4c fe ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
   2166a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2166e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
   21672:	48 89 c6             	mov    %rax,%rsi
   21675:	48 89 d7             	mov    %rdx,%rdi
   21678:	89 f1                	mov    %esi,%ecx
   2167a:	48 89 d0             	mov    %rdx,%rax
   2167d:	89 ce                	mov    %ecx,%esi
   2167f:	48 89 c2             	mov    %rax,%rdx
   21682:	48 89 df             	mov    %rbx,%rdi
   21685:	e8 86 61 fe ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
   2168a:	48 8d 05 b5 62 fe ff 	lea    -0x19d4b(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
   21691:	48 89 c2             	mov    %rax,%rdx
   21694:	48 8d 05 65 f6 01 00 	lea    0x1f665(%rip),%rax        # 40d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
   2169b:	48 89 c6             	mov    %rax,%rsi
   2169e:	48 89 df             	mov    %rbx,%rdi
   216a1:	e8 da 3c fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   216a6:	49 89 c4             	mov    %rax,%r12
   216a9:	48 89 df             	mov    %rbx,%rdi
   216ac:	e8 9f 3a fe ff       	call   5150 <__cxa_free_exception@plt>
   216b1:	4c 89 e0             	mov    %r12,%rax
   216b4:	48 89 c7             	mov    %rax,%rdi
   216b7:	e8 e4 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   216bc:	49 89 c4             	mov    %rax,%r12
   216bf:	48 89 df             	mov    %rbx,%rdi
   216c2:	e8 89 3a fe ff       	call   5150 <__cxa_free_exception@plt>
   216c7:	4c 89 e0             	mov    %r12,%rax
   216ca:	48 89 c7             	mov    %rax,%rdi
   216cd:	e8 ce 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   216d2:	49 89 c4             	mov    %rax,%r12
   216d5:	48 89 df             	mov    %rbx,%rdi
   216d8:	e8 73 3a fe ff       	call   5150 <__cxa_free_exception@plt>
   216dd:	4c 89 e0             	mov    %r12,%rax
   216e0:	48 89 c7             	mov    %rax,%rdi
   216e3:	e8 b8 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   216e8:	49 89 c4             	mov    %rax,%r12
   216eb:	48 89 df             	mov    %rbx,%rdi
   216ee:	e8 5d 3a fe ff       	call   5150 <__cxa_free_exception@plt>
   216f3:	4c 89 e0             	mov    %r12,%rax
   216f6:	48 89 c7             	mov    %rax,%rdi
   216f9:	e8 a2 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   216fe:	49 89 c4             	mov    %rax,%r12
   21701:	48 89 df             	mov    %rbx,%rdi
   21704:	e8 47 3a fe ff       	call   5150 <__cxa_free_exception@plt>
   21709:	4c 89 e0             	mov    %r12,%rax
   2170c:	48 89 c7             	mov    %rax,%rdi
   2170f:	e8 8c 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   21714:	49 89 c4             	mov    %rax,%r12
   21717:	48 89 df             	mov    %rbx,%rdi
   2171a:	e8 31 3a fe ff       	call   5150 <__cxa_free_exception@plt>
   2171f:	4c 89 e0             	mov    %r12,%rax
   21722:	48 89 c7             	mov    %rax,%rdi
   21725:	e8 76 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   2172a:	49 89 c4             	mov    %rax,%r12
   2172d:	48 89 df             	mov    %rbx,%rdi
   21730:	e8 1b 3a fe ff       	call   5150 <__cxa_free_exception@plt>
   21735:	4c 89 e0             	mov    %r12,%rax
   21738:	48 89 c7             	mov    %rax,%rdi
   2173b:	e8 60 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   21740:	49 89 c4             	mov    %rax,%r12
   21743:	48 89 df             	mov    %rbx,%rdi
   21746:	e8 05 3a fe ff       	call   5150 <__cxa_free_exception@plt>
   2174b:	4c 89 e0             	mov    %r12,%rax
   2174e:	48 89 c7             	mov    %rax,%rdi
   21751:	e8 4a 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   21756:	49 89 c4             	mov    %rax,%r12
   21759:	48 89 df             	mov    %rbx,%rdi
   2175c:	e8 ef 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   21761:	4c 89 e0             	mov    %r12,%rax
   21764:	48 89 c7             	mov    %rax,%rdi
   21767:	e8 34 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   2176c:	49 89 c4             	mov    %rax,%r12
   2176f:	48 89 df             	mov    %rbx,%rdi
   21772:	e8 d9 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   21777:	4c 89 e0             	mov    %r12,%rax
   2177a:	48 89 c7             	mov    %rax,%rdi
   2177d:	e8 1e 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   21782:	49 89 c4             	mov    %rax,%r12
   21785:	48 89 df             	mov    %rbx,%rdi
   21788:	e8 c3 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   2178d:	4c 89 e0             	mov    %r12,%rax
   21790:	48 89 c7             	mov    %rax,%rdi
   21793:	e8 08 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   21798:	49 89 c4             	mov    %rax,%r12
   2179b:	48 89 df             	mov    %rbx,%rdi
   2179e:	e8 ad 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   217a3:	4c 89 e0             	mov    %r12,%rax
   217a6:	48 89 c7             	mov    %rax,%rdi
   217a9:	e8 f2 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   217ae:	49 89 c4             	mov    %rax,%r12
   217b1:	48 89 df             	mov    %rbx,%rdi
   217b4:	e8 97 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   217b9:	4c 89 e0             	mov    %r12,%rax
   217bc:	48 89 c7             	mov    %rax,%rdi
   217bf:	e8 dc 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   217c4:	49 89 c4             	mov    %rax,%r12
   217c7:	48 89 df             	mov    %rbx,%rdi
   217ca:	e8 81 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   217cf:	4c 89 e0             	mov    %r12,%rax
   217d2:	48 89 c7             	mov    %rax,%rdi
   217d5:	e8 c6 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   217da:	49 89 c4             	mov    %rax,%r12
   217dd:	48 89 df             	mov    %rbx,%rdi
   217e0:	e8 6b 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   217e5:	4c 89 e0             	mov    %r12,%rax
   217e8:	48 89 c7             	mov    %rax,%rdi
   217eb:	e8 b0 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   217f0:	49 89 c4             	mov    %rax,%r12
   217f3:	48 89 df             	mov    %rbx,%rdi
   217f6:	e8 55 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   217fb:	4c 89 e0             	mov    %r12,%rax
   217fe:	48 89 c7             	mov    %rax,%rdi
   21801:	e8 9a 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   21806:	49 89 c4             	mov    %rax,%r12
   21809:	48 89 df             	mov    %rbx,%rdi
   2180c:	e8 3f 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   21811:	4c 89 e0             	mov    %r12,%rax
   21814:	48 89 c7             	mov    %rax,%rdi
   21817:	e8 84 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   2181c:	49 89 c4             	mov    %rax,%r12
   2181f:	48 89 df             	mov    %rbx,%rdi
   21822:	e8 29 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   21827:	4c 89 e0             	mov    %r12,%rax
   2182a:	48 89 c7             	mov    %rax,%rdi
   2182d:	e8 6e 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   21832:	49 89 c4             	mov    %rax,%r12
   21835:	48 89 df             	mov    %rbx,%rdi
   21838:	e8 13 39 fe ff       	call   5150 <__cxa_free_exception@plt>
   2183d:	4c 89 e0             	mov    %r12,%rax
   21840:	48 89 c7             	mov    %rax,%rdi
   21843:	e8 58 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   21848:	49 89 c4             	mov    %rax,%r12
   2184b:	48 89 df             	mov    %rbx,%rdi
   2184e:	e8 fd 38 fe ff       	call   5150 <__cxa_free_exception@plt>
   21853:	4c 89 e0             	mov    %r12,%rax
   21856:	48 89 c7             	mov    %rax,%rdi
   21859:	e8 42 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   2185e:	49 89 c4             	mov    %rax,%r12
   21861:	48 89 df             	mov    %rbx,%rdi
   21864:	e8 e7 38 fe ff       	call   5150 <__cxa_free_exception@plt>
   21869:	4c 89 e0             	mov    %r12,%rax
   2186c:	48 89 c7             	mov    %rax,%rdi
   2186f:	e8 2c 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   21874:	49 89 c4             	mov    %rax,%r12
   21877:	48 89 df             	mov    %rbx,%rdi
   2187a:	e8 d1 38 fe ff       	call   5150 <__cxa_free_exception@plt>
   2187f:	4c 89 e0             	mov    %r12,%rax
   21882:	48 89 c7             	mov    %rax,%rdi
   21885:	e8 16 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   2188a:	49 89 c4             	mov    %rax,%r12
   2188d:	48 89 df             	mov    %rbx,%rdi
   21890:	e8 bb 38 fe ff       	call   5150 <__cxa_free_exception@plt>
   21895:	4c 89 e0             	mov    %r12,%rax
   21898:	48 89 c7             	mov    %rax,%rdi
   2189b:	e8 00 3b fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   218a0:	49 89 c4             	mov    %rax,%r12
   218a3:	48 89 df             	mov    %rbx,%rdi
   218a6:	e8 a5 38 fe ff       	call   5150 <__cxa_free_exception@plt>
   218ab:	4c 89 e0             	mov    %r12,%rax
   218ae:	48 89 c7             	mov    %rax,%rdi
   218b1:	e8 ea 3a fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   218b6:	49 89 c4             	mov    %rax,%r12
   218b9:	48 89 df             	mov    %rbx,%rdi
   218bc:	e8 8f 38 fe ff       	call   5150 <__cxa_free_exception@plt>
   218c1:	4c 89 e0             	mov    %r12,%rax
   218c4:	48 89 c7             	mov    %rax,%rdi
   218c7:	e8 d4 3a fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   218cc:	49 89 c4             	mov    %rax,%r12
   218cf:	48 89 df             	mov    %rbx,%rdi
   218d2:	e8 79 38 fe ff       	call   5150 <__cxa_free_exception@plt>
   218d7:	4c 89 e0             	mov    %r12,%rax
   218da:	48 89 c7             	mov    %rax,%rdi
   218dd:	e8 be 3a fe ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
   218e2:	49 89 c4             	mov    %rax,%r12
   218e5:	48 89 df             	mov    %rbx,%rdi
   218e8:	e8 63 38 fe ff       	call   5150 <__cxa_free_exception@plt>
   218ed:	4c 89 e0             	mov    %r12,%rax
   218f0:	48 89 c7             	mov    %rax,%rdi
   218f3:	e8 a8 3a fe ff       	call   53a0 <_Unwind_Resume@plt>

00000000000218f8 <_ZN4rtvc15makeCommandPoolERKNS_13DeviceWrapperE>:
#include "command_pool.hpp"

namespace rtvc {

vk::raii::CommandPool makeCommandPool(const DeviceWrapper &device) {
   218f8:	55                   	push   %rbp
   218f9:	48 89 e5             	mov    %rsp,%rbp
   218fc:	53                   	push   %rbx
   218fd:	48 83 ec 38          	sub    $0x38,%rsp
   21901:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   21905:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  vk::CommandPoolCreateInfo commandPoolInfo{
   21909:	66 0f ef c0          	pxor   %xmm0,%xmm0
   2190d:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
   21911:	66 0f d6 45 e0       	movq   %xmm0,-0x20(%rbp)
   21916:	c7 45 d0 27 00 00 00 	movl   $0x27,-0x30(%rbp)
   2191d:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%rbp)
      .flags{vk::CommandPoolCreateFlagBits::eResetCommandBuffer},
      .queueFamilyIndex{device.queueFamilyIndex},
   21924:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21928:	8b 00                	mov    (%rax),%eax
  };
   2192a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  return {device.logical, commandPoolInfo};
   2192d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21931:	48 8d 58 28          	lea    0x28(%rax),%rbx
   21935:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   21939:	be 00 00 00 00       	mov    $0x0,%esi
   2193e:	48 89 c7             	mov    %rax,%rdi
   21941:	e8 a6 6d ff ff       	call   186ec <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
   21946:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2194a:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   2194e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21952:	48 89 de             	mov    %rbx,%rsi
   21955:	48 89 c7             	mov    %rax,%rdi
   21958:	e8 d5 00 00 00       	call   21a32 <_ZN2vk4raii11CommandPoolC1ERKNS0_6DeviceERKNS_21CommandPoolCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
}
   2195d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21961:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   21965:	c9                   	leave
   21966:	c3                   	ret

0000000000021967 <_ZN4rtvc18makeCommandBuffersERKN2vk4raii6DeviceERKNS1_11CommandPoolEjNS0_18CommandBufferLevelE>:

vk::raii::CommandBuffers
makeCommandBuffers(const vk::raii::Device &device,
                   const vk::raii::CommandPool &commandPool, uint32_t count,
                   vk::CommandBufferLevel level) {
   21967:	55                   	push   %rbp
   21968:	48 89 e5             	mov    %rsp,%rbp
   2196b:	48 83 ec 40          	sub    $0x40,%rsp
   2196f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   21973:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   21977:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   2197b:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
   2197e:	44 89 45 c0          	mov    %r8d,-0x40(%rbp)
  vk::CommandBufferAllocateInfo allocInfo{
   21982:	66 0f ef c0          	pxor   %xmm0,%xmm0
   21986:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
   2198a:	0f 29 45 f0          	movaps %xmm0,-0x10(%rbp)
   2198e:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%rbp)
      .commandPool{*commandPool},
   21995:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21999:	48 89 c7             	mov    %rax,%rdi
   2199c:	e8 7b 01 00 00       	call   21b1c <_ZNK2vk4raii11CommandPooldeEv>
      .level{level},
      .commandBufferCount{count},
  };
   219a1:	48 8b 00             	mov    (%rax),%rax
   219a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   219a8:	8b 45 c0             	mov    -0x40(%rbp),%eax
   219ab:	89 45 f8             	mov    %eax,-0x8(%rbp)
   219ae:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   219b1:	89 45 fc             	mov    %eax,-0x4(%rbp)
  return {device, allocInfo};
   219b4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   219b8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   219bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   219c0:	48 89 ce             	mov    %rcx,%rsi
   219c3:	48 89 c7             	mov    %rax,%rdi
   219c6:	e8 91 03 00 00       	call   21d5c <_ZN2vk4raii14CommandBuffersC1ERKNS0_6DeviceERKNS_25CommandBufferAllocateInfoE>
}
   219cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   219cf:	c9                   	leave
   219d0:	c3                   	ret
   219d1:	90                   	nop

00000000000219d2 <_ZN2vk13CommandBufferC1EP17VkCommandBuffer_T>:
    CommandBuffer( VkCommandBuffer commandBuffer ) VULKAN_HPP_NOEXCEPT : m_commandBuffer( commandBuffer ) {}
   219d2:	55                   	push   %rbp
   219d3:	48 89 e5             	mov    %rsp,%rbp
   219d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   219da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   219de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   219e2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   219e6:	48 89 10             	mov    %rdx,(%rax)
   219e9:	90                   	nop
   219ea:	5d                   	pop    %rbp
   219eb:	c3                   	ret

00000000000219ec <_ZN2vk11CommandPoolC1EP15VkCommandPool_T>:
    VULKAN_HPP_TYPESAFE_EXPLICIT CommandPool( VkCommandPool commandPool ) VULKAN_HPP_NOEXCEPT : m_commandPool( commandPool ) {}
   219ec:	55                   	push   %rbp
   219ed:	48 89 e5             	mov    %rsp,%rbp
   219f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   219f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   219f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   219fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   21a00:	48 89 10             	mov    %rdx,(%rax)
   21a03:	90                   	nop
   21a04:	5d                   	pop    %rbp
   21a05:	c3                   	ret

0000000000021a06 <_ZN2vk11CommandPoolC1Ev>:
    VULKAN_HPP_CONSTEXPR         CommandPool() = default;
   21a06:	55                   	push   %rbp
   21a07:	48 89 e5             	mov    %rsp,%rbp
   21a0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21a0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21a12:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   21a19:	90                   	nop
   21a1a:	5d                   	pop    %rbp
   21a1b:	c3                   	ret

0000000000021a1c <_ZN2vk13CommandBufferC1Ev>:
    VULKAN_HPP_CONSTEXPR CommandBuffer() = default;
   21a1c:	55                   	push   %rbp
   21a1d:	48 89 e5             	mov    %rsp,%rbp
   21a20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21a24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21a28:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   21a2f:	90                   	nop
   21a30:	5d                   	pop    %rbp
   21a31:	c3                   	ret

0000000000021a32 <_ZN2vk4raii11CommandPoolC1ERKNS0_6DeviceERKNS_21CommandPoolCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      CommandPool( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Device const &                 device,
   21a32:	55                   	push   %rbp
   21a33:	48 89 e5             	mov    %rsp,%rbp
   21a36:	41 55                	push   %r13
   21a38:	41 54                	push   %r12
   21a3a:	53                   	push   %rbx
   21a3b:	48 83 ec 38          	sub    $0x38,%rsp
   21a3f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   21a43:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   21a47:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   21a4b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_device( *device )
   21a4f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21a53:	48 89 c7             	mov    %rax,%rdi
   21a56:	e8 43 50 ff ff       	call   16a9e <_ZNK2vk4raii6DevicedeEv>
   21a5b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   21a5f:	48 8b 00             	mov    (%rax),%rax
   21a62:	48 89 02             	mov    %rax,(%rdx)
        , m_dispatcher( device.getDispatcher() )
   21a65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21a69:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   21a70:	00 
   21a71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21a75:	48 83 c0 08          	add    $0x8,%rax
   21a79:	48 89 c7             	mov    %rax,%rdi
   21a7c:	e8 85 ff ff ff       	call   21a06 <_ZN2vk11CommandPoolC1Ev>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   21a81:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   21a85:	48 89 c7             	mov    %rax,%rdi
   21a88:	e8 d1 5c ff ff       	call   1775e <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   21a8d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   21a91:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( device.getDispatcher() )
   21a95:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21a99:	48 89 c7             	mov    %rax,%rdi
   21a9c:	e8 49 7b fe ff       	call   95ea <_ZNK2vk4raii6Device13getDispatcherEv>
   21aa1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   21aa5:	48 89 42 18          	mov    %rax,0x18(%rdx)
          device.getDispatcher()->vkCreateCommandPool( static_cast<VkDevice>( *device ),
   21aa9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21aad:	48 89 c7             	mov    %rax,%rdi
   21ab0:	e8 35 7b fe ff       	call   95ea <_ZNK2vk4raii6Device13getDispatcherEv>
   21ab5:	4c 8b a0 38 02 00 00 	mov    0x238(%rax),%r12
                                                       reinterpret_cast<VkCommandPool *>( &m_commandPool ) ) );
   21abc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21ac0:	4c 8d 68 08          	lea    0x8(%rax),%r13
                                                       reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   21ac4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21ac8:	48 8b 58 10          	mov    0x10(%rax),%rbx
          device.getDispatcher()->vkCreateCommandPool( static_cast<VkDevice>( *device ),
   21acc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21ad0:	48 89 c7             	mov    %rax,%rdi
   21ad3:	e8 c6 4f ff ff       	call   16a9e <_ZNK2vk4raii6DevicedeEv>
   21ad8:	48 89 c7             	mov    %rax,%rdi
   21adb:	e8 cc 75 fe ff       	call   90ac <_ZNK2vk6DevicecvP10VkDevice_TEv>
   21ae0:	48 89 c7             	mov    %rax,%rdi
   21ae3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   21ae7:	4c 89 e9             	mov    %r13,%rcx
   21aea:	48 89 da             	mov    %rbx,%rdx
   21aed:	48 89 c6             	mov    %rax,%rsi
   21af0:	41 ff d4             	call   *%r12
   21af3:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   21af6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   21afa:	74 14                	je     21b10 <_ZN2vk4raii11CommandPoolC1ERKNS0_6DeviceERKNS_21CommandPoolCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0xde>
          throwResultException( result, "vkCreateCommandPool" );
   21afc:	8b 45 dc             	mov    -0x24(%rbp),%eax
   21aff:	48 8d 15 ea e1 00 00 	lea    0xe1ea(%rip),%rdx        # 2fcf0 <_ZNSt8__detailL19__atomic_spin_countE+0xb4>
   21b06:	48 89 d6             	mov    %rdx,%rsi
   21b09:	89 c7                	mov    %eax,%edi
   21b0b:	e8 91 f3 ff ff       	call   20ea1 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   21b10:	90                   	nop
   21b11:	48 83 c4 38          	add    $0x38,%rsp
   21b15:	5b                   	pop    %rbx
   21b16:	41 5c                	pop    %r12
   21b18:	41 5d                	pop    %r13
   21b1a:	5d                   	pop    %rbp
   21b1b:	c3                   	ret

0000000000021b1c <_ZNK2vk4raii11CommandPooldeEv>:
      VULKAN_HPP_NAMESPACE::CommandPool const & operator*() const VULKAN_HPP_NOEXCEPT
   21b1c:	55                   	push   %rbp
   21b1d:	48 89 e5             	mov    %rsp,%rbp
   21b20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_commandPool;
   21b24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21b28:	48 83 c0 08          	add    $0x8,%rax
      }
   21b2c:	5d                   	pop    %rbp
   21b2d:	c3                   	ret

0000000000021b2e <_ZN2vk4raii13CommandBufferC1ERKNS0_6DeviceEP17VkCommandBuffer_TP15VkCommandPool_T>:
      CommandBuffer( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Device const & device, VkCommandBuffer commandBuffer, VkCommandPool commandPool )
   21b2e:	55                   	push   %rbp
   21b2f:	48 89 e5             	mov    %rsp,%rbp
   21b32:	48 83 ec 20          	sub    $0x20,%rsp
   21b36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21b3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21b3e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   21b42:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
        : m_device( *device ), m_commandPool( commandPool ), m_commandBuffer( commandBuffer ), m_dispatcher( device.getDispatcher() )
   21b46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21b4a:	48 89 c7             	mov    %rax,%rdi
   21b4d:	e8 4c 4f ff ff       	call   16a9e <_ZNK2vk4raii6DevicedeEv>
   21b52:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21b56:	48 8b 00             	mov    (%rax),%rax
   21b59:	48 89 02             	mov    %rax,(%rdx)
   21b5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21b60:	48 8d 50 08          	lea    0x8(%rax),%rdx
   21b64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21b68:	48 89 c6             	mov    %rax,%rsi
   21b6b:	48 89 d7             	mov    %rdx,%rdi
   21b6e:	e8 79 fe ff ff       	call   219ec <_ZN2vk11CommandPoolC1EP15VkCommandPool_T>
   21b73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21b77:	48 8d 50 10          	lea    0x10(%rax),%rdx
   21b7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21b7f:	48 89 c6             	mov    %rax,%rsi
   21b82:	48 89 d7             	mov    %rdx,%rdi
   21b85:	e8 48 fe ff ff       	call   219d2 <_ZN2vk13CommandBufferC1EP17VkCommandBuffer_T>
   21b8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21b8e:	48 89 c7             	mov    %rax,%rdi
   21b91:	e8 54 7a fe ff       	call   95ea <_ZNK2vk4raii6Device13getDispatcherEv>
   21b96:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21b9a:	48 89 42 18          	mov    %rax,0x18(%rdx)
      }
   21b9e:	90                   	nop
   21b9f:	c9                   	leave
   21ba0:	c3                   	ret
   21ba1:	90                   	nop

0000000000021ba2 <_ZN2vk4raii13CommandBufferC1EOS1_>:
      CommandBuffer( CommandBuffer && rhs ) VULKAN_HPP_NOEXCEPT
   21ba2:	55                   	push   %rbp
   21ba3:	48 89 e5             	mov    %rsp,%rbp
   21ba6:	48 83 ec 50          	sub    $0x50,%rsp
   21baa:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   21bae:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
        : m_device( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_device, {} ) )
   21bb2:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   21bb9:	00 
   21bba:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   21bbe:	48 89 c7             	mov    %rax,%rdi
   21bc1:	e8 6e 4d ff ff       	call   16934 <_ZN2vk6DeviceC1Ev>
   21bc6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   21bca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   21bce:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   21bd2:	48 89 c7             	mov    %rax,%rdi
   21bd5:	e8 23 07 00 00       	call   222fd <_ZSt7forwardIN2vk6DeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   21bda:	48 89 c2             	mov    %rax,%rdx
   21bdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21be1:	48 89 d6             	mov    %rdx,%rsi
   21be4:	48 89 c7             	mov    %rax,%rdi
   21be7:	e8 1f 07 00 00       	call   2230b <_ZSt8exchangeIN2vk6DeviceES1_ET_RS2_OT0_>
   21bec:	90                   	nop
   21bed:	48 89 c2             	mov    %rax,%rdx
        : m_device( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_device, {} ) )
   21bf0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   21bf4:	48 89 10             	mov    %rdx,(%rax)
        , m_commandPool( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_commandPool, {} ) )
   21bf7:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
   21bfe:	00 
   21bff:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   21c03:	48 89 c7             	mov    %rax,%rdi
   21c06:	e8 fb fd ff ff       	call   21a06 <_ZN2vk11CommandPoolC1Ev>
   21c0b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   21c0f:	48 83 c0 08          	add    $0x8,%rax
   21c13:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   21c17:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   21c1b:	48 89 c7             	mov    %rax,%rdi
   21c1e:	e8 64 07 00 00       	call   22387 <_ZSt7forwardIN2vk11CommandPoolEEOT_RNSt16remove_referenceIS2_E4typeE>
   21c23:	48 89 c2             	mov    %rax,%rdx
   21c26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21c2a:	48 89 d6             	mov    %rdx,%rsi
   21c2d:	48 89 c7             	mov    %rax,%rdi
   21c30:	e8 60 07 00 00       	call   22395 <_ZSt8exchangeIN2vk11CommandPoolES1_ET_RS2_OT0_>
   21c35:	90                   	nop
   21c36:	48 89 c2             	mov    %rax,%rdx
        , m_commandPool( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_commandPool, {} ) )
   21c39:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   21c3d:	48 89 50 08          	mov    %rdx,0x8(%rax)
        , m_commandBuffer( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_commandBuffer, {} ) )
   21c41:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   21c48:	00 
   21c49:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   21c4d:	48 89 c7             	mov    %rax,%rdi
   21c50:	e8 c7 fd ff ff       	call   21a1c <_ZN2vk13CommandBufferC1Ev>
   21c55:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   21c59:	48 83 c0 10          	add    $0x10,%rax
   21c5d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   21c61:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   21c65:	48 89 c7             	mov    %rax,%rdi
   21c68:	e8 66 07 00 00       	call   223d3 <_ZSt7forwardIN2vk13CommandBufferEEOT_RNSt16remove_referenceIS2_E4typeE>
   21c6d:	48 89 c2             	mov    %rax,%rdx
   21c70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21c74:	48 89 d6             	mov    %rdx,%rsi
   21c77:	48 89 c7             	mov    %rax,%rdi
   21c7a:	e8 62 07 00 00       	call   223e1 <_ZSt8exchangeIN2vk13CommandBufferES1_ET_RS2_OT0_>
   21c7f:	90                   	nop
   21c80:	48 89 c2             	mov    %rax,%rdx
        , m_commandBuffer( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_commandBuffer, {} ) )
   21c83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   21c87:	48 89 50 10          	mov    %rdx,0x10(%rax)
        , m_dispatcher( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_dispatcher, nullptr ) )
   21c8b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   21c92:	00 
   21c93:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   21c97:	48 83 c0 18          	add    $0x18,%rax
   21c9b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   21c9f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   21ca3:	48 89 c7             	mov    %rax,%rdi
   21ca6:	e8 b0 6a ff ff       	call   1875b <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   21cab:	48 89 c2             	mov    %rax,%rdx
   21cae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21cb2:	48 89 d6             	mov    %rdx,%rsi
   21cb5:	48 89 c7             	mov    %rax,%rdi
   21cb8:	e8 8c 06 00 00       	call   22349 <_ZSt8exchangeIPKN2vk4raii16DeviceDispatcherEDnET_RS5_OT0_>
   21cbd:	90                   	nop
        , m_dispatcher( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_dispatcher, nullptr ) )
   21cbe:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   21cc2:	48 89 42 18          	mov    %rax,0x18(%rdx)
      }
   21cc6:	90                   	nop
   21cc7:	c9                   	leave
   21cc8:	c3                   	ret
   21cc9:	90                   	nop

0000000000021cca <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EEC1Ev>:
      _Vector_base() = default;
   21cca:	55                   	push   %rbp
   21ccb:	48 89 e5             	mov    %rsp,%rbp
   21cce:	48 83 ec 10          	sub    $0x10,%rsp
   21cd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21cd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21cda:	48 89 c7             	mov    %rax,%rdi
   21cdd:	e8 48 02 00 00       	call   21f2a <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE12_Vector_implC1Ev>
   21ce2:	90                   	nop
   21ce3:	c9                   	leave
   21ce4:	c3                   	ret
   21ce5:	90                   	nop

0000000000021ce6 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EEC1Ev>:
      vector() = default;
   21ce6:	55                   	push   %rbp
   21ce7:	48 89 e5             	mov    %rsp,%rbp
   21cea:	48 83 ec 10          	sub    $0x10,%rsp
   21cee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21cf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21cf6:	48 89 c7             	mov    %rax,%rdi
   21cf9:	e8 cc ff ff ff       	call   21cca <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EEC1Ev>
   21cfe:	90                   	nop
   21cff:	c9                   	leave
   21d00:	c3                   	ret

0000000000021d01 <_ZN9__gnu_cxxeqIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   21d01:	55                   	push   %rbp
   21d02:	48 89 e5             	mov    %rsp,%rbp
   21d05:	53                   	push   %rbx
   21d06:	48 83 ec 18          	sub    $0x18,%rsp
   21d0a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21d0e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   21d12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21d16:	48 89 c7             	mov    %rax,%rdi
   21d19:	e8 1e 00 00 00       	call   21d3c <_ZNK9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEE4baseEv>
   21d1e:	48 8b 18             	mov    (%rax),%rbx
   21d21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21d25:	48 89 c7             	mov    %rax,%rdi
   21d28:	e8 0f 00 00 00       	call   21d3c <_ZNK9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEE4baseEv>
   21d2d:	48 8b 00             	mov    (%rax),%rax
   21d30:	48 39 c3             	cmp    %rax,%rbx
   21d33:	0f 94 c0             	sete   %al
   21d36:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   21d3a:	c9                   	leave
   21d3b:	c3                   	ret

0000000000021d3c <_ZNK9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   21d3c:	55                   	push   %rbp
   21d3d:	48 89 e5             	mov    %rsp,%rbp
   21d40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   21d44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21d48:	5d                   	pop    %rbp
   21d49:	c3                   	ret

0000000000021d4a <_ZNK9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   21d4a:	55                   	push   %rbp
   21d4b:	48 89 e5             	mov    %rsp,%rbp
   21d4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   21d52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21d56:	48 8b 00             	mov    (%rax),%rax
   21d59:	5d                   	pop    %rbp
   21d5a:	c3                   	ret
   21d5b:	90                   	nop

0000000000021d5c <_ZN2vk4raii14CommandBuffersC1ERKNS0_6DeviceERKNS_25CommandBufferAllocateInfoE>:
      CommandBuffers( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Device const & device,
   21d5c:	55                   	push   %rbp
   21d5d:	48 89 e5             	mov    %rsp,%rbp
   21d60:	41 54                	push   %r12
   21d62:	53                   	push   %rbx
   21d63:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
   21d67:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   21d6b:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
   21d6f:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
      {
   21d76:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   21d7a:	48 89 c7             	mov    %rax,%rdi
   21d7d:	e8 64 ff ff ff       	call   21ce6 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EEC1Ev>
        VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * dispatcher = device.getDispatcher();
   21d82:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   21d86:	48 89 c7             	mov    %rax,%rdi
   21d89:	e8 5c 78 fe ff       	call   95ea <_ZNK2vk4raii6Device13getDispatcherEv>
   21d8e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        std::vector<VkCommandBuffer>                                              commandBuffers( allocateInfo.commandBufferCount );
   21d92:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
   21d96:	48 89 c7             	mov    %rax,%rdi
   21d99:	e8 b4 01 00 00       	call   21f52 <_ZNSaIP17VkCommandBuffer_TEC1Ev>
   21d9e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   21da5:	8b 40 1c             	mov    0x1c(%rax),%eax
   21da8:	89 c1                	mov    %eax,%ecx
   21daa:	48 8d 55 c7          	lea    -0x39(%rbp),%rdx
   21dae:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   21db2:	48 89 ce             	mov    %rcx,%rsi
   21db5:	48 89 c7             	mov    %rax,%rdi
   21db8:	e8 bd 01 00 00       	call   21f7a <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>
   21dbd:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
   21dc1:	48 89 c7             	mov    %rax,%rdi
   21dc4:	e8 a5 01 00 00       	call   21f6e <_ZNSaIP17VkCommandBuffer_TED1Ev>
        VULKAN_HPP_NAMESPACE::Result result = static_cast<VULKAN_HPP_NAMESPACE::Result>( dispatcher->vkAllocateCommandBuffers(
   21dc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21dcd:	48 8b 98 50 02 00 00 	mov    0x250(%rax),%rbx
   21dd4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   21dd8:	48 89 c7             	mov    %rax,%rdi
   21ddb:	e8 54 02 00 00       	call   22034 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE4dataEv>
   21de0:	49 89 c4             	mov    %rax,%r12
          static_cast<VkDevice>( *device ), reinterpret_cast<const VkCommandBufferAllocateInfo *>( &allocateInfo ), commandBuffers.data() ) );
   21de3:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   21de7:	48 89 c7             	mov    %rax,%rdi
   21dea:	e8 af 4c ff ff       	call   16a9e <_ZNK2vk4raii6DevicedeEv>
        VULKAN_HPP_NAMESPACE::Result result = static_cast<VULKAN_HPP_NAMESPACE::Result>( dispatcher->vkAllocateCommandBuffers(
   21def:	48 89 c7             	mov    %rax,%rdi
   21df2:	e8 b5 72 fe ff       	call   90ac <_ZNK2vk6DevicecvP10VkDevice_TEv>
   21df7:	48 89 c1             	mov    %rax,%rcx
   21dfa:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   21e01:	4c 89 e2             	mov    %r12,%rdx
   21e04:	48 89 c6             	mov    %rax,%rsi
   21e07:	48 89 cf             	mov    %rcx,%rdi
   21e0a:	ff d3                	call   *%rbx
   21e0c:	89 45 e4             	mov    %eax,-0x1c(%rbp)
        if ( result == VULKAN_HPP_NAMESPACE::Result::eSuccess )
   21e0f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
   21e13:	0f 85 af 00 00 00    	jne    21ec8 <_ZN2vk4raii14CommandBuffersC1ERKNS0_6DeviceERKNS_25CommandBufferAllocateInfoE+0x16c>
          this->reserve( allocateInfo.commandBufferCount );
   21e19:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   21e1d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   21e24:	8b 52 1c             	mov    0x1c(%rdx),%edx
   21e27:	89 d2                	mov    %edx,%edx
   21e29:	48 89 d6             	mov    %rdx,%rsi
   21e2c:	48 89 c7             	mov    %rax,%rdi
   21e2f:	e8 48 02 00 00       	call   2207c <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE7reserveEm>
          for ( auto const & commandBuffer : commandBuffers )
   21e34:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   21e38:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   21e3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21e40:	48 89 c7             	mov    %rax,%rdi
   21e43:	e8 4e 03 00 00       	call   22196 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE5beginEv>
   21e48:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   21e4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21e50:	48 89 c7             	mov    %rax,%rdi
   21e53:	e8 64 03 00 00       	call   221bc <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE3endEv>
   21e58:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   21e5c:	eb 4e                	jmp    21eac <_ZN2vk4raii14CommandBuffersC1ERKNS0_6DeviceERKNS_25CommandBufferAllocateInfoE+0x150>
   21e5e:	48 8d 45 98          	lea    -0x68(%rbp),%rax
   21e62:	48 89 c7             	mov    %rax,%rdi
   21e65:	e8 e0 fe ff ff       	call   21d4a <_ZNK9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEEdeEv>
   21e6a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            this->emplace_back( device, commandBuffer, static_cast<VkCommandPool>( allocateInfo.commandPool ) );
   21e6e:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   21e72:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   21e79:	48 83 c0 10          	add    $0x10,%rax
   21e7d:	48 89 c7             	mov    %rax,%rdi
   21e80:	e8 c1 71 fe ff       	call   9046 <_ZNK2vk11CommandPoolcvP15VkCommandPool_TEv>
   21e85:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   21e89:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
   21e8d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   21e91:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   21e95:	48 89 c6             	mov    %rax,%rsi
   21e98:	48 89 df             	mov    %rbx,%rdi
   21e9b:	e8 66 03 00 00       	call   22206 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12emplace_backIJRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEERS2_DpOT_>
          for ( auto const & commandBuffer : commandBuffers )
   21ea0:	48 8d 45 98          	lea    -0x68(%rbp),%rax
   21ea4:	48 89 c7             	mov    %rax,%rdi
   21ea7:	e8 3a 03 00 00       	call   221e6 <_ZN9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEEppEv>
   21eac:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
   21eb0:	48 8d 45 98          	lea    -0x68(%rbp),%rax
   21eb4:	48 89 d6             	mov    %rdx,%rsi
   21eb7:	48 89 c7             	mov    %rax,%rdi
   21eba:	e8 42 fe ff ff       	call   21d01 <_ZN9__gnu_cxxeqIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   21ebf:	83 f0 01             	xor    $0x1,%eax
   21ec2:	84 c0                	test   %al,%al
   21ec4:	75 98                	jne    21e5e <_ZN2vk4raii14CommandBuffersC1ERKNS0_6DeviceERKNS_25CommandBufferAllocateInfoE+0x102>
   21ec6:	eb 14                	jmp    21edc <_ZN2vk4raii14CommandBuffersC1ERKNS0_6DeviceERKNS_25CommandBufferAllocateInfoE+0x180>
          throwResultException( result, "vkAllocateCommandBuffers" );
   21ec8:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   21ecb:	48 8d 15 87 de 00 00 	lea    0xde87(%rip),%rdx        # 2fd59 <_ZNSt8__detailL19__atomic_spin_countE+0x11d>
   21ed2:	48 89 d6             	mov    %rdx,%rsi
   21ed5:	89 c7                	mov    %eax,%edi
   21ed7:	e8 c5 ef ff ff       	call   20ea1 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   21edc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   21ee0:	48 89 c7             	mov    %rax,%rdi
   21ee3:	e8 08 01 00 00       	call   21ff0 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>
   21ee8:	eb 37                	jmp    21f21 <_ZN2vk4raii14CommandBuffersC1ERKNS0_6DeviceERKNS_25CommandBufferAllocateInfoE+0x1c5>
        std::vector<VkCommandBuffer>                                              commandBuffers( allocateInfo.commandBufferCount );
   21eea:	48 89 c3             	mov    %rax,%rbx
   21eed:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
   21ef1:	48 89 c7             	mov    %rax,%rdi
   21ef4:	e8 75 00 00 00       	call   21f6e <_ZNSaIP17VkCommandBuffer_TED1Ev>
   21ef9:	eb 0f                	jmp    21f0a <_ZN2vk4raii14CommandBuffersC1ERKNS0_6DeviceERKNS_25CommandBufferAllocateInfoE+0x1ae>
      }
   21efb:	48 89 c3             	mov    %rax,%rbx
   21efe:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   21f02:	48 89 c7             	mov    %rax,%rdi
   21f05:	e8 e6 00 00 00       	call   21ff0 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>
   21f0a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   21f0e:	48 89 c7             	mov    %rax,%rdi
   21f11:	e8 02 8a fe ff       	call   a918 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EED1Ev>
   21f16:	48 89 d8             	mov    %rbx,%rax
   21f19:	48 89 c7             	mov    %rax,%rdi
   21f1c:	e8 7f 34 fe ff       	call   53a0 <_Unwind_Resume@plt>
   21f21:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp
   21f25:	5b                   	pop    %rbx
   21f26:	41 5c                	pop    %r12
   21f28:	5d                   	pop    %rbp
   21f29:	c3                   	ret

0000000000021f2a <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   21f2a:	55                   	push   %rbp
   21f2b:	48 89 e5             	mov    %rsp,%rbp
   21f2e:	48 83 ec 10          	sub    $0x10,%rsp
   21f32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   21f36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21f3a:	48 89 c7             	mov    %rax,%rdi
   21f3d:	e8 de 04 00 00       	call   22420 <_ZNSaIN2vk4raii13CommandBufferEEC1Ev>
   21f42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21f46:	48 89 c7             	mov    %rax,%rdi
   21f49:	e8 ee 04 00 00       	call   2243c <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
   21f4e:	90                   	nop
   21f4f:	c9                   	leave
   21f50:	c3                   	ret
   21f51:	90                   	nop

0000000000021f52 <_ZNSaIP17VkCommandBuffer_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   21f52:	55                   	push   %rbp
   21f53:	48 89 e5             	mov    %rsp,%rbp
   21f56:	48 83 ec 10          	sub    $0x10,%rsp
   21f5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21f5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21f62:	48 89 c7             	mov    %rax,%rdi
   21f65:	e8 00 05 00 00       	call   2246a <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1Ev>
   21f6a:	90                   	nop
   21f6b:	c9                   	leave
   21f6c:	c3                   	ret
   21f6d:	90                   	nop

0000000000021f6e <_ZNSaIP17VkCommandBuffer_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   21f6e:	55                   	push   %rbp
   21f6f:	48 89 e5             	mov    %rsp,%rbp
   21f72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21f76:	90                   	nop
   21f77:	5d                   	pop    %rbp
   21f78:	c3                   	ret
   21f79:	90                   	nop

0000000000021f7a <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
   21f7a:	55                   	push   %rbp
   21f7b:	48 89 e5             	mov    %rsp,%rbp
   21f7e:	53                   	push   %rbx
   21f7f:	48 83 ec 28          	sub    $0x28,%rsp
   21f83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21f87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   21f8b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
   21f8f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   21f93:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   21f97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21f9b:	48 89 d6             	mov    %rdx,%rsi
   21f9e:	48 89 c7             	mov    %rax,%rdi
   21fa1:	e8 cf 04 00 00       	call   22475 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE17_S_check_init_lenEmRKS2_>
   21fa6:	48 89 c1             	mov    %rax,%rcx
   21fa9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21fad:	48 89 c2             	mov    %rax,%rdx
   21fb0:	48 89 ce             	mov    %rcx,%rsi
   21fb3:	48 89 df             	mov    %rbx,%rdi
   21fb6:	e8 37 05 00 00       	call   224f2 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
   21fbb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   21fbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21fc3:	48 89 d6             	mov    %rdx,%rsi
   21fc6:	48 89 c7             	mov    %rax,%rdi
   21fc9:	e8 d0 05 00 00       	call   2259e <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE21_M_default_initializeEm>
   21fce:	eb 1a                	jmp    21fea <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_+0x70>
   21fd0:	48 89 c3             	mov    %rax,%rbx
   21fd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21fd7:	48 89 c7             	mov    %rax,%rdi
   21fda:	e8 71 05 00 00       	call   22550 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EED1Ev>
   21fdf:	48 89 d8             	mov    %rbx,%rax
   21fe2:	48 89 c7             	mov    %rax,%rdi
   21fe5:	e8 b6 33 fe ff       	call   53a0 <_Unwind_Resume@plt>
   21fea:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   21fee:	c9                   	leave
   21fef:	c3                   	ret

0000000000021ff0 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   21ff0:	55                   	push   %rbp
   21ff1:	48 89 e5             	mov    %rsp,%rbp
   21ff4:	48 83 ec 10          	sub    $0x10,%rsp
   21ff8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   21ffc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22000:	48 89 c7             	mov    %rax,%rdi
   22003:	e8 d6 05 00 00       	call   225de <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   22008:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2200b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2200f:	48 8b 48 08          	mov    0x8(%rax),%rcx
   22013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22017:	48 8b 00             	mov    (%rax),%rax
   2201a:	48 89 ce             	mov    %rcx,%rsi
   2201d:	48 89 c7             	mov    %rax,%rdi
   22020:	e8 c7 05 00 00       	call   225ec <_ZSt8_DestroyIPP17VkCommandBuffer_TS1_EvT_S3_RSaIT0_E>
      }
   22025:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22029:	48 89 c7             	mov    %rax,%rdi
   2202c:	e8 1f 05 00 00       	call   22550 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EED1Ev>
   22031:	90                   	nop
   22032:	c9                   	leave
   22033:	c3                   	ret

0000000000022034 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   22034:	55                   	push   %rbp
   22035:	48 89 e5             	mov    %rsp,%rbp
   22038:	48 83 ec 10          	sub    $0x10,%rsp
   2203c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   22040:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22044:	48 8b 10             	mov    (%rax),%rdx
   22047:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2204b:	48 89 d6             	mov    %rdx,%rsi
   2204e:	48 89 c7             	mov    %rax,%rdi
   22051:	e8 c0 05 00 00       	call   22616 <_ZNKSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   22056:	c9                   	leave
   22057:	c3                   	ret

0000000000022058 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   22058:	55                   	push   %rbp
   22059:	48 89 e5             	mov    %rsp,%rbp
   2205c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   22060:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22064:	48 8b 50 08          	mov    0x8(%rax),%rdx
   22068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2206c:	48 8b 00             	mov    (%rax),%rax
   2206f:	48 29 c2             	sub    %rax,%rdx
   22072:	48 89 d0             	mov    %rdx,%rax
   22075:	48 c1 f8 05          	sar    $0x5,%rax
   22079:	5d                   	pop    %rbp
   2207a:	c3                   	ret
   2207b:	90                   	nop

000000000002207c <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE7reserveEm>:
    vector<_Tp, _Alloc>::
   2207c:	55                   	push   %rbp
   2207d:	48 89 e5             	mov    %rsp,%rbp
   22080:	48 83 ec 20          	sub    $0x20,%rsp
   22084:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22088:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      if (__n > this->max_size())
   2208c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22090:	48 89 c7             	mov    %rax,%rdi
   22093:	e8 90 05 00 00       	call   22628 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE8max_sizeEv>
   22098:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   2209c:	0f 92 c0             	setb   %al
   2209f:	84 c0                	test   %al,%al
   220a1:	74 0f                	je     220b2 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE7reserveEm+0x36>
	__throw_length_error(__N("vector::reserve"));
   220a3:	48 8d 05 00 dd 00 00 	lea    0xdd00(%rip),%rax        # 2fdaa <_ZNSt8__detailL19__atomic_spin_countE+0x16e>
   220aa:	48 89 c7             	mov    %rax,%rdi
   220ad:	e8 2e 30 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      if (this->capacity() < __n)
   220b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   220b6:	48 89 c7             	mov    %rax,%rdi
   220b9:	e8 8c 05 00 00       	call   2264a <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE8capacityEv>
   220be:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   220c2:	0f 92 c0             	setb   %al
   220c5:	84 c0                	test   %al,%al
   220c7:	0f 84 c5 00 00 00    	je     22192 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE7reserveEm+0x116>
	  const size_type __old_size = size();
   220cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   220d1:	48 89 c7             	mov    %rax,%rdi
   220d4:	e8 7f ff ff ff       	call   22058 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE4sizeEv>
   220d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      __tmp = this->_M_allocate(__n);
   220dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   220e1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   220e5:	48 89 d6             	mov    %rdx,%rsi
   220e8:	48 89 c7             	mov    %rax,%rdi
   220eb:	e8 7e 05 00 00       	call   2266e <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE11_M_allocateEm>
   220f0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
			  __tmp, _M_get_Tp_allocator());
   220f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   220f8:	48 89 c7             	mov    %rax,%rdi
   220fb:	e8 d8 8e fe ff       	call   afd8 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE19_M_get_Tp_allocatorEv>
   22100:	48 89 c1             	mov    %rax,%rcx
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   22103:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22107:	48 8b 70 08          	mov    0x8(%rax),%rsi
   2210b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2210f:	48 8b 00             	mov    (%rax),%rax
   22112:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   22116:	48 89 c7             	mov    %rax,%rdi
   22119:	e8 83 05 00 00       	call   226a1 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
	  _M_deallocate(this->_M_impl._M_start,
   2211e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
			this->_M_impl._M_end_of_storage
   22122:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   22126:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			- this->_M_impl._M_start);
   2212a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2212e:	48 8b 12             	mov    (%rdx),%rdx
   22131:	48 29 d1             	sub    %rdx,%rcx
   22134:	48 c1 f9 05          	sar    $0x5,%rcx
   22138:	48 89 ca             	mov    %rcx,%rdx
	  _M_deallocate(this->_M_impl._M_start,
   2213b:	48 89 d6             	mov    %rdx,%rsi
   2213e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   22142:	48 8b 0a             	mov    (%rdx),%rcx
   22145:	48 89 f2             	mov    %rsi,%rdx
   22148:	48 89 ce             	mov    %rcx,%rsi
   2214b:	48 89 c7             	mov    %rax,%rdi
   2214e:	e8 4f 8e fe ff       	call   afa2 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE13_M_deallocateEPS2_m>
	  this->_M_impl._M_start = __tmp;
   22153:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22157:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2215b:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_finish = __tmp + __old_size;
   2215e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22162:	48 c1 e0 05          	shl    $0x5,%rax
   22166:	48 89 c2             	mov    %rax,%rdx
   22169:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2216d:	48 01 c2             	add    %rax,%rdx
   22170:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22174:	48 89 50 08          	mov    %rdx,0x8(%rax)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   22178:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2217c:	48 8b 00             	mov    (%rax),%rax
   2217f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   22183:	48 c1 e2 05          	shl    $0x5,%rdx
   22187:	48 01 c2             	add    %rax,%rdx
   2218a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2218e:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   22192:	90                   	nop
   22193:	c9                   	leave
   22194:	c3                   	ret
   22195:	90                   	nop

0000000000022196 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   22196:	55                   	push   %rbp
   22197:	48 89 e5             	mov    %rsp,%rbp
   2219a:	48 83 ec 20          	sub    $0x20,%rsp
   2219e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   221a2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   221a6:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   221aa:	48 89 d6             	mov    %rdx,%rsi
   221ad:	48 89 c7             	mov    %rax,%rdi
   221b0:	e8 1f 05 00 00       	call   226d4 <_ZN9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   221b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   221b9:	c9                   	leave
   221ba:	c3                   	ret
   221bb:	90                   	nop

00000000000221bc <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   221bc:	55                   	push   %rbp
   221bd:	48 89 e5             	mov    %rsp,%rbp
   221c0:	48 83 ec 20          	sub    $0x20,%rsp
   221c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   221c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   221cc:	48 8d 50 08          	lea    0x8(%rax),%rdx
   221d0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   221d4:	48 89 d6             	mov    %rdx,%rsi
   221d7:	48 89 c7             	mov    %rax,%rdi
   221da:	e8 f5 04 00 00       	call   226d4 <_ZN9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   221df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   221e3:	c9                   	leave
   221e4:	c3                   	ret
   221e5:	90                   	nop

00000000000221e6 <_ZN9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   221e6:	55                   	push   %rbp
   221e7:	48 89 e5             	mov    %rsp,%rbp
   221ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   221ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   221f2:	48 8b 00             	mov    (%rax),%rax
   221f5:	48 8d 50 08          	lea    0x8(%rax),%rdx
   221f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   221fd:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   22200:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   22204:	5d                   	pop    %rbp
   22205:	c3                   	ret

0000000000022206 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12emplace_backIJRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEERS2_DpOT_>:
      vector<_Tp, _Alloc>::
   22206:	55                   	push   %rbp
   22207:	48 89 e5             	mov    %rsp,%rbp
   2220a:	41 55                	push   %r13
   2220c:	41 54                	push   %r12
   2220e:	53                   	push   %rbx
   2220f:	48 83 ec 28          	sub    $0x28,%rsp
   22213:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   22217:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   2221b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   2221f:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   22223:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22227:	48 8b 50 08          	mov    0x8(%rax),%rdx
   2222b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2222f:	48 8b 40 10          	mov    0x10(%rax),%rax
   22233:	48 39 c2             	cmp    %rax,%rdx
   22236:	74 5d                	je     22295 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12emplace_backIJRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEERS2_DpOT_+0x8f>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
   22238:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2223c:	48 89 c7             	mov    %rax,%rdi
   2223f:	e8 c9 04 00 00       	call   2270d <_ZSt7forwardIP15VkCommandPool_TEOT_RNSt16remove_referenceIS2_E4typeE>
   22244:	49 89 c4             	mov    %rax,%r12
   22247:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2224b:	48 89 c7             	mov    %rax,%rdi
   2224e:	e8 ac 04 00 00       	call   226ff <_ZSt7forwardIRKP17VkCommandBuffer_TEOT_RNSt16remove_referenceIS4_E4typeE>
   22253:	48 89 c3             	mov    %rax,%rbx
   22256:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2225a:	48 89 c7             	mov    %rax,%rdi
   2225d:	e8 8f 04 00 00       	call   226f1 <_ZSt7forwardIRKN2vk4raii6DeviceEEOT_RNSt16remove_referenceIS5_E4typeE>
   22262:	48 89 c2             	mov    %rax,%rdx
   22265:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22269:	48 8b 70 08          	mov    0x8(%rax),%rsi
   2226d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22271:	4d 89 e0             	mov    %r12,%r8
   22274:	48 89 d9             	mov    %rbx,%rcx
   22277:	48 89 c7             	mov    %rax,%rdi
   2227a:	e8 9c 04 00 00       	call   2271b <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE9constructIS2_JRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
   2227f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22283:	48 8b 40 08          	mov    0x8(%rax),%rax
   22287:	48 8d 50 20          	lea    0x20(%rax),%rdx
   2228b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2228f:	48 89 50 08          	mov    %rdx,0x8(%rax)
   22293:	eb 51                	jmp    222e6 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12emplace_backIJRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEERS2_DpOT_+0xe0>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   22295:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   22299:	48 89 c7             	mov    %rax,%rdi
   2229c:	e8 6c 04 00 00       	call   2270d <_ZSt7forwardIP15VkCommandPool_TEOT_RNSt16remove_referenceIS2_E4typeE>
   222a1:	49 89 c5             	mov    %rax,%r13
   222a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   222a8:	48 89 c7             	mov    %rax,%rdi
   222ab:	e8 4f 04 00 00       	call   226ff <_ZSt7forwardIRKP17VkCommandBuffer_TEOT_RNSt16remove_referenceIS4_E4typeE>
   222b0:	49 89 c4             	mov    %rax,%r12
   222b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   222b7:	48 89 c7             	mov    %rax,%rdi
   222ba:	e8 32 04 00 00       	call   226f1 <_ZSt7forwardIRKN2vk4raii6DeviceEEOT_RNSt16remove_referenceIS5_E4typeE>
   222bf:	48 89 c3             	mov    %rax,%rbx
   222c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   222c6:	48 89 c7             	mov    %rax,%rdi
   222c9:	e8 b6 04 00 00       	call   22784 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE3endEv>
   222ce:	48 89 c6             	mov    %rax,%rsi
   222d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   222d5:	4d 89 e8             	mov    %r13,%r8
   222d8:	4c 89 e1             	mov    %r12,%rcx
   222db:	48 89 da             	mov    %rbx,%rdx
   222de:	48 89 c7             	mov    %rax,%rdi
   222e1:	e8 f8 05 00 00       	call   228de <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE17_M_realloc_insertIJRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
	return back();
   222e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   222ea:	48 89 c7             	mov    %rax,%rdi
   222ed:	e8 ac 07 00 00       	call   22a9e <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE4backEv>
      }
   222f2:	48 83 c4 28          	add    $0x28,%rsp
   222f6:	5b                   	pop    %rbx
   222f7:	41 5c                	pop    %r12
   222f9:	41 5d                	pop    %r13
   222fb:	5d                   	pop    %rbp
   222fc:	c3                   	ret

00000000000222fd <_ZSt7forwardIN2vk6DeviceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   222fd:	55                   	push   %rbp
   222fe:	48 89 e5             	mov    %rsp,%rbp
   22301:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   22305:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22309:	5d                   	pop    %rbp
   2230a:	c3                   	ret

000000000002230b <_ZSt8exchangeIN2vk6DeviceES1_ET_RS2_OT0_>:
    exchange(_Tp& __obj, _Up&& __new_val)
   2230b:	55                   	push   %rbp
   2230c:	48 89 e5             	mov    %rsp,%rbp
   2230f:	48 83 ec 10          	sub    $0x10,%rsp
   22313:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22317:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   2231b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2231f:	48 89 c7             	mov    %rax,%rdi
   22322:	e8 d6 ff ff ff       	call   222fd <_ZSt7forwardIN2vk6DeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   22327:	48 89 c2             	mov    %rax,%rdx
   2232a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2232e:	48 89 d6             	mov    %rdx,%rsi
   22331:	48 89 c7             	mov    %rax,%rdi
   22334:	e8 a4 07 00 00       	call   22add <_ZSt10__exchangeIN2vk6DeviceES1_ET_RS2_OT0_>
   22339:	c9                   	leave
   2233a:	c3                   	ret

000000000002233b <_ZSt4moveIRN2vk6DeviceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   2233b:	55                   	push   %rbp
   2233c:	48 89 e5             	mov    %rsp,%rbp
   2233f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   22343:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22347:	5d                   	pop    %rbp
   22348:	c3                   	ret

0000000000022349 <_ZSt8exchangeIPKN2vk4raii16DeviceDispatcherEDnET_RS5_OT0_>:
    exchange(_Tp& __obj, _Up&& __new_val)
   22349:	55                   	push   %rbp
   2234a:	48 89 e5             	mov    %rsp,%rbp
   2234d:	48 83 ec 10          	sub    $0x10,%rsp
   22351:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22355:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   22359:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2235d:	48 89 c7             	mov    %rax,%rdi
   22360:	e8 f6 63 ff ff       	call   1875b <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   22365:	48 89 c2             	mov    %rax,%rdx
   22368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2236c:	48 89 d6             	mov    %rdx,%rsi
   2236f:	48 89 c7             	mov    %rax,%rdi
   22372:	e8 a5 07 00 00       	call   22b1c <_ZSt10__exchangeIPKN2vk4raii16DeviceDispatcherEDnET_RS5_OT0_>
   22377:	c9                   	leave
   22378:	c3                   	ret

0000000000022379 <_ZSt4moveIRPKN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
   22379:	55                   	push   %rbp
   2237a:	48 89 e5             	mov    %rsp,%rbp
   2237d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   22381:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22385:	5d                   	pop    %rbp
   22386:	c3                   	ret

0000000000022387 <_ZSt7forwardIN2vk11CommandPoolEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   22387:	55                   	push   %rbp
   22388:	48 89 e5             	mov    %rsp,%rbp
   2238b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   2238f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22393:	5d                   	pop    %rbp
   22394:	c3                   	ret

0000000000022395 <_ZSt8exchangeIN2vk11CommandPoolES1_ET_RS2_OT0_>:
    exchange(_Tp& __obj, _Up&& __new_val)
   22395:	55                   	push   %rbp
   22396:	48 89 e5             	mov    %rsp,%rbp
   22399:	48 83 ec 10          	sub    $0x10,%rsp
   2239d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   223a1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   223a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   223a9:	48 89 c7             	mov    %rax,%rdi
   223ac:	e8 d6 ff ff ff       	call   22387 <_ZSt7forwardIN2vk11CommandPoolEEOT_RNSt16remove_referenceIS2_E4typeE>
   223b1:	48 89 c2             	mov    %rax,%rdx
   223b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   223b8:	48 89 d6             	mov    %rdx,%rsi
   223bb:	48 89 c7             	mov    %rax,%rdi
   223be:	e8 99 07 00 00       	call   22b5c <_ZSt10__exchangeIN2vk11CommandPoolES1_ET_RS2_OT0_>
   223c3:	c9                   	leave
   223c4:	c3                   	ret

00000000000223c5 <_ZSt4moveIRN2vk11CommandPoolEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   223c5:	55                   	push   %rbp
   223c6:	48 89 e5             	mov    %rsp,%rbp
   223c9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   223cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   223d1:	5d                   	pop    %rbp
   223d2:	c3                   	ret

00000000000223d3 <_ZSt7forwardIN2vk13CommandBufferEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   223d3:	55                   	push   %rbp
   223d4:	48 89 e5             	mov    %rsp,%rbp
   223d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   223db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   223df:	5d                   	pop    %rbp
   223e0:	c3                   	ret

00000000000223e1 <_ZSt8exchangeIN2vk13CommandBufferES1_ET_RS2_OT0_>:
    exchange(_Tp& __obj, _Up&& __new_val)
   223e1:	55                   	push   %rbp
   223e2:	48 89 e5             	mov    %rsp,%rbp
   223e5:	48 83 ec 10          	sub    $0x10,%rsp
   223e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   223ed:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   223f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   223f5:	48 89 c7             	mov    %rax,%rdi
   223f8:	e8 d6 ff ff ff       	call   223d3 <_ZSt7forwardIN2vk13CommandBufferEEOT_RNSt16remove_referenceIS2_E4typeE>
   223fd:	48 89 c2             	mov    %rax,%rdx
   22400:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22404:	48 89 d6             	mov    %rdx,%rsi
   22407:	48 89 c7             	mov    %rax,%rdi
   2240a:	e8 8c 07 00 00       	call   22b9b <_ZSt10__exchangeIN2vk13CommandBufferES1_ET_RS2_OT0_>
   2240f:	c9                   	leave
   22410:	c3                   	ret

0000000000022411 <_ZSt4moveIRN2vk13CommandBufferEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   22411:	55                   	push   %rbp
   22412:	48 89 e5             	mov    %rsp,%rbp
   22415:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   22419:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2241d:	5d                   	pop    %rbp
   2241e:	c3                   	ret
   2241f:	90                   	nop

0000000000022420 <_ZNSaIN2vk4raii13CommandBufferEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   22420:	55                   	push   %rbp
   22421:	48 89 e5             	mov    %rsp,%rbp
   22424:	48 83 ec 10          	sub    $0x10,%rsp
   22428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2242c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22430:	48 89 c7             	mov    %rax,%rdi
   22433:	e8 a2 07 00 00       	call   22bda <_ZNSt15__new_allocatorIN2vk4raii13CommandBufferEEC1Ev>
   22438:	90                   	nop
   22439:	c9                   	leave
   2243a:	c3                   	ret
   2243b:	90                   	nop

000000000002243c <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   2243c:	55                   	push   %rbp
   2243d:	48 89 e5             	mov    %rsp,%rbp
   22440:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   22444:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22448:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   2244f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22453:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   2245a:	00 
   2245b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2245f:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   22466:	00 
	{ }
   22467:	90                   	nop
   22468:	5d                   	pop    %rbp
   22469:	c3                   	ret

000000000002246a <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2246a:	55                   	push   %rbp
   2246b:	48 89 e5             	mov    %rsp,%rbp
   2246e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22472:	90                   	nop
   22473:	5d                   	pop    %rbp
   22474:	c3                   	ret

0000000000022475 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
   22475:	55                   	push   %rbp
   22476:	48 89 e5             	mov    %rsp,%rbp
   22479:	53                   	push   %rbx
   2247a:	48 83 ec 28          	sub    $0x28,%rsp
   2247e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   22482:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   22486:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   2248a:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   2248e:	48 89 d6             	mov    %rdx,%rsi
   22491:	48 89 c7             	mov    %rax,%rdi
   22494:	e8 a3 07 00 00       	call   22c3c <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>
   22499:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   2249d:	48 89 c7             	mov    %rax,%rdi
   224a0:	e8 54 07 00 00       	call   22bf9 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_S_max_sizeERKS2_>
   224a5:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   224a9:	0f 92 c3             	setb   %bl
   224ac:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   224b0:	48 89 c7             	mov    %rax,%rdi
   224b3:	e8 b6 fa ff ff       	call   21f6e <_ZNSaIP17VkCommandBuffer_TED1Ev>
   224b8:	84 db                	test   %bl,%bl
   224ba:	74 0f                	je     224cb <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
   224bc:	48 8d 05 45 d9 00 00 	lea    0xd945(%rip),%rax        # 2fe08 <_ZNSt8__detailL19__atomic_spin_countE+0x1cc>
   224c3:	48 89 c7             	mov    %rax,%rdi
   224c6:	e8 15 2c fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
   224cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
   224cf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   224d3:	c9                   	leave
   224d4:	c3                   	ret
   224d5:	90                   	nop

00000000000224d6 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   224d6:	55                   	push   %rbp
   224d7:	48 89 e5             	mov    %rsp,%rbp
   224da:	48 83 ec 10          	sub    $0x10,%rsp
   224de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   224e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   224e6:	48 89 c7             	mov    %rax,%rdi
   224e9:	e8 80 fa ff ff       	call   21f6e <_ZNSaIP17VkCommandBuffer_TED1Ev>
   224ee:	90                   	nop
   224ef:	c9                   	leave
   224f0:	c3                   	ret
   224f1:	90                   	nop

00000000000224f2 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
   224f2:	55                   	push   %rbp
   224f3:	48 89 e5             	mov    %rsp,%rbp
   224f6:	53                   	push   %rbx
   224f7:	48 83 ec 28          	sub    $0x28,%rsp
   224fb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   224ff:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   22503:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
   22507:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2250b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2250f:	48 89 d6             	mov    %rdx,%rsi
   22512:	48 89 c7             	mov    %rax,%rdi
   22515:	e8 48 07 00 00       	call   22c62 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
   2251a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2251e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22522:	48 89 d6             	mov    %rdx,%rsi
   22525:	48 89 c7             	mov    %rax,%rdi
   22528:	e8 67 07 00 00       	call   22c94 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_M_create_storageEm>
   2252d:	eb 1a                	jmp    22549 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_+0x57>
   2252f:	48 89 c3             	mov    %rax,%rbx
   22532:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22536:	48 89 c7             	mov    %rax,%rdi
   22539:	e8 98 ff ff ff       	call   224d6 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implD1Ev>
   2253e:	48 89 d8             	mov    %rbx,%rax
   22541:	48 89 c7             	mov    %rax,%rdi
   22544:	e8 57 2e fe ff       	call   53a0 <_Unwind_Resume@plt>
   22549:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   2254d:	c9                   	leave
   2254e:	c3                   	ret
   2254f:	90                   	nop

0000000000022550 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   22550:	55                   	push   %rbp
   22551:	48 89 e5             	mov    %rsp,%rbp
   22554:	48 83 ec 10          	sub    $0x10,%rsp
   22558:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   2255c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22560:	48 8b 50 10          	mov    0x10(%rax),%rdx
   22564:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22568:	48 8b 00             	mov    (%rax),%rax
   2256b:	48 29 c2             	sub    %rax,%rdx
   2256e:	48 89 d0             	mov    %rdx,%rax
   22571:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   22575:	48 89 c2             	mov    %rax,%rdx
   22578:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2257c:	48 8b 08             	mov    (%rax),%rcx
   2257f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22583:	48 89 ce             	mov    %rcx,%rsi
   22586:	48 89 c7             	mov    %rax,%rdi
   22589:	e8 5c 07 00 00       	call   22cea <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   2258e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22592:	48 89 c7             	mov    %rax,%rdi
   22595:	e8 3c ff ff ff       	call   224d6 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implD1Ev>
   2259a:	90                   	nop
   2259b:	c9                   	leave
   2259c:	c3                   	ret
   2259d:	90                   	nop

000000000002259e <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
   2259e:	55                   	push   %rbp
   2259f:	48 89 e5             	mov    %rsp,%rbp
   225a2:	48 83 ec 10          	sub    $0x10,%rsp
   225a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   225aa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
   225ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   225b2:	48 89 c7             	mov    %rax,%rdi
   225b5:	e8 24 00 00 00       	call   225de <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   225ba:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
   225bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   225c1:	48 8b 00             	mov    (%rax),%rax
   225c4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   225c8:	48 89 ce             	mov    %rcx,%rsi
   225cb:	48 89 c7             	mov    %rax,%rdi
   225ce:	e8 4c 07 00 00       	call   22d1f <_ZSt27__uninitialized_default_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
   225d3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   225d7:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   225db:	90                   	nop
   225dc:	c9                   	leave
   225dd:	c3                   	ret

00000000000225de <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   225de:	55                   	push   %rbp
   225df:	48 89 e5             	mov    %rsp,%rbp
   225e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   225e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   225ea:	5d                   	pop    %rbp
   225eb:	c3                   	ret

00000000000225ec <_ZSt8_DestroyIPP17VkCommandBuffer_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   225ec:	55                   	push   %rbp
   225ed:	48 89 e5             	mov    %rsp,%rbp
   225f0:	48 83 ec 20          	sub    $0x20,%rsp
   225f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   225f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   225fc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   22600:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   22604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22608:	48 89 d6             	mov    %rdx,%rsi
   2260b:	48 89 c7             	mov    %rax,%rdi
   2260e:	e8 35 07 00 00       	call   22d48 <_ZSt8_DestroyIPP17VkCommandBuffer_TEvT_S3_>
    }
   22613:	90                   	nop
   22614:	c9                   	leave
   22615:	c3                   	ret

0000000000022616 <_ZNKSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   22616:	55                   	push   %rbp
   22617:	48 89 e5             	mov    %rsp,%rbp
   2261a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2261e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   22622:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22626:	5d                   	pop    %rbp
   22627:	c3                   	ret

0000000000022628 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   22628:	55                   	push   %rbp
   22629:	48 89 e5             	mov    %rsp,%rbp
   2262c:	48 83 ec 10          	sub    $0x10,%rsp
   22630:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   22634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22638:	48 89 c7             	mov    %rax,%rdi
   2263b:	e8 a2 07 00 00       	call   22de2 <_ZNKSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE19_M_get_Tp_allocatorEv>
   22640:	48 89 c7             	mov    %rax,%rdi
   22643:	e8 57 07 00 00       	call   22d9f <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE11_S_max_sizeERKS3_>
   22648:	c9                   	leave
   22649:	c3                   	ret

000000000002264a <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
   2264a:	55                   	push   %rbp
   2264b:	48 89 e5             	mov    %rsp,%rbp
   2264e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_end_of_storage
   22652:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22656:	48 8b 50 10          	mov    0x10(%rax),%rdx
			 - this->_M_impl._M_start); }
   2265a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2265e:	48 8b 00             	mov    (%rax),%rax
   22661:	48 29 c2             	sub    %rax,%rdx
   22664:	48 89 d0             	mov    %rdx,%rax
   22667:	48 c1 f8 05          	sar    $0x5,%rax
   2266b:	5d                   	pop    %rbp
   2266c:	c3                   	ret
   2266d:	90                   	nop

000000000002266e <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   2266e:	55                   	push   %rbp
   2266f:	48 89 e5             	mov    %rsp,%rbp
   22672:	48 83 ec 10          	sub    $0x10,%rsp
   22676:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2267a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2267e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   22683:	74 15                	je     2269a <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE11_M_allocateEm+0x2c>
   22685:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22689:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2268d:	48 89 d6             	mov    %rdx,%rsi
   22690:	48 89 c7             	mov    %rax,%rdi
   22693:	e8 58 07 00 00       	call   22df0 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE8allocateERS3_m>
   22698:	eb 05                	jmp    2269f <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE11_M_allocateEm+0x31>
   2269a:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   2269f:	c9                   	leave
   226a0:	c3                   	ret

00000000000226a1 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   226a1:	55                   	push   %rbp
   226a2:	48 89 e5             	mov    %rsp,%rbp
   226a5:	48 83 ec 20          	sub    $0x20,%rsp
   226a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   226ad:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   226b1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   226b5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   226b9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   226bd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   226c1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   226c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   226c9:	48 89 c7             	mov    %rax,%rdi
   226cc:	e8 a5 07 00 00       	call   22e76 <_ZSt12__relocate_aIPN2vk4raii13CommandBufferES3_SaIS2_EET0_T_S6_S5_RT1_>
      }
   226d1:	c9                   	leave
   226d2:	c3                   	ret
   226d3:	90                   	nop

00000000000226d4 <_ZN9__gnu_cxx17__normal_iteratorIPP17VkCommandBuffer_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   226d4:	55                   	push   %rbp
   226d5:	48 89 e5             	mov    %rsp,%rbp
   226d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   226dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   226e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   226e4:	48 8b 10             	mov    (%rax),%rdx
   226e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   226eb:	48 89 10             	mov    %rdx,(%rax)
   226ee:	90                   	nop
   226ef:	5d                   	pop    %rbp
   226f0:	c3                   	ret

00000000000226f1 <_ZSt7forwardIRKN2vk4raii6DeviceEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   226f1:	55                   	push   %rbp
   226f2:	48 89 e5             	mov    %rsp,%rbp
   226f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   226f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   226fd:	5d                   	pop    %rbp
   226fe:	c3                   	ret

00000000000226ff <_ZSt7forwardIRKP17VkCommandBuffer_TEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   226ff:	55                   	push   %rbp
   22700:	48 89 e5             	mov    %rsp,%rbp
   22703:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   22707:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2270b:	5d                   	pop    %rbp
   2270c:	c3                   	ret

000000000002270d <_ZSt7forwardIP15VkCommandPool_TEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   2270d:	55                   	push   %rbp
   2270e:	48 89 e5             	mov    %rsp,%rbp
   22711:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   22715:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22719:	5d                   	pop    %rbp
   2271a:	c3                   	ret

000000000002271b <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE9constructIS2_JRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   2271b:	55                   	push   %rbp
   2271c:	48 89 e5             	mov    %rsp,%rbp
   2271f:	41 54                	push   %r12
   22721:	53                   	push   %rbx
   22722:	48 83 ec 30          	sub    $0x30,%rsp
   22726:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2272a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2272e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   22732:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   22736:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   2273a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2273e:	48 89 c7             	mov    %rax,%rdi
   22741:	e8 c7 ff ff ff       	call   2270d <_ZSt7forwardIP15VkCommandPool_TEOT_RNSt16remove_referenceIS2_E4typeE>
   22746:	49 89 c4             	mov    %rax,%r12
   22749:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2274d:	48 89 c7             	mov    %rax,%rdi
   22750:	e8 aa ff ff ff       	call   226ff <_ZSt7forwardIRKP17VkCommandBuffer_TEOT_RNSt16remove_referenceIS4_E4typeE>
   22755:	48 89 c3             	mov    %rax,%rbx
   22758:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2275c:	48 89 c7             	mov    %rax,%rdi
   2275f:	e8 8d ff ff ff       	call   226f1 <_ZSt7forwardIRKN2vk4raii6DeviceEEOT_RNSt16remove_referenceIS5_E4typeE>
   22764:	48 89 c6             	mov    %rax,%rsi
   22767:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2276b:	4c 89 e1             	mov    %r12,%rcx
   2276e:	48 89 da             	mov    %rbx,%rdx
   22771:	48 89 c7             	mov    %rax,%rdi
   22774:	e8 60 07 00 00       	call   22ed9 <_ZSt12construct_atIN2vk4raii13CommandBufferEJRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
   22779:	90                   	nop
   2277a:	48 83 c4 30          	add    $0x30,%rsp
   2277e:	5b                   	pop    %rbx
   2277f:	41 5c                	pop    %r12
   22781:	5d                   	pop    %rbp
   22782:	c3                   	ret
   22783:	90                   	nop

0000000000022784 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   22784:	55                   	push   %rbp
   22785:	48 89 e5             	mov    %rsp,%rbp
   22788:	48 83 ec 20          	sub    $0x20,%rsp
   2278c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   22790:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22794:	48 8d 50 08          	lea    0x8(%rax),%rdx
   22798:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   2279c:	48 89 d6             	mov    %rdx,%rsi
   2279f:	48 89 c7             	mov    %rax,%rdi
   227a2:	e8 ad 07 00 00       	call   22f54 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   227a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   227ab:	c9                   	leave
   227ac:	c3                   	ret
   227ad:	90                   	nop

00000000000227ae <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   227ae:	55                   	push   %rbp
   227af:	48 89 e5             	mov    %rsp,%rbp
   227b2:	53                   	push   %rbx
   227b3:	48 83 ec 38          	sub    $0x38,%rsp
   227b7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   227bb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   227bf:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   227c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   227c7:	48 89 c7             	mov    %rax,%rdi
   227ca:	e8 59 fe ff ff       	call   22628 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE8max_sizeEv>
   227cf:	48 89 c3             	mov    %rax,%rbx
   227d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   227d6:	48 89 c7             	mov    %rax,%rdi
   227d9:	e8 7a f8 ff ff       	call   22058 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE4sizeEv>
   227de:	48 29 c3             	sub    %rax,%rbx
   227e1:	48 89 da             	mov    %rbx,%rdx
   227e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   227e8:	48 39 c2             	cmp    %rax,%rdx
   227eb:	0f 92 c0             	setb   %al
   227ee:	84 c0                	test   %al,%al
   227f0:	74 0c                	je     227fe <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   227f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   227f6:	48 89 c7             	mov    %rax,%rdi
   227f9:	e8 e2 28 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   227fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22802:	48 89 c7             	mov    %rax,%rdi
   22805:	e8 4e f8 ff ff       	call   22058 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE4sizeEv>
   2280a:	48 89 c3             	mov    %rax,%rbx
   2280d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22811:	48 89 c7             	mov    %rax,%rdi
   22814:	e8 3f f8 ff ff       	call   22058 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE4sizeEv>
   22819:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2281d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   22821:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   22825:	48 89 d6             	mov    %rdx,%rsi
   22828:	48 89 c7             	mov    %rax,%rdi
   2282b:	e8 ac 60 ff ff       	call   188dc <_ZSt3maxImERKT_S2_S2_>
   22830:	48 8b 00             	mov    (%rax),%rax
   22833:	48 01 d8             	add    %rbx,%rax
   22836:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2283a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2283e:	48 89 c7             	mov    %rax,%rdi
   22841:	e8 12 f8 ff ff       	call   22058 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE4sizeEv>
   22846:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   2284a:	72 12                	jb     2285e <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12_M_check_lenEmPKc+0xb0>
   2284c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22850:	48 89 c7             	mov    %rax,%rdi
   22853:	e8 d0 fd ff ff       	call   22628 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE8max_sizeEv>
   22858:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   2285c:	73 0e                	jae    2286c <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12_M_check_lenEmPKc+0xbe>
   2285e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22862:	48 89 c7             	mov    %rax,%rdi
   22865:	e8 be fd ff ff       	call   22628 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE8max_sizeEv>
   2286a:	eb 04                	jmp    22870 <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12_M_check_lenEmPKc+0xc2>
   2286c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   22870:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   22874:	c9                   	leave
   22875:	c3                   	ret

0000000000022876 <_ZN9__gnu_cxxmiIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
   22876:	55                   	push   %rbp
   22877:	48 89 e5             	mov    %rsp,%rbp
   2287a:	53                   	push   %rbx
   2287b:	48 83 ec 18          	sub    $0x18,%rsp
   2287f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22883:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() - __rhs.base(); }
   22887:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2288b:	48 89 c7             	mov    %rax,%rdi
   2288e:	e8 df 06 00 00       	call   22f72 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEE4baseEv>
   22893:	48 8b 18             	mov    (%rax),%rbx
   22896:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2289a:	48 89 c7             	mov    %rax,%rdi
   2289d:	e8 d0 06 00 00       	call   22f72 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEE4baseEv>
   228a2:	48 8b 00             	mov    (%rax),%rax
   228a5:	48 89 da             	mov    %rbx,%rdx
   228a8:	48 29 c2             	sub    %rax,%rdx
   228ab:	48 89 d0             	mov    %rdx,%rax
   228ae:	48 c1 f8 05          	sar    $0x5,%rax
   228b2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   228b6:	c9                   	leave
   228b7:	c3                   	ret

00000000000228b8 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   228b8:	55                   	push   %rbp
   228b9:	48 89 e5             	mov    %rsp,%rbp
   228bc:	48 83 ec 20          	sub    $0x20,%rsp
   228c0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   228c4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   228c8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   228cc:	48 89 d6             	mov    %rdx,%rsi
   228cf:	48 89 c7             	mov    %rax,%rdi
   228d2:	e8 7d 06 00 00       	call   22f54 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   228d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   228db:	c9                   	leave
   228dc:	c3                   	ret
   228dd:	90                   	nop

00000000000228de <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE17_M_realloc_insertIJRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   228de:	55                   	push   %rbp
   228df:	48 89 e5             	mov    %rsp,%rbp
   228e2:	41 54                	push   %r12
   228e4:	53                   	push   %rbx
   228e5:	48 83 ec 70          	sub    $0x70,%rsp
   228e9:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   228ed:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   228f1:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   228f5:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
   228f9:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   228fd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   22901:	48 8d 15 31 d5 00 00 	lea    0xd531(%rip),%rdx        # 2fe39 <_ZNSt8__detailL19__atomic_spin_countE+0x1fd>
   22908:	be 01 00 00 00       	mov    $0x1,%esi
   2290d:	48 89 c7             	mov    %rax,%rdi
   22910:	e8 99 fe ff ff       	call   227ae <_ZNKSt6vectorIN2vk4raii13CommandBufferESaIS2_EE12_M_check_lenEmPKc>
   22915:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __old_start = this->_M_impl._M_start;
   22919:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2291d:	48 8b 00             	mov    (%rax),%rax
   22920:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pointer __old_finish = this->_M_impl._M_finish;
   22924:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   22928:	48 8b 40 08          	mov    0x8(%rax),%rax
   2292c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      const size_type __elems_before = __position - begin();
   22930:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   22934:	48 89 c7             	mov    %rax,%rdi
   22937:	e8 7c ff ff ff       	call   228b8 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE5beginEv>
   2293c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   22940:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   22944:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   22948:	48 89 d6             	mov    %rdx,%rsi
   2294b:	48 89 c7             	mov    %rax,%rdi
   2294e:	e8 23 ff ff ff       	call   22876 <_ZN9__gnu_cxxmiIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
   22953:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_start(this->_M_allocate(__len));
   22957:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2295b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2295f:	48 89 d6             	mov    %rdx,%rsi
   22962:	48 89 c7             	mov    %rax,%rdi
   22965:	e8 04 fd ff ff       	call   2266e <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE11_M_allocateEm>
   2296a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      pointer __new_finish(__new_start);
   2296e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   22972:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
   22976:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   2297a:	48 89 c7             	mov    %rax,%rdi
   2297d:	e8 8b fd ff ff       	call   2270d <_ZSt7forwardIP15VkCommandPool_TEOT_RNSt16remove_referenceIS2_E4typeE>
   22982:	49 89 c4             	mov    %rax,%r12
   22985:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   22989:	48 89 c7             	mov    %rax,%rdi
   2298c:	e8 6e fd ff ff       	call   226ff <_ZSt7forwardIRKP17VkCommandBuffer_TEOT_RNSt16remove_referenceIS4_E4typeE>
   22991:	48 89 c3             	mov    %rax,%rbx
   22994:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   22998:	48 89 c7             	mov    %rax,%rdi
   2299b:	e8 51 fd ff ff       	call   226f1 <_ZSt7forwardIRKN2vk4raii6DeviceEEOT_RNSt16remove_referenceIS5_E4typeE>
   229a0:	48 89 c2             	mov    %rax,%rdx
				   __new_start + __elems_before,
   229a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   229a7:	48 c1 e0 05          	shl    $0x5,%rax
   229ab:	48 89 c1             	mov    %rax,%rcx
	  _Alloc_traits::construct(this->_M_impl,
   229ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   229b2:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
   229b6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   229ba:	4d 89 e0             	mov    %r12,%r8
   229bd:	48 89 d9             	mov    %rbx,%rcx
   229c0:	48 89 c7             	mov    %rax,%rdi
   229c3:	e8 53 fd ff ff       	call   2271b <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE9constructIS2_JRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
   229c8:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   229cf:	00 
					 __new_start, _M_get_Tp_allocator());
   229d0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   229d4:	48 89 c7             	mov    %rax,%rdi
   229d7:	e8 fc 85 fe ff       	call   afd8 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE19_M_get_Tp_allocatorEv>
   229dc:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__old_start, __position.base(),
   229df:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   229e3:	48 89 c7             	mov    %rax,%rdi
   229e6:	e8 87 05 00 00       	call   22f72 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEE4baseEv>
   229eb:	48 8b 30             	mov    (%rax),%rsi
   229ee:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   229f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   229f6:	48 89 d9             	mov    %rbx,%rcx
   229f9:	48 89 c7             	mov    %rax,%rdi
   229fc:	e8 a0 fc ff ff       	call   226a1 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
   22a01:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	      ++__new_finish;
   22a05:	48 83 45 c0 20       	addq   $0x20,-0x40(%rbp)
					 __new_finish, _M_get_Tp_allocator());
   22a0a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   22a0e:	48 89 c7             	mov    %rax,%rdi
   22a11:	e8 c2 85 fe ff       	call   afd8 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE19_M_get_Tp_allocatorEv>
   22a16:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__position.base(), __old_finish,
   22a19:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   22a1d:	48 89 c7             	mov    %rax,%rdi
   22a20:	e8 4d 05 00 00       	call   22f72 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEE4baseEv>
   22a25:	48 8b 00             	mov    (%rax),%rax
   22a28:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   22a2c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   22a30:	48 89 d9             	mov    %rbx,%rcx
   22a33:	48 89 c7             	mov    %rax,%rdi
   22a36:	e8 66 fc ff ff       	call   226a1 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
   22a3b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _M_deallocate(__old_start,
   22a3f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
		    this->_M_impl._M_end_of_storage - __old_start);
   22a43:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   22a47:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   22a4b:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
   22a4f:	48 c1 fa 05          	sar    $0x5,%rdx
      _M_deallocate(__old_start,
   22a53:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   22a57:	48 89 ce             	mov    %rcx,%rsi
   22a5a:	48 89 c7             	mov    %rax,%rdi
   22a5d:	e8 40 85 fe ff       	call   afa2 <_ZNSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE13_M_deallocateEPS2_m>
      this->_M_impl._M_start = __new_start;
   22a62:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   22a66:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   22a6a:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
   22a6d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   22a71:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   22a75:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   22a79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22a7d:	48 c1 e0 05          	shl    $0x5,%rax
   22a81:	48 89 c2             	mov    %rax,%rdx
   22a84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   22a88:	48 01 c2             	add    %rax,%rdx
   22a8b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   22a8f:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   22a93:	90                   	nop
   22a94:	48 83 c4 70          	add    $0x70,%rsp
   22a98:	5b                   	pop    %rbx
   22a99:	41 5c                	pop    %r12
   22a9b:	5d                   	pop    %rbp
   22a9c:	c3                   	ret
   22a9d:	90                   	nop

0000000000022a9e <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
   22a9e:	55                   	push   %rbp
   22a9f:	48 89 e5             	mov    %rsp,%rbp
   22aa2:	48 83 ec 20          	sub    $0x20,%rsp
   22aa6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
   22aaa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22aae:	48 89 c7             	mov    %rax,%rdi
   22ab1:	e8 ce fc ff ff       	call   22784 <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE3endEv>
   22ab6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   22aba:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   22abe:	be 01 00 00 00       	mov    $0x1,%esi
   22ac3:	48 89 c7             	mov    %rax,%rdi
   22ac6:	e8 d5 04 00 00       	call   22fa0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEmiEl>
   22acb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22acf:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   22ad3:	48 89 c7             	mov    %rax,%rdi
   22ad6:	e8 07 05 00 00       	call   22fe2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEdeEv>
      }
   22adb:	c9                   	leave
   22adc:	c3                   	ret

0000000000022add <_ZSt10__exchangeIN2vk6DeviceES1_ET_RS2_OT0_>:
    __exchange(_Tp& __obj, _Up&& __new_val)
   22add:	55                   	push   %rbp
   22ade:	48 89 e5             	mov    %rsp,%rbp
   22ae1:	48 83 ec 20          	sub    $0x20,%rsp
   22ae5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22ae9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      _Tp __old_val = std::move(__obj);
   22aed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22af1:	48 89 c7             	mov    %rax,%rdi
   22af4:	e8 42 f8 ff ff       	call   2233b <_ZSt4moveIRN2vk6DeviceEEONSt16remove_referenceIT_E4typeEOS4_>
   22af9:	48 8b 00             	mov    (%rax),%rax
   22afc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   22b00:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22b04:	48 89 c7             	mov    %rax,%rdi
   22b07:	e8 f1 f7 ff ff       	call   222fd <_ZSt7forwardIN2vk6DeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   22b0c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   22b10:	48 8b 00             	mov    (%rax),%rax
   22b13:	48 89 02             	mov    %rax,(%rdx)
      return __old_val;
   22b16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   22b1a:	c9                   	leave
   22b1b:	c3                   	ret

0000000000022b1c <_ZSt10__exchangeIPKN2vk4raii16DeviceDispatcherEDnET_RS5_OT0_>:
    __exchange(_Tp& __obj, _Up&& __new_val)
   22b1c:	55                   	push   %rbp
   22b1d:	48 89 e5             	mov    %rsp,%rbp
   22b20:	48 83 ec 20          	sub    $0x20,%rsp
   22b24:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22b28:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      _Tp __old_val = std::move(__obj);
   22b2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22b30:	48 89 c7             	mov    %rax,%rdi
   22b33:	e8 41 f8 ff ff       	call   22379 <_ZSt4moveIRPKN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS7_>
   22b38:	48 8b 00             	mov    (%rax),%rax
   22b3b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   22b3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22b43:	48 89 c7             	mov    %rax,%rdi
   22b46:	e8 10 5c ff ff       	call   1875b <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   22b4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22b4f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return __old_val;
   22b56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   22b5a:	c9                   	leave
   22b5b:	c3                   	ret

0000000000022b5c <_ZSt10__exchangeIN2vk11CommandPoolES1_ET_RS2_OT0_>:
    __exchange(_Tp& __obj, _Up&& __new_val)
   22b5c:	55                   	push   %rbp
   22b5d:	48 89 e5             	mov    %rsp,%rbp
   22b60:	48 83 ec 20          	sub    $0x20,%rsp
   22b64:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22b68:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      _Tp __old_val = std::move(__obj);
   22b6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22b70:	48 89 c7             	mov    %rax,%rdi
   22b73:	e8 4d f8 ff ff       	call   223c5 <_ZSt4moveIRN2vk11CommandPoolEEONSt16remove_referenceIT_E4typeEOS4_>
   22b78:	48 8b 00             	mov    (%rax),%rax
   22b7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   22b7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22b83:	48 89 c7             	mov    %rax,%rdi
   22b86:	e8 fc f7 ff ff       	call   22387 <_ZSt7forwardIN2vk11CommandPoolEEOT_RNSt16remove_referenceIS2_E4typeE>
   22b8b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   22b8f:	48 8b 00             	mov    (%rax),%rax
   22b92:	48 89 02             	mov    %rax,(%rdx)
      return __old_val;
   22b95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   22b99:	c9                   	leave
   22b9a:	c3                   	ret

0000000000022b9b <_ZSt10__exchangeIN2vk13CommandBufferES1_ET_RS2_OT0_>:
    __exchange(_Tp& __obj, _Up&& __new_val)
   22b9b:	55                   	push   %rbp
   22b9c:	48 89 e5             	mov    %rsp,%rbp
   22b9f:	48 83 ec 20          	sub    $0x20,%rsp
   22ba3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22ba7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      _Tp __old_val = std::move(__obj);
   22bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22baf:	48 89 c7             	mov    %rax,%rdi
   22bb2:	e8 5a f8 ff ff       	call   22411 <_ZSt4moveIRN2vk13CommandBufferEEONSt16remove_referenceIT_E4typeEOS4_>
   22bb7:	48 8b 00             	mov    (%rax),%rax
   22bba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   22bbe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22bc2:	48 89 c7             	mov    %rax,%rdi
   22bc5:	e8 09 f8 ff ff       	call   223d3 <_ZSt7forwardIN2vk13CommandBufferEEOT_RNSt16remove_referenceIS2_E4typeE>
   22bca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   22bce:	48 8b 00             	mov    (%rax),%rax
   22bd1:	48 89 02             	mov    %rax,(%rdx)
      return __old_val;
   22bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   22bd8:	c9                   	leave
   22bd9:	c3                   	ret

0000000000022bda <_ZNSt15__new_allocatorIN2vk4raii13CommandBufferEEC1Ev>:
   22bda:	55                   	push   %rbp
   22bdb:	48 89 e5             	mov    %rsp,%rbp
   22bde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22be2:	90                   	nop
   22be3:	5d                   	pop    %rbp
   22be4:	c3                   	ret

0000000000022be5 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   22be5:	55                   	push   %rbp
   22be6:	48 89 e5             	mov    %rsp,%rbp
   22be9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   22bed:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   22bf4:	ff ff 1f 
      }
   22bf7:	5d                   	pop    %rbp
   22bf8:	c3                   	ret

0000000000022bf9 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   22bf9:	55                   	push   %rbp
   22bfa:	48 89 e5             	mov    %rsp,%rbp
   22bfd:	48 83 ec 20          	sub    $0x20,%rsp
   22c01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   22c05:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   22c0c:	ff ff 0f 
   22c0f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   22c13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22c17:	48 89 c7             	mov    %rax,%rdi
   22c1a:	e8 c6 ff ff ff       	call   22be5 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8max_sizeERKS2_>
   22c1f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   22c23:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   22c27:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   22c2b:	48 89 d6             	mov    %rdx,%rsi
   22c2e:	48 89 c7             	mov    %rax,%rdi
   22c31:	e8 2c 45 ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   22c36:	48 8b 00             	mov    (%rax),%rax
      }
   22c39:	c9                   	leave
   22c3a:	c3                   	ret
   22c3b:	90                   	nop

0000000000022c3c <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   22c3c:	55                   	push   %rbp
   22c3d:	48 89 e5             	mov    %rsp,%rbp
   22c40:	48 83 ec 10          	sub    $0x10,%rsp
   22c44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22c48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   22c4c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   22c50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22c54:	48 89 d6             	mov    %rdx,%rsi
   22c57:	48 89 c7             	mov    %rax,%rdi
   22c5a:	e8 95 03 00 00       	call   22ff4 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1ERKS2_>
   22c5f:	90                   	nop
   22c60:	c9                   	leave
   22c61:	c3                   	ret

0000000000022c62 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   22c62:	55                   	push   %rbp
   22c63:	48 89 e5             	mov    %rsp,%rbp
   22c66:	48 83 ec 10          	sub    $0x10,%rsp
   22c6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22c6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   22c72:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   22c76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22c7a:	48 89 d6             	mov    %rdx,%rsi
   22c7d:	48 89 c7             	mov    %rax,%rdi
   22c80:	e8 b7 ff ff ff       	call   22c3c <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>
   22c85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22c89:	48 89 c7             	mov    %rax,%rdi
   22c8c:	e8 73 03 00 00       	call   23004 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   22c91:	90                   	nop
   22c92:	c9                   	leave
   22c93:	c3                   	ret

0000000000022c94 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
   22c94:	55                   	push   %rbp
   22c95:	48 89 e5             	mov    %rsp,%rbp
   22c98:	48 83 ec 10          	sub    $0x10,%rsp
   22c9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22ca0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
   22ca4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   22ca8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22cac:	48 89 d6             	mov    %rdx,%rsi
   22caf:	48 89 c7             	mov    %rax,%rdi
   22cb2:	e8 7b 03 00 00       	call   23032 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm>
   22cb7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   22cbb:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   22cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22cc2:	48 8b 10             	mov    (%rax),%rdx
   22cc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22cc9:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   22ccd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22cd1:	48 8b 00             	mov    (%rax),%rax
   22cd4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   22cd8:	48 c1 e2 03          	shl    $0x3,%rdx
   22cdc:	48 01 c2             	add    %rax,%rdx
   22cdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22ce3:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
   22ce7:	90                   	nop
   22ce8:	c9                   	leave
   22ce9:	c3                   	ret

0000000000022cea <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   22cea:	55                   	push   %rbp
   22ceb:	48 89 e5             	mov    %rsp,%rbp
   22cee:	48 83 ec 20          	sub    $0x20,%rsp
   22cf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22cf6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   22cfa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   22cfe:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   22d03:	74 17                	je     22d1c <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   22d05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22d09:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   22d0d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   22d11:	48 89 ce             	mov    %rcx,%rsi
   22d14:	48 89 c7             	mov    %rax,%rdi
   22d17:	e8 49 03 00 00       	call   23065 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE10deallocateERS2_PS1_m>
      }
   22d1c:	90                   	nop
   22d1d:	c9                   	leave
   22d1e:	c3                   	ret

0000000000022d1f <_ZSt27__uninitialized_default_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   22d1f:	55                   	push   %rbp
   22d20:	48 89 e5             	mov    %rsp,%rbp
   22d23:	48 83 ec 20          	sub    $0x20,%rsp
   22d27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22d2b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   22d2f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   22d33:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   22d37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22d3b:	48 89 d6             	mov    %rdx,%rsi
   22d3e:	48 89 c7             	mov    %rax,%rdi
   22d41:	e8 7d 03 00 00       	call   230c3 <_ZSt25__uninitialized_default_nIPP17VkCommandBuffer_TmET_S3_T0_>
   22d46:	c9                   	leave
   22d47:	c3                   	ret

0000000000022d48 <_ZSt8_DestroyIPP17VkCommandBuffer_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   22d48:	55                   	push   %rbp
   22d49:	48 89 e5             	mov    %rsp,%rbp
   22d4c:	48 83 ec 10          	sub    $0x10,%rsp
   22d50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22d54:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   22d58:	e8 41 34 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   22d5d:	84 c0                	test   %al,%al
   22d5f:	74 15                	je     22d76 <_ZSt8_DestroyIPP17VkCommandBuffer_TEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   22d61:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   22d65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22d69:	48 89 d6             	mov    %rdx,%rsi
   22d6c:	48 89 c7             	mov    %rax,%rdi
   22d6f:	e8 78 03 00 00       	call   230ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_>
   22d74:	eb 13                	jmp    22d89 <_ZSt8_DestroyIPP17VkCommandBuffer_TEvT_S3_+0x41>
	__destroy(__first, __last);
   22d76:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   22d7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22d7e:	48 89 d6             	mov    %rdx,%rsi
   22d81:	48 89 c7             	mov    %rax,%rdi
   22d84:	e8 9c 03 00 00       	call   23125 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_>
    }
   22d89:	c9                   	leave
   22d8a:	c3                   	ret

0000000000022d8b <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   22d8b:	55                   	push   %rbp
   22d8c:	48 89 e5             	mov    %rsp,%rbp
   22d8f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   22d93:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
   22d9a:	ff ff 07 
      }
   22d9d:	5d                   	pop    %rbp
   22d9e:	c3                   	ret

0000000000022d9f <_ZNSt6vectorIN2vk4raii13CommandBufferESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   22d9f:	55                   	push   %rbp
   22da0:	48 89 e5             	mov    %rsp,%rbp
   22da3:	48 83 ec 20          	sub    $0x20,%rsp
   22da7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   22dab:	48 b8 ff ff ff ff ff 	movabs $0x3ffffffffffffff,%rax
   22db2:	ff ff 03 
   22db5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   22db9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22dbd:	48 89 c7             	mov    %rax,%rdi
   22dc0:	e8 c6 ff ff ff       	call   22d8b <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE8max_sizeERKS3_>
   22dc5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   22dc9:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   22dcd:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   22dd1:	48 89 d6             	mov    %rdx,%rsi
   22dd4:	48 89 c7             	mov    %rax,%rdi
   22dd7:	e8 86 43 ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   22ddc:	48 8b 00             	mov    (%rax),%rax
      }
   22ddf:	c9                   	leave
   22de0:	c3                   	ret
   22de1:	90                   	nop

0000000000022de2 <_ZNKSt12_Vector_baseIN2vk4raii13CommandBufferESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   22de2:	55                   	push   %rbp
   22de3:	48 89 e5             	mov    %rsp,%rbp
   22de6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   22dea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22dee:	5d                   	pop    %rbp
   22def:	c3                   	ret

0000000000022df0 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE8allocateERS3_m>:
      allocate(allocator_type& __a, size_type __n)
   22df0:	55                   	push   %rbp
   22df1:	48 89 e5             	mov    %rsp,%rbp
   22df4:	48 83 ec 20          	sub    $0x20,%rsp
   22df8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22dfc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   22e00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22e04:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   22e08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22e0c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   22e10:	e8 89 33 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   22e15:	84 c0                	test   %al,%al
   22e17:	74 42                	je     22e5b <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE8allocateERS3_m+0x6b>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   22e19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22e1d:	b9 00 00 00 00       	mov    $0x0,%ecx
   22e22:	48 89 c2             	mov    %rax,%rdx
   22e25:	48 c1 e2 05          	shl    $0x5,%rdx
   22e29:	48 c1 e8 3b          	shr    $0x3b,%rax
   22e2d:	48 85 c0             	test   %rax,%rax
   22e30:	74 05                	je     22e37 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE8allocateERS3_m+0x47>
   22e32:	b9 01 00 00 00       	mov    $0x1,%ecx
   22e37:	48 89 d0             	mov    %rdx,%rax
   22e3a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22e3e:	48 89 c8             	mov    %rcx,%rax
   22e41:	83 e0 01             	and    $0x1,%eax
   22e44:	84 c0                	test   %al,%al
   22e46:	74 05                	je     22e4d <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE8allocateERS3_m+0x5d>
	      std::__throw_bad_array_new_length();
   22e48:	e8 33 23 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   22e4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22e51:	48 89 c7             	mov    %rax,%rdi
   22e54:	e8 c7 23 fe ff       	call   5220 <_Znwm@plt>
   22e59:	eb 19                	jmp    22e74 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE8allocateERS3_m+0x84>
	return __allocator_base<_Tp>::allocate(__n, 0);
   22e5b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   22e5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22e63:	ba 00 00 00 00       	mov    $0x0,%edx
   22e68:	48 89 ce             	mov    %rcx,%rsi
   22e6b:	48 89 c7             	mov    %rax,%rdi
   22e6e:	e8 4d 04 00 00       	call   232c0 <_ZNSt15__new_allocatorIN2vk4raii13CommandBufferEE8allocateEmPKv>
   22e73:	90                   	nop
      { return __a.allocate(__n); }
   22e74:	c9                   	leave
   22e75:	c3                   	ret

0000000000022e76 <_ZSt12__relocate_aIPN2vk4raii13CommandBufferES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   22e76:	55                   	push   %rbp
   22e77:	48 89 e5             	mov    %rsp,%rbp
   22e7a:	41 54                	push   %r12
   22e7c:	53                   	push   %rbx
   22e7d:	48 83 ec 20          	sub    $0x20,%rsp
   22e81:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22e85:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   22e89:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   22e8d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   22e91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22e95:	48 89 c7             	mov    %rax,%rdi
   22e98:	e8 97 02 00 00       	call   23134 <_ZSt12__niter_baseIPN2vk4raii13CommandBufferEET_S4_>
   22e9d:	49 89 c4             	mov    %rax,%r12
   22ea0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22ea4:	48 89 c7             	mov    %rax,%rdi
   22ea7:	e8 88 02 00 00       	call   23134 <_ZSt12__niter_baseIPN2vk4raii13CommandBufferEET_S4_>
   22eac:	48 89 c3             	mov    %rax,%rbx
   22eaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22eb3:	48 89 c7             	mov    %rax,%rdi
   22eb6:	e8 79 02 00 00       	call   23134 <_ZSt12__niter_baseIPN2vk4raii13CommandBufferEET_S4_>
   22ebb:	48 89 c7             	mov    %rax,%rdi
   22ebe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   22ec2:	48 89 c1             	mov    %rax,%rcx
   22ec5:	4c 89 e2             	mov    %r12,%rdx
   22ec8:	48 89 de             	mov    %rbx,%rsi
   22ecb:	e8 72 02 00 00       	call   23142 <_ZSt14__relocate_a_1IPN2vk4raii13CommandBufferES3_SaIS2_EET0_T_S6_S5_RT1_>
    }
   22ed0:	48 83 c4 20          	add    $0x20,%rsp
   22ed4:	5b                   	pop    %rbx
   22ed5:	41 5c                	pop    %r12
   22ed7:	5d                   	pop    %rbp
   22ed8:	c3                   	ret

0000000000022ed9 <_ZSt12construct_atIN2vk4raii13CommandBufferEJRKNS1_6DeviceERKP17VkCommandBuffer_TP15VkCommandPool_TEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
   22ed9:	55                   	push   %rbp
   22eda:	48 89 e5             	mov    %rsp,%rbp
   22edd:	41 55                	push   %r13
   22edf:	41 54                	push   %r12
   22ee1:	53                   	push   %rbx
   22ee2:	48 83 ec 28          	sub    $0x28,%rsp
   22ee6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   22eea:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   22eee:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   22ef2:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   22ef6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22efa:	48 89 c6             	mov    %rax,%rsi
   22efd:	bf 20 00 00 00       	mov    $0x20,%edi
   22f02:	e8 ad 32 fe ff       	call   61b4 <_ZnwmPv>
   22f07:	48 89 c3             	mov    %rax,%rbx
   22f0a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   22f0e:	48 89 c7             	mov    %rax,%rdi
   22f11:	e8 f7 f7 ff ff       	call   2270d <_ZSt7forwardIP15VkCommandPool_TEOT_RNSt16remove_referenceIS2_E4typeE>
   22f16:	4c 8b 28             	mov    (%rax),%r13
   22f19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   22f1d:	48 89 c7             	mov    %rax,%rdi
   22f20:	e8 da f7 ff ff       	call   226ff <_ZSt7forwardIRKP17VkCommandBuffer_TEOT_RNSt16remove_referenceIS4_E4typeE>
   22f25:	4c 8b 20             	mov    (%rax),%r12
   22f28:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   22f2c:	48 89 c7             	mov    %rax,%rdi
   22f2f:	e8 bd f7 ff ff       	call   226f1 <_ZSt7forwardIRKN2vk4raii6DeviceEEOT_RNSt16remove_referenceIS5_E4typeE>
   22f34:	4c 89 e9             	mov    %r13,%rcx
   22f37:	4c 89 e2             	mov    %r12,%rdx
   22f3a:	48 89 c6             	mov    %rax,%rsi
   22f3d:	48 89 df             	mov    %rbx,%rdi
   22f40:	e8 e9 eb ff ff       	call   21b2e <_ZN2vk4raii13CommandBufferC1ERKNS0_6DeviceEP17VkCommandBuffer_TP15VkCommandPool_T>
   22f45:	48 89 d8             	mov    %rbx,%rax
   22f48:	48 83 c4 28          	add    $0x28,%rsp
   22f4c:	5b                   	pop    %rbx
   22f4d:	41 5c                	pop    %r12
   22f4f:	41 5d                	pop    %r13
   22f51:	5d                   	pop    %rbp
   22f52:	c3                   	ret
   22f53:	90                   	nop

0000000000022f54 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   22f54:	55                   	push   %rbp
   22f55:	48 89 e5             	mov    %rsp,%rbp
   22f58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22f5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   22f60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22f64:	48 8b 10             	mov    (%rax),%rdx
   22f67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22f6b:	48 89 10             	mov    %rdx,(%rax)
   22f6e:	90                   	nop
   22f6f:	5d                   	pop    %rbp
   22f70:	c3                   	ret
   22f71:	90                   	nop

0000000000022f72 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   22f72:	55                   	push   %rbp
   22f73:	48 89 e5             	mov    %rsp,%rbp
   22f76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   22f7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22f7e:	5d                   	pop    %rbp
   22f7f:	c3                   	ret

0000000000022f80 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   22f80:	55                   	push   %rbp
   22f81:	48 89 e5             	mov    %rsp,%rbp
   22f84:	48 83 ec 10          	sub    $0x10,%rsp
   22f88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22f8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   22f90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22f94:	48 89 c7             	mov    %rax,%rdi
   22f97:	e8 32 8d fe ff       	call   bcce <_ZSt10destroy_atIN2vk4raii13CommandBufferEEvPT_>
	}
   22f9c:	90                   	nop
   22f9d:	c9                   	leave
   22f9e:	c3                   	ret
   22f9f:	90                   	nop

0000000000022fa0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEmiEl>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
   22fa0:	55                   	push   %rbp
   22fa1:	48 89 e5             	mov    %rsp,%rbp
   22fa4:	48 83 ec 20          	sub    $0x20,%rsp
   22fa8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22fac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
   22fb0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22fb4:	48 8b 00             	mov    (%rax),%rax
   22fb7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   22fbb:	48 c1 e2 05          	shl    $0x5,%rdx
   22fbf:	48 f7 da             	neg    %rdx
   22fc2:	48 01 d0             	add    %rdx,%rax
   22fc5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   22fc9:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   22fcd:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   22fd1:	48 89 d6             	mov    %rdx,%rsi
   22fd4:	48 89 c7             	mov    %rax,%rdi
   22fd7:	e8 78 ff ff ff       	call   22f54 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   22fdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22fe0:	c9                   	leave
   22fe1:	c3                   	ret

0000000000022fe2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii13CommandBufferESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   22fe2:	55                   	push   %rbp
   22fe3:	48 89 e5             	mov    %rsp,%rbp
   22fe6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   22fea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22fee:	48 8b 00             	mov    (%rax),%rax
   22ff1:	5d                   	pop    %rbp
   22ff2:	c3                   	ret
   22ff3:	90                   	nop

0000000000022ff4 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   22ff4:	55                   	push   %rbp
   22ff5:	48 89 e5             	mov    %rsp,%rbp
   22ff8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22ffc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   23000:	90                   	nop
   23001:	5d                   	pop    %rbp
   23002:	c3                   	ret
   23003:	90                   	nop

0000000000023004 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   23004:	55                   	push   %rbp
   23005:	48 89 e5             	mov    %rsp,%rbp
   23008:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   2300c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23010:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   23017:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2301b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   23022:	00 
   23023:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23027:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   2302e:	00 
	{ }
   2302f:	90                   	nop
   23030:	5d                   	pop    %rbp
   23031:	c3                   	ret

0000000000023032 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   23032:	55                   	push   %rbp
   23033:	48 89 e5             	mov    %rsp,%rbp
   23036:	48 83 ec 10          	sub    $0x10,%rsp
   2303a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2303e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   23042:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   23047:	74 15                	je     2305e <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm+0x2c>
   23049:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2304d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   23051:	48 89 d6             	mov    %rdx,%rsi
   23054:	48 89 c7             	mov    %rax,%rdi
   23057:	e8 57 01 00 00       	call   231b3 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m>
   2305c:	eb 05                	jmp    23063 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm+0x31>
   2305e:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   23063:	c9                   	leave
   23064:	c3                   	ret

0000000000023065 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   23065:	55                   	push   %rbp
   23066:	48 89 e5             	mov    %rsp,%rbp
   23069:	48 83 ec 40          	sub    $0x40,%rsp
   2306d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   23071:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   23075:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   23079:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2307d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   23081:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   23085:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   23089:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2308d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   23091:	e8 08 31 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   23096:	84 c0                	test   %al,%al
   23098:	74 0e                	je     230a8 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   2309a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2309e:	48 89 c7             	mov    %rax,%rdi
   230a1:	e8 4a 21 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   230a6:	eb 18                	jmp    230c0 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   230a8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   230ac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   230b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   230b4:	48 89 ce             	mov    %rcx,%rsi
   230b7:	48 89 c7             	mov    %rax,%rdi
   230ba:	e8 b9 02 00 00       	call   23378 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   230bf:	90                   	nop
   230c0:	90                   	nop
   230c1:	c9                   	leave
   230c2:	c3                   	ret

00000000000230c3 <_ZSt25__uninitialized_default_nIPP17VkCommandBuffer_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   230c3:	55                   	push   %rbp
   230c4:	48 89 e5             	mov    %rsp,%rbp
   230c7:	48 83 ec 20          	sub    $0x20,%rsp
   230cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   230cf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   230d3:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   230d7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   230db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   230df:	48 89 d6             	mov    %rdx,%rsi
   230e2:	48 89 c7             	mov    %rax,%rdi
   230e5:	e8 50 01 00 00       	call   2323a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP17VkCommandBuffer_TmEET_S5_T0_>
    }
   230ea:	c9                   	leave
   230eb:	c3                   	ret

00000000000230ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   230ec:	55                   	push   %rbp
   230ed:	48 89 e5             	mov    %rsp,%rbp
   230f0:	48 83 ec 10          	sub    $0x10,%rsp
   230f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   230f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   230fc:	eb 19                	jmp    23117 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   230fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23102:	48 89 c7             	mov    %rax,%rdi
   23105:	e8 8d 01 00 00       	call   23297 <_ZSt11__addressofIP17VkCommandBuffer_TEPT_RS2_>
   2310a:	48 89 c7             	mov    %rax,%rdi
   2310d:	e8 93 01 00 00       	call   232a5 <_ZSt8_DestroyIP17VkCommandBuffer_TEvPT_>
	  for (; __first != __last; ++__first)
   23112:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   23117:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2311b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   2311f:	75 dd                	jne    230fe <_ZNSt12_Destroy_auxILb0EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_+0x12>
	}
   23121:	90                   	nop
   23122:	90                   	nop
   23123:	c9                   	leave
   23124:	c3                   	ret

0000000000023125 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   23125:	55                   	push   %rbp
   23126:	48 89 e5             	mov    %rsp,%rbp
   23129:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2312d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   23131:	90                   	nop
   23132:	5d                   	pop    %rbp
   23133:	c3                   	ret

0000000000023134 <_ZSt12__niter_baseIPN2vk4raii13CommandBufferEET_S4_>:
    __niter_base(_Iterator __it)
   23134:	55                   	push   %rbp
   23135:	48 89 e5             	mov    %rsp,%rbp
   23138:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   2313c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23140:	5d                   	pop    %rbp
   23141:	c3                   	ret

0000000000023142 <_ZSt14__relocate_a_1IPN2vk4raii13CommandBufferES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   23142:	55                   	push   %rbp
   23143:	48 89 e5             	mov    %rsp,%rbp
   23146:	53                   	push   %rbx
   23147:	48 83 ec 38          	sub    $0x38,%rsp
   2314b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2314f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   23153:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   23157:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   2315b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2315f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   23163:	eb 3a                	jmp    2319f <_ZSt14__relocate_a_1IPN2vk4raii13CommandBufferES3_SaIS2_EET0_T_S6_S5_RT1_+0x5d>
	std::__relocate_object_a(std::__addressof(*__cur),
   23165:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   23169:	48 89 c7             	mov    %rax,%rdi
   2316c:	e8 9f 8d fe ff       	call   bf10 <_ZSt11__addressofIN2vk4raii13CommandBufferEEPT_RS3_>
   23171:	48 89 c3             	mov    %rax,%rbx
   23174:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   23178:	48 89 c7             	mov    %rax,%rdi
   2317b:	e8 90 8d fe ff       	call   bf10 <_ZSt11__addressofIN2vk4raii13CommandBufferEEPT_RS3_>
   23180:	48 89 c1             	mov    %rax,%rcx
   23183:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23187:	48 89 c2             	mov    %rax,%rdx
   2318a:	48 89 de             	mov    %rbx,%rsi
   2318d:	48 89 cf             	mov    %rcx,%rdi
   23190:	e8 8c 01 00 00       	call   23321 <_ZSt19__relocate_object_aIN2vk4raii13CommandBufferES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   23195:	48 83 45 d8 20       	addq   $0x20,-0x28(%rbp)
   2319a:	48 83 45 e8 20       	addq   $0x20,-0x18(%rbp)
   2319f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   231a3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   231a7:	75 bc                	jne    23165 <_ZSt14__relocate_a_1IPN2vk4raii13CommandBufferES3_SaIS2_EET0_T_S6_S5_RT1_+0x23>
      return __cur;
   231a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   231ad:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   231b1:	c9                   	leave
   231b2:	c3                   	ret

00000000000231b3 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   231b3:	55                   	push   %rbp
   231b4:	48 89 e5             	mov    %rsp,%rbp
   231b7:	48 83 ec 20          	sub    $0x20,%rsp
   231bb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   231bf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   231c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   231c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   231cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   231cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   231d3:	e8 c6 2f fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   231d8:	84 c0                	test   %al,%al
   231da:	74 43                	je     2321f <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m+0x6c>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   231dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   231e0:	b9 00 00 00 00       	mov    $0x0,%ecx
   231e5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   231ec:	00 
   231ed:	48 c1 e8 3d          	shr    $0x3d,%rax
   231f1:	48 85 c0             	test   %rax,%rax
   231f4:	74 05                	je     231fb <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m+0x48>
   231f6:	b9 01 00 00 00       	mov    $0x1,%ecx
   231fb:	48 89 d0             	mov    %rdx,%rax
   231fe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   23202:	48 89 c8             	mov    %rcx,%rax
   23205:	83 e0 01             	and    $0x1,%eax
   23208:	84 c0                	test   %al,%al
   2320a:	74 05                	je     23211 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m+0x5e>
	      std::__throw_bad_array_new_length();
   2320c:	e8 6f 1f fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   23211:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   23215:	48 89 c7             	mov    %rax,%rdi
   23218:	e8 03 20 fe ff       	call   5220 <_Znwm@plt>
   2321d:	eb 19                	jmp    23238 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m+0x85>
	return __allocator_base<_Tp>::allocate(__n, 0);
   2321f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   23223:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23227:	ba 00 00 00 00       	mov    $0x0,%edx
   2322c:	48 89 ce             	mov    %rcx,%rsi
   2322f:	48 89 c7             	mov    %rax,%rdi
   23232:	e8 57 02 00 00       	call   2348e <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv>
   23237:	90                   	nop
      { return __a.allocate(__n); }
   23238:	c9                   	leave
   23239:	c3                   	ret

000000000002323a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP17VkCommandBuffer_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   2323a:	55                   	push   %rbp
   2323b:	48 89 e5             	mov    %rsp,%rbp
   2323e:	48 83 ec 20          	sub    $0x20,%rsp
   23242:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   23246:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   2324a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   2324f:	74 40                	je     23291 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP17VkCommandBuffer_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   23251:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   23255:	48 89 c7             	mov    %rax,%rdi
   23258:	e8 3a 00 00 00       	call   23297 <_ZSt11__addressofIP17VkCommandBuffer_TEPT_RS2_>
   2325d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   23261:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23265:	48 89 c7             	mov    %rax,%rdi
   23268:	e8 3c 01 00 00       	call   233a9 <_ZSt10_ConstructIP17VkCommandBuffer_TJEEvPT_DpOT0_>
	      ++__first;
   2326d:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   23272:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   23276:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   2327a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2327e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   23282:	48 89 ce             	mov    %rcx,%rsi
   23285:	48 89 c7             	mov    %rax,%rdi
   23288:	e8 59 01 00 00       	call   233e6 <_ZSt6fill_nIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_>
   2328d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   23291:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   23295:	c9                   	leave
   23296:	c3                   	ret

0000000000023297 <_ZSt11__addressofIP17VkCommandBuffer_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   23297:	55                   	push   %rbp
   23298:	48 89 e5             	mov    %rsp,%rbp
   2329b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   2329f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   232a3:	5d                   	pop    %rbp
   232a4:	c3                   	ret

00000000000232a5 <_ZSt8_DestroyIP17VkCommandBuffer_TEvPT_>:
    _Destroy(_Tp* __pointer)
   232a5:	55                   	push   %rbp
   232a6:	48 89 e5             	mov    %rsp,%rbp
   232a9:	48 83 ec 10          	sub    $0x10,%rsp
   232ad:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   232b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   232b5:	48 89 c7             	mov    %rax,%rdi
   232b8:	e8 6d 01 00 00       	call   2342a <_ZSt10destroy_atIP17VkCommandBuffer_TEvPT_>
    }
   232bd:	90                   	nop
   232be:	c9                   	leave
   232bf:	c3                   	ret

00000000000232c0 <_ZNSt15__new_allocatorIN2vk4raii13CommandBufferEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   232c0:	55                   	push   %rbp
   232c1:	48 89 e5             	mov    %rsp,%rbp
   232c4:	48 83 ec 20          	sub    $0x20,%rsp
   232c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   232cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   232d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   232d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   232d8:	48 89 c7             	mov    %rax,%rdi
   232db:	e8 56 01 00 00       	call   23436 <_ZNKSt15__new_allocatorIN2vk4raii13CommandBufferEE11_M_max_sizeEv>
   232e0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   232e4:	0f 92 c0             	setb   %al
   232e7:	0f b6 c0             	movzbl %al,%eax
   232ea:	48 85 c0             	test   %rax,%rax
   232ed:	0f 95 c0             	setne  %al
   232f0:	84 c0                	test   %al,%al
   232f2:	74 1a                	je     2330e <_ZNSt15__new_allocatorIN2vk4raii13CommandBufferEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   232f4:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
   232fb:	ff ff 07 
   232fe:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   23302:	73 05                	jae    23309 <_ZNSt15__new_allocatorIN2vk4raii13CommandBufferEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   23304:	e8 77 1e fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   23309:	e8 72 1d fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2330e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   23312:	48 c1 e0 05          	shl    $0x5,%rax
   23316:	48 89 c7             	mov    %rax,%rdi
   23319:	e8 02 1f fe ff       	call   5220 <_Znwm@plt>
   2331e:	90                   	nop
      }
   2331f:	c9                   	leave
   23320:	c3                   	ret

0000000000023321 <_ZSt19__relocate_object_aIN2vk4raii13CommandBufferES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   23321:	55                   	push   %rbp
   23322:	48 89 e5             	mov    %rsp,%rbp
   23325:	48 83 ec 20          	sub    $0x20,%rsp
   23329:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2332d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   23331:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   23335:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   23339:	48 89 c7             	mov    %rax,%rdi
   2333c:	e8 09 01 00 00       	call   2344a <_ZSt4moveIRN2vk4raii13CommandBufferEEONSt16remove_referenceIT_E4typeEOS5_>
   23341:	48 89 c2             	mov    %rax,%rdx
   23344:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   23348:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2334c:	48 89 ce             	mov    %rcx,%rsi
   2334f:	48 89 c7             	mov    %rax,%rdi
   23352:	e8 01 01 00 00       	call   23458 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   23357:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2335b:	48 89 c7             	mov    %rax,%rdi
   2335e:	e8 ad 8b fe ff       	call   bf10 <_ZSt11__addressofIN2vk4raii13CommandBufferEEPT_RS3_>
   23363:	48 89 c2             	mov    %rax,%rdx
   23366:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2336a:	48 89 d6             	mov    %rdx,%rsi
   2336d:	48 89 c7             	mov    %rax,%rdi
   23370:	e8 0b fc ff ff       	call   22f80 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE7destroyIS2_EEvRS3_PT_>
    }
   23375:	90                   	nop
   23376:	c9                   	leave
   23377:	c3                   	ret

0000000000023378 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   23378:	55                   	push   %rbp
   23379:	48 89 e5             	mov    %rsp,%rbp
   2337c:	48 83 ec 20          	sub    $0x20,%rsp
   23380:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23384:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   23388:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2338c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   23390:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   23397:	00 
   23398:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2339c:	48 89 d6             	mov    %rdx,%rsi
   2339f:	48 89 c7             	mov    %rax,%rdi
   233a2:	e8 89 1e fe ff       	call   5230 <_ZdlPvm@plt>
      }
   233a7:	c9                   	leave
   233a8:	c3                   	ret

00000000000233a9 <_ZSt10_ConstructIP17VkCommandBuffer_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   233a9:	55                   	push   %rbp
   233aa:	48 89 e5             	mov    %rsp,%rbp
   233ad:	48 83 ec 10          	sub    $0x10,%rsp
   233b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   233b5:	e8 e4 2d fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   233ba:	84 c0                	test   %al,%al
   233bc:	74 0e                	je     233cc <_ZSt10_ConstructIP17VkCommandBuffer_TJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   233be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   233c2:	48 89 c7             	mov    %rax,%rdi
   233c5:	e8 25 01 00 00       	call   234ef <_ZSt12construct_atIP17VkCommandBuffer_TJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   233ca:	eb 18                	jmp    233e4 <_ZSt10_ConstructIP17VkCommandBuffer_TJEEvPT_DpOT0_+0x3b>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   233cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   233d0:	48 89 c6             	mov    %rax,%rsi
   233d3:	bf 08 00 00 00       	mov    $0x8,%edi
   233d8:	e8 d7 2d fe ff       	call   61b4 <_ZnwmPv>
   233dd:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   233e4:	c9                   	leave
   233e5:	c3                   	ret

00000000000233e6 <_ZSt6fill_nIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   233e6:	55                   	push   %rbp
   233e7:	48 89 e5             	mov    %rsp,%rbp
   233ea:	48 83 ec 20          	sub    $0x20,%rsp
   233ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   233f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   233f6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   233fa:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   233fe:	48 89 c7             	mov    %rax,%rdi
   23401:	e8 0f 01 00 00       	call   23515 <_ZSt19__iterator_categoryIPP17VkCommandBuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   23406:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2340a:	48 89 c7             	mov    %rax,%rdi
   2340d:	e8 1e c3 fe ff       	call   f730 <_ZSt17__size_to_integerm>
   23412:	48 89 c1             	mov    %rax,%rcx
   23415:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23419:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2341d:	48 89 ce             	mov    %rcx,%rsi
   23420:	48 89 c7             	mov    %rax,%rdi
   23423:	e8 f8 00 00 00       	call   23520 <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   23428:	c9                   	leave
   23429:	c3                   	ret

000000000002342a <_ZSt10destroy_atIP17VkCommandBuffer_TEvPT_>:
    destroy_at(_Tp* __location)
   2342a:	55                   	push   %rbp
   2342b:	48 89 e5             	mov    %rsp,%rbp
   2342e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   23432:	90                   	nop
   23433:	5d                   	pop    %rbp
   23434:	c3                   	ret
   23435:	90                   	nop

0000000000023436 <_ZNKSt15__new_allocatorIN2vk4raii13CommandBufferEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   23436:	55                   	push   %rbp
   23437:	48 89 e5             	mov    %rsp,%rbp
   2343a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   2343e:	48 b8 ff ff ff ff ff 	movabs $0x3ffffffffffffff,%rax
   23445:	ff ff 03 
      }
   23448:	5d                   	pop    %rbp
   23449:	c3                   	ret

000000000002344a <_ZSt4moveIRN2vk4raii13CommandBufferEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
   2344a:	55                   	push   %rbp
   2344b:	48 89 e5             	mov    %rsp,%rbp
   2344e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   23452:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23456:	5d                   	pop    %rbp
   23457:	c3                   	ret

0000000000023458 <_ZNSt16allocator_traitsISaIN2vk4raii13CommandBufferEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   23458:	55                   	push   %rbp
   23459:	48 89 e5             	mov    %rsp,%rbp
   2345c:	48 83 ec 20          	sub    $0x20,%rsp
   23460:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23464:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   23468:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   2346c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   23470:	48 89 c7             	mov    %rax,%rdi
   23473:	e8 05 01 00 00       	call   2357d <_ZSt7forwardIN2vk4raii13CommandBufferEEOT_RNSt16remove_referenceIS3_E4typeE>
   23478:	48 89 c2             	mov    %rax,%rdx
   2347b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2347f:	48 89 d6             	mov    %rdx,%rsi
   23482:	48 89 c7             	mov    %rax,%rdi
   23485:	e8 01 01 00 00       	call   2358b <_ZSt12construct_atIN2vk4raii13CommandBufferEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
   2348a:	90                   	nop
   2348b:	c9                   	leave
   2348c:	c3                   	ret
   2348d:	90                   	nop

000000000002348e <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   2348e:	55                   	push   %rbp
   2348f:	48 89 e5             	mov    %rsp,%rbp
   23492:	48 83 ec 20          	sub    $0x20,%rsp
   23496:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2349a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2349e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   234a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   234a6:	48 89 c7             	mov    %rax,%rdi
   234a9:	e8 22 01 00 00       	call   235d0 <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE11_M_max_sizeEv>
   234ae:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   234b2:	0f 92 c0             	setb   %al
   234b5:	0f b6 c0             	movzbl %al,%eax
   234b8:	48 85 c0             	test   %rax,%rax
   234bb:	0f 95 c0             	setne  %al
   234be:	84 c0                	test   %al,%al
   234c0:	74 1a                	je     234dc <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   234c2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   234c9:	ff ff 1f 
   234cc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   234d0:	73 05                	jae    234d7 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   234d2:	e8 a9 1c fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   234d7:	e8 a4 1b fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   234dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   234e0:	48 c1 e0 03          	shl    $0x3,%rax
   234e4:	48 89 c7             	mov    %rax,%rdi
   234e7:	e8 34 1d fe ff       	call   5220 <_Znwm@plt>
   234ec:	90                   	nop
      }
   234ed:	c9                   	leave
   234ee:	c3                   	ret

00000000000234ef <_ZSt12construct_atIP17VkCommandBuffer_TJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   234ef:	55                   	push   %rbp
   234f0:	48 89 e5             	mov    %rsp,%rbp
   234f3:	48 83 ec 10          	sub    $0x10,%rsp
   234f7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   234fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   234ff:	48 89 c6             	mov    %rax,%rsi
   23502:	bf 08 00 00 00       	mov    $0x8,%edi
   23507:	e8 a8 2c fe ff       	call   61b4 <_ZnwmPv>
   2350c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   23513:	c9                   	leave
   23514:	c3                   	ret

0000000000023515 <_ZSt19__iterator_categoryIPP17VkCommandBuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   23515:	55                   	push   %rbp
   23516:	48 89 e5             	mov    %rsp,%rbp
   23519:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   2351d:	90                   	nop
   2351e:	5d                   	pop    %rbp
   2351f:	c3                   	ret

0000000000023520 <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   23520:	55                   	push   %rbp
   23521:	48 89 e5             	mov    %rsp,%rbp
   23524:	48 83 ec 20          	sub    $0x20,%rsp
   23528:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2352c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   23530:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   23534:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   23539:	75 06                	jne    23541 <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   2353b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2353f:	eb 3a                	jmp    2357b <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   23541:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   23545:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2354c:	00 
   2354d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23551:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   23555:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   23559:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2355d:	48 89 ce             	mov    %rcx,%rsi
   23560:	48 89 c7             	mov    %rax,%rdi
   23563:	e8 7c 00 00 00       	call   235e4 <_ZSt8__fill_aIPP17VkCommandBuffer_TS1_EvT_S3_RKT0_>
      return __first + __n;
   23568:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2356c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   23573:	00 
   23574:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23578:	48 01 d0             	add    %rdx,%rax
    }
   2357b:	c9                   	leave
   2357c:	c3                   	ret

000000000002357d <_ZSt7forwardIN2vk4raii13CommandBufferEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   2357d:	55                   	push   %rbp
   2357e:	48 89 e5             	mov    %rsp,%rbp
   23581:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   23585:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23589:	5d                   	pop    %rbp
   2358a:	c3                   	ret

000000000002358b <_ZSt12construct_atIN2vk4raii13CommandBufferEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
   2358b:	55                   	push   %rbp
   2358c:	48 89 e5             	mov    %rsp,%rbp
   2358f:	53                   	push   %rbx
   23590:	48 83 ec 18          	sub    $0x18,%rsp
   23594:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   23598:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   2359c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   235a0:	48 89 c6             	mov    %rax,%rsi
   235a3:	bf 20 00 00 00       	mov    $0x20,%edi
   235a8:	e8 07 2c fe ff       	call   61b4 <_ZnwmPv>
   235ad:	48 89 c3             	mov    %rax,%rbx
   235b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   235b4:	48 89 c7             	mov    %rax,%rdi
   235b7:	e8 c1 ff ff ff       	call   2357d <_ZSt7forwardIN2vk4raii13CommandBufferEEOT_RNSt16remove_referenceIS3_E4typeE>
   235bc:	48 89 c6             	mov    %rax,%rsi
   235bf:	48 89 df             	mov    %rbx,%rdi
   235c2:	e8 db e5 ff ff       	call   21ba2 <_ZN2vk4raii13CommandBufferC1EOS1_>
   235c7:	48 89 d8             	mov    %rbx,%rax
   235ca:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   235ce:	c9                   	leave
   235cf:	c3                   	ret

00000000000235d0 <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   235d0:	55                   	push   %rbp
   235d1:	48 89 e5             	mov    %rsp,%rbp
   235d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   235d8:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   235df:	ff ff 0f 
      }
   235e2:	5d                   	pop    %rbp
   235e3:	c3                   	ret

00000000000235e4 <_ZSt8__fill_aIPP17VkCommandBuffer_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   235e4:	55                   	push   %rbp
   235e5:	48 89 e5             	mov    %rsp,%rbp
   235e8:	48 83 ec 20          	sub    $0x20,%rsp
   235ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   235f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   235f4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   235f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   235fc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   23600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23604:	48 89 ce             	mov    %rcx,%rsi
   23607:	48 89 c7             	mov    %rax,%rdi
   2360a:	e8 03 00 00 00       	call   23612 <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   2360f:	90                   	nop
   23610:	c9                   	leave
   23611:	c3                   	ret

0000000000023612 <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   23612:	55                   	push   %rbp
   23613:	48 89 e5             	mov    %rsp,%rbp
   23616:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2361a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2361e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   23622:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   23626:	48 8b 00             	mov    (%rax),%rax
   23629:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   2362d:	eb 10                	jmp    2363f <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   2362f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   23633:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   23637:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   2363a:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   2363f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   23643:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   23647:	75 e6                	jne    2362f <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   23649:	90                   	nop
   2364a:	90                   	nop
   2364b:	5d                   	pop    %rbp
   2364c:	c3                   	ret

000000000002364d <_ZN2vkL23getDispatchLoaderStaticEv>:
  {
   2364d:	55                   	push   %rbp
   2364e:	48 89 e5             	mov    %rsp,%rbp
    return dls;
   23651:	48 8d 05 c8 db 01 00 	lea    0x1dbc8(%rip),%rax        # 41220 <_ZZN2vkL23getDispatchLoaderStaticEvE3dls>
  }
   23658:	5d                   	pop    %rbp
   23659:	c3                   	ret

000000000002365a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
   2365a:	55                   	push   %rbp
   2365b:	48 89 e5             	mov    %rsp,%rbp
   2365e:	41 54                	push   %r12
   23660:	53                   	push   %rbx
   23661:	48 83 ec 30          	sub    $0x30,%rsp
   23665:	89 7d cc             	mov    %edi,-0x34(%rbp)
   23668:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
   2366c:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   23670:	0f 89 28 07 00 00    	jns    23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   23676:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
   2367a:	0f 8d 3d 01 00 00    	jge    237bd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
   23680:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   23687:	0f 84 19 05 00 00    	je     23ba6 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
   2368d:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   23694:	0f 8f 04 07 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   2369a:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   236a1:	0f 84 37 05 00 00    	je     23bde <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
   236a7:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   236ae:	0f 8f ea 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   236b4:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   236bb:	0f 84 55 05 00 00    	je     23c16 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
   236c1:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   236c8:	0f 8f d0 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   236ce:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   236d5:	0f 84 73 05 00 00    	je     23c4e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
   236db:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   236e2:	0f 8f b6 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   236e8:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   236ef:	0f 84 91 05 00 00    	je     23c86 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
   236f5:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   236fc:	0f 8f 9c 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   23702:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   23709:	0f 84 af 05 00 00    	je     23cbe <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
   2370f:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   23716:	0f 8f 82 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   2371c:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   23723:	0f 84 9d 03 00 00    	je     23ac6 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
   23729:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   23730:	0f 8f 68 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   23736:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   2373d:	0f 84 bb 03 00 00    	je     23afe <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
   23743:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   2374a:	0f 8f 4e 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   23750:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   23757:	0f 84 99 05 00 00    	je     23cf6 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
   2375d:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   23764:	0f 8f 34 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   2376a:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   23771:	0f 84 bf 03 00 00    	je     23b36 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
   23777:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   2377e:	0f 8f 1a 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   23784:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   2378b:	0f 84 9d 05 00 00    	je     23d2e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
   23791:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   23798:	0f 8f 00 06 00 00    	jg     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   2379e:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
   237a5:	0f 84 bb 05 00 00    	je     23d66 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
   237ab:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
   237b2:	0f 84 b6 03 00 00    	je     23b6e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
   237b8:	e9 e1 05 00 00       	jmp    23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   237bd:	8b 45 cc             	mov    -0x34(%rbp),%eax
   237c0:	83 c0 0d             	add    $0xd,%eax
   237c3:	83 f8 0c             	cmp    $0xc,%eax
   237c6:	0f 87 d2 05 00 00    	ja     23d9e <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   237cc:	89 c0                	mov    %eax,%eax
   237ce:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   237d5:	00 
   237d6:	48 8d 05 9b d0 00 00 	lea    0xd09b(%rip),%rax        # 30878 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   237dd:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   237e0:	48 98                	cltq
   237e2:	48 8d 15 8f d0 00 00 	lea    0xd08f(%rip),%rdx        # 30878 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   237e9:	48 01 d0             	add    %rdx,%rax
   237ec:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   237ee:	bf 28 00 00 00       	mov    $0x28,%edi
   237f3:	e8 d8 18 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   237f8:	48 89 c3             	mov    %rax,%rbx
   237fb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   237ff:	48 89 c6             	mov    %rax,%rsi
   23802:	48 89 df             	mov    %rbx,%rdi
   23805:	e8 bc 41 fe ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
   2380a:	48 8d 05 e5 93 fe ff 	lea    -0x16c1b(%rip),%rax        # cbf6 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
   23811:	48 89 c2             	mov    %rax,%rdx
   23814:	48 8d 05 cd d4 01 00 	lea    0x1d4cd(%rip),%rax        # 40ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2381b:	48 89 c6             	mov    %rax,%rsi
   2381e:	48 89 df             	mov    %rbx,%rdi
   23821:	e8 5a 1b fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   23826:	bf 28 00 00 00       	mov    $0x28,%edi
   2382b:	e8 a0 18 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23830:	48 89 c3             	mov    %rax,%rbx
   23833:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23837:	48 89 c6             	mov    %rax,%rsi
   2383a:	48 89 df             	mov    %rbx,%rdi
   2383d:	e8 56 42 fe ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
   23842:	48 8d 05 3d 93 fe ff 	lea    -0x16cc3(%rip),%rax        # cb86 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
   23849:	48 89 c2             	mov    %rax,%rdx
   2384c:	48 8d 05 7d d4 01 00 	lea    0x1d47d(%rip),%rax        # 40cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23853:	48 89 c6             	mov    %rax,%rsi
   23856:	48 89 df             	mov    %rbx,%rdi
   23859:	e8 22 1b fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   2385e:	bf 28 00 00 00       	mov    $0x28,%edi
   23863:	e8 68 18 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23868:	48 89 c3             	mov    %rax,%rbx
   2386b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2386f:	48 89 c6             	mov    %rax,%rsi
   23872:	48 89 df             	mov    %rbx,%rdi
   23875:	e8 f0 42 fe ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
   2387a:	48 8d 05 95 92 fe ff 	lea    -0x16d6b(%rip),%rax        # cb16 <_ZN2vk25InitializationFailedErrorD1Ev>
   23881:	48 89 c2             	mov    %rax,%rdx
   23884:	48 8d 05 2d d4 01 00 	lea    0x1d42d(%rip),%rax        # 40cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2388b:	48 89 c6             	mov    %rax,%rsi
   2388e:	48 89 df             	mov    %rbx,%rdi
   23891:	e8 ea 1a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   23896:	bf 28 00 00 00       	mov    $0x28,%edi
   2389b:	e8 30 18 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   238a0:	48 89 c3             	mov    %rax,%rbx
   238a3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   238a7:	48 89 c6             	mov    %rax,%rsi
   238aa:	48 89 df             	mov    %rbx,%rdi
   238ad:	e8 8a 43 fe ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
   238b2:	48 8d 05 ed 91 fe ff 	lea    -0x16e13(%rip),%rax        # caa6 <_ZN2vk15DeviceLostErrorD1Ev>
   238b9:	48 89 c2             	mov    %rax,%rdx
   238bc:	48 8d 05 dd d3 01 00 	lea    0x1d3dd(%rip),%rax        # 40ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   238c3:	48 89 c6             	mov    %rax,%rsi
   238c6:	48 89 df             	mov    %rbx,%rdi
   238c9:	e8 b2 1a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   238ce:	bf 28 00 00 00       	mov    $0x28,%edi
   238d3:	e8 f8 17 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   238d8:	48 89 c3             	mov    %rax,%rbx
   238db:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   238df:	48 89 c6             	mov    %rax,%rsi
   238e2:	48 89 df             	mov    %rbx,%rdi
   238e5:	e8 24 44 fe ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
   238ea:	48 8d 05 45 91 fe ff 	lea    -0x16ebb(%rip),%rax        # ca36 <_ZN2vk20MemoryMapFailedErrorD1Ev>
   238f1:	48 89 c2             	mov    %rax,%rdx
   238f4:	48 8d 05 8d d3 01 00 	lea    0x1d38d(%rip),%rax        # 40c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   238fb:	48 89 c6             	mov    %rax,%rsi
   238fe:	48 89 df             	mov    %rbx,%rdi
   23901:	e8 7a 1a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   23906:	bf 28 00 00 00       	mov    $0x28,%edi
   2390b:	e8 c0 17 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23910:	48 89 c3             	mov    %rax,%rbx
   23913:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23917:	48 89 c6             	mov    %rax,%rsi
   2391a:	48 89 df             	mov    %rbx,%rdi
   2391d:	e8 be 44 fe ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
   23922:	48 8d 05 9d 90 fe ff 	lea    -0x16f63(%rip),%rax        # c9c6 <_ZN2vk20LayerNotPresentErrorD1Ev>
   23929:	48 89 c2             	mov    %rax,%rdx
   2392c:	48 8d 05 3d d3 01 00 	lea    0x1d33d(%rip),%rax        # 40c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23933:	48 89 c6             	mov    %rax,%rsi
   23936:	48 89 df             	mov    %rbx,%rdi
   23939:	e8 42 1a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   2393e:	bf 28 00 00 00       	mov    $0x28,%edi
   23943:	e8 88 17 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23948:	48 89 c3             	mov    %rax,%rbx
   2394b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2394f:	48 89 c6             	mov    %rax,%rsi
   23952:	48 89 df             	mov    %rbx,%rdi
   23955:	e8 58 45 fe ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
   2395a:	48 8d 05 f5 8f fe ff 	lea    -0x1700b(%rip),%rax        # c956 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
   23961:	48 89 c2             	mov    %rax,%rdx
   23964:	48 8d 05 ed d2 01 00 	lea    0x1d2ed(%rip),%rax        # 40c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   2396b:	48 89 c6             	mov    %rax,%rsi
   2396e:	48 89 df             	mov    %rbx,%rdi
   23971:	e8 0a 1a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   23976:	bf 28 00 00 00       	mov    $0x28,%edi
   2397b:	e8 50 17 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23980:	48 89 c3             	mov    %rax,%rbx
   23983:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23987:	48 89 c6             	mov    %rax,%rsi
   2398a:	48 89 df             	mov    %rbx,%rdi
   2398d:	e8 f2 45 fe ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
   23992:	48 8d 05 4d 8f fe ff 	lea    -0x170b3(%rip),%rax        # c8e6 <_ZN2vk22FeatureNotPresentErrorD1Ev>
   23999:	48 89 c2             	mov    %rax,%rdx
   2399c:	48 8d 05 9d d2 01 00 	lea    0x1d29d(%rip),%rax        # 40c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   239a3:	48 89 c6             	mov    %rax,%rsi
   239a6:	48 89 df             	mov    %rbx,%rdi
   239a9:	e8 d2 19 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   239ae:	bf 28 00 00 00       	mov    $0x28,%edi
   239b3:	e8 18 17 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   239b8:	48 89 c3             	mov    %rax,%rbx
   239bb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   239bf:	48 89 c6             	mov    %rax,%rsi
   239c2:	48 89 df             	mov    %rbx,%rdi
   239c5:	e8 8c 46 fe ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
   239ca:	48 8d 05 a5 8e fe ff 	lea    -0x1715b(%rip),%rax        # c876 <_ZN2vk23IncompatibleDriverErrorD1Ev>
   239d1:	48 89 c2             	mov    %rax,%rdx
   239d4:	48 8d 05 4d d2 01 00 	lea    0x1d24d(%rip),%rax        # 40c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   239db:	48 89 c6             	mov    %rax,%rsi
   239de:	48 89 df             	mov    %rbx,%rdi
   239e1:	e8 9a 19 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   239e6:	bf 28 00 00 00       	mov    $0x28,%edi
   239eb:	e8 e0 16 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   239f0:	48 89 c3             	mov    %rax,%rbx
   239f3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   239f7:	48 89 c6             	mov    %rax,%rsi
   239fa:	48 89 df             	mov    %rbx,%rdi
   239fd:	e8 26 47 fe ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
   23a02:	48 8d 05 fd 8d fe ff 	lea    -0x17203(%rip),%rax        # c806 <_ZN2vk19TooManyObjectsErrorD1Ev>
   23a09:	48 89 c2             	mov    %rax,%rdx
   23a0c:	48 8d 05 fd d1 01 00 	lea    0x1d1fd(%rip),%rax        # 40c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23a13:	48 89 c6             	mov    %rax,%rsi
   23a16:	48 89 df             	mov    %rbx,%rdi
   23a19:	e8 62 19 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   23a1e:	bf 28 00 00 00       	mov    $0x28,%edi
   23a23:	e8 a8 16 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23a28:	48 89 c3             	mov    %rax,%rbx
   23a2b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23a2f:	48 89 c6             	mov    %rax,%rsi
   23a32:	48 89 df             	mov    %rbx,%rdi
   23a35:	e8 c0 47 fe ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
   23a3a:	48 8d 05 55 8d fe ff 	lea    -0x172ab(%rip),%rax        # c796 <_ZN2vk23FormatNotSupportedErrorD1Ev>
   23a41:	48 89 c2             	mov    %rax,%rdx
   23a44:	48 8d 05 ad d1 01 00 	lea    0x1d1ad(%rip),%rax        # 40bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23a4b:	48 89 c6             	mov    %rax,%rsi
   23a4e:	48 89 df             	mov    %rbx,%rdi
   23a51:	e8 2a 19 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   23a56:	bf 28 00 00 00       	mov    $0x28,%edi
   23a5b:	e8 70 16 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23a60:	48 89 c3             	mov    %rax,%rbx
   23a63:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23a67:	48 89 c6             	mov    %rax,%rsi
   23a6a:	48 89 df             	mov    %rbx,%rdi
   23a6d:	e8 5a 48 fe ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
   23a72:	48 8d 05 ad 8c fe ff 	lea    -0x17353(%rip),%rax        # c726 <_ZN2vk19FragmentedPoolErrorD1Ev>
   23a79:	48 89 c2             	mov    %rax,%rdx
   23a7c:	48 8d 05 5d d1 01 00 	lea    0x1d15d(%rip),%rax        # 40be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23a83:	48 89 c6             	mov    %rax,%rsi
   23a86:	48 89 df             	mov    %rbx,%rdi
   23a89:	e8 f2 18 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   23a8e:	bf 28 00 00 00       	mov    $0x28,%edi
   23a93:	e8 38 16 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23a98:	48 89 c3             	mov    %rax,%rbx
   23a9b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23a9f:	48 89 c6             	mov    %rax,%rsi
   23aa2:	48 89 df             	mov    %rbx,%rdi
   23aa5:	e8 f4 48 fe ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
   23aaa:	48 8d 05 05 8c fe ff 	lea    -0x173fb(%rip),%rax        # c6b6 <_ZN2vk12UnknownErrorD1Ev>
   23ab1:	48 89 c2             	mov    %rax,%rdx
   23ab4:	48 8d 05 0d d1 01 00 	lea    0x1d10d(%rip),%rax        # 40bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23abb:	48 89 c6             	mov    %rax,%rsi
   23abe:	48 89 df             	mov    %rbx,%rdi
   23ac1:	e8 ba 18 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   23ac6:	bf 28 00 00 00       	mov    $0x28,%edi
   23acb:	e8 00 16 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23ad0:	48 89 c3             	mov    %rax,%rbx
   23ad3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23ad7:	48 89 c6             	mov    %rax,%rsi
   23ada:	48 89 df             	mov    %rbx,%rdi
   23add:	e8 8e 49 fe ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
   23ae2:	48 8d 05 5d 8b fe ff 	lea    -0x174a3(%rip),%rax        # c646 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
   23ae9:	48 89 c2             	mov    %rax,%rdx
   23aec:	48 8d 05 bd d0 01 00 	lea    0x1d0bd(%rip),%rax        # 40bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23af3:	48 89 c6             	mov    %rax,%rsi
   23af6:	48 89 df             	mov    %rbx,%rdi
   23af9:	e8 82 18 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   23afe:	bf 28 00 00 00       	mov    $0x28,%edi
   23b03:	e8 c8 15 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23b08:	48 89 c3             	mov    %rax,%rbx
   23b0b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23b0f:	48 89 c6             	mov    %rax,%rsi
   23b12:	48 89 df             	mov    %rbx,%rdi
   23b15:	e8 28 4a fe ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
   23b1a:	48 8d 05 b5 8a fe ff 	lea    -0x1754b(%rip),%rax        # c5d6 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
   23b21:	48 89 c2             	mov    %rax,%rdx
   23b24:	48 8d 05 6d d0 01 00 	lea    0x1d06d(%rip),%rax        # 40b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23b2b:	48 89 c6             	mov    %rax,%rsi
   23b2e:	48 89 df             	mov    %rbx,%rdi
   23b31:	e8 4a 18 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   23b36:	bf 28 00 00 00       	mov    $0x28,%edi
   23b3b:	e8 90 15 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23b40:	48 89 c3             	mov    %rax,%rbx
   23b43:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23b47:	48 89 c6             	mov    %rax,%rsi
   23b4a:	48 89 df             	mov    %rbx,%rdi
   23b4d:	e8 c2 4a fe ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
   23b52:	48 8d 05 0d 8a fe ff 	lea    -0x175f3(%rip),%rax        # c566 <_ZN2vk18FragmentationErrorD1Ev>
   23b59:	48 89 c2             	mov    %rax,%rdx
   23b5c:	48 8d 05 1d d0 01 00 	lea    0x1d01d(%rip),%rax        # 40b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23b63:	48 89 c6             	mov    %rax,%rsi
   23b66:	48 89 df             	mov    %rbx,%rdi
   23b69:	e8 12 18 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   23b6e:	bf 28 00 00 00       	mov    $0x28,%edi
   23b73:	e8 58 15 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23b78:	48 89 c3             	mov    %rax,%rbx
   23b7b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23b7f:	48 89 c6             	mov    %rax,%rsi
   23b82:	48 89 df             	mov    %rbx,%rdi
   23b85:	e8 5c 4b fe ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
   23b8a:	48 8d 05 65 89 fe ff 	lea    -0x1769b(%rip),%rax        # c4f6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
   23b91:	48 89 c2             	mov    %rax,%rdx
   23b94:	48 8d 05 cd cf 01 00 	lea    0x1cfcd(%rip),%rax        # 40b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23b9b:	48 89 c6             	mov    %rax,%rsi
   23b9e:	48 89 df             	mov    %rbx,%rdi
   23ba1:	e8 da 17 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   23ba6:	bf 28 00 00 00       	mov    $0x28,%edi
   23bab:	e8 20 15 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23bb0:	48 89 c3             	mov    %rax,%rbx
   23bb3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23bb7:	48 89 c6             	mov    %rax,%rsi
   23bba:	48 89 df             	mov    %rbx,%rdi
   23bbd:	e8 f6 4b fe ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
   23bc2:	48 8d 05 bd 88 fe ff 	lea    -0x17743(%rip),%rax        # c486 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
   23bc9:	48 89 c2             	mov    %rax,%rdx
   23bcc:	48 8d 05 7d cf 01 00 	lea    0x1cf7d(%rip),%rax        # 40b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23bd3:	48 89 c6             	mov    %rax,%rsi
   23bd6:	48 89 df             	mov    %rbx,%rdi
   23bd9:	e8 a2 17 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   23bde:	bf 28 00 00 00       	mov    $0x28,%edi
   23be3:	e8 e8 14 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23be8:	48 89 c3             	mov    %rax,%rbx
   23beb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23bef:	48 89 c6             	mov    %rax,%rsi
   23bf2:	48 89 df             	mov    %rbx,%rdi
   23bf5:	e8 90 4c fe ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
   23bfa:	48 8d 05 15 88 fe ff 	lea    -0x177eb(%rip),%rax        # c416 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
   23c01:	48 89 c2             	mov    %rax,%rdx
   23c04:	48 8d 05 2d cf 01 00 	lea    0x1cf2d(%rip),%rax        # 40b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23c0b:	48 89 c6             	mov    %rax,%rsi
   23c0e:	48 89 df             	mov    %rbx,%rdi
   23c11:	e8 6a 17 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   23c16:	bf 28 00 00 00       	mov    $0x28,%edi
   23c1b:	e8 b0 14 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23c20:	48 89 c3             	mov    %rax,%rbx
   23c23:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23c27:	48 89 c6             	mov    %rax,%rsi
   23c2a:	48 89 df             	mov    %rbx,%rdi
   23c2d:	e8 2a 4d fe ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
   23c32:	48 8d 05 6d 87 fe ff 	lea    -0x17893(%rip),%rax        # c3a6 <_ZN2vk17OutOfDateKHRErrorD1Ev>
   23c39:	48 89 c2             	mov    %rax,%rdx
   23c3c:	48 8d 05 dd ce 01 00 	lea    0x1cedd(%rip),%rax        # 40b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23c43:	48 89 c6             	mov    %rax,%rsi
   23c46:	48 89 df             	mov    %rbx,%rdi
   23c49:	e8 32 17 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   23c4e:	bf 28 00 00 00       	mov    $0x28,%edi
   23c53:	e8 78 14 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23c58:	48 89 c3             	mov    %rax,%rbx
   23c5b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23c5f:	48 89 c6             	mov    %rax,%rsi
   23c62:	48 89 df             	mov    %rbx,%rdi
   23c65:	e8 c4 4d fe ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
   23c6a:	48 8d 05 c5 86 fe ff 	lea    -0x1793b(%rip),%rax        # c336 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
   23c71:	48 89 c2             	mov    %rax,%rdx
   23c74:	48 8d 05 8d ce 01 00 	lea    0x1ce8d(%rip),%rax        # 40b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23c7b:	48 89 c6             	mov    %rax,%rsi
   23c7e:	48 89 df             	mov    %rbx,%rdi
   23c81:	e8 fa 16 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   23c86:	bf 28 00 00 00       	mov    $0x28,%edi
   23c8b:	e8 40 14 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23c90:	48 89 c3             	mov    %rax,%rbx
   23c93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23c97:	48 89 c6             	mov    %rax,%rsi
   23c9a:	48 89 df             	mov    %rbx,%rdi
   23c9d:	e8 5e 4e fe ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
   23ca2:	48 8d 05 1d 86 fe ff 	lea    -0x179e3(%rip),%rax        # c2c6 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
   23ca9:	48 89 c2             	mov    %rax,%rdx
   23cac:	48 8d 05 3d ce 01 00 	lea    0x1ce3d(%rip),%rax        # 40af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23cb3:	48 89 c6             	mov    %rax,%rsi
   23cb6:	48 89 df             	mov    %rbx,%rdi
   23cb9:	e8 c2 16 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   23cbe:	bf 28 00 00 00       	mov    $0x28,%edi
   23cc3:	e8 08 14 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23cc8:	48 89 c3             	mov    %rax,%rbx
   23ccb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23ccf:	48 89 c6             	mov    %rax,%rsi
   23cd2:	48 89 df             	mov    %rbx,%rdi
   23cd5:	e8 f8 4e fe ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
   23cda:	48 8d 05 75 85 fe ff 	lea    -0x17a8b(%rip),%rax        # c256 <_ZN2vk20InvalidShaderNVErrorD1Ev>
   23ce1:	48 89 c2             	mov    %rax,%rdx
   23ce4:	48 8d 05 ed cd 01 00 	lea    0x1cded(%rip),%rax        # 40ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23ceb:	48 89 c6             	mov    %rax,%rsi
   23cee:	48 89 df             	mov    %rbx,%rdi
   23cf1:	e8 8a 16 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   23cf6:	bf 28 00 00 00       	mov    $0x28,%edi
   23cfb:	e8 d0 13 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23d00:	48 89 c3             	mov    %rax,%rbx
   23d03:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23d07:	48 89 c6             	mov    %rax,%rsi
   23d0a:	48 89 df             	mov    %rbx,%rdi
   23d0d:	e8 92 4f fe ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
   23d12:	48 8d 05 cd 84 fe ff 	lea    -0x17b33(%rip),%rax        # c1e6 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
   23d19:	48 89 c2             	mov    %rax,%rdx
   23d1c:	48 8d 05 9d cd 01 00 	lea    0x1cd9d(%rip),%rax        # 40ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23d23:	48 89 c6             	mov    %rax,%rsi
   23d26:	48 89 df             	mov    %rbx,%rdi
   23d29:	e8 52 16 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   23d2e:	bf 28 00 00 00       	mov    $0x28,%edi
   23d33:	e8 98 13 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23d38:	48 89 c3             	mov    %rax,%rbx
   23d3b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23d3f:	48 89 c6             	mov    %rax,%rsi
   23d42:	48 89 df             	mov    %rbx,%rdi
   23d45:	e8 2c 50 fe ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
   23d4a:	48 8d 05 25 84 fe ff 	lea    -0x17bdb(%rip),%rax        # c176 <_ZN2vk20NotPermittedKHRErrorD1Ev>
   23d51:	48 89 c2             	mov    %rax,%rdx
   23d54:	48 8d 05 4d cd 01 00 	lea    0x1cd4d(%rip),%rax        # 40aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23d5b:	48 89 c6             	mov    %rax,%rsi
   23d5e:	48 89 df             	mov    %rbx,%rdi
   23d61:	e8 1a 16 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   23d66:	bf 28 00 00 00       	mov    $0x28,%edi
   23d6b:	e8 60 13 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23d70:	48 89 c3             	mov    %rax,%rbx
   23d73:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23d77:	48 89 c6             	mov    %rax,%rsi
   23d7a:	48 89 df             	mov    %rbx,%rdi
   23d7d:	e8 c6 50 fe ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
   23d82:	48 8d 05 7d 83 fe ff 	lea    -0x17c83(%rip),%rax        # c106 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
   23d89:	48 89 c2             	mov    %rax,%rdx
   23d8c:	48 8d 05 fd cc 01 00 	lea    0x1ccfd(%rip),%rax        # 40a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   23d93:	48 89 c6             	mov    %rax,%rsi
   23d96:	48 89 df             	mov    %rbx,%rdi
   23d99:	e8 e2 15 fe ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
   23d9e:	bf 28 00 00 00       	mov    $0x28,%edi
   23da3:	e8 28 13 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   23da8:	48 89 c3             	mov    %rax,%rbx
   23dab:	8b 45 cc             	mov    -0x34(%rbp),%eax
   23dae:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
   23db1:	0f b6 05 a0 d5 01 00 	movzbl 0x1d5a0(%rip),%eax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
   23db8:	84 c0                	test   %al,%al
   23dba:	0f 94 c0             	sete   %al
   23dbd:	84 c0                	test   %al,%al
   23dbf:	74 4a                	je     23e0b <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   23dc1:	48 8d 05 90 d5 01 00 	lea    0x1d590(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
   23dc8:	48 89 c7             	mov    %rax,%rdi
   23dcb:	e8 f0 15 fe ff       	call   53c0 <__cxa_guard_acquire@plt>
   23dd0:	85 c0                	test   %eax,%eax
   23dd2:	0f 95 c0             	setne  %al
   23dd5:	84 c0                	test   %al,%al
   23dd7:	74 32                	je     23e0b <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   23dd9:	48 8d 05 18 d4 01 00 	lea    0x1d418(%rip),%rax        # 411f8 <__dso_handle>
   23de0:	48 89 c2             	mov    %rax,%rdx
   23de3:	48 8d 05 16 d4 01 00 	lea    0x1d416(%rip),%rax        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
   23dea:	48 89 c6             	mov    %rax,%rsi
   23ded:	48 8d 05 72 8e fe ff 	lea    -0x1718e(%rip),%rax        # cc66 <_ZN2vk17ErrorCategoryImplD1Ev>
   23df4:	48 89 c7             	mov    %rax,%rdi
   23df7:	e8 d4 13 fe ff       	call   51d0 <__cxa_atexit@plt>
   23dfc:	48 8d 05 55 d5 01 00 	lea    0x1d555(%rip),%rax        # 41358 <_ZGVZN2vk13errorCategoryEvE8instance>
   23e03:	48 89 c7             	mov    %rax,%rdi
   23e06:	e8 f5 12 fe ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
   23e0b:	48 8d 15 ee d3 01 00 	lea    0x1d3ee(%rip),%rdx        # 41200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
   23e12:	8b 4d ec             	mov    -0x14(%rbp),%ecx
   23e15:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   23e19:	89 ce                	mov    %ecx,%esi
   23e1b:	48 89 c7             	mov    %rax,%rdi
   23e1e:	e8 e5 24 fe ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
   23e23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   23e27:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
   23e2b:	48 89 c6             	mov    %rax,%rsi
   23e2e:	48 89 d7             	mov    %rdx,%rdi
   23e31:	89 f1                	mov    %esi,%ecx
   23e33:	48 89 d0             	mov    %rdx,%rax
   23e36:	89 ce                	mov    %ecx,%esi
   23e38:	48 89 c2             	mov    %rax,%rdx
   23e3b:	48 89 df             	mov    %rbx,%rdi
   23e3e:	e8 cd 39 fe ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
   23e43:	48 8d 05 fc 3a fe ff 	lea    -0x1c504(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
   23e4a:	48 89 c2             	mov    %rax,%rdx
   23e4d:	48 8d 05 ac ce 01 00 	lea    0x1ceac(%rip),%rax        # 40d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
   23e54:	48 89 c6             	mov    %rax,%rsi
   23e57:	48 89 df             	mov    %rbx,%rdi
   23e5a:	e8 21 15 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   23e5f:	49 89 c4             	mov    %rax,%r12
   23e62:	48 89 df             	mov    %rbx,%rdi
   23e65:	e8 e6 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23e6a:	4c 89 e0             	mov    %r12,%rax
   23e6d:	48 89 c7             	mov    %rax,%rdi
   23e70:	e8 2b 15 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   23e75:	49 89 c4             	mov    %rax,%r12
   23e78:	48 89 df             	mov    %rbx,%rdi
   23e7b:	e8 d0 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23e80:	4c 89 e0             	mov    %r12,%rax
   23e83:	48 89 c7             	mov    %rax,%rdi
   23e86:	e8 15 15 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   23e8b:	49 89 c4             	mov    %rax,%r12
   23e8e:	48 89 df             	mov    %rbx,%rdi
   23e91:	e8 ba 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23e96:	4c 89 e0             	mov    %r12,%rax
   23e99:	48 89 c7             	mov    %rax,%rdi
   23e9c:	e8 ff 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   23ea1:	49 89 c4             	mov    %rax,%r12
   23ea4:	48 89 df             	mov    %rbx,%rdi
   23ea7:	e8 a4 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23eac:	4c 89 e0             	mov    %r12,%rax
   23eaf:	48 89 c7             	mov    %rax,%rdi
   23eb2:	e8 e9 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   23eb7:	49 89 c4             	mov    %rax,%r12
   23eba:	48 89 df             	mov    %rbx,%rdi
   23ebd:	e8 8e 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23ec2:	4c 89 e0             	mov    %r12,%rax
   23ec5:	48 89 c7             	mov    %rax,%rdi
   23ec8:	e8 d3 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   23ecd:	49 89 c4             	mov    %rax,%r12
   23ed0:	48 89 df             	mov    %rbx,%rdi
   23ed3:	e8 78 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23ed8:	4c 89 e0             	mov    %r12,%rax
   23edb:	48 89 c7             	mov    %rax,%rdi
   23ede:	e8 bd 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   23ee3:	49 89 c4             	mov    %rax,%r12
   23ee6:	48 89 df             	mov    %rbx,%rdi
   23ee9:	e8 62 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23eee:	4c 89 e0             	mov    %r12,%rax
   23ef1:	48 89 c7             	mov    %rax,%rdi
   23ef4:	e8 a7 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   23ef9:	49 89 c4             	mov    %rax,%r12
   23efc:	48 89 df             	mov    %rbx,%rdi
   23eff:	e8 4c 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23f04:	4c 89 e0             	mov    %r12,%rax
   23f07:	48 89 c7             	mov    %rax,%rdi
   23f0a:	e8 91 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   23f0f:	49 89 c4             	mov    %rax,%r12
   23f12:	48 89 df             	mov    %rbx,%rdi
   23f15:	e8 36 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23f1a:	4c 89 e0             	mov    %r12,%rax
   23f1d:	48 89 c7             	mov    %rax,%rdi
   23f20:	e8 7b 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   23f25:	49 89 c4             	mov    %rax,%r12
   23f28:	48 89 df             	mov    %rbx,%rdi
   23f2b:	e8 20 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23f30:	4c 89 e0             	mov    %r12,%rax
   23f33:	48 89 c7             	mov    %rax,%rdi
   23f36:	e8 65 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   23f3b:	49 89 c4             	mov    %rax,%r12
   23f3e:	48 89 df             	mov    %rbx,%rdi
   23f41:	e8 0a 12 fe ff       	call   5150 <__cxa_free_exception@plt>
   23f46:	4c 89 e0             	mov    %r12,%rax
   23f49:	48 89 c7             	mov    %rax,%rdi
   23f4c:	e8 4f 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   23f51:	49 89 c4             	mov    %rax,%r12
   23f54:	48 89 df             	mov    %rbx,%rdi
   23f57:	e8 f4 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   23f5c:	4c 89 e0             	mov    %r12,%rax
   23f5f:	48 89 c7             	mov    %rax,%rdi
   23f62:	e8 39 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   23f67:	49 89 c4             	mov    %rax,%r12
   23f6a:	48 89 df             	mov    %rbx,%rdi
   23f6d:	e8 de 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   23f72:	4c 89 e0             	mov    %r12,%rax
   23f75:	48 89 c7             	mov    %rax,%rdi
   23f78:	e8 23 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   23f7d:	49 89 c4             	mov    %rax,%r12
   23f80:	48 89 df             	mov    %rbx,%rdi
   23f83:	e8 c8 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   23f88:	4c 89 e0             	mov    %r12,%rax
   23f8b:	48 89 c7             	mov    %rax,%rdi
   23f8e:	e8 0d 14 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   23f93:	49 89 c4             	mov    %rax,%r12
   23f96:	48 89 df             	mov    %rbx,%rdi
   23f99:	e8 b2 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   23f9e:	4c 89 e0             	mov    %r12,%rax
   23fa1:	48 89 c7             	mov    %rax,%rdi
   23fa4:	e8 f7 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   23fa9:	49 89 c4             	mov    %rax,%r12
   23fac:	48 89 df             	mov    %rbx,%rdi
   23faf:	e8 9c 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   23fb4:	4c 89 e0             	mov    %r12,%rax
   23fb7:	48 89 c7             	mov    %rax,%rdi
   23fba:	e8 e1 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   23fbf:	49 89 c4             	mov    %rax,%r12
   23fc2:	48 89 df             	mov    %rbx,%rdi
   23fc5:	e8 86 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   23fca:	4c 89 e0             	mov    %r12,%rax
   23fcd:	48 89 c7             	mov    %rax,%rdi
   23fd0:	e8 cb 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   23fd5:	49 89 c4             	mov    %rax,%r12
   23fd8:	48 89 df             	mov    %rbx,%rdi
   23fdb:	e8 70 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   23fe0:	4c 89 e0             	mov    %r12,%rax
   23fe3:	48 89 c7             	mov    %rax,%rdi
   23fe6:	e8 b5 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   23feb:	49 89 c4             	mov    %rax,%r12
   23fee:	48 89 df             	mov    %rbx,%rdi
   23ff1:	e8 5a 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   23ff6:	4c 89 e0             	mov    %r12,%rax
   23ff9:	48 89 c7             	mov    %rax,%rdi
   23ffc:	e8 9f 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   24001:	49 89 c4             	mov    %rax,%r12
   24004:	48 89 df             	mov    %rbx,%rdi
   24007:	e8 44 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   2400c:	4c 89 e0             	mov    %r12,%rax
   2400f:	48 89 c7             	mov    %rax,%rdi
   24012:	e8 89 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   24017:	49 89 c4             	mov    %rax,%r12
   2401a:	48 89 df             	mov    %rbx,%rdi
   2401d:	e8 2e 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   24022:	4c 89 e0             	mov    %r12,%rax
   24025:	48 89 c7             	mov    %rax,%rdi
   24028:	e8 73 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   2402d:	49 89 c4             	mov    %rax,%r12
   24030:	48 89 df             	mov    %rbx,%rdi
   24033:	e8 18 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   24038:	4c 89 e0             	mov    %r12,%rax
   2403b:	48 89 c7             	mov    %rax,%rdi
   2403e:	e8 5d 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   24043:	49 89 c4             	mov    %rax,%r12
   24046:	48 89 df             	mov    %rbx,%rdi
   24049:	e8 02 11 fe ff       	call   5150 <__cxa_free_exception@plt>
   2404e:	4c 89 e0             	mov    %r12,%rax
   24051:	48 89 c7             	mov    %rax,%rdi
   24054:	e8 47 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   24059:	49 89 c4             	mov    %rax,%r12
   2405c:	48 89 df             	mov    %rbx,%rdi
   2405f:	e8 ec 10 fe ff       	call   5150 <__cxa_free_exception@plt>
   24064:	4c 89 e0             	mov    %r12,%rax
   24067:	48 89 c7             	mov    %rax,%rdi
   2406a:	e8 31 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   2406f:	49 89 c4             	mov    %rax,%r12
   24072:	48 89 df             	mov    %rbx,%rdi
   24075:	e8 d6 10 fe ff       	call   5150 <__cxa_free_exception@plt>
   2407a:	4c 89 e0             	mov    %r12,%rax
   2407d:	48 89 c7             	mov    %rax,%rdi
   24080:	e8 1b 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   24085:	49 89 c4             	mov    %rax,%r12
   24088:	48 89 df             	mov    %rbx,%rdi
   2408b:	e8 c0 10 fe ff       	call   5150 <__cxa_free_exception@plt>
   24090:	4c 89 e0             	mov    %r12,%rax
   24093:	48 89 c7             	mov    %rax,%rdi
   24096:	e8 05 13 fe ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
   2409b:	49 89 c4             	mov    %rax,%r12
   2409e:	48 89 df             	mov    %rbx,%rdi
   240a1:	e8 aa 10 fe ff       	call   5150 <__cxa_free_exception@plt>
   240a6:	4c 89 e0             	mov    %r12,%rax
   240a9:	48 89 c7             	mov    %rax,%rdi
   240ac:	e8 ef 12 fe ff       	call   53a0 <_Unwind_Resume@plt>

00000000000240b1 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:

VKAPI_ATTR VkBool32 VKAPI_CALL
debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
              [[maybe_unused]] VkDebugUtilsMessageTypeFlagsEXT messageType,
              const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
              [[maybe_unused]] void *pUserData) {
   240b1:	55                   	push   %rbp
   240b2:	48 89 e5             	mov    %rsp,%rbp
   240b5:	48 83 ec 20          	sub    $0x20,%rsp
   240b9:	89 7d fc             	mov    %edi,-0x4(%rbp)
   240bc:	89 75 f8             	mov    %esi,-0x8(%rbp)
   240bf:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   240c3:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  if (messageSeverity > VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT) {
   240c7:	8b 45 fc             	mov    -0x4(%rbp),%eax
   240ca:	83 f8 01             	cmp    $0x1,%eax
   240cd:	7e 3c                	jle    2410b <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x5a>
    std::cerr << '\n' << pCallbackData->pMessage << std::endl;
   240cf:	be 0a 00 00 00       	mov    $0xa,%esi
   240d4:	48 8d 05 65 d1 01 00 	lea    0x1d165(%rip),%rax        # 41240 <_ZSt4cerr@GLIBCXX_3.4>
   240db:	48 89 c7             	mov    %rax,%rdi
   240de:	e8 bd 11 fe ff       	call   52a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
   240e3:	48 89 c2             	mov    %rax,%rdx
   240e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   240ea:	48 8b 40 28          	mov    0x28(%rax),%rax
   240ee:	48 89 c6             	mov    %rax,%rsi
   240f1:	48 89 d7             	mov    %rdx,%rdi
   240f4:	e8 17 11 fe ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   240f9:	48 8b 15 a0 ce 01 00 	mov    0x1cea0(%rip),%rdx        # 40fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
   24100:	48 89 d6             	mov    %rdx,%rsi
   24103:	48 89 c7             	mov    %rax,%rdi
   24106:	e8 55 11 fe ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  }
  return VK_FALSE;
   2410b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   24110:	c9                   	leave
   24111:	c3                   	ret

0000000000024112 <_ZN4rtvc24validationLayerSupportedEv>:

bool validationLayerSupported() {
   24112:	55                   	push   %rbp
   24113:	48 89 e5             	mov    %rsp,%rbp
   24116:	41 54                	push   %r12
   24118:	53                   	push   %rbx
   24119:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  auto supportedLayers = vk::enumerateInstanceLayerProperties();
   2411d:	e8 2b f5 ff ff       	call   2364d <_ZN2vkL23getDispatchLoaderStaticEv>
   24122:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   24126:	48 8d 5d b0          	lea    -0x50(%rbp),%rbx
#ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE
  template <typename LayerPropertiesAllocator, typename Dispatch>
  VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE typename ResultValueType<std::vector<VULKAN_HPP_NAMESPACE::LayerProperties, LayerPropertiesAllocator>>::type
                       enumerateInstanceLayerProperties( Dispatch const & d )
  {
    VULKAN_HPP_ASSERT( d.getVkHeaderVersion() == VK_HEADER_VERSION );
   2412a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2412e:	48 89 c7             	mov    %rax,%rdi
   24131:	e8 1c 24 fe ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   24136:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   2413c:	74 28                	je     24166 <_ZN4rtvc24validationLayerSupportedEv+0x54>
   2413e:	48 8d 05 a3 d4 00 00 	lea    0xd4a3(%rip),%rax        # 315e8 <_ZNSt8__detailL19__atomic_spin_countE+0xd2c>
   24145:	48 89 c1             	mov    %rax,%rcx
   24148:	ba 68 02 00 00       	mov    $0x268,%edx
   2414d:	48 8d 05 0c d6 00 00 	lea    0xd60c(%rip),%rax        # 31760 <_ZNSt8__detailL19__atomic_spin_countE+0xea4>
   24154:	48 89 c6             	mov    %rax,%rsi
   24157:	48 8d 05 2a d6 00 00 	lea    0xd62a(%rip),%rax        # 31788 <_ZNSt8__detailL19__atomic_spin_countE+0xecc>
   2415e:	48 89 c7             	mov    %rax,%rdi
   24161:	e8 aa 0f fe ff       	call   5110 <__assert_fail@plt>

    std::vector<VULKAN_HPP_NAMESPACE::LayerProperties, LayerPropertiesAllocator> properties;
   24166:	66 0f ef c0          	pxor   %xmm0,%xmm0
   2416a:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
   2416e:	66 0f d6 45 a0       	movq   %xmm0,-0x60(%rbp)
    uint32_t                                                                     propertyCount;
    VkResult                                                                     result;
    do
    {
      result = d.vkEnumerateInstanceLayerProperties( &propertyCount, nullptr );
   24173:	48 8d 4d 8c          	lea    -0x74(%rbp),%rcx
   24177:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2417b:	ba 00 00 00 00       	mov    $0x0,%edx
   24180:	48 89 ce             	mov    %rcx,%rsi
   24183:	48 89 c7             	mov    %rax,%rdi
   24186:	e8 5d 07 00 00       	call   248e8 <_ZNK2vk20DispatchLoaderStatic34vkEnumerateInstanceLayerPropertiesEPjP17VkLayerProperties>
   2418b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
      if ( ( result == VK_SUCCESS ) && propertyCount )
   2418e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   24192:	75 40                	jne    241d4 <_ZN4rtvc24validationLayerSupportedEv+0xc2>
   24194:	8b 45 8c             	mov    -0x74(%rbp),%eax
   24197:	85 c0                	test   %eax,%eax
   24199:	74 39                	je     241d4 <_ZN4rtvc24validationLayerSupportedEv+0xc2>
      {
        properties.resize( propertyCount );
   2419b:	8b 45 8c             	mov    -0x74(%rbp),%eax
   2419e:	89 c2                	mov    %eax,%edx
   241a0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   241a4:	48 89 d6             	mov    %rdx,%rsi
   241a7:	48 89 c7             	mov    %rax,%rdi
   241aa:	e8 b3 3e ff ff       	call   18062 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
        result = d.vkEnumerateInstanceLayerProperties( &propertyCount, reinterpret_cast<VkLayerProperties *>( properties.data() ) );
   241af:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   241b3:	48 89 c7             	mov    %rax,%rdi
   241b6:	e8 39 3f ff ff       	call   180f4 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE4dataEv>
   241bb:	48 89 c2             	mov    %rax,%rdx
   241be:	48 8d 4d 8c          	lea    -0x74(%rbp),%rcx
   241c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   241c6:	48 89 ce             	mov    %rcx,%rsi
   241c9:	48 89 c7             	mov    %rax,%rdi
   241cc:	e8 17 07 00 00       	call   248e8 <_ZNK2vk20DispatchLoaderStatic34vkEnumerateInstanceLayerPropertiesEPjP17VkLayerProperties>
   241d1:	89 45 d4             	mov    %eax,-0x2c(%rbp)
      }
    } while ( result == VK_INCOMPLETE );
   241d4:	83 7d d4 05          	cmpl   $0x5,-0x2c(%rbp)
   241d8:	74 99                	je     24173 <_ZN4rtvc24validationLayerSupportedEv+0x61>
   241da:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   241dd:	89 45 d0             	mov    %eax,-0x30(%rbp)
   241e0:	48 8d 05 d1 d5 00 00 	lea    0xd5d1(%rip),%rax        # 317b8 <_ZNSt8__detailL19__atomic_spin_countE+0xefc>
   241e7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    if ( result != Result::eSuccess )
   241eb:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
   241ef:	74 11                	je     24202 <_ZN4rtvc24validationLayerSupportedEv+0xf0>
      throwResultException( result, message );
   241f1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   241f5:	8b 45 d0             	mov    -0x30(%rbp),%eax
   241f8:	48 89 d6             	mov    %rdx,%rsi
   241fb:	89 c7                	mov    %eax,%edi
   241fd:	e8 58 f4 ff ff       	call   2365a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
   24202:	90                   	nop
    resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::enumerateInstanceLayerProperties" );
    VULKAN_HPP_ASSERT( propertyCount <= properties.size() );
   24203:	8b 45 8c             	mov    -0x74(%rbp),%eax
   24206:	41 89 c4             	mov    %eax,%r12d
   24209:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   2420d:	48 89 c7             	mov    %rax,%rdi
   24210:	e8 03 3f ff ff       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   24215:	4c 39 e0             	cmp    %r12,%rax
   24218:	73 28                	jae    24242 <_ZN4rtvc24validationLayerSupportedEv+0x130>
   2421a:	48 8d 05 c7 d3 00 00 	lea    0xd3c7(%rip),%rax        # 315e8 <_ZNSt8__detailL19__atomic_spin_countE+0xd2c>
   24221:	48 89 c1             	mov    %rax,%rcx
   24224:	ba 77 02 00 00       	mov    $0x277,%edx
   24229:	48 8d 05 30 d5 00 00 	lea    0xd530(%rip),%rax        # 31760 <_ZNSt8__detailL19__atomic_spin_countE+0xea4>
   24230:	48 89 c6             	mov    %rax,%rsi
   24233:	48 8d 05 a6 d5 00 00 	lea    0xd5a6(%rip),%rax        # 317e0 <_ZNSt8__detailL19__atomic_spin_countE+0xf24>
   2423a:	48 89 c7             	mov    %rax,%rdi
   2423d:	e8 ce 0e fe ff       	call   5110 <__assert_fail@plt>
    if ( propertyCount < properties.size() )
   24242:	8b 45 8c             	mov    -0x74(%rbp),%eax
   24245:	41 89 c4             	mov    %eax,%r12d
   24248:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   2424c:	48 89 c7             	mov    %rax,%rdi
   2424f:	e8 c4 3e ff ff       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   24254:	49 39 c4             	cmp    %rax,%r12
   24257:	0f 92 c0             	setb   %al
   2425a:	84 c0                	test   %al,%al
   2425c:	74 14                	je     24272 <_ZN4rtvc24validationLayerSupportedEv+0x160>
    {
      properties.resize( propertyCount );
   2425e:	8b 45 8c             	mov    -0x74(%rbp),%eax
   24261:	89 c2                	mov    %eax,%edx
   24263:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   24267:	48 89 d6             	mov    %rdx,%rsi
   2426a:	48 89 c7             	mov    %rax,%rdi
   2426d:	e8 f0 3d ff ff       	call   18062 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
   24272:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   24275:	89 45 88             	mov    %eax,-0x78(%rbp)
    ignore( result );
   24278:	48 8d 45 88          	lea    -0x78(%rbp),%rax
   2427c:	48 89 c7             	mov    %rax,%rdi
   2427f:	e8 5e 1d 00 00       	call   25fe2 <_ZN2vk6ignoreINS_6ResultEEEvRKT_>
    return data;
   24284:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   24288:	48 89 c6             	mov    %rax,%rsi
   2428b:	48 89 df             	mov    %rbx,%rdi
   2428e:	e8 2b 22 00 00       	call   264be <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EEC1ERKS3_>
   24293:	90                   	nop
    }
    return createResultValueType( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), properties );
  }
   24294:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   24298:	48 89 c7             	mov    %rax,%rdi
   2429b:	e8 7e 3d ff ff       	call   1801e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    return createResultValueType( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), properties );
   242a0:	90                   	nop
  for (const auto &supportedLayer : supportedLayers) {
   242a1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   242a5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   242a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   242ad:	48 89 c7             	mov    %rax,%rdi
   242b0:	e8 0f 43 ff ff       	call   185c4 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>
   242b5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   242b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   242bd:	48 89 c7             	mov    %rax,%rdi
   242c0:	e8 25 43 ff ff       	call   185ea <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>
   242c5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   242cc:	eb 66                	jmp    24334 <_ZN4rtvc24validationLayerSupportedEv+0x222>
  }
   242ce:	48 89 c3             	mov    %rax,%rbx
   242d1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   242d5:	48 89 c7             	mov    %rax,%rdi
   242d8:	e8 41 3d ff ff       	call   1801e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
   242dd:	48 89 d8             	mov    %rbx,%rax
   242e0:	48 89 c7             	mov    %rax,%rdi
   242e3:	e8 b8 10 fe ff       	call   53a0 <_Unwind_Resume@plt>
   242e8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   242ec:	48 89 c7             	mov    %rax,%rdi
   242ef:	e8 f6 32 ff ff       	call   175ea <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
   242f4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (supportedLayer.layerName == validationLayerName) {
   242f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   242fc:	48 89 c7             	mov    %rax,%rdi
   242ff:	e8 ba 1d 00 00       	call   260be <_ZNK2vk14ArrayWrapper1DIcLm256EEcvSt17basic_string_viewIcSt11char_traitsIcEEIcLi0EEEv>
   24304:	48 8b 3d 75 c6 01 00 	mov    0x1c675(%rip),%rdi        # 40980 <_ZN4rtvc19validationLayerNameE>
   2430b:	48 8b 35 76 c6 01 00 	mov    0x1c676(%rip),%rsi        # 40988 <_ZN4rtvc19validationLayerNameE+0x8>
   24312:	48 89 d1             	mov    %rdx,%rcx
   24315:	48 89 c2             	mov    %rax,%rdx
   24318:	e8 e6 1d 00 00       	call   26103 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>
   2431d:	84 c0                	test   %al,%al
   2431f:	74 07                	je     24328 <_ZN4rtvc24validationLayerSupportedEv+0x216>
      return true;
   24321:	bb 01 00 00 00       	mov    $0x1,%ebx
   24326:	eb 2e                	jmp    24356 <_ZN4rtvc24validationLayerSupportedEv+0x244>
  for (const auto &supportedLayer : supportedLayers) {
   24328:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   2432c:	48 89 c7             	mov    %rax,%rdi
   2432f:	e8 e0 42 ff ff       	call   18614 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>
   24334:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
   2433b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   2433f:	48 89 d6             	mov    %rdx,%rsi
   24342:	48 89 c7             	mov    %rax,%rdi
   24345:	e8 57 32 ff ff       	call   175a1 <_ZN9__gnu_cxxeqIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   2434a:	83 f0 01             	xor    $0x1,%eax
   2434d:	84 c0                	test   %al,%al
   2434f:	75 97                	jne    242e8 <_ZN4rtvc24validationLayerSupportedEv+0x1d6>
    }
  }
  return false;
   24351:	bb 00 00 00 00       	mov    $0x0,%ebx
}
   24356:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   2435a:	48 89 c7             	mov    %rax,%rdi
   2435d:	e8 bc 3c ff ff       	call   1801e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
   24362:	89 d8                	mov    %ebx,%eax
   24364:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp
   24368:	5b                   	pop    %rbx
   24369:	41 5c                	pop    %r12
   2436b:	5d                   	pop    %rbp
   2436c:	c3                   	ret

000000000002436d <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE>:

vk::raii::Instance makeInstance(const vk::raii::Context &context) {
   2436d:	55                   	push   %rbp
   2436e:	48 89 e5             	mov    %rsp,%rbp
   24371:	41 55                	push   %r13
   24373:	41 54                	push   %r12
   24375:	53                   	push   %rbx
   24376:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
   2437d:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
   24384:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  vk::ApplicationInfo applicationInfo{
   2438b:	c7 85 60 ff ff ff 00 	movl   $0x0,-0xa0(%rbp)
   24392:	00 00 00 
   24395:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   2439c:	00 00 00 00 
   243a0:	48 8d 05 92 d4 00 00 	lea    0xd492(%rip),%rax        # 31839 <_ZNSt8__detailL19__atomic_spin_countE+0xf7d>
   243a7:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   243ae:	c7 85 78 ff ff ff 00 	movl   $0x400000,-0x88(%rbp)
   243b5:	00 40 00 
   243b8:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
   243bf:	00 
   243c0:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
   243c7:	c7 45 8c 00 00 40 00 	movl   $0x400000,-0x74(%rbp)
      .applicationVersion{VK_MAKE_VERSION(1, 0, 0)},
      .apiVersion{VK_API_VERSION_1_0},
  };

  // Required extensions
  uint32_t requiredExtensionCount = 0;
   243ce:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
   243d5:	00 00 00 
  auto ppRequiredExtensions =
      glfwGetRequiredInstanceExtensions(&requiredExtensionCount);
   243d8:	48 8d 85 5c ff ff ff 	lea    -0xa4(%rbp),%rax
   243df:	48 89 c7             	mov    %rax,%rdi
   243e2:	e8 89 0d fe ff       	call   5170 <glfwGetRequiredInstanceExtensions@plt>
   243e7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  std::vector<const char *> requiredExtensions{requiredExtensionCount};
   243eb:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   243f1:	89 c3                	mov    %eax,%ebx
   243f3:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
   243f7:	48 89 c7             	mov    %rax,%rdi
   243fa:	e8 01 2a ff ff       	call   16e00 <_ZNSaIPKcEC1Ev>
   243ff:	48 8d 55 9f          	lea    -0x61(%rbp),%rdx
   24403:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   2440a:	48 89 de             	mov    %rbx,%rsi
   2440d:	48 89 c7             	mov    %rax,%rdi
   24410:	e8 63 1d 00 00       	call   26178 <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>
   24415:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
   24419:	48 89 c7             	mov    %rax,%rdi
   2441c:	e8 07 2a ff ff       	call   16e28 <_ZNSaIPKcED1Ev>
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
   24421:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   24428:	00 
   24429:	eb 34                	jmp    2445f <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0xf2>
    requiredExtensions[i] = ppRequiredExtensions[i];
   2442b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2442f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   24436:	00 
   24437:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2443b:	48 01 d0             	add    %rdx,%rax
   2443e:	48 8b 18             	mov    (%rax),%rbx
   24441:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   24445:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   2444c:	48 89 d6             	mov    %rdx,%rsi
   2444f:	48 89 c7             	mov    %rax,%rdi
   24452:	e8 97 1d 00 00       	call   261ee <_ZNSt6vectorIPKcSaIS1_EEixEm>
   24457:	48 89 18             	mov    %rbx,(%rax)
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
   2445a:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
   2445f:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   24465:	89 c0                	mov    %eax,%eax
   24467:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
   2446b:	72 be                	jb     2442b <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0xbe>
  }

  // Requested layers
  std::vector<const char *> requestedLayers = {
      mangohudLayerName.data(),
  };
   2446d:	48 8d 05 d8 d3 00 00 	lea    0xd3d8(%rip),%rax        # 3184c <_ZNSt8__detailL19__atomic_spin_countE+0xf90>
   24474:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   24478:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   2447c:	49 89 c4             	mov    %rax,%r12
   2447f:	41 bd 01 00 00 00    	mov    $0x1,%r13d
   24485:	48 8d 45 af          	lea    -0x51(%rbp),%rax
   24489:	48 89 c7             	mov    %rax,%rdi
   2448c:	e8 6f 29 ff ff       	call   16e00 <_ZNSaIPKcEC1Ev>
   24491:	48 8d 55 af          	lea    -0x51(%rbp),%rdx
   24495:	4c 89 e6             	mov    %r12,%rsi
   24498:	4c 89 ef             	mov    %r13,%rdi
   2449b:	4c 89 e1             	mov    %r12,%rcx
   2449e:	4c 89 eb             	mov    %r13,%rbx
   244a1:	48 89 df             	mov    %rbx,%rdi
   244a4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   244ab:	48 89 d1             	mov    %rdx,%rcx
   244ae:	48 89 fa             	mov    %rdi,%rdx
   244b1:	48 89 c7             	mov    %rax,%rdi
   244b4:	e8 bf 28 ff ff       	call   16d78 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
   244b9:	48 8d 45 af          	lea    -0x51(%rbp),%rax
   244bd:	48 89 c7             	mov    %rax,%rdi
   244c0:	e8 63 29 ff ff       	call   16e28 <_ZNSaIPKcED1Ev>

  // Enable validation layers if the application is running in debug mode
  vk::DebugUtilsMessengerCreateInfoEXT *pDebugInfo = nullptr;
   244c5:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   244cc:	00 
  vk::DebugUtilsMessengerCreateInfoEXT debugInfo{};
   244cd:	c7 85 f0 fe ff ff 04 	movl   $0x3b9cbe04,-0x110(%rbp)
   244d4:	be 9c 3b 
   244d7:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
   244de:	00 00 00 00 
   244e2:	c7 85 00 ff ff ff 00 	movl   $0x0,-0x100(%rbp)
   244e9:	00 00 00 
   244ec:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
   244f3:	00 00 00 
   244f6:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
   244fd:	00 00 00 
   24500:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
   24507:	00 00 00 00 
   2450b:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
   24512:	00 00 00 00 
  if constexpr (debugMode) {
    if (validationLayerSupported()) {
   24516:	e8 f7 fb ff ff       	call   24112 <_ZN4rtvc24validationLayerSupportedEv>
   2451b:	84 c0                	test   %al,%al
   2451d:	0f 84 b8 00 00 00    	je     245db <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0x26e>
      requiredExtensions.push_back(VK_EXT_DEBUG_UTILS_EXTENSION_NAME);
   24523:	48 8d 05 3c d3 00 00 	lea    0xd33c(%rip),%rax        # 31866 <_ZNSt8__detailL19__atomic_spin_countE+0xfaa>
   2452a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2452e:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
   24532:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   24539:	48 89 d6             	mov    %rdx,%rsi
   2453c:	48 89 c7             	mov    %rax,%rdi
   2453f:	e8 ca 1c 00 00       	call   2620e <_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_>
      requestedLayers.push_back(validationLayerName.data());
   24544:	48 8d 05 35 c4 01 00 	lea    0x1c435(%rip),%rax        # 40980 <_ZN4rtvc19validationLayerNameE>
   2454b:	48 89 c7             	mov    %rax,%rdi
   2454e:	e8 43 1a 00 00       	call   25f96 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
   24553:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   24557:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   2455b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   24562:	48 89 d6             	mov    %rdx,%rsi
   24565:	48 89 c7             	mov    %rax,%rdi
   24568:	e8 a1 1c 00 00       	call   2620e <_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_>

      debugInfo = makeDebugMessengerInfo();
   2456d:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
   24574:	48 89 c7             	mov    %rax,%rdi
   24577:	e8 c9 01 00 00       	call   24745 <_ZN4rtvc22makeDebugMessengerInfoEv>
   2457c:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
   24583:	48 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%rdx
   2458a:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   24591:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
   24598:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
   2459f:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
   245a6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   245ad:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
   245b4:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
   245bb:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
   245c2:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   245c9:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
      pDebugInfo = &debugInfo;
   245d0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   245d7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    }
  }

  vk::InstanceCreateInfo instanceInfo{
   245db:	66 0f ef c0          	pxor   %xmm0,%xmm0
   245df:	0f 29 85 b0 fe ff ff 	movaps %xmm0,-0x150(%rbp)
   245e6:	0f 29 85 c0 fe ff ff 	movaps %xmm0,-0x140(%rbp)
   245ed:	0f 29 85 d0 fe ff ff 	movaps %xmm0,-0x130(%rbp)
   245f4:	0f 29 85 e0 fe ff ff 	movaps %xmm0,-0x120(%rbp)
   245fb:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
   24602:	00 00 00 
      .pApplicationInfo{&applicationInfo},
      .enabledLayerCount{static_cast<uint32_t>(requestedLayers.size())},
      .ppEnabledLayerNames{requestedLayers.data()},
      .enabledExtensionCount{static_cast<uint32_t>(requiredExtensions.size())},
      .ppEnabledExtensionNames{requiredExtensions.data()},
  };
   24605:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24609:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
   24610:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   24617:	48 83 c0 10          	add    $0x10,%rax
   2461b:	48 89 c7             	mov    %rax,%rdi
   2461e:	e8 cb 19 00 00       	call   25fee <_ZN2vk5FlagsINS_22InstanceCreateFlagBitsEEC1Ev>
   24623:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   2462a:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
      .enabledLayerCount{static_cast<uint32_t>(requestedLayers.size())},
   24631:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   24638:	48 89 c7             	mov    %rax,%rdi
   2463b:	e8 30 30 ff ff       	call   17670 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  };
   24640:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%rbp)
      .ppEnabledLayerNames{requestedLayers.data()},
   24646:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   2464d:	48 89 c7             	mov    %rax,%rdi
   24650:	e8 69 19 00 00       	call   25fbe <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
  };
   24655:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
      .enabledExtensionCount{static_cast<uint32_t>(requiredExtensions.size())},
   2465c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   24663:	48 89 c7             	mov    %rax,%rdi
   24666:	e8 05 30 ff ff       	call   17670 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  };
   2466b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%rbp)
      .ppEnabledExtensionNames{requiredExtensions.data()},
   24671:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   24678:	48 89 c7             	mov    %rax,%rdi
   2467b:	e8 3e 19 00 00       	call   25fbe <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
  };
   24680:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  return {context, instanceInfo};
   24687:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   2468b:	be 00 00 00 00       	mov    $0x0,%esi
   24690:	48 89 c7             	mov    %rax,%rdi
   24693:	e8 54 40 ff ff       	call   186ec <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
   24698:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   2469c:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
   246a3:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
   246aa:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   246b1:	48 89 c7             	mov    %rax,%rdi
   246b4:	e8 d5 15 00 00       	call   25c8e <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
}
   246b9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   246c0:	48 89 c7             	mov    %rax,%rdi
   246c3:	e8 a6 3b ff ff       	call   1826e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   246c8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   246cf:	48 89 c7             	mov    %rax,%rdi
   246d2:	e8 97 3b ff ff       	call   1826e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
  return {context, instanceInfo};
   246d7:	eb 57                	jmp    24730 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0x3c3>
  std::vector<const char *> requiredExtensions{requiredExtensionCount};
   246d9:	48 89 c3             	mov    %rax,%rbx
   246dc:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
   246e0:	48 89 c7             	mov    %rax,%rdi
   246e3:	e8 40 27 ff ff       	call   16e28 <_ZNSaIPKcED1Ev>
   246e8:	48 89 d8             	mov    %rbx,%rax
   246eb:	48 89 c7             	mov    %rax,%rdi
   246ee:	e8 ad 0c fe ff       	call   53a0 <_Unwind_Resume@plt>
  };
   246f3:	48 89 c3             	mov    %rax,%rbx
   246f6:	48 8d 45 af          	lea    -0x51(%rbp),%rax
   246fa:	48 89 c7             	mov    %rax,%rdi
   246fd:	e8 26 27 ff ff       	call   16e28 <_ZNSaIPKcED1Ev>
   24702:	eb 12                	jmp    24716 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0x3a9>
}
   24704:	48 89 c3             	mov    %rax,%rbx
   24707:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   2470e:	48 89 c7             	mov    %rax,%rdi
   24711:	e8 58 3b ff ff       	call   1826e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   24716:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   2471d:	48 89 c7             	mov    %rax,%rdi
   24720:	e8 49 3b ff ff       	call   1826e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   24725:	48 89 d8             	mov    %rbx,%rax
   24728:	48 89 c7             	mov    %rax,%rdi
   2472b:	e8 70 0c fe ff       	call   53a0 <_Unwind_Resume@plt>
   24730:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   24737:	48 81 c4 78 01 00 00 	add    $0x178,%rsp
   2473e:	5b                   	pop    %rbx
   2473f:	41 5c                	pop    %r12
   24741:	41 5d                	pop    %r13
   24743:	5d                   	pop    %rbp
   24744:	c3                   	ret

0000000000024745 <_ZN4rtvc22makeDebugMessengerInfoEv>:

[[nodiscard]] vk::DebugUtilsMessengerCreateInfoEXT makeDebugMessengerInfo() {
   24745:	55                   	push   %rbp
   24746:	48 89 e5             	mov    %rsp,%rbp
   24749:	48 83 ec 10          	sub    $0x10,%rsp
   2474d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
          vk::DebugUtilsMessageTypeFlagBitsEXT::eGeneral |
          vk::DebugUtilsMessageTypeFlagBitsEXT::eValidation |
          vk::DebugUtilsMessageTypeFlagBitsEXT::ePerformance |
          vk::DebugUtilsMessageTypeFlagBitsEXT::eDeviceAddressBinding,
      .pfnUserCallback = debugCallback,
  };
   24751:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24755:	c7 00 04 be 9c 3b    	movl   $0x3b9cbe04,(%rax)
   2475b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2475f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   24766:	00 
   24767:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2476b:	48 83 c0 10          	add    $0x10,%rax
   2476f:	48 89 c7             	mov    %rax,%rdi
   24772:	e8 31 18 00 00       	call   25fa8 <_ZN2vk5FlagsINS_36DebugUtilsMessengerCreateFlagBitsEXTEEC1Ev>
   24777:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2477b:	c7 40 14 11 11 00 00 	movl   $0x1111,0x14(%rax)
   24782:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24786:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%rax)
   2478d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24791:	48 8d 15 19 f9 ff ff 	lea    -0x6e7(%rip),%rdx        # 240b1 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>
   24798:	48 89 50 20          	mov    %rdx,0x20(%rax)
   2479c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   247a0:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   247a7:	00 
}
   247a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   247ac:	c9                   	leave
   247ad:	c3                   	ret

00000000000247ae <_ZN4rtvc18makeDebugMessengerERKN2vk4raii8InstanceE>:

vk::raii::DebugUtilsMessengerEXT
makeDebugMessenger(const vk::raii::Instance &instance) {
   247ae:	55                   	push   %rbp
   247af:	48 89 e5             	mov    %rsp,%rbp
   247b2:	48 83 ec 50          	sub    $0x50,%rsp
   247b6:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   247ba:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  if constexpr (debugMode) {
    return {instance, makeDebugMessengerInfo()};
   247be:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   247c2:	48 89 c7             	mov    %rax,%rdi
   247c5:	e8 7b ff ff ff       	call   24745 <_ZN4rtvc22makeDebugMessengerInfoEv>
   247ca:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   247ce:	be 00 00 00 00       	mov    $0x0,%esi
   247d3:	48 89 c7             	mov    %rax,%rdi
   247d6:	e8 11 3f ff ff       	call   186ec <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
   247db:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   247df:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
   247e3:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   247e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   247eb:	48 89 c7             	mov    %rax,%rdi
   247ee:	e8 e9 15 00 00       	call   25ddc <_ZN2vk4raii22DebugUtilsMessengerEXTC1ERKNS0_8InstanceERKNS_32DebugUtilsMessengerCreateInfoEXTENS_8OptionalIKNS_19AllocationCallbacksEEE>
  }
  return {VK_NULL_HANDLE};
}
   247f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   247f7:	c9                   	leave
   247f8:	c3                   	ret

00000000000247f9 <_ZN4rtvc11makeSurfaceERKN2vk4raii8InstanceERKNS_6WindowE>:

vk::raii::SurfaceKHR makeSurface(const vk::raii::Instance &instance,
                                 const Window &window) {
   247f9:	55                   	push   %rbp
   247fa:	48 89 e5             	mov    %rsp,%rbp
   247fd:	53                   	push   %rbx
   247fe:	48 83 ec 38          	sub    $0x38,%rsp
   24802:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   24806:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   2480a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkSurfaceKHR surface;
  glfwCreateWindowSurface(static_cast<VkInstance>(*instance), *window, nullptr,
   2480e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   24812:	48 89 c7             	mov    %rax,%rdi
   24815:	e8 90 55 fe ff       	call   9daa <_ZNK4rtvc6WindowdeEv>
   2481a:	48 89 c3             	mov    %rax,%rbx
   2481d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24821:	48 89 c7             	mov    %rax,%rdi
   24824:	e8 b9 1c ff ff       	call   164e2 <_ZNK2vk4raii8InstancedeEv>
   24829:	48 89 c7             	mov    %rax,%rdi
   2482c:	e8 e1 48 fe ff       	call   9112 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   24831:	48 89 c7             	mov    %rax,%rdi
   24834:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   24838:	48 89 c1             	mov    %rax,%rcx
   2483b:	ba 00 00 00 00       	mov    $0x0,%edx
   24840:	48 89 de             	mov    %rbx,%rsi
   24843:	e8 f8 0a fe ff       	call   5340 <glfwCreateWindowSurface@plt>
                          &surface);
  return {instance, surface};
   24848:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
   2484c:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   24850:	be 00 00 00 00       	mov    $0x0,%esi
   24855:	48 89 c7             	mov    %rax,%rdi
   24858:	e8 8f 3e ff ff       	call   186ec <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
   2485d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   24861:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   24865:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24869:	48 89 d1             	mov    %rdx,%rcx
   2486c:	48 89 da             	mov    %rbx,%rdx
   2486f:	48 89 c7             	mov    %rax,%rdi
   24872:	e8 4f 16 00 00       	call   25ec6 <_ZN2vk4raii10SurfaceKHRC1ERKNS0_8InstanceEP14VkSurfaceKHR_TNS_8OptionalIKNS_19AllocationCallbacksEEE>
}
   24877:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2487b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   2487f:	c9                   	leave
   24880:	c3                   	ret

0000000000024881 <_Z41__static_initialization_and_destruction_0ii>:

   24881:	55                   	push   %rbp
   24882:	48 89 e5             	mov    %rsp,%rbp
   24885:	48 83 ec 10          	sub    $0x10,%rsp
   24889:	89 7d fc             	mov    %edi,-0x4(%rbp)
   2488c:	89 75 f8             	mov    %esi,-0x8(%rbp)
   2488f:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
   24893:	75 3b                	jne    248d0 <_Z41__static_initialization_and_destruction_0ii+0x4f>
   24895:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
   2489c:	75 32                	jne    248d0 <_Z41__static_initialization_and_destruction_0ii+0x4f>
   2489e:	48 8d 05 fb ca 01 00 	lea    0x1cafb(%rip),%rax        # 413a0 <_ZStL8__ioinit>
   248a5:	48 89 c7             	mov    %rax,%rdi
   248a8:	e8 83 0a fe ff       	call   5330 <_ZNSt8ios_base4InitC1Ev@plt>
   248ad:	48 8d 05 44 c9 01 00 	lea    0x1c944(%rip),%rax        # 411f8 <__dso_handle>
   248b4:	48 89 c2             	mov    %rax,%rdx
   248b7:	48 8d 05 e2 ca 01 00 	lea    0x1cae2(%rip),%rax        # 413a0 <_ZStL8__ioinit>
   248be:	48 89 c6             	mov    %rax,%rsi
   248c1:	48 8b 05 08 c7 01 00 	mov    0x1c708(%rip),%rax        # 40fd0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
   248c8:	48 89 c7             	mov    %rax,%rdi
   248cb:	e8 00 09 fe ff       	call   51d0 <__cxa_atexit@plt>
   248d0:	90                   	nop
   248d1:	c9                   	leave
   248d2:	c3                   	ret

00000000000248d3 <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:
   248d3:	55                   	push   %rbp
   248d4:	48 89 e5             	mov    %rsp,%rbp
   248d7:	be ff ff 00 00       	mov    $0xffff,%esi
   248dc:	bf 01 00 00 00       	mov    $0x1,%edi
   248e1:	e8 9b ff ff ff       	call   24881 <_Z41__static_initialization_and_destruction_0ii>
   248e6:	5d                   	pop    %rbp
   248e7:	c3                   	ret

00000000000248e8 <_ZNK2vk20DispatchLoaderStatic34vkEnumerateInstanceLayerPropertiesEPjP17VkLayerProperties>:
    VkResult vkEnumerateInstanceLayerProperties( uint32_t * pPropertyCount, VkLayerProperties * pProperties ) const VULKAN_HPP_NOEXCEPT
   248e8:	55                   	push   %rbp
   248e9:	48 89 e5             	mov    %rsp,%rbp
   248ec:	48 83 ec 20          	sub    $0x20,%rsp
   248f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   248f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   248f8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      return ::vkEnumerateInstanceLayerProperties( pPropertyCount, pProperties );
   248fc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   24900:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24904:	48 89 d6             	mov    %rdx,%rsi
   24907:	48 89 c7             	mov    %rax,%rdi
   2490a:	e8 71 09 fe ff       	call   5280 <vkEnumerateInstanceLayerProperties@plt>
    }
   2490f:	c9                   	leave
   24910:	c3                   	ret
   24911:	90                   	nop

0000000000024912 <_ZN2vk10SurfaceKHRC1EP14VkSurfaceKHR_T>:
    VULKAN_HPP_TYPESAFE_EXPLICIT SurfaceKHR( VkSurfaceKHR surfaceKHR ) VULKAN_HPP_NOEXCEPT : m_surfaceKHR( surfaceKHR ) {}
   24912:	55                   	push   %rbp
   24913:	48 89 e5             	mov    %rsp,%rbp
   24916:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2491a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2491e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24922:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   24926:	48 89 10             	mov    %rdx,(%rax)
   24929:	90                   	nop
   2492a:	5d                   	pop    %rbp
   2492b:	c3                   	ret

000000000002492c <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_>:
      InstanceDispatcher( PFN_vkGetInstanceProcAddr getProcAddr, VkInstance instance ) : vkGetInstanceProcAddr( getProcAddr )
   2492c:	55                   	push   %rbp
   2492d:	48 89 e5             	mov    %rsp,%rbp
   24930:	48 83 ec 20          	sub    $0x20,%rsp
   24934:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   24938:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2493c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   24940:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24944:	48 89 c7             	mov    %rax,%rdi
   24947:	e8 50 1c fe ff       	call   659c <_ZN2vk18DispatchLoaderBaseC1Ev>
   2494c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24950:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   24957:	00 
   24958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2495c:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   24963:	00 
   24964:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24968:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   2496f:	00 
   24970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24974:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   2497b:	00 
   2497c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24980:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
   24987:	00 
   24988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2498c:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
   24993:	00 
   24994:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24998:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
   2499f:	00 
   249a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   249a4:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
   249ab:	00 
   249ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   249b0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   249b4:	48 89 50 50          	mov    %rdx,0x50(%rax)
   249b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   249bc:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
   249c3:	00 
   249c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   249c8:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
   249cf:	00 
   249d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   249d4:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
   249db:	00 
   249dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   249e0:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
   249e7:	00 
   249e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   249ec:	48 c7 40 78 00 00 00 	movq   $0x0,0x78(%rax)
   249f3:	00 
   249f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   249f8:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
   249ff:	00 00 00 00 
   24a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a07:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
   24a0e:	00 00 00 00 
   24a12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a16:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
   24a1d:	00 00 00 00 
   24a21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a25:	48 c7 80 98 00 00 00 	movq   $0x0,0x98(%rax)
   24a2c:	00 00 00 00 
   24a30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a34:	48 c7 80 a0 00 00 00 	movq   $0x0,0xa0(%rax)
   24a3b:	00 00 00 00 
   24a3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a43:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
   24a4a:	00 00 00 00 
   24a4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a52:	48 c7 80 b0 00 00 00 	movq   $0x0,0xb0(%rax)
   24a59:	00 00 00 00 
   24a5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a61:	48 c7 80 b8 00 00 00 	movq   $0x0,0xb8(%rax)
   24a68:	00 00 00 00 
   24a6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a70:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
   24a77:	00 00 00 00 
   24a7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a7f:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)
   24a86:	00 00 00 00 
   24a8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a8e:	48 c7 80 d0 00 00 00 	movq   $0x0,0xd0(%rax)
   24a95:	00 00 00 00 
   24a99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24a9d:	48 c7 80 d8 00 00 00 	movq   $0x0,0xd8(%rax)
   24aa4:	00 00 00 00 
   24aa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24aac:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
   24ab3:	00 00 00 00 
   24ab7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24abb:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
   24ac2:	00 00 00 00 
   24ac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24aca:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
   24ad1:	00 00 00 00 
   24ad5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ad9:	48 c7 80 f8 00 00 00 	movq   $0x0,0xf8(%rax)
   24ae0:	00 00 00 00 
   24ae4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ae8:	48 c7 80 00 01 00 00 	movq   $0x0,0x100(%rax)
   24aef:	00 00 00 00 
   24af3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24af7:	48 c7 80 08 01 00 00 	movq   $0x0,0x108(%rax)
   24afe:	00 00 00 00 
   24b02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b06:	48 c7 80 10 01 00 00 	movq   $0x0,0x110(%rax)
   24b0d:	00 00 00 00 
   24b11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b15:	48 c7 80 18 01 00 00 	movq   $0x0,0x118(%rax)
   24b1c:	00 00 00 00 
   24b20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b24:	48 c7 80 20 01 00 00 	movq   $0x0,0x120(%rax)
   24b2b:	00 00 00 00 
   24b2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b33:	48 c7 80 28 01 00 00 	movq   $0x0,0x128(%rax)
   24b3a:	00 00 00 00 
   24b3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b42:	48 c7 80 30 01 00 00 	movq   $0x0,0x130(%rax)
   24b49:	00 00 00 00 
   24b4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b51:	48 c7 80 38 01 00 00 	movq   $0x0,0x138(%rax)
   24b58:	00 00 00 00 
   24b5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b60:	48 c7 80 40 01 00 00 	movq   $0x0,0x140(%rax)
   24b67:	00 00 00 00 
   24b6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b6f:	48 c7 80 48 01 00 00 	movq   $0x0,0x148(%rax)
   24b76:	00 00 00 00 
   24b7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b7e:	48 c7 80 50 01 00 00 	movq   $0x0,0x150(%rax)
   24b85:	00 00 00 00 
   24b89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b8d:	48 c7 80 58 01 00 00 	movq   $0x0,0x158(%rax)
   24b94:	00 00 00 00 
   24b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24b9c:	48 c7 80 60 01 00 00 	movq   $0x0,0x160(%rax)
   24ba3:	00 00 00 00 
   24ba7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24bab:	48 c7 80 68 01 00 00 	movq   $0x0,0x168(%rax)
   24bb2:	00 00 00 00 
   24bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24bba:	48 c7 80 70 01 00 00 	movq   $0x0,0x170(%rax)
   24bc1:	00 00 00 00 
   24bc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24bc9:	48 c7 80 78 01 00 00 	movq   $0x0,0x178(%rax)
   24bd0:	00 00 00 00 
   24bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24bd8:	48 c7 80 80 01 00 00 	movq   $0x0,0x180(%rax)
   24bdf:	00 00 00 00 
   24be3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24be7:	48 c7 80 88 01 00 00 	movq   $0x0,0x188(%rax)
   24bee:	00 00 00 00 
   24bf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24bf6:	48 c7 80 90 01 00 00 	movq   $0x0,0x190(%rax)
   24bfd:	00 00 00 00 
   24c01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c05:	48 c7 80 98 01 00 00 	movq   $0x0,0x198(%rax)
   24c0c:	00 00 00 00 
   24c10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c14:	48 c7 80 a0 01 00 00 	movq   $0x0,0x1a0(%rax)
   24c1b:	00 00 00 00 
   24c1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c23:	48 c7 80 a8 01 00 00 	movq   $0x0,0x1a8(%rax)
   24c2a:	00 00 00 00 
   24c2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c32:	48 c7 80 b0 01 00 00 	movq   $0x0,0x1b0(%rax)
   24c39:	00 00 00 00 
   24c3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c41:	48 c7 80 b8 01 00 00 	movq   $0x0,0x1b8(%rax)
   24c48:	00 00 00 00 
   24c4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c50:	48 c7 80 c0 01 00 00 	movq   $0x0,0x1c0(%rax)
   24c57:	00 00 00 00 
   24c5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c5f:	48 c7 80 c8 01 00 00 	movq   $0x0,0x1c8(%rax)
   24c66:	00 00 00 00 
   24c6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c6e:	48 c7 80 d0 01 00 00 	movq   $0x0,0x1d0(%rax)
   24c75:	00 00 00 00 
   24c79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c7d:	48 c7 80 d8 01 00 00 	movq   $0x0,0x1d8(%rax)
   24c84:	00 00 00 00 
   24c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c8c:	48 c7 80 e0 01 00 00 	movq   $0x0,0x1e0(%rax)
   24c93:	00 00 00 00 
   24c97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c9b:	48 c7 80 e8 01 00 00 	movq   $0x0,0x1e8(%rax)
   24ca2:	00 00 00 00 
   24ca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24caa:	48 c7 80 f0 01 00 00 	movq   $0x0,0x1f0(%rax)
   24cb1:	00 00 00 00 
   24cb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24cb9:	48 c7 80 f8 01 00 00 	movq   $0x0,0x1f8(%rax)
   24cc0:	00 00 00 00 
   24cc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24cc8:	48 c7 80 00 02 00 00 	movq   $0x0,0x200(%rax)
   24ccf:	00 00 00 00 
   24cd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24cd7:	48 c7 80 08 02 00 00 	movq   $0x0,0x208(%rax)
   24cde:	00 00 00 00 
   24ce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ce6:	48 c7 80 10 02 00 00 	movq   $0x0,0x210(%rax)
   24ced:	00 00 00 00 
   24cf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24cf5:	48 c7 80 18 02 00 00 	movq   $0x0,0x218(%rax)
   24cfc:	00 00 00 00 
   24d00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d04:	48 c7 80 20 02 00 00 	movq   $0x0,0x220(%rax)
   24d0b:	00 00 00 00 
   24d0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d13:	48 c7 80 28 02 00 00 	movq   $0x0,0x228(%rax)
   24d1a:	00 00 00 00 
   24d1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d22:	48 c7 80 30 02 00 00 	movq   $0x0,0x230(%rax)
   24d29:	00 00 00 00 
   24d2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d31:	48 c7 80 38 02 00 00 	movq   $0x0,0x238(%rax)
   24d38:	00 00 00 00 
   24d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d40:	48 c7 80 40 02 00 00 	movq   $0x0,0x240(%rax)
   24d47:	00 00 00 00 
   24d4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d4f:	48 c7 80 48 02 00 00 	movq   $0x0,0x248(%rax)
   24d56:	00 00 00 00 
   24d5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d5e:	48 c7 80 50 02 00 00 	movq   $0x0,0x250(%rax)
   24d65:	00 00 00 00 
   24d69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d6d:	48 c7 80 58 02 00 00 	movq   $0x0,0x258(%rax)
   24d74:	00 00 00 00 
   24d78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d7c:	48 c7 80 60 02 00 00 	movq   $0x0,0x260(%rax)
   24d83:	00 00 00 00 
   24d87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d8b:	48 c7 80 68 02 00 00 	movq   $0x0,0x268(%rax)
   24d92:	00 00 00 00 
   24d96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d9a:	48 c7 80 70 02 00 00 	movq   $0x0,0x270(%rax)
   24da1:	00 00 00 00 
   24da5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24da9:	48 c7 80 78 02 00 00 	movq   $0x0,0x278(%rax)
   24db0:	00 00 00 00 
   24db4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24db8:	48 c7 80 80 02 00 00 	movq   $0x0,0x280(%rax)
   24dbf:	00 00 00 00 
   24dc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24dc7:	48 c7 80 88 02 00 00 	movq   $0x0,0x288(%rax)
   24dce:	00 00 00 00 
   24dd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24dd6:	48 c7 80 90 02 00 00 	movq   $0x0,0x290(%rax)
   24ddd:	00 00 00 00 
   24de1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24de5:	48 c7 80 98 02 00 00 	movq   $0x0,0x298(%rax)
   24dec:	00 00 00 00 
   24df0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24df4:	48 c7 80 a0 02 00 00 	movq   $0x0,0x2a0(%rax)
   24dfb:	00 00 00 00 
   24dff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e03:	48 c7 80 a8 02 00 00 	movq   $0x0,0x2a8(%rax)
   24e0a:	00 00 00 00 
   24e0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e12:	48 c7 80 b0 02 00 00 	movq   $0x0,0x2b0(%rax)
   24e19:	00 00 00 00 
   24e1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e21:	48 c7 80 b8 02 00 00 	movq   $0x0,0x2b8(%rax)
   24e28:	00 00 00 00 
   24e2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e30:	48 c7 80 c0 02 00 00 	movq   $0x0,0x2c0(%rax)
   24e37:	00 00 00 00 
   24e3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e3f:	48 c7 80 c8 02 00 00 	movq   $0x0,0x2c8(%rax)
   24e46:	00 00 00 00 
   24e4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e4e:	48 c7 80 d0 02 00 00 	movq   $0x0,0x2d0(%rax)
   24e55:	00 00 00 00 
   24e59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e5d:	48 c7 80 d8 02 00 00 	movq   $0x0,0x2d8(%rax)
   24e64:	00 00 00 00 
   24e68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e6c:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
   24e73:	00 00 00 00 
   24e77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e7b:	48 c7 80 e8 02 00 00 	movq   $0x0,0x2e8(%rax)
   24e82:	00 00 00 00 
   24e86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e8a:	48 c7 80 f0 02 00 00 	movq   $0x0,0x2f0(%rax)
   24e91:	00 00 00 00 
   24e95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e99:	48 c7 80 f8 02 00 00 	movq   $0x0,0x2f8(%rax)
   24ea0:	00 00 00 00 
   24ea4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ea8:	48 c7 80 00 03 00 00 	movq   $0x0,0x300(%rax)
   24eaf:	00 00 00 00 
   24eb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24eb7:	48 c7 80 08 03 00 00 	movq   $0x0,0x308(%rax)
   24ebe:	00 00 00 00 
   24ec2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ec6:	48 c7 80 10 03 00 00 	movq   $0x0,0x310(%rax)
   24ecd:	00 00 00 00 
   24ed1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ed5:	48 c7 80 18 03 00 00 	movq   $0x0,0x318(%rax)
   24edc:	00 00 00 00 
   24ee0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ee4:	48 c7 80 20 03 00 00 	movq   $0x0,0x320(%rax)
   24eeb:	00 00 00 00 
   24eef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ef3:	48 c7 80 28 03 00 00 	movq   $0x0,0x328(%rax)
   24efa:	00 00 00 00 
   24efe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24f02:	48 c7 80 30 03 00 00 	movq   $0x0,0x330(%rax)
   24f09:	00 00 00 00 
   24f0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24f11:	48 c7 80 38 03 00 00 	movq   $0x0,0x338(%rax)
   24f18:	00 00 00 00 
   24f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24f20:	48 c7 80 40 03 00 00 	movq   $0x0,0x340(%rax)
   24f27:	00 00 00 00 
        vkDestroyInstance           = PFN_vkDestroyInstance( vkGetInstanceProcAddr( instance, "vkDestroyInstance" ) );
   24f2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24f2f:	48 8b 50 50          	mov    0x50(%rax),%rdx
   24f33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24f37:	48 8d 0d 82 b9 00 00 	lea    0xb982(%rip),%rcx        # 308c0 <_ZNSt8__detailL19__atomic_spin_countE+0x4>
   24f3e:	48 89 ce             	mov    %rcx,%rsi
   24f41:	48 89 c7             	mov    %rax,%rdi
   24f44:	ff d2                	call   *%rdx
   24f46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   24f4a:	48 89 42 10          	mov    %rax,0x10(%rdx)
        vkEnumeratePhysicalDevices  = PFN_vkEnumeratePhysicalDevices( vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDevices" ) );
   24f4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24f52:	48 8b 50 50          	mov    0x50(%rax),%rdx
   24f56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24f5a:	48 8d 0d 71 b9 00 00 	lea    0xb971(%rip),%rcx        # 308d2 <_ZNSt8__detailL19__atomic_spin_countE+0x16>
   24f61:	48 89 ce             	mov    %rcx,%rsi
   24f64:	48 89 c7             	mov    %rax,%rdi
   24f67:	ff d2                	call   *%rdx
   24f69:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   24f6d:	48 89 42 18          	mov    %rax,0x18(%rdx)
        vkGetPhysicalDeviceFeatures = PFN_vkGetPhysicalDeviceFeatures( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFeatures" ) );
   24f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24f75:	48 8b 50 50          	mov    0x50(%rax),%rdx
   24f79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24f7d:	48 8d 0d 69 b9 00 00 	lea    0xb969(%rip),%rcx        # 308ed <_ZNSt8__detailL19__atomic_spin_countE+0x31>
   24f84:	48 89 ce             	mov    %rcx,%rsi
   24f87:	48 89 c7             	mov    %rax,%rdi
   24f8a:	ff d2                	call   *%rdx
   24f8c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   24f90:	48 89 42 20          	mov    %rax,0x20(%rdx)
          PFN_vkGetPhysicalDeviceFormatProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFormatProperties" ) );
   24f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24f98:	48 8b 50 50          	mov    0x50(%rax),%rdx
   24f9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24fa0:	48 8d 0d 69 b9 00 00 	lea    0xb969(%rip),%rcx        # 30910 <_ZNSt8__detailL19__atomic_spin_countE+0x54>
   24fa7:	48 89 ce             	mov    %rcx,%rsi
   24faa:	48 89 c7             	mov    %rax,%rdi
   24fad:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFormatProperties =
   24faf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   24fb3:	48 89 42 28          	mov    %rax,0x28(%rdx)
          PFN_vkGetPhysicalDeviceImageFormatProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceImageFormatProperties" ) );
   24fb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24fbb:	48 8b 50 50          	mov    0x50(%rax),%rdx
   24fbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24fc3:	48 8d 0d 6e b9 00 00 	lea    0xb96e(%rip),%rcx        # 30938 <_ZNSt8__detailL19__atomic_spin_countE+0x7c>
   24fca:	48 89 ce             	mov    %rcx,%rsi
   24fcd:	48 89 c7             	mov    %rax,%rdi
   24fd0:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceImageFormatProperties =
   24fd2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   24fd6:	48 89 42 30          	mov    %rax,0x30(%rdx)
        vkGetPhysicalDeviceProperties = PFN_vkGetPhysicalDeviceProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceProperties" ) );
   24fda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24fde:	48 8b 50 50          	mov    0x50(%rax),%rdx
   24fe2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24fe6:	48 8d 0d 74 b9 00 00 	lea    0xb974(%rip),%rcx        # 30961 <_ZNSt8__detailL19__atomic_spin_countE+0xa5>
   24fed:	48 89 ce             	mov    %rcx,%rsi
   24ff0:	48 89 c7             	mov    %rax,%rdi
   24ff3:	ff d2                	call   *%rdx
   24ff5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   24ff9:	48 89 42 38          	mov    %rax,0x38(%rdx)
          PFN_vkGetPhysicalDeviceQueueFamilyProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyProperties" ) );
   24ffd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25001:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25005:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25009:	48 8d 0d 70 b9 00 00 	lea    0xb970(%rip),%rcx        # 30980 <_ZNSt8__detailL19__atomic_spin_countE+0xc4>
   25010:	48 89 ce             	mov    %rcx,%rsi
   25013:	48 89 c7             	mov    %rax,%rdi
   25016:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyProperties =
   25018:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2501c:	48 89 42 40          	mov    %rax,0x40(%rdx)
          PFN_vkGetPhysicalDeviceMemoryProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMemoryProperties" ) );
   25020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25024:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25028:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2502c:	48 8d 0d 7d b9 00 00 	lea    0xb97d(%rip),%rcx        # 309b0 <_ZNSt8__detailL19__atomic_spin_countE+0xf4>
   25033:	48 89 ce             	mov    %rcx,%rsi
   25036:	48 89 c7             	mov    %rax,%rdi
   25039:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMemoryProperties =
   2503b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2503f:	48 89 42 48          	mov    %rax,0x48(%rdx)
        vkCreateDevice = PFN_vkCreateDevice( vkGetInstanceProcAddr( instance, "vkCreateDevice" ) );
   25043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25047:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2504b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2504f:	48 8d 0d 7e b9 00 00 	lea    0xb97e(%rip),%rcx        # 309d4 <_ZNSt8__detailL19__atomic_spin_countE+0x118>
   25056:	48 89 ce             	mov    %rcx,%rsi
   25059:	48 89 c7             	mov    %rax,%rdi
   2505c:	ff d2                	call   *%rdx
   2505e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25062:	48 89 42 58          	mov    %rax,0x58(%rdx)
          PFN_vkEnumerateDeviceExtensionProperties( vkGetInstanceProcAddr( instance, "vkEnumerateDeviceExtensionProperties" ) );
   25066:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2506a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2506e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25072:	48 8d 0d 6f b9 00 00 	lea    0xb96f(%rip),%rcx        # 309e8 <_ZNSt8__detailL19__atomic_spin_countE+0x12c>
   25079:	48 89 ce             	mov    %rcx,%rsi
   2507c:	48 89 c7             	mov    %rax,%rdi
   2507f:	ff d2                	call   *%rdx
        vkEnumerateDeviceExtensionProperties =
   25081:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25085:	48 89 42 60          	mov    %rax,0x60(%rdx)
        vkEnumerateDeviceLayerProperties = PFN_vkEnumerateDeviceLayerProperties( vkGetInstanceProcAddr( instance, "vkEnumerateDeviceLayerProperties" ) );
   25089:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2508d:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25091:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25095:	48 8d 0d 74 b9 00 00 	lea    0xb974(%rip),%rcx        # 30a10 <_ZNSt8__detailL19__atomic_spin_countE+0x154>
   2509c:	48 89 ce             	mov    %rcx,%rsi
   2509f:	48 89 c7             	mov    %rax,%rdi
   250a2:	ff d2                	call   *%rdx
   250a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   250a8:	48 89 42 68          	mov    %rax,0x68(%rdx)
          PFN_vkGetPhysicalDeviceSparseImageFormatProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSparseImageFormatProperties" ) );
   250ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   250b0:	48 8b 50 50          	mov    0x50(%rax),%rdx
   250b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   250b8:	48 8d 0d 79 b9 00 00 	lea    0xb979(%rip),%rcx        # 30a38 <_ZNSt8__detailL19__atomic_spin_countE+0x17c>
   250bf:	48 89 ce             	mov    %rcx,%rsi
   250c2:	48 89 c7             	mov    %rax,%rdi
   250c5:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSparseImageFormatProperties =
   250c7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   250cb:	48 89 42 70          	mov    %rax,0x70(%rdx)
        vkEnumeratePhysicalDeviceGroups = PFN_vkEnumeratePhysicalDeviceGroups( vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDeviceGroups" ) );
   250cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   250d3:	48 8b 50 50          	mov    0x50(%rax),%rdx
   250d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   250db:	48 8d 0d 86 b9 00 00 	lea    0xb986(%rip),%rcx        # 30a68 <_ZNSt8__detailL19__atomic_spin_countE+0x1ac>
   250e2:	48 89 ce             	mov    %rcx,%rsi
   250e5:	48 89 c7             	mov    %rax,%rdi
   250e8:	ff d2                	call   *%rdx
   250ea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   250ee:	48 89 42 78          	mov    %rax,0x78(%rdx)
        vkGetPhysicalDeviceFeatures2    = PFN_vkGetPhysicalDeviceFeatures2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFeatures2" ) );
   250f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   250f6:	48 8b 50 50          	mov    0x50(%rax),%rdx
   250fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   250fe:	48 8d 0d 83 b9 00 00 	lea    0xb983(%rip),%rcx        # 30a88 <_ZNSt8__detailL19__atomic_spin_countE+0x1cc>
   25105:	48 89 ce             	mov    %rcx,%rsi
   25108:	48 89 c7             	mov    %rax,%rdi
   2510b:	ff d2                	call   *%rdx
   2510d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25111:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        vkGetPhysicalDeviceProperties2  = PFN_vkGetPhysicalDeviceProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceProperties2" ) );
   25118:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2511c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25120:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25124:	48 8d 0d 7d b9 00 00 	lea    0xb97d(%rip),%rcx        # 30aa8 <_ZNSt8__detailL19__atomic_spin_countE+0x1ec>
   2512b:	48 89 ce             	mov    %rcx,%rsi
   2512e:	48 89 c7             	mov    %rax,%rdi
   25131:	ff d2                	call   *%rdx
   25133:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25137:	48 89 82 88 00 00 00 	mov    %rax,0x88(%rdx)
          PFN_vkGetPhysicalDeviceFormatProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFormatProperties2" ) );
   2513e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25142:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25146:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2514a:	48 8d 0d 77 b9 00 00 	lea    0xb977(%rip),%rcx        # 30ac8 <_ZNSt8__detailL19__atomic_spin_countE+0x20c>
   25151:	48 89 ce             	mov    %rcx,%rsi
   25154:	48 89 c7             	mov    %rax,%rdi
   25157:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFormatProperties2 =
   25159:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2515d:	48 89 82 90 00 00 00 	mov    %rax,0x90(%rdx)
          PFN_vkGetPhysicalDeviceImageFormatProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceImageFormatProperties2" ) );
   25164:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25168:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2516c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25170:	48 8d 0d 79 b9 00 00 	lea    0xb979(%rip),%rcx        # 30af0 <_ZNSt8__detailL19__atomic_spin_countE+0x234>
   25177:	48 89 ce             	mov    %rcx,%rsi
   2517a:	48 89 c7             	mov    %rax,%rdi
   2517d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceImageFormatProperties2 =
   2517f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25183:	48 89 82 98 00 00 00 	mov    %rax,0x98(%rdx)
          PFN_vkGetPhysicalDeviceQueueFamilyProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyProperties2" ) );
   2518a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2518e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25192:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25196:	48 8d 0d 83 b9 00 00 	lea    0xb983(%rip),%rcx        # 30b20 <_ZNSt8__detailL19__atomic_spin_countE+0x264>
   2519d:	48 89 ce             	mov    %rcx,%rsi
   251a0:	48 89 c7             	mov    %rax,%rdi
   251a3:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyProperties2 =
   251a5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   251a9:	48 89 82 a0 00 00 00 	mov    %rax,0xa0(%rdx)
          PFN_vkGetPhysicalDeviceMemoryProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMemoryProperties2" ) );
   251b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   251b4:	48 8b 50 50          	mov    0x50(%rax),%rdx
   251b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   251bc:	48 8d 0d 8d b9 00 00 	lea    0xb98d(%rip),%rcx        # 30b50 <_ZNSt8__detailL19__atomic_spin_countE+0x294>
   251c3:	48 89 ce             	mov    %rcx,%rsi
   251c6:	48 89 c7             	mov    %rax,%rdi
   251c9:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMemoryProperties2 =
   251cb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   251cf:	48 89 82 a8 00 00 00 	mov    %rax,0xa8(%rdx)
          PFN_vkGetPhysicalDeviceSparseImageFormatProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSparseImageFormatProperties2" ) );
   251d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   251da:	48 8b 50 50          	mov    0x50(%rax),%rdx
   251de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   251e2:	48 8d 0d 8f b9 00 00 	lea    0xb98f(%rip),%rcx        # 30b78 <_ZNSt8__detailL19__atomic_spin_countE+0x2bc>
   251e9:	48 89 ce             	mov    %rcx,%rsi
   251ec:	48 89 c7             	mov    %rax,%rdi
   251ef:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSparseImageFormatProperties2 =
   251f1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   251f5:	48 89 82 b0 00 00 00 	mov    %rax,0xb0(%rdx)
          PFN_vkGetPhysicalDeviceExternalBufferProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalBufferProperties" ) );
   251fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25200:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25204:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25208:	48 8d 0d 99 b9 00 00 	lea    0xb999(%rip),%rcx        # 30ba8 <_ZNSt8__detailL19__atomic_spin_countE+0x2ec>
   2520f:	48 89 ce             	mov    %rcx,%rsi
   25212:	48 89 c7             	mov    %rax,%rdi
   25215:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalBufferProperties =
   25217:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2521b:	48 89 82 b8 00 00 00 	mov    %rax,0xb8(%rdx)
          PFN_vkGetPhysicalDeviceExternalFenceProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalFenceProperties" ) );
   25222:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25226:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2522a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2522e:	48 8d 0d a3 b9 00 00 	lea    0xb9a3(%rip),%rcx        # 30bd8 <_ZNSt8__detailL19__atomic_spin_countE+0x31c>
   25235:	48 89 ce             	mov    %rcx,%rsi
   25238:	48 89 c7             	mov    %rax,%rdi
   2523b:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalFenceProperties =
   2523d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25241:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
          PFN_vkGetPhysicalDeviceExternalSemaphoreProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalSemaphoreProperties" ) );
   25248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2524c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25250:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25254:	48 8d 0d ad b9 00 00 	lea    0xb9ad(%rip),%rcx        # 30c08 <_ZNSt8__detailL19__atomic_spin_countE+0x34c>
   2525b:	48 89 ce             	mov    %rcx,%rsi
   2525e:	48 89 c7             	mov    %rax,%rdi
   25261:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalSemaphoreProperties =
   25263:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25267:	48 89 82 c8 00 00 00 	mov    %rax,0xc8(%rdx)
        vkGetPhysicalDeviceToolProperties = PFN_vkGetPhysicalDeviceToolProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceToolProperties" ) );
   2526e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25272:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25276:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2527a:	48 8d 0d b7 b9 00 00 	lea    0xb9b7(%rip),%rcx        # 30c38 <_ZNSt8__detailL19__atomic_spin_countE+0x37c>
   25281:	48 89 ce             	mov    %rcx,%rsi
   25284:	48 89 c7             	mov    %rax,%rdi
   25287:	ff d2                	call   *%rdx
   25289:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2528d:	48 89 82 d0 00 00 00 	mov    %rax,0xd0(%rdx)
        vkAcquireDrmDisplayEXT = PFN_vkAcquireDrmDisplayEXT( vkGetInstanceProcAddr( instance, "vkAcquireDrmDisplayEXT" ) );
   25294:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25298:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2529c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   252a0:	48 8d 0d b3 b9 00 00 	lea    0xb9b3(%rip),%rcx        # 30c5a <_ZNSt8__detailL19__atomic_spin_countE+0x39e>
   252a7:	48 89 ce             	mov    %rcx,%rsi
   252aa:	48 89 c7             	mov    %rax,%rdi
   252ad:	ff d2                	call   *%rdx
   252af:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   252b3:	48 89 82 d8 00 00 00 	mov    %rax,0xd8(%rdx)
        vkGetDrmDisplayEXT     = PFN_vkGetDrmDisplayEXT( vkGetInstanceProcAddr( instance, "vkGetDrmDisplayEXT" ) );
   252ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   252be:	48 8b 50 50          	mov    0x50(%rax),%rdx
   252c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   252c6:	48 8d 0d a4 b9 00 00 	lea    0xb9a4(%rip),%rcx        # 30c71 <_ZNSt8__detailL19__atomic_spin_countE+0x3b5>
   252cd:	48 89 ce             	mov    %rcx,%rsi
   252d0:	48 89 c7             	mov    %rax,%rdi
   252d3:	ff d2                	call   *%rdx
   252d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   252d9:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
          PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" ) );
   252e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   252e4:	48 8b 50 50          	mov    0x50(%rax),%rdx
   252e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   252ec:	48 8d 0d 95 b9 00 00 	lea    0xb995(%rip),%rcx        # 30c88 <_ZNSt8__detailL19__atomic_spin_countE+0x3cc>
   252f3:	48 89 ce             	mov    %rcx,%rsi
   252f6:	48 89 c7             	mov    %rax,%rdi
   252f9:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceCalibrateableTimeDomainsEXT =
   252fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   252ff:	48 89 82 f8 00 00 00 	mov    %rax,0xf8(%rdx)
        vkCreateDebugReportCallbackEXT  = PFN_vkCreateDebugReportCallbackEXT( vkGetInstanceProcAddr( instance, "vkCreateDebugReportCallbackEXT" ) );
   25306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2530a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2530e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25312:	48 8d 0d 9f b9 00 00 	lea    0xb99f(%rip),%rcx        # 30cb8 <_ZNSt8__detailL19__atomic_spin_countE+0x3fc>
   25319:	48 89 ce             	mov    %rcx,%rsi
   2531c:	48 89 c7             	mov    %rax,%rdi
   2531f:	ff d2                	call   *%rdx
   25321:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25325:	48 89 82 00 01 00 00 	mov    %rax,0x100(%rdx)
        vkDestroyDebugReportCallbackEXT = PFN_vkDestroyDebugReportCallbackEXT( vkGetInstanceProcAddr( instance, "vkDestroyDebugReportCallbackEXT" ) );
   2532c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25330:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25334:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25338:	48 8d 0d 99 b9 00 00 	lea    0xb999(%rip),%rcx        # 30cd8 <_ZNSt8__detailL19__atomic_spin_countE+0x41c>
   2533f:	48 89 ce             	mov    %rcx,%rsi
   25342:	48 89 c7             	mov    %rax,%rdi
   25345:	ff d2                	call   *%rdx
   25347:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2534b:	48 89 82 08 01 00 00 	mov    %rax,0x108(%rdx)
        vkDebugReportMessageEXT         = PFN_vkDebugReportMessageEXT( vkGetInstanceProcAddr( instance, "vkDebugReportMessageEXT" ) );
   25352:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25356:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2535a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2535e:	48 8d 0d 93 b9 00 00 	lea    0xb993(%rip),%rcx        # 30cf8 <_ZNSt8__detailL19__atomic_spin_countE+0x43c>
   25365:	48 89 ce             	mov    %rcx,%rsi
   25368:	48 89 c7             	mov    %rax,%rdi
   2536b:	ff d2                	call   *%rdx
   2536d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25371:	48 89 82 10 01 00 00 	mov    %rax,0x110(%rdx)
        vkCreateDebugUtilsMessengerEXT  = PFN_vkCreateDebugUtilsMessengerEXT( vkGetInstanceProcAddr( instance, "vkCreateDebugUtilsMessengerEXT" ) );
   25378:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2537c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25380:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25384:	48 8d 0d 85 b9 00 00 	lea    0xb985(%rip),%rcx        # 30d10 <_ZNSt8__detailL19__atomic_spin_countE+0x454>
   2538b:	48 89 ce             	mov    %rcx,%rsi
   2538e:	48 89 c7             	mov    %rax,%rdi
   25391:	ff d2                	call   *%rdx
   25393:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25397:	48 89 82 18 01 00 00 	mov    %rax,0x118(%rdx)
        vkDestroyDebugUtilsMessengerEXT = PFN_vkDestroyDebugUtilsMessengerEXT( vkGetInstanceProcAddr( instance, "vkDestroyDebugUtilsMessengerEXT" ) );
   2539e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   253a2:	48 8b 50 50          	mov    0x50(%rax),%rdx
   253a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   253aa:	48 8d 0d 7f b9 00 00 	lea    0xb97f(%rip),%rcx        # 30d30 <_ZNSt8__detailL19__atomic_spin_countE+0x474>
   253b1:	48 89 ce             	mov    %rcx,%rsi
   253b4:	48 89 c7             	mov    %rax,%rdi
   253b7:	ff d2                	call   *%rdx
   253b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   253bd:	48 89 82 20 01 00 00 	mov    %rax,0x120(%rdx)
        vkSubmitDebugUtilsMessageEXT    = PFN_vkSubmitDebugUtilsMessageEXT( vkGetInstanceProcAddr( instance, "vkSubmitDebugUtilsMessageEXT" ) );
   253c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   253c8:	48 8b 50 50          	mov    0x50(%rax),%rdx
   253cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   253d0:	48 8d 0d 79 b9 00 00 	lea    0xb979(%rip),%rcx        # 30d50 <_ZNSt8__detailL19__atomic_spin_countE+0x494>
   253d7:	48 89 ce             	mov    %rcx,%rsi
   253da:	48 89 c7             	mov    %rax,%rdi
   253dd:	ff d2                	call   *%rdx
   253df:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   253e3:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)
        vkReleaseDisplayEXT = PFN_vkReleaseDisplayEXT( vkGetInstanceProcAddr( instance, "vkReleaseDisplayEXT" ) );
   253ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   253ee:	48 8b 50 50          	mov    0x50(%rax),%rdx
   253f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   253f6:	48 8d 0d 70 b9 00 00 	lea    0xb970(%rip),%rcx        # 30d6d <_ZNSt8__detailL19__atomic_spin_countE+0x4b1>
   253fd:	48 89 ce             	mov    %rcx,%rsi
   25400:	48 89 c7             	mov    %rax,%rdi
   25403:	ff d2                	call   *%rdx
   25405:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25409:	48 89 82 30 01 00 00 	mov    %rax,0x130(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT" ) );
   25410:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25414:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25418:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2541c:	48 8d 0d 65 b9 00 00 	lea    0xb965(%rip),%rcx        # 30d88 <_ZNSt8__detailL19__atomic_spin_countE+0x4cc>
   25423:	48 89 ce             	mov    %rcx,%rsi
   25426:	48 89 c7             	mov    %rax,%rdi
   25429:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceCapabilities2EXT =
   2542b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2542f:	48 89 82 48 01 00 00 	mov    %rax,0x148(%rdx)
        vkCreateHeadlessSurfaceEXT = PFN_vkCreateHeadlessSurfaceEXT( vkGetInstanceProcAddr( instance, "vkCreateHeadlessSurfaceEXT" ) );
   25436:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2543a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2543e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25442:	48 8d 0d 6a b9 00 00 	lea    0xb96a(%rip),%rcx        # 30db3 <_ZNSt8__detailL19__atomic_spin_countE+0x4f7>
   25449:	48 89 ce             	mov    %rcx,%rsi
   2544c:	48 89 c7             	mov    %rax,%rdi
   2544f:	ff d2                	call   *%rdx
   25451:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25455:	48 89 82 58 01 00 00 	mov    %rax,0x158(%rdx)
          PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT" ) );
   2545c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25460:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25464:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25468:	48 8d 0d 61 b9 00 00 	lea    0xb961(%rip),%rcx        # 30dd0 <_ZNSt8__detailL19__atomic_spin_countE+0x514>
   2546f:	48 89 ce             	mov    %rcx,%rsi
   25472:	48 89 c7             	mov    %rax,%rdi
   25475:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMultisamplePropertiesEXT =
   25477:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2547b:	48 89 82 68 01 00 00 	mov    %rax,0x168(%rdx)
          PFN_vkGetPhysicalDeviceToolPropertiesEXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceToolPropertiesEXT" ) );
   25482:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25486:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2548a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2548e:	48 8d 0d 6b b9 00 00 	lea    0xb96b(%rip),%rcx        # 30e00 <_ZNSt8__detailL19__atomic_spin_countE+0x544>
   25495:	48 89 ce             	mov    %rcx,%rsi
   25498:	48 89 c7             	mov    %rax,%rdi
   2549b:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceToolPropertiesEXT =
   2549d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   254a1:	48 89 82 70 01 00 00 	mov    %rax,0x170(%rdx)
        if ( !vkGetPhysicalDeviceToolProperties )
   254a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   254ac:	48 8b 80 d0 00 00 00 	mov    0xd0(%rax),%rax
   254b3:	48 85 c0             	test   %rax,%rax
   254b6:	75 16                	jne    254ce <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xba2>
          vkGetPhysicalDeviceToolProperties = vkGetPhysicalDeviceToolPropertiesEXT;
   254b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   254bc:	48 8b 90 70 01 00 00 	mov    0x170(%rax),%rdx
   254c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   254c7:	48 89 90 d0 00 00 00 	mov    %rdx,0xd0(%rax)
          PFN_vkGetPhysicalDevicePresentRectanglesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDevicePresentRectanglesKHR" ) );
   254ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   254d2:	48 8b 50 50          	mov    0x50(%rax),%rdx
   254d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   254da:	48 8d 0d 47 b9 00 00 	lea    0xb947(%rip),%rcx        # 30e28 <_ZNSt8__detailL19__atomic_spin_countE+0x56c>
   254e1:	48 89 ce             	mov    %rcx,%rsi
   254e4:	48 89 c7             	mov    %rax,%rdi
   254e7:	ff d2                	call   *%rdx
        vkGetPhysicalDevicePresentRectanglesKHR =
   254e9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   254ed:	48 89 82 90 01 00 00 	mov    %rax,0x190(%rdx)
        vkEnumeratePhysicalDeviceGroupsKHR = PFN_vkEnumeratePhysicalDeviceGroupsKHR( vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDeviceGroupsKHR" ) );
   254f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   254f8:	48 8b 50 50          	mov    0x50(%rax),%rdx
   254fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25500:	48 8d 0d 49 b9 00 00 	lea    0xb949(%rip),%rcx        # 30e50 <_ZNSt8__detailL19__atomic_spin_countE+0x594>
   25507:	48 89 ce             	mov    %rcx,%rsi
   2550a:	48 89 c7             	mov    %rax,%rdi
   2550d:	ff d2                	call   *%rdx
   2550f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25513:	48 89 82 98 01 00 00 	mov    %rax,0x198(%rdx)
        if ( !vkEnumeratePhysicalDeviceGroups )
   2551a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2551e:	48 8b 40 78          	mov    0x78(%rax),%rax
   25522:	48 85 c0             	test   %rax,%rax
   25525:	75 13                	jne    2553a <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xc0e>
          vkEnumeratePhysicalDeviceGroups = vkEnumeratePhysicalDeviceGroupsKHR;
   25527:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2552b:	48 8b 90 98 01 00 00 	mov    0x198(%rax),%rdx
   25532:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25536:	48 89 50 78          	mov    %rdx,0x78(%rax)
          PFN_vkGetPhysicalDeviceDisplayPropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayPropertiesKHR" ) );
   2553a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2553e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25542:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25546:	48 8d 0d 2b b9 00 00 	lea    0xb92b(%rip),%rcx        # 30e78 <_ZNSt8__detailL19__atomic_spin_countE+0x5bc>
   2554d:	48 89 ce             	mov    %rcx,%rsi
   25550:	48 89 c7             	mov    %rax,%rdi
   25553:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayPropertiesKHR =
   25555:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25559:	48 89 82 a0 01 00 00 	mov    %rax,0x1a0(%rdx)
          PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR" ) );
   25560:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25564:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25568:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2556c:	48 8d 0d 2d b9 00 00 	lea    0xb92d(%rip),%rcx        # 30ea0 <_ZNSt8__detailL19__atomic_spin_countE+0x5e4>
   25573:	48 89 ce             	mov    %rcx,%rsi
   25576:	48 89 c7             	mov    %rax,%rdi
   25579:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayPlanePropertiesKHR =
   2557b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2557f:	48 89 82 a8 01 00 00 	mov    %rax,0x1a8(%rdx)
          PFN_vkGetDisplayPlaneSupportedDisplaysKHR( vkGetInstanceProcAddr( instance, "vkGetDisplayPlaneSupportedDisplaysKHR" ) );
   25586:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2558a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2558e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25592:	48 8d 0d 37 b9 00 00 	lea    0xb937(%rip),%rcx        # 30ed0 <_ZNSt8__detailL19__atomic_spin_countE+0x614>
   25599:	48 89 ce             	mov    %rcx,%rsi
   2559c:	48 89 c7             	mov    %rax,%rdi
   2559f:	ff d2                	call   *%rdx
        vkGetDisplayPlaneSupportedDisplaysKHR =
   255a1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   255a5:	48 89 82 b0 01 00 00 	mov    %rax,0x1b0(%rdx)
        vkGetDisplayModePropertiesKHR    = PFN_vkGetDisplayModePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetDisplayModePropertiesKHR" ) );
   255ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   255b0:	48 8b 50 50          	mov    0x50(%rax),%rdx
   255b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   255b8:	48 8d 0d 37 b9 00 00 	lea    0xb937(%rip),%rcx        # 30ef6 <_ZNSt8__detailL19__atomic_spin_countE+0x63a>
   255bf:	48 89 ce             	mov    %rcx,%rsi
   255c2:	48 89 c7             	mov    %rax,%rdi
   255c5:	ff d2                	call   *%rdx
   255c7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   255cb:	48 89 82 b8 01 00 00 	mov    %rax,0x1b8(%rdx)
        vkCreateDisplayModeKHR           = PFN_vkCreateDisplayModeKHR( vkGetInstanceProcAddr( instance, "vkCreateDisplayModeKHR" ) );
   255d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   255d6:	48 8b 50 50          	mov    0x50(%rax),%rdx
   255da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   255de:	48 8d 0d 2f b9 00 00 	lea    0xb92f(%rip),%rcx        # 30f14 <_ZNSt8__detailL19__atomic_spin_countE+0x658>
   255e5:	48 89 ce             	mov    %rcx,%rsi
   255e8:	48 89 c7             	mov    %rax,%rdi
   255eb:	ff d2                	call   *%rdx
   255ed:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   255f1:	48 89 82 c0 01 00 00 	mov    %rax,0x1c0(%rdx)
        vkGetDisplayPlaneCapabilitiesKHR = PFN_vkGetDisplayPlaneCapabilitiesKHR( vkGetInstanceProcAddr( instance, "vkGetDisplayPlaneCapabilitiesKHR" ) );
   255f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   255fc:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25600:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25604:	48 8d 0d 25 b9 00 00 	lea    0xb925(%rip),%rcx        # 30f30 <_ZNSt8__detailL19__atomic_spin_countE+0x674>
   2560b:	48 89 ce             	mov    %rcx,%rsi
   2560e:	48 89 c7             	mov    %rax,%rdi
   25611:	ff d2                	call   *%rdx
   25613:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25617:	48 89 82 c8 01 00 00 	mov    %rax,0x1c8(%rdx)
        vkCreateDisplayPlaneSurfaceKHR   = PFN_vkCreateDisplayPlaneSurfaceKHR( vkGetInstanceProcAddr( instance, "vkCreateDisplayPlaneSurfaceKHR" ) );
   2561e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25622:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25626:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2562a:	48 8d 0d 27 b9 00 00 	lea    0xb927(%rip),%rcx        # 30f58 <_ZNSt8__detailL19__atomic_spin_countE+0x69c>
   25631:	48 89 ce             	mov    %rcx,%rsi
   25634:	48 89 c7             	mov    %rax,%rdi
   25637:	ff d2                	call   *%rdx
   25639:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2563d:	48 89 82 d0 01 00 00 	mov    %rax,0x1d0(%rdx)
          PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR" ) );
   25644:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25648:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2564c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25650:	48 8d 0d 21 b9 00 00 	lea    0xb921(%rip),%rcx        # 30f78 <_ZNSt8__detailL19__atomic_spin_countE+0x6bc>
   25657:	48 89 ce             	mov    %rcx,%rsi
   2565a:	48 89 c7             	mov    %rax,%rdi
   2565d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalFencePropertiesKHR =
   2565f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25663:	48 89 82 d8 01 00 00 	mov    %rax,0x1d8(%rdx)
        if ( !vkGetPhysicalDeviceExternalFenceProperties )
   2566a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2566e:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
   25675:	48 85 c0             	test   %rax,%rax
   25678:	75 16                	jne    25690 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xd64>
          vkGetPhysicalDeviceExternalFenceProperties = vkGetPhysicalDeviceExternalFencePropertiesKHR;
   2567a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2567e:	48 8b 90 d8 01 00 00 	mov    0x1d8(%rax),%rdx
   25685:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25689:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
          PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR" ) );
   25690:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25694:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25698:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2569c:	48 8d 0d 05 b9 00 00 	lea    0xb905(%rip),%rcx        # 30fa8 <_ZNSt8__detailL19__atomic_spin_countE+0x6ec>
   256a3:	48 89 ce             	mov    %rcx,%rsi
   256a6:	48 89 c7             	mov    %rax,%rdi
   256a9:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalBufferPropertiesKHR =
   256ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   256af:	48 89 82 e0 01 00 00 	mov    %rax,0x1e0(%rdx)
        if ( !vkGetPhysicalDeviceExternalBufferProperties )
   256b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   256ba:	48 8b 80 b8 00 00 00 	mov    0xb8(%rax),%rax
   256c1:	48 85 c0             	test   %rax,%rax
   256c4:	75 16                	jne    256dc <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xdb0>
          vkGetPhysicalDeviceExternalBufferProperties = vkGetPhysicalDeviceExternalBufferPropertiesKHR;
   256c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   256ca:	48 8b 90 e0 01 00 00 	mov    0x1e0(%rax),%rdx
   256d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   256d5:	48 89 90 b8 00 00 00 	mov    %rdx,0xb8(%rax)
          PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR" ) );
   256dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   256e0:	48 8b 50 50          	mov    0x50(%rax),%rdx
   256e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   256e8:	48 8d 0d e9 b8 00 00 	lea    0xb8e9(%rip),%rcx        # 30fd8 <_ZNSt8__detailL19__atomic_spin_countE+0x71c>
   256ef:	48 89 ce             	mov    %rcx,%rsi
   256f2:	48 89 c7             	mov    %rax,%rdi
   256f5:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalSemaphorePropertiesKHR =
   256f7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   256fb:	48 89 82 e8 01 00 00 	mov    %rax,0x1e8(%rdx)
        if ( !vkGetPhysicalDeviceExternalSemaphoreProperties )
   25702:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25706:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax
   2570d:	48 85 c0             	test   %rax,%rax
   25710:	75 16                	jne    25728 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xdfc>
          vkGetPhysicalDeviceExternalSemaphoreProperties = vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
   25712:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25716:	48 8b 90 e8 01 00 00 	mov    0x1e8(%rax),%rdx
   2571d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25721:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)
          PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR" ) );
   25728:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2572c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25730:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25734:	48 8d 0d d5 b8 00 00 	lea    0xb8d5(%rip),%rcx        # 31010 <_ZNSt8__detailL19__atomic_spin_countE+0x754>
   2573b:	48 89 ce             	mov    %rcx,%rsi
   2573e:	48 89 c7             	mov    %rax,%rdi
   25741:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFragmentShadingRatesKHR =
   25743:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25747:	48 89 82 f0 01 00 00 	mov    %rax,0x1f0(%rdx)
          PFN_vkGetPhysicalDeviceDisplayProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayProperties2KHR" ) );
   2574e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25752:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25756:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2575a:	48 8d 0d df b8 00 00 	lea    0xb8df(%rip),%rcx        # 31040 <_ZNSt8__detailL19__atomic_spin_countE+0x784>
   25761:	48 89 ce             	mov    %rcx,%rsi
   25764:	48 89 c7             	mov    %rax,%rdi
   25767:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayProperties2KHR =
   25769:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2576d:	48 89 82 f8 01 00 00 	mov    %rax,0x1f8(%rdx)
          PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR" ) );
   25774:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25778:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2577c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25780:	48 8d 0d e9 b8 00 00 	lea    0xb8e9(%rip),%rcx        # 31070 <_ZNSt8__detailL19__atomic_spin_countE+0x7b4>
   25787:	48 89 ce             	mov    %rcx,%rsi
   2578a:	48 89 c7             	mov    %rax,%rdi
   2578d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayPlaneProperties2KHR =
   2578f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25793:	48 89 82 00 02 00 00 	mov    %rax,0x200(%rdx)
        vkGetDisplayModeProperties2KHR    = PFN_vkGetDisplayModeProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetDisplayModeProperties2KHR" ) );
   2579a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2579e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   257a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   257a6:	48 8d 0d f3 b8 00 00 	lea    0xb8f3(%rip),%rcx        # 310a0 <_ZNSt8__detailL19__atomic_spin_countE+0x7e4>
   257ad:	48 89 ce             	mov    %rcx,%rsi
   257b0:	48 89 c7             	mov    %rax,%rdi
   257b3:	ff d2                	call   *%rdx
   257b5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   257b9:	48 89 82 08 02 00 00 	mov    %rax,0x208(%rdx)
        vkGetDisplayPlaneCapabilities2KHR = PFN_vkGetDisplayPlaneCapabilities2KHR( vkGetInstanceProcAddr( instance, "vkGetDisplayPlaneCapabilities2KHR" ) );
   257c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   257c4:	48 8b 50 50          	mov    0x50(%rax),%rdx
   257c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   257cc:	48 8d 0d ed b8 00 00 	lea    0xb8ed(%rip),%rcx        # 310c0 <_ZNSt8__detailL19__atomic_spin_countE+0x804>
   257d3:	48 89 ce             	mov    %rcx,%rsi
   257d6:	48 89 c7             	mov    %rax,%rdi
   257d9:	ff d2                	call   *%rdx
   257db:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   257df:	48 89 82 10 02 00 00 	mov    %rax,0x210(%rdx)
        vkGetPhysicalDeviceFeatures2KHR = PFN_vkGetPhysicalDeviceFeatures2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFeatures2KHR" ) );
   257e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   257ea:	48 8b 50 50          	mov    0x50(%rax),%rdx
   257ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   257f2:	48 8d 0d ef b8 00 00 	lea    0xb8ef(%rip),%rcx        # 310e8 <_ZNSt8__detailL19__atomic_spin_countE+0x82c>
   257f9:	48 89 ce             	mov    %rcx,%rsi
   257fc:	48 89 c7             	mov    %rax,%rdi
   257ff:	ff d2                	call   *%rdx
   25801:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25805:	48 89 82 18 02 00 00 	mov    %rax,0x218(%rdx)
        if ( !vkGetPhysicalDeviceFeatures2 )
   2580c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25810:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   25817:	48 85 c0             	test   %rax,%rax
   2581a:	75 16                	jne    25832 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xf06>
          vkGetPhysicalDeviceFeatures2 = vkGetPhysicalDeviceFeatures2KHR;
   2581c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25820:	48 8b 90 18 02 00 00 	mov    0x218(%rax),%rdx
   25827:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2582b:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
        vkGetPhysicalDeviceProperties2KHR = PFN_vkGetPhysicalDeviceProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceProperties2KHR" ) );
   25832:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25836:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2583a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2583e:	48 8d 0d c3 b8 00 00 	lea    0xb8c3(%rip),%rcx        # 31108 <_ZNSt8__detailL19__atomic_spin_countE+0x84c>
   25845:	48 89 ce             	mov    %rcx,%rsi
   25848:	48 89 c7             	mov    %rax,%rdi
   2584b:	ff d2                	call   *%rdx
   2584d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25851:	48 89 82 20 02 00 00 	mov    %rax,0x220(%rdx)
        if ( !vkGetPhysicalDeviceProperties2 )
   25858:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2585c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
   25863:	48 85 c0             	test   %rax,%rax
   25866:	75 16                	jne    2587e <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xf52>
          vkGetPhysicalDeviceProperties2 = vkGetPhysicalDeviceProperties2KHR;
   25868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2586c:	48 8b 90 20 02 00 00 	mov    0x220(%rax),%rdx
   25873:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25877:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
          PFN_vkGetPhysicalDeviceFormatProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFormatProperties2KHR" ) );
   2587e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25882:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25886:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2588a:	48 8d 0d 9f b8 00 00 	lea    0xb89f(%rip),%rcx        # 31130 <_ZNSt8__detailL19__atomic_spin_countE+0x874>
   25891:	48 89 ce             	mov    %rcx,%rsi
   25894:	48 89 c7             	mov    %rax,%rdi
   25897:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFormatProperties2KHR =
   25899:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2589d:	48 89 82 28 02 00 00 	mov    %rax,0x228(%rdx)
        if ( !vkGetPhysicalDeviceFormatProperties2 )
   258a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   258a8:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   258af:	48 85 c0             	test   %rax,%rax
   258b2:	75 16                	jne    258ca <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xf9e>
          vkGetPhysicalDeviceFormatProperties2 = vkGetPhysicalDeviceFormatProperties2KHR;
   258b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   258b8:	48 8b 90 28 02 00 00 	mov    0x228(%rax),%rdx
   258bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   258c3:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
          PFN_vkGetPhysicalDeviceImageFormatProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceImageFormatProperties2KHR" ) );
   258ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   258ce:	48 8b 50 50          	mov    0x50(%rax),%rdx
   258d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   258d6:	48 8d 0d 7b b8 00 00 	lea    0xb87b(%rip),%rcx        # 31158 <_ZNSt8__detailL19__atomic_spin_countE+0x89c>
   258dd:	48 89 ce             	mov    %rcx,%rsi
   258e0:	48 89 c7             	mov    %rax,%rdi
   258e3:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceImageFormatProperties2KHR =
   258e5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   258e9:	48 89 82 30 02 00 00 	mov    %rax,0x230(%rdx)
        if ( !vkGetPhysicalDeviceImageFormatProperties2 )
   258f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   258f4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   258fb:	48 85 c0             	test   %rax,%rax
   258fe:	75 16                	jne    25916 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xfea>
          vkGetPhysicalDeviceImageFormatProperties2 = vkGetPhysicalDeviceImageFormatProperties2KHR;
   25900:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25904:	48 8b 90 30 02 00 00 	mov    0x230(%rax),%rdx
   2590b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2590f:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
          PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR" ) );
   25916:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2591a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2591e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25922:	48 8d 0d 5f b8 00 00 	lea    0xb85f(%rip),%rcx        # 31188 <_ZNSt8__detailL19__atomic_spin_countE+0x8cc>
   25929:	48 89 ce             	mov    %rcx,%rsi
   2592c:	48 89 c7             	mov    %rax,%rdi
   2592f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyProperties2KHR =
   25931:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25935:	48 89 82 38 02 00 00 	mov    %rax,0x238(%rdx)
        if ( !vkGetPhysicalDeviceQueueFamilyProperties2 )
   2593c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25940:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
   25947:	48 85 c0             	test   %rax,%rax
   2594a:	75 16                	jne    25962 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0x1036>
          vkGetPhysicalDeviceQueueFamilyProperties2 = vkGetPhysicalDeviceQueueFamilyProperties2KHR;
   2594c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25950:	48 8b 90 38 02 00 00 	mov    0x238(%rax),%rdx
   25957:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2595b:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
          PFN_vkGetPhysicalDeviceMemoryProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMemoryProperties2KHR" ) );
   25962:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25966:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2596a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2596e:	48 8d 0d 43 b8 00 00 	lea    0xb843(%rip),%rcx        # 311b8 <_ZNSt8__detailL19__atomic_spin_countE+0x8fc>
   25975:	48 89 ce             	mov    %rcx,%rsi
   25978:	48 89 c7             	mov    %rax,%rdi
   2597b:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMemoryProperties2KHR =
   2597d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25981:	48 89 82 40 02 00 00 	mov    %rax,0x240(%rdx)
        if ( !vkGetPhysicalDeviceMemoryProperties2 )
   25988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2598c:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
   25993:	48 85 c0             	test   %rax,%rax
   25996:	75 16                	jne    259ae <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0x1082>
          vkGetPhysicalDeviceMemoryProperties2 = vkGetPhysicalDeviceMemoryProperties2KHR;
   25998:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2599c:	48 8b 90 40 02 00 00 	mov    0x240(%rax),%rdx
   259a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   259a7:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
          PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR" ) );
   259ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   259b2:	48 8b 50 50          	mov    0x50(%rax),%rdx
   259b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   259ba:	48 8d 0d 1f b8 00 00 	lea    0xb81f(%rip),%rcx        # 311e0 <_ZNSt8__detailL19__atomic_spin_countE+0x924>
   259c1:	48 89 ce             	mov    %rcx,%rsi
   259c4:	48 89 c7             	mov    %rax,%rdi
   259c7:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSparseImageFormatProperties2KHR =
   259c9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   259cd:	48 89 82 48 02 00 00 	mov    %rax,0x248(%rdx)
        if ( !vkGetPhysicalDeviceSparseImageFormatProperties2 )
   259d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   259d8:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
   259df:	48 85 c0             	test   %rax,%rax
   259e2:	75 16                	jne    259fa <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0x10ce>
          vkGetPhysicalDeviceSparseImageFormatProperties2 = vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
   259e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   259e8:	48 8b 90 48 02 00 00 	mov    0x248(%rax),%rdx
   259ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   259f3:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
          PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR" ) );
   259fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   259fe:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25a02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25a06:	48 8d 0d 0b b8 00 00 	lea    0xb80b(%rip),%rcx        # 31218 <_ZNSt8__detailL19__atomic_spin_countE+0x95c>
   25a0d:	48 89 ce             	mov    %rcx,%rsi
   25a10:	48 89 c7             	mov    %rax,%rdi
   25a13:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceCapabilities2KHR =
   25a15:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25a19:	48 89 82 50 02 00 00 	mov    %rax,0x250(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceFormats2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceFormats2KHR" ) );
   25a20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25a24:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25a28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25a2c:	48 8d 0d 15 b8 00 00 	lea    0xb815(%rip),%rcx        # 31248 <_ZNSt8__detailL19__atomic_spin_countE+0x98c>
   25a33:	48 89 ce             	mov    %rcx,%rsi
   25a36:	48 89 c7             	mov    %rax,%rdi
   25a39:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceFormats2KHR =
   25a3b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25a3f:	48 89 82 58 02 00 00 	mov    %rax,0x258(%rdx)
          vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR" ) );
   25a46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25a4a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25a4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25a52:	48 8d 0d 17 b8 00 00 	lea    0xb817(%rip),%rcx        # 31270 <_ZNSt8__detailL19__atomic_spin_countE+0x9b4>
   25a59:	48 89 ce             	mov    %rcx,%rsi
   25a5c:	48 89 c7             	mov    %rax,%rdi
   25a5f:	ff d2                	call   *%rdx
        vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
   25a61:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25a65:	48 89 82 60 02 00 00 	mov    %rax,0x260(%rdx)
          vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR" ) );
   25a6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25a70:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25a74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25a78:	48 8d 0d 31 b8 00 00 	lea    0xb831(%rip),%rcx        # 312b0 <_ZNSt8__detailL19__atomic_spin_countE+0x9f4>
   25a7f:	48 89 ce             	mov    %rcx,%rsi
   25a82:	48 89 c7             	mov    %rax,%rdi
   25a85:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
   25a87:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25a8b:	48 89 82 68 02 00 00 	mov    %rax,0x268(%rdx)
        vkDestroySurfaceKHR = PFN_vkDestroySurfaceKHR( vkGetInstanceProcAddr( instance, "vkDestroySurfaceKHR" ) );
   25a92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25a96:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25a9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25a9e:	48 8d 0d 43 b8 00 00 	lea    0xb843(%rip),%rcx        # 312e8 <_ZNSt8__detailL19__atomic_spin_countE+0xa2c>
   25aa5:	48 89 ce             	mov    %rcx,%rsi
   25aa8:	48 89 c7             	mov    %rax,%rdi
   25aab:	ff d2                	call   *%rdx
   25aad:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25ab1:	48 89 82 70 02 00 00 	mov    %rax,0x270(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceSupportKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceSupportKHR" ) );
   25ab8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25abc:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25ac0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25ac4:	48 8d 0d 35 b8 00 00 	lea    0xb835(%rip),%rcx        # 31300 <_ZNSt8__detailL19__atomic_spin_countE+0xa44>
   25acb:	48 89 ce             	mov    %rcx,%rsi
   25ace:	48 89 c7             	mov    %rax,%rdi
   25ad1:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceSupportKHR =
   25ad3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25ad7:	48 89 82 78 02 00 00 	mov    %rax,0x278(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR" ) );
   25ade:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25ae2:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25ae6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25aea:	48 8d 0d 37 b8 00 00 	lea    0xb837(%rip),%rcx        # 31328 <_ZNSt8__detailL19__atomic_spin_countE+0xa6c>
   25af1:	48 89 ce             	mov    %rcx,%rsi
   25af4:	48 89 c7             	mov    %rax,%rdi
   25af7:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceCapabilitiesKHR =
   25af9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25afd:	48 89 82 80 02 00 00 	mov    %rax,0x280(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceFormatsKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceFormatsKHR" ) );
   25b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25b08:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25b0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25b10:	48 8d 0d 41 b8 00 00 	lea    0xb841(%rip),%rcx        # 31358 <_ZNSt8__detailL19__atomic_spin_countE+0xa9c>
   25b17:	48 89 ce             	mov    %rcx,%rsi
   25b1a:	48 89 c7             	mov    %rax,%rdi
   25b1d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceFormatsKHR =
   25b1f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25b23:	48 89 82 88 02 00 00 	mov    %rax,0x288(%rdx)
          PFN_vkGetPhysicalDeviceSurfacePresentModesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfacePresentModesKHR" ) );
   25b2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25b2e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25b32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25b36:	48 8d 0d 43 b8 00 00 	lea    0xb843(%rip),%rcx        # 31380 <_ZNSt8__detailL19__atomic_spin_countE+0xac4>
   25b3d:	48 89 ce             	mov    %rcx,%rsi
   25b40:	48 89 c7             	mov    %rax,%rdi
   25b43:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfacePresentModesKHR =
   25b45:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25b49:	48 89 82 90 02 00 00 	mov    %rax,0x290(%rdx)
          PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" ) );
   25b50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25b54:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25b58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25b5c:	48 8d 0d 4d b8 00 00 	lea    0xb84d(%rip),%rcx        # 313b0 <_ZNSt8__detailL19__atomic_spin_countE+0xaf4>
   25b63:	48 89 ce             	mov    %rcx,%rsi
   25b66:	48 89 c7             	mov    %rax,%rdi
   25b69:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceCooperativeMatrixPropertiesNV =
   25b6b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25b6f:	48 89 82 10 03 00 00 	mov    %rax,0x310(%rdx)
          vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV" ) );
   25b76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25b7a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25b7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25b82:	48 8d 0d 5f b8 00 00 	lea    0xb85f(%rip),%rcx        # 313e8 <_ZNSt8__detailL19__atomic_spin_countE+0xb2c>
   25b89:	48 89 ce             	mov    %rcx,%rsi
   25b8c:	48 89 c7             	mov    %rax,%rdi
   25b8f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
   25b91:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25b95:	48 89 82 18 03 00 00 	mov    %rax,0x318(%rdx)
          PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV" ) );
   25b9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25ba0:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25ba4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25ba8:	48 8d 0d 81 b8 00 00 	lea    0xb881(%rip),%rcx        # 31430 <_ZNSt8__detailL19__atomic_spin_countE+0xb74>
   25baf:	48 89 ce             	mov    %rcx,%rsi
   25bb2:	48 89 c7             	mov    %rax,%rdi
   25bb5:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalImageFormatPropertiesNV =
   25bb7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25bbb:	48 89 82 20 03 00 00 	mov    %rax,0x320(%rdx)
          PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV" ) );
   25bc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25bc6:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25bca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25bce:	48 8d 0d 93 b8 00 00 	lea    0xb893(%rip),%rcx        # 31468 <_ZNSt8__detailL19__atomic_spin_countE+0xbac>
   25bd5:	48 89 ce             	mov    %rcx,%rsi
   25bd8:	48 89 c7             	mov    %rax,%rdi
   25bdb:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceOpticalFlowImageFormatsNV =
   25bdd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25be1:	48 89 82 28 03 00 00 	mov    %rax,0x328(%rdx)
        vkGetDeviceProcAddr = PFN_vkGetDeviceProcAddr( vkGetInstanceProcAddr( instance, "vkGetDeviceProcAddr" ) );
   25be8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25bec:	48 8b 50 50          	mov    0x50(%rax),%rdx
   25bf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25bf4:	48 8d 0d 9a b8 00 00 	lea    0xb89a(%rip),%rcx        # 31495 <_ZNSt8__detailL19__atomic_spin_countE+0xbd9>
   25bfb:	48 89 ce             	mov    %rcx,%rsi
   25bfe:	48 89 c7             	mov    %rax,%rdi
   25c01:	ff d2                	call   *%rdx
   25c03:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25c07:	48 89 82 40 03 00 00 	mov    %rax,0x340(%rdx)
      }
   25c0e:	90                   	nop
   25c0f:	c9                   	leave
   25c10:	c3                   	ret
   25c11:	90                   	nop

0000000000025c12 <_ZNK2vk4raii7Context13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher const * getDispatcher() const
   25c12:	55                   	push   %rbp
   25c13:	48 89 e5             	mov    %rsp,%rbp
   25c16:	48 83 ec 10          	sub    $0x10,%rsp
   25c1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
   25c1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25c22:	48 83 c0 08          	add    $0x8,%rax
   25c26:	48 89 c7             	mov    %rax,%rdi
   25c29:	e8 d6 03 00 00       	call   26004 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEptEv>
   25c2e:	48 89 c7             	mov    %rax,%rdi
   25c31:	e8 1c 09 fe ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   25c36:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   25c3c:	74 28                	je     25c66 <_ZNK2vk4raii7Context13getDispatcherEv+0x54>
   25c3e:	48 8d 05 6b b8 00 00 	lea    0xb86b(%rip),%rax        # 314b0 <_ZNSt8__detailL19__atomic_spin_countE+0xbf4>
   25c45:	48 89 c1             	mov    %rax,%rcx
   25c48:	ba b1 09 00 00       	mov    $0x9b1,%edx
   25c4d:	48 8d 05 ac b8 00 00 	lea    0xb8ac(%rip),%rax        # 31500 <_ZNSt8__detailL19__atomic_spin_countE+0xc44>
   25c54:	48 89 c6             	mov    %rax,%rsi
   25c57:	48 8d 05 ca b8 00 00 	lea    0xb8ca(%rip),%rax        # 31528 <_ZNSt8__detailL19__atomic_spin_countE+0xc6c>
   25c5e:	48 89 c7             	mov    %rax,%rdi
   25c61:	e8 aa f4 fd ff       	call   5110 <__assert_fail@plt>
        return &*m_dispatcher;
   25c66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25c6a:	48 83 c0 08          	add    $0x8,%rax
   25c6e:	48 89 c7             	mov    %rax,%rdi
   25c71:	e8 a8 03 00 00       	call   2601e <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv>
      }
   25c76:	c9                   	leave
   25c77:	c3                   	ret

0000000000025c78 <_ZN2vk8InstanceC1Ev>:
    VULKAN_HPP_CONSTEXPR Instance() = default;
   25c78:	55                   	push   %rbp
   25c79:	48 89 e5             	mov    %rsp,%rbp
   25c7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25c80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25c84:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   25c8b:	90                   	nop
   25c8c:	5d                   	pop    %rbp
   25c8d:	c3                   	ret

0000000000025c8e <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      Instance( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Context const &                context,
   25c8e:	55                   	push   %rbp
   25c8f:	48 89 e5             	mov    %rsp,%rbp
   25c92:	41 55                	push   %r13
   25c94:	41 54                	push   %r12
   25c96:	53                   	push   %rbx
   25c97:	48 83 ec 48          	sub    $0x48,%rsp
   25c9b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   25c9f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   25ca3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   25ca7:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   25cab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25caf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   25cb6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25cba:	48 89 c7             	mov    %rax,%rdi
   25cbd:	e8 b6 ff ff ff       	call   25c78 <_ZN2vk8InstanceC1Ev>
   25cc2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   25cc6:	48 89 c7             	mov    %rax,%rdi
   25cc9:	e8 90 1a ff ff       	call   1775e <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   25cce:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   25cd2:	48 89 42 08          	mov    %rax,0x8(%rdx)
   25cd6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25cda:	48 83 c0 10          	add    $0x10,%rax
   25cde:	48 89 c7             	mov    %rax,%rdi
   25ce1:	e8 b2 03 00 00       	call   26098 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>
          static_cast<VULKAN_HPP_NAMESPACE::Result>( context.getDispatcher()->vkCreateInstance( reinterpret_cast<const VkInstanceCreateInfo *>( &createInfo ),
   25ce6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   25cea:	48 89 c7             	mov    %rax,%rdi
   25ced:	e8 20 ff ff ff       	call   25c12 <_ZNK2vk4raii7Context13getDispatcherEv>
   25cf2:	4c 8b 40 18          	mov    0x18(%rax),%r8
                                                                                                reinterpret_cast<VkInstance *>( &m_instance ) ) );
   25cf6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
                                                                                                reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   25cfa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25cfe:	48 8b 48 08          	mov    0x8(%rax),%rcx
          static_cast<VULKAN_HPP_NAMESPACE::Result>( context.getDispatcher()->vkCreateInstance( reinterpret_cast<const VkInstanceCreateInfo *>( &createInfo ),
   25d02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   25d06:	48 89 ce             	mov    %rcx,%rsi
   25d09:	48 89 c7             	mov    %rax,%rdi
   25d0c:	41 ff d0             	call   *%r8
   25d0f:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   25d12:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   25d16:	74 14                	je     25d2c <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x9e>
          throwResultException( result, "vkCreateInstance" );
   25d18:	8b 45 dc             	mov    -0x24(%rbp),%eax
   25d1b:	48 8d 15 3e b8 00 00 	lea    0xb83e(%rip),%rdx        # 31560 <_ZNSt8__detailL19__atomic_spin_countE+0xca4>
   25d22:	48 89 d6             	mov    %rdx,%rsi
   25d25:	89 c7                	mov    %eax,%edi
   25d27:	e8 2e d9 ff ff       	call   2365a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   25d2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25d30:	48 8d 58 10          	lea    0x10(%rax),%rbx
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   25d34:	bf 48 03 00 00       	mov    $0x348,%edi
   25d39:	e8 e2 f4 fd ff       	call   5220 <_Znwm@plt>
   25d3e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   25d42:	41 bd 01 00 00 00    	mov    $0x1,%r13d
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   25d48:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25d4c:	48 89 c7             	mov    %rax,%rdi
   25d4f:	e8 be 33 fe ff       	call   9112 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   25d54:	49 89 c4             	mov    %rax,%r12
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   25d57:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   25d5b:	48 89 c7             	mov    %rax,%rdi
   25d5e:	e8 af fe ff ff       	call   25c12 <_ZNK2vk4raii7Context13getDispatcherEv>
   25d63:	48 8b 40 10          	mov    0x10(%rax),%rax
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   25d67:	4c 89 e2             	mov    %r12,%rdx
   25d6a:	48 89 c6             	mov    %rax,%rsi
   25d6d:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   25d71:	e8 b6 eb ff ff       	call   2492c <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   25d76:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   25d7a:	48 89 df             	mov    %rbx,%rdi
   25d7d:	e8 64 49 fe ff       	call   a6e6 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
   25d82:	eb 36                	jmp    25dba <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x12c>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   25d84:	48 89 c3             	mov    %rax,%rbx
   25d87:	45 84 ed             	test   %r13b,%r13b
   25d8a:	74 13                	je     25d9f <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x111>
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   25d8c:	be 48 03 00 00       	mov    $0x348,%esi
   25d91:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   25d95:	e8 96 f4 fd ff       	call   5230 <_ZdlPvm@plt>
   25d9a:	eb 03                	jmp    25d9f <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x111>
      }
   25d9c:	48 89 c3             	mov    %rax,%rbx
   25d9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25da3:	48 83 c0 10          	add    $0x10,%rax
   25da7:	48 89 c7             	mov    %rax,%rdi
   25daa:	e8 d3 48 fe ff       	call   a682 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev>
   25daf:	48 89 d8             	mov    %rbx,%rax
   25db2:	48 89 c7             	mov    %rax,%rdi
   25db5:	e8 e6 f5 fd ff       	call   53a0 <_Unwind_Resume@plt>
   25dba:	48 83 c4 48          	add    $0x48,%rsp
   25dbe:	5b                   	pop    %rbx
   25dbf:	41 5c                	pop    %r12
   25dc1:	41 5d                	pop    %r13
   25dc3:	5d                   	pop    %rbp
   25dc4:	c3                   	ret
   25dc5:	90                   	nop

0000000000025dc6 <_ZN2vk22DebugUtilsMessengerEXTC1Ev>:
    VULKAN_HPP_CONSTEXPR         DebugUtilsMessengerEXT() = default;
   25dc6:	55                   	push   %rbp
   25dc7:	48 89 e5             	mov    %rsp,%rbp
   25dca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25dce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25dd2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   25dd9:	90                   	nop
   25dda:	5d                   	pop    %rbp
   25ddb:	c3                   	ret

0000000000025ddc <_ZN2vk4raii22DebugUtilsMessengerEXTC1ERKNS0_8InstanceERKNS_32DebugUtilsMessengerCreateInfoEXTENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      DebugUtilsMessengerEXT( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const &               instance,
   25ddc:	55                   	push   %rbp
   25ddd:	48 89 e5             	mov    %rsp,%rbp
   25de0:	41 55                	push   %r13
   25de2:	41 54                	push   %r12
   25de4:	53                   	push   %rbx
   25de5:	48 83 ec 38          	sub    $0x38,%rsp
   25de9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   25ded:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   25df1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   25df5:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_instance( *instance )
   25df9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   25dfd:	48 89 c7             	mov    %rax,%rdi
   25e00:	e8 dd 06 ff ff       	call   164e2 <_ZNK2vk4raii8InstancedeEv>
   25e05:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   25e09:	48 8b 00             	mov    (%rax),%rax
   25e0c:	48 89 02             	mov    %rax,(%rdx)
        , m_dispatcher( instance.getDispatcher() )
   25e0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25e13:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   25e1a:	00 
   25e1b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25e1f:	48 83 c0 08          	add    $0x8,%rax
   25e23:	48 89 c7             	mov    %rax,%rdi
   25e26:	e8 9b ff ff ff       	call   25dc6 <_ZN2vk22DebugUtilsMessengerEXTC1Ev>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   25e2b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   25e2f:	48 89 c7             	mov    %rax,%rdi
   25e32:	e8 27 19 ff ff       	call   1775e <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   25e37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   25e3b:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( instance.getDispatcher() )
   25e3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   25e43:	48 89 c7             	mov    %rax,%rdi
   25e46:	e8 3d 36 fe ff       	call   9488 <_ZNK2vk4raii8Instance13getDispatcherEv>
   25e4b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   25e4f:	48 89 42 18          	mov    %rax,0x18(%rdx)
          instance.getDispatcher()->vkCreateDebugUtilsMessengerEXT( static_cast<VkInstance>( *instance ),
   25e53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   25e57:	48 89 c7             	mov    %rax,%rdi
   25e5a:	e8 29 36 fe ff       	call   9488 <_ZNK2vk4raii8Instance13getDispatcherEv>
   25e5f:	4c 8b a0 18 01 00 00 	mov    0x118(%rax),%r12
                                                                    reinterpret_cast<VkDebugUtilsMessengerEXT *>( &m_messenger ) ) );
   25e66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25e6a:	4c 8d 68 08          	lea    0x8(%rax),%r13
                                                                    reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   25e6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25e72:	48 8b 58 10          	mov    0x10(%rax),%rbx
          instance.getDispatcher()->vkCreateDebugUtilsMessengerEXT( static_cast<VkInstance>( *instance ),
   25e76:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   25e7a:	48 89 c7             	mov    %rax,%rdi
   25e7d:	e8 60 06 ff ff       	call   164e2 <_ZNK2vk4raii8InstancedeEv>
   25e82:	48 89 c7             	mov    %rax,%rdi
   25e85:	e8 88 32 fe ff       	call   9112 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   25e8a:	48 89 c7             	mov    %rax,%rdi
   25e8d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   25e91:	4c 89 e9             	mov    %r13,%rcx
   25e94:	48 89 da             	mov    %rbx,%rdx
   25e97:	48 89 c6             	mov    %rax,%rsi
   25e9a:	41 ff d4             	call   *%r12
   25e9d:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   25ea0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   25ea4:	74 14                	je     25eba <_ZN2vk4raii22DebugUtilsMessengerEXTC1ERKNS0_8InstanceERKNS_32DebugUtilsMessengerCreateInfoEXTENS_8OptionalIKNS_19AllocationCallbacksEEE+0xde>
          throwResultException( result, "vkCreateDebugUtilsMessengerEXT" );
   25ea6:	8b 45 dc             	mov    -0x24(%rbp),%eax
   25ea9:	48 8d 15 60 ae 00 00 	lea    0xae60(%rip),%rdx        # 30d10 <_ZNSt8__detailL19__atomic_spin_countE+0x454>
   25eb0:	48 89 d6             	mov    %rdx,%rsi
   25eb3:	89 c7                	mov    %eax,%edi
   25eb5:	e8 a0 d7 ff ff       	call   2365a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   25eba:	90                   	nop
   25ebb:	48 83 c4 38          	add    $0x38,%rsp
   25ebf:	5b                   	pop    %rbx
   25ec0:	41 5c                	pop    %r12
   25ec2:	41 5d                	pop    %r13
   25ec4:	5d                   	pop    %rbp
   25ec5:	c3                   	ret

0000000000025ec6 <_ZN2vk4raii10SurfaceKHRC1ERKNS0_8InstanceEP14VkSurfaceKHR_TNS_8OptionalIKNS_19AllocationCallbacksEEE>:
      SurfaceKHR( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const &               instance,
   25ec6:	55                   	push   %rbp
   25ec7:	48 89 e5             	mov    %rsp,%rbp
   25eca:	48 83 ec 20          	sub    $0x20,%rsp
   25ece:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25ed2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   25ed6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   25eda:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
        : m_instance( *instance )
   25ede:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   25ee2:	48 89 c7             	mov    %rax,%rdi
   25ee5:	e8 f8 05 ff ff       	call   164e2 <_ZNK2vk4raii8InstancedeEv>
   25eea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25eee:	48 8b 00             	mov    (%rax),%rax
   25ef1:	48 89 02             	mov    %rax,(%rdx)
        , m_surface( surface )
   25ef4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25ef8:	48 8d 50 08          	lea    0x8(%rax),%rdx
   25efc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25f00:	48 89 c6             	mov    %rax,%rsi
   25f03:	48 89 d7             	mov    %rdx,%rdi
   25f06:	e8 07 ea ff ff       	call   24912 <_ZN2vk10SurfaceKHRC1EP14VkSurfaceKHR_T>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   25f0b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   25f0f:	48 89 c7             	mov    %rax,%rdi
   25f12:	e8 47 18 ff ff       	call   1775e <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   25f17:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25f1b:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( instance.getDispatcher() )
   25f1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   25f23:	48 89 c7             	mov    %rax,%rdi
   25f26:	e8 5d 35 fe ff       	call   9488 <_ZNK2vk4raii8Instance13getDispatcherEv>
   25f2b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25f2f:	48 89 42 18          	mov    %rax,0x18(%rdx)
      }
   25f33:	90                   	nop
   25f34:	c9                   	leave
   25f35:	c3                   	ret

0000000000025f36 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   25f36:	55                   	push   %rbp
   25f37:	48 89 e5             	mov    %rsp,%rbp
   25f3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   25f3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25f42:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   25f49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25f4d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   25f54:	00 
   25f55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25f59:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   25f60:	00 
	{ }
   25f61:	90                   	nop
   25f62:	5d                   	pop    %rbp
   25f63:	c3                   	ret

0000000000025f64 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:
      { }

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      __attribute__((__nonnull__)) constexpr
      basic_string_view(const _CharT* __str) noexcept
   25f64:	55                   	push   %rbp
   25f65:	48 89 e5             	mov    %rsp,%rbp
   25f68:	48 83 ec 10          	sub    $0x10,%rsp
   25f6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25f70:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_len{traits_type::length(__str)},
   25f74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   25f78:	48 89 c7             	mov    %rax,%rdi
   25f7b:	e8 84 02 fe ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
   25f80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25f84:	48 89 02             	mov    %rax,(%rdx)
	_M_str{__str}
   25f87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25f8b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   25f8f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
   25f93:	90                   	nop
   25f94:	c9                   	leave
   25f95:	c3                   	ret

0000000000025f96 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>:
	__glibcxx_assert(this->_M_len > 0);
	return *(this->_M_str + this->_M_len - 1);
      }

      constexpr const_pointer
      data() const noexcept
   25f96:	55                   	push   %rbp
   25f97:	48 89 e5             	mov    %rsp,%rbp
   25f9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str; }
   25f9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25fa2:	48 8b 40 08          	mov    0x8(%rax),%rax
   25fa6:	5d                   	pop    %rbp
   25fa7:	c3                   	ret

0000000000025fa8 <_ZN2vk5FlagsINS_36DebugUtilsMessengerCreateFlagBitsEXTEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   25fa8:	55                   	push   %rbp
   25fa9:	48 89 e5             	mov    %rsp,%rbp
   25fac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25fb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25fb4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   25fba:	90                   	nop
   25fbb:	5d                   	pop    %rbp
   25fbc:	c3                   	ret
   25fbd:	90                   	nop

0000000000025fbe <_ZNSt6vectorIPKcSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   25fbe:	55                   	push   %rbp
   25fbf:	48 89 e5             	mov    %rsp,%rbp
   25fc2:	48 83 ec 10          	sub    $0x10,%rsp
   25fc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   25fca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25fce:	48 8b 10             	mov    (%rax),%rdx
   25fd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25fd5:	48 89 d6             	mov    %rdx,%rsi
   25fd8:	48 89 c7             	mov    %rax,%rdi
   25fdb:	e8 fa 26 ff ff       	call   186da <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   25fe0:	c9                   	leave
   25fe1:	c3                   	ret

0000000000025fe2 <_ZN2vk6ignoreINS_6ResultEEEvRKT_>:
  void ignore( T const & ) VULKAN_HPP_NOEXCEPT
   25fe2:	55                   	push   %rbp
   25fe3:	48 89 e5             	mov    %rsp,%rbp
   25fe6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  }
   25fea:	90                   	nop
   25feb:	5d                   	pop    %rbp
   25fec:	c3                   	ret
   25fed:	90                   	nop

0000000000025fee <_ZN2vk5FlagsINS_22InstanceCreateFlagBitsEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   25fee:	55                   	push   %rbp
   25fef:	48 89 e5             	mov    %rsp,%rbp
   25ff2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25ff6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25ffa:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   26000:	90                   	nop
   26001:	5d                   	pop    %rbp
   26002:	c3                   	ret
   26003:	90                   	nop

0000000000026004 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
   26004:	55                   	push   %rbp
   26005:	48 89 e5             	mov    %rsp,%rbp
   26008:	48 83 ec 10          	sub    $0x10,%rsp
   2600c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return get();
   26010:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26014:	48 89 c7             	mov    %rax,%rdi
   26017:	e8 24 02 00 00       	call   26240 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>
      }
   2601c:	c9                   	leave
   2601d:	c3                   	ret

000000000002601e <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
   2601e:	55                   	push   %rbp
   2601f:	48 89 e5             	mov    %rsp,%rbp
   26022:	48 83 ec 10          	sub    $0x10,%rsp
   26026:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(get() != pointer());
   2602a:	e8 6f 01 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   2602f:	84 c0                	test   %al,%al
   26031:	74 18                	je     2604b <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
   26033:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26037:	48 89 c7             	mov    %rax,%rdi
   2603a:	e8 01 02 00 00       	call   26240 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>
   2603f:	48 85 c0             	test   %rax,%rax
   26042:	75 07                	jne    2604b <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
   26044:	b8 01 00 00 00       	mov    $0x1,%eax
   26049:	eb 05                	jmp    26050 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv+0x32>
   2604b:	b8 00 00 00 00       	mov    $0x0,%eax
   26050:	84 c0                	test   %al,%al
	return *get();
   26052:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26056:	48 89 c7             	mov    %rax,%rdi
   26059:	e8 e2 01 00 00       	call   26240 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>
      }
   2605e:	c9                   	leave
   2605f:	c3                   	ret

0000000000026060 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1Ev>:
      __uniq_ptr_impl() = default;
   26060:	55                   	push   %rbp
   26061:	48 89 e5             	mov    %rsp,%rbp
   26064:	48 83 ec 10          	sub    $0x10,%rsp
   26068:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2606c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26070:	48 89 c7             	mov    %rax,%rdi
   26073:	e8 e2 01 00 00       	call   2625a <_ZNSt5tupleIJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
   26078:	90                   	nop
   26079:	c9                   	leave
   2607a:	c3                   	ret
   2607b:	90                   	nop

000000000002607c <_ZNSt15__uniq_ptr_dataIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
   2607c:	55                   	push   %rbp
   2607d:	48 89 e5             	mov    %rsp,%rbp
   26080:	48 83 ec 10          	sub    $0x10,%rsp
   26084:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26088:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2608c:	48 89 c7             	mov    %rax,%rdi
   2608f:	e8 cc ff ff ff       	call   26060 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1Ev>
   26094:	90                   	nop
   26095:	c9                   	leave
   26096:	c3                   	ret
   26097:	90                   	nop

0000000000026098 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>:
	constexpr unique_ptr() noexcept
   26098:	55                   	push   %rbp
   26099:	48 89 e5             	mov    %rsp,%rbp
   2609c:	48 83 ec 10          	sub    $0x10,%rsp
   260a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_t()
   260a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   260a8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   260af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   260b3:	48 89 c7             	mov    %rax,%rdi
   260b6:	e8 c1 ff ff ff       	call   2607c <_ZNSt15__uniq_ptr_dataIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>
	{ }
   260bb:	90                   	nop
   260bc:	c9                   	leave
   260bd:	c3                   	ret

00000000000260be <_ZNK2vk14ArrayWrapper1DIcLm256EEcvSt17basic_string_viewIcSt11char_traitsIcEEIcLi0EEEv>:
    operator std::string_view() const
   260be:	55                   	push   %rbp
   260bf:	48 89 e5             	mov    %rsp,%rbp
   260c2:	48 83 ec 20          	sub    $0x20,%rsp
   260c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return std::string_view( this->data() );
   260ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   260ce:	48 89 c7             	mov    %rax,%rdi
   260d1:	e8 7c 3d ff ff       	call   19e52 <_ZNKSt5arrayIcLm256EE4dataEv>
   260d6:	48 89 c2             	mov    %rax,%rdx
   260d9:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   260dd:	48 89 d6             	mov    %rdx,%rsi
   260e0:	48 89 c7             	mov    %rax,%rdi
   260e3:	e8 7c fe ff ff       	call   25f64 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
   260e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   260ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    }
   260f0:	c9                   	leave
   260f1:	c3                   	ret

00000000000260f2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:
      size() const noexcept
   260f2:	55                   	push   %rbp
   260f3:	48 89 e5             	mov    %rsp,%rbp
   260f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len; }
   260fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   260fe:	48 8b 00             	mov    (%rax),%rax
   26101:	5d                   	pop    %rbp
   26102:	c3                   	ret

0000000000026103 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>:
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }

  template<typename _CharT, typename _Traits>
    constexpr bool
    operator==(basic_string_view<_CharT, _Traits> __x,
   26103:	55                   	push   %rbp
   26104:	48 89 e5             	mov    %rsp,%rbp
   26107:	53                   	push   %rbx
   26108:	48 83 ec 28          	sub    $0x28,%rsp
   2610c:	48 89 f0             	mov    %rsi,%rax
   2610f:	49 89 f8             	mov    %rdi,%r8
   26112:	4c 89 c6             	mov    %r8,%rsi
   26115:	4c 89 cf             	mov    %r9,%rdi
   26118:	48 89 c7             	mov    %rax,%rdi
   2611b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2611f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26123:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   26127:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }
   2612b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   2612f:	48 89 c7             	mov    %rax,%rdi
   26132:	e8 bb ff ff ff       	call   260f2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
   26137:	48 89 c3             	mov    %rax,%rbx
   2613a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   2613e:	48 89 c7             	mov    %rax,%rdi
   26141:	e8 ac ff ff ff       	call   260f2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
   26146:	48 39 c3             	cmp    %rax,%rbx
   26149:	75 22                	jne    2616d <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
   2614b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2614f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   26153:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   26157:	48 89 ce             	mov    %rcx,%rsi
   2615a:	48 89 c7             	mov    %rax,%rdi
   2615d:	e8 3a 01 00 00       	call   2629c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>
   26162:	85 c0                	test   %eax,%eax
   26164:	75 07                	jne    2616d <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
   26166:	b8 01 00 00 00       	mov    $0x1,%eax
   2616b:	eb 05                	jmp    26172 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6f>
   2616d:	b8 00 00 00 00       	mov    $0x0,%eax
   26172:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   26176:	c9                   	leave
   26177:	c3                   	ret

0000000000026178 <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
   26178:	55                   	push   %rbp
   26179:	48 89 e5             	mov    %rsp,%rbp
   2617c:	53                   	push   %rbx
   2617d:	48 83 ec 28          	sub    $0x28,%rsp
   26181:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26185:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   26189:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
   2618d:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   26191:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   26195:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26199:	48 89 d6             	mov    %rdx,%rsi
   2619c:	48 89 c7             	mov    %rax,%rdi
   2619f:	e8 08 0f ff ff       	call   170ac <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
   261a4:	48 89 c1             	mov    %rax,%rcx
   261a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   261ab:	48 89 c2             	mov    %rax,%rdx
   261ae:	48 89 ce             	mov    %rcx,%rsi
   261b1:	48 89 df             	mov    %rbx,%rdi
   261b4:	e8 5f 01 00 00       	call   26318 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
   261b9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   261bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   261c1:	48 89 d6             	mov    %rdx,%rsi
   261c4:	48 89 c7             	mov    %rax,%rdi
   261c7:	e8 aa 01 00 00       	call   26376 <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>
   261cc:	eb 1a                	jmp    261e8 <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_+0x70>
   261ce:	48 89 c3             	mov    %rax,%rbx
   261d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   261d5:	48 89 c7             	mov    %rax,%rdi
   261d8:	e8 69 1f ff ff       	call   18146 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   261dd:	48 89 d8             	mov    %rbx,%rax
   261e0:	48 89 c7             	mov    %rax,%rdi
   261e3:	e8 b8 f1 fd ff       	call   53a0 <_Unwind_Resume@plt>
   261e8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   261ec:	c9                   	leave
   261ed:	c3                   	ret

00000000000261ee <_ZNSt6vectorIPKcSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   261ee:	55                   	push   %rbp
   261ef:	48 89 e5             	mov    %rsp,%rbp
   261f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   261f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   261fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   261fe:	48 8b 00             	mov    (%rax),%rax
   26201:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   26205:	48 c1 e2 03          	shl    $0x3,%rdx
   26209:	48 01 d0             	add    %rdx,%rax
      }
   2620c:	5d                   	pop    %rbp
   2620d:	c3                   	ret

000000000002620e <_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
   2620e:	55                   	push   %rbp
   2620f:	48 89 e5             	mov    %rsp,%rbp
   26212:	48 83 ec 10          	sub    $0x10,%rsp
   26216:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2621a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
   2621e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   26222:	48 89 c7             	mov    %rax,%rdi
   26225:	e8 8c 01 00 00       	call   263b6 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
   2622a:	48 89 c2             	mov    %rax,%rdx
   2622d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26231:	48 89 d6             	mov    %rdx,%rsi
   26234:	48 89 c7             	mov    %rax,%rdi
   26237:	e8 88 01 00 00       	call   263c4 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
   2623c:	90                   	nop
   2623d:	c9                   	leave
   2623e:	c3                   	ret
   2623f:	90                   	nop

0000000000026240 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
   26240:	55                   	push   %rbp
   26241:	48 89 e5             	mov    %rsp,%rbp
   26244:	48 83 ec 10          	sub    $0x10,%rsp
   26248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
   2624c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26250:	48 89 c7             	mov    %rax,%rdi
   26253:	e8 10 02 00 00       	call   26468 <_ZNKSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
   26258:	c9                   	leave
   26259:	c3                   	ret

000000000002625a <_ZNSt5tupleIJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:
	tuple()
   2625a:	55                   	push   %rbp
   2625b:	48 89 e5             	mov    %rsp,%rbp
   2625e:	48 83 ec 10          	sub    $0x10,%rsp
   26262:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Inherited() { }
   26266:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2626a:	48 89 c7             	mov    %rax,%rdi
   2626d:	e8 14 02 00 00       	call   26486 <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1Ev>
   26272:	90                   	nop
   26273:	c9                   	leave
   26274:	c3                   	ret
   26275:	90                   	nop

0000000000026276 <_ZNSaIN2vk15LayerPropertiesEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   26276:	55                   	push   %rbp
   26277:	48 89 e5             	mov    %rsp,%rbp
   2627a:	48 83 ec 10          	sub    $0x10,%rsp
   2627e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26282:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   26286:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2628a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2628e:	48 89 d6             	mov    %rdx,%rsi
   26291:	48 89 c7             	mov    %rax,%rdi
   26294:	e8 15 02 00 00       	call   264ae <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEEC1ERKS2_>
   26299:	90                   	nop
   2629a:	c9                   	leave
   2629b:	c3                   	ret

000000000002629c <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>:
      compare(basic_string_view __str) const noexcept
   2629c:	55                   	push   %rbp
   2629d:	48 89 e5             	mov    %rsp,%rbp
   262a0:	48 83 ec 30          	sub    $0x30,%rsp
   262a4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   262a8:	48 89 d1             	mov    %rdx,%rcx
   262ab:	48 89 f0             	mov    %rsi,%rax
   262ae:	48 89 fa             	mov    %rdi,%rdx
   262b1:	48 89 ca             	mov    %rcx,%rdx
   262b4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   262b8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const size_type __rlen = std::min(this->_M_len, __str._M_len);
   262bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   262c0:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   262c4:	48 89 d6             	mov    %rdx,%rsi
   262c7:	48 89 c7             	mov    %rax,%rdi
   262ca:	e8 93 0e ff ff       	call   17162 <_ZSt3minImERKT_S2_S2_>
   262cf:	48 8b 00             	mov    (%rax),%rax
   262d2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);
   262d6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   262da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   262de:	48 8b 40 08          	mov    0x8(%rax),%rax
   262e2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   262e6:	48 89 ce             	mov    %rcx,%rsi
   262e9:	48 89 c7             	mov    %rax,%rdi
   262ec:	e8 70 94 fe ff       	call   f761 <_ZNSt11char_traitsIcE7compareEPKcS2_m>
   262f1:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (__ret == 0)
   262f4:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
   262f8:	75 19                	jne    26313 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_+0x77>
	  __ret = _S_compare(this->_M_len, __str._M_len);
   262fa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   262fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26302:	48 8b 00             	mov    (%rax),%rax
   26305:	48 89 d6             	mov    %rdx,%rsi
   26308:	48 89 c7             	mov    %rax,%rdi
   2630b:	e8 9d 02 00 00       	call   265ad <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>
   26310:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return __ret;
   26313:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
   26316:	c9                   	leave
   26317:	c3                   	ret

0000000000026318 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
   26318:	55                   	push   %rbp
   26319:	48 89 e5             	mov    %rsp,%rbp
   2631c:	53                   	push   %rbx
   2631d:	48 83 ec 28          	sub    $0x28,%rsp
   26321:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26325:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   26329:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
   2632d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26331:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   26335:	48 89 d6             	mov    %rdx,%rsi
   26338:	48 89 c7             	mov    %rax,%rdi
   2633b:	e8 42 0b ff ff       	call   16e82 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
   26340:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   26344:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26348:	48 89 d6             	mov    %rdx,%rsi
   2634b:	48 89 c7             	mov    %rax,%rdi
   2634e:	e8 a1 02 00 00       	call   265f4 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>
   26353:	eb 1a                	jmp    2636f <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_+0x57>
   26355:	48 89 c3             	mov    %rax,%rbx
   26358:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2635c:	48 89 c7             	mov    %rax,%rdi
   2635f:	e8 dc 0a ff ff       	call   16e40 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
   26364:	48 89 d8             	mov    %rbx,%rax
   26367:	48 89 c7             	mov    %rax,%rdi
   2636a:	e8 31 f0 fd ff       	call   53a0 <_Unwind_Resume@plt>
   2636f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   26373:	c9                   	leave
   26374:	c3                   	ret
   26375:	90                   	nop

0000000000026376 <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
   26376:	55                   	push   %rbp
   26377:	48 89 e5             	mov    %rsp,%rbp
   2637a:	48 83 ec 10          	sub    $0x10,%rsp
   2637e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26382:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
   26386:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2638a:	48 89 c7             	mov    %rax,%rdi
   2638d:	e8 0c 0d ff ff       	call   1709e <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   26392:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
   26395:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26399:	48 8b 00             	mov    (%rax),%rax
   2639c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   263a0:	48 89 ce             	mov    %rcx,%rsi
   263a3:	48 89 c7             	mov    %rax,%rdi
   263a6:	e8 9f 02 00 00       	call   2664a <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
   263ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   263af:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   263b3:	90                   	nop
   263b4:	c9                   	leave
   263b5:	c3                   	ret

00000000000263b6 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   263b6:	55                   	push   %rbp
   263b7:	48 89 e5             	mov    %rsp,%rbp
   263ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   263be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   263c2:	5d                   	pop    %rbp
   263c3:	c3                   	ret

00000000000263c4 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
   263c4:	55                   	push   %rbp
   263c5:	48 89 e5             	mov    %rsp,%rbp
   263c8:	53                   	push   %rbx
   263c9:	48 83 ec 18          	sub    $0x18,%rsp
   263cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   263d1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   263d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   263d9:	48 8b 50 08          	mov    0x8(%rax),%rdx
   263dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   263e1:	48 8b 40 10          	mov    0x10(%rax),%rax
   263e5:	48 39 c2             	cmp    %rax,%rdx
   263e8:	74 3c                	je     26426 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x62>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
   263ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   263ee:	48 89 c7             	mov    %rax,%rdi
   263f1:	e8 7d 02 00 00       	call   26673 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   263f6:	48 89 c2             	mov    %rax,%rdx
   263f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   263fd:	48 8b 48 08          	mov    0x8(%rax),%rcx
   26401:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26405:	48 89 ce             	mov    %rcx,%rsi
   26408:	48 89 c7             	mov    %rax,%rdi
   2640b:	e8 71 02 00 00       	call   26681 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
   26410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26414:	48 8b 40 08          	mov    0x8(%rax),%rax
   26418:	48 8d 50 08          	lea    0x8(%rax),%rdx
   2641c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26420:	48 89 50 08          	mov    %rdx,0x8(%rax)
   26424:	eb 30                	jmp    26456 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x92>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   26426:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2642a:	48 89 c7             	mov    %rax,%rdi
   2642d:	e8 41 02 00 00       	call   26673 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   26432:	48 89 c3             	mov    %rax,%rbx
   26435:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26439:	48 89 c7             	mov    %rax,%rdi
   2643c:	e8 75 02 00 00       	call   266b6 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   26441:	48 89 c1             	mov    %rax,%rcx
   26444:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26448:	48 89 da             	mov    %rbx,%rdx
   2644b:	48 89 ce             	mov    %rcx,%rsi
   2644e:	48 89 c7             	mov    %rax,%rdi
   26451:	e8 ba 03 00 00       	call   26810 <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
   26456:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2645a:	48 89 c7             	mov    %rax,%rdi
   2645d:	e8 40 05 00 00       	call   269a2 <_ZNSt6vectorIPKcSaIS1_EE4backEv>
      }
   26462:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   26466:	c9                   	leave
   26467:	c3                   	ret

0000000000026468 <_ZNKSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
   26468:	55                   	push   %rbp
   26469:	48 89 e5             	mov    %rsp,%rbp
   2646c:	48 83 ec 10          	sub    $0x10,%rsp
   26470:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26474:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26478:	48 89 c7             	mov    %rax,%rdi
   2647b:	e8 61 05 00 00       	call   269e1 <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
   26480:	48 8b 00             	mov    (%rax),%rax
   26483:	c9                   	leave
   26484:	c3                   	ret
   26485:	90                   	nop

0000000000026486 <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
   26486:	55                   	push   %rbp
   26487:	48 89 e5             	mov    %rsp,%rbp
   2648a:	48 83 ec 10          	sub    $0x10,%rsp
   2648e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
   26492:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26496:	48 89 c7             	mov    %rax,%rdi
   26499:	e8 5e 05 00 00       	call   269fc <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEEC1Ev>
   2649e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   264a2:	48 89 c7             	mov    %rax,%rdi
   264a5:	e8 6e 05 00 00       	call   26a18 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EEC1Ev>
   264aa:	90                   	nop
   264ab:	c9                   	leave
   264ac:	c3                   	ret
   264ad:	90                   	nop

00000000000264ae <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   264ae:	55                   	push   %rbp
   264af:	48 89 e5             	mov    %rsp,%rbp
   264b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   264b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   264ba:	90                   	nop
   264bb:	5d                   	pop    %rbp
   264bc:	c3                   	ret
   264bd:	90                   	nop

00000000000264be <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
   264be:	55                   	push   %rbp
   264bf:	48 89 e5             	mov    %rsp,%rbp
   264c2:	41 55                	push   %r13
   264c4:	41 54                	push   %r12
   264c6:	53                   	push   %rbx
   264c7:	48 83 ec 28          	sub    $0x28,%rsp
   264cb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   264cf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
   264d3:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
   264d7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   264db:	48 89 c7             	mov    %rax,%rdi
   264de:	e8 2f 54 ff ff       	call   1b912 <_ZNKSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   264e3:	48 89 c2             	mov    %rax,%rdx
   264e6:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   264ea:	48 89 d6             	mov    %rdx,%rsi
   264ed:	48 89 c7             	mov    %rax,%rdi
   264f0:	e8 39 05 00 00       	call   26a2e <_ZN9__gnu_cxx14__alloc_traitsISaIN2vk15LayerPropertiesEES2_E17_S_select_on_copyERKS3_>
   264f5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   264f9:	48 89 c7             	mov    %rax,%rdi
   264fc:	e8 17 1c ff ff       	call   18118 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   26501:	48 89 c1             	mov    %rax,%rcx
   26504:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   26508:	48 89 c2             	mov    %rax,%rdx
   2650b:	48 89 ce             	mov    %rcx,%rsi
   2650e:	48 89 df             	mov    %rbx,%rdi
   26511:	e8 42 05 00 00       	call   26a58 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EEC1EmRKS2_>
   26516:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   2651a:	48 89 c7             	mov    %rax,%rdi
   2651d:	e8 98 1a ff ff       	call   17fba <_ZNSaIN2vk15LayerPropertiesEED1Ev>
				      _M_get_Tp_allocator());
   26522:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   26526:	48 89 c7             	mov    %rax,%rdi
   26529:	e8 84 33 ff ff       	call   198b2 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   2652e:	49 89 c5             	mov    %rax,%r13
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   26531:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   26535:	48 8b 18             	mov    (%rax),%rbx
   26538:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2653c:	48 89 c7             	mov    %rax,%rdi
   2653f:	e8 98 05 00 00       	call   26adc <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>
   26544:	49 89 c4             	mov    %rax,%r12
   26547:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2654b:	48 89 c7             	mov    %rax,%rdi
   2654e:	e8 63 05 00 00       	call   26ab6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>
   26553:	4c 89 e9             	mov    %r13,%rcx
   26556:	48 89 da             	mov    %rbx,%rdx
   26559:	4c 89 e6             	mov    %r12,%rsi
   2655c:	48 89 c7             	mov    %rax,%rdi
   2655f:	e8 a1 05 00 00       	call   26b05 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
	this->_M_impl._M_finish =
   26564:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   26568:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   2656c:	eb 34                	jmp    265a2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EEC1ERKS3_+0xe4>
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
   2656e:	48 89 c3             	mov    %rax,%rbx
   26571:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   26575:	48 89 c7             	mov    %rax,%rdi
   26578:	e8 3d 1a ff ff       	call   17fba <_ZNSaIN2vk15LayerPropertiesEED1Ev>
   2657d:	48 89 d8             	mov    %rbx,%rax
   26580:	48 89 c7             	mov    %rax,%rdi
   26583:	e8 18 ee fd ff       	call   53a0 <_Unwind_Resume@plt>
      }
   26588:	48 89 c3             	mov    %rax,%rbx
   2658b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2658f:	48 89 c7             	mov    %rax,%rdi
   26592:	e8 2f 1a ff ff       	call   17fc6 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EED1Ev>
   26597:	48 89 d8             	mov    %rbx,%rax
   2659a:	48 89 c7             	mov    %rax,%rdi
   2659d:	e8 fe ed fd ff       	call   53a0 <_Unwind_Resume@plt>
   265a2:	48 83 c4 28          	add    $0x28,%rsp
   265a6:	5b                   	pop    %rbx
   265a7:	41 5c                	pop    %r12
   265a9:	41 5d                	pop    %r13
   265ab:	5d                   	pop    %rbp
   265ac:	c3                   	ret

00000000000265ad <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>:
      _S_compare(size_type __n1, size_type __n2) noexcept
   265ad:	55                   	push   %rbp
   265ae:	48 89 e5             	mov    %rsp,%rbp
   265b1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   265b5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const difference_type __diff = __n1 - __n2;
   265b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   265bd:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   265c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__diff > __limits::__max)
   265c5:	b8 00 00 00 80       	mov    $0x80000000,%eax
   265ca:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   265ce:	7c 07                	jl     265d7 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x2a>
	  return __limits::__max;
   265d0:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   265d5:	eb 1b                	jmp    265f2 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	if (__diff < __limits::__min)
   265d7:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
   265de:	ff ff ff 
   265e1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   265e5:	7f 07                	jg     265ee <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x41>
	  return __limits::__min;
   265e7:	b8 00 00 00 80       	mov    $0x80000000,%eax
   265ec:	eb 04                	jmp    265f2 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	return static_cast<int>(__diff);
   265ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   265f2:	5d                   	pop    %rbp
   265f3:	c3                   	ret

00000000000265f4 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
   265f4:	55                   	push   %rbp
   265f5:	48 89 e5             	mov    %rsp,%rbp
   265f8:	48 83 ec 10          	sub    $0x10,%rsp
   265fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26600:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
   26604:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   26608:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2660c:	48 89 d6             	mov    %rdx,%rsi
   2660f:	48 89 c7             	mov    %rax,%rdi
   26612:	e8 77 0b ff ff       	call   1718e <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   26617:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2661b:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   2661e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26622:	48 8b 10             	mov    (%rax),%rdx
   26625:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26629:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   2662d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26631:	48 8b 00             	mov    (%rax),%rax
   26634:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   26638:	48 c1 e2 03          	shl    $0x3,%rdx
   2663c:	48 01 c2             	add    %rax,%rdx
   2663f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26643:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
   26647:	90                   	nop
   26648:	c9                   	leave
   26649:	c3                   	ret

000000000002664a <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   2664a:	55                   	push   %rbp
   2664b:	48 89 e5             	mov    %rsp,%rbp
   2664e:	48 83 ec 20          	sub    $0x20,%rsp
   26652:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26656:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2665a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   2665e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   26662:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26666:	48 89 d6             	mov    %rdx,%rsi
   26669:	48 89 c7             	mov    %rax,%rdi
   2666c:	e8 e8 04 00 00       	call   26b59 <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>
   26671:	c9                   	leave
   26672:	c3                   	ret

0000000000026673 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   26673:	55                   	push   %rbp
   26674:	48 89 e5             	mov    %rsp,%rbp
   26677:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   2667b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2667f:	5d                   	pop    %rbp
   26680:	c3                   	ret

0000000000026681 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   26681:	55                   	push   %rbp
   26682:	48 89 e5             	mov    %rsp,%rbp
   26685:	48 83 ec 20          	sub    $0x20,%rsp
   26689:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2668d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   26691:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   26695:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26699:	48 89 c7             	mov    %rax,%rdi
   2669c:	e8 d2 ff ff ff       	call   26673 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   266a1:	48 89 c2             	mov    %rax,%rdx
   266a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   266a8:	48 89 d6             	mov    %rdx,%rsi
   266ab:	48 89 c7             	mov    %rax,%rdi
   266ae:	e8 cf 04 00 00       	call   26b82 <_ZSt12construct_atIPKcJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   266b3:	90                   	nop
   266b4:	c9                   	leave
   266b5:	c3                   	ret

00000000000266b6 <_ZNSt6vectorIPKcSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   266b6:	55                   	push   %rbp
   266b7:	48 89 e5             	mov    %rsp,%rbp
   266ba:	48 83 ec 20          	sub    $0x20,%rsp
   266be:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   266c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   266c6:	48 8d 50 08          	lea    0x8(%rax),%rdx
   266ca:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   266ce:	48 89 d6             	mov    %rdx,%rsi
   266d1:	48 89 c7             	mov    %rax,%rdi
   266d4:	e8 e9 04 00 00       	call   26bc2 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   266d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   266dd:	c9                   	leave
   266de:	c3                   	ret
   266df:	90                   	nop

00000000000266e0 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>:
      _M_check_len(size_type __n, const char* __s) const
   266e0:	55                   	push   %rbp
   266e1:	48 89 e5             	mov    %rsp,%rbp
   266e4:	53                   	push   %rbx
   266e5:	48 83 ec 38          	sub    $0x38,%rsp
   266e9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   266ed:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   266f1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   266f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   266f9:	48 89 c7             	mov    %rax,%rdi
   266fc:	e8 df 04 00 00       	call   26be0 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   26701:	48 89 c3             	mov    %rax,%rbx
   26704:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26708:	48 89 c7             	mov    %rax,%rdi
   2670b:	e8 60 0f ff ff       	call   17670 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   26710:	48 29 c3             	sub    %rax,%rbx
   26713:	48 89 da             	mov    %rbx,%rdx
   26716:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2671a:	48 39 c2             	cmp    %rax,%rdx
   2671d:	0f 92 c0             	setb   %al
   26720:	84 c0                	test   %al,%al
   26722:	74 0c                	je     26730 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0x50>
	  __throw_length_error(__N(__s));
   26724:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   26728:	48 89 c7             	mov    %rax,%rdi
   2672b:	e8 b0 e9 fd ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   26730:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26734:	48 89 c7             	mov    %rax,%rdi
   26737:	e8 34 0f ff ff       	call   17670 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   2673c:	48 89 c3             	mov    %rax,%rbx
   2673f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26743:	48 89 c7             	mov    %rax,%rdi
   26746:	e8 25 0f ff ff       	call   17670 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   2674b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2674f:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   26753:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   26757:	48 89 d6             	mov    %rdx,%rsi
   2675a:	48 89 c7             	mov    %rax,%rdi
   2675d:	e8 7a 21 ff ff       	call   188dc <_ZSt3maxImERKT_S2_S2_>
   26762:	48 8b 00             	mov    (%rax),%rax
   26765:	48 01 d8             	add    %rbx,%rax
   26768:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2676c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26770:	48 89 c7             	mov    %rax,%rdi
   26773:	e8 f8 0e ff ff       	call   17670 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   26778:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   2677c:	72 12                	jb     26790 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xb0>
   2677e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26782:	48 89 c7             	mov    %rax,%rdi
   26785:	e8 56 04 00 00       	call   26be0 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   2678a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   2678e:	73 0e                	jae    2679e <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xbe>
   26790:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26794:	48 89 c7             	mov    %rax,%rdi
   26797:	e8 44 04 00 00       	call   26be0 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   2679c:	eb 04                	jmp    267a2 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xc2>
   2679e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   267a2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   267a6:	c9                   	leave
   267a7:	c3                   	ret

00000000000267a8 <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
   267a8:	55                   	push   %rbp
   267a9:	48 89 e5             	mov    %rsp,%rbp
   267ac:	53                   	push   %rbx
   267ad:	48 83 ec 18          	sub    $0x18,%rsp
   267b1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   267b5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() - __rhs.base(); }
   267b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   267bd:	48 89 c7             	mov    %rax,%rdi
   267c0:	e8 3d 04 00 00       	call   26c02 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   267c5:	48 8b 18             	mov    (%rax),%rbx
   267c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   267cc:	48 89 c7             	mov    %rax,%rdi
   267cf:	e8 2e 04 00 00       	call   26c02 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   267d4:	48 8b 00             	mov    (%rax),%rax
   267d7:	48 89 da             	mov    %rbx,%rdx
   267da:	48 29 c2             	sub    %rax,%rdx
   267dd:	48 89 d0             	mov    %rdx,%rax
   267e0:	48 c1 f8 03          	sar    $0x3,%rax
   267e4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   267e8:	c9                   	leave
   267e9:	c3                   	ret

00000000000267ea <_ZNSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   267ea:	55                   	push   %rbp
   267eb:	48 89 e5             	mov    %rsp,%rbp
   267ee:	48 83 ec 20          	sub    $0x20,%rsp
   267f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   267f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   267fa:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   267fe:	48 89 d6             	mov    %rdx,%rsi
   26801:	48 89 c7             	mov    %rax,%rdi
   26804:	e8 b9 03 00 00       	call   26bc2 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   26809:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2680d:	c9                   	leave
   2680e:	c3                   	ret
   2680f:	90                   	nop

0000000000026810 <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   26810:	55                   	push   %rbp
   26811:	48 89 e5             	mov    %rsp,%rbp
   26814:	53                   	push   %rbx
   26815:	48 83 ec 68          	sub    $0x68,%rsp
   26819:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   2681d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   26821:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   26825:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   26829:	48 8d 15 17 b1 00 00 	lea    0xb117(%rip),%rdx        # 31947 <_ZNSt8__detailL19__atomic_spin_countE+0x108b>
   26830:	be 01 00 00 00       	mov    $0x1,%esi
   26835:	48 89 c7             	mov    %rax,%rdi
   26838:	e8 a3 fe ff ff       	call   266e0 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>
   2683d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __old_start = this->_M_impl._M_start;
   26841:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   26845:	48 8b 00             	mov    (%rax),%rax
   26848:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pointer __old_finish = this->_M_impl._M_finish;
   2684c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   26850:	48 8b 40 08          	mov    0x8(%rax),%rax
   26854:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      const size_type __elems_before = __position - begin();
   26858:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2685c:	48 89 c7             	mov    %rax,%rdi
   2685f:	e8 86 ff ff ff       	call   267ea <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
   26864:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   26868:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   2686c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   26870:	48 89 d6             	mov    %rdx,%rsi
   26873:	48 89 c7             	mov    %rax,%rdi
   26876:	e8 2d ff ff ff       	call   267a8 <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
   2687b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_start(this->_M_allocate(__len));
   2687f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   26883:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   26887:	48 89 d6             	mov    %rdx,%rsi
   2688a:	48 89 c7             	mov    %rax,%rdi
   2688d:	e8 fc 08 ff ff       	call   1718e <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   26892:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      pointer __new_finish(__new_start);
   26896:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2689a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
   2689e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   268a2:	48 89 c7             	mov    %rax,%rdi
   268a5:	e8 c9 fd ff ff       	call   26673 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   268aa:	48 89 c2             	mov    %rax,%rdx
				   __new_start + __elems_before,
   268ad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   268b1:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   268b8:	00 
	  _Alloc_traits::construct(this->_M_impl,
   268b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   268bd:	48 01 c1             	add    %rax,%rcx
   268c0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   268c4:	48 89 ce             	mov    %rcx,%rsi
   268c7:	48 89 c7             	mov    %rax,%rdi
   268ca:	e8 b2 fd ff ff       	call   26681 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
   268cf:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   268d6:	00 
					 __new_start, _M_get_Tp_allocator());
   268d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   268db:	48 89 c7             	mov    %rax,%rdi
   268de:	e8 bb 07 ff ff       	call   1709e <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   268e3:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__old_start, __position.base(),
   268e6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   268ea:	48 89 c7             	mov    %rax,%rdi
   268ed:	e8 10 03 00 00       	call   26c02 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   268f2:	48 8b 30             	mov    (%rax),%rsi
   268f5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   268f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   268fd:	48 89 d9             	mov    %rbx,%rcx
   26900:	48 89 c7             	mov    %rax,%rdi
   26903:	e8 08 03 00 00       	call   26c10 <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
   26908:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	      ++__new_finish;
   2690c:	48 83 45 c0 08       	addq   $0x8,-0x40(%rbp)
					 __new_finish, _M_get_Tp_allocator());
   26911:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   26915:	48 89 c7             	mov    %rax,%rdi
   26918:	e8 81 07 ff ff       	call   1709e <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   2691d:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__position.base(), __old_finish,
   26920:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   26924:	48 89 c7             	mov    %rax,%rdi
   26927:	e8 d6 02 00 00       	call   26c02 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   2692c:	48 8b 00             	mov    (%rax),%rax
   2692f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   26933:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   26937:	48 89 d9             	mov    %rbx,%rcx
   2693a:	48 89 c7             	mov    %rax,%rdi
   2693d:	e8 ce 02 00 00       	call   26c10 <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
   26942:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _M_deallocate(__old_start,
   26946:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
		    this->_M_impl._M_end_of_storage - __old_start);
   2694a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2694e:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   26952:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
   26956:	48 c1 fa 03          	sar    $0x3,%rdx
      _M_deallocate(__old_start,
   2695a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2695e:	48 89 ce             	mov    %rcx,%rsi
   26961:	48 89 c7             	mov    %rax,%rdi
   26964:	e8 1b 33 ff ff       	call   19c84 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      this->_M_impl._M_start = __new_start;
   26969:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2696d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   26971:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
   26974:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   26978:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   2697c:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   26980:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26984:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2698b:	00 
   2698c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   26990:	48 01 c2             	add    %rax,%rdx
   26993:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   26997:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   2699b:	90                   	nop
   2699c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   269a0:	c9                   	leave
   269a1:	c3                   	ret

00000000000269a2 <_ZNSt6vectorIPKcSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
   269a2:	55                   	push   %rbp
   269a3:	48 89 e5             	mov    %rsp,%rbp
   269a6:	48 83 ec 20          	sub    $0x20,%rsp
   269aa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
   269ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   269b2:	48 89 c7             	mov    %rax,%rdi
   269b5:	e8 fc fc ff ff       	call   266b6 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   269ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   269be:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   269c2:	be 01 00 00 00       	mov    $0x1,%esi
   269c7:	48 89 c7             	mov    %rax,%rdi
   269ca:	e8 93 02 00 00       	call   26c62 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>
   269cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   269d3:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   269d7:	48 89 c7             	mov    %rax,%rdi
   269da:	e8 c5 02 00 00       	call   26ca4 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
      }
   269df:	c9                   	leave
   269e0:	c3                   	ret

00000000000269e1 <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
   269e1:	55                   	push   %rbp
   269e2:	48 89 e5             	mov    %rsp,%rbp
   269e5:	48 83 ec 10          	sub    $0x10,%rsp
   269e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
   269ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   269f1:	48 89 c7             	mov    %rax,%rdi
   269f4:	e8 bc 02 00 00       	call   26cb5 <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
   269f9:	c9                   	leave
   269fa:	c3                   	ret
   269fb:	90                   	nop

00000000000269fc <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEEC1Ev>:
      _Tuple_impl()
   269fc:	55                   	push   %rbp
   269fd:	48 89 e5             	mov    %rsp,%rbp
   26a00:	48 83 ec 10          	sub    $0x10,%rsp
   26a04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
   26a08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26a0c:	48 89 c7             	mov    %rax,%rdi
   26a0f:	e8 bc 02 00 00       	call   26cd0 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EEC1Ev>
   26a14:	90                   	nop
   26a15:	c9                   	leave
   26a16:	c3                   	ret
   26a17:	90                   	nop

0000000000026a18 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EEC1Ev>:
      constexpr _Head_base()
   26a18:	55                   	push   %rbp
   26a19:	48 89 e5             	mov    %rsp,%rbp
   26a1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   26a20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26a24:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   26a2b:	90                   	nop
   26a2c:	5d                   	pop    %rbp
   26a2d:	c3                   	ret

0000000000026a2e <_ZN9__gnu_cxx14__alloc_traitsISaIN2vk15LayerPropertiesEES2_E17_S_select_on_copyERKS3_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
   26a2e:	55                   	push   %rbp
   26a2f:	48 89 e5             	mov    %rsp,%rbp
   26a32:	48 83 ec 10          	sub    $0x10,%rsp
   26a36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26a3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _Base_type::select_on_container_copy_construction(__a); }
   26a3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26a42:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   26a46:	48 89 d6             	mov    %rdx,%rsi
   26a49:	48 89 c7             	mov    %rax,%rdi
   26a4c:	e8 8a 02 00 00       	call   26cdb <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE37select_on_container_copy_constructionERKS2_>
   26a51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26a55:	c9                   	leave
   26a56:	c3                   	ret
   26a57:	90                   	nop

0000000000026a58 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
   26a58:	55                   	push   %rbp
   26a59:	48 89 e5             	mov    %rsp,%rbp
   26a5c:	53                   	push   %rbx
   26a5d:	48 83 ec 28          	sub    $0x28,%rsp
   26a61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26a65:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   26a69:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
   26a6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26a71:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   26a75:	48 89 d6             	mov    %rdx,%rsi
   26a78:	48 89 c7             	mov    %rax,%rdi
   26a7b:	e8 84 02 00 00       	call   26d04 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
   26a80:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   26a84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26a88:	48 89 d6             	mov    %rdx,%rsi
   26a8b:	48 89 c7             	mov    %rax,%rdi
   26a8e:	e8 a3 02 00 00       	call   26d36 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_M_create_storageEm>
   26a93:	eb 1a                	jmp    26aaf <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EEC1EmRKS2_+0x57>
   26a95:	48 89 c3             	mov    %rax,%rbx
   26a98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26a9c:	48 89 c7             	mov    %rax,%rdi
   26a9f:	e8 da 01 ff ff       	call   16c7e <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implD1Ev>
   26aa4:	48 89 d8             	mov    %rbx,%rax
   26aa7:	48 89 c7             	mov    %rax,%rdi
   26aaa:	e8 f1 e8 fd ff       	call   53a0 <_Unwind_Resume@plt>
   26aaf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   26ab3:	c9                   	leave
   26ab4:	c3                   	ret
   26ab5:	90                   	nop

0000000000026ab6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
   26ab6:	55                   	push   %rbp
   26ab7:	48 89 e5             	mov    %rsp,%rbp
   26aba:	48 83 ec 20          	sub    $0x20,%rsp
   26abe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
   26ac2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   26ac6:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   26aca:	48 89 d6             	mov    %rdx,%rsi
   26acd:	48 89 c7             	mov    %rax,%rdi
   26ad0:	e8 c3 02 00 00       	call   26d98 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS4_>
   26ad5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26ad9:	c9                   	leave
   26ada:	c3                   	ret
   26adb:	90                   	nop

0000000000026adc <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
   26adc:	55                   	push   %rbp
   26add:	48 89 e5             	mov    %rsp,%rbp
   26ae0:	48 83 ec 20          	sub    $0x20,%rsp
   26ae4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
   26ae8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26aec:	48 8d 50 08          	lea    0x8(%rax),%rdx
   26af0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   26af4:	48 89 d6             	mov    %rdx,%rsi
   26af7:	48 89 c7             	mov    %rax,%rdi
   26afa:	e8 99 02 00 00       	call   26d98 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS4_>
   26aff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26b03:	c9                   	leave
   26b04:	c3                   	ret

0000000000026b05 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   26b05:	55                   	push   %rbp
   26b06:	48 89 e5             	mov    %rsp,%rbp
   26b09:	48 83 ec 20          	sub    $0x20,%rsp
   26b0d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26b11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   26b15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   26b19:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      if (std::is_constant_evaluated())
   26b1d:	e8 87 f6 fd ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   26b22:	84 c0                	test   %al,%al
   26b24:	74 19                	je     26b3f <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E+0x3a>
	return std::__do_uninit_copy(__first, __last, __result);
   26b26:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   26b2a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   26b2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26b32:	48 89 ce             	mov    %rcx,%rsi
   26b35:	48 89 c7             	mov    %rax,%rdi
   26b38:	e8 c1 02 00 00       	call   26dfe <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
   26b3d:	eb 18                	jmp    26b57 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E+0x52>
      return std::uninitialized_copy(__first, __last, __result);
   26b3f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   26b43:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   26b47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26b4b:	48 89 ce             	mov    %rcx,%rsi
   26b4e:	48 89 c7             	mov    %rax,%rdi
   26b51:	e8 25 03 00 00       	call   26e7b <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
   26b56:	90                   	nop
    }
   26b57:	c9                   	leave
   26b58:	c3                   	ret

0000000000026b59 <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   26b59:	55                   	push   %rbp
   26b5a:	48 89 e5             	mov    %rsp,%rbp
   26b5d:	48 83 ec 20          	sub    $0x20,%rsp
   26b61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26b65:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   26b69:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   26b6d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   26b71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26b75:	48 89 d6             	mov    %rdx,%rsi
   26b78:	48 89 c7             	mov    %rax,%rdi
   26b7b:	e8 30 03 00 00       	call   26eb0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>
    }
   26b80:	c9                   	leave
   26b81:	c3                   	ret

0000000000026b82 <_ZSt12construct_atIPKcJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   26b82:	55                   	push   %rbp
   26b83:	48 89 e5             	mov    %rsp,%rbp
   26b86:	53                   	push   %rbx
   26b87:	48 83 ec 18          	sub    $0x18,%rsp
   26b8b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26b8f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   26b93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26b97:	48 89 c6             	mov    %rax,%rsi
   26b9a:	bf 08 00 00 00       	mov    $0x8,%edi
   26b9f:	e8 10 f6 fd ff       	call   61b4 <_ZnwmPv>
   26ba4:	48 89 c3             	mov    %rax,%rbx
   26ba7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26bab:	48 89 c7             	mov    %rax,%rdi
   26bae:	e8 c0 fa ff ff       	call   26673 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   26bb3:	48 8b 00             	mov    (%rax),%rax
   26bb6:	48 89 03             	mov    %rax,(%rbx)
   26bb9:	48 89 d8             	mov    %rbx,%rax
   26bbc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   26bc0:	c9                   	leave
   26bc1:	c3                   	ret

0000000000026bc2 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   26bc2:	55                   	push   %rbp
   26bc3:	48 89 e5             	mov    %rsp,%rbp
   26bc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26bca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   26bce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   26bd2:	48 8b 10             	mov    (%rax),%rdx
   26bd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26bd9:	48 89 10             	mov    %rdx,(%rax)
   26bdc:	90                   	nop
   26bdd:	5d                   	pop    %rbp
   26bde:	c3                   	ret
   26bdf:	90                   	nop

0000000000026be0 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   26be0:	55                   	push   %rbp
   26be1:	48 89 e5             	mov    %rsp,%rbp
   26be4:	48 83 ec 10          	sub    $0x10,%rsp
   26be8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   26bec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26bf0:	48 89 c7             	mov    %rax,%rdi
   26bf3:	e8 16 03 00 00       	call   26f0e <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   26bf8:	48 89 c7             	mov    %rax,%rdi
   26bfb:	e8 20 05 ff ff       	call   17120 <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
   26c00:	c9                   	leave
   26c01:	c3                   	ret

0000000000026c02 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   26c02:	55                   	push   %rbp
   26c03:	48 89 e5             	mov    %rsp,%rbp
   26c06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   26c0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26c0e:	5d                   	pop    %rbp
   26c0f:	c3                   	ret

0000000000026c10 <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   26c10:	55                   	push   %rbp
   26c11:	48 89 e5             	mov    %rsp,%rbp
   26c14:	48 83 ec 20          	sub    $0x20,%rsp
   26c18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26c1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   26c20:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   26c24:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   26c28:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   26c2c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   26c30:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   26c34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26c38:	48 89 c7             	mov    %rax,%rdi
   26c3b:	e8 dc 02 00 00       	call   26f1c <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   26c40:	c9                   	leave
   26c41:	c3                   	ret

0000000000026c42 <_ZNSt16allocator_traitsISaIPKcEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   26c42:	55                   	push   %rbp
   26c43:	48 89 e5             	mov    %rsp,%rbp
   26c46:	48 83 ec 10          	sub    $0x10,%rsp
   26c4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26c4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   26c52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   26c56:	48 89 c7             	mov    %rax,%rdi
   26c59:	e8 43 4e ff ff       	call   1baa1 <_ZSt10destroy_atIPKcEvPT_>
	}
   26c5e:	90                   	nop
   26c5f:	c9                   	leave
   26c60:	c3                   	ret
   26c61:	90                   	nop

0000000000026c62 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
   26c62:	55                   	push   %rbp
   26c63:	48 89 e5             	mov    %rsp,%rbp
   26c66:	48 83 ec 20          	sub    $0x20,%rsp
   26c6a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26c6e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
   26c72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26c76:	48 8b 00             	mov    (%rax),%rax
   26c79:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   26c7d:	48 c1 e2 03          	shl    $0x3,%rdx
   26c81:	48 f7 da             	neg    %rdx
   26c84:	48 01 d0             	add    %rdx,%rax
   26c87:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   26c8b:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   26c8f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   26c93:	48 89 d6             	mov    %rdx,%rsi
   26c96:	48 89 c7             	mov    %rax,%rdi
   26c99:	e8 24 ff ff ff       	call   26bc2 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   26c9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   26ca2:	c9                   	leave
   26ca3:	c3                   	ret

0000000000026ca4 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   26ca4:	55                   	push   %rbp
   26ca5:	48 89 e5             	mov    %rsp,%rbp
   26ca8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   26cac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26cb0:	48 8b 00             	mov    (%rax),%rax
   26cb3:	5d                   	pop    %rbp
   26cb4:	c3                   	ret

0000000000026cb5 <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   26cb5:	55                   	push   %rbp
   26cb6:	48 89 e5             	mov    %rsp,%rbp
   26cb9:	48 83 ec 10          	sub    $0x10,%rsp
   26cbd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
   26cc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26cc5:	48 89 c7             	mov    %rax,%rdi
   26cc8:	e8 b2 02 00 00       	call   26f7f <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>
   26ccd:	c9                   	leave
   26cce:	c3                   	ret
   26ccf:	90                   	nop

0000000000026cd0 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EEC1Ev>:
      constexpr _Head_base()
   26cd0:	55                   	push   %rbp
   26cd1:	48 89 e5             	mov    %rsp,%rbp
   26cd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   26cd8:	90                   	nop
   26cd9:	5d                   	pop    %rbp
   26cda:	c3                   	ret

0000000000026cdb <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
   26cdb:	55                   	push   %rbp
   26cdc:	48 89 e5             	mov    %rsp,%rbp
   26cdf:	48 83 ec 10          	sub    $0x10,%rsp
   26ce3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26ce7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __rhs; }
   26ceb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   26cef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26cf3:	48 89 d6             	mov    %rdx,%rsi
   26cf6:	48 89 c7             	mov    %rax,%rdi
   26cf9:	e8 78 f5 ff ff       	call   26276 <_ZNSaIN2vk15LayerPropertiesEEC1ERKS1_>
   26cfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26d02:	c9                   	leave
   26d03:	c3                   	ret

0000000000026d04 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   26d04:	55                   	push   %rbp
   26d05:	48 89 e5             	mov    %rsp,%rbp
   26d08:	48 83 ec 10          	sub    $0x10,%rsp
   26d0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26d10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   26d14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   26d18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26d1c:	48 89 d6             	mov    %rdx,%rsi
   26d1f:	48 89 c7             	mov    %rax,%rdi
   26d22:	e8 4f f5 ff ff       	call   26276 <_ZNSaIN2vk15LayerPropertiesEEC1ERKS1_>
   26d27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26d2b:	48 89 c7             	mov    %rax,%rdi
   26d2e:	e8 03 f2 ff ff       	call   25f36 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
   26d33:	90                   	nop
   26d34:	c9                   	leave
   26d35:	c3                   	ret

0000000000026d36 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
   26d36:	55                   	push   %rbp
   26d37:	48 89 e5             	mov    %rsp,%rbp
   26d3a:	48 83 ec 10          	sub    $0x10,%rsp
   26d3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26d42:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
   26d46:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   26d4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26d4e:	48 89 d6             	mov    %rdx,%rsi
   26d51:	48 89 c7             	mov    %rax,%rdi
   26d54:	e8 31 3c ff ff       	call   1a98a <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm>
   26d59:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   26d5d:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   26d60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26d64:	48 8b 10             	mov    (%rax),%rdx
   26d67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26d6b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   26d6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26d73:	48 8b 08             	mov    (%rax),%rcx
   26d76:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   26d7a:	48 89 d0             	mov    %rdx,%rax
   26d7d:	48 c1 e0 06          	shl    $0x6,%rax
   26d81:	48 01 d0             	add    %rdx,%rax
   26d84:	48 c1 e0 03          	shl    $0x3,%rax
   26d88:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   26d8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26d90:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
   26d94:	90                   	nop
   26d95:	c9                   	leave
   26d96:	c3                   	ret
   26d97:	90                   	nop

0000000000026d98 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   26d98:	55                   	push   %rbp
   26d99:	48 89 e5             	mov    %rsp,%rbp
   26d9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26da0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   26da4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   26da8:	48 8b 10             	mov    (%rax),%rdx
   26dab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26daf:	48 89 10             	mov    %rdx,(%rax)
   26db2:	90                   	nop
   26db3:	5d                   	pop    %rbp
   26db4:	c3                   	ret

0000000000026db5 <_ZN9__gnu_cxxeqIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   26db5:	55                   	push   %rbp
   26db6:	48 89 e5             	mov    %rsp,%rbp
   26db9:	53                   	push   %rbx
   26dba:	48 83 ec 18          	sub    $0x18,%rsp
   26dbe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26dc2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   26dc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26dca:	48 89 c7             	mov    %rax,%rdi
   26dcd:	e8 1e 00 00 00       	call   26df0 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   26dd2:	48 8b 18             	mov    (%rax),%rbx
   26dd5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26dd9:	48 89 c7             	mov    %rax,%rdi
   26ddc:	e8 0f 00 00 00       	call   26df0 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   26de1:	48 8b 00             	mov    (%rax),%rax
   26de4:	48 39 c3             	cmp    %rax,%rbx
   26de7:	0f 94 c0             	sete   %al
   26dea:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   26dee:	c9                   	leave
   26def:	c3                   	ret

0000000000026df0 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   26df0:	55                   	push   %rbp
   26df1:	48 89 e5             	mov    %rsp,%rbp
   26df4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   26df8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26dfc:	5d                   	pop    %rbp
   26dfd:	c3                   	ret

0000000000026dfe <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
   26dfe:	55                   	push   %rbp
   26dff:	48 89 e5             	mov    %rsp,%rbp
   26e02:	53                   	push   %rbx
   26e03:	48 83 ec 38          	sub    $0x38,%rsp
   26e07:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   26e0b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   26e0f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      _ForwardIterator __cur = __result;
   26e13:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   26e17:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  for (; __first != __last; ++__first, (void)++__cur)
   26e1b:	eb 3a                	jmp    26e57 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_+0x59>
	    std::_Construct(std::__addressof(*__cur), *__first);
   26e1d:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   26e21:	48 89 c7             	mov    %rax,%rdi
   26e24:	e8 95 01 00 00       	call   26fbe <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
   26e29:	48 89 c3             	mov    %rax,%rbx
   26e2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26e30:	48 89 c7             	mov    %rax,%rdi
   26e33:	e8 02 58 ff ff       	call   1c63a <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   26e38:	48 89 de             	mov    %rbx,%rsi
   26e3b:	48 89 c7             	mov    %rax,%rdi
   26e3e:	e8 8c 01 00 00       	call   26fcf <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
   26e43:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   26e47:	48 89 c7             	mov    %rax,%rdi
   26e4a:	e8 4b 01 00 00       	call   26f9a <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>
   26e4f:	48 81 45 e8 08 02 00 	addq   $0x208,-0x18(%rbp)
   26e56:	00 
   26e57:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   26e5b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   26e5f:	48 89 d6             	mov    %rdx,%rsi
   26e62:	48 89 c7             	mov    %rax,%rdi
   26e65:	e8 4b ff ff ff       	call   26db5 <_ZN9__gnu_cxxeqIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
   26e6a:	83 f0 01             	xor    $0x1,%eax
   26e6d:	84 c0                	test   %al,%al
   26e6f:	75 ac                	jne    26e1d <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_+0x1f>
	  return __cur;
   26e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   26e75:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   26e79:	c9                   	leave
   26e7a:	c3                   	ret

0000000000026e7b <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   26e7b:	55                   	push   %rbp
   26e7c:	48 89 e5             	mov    %rsp,%rbp
   26e7f:	48 83 ec 30          	sub    $0x30,%rsp
   26e83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26e87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   26e8b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   26e8f:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
      const bool __assignable
   26e93:	c6 45 fe 00          	movb   $0x0,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   26e97:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   26e9b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   26e9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26ea3:	48 89 ce             	mov    %rcx,%rsi
   26ea6:	48 89 c7             	mov    %rax,%rdi
   26ea9:	e8 cf 01 00 00       	call   2707d <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
    }
   26eae:	c9                   	leave
   26eaf:	c3                   	ret

0000000000026eb0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   26eb0:	55                   	push   %rbp
   26eb1:	48 89 e5             	mov    %rsp,%rbp
   26eb4:	48 83 ec 20          	sub    $0x20,%rsp
   26eb8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26ebc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   26ec0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   26ec5:	74 40                	je     26f07 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   26ec7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26ecb:	48 89 c7             	mov    %rax,%rdi
   26ece:	e8 1f 04 ff ff       	call   172f2 <_ZSt11__addressofIPKcEPT_RS2_>
   26ed3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   26ed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26edb:	48 89 c7             	mov    %rax,%rdi
   26ede:	e8 c7 01 00 00       	call   270aa <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>
	      ++__first;
   26ee3:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   26ee8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26eec:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   26ef0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   26ef4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26ef8:	48 89 ce             	mov    %rcx,%rsi
   26efb:	48 89 c7             	mov    %rax,%rdi
   26efe:	e8 e4 01 00 00       	call   270e7 <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>
   26f03:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   26f07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   26f0b:	c9                   	leave
   26f0c:	c3                   	ret
   26f0d:	90                   	nop

0000000000026f0e <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   26f0e:	55                   	push   %rbp
   26f0f:	48 89 e5             	mov    %rsp,%rbp
   26f12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   26f16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26f1a:	5d                   	pop    %rbp
   26f1b:	c3                   	ret

0000000000026f1c <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   26f1c:	55                   	push   %rbp
   26f1d:	48 89 e5             	mov    %rsp,%rbp
   26f20:	41 54                	push   %r12
   26f22:	53                   	push   %rbx
   26f23:	48 83 ec 20          	sub    $0x20,%rsp
   26f27:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26f2b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   26f2f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   26f33:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   26f37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26f3b:	48 89 c7             	mov    %rax,%rdi
   26f3e:	e8 2c 58 ff ff       	call   1c76f <_ZSt12__niter_baseIPPKcET_S3_>
   26f43:	49 89 c4             	mov    %rax,%r12
   26f46:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26f4a:	48 89 c7             	mov    %rax,%rdi
   26f4d:	e8 1d 58 ff ff       	call   1c76f <_ZSt12__niter_baseIPPKcET_S3_>
   26f52:	48 89 c3             	mov    %rax,%rbx
   26f55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26f59:	48 89 c7             	mov    %rax,%rdi
   26f5c:	e8 0e 58 ff ff       	call   1c76f <_ZSt12__niter_baseIPPKcET_S3_>
   26f61:	48 89 c7             	mov    %rax,%rdi
   26f64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   26f68:	48 89 c1             	mov    %rax,%rcx
   26f6b:	4c 89 e2             	mov    %r12,%rdx
   26f6e:	48 89 de             	mov    %rbx,%rsi
   26f71:	e8 d3 01 00 00       	call   27149 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   26f76:	48 83 c4 20          	add    $0x20,%rsp
   26f7a:	5b                   	pop    %rbx
   26f7b:	41 5c                	pop    %r12
   26f7d:	5d                   	pop    %rbp
   26f7e:	c3                   	ret

0000000000026f7f <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   26f7f:	55                   	push   %rbp
   26f80:	48 89 e5             	mov    %rsp,%rbp
   26f83:	48 83 ec 10          	sub    $0x10,%rsp
   26f87:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26f8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26f8f:	48 89 c7             	mov    %rax,%rdi
   26f92:	e8 5a 02 00 00       	call   271f1 <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERKS4_>
   26f97:	c9                   	leave
   26f98:	c3                   	ret
   26f99:	90                   	nop

0000000000026f9a <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   26f9a:	55                   	push   %rbp
   26f9b:	48 89 e5             	mov    %rsp,%rbp
   26f9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   26fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26fa6:	48 8b 00             	mov    (%rax),%rax
   26fa9:	48 8d 90 08 02 00 00 	lea    0x208(%rax),%rdx
   26fb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26fb4:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   26fb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   26fbb:	5d                   	pop    %rbp
   26fbc:	c3                   	ret
   26fbd:	90                   	nop

0000000000026fbe <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   26fbe:	55                   	push   %rbp
   26fbf:	48 89 e5             	mov    %rsp,%rbp
   26fc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   26fc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26fca:	48 8b 00             	mov    (%rax),%rax
   26fcd:	5d                   	pop    %rbp
   26fce:	c3                   	ret

0000000000026fcf <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   26fcf:	55                   	push   %rbp
   26fd0:	48 89 e5             	mov    %rsp,%rbp
   26fd3:	53                   	push   %rbx
   26fd4:	48 83 ec 18          	sub    $0x18,%rsp
   26fd8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26fdc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      if (std::__is_constant_evaluated())
   26fe0:	e8 b9 f1 fd ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   26fe5:	84 c0                	test   %al,%al
   26fe7:	74 20                	je     27009 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_+0x3a>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   26fe9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26fed:	48 89 c7             	mov    %rax,%rdi
   26ff0:	e8 0a 02 00 00       	call   271ff <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>
   26ff5:	48 89 c2             	mov    %rax,%rdx
   26ff8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26ffc:	48 89 d6             	mov    %rdx,%rsi
   26fff:	48 89 c7             	mov    %rax,%rdi
   27002:	e8 06 02 00 00       	call   2720d <_ZSt12construct_atIN2vk15LayerPropertiesEJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	  return;
   27007:	eb 6e                	jmp    27077 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_+0xa8>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   27009:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2700d:	48 89 c6             	mov    %rax,%rsi
   27010:	bf 08 02 00 00       	mov    $0x208,%edi
   27015:	e8 9a f1 fd ff       	call   61b4 <_ZnwmPv>
   2701a:	48 89 c3             	mov    %rax,%rbx
   2701d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27021:	48 89 c7             	mov    %rax,%rdi
   27024:	e8 d6 01 00 00       	call   271ff <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>
   27029:	48 89 c2             	mov    %rax,%rdx
   2702c:	48 89 d8             	mov    %rbx,%rax
   2702f:	b9 08 02 00 00       	mov    $0x208,%ecx
   27034:	48 8b 32             	mov    (%rdx),%rsi
   27037:	48 89 30             	mov    %rsi,(%rax)
   2703a:	89 ce                	mov    %ecx,%esi
   2703c:	48 01 c6             	add    %rax,%rsi
   2703f:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   27043:	89 ce                	mov    %ecx,%esi
   27045:	48 01 d6             	add    %rdx,%rsi
   27048:	48 83 c6 08          	add    $0x8,%rsi
   2704c:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   27050:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   27054:	48 8d 78 08          	lea    0x8(%rax),%rdi
   27058:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   2705c:	48 29 f8             	sub    %rdi,%rax
   2705f:	48 29 c2             	sub    %rax,%rdx
   27062:	01 c1                	add    %eax,%ecx
   27064:	83 e1 f8             	and    $0xfffffff8,%ecx
   27067:	89 c8                	mov    %ecx,%eax
   27069:	c1 e8 03             	shr    $0x3,%eax
   2706c:	89 c0                	mov    %eax,%eax
   2706e:	48 89 d6             	mov    %rdx,%rsi
   27071:	48 89 c1             	mov    %rax,%rcx
   27074:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    }
   27077:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   2707b:	c9                   	leave
   2707c:	c3                   	ret

000000000002707d <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   2707d:	55                   	push   %rbp
   2707e:	48 89 e5             	mov    %rsp,%rbp
   27081:	48 83 ec 20          	sub    $0x20,%rsp
   27085:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27089:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2708d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return std::__do_uninit_copy(__first, __last, __result); }
   27091:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   27095:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   27099:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2709d:	48 89 ce             	mov    %rcx,%rsi
   270a0:	48 89 c7             	mov    %rax,%rdi
   270a3:	e8 56 fd ff ff       	call   26dfe <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
   270a8:	c9                   	leave
   270a9:	c3                   	ret

00000000000270aa <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   270aa:	55                   	push   %rbp
   270ab:	48 89 e5             	mov    %rsp,%rbp
   270ae:	48 83 ec 10          	sub    $0x10,%rsp
   270b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   270b6:	e8 e3 f0 fd ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   270bb:	84 c0                	test   %al,%al
   270bd:	74 0e                	je     270cd <_ZSt10_ConstructIPKcJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   270bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   270c3:	48 89 c7             	mov    %rax,%rdi
   270c6:	e8 ca 01 00 00       	call   27295 <_ZSt12construct_atIPKcJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   270cb:	eb 18                	jmp    270e5 <_ZSt10_ConstructIPKcJEEvPT_DpOT0_+0x3b>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   270cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   270d1:	48 89 c6             	mov    %rax,%rsi
   270d4:	bf 08 00 00 00       	mov    $0x8,%edi
   270d9:	e8 d6 f0 fd ff       	call   61b4 <_ZnwmPv>
   270de:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   270e5:	c9                   	leave
   270e6:	c3                   	ret

00000000000270e7 <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   270e7:	55                   	push   %rbp
   270e8:	48 89 e5             	mov    %rsp,%rbp
   270eb:	48 83 ec 20          	sub    $0x20,%rsp
   270ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   270f3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   270f7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   270fb:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   270ff:	48 89 c7             	mov    %rax,%rdi
   27102:	e8 b4 01 00 00       	call   272bb <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   27107:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2710b:	48 89 c7             	mov    %rax,%rdi
   2710e:	e8 1d 86 fe ff       	call   f730 <_ZSt17__size_to_integerm>
   27113:	48 89 c1             	mov    %rax,%rcx
   27116:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2711a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2711e:	48 89 ce             	mov    %rcx,%rsi
   27121:	48 89 c7             	mov    %rax,%rdi
   27124:	e8 9d 01 00 00       	call   272c6 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   27129:	c9                   	leave
   2712a:	c3                   	ret
   2712b:	90                   	nop

000000000002712c <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   2712c:	55                   	push   %rbp
   2712d:	48 89 e5             	mov    %rsp,%rbp
   27130:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27134:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   27138:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2713c:	48 8b 10             	mov    (%rax),%rdx
   2713f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27143:	48 89 10             	mov    %rdx,(%rax)
   27146:	90                   	nop
   27147:	5d                   	pop    %rbp
   27148:	c3                   	ret

0000000000027149 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   27149:	55                   	push   %rbp
   2714a:	48 89 e5             	mov    %rsp,%rbp
   2714d:	48 83 ec 30          	sub    $0x30,%rsp
   27151:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27155:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27159:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   2715d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   27161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27165:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   27169:	48 c1 f8 03          	sar    $0x3,%rax
   2716d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   27171:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   27176:	7e 68                	jle    271e0 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x97>
	  if (std::is_constant_evaluated())
   27178:	e8 2c f0 fd ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   2717d:	84 c0                	test   %al,%al
   2717f:	74 40                	je     271c1 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x78>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
   27181:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   27185:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   27189:	48 89 d6             	mov    %rdx,%rsi
   2718c:	48 89 c7             	mov    %rax,%rdi
   2718f:	e8 98 ff ff ff       	call   2712c <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEC1ERKS3_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
   27194:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   27198:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2719c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   271a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   271a4:	48 89 c7             	mov    %rax,%rdi
   271a7:	e8 77 01 00 00       	call   27323 <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>
   271ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      return __out.base();
   271b0:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   271b4:	48 89 c7             	mov    %rax,%rdi
   271b7:	e8 e8 01 00 00       	call   273a4 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvE4baseEv>
   271bc:	48 8b 00             	mov    (%rax),%rax
   271bf:	eb 2e                	jmp    271ef <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0xa6>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   271c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   271c5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   271cc:	00 
   271cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   271d1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   271d5:	48 89 ce             	mov    %rcx,%rsi
   271d8:	48 89 c7             	mov    %rax,%rdi
   271db:	e8 80 e1 fd ff       	call   5360 <memmove@plt>
      return __result + __count;
   271e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   271e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   271e8:	48 c1 e2 03          	shl    $0x3,%rdx
   271ec:	48 01 d0             	add    %rdx,%rax
    }
   271ef:	c9                   	leave
   271f0:	c3                   	ret

00000000000271f1 <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
   271f1:	55                   	push   %rbp
   271f2:	48 89 e5             	mov    %rsp,%rbp
   271f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   271f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   271fd:	5d                   	pop    %rbp
   271fe:	c3                   	ret

00000000000271ff <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   271ff:	55                   	push   %rbp
   27200:	48 89 e5             	mov    %rsp,%rbp
   27203:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   27207:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2720b:	5d                   	pop    %rbp
   2720c:	c3                   	ret

000000000002720d <_ZSt12construct_atIN2vk15LayerPropertiesEJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
   2720d:	55                   	push   %rbp
   2720e:	48 89 e5             	mov    %rsp,%rbp
   27211:	53                   	push   %rbx
   27212:	48 83 ec 18          	sub    $0x18,%rsp
   27216:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2721a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   2721e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27222:	48 89 c6             	mov    %rax,%rsi
   27225:	bf 08 02 00 00       	mov    $0x208,%edi
   2722a:	e8 85 ef fd ff       	call   61b4 <_ZnwmPv>
   2722f:	48 89 c3             	mov    %rax,%rbx
   27232:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27236:	48 89 c7             	mov    %rax,%rdi
   27239:	e8 c1 ff ff ff       	call   271ff <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>
   2723e:	48 89 c2             	mov    %rax,%rdx
   27241:	48 89 d8             	mov    %rbx,%rax
   27244:	b9 08 02 00 00       	mov    $0x208,%ecx
   27249:	48 8b 32             	mov    (%rdx),%rsi
   2724c:	48 89 30             	mov    %rsi,(%rax)
   2724f:	89 ce                	mov    %ecx,%esi
   27251:	48 01 c6             	add    %rax,%rsi
   27254:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   27258:	89 ce                	mov    %ecx,%esi
   2725a:	48 01 d6             	add    %rdx,%rsi
   2725d:	48 83 c6 08          	add    $0x8,%rsi
   27261:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   27265:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   27269:	48 8d 78 08          	lea    0x8(%rax),%rdi
   2726d:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   27271:	48 29 f8             	sub    %rdi,%rax
   27274:	48 29 c2             	sub    %rax,%rdx
   27277:	01 c1                	add    %eax,%ecx
   27279:	83 e1 f8             	and    $0xfffffff8,%ecx
   2727c:	89 c8                	mov    %ecx,%eax
   2727e:	c1 e8 03             	shr    $0x3,%eax
   27281:	89 c0                	mov    %eax,%eax
   27283:	48 89 d6             	mov    %rdx,%rsi
   27286:	48 89 c1             	mov    %rax,%rcx
   27289:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   2728c:	48 89 d8             	mov    %rbx,%rax
   2728f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   27293:	c9                   	leave
   27294:	c3                   	ret

0000000000027295 <_ZSt12construct_atIPKcJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   27295:	55                   	push   %rbp
   27296:	48 89 e5             	mov    %rsp,%rbp
   27299:	48 83 ec 10          	sub    $0x10,%rsp
   2729d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   272a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   272a5:	48 89 c6             	mov    %rax,%rsi
   272a8:	bf 08 00 00 00       	mov    $0x8,%edi
   272ad:	e8 02 ef fd ff       	call   61b4 <_ZnwmPv>
   272b2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   272b9:	c9                   	leave
   272ba:	c3                   	ret

00000000000272bb <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   272bb:	55                   	push   %rbp
   272bc:	48 89 e5             	mov    %rsp,%rbp
   272bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   272c3:	90                   	nop
   272c4:	5d                   	pop    %rbp
   272c5:	c3                   	ret

00000000000272c6 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   272c6:	55                   	push   %rbp
   272c7:	48 89 e5             	mov    %rsp,%rbp
   272ca:	48 83 ec 20          	sub    $0x20,%rsp
   272ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   272d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   272d6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   272da:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   272df:	75 06                	jne    272e7 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   272e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   272e5:	eb 3a                	jmp    27321 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   272e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   272eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   272f2:	00 
   272f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   272f7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   272fb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   272ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27303:	48 89 ce             	mov    %rcx,%rsi
   27306:	48 89 c7             	mov    %rax,%rdi
   27309:	e8 a4 00 00 00       	call   273b2 <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>
      return __first + __n;
   2730e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27312:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   27319:	00 
   2731a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2731e:	48 01 d0             	add    %rdx,%rax
    }
   27321:	c9                   	leave
   27322:	c3                   	ret

0000000000027323 <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   27323:	55                   	push   %rbp
   27324:	48 89 e5             	mov    %rsp,%rbp
   27327:	53                   	push   %rbx
   27328:	48 83 ec 38          	sub    $0x38,%rsp
   2732c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   27330:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   27334:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   27338:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   2733c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   27340:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   27344:	eb 49                	jmp    2738f <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x6c>
	std::__relocate_object_a(std::__addressof(*__cur),
   27346:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2734a:	48 89 c7             	mov    %rax,%rdi
   2734d:	e8 a0 ff fe ff       	call   172f2 <_ZSt11__addressofIPKcEPT_RS2_>
   27352:	48 89 c3             	mov    %rax,%rbx
   27355:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   27359:	48 89 c7             	mov    %rax,%rdi
   2735c:	e8 9f 00 00 00       	call   27400 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvEdeEv>
   27361:	48 89 c7             	mov    %rax,%rdi
   27364:	e8 89 ff fe ff       	call   172f2 <_ZSt11__addressofIPKcEPT_RS2_>
   27369:	48 89 c1             	mov    %rax,%rcx
   2736c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   27370:	48 89 c2             	mov    %rax,%rdx
   27373:	48 89 de             	mov    %rbx,%rsi
   27376:	48 89 cf             	mov    %rcx,%rdi
   27379:	e8 93 00 00 00       	call   27411 <_ZSt19__relocate_object_aIPKcS1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   2737e:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
   27383:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   27387:	48 89 c7             	mov    %rax,%rdi
   2738a:	e8 51 00 00 00       	call   273e0 <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEppEv>
   2738f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   27393:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   27397:	75 ad                	jne    27346 <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x23>
      return __cur;
   27399:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   2739d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   273a1:	c9                   	leave
   273a2:	c3                   	ret
   273a3:	90                   	nop

00000000000273a4 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   273a4:	55                   	push   %rbp
   273a5:	48 89 e5             	mov    %rsp,%rbp
   273a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   273ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   273b0:	5d                   	pop    %rbp
   273b1:	c3                   	ret

00000000000273b2 <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   273b2:	55                   	push   %rbp
   273b3:	48 89 e5             	mov    %rsp,%rbp
   273b6:	48 83 ec 20          	sub    $0x20,%rsp
   273ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   273be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   273c2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   273c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   273ca:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   273ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   273d2:	48 89 ce             	mov    %rcx,%rsi
   273d5:	48 89 c7             	mov    %rax,%rdi
   273d8:	e8 8b 00 00 00       	call   27468 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   273dd:	90                   	nop
   273de:	c9                   	leave
   273df:	c3                   	ret

00000000000273e0 <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   273e0:	55                   	push   %rbp
   273e1:	48 89 e5             	mov    %rsp,%rbp
   273e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   273e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   273ec:	48 8b 00             	mov    (%rax),%rax
   273ef:	48 8d 50 08          	lea    0x8(%rax),%rdx
   273f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   273f7:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   273fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   273fe:	5d                   	pop    %rbp
   273ff:	c3                   	ret

0000000000027400 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   27400:	55                   	push   %rbp
   27401:	48 89 e5             	mov    %rsp,%rbp
   27404:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   27408:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2740c:	48 8b 00             	mov    (%rax),%rax
   2740f:	5d                   	pop    %rbp
   27410:	c3                   	ret

0000000000027411 <_ZSt19__relocate_object_aIPKcS1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   27411:	55                   	push   %rbp
   27412:	48 89 e5             	mov    %rsp,%rbp
   27415:	48 83 ec 20          	sub    $0x20,%rsp
   27419:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2741d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   27421:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   27425:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27429:	48 89 c7             	mov    %rax,%rdi
   2742c:	e8 85 ef ff ff       	call   263b6 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
   27431:	48 89 c2             	mov    %rax,%rdx
   27434:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   27438:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2743c:	48 89 ce             	mov    %rcx,%rsi
   2743f:	48 89 c7             	mov    %rax,%rdi
   27442:	e8 3a f2 ff ff       	call   26681 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   27447:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2744b:	48 89 c7             	mov    %rax,%rdi
   2744e:	e8 9f fe fe ff       	call   172f2 <_ZSt11__addressofIPKcEPT_RS2_>
   27453:	48 89 c2             	mov    %rax,%rdx
   27456:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2745a:	48 89 d6             	mov    %rdx,%rsi
   2745d:	48 89 c7             	mov    %rax,%rdi
   27460:	e8 dd f7 ff ff       	call   26c42 <_ZNSt16allocator_traitsISaIPKcEE7destroyIS1_EEvRS2_PT_>
    }
   27465:	90                   	nop
   27466:	c9                   	leave
   27467:	c3                   	ret

0000000000027468 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   27468:	55                   	push   %rbp
   27469:	48 89 e5             	mov    %rsp,%rbp
   2746c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27470:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27474:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   27478:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2747c:	48 8b 00             	mov    (%rax),%rax
   2747f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   27483:	eb 10                	jmp    27495 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   27485:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27489:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2748d:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   27490:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   27495:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27499:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   2749d:	75 e6                	jne    27485 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   2749f:	90                   	nop
   274a0:	90                   	nop
   274a1:	5d                   	pop    %rbp
   274a2:	c3                   	ret

Disassembly of section .fini:

00000000000274a4 <_fini>:
   274a4:	48 83 ec 08          	sub    $0x8,%rsp
   274a8:	48 83 c4 08          	add    $0x8,%rsp
   274ac:	c3                   	ret
