
build/Application:     file format elf64-x86-64


Disassembly of section .init:

0000000000005000 <_init>:
    5000:	48 83 ec 08          	sub    $0x8,%rsp
    5004:	48 8b 05 b5 2f 03 00 	mov    0x32fb5(%rip),%rax        # 37fc0 <__gmon_start__@Base>
    500b:	48 85 c0             	test   %rax,%rax
    500e:	74 02                	je     5012 <_init+0x12>
    5010:	ff d0                	call   *%rax
    5012:	48 83 c4 08          	add    $0x8,%rsp
    5016:	c3                   	ret

Disassembly of section .plt:

0000000000005020 <_Znam@plt-0x10>:
    5020:	ff 35 ca 2f 03 00    	push   0x32fca(%rip)        # 37ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
    5026:	ff 25 cc 2f 03 00    	jmp    *0x32fcc(%rip)        # 37ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
    502c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005030 <_Znam@plt>:
    5030:	ff 25 ca 2f 03 00    	jmp    *0x32fca(%rip)        # 38000 <_Znam@GLIBCXX_3.4>
    5036:	68 00 00 00 00       	push   $0x0
    503b:	e9 e0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005040 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>:
    5040:	ff 25 c2 2f 03 00    	jmp    *0x32fc2(%rip)        # 38008 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@GLIBCXX_3.4>
    5046:	68 01 00 00 00       	push   $0x1
    504b:	e9 d0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005050 <_ZNSaIcED2Ev@plt>:
    5050:	ff 25 ba 2f 03 00    	jmp    *0x32fba(%rip)        # 38010 <_ZNSaIcED2Ev@GLIBCXX_3.4>
    5056:	68 02 00 00 00       	push   $0x2
    505b:	e9 c0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005060 <glfwDestroyWindow@plt>:
    5060:	ff 25 b2 2f 03 00    	jmp    *0x32fb2(%rip)        # 38018 <glfwDestroyWindow@Base>
    5066:	68 03 00 00 00       	push   $0x3
    506b:	e9 b0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005070 <_ZNSolsEPFRSt8ios_baseS0_E@plt>:
    5070:	ff 25 aa 2f 03 00    	jmp    *0x32faa(%rip)        # 38020 <_ZNSolsEPFRSt8ios_baseS0_E@GLIBCXX_3.4>
    5076:	68 04 00 00 00       	push   $0x4
    507b:	e9 a0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005080 <_ZSt17__throw_bad_allocv@plt>:
    5080:	ff 25 a2 2f 03 00    	jmp    *0x32fa2(%rip)        # 38028 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
    5086:	68 05 00 00 00       	push   $0x5
    508b:	e9 90 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005090 <_ZNSt13runtime_errorC1EPKc@plt>:
    5090:	ff 25 9a 2f 03 00    	jmp    *0x32f9a(%rip)        # 38030 <_ZNSt13runtime_errorC1EPKc@GLIBCXX_3.4.21>
    5096:	68 06 00 00 00       	push   $0x6
    509b:	e9 80 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050a0 <__cxa_begin_catch@plt>:
    50a0:	ff 25 92 2f 03 00    	jmp    *0x32f92(%rip)        # 38038 <__cxa_begin_catch@CXXABI_1.3>
    50a6:	68 07 00 00 00       	push   $0x7
    50ab:	e9 70 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050b0 <strlen@plt>:
    50b0:	ff 25 8a 2f 03 00    	jmp    *0x32f8a(%rip)        # 38040 <strlen@GLIBC_2.2.5>
    50b6:	68 08 00 00 00       	push   $0x8
    50bb:	e9 60 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050c0 <memcmp@plt>:
    50c0:	ff 25 82 2f 03 00    	jmp    *0x32f82(%rip)        # 38048 <memcmp@GLIBC_2.2.5>
    50c6:	68 09 00 00 00       	push   $0x9
    50cb:	e9 50 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050d0 <__cxa_allocate_exception@plt>:
    50d0:	ff 25 7a 2f 03 00    	jmp    *0x32f7a(%rip)        # 38050 <__cxa_allocate_exception@CXXABI_1.3>
    50d6:	68 0a 00 00 00       	push   $0xa
    50db:	e9 40 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050e0 <_ZSt20__throw_length_errorPKc@plt>:
    50e0:	ff 25 72 2f 03 00    	jmp    *0x32f72(%rip)        # 38058 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
    50e6:	68 0b 00 00 00       	push   $0xb
    50eb:	e9 30 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050f0 <__cxa_guard_abort@plt>:
    50f0:	ff 25 6a 2f 03 00    	jmp    *0x32f6a(%rip)        # 38060 <__cxa_guard_abort@CXXABI_1.3>
    50f6:	68 0c 00 00 00       	push   $0xc
    50fb:	e9 20 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005100 <__cxa_guard_release@plt>:
    5100:	ff 25 62 2f 03 00    	jmp    *0x32f62(%rip)        # 38068 <__cxa_guard_release@CXXABI_1.3>
    5106:	68 0d 00 00 00       	push   $0xd
    510b:	e9 10 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005110 <__assert_fail@plt>:
    5110:	ff 25 5a 2f 03 00    	jmp    *0x32f5a(%rip)        # 38070 <__assert_fail@GLIBC_2.2.5>
    5116:	68 0e 00 00 00       	push   $0xe
    511b:	e9 00 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005120 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>:
    5120:	ff 25 52 2f 03 00    	jmp    *0x32f52(%rip)        # 38078 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    5126:	68 0f 00 00 00       	push   $0xf
    512b:	e9 f0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005130 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@plt>:
    5130:	ff 25 4a 2f 03 00    	jmp    *0x32f4a(%rip)        # 38080 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@GLIBCXX_3.4.26>
    5136:	68 10 00 00 00       	push   $0x10
    513b:	e9 e0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005140 <_ZSt19__throw_logic_errorPKc@plt>:
    5140:	ff 25 42 2f 03 00    	jmp    *0x32f42(%rip)        # 38088 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
    5146:	68 11 00 00 00       	push   $0x11
    514b:	e9 d0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005150 <__cxa_free_exception@plt>:
    5150:	ff 25 3a 2f 03 00    	jmp    *0x32f3a(%rip)        # 38090 <__cxa_free_exception@CXXABI_1.3>
    5156:	68 12 00 00 00       	push   $0x12
    515b:	e9 c0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005160 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>:
    5160:	ff 25 32 2f 03 00    	jmp    *0x32f32(%rip)        # 38098 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    5166:	68 13 00 00 00       	push   $0x13
    516b:	e9 b0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005170 <glfwGetRequiredInstanceExtensions@plt>:
    5170:	ff 25 2a 2f 03 00    	jmp    *0x32f2a(%rip)        # 380a0 <glfwGetRequiredInstanceExtensions@Base>
    5176:	68 14 00 00 00       	push   $0x14
    517b:	e9 a0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005180 <_ZSt28__throw_bad_array_new_lengthv@plt>:
    5180:	ff 25 22 2f 03 00    	jmp    *0x32f22(%rip)        # 380a8 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
    5186:	68 15 00 00 00       	push   $0x15
    518b:	e9 90 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005190 <dlclose@plt>:
    5190:	ff 25 1a 2f 03 00    	jmp    *0x32f1a(%rip)        # 380b0 <dlclose@GLIBC_2.34>
    5196:	68 16 00 00 00       	push   $0x16
    519b:	e9 80 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051a0 <memcpy@plt>:
    51a0:	ff 25 12 2f 03 00    	jmp    *0x32f12(%rip)        # 380b8 <memcpy@GLIBC_2.14>
    51a6:	68 17 00 00 00       	push   $0x17
    51ab:	e9 70 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051b0 <glfwWindowHint@plt>:
    51b0:	ff 25 0a 2f 03 00    	jmp    *0x32f0a(%rip)        # 380c0 <glfwWindowHint@Base>
    51b6:	68 18 00 00 00       	push   $0x18
    51bb:	e9 60 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051c0 <_ZNSt12system_errorD2Ev@plt>:
    51c0:	ff 25 02 2f 03 00    	jmp    *0x32f02(%rip)        # 380c8 <_ZNSt12system_errorD2Ev@GLIBCXX_3.4.11>
    51c6:	68 19 00 00 00       	push   $0x19
    51cb:	e9 50 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051d0 <__cxa_atexit@plt>:
    51d0:	ff 25 fa 2e 03 00    	jmp    *0x32efa(%rip)        # 380d0 <__cxa_atexit@GLIBC_2.2.5>
    51d6:	68 1a 00 00 00       	push   $0x1a
    51db:	e9 40 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051e0 <dlsym@plt>:
    51e0:	ff 25 f2 2e 03 00    	jmp    *0x32ef2(%rip)        # 380d8 <dlsym@GLIBC_2.34>
    51e6:	68 1b 00 00 00       	push   $0x1b
    51eb:	e9 30 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051f0 <_ZdlPv@plt>:
    51f0:	ff 25 ea 2e 03 00    	jmp    *0x32eea(%rip)        # 380e0 <_ZdlPv@GLIBCXX_3.4>
    51f6:	68 1c 00 00 00       	push   $0x1c
    51fb:	e9 20 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005200 <glfwPollEvents@plt>:
    5200:	ff 25 e2 2e 03 00    	jmp    *0x32ee2(%rip)        # 380e8 <glfwPollEvents@Base>
    5206:	68 1d 00 00 00       	push   $0x1d
    520b:	e9 10 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
    5210:	ff 25 da 2e 03 00    	jmp    *0x32eda(%rip)        # 380f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
    5216:	68 1e 00 00 00       	push   $0x1e
    521b:	e9 00 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005220 <_Znwm@plt>:
    5220:	ff 25 d2 2e 03 00    	jmp    *0x32ed2(%rip)        # 380f8 <_Znwm@GLIBCXX_3.4>
    5226:	68 1f 00 00 00       	push   $0x1f
    522b:	e9 f0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005230 <_ZdlPvm@plt>:
    5230:	ff 25 ca 2e 03 00    	jmp    *0x32eca(%rip)        # 38100 <_ZdlPvm@CXXABI_1.3.9>
    5236:	68 20 00 00 00       	push   $0x20
    523b:	e9 e0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005240 <glfwTerminate@plt>:
    5240:	ff 25 c2 2e 03 00    	jmp    *0x32ec2(%rip)        # 38108 <glfwTerminate@Base>
    5246:	68 21 00 00 00       	push   $0x21
    524b:	e9 d0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005250 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>:
    5250:	ff 25 ba 2e 03 00    	jmp    *0x32eba(%rip)        # 38110 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    5256:	68 22 00 00 00       	push   $0x22
    525b:	e9 c0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005260 <_ZNSolsEPFRSoS_E@plt>:
    5260:	ff 25 b2 2e 03 00    	jmp    *0x32eb2(%rip)        # 38118 <_ZNSolsEPFRSoS_E@GLIBCXX_3.4>
    5266:	68 23 00 00 00       	push   $0x23
    526b:	e9 b0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005270 <_ZNSaIcED1Ev@plt>:
    5270:	ff 25 aa 2e 03 00    	jmp    *0x32eaa(%rip)        # 38120 <_ZNSaIcED1Ev@GLIBCXX_3.4>
    5276:	68 24 00 00 00       	push   $0x24
    527b:	e9 a0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005280 <vkEnumerateInstanceLayerProperties@plt>:
    5280:	ff 25 a2 2e 03 00    	jmp    *0x32ea2(%rip)        # 38128 <vkEnumerateInstanceLayerProperties@Base>
    5286:	68 25 00 00 00       	push   $0x25
    528b:	e9 90 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005290 <glfwInit@plt>:
    5290:	ff 25 9a 2e 03 00    	jmp    *0x32e9a(%rip)        # 38130 <glfwInit@Base>
    5296:	68 26 00 00 00       	push   $0x26
    529b:	e9 80 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>:
    52a0:	ff 25 92 2e 03 00    	jmp    *0x32e92(%rip)        # 38138 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@GLIBCXX_3.4>
    52a6:	68 27 00 00 00       	push   $0x27
    52ab:	e9 70 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052b0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
    52b0:	ff 25 8a 2e 03 00    	jmp    *0x32e8a(%rip)        # 38140 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
    52b6:	68 28 00 00 00       	push   $0x28
    52bb:	e9 60 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052c0 <_ZdaPv@plt>:
    52c0:	ff 25 82 2e 03 00    	jmp    *0x32e82(%rip)        # 38148 <_ZdaPv@GLIBCXX_3.4>
    52c6:	68 29 00 00 00       	push   $0x29
    52cb:	e9 50 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052d0 <_ZNSolsEj@plt>:
    52d0:	ff 25 7a 2e 03 00    	jmp    *0x32e7a(%rip)        # 38150 <_ZNSolsEj@GLIBCXX_3.4>
    52d6:	68 2a 00 00 00       	push   $0x2a
    52db:	e9 40 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052e0 <_ZNKSt13runtime_error4whatEv@plt>:
    52e0:	ff 25 72 2e 03 00    	jmp    *0x32e72(%rip)        # 38158 <_ZNKSt13runtime_error4whatEv@GLIBCXX_3.4>
    52e6:	68 2b 00 00 00       	push   $0x2b
    52eb:	e9 30 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052f0 <dlopen@plt>:
    52f0:	ff 25 6a 2e 03 00    	jmp    *0x32e6a(%rip)        # 38160 <dlopen@GLIBC_2.34>
    52f6:	68 2c 00 00 00       	push   $0x2c
    52fb:	e9 20 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005300 <_ZNSaIcEC2ERKS_@plt>:
    5300:	ff 25 62 2e 03 00    	jmp    *0x32e62(%rip)        # 38168 <_ZNSaIcEC2ERKS_@GLIBCXX_3.4>
    5306:	68 2d 00 00 00       	push   $0x2d
    530b:	e9 10 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005310 <__cxa_rethrow@plt>:
    5310:	ff 25 5a 2e 03 00    	jmp    *0x32e5a(%rip)        # 38170 <__cxa_rethrow@CXXABI_1.3>
    5316:	68 2e 00 00 00       	push   $0x2e
    531b:	e9 00 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005320 <_ZSt24__throw_out_of_range_fmtPKcz@plt>:
    5320:	ff 25 52 2e 03 00    	jmp    *0x32e52(%rip)        # 38178 <_ZSt24__throw_out_of_range_fmtPKcz@GLIBCXX_3.4.20>
    5326:	68 2f 00 00 00       	push   $0x2f
    532b:	e9 f0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005330 <_ZNSt8ios_base4InitC1Ev@plt>:
    5330:	ff 25 4a 2e 03 00    	jmp    *0x32e4a(%rip)        # 38180 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
    5336:	68 30 00 00 00       	push   $0x30
    533b:	e9 e0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005340 <glfwCreateWindowSurface@plt>:
    5340:	ff 25 42 2e 03 00    	jmp    *0x32e42(%rip)        # 38188 <glfwCreateWindowSurface@Base>
    5346:	68 31 00 00 00       	push   $0x31
    534b:	e9 d0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005350 <glfwCreateWindow@plt>:
    5350:	ff 25 3a 2e 03 00    	jmp    *0x32e3a(%rip)        # 38190 <glfwCreateWindow@Base>
    5356:	68 32 00 00 00       	push   $0x32
    535b:	e9 c0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005360 <memmove@plt>:
    5360:	ff 25 32 2e 03 00    	jmp    *0x32e32(%rip)        # 38198 <memmove@GLIBC_2.2.5>
    5366:	68 33 00 00 00       	push   $0x33
    536b:	e9 b0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005370 <__cxa_end_catch@plt>:
    5370:	ff 25 2a 2e 03 00    	jmp    *0x32e2a(%rip)        # 381a0 <__cxa_end_catch@CXXABI_1.3>
    5376:	68 34 00 00 00       	push   $0x34
    537b:	e9 a0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005380 <__cxa_throw@plt>:
    5380:	ff 25 22 2e 03 00    	jmp    *0x32e22(%rip)        # 381a8 <__cxa_throw@CXXABI_1.3>
    5386:	68 35 00 00 00       	push   $0x35
    538b:	e9 90 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005390 <_ZNSt3_V214error_categoryD2Ev@plt>:
    5390:	ff 25 1a 2e 03 00    	jmp    *0x32e1a(%rip)        # 381b0 <_ZNSt3_V214error_categoryD2Ev@GLIBCXX_3.4.21>
    5396:	68 36 00 00 00       	push   $0x36
    539b:	e9 80 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053a0 <_Unwind_Resume@plt>:
    53a0:	ff 25 12 2e 03 00    	jmp    *0x32e12(%rip)        # 381b8 <_Unwind_Resume@GCC_3.0>
    53a6:	68 37 00 00 00       	push   $0x37
    53ab:	e9 70 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053b0 <_ZNSaIcEC1Ev@plt>:
    53b0:	ff 25 0a 2e 03 00    	jmp    *0x32e0a(%rip)        # 381c0 <_ZNSaIcEC1Ev@GLIBCXX_3.4>
    53b6:	68 38 00 00 00       	push   $0x38
    53bb:	e9 60 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053c0 <__cxa_guard_acquire@plt>:
    53c0:	ff 25 02 2e 03 00    	jmp    *0x32e02(%rip)        # 381c8 <__cxa_guard_acquire@CXXABI_1.3>
    53c6:	68 39 00 00 00       	push   $0x39
    53cb:	e9 50 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053d0 <_ZNKRSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@plt>:
    53d0:	ff 25 fa 2d 03 00    	jmp    *0x32dfa(%rip)        # 381d0 <_ZNKRSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@GLIBCXX_3.4.29>
    53d6:	68 3a 00 00 00       	push   $0x3a
    53db:	e9 40 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053e0 <_ZNSt9exceptionD2Ev@plt>:
    53e0:	ff 25 f2 2d 03 00    	jmp    *0x32df2(%rip)        # 381d8 <_ZNSt9exceptionD2Ev@GLIBCXX_3.4>
    53e6:	68 3b 00 00 00       	push   $0x3b
    53eb:	e9 30 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053f0 <glfwWindowShouldClose@plt>:
    53f0:	ff 25 ea 2d 03 00    	jmp    *0x32dea(%rip)        # 381e0 <glfwWindowShouldClose@Base>
    53f6:	68 3c 00 00 00       	push   $0x3c
    53fb:	e9 20 fc ff ff       	jmp    5020 <_init+0x20>

Disassembly of section .plt.got:

0000000000005400 <__cxa_finalize@plt>:
    5400:	ff 25 92 2b 03 00    	jmp    *0x32b92(%rip)        # 37f98 <__cxa_finalize@GLIBC_2.2.5>
    5406:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000005410 <_start>:
    5410:	31 ed                	xor    %ebp,%ebp
    5412:	49 89 d1             	mov    %rdx,%r9
    5415:	5e                   	pop    %rsi
    5416:	48 89 e2             	mov    %rsp,%rdx
    5419:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    541d:	50                   	push   %rax
    541e:	54                   	push   %rsp
    541f:	45 31 c0             	xor    %r8d,%r8d
    5422:	31 c9                	xor    %ecx,%ecx
    5424:	48 8d 3d c3 0b 00 00 	lea    0xbc3(%rip),%rdi        # 5fee <main>
    542b:	ff 15 77 2b 03 00    	call   *0x32b77(%rip)        # 37fa8 <__libc_start_main@GLIBC_2.34>
    5431:	f4                   	hlt
    5432:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    5439:	00 00 00 
    543c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005440 <deregister_tm_clones>:
    5440:	48 8d 3d e9 2d 03 00 	lea    0x32de9(%rip),%rdi        # 38230 <__TMC_END__>
    5447:	48 8d 05 e2 2d 03 00 	lea    0x32de2(%rip),%rax        # 38230 <__TMC_END__>
    544e:	48 39 f8             	cmp    %rdi,%rax
    5451:	74 15                	je     5468 <deregister_tm_clones+0x28>
    5453:	48 8b 05 5e 2b 03 00 	mov    0x32b5e(%rip),%rax        # 37fb8 <_ITM_deregisterTMCloneTable@Base>
    545a:	48 85 c0             	test   %rax,%rax
    545d:	74 09                	je     5468 <deregister_tm_clones+0x28>
    545f:	ff e0                	jmp    *%rax
    5461:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5468:	c3                   	ret
    5469:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000005470 <register_tm_clones>:
    5470:	48 8d 3d b9 2d 03 00 	lea    0x32db9(%rip),%rdi        # 38230 <__TMC_END__>
    5477:	48 8d 35 b2 2d 03 00 	lea    0x32db2(%rip),%rsi        # 38230 <__TMC_END__>
    547e:	48 29 fe             	sub    %rdi,%rsi
    5481:	48 89 f0             	mov    %rsi,%rax
    5484:	48 c1 ee 3f          	shr    $0x3f,%rsi
    5488:	48 c1 f8 03          	sar    $0x3,%rax
    548c:	48 01 c6             	add    %rax,%rsi
    548f:	48 d1 fe             	sar    %rsi
    5492:	74 14                	je     54a8 <register_tm_clones+0x38>
    5494:	48 8b 05 2d 2b 03 00 	mov    0x32b2d(%rip),%rax        # 37fc8 <_ITM_registerTMCloneTable@Base>
    549b:	48 85 c0             	test   %rax,%rax
    549e:	74 08                	je     54a8 <register_tm_clones+0x38>
    54a0:	ff e0                	jmp    *%rax
    54a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    54a8:	c3                   	ret
    54a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000054b0 <__do_global_dtors_aux>:
    54b0:	f3 0f 1e fa          	endbr64
    54b4:	80 3d 95 2e 03 00 00 	cmpb   $0x0,0x32e95(%rip)        # 38350 <completed.0>
    54bb:	75 2b                	jne    54e8 <__do_global_dtors_aux+0x38>
    54bd:	55                   	push   %rbp
    54be:	48 83 3d d2 2a 03 00 	cmpq   $0x0,0x32ad2(%rip)        # 37f98 <__cxa_finalize@GLIBC_2.2.5>
    54c5:	00 
    54c6:	48 89 e5             	mov    %rsp,%rbp
    54c9:	74 0c                	je     54d7 <__do_global_dtors_aux+0x27>
    54cb:	48 8b 3d 26 2d 03 00 	mov    0x32d26(%rip),%rdi        # 381f8 <__dso_handle>
    54d2:	e8 29 ff ff ff       	call   5400 <__cxa_finalize@plt>
    54d7:	e8 64 ff ff ff       	call   5440 <deregister_tm_clones>
    54dc:	c6 05 6d 2e 03 00 01 	movb   $0x1,0x32e6d(%rip)        # 38350 <completed.0>
    54e3:	5d                   	pop    %rbp
    54e4:	c3                   	ret
    54e5:	0f 1f 00             	nopl   (%rax)
    54e8:	c3                   	ret
    54e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000054f0 <frame_dummy>:
    54f0:	f3 0f 1e fa          	endbr64
    54f4:	e9 77 ff ff ff       	jmp    5470 <register_tm_clones>

00000000000054f9 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
  };

  namespace
  {
    [[noreturn]] void throwResultException( Result result, char const * message )
    {
    54f9:	55                   	push   %rbp
    54fa:	48 89 e5             	mov    %rsp,%rbp
    54fd:	41 54                	push   %r12
    54ff:	53                   	push   %rbx
    5500:	48 83 ec 30          	sub    $0x30,%rsp
    5504:	89 7d cc             	mov    %edi,-0x34(%rbp)
    5507:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
    550b:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    550f:	0f 89 28 07 00 00    	jns    5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5515:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
    5519:	0f 8d 3d 01 00 00    	jge    565c <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
    551f:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    5526:	0f 84 19 05 00 00    	je     5a45 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
    552c:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    5533:	0f 8f 04 07 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5539:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    5540:	0f 84 37 05 00 00    	je     5a7d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
    5546:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    554d:	0f 8f ea 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5553:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    555a:	0f 84 55 05 00 00    	je     5ab5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
    5560:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    5567:	0f 8f d0 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    556d:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    5574:	0f 84 73 05 00 00    	je     5aed <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
    557a:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    5581:	0f 8f b6 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5587:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    558e:	0f 84 91 05 00 00    	je     5b25 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
    5594:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    559b:	0f 8f 9c 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55a1:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    55a8:	0f 84 af 05 00 00    	je     5b5d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
    55ae:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    55b5:	0f 8f 82 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55bb:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    55c2:	0f 84 9d 03 00 00    	je     5965 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
    55c8:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    55cf:	0f 8f 68 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55d5:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    55dc:	0f 84 bb 03 00 00    	je     599d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
    55e2:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    55e9:	0f 8f 4e 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55ef:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    55f6:	0f 84 99 05 00 00    	je     5b95 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
    55fc:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    5603:	0f 8f 34 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5609:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    5610:	0f 84 bf 03 00 00    	je     59d5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
    5616:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    561d:	0f 8f 1a 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5623:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    562a:	0f 84 9d 05 00 00    	je     5bcd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
    5630:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    5637:	0f 8f 00 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    563d:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
    5644:	0f 84 bb 05 00 00    	je     5c05 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
    564a:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
    5651:	0f 84 b6 03 00 00    	je     5a0d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
    5657:	e9 e1 05 00 00       	jmp    5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    565c:	8b 45 cc             	mov    -0x34(%rbp),%eax
    565f:	83 c0 0d             	add    $0xd,%eax
    5662:	83 f8 0c             	cmp    $0xc,%eax
    5665:	0f 87 d2 05 00 00    	ja     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    566b:	89 c0                	mov    %eax,%eax
    566d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    5674:	00 
    5675:	48 8d 05 64 e3 01 00 	lea    0x1e364(%rip),%rax        # 239e0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    567c:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    567f:	48 98                	cltq
    5681:	48 8d 15 58 e3 01 00 	lea    0x1e358(%rip),%rdx        # 239e0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    5688:	48 01 d0             	add    %rdx,%rax
    568b:	ff e0                	jmp    *%rax
      {
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    568d:	bf 28 00 00 00       	mov    $0x28,%edi
    5692:	e8 39 fa ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5697:	48 89 c3             	mov    %rax,%rbx
    569a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    569e:	48 89 c6             	mov    %rax,%rsi
    56a1:	48 89 df             	mov    %rbx,%rdi
    56a4:	e8 1d 23 00 00       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
    56a9:	48 8d 05 04 6f 00 00 	lea    0x6f04(%rip),%rax        # c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    56b0:	48 89 c2             	mov    %rax,%rdx
    56b3:	48 8d 05 2e 26 03 00 	lea    0x3262e(%rip),%rax        # 37ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    56ba:	48 89 c6             	mov    %rax,%rsi
    56bd:	48 89 df             	mov    %rbx,%rdi
    56c0:	e8 bb fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    56c5:	bf 28 00 00 00       	mov    $0x28,%edi
    56ca:	e8 01 fa ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    56cf:	48 89 c3             	mov    %rax,%rbx
    56d2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    56d6:	48 89 c6             	mov    %rax,%rsi
    56d9:	48 89 df             	mov    %rbx,%rdi
    56dc:	e8 b7 23 00 00       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
    56e1:	48 8d 05 5c 6e 00 00 	lea    0x6e5c(%rip),%rax        # c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    56e8:	48 89 c2             	mov    %rax,%rdx
    56eb:	48 8d 05 de 25 03 00 	lea    0x325de(%rip),%rax        # 37cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    56f2:	48 89 c6             	mov    %rax,%rsi
    56f5:	48 89 df             	mov    %rbx,%rdi
    56f8:	e8 83 fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    56fd:	bf 28 00 00 00       	mov    $0x28,%edi
    5702:	e8 c9 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5707:	48 89 c3             	mov    %rax,%rbx
    570a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    570e:	48 89 c6             	mov    %rax,%rsi
    5711:	48 89 df             	mov    %rbx,%rdi
    5714:	e8 51 24 00 00       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
    5719:	48 8d 05 b4 6d 00 00 	lea    0x6db4(%rip),%rax        # c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>
    5720:	48 89 c2             	mov    %rax,%rdx
    5723:	48 8d 05 8e 25 03 00 	lea    0x3258e(%rip),%rax        # 37cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    572a:	48 89 c6             	mov    %rax,%rsi
    572d:	48 89 df             	mov    %rbx,%rdi
    5730:	e8 4b fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    5735:	bf 28 00 00 00       	mov    $0x28,%edi
    573a:	e8 91 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    573f:	48 89 c3             	mov    %rax,%rbx
    5742:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5746:	48 89 c6             	mov    %rax,%rsi
    5749:	48 89 df             	mov    %rbx,%rdi
    574c:	e8 eb 24 00 00       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
    5751:	48 8d 05 0c 6d 00 00 	lea    0x6d0c(%rip),%rax        # c464 <_ZN2vk15DeviceLostErrorD1Ev>
    5758:	48 89 c2             	mov    %rax,%rdx
    575b:	48 8d 05 3e 25 03 00 	lea    0x3253e(%rip),%rax        # 37ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5762:	48 89 c6             	mov    %rax,%rsi
    5765:	48 89 df             	mov    %rbx,%rdi
    5768:	e8 13 fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    576d:	bf 28 00 00 00       	mov    $0x28,%edi
    5772:	e8 59 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5777:	48 89 c3             	mov    %rax,%rbx
    577a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    577e:	48 89 c6             	mov    %rax,%rsi
    5781:	48 89 df             	mov    %rbx,%rdi
    5784:	e8 85 25 00 00       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
    5789:	48 8d 05 64 6c 00 00 	lea    0x6c64(%rip),%rax        # c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    5790:	48 89 c2             	mov    %rax,%rdx
    5793:	48 8d 05 ee 24 03 00 	lea    0x324ee(%rip),%rax        # 37c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    579a:	48 89 c6             	mov    %rax,%rsi
    579d:	48 89 df             	mov    %rbx,%rdi
    57a0:	e8 db fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    57a5:	bf 28 00 00 00       	mov    $0x28,%edi
    57aa:	e8 21 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    57af:	48 89 c3             	mov    %rax,%rbx
    57b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    57b6:	48 89 c6             	mov    %rax,%rsi
    57b9:	48 89 df             	mov    %rbx,%rdi
    57bc:	e8 1f 26 00 00       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
    57c1:	48 8d 05 bc 6b 00 00 	lea    0x6bbc(%rip),%rax        # c384 <_ZN2vk20LayerNotPresentErrorD1Ev>
    57c8:	48 89 c2             	mov    %rax,%rdx
    57cb:	48 8d 05 9e 24 03 00 	lea    0x3249e(%rip),%rax        # 37c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    57d2:	48 89 c6             	mov    %rax,%rsi
    57d5:	48 89 df             	mov    %rbx,%rdi
    57d8:	e8 a3 fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    57dd:	bf 28 00 00 00       	mov    $0x28,%edi
    57e2:	e8 e9 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    57e7:	48 89 c3             	mov    %rax,%rbx
    57ea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    57ee:	48 89 c6             	mov    %rax,%rsi
    57f1:	48 89 df             	mov    %rbx,%rdi
    57f4:	e8 b9 26 00 00       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
    57f9:	48 8d 05 14 6b 00 00 	lea    0x6b14(%rip),%rax        # c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    5800:	48 89 c2             	mov    %rax,%rdx
    5803:	48 8d 05 4e 24 03 00 	lea    0x3244e(%rip),%rax        # 37c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    580a:	48 89 c6             	mov    %rax,%rsi
    580d:	48 89 df             	mov    %rbx,%rdi
    5810:	e8 6b fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    5815:	bf 28 00 00 00       	mov    $0x28,%edi
    581a:	e8 b1 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    581f:	48 89 c3             	mov    %rax,%rbx
    5822:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5826:	48 89 c6             	mov    %rax,%rsi
    5829:	48 89 df             	mov    %rbx,%rdi
    582c:	e8 53 27 00 00       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
    5831:	48 8d 05 6c 6a 00 00 	lea    0x6a6c(%rip),%rax        # c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    5838:	48 89 c2             	mov    %rax,%rdx
    583b:	48 8d 05 fe 23 03 00 	lea    0x323fe(%rip),%rax        # 37c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5842:	48 89 c6             	mov    %rax,%rsi
    5845:	48 89 df             	mov    %rbx,%rdi
    5848:	e8 33 fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    584d:	bf 28 00 00 00       	mov    $0x28,%edi
    5852:	e8 79 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5857:	48 89 c3             	mov    %rax,%rbx
    585a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    585e:	48 89 c6             	mov    %rax,%rsi
    5861:	48 89 df             	mov    %rbx,%rdi
    5864:	e8 ed 27 00 00       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
    5869:	48 8d 05 c4 69 00 00 	lea    0x69c4(%rip),%rax        # c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    5870:	48 89 c2             	mov    %rax,%rdx
    5873:	48 8d 05 ae 23 03 00 	lea    0x323ae(%rip),%rax        # 37c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    587a:	48 89 c6             	mov    %rax,%rsi
    587d:	48 89 df             	mov    %rbx,%rdi
    5880:	e8 fb fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    5885:	bf 28 00 00 00       	mov    $0x28,%edi
    588a:	e8 41 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    588f:	48 89 c3             	mov    %rax,%rbx
    5892:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5896:	48 89 c6             	mov    %rax,%rsi
    5899:	48 89 df             	mov    %rbx,%rdi
    589c:	e8 87 28 00 00       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
    58a1:	48 8d 05 1c 69 00 00 	lea    0x691c(%rip),%rax        # c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>
    58a8:	48 89 c2             	mov    %rax,%rdx
    58ab:	48 8d 05 5e 23 03 00 	lea    0x3235e(%rip),%rax        # 37c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    58b2:	48 89 c6             	mov    %rax,%rsi
    58b5:	48 89 df             	mov    %rbx,%rdi
    58b8:	e8 c3 fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    58bd:	bf 28 00 00 00       	mov    $0x28,%edi
    58c2:	e8 09 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    58c7:	48 89 c3             	mov    %rax,%rbx
    58ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    58ce:	48 89 c6             	mov    %rax,%rsi
    58d1:	48 89 df             	mov    %rbx,%rdi
    58d4:	e8 21 29 00 00       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
    58d9:	48 8d 05 74 68 00 00 	lea    0x6874(%rip),%rax        # c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    58e0:	48 89 c2             	mov    %rax,%rdx
    58e3:	48 8d 05 0e 23 03 00 	lea    0x3230e(%rip),%rax        # 37bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    58ea:	48 89 c6             	mov    %rax,%rsi
    58ed:	48 89 df             	mov    %rbx,%rdi
    58f0:	e8 8b fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    58f5:	bf 28 00 00 00       	mov    $0x28,%edi
    58fa:	e8 d1 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    58ff:	48 89 c3             	mov    %rax,%rbx
    5902:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5906:	48 89 c6             	mov    %rax,%rsi
    5909:	48 89 df             	mov    %rbx,%rdi
    590c:	e8 bb 29 00 00       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
    5911:	48 8d 05 cc 67 00 00 	lea    0x67cc(%rip),%rax        # c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>
    5918:	48 89 c2             	mov    %rax,%rdx
    591b:	48 8d 05 be 22 03 00 	lea    0x322be(%rip),%rax        # 37be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5922:	48 89 c6             	mov    %rax,%rsi
    5925:	48 89 df             	mov    %rbx,%rdi
    5928:	e8 53 fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    592d:	bf 28 00 00 00       	mov    $0x28,%edi
    5932:	e8 99 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5937:	48 89 c3             	mov    %rax,%rbx
    593a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    593e:	48 89 c6             	mov    %rax,%rsi
    5941:	48 89 df             	mov    %rbx,%rdi
    5944:	e8 55 2a 00 00       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
    5949:	48 8d 05 24 67 00 00 	lea    0x6724(%rip),%rax        # c074 <_ZN2vk12UnknownErrorD1Ev>
    5950:	48 89 c2             	mov    %rax,%rdx
    5953:	48 8d 05 6e 22 03 00 	lea    0x3226e(%rip),%rax        # 37bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    595a:	48 89 c6             	mov    %rax,%rsi
    595d:	48 89 df             	mov    %rbx,%rdi
    5960:	e8 1b fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    5965:	bf 28 00 00 00       	mov    $0x28,%edi
    596a:	e8 61 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    596f:	48 89 c3             	mov    %rax,%rbx
    5972:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5976:	48 89 c6             	mov    %rax,%rsi
    5979:	48 89 df             	mov    %rbx,%rdi
    597c:	e8 ef 2a 00 00       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
    5981:	48 8d 05 7c 66 00 00 	lea    0x667c(%rip),%rax        # c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    5988:	48 89 c2             	mov    %rax,%rdx
    598b:	48 8d 05 1e 22 03 00 	lea    0x3221e(%rip),%rax        # 37bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5992:	48 89 c6             	mov    %rax,%rsi
    5995:	48 89 df             	mov    %rbx,%rdi
    5998:	e8 e3 f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    599d:	bf 28 00 00 00       	mov    $0x28,%edi
    59a2:	e8 29 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    59a7:	48 89 c3             	mov    %rax,%rbx
    59aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    59ae:	48 89 c6             	mov    %rax,%rsi
    59b1:	48 89 df             	mov    %rbx,%rdi
    59b4:	e8 89 2b 00 00       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
    59b9:	48 8d 05 d4 65 00 00 	lea    0x65d4(%rip),%rax        # bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    59c0:	48 89 c2             	mov    %rax,%rdx
    59c3:	48 8d 05 ce 21 03 00 	lea    0x321ce(%rip),%rax        # 37b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    59ca:	48 89 c6             	mov    %rax,%rsi
    59cd:	48 89 df             	mov    %rbx,%rdi
    59d0:	e8 ab f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    59d5:	bf 28 00 00 00       	mov    $0x28,%edi
    59da:	e8 f1 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    59df:	48 89 c3             	mov    %rax,%rbx
    59e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    59e6:	48 89 c6             	mov    %rax,%rsi
    59e9:	48 89 df             	mov    %rbx,%rdi
    59ec:	e8 23 2c 00 00       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
    59f1:	48 8d 05 2c 65 00 00 	lea    0x652c(%rip),%rax        # bf24 <_ZN2vk18FragmentationErrorD1Ev>
    59f8:	48 89 c2             	mov    %rax,%rdx
    59fb:	48 8d 05 7e 21 03 00 	lea    0x3217e(%rip),%rax        # 37b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5a02:	48 89 c6             	mov    %rax,%rsi
    5a05:	48 89 df             	mov    %rbx,%rdi
    5a08:	e8 73 f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    5a0d:	bf 28 00 00 00       	mov    $0x28,%edi
    5a12:	e8 b9 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5a17:	48 89 c3             	mov    %rax,%rbx
    5a1a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5a1e:	48 89 c6             	mov    %rax,%rsi
    5a21:	48 89 df             	mov    %rbx,%rdi
    5a24:	e8 bd 2c 00 00       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
    5a29:	48 8d 05 84 64 00 00 	lea    0x6484(%rip),%rax        # beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    5a30:	48 89 c2             	mov    %rax,%rdx
    5a33:	48 8d 05 2e 21 03 00 	lea    0x3212e(%rip),%rax        # 37b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5a3a:	48 89 c6             	mov    %rax,%rsi
    5a3d:	48 89 df             	mov    %rbx,%rdi
    5a40:	e8 3b f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    5a45:	bf 28 00 00 00       	mov    $0x28,%edi
    5a4a:	e8 81 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5a4f:	48 89 c3             	mov    %rax,%rbx
    5a52:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5a56:	48 89 c6             	mov    %rax,%rsi
    5a59:	48 89 df             	mov    %rbx,%rdi
    5a5c:	e8 57 2d 00 00       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
    5a61:	48 8d 05 dc 63 00 00 	lea    0x63dc(%rip),%rax        # be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    5a68:	48 89 c2             	mov    %rax,%rdx
    5a6b:	48 8d 05 de 20 03 00 	lea    0x320de(%rip),%rax        # 37b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5a72:	48 89 c6             	mov    %rax,%rsi
    5a75:	48 89 df             	mov    %rbx,%rdi
    5a78:	e8 03 f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    5a7d:	bf 28 00 00 00       	mov    $0x28,%edi
    5a82:	e8 49 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5a87:	48 89 c3             	mov    %rax,%rbx
    5a8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5a8e:	48 89 c6             	mov    %rax,%rsi
    5a91:	48 89 df             	mov    %rbx,%rdi
    5a94:	e8 f1 2d 00 00       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
    5a99:	48 8d 05 34 63 00 00 	lea    0x6334(%rip),%rax        # bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    5aa0:	48 89 c2             	mov    %rax,%rdx
    5aa3:	48 8d 05 8e 20 03 00 	lea    0x3208e(%rip),%rax        # 37b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5aaa:	48 89 c6             	mov    %rax,%rsi
    5aad:	48 89 df             	mov    %rbx,%rdi
    5ab0:	e8 cb f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    5ab5:	bf 28 00 00 00       	mov    $0x28,%edi
    5aba:	e8 11 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5abf:	48 89 c3             	mov    %rax,%rbx
    5ac2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5ac6:	48 89 c6             	mov    %rax,%rsi
    5ac9:	48 89 df             	mov    %rbx,%rdi
    5acc:	e8 8b 2e 00 00       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
    5ad1:	48 8d 05 8c 62 00 00 	lea    0x628c(%rip),%rax        # bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    5ad8:	48 89 c2             	mov    %rax,%rdx
    5adb:	48 8d 05 3e 20 03 00 	lea    0x3203e(%rip),%rax        # 37b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5ae2:	48 89 c6             	mov    %rax,%rsi
    5ae5:	48 89 df             	mov    %rbx,%rdi
    5ae8:	e8 93 f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    5aed:	bf 28 00 00 00       	mov    $0x28,%edi
    5af2:	e8 d9 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5af7:	48 89 c3             	mov    %rax,%rbx
    5afa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5afe:	48 89 c6             	mov    %rax,%rsi
    5b01:	48 89 df             	mov    %rbx,%rdi
    5b04:	e8 25 2f 00 00       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
    5b09:	48 8d 05 e4 61 00 00 	lea    0x61e4(%rip),%rax        # bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    5b10:	48 89 c2             	mov    %rax,%rdx
    5b13:	48 8d 05 ee 1f 03 00 	lea    0x31fee(%rip),%rax        # 37b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5b1a:	48 89 c6             	mov    %rax,%rsi
    5b1d:	48 89 df             	mov    %rbx,%rdi
    5b20:	e8 5b f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    5b25:	bf 28 00 00 00       	mov    $0x28,%edi
    5b2a:	e8 a1 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5b2f:	48 89 c3             	mov    %rax,%rbx
    5b32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5b36:	48 89 c6             	mov    %rax,%rsi
    5b39:	48 89 df             	mov    %rbx,%rdi
    5b3c:	e8 bf 2f 00 00       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
    5b41:	48 8d 05 3c 61 00 00 	lea    0x613c(%rip),%rax        # bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    5b48:	48 89 c2             	mov    %rax,%rdx
    5b4b:	48 8d 05 9e 1f 03 00 	lea    0x31f9e(%rip),%rax        # 37af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5b52:	48 89 c6             	mov    %rax,%rsi
    5b55:	48 89 df             	mov    %rbx,%rdi
    5b58:	e8 23 f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    5b5d:	bf 28 00 00 00       	mov    $0x28,%edi
    5b62:	e8 69 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5b67:	48 89 c3             	mov    %rax,%rbx
    5b6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5b6e:	48 89 c6             	mov    %rax,%rsi
    5b71:	48 89 df             	mov    %rbx,%rdi
    5b74:	e8 59 30 00 00       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
    5b79:	48 8d 05 94 60 00 00 	lea    0x6094(%rip),%rax        # bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    5b80:	48 89 c2             	mov    %rax,%rdx
    5b83:	48 8d 05 4e 1f 03 00 	lea    0x31f4e(%rip),%rax        # 37ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5b8a:	48 89 c6             	mov    %rax,%rsi
    5b8d:	48 89 df             	mov    %rbx,%rdi
    5b90:	e8 eb f7 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorVideoProfileCodecNotSupportedKHR: throw VideoProfileCodecNotSupportedKHRError( message );
#  endif /*VK_ENABLE_BETA_EXTENSIONS*/
#  if defined( VK_ENABLE_BETA_EXTENSIONS )
        case Result::eErrorVideoStdVersionNotSupportedKHR: throw VideoStdVersionNotSupportedKHRError( message );
#  endif /*VK_ENABLE_BETA_EXTENSIONS*/
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    5b95:	bf 28 00 00 00       	mov    $0x28,%edi
    5b9a:	e8 31 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5b9f:	48 89 c3             	mov    %rax,%rbx
    5ba2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5ba6:	48 89 c6             	mov    %rax,%rsi
    5ba9:	48 89 df             	mov    %rbx,%rdi
    5bac:	e8 f3 30 00 00       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
    5bb1:	48 8d 05 ec 5f 00 00 	lea    0x5fec(%rip),%rax        # bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    5bb8:	48 89 c2             	mov    %rax,%rdx
    5bbb:	48 8d 05 fe 1e 03 00 	lea    0x31efe(%rip),%rax        # 37ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5bc2:	48 89 c6             	mov    %rax,%rsi
    5bc5:	48 89 df             	mov    %rbx,%rdi
    5bc8:	e8 b3 f7 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    5bcd:	bf 28 00 00 00       	mov    $0x28,%edi
    5bd2:	e8 f9 f4 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5bd7:	48 89 c3             	mov    %rax,%rbx
    5bda:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5bde:	48 89 c6             	mov    %rax,%rsi
    5be1:	48 89 df             	mov    %rbx,%rdi
    5be4:	e8 8d 31 00 00       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
    5be9:	48 8d 05 44 5f 00 00 	lea    0x5f44(%rip),%rax        # bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    5bf0:	48 89 c2             	mov    %rax,%rdx
    5bf3:	48 8d 05 ae 1e 03 00 	lea    0x31eae(%rip),%rax        # 37aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5bfa:	48 89 c6             	mov    %rax,%rsi
    5bfd:	48 89 df             	mov    %rbx,%rdi
    5c00:	e8 7b f7 ff ff       	call   5380 <__cxa_throw@plt>
#  if defined( VK_USE_PLATFORM_WIN32_KHR )
        case Result::eErrorFullScreenExclusiveModeLostEXT: throw FullScreenExclusiveModeLostEXTError( message );
#  endif /*VK_USE_PLATFORM_WIN32_KHR*/
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    5c05:	bf 28 00 00 00       	mov    $0x28,%edi
    5c0a:	e8 c1 f4 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5c0f:	48 89 c3             	mov    %rax,%rbx
    5c12:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5c16:	48 89 c6             	mov    %rax,%rsi
    5c19:	48 89 df             	mov    %rbx,%rdi
    5c1c:	e8 27 32 00 00       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
    5c21:	48 8d 05 9c 5e 00 00 	lea    0x5e9c(%rip),%rax        # bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    5c28:	48 89 c2             	mov    %rax,%rdx
    5c2b:	48 8d 05 5e 1e 03 00 	lea    0x31e5e(%rip),%rax        # 37a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5c32:	48 89 c6             	mov    %rax,%rsi
    5c35:	48 89 df             	mov    %rbx,%rdi
    5c38:	e8 43 f7 ff ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
    5c3d:	bf 28 00 00 00       	mov    $0x28,%edi
    5c42:	e8 89 f4 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5c47:	48 89 c3             	mov    %rax,%rbx
    5c4a:	8b 45 cc             	mov    -0x34(%rbp),%eax
    5c4d:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    5c50:	0f b6 05 01 27 03 00 	movzbl 0x32701(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    5c57:	84 c0                	test   %al,%al
    5c59:	0f 94 c0             	sete   %al
    5c5c:	84 c0                	test   %al,%al
    5c5e:	74 4a                	je     5caa <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    5c60:	48 8d 05 f1 26 03 00 	lea    0x326f1(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    5c67:	48 89 c7             	mov    %rax,%rdi
    5c6a:	e8 51 f7 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    5c6f:	85 c0                	test   %eax,%eax
    5c71:	0f 95 c0             	setne  %al
    5c74:	84 c0                	test   %al,%al
    5c76:	74 32                	je     5caa <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    5c78:	48 8d 05 79 25 03 00 	lea    0x32579(%rip),%rax        # 381f8 <__dso_handle>
    5c7f:	48 89 c2             	mov    %rax,%rdx
    5c82:	48 8d 05 77 25 03 00 	lea    0x32577(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    5c89:	48 89 c6             	mov    %rax,%rsi
    5c8c:	48 8d 05 91 69 00 00 	lea    0x6991(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    5c93:	48 89 c7             	mov    %rax,%rdi
    5c96:	e8 35 f5 ff ff       	call   51d0 <__cxa_atexit@plt>
    5c9b:	48 8d 05 b6 26 03 00 	lea    0x326b6(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    5ca2:	48 89 c7             	mov    %rax,%rdi
    5ca5:	e8 56 f4 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    5caa:	48 8d 15 4f 25 03 00 	lea    0x3254f(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    5cb1:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    5cb4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5cb8:	89 ce                	mov    %ecx,%esi
    5cba:	48 89 c7             	mov    %rax,%rdi
    5cbd:	e8 46 06 00 00       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    5cc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5cc6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
    5cca:	48 89 c6             	mov    %rax,%rsi
    5ccd:	48 89 d7             	mov    %rdx,%rdi
    5cd0:	89 f1                	mov    %esi,%ecx
    5cd2:	48 89 d0             	mov    %rdx,%rax
    5cd5:	89 ce                	mov    %ecx,%esi
    5cd7:	48 89 c2             	mov    %rax,%rdx
    5cda:	48 89 df             	mov    %rbx,%rdi
    5cdd:	e8 2e 1b 00 00       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
    5ce2:	48 8d 05 5d 1c 00 00 	lea    0x1c5d(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
    5ce9:	48 89 c2             	mov    %rax,%rdx
    5cec:	48 8d 05 0d 20 03 00 	lea    0x3200d(%rip),%rax        # 37d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
    5cf3:	48 89 c6             	mov    %rax,%rsi
    5cf6:	48 89 df             	mov    %rbx,%rdi
    5cf9:	e8 82 f6 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    5cfe:	49 89 c4             	mov    %rax,%r12
    5d01:	48 89 df             	mov    %rbx,%rdi
    5d04:	e8 47 f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d09:	4c 89 e0             	mov    %r12,%rax
    5d0c:	48 89 c7             	mov    %rax,%rdi
    5d0f:	e8 8c f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    5d14:	49 89 c4             	mov    %rax,%r12
    5d17:	48 89 df             	mov    %rbx,%rdi
    5d1a:	e8 31 f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d1f:	4c 89 e0             	mov    %r12,%rax
    5d22:	48 89 c7             	mov    %rax,%rdi
    5d25:	e8 76 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    5d2a:	49 89 c4             	mov    %rax,%r12
    5d2d:	48 89 df             	mov    %rbx,%rdi
    5d30:	e8 1b f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d35:	4c 89 e0             	mov    %r12,%rax
    5d38:	48 89 c7             	mov    %rax,%rdi
    5d3b:	e8 60 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    5d40:	49 89 c4             	mov    %rax,%r12
    5d43:	48 89 df             	mov    %rbx,%rdi
    5d46:	e8 05 f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d4b:	4c 89 e0             	mov    %r12,%rax
    5d4e:	48 89 c7             	mov    %rax,%rdi
    5d51:	e8 4a f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    5d56:	49 89 c4             	mov    %rax,%r12
    5d59:	48 89 df             	mov    %rbx,%rdi
    5d5c:	e8 ef f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d61:	4c 89 e0             	mov    %r12,%rax
    5d64:	48 89 c7             	mov    %rax,%rdi
    5d67:	e8 34 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    5d6c:	49 89 c4             	mov    %rax,%r12
    5d6f:	48 89 df             	mov    %rbx,%rdi
    5d72:	e8 d9 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d77:	4c 89 e0             	mov    %r12,%rax
    5d7a:	48 89 c7             	mov    %rax,%rdi
    5d7d:	e8 1e f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    5d82:	49 89 c4             	mov    %rax,%r12
    5d85:	48 89 df             	mov    %rbx,%rdi
    5d88:	e8 c3 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d8d:	4c 89 e0             	mov    %r12,%rax
    5d90:	48 89 c7             	mov    %rax,%rdi
    5d93:	e8 08 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    5d98:	49 89 c4             	mov    %rax,%r12
    5d9b:	48 89 df             	mov    %rbx,%rdi
    5d9e:	e8 ad f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5da3:	4c 89 e0             	mov    %r12,%rax
    5da6:	48 89 c7             	mov    %rax,%rdi
    5da9:	e8 f2 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    5dae:	49 89 c4             	mov    %rax,%r12
    5db1:	48 89 df             	mov    %rbx,%rdi
    5db4:	e8 97 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5db9:	4c 89 e0             	mov    %r12,%rax
    5dbc:	48 89 c7             	mov    %rax,%rdi
    5dbf:	e8 dc f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    5dc4:	49 89 c4             	mov    %rax,%r12
    5dc7:	48 89 df             	mov    %rbx,%rdi
    5dca:	e8 81 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5dcf:	4c 89 e0             	mov    %r12,%rax
    5dd2:	48 89 c7             	mov    %rax,%rdi
    5dd5:	e8 c6 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    5dda:	49 89 c4             	mov    %rax,%r12
    5ddd:	48 89 df             	mov    %rbx,%rdi
    5de0:	e8 6b f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5de5:	4c 89 e0             	mov    %r12,%rax
    5de8:	48 89 c7             	mov    %rax,%rdi
    5deb:	e8 b0 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    5df0:	49 89 c4             	mov    %rax,%r12
    5df3:	48 89 df             	mov    %rbx,%rdi
    5df6:	e8 55 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5dfb:	4c 89 e0             	mov    %r12,%rax
    5dfe:	48 89 c7             	mov    %rax,%rdi
    5e01:	e8 9a f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    5e06:	49 89 c4             	mov    %rax,%r12
    5e09:	48 89 df             	mov    %rbx,%rdi
    5e0c:	e8 3f f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e11:	4c 89 e0             	mov    %r12,%rax
    5e14:	48 89 c7             	mov    %rax,%rdi
    5e17:	e8 84 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    5e1c:	49 89 c4             	mov    %rax,%r12
    5e1f:	48 89 df             	mov    %rbx,%rdi
    5e22:	e8 29 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e27:	4c 89 e0             	mov    %r12,%rax
    5e2a:	48 89 c7             	mov    %rax,%rdi
    5e2d:	e8 6e f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    5e32:	49 89 c4             	mov    %rax,%r12
    5e35:	48 89 df             	mov    %rbx,%rdi
    5e38:	e8 13 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e3d:	4c 89 e0             	mov    %r12,%rax
    5e40:	48 89 c7             	mov    %rax,%rdi
    5e43:	e8 58 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    5e48:	49 89 c4             	mov    %rax,%r12
    5e4b:	48 89 df             	mov    %rbx,%rdi
    5e4e:	e8 fd f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e53:	4c 89 e0             	mov    %r12,%rax
    5e56:	48 89 c7             	mov    %rax,%rdi
    5e59:	e8 42 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    5e5e:	49 89 c4             	mov    %rax,%r12
    5e61:	48 89 df             	mov    %rbx,%rdi
    5e64:	e8 e7 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e69:	4c 89 e0             	mov    %r12,%rax
    5e6c:	48 89 c7             	mov    %rax,%rdi
    5e6f:	e8 2c f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    5e74:	49 89 c4             	mov    %rax,%r12
    5e77:	48 89 df             	mov    %rbx,%rdi
    5e7a:	e8 d1 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e7f:	4c 89 e0             	mov    %r12,%rax
    5e82:	48 89 c7             	mov    %rax,%rdi
    5e85:	e8 16 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    5e8a:	49 89 c4             	mov    %rax,%r12
    5e8d:	48 89 df             	mov    %rbx,%rdi
    5e90:	e8 bb f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e95:	4c 89 e0             	mov    %r12,%rax
    5e98:	48 89 c7             	mov    %rax,%rdi
    5e9b:	e8 00 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    5ea0:	49 89 c4             	mov    %rax,%r12
    5ea3:	48 89 df             	mov    %rbx,%rdi
    5ea6:	e8 a5 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5eab:	4c 89 e0             	mov    %r12,%rax
    5eae:	48 89 c7             	mov    %rax,%rdi
    5eb1:	e8 ea f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    5eb6:	49 89 c4             	mov    %rax,%r12
    5eb9:	48 89 df             	mov    %rbx,%rdi
    5ebc:	e8 8f f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5ec1:	4c 89 e0             	mov    %r12,%rax
    5ec4:	48 89 c7             	mov    %rax,%rdi
    5ec7:	e8 d4 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    5ecc:	49 89 c4             	mov    %rax,%r12
    5ecf:	48 89 df             	mov    %rbx,%rdi
    5ed2:	e8 79 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5ed7:	4c 89 e0             	mov    %r12,%rax
    5eda:	48 89 c7             	mov    %rax,%rdi
    5edd:	e8 be f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    5ee2:	49 89 c4             	mov    %rax,%r12
    5ee5:	48 89 df             	mov    %rbx,%rdi
    5ee8:	e8 63 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5eed:	4c 89 e0             	mov    %r12,%rax
    5ef0:	48 89 c7             	mov    %rax,%rdi
    5ef3:	e8 a8 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    5ef8:	49 89 c4             	mov    %rax,%r12
    5efb:	48 89 df             	mov    %rbx,%rdi
    5efe:	e8 4d f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f03:	4c 89 e0             	mov    %r12,%rax
    5f06:	48 89 c7             	mov    %rax,%rdi
    5f09:	e8 92 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    5f0e:	49 89 c4             	mov    %rax,%r12
    5f11:	48 89 df             	mov    %rbx,%rdi
    5f14:	e8 37 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f19:	4c 89 e0             	mov    %r12,%rax
    5f1c:	48 89 c7             	mov    %rax,%rdi
    5f1f:	e8 7c f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    5f24:	49 89 c4             	mov    %rax,%r12
    5f27:	48 89 df             	mov    %rbx,%rdi
    5f2a:	e8 21 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f2f:	4c 89 e0             	mov    %r12,%rax
    5f32:	48 89 c7             	mov    %rax,%rdi
    5f35:	e8 66 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
    5f3a:	49 89 c4             	mov    %rax,%r12
    5f3d:	48 89 df             	mov    %rbx,%rdi
    5f40:	e8 0b f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f45:	4c 89 e0             	mov    %r12,%rax
    5f48:	48 89 c7             	mov    %rax,%rdi
    5f4b:	e8 50 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>

0000000000005f50 <_Z14protected_mainv>:
#include <vulkan_app.hpp>

#include <iostream>

int protected_main() {
    5f50:	55                   	push   %rbp
    5f51:	48 89 e5             	mov    %rsp,%rbp
    5f54:	41 55                	push   %r13
    5f56:	41 54                	push   %r12
    5f58:	53                   	push   %rbx
    5f59:	48 83 ec 18          	sub    $0x18,%rsp
  auto app = new rtvc::VulkanApp{};
    5f5d:	bf d8 00 00 00       	mov    $0xd8,%edi
    5f62:	e8 b9 f2 ff ff       	call   5220 <_Znwm@plt>
    5f67:	48 89 c3             	mov    %rax,%rbx
    5f6a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    5f70:	48 89 de             	mov    %rbx,%rsi
    5f73:	b8 00 00 00 00       	mov    $0x0,%eax
    5f78:	ba 1b 00 00 00       	mov    $0x1b,%edx
    5f7d:	48 89 f7             	mov    %rsi,%rdi
    5f80:	48 89 d1             	mov    %rdx,%rcx
    5f83:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    5f86:	48 89 df             	mov    %rbx,%rdi
    5f89:	e8 c0 3b 00 00       	call   9b4e <_ZN4rtvc9VulkanAppC1Ev>
    5f8e:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  app->render();
    5f92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f96:	48 89 c7             	mov    %rax,%rdi
    5f99:	e8 78 3b 00 00       	call   9b16 <_ZN4rtvc9VulkanApp6renderEv>
  delete app;
    5f9e:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    5fa2:	48 85 db             	test   %rbx,%rbx
    5fa5:	74 15                	je     5fbc <_Z14protected_mainv+0x6c>
    5fa7:	48 89 df             	mov    %rbx,%rdi
    5faa:	e8 11 3d 00 00       	call   9cc0 <_ZN4rtvc9VulkanAppD1Ev>
    5faf:	be d8 00 00 00       	mov    $0xd8,%esi
    5fb4:	48 89 df             	mov    %rbx,%rdi
    5fb7:	e8 74 f2 ff ff       	call   5230 <_ZdlPvm@plt>
  return EXIT_SUCCESS;
    5fbc:	b8 00 00 00 00       	mov    $0x0,%eax
    5fc1:	eb 20                	jmp    5fe3 <_Z14protected_mainv+0x93>
  auto app = new rtvc::VulkanApp{};
    5fc3:	49 89 c4             	mov    %rax,%r12
    5fc6:	45 84 ed             	test   %r13b,%r13b
    5fc9:	74 0d                	je     5fd8 <_Z14protected_mainv+0x88>
    5fcb:	be d8 00 00 00       	mov    $0xd8,%esi
    5fd0:	48 89 df             	mov    %rbx,%rdi
    5fd3:	e8 58 f2 ff ff       	call   5230 <_ZdlPvm@plt>
    5fd8:	4c 89 e0             	mov    %r12,%rax
    5fdb:	48 89 c7             	mov    %rax,%rdi
    5fde:	e8 bd f3 ff ff       	call   53a0 <_Unwind_Resume@plt>
}
    5fe3:	48 83 c4 18          	add    $0x18,%rsp
    5fe7:	5b                   	pop    %rbx
    5fe8:	41 5c                	pop    %r12
    5fea:	41 5d                	pop    %r13
    5fec:	5d                   	pop    %rbp
    5fed:	c3                   	ret

0000000000005fee <main>:

int main() {
    5fee:	55                   	push   %rbp
    5fef:	48 89 e5             	mov    %rsp,%rbp
    5ff2:	53                   	push   %rbx
    5ff3:	48 83 ec 18          	sub    $0x18,%rsp
  try {
    return protected_main();
    5ff7:	e8 54 ff ff ff       	call   5f50 <_Z14protected_mainv>
    5ffc:	e9 30 01 00 00       	jmp    6131 <main+0x143>
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  } catch (...) {
    std::cerr << "Uncaught exception" << std::endl;
  }
  return EXIT_FAILURE;
    6001:	b8 01 00 00 00       	mov    $0x1,%eax
    6006:	e9 26 01 00 00       	jmp    6131 <main+0x143>
  } catch (vk::SystemError &e) {
    600b:	48 83 fa 01          	cmp    $0x1,%rdx
    600f:	74 0b                	je     601c <main+0x2e>
    6011:	48 83 fa 02          	cmp    $0x2,%rdx
    6015:	74 53                	je     606a <main+0x7c>
    6017:	e9 9f 00 00 00       	jmp    60bb <main+0xcd>
    601c:	48 89 c7             	mov    %rax,%rdi
    601f:	e8 7c f0 ff ff       	call   50a0 <__cxa_begin_catch@plt>
    6024:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    std::cerr << e.what() << std::endl;
    6028:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    602c:	48 8b 00             	mov    (%rax),%rax
    602f:	48 83 c0 10          	add    $0x10,%rax
    6033:	48 8b 10             	mov    (%rax),%rdx
    6036:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    603a:	48 89 c7             	mov    %rax,%rdi
    603d:	ff d2                	call   *%rdx
    603f:	48 89 c6             	mov    %rax,%rsi
    6042:	48 8d 05 f7 21 03 00 	lea    0x321f7(%rip),%rax        # 38240 <_ZSt4cerr@GLIBCXX_3.4>
    6049:	48 89 c7             	mov    %rax,%rdi
    604c:	e8 bf f1 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    6051:	48 8b 15 48 1f 03 00 	mov    0x31f48(%rip),%rdx        # 37fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    6058:	48 89 d6             	mov    %rdx,%rsi
    605b:	48 89 c7             	mov    %rax,%rdi
    605e:	e8 fd f1 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  } catch (std::exception &e) {
    6063:	e8 08 f3 ff ff       	call   5370 <__cxa_end_catch@plt>
    6068:	eb 97                	jmp    6001 <main+0x13>
    606a:	48 89 c7             	mov    %rax,%rdi
    606d:	e8 2e f0 ff ff       	call   50a0 <__cxa_begin_catch@plt>
    6072:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    std::cerr << e.what() << std::endl;
    6076:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    607a:	48 8b 00             	mov    (%rax),%rax
    607d:	48 83 c0 10          	add    $0x10,%rax
    6081:	48 8b 10             	mov    (%rax),%rdx
    6084:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6088:	48 89 c7             	mov    %rax,%rdi
    608b:	ff d2                	call   *%rdx
    608d:	48 89 c6             	mov    %rax,%rsi
    6090:	48 8d 05 a9 21 03 00 	lea    0x321a9(%rip),%rax        # 38240 <_ZSt4cerr@GLIBCXX_3.4>
    6097:	48 89 c7             	mov    %rax,%rdi
    609a:	e8 71 f1 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    609f:	48 8b 15 fa 1e 03 00 	mov    0x31efa(%rip),%rdx        # 37fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    60a6:	48 89 d6             	mov    %rdx,%rsi
    60a9:	48 89 c7             	mov    %rax,%rdi
    60ac:	e8 af f1 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  } catch (...) {
    60b1:	e8 ba f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    60b6:	e9 46 ff ff ff       	jmp    6001 <main+0x13>
    60bb:	48 89 c7             	mov    %rax,%rdi
    60be:	e8 dd ef ff ff       	call   50a0 <__cxa_begin_catch@plt>
    std::cerr << "Uncaught exception" << std::endl;
    60c3:	48 8d 05 48 dc 01 00 	lea    0x1dc48(%rip),%rax        # 23d12 <_ZNSt8__detailL19__atomic_spin_countE+0x2ae>
    60ca:	48 89 c6             	mov    %rax,%rsi
    60cd:	48 8d 05 6c 21 03 00 	lea    0x3216c(%rip),%rax        # 38240 <_ZSt4cerr@GLIBCXX_3.4>
    60d4:	48 89 c7             	mov    %rax,%rdi
    60d7:	e8 34 f1 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    60dc:	48 8b 15 bd 1e 03 00 	mov    0x31ebd(%rip),%rdx        # 37fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    60e3:	48 89 d6             	mov    %rdx,%rsi
    60e6:	48 89 c7             	mov    %rax,%rdi
    60e9:	e8 72 f1 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  }
    60ee:	e8 7d f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    60f3:	e9 09 ff ff ff       	jmp    6001 <main+0x13>
  } catch (std::exception &e) {
    60f8:	48 89 c3             	mov    %rax,%rbx
    60fb:	e8 70 f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    6100:	48 89 d8             	mov    %rbx,%rax
    6103:	48 89 c7             	mov    %rax,%rdi
    6106:	e8 95 f2 ff ff       	call   53a0 <_Unwind_Resume@plt>
  } catch (...) {
    610b:	48 89 c3             	mov    %rax,%rbx
    610e:	e8 5d f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    6113:	48 89 d8             	mov    %rbx,%rax
    6116:	48 89 c7             	mov    %rax,%rdi
    6119:	e8 82 f2 ff ff       	call   53a0 <_Unwind_Resume@plt>
  }
    611e:	48 89 c3             	mov    %rax,%rbx
    6121:	e8 4a f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    6126:	48 89 d8             	mov    %rbx,%rax
    6129:	48 89 c7             	mov    %rax,%rdi
    612c:	e8 6f f2 ff ff       	call   53a0 <_Unwind_Resume@plt>
    6131:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6135:	c9                   	leave
    6136:	c3                   	ret

0000000000006137 <_Z41__static_initialization_and_destruction_0ii>:
    6137:	55                   	push   %rbp
    6138:	48 89 e5             	mov    %rsp,%rbp
    613b:	48 83 ec 10          	sub    $0x10,%rsp
    613f:	89 7d fc             	mov    %edi,-0x4(%rbp)
    6142:	89 75 f8             	mov    %esi,-0x8(%rbp)
    6145:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    6149:	75 3b                	jne    6186 <_Z41__static_initialization_and_destruction_0ii+0x4f>
    614b:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    6152:	75 32                	jne    6186 <_Z41__static_initialization_and_destruction_0ii+0x4f>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    6154:	48 8d 05 f6 21 03 00 	lea    0x321f6(%rip),%rax        # 38351 <_ZStL8__ioinit>
    615b:	48 89 c7             	mov    %rax,%rdi
    615e:	e8 cd f1 ff ff       	call   5330 <_ZNSt8ios_base4InitC1Ev@plt>
    6163:	48 8d 05 8e 20 03 00 	lea    0x3208e(%rip),%rax        # 381f8 <__dso_handle>
    616a:	48 89 c2             	mov    %rax,%rdx
    616d:	48 8d 05 dd 21 03 00 	lea    0x321dd(%rip),%rax        # 38351 <_ZStL8__ioinit>
    6174:	48 89 c6             	mov    %rax,%rsi
    6177:	48 8b 05 52 1e 03 00 	mov    0x31e52(%rip),%rax        # 37fd0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    617e:	48 89 c7             	mov    %rax,%rdi
    6181:	e8 4a f0 ff ff       	call   51d0 <__cxa_atexit@plt>
    6186:	90                   	nop
    6187:	c9                   	leave
    6188:	c3                   	ret

0000000000006189 <_GLOBAL__sub_I__Z14protected_mainv>:
    6189:	55                   	push   %rbp
    618a:	48 89 e5             	mov    %rsp,%rbp
    618d:	be ff ff 00 00       	mov    $0xffff,%esi
    6192:	bf 01 00 00 00       	mov    $0x1,%edi
    6197:	e8 9b ff ff ff       	call   6137 <_Z41__static_initialization_and_destruction_0ii>
    619c:	5d                   	pop    %rbp
    619d:	c3                   	ret

000000000000619e <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
    619e:	55                   	push   %rbp
    619f:	48 89 e5             	mov    %rsp,%rbp
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
    61a2:	b8 00 00 00 00       	mov    $0x0,%eax
#else
    return false;
#endif
  }
    61a7:	5d                   	pop    %rbp
    61a8:	c3                   	ret

00000000000061a9 <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
    61a9:	55                   	push   %rbp
    61aa:	48 89 e5             	mov    %rsp,%rbp
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
    61ad:	b8 00 00 00 00       	mov    $0x0,%eax
#endif
  }
    61b2:	5d                   	pop    %rbp
    61b3:	c3                   	ret

00000000000061b4 <_ZnwmPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
    61b4:	55                   	push   %rbp
    61b5:	48 89 e5             	mov    %rsp,%rbp
    61b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    61bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    61c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    61c4:	5d                   	pop    %rbp
    61c5:	c3                   	ret

00000000000061c6 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
    61c6:	55                   	push   %rbp
    61c7:	48 89 e5             	mov    %rsp,%rbp
    61ca:	48 83 ec 10          	sub    $0x10,%rsp
    61ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    61d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
    61d6:	e8 c3 ff ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    61db:	84 c0                	test   %al,%al
    61dd:	74 15                	je     61f4 <_ZNSt11char_traitsIcE6assignERcRKc+0x2e>
	  std::construct_at(__builtin_addressof(__c1), __c2);
    61df:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    61e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    61e7:	48 89 d6             	mov    %rdx,%rsi
    61ea:	48 89 c7             	mov    %rax,%rdi
    61ed:	e8 5b 3b 00 00       	call   9d4d <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	else
#endif
	__c1 = __c2;
      }
    61f2:	eb 0d                	jmp    6201 <_ZNSt11char_traitsIcE6assignERcRKc+0x3b>
	__c1 = __c2;
    61f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    61f8:	0f b6 10             	movzbl (%rax),%edx
    61fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    61ff:	88 10                	mov    %dl,(%rax)
      }
    6201:	90                   	nop
    6202:	c9                   	leave
    6203:	c3                   	ret

0000000000006204 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
    6204:	55                   	push   %rbp
    6205:	48 89 e5             	mov    %rsp,%rbp
    6208:	48 83 ec 10          	sub    $0x10,%rsp
    620c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
    6210:	e8 89 ff ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    6215:	84 c0                	test   %al,%al
    6217:	74 0e                	je     6227 <_ZNSt11char_traitsIcE6lengthEPKc+0x23>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
    6219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    621d:	48 89 c7             	mov    %rax,%rdi
    6220:	e8 6d 37 00 00       	call   9992 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
    6225:	eb 0d                	jmp    6234 <_ZNSt11char_traitsIcE6lengthEPKc+0x30>
#endif
	return __builtin_strlen(__s);
    6227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    622b:	48 89 c7             	mov    %rax,%rdi
    622e:	e8 7d ee ff ff       	call   50b0 <strlen@plt>
    6233:	90                   	nop
      }
    6234:	c9                   	leave
    6235:	c3                   	ret

0000000000006236 <_ZNSt11char_traitsIcE4moveEPcPKcm>:
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
    6236:	55                   	push   %rbp
    6237:	48 89 e5             	mov    %rsp,%rbp
    623a:	48 83 ec 20          	sub    $0x20,%rsp
    623e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6242:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6246:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
    624a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    624f:	75 06                	jne    6257 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x21>
	  return __s1;
    6251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6255:	eb 3a                	jmp    6291 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
    6257:	e8 42 ff ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    625c:	84 c0                	test   %al,%al
    625e:	74 19                	je     6279 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
    6260:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6264:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    626c:	48 89 ce             	mov    %rcx,%rsi
    626f:	48 89 c7             	mov    %rax,%rdi
    6272:	e8 15 3b 00 00       	call   9d8c <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>
    6277:	eb 18                	jmp    6291 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    6279:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    627d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6285:	48 89 ce             	mov    %rcx,%rsi
    6288:	48 89 c7             	mov    %rax,%rdi
    628b:	e8 d0 f0 ff ff       	call   5360 <memmove@plt>
    6290:	90                   	nop
      }
    6291:	c9                   	leave
    6292:	c3                   	ret

0000000000006293 <_ZNSt11char_traitsIcE4copyEPcPKcm>:

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
    6293:	55                   	push   %rbp
    6294:	48 89 e5             	mov    %rsp,%rbp
    6297:	48 83 ec 20          	sub    $0x20,%rsp
    629b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    629f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    62a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
    62a7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    62ac:	75 06                	jne    62b4 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x21>
	  return __s1;
    62ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    62b2:	eb 40                	jmp    62f4 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
    62b4:	e8 e5 fe ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    62b9:	84 c0                	test   %al,%al
    62bb:	74 19                	je     62d6 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
    62bd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    62c1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    62c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    62c9:	48 89 ce             	mov    %rcx,%rsi
    62cc:	48 89 c7             	mov    %rax,%rdi
    62cf:	e8 6a 3b 00 00       	call   9e3e <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
    62d4:	eb 1e                	jmp    62f4 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    62d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    62da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    62de:	48 89 d1             	mov    %rdx,%rcx
    62e1:	48 89 c6             	mov    %rax,%rsi
    62e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    62e8:	48 89 c2             	mov    %rax,%rdx
    62eb:	48 89 cf             	mov    %rcx,%rdi
    62ee:	e8 ad ee ff ff       	call   51a0 <memcpy@plt>
    62f3:	90                   	nop
      }
    62f4:	c9                   	leave
    62f5:	c3                   	ret

00000000000062f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
    62f6:	55                   	push   %rbp
    62f7:	48 89 e5             	mov    %rsp,%rbp
    62fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
    62fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6302:	48 8b 40 08          	mov    0x8(%rax),%rax
    6306:	5d                   	pop    %rbp
    6307:	c3                   	ret

0000000000006308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>:
  {
  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    6308:	55                   	push   %rbp
    6309:	48 89 e5             	mov    %rsp,%rbp
    630c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6310:	89 75 f4             	mov    %esi,-0xc(%rbp)
    6313:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    : _M_value(__v), _M_cat(&__cat) { }
    6317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    631b:	8b 55 f4             	mov    -0xc(%rbp),%edx
    631e:	89 10                	mov    %edx,(%rax)
    6320:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6324:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6328:	48 89 50 08          	mov    %rdx,0x8(%rax)
    632c:	90                   	nop
    632d:	5d                   	pop    %rbp
    632e:	c3                   	ret
    632f:	90                   	nop

0000000000006330 <_ZNKSt10error_code5valueEv>:
			 error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }
    6330:	55                   	push   %rbp
    6331:	48 89 e5             	mov    %rsp,%rbp
    6334:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    633c:	8b 00                	mov    (%rax),%eax
    633e:	5d                   	pop    %rbp
    633f:	c3                   	ret

0000000000006340 <_ZNKSt10error_code8categoryEv>:

    const error_category&
    category() const noexcept { return *_M_cat; }
    6340:	55                   	push   %rbp
    6341:	48 89 e5             	mov    %rsp,%rbp
    6344:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6348:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    634c:	48 8b 40 08          	mov    0x8(%rax),%rax
    6350:	5d                   	pop    %rbp
    6351:	c3                   	ret

0000000000006352 <_ZNKSt10error_code7messageB5cxx11Ev>:
    error_condition
    default_error_condition() const noexcept;

    _GLIBCXX_DEFAULT_ABI_TAG
    string
    message() const
    6352:	55                   	push   %rbp
    6353:	48 89 e5             	mov    %rsp,%rbp
    6356:	41 54                	push   %r12
    6358:	53                   	push   %rbx
    6359:	48 83 ec 10          	sub    $0x10,%rsp
    635d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6361:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return category().message(value()); }
    6365:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6369:	48 89 c7             	mov    %rax,%rdi
    636c:	e8 cf ff ff ff       	call   6340 <_ZNKSt10error_code8categoryEv>
    6371:	48 89 c3             	mov    %rax,%rbx
    6374:	48 8b 03             	mov    (%rbx),%rax
    6377:	48 83 c0 20          	add    $0x20,%rax
    637b:	4c 8b 20             	mov    (%rax),%r12
    637e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6382:	48 89 c7             	mov    %rax,%rdi
    6385:	e8 a6 ff ff ff       	call   6330 <_ZNKSt10error_code5valueEv>
    638a:	89 c2                	mov    %eax,%edx
    638c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6390:	48 89 de             	mov    %rbx,%rsi
    6393:	48 89 c7             	mov    %rax,%rdi
    6396:	41 ff d4             	call   *%r12
    6399:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    639d:	48 83 c4 10          	add    $0x10,%rsp
    63a1:	5b                   	pop    %rbx
    63a2:	41 5c                	pop    %r12
    63a4:	5d                   	pop    %rbp
    63a5:	c3                   	ret

00000000000063a6 <_ZNSt12system_errorC1ESt10error_code>:
  {
  private:
    error_code 	_M_code;

  public:
    system_error(error_code __ec = error_code())
    63a6:	55                   	push   %rbp
    63a7:	48 89 e5             	mov    %rsp,%rbp
    63aa:	53                   	push   %rbx
    63ab:	48 83 ec 48          	sub    $0x48,%rsp
    63af:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    63b3:	48 89 d1             	mov    %rdx,%rcx
    63b6:	48 89 f0             	mov    %rsi,%rax
    63b9:	48 89 fa             	mov    %rdi,%rdx
    63bc:	48 89 ca             	mov    %rcx,%rdx
    63bf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    63c3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    : runtime_error(__ec.message()), _M_code(__ec) { }
    63c7:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    63cb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63cf:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    63d3:	48 89 d6             	mov    %rdx,%rsi
    63d6:	48 89 c7             	mov    %rax,%rdi
    63d9:	e8 74 ff ff ff       	call   6352 <_ZNKSt10error_code7messageB5cxx11Ev>
    63de:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63e2:	48 89 c6             	mov    %rax,%rsi
    63e5:	48 89 df             	mov    %rbx,%rdi
    63e8:	e8 c3 ee ff ff       	call   52b0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
    63ed:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63f1:	48 89 c7             	mov    %rax,%rdi
    63f4:	e8 df 3a 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    63f9:	48 8d 15 d8 15 03 00 	lea    0x315d8(%rip),%rdx        # 379d8 <_ZTVSt12system_error@GLIBCXX_3.4.11+0x10>
    6400:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6404:	48 89 10             	mov    %rdx,(%rax)
    6407:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    640b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    640f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6413:	48 89 41 10          	mov    %rax,0x10(%rcx)
    6417:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    641b:	eb 1a                	jmp    6437 <_ZNSt12system_errorC1ESt10error_code+0x91>
    641d:	48 89 c3             	mov    %rax,%rbx
    6420:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6424:	48 89 c7             	mov    %rax,%rdi
    6427:	e8 ac 3a 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    642c:	48 89 d8             	mov    %rbx,%rax
    642f:	48 89 c7             	mov    %rax,%rdi
    6432:	e8 69 ef ff ff       	call   53a0 <_Unwind_Resume@plt>
    6437:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    643b:	c9                   	leave
    643c:	c3                   	ret
    643d:	90                   	nop

000000000000643e <_ZNSt12system_errorC1ESt10error_codePKc>:

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    643e:	55                   	push   %rbp
    643f:	48 89 e5             	mov    %rsp,%rbp
    6442:	53                   	push   %rbx
    6443:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    644a:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    644e:	89 f0                	mov    %esi,%eax
    6450:	48 89 d6             	mov    %rdx,%rsi
    6453:	48 89 f2             	mov    %rsi,%rdx
    6456:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    645d:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    6464:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }
    6468:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
    646c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6470:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6477:	48 89 d6             	mov    %rdx,%rsi
    647a:	48 89 c7             	mov    %rax,%rdi
    647d:	e8 d0 fe ff ff       	call   6352 <_ZNKSt10error_code7messageB5cxx11Ev>
    6482:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6486:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    648a:	48 8d 0d af d1 01 00 	lea    0x1d1af(%rip),%rcx        # 23640 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8>
    6491:	48 89 ce             	mov    %rcx,%rsi
    6494:	48 89 c7             	mov    %rax,%rdi
    6497:	e8 88 3b 00 00       	call   a024 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
    649c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    64a0:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    64a4:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    64a8:	48 89 ce             	mov    %rcx,%rsi
    64ab:	48 89 c7             	mov    %rax,%rdi
    64ae:	e8 71 3b 00 00       	call   a024 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
    64b3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    64b7:	48 89 c6             	mov    %rax,%rsi
    64ba:	48 89 df             	mov    %rbx,%rdi
    64bd:	e8 ee ed ff ff       	call   52b0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
    64c2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    64c6:	48 89 c7             	mov    %rax,%rdi
    64c9:	e8 0a 3a 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    64ce:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    64d2:	48 89 c7             	mov    %rax,%rdi
    64d5:	e8 fe 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    64da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    64de:	48 89 c7             	mov    %rax,%rdi
    64e1:	e8 f2 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    64e6:	48 8d 15 eb 14 03 00 	lea    0x314eb(%rip),%rdx        # 379d8 <_ZTVSt12system_error@GLIBCXX_3.4.11+0x10>
    64ed:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    64f1:	48 89 10             	mov    %rdx,(%rax)
    64f4:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
    64f8:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    64ff:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    6506:	48 89 41 10          	mov    %rax,0x10(%rcx)
    650a:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    650e:	eb 3c                	jmp    654c <_ZNSt12system_errorC1ESt10error_codePKc+0x10e>
    6510:	48 89 c3             	mov    %rax,%rbx
    6513:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6517:	48 89 c7             	mov    %rax,%rdi
    651a:	e8 b9 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    651f:	eb 03                	jmp    6524 <_ZNSt12system_errorC1ESt10error_codePKc+0xe6>
    6521:	48 89 c3             	mov    %rax,%rbx
    6524:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6528:	48 89 c7             	mov    %rax,%rdi
    652b:	e8 a8 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    6530:	eb 03                	jmp    6535 <_ZNSt12system_errorC1ESt10error_codePKc+0xf7>
    6532:	48 89 c3             	mov    %rax,%rbx
    6535:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6539:	48 89 c7             	mov    %rax,%rdi
    653c:	e8 97 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    6541:	48 89 d8             	mov    %rbx,%rax
    6544:	48 89 c7             	mov    %rax,%rdi
    6547:	e8 54 ee ff ff       	call   53a0 <_Unwind_Resume@plt>
    654c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6550:	c9                   	leave
    6551:	c3                   	ret

0000000000006552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>:
    size_t getVkHeaderVersion() const
    6552:	55                   	push   %rbp
    6553:	48 89 e5             	mov    %rsp,%rbp
    6556:	48 83 ec 10          	sub    $0x10,%rsp
    655a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      VULKAN_HPP_ASSERT( m_valid );
    655e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6562:	0f b6 40 08          	movzbl 0x8(%rax),%eax
    6566:	84 c0                	test   %al,%al
    6568:	75 28                	jne    6592 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv+0x40>
    656a:	48 8d 05 d7 d0 01 00 	lea    0x1d0d7(%rip),%rax        # 23648 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x10>
    6571:	48 89 c1             	mov    %rax,%rcx
    6574:	ba 16 05 00 00       	mov    $0x516,%edx
    6579:	48 8d 05 08 d1 01 00 	lea    0x1d108(%rip),%rax        # 23688 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x50>
    6580:	48 89 c6             	mov    %rax,%rsi
    6583:	48 8d 05 1d d1 01 00 	lea    0x1d11d(%rip),%rax        # 236a7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x6f>
    658a:	48 89 c7             	mov    %rax,%rdi
    658d:	e8 7e eb ff ff       	call   5110 <__assert_fail@plt>
      return vkHeaderVersion;
    6592:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6596:	48 8b 00             	mov    (%rax),%rax
    }
    6599:	c9                   	leave
    659a:	c3                   	ret
    659b:	90                   	nop

000000000000659c <_ZN2vk18DispatchLoaderBaseC1Ev>:
    DispatchLoaderBase() = default;
    659c:	55                   	push   %rbp
    659d:	48 89 e5             	mov    %rsp,%rbp
    65a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    65a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65a8:	48 c7 00 e7 00 00 00 	movq   $0xe7,(%rax)
    65af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65b3:	c6 40 08 01          	movb   $0x1,0x8(%rax)
    65b7:	90                   	nop
    65b8:	5d                   	pop    %rbp
    65b9:	c3                   	ret

00000000000065ba <_ZStanSt13_Ios_FmtflagsS_>:
      _S_ios_fmtflags_min = ~__INT_MAX__
    };

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
    65ba:	55                   	push   %rbp
    65bb:	48 89 e5             	mov    %rsp,%rbp
    65be:	89 7d fc             	mov    %edi,-0x4(%rbp)
    65c1:	89 75 f8             	mov    %esi,-0x8(%rbp)
    65c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
    65c7:	23 45 f8             	and    -0x8(%rbp),%eax
    65ca:	5d                   	pop    %rbp
    65cb:	c3                   	ret

00000000000065cc <_ZStorSt13_Ios_FmtflagsS_>:

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }
    65cc:	55                   	push   %rbp
    65cd:	48 89 e5             	mov    %rsp,%rbp
    65d0:	89 7d fc             	mov    %edi,-0x4(%rbp)
    65d3:	89 75 f8             	mov    %esi,-0x8(%rbp)
    65d6:	8b 45 fc             	mov    -0x4(%rbp),%eax
    65d9:	0b 45 f8             	or     -0x8(%rbp),%eax
    65dc:	5d                   	pop    %rbp
    65dd:	c3                   	ret

00000000000065de <_ZStcoSt13_Ios_Fmtflags>:
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }
    65de:	55                   	push   %rbp
    65df:	48 89 e5             	mov    %rsp,%rbp
    65e2:	89 7d fc             	mov    %edi,-0x4(%rbp)
    65e5:	8b 45 fc             	mov    -0x4(%rbp),%eax
    65e8:	f7 d0                	not    %eax
    65ea:	5d                   	pop    %rbp
    65eb:	c3                   	ret

00000000000065ec <_ZStoRRSt13_Ios_FmtflagsS_>:

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }
    65ec:	55                   	push   %rbp
    65ed:	48 89 e5             	mov    %rsp,%rbp
    65f0:	48 83 ec 10          	sub    $0x10,%rsp
    65f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    65f8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    65fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65ff:	8b 00                	mov    (%rax),%eax
    6601:	8b 55 f4             	mov    -0xc(%rbp),%edx
    6604:	89 d6                	mov    %edx,%esi
    6606:	89 c7                	mov    %eax,%edi
    6608:	e8 bf ff ff ff       	call   65cc <_ZStorSt13_Ios_FmtflagsS_>
    660d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    6611:	89 02                	mov    %eax,(%rdx)
    6613:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6617:	c9                   	leave
    6618:	c3                   	ret

0000000000006619 <_ZStaNRSt13_Ios_FmtflagsS_>:

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }
    6619:	55                   	push   %rbp
    661a:	48 89 e5             	mov    %rsp,%rbp
    661d:	48 83 ec 10          	sub    $0x10,%rsp
    6621:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6625:	89 75 f4             	mov    %esi,-0xc(%rbp)
    6628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    662c:	8b 00                	mov    (%rax),%eax
    662e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    6631:	89 d6                	mov    %edx,%esi
    6633:	89 c7                	mov    %eax,%edi
    6635:	e8 80 ff ff ff       	call   65ba <_ZStanSt13_Ios_FmtflagsS_>
    663a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    663e:	89 02                	mov    %eax,(%rdx)
    6640:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6644:	c9                   	leave
    6645:	c3                   	ret

0000000000006646 <_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_>:
     *
     *  This function clears @a mask in the format flags, then sets
     *  @a fmtfl @c & @a mask.  An example mask is @c ios_base::adjustfield.
    */
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    6646:	55                   	push   %rbp
    6647:	48 89 e5             	mov    %rsp,%rbp
    664a:	48 83 ec 20          	sub    $0x20,%rsp
    664e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6652:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    6655:	89 55 e0             	mov    %edx,-0x20(%rbp)
    {
      fmtflags __old = _M_flags;
    6658:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    665c:	8b 40 18             	mov    0x18(%rax),%eax
    665f:	89 45 fc             	mov    %eax,-0x4(%rbp)
      _M_flags &= ~__mask;
    6662:	8b 45 e0             	mov    -0x20(%rbp),%eax
    6665:	89 c7                	mov    %eax,%edi
    6667:	e8 72 ff ff ff       	call   65de <_ZStcoSt13_Ios_Fmtflags>
    666c:	89 c2                	mov    %eax,%edx
    666e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6672:	48 83 c0 18          	add    $0x18,%rax
    6676:	89 d6                	mov    %edx,%esi
    6678:	48 89 c7             	mov    %rax,%rdi
    667b:	e8 99 ff ff ff       	call   6619 <_ZStaNRSt13_Ios_FmtflagsS_>
      _M_flags |= (__fmtfl & __mask);
    6680:	8b 55 e0             	mov    -0x20(%rbp),%edx
    6683:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    6686:	89 d6                	mov    %edx,%esi
    6688:	89 c7                	mov    %eax,%edi
    668a:	e8 2b ff ff ff       	call   65ba <_ZStanSt13_Ios_FmtflagsS_>
    668f:	89 c2                	mov    %eax,%edx
    6691:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6695:	48 83 c0 18          	add    $0x18,%rax
    6699:	89 d6                	mov    %edx,%esi
    669b:	48 89 c7             	mov    %rax,%rdi
    669e:	e8 49 ff ff ff       	call   65ec <_ZStoRRSt13_Ios_FmtflagsS_>
      return __old;
    66a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
    66a6:	c9                   	leave
    66a7:	c3                   	ret

00000000000066a8 <_ZSt3hexRSt8ios_base>:
  }

  /// Calls base.setf(ios_base::hex, ios_base::basefield).
  inline ios_base&
  hex(ios_base& __base)
  {
    66a8:	55                   	push   %rbp
    66a9:	48 89 e5             	mov    %rsp,%rbp
    66ac:	48 83 ec 10          	sub    $0x10,%rsp
    66b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    __base.setf(ios_base::hex, ios_base::basefield);
    66b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    66b8:	ba 4a 00 00 00       	mov    $0x4a,%edx
    66bd:	be 08 00 00 00       	mov    $0x8,%esi
    66c2:	48 89 c7             	mov    %rax,%rdi
    66c5:	e8 7c ff ff ff       	call   6646 <_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_>
    return __base;
    66ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  }
    66ce:	c9                   	leave
    66cf:	c3                   	ret

00000000000066d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      struct _Alloc_hider : allocator_type // TODO check __is_final
    66d0:	55                   	push   %rbp
    66d1:	48 89 e5             	mov    %rsp,%rbp
    66d4:	48 83 ec 10          	sub    $0x10,%rsp
    66d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    66dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    66e0:	48 89 c7             	mov    %rax,%rdi
    66e3:	e8 68 e9 ff ff       	call   5050 <_ZNSaIcED2Ev@plt>
    66e8:	90                   	nop
    66e9:	c9                   	leave
    66ea:	c3                   	ret
    66eb:	90                   	nop

00000000000066ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
      basic_string()
    66ec:	55                   	push   %rbp
    66ed:	48 89 e5             	mov    %rsp,%rbp
    66f0:	53                   	push   %rbx
    66f1:	48 83 ec 48          	sub    $0x48,%rsp
    66f5:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
      : _M_dataplus(_M_local_data())
    66f9:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
    66fd:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    6701:	48 89 c7             	mov    %rax,%rdi
    6704:	e8 a7 ec ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6709:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    670d:	48 89 c7             	mov    %rax,%rdi
    6710:	e8 97 00 00 00       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    6715:	48 89 c1             	mov    %rax,%rcx
    6718:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    671c:	48 89 c2             	mov    %rax,%rdx
    671f:	48 89 ce             	mov    %rcx,%rsi
    6722:	48 89 df             	mov    %rbx,%rdi
    6725:	e8 e2 00 00 00       	call   680c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
    672a:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    672e:	48 89 c7             	mov    %rax,%rdi
    6731:	e8 3a eb ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6736:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    673a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::is_constant_evaluated())
    673e:	e8 66 fa ff ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
    6743:	84 c0                	test   %al,%al
    6745:	74 40                	je     6787 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x9b>
	  for (_CharT& __c : _M_local_buf)
    6747:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    674b:	48 83 c0 10          	add    $0x10,%rax
    674f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    6753:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6757:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    675b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    675f:	48 83 c0 10          	add    $0x10,%rax
    6763:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6767:	eb 14                	jmp    677d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x91>
    6769:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    676d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	    __c = _CharT();
    6771:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6775:	c6 00 00             	movb   $0x0,(%rax)
	  for (_CharT& __c : _M_local_buf)
    6778:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
    677d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6781:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    6785:	75 e2                	jne    6769 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x7d>
	return _M_local_data();
    6787:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    678b:	48 89 c7             	mov    %rax,%rdi
    678e:	e8 19 00 00 00       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    6793:	90                   	nop
	_M_set_length(0);
    6794:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6798:	be 00 00 00 00       	mov    $0x0,%esi
    679d:	48 89 c7             	mov    %rax,%rdi
    67a0:	e8 69 39 00 00       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
    67a5:	90                   	nop
    67a6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    67aa:	c9                   	leave
    67ab:	c3                   	ret

00000000000067ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data()
    67ac:	55                   	push   %rbp
    67ad:	48 89 e5             	mov    %rsp,%rbp
    67b0:	48 83 ec 10          	sub    $0x10,%rsp
    67b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    67b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67bc:	48 83 c0 10          	add    $0x10,%rax
    67c0:	48 89 c7             	mov    %rax,%rdi
    67c3:	e8 02 00 00 00       	call   67ca <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>
      }
    67c8:	c9                   	leave
    67c9:	c3                   	ret

00000000000067ca <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
    67ca:	55                   	push   %rbp
    67cb:	48 89 e5             	mov    %rsp,%rbp
    67ce:	48 83 ec 10          	sub    $0x10,%rsp
    67d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
    67d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67da:	48 89 c7             	mov    %rax,%rdi
    67dd:	e8 02 00 00 00       	call   67e4 <_ZSt9addressofIcEPT_RS0_>
    67e2:	c9                   	leave
    67e3:	c3                   	ret

00000000000067e4 <_ZSt9addressofIcEPT_RS0_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
    67e4:	55                   	push   %rbp
    67e5:	48 89 e5             	mov    %rsp,%rbp
    67e8:	48 83 ec 10          	sub    $0x10,%rsp
    67ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
    67f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67f4:	48 89 c7             	mov    %rax,%rdi
    67f7:	e8 02 00 00 00       	call   67fe <_ZSt11__addressofIcEPT_RS0_>
    67fc:	c9                   	leave
    67fd:	c3                   	ret

00000000000067fe <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    67fe:	55                   	push   %rbp
    67ff:	48 89 e5             	mov    %rsp,%rbp
    6802:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    6806:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    680a:	5d                   	pop    %rbp
    680b:	c3                   	ret

000000000000680c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
    680c:	55                   	push   %rbp
    680d:	48 89 e5             	mov    %rsp,%rbp
    6810:	48 83 ec 20          	sub    $0x20,%rsp
    6814:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6818:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    681c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    6820:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6824:	48 89 c7             	mov    %rax,%rdi
    6827:	e8 20 00 00 00       	call   684c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
    682c:	48 89 c2             	mov    %rax,%rdx
    682f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6833:	48 89 d6             	mov    %rdx,%rsi
    6836:	48 89 c7             	mov    %rax,%rdi
    6839:	e8 c2 ea ff ff       	call   5300 <_ZNSaIcEC2ERKS_@plt>
    683e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6842:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6846:	48 89 10             	mov    %rdx,(%rax)
    6849:	90                   	nop
    684a:	c9                   	leave
    684b:	c3                   	ret

000000000000684c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
    684c:	55                   	push   %rbp
    684d:	48 89 e5             	mov    %rsp,%rbp
    6850:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    6854:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6858:	5d                   	pop    %rbp
    6859:	c3                   	ret

000000000000685a <_ZNK2vk17ErrorCategoryImpl4nameEv>:
    virtual const char * name() const VULKAN_HPP_NOEXCEPT override
    685a:	55                   	push   %rbp
    685b:	48 89 e5             	mov    %rsp,%rbp
    685e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return VULKAN_HPP_NAMESPACE_STRING "::Result";
    6862:	48 8d 05 46 ce 01 00 	lea    0x1ce46(%rip),%rax        # 236af <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x77>
    }
    6869:	5d                   	pop    %rbp
    686a:	c3                   	ret
    686b:	90                   	nop

000000000000686c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei>:
    virtual std::string message( int ev ) const override
    686c:	55                   	push   %rbp
    686d:	48 89 e5             	mov    %rsp,%rbp
    6870:	41 54                	push   %r12
    6872:	53                   	push   %rbx
    6873:	48 81 ec 20 02 00 00 	sub    $0x220,%rsp
    687a:	48 89 bd e8 fd ff ff 	mov    %rdi,-0x218(%rbp)
    6881:	48 89 b5 e0 fd ff ff 	mov    %rsi,-0x220(%rbp)
    6888:	89 95 dc fd ff ff    	mov    %edx,-0x224(%rbp)
    688e:	8b 85 dc fd ff ff    	mov    -0x224(%rbp),%eax
    6894:	89 45 ec             	mov    %eax,-0x14(%rbp)
    6897:	48 8b 9d e8 fd ff ff 	mov    -0x218(%rbp),%rbx

  //=== VK_VERSION_1_0 ===

  VULKAN_HPP_INLINE std::string to_string( Result value )
  {
    switch ( value )
    689e:	81 7d ec 28 52 9f 3b 	cmpl   $0x3b9f5228,-0x14(%rbp)
    68a5:	0f 84 eb 06 00 00    	je     6f96 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x72a>
    68ab:	81 7d ec 28 52 9f 3b 	cmpl   $0x3b9f5228,-0x14(%rbp)
    68b2:	0f 8f 08 0a 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    68b8:	81 7d ec e3 e0 9e 3b 	cmpl   $0x3b9ee0e3,-0x14(%rbp)
    68bf:	0f 84 8f 09 00 00    	je     7254 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x9e8>
    68c5:	81 7d ec e3 e0 9e 3b 	cmpl   $0x3b9ee0e3,-0x14(%rbp)
    68cc:	0f 8f ee 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    68d2:	81 7d ec e2 e0 9e 3b 	cmpl   $0x3b9ee0e2,-0x14(%rbp)
    68d9:	0f 84 3f 09 00 00    	je     721e <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x9b2>
    68df:	81 7d ec e2 e0 9e 3b 	cmpl   $0x3b9ee0e2,-0x14(%rbp)
    68e6:	0f 8f d4 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    68ec:	81 7d ec e1 e0 9e 3b 	cmpl   $0x3b9ee0e1,-0x14(%rbp)
    68f3:	0f 84 ef 08 00 00    	je     71e8 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x97c>
    68f9:	81 7d ec e1 e0 9e 3b 	cmpl   $0x3b9ee0e1,-0x14(%rbp)
    6900:	0f 8f ba 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6906:	81 7d ec e0 e0 9e 3b 	cmpl   $0x3b9ee0e0,-0x14(%rbp)
    690d:	0f 84 9f 08 00 00    	je     71b2 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x946>
    6913:	81 7d ec e0 e0 9e 3b 	cmpl   $0x3b9ee0e0,-0x14(%rbp)
    691a:	0f 8f a0 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6920:	81 7d ec eb cd 9a 3b 	cmpl   $0x3b9acdeb,-0x14(%rbp)
    6927:	0f 84 0b 07 00 00    	je     7038 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x7cc>
    692d:	81 7d ec eb cd 9a 3b 	cmpl   $0x3b9acdeb,-0x14(%rbp)
    6934:	0f 8f 86 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    693a:	83 7d ec 05          	cmpl   $0x5,-0x14(%rbp)
    693e:	0f 8f 7c 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6944:	83 7d ec f3          	cmpl   $0xfffffff3,-0x14(%rbp)
    6948:	0f 8d 3d 01 00 00    	jge    6a8b <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x21f>
    694e:	81 7d ec 00 36 65 c4 	cmpl   $0xc4653600,-0x14(%rbp)
    6955:	0f 84 71 06 00 00    	je     6fcc <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x760>
    695b:	81 7d ec 00 36 65 c4 	cmpl   $0xc4653600,-0x14(%rbp)
    6962:	0f 8f 58 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6968:	81 7d ec ff 35 65 c4 	cmpl   $0xc46535ff,-0x14(%rbp)
    696f:	0f 84 8d 06 00 00    	je     7002 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x796>
    6975:	81 7d ec ff 35 65 c4 	cmpl   $0xc46535ff,-0x14(%rbp)
    697c:	0f 8f 3e 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6982:	81 7d ec 14 32 65 c4 	cmpl   $0xc4653214,-0x14(%rbp)
    6989:	0f 84 df 06 00 00    	je     706e <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x802>
    698f:	81 7d ec 14 32 65 c4 	cmpl   $0xc4653214,-0x14(%rbp)
    6996:	0f 8f 24 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    699c:	81 7d ec 47 2a 65 c4 	cmpl   $0xc4652a47,-0x14(%rbp)
    69a3:	0f 84 fb 06 00 00    	je     70a4 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x838>
    69a9:	81 7d ec 47 2a 65 c4 	cmpl   $0xc4652a47,-0x14(%rbp)
    69b0:	0f 8f 0a 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    69b6:	81 7d ec 07 0b 65 c4 	cmpl   $0xc4650b07,-0x14(%rbp)
    69bd:	0f 84 17 07 00 00    	je     70da <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x86e>
    69c3:	81 7d ec 07 0b 65 c4 	cmpl   $0xc4650b07,-0x14(%rbp)
    69ca:	0f 8f f0 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    69d0:	81 7d ec 20 07 65 c4 	cmpl   $0xc4650720,-0x14(%rbp)
    69d7:	0f 84 33 07 00 00    	je     7110 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x8a4>
    69dd:	81 7d ec 20 07 65 c4 	cmpl   $0xc4650720,-0x14(%rbp)
    69e4:	0f 8f d6 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    69ea:	81 7d ec 78 28 64 c4 	cmpl   $0xc4642878,-0x14(%rbp)
    69f1:	0f 84 c7 04 00 00    	je     6ebe <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x652>
    69f7:	81 7d ec 78 28 64 c4 	cmpl   $0xc4642878,-0x14(%rbp)
    69fe:	0f 8f bc 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a04:	81 7d ec bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x14(%rbp)
    6a0b:	0f 84 e3 04 00 00    	je     6ef4 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x688>
    6a11:	81 7d ec bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x14(%rbp)
    6a18:	0f 8f a2 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a1e:	81 7d ec d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x14(%rbp)
    6a25:	0f 84 1b 07 00 00    	je     7146 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x8da>
    6a2b:	81 7d ec d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x14(%rbp)
    6a32:	0f 8f 88 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a38:	81 7d ec 18 c1 62 c4 	cmpl   $0xc462c118,-0x14(%rbp)
    6a3f:	0f 84 e5 04 00 00    	je     6f2a <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x6be>
    6a45:	81 7d ec 18 c1 62 c4 	cmpl   $0xc462c118,-0x14(%rbp)
    6a4c:	0f 8f 6e 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a52:	81 7d ec 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x14(%rbp)
    6a59:	0f 84 1d 07 00 00    	je     717c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x910>
    6a5f:	81 7d ec 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x14(%rbp)
    6a66:	0f 8f 54 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a6c:	81 7d ec b0 0d 60 c4 	cmpl   $0xc4600db0,-0x14(%rbp)
    6a73:	0f 84 11 08 00 00    	je     728a <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa1e>
    6a79:	81 7d ec 18 4a 61 c4 	cmpl   $0xc4614a18,-0x14(%rbp)
    6a80:	0f 84 da 04 00 00    	je     6f60 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x6f4>
    6a86:	e9 35 08 00 00       	jmp    72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a8b:	8b 45 ec             	mov    -0x14(%rbp),%eax
    6a8e:	83 c0 0d             	add    $0xd,%eax
    6a91:	83 f8 12             	cmp    $0x12,%eax
    6a94:	0f 87 26 08 00 00    	ja     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a9a:	89 c0                	mov    %eax,%eax
    6a9c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    6aa3:	00 
    6aa4:	48 8d 05 45 d3 01 00 	lea    0x1d345(%rip),%rax        # 23df0 <_ZNSt8__detailL19__atomic_spin_countE+0x38c>
    6aab:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    6aae:	48 98                	cltq
    6ab0:	48 8d 15 39 d3 01 00 	lea    0x1d339(%rip),%rdx        # 23df0 <_ZNSt8__detailL19__atomic_spin_countE+0x38c>
    6ab7:	48 01 d0             	add    %rdx,%rax
    6aba:	ff e0                	jmp    *%rax
    {
      case Result::eSuccess: return "Success";
    6abc:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    6ac0:	48 89 c7             	mov    %rax,%rdi
    6ac3:	e8 e8 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6ac8:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    6acc:	48 89 c2             	mov    %rax,%rdx
    6acf:	48 8d 05 e4 cb 01 00 	lea    0x1cbe4(%rip),%rax        # 236ba <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x82>
    6ad6:	48 89 c6             	mov    %rax,%rsi
    6ad9:	48 89 df             	mov    %rbx,%rdi
    6adc:	e8 8d 35 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ae1:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    6ae5:	48 89 c7             	mov    %rax,%rdi
    6ae8:	e8 83 e7 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
      return VULKAN_HPP_NAMESPACE::to_string( static_cast<VULKAN_HPP_NAMESPACE::Result>( ev ) );
    6aed:	e9 aa 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eNotReady: return "NotReady";
    6af2:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    6af6:	48 89 c7             	mov    %rax,%rdi
    6af9:	e8 b2 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6afe:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    6b02:	48 89 c2             	mov    %rax,%rdx
    6b05:	48 8d 05 b6 cb 01 00 	lea    0x1cbb6(%rip),%rax        # 236c2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8a>
    6b0c:	48 89 c6             	mov    %rax,%rsi
    6b0f:	48 89 df             	mov    %rbx,%rdi
    6b12:	e8 57 35 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6b17:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    6b1b:	48 89 c7             	mov    %rax,%rdi
    6b1e:	e8 4d e7 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6b23:	e9 74 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eTimeout: return "Timeout";
    6b28:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    6b2c:	48 89 c7             	mov    %rax,%rdi
    6b2f:	e8 7c e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6b34:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    6b38:	48 89 c2             	mov    %rax,%rdx
    6b3b:	48 8d 05 89 cb 01 00 	lea    0x1cb89(%rip),%rax        # 236cb <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x93>
    6b42:	48 89 c6             	mov    %rax,%rsi
    6b45:	48 89 df             	mov    %rbx,%rdi
    6b48:	e8 21 35 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6b4d:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    6b51:	48 89 c7             	mov    %rax,%rdi
    6b54:	e8 17 e7 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6b59:	e9 3e 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eEventSet: return "EventSet";
    6b5e:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    6b62:	48 89 c7             	mov    %rax,%rdi
    6b65:	e8 46 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6b6a:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    6b6e:	48 89 c2             	mov    %rax,%rdx
    6b71:	48 8d 05 5b cb 01 00 	lea    0x1cb5b(%rip),%rax        # 236d3 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x9b>
    6b78:	48 89 c6             	mov    %rax,%rsi
    6b7b:	48 89 df             	mov    %rbx,%rdi
    6b7e:	e8 eb 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6b83:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    6b87:	48 89 c7             	mov    %rax,%rdi
    6b8a:	e8 e1 e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6b8f:	e9 08 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eEventReset: return "EventReset";
    6b94:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    6b98:	48 89 c7             	mov    %rax,%rdi
    6b9b:	e8 10 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6ba0:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    6ba4:	48 89 c2             	mov    %rax,%rdx
    6ba7:	48 8d 05 2e cb 01 00 	lea    0x1cb2e(%rip),%rax        # 236dc <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xa4>
    6bae:	48 89 c6             	mov    %rax,%rsi
    6bb1:	48 89 df             	mov    %rbx,%rdi
    6bb4:	e8 b5 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6bb9:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    6bbd:	48 89 c7             	mov    %rax,%rdi
    6bc0:	e8 ab e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6bc5:	e9 d2 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eIncomplete: return "Incomplete";
    6bca:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    6bce:	48 89 c7             	mov    %rax,%rdi
    6bd1:	e8 da e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6bd6:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    6bda:	48 89 c2             	mov    %rax,%rdx
    6bdd:	48 8d 05 03 cb 01 00 	lea    0x1cb03(%rip),%rax        # 236e7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xaf>
    6be4:	48 89 c6             	mov    %rax,%rsi
    6be7:	48 89 df             	mov    %rbx,%rdi
    6bea:	e8 7f 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6bef:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    6bf3:	48 89 c7             	mov    %rax,%rdi
    6bf6:	e8 75 e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6bfb:	e9 9c 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfHostMemory: return "ErrorOutOfHostMemory";
    6c00:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    6c04:	48 89 c7             	mov    %rax,%rdi
    6c07:	e8 a4 e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6c0c:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    6c10:	48 89 c2             	mov    %rax,%rdx
    6c13:	48 8d 05 d8 ca 01 00 	lea    0x1cad8(%rip),%rax        # 236f2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xba>
    6c1a:	48 89 c6             	mov    %rax,%rsi
    6c1d:	48 89 df             	mov    %rbx,%rdi
    6c20:	e8 49 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6c25:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    6c29:	48 89 c7             	mov    %rax,%rdi
    6c2c:	e8 3f e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6c31:	e9 66 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfDeviceMemory: return "ErrorOutOfDeviceMemory";
    6c36:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6c3a:	48 89 c7             	mov    %rax,%rdi
    6c3d:	e8 6e e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6c42:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6c46:	48 89 c2             	mov    %rax,%rdx
    6c49:	48 8d 05 b7 ca 01 00 	lea    0x1cab7(%rip),%rax        # 23707 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xcf>
    6c50:	48 89 c6             	mov    %rax,%rsi
    6c53:	48 89 df             	mov    %rbx,%rdi
    6c56:	e8 13 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6c5b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6c5f:	48 89 c7             	mov    %rax,%rdi
    6c62:	e8 09 e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6c67:	e9 30 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInitializationFailed: return "ErrorInitializationFailed";
    6c6c:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    6c70:	48 89 c7             	mov    %rax,%rdi
    6c73:	e8 38 e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6c78:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    6c7c:	48 89 c2             	mov    %rax,%rdx
    6c7f:	48 8d 05 98 ca 01 00 	lea    0x1ca98(%rip),%rax        # 2371e <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xe6>
    6c86:	48 89 c6             	mov    %rax,%rsi
    6c89:	48 89 df             	mov    %rbx,%rdi
    6c8c:	e8 dd 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6c91:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    6c95:	48 89 c7             	mov    %rax,%rdi
    6c98:	e8 d3 e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6c9d:	e9 fa 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorDeviceLost: return "ErrorDeviceLost";
    6ca2:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    6ca6:	48 89 c7             	mov    %rax,%rdi
    6ca9:	e8 02 e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6cae:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    6cb2:	48 89 c2             	mov    %rax,%rdx
    6cb5:	48 8d 05 7c ca 01 00 	lea    0x1ca7c(%rip),%rax        # 23738 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x100>
    6cbc:	48 89 c6             	mov    %rax,%rsi
    6cbf:	48 89 df             	mov    %rbx,%rdi
    6cc2:	e8 a7 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6cc7:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    6ccb:	48 89 c7             	mov    %rax,%rdi
    6cce:	e8 9d e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6cd3:	e9 c4 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorMemoryMapFailed: return "ErrorMemoryMapFailed";
    6cd8:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    6cdc:	48 89 c7             	mov    %rax,%rdi
    6cdf:	e8 cc e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6ce4:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    6ce8:	48 89 c2             	mov    %rax,%rdx
    6ceb:	48 8d 05 56 ca 01 00 	lea    0x1ca56(%rip),%rax        # 23748 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x110>
    6cf2:	48 89 c6             	mov    %rax,%rsi
    6cf5:	48 89 df             	mov    %rbx,%rdi
    6cf8:	e8 71 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6cfd:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    6d01:	48 89 c7             	mov    %rax,%rdi
    6d04:	e8 67 e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6d09:	e9 8e 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorLayerNotPresent: return "ErrorLayerNotPresent";
    6d0e:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    6d12:	48 89 c7             	mov    %rax,%rdi
    6d15:	e8 96 e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6d1a:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    6d1e:	48 89 c2             	mov    %rax,%rdx
    6d21:	48 8d 05 35 ca 01 00 	lea    0x1ca35(%rip),%rax        # 2375d <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x125>
    6d28:	48 89 c6             	mov    %rax,%rsi
    6d2b:	48 89 df             	mov    %rbx,%rdi
    6d2e:	e8 3b 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6d33:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    6d37:	48 89 c7             	mov    %rax,%rdi
    6d3a:	e8 31 e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6d3f:	e9 58 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorExtensionNotPresent: return "ErrorExtensionNotPresent";
    6d44:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    6d48:	48 89 c7             	mov    %rax,%rdi
    6d4b:	e8 60 e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6d50:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    6d54:	48 89 c2             	mov    %rax,%rdx
    6d57:	48 8d 05 14 ca 01 00 	lea    0x1ca14(%rip),%rax        # 23772 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x13a>
    6d5e:	48 89 c6             	mov    %rax,%rsi
    6d61:	48 89 df             	mov    %rbx,%rdi
    6d64:	e8 05 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6d69:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    6d6d:	48 89 c7             	mov    %rax,%rdi
    6d70:	e8 fb e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6d75:	e9 22 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFeatureNotPresent: return "ErrorFeatureNotPresent";
    6d7a:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    6d7e:	48 89 c7             	mov    %rax,%rdi
    6d81:	e8 2a e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6d86:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    6d8a:	48 89 c2             	mov    %rax,%rdx
    6d8d:	48 8d 05 f7 c9 01 00 	lea    0x1c9f7(%rip),%rax        # 2378b <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x153>
    6d94:	48 89 c6             	mov    %rax,%rsi
    6d97:	48 89 df             	mov    %rbx,%rdi
    6d9a:	e8 cf 32 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6d9f:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    6da3:	48 89 c7             	mov    %rax,%rdi
    6da6:	e8 c5 e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6dab:	e9 ec 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorIncompatibleDriver: return "ErrorIncompatibleDriver";
    6db0:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    6db4:	48 89 c7             	mov    %rax,%rdi
    6db7:	e8 f4 e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6dbc:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    6dc0:	48 89 c2             	mov    %rax,%rdx
    6dc3:	48 8d 05 d8 c9 01 00 	lea    0x1c9d8(%rip),%rax        # 237a2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x16a>
    6dca:	48 89 c6             	mov    %rax,%rsi
    6dcd:	48 89 df             	mov    %rbx,%rdi
    6dd0:	e8 99 32 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6dd5:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    6dd9:	48 89 c7             	mov    %rax,%rdi
    6ddc:	e8 8f e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6de1:	e9 b6 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorTooManyObjects: return "ErrorTooManyObjects";
    6de6:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6dea:	48 89 c7             	mov    %rax,%rdi
    6ded:	e8 be e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6df2:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6df6:	48 89 c2             	mov    %rax,%rdx
    6df9:	48 8d 05 ba c9 01 00 	lea    0x1c9ba(%rip),%rax        # 237ba <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x182>
    6e00:	48 89 c6             	mov    %rax,%rsi
    6e03:	48 89 df             	mov    %rbx,%rdi
    6e06:	e8 63 32 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6e0b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6e0f:	48 89 c7             	mov    %rax,%rdi
    6e12:	e8 59 e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6e17:	e9 80 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFormatNotSupported: return "ErrorFormatNotSupported";
    6e1c:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6e20:	48 89 c7             	mov    %rax,%rdi
    6e23:	e8 88 e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6e28:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6e2c:	48 89 c2             	mov    %rax,%rdx
    6e2f:	48 8d 05 98 c9 01 00 	lea    0x1c998(%rip),%rax        # 237ce <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x196>
    6e36:	48 89 c6             	mov    %rax,%rsi
    6e39:	48 89 df             	mov    %rbx,%rdi
    6e3c:	e8 2d 32 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6e41:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6e45:	48 89 c7             	mov    %rax,%rdi
    6e48:	e8 23 e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6e4d:	e9 4a 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFragmentedPool: return "ErrorFragmentedPool";
    6e52:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    6e56:	48 89 c7             	mov    %rax,%rdi
    6e59:	e8 52 e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6e5e:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    6e62:	48 89 c2             	mov    %rax,%rdx
    6e65:	48 8d 05 7a c9 01 00 	lea    0x1c97a(%rip),%rax        # 237e6 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1ae>
    6e6c:	48 89 c6             	mov    %rax,%rsi
    6e6f:	48 89 df             	mov    %rbx,%rdi
    6e72:	e8 f7 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6e77:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    6e7b:	48 89 c7             	mov    %rax,%rdi
    6e7e:	e8 ed e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6e83:	e9 14 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorUnknown: return "ErrorUnknown";
    6e88:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    6e8c:	48 89 c7             	mov    %rax,%rdi
    6e8f:	e8 1c e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6e94:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    6e98:	48 89 c2             	mov    %rax,%rdx
    6e9b:	48 8d 05 58 c9 01 00 	lea    0x1c958(%rip),%rax        # 237fa <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1c2>
    6ea2:	48 89 c6             	mov    %rax,%rsi
    6ea5:	48 89 df             	mov    %rbx,%rdi
    6ea8:	e8 c1 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ead:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    6eb1:	48 89 c7             	mov    %rax,%rdi
    6eb4:	e8 b7 e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6eb9:	e9 de 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfPoolMemory: return "ErrorOutOfPoolMemory";
    6ebe:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    6ec2:	48 89 c7             	mov    %rax,%rdi
    6ec5:	e8 e6 e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6eca:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    6ece:	48 89 c2             	mov    %rax,%rdx
    6ed1:	48 8d 05 2f c9 01 00 	lea    0x1c92f(%rip),%rax        # 23807 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1cf>
    6ed8:	48 89 c6             	mov    %rax,%rsi
    6edb:	48 89 df             	mov    %rbx,%rdi
    6ede:	e8 8b 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ee3:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    6ee7:	48 89 c7             	mov    %rax,%rdi
    6eea:	e8 81 e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6eef:	e9 a8 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInvalidExternalHandle: return "ErrorInvalidExternalHandle";
    6ef4:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    6ef8:	48 89 c7             	mov    %rax,%rdi
    6efb:	e8 b0 e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6f00:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    6f04:	48 89 c2             	mov    %rax,%rdx
    6f07:	48 8d 05 0e c9 01 00 	lea    0x1c90e(%rip),%rax        # 2381c <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1e4>
    6f0e:	48 89 c6             	mov    %rax,%rsi
    6f11:	48 89 df             	mov    %rbx,%rdi
    6f14:	e8 55 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6f19:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    6f1d:	48 89 c7             	mov    %rax,%rdi
    6f20:	e8 4b e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6f25:	e9 72 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFragmentation: return "ErrorFragmentation";
    6f2a:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    6f2e:	48 89 c7             	mov    %rax,%rdi
    6f31:	e8 7a e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6f36:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    6f3a:	48 89 c2             	mov    %rax,%rdx
    6f3d:	48 8d 05 f3 c8 01 00 	lea    0x1c8f3(%rip),%rax        # 23837 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1ff>
    6f44:	48 89 c6             	mov    %rax,%rsi
    6f47:	48 89 df             	mov    %rbx,%rdi
    6f4a:	e8 1f 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6f4f:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    6f53:	48 89 c7             	mov    %rax,%rdi
    6f56:	e8 15 e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6f5b:	e9 3c 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInvalidOpaqueCaptureAddress: return "ErrorInvalidOpaqueCaptureAddress";
    6f60:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    6f64:	48 89 c7             	mov    %rax,%rdi
    6f67:	e8 44 e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6f6c:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    6f70:	48 89 c2             	mov    %rax,%rdx
    6f73:	48 8d 05 d6 c8 01 00 	lea    0x1c8d6(%rip),%rax        # 23850 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x218>
    6f7a:	48 89 c6             	mov    %rax,%rsi
    6f7d:	48 89 df             	mov    %rbx,%rdi
    6f80:	e8 e9 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6f85:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    6f89:	48 89 c7             	mov    %rax,%rdi
    6f8c:	e8 df e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6f91:	e9 06 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::ePipelineCompileRequired: return "PipelineCompileRequired";
    6f96:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6f9a:	48 89 c7             	mov    %rax,%rdi
    6f9d:	e8 0e e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6fa2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fa6:	48 89 c2             	mov    %rax,%rdx
    6fa9:	48 8d 05 c1 c8 01 00 	lea    0x1c8c1(%rip),%rax        # 23871 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x239>
    6fb0:	48 89 c6             	mov    %rax,%rsi
    6fb3:	48 89 df             	mov    %rbx,%rdi
    6fb6:	e8 b3 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6fbb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fbf:	48 89 c7             	mov    %rax,%rdi
    6fc2:	e8 a9 e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6fc7:	e9 d0 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorSurfaceLostKHR: return "ErrorSurfaceLostKHR";
    6fcc:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    6fd0:	48 89 c7             	mov    %rax,%rdi
    6fd3:	e8 d8 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6fd8:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    6fdc:	48 89 c2             	mov    %rax,%rdx
    6fdf:	48 8d 05 a3 c8 01 00 	lea    0x1c8a3(%rip),%rax        # 23889 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x251>
    6fe6:	48 89 c6             	mov    %rax,%rsi
    6fe9:	48 89 df             	mov    %rbx,%rdi
    6fec:	e8 7d 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ff1:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    6ff5:	48 89 c7             	mov    %rax,%rdi
    6ff8:	e8 73 e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6ffd:	e9 9a 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorNativeWindowInUseKHR: return "ErrorNativeWindowInUseKHR";
    7002:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    7006:	48 89 c7             	mov    %rax,%rdi
    7009:	e8 a2 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    700e:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    7012:	48 89 c2             	mov    %rax,%rdx
    7015:	48 8d 05 81 c8 01 00 	lea    0x1c881(%rip),%rax        # 2389d <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x265>
    701c:	48 89 c6             	mov    %rax,%rsi
    701f:	48 89 df             	mov    %rbx,%rdi
    7022:	e8 47 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7027:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    702b:	48 89 c7             	mov    %rax,%rdi
    702e:	e8 3d e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7033:	e9 64 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eSuboptimalKHR: return "SuboptimalKHR";
    7038:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    703c:	48 89 c7             	mov    %rax,%rdi
    703f:	e8 6c e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7044:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    7048:	48 89 c2             	mov    %rax,%rdx
    704b:	48 8d 05 65 c8 01 00 	lea    0x1c865(%rip),%rax        # 238b7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x27f>
    7052:	48 89 c6             	mov    %rax,%rsi
    7055:	48 89 df             	mov    %rbx,%rdi
    7058:	e8 11 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    705d:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    7061:	48 89 c7             	mov    %rax,%rdi
    7064:	e8 07 e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7069:	e9 2e 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfDateKHR: return "ErrorOutOfDateKHR";
    706e:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    7072:	48 89 c7             	mov    %rax,%rdi
    7075:	e8 36 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    707a:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    707e:	48 89 c2             	mov    %rax,%rdx
    7081:	48 8d 05 3d c8 01 00 	lea    0x1c83d(%rip),%rax        # 238c5 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x28d>
    7088:	48 89 c6             	mov    %rax,%rsi
    708b:	48 89 df             	mov    %rbx,%rdi
    708e:	e8 db 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7093:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    7097:	48 89 c7             	mov    %rax,%rdi
    709a:	e8 d1 e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    709f:	e9 f8 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorIncompatibleDisplayKHR: return "ErrorIncompatibleDisplayKHR";
    70a4:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    70a8:	48 89 c7             	mov    %rax,%rdi
    70ab:	e8 00 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    70b0:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    70b4:	48 89 c2             	mov    %rax,%rdx
    70b7:	48 8d 05 19 c8 01 00 	lea    0x1c819(%rip),%rax        # 238d7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x29f>
    70be:	48 89 c6             	mov    %rax,%rsi
    70c1:	48 89 df             	mov    %rbx,%rdi
    70c4:	e8 a5 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    70c9:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    70cd:	48 89 c7             	mov    %rax,%rdi
    70d0:	e8 9b e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    70d5:	e9 c2 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorValidationFailedEXT: return "ErrorValidationFailedEXT";
    70da:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    70de:	48 89 c7             	mov    %rax,%rdi
    70e1:	e8 ca e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    70e6:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    70ea:	48 89 c2             	mov    %rax,%rdx
    70ed:	48 8d 05 ff c7 01 00 	lea    0x1c7ff(%rip),%rax        # 238f3 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2bb>
    70f4:	48 89 c6             	mov    %rax,%rsi
    70f7:	48 89 df             	mov    %rbx,%rdi
    70fa:	e8 6f 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    70ff:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    7103:	48 89 c7             	mov    %rax,%rdi
    7106:	e8 65 e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    710b:	e9 8c 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInvalidShaderNV: return "ErrorInvalidShaderNV";
    7110:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    7114:	48 89 c7             	mov    %rax,%rdi
    7117:	e8 94 e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    711c:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    7120:	48 89 c2             	mov    %rax,%rdx
    7123:	48 8d 05 e2 c7 01 00 	lea    0x1c7e2(%rip),%rax        # 2390c <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2d4>
    712a:	48 89 c6             	mov    %rax,%rsi
    712d:	48 89 df             	mov    %rbx,%rdi
    7130:	e8 39 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7135:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    7139:	48 89 c7             	mov    %rax,%rdi
    713c:	e8 2f e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7141:	e9 56 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorVideoProfileOperationNotSupportedKHR: return "ErrorVideoProfileOperationNotSupportedKHR";
      case Result::eErrorVideoProfileFormatNotSupportedKHR: return "ErrorVideoProfileFormatNotSupportedKHR";
      case Result::eErrorVideoProfileCodecNotSupportedKHR: return "ErrorVideoProfileCodecNotSupportedKHR";
      case Result::eErrorVideoStdVersionNotSupportedKHR: return "ErrorVideoStdVersionNotSupportedKHR";
#endif /*VK_ENABLE_BETA_EXTENSIONS*/
      case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: return "ErrorInvalidDrmFormatModifierPlaneLayoutEXT";
    7146:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    714a:	48 89 c7             	mov    %rax,%rdi
    714d:	e8 5e e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7152:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    7156:	48 89 c2             	mov    %rax,%rdx
    7159:	48 8d 05 c8 c7 01 00 	lea    0x1c7c8(%rip),%rax        # 23928 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2f0>
    7160:	48 89 c6             	mov    %rax,%rsi
    7163:	48 89 df             	mov    %rbx,%rdi
    7166:	e8 03 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    716b:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    716f:	48 89 c7             	mov    %rax,%rdi
    7172:	e8 f9 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7177:	e9 20 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorNotPermittedKHR: return "ErrorNotPermittedKHR";
    717c:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    7180:	48 89 c7             	mov    %rax,%rdi
    7183:	e8 28 e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7188:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    718c:	48 89 c2             	mov    %rax,%rdx
    718f:	48 8d 05 be c7 01 00 	lea    0x1c7be(%rip),%rax        # 23954 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x31c>
    7196:	48 89 c6             	mov    %rax,%rsi
    7199:	48 89 df             	mov    %rbx,%rdi
    719c:	e8 cd 2e 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    71a1:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    71a5:	48 89 c7             	mov    %rax,%rdi
    71a8:	e8 c3 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    71ad:	e9 ea 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
#if defined( VK_USE_PLATFORM_WIN32_KHR )
      case Result::eErrorFullScreenExclusiveModeLostEXT: return "ErrorFullScreenExclusiveModeLostEXT";
#endif /*VK_USE_PLATFORM_WIN32_KHR*/
      case Result::eThreadIdleKHR: return "ThreadIdleKHR";
    71b2:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    71b6:	48 89 c7             	mov    %rax,%rdi
    71b9:	e8 f2 e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    71be:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    71c2:	48 89 c2             	mov    %rax,%rdx
    71c5:	48 8d 05 9d c7 01 00 	lea    0x1c79d(%rip),%rax        # 23969 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x331>
    71cc:	48 89 c6             	mov    %rax,%rsi
    71cf:	48 89 df             	mov    %rbx,%rdi
    71d2:	e8 97 2e 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    71d7:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    71db:	48 89 c7             	mov    %rax,%rdi
    71de:	e8 8d e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    71e3:	e9 b4 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eThreadDoneKHR: return "ThreadDoneKHR";
    71e8:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    71ec:	48 89 c7             	mov    %rax,%rdi
    71ef:	e8 bc e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    71f4:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    71f8:	48 89 c2             	mov    %rax,%rdx
    71fb:	48 8d 05 75 c7 01 00 	lea    0x1c775(%rip),%rax        # 23977 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x33f>
    7202:	48 89 c6             	mov    %rax,%rsi
    7205:	48 89 df             	mov    %rbx,%rdi
    7208:	e8 61 2e 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    720d:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    7211:	48 89 c7             	mov    %rax,%rdi
    7214:	e8 57 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7219:	e9 7e 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eOperationDeferredKHR: return "OperationDeferredKHR";
    721e:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    7222:	48 89 c7             	mov    %rax,%rdi
    7225:	e8 86 e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    722a:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    722e:	48 89 c2             	mov    %rax,%rdx
    7231:	48 8d 05 4d c7 01 00 	lea    0x1c74d(%rip),%rax        # 23985 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x34d>
    7238:	48 89 c6             	mov    %rax,%rsi
    723b:	48 89 df             	mov    %rbx,%rdi
    723e:	e8 2b 2e 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7243:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    7247:	48 89 c7             	mov    %rax,%rdi
    724a:	e8 21 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    724f:	e9 48 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eOperationNotDeferredKHR: return "OperationNotDeferredKHR";
    7254:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    7258:	48 89 c7             	mov    %rax,%rdi
    725b:	e8 50 e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7260:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    7264:	48 89 c2             	mov    %rax,%rdx
    7267:	48 8d 05 2c c7 01 00 	lea    0x1c72c(%rip),%rax        # 2399a <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x362>
    726e:	48 89 c6             	mov    %rax,%rsi
    7271:	48 89 df             	mov    %rbx,%rdi
    7274:	e8 f5 2d 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7279:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    727d:	48 89 c7             	mov    %rax,%rdi
    7280:	e8 eb df ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7285:	e9 12 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorCompressionExhaustedEXT: return "ErrorCompressionExhaustedEXT";
    728a:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    728e:	48 89 c7             	mov    %rax,%rdi
    7291:	e8 1a e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7296:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    729a:	48 89 c2             	mov    %rax,%rdx
    729d:	48 8d 05 0e c7 01 00 	lea    0x1c70e(%rip),%rax        # 239b2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x37a>
    72a4:	48 89 c6             	mov    %rax,%rsi
    72a7:	48 89 df             	mov    %rbx,%rdi
    72aa:	e8 bf 2d 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    72af:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    72b3:	48 89 c7             	mov    %rax,%rdi
    72b6:	e8 b5 df ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    72bb:	e9 dc 04 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    72c0:	8b 45 ec             	mov    -0x14(%rbp),%eax
    72c3:	89 45 e8             	mov    %eax,-0x18(%rbp)
    72c6:	4c 8d 65 80          	lea    -0x80(%rbp),%r12
    std::stringstream stream;
    72ca:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    72d1:	48 89 c7             	mov    %rax,%rdi
    72d4:	e8 57 de ff ff       	call   5130 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@plt>
    stream << std::hex << value;
    72d9:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    72e0:	48 83 c0 10          	add    $0x10,%rax
    72e4:	48 8d 15 bd f3 ff ff 	lea    -0xc43(%rip),%rdx        # 66a8 <_ZSt3hexRSt8ios_base>
    72eb:	48 89 d6             	mov    %rdx,%rsi
    72ee:	48 89 c7             	mov    %rax,%rdi
    72f1:	e8 7a dd ff ff       	call   5070 <_ZNSolsEPFRSt8ios_baseS0_E@plt>
    72f6:	48 89 c2             	mov    %rax,%rdx
    72f9:	8b 45 e8             	mov    -0x18(%rbp),%eax
    72fc:	89 c6                	mov    %eax,%esi
    72fe:	48 89 d7             	mov    %rdx,%rdi
    7301:	e8 ca df ff ff       	call   52d0 <_ZNSolsEj@plt>
    return stream.str();
    7306:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    730d:	48 89 c6             	mov    %rax,%rsi
    7310:	4c 89 e7             	mov    %r12,%rdi
    7313:	e8 b8 e0 ff ff       	call   53d0 <_ZNKRSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@plt>
    7318:	90                   	nop
  }
    7319:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    7320:	48 89 c7             	mov    %rax,%rdi
    7323:	e8 38 de ff ff       	call   5160 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>
    return stream.str();
    7328:	90                   	nop
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    7329:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    732d:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    7331:	48 8d 0d 97 c6 01 00 	lea    0x1c697(%rip),%rcx        # 239cf <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x397>
    7338:	48 89 ce             	mov    %rcx,%rsi
    733b:	48 89 c7             	mov    %rax,%rdi
    733e:	e8 e1 2c 00 00       	call   a024 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
    7343:	eb 1a                	jmp    735f <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xaf3>
  }
    7345:	48 89 c3             	mov    %rax,%rbx
    7348:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    734f:	48 89 c7             	mov    %rax,%rdi
    7352:	e8 09 de ff ff       	call   5160 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>
    7357:	48 89 d8             	mov    %rbx,%rax
    735a:	e9 35 04 00 00       	jmp    7794 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf28>
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    735f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7363:	48 8d 15 70 c6 01 00 	lea    0x1c670(%rip),%rdx        # 239da <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a2>
    736a:	48 89 c6             	mov    %rax,%rsi
    736d:	48 89 df             	mov    %rbx,%rdi
    7370:	e8 e5 2d 00 00       	call   a15a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
    7375:	90                   	nop
    7376:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    737a:	48 89 c7             	mov    %rax,%rdi
    737d:	e8 56 2b 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    7382:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7386:	48 89 c7             	mov    %rax,%rdi
    7389:	e8 4a 2b 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    738e:	e9 09 04 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eSuccess: return "Success";
    7393:	48 89 c3             	mov    %rax,%rbx
    7396:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    739a:	48 89 c7             	mov    %rax,%rdi
    739d:	e8 ce de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73a2:	48 89 d8             	mov    %rbx,%rax
    73a5:	48 89 c7             	mov    %rax,%rdi
    73a8:	e8 f3 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eNotReady: return "NotReady";
    73ad:	48 89 c3             	mov    %rax,%rbx
    73b0:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    73b4:	48 89 c7             	mov    %rax,%rdi
    73b7:	e8 b4 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73bc:	48 89 d8             	mov    %rbx,%rax
    73bf:	48 89 c7             	mov    %rax,%rdi
    73c2:	e8 d9 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eTimeout: return "Timeout";
    73c7:	48 89 c3             	mov    %rax,%rbx
    73ca:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    73ce:	48 89 c7             	mov    %rax,%rdi
    73d1:	e8 9a de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73d6:	48 89 d8             	mov    %rbx,%rax
    73d9:	48 89 c7             	mov    %rax,%rdi
    73dc:	e8 bf df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eEventSet: return "EventSet";
    73e1:	48 89 c3             	mov    %rax,%rbx
    73e4:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    73e8:	48 89 c7             	mov    %rax,%rdi
    73eb:	e8 80 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73f0:	48 89 d8             	mov    %rbx,%rax
    73f3:	48 89 c7             	mov    %rax,%rdi
    73f6:	e8 a5 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eEventReset: return "EventReset";
    73fb:	48 89 c3             	mov    %rax,%rbx
    73fe:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    7402:	48 89 c7             	mov    %rax,%rdi
    7405:	e8 66 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    740a:	48 89 d8             	mov    %rbx,%rax
    740d:	48 89 c7             	mov    %rax,%rdi
    7410:	e8 8b df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eIncomplete: return "Incomplete";
    7415:	48 89 c3             	mov    %rax,%rbx
    7418:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    741c:	48 89 c7             	mov    %rax,%rdi
    741f:	e8 4c de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7424:	48 89 d8             	mov    %rbx,%rax
    7427:	48 89 c7             	mov    %rax,%rdi
    742a:	e8 71 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfHostMemory: return "ErrorOutOfHostMemory";
    742f:	48 89 c3             	mov    %rax,%rbx
    7432:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    7436:	48 89 c7             	mov    %rax,%rdi
    7439:	e8 32 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    743e:	48 89 d8             	mov    %rbx,%rax
    7441:	48 89 c7             	mov    %rax,%rdi
    7444:	e8 57 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfDeviceMemory: return "ErrorOutOfDeviceMemory";
    7449:	48 89 c3             	mov    %rax,%rbx
    744c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7450:	48 89 c7             	mov    %rax,%rdi
    7453:	e8 18 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7458:	48 89 d8             	mov    %rbx,%rax
    745b:	48 89 c7             	mov    %rax,%rdi
    745e:	e8 3d df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInitializationFailed: return "ErrorInitializationFailed";
    7463:	48 89 c3             	mov    %rax,%rbx
    7466:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    746a:	48 89 c7             	mov    %rax,%rdi
    746d:	e8 fe dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7472:	48 89 d8             	mov    %rbx,%rax
    7475:	48 89 c7             	mov    %rax,%rdi
    7478:	e8 23 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorDeviceLost: return "ErrorDeviceLost";
    747d:	48 89 c3             	mov    %rax,%rbx
    7480:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    7484:	48 89 c7             	mov    %rax,%rdi
    7487:	e8 e4 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    748c:	48 89 d8             	mov    %rbx,%rax
    748f:	48 89 c7             	mov    %rax,%rdi
    7492:	e8 09 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorMemoryMapFailed: return "ErrorMemoryMapFailed";
    7497:	48 89 c3             	mov    %rax,%rbx
    749a:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    749e:	48 89 c7             	mov    %rax,%rdi
    74a1:	e8 ca dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74a6:	48 89 d8             	mov    %rbx,%rax
    74a9:	48 89 c7             	mov    %rax,%rdi
    74ac:	e8 ef de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorLayerNotPresent: return "ErrorLayerNotPresent";
    74b1:	48 89 c3             	mov    %rax,%rbx
    74b4:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    74b8:	48 89 c7             	mov    %rax,%rdi
    74bb:	e8 b0 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74c0:	48 89 d8             	mov    %rbx,%rax
    74c3:	48 89 c7             	mov    %rax,%rdi
    74c6:	e8 d5 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorExtensionNotPresent: return "ErrorExtensionNotPresent";
    74cb:	48 89 c3             	mov    %rax,%rbx
    74ce:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    74d2:	48 89 c7             	mov    %rax,%rdi
    74d5:	e8 96 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74da:	48 89 d8             	mov    %rbx,%rax
    74dd:	48 89 c7             	mov    %rax,%rdi
    74e0:	e8 bb de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFeatureNotPresent: return "ErrorFeatureNotPresent";
    74e5:	48 89 c3             	mov    %rax,%rbx
    74e8:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    74ec:	48 89 c7             	mov    %rax,%rdi
    74ef:	e8 7c dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74f4:	48 89 d8             	mov    %rbx,%rax
    74f7:	48 89 c7             	mov    %rax,%rdi
    74fa:	e8 a1 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorIncompatibleDriver: return "ErrorIncompatibleDriver";
    74ff:	48 89 c3             	mov    %rax,%rbx
    7502:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    7506:	48 89 c7             	mov    %rax,%rdi
    7509:	e8 62 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    750e:	48 89 d8             	mov    %rbx,%rax
    7511:	48 89 c7             	mov    %rax,%rdi
    7514:	e8 87 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorTooManyObjects: return "ErrorTooManyObjects";
    7519:	48 89 c3             	mov    %rax,%rbx
    751c:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    7520:	48 89 c7             	mov    %rax,%rdi
    7523:	e8 48 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7528:	48 89 d8             	mov    %rbx,%rax
    752b:	48 89 c7             	mov    %rax,%rdi
    752e:	e8 6d de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFormatNotSupported: return "ErrorFormatNotSupported";
    7533:	48 89 c3             	mov    %rax,%rbx
    7536:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    753a:	48 89 c7             	mov    %rax,%rdi
    753d:	e8 2e dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7542:	48 89 d8             	mov    %rbx,%rax
    7545:	48 89 c7             	mov    %rax,%rdi
    7548:	e8 53 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFragmentedPool: return "ErrorFragmentedPool";
    754d:	48 89 c3             	mov    %rax,%rbx
    7550:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    7554:	48 89 c7             	mov    %rax,%rdi
    7557:	e8 14 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    755c:	48 89 d8             	mov    %rbx,%rax
    755f:	48 89 c7             	mov    %rax,%rdi
    7562:	e8 39 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorUnknown: return "ErrorUnknown";
    7567:	48 89 c3             	mov    %rax,%rbx
    756a:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    756e:	48 89 c7             	mov    %rax,%rdi
    7571:	e8 fa dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7576:	48 89 d8             	mov    %rbx,%rax
    7579:	48 89 c7             	mov    %rax,%rdi
    757c:	e8 1f de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfPoolMemory: return "ErrorOutOfPoolMemory";
    7581:	48 89 c3             	mov    %rax,%rbx
    7584:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    7588:	48 89 c7             	mov    %rax,%rdi
    758b:	e8 e0 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7590:	48 89 d8             	mov    %rbx,%rax
    7593:	48 89 c7             	mov    %rax,%rdi
    7596:	e8 05 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidExternalHandle: return "ErrorInvalidExternalHandle";
    759b:	48 89 c3             	mov    %rax,%rbx
    759e:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    75a2:	48 89 c7             	mov    %rax,%rdi
    75a5:	e8 c6 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75aa:	48 89 d8             	mov    %rbx,%rax
    75ad:	48 89 c7             	mov    %rax,%rdi
    75b0:	e8 eb dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFragmentation: return "ErrorFragmentation";
    75b5:	48 89 c3             	mov    %rax,%rbx
    75b8:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    75bc:	48 89 c7             	mov    %rax,%rdi
    75bf:	e8 ac dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75c4:	48 89 d8             	mov    %rbx,%rax
    75c7:	48 89 c7             	mov    %rax,%rdi
    75ca:	e8 d1 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidOpaqueCaptureAddress: return "ErrorInvalidOpaqueCaptureAddress";
    75cf:	48 89 c3             	mov    %rax,%rbx
    75d2:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    75d6:	48 89 c7             	mov    %rax,%rdi
    75d9:	e8 92 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75de:	48 89 d8             	mov    %rbx,%rax
    75e1:	48 89 c7             	mov    %rax,%rdi
    75e4:	e8 b7 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::ePipelineCompileRequired: return "PipelineCompileRequired";
    75e9:	48 89 c3             	mov    %rax,%rbx
    75ec:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    75f0:	48 89 c7             	mov    %rax,%rdi
    75f3:	e8 78 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75f8:	48 89 d8             	mov    %rbx,%rax
    75fb:	48 89 c7             	mov    %rax,%rdi
    75fe:	e8 9d dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorSurfaceLostKHR: return "ErrorSurfaceLostKHR";
    7603:	48 89 c3             	mov    %rax,%rbx
    7606:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    760a:	48 89 c7             	mov    %rax,%rdi
    760d:	e8 5e dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7612:	48 89 d8             	mov    %rbx,%rax
    7615:	48 89 c7             	mov    %rax,%rdi
    7618:	e8 83 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorNativeWindowInUseKHR: return "ErrorNativeWindowInUseKHR";
    761d:	48 89 c3             	mov    %rax,%rbx
    7620:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    7624:	48 89 c7             	mov    %rax,%rdi
    7627:	e8 44 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    762c:	48 89 d8             	mov    %rbx,%rax
    762f:	48 89 c7             	mov    %rax,%rdi
    7632:	e8 69 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eSuboptimalKHR: return "SuboptimalKHR";
    7637:	48 89 c3             	mov    %rax,%rbx
    763a:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    763e:	48 89 c7             	mov    %rax,%rdi
    7641:	e8 2a dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7646:	48 89 d8             	mov    %rbx,%rax
    7649:	48 89 c7             	mov    %rax,%rdi
    764c:	e8 4f dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfDateKHR: return "ErrorOutOfDateKHR";
    7651:	48 89 c3             	mov    %rax,%rbx
    7654:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    7658:	48 89 c7             	mov    %rax,%rdi
    765b:	e8 10 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7660:	48 89 d8             	mov    %rbx,%rax
    7663:	48 89 c7             	mov    %rax,%rdi
    7666:	e8 35 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorIncompatibleDisplayKHR: return "ErrorIncompatibleDisplayKHR";
    766b:	48 89 c3             	mov    %rax,%rbx
    766e:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    7672:	48 89 c7             	mov    %rax,%rdi
    7675:	e8 f6 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    767a:	48 89 d8             	mov    %rbx,%rax
    767d:	48 89 c7             	mov    %rax,%rdi
    7680:	e8 1b dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorValidationFailedEXT: return "ErrorValidationFailedEXT";
    7685:	48 89 c3             	mov    %rax,%rbx
    7688:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    768c:	48 89 c7             	mov    %rax,%rdi
    768f:	e8 dc db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7694:	48 89 d8             	mov    %rbx,%rax
    7697:	48 89 c7             	mov    %rax,%rdi
    769a:	e8 01 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidShaderNV: return "ErrorInvalidShaderNV";
    769f:	48 89 c3             	mov    %rax,%rbx
    76a2:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    76a6:	48 89 c7             	mov    %rax,%rdi
    76a9:	e8 c2 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76ae:	48 89 d8             	mov    %rbx,%rax
    76b1:	48 89 c7             	mov    %rax,%rdi
    76b4:	e8 e7 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: return "ErrorInvalidDrmFormatModifierPlaneLayoutEXT";
    76b9:	48 89 c3             	mov    %rax,%rbx
    76bc:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    76c0:	48 89 c7             	mov    %rax,%rdi
    76c3:	e8 a8 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76c8:	48 89 d8             	mov    %rbx,%rax
    76cb:	48 89 c7             	mov    %rax,%rdi
    76ce:	e8 cd dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorNotPermittedKHR: return "ErrorNotPermittedKHR";
    76d3:	48 89 c3             	mov    %rax,%rbx
    76d6:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    76da:	48 89 c7             	mov    %rax,%rdi
    76dd:	e8 8e db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76e2:	48 89 d8             	mov    %rbx,%rax
    76e5:	48 89 c7             	mov    %rax,%rdi
    76e8:	e8 b3 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eThreadIdleKHR: return "ThreadIdleKHR";
    76ed:	48 89 c3             	mov    %rax,%rbx
    76f0:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    76f4:	48 89 c7             	mov    %rax,%rdi
    76f7:	e8 74 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76fc:	48 89 d8             	mov    %rbx,%rax
    76ff:	48 89 c7             	mov    %rax,%rdi
    7702:	e8 99 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eThreadDoneKHR: return "ThreadDoneKHR";
    7707:	48 89 c3             	mov    %rax,%rbx
    770a:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    770e:	48 89 c7             	mov    %rax,%rdi
    7711:	e8 5a db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7716:	48 89 d8             	mov    %rbx,%rax
    7719:	48 89 c7             	mov    %rax,%rdi
    771c:	e8 7f dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eOperationDeferredKHR: return "OperationDeferredKHR";
    7721:	48 89 c3             	mov    %rax,%rbx
    7724:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    7728:	48 89 c7             	mov    %rax,%rdi
    772b:	e8 40 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7730:	48 89 d8             	mov    %rbx,%rax
    7733:	48 89 c7             	mov    %rax,%rdi
    7736:	e8 65 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eOperationNotDeferredKHR: return "OperationNotDeferredKHR";
    773b:	48 89 c3             	mov    %rax,%rbx
    773e:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    7742:	48 89 c7             	mov    %rax,%rdi
    7745:	e8 26 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    774a:	48 89 d8             	mov    %rbx,%rax
    774d:	48 89 c7             	mov    %rax,%rdi
    7750:	e8 4b dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorCompressionExhaustedEXT: return "ErrorCompressionExhaustedEXT";
    7755:	48 89 c3             	mov    %rax,%rbx
    7758:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    775c:	48 89 c7             	mov    %rax,%rdi
    775f:	e8 0c db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7764:	48 89 d8             	mov    %rbx,%rax
    7767:	48 89 c7             	mov    %rax,%rdi
    776a:	e8 31 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    776f:	48 89 c3             	mov    %rax,%rbx
    7772:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7776:	48 89 c7             	mov    %rax,%rdi
    7779:	e8 5a 27 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    777e:	eb 03                	jmp    7783 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf17>
    7780:	48 89 c3             	mov    %rax,%rbx
    7783:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7787:	48 89 c7             	mov    %rax,%rdi
    778a:	e8 49 27 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    778f:	48 89 d8             	mov    %rbx,%rax
    7792:	eb 00                	jmp    7794 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf28>
    7794:	48 89 c7             	mov    %rax,%rdi
    7797:	e8 04 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
    }
    779c:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
    77a3:	48 81 c4 20 02 00 00 	add    $0x220,%rsp
    77aa:	5b                   	pop    %rbx
    77ab:	41 5c                	pop    %r12
    77ad:	5d                   	pop    %rbp
    77ae:	c3                   	ret
    77af:	90                   	nop

00000000000077b0 <_ZN2vk5ErrorC1Ev>:
    Error() VULKAN_HPP_NOEXCEPT                = default;
    77b0:	55                   	push   %rbp
    77b1:	48 89 e5             	mov    %rsp,%rbp
    77b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77b8:	48 8d 15 69 02 03 00 	lea    0x30269(%rip),%rdx        # 37a28 <_ZTVN2vk5ErrorE+0x10>
    77bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77c3:	48 89 10             	mov    %rdx,(%rax)
    77c6:	90                   	nop
    77c7:	5d                   	pop    %rbp
    77c8:	c3                   	ret
    77c9:	90                   	nop

00000000000077ca <_ZN2vk5ErrorD1Ev>:
    virtual ~Error() VULKAN_HPP_NOEXCEPT       = default;
    77ca:	55                   	push   %rbp
    77cb:	48 89 e5             	mov    %rsp,%rbp
    77ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77d2:	48 8d 15 4f 02 03 00 	lea    0x3024f(%rip),%rdx        # 37a28 <_ZTVN2vk5ErrorE+0x10>
    77d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77dd:	48 89 10             	mov    %rdx,(%rax)
    77e0:	90                   	nop
    77e1:	5d                   	pop    %rbp
    77e2:	c3                   	ret
    77e3:	90                   	nop

00000000000077e4 <_ZN2vk5ErrorD0Ev>:
    77e4:	55                   	push   %rbp
    77e5:	48 89 e5             	mov    %rsp,%rbp
    77e8:	48 83 ec 10          	sub    $0x10,%rsp
    77ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77f4:	48 89 c7             	mov    %rax,%rdi
    77f7:	e8 ce ff ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    77fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7800:	be 08 00 00 00       	mov    $0x8,%esi
    7805:	48 89 c7             	mov    %rax,%rdi
    7808:	e8 23 da ff ff       	call   5230 <_ZdlPvm@plt>
    780d:	c9                   	leave
    780e:	c3                   	ret
    780f:	90                   	nop

0000000000007810 <_ZN2vk11SystemErrorC1ESt10error_code>:
    SystemError( std::error_code ec ) : Error(), std::system_error( ec ) {}
    7810:	55                   	push   %rbp
    7811:	48 89 e5             	mov    %rsp,%rbp
    7814:	53                   	push   %rbx
    7815:	48 83 ec 28          	sub    $0x28,%rsp
    7819:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    781d:	48 89 d1             	mov    %rdx,%rcx
    7820:	48 89 f0             	mov    %rsi,%rax
    7823:	48 89 fa             	mov    %rdi,%rdx
    7826:	48 89 ca             	mov    %rcx,%rdx
    7829:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    782d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7831:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7835:	48 89 c7             	mov    %rax,%rdi
    7838:	e8 73 ff ff ff       	call   77b0 <_ZN2vk5ErrorC1Ev>
    783d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7841:	48 8d 48 08          	lea    0x8(%rax),%rcx
    7845:	8b 55 d0             	mov    -0x30(%rbp),%edx
    7848:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    784c:	89 d6                	mov    %edx,%esi
    784e:	48 89 c2             	mov    %rax,%rdx
    7851:	48 89 cf             	mov    %rcx,%rdi
    7854:	e8 4d eb ff ff       	call   63a6 <_ZNSt12system_errorC1ESt10error_code>
    7859:	48 8d 15 b0 00 03 00 	lea    0x300b0(%rip),%rdx        # 37910 <_ZTVN2vk11SystemErrorE+0x10>
    7860:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7864:	48 89 10             	mov    %rdx,(%rax)
    7867:	48 8d 15 ca 00 03 00 	lea    0x300ca(%rip),%rdx        # 37938 <_ZTVN2vk11SystemErrorE+0x38>
    786e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7872:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7876:	eb 1a                	jmp    7892 <_ZN2vk11SystemErrorC1ESt10error_code+0x82>
    7878:	48 89 c3             	mov    %rax,%rbx
    787b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    787f:	48 89 c7             	mov    %rax,%rdi
    7882:	e8 43 ff ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    7887:	48 89 d8             	mov    %rbx,%rax
    788a:	48 89 c7             	mov    %rax,%rdi
    788d:	e8 0e db ff ff       	call   53a0 <_Unwind_Resume@plt>
    7892:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7896:	c9                   	leave
    7897:	c3                   	ret

0000000000007898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>:
    SystemError( std::error_code ec, char const * what ) : Error(), std::system_error( ec, what ) {}
    7898:	55                   	push   %rbp
    7899:	48 89 e5             	mov    %rsp,%rbp
    789c:	53                   	push   %rbx
    789d:	48 83 ec 28          	sub    $0x28,%rsp
    78a1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    78a5:	89 f0                	mov    %esi,%eax
    78a7:	48 89 d6             	mov    %rdx,%rsi
    78aa:	48 89 f2             	mov    %rsi,%rdx
    78ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    78b1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    78b5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    78b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78bd:	48 89 c7             	mov    %rax,%rdi
    78c0:	e8 eb fe ff ff       	call   77b0 <_ZN2vk5ErrorC1Ev>
    78c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78c9:	48 8d 78 08          	lea    0x8(%rax),%rdi
    78cd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    78d1:	8b 55 d0             	mov    -0x30(%rbp),%edx
    78d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    78d8:	89 d6                	mov    %edx,%esi
    78da:	48 89 c2             	mov    %rax,%rdx
    78dd:	e8 5c eb ff ff       	call   643e <_ZNSt12system_errorC1ESt10error_codePKc>
    78e2:	48 8d 15 27 00 03 00 	lea    0x30027(%rip),%rdx        # 37910 <_ZTVN2vk11SystemErrorE+0x10>
    78e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78ed:	48 89 10             	mov    %rdx,(%rax)
    78f0:	48 8d 15 41 00 03 00 	lea    0x30041(%rip),%rdx        # 37938 <_ZTVN2vk11SystemErrorE+0x38>
    78f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78fb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    78ff:	eb 1a                	jmp    791b <_ZN2vk11SystemErrorC1ESt10error_codePKc+0x83>
    7901:	48 89 c3             	mov    %rax,%rbx
    7904:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7908:	48 89 c7             	mov    %rax,%rdi
    790b:	e8 ba fe ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    7910:	48 89 d8             	mov    %rbx,%rax
    7913:	48 89 c7             	mov    %rax,%rdi
    7916:	e8 85 da ff ff       	call   53a0 <_Unwind_Resume@plt>
    791b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    791f:	c9                   	leave
    7920:	c3                   	ret
    7921:	90                   	nop

0000000000007922 <_ZNK2vk11SystemError4whatEv>:
    virtual const char * what() const VULKAN_HPP_NOEXCEPT
    7922:	55                   	push   %rbp
    7923:	48 89 e5             	mov    %rsp,%rbp
    7926:	48 83 ec 10          	sub    $0x10,%rsp
    792a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return std::system_error::what();
    792e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7932:	48 83 c0 08          	add    $0x8,%rax
    7936:	48 89 c7             	mov    %rax,%rdi
    7939:	e8 a2 d9 ff ff       	call   52e0 <_ZNKSt13runtime_error4whatEv@plt>
    }
    793e:	c9                   	leave
    793f:	c3                   	ret

0000000000007940 <_ZThn8_NK2vk11SystemError4whatEv>:
    virtual const char * what() const VULKAN_HPP_NOEXCEPT
    7940:	48 83 ef 08          	sub    $0x8,%rdi
    7944:	eb dc                	jmp    7922 <_ZNK2vk11SystemError4whatEv>

0000000000007946 <_ZN2vk11SystemErrorD1Ev>:
  class SystemError
    7946:	55                   	push   %rbp
    7947:	48 89 e5             	mov    %rsp,%rbp
    794a:	48 83 ec 10          	sub    $0x10,%rsp
    794e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7952:	48 8d 15 b7 ff 02 00 	lea    0x2ffb7(%rip),%rdx        # 37910 <_ZTVN2vk11SystemErrorE+0x10>
    7959:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    795d:	48 89 10             	mov    %rdx,(%rax)
    7960:	48 8d 15 d1 ff 02 00 	lea    0x2ffd1(%rip),%rdx        # 37938 <_ZTVN2vk11SystemErrorE+0x38>
    7967:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    796b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    796f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7973:	48 83 c0 08          	add    $0x8,%rax
    7977:	48 89 c7             	mov    %rax,%rdi
    797a:	e8 41 d8 ff ff       	call   51c0 <_ZNSt12system_errorD2Ev@plt>
    797f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7983:	48 89 c7             	mov    %rax,%rdi
    7986:	e8 3f fe ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    798b:	90                   	nop
    798c:	c9                   	leave
    798d:	c3                   	ret

000000000000798e <_ZThn8_N2vk11SystemErrorD1Ev>:
    798e:	48 83 ef 08          	sub    $0x8,%rdi
    7992:	eb b2                	jmp    7946 <_ZN2vk11SystemErrorD1Ev>

0000000000007994 <_ZN2vk11SystemErrorD0Ev>:
    7994:	55                   	push   %rbp
    7995:	48 89 e5             	mov    %rsp,%rbp
    7998:	48 83 ec 10          	sub    $0x10,%rsp
    799c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    79a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    79a4:	48 89 c7             	mov    %rax,%rdi
    79a7:	e8 9a ff ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    79ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    79b0:	be 28 00 00 00       	mov    $0x28,%esi
    79b5:	48 89 c7             	mov    %rax,%rdi
    79b8:	e8 73 d8 ff ff       	call   5230 <_ZdlPvm@plt>
    79bd:	c9                   	leave
    79be:	c3                   	ret

00000000000079bf <_ZThn8_N2vk11SystemErrorD0Ev>:
    79bf:	48 83 ef 08          	sub    $0x8,%rdi
    79c3:	eb cf                	jmp    7994 <_ZN2vk11SystemErrorD0Ev>
    79c5:	90                   	nop

00000000000079c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>:
    OutOfHostMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfHostMemory ), message ) {}
    79c6:	55                   	push   %rbp
    79c7:	48 89 e5             	mov    %rsp,%rbp
    79ca:	53                   	push   %rbx
    79cb:	48 83 ec 38          	sub    $0x38,%rsp
    79cf:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    79d3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    79d7:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    79db:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    79e2:	0f b6 05 6f 09 03 00 	movzbl 0x3096f(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    79e9:	84 c0                	test   %al,%al
    79eb:	0f 94 c0             	sete   %al
    79ee:	84 c0                	test   %al,%al
    79f0:	74 4a                	je     7a3c <_ZN2vk20OutOfHostMemoryErrorC1EPKc+0x76>
    79f2:	48 8d 05 5f 09 03 00 	lea    0x3095f(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    79f9:	48 89 c7             	mov    %rax,%rdi
    79fc:	e8 bf d9 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7a01:	85 c0                	test   %eax,%eax
    7a03:	0f 95 c0             	setne  %al
    7a06:	84 c0                	test   %al,%al
    7a08:	74 32                	je     7a3c <_ZN2vk20OutOfHostMemoryErrorC1EPKc+0x76>
    7a0a:	48 8d 05 e7 07 03 00 	lea    0x307e7(%rip),%rax        # 381f8 <__dso_handle>
    7a11:	48 89 c2             	mov    %rax,%rdx
    7a14:	48 8d 05 e5 07 03 00 	lea    0x307e5(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    7a1b:	48 89 c6             	mov    %rax,%rsi
    7a1e:	48 8d 05 ff 4b 00 00 	lea    0x4bff(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7a25:	48 89 c7             	mov    %rax,%rdi
    7a28:	e8 a3 d7 ff ff       	call   51d0 <__cxa_atexit@plt>
    7a2d:	48 8d 05 24 09 03 00 	lea    0x30924(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7a34:	48 89 c7             	mov    %rax,%rdi
    7a37:	e8 c4 d6 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7a3c:	48 8d 15 bd 07 03 00 	lea    0x307bd(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7a43:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7a46:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a4a:	89 ce                	mov    %ecx,%esi
    7a4c:	48 89 c7             	mov    %rax,%rdi
    7a4f:	e8 b4 e8 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7a54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7a58:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfHostMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfHostMemory ), message ) {}
    7a5c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7a60:	48 89 c6             	mov    %rax,%rsi
    7a63:	48 89 d7             	mov    %rdx,%rdi
    7a66:	48 89 d0             	mov    %rdx,%rax
    7a69:	48 89 c2             	mov    %rax,%rdx
    7a6c:	48 89 df             	mov    %rbx,%rdi
    7a6f:	e8 24 fe ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7a74:	48 8d 15 45 fe 02 00 	lea    0x2fe45(%rip),%rdx        # 378c0 <_ZTVN2vk20OutOfHostMemoryErrorE+0x10>
    7a7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a7f:	48 89 10             	mov    %rdx,(%rax)
    7a82:	48 8d 15 5f fe 02 00 	lea    0x2fe5f(%rip),%rdx        # 378e8 <_ZTVN2vk20OutOfHostMemoryErrorE+0x38>
    7a89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a8d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7a91:	90                   	nop
    7a92:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7a96:	c9                   	leave
    7a97:	c3                   	ret

0000000000007a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>:
    OutOfDeviceMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDeviceMemory ), message ) {}
    7a98:	55                   	push   %rbp
    7a99:	48 89 e5             	mov    %rsp,%rbp
    7a9c:	53                   	push   %rbx
    7a9d:	48 83 ec 38          	sub    $0x38,%rsp
    7aa1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7aa5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7aa9:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7aad:	c7 45 ec fe ff ff ff 	movl   $0xfffffffe,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7ab4:	0f b6 05 9d 08 03 00 	movzbl 0x3089d(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7abb:	84 c0                	test   %al,%al
    7abd:	0f 94 c0             	sete   %al
    7ac0:	84 c0                	test   %al,%al
    7ac2:	74 4a                	je     7b0e <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc+0x76>
    7ac4:	48 8d 05 8d 08 03 00 	lea    0x3088d(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7acb:	48 89 c7             	mov    %rax,%rdi
    7ace:	e8 ed d8 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7ad3:	85 c0                	test   %eax,%eax
    7ad5:	0f 95 c0             	setne  %al
    7ad8:	84 c0                	test   %al,%al
    7ada:	74 32                	je     7b0e <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc+0x76>
    7adc:	48 8d 05 15 07 03 00 	lea    0x30715(%rip),%rax        # 381f8 <__dso_handle>
    7ae3:	48 89 c2             	mov    %rax,%rdx
    7ae6:	48 8d 05 13 07 03 00 	lea    0x30713(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    7aed:	48 89 c6             	mov    %rax,%rsi
    7af0:	48 8d 05 2d 4b 00 00 	lea    0x4b2d(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7af7:	48 89 c7             	mov    %rax,%rdi
    7afa:	e8 d1 d6 ff ff       	call   51d0 <__cxa_atexit@plt>
    7aff:	48 8d 05 52 08 03 00 	lea    0x30852(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7b06:	48 89 c7             	mov    %rax,%rdi
    7b09:	e8 f2 d5 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7b0e:	48 8d 15 eb 06 03 00 	lea    0x306eb(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7b15:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7b18:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7b1c:	89 ce                	mov    %ecx,%esi
    7b1e:	48 89 c7             	mov    %rax,%rdi
    7b21:	e8 e2 e7 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7b26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7b2a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfDeviceMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDeviceMemory ), message ) {}
    7b2e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7b32:	48 89 c6             	mov    %rax,%rsi
    7b35:	48 89 d7             	mov    %rdx,%rdi
    7b38:	48 89 d0             	mov    %rdx,%rax
    7b3b:	48 89 c2             	mov    %rax,%rdx
    7b3e:	48 89 df             	mov    %rbx,%rdi
    7b41:	e8 52 fd ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7b46:	48 8d 15 23 fd 02 00 	lea    0x2fd23(%rip),%rdx        # 37870 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x10>
    7b4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b51:	48 89 10             	mov    %rdx,(%rax)
    7b54:	48 8d 15 3d fd 02 00 	lea    0x2fd3d(%rip),%rdx        # 37898 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x38>
    7b5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b5f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7b63:	90                   	nop
    7b64:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7b68:	c9                   	leave
    7b69:	c3                   	ret

0000000000007b6a <_ZN2vk25InitializationFailedErrorC1EPKc>:
    InitializationFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorInitializationFailed ), message ) {}
    7b6a:	55                   	push   %rbp
    7b6b:	48 89 e5             	mov    %rsp,%rbp
    7b6e:	53                   	push   %rbx
    7b6f:	48 83 ec 38          	sub    $0x38,%rsp
    7b73:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7b77:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7b7b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7b7f:	c7 45 ec fd ff ff ff 	movl   $0xfffffffd,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7b86:	0f b6 05 cb 07 03 00 	movzbl 0x307cb(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7b8d:	84 c0                	test   %al,%al
    7b8f:	0f 94 c0             	sete   %al
    7b92:	84 c0                	test   %al,%al
    7b94:	74 4a                	je     7be0 <_ZN2vk25InitializationFailedErrorC1EPKc+0x76>
    7b96:	48 8d 05 bb 07 03 00 	lea    0x307bb(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7b9d:	48 89 c7             	mov    %rax,%rdi
    7ba0:	e8 1b d8 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7ba5:	85 c0                	test   %eax,%eax
    7ba7:	0f 95 c0             	setne  %al
    7baa:	84 c0                	test   %al,%al
    7bac:	74 32                	je     7be0 <_ZN2vk25InitializationFailedErrorC1EPKc+0x76>
    7bae:	48 8d 05 43 06 03 00 	lea    0x30643(%rip),%rax        # 381f8 <__dso_handle>
    7bb5:	48 89 c2             	mov    %rax,%rdx
    7bb8:	48 8d 05 41 06 03 00 	lea    0x30641(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    7bbf:	48 89 c6             	mov    %rax,%rsi
    7bc2:	48 8d 05 5b 4a 00 00 	lea    0x4a5b(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7bc9:	48 89 c7             	mov    %rax,%rdi
    7bcc:	e8 ff d5 ff ff       	call   51d0 <__cxa_atexit@plt>
    7bd1:	48 8d 05 80 07 03 00 	lea    0x30780(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7bd8:	48 89 c7             	mov    %rax,%rdi
    7bdb:	e8 20 d5 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7be0:	48 8d 15 19 06 03 00 	lea    0x30619(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7be7:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7bea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7bee:	89 ce                	mov    %ecx,%esi
    7bf0:	48 89 c7             	mov    %rax,%rdi
    7bf3:	e8 10 e7 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7bf8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7bfc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InitializationFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorInitializationFailed ), message ) {}
    7c00:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7c04:	48 89 c6             	mov    %rax,%rsi
    7c07:	48 89 d7             	mov    %rdx,%rdi
    7c0a:	48 89 d0             	mov    %rdx,%rax
    7c0d:	48 89 c2             	mov    %rax,%rdx
    7c10:	48 89 df             	mov    %rbx,%rdi
    7c13:	e8 80 fc ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7c18:	48 8d 15 01 fc 02 00 	lea    0x2fc01(%rip),%rdx        # 37820 <_ZTVN2vk25InitializationFailedErrorE+0x10>
    7c1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7c23:	48 89 10             	mov    %rdx,(%rax)
    7c26:	48 8d 15 1b fc 02 00 	lea    0x2fc1b(%rip),%rdx        # 37848 <_ZTVN2vk25InitializationFailedErrorE+0x38>
    7c2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7c31:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7c35:	90                   	nop
    7c36:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7c3a:	c9                   	leave
    7c3b:	c3                   	ret

0000000000007c3c <_ZN2vk15DeviceLostErrorC1EPKc>:
    DeviceLostError( char const * message ) : SystemError( make_error_code( Result::eErrorDeviceLost ), message ) {}
    7c3c:	55                   	push   %rbp
    7c3d:	48 89 e5             	mov    %rsp,%rbp
    7c40:	53                   	push   %rbx
    7c41:	48 83 ec 38          	sub    $0x38,%rsp
    7c45:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7c49:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7c4d:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7c51:	c7 45 ec fc ff ff ff 	movl   $0xfffffffc,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7c58:	0f b6 05 f9 06 03 00 	movzbl 0x306f9(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7c5f:	84 c0                	test   %al,%al
    7c61:	0f 94 c0             	sete   %al
    7c64:	84 c0                	test   %al,%al
    7c66:	74 4a                	je     7cb2 <_ZN2vk15DeviceLostErrorC1EPKc+0x76>
    7c68:	48 8d 05 e9 06 03 00 	lea    0x306e9(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7c6f:	48 89 c7             	mov    %rax,%rdi
    7c72:	e8 49 d7 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7c77:	85 c0                	test   %eax,%eax
    7c79:	0f 95 c0             	setne  %al
    7c7c:	84 c0                	test   %al,%al
    7c7e:	74 32                	je     7cb2 <_ZN2vk15DeviceLostErrorC1EPKc+0x76>
    7c80:	48 8d 05 71 05 03 00 	lea    0x30571(%rip),%rax        # 381f8 <__dso_handle>
    7c87:	48 89 c2             	mov    %rax,%rdx
    7c8a:	48 8d 05 6f 05 03 00 	lea    0x3056f(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    7c91:	48 89 c6             	mov    %rax,%rsi
    7c94:	48 8d 05 89 49 00 00 	lea    0x4989(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7c9b:	48 89 c7             	mov    %rax,%rdi
    7c9e:	e8 2d d5 ff ff       	call   51d0 <__cxa_atexit@plt>
    7ca3:	48 8d 05 ae 06 03 00 	lea    0x306ae(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7caa:	48 89 c7             	mov    %rax,%rdi
    7cad:	e8 4e d4 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7cb2:	48 8d 15 47 05 03 00 	lea    0x30547(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7cb9:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7cbc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7cc0:	89 ce                	mov    %ecx,%esi
    7cc2:	48 89 c7             	mov    %rax,%rdi
    7cc5:	e8 3e e6 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7cca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7cce:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    DeviceLostError( char const * message ) : SystemError( make_error_code( Result::eErrorDeviceLost ), message ) {}
    7cd2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7cd6:	48 89 c6             	mov    %rax,%rsi
    7cd9:	48 89 d7             	mov    %rdx,%rdi
    7cdc:	48 89 d0             	mov    %rdx,%rax
    7cdf:	48 89 c2             	mov    %rax,%rdx
    7ce2:	48 89 df             	mov    %rbx,%rdi
    7ce5:	e8 ae fb ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7cea:	48 8d 15 df fa 02 00 	lea    0x2fadf(%rip),%rdx        # 377d0 <_ZTVN2vk15DeviceLostErrorE+0x10>
    7cf1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7cf5:	48 89 10             	mov    %rdx,(%rax)
    7cf8:	48 8d 15 f9 fa 02 00 	lea    0x2faf9(%rip),%rdx        # 377f8 <_ZTVN2vk15DeviceLostErrorE+0x38>
    7cff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7d03:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7d07:	90                   	nop
    7d08:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7d0c:	c9                   	leave
    7d0d:	c3                   	ret

0000000000007d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>:
    MemoryMapFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorMemoryMapFailed ), message ) {}
    7d0e:	55                   	push   %rbp
    7d0f:	48 89 e5             	mov    %rsp,%rbp
    7d12:	53                   	push   %rbx
    7d13:	48 83 ec 38          	sub    $0x38,%rsp
    7d17:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7d1b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7d1f:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7d23:	c7 45 ec fb ff ff ff 	movl   $0xfffffffb,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7d2a:	0f b6 05 27 06 03 00 	movzbl 0x30627(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7d31:	84 c0                	test   %al,%al
    7d33:	0f 94 c0             	sete   %al
    7d36:	84 c0                	test   %al,%al
    7d38:	74 4a                	je     7d84 <_ZN2vk20MemoryMapFailedErrorC1EPKc+0x76>
    7d3a:	48 8d 05 17 06 03 00 	lea    0x30617(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7d41:	48 89 c7             	mov    %rax,%rdi
    7d44:	e8 77 d6 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7d49:	85 c0                	test   %eax,%eax
    7d4b:	0f 95 c0             	setne  %al
    7d4e:	84 c0                	test   %al,%al
    7d50:	74 32                	je     7d84 <_ZN2vk20MemoryMapFailedErrorC1EPKc+0x76>
    7d52:	48 8d 05 9f 04 03 00 	lea    0x3049f(%rip),%rax        # 381f8 <__dso_handle>
    7d59:	48 89 c2             	mov    %rax,%rdx
    7d5c:	48 8d 05 9d 04 03 00 	lea    0x3049d(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    7d63:	48 89 c6             	mov    %rax,%rsi
    7d66:	48 8d 05 b7 48 00 00 	lea    0x48b7(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7d6d:	48 89 c7             	mov    %rax,%rdi
    7d70:	e8 5b d4 ff ff       	call   51d0 <__cxa_atexit@plt>
    7d75:	48 8d 05 dc 05 03 00 	lea    0x305dc(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7d7c:	48 89 c7             	mov    %rax,%rdi
    7d7f:	e8 7c d3 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7d84:	48 8d 15 75 04 03 00 	lea    0x30475(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7d8b:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7d8e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7d92:	89 ce                	mov    %ecx,%esi
    7d94:	48 89 c7             	mov    %rax,%rdi
    7d97:	e8 6c e5 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7d9c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7da0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    MemoryMapFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorMemoryMapFailed ), message ) {}
    7da4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7da8:	48 89 c6             	mov    %rax,%rsi
    7dab:	48 89 d7             	mov    %rdx,%rdi
    7dae:	48 89 d0             	mov    %rdx,%rax
    7db1:	48 89 c2             	mov    %rax,%rdx
    7db4:	48 89 df             	mov    %rbx,%rdi
    7db7:	e8 dc fa ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7dbc:	48 8d 15 bd f9 02 00 	lea    0x2f9bd(%rip),%rdx        # 37780 <_ZTVN2vk20MemoryMapFailedErrorE+0x10>
    7dc3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7dc7:	48 89 10             	mov    %rdx,(%rax)
    7dca:	48 8d 15 d7 f9 02 00 	lea    0x2f9d7(%rip),%rdx        # 377a8 <_ZTVN2vk20MemoryMapFailedErrorE+0x38>
    7dd1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7dd5:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7dd9:	90                   	nop
    7dda:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7dde:	c9                   	leave
    7ddf:	c3                   	ret

0000000000007de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>:
    LayerNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorLayerNotPresent ), message ) {}
    7de0:	55                   	push   %rbp
    7de1:	48 89 e5             	mov    %rsp,%rbp
    7de4:	53                   	push   %rbx
    7de5:	48 83 ec 38          	sub    $0x38,%rsp
    7de9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7ded:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7df1:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7df5:	c7 45 ec fa ff ff ff 	movl   $0xfffffffa,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7dfc:	0f b6 05 55 05 03 00 	movzbl 0x30555(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7e03:	84 c0                	test   %al,%al
    7e05:	0f 94 c0             	sete   %al
    7e08:	84 c0                	test   %al,%al
    7e0a:	74 4a                	je     7e56 <_ZN2vk20LayerNotPresentErrorC1EPKc+0x76>
    7e0c:	48 8d 05 45 05 03 00 	lea    0x30545(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7e13:	48 89 c7             	mov    %rax,%rdi
    7e16:	e8 a5 d5 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7e1b:	85 c0                	test   %eax,%eax
    7e1d:	0f 95 c0             	setne  %al
    7e20:	84 c0                	test   %al,%al
    7e22:	74 32                	je     7e56 <_ZN2vk20LayerNotPresentErrorC1EPKc+0x76>
    7e24:	48 8d 05 cd 03 03 00 	lea    0x303cd(%rip),%rax        # 381f8 <__dso_handle>
    7e2b:	48 89 c2             	mov    %rax,%rdx
    7e2e:	48 8d 05 cb 03 03 00 	lea    0x303cb(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    7e35:	48 89 c6             	mov    %rax,%rsi
    7e38:	48 8d 05 e5 47 00 00 	lea    0x47e5(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7e3f:	48 89 c7             	mov    %rax,%rdi
    7e42:	e8 89 d3 ff ff       	call   51d0 <__cxa_atexit@plt>
    7e47:	48 8d 05 0a 05 03 00 	lea    0x3050a(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7e4e:	48 89 c7             	mov    %rax,%rdi
    7e51:	e8 aa d2 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7e56:	48 8d 15 a3 03 03 00 	lea    0x303a3(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7e5d:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7e60:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7e64:	89 ce                	mov    %ecx,%esi
    7e66:	48 89 c7             	mov    %rax,%rdi
    7e69:	e8 9a e4 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7e6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7e72:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    LayerNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorLayerNotPresent ), message ) {}
    7e76:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7e7a:	48 89 c6             	mov    %rax,%rsi
    7e7d:	48 89 d7             	mov    %rdx,%rdi
    7e80:	48 89 d0             	mov    %rdx,%rax
    7e83:	48 89 c2             	mov    %rax,%rdx
    7e86:	48 89 df             	mov    %rbx,%rdi
    7e89:	e8 0a fa ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7e8e:	48 8d 15 9b f8 02 00 	lea    0x2f89b(%rip),%rdx        # 37730 <_ZTVN2vk20LayerNotPresentErrorE+0x10>
    7e95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7e99:	48 89 10             	mov    %rdx,(%rax)
    7e9c:	48 8d 15 b5 f8 02 00 	lea    0x2f8b5(%rip),%rdx        # 37758 <_ZTVN2vk20LayerNotPresentErrorE+0x38>
    7ea3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7ea7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7eab:	90                   	nop
    7eac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7eb0:	c9                   	leave
    7eb1:	c3                   	ret

0000000000007eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>:
    ExtensionNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorExtensionNotPresent ), message ) {}
    7eb2:	55                   	push   %rbp
    7eb3:	48 89 e5             	mov    %rsp,%rbp
    7eb6:	53                   	push   %rbx
    7eb7:	48 83 ec 38          	sub    $0x38,%rsp
    7ebb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7ebf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7ec3:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7ec7:	c7 45 ec f9 ff ff ff 	movl   $0xfffffff9,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7ece:	0f b6 05 83 04 03 00 	movzbl 0x30483(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7ed5:	84 c0                	test   %al,%al
    7ed7:	0f 94 c0             	sete   %al
    7eda:	84 c0                	test   %al,%al
    7edc:	74 4a                	je     7f28 <_ZN2vk24ExtensionNotPresentErrorC1EPKc+0x76>
    7ede:	48 8d 05 73 04 03 00 	lea    0x30473(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7ee5:	48 89 c7             	mov    %rax,%rdi
    7ee8:	e8 d3 d4 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7eed:	85 c0                	test   %eax,%eax
    7eef:	0f 95 c0             	setne  %al
    7ef2:	84 c0                	test   %al,%al
    7ef4:	74 32                	je     7f28 <_ZN2vk24ExtensionNotPresentErrorC1EPKc+0x76>
    7ef6:	48 8d 05 fb 02 03 00 	lea    0x302fb(%rip),%rax        # 381f8 <__dso_handle>
    7efd:	48 89 c2             	mov    %rax,%rdx
    7f00:	48 8d 05 f9 02 03 00 	lea    0x302f9(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    7f07:	48 89 c6             	mov    %rax,%rsi
    7f0a:	48 8d 05 13 47 00 00 	lea    0x4713(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7f11:	48 89 c7             	mov    %rax,%rdi
    7f14:	e8 b7 d2 ff ff       	call   51d0 <__cxa_atexit@plt>
    7f19:	48 8d 05 38 04 03 00 	lea    0x30438(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7f20:	48 89 c7             	mov    %rax,%rdi
    7f23:	e8 d8 d1 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7f28:	48 8d 15 d1 02 03 00 	lea    0x302d1(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7f2f:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7f32:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7f36:	89 ce                	mov    %ecx,%esi
    7f38:	48 89 c7             	mov    %rax,%rdi
    7f3b:	e8 c8 e3 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7f40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7f44:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ExtensionNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorExtensionNotPresent ), message ) {}
    7f48:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7f4c:	48 89 c6             	mov    %rax,%rsi
    7f4f:	48 89 d7             	mov    %rdx,%rdi
    7f52:	48 89 d0             	mov    %rdx,%rax
    7f55:	48 89 c2             	mov    %rax,%rdx
    7f58:	48 89 df             	mov    %rbx,%rdi
    7f5b:	e8 38 f9 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7f60:	48 8d 15 79 f7 02 00 	lea    0x2f779(%rip),%rdx        # 376e0 <_ZTVN2vk24ExtensionNotPresentErrorE+0x10>
    7f67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7f6b:	48 89 10             	mov    %rdx,(%rax)
    7f6e:	48 8d 15 93 f7 02 00 	lea    0x2f793(%rip),%rdx        # 37708 <_ZTVN2vk24ExtensionNotPresentErrorE+0x38>
    7f75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7f79:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7f7d:	90                   	nop
    7f7e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7f82:	c9                   	leave
    7f83:	c3                   	ret

0000000000007f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>:
    FeatureNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorFeatureNotPresent ), message ) {}
    7f84:	55                   	push   %rbp
    7f85:	48 89 e5             	mov    %rsp,%rbp
    7f88:	53                   	push   %rbx
    7f89:	48 83 ec 38          	sub    $0x38,%rsp
    7f8d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7f91:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7f95:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7f99:	c7 45 ec f8 ff ff ff 	movl   $0xfffffff8,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7fa0:	0f b6 05 b1 03 03 00 	movzbl 0x303b1(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7fa7:	84 c0                	test   %al,%al
    7fa9:	0f 94 c0             	sete   %al
    7fac:	84 c0                	test   %al,%al
    7fae:	74 4a                	je     7ffa <_ZN2vk22FeatureNotPresentErrorC1EPKc+0x76>
    7fb0:	48 8d 05 a1 03 03 00 	lea    0x303a1(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7fb7:	48 89 c7             	mov    %rax,%rdi
    7fba:	e8 01 d4 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7fbf:	85 c0                	test   %eax,%eax
    7fc1:	0f 95 c0             	setne  %al
    7fc4:	84 c0                	test   %al,%al
    7fc6:	74 32                	je     7ffa <_ZN2vk22FeatureNotPresentErrorC1EPKc+0x76>
    7fc8:	48 8d 05 29 02 03 00 	lea    0x30229(%rip),%rax        # 381f8 <__dso_handle>
    7fcf:	48 89 c2             	mov    %rax,%rdx
    7fd2:	48 8d 05 27 02 03 00 	lea    0x30227(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    7fd9:	48 89 c6             	mov    %rax,%rsi
    7fdc:	48 8d 05 41 46 00 00 	lea    0x4641(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7fe3:	48 89 c7             	mov    %rax,%rdi
    7fe6:	e8 e5 d1 ff ff       	call   51d0 <__cxa_atexit@plt>
    7feb:	48 8d 05 66 03 03 00 	lea    0x30366(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7ff2:	48 89 c7             	mov    %rax,%rdi
    7ff5:	e8 06 d1 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7ffa:	48 8d 15 ff 01 03 00 	lea    0x301ff(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8001:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8004:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8008:	89 ce                	mov    %ecx,%esi
    800a:	48 89 c7             	mov    %rax,%rdi
    800d:	e8 f6 e2 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8012:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8016:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FeatureNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorFeatureNotPresent ), message ) {}
    801a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    801e:	48 89 c6             	mov    %rax,%rsi
    8021:	48 89 d7             	mov    %rdx,%rdi
    8024:	48 89 d0             	mov    %rdx,%rax
    8027:	48 89 c2             	mov    %rax,%rdx
    802a:	48 89 df             	mov    %rbx,%rdi
    802d:	e8 66 f8 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8032:	48 8d 15 57 f6 02 00 	lea    0x2f657(%rip),%rdx        # 37690 <_ZTVN2vk22FeatureNotPresentErrorE+0x10>
    8039:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    803d:	48 89 10             	mov    %rdx,(%rax)
    8040:	48 8d 15 71 f6 02 00 	lea    0x2f671(%rip),%rdx        # 376b8 <_ZTVN2vk22FeatureNotPresentErrorE+0x38>
    8047:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    804b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    804f:	90                   	nop
    8050:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8054:	c9                   	leave
    8055:	c3                   	ret

0000000000008056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>:
    IncompatibleDriverError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDriver ), message ) {}
    8056:	55                   	push   %rbp
    8057:	48 89 e5             	mov    %rsp,%rbp
    805a:	53                   	push   %rbx
    805b:	48 83 ec 38          	sub    $0x38,%rsp
    805f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8063:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8067:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    806b:	c7 45 ec f7 ff ff ff 	movl   $0xfffffff7,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8072:	0f b6 05 df 02 03 00 	movzbl 0x302df(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8079:	84 c0                	test   %al,%al
    807b:	0f 94 c0             	sete   %al
    807e:	84 c0                	test   %al,%al
    8080:	74 4a                	je     80cc <_ZN2vk23IncompatibleDriverErrorC1EPKc+0x76>
    8082:	48 8d 05 cf 02 03 00 	lea    0x302cf(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8089:	48 89 c7             	mov    %rax,%rdi
    808c:	e8 2f d3 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8091:	85 c0                	test   %eax,%eax
    8093:	0f 95 c0             	setne  %al
    8096:	84 c0                	test   %al,%al
    8098:	74 32                	je     80cc <_ZN2vk23IncompatibleDriverErrorC1EPKc+0x76>
    809a:	48 8d 05 57 01 03 00 	lea    0x30157(%rip),%rax        # 381f8 <__dso_handle>
    80a1:	48 89 c2             	mov    %rax,%rdx
    80a4:	48 8d 05 55 01 03 00 	lea    0x30155(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    80ab:	48 89 c6             	mov    %rax,%rsi
    80ae:	48 8d 05 6f 45 00 00 	lea    0x456f(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    80b5:	48 89 c7             	mov    %rax,%rdi
    80b8:	e8 13 d1 ff ff       	call   51d0 <__cxa_atexit@plt>
    80bd:	48 8d 05 94 02 03 00 	lea    0x30294(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    80c4:	48 89 c7             	mov    %rax,%rdi
    80c7:	e8 34 d0 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    80cc:	48 8d 15 2d 01 03 00 	lea    0x3012d(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    80d3:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    80d6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    80da:	89 ce                	mov    %ecx,%esi
    80dc:	48 89 c7             	mov    %rax,%rdi
    80df:	e8 24 e2 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    80e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    80e8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    IncompatibleDriverError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDriver ), message ) {}
    80ec:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    80f0:	48 89 c6             	mov    %rax,%rsi
    80f3:	48 89 d7             	mov    %rdx,%rdi
    80f6:	48 89 d0             	mov    %rdx,%rax
    80f9:	48 89 c2             	mov    %rax,%rdx
    80fc:	48 89 df             	mov    %rbx,%rdi
    80ff:	e8 94 f7 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8104:	48 8d 15 35 f5 02 00 	lea    0x2f535(%rip),%rdx        # 37640 <_ZTVN2vk23IncompatibleDriverErrorE+0x10>
    810b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    810f:	48 89 10             	mov    %rdx,(%rax)
    8112:	48 8d 15 4f f5 02 00 	lea    0x2f54f(%rip),%rdx        # 37668 <_ZTVN2vk23IncompatibleDriverErrorE+0x38>
    8119:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    811d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8121:	90                   	nop
    8122:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8126:	c9                   	leave
    8127:	c3                   	ret

0000000000008128 <_ZN2vk19TooManyObjectsErrorC1EPKc>:
    TooManyObjectsError( char const * message ) : SystemError( make_error_code( Result::eErrorTooManyObjects ), message ) {}
    8128:	55                   	push   %rbp
    8129:	48 89 e5             	mov    %rsp,%rbp
    812c:	53                   	push   %rbx
    812d:	48 83 ec 38          	sub    $0x38,%rsp
    8131:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8135:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8139:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    813d:	c7 45 ec f6 ff ff ff 	movl   $0xfffffff6,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8144:	0f b6 05 0d 02 03 00 	movzbl 0x3020d(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    814b:	84 c0                	test   %al,%al
    814d:	0f 94 c0             	sete   %al
    8150:	84 c0                	test   %al,%al
    8152:	74 4a                	je     819e <_ZN2vk19TooManyObjectsErrorC1EPKc+0x76>
    8154:	48 8d 05 fd 01 03 00 	lea    0x301fd(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    815b:	48 89 c7             	mov    %rax,%rdi
    815e:	e8 5d d2 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8163:	85 c0                	test   %eax,%eax
    8165:	0f 95 c0             	setne  %al
    8168:	84 c0                	test   %al,%al
    816a:	74 32                	je     819e <_ZN2vk19TooManyObjectsErrorC1EPKc+0x76>
    816c:	48 8d 05 85 00 03 00 	lea    0x30085(%rip),%rax        # 381f8 <__dso_handle>
    8173:	48 89 c2             	mov    %rax,%rdx
    8176:	48 8d 05 83 00 03 00 	lea    0x30083(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    817d:	48 89 c6             	mov    %rax,%rsi
    8180:	48 8d 05 9d 44 00 00 	lea    0x449d(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8187:	48 89 c7             	mov    %rax,%rdi
    818a:	e8 41 d0 ff ff       	call   51d0 <__cxa_atexit@plt>
    818f:	48 8d 05 c2 01 03 00 	lea    0x301c2(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8196:	48 89 c7             	mov    %rax,%rdi
    8199:	e8 62 cf ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    819e:	48 8d 15 5b 00 03 00 	lea    0x3005b(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    81a5:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    81a8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    81ac:	89 ce                	mov    %ecx,%esi
    81ae:	48 89 c7             	mov    %rax,%rdi
    81b1:	e8 52 e1 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    81b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    81ba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    TooManyObjectsError( char const * message ) : SystemError( make_error_code( Result::eErrorTooManyObjects ), message ) {}
    81be:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    81c2:	48 89 c6             	mov    %rax,%rsi
    81c5:	48 89 d7             	mov    %rdx,%rdi
    81c8:	48 89 d0             	mov    %rdx,%rax
    81cb:	48 89 c2             	mov    %rax,%rdx
    81ce:	48 89 df             	mov    %rbx,%rdi
    81d1:	e8 c2 f6 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    81d6:	48 8d 15 13 f4 02 00 	lea    0x2f413(%rip),%rdx        # 375f0 <_ZTVN2vk19TooManyObjectsErrorE+0x10>
    81dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    81e1:	48 89 10             	mov    %rdx,(%rax)
    81e4:	48 8d 15 2d f4 02 00 	lea    0x2f42d(%rip),%rdx        # 37618 <_ZTVN2vk19TooManyObjectsErrorE+0x38>
    81eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    81ef:	48 89 50 08          	mov    %rdx,0x8(%rax)
    81f3:	90                   	nop
    81f4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    81f8:	c9                   	leave
    81f9:	c3                   	ret

00000000000081fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>:
    FormatNotSupportedError( char const * message ) : SystemError( make_error_code( Result::eErrorFormatNotSupported ), message ) {}
    81fa:	55                   	push   %rbp
    81fb:	48 89 e5             	mov    %rsp,%rbp
    81fe:	53                   	push   %rbx
    81ff:	48 83 ec 38          	sub    $0x38,%rsp
    8203:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8207:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    820b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    820f:	c7 45 ec f5 ff ff ff 	movl   $0xfffffff5,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8216:	0f b6 05 3b 01 03 00 	movzbl 0x3013b(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    821d:	84 c0                	test   %al,%al
    821f:	0f 94 c0             	sete   %al
    8222:	84 c0                	test   %al,%al
    8224:	74 4a                	je     8270 <_ZN2vk23FormatNotSupportedErrorC1EPKc+0x76>
    8226:	48 8d 05 2b 01 03 00 	lea    0x3012b(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    822d:	48 89 c7             	mov    %rax,%rdi
    8230:	e8 8b d1 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8235:	85 c0                	test   %eax,%eax
    8237:	0f 95 c0             	setne  %al
    823a:	84 c0                	test   %al,%al
    823c:	74 32                	je     8270 <_ZN2vk23FormatNotSupportedErrorC1EPKc+0x76>
    823e:	48 8d 05 b3 ff 02 00 	lea    0x2ffb3(%rip),%rax        # 381f8 <__dso_handle>
    8245:	48 89 c2             	mov    %rax,%rdx
    8248:	48 8d 05 b1 ff 02 00 	lea    0x2ffb1(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    824f:	48 89 c6             	mov    %rax,%rsi
    8252:	48 8d 05 cb 43 00 00 	lea    0x43cb(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8259:	48 89 c7             	mov    %rax,%rdi
    825c:	e8 6f cf ff ff       	call   51d0 <__cxa_atexit@plt>
    8261:	48 8d 05 f0 00 03 00 	lea    0x300f0(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8268:	48 89 c7             	mov    %rax,%rdi
    826b:	e8 90 ce ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8270:	48 8d 15 89 ff 02 00 	lea    0x2ff89(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8277:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    827a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    827e:	89 ce                	mov    %ecx,%esi
    8280:	48 89 c7             	mov    %rax,%rdi
    8283:	e8 80 e0 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8288:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    828c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FormatNotSupportedError( char const * message ) : SystemError( make_error_code( Result::eErrorFormatNotSupported ), message ) {}
    8290:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8294:	48 89 c6             	mov    %rax,%rsi
    8297:	48 89 d7             	mov    %rdx,%rdi
    829a:	48 89 d0             	mov    %rdx,%rax
    829d:	48 89 c2             	mov    %rax,%rdx
    82a0:	48 89 df             	mov    %rbx,%rdi
    82a3:	e8 f0 f5 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    82a8:	48 8d 15 f1 f2 02 00 	lea    0x2f2f1(%rip),%rdx        # 375a0 <_ZTVN2vk23FormatNotSupportedErrorE+0x10>
    82af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    82b3:	48 89 10             	mov    %rdx,(%rax)
    82b6:	48 8d 15 0b f3 02 00 	lea    0x2f30b(%rip),%rdx        # 375c8 <_ZTVN2vk23FormatNotSupportedErrorE+0x38>
    82bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    82c1:	48 89 50 08          	mov    %rdx,0x8(%rax)
    82c5:	90                   	nop
    82c6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    82ca:	c9                   	leave
    82cb:	c3                   	ret

00000000000082cc <_ZN2vk19FragmentedPoolErrorC1EPKc>:
    FragmentedPoolError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentedPool ), message ) {}
    82cc:	55                   	push   %rbp
    82cd:	48 89 e5             	mov    %rsp,%rbp
    82d0:	53                   	push   %rbx
    82d1:	48 83 ec 38          	sub    $0x38,%rsp
    82d5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    82d9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    82dd:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    82e1:	c7 45 ec f4 ff ff ff 	movl   $0xfffffff4,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    82e8:	0f b6 05 69 00 03 00 	movzbl 0x30069(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    82ef:	84 c0                	test   %al,%al
    82f1:	0f 94 c0             	sete   %al
    82f4:	84 c0                	test   %al,%al
    82f6:	74 4a                	je     8342 <_ZN2vk19FragmentedPoolErrorC1EPKc+0x76>
    82f8:	48 8d 05 59 00 03 00 	lea    0x30059(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    82ff:	48 89 c7             	mov    %rax,%rdi
    8302:	e8 b9 d0 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8307:	85 c0                	test   %eax,%eax
    8309:	0f 95 c0             	setne  %al
    830c:	84 c0                	test   %al,%al
    830e:	74 32                	je     8342 <_ZN2vk19FragmentedPoolErrorC1EPKc+0x76>
    8310:	48 8d 05 e1 fe 02 00 	lea    0x2fee1(%rip),%rax        # 381f8 <__dso_handle>
    8317:	48 89 c2             	mov    %rax,%rdx
    831a:	48 8d 05 df fe 02 00 	lea    0x2fedf(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    8321:	48 89 c6             	mov    %rax,%rsi
    8324:	48 8d 05 f9 42 00 00 	lea    0x42f9(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    832b:	48 89 c7             	mov    %rax,%rdi
    832e:	e8 9d ce ff ff       	call   51d0 <__cxa_atexit@plt>
    8333:	48 8d 05 1e 00 03 00 	lea    0x3001e(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    833a:	48 89 c7             	mov    %rax,%rdi
    833d:	e8 be cd ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8342:	48 8d 15 b7 fe 02 00 	lea    0x2feb7(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8349:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    834c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8350:	89 ce                	mov    %ecx,%esi
    8352:	48 89 c7             	mov    %rax,%rdi
    8355:	e8 ae df ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    835a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    835e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FragmentedPoolError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentedPool ), message ) {}
    8362:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8366:	48 89 c6             	mov    %rax,%rsi
    8369:	48 89 d7             	mov    %rdx,%rdi
    836c:	48 89 d0             	mov    %rdx,%rax
    836f:	48 89 c2             	mov    %rax,%rdx
    8372:	48 89 df             	mov    %rbx,%rdi
    8375:	e8 1e f5 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    837a:	48 8d 15 cf f1 02 00 	lea    0x2f1cf(%rip),%rdx        # 37550 <_ZTVN2vk19FragmentedPoolErrorE+0x10>
    8381:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8385:	48 89 10             	mov    %rdx,(%rax)
    8388:	48 8d 15 e9 f1 02 00 	lea    0x2f1e9(%rip),%rdx        # 37578 <_ZTVN2vk19FragmentedPoolErrorE+0x38>
    838f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8393:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8397:	90                   	nop
    8398:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    839c:	c9                   	leave
    839d:	c3                   	ret

000000000000839e <_ZN2vk12UnknownErrorC1EPKc>:
    UnknownError( char const * message ) : SystemError( make_error_code( Result::eErrorUnknown ), message ) {}
    839e:	55                   	push   %rbp
    839f:	48 89 e5             	mov    %rsp,%rbp
    83a2:	53                   	push   %rbx
    83a3:	48 83 ec 38          	sub    $0x38,%rsp
    83a7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    83ab:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    83af:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    83b3:	c7 45 ec f3 ff ff ff 	movl   $0xfffffff3,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    83ba:	0f b6 05 97 ff 02 00 	movzbl 0x2ff97(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    83c1:	84 c0                	test   %al,%al
    83c3:	0f 94 c0             	sete   %al
    83c6:	84 c0                	test   %al,%al
    83c8:	74 4a                	je     8414 <_ZN2vk12UnknownErrorC1EPKc+0x76>
    83ca:	48 8d 05 87 ff 02 00 	lea    0x2ff87(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    83d1:	48 89 c7             	mov    %rax,%rdi
    83d4:	e8 e7 cf ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    83d9:	85 c0                	test   %eax,%eax
    83db:	0f 95 c0             	setne  %al
    83de:	84 c0                	test   %al,%al
    83e0:	74 32                	je     8414 <_ZN2vk12UnknownErrorC1EPKc+0x76>
    83e2:	48 8d 05 0f fe 02 00 	lea    0x2fe0f(%rip),%rax        # 381f8 <__dso_handle>
    83e9:	48 89 c2             	mov    %rax,%rdx
    83ec:	48 8d 05 0d fe 02 00 	lea    0x2fe0d(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    83f3:	48 89 c6             	mov    %rax,%rsi
    83f6:	48 8d 05 27 42 00 00 	lea    0x4227(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    83fd:	48 89 c7             	mov    %rax,%rdi
    8400:	e8 cb cd ff ff       	call   51d0 <__cxa_atexit@plt>
    8405:	48 8d 05 4c ff 02 00 	lea    0x2ff4c(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    840c:	48 89 c7             	mov    %rax,%rdi
    840f:	e8 ec cc ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8414:	48 8d 15 e5 fd 02 00 	lea    0x2fde5(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    841b:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    841e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8422:	89 ce                	mov    %ecx,%esi
    8424:	48 89 c7             	mov    %rax,%rdi
    8427:	e8 dc de ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    842c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8430:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    UnknownError( char const * message ) : SystemError( make_error_code( Result::eErrorUnknown ), message ) {}
    8434:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8438:	48 89 c6             	mov    %rax,%rsi
    843b:	48 89 d7             	mov    %rdx,%rdi
    843e:	48 89 d0             	mov    %rdx,%rax
    8441:	48 89 c2             	mov    %rax,%rdx
    8444:	48 89 df             	mov    %rbx,%rdi
    8447:	e8 4c f4 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    844c:	48 8d 15 ad f0 02 00 	lea    0x2f0ad(%rip),%rdx        # 37500 <_ZTVN2vk12UnknownErrorE+0x10>
    8453:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8457:	48 89 10             	mov    %rdx,(%rax)
    845a:	48 8d 15 c7 f0 02 00 	lea    0x2f0c7(%rip),%rdx        # 37528 <_ZTVN2vk12UnknownErrorE+0x38>
    8461:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8465:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8469:	90                   	nop
    846a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    846e:	c9                   	leave
    846f:	c3                   	ret

0000000000008470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>:
    OutOfPoolMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfPoolMemory ), message ) {}
    8470:	55                   	push   %rbp
    8471:	48 89 e5             	mov    %rsp,%rbp
    8474:	53                   	push   %rbx
    8475:	48 83 ec 38          	sub    $0x38,%rsp
    8479:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    847d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8481:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8485:	c7 45 ec 78 28 64 c4 	movl   $0xc4642878,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    848c:	0f b6 05 c5 fe 02 00 	movzbl 0x2fec5(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8493:	84 c0                	test   %al,%al
    8495:	0f 94 c0             	sete   %al
    8498:	84 c0                	test   %al,%al
    849a:	74 4a                	je     84e6 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc+0x76>
    849c:	48 8d 05 b5 fe 02 00 	lea    0x2feb5(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    84a3:	48 89 c7             	mov    %rax,%rdi
    84a6:	e8 15 cf ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    84ab:	85 c0                	test   %eax,%eax
    84ad:	0f 95 c0             	setne  %al
    84b0:	84 c0                	test   %al,%al
    84b2:	74 32                	je     84e6 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc+0x76>
    84b4:	48 8d 05 3d fd 02 00 	lea    0x2fd3d(%rip),%rax        # 381f8 <__dso_handle>
    84bb:	48 89 c2             	mov    %rax,%rdx
    84be:	48 8d 05 3b fd 02 00 	lea    0x2fd3b(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    84c5:	48 89 c6             	mov    %rax,%rsi
    84c8:	48 8d 05 55 41 00 00 	lea    0x4155(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    84cf:	48 89 c7             	mov    %rax,%rdi
    84d2:	e8 f9 cc ff ff       	call   51d0 <__cxa_atexit@plt>
    84d7:	48 8d 05 7a fe 02 00 	lea    0x2fe7a(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    84de:	48 89 c7             	mov    %rax,%rdi
    84e1:	e8 1a cc ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    84e6:	48 8d 15 13 fd 02 00 	lea    0x2fd13(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    84ed:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    84f0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    84f4:	89 ce                	mov    %ecx,%esi
    84f6:	48 89 c7             	mov    %rax,%rdi
    84f9:	e8 0a de ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    84fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8502:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfPoolMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfPoolMemory ), message ) {}
    8506:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    850a:	48 89 c6             	mov    %rax,%rsi
    850d:	48 89 d7             	mov    %rdx,%rdi
    8510:	48 89 d0             	mov    %rdx,%rax
    8513:	48 89 c2             	mov    %rax,%rdx
    8516:	48 89 df             	mov    %rbx,%rdi
    8519:	e8 7a f3 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    851e:	48 8d 15 8b ef 02 00 	lea    0x2ef8b(%rip),%rdx        # 374b0 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x10>
    8525:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8529:	48 89 10             	mov    %rdx,(%rax)
    852c:	48 8d 15 a5 ef 02 00 	lea    0x2efa5(%rip),%rdx        # 374d8 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x38>
    8533:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8537:	48 89 50 08          	mov    %rdx,0x8(%rax)
    853b:	90                   	nop
    853c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8540:	c9                   	leave
    8541:	c3                   	ret

0000000000008542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>:
    InvalidExternalHandleError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidExternalHandle ), message ) {}
    8542:	55                   	push   %rbp
    8543:	48 89 e5             	mov    %rsp,%rbp
    8546:	53                   	push   %rbx
    8547:	48 83 ec 38          	sub    $0x38,%rsp
    854b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    854f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8553:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8557:	c7 45 ec bd 1c 64 c4 	movl   $0xc4641cbd,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    855e:	0f b6 05 f3 fd 02 00 	movzbl 0x2fdf3(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8565:	84 c0                	test   %al,%al
    8567:	0f 94 c0             	sete   %al
    856a:	84 c0                	test   %al,%al
    856c:	74 4a                	je     85b8 <_ZN2vk26InvalidExternalHandleErrorC1EPKc+0x76>
    856e:	48 8d 05 e3 fd 02 00 	lea    0x2fde3(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8575:	48 89 c7             	mov    %rax,%rdi
    8578:	e8 43 ce ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    857d:	85 c0                	test   %eax,%eax
    857f:	0f 95 c0             	setne  %al
    8582:	84 c0                	test   %al,%al
    8584:	74 32                	je     85b8 <_ZN2vk26InvalidExternalHandleErrorC1EPKc+0x76>
    8586:	48 8d 05 6b fc 02 00 	lea    0x2fc6b(%rip),%rax        # 381f8 <__dso_handle>
    858d:	48 89 c2             	mov    %rax,%rdx
    8590:	48 8d 05 69 fc 02 00 	lea    0x2fc69(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    8597:	48 89 c6             	mov    %rax,%rsi
    859a:	48 8d 05 83 40 00 00 	lea    0x4083(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    85a1:	48 89 c7             	mov    %rax,%rdi
    85a4:	e8 27 cc ff ff       	call   51d0 <__cxa_atexit@plt>
    85a9:	48 8d 05 a8 fd 02 00 	lea    0x2fda8(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    85b0:	48 89 c7             	mov    %rax,%rdi
    85b3:	e8 48 cb ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    85b8:	48 8d 15 41 fc 02 00 	lea    0x2fc41(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    85bf:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    85c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    85c6:	89 ce                	mov    %ecx,%esi
    85c8:	48 89 c7             	mov    %rax,%rdi
    85cb:	e8 38 dd ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    85d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    85d4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InvalidExternalHandleError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidExternalHandle ), message ) {}
    85d8:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    85dc:	48 89 c6             	mov    %rax,%rsi
    85df:	48 89 d7             	mov    %rdx,%rdi
    85e2:	48 89 d0             	mov    %rdx,%rax
    85e5:	48 89 c2             	mov    %rax,%rdx
    85e8:	48 89 df             	mov    %rbx,%rdi
    85eb:	e8 a8 f2 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    85f0:	48 8d 15 69 ee 02 00 	lea    0x2ee69(%rip),%rdx        # 37460 <_ZTVN2vk26InvalidExternalHandleErrorE+0x10>
    85f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    85fb:	48 89 10             	mov    %rdx,(%rax)
    85fe:	48 8d 15 83 ee 02 00 	lea    0x2ee83(%rip),%rdx        # 37488 <_ZTVN2vk26InvalidExternalHandleErrorE+0x38>
    8605:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8609:	48 89 50 08          	mov    %rdx,0x8(%rax)
    860d:	90                   	nop
    860e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8612:	c9                   	leave
    8613:	c3                   	ret

0000000000008614 <_ZN2vk18FragmentationErrorC1EPKc>:
    FragmentationError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentation ), message ) {}
    8614:	55                   	push   %rbp
    8615:	48 89 e5             	mov    %rsp,%rbp
    8618:	53                   	push   %rbx
    8619:	48 83 ec 38          	sub    $0x38,%rsp
    861d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8621:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8625:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8629:	c7 45 ec 18 c1 62 c4 	movl   $0xc462c118,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8630:	0f b6 05 21 fd 02 00 	movzbl 0x2fd21(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8637:	84 c0                	test   %al,%al
    8639:	0f 94 c0             	sete   %al
    863c:	84 c0                	test   %al,%al
    863e:	74 4a                	je     868a <_ZN2vk18FragmentationErrorC1EPKc+0x76>
    8640:	48 8d 05 11 fd 02 00 	lea    0x2fd11(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8647:	48 89 c7             	mov    %rax,%rdi
    864a:	e8 71 cd ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    864f:	85 c0                	test   %eax,%eax
    8651:	0f 95 c0             	setne  %al
    8654:	84 c0                	test   %al,%al
    8656:	74 32                	je     868a <_ZN2vk18FragmentationErrorC1EPKc+0x76>
    8658:	48 8d 05 99 fb 02 00 	lea    0x2fb99(%rip),%rax        # 381f8 <__dso_handle>
    865f:	48 89 c2             	mov    %rax,%rdx
    8662:	48 8d 05 97 fb 02 00 	lea    0x2fb97(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    8669:	48 89 c6             	mov    %rax,%rsi
    866c:	48 8d 05 b1 3f 00 00 	lea    0x3fb1(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8673:	48 89 c7             	mov    %rax,%rdi
    8676:	e8 55 cb ff ff       	call   51d0 <__cxa_atexit@plt>
    867b:	48 8d 05 d6 fc 02 00 	lea    0x2fcd6(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8682:	48 89 c7             	mov    %rax,%rdi
    8685:	e8 76 ca ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    868a:	48 8d 15 6f fb 02 00 	lea    0x2fb6f(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8691:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8694:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8698:	89 ce                	mov    %ecx,%esi
    869a:	48 89 c7             	mov    %rax,%rdi
    869d:	e8 66 dc ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    86a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    86a6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FragmentationError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentation ), message ) {}
    86aa:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    86ae:	48 89 c6             	mov    %rax,%rsi
    86b1:	48 89 d7             	mov    %rdx,%rdi
    86b4:	48 89 d0             	mov    %rdx,%rax
    86b7:	48 89 c2             	mov    %rax,%rdx
    86ba:	48 89 df             	mov    %rbx,%rdi
    86bd:	e8 d6 f1 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    86c2:	48 8d 15 47 ed 02 00 	lea    0x2ed47(%rip),%rdx        # 37410 <_ZTVN2vk18FragmentationErrorE+0x10>
    86c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    86cd:	48 89 10             	mov    %rdx,(%rax)
    86d0:	48 8d 15 61 ed 02 00 	lea    0x2ed61(%rip),%rdx        # 37438 <_ZTVN2vk18FragmentationErrorE+0x38>
    86d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    86db:	48 89 50 08          	mov    %rdx,0x8(%rax)
    86df:	90                   	nop
    86e0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    86e4:	c9                   	leave
    86e5:	c3                   	ret

00000000000086e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>:
    InvalidOpaqueCaptureAddressError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidOpaqueCaptureAddress ), message ) {}
    86e6:	55                   	push   %rbp
    86e7:	48 89 e5             	mov    %rsp,%rbp
    86ea:	53                   	push   %rbx
    86eb:	48 83 ec 38          	sub    $0x38,%rsp
    86ef:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    86f3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    86f7:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    86fb:	c7 45 ec 18 4a 61 c4 	movl   $0xc4614a18,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8702:	0f b6 05 4f fc 02 00 	movzbl 0x2fc4f(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8709:	84 c0                	test   %al,%al
    870b:	0f 94 c0             	sete   %al
    870e:	84 c0                	test   %al,%al
    8710:	74 4a                	je     875c <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc+0x76>
    8712:	48 8d 05 3f fc 02 00 	lea    0x2fc3f(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8719:	48 89 c7             	mov    %rax,%rdi
    871c:	e8 9f cc ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8721:	85 c0                	test   %eax,%eax
    8723:	0f 95 c0             	setne  %al
    8726:	84 c0                	test   %al,%al
    8728:	74 32                	je     875c <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc+0x76>
    872a:	48 8d 05 c7 fa 02 00 	lea    0x2fac7(%rip),%rax        # 381f8 <__dso_handle>
    8731:	48 89 c2             	mov    %rax,%rdx
    8734:	48 8d 05 c5 fa 02 00 	lea    0x2fac5(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    873b:	48 89 c6             	mov    %rax,%rsi
    873e:	48 8d 05 df 3e 00 00 	lea    0x3edf(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8745:	48 89 c7             	mov    %rax,%rdi
    8748:	e8 83 ca ff ff       	call   51d0 <__cxa_atexit@plt>
    874d:	48 8d 05 04 fc 02 00 	lea    0x2fc04(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8754:	48 89 c7             	mov    %rax,%rdi
    8757:	e8 a4 c9 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    875c:	48 8d 15 9d fa 02 00 	lea    0x2fa9d(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8763:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8766:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    876a:	89 ce                	mov    %ecx,%esi
    876c:	48 89 c7             	mov    %rax,%rdi
    876f:	e8 94 db ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8774:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8778:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InvalidOpaqueCaptureAddressError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidOpaqueCaptureAddress ), message ) {}
    877c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8780:	48 89 c6             	mov    %rax,%rsi
    8783:	48 89 d7             	mov    %rdx,%rdi
    8786:	48 89 d0             	mov    %rdx,%rax
    8789:	48 89 c2             	mov    %rax,%rdx
    878c:	48 89 df             	mov    %rbx,%rdi
    878f:	e8 04 f1 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8794:	48 8d 15 25 ec 02 00 	lea    0x2ec25(%rip),%rdx        # 373c0 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x10>
    879b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    879f:	48 89 10             	mov    %rdx,(%rax)
    87a2:	48 8d 15 3f ec 02 00 	lea    0x2ec3f(%rip),%rdx        # 373e8 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x38>
    87a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    87ad:	48 89 50 08          	mov    %rdx,0x8(%rax)
    87b1:	90                   	nop
    87b2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    87b6:	c9                   	leave
    87b7:	c3                   	ret

00000000000087b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>:
    SurfaceLostKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorSurfaceLostKHR ), message ) {}
    87b8:	55                   	push   %rbp
    87b9:	48 89 e5             	mov    %rsp,%rbp
    87bc:	53                   	push   %rbx
    87bd:	48 83 ec 38          	sub    $0x38,%rsp
    87c1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    87c5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    87c9:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    87cd:	c7 45 ec 00 36 65 c4 	movl   $0xc4653600,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    87d4:	0f b6 05 7d fb 02 00 	movzbl 0x2fb7d(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    87db:	84 c0                	test   %al,%al
    87dd:	0f 94 c0             	sete   %al
    87e0:	84 c0                	test   %al,%al
    87e2:	74 4a                	je     882e <_ZN2vk19SurfaceLostKHRErrorC1EPKc+0x76>
    87e4:	48 8d 05 6d fb 02 00 	lea    0x2fb6d(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    87eb:	48 89 c7             	mov    %rax,%rdi
    87ee:	e8 cd cb ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    87f3:	85 c0                	test   %eax,%eax
    87f5:	0f 95 c0             	setne  %al
    87f8:	84 c0                	test   %al,%al
    87fa:	74 32                	je     882e <_ZN2vk19SurfaceLostKHRErrorC1EPKc+0x76>
    87fc:	48 8d 05 f5 f9 02 00 	lea    0x2f9f5(%rip),%rax        # 381f8 <__dso_handle>
    8803:	48 89 c2             	mov    %rax,%rdx
    8806:	48 8d 05 f3 f9 02 00 	lea    0x2f9f3(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    880d:	48 89 c6             	mov    %rax,%rsi
    8810:	48 8d 05 0d 3e 00 00 	lea    0x3e0d(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8817:	48 89 c7             	mov    %rax,%rdi
    881a:	e8 b1 c9 ff ff       	call   51d0 <__cxa_atexit@plt>
    881f:	48 8d 05 32 fb 02 00 	lea    0x2fb32(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8826:	48 89 c7             	mov    %rax,%rdi
    8829:	e8 d2 c8 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    882e:	48 8d 15 cb f9 02 00 	lea    0x2f9cb(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8835:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8838:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    883c:	89 ce                	mov    %ecx,%esi
    883e:	48 89 c7             	mov    %rax,%rdi
    8841:	e8 c2 da ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8846:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    884a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    SurfaceLostKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorSurfaceLostKHR ), message ) {}
    884e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8852:	48 89 c6             	mov    %rax,%rsi
    8855:	48 89 d7             	mov    %rdx,%rdi
    8858:	48 89 d0             	mov    %rdx,%rax
    885b:	48 89 c2             	mov    %rax,%rdx
    885e:	48 89 df             	mov    %rbx,%rdi
    8861:	e8 32 f0 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8866:	48 8d 15 03 eb 02 00 	lea    0x2eb03(%rip),%rdx        # 37370 <_ZTVN2vk19SurfaceLostKHRErrorE+0x10>
    886d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8871:	48 89 10             	mov    %rdx,(%rax)
    8874:	48 8d 15 1d eb 02 00 	lea    0x2eb1d(%rip),%rdx        # 37398 <_ZTVN2vk19SurfaceLostKHRErrorE+0x38>
    887b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    887f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8883:	90                   	nop
    8884:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8888:	c9                   	leave
    8889:	c3                   	ret

000000000000888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>:
    NativeWindowInUseKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNativeWindowInUseKHR ), message ) {}
    888a:	55                   	push   %rbp
    888b:	48 89 e5             	mov    %rsp,%rbp
    888e:	53                   	push   %rbx
    888f:	48 83 ec 38          	sub    $0x38,%rsp
    8893:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8897:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    889b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    889f:	c7 45 ec ff 35 65 c4 	movl   $0xc46535ff,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    88a6:	0f b6 05 ab fa 02 00 	movzbl 0x2faab(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    88ad:	84 c0                	test   %al,%al
    88af:	0f 94 c0             	sete   %al
    88b2:	84 c0                	test   %al,%al
    88b4:	74 4a                	je     8900 <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc+0x76>
    88b6:	48 8d 05 9b fa 02 00 	lea    0x2fa9b(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    88bd:	48 89 c7             	mov    %rax,%rdi
    88c0:	e8 fb ca ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    88c5:	85 c0                	test   %eax,%eax
    88c7:	0f 95 c0             	setne  %al
    88ca:	84 c0                	test   %al,%al
    88cc:	74 32                	je     8900 <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc+0x76>
    88ce:	48 8d 05 23 f9 02 00 	lea    0x2f923(%rip),%rax        # 381f8 <__dso_handle>
    88d5:	48 89 c2             	mov    %rax,%rdx
    88d8:	48 8d 05 21 f9 02 00 	lea    0x2f921(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    88df:	48 89 c6             	mov    %rax,%rsi
    88e2:	48 8d 05 3b 3d 00 00 	lea    0x3d3b(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    88e9:	48 89 c7             	mov    %rax,%rdi
    88ec:	e8 df c8 ff ff       	call   51d0 <__cxa_atexit@plt>
    88f1:	48 8d 05 60 fa 02 00 	lea    0x2fa60(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    88f8:	48 89 c7             	mov    %rax,%rdi
    88fb:	e8 00 c8 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8900:	48 8d 15 f9 f8 02 00 	lea    0x2f8f9(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8907:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    890a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    890e:	89 ce                	mov    %ecx,%esi
    8910:	48 89 c7             	mov    %rax,%rdi
    8913:	e8 f0 d9 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8918:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    891c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    NativeWindowInUseKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNativeWindowInUseKHR ), message ) {}
    8920:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8924:	48 89 c6             	mov    %rax,%rsi
    8927:	48 89 d7             	mov    %rdx,%rdi
    892a:	48 89 d0             	mov    %rdx,%rax
    892d:	48 89 c2             	mov    %rax,%rdx
    8930:	48 89 df             	mov    %rbx,%rdi
    8933:	e8 60 ef ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8938:	48 8d 15 e1 e9 02 00 	lea    0x2e9e1(%rip),%rdx        # 37320 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x10>
    893f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8943:	48 89 10             	mov    %rdx,(%rax)
    8946:	48 8d 15 fb e9 02 00 	lea    0x2e9fb(%rip),%rdx        # 37348 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x38>
    894d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8951:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8955:	90                   	nop
    8956:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    895a:	c9                   	leave
    895b:	c3                   	ret

000000000000895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>:
    OutOfDateKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDateKHR ), message ) {}
    895c:	55                   	push   %rbp
    895d:	48 89 e5             	mov    %rsp,%rbp
    8960:	53                   	push   %rbx
    8961:	48 83 ec 38          	sub    $0x38,%rsp
    8965:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8969:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    896d:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8971:	c7 45 ec 14 32 65 c4 	movl   $0xc4653214,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8978:	0f b6 05 d9 f9 02 00 	movzbl 0x2f9d9(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    897f:	84 c0                	test   %al,%al
    8981:	0f 94 c0             	sete   %al
    8984:	84 c0                	test   %al,%al
    8986:	74 4a                	je     89d2 <_ZN2vk17OutOfDateKHRErrorC1EPKc+0x76>
    8988:	48 8d 05 c9 f9 02 00 	lea    0x2f9c9(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    898f:	48 89 c7             	mov    %rax,%rdi
    8992:	e8 29 ca ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8997:	85 c0                	test   %eax,%eax
    8999:	0f 95 c0             	setne  %al
    899c:	84 c0                	test   %al,%al
    899e:	74 32                	je     89d2 <_ZN2vk17OutOfDateKHRErrorC1EPKc+0x76>
    89a0:	48 8d 05 51 f8 02 00 	lea    0x2f851(%rip),%rax        # 381f8 <__dso_handle>
    89a7:	48 89 c2             	mov    %rax,%rdx
    89aa:	48 8d 05 4f f8 02 00 	lea    0x2f84f(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    89b1:	48 89 c6             	mov    %rax,%rsi
    89b4:	48 8d 05 69 3c 00 00 	lea    0x3c69(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    89bb:	48 89 c7             	mov    %rax,%rdi
    89be:	e8 0d c8 ff ff       	call   51d0 <__cxa_atexit@plt>
    89c3:	48 8d 05 8e f9 02 00 	lea    0x2f98e(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    89ca:	48 89 c7             	mov    %rax,%rdi
    89cd:	e8 2e c7 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    89d2:	48 8d 15 27 f8 02 00 	lea    0x2f827(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    89d9:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    89dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    89e0:	89 ce                	mov    %ecx,%esi
    89e2:	48 89 c7             	mov    %rax,%rdi
    89e5:	e8 1e d9 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    89ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    89ee:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfDateKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDateKHR ), message ) {}
    89f2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    89f6:	48 89 c6             	mov    %rax,%rsi
    89f9:	48 89 d7             	mov    %rdx,%rdi
    89fc:	48 89 d0             	mov    %rdx,%rax
    89ff:	48 89 c2             	mov    %rax,%rdx
    8a02:	48 89 df             	mov    %rbx,%rdi
    8a05:	e8 8e ee ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8a0a:	48 8d 15 bf e8 02 00 	lea    0x2e8bf(%rip),%rdx        # 372d0 <_ZTVN2vk17OutOfDateKHRErrorE+0x10>
    8a11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8a15:	48 89 10             	mov    %rdx,(%rax)
    8a18:	48 8d 15 d9 e8 02 00 	lea    0x2e8d9(%rip),%rdx        # 372f8 <_ZTVN2vk17OutOfDateKHRErrorE+0x38>
    8a1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8a23:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8a27:	90                   	nop
    8a28:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8a2c:	c9                   	leave
    8a2d:	c3                   	ret

0000000000008a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>:
    IncompatibleDisplayKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDisplayKHR ), message ) {}
    8a2e:	55                   	push   %rbp
    8a2f:	48 89 e5             	mov    %rsp,%rbp
    8a32:	53                   	push   %rbx
    8a33:	48 83 ec 38          	sub    $0x38,%rsp
    8a37:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8a3b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8a3f:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8a43:	c7 45 ec 47 2a 65 c4 	movl   $0xc4652a47,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8a4a:	0f b6 05 07 f9 02 00 	movzbl 0x2f907(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8a51:	84 c0                	test   %al,%al
    8a53:	0f 94 c0             	sete   %al
    8a56:	84 c0                	test   %al,%al
    8a58:	74 4a                	je     8aa4 <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc+0x76>
    8a5a:	48 8d 05 f7 f8 02 00 	lea    0x2f8f7(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8a61:	48 89 c7             	mov    %rax,%rdi
    8a64:	e8 57 c9 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8a69:	85 c0                	test   %eax,%eax
    8a6b:	0f 95 c0             	setne  %al
    8a6e:	84 c0                	test   %al,%al
    8a70:	74 32                	je     8aa4 <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc+0x76>
    8a72:	48 8d 05 7f f7 02 00 	lea    0x2f77f(%rip),%rax        # 381f8 <__dso_handle>
    8a79:	48 89 c2             	mov    %rax,%rdx
    8a7c:	48 8d 05 7d f7 02 00 	lea    0x2f77d(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    8a83:	48 89 c6             	mov    %rax,%rsi
    8a86:	48 8d 05 97 3b 00 00 	lea    0x3b97(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8a8d:	48 89 c7             	mov    %rax,%rdi
    8a90:	e8 3b c7 ff ff       	call   51d0 <__cxa_atexit@plt>
    8a95:	48 8d 05 bc f8 02 00 	lea    0x2f8bc(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8a9c:	48 89 c7             	mov    %rax,%rdi
    8a9f:	e8 5c c6 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8aa4:	48 8d 15 55 f7 02 00 	lea    0x2f755(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8aab:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8aae:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8ab2:	89 ce                	mov    %ecx,%esi
    8ab4:	48 89 c7             	mov    %rax,%rdi
    8ab7:	e8 4c d8 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8abc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8ac0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    IncompatibleDisplayKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDisplayKHR ), message ) {}
    8ac4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8ac8:	48 89 c6             	mov    %rax,%rsi
    8acb:	48 89 d7             	mov    %rdx,%rdi
    8ace:	48 89 d0             	mov    %rdx,%rax
    8ad1:	48 89 c2             	mov    %rax,%rdx
    8ad4:	48 89 df             	mov    %rbx,%rdi
    8ad7:	e8 bc ed ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8adc:	48 8d 15 9d e7 02 00 	lea    0x2e79d(%rip),%rdx        # 37280 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x10>
    8ae3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8ae7:	48 89 10             	mov    %rdx,(%rax)
    8aea:	48 8d 15 b7 e7 02 00 	lea    0x2e7b7(%rip),%rdx        # 372a8 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x38>
    8af1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8af5:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8af9:	90                   	nop
    8afa:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8afe:	c9                   	leave
    8aff:	c3                   	ret

0000000000008b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>:
    ValidationFailedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorValidationFailedEXT ), message ) {}
    8b00:	55                   	push   %rbp
    8b01:	48 89 e5             	mov    %rsp,%rbp
    8b04:	53                   	push   %rbx
    8b05:	48 83 ec 38          	sub    $0x38,%rsp
    8b09:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8b0d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8b11:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8b15:	c7 45 ec 07 0b 65 c4 	movl   $0xc4650b07,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8b1c:	0f b6 05 35 f8 02 00 	movzbl 0x2f835(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8b23:	84 c0                	test   %al,%al
    8b25:	0f 94 c0             	sete   %al
    8b28:	84 c0                	test   %al,%al
    8b2a:	74 4a                	je     8b76 <_ZN2vk24ValidationFailedEXTErrorC1EPKc+0x76>
    8b2c:	48 8d 05 25 f8 02 00 	lea    0x2f825(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8b33:	48 89 c7             	mov    %rax,%rdi
    8b36:	e8 85 c8 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8b3b:	85 c0                	test   %eax,%eax
    8b3d:	0f 95 c0             	setne  %al
    8b40:	84 c0                	test   %al,%al
    8b42:	74 32                	je     8b76 <_ZN2vk24ValidationFailedEXTErrorC1EPKc+0x76>
    8b44:	48 8d 05 ad f6 02 00 	lea    0x2f6ad(%rip),%rax        # 381f8 <__dso_handle>
    8b4b:	48 89 c2             	mov    %rax,%rdx
    8b4e:	48 8d 05 ab f6 02 00 	lea    0x2f6ab(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    8b55:	48 89 c6             	mov    %rax,%rsi
    8b58:	48 8d 05 c5 3a 00 00 	lea    0x3ac5(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8b5f:	48 89 c7             	mov    %rax,%rdi
    8b62:	e8 69 c6 ff ff       	call   51d0 <__cxa_atexit@plt>
    8b67:	48 8d 05 ea f7 02 00 	lea    0x2f7ea(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8b6e:	48 89 c7             	mov    %rax,%rdi
    8b71:	e8 8a c5 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8b76:	48 8d 15 83 f6 02 00 	lea    0x2f683(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8b7d:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8b80:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8b84:	89 ce                	mov    %ecx,%esi
    8b86:	48 89 c7             	mov    %rax,%rdi
    8b89:	e8 7a d7 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8b8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8b92:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ValidationFailedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorValidationFailedEXT ), message ) {}
    8b96:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8b9a:	48 89 c6             	mov    %rax,%rsi
    8b9d:	48 89 d7             	mov    %rdx,%rdi
    8ba0:	48 89 d0             	mov    %rdx,%rax
    8ba3:	48 89 c2             	mov    %rax,%rdx
    8ba6:	48 89 df             	mov    %rbx,%rdi
    8ba9:	e8 ea ec ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8bae:	48 8d 15 7b e6 02 00 	lea    0x2e67b(%rip),%rdx        # 37230 <_ZTVN2vk24ValidationFailedEXTErrorE+0x10>
    8bb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8bb9:	48 89 10             	mov    %rdx,(%rax)
    8bbc:	48 8d 15 95 e6 02 00 	lea    0x2e695(%rip),%rdx        # 37258 <_ZTVN2vk24ValidationFailedEXTErrorE+0x38>
    8bc3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8bc7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8bcb:	90                   	nop
    8bcc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8bd0:	c9                   	leave
    8bd1:	c3                   	ret

0000000000008bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>:
    InvalidShaderNVError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidShaderNV ), message ) {}
    8bd2:	55                   	push   %rbp
    8bd3:	48 89 e5             	mov    %rsp,%rbp
    8bd6:	53                   	push   %rbx
    8bd7:	48 83 ec 38          	sub    $0x38,%rsp
    8bdb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8bdf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8be3:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8be7:	c7 45 ec 20 07 65 c4 	movl   $0xc4650720,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8bee:	0f b6 05 63 f7 02 00 	movzbl 0x2f763(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8bf5:	84 c0                	test   %al,%al
    8bf7:	0f 94 c0             	sete   %al
    8bfa:	84 c0                	test   %al,%al
    8bfc:	74 4a                	je     8c48 <_ZN2vk20InvalidShaderNVErrorC1EPKc+0x76>
    8bfe:	48 8d 05 53 f7 02 00 	lea    0x2f753(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8c05:	48 89 c7             	mov    %rax,%rdi
    8c08:	e8 b3 c7 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8c0d:	85 c0                	test   %eax,%eax
    8c0f:	0f 95 c0             	setne  %al
    8c12:	84 c0                	test   %al,%al
    8c14:	74 32                	je     8c48 <_ZN2vk20InvalidShaderNVErrorC1EPKc+0x76>
    8c16:	48 8d 05 db f5 02 00 	lea    0x2f5db(%rip),%rax        # 381f8 <__dso_handle>
    8c1d:	48 89 c2             	mov    %rax,%rdx
    8c20:	48 8d 05 d9 f5 02 00 	lea    0x2f5d9(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    8c27:	48 89 c6             	mov    %rax,%rsi
    8c2a:	48 8d 05 f3 39 00 00 	lea    0x39f3(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8c31:	48 89 c7             	mov    %rax,%rdi
    8c34:	e8 97 c5 ff ff       	call   51d0 <__cxa_atexit@plt>
    8c39:	48 8d 05 18 f7 02 00 	lea    0x2f718(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8c40:	48 89 c7             	mov    %rax,%rdi
    8c43:	e8 b8 c4 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8c48:	48 8d 15 b1 f5 02 00 	lea    0x2f5b1(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8c4f:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8c52:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8c56:	89 ce                	mov    %ecx,%esi
    8c58:	48 89 c7             	mov    %rax,%rdi
    8c5b:	e8 a8 d6 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8c60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8c64:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InvalidShaderNVError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidShaderNV ), message ) {}
    8c68:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8c6c:	48 89 c6             	mov    %rax,%rsi
    8c6f:	48 89 d7             	mov    %rdx,%rdi
    8c72:	48 89 d0             	mov    %rdx,%rax
    8c75:	48 89 c2             	mov    %rax,%rdx
    8c78:	48 89 df             	mov    %rbx,%rdi
    8c7b:	e8 18 ec ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8c80:	48 8d 15 59 e5 02 00 	lea    0x2e559(%rip),%rdx        # 371e0 <_ZTVN2vk20InvalidShaderNVErrorE+0x10>
    8c87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8c8b:	48 89 10             	mov    %rdx,(%rax)
    8c8e:	48 8d 15 73 e5 02 00 	lea    0x2e573(%rip),%rdx        # 37208 <_ZTVN2vk20InvalidShaderNVErrorE+0x38>
    8c95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8c99:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8c9d:	90                   	nop
    8c9e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8ca2:	c9                   	leave
    8ca3:	c3                   	ret

0000000000008ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>:
    InvalidDrmFormatModifierPlaneLayoutEXTError( char const * message )
    8ca4:	55                   	push   %rbp
    8ca5:	48 89 e5             	mov    %rsp,%rbp
    8ca8:	53                   	push   %rbx
    8ca9:	48 83 ec 38          	sub    $0x38,%rsp
    8cad:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8cb1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      : SystemError( make_error_code( Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT ), message )
    8cb5:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8cb9:	c7 45 ec d0 cc 62 c4 	movl   $0xc462ccd0,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8cc0:	0f b6 05 91 f6 02 00 	movzbl 0x2f691(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8cc7:	84 c0                	test   %al,%al
    8cc9:	0f 94 c0             	sete   %al
    8ccc:	84 c0                	test   %al,%al
    8cce:	74 4a                	je     8d1a <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc+0x76>
    8cd0:	48 8d 05 81 f6 02 00 	lea    0x2f681(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8cd7:	48 89 c7             	mov    %rax,%rdi
    8cda:	e8 e1 c6 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8cdf:	85 c0                	test   %eax,%eax
    8ce1:	0f 95 c0             	setne  %al
    8ce4:	84 c0                	test   %al,%al
    8ce6:	74 32                	je     8d1a <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc+0x76>
    8ce8:	48 8d 05 09 f5 02 00 	lea    0x2f509(%rip),%rax        # 381f8 <__dso_handle>
    8cef:	48 89 c2             	mov    %rax,%rdx
    8cf2:	48 8d 05 07 f5 02 00 	lea    0x2f507(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    8cf9:	48 89 c6             	mov    %rax,%rsi
    8cfc:	48 8d 05 21 39 00 00 	lea    0x3921(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8d03:	48 89 c7             	mov    %rax,%rdi
    8d06:	e8 c5 c4 ff ff       	call   51d0 <__cxa_atexit@plt>
    8d0b:	48 8d 05 46 f6 02 00 	lea    0x2f646(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8d12:	48 89 c7             	mov    %rax,%rdi
    8d15:	e8 e6 c3 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8d1a:	48 8d 15 df f4 02 00 	lea    0x2f4df(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8d21:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8d24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8d28:	89 ce                	mov    %ecx,%esi
    8d2a:	48 89 c7             	mov    %rax,%rdi
    8d2d:	e8 d6 d5 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8d32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8d36:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
      : SystemError( make_error_code( Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT ), message )
    8d3a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8d3e:	48 89 c6             	mov    %rax,%rsi
    8d41:	48 89 d7             	mov    %rdx,%rdi
    8d44:	48 89 d0             	mov    %rdx,%rax
    8d47:	48 89 c2             	mov    %rax,%rdx
    8d4a:	48 89 df             	mov    %rbx,%rdi
    8d4d:	e8 46 eb ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8d52:	48 8d 15 37 e4 02 00 	lea    0x2e437(%rip),%rdx        # 37190 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x10>
    8d59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8d5d:	48 89 10             	mov    %rdx,(%rax)
    8d60:	48 8d 15 51 e4 02 00 	lea    0x2e451(%rip),%rdx        # 371b8 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x38>
    8d67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8d6b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    }
    8d6f:	90                   	nop
    8d70:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8d74:	c9                   	leave
    8d75:	c3                   	ret

0000000000008d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>:
    NotPermittedKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNotPermittedKHR ), message ) {}
    8d76:	55                   	push   %rbp
    8d77:	48 89 e5             	mov    %rsp,%rbp
    8d7a:	53                   	push   %rbx
    8d7b:	48 83 ec 38          	sub    $0x38,%rsp
    8d7f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8d83:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8d87:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8d8b:	c7 45 ec 4f 8e 62 c4 	movl   $0xc4628e4f,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8d92:	0f b6 05 bf f5 02 00 	movzbl 0x2f5bf(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8d99:	84 c0                	test   %al,%al
    8d9b:	0f 94 c0             	sete   %al
    8d9e:	84 c0                	test   %al,%al
    8da0:	74 4a                	je     8dec <_ZN2vk20NotPermittedKHRErrorC1EPKc+0x76>
    8da2:	48 8d 05 af f5 02 00 	lea    0x2f5af(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8da9:	48 89 c7             	mov    %rax,%rdi
    8dac:	e8 0f c6 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8db1:	85 c0                	test   %eax,%eax
    8db3:	0f 95 c0             	setne  %al
    8db6:	84 c0                	test   %al,%al
    8db8:	74 32                	je     8dec <_ZN2vk20NotPermittedKHRErrorC1EPKc+0x76>
    8dba:	48 8d 05 37 f4 02 00 	lea    0x2f437(%rip),%rax        # 381f8 <__dso_handle>
    8dc1:	48 89 c2             	mov    %rax,%rdx
    8dc4:	48 8d 05 35 f4 02 00 	lea    0x2f435(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    8dcb:	48 89 c6             	mov    %rax,%rsi
    8dce:	48 8d 05 4f 38 00 00 	lea    0x384f(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8dd5:	48 89 c7             	mov    %rax,%rdi
    8dd8:	e8 f3 c3 ff ff       	call   51d0 <__cxa_atexit@plt>
    8ddd:	48 8d 05 74 f5 02 00 	lea    0x2f574(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8de4:	48 89 c7             	mov    %rax,%rdi
    8de7:	e8 14 c3 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8dec:	48 8d 15 0d f4 02 00 	lea    0x2f40d(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8df3:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8df6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8dfa:	89 ce                	mov    %ecx,%esi
    8dfc:	48 89 c7             	mov    %rax,%rdi
    8dff:	e8 04 d5 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8e04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8e08:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    NotPermittedKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNotPermittedKHR ), message ) {}
    8e0c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8e10:	48 89 c6             	mov    %rax,%rsi
    8e13:	48 89 d7             	mov    %rdx,%rdi
    8e16:	48 89 d0             	mov    %rdx,%rax
    8e19:	48 89 c2             	mov    %rax,%rdx
    8e1c:	48 89 df             	mov    %rbx,%rdi
    8e1f:	e8 74 ea ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8e24:	48 8d 15 15 e3 02 00 	lea    0x2e315(%rip),%rdx        # 37140 <_ZTVN2vk20NotPermittedKHRErrorE+0x10>
    8e2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8e2f:	48 89 10             	mov    %rdx,(%rax)
    8e32:	48 8d 15 2f e3 02 00 	lea    0x2e32f(%rip),%rdx        # 37168 <_ZTVN2vk20NotPermittedKHRErrorE+0x38>
    8e39:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8e3d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8e41:	90                   	nop
    8e42:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8e46:	c9                   	leave
    8e47:	c3                   	ret

0000000000008e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>:
    CompressionExhaustedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorCompressionExhaustedEXT ), message ) {}
    8e48:	55                   	push   %rbp
    8e49:	48 89 e5             	mov    %rsp,%rbp
    8e4c:	53                   	push   %rbx
    8e4d:	48 83 ec 38          	sub    $0x38,%rsp
    8e51:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8e55:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8e59:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8e5d:	c7 45 ec b0 0d 60 c4 	movl   $0xc4600db0,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8e64:	0f b6 05 ed f4 02 00 	movzbl 0x2f4ed(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8e6b:	84 c0                	test   %al,%al
    8e6d:	0f 94 c0             	sete   %al
    8e70:	84 c0                	test   %al,%al
    8e72:	74 4a                	je     8ebe <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc+0x76>
    8e74:	48 8d 05 dd f4 02 00 	lea    0x2f4dd(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8e7b:	48 89 c7             	mov    %rax,%rdi
    8e7e:	e8 3d c5 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8e83:	85 c0                	test   %eax,%eax
    8e85:	0f 95 c0             	setne  %al
    8e88:	84 c0                	test   %al,%al
    8e8a:	74 32                	je     8ebe <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc+0x76>
    8e8c:	48 8d 05 65 f3 02 00 	lea    0x2f365(%rip),%rax        # 381f8 <__dso_handle>
    8e93:	48 89 c2             	mov    %rax,%rdx
    8e96:	48 8d 05 63 f3 02 00 	lea    0x2f363(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    8e9d:	48 89 c6             	mov    %rax,%rsi
    8ea0:	48 8d 05 7d 37 00 00 	lea    0x377d(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8ea7:	48 89 c7             	mov    %rax,%rdi
    8eaa:	e8 21 c3 ff ff       	call   51d0 <__cxa_atexit@plt>
    8eaf:	48 8d 05 a2 f4 02 00 	lea    0x2f4a2(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8eb6:	48 89 c7             	mov    %rax,%rdi
    8eb9:	e8 42 c2 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8ebe:	48 8d 15 3b f3 02 00 	lea    0x2f33b(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8ec5:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8ec8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8ecc:	89 ce                	mov    %ecx,%esi
    8ece:	48 89 c7             	mov    %rax,%rdi
    8ed1:	e8 32 d4 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8ed6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8eda:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    CompressionExhaustedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorCompressionExhaustedEXT ), message ) {}
    8ede:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8ee2:	48 89 c6             	mov    %rax,%rsi
    8ee5:	48 89 d7             	mov    %rdx,%rdi
    8ee8:	48 89 d0             	mov    %rdx,%rax
    8eeb:	48 89 c2             	mov    %rax,%rdx
    8eee:	48 89 df             	mov    %rbx,%rdi
    8ef1:	e8 a2 e9 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8ef6:	48 8d 15 f3 e1 02 00 	lea    0x2e1f3(%rip),%rdx        # 370f0 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x10>
    8efd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8f01:	48 89 10             	mov    %rdx,(%rax)
    8f04:	48 8d 15 0d e2 02 00 	lea    0x2e20d(%rip),%rdx        # 37118 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x38>
    8f0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8f0f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8f13:	90                   	nop
    8f14:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8f18:	c9                   	leave
    8f19:	c3                   	ret

0000000000008f1a <_ZN2vk10SurfaceKHRaSEDn>:
      m_surfaceKHR = surfaceKHR;
      return *this;
    }
#endif

    SurfaceKHR & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8f1a:	55                   	push   %rbp
    8f1b:	48 89 e5             	mov    %rsp,%rbp
    8f1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8f22:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_surfaceKHR = {};
    8f26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f2a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    8f31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    8f35:	5d                   	pop    %rbp
    8f36:	c3                   	ret
    8f37:	90                   	nop

0000000000008f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>:
    {
      return m_surfaceKHR < rhs.m_surfaceKHR;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkSurfaceKHR() const VULKAN_HPP_NOEXCEPT
    8f38:	55                   	push   %rbp
    8f39:	48 89 e5             	mov    %rsp,%rbp
    8f3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_surfaceKHR;
    8f40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f44:	48 8b 00             	mov    (%rax),%rax
    }
    8f47:	5d                   	pop    %rbp
    8f48:	c3                   	ret
    8f49:	90                   	nop

0000000000008f4a <_ZNK2vk10SurfaceKHRcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    8f4a:	55                   	push   %rbp
    8f4b:	48 89 e5             	mov    %rsp,%rbp
    8f4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_surfaceKHR != VK_NULL_HANDLE;
    8f52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f56:	48 8b 00             	mov    (%rax),%rax
    8f59:	48 85 c0             	test   %rax,%rax
    8f5c:	0f 95 c0             	setne  %al
    }
    8f5f:	5d                   	pop    %rbp
    8f60:	c3                   	ret
    8f61:	90                   	nop

0000000000008f62 <_ZN2vk22DebugUtilsMessengerEXTaSEDn>:
      m_debugUtilsMessengerEXT = debugUtilsMessengerEXT;
      return *this;
    }
#endif

    DebugUtilsMessengerEXT & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8f62:	55                   	push   %rbp
    8f63:	48 89 e5             	mov    %rsp,%rbp
    8f66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8f6a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_debugUtilsMessengerEXT = {};
    8f6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    8f79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    8f7d:	5d                   	pop    %rbp
    8f7e:	c3                   	ret
    8f7f:	90                   	nop

0000000000008f80 <_ZNK2vk22DebugUtilsMessengerEXTcvP26VkDebugUtilsMessengerEXT_TEv>:
    {
      return m_debugUtilsMessengerEXT < rhs.m_debugUtilsMessengerEXT;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkDebugUtilsMessengerEXT() const VULKAN_HPP_NOEXCEPT
    8f80:	55                   	push   %rbp
    8f81:	48 89 e5             	mov    %rsp,%rbp
    8f84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_debugUtilsMessengerEXT;
    8f88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f8c:	48 8b 00             	mov    (%rax),%rax
    }
    8f8f:	5d                   	pop    %rbp
    8f90:	c3                   	ret
    8f91:	90                   	nop

0000000000008f92 <_ZNK2vk22DebugUtilsMessengerEXTcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    8f92:	55                   	push   %rbp
    8f93:	48 89 e5             	mov    %rsp,%rbp
    8f96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_debugUtilsMessengerEXT != VK_NULL_HANDLE;
    8f9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f9e:	48 8b 00             	mov    (%rax),%rax
    8fa1:	48 85 c0             	test   %rax,%rax
    8fa4:	0f 95 c0             	setne  %al
    }
    8fa7:	5d                   	pop    %rbp
    8fa8:	c3                   	ret
    8fa9:	90                   	nop

0000000000008faa <_ZN2vk11CommandPoolaSEDn>:
      m_commandPool = commandPool;
      return *this;
    }
#endif

    CommandPool & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8faa:	55                   	push   %rbp
    8fab:	48 89 e5             	mov    %rsp,%rbp
    8fae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8fb2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_commandPool = {};
    8fb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    8fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    8fc5:	5d                   	pop    %rbp
    8fc6:	c3                   	ret
    8fc7:	90                   	nop

0000000000008fc8 <_ZNK2vk11CommandPoolcvP15VkCommandPool_TEv>:
    {
      return m_commandPool < rhs.m_commandPool;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkCommandPool() const VULKAN_HPP_NOEXCEPT
    8fc8:	55                   	push   %rbp
    8fc9:	48 89 e5             	mov    %rsp,%rbp
    8fcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_commandPool;
    8fd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fd4:	48 8b 00             	mov    (%rax),%rax
    }
    8fd7:	5d                   	pop    %rbp
    8fd8:	c3                   	ret
    8fd9:	90                   	nop

0000000000008fda <_ZNK2vk11CommandPoolcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    8fda:	55                   	push   %rbp
    8fdb:	48 89 e5             	mov    %rsp,%rbp
    8fde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_commandPool != VK_NULL_HANDLE;
    8fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fe6:	48 8b 00             	mov    (%rax),%rax
    8fe9:	48 85 c0             	test   %rax,%rax
    8fec:	0f 95 c0             	setne  %al
    }
    8fef:	5d                   	pop    %rbp
    8ff0:	c3                   	ret
    8ff1:	90                   	nop

0000000000008ff2 <_ZN2vk5QueueaSEDn>:
    {
      m_queue = queue;
      return *this;
    }

    Queue & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8ff2:	55                   	push   %rbp
    8ff3:	48 89 e5             	mov    %rsp,%rbp
    8ff6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8ffa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_queue = {};
    8ffe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9002:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    9009:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    900d:	5d                   	pop    %rbp
    900e:	c3                   	ret
    900f:	90                   	nop

0000000000009010 <_ZN2vk6DeviceaSEDn>:
    {
      m_device = device;
      return *this;
    }

    Device & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    9010:	55                   	push   %rbp
    9011:	48 89 e5             	mov    %rsp,%rbp
    9014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9018:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_device = {};
    901c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9020:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    9027:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    902b:	5d                   	pop    %rbp
    902c:	c3                   	ret
    902d:	90                   	nop

000000000000902e <_ZNK2vk6DevicecvP10VkDevice_TEv>:
    VULKAN_HPP_NODISCARD VULKAN_HPP_NAMESPACE::TilePropertiesQCOM
                         getDynamicRenderingTilePropertiesQCOM( const VULKAN_HPP_NAMESPACE::RenderingInfo & renderingInfo,
                                                                Dispatch const & d                          VULKAN_HPP_DEFAULT_DISPATCHER_ASSIGNMENT ) const VULKAN_HPP_NOEXCEPT;
#endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/

    operator VkDevice() const VULKAN_HPP_NOEXCEPT
    902e:	55                   	push   %rbp
    902f:	48 89 e5             	mov    %rsp,%rbp
    9032:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_device;
    9036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    903a:	48 8b 00             	mov    (%rax),%rax
    }
    903d:	5d                   	pop    %rbp
    903e:	c3                   	ret
    903f:	90                   	nop

0000000000009040 <_ZNK2vk6DevicecvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    9040:	55                   	push   %rbp
    9041:	48 89 e5             	mov    %rsp,%rbp
    9044:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_device != VK_NULL_HANDLE;
    9048:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    904c:	48 8b 00             	mov    (%rax),%rax
    904f:	48 85 c0             	test   %rax,%rax
    9052:	0f 95 c0             	setne  %al
    }
    9055:	5d                   	pop    %rbp
    9056:	c3                   	ret
    9057:	90                   	nop

0000000000009058 <_ZN2vk14PhysicalDeviceaSEDn>:
    {
      m_physicalDevice = physicalDevice;
      return *this;
    }

    PhysicalDevice & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    9058:	55                   	push   %rbp
    9059:	48 89 e5             	mov    %rsp,%rbp
    905c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9060:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_physicalDevice = {};
    9064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9068:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    906f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    9073:	5d                   	pop    %rbp
    9074:	c3                   	ret
    9075:	90                   	nop

0000000000009076 <_ZN2vk8InstanceaSEDn>:
    {
      m_instance = instance;
      return *this;
    }

    Instance & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    9076:	55                   	push   %rbp
    9077:	48 89 e5             	mov    %rsp,%rbp
    907a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    907e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_instance = {};
    9082:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9086:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    908d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    9091:	5d                   	pop    %rbp
    9092:	c3                   	ret
    9093:	90                   	nop

0000000000009094 <_ZNK2vk8InstancecvP12VkInstance_TEv>:
                                    Dispatch const & d                                                  VULKAN_HPP_DEFAULT_DISPATCHER_ASSIGNMENT ) const;
#    endif /*VULKAN_HPP_NO_SMART_HANDLE*/
#  endif   /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/
#endif     /*VK_USE_PLATFORM_SCREEN_QNX*/

    operator VkInstance() const VULKAN_HPP_NOEXCEPT
    9094:	55                   	push   %rbp
    9095:	48 89 e5             	mov    %rsp,%rbp
    9098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_instance;
    909c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90a0:	48 8b 00             	mov    (%rax),%rax
    }
    90a3:	5d                   	pop    %rbp
    90a4:	c3                   	ret
    90a5:	90                   	nop

00000000000090a6 <_ZNK2vk8InstancecvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    90a6:	55                   	push   %rbp
    90a7:	48 89 e5             	mov    %rsp,%rbp
    90aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_instance != VK_NULL_HANDLE;
    90ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90b2:	48 8b 00             	mov    (%rax),%rax
    90b5:	48 85 c0             	test   %rax,%rax
    90b8:	0f 95 c0             	setne  %al
    }
    90bb:	5d                   	pop    %rbp
    90bc:	c3                   	ret
    90bd:	90                   	nop

00000000000090be <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  {
  public:
#  ifdef VULKAN_HPP_NO_EXCEPTIONS
    DynamicLoader( std::string const & vulkanLibraryName = {} ) VULKAN_HPP_NOEXCEPT
#  else
    DynamicLoader( std::string const & vulkanLibraryName = {} )
    90be:	55                   	push   %rbp
    90bf:	48 89 e5             	mov    %rsp,%rbp
    90c2:	41 54                	push   %r12
    90c4:	53                   	push   %rbx
    90c5:	48 83 ec 10          	sub    $0x10,%rsp
    90c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    90cd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#  endif
    {
      if ( !vulkanLibraryName.empty() )
    90d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    90d5:	48 89 c7             	mov    %rax,%rdi
    90d8:	e8 c5 10 00 00       	call   a1a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
    90dd:	83 f0 01             	xor    $0x1,%eax
    90e0:	84 c0                	test   %al,%al
    90e2:	74 22                	je     9106 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
      {
#  if defined( __unix__ ) || defined( __APPLE__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
        m_library = dlopen( vulkanLibraryName.c_str(), RTLD_NOW | RTLD_LOCAL );
    90e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    90e8:	48 89 c7             	mov    %rax,%rdi
    90eb:	e8 ce 0d 00 00       	call   9ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
    90f0:	be 02 00 00 00       	mov    $0x2,%esi
    90f5:	48 89 c7             	mov    %rax,%rdi
    90f8:	e8 f3 c1 ff ff       	call   52f0 <dlopen@plt>
    90fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9101:	48 89 02             	mov    %rax,(%rdx)
    9104:	eb 42                	jmp    9148 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
#  endif
      }
      else
      {
#  if defined( __unix__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
        m_library = dlopen( "libvulkan.so", RTLD_NOW | RTLD_LOCAL );
    9106:	be 02 00 00 00       	mov    $0x2,%esi
    910b:	48 8d 05 02 a9 01 00 	lea    0x1a902(%rip),%rax        # 23a14 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3dc>
    9112:	48 89 c7             	mov    %rax,%rdi
    9115:	e8 d6 c1 ff ff       	call   52f0 <dlopen@plt>
    911a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    911e:	48 89 02             	mov    %rax,(%rdx)
        if ( m_library == nullptr )
    9121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9125:	48 8b 00             	mov    (%rax),%rax
    9128:	48 85 c0             	test   %rax,%rax
    912b:	75 1b                	jne    9148 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
        {
          m_library = dlopen( "libvulkan.so.1", RTLD_NOW | RTLD_LOCAL );
    912d:	be 02 00 00 00       	mov    $0x2,%esi
    9132:	48 8d 05 e8 a8 01 00 	lea    0x1a8e8(%rip),%rax        # 23a21 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3e9>
    9139:	48 89 c7             	mov    %rax,%rdi
    913c:	e8 af c1 ff ff       	call   52f0 <dlopen@plt>
    9141:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9145:	48 89 02             	mov    %rax,(%rdx)
#    error unsupported platform
#  endif
      }

#  ifndef VULKAN_HPP_NO_EXCEPTIONS
      if ( m_library == nullptr )
    9148:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    914c:	48 8b 00             	mov    (%rax),%rax
    914f:	48 85 c0             	test   %rax,%rax
    9152:	75 51                	jne    91a5 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe7>
      {
        // NOTE there should be an InitializationFailedError, but msvc insists on the symbol does not exist within the scope of this function.
        throw std::runtime_error( "Failed to load vulkan library!" );
    9154:	bf 10 00 00 00       	mov    $0x10,%edi
    9159:	e8 72 bf ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    915e:	48 89 c3             	mov    %rax,%rbx
    9161:	48 8d 05 c8 a8 01 00 	lea    0x1a8c8(%rip),%rax        # 23a30 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3f8>
    9168:	48 89 c6             	mov    %rax,%rsi
    916b:	48 89 df             	mov    %rbx,%rdi
    916e:	e8 1d bf ff ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
    9173:	48 8b 05 36 ee 02 00 	mov    0x2ee36(%rip),%rax        # 37fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    917a:	48 89 c2             	mov    %rax,%rdx
    917d:	48 8d 05 7c e8 02 00 	lea    0x2e87c(%rip),%rax        # 37a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9184:	48 89 c6             	mov    %rax,%rsi
    9187:	48 89 df             	mov    %rbx,%rdi
    918a:	e8 f1 c1 ff ff       	call   5380 <__cxa_throw@plt>
    918f:	49 89 c4             	mov    %rax,%r12
    9192:	48 89 df             	mov    %rbx,%rdi
    9195:	e8 b6 bf ff ff       	call   5150 <__cxa_free_exception@plt>
    919a:	4c 89 e0             	mov    %r12,%rax
    919d:	48 89 c7             	mov    %rax,%rdi
    91a0:	e8 fb c1 ff ff       	call   53a0 <_Unwind_Resume@plt>
      }
#  endif
    }
    91a5:	90                   	nop
    91a6:	48 83 c4 10          	add    $0x10,%rsp
    91aa:	5b                   	pop    %rbx
    91ab:	41 5c                	pop    %r12
    91ad:	5d                   	pop    %rbp
    91ae:	c3                   	ret
    91af:	90                   	nop

00000000000091b0 <_ZN2vk13DynamicLoaderD1Ev>:
    {
      std::swap( m_library, other.m_library );
      return *this;
    }

    ~DynamicLoader() VULKAN_HPP_NOEXCEPT
    91b0:	55                   	push   %rbp
    91b1:	48 89 e5             	mov    %rsp,%rbp
    91b4:	48 83 ec 10          	sub    $0x10,%rsp
    91b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if ( m_library )
    91bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91c0:	48 8b 00             	mov    (%rax),%rax
    91c3:	48 85 c0             	test   %rax,%rax
    91c6:	74 0f                	je     91d7 <_ZN2vk13DynamicLoaderD1Ev+0x27>
      {
#  if defined( __unix__ ) || defined( __APPLE__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
        dlclose( m_library );
    91c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91cc:	48 8b 00             	mov    (%rax),%rax
    91cf:	48 89 c7             	mov    %rax,%rdi
    91d2:	e8 b9 bf ff ff       	call   5190 <dlclose@plt>
        ::FreeLibrary( m_library );
#  else
#    error unsupported platform
#  endif
      }
    }
    91d7:	90                   	nop
    91d8:	c9                   	leave
    91d9:	c3                   	ret

00000000000091da <_ZN2vk4raii17ContextDispatcherC1EPFPFvvEP12VkInstance_TPKcE>:
    }

    class ContextDispatcher : public DispatchLoaderBase
    {
    public:
      ContextDispatcher( PFN_vkGetInstanceProcAddr getProcAddr )
    91da:	55                   	push   %rbp
    91db:	48 89 e5             	mov    %rsp,%rbp
    91de:	48 83 ec 10          	sub    $0x10,%rsp
    91e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    91e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        //=== VK_VERSION_1_0 ===
        , vkCreateInstance( PFN_vkCreateInstance( getProcAddr( NULL, "vkCreateInstance" ) ) )
        , vkEnumerateInstanceExtensionProperties( PFN_vkEnumerateInstanceExtensionProperties( getProcAddr( NULL, "vkEnumerateInstanceExtensionProperties" ) ) )
        , vkEnumerateInstanceLayerProperties( PFN_vkEnumerateInstanceLayerProperties( getProcAddr( NULL, "vkEnumerateInstanceLayerProperties" ) ) )
        //=== VK_VERSION_1_1 ===
        , vkEnumerateInstanceVersion( PFN_vkEnumerateInstanceVersion( getProcAddr( NULL, "vkEnumerateInstanceVersion" ) ) )
    91ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91ee:	48 89 c7             	mov    %rax,%rdi
    91f1:	e8 a6 d3 ff ff       	call   659c <_ZN2vk18DispatchLoaderBaseC1Ev>
        : vkGetInstanceProcAddr( getProcAddr )
    91f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91fa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    91fe:	48 89 50 10          	mov    %rdx,0x10(%rax)
        , vkCreateInstance( PFN_vkCreateInstance( getProcAddr( NULL, "vkCreateInstance" ) ) )
    9202:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9206:	48 8d 15 5b a8 01 00 	lea    0x1a85b(%rip),%rdx        # 23a68 <_ZNSt8__detailL19__atomic_spin_countE+0x4>
    920d:	48 89 d6             	mov    %rdx,%rsi
    9210:	bf 00 00 00 00       	mov    $0x0,%edi
    9215:	ff d0                	call   *%rax
    9217:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    921b:	48 89 42 18          	mov    %rax,0x18(%rdx)
        , vkEnumerateInstanceExtensionProperties( PFN_vkEnumerateInstanceExtensionProperties( getProcAddr( NULL, "vkEnumerateInstanceExtensionProperties" ) ) )
    921f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9223:	48 8d 15 56 a8 01 00 	lea    0x1a856(%rip),%rdx        # 23a80 <_ZNSt8__detailL19__atomic_spin_countE+0x1c>
    922a:	48 89 d6             	mov    %rdx,%rsi
    922d:	bf 00 00 00 00       	mov    $0x0,%edi
    9232:	ff d0                	call   *%rax
    9234:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9238:	48 89 42 20          	mov    %rax,0x20(%rdx)
        , vkEnumerateInstanceLayerProperties( PFN_vkEnumerateInstanceLayerProperties( getProcAddr( NULL, "vkEnumerateInstanceLayerProperties" ) ) )
    923c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9240:	48 8d 15 61 a8 01 00 	lea    0x1a861(%rip),%rdx        # 23aa8 <_ZNSt8__detailL19__atomic_spin_countE+0x44>
    9247:	48 89 d6             	mov    %rdx,%rsi
    924a:	bf 00 00 00 00       	mov    $0x0,%edi
    924f:	ff d0                	call   *%rax
    9251:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9255:	48 89 42 28          	mov    %rax,0x28(%rdx)
        , vkEnumerateInstanceVersion( PFN_vkEnumerateInstanceVersion( getProcAddr( NULL, "vkEnumerateInstanceVersion" ) ) )
    9259:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    925d:	48 8d 15 67 a8 01 00 	lea    0x1a867(%rip),%rdx        # 23acb <_ZNSt8__detailL19__atomic_spin_countE+0x67>
    9264:	48 89 d6             	mov    %rdx,%rsi
    9267:	bf 00 00 00 00       	mov    $0x0,%edi
    926c:	ff d0                	call   *%rax
    926e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9272:	48 89 42 30          	mov    %rax,0x30(%rdx)
      {
      }
    9276:	90                   	nop
    9277:	c9                   	leave
    9278:	c3                   	ret
    9279:	90                   	nop

000000000000927a <_ZN2vk4raii7ContextC1Ev>:

    class Context
    {
    public:
#  if VULKAN_HPP_ENABLE_DYNAMIC_LOADER_TOOL
      Context()
    927a:	55                   	push   %rbp
    927b:	48 89 e5             	mov    %rsp,%rbp
    927e:	41 54                	push   %r12
    9280:	53                   	push   %rbx
    9281:	48 83 ec 30          	sub    $0x30,%rsp
    9285:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    9289:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    928d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    9291:	48 89 c7             	mov    %rax,%rdi
    9294:	e8 53 d4 ff ff       	call   66ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    9299:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    929d:	48 89 c6             	mov    %rax,%rsi
    92a0:	48 89 df             	mov    %rbx,%rdi
    92a3:	e8 16 fe ff ff       	call   90be <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    92a8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    92ac:	48 89 c7             	mov    %rax,%rdi
    92af:	e8 24 0c 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    92b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    92b8:	48 8d 58 08          	lea    0x8(%rax),%rbx
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    92bc:	bf 38 00 00 00       	mov    $0x38,%edi
    92c1:	e8 5a bf ff ff       	call   5220 <_Znwm@plt>
    92c6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    92ca:	41 bc 01 00 00 00    	mov    $0x1,%r12d
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    92d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    92d4:	48 8d 15 0b a8 01 00 	lea    0x1a80b(%rip),%rdx        # 23ae6 <_ZNSt8__detailL19__atomic_spin_countE+0x82>
    92db:	48 89 d6             	mov    %rdx,%rsi
    92de:	48 89 c7             	mov    %rax,%rdi
    92e1:	e8 dc 0e 00 00       	call   a1c2 <_ZNK2vk13DynamicLoader14getProcAddressIPFPFvvEP12VkInstance_TPKcEEET_S7_>
    92e6:	48 89 c6             	mov    %rax,%rsi
    92e9:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    92ed:	e8 e8 fe ff ff       	call   91da <_ZN2vk4raii17ContextDispatcherC1EPFPFvvEP12VkInstance_TPKcE>
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    92f2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    92f6:	48 89 df             	mov    %rbx,%rdi
    92f9:	e8 12 0f 00 00       	call   a210 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1IS4_vEEPS2_>
#  else
      Context( PFN_vkGetInstanceProcAddr getInstanceProcAddr )
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher( getInstanceProcAddr ) )
#  endif
      {
      }
    92fe:	eb 4c                	jmp    934c <_ZN2vk4raii7ContextC1Ev+0xd2>
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    9300:	48 89 c3             	mov    %rax,%rbx
    9303:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    9307:	48 89 c7             	mov    %rax,%rdi
    930a:	e8 c9 0b 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    930f:	48 89 d8             	mov    %rbx,%rax
    9312:	48 89 c7             	mov    %rax,%rdi
    9315:	e8 86 c0 ff ff       	call   53a0 <_Unwind_Resume@plt>
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    931a:	48 89 c3             	mov    %rax,%rbx
    931d:	45 84 e4             	test   %r12b,%r12b
    9320:	74 13                	je     9335 <_ZN2vk4raii7ContextC1Ev+0xbb>
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    9322:	be 38 00 00 00       	mov    $0x38,%esi
    9327:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    932b:	e8 00 bf ff ff       	call   5230 <_ZdlPvm@plt>
    9330:	eb 03                	jmp    9335 <_ZN2vk4raii7ContextC1Ev+0xbb>
      }
    9332:	48 89 c3             	mov    %rax,%rbx
    9335:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    9339:	48 89 c7             	mov    %rax,%rdi
    933c:	e8 6f fe ff ff       	call   91b0 <_ZN2vk13DynamicLoaderD1Ev>
    9341:	48 89 d8             	mov    %rbx,%rax
    9344:	48 89 c7             	mov    %rax,%rdi
    9347:	e8 54 c0 ff ff       	call   53a0 <_Unwind_Resume@plt>
    934c:	48 83 c4 30          	add    $0x30,%rsp
    9350:	5b                   	pop    %rbx
    9351:	41 5c                	pop    %r12
    9353:	5d                   	pop    %rbp
    9354:	c3                   	ret
    9355:	90                   	nop

0000000000009356 <_ZN2vk4raii8InstanceD1Ev>:
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
      }

      Instance( std::nullptr_t ) {}

      ~Instance()
    9356:	55                   	push   %rbp
    9357:	48 89 e5             	mov    %rsp,%rbp
    935a:	48 83 ec 10          	sub    $0x10,%rsp
    935e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9362:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9366:	48 89 c7             	mov    %rax,%rdi
    9369:	e8 14 00 00 00       	call   9382 <_ZN2vk4raii8Instance5clearEv>
      }
    936e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9372:	48 83 c0 10          	add    $0x10,%rax
    9376:	48 89 c7             	mov    %rax,%rdi
    9379:	e8 1c 0f 00 00       	call   a29a <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev>
    937e:	90                   	nop
    937f:	c9                   	leave
    9380:	c3                   	ret
    9381:	90                   	nop

0000000000009382 <_ZN2vk4raii8Instance5clearEv>:
      VULKAN_HPP_NAMESPACE::Instance const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_instance;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9382:	55                   	push   %rbp
    9383:	48 89 e5             	mov    %rsp,%rbp
    9386:	41 54                	push   %r12
    9388:	53                   	push   %rbx
    9389:	48 83 ec 10          	sub    $0x10,%rsp
    938d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        if ( m_instance )
    9391:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9395:	48 89 c7             	mov    %rax,%rdi
    9398:	e8 09 fd ff ff       	call   90a6 <_ZNK2vk8InstancecvbEv>
    939d:	84 c0                	test   %al,%al
    939f:	74 2d                	je     93ce <_ZN2vk4raii8Instance5clearEv+0x4c>
        {
          getDispatcher()->vkDestroyInstance( static_cast<VkInstance>( m_instance ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    93a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93a5:	48 89 c7             	mov    %rax,%rdi
    93a8:	e8 5d 00 00 00       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
    93ad:	4c 8b 60 10          	mov    0x10(%rax),%r12
    93b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93b5:	48 8b 58 08          	mov    0x8(%rax),%rbx
    93b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93bd:	48 89 c7             	mov    %rax,%rdi
    93c0:	e8 cf fc ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    93c5:	48 89 de             	mov    %rbx,%rsi
    93c8:	48 89 c7             	mov    %rax,%rdi
    93cb:	41 ff d4             	call   *%r12
        }
        m_instance   = nullptr;
    93ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93d2:	be 00 00 00 00       	mov    $0x0,%esi
    93d7:	48 89 c7             	mov    %rax,%rdi
    93da:	e8 97 fc ff ff       	call   9076 <_ZN2vk8InstanceaSEDn>
        m_allocator  = nullptr;
    93df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93e3:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    93ea:	00 
        m_dispatcher = nullptr;
    93eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93ef:	48 83 c0 10          	add    $0x10,%rax
    93f3:	be 00 00 00 00       	mov    $0x0,%esi
    93f8:	48 89 c7             	mov    %rax,%rdi
    93fb:	e8 34 0f 00 00       	call   a334 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEaSEDn>
      }
    9400:	90                   	nop
    9401:	48 83 c4 10          	add    $0x10,%rsp
    9405:	5b                   	pop    %rbx
    9406:	41 5c                	pop    %r12
    9408:	5d                   	pop    %rbp
    9409:	c3                   	ret

000000000000940a <_ZNK2vk4raii8Instance13getDispatcherEv>:

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
    940a:	55                   	push   %rbp
    940b:	48 89 e5             	mov    %rsp,%rbp
    940e:	48 83 ec 10          	sub    $0x10,%rsp
    9412:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9416:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    941a:	48 83 c0 10          	add    $0x10,%rax
    941e:	48 89 c7             	mov    %rax,%rdi
    9421:	e8 36 0f 00 00       	call   a35c <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEptEv>
    9426:	48 89 c7             	mov    %rax,%rdi
    9429:	e8 24 d1 ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    942e:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    9434:	74 28                	je     945e <_ZNK2vk4raii8Instance13getDispatcherEv+0x54>
    9436:	48 8d 05 c3 a6 01 00 	lea    0x1a6c3(%rip),%rax        # 23b00 <_ZNSt8__detailL19__atomic_spin_countE+0x9c>
    943d:	48 89 c1             	mov    %rax,%rcx
    9440:	ba 25 0a 00 00       	mov    $0xa25,%edx
    9445:	48 8d 05 04 a7 01 00 	lea    0x1a704(%rip),%rax        # 23b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    944c:	48 89 c6             	mov    %rax,%rsi
    944f:	48 8d 05 22 a7 01 00 	lea    0x1a722(%rip),%rax        # 23b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9456:	48 89 c7             	mov    %rax,%rdi
    9459:	e8 b2 bc ff ff       	call   5110 <__assert_fail@plt>
        return &*m_dispatcher;
    945e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9462:	48 83 c0 10          	add    $0x10,%rax
    9466:	48 89 c7             	mov    %rax,%rdi
    9469:	e8 08 0f 00 00       	call   a376 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv>
      }
    946e:	c9                   	leave
    946f:	c3                   	ret

0000000000009470 <_ZN2vk4raii14PhysicalDeviceD1Ev>:
      {
      }

      PhysicalDevice( std::nullptr_t ) {}

      ~PhysicalDevice()
    9470:	55                   	push   %rbp
    9471:	48 89 e5             	mov    %rsp,%rbp
    9474:	48 83 ec 10          	sub    $0x10,%rsp
    9478:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    947c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9480:	48 89 c7             	mov    %rax,%rdi
    9483:	e8 04 00 00 00       	call   948c <_ZN2vk4raii14PhysicalDevice5clearEv>
      }
    9488:	90                   	nop
    9489:	c9                   	leave
    948a:	c3                   	ret
    948b:	90                   	nop

000000000000948c <_ZN2vk4raii14PhysicalDevice5clearEv>:
      VULKAN_HPP_NAMESPACE::PhysicalDevice const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_physicalDevice;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    948c:	55                   	push   %rbp
    948d:	48 89 e5             	mov    %rsp,%rbp
    9490:	48 83 ec 10          	sub    $0x10,%rsp
    9494:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        m_physicalDevice = nullptr;
    9498:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    949c:	be 00 00 00 00       	mov    $0x0,%esi
    94a1:	48 89 c7             	mov    %rax,%rdi
    94a4:	e8 af fb ff ff       	call   9058 <_ZN2vk14PhysicalDeviceaSEDn>
        m_dispatcher     = nullptr;
    94a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94ad:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    94b4:	00 
      }
    94b5:	90                   	nop
    94b6:	c9                   	leave
    94b7:	c3                   	ret

00000000000094b8 <_ZN2vk4raii6DeviceD1Ev>:
                                                                                                   static_cast<VkDevice>( m_device ) ) );
      }

      Device( std::nullptr_t ) {}

      ~Device()
    94b8:	55                   	push   %rbp
    94b9:	48 89 e5             	mov    %rsp,%rbp
    94bc:	48 83 ec 10          	sub    $0x10,%rsp
    94c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    94c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94c8:	48 89 c7             	mov    %rax,%rdi
    94cb:	e8 14 00 00 00       	call   94e4 <_ZN2vk4raii6Device5clearEv>
      }
    94d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94d4:	48 83 c0 10          	add    $0x10,%rax
    94d8:	48 89 c7             	mov    %rax,%rdi
    94db:	e8 d8 0e 00 00       	call   a3b8 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev>
    94e0:	90                   	nop
    94e1:	c9                   	leave
    94e2:	c3                   	ret
    94e3:	90                   	nop

00000000000094e4 <_ZN2vk4raii6Device5clearEv>:
      VULKAN_HPP_NAMESPACE::Device const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_device;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    94e4:	55                   	push   %rbp
    94e5:	48 89 e5             	mov    %rsp,%rbp
    94e8:	41 54                	push   %r12
    94ea:	53                   	push   %rbx
    94eb:	48 83 ec 10          	sub    $0x10,%rsp
    94ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        if ( m_device )
    94f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    94f7:	48 89 c7             	mov    %rax,%rdi
    94fa:	e8 41 fb ff ff       	call   9040 <_ZNK2vk6DevicecvbEv>
    94ff:	84 c0                	test   %al,%al
    9501:	74 2d                	je     9530 <_ZN2vk4raii6Device5clearEv+0x4c>
        {
          getDispatcher()->vkDestroyDevice( static_cast<VkDevice>( m_device ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    9503:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9507:	48 89 c7             	mov    %rax,%rdi
    950a:	e8 5d 00 00 00       	call   956c <_ZNK2vk4raii6Device13getDispatcherEv>
    950f:	4c 8b 60 18          	mov    0x18(%rax),%r12
    9513:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9517:	48 8b 58 08          	mov    0x8(%rax),%rbx
    951b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    951f:	48 89 c7             	mov    %rax,%rdi
    9522:	e8 07 fb ff ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
    9527:	48 89 de             	mov    %rbx,%rsi
    952a:	48 89 c7             	mov    %rax,%rdi
    952d:	41 ff d4             	call   *%r12
        }
        m_device     = nullptr;
    9530:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9534:	be 00 00 00 00       	mov    $0x0,%esi
    9539:	48 89 c7             	mov    %rax,%rdi
    953c:	e8 cf fa ff ff       	call   9010 <_ZN2vk6DeviceaSEDn>
        m_allocator  = nullptr;
    9541:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9545:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    954c:	00 
        m_dispatcher = nullptr;
    954d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9551:	48 83 c0 10          	add    $0x10,%rax
    9555:	be 00 00 00 00       	mov    $0x0,%esi
    955a:	48 89 c7             	mov    %rax,%rdi
    955d:	e8 f0 0e 00 00       	call   a452 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEaSEDn>
      }
    9562:	90                   	nop
    9563:	48 83 c4 10          	add    $0x10,%rsp
    9567:	5b                   	pop    %rbx
    9568:	41 5c                	pop    %r12
    956a:	5d                   	pop    %rbp
    956b:	c3                   	ret

000000000000956c <_ZNK2vk4raii6Device13getDispatcherEv>:

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
    956c:	55                   	push   %rbp
    956d:	48 89 e5             	mov    %rsp,%rbp
    9570:	48 83 ec 10          	sub    $0x10,%rsp
    9574:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9578:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    957c:	48 83 c0 10          	add    $0x10,%rax
    9580:	48 89 c7             	mov    %rax,%rdi
    9583:	e8 f2 0e 00 00       	call   a47a <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEptEv>
    9588:	48 89 c7             	mov    %rax,%rdi
    958b:	e8 c2 cf ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    9590:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    9596:	74 28                	je     95c0 <_ZNK2vk4raii6Device13getDispatcherEv+0x54>
    9598:	48 8d 05 11 a6 01 00 	lea    0x1a611(%rip),%rax        # 23bb0 <_ZNSt8__detailL19__atomic_spin_countE+0x14c>
    959f:	48 89 c1             	mov    %rax,%rcx
    95a2:	ba d7 0c 00 00       	mov    $0xcd7,%edx
    95a7:	48 8d 05 a2 a5 01 00 	lea    0x1a5a2(%rip),%rax        # 23b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    95ae:	48 89 c6             	mov    %rax,%rsi
    95b1:	48 8d 05 c0 a5 01 00 	lea    0x1a5c0(%rip),%rax        # 23b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    95b8:	48 89 c7             	mov    %rax,%rdi
    95bb:	e8 50 bb ff ff       	call   5110 <__assert_fail@plt>
        return &*m_dispatcher;
    95c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    95c4:	48 83 c0 10          	add    $0x10,%rax
    95c8:	48 89 c7             	mov    %rax,%rdi
    95cb:	e8 c4 0e 00 00       	call   a494 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv>
      }
    95d0:	c9                   	leave
    95d1:	c3                   	ret

00000000000095d2 <_ZN2vk4raii11CommandPoolD1Ev>:
      {
      }

      CommandPool( std::nullptr_t ) {}

      ~CommandPool()
    95d2:	55                   	push   %rbp
    95d3:	48 89 e5             	mov    %rsp,%rbp
    95d6:	48 83 ec 10          	sub    $0x10,%rsp
    95da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    95de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    95e2:	48 89 c7             	mov    %rax,%rdi
    95e5:	e8 04 00 00 00       	call   95ee <_ZN2vk4raii11CommandPool5clearEv>
      }
    95ea:	90                   	nop
    95eb:	c9                   	leave
    95ec:	c3                   	ret
    95ed:	90                   	nop

00000000000095ee <_ZN2vk4raii11CommandPool5clearEv>:
      VULKAN_HPP_NAMESPACE::CommandPool const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_commandPool;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    95ee:	55                   	push   %rbp
    95ef:	48 89 e5             	mov    %rsp,%rbp
    95f2:	41 55                	push   %r13
    95f4:	41 54                	push   %r12
    95f6:	53                   	push   %rbx
    95f7:	48 83 ec 18          	sub    $0x18,%rsp
    95fb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_commandPool )
    95ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9603:	48 83 c0 08          	add    $0x8,%rax
    9607:	48 89 c7             	mov    %rax,%rdi
    960a:	e8 cb f9 ff ff       	call   8fda <_ZNK2vk11CommandPoolcvbEv>
    960f:	84 c0                	test   %al,%al
    9611:	74 46                	je     9659 <_ZN2vk4raii11CommandPool5clearEv+0x6b>
        {
          getDispatcher()->vkDestroyCommandPool(
    9613:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9617:	48 89 c7             	mov    %rax,%rdi
    961a:	e8 85 00 00 00       	call   96a4 <_ZNK2vk4raii11CommandPool13getDispatcherEv>
    961f:	4c 8b a0 40 02 00 00 	mov    0x240(%rax),%r12
            static_cast<VkDevice>( m_device ), static_cast<VkCommandPool>( m_commandPool ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    9626:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    962a:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroyCommandPool(
    962e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9632:	48 83 c0 08          	add    $0x8,%rax
    9636:	48 89 c7             	mov    %rax,%rdi
    9639:	e8 8a f9 ff ff       	call   8fc8 <_ZNK2vk11CommandPoolcvP15VkCommandPool_TEv>
    963e:	49 89 c5             	mov    %rax,%r13
    9641:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9645:	48 89 c7             	mov    %rax,%rdi
    9648:	e8 e1 f9 ff ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
    964d:	48 89 da             	mov    %rbx,%rdx
    9650:	4c 89 ee             	mov    %r13,%rsi
    9653:	48 89 c7             	mov    %rax,%rdi
    9656:	41 ff d4             	call   *%r12
        }
        m_device      = nullptr;
    9659:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    965d:	be 00 00 00 00       	mov    $0x0,%esi
    9662:	48 89 c7             	mov    %rax,%rdi
    9665:	e8 a6 f9 ff ff       	call   9010 <_ZN2vk6DeviceaSEDn>
        m_commandPool = nullptr;
    966a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    966e:	48 83 c0 08          	add    $0x8,%rax
    9672:	be 00 00 00 00       	mov    $0x0,%esi
    9677:	48 89 c7             	mov    %rax,%rdi
    967a:	e8 2b f9 ff ff       	call   8faa <_ZN2vk11CommandPoolaSEDn>
        m_allocator   = nullptr;
    967f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9683:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    968a:	00 
        m_dispatcher  = nullptr;
    968b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    968f:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    9696:	00 
      }
    9697:	90                   	nop
    9698:	48 83 c4 18          	add    $0x18,%rsp
    969c:	5b                   	pop    %rbx
    969d:	41 5c                	pop    %r12
    969f:	41 5d                	pop    %r13
    96a1:	5d                   	pop    %rbp
    96a2:	c3                   	ret
    96a3:	90                   	nop

00000000000096a4 <_ZNK2vk4raii11CommandPool13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Device getDevice() const
      {
        return m_device;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
    96a4:	55                   	push   %rbp
    96a5:	48 89 e5             	mov    %rsp,%rbp
    96a8:	48 83 ec 10          	sub    $0x10,%rsp
    96ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    96b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96b4:	48 8b 40 18          	mov    0x18(%rax),%rax
    96b8:	48 89 c7             	mov    %rax,%rdi
    96bb:	e8 92 ce ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    96c0:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    96c6:	74 28                	je     96f0 <_ZNK2vk4raii11CommandPool13getDispatcherEv+0x4c>
    96c8:	48 8d 05 31 a5 01 00 	lea    0x1a531(%rip),%rax        # 23c00 <_ZNSt8__detailL19__atomic_spin_countE+0x19c>
    96cf:	48 89 c1             	mov    %rax,%rcx
    96d2:	ba 77 12 00 00       	mov    $0x1277,%edx
    96d7:	48 8d 05 72 a4 01 00 	lea    0x1a472(%rip),%rax        # 23b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    96de:	48 89 c6             	mov    %rax,%rsi
    96e1:	48 8d 05 90 a4 01 00 	lea    0x1a490(%rip),%rax        # 23b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    96e8:	48 89 c7             	mov    %rax,%rdi
    96eb:	e8 20 ba ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    96f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96f4:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    96f8:	c9                   	leave
    96f9:	c3                   	ret

00000000000096fa <_ZN2vk4raii22DebugUtilsMessengerEXTD1Ev>:
      {
      }

      DebugUtilsMessengerEXT( std::nullptr_t ) {}

      ~DebugUtilsMessengerEXT()
    96fa:	55                   	push   %rbp
    96fb:	48 89 e5             	mov    %rsp,%rbp
    96fe:	48 83 ec 10          	sub    $0x10,%rsp
    9702:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9706:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    970a:	48 89 c7             	mov    %rax,%rdi
    970d:	e8 04 00 00 00       	call   9716 <_ZN2vk4raii22DebugUtilsMessengerEXT5clearEv>
      }
    9712:	90                   	nop
    9713:	c9                   	leave
    9714:	c3                   	ret
    9715:	90                   	nop

0000000000009716 <_ZN2vk4raii22DebugUtilsMessengerEXT5clearEv>:
      VULKAN_HPP_NAMESPACE::DebugUtilsMessengerEXT const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_messenger;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9716:	55                   	push   %rbp
    9717:	48 89 e5             	mov    %rsp,%rbp
    971a:	41 55                	push   %r13
    971c:	41 54                	push   %r12
    971e:	53                   	push   %rbx
    971f:	48 83 ec 18          	sub    $0x18,%rsp
    9723:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_messenger )
    9727:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    972b:	48 83 c0 08          	add    $0x8,%rax
    972f:	48 89 c7             	mov    %rax,%rdi
    9732:	e8 5b f8 ff ff       	call   8f92 <_ZNK2vk22DebugUtilsMessengerEXTcvbEv>
    9737:	84 c0                	test   %al,%al
    9739:	74 46                	je     9781 <_ZN2vk4raii22DebugUtilsMessengerEXT5clearEv+0x6b>
        {
          getDispatcher()->vkDestroyDebugUtilsMessengerEXT( static_cast<VkInstance>( m_instance ),
    973b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    973f:	48 89 c7             	mov    %rax,%rdi
    9742:	e8 85 00 00 00       	call   97cc <_ZNK2vk4raii22DebugUtilsMessengerEXT13getDispatcherEv>
    9747:	4c 8b a0 20 01 00 00 	mov    0x120(%rax),%r12
                                                            static_cast<VkDebugUtilsMessengerEXT>( m_messenger ),
                                                            reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    974e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9752:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroyDebugUtilsMessengerEXT( static_cast<VkInstance>( m_instance ),
    9756:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    975a:	48 83 c0 08          	add    $0x8,%rax
    975e:	48 89 c7             	mov    %rax,%rdi
    9761:	e8 1a f8 ff ff       	call   8f80 <_ZNK2vk22DebugUtilsMessengerEXTcvP26VkDebugUtilsMessengerEXT_TEv>
    9766:	49 89 c5             	mov    %rax,%r13
    9769:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    976d:	48 89 c7             	mov    %rax,%rdi
    9770:	e8 1f f9 ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    9775:	48 89 da             	mov    %rbx,%rdx
    9778:	4c 89 ee             	mov    %r13,%rsi
    977b:	48 89 c7             	mov    %rax,%rdi
    977e:	41 ff d4             	call   *%r12
        }
        m_instance   = nullptr;
    9781:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9785:	be 00 00 00 00       	mov    $0x0,%esi
    978a:	48 89 c7             	mov    %rax,%rdi
    978d:	e8 e4 f8 ff ff       	call   9076 <_ZN2vk8InstanceaSEDn>
        m_messenger  = nullptr;
    9792:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9796:	48 83 c0 08          	add    $0x8,%rax
    979a:	be 00 00 00 00       	mov    $0x0,%esi
    979f:	48 89 c7             	mov    %rax,%rdi
    97a2:	e8 bb f7 ff ff       	call   8f62 <_ZN2vk22DebugUtilsMessengerEXTaSEDn>
        m_allocator  = nullptr;
    97a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    97ab:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    97b2:	00 
        m_dispatcher = nullptr;
    97b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    97b7:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    97be:	00 
      }
    97bf:	90                   	nop
    97c0:	48 83 c4 18          	add    $0x18,%rsp
    97c4:	5b                   	pop    %rbx
    97c5:	41 5c                	pop    %r12
    97c7:	41 5d                	pop    %r13
    97c9:	5d                   	pop    %rbp
    97ca:	c3                   	ret
    97cb:	90                   	nop

00000000000097cc <_ZNK2vk4raii22DebugUtilsMessengerEXT13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Instance getInstance() const
      {
        return m_instance;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
    97cc:	55                   	push   %rbp
    97cd:	48 89 e5             	mov    %rsp,%rbp
    97d0:	48 83 ec 10          	sub    $0x10,%rsp
    97d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    97d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    97dc:	48 8b 40 18          	mov    0x18(%rax),%rax
    97e0:	48 89 c7             	mov    %rax,%rdi
    97e3:	e8 6a cd ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    97e8:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    97ee:	74 28                	je     9818 <_ZNK2vk4raii22DebugUtilsMessengerEXT13getDispatcherEv+0x4c>
    97f0:	48 8d 05 59 a4 01 00 	lea    0x1a459(%rip),%rax        # 23c50 <_ZNSt8__detailL19__atomic_spin_countE+0x1ec>
    97f7:	48 89 c1             	mov    %rax,%rcx
    97fa:	ba f5 17 00 00       	mov    $0x17f5,%edx
    97ff:	48 8d 05 4a a3 01 00 	lea    0x1a34a(%rip),%rax        # 23b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    9806:	48 89 c6             	mov    %rax,%rsi
    9809:	48 8d 05 68 a3 01 00 	lea    0x1a368(%rip),%rax        # 23b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9810:	48 89 c7             	mov    %rax,%rdi
    9813:	e8 f8 b8 ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    9818:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    981c:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    9820:	c9                   	leave
    9821:	c3                   	ret

0000000000009822 <_ZN2vk4raii5QueueD1Ev>:
      {
      }

      Queue( std::nullptr_t ) {}

      ~Queue()
    9822:	55                   	push   %rbp
    9823:	48 89 e5             	mov    %rsp,%rbp
    9826:	48 83 ec 10          	sub    $0x10,%rsp
    982a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    982e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9832:	48 89 c7             	mov    %rax,%rdi
    9835:	e8 04 00 00 00       	call   983e <_ZN2vk4raii5Queue5clearEv>
      }
    983a:	90                   	nop
    983b:	c9                   	leave
    983c:	c3                   	ret
    983d:	90                   	nop

000000000000983e <_ZN2vk4raii5Queue5clearEv>:
      VULKAN_HPP_NAMESPACE::Queue const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_queue;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    983e:	55                   	push   %rbp
    983f:	48 89 e5             	mov    %rsp,%rbp
    9842:	48 83 ec 10          	sub    $0x10,%rsp
    9846:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        m_queue      = nullptr;
    984a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    984e:	be 00 00 00 00       	mov    $0x0,%esi
    9853:	48 89 c7             	mov    %rax,%rdi
    9856:	e8 97 f7 ff ff       	call   8ff2 <_ZN2vk5QueueaSEDn>
        m_dispatcher = nullptr;
    985b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    985f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9866:	00 
      }
    9867:	90                   	nop
    9868:	c9                   	leave
    9869:	c3                   	ret

000000000000986a <_ZN2vk4raii10SurfaceKHRD1Ev>:
      {
      }

      SurfaceKHR( std::nullptr_t ) {}

      ~SurfaceKHR()
    986a:	55                   	push   %rbp
    986b:	48 89 e5             	mov    %rsp,%rbp
    986e:	48 83 ec 10          	sub    $0x10,%rsp
    9872:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    987a:	48 89 c7             	mov    %rax,%rdi
    987d:	e8 04 00 00 00       	call   9886 <_ZN2vk4raii10SurfaceKHR5clearEv>
      }
    9882:	90                   	nop
    9883:	c9                   	leave
    9884:	c3                   	ret
    9885:	90                   	nop

0000000000009886 <_ZN2vk4raii10SurfaceKHR5clearEv>:
      VULKAN_HPP_NAMESPACE::SurfaceKHR const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_surface;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9886:	55                   	push   %rbp
    9887:	48 89 e5             	mov    %rsp,%rbp
    988a:	41 55                	push   %r13
    988c:	41 54                	push   %r12
    988e:	53                   	push   %rbx
    988f:	48 83 ec 18          	sub    $0x18,%rsp
    9893:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_surface )
    9897:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    989b:	48 83 c0 08          	add    $0x8,%rax
    989f:	48 89 c7             	mov    %rax,%rdi
    98a2:	e8 a3 f6 ff ff       	call   8f4a <_ZNK2vk10SurfaceKHRcvbEv>
    98a7:	84 c0                	test   %al,%al
    98a9:	74 46                	je     98f1 <_ZN2vk4raii10SurfaceKHR5clearEv+0x6b>
        {
          getDispatcher()->vkDestroySurfaceKHR(
    98ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98af:	48 89 c7             	mov    %rax,%rdi
    98b2:	e8 85 00 00 00       	call   993c <_ZNK2vk4raii10SurfaceKHR13getDispatcherEv>
    98b7:	4c 8b a0 70 02 00 00 	mov    0x270(%rax),%r12
            static_cast<VkInstance>( m_instance ), static_cast<VkSurfaceKHR>( m_surface ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    98be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98c2:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroySurfaceKHR(
    98c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98ca:	48 83 c0 08          	add    $0x8,%rax
    98ce:	48 89 c7             	mov    %rax,%rdi
    98d1:	e8 62 f6 ff ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
    98d6:	49 89 c5             	mov    %rax,%r13
    98d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98dd:	48 89 c7             	mov    %rax,%rdi
    98e0:	e8 af f7 ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    98e5:	48 89 da             	mov    %rbx,%rdx
    98e8:	4c 89 ee             	mov    %r13,%rsi
    98eb:	48 89 c7             	mov    %rax,%rdi
    98ee:	41 ff d4             	call   *%r12
        }
        m_instance   = nullptr;
    98f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98f5:	be 00 00 00 00       	mov    $0x0,%esi
    98fa:	48 89 c7             	mov    %rax,%rdi
    98fd:	e8 74 f7 ff ff       	call   9076 <_ZN2vk8InstanceaSEDn>
        m_surface    = nullptr;
    9902:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9906:	48 83 c0 08          	add    $0x8,%rax
    990a:	be 00 00 00 00       	mov    $0x0,%esi
    990f:	48 89 c7             	mov    %rax,%rdi
    9912:	e8 03 f6 ff ff       	call   8f1a <_ZN2vk10SurfaceKHRaSEDn>
        m_allocator  = nullptr;
    9917:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    991b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9922:	00 
        m_dispatcher = nullptr;
    9923:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9927:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    992e:	00 
      }
    992f:	90                   	nop
    9930:	48 83 c4 18          	add    $0x18,%rsp
    9934:	5b                   	pop    %rbx
    9935:	41 5c                	pop    %r12
    9937:	41 5d                	pop    %r13
    9939:	5d                   	pop    %rbp
    993a:	c3                   	ret
    993b:	90                   	nop

000000000000993c <_ZNK2vk4raii10SurfaceKHR13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Instance getInstance() const
      {
        return m_instance;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
    993c:	55                   	push   %rbp
    993d:	48 89 e5             	mov    %rsp,%rbp
    9940:	48 83 ec 10          	sub    $0x10,%rsp
    9944:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9948:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    994c:	48 8b 40 18          	mov    0x18(%rax),%rax
    9950:	48 89 c7             	mov    %rax,%rdi
    9953:	e8 fa cb ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    9958:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    995e:	74 28                	je     9988 <_ZNK2vk4raii10SurfaceKHR13getDispatcherEv+0x4c>
    9960:	48 8d 05 49 a3 01 00 	lea    0x1a349(%rip),%rax        # 23cb0 <_ZNSt8__detailL19__atomic_spin_countE+0x24c>
    9967:	48 89 c1             	mov    %rax,%rcx
    996a:	ba ca 27 00 00       	mov    $0x27ca,%edx
    996f:	48 8d 05 da a1 01 00 	lea    0x1a1da(%rip),%rax        # 23b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    9976:	48 89 c6             	mov    %rax,%rsi
    9979:	48 8d 05 f8 a1 01 00 	lea    0x1a1f8(%rip),%rax        # 23b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9980:	48 89 c7             	mov    %rax,%rdi
    9983:	e8 88 b7 ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    9988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    998c:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    9990:	c9                   	leave
    9991:	c3                   	ret

0000000000009992 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
    9992:	55                   	push   %rbp
    9993:	48 89 e5             	mov    %rsp,%rbp
    9996:	48 83 ec 20          	sub    $0x20,%rsp
    999a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      std::size_t __i = 0;
    999e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    99a5:	00 
      while (!eq(__p[__i], char_type()))
    99a6:	eb 05                	jmp    99ad <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x1b>
        ++__i;
    99a8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
      while (!eq(__p[__i], char_type()))
    99ad:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
    99b1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    99b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99b9:	48 01 c2             	add    %rax,%rdx
    99bc:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
    99c0:	48 89 c6             	mov    %rax,%rsi
    99c3:	48 89 d7             	mov    %rdx,%rdi
    99c6:	e8 0d 00 00 00       	call   99d8 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
    99cb:	83 f0 01             	xor    $0x1,%eax
    99ce:	84 c0                	test   %al,%al
    99d0:	75 d6                	jne    99a8 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x16>
      return __i;
    99d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    99d6:	c9                   	leave
    99d7:	c3                   	ret

00000000000099d8 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
    99d8:	55                   	push   %rbp
    99d9:	48 89 e5             	mov    %rsp,%rbp
    99dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    99e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
    99e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99e8:	0f b6 10             	movzbl (%rax),%edx
    99eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    99ef:	0f b6 00             	movzbl (%rax),%eax
    99f2:	38 c2                	cmp    %al,%dl
    99f4:	0f 94 c0             	sete   %al
    99f7:	5d                   	pop    %rbp
    99f8:	c3                   	ret
    99f9:	90                   	nop

00000000000099fa <_ZN4rtvc4GLFWC1Ev>:
    "VK_LAYER_KHRONOS_validation";
inline constexpr std::string_view mangohudLayerName =
    "VK_LAYER_MANGOHUD_overlay";

struct GLFW {
  GLFW() { glfwInit(); }
    99fa:	55                   	push   %rbp
    99fb:	48 89 e5             	mov    %rsp,%rbp
    99fe:	48 83 ec 10          	sub    $0x10,%rsp
    9a02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a06:	e8 85 b8 ff ff       	call   5290 <glfwInit@plt>
    9a0b:	90                   	nop
    9a0c:	c9                   	leave
    9a0d:	c3                   	ret

0000000000009a0e <_ZN4rtvc4GLFWD1Ev>:
  ~GLFW() { glfwTerminate(); }
    9a0e:	55                   	push   %rbp
    9a0f:	48 89 e5             	mov    %rsp,%rbp
    9a12:	48 83 ec 10          	sub    $0x10,%rsp
    9a16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a1a:	e8 21 b8 ff ff       	call   5240 <glfwTerminate@plt>
    9a1f:	90                   	nop
    9a20:	c9                   	leave
    9a21:	c3                   	ret

0000000000009a22 <_ZN4rtvc6WindowC1Ev>:

class Window {
  typedef GLFWwindow *pGLFWwindow;

public:
  Window() {
    9a22:	55                   	push   %rbp
    9a23:	48 89 e5             	mov    %rsp,%rbp
    9a26:	48 83 ec 10          	sub    $0x10,%rsp
    9a2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
    9a2e:	be 00 00 00 00       	mov    $0x0,%esi
    9a33:	bf 01 20 02 00       	mov    $0x22001,%edi
    9a38:	e8 73 b7 ff ff       	call   51b0 <glfwWindowHint@plt>
    glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
    9a3d:	be 00 00 00 00       	mov    $0x0,%esi
    9a42:	bf 03 00 02 00       	mov    $0x20003,%edi
    9a47:	e8 64 b7 ff ff       	call   51b0 <glfwWindowHint@plt>
    _window = glfwCreateWindow(800, 600, "VulkanApplication", nullptr, nullptr);
    9a4c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    9a52:	b9 00 00 00 00       	mov    $0x0,%ecx
    9a57:	48 8d 05 a2 a2 01 00 	lea    0x1a2a2(%rip),%rax        # 23d00 <_ZNSt8__detailL19__atomic_spin_countE+0x29c>
    9a5e:	48 89 c2             	mov    %rax,%rdx
    9a61:	be 58 02 00 00       	mov    $0x258,%esi
    9a66:	bf 20 03 00 00       	mov    $0x320,%edi
    9a6b:	e8 e0 b8 ff ff       	call   5350 <glfwCreateWindow@plt>
    9a70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9a74:	48 89 02             	mov    %rax,(%rdx)
  }
    9a77:	90                   	nop
    9a78:	c9                   	leave
    9a79:	c3                   	ret

0000000000009a7a <_ZN4rtvc6WindowD1Ev>:
  ~Window() { glfwDestroyWindow(_window); }
    9a7a:	55                   	push   %rbp
    9a7b:	48 89 e5             	mov    %rsp,%rbp
    9a7e:	48 83 ec 10          	sub    $0x10,%rsp
    9a82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a8a:	48 8b 00             	mov    (%rax),%rax
    9a8d:	48 89 c7             	mov    %rax,%rdi
    9a90:	e8 cb b5 ff ff       	call   5060 <glfwDestroyWindow@plt>
    9a95:	90                   	nop
    9a96:	c9                   	leave
    9a97:	c3                   	ret

0000000000009a98 <_ZNK4rtvc6WindowdeEv>:
  Window(const Window &) = delete;
  Window(Window &&) = delete;
  Window &operator=(const Window &) = delete;
  Window &operator=(Window &&) = delete;

  pGLFWwindow operator*() const noexcept { return _window; }
    9a98:	55                   	push   %rbp
    9a99:	48 89 e5             	mov    %rsp,%rbp
    9a9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9aa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9aa4:	48 8b 00             	mov    (%rax),%rax
    9aa7:	5d                   	pop    %rbp
    9aa8:	c3                   	ret
    9aa9:	90                   	nop

0000000000009aaa <_ZN2vk4raii7ContextD1Ev>:
      ~Context() = default;
    9aaa:	55                   	push   %rbp
    9aab:	48 89 e5             	mov    %rsp,%rbp
    9aae:	48 83 ec 10          	sub    $0x10,%rsp
    9ab2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9ab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9aba:	48 83 c0 08          	add    $0x8,%rax
    9abe:	48 89 c7             	mov    %rax,%rdi
    9ac1:	e8 70 07 00 00       	call   a236 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EED1Ev>
    9ac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9aca:	48 89 c7             	mov    %rax,%rdi
    9acd:	e8 de f6 ff ff       	call   91b0 <_ZN2vk13DynamicLoaderD1Ev>
    9ad2:	90                   	nop
    9ad3:	c9                   	leave
    9ad4:	c3                   	ret
    9ad5:	90                   	nop

0000000000009ad6 <_ZN4rtvc13DeviceWrapperD1Ev>:

private:
  pGLFWwindow _window;
};

struct DeviceWrapper {
    9ad6:	55                   	push   %rbp
    9ad7:	48 89 e5             	mov    %rsp,%rbp
    9ada:	48 83 ec 10          	sub    $0x10,%rsp
    9ade:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9ae2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ae6:	48 83 c0 28          	add    $0x28,%rax
    9aea:	48 89 c7             	mov    %rax,%rdi
    9aed:	e8 c6 f9 ff ff       	call   94b8 <_ZN2vk4raii6DeviceD1Ev>
    9af2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9af6:	48 83 c0 18          	add    $0x18,%rax
    9afa:	48 89 c7             	mov    %rax,%rdi
    9afd:	e8 6e f9 ff ff       	call   9470 <_ZN2vk4raii14PhysicalDeviceD1Ev>
    9b02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b06:	48 83 c0 08          	add    $0x8,%rax
    9b0a:	48 89 c7             	mov    %rax,%rdi
    9b0d:	e8 10 fd ff ff       	call   9822 <_ZN2vk4raii5QueueD1Ev>
    9b12:	90                   	nop
    9b13:	c9                   	leave
    9b14:	c3                   	ret
    9b15:	90                   	nop

0000000000009b16 <_ZN4rtvc9VulkanApp6renderEv>:
  VulkanApp(const VulkanApp &) = delete;
  VulkanApp(VulkanApp &&) = delete;
  VulkanApp &operator=(const VulkanApp &) = delete;
  VulkanApp &operator=(VulkanApp &&) = delete;

  void render() {
    9b16:	55                   	push   %rbp
    9b17:	48 89 e5             	mov    %rsp,%rbp
    9b1a:	48 83 ec 10          	sub    $0x10,%rsp
    9b1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    while (!glfwWindowShouldClose(*_window)) {
    9b22:	eb 05                	jmp    9b29 <_ZN4rtvc9VulkanApp6renderEv+0x13>
      glfwPollEvents();
    9b24:	e8 d7 b6 ff ff       	call   5200 <glfwPollEvents@plt>
    while (!glfwWindowShouldClose(*_window)) {
    9b29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b2d:	48 83 c0 18          	add    $0x18,%rax
    9b31:	48 89 c7             	mov    %rax,%rdi
    9b34:	e8 5f ff ff ff       	call   9a98 <_ZNK4rtvc6WindowdeEv>
    9b39:	48 89 c7             	mov    %rax,%rdi
    9b3c:	e8 af b8 ff ff       	call   53f0 <glfwWindowShouldClose@plt>
    9b41:	85 c0                	test   %eax,%eax
    9b43:	0f 94 c0             	sete   %al
    9b46:	84 c0                	test   %al,%al
    9b48:	75 da                	jne    9b24 <_ZN4rtvc9VulkanApp6renderEv+0xe>
    }
  }
    9b4a:	90                   	nop
    9b4b:	90                   	nop
    9b4c:	c9                   	leave
    9b4d:	c3                   	ret

0000000000009b4e <_ZN4rtvc9VulkanAppC1Ev>:
  VulkanApp() = default;
    9b4e:	55                   	push   %rbp
    9b4f:	48 89 e5             	mov    %rsp,%rbp
    9b52:	53                   	push   %rbx
    9b53:	48 83 ec 18          	sub    $0x18,%rsp
    9b57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9b5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b5f:	48 89 c7             	mov    %rax,%rdi
    9b62:	e8 13 f7 ff ff       	call   927a <_ZN2vk4raii7ContextC1Ev>
    9b67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b6b:	48 83 c0 10          	add    $0x10,%rax
    9b6f:	48 89 c7             	mov    %rax,%rdi
    9b72:	e8 83 fe ff ff       	call   99fa <_ZN4rtvc4GLFWC1Ev>
    9b77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b7b:	48 83 c0 18          	add    $0x18,%rax
    9b7f:	48 89 c7             	mov    %rax,%rdi
    9b82:	e8 9b fe ff ff       	call   9a22 <_ZN4rtvc6WindowC1Ev>
    9b87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b8b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9b8f:	48 83 c2 20          	add    $0x20,%rdx
    9b93:	48 89 c6             	mov    %rax,%rsi
    9b96:	48 89 d7             	mov    %rdx,%rdi
    9b99:	e8 c8 53 01 00       	call   1ef66 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE>
    9b9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ba2:	48 8d 50 20          	lea    0x20(%rax),%rdx
    9ba6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9baa:	48 83 c0 38          	add    $0x38,%rax
    9bae:	48 89 d6             	mov    %rdx,%rsi
    9bb1:	48 89 c7             	mov    %rax,%rdi
    9bb4:	e8 ee 57 01 00       	call   1f3a7 <_ZN4rtvc18makeDebugMessengerERKN2vk4raii8InstanceE>
    9bb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bbd:	48 8d 50 18          	lea    0x18(%rax),%rdx
    9bc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bc5:	48 8d 48 20          	lea    0x20(%rax),%rcx
    9bc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bcd:	48 83 c0 58          	add    $0x58,%rax
    9bd1:	48 89 ce             	mov    %rcx,%rsi
    9bd4:	48 89 c7             	mov    %rax,%rdi
    9bd7:	e8 16 58 01 00       	call   1f3f2 <_ZN4rtvc11makeSurfaceERKN2vk4raii8InstanceERKNS_6WindowE>
    9bdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9be0:	48 8d 50 58          	lea    0x58(%rax),%rdx
    9be4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9be8:	48 8d 48 20          	lea    0x20(%rax),%rcx
    9bec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bf0:	48 83 c0 78          	add    $0x78,%rax
    9bf4:	48 89 ce             	mov    %rcx,%rsi
    9bf7:	48 89 c7             	mov    %rax,%rdi
    9bfa:	e8 28 3f 00 00       	call   db27 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE>
    9bff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c03:	48 8d 50 78          	lea    0x78(%rax),%rdx
    9c07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c0b:	48 05 b8 00 00 00    	add    $0xb8,%rax
    9c11:	48 89 d6             	mov    %rdx,%rsi
    9c14:	48 89 c7             	mov    %rax,%rdi
    9c17:	e8 ba 44 01 00       	call   1e0d6 <_ZN4rtvc15makeCommandPoolERKNS_13DeviceWrapperE>
    9c1c:	e9 98 00 00 00       	jmp    9cb9 <_ZN4rtvc9VulkanAppC1Ev+0x16b>
    9c21:	48 89 c3             	mov    %rax,%rbx
    9c24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c28:	48 83 c0 78          	add    $0x78,%rax
    9c2c:	48 89 c7             	mov    %rax,%rdi
    9c2f:	e8 a2 fe ff ff       	call   9ad6 <_ZN4rtvc13DeviceWrapperD1Ev>
    9c34:	eb 03                	jmp    9c39 <_ZN4rtvc9VulkanAppC1Ev+0xeb>
    9c36:	48 89 c3             	mov    %rax,%rbx
    9c39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c3d:	48 83 c0 58          	add    $0x58,%rax
    9c41:	48 89 c7             	mov    %rax,%rdi
    9c44:	e8 21 fc ff ff       	call   986a <_ZN2vk4raii10SurfaceKHRD1Ev>
    9c49:	eb 03                	jmp    9c4e <_ZN4rtvc9VulkanAppC1Ev+0x100>
    9c4b:	48 89 c3             	mov    %rax,%rbx
    9c4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c52:	48 83 c0 38          	add    $0x38,%rax
    9c56:	48 89 c7             	mov    %rax,%rdi
    9c59:	e8 9c fa ff ff       	call   96fa <_ZN2vk4raii22DebugUtilsMessengerEXTD1Ev>
    9c5e:	eb 03                	jmp    9c63 <_ZN4rtvc9VulkanAppC1Ev+0x115>
    9c60:	48 89 c3             	mov    %rax,%rbx
    9c63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c67:	48 83 c0 20          	add    $0x20,%rax
    9c6b:	48 89 c7             	mov    %rax,%rdi
    9c6e:	e8 e3 f6 ff ff       	call   9356 <_ZN2vk4raii8InstanceD1Ev>
    9c73:	eb 03                	jmp    9c78 <_ZN4rtvc9VulkanAppC1Ev+0x12a>
    9c75:	48 89 c3             	mov    %rax,%rbx
    9c78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c7c:	48 83 c0 18          	add    $0x18,%rax
    9c80:	48 89 c7             	mov    %rax,%rdi
    9c83:	e8 f2 fd ff ff       	call   9a7a <_ZN4rtvc6WindowD1Ev>
    9c88:	eb 03                	jmp    9c8d <_ZN4rtvc9VulkanAppC1Ev+0x13f>
    9c8a:	48 89 c3             	mov    %rax,%rbx
    9c8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c91:	48 83 c0 10          	add    $0x10,%rax
    9c95:	48 89 c7             	mov    %rax,%rdi
    9c98:	e8 71 fd ff ff       	call   9a0e <_ZN4rtvc4GLFWD1Ev>
    9c9d:	eb 03                	jmp    9ca2 <_ZN4rtvc9VulkanAppC1Ev+0x154>
    9c9f:	48 89 c3             	mov    %rax,%rbx
    9ca2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ca6:	48 89 c7             	mov    %rax,%rdi
    9ca9:	e8 fc fd ff ff       	call   9aaa <_ZN2vk4raii7ContextD1Ev>
    9cae:	48 89 d8             	mov    %rbx,%rax
    9cb1:	48 89 c7             	mov    %rax,%rdi
    9cb4:	e8 e7 b6 ff ff       	call   53a0 <_Unwind_Resume@plt>
    9cb9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9cbd:	c9                   	leave
    9cbe:	c3                   	ret
    9cbf:	90                   	nop

0000000000009cc0 <_ZN4rtvc9VulkanAppD1Ev>:
  ~VulkanApp() = default;
    9cc0:	55                   	push   %rbp
    9cc1:	48 89 e5             	mov    %rsp,%rbp
    9cc4:	48 83 ec 10          	sub    $0x10,%rsp
    9cc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9ccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9cd0:	48 05 b8 00 00 00    	add    $0xb8,%rax
    9cd6:	48 89 c7             	mov    %rax,%rdi
    9cd9:	e8 f4 f8 ff ff       	call   95d2 <_ZN2vk4raii11CommandPoolD1Ev>
    9cde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ce2:	48 83 c0 78          	add    $0x78,%rax
    9ce6:	48 89 c7             	mov    %rax,%rdi
    9ce9:	e8 e8 fd ff ff       	call   9ad6 <_ZN4rtvc13DeviceWrapperD1Ev>
    9cee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9cf2:	48 83 c0 58          	add    $0x58,%rax
    9cf6:	48 89 c7             	mov    %rax,%rdi
    9cf9:	e8 6c fb ff ff       	call   986a <_ZN2vk4raii10SurfaceKHRD1Ev>
    9cfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d02:	48 83 c0 38          	add    $0x38,%rax
    9d06:	48 89 c7             	mov    %rax,%rdi
    9d09:	e8 ec f9 ff ff       	call   96fa <_ZN2vk4raii22DebugUtilsMessengerEXTD1Ev>
    9d0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d12:	48 83 c0 20          	add    $0x20,%rax
    9d16:	48 89 c7             	mov    %rax,%rdi
    9d19:	e8 38 f6 ff ff       	call   9356 <_ZN2vk4raii8InstanceD1Ev>
    9d1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d22:	48 83 c0 18          	add    $0x18,%rax
    9d26:	48 89 c7             	mov    %rax,%rdi
    9d29:	e8 4c fd ff ff       	call   9a7a <_ZN4rtvc6WindowD1Ev>
    9d2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d32:	48 83 c0 10          	add    $0x10,%rax
    9d36:	48 89 c7             	mov    %rax,%rdi
    9d39:	e8 d0 fc ff ff       	call   9a0e <_ZN4rtvc4GLFWD1Ev>
    9d3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d42:	48 89 c7             	mov    %rax,%rdi
    9d45:	e8 60 fd ff ff       	call   9aaa <_ZN2vk4raii7ContextD1Ev>
    9d4a:	90                   	nop
    9d4b:	c9                   	leave
    9d4c:	c3                   	ret

0000000000009d4d <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
    9d4d:	55                   	push   %rbp
    9d4e:	48 89 e5             	mov    %rsp,%rbp
    9d51:	53                   	push   %rbx
    9d52:	48 83 ec 18          	sub    $0x18,%rsp
    9d56:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9d5a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
    9d5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d62:	48 89 c6             	mov    %rax,%rsi
    9d65:	bf 01 00 00 00       	mov    $0x1,%edi
    9d6a:	e8 45 c4 ff ff       	call   61b4 <_ZnwmPv>
    9d6f:	48 89 c3             	mov    %rax,%rbx
    9d72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9d76:	48 89 c7             	mov    %rax,%rdi
    9d79:	e8 58 07 00 00       	call   a4d6 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
    9d7e:	0f b6 00             	movzbl (%rax),%eax
    9d81:	88 03                	mov    %al,(%rbx)
    9d83:	48 89 d8             	mov    %rbx,%rax
    9d86:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9d8a:	c9                   	leave
    9d8b:	c3                   	ret

0000000000009d8c <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>:
    char_traits<_CharT>::
    9d8c:	55                   	push   %rbp
    9d8d:	48 89 e5             	mov    %rsp,%rbp
    9d90:	48 83 ec 30          	sub    $0x30,%rsp
    9d94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9d98:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9d9c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__n == 0)
    9da0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    9da5:	75 09                	jne    9db0 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x24>
	return __s1;
    9da7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9dab:	e9 8b 00 00 00       	jmp    9e3b <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0xaf>
      if (std::__is_constant_evaluated())
    9db0:	e8 e9 c3 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    9db5:	84 c0                	test   %al,%al
    9db7:	74 67                	je     9e20 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x94>
	  if (__s1 == __s2) // unlikely, but saves a lot of work
    9db9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9dbd:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    9dc1:	75 06                	jne    9dc9 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x3d>
	    return __s1;
    9dc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9dc7:	eb 72                	jmp    9e3b <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0xaf>
	  char_type* __tmp = new char_type[__n];
    9dc9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9dcd:	48 89 c7             	mov    %rax,%rdi
    9dd0:	e8 5b b2 ff ff       	call   5030 <_Znam@plt>
    9dd5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  copy(__tmp, __s2, __n);
    9dd9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9ddd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    9de1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9de5:	48 89 ce             	mov    %rcx,%rsi
    9de8:	48 89 c7             	mov    %rax,%rdi
    9deb:	e8 4e 00 00 00       	call   9e3e <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
	  copy(__s1, __tmp, __n);
    9df0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9df4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    9df8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9dfc:	48 89 ce             	mov    %rcx,%rsi
    9dff:	48 89 c7             	mov    %rax,%rdi
    9e02:	e8 37 00 00 00       	call   9e3e <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
	  delete[] __tmp;
    9e07:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    9e0c:	74 0c                	je     9e1a <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x8e>
    9e0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e12:	48 89 c7             	mov    %rax,%rdi
    9e15:	e8 a6 b4 ff ff       	call   52c0 <_ZdaPv@plt>
	  return __s1;
    9e1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e1e:	eb 1b                	jmp    9e3b <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0xaf>
      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));
    9e20:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9e24:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    9e28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e2c:	48 89 ce             	mov    %rcx,%rsi
    9e2f:	48 89 c7             	mov    %rax,%rdi
    9e32:	e8 29 b5 ff ff       	call   5360 <memmove@plt>
      return __s1;
    9e37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
    9e3b:	c9                   	leave
    9e3c:	c3                   	ret
    9e3d:	90                   	nop

0000000000009e3e <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>:
    char_traits<_CharT>::
    9e3e:	55                   	push   %rbp
    9e3f:	48 89 e5             	mov    %rsp,%rbp
    9e42:	48 83 ec 30          	sub    $0x30,%rsp
    9e46:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9e4a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9e4e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (std::__is_constant_evaluated())
    9e52:	e8 47 c3 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    9e57:	84 c0                	test   %al,%al
    9e59:	74 40                	je     9e9b <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x5d>
	  for (std::size_t __i = 0; __i < __n; ++__i)
    9e5b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    9e62:	00 
    9e63:	eb 26                	jmp    9e8b <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x4d>
	    std::construct_at(__s1 + __i, __s2[__i]);
    9e65:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9e69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e6d:	48 01 c2             	add    %rax,%rdx
    9e70:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9e74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e78:	48 01 c8             	add    %rcx,%rax
    9e7b:	48 89 d6             	mov    %rdx,%rsi
    9e7e:	48 89 c7             	mov    %rax,%rdi
    9e81:	e8 c7 fe ff ff       	call   9d4d <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
    9e86:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    9e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e8f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    9e93:	72 d0                	jb     9e65 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x27>
	  return __s1;
    9e95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e99:	eb 21                	jmp    9ebc <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x7e>
      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
    9e9b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9e9f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9ea3:	48 89 d1             	mov    %rdx,%rcx
    9ea6:	48 89 c6             	mov    %rax,%rsi
    9ea9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ead:	48 89 c2             	mov    %rax,%rdx
    9eb0:	48 89 cf             	mov    %rcx,%rdi
    9eb3:	e8 e8 b2 ff ff       	call   51a0 <memcpy@plt>
      return __s1;
    9eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
    9ebc:	c9                   	leave
    9ebd:	c3                   	ret

0000000000009ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
       *  This is a handle to internal data.  Do not modify or dire things may
       *  happen.
      */
      _GLIBCXX20_CONSTEXPR
      const _CharT*
      c_str() const _GLIBCXX_NOEXCEPT
    9ebe:	55                   	push   %rbp
    9ebf:	48 89 e5             	mov    %rsp,%rbp
    9ec2:	48 83 ec 10          	sub    $0x10,%rsp
    9ec6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
    9eca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ece:	48 89 c7             	mov    %rax,%rdi
    9ed1:	e8 0e 06 00 00       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    9ed6:	c9                   	leave
    9ed7:	c3                   	ret

0000000000009ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
      ~basic_string()
    9ed8:	55                   	push   %rbp
    9ed9:	48 89 e5             	mov    %rsp,%rbp
    9edc:	48 83 ec 10          	sub    $0x10,%rsp
    9ee0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_dispose(); }
    9ee4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ee8:	48 89 c7             	mov    %rax,%rdi
    9eeb:	e8 3c 06 00 00       	call   a52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    9ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ef4:	48 89 c7             	mov    %rax,%rdi
    9ef7:	e8 d4 c7 ff ff       	call   66d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
    9efc:	90                   	nop
    9efd:	c9                   	leave
    9efe:	c3                   	ret
    9eff:	90                   	nop

0000000000009f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
      basic_string(basic_string&& __str) noexcept
    9f00:	55                   	push   %rbp
    9f01:	48 89 e5             	mov    %rsp,%rbp
    9f04:	41 54                	push   %r12
    9f06:	53                   	push   %rbx
    9f07:	48 83 ec 10          	sub    $0x10,%rsp
    9f0b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9f0f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
    9f13:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    9f17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f1b:	48 89 c7             	mov    %rax,%rdi
    9f1e:	e8 43 06 00 00       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    9f23:	48 89 c7             	mov    %rax,%rdi
    9f26:	e8 21 c9 ff ff       	call   684c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
    9f2b:	49 89 c4             	mov    %rax,%r12
    9f2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f32:	48 89 c7             	mov    %rax,%rdi
    9f35:	e8 72 c8 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    9f3a:	4c 89 e2             	mov    %r12,%rdx
    9f3d:	48 89 c6             	mov    %rax,%rsi
    9f40:	48 89 df             	mov    %rbx,%rdi
    9f43:	e8 c4 c8 ff ff       	call   680c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
	if (__str._M_is_local())
    9f48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f4c:	48 89 c7             	mov    %rax,%rdi
    9f4f:	e8 20 06 00 00       	call   a574 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
    9f54:	84 c0                	test   %al,%al
    9f56:	74 2d                	je     9f85 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x85>
			      __str.length() + 1);
    9f58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f5c:	48 89 c7             	mov    %rax,%rdi
    9f5f:	e8 ae 00 00 00       	call   a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    9f64:	48 8d 50 01          	lea    0x1(%rax),%rdx
    9f68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f6c:	48 8d 48 10          	lea    0x10(%rax),%rcx
    9f70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f74:	48 83 c0 10          	add    $0x10,%rax
    9f78:	48 89 ce             	mov    %rcx,%rsi
    9f7b:	48 89 c7             	mov    %rax,%rdi
    9f7e:	e8 10 c3 ff ff       	call   6293 <_ZNSt11char_traitsIcE4copyEPcPKcm>
    9f83:	eb 35                	jmp    9fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0xba>
	    _M_data(__str._M_data());
    9f85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f89:	48 89 c7             	mov    %rax,%rdi
    9f8c:	e8 53 05 00 00       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    9f91:	48 89 c2             	mov    %rax,%rdx
    9f94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f98:	48 89 d6             	mov    %rdx,%rsi
    9f9b:	48 89 c7             	mov    %rax,%rdi
    9f9e:	e8 05 06 00 00       	call   a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__str._M_allocated_capacity);
    9fa3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9fa7:	48 8b 50 10          	mov    0x10(%rax),%rdx
    9fab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9faf:	48 89 d6             	mov    %rdx,%rsi
    9fb2:	48 89 c7             	mov    %rax,%rdi
    9fb5:	e8 08 06 00 00       	call   a5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	_M_length(__str.length());
    9fba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9fbe:	48 89 c7             	mov    %rax,%rdi
    9fc1:	e8 4c 00 00 00       	call   a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
    9fc6:	48 89 c2             	mov    %rax,%rdx
    9fc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fcd:	48 89 d6             	mov    %rdx,%rsi
    9fd0:	48 89 c7             	mov    %rax,%rdi
    9fd3:	e8 06 06 00 00       	call   a5de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	__str._M_data(__str._M_local_data());
    9fd8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9fdc:	48 89 c7             	mov    %rax,%rdi
    9fdf:	e8 c8 c7 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    9fe4:	48 89 c2             	mov    %rax,%rdx
    9fe7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9feb:	48 89 d6             	mov    %rdx,%rsi
    9fee:	48 89 c7             	mov    %rax,%rdi
    9ff1:	e8 b2 05 00 00       	call   a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	__str._M_set_length(0);
    9ff6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9ffa:	be 00 00 00 00       	mov    $0x0,%esi
    9fff:	48 89 c7             	mov    %rax,%rdi
    a002:	e8 07 01 00 00       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
    a007:	90                   	nop
    a008:	48 83 c4 10          	add    $0x10,%rsp
    a00c:	5b                   	pop    %rbx
    a00d:	41 5c                	pop    %r12
    a00f:	5d                   	pop    %rbp
    a010:	c3                   	ret
    a011:	90                   	nop

000000000000a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
      length() const _GLIBCXX_NOEXCEPT
    a012:	55                   	push   %rbp
    a013:	48 89 e5             	mov    %rsp,%rbp
    a016:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
    a01a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a01e:	48 8b 40 08          	mov    0x8(%rax),%rax
    a022:	5d                   	pop    %rbp
    a023:	c3                   	ret

000000000000a024 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
    a024:	55                   	push   %rbp
    a025:	48 89 e5             	mov    %rsp,%rbp
    a028:	48 83 ec 20          	sub    $0x20,%rsp
    a02c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a030:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a034:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }
    a038:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a03c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a040:	be 00 00 00 00       	mov    $0x0,%esi
    a045:	48 89 c7             	mov    %rax,%rdi
    a048:	e8 b3 07 00 00       	call   a800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc>
    a04d:	48 89 c7             	mov    %rax,%rdi
    a050:	e8 9c 07 00 00       	call   a7f1 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
    a055:	48 89 c2             	mov    %rax,%rdx
    a058:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a05c:	48 89 d6             	mov    %rdx,%rsi
    a05f:	48 89 c7             	mov    %rax,%rdi
    a062:	e8 99 fe ff ff       	call   9f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    a067:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a06b:	c9                   	leave
    a06c:	c3                   	ret
    a06d:	90                   	nop

000000000000a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
    a06e:	55                   	push   %rbp
    a06f:	48 89 e5             	mov    %rsp,%rbp
    a072:	53                   	push   %rbx
    a073:	48 83 ec 38          	sub    $0x38,%rsp
    a077:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a07b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    a07f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      : _M_dataplus(_M_local_data(), __a)
    a083:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    a087:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a08b:	48 89 c7             	mov    %rax,%rdi
    a08e:	e8 19 c7 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    a093:	48 89 c1             	mov    %rax,%rcx
    a096:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a09a:	48 89 c2             	mov    %rax,%rdx
    a09d:	48 89 ce             	mov    %rcx,%rsi
    a0a0:	48 89 df             	mov    %rbx,%rdi
    a0a3:	e8 4e 04 00 00       	call   a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
    a0a8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    a0ad:	75 0f                	jne    a0be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>
	  std::__throw_logic_error(__N("basic_string: "
    a0af:	48 8d 05 72 9c 01 00 	lea    0x19c72(%rip),%rax        # 23d28 <_ZNSt8__detailL19__atomic_spin_countE+0x2c4>
    a0b6:	48 89 c7             	mov    %rax,%rdi
    a0b9:	e8 82 b0 ff ff       	call   5140 <_ZSt19__throw_logic_errorPKc@plt>
	const _CharT* __end = __s + traits_type::length(__s);
    a0be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a0c2:	48 89 c7             	mov    %rax,%rdi
    a0c5:	e8 3a c1 ff ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
    a0ca:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a0ce:	48 01 d0             	add    %rdx,%rax
    a0d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_construct(__s, __end, forward_iterator_tag());
    a0d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a0d9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    a0dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a0e1:	48 89 ce             	mov    %rcx,%rsi
    a0e4:	48 89 c7             	mov    %rax,%rdi
    a0e7:	e8 52 05 00 00       	call   a63e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
    a0ec:	eb 1a                	jmp    a108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x9a>
    a0ee:	48 89 c3             	mov    %rax,%rbx
    a0f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a0f5:	48 89 c7             	mov    %rax,%rdi
    a0f8:	e8 d3 c5 ff ff       	call   66d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
    a0fd:	48 89 d8             	mov    %rbx,%rax
    a100:	48 89 c7             	mov    %rax,%rdi
    a103:	e8 98 b2 ff ff       	call   53a0 <_Unwind_Resume@plt>
    a108:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a10c:	c9                   	leave
    a10d:	c3                   	ret

000000000000a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>:
      _M_set_length(size_type __n)
    a10e:	55                   	push   %rbp
    a10f:	48 89 e5             	mov    %rsp,%rbp
    a112:	48 83 ec 20          	sub    $0x20,%rsp
    a116:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a11a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_length(__n);
    a11e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a122:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a126:	48 89 d6             	mov    %rdx,%rsi
    a129:	48 89 c7             	mov    %rax,%rdi
    a12c:	e8 ad 04 00 00       	call   a5de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	traits_type::assign(_M_data()[__n], _CharT());
    a131:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    a135:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a139:	48 89 c7             	mov    %rax,%rdi
    a13c:	e8 a3 03 00 00       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    a141:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a145:	48 01 c2             	add    %rax,%rdx
    a148:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    a14c:	48 89 c6             	mov    %rax,%rsi
    a14f:	48 89 d7             	mov    %rdx,%rdi
    a152:	e8 6f c0 ff ff       	call   61c6 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
    a157:	90                   	nop
    a158:	c9                   	leave
    a159:	c3                   	ret

000000000000a15a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
    a15a:	55                   	push   %rbp
    a15b:	48 89 e5             	mov    %rsp,%rbp
    a15e:	48 83 ec 20          	sub    $0x20,%rsp
    a162:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a166:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a16a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
    a16e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a172:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a176:	48 89 d6             	mov    %rdx,%rsi
    a179:	48 89 c7             	mov    %rax,%rdi
    a17c:	e8 ed 05 00 00       	call   a76e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
    a181:	48 89 c7             	mov    %rax,%rdi
    a184:	e8 68 06 00 00       	call   a7f1 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
    a189:	48 89 c2             	mov    %rax,%rdx
    a18c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a190:	48 89 d6             	mov    %rdx,%rsi
    a193:	48 89 c7             	mov    %rax,%rdi
    a196:	e8 65 fd ff ff       	call   9f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    a19b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a19f:	c9                   	leave
    a1a0:	c3                   	ret
    a1a1:	90                   	nop

000000000000a1a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
    a1a2:	55                   	push   %rbp
    a1a3:	48 89 e5             	mov    %rsp,%rbp
    a1a6:	48 83 ec 10          	sub    $0x10,%rsp
    a1aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->size() == 0; }
    a1ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1b2:	48 89 c7             	mov    %rax,%rdi
    a1b5:	e8 3c c1 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    a1ba:	48 85 c0             	test   %rax,%rax
    a1bd:	0f 94 c0             	sete   %al
    a1c0:	c9                   	leave
    a1c1:	c3                   	ret

000000000000a1c2 <_ZNK2vk13DynamicLoader14getProcAddressIPFPFvvEP12VkInstance_TPKcEEET_S7_>:

    template <typename T>
    T getProcAddress( const char * function ) const VULKAN_HPP_NOEXCEPT
    a1c2:	55                   	push   %rbp
    a1c3:	48 89 e5             	mov    %rsp,%rbp
    a1c6:	48 83 ec 10          	sub    $0x10,%rsp
    a1ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a1ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
#  if defined( __unix__ ) || defined( __APPLE__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
      return (T)dlsym( m_library, function );
    a1d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1d6:	48 8b 00             	mov    (%rax),%rax
    a1d9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a1dd:	48 89 d6             	mov    %rdx,%rsi
    a1e0:	48 89 c7             	mov    %rax,%rdi
    a1e3:	e8 f8 af ff ff       	call   51e0 <dlsym@plt>
#  elif defined( _WIN32 )
      return ( T )::GetProcAddress( m_library, function );
#  else
#    error unsupported platform
#  endif
    }
    a1e8:	c9                   	leave
    a1e9:	c3                   	ret

000000000000a1ea <_ZNSt15__uniq_ptr_dataIN2vk4raii17ContextDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
    a1ea:	55                   	push   %rbp
    a1eb:	48 89 e5             	mov    %rsp,%rbp
    a1ee:	48 83 ec 10          	sub    $0x10,%rsp
    a1f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a1f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a1fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1fe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a202:	48 89 d6             	mov    %rdx,%rsi
    a205:	48 89 c7             	mov    %rax,%rdi
    a208:	e8 97 06 00 00       	call   a8a4 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1EPS2_>
    a20d:	90                   	nop
    a20e:	c9                   	leave
    a20f:	c3                   	ret

000000000000a210 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1IS4_vEEPS2_>:
       * The deleter will be value-initialized.
       */
      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
	_GLIBCXX23_CONSTEXPR
	explicit
	unique_ptr(pointer __p) noexcept
    a210:	55                   	push   %rbp
    a211:	48 89 e5             	mov    %rsp,%rbp
    a214:	48 83 ec 10          	sub    $0x10,%rsp
    a218:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a21c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_t(__p)
    a220:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a224:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a228:	48 89 d6             	mov    %rdx,%rsi
    a22b:	48 89 c7             	mov    %rax,%rdi
    a22e:	e8 b7 ff ff ff       	call   a1ea <_ZNSt15__uniq_ptr_dataIN2vk4raii17ContextDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>
        { }
    a233:	90                   	nop
    a234:	c9                   	leave
    a235:	c3                   	ret

000000000000a236 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EED1Ev>:

      /// Destructor, invokes the deleter if the stored pointer is not null.
#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~unique_ptr() noexcept
    a236:	55                   	push   %rbp
    a237:	48 89 e5             	mov    %rsp,%rbp
    a23a:	53                   	push   %rbx
    a23b:	48 83 ec 28          	sub    $0x28,%rsp
    a23f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
    a243:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a247:	48 89 c7             	mov    %rax,%rdi
    a24a:	e8 8d 06 00 00       	call   a8dc <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a24f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
    a253:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a257:	48 8b 00             	mov    (%rax),%rax
    a25a:	48 85 c0             	test   %rax,%rax
    a25d:	74 29                	je     a288 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EED1Ev+0x52>
	  get_deleter()(std::move(__ptr));
    a25f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a263:	48 89 c7             	mov    %rax,%rdi
    a266:	e8 8b 06 00 00       	call   a8f6 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE11get_deleterEv>
    a26b:	48 89 c3             	mov    %rax,%rbx
    a26e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a272:	48 89 c7             	mov    %rax,%rdi
    a275:	e8 96 06 00 00       	call   a910 <_ZSt4moveIRPN2vk4raii17ContextDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a27a:	48 8b 00             	mov    (%rax),%rax
    a27d:	48 89 c6             	mov    %rax,%rsi
    a280:	48 89 df             	mov    %rbx,%rdi
    a283:	e8 96 06 00 00       	call   a91e <_ZNKSt14default_deleteIN2vk4raii17ContextDispatcherEEclEPS2_>
	__ptr = pointer();
    a288:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a28c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
    a293:	90                   	nop
    a294:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a298:	c9                   	leave
    a299:	c3                   	ret

000000000000a29a <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev>:
      ~unique_ptr() noexcept
    a29a:	55                   	push   %rbp
    a29b:	48 89 e5             	mov    %rsp,%rbp
    a29e:	53                   	push   %rbx
    a29f:	48 83 ec 28          	sub    $0x28,%rsp
    a2a3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	auto& __ptr = _M_t._M_ptr();
    a2a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a2ab:	48 89 c7             	mov    %rax,%rdi
    a2ae:	e8 95 06 00 00       	call   a948 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a2b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
    a2b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2bb:	48 8b 00             	mov    (%rax),%rax
    a2be:	48 85 c0             	test   %rax,%rax
    a2c1:	74 29                	je     a2ec <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev+0x52>
	  get_deleter()(std::move(__ptr));
    a2c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a2c7:	48 89 c7             	mov    %rax,%rdi
    a2ca:	e8 93 06 00 00       	call   a962 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE11get_deleterEv>
    a2cf:	48 89 c3             	mov    %rax,%rbx
    a2d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2d6:	48 89 c7             	mov    %rax,%rdi
    a2d9:	e8 9e 06 00 00       	call   a97c <_ZSt4moveIRPN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a2de:	48 8b 00             	mov    (%rax),%rax
    a2e1:	48 89 c6             	mov    %rax,%rsi
    a2e4:	48 89 df             	mov    %rbx,%rdi
    a2e7:	e8 9e 06 00 00       	call   a98a <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_>
	__ptr = pointer();
    a2ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2f0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
    a2f7:	90                   	nop
    a2f8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a2fc:	c9                   	leave
    a2fd:	c3                   	ret

000000000000a2fe <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
    a2fe:	55                   	push   %rbp
    a2ff:	48 89 e5             	mov    %rsp,%rbp
    a302:	53                   	push   %rbx
    a303:	48 83 ec 18          	sub    $0x18,%rsp
    a307:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a30b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
    a30f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a313:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    a317:	48 89 c7             	mov    %rax,%rdi
    a31a:	e8 5d 06 00 00       	call   a97c <_ZSt4moveIRPN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a31f:	48 8b 00             	mov    (%rax),%rax
    a322:	48 89 c6             	mov    %rax,%rsi
    a325:	48 89 df             	mov    %rbx,%rdi
    a328:	e8 87 06 00 00       	call   a9b4 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
    a32d:	90                   	nop
    a32e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a332:	c9                   	leave
    a333:	c3                   	ret

000000000000a334 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEaSEDn>:
      operator=(nullptr_t) noexcept
    a334:	55                   	push   %rbp
    a335:	48 89 e5             	mov    %rsp,%rbp
    a338:	48 83 ec 10          	sub    $0x10,%rsp
    a33c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a340:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	reset();
    a344:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a348:	be 00 00 00 00       	mov    $0x0,%esi
    a34d:	48 89 c7             	mov    %rax,%rdi
    a350:	e8 a9 ff ff ff       	call   a2fe <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
	return *this;
    a355:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    a359:	c9                   	leave
    a35a:	c3                   	ret
    a35b:	90                   	nop

000000000000a35c <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
    a35c:	55                   	push   %rbp
    a35d:	48 89 e5             	mov    %rsp,%rbp
    a360:	48 83 ec 10          	sub    $0x10,%rsp
    a364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return get();
    a368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a36c:	48 89 c7             	mov    %rax,%rdi
    a36f:	e8 a4 06 00 00       	call   aa18 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a374:	c9                   	leave
    a375:	c3                   	ret

000000000000a376 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
    a376:	55                   	push   %rbp
    a377:	48 89 e5             	mov    %rsp,%rbp
    a37a:	48 83 ec 10          	sub    $0x10,%rsp
    a37e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(get() != pointer());
    a382:	e8 17 be ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    a387:	84 c0                	test   %al,%al
    a389:	74 18                	je     a3a3 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a38b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a38f:	48 89 c7             	mov    %rax,%rdi
    a392:	e8 81 06 00 00       	call   aa18 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>
    a397:	48 85 c0             	test   %rax,%rax
    a39a:	75 07                	jne    a3a3 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a39c:	b8 01 00 00 00       	mov    $0x1,%eax
    a3a1:	eb 05                	jmp    a3a8 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv+0x32>
    a3a3:	b8 00 00 00 00       	mov    $0x0,%eax
    a3a8:	84 c0                	test   %al,%al
	return *get();
    a3aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3ae:	48 89 c7             	mov    %rax,%rdi
    a3b1:	e8 62 06 00 00       	call   aa18 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a3b6:	c9                   	leave
    a3b7:	c3                   	ret

000000000000a3b8 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev>:
      ~unique_ptr() noexcept
    a3b8:	55                   	push   %rbp
    a3b9:	48 89 e5             	mov    %rsp,%rbp
    a3bc:	53                   	push   %rbx
    a3bd:	48 83 ec 28          	sub    $0x28,%rsp
    a3c1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	auto& __ptr = _M_t._M_ptr();
    a3c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a3c9:	48 89 c7             	mov    %rax,%rdi
    a3cc:	e8 61 06 00 00       	call   aa32 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a3d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
    a3d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a3d9:	48 8b 00             	mov    (%rax),%rax
    a3dc:	48 85 c0             	test   %rax,%rax
    a3df:	74 29                	je     a40a <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev+0x52>
	  get_deleter()(std::move(__ptr));
    a3e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a3e5:	48 89 c7             	mov    %rax,%rdi
    a3e8:	e8 5f 06 00 00       	call   aa4c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE11get_deleterEv>
    a3ed:	48 89 c3             	mov    %rax,%rbx
    a3f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a3f4:	48 89 c7             	mov    %rax,%rdi
    a3f7:	e8 6a 06 00 00       	call   aa66 <_ZSt4moveIRPN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a3fc:	48 8b 00             	mov    (%rax),%rax
    a3ff:	48 89 c6             	mov    %rax,%rsi
    a402:	48 89 df             	mov    %rbx,%rdi
    a405:	e8 6a 06 00 00       	call   aa74 <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_>
	__ptr = pointer();
    a40a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a40e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
    a415:	90                   	nop
    a416:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a41a:	c9                   	leave
    a41b:	c3                   	ret

000000000000a41c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
      reset(pointer __p = pointer()) noexcept
    a41c:	55                   	push   %rbp
    a41d:	48 89 e5             	mov    %rsp,%rbp
    a420:	53                   	push   %rbx
    a421:	48 83 ec 18          	sub    $0x18,%rsp
    a425:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a429:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_t.reset(std::move(__p));
    a42d:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a431:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    a435:	48 89 c7             	mov    %rax,%rdi
    a438:	e8 29 06 00 00       	call   aa66 <_ZSt4moveIRPN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a43d:	48 8b 00             	mov    (%rax),%rax
    a440:	48 89 c6             	mov    %rax,%rsi
    a443:	48 89 df             	mov    %rbx,%rdi
    a446:	e8 53 06 00 00       	call   aa9e <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
    a44b:	90                   	nop
    a44c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a450:	c9                   	leave
    a451:	c3                   	ret

000000000000a452 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEaSEDn>:
      operator=(nullptr_t) noexcept
    a452:	55                   	push   %rbp
    a453:	48 89 e5             	mov    %rsp,%rbp
    a456:	48 83 ec 10          	sub    $0x10,%rsp
    a45a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a45e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	reset();
    a462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a466:	be 00 00 00 00       	mov    $0x0,%esi
    a46b:	48 89 c7             	mov    %rax,%rdi
    a46e:	e8 a9 ff ff ff       	call   a41c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
	return *this;
    a473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    a477:	c9                   	leave
    a478:	c3                   	ret
    a479:	90                   	nop

000000000000a47a <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
    a47a:	55                   	push   %rbp
    a47b:	48 89 e5             	mov    %rsp,%rbp
    a47e:	48 83 ec 10          	sub    $0x10,%rsp
    a482:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return get();
    a486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a48a:	48 89 c7             	mov    %rax,%rdi
    a48d:	e8 70 06 00 00       	call   ab02 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a492:	c9                   	leave
    a493:	c3                   	ret

000000000000a494 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
    a494:	55                   	push   %rbp
    a495:	48 89 e5             	mov    %rsp,%rbp
    a498:	48 83 ec 10          	sub    $0x10,%rsp
    a49c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(get() != pointer());
    a4a0:	e8 f9 bc ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    a4a5:	84 c0                	test   %al,%al
    a4a7:	74 18                	je     a4c1 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a4a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4ad:	48 89 c7             	mov    %rax,%rdi
    a4b0:	e8 4d 06 00 00       	call   ab02 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>
    a4b5:	48 85 c0             	test   %rax,%rax
    a4b8:	75 07                	jne    a4c1 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a4ba:	b8 01 00 00 00       	mov    $0x1,%eax
    a4bf:	eb 05                	jmp    a4c6 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv+0x32>
    a4c1:	b8 00 00 00 00       	mov    $0x0,%eax
    a4c6:	84 c0                	test   %al,%al
	return *get();
    a4c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4cc:	48 89 c7             	mov    %rax,%rdi
    a4cf:	e8 2e 06 00 00       	call   ab02 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a4d4:	c9                   	leave
    a4d5:	c3                   	ret

000000000000a4d6 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    a4d6:	55                   	push   %rbp
    a4d7:	48 89 e5             	mov    %rsp,%rbp
    a4da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    a4de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4e2:	5d                   	pop    %rbp
    a4e3:	c3                   	ret

000000000000a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
    a4e4:	55                   	push   %rbp
    a4e5:	48 89 e5             	mov    %rsp,%rbp
    a4e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus._M_p; }
    a4ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4f0:	48 8b 00             	mov    (%rax),%rax
    a4f3:	5d                   	pop    %rbp
    a4f4:	c3                   	ret
    a4f5:	90                   	nop

000000000000a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
    a4f6:	55                   	push   %rbp
    a4f7:	48 89 e5             	mov    %rsp,%rbp
    a4fa:	48 83 ec 20          	sub    $0x20,%rsp
    a4fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a502:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a506:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: allocator_type(__a), _M_p(__dat) { }
    a50a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a50e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a512:	48 89 d6             	mov    %rdx,%rsi
    a515:	48 89 c7             	mov    %rax,%rdi
    a518:	e8 e3 ad ff ff       	call   5300 <_ZNSaIcEC2ERKS_@plt>
    a51d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a521:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a525:	48 89 10             	mov    %rdx,(%rax)
    a528:	90                   	nop
    a529:	c9                   	leave
    a52a:	c3                   	ret
    a52b:	90                   	nop

000000000000a52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
    a52c:	55                   	push   %rbp
    a52d:	48 89 e5             	mov    %rsp,%rbp
    a530:	48 83 ec 10          	sub    $0x10,%rsp
    a534:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (!_M_is_local())
    a538:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a53c:	48 89 c7             	mov    %rax,%rdi
    a53f:	e8 30 00 00 00       	call   a574 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
    a544:	83 f0 01             	xor    $0x1,%eax
    a547:	84 c0                	test   %al,%al
    a549:	74 17                	je     a562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x36>
	  _M_destroy(_M_allocated_capacity);
    a54b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a54f:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a553:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a557:	48 89 d6             	mov    %rdx,%rsi
    a55a:	48 89 c7             	mov    %rax,%rdi
    a55d:	e8 82 06 00 00       	call   abe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
      }
    a562:	90                   	nop
    a563:	c9                   	leave
    a564:	c3                   	ret
    a565:	90                   	nop

000000000000a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
    a566:	55                   	push   %rbp
    a567:	48 89 e5             	mov    %rsp,%rbp
    a56a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
    a56e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a572:	5d                   	pop    %rbp
    a573:	c3                   	ret

000000000000a574 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
    a574:	55                   	push   %rbp
    a575:	48 89 e5             	mov    %rsp,%rbp
    a578:	53                   	push   %rbx
    a579:	48 83 ec 18          	sub    $0x18,%rsp
    a57d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return _M_data() == _M_local_data(); }
    a581:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a585:	48 89 c7             	mov    %rax,%rdi
    a588:	e8 57 ff ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    a58d:	48 89 c3             	mov    %rax,%rbx
    a590:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a594:	48 89 c7             	mov    %rax,%rdi
    a597:	e8 96 06 00 00       	call   ac32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    a59c:	48 39 c3             	cmp    %rax,%rbx
    a59f:	0f 94 c0             	sete   %al
    a5a2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a5a6:	c9                   	leave
    a5a7:	c3                   	ret

000000000000a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
    a5a8:	55                   	push   %rbp
    a5a9:	48 89 e5             	mov    %rsp,%rbp
    a5ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_dataplus._M_p = __p; }
    a5b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a5b8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a5bc:	48 89 10             	mov    %rdx,(%rax)
    a5bf:	90                   	nop
    a5c0:	5d                   	pop    %rbp
    a5c1:	c3                   	ret

000000000000a5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>:
      _M_capacity(size_type __capacity)
    a5c2:	55                   	push   %rbp
    a5c3:	48 89 e5             	mov    %rsp,%rbp
    a5c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_allocated_capacity = __capacity; }
    a5ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a5d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a5d6:	48 89 50 10          	mov    %rdx,0x10(%rax)
    a5da:	90                   	nop
    a5db:	5d                   	pop    %rbp
    a5dc:	c3                   	ret
    a5dd:	90                   	nop

000000000000a5de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>:
      _M_length(size_type __length)
    a5de:	55                   	push   %rbp
    a5df:	48 89 e5             	mov    %rsp,%rbp
    a5e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_string_length = __length; }
    a5ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a5ee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a5f2:	48 89 50 08          	mov    %rdx,0x8(%rax)
    a5f6:	90                   	nop
    a5f7:	5d                   	pop    %rbp
    a5f8:	c3                   	ret
    a5f9:	90                   	nop

000000000000a5fa <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
    a5fa:	55                   	push   %rbp
    a5fb:	48 89 e5             	mov    %rsp,%rbp
    a5fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a602:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a606:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a60a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a60e:	48 89 10             	mov    %rdx,(%rax)
    a611:	90                   	nop
    a612:	5d                   	pop    %rbp
    a613:	c3                   	ret

000000000000a614 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
    a614:	55                   	push   %rbp
    a615:	48 89 e5             	mov    %rsp,%rbp
    a618:	48 83 ec 10          	sub    $0x10,%rsp
    a61c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a620:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a624:	48 8b 00             	mov    (%rax),%rax
    a627:	48 85 c0             	test   %rax,%rax
    a62a:	74 0f                	je     a63b <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x27>
    a62c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a630:	48 8b 00             	mov    (%rax),%rax
    a633:	48 89 c7             	mov    %rax,%rdi
    a636:	e8 f1 fe ff ff       	call   a52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    a63b:	90                   	nop
    a63c:	c9                   	leave
    a63d:	c3                   	ret

000000000000a63e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
    a63e:	55                   	push   %rbp
    a63f:	48 89 e5             	mov    %rsp,%rbp
    a642:	48 83 ec 60          	sub    $0x60,%rsp
    a646:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    a64a:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    a64e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    a652:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    a656:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    a65a:	48 89 d6             	mov    %rdx,%rsi
    a65d:	48 89 c7             	mov    %rax,%rdi
    a660:	e8 eb 05 00 00       	call   ac50 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
    a665:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	if (__dnew > size_type(_S_local_capacity))
    a669:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a66d:	48 83 f8 0f          	cmp    $0xf,%rax
    a671:	76 3f                	jbe    a6b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x74>
	    _M_data(_M_create(__dnew, size_type(0)));
    a673:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    a677:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a67b:	ba 00 00 00 00       	mov    $0x0,%edx
    a680:	48 89 ce             	mov    %rcx,%rsi
    a683:	48 89 c7             	mov    %rax,%rdi
    a686:	e8 91 04 00 00       	call   ab1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
    a68b:	48 89 c2             	mov    %rax,%rdx
    a68e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a692:	48 89 d6             	mov    %rdx,%rsi
    a695:	48 89 c7             	mov    %rax,%rdi
    a698:	e8 0b ff ff ff       	call   a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
    a69d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a6a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a6a5:	48 89 d6             	mov    %rdx,%rsi
    a6a8:	48 89 c7             	mov    %rax,%rdi
    a6ab:	e8 12 ff ff ff       	call   a5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
    a6b0:	eb 5e                	jmp    a710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xd2>
    a6b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a6b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (std::is_constant_evaluated())
    a6ba:	e8 ea ba ff ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
    a6bf:	84 c0                	test   %al,%al
    a6c1:	74 40                	je     a703 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc5>
	  for (_CharT& __c : _M_local_buf)
    a6c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a6c7:	48 83 c0 10          	add    $0x10,%rax
    a6cb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a6cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a6d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6db:	48 83 c0 10          	add    $0x10,%rax
    a6df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a6e3:	eb 14                	jmp    a6f9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xbb>
    a6e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a6e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	    __c = _CharT();
    a6ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a6f1:	c6 00 00             	movb   $0x0,(%rax)
	  for (_CharT& __c : _M_local_buf)
    a6f4:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    a6f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a6fd:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    a701:	75 e2                	jne    a6e5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xa7>
	return _M_local_data();
    a703:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a707:	48 89 c7             	mov    %rax,%rdi
    a70a:	e8 9d c0 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    a70f:	90                   	nop

	  basic_string* _M_guarded;
	} __guard(this);
    a710:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    a714:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    a718:	48 89 d6             	mov    %rdx,%rsi
    a71b:	48 89 c7             	mov    %rax,%rdi
    a71e:	e8 d7 fe ff ff       	call   a5fa <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
    a723:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a727:	48 89 c7             	mov    %rax,%rdi
    a72a:	e8 b5 fd ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    a72f:	48 89 c1             	mov    %rax,%rcx
    a732:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    a736:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    a73a:	48 89 c6             	mov    %rax,%rsi
    a73d:	48 89 cf             	mov    %rcx,%rdi
    a740:	e8 3c 05 00 00       	call   ac81 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
    a745:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    a74c:	00 

	_M_set_length(__dnew);
    a74d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a751:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a755:	48 89 d6             	mov    %rdx,%rsi
    a758:	48 89 c7             	mov    %rax,%rdi
    a75b:	e8 ae f9 ff ff       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
    a760:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    a764:	48 89 c7             	mov    %rax,%rdi
    a767:	e8 a8 fe ff ff       	call   a614 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
    a76c:	c9                   	leave
    a76d:	c3                   	ret

000000000000a76e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
      append(const _CharT* __s)
    a76e:	55                   	push   %rbp
    a76f:	48 89 e5             	mov    %rsp,%rbp
    a772:	48 83 ec 20          	sub    $0x20,%rsp
    a776:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a77a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const size_type __n = traits_type::length(__s);
    a77e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a782:	48 89 c7             	mov    %rax,%rdi
    a785:	e8 7a ba ff ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
    a78a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	_M_check_length(size_type(0), __n, "basic_string::append");
    a78e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a792:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a796:	48 8d 0d bd 95 01 00 	lea    0x195bd(%rip),%rcx        # 23d5a <_ZNSt8__detailL19__atomic_spin_countE+0x2f6>
    a79d:	be 00 00 00 00       	mov    $0x0,%esi
    a7a2:	48 89 c7             	mov    %rax,%rdi
    a7a5:	e8 1a 05 00 00       	call   acc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>
	return _M_append(__s, __n);
    a7aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a7ae:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    a7b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7b6:	48 89 ce             	mov    %rcx,%rsi
    a7b9:	48 89 c7             	mov    %rax,%rdi
    a7bc:	e8 61 05 00 00       	call   ad22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>
      }
    a7c1:	c9                   	leave
    a7c2:	c3                   	ret
    a7c3:	90                   	nop

000000000000a7c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
    a7c4:	55                   	push   %rbp
    a7c5:	48 89 e5             	mov    %rsp,%rbp
    a7c8:	48 83 ec 10          	sub    $0x10,%rsp
    a7cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _M_is_local() ? size_type(_S_local_capacity)
    a7d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7d4:	48 89 c7             	mov    %rax,%rdi
    a7d7:	e8 98 fd ff ff       	call   a574 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
    a7dc:	84 c0                	test   %al,%al
    a7de:	74 07                	je     a7e7 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x23>
    a7e0:	b8 0f 00 00 00       	mov    $0xf,%eax
	                     : _M_allocated_capacity;
    a7e5:	eb 08                	jmp    a7ef <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x2b>
	return _M_is_local() ? size_type(_S_local_capacity)
    a7e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7eb:	48 8b 40 10          	mov    0x10(%rax),%rax
      }
    a7ef:	c9                   	leave
    a7f0:	c3                   	ret

000000000000a7f1 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
    a7f1:	55                   	push   %rbp
    a7f2:	48 89 e5             	mov    %rsp,%rbp
    a7f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    a7f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7fd:	5d                   	pop    %rbp
    a7fe:	c3                   	ret
    a7ff:	90                   	nop

000000000000a800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc>:
      insert(size_type __pos, const _CharT* __s)
    a800:	55                   	push   %rbp
    a801:	48 89 e5             	mov    %rsp,%rbp
    a804:	48 83 ec 20          	sub    $0x20,%rsp
    a808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a80c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a810:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	return this->replace(__pos, size_type(0), __s,
    a814:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a818:	48 89 c7             	mov    %rax,%rdi
    a81b:	e8 e4 b9 ff ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
    a820:	48 89 c1             	mov    %rax,%rcx
    a823:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a827:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    a82b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a82f:	49 89 c8             	mov    %rcx,%r8
    a832:	48 89 d1             	mov    %rdx,%rcx
    a835:	ba 00 00 00 00       	mov    $0x0,%edx
    a83a:	48 89 c7             	mov    %rax,%rdi
    a83d:	e8 aa 05 00 00       	call   adec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm>
      }
    a842:	c9                   	leave
    a843:	c3                   	ret

000000000000a844 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>:
      _M_check(size_type __pos, const char* __s) const
    a844:	55                   	push   %rbp
    a845:	48 89 e5             	mov    %rsp,%rbp
    a848:	48 83 ec 20          	sub    $0x20,%rsp
    a84c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a850:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a854:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__pos > this->size())
    a858:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a85c:	48 89 c7             	mov    %rax,%rdi
    a85f:	e8 92 ba ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    a864:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a868:	0f 92 c0             	setb   %al
    a86b:	84 c0                	test   %al,%al
    a86d:	74 2e                	je     a89d <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc+0x59>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    a86f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a873:	48 89 c7             	mov    %rax,%rdi
    a876:	e8 7b ba ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    a87b:	48 89 c1             	mov    %rax,%rcx
    a87e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a882:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a886:	48 89 c6             	mov    %rax,%rsi
    a889:	48 8d 05 e0 94 01 00 	lea    0x194e0(%rip),%rax        # 23d70 <_ZNSt8__detailL19__atomic_spin_countE+0x30c>
    a890:	48 89 c7             	mov    %rax,%rdi
    a893:	b8 00 00 00 00       	mov    $0x0,%eax
    a898:	e8 83 aa ff ff       	call   5320 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
	return __pos;
    a89d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
    a8a1:	c9                   	leave
    a8a2:	c3                   	ret
    a8a3:	90                   	nop

000000000000a8a4 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1EPS2_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    a8a4:	55                   	push   %rbp
    a8a5:	48 89 e5             	mov    %rsp,%rbp
    a8a8:	53                   	push   %rbx
    a8a9:	48 83 ec 18          	sub    $0x18,%rsp
    a8ad:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a8b1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a8b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a8b9:	48 89 c7             	mov    %rax,%rdi
    a8bc:	e8 ef 05 00 00       	call   aeb0 <_ZNSt5tupleIJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
    a8c1:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
    a8c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a8c9:	48 89 c7             	mov    %rax,%rdi
    a8cc:	e8 0b 00 00 00       	call   a8dc <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a8d1:	48 89 18             	mov    %rbx,(%rax)
    a8d4:	90                   	nop
    a8d5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a8d9:	c9                   	leave
    a8da:	c3                   	ret
    a8db:	90                   	nop

000000000000a8dc <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
    a8dc:	55                   	push   %rbp
    a8dd:	48 89 e5             	mov    %rsp,%rbp
    a8e0:	48 83 ec 10          	sub    $0x10,%rsp
    a8e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a8e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8ec:	48 89 c7             	mov    %rax,%rdi
    a8ef:	e8 d7 05 00 00       	call   aecb <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    a8f4:	c9                   	leave
    a8f5:	c3                   	ret

000000000000a8f6 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE11get_deleterEv>:
      get_deleter() noexcept
    a8f6:	55                   	push   %rbp
    a8f7:	48 89 e5             	mov    %rsp,%rbp
    a8fa:	48 83 ec 10          	sub    $0x10,%rsp
    a8fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
    a902:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a906:	48 89 c7             	mov    %rax,%rdi
    a909:	e8 d8 05 00 00       	call   aee6 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    a90e:	c9                   	leave
    a90f:	c3                   	ret

000000000000a910 <_ZSt4moveIRPN2vk4raii17ContextDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
    a910:	55                   	push   %rbp
    a911:	48 89 e5             	mov    %rsp,%rbp
    a914:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    a918:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a91c:	5d                   	pop    %rbp
    a91d:	c3                   	ret

000000000000a91e <_ZNKSt14default_deleteIN2vk4raii17ContextDispatcherEEclEPS2_>:
      operator()(_Tp* __ptr) const
    a91e:	55                   	push   %rbp
    a91f:	48 89 e5             	mov    %rsp,%rbp
    a922:	48 83 ec 10          	sub    $0x10,%rsp
    a926:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a92a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
    a92e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a932:	48 85 c0             	test   %rax,%rax
    a935:	74 0d                	je     a944 <_ZNKSt14default_deleteIN2vk4raii17ContextDispatcherEEclEPS2_+0x26>
    a937:	be 38 00 00 00       	mov    $0x38,%esi
    a93c:	48 89 c7             	mov    %rax,%rdi
    a93f:	e8 ec a8 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    a944:	90                   	nop
    a945:	c9                   	leave
    a946:	c3                   	ret
    a947:	90                   	nop

000000000000a948 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
    a948:	55                   	push   %rbp
    a949:	48 89 e5             	mov    %rsp,%rbp
    a94c:	48 83 ec 10          	sub    $0x10,%rsp
    a950:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a958:	48 89 c7             	mov    %rax,%rdi
    a95b:	e8 a0 05 00 00       	call   af00 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    a960:	c9                   	leave
    a961:	c3                   	ret

000000000000a962 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE11get_deleterEv>:
      get_deleter() noexcept
    a962:	55                   	push   %rbp
    a963:	48 89 e5             	mov    %rsp,%rbp
    a966:	48 83 ec 10          	sub    $0x10,%rsp
    a96a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
    a96e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a972:	48 89 c7             	mov    %rax,%rdi
    a975:	e8 a0 05 00 00       	call   af1a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    a97a:	c9                   	leave
    a97b:	c3                   	ret

000000000000a97c <_ZSt4moveIRPN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
    a97c:	55                   	push   %rbp
    a97d:	48 89 e5             	mov    %rsp,%rbp
    a980:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    a984:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a988:	5d                   	pop    %rbp
    a989:	c3                   	ret

000000000000a98a <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_>:
      operator()(_Tp* __ptr) const
    a98a:	55                   	push   %rbp
    a98b:	48 89 e5             	mov    %rsp,%rbp
    a98e:	48 83 ec 10          	sub    $0x10,%rsp
    a992:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a996:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
    a99a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a99e:	48 85 c0             	test   %rax,%rax
    a9a1:	74 0d                	je     a9b0 <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_+0x26>
    a9a3:	be 48 03 00 00       	mov    $0x348,%esi
    a9a8:	48 89 c7             	mov    %rax,%rdi
    a9ab:	e8 80 a8 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    a9b0:	90                   	nop
    a9b1:	c9                   	leave
    a9b2:	c3                   	ret
    a9b3:	90                   	nop

000000000000a9b4 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
      void reset(pointer __p) noexcept
    a9b4:	55                   	push   %rbp
    a9b5:	48 89 e5             	mov    %rsp,%rbp
    a9b8:	53                   	push   %rbx
    a9b9:	48 83 ec 28          	sub    $0x28,%rsp
    a9bd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a9c1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	const pointer __old_p = _M_ptr();
    a9c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a9c9:	48 89 c7             	mov    %rax,%rdi
    a9cc:	e8 77 ff ff ff       	call   a948 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a9d1:	48 8b 00             	mov    (%rax),%rax
    a9d4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_ptr() = __p;
    a9d8:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    a9dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a9e0:	48 89 c7             	mov    %rax,%rdi
    a9e3:	e8 60 ff ff ff       	call   a948 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a9e8:	48 89 18             	mov    %rbx,(%rax)
	if (__old_p)
    a9eb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    a9f0:	74 1e                	je     aa10 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_+0x5c>
	  _M_deleter()(__old_p);
    a9f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a9f6:	48 89 c7             	mov    %rax,%rdi
    a9f9:	e8 1c 05 00 00       	call   af1a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    a9fe:	48 89 c2             	mov    %rax,%rdx
    aa01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aa05:	48 89 c6             	mov    %rax,%rsi
    aa08:	48 89 d7             	mov    %rdx,%rdi
    aa0b:	e8 7a ff ff ff       	call   a98a <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_>
      }
    aa10:	90                   	nop
    aa11:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    aa15:	c9                   	leave
    aa16:	c3                   	ret
    aa17:	90                   	nop

000000000000aa18 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
    aa18:	55                   	push   %rbp
    aa19:	48 89 e5             	mov    %rsp,%rbp
    aa1c:	48 83 ec 10          	sub    $0x10,%rsp
    aa20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
    aa24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa28:	48 89 c7             	mov    %rax,%rdi
    aa2b:	e8 04 05 00 00       	call   af34 <_ZNKSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    aa30:	c9                   	leave
    aa31:	c3                   	ret

000000000000aa32 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
    aa32:	55                   	push   %rbp
    aa33:	48 89 e5             	mov    %rsp,%rbp
    aa36:	48 83 ec 10          	sub    $0x10,%rsp
    aa3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa42:	48 89 c7             	mov    %rax,%rdi
    aa45:	e8 07 05 00 00       	call   af51 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    aa4a:	c9                   	leave
    aa4b:	c3                   	ret

000000000000aa4c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE11get_deleterEv>:
      get_deleter() noexcept
    aa4c:	55                   	push   %rbp
    aa4d:	48 89 e5             	mov    %rsp,%rbp
    aa50:	48 83 ec 10          	sub    $0x10,%rsp
    aa54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
    aa58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa5c:	48 89 c7             	mov    %rax,%rdi
    aa5f:	e8 08 05 00 00       	call   af6c <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    aa64:	c9                   	leave
    aa65:	c3                   	ret

000000000000aa66 <_ZSt4moveIRPN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
    aa66:	55                   	push   %rbp
    aa67:	48 89 e5             	mov    %rsp,%rbp
    aa6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    aa6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa72:	5d                   	pop    %rbp
    aa73:	c3                   	ret

000000000000aa74 <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_>:
      operator()(_Tp* __ptr) const
    aa74:	55                   	push   %rbp
    aa75:	48 89 e5             	mov    %rsp,%rbp
    aa78:	48 83 ec 10          	sub    $0x10,%rsp
    aa7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
    aa84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aa88:	48 85 c0             	test   %rax,%rax
    aa8b:	74 0d                	je     aa9a <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_+0x26>
    aa8d:	be b8 0f 00 00       	mov    $0xfb8,%esi
    aa92:	48 89 c7             	mov    %rax,%rdi
    aa95:	e8 96 a7 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    aa9a:	90                   	nop
    aa9b:	c9                   	leave
    aa9c:	c3                   	ret
    aa9d:	90                   	nop

000000000000aa9e <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
      void reset(pointer __p) noexcept
    aa9e:	55                   	push   %rbp
    aa9f:	48 89 e5             	mov    %rsp,%rbp
    aaa2:	53                   	push   %rbx
    aaa3:	48 83 ec 28          	sub    $0x28,%rsp
    aaa7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    aaab:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	const pointer __old_p = _M_ptr();
    aaaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aab3:	48 89 c7             	mov    %rax,%rdi
    aab6:	e8 77 ff ff ff       	call   aa32 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    aabb:	48 8b 00             	mov    (%rax),%rax
    aabe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_ptr() = __p;
    aac2:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    aac6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aaca:	48 89 c7             	mov    %rax,%rdi
    aacd:	e8 60 ff ff ff       	call   aa32 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    aad2:	48 89 18             	mov    %rbx,(%rax)
	if (__old_p)
    aad5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    aada:	74 1e                	je     aafa <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_+0x5c>
	  _M_deleter()(__old_p);
    aadc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aae0:	48 89 c7             	mov    %rax,%rdi
    aae3:	e8 84 04 00 00       	call   af6c <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    aae8:	48 89 c2             	mov    %rax,%rdx
    aaeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aaef:	48 89 c6             	mov    %rax,%rsi
    aaf2:	48 89 d7             	mov    %rdx,%rdi
    aaf5:	e8 7a ff ff ff       	call   aa74 <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_>
      }
    aafa:	90                   	nop
    aafb:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    aaff:	c9                   	leave
    ab00:	c3                   	ret
    ab01:	90                   	nop

000000000000ab02 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
    ab02:	55                   	push   %rbp
    ab03:	48 89 e5             	mov    %rsp,%rbp
    ab06:	48 83 ec 10          	sub    $0x10,%rsp
    ab0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
    ab0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab12:	48 89 c7             	mov    %rax,%rdi
    ab15:	e8 6c 04 00 00       	call   af86 <_ZNKSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    ab1a:	c9                   	leave
    ab1b:	c3                   	ret

000000000000ab1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>:
    basic_string<_CharT, _Traits, _Alloc>::
    ab1c:	55                   	push   %rbp
    ab1d:	48 89 e5             	mov    %rsp,%rbp
    ab20:	53                   	push   %rbx
    ab21:	48 83 ec 28          	sub    $0x28,%rsp
    ab25:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ab29:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ab2d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__capacity > max_size())
    ab31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab35:	48 8b 18             	mov    (%rax),%rbx
    ab38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab3c:	48 89 c7             	mov    %rax,%rdi
    ab3f:	e8 60 04 00 00       	call   afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    ab44:	48 39 d8             	cmp    %rbx,%rax
    ab47:	0f 92 c0             	setb   %al
    ab4a:	84 c0                	test   %al,%al
    ab4c:	74 0f                	je     ab5d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x41>
	std::__throw_length_error(__N("basic_string::_M_create"));
    ab4e:	48 8d 05 52 92 01 00 	lea    0x19252(%rip),%rax        # 23da7 <_ZNSt8__detailL19__atomic_spin_countE+0x343>
    ab55:	48 89 c7             	mov    %rax,%rdi
    ab58:	e8 83 a5 ff ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    ab5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab61:	48 8b 00             	mov    (%rax),%rax
    ab64:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    ab68:	73 52                	jae    abbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0xa0>
    ab6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab6e:	48 8b 10             	mov    (%rax),%rdx
    ab71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ab75:	48 01 c0             	add    %rax,%rax
    ab78:	48 39 c2             	cmp    %rax,%rdx
    ab7b:	73 3f                	jae    abbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0xa0>
	  __capacity = 2 * __old_capacity;
    ab7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ab81:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
    ab85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab89:	48 89 10             	mov    %rdx,(%rax)
	  if (__capacity > max_size())
    ab8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab90:	48 8b 18             	mov    (%rax),%rbx
    ab93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab97:	48 89 c7             	mov    %rax,%rdi
    ab9a:	e8 05 04 00 00       	call   afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    ab9f:	48 39 d8             	cmp    %rbx,%rax
    aba2:	0f 92 c0             	setb   %al
    aba5:	84 c0                	test   %al,%al
    aba7:	74 13                	je     abbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0xa0>
	    __capacity = max_size();
    aba9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    abad:	48 89 c7             	mov    %rax,%rdi
    abb0:	e8 ef 03 00 00       	call   afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    abb5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    abb9:	48 89 02             	mov    %rax,(%rdx)
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    abbc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    abc0:	48 8b 00             	mov    (%rax),%rax
    abc3:	48 8d 58 01          	lea    0x1(%rax),%rbx
    abc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    abcb:	48 89 c7             	mov    %rax,%rdi
    abce:	e8 93 f9 ff ff       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    abd3:	48 89 de             	mov    %rbx,%rsi
    abd6:	48 89 c7             	mov    %rax,%rdi
    abd9:	e8 ef 03 00 00       	call   afcd <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>
    }
    abde:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    abe2:	c9                   	leave
    abe3:	c3                   	ret

000000000000abe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>:
      _M_destroy(size_type __size) throw()
    abe4:	55                   	push   %rbp
    abe5:	48 89 e5             	mov    %rsp,%rbp
    abe8:	41 54                	push   %r12
    abea:	53                   	push   %rbx
    abeb:	48 83 ec 10          	sub    $0x10,%rsp
    abef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    abf3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    abf7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    abfb:	48 8d 58 01          	lea    0x1(%rax),%rbx
    abff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac03:	48 89 c7             	mov    %rax,%rdi
    ac06:	e8 d9 f8 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    ac0b:	49 89 c4             	mov    %rax,%r12
    ac0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac12:	48 89 c7             	mov    %rax,%rdi
    ac15:	e8 4c f9 ff ff       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    ac1a:	48 89 da             	mov    %rbx,%rdx
    ac1d:	4c 89 e6             	mov    %r12,%rsi
    ac20:	48 89 c7             	mov    %rax,%rdi
    ac23:	e8 13 04 00 00       	call   b03b <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm>
    ac28:	90                   	nop
    ac29:	48 83 c4 10          	add    $0x10,%rsp
    ac2d:	5b                   	pop    %rbx
    ac2e:	41 5c                	pop    %r12
    ac30:	5d                   	pop    %rbp
    ac31:	c3                   	ret

000000000000ac32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
    ac32:	55                   	push   %rbp
    ac33:	48 89 e5             	mov    %rsp,%rbp
    ac36:	48 83 ec 10          	sub    $0x10,%rsp
    ac3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    ac3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac42:	48 83 c0 10          	add    $0x10,%rax
    ac46:	48 89 c7             	mov    %rax,%rdi
    ac49:	e8 4b 04 00 00       	call   b099 <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>
      }
    ac4e:	c9                   	leave
    ac4f:	c3                   	ret

000000000000ac50 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    ac50:	55                   	push   %rbp
    ac51:	48 89 e5             	mov    %rsp,%rbp
    ac54:	48 83 ec 10          	sub    $0x10,%rsp
    ac58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
    ac60:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    ac64:	48 89 c7             	mov    %rax,%rdi
    ac67:	e8 47 04 00 00       	call   b0b3 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
    ac6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac70:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ac74:	48 89 d6             	mov    %rdx,%rsi
    ac77:	48 89 c7             	mov    %rax,%rdi
    ac7a:	e8 3f 04 00 00       	call   b0be <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
    }
    ac7f:	c9                   	leave
    ac80:	c3                   	ret

000000000000ac81 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
    ac81:	55                   	push   %rbp
    ac82:	48 89 e5             	mov    %rsp,%rbp
    ac85:	48 83 ec 20          	sub    $0x20,%rsp
    ac89:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac8d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ac91:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { _S_copy(__p, __k1, __k2 - __k1); }
    ac95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac99:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    ac9d:	48 89 c2             	mov    %rax,%rdx
    aca0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    aca4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aca8:	48 89 ce             	mov    %rcx,%rsi
    acab:	48 89 c7             	mov    %rax,%rdi
    acae:	e8 21 04 00 00       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    acb3:	90                   	nop
    acb4:	c9                   	leave
    acb5:	c3                   	ret

000000000000acb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
    acb6:	55                   	push   %rbp
    acb7:	48 89 e5             	mov    %rsp,%rbp
    acba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
    acbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acc2:	5d                   	pop    %rbp
    acc3:	c3                   	ret

000000000000acc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>:
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
    acc4:	55                   	push   %rbp
    acc5:	48 89 e5             	mov    %rsp,%rbp
    acc8:	53                   	push   %rbx
    acc9:	48 83 ec 28          	sub    $0x28,%rsp
    accd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    acd1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    acd5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    acd9:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (this->max_size() - (this->size() - __n1) < __n2)
    acdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ace1:	48 89 c7             	mov    %rax,%rdi
    ace4:	e8 bb 02 00 00       	call   afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    ace9:	48 89 c3             	mov    %rax,%rbx
    acec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    acf0:	48 89 c7             	mov    %rax,%rdi
    acf3:	e8 fe b5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    acf8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    acfc:	48 29 c2             	sub    %rax,%rdx
    acff:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
    ad03:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    ad07:	0f 92 c0             	setb   %al
    ad0a:	84 c0                	test   %al,%al
    ad0c:	74 0c                	je     ad1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc+0x56>
	  __throw_length_error(__N(__s));
    ad0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ad12:	48 89 c7             	mov    %rax,%rdi
    ad15:	e8 c6 a3 ff ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      }
    ad1a:	90                   	nop
    ad1b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ad1f:	c9                   	leave
    ad20:	c3                   	ret
    ad21:	90                   	nop

000000000000ad22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    ad22:	55                   	push   %rbp
    ad23:	48 89 e5             	mov    %rsp,%rbp
    ad26:	53                   	push   %rbx
    ad27:	48 83 ec 38          	sub    $0x38,%rsp
    ad2b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ad2f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    ad33:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();
    ad37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ad3b:	48 89 c7             	mov    %rax,%rdi
    ad3e:	e8 b3 b5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    ad43:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    ad47:	48 01 d0             	add    %rdx,%rax
    ad4a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

      if (__len <= this->capacity())
    ad4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ad52:	48 89 c7             	mov    %rax,%rdi
    ad55:	e8 6a fa ff ff       	call   a7c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
    ad5a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    ad5e:	0f 93 c0             	setae  %al
    ad61:	84 c0                	test   %al,%al
    ad63:	74 3b                	je     ada0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0x7e>
	{
	  if (__n)
    ad65:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    ad6a:	74 62                	je     adce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    ad6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ad70:	48 89 c7             	mov    %rax,%rdi
    ad73:	e8 6c f7 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    ad78:	48 89 c3             	mov    %rax,%rbx
    ad7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ad7f:	48 89 c7             	mov    %rax,%rdi
    ad82:	e8 6f b5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    ad87:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
    ad8b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    ad8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ad93:	48 89 c6             	mov    %rax,%rsi
    ad96:	48 89 cf             	mov    %rcx,%rdi
    ad99:	e8 36 03 00 00       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    ad9e:	eb 2e                	jmp    adce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	}
      else
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    ada0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ada4:	48 89 c7             	mov    %rax,%rdi
    ada7:	e8 4a b5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    adac:	48 89 c6             	mov    %rax,%rsi
    adaf:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    adb3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    adb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    adbb:	49 89 c8             	mov    %rcx,%r8
    adbe:	48 89 d1             	mov    %rdx,%rcx
    adc1:	ba 00 00 00 00       	mov    $0x0,%edx
    adc6:	48 89 c7             	mov    %rax,%rdi
    adc9:	e8 50 03 00 00       	call   b11e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>

      this->_M_set_length(__len);
    adce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    add2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    add6:	48 89 d6             	mov    %rdx,%rsi
    add9:	48 89 c7             	mov    %rax,%rdi
    addc:	e8 2d f3 ff ff       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
    ade1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
    ade5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ade9:	c9                   	leave
    adea:	c3                   	ret
    adeb:	90                   	nop

000000000000adec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm>:
      replace(size_type __pos, size_type __n1, const _CharT* __s,
    adec:	55                   	push   %rbp
    aded:	48 89 e5             	mov    %rsp,%rbp
    adf0:	53                   	push   %rbx
    adf1:	48 83 ec 38          	sub    $0x38,%rsp
    adf5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    adf9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    adfd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    ae01:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    ae05:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
    ae09:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ae0d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    ae11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae15:	48 89 ce             	mov    %rcx,%rsi
    ae18:	48 89 c7             	mov    %rax,%rdi
    ae1b:	e8 44 00 00 00       	call   ae64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm>
    ae20:	48 89 c3             	mov    %rax,%rbx
    ae23:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    ae27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae2b:	48 8d 15 8d 8f 01 00 	lea    0x18f8d(%rip),%rdx        # 23dbf <_ZNSt8__detailL19__atomic_spin_countE+0x35b>
    ae32:	48 89 ce             	mov    %rcx,%rsi
    ae35:	48 89 c7             	mov    %rax,%rdi
    ae38:	e8 07 fa ff ff       	call   a844 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>
    ae3d:	48 89 c6             	mov    %rax,%rsi
    ae40:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    ae44:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ae48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae4c:	49 89 c8             	mov    %rcx,%r8
    ae4f:	48 89 d1             	mov    %rdx,%rcx
    ae52:	48 89 da             	mov    %rbx,%rdx
    ae55:	48 89 c7             	mov    %rax,%rdi
    ae58:	e8 05 04 00 00       	call   b262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>
      }
    ae5d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ae61:	c9                   	leave
    ae62:	c3                   	ret
    ae63:	90                   	nop

000000000000ae64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm>:
      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
    ae64:	55                   	push   %rbp
    ae65:	48 89 e5             	mov    %rsp,%rbp
    ae68:	48 83 ec 30          	sub    $0x30,%rsp
    ae6c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ae70:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ae74:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const bool __testoff =  __off < this->size() - __pos;
    ae78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae7c:	48 89 c7             	mov    %rax,%rdi
    ae7f:	e8 72 b4 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    ae84:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    ae88:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    ae8c:	0f 92 c0             	setb   %al
    ae8f:	88 45 ff             	mov    %al,-0x1(%rbp)
	return __testoff ? __off : this->size() - __pos;
    ae92:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
    ae96:	74 06                	je     ae9e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm+0x3a>
    ae98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ae9c:	eb 10                	jmp    aeae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm+0x4a>
    ae9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aea2:	48 89 c7             	mov    %rax,%rdi
    aea5:	e8 4c b4 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    aeaa:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
      }
    aeae:	c9                   	leave
    aeaf:	c3                   	ret

000000000000aeb0 <_ZNSt5tupleIJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
    aeb0:	55                   	push   %rbp
    aeb1:	48 89 e5             	mov    %rsp,%rbp
    aeb4:	48 83 ec 10          	sub    $0x10,%rsp
    aeb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
    aebc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aec0:	48 89 c7             	mov    %rax,%rdi
    aec3:	e8 42 07 00 00       	call   b60a <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1Ev>
    aec8:	90                   	nop
    aec9:	c9                   	leave
    aeca:	c3                   	ret

000000000000aecb <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    aecb:	55                   	push   %rbp
    aecc:	48 89 e5             	mov    %rsp,%rbp
    aecf:	48 83 ec 10          	sub    $0x10,%rsp
    aed3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    aed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aedb:	48 89 c7             	mov    %rax,%rdi
    aede:	e8 4e 07 00 00       	call   b631 <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
    aee3:	c9                   	leave
    aee4:	c3                   	ret
    aee5:	90                   	nop

000000000000aee6 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
    aee6:	55                   	push   %rbp
    aee7:	48 89 e5             	mov    %rsp,%rbp
    aeea:	48 83 ec 10          	sub    $0x10,%rsp
    aeee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aef2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aef6:	48 89 c7             	mov    %rax,%rdi
    aef9:	e8 4d 07 00 00       	call   b64b <_ZSt3getILm1EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    aefe:	c9                   	leave
    aeff:	c3                   	ret

000000000000af00 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    af00:	55                   	push   %rbp
    af01:	48 89 e5             	mov    %rsp,%rbp
    af04:	48 83 ec 10          	sub    $0x10,%rsp
    af08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    af0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af10:	48 89 c7             	mov    %rax,%rdi
    af13:	e8 4d 07 00 00       	call   b665 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
    af18:	c9                   	leave
    af19:	c3                   	ret

000000000000af1a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>:
    af1a:	55                   	push   %rbp
    af1b:	48 89 e5             	mov    %rsp,%rbp
    af1e:	48 83 ec 10          	sub    $0x10,%rsp
    af22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af2a:	48 89 c7             	mov    %rax,%rdi
    af2d:	e8 4d 07 00 00       	call   b67f <_ZSt3getILm1EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    af32:	c9                   	leave
    af33:	c3                   	ret

000000000000af34 <_ZNKSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
    af34:	55                   	push   %rbp
    af35:	48 89 e5             	mov    %rsp,%rbp
    af38:	48 83 ec 10          	sub    $0x10,%rsp
    af3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af44:	48 89 c7             	mov    %rax,%rdi
    af47:	e8 4d 07 00 00       	call   b699 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
    af4c:	48 8b 00             	mov    (%rax),%rax
    af4f:	c9                   	leave
    af50:	c3                   	ret

000000000000af51 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    af51:	55                   	push   %rbp
    af52:	48 89 e5             	mov    %rsp,%rbp
    af55:	48 83 ec 10          	sub    $0x10,%rsp
    af59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    af5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af61:	48 89 c7             	mov    %rax,%rdi
    af64:	e8 4a 07 00 00       	call   b6b3 <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
    af69:	c9                   	leave
    af6a:	c3                   	ret
    af6b:	90                   	nop

000000000000af6c <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
    af6c:	55                   	push   %rbp
    af6d:	48 89 e5             	mov    %rsp,%rbp
    af70:	48 83 ec 10          	sub    $0x10,%rsp
    af74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af7c:	48 89 c7             	mov    %rax,%rdi
    af7f:	e8 49 07 00 00       	call   b6cd <_ZSt3getILm1EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    af84:	c9                   	leave
    af85:	c3                   	ret

000000000000af86 <_ZNKSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
    af86:	55                   	push   %rbp
    af87:	48 89 e5             	mov    %rsp,%rbp
    af8a:	48 83 ec 10          	sub    $0x10,%rsp
    af8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af96:	48 89 c7             	mov    %rax,%rdi
    af99:	e8 49 07 00 00       	call   b6e7 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
    af9e:	48 8b 00             	mov    (%rax),%rax
    afa1:	c9                   	leave
    afa2:	c3                   	ret
    afa3:	90                   	nop

000000000000afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
    afa4:	55                   	push   %rbp
    afa5:	48 89 e5             	mov    %rsp,%rbp
    afa8:	48 83 ec 10          	sub    $0x10,%rsp
    afac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
    afb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    afb4:	48 89 c7             	mov    %rax,%rdi
    afb7:	e8 fa fc ff ff       	call   acb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    afbc:	48 89 c7             	mov    %rax,%rdi
    afbf:	e8 3d 07 00 00       	call   b701 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
    afc4:	48 83 e8 01          	sub    $0x1,%rax
    afc8:	48 d1 e8             	shr    %rax
    afcb:	c9                   	leave
    afcc:	c3                   	ret

000000000000afcd <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
    afcd:	55                   	push   %rbp
    afce:	48 89 e5             	mov    %rsp,%rbp
    afd1:	48 83 ec 20          	sub    $0x20,%rsp
    afd5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    afd9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    afdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    afe1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    afe5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    afe9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
#if __cplusplus > 201703L
      [[nodiscard,__gnu__::__always_inline__]]
      constexpr _Tp*
      allocate(size_t __n)
      {
	if (std::__is_constant_evaluated())
    afed:	e8 ac b1 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    aff2:	84 c0                	test   %al,%al
    aff4:	74 2a                	je     b020 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m+0x53>
	  {
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
    aff6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    affa:	ba 00 00 00 00       	mov    $0x0,%edx
    afff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b003:	48 89 d0             	mov    %rdx,%rax
    b006:	83 e0 01             	and    $0x1,%eax
    b009:	84 c0                	test   %al,%al
    b00b:	74 05                	je     b012 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m+0x45>
	      std::__throw_bad_array_new_length();
    b00d:	e8 6e a1 ff ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
    b012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b016:	48 89 c7             	mov    %rax,%rdi
    b019:	e8 02 a2 ff ff       	call   5220 <_Znwm@plt>
    b01e:	eb 19                	jmp    b039 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m+0x6c>
	  }

	return __allocator_base<_Tp>::allocate(__n, 0);
    b020:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b024:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b028:	ba 00 00 00 00       	mov    $0x0,%edx
    b02d:	48 89 ce             	mov    %rcx,%rsi
    b030:	48 89 c7             	mov    %rax,%rdi
    b033:	e8 c0 08 00 00       	call   b8f8 <_ZNSt15__new_allocatorIcE8allocateEmPKv>
    b038:	90                   	nop
      { return __a.allocate(__n); }
    b039:	c9                   	leave
    b03a:	c3                   	ret

000000000000b03b <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    b03b:	55                   	push   %rbp
    b03c:	48 89 e5             	mov    %rsp,%rbp
    b03f:	48 83 ec 40          	sub    $0x40,%rsp
    b043:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b047:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b04b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    b04f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b053:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b057:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b05b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b05f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b063:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
    b067:	e8 32 b1 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b06c:	84 c0                	test   %al,%al
    b06e:	74 0e                	je     b07e <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm+0x43>
	  {
	    ::operator delete(__p);
    b070:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b074:	48 89 c7             	mov    %rax,%rdi
    b077:	e8 74 a1 ff ff       	call   51f0 <_ZdlPv@plt>
	    return;
    b07c:	eb 18                	jmp    b096 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm+0x5b>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
    b07e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b082:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b08a:	48 89 ce             	mov    %rcx,%rsi
    b08d:	48 89 c7             	mov    %rax,%rdi
    b090:	e8 ab 08 00 00       	call   b940 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
      { __a.deallocate(__p, __n); }
    b095:	90                   	nop
    b096:	90                   	nop
    b097:	c9                   	leave
    b098:	c3                   	ret

000000000000b099 <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>:
      pointer_to(element_type& __r) noexcept
    b099:	55                   	push   %rbp
    b09a:	48 89 e5             	mov    %rsp,%rbp
    b09d:	48 83 ec 10          	sub    $0x10,%rsp
    b0a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
    b0a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b0a9:	48 89 c7             	mov    %rax,%rdi
    b0ac:	e8 61 06 00 00       	call   b712 <_ZSt9addressofIKcEPT_RS1_>
    b0b1:	c9                   	leave
    b0b2:	c3                   	ret

000000000000b0b3 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    b0b3:	55                   	push   %rbp
    b0b4:	48 89 e5             	mov    %rsp,%rbp
    b0b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    b0bb:	90                   	nop
    b0bc:	5d                   	pop    %rbp
    b0bd:	c3                   	ret

000000000000b0be <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    b0be:	55                   	push   %rbp
    b0bf:	48 89 e5             	mov    %rsp,%rbp
    b0c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b0c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
    b0ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b0ce:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    }
    b0d2:	5d                   	pop    %rbp
    b0d3:	c3                   	ret

000000000000b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
    b0d4:	55                   	push   %rbp
    b0d5:	48 89 e5             	mov    %rsp,%rbp
    b0d8:	48 83 ec 20          	sub    $0x20,%rsp
    b0dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b0e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b0e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
    b0e8:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
    b0ed:	75 15                	jne    b104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
    b0ef:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b0f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b0f7:	48 89 d6             	mov    %rdx,%rsi
    b0fa:	48 89 c7             	mov    %rax,%rdi
    b0fd:	e8 c4 b0 ff ff       	call   61c6 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
    b102:	eb 17                	jmp    b11b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x47>
	  traits_type::copy(__d, __s, __n);
    b104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b108:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b10c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b110:	48 89 ce             	mov    %rcx,%rsi
    b113:	48 89 c7             	mov    %rax,%rdi
    b116:	e8 78 b1 ff ff       	call   6293 <_ZNSt11char_traitsIcE4copyEPcPKcm>
      }
    b11b:	90                   	nop
    b11c:	c9                   	leave
    b11d:	c3                   	ret

000000000000b11e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>:
    basic_string<_CharT, _Traits, _Alloc>::
    b11e:	55                   	push   %rbp
    b11f:	48 89 e5             	mov    %rsp,%rbp
    b122:	48 83 ec 50          	sub    $0x50,%rsp
    b126:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b12a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b12e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    b132:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    b136:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
      const size_type __how_much = length() - __pos - __len1;
    b13a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b13e:	48 89 c7             	mov    %rax,%rdi
    b141:	e8 cc ee ff ff       	call   a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
    b146:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
    b14a:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    b14e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      size_type __new_capacity = length() + __len2 - __len1;
    b152:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b156:	48 89 c7             	mov    %rax,%rdi
    b159:	e8 b4 ee ff ff       	call   a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
    b15e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    b162:	48 01 d0             	add    %rdx,%rax
    b165:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    b169:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __r = _M_create(__new_capacity, capacity());
    b16d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b171:	48 89 c7             	mov    %rax,%rdi
    b174:	e8 4b f6 ff ff       	call   a7c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
    b179:	48 89 c2             	mov    %rax,%rdx
    b17c:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    b180:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b184:	48 89 ce             	mov    %rcx,%rsi
    b187:	48 89 c7             	mov    %rax,%rdi
    b18a:	e8 8d f9 ff ff       	call   ab1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
    b18f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (__pos)
    b193:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    b198:	74 22                	je     b1bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x9e>
	this->_S_copy(__r, _M_data(), __pos);
    b19a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b19e:	48 89 c7             	mov    %rax,%rdi
    b1a1:	e8 3e f3 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b1a6:	48 89 c1             	mov    %rax,%rcx
    b1a9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b1ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b1b1:	48 89 ce             	mov    %rcx,%rsi
    b1b4:	48 89 c7             	mov    %rax,%rdi
    b1b7:	e8 18 ff ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__s && __len2)
    b1bc:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    b1c1:	74 26                	je     b1e9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
    b1c3:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    b1c8:	74 1f                	je     b1e9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
	this->_S_copy(__r + __pos, __s, __len2);
    b1ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b1ce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b1d2:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b1d6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    b1da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b1de:	48 89 c6             	mov    %rax,%rsi
    b1e1:	48 89 cf             	mov    %rcx,%rdi
    b1e4:	e8 eb fe ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__how_much)
    b1e9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    b1ee:	74 3d                	je     b22d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x10f>
		      _M_data() + __pos + __len1, __how_much);
    b1f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b1f4:	48 89 c7             	mov    %rax,%rdi
    b1f7:	e8 e8 f2 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b1fc:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b200:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    b204:	48 01 ca             	add    %rcx,%rdx
    b207:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
	this->_S_copy(__r + __pos + __len2,
    b20b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b20f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b213:	48 01 c2             	add    %rax,%rdx
    b216:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b21a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b21e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b222:	48 89 c2             	mov    %rax,%rdx
    b225:	48 89 cf             	mov    %rcx,%rdi
    b228:	e8 a7 fe ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      _M_dispose();
    b22d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b231:	48 89 c7             	mov    %rax,%rdi
    b234:	e8 f3 f2 ff ff       	call   a52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__r);
    b239:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b23d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b241:	48 89 d6             	mov    %rdx,%rsi
    b244:	48 89 c7             	mov    %rax,%rdi
    b247:	e8 5c f3 ff ff       	call   a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__new_capacity);
    b24c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b250:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b254:	48 89 d6             	mov    %rdx,%rsi
    b257:	48 89 c7             	mov    %rax,%rdi
    b25a:	e8 63 f3 ff ff       	call   a5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
    }
    b25f:	90                   	nop
    b260:	c9                   	leave
    b261:	c3                   	ret

000000000000b262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    b262:	55                   	push   %rbp
    b263:	48 89 e5             	mov    %rsp,%rbp
    b266:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
    b26a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    b26e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    b272:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    b276:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
    b27a:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
	       const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");
    b27e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b282:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    b286:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b28a:	48 8d 0d 44 8b 01 00 	lea    0x18b44(%rip),%rcx        # 23dd5 <_ZNSt8__detailL19__atomic_spin_countE+0x371>
    b291:	48 89 c7             	mov    %rax,%rdi
    b294:	e8 2b fa ff ff       	call   acc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>

      const size_type __old_size = this->size();
    b299:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b29d:	48 89 c7             	mov    %rax,%rdi
    b2a0:	e8 51 b0 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b2a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      const size_type __new_size = __old_size + __len2 - __len1;
    b2a9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b2ad:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b2b1:	48 01 d0             	add    %rdx,%rax
    b2b4:	48 2b 45 98          	sub    -0x68(%rbp),%rax
    b2b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

      if (__new_size <= this->capacity())
    b2bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b2c0:	48 89 c7             	mov    %rax,%rdi
    b2c3:	e8 fc f4 ff ff       	call   a7c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
    b2c8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b2cc:	0f 93 c0             	setae  %al
    b2cf:	84 c0                	test   %al,%al
    b2d1:	0f 84 fa 02 00 00    	je     b5d1 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x36f>
	{
	  pointer __p = this->_M_data() + __pos;
    b2d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b2db:	48 89 c7             	mov    %rax,%rdi
    b2de:	e8 01 f2 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b2e3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b2e7:	48 01 d0             	add    %rdx,%rax
    b2ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	  const size_type __how_much = __old_size - __pos - __len1;
    b2ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b2f2:	48 2b 45 a0          	sub    -0x60(%rbp),%rax
    b2f6:	48 2b 45 98          	sub    -0x68(%rbp),%rax
    b2fa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if __cpp_lib_is_constant_evaluated
	  if (std::is_constant_evaluated())
    b2fe:	e8 a6 ae ff ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
    b303:	84 c0                	test   %al,%al
    b305:	0f 84 09 01 00 00    	je     b414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x1b2>
	    {
	      auto __newp = _Alloc_traits::allocate(_M_get_allocator(),
    b30b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b30f:	48 89 c7             	mov    %rax,%rdi
    b312:	e8 4f f2 ff ff       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    b317:	48 89 c2             	mov    %rax,%rdx
    b31a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b31e:	48 89 c6             	mov    %rax,%rsi
    b321:	48 89 d7             	mov    %rdx,%rdi
    b324:	e8 a4 fc ff ff       	call   afcd <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>
    b329:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
						    __new_size);
	      _S_copy(__newp, this->_M_data(), __pos);
    b32d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b331:	48 89 c7             	mov    %rax,%rdi
    b334:	e8 ab f1 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b339:	48 89 c1             	mov    %rax,%rcx
    b33c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b340:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b344:	48 89 ce             	mov    %rcx,%rsi
    b347:	48 89 c7             	mov    %rax,%rdi
    b34a:	e8 85 fd ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos, __s, __len2);
    b34f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    b353:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b357:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b35b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b35f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    b363:	48 89 c6             	mov    %rax,%rsi
    b366:	48 89 cf             	mov    %rcx,%rdi
    b369:	e8 66 fd ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos + __len2, __p + __len1, __how_much);
    b36e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b372:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b376:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    b37a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b37e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b382:	48 01 c2             	add    %rax,%rdx
    b385:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b389:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b38d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b391:	48 89 c2             	mov    %rax,%rdx
    b394:	48 89 cf             	mov    %rcx,%rdi
    b397:	e8 38 fd ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(this->_M_data(), __newp, __new_size);
    b39c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b3a0:	48 89 c7             	mov    %rax,%rdi
    b3a3:	e8 3c f1 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b3a8:	48 89 c1             	mov    %rax,%rcx
    b3ab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b3af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b3b3:	48 89 c6             	mov    %rax,%rsi
    b3b6:	48 89 cf             	mov    %rcx,%rdi
    b3b9:	e8 16 fd ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      this->_M_get_allocator().deallocate(__newp, __new_size);
    b3be:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b3c2:	48 89 c7             	mov    %rax,%rdi
    b3c5:	e8 9c f1 ff ff       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    b3ca:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b3ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b3d2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b3d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b3da:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	if (std::__is_constant_evaluated())
    b3de:	e8 bb ad ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b3e3:	84 c0                	test   %al,%al
    b3e5:	74 11                	je     b3f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x196>
	    ::operator delete(__p);
    b3e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b3eb:	48 89 c7             	mov    %rax,%rdi
    b3ee:	e8 fd 9d ff ff       	call   51f0 <_ZdlPv@plt>
	    return;
    b3f3:	e9 f8 01 00 00       	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
	__allocator_base<_Tp>::deallocate(__p, __n);
    b3f8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    b3fc:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    b400:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b404:	48 89 ce             	mov    %rcx,%rsi
    b407:	48 89 c7             	mov    %rax,%rdi
    b40a:	e8 31 05 00 00       	call   b940 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
    b40f:	e9 dc 01 00 00       	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
	    }
	  else
#endif
	  if (_M_disjunct(__s))
    b414:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    b418:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b41c:	48 89 d6             	mov    %rdx,%rsi
    b41f:	48 89 c7             	mov    %rax,%rdi
    b422:	e8 05 03 00 00       	call   b72c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
    b427:	84 c0                	test   %al,%al
    b429:	74 5f                	je     b48a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x228>
	    {
	      if (__how_much && __len1 != __len2)
    b42b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    b430:	74 31                	je     b463 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x201>
    b432:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b436:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
    b43a:	74 27                	je     b463 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x201>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
    b43c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b440:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b444:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    b448:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b44c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b450:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b454:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b458:	48 89 c2             	mov    %rax,%rdx
    b45b:	48 89 cf             	mov    %rcx,%rdi
    b45e:	e8 48 03 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__len2)
    b463:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    b468:	0f 84 82 01 00 00    	je     b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		this->_S_copy(__p, __s, __len2);
    b46e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b472:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b476:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b47a:	48 89 ce             	mov    %rcx,%rsi
    b47d:	48 89 c7             	mov    %rax,%rdi
    b480:	e8 4f fc ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    b485:	e9 66 01 00 00       	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
	    }
	  else
	    {
	      // Work in-place.
	      if (__len2 && __len2 <= __len1)
    b48a:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    b48f:	74 21                	je     b4b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x250>
    b491:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b495:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    b499:	72 17                	jb     b4b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x250>
		this->_S_move(__p, __s, __len2);
    b49b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b49f:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b4a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b4a7:	48 89 ce             	mov    %rcx,%rsi
    b4aa:	48 89 c7             	mov    %rax,%rdi
    b4ad:	e8 f9 02 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__how_much && __len1 != __len2)
    b4b2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    b4b7:	74 31                	je     b4ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x288>
    b4b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b4bd:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
    b4c1:	74 27                	je     b4ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x288>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
    b4c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b4c7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b4cb:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    b4cf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b4d3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b4d7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b4db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b4df:	48 89 c2             	mov    %rax,%rdx
    b4e2:	48 89 cf             	mov    %rcx,%rdi
    b4e5:	e8 c1 02 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__len2 > __len1)
    b4ea:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b4ee:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    b4f2:	0f 83 f8 00 00 00    	jae    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		{
		  if (__s + __len2 <= __p + __len1)
    b4f8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    b4fc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b500:	48 01 d0             	add    %rdx,%rax
    b503:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b507:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    b50b:	48 01 ca             	add    %rcx,%rdx
    b50e:	48 39 c2             	cmp    %rax,%rdx
    b511:	72 1c                	jb     b52f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x2cd>
		    this->_S_move(__p, __s, __len2);
    b513:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b517:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b51b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b51f:	48 89 ce             	mov    %rcx,%rsi
    b522:	48 89 c7             	mov    %rax,%rdi
    b525:	e8 81 02 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
    b52a:	e9 c1 00 00 00       	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		  else if (__s >= __p + __len1)
    b52f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b533:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b537:	48 01 d0             	add    %rdx,%rax
    b53a:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    b53e:	72 3b                	jb     b57b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x319>
		    {
		      // Hint to middle end that __p and __s overlap
		      // (PR 98465).
		      const size_type __poff = (__s - __p) + (__len2 - __len1);
    b540:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    b544:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    b548:	48 89 c2             	mov    %rax,%rdx
    b54b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b54f:	48 2b 45 98          	sub    -0x68(%rbp),%rax
    b553:	48 01 d0             	add    %rdx,%rax
    b556:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		      this->_S_copy(__p, __p + __poff, __len2);
    b55a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b55e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b562:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b566:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b56a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b56e:	48 89 ce             	mov    %rcx,%rsi
    b571:	48 89 c7             	mov    %rax,%rdi
    b574:	e8 5b fb ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    b579:	eb 75                	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		    }
		  else
		    {
		      const size_type __nleft = (__p + __len1) - __s;
    b57b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b57f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b583:	48 01 d0             	add    %rdx,%rax
    b586:	48 2b 45 90          	sub    -0x70(%rbp),%rax
    b58a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		      this->_S_move(__p, __s, __nleft);
    b58e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b592:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b596:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b59a:	48 89 ce             	mov    %rcx,%rsi
    b59d:	48 89 c7             	mov    %rax,%rdi
    b5a0:	e8 06 02 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
		      this->_S_copy(__p + __nleft, __p + __len2,
    b5a5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b5a9:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
    b5ad:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b5b1:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b5b5:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
    b5b9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b5bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b5c1:	48 01 d1             	add    %rdx,%rcx
    b5c4:	48 89 c2             	mov    %rax,%rdx
    b5c7:	48 89 cf             	mov    %rcx,%rdi
    b5ca:	e8 05 fb ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    b5cf:	eb 1f                	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		    }
		}
	    }
	}
      else
	this->_M_mutate(__pos, __len1, __s, __len2);
    b5d1:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
    b5d5:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b5d9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    b5dd:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    b5e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b5e5:	49 89 f8             	mov    %rdi,%r8
    b5e8:	48 89 c7             	mov    %rax,%rdi
    b5eb:	e8 2e fb ff ff       	call   b11e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>

      this->_M_set_length(__new_size);
    b5f0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b5f4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b5f8:	48 89 d6             	mov    %rdx,%rsi
    b5fb:	48 89 c7             	mov    %rax,%rdi
    b5fe:	e8 0b eb ff ff       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
    b603:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    }
    b607:	c9                   	leave
    b608:	c3                   	ret
    b609:	90                   	nop

000000000000b60a <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
    b60a:	55                   	push   %rbp
    b60b:	48 89 e5             	mov    %rsp,%rbp
    b60e:	48 83 ec 10          	sub    $0x10,%rsp
    b612:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
    b616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b61a:	48 89 c7             	mov    %rax,%rdi
    b61d:	e8 d4 01 00 00       	call   b7f6 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEEC1Ev>
    b622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b626:	48 89 c7             	mov    %rax,%rdi
    b629:	e8 e4 01 00 00       	call   b812 <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EEC1Ev>
    b62e:	90                   	nop
    b62f:	c9                   	leave
    b630:	c3                   	ret

000000000000b631 <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b631:	55                   	push   %rbp
    b632:	48 89 e5             	mov    %rsp,%rbp
    b635:	48 83 ec 10          	sub    $0x10,%rsp
    b639:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b63d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b641:	48 89 c7             	mov    %rax,%rdi
    b644:	e8 df 01 00 00       	call   b828 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>
    b649:	c9                   	leave
    b64a:	c3                   	ret

000000000000b64b <_ZSt3getILm1EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    b64b:	55                   	push   %rbp
    b64c:	48 89 e5             	mov    %rsp,%rbp
    b64f:	48 83 ec 10          	sub    $0x10,%rsp
    b653:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b657:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b65b:	48 89 c7             	mov    %rax,%rdi
    b65e:	e8 df 01 00 00       	call   b842 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
    b663:	c9                   	leave
    b664:	c3                   	ret

000000000000b665 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b665:	55                   	push   %rbp
    b666:	48 89 e5             	mov    %rsp,%rbp
    b669:	48 83 ec 10          	sub    $0x10,%rsp
    b66d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b671:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b675:	48 89 c7             	mov    %rax,%rdi
    b678:	e8 df 01 00 00       	call   b85c <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>
    b67d:	c9                   	leave
    b67e:	c3                   	ret

000000000000b67f <_ZSt3getILm1EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    b67f:	55                   	push   %rbp
    b680:	48 89 e5             	mov    %rsp,%rbp
    b683:	48 83 ec 10          	sub    $0x10,%rsp
    b687:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b68b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b68f:	48 89 c7             	mov    %rax,%rdi
    b692:	e8 df 01 00 00       	call   b876 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
    b697:	c9                   	leave
    b698:	c3                   	ret

000000000000b699 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    b699:	55                   	push   %rbp
    b69a:	48 89 e5             	mov    %rsp,%rbp
    b69d:	48 83 ec 10          	sub    $0x10,%rsp
    b6a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b6a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6a9:	48 89 c7             	mov    %rax,%rdi
    b6ac:	e8 df 01 00 00       	call   b890 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
    b6b1:	c9                   	leave
    b6b2:	c3                   	ret

000000000000b6b3 <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b6b3:	55                   	push   %rbp
    b6b4:	48 89 e5             	mov    %rsp,%rbp
    b6b7:	48 83 ec 10          	sub    $0x10,%rsp
    b6bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b6bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6c3:	48 89 c7             	mov    %rax,%rdi
    b6c6:	e8 df 01 00 00       	call   b8aa <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>
    b6cb:	c9                   	leave
    b6cc:	c3                   	ret

000000000000b6cd <_ZSt3getILm1EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    b6cd:	55                   	push   %rbp
    b6ce:	48 89 e5             	mov    %rsp,%rbp
    b6d1:	48 83 ec 10          	sub    $0x10,%rsp
    b6d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b6d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6dd:	48 89 c7             	mov    %rax,%rdi
    b6e0:	e8 df 01 00 00       	call   b8c4 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
    b6e5:	c9                   	leave
    b6e6:	c3                   	ret

000000000000b6e7 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
    b6e7:	55                   	push   %rbp
    b6e8:	48 89 e5             	mov    %rsp,%rbp
    b6eb:	48 83 ec 10          	sub    $0x10,%rsp
    b6ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b6f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6f7:	48 89 c7             	mov    %rax,%rdi
    b6fa:	e8 df 01 00 00       	call   b8de <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
    b6ff:	c9                   	leave
    b700:	c3                   	ret

000000000000b701 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    b701:	55                   	push   %rbp
    b702:	48 89 e5             	mov    %rsp,%rbp
    b705:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus <= 201703L
	return __a.max_size();
#else
	return size_t(-1) / sizeof(value_type);
    b709:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
#endif
      }
    b710:	5d                   	pop    %rbp
    b711:	c3                   	ret

000000000000b712 <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
    b712:	55                   	push   %rbp
    b713:	48 89 e5             	mov    %rsp,%rbp
    b716:	48 83 ec 10          	sub    $0x10,%rsp
    b71a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
    b71e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b722:	48 89 c7             	mov    %rax,%rdi
    b725:	e8 3f 02 00 00       	call   b969 <_ZSt11__addressofIKcEPT_RS1_>
    b72a:	c9                   	leave
    b72b:	c3                   	ret

000000000000b72c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
    b72c:	55                   	push   %rbp
    b72d:	48 89 e5             	mov    %rsp,%rbp
    b730:	53                   	push   %rbx
    b731:	48 83 ec 28          	sub    $0x28,%rsp
    b735:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b739:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	return (less<const _CharT*>()(__s, _M_data())
    b73d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b741:	48 89 c7             	mov    %rax,%rdi
    b744:	e8 9b ed ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b749:	48 89 c2             	mov    %rax,%rdx
    b74c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b750:	48 8d 45 ee          	lea    -0x12(%rbp),%rax
    b754:	48 89 ce             	mov    %rcx,%rsi
    b757:	48 89 c7             	mov    %rax,%rdi
    b75a:	e8 19 02 00 00       	call   b978 <_ZNKSt4lessIPKcEclES1_S1_>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    b75f:	84 c0                	test   %al,%al
    b761:	75 36                	jne    b799 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x6d>
    b763:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b767:	48 89 c7             	mov    %rax,%rdi
    b76a:	e8 75 ed ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b76f:	48 89 c3             	mov    %rax,%rbx
    b772:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b776:	48 89 c7             	mov    %rax,%rdi
    b779:	e8 78 ab ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b77e:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
    b782:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b786:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b78a:	48 89 ce             	mov    %rcx,%rsi
    b78d:	48 89 c7             	mov    %rax,%rdi
    b790:	e8 e3 01 00 00       	call   b978 <_ZNKSt4lessIPKcEclES1_S1_>
    b795:	84 c0                	test   %al,%al
    b797:	74 07                	je     b7a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x74>
    b799:	b8 01 00 00 00       	mov    $0x1,%eax
    b79e:	eb 05                	jmp    b7a5 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x79>
    b7a0:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    b7a5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b7a9:	c9                   	leave
    b7aa:	c3                   	ret

000000000000b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>:
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
    b7ab:	55                   	push   %rbp
    b7ac:	48 89 e5             	mov    %rsp,%rbp
    b7af:	48 83 ec 20          	sub    $0x20,%rsp
    b7b3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b7b7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b7bb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
    b7bf:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
    b7c4:	75 15                	jne    b7db <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
    b7c6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b7ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7ce:	48 89 d6             	mov    %rdx,%rsi
    b7d1:	48 89 c7             	mov    %rax,%rdi
    b7d4:	e8 ed a9 ff ff       	call   61c6 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
    b7d9:	eb 17                	jmp    b7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x47>
	  traits_type::move(__d, __s, __n);
    b7db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b7df:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b7e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7e7:	48 89 ce             	mov    %rcx,%rsi
    b7ea:	48 89 c7             	mov    %rax,%rdi
    b7ed:	e8 44 aa ff ff       	call   6236 <_ZNSt11char_traitsIcE4moveEPcPKcm>
      }
    b7f2:	90                   	nop
    b7f3:	c9                   	leave
    b7f4:	c3                   	ret
    b7f5:	90                   	nop

000000000000b7f6 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEEC1Ev>:
      _Tuple_impl()
    b7f6:	55                   	push   %rbp
    b7f7:	48 89 e5             	mov    %rsp,%rbp
    b7fa:	48 83 ec 10          	sub    $0x10,%rsp
    b7fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
    b802:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b806:	48 89 c7             	mov    %rax,%rdi
    b809:	e8 a4 01 00 00       	call   b9b2 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EEC1Ev>
    b80e:	90                   	nop
    b80f:	c9                   	leave
    b810:	c3                   	ret
    b811:	90                   	nop

000000000000b812 <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EEC1Ev>:
      constexpr _Head_base()
    b812:	55                   	push   %rbp
    b813:	48 89 e5             	mov    %rsp,%rbp
    b816:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
    b81a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b81e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    b825:	90                   	nop
    b826:	5d                   	pop    %rbp
    b827:	c3                   	ret

000000000000b828 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b828:	55                   	push   %rbp
    b829:	48 89 e5             	mov    %rsp,%rbp
    b82c:	48 83 ec 10          	sub    $0x10,%rsp
    b830:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b838:	48 89 c7             	mov    %rax,%rdi
    b83b:	e8 7d 01 00 00       	call   b9bd <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERS4_>
    b840:	c9                   	leave
    b841:	c3                   	ret

000000000000b842 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b842:	55                   	push   %rbp
    b843:	48 89 e5             	mov    %rsp,%rbp
    b846:	48 83 ec 10          	sub    $0x10,%rsp
    b84a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b84e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b852:	48 89 c7             	mov    %rax,%rdi
    b855:	e8 71 01 00 00       	call   b9cb <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEE7_M_headERS5_>
    b85a:	c9                   	leave
    b85b:	c3                   	ret

000000000000b85c <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b85c:	55                   	push   %rbp
    b85d:	48 89 e5             	mov    %rsp,%rbp
    b860:	48 83 ec 10          	sub    $0x10,%rsp
    b864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b86c:	48 89 c7             	mov    %rax,%rdi
    b86f:	e8 71 01 00 00       	call   b9e5 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERS4_>
    b874:	c9                   	leave
    b875:	c3                   	ret

000000000000b876 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b876:	55                   	push   %rbp
    b877:	48 89 e5             	mov    %rsp,%rbp
    b87a:	48 83 ec 10          	sub    $0x10,%rsp
    b87e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b886:	48 89 c7             	mov    %rax,%rdi
    b889:	e8 65 01 00 00       	call   b9f3 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEE7_M_headERS5_>
    b88e:	c9                   	leave
    b88f:	c3                   	ret

000000000000b890 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b890:	55                   	push   %rbp
    b891:	48 89 e5             	mov    %rsp,%rbp
    b894:	48 83 ec 10          	sub    $0x10,%rsp
    b898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b89c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8a0:	48 89 c7             	mov    %rax,%rdi
    b8a3:	e8 65 01 00 00       	call   ba0d <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>
    b8a8:	c9                   	leave
    b8a9:	c3                   	ret

000000000000b8aa <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b8aa:	55                   	push   %rbp
    b8ab:	48 89 e5             	mov    %rsp,%rbp
    b8ae:	48 83 ec 10          	sub    $0x10,%rsp
    b8b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b8b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8ba:	48 89 c7             	mov    %rax,%rdi
    b8bd:	e8 65 01 00 00       	call   ba27 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERS4_>
    b8c2:	c9                   	leave
    b8c3:	c3                   	ret

000000000000b8c4 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b8c4:	55                   	push   %rbp
    b8c5:	48 89 e5             	mov    %rsp,%rbp
    b8c8:	48 83 ec 10          	sub    $0x10,%rsp
    b8cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b8d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8d4:	48 89 c7             	mov    %rax,%rdi
    b8d7:	e8 59 01 00 00       	call   ba35 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEE7_M_headERS5_>
    b8dc:	c9                   	leave
    b8dd:	c3                   	ret

000000000000b8de <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b8de:	55                   	push   %rbp
    b8df:	48 89 e5             	mov    %rsp,%rbp
    b8e2:	48 83 ec 10          	sub    $0x10,%rsp
    b8e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b8ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8ee:	48 89 c7             	mov    %rax,%rdi
    b8f1:	e8 59 01 00 00       	call   ba4f <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>
    b8f6:	c9                   	leave
    b8f7:	c3                   	ret

000000000000b8f8 <_ZNSt15__new_allocatorIcE8allocateEmPKv>:
#endif

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    b8f8:	55                   	push   %rbp
    b8f9:	48 89 e5             	mov    %rsp,%rbp
    b8fc:	48 83 ec 20          	sub    $0x20,%rsp
    b900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b904:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b908:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	// _GLIBCXX_RESOLVE_LIB_DEFECTS
	// 3308. std::allocator<void>().allocate(n)
	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__builtin_expect(__n > this->_M_max_size(), false))
    b90c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b910:	48 89 c7             	mov    %rax,%rdi
    b913:	e8 52 01 00 00       	call   ba6a <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>
    b918:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b91c:	0f 92 c0             	setb   %al
    b91f:	0f b6 c0             	movzbl %al,%eax
    b922:	48 85 c0             	test   %rax,%rax
    b925:	0f 95 c0             	setne  %al
    b928:	84 c0                	test   %al,%al
    b92a:	74 05                	je     b931 <_ZNSt15__new_allocatorIcE8allocateEmPKv+0x39>
	  {
	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
	    // 3190. allocator::allocate sometimes returns too little storage
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
	      std::__throw_bad_array_new_length();
	    std::__throw_bad_alloc();
    b92c:	e8 4f 97 ff ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    b931:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b935:	48 89 c7             	mov    %rax,%rdi
    b938:	e8 e3 98 ff ff       	call   5220 <_Znwm@plt>
    b93d:	90                   	nop
      }
    b93e:	c9                   	leave
    b93f:	c3                   	ret

000000000000b940 <_ZNSt15__new_allocatorIcE10deallocateEPcm>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    b940:	55                   	push   %rbp
    b941:	48 89 e5             	mov    %rsp,%rbp
    b944:	48 83 ec 20          	sub    $0x20,%rsp
    b948:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b94c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b950:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    b954:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b958:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b95c:	48 89 d6             	mov    %rdx,%rsi
    b95f:	48 89 c7             	mov    %rax,%rdi
    b962:	e8 c9 98 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    b967:	c9                   	leave
    b968:	c3                   	ret

000000000000b969 <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    b969:	55                   	push   %rbp
    b96a:	48 89 e5             	mov    %rsp,%rbp
    b96d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    b971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b975:	5d                   	pop    %rbp
    b976:	c3                   	ret
    b977:	90                   	nop

000000000000b978 <_ZNKSt4lessIPKcEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
    b978:	55                   	push   %rbp
    b979:	48 89 e5             	mov    %rsp,%rbp
    b97c:	48 83 ec 20          	sub    $0x20,%rsp
    b980:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b984:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b988:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
    b98c:	e8 0d a8 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b991:	84 c0                	test   %al,%al
    b993:	74 0d                	je     b9a2 <_ZNKSt4lessIPKcEclES1_S1_+0x2a>
	  return __x < __y;
    b995:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b999:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    b99d:	0f 92 c0             	setb   %al
    b9a0:	eb 0e                	jmp    b9b0 <_ZNKSt4lessIPKcEclES1_S1_+0x38>
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
    b9a2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b9a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b9aa:	48 39 c2             	cmp    %rax,%rdx
    b9ad:	0f 92 c0             	setb   %al
      }
    b9b0:	c9                   	leave
    b9b1:	c3                   	ret

000000000000b9b2 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EEC1Ev>:
      constexpr _Head_base()
    b9b2:	55                   	push   %rbp
    b9b3:	48 89 e5             	mov    %rsp,%rbp
    b9b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
    b9ba:	90                   	nop
    b9bb:	5d                   	pop    %rbp
    b9bc:	c3                   	ret

000000000000b9bd <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    b9bd:	55                   	push   %rbp
    b9be:	48 89 e5             	mov    %rsp,%rbp
    b9c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9c9:	5d                   	pop    %rbp
    b9ca:	c3                   	ret

000000000000b9cb <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b9cb:	55                   	push   %rbp
    b9cc:	48 89 e5             	mov    %rsp,%rbp
    b9cf:	48 83 ec 10          	sub    $0x10,%rsp
    b9d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9db:	48 89 c7             	mov    %rax,%rdi
    b9de:	e8 9b 00 00 00       	call   ba7e <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EE7_M_headERS5_>
    b9e3:	c9                   	leave
    b9e4:	c3                   	ret

000000000000b9e5 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    b9e5:	55                   	push   %rbp
    b9e6:	48 89 e5             	mov    %rsp,%rbp
    b9e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9f1:	5d                   	pop    %rbp
    b9f2:	c3                   	ret

000000000000b9f3 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b9f3:	55                   	push   %rbp
    b9f4:	48 89 e5             	mov    %rsp,%rbp
    b9f7:	48 83 ec 10          	sub    $0x10,%rsp
    b9fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba03:	48 89 c7             	mov    %rax,%rdi
    ba06:	e8 81 00 00 00       	call   ba8c <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EE7_M_headERS5_>
    ba0b:	c9                   	leave
    ba0c:	c3                   	ret

000000000000ba0d <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    ba0d:	55                   	push   %rbp
    ba0e:	48 89 e5             	mov    %rsp,%rbp
    ba11:	48 83 ec 10          	sub    $0x10,%rsp
    ba15:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba1d:	48 89 c7             	mov    %rax,%rdi
    ba20:	e8 75 00 00 00       	call   ba9a <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERKS4_>
    ba25:	c9                   	leave
    ba26:	c3                   	ret

000000000000ba27 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    ba27:	55                   	push   %rbp
    ba28:	48 89 e5             	mov    %rsp,%rbp
    ba2b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba33:	5d                   	pop    %rbp
    ba34:	c3                   	ret

000000000000ba35 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    ba35:	55                   	push   %rbp
    ba36:	48 89 e5             	mov    %rsp,%rbp
    ba39:	48 83 ec 10          	sub    $0x10,%rsp
    ba3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba45:	48 89 c7             	mov    %rax,%rdi
    ba48:	e8 5b 00 00 00       	call   baa8 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EE7_M_headERS5_>
    ba4d:	c9                   	leave
    ba4e:	c3                   	ret

000000000000ba4f <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    ba4f:	55                   	push   %rbp
    ba50:	48 89 e5             	mov    %rsp,%rbp
    ba53:	48 83 ec 10          	sub    $0x10,%rsp
    ba57:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba5f:	48 89 c7             	mov    %rax,%rdi
    ba62:	e8 4f 00 00 00       	call   bab6 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERKS4_>
    ba67:	c9                   	leave
    ba68:	c3                   	ret
    ba69:	90                   	nop

000000000000ba6a <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    ba6a:	55                   	push   %rbp
    ba6b:	48 89 e5             	mov    %rsp,%rbp
    ba6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    ba72:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
    ba79:	ff ff 7f 
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
    ba7c:	5d                   	pop    %rbp
    ba7d:	c3                   	ret

000000000000ba7e <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EE7_M_headERS5_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    ba7e:	55                   	push   %rbp
    ba7f:	48 89 e5             	mov    %rsp,%rbp
    ba82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba8a:	5d                   	pop    %rbp
    ba8b:	c3                   	ret

000000000000ba8c <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EE7_M_headERS5_>:
    ba8c:	55                   	push   %rbp
    ba8d:	48 89 e5             	mov    %rsp,%rbp
    ba90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba98:	5d                   	pop    %rbp
    ba99:	c3                   	ret

000000000000ba9a <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
    ba9a:	55                   	push   %rbp
    ba9b:	48 89 e5             	mov    %rsp,%rbp
    ba9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    baa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    baa6:	5d                   	pop    %rbp
    baa7:	c3                   	ret

000000000000baa8 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EE7_M_headERS5_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    baa8:	55                   	push   %rbp
    baa9:	48 89 e5             	mov    %rsp,%rbp
    baac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bab0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bab4:	5d                   	pop    %rbp
    bab5:	c3                   	ret

000000000000bab6 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
    bab6:	55                   	push   %rbp
    bab7:	48 89 e5             	mov    %rsp,%rbp
    baba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    babe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bac2:	5d                   	pop    %rbp
    bac3:	c3                   	ret

000000000000bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>:
  class CompressionExhaustedEXTError : public SystemError
    bac4:	55                   	push   %rbp
    bac5:	48 89 e5             	mov    %rsp,%rbp
    bac8:	48 83 ec 10          	sub    $0x10,%rsp
    bacc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bad0:	48 8d 15 19 b6 02 00 	lea    0x2b619(%rip),%rdx        # 370f0 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x10>
    bad7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    badb:	48 89 10             	mov    %rdx,(%rax)
    bade:	48 8d 15 33 b6 02 00 	lea    0x2b633(%rip),%rdx        # 37118 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x38>
    bae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bae9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    baed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    baf1:	48 89 c7             	mov    %rax,%rdi
    baf4:	e8 4d be ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    baf9:	90                   	nop
    bafa:	c9                   	leave
    bafb:	c3                   	ret

000000000000bafc <_ZThn8_N2vk28CompressionExhaustedEXTErrorD1Ev>:
    bafc:	48 83 ef 08          	sub    $0x8,%rdi
    bb00:	eb c2                	jmp    bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>

000000000000bb02 <_ZN2vk28CompressionExhaustedEXTErrorD0Ev>:
    bb02:	55                   	push   %rbp
    bb03:	48 89 e5             	mov    %rsp,%rbp
    bb06:	48 83 ec 10          	sub    $0x10,%rsp
    bb0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb12:	48 89 c7             	mov    %rax,%rdi
    bb15:	e8 aa ff ff ff       	call   bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    bb1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb1e:	be 28 00 00 00       	mov    $0x28,%esi
    bb23:	48 89 c7             	mov    %rax,%rdi
    bb26:	e8 05 97 ff ff       	call   5230 <_ZdlPvm@plt>
    bb2b:	c9                   	leave
    bb2c:	c3                   	ret

000000000000bb2d <_ZThn8_N2vk28CompressionExhaustedEXTErrorD0Ev>:
    bb2d:	48 83 ef 08          	sub    $0x8,%rdi
    bb31:	eb cf                	jmp    bb02 <_ZN2vk28CompressionExhaustedEXTErrorD0Ev>
    bb33:	90                   	nop

000000000000bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>:
  class NotPermittedKHRError : public SystemError
    bb34:	55                   	push   %rbp
    bb35:	48 89 e5             	mov    %rsp,%rbp
    bb38:	48 83 ec 10          	sub    $0x10,%rsp
    bb3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb40:	48 8d 15 f9 b5 02 00 	lea    0x2b5f9(%rip),%rdx        # 37140 <_ZTVN2vk20NotPermittedKHRErrorE+0x10>
    bb47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb4b:	48 89 10             	mov    %rdx,(%rax)
    bb4e:	48 8d 15 13 b6 02 00 	lea    0x2b613(%rip),%rdx        # 37168 <_ZTVN2vk20NotPermittedKHRErrorE+0x38>
    bb55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb59:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bb5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb61:	48 89 c7             	mov    %rax,%rdi
    bb64:	e8 dd bd ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bb69:	90                   	nop
    bb6a:	c9                   	leave
    bb6b:	c3                   	ret

000000000000bb6c <_ZThn8_N2vk20NotPermittedKHRErrorD1Ev>:
    bb6c:	48 83 ef 08          	sub    $0x8,%rdi
    bb70:	eb c2                	jmp    bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>

000000000000bb72 <_ZN2vk20NotPermittedKHRErrorD0Ev>:
    bb72:	55                   	push   %rbp
    bb73:	48 89 e5             	mov    %rsp,%rbp
    bb76:	48 83 ec 10          	sub    $0x10,%rsp
    bb7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb82:	48 89 c7             	mov    %rax,%rdi
    bb85:	e8 aa ff ff ff       	call   bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    bb8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb8e:	be 28 00 00 00       	mov    $0x28,%esi
    bb93:	48 89 c7             	mov    %rax,%rdi
    bb96:	e8 95 96 ff ff       	call   5230 <_ZdlPvm@plt>
    bb9b:	c9                   	leave
    bb9c:	c3                   	ret

000000000000bb9d <_ZThn8_N2vk20NotPermittedKHRErrorD0Ev>:
    bb9d:	48 83 ef 08          	sub    $0x8,%rdi
    bba1:	eb cf                	jmp    bb72 <_ZN2vk20NotPermittedKHRErrorD0Ev>
    bba3:	90                   	nop

000000000000bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>:
  class InvalidDrmFormatModifierPlaneLayoutEXTError : public SystemError
    bba4:	55                   	push   %rbp
    bba5:	48 89 e5             	mov    %rsp,%rbp
    bba8:	48 83 ec 10          	sub    $0x10,%rsp
    bbac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bbb0:	48 8d 15 d9 b5 02 00 	lea    0x2b5d9(%rip),%rdx        # 37190 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x10>
    bbb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbbb:	48 89 10             	mov    %rdx,(%rax)
    bbbe:	48 8d 15 f3 b5 02 00 	lea    0x2b5f3(%rip),%rdx        # 371b8 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x38>
    bbc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbc9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bbcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbd1:	48 89 c7             	mov    %rax,%rdi
    bbd4:	e8 6d bd ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bbd9:	90                   	nop
    bbda:	c9                   	leave
    bbdb:	c3                   	ret

000000000000bbdc <_ZThn8_N2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>:
    bbdc:	48 83 ef 08          	sub    $0x8,%rdi
    bbe0:	eb c2                	jmp    bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>

000000000000bbe2 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD0Ev>:
    bbe2:	55                   	push   %rbp
    bbe3:	48 89 e5             	mov    %rsp,%rbp
    bbe6:	48 83 ec 10          	sub    $0x10,%rsp
    bbea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bbee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbf2:	48 89 c7             	mov    %rax,%rdi
    bbf5:	e8 aa ff ff ff       	call   bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    bbfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbfe:	be 28 00 00 00       	mov    $0x28,%esi
    bc03:	48 89 c7             	mov    %rax,%rdi
    bc06:	e8 25 96 ff ff       	call   5230 <_ZdlPvm@plt>
    bc0b:	c9                   	leave
    bc0c:	c3                   	ret

000000000000bc0d <_ZThn8_N2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD0Ev>:
    bc0d:	48 83 ef 08          	sub    $0x8,%rdi
    bc11:	eb cf                	jmp    bbe2 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD0Ev>
    bc13:	90                   	nop

000000000000bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>:
  class InvalidShaderNVError : public SystemError
    bc14:	55                   	push   %rbp
    bc15:	48 89 e5             	mov    %rsp,%rbp
    bc18:	48 83 ec 10          	sub    $0x10,%rsp
    bc1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bc20:	48 8d 15 b9 b5 02 00 	lea    0x2b5b9(%rip),%rdx        # 371e0 <_ZTVN2vk20InvalidShaderNVErrorE+0x10>
    bc27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc2b:	48 89 10             	mov    %rdx,(%rax)
    bc2e:	48 8d 15 d3 b5 02 00 	lea    0x2b5d3(%rip),%rdx        # 37208 <_ZTVN2vk20InvalidShaderNVErrorE+0x38>
    bc35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc39:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bc3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc41:	48 89 c7             	mov    %rax,%rdi
    bc44:	e8 fd bc ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bc49:	90                   	nop
    bc4a:	c9                   	leave
    bc4b:	c3                   	ret

000000000000bc4c <_ZThn8_N2vk20InvalidShaderNVErrorD1Ev>:
    bc4c:	48 83 ef 08          	sub    $0x8,%rdi
    bc50:	eb c2                	jmp    bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>

000000000000bc52 <_ZN2vk20InvalidShaderNVErrorD0Ev>:
    bc52:	55                   	push   %rbp
    bc53:	48 89 e5             	mov    %rsp,%rbp
    bc56:	48 83 ec 10          	sub    $0x10,%rsp
    bc5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bc5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc62:	48 89 c7             	mov    %rax,%rdi
    bc65:	e8 aa ff ff ff       	call   bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    bc6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc6e:	be 28 00 00 00       	mov    $0x28,%esi
    bc73:	48 89 c7             	mov    %rax,%rdi
    bc76:	e8 b5 95 ff ff       	call   5230 <_ZdlPvm@plt>
    bc7b:	c9                   	leave
    bc7c:	c3                   	ret

000000000000bc7d <_ZThn8_N2vk20InvalidShaderNVErrorD0Ev>:
    bc7d:	48 83 ef 08          	sub    $0x8,%rdi
    bc81:	eb cf                	jmp    bc52 <_ZN2vk20InvalidShaderNVErrorD0Ev>
    bc83:	90                   	nop

000000000000bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>:
  class ValidationFailedEXTError : public SystemError
    bc84:	55                   	push   %rbp
    bc85:	48 89 e5             	mov    %rsp,%rbp
    bc88:	48 83 ec 10          	sub    $0x10,%rsp
    bc8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bc90:	48 8d 15 99 b5 02 00 	lea    0x2b599(%rip),%rdx        # 37230 <_ZTVN2vk24ValidationFailedEXTErrorE+0x10>
    bc97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc9b:	48 89 10             	mov    %rdx,(%rax)
    bc9e:	48 8d 15 b3 b5 02 00 	lea    0x2b5b3(%rip),%rdx        # 37258 <_ZTVN2vk24ValidationFailedEXTErrorE+0x38>
    bca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bca9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bcad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcb1:	48 89 c7             	mov    %rax,%rdi
    bcb4:	e8 8d bc ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bcb9:	90                   	nop
    bcba:	c9                   	leave
    bcbb:	c3                   	ret

000000000000bcbc <_ZThn8_N2vk24ValidationFailedEXTErrorD1Ev>:
    bcbc:	48 83 ef 08          	sub    $0x8,%rdi
    bcc0:	eb c2                	jmp    bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>

000000000000bcc2 <_ZN2vk24ValidationFailedEXTErrorD0Ev>:
    bcc2:	55                   	push   %rbp
    bcc3:	48 89 e5             	mov    %rsp,%rbp
    bcc6:	48 83 ec 10          	sub    $0x10,%rsp
    bcca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bcce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcd2:	48 89 c7             	mov    %rax,%rdi
    bcd5:	e8 aa ff ff ff       	call   bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    bcda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcde:	be 28 00 00 00       	mov    $0x28,%esi
    bce3:	48 89 c7             	mov    %rax,%rdi
    bce6:	e8 45 95 ff ff       	call   5230 <_ZdlPvm@plt>
    bceb:	c9                   	leave
    bcec:	c3                   	ret

000000000000bced <_ZThn8_N2vk24ValidationFailedEXTErrorD0Ev>:
    bced:	48 83 ef 08          	sub    $0x8,%rdi
    bcf1:	eb cf                	jmp    bcc2 <_ZN2vk24ValidationFailedEXTErrorD0Ev>
    bcf3:	90                   	nop

000000000000bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>:
  class IncompatibleDisplayKHRError : public SystemError
    bcf4:	55                   	push   %rbp
    bcf5:	48 89 e5             	mov    %rsp,%rbp
    bcf8:	48 83 ec 10          	sub    $0x10,%rsp
    bcfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd00:	48 8d 15 79 b5 02 00 	lea    0x2b579(%rip),%rdx        # 37280 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x10>
    bd07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd0b:	48 89 10             	mov    %rdx,(%rax)
    bd0e:	48 8d 15 93 b5 02 00 	lea    0x2b593(%rip),%rdx        # 372a8 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x38>
    bd15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd19:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bd1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd21:	48 89 c7             	mov    %rax,%rdi
    bd24:	e8 1d bc ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bd29:	90                   	nop
    bd2a:	c9                   	leave
    bd2b:	c3                   	ret

000000000000bd2c <_ZThn8_N2vk27IncompatibleDisplayKHRErrorD1Ev>:
    bd2c:	48 83 ef 08          	sub    $0x8,%rdi
    bd30:	eb c2                	jmp    bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>

000000000000bd32 <_ZN2vk27IncompatibleDisplayKHRErrorD0Ev>:
    bd32:	55                   	push   %rbp
    bd33:	48 89 e5             	mov    %rsp,%rbp
    bd36:	48 83 ec 10          	sub    $0x10,%rsp
    bd3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd42:	48 89 c7             	mov    %rax,%rdi
    bd45:	e8 aa ff ff ff       	call   bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    bd4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd4e:	be 28 00 00 00       	mov    $0x28,%esi
    bd53:	48 89 c7             	mov    %rax,%rdi
    bd56:	e8 d5 94 ff ff       	call   5230 <_ZdlPvm@plt>
    bd5b:	c9                   	leave
    bd5c:	c3                   	ret

000000000000bd5d <_ZThn8_N2vk27IncompatibleDisplayKHRErrorD0Ev>:
    bd5d:	48 83 ef 08          	sub    $0x8,%rdi
    bd61:	eb cf                	jmp    bd32 <_ZN2vk27IncompatibleDisplayKHRErrorD0Ev>
    bd63:	90                   	nop

000000000000bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>:
  class OutOfDateKHRError : public SystemError
    bd64:	55                   	push   %rbp
    bd65:	48 89 e5             	mov    %rsp,%rbp
    bd68:	48 83 ec 10          	sub    $0x10,%rsp
    bd6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd70:	48 8d 15 59 b5 02 00 	lea    0x2b559(%rip),%rdx        # 372d0 <_ZTVN2vk17OutOfDateKHRErrorE+0x10>
    bd77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd7b:	48 89 10             	mov    %rdx,(%rax)
    bd7e:	48 8d 15 73 b5 02 00 	lea    0x2b573(%rip),%rdx        # 372f8 <_ZTVN2vk17OutOfDateKHRErrorE+0x38>
    bd85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bd8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd91:	48 89 c7             	mov    %rax,%rdi
    bd94:	e8 ad bb ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bd99:	90                   	nop
    bd9a:	c9                   	leave
    bd9b:	c3                   	ret

000000000000bd9c <_ZThn8_N2vk17OutOfDateKHRErrorD1Ev>:
    bd9c:	48 83 ef 08          	sub    $0x8,%rdi
    bda0:	eb c2                	jmp    bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>

000000000000bda2 <_ZN2vk17OutOfDateKHRErrorD0Ev>:
    bda2:	55                   	push   %rbp
    bda3:	48 89 e5             	mov    %rsp,%rbp
    bda6:	48 83 ec 10          	sub    $0x10,%rsp
    bdaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bdae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdb2:	48 89 c7             	mov    %rax,%rdi
    bdb5:	e8 aa ff ff ff       	call   bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    bdba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdbe:	be 28 00 00 00       	mov    $0x28,%esi
    bdc3:	48 89 c7             	mov    %rax,%rdi
    bdc6:	e8 65 94 ff ff       	call   5230 <_ZdlPvm@plt>
    bdcb:	c9                   	leave
    bdcc:	c3                   	ret

000000000000bdcd <_ZThn8_N2vk17OutOfDateKHRErrorD0Ev>:
    bdcd:	48 83 ef 08          	sub    $0x8,%rdi
    bdd1:	eb cf                	jmp    bda2 <_ZN2vk17OutOfDateKHRErrorD0Ev>
    bdd3:	90                   	nop

000000000000bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>:
  class NativeWindowInUseKHRError : public SystemError
    bdd4:	55                   	push   %rbp
    bdd5:	48 89 e5             	mov    %rsp,%rbp
    bdd8:	48 83 ec 10          	sub    $0x10,%rsp
    bddc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bde0:	48 8d 15 39 b5 02 00 	lea    0x2b539(%rip),%rdx        # 37320 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x10>
    bde7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdeb:	48 89 10             	mov    %rdx,(%rax)
    bdee:	48 8d 15 53 b5 02 00 	lea    0x2b553(%rip),%rdx        # 37348 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x38>
    bdf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdf9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bdfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be01:	48 89 c7             	mov    %rax,%rdi
    be04:	e8 3d bb ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    be09:	90                   	nop
    be0a:	c9                   	leave
    be0b:	c3                   	ret

000000000000be0c <_ZThn8_N2vk25NativeWindowInUseKHRErrorD1Ev>:
    be0c:	48 83 ef 08          	sub    $0x8,%rdi
    be10:	eb c2                	jmp    bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>

000000000000be12 <_ZN2vk25NativeWindowInUseKHRErrorD0Ev>:
    be12:	55                   	push   %rbp
    be13:	48 89 e5             	mov    %rsp,%rbp
    be16:	48 83 ec 10          	sub    $0x10,%rsp
    be1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be22:	48 89 c7             	mov    %rax,%rdi
    be25:	e8 aa ff ff ff       	call   bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    be2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be2e:	be 28 00 00 00       	mov    $0x28,%esi
    be33:	48 89 c7             	mov    %rax,%rdi
    be36:	e8 f5 93 ff ff       	call   5230 <_ZdlPvm@plt>
    be3b:	c9                   	leave
    be3c:	c3                   	ret

000000000000be3d <_ZThn8_N2vk25NativeWindowInUseKHRErrorD0Ev>:
    be3d:	48 83 ef 08          	sub    $0x8,%rdi
    be41:	eb cf                	jmp    be12 <_ZN2vk25NativeWindowInUseKHRErrorD0Ev>
    be43:	90                   	nop

000000000000be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>:
  class SurfaceLostKHRError : public SystemError
    be44:	55                   	push   %rbp
    be45:	48 89 e5             	mov    %rsp,%rbp
    be48:	48 83 ec 10          	sub    $0x10,%rsp
    be4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be50:	48 8d 15 19 b5 02 00 	lea    0x2b519(%rip),%rdx        # 37370 <_ZTVN2vk19SurfaceLostKHRErrorE+0x10>
    be57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be5b:	48 89 10             	mov    %rdx,(%rax)
    be5e:	48 8d 15 33 b5 02 00 	lea    0x2b533(%rip),%rdx        # 37398 <_ZTVN2vk19SurfaceLostKHRErrorE+0x38>
    be65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be69:	48 89 50 08          	mov    %rdx,0x8(%rax)
    be6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be71:	48 89 c7             	mov    %rax,%rdi
    be74:	e8 cd ba ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    be79:	90                   	nop
    be7a:	c9                   	leave
    be7b:	c3                   	ret

000000000000be7c <_ZThn8_N2vk19SurfaceLostKHRErrorD1Ev>:
    be7c:	48 83 ef 08          	sub    $0x8,%rdi
    be80:	eb c2                	jmp    be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>

000000000000be82 <_ZN2vk19SurfaceLostKHRErrorD0Ev>:
    be82:	55                   	push   %rbp
    be83:	48 89 e5             	mov    %rsp,%rbp
    be86:	48 83 ec 10          	sub    $0x10,%rsp
    be8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be92:	48 89 c7             	mov    %rax,%rdi
    be95:	e8 aa ff ff ff       	call   be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    be9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be9e:	be 28 00 00 00       	mov    $0x28,%esi
    bea3:	48 89 c7             	mov    %rax,%rdi
    bea6:	e8 85 93 ff ff       	call   5230 <_ZdlPvm@plt>
    beab:	c9                   	leave
    beac:	c3                   	ret

000000000000bead <_ZThn8_N2vk19SurfaceLostKHRErrorD0Ev>:
    bead:	48 83 ef 08          	sub    $0x8,%rdi
    beb1:	eb cf                	jmp    be82 <_ZN2vk19SurfaceLostKHRErrorD0Ev>
    beb3:	90                   	nop

000000000000beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>:
  class InvalidOpaqueCaptureAddressError : public SystemError
    beb4:	55                   	push   %rbp
    beb5:	48 89 e5             	mov    %rsp,%rbp
    beb8:	48 83 ec 10          	sub    $0x10,%rsp
    bebc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bec0:	48 8d 15 f9 b4 02 00 	lea    0x2b4f9(%rip),%rdx        # 373c0 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x10>
    bec7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    becb:	48 89 10             	mov    %rdx,(%rax)
    bece:	48 8d 15 13 b5 02 00 	lea    0x2b513(%rip),%rdx        # 373e8 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x38>
    bed5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bed9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bedd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bee1:	48 89 c7             	mov    %rax,%rdi
    bee4:	e8 5d ba ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bee9:	90                   	nop
    beea:	c9                   	leave
    beeb:	c3                   	ret

000000000000beec <_ZThn8_N2vk32InvalidOpaqueCaptureAddressErrorD1Ev>:
    beec:	48 83 ef 08          	sub    $0x8,%rdi
    bef0:	eb c2                	jmp    beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>

000000000000bef2 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD0Ev>:
    bef2:	55                   	push   %rbp
    bef3:	48 89 e5             	mov    %rsp,%rbp
    bef6:	48 83 ec 10          	sub    $0x10,%rsp
    befa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    befe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf02:	48 89 c7             	mov    %rax,%rdi
    bf05:	e8 aa ff ff ff       	call   beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    bf0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf0e:	be 28 00 00 00       	mov    $0x28,%esi
    bf13:	48 89 c7             	mov    %rax,%rdi
    bf16:	e8 15 93 ff ff       	call   5230 <_ZdlPvm@plt>
    bf1b:	c9                   	leave
    bf1c:	c3                   	ret

000000000000bf1d <_ZThn8_N2vk32InvalidOpaqueCaptureAddressErrorD0Ev>:
    bf1d:	48 83 ef 08          	sub    $0x8,%rdi
    bf21:	eb cf                	jmp    bef2 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD0Ev>
    bf23:	90                   	nop

000000000000bf24 <_ZN2vk18FragmentationErrorD1Ev>:
  class FragmentationError : public SystemError
    bf24:	55                   	push   %rbp
    bf25:	48 89 e5             	mov    %rsp,%rbp
    bf28:	48 83 ec 10          	sub    $0x10,%rsp
    bf2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf30:	48 8d 15 d9 b4 02 00 	lea    0x2b4d9(%rip),%rdx        # 37410 <_ZTVN2vk18FragmentationErrorE+0x10>
    bf37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf3b:	48 89 10             	mov    %rdx,(%rax)
    bf3e:	48 8d 15 f3 b4 02 00 	lea    0x2b4f3(%rip),%rdx        # 37438 <_ZTVN2vk18FragmentationErrorE+0x38>
    bf45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf49:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bf4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf51:	48 89 c7             	mov    %rax,%rdi
    bf54:	e8 ed b9 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bf59:	90                   	nop
    bf5a:	c9                   	leave
    bf5b:	c3                   	ret

000000000000bf5c <_ZThn8_N2vk18FragmentationErrorD1Ev>:
    bf5c:	48 83 ef 08          	sub    $0x8,%rdi
    bf60:	eb c2                	jmp    bf24 <_ZN2vk18FragmentationErrorD1Ev>

000000000000bf62 <_ZN2vk18FragmentationErrorD0Ev>:
    bf62:	55                   	push   %rbp
    bf63:	48 89 e5             	mov    %rsp,%rbp
    bf66:	48 83 ec 10          	sub    $0x10,%rsp
    bf6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf72:	48 89 c7             	mov    %rax,%rdi
    bf75:	e8 aa ff ff ff       	call   bf24 <_ZN2vk18FragmentationErrorD1Ev>
    bf7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf7e:	be 28 00 00 00       	mov    $0x28,%esi
    bf83:	48 89 c7             	mov    %rax,%rdi
    bf86:	e8 a5 92 ff ff       	call   5230 <_ZdlPvm@plt>
    bf8b:	c9                   	leave
    bf8c:	c3                   	ret

000000000000bf8d <_ZThn8_N2vk18FragmentationErrorD0Ev>:
    bf8d:	48 83 ef 08          	sub    $0x8,%rdi
    bf91:	eb cf                	jmp    bf62 <_ZN2vk18FragmentationErrorD0Ev>
    bf93:	90                   	nop

000000000000bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>:
  class InvalidExternalHandleError : public SystemError
    bf94:	55                   	push   %rbp
    bf95:	48 89 e5             	mov    %rsp,%rbp
    bf98:	48 83 ec 10          	sub    $0x10,%rsp
    bf9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bfa0:	48 8d 15 b9 b4 02 00 	lea    0x2b4b9(%rip),%rdx        # 37460 <_ZTVN2vk26InvalidExternalHandleErrorE+0x10>
    bfa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfab:	48 89 10             	mov    %rdx,(%rax)
    bfae:	48 8d 15 d3 b4 02 00 	lea    0x2b4d3(%rip),%rdx        # 37488 <_ZTVN2vk26InvalidExternalHandleErrorE+0x38>
    bfb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfb9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bfbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfc1:	48 89 c7             	mov    %rax,%rdi
    bfc4:	e8 7d b9 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bfc9:	90                   	nop
    bfca:	c9                   	leave
    bfcb:	c3                   	ret

000000000000bfcc <_ZThn8_N2vk26InvalidExternalHandleErrorD1Ev>:
    bfcc:	48 83 ef 08          	sub    $0x8,%rdi
    bfd0:	eb c2                	jmp    bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>

000000000000bfd2 <_ZN2vk26InvalidExternalHandleErrorD0Ev>:
    bfd2:	55                   	push   %rbp
    bfd3:	48 89 e5             	mov    %rsp,%rbp
    bfd6:	48 83 ec 10          	sub    $0x10,%rsp
    bfda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bfde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfe2:	48 89 c7             	mov    %rax,%rdi
    bfe5:	e8 aa ff ff ff       	call   bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    bfea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfee:	be 28 00 00 00       	mov    $0x28,%esi
    bff3:	48 89 c7             	mov    %rax,%rdi
    bff6:	e8 35 92 ff ff       	call   5230 <_ZdlPvm@plt>
    bffb:	c9                   	leave
    bffc:	c3                   	ret

000000000000bffd <_ZThn8_N2vk26InvalidExternalHandleErrorD0Ev>:
    bffd:	48 83 ef 08          	sub    $0x8,%rdi
    c001:	eb cf                	jmp    bfd2 <_ZN2vk26InvalidExternalHandleErrorD0Ev>
    c003:	90                   	nop

000000000000c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>:
  class OutOfPoolMemoryError : public SystemError
    c004:	55                   	push   %rbp
    c005:	48 89 e5             	mov    %rsp,%rbp
    c008:	48 83 ec 10          	sub    $0x10,%rsp
    c00c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c010:	48 8d 15 99 b4 02 00 	lea    0x2b499(%rip),%rdx        # 374b0 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x10>
    c017:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c01b:	48 89 10             	mov    %rdx,(%rax)
    c01e:	48 8d 15 b3 b4 02 00 	lea    0x2b4b3(%rip),%rdx        # 374d8 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x38>
    c025:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c029:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c02d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c031:	48 89 c7             	mov    %rax,%rdi
    c034:	e8 0d b9 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c039:	90                   	nop
    c03a:	c9                   	leave
    c03b:	c3                   	ret

000000000000c03c <_ZThn8_N2vk20OutOfPoolMemoryErrorD1Ev>:
    c03c:	48 83 ef 08          	sub    $0x8,%rdi
    c040:	eb c2                	jmp    c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>

000000000000c042 <_ZN2vk20OutOfPoolMemoryErrorD0Ev>:
    c042:	55                   	push   %rbp
    c043:	48 89 e5             	mov    %rsp,%rbp
    c046:	48 83 ec 10          	sub    $0x10,%rsp
    c04a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c04e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c052:	48 89 c7             	mov    %rax,%rdi
    c055:	e8 aa ff ff ff       	call   c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    c05a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c05e:	be 28 00 00 00       	mov    $0x28,%esi
    c063:	48 89 c7             	mov    %rax,%rdi
    c066:	e8 c5 91 ff ff       	call   5230 <_ZdlPvm@plt>
    c06b:	c9                   	leave
    c06c:	c3                   	ret

000000000000c06d <_ZThn8_N2vk20OutOfPoolMemoryErrorD0Ev>:
    c06d:	48 83 ef 08          	sub    $0x8,%rdi
    c071:	eb cf                	jmp    c042 <_ZN2vk20OutOfPoolMemoryErrorD0Ev>
    c073:	90                   	nop

000000000000c074 <_ZN2vk12UnknownErrorD1Ev>:
  class UnknownError : public SystemError
    c074:	55                   	push   %rbp
    c075:	48 89 e5             	mov    %rsp,%rbp
    c078:	48 83 ec 10          	sub    $0x10,%rsp
    c07c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c080:	48 8d 15 79 b4 02 00 	lea    0x2b479(%rip),%rdx        # 37500 <_ZTVN2vk12UnknownErrorE+0x10>
    c087:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c08b:	48 89 10             	mov    %rdx,(%rax)
    c08e:	48 8d 15 93 b4 02 00 	lea    0x2b493(%rip),%rdx        # 37528 <_ZTVN2vk12UnknownErrorE+0x38>
    c095:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c099:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c09d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0a1:	48 89 c7             	mov    %rax,%rdi
    c0a4:	e8 9d b8 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c0a9:	90                   	nop
    c0aa:	c9                   	leave
    c0ab:	c3                   	ret

000000000000c0ac <_ZThn8_N2vk12UnknownErrorD1Ev>:
    c0ac:	48 83 ef 08          	sub    $0x8,%rdi
    c0b0:	eb c2                	jmp    c074 <_ZN2vk12UnknownErrorD1Ev>

000000000000c0b2 <_ZN2vk12UnknownErrorD0Ev>:
    c0b2:	55                   	push   %rbp
    c0b3:	48 89 e5             	mov    %rsp,%rbp
    c0b6:	48 83 ec 10          	sub    $0x10,%rsp
    c0ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0c2:	48 89 c7             	mov    %rax,%rdi
    c0c5:	e8 aa ff ff ff       	call   c074 <_ZN2vk12UnknownErrorD1Ev>
    c0ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0ce:	be 28 00 00 00       	mov    $0x28,%esi
    c0d3:	48 89 c7             	mov    %rax,%rdi
    c0d6:	e8 55 91 ff ff       	call   5230 <_ZdlPvm@plt>
    c0db:	c9                   	leave
    c0dc:	c3                   	ret

000000000000c0dd <_ZThn8_N2vk12UnknownErrorD0Ev>:
    c0dd:	48 83 ef 08          	sub    $0x8,%rdi
    c0e1:	eb cf                	jmp    c0b2 <_ZN2vk12UnknownErrorD0Ev>
    c0e3:	90                   	nop

000000000000c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>:
  class FragmentedPoolError : public SystemError
    c0e4:	55                   	push   %rbp
    c0e5:	48 89 e5             	mov    %rsp,%rbp
    c0e8:	48 83 ec 10          	sub    $0x10,%rsp
    c0ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0f0:	48 8d 15 59 b4 02 00 	lea    0x2b459(%rip),%rdx        # 37550 <_ZTVN2vk19FragmentedPoolErrorE+0x10>
    c0f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0fb:	48 89 10             	mov    %rdx,(%rax)
    c0fe:	48 8d 15 73 b4 02 00 	lea    0x2b473(%rip),%rdx        # 37578 <_ZTVN2vk19FragmentedPoolErrorE+0x38>
    c105:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c109:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c111:	48 89 c7             	mov    %rax,%rdi
    c114:	e8 2d b8 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c119:	90                   	nop
    c11a:	c9                   	leave
    c11b:	c3                   	ret

000000000000c11c <_ZThn8_N2vk19FragmentedPoolErrorD1Ev>:
    c11c:	48 83 ef 08          	sub    $0x8,%rdi
    c120:	eb c2                	jmp    c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>

000000000000c122 <_ZN2vk19FragmentedPoolErrorD0Ev>:
    c122:	55                   	push   %rbp
    c123:	48 89 e5             	mov    %rsp,%rbp
    c126:	48 83 ec 10          	sub    $0x10,%rsp
    c12a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c12e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c132:	48 89 c7             	mov    %rax,%rdi
    c135:	e8 aa ff ff ff       	call   c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>
    c13a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c13e:	be 28 00 00 00       	mov    $0x28,%esi
    c143:	48 89 c7             	mov    %rax,%rdi
    c146:	e8 e5 90 ff ff       	call   5230 <_ZdlPvm@plt>
    c14b:	c9                   	leave
    c14c:	c3                   	ret

000000000000c14d <_ZThn8_N2vk19FragmentedPoolErrorD0Ev>:
    c14d:	48 83 ef 08          	sub    $0x8,%rdi
    c151:	eb cf                	jmp    c122 <_ZN2vk19FragmentedPoolErrorD0Ev>
    c153:	90                   	nop

000000000000c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>:
  class FormatNotSupportedError : public SystemError
    c154:	55                   	push   %rbp
    c155:	48 89 e5             	mov    %rsp,%rbp
    c158:	48 83 ec 10          	sub    $0x10,%rsp
    c15c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c160:	48 8d 15 39 b4 02 00 	lea    0x2b439(%rip),%rdx        # 375a0 <_ZTVN2vk23FormatNotSupportedErrorE+0x10>
    c167:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c16b:	48 89 10             	mov    %rdx,(%rax)
    c16e:	48 8d 15 53 b4 02 00 	lea    0x2b453(%rip),%rdx        # 375c8 <_ZTVN2vk23FormatNotSupportedErrorE+0x38>
    c175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c179:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c17d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c181:	48 89 c7             	mov    %rax,%rdi
    c184:	e8 bd b7 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c189:	90                   	nop
    c18a:	c9                   	leave
    c18b:	c3                   	ret

000000000000c18c <_ZThn8_N2vk23FormatNotSupportedErrorD1Ev>:
    c18c:	48 83 ef 08          	sub    $0x8,%rdi
    c190:	eb c2                	jmp    c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>

000000000000c192 <_ZN2vk23FormatNotSupportedErrorD0Ev>:
    c192:	55                   	push   %rbp
    c193:	48 89 e5             	mov    %rsp,%rbp
    c196:	48 83 ec 10          	sub    $0x10,%rsp
    c19a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c19e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1a2:	48 89 c7             	mov    %rax,%rdi
    c1a5:	e8 aa ff ff ff       	call   c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    c1aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1ae:	be 28 00 00 00       	mov    $0x28,%esi
    c1b3:	48 89 c7             	mov    %rax,%rdi
    c1b6:	e8 75 90 ff ff       	call   5230 <_ZdlPvm@plt>
    c1bb:	c9                   	leave
    c1bc:	c3                   	ret

000000000000c1bd <_ZThn8_N2vk23FormatNotSupportedErrorD0Ev>:
    c1bd:	48 83 ef 08          	sub    $0x8,%rdi
    c1c1:	eb cf                	jmp    c192 <_ZN2vk23FormatNotSupportedErrorD0Ev>
    c1c3:	90                   	nop

000000000000c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>:
  class TooManyObjectsError : public SystemError
    c1c4:	55                   	push   %rbp
    c1c5:	48 89 e5             	mov    %rsp,%rbp
    c1c8:	48 83 ec 10          	sub    $0x10,%rsp
    c1cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c1d0:	48 8d 15 19 b4 02 00 	lea    0x2b419(%rip),%rdx        # 375f0 <_ZTVN2vk19TooManyObjectsErrorE+0x10>
    c1d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1db:	48 89 10             	mov    %rdx,(%rax)
    c1de:	48 8d 15 33 b4 02 00 	lea    0x2b433(%rip),%rdx        # 37618 <_ZTVN2vk19TooManyObjectsErrorE+0x38>
    c1e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1e9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c1ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1f1:	48 89 c7             	mov    %rax,%rdi
    c1f4:	e8 4d b7 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c1f9:	90                   	nop
    c1fa:	c9                   	leave
    c1fb:	c3                   	ret

000000000000c1fc <_ZThn8_N2vk19TooManyObjectsErrorD1Ev>:
    c1fc:	48 83 ef 08          	sub    $0x8,%rdi
    c200:	eb c2                	jmp    c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>

000000000000c202 <_ZN2vk19TooManyObjectsErrorD0Ev>:
    c202:	55                   	push   %rbp
    c203:	48 89 e5             	mov    %rsp,%rbp
    c206:	48 83 ec 10          	sub    $0x10,%rsp
    c20a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c20e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c212:	48 89 c7             	mov    %rax,%rdi
    c215:	e8 aa ff ff ff       	call   c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>
    c21a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c21e:	be 28 00 00 00       	mov    $0x28,%esi
    c223:	48 89 c7             	mov    %rax,%rdi
    c226:	e8 05 90 ff ff       	call   5230 <_ZdlPvm@plt>
    c22b:	c9                   	leave
    c22c:	c3                   	ret

000000000000c22d <_ZThn8_N2vk19TooManyObjectsErrorD0Ev>:
    c22d:	48 83 ef 08          	sub    $0x8,%rdi
    c231:	eb cf                	jmp    c202 <_ZN2vk19TooManyObjectsErrorD0Ev>
    c233:	90                   	nop

000000000000c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>:
  class IncompatibleDriverError : public SystemError
    c234:	55                   	push   %rbp
    c235:	48 89 e5             	mov    %rsp,%rbp
    c238:	48 83 ec 10          	sub    $0x10,%rsp
    c23c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c240:	48 8d 15 f9 b3 02 00 	lea    0x2b3f9(%rip),%rdx        # 37640 <_ZTVN2vk23IncompatibleDriverErrorE+0x10>
    c247:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c24b:	48 89 10             	mov    %rdx,(%rax)
    c24e:	48 8d 15 13 b4 02 00 	lea    0x2b413(%rip),%rdx        # 37668 <_ZTVN2vk23IncompatibleDriverErrorE+0x38>
    c255:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c259:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c25d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c261:	48 89 c7             	mov    %rax,%rdi
    c264:	e8 dd b6 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c269:	90                   	nop
    c26a:	c9                   	leave
    c26b:	c3                   	ret

000000000000c26c <_ZThn8_N2vk23IncompatibleDriverErrorD1Ev>:
    c26c:	48 83 ef 08          	sub    $0x8,%rdi
    c270:	eb c2                	jmp    c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>

000000000000c272 <_ZN2vk23IncompatibleDriverErrorD0Ev>:
    c272:	55                   	push   %rbp
    c273:	48 89 e5             	mov    %rsp,%rbp
    c276:	48 83 ec 10          	sub    $0x10,%rsp
    c27a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c27e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c282:	48 89 c7             	mov    %rax,%rdi
    c285:	e8 aa ff ff ff       	call   c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    c28a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c28e:	be 28 00 00 00       	mov    $0x28,%esi
    c293:	48 89 c7             	mov    %rax,%rdi
    c296:	e8 95 8f ff ff       	call   5230 <_ZdlPvm@plt>
    c29b:	c9                   	leave
    c29c:	c3                   	ret

000000000000c29d <_ZThn8_N2vk23IncompatibleDriverErrorD0Ev>:
    c29d:	48 83 ef 08          	sub    $0x8,%rdi
    c2a1:	eb cf                	jmp    c272 <_ZN2vk23IncompatibleDriverErrorD0Ev>
    c2a3:	90                   	nop

000000000000c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>:
  class FeatureNotPresentError : public SystemError
    c2a4:	55                   	push   %rbp
    c2a5:	48 89 e5             	mov    %rsp,%rbp
    c2a8:	48 83 ec 10          	sub    $0x10,%rsp
    c2ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c2b0:	48 8d 15 d9 b3 02 00 	lea    0x2b3d9(%rip),%rdx        # 37690 <_ZTVN2vk22FeatureNotPresentErrorE+0x10>
    c2b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2bb:	48 89 10             	mov    %rdx,(%rax)
    c2be:	48 8d 15 f3 b3 02 00 	lea    0x2b3f3(%rip),%rdx        # 376b8 <_ZTVN2vk22FeatureNotPresentErrorE+0x38>
    c2c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2c9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c2cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2d1:	48 89 c7             	mov    %rax,%rdi
    c2d4:	e8 6d b6 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c2d9:	90                   	nop
    c2da:	c9                   	leave
    c2db:	c3                   	ret

000000000000c2dc <_ZThn8_N2vk22FeatureNotPresentErrorD1Ev>:
    c2dc:	48 83 ef 08          	sub    $0x8,%rdi
    c2e0:	eb c2                	jmp    c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>

000000000000c2e2 <_ZN2vk22FeatureNotPresentErrorD0Ev>:
    c2e2:	55                   	push   %rbp
    c2e3:	48 89 e5             	mov    %rsp,%rbp
    c2e6:	48 83 ec 10          	sub    $0x10,%rsp
    c2ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c2ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2f2:	48 89 c7             	mov    %rax,%rdi
    c2f5:	e8 aa ff ff ff       	call   c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    c2fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2fe:	be 28 00 00 00       	mov    $0x28,%esi
    c303:	48 89 c7             	mov    %rax,%rdi
    c306:	e8 25 8f ff ff       	call   5230 <_ZdlPvm@plt>
    c30b:	c9                   	leave
    c30c:	c3                   	ret

000000000000c30d <_ZThn8_N2vk22FeatureNotPresentErrorD0Ev>:
    c30d:	48 83 ef 08          	sub    $0x8,%rdi
    c311:	eb cf                	jmp    c2e2 <_ZN2vk22FeatureNotPresentErrorD0Ev>
    c313:	90                   	nop

000000000000c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>:
  class ExtensionNotPresentError : public SystemError
    c314:	55                   	push   %rbp
    c315:	48 89 e5             	mov    %rsp,%rbp
    c318:	48 83 ec 10          	sub    $0x10,%rsp
    c31c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c320:	48 8d 15 b9 b3 02 00 	lea    0x2b3b9(%rip),%rdx        # 376e0 <_ZTVN2vk24ExtensionNotPresentErrorE+0x10>
    c327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c32b:	48 89 10             	mov    %rdx,(%rax)
    c32e:	48 8d 15 d3 b3 02 00 	lea    0x2b3d3(%rip),%rdx        # 37708 <_ZTVN2vk24ExtensionNotPresentErrorE+0x38>
    c335:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c339:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c33d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c341:	48 89 c7             	mov    %rax,%rdi
    c344:	e8 fd b5 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c349:	90                   	nop
    c34a:	c9                   	leave
    c34b:	c3                   	ret

000000000000c34c <_ZThn8_N2vk24ExtensionNotPresentErrorD1Ev>:
    c34c:	48 83 ef 08          	sub    $0x8,%rdi
    c350:	eb c2                	jmp    c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>

000000000000c352 <_ZN2vk24ExtensionNotPresentErrorD0Ev>:
    c352:	55                   	push   %rbp
    c353:	48 89 e5             	mov    %rsp,%rbp
    c356:	48 83 ec 10          	sub    $0x10,%rsp
    c35a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c35e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c362:	48 89 c7             	mov    %rax,%rdi
    c365:	e8 aa ff ff ff       	call   c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    c36a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c36e:	be 28 00 00 00       	mov    $0x28,%esi
    c373:	48 89 c7             	mov    %rax,%rdi
    c376:	e8 b5 8e ff ff       	call   5230 <_ZdlPvm@plt>
    c37b:	c9                   	leave
    c37c:	c3                   	ret

000000000000c37d <_ZThn8_N2vk24ExtensionNotPresentErrorD0Ev>:
    c37d:	48 83 ef 08          	sub    $0x8,%rdi
    c381:	eb cf                	jmp    c352 <_ZN2vk24ExtensionNotPresentErrorD0Ev>
    c383:	90                   	nop

000000000000c384 <_ZN2vk20LayerNotPresentErrorD1Ev>:
  class LayerNotPresentError : public SystemError
    c384:	55                   	push   %rbp
    c385:	48 89 e5             	mov    %rsp,%rbp
    c388:	48 83 ec 10          	sub    $0x10,%rsp
    c38c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c390:	48 8d 15 99 b3 02 00 	lea    0x2b399(%rip),%rdx        # 37730 <_ZTVN2vk20LayerNotPresentErrorE+0x10>
    c397:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c39b:	48 89 10             	mov    %rdx,(%rax)
    c39e:	48 8d 15 b3 b3 02 00 	lea    0x2b3b3(%rip),%rdx        # 37758 <_ZTVN2vk20LayerNotPresentErrorE+0x38>
    c3a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3a9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c3ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3b1:	48 89 c7             	mov    %rax,%rdi
    c3b4:	e8 8d b5 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c3b9:	90                   	nop
    c3ba:	c9                   	leave
    c3bb:	c3                   	ret

000000000000c3bc <_ZThn8_N2vk20LayerNotPresentErrorD1Ev>:
    c3bc:	48 83 ef 08          	sub    $0x8,%rdi
    c3c0:	eb c2                	jmp    c384 <_ZN2vk20LayerNotPresentErrorD1Ev>

000000000000c3c2 <_ZN2vk20LayerNotPresentErrorD0Ev>:
    c3c2:	55                   	push   %rbp
    c3c3:	48 89 e5             	mov    %rsp,%rbp
    c3c6:	48 83 ec 10          	sub    $0x10,%rsp
    c3ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c3ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3d2:	48 89 c7             	mov    %rax,%rdi
    c3d5:	e8 aa ff ff ff       	call   c384 <_ZN2vk20LayerNotPresentErrorD1Ev>
    c3da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3de:	be 28 00 00 00       	mov    $0x28,%esi
    c3e3:	48 89 c7             	mov    %rax,%rdi
    c3e6:	e8 45 8e ff ff       	call   5230 <_ZdlPvm@plt>
    c3eb:	c9                   	leave
    c3ec:	c3                   	ret

000000000000c3ed <_ZThn8_N2vk20LayerNotPresentErrorD0Ev>:
    c3ed:	48 83 ef 08          	sub    $0x8,%rdi
    c3f1:	eb cf                	jmp    c3c2 <_ZN2vk20LayerNotPresentErrorD0Ev>
    c3f3:	90                   	nop

000000000000c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>:
  class MemoryMapFailedError : public SystemError
    c3f4:	55                   	push   %rbp
    c3f5:	48 89 e5             	mov    %rsp,%rbp
    c3f8:	48 83 ec 10          	sub    $0x10,%rsp
    c3fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c400:	48 8d 15 79 b3 02 00 	lea    0x2b379(%rip),%rdx        # 37780 <_ZTVN2vk20MemoryMapFailedErrorE+0x10>
    c407:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c40b:	48 89 10             	mov    %rdx,(%rax)
    c40e:	48 8d 15 93 b3 02 00 	lea    0x2b393(%rip),%rdx        # 377a8 <_ZTVN2vk20MemoryMapFailedErrorE+0x38>
    c415:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c419:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c41d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c421:	48 89 c7             	mov    %rax,%rdi
    c424:	e8 1d b5 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c429:	90                   	nop
    c42a:	c9                   	leave
    c42b:	c3                   	ret

000000000000c42c <_ZThn8_N2vk20MemoryMapFailedErrorD1Ev>:
    c42c:	48 83 ef 08          	sub    $0x8,%rdi
    c430:	eb c2                	jmp    c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>

000000000000c432 <_ZN2vk20MemoryMapFailedErrorD0Ev>:
    c432:	55                   	push   %rbp
    c433:	48 89 e5             	mov    %rsp,%rbp
    c436:	48 83 ec 10          	sub    $0x10,%rsp
    c43a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c43e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c442:	48 89 c7             	mov    %rax,%rdi
    c445:	e8 aa ff ff ff       	call   c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    c44a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c44e:	be 28 00 00 00       	mov    $0x28,%esi
    c453:	48 89 c7             	mov    %rax,%rdi
    c456:	e8 d5 8d ff ff       	call   5230 <_ZdlPvm@plt>
    c45b:	c9                   	leave
    c45c:	c3                   	ret

000000000000c45d <_ZThn8_N2vk20MemoryMapFailedErrorD0Ev>:
    c45d:	48 83 ef 08          	sub    $0x8,%rdi
    c461:	eb cf                	jmp    c432 <_ZN2vk20MemoryMapFailedErrorD0Ev>
    c463:	90                   	nop

000000000000c464 <_ZN2vk15DeviceLostErrorD1Ev>:
  class DeviceLostError : public SystemError
    c464:	55                   	push   %rbp
    c465:	48 89 e5             	mov    %rsp,%rbp
    c468:	48 83 ec 10          	sub    $0x10,%rsp
    c46c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c470:	48 8d 15 59 b3 02 00 	lea    0x2b359(%rip),%rdx        # 377d0 <_ZTVN2vk15DeviceLostErrorE+0x10>
    c477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c47b:	48 89 10             	mov    %rdx,(%rax)
    c47e:	48 8d 15 73 b3 02 00 	lea    0x2b373(%rip),%rdx        # 377f8 <_ZTVN2vk15DeviceLostErrorE+0x38>
    c485:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c489:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c48d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c491:	48 89 c7             	mov    %rax,%rdi
    c494:	e8 ad b4 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c499:	90                   	nop
    c49a:	c9                   	leave
    c49b:	c3                   	ret

000000000000c49c <_ZThn8_N2vk15DeviceLostErrorD1Ev>:
    c49c:	48 83 ef 08          	sub    $0x8,%rdi
    c4a0:	eb c2                	jmp    c464 <_ZN2vk15DeviceLostErrorD1Ev>

000000000000c4a2 <_ZN2vk15DeviceLostErrorD0Ev>:
    c4a2:	55                   	push   %rbp
    c4a3:	48 89 e5             	mov    %rsp,%rbp
    c4a6:	48 83 ec 10          	sub    $0x10,%rsp
    c4aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c4ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4b2:	48 89 c7             	mov    %rax,%rdi
    c4b5:	e8 aa ff ff ff       	call   c464 <_ZN2vk15DeviceLostErrorD1Ev>
    c4ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4be:	be 28 00 00 00       	mov    $0x28,%esi
    c4c3:	48 89 c7             	mov    %rax,%rdi
    c4c6:	e8 65 8d ff ff       	call   5230 <_ZdlPvm@plt>
    c4cb:	c9                   	leave
    c4cc:	c3                   	ret

000000000000c4cd <_ZThn8_N2vk15DeviceLostErrorD0Ev>:
    c4cd:	48 83 ef 08          	sub    $0x8,%rdi
    c4d1:	eb cf                	jmp    c4a2 <_ZN2vk15DeviceLostErrorD0Ev>
    c4d3:	90                   	nop

000000000000c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>:
  class InitializationFailedError : public SystemError
    c4d4:	55                   	push   %rbp
    c4d5:	48 89 e5             	mov    %rsp,%rbp
    c4d8:	48 83 ec 10          	sub    $0x10,%rsp
    c4dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c4e0:	48 8d 15 39 b3 02 00 	lea    0x2b339(%rip),%rdx        # 37820 <_ZTVN2vk25InitializationFailedErrorE+0x10>
    c4e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4eb:	48 89 10             	mov    %rdx,(%rax)
    c4ee:	48 8d 15 53 b3 02 00 	lea    0x2b353(%rip),%rdx        # 37848 <_ZTVN2vk25InitializationFailedErrorE+0x38>
    c4f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4f9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c4fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c501:	48 89 c7             	mov    %rax,%rdi
    c504:	e8 3d b4 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c509:	90                   	nop
    c50a:	c9                   	leave
    c50b:	c3                   	ret

000000000000c50c <_ZThn8_N2vk25InitializationFailedErrorD1Ev>:
    c50c:	48 83 ef 08          	sub    $0x8,%rdi
    c510:	eb c2                	jmp    c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>

000000000000c512 <_ZN2vk25InitializationFailedErrorD0Ev>:
    c512:	55                   	push   %rbp
    c513:	48 89 e5             	mov    %rsp,%rbp
    c516:	48 83 ec 10          	sub    $0x10,%rsp
    c51a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c51e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c522:	48 89 c7             	mov    %rax,%rdi
    c525:	e8 aa ff ff ff       	call   c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>
    c52a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c52e:	be 28 00 00 00       	mov    $0x28,%esi
    c533:	48 89 c7             	mov    %rax,%rdi
    c536:	e8 f5 8c ff ff       	call   5230 <_ZdlPvm@plt>
    c53b:	c9                   	leave
    c53c:	c3                   	ret

000000000000c53d <_ZThn8_N2vk25InitializationFailedErrorD0Ev>:
    c53d:	48 83 ef 08          	sub    $0x8,%rdi
    c541:	eb cf                	jmp    c512 <_ZN2vk25InitializationFailedErrorD0Ev>
    c543:	90                   	nop

000000000000c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>:
  class OutOfDeviceMemoryError : public SystemError
    c544:	55                   	push   %rbp
    c545:	48 89 e5             	mov    %rsp,%rbp
    c548:	48 83 ec 10          	sub    $0x10,%rsp
    c54c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c550:	48 8d 15 19 b3 02 00 	lea    0x2b319(%rip),%rdx        # 37870 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x10>
    c557:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c55b:	48 89 10             	mov    %rdx,(%rax)
    c55e:	48 8d 15 33 b3 02 00 	lea    0x2b333(%rip),%rdx        # 37898 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x38>
    c565:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c569:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c56d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c571:	48 89 c7             	mov    %rax,%rdi
    c574:	e8 cd b3 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c579:	90                   	nop
    c57a:	c9                   	leave
    c57b:	c3                   	ret

000000000000c57c <_ZThn8_N2vk22OutOfDeviceMemoryErrorD1Ev>:
    c57c:	48 83 ef 08          	sub    $0x8,%rdi
    c580:	eb c2                	jmp    c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>

000000000000c582 <_ZN2vk22OutOfDeviceMemoryErrorD0Ev>:
    c582:	55                   	push   %rbp
    c583:	48 89 e5             	mov    %rsp,%rbp
    c586:	48 83 ec 10          	sub    $0x10,%rsp
    c58a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c58e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c592:	48 89 c7             	mov    %rax,%rdi
    c595:	e8 aa ff ff ff       	call   c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    c59a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c59e:	be 28 00 00 00       	mov    $0x28,%esi
    c5a3:	48 89 c7             	mov    %rax,%rdi
    c5a6:	e8 85 8c ff ff       	call   5230 <_ZdlPvm@plt>
    c5ab:	c9                   	leave
    c5ac:	c3                   	ret

000000000000c5ad <_ZThn8_N2vk22OutOfDeviceMemoryErrorD0Ev>:
    c5ad:	48 83 ef 08          	sub    $0x8,%rdi
    c5b1:	eb cf                	jmp    c582 <_ZN2vk22OutOfDeviceMemoryErrorD0Ev>
    c5b3:	90                   	nop

000000000000c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>:
  class OutOfHostMemoryError : public SystemError
    c5b4:	55                   	push   %rbp
    c5b5:	48 89 e5             	mov    %rsp,%rbp
    c5b8:	48 83 ec 10          	sub    $0x10,%rsp
    c5bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c5c0:	48 8d 15 f9 b2 02 00 	lea    0x2b2f9(%rip),%rdx        # 378c0 <_ZTVN2vk20OutOfHostMemoryErrorE+0x10>
    c5c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5cb:	48 89 10             	mov    %rdx,(%rax)
    c5ce:	48 8d 15 13 b3 02 00 	lea    0x2b313(%rip),%rdx        # 378e8 <_ZTVN2vk20OutOfHostMemoryErrorE+0x38>
    c5d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5d9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c5dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5e1:	48 89 c7             	mov    %rax,%rdi
    c5e4:	e8 5d b3 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c5e9:	90                   	nop
    c5ea:	c9                   	leave
    c5eb:	c3                   	ret

000000000000c5ec <_ZThn8_N2vk20OutOfHostMemoryErrorD1Ev>:
    c5ec:	48 83 ef 08          	sub    $0x8,%rdi
    c5f0:	eb c2                	jmp    c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>

000000000000c5f2 <_ZN2vk20OutOfHostMemoryErrorD0Ev>:
    c5f2:	55                   	push   %rbp
    c5f3:	48 89 e5             	mov    %rsp,%rbp
    c5f6:	48 83 ec 10          	sub    $0x10,%rsp
    c5fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c5fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c602:	48 89 c7             	mov    %rax,%rdi
    c605:	e8 aa ff ff ff       	call   c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    c60a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c60e:	be 28 00 00 00       	mov    $0x28,%esi
    c613:	48 89 c7             	mov    %rax,%rdi
    c616:	e8 15 8c ff ff       	call   5230 <_ZdlPvm@plt>
    c61b:	c9                   	leave
    c61c:	c3                   	ret

000000000000c61d <_ZThn8_N2vk20OutOfHostMemoryErrorD0Ev>:
    c61d:	48 83 ef 08          	sub    $0x8,%rdi
    c621:	eb cf                	jmp    c5f2 <_ZN2vk20OutOfHostMemoryErrorD0Ev>
    c623:	90                   	nop

000000000000c624 <_ZN2vk17ErrorCategoryImplD1Ev>:
  class ErrorCategoryImpl : public std::error_category
    c624:	55                   	push   %rbp
    c625:	48 89 e5             	mov    %rsp,%rbp
    c628:	48 83 ec 10          	sub    $0x10,%rsp
    c62c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c630:	48 8d 15 19 b4 02 00 	lea    0x2b419(%rip),%rdx        # 37a50 <_ZTVN2vk17ErrorCategoryImplE+0x10>
    c637:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c63b:	48 89 10             	mov    %rdx,(%rax)
    c63e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c642:	48 89 c7             	mov    %rax,%rdi
    c645:	e8 46 8d ff ff       	call   5390 <_ZNSt3_V214error_categoryD2Ev@plt>
    c64a:	90                   	nop
    c64b:	c9                   	leave
    c64c:	c3                   	ret
    c64d:	90                   	nop

000000000000c64e <_ZN2vk17ErrorCategoryImplD0Ev>:
    c64e:	55                   	push   %rbp
    c64f:	48 89 e5             	mov    %rsp,%rbp
    c652:	48 83 ec 10          	sub    $0x10,%rsp
    c656:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c65a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c65e:	48 89 c7             	mov    %rax,%rdi
    c661:	e8 be ff ff ff       	call   c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    c666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c66a:	be 08 00 00 00       	mov    $0x8,%esi
    c66f:	48 89 c7             	mov    %rax,%rdi
    c672:	e8 b9 8b ff ff       	call   5230 <_ZdlPvm@plt>
    c677:	c9                   	leave
    c678:	c3                   	ret

000000000000c679 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
    c679:	55                   	push   %rbp
    c67a:	48 89 e5             	mov    %rsp,%rbp
    c67d:	41 54                	push   %r12
    c67f:	53                   	push   %rbx
    c680:	48 83 ec 30          	sub    $0x30,%rsp
    c684:	89 7d cc             	mov    %edi,-0x34(%rbp)
    c687:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
    c68b:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    c68f:	0f 89 28 07 00 00    	jns    cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c695:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
    c699:	0f 8d 3d 01 00 00    	jge    c7dc <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
    c69f:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    c6a6:	0f 84 19 05 00 00    	je     cbc5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
    c6ac:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    c6b3:	0f 8f 04 07 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c6b9:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    c6c0:	0f 84 37 05 00 00    	je     cbfd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
    c6c6:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    c6cd:	0f 8f ea 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c6d3:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    c6da:	0f 84 55 05 00 00    	je     cc35 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
    c6e0:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    c6e7:	0f 8f d0 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c6ed:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    c6f4:	0f 84 73 05 00 00    	je     cc6d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
    c6fa:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    c701:	0f 8f b6 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c707:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    c70e:	0f 84 91 05 00 00    	je     cca5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
    c714:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    c71b:	0f 8f 9c 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c721:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    c728:	0f 84 af 05 00 00    	je     ccdd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
    c72e:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    c735:	0f 8f 82 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c73b:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    c742:	0f 84 9d 03 00 00    	je     cae5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
    c748:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    c74f:	0f 8f 68 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c755:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    c75c:	0f 84 bb 03 00 00    	je     cb1d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
    c762:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    c769:	0f 8f 4e 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c76f:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    c776:	0f 84 99 05 00 00    	je     cd15 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
    c77c:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    c783:	0f 8f 34 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c789:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    c790:	0f 84 bf 03 00 00    	je     cb55 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
    c796:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    c79d:	0f 8f 1a 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c7a3:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    c7aa:	0f 84 9d 05 00 00    	je     cd4d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
    c7b0:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    c7b7:	0f 8f 00 06 00 00    	jg     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c7bd:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
    c7c4:	0f 84 bb 05 00 00    	je     cd85 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
    c7ca:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
    c7d1:	0f 84 b6 03 00 00    	je     cb8d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
    c7d7:	e9 e1 05 00 00       	jmp    cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c7dc:	8b 45 cc             	mov    -0x34(%rbp),%eax
    c7df:	83 c0 0d             	add    $0xd,%eax
    c7e2:	83 f8 0c             	cmp    $0xc,%eax
    c7e5:	0f 87 d2 05 00 00    	ja     cdbd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c7eb:	89 c0                	mov    %eax,%eax
    c7ed:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    c7f4:	00 
    c7f5:	48 8d 05 0c 84 01 00 	lea    0x1840c(%rip),%rax        # 24c08 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x338>
    c7fc:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    c7ff:	48 98                	cltq
    c801:	48 8d 15 00 84 01 00 	lea    0x18400(%rip),%rdx        # 24c08 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x338>
    c808:	48 01 d0             	add    %rdx,%rax
    c80b:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    c80d:	bf 28 00 00 00       	mov    $0x28,%edi
    c812:	e8 b9 88 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c817:	48 89 c3             	mov    %rax,%rbx
    c81a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c81e:	48 89 c6             	mov    %rax,%rsi
    c821:	48 89 df             	mov    %rbx,%rdi
    c824:	e8 9d b1 ff ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
    c829:	48 8d 05 84 fd ff ff 	lea    -0x27c(%rip),%rax        # c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    c830:	48 89 c2             	mov    %rax,%rdx
    c833:	48 8d 05 ae b4 02 00 	lea    0x2b4ae(%rip),%rax        # 37ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c83a:	48 89 c6             	mov    %rax,%rsi
    c83d:	48 89 df             	mov    %rbx,%rdi
    c840:	e8 3b 8b ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    c845:	bf 28 00 00 00       	mov    $0x28,%edi
    c84a:	e8 81 88 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c84f:	48 89 c3             	mov    %rax,%rbx
    c852:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c856:	48 89 c6             	mov    %rax,%rsi
    c859:	48 89 df             	mov    %rbx,%rdi
    c85c:	e8 37 b2 ff ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
    c861:	48 8d 05 dc fc ff ff 	lea    -0x324(%rip),%rax        # c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    c868:	48 89 c2             	mov    %rax,%rdx
    c86b:	48 8d 05 5e b4 02 00 	lea    0x2b45e(%rip),%rax        # 37cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c872:	48 89 c6             	mov    %rax,%rsi
    c875:	48 89 df             	mov    %rbx,%rdi
    c878:	e8 03 8b ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    c87d:	bf 28 00 00 00       	mov    $0x28,%edi
    c882:	e8 49 88 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c887:	48 89 c3             	mov    %rax,%rbx
    c88a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c88e:	48 89 c6             	mov    %rax,%rsi
    c891:	48 89 df             	mov    %rbx,%rdi
    c894:	e8 d1 b2 ff ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
    c899:	48 8d 05 34 fc ff ff 	lea    -0x3cc(%rip),%rax        # c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>
    c8a0:	48 89 c2             	mov    %rax,%rdx
    c8a3:	48 8d 05 0e b4 02 00 	lea    0x2b40e(%rip),%rax        # 37cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c8aa:	48 89 c6             	mov    %rax,%rsi
    c8ad:	48 89 df             	mov    %rbx,%rdi
    c8b0:	e8 cb 8a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    c8b5:	bf 28 00 00 00       	mov    $0x28,%edi
    c8ba:	e8 11 88 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c8bf:	48 89 c3             	mov    %rax,%rbx
    c8c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c8c6:	48 89 c6             	mov    %rax,%rsi
    c8c9:	48 89 df             	mov    %rbx,%rdi
    c8cc:	e8 6b b3 ff ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
    c8d1:	48 8d 05 8c fb ff ff 	lea    -0x474(%rip),%rax        # c464 <_ZN2vk15DeviceLostErrorD1Ev>
    c8d8:	48 89 c2             	mov    %rax,%rdx
    c8db:	48 8d 05 be b3 02 00 	lea    0x2b3be(%rip),%rax        # 37ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c8e2:	48 89 c6             	mov    %rax,%rsi
    c8e5:	48 89 df             	mov    %rbx,%rdi
    c8e8:	e8 93 8a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    c8ed:	bf 28 00 00 00       	mov    $0x28,%edi
    c8f2:	e8 d9 87 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c8f7:	48 89 c3             	mov    %rax,%rbx
    c8fa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c8fe:	48 89 c6             	mov    %rax,%rsi
    c901:	48 89 df             	mov    %rbx,%rdi
    c904:	e8 05 b4 ff ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
    c909:	48 8d 05 e4 fa ff ff 	lea    -0x51c(%rip),%rax        # c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    c910:	48 89 c2             	mov    %rax,%rdx
    c913:	48 8d 05 6e b3 02 00 	lea    0x2b36e(%rip),%rax        # 37c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c91a:	48 89 c6             	mov    %rax,%rsi
    c91d:	48 89 df             	mov    %rbx,%rdi
    c920:	e8 5b 8a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    c925:	bf 28 00 00 00       	mov    $0x28,%edi
    c92a:	e8 a1 87 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c92f:	48 89 c3             	mov    %rax,%rbx
    c932:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c936:	48 89 c6             	mov    %rax,%rsi
    c939:	48 89 df             	mov    %rbx,%rdi
    c93c:	e8 9f b4 ff ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
    c941:	48 8d 05 3c fa ff ff 	lea    -0x5c4(%rip),%rax        # c384 <_ZN2vk20LayerNotPresentErrorD1Ev>
    c948:	48 89 c2             	mov    %rax,%rdx
    c94b:	48 8d 05 1e b3 02 00 	lea    0x2b31e(%rip),%rax        # 37c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c952:	48 89 c6             	mov    %rax,%rsi
    c955:	48 89 df             	mov    %rbx,%rdi
    c958:	e8 23 8a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    c95d:	bf 28 00 00 00       	mov    $0x28,%edi
    c962:	e8 69 87 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c967:	48 89 c3             	mov    %rax,%rbx
    c96a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c96e:	48 89 c6             	mov    %rax,%rsi
    c971:	48 89 df             	mov    %rbx,%rdi
    c974:	e8 39 b5 ff ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
    c979:	48 8d 05 94 f9 ff ff 	lea    -0x66c(%rip),%rax        # c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    c980:	48 89 c2             	mov    %rax,%rdx
    c983:	48 8d 05 ce b2 02 00 	lea    0x2b2ce(%rip),%rax        # 37c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c98a:	48 89 c6             	mov    %rax,%rsi
    c98d:	48 89 df             	mov    %rbx,%rdi
    c990:	e8 eb 89 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    c995:	bf 28 00 00 00       	mov    $0x28,%edi
    c99a:	e8 31 87 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c99f:	48 89 c3             	mov    %rax,%rbx
    c9a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c9a6:	48 89 c6             	mov    %rax,%rsi
    c9a9:	48 89 df             	mov    %rbx,%rdi
    c9ac:	e8 d3 b5 ff ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
    c9b1:	48 8d 05 ec f8 ff ff 	lea    -0x714(%rip),%rax        # c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    c9b8:	48 89 c2             	mov    %rax,%rdx
    c9bb:	48 8d 05 7e b2 02 00 	lea    0x2b27e(%rip),%rax        # 37c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c9c2:	48 89 c6             	mov    %rax,%rsi
    c9c5:	48 89 df             	mov    %rbx,%rdi
    c9c8:	e8 b3 89 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    c9cd:	bf 28 00 00 00       	mov    $0x28,%edi
    c9d2:	e8 f9 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c9d7:	48 89 c3             	mov    %rax,%rbx
    c9da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c9de:	48 89 c6             	mov    %rax,%rsi
    c9e1:	48 89 df             	mov    %rbx,%rdi
    c9e4:	e8 6d b6 ff ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
    c9e9:	48 8d 05 44 f8 ff ff 	lea    -0x7bc(%rip),%rax        # c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    c9f0:	48 89 c2             	mov    %rax,%rdx
    c9f3:	48 8d 05 2e b2 02 00 	lea    0x2b22e(%rip),%rax        # 37c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c9fa:	48 89 c6             	mov    %rax,%rsi
    c9fd:	48 89 df             	mov    %rbx,%rdi
    ca00:	e8 7b 89 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    ca05:	bf 28 00 00 00       	mov    $0x28,%edi
    ca0a:	e8 c1 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ca0f:	48 89 c3             	mov    %rax,%rbx
    ca12:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ca16:	48 89 c6             	mov    %rax,%rsi
    ca19:	48 89 df             	mov    %rbx,%rdi
    ca1c:	e8 07 b7 ff ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
    ca21:	48 8d 05 9c f7 ff ff 	lea    -0x864(%rip),%rax        # c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>
    ca28:	48 89 c2             	mov    %rax,%rdx
    ca2b:	48 8d 05 de b1 02 00 	lea    0x2b1de(%rip),%rax        # 37c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ca32:	48 89 c6             	mov    %rax,%rsi
    ca35:	48 89 df             	mov    %rbx,%rdi
    ca38:	e8 43 89 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    ca3d:	bf 28 00 00 00       	mov    $0x28,%edi
    ca42:	e8 89 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ca47:	48 89 c3             	mov    %rax,%rbx
    ca4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ca4e:	48 89 c6             	mov    %rax,%rsi
    ca51:	48 89 df             	mov    %rbx,%rdi
    ca54:	e8 a1 b7 ff ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
    ca59:	48 8d 05 f4 f6 ff ff 	lea    -0x90c(%rip),%rax        # c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    ca60:	48 89 c2             	mov    %rax,%rdx
    ca63:	48 8d 05 8e b1 02 00 	lea    0x2b18e(%rip),%rax        # 37bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ca6a:	48 89 c6             	mov    %rax,%rsi
    ca6d:	48 89 df             	mov    %rbx,%rdi
    ca70:	e8 0b 89 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    ca75:	bf 28 00 00 00       	mov    $0x28,%edi
    ca7a:	e8 51 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ca7f:	48 89 c3             	mov    %rax,%rbx
    ca82:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ca86:	48 89 c6             	mov    %rax,%rsi
    ca89:	48 89 df             	mov    %rbx,%rdi
    ca8c:	e8 3b b8 ff ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
    ca91:	48 8d 05 4c f6 ff ff 	lea    -0x9b4(%rip),%rax        # c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>
    ca98:	48 89 c2             	mov    %rax,%rdx
    ca9b:	48 8d 05 3e b1 02 00 	lea    0x2b13e(%rip),%rax        # 37be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    caa2:	48 89 c6             	mov    %rax,%rsi
    caa5:	48 89 df             	mov    %rbx,%rdi
    caa8:	e8 d3 88 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    caad:	bf 28 00 00 00       	mov    $0x28,%edi
    cab2:	e8 19 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cab7:	48 89 c3             	mov    %rax,%rbx
    caba:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cabe:	48 89 c6             	mov    %rax,%rsi
    cac1:	48 89 df             	mov    %rbx,%rdi
    cac4:	e8 d5 b8 ff ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
    cac9:	48 8d 05 a4 f5 ff ff 	lea    -0xa5c(%rip),%rax        # c074 <_ZN2vk12UnknownErrorD1Ev>
    cad0:	48 89 c2             	mov    %rax,%rdx
    cad3:	48 8d 05 ee b0 02 00 	lea    0x2b0ee(%rip),%rax        # 37bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cada:	48 89 c6             	mov    %rax,%rsi
    cadd:	48 89 df             	mov    %rbx,%rdi
    cae0:	e8 9b 88 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    cae5:	bf 28 00 00 00       	mov    $0x28,%edi
    caea:	e8 e1 85 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    caef:	48 89 c3             	mov    %rax,%rbx
    caf2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    caf6:	48 89 c6             	mov    %rax,%rsi
    caf9:	48 89 df             	mov    %rbx,%rdi
    cafc:	e8 6f b9 ff ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
    cb01:	48 8d 05 fc f4 ff ff 	lea    -0xb04(%rip),%rax        # c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    cb08:	48 89 c2             	mov    %rax,%rdx
    cb0b:	48 8d 05 9e b0 02 00 	lea    0x2b09e(%rip),%rax        # 37bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cb12:	48 89 c6             	mov    %rax,%rsi
    cb15:	48 89 df             	mov    %rbx,%rdi
    cb18:	e8 63 88 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    cb1d:	bf 28 00 00 00       	mov    $0x28,%edi
    cb22:	e8 a9 85 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cb27:	48 89 c3             	mov    %rax,%rbx
    cb2a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cb2e:	48 89 c6             	mov    %rax,%rsi
    cb31:	48 89 df             	mov    %rbx,%rdi
    cb34:	e8 09 ba ff ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
    cb39:	48 8d 05 54 f4 ff ff 	lea    -0xbac(%rip),%rax        # bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    cb40:	48 89 c2             	mov    %rax,%rdx
    cb43:	48 8d 05 4e b0 02 00 	lea    0x2b04e(%rip),%rax        # 37b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cb4a:	48 89 c6             	mov    %rax,%rsi
    cb4d:	48 89 df             	mov    %rbx,%rdi
    cb50:	e8 2b 88 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    cb55:	bf 28 00 00 00       	mov    $0x28,%edi
    cb5a:	e8 71 85 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cb5f:	48 89 c3             	mov    %rax,%rbx
    cb62:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cb66:	48 89 c6             	mov    %rax,%rsi
    cb69:	48 89 df             	mov    %rbx,%rdi
    cb6c:	e8 a3 ba ff ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
    cb71:	48 8d 05 ac f3 ff ff 	lea    -0xc54(%rip),%rax        # bf24 <_ZN2vk18FragmentationErrorD1Ev>
    cb78:	48 89 c2             	mov    %rax,%rdx
    cb7b:	48 8d 05 fe af 02 00 	lea    0x2affe(%rip),%rax        # 37b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cb82:	48 89 c6             	mov    %rax,%rsi
    cb85:	48 89 df             	mov    %rbx,%rdi
    cb88:	e8 f3 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    cb8d:	bf 28 00 00 00       	mov    $0x28,%edi
    cb92:	e8 39 85 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cb97:	48 89 c3             	mov    %rax,%rbx
    cb9a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cb9e:	48 89 c6             	mov    %rax,%rsi
    cba1:	48 89 df             	mov    %rbx,%rdi
    cba4:	e8 3d bb ff ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
    cba9:	48 8d 05 04 f3 ff ff 	lea    -0xcfc(%rip),%rax        # beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    cbb0:	48 89 c2             	mov    %rax,%rdx
    cbb3:	48 8d 05 ae af 02 00 	lea    0x2afae(%rip),%rax        # 37b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cbba:	48 89 c6             	mov    %rax,%rsi
    cbbd:	48 89 df             	mov    %rbx,%rdi
    cbc0:	e8 bb 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    cbc5:	bf 28 00 00 00       	mov    $0x28,%edi
    cbca:	e8 01 85 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cbcf:	48 89 c3             	mov    %rax,%rbx
    cbd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cbd6:	48 89 c6             	mov    %rax,%rsi
    cbd9:	48 89 df             	mov    %rbx,%rdi
    cbdc:	e8 d7 bb ff ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
    cbe1:	48 8d 05 5c f2 ff ff 	lea    -0xda4(%rip),%rax        # be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    cbe8:	48 89 c2             	mov    %rax,%rdx
    cbeb:	48 8d 05 5e af 02 00 	lea    0x2af5e(%rip),%rax        # 37b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cbf2:	48 89 c6             	mov    %rax,%rsi
    cbf5:	48 89 df             	mov    %rbx,%rdi
    cbf8:	e8 83 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    cbfd:	bf 28 00 00 00       	mov    $0x28,%edi
    cc02:	e8 c9 84 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cc07:	48 89 c3             	mov    %rax,%rbx
    cc0a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cc0e:	48 89 c6             	mov    %rax,%rsi
    cc11:	48 89 df             	mov    %rbx,%rdi
    cc14:	e8 71 bc ff ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
    cc19:	48 8d 05 b4 f1 ff ff 	lea    -0xe4c(%rip),%rax        # bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    cc20:	48 89 c2             	mov    %rax,%rdx
    cc23:	48 8d 05 0e af 02 00 	lea    0x2af0e(%rip),%rax        # 37b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cc2a:	48 89 c6             	mov    %rax,%rsi
    cc2d:	48 89 df             	mov    %rbx,%rdi
    cc30:	e8 4b 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    cc35:	bf 28 00 00 00       	mov    $0x28,%edi
    cc3a:	e8 91 84 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cc3f:	48 89 c3             	mov    %rax,%rbx
    cc42:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cc46:	48 89 c6             	mov    %rax,%rsi
    cc49:	48 89 df             	mov    %rbx,%rdi
    cc4c:	e8 0b bd ff ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
    cc51:	48 8d 05 0c f1 ff ff 	lea    -0xef4(%rip),%rax        # bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    cc58:	48 89 c2             	mov    %rax,%rdx
    cc5b:	48 8d 05 be ae 02 00 	lea    0x2aebe(%rip),%rax        # 37b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cc62:	48 89 c6             	mov    %rax,%rsi
    cc65:	48 89 df             	mov    %rbx,%rdi
    cc68:	e8 13 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    cc6d:	bf 28 00 00 00       	mov    $0x28,%edi
    cc72:	e8 59 84 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cc77:	48 89 c3             	mov    %rax,%rbx
    cc7a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cc7e:	48 89 c6             	mov    %rax,%rsi
    cc81:	48 89 df             	mov    %rbx,%rdi
    cc84:	e8 a5 bd ff ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
    cc89:	48 8d 05 64 f0 ff ff 	lea    -0xf9c(%rip),%rax        # bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    cc90:	48 89 c2             	mov    %rax,%rdx
    cc93:	48 8d 05 6e ae 02 00 	lea    0x2ae6e(%rip),%rax        # 37b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cc9a:	48 89 c6             	mov    %rax,%rsi
    cc9d:	48 89 df             	mov    %rbx,%rdi
    cca0:	e8 db 86 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    cca5:	bf 28 00 00 00       	mov    $0x28,%edi
    ccaa:	e8 21 84 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ccaf:	48 89 c3             	mov    %rax,%rbx
    ccb2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ccb6:	48 89 c6             	mov    %rax,%rsi
    ccb9:	48 89 df             	mov    %rbx,%rdi
    ccbc:	e8 3f be ff ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
    ccc1:	48 8d 05 bc ef ff ff 	lea    -0x1044(%rip),%rax        # bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    ccc8:	48 89 c2             	mov    %rax,%rdx
    cccb:	48 8d 05 1e ae 02 00 	lea    0x2ae1e(%rip),%rax        # 37af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ccd2:	48 89 c6             	mov    %rax,%rsi
    ccd5:	48 89 df             	mov    %rbx,%rdi
    ccd8:	e8 a3 86 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    ccdd:	bf 28 00 00 00       	mov    $0x28,%edi
    cce2:	e8 e9 83 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cce7:	48 89 c3             	mov    %rax,%rbx
    ccea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ccee:	48 89 c6             	mov    %rax,%rsi
    ccf1:	48 89 df             	mov    %rbx,%rdi
    ccf4:	e8 d9 be ff ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
    ccf9:	48 8d 05 14 ef ff ff 	lea    -0x10ec(%rip),%rax        # bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    cd00:	48 89 c2             	mov    %rax,%rdx
    cd03:	48 8d 05 ce ad 02 00 	lea    0x2adce(%rip),%rax        # 37ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cd0a:	48 89 c6             	mov    %rax,%rsi
    cd0d:	48 89 df             	mov    %rbx,%rdi
    cd10:	e8 6b 86 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    cd15:	bf 28 00 00 00       	mov    $0x28,%edi
    cd1a:	e8 b1 83 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cd1f:	48 89 c3             	mov    %rax,%rbx
    cd22:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cd26:	48 89 c6             	mov    %rax,%rsi
    cd29:	48 89 df             	mov    %rbx,%rdi
    cd2c:	e8 73 bf ff ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
    cd31:	48 8d 05 6c ee ff ff 	lea    -0x1194(%rip),%rax        # bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    cd38:	48 89 c2             	mov    %rax,%rdx
    cd3b:	48 8d 05 7e ad 02 00 	lea    0x2ad7e(%rip),%rax        # 37ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cd42:	48 89 c6             	mov    %rax,%rsi
    cd45:	48 89 df             	mov    %rbx,%rdi
    cd48:	e8 33 86 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    cd4d:	bf 28 00 00 00       	mov    $0x28,%edi
    cd52:	e8 79 83 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cd57:	48 89 c3             	mov    %rax,%rbx
    cd5a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cd5e:	48 89 c6             	mov    %rax,%rsi
    cd61:	48 89 df             	mov    %rbx,%rdi
    cd64:	e8 0d c0 ff ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
    cd69:	48 8d 05 c4 ed ff ff 	lea    -0x123c(%rip),%rax        # bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    cd70:	48 89 c2             	mov    %rax,%rdx
    cd73:	48 8d 05 2e ad 02 00 	lea    0x2ad2e(%rip),%rax        # 37aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cd7a:	48 89 c6             	mov    %rax,%rsi
    cd7d:	48 89 df             	mov    %rbx,%rdi
    cd80:	e8 fb 85 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    cd85:	bf 28 00 00 00       	mov    $0x28,%edi
    cd8a:	e8 41 83 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cd8f:	48 89 c3             	mov    %rax,%rbx
    cd92:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cd96:	48 89 c6             	mov    %rax,%rsi
    cd99:	48 89 df             	mov    %rbx,%rdi
    cd9c:	e8 a7 c0 ff ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
    cda1:	48 8d 05 1c ed ff ff 	lea    -0x12e4(%rip),%rax        # bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    cda8:	48 89 c2             	mov    %rax,%rdx
    cdab:	48 8d 05 de ac 02 00 	lea    0x2acde(%rip),%rax        # 37a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cdb2:	48 89 c6             	mov    %rax,%rsi
    cdb5:	48 89 df             	mov    %rbx,%rdi
    cdb8:	e8 c3 85 ff ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
    cdbd:	bf 28 00 00 00       	mov    $0x28,%edi
    cdc2:	e8 09 83 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cdc7:	48 89 c3             	mov    %rax,%rbx
    cdca:	8b 45 cc             	mov    -0x34(%rbp),%eax
    cdcd:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    cdd0:	0f b6 05 81 b5 02 00 	movzbl 0x2b581(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    cdd7:	84 c0                	test   %al,%al
    cdd9:	0f 94 c0             	sete   %al
    cddc:	84 c0                	test   %al,%al
    cdde:	74 4a                	je     ce2a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    cde0:	48 8d 05 71 b5 02 00 	lea    0x2b571(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    cde7:	48 89 c7             	mov    %rax,%rdi
    cdea:	e8 d1 85 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    cdef:	85 c0                	test   %eax,%eax
    cdf1:	0f 95 c0             	setne  %al
    cdf4:	84 c0                	test   %al,%al
    cdf6:	74 32                	je     ce2a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    cdf8:	48 8d 05 f9 b3 02 00 	lea    0x2b3f9(%rip),%rax        # 381f8 <__dso_handle>
    cdff:	48 89 c2             	mov    %rax,%rdx
    ce02:	48 8d 05 f7 b3 02 00 	lea    0x2b3f7(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    ce09:	48 89 c6             	mov    %rax,%rsi
    ce0c:	48 8d 05 11 f8 ff ff 	lea    -0x7ef(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    ce13:	48 89 c7             	mov    %rax,%rdi
    ce16:	e8 b5 83 ff ff       	call   51d0 <__cxa_atexit@plt>
    ce1b:	48 8d 05 36 b5 02 00 	lea    0x2b536(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    ce22:	48 89 c7             	mov    %rax,%rdi
    ce25:	e8 d6 82 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    ce2a:	48 8d 15 cf b3 02 00 	lea    0x2b3cf(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    ce31:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    ce34:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    ce38:	89 ce                	mov    %ecx,%esi
    ce3a:	48 89 c7             	mov    %rax,%rdi
    ce3d:	e8 c6 94 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    ce42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ce46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
    ce4a:	48 89 c6             	mov    %rax,%rsi
    ce4d:	48 89 d7             	mov    %rdx,%rdi
    ce50:	89 f1                	mov    %esi,%ecx
    ce52:	48 89 d0             	mov    %rdx,%rax
    ce55:	89 ce                	mov    %ecx,%esi
    ce57:	48 89 c2             	mov    %rax,%rdx
    ce5a:	48 89 df             	mov    %rbx,%rdi
    ce5d:	e8 ae a9 ff ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
    ce62:	48 8d 05 dd aa ff ff 	lea    -0x5523(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
    ce69:	48 89 c2             	mov    %rax,%rdx
    ce6c:	48 8d 05 8d ae 02 00 	lea    0x2ae8d(%rip),%rax        # 37d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
    ce73:	48 89 c6             	mov    %rax,%rsi
    ce76:	48 89 df             	mov    %rbx,%rdi
    ce79:	e8 02 85 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    ce7e:	49 89 c4             	mov    %rax,%r12
    ce81:	48 89 df             	mov    %rbx,%rdi
    ce84:	e8 c7 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    ce89:	4c 89 e0             	mov    %r12,%rax
    ce8c:	48 89 c7             	mov    %rax,%rdi
    ce8f:	e8 0c 85 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    ce94:	49 89 c4             	mov    %rax,%r12
    ce97:	48 89 df             	mov    %rbx,%rdi
    ce9a:	e8 b1 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    ce9f:	4c 89 e0             	mov    %r12,%rax
    cea2:	48 89 c7             	mov    %rax,%rdi
    cea5:	e8 f6 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    ceaa:	49 89 c4             	mov    %rax,%r12
    cead:	48 89 df             	mov    %rbx,%rdi
    ceb0:	e8 9b 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    ceb5:	4c 89 e0             	mov    %r12,%rax
    ceb8:	48 89 c7             	mov    %rax,%rdi
    cebb:	e8 e0 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    cec0:	49 89 c4             	mov    %rax,%r12
    cec3:	48 89 df             	mov    %rbx,%rdi
    cec6:	e8 85 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cecb:	4c 89 e0             	mov    %r12,%rax
    cece:	48 89 c7             	mov    %rax,%rdi
    ced1:	e8 ca 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    ced6:	49 89 c4             	mov    %rax,%r12
    ced9:	48 89 df             	mov    %rbx,%rdi
    cedc:	e8 6f 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cee1:	4c 89 e0             	mov    %r12,%rax
    cee4:	48 89 c7             	mov    %rax,%rdi
    cee7:	e8 b4 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    ceec:	49 89 c4             	mov    %rax,%r12
    ceef:	48 89 df             	mov    %rbx,%rdi
    cef2:	e8 59 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cef7:	4c 89 e0             	mov    %r12,%rax
    cefa:	48 89 c7             	mov    %rax,%rdi
    cefd:	e8 9e 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    cf02:	49 89 c4             	mov    %rax,%r12
    cf05:	48 89 df             	mov    %rbx,%rdi
    cf08:	e8 43 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf0d:	4c 89 e0             	mov    %r12,%rax
    cf10:	48 89 c7             	mov    %rax,%rdi
    cf13:	e8 88 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    cf18:	49 89 c4             	mov    %rax,%r12
    cf1b:	48 89 df             	mov    %rbx,%rdi
    cf1e:	e8 2d 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf23:	4c 89 e0             	mov    %r12,%rax
    cf26:	48 89 c7             	mov    %rax,%rdi
    cf29:	e8 72 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    cf2e:	49 89 c4             	mov    %rax,%r12
    cf31:	48 89 df             	mov    %rbx,%rdi
    cf34:	e8 17 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf39:	4c 89 e0             	mov    %r12,%rax
    cf3c:	48 89 c7             	mov    %rax,%rdi
    cf3f:	e8 5c 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    cf44:	49 89 c4             	mov    %rax,%r12
    cf47:	48 89 df             	mov    %rbx,%rdi
    cf4a:	e8 01 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf4f:	4c 89 e0             	mov    %r12,%rax
    cf52:	48 89 c7             	mov    %rax,%rdi
    cf55:	e8 46 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    cf5a:	49 89 c4             	mov    %rax,%r12
    cf5d:	48 89 df             	mov    %rbx,%rdi
    cf60:	e8 eb 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf65:	4c 89 e0             	mov    %r12,%rax
    cf68:	48 89 c7             	mov    %rax,%rdi
    cf6b:	e8 30 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    cf70:	49 89 c4             	mov    %rax,%r12
    cf73:	48 89 df             	mov    %rbx,%rdi
    cf76:	e8 d5 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf7b:	4c 89 e0             	mov    %r12,%rax
    cf7e:	48 89 c7             	mov    %rax,%rdi
    cf81:	e8 1a 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    cf86:	49 89 c4             	mov    %rax,%r12
    cf89:	48 89 df             	mov    %rbx,%rdi
    cf8c:	e8 bf 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf91:	4c 89 e0             	mov    %r12,%rax
    cf94:	48 89 c7             	mov    %rax,%rdi
    cf97:	e8 04 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    cf9c:	49 89 c4             	mov    %rax,%r12
    cf9f:	48 89 df             	mov    %rbx,%rdi
    cfa2:	e8 a9 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cfa7:	4c 89 e0             	mov    %r12,%rax
    cfaa:	48 89 c7             	mov    %rax,%rdi
    cfad:	e8 ee 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    cfb2:	49 89 c4             	mov    %rax,%r12
    cfb5:	48 89 df             	mov    %rbx,%rdi
    cfb8:	e8 93 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cfbd:	4c 89 e0             	mov    %r12,%rax
    cfc0:	48 89 c7             	mov    %rax,%rdi
    cfc3:	e8 d8 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    cfc8:	49 89 c4             	mov    %rax,%r12
    cfcb:	48 89 df             	mov    %rbx,%rdi
    cfce:	e8 7d 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cfd3:	4c 89 e0             	mov    %r12,%rax
    cfd6:	48 89 c7             	mov    %rax,%rdi
    cfd9:	e8 c2 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    cfde:	49 89 c4             	mov    %rax,%r12
    cfe1:	48 89 df             	mov    %rbx,%rdi
    cfe4:	e8 67 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cfe9:	4c 89 e0             	mov    %r12,%rax
    cfec:	48 89 c7             	mov    %rax,%rdi
    cfef:	e8 ac 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    cff4:	49 89 c4             	mov    %rax,%r12
    cff7:	48 89 df             	mov    %rbx,%rdi
    cffa:	e8 51 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cfff:	4c 89 e0             	mov    %r12,%rax
    d002:	48 89 c7             	mov    %rax,%rdi
    d005:	e8 96 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    d00a:	49 89 c4             	mov    %rax,%r12
    d00d:	48 89 df             	mov    %rbx,%rdi
    d010:	e8 3b 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    d015:	4c 89 e0             	mov    %r12,%rax
    d018:	48 89 c7             	mov    %rax,%rdi
    d01b:	e8 80 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    d020:	49 89 c4             	mov    %rax,%r12
    d023:	48 89 df             	mov    %rbx,%rdi
    d026:	e8 25 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    d02b:	4c 89 e0             	mov    %r12,%rax
    d02e:	48 89 c7             	mov    %rax,%rdi
    d031:	e8 6a 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    d036:	49 89 c4             	mov    %rax,%r12
    d039:	48 89 df             	mov    %rbx,%rdi
    d03c:	e8 0f 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    d041:	4c 89 e0             	mov    %r12,%rax
    d044:	48 89 c7             	mov    %rax,%rdi
    d047:	e8 54 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    d04c:	49 89 c4             	mov    %rax,%r12
    d04f:	48 89 df             	mov    %rbx,%rdi
    d052:	e8 f9 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d057:	4c 89 e0             	mov    %r12,%rax
    d05a:	48 89 c7             	mov    %rax,%rdi
    d05d:	e8 3e 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    d062:	49 89 c4             	mov    %rax,%r12
    d065:	48 89 df             	mov    %rbx,%rdi
    d068:	e8 e3 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d06d:	4c 89 e0             	mov    %r12,%rax
    d070:	48 89 c7             	mov    %rax,%rdi
    d073:	e8 28 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    d078:	49 89 c4             	mov    %rax,%r12
    d07b:	48 89 df             	mov    %rbx,%rdi
    d07e:	e8 cd 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d083:	4c 89 e0             	mov    %r12,%rax
    d086:	48 89 c7             	mov    %rax,%rdi
    d089:	e8 12 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    d08e:	49 89 c4             	mov    %rax,%r12
    d091:	48 89 df             	mov    %rbx,%rdi
    d094:	e8 b7 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d099:	4c 89 e0             	mov    %r12,%rax
    d09c:	48 89 c7             	mov    %rax,%rdi
    d09f:	e8 fc 82 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    d0a4:	49 89 c4             	mov    %rax,%r12
    d0a7:	48 89 df             	mov    %rbx,%rdi
    d0aa:	e8 a1 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d0af:	4c 89 e0             	mov    %r12,%rax
    d0b2:	48 89 c7             	mov    %rax,%rdi
    d0b5:	e8 e6 82 ff ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
    d0ba:	49 89 c4             	mov    %rax,%r12
    d0bd:	48 89 df             	mov    %rbx,%rdi
    d0c0:	e8 8b 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d0c5:	4c 89 e0             	mov    %r12,%rax
    d0c8:	48 89 c7             	mov    %rax,%rdi
    d0cb:	e8 d0 82 ff ff       	call   53a0 <_Unwind_Resume@plt>

000000000000d0d0 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
    d0d0:	55                   	push   %rbp
    d0d1:	48 89 e5             	mov    %rsp,%rbp
    d0d4:	41 54                	push   %r12
    d0d6:	53                   	push   %rbx
    d0d7:	48 83 ec 30          	sub    $0x30,%rsp
    d0db:	89 7d cc             	mov    %edi,-0x34(%rbp)
    d0de:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
    d0e2:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    d0e6:	0f 89 28 07 00 00    	jns    d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d0ec:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
    d0f0:	0f 8d 3d 01 00 00    	jge    d233 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
    d0f6:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    d0fd:	0f 84 19 05 00 00    	je     d61c <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
    d103:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    d10a:	0f 8f 04 07 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d110:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    d117:	0f 84 37 05 00 00    	je     d654 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
    d11d:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    d124:	0f 8f ea 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d12a:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    d131:	0f 84 55 05 00 00    	je     d68c <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
    d137:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    d13e:	0f 8f d0 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d144:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    d14b:	0f 84 73 05 00 00    	je     d6c4 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
    d151:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    d158:	0f 8f b6 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d15e:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    d165:	0f 84 91 05 00 00    	je     d6fc <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
    d16b:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    d172:	0f 8f 9c 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d178:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    d17f:	0f 84 af 05 00 00    	je     d734 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
    d185:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    d18c:	0f 8f 82 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d192:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    d199:	0f 84 9d 03 00 00    	je     d53c <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
    d19f:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    d1a6:	0f 8f 68 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d1ac:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    d1b3:	0f 84 bb 03 00 00    	je     d574 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
    d1b9:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    d1c0:	0f 8f 4e 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d1c6:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    d1cd:	0f 84 99 05 00 00    	je     d76c <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
    d1d3:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    d1da:	0f 8f 34 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d1e0:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    d1e7:	0f 84 bf 03 00 00    	je     d5ac <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
    d1ed:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    d1f4:	0f 8f 1a 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d1fa:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    d201:	0f 84 9d 05 00 00    	je     d7a4 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
    d207:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    d20e:	0f 8f 00 06 00 00    	jg     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d214:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
    d21b:	0f 84 bb 05 00 00    	je     d7dc <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
    d221:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
    d228:	0f 84 b6 03 00 00    	je     d5e4 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
    d22e:	e9 e1 05 00 00       	jmp    d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d233:	8b 45 cc             	mov    -0x34(%rbp),%eax
    d236:	83 c0 0d             	add    $0xd,%eax
    d239:	83 f8 0c             	cmp    $0xc,%eax
    d23c:	0f 87 d2 05 00 00    	ja     d814 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    d242:	89 c0                	mov    %eax,%eax
    d244:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    d24b:	00 
    d24c:	48 8d 05 9d 84 01 00 	lea    0x1849d(%rip),%rax        # 256f0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    d253:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    d256:	48 98                	cltq
    d258:	48 8d 15 91 84 01 00 	lea    0x18491(%rip),%rdx        # 256f0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    d25f:	48 01 d0             	add    %rdx,%rax
    d262:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    d264:	bf 28 00 00 00       	mov    $0x28,%edi
    d269:	e8 62 7e ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d26e:	48 89 c3             	mov    %rax,%rbx
    d271:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d275:	48 89 c6             	mov    %rax,%rsi
    d278:	48 89 df             	mov    %rbx,%rdi
    d27b:	e8 46 a7 ff ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
    d280:	48 8d 05 2d f3 ff ff 	lea    -0xcd3(%rip),%rax        # c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    d287:	48 89 c2             	mov    %rax,%rdx
    d28a:	48 8d 05 57 aa 02 00 	lea    0x2aa57(%rip),%rax        # 37ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d291:	48 89 c6             	mov    %rax,%rsi
    d294:	48 89 df             	mov    %rbx,%rdi
    d297:	e8 e4 80 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    d29c:	bf 28 00 00 00       	mov    $0x28,%edi
    d2a1:	e8 2a 7e ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d2a6:	48 89 c3             	mov    %rax,%rbx
    d2a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d2ad:	48 89 c6             	mov    %rax,%rsi
    d2b0:	48 89 df             	mov    %rbx,%rdi
    d2b3:	e8 e0 a7 ff ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
    d2b8:	48 8d 05 85 f2 ff ff 	lea    -0xd7b(%rip),%rax        # c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    d2bf:	48 89 c2             	mov    %rax,%rdx
    d2c2:	48 8d 05 07 aa 02 00 	lea    0x2aa07(%rip),%rax        # 37cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d2c9:	48 89 c6             	mov    %rax,%rsi
    d2cc:	48 89 df             	mov    %rbx,%rdi
    d2cf:	e8 ac 80 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    d2d4:	bf 28 00 00 00       	mov    $0x28,%edi
    d2d9:	e8 f2 7d ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d2de:	48 89 c3             	mov    %rax,%rbx
    d2e1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d2e5:	48 89 c6             	mov    %rax,%rsi
    d2e8:	48 89 df             	mov    %rbx,%rdi
    d2eb:	e8 7a a8 ff ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
    d2f0:	48 8d 05 dd f1 ff ff 	lea    -0xe23(%rip),%rax        # c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>
    d2f7:	48 89 c2             	mov    %rax,%rdx
    d2fa:	48 8d 05 b7 a9 02 00 	lea    0x2a9b7(%rip),%rax        # 37cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d301:	48 89 c6             	mov    %rax,%rsi
    d304:	48 89 df             	mov    %rbx,%rdi
    d307:	e8 74 80 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    d30c:	bf 28 00 00 00       	mov    $0x28,%edi
    d311:	e8 ba 7d ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d316:	48 89 c3             	mov    %rax,%rbx
    d319:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d31d:	48 89 c6             	mov    %rax,%rsi
    d320:	48 89 df             	mov    %rbx,%rdi
    d323:	e8 14 a9 ff ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
    d328:	48 8d 05 35 f1 ff ff 	lea    -0xecb(%rip),%rax        # c464 <_ZN2vk15DeviceLostErrorD1Ev>
    d32f:	48 89 c2             	mov    %rax,%rdx
    d332:	48 8d 05 67 a9 02 00 	lea    0x2a967(%rip),%rax        # 37ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d339:	48 89 c6             	mov    %rax,%rsi
    d33c:	48 89 df             	mov    %rbx,%rdi
    d33f:	e8 3c 80 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    d344:	bf 28 00 00 00       	mov    $0x28,%edi
    d349:	e8 82 7d ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d34e:	48 89 c3             	mov    %rax,%rbx
    d351:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d355:	48 89 c6             	mov    %rax,%rsi
    d358:	48 89 df             	mov    %rbx,%rdi
    d35b:	e8 ae a9 ff ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
    d360:	48 8d 05 8d f0 ff ff 	lea    -0xf73(%rip),%rax        # c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    d367:	48 89 c2             	mov    %rax,%rdx
    d36a:	48 8d 05 17 a9 02 00 	lea    0x2a917(%rip),%rax        # 37c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d371:	48 89 c6             	mov    %rax,%rsi
    d374:	48 89 df             	mov    %rbx,%rdi
    d377:	e8 04 80 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    d37c:	bf 28 00 00 00       	mov    $0x28,%edi
    d381:	e8 4a 7d ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d386:	48 89 c3             	mov    %rax,%rbx
    d389:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d38d:	48 89 c6             	mov    %rax,%rsi
    d390:	48 89 df             	mov    %rbx,%rdi
    d393:	e8 48 aa ff ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
    d398:	48 8d 05 e5 ef ff ff 	lea    -0x101b(%rip),%rax        # c384 <_ZN2vk20LayerNotPresentErrorD1Ev>
    d39f:	48 89 c2             	mov    %rax,%rdx
    d3a2:	48 8d 05 c7 a8 02 00 	lea    0x2a8c7(%rip),%rax        # 37c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d3a9:	48 89 c6             	mov    %rax,%rsi
    d3ac:	48 89 df             	mov    %rbx,%rdi
    d3af:	e8 cc 7f ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    d3b4:	bf 28 00 00 00       	mov    $0x28,%edi
    d3b9:	e8 12 7d ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d3be:	48 89 c3             	mov    %rax,%rbx
    d3c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d3c5:	48 89 c6             	mov    %rax,%rsi
    d3c8:	48 89 df             	mov    %rbx,%rdi
    d3cb:	e8 e2 aa ff ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
    d3d0:	48 8d 05 3d ef ff ff 	lea    -0x10c3(%rip),%rax        # c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    d3d7:	48 89 c2             	mov    %rax,%rdx
    d3da:	48 8d 05 77 a8 02 00 	lea    0x2a877(%rip),%rax        # 37c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d3e1:	48 89 c6             	mov    %rax,%rsi
    d3e4:	48 89 df             	mov    %rbx,%rdi
    d3e7:	e8 94 7f ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    d3ec:	bf 28 00 00 00       	mov    $0x28,%edi
    d3f1:	e8 da 7c ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d3f6:	48 89 c3             	mov    %rax,%rbx
    d3f9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d3fd:	48 89 c6             	mov    %rax,%rsi
    d400:	48 89 df             	mov    %rbx,%rdi
    d403:	e8 7c ab ff ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
    d408:	48 8d 05 95 ee ff ff 	lea    -0x116b(%rip),%rax        # c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    d40f:	48 89 c2             	mov    %rax,%rdx
    d412:	48 8d 05 27 a8 02 00 	lea    0x2a827(%rip),%rax        # 37c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d419:	48 89 c6             	mov    %rax,%rsi
    d41c:	48 89 df             	mov    %rbx,%rdi
    d41f:	e8 5c 7f ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    d424:	bf 28 00 00 00       	mov    $0x28,%edi
    d429:	e8 a2 7c ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d42e:	48 89 c3             	mov    %rax,%rbx
    d431:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d435:	48 89 c6             	mov    %rax,%rsi
    d438:	48 89 df             	mov    %rbx,%rdi
    d43b:	e8 16 ac ff ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
    d440:	48 8d 05 ed ed ff ff 	lea    -0x1213(%rip),%rax        # c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    d447:	48 89 c2             	mov    %rax,%rdx
    d44a:	48 8d 05 d7 a7 02 00 	lea    0x2a7d7(%rip),%rax        # 37c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d451:	48 89 c6             	mov    %rax,%rsi
    d454:	48 89 df             	mov    %rbx,%rdi
    d457:	e8 24 7f ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    d45c:	bf 28 00 00 00       	mov    $0x28,%edi
    d461:	e8 6a 7c ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d466:	48 89 c3             	mov    %rax,%rbx
    d469:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d46d:	48 89 c6             	mov    %rax,%rsi
    d470:	48 89 df             	mov    %rbx,%rdi
    d473:	e8 b0 ac ff ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
    d478:	48 8d 05 45 ed ff ff 	lea    -0x12bb(%rip),%rax        # c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>
    d47f:	48 89 c2             	mov    %rax,%rdx
    d482:	48 8d 05 87 a7 02 00 	lea    0x2a787(%rip),%rax        # 37c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d489:	48 89 c6             	mov    %rax,%rsi
    d48c:	48 89 df             	mov    %rbx,%rdi
    d48f:	e8 ec 7e ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    d494:	bf 28 00 00 00       	mov    $0x28,%edi
    d499:	e8 32 7c ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d49e:	48 89 c3             	mov    %rax,%rbx
    d4a1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d4a5:	48 89 c6             	mov    %rax,%rsi
    d4a8:	48 89 df             	mov    %rbx,%rdi
    d4ab:	e8 4a ad ff ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
    d4b0:	48 8d 05 9d ec ff ff 	lea    -0x1363(%rip),%rax        # c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    d4b7:	48 89 c2             	mov    %rax,%rdx
    d4ba:	48 8d 05 37 a7 02 00 	lea    0x2a737(%rip),%rax        # 37bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d4c1:	48 89 c6             	mov    %rax,%rsi
    d4c4:	48 89 df             	mov    %rbx,%rdi
    d4c7:	e8 b4 7e ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    d4cc:	bf 28 00 00 00       	mov    $0x28,%edi
    d4d1:	e8 fa 7b ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d4d6:	48 89 c3             	mov    %rax,%rbx
    d4d9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d4dd:	48 89 c6             	mov    %rax,%rsi
    d4e0:	48 89 df             	mov    %rbx,%rdi
    d4e3:	e8 e4 ad ff ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
    d4e8:	48 8d 05 f5 eb ff ff 	lea    -0x140b(%rip),%rax        # c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>
    d4ef:	48 89 c2             	mov    %rax,%rdx
    d4f2:	48 8d 05 e7 a6 02 00 	lea    0x2a6e7(%rip),%rax        # 37be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d4f9:	48 89 c6             	mov    %rax,%rsi
    d4fc:	48 89 df             	mov    %rbx,%rdi
    d4ff:	e8 7c 7e ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    d504:	bf 28 00 00 00       	mov    $0x28,%edi
    d509:	e8 c2 7b ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d50e:	48 89 c3             	mov    %rax,%rbx
    d511:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d515:	48 89 c6             	mov    %rax,%rsi
    d518:	48 89 df             	mov    %rbx,%rdi
    d51b:	e8 7e ae ff ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
    d520:	48 8d 05 4d eb ff ff 	lea    -0x14b3(%rip),%rax        # c074 <_ZN2vk12UnknownErrorD1Ev>
    d527:	48 89 c2             	mov    %rax,%rdx
    d52a:	48 8d 05 97 a6 02 00 	lea    0x2a697(%rip),%rax        # 37bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d531:	48 89 c6             	mov    %rax,%rsi
    d534:	48 89 df             	mov    %rbx,%rdi
    d537:	e8 44 7e ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    d53c:	bf 28 00 00 00       	mov    $0x28,%edi
    d541:	e8 8a 7b ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d546:	48 89 c3             	mov    %rax,%rbx
    d549:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d54d:	48 89 c6             	mov    %rax,%rsi
    d550:	48 89 df             	mov    %rbx,%rdi
    d553:	e8 18 af ff ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
    d558:	48 8d 05 a5 ea ff ff 	lea    -0x155b(%rip),%rax        # c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    d55f:	48 89 c2             	mov    %rax,%rdx
    d562:	48 8d 05 47 a6 02 00 	lea    0x2a647(%rip),%rax        # 37bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d569:	48 89 c6             	mov    %rax,%rsi
    d56c:	48 89 df             	mov    %rbx,%rdi
    d56f:	e8 0c 7e ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    d574:	bf 28 00 00 00       	mov    $0x28,%edi
    d579:	e8 52 7b ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d57e:	48 89 c3             	mov    %rax,%rbx
    d581:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d585:	48 89 c6             	mov    %rax,%rsi
    d588:	48 89 df             	mov    %rbx,%rdi
    d58b:	e8 b2 af ff ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
    d590:	48 8d 05 fd e9 ff ff 	lea    -0x1603(%rip),%rax        # bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    d597:	48 89 c2             	mov    %rax,%rdx
    d59a:	48 8d 05 f7 a5 02 00 	lea    0x2a5f7(%rip),%rax        # 37b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d5a1:	48 89 c6             	mov    %rax,%rsi
    d5a4:	48 89 df             	mov    %rbx,%rdi
    d5a7:	e8 d4 7d ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    d5ac:	bf 28 00 00 00       	mov    $0x28,%edi
    d5b1:	e8 1a 7b ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d5b6:	48 89 c3             	mov    %rax,%rbx
    d5b9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d5bd:	48 89 c6             	mov    %rax,%rsi
    d5c0:	48 89 df             	mov    %rbx,%rdi
    d5c3:	e8 4c b0 ff ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
    d5c8:	48 8d 05 55 e9 ff ff 	lea    -0x16ab(%rip),%rax        # bf24 <_ZN2vk18FragmentationErrorD1Ev>
    d5cf:	48 89 c2             	mov    %rax,%rdx
    d5d2:	48 8d 05 a7 a5 02 00 	lea    0x2a5a7(%rip),%rax        # 37b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d5d9:	48 89 c6             	mov    %rax,%rsi
    d5dc:	48 89 df             	mov    %rbx,%rdi
    d5df:	e8 9c 7d ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    d5e4:	bf 28 00 00 00       	mov    $0x28,%edi
    d5e9:	e8 e2 7a ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d5ee:	48 89 c3             	mov    %rax,%rbx
    d5f1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d5f5:	48 89 c6             	mov    %rax,%rsi
    d5f8:	48 89 df             	mov    %rbx,%rdi
    d5fb:	e8 e6 b0 ff ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
    d600:	48 8d 05 ad e8 ff ff 	lea    -0x1753(%rip),%rax        # beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    d607:	48 89 c2             	mov    %rax,%rdx
    d60a:	48 8d 05 57 a5 02 00 	lea    0x2a557(%rip),%rax        # 37b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d611:	48 89 c6             	mov    %rax,%rsi
    d614:	48 89 df             	mov    %rbx,%rdi
    d617:	e8 64 7d ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    d61c:	bf 28 00 00 00       	mov    $0x28,%edi
    d621:	e8 aa 7a ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d626:	48 89 c3             	mov    %rax,%rbx
    d629:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d62d:	48 89 c6             	mov    %rax,%rsi
    d630:	48 89 df             	mov    %rbx,%rdi
    d633:	e8 80 b1 ff ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
    d638:	48 8d 05 05 e8 ff ff 	lea    -0x17fb(%rip),%rax        # be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    d63f:	48 89 c2             	mov    %rax,%rdx
    d642:	48 8d 05 07 a5 02 00 	lea    0x2a507(%rip),%rax        # 37b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d649:	48 89 c6             	mov    %rax,%rsi
    d64c:	48 89 df             	mov    %rbx,%rdi
    d64f:	e8 2c 7d ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    d654:	bf 28 00 00 00       	mov    $0x28,%edi
    d659:	e8 72 7a ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d65e:	48 89 c3             	mov    %rax,%rbx
    d661:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d665:	48 89 c6             	mov    %rax,%rsi
    d668:	48 89 df             	mov    %rbx,%rdi
    d66b:	e8 1a b2 ff ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
    d670:	48 8d 05 5d e7 ff ff 	lea    -0x18a3(%rip),%rax        # bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    d677:	48 89 c2             	mov    %rax,%rdx
    d67a:	48 8d 05 b7 a4 02 00 	lea    0x2a4b7(%rip),%rax        # 37b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d681:	48 89 c6             	mov    %rax,%rsi
    d684:	48 89 df             	mov    %rbx,%rdi
    d687:	e8 f4 7c ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    d68c:	bf 28 00 00 00       	mov    $0x28,%edi
    d691:	e8 3a 7a ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d696:	48 89 c3             	mov    %rax,%rbx
    d699:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d69d:	48 89 c6             	mov    %rax,%rsi
    d6a0:	48 89 df             	mov    %rbx,%rdi
    d6a3:	e8 b4 b2 ff ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
    d6a8:	48 8d 05 b5 e6 ff ff 	lea    -0x194b(%rip),%rax        # bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    d6af:	48 89 c2             	mov    %rax,%rdx
    d6b2:	48 8d 05 67 a4 02 00 	lea    0x2a467(%rip),%rax        # 37b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d6b9:	48 89 c6             	mov    %rax,%rsi
    d6bc:	48 89 df             	mov    %rbx,%rdi
    d6bf:	e8 bc 7c ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    d6c4:	bf 28 00 00 00       	mov    $0x28,%edi
    d6c9:	e8 02 7a ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d6ce:	48 89 c3             	mov    %rax,%rbx
    d6d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d6d5:	48 89 c6             	mov    %rax,%rsi
    d6d8:	48 89 df             	mov    %rbx,%rdi
    d6db:	e8 4e b3 ff ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
    d6e0:	48 8d 05 0d e6 ff ff 	lea    -0x19f3(%rip),%rax        # bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    d6e7:	48 89 c2             	mov    %rax,%rdx
    d6ea:	48 8d 05 17 a4 02 00 	lea    0x2a417(%rip),%rax        # 37b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d6f1:	48 89 c6             	mov    %rax,%rsi
    d6f4:	48 89 df             	mov    %rbx,%rdi
    d6f7:	e8 84 7c ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    d6fc:	bf 28 00 00 00       	mov    $0x28,%edi
    d701:	e8 ca 79 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d706:	48 89 c3             	mov    %rax,%rbx
    d709:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d70d:	48 89 c6             	mov    %rax,%rsi
    d710:	48 89 df             	mov    %rbx,%rdi
    d713:	e8 e8 b3 ff ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
    d718:	48 8d 05 65 e5 ff ff 	lea    -0x1a9b(%rip),%rax        # bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    d71f:	48 89 c2             	mov    %rax,%rdx
    d722:	48 8d 05 c7 a3 02 00 	lea    0x2a3c7(%rip),%rax        # 37af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d729:	48 89 c6             	mov    %rax,%rsi
    d72c:	48 89 df             	mov    %rbx,%rdi
    d72f:	e8 4c 7c ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    d734:	bf 28 00 00 00       	mov    $0x28,%edi
    d739:	e8 92 79 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d73e:	48 89 c3             	mov    %rax,%rbx
    d741:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d745:	48 89 c6             	mov    %rax,%rsi
    d748:	48 89 df             	mov    %rbx,%rdi
    d74b:	e8 82 b4 ff ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
    d750:	48 8d 05 bd e4 ff ff 	lea    -0x1b43(%rip),%rax        # bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    d757:	48 89 c2             	mov    %rax,%rdx
    d75a:	48 8d 05 77 a3 02 00 	lea    0x2a377(%rip),%rax        # 37ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d761:	48 89 c6             	mov    %rax,%rsi
    d764:	48 89 df             	mov    %rbx,%rdi
    d767:	e8 14 7c ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    d76c:	bf 28 00 00 00       	mov    $0x28,%edi
    d771:	e8 5a 79 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d776:	48 89 c3             	mov    %rax,%rbx
    d779:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d77d:	48 89 c6             	mov    %rax,%rsi
    d780:	48 89 df             	mov    %rbx,%rdi
    d783:	e8 1c b5 ff ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
    d788:	48 8d 05 15 e4 ff ff 	lea    -0x1beb(%rip),%rax        # bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    d78f:	48 89 c2             	mov    %rax,%rdx
    d792:	48 8d 05 27 a3 02 00 	lea    0x2a327(%rip),%rax        # 37ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d799:	48 89 c6             	mov    %rax,%rsi
    d79c:	48 89 df             	mov    %rbx,%rdi
    d79f:	e8 dc 7b ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    d7a4:	bf 28 00 00 00       	mov    $0x28,%edi
    d7a9:	e8 22 79 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d7ae:	48 89 c3             	mov    %rax,%rbx
    d7b1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d7b5:	48 89 c6             	mov    %rax,%rsi
    d7b8:	48 89 df             	mov    %rbx,%rdi
    d7bb:	e8 b6 b5 ff ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
    d7c0:	48 8d 05 6d e3 ff ff 	lea    -0x1c93(%rip),%rax        # bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    d7c7:	48 89 c2             	mov    %rax,%rdx
    d7ca:	48 8d 05 d7 a2 02 00 	lea    0x2a2d7(%rip),%rax        # 37aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d7d1:	48 89 c6             	mov    %rax,%rsi
    d7d4:	48 89 df             	mov    %rbx,%rdi
    d7d7:	e8 a4 7b ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    d7dc:	bf 28 00 00 00       	mov    $0x28,%edi
    d7e1:	e8 ea 78 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d7e6:	48 89 c3             	mov    %rax,%rbx
    d7e9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d7ed:	48 89 c6             	mov    %rax,%rsi
    d7f0:	48 89 df             	mov    %rbx,%rdi
    d7f3:	e8 50 b6 ff ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
    d7f8:	48 8d 05 c5 e2 ff ff 	lea    -0x1d3b(%rip),%rax        # bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    d7ff:	48 89 c2             	mov    %rax,%rdx
    d802:	48 8d 05 87 a2 02 00 	lea    0x2a287(%rip),%rax        # 37a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    d809:	48 89 c6             	mov    %rax,%rsi
    d80c:	48 89 df             	mov    %rbx,%rdi
    d80f:	e8 6c 7b ff ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
    d814:	bf 28 00 00 00       	mov    $0x28,%edi
    d819:	e8 b2 78 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    d81e:	48 89 c3             	mov    %rax,%rbx
    d821:	8b 45 cc             	mov    -0x34(%rbp),%eax
    d824:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    d827:	0f b6 05 2a ab 02 00 	movzbl 0x2ab2a(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    d82e:	84 c0                	test   %al,%al
    d830:	0f 94 c0             	sete   %al
    d833:	84 c0                	test   %al,%al
    d835:	74 4a                	je     d881 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    d837:	48 8d 05 1a ab 02 00 	lea    0x2ab1a(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    d83e:	48 89 c7             	mov    %rax,%rdi
    d841:	e8 7a 7b ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    d846:	85 c0                	test   %eax,%eax
    d848:	0f 95 c0             	setne  %al
    d84b:	84 c0                	test   %al,%al
    d84d:	74 32                	je     d881 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    d84f:	48 8d 05 a2 a9 02 00 	lea    0x2a9a2(%rip),%rax        # 381f8 <__dso_handle>
    d856:	48 89 c2             	mov    %rax,%rdx
    d859:	48 8d 05 a0 a9 02 00 	lea    0x2a9a0(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    d860:	48 89 c6             	mov    %rax,%rsi
    d863:	48 8d 05 ba ed ff ff 	lea    -0x1246(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    d86a:	48 89 c7             	mov    %rax,%rdi
    d86d:	e8 5e 79 ff ff       	call   51d0 <__cxa_atexit@plt>
    d872:	48 8d 05 df aa 02 00 	lea    0x2aadf(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
    d879:	48 89 c7             	mov    %rax,%rdi
    d87c:	e8 7f 78 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    d881:	48 8d 15 78 a9 02 00 	lea    0x2a978(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    d888:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    d88b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    d88f:	89 ce                	mov    %ecx,%esi
    d891:	48 89 c7             	mov    %rax,%rdi
    d894:	e8 6f 8a ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    d899:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d89d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
    d8a1:	48 89 c6             	mov    %rax,%rsi
    d8a4:	48 89 d7             	mov    %rdx,%rdi
    d8a7:	89 f1                	mov    %esi,%ecx
    d8a9:	48 89 d0             	mov    %rdx,%rax
    d8ac:	89 ce                	mov    %ecx,%esi
    d8ae:	48 89 c2             	mov    %rax,%rdx
    d8b1:	48 89 df             	mov    %rbx,%rdi
    d8b4:	e8 57 9f ff ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
    d8b9:	48 8d 05 86 a0 ff ff 	lea    -0x5f7a(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
    d8c0:	48 89 c2             	mov    %rax,%rdx
    d8c3:	48 8d 05 36 a4 02 00 	lea    0x2a436(%rip),%rax        # 37d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
    d8ca:	48 89 c6             	mov    %rax,%rsi
    d8cd:	48 89 df             	mov    %rbx,%rdi
    d8d0:	e8 ab 7a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    d8d5:	49 89 c4             	mov    %rax,%r12
    d8d8:	48 89 df             	mov    %rbx,%rdi
    d8db:	e8 70 78 ff ff       	call   5150 <__cxa_free_exception@plt>
    d8e0:	4c 89 e0             	mov    %r12,%rax
    d8e3:	48 89 c7             	mov    %rax,%rdi
    d8e6:	e8 b5 7a ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    d8eb:	49 89 c4             	mov    %rax,%r12
    d8ee:	48 89 df             	mov    %rbx,%rdi
    d8f1:	e8 5a 78 ff ff       	call   5150 <__cxa_free_exception@plt>
    d8f6:	4c 89 e0             	mov    %r12,%rax
    d8f9:	48 89 c7             	mov    %rax,%rdi
    d8fc:	e8 9f 7a ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    d901:	49 89 c4             	mov    %rax,%r12
    d904:	48 89 df             	mov    %rbx,%rdi
    d907:	e8 44 78 ff ff       	call   5150 <__cxa_free_exception@plt>
    d90c:	4c 89 e0             	mov    %r12,%rax
    d90f:	48 89 c7             	mov    %rax,%rdi
    d912:	e8 89 7a ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    d917:	49 89 c4             	mov    %rax,%r12
    d91a:	48 89 df             	mov    %rbx,%rdi
    d91d:	e8 2e 78 ff ff       	call   5150 <__cxa_free_exception@plt>
    d922:	4c 89 e0             	mov    %r12,%rax
    d925:	48 89 c7             	mov    %rax,%rdi
    d928:	e8 73 7a ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    d92d:	49 89 c4             	mov    %rax,%r12
    d930:	48 89 df             	mov    %rbx,%rdi
    d933:	e8 18 78 ff ff       	call   5150 <__cxa_free_exception@plt>
    d938:	4c 89 e0             	mov    %r12,%rax
    d93b:	48 89 c7             	mov    %rax,%rdi
    d93e:	e8 5d 7a ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    d943:	49 89 c4             	mov    %rax,%r12
    d946:	48 89 df             	mov    %rbx,%rdi
    d949:	e8 02 78 ff ff       	call   5150 <__cxa_free_exception@plt>
    d94e:	4c 89 e0             	mov    %r12,%rax
    d951:	48 89 c7             	mov    %rax,%rdi
    d954:	e8 47 7a ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    d959:	49 89 c4             	mov    %rax,%r12
    d95c:	48 89 df             	mov    %rbx,%rdi
    d95f:	e8 ec 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    d964:	4c 89 e0             	mov    %r12,%rax
    d967:	48 89 c7             	mov    %rax,%rdi
    d96a:	e8 31 7a ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    d96f:	49 89 c4             	mov    %rax,%r12
    d972:	48 89 df             	mov    %rbx,%rdi
    d975:	e8 d6 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    d97a:	4c 89 e0             	mov    %r12,%rax
    d97d:	48 89 c7             	mov    %rax,%rdi
    d980:	e8 1b 7a ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    d985:	49 89 c4             	mov    %rax,%r12
    d988:	48 89 df             	mov    %rbx,%rdi
    d98b:	e8 c0 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    d990:	4c 89 e0             	mov    %r12,%rax
    d993:	48 89 c7             	mov    %rax,%rdi
    d996:	e8 05 7a ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    d99b:	49 89 c4             	mov    %rax,%r12
    d99e:	48 89 df             	mov    %rbx,%rdi
    d9a1:	e8 aa 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    d9a6:	4c 89 e0             	mov    %r12,%rax
    d9a9:	48 89 c7             	mov    %rax,%rdi
    d9ac:	e8 ef 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    d9b1:	49 89 c4             	mov    %rax,%r12
    d9b4:	48 89 df             	mov    %rbx,%rdi
    d9b7:	e8 94 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    d9bc:	4c 89 e0             	mov    %r12,%rax
    d9bf:	48 89 c7             	mov    %rax,%rdi
    d9c2:	e8 d9 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    d9c7:	49 89 c4             	mov    %rax,%r12
    d9ca:	48 89 df             	mov    %rbx,%rdi
    d9cd:	e8 7e 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    d9d2:	4c 89 e0             	mov    %r12,%rax
    d9d5:	48 89 c7             	mov    %rax,%rdi
    d9d8:	e8 c3 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    d9dd:	49 89 c4             	mov    %rax,%r12
    d9e0:	48 89 df             	mov    %rbx,%rdi
    d9e3:	e8 68 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    d9e8:	4c 89 e0             	mov    %r12,%rax
    d9eb:	48 89 c7             	mov    %rax,%rdi
    d9ee:	e8 ad 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    d9f3:	49 89 c4             	mov    %rax,%r12
    d9f6:	48 89 df             	mov    %rbx,%rdi
    d9f9:	e8 52 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    d9fe:	4c 89 e0             	mov    %r12,%rax
    da01:	48 89 c7             	mov    %rax,%rdi
    da04:	e8 97 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    da09:	49 89 c4             	mov    %rax,%r12
    da0c:	48 89 df             	mov    %rbx,%rdi
    da0f:	e8 3c 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    da14:	4c 89 e0             	mov    %r12,%rax
    da17:	48 89 c7             	mov    %rax,%rdi
    da1a:	e8 81 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    da1f:	49 89 c4             	mov    %rax,%r12
    da22:	48 89 df             	mov    %rbx,%rdi
    da25:	e8 26 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    da2a:	4c 89 e0             	mov    %r12,%rax
    da2d:	48 89 c7             	mov    %rax,%rdi
    da30:	e8 6b 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    da35:	49 89 c4             	mov    %rax,%r12
    da38:	48 89 df             	mov    %rbx,%rdi
    da3b:	e8 10 77 ff ff       	call   5150 <__cxa_free_exception@plt>
    da40:	4c 89 e0             	mov    %r12,%rax
    da43:	48 89 c7             	mov    %rax,%rdi
    da46:	e8 55 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    da4b:	49 89 c4             	mov    %rax,%r12
    da4e:	48 89 df             	mov    %rbx,%rdi
    da51:	e8 fa 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    da56:	4c 89 e0             	mov    %r12,%rax
    da59:	48 89 c7             	mov    %rax,%rdi
    da5c:	e8 3f 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    da61:	49 89 c4             	mov    %rax,%r12
    da64:	48 89 df             	mov    %rbx,%rdi
    da67:	e8 e4 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    da6c:	4c 89 e0             	mov    %r12,%rax
    da6f:	48 89 c7             	mov    %rax,%rdi
    da72:	e8 29 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    da77:	49 89 c4             	mov    %rax,%r12
    da7a:	48 89 df             	mov    %rbx,%rdi
    da7d:	e8 ce 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    da82:	4c 89 e0             	mov    %r12,%rax
    da85:	48 89 c7             	mov    %rax,%rdi
    da88:	e8 13 79 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    da8d:	49 89 c4             	mov    %rax,%r12
    da90:	48 89 df             	mov    %rbx,%rdi
    da93:	e8 b8 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    da98:	4c 89 e0             	mov    %r12,%rax
    da9b:	48 89 c7             	mov    %rax,%rdi
    da9e:	e8 fd 78 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    daa3:	49 89 c4             	mov    %rax,%r12
    daa6:	48 89 df             	mov    %rbx,%rdi
    daa9:	e8 a2 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    daae:	4c 89 e0             	mov    %r12,%rax
    dab1:	48 89 c7             	mov    %rax,%rdi
    dab4:	e8 e7 78 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    dab9:	49 89 c4             	mov    %rax,%r12
    dabc:	48 89 df             	mov    %rbx,%rdi
    dabf:	e8 8c 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    dac4:	4c 89 e0             	mov    %r12,%rax
    dac7:	48 89 c7             	mov    %rax,%rdi
    daca:	e8 d1 78 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    dacf:	49 89 c4             	mov    %rax,%r12
    dad2:	48 89 df             	mov    %rbx,%rdi
    dad5:	e8 76 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    dada:	4c 89 e0             	mov    %r12,%rax
    dadd:	48 89 c7             	mov    %rax,%rdi
    dae0:	e8 bb 78 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    dae5:	49 89 c4             	mov    %rax,%r12
    dae8:	48 89 df             	mov    %rbx,%rdi
    daeb:	e8 60 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    daf0:	4c 89 e0             	mov    %r12,%rax
    daf3:	48 89 c7             	mov    %rax,%rdi
    daf6:	e8 a5 78 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    dafb:	49 89 c4             	mov    %rax,%r12
    dafe:	48 89 df             	mov    %rbx,%rdi
    db01:	e8 4a 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    db06:	4c 89 e0             	mov    %r12,%rax
    db09:	48 89 c7             	mov    %rax,%rdi
    db0c:	e8 8f 78 ff ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
    db11:	49 89 c4             	mov    %rax,%r12
    db14:	48 89 df             	mov    %rbx,%rdi
    db17:	e8 34 76 ff ff       	call   5150 <__cxa_free_exception@plt>
    db1c:	4c 89 e0             	mov    %r12,%rax
    db1f:	48 89 c7             	mov    %rax,%rdi
    db22:	e8 79 78 ff ff       	call   53a0 <_Unwind_Resume@plt>

000000000000db27 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE>:
#include <optional>

namespace rtvc {

DeviceWrapper makeLogicalDevice(const vk::raii::Instance &instance,
                                const vk::raii::SurfaceKHR &surface) {
    db27:	55                   	push   %rbp
    db28:	48 89 e5             	mov    %rsp,%rbp
    db2b:	41 57                	push   %r15
    db2d:	41 56                	push   %r14
    db2f:	41 55                	push   %r13
    db31:	41 54                	push   %r12
    db33:	53                   	push   %rbx
    db34:	48 81 ec b8 07 00 00 	sub    $0x7b8,%rsp
    db3b:	48 89 bd 38 f8 ff ff 	mov    %rdi,-0x7c8(%rbp)
    db42:	48 89 b5 30 f8 ff ff 	mov    %rsi,-0x7d0(%rbp)
    db49:	48 89 95 28 f8 ff ff 	mov    %rdx,-0x7d8(%rbp)
  static const std::vector<const char *> requiredExtensions = {
      VK_KHR_SWAPCHAIN_EXTENSION_NAME,
  };
    db50:	0f b6 05 21 a8 02 00 	movzbl 0x2a821(%rip),%eax        # 38378 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    db57:	84 c0                	test   %al,%al
    db59:	0f 94 c0             	sete   %al
    db5c:	84 c0                	test   %al,%al
    db5e:	0f 84 b9 00 00 00    	je     dc1d <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xf6>
    db64:	48 8d 05 0d a8 02 00 	lea    0x2a80d(%rip),%rax        # 38378 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    db6b:	48 89 c7             	mov    %rax,%rdi
    db6e:	e8 4d 78 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    db73:	85 c0                	test   %eax,%eax
    db75:	0f 95 c0             	setne  %al
    db78:	84 c0                	test   %al,%al
    db7a:	0f 84 9d 00 00 00    	je     dc1d <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xf6>
    db80:	c6 85 27 f8 ff ff 00 	movb   $0x0,-0x7d9(%rbp)
    db87:	48 8d 05 23 b0 01 00 	lea    0x1b023(%rip),%rax        # 28bb1 <_ZNSt8__detailL19__atomic_spin_countE+0x347d>
    db8e:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
    db95:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
    db9c:	49 89 c6             	mov    %rax,%r14
    db9f:	41 bf 01 00 00 00    	mov    $0x1,%r15d
    dba5:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    dbac:	48 89 c7             	mov    %rax,%rdi
    dbaf:	e8 0a 8c 00 00       	call   167be <_ZNSaIPKcEC1Ev>
    dbb4:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    dbbb:	4c 89 f6             	mov    %r14,%rsi
    dbbe:	4c 89 ff             	mov    %r15,%rdi
    dbc1:	4c 89 f1             	mov    %r14,%rcx
    dbc4:	4c 89 fb             	mov    %r15,%rbx
    dbc7:	48 89 da             	mov    %rbx,%rdx
    dbca:	48 89 c1             	mov    %rax,%rcx
    dbcd:	48 8d 05 8c a7 02 00 	lea    0x2a78c(%rip),%rax        # 38360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    dbd4:	48 89 c7             	mov    %rax,%rdi
    dbd7:	e8 5a 8b 00 00       	call   16736 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    dbdc:	48 8d 05 15 a6 02 00 	lea    0x2a615(%rip),%rax        # 381f8 <__dso_handle>
    dbe3:	48 89 c2             	mov    %rax,%rdx
    dbe6:	48 8d 05 73 a7 02 00 	lea    0x2a773(%rip),%rax        # 38360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    dbed:	48 89 c6             	mov    %rax,%rsi
    dbf0:	48 8d 05 35 a0 00 00 	lea    0xa035(%rip),%rax        # 17c2c <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    dbf7:	48 89 c7             	mov    %rax,%rdi
    dbfa:	e8 d1 75 ff ff       	call   51d0 <__cxa_atexit@plt>
    dbff:	48 8d 05 72 a7 02 00 	lea    0x2a772(%rip),%rax        # 38378 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    dc06:	48 89 c7             	mov    %rax,%rdi
    dc09:	e8 f2 74 ff ff       	call   5100 <__cxa_guard_release@plt>
    dc0e:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    dc15:	48 89 c7             	mov    %rax,%rdi
    dc18:	e8 c9 8b 00 00       	call   167e6 <_ZNSaIPKcED1Ev>
  static const std::vector<const char *> instanceLayers = {
      validationLayerName.data(),
      mangohudLayerName.data(),
  };
    dc1d:	0f b6 05 74 a7 02 00 	movzbl 0x2a774(%rip),%eax        # 38398 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    dc24:	84 c0                	test   %al,%al
    dc26:	0f 94 c0             	sete   %al
    dc29:	84 c0                	test   %al,%al
    dc2b:	0f 84 c6 00 00 00    	je     dcf7 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1d0>
    dc31:	48 8d 05 60 a7 02 00 	lea    0x2a760(%rip),%rax        # 38398 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    dc38:	48 89 c7             	mov    %rax,%rdi
    dc3b:	e8 80 77 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    dc40:	85 c0                	test   %eax,%eax
    dc42:	0f 95 c0             	setne  %al
    dc45:	84 c0                	test   %al,%al
    dc47:	0f 84 aa 00 00 00    	je     dcf7 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1d0>
    dc4d:	41 be 00 00 00 00    	mov    $0x0,%r14d
    dc53:	48 8d 05 68 af 01 00 	lea    0x1af68(%rip),%rax        # 28bc2 <_ZNSt8__detailL19__atomic_spin_countE+0x348e>
    dc5a:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
    dc61:	48 8d 05 76 af 01 00 	lea    0x1af76(%rip),%rax        # 28bde <_ZNSt8__detailL19__atomic_spin_countE+0x34aa>
    dc68:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
    dc6f:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
    dc76:	49 89 c4             	mov    %rax,%r12
    dc79:	41 bd 02 00 00 00    	mov    $0x2,%r13d
    dc7f:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    dc86:	48 89 c7             	mov    %rax,%rdi
    dc89:	e8 30 8b 00 00       	call   167be <_ZNSaIPKcEC1Ev>
    dc8e:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    dc95:	4c 89 e6             	mov    %r12,%rsi
    dc98:	4c 89 ef             	mov    %r13,%rdi
    dc9b:	4c 89 e1             	mov    %r12,%rcx
    dc9e:	4c 89 eb             	mov    %r13,%rbx
    dca1:	48 89 da             	mov    %rbx,%rdx
    dca4:	48 89 c1             	mov    %rax,%rcx
    dca7:	48 8d 05 d2 a6 02 00 	lea    0x2a6d2(%rip),%rax        # 38380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    dcae:	48 89 c7             	mov    %rax,%rdi
    dcb1:	e8 80 8a 00 00       	call   16736 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    dcb6:	48 8d 05 3b a5 02 00 	lea    0x2a53b(%rip),%rax        # 381f8 <__dso_handle>
    dcbd:	48 89 c2             	mov    %rax,%rdx
    dcc0:	48 8d 05 b9 a6 02 00 	lea    0x2a6b9(%rip),%rax        # 38380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    dcc7:	48 89 c6             	mov    %rax,%rsi
    dcca:	48 8d 05 5b 9f 00 00 	lea    0x9f5b(%rip),%rax        # 17c2c <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    dcd1:	48 89 c7             	mov    %rax,%rdi
    dcd4:	e8 f7 74 ff ff       	call   51d0 <__cxa_atexit@plt>
    dcd9:	48 8d 05 b8 a6 02 00 	lea    0x2a6b8(%rip),%rax        # 38398 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    dce0:	48 89 c7             	mov    %rax,%rdi
    dce3:	e8 18 74 ff ff       	call   5100 <__cxa_guard_release@plt>
    dce8:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    dcef:	48 89 c7             	mov    %rax,%rdi
    dcf2:	e8 ef 8a 00 00       	call   167e6 <_ZNSaIPKcED1Ev>

  vk::raii::PhysicalDevices physicalDevices{instance};
    dcf7:	48 8b 95 30 f8 ff ff 	mov    -0x7d0(%rbp),%rdx
    dcfe:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    dd05:	48 89 d6             	mov    %rdx,%rsi
    dd08:	48 89 c7             	mov    %rax,%rdi
    dd0b:	e8 e2 83 00 00       	call   160f2 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE>
  for (const auto &physicalDevice : physicalDevices) {
    dd10:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    dd17:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    dd1b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    dd1f:	48 89 c7             	mov    %rax,%rdi
    dd22:	e8 49 9f 00 00       	call   17c70 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE5beginEv>
    dd27:	48 89 85 78 fd ff ff 	mov    %rax,-0x288(%rbp)
    dd2e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    dd32:	48 89 c7             	mov    %rax,%rdi
    dd35:	e8 5c 9f 00 00       	call   17c96 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>
    dd3a:	48 89 85 70 fd ff ff 	mov    %rax,-0x290(%rbp)
    dd41:	e9 b3 10 00 00       	jmp    edf9 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12d2>
    dd46:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    dd4d:	48 89 c7             	mov    %rax,%rdi
    dd50:	e8 67 90 00 00       	call   16dbc <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEdeEv>
    dd55:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    dd59:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    dd5d:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
      return imageFormatProperties;
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE VULKAN_HPP_NAMESPACE::PhysicalDeviceProperties PhysicalDevice::getProperties() const VULKAN_HPP_NOEXCEPT
    {
      VULKAN_HPP_NAMESPACE::PhysicalDeviceProperties properties;
    dd64:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    dd6b:	b8 00 00 00 00       	mov    $0x0,%eax
    dd70:	b9 67 00 00 00       	mov    $0x67,%ecx
    dd75:	48 89 d7             	mov    %rdx,%rdi
    dd78:	f3 48 ab             	rep stos %rax,%es:(%rdi)
      getDispatcher()->vkGetPhysicalDeviceProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    dd7b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    dd82:	48 89 c7             	mov    %rax,%rdi
    dd85:	e8 48 82 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    dd8a:	48 8b 58 38          	mov    0x38(%rax),%rbx
    dd8e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    dd95:	48 89 c7             	mov    %rax,%rdi
    dd98:	e8 5d 14 00 00       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    dd9d:	48 89 c2             	mov    %rax,%rdx
    dda0:	48 8d 85 20 f9 ff ff 	lea    -0x6e0(%rbp),%rax
    dda7:	48 89 c6             	mov    %rax,%rsi
    ddaa:	48 89 d7             	mov    %rdx,%rdi
    ddad:	ff d3                	call   *%rbx
                                                      reinterpret_cast<VkPhysicalDeviceProperties *>( &properties ) );

      return properties;
    ddaf:	90                   	nop
    if (auto properties = physicalDevice.getProperties();
        properties.deviceType != vk::PhysicalDeviceType::eDiscreteGpu) {
    ddb0:	8b 85 30 f9 ff ff    	mov    -0x6d0(%rbp),%eax
    if (auto properties = physicalDevice.getProperties();
    ddb6:	83 f8 02             	cmp    $0x2,%eax
    ddb9:	0f 85 14 10 00 00    	jne    edd3 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12ac>
      continue;
    }

    bool extensionsSupported = true;
    ddbf:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
    auto supportedExtensions =
        physicalDevice.enumerateDeviceExtensionProperties();
    ddc3:	48 8d 85 c8 fd ff ff 	lea    -0x238(%rbp),%rax
    ddca:	be 00 00 00 00       	mov    $0x0,%esi
    ddcf:	48 89 c7             	mov    %rax,%rdi
    ddd2:	e8 09 9f 00 00       	call   17ce0 <_ZN2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1EDn>
    ddd7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    dddb:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    dde2:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
    dde9:	48 89 85 b0 fc ff ff 	mov    %rax,-0x350(%rbp)
    ddf0:	48 8d 9d 50 fd ff ff 	lea    -0x2b0(%rbp),%rbx
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE std::vector<VULKAN_HPP_NAMESPACE::ExtensionProperties>
                                           PhysicalDevice::enumerateDeviceExtensionProperties( Optional<const std::string> layerName ) const
    {
      std::vector<VULKAN_HPP_NAMESPACE::ExtensionProperties> properties;
    ddf7:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ddfb:	0f 11 03             	movups %xmm0,(%rbx)
    ddfe:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      uint32_t                                               propertyCount;
      VkResult                                               result;
      do
      {
        result = getDispatcher()->vkEnumerateDeviceExtensionProperties(
    de03:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    de0a:	48 89 c7             	mov    %rax,%rdi
    de0d:	e8 c0 81 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    de12:	4c 8b 60 60          	mov    0x60(%rax),%r12
          static_cast<VkPhysicalDevice>( m_physicalDevice ), layerName ? layerName->c_str() : nullptr, &propertyCount, nullptr );
    de16:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    de1d:	48 89 c7             	mov    %rax,%rdi
    de20:	e8 57 9a 00 00       	call   1787c <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvbEv>
        result = getDispatcher()->vkEnumerateDeviceExtensionProperties(
    de25:	84 c0                	test   %al,%al
    de27:	74 1c                	je     de45 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x31e>
          static_cast<VkPhysicalDevice>( m_physicalDevice ), layerName ? layerName->c_str() : nullptr, &propertyCount, nullptr );
    de29:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    de30:	48 89 c7             	mov    %rax,%rdi
    de33:	e8 32 9a 00 00       	call   1786a <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv>
    de38:	48 89 c7             	mov    %rax,%rdi
    de3b:	e8 7e c0 ff ff       	call   9ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
    de40:	49 89 c5             	mov    %rax,%r13
    de43:	eb 06                	jmp    de4b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x324>
        result = getDispatcher()->vkEnumerateDeviceExtensionProperties(
    de45:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    de4b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    de52:	48 89 c7             	mov    %rax,%rdi
    de55:	e8 a0 13 00 00       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    de5a:	48 89 c7             	mov    %rax,%rdi
    de5d:	48 8d 85 ac fc ff ff 	lea    -0x354(%rbp),%rax
    de64:	b9 00 00 00 00       	mov    $0x0,%ecx
    de69:	48 89 c2             	mov    %rax,%rdx
    de6c:	4c 89 ee             	mov    %r13,%rsi
    de6f:	41 ff d4             	call   *%r12
    de72:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if ( ( result == VK_SUCCESS ) && propertyCount )
    de78:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
    de7f:	0f 85 9f 00 00 00    	jne    df24 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3fd>
    de85:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    de8b:	85 c0                	test   %eax,%eax
    de8d:	0f 84 91 00 00 00    	je     df24 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3fd>
        {
          properties.resize( propertyCount );
    de93:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    de99:	89 c0                	mov    %eax,%eax
    de9b:	48 89 c6             	mov    %rax,%rsi
    de9e:	48 89 df             	mov    %rbx,%rdi
    dea1:	e8 ee 99 00 00       	call   17894 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm>
          result = getDispatcher()->vkEnumerateDeviceExtensionProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    dea6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    dead:	48 89 c7             	mov    %rax,%rdi
    deb0:	e8 1d 81 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    deb5:	4c 8b 60 60          	mov    0x60(%rax),%r12
                                                                          layerName ? layerName->c_str() : nullptr,
                                                                          &propertyCount,
                                                                          reinterpret_cast<VkExtensionProperties *>( properties.data() ) );
    deb9:	48 89 df             	mov    %rbx,%rdi
    debc:	e8 65 9a 00 00       	call   17926 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4dataEv>
    dec1:	49 89 c6             	mov    %rax,%r14
                                                                          layerName ? layerName->c_str() : nullptr,
    dec4:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    decb:	48 89 c7             	mov    %rax,%rdi
    dece:	e8 a9 99 00 00       	call   1787c <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvbEv>
          result = getDispatcher()->vkEnumerateDeviceExtensionProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    ded3:	84 c0                	test   %al,%al
    ded5:	74 1c                	je     def3 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3cc>
                                                                          layerName ? layerName->c_str() : nullptr,
    ded7:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    dede:	48 89 c7             	mov    %rax,%rdi
    dee1:	e8 84 99 00 00       	call   1786a <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv>
    dee6:	48 89 c7             	mov    %rax,%rdi
    dee9:	e8 d0 bf ff ff       	call   9ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
    deee:	49 89 c5             	mov    %rax,%r13
    def1:	eb 06                	jmp    def9 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3d2>
          result = getDispatcher()->vkEnumerateDeviceExtensionProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    def3:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    def9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    df00:	48 89 c7             	mov    %rax,%rdi
    df03:	e8 f2 12 00 00       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    df08:	48 89 c7             	mov    %rax,%rdi
    df0b:	48 8d 85 ac fc ff ff 	lea    -0x354(%rbp),%rax
    df12:	4c 89 f1             	mov    %r14,%rcx
    df15:	48 89 c2             	mov    %rax,%rdx
    df18:	4c 89 ee             	mov    %r13,%rsi
    df1b:	41 ff d4             	call   *%r12
    df1e:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        }
      } while ( result == VK_INCOMPLETE );
    df24:	83 bd 5c ff ff ff 05 	cmpl   $0x5,-0xa4(%rbp)
    df2b:	0f 84 d2 fe ff ff    	je     de03 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x2dc>
    df31:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    df37:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
    df3d:	48 8d 05 b4 ac 01 00 	lea    0x1acb4(%rip),%rax        # 28bf8 <_ZNSt8__detailL19__atomic_spin_countE+0x34c4>
    df44:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    if ( result != Result::eSuccess )
    df4b:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
    df52:	74 17                	je     df6b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x444>
      throwResultException( result, message );
    df54:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    df5b:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
    df61:	48 89 d6             	mov    %rdx,%rsi
    df64:	89 c7                	mov    %eax,%edi
    df66:	e8 65 f1 ff ff       	call   d0d0 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    df6b:	90                   	nop
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::enumerateDeviceExtensionProperties" );
      VULKAN_HPP_ASSERT( propertyCount <= properties.size() );
    df6c:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    df72:	41 89 c4             	mov    %eax,%r12d
    df75:	48 89 df             	mov    %rbx,%rdi
    df78:	e8 cd 99 00 00       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
    df7d:	4c 39 e0             	cmp    %r12,%rax
    df80:	73 28                	jae    dfaa <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x483>
    df82:	48 8d 05 a7 ac 01 00 	lea    0x1aca7(%rip),%rax        # 28c30 <_ZNSt8__detailL19__atomic_spin_countE+0x34fc>
    df89:	48 89 c1             	mov    %rax,%rcx
    df8c:	ba a0 2a 00 00       	mov    $0x2aa0,%edx
    df91:	48 8d 05 e0 a9 01 00 	lea    0x1a9e0(%rip),%rax        # 28978 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
    df98:	48 89 c6             	mov    %rax,%rsi
    df9b:	48 8d 05 2e ad 01 00 	lea    0x1ad2e(%rip),%rax        # 28cd0 <_ZNSt8__detailL19__atomic_spin_countE+0x359c>
    dfa2:	48 89 c7             	mov    %rax,%rdi
    dfa5:	e8 66 71 ff ff       	call   5110 <__assert_fail@plt>
      if ( propertyCount < properties.size() )
    dfaa:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    dfb0:	41 89 c4             	mov    %eax,%r12d
    dfb3:	48 89 df             	mov    %rbx,%rdi
    dfb6:	e8 8f 99 00 00       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
    dfbb:	49 39 c4             	cmp    %rax,%r12
    dfbe:	0f 92 c0             	setb   %al
    dfc1:	84 c0                	test   %al,%al
    dfc3:	74 28                	je     dfed <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x4c6>
      {
        properties.resize( propertyCount );
    dfc5:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    dfcb:	89 c0                	mov    %eax,%eax
    dfcd:	48 89 c6             	mov    %rax,%rsi
    dfd0:	48 89 df             	mov    %rbx,%rdi
    dfd3:	e8 bc 98 00 00       	call   17894 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm>
      }
      return properties;
    dfd8:	eb 13                	jmp    dfed <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x4c6>
    }
    dfda:	49 89 c4             	mov    %rax,%r12
    dfdd:	48 89 df             	mov    %rbx,%rdi
    dfe0:	e8 41 98 00 00       	call   17826 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
    dfe5:	4c 89 e3             	mov    %r12,%rbx
    dfe8:	e9 85 10 00 00       	jmp    f072 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x154b>
      return properties;
    dfed:	90                   	nop
    std::map<std::string, uint32_t> extensionsMap{};
    dfee:	66 0f ef c0          	pxor   %xmm0,%xmm0
    dff2:	0f 29 85 70 f8 ff ff 	movaps %xmm0,-0x790(%rbp)
    dff9:	0f 29 85 80 f8 ff ff 	movaps %xmm0,-0x780(%rbp)
    e000:	0f 29 85 90 f8 ff ff 	movaps %xmm0,-0x770(%rbp)
    e007:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    e00e:	48 89 c7             	mov    %rax,%rdi
    e011:	e8 f0 8d 00 00       	call   16e06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>
    for (const auto &extension : supportedExtensions) {
    e016:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    e01d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    e021:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e025:	48 89 c7             	mov    %rax,%rdi
    e028:	e8 4b 9d 00 00       	call   17d78 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE5beginEv>
    e02d:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    e034:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e038:	48 89 c7             	mov    %rax,%rdi
    e03b:	e8 5e 9d 00 00       	call   17d9e <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE3endEv>
    e040:	48 89 85 98 fc ff ff 	mov    %rax,-0x368(%rbp)
    e047:	eb 6d                	jmp    e0b6 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x58f>
    e049:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
    e050:	48 89 c7             	mov    %rax,%rdi
    e053:	e8 2e 8e 00 00       	call   16e86 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
    e058:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
      extensionsMap[extension.extensionName]++;
    e05f:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    e066:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    e06d:	48 89 d6             	mov    %rdx,%rsi
    e070:	48 89 c7             	mov    %rax,%rdi
    e073:	e8 74 9d 00 00       	call   17dec <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv>
    e078:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
    e07f:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    e086:	48 89 d6             	mov    %rdx,%rsi
    e089:	48 89 c7             	mov    %rax,%rdi
    e08c:	e8 cd 9d 00 00       	call   17e5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e091:	8b 10                	mov    (%rax),%edx
    e093:	83 c2 01             	add    $0x1,%edx
    e096:	89 10                	mov    %edx,(%rax)
    e098:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    e09f:	48 89 c7             	mov    %rax,%rdi
    e0a2:	e8 31 be ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    for (const auto &extension : supportedExtensions) {
    e0a7:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
    e0ae:	48 89 c7             	mov    %rax,%rdi
    e0b1:	e8 12 9d 00 00       	call   17dc8 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEppEv>
    e0b6:	48 8d 95 98 fc ff ff 	lea    -0x368(%rbp),%rdx
    e0bd:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
    e0c4:	48 89 d6             	mov    %rdx,%rsi
    e0c7:	48 89 c7             	mov    %rax,%rdi
    e0ca:	e8 6e 8d 00 00       	call   16e3d <_ZN9__gnu_cxxeqIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    e0cf:	83 f0 01             	xor    $0x1,%eax
    e0d2:	84 c0                	test   %al,%al
    e0d4:	0f 85 6f ff ff ff    	jne    e049 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x522>
    }
    for (const auto &extension : requiredExtensions) {
    e0da:	48 8d 05 7f a2 02 00 	lea    0x2a27f(%rip),%rax        # 38360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    e0e1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    e0e5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    e0e9:	48 89 c7             	mov    %rax,%rdi
    e0ec:	e8 a7 8d 00 00       	call   16e98 <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>
    e0f1:	48 89 85 90 fc ff ff 	mov    %rax,-0x370(%rbp)
    e0f8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    e0fc:	48 89 c7             	mov    %rax,%rdi
    e0ff:	e8 d8 8d 00 00       	call   16edc <_ZNKSt6vectorIPKcSaIS1_EE3endEv>
    e104:	48 89 85 88 fc ff ff 	mov    %rax,-0x378(%rbp)
    e10b:	e9 0e 01 00 00       	jmp    e21e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x6f7>
    e110:	48 8d 85 90 fc ff ff 	lea    -0x370(%rbp),%rax
    e117:	48 89 c7             	mov    %rax,%rdi
    e11a:	e8 2f 8e 00 00       	call   16f4e <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>
    e11f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
      extensionsMap[extension]++;
    e126:	48 8d 85 1f fe ff ff 	lea    -0x1e1(%rbp),%rax
    e12d:	48 89 c7             	mov    %rax,%rdi
    e130:	e8 7b 72 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    e135:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    e13c:	48 8b 08             	mov    (%rax),%rcx
    e13f:	48 8d 95 1f fe ff ff 	lea    -0x1e1(%rbp),%rdx
    e146:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    e14d:	48 89 ce             	mov    %rcx,%rsi
    e150:	48 89 c7             	mov    %rax,%rdi
    e153:	e8 16 bf ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    e158:	48 8d 95 f0 fd ff ff 	lea    -0x210(%rbp),%rdx
    e15f:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    e166:	48 89 d6             	mov    %rdx,%rsi
    e169:	48 89 c7             	mov    %rax,%rdi
    e16c:	e8 ed 9c 00 00       	call   17e5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e171:	8b 10                	mov    (%rax),%edx
    e173:	83 c2 01             	add    $0x1,%edx
    e176:	89 10                	mov    %edx,(%rax)
    e178:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    e17f:	48 89 c7             	mov    %rax,%rdi
    e182:	e8 51 bd ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    e187:	48 8d 85 1f fe ff ff 	lea    -0x1e1(%rbp),%rax
    e18e:	48 89 c7             	mov    %rax,%rdi
    e191:	e8 da 70 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
      if (extensionsMap[extension] < 2) {
    e196:	48 8d 85 4f fe ff ff 	lea    -0x1b1(%rbp),%rax
    e19d:	48 89 c7             	mov    %rax,%rdi
    e1a0:	e8 0b 72 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    e1a5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    e1ac:	48 8b 08             	mov    (%rax),%rcx
    e1af:	48 8d 95 4f fe ff ff 	lea    -0x1b1(%rbp),%rdx
    e1b6:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    e1bd:	48 89 ce             	mov    %rcx,%rsi
    e1c0:	48 89 c7             	mov    %rax,%rdi
    e1c3:	e8 a6 be ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    e1c8:	48 8d 95 20 fe ff ff 	lea    -0x1e0(%rbp),%rdx
    e1cf:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    e1d6:	48 89 d6             	mov    %rdx,%rsi
    e1d9:	48 89 c7             	mov    %rax,%rdi
    e1dc:	e8 7d 9c 00 00       	call   17e5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e1e1:	8b 00                	mov    (%rax),%eax
    e1e3:	83 f8 01             	cmp    $0x1,%eax
    e1e6:	0f 96 c3             	setbe  %bl
    e1e9:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    e1f0:	48 89 c7             	mov    %rax,%rdi
    e1f3:	e8 e0 bc ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    e1f8:	48 8d 85 4f fe ff ff 	lea    -0x1b1(%rbp),%rax
    e1ff:	48 89 c7             	mov    %rax,%rdi
    e202:	e8 69 70 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    e207:	84 db                	test   %bl,%bl
    e209:	74 04                	je     e20f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x6e8>
        extensionsSupported = false;
    e20b:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
    for (const auto &extension : requiredExtensions) {
    e20f:	48 8d 85 90 fc ff ff 	lea    -0x370(%rbp),%rax
    e216:	48 89 c7             	mov    %rax,%rdi
    e219:	e8 44 9d 00 00       	call   17f62 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>
    e21e:	48 8d 95 88 fc ff ff 	lea    -0x378(%rbp),%rdx
    e225:	48 8d 85 90 fc ff ff 	lea    -0x370(%rbp),%rax
    e22c:	48 89 d6             	mov    %rdx,%rsi
    e22f:	48 89 c7             	mov    %rax,%rdi
    e232:	e8 ce 8c 00 00       	call   16f05 <_ZN9__gnu_cxxeqIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    e237:	83 f0 01             	xor    $0x1,%eax
    e23a:	84 c0                	test   %al,%al
    e23c:	0f 85 ce fe ff ff    	jne    e110 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x5e9>
      }
    }
    if (!extensionsSupported) {
    e242:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
    e246:	83 f0 01             	xor    $0x1,%eax
    e249:	84 c0                	test   %al,%al
    e24b:	74 0a                	je     e257 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x730>
      continue;
    e24d:	bb 00 00 00 00       	mov    $0x0,%ebx
    e252:	e9 48 0b 00 00       	jmp    ed9f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1278>
    }

    bool layerSupported = true;
    e257:	c6 45 ce 01          	movb   $0x1,-0x32(%rbp)
    e25b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e25f:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    e266:	48 8d 9d 30 fd ff ff 	lea    -0x2d0(%rbp),%rbx
      return properties;
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE std::vector<VULKAN_HPP_NAMESPACE::LayerProperties> PhysicalDevice::enumerateDeviceLayerProperties() const
    {
      std::vector<VULKAN_HPP_NAMESPACE::LayerProperties> properties;
    e26d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e271:	0f 11 03             	movups %xmm0,(%rbx)
    e274:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      uint32_t                                           propertyCount;
      VkResult                                           result;
      do
      {
        result = getDispatcher()->vkEnumerateDeviceLayerProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ), &propertyCount, nullptr );
    e279:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e280:	48 89 c7             	mov    %rax,%rdi
    e283:	e8 4a 7d 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e288:	4c 8b 60 68          	mov    0x68(%rax),%r12
    e28c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e293:	48 89 c7             	mov    %rax,%rdi
    e296:	e8 5f 0f 00 00       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e29b:	48 89 c1             	mov    %rax,%rcx
    e29e:	48 8d 85 b8 fc ff ff 	lea    -0x348(%rbp),%rax
    e2a5:	ba 00 00 00 00       	mov    $0x0,%edx
    e2aa:	48 89 c6             	mov    %rax,%rsi
    e2ad:	48 89 cf             	mov    %rcx,%rdi
    e2b0:	41 ff d4             	call   *%r12
    e2b3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        if ( ( result == VK_SUCCESS ) && propertyCount )
    e2b9:	83 bd 44 ff ff ff 00 	cmpl   $0x0,-0xbc(%rbp)
    e2c0:	75 66                	jne    e328 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x801>
    e2c2:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e2c8:	85 c0                	test   %eax,%eax
    e2ca:	74 5c                	je     e328 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x801>
        {
          properties.resize( propertyCount );
    e2cc:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e2d2:	89 c0                	mov    %eax,%eax
    e2d4:	48 89 c6             	mov    %rax,%rsi
    e2d7:	48 89 df             	mov    %rbx,%rdi
    e2da:	e8 41 97 00 00       	call   17a20 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
          result = getDispatcher()->vkEnumerateDeviceLayerProperties(
    e2df:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e2e6:	48 89 c7             	mov    %rax,%rdi
    e2e9:	e8 e4 7c 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e2ee:	4c 8b 60 68          	mov    0x68(%rax),%r12
            static_cast<VkPhysicalDevice>( m_physicalDevice ), &propertyCount, reinterpret_cast<VkLayerProperties *>( properties.data() ) );
    e2f2:	48 89 df             	mov    %rbx,%rdi
    e2f5:	e8 b8 97 00 00       	call   17ab2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE4dataEv>
    e2fa:	49 89 c5             	mov    %rax,%r13
          result = getDispatcher()->vkEnumerateDeviceLayerProperties(
    e2fd:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e304:	48 89 c7             	mov    %rax,%rdi
    e307:	e8 ee 0e 00 00       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e30c:	48 89 c1             	mov    %rax,%rcx
    e30f:	48 8d 85 b8 fc ff ff 	lea    -0x348(%rbp),%rax
    e316:	4c 89 ea             	mov    %r13,%rdx
    e319:	48 89 c6             	mov    %rax,%rsi
    e31c:	48 89 cf             	mov    %rcx,%rdi
    e31f:	41 ff d4             	call   *%r12
    e322:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        }
      } while ( result == VK_INCOMPLETE );
    e328:	83 bd 44 ff ff ff 05 	cmpl   $0x5,-0xbc(%rbp)
    e32f:	0f 84 44 ff ff ff    	je     e279 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x752>
    e335:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    e33b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
    e341:	48 8d 05 b0 a9 01 00 	lea    0x1a9b0(%rip),%rax        # 28cf8 <_ZNSt8__detailL19__atomic_spin_countE+0x35c4>
    e348:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    if ( result != Result::eSuccess )
    e34f:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)
    e356:	74 17                	je     e36f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x848>
      throwResultException( result, message );
    e358:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    e35f:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    e365:	48 89 d6             	mov    %rdx,%rsi
    e368:	89 c7                	mov    %eax,%edi
    e36a:	e8 61 ed ff ff       	call   d0d0 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    e36f:	90                   	nop
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::enumerateDeviceLayerProperties" );
      VULKAN_HPP_ASSERT( propertyCount <= properties.size() );
    e370:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e376:	41 89 c4             	mov    %eax,%r12d
    e379:	48 89 df             	mov    %rbx,%rdi
    e37c:	e8 55 97 00 00       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
    e381:	4c 39 e0             	cmp    %r12,%rax
    e384:	73 28                	jae    e3ae <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x887>
    e386:	48 8d 05 a3 a9 01 00 	lea    0x1a9a3(%rip),%rax        # 28d30 <_ZNSt8__detailL19__atomic_spin_countE+0x35fc>
    e38d:	48 89 c1             	mov    %rax,%rcx
    e390:	ba cf 2a 00 00       	mov    $0x2acf,%edx
    e395:	48 8d 05 dc a5 01 00 	lea    0x1a5dc(%rip),%rax        # 28978 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
    e39c:	48 89 c6             	mov    %rax,%rsi
    e39f:	48 8d 05 2a a9 01 00 	lea    0x1a92a(%rip),%rax        # 28cd0 <_ZNSt8__detailL19__atomic_spin_countE+0x359c>
    e3a6:	48 89 c7             	mov    %rax,%rdi
    e3a9:	e8 62 6d ff ff       	call   5110 <__assert_fail@plt>
      if ( propertyCount < properties.size() )
    e3ae:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e3b4:	41 89 c4             	mov    %eax,%r12d
    e3b7:	48 89 df             	mov    %rbx,%rdi
    e3ba:	e8 17 97 00 00       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
    e3bf:	49 39 c4             	cmp    %rax,%r12
    e3c2:	0f 92 c0             	setb   %al
    e3c5:	84 c0                	test   %al,%al
    e3c7:	74 28                	je     e3f1 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x8ca>
      {
        properties.resize( propertyCount );
    e3c9:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e3cf:	89 c0                	mov    %eax,%eax
    e3d1:	48 89 c6             	mov    %rax,%rsi
    e3d4:	48 89 df             	mov    %rbx,%rdi
    e3d7:	e8 44 96 00 00       	call   17a20 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
      }
      return properties;
    e3dc:	eb 13                	jmp    e3f1 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x8ca>
    }
    e3de:	49 89 c4             	mov    %rax,%r12
    e3e1:	48 89 df             	mov    %rbx,%rdi
    e3e4:	e8 f3 95 00 00       	call   179dc <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    e3e9:	4c 89 e3             	mov    %r12,%rbx
    e3ec:	e9 4e 0c 00 00       	jmp    f03f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      return properties;
    e3f1:	90                   	nop
    auto supportedLayers = physicalDevice.enumerateDeviceLayerProperties();
    std::map<std::string, uint32_t> layerMap{};
    e3f2:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e3f6:	0f 29 85 a0 f8 ff ff 	movaps %xmm0,-0x760(%rbp)
    e3fd:	0f 29 85 b0 f8 ff ff 	movaps %xmm0,-0x750(%rbp)
    e404:	0f 29 85 c0 f8 ff ff 	movaps %xmm0,-0x740(%rbp)
    e40b:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    e412:	48 89 c7             	mov    %rax,%rdi
    e415:	e8 ec 89 00 00       	call   16e06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>
    for (const auto &layer : supportedLayers) {
    e41a:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
    e421:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    e425:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    e429:	48 89 c7             	mov    %rax,%rdi
    e42c:	e8 51 9b 00 00       	call   17f82 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>
    e431:	48 89 85 80 fc ff ff 	mov    %rax,-0x380(%rbp)
    e438:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    e43c:	48 89 c7             	mov    %rax,%rdi
    e43f:	e8 64 9b 00 00       	call   17fa8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>
    e444:	48 89 85 78 fc ff ff 	mov    %rax,-0x388(%rbp)
    e44b:	eb 67                	jmp    e4b4 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x98d>
    e44d:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
    e454:	48 89 c7             	mov    %rax,%rdi
    e457:	e8 4c 8b 00 00       	call   16fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
    e45c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
      layerMap[layer.layerName]++;
    e460:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    e464:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    e46b:	48 89 d6             	mov    %rdx,%rsi
    e46e:	48 89 c7             	mov    %rax,%rdi
    e471:	e8 76 99 00 00       	call   17dec <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv>
    e476:	48 8d 95 50 fe ff ff 	lea    -0x1b0(%rbp),%rdx
    e47d:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    e484:	48 89 d6             	mov    %rdx,%rsi
    e487:	48 89 c7             	mov    %rax,%rdi
    e48a:	e8 cf 99 00 00       	call   17e5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e48f:	8b 10                	mov    (%rax),%edx
    e491:	83 c2 01             	add    $0x1,%edx
    e494:	89 10                	mov    %edx,(%rax)
    e496:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    e49d:	48 89 c7             	mov    %rax,%rdi
    e4a0:	e8 33 ba ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    for (const auto &layer : supportedLayers) {
    e4a5:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
    e4ac:	48 89 c7             	mov    %rax,%rdi
    e4af:	e8 1e 9b 00 00       	call   17fd2 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>
    e4b4:	48 8d 95 78 fc ff ff 	lea    -0x388(%rbp),%rdx
    e4bb:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
    e4c2:	48 89 d6             	mov    %rdx,%rsi
    e4c5:	48 89 c7             	mov    %rax,%rdi
    e4c8:	e8 92 8a 00 00       	call   16f5f <_ZN9__gnu_cxxeqIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    e4cd:	83 f0 01             	xor    $0x1,%eax
    e4d0:	84 c0                	test   %al,%al
    e4d2:	0f 85 75 ff ff ff    	jne    e44d <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x926>
    }
    for (const auto &layer : instanceLayers) {
    e4d8:	48 8d 05 a1 9e 02 00 	lea    0x29ea1(%rip),%rax        # 38380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    e4df:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    e4e3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    e4e7:	48 89 c7             	mov    %rax,%rdi
    e4ea:	e8 a9 89 00 00       	call   16e98 <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>
    e4ef:	48 89 85 70 fc ff ff 	mov    %rax,-0x390(%rbp)
    e4f6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    e4fa:	48 89 c7             	mov    %rax,%rdi
    e4fd:	e8 da 89 00 00       	call   16edc <_ZNKSt6vectorIPKcSaIS1_EE3endEv>
    e502:	48 89 85 68 fc ff ff 	mov    %rax,-0x398(%rbp)
    e509:	e9 05 01 00 00       	jmp    e613 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xaec>
    e50e:	48 8d 85 70 fc ff ff 	lea    -0x390(%rbp),%rax
    e515:	48 89 c7             	mov    %rax,%rdi
    e518:	e8 31 8a 00 00       	call   16f4e <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>
    e51d:	48 89 45 88          	mov    %rax,-0x78(%rbp)
      layerMap[layer]++;
    e521:	48 8d 85 9f fe ff ff 	lea    -0x161(%rbp),%rax
    e528:	48 89 c7             	mov    %rax,%rdi
    e52b:	e8 80 6e ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    e530:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e534:	48 8b 08             	mov    (%rax),%rcx
    e537:	48 8d 95 9f fe ff ff 	lea    -0x161(%rbp),%rdx
    e53e:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    e545:	48 89 ce             	mov    %rcx,%rsi
    e548:	48 89 c7             	mov    %rax,%rdi
    e54b:	e8 1e bb ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    e550:	48 8d 95 70 fe ff ff 	lea    -0x190(%rbp),%rdx
    e557:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    e55e:	48 89 d6             	mov    %rdx,%rsi
    e561:	48 89 c7             	mov    %rax,%rdi
    e564:	e8 f5 98 00 00       	call   17e5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e569:	8b 10                	mov    (%rax),%edx
    e56b:	83 c2 01             	add    $0x1,%edx
    e56e:	89 10                	mov    %edx,(%rax)
    e570:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    e577:	48 89 c7             	mov    %rax,%rdi
    e57a:	e8 59 b9 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    e57f:	48 8d 85 9f fe ff ff 	lea    -0x161(%rbp),%rax
    e586:	48 89 c7             	mov    %rax,%rdi
    e589:	e8 e2 6c ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
      if (layerMap[layer] < 2) {
    e58e:	48 8d 85 c3 fe ff ff 	lea    -0x13d(%rbp),%rax
    e595:	48 89 c7             	mov    %rax,%rdi
    e598:	e8 13 6e ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    e59d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e5a1:	48 8b 08             	mov    (%rax),%rcx
    e5a4:	48 8d 95 c3 fe ff ff 	lea    -0x13d(%rbp),%rdx
    e5ab:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    e5b2:	48 89 ce             	mov    %rcx,%rsi
    e5b5:	48 89 c7             	mov    %rax,%rdi
    e5b8:	e8 b1 ba ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    e5bd:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    e5c4:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    e5cb:	48 89 d6             	mov    %rdx,%rsi
    e5ce:	48 89 c7             	mov    %rax,%rdi
    e5d1:	e8 88 98 00 00       	call   17e5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e5d6:	8b 00                	mov    (%rax),%eax
    e5d8:	83 f8 01             	cmp    $0x1,%eax
    e5db:	0f 96 c3             	setbe  %bl
    e5de:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    e5e5:	48 89 c7             	mov    %rax,%rdi
    e5e8:	e8 eb b8 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    e5ed:	48 8d 85 c3 fe ff ff 	lea    -0x13d(%rbp),%rax
    e5f4:	48 89 c7             	mov    %rax,%rdi
    e5f7:	e8 74 6c ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    e5fc:	84 db                	test   %bl,%bl
    e5fe:	74 04                	je     e604 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xadd>
        layerSupported = false;
    e600:	c6 45 ce 00          	movb   $0x0,-0x32(%rbp)
    for (const auto &layer : instanceLayers) {
    e604:	48 8d 85 70 fc ff ff 	lea    -0x390(%rbp),%rax
    e60b:	48 89 c7             	mov    %rax,%rdi
    e60e:	e8 4f 99 00 00       	call   17f62 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>
    e613:	48 8d 95 68 fc ff ff 	lea    -0x398(%rbp),%rdx
    e61a:	48 8d 85 70 fc ff ff 	lea    -0x390(%rbp),%rax
    e621:	48 89 d6             	mov    %rdx,%rsi
    e624:	48 89 c7             	mov    %rax,%rdi
    e627:	e8 d9 88 00 00       	call   16f05 <_ZN9__gnu_cxxeqIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    e62c:	83 f0 01             	xor    $0x1,%eax
    e62f:	84 c0                	test   %al,%al
    e631:	0f 85 d7 fe ff ff    	jne    e50e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x9e7>
      }
    }
    if (!layerSupported) {
    e637:	0f b6 45 ce          	movzbl -0x32(%rbp),%eax
    e63b:	83 f0 01             	xor    $0x1,%eax
    e63e:	84 c0                	test   %al,%al
    e640:	74 0a                	je     e64c <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xb25>
      continue;
    e642:	bb 00 00 00 00       	mov    $0x0,%ebx
    e647:	e9 15 07 00 00       	jmp    ed61 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x123a>
    e64c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e650:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
      VULKAN_HPP_NAMESPACE::PhysicalDeviceFeatures features;
    e657:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    e65e:	b8 00 00 00 00       	mov    $0x0,%eax
    e663:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    e668:	48 89 d7             	mov    %rdx,%rdi
    e66b:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    e66e:	48 89 fa             	mov    %rdi,%rdx
    e671:	89 02                	mov    %eax,(%rdx)
    e673:	48 83 c2 04          	add    $0x4,%rdx
      getDispatcher()->vkGetPhysicalDeviceFeatures( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e677:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    e67e:	48 89 c7             	mov    %rax,%rdi
    e681:	e8 4c 79 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e686:	48 8b 58 20          	mov    0x20(%rax),%rbx
    e68a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    e691:	48 89 c7             	mov    %rax,%rdi
    e694:	e8 61 0b 00 00       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e699:	48 89 c2             	mov    %rax,%rdx
    e69c:	48 8d 85 20 f9 ff ff 	lea    -0x6e0(%rbp),%rax
    e6a3:	48 89 c6             	mov    %rax,%rsi
    e6a6:	48 89 d7             	mov    %rdx,%rdi
    e6a9:	ff d3                	call   *%rbx
      return features;
    e6ab:	90                   	nop
    }

    if (auto features = physicalDevice.getFeatures();
        !features.samplerAnisotropy) {
    e6ac:	8b 85 6c f9 ff ff    	mov    -0x694(%rbp),%eax
    if (auto features = physicalDevice.getFeatures();
    e6b2:	85 c0                	test   %eax,%eax
    e6b4:	75 0a                	jne    e6c0 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xb99>
    e6b6:	bb 00 00 00 00       	mov    $0x0,%ebx
    e6bb:	e9 a1 06 00 00       	jmp    ed61 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x123a>
    e6c0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e6c4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    e6cb:	48 8d 9d 10 fd ff ff 	lea    -0x2f0(%rbp),%rbx
      std::vector<VULKAN_HPP_NAMESPACE::QueueFamilyProperties> queueFamilyProperties;
    e6d2:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e6d6:	0f 11 03             	movups %xmm0,(%rbx)
    e6d9:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      getDispatcher()->vkGetPhysicalDeviceQueueFamilyProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ), &queueFamilyPropertyCount, nullptr );
    e6de:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    e6e5:	48 89 c7             	mov    %rax,%rdi
    e6e8:	e8 e5 78 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e6ed:	4c 8b 60 40          	mov    0x40(%rax),%r12
    e6f1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    e6f8:	48 89 c7             	mov    %rax,%rdi
    e6fb:	e8 fa 0a 00 00       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e700:	48 89 c1             	mov    %rax,%rcx
    e703:	48 8d 85 bc fc ff ff 	lea    -0x344(%rbp),%rax
    e70a:	ba 00 00 00 00       	mov    $0x0,%edx
    e70f:	48 89 c6             	mov    %rax,%rsi
    e712:	48 89 cf             	mov    %rcx,%rdi
    e715:	41 ff d4             	call   *%r12
      queueFamilyProperties.resize( queueFamilyPropertyCount );
    e718:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    e71e:	89 c0                	mov    %eax,%eax
    e720:	48 89 c6             	mov    %rax,%rsi
    e723:	48 89 df             	mov    %rbx,%rdi
    e726:	e8 b5 8f 00 00       	call   176e0 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm>
      getDispatcher()->vkGetPhysicalDeviceQueueFamilyProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e72b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    e732:	48 89 c7             	mov    %rax,%rdi
    e735:	e8 98 78 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e73a:	4c 8b 60 40          	mov    0x40(%rax),%r12
                                                                 reinterpret_cast<VkQueueFamilyProperties *>( queueFamilyProperties.data() ) );
    e73e:	48 89 df             	mov    %rbx,%rdi
    e741:	e8 2a 90 00 00       	call   17770 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4dataEv>
    e746:	49 89 c5             	mov    %rax,%r13
      getDispatcher()->vkGetPhysicalDeviceQueueFamilyProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e749:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    e750:	48 89 c7             	mov    %rax,%rdi
    e753:	e8 a2 0a 00 00       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e758:	48 89 c1             	mov    %rax,%rcx
    e75b:	48 8d 85 bc fc ff ff 	lea    -0x344(%rbp),%rax
    e762:	4c 89 ea             	mov    %r13,%rdx
    e765:	48 89 c6             	mov    %rax,%rsi
    e768:	48 89 cf             	mov    %rcx,%rdi
    e76b:	41 ff d4             	call   *%r12
      VULKAN_HPP_ASSERT( queueFamilyPropertyCount <= queueFamilyProperties.size() );
    e76e:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    e774:	41 89 c4             	mov    %eax,%r12d
    e777:	48 89 df             	mov    %rbx,%rdi
    e77a:	e8 15 90 00 00       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
    e77f:	4c 39 e0             	cmp    %r12,%rax
    e782:	73 28                	jae    e7ac <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xc85>
    e784:	48 8d 05 0d a6 01 00 	lea    0x1a60d(%rip),%rax        # 28d98 <_ZNSt8__detailL19__atomic_spin_countE+0x3664>
    e78b:	48 89 c1             	mov    %rax,%rcx
    e78e:	ba 4d 2a 00 00       	mov    $0x2a4d,%edx
    e793:	48 8d 05 de a1 01 00 	lea    0x1a1de(%rip),%rax        # 28978 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
    e79a:	48 89 c6             	mov    %rax,%rsi
    e79d:	48 8d 05 5c a6 01 00 	lea    0x1a65c(%rip),%rax        # 28e00 <_ZNSt8__detailL19__atomic_spin_countE+0x36cc>
    e7a4:	48 89 c7             	mov    %rax,%rdi
    e7a7:	e8 64 69 ff ff       	call   5110 <__assert_fail@plt>
      if ( queueFamilyPropertyCount < queueFamilyProperties.size() )
    e7ac:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    e7b2:	41 89 c4             	mov    %eax,%r12d
    e7b5:	48 89 df             	mov    %rbx,%rdi
    e7b8:	e8 d7 8f 00 00       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
    e7bd:	49 39 c4             	cmp    %rax,%r12
    e7c0:	0f 92 c0             	setb   %al
    e7c3:	84 c0                	test   %al,%al
    e7c5:	74 28                	je     e7ef <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xcc8>
        queueFamilyProperties.resize( queueFamilyPropertyCount );
    e7c7:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    e7cd:	89 c0                	mov    %eax,%eax
    e7cf:	48 89 c6             	mov    %rax,%rsi
    e7d2:	48 89 df             	mov    %rbx,%rdi
    e7d5:	e8 06 8f 00 00       	call   176e0 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm>
      return queueFamilyProperties;
    e7da:	eb 13                	jmp    e7ef <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xcc8>
    }
    e7dc:	49 89 c4             	mov    %rax,%r12
    e7df:	48 89 df             	mov    %rbx,%rdi
    e7e2:	e8 b5 8e 00 00       	call   1769c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
    e7e7:	4c 89 e3             	mov    %r12,%rbx
    e7ea:	e9 2d 08 00 00       	jmp    f01c <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      return queueFamilyProperties;
    e7ef:	90                   	nop
      continue;
    }

    auto queueFamilies = physicalDevice.getQueueFamilyProperties();
    std::optional<uint32_t> selectedQueueFamilyIndex;
    e7f0:	48 c7 85 08 fd ff ff 	movq   $0x0,-0x2f8(%rbp)
    e7f7:	00 00 00 00 
    for (size_t i = 0; i < queueFamilies.size(); ++i) {
    e7fb:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    e802:	00 
    e803:	e9 17 02 00 00       	jmp    ea1f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xef8>
      if ((queueFamilies[i].queueFlags & vk::QueueFlagBits::eGraphics) &&
    e808:	48 8d 85 c8 fe ff ff 	lea    -0x138(%rbp),%rax
    e80f:	be 01 00 00 00       	mov    $0x1,%esi
    e814:	48 89 c7             	mov    %rax,%rdi
    e817:	e8 8a 88 00 00       	call   170a6 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1ES1_>
    e81c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    e820:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    e827:	48 89 d6             	mov    %rdx,%rsi
    e82a:	48 89 c7             	mov    %rax,%rdi
    e82d:	e8 c4 97 00 00       	call   17ff6 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EEixEm>
    e832:	48 89 c2             	mov    %rax,%rdx
    e835:	48 8d 85 c8 fe ff ff 	lea    -0x138(%rbp),%rax
    e83c:	48 89 c6             	mov    %rax,%rsi
    e83f:	48 89 d7             	mov    %rdx,%rdi
    e842:	e8 77 88 00 00       	call   170be <_ZNK2vk5FlagsINS_13QueueFlagBitsEEanERKS2_>
    e847:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
          (queueFamilies[i].queueFlags & vk::QueueFlagBits::eCompute) &&
    e84d:	48 8d 85 c4 fe ff ff 	lea    -0x13c(%rbp),%rax
    e854:	48 89 c7             	mov    %rax,%rdi
    e857:	e8 94 88 00 00       	call   170f0 <_ZNK2vk5FlagsINS_13QueueFlagBitsEEcvbEv>
    e85c:	84 c0                	test   %al,%al
    e85e:	0f 84 7c 01 00 00    	je     e9e0 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb9>
    e864:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    e86b:	be 02 00 00 00       	mov    $0x2,%esi
    e870:	48 89 c7             	mov    %rax,%rdi
    e873:	e8 2e 88 00 00       	call   170a6 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1ES1_>
    e878:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    e87c:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    e883:	48 89 d6             	mov    %rdx,%rsi
    e886:	48 89 c7             	mov    %rax,%rdi
    e889:	e8 68 97 00 00       	call   17ff6 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EEixEm>
    e88e:	48 89 c2             	mov    %rax,%rdx
    e891:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    e898:	48 89 c6             	mov    %rax,%rsi
    e89b:	48 89 d7             	mov    %rdx,%rdi
    e89e:	e8 1b 88 00 00       	call   170be <_ZNK2vk5FlagsINS_13QueueFlagBitsEEanERKS2_>
    e8a3:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    e8a9:	48 8d 85 cc fe ff ff 	lea    -0x134(%rbp),%rax
    e8b0:	48 89 c7             	mov    %rax,%rdi
    e8b3:	e8 38 88 00 00       	call   170f0 <_ZNK2vk5FlagsINS_13QueueFlagBitsEEcvbEv>
      if ((queueFamilies[i].queueFlags & vk::QueueFlagBits::eGraphics) &&
    e8b8:	84 c0                	test   %al,%al
    e8ba:	0f 84 20 01 00 00    	je     e9e0 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb9>
          (physicalDevice.getSurfaceSupportKHR(static_cast<uint32_t>(i),
                                               *surface))) {
    e8c0:	48 8b 85 28 f8 ff ff 	mov    -0x7d8(%rbp),%rax
    e8c7:	48 89 c7             	mov    %rax,%rdi
    e8ca:	e8 bd 7c 00 00       	call   1658c <_ZNK2vk4raii10SurfaceKHRdeEv>
          (physicalDevice.getSurfaceSupportKHR(static_cast<uint32_t>(i),
    e8cf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    e8d3:	89 d1                	mov    %edx,%ecx
    e8d5:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    e8d9:	48 89 95 20 ff ff ff 	mov    %rdx,-0xe0(%rbp)
    e8e0:	89 8d 1c ff ff ff    	mov    %ecx,-0xe4(%rbp)
    e8e6:	48 8b 00             	mov    (%rax),%rax
    e8e9:	48 89 85 60 fc ff ff 	mov    %rax,-0x3a0(%rbp)
    //=== VK_KHR_surface ===

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE VULKAN_HPP_NAMESPACE::Bool32 PhysicalDevice::getSurfaceSupportKHR( uint32_t                         queueFamilyIndex,
                                                                                                              VULKAN_HPP_NAMESPACE::SurfaceKHR surface ) const
    {
      VULKAN_HPP_ASSERT( getDispatcher()->vkGetPhysicalDeviceSurfaceSupportKHR &&
    e8f0:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    e8f7:	48 89 c7             	mov    %rax,%rdi
    e8fa:	e8 d3 76 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e8ff:	48 8b 80 78 02 00 00 	mov    0x278(%rax),%rax
    e906:	48 85 c0             	test   %rax,%rax
    e909:	75 28                	jne    e933 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xe0c>
    e90b:	48 8d 05 2e a5 01 00 	lea    0x1a52e(%rip),%rax        # 28e40 <_ZNSt8__detailL19__atomic_spin_countE+0x370c>
    e912:	48 89 c1             	mov    %rax,%rcx
    e915:	ba 0b 32 00 00       	mov    $0x320b,%edx
    e91a:	48 8d 05 57 a0 01 00 	lea    0x1a057(%rip),%rax        # 28978 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
    e921:	48 89 c6             	mov    %rax,%rsi
    e924:	48 8d 05 75 a5 01 00 	lea    0x1a575(%rip),%rax        # 28ea0 <_ZNSt8__detailL19__atomic_spin_countE+0x376c>
    e92b:	48 89 c7             	mov    %rax,%rdi
    e92e:	e8 dd 67 ff ff       	call   5110 <__assert_fail@plt>
                         "Function <vkGetPhysicalDeviceSurfaceSupportKHR> needs extension <VK_KHR_surface> enabled!" );

      VULKAN_HPP_NAMESPACE::Bool32 supported;
      VkResult                     result = getDispatcher()->vkGetPhysicalDeviceSurfaceSupportKHR(
    e933:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    e93a:	48 89 c7             	mov    %rax,%rdi
    e93d:	e8 90 76 00 00       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e942:	48 8b 98 78 02 00 00 	mov    0x278(%rax),%rbx
    e949:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
    e950:	48 89 c7             	mov    %rax,%rdi
    e953:	e8 e0 a5 ff ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
    e958:	49 89 c4             	mov    %rax,%r12
    e95b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    e962:	48 89 c7             	mov    %rax,%rdi
    e965:	e8 90 08 00 00       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e96a:	48 89 c7             	mov    %rax,%rdi
    e96d:	48 8d 95 5c fc ff ff 	lea    -0x3a4(%rbp),%rdx
    e974:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    e97a:	48 89 d1             	mov    %rdx,%rcx
    e97d:	4c 89 e2             	mov    %r12,%rdx
    e980:	89 c6                	mov    %eax,%esi
    e982:	ff d3                	call   *%rbx
    e984:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
    e98a:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    e990:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
    e996:	48 8d 05 9b a5 01 00 	lea    0x1a59b(%rip),%rax        # 28f38 <_ZNSt8__detailL19__atomic_spin_countE+0x3804>
    e99d:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    if ( result != Result::eSuccess )
    e9a4:	83 bd 14 ff ff ff 00 	cmpl   $0x0,-0xec(%rbp)
    e9ab:	74 17                	je     e9c4 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xe9d>
      throwResultException( result, message );
    e9ad:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    e9b4:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
    e9ba:	48 89 d6             	mov    %rdx,%rsi
    e9bd:	89 c7                	mov    %eax,%edi
    e9bf:	e8 0c e7 ff ff       	call   d0d0 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    e9c4:	90                   	nop
        static_cast<VkPhysicalDevice>( m_physicalDevice ), queueFamilyIndex, static_cast<VkSurfaceKHR>( surface ), reinterpret_cast<VkBool32 *>( &supported ) );
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::getSurfaceSupportKHR" );

      return supported;
    e9c5:	8b 85 5c fc ff ff    	mov    -0x3a4(%rbp),%eax
          (queueFamilies[i].queueFlags & vk::QueueFlagBits::eCompute) &&
    e9cb:	85 c0                	test   %eax,%eax
    e9cd:	74 11                	je     e9e0 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb9>
    e9cf:	eb 08                	jmp    e9d9 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb2>
    e9d1:	48 89 c3             	mov    %rax,%rbx
    e9d4:	e9 2f 06 00 00       	jmp    f008 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14e1>
    e9d9:	b8 01 00 00 00       	mov    $0x1,%eax
    e9de:	eb 05                	jmp    e9e5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xebe>
    e9e0:	b8 00 00 00 00       	mov    $0x0,%eax
      if ((queueFamilies[i].queueFlags & vk::QueueFlagBits::eGraphics) &&
    e9e5:	84 c0                	test   %al,%al
    e9e7:	74 31                	je     ea1a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xef3>
        selectedQueueFamilyIndex = static_cast<uint32_t>(i);
    e9e9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    e9ed:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
    e9f3:	48 8d 95 dc fe ff ff 	lea    -0x124(%rbp),%rdx
    e9fa:	48 8d 85 d4 fe ff ff 	lea    -0x12c(%rbp),%rax
    ea01:	48 89 d6             	mov    %rdx,%rsi
    ea04:	48 89 c7             	mov    %rax,%rdi
    ea07:	e8 14 96 00 00       	call   18020 <_ZNSt8optionalIjEC1IjLb1EEEOT_>
    ea0c:	48 8b 85 d4 fe ff ff 	mov    -0x12c(%rbp),%rax
    ea13:	48 89 85 08 fd ff ff 	mov    %rax,-0x2f8(%rbp)
    for (size_t i = 0; i < queueFamilies.size(); ++i) {
    ea1a:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
    ea1f:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    ea26:	48 89 c7             	mov    %rax,%rdi
    ea29:	e8 66 8d 00 00       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
    ea2e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    ea32:	0f 92 c0             	setb   %al
    ea35:	84 c0                	test   %al,%al
    ea37:	0f 85 cb fd ff ff    	jne    e808 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xce1>
      }
    }
    if (!selectedQueueFamilyIndex.has_value()) {
    ea3d:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    ea44:	48 89 c7             	mov    %rax,%rdi
    ea47:	e8 6e 85 00 00       	call   16fba <_ZNKSt8optionalIjE9has_valueEv>
    ea4c:	83 f0 01             	xor    $0x1,%eax
    ea4f:	84 c0                	test   %al,%al
    ea51:	74 3b                	je     ea8e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xf67>
      throw std::runtime_error("Failed to select queue families");
    ea53:	bf 10 00 00 00       	mov    $0x10,%edi
    ea58:	e8 73 66 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ea5d:	48 89 c3             	mov    %rax,%rbx
    ea60:	48 8d 05 01 a5 01 00 	lea    0x1a501(%rip),%rax        # 28f68 <_ZNSt8__detailL19__atomic_spin_countE+0x3834>
    ea67:	48 89 c6             	mov    %rax,%rsi
    ea6a:	48 89 df             	mov    %rbx,%rdi
    ea6d:	e8 1e 66 ff ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
    ea72:	48 8b 05 37 95 02 00 	mov    0x29537(%rip),%rax        # 37fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    ea79:	48 89 c2             	mov    %rax,%rdx
    ea7c:	48 8d 05 7d 8f 02 00 	lea    0x28f7d(%rip),%rax        # 37a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
    ea83:	48 89 c6             	mov    %rax,%rsi
    ea86:	48 89 df             	mov    %rbx,%rdi
    ea89:	e8 f2 68 ff ff       	call   5380 <__cxa_throw@plt>
    }

    const float queuePriorities = 1.0f;
    ea8e:	f3 0f 10 05 26 a6 01 	movss  0x1a626(%rip),%xmm0        # 290bc <_ZNSt8__detailL19__atomic_spin_countE+0x3988>
    ea95:	00 
    ea96:	f3 0f 11 85 04 fd ff 	movss  %xmm0,-0x2fc(%rbp)
    ea9d:	ff 
    vk::DeviceQueueCreateInfo queueInfo{
    ea9e:	66 0f ef c0          	pxor   %xmm0,%xmm0
    eaa2:	0f 29 85 40 f8 ff ff 	movaps %xmm0,-0x7c0(%rbp)
    eaa9:	0f 29 85 50 f8 ff ff 	movaps %xmm0,-0x7b0(%rbp)
    eab0:	66 0f d6 85 60 f8 ff 	movq   %xmm0,-0x7a0(%rbp)
    eab7:	ff 
    eab8:	c7 85 40 f8 ff ff 02 	movl   $0x2,-0x7c0(%rbp)
    eabf:	00 00 00 
    eac2:	c7 85 58 f8 ff ff 01 	movl   $0x1,-0x7a8(%rbp)
    eac9:	00 00 00 
        .queueFamilyIndex{selectedQueueFamilyIndex.value()},
        .queueCount{1},
        .pQueuePriorities{&queuePriorities},
    }; // namespace rtvc
    eacc:	48 8d 85 40 f8 ff ff 	lea    -0x7c0(%rbp),%rax
    ead3:	48 83 c0 10          	add    $0x10,%rax
    ead7:	48 89 c7             	mov    %rax,%rdi
    eada:	e8 39 85 00 00       	call   17018 <_ZN2vk5FlagsINS_25DeviceQueueCreateFlagBitsEEC1Ev>
        .queueFamilyIndex{selectedQueueFamilyIndex.value()},
    eadf:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    eae6:	48 89 c7             	mov    %rax,%rdi
    eae9:	e8 f8 84 00 00       	call   16fe6 <_ZNRSt8optionalIjE5valueEv>
    eaee:	8b 00                	mov    (%rax),%eax
    }; // namespace rtvc
    eaf0:	89 85 54 f8 ff ff    	mov    %eax,-0x7ac(%rbp)
    eaf6:	48 8d 85 04 fd ff ff 	lea    -0x2fc(%rbp),%rax
    eafd:	48 89 85 60 f8 ff ff 	mov    %rax,-0x7a0(%rbp)

    vk::PhysicalDeviceFeatures features{};
    eb04:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    eb0b:	b8 00 00 00 00       	mov    $0x0,%eax
    eb10:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    eb15:	48 89 d7             	mov    %rdx,%rdi
    eb18:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    eb1b:	48 89 fa             	mov    %rdi,%rdx
    eb1e:	89 02                	mov    %eax,(%rdx)
    eb20:	48 83 c2 04          	add    $0x4,%rdx
    // features.samplerAnisotropy = VK_TRUE;
    // features.sample

    vk::DeviceCreateInfo deviceInfo{
    eb24:	66 0f ef c0          	pxor   %xmm0,%xmm0
    eb28:	0f 29 85 d0 f8 ff ff 	movaps %xmm0,-0x730(%rbp)
    eb2f:	0f 29 85 e0 f8 ff ff 	movaps %xmm0,-0x720(%rbp)
    eb36:	0f 29 85 f0 f8 ff ff 	movaps %xmm0,-0x710(%rbp)
    eb3d:	0f 29 85 00 f9 ff ff 	movaps %xmm0,-0x700(%rbp)
    eb44:	66 0f d6 85 10 f9 ff 	movq   %xmm0,-0x6f0(%rbp)
    eb4b:	ff 
    eb4c:	c7 85 d0 f8 ff ff 03 	movl   $0x3,-0x730(%rbp)
    eb53:	00 00 00 
    eb56:	c7 85 e4 f8 ff ff 01 	movl   $0x1,-0x71c(%rbp)
    eb5d:	00 00 00 
        .ppEnabledLayerNames{instanceLayers.data()},
        .enabledExtensionCount{
            static_cast<uint32_t>(requiredExtensions.size())},
        .ppEnabledExtensionNames{requiredExtensions.data()},
        .pEnabledFeatures{&features},
    };
    eb60:	48 8d 85 d0 f8 ff ff 	lea    -0x730(%rbp),%rax
    eb67:	48 83 c0 10          	add    $0x10,%rax
    eb6b:	48 89 c7             	mov    %rax,%rdi
    eb6e:	e8 03 85 00 00       	call   17076 <_ZN2vk5FlagsINS_20DeviceCreateFlagBitsEEC1Ev>
    eb73:	48 8d 85 40 f8 ff ff 	lea    -0x7c0(%rbp),%rax
    eb7a:	48 89 85 e8 f8 ff ff 	mov    %rax,-0x718(%rbp)
        .enabledLayerCount{static_cast<uint32_t>(instanceLayers.size())},
    eb81:	48 8d 05 f8 97 02 00 	lea    0x297f8(%rip),%rax        # 38380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    eb88:	48 89 c7             	mov    %rax,%rdi
    eb8b:	e8 9e 84 00 00       	call   1702e <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
    };
    eb90:	89 85 f0 f8 ff ff    	mov    %eax,-0x710(%rbp)
        .ppEnabledLayerNames{instanceLayers.data()},
    eb96:	48 8d 05 e3 97 02 00 	lea    0x297e3(%rip),%rax        # 38380 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    eb9d:	48 89 c7             	mov    %rax,%rdi
    eba0:	e8 ad 84 00 00       	call   17052 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    };
    eba5:	48 89 85 f8 f8 ff ff 	mov    %rax,-0x708(%rbp)
            static_cast<uint32_t>(requiredExtensions.size())},
    ebac:	48 8d 05 ad 97 02 00 	lea    0x297ad(%rip),%rax        # 38360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    ebb3:	48 89 c7             	mov    %rax,%rdi
    ebb6:	e8 73 84 00 00       	call   1702e <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
    };
    ebbb:	89 85 00 f9 ff ff    	mov    %eax,-0x700(%rbp)
        .ppEnabledExtensionNames{requiredExtensions.data()},
    ebc1:	48 8d 05 98 97 02 00 	lea    0x29798(%rip),%rax        # 38360 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    ebc8:	48 89 c7             	mov    %rax,%rdi
    ebcb:	e8 82 84 00 00       	call   17052 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    };
    ebd0:	48 89 85 08 f9 ff ff 	mov    %rax,-0x6f8(%rbp)
    ebd7:	48 8d 85 20 f9 ff ff 	lea    -0x6e0(%rbp),%rax
    ebde:	48 89 85 10 f9 ff ff 	mov    %rax,-0x6f0(%rbp)

    auto device = physicalDevice.createDevice(deviceInfo);
    ebe5:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    ebec:	be 00 00 00 00       	mov    $0x0,%esi
    ebf1:	48 89 c7             	mov    %rax,%rdi
    ebf4:	e8 b1 94 00 00       	call   180aa <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    ebf9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    ebfd:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    ec04:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    ec0b:	48 89 85 c0 fc ff ff 	mov    %rax,-0x340(%rbp)
    ec12:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
      return VULKAN_HPP_RAII_NAMESPACE::Device( *this, createInfo, allocator );
    ec19:	48 8b 8d c0 fc ff ff 	mov    -0x340(%rbp),%rcx
    ec20:	48 8d 95 d0 f8 ff ff 	lea    -0x730(%rbp),%rdx
    ec27:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    ec2e:	48 89 c7             	mov    %rax,%rdi
    ec31:	e8 d2 76 00 00       	call   16308 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
    ec36:	90                   	nop
    auto queue = device.getQueue(selectedQueueFamilyIndex.value(), 0);
    ec37:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    ec3e:	48 89 c7             	mov    %rax,%rdi
    ec41:	e8 a0 83 00 00       	call   16fe6 <_ZNRSt8optionalIjE5valueEv>
    ec46:	8b 00                	mov    (%rax),%eax
    ec48:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
    ec4e:	c7 85 f8 fe ff ff 00 	movl   $0x0,-0x108(%rbp)
    ec55:	00 00 00 
    ec58:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
      return VULKAN_HPP_RAII_NAMESPACE::Queue( *this, queueFamilyIndex, queueIndex );
    ec5f:	8b 8d f8 fe ff ff    	mov    -0x108(%rbp),%ecx
    ec65:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
    ec6b:	48 8d b5 e0 fc ff ff 	lea    -0x320(%rbp),%rsi
    ec72:	48 89 c7             	mov    %rax,%rdi
    ec75:	e8 06 78 00 00       	call   16480 <_ZN2vk4raii5QueueC1ERKNS0_6DeviceEjj>
    ec7a:	90                   	nop

    return {
        selectedQueueFamilyIndex.value(),
    ec7b:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    ec82:	48 89 c7             	mov    %rax,%rdi
    ec85:	e8 5c 83 00 00       	call   16fe6 <_ZNRSt8optionalIjE5valueEv>
    ec8a:	8b 10                	mov    (%rax),%edx
        physicalDevice,
        physicalDevice.createDevice(deviceInfo),
    };
  }
  throw std::runtime_error("Failed to create a logical device");
}
    ec8c:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ec93:	89 10                	mov    %edx,(%rax)
    ec95:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ec9c:	48 8d 50 08          	lea    0x8(%rax),%rdx
    eca0:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    eca7:	48 89 c6             	mov    %rax,%rsi
    ecaa:	48 89 d7             	mov    %rdx,%rdi
    ecad:	e8 56 78 00 00       	call   16508 <_ZN2vk4raii5QueueC1ERKS1_>
    ecb2:	41 bc 01 00 00 00    	mov    $0x1,%r12d
    ecb8:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ecbf:	48 8d 50 18          	lea    0x18(%rax),%rdx
    ecc3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    ecc7:	48 89 c6             	mov    %rax,%rsi
    ecca:	48 89 d7             	mov    %rdx,%rdi
    eccd:	e8 30 72 00 00       	call   15f02 <_ZN2vk4raii14PhysicalDeviceC1ERKS1_>
    ecd2:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    ecd8:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    ecdf:	be 00 00 00 00       	mov    $0x0,%esi
    ece4:	48 89 c7             	mov    %rax,%rdi
    ece7:	e8 be 93 00 00       	call   180aa <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    ecec:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    ecf0:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    ecf7:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    ecfe:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
    ed05:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ed0c:	48 8d 78 28          	lea    0x28(%rax),%rdi
      return VULKAN_HPP_RAII_NAMESPACE::Device( *this, createInfo, allocator );
    ed10:	48 8b 8d c8 fc ff ff 	mov    -0x338(%rbp),%rcx
    ed17:	48 8d 95 d0 f8 ff ff 	lea    -0x730(%rbp),%rdx
    ed1e:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    ed25:	48 89 c6             	mov    %rax,%rsi
    ed28:	e8 db 75 00 00       	call   16308 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
    ed2d:	90                   	nop
    };
    ed2e:	90                   	nop
  }
    ed2f:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    ed36:	48 89 c7             	mov    %rax,%rdi
    ed39:	e8 e4 aa ff ff       	call   9822 <_ZN2vk4raii5QueueD1Ev>
    ed3e:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
    ed45:	48 89 c7             	mov    %rax,%rdi
    ed48:	e8 6b a7 ff ff       	call   94b8 <_ZN2vk4raii6DeviceD1Ev>
    ed4d:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    ed54:	48 89 c7             	mov    %rax,%rdi
    ed57:	e8 40 89 00 00       	call   1769c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
    ed5c:	bb 01 00 00 00       	mov    $0x1,%ebx
    ed61:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    ed68:	48 89 c7             	mov    %rax,%rdi
    ed6b:	e8 b2 80 00 00       	call   16e22 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    ed70:	85 db                	test   %ebx,%ebx
    ed72:	75 07                	jne    ed7b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1254>
    ed74:	bb 00 00 00 00       	mov    $0x0,%ebx
    ed79:	eb 05                	jmp    ed80 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1259>
    ed7b:	bb 01 00 00 00       	mov    $0x1,%ebx
    ed80:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
    ed87:	48 89 c7             	mov    %rax,%rdi
    ed8a:	e8 4d 8c 00 00       	call   179dc <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    ed8f:	85 db                	test   %ebx,%ebx
    ed91:	75 07                	jne    ed9a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1273>
    ed93:	bb 00 00 00 00       	mov    $0x0,%ebx
    ed98:	eb 05                	jmp    ed9f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1278>
    ed9a:	bb 01 00 00 00       	mov    $0x1,%ebx
    ed9f:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    eda6:	48 89 c7             	mov    %rax,%rdi
    eda9:	e8 74 80 00 00       	call   16e22 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    edae:	85 db                	test   %ebx,%ebx
    edb0:	75 07                	jne    edb9 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1292>
    edb2:	bb 00 00 00 00       	mov    $0x0,%ebx
    edb7:	eb 05                	jmp    edbe <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1297>
    edb9:	bb 01 00 00 00       	mov    $0x1,%ebx
    edbe:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    edc5:	48 89 c7             	mov    %rax,%rdi
    edc8:	e8 59 8a 00 00       	call   17826 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
    edcd:	85 db                	test   %ebx,%ebx
    edcf:	75 14                	jne    ede5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12be>
    edd1:	eb 01                	jmp    edd4 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12ad>
      continue;
    edd3:	90                   	nop
  for (const auto &physicalDevice : physicalDevices) {
    edd4:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    eddb:	48 89 c7             	mov    %rax,%rdi
    edde:	e8 dd 8e 00 00       	call   17cc0 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEppEv>
    ede3:	eb 14                	jmp    edf9 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12d2>
}
    ede5:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    edec:	48 89 c7             	mov    %rax,%rdi
    edef:	e8 aa 77 00 00       	call   1659e <_ZN2vk4raii15PhysicalDevicesD1Ev>
    };
    edf4:	e9 93 02 00 00       	jmp    f08c <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1565>
  for (const auto &physicalDevice : physicalDevices) {
    edf9:	48 8d 95 70 fd ff ff 	lea    -0x290(%rbp),%rdx
    ee00:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    ee07:	48 89 d6             	mov    %rdx,%rsi
    ee0a:	48 89 c7             	mov    %rax,%rdi
    ee0d:	e8 60 7f 00 00       	call   16d72 <_ZN9__gnu_cxxeqIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    ee12:	83 f0 01             	xor    $0x1,%eax
    ee15:	84 c0                	test   %al,%al
    ee17:	0f 85 29 ef ff ff    	jne    dd46 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x21f>
  throw std::runtime_error("Failed to create a logical device");
    ee1d:	bf 10 00 00 00       	mov    $0x10,%edi
    ee22:	e8 a9 62 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ee27:	48 89 c3             	mov    %rax,%rbx
    ee2a:	48 8d 05 57 a1 01 00 	lea    0x1a157(%rip),%rax        # 28f88 <_ZNSt8__detailL19__atomic_spin_countE+0x3854>
    ee31:	48 89 c6             	mov    %rax,%rsi
    ee34:	48 89 df             	mov    %rbx,%rdi
    ee37:	e8 54 62 ff ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
    ee3c:	48 8b 05 6d 91 02 00 	mov    0x2916d(%rip),%rax        # 37fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    ee43:	48 89 c2             	mov    %rax,%rdx
    ee46:	48 8d 05 b3 8b 02 00 	lea    0x28bb3(%rip),%rax        # 37a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
    ee4d:	48 89 c6             	mov    %rax,%rsi
    ee50:	48 89 df             	mov    %rbx,%rdi
    ee53:	e8 28 65 ff ff       	call   5380 <__cxa_throw@plt>
  };
    ee58:	48 89 c3             	mov    %rax,%rbx
    ee5b:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    ee62:	48 89 c7             	mov    %rax,%rdi
    ee65:	e8 7c 79 00 00       	call   167e6 <_ZNSaIPKcED1Ev>
    ee6a:	80 bd 27 f8 ff ff 00 	cmpb   $0x0,-0x7d9(%rbp)
    ee71:	75 0f                	jne    ee82 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x135b>
    ee73:	48 8d 05 fe 94 02 00 	lea    0x294fe(%rip),%rax        # 38378 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    ee7a:	48 89 c7             	mov    %rax,%rdi
    ee7d:	e8 6e 62 ff ff       	call   50f0 <__cxa_guard_abort@plt>
    ee82:	48 89 d8             	mov    %rbx,%rax
    ee85:	48 89 c7             	mov    %rax,%rdi
    ee88:	e8 13 65 ff ff       	call   53a0 <_Unwind_Resume@plt>
  };
    ee8d:	48 89 c3             	mov    %rax,%rbx
    ee90:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    ee97:	48 89 c7             	mov    %rax,%rdi
    ee9a:	e8 47 79 00 00       	call   167e6 <_ZNSaIPKcED1Ev>
    ee9f:	45 84 f6             	test   %r14b,%r14b
    eea2:	75 0f                	jne    eeb3 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x138c>
    eea4:	48 8d 05 ed 94 02 00 	lea    0x294ed(%rip),%rax        # 38398 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    eeab:	48 89 c7             	mov    %rax,%rdi
    eeae:	e8 3d 62 ff ff       	call   50f0 <__cxa_guard_abort@plt>
    eeb3:	48 89 d8             	mov    %rbx,%rax
    eeb6:	48 89 c7             	mov    %rax,%rdi
    eeb9:	e8 e2 64 ff ff       	call   53a0 <_Unwind_Resume@plt>
      extensionsMap[extension.extensionName]++;
    eebe:	48 89 c3             	mov    %rax,%rbx
    eec1:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    eec8:	48 89 c7             	mov    %rax,%rdi
    eecb:	e8 08 b0 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    eed0:	e9 6a 01 00 00       	jmp    f03f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      extensionsMap[extension]++;
    eed5:	48 89 c3             	mov    %rax,%rbx
    eed8:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    eedf:	48 89 c7             	mov    %rax,%rdi
    eee2:	e8 f1 af ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    eee7:	eb 03                	jmp    eeec <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x13c5>
    eee9:	48 89 c3             	mov    %rax,%rbx
    eeec:	48 8d 85 1f fe ff ff 	lea    -0x1e1(%rbp),%rax
    eef3:	48 89 c7             	mov    %rax,%rdi
    eef6:	e8 75 63 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    eefb:	e9 3f 01 00 00       	jmp    f03f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      if (extensionsMap[extension] < 2) {
    ef00:	48 89 c3             	mov    %rax,%rbx
    ef03:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    ef0a:	48 89 c7             	mov    %rax,%rdi
    ef0d:	e8 c6 af ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ef12:	eb 03                	jmp    ef17 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x13f0>
    ef14:	48 89 c3             	mov    %rax,%rbx
    ef17:	48 8d 85 4f fe ff ff 	lea    -0x1b1(%rbp),%rax
    ef1e:	48 89 c7             	mov    %rax,%rdi
    ef21:	e8 4a 63 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    ef26:	e9 14 01 00 00       	jmp    f03f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      layerMap[layer.layerName]++;
    ef2b:	48 89 c3             	mov    %rax,%rbx
    ef2e:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    ef35:	48 89 c7             	mov    %rax,%rdi
    ef38:	e8 9b af ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ef3d:	e9 da 00 00 00       	jmp    f01c <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      layerMap[layer]++;
    ef42:	48 89 c3             	mov    %rax,%rbx
    ef45:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    ef4c:	48 89 c7             	mov    %rax,%rdi
    ef4f:	e8 84 af ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ef54:	eb 03                	jmp    ef59 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1432>
    ef56:	48 89 c3             	mov    %rax,%rbx
    ef59:	48 8d 85 9f fe ff ff 	lea    -0x161(%rbp),%rax
    ef60:	48 89 c7             	mov    %rax,%rdi
    ef63:	e8 08 63 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    ef68:	e9 af 00 00 00       	jmp    f01c <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      if (layerMap[layer] < 2) {
    ef6d:	48 89 c3             	mov    %rax,%rbx
    ef70:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    ef77:	48 89 c7             	mov    %rax,%rdi
    ef7a:	e8 59 af ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ef7f:	eb 03                	jmp    ef84 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x145d>
    ef81:	48 89 c3             	mov    %rax,%rbx
    ef84:	48 8d 85 c3 fe ff ff 	lea    -0x13d(%rbp),%rax
    ef8b:	48 89 c7             	mov    %rax,%rdi
    ef8e:	e8 dd 62 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    ef93:	e9 84 00 00 00       	jmp    f01c <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      throw std::runtime_error("Failed to select queue families");
    ef98:	49 89 c4             	mov    %rax,%r12
    ef9b:	48 89 df             	mov    %rbx,%rdi
    ef9e:	e8 ad 61 ff ff       	call   5150 <__cxa_free_exception@plt>
    efa3:	4c 89 e3             	mov    %r12,%rbx
    efa6:	eb 60                	jmp    f008 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14e1>
}
    efa8:	48 89 c3             	mov    %rax,%rbx
    efab:	45 84 ed             	test   %r13b,%r13b
    efae:	74 13                	je     efc3 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x149c>
    efb0:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    efb7:	48 83 c0 18          	add    $0x18,%rax
    efbb:	48 89 c7             	mov    %rax,%rdi
    efbe:	e8 ad a4 ff ff       	call   9470 <_ZN2vk4raii14PhysicalDeviceD1Ev>
    efc3:	45 84 e4             	test   %r12b,%r12b
    efc6:	74 18                	je     efe0 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14b9>
    efc8:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    efcf:	48 83 c0 08          	add    $0x8,%rax
    efd3:	48 89 c7             	mov    %rax,%rdi
    efd6:	e8 47 a8 ff ff       	call   9822 <_ZN2vk4raii5QueueD1Ev>
    efdb:	eb 03                	jmp    efe0 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14b9>
  }
    efdd:	48 89 c3             	mov    %rax,%rbx
    efe0:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    efe7:	48 89 c7             	mov    %rax,%rdi
    efea:	e8 33 a8 ff ff       	call   9822 <_ZN2vk4raii5QueueD1Ev>
    efef:	eb 03                	jmp    eff4 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14cd>
    eff1:	48 89 c3             	mov    %rax,%rbx
    eff4:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
    effb:	48 89 c7             	mov    %rax,%rdi
    effe:	e8 b5 a4 ff ff       	call   94b8 <_ZN2vk4raii6DeviceD1Ev>
    f003:	eb 03                	jmp    f008 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14e1>
    f005:	48 89 c3             	mov    %rax,%rbx
    f008:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    f00f:	48 89 c7             	mov    %rax,%rdi
    f012:	e8 85 86 00 00       	call   1769c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
    f017:	eb 03                	jmp    f01c <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
    f019:	48 89 c3             	mov    %rax,%rbx
    f01c:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    f023:	48 89 c7             	mov    %rax,%rdi
    f026:	e8 f7 7d 00 00       	call   16e22 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    f02b:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
    f032:	48 89 c7             	mov    %rax,%rdi
    f035:	e8 a2 89 00 00       	call   179dc <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    f03a:	eb 03                	jmp    f03f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
    f03c:	48 89 c3             	mov    %rax,%rbx
    f03f:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    f046:	48 89 c7             	mov    %rax,%rdi
    f049:	e8 d4 7d 00 00       	call   16e22 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    f04e:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    f055:	48 89 c7             	mov    %rax,%rdi
    f058:	e8 c9 87 00 00       	call   17826 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
    f05d:	eb 13                	jmp    f072 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x154b>
  throw std::runtime_error("Failed to create a logical device");
    f05f:	49 89 c4             	mov    %rax,%r12
    f062:	48 89 df             	mov    %rbx,%rdi
    f065:	e8 e6 60 ff ff       	call   5150 <__cxa_free_exception@plt>
    f06a:	4c 89 e3             	mov    %r12,%rbx
    f06d:	eb 03                	jmp    f072 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x154b>
}
    f06f:	48 89 c3             	mov    %rax,%rbx
    f072:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    f079:	48 89 c7             	mov    %rax,%rdi
    f07c:	e8 1d 75 00 00       	call   1659e <_ZN2vk4raii15PhysicalDevicesD1Ev>
    f081:	48 89 d8             	mov    %rbx,%rax
    f084:	48 89 c7             	mov    %rax,%rdi
    f087:	e8 14 63 ff ff       	call   53a0 <_Unwind_Resume@plt>
    f08c:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    f093:	48 81 c4 b8 07 00 00 	add    $0x7b8,%rsp
    f09a:	5b                   	pop    %rbx
    f09b:	41 5c                	pop    %r12
    f09d:	41 5d                	pop    %r13
    f09f:	41 5e                	pop    %r14
    f0a1:	41 5f                	pop    %r15
    f0a3:	5d                   	pop    %rbp
    f0a4:	c3                   	ret
    f0a5:	90                   	nop

000000000000f0a6 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
    f0a6:	55                   	push   %rbp
    f0a7:	48 89 e5             	mov    %rsp,%rbp
    f0aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f0ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f0b2:	90                   	nop
    f0b3:	5d                   	pop    %rbp
    f0b4:	c3                   	ret

000000000000f0b5 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    [[nodiscard]]
    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
    f0b5:	55                   	push   %rbp
    f0b6:	48 89 e5             	mov    %rsp,%rbp
    f0b9:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
    { return __v._M_value < 0; }
    f0bd:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
    f0c1:	c0 e8 07             	shr    $0x7,%al
    f0c4:	5d                   	pop    %rbp
    f0c5:	c3                   	ret

000000000000f0c6 <_ZNSt9exceptionC1Ev>:
   *  throw non-class data (e.g., fundamental types).
   */
  class exception
  {
  public:
    exception() _GLIBCXX_NOTHROW { }
    f0c6:	55                   	push   %rbp
    f0c7:	48 89 e5             	mov    %rsp,%rbp
    f0ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f0ce:	48 8d 15 db 88 02 00 	lea    0x288db(%rip),%rdx        # 379b0 <_ZTVSt9exception@GLIBCXX_3.4+0x10>
    f0d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0d9:	48 89 10             	mov    %rdx,(%rax)
    f0dc:	90                   	nop
    f0dd:	5d                   	pop    %rbp
    f0de:	c3                   	ret

000000000000f0df <_ZdlPvS_>:
_GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
    f0df:	55                   	push   %rbp
    f0e0:	48 89 e5             	mov    %rsp,%rbp
    f0e3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f0e7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f0eb:	90                   	nop
    f0ec:	5d                   	pop    %rbp
    f0ed:	c3                   	ret

000000000000f0ee <_ZSt17__size_to_integerm>:
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR long
  __size_to_integer(long __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
    f0ee:	55                   	push   %rbp
    f0ef:	48 89 e5             	mov    %rsp,%rbp
    f0f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f0f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0fa:	5d                   	pop    %rbp
    f0fb:	c3                   	ret

000000000000f0fc <_ZNSt11char_traitsIcE2ltERKcS2_>:
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
    f0fc:	55                   	push   %rbp
    f0fd:	48 89 e5             	mov    %rsp,%rbp
    f100:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f104:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return (static_cast<unsigned char>(__c1)
    f108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f10c:	0f b6 00             	movzbl (%rax),%eax
    f10f:	89 c2                	mov    %eax,%edx
		< static_cast<unsigned char>(__c2));
    f111:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f115:	0f b6 00             	movzbl (%rax),%eax
    f118:	38 c2                	cmp    %al,%dl
    f11a:	0f 92 c0             	setb   %al
      }
    f11d:	5d                   	pop    %rbp
    f11e:	c3                   	ret

000000000000f11f <_ZNSt11char_traitsIcE7compareEPKcS2_m>:
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
    f11f:	55                   	push   %rbp
    f120:	48 89 e5             	mov    %rsp,%rbp
    f123:	48 83 ec 30          	sub    $0x30,%rsp
    f127:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f12b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    f12f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (__n == 0)
    f133:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    f138:	75 0a                	jne    f144 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x25>
	  return 0;
    f13a:	b8 00 00 00 00       	mov    $0x0,%eax
    f13f:	e9 99 00 00 00       	jmp    f1dd <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	if (std::__is_constant_evaluated())
    f144:	e8 55 70 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    f149:	84 c0                	test   %al,%al
    f14b:	74 78                	je     f1c5 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xa6>
	    for (size_t __i = 0; __i < __n; ++__i)
    f14d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    f154:	00 
    f155:	eb 5d                	jmp    f1b4 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x95>
	      if (lt(__s1[__i], __s2[__i]))
    f157:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f15b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f15f:	48 01 c2             	add    %rax,%rdx
    f162:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    f166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f16a:	48 01 c8             	add    %rcx,%rax
    f16d:	48 89 d6             	mov    %rdx,%rsi
    f170:	48 89 c7             	mov    %rax,%rdi
    f173:	e8 84 ff ff ff       	call   f0fc <_ZNSt11char_traitsIcE2ltERKcS2_>
    f178:	84 c0                	test   %al,%al
    f17a:	74 07                	je     f183 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x64>
		return -1;
    f17c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    f181:	eb 5a                	jmp    f1dd <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	      else if (lt(__s2[__i], __s1[__i]))
    f183:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f187:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f18b:	48 01 c2             	add    %rax,%rdx
    f18e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    f192:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f196:	48 01 c8             	add    %rcx,%rax
    f199:	48 89 d6             	mov    %rdx,%rsi
    f19c:	48 89 c7             	mov    %rax,%rdi
    f19f:	e8 58 ff ff ff       	call   f0fc <_ZNSt11char_traitsIcE2ltERKcS2_>
    f1a4:	84 c0                	test   %al,%al
    f1a6:	74 07                	je     f1af <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x90>
		return 1;
    f1a8:	b8 01 00 00 00       	mov    $0x1,%eax
    f1ad:	eb 2e                	jmp    f1dd <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	    for (size_t __i = 0; __i < __n; ++__i)
    f1af:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    f1b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1b8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    f1bc:	72 99                	jb     f157 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x38>
	    return 0;
    f1be:	b8 00 00 00 00       	mov    $0x0,%eax
    f1c3:	eb 18                	jmp    f1dd <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	return __builtin_memcmp(__s1, __s2, __n);
    f1c5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    f1c9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    f1cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f1d1:	48 89 ce             	mov    %rcx,%rsi
    f1d4:	48 89 c7             	mov    %rax,%rdi
    f1d7:	e8 e4 5e ff ff       	call   50c0 <memcmp@plt>
    f1dc:	90                   	nop
      }
    f1dd:	c9                   	leave
    f1de:	c3                   	ret
    f1df:	90                   	nop

000000000000f1e0 <_ZN2vk14PhysicalDeviceC1EP18VkPhysicalDevice_T>:
    PhysicalDevice( VkPhysicalDevice physicalDevice ) VULKAN_HPP_NOEXCEPT : m_physicalDevice( physicalDevice ) {}
    f1e0:	55                   	push   %rbp
    f1e1:	48 89 e5             	mov    %rsp,%rbp
    f1e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f1e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f1ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1f0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f1f4:	48 89 10             	mov    %rdx,(%rax)
    f1f7:	90                   	nop
    f1f8:	5d                   	pop    %rbp
    f1f9:	c3                   	ret

000000000000f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>:
    operator VkPhysicalDevice() const VULKAN_HPP_NOEXCEPT
    f1fa:	55                   	push   %rbp
    f1fb:	48 89 e5             	mov    %rsp,%rbp
    f1fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return m_physicalDevice;
    f202:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f206:	48 8b 00             	mov    (%rax),%rax
    }
    f209:	5d                   	pop    %rbp
    f20a:	c3                   	ret
    f20b:	90                   	nop

000000000000f20c <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_>:
      DeviceDispatcher( PFN_vkGetDeviceProcAddr getProcAddr, VkDevice device ) : vkGetDeviceProcAddr( getProcAddr )
    f20c:	55                   	push   %rbp
    f20d:	48 89 e5             	mov    %rsp,%rbp
    f210:	48 83 ec 20          	sub    $0x20,%rsp
    f214:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f218:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f21c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    f220:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f224:	48 89 c7             	mov    %rax,%rdi
    f227:	e8 70 73 ff ff       	call   659c <_ZN2vk18DispatchLoaderBaseC1Ev>
    f22c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f230:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f234:	48 89 50 10          	mov    %rdx,0x10(%rax)
    f238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f23c:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    f243:	00 
    f244:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f248:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    f24f:	00 
    f250:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f254:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    f25b:	00 
    f25c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f260:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
    f267:	00 
    f268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f26c:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
    f273:	00 
    f274:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f278:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
    f27f:	00 
    f280:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f284:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
    f28b:	00 
    f28c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f290:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
    f297:	00 
    f298:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f29c:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
    f2a3:	00 
    f2a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2a8:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
    f2af:	00 
    f2b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2b4:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
    f2bb:	00 
    f2bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2c0:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
    f2c7:	00 
    f2c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2cc:	48 c7 40 78 00 00 00 	movq   $0x0,0x78(%rax)
    f2d3:	00 
    f2d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2d8:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
    f2df:	00 00 00 00 
    f2e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2e7:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
    f2ee:	00 00 00 00 
    f2f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2f6:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
    f2fd:	00 00 00 00 
    f301:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f305:	48 c7 80 98 00 00 00 	movq   $0x0,0x98(%rax)
    f30c:	00 00 00 00 
    f310:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f314:	48 c7 80 a0 00 00 00 	movq   $0x0,0xa0(%rax)
    f31b:	00 00 00 00 
    f31f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f323:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
    f32a:	00 00 00 00 
    f32e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f332:	48 c7 80 b0 00 00 00 	movq   $0x0,0xb0(%rax)
    f339:	00 00 00 00 
    f33d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f341:	48 c7 80 b8 00 00 00 	movq   $0x0,0xb8(%rax)
    f348:	00 00 00 00 
    f34c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f350:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
    f357:	00 00 00 00 
    f35b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f35f:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)
    f366:	00 00 00 00 
    f36a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f36e:	48 c7 80 d0 00 00 00 	movq   $0x0,0xd0(%rax)
    f375:	00 00 00 00 
    f379:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f37d:	48 c7 80 d8 00 00 00 	movq   $0x0,0xd8(%rax)
    f384:	00 00 00 00 
    f388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f38c:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
    f393:	00 00 00 00 
    f397:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f39b:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
    f3a2:	00 00 00 00 
    f3a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3aa:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
    f3b1:	00 00 00 00 
    f3b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3b9:	48 c7 80 f8 00 00 00 	movq   $0x0,0xf8(%rax)
    f3c0:	00 00 00 00 
    f3c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3c8:	48 c7 80 00 01 00 00 	movq   $0x0,0x100(%rax)
    f3cf:	00 00 00 00 
    f3d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3d7:	48 c7 80 08 01 00 00 	movq   $0x0,0x108(%rax)
    f3de:	00 00 00 00 
    f3e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3e6:	48 c7 80 10 01 00 00 	movq   $0x0,0x110(%rax)
    f3ed:	00 00 00 00 
    f3f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3f5:	48 c7 80 18 01 00 00 	movq   $0x0,0x118(%rax)
    f3fc:	00 00 00 00 
    f400:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f404:	48 c7 80 20 01 00 00 	movq   $0x0,0x120(%rax)
    f40b:	00 00 00 00 
    f40f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f413:	48 c7 80 28 01 00 00 	movq   $0x0,0x128(%rax)
    f41a:	00 00 00 00 
    f41e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f422:	48 c7 80 30 01 00 00 	movq   $0x0,0x130(%rax)
    f429:	00 00 00 00 
    f42d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f431:	48 c7 80 38 01 00 00 	movq   $0x0,0x138(%rax)
    f438:	00 00 00 00 
    f43c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f440:	48 c7 80 40 01 00 00 	movq   $0x0,0x140(%rax)
    f447:	00 00 00 00 
    f44b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f44f:	48 c7 80 48 01 00 00 	movq   $0x0,0x148(%rax)
    f456:	00 00 00 00 
    f45a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f45e:	48 c7 80 50 01 00 00 	movq   $0x0,0x150(%rax)
    f465:	00 00 00 00 
    f469:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f46d:	48 c7 80 58 01 00 00 	movq   $0x0,0x158(%rax)
    f474:	00 00 00 00 
    f478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f47c:	48 c7 80 60 01 00 00 	movq   $0x0,0x160(%rax)
    f483:	00 00 00 00 
    f487:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f48b:	48 c7 80 68 01 00 00 	movq   $0x0,0x168(%rax)
    f492:	00 00 00 00 
    f496:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f49a:	48 c7 80 70 01 00 00 	movq   $0x0,0x170(%rax)
    f4a1:	00 00 00 00 
    f4a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4a9:	48 c7 80 78 01 00 00 	movq   $0x0,0x178(%rax)
    f4b0:	00 00 00 00 
    f4b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4b8:	48 c7 80 80 01 00 00 	movq   $0x0,0x180(%rax)
    f4bf:	00 00 00 00 
    f4c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4c7:	48 c7 80 88 01 00 00 	movq   $0x0,0x188(%rax)
    f4ce:	00 00 00 00 
    f4d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4d6:	48 c7 80 90 01 00 00 	movq   $0x0,0x190(%rax)
    f4dd:	00 00 00 00 
    f4e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4e5:	48 c7 80 98 01 00 00 	movq   $0x0,0x198(%rax)
    f4ec:	00 00 00 00 
    f4f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4f4:	48 c7 80 a0 01 00 00 	movq   $0x0,0x1a0(%rax)
    f4fb:	00 00 00 00 
    f4ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f503:	48 c7 80 a8 01 00 00 	movq   $0x0,0x1a8(%rax)
    f50a:	00 00 00 00 
    f50e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f512:	48 c7 80 b0 01 00 00 	movq   $0x0,0x1b0(%rax)
    f519:	00 00 00 00 
    f51d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f521:	48 c7 80 b8 01 00 00 	movq   $0x0,0x1b8(%rax)
    f528:	00 00 00 00 
    f52c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f530:	48 c7 80 c0 01 00 00 	movq   $0x0,0x1c0(%rax)
    f537:	00 00 00 00 
    f53b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f53f:	48 c7 80 c8 01 00 00 	movq   $0x0,0x1c8(%rax)
    f546:	00 00 00 00 
    f54a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f54e:	48 c7 80 d0 01 00 00 	movq   $0x0,0x1d0(%rax)
    f555:	00 00 00 00 
    f559:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f55d:	48 c7 80 d8 01 00 00 	movq   $0x0,0x1d8(%rax)
    f564:	00 00 00 00 
    f568:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f56c:	48 c7 80 e0 01 00 00 	movq   $0x0,0x1e0(%rax)
    f573:	00 00 00 00 
    f577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f57b:	48 c7 80 e8 01 00 00 	movq   $0x0,0x1e8(%rax)
    f582:	00 00 00 00 
    f586:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f58a:	48 c7 80 f0 01 00 00 	movq   $0x0,0x1f0(%rax)
    f591:	00 00 00 00 
    f595:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f599:	48 c7 80 f8 01 00 00 	movq   $0x0,0x1f8(%rax)
    f5a0:	00 00 00 00 
    f5a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5a8:	48 c7 80 00 02 00 00 	movq   $0x0,0x200(%rax)
    f5af:	00 00 00 00 
    f5b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5b7:	48 c7 80 08 02 00 00 	movq   $0x0,0x208(%rax)
    f5be:	00 00 00 00 
    f5c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5c6:	48 c7 80 10 02 00 00 	movq   $0x0,0x210(%rax)
    f5cd:	00 00 00 00 
    f5d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5d5:	48 c7 80 18 02 00 00 	movq   $0x0,0x218(%rax)
    f5dc:	00 00 00 00 
    f5e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5e4:	48 c7 80 20 02 00 00 	movq   $0x0,0x220(%rax)
    f5eb:	00 00 00 00 
    f5ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5f3:	48 c7 80 28 02 00 00 	movq   $0x0,0x228(%rax)
    f5fa:	00 00 00 00 
    f5fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f602:	48 c7 80 30 02 00 00 	movq   $0x0,0x230(%rax)
    f609:	00 00 00 00 
    f60d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f611:	48 c7 80 38 02 00 00 	movq   $0x0,0x238(%rax)
    f618:	00 00 00 00 
    f61c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f620:	48 c7 80 40 02 00 00 	movq   $0x0,0x240(%rax)
    f627:	00 00 00 00 
    f62b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f62f:	48 c7 80 48 02 00 00 	movq   $0x0,0x248(%rax)
    f636:	00 00 00 00 
    f63a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f63e:	48 c7 80 50 02 00 00 	movq   $0x0,0x250(%rax)
    f645:	00 00 00 00 
    f649:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f64d:	48 c7 80 58 02 00 00 	movq   $0x0,0x258(%rax)
    f654:	00 00 00 00 
    f658:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f65c:	48 c7 80 60 02 00 00 	movq   $0x0,0x260(%rax)
    f663:	00 00 00 00 
    f667:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f66b:	48 c7 80 68 02 00 00 	movq   $0x0,0x268(%rax)
    f672:	00 00 00 00 
    f676:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f67a:	48 c7 80 70 02 00 00 	movq   $0x0,0x270(%rax)
    f681:	00 00 00 00 
    f685:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f689:	48 c7 80 78 02 00 00 	movq   $0x0,0x278(%rax)
    f690:	00 00 00 00 
    f694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f698:	48 c7 80 80 02 00 00 	movq   $0x0,0x280(%rax)
    f69f:	00 00 00 00 
    f6a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6a7:	48 c7 80 88 02 00 00 	movq   $0x0,0x288(%rax)
    f6ae:	00 00 00 00 
    f6b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6b6:	48 c7 80 90 02 00 00 	movq   $0x0,0x290(%rax)
    f6bd:	00 00 00 00 
    f6c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6c5:	48 c7 80 98 02 00 00 	movq   $0x0,0x298(%rax)
    f6cc:	00 00 00 00 
    f6d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6d4:	48 c7 80 a0 02 00 00 	movq   $0x0,0x2a0(%rax)
    f6db:	00 00 00 00 
    f6df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6e3:	48 c7 80 a8 02 00 00 	movq   $0x0,0x2a8(%rax)
    f6ea:	00 00 00 00 
    f6ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6f2:	48 c7 80 b0 02 00 00 	movq   $0x0,0x2b0(%rax)
    f6f9:	00 00 00 00 
    f6fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f701:	48 c7 80 b8 02 00 00 	movq   $0x0,0x2b8(%rax)
    f708:	00 00 00 00 
    f70c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f710:	48 c7 80 c0 02 00 00 	movq   $0x0,0x2c0(%rax)
    f717:	00 00 00 00 
    f71b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f71f:	48 c7 80 c8 02 00 00 	movq   $0x0,0x2c8(%rax)
    f726:	00 00 00 00 
    f72a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f72e:	48 c7 80 d0 02 00 00 	movq   $0x0,0x2d0(%rax)
    f735:	00 00 00 00 
    f739:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f73d:	48 c7 80 d8 02 00 00 	movq   $0x0,0x2d8(%rax)
    f744:	00 00 00 00 
    f748:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f74c:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
    f753:	00 00 00 00 
    f757:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f75b:	48 c7 80 e8 02 00 00 	movq   $0x0,0x2e8(%rax)
    f762:	00 00 00 00 
    f766:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f76a:	48 c7 80 f0 02 00 00 	movq   $0x0,0x2f0(%rax)
    f771:	00 00 00 00 
    f775:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f779:	48 c7 80 f8 02 00 00 	movq   $0x0,0x2f8(%rax)
    f780:	00 00 00 00 
    f784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f788:	48 c7 80 00 03 00 00 	movq   $0x0,0x300(%rax)
    f78f:	00 00 00 00 
    f793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f797:	48 c7 80 08 03 00 00 	movq   $0x0,0x308(%rax)
    f79e:	00 00 00 00 
    f7a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7a6:	48 c7 80 10 03 00 00 	movq   $0x0,0x310(%rax)
    f7ad:	00 00 00 00 
    f7b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7b5:	48 c7 80 18 03 00 00 	movq   $0x0,0x318(%rax)
    f7bc:	00 00 00 00 
    f7c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7c4:	48 c7 80 20 03 00 00 	movq   $0x0,0x320(%rax)
    f7cb:	00 00 00 00 
    f7cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7d3:	48 c7 80 28 03 00 00 	movq   $0x0,0x328(%rax)
    f7da:	00 00 00 00 
    f7de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7e2:	48 c7 80 30 03 00 00 	movq   $0x0,0x330(%rax)
    f7e9:	00 00 00 00 
    f7ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7f1:	48 c7 80 38 03 00 00 	movq   $0x0,0x338(%rax)
    f7f8:	00 00 00 00 
    f7fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f800:	48 c7 80 40 03 00 00 	movq   $0x0,0x340(%rax)
    f807:	00 00 00 00 
    f80b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f80f:	48 c7 80 48 03 00 00 	movq   $0x0,0x348(%rax)
    f816:	00 00 00 00 
    f81a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f81e:	48 c7 80 50 03 00 00 	movq   $0x0,0x350(%rax)
    f825:	00 00 00 00 
    f829:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f82d:	48 c7 80 58 03 00 00 	movq   $0x0,0x358(%rax)
    f834:	00 00 00 00 
    f838:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f83c:	48 c7 80 60 03 00 00 	movq   $0x0,0x360(%rax)
    f843:	00 00 00 00 
    f847:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f84b:	48 c7 80 68 03 00 00 	movq   $0x0,0x368(%rax)
    f852:	00 00 00 00 
    f856:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f85a:	48 c7 80 70 03 00 00 	movq   $0x0,0x370(%rax)
    f861:	00 00 00 00 
    f865:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f869:	48 c7 80 78 03 00 00 	movq   $0x0,0x378(%rax)
    f870:	00 00 00 00 
    f874:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f878:	48 c7 80 80 03 00 00 	movq   $0x0,0x380(%rax)
    f87f:	00 00 00 00 
    f883:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f887:	48 c7 80 88 03 00 00 	movq   $0x0,0x388(%rax)
    f88e:	00 00 00 00 
    f892:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f896:	48 c7 80 90 03 00 00 	movq   $0x0,0x390(%rax)
    f89d:	00 00 00 00 
    f8a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8a5:	48 c7 80 98 03 00 00 	movq   $0x0,0x398(%rax)
    f8ac:	00 00 00 00 
    f8b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8b4:	48 c7 80 a0 03 00 00 	movq   $0x0,0x3a0(%rax)
    f8bb:	00 00 00 00 
    f8bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8c3:	48 c7 80 a8 03 00 00 	movq   $0x0,0x3a8(%rax)
    f8ca:	00 00 00 00 
    f8ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8d2:	48 c7 80 b0 03 00 00 	movq   $0x0,0x3b0(%rax)
    f8d9:	00 00 00 00 
    f8dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8e1:	48 c7 80 b8 03 00 00 	movq   $0x0,0x3b8(%rax)
    f8e8:	00 00 00 00 
    f8ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8f0:	48 c7 80 c0 03 00 00 	movq   $0x0,0x3c0(%rax)
    f8f7:	00 00 00 00 
    f8fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8ff:	48 c7 80 c8 03 00 00 	movq   $0x0,0x3c8(%rax)
    f906:	00 00 00 00 
    f90a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f90e:	48 c7 80 d0 03 00 00 	movq   $0x0,0x3d0(%rax)
    f915:	00 00 00 00 
    f919:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f91d:	48 c7 80 d8 03 00 00 	movq   $0x0,0x3d8(%rax)
    f924:	00 00 00 00 
    f928:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f92c:	48 c7 80 e0 03 00 00 	movq   $0x0,0x3e0(%rax)
    f933:	00 00 00 00 
    f937:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f93b:	48 c7 80 e8 03 00 00 	movq   $0x0,0x3e8(%rax)
    f942:	00 00 00 00 
    f946:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f94a:	48 c7 80 f0 03 00 00 	movq   $0x0,0x3f0(%rax)
    f951:	00 00 00 00 
    f955:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f959:	48 c7 80 f8 03 00 00 	movq   $0x0,0x3f8(%rax)
    f960:	00 00 00 00 
    f964:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f968:	48 c7 80 00 04 00 00 	movq   $0x0,0x400(%rax)
    f96f:	00 00 00 00 
    f973:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f977:	48 c7 80 08 04 00 00 	movq   $0x0,0x408(%rax)
    f97e:	00 00 00 00 
    f982:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f986:	48 c7 80 10 04 00 00 	movq   $0x0,0x410(%rax)
    f98d:	00 00 00 00 
    f991:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f995:	48 c7 80 18 04 00 00 	movq   $0x0,0x418(%rax)
    f99c:	00 00 00 00 
    f9a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9a4:	48 c7 80 20 04 00 00 	movq   $0x0,0x420(%rax)
    f9ab:	00 00 00 00 
    f9af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9b3:	48 c7 80 28 04 00 00 	movq   $0x0,0x428(%rax)
    f9ba:	00 00 00 00 
    f9be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9c2:	48 c7 80 30 04 00 00 	movq   $0x0,0x430(%rax)
    f9c9:	00 00 00 00 
    f9cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9d1:	48 c7 80 38 04 00 00 	movq   $0x0,0x438(%rax)
    f9d8:	00 00 00 00 
    f9dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9e0:	48 c7 80 40 04 00 00 	movq   $0x0,0x440(%rax)
    f9e7:	00 00 00 00 
    f9eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9ef:	48 c7 80 48 04 00 00 	movq   $0x0,0x448(%rax)
    f9f6:	00 00 00 00 
    f9fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9fe:	48 c7 80 50 04 00 00 	movq   $0x0,0x450(%rax)
    fa05:	00 00 00 00 
    fa09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa0d:	48 c7 80 58 04 00 00 	movq   $0x0,0x458(%rax)
    fa14:	00 00 00 00 
    fa18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa1c:	48 c7 80 60 04 00 00 	movq   $0x0,0x460(%rax)
    fa23:	00 00 00 00 
    fa27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa2b:	48 c7 80 68 04 00 00 	movq   $0x0,0x468(%rax)
    fa32:	00 00 00 00 
    fa36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa3a:	48 c7 80 70 04 00 00 	movq   $0x0,0x470(%rax)
    fa41:	00 00 00 00 
    fa45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa49:	48 c7 80 78 04 00 00 	movq   $0x0,0x478(%rax)
    fa50:	00 00 00 00 
    fa54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa58:	48 c7 80 80 04 00 00 	movq   $0x0,0x480(%rax)
    fa5f:	00 00 00 00 
    fa63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa67:	48 c7 80 88 04 00 00 	movq   $0x0,0x488(%rax)
    fa6e:	00 00 00 00 
    fa72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa76:	48 c7 80 90 04 00 00 	movq   $0x0,0x490(%rax)
    fa7d:	00 00 00 00 
    fa81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa85:	48 c7 80 98 04 00 00 	movq   $0x0,0x498(%rax)
    fa8c:	00 00 00 00 
    fa90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa94:	48 c7 80 a0 04 00 00 	movq   $0x0,0x4a0(%rax)
    fa9b:	00 00 00 00 
    fa9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    faa3:	48 c7 80 a8 04 00 00 	movq   $0x0,0x4a8(%rax)
    faaa:	00 00 00 00 
    faae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fab2:	48 c7 80 b0 04 00 00 	movq   $0x0,0x4b0(%rax)
    fab9:	00 00 00 00 
    fabd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fac1:	48 c7 80 b8 04 00 00 	movq   $0x0,0x4b8(%rax)
    fac8:	00 00 00 00 
    facc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fad0:	48 c7 80 c0 04 00 00 	movq   $0x0,0x4c0(%rax)
    fad7:	00 00 00 00 
    fadb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fadf:	48 c7 80 c8 04 00 00 	movq   $0x0,0x4c8(%rax)
    fae6:	00 00 00 00 
    faea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    faee:	48 c7 80 d0 04 00 00 	movq   $0x0,0x4d0(%rax)
    faf5:	00 00 00 00 
    faf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fafd:	48 c7 80 d8 04 00 00 	movq   $0x0,0x4d8(%rax)
    fb04:	00 00 00 00 
    fb08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb0c:	48 c7 80 e0 04 00 00 	movq   $0x0,0x4e0(%rax)
    fb13:	00 00 00 00 
    fb17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb1b:	48 c7 80 e8 04 00 00 	movq   $0x0,0x4e8(%rax)
    fb22:	00 00 00 00 
    fb26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb2a:	48 c7 80 f0 04 00 00 	movq   $0x0,0x4f0(%rax)
    fb31:	00 00 00 00 
    fb35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb39:	48 c7 80 f8 04 00 00 	movq   $0x0,0x4f8(%rax)
    fb40:	00 00 00 00 
    fb44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb48:	48 c7 80 00 05 00 00 	movq   $0x0,0x500(%rax)
    fb4f:	00 00 00 00 
    fb53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb57:	48 c7 80 08 05 00 00 	movq   $0x0,0x508(%rax)
    fb5e:	00 00 00 00 
    fb62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb66:	48 c7 80 10 05 00 00 	movq   $0x0,0x510(%rax)
    fb6d:	00 00 00 00 
    fb71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb75:	48 c7 80 18 05 00 00 	movq   $0x0,0x518(%rax)
    fb7c:	00 00 00 00 
    fb80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb84:	48 c7 80 20 05 00 00 	movq   $0x0,0x520(%rax)
    fb8b:	00 00 00 00 
    fb8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb93:	48 c7 80 28 05 00 00 	movq   $0x0,0x528(%rax)
    fb9a:	00 00 00 00 
    fb9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fba2:	48 c7 80 30 05 00 00 	movq   $0x0,0x530(%rax)
    fba9:	00 00 00 00 
    fbad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbb1:	48 c7 80 38 05 00 00 	movq   $0x0,0x538(%rax)
    fbb8:	00 00 00 00 
    fbbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbc0:	48 c7 80 40 05 00 00 	movq   $0x0,0x540(%rax)
    fbc7:	00 00 00 00 
    fbcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbcf:	48 c7 80 48 05 00 00 	movq   $0x0,0x548(%rax)
    fbd6:	00 00 00 00 
    fbda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbde:	48 c7 80 50 05 00 00 	movq   $0x0,0x550(%rax)
    fbe5:	00 00 00 00 
    fbe9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbed:	48 c7 80 58 05 00 00 	movq   $0x0,0x558(%rax)
    fbf4:	00 00 00 00 
    fbf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbfc:	48 c7 80 60 05 00 00 	movq   $0x0,0x560(%rax)
    fc03:	00 00 00 00 
    fc07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc0b:	48 c7 80 68 05 00 00 	movq   $0x0,0x568(%rax)
    fc12:	00 00 00 00 
    fc16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc1a:	48 c7 80 70 05 00 00 	movq   $0x0,0x570(%rax)
    fc21:	00 00 00 00 
    fc25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc29:	48 c7 80 78 05 00 00 	movq   $0x0,0x578(%rax)
    fc30:	00 00 00 00 
    fc34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc38:	48 c7 80 80 05 00 00 	movq   $0x0,0x580(%rax)
    fc3f:	00 00 00 00 
    fc43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc47:	48 c7 80 88 05 00 00 	movq   $0x0,0x588(%rax)
    fc4e:	00 00 00 00 
    fc52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc56:	48 c7 80 90 05 00 00 	movq   $0x0,0x590(%rax)
    fc5d:	00 00 00 00 
    fc61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc65:	48 c7 80 98 05 00 00 	movq   $0x0,0x598(%rax)
    fc6c:	00 00 00 00 
    fc70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc74:	48 c7 80 a0 05 00 00 	movq   $0x0,0x5a0(%rax)
    fc7b:	00 00 00 00 
    fc7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc83:	48 c7 80 a8 05 00 00 	movq   $0x0,0x5a8(%rax)
    fc8a:	00 00 00 00 
    fc8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc92:	48 c7 80 b0 05 00 00 	movq   $0x0,0x5b0(%rax)
    fc99:	00 00 00 00 
    fc9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fca1:	48 c7 80 b8 05 00 00 	movq   $0x0,0x5b8(%rax)
    fca8:	00 00 00 00 
    fcac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcb0:	48 c7 80 c0 05 00 00 	movq   $0x0,0x5c0(%rax)
    fcb7:	00 00 00 00 
    fcbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcbf:	48 c7 80 c8 05 00 00 	movq   $0x0,0x5c8(%rax)
    fcc6:	00 00 00 00 
    fcca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcce:	48 c7 80 d0 05 00 00 	movq   $0x0,0x5d0(%rax)
    fcd5:	00 00 00 00 
    fcd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcdd:	48 c7 80 d8 05 00 00 	movq   $0x0,0x5d8(%rax)
    fce4:	00 00 00 00 
    fce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcec:	48 c7 80 e0 05 00 00 	movq   $0x0,0x5e0(%rax)
    fcf3:	00 00 00 00 
    fcf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcfb:	48 c7 80 e8 05 00 00 	movq   $0x0,0x5e8(%rax)
    fd02:	00 00 00 00 
    fd06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd0a:	48 c7 80 f0 05 00 00 	movq   $0x0,0x5f0(%rax)
    fd11:	00 00 00 00 
    fd15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd19:	48 c7 80 f8 05 00 00 	movq   $0x0,0x5f8(%rax)
    fd20:	00 00 00 00 
    fd24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd28:	48 c7 80 00 06 00 00 	movq   $0x0,0x600(%rax)
    fd2f:	00 00 00 00 
    fd33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd37:	48 c7 80 08 06 00 00 	movq   $0x0,0x608(%rax)
    fd3e:	00 00 00 00 
    fd42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd46:	48 c7 80 10 06 00 00 	movq   $0x0,0x610(%rax)
    fd4d:	00 00 00 00 
    fd51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd55:	48 c7 80 18 06 00 00 	movq   $0x0,0x618(%rax)
    fd5c:	00 00 00 00 
    fd60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd64:	48 c7 80 20 06 00 00 	movq   $0x0,0x620(%rax)
    fd6b:	00 00 00 00 
    fd6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd73:	48 c7 80 28 06 00 00 	movq   $0x0,0x628(%rax)
    fd7a:	00 00 00 00 
    fd7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd82:	48 c7 80 30 06 00 00 	movq   $0x0,0x630(%rax)
    fd89:	00 00 00 00 
    fd8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd91:	48 c7 80 38 06 00 00 	movq   $0x0,0x638(%rax)
    fd98:	00 00 00 00 
    fd9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fda0:	48 c7 80 40 06 00 00 	movq   $0x0,0x640(%rax)
    fda7:	00 00 00 00 
    fdab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdaf:	48 c7 80 48 06 00 00 	movq   $0x0,0x648(%rax)
    fdb6:	00 00 00 00 
    fdba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdbe:	48 c7 80 50 06 00 00 	movq   $0x0,0x650(%rax)
    fdc5:	00 00 00 00 
    fdc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdcd:	48 c7 80 58 06 00 00 	movq   $0x0,0x658(%rax)
    fdd4:	00 00 00 00 
    fdd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fddc:	48 c7 80 60 06 00 00 	movq   $0x0,0x660(%rax)
    fde3:	00 00 00 00 
    fde7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdeb:	48 c7 80 68 06 00 00 	movq   $0x0,0x668(%rax)
    fdf2:	00 00 00 00 
    fdf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdfa:	48 c7 80 70 06 00 00 	movq   $0x0,0x670(%rax)
    fe01:	00 00 00 00 
    fe05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe09:	48 c7 80 78 06 00 00 	movq   $0x0,0x678(%rax)
    fe10:	00 00 00 00 
    fe14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe18:	48 c7 80 80 06 00 00 	movq   $0x0,0x680(%rax)
    fe1f:	00 00 00 00 
    fe23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe27:	48 c7 80 88 06 00 00 	movq   $0x0,0x688(%rax)
    fe2e:	00 00 00 00 
    fe32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe36:	48 c7 80 90 06 00 00 	movq   $0x0,0x690(%rax)
    fe3d:	00 00 00 00 
    fe41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe45:	48 c7 80 98 06 00 00 	movq   $0x0,0x698(%rax)
    fe4c:	00 00 00 00 
    fe50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe54:	48 c7 80 a0 06 00 00 	movq   $0x0,0x6a0(%rax)
    fe5b:	00 00 00 00 
    fe5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe63:	48 c7 80 a8 06 00 00 	movq   $0x0,0x6a8(%rax)
    fe6a:	00 00 00 00 
    fe6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe72:	48 c7 80 b0 06 00 00 	movq   $0x0,0x6b0(%rax)
    fe79:	00 00 00 00 
    fe7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe81:	48 c7 80 b8 06 00 00 	movq   $0x0,0x6b8(%rax)
    fe88:	00 00 00 00 
    fe8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe90:	48 c7 80 c0 06 00 00 	movq   $0x0,0x6c0(%rax)
    fe97:	00 00 00 00 
    fe9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe9f:	48 c7 80 c8 06 00 00 	movq   $0x0,0x6c8(%rax)
    fea6:	00 00 00 00 
    feaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    feae:	48 c7 80 d0 06 00 00 	movq   $0x0,0x6d0(%rax)
    feb5:	00 00 00 00 
    feb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    febd:	48 c7 80 d8 06 00 00 	movq   $0x0,0x6d8(%rax)
    fec4:	00 00 00 00 
    fec8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fecc:	48 c7 80 e0 06 00 00 	movq   $0x0,0x6e0(%rax)
    fed3:	00 00 00 00 
    fed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fedb:	48 c7 80 e8 06 00 00 	movq   $0x0,0x6e8(%rax)
    fee2:	00 00 00 00 
    fee6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    feea:	48 c7 80 f0 06 00 00 	movq   $0x0,0x6f0(%rax)
    fef1:	00 00 00 00 
    fef5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fef9:	48 c7 80 f8 06 00 00 	movq   $0x0,0x6f8(%rax)
    ff00:	00 00 00 00 
    ff04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff08:	48 c7 80 00 07 00 00 	movq   $0x0,0x700(%rax)
    ff0f:	00 00 00 00 
    ff13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff17:	48 c7 80 08 07 00 00 	movq   $0x0,0x708(%rax)
    ff1e:	00 00 00 00 
    ff22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff26:	48 c7 80 10 07 00 00 	movq   $0x0,0x710(%rax)
    ff2d:	00 00 00 00 
    ff31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff35:	48 c7 80 18 07 00 00 	movq   $0x0,0x718(%rax)
    ff3c:	00 00 00 00 
    ff40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff44:	48 c7 80 20 07 00 00 	movq   $0x0,0x720(%rax)
    ff4b:	00 00 00 00 
    ff4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff53:	48 c7 80 28 07 00 00 	movq   $0x0,0x728(%rax)
    ff5a:	00 00 00 00 
    ff5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff62:	48 c7 80 30 07 00 00 	movq   $0x0,0x730(%rax)
    ff69:	00 00 00 00 
    ff6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff71:	48 c7 80 38 07 00 00 	movq   $0x0,0x738(%rax)
    ff78:	00 00 00 00 
    ff7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff80:	48 c7 80 40 07 00 00 	movq   $0x0,0x740(%rax)
    ff87:	00 00 00 00 
    ff8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff8f:	48 c7 80 48 07 00 00 	movq   $0x0,0x748(%rax)
    ff96:	00 00 00 00 
    ff9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff9e:	48 c7 80 50 07 00 00 	movq   $0x0,0x750(%rax)
    ffa5:	00 00 00 00 
    ffa9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffad:	48 c7 80 58 07 00 00 	movq   $0x0,0x758(%rax)
    ffb4:	00 00 00 00 
    ffb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffbc:	48 c7 80 60 07 00 00 	movq   $0x0,0x760(%rax)
    ffc3:	00 00 00 00 
    ffc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffcb:	48 c7 80 68 07 00 00 	movq   $0x0,0x768(%rax)
    ffd2:	00 00 00 00 
    ffd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffda:	48 c7 80 70 07 00 00 	movq   $0x0,0x770(%rax)
    ffe1:	00 00 00 00 
    ffe5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffe9:	48 c7 80 78 07 00 00 	movq   $0x0,0x778(%rax)
    fff0:	00 00 00 00 
    fff4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fff8:	48 c7 80 80 07 00 00 	movq   $0x0,0x780(%rax)
    ffff:	00 00 00 00 
   10003:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10007:	48 c7 80 88 07 00 00 	movq   $0x0,0x788(%rax)
   1000e:	00 00 00 00 
   10012:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10016:	48 c7 80 90 07 00 00 	movq   $0x0,0x790(%rax)
   1001d:	00 00 00 00 
   10021:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10025:	48 c7 80 98 07 00 00 	movq   $0x0,0x798(%rax)
   1002c:	00 00 00 00 
   10030:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10034:	48 c7 80 a0 07 00 00 	movq   $0x0,0x7a0(%rax)
   1003b:	00 00 00 00 
   1003f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10043:	48 c7 80 a8 07 00 00 	movq   $0x0,0x7a8(%rax)
   1004a:	00 00 00 00 
   1004e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10052:	48 c7 80 b0 07 00 00 	movq   $0x0,0x7b0(%rax)
   10059:	00 00 00 00 
   1005d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10061:	48 c7 80 b8 07 00 00 	movq   $0x0,0x7b8(%rax)
   10068:	00 00 00 00 
   1006c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10070:	48 c7 80 c0 07 00 00 	movq   $0x0,0x7c0(%rax)
   10077:	00 00 00 00 
   1007b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1007f:	48 c7 80 c8 07 00 00 	movq   $0x0,0x7c8(%rax)
   10086:	00 00 00 00 
   1008a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1008e:	48 c7 80 d0 07 00 00 	movq   $0x0,0x7d0(%rax)
   10095:	00 00 00 00 
   10099:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1009d:	48 c7 80 d8 07 00 00 	movq   $0x0,0x7d8(%rax)
   100a4:	00 00 00 00 
   100a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100ac:	48 c7 80 e0 07 00 00 	movq   $0x0,0x7e0(%rax)
   100b3:	00 00 00 00 
   100b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100bb:	48 c7 80 e8 07 00 00 	movq   $0x0,0x7e8(%rax)
   100c2:	00 00 00 00 
   100c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100ca:	48 c7 80 f0 07 00 00 	movq   $0x0,0x7f0(%rax)
   100d1:	00 00 00 00 
   100d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100d9:	48 c7 80 f8 07 00 00 	movq   $0x0,0x7f8(%rax)
   100e0:	00 00 00 00 
   100e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100e8:	48 c7 80 00 08 00 00 	movq   $0x0,0x800(%rax)
   100ef:	00 00 00 00 
   100f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100f7:	48 c7 80 08 08 00 00 	movq   $0x0,0x808(%rax)
   100fe:	00 00 00 00 
   10102:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10106:	48 c7 80 10 08 00 00 	movq   $0x0,0x810(%rax)
   1010d:	00 00 00 00 
   10111:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10115:	48 c7 80 18 08 00 00 	movq   $0x0,0x818(%rax)
   1011c:	00 00 00 00 
   10120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10124:	48 c7 80 20 08 00 00 	movq   $0x0,0x820(%rax)
   1012b:	00 00 00 00 
   1012f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10133:	48 c7 80 28 08 00 00 	movq   $0x0,0x828(%rax)
   1013a:	00 00 00 00 
   1013e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10142:	48 c7 80 30 08 00 00 	movq   $0x0,0x830(%rax)
   10149:	00 00 00 00 
   1014d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10151:	48 c7 80 38 08 00 00 	movq   $0x0,0x838(%rax)
   10158:	00 00 00 00 
   1015c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10160:	48 c7 80 40 08 00 00 	movq   $0x0,0x840(%rax)
   10167:	00 00 00 00 
   1016b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1016f:	48 c7 80 48 08 00 00 	movq   $0x0,0x848(%rax)
   10176:	00 00 00 00 
   1017a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1017e:	48 c7 80 50 08 00 00 	movq   $0x0,0x850(%rax)
   10185:	00 00 00 00 
   10189:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1018d:	48 c7 80 58 08 00 00 	movq   $0x0,0x858(%rax)
   10194:	00 00 00 00 
   10198:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1019c:	48 c7 80 60 08 00 00 	movq   $0x0,0x860(%rax)
   101a3:	00 00 00 00 
   101a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101ab:	48 c7 80 68 08 00 00 	movq   $0x0,0x868(%rax)
   101b2:	00 00 00 00 
   101b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101ba:	48 c7 80 70 08 00 00 	movq   $0x0,0x870(%rax)
   101c1:	00 00 00 00 
   101c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101c9:	48 c7 80 78 08 00 00 	movq   $0x0,0x878(%rax)
   101d0:	00 00 00 00 
   101d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101d8:	48 c7 80 80 08 00 00 	movq   $0x0,0x880(%rax)
   101df:	00 00 00 00 
   101e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101e7:	48 c7 80 88 08 00 00 	movq   $0x0,0x888(%rax)
   101ee:	00 00 00 00 
   101f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101f6:	48 c7 80 90 08 00 00 	movq   $0x0,0x890(%rax)
   101fd:	00 00 00 00 
   10201:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10205:	48 c7 80 98 08 00 00 	movq   $0x0,0x898(%rax)
   1020c:	00 00 00 00 
   10210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10214:	48 c7 80 a0 08 00 00 	movq   $0x0,0x8a0(%rax)
   1021b:	00 00 00 00 
   1021f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10223:	48 c7 80 a8 08 00 00 	movq   $0x0,0x8a8(%rax)
   1022a:	00 00 00 00 
   1022e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10232:	48 c7 80 b0 08 00 00 	movq   $0x0,0x8b0(%rax)
   10239:	00 00 00 00 
   1023d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10241:	48 c7 80 b8 08 00 00 	movq   $0x0,0x8b8(%rax)
   10248:	00 00 00 00 
   1024c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10250:	48 c7 80 c0 08 00 00 	movq   $0x0,0x8c0(%rax)
   10257:	00 00 00 00 
   1025b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1025f:	48 c7 80 c8 08 00 00 	movq   $0x0,0x8c8(%rax)
   10266:	00 00 00 00 
   1026a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1026e:	48 c7 80 d0 08 00 00 	movq   $0x0,0x8d0(%rax)
   10275:	00 00 00 00 
   10279:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1027d:	48 c7 80 d8 08 00 00 	movq   $0x0,0x8d8(%rax)
   10284:	00 00 00 00 
   10288:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1028c:	48 c7 80 e0 08 00 00 	movq   $0x0,0x8e0(%rax)
   10293:	00 00 00 00 
   10297:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1029b:	48 c7 80 e8 08 00 00 	movq   $0x0,0x8e8(%rax)
   102a2:	00 00 00 00 
   102a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102aa:	48 c7 80 f0 08 00 00 	movq   $0x0,0x8f0(%rax)
   102b1:	00 00 00 00 
   102b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102b9:	48 c7 80 f8 08 00 00 	movq   $0x0,0x8f8(%rax)
   102c0:	00 00 00 00 
   102c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102c8:	48 c7 80 00 09 00 00 	movq   $0x0,0x900(%rax)
   102cf:	00 00 00 00 
   102d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102d7:	48 c7 80 08 09 00 00 	movq   $0x0,0x908(%rax)
   102de:	00 00 00 00 
   102e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102e6:	48 c7 80 10 09 00 00 	movq   $0x0,0x910(%rax)
   102ed:	00 00 00 00 
   102f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102f5:	48 c7 80 18 09 00 00 	movq   $0x0,0x918(%rax)
   102fc:	00 00 00 00 
   10300:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10304:	48 c7 80 20 09 00 00 	movq   $0x0,0x920(%rax)
   1030b:	00 00 00 00 
   1030f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10313:	48 c7 80 28 09 00 00 	movq   $0x0,0x928(%rax)
   1031a:	00 00 00 00 
   1031e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10322:	48 c7 80 30 09 00 00 	movq   $0x0,0x930(%rax)
   10329:	00 00 00 00 
   1032d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10331:	48 c7 80 38 09 00 00 	movq   $0x0,0x938(%rax)
   10338:	00 00 00 00 
   1033c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10340:	48 c7 80 40 09 00 00 	movq   $0x0,0x940(%rax)
   10347:	00 00 00 00 
   1034b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1034f:	48 c7 80 48 09 00 00 	movq   $0x0,0x948(%rax)
   10356:	00 00 00 00 
   1035a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1035e:	48 c7 80 50 09 00 00 	movq   $0x0,0x950(%rax)
   10365:	00 00 00 00 
   10369:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1036d:	48 c7 80 58 09 00 00 	movq   $0x0,0x958(%rax)
   10374:	00 00 00 00 
   10378:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1037c:	48 c7 80 60 09 00 00 	movq   $0x0,0x960(%rax)
   10383:	00 00 00 00 
   10387:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1038b:	48 c7 80 68 09 00 00 	movq   $0x0,0x968(%rax)
   10392:	00 00 00 00 
   10396:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1039a:	48 c7 80 70 09 00 00 	movq   $0x0,0x970(%rax)
   103a1:	00 00 00 00 
   103a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103a9:	48 c7 80 78 09 00 00 	movq   $0x0,0x978(%rax)
   103b0:	00 00 00 00 
   103b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103b8:	48 c7 80 80 09 00 00 	movq   $0x0,0x980(%rax)
   103bf:	00 00 00 00 
   103c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103c7:	48 c7 80 88 09 00 00 	movq   $0x0,0x988(%rax)
   103ce:	00 00 00 00 
   103d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103d6:	48 c7 80 90 09 00 00 	movq   $0x0,0x990(%rax)
   103dd:	00 00 00 00 
   103e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103e5:	48 c7 80 98 09 00 00 	movq   $0x0,0x998(%rax)
   103ec:	00 00 00 00 
   103f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103f4:	48 c7 80 a0 09 00 00 	movq   $0x0,0x9a0(%rax)
   103fb:	00 00 00 00 
   103ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10403:	48 c7 80 a8 09 00 00 	movq   $0x0,0x9a8(%rax)
   1040a:	00 00 00 00 
   1040e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10412:	48 c7 80 b0 09 00 00 	movq   $0x0,0x9b0(%rax)
   10419:	00 00 00 00 
   1041d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10421:	48 c7 80 b8 09 00 00 	movq   $0x0,0x9b8(%rax)
   10428:	00 00 00 00 
   1042c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10430:	48 c7 80 c0 09 00 00 	movq   $0x0,0x9c0(%rax)
   10437:	00 00 00 00 
   1043b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1043f:	48 c7 80 c8 09 00 00 	movq   $0x0,0x9c8(%rax)
   10446:	00 00 00 00 
   1044a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1044e:	48 c7 80 d0 09 00 00 	movq   $0x0,0x9d0(%rax)
   10455:	00 00 00 00 
   10459:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1045d:	48 c7 80 d8 09 00 00 	movq   $0x0,0x9d8(%rax)
   10464:	00 00 00 00 
   10468:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1046c:	48 c7 80 e0 09 00 00 	movq   $0x0,0x9e0(%rax)
   10473:	00 00 00 00 
   10477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1047b:	48 c7 80 e8 09 00 00 	movq   $0x0,0x9e8(%rax)
   10482:	00 00 00 00 
   10486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1048a:	48 c7 80 f0 09 00 00 	movq   $0x0,0x9f0(%rax)
   10491:	00 00 00 00 
   10495:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10499:	48 c7 80 f8 09 00 00 	movq   $0x0,0x9f8(%rax)
   104a0:	00 00 00 00 
   104a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104a8:	48 c7 80 00 0a 00 00 	movq   $0x0,0xa00(%rax)
   104af:	00 00 00 00 
   104b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104b7:	48 c7 80 08 0a 00 00 	movq   $0x0,0xa08(%rax)
   104be:	00 00 00 00 
   104c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104c6:	48 c7 80 10 0a 00 00 	movq   $0x0,0xa10(%rax)
   104cd:	00 00 00 00 
   104d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104d5:	48 c7 80 18 0a 00 00 	movq   $0x0,0xa18(%rax)
   104dc:	00 00 00 00 
   104e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104e4:	48 c7 80 20 0a 00 00 	movq   $0x0,0xa20(%rax)
   104eb:	00 00 00 00 
   104ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104f3:	48 c7 80 28 0a 00 00 	movq   $0x0,0xa28(%rax)
   104fa:	00 00 00 00 
   104fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10502:	48 c7 80 30 0a 00 00 	movq   $0x0,0xa30(%rax)
   10509:	00 00 00 00 
   1050d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10511:	48 c7 80 38 0a 00 00 	movq   $0x0,0xa38(%rax)
   10518:	00 00 00 00 
   1051c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10520:	48 c7 80 40 0a 00 00 	movq   $0x0,0xa40(%rax)
   10527:	00 00 00 00 
   1052b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1052f:	48 c7 80 48 0a 00 00 	movq   $0x0,0xa48(%rax)
   10536:	00 00 00 00 
   1053a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1053e:	48 c7 80 50 0a 00 00 	movq   $0x0,0xa50(%rax)
   10545:	00 00 00 00 
   10549:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1054d:	48 c7 80 58 0a 00 00 	movq   $0x0,0xa58(%rax)
   10554:	00 00 00 00 
   10558:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1055c:	48 c7 80 60 0a 00 00 	movq   $0x0,0xa60(%rax)
   10563:	00 00 00 00 
   10567:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1056b:	48 c7 80 68 0a 00 00 	movq   $0x0,0xa68(%rax)
   10572:	00 00 00 00 
   10576:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1057a:	48 c7 80 70 0a 00 00 	movq   $0x0,0xa70(%rax)
   10581:	00 00 00 00 
   10585:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10589:	48 c7 80 78 0a 00 00 	movq   $0x0,0xa78(%rax)
   10590:	00 00 00 00 
   10594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10598:	48 c7 80 80 0a 00 00 	movq   $0x0,0xa80(%rax)
   1059f:	00 00 00 00 
   105a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105a7:	48 c7 80 88 0a 00 00 	movq   $0x0,0xa88(%rax)
   105ae:	00 00 00 00 
   105b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105b6:	48 c7 80 90 0a 00 00 	movq   $0x0,0xa90(%rax)
   105bd:	00 00 00 00 
   105c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105c5:	48 c7 80 98 0a 00 00 	movq   $0x0,0xa98(%rax)
   105cc:	00 00 00 00 
   105d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105d4:	48 c7 80 a0 0a 00 00 	movq   $0x0,0xaa0(%rax)
   105db:	00 00 00 00 
   105df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105e3:	48 c7 80 a8 0a 00 00 	movq   $0x0,0xaa8(%rax)
   105ea:	00 00 00 00 
   105ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105f2:	48 c7 80 b0 0a 00 00 	movq   $0x0,0xab0(%rax)
   105f9:	00 00 00 00 
   105fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10601:	48 c7 80 b8 0a 00 00 	movq   $0x0,0xab8(%rax)
   10608:	00 00 00 00 
   1060c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10610:	48 c7 80 c0 0a 00 00 	movq   $0x0,0xac0(%rax)
   10617:	00 00 00 00 
   1061b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1061f:	48 c7 80 c8 0a 00 00 	movq   $0x0,0xac8(%rax)
   10626:	00 00 00 00 
   1062a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1062e:	48 c7 80 d0 0a 00 00 	movq   $0x0,0xad0(%rax)
   10635:	00 00 00 00 
   10639:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1063d:	48 c7 80 d8 0a 00 00 	movq   $0x0,0xad8(%rax)
   10644:	00 00 00 00 
   10648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1064c:	48 c7 80 e0 0a 00 00 	movq   $0x0,0xae0(%rax)
   10653:	00 00 00 00 
   10657:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1065b:	48 c7 80 e8 0a 00 00 	movq   $0x0,0xae8(%rax)
   10662:	00 00 00 00 
   10666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1066a:	48 c7 80 f0 0a 00 00 	movq   $0x0,0xaf0(%rax)
   10671:	00 00 00 00 
   10675:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10679:	48 c7 80 f8 0a 00 00 	movq   $0x0,0xaf8(%rax)
   10680:	00 00 00 00 
   10684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10688:	48 c7 80 00 0b 00 00 	movq   $0x0,0xb00(%rax)
   1068f:	00 00 00 00 
   10693:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10697:	48 c7 80 08 0b 00 00 	movq   $0x0,0xb08(%rax)
   1069e:	00 00 00 00 
   106a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106a6:	48 c7 80 10 0b 00 00 	movq   $0x0,0xb10(%rax)
   106ad:	00 00 00 00 
   106b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106b5:	48 c7 80 18 0b 00 00 	movq   $0x0,0xb18(%rax)
   106bc:	00 00 00 00 
   106c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106c4:	48 c7 80 20 0b 00 00 	movq   $0x0,0xb20(%rax)
   106cb:	00 00 00 00 
   106cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106d3:	48 c7 80 28 0b 00 00 	movq   $0x0,0xb28(%rax)
   106da:	00 00 00 00 
   106de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106e2:	48 c7 80 30 0b 00 00 	movq   $0x0,0xb30(%rax)
   106e9:	00 00 00 00 
   106ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106f1:	48 c7 80 38 0b 00 00 	movq   $0x0,0xb38(%rax)
   106f8:	00 00 00 00 
   106fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10700:	48 c7 80 40 0b 00 00 	movq   $0x0,0xb40(%rax)
   10707:	00 00 00 00 
   1070b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1070f:	48 c7 80 48 0b 00 00 	movq   $0x0,0xb48(%rax)
   10716:	00 00 00 00 
   1071a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1071e:	48 c7 80 50 0b 00 00 	movq   $0x0,0xb50(%rax)
   10725:	00 00 00 00 
   10729:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1072d:	48 c7 80 58 0b 00 00 	movq   $0x0,0xb58(%rax)
   10734:	00 00 00 00 
   10738:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1073c:	48 c7 80 60 0b 00 00 	movq   $0x0,0xb60(%rax)
   10743:	00 00 00 00 
   10747:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1074b:	48 c7 80 68 0b 00 00 	movq   $0x0,0xb68(%rax)
   10752:	00 00 00 00 
   10756:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1075a:	48 c7 80 70 0b 00 00 	movq   $0x0,0xb70(%rax)
   10761:	00 00 00 00 
   10765:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10769:	48 c7 80 78 0b 00 00 	movq   $0x0,0xb78(%rax)
   10770:	00 00 00 00 
   10774:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10778:	48 c7 80 80 0b 00 00 	movq   $0x0,0xb80(%rax)
   1077f:	00 00 00 00 
   10783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10787:	48 c7 80 88 0b 00 00 	movq   $0x0,0xb88(%rax)
   1078e:	00 00 00 00 
   10792:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10796:	48 c7 80 90 0b 00 00 	movq   $0x0,0xb90(%rax)
   1079d:	00 00 00 00 
   107a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107a5:	48 c7 80 98 0b 00 00 	movq   $0x0,0xb98(%rax)
   107ac:	00 00 00 00 
   107b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107b4:	48 c7 80 a0 0b 00 00 	movq   $0x0,0xba0(%rax)
   107bb:	00 00 00 00 
   107bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107c3:	48 c7 80 a8 0b 00 00 	movq   $0x0,0xba8(%rax)
   107ca:	00 00 00 00 
   107ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107d2:	48 c7 80 b0 0b 00 00 	movq   $0x0,0xbb0(%rax)
   107d9:	00 00 00 00 
   107dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107e1:	48 c7 80 b8 0b 00 00 	movq   $0x0,0xbb8(%rax)
   107e8:	00 00 00 00 
   107ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107f0:	48 c7 80 c0 0b 00 00 	movq   $0x0,0xbc0(%rax)
   107f7:	00 00 00 00 
   107fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107ff:	48 c7 80 c8 0b 00 00 	movq   $0x0,0xbc8(%rax)
   10806:	00 00 00 00 
   1080a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1080e:	48 c7 80 d0 0b 00 00 	movq   $0x0,0xbd0(%rax)
   10815:	00 00 00 00 
   10819:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1081d:	48 c7 80 d8 0b 00 00 	movq   $0x0,0xbd8(%rax)
   10824:	00 00 00 00 
   10828:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1082c:	48 c7 80 e0 0b 00 00 	movq   $0x0,0xbe0(%rax)
   10833:	00 00 00 00 
   10837:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1083b:	48 c7 80 e8 0b 00 00 	movq   $0x0,0xbe8(%rax)
   10842:	00 00 00 00 
   10846:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1084a:	48 c7 80 f0 0b 00 00 	movq   $0x0,0xbf0(%rax)
   10851:	00 00 00 00 
   10855:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10859:	48 c7 80 f8 0b 00 00 	movq   $0x0,0xbf8(%rax)
   10860:	00 00 00 00 
   10864:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10868:	48 c7 80 00 0c 00 00 	movq   $0x0,0xc00(%rax)
   1086f:	00 00 00 00 
   10873:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10877:	48 c7 80 08 0c 00 00 	movq   $0x0,0xc08(%rax)
   1087e:	00 00 00 00 
   10882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10886:	48 c7 80 10 0c 00 00 	movq   $0x0,0xc10(%rax)
   1088d:	00 00 00 00 
   10891:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10895:	48 c7 80 18 0c 00 00 	movq   $0x0,0xc18(%rax)
   1089c:	00 00 00 00 
   108a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108a4:	48 c7 80 20 0c 00 00 	movq   $0x0,0xc20(%rax)
   108ab:	00 00 00 00 
   108af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108b3:	48 c7 80 28 0c 00 00 	movq   $0x0,0xc28(%rax)
   108ba:	00 00 00 00 
   108be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108c2:	48 c7 80 30 0c 00 00 	movq   $0x0,0xc30(%rax)
   108c9:	00 00 00 00 
   108cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108d1:	48 c7 80 38 0c 00 00 	movq   $0x0,0xc38(%rax)
   108d8:	00 00 00 00 
   108dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108e0:	48 c7 80 40 0c 00 00 	movq   $0x0,0xc40(%rax)
   108e7:	00 00 00 00 
   108eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108ef:	48 c7 80 48 0c 00 00 	movq   $0x0,0xc48(%rax)
   108f6:	00 00 00 00 
   108fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108fe:	48 c7 80 50 0c 00 00 	movq   $0x0,0xc50(%rax)
   10905:	00 00 00 00 
   10909:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1090d:	48 c7 80 58 0c 00 00 	movq   $0x0,0xc58(%rax)
   10914:	00 00 00 00 
   10918:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1091c:	48 c7 80 60 0c 00 00 	movq   $0x0,0xc60(%rax)
   10923:	00 00 00 00 
   10927:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1092b:	48 c7 80 68 0c 00 00 	movq   $0x0,0xc68(%rax)
   10932:	00 00 00 00 
   10936:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1093a:	48 c7 80 70 0c 00 00 	movq   $0x0,0xc70(%rax)
   10941:	00 00 00 00 
   10945:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10949:	48 c7 80 78 0c 00 00 	movq   $0x0,0xc78(%rax)
   10950:	00 00 00 00 
   10954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10958:	48 c7 80 80 0c 00 00 	movq   $0x0,0xc80(%rax)
   1095f:	00 00 00 00 
   10963:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10967:	48 c7 80 88 0c 00 00 	movq   $0x0,0xc88(%rax)
   1096e:	00 00 00 00 
   10972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10976:	48 c7 80 90 0c 00 00 	movq   $0x0,0xc90(%rax)
   1097d:	00 00 00 00 
   10981:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10985:	48 c7 80 98 0c 00 00 	movq   $0x0,0xc98(%rax)
   1098c:	00 00 00 00 
   10990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10994:	48 c7 80 a0 0c 00 00 	movq   $0x0,0xca0(%rax)
   1099b:	00 00 00 00 
   1099f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109a3:	48 c7 80 a8 0c 00 00 	movq   $0x0,0xca8(%rax)
   109aa:	00 00 00 00 
   109ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109b2:	48 c7 80 b0 0c 00 00 	movq   $0x0,0xcb0(%rax)
   109b9:	00 00 00 00 
   109bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109c1:	48 c7 80 b8 0c 00 00 	movq   $0x0,0xcb8(%rax)
   109c8:	00 00 00 00 
   109cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109d0:	48 c7 80 c0 0c 00 00 	movq   $0x0,0xcc0(%rax)
   109d7:	00 00 00 00 
   109db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109df:	48 c7 80 c8 0c 00 00 	movq   $0x0,0xcc8(%rax)
   109e6:	00 00 00 00 
   109ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109ee:	48 c7 80 d0 0c 00 00 	movq   $0x0,0xcd0(%rax)
   109f5:	00 00 00 00 
   109f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109fd:	48 c7 80 d8 0c 00 00 	movq   $0x0,0xcd8(%rax)
   10a04:	00 00 00 00 
   10a08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a0c:	48 c7 80 e0 0c 00 00 	movq   $0x0,0xce0(%rax)
   10a13:	00 00 00 00 
   10a17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a1b:	48 c7 80 e8 0c 00 00 	movq   $0x0,0xce8(%rax)
   10a22:	00 00 00 00 
   10a26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a2a:	48 c7 80 f0 0c 00 00 	movq   $0x0,0xcf0(%rax)
   10a31:	00 00 00 00 
   10a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a39:	48 c7 80 f8 0c 00 00 	movq   $0x0,0xcf8(%rax)
   10a40:	00 00 00 00 
   10a44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a48:	48 c7 80 00 0d 00 00 	movq   $0x0,0xd00(%rax)
   10a4f:	00 00 00 00 
   10a53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a57:	48 c7 80 08 0d 00 00 	movq   $0x0,0xd08(%rax)
   10a5e:	00 00 00 00 
   10a62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a66:	48 c7 80 10 0d 00 00 	movq   $0x0,0xd10(%rax)
   10a6d:	00 00 00 00 
   10a71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a75:	48 c7 80 18 0d 00 00 	movq   $0x0,0xd18(%rax)
   10a7c:	00 00 00 00 
   10a80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a84:	48 c7 80 20 0d 00 00 	movq   $0x0,0xd20(%rax)
   10a8b:	00 00 00 00 
   10a8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a93:	48 c7 80 28 0d 00 00 	movq   $0x0,0xd28(%rax)
   10a9a:	00 00 00 00 
   10a9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10aa2:	48 c7 80 30 0d 00 00 	movq   $0x0,0xd30(%rax)
   10aa9:	00 00 00 00 
   10aad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ab1:	48 c7 80 38 0d 00 00 	movq   $0x0,0xd38(%rax)
   10ab8:	00 00 00 00 
   10abc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ac0:	48 c7 80 40 0d 00 00 	movq   $0x0,0xd40(%rax)
   10ac7:	00 00 00 00 
   10acb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10acf:	48 c7 80 48 0d 00 00 	movq   $0x0,0xd48(%rax)
   10ad6:	00 00 00 00 
   10ada:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ade:	48 c7 80 50 0d 00 00 	movq   $0x0,0xd50(%rax)
   10ae5:	00 00 00 00 
   10ae9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10aed:	48 c7 80 58 0d 00 00 	movq   $0x0,0xd58(%rax)
   10af4:	00 00 00 00 
   10af8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10afc:	48 c7 80 60 0d 00 00 	movq   $0x0,0xd60(%rax)
   10b03:	00 00 00 00 
   10b07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b0b:	48 c7 80 68 0d 00 00 	movq   $0x0,0xd68(%rax)
   10b12:	00 00 00 00 
   10b16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b1a:	48 c7 80 70 0d 00 00 	movq   $0x0,0xd70(%rax)
   10b21:	00 00 00 00 
   10b25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b29:	48 c7 80 78 0d 00 00 	movq   $0x0,0xd78(%rax)
   10b30:	00 00 00 00 
   10b34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b38:	48 c7 80 80 0d 00 00 	movq   $0x0,0xd80(%rax)
   10b3f:	00 00 00 00 
   10b43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b47:	48 c7 80 88 0d 00 00 	movq   $0x0,0xd88(%rax)
   10b4e:	00 00 00 00 
   10b52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b56:	48 c7 80 90 0d 00 00 	movq   $0x0,0xd90(%rax)
   10b5d:	00 00 00 00 
   10b61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b65:	48 c7 80 98 0d 00 00 	movq   $0x0,0xd98(%rax)
   10b6c:	00 00 00 00 
   10b70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b74:	48 c7 80 a0 0d 00 00 	movq   $0x0,0xda0(%rax)
   10b7b:	00 00 00 00 
   10b7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b83:	48 c7 80 a8 0d 00 00 	movq   $0x0,0xda8(%rax)
   10b8a:	00 00 00 00 
   10b8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b92:	48 c7 80 b0 0d 00 00 	movq   $0x0,0xdb0(%rax)
   10b99:	00 00 00 00 
   10b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ba1:	48 c7 80 b8 0d 00 00 	movq   $0x0,0xdb8(%rax)
   10ba8:	00 00 00 00 
   10bac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bb0:	48 c7 80 c0 0d 00 00 	movq   $0x0,0xdc0(%rax)
   10bb7:	00 00 00 00 
   10bbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bbf:	48 c7 80 c8 0d 00 00 	movq   $0x0,0xdc8(%rax)
   10bc6:	00 00 00 00 
   10bca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bce:	48 c7 80 d0 0d 00 00 	movq   $0x0,0xdd0(%rax)
   10bd5:	00 00 00 00 
   10bd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bdd:	48 c7 80 d8 0d 00 00 	movq   $0x0,0xdd8(%rax)
   10be4:	00 00 00 00 
   10be8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bec:	48 c7 80 e0 0d 00 00 	movq   $0x0,0xde0(%rax)
   10bf3:	00 00 00 00 
   10bf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bfb:	48 c7 80 e8 0d 00 00 	movq   $0x0,0xde8(%rax)
   10c02:	00 00 00 00 
   10c06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c0a:	48 c7 80 f0 0d 00 00 	movq   $0x0,0xdf0(%rax)
   10c11:	00 00 00 00 
   10c15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c19:	48 c7 80 f8 0d 00 00 	movq   $0x0,0xdf8(%rax)
   10c20:	00 00 00 00 
   10c24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c28:	48 c7 80 00 0e 00 00 	movq   $0x0,0xe00(%rax)
   10c2f:	00 00 00 00 
   10c33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c37:	48 c7 80 08 0e 00 00 	movq   $0x0,0xe08(%rax)
   10c3e:	00 00 00 00 
   10c42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c46:	48 c7 80 10 0e 00 00 	movq   $0x0,0xe10(%rax)
   10c4d:	00 00 00 00 
   10c51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c55:	48 c7 80 18 0e 00 00 	movq   $0x0,0xe18(%rax)
   10c5c:	00 00 00 00 
   10c60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c64:	48 c7 80 20 0e 00 00 	movq   $0x0,0xe20(%rax)
   10c6b:	00 00 00 00 
   10c6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c73:	48 c7 80 28 0e 00 00 	movq   $0x0,0xe28(%rax)
   10c7a:	00 00 00 00 
   10c7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c82:	48 c7 80 30 0e 00 00 	movq   $0x0,0xe30(%rax)
   10c89:	00 00 00 00 
   10c8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c91:	48 c7 80 38 0e 00 00 	movq   $0x0,0xe38(%rax)
   10c98:	00 00 00 00 
   10c9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ca0:	48 c7 80 40 0e 00 00 	movq   $0x0,0xe40(%rax)
   10ca7:	00 00 00 00 
   10cab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10caf:	48 c7 80 48 0e 00 00 	movq   $0x0,0xe48(%rax)
   10cb6:	00 00 00 00 
   10cba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cbe:	48 c7 80 50 0e 00 00 	movq   $0x0,0xe50(%rax)
   10cc5:	00 00 00 00 
   10cc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ccd:	48 c7 80 58 0e 00 00 	movq   $0x0,0xe58(%rax)
   10cd4:	00 00 00 00 
   10cd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cdc:	48 c7 80 60 0e 00 00 	movq   $0x0,0xe60(%rax)
   10ce3:	00 00 00 00 
   10ce7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ceb:	48 c7 80 68 0e 00 00 	movq   $0x0,0xe68(%rax)
   10cf2:	00 00 00 00 
   10cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cfa:	48 c7 80 70 0e 00 00 	movq   $0x0,0xe70(%rax)
   10d01:	00 00 00 00 
   10d05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d09:	48 c7 80 78 0e 00 00 	movq   $0x0,0xe78(%rax)
   10d10:	00 00 00 00 
   10d14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d18:	48 c7 80 80 0e 00 00 	movq   $0x0,0xe80(%rax)
   10d1f:	00 00 00 00 
   10d23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d27:	48 c7 80 88 0e 00 00 	movq   $0x0,0xe88(%rax)
   10d2e:	00 00 00 00 
   10d32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d36:	48 c7 80 90 0e 00 00 	movq   $0x0,0xe90(%rax)
   10d3d:	00 00 00 00 
   10d41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d45:	48 c7 80 98 0e 00 00 	movq   $0x0,0xe98(%rax)
   10d4c:	00 00 00 00 
   10d50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d54:	48 c7 80 a0 0e 00 00 	movq   $0x0,0xea0(%rax)
   10d5b:	00 00 00 00 
   10d5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d63:	48 c7 80 a8 0e 00 00 	movq   $0x0,0xea8(%rax)
   10d6a:	00 00 00 00 
   10d6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d72:	48 c7 80 b0 0e 00 00 	movq   $0x0,0xeb0(%rax)
   10d79:	00 00 00 00 
   10d7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d81:	48 c7 80 b8 0e 00 00 	movq   $0x0,0xeb8(%rax)
   10d88:	00 00 00 00 
   10d8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d90:	48 c7 80 c0 0e 00 00 	movq   $0x0,0xec0(%rax)
   10d97:	00 00 00 00 
   10d9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d9f:	48 c7 80 c8 0e 00 00 	movq   $0x0,0xec8(%rax)
   10da6:	00 00 00 00 
   10daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dae:	48 c7 80 d0 0e 00 00 	movq   $0x0,0xed0(%rax)
   10db5:	00 00 00 00 
   10db9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dbd:	48 c7 80 d8 0e 00 00 	movq   $0x0,0xed8(%rax)
   10dc4:	00 00 00 00 
   10dc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dcc:	48 c7 80 e0 0e 00 00 	movq   $0x0,0xee0(%rax)
   10dd3:	00 00 00 00 
   10dd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ddb:	48 c7 80 e8 0e 00 00 	movq   $0x0,0xee8(%rax)
   10de2:	00 00 00 00 
   10de6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dea:	48 c7 80 f0 0e 00 00 	movq   $0x0,0xef0(%rax)
   10df1:	00 00 00 00 
   10df5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10df9:	48 c7 80 f8 0e 00 00 	movq   $0x0,0xef8(%rax)
   10e00:	00 00 00 00 
   10e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e08:	48 c7 80 00 0f 00 00 	movq   $0x0,0xf00(%rax)
   10e0f:	00 00 00 00 
   10e13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e17:	48 c7 80 08 0f 00 00 	movq   $0x0,0xf08(%rax)
   10e1e:	00 00 00 00 
   10e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e26:	48 c7 80 10 0f 00 00 	movq   $0x0,0xf10(%rax)
   10e2d:	00 00 00 00 
   10e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e35:	48 c7 80 18 0f 00 00 	movq   $0x0,0xf18(%rax)
   10e3c:	00 00 00 00 
   10e40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e44:	48 c7 80 20 0f 00 00 	movq   $0x0,0xf20(%rax)
   10e4b:	00 00 00 00 
   10e4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e53:	48 c7 80 28 0f 00 00 	movq   $0x0,0xf28(%rax)
   10e5a:	00 00 00 00 
   10e5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e62:	48 c7 80 30 0f 00 00 	movq   $0x0,0xf30(%rax)
   10e69:	00 00 00 00 
   10e6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e71:	48 c7 80 38 0f 00 00 	movq   $0x0,0xf38(%rax)
   10e78:	00 00 00 00 
   10e7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e80:	48 c7 80 40 0f 00 00 	movq   $0x0,0xf40(%rax)
   10e87:	00 00 00 00 
   10e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e8f:	48 c7 80 48 0f 00 00 	movq   $0x0,0xf48(%rax)
   10e96:	00 00 00 00 
   10e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e9e:	48 c7 80 50 0f 00 00 	movq   $0x0,0xf50(%rax)
   10ea5:	00 00 00 00 
   10ea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ead:	48 c7 80 58 0f 00 00 	movq   $0x0,0xf58(%rax)
   10eb4:	00 00 00 00 
   10eb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ebc:	48 c7 80 60 0f 00 00 	movq   $0x0,0xf60(%rax)
   10ec3:	00 00 00 00 
   10ec7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ecb:	48 c7 80 68 0f 00 00 	movq   $0x0,0xf68(%rax)
   10ed2:	00 00 00 00 
   10ed6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10eda:	48 c7 80 70 0f 00 00 	movq   $0x0,0xf70(%rax)
   10ee1:	00 00 00 00 
   10ee5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ee9:	48 c7 80 78 0f 00 00 	movq   $0x0,0xf78(%rax)
   10ef0:	00 00 00 00 
   10ef4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ef8:	48 c7 80 80 0f 00 00 	movq   $0x0,0xf80(%rax)
   10eff:	00 00 00 00 
   10f03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f07:	48 c7 80 88 0f 00 00 	movq   $0x0,0xf88(%rax)
   10f0e:	00 00 00 00 
   10f12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f16:	48 c7 80 90 0f 00 00 	movq   $0x0,0xf90(%rax)
   10f1d:	00 00 00 00 
   10f21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f25:	48 c7 80 98 0f 00 00 	movq   $0x0,0xf98(%rax)
   10f2c:	00 00 00 00 
   10f30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f34:	48 c7 80 a0 0f 00 00 	movq   $0x0,0xfa0(%rax)
   10f3b:	00 00 00 00 
   10f3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f43:	48 c7 80 a8 0f 00 00 	movq   $0x0,0xfa8(%rax)
   10f4a:	00 00 00 00 
   10f4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f52:	48 c7 80 b0 0f 00 00 	movq   $0x0,0xfb0(%rax)
   10f59:	00 00 00 00 
        vkGetDeviceProcAddr                = PFN_vkGetDeviceProcAddr( vkGetDeviceProcAddr( device, "vkGetDeviceProcAddr" ) );
   10f5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f61:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10f65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10f69:	48 8d 0d c8 47 01 00 	lea    0x147c8(%rip),%rcx        # 25738 <_ZNSt8__detailL19__atomic_spin_countE+0x4>
   10f70:	48 89 ce             	mov    %rcx,%rsi
   10f73:	48 89 c7             	mov    %rax,%rdi
   10f76:	ff d2                	call   *%rdx
   10f78:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10f7c:	48 89 42 10          	mov    %rax,0x10(%rdx)
        vkDestroyDevice                    = PFN_vkDestroyDevice( vkGetDeviceProcAddr( device, "vkDestroyDevice" ) );
   10f80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f84:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10f88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10f8c:	48 8d 0d b9 47 01 00 	lea    0x147b9(%rip),%rcx        # 2574c <_ZNSt8__detailL19__atomic_spin_countE+0x18>
   10f93:	48 89 ce             	mov    %rcx,%rsi
   10f96:	48 89 c7             	mov    %rax,%rdi
   10f99:	ff d2                	call   *%rdx
   10f9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10f9f:	48 89 42 18          	mov    %rax,0x18(%rdx)
        vkGetDeviceQueue                   = PFN_vkGetDeviceQueue( vkGetDeviceProcAddr( device, "vkGetDeviceQueue" ) );
   10fa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fa7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10fab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10faf:	48 8d 0d a6 47 01 00 	lea    0x147a6(%rip),%rcx        # 2575c <_ZNSt8__detailL19__atomic_spin_countE+0x28>
   10fb6:	48 89 ce             	mov    %rcx,%rsi
   10fb9:	48 89 c7             	mov    %rax,%rdi
   10fbc:	ff d2                	call   *%rdx
   10fbe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10fc2:	48 89 42 20          	mov    %rax,0x20(%rdx)
        vkQueueSubmit                      = PFN_vkQueueSubmit( vkGetDeviceProcAddr( device, "vkQueueSubmit" ) );
   10fc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fca:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10fce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10fd2:	48 8d 0d 94 47 01 00 	lea    0x14794(%rip),%rcx        # 2576d <_ZNSt8__detailL19__atomic_spin_countE+0x39>
   10fd9:	48 89 ce             	mov    %rcx,%rsi
   10fdc:	48 89 c7             	mov    %rax,%rdi
   10fdf:	ff d2                	call   *%rdx
   10fe1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10fe5:	48 89 42 28          	mov    %rax,0x28(%rdx)
        vkQueueWaitIdle                    = PFN_vkQueueWaitIdle( vkGetDeviceProcAddr( device, "vkQueueWaitIdle" ) );
   10fe9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10ff1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10ff5:	48 8d 0d 7f 47 01 00 	lea    0x1477f(%rip),%rcx        # 2577b <_ZNSt8__detailL19__atomic_spin_countE+0x47>
   10ffc:	48 89 ce             	mov    %rcx,%rsi
   10fff:	48 89 c7             	mov    %rax,%rdi
   11002:	ff d2                	call   *%rdx
   11004:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11008:	48 89 42 30          	mov    %rax,0x30(%rdx)
        vkDeviceWaitIdle                   = PFN_vkDeviceWaitIdle( vkGetDeviceProcAddr( device, "vkDeviceWaitIdle" ) );
   1100c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11010:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11014:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11018:	48 8d 0d 6c 47 01 00 	lea    0x1476c(%rip),%rcx        # 2578b <_ZNSt8__detailL19__atomic_spin_countE+0x57>
   1101f:	48 89 ce             	mov    %rcx,%rsi
   11022:	48 89 c7             	mov    %rax,%rdi
   11025:	ff d2                	call   *%rdx
   11027:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1102b:	48 89 42 38          	mov    %rax,0x38(%rdx)
        vkAllocateMemory                   = PFN_vkAllocateMemory( vkGetDeviceProcAddr( device, "vkAllocateMemory" ) );
   1102f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11033:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11037:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1103b:	48 8d 0d 5a 47 01 00 	lea    0x1475a(%rip),%rcx        # 2579c <_ZNSt8__detailL19__atomic_spin_countE+0x68>
   11042:	48 89 ce             	mov    %rcx,%rsi
   11045:	48 89 c7             	mov    %rax,%rdi
   11048:	ff d2                	call   *%rdx
   1104a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1104e:	48 89 42 40          	mov    %rax,0x40(%rdx)
        vkFreeMemory                       = PFN_vkFreeMemory( vkGetDeviceProcAddr( device, "vkFreeMemory" ) );
   11052:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11056:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1105a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1105e:	48 8d 0d 48 47 01 00 	lea    0x14748(%rip),%rcx        # 257ad <_ZNSt8__detailL19__atomic_spin_countE+0x79>
   11065:	48 89 ce             	mov    %rcx,%rsi
   11068:	48 89 c7             	mov    %rax,%rdi
   1106b:	ff d2                	call   *%rdx
   1106d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11071:	48 89 42 48          	mov    %rax,0x48(%rdx)
        vkMapMemory                        = PFN_vkMapMemory( vkGetDeviceProcAddr( device, "vkMapMemory" ) );
   11075:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11079:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1107d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11081:	48 8d 0d 32 47 01 00 	lea    0x14732(%rip),%rcx        # 257ba <_ZNSt8__detailL19__atomic_spin_countE+0x86>
   11088:	48 89 ce             	mov    %rcx,%rsi
   1108b:	48 89 c7             	mov    %rax,%rdi
   1108e:	ff d2                	call   *%rdx
   11090:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11094:	48 89 42 50          	mov    %rax,0x50(%rdx)
        vkUnmapMemory                      = PFN_vkUnmapMemory( vkGetDeviceProcAddr( device, "vkUnmapMemory" ) );
   11098:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1109c:	48 8b 50 10          	mov    0x10(%rax),%rdx
   110a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   110a4:	48 8d 0d 1b 47 01 00 	lea    0x1471b(%rip),%rcx        # 257c6 <_ZNSt8__detailL19__atomic_spin_countE+0x92>
   110ab:	48 89 ce             	mov    %rcx,%rsi
   110ae:	48 89 c7             	mov    %rax,%rdi
   110b1:	ff d2                	call   *%rdx
   110b3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   110b7:	48 89 42 58          	mov    %rax,0x58(%rdx)
        vkFlushMappedMemoryRanges          = PFN_vkFlushMappedMemoryRanges( vkGetDeviceProcAddr( device, "vkFlushMappedMemoryRanges" ) );
   110bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110bf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   110c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   110c7:	48 8d 0d 06 47 01 00 	lea    0x14706(%rip),%rcx        # 257d4 <_ZNSt8__detailL19__atomic_spin_countE+0xa0>
   110ce:	48 89 ce             	mov    %rcx,%rsi
   110d1:	48 89 c7             	mov    %rax,%rdi
   110d4:	ff d2                	call   *%rdx
   110d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   110da:	48 89 42 60          	mov    %rax,0x60(%rdx)
        vkInvalidateMappedMemoryRanges     = PFN_vkInvalidateMappedMemoryRanges( vkGetDeviceProcAddr( device, "vkInvalidateMappedMemoryRanges" ) );
   110de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110e2:	48 8b 50 10          	mov    0x10(%rax),%rdx
   110e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   110ea:	48 8d 0d ff 46 01 00 	lea    0x146ff(%rip),%rcx        # 257f0 <_ZNSt8__detailL19__atomic_spin_countE+0xbc>
   110f1:	48 89 ce             	mov    %rcx,%rsi
   110f4:	48 89 c7             	mov    %rax,%rdi
   110f7:	ff d2                	call   *%rdx
   110f9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   110fd:	48 89 42 68          	mov    %rax,0x68(%rdx)
        vkGetDeviceMemoryCommitment        = PFN_vkGetDeviceMemoryCommitment( vkGetDeviceProcAddr( device, "vkGetDeviceMemoryCommitment" ) );
   11101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11105:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1110d:	48 8d 0d fb 46 01 00 	lea    0x146fb(%rip),%rcx        # 2580f <_ZNSt8__detailL19__atomic_spin_countE+0xdb>
   11114:	48 89 ce             	mov    %rcx,%rsi
   11117:	48 89 c7             	mov    %rax,%rdi
   1111a:	ff d2                	call   *%rdx
   1111c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11120:	48 89 42 70          	mov    %rax,0x70(%rdx)
        vkBindBufferMemory                 = PFN_vkBindBufferMemory( vkGetDeviceProcAddr( device, "vkBindBufferMemory" ) );
   11124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11128:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1112c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11130:	48 8d 0d f4 46 01 00 	lea    0x146f4(%rip),%rcx        # 2582b <_ZNSt8__detailL19__atomic_spin_countE+0xf7>
   11137:	48 89 ce             	mov    %rcx,%rsi
   1113a:	48 89 c7             	mov    %rax,%rdi
   1113d:	ff d2                	call   *%rdx
   1113f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11143:	48 89 42 78          	mov    %rax,0x78(%rdx)
        vkBindImageMemory                  = PFN_vkBindImageMemory( vkGetDeviceProcAddr( device, "vkBindImageMemory" ) );
   11147:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1114b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1114f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11153:	48 8d 0d e4 46 01 00 	lea    0x146e4(%rip),%rcx        # 2583e <_ZNSt8__detailL19__atomic_spin_countE+0x10a>
   1115a:	48 89 ce             	mov    %rcx,%rsi
   1115d:	48 89 c7             	mov    %rax,%rdi
   11160:	ff d2                	call   *%rdx
   11162:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11166:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        vkGetBufferMemoryRequirements      = PFN_vkGetBufferMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetBufferMemoryRequirements" ) );
   1116d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11171:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11175:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11179:	48 8d 0d d0 46 01 00 	lea    0x146d0(%rip),%rcx        # 25850 <_ZNSt8__detailL19__atomic_spin_countE+0x11c>
   11180:	48 89 ce             	mov    %rcx,%rsi
   11183:	48 89 c7             	mov    %rax,%rdi
   11186:	ff d2                	call   *%rdx
   11188:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1118c:	48 89 82 88 00 00 00 	mov    %rax,0x88(%rdx)
        vkGetImageMemoryRequirements       = PFN_vkGetImageMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetImageMemoryRequirements" ) );
   11193:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11197:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1119b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1119f:	48 8d 0d c8 46 01 00 	lea    0x146c8(%rip),%rcx        # 2586e <_ZNSt8__detailL19__atomic_spin_countE+0x13a>
   111a6:	48 89 ce             	mov    %rcx,%rsi
   111a9:	48 89 c7             	mov    %rax,%rdi
   111ac:	ff d2                	call   *%rdx
   111ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   111b2:	48 89 82 90 00 00 00 	mov    %rax,0x90(%rdx)
        vkGetImageSparseMemoryRequirements = PFN_vkGetImageSparseMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetImageSparseMemoryRequirements" ) );
   111b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111bd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   111c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   111c5:	48 8d 0d c4 46 01 00 	lea    0x146c4(%rip),%rcx        # 25890 <_ZNSt8__detailL19__atomic_spin_countE+0x15c>
   111cc:	48 89 ce             	mov    %rcx,%rsi
   111cf:	48 89 c7             	mov    %rax,%rdi
   111d2:	ff d2                	call   *%rdx
   111d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   111d8:	48 89 82 98 00 00 00 	mov    %rax,0x98(%rdx)
        vkQueueBindSparse                  = PFN_vkQueueBindSparse( vkGetDeviceProcAddr( device, "vkQueueBindSparse" ) );
   111df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111e3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   111e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   111eb:	48 8d 0d c1 46 01 00 	lea    0x146c1(%rip),%rcx        # 258b3 <_ZNSt8__detailL19__atomic_spin_countE+0x17f>
   111f2:	48 89 ce             	mov    %rcx,%rsi
   111f5:	48 89 c7             	mov    %rax,%rdi
   111f8:	ff d2                	call   *%rdx
   111fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   111fe:	48 89 82 a0 00 00 00 	mov    %rax,0xa0(%rdx)
        vkCreateFence                      = PFN_vkCreateFence( vkGetDeviceProcAddr( device, "vkCreateFence" ) );
   11205:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11209:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1120d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11211:	48 8d 0d ad 46 01 00 	lea    0x146ad(%rip),%rcx        # 258c5 <_ZNSt8__detailL19__atomic_spin_countE+0x191>
   11218:	48 89 ce             	mov    %rcx,%rsi
   1121b:	48 89 c7             	mov    %rax,%rdi
   1121e:	ff d2                	call   *%rdx
   11220:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11224:	48 89 82 a8 00 00 00 	mov    %rax,0xa8(%rdx)
        vkDestroyFence                     = PFN_vkDestroyFence( vkGetDeviceProcAddr( device, "vkDestroyFence" ) );
   1122b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1122f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11233:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11237:	48 8d 0d 95 46 01 00 	lea    0x14695(%rip),%rcx        # 258d3 <_ZNSt8__detailL19__atomic_spin_countE+0x19f>
   1123e:	48 89 ce             	mov    %rcx,%rsi
   11241:	48 89 c7             	mov    %rax,%rdi
   11244:	ff d2                	call   *%rdx
   11246:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1124a:	48 89 82 b0 00 00 00 	mov    %rax,0xb0(%rdx)
        vkResetFences                      = PFN_vkResetFences( vkGetDeviceProcAddr( device, "vkResetFences" ) );
   11251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11255:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11259:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1125d:	48 8d 0d 7e 46 01 00 	lea    0x1467e(%rip),%rcx        # 258e2 <_ZNSt8__detailL19__atomic_spin_countE+0x1ae>
   11264:	48 89 ce             	mov    %rcx,%rsi
   11267:	48 89 c7             	mov    %rax,%rdi
   1126a:	ff d2                	call   *%rdx
   1126c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11270:	48 89 82 b8 00 00 00 	mov    %rax,0xb8(%rdx)
        vkGetFenceStatus                   = PFN_vkGetFenceStatus( vkGetDeviceProcAddr( device, "vkGetFenceStatus" ) );
   11277:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1127b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1127f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11283:	48 8d 0d 66 46 01 00 	lea    0x14666(%rip),%rcx        # 258f0 <_ZNSt8__detailL19__atomic_spin_countE+0x1bc>
   1128a:	48 89 ce             	mov    %rcx,%rsi
   1128d:	48 89 c7             	mov    %rax,%rdi
   11290:	ff d2                	call   *%rdx
   11292:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11296:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
        vkWaitForFences                    = PFN_vkWaitForFences( vkGetDeviceProcAddr( device, "vkWaitForFences" ) );
   1129d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112a1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   112a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   112a9:	48 8d 0d 51 46 01 00 	lea    0x14651(%rip),%rcx        # 25901 <_ZNSt8__detailL19__atomic_spin_countE+0x1cd>
   112b0:	48 89 ce             	mov    %rcx,%rsi
   112b3:	48 89 c7             	mov    %rax,%rdi
   112b6:	ff d2                	call   *%rdx
   112b8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   112bc:	48 89 82 c8 00 00 00 	mov    %rax,0xc8(%rdx)
        vkCreateSemaphore                  = PFN_vkCreateSemaphore( vkGetDeviceProcAddr( device, "vkCreateSemaphore" ) );
   112c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112c7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   112cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   112cf:	48 8d 0d 3b 46 01 00 	lea    0x1463b(%rip),%rcx        # 25911 <_ZNSt8__detailL19__atomic_spin_countE+0x1dd>
   112d6:	48 89 ce             	mov    %rcx,%rsi
   112d9:	48 89 c7             	mov    %rax,%rdi
   112dc:	ff d2                	call   *%rdx
   112de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   112e2:	48 89 82 d0 00 00 00 	mov    %rax,0xd0(%rdx)
        vkDestroySemaphore                 = PFN_vkDestroySemaphore( vkGetDeviceProcAddr( device, "vkDestroySemaphore" ) );
   112e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112ed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   112f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   112f5:	48 8d 0d 27 46 01 00 	lea    0x14627(%rip),%rcx        # 25923 <_ZNSt8__detailL19__atomic_spin_countE+0x1ef>
   112fc:	48 89 ce             	mov    %rcx,%rsi
   112ff:	48 89 c7             	mov    %rax,%rdi
   11302:	ff d2                	call   *%rdx
   11304:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11308:	48 89 82 d8 00 00 00 	mov    %rax,0xd8(%rdx)
        vkCreateEvent                      = PFN_vkCreateEvent( vkGetDeviceProcAddr( device, "vkCreateEvent" ) );
   1130f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11313:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11317:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1131b:	48 8d 0d 14 46 01 00 	lea    0x14614(%rip),%rcx        # 25936 <_ZNSt8__detailL19__atomic_spin_countE+0x202>
   11322:	48 89 ce             	mov    %rcx,%rsi
   11325:	48 89 c7             	mov    %rax,%rdi
   11328:	ff d2                	call   *%rdx
   1132a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1132e:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
        vkDestroyEvent                     = PFN_vkDestroyEvent( vkGetDeviceProcAddr( device, "vkDestroyEvent" ) );
   11335:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11339:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1133d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11341:	48 8d 0d fc 45 01 00 	lea    0x145fc(%rip),%rcx        # 25944 <_ZNSt8__detailL19__atomic_spin_countE+0x210>
   11348:	48 89 ce             	mov    %rcx,%rsi
   1134b:	48 89 c7             	mov    %rax,%rdi
   1134e:	ff d2                	call   *%rdx
   11350:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11354:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)
        vkGetEventStatus                   = PFN_vkGetEventStatus( vkGetDeviceProcAddr( device, "vkGetEventStatus" ) );
   1135b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1135f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11363:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11367:	48 8d 0d e5 45 01 00 	lea    0x145e5(%rip),%rcx        # 25953 <_ZNSt8__detailL19__atomic_spin_countE+0x21f>
   1136e:	48 89 ce             	mov    %rcx,%rsi
   11371:	48 89 c7             	mov    %rax,%rdi
   11374:	ff d2                	call   *%rdx
   11376:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1137a:	48 89 82 f0 00 00 00 	mov    %rax,0xf0(%rdx)
        vkSetEvent                         = PFN_vkSetEvent( vkGetDeviceProcAddr( device, "vkSetEvent" ) );
   11381:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11385:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11389:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1138d:	48 8d 0d d0 45 01 00 	lea    0x145d0(%rip),%rcx        # 25964 <_ZNSt8__detailL19__atomic_spin_countE+0x230>
   11394:	48 89 ce             	mov    %rcx,%rsi
   11397:	48 89 c7             	mov    %rax,%rdi
   1139a:	ff d2                	call   *%rdx
   1139c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   113a0:	48 89 82 f8 00 00 00 	mov    %rax,0xf8(%rdx)
        vkResetEvent                       = PFN_vkResetEvent( vkGetDeviceProcAddr( device, "vkResetEvent" ) );
   113a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113ab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   113af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   113b3:	48 8d 0d b5 45 01 00 	lea    0x145b5(%rip),%rcx        # 2596f <_ZNSt8__detailL19__atomic_spin_countE+0x23b>
   113ba:	48 89 ce             	mov    %rcx,%rsi
   113bd:	48 89 c7             	mov    %rax,%rdi
   113c0:	ff d2                	call   *%rdx
   113c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   113c6:	48 89 82 00 01 00 00 	mov    %rax,0x100(%rdx)
        vkCreateQueryPool                  = PFN_vkCreateQueryPool( vkGetDeviceProcAddr( device, "vkCreateQueryPool" ) );
   113cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113d1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   113d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   113d9:	48 8d 0d 9c 45 01 00 	lea    0x1459c(%rip),%rcx        # 2597c <_ZNSt8__detailL19__atomic_spin_countE+0x248>
   113e0:	48 89 ce             	mov    %rcx,%rsi
   113e3:	48 89 c7             	mov    %rax,%rdi
   113e6:	ff d2                	call   *%rdx
   113e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   113ec:	48 89 82 08 01 00 00 	mov    %rax,0x108(%rdx)
        vkDestroyQueryPool                 = PFN_vkDestroyQueryPool( vkGetDeviceProcAddr( device, "vkDestroyQueryPool" ) );
   113f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113f7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   113fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   113ff:	48 8d 0d 88 45 01 00 	lea    0x14588(%rip),%rcx        # 2598e <_ZNSt8__detailL19__atomic_spin_countE+0x25a>
   11406:	48 89 ce             	mov    %rcx,%rsi
   11409:	48 89 c7             	mov    %rax,%rdi
   1140c:	ff d2                	call   *%rdx
   1140e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11412:	48 89 82 10 01 00 00 	mov    %rax,0x110(%rdx)
        vkGetQueryPoolResults              = PFN_vkGetQueryPoolResults( vkGetDeviceProcAddr( device, "vkGetQueryPoolResults" ) );
   11419:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1141d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11421:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11425:	48 8d 0d 75 45 01 00 	lea    0x14575(%rip),%rcx        # 259a1 <_ZNSt8__detailL19__atomic_spin_countE+0x26d>
   1142c:	48 89 ce             	mov    %rcx,%rsi
   1142f:	48 89 c7             	mov    %rax,%rdi
   11432:	ff d2                	call   *%rdx
   11434:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11438:	48 89 82 18 01 00 00 	mov    %rax,0x118(%rdx)
        vkCreateBuffer                     = PFN_vkCreateBuffer( vkGetDeviceProcAddr( device, "vkCreateBuffer" ) );
   1143f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11443:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11447:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1144b:	48 8d 0d 65 45 01 00 	lea    0x14565(%rip),%rcx        # 259b7 <_ZNSt8__detailL19__atomic_spin_countE+0x283>
   11452:	48 89 ce             	mov    %rcx,%rsi
   11455:	48 89 c7             	mov    %rax,%rdi
   11458:	ff d2                	call   *%rdx
   1145a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1145e:	48 89 82 20 01 00 00 	mov    %rax,0x120(%rdx)
        vkDestroyBuffer                    = PFN_vkDestroyBuffer( vkGetDeviceProcAddr( device, "vkDestroyBuffer" ) );
   11465:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11469:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1146d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11471:	48 8d 0d 4e 45 01 00 	lea    0x1454e(%rip),%rcx        # 259c6 <_ZNSt8__detailL19__atomic_spin_countE+0x292>
   11478:	48 89 ce             	mov    %rcx,%rsi
   1147b:	48 89 c7             	mov    %rax,%rdi
   1147e:	ff d2                	call   *%rdx
   11480:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11484:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)
        vkCreateBufferView                 = PFN_vkCreateBufferView( vkGetDeviceProcAddr( device, "vkCreateBufferView" ) );
   1148b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1148f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11493:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11497:	48 8d 0d 38 45 01 00 	lea    0x14538(%rip),%rcx        # 259d6 <_ZNSt8__detailL19__atomic_spin_countE+0x2a2>
   1149e:	48 89 ce             	mov    %rcx,%rsi
   114a1:	48 89 c7             	mov    %rax,%rdi
   114a4:	ff d2                	call   *%rdx
   114a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   114aa:	48 89 82 30 01 00 00 	mov    %rax,0x130(%rdx)
        vkDestroyBufferView                = PFN_vkDestroyBufferView( vkGetDeviceProcAddr( device, "vkDestroyBufferView" ) );
   114b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114b5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   114b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   114bd:	48 8d 0d 25 45 01 00 	lea    0x14525(%rip),%rcx        # 259e9 <_ZNSt8__detailL19__atomic_spin_countE+0x2b5>
   114c4:	48 89 ce             	mov    %rcx,%rsi
   114c7:	48 89 c7             	mov    %rax,%rdi
   114ca:	ff d2                	call   *%rdx
   114cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   114d0:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)
        vkCreateImage                      = PFN_vkCreateImage( vkGetDeviceProcAddr( device, "vkCreateImage" ) );
   114d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114db:	48 8b 50 10          	mov    0x10(%rax),%rdx
   114df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   114e3:	48 8d 0d 13 45 01 00 	lea    0x14513(%rip),%rcx        # 259fd <_ZNSt8__detailL19__atomic_spin_countE+0x2c9>
   114ea:	48 89 ce             	mov    %rcx,%rsi
   114ed:	48 89 c7             	mov    %rax,%rdi
   114f0:	ff d2                	call   *%rdx
   114f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   114f6:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)
        vkDestroyImage                     = PFN_vkDestroyImage( vkGetDeviceProcAddr( device, "vkDestroyImage" ) );
   114fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11501:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11505:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11509:	48 8d 0d fb 44 01 00 	lea    0x144fb(%rip),%rcx        # 25a0b <_ZNSt8__detailL19__atomic_spin_countE+0x2d7>
   11510:	48 89 ce             	mov    %rcx,%rsi
   11513:	48 89 c7             	mov    %rax,%rdi
   11516:	ff d2                	call   *%rdx
   11518:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1151c:	48 89 82 48 01 00 00 	mov    %rax,0x148(%rdx)
        vkGetImageSubresourceLayout        = PFN_vkGetImageSubresourceLayout( vkGetDeviceProcAddr( device, "vkGetImageSubresourceLayout" ) );
   11523:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11527:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1152b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1152f:	48 8d 0d e4 44 01 00 	lea    0x144e4(%rip),%rcx        # 25a1a <_ZNSt8__detailL19__atomic_spin_countE+0x2e6>
   11536:	48 89 ce             	mov    %rcx,%rsi
   11539:	48 89 c7             	mov    %rax,%rdi
   1153c:	ff d2                	call   *%rdx
   1153e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11542:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
        vkCreateImageView                  = PFN_vkCreateImageView( vkGetDeviceProcAddr( device, "vkCreateImageView" ) );
   11549:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1154d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11551:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11555:	48 8d 0d da 44 01 00 	lea    0x144da(%rip),%rcx        # 25a36 <_ZNSt8__detailL19__atomic_spin_countE+0x302>
   1155c:	48 89 ce             	mov    %rcx,%rsi
   1155f:	48 89 c7             	mov    %rax,%rdi
   11562:	ff d2                	call   *%rdx
   11564:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11568:	48 89 82 58 01 00 00 	mov    %rax,0x158(%rdx)
        vkDestroyImageView                 = PFN_vkDestroyImageView( vkGetDeviceProcAddr( device, "vkDestroyImageView" ) );
   1156f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11573:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11577:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1157b:	48 8d 0d c6 44 01 00 	lea    0x144c6(%rip),%rcx        # 25a48 <_ZNSt8__detailL19__atomic_spin_countE+0x314>
   11582:	48 89 ce             	mov    %rcx,%rsi
   11585:	48 89 c7             	mov    %rax,%rdi
   11588:	ff d2                	call   *%rdx
   1158a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1158e:	48 89 82 60 01 00 00 	mov    %rax,0x160(%rdx)
        vkCreateShaderModule               = PFN_vkCreateShaderModule( vkGetDeviceProcAddr( device, "vkCreateShaderModule" ) );
   11595:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11599:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1159d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   115a1:	48 8d 0d b3 44 01 00 	lea    0x144b3(%rip),%rcx        # 25a5b <_ZNSt8__detailL19__atomic_spin_countE+0x327>
   115a8:	48 89 ce             	mov    %rcx,%rsi
   115ab:	48 89 c7             	mov    %rax,%rdi
   115ae:	ff d2                	call   *%rdx
   115b0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   115b4:	48 89 82 68 01 00 00 	mov    %rax,0x168(%rdx)
        vkDestroyShaderModule              = PFN_vkDestroyShaderModule( vkGetDeviceProcAddr( device, "vkDestroyShaderModule" ) );
   115bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115bf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   115c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   115c7:	48 8d 0d a2 44 01 00 	lea    0x144a2(%rip),%rcx        # 25a70 <_ZNSt8__detailL19__atomic_spin_countE+0x33c>
   115ce:	48 89 ce             	mov    %rcx,%rsi
   115d1:	48 89 c7             	mov    %rax,%rdi
   115d4:	ff d2                	call   *%rdx
   115d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   115da:	48 89 82 70 01 00 00 	mov    %rax,0x170(%rdx)
        vkCreatePipelineCache              = PFN_vkCreatePipelineCache( vkGetDeviceProcAddr( device, "vkCreatePipelineCache" ) );
   115e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115e5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   115e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   115ed:	48 8d 0d 92 44 01 00 	lea    0x14492(%rip),%rcx        # 25a86 <_ZNSt8__detailL19__atomic_spin_countE+0x352>
   115f4:	48 89 ce             	mov    %rcx,%rsi
   115f7:	48 89 c7             	mov    %rax,%rdi
   115fa:	ff d2                	call   *%rdx
   115fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11600:	48 89 82 78 01 00 00 	mov    %rax,0x178(%rdx)
        vkDestroyPipelineCache             = PFN_vkDestroyPipelineCache( vkGetDeviceProcAddr( device, "vkDestroyPipelineCache" ) );
   11607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1160b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1160f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11613:	48 8d 0d 82 44 01 00 	lea    0x14482(%rip),%rcx        # 25a9c <_ZNSt8__detailL19__atomic_spin_countE+0x368>
   1161a:	48 89 ce             	mov    %rcx,%rsi
   1161d:	48 89 c7             	mov    %rax,%rdi
   11620:	ff d2                	call   *%rdx
   11622:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11626:	48 89 82 80 01 00 00 	mov    %rax,0x180(%rdx)
        vkGetPipelineCacheData             = PFN_vkGetPipelineCacheData( vkGetDeviceProcAddr( device, "vkGetPipelineCacheData" ) );
   1162d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11631:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11635:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11639:	48 8d 0d 73 44 01 00 	lea    0x14473(%rip),%rcx        # 25ab3 <_ZNSt8__detailL19__atomic_spin_countE+0x37f>
   11640:	48 89 ce             	mov    %rcx,%rsi
   11643:	48 89 c7             	mov    %rax,%rdi
   11646:	ff d2                	call   *%rdx
   11648:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1164c:	48 89 82 88 01 00 00 	mov    %rax,0x188(%rdx)
        vkMergePipelineCaches              = PFN_vkMergePipelineCaches( vkGetDeviceProcAddr( device, "vkMergePipelineCaches" ) );
   11653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11657:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1165b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1165f:	48 8d 0d 64 44 01 00 	lea    0x14464(%rip),%rcx        # 25aca <_ZNSt8__detailL19__atomic_spin_countE+0x396>
   11666:	48 89 ce             	mov    %rcx,%rsi
   11669:	48 89 c7             	mov    %rax,%rdi
   1166c:	ff d2                	call   *%rdx
   1166e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11672:	48 89 82 90 01 00 00 	mov    %rax,0x190(%rdx)
        vkCreateGraphicsPipelines          = PFN_vkCreateGraphicsPipelines( vkGetDeviceProcAddr( device, "vkCreateGraphicsPipelines" ) );
   11679:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1167d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11681:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11685:	48 8d 0d 54 44 01 00 	lea    0x14454(%rip),%rcx        # 25ae0 <_ZNSt8__detailL19__atomic_spin_countE+0x3ac>
   1168c:	48 89 ce             	mov    %rcx,%rsi
   1168f:	48 89 c7             	mov    %rax,%rdi
   11692:	ff d2                	call   *%rdx
   11694:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11698:	48 89 82 98 01 00 00 	mov    %rax,0x198(%rdx)
        vkCreateComputePipelines           = PFN_vkCreateComputePipelines( vkGetDeviceProcAddr( device, "vkCreateComputePipelines" ) );
   1169f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   116a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   116ab:	48 8d 0d 48 44 01 00 	lea    0x14448(%rip),%rcx        # 25afa <_ZNSt8__detailL19__atomic_spin_countE+0x3c6>
   116b2:	48 89 ce             	mov    %rcx,%rsi
   116b5:	48 89 c7             	mov    %rax,%rdi
   116b8:	ff d2                	call   *%rdx
   116ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   116be:	48 89 82 a0 01 00 00 	mov    %rax,0x1a0(%rdx)
        vkDestroyPipeline                  = PFN_vkDestroyPipeline( vkGetDeviceProcAddr( device, "vkDestroyPipeline" ) );
   116c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116c9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   116cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   116d1:	48 8d 0d 3b 44 01 00 	lea    0x1443b(%rip),%rcx        # 25b13 <_ZNSt8__detailL19__atomic_spin_countE+0x3df>
   116d8:	48 89 ce             	mov    %rcx,%rsi
   116db:	48 89 c7             	mov    %rax,%rdi
   116de:	ff d2                	call   *%rdx
   116e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   116e4:	48 89 82 a8 01 00 00 	mov    %rax,0x1a8(%rdx)
        vkCreatePipelineLayout             = PFN_vkCreatePipelineLayout( vkGetDeviceProcAddr( device, "vkCreatePipelineLayout" ) );
   116eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116ef:	48 8b 50 10          	mov    0x10(%rax),%rdx
   116f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   116f7:	48 8d 0d 27 44 01 00 	lea    0x14427(%rip),%rcx        # 25b25 <_ZNSt8__detailL19__atomic_spin_countE+0x3f1>
   116fe:	48 89 ce             	mov    %rcx,%rsi
   11701:	48 89 c7             	mov    %rax,%rdi
   11704:	ff d2                	call   *%rdx
   11706:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1170a:	48 89 82 b0 01 00 00 	mov    %rax,0x1b0(%rdx)
        vkDestroyPipelineLayout            = PFN_vkDestroyPipelineLayout( vkGetDeviceProcAddr( device, "vkDestroyPipelineLayout" ) );
   11711:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11715:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11719:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1171d:	48 8d 0d 18 44 01 00 	lea    0x14418(%rip),%rcx        # 25b3c <_ZNSt8__detailL19__atomic_spin_countE+0x408>
   11724:	48 89 ce             	mov    %rcx,%rsi
   11727:	48 89 c7             	mov    %rax,%rdi
   1172a:	ff d2                	call   *%rdx
   1172c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11730:	48 89 82 b8 01 00 00 	mov    %rax,0x1b8(%rdx)
        vkCreateSampler                    = PFN_vkCreateSampler( vkGetDeviceProcAddr( device, "vkCreateSampler" ) );
   11737:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1173b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1173f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11743:	48 8d 0d 0a 44 01 00 	lea    0x1440a(%rip),%rcx        # 25b54 <_ZNSt8__detailL19__atomic_spin_countE+0x420>
   1174a:	48 89 ce             	mov    %rcx,%rsi
   1174d:	48 89 c7             	mov    %rax,%rdi
   11750:	ff d2                	call   *%rdx
   11752:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11756:	48 89 82 c0 01 00 00 	mov    %rax,0x1c0(%rdx)
        vkDestroySampler                   = PFN_vkDestroySampler( vkGetDeviceProcAddr( device, "vkDestroySampler" ) );
   1175d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11761:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11765:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11769:	48 8d 0d f4 43 01 00 	lea    0x143f4(%rip),%rcx        # 25b64 <_ZNSt8__detailL19__atomic_spin_countE+0x430>
   11770:	48 89 ce             	mov    %rcx,%rsi
   11773:	48 89 c7             	mov    %rax,%rdi
   11776:	ff d2                	call   *%rdx
   11778:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1177c:	48 89 82 c8 01 00 00 	mov    %rax,0x1c8(%rdx)
        vkCreateDescriptorSetLayout        = PFN_vkCreateDescriptorSetLayout( vkGetDeviceProcAddr( device, "vkCreateDescriptorSetLayout" ) );
   11783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11787:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1178b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1178f:	48 8d 0d df 43 01 00 	lea    0x143df(%rip),%rcx        # 25b75 <_ZNSt8__detailL19__atomic_spin_countE+0x441>
   11796:	48 89 ce             	mov    %rcx,%rsi
   11799:	48 89 c7             	mov    %rax,%rdi
   1179c:	ff d2                	call   *%rdx
   1179e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   117a2:	48 89 82 d0 01 00 00 	mov    %rax,0x1d0(%rdx)
        vkDestroyDescriptorSetLayout       = PFN_vkDestroyDescriptorSetLayout( vkGetDeviceProcAddr( device, "vkDestroyDescriptorSetLayout" ) );
   117a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117ad:	48 8b 50 10          	mov    0x10(%rax),%rdx
   117b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   117b5:	48 8d 0d d5 43 01 00 	lea    0x143d5(%rip),%rcx        # 25b91 <_ZNSt8__detailL19__atomic_spin_countE+0x45d>
   117bc:	48 89 ce             	mov    %rcx,%rsi
   117bf:	48 89 c7             	mov    %rax,%rdi
   117c2:	ff d2                	call   *%rdx
   117c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   117c8:	48 89 82 d8 01 00 00 	mov    %rax,0x1d8(%rdx)
        vkCreateDescriptorPool             = PFN_vkCreateDescriptorPool( vkGetDeviceProcAddr( device, "vkCreateDescriptorPool" ) );
   117cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117d3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   117d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   117db:	48 8d 0d cc 43 01 00 	lea    0x143cc(%rip),%rcx        # 25bae <_ZNSt8__detailL19__atomic_spin_countE+0x47a>
   117e2:	48 89 ce             	mov    %rcx,%rsi
   117e5:	48 89 c7             	mov    %rax,%rdi
   117e8:	ff d2                	call   *%rdx
   117ea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   117ee:	48 89 82 e0 01 00 00 	mov    %rax,0x1e0(%rdx)
        vkDestroyDescriptorPool            = PFN_vkDestroyDescriptorPool( vkGetDeviceProcAddr( device, "vkDestroyDescriptorPool" ) );
   117f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117f9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   117fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11801:	48 8d 0d bd 43 01 00 	lea    0x143bd(%rip),%rcx        # 25bc5 <_ZNSt8__detailL19__atomic_spin_countE+0x491>
   11808:	48 89 ce             	mov    %rcx,%rsi
   1180b:	48 89 c7             	mov    %rax,%rdi
   1180e:	ff d2                	call   *%rdx
   11810:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11814:	48 89 82 e8 01 00 00 	mov    %rax,0x1e8(%rdx)
        vkResetDescriptorPool              = PFN_vkResetDescriptorPool( vkGetDeviceProcAddr( device, "vkResetDescriptorPool" ) );
   1181b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1181f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11823:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11827:	48 8d 0d af 43 01 00 	lea    0x143af(%rip),%rcx        # 25bdd <_ZNSt8__detailL19__atomic_spin_countE+0x4a9>
   1182e:	48 89 ce             	mov    %rcx,%rsi
   11831:	48 89 c7             	mov    %rax,%rdi
   11834:	ff d2                	call   *%rdx
   11836:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1183a:	48 89 82 f0 01 00 00 	mov    %rax,0x1f0(%rdx)
        vkAllocateDescriptorSets           = PFN_vkAllocateDescriptorSets( vkGetDeviceProcAddr( device, "vkAllocateDescriptorSets" ) );
   11841:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11845:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11849:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1184d:	48 8d 0d 9f 43 01 00 	lea    0x1439f(%rip),%rcx        # 25bf3 <_ZNSt8__detailL19__atomic_spin_countE+0x4bf>
   11854:	48 89 ce             	mov    %rcx,%rsi
   11857:	48 89 c7             	mov    %rax,%rdi
   1185a:	ff d2                	call   *%rdx
   1185c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11860:	48 89 82 f8 01 00 00 	mov    %rax,0x1f8(%rdx)
        vkFreeDescriptorSets               = PFN_vkFreeDescriptorSets( vkGetDeviceProcAddr( device, "vkFreeDescriptorSets" ) );
   11867:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1186b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1186f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11873:	48 8d 0d 92 43 01 00 	lea    0x14392(%rip),%rcx        # 25c0c <_ZNSt8__detailL19__atomic_spin_countE+0x4d8>
   1187a:	48 89 ce             	mov    %rcx,%rsi
   1187d:	48 89 c7             	mov    %rax,%rdi
   11880:	ff d2                	call   *%rdx
   11882:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11886:	48 89 82 00 02 00 00 	mov    %rax,0x200(%rdx)
        vkUpdateDescriptorSets             = PFN_vkUpdateDescriptorSets( vkGetDeviceProcAddr( device, "vkUpdateDescriptorSets" ) );
   1188d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11891:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11895:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11899:	48 8d 0d 81 43 01 00 	lea    0x14381(%rip),%rcx        # 25c21 <_ZNSt8__detailL19__atomic_spin_countE+0x4ed>
   118a0:	48 89 ce             	mov    %rcx,%rsi
   118a3:	48 89 c7             	mov    %rax,%rdi
   118a6:	ff d2                	call   *%rdx
   118a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   118ac:	48 89 82 08 02 00 00 	mov    %rax,0x208(%rdx)
        vkCreateFramebuffer                = PFN_vkCreateFramebuffer( vkGetDeviceProcAddr( device, "vkCreateFramebuffer" ) );
   118b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118b7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   118bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   118bf:	48 8d 0d 72 43 01 00 	lea    0x14372(%rip),%rcx        # 25c38 <_ZNSt8__detailL19__atomic_spin_countE+0x504>
   118c6:	48 89 ce             	mov    %rcx,%rsi
   118c9:	48 89 c7             	mov    %rax,%rdi
   118cc:	ff d2                	call   *%rdx
   118ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   118d2:	48 89 82 10 02 00 00 	mov    %rax,0x210(%rdx)
        vkDestroyFramebuffer               = PFN_vkDestroyFramebuffer( vkGetDeviceProcAddr( device, "vkDestroyFramebuffer" ) );
   118d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118dd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   118e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   118e5:	48 8d 0d 60 43 01 00 	lea    0x14360(%rip),%rcx        # 25c4c <_ZNSt8__detailL19__atomic_spin_countE+0x518>
   118ec:	48 89 ce             	mov    %rcx,%rsi
   118ef:	48 89 c7             	mov    %rax,%rdi
   118f2:	ff d2                	call   *%rdx
   118f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   118f8:	48 89 82 18 02 00 00 	mov    %rax,0x218(%rdx)
        vkCreateRenderPass                 = PFN_vkCreateRenderPass( vkGetDeviceProcAddr( device, "vkCreateRenderPass" ) );
   118ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11903:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11907:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1190b:	48 8d 0d 4f 43 01 00 	lea    0x1434f(%rip),%rcx        # 25c61 <_ZNSt8__detailL19__atomic_spin_countE+0x52d>
   11912:	48 89 ce             	mov    %rcx,%rsi
   11915:	48 89 c7             	mov    %rax,%rdi
   11918:	ff d2                	call   *%rdx
   1191a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1191e:	48 89 82 20 02 00 00 	mov    %rax,0x220(%rdx)
        vkDestroyRenderPass                = PFN_vkDestroyRenderPass( vkGetDeviceProcAddr( device, "vkDestroyRenderPass" ) );
   11925:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11929:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1192d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11931:	48 8d 0d 3c 43 01 00 	lea    0x1433c(%rip),%rcx        # 25c74 <_ZNSt8__detailL19__atomic_spin_countE+0x540>
   11938:	48 89 ce             	mov    %rcx,%rsi
   1193b:	48 89 c7             	mov    %rax,%rdi
   1193e:	ff d2                	call   *%rdx
   11940:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11944:	48 89 82 28 02 00 00 	mov    %rax,0x228(%rdx)
        vkGetRenderAreaGranularity         = PFN_vkGetRenderAreaGranularity( vkGetDeviceProcAddr( device, "vkGetRenderAreaGranularity" ) );
   1194b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1194f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11953:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11957:	48 8d 0d 2a 43 01 00 	lea    0x1432a(%rip),%rcx        # 25c88 <_ZNSt8__detailL19__atomic_spin_countE+0x554>
   1195e:	48 89 ce             	mov    %rcx,%rsi
   11961:	48 89 c7             	mov    %rax,%rdi
   11964:	ff d2                	call   *%rdx
   11966:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1196a:	48 89 82 30 02 00 00 	mov    %rax,0x230(%rdx)
        vkCreateCommandPool                = PFN_vkCreateCommandPool( vkGetDeviceProcAddr( device, "vkCreateCommandPool" ) );
   11971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11975:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11979:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1197d:	48 8d 0d 1f 43 01 00 	lea    0x1431f(%rip),%rcx        # 25ca3 <_ZNSt8__detailL19__atomic_spin_countE+0x56f>
   11984:	48 89 ce             	mov    %rcx,%rsi
   11987:	48 89 c7             	mov    %rax,%rdi
   1198a:	ff d2                	call   *%rdx
   1198c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11990:	48 89 82 38 02 00 00 	mov    %rax,0x238(%rdx)
        vkDestroyCommandPool               = PFN_vkDestroyCommandPool( vkGetDeviceProcAddr( device, "vkDestroyCommandPool" ) );
   11997:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1199b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1199f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   119a3:	48 8d 0d 0d 43 01 00 	lea    0x1430d(%rip),%rcx        # 25cb7 <_ZNSt8__detailL19__atomic_spin_countE+0x583>
   119aa:	48 89 ce             	mov    %rcx,%rsi
   119ad:	48 89 c7             	mov    %rax,%rdi
   119b0:	ff d2                	call   *%rdx
   119b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   119b6:	48 89 82 40 02 00 00 	mov    %rax,0x240(%rdx)
        vkResetCommandPool                 = PFN_vkResetCommandPool( vkGetDeviceProcAddr( device, "vkResetCommandPool" ) );
   119bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   119c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   119c9:	48 8d 0d fc 42 01 00 	lea    0x142fc(%rip),%rcx        # 25ccc <_ZNSt8__detailL19__atomic_spin_countE+0x598>
   119d0:	48 89 ce             	mov    %rcx,%rsi
   119d3:	48 89 c7             	mov    %rax,%rdi
   119d6:	ff d2                	call   *%rdx
   119d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   119dc:	48 89 82 48 02 00 00 	mov    %rax,0x248(%rdx)
        vkAllocateCommandBuffers           = PFN_vkAllocateCommandBuffers( vkGetDeviceProcAddr( device, "vkAllocateCommandBuffers" ) );
   119e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   119eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   119ef:	48 8d 0d e9 42 01 00 	lea    0x142e9(%rip),%rcx        # 25cdf <_ZNSt8__detailL19__atomic_spin_countE+0x5ab>
   119f6:	48 89 ce             	mov    %rcx,%rsi
   119f9:	48 89 c7             	mov    %rax,%rdi
   119fc:	ff d2                	call   *%rdx
   119fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11a02:	48 89 82 50 02 00 00 	mov    %rax,0x250(%rdx)
        vkFreeCommandBuffers               = PFN_vkFreeCommandBuffers( vkGetDeviceProcAddr( device, "vkFreeCommandBuffers" ) );
   11a09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a0d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11a11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11a15:	48 8d 0d dc 42 01 00 	lea    0x142dc(%rip),%rcx        # 25cf8 <_ZNSt8__detailL19__atomic_spin_countE+0x5c4>
   11a1c:	48 89 ce             	mov    %rcx,%rsi
   11a1f:	48 89 c7             	mov    %rax,%rdi
   11a22:	ff d2                	call   *%rdx
   11a24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11a28:	48 89 82 58 02 00 00 	mov    %rax,0x258(%rdx)
        vkBeginCommandBuffer               = PFN_vkBeginCommandBuffer( vkGetDeviceProcAddr( device, "vkBeginCommandBuffer" ) );
   11a2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a33:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11a37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11a3b:	48 8d 0d cb 42 01 00 	lea    0x142cb(%rip),%rcx        # 25d0d <_ZNSt8__detailL19__atomic_spin_countE+0x5d9>
   11a42:	48 89 ce             	mov    %rcx,%rsi
   11a45:	48 89 c7             	mov    %rax,%rdi
   11a48:	ff d2                	call   *%rdx
   11a4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11a4e:	48 89 82 60 02 00 00 	mov    %rax,0x260(%rdx)
        vkEndCommandBuffer                 = PFN_vkEndCommandBuffer( vkGetDeviceProcAddr( device, "vkEndCommandBuffer" ) );
   11a55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a59:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11a5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11a61:	48 8d 0d ba 42 01 00 	lea    0x142ba(%rip),%rcx        # 25d22 <_ZNSt8__detailL19__atomic_spin_countE+0x5ee>
   11a68:	48 89 ce             	mov    %rcx,%rsi
   11a6b:	48 89 c7             	mov    %rax,%rdi
   11a6e:	ff d2                	call   *%rdx
   11a70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11a74:	48 89 82 68 02 00 00 	mov    %rax,0x268(%rdx)
        vkResetCommandBuffer               = PFN_vkResetCommandBuffer( vkGetDeviceProcAddr( device, "vkResetCommandBuffer" ) );
   11a7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a7f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11a83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11a87:	48 8d 0d a7 42 01 00 	lea    0x142a7(%rip),%rcx        # 25d35 <_ZNSt8__detailL19__atomic_spin_countE+0x601>
   11a8e:	48 89 ce             	mov    %rcx,%rsi
   11a91:	48 89 c7             	mov    %rax,%rdi
   11a94:	ff d2                	call   *%rdx
   11a96:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11a9a:	48 89 82 70 02 00 00 	mov    %rax,0x270(%rdx)
        vkCmdBindPipeline                  = PFN_vkCmdBindPipeline( vkGetDeviceProcAddr( device, "vkCmdBindPipeline" ) );
   11aa1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11aa5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11aa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11aad:	48 8d 0d 96 42 01 00 	lea    0x14296(%rip),%rcx        # 25d4a <_ZNSt8__detailL19__atomic_spin_countE+0x616>
   11ab4:	48 89 ce             	mov    %rcx,%rsi
   11ab7:	48 89 c7             	mov    %rax,%rdi
   11aba:	ff d2                	call   *%rdx
   11abc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ac0:	48 89 82 78 02 00 00 	mov    %rax,0x278(%rdx)
        vkCmdSetViewport                   = PFN_vkCmdSetViewport( vkGetDeviceProcAddr( device, "vkCmdSetViewport" ) );
   11ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11acb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11acf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ad3:	48 8d 0d 82 42 01 00 	lea    0x14282(%rip),%rcx        # 25d5c <_ZNSt8__detailL19__atomic_spin_countE+0x628>
   11ada:	48 89 ce             	mov    %rcx,%rsi
   11add:	48 89 c7             	mov    %rax,%rdi
   11ae0:	ff d2                	call   *%rdx
   11ae2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ae6:	48 89 82 80 02 00 00 	mov    %rax,0x280(%rdx)
        vkCmdSetScissor                    = PFN_vkCmdSetScissor( vkGetDeviceProcAddr( device, "vkCmdSetScissor" ) );
   11aed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11af1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11af5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11af9:	48 8d 0d 6d 42 01 00 	lea    0x1426d(%rip),%rcx        # 25d6d <_ZNSt8__detailL19__atomic_spin_countE+0x639>
   11b00:	48 89 ce             	mov    %rcx,%rsi
   11b03:	48 89 c7             	mov    %rax,%rdi
   11b06:	ff d2                	call   *%rdx
   11b08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11b0c:	48 89 82 88 02 00 00 	mov    %rax,0x288(%rdx)
        vkCmdSetLineWidth                  = PFN_vkCmdSetLineWidth( vkGetDeviceProcAddr( device, "vkCmdSetLineWidth" ) );
   11b13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b17:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11b1f:	48 8d 0d 57 42 01 00 	lea    0x14257(%rip),%rcx        # 25d7d <_ZNSt8__detailL19__atomic_spin_countE+0x649>
   11b26:	48 89 ce             	mov    %rcx,%rsi
   11b29:	48 89 c7             	mov    %rax,%rdi
   11b2c:	ff d2                	call   *%rdx
   11b2e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11b32:	48 89 82 90 02 00 00 	mov    %rax,0x290(%rdx)
        vkCmdSetDepthBias                  = PFN_vkCmdSetDepthBias( vkGetDeviceProcAddr( device, "vkCmdSetDepthBias" ) );
   11b39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b3d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11b41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11b45:	48 8d 0d 43 42 01 00 	lea    0x14243(%rip),%rcx        # 25d8f <_ZNSt8__detailL19__atomic_spin_countE+0x65b>
   11b4c:	48 89 ce             	mov    %rcx,%rsi
   11b4f:	48 89 c7             	mov    %rax,%rdi
   11b52:	ff d2                	call   *%rdx
   11b54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11b58:	48 89 82 98 02 00 00 	mov    %rax,0x298(%rdx)
        vkCmdSetBlendConstants             = PFN_vkCmdSetBlendConstants( vkGetDeviceProcAddr( device, "vkCmdSetBlendConstants" ) );
   11b5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b63:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11b67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11b6b:	48 8d 0d 2f 42 01 00 	lea    0x1422f(%rip),%rcx        # 25da1 <_ZNSt8__detailL19__atomic_spin_countE+0x66d>
   11b72:	48 89 ce             	mov    %rcx,%rsi
   11b75:	48 89 c7             	mov    %rax,%rdi
   11b78:	ff d2                	call   *%rdx
   11b7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11b7e:	48 89 82 a0 02 00 00 	mov    %rax,0x2a0(%rdx)
        vkCmdSetDepthBounds                = PFN_vkCmdSetDepthBounds( vkGetDeviceProcAddr( device, "vkCmdSetDepthBounds" ) );
   11b85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b89:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11b8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11b91:	48 8d 0d 20 42 01 00 	lea    0x14220(%rip),%rcx        # 25db8 <_ZNSt8__detailL19__atomic_spin_countE+0x684>
   11b98:	48 89 ce             	mov    %rcx,%rsi
   11b9b:	48 89 c7             	mov    %rax,%rdi
   11b9e:	ff d2                	call   *%rdx
   11ba0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ba4:	48 89 82 a8 02 00 00 	mov    %rax,0x2a8(%rdx)
        vkCmdSetStencilCompareMask         = PFN_vkCmdSetStencilCompareMask( vkGetDeviceProcAddr( device, "vkCmdSetStencilCompareMask" ) );
   11bab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11baf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11bb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11bb7:	48 8d 0d 0e 42 01 00 	lea    0x1420e(%rip),%rcx        # 25dcc <_ZNSt8__detailL19__atomic_spin_countE+0x698>
   11bbe:	48 89 ce             	mov    %rcx,%rsi
   11bc1:	48 89 c7             	mov    %rax,%rdi
   11bc4:	ff d2                	call   *%rdx
   11bc6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11bca:	48 89 82 b0 02 00 00 	mov    %rax,0x2b0(%rdx)
        vkCmdSetStencilWriteMask           = PFN_vkCmdSetStencilWriteMask( vkGetDeviceProcAddr( device, "vkCmdSetStencilWriteMask" ) );
   11bd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bd5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11bd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11bdd:	48 8d 0d 03 42 01 00 	lea    0x14203(%rip),%rcx        # 25de7 <_ZNSt8__detailL19__atomic_spin_countE+0x6b3>
   11be4:	48 89 ce             	mov    %rcx,%rsi
   11be7:	48 89 c7             	mov    %rax,%rdi
   11bea:	ff d2                	call   *%rdx
   11bec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11bf0:	48 89 82 b8 02 00 00 	mov    %rax,0x2b8(%rdx)
        vkCmdSetStencilReference           = PFN_vkCmdSetStencilReference( vkGetDeviceProcAddr( device, "vkCmdSetStencilReference" ) );
   11bf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bfb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11bff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c03:	48 8d 0d f6 41 01 00 	lea    0x141f6(%rip),%rcx        # 25e00 <_ZNSt8__detailL19__atomic_spin_countE+0x6cc>
   11c0a:	48 89 ce             	mov    %rcx,%rsi
   11c0d:	48 89 c7             	mov    %rax,%rdi
   11c10:	ff d2                	call   *%rdx
   11c12:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11c16:	48 89 82 c0 02 00 00 	mov    %rax,0x2c0(%rdx)
        vkCmdBindDescriptorSets            = PFN_vkCmdBindDescriptorSets( vkGetDeviceProcAddr( device, "vkCmdBindDescriptorSets" ) );
   11c1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c21:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11c25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c29:	48 8d 0d e9 41 01 00 	lea    0x141e9(%rip),%rcx        # 25e19 <_ZNSt8__detailL19__atomic_spin_countE+0x6e5>
   11c30:	48 89 ce             	mov    %rcx,%rsi
   11c33:	48 89 c7             	mov    %rax,%rdi
   11c36:	ff d2                	call   *%rdx
   11c38:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11c3c:	48 89 82 c8 02 00 00 	mov    %rax,0x2c8(%rdx)
        vkCmdBindIndexBuffer               = PFN_vkCmdBindIndexBuffer( vkGetDeviceProcAddr( device, "vkCmdBindIndexBuffer" ) );
   11c43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c47:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11c4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c4f:	48 8d 0d db 41 01 00 	lea    0x141db(%rip),%rcx        # 25e31 <_ZNSt8__detailL19__atomic_spin_countE+0x6fd>
   11c56:	48 89 ce             	mov    %rcx,%rsi
   11c59:	48 89 c7             	mov    %rax,%rdi
   11c5c:	ff d2                	call   *%rdx
   11c5e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11c62:	48 89 82 d0 02 00 00 	mov    %rax,0x2d0(%rdx)
        vkCmdBindVertexBuffers             = PFN_vkCmdBindVertexBuffers( vkGetDeviceProcAddr( device, "vkCmdBindVertexBuffers" ) );
   11c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c6d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11c71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c75:	48 8d 0d ca 41 01 00 	lea    0x141ca(%rip),%rcx        # 25e46 <_ZNSt8__detailL19__atomic_spin_countE+0x712>
   11c7c:	48 89 ce             	mov    %rcx,%rsi
   11c7f:	48 89 c7             	mov    %rax,%rdi
   11c82:	ff d2                	call   *%rdx
   11c84:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11c88:	48 89 82 d8 02 00 00 	mov    %rax,0x2d8(%rdx)
        vkCmdDraw                          = PFN_vkCmdDraw( vkGetDeviceProcAddr( device, "vkCmdDraw" ) );
   11c8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c93:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11c97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c9b:	48 8d 0d bb 41 01 00 	lea    0x141bb(%rip),%rcx        # 25e5d <_ZNSt8__detailL19__atomic_spin_countE+0x729>
   11ca2:	48 89 ce             	mov    %rcx,%rsi
   11ca5:	48 89 c7             	mov    %rax,%rdi
   11ca8:	ff d2                	call   *%rdx
   11caa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11cae:	48 89 82 e0 02 00 00 	mov    %rax,0x2e0(%rdx)
        vkCmdDrawIndexed                   = PFN_vkCmdDrawIndexed( vkGetDeviceProcAddr( device, "vkCmdDrawIndexed" ) );
   11cb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cb9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11cbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11cc1:	48 8d 0d 9f 41 01 00 	lea    0x1419f(%rip),%rcx        # 25e67 <_ZNSt8__detailL19__atomic_spin_countE+0x733>
   11cc8:	48 89 ce             	mov    %rcx,%rsi
   11ccb:	48 89 c7             	mov    %rax,%rdi
   11cce:	ff d2                	call   *%rdx
   11cd0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11cd4:	48 89 82 e8 02 00 00 	mov    %rax,0x2e8(%rdx)
        vkCmdDrawIndirect                  = PFN_vkCmdDrawIndirect( vkGetDeviceProcAddr( device, "vkCmdDrawIndirect" ) );
   11cdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cdf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11ce3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ce7:	48 8d 0d 8a 41 01 00 	lea    0x1418a(%rip),%rcx        # 25e78 <_ZNSt8__detailL19__atomic_spin_countE+0x744>
   11cee:	48 89 ce             	mov    %rcx,%rsi
   11cf1:	48 89 c7             	mov    %rax,%rdi
   11cf4:	ff d2                	call   *%rdx
   11cf6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11cfa:	48 89 82 f0 02 00 00 	mov    %rax,0x2f0(%rdx)
        vkCmdDrawIndexedIndirect           = PFN_vkCmdDrawIndexedIndirect( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirect" ) );
   11d01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d05:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11d09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d0d:	48 8d 0d 76 41 01 00 	lea    0x14176(%rip),%rcx        # 25e8a <_ZNSt8__detailL19__atomic_spin_countE+0x756>
   11d14:	48 89 ce             	mov    %rcx,%rsi
   11d17:	48 89 c7             	mov    %rax,%rdi
   11d1a:	ff d2                	call   *%rdx
   11d1c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11d20:	48 89 82 f8 02 00 00 	mov    %rax,0x2f8(%rdx)
        vkCmdDispatch                      = PFN_vkCmdDispatch( vkGetDeviceProcAddr( device, "vkCmdDispatch" ) );
   11d27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d2b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d33:	48 8d 0d 69 41 01 00 	lea    0x14169(%rip),%rcx        # 25ea3 <_ZNSt8__detailL19__atomic_spin_countE+0x76f>
   11d3a:	48 89 ce             	mov    %rcx,%rsi
   11d3d:	48 89 c7             	mov    %rax,%rdi
   11d40:	ff d2                	call   *%rdx
   11d42:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11d46:	48 89 82 00 03 00 00 	mov    %rax,0x300(%rdx)
        vkCmdDispatchIndirect              = PFN_vkCmdDispatchIndirect( vkGetDeviceProcAddr( device, "vkCmdDispatchIndirect" ) );
   11d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d51:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11d55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d59:	48 8d 0d 51 41 01 00 	lea    0x14151(%rip),%rcx        # 25eb1 <_ZNSt8__detailL19__atomic_spin_countE+0x77d>
   11d60:	48 89 ce             	mov    %rcx,%rsi
   11d63:	48 89 c7             	mov    %rax,%rdi
   11d66:	ff d2                	call   *%rdx
   11d68:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11d6c:	48 89 82 08 03 00 00 	mov    %rax,0x308(%rdx)
        vkCmdCopyBuffer                    = PFN_vkCmdCopyBuffer( vkGetDeviceProcAddr( device, "vkCmdCopyBuffer" ) );
   11d73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d77:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d7f:	48 8d 0d 41 41 01 00 	lea    0x14141(%rip),%rcx        # 25ec7 <_ZNSt8__detailL19__atomic_spin_countE+0x793>
   11d86:	48 89 ce             	mov    %rcx,%rsi
   11d89:	48 89 c7             	mov    %rax,%rdi
   11d8c:	ff d2                	call   *%rdx
   11d8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11d92:	48 89 82 10 03 00 00 	mov    %rax,0x310(%rdx)
        vkCmdCopyImage                     = PFN_vkCmdCopyImage( vkGetDeviceProcAddr( device, "vkCmdCopyImage" ) );
   11d99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d9d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11da1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11da5:	48 8d 0d 2b 41 01 00 	lea    0x1412b(%rip),%rcx        # 25ed7 <_ZNSt8__detailL19__atomic_spin_countE+0x7a3>
   11dac:	48 89 ce             	mov    %rcx,%rsi
   11daf:	48 89 c7             	mov    %rax,%rdi
   11db2:	ff d2                	call   *%rdx
   11db4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11db8:	48 89 82 18 03 00 00 	mov    %rax,0x318(%rdx)
        vkCmdBlitImage                     = PFN_vkCmdBlitImage( vkGetDeviceProcAddr( device, "vkCmdBlitImage" ) );
   11dbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11dc3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11dc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11dcb:	48 8d 0d 14 41 01 00 	lea    0x14114(%rip),%rcx        # 25ee6 <_ZNSt8__detailL19__atomic_spin_countE+0x7b2>
   11dd2:	48 89 ce             	mov    %rcx,%rsi
   11dd5:	48 89 c7             	mov    %rax,%rdi
   11dd8:	ff d2                	call   *%rdx
   11dda:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11dde:	48 89 82 20 03 00 00 	mov    %rax,0x320(%rdx)
        vkCmdCopyBufferToImage             = PFN_vkCmdCopyBufferToImage( vkGetDeviceProcAddr( device, "vkCmdCopyBufferToImage" ) );
   11de5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11de9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11ded:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11df1:	48 8d 0d fd 40 01 00 	lea    0x140fd(%rip),%rcx        # 25ef5 <_ZNSt8__detailL19__atomic_spin_countE+0x7c1>
   11df8:	48 89 ce             	mov    %rcx,%rsi
   11dfb:	48 89 c7             	mov    %rax,%rdi
   11dfe:	ff d2                	call   *%rdx
   11e00:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11e04:	48 89 82 28 03 00 00 	mov    %rax,0x328(%rdx)
        vkCmdCopyImageToBuffer             = PFN_vkCmdCopyImageToBuffer( vkGetDeviceProcAddr( device, "vkCmdCopyImageToBuffer" ) );
   11e0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e0f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11e13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e17:	48 8d 0d ee 40 01 00 	lea    0x140ee(%rip),%rcx        # 25f0c <_ZNSt8__detailL19__atomic_spin_countE+0x7d8>
   11e1e:	48 89 ce             	mov    %rcx,%rsi
   11e21:	48 89 c7             	mov    %rax,%rdi
   11e24:	ff d2                	call   *%rdx
   11e26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11e2a:	48 89 82 30 03 00 00 	mov    %rax,0x330(%rdx)
        vkCmdUpdateBuffer                  = PFN_vkCmdUpdateBuffer( vkGetDeviceProcAddr( device, "vkCmdUpdateBuffer" ) );
   11e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e35:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11e39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e3d:	48 8d 0d df 40 01 00 	lea    0x140df(%rip),%rcx        # 25f23 <_ZNSt8__detailL19__atomic_spin_countE+0x7ef>
   11e44:	48 89 ce             	mov    %rcx,%rsi
   11e47:	48 89 c7             	mov    %rax,%rdi
   11e4a:	ff d2                	call   *%rdx
   11e4c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11e50:	48 89 82 38 03 00 00 	mov    %rax,0x338(%rdx)
        vkCmdFillBuffer                    = PFN_vkCmdFillBuffer( vkGetDeviceProcAddr( device, "vkCmdFillBuffer" ) );
   11e57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e5b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11e5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e63:	48 8d 0d cb 40 01 00 	lea    0x140cb(%rip),%rcx        # 25f35 <_ZNSt8__detailL19__atomic_spin_countE+0x801>
   11e6a:	48 89 ce             	mov    %rcx,%rsi
   11e6d:	48 89 c7             	mov    %rax,%rdi
   11e70:	ff d2                	call   *%rdx
   11e72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11e76:	48 89 82 40 03 00 00 	mov    %rax,0x340(%rdx)
        vkCmdClearColorImage               = PFN_vkCmdClearColorImage( vkGetDeviceProcAddr( device, "vkCmdClearColorImage" ) );
   11e7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e81:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11e85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e89:	48 8d 0d b5 40 01 00 	lea    0x140b5(%rip),%rcx        # 25f45 <_ZNSt8__detailL19__atomic_spin_countE+0x811>
   11e90:	48 89 ce             	mov    %rcx,%rsi
   11e93:	48 89 c7             	mov    %rax,%rdi
   11e96:	ff d2                	call   *%rdx
   11e98:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11e9c:	48 89 82 48 03 00 00 	mov    %rax,0x348(%rdx)
        vkCmdClearDepthStencilImage        = PFN_vkCmdClearDepthStencilImage( vkGetDeviceProcAddr( device, "vkCmdClearDepthStencilImage" ) );
   11ea3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ea7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11eab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11eaf:	48 8d 0d a4 40 01 00 	lea    0x140a4(%rip),%rcx        # 25f5a <_ZNSt8__detailL19__atomic_spin_countE+0x826>
   11eb6:	48 89 ce             	mov    %rcx,%rsi
   11eb9:	48 89 c7             	mov    %rax,%rdi
   11ebc:	ff d2                	call   *%rdx
   11ebe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ec2:	48 89 82 50 03 00 00 	mov    %rax,0x350(%rdx)
        vkCmdClearAttachments              = PFN_vkCmdClearAttachments( vkGetDeviceProcAddr( device, "vkCmdClearAttachments" ) );
   11ec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ecd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11ed1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ed5:	48 8d 0d 9a 40 01 00 	lea    0x1409a(%rip),%rcx        # 25f76 <_ZNSt8__detailL19__atomic_spin_countE+0x842>
   11edc:	48 89 ce             	mov    %rcx,%rsi
   11edf:	48 89 c7             	mov    %rax,%rdi
   11ee2:	ff d2                	call   *%rdx
   11ee4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ee8:	48 89 82 58 03 00 00 	mov    %rax,0x358(%rdx)
        vkCmdResolveImage                  = PFN_vkCmdResolveImage( vkGetDeviceProcAddr( device, "vkCmdResolveImage" ) );
   11eef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ef3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11ef7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11efb:	48 8d 0d 8a 40 01 00 	lea    0x1408a(%rip),%rcx        # 25f8c <_ZNSt8__detailL19__atomic_spin_countE+0x858>
   11f02:	48 89 ce             	mov    %rcx,%rsi
   11f05:	48 89 c7             	mov    %rax,%rdi
   11f08:	ff d2                	call   *%rdx
   11f0a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11f0e:	48 89 82 60 03 00 00 	mov    %rax,0x360(%rdx)
        vkCmdSetEvent                      = PFN_vkCmdSetEvent( vkGetDeviceProcAddr( device, "vkCmdSetEvent" ) );
   11f15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f19:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11f1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f21:	48 8d 0d 76 40 01 00 	lea    0x14076(%rip),%rcx        # 25f9e <_ZNSt8__detailL19__atomic_spin_countE+0x86a>
   11f28:	48 89 ce             	mov    %rcx,%rsi
   11f2b:	48 89 c7             	mov    %rax,%rdi
   11f2e:	ff d2                	call   *%rdx
   11f30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11f34:	48 89 82 68 03 00 00 	mov    %rax,0x368(%rdx)
        vkCmdResetEvent                    = PFN_vkCmdResetEvent( vkGetDeviceProcAddr( device, "vkCmdResetEvent" ) );
   11f3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f3f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11f43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f47:	48 8d 0d 5e 40 01 00 	lea    0x1405e(%rip),%rcx        # 25fac <_ZNSt8__detailL19__atomic_spin_countE+0x878>
   11f4e:	48 89 ce             	mov    %rcx,%rsi
   11f51:	48 89 c7             	mov    %rax,%rdi
   11f54:	ff d2                	call   *%rdx
   11f56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11f5a:	48 89 82 70 03 00 00 	mov    %rax,0x370(%rdx)
        vkCmdWaitEvents                    = PFN_vkCmdWaitEvents( vkGetDeviceProcAddr( device, "vkCmdWaitEvents" ) );
   11f61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f65:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11f69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f6d:	48 8d 0d 48 40 01 00 	lea    0x14048(%rip),%rcx        # 25fbc <_ZNSt8__detailL19__atomic_spin_countE+0x888>
   11f74:	48 89 ce             	mov    %rcx,%rsi
   11f77:	48 89 c7             	mov    %rax,%rdi
   11f7a:	ff d2                	call   *%rdx
   11f7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11f80:	48 89 82 78 03 00 00 	mov    %rax,0x378(%rdx)
        vkCmdPipelineBarrier               = PFN_vkCmdPipelineBarrier( vkGetDeviceProcAddr( device, "vkCmdPipelineBarrier" ) );
   11f87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f8b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11f8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f93:	48 8d 0d 32 40 01 00 	lea    0x14032(%rip),%rcx        # 25fcc <_ZNSt8__detailL19__atomic_spin_countE+0x898>
   11f9a:	48 89 ce             	mov    %rcx,%rsi
   11f9d:	48 89 c7             	mov    %rax,%rdi
   11fa0:	ff d2                	call   *%rdx
   11fa2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11fa6:	48 89 82 80 03 00 00 	mov    %rax,0x380(%rdx)
        vkCmdBeginQuery                    = PFN_vkCmdBeginQuery( vkGetDeviceProcAddr( device, "vkCmdBeginQuery" ) );
   11fad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fb1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11fb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11fb9:	48 8d 0d 21 40 01 00 	lea    0x14021(%rip),%rcx        # 25fe1 <_ZNSt8__detailL19__atomic_spin_countE+0x8ad>
   11fc0:	48 89 ce             	mov    %rcx,%rsi
   11fc3:	48 89 c7             	mov    %rax,%rdi
   11fc6:	ff d2                	call   *%rdx
   11fc8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11fcc:	48 89 82 88 03 00 00 	mov    %rax,0x388(%rdx)
        vkCmdEndQuery                      = PFN_vkCmdEndQuery( vkGetDeviceProcAddr( device, "vkCmdEndQuery" ) );
   11fd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fd7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11fdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11fdf:	48 8d 0d 0b 40 01 00 	lea    0x1400b(%rip),%rcx        # 25ff1 <_ZNSt8__detailL19__atomic_spin_countE+0x8bd>
   11fe6:	48 89 ce             	mov    %rcx,%rsi
   11fe9:	48 89 c7             	mov    %rax,%rdi
   11fec:	ff d2                	call   *%rdx
   11fee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11ff2:	48 89 82 90 03 00 00 	mov    %rax,0x390(%rdx)
        vkCmdResetQueryPool                = PFN_vkCmdResetQueryPool( vkGetDeviceProcAddr( device, "vkCmdResetQueryPool" ) );
   11ff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ffd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12001:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12005:	48 8d 0d f3 3f 01 00 	lea    0x13ff3(%rip),%rcx        # 25fff <_ZNSt8__detailL19__atomic_spin_countE+0x8cb>
   1200c:	48 89 ce             	mov    %rcx,%rsi
   1200f:	48 89 c7             	mov    %rax,%rdi
   12012:	ff d2                	call   *%rdx
   12014:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12018:	48 89 82 98 03 00 00 	mov    %rax,0x398(%rdx)
        vkCmdWriteTimestamp                = PFN_vkCmdWriteTimestamp( vkGetDeviceProcAddr( device, "vkCmdWriteTimestamp" ) );
   1201f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12023:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12027:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1202b:	48 8d 0d e1 3f 01 00 	lea    0x13fe1(%rip),%rcx        # 26013 <_ZNSt8__detailL19__atomic_spin_countE+0x8df>
   12032:	48 89 ce             	mov    %rcx,%rsi
   12035:	48 89 c7             	mov    %rax,%rdi
   12038:	ff d2                	call   *%rdx
   1203a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1203e:	48 89 82 a0 03 00 00 	mov    %rax,0x3a0(%rdx)
        vkCmdCopyQueryPoolResults          = PFN_vkCmdCopyQueryPoolResults( vkGetDeviceProcAddr( device, "vkCmdCopyQueryPoolResults" ) );
   12045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12049:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1204d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12051:	48 8d 0d cf 3f 01 00 	lea    0x13fcf(%rip),%rcx        # 26027 <_ZNSt8__detailL19__atomic_spin_countE+0x8f3>
   12058:	48 89 ce             	mov    %rcx,%rsi
   1205b:	48 89 c7             	mov    %rax,%rdi
   1205e:	ff d2                	call   *%rdx
   12060:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12064:	48 89 82 a8 03 00 00 	mov    %rax,0x3a8(%rdx)
        vkCmdPushConstants                 = PFN_vkCmdPushConstants( vkGetDeviceProcAddr( device, "vkCmdPushConstants" ) );
   1206b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1206f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12073:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12077:	48 8d 0d c3 3f 01 00 	lea    0x13fc3(%rip),%rcx        # 26041 <_ZNSt8__detailL19__atomic_spin_countE+0x90d>
   1207e:	48 89 ce             	mov    %rcx,%rsi
   12081:	48 89 c7             	mov    %rax,%rdi
   12084:	ff d2                	call   *%rdx
   12086:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1208a:	48 89 82 b0 03 00 00 	mov    %rax,0x3b0(%rdx)
        vkCmdBeginRenderPass               = PFN_vkCmdBeginRenderPass( vkGetDeviceProcAddr( device, "vkCmdBeginRenderPass" ) );
   12091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12095:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12099:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1209d:	48 8d 0d b0 3f 01 00 	lea    0x13fb0(%rip),%rcx        # 26054 <_ZNSt8__detailL19__atomic_spin_countE+0x920>
   120a4:	48 89 ce             	mov    %rcx,%rsi
   120a7:	48 89 c7             	mov    %rax,%rdi
   120aa:	ff d2                	call   *%rdx
   120ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   120b0:	48 89 82 b8 03 00 00 	mov    %rax,0x3b8(%rdx)
        vkCmdNextSubpass                   = PFN_vkCmdNextSubpass( vkGetDeviceProcAddr( device, "vkCmdNextSubpass" ) );
   120b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120bb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   120bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   120c3:	48 8d 0d 9f 3f 01 00 	lea    0x13f9f(%rip),%rcx        # 26069 <_ZNSt8__detailL19__atomic_spin_countE+0x935>
   120ca:	48 89 ce             	mov    %rcx,%rsi
   120cd:	48 89 c7             	mov    %rax,%rdi
   120d0:	ff d2                	call   *%rdx
   120d2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   120d6:	48 89 82 c0 03 00 00 	mov    %rax,0x3c0(%rdx)
        vkCmdEndRenderPass                 = PFN_vkCmdEndRenderPass( vkGetDeviceProcAddr( device, "vkCmdEndRenderPass" ) );
   120dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120e1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   120e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   120e9:	48 8d 0d 8a 3f 01 00 	lea    0x13f8a(%rip),%rcx        # 2607a <_ZNSt8__detailL19__atomic_spin_countE+0x946>
   120f0:	48 89 ce             	mov    %rcx,%rsi
   120f3:	48 89 c7             	mov    %rax,%rdi
   120f6:	ff d2                	call   *%rdx
   120f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   120fc:	48 89 82 c8 03 00 00 	mov    %rax,0x3c8(%rdx)
        vkCmdExecuteCommands               = PFN_vkCmdExecuteCommands( vkGetDeviceProcAddr( device, "vkCmdExecuteCommands" ) );
   12103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12107:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1210b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1210f:	48 8d 0d 77 3f 01 00 	lea    0x13f77(%rip),%rcx        # 2608d <_ZNSt8__detailL19__atomic_spin_countE+0x959>
   12116:	48 89 ce             	mov    %rcx,%rsi
   12119:	48 89 c7             	mov    %rax,%rdi
   1211c:	ff d2                	call   *%rdx
   1211e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12122:	48 89 82 d0 03 00 00 	mov    %rax,0x3d0(%rdx)
        vkBindBufferMemory2                 = PFN_vkBindBufferMemory2( vkGetDeviceProcAddr( device, "vkBindBufferMemory2" ) );
   12129:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1212d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12131:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12135:	48 8d 0d 66 3f 01 00 	lea    0x13f66(%rip),%rcx        # 260a2 <_ZNSt8__detailL19__atomic_spin_countE+0x96e>
   1213c:	48 89 ce             	mov    %rcx,%rsi
   1213f:	48 89 c7             	mov    %rax,%rdi
   12142:	ff d2                	call   *%rdx
   12144:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12148:	48 89 82 d8 03 00 00 	mov    %rax,0x3d8(%rdx)
        vkBindImageMemory2                  = PFN_vkBindImageMemory2( vkGetDeviceProcAddr( device, "vkBindImageMemory2" ) );
   1214f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12153:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12157:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1215b:	48 8d 0d 54 3f 01 00 	lea    0x13f54(%rip),%rcx        # 260b6 <_ZNSt8__detailL19__atomic_spin_countE+0x982>
   12162:	48 89 ce             	mov    %rcx,%rsi
   12165:	48 89 c7             	mov    %rax,%rdi
   12168:	ff d2                	call   *%rdx
   1216a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1216e:	48 89 82 e0 03 00 00 	mov    %rax,0x3e0(%rdx)
        vkGetDeviceGroupPeerMemoryFeatures  = PFN_vkGetDeviceGroupPeerMemoryFeatures( vkGetDeviceProcAddr( device, "vkGetDeviceGroupPeerMemoryFeatures" ) );
   12175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12179:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1217d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12181:	48 8d 0d 48 3f 01 00 	lea    0x13f48(%rip),%rcx        # 260d0 <_ZNSt8__detailL19__atomic_spin_countE+0x99c>
   12188:	48 89 ce             	mov    %rcx,%rsi
   1218b:	48 89 c7             	mov    %rax,%rdi
   1218e:	ff d2                	call   *%rdx
   12190:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12194:	48 89 82 e8 03 00 00 	mov    %rax,0x3e8(%rdx)
        vkCmdSetDeviceMask                  = PFN_vkCmdSetDeviceMask( vkGetDeviceProcAddr( device, "vkCmdSetDeviceMask" ) );
   1219b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1219f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   121a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   121a7:	48 8d 0d 45 3f 01 00 	lea    0x13f45(%rip),%rcx        # 260f3 <_ZNSt8__detailL19__atomic_spin_countE+0x9bf>
   121ae:	48 89 ce             	mov    %rcx,%rsi
   121b1:	48 89 c7             	mov    %rax,%rdi
   121b4:	ff d2                	call   *%rdx
   121b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   121ba:	48 89 82 f0 03 00 00 	mov    %rax,0x3f0(%rdx)
        vkCmdDispatchBase                   = PFN_vkCmdDispatchBase( vkGetDeviceProcAddr( device, "vkCmdDispatchBase" ) );
   121c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121c5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   121c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   121cd:	48 8d 0d 32 3f 01 00 	lea    0x13f32(%rip),%rcx        # 26106 <_ZNSt8__detailL19__atomic_spin_countE+0x9d2>
   121d4:	48 89 ce             	mov    %rcx,%rsi
   121d7:	48 89 c7             	mov    %rax,%rdi
   121da:	ff d2                	call   *%rdx
   121dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   121e0:	48 89 82 f8 03 00 00 	mov    %rax,0x3f8(%rdx)
        vkGetImageMemoryRequirements2       = PFN_vkGetImageMemoryRequirements2( vkGetDeviceProcAddr( device, "vkGetImageMemoryRequirements2" ) );
   121e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   121ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   121f3:	48 8d 0d 1e 3f 01 00 	lea    0x13f1e(%rip),%rcx        # 26118 <_ZNSt8__detailL19__atomic_spin_countE+0x9e4>
   121fa:	48 89 ce             	mov    %rcx,%rsi
   121fd:	48 89 c7             	mov    %rax,%rdi
   12200:	ff d2                	call   *%rdx
   12202:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12206:	48 89 82 00 04 00 00 	mov    %rax,0x400(%rdx)
        vkGetBufferMemoryRequirements2      = PFN_vkGetBufferMemoryRequirements2( vkGetDeviceProcAddr( device, "vkGetBufferMemoryRequirements2" ) );
   1220d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12211:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12215:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12219:	48 8d 0d 18 3f 01 00 	lea    0x13f18(%rip),%rcx        # 26138 <_ZNSt8__detailL19__atomic_spin_countE+0xa04>
   12220:	48 89 ce             	mov    %rcx,%rsi
   12223:	48 89 c7             	mov    %rax,%rdi
   12226:	ff d2                	call   *%rdx
   12228:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1222c:	48 89 82 08 04 00 00 	mov    %rax,0x408(%rdx)
        vkGetImageSparseMemoryRequirements2 = PFN_vkGetImageSparseMemoryRequirements2( vkGetDeviceProcAddr( device, "vkGetImageSparseMemoryRequirements2" ) );
   12233:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12237:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1223b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1223f:	48 8d 0d 12 3f 01 00 	lea    0x13f12(%rip),%rcx        # 26158 <_ZNSt8__detailL19__atomic_spin_countE+0xa24>
   12246:	48 89 ce             	mov    %rcx,%rsi
   12249:	48 89 c7             	mov    %rax,%rdi
   1224c:	ff d2                	call   *%rdx
   1224e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12252:	48 89 82 10 04 00 00 	mov    %rax,0x410(%rdx)
        vkTrimCommandPool                   = PFN_vkTrimCommandPool( vkGetDeviceProcAddr( device, "vkTrimCommandPool" ) );
   12259:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1225d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12261:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12265:	48 8d 0d 10 3f 01 00 	lea    0x13f10(%rip),%rcx        # 2617c <_ZNSt8__detailL19__atomic_spin_countE+0xa48>
   1226c:	48 89 ce             	mov    %rcx,%rsi
   1226f:	48 89 c7             	mov    %rax,%rdi
   12272:	ff d2                	call   *%rdx
   12274:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12278:	48 89 82 18 04 00 00 	mov    %rax,0x418(%rdx)
        vkGetDeviceQueue2                   = PFN_vkGetDeviceQueue2( vkGetDeviceProcAddr( device, "vkGetDeviceQueue2" ) );
   1227f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12283:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12287:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1228b:	48 8d 0d fc 3e 01 00 	lea    0x13efc(%rip),%rcx        # 2618e <_ZNSt8__detailL19__atomic_spin_countE+0xa5a>
   12292:	48 89 ce             	mov    %rcx,%rsi
   12295:	48 89 c7             	mov    %rax,%rdi
   12298:	ff d2                	call   *%rdx
   1229a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1229e:	48 89 82 20 04 00 00 	mov    %rax,0x420(%rdx)
        vkCreateSamplerYcbcrConversion      = PFN_vkCreateSamplerYcbcrConversion( vkGetDeviceProcAddr( device, "vkCreateSamplerYcbcrConversion" ) );
   122a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122a9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   122ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   122b1:	48 8d 0d e8 3e 01 00 	lea    0x13ee8(%rip),%rcx        # 261a0 <_ZNSt8__detailL19__atomic_spin_countE+0xa6c>
   122b8:	48 89 ce             	mov    %rcx,%rsi
   122bb:	48 89 c7             	mov    %rax,%rdi
   122be:	ff d2                	call   *%rdx
   122c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   122c4:	48 89 82 28 04 00 00 	mov    %rax,0x428(%rdx)
        vkDestroySamplerYcbcrConversion     = PFN_vkDestroySamplerYcbcrConversion( vkGetDeviceProcAddr( device, "vkDestroySamplerYcbcrConversion" ) );
   122cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122cf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   122d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   122d7:	48 8d 0d e2 3e 01 00 	lea    0x13ee2(%rip),%rcx        # 261c0 <_ZNSt8__detailL19__atomic_spin_countE+0xa8c>
   122de:	48 89 ce             	mov    %rcx,%rsi
   122e1:	48 89 c7             	mov    %rax,%rdi
   122e4:	ff d2                	call   *%rdx
   122e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   122ea:	48 89 82 30 04 00 00 	mov    %rax,0x430(%rdx)
        vkCreateDescriptorUpdateTemplate    = PFN_vkCreateDescriptorUpdateTemplate( vkGetDeviceProcAddr( device, "vkCreateDescriptorUpdateTemplate" ) );
   122f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122f5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   122f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   122fd:	48 8d 0d dc 3e 01 00 	lea    0x13edc(%rip),%rcx        # 261e0 <_ZNSt8__detailL19__atomic_spin_countE+0xaac>
   12304:	48 89 ce             	mov    %rcx,%rsi
   12307:	48 89 c7             	mov    %rax,%rdi
   1230a:	ff d2                	call   *%rdx
   1230c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12310:	48 89 82 38 04 00 00 	mov    %rax,0x438(%rdx)
        vkDestroyDescriptorUpdateTemplate   = PFN_vkDestroyDescriptorUpdateTemplate( vkGetDeviceProcAddr( device, "vkDestroyDescriptorUpdateTemplate" ) );
   12317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1231b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1231f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12323:	48 8d 0d de 3e 01 00 	lea    0x13ede(%rip),%rcx        # 26208 <_ZNSt8__detailL19__atomic_spin_countE+0xad4>
   1232a:	48 89 ce             	mov    %rcx,%rsi
   1232d:	48 89 c7             	mov    %rax,%rdi
   12330:	ff d2                	call   *%rdx
   12332:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12336:	48 89 82 40 04 00 00 	mov    %rax,0x440(%rdx)
        vkUpdateDescriptorSetWithTemplate   = PFN_vkUpdateDescriptorSetWithTemplate( vkGetDeviceProcAddr( device, "vkUpdateDescriptorSetWithTemplate" ) );
   1233d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12341:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12345:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12349:	48 8d 0d e0 3e 01 00 	lea    0x13ee0(%rip),%rcx        # 26230 <_ZNSt8__detailL19__atomic_spin_countE+0xafc>
   12350:	48 89 ce             	mov    %rcx,%rsi
   12353:	48 89 c7             	mov    %rax,%rdi
   12356:	ff d2                	call   *%rdx
   12358:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1235c:	48 89 82 48 04 00 00 	mov    %rax,0x448(%rdx)
        vkGetDescriptorSetLayoutSupport     = PFN_vkGetDescriptorSetLayoutSupport( vkGetDeviceProcAddr( device, "vkGetDescriptorSetLayoutSupport" ) );
   12363:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12367:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1236b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1236f:	48 8d 0d e2 3e 01 00 	lea    0x13ee2(%rip),%rcx        # 26258 <_ZNSt8__detailL19__atomic_spin_countE+0xb24>
   12376:	48 89 ce             	mov    %rcx,%rsi
   12379:	48 89 c7             	mov    %rax,%rdi
   1237c:	ff d2                	call   *%rdx
   1237e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12382:	48 89 82 50 04 00 00 	mov    %rax,0x450(%rdx)
        vkCmdDrawIndirectCount          = PFN_vkCmdDrawIndirectCount( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectCount" ) );
   12389:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1238d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12391:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12395:	48 8d 0d dc 3e 01 00 	lea    0x13edc(%rip),%rcx        # 26278 <_ZNSt8__detailL19__atomic_spin_countE+0xb44>
   1239c:	48 89 ce             	mov    %rcx,%rsi
   1239f:	48 89 c7             	mov    %rax,%rdi
   123a2:	ff d2                	call   *%rdx
   123a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   123a8:	48 89 82 58 04 00 00 	mov    %rax,0x458(%rdx)
        vkCmdDrawIndexedIndirectCount   = PFN_vkCmdDrawIndexedIndirectCount( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirectCount" ) );
   123af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123b3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   123b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   123bb:	48 8d 0d cd 3e 01 00 	lea    0x13ecd(%rip),%rcx        # 2628f <_ZNSt8__detailL19__atomic_spin_countE+0xb5b>
   123c2:	48 89 ce             	mov    %rcx,%rsi
   123c5:	48 89 c7             	mov    %rax,%rdi
   123c8:	ff d2                	call   *%rdx
   123ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   123ce:	48 89 82 60 04 00 00 	mov    %rax,0x460(%rdx)
        vkCreateRenderPass2             = PFN_vkCreateRenderPass2( vkGetDeviceProcAddr( device, "vkCreateRenderPass2" ) );
   123d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   123dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   123e1:	48 8d 0d c5 3e 01 00 	lea    0x13ec5(%rip),%rcx        # 262ad <_ZNSt8__detailL19__atomic_spin_countE+0xb79>
   123e8:	48 89 ce             	mov    %rcx,%rsi
   123eb:	48 89 c7             	mov    %rax,%rdi
   123ee:	ff d2                	call   *%rdx
   123f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   123f4:	48 89 82 68 04 00 00 	mov    %rax,0x468(%rdx)
        vkCmdBeginRenderPass2           = PFN_vkCmdBeginRenderPass2( vkGetDeviceProcAddr( device, "vkCmdBeginRenderPass2" ) );
   123fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123ff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12403:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12407:	48 8d 0d b3 3e 01 00 	lea    0x13eb3(%rip),%rcx        # 262c1 <_ZNSt8__detailL19__atomic_spin_countE+0xb8d>
   1240e:	48 89 ce             	mov    %rcx,%rsi
   12411:	48 89 c7             	mov    %rax,%rdi
   12414:	ff d2                	call   *%rdx
   12416:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1241a:	48 89 82 70 04 00 00 	mov    %rax,0x470(%rdx)
        vkCmdNextSubpass2               = PFN_vkCmdNextSubpass2( vkGetDeviceProcAddr( device, "vkCmdNextSubpass2" ) );
   12421:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12425:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12429:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1242d:	48 8d 0d a3 3e 01 00 	lea    0x13ea3(%rip),%rcx        # 262d7 <_ZNSt8__detailL19__atomic_spin_countE+0xba3>
   12434:	48 89 ce             	mov    %rcx,%rsi
   12437:	48 89 c7             	mov    %rax,%rdi
   1243a:	ff d2                	call   *%rdx
   1243c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12440:	48 89 82 78 04 00 00 	mov    %rax,0x478(%rdx)
        vkCmdEndRenderPass2             = PFN_vkCmdEndRenderPass2( vkGetDeviceProcAddr( device, "vkCmdEndRenderPass2" ) );
   12447:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1244b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1244f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12453:	48 8d 0d 8f 3e 01 00 	lea    0x13e8f(%rip),%rcx        # 262e9 <_ZNSt8__detailL19__atomic_spin_countE+0xbb5>
   1245a:	48 89 ce             	mov    %rcx,%rsi
   1245d:	48 89 c7             	mov    %rax,%rdi
   12460:	ff d2                	call   *%rdx
   12462:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12466:	48 89 82 80 04 00 00 	mov    %rax,0x480(%rdx)
        vkResetQueryPool                = PFN_vkResetQueryPool( vkGetDeviceProcAddr( device, "vkResetQueryPool" ) );
   1246d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12471:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12475:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12479:	48 8d 0d 7d 3e 01 00 	lea    0x13e7d(%rip),%rcx        # 262fd <_ZNSt8__detailL19__atomic_spin_countE+0xbc9>
   12480:	48 89 ce             	mov    %rcx,%rsi
   12483:	48 89 c7             	mov    %rax,%rdi
   12486:	ff d2                	call   *%rdx
   12488:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1248c:	48 89 82 88 04 00 00 	mov    %rax,0x488(%rdx)
        vkGetSemaphoreCounterValue      = PFN_vkGetSemaphoreCounterValue( vkGetDeviceProcAddr( device, "vkGetSemaphoreCounterValue" ) );
   12493:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12497:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1249b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1249f:	48 8d 0d 68 3e 01 00 	lea    0x13e68(%rip),%rcx        # 2630e <_ZNSt8__detailL19__atomic_spin_countE+0xbda>
   124a6:	48 89 ce             	mov    %rcx,%rsi
   124a9:	48 89 c7             	mov    %rax,%rdi
   124ac:	ff d2                	call   *%rdx
   124ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   124b2:	48 89 82 90 04 00 00 	mov    %rax,0x490(%rdx)
        vkWaitSemaphores                = PFN_vkWaitSemaphores( vkGetDeviceProcAddr( device, "vkWaitSemaphores" ) );
   124b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   124bd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   124c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   124c5:	48 8d 0d 5d 3e 01 00 	lea    0x13e5d(%rip),%rcx        # 26329 <_ZNSt8__detailL19__atomic_spin_countE+0xbf5>
   124cc:	48 89 ce             	mov    %rcx,%rsi
   124cf:	48 89 c7             	mov    %rax,%rdi
   124d2:	ff d2                	call   *%rdx
   124d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   124d8:	48 89 82 98 04 00 00 	mov    %rax,0x498(%rdx)
        vkSignalSemaphore               = PFN_vkSignalSemaphore( vkGetDeviceProcAddr( device, "vkSignalSemaphore" ) );
   124df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   124e3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   124e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   124eb:	48 8d 0d 48 3e 01 00 	lea    0x13e48(%rip),%rcx        # 2633a <_ZNSt8__detailL19__atomic_spin_countE+0xc06>
   124f2:	48 89 ce             	mov    %rcx,%rsi
   124f5:	48 89 c7             	mov    %rax,%rdi
   124f8:	ff d2                	call   *%rdx
   124fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   124fe:	48 89 82 a0 04 00 00 	mov    %rax,0x4a0(%rdx)
        vkGetBufferDeviceAddress        = PFN_vkGetBufferDeviceAddress( vkGetDeviceProcAddr( device, "vkGetBufferDeviceAddress" ) );
   12505:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12509:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1250d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12511:	48 8d 0d 34 3e 01 00 	lea    0x13e34(%rip),%rcx        # 2634c <_ZNSt8__detailL19__atomic_spin_countE+0xc18>
   12518:	48 89 ce             	mov    %rcx,%rsi
   1251b:	48 89 c7             	mov    %rax,%rdi
   1251e:	ff d2                	call   *%rdx
   12520:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12524:	48 89 82 a8 04 00 00 	mov    %rax,0x4a8(%rdx)
        vkGetBufferOpaqueCaptureAddress = PFN_vkGetBufferOpaqueCaptureAddress( vkGetDeviceProcAddr( device, "vkGetBufferOpaqueCaptureAddress" ) );
   1252b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1252f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12533:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12537:	48 8d 0d 2a 3e 01 00 	lea    0x13e2a(%rip),%rcx        # 26368 <_ZNSt8__detailL19__atomic_spin_countE+0xc34>
   1253e:	48 89 ce             	mov    %rcx,%rsi
   12541:	48 89 c7             	mov    %rax,%rdi
   12544:	ff d2                	call   *%rdx
   12546:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1254a:	48 89 82 b0 04 00 00 	mov    %rax,0x4b0(%rdx)
          PFN_vkGetDeviceMemoryOpaqueCaptureAddress( vkGetDeviceProcAddr( device, "vkGetDeviceMemoryOpaqueCaptureAddress" ) );
   12551:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12555:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12559:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1255d:	48 8d 0d 24 3e 01 00 	lea    0x13e24(%rip),%rcx        # 26388 <_ZNSt8__detailL19__atomic_spin_countE+0xc54>
   12564:	48 89 ce             	mov    %rcx,%rsi
   12567:	48 89 c7             	mov    %rax,%rdi
   1256a:	ff d2                	call   *%rdx
        vkGetDeviceMemoryOpaqueCaptureAddress =
   1256c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12570:	48 89 82 b8 04 00 00 	mov    %rax,0x4b8(%rdx)
        vkCreatePrivateDataSlot             = PFN_vkCreatePrivateDataSlot( vkGetDeviceProcAddr( device, "vkCreatePrivateDataSlot" ) );
   12577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1257b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1257f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12583:	48 8d 0d 24 3e 01 00 	lea    0x13e24(%rip),%rcx        # 263ae <_ZNSt8__detailL19__atomic_spin_countE+0xc7a>
   1258a:	48 89 ce             	mov    %rcx,%rsi
   1258d:	48 89 c7             	mov    %rax,%rdi
   12590:	ff d2                	call   *%rdx
   12592:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12596:	48 89 82 c0 04 00 00 	mov    %rax,0x4c0(%rdx)
        vkDestroyPrivateDataSlot            = PFN_vkDestroyPrivateDataSlot( vkGetDeviceProcAddr( device, "vkDestroyPrivateDataSlot" ) );
   1259d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   125a1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   125a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   125a9:	48 8d 0d 16 3e 01 00 	lea    0x13e16(%rip),%rcx        # 263c6 <_ZNSt8__detailL19__atomic_spin_countE+0xc92>
   125b0:	48 89 ce             	mov    %rcx,%rsi
   125b3:	48 89 c7             	mov    %rax,%rdi
   125b6:	ff d2                	call   *%rdx
   125b8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   125bc:	48 89 82 c8 04 00 00 	mov    %rax,0x4c8(%rdx)
        vkSetPrivateData                    = PFN_vkSetPrivateData( vkGetDeviceProcAddr( device, "vkSetPrivateData" ) );
   125c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   125c7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   125cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   125cf:	48 8d 0d 09 3e 01 00 	lea    0x13e09(%rip),%rcx        # 263df <_ZNSt8__detailL19__atomic_spin_countE+0xcab>
   125d6:	48 89 ce             	mov    %rcx,%rsi
   125d9:	48 89 c7             	mov    %rax,%rdi
   125dc:	ff d2                	call   *%rdx
   125de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   125e2:	48 89 82 d0 04 00 00 	mov    %rax,0x4d0(%rdx)
        vkGetPrivateData                    = PFN_vkGetPrivateData( vkGetDeviceProcAddr( device, "vkGetPrivateData" ) );
   125e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   125ed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   125f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   125f5:	48 8d 0d f4 3d 01 00 	lea    0x13df4(%rip),%rcx        # 263f0 <_ZNSt8__detailL19__atomic_spin_countE+0xcbc>
   125fc:	48 89 ce             	mov    %rcx,%rsi
   125ff:	48 89 c7             	mov    %rax,%rdi
   12602:	ff d2                	call   *%rdx
   12604:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12608:	48 89 82 d8 04 00 00 	mov    %rax,0x4d8(%rdx)
        vkCmdSetEvent2                      = PFN_vkCmdSetEvent2( vkGetDeviceProcAddr( device, "vkCmdSetEvent2" ) );
   1260f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12613:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12617:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1261b:	48 8d 0d df 3d 01 00 	lea    0x13ddf(%rip),%rcx        # 26401 <_ZNSt8__detailL19__atomic_spin_countE+0xccd>
   12622:	48 89 ce             	mov    %rcx,%rsi
   12625:	48 89 c7             	mov    %rax,%rdi
   12628:	ff d2                	call   *%rdx
   1262a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1262e:	48 89 82 e0 04 00 00 	mov    %rax,0x4e0(%rdx)
        vkCmdResetEvent2                    = PFN_vkCmdResetEvent2( vkGetDeviceProcAddr( device, "vkCmdResetEvent2" ) );
   12635:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12639:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1263d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12641:	48 8d 0d c8 3d 01 00 	lea    0x13dc8(%rip),%rcx        # 26410 <_ZNSt8__detailL19__atomic_spin_countE+0xcdc>
   12648:	48 89 ce             	mov    %rcx,%rsi
   1264b:	48 89 c7             	mov    %rax,%rdi
   1264e:	ff d2                	call   *%rdx
   12650:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12654:	48 89 82 e8 04 00 00 	mov    %rax,0x4e8(%rdx)
        vkCmdWaitEvents2                    = PFN_vkCmdWaitEvents2( vkGetDeviceProcAddr( device, "vkCmdWaitEvents2" ) );
   1265b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1265f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12663:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12667:	48 8d 0d b3 3d 01 00 	lea    0x13db3(%rip),%rcx        # 26421 <_ZNSt8__detailL19__atomic_spin_countE+0xced>
   1266e:	48 89 ce             	mov    %rcx,%rsi
   12671:	48 89 c7             	mov    %rax,%rdi
   12674:	ff d2                	call   *%rdx
   12676:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1267a:	48 89 82 f0 04 00 00 	mov    %rax,0x4f0(%rdx)
        vkCmdPipelineBarrier2               = PFN_vkCmdPipelineBarrier2( vkGetDeviceProcAddr( device, "vkCmdPipelineBarrier2" ) );
   12681:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12685:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12689:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1268d:	48 8d 0d 9e 3d 01 00 	lea    0x13d9e(%rip),%rcx        # 26432 <_ZNSt8__detailL19__atomic_spin_countE+0xcfe>
   12694:	48 89 ce             	mov    %rcx,%rsi
   12697:	48 89 c7             	mov    %rax,%rdi
   1269a:	ff d2                	call   *%rdx
   1269c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   126a0:	48 89 82 f8 04 00 00 	mov    %rax,0x4f8(%rdx)
        vkCmdWriteTimestamp2                = PFN_vkCmdWriteTimestamp2( vkGetDeviceProcAddr( device, "vkCmdWriteTimestamp2" ) );
   126a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   126ab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   126af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126b3:	48 8d 0d 8e 3d 01 00 	lea    0x13d8e(%rip),%rcx        # 26448 <_ZNSt8__detailL19__atomic_spin_countE+0xd14>
   126ba:	48 89 ce             	mov    %rcx,%rsi
   126bd:	48 89 c7             	mov    %rax,%rdi
   126c0:	ff d2                	call   *%rdx
   126c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   126c6:	48 89 82 00 05 00 00 	mov    %rax,0x500(%rdx)
        vkQueueSubmit2                      = PFN_vkQueueSubmit2( vkGetDeviceProcAddr( device, "vkQueueSubmit2" ) );
   126cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   126d1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   126d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126d9:	48 8d 0d 7d 3d 01 00 	lea    0x13d7d(%rip),%rcx        # 2645d <_ZNSt8__detailL19__atomic_spin_countE+0xd29>
   126e0:	48 89 ce             	mov    %rcx,%rsi
   126e3:	48 89 c7             	mov    %rax,%rdi
   126e6:	ff d2                	call   *%rdx
   126e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   126ec:	48 89 82 08 05 00 00 	mov    %rax,0x508(%rdx)
        vkCmdCopyBuffer2                    = PFN_vkCmdCopyBuffer2( vkGetDeviceProcAddr( device, "vkCmdCopyBuffer2" ) );
   126f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   126f7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   126fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126ff:	48 8d 0d 66 3d 01 00 	lea    0x13d66(%rip),%rcx        # 2646c <_ZNSt8__detailL19__atomic_spin_countE+0xd38>
   12706:	48 89 ce             	mov    %rcx,%rsi
   12709:	48 89 c7             	mov    %rax,%rdi
   1270c:	ff d2                	call   *%rdx
   1270e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12712:	48 89 82 10 05 00 00 	mov    %rax,0x510(%rdx)
        vkCmdCopyImage2                     = PFN_vkCmdCopyImage2( vkGetDeviceProcAddr( device, "vkCmdCopyImage2" ) );
   12719:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1271d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12721:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12725:	48 8d 0d 51 3d 01 00 	lea    0x13d51(%rip),%rcx        # 2647d <_ZNSt8__detailL19__atomic_spin_countE+0xd49>
   1272c:	48 89 ce             	mov    %rcx,%rsi
   1272f:	48 89 c7             	mov    %rax,%rdi
   12732:	ff d2                	call   *%rdx
   12734:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12738:	48 89 82 18 05 00 00 	mov    %rax,0x518(%rdx)
        vkCmdCopyBufferToImage2             = PFN_vkCmdCopyBufferToImage2( vkGetDeviceProcAddr( device, "vkCmdCopyBufferToImage2" ) );
   1273f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12743:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12747:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1274b:	48 8d 0d 3b 3d 01 00 	lea    0x13d3b(%rip),%rcx        # 2648d <_ZNSt8__detailL19__atomic_spin_countE+0xd59>
   12752:	48 89 ce             	mov    %rcx,%rsi
   12755:	48 89 c7             	mov    %rax,%rdi
   12758:	ff d2                	call   *%rdx
   1275a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1275e:	48 89 82 20 05 00 00 	mov    %rax,0x520(%rdx)
        vkCmdCopyImageToBuffer2             = PFN_vkCmdCopyImageToBuffer2( vkGetDeviceProcAddr( device, "vkCmdCopyImageToBuffer2" ) );
   12765:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12769:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1276d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12771:	48 8d 0d 2d 3d 01 00 	lea    0x13d2d(%rip),%rcx        # 264a5 <_ZNSt8__detailL19__atomic_spin_countE+0xd71>
   12778:	48 89 ce             	mov    %rcx,%rsi
   1277b:	48 89 c7             	mov    %rax,%rdi
   1277e:	ff d2                	call   *%rdx
   12780:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12784:	48 89 82 28 05 00 00 	mov    %rax,0x528(%rdx)
        vkCmdBlitImage2                     = PFN_vkCmdBlitImage2( vkGetDeviceProcAddr( device, "vkCmdBlitImage2" ) );
   1278b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1278f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12793:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12797:	48 8d 0d 1f 3d 01 00 	lea    0x13d1f(%rip),%rcx        # 264bd <_ZNSt8__detailL19__atomic_spin_countE+0xd89>
   1279e:	48 89 ce             	mov    %rcx,%rsi
   127a1:	48 89 c7             	mov    %rax,%rdi
   127a4:	ff d2                	call   *%rdx
   127a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   127aa:	48 89 82 30 05 00 00 	mov    %rax,0x530(%rdx)
        vkCmdResolveImage2                  = PFN_vkCmdResolveImage2( vkGetDeviceProcAddr( device, "vkCmdResolveImage2" ) );
   127b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   127b5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   127b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   127bd:	48 8d 0d 09 3d 01 00 	lea    0x13d09(%rip),%rcx        # 264cd <_ZNSt8__detailL19__atomic_spin_countE+0xd99>
   127c4:	48 89 ce             	mov    %rcx,%rsi
   127c7:	48 89 c7             	mov    %rax,%rdi
   127ca:	ff d2                	call   *%rdx
   127cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   127d0:	48 89 82 38 05 00 00 	mov    %rax,0x538(%rdx)
        vkCmdBeginRendering                 = PFN_vkCmdBeginRendering( vkGetDeviceProcAddr( device, "vkCmdBeginRendering" ) );
   127d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   127db:	48 8b 50 10          	mov    0x10(%rax),%rdx
   127df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   127e3:	48 8d 0d f6 3c 01 00 	lea    0x13cf6(%rip),%rcx        # 264e0 <_ZNSt8__detailL19__atomic_spin_countE+0xdac>
   127ea:	48 89 ce             	mov    %rcx,%rsi
   127ed:	48 89 c7             	mov    %rax,%rdi
   127f0:	ff d2                	call   *%rdx
   127f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   127f6:	48 89 82 40 05 00 00 	mov    %rax,0x540(%rdx)
        vkCmdEndRendering                   = PFN_vkCmdEndRendering( vkGetDeviceProcAddr( device, "vkCmdEndRendering" ) );
   127fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12801:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12805:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12809:	48 8d 0d e4 3c 01 00 	lea    0x13ce4(%rip),%rcx        # 264f4 <_ZNSt8__detailL19__atomic_spin_countE+0xdc0>
   12810:	48 89 ce             	mov    %rcx,%rsi
   12813:	48 89 c7             	mov    %rax,%rdi
   12816:	ff d2                	call   *%rdx
   12818:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1281c:	48 89 82 48 05 00 00 	mov    %rax,0x548(%rdx)
        vkCmdSetCullMode                    = PFN_vkCmdSetCullMode( vkGetDeviceProcAddr( device, "vkCmdSetCullMode" ) );
   12823:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12827:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1282b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1282f:	48 8d 0d d0 3c 01 00 	lea    0x13cd0(%rip),%rcx        # 26506 <_ZNSt8__detailL19__atomic_spin_countE+0xdd2>
   12836:	48 89 ce             	mov    %rcx,%rsi
   12839:	48 89 c7             	mov    %rax,%rdi
   1283c:	ff d2                	call   *%rdx
   1283e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12842:	48 89 82 50 05 00 00 	mov    %rax,0x550(%rdx)
        vkCmdSetFrontFace                   = PFN_vkCmdSetFrontFace( vkGetDeviceProcAddr( device, "vkCmdSetFrontFace" ) );
   12849:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1284d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12851:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12855:	48 8d 0d bb 3c 01 00 	lea    0x13cbb(%rip),%rcx        # 26517 <_ZNSt8__detailL19__atomic_spin_countE+0xde3>
   1285c:	48 89 ce             	mov    %rcx,%rsi
   1285f:	48 89 c7             	mov    %rax,%rdi
   12862:	ff d2                	call   *%rdx
   12864:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12868:	48 89 82 58 05 00 00 	mov    %rax,0x558(%rdx)
        vkCmdSetPrimitiveTopology           = PFN_vkCmdSetPrimitiveTopology( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveTopology" ) );
   1286f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12873:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12877:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1287b:	48 8d 0d a7 3c 01 00 	lea    0x13ca7(%rip),%rcx        # 26529 <_ZNSt8__detailL19__atomic_spin_countE+0xdf5>
   12882:	48 89 ce             	mov    %rcx,%rsi
   12885:	48 89 c7             	mov    %rax,%rdi
   12888:	ff d2                	call   *%rdx
   1288a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1288e:	48 89 82 60 05 00 00 	mov    %rax,0x560(%rdx)
        vkCmdSetViewportWithCount           = PFN_vkCmdSetViewportWithCount( vkGetDeviceProcAddr( device, "vkCmdSetViewportWithCount" ) );
   12895:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12899:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1289d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   128a1:	48 8d 0d 9b 3c 01 00 	lea    0x13c9b(%rip),%rcx        # 26543 <_ZNSt8__detailL19__atomic_spin_countE+0xe0f>
   128a8:	48 89 ce             	mov    %rcx,%rsi
   128ab:	48 89 c7             	mov    %rax,%rdi
   128ae:	ff d2                	call   *%rdx
   128b0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   128b4:	48 89 82 68 05 00 00 	mov    %rax,0x568(%rdx)
        vkCmdSetScissorWithCount            = PFN_vkCmdSetScissorWithCount( vkGetDeviceProcAddr( device, "vkCmdSetScissorWithCount" ) );
   128bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128bf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   128c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   128c7:	48 8d 0d 8f 3c 01 00 	lea    0x13c8f(%rip),%rcx        # 2655d <_ZNSt8__detailL19__atomic_spin_countE+0xe29>
   128ce:	48 89 ce             	mov    %rcx,%rsi
   128d1:	48 89 c7             	mov    %rax,%rdi
   128d4:	ff d2                	call   *%rdx
   128d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   128da:	48 89 82 70 05 00 00 	mov    %rax,0x570(%rdx)
        vkCmdBindVertexBuffers2             = PFN_vkCmdBindVertexBuffers2( vkGetDeviceProcAddr( device, "vkCmdBindVertexBuffers2" ) );
   128e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128e5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   128e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   128ed:	48 8d 0d 82 3c 01 00 	lea    0x13c82(%rip),%rcx        # 26576 <_ZNSt8__detailL19__atomic_spin_countE+0xe42>
   128f4:	48 89 ce             	mov    %rcx,%rsi
   128f7:	48 89 c7             	mov    %rax,%rdi
   128fa:	ff d2                	call   *%rdx
   128fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12900:	48 89 82 78 05 00 00 	mov    %rax,0x578(%rdx)
        vkCmdSetDepthTestEnable             = PFN_vkCmdSetDepthTestEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthTestEnable" ) );
   12907:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1290b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1290f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12913:	48 8d 0d 74 3c 01 00 	lea    0x13c74(%rip),%rcx        # 2658e <_ZNSt8__detailL19__atomic_spin_countE+0xe5a>
   1291a:	48 89 ce             	mov    %rcx,%rsi
   1291d:	48 89 c7             	mov    %rax,%rdi
   12920:	ff d2                	call   *%rdx
   12922:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12926:	48 89 82 80 05 00 00 	mov    %rax,0x580(%rdx)
        vkCmdSetDepthWriteEnable            = PFN_vkCmdSetDepthWriteEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthWriteEnable" ) );
   1292d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12931:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12935:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12939:	48 8d 0d 66 3c 01 00 	lea    0x13c66(%rip),%rcx        # 265a6 <_ZNSt8__detailL19__atomic_spin_countE+0xe72>
   12940:	48 89 ce             	mov    %rcx,%rsi
   12943:	48 89 c7             	mov    %rax,%rdi
   12946:	ff d2                	call   *%rdx
   12948:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1294c:	48 89 82 88 05 00 00 	mov    %rax,0x588(%rdx)
        vkCmdSetDepthCompareOp              = PFN_vkCmdSetDepthCompareOp( vkGetDeviceProcAddr( device, "vkCmdSetDepthCompareOp" ) );
   12953:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12957:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1295b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1295f:	48 8d 0d 59 3c 01 00 	lea    0x13c59(%rip),%rcx        # 265bf <_ZNSt8__detailL19__atomic_spin_countE+0xe8b>
   12966:	48 89 ce             	mov    %rcx,%rsi
   12969:	48 89 c7             	mov    %rax,%rdi
   1296c:	ff d2                	call   *%rdx
   1296e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12972:	48 89 82 90 05 00 00 	mov    %rax,0x590(%rdx)
        vkCmdSetDepthBoundsTestEnable       = PFN_vkCmdSetDepthBoundsTestEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthBoundsTestEnable" ) );
   12979:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1297d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12981:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12985:	48 8d 0d 4a 3c 01 00 	lea    0x13c4a(%rip),%rcx        # 265d6 <_ZNSt8__detailL19__atomic_spin_countE+0xea2>
   1298c:	48 89 ce             	mov    %rcx,%rsi
   1298f:	48 89 c7             	mov    %rax,%rdi
   12992:	ff d2                	call   *%rdx
   12994:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12998:	48 89 82 98 05 00 00 	mov    %rax,0x598(%rdx)
        vkCmdSetStencilTestEnable           = PFN_vkCmdSetStencilTestEnable( vkGetDeviceProcAddr( device, "vkCmdSetStencilTestEnable" ) );
   1299f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   129a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   129a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129ab:	48 8d 0d 42 3c 01 00 	lea    0x13c42(%rip),%rcx        # 265f4 <_ZNSt8__detailL19__atomic_spin_countE+0xec0>
   129b2:	48 89 ce             	mov    %rcx,%rsi
   129b5:	48 89 c7             	mov    %rax,%rdi
   129b8:	ff d2                	call   *%rdx
   129ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   129be:	48 89 82 a0 05 00 00 	mov    %rax,0x5a0(%rdx)
        vkCmdSetStencilOp                   = PFN_vkCmdSetStencilOp( vkGetDeviceProcAddr( device, "vkCmdSetStencilOp" ) );
   129c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   129c9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   129cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129d1:	48 8d 0d 36 3c 01 00 	lea    0x13c36(%rip),%rcx        # 2660e <_ZNSt8__detailL19__atomic_spin_countE+0xeda>
   129d8:	48 89 ce             	mov    %rcx,%rsi
   129db:	48 89 c7             	mov    %rax,%rdi
   129de:	ff d2                	call   *%rdx
   129e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   129e4:	48 89 82 a8 05 00 00 	mov    %rax,0x5a8(%rdx)
        vkCmdSetRasterizerDiscardEnable     = PFN_vkCmdSetRasterizerDiscardEnable( vkGetDeviceProcAddr( device, "vkCmdSetRasterizerDiscardEnable" ) );
   129eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   129ef:	48 8b 50 10          	mov    0x10(%rax),%rdx
   129f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129f7:	48 8d 0d 22 3c 01 00 	lea    0x13c22(%rip),%rcx        # 26620 <_ZNSt8__detailL19__atomic_spin_countE+0xeec>
   129fe:	48 89 ce             	mov    %rcx,%rsi
   12a01:	48 89 c7             	mov    %rax,%rdi
   12a04:	ff d2                	call   *%rdx
   12a06:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a0a:	48 89 82 b0 05 00 00 	mov    %rax,0x5b0(%rdx)
        vkCmdSetDepthBiasEnable             = PFN_vkCmdSetDepthBiasEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthBiasEnable" ) );
   12a11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a15:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a1d:	48 8d 0d 1c 3c 01 00 	lea    0x13c1c(%rip),%rcx        # 26640 <_ZNSt8__detailL19__atomic_spin_countE+0xf0c>
   12a24:	48 89 ce             	mov    %rcx,%rsi
   12a27:	48 89 c7             	mov    %rax,%rdi
   12a2a:	ff d2                	call   *%rdx
   12a2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a30:	48 89 82 b8 05 00 00 	mov    %rax,0x5b8(%rdx)
        vkCmdSetPrimitiveRestartEnable      = PFN_vkCmdSetPrimitiveRestartEnable( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveRestartEnable" ) );
   12a37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a3b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a43:	48 8d 0d 0e 3c 01 00 	lea    0x13c0e(%rip),%rcx        # 26658 <_ZNSt8__detailL19__atomic_spin_countE+0xf24>
   12a4a:	48 89 ce             	mov    %rcx,%rsi
   12a4d:	48 89 c7             	mov    %rax,%rdi
   12a50:	ff d2                	call   *%rdx
   12a52:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a56:	48 89 82 c0 05 00 00 	mov    %rax,0x5c0(%rdx)
        vkGetDeviceBufferMemoryRequirements = PFN_vkGetDeviceBufferMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetDeviceBufferMemoryRequirements" ) );
   12a5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a61:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a69:	48 8d 0d 08 3c 01 00 	lea    0x13c08(%rip),%rcx        # 26678 <_ZNSt8__detailL19__atomic_spin_countE+0xf44>
   12a70:	48 89 ce             	mov    %rcx,%rsi
   12a73:	48 89 c7             	mov    %rax,%rdi
   12a76:	ff d2                	call   *%rdx
   12a78:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a7c:	48 89 82 c8 05 00 00 	mov    %rax,0x5c8(%rdx)
        vkGetDeviceImageMemoryRequirements  = PFN_vkGetDeviceImageMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetDeviceImageMemoryRequirements" ) );
   12a83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a87:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a8f:	48 8d 0d 0a 3c 01 00 	lea    0x13c0a(%rip),%rcx        # 266a0 <_ZNSt8__detailL19__atomic_spin_countE+0xf6c>
   12a96:	48 89 ce             	mov    %rcx,%rsi
   12a99:	48 89 c7             	mov    %rax,%rdi
   12a9c:	ff d2                	call   *%rdx
   12a9e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12aa2:	48 89 82 d0 05 00 00 	mov    %rax,0x5d0(%rdx)
          PFN_vkGetDeviceImageSparseMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetDeviceImageSparseMemoryRequirements" ) );
   12aa9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12aad:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ab1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ab5:	48 8d 0d 0c 3c 01 00 	lea    0x13c0c(%rip),%rcx        # 266c8 <_ZNSt8__detailL19__atomic_spin_countE+0xf94>
   12abc:	48 89 ce             	mov    %rcx,%rsi
   12abf:	48 89 c7             	mov    %rax,%rdi
   12ac2:	ff d2                	call   *%rdx
        vkGetDeviceImageSparseMemoryRequirements =
   12ac4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ac8:	48 89 82 d8 05 00 00 	mov    %rax,0x5d8(%rdx)
        vkCmdWriteBufferMarkerAMD = PFN_vkCmdWriteBufferMarkerAMD( vkGetDeviceProcAddr( device, "vkCmdWriteBufferMarkerAMD" ) );
   12acf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ad3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12adb:	48 8d 0d 0f 3c 01 00 	lea    0x13c0f(%rip),%rcx        # 266f1 <_ZNSt8__detailL19__atomic_spin_countE+0xfbd>
   12ae2:	48 89 ce             	mov    %rcx,%rsi
   12ae5:	48 89 c7             	mov    %rax,%rdi
   12ae8:	ff d2                	call   *%rdx
   12aea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12aee:	48 89 82 e0 05 00 00 	mov    %rax,0x5e0(%rdx)
        vkSetLocalDimmingAMD = PFN_vkSetLocalDimmingAMD( vkGetDeviceProcAddr( device, "vkSetLocalDimmingAMD" ) );
   12af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12af9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12afd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b01:	48 8d 0d 03 3c 01 00 	lea    0x13c03(%rip),%rcx        # 2670b <_ZNSt8__detailL19__atomic_spin_countE+0xfd7>
   12b08:	48 89 ce             	mov    %rcx,%rsi
   12b0b:	48 89 c7             	mov    %rax,%rdi
   12b0e:	ff d2                	call   *%rdx
   12b10:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b14:	48 89 82 e8 05 00 00 	mov    %rax,0x5e8(%rdx)
        vkCmdDrawIndirectCountAMD = PFN_vkCmdDrawIndirectCountAMD( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectCountAMD" ) );
   12b1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b1f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b27:	48 8d 0d f2 3b 01 00 	lea    0x13bf2(%rip),%rcx        # 26720 <_ZNSt8__detailL19__atomic_spin_countE+0xfec>
   12b2e:	48 89 ce             	mov    %rcx,%rsi
   12b31:	48 89 c7             	mov    %rax,%rdi
   12b34:	ff d2                	call   *%rdx
   12b36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b3a:	48 89 82 f0 05 00 00 	mov    %rax,0x5f0(%rdx)
        if ( !vkCmdDrawIndirectCount )
   12b41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b45:	48 8b 80 58 04 00 00 	mov    0x458(%rax),%rax
   12b4c:	48 85 c0             	test   %rax,%rax
   12b4f:	75 16                	jne    12b67 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x395b>
          vkCmdDrawIndirectCount = vkCmdDrawIndirectCountAMD;
   12b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b55:	48 8b 90 f0 05 00 00 	mov    0x5f0(%rax),%rdx
   12b5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b60:	48 89 90 58 04 00 00 	mov    %rdx,0x458(%rax)
        vkCmdDrawIndexedIndirectCountAMD = PFN_vkCmdDrawIndexedIndirectCountAMD( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirectCountAMD" ) );
   12b67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b6b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b73:	48 8d 0d c6 3b 01 00 	lea    0x13bc6(%rip),%rcx        # 26740 <_ZNSt8__detailL19__atomic_spin_countE+0x100c>
   12b7a:	48 89 ce             	mov    %rcx,%rsi
   12b7d:	48 89 c7             	mov    %rax,%rdi
   12b80:	ff d2                	call   *%rdx
   12b82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b86:	48 89 82 f8 05 00 00 	mov    %rax,0x5f8(%rdx)
        if ( !vkCmdDrawIndexedIndirectCount )
   12b8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b91:	48 8b 80 60 04 00 00 	mov    0x460(%rax),%rax
   12b98:	48 85 c0             	test   %rax,%rax
   12b9b:	75 16                	jne    12bb3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x39a7>
          vkCmdDrawIndexedIndirectCount = vkCmdDrawIndexedIndirectCountAMD;
   12b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ba1:	48 8b 90 f8 05 00 00 	mov    0x5f8(%rax),%rdx
   12ba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12bac:	48 89 90 60 04 00 00 	mov    %rdx,0x460(%rax)
        vkGetShaderInfoAMD = PFN_vkGetShaderInfoAMD( vkGetDeviceProcAddr( device, "vkGetShaderInfoAMD" ) );
   12bb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12bb7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12bbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12bbf:	48 8d 0d 9b 3b 01 00 	lea    0x13b9b(%rip),%rcx        # 26761 <_ZNSt8__detailL19__atomic_spin_countE+0x102d>
   12bc6:	48 89 ce             	mov    %rcx,%rsi
   12bc9:	48 89 c7             	mov    %rax,%rdi
   12bcc:	ff d2                	call   *%rdx
   12bce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12bd2:	48 89 82 00 06 00 00 	mov    %rax,0x600(%rdx)
        vkGetBufferDeviceAddressEXT = PFN_vkGetBufferDeviceAddressEXT( vkGetDeviceProcAddr( device, "vkGetBufferDeviceAddressEXT" ) );
   12bd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12bdd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12be1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12be5:	48 8d 0d 88 3b 01 00 	lea    0x13b88(%rip),%rcx        # 26774 <_ZNSt8__detailL19__atomic_spin_countE+0x1040>
   12bec:	48 89 ce             	mov    %rcx,%rsi
   12bef:	48 89 c7             	mov    %rax,%rdi
   12bf2:	ff d2                	call   *%rdx
   12bf4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12bf8:	48 89 82 18 06 00 00 	mov    %rax,0x618(%rdx)
        if ( !vkGetBufferDeviceAddress )
   12bff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c03:	48 8b 80 a8 04 00 00 	mov    0x4a8(%rax),%rax
   12c0a:	48 85 c0             	test   %rax,%rax
   12c0d:	75 16                	jne    12c25 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3a19>
          vkGetBufferDeviceAddress = vkGetBufferDeviceAddressEXT;
   12c0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c13:	48 8b 90 18 06 00 00 	mov    0x618(%rax),%rdx
   12c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c1e:	48 89 90 a8 04 00 00 	mov    %rdx,0x4a8(%rax)
        vkGetCalibratedTimestampsEXT = PFN_vkGetCalibratedTimestampsEXT( vkGetDeviceProcAddr( device, "vkGetCalibratedTimestampsEXT" ) );
   12c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c29:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c31:	48 8d 0d 58 3b 01 00 	lea    0x13b58(%rip),%rcx        # 26790 <_ZNSt8__detailL19__atomic_spin_countE+0x105c>
   12c38:	48 89 ce             	mov    %rcx,%rsi
   12c3b:	48 89 c7             	mov    %rax,%rdi
   12c3e:	ff d2                	call   *%rdx
   12c40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c44:	48 89 82 20 06 00 00 	mov    %rax,0x620(%rdx)
        vkCmdSetColorWriteEnableEXT = PFN_vkCmdSetColorWriteEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorWriteEnableEXT" ) );
   12c4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c4f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c57:	48 8d 0d 4f 3b 01 00 	lea    0x13b4f(%rip),%rcx        # 267ad <_ZNSt8__detailL19__atomic_spin_countE+0x1079>
   12c5e:	48 89 ce             	mov    %rcx,%rsi
   12c61:	48 89 c7             	mov    %rax,%rdi
   12c64:	ff d2                	call   *%rdx
   12c66:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c6a:	48 89 82 28 06 00 00 	mov    %rax,0x628(%rdx)
        vkCmdBeginConditionalRenderingEXT = PFN_vkCmdBeginConditionalRenderingEXT( vkGetDeviceProcAddr( device, "vkCmdBeginConditionalRenderingEXT" ) );
   12c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c75:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c7d:	48 8d 0d 4c 3b 01 00 	lea    0x13b4c(%rip),%rcx        # 267d0 <_ZNSt8__detailL19__atomic_spin_countE+0x109c>
   12c84:	48 89 ce             	mov    %rcx,%rsi
   12c87:	48 89 c7             	mov    %rax,%rdi
   12c8a:	ff d2                	call   *%rdx
   12c8c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c90:	48 89 82 30 06 00 00 	mov    %rax,0x630(%rdx)
        vkCmdEndConditionalRenderingEXT   = PFN_vkCmdEndConditionalRenderingEXT( vkGetDeviceProcAddr( device, "vkCmdEndConditionalRenderingEXT" ) );
   12c97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c9b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ca3:	48 8d 0d 4e 3b 01 00 	lea    0x13b4e(%rip),%rcx        # 267f8 <_ZNSt8__detailL19__atomic_spin_countE+0x10c4>
   12caa:	48 89 ce             	mov    %rcx,%rsi
   12cad:	48 89 c7             	mov    %rax,%rdi
   12cb0:	ff d2                	call   *%rdx
   12cb2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12cb6:	48 89 82 38 06 00 00 	mov    %rax,0x638(%rdx)
        vkDebugMarkerSetObjectTagEXT  = PFN_vkDebugMarkerSetObjectTagEXT( vkGetDeviceProcAddr( device, "vkDebugMarkerSetObjectTagEXT" ) );
   12cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12cc1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12cc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12cc9:	48 8d 0d 48 3b 01 00 	lea    0x13b48(%rip),%rcx        # 26818 <_ZNSt8__detailL19__atomic_spin_countE+0x10e4>
   12cd0:	48 89 ce             	mov    %rcx,%rsi
   12cd3:	48 89 c7             	mov    %rax,%rdi
   12cd6:	ff d2                	call   *%rdx
   12cd8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12cdc:	48 89 82 40 06 00 00 	mov    %rax,0x640(%rdx)
        vkDebugMarkerSetObjectNameEXT = PFN_vkDebugMarkerSetObjectNameEXT( vkGetDeviceProcAddr( device, "vkDebugMarkerSetObjectNameEXT" ) );
   12ce3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ce7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ceb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12cef:	48 8d 0d 3f 3b 01 00 	lea    0x13b3f(%rip),%rcx        # 26835 <_ZNSt8__detailL19__atomic_spin_countE+0x1101>
   12cf6:	48 89 ce             	mov    %rcx,%rsi
   12cf9:	48 89 c7             	mov    %rax,%rdi
   12cfc:	ff d2                	call   *%rdx
   12cfe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d02:	48 89 82 48 06 00 00 	mov    %rax,0x648(%rdx)
        vkCmdDebugMarkerBeginEXT      = PFN_vkCmdDebugMarkerBeginEXT( vkGetDeviceProcAddr( device, "vkCmdDebugMarkerBeginEXT" ) );
   12d09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d0d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d15:	48 8d 0d 37 3b 01 00 	lea    0x13b37(%rip),%rcx        # 26853 <_ZNSt8__detailL19__atomic_spin_countE+0x111f>
   12d1c:	48 89 ce             	mov    %rcx,%rsi
   12d1f:	48 89 c7             	mov    %rax,%rdi
   12d22:	ff d2                	call   *%rdx
   12d24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d28:	48 89 82 50 06 00 00 	mov    %rax,0x650(%rdx)
        vkCmdDebugMarkerEndEXT        = PFN_vkCmdDebugMarkerEndEXT( vkGetDeviceProcAddr( device, "vkCmdDebugMarkerEndEXT" ) );
   12d2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d33:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d3b:	48 8d 0d 2a 3b 01 00 	lea    0x13b2a(%rip),%rcx        # 2686c <_ZNSt8__detailL19__atomic_spin_countE+0x1138>
   12d42:	48 89 ce             	mov    %rcx,%rsi
   12d45:	48 89 c7             	mov    %rax,%rdi
   12d48:	ff d2                	call   *%rdx
   12d4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d4e:	48 89 82 58 06 00 00 	mov    %rax,0x658(%rdx)
        vkCmdDebugMarkerInsertEXT     = PFN_vkCmdDebugMarkerInsertEXT( vkGetDeviceProcAddr( device, "vkCmdDebugMarkerInsertEXT" ) );
   12d55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d59:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d61:	48 8d 0d 1b 3b 01 00 	lea    0x13b1b(%rip),%rcx        # 26883 <_ZNSt8__detailL19__atomic_spin_countE+0x114f>
   12d68:	48 89 ce             	mov    %rcx,%rsi
   12d6b:	48 89 c7             	mov    %rax,%rdi
   12d6e:	ff d2                	call   *%rdx
   12d70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d74:	48 89 82 60 06 00 00 	mov    %rax,0x660(%rdx)
        vkSetDebugUtilsObjectNameEXT    = PFN_vkSetDebugUtilsObjectNameEXT( vkGetDeviceProcAddr( device, "vkSetDebugUtilsObjectNameEXT" ) );
   12d7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d7f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d87:	48 8d 0d 0f 3b 01 00 	lea    0x13b0f(%rip),%rcx        # 2689d <_ZNSt8__detailL19__atomic_spin_countE+0x1169>
   12d8e:	48 89 ce             	mov    %rcx,%rsi
   12d91:	48 89 c7             	mov    %rax,%rdi
   12d94:	ff d2                	call   *%rdx
   12d96:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d9a:	48 89 82 68 06 00 00 	mov    %rax,0x668(%rdx)
        vkSetDebugUtilsObjectTagEXT     = PFN_vkSetDebugUtilsObjectTagEXT( vkGetDeviceProcAddr( device, "vkSetDebugUtilsObjectTagEXT" ) );
   12da1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12da5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12da9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12dad:	48 8d 0d 06 3b 01 00 	lea    0x13b06(%rip),%rcx        # 268ba <_ZNSt8__detailL19__atomic_spin_countE+0x1186>
   12db4:	48 89 ce             	mov    %rcx,%rsi
   12db7:	48 89 c7             	mov    %rax,%rdi
   12dba:	ff d2                	call   *%rdx
   12dbc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12dc0:	48 89 82 70 06 00 00 	mov    %rax,0x670(%rdx)
        vkQueueBeginDebugUtilsLabelEXT  = PFN_vkQueueBeginDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkQueueBeginDebugUtilsLabelEXT" ) );
   12dc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12dcb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12dcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12dd3:	48 8d 0d fe 3a 01 00 	lea    0x13afe(%rip),%rcx        # 268d8 <_ZNSt8__detailL19__atomic_spin_countE+0x11a4>
   12dda:	48 89 ce             	mov    %rcx,%rsi
   12ddd:	48 89 c7             	mov    %rax,%rdi
   12de0:	ff d2                	call   *%rdx
   12de2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12de6:	48 89 82 78 06 00 00 	mov    %rax,0x678(%rdx)
        vkQueueEndDebugUtilsLabelEXT    = PFN_vkQueueEndDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkQueueEndDebugUtilsLabelEXT" ) );
   12ded:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12df1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12df5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12df9:	48 8d 0d f7 3a 01 00 	lea    0x13af7(%rip),%rcx        # 268f7 <_ZNSt8__detailL19__atomic_spin_countE+0x11c3>
   12e00:	48 89 ce             	mov    %rcx,%rsi
   12e03:	48 89 c7             	mov    %rax,%rdi
   12e06:	ff d2                	call   *%rdx
   12e08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e0c:	48 89 82 80 06 00 00 	mov    %rax,0x680(%rdx)
        vkQueueInsertDebugUtilsLabelEXT = PFN_vkQueueInsertDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkQueueInsertDebugUtilsLabelEXT" ) );
   12e13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e17:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e1f:	48 8d 0d f2 3a 01 00 	lea    0x13af2(%rip),%rcx        # 26918 <_ZNSt8__detailL19__atomic_spin_countE+0x11e4>
   12e26:	48 89 ce             	mov    %rcx,%rsi
   12e29:	48 89 c7             	mov    %rax,%rdi
   12e2c:	ff d2                	call   *%rdx
   12e2e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e32:	48 89 82 88 06 00 00 	mov    %rax,0x688(%rdx)
        vkCmdBeginDebugUtilsLabelEXT    = PFN_vkCmdBeginDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkCmdBeginDebugUtilsLabelEXT" ) );
   12e39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e3d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e45:	48 8d 0d ec 3a 01 00 	lea    0x13aec(%rip),%rcx        # 26938 <_ZNSt8__detailL19__atomic_spin_countE+0x1204>
   12e4c:	48 89 ce             	mov    %rcx,%rsi
   12e4f:	48 89 c7             	mov    %rax,%rdi
   12e52:	ff d2                	call   *%rdx
   12e54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e58:	48 89 82 90 06 00 00 	mov    %rax,0x690(%rdx)
        vkCmdEndDebugUtilsLabelEXT      = PFN_vkCmdEndDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkCmdEndDebugUtilsLabelEXT" ) );
   12e5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e63:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e6b:	48 8d 0d e3 3a 01 00 	lea    0x13ae3(%rip),%rcx        # 26955 <_ZNSt8__detailL19__atomic_spin_countE+0x1221>
   12e72:	48 89 ce             	mov    %rcx,%rsi
   12e75:	48 89 c7             	mov    %rax,%rdi
   12e78:	ff d2                	call   *%rdx
   12e7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e7e:	48 89 82 98 06 00 00 	mov    %rax,0x698(%rdx)
        vkCmdInsertDebugUtilsLabelEXT   = PFN_vkCmdInsertDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkCmdInsertDebugUtilsLabelEXT" ) );
   12e85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e89:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e91:	48 8d 0d d8 3a 01 00 	lea    0x13ad8(%rip),%rcx        # 26970 <_ZNSt8__detailL19__atomic_spin_countE+0x123c>
   12e98:	48 89 ce             	mov    %rcx,%rsi
   12e9b:	48 89 c7             	mov    %rax,%rdi
   12e9e:	ff d2                	call   *%rdx
   12ea0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ea4:	48 89 82 a0 06 00 00 	mov    %rax,0x6a0(%rdx)
        vkGetDeviceFaultInfoEXT = PFN_vkGetDeviceFaultInfoEXT( vkGetDeviceProcAddr( device, "vkGetDeviceFaultInfoEXT" ) );
   12eab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12eaf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12eb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12eb7:	48 8d 0d d0 3a 01 00 	lea    0x13ad0(%rip),%rcx        # 2698e <_ZNSt8__detailL19__atomic_spin_countE+0x125a>
   12ebe:	48 89 ce             	mov    %rcx,%rsi
   12ec1:	48 89 c7             	mov    %rax,%rdi
   12ec4:	ff d2                	call   *%rdx
   12ec6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12eca:	48 89 82 a8 06 00 00 	mov    %rax,0x6a8(%rdx)
        vkCmdSetDiscardRectangleEXT = PFN_vkCmdSetDiscardRectangleEXT( vkGetDeviceProcAddr( device, "vkCmdSetDiscardRectangleEXT" ) );
   12ed1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ed5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ed9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12edd:	48 8d 0d c2 3a 01 00 	lea    0x13ac2(%rip),%rcx        # 269a6 <_ZNSt8__detailL19__atomic_spin_countE+0x1272>
   12ee4:	48 89 ce             	mov    %rcx,%rsi
   12ee7:	48 89 c7             	mov    %rax,%rdi
   12eea:	ff d2                	call   *%rdx
   12eec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ef0:	48 89 82 b0 06 00 00 	mov    %rax,0x6b0(%rdx)
        vkDisplayPowerControlEXT  = PFN_vkDisplayPowerControlEXT( vkGetDeviceProcAddr( device, "vkDisplayPowerControlEXT" ) );
   12ef7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12efb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12eff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f03:	48 8d 0d b8 3a 01 00 	lea    0x13ab8(%rip),%rcx        # 269c2 <_ZNSt8__detailL19__atomic_spin_countE+0x128e>
   12f0a:	48 89 ce             	mov    %rcx,%rsi
   12f0d:	48 89 c7             	mov    %rax,%rdi
   12f10:	ff d2                	call   *%rdx
   12f12:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f16:	48 89 82 b8 06 00 00 	mov    %rax,0x6b8(%rdx)
        vkRegisterDeviceEventEXT  = PFN_vkRegisterDeviceEventEXT( vkGetDeviceProcAddr( device, "vkRegisterDeviceEventEXT" ) );
   12f1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f21:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f29:	48 8d 0d ab 3a 01 00 	lea    0x13aab(%rip),%rcx        # 269db <_ZNSt8__detailL19__atomic_spin_countE+0x12a7>
   12f30:	48 89 ce             	mov    %rcx,%rsi
   12f33:	48 89 c7             	mov    %rax,%rdi
   12f36:	ff d2                	call   *%rdx
   12f38:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f3c:	48 89 82 c0 06 00 00 	mov    %rax,0x6c0(%rdx)
        vkRegisterDisplayEventEXT = PFN_vkRegisterDisplayEventEXT( vkGetDeviceProcAddr( device, "vkRegisterDisplayEventEXT" ) );
   12f43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f47:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f4f:	48 8d 0d 9e 3a 01 00 	lea    0x13a9e(%rip),%rcx        # 269f4 <_ZNSt8__detailL19__atomic_spin_countE+0x12c0>
   12f56:	48 89 ce             	mov    %rcx,%rsi
   12f59:	48 89 c7             	mov    %rax,%rdi
   12f5c:	ff d2                	call   *%rdx
   12f5e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f62:	48 89 82 c8 06 00 00 	mov    %rax,0x6c8(%rdx)
        vkGetSwapchainCounterEXT  = PFN_vkGetSwapchainCounterEXT( vkGetDeviceProcAddr( device, "vkGetSwapchainCounterEXT" ) );
   12f69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f6d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f75:	48 8d 0d 92 3a 01 00 	lea    0x13a92(%rip),%rcx        # 26a0e <_ZNSt8__detailL19__atomic_spin_countE+0x12da>
   12f7c:	48 89 ce             	mov    %rcx,%rsi
   12f7f:	48 89 c7             	mov    %rax,%rdi
   12f82:	ff d2                	call   *%rdx
   12f84:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f88:	48 89 82 d0 06 00 00 	mov    %rax,0x6d0(%rdx)
        vkCmdSetCullModeEXT = PFN_vkCmdSetCullModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetCullModeEXT" ) );
   12f8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f93:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f9b:	48 8d 0d 85 3a 01 00 	lea    0x13a85(%rip),%rcx        # 26a27 <_ZNSt8__detailL19__atomic_spin_countE+0x12f3>
   12fa2:	48 89 ce             	mov    %rcx,%rsi
   12fa5:	48 89 c7             	mov    %rax,%rdi
   12fa8:	ff d2                	call   *%rdx
   12faa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12fae:	48 89 82 d8 06 00 00 	mov    %rax,0x6d8(%rdx)
        if ( !vkCmdSetCullMode )
   12fb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12fb9:	48 8b 80 50 05 00 00 	mov    0x550(%rax),%rax
   12fc0:	48 85 c0             	test   %rax,%rax
   12fc3:	75 16                	jne    12fdb <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3dcf>
          vkCmdSetCullMode = vkCmdSetCullModeEXT;
   12fc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12fc9:	48 8b 90 d8 06 00 00 	mov    0x6d8(%rax),%rdx
   12fd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12fd4:	48 89 90 50 05 00 00 	mov    %rdx,0x550(%rax)
        vkCmdSetFrontFaceEXT = PFN_vkCmdSetFrontFaceEXT( vkGetDeviceProcAddr( device, "vkCmdSetFrontFaceEXT" ) );
   12fdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12fdf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12fe3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12fe7:	48 8d 0d 4d 3a 01 00 	lea    0x13a4d(%rip),%rcx        # 26a3b <_ZNSt8__detailL19__atomic_spin_countE+0x1307>
   12fee:	48 89 ce             	mov    %rcx,%rsi
   12ff1:	48 89 c7             	mov    %rax,%rdi
   12ff4:	ff d2                	call   *%rdx
   12ff6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ffa:	48 89 82 e0 06 00 00 	mov    %rax,0x6e0(%rdx)
        if ( !vkCmdSetFrontFace )
   13001:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13005:	48 8b 80 58 05 00 00 	mov    0x558(%rax),%rax
   1300c:	48 85 c0             	test   %rax,%rax
   1300f:	75 16                	jne    13027 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3e1b>
          vkCmdSetFrontFace = vkCmdSetFrontFaceEXT;
   13011:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13015:	48 8b 90 e0 06 00 00 	mov    0x6e0(%rax),%rdx
   1301c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13020:	48 89 90 58 05 00 00 	mov    %rdx,0x558(%rax)
        vkCmdSetPrimitiveTopologyEXT = PFN_vkCmdSetPrimitiveTopologyEXT( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveTopologyEXT" ) );
   13027:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1302b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1302f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13033:	48 8d 0d 16 3a 01 00 	lea    0x13a16(%rip),%rcx        # 26a50 <_ZNSt8__detailL19__atomic_spin_countE+0x131c>
   1303a:	48 89 ce             	mov    %rcx,%rsi
   1303d:	48 89 c7             	mov    %rax,%rdi
   13040:	ff d2                	call   *%rdx
   13042:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13046:	48 89 82 e8 06 00 00 	mov    %rax,0x6e8(%rdx)
        if ( !vkCmdSetPrimitiveTopology )
   1304d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13051:	48 8b 80 60 05 00 00 	mov    0x560(%rax),%rax
   13058:	48 85 c0             	test   %rax,%rax
   1305b:	75 16                	jne    13073 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3e67>
          vkCmdSetPrimitiveTopology = vkCmdSetPrimitiveTopologyEXT;
   1305d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13061:	48 8b 90 e8 06 00 00 	mov    0x6e8(%rax),%rdx
   13068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1306c:	48 89 90 60 05 00 00 	mov    %rdx,0x560(%rax)
        vkCmdSetViewportWithCountEXT = PFN_vkCmdSetViewportWithCountEXT( vkGetDeviceProcAddr( device, "vkCmdSetViewportWithCountEXT" ) );
   13073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13077:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1307b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1307f:	48 8d 0d e7 39 01 00 	lea    0x139e7(%rip),%rcx        # 26a6d <_ZNSt8__detailL19__atomic_spin_countE+0x1339>
   13086:	48 89 ce             	mov    %rcx,%rsi
   13089:	48 89 c7             	mov    %rax,%rdi
   1308c:	ff d2                	call   *%rdx
   1308e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13092:	48 89 82 f0 06 00 00 	mov    %rax,0x6f0(%rdx)
        if ( !vkCmdSetViewportWithCount )
   13099:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1309d:	48 8b 80 68 05 00 00 	mov    0x568(%rax),%rax
   130a4:	48 85 c0             	test   %rax,%rax
   130a7:	75 16                	jne    130bf <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3eb3>
          vkCmdSetViewportWithCount = vkCmdSetViewportWithCountEXT;
   130a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130ad:	48 8b 90 f0 06 00 00 	mov    0x6f0(%rax),%rdx
   130b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130b8:	48 89 90 68 05 00 00 	mov    %rdx,0x568(%rax)
        vkCmdSetScissorWithCountEXT = PFN_vkCmdSetScissorWithCountEXT( vkGetDeviceProcAddr( device, "vkCmdSetScissorWithCountEXT" ) );
   130bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130c3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   130c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   130cb:	48 8d 0d b8 39 01 00 	lea    0x139b8(%rip),%rcx        # 26a8a <_ZNSt8__detailL19__atomic_spin_countE+0x1356>
   130d2:	48 89 ce             	mov    %rcx,%rsi
   130d5:	48 89 c7             	mov    %rax,%rdi
   130d8:	ff d2                	call   *%rdx
   130da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   130de:	48 89 82 f8 06 00 00 	mov    %rax,0x6f8(%rdx)
        if ( !vkCmdSetScissorWithCount )
   130e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130e9:	48 8b 80 70 05 00 00 	mov    0x570(%rax),%rax
   130f0:	48 85 c0             	test   %rax,%rax
   130f3:	75 16                	jne    1310b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3eff>
          vkCmdSetScissorWithCount = vkCmdSetScissorWithCountEXT;
   130f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130f9:	48 8b 90 f8 06 00 00 	mov    0x6f8(%rax),%rdx
   13100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13104:	48 89 90 70 05 00 00 	mov    %rdx,0x570(%rax)
        vkCmdBindVertexBuffers2EXT = PFN_vkCmdBindVertexBuffers2EXT( vkGetDeviceProcAddr( device, "vkCmdBindVertexBuffers2EXT" ) );
   1310b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1310f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13113:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13117:	48 8d 0d 88 39 01 00 	lea    0x13988(%rip),%rcx        # 26aa6 <_ZNSt8__detailL19__atomic_spin_countE+0x1372>
   1311e:	48 89 ce             	mov    %rcx,%rsi
   13121:	48 89 c7             	mov    %rax,%rdi
   13124:	ff d2                	call   *%rdx
   13126:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1312a:	48 89 82 00 07 00 00 	mov    %rax,0x700(%rdx)
        if ( !vkCmdBindVertexBuffers2 )
   13131:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13135:	48 8b 80 78 05 00 00 	mov    0x578(%rax),%rax
   1313c:	48 85 c0             	test   %rax,%rax
   1313f:	75 16                	jne    13157 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3f4b>
          vkCmdBindVertexBuffers2 = vkCmdBindVertexBuffers2EXT;
   13141:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13145:	48 8b 90 00 07 00 00 	mov    0x700(%rax),%rdx
   1314c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13150:	48 89 90 78 05 00 00 	mov    %rdx,0x578(%rax)
        vkCmdSetDepthTestEnableEXT = PFN_vkCmdSetDepthTestEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthTestEnableEXT" ) );
   13157:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1315b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1315f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13163:	48 8d 0d 57 39 01 00 	lea    0x13957(%rip),%rcx        # 26ac1 <_ZNSt8__detailL19__atomic_spin_countE+0x138d>
   1316a:	48 89 ce             	mov    %rcx,%rsi
   1316d:	48 89 c7             	mov    %rax,%rdi
   13170:	ff d2                	call   *%rdx
   13172:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13176:	48 89 82 08 07 00 00 	mov    %rax,0x708(%rdx)
        if ( !vkCmdSetDepthTestEnable )
   1317d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13181:	48 8b 80 80 05 00 00 	mov    0x580(%rax),%rax
   13188:	48 85 c0             	test   %rax,%rax
   1318b:	75 16                	jne    131a3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3f97>
          vkCmdSetDepthTestEnable = vkCmdSetDepthTestEnableEXT;
   1318d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13191:	48 8b 90 08 07 00 00 	mov    0x708(%rax),%rdx
   13198:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1319c:	48 89 90 80 05 00 00 	mov    %rdx,0x580(%rax)
        vkCmdSetDepthWriteEnableEXT = PFN_vkCmdSetDepthWriteEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthWriteEnableEXT" ) );
   131a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131a7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   131ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   131af:	48 8d 0d 26 39 01 00 	lea    0x13926(%rip),%rcx        # 26adc <_ZNSt8__detailL19__atomic_spin_countE+0x13a8>
   131b6:	48 89 ce             	mov    %rcx,%rsi
   131b9:	48 89 c7             	mov    %rax,%rdi
   131bc:	ff d2                	call   *%rdx
   131be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   131c2:	48 89 82 10 07 00 00 	mov    %rax,0x710(%rdx)
        if ( !vkCmdSetDepthWriteEnable )
   131c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131cd:	48 8b 80 88 05 00 00 	mov    0x588(%rax),%rax
   131d4:	48 85 c0             	test   %rax,%rax
   131d7:	75 16                	jne    131ef <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3fe3>
          vkCmdSetDepthWriteEnable = vkCmdSetDepthWriteEnableEXT;
   131d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131dd:	48 8b 90 10 07 00 00 	mov    0x710(%rax),%rdx
   131e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131e8:	48 89 90 88 05 00 00 	mov    %rdx,0x588(%rax)
        vkCmdSetDepthCompareOpEXT = PFN_vkCmdSetDepthCompareOpEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthCompareOpEXT" ) );
   131ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131f3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   131f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   131fb:	48 8d 0d f6 38 01 00 	lea    0x138f6(%rip),%rcx        # 26af8 <_ZNSt8__detailL19__atomic_spin_countE+0x13c4>
   13202:	48 89 ce             	mov    %rcx,%rsi
   13205:	48 89 c7             	mov    %rax,%rdi
   13208:	ff d2                	call   *%rdx
   1320a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1320e:	48 89 82 18 07 00 00 	mov    %rax,0x718(%rdx)
        if ( !vkCmdSetDepthCompareOp )
   13215:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13219:	48 8b 80 90 05 00 00 	mov    0x590(%rax),%rax
   13220:	48 85 c0             	test   %rax,%rax
   13223:	75 16                	jne    1323b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x402f>
          vkCmdSetDepthCompareOp = vkCmdSetDepthCompareOpEXT;
   13225:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13229:	48 8b 90 18 07 00 00 	mov    0x718(%rax),%rdx
   13230:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13234:	48 89 90 90 05 00 00 	mov    %rdx,0x590(%rax)
        vkCmdSetDepthBoundsTestEnableEXT = PFN_vkCmdSetDepthBoundsTestEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthBoundsTestEnableEXT" ) );
   1323b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1323f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13243:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13247:	48 8d 0d ca 38 01 00 	lea    0x138ca(%rip),%rcx        # 26b18 <_ZNSt8__detailL19__atomic_spin_countE+0x13e4>
   1324e:	48 89 ce             	mov    %rcx,%rsi
   13251:	48 89 c7             	mov    %rax,%rdi
   13254:	ff d2                	call   *%rdx
   13256:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1325a:	48 89 82 20 07 00 00 	mov    %rax,0x720(%rdx)
        if ( !vkCmdSetDepthBoundsTestEnable )
   13261:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13265:	48 8b 80 98 05 00 00 	mov    0x598(%rax),%rax
   1326c:	48 85 c0             	test   %rax,%rax
   1326f:	75 16                	jne    13287 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x407b>
          vkCmdSetDepthBoundsTestEnable = vkCmdSetDepthBoundsTestEnableEXT;
   13271:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13275:	48 8b 90 20 07 00 00 	mov    0x720(%rax),%rdx
   1327c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13280:	48 89 90 98 05 00 00 	mov    %rdx,0x598(%rax)
        vkCmdSetStencilTestEnableEXT = PFN_vkCmdSetStencilTestEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetStencilTestEnableEXT" ) );
   13287:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1328b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1328f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13293:	48 8d 0d 9f 38 01 00 	lea    0x1389f(%rip),%rcx        # 26b39 <_ZNSt8__detailL19__atomic_spin_countE+0x1405>
   1329a:	48 89 ce             	mov    %rcx,%rsi
   1329d:	48 89 c7             	mov    %rax,%rdi
   132a0:	ff d2                	call   *%rdx
   132a2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   132a6:	48 89 82 28 07 00 00 	mov    %rax,0x728(%rdx)
        if ( !vkCmdSetStencilTestEnable )
   132ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132b1:	48 8b 80 a0 05 00 00 	mov    0x5a0(%rax),%rax
   132b8:	48 85 c0             	test   %rax,%rax
   132bb:	75 16                	jne    132d3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x40c7>
          vkCmdSetStencilTestEnable = vkCmdSetStencilTestEnableEXT;
   132bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132c1:	48 8b 90 28 07 00 00 	mov    0x728(%rax),%rdx
   132c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132cc:	48 89 90 a0 05 00 00 	mov    %rdx,0x5a0(%rax)
        vkCmdSetStencilOpEXT = PFN_vkCmdSetStencilOpEXT( vkGetDeviceProcAddr( device, "vkCmdSetStencilOpEXT" ) );
   132d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132d7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   132db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   132df:	48 8d 0d 70 38 01 00 	lea    0x13870(%rip),%rcx        # 26b56 <_ZNSt8__detailL19__atomic_spin_countE+0x1422>
   132e6:	48 89 ce             	mov    %rcx,%rsi
   132e9:	48 89 c7             	mov    %rax,%rdi
   132ec:	ff d2                	call   *%rdx
   132ee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   132f2:	48 89 82 30 07 00 00 	mov    %rax,0x730(%rdx)
        if ( !vkCmdSetStencilOp )
   132f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132fd:	48 8b 80 a8 05 00 00 	mov    0x5a8(%rax),%rax
   13304:	48 85 c0             	test   %rax,%rax
   13307:	75 16                	jne    1331f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4113>
          vkCmdSetStencilOp = vkCmdSetStencilOpEXT;
   13309:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1330d:	48 8b 90 30 07 00 00 	mov    0x730(%rax),%rdx
   13314:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13318:	48 89 90 a8 05 00 00 	mov    %rdx,0x5a8(%rax)
        vkCmdSetPatchControlPointsEXT      = PFN_vkCmdSetPatchControlPointsEXT( vkGetDeviceProcAddr( device, "vkCmdSetPatchControlPointsEXT" ) );
   1331f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13323:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13327:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1332b:	48 8d 0d 39 38 01 00 	lea    0x13839(%rip),%rcx        # 26b6b <_ZNSt8__detailL19__atomic_spin_countE+0x1437>
   13332:	48 89 ce             	mov    %rcx,%rsi
   13335:	48 89 c7             	mov    %rax,%rdi
   13338:	ff d2                	call   *%rdx
   1333a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1333e:	48 89 82 38 07 00 00 	mov    %rax,0x738(%rdx)
        vkCmdSetRasterizerDiscardEnableEXT = PFN_vkCmdSetRasterizerDiscardEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetRasterizerDiscardEnableEXT" ) );
   13345:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13349:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1334d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13351:	48 8d 0d 38 38 01 00 	lea    0x13838(%rip),%rcx        # 26b90 <_ZNSt8__detailL19__atomic_spin_countE+0x145c>
   13358:	48 89 ce             	mov    %rcx,%rsi
   1335b:	48 89 c7             	mov    %rax,%rdi
   1335e:	ff d2                	call   *%rdx
   13360:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13364:	48 89 82 40 07 00 00 	mov    %rax,0x740(%rdx)
        if ( !vkCmdSetRasterizerDiscardEnable )
   1336b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1336f:	48 8b 80 b0 05 00 00 	mov    0x5b0(%rax),%rax
   13376:	48 85 c0             	test   %rax,%rax
   13379:	75 16                	jne    13391 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4185>
          vkCmdSetRasterizerDiscardEnable = vkCmdSetRasterizerDiscardEnableEXT;
   1337b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1337f:	48 8b 90 40 07 00 00 	mov    0x740(%rax),%rdx
   13386:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1338a:	48 89 90 b0 05 00 00 	mov    %rdx,0x5b0(%rax)
        vkCmdSetDepthBiasEnableEXT = PFN_vkCmdSetDepthBiasEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthBiasEnableEXT" ) );
   13391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13395:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13399:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1339d:	48 8d 0d 0f 38 01 00 	lea    0x1380f(%rip),%rcx        # 26bb3 <_ZNSt8__detailL19__atomic_spin_countE+0x147f>
   133a4:	48 89 ce             	mov    %rcx,%rsi
   133a7:	48 89 c7             	mov    %rax,%rdi
   133aa:	ff d2                	call   *%rdx
   133ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   133b0:	48 89 82 48 07 00 00 	mov    %rax,0x748(%rdx)
        if ( !vkCmdSetDepthBiasEnable )
   133b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   133bb:	48 8b 80 b8 05 00 00 	mov    0x5b8(%rax),%rax
   133c2:	48 85 c0             	test   %rax,%rax
   133c5:	75 16                	jne    133dd <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x41d1>
          vkCmdSetDepthBiasEnable = vkCmdSetDepthBiasEnableEXT;
   133c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   133cb:	48 8b 90 48 07 00 00 	mov    0x748(%rax),%rdx
   133d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   133d6:	48 89 90 b8 05 00 00 	mov    %rdx,0x5b8(%rax)
        vkCmdSetLogicOpEXT                = PFN_vkCmdSetLogicOpEXT( vkGetDeviceProcAddr( device, "vkCmdSetLogicOpEXT" ) );
   133dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   133e1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   133e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   133e9:	48 8d 0d de 37 01 00 	lea    0x137de(%rip),%rcx        # 26bce <_ZNSt8__detailL19__atomic_spin_countE+0x149a>
   133f0:	48 89 ce             	mov    %rcx,%rsi
   133f3:	48 89 c7             	mov    %rax,%rdi
   133f6:	ff d2                	call   *%rdx
   133f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   133fc:	48 89 82 50 07 00 00 	mov    %rax,0x750(%rdx)
        vkCmdSetPrimitiveRestartEnableEXT = PFN_vkCmdSetPrimitiveRestartEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveRestartEnableEXT" ) );
   13403:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13407:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1340b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1340f:	48 8d 0d d2 37 01 00 	lea    0x137d2(%rip),%rcx        # 26be8 <_ZNSt8__detailL19__atomic_spin_countE+0x14b4>
   13416:	48 89 ce             	mov    %rcx,%rsi
   13419:	48 89 c7             	mov    %rax,%rdi
   1341c:	ff d2                	call   *%rdx
   1341e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13422:	48 89 82 58 07 00 00 	mov    %rax,0x758(%rdx)
        if ( !vkCmdSetPrimitiveRestartEnable )
   13429:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1342d:	48 8b 80 c0 05 00 00 	mov    0x5c0(%rax),%rax
   13434:	48 85 c0             	test   %rax,%rax
   13437:	75 16                	jne    1344f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4243>
          vkCmdSetPrimitiveRestartEnable = vkCmdSetPrimitiveRestartEnableEXT;
   13439:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1343d:	48 8b 90 58 07 00 00 	mov    0x758(%rax),%rdx
   13444:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13448:	48 89 90 c0 05 00 00 	mov    %rdx,0x5c0(%rax)
        vkCmdSetTessellationDomainOriginEXT = PFN_vkCmdSetTessellationDomainOriginEXT( vkGetDeviceProcAddr( device, "vkCmdSetTessellationDomainOriginEXT" ) );
   1344f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13453:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13457:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1345b:	48 8d 0d ae 37 01 00 	lea    0x137ae(%rip),%rcx        # 26c10 <_ZNSt8__detailL19__atomic_spin_countE+0x14dc>
   13462:	48 89 ce             	mov    %rcx,%rsi
   13465:	48 89 c7             	mov    %rax,%rdi
   13468:	ff d2                	call   *%rdx
   1346a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1346e:	48 89 82 60 07 00 00 	mov    %rax,0x760(%rdx)
        vkCmdSetDepthClampEnableEXT         = PFN_vkCmdSetDepthClampEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthClampEnableEXT" ) );
   13475:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13479:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1347d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13481:	48 8d 0d ac 37 01 00 	lea    0x137ac(%rip),%rcx        # 26c34 <_ZNSt8__detailL19__atomic_spin_countE+0x1500>
   13488:	48 89 ce             	mov    %rcx,%rsi
   1348b:	48 89 c7             	mov    %rax,%rdi
   1348e:	ff d2                	call   *%rdx
   13490:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13494:	48 89 82 68 07 00 00 	mov    %rax,0x768(%rdx)
        vkCmdSetPolygonModeEXT              = PFN_vkCmdSetPolygonModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetPolygonModeEXT" ) );
   1349b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1349f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   134a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   134a7:	48 8d 0d a2 37 01 00 	lea    0x137a2(%rip),%rcx        # 26c50 <_ZNSt8__detailL19__atomic_spin_countE+0x151c>
   134ae:	48 89 ce             	mov    %rcx,%rsi
   134b1:	48 89 c7             	mov    %rax,%rdi
   134b4:	ff d2                	call   *%rdx
   134b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   134ba:	48 89 82 70 07 00 00 	mov    %rax,0x770(%rdx)
        vkCmdSetRasterizationSamplesEXT     = PFN_vkCmdSetRasterizationSamplesEXT( vkGetDeviceProcAddr( device, "vkCmdSetRasterizationSamplesEXT" ) );
   134c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   134c5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   134c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   134cd:	48 8d 0d 94 37 01 00 	lea    0x13794(%rip),%rcx        # 26c68 <_ZNSt8__detailL19__atomic_spin_countE+0x1534>
   134d4:	48 89 ce             	mov    %rcx,%rsi
   134d7:	48 89 c7             	mov    %rax,%rdi
   134da:	ff d2                	call   *%rdx
   134dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   134e0:	48 89 82 78 07 00 00 	mov    %rax,0x778(%rdx)
        vkCmdSetSampleMaskEXT               = PFN_vkCmdSetSampleMaskEXT( vkGetDeviceProcAddr( device, "vkCmdSetSampleMaskEXT" ) );
   134e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   134eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   134ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   134f3:	48 8d 0d 8e 37 01 00 	lea    0x1378e(%rip),%rcx        # 26c88 <_ZNSt8__detailL19__atomic_spin_countE+0x1554>
   134fa:	48 89 ce             	mov    %rcx,%rsi
   134fd:	48 89 c7             	mov    %rax,%rdi
   13500:	ff d2                	call   *%rdx
   13502:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13506:	48 89 82 80 07 00 00 	mov    %rax,0x780(%rdx)
        vkCmdSetAlphaToCoverageEnableEXT    = PFN_vkCmdSetAlphaToCoverageEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetAlphaToCoverageEnableEXT" ) );
   1350d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13511:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13515:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13519:	48 8d 0d 80 37 01 00 	lea    0x13780(%rip),%rcx        # 26ca0 <_ZNSt8__detailL19__atomic_spin_countE+0x156c>
   13520:	48 89 ce             	mov    %rcx,%rsi
   13523:	48 89 c7             	mov    %rax,%rdi
   13526:	ff d2                	call   *%rdx
   13528:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1352c:	48 89 82 88 07 00 00 	mov    %rax,0x788(%rdx)
        vkCmdSetAlphaToOneEnableEXT         = PFN_vkCmdSetAlphaToOneEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetAlphaToOneEnableEXT" ) );
   13533:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13537:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1353b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1353f:	48 8d 0d 7b 37 01 00 	lea    0x1377b(%rip),%rcx        # 26cc1 <_ZNSt8__detailL19__atomic_spin_countE+0x158d>
   13546:	48 89 ce             	mov    %rcx,%rsi
   13549:	48 89 c7             	mov    %rax,%rdi
   1354c:	ff d2                	call   *%rdx
   1354e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13552:	48 89 82 90 07 00 00 	mov    %rax,0x790(%rdx)
        vkCmdSetLogicOpEnableEXT            = PFN_vkCmdSetLogicOpEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetLogicOpEnableEXT" ) );
   13559:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1355d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13561:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13565:	48 8d 0d 71 37 01 00 	lea    0x13771(%rip),%rcx        # 26cdd <_ZNSt8__detailL19__atomic_spin_countE+0x15a9>
   1356c:	48 89 ce             	mov    %rcx,%rsi
   1356f:	48 89 c7             	mov    %rax,%rdi
   13572:	ff d2                	call   *%rdx
   13574:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13578:	48 89 82 98 07 00 00 	mov    %rax,0x798(%rdx)
        vkCmdSetColorBlendEnableEXT         = PFN_vkCmdSetColorBlendEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorBlendEnableEXT" ) );
   1357f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13583:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13587:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1358b:	48 8d 0d 64 37 01 00 	lea    0x13764(%rip),%rcx        # 26cf6 <_ZNSt8__detailL19__atomic_spin_countE+0x15c2>
   13592:	48 89 ce             	mov    %rcx,%rsi
   13595:	48 89 c7             	mov    %rax,%rdi
   13598:	ff d2                	call   *%rdx
   1359a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1359e:	48 89 82 a0 07 00 00 	mov    %rax,0x7a0(%rdx)
        vkCmdSetColorBlendEquationEXT       = PFN_vkCmdSetColorBlendEquationEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorBlendEquationEXT" ) );
   135a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   135a9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   135ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   135b1:	48 8d 0d 5a 37 01 00 	lea    0x1375a(%rip),%rcx        # 26d12 <_ZNSt8__detailL19__atomic_spin_countE+0x15de>
   135b8:	48 89 ce             	mov    %rcx,%rsi
   135bb:	48 89 c7             	mov    %rax,%rdi
   135be:	ff d2                	call   *%rdx
   135c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   135c4:	48 89 82 a8 07 00 00 	mov    %rax,0x7a8(%rdx)
        vkCmdSetColorWriteMaskEXT           = PFN_vkCmdSetColorWriteMaskEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorWriteMaskEXT" ) );
   135cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   135cf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   135d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   135d7:	48 8d 0d 52 37 01 00 	lea    0x13752(%rip),%rcx        # 26d30 <_ZNSt8__detailL19__atomic_spin_countE+0x15fc>
   135de:	48 89 ce             	mov    %rcx,%rsi
   135e1:	48 89 c7             	mov    %rax,%rdi
   135e4:	ff d2                	call   *%rdx
   135e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   135ea:	48 89 82 b0 07 00 00 	mov    %rax,0x7b0(%rdx)
        vkCmdSetRasterizationStreamEXT      = PFN_vkCmdSetRasterizationStreamEXT( vkGetDeviceProcAddr( device, "vkCmdSetRasterizationStreamEXT" ) );
   135f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   135f5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   135f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   135fd:	48 8d 0d 4c 37 01 00 	lea    0x1374c(%rip),%rcx        # 26d50 <_ZNSt8__detailL19__atomic_spin_countE+0x161c>
   13604:	48 89 ce             	mov    %rcx,%rsi
   13607:	48 89 c7             	mov    %rax,%rdi
   1360a:	ff d2                	call   *%rdx
   1360c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13610:	48 89 82 b8 07 00 00 	mov    %rax,0x7b8(%rdx)
          PFN_vkCmdSetConservativeRasterizationModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetConservativeRasterizationModeEXT" ) );
   13617:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1361b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1361f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13623:	48 8d 0d 46 37 01 00 	lea    0x13746(%rip),%rcx        # 26d70 <_ZNSt8__detailL19__atomic_spin_countE+0x163c>
   1362a:	48 89 ce             	mov    %rcx,%rsi
   1362d:	48 89 c7             	mov    %rax,%rdi
   13630:	ff d2                	call   *%rdx
        vkCmdSetConservativeRasterizationModeEXT =
   13632:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13636:	48 89 82 c0 07 00 00 	mov    %rax,0x7c0(%rdx)
          PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT( vkGetDeviceProcAddr( device, "vkCmdSetExtraPrimitiveOverestimationSizeEXT" ) );
   1363d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13641:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13645:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13649:	48 8d 0d 50 37 01 00 	lea    0x13750(%rip),%rcx        # 26da0 <_ZNSt8__detailL19__atomic_spin_countE+0x166c>
   13650:	48 89 ce             	mov    %rcx,%rsi
   13653:	48 89 c7             	mov    %rax,%rdi
   13656:	ff d2                	call   *%rdx
        vkCmdSetExtraPrimitiveOverestimationSizeEXT =
   13658:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1365c:	48 89 82 c8 07 00 00 	mov    %rax,0x7c8(%rdx)
        vkCmdSetDepthClipEnableEXT       = PFN_vkCmdSetDepthClipEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthClipEnableEXT" ) );
   13663:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13667:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1366b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1366f:	48 8d 0d 56 37 01 00 	lea    0x13756(%rip),%rcx        # 26dcc <_ZNSt8__detailL19__atomic_spin_countE+0x1698>
   13676:	48 89 ce             	mov    %rcx,%rsi
   13679:	48 89 c7             	mov    %rax,%rdi
   1367c:	ff d2                	call   *%rdx
   1367e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13682:	48 89 82 d0 07 00 00 	mov    %rax,0x7d0(%rdx)
        vkCmdSetSampleLocationsEnableEXT = PFN_vkCmdSetSampleLocationsEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetSampleLocationsEnableEXT" ) );
   13689:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1368d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13691:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13695:	48 8d 0d 4c 37 01 00 	lea    0x1374c(%rip),%rcx        # 26de8 <_ZNSt8__detailL19__atomic_spin_countE+0x16b4>
   1369c:	48 89 ce             	mov    %rcx,%rsi
   1369f:	48 89 c7             	mov    %rax,%rdi
   136a2:	ff d2                	call   *%rdx
   136a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   136a8:	48 89 82 d8 07 00 00 	mov    %rax,0x7d8(%rdx)
        vkCmdSetColorBlendAdvancedEXT    = PFN_vkCmdSetColorBlendAdvancedEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorBlendAdvancedEXT" ) );
   136af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136b3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   136b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   136bb:	48 8d 0d 47 37 01 00 	lea    0x13747(%rip),%rcx        # 26e09 <_ZNSt8__detailL19__atomic_spin_countE+0x16d5>
   136c2:	48 89 ce             	mov    %rcx,%rsi
   136c5:	48 89 c7             	mov    %rax,%rdi
   136c8:	ff d2                	call   *%rdx
   136ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   136ce:	48 89 82 e0 07 00 00 	mov    %rax,0x7e0(%rdx)
        vkCmdSetProvokingVertexModeEXT   = PFN_vkCmdSetProvokingVertexModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetProvokingVertexModeEXT" ) );
   136d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   136dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   136e1:	48 8d 0d 40 37 01 00 	lea    0x13740(%rip),%rcx        # 26e28 <_ZNSt8__detailL19__atomic_spin_countE+0x16f4>
   136e8:	48 89 ce             	mov    %rcx,%rsi
   136eb:	48 89 c7             	mov    %rax,%rdi
   136ee:	ff d2                	call   *%rdx
   136f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   136f4:	48 89 82 e8 07 00 00 	mov    %rax,0x7e8(%rdx)
        vkCmdSetLineRasterizationModeEXT = PFN_vkCmdSetLineRasterizationModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetLineRasterizationModeEXT" ) );
   136fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136ff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13703:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13707:	48 8d 0d 3a 37 01 00 	lea    0x1373a(%rip),%rcx        # 26e48 <_ZNSt8__detailL19__atomic_spin_countE+0x1714>
   1370e:	48 89 ce             	mov    %rcx,%rsi
   13711:	48 89 c7             	mov    %rax,%rdi
   13714:	ff d2                	call   *%rdx
   13716:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1371a:	48 89 82 f0 07 00 00 	mov    %rax,0x7f0(%rdx)
        vkCmdSetLineStippleEnableEXT     = PFN_vkCmdSetLineStippleEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetLineStippleEnableEXT" ) );
   13721:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13725:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13729:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1372d:	48 8d 0d 35 37 01 00 	lea    0x13735(%rip),%rcx        # 26e69 <_ZNSt8__detailL19__atomic_spin_countE+0x1735>
   13734:	48 89 ce             	mov    %rcx,%rsi
   13737:	48 89 c7             	mov    %rax,%rdi
   1373a:	ff d2                	call   *%rdx
   1373c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13740:	48 89 82 f8 07 00 00 	mov    %rax,0x7f8(%rdx)
          PFN_vkCmdSetDepthClipNegativeOneToOneEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthClipNegativeOneToOneEXT" ) );
   13747:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1374b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1374f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13753:	48 8d 0d 2e 37 01 00 	lea    0x1372e(%rip),%rcx        # 26e88 <_ZNSt8__detailL19__atomic_spin_countE+0x1754>
   1375a:	48 89 ce             	mov    %rcx,%rsi
   1375d:	48 89 c7             	mov    %rax,%rdi
   13760:	ff d2                	call   *%rdx
        vkCmdSetDepthClipNegativeOneToOneEXT =
   13762:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13766:	48 89 82 00 08 00 00 	mov    %rax,0x800(%rdx)
        vkCmdSetViewportWScalingEnableNV  = PFN_vkCmdSetViewportWScalingEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportWScalingEnableNV" ) );
   1376d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13771:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13775:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13779:	48 8d 0d 30 37 01 00 	lea    0x13730(%rip),%rcx        # 26eb0 <_ZNSt8__detailL19__atomic_spin_countE+0x177c>
   13780:	48 89 ce             	mov    %rcx,%rsi
   13783:	48 89 c7             	mov    %rax,%rdi
   13786:	ff d2                	call   *%rdx
   13788:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1378c:	48 89 82 08 08 00 00 	mov    %rax,0x808(%rdx)
        vkCmdSetViewportSwizzleNV         = PFN_vkCmdSetViewportSwizzleNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportSwizzleNV" ) );
   13793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13797:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1379b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1379f:	48 8d 0d 2b 37 01 00 	lea    0x1372b(%rip),%rcx        # 26ed1 <_ZNSt8__detailL19__atomic_spin_countE+0x179d>
   137a6:	48 89 ce             	mov    %rcx,%rsi
   137a9:	48 89 c7             	mov    %rax,%rdi
   137ac:	ff d2                	call   *%rdx
   137ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   137b2:	48 89 82 10 08 00 00 	mov    %rax,0x810(%rdx)
        vkCmdSetCoverageToColorEnableNV   = PFN_vkCmdSetCoverageToColorEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageToColorEnableNV" ) );
   137b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137bd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   137c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   137c5:	48 8d 0d 24 37 01 00 	lea    0x13724(%rip),%rcx        # 26ef0 <_ZNSt8__detailL19__atomic_spin_countE+0x17bc>
   137cc:	48 89 ce             	mov    %rcx,%rsi
   137cf:	48 89 c7             	mov    %rax,%rdi
   137d2:	ff d2                	call   *%rdx
   137d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   137d8:	48 89 82 18 08 00 00 	mov    %rax,0x818(%rdx)
        vkCmdSetCoverageToColorLocationNV = PFN_vkCmdSetCoverageToColorLocationNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageToColorLocationNV" ) );
   137df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137e3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   137e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   137eb:	48 8d 0d 1e 37 01 00 	lea    0x1371e(%rip),%rcx        # 26f10 <_ZNSt8__detailL19__atomic_spin_countE+0x17dc>
   137f2:	48 89 ce             	mov    %rcx,%rsi
   137f5:	48 89 c7             	mov    %rax,%rdi
   137f8:	ff d2                	call   *%rdx
   137fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   137fe:	48 89 82 20 08 00 00 	mov    %rax,0x820(%rdx)
        vkCmdSetCoverageModulationModeNV  = PFN_vkCmdSetCoverageModulationModeNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageModulationModeNV" ) );
   13805:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13809:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1380d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13811:	48 8d 0d 20 37 01 00 	lea    0x13720(%rip),%rcx        # 26f38 <_ZNSt8__detailL19__atomic_spin_countE+0x1804>
   13818:	48 89 ce             	mov    %rcx,%rsi
   1381b:	48 89 c7             	mov    %rax,%rdi
   1381e:	ff d2                	call   *%rdx
   13820:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13824:	48 89 82 28 08 00 00 	mov    %rax,0x828(%rdx)
          PFN_vkCmdSetCoverageModulationTableEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageModulationTableEnableNV" ) );
   1382b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1382f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13833:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13837:	48 8d 0d 22 37 01 00 	lea    0x13722(%rip),%rcx        # 26f60 <_ZNSt8__detailL19__atomic_spin_countE+0x182c>
   1383e:	48 89 ce             	mov    %rcx,%rsi
   13841:	48 89 c7             	mov    %rax,%rdi
   13844:	ff d2                	call   *%rdx
        vkCmdSetCoverageModulationTableEnableNV =
   13846:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1384a:	48 89 82 30 08 00 00 	mov    %rax,0x830(%rdx)
        vkCmdSetCoverageModulationTableNV = PFN_vkCmdSetCoverageModulationTableNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageModulationTableNV" ) );
   13851:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13855:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13859:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1385d:	48 8d 0d 24 37 01 00 	lea    0x13724(%rip),%rcx        # 26f88 <_ZNSt8__detailL19__atomic_spin_countE+0x1854>
   13864:	48 89 ce             	mov    %rcx,%rsi
   13867:	48 89 c7             	mov    %rax,%rdi
   1386a:	ff d2                	call   *%rdx
   1386c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13870:	48 89 82 38 08 00 00 	mov    %rax,0x838(%rdx)
        vkCmdSetShadingRateImageEnableNV  = PFN_vkCmdSetShadingRateImageEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetShadingRateImageEnableNV" ) );
   13877:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1387b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1387f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13883:	48 8d 0d 26 37 01 00 	lea    0x13726(%rip),%rcx        # 26fb0 <_ZNSt8__detailL19__atomic_spin_countE+0x187c>
   1388a:	48 89 ce             	mov    %rcx,%rsi
   1388d:	48 89 c7             	mov    %rax,%rdi
   13890:	ff d2                	call   *%rdx
   13892:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13896:	48 89 82 40 08 00 00 	mov    %rax,0x840(%rdx)
          PFN_vkCmdSetRepresentativeFragmentTestEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetRepresentativeFragmentTestEnableNV" ) );
   1389d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138a1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   138a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   138a9:	48 8d 0d 28 37 01 00 	lea    0x13728(%rip),%rcx        # 26fd8 <_ZNSt8__detailL19__atomic_spin_countE+0x18a4>
   138b0:	48 89 ce             	mov    %rcx,%rsi
   138b3:	48 89 c7             	mov    %rax,%rdi
   138b6:	ff d2                	call   *%rdx
        vkCmdSetRepresentativeFragmentTestEnableNV =
   138b8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   138bc:	48 89 82 48 08 00 00 	mov    %rax,0x848(%rdx)
        vkCmdSetCoverageReductionModeNV = PFN_vkCmdSetCoverageReductionModeNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageReductionModeNV" ) );
   138c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138c7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   138cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   138cf:	48 8d 0d 32 37 01 00 	lea    0x13732(%rip),%rcx        # 27008 <_ZNSt8__detailL19__atomic_spin_countE+0x18d4>
   138d6:	48 89 ce             	mov    %rcx,%rsi
   138d9:	48 89 c7             	mov    %rax,%rdi
   138dc:	ff d2                	call   *%rdx
   138de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   138e2:	48 89 82 50 08 00 00 	mov    %rax,0x850(%rdx)
        vkGetMemoryHostPointerPropertiesEXT = PFN_vkGetMemoryHostPointerPropertiesEXT( vkGetDeviceProcAddr( device, "vkGetMemoryHostPointerPropertiesEXT" ) );
   138e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138ed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   138f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   138f5:	48 8d 0d 2c 37 01 00 	lea    0x1372c(%rip),%rcx        # 27028 <_ZNSt8__detailL19__atomic_spin_countE+0x18f4>
   138fc:	48 89 ce             	mov    %rcx,%rsi
   138ff:	48 89 c7             	mov    %rax,%rdi
   13902:	ff d2                	call   *%rdx
   13904:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13908:	48 89 82 58 08 00 00 	mov    %rax,0x858(%rdx)
        vkSetHdrMetadataEXT = PFN_vkSetHdrMetadataEXT( vkGetDeviceProcAddr( device, "vkSetHdrMetadataEXT" ) );
   1390f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13913:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13917:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1391b:	48 8d 0d 2a 37 01 00 	lea    0x1372a(%rip),%rcx        # 2704c <_ZNSt8__detailL19__atomic_spin_countE+0x1918>
   13922:	48 89 ce             	mov    %rcx,%rsi
   13925:	48 89 c7             	mov    %rax,%rdi
   13928:	ff d2                	call   *%rdx
   1392a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1392e:	48 89 82 78 08 00 00 	mov    %rax,0x878(%rdx)
        vkResetQueryPoolEXT = PFN_vkResetQueryPoolEXT( vkGetDeviceProcAddr( device, "vkResetQueryPoolEXT" ) );
   13935:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13939:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1393d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13941:	48 8d 0d 18 37 01 00 	lea    0x13718(%rip),%rcx        # 27060 <_ZNSt8__detailL19__atomic_spin_countE+0x192c>
   13948:	48 89 ce             	mov    %rcx,%rsi
   1394b:	48 89 c7             	mov    %rax,%rdi
   1394e:	ff d2                	call   *%rdx
   13950:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13954:	48 89 82 80 08 00 00 	mov    %rax,0x880(%rdx)
        if ( !vkResetQueryPool )
   1395b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1395f:	48 8b 80 88 04 00 00 	mov    0x488(%rax),%rax
   13966:	48 85 c0             	test   %rax,%rax
   13969:	75 16                	jne    13981 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4775>
          vkResetQueryPool = vkResetQueryPoolEXT;
   1396b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1396f:	48 8b 90 80 08 00 00 	mov    0x880(%rax),%rdx
   13976:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1397a:	48 89 90 88 04 00 00 	mov    %rdx,0x488(%rax)
        vkGetImageSubresourceLayout2EXT = PFN_vkGetImageSubresourceLayout2EXT( vkGetDeviceProcAddr( device, "vkGetImageSubresourceLayout2EXT" ) );
   13981:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13985:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13989:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1398d:	48 8d 0d e4 36 01 00 	lea    0x136e4(%rip),%rcx        # 27078 <_ZNSt8__detailL19__atomic_spin_countE+0x1944>
   13994:	48 89 ce             	mov    %rcx,%rsi
   13997:	48 89 c7             	mov    %rax,%rdi
   1399a:	ff d2                	call   *%rdx
   1399c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   139a0:	48 89 82 88 08 00 00 	mov    %rax,0x888(%rdx)
          PFN_vkGetImageDrmFormatModifierPropertiesEXT( vkGetDeviceProcAddr( device, "vkGetImageDrmFormatModifierPropertiesEXT" ) );
   139a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139ab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   139af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   139b3:	48 8d 0d de 36 01 00 	lea    0x136de(%rip),%rcx        # 27098 <_ZNSt8__detailL19__atomic_spin_countE+0x1964>
   139ba:	48 89 ce             	mov    %rcx,%rsi
   139bd:	48 89 c7             	mov    %rax,%rdi
   139c0:	ff d2                	call   *%rdx
        vkGetImageDrmFormatModifierPropertiesEXT =
   139c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   139c6:	48 89 82 90 08 00 00 	mov    %rax,0x890(%rdx)
        vkCmdSetLineStippleEXT = PFN_vkCmdSetLineStippleEXT( vkGetDeviceProcAddr( device, "vkCmdSetLineStippleEXT" ) );
   139cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139d1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   139d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   139d9:	48 8d 0d e1 36 01 00 	lea    0x136e1(%rip),%rcx        # 270c1 <_ZNSt8__detailL19__atomic_spin_countE+0x198d>
   139e0:	48 89 ce             	mov    %rcx,%rsi
   139e3:	48 89 c7             	mov    %rax,%rdi
   139e6:	ff d2                	call   *%rdx
   139e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   139ec:	48 89 82 98 08 00 00 	mov    %rax,0x898(%rdx)
        vkCmdDrawMeshTasksEXT              = PFN_vkCmdDrawMeshTasksEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksEXT" ) );
   139f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139f7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   139fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   139ff:	48 8d 0d d2 36 01 00 	lea    0x136d2(%rip),%rcx        # 270d8 <_ZNSt8__detailL19__atomic_spin_countE+0x19a4>
   13a06:	48 89 ce             	mov    %rcx,%rsi
   13a09:	48 89 c7             	mov    %rax,%rdi
   13a0c:	ff d2                	call   *%rdx
   13a0e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a12:	48 89 82 a0 08 00 00 	mov    %rax,0x8a0(%rdx)
        vkCmdDrawMeshTasksIndirectEXT      = PFN_vkCmdDrawMeshTasksIndirectEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectEXT" ) );
   13a19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a1d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a25:	48 8d 0d c2 36 01 00 	lea    0x136c2(%rip),%rcx        # 270ee <_ZNSt8__detailL19__atomic_spin_countE+0x19ba>
   13a2c:	48 89 ce             	mov    %rcx,%rsi
   13a2f:	48 89 c7             	mov    %rax,%rdi
   13a32:	ff d2                	call   *%rdx
   13a34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a38:	48 89 82 a8 08 00 00 	mov    %rax,0x8a8(%rdx)
        vkCmdDrawMeshTasksIndirectCountEXT = PFN_vkCmdDrawMeshTasksIndirectCountEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectCountEXT" ) );
   13a3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a43:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a4b:	48 8d 0d be 36 01 00 	lea    0x136be(%rip),%rcx        # 27110 <_ZNSt8__detailL19__atomic_spin_countE+0x19dc>
   13a52:	48 89 ce             	mov    %rcx,%rsi
   13a55:	48 89 c7             	mov    %rax,%rdi
   13a58:	ff d2                	call   *%rdx
   13a5a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a5e:	48 89 82 b0 08 00 00 	mov    %rax,0x8b0(%rdx)
        vkCmdDrawMultiEXT        = PFN_vkCmdDrawMultiEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMultiEXT" ) );
   13a65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a69:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a71:	48 8d 0d bb 36 01 00 	lea    0x136bb(%rip),%rcx        # 27133 <_ZNSt8__detailL19__atomic_spin_countE+0x19ff>
   13a78:	48 89 ce             	mov    %rcx,%rsi
   13a7b:	48 89 c7             	mov    %rax,%rdi
   13a7e:	ff d2                	call   *%rdx
   13a80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a84:	48 89 82 c0 08 00 00 	mov    %rax,0x8c0(%rdx)
        vkCmdDrawMultiIndexedEXT = PFN_vkCmdDrawMultiIndexedEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMultiIndexedEXT" ) );
   13a8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a8f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a97:	48 8d 0d a7 36 01 00 	lea    0x136a7(%rip),%rcx        # 27145 <_ZNSt8__detailL19__atomic_spin_countE+0x1a11>
   13a9e:	48 89 ce             	mov    %rcx,%rsi
   13aa1:	48 89 c7             	mov    %rax,%rdi
   13aa4:	ff d2                	call   *%rdx
   13aa6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13aaa:	48 89 82 c8 08 00 00 	mov    %rax,0x8c8(%rdx)
        vkCreateMicromapEXT                 = PFN_vkCreateMicromapEXT( vkGetDeviceProcAddr( device, "vkCreateMicromapEXT" ) );
   13ab1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ab5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ab9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13abd:	48 8d 0d 9a 36 01 00 	lea    0x1369a(%rip),%rcx        # 2715e <_ZNSt8__detailL19__atomic_spin_countE+0x1a2a>
   13ac4:	48 89 ce             	mov    %rcx,%rsi
   13ac7:	48 89 c7             	mov    %rax,%rdi
   13aca:	ff d2                	call   *%rdx
   13acc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ad0:	48 89 82 d0 08 00 00 	mov    %rax,0x8d0(%rdx)
        vkDestroyMicromapEXT                = PFN_vkDestroyMicromapEXT( vkGetDeviceProcAddr( device, "vkDestroyMicromapEXT" ) );
   13ad7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13adb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13adf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ae3:	48 8d 0d 88 36 01 00 	lea    0x13688(%rip),%rcx        # 27172 <_ZNSt8__detailL19__atomic_spin_countE+0x1a3e>
   13aea:	48 89 ce             	mov    %rcx,%rsi
   13aed:	48 89 c7             	mov    %rax,%rdi
   13af0:	ff d2                	call   *%rdx
   13af2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13af6:	48 89 82 d8 08 00 00 	mov    %rax,0x8d8(%rdx)
        vkCmdBuildMicromapsEXT              = PFN_vkCmdBuildMicromapsEXT( vkGetDeviceProcAddr( device, "vkCmdBuildMicromapsEXT" ) );
   13afd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b01:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b09:	48 8d 0d 77 36 01 00 	lea    0x13677(%rip),%rcx        # 27187 <_ZNSt8__detailL19__atomic_spin_countE+0x1a53>
   13b10:	48 89 ce             	mov    %rcx,%rsi
   13b13:	48 89 c7             	mov    %rax,%rdi
   13b16:	ff d2                	call   *%rdx
   13b18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b1c:	48 89 82 e0 08 00 00 	mov    %rax,0x8e0(%rdx)
        vkBuildMicromapsEXT                 = PFN_vkBuildMicromapsEXT( vkGetDeviceProcAddr( device, "vkBuildMicromapsEXT" ) );
   13b23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b27:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b2f:	48 8d 0d 68 36 01 00 	lea    0x13668(%rip),%rcx        # 2719e <_ZNSt8__detailL19__atomic_spin_countE+0x1a6a>
   13b36:	48 89 ce             	mov    %rcx,%rsi
   13b39:	48 89 c7             	mov    %rax,%rdi
   13b3c:	ff d2                	call   *%rdx
   13b3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b42:	48 89 82 e8 08 00 00 	mov    %rax,0x8e8(%rdx)
        vkCopyMicromapEXT                   = PFN_vkCopyMicromapEXT( vkGetDeviceProcAddr( device, "vkCopyMicromapEXT" ) );
   13b49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b4d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b55:	48 8d 0d 56 36 01 00 	lea    0x13656(%rip),%rcx        # 271b2 <_ZNSt8__detailL19__atomic_spin_countE+0x1a7e>
   13b5c:	48 89 ce             	mov    %rcx,%rsi
   13b5f:	48 89 c7             	mov    %rax,%rdi
   13b62:	ff d2                	call   *%rdx
   13b64:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b68:	48 89 82 f0 08 00 00 	mov    %rax,0x8f0(%rdx)
        vkCopyMicromapToMemoryEXT           = PFN_vkCopyMicromapToMemoryEXT( vkGetDeviceProcAddr( device, "vkCopyMicromapToMemoryEXT" ) );
   13b6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b73:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b7b:	48 8d 0d 42 36 01 00 	lea    0x13642(%rip),%rcx        # 271c4 <_ZNSt8__detailL19__atomic_spin_countE+0x1a90>
   13b82:	48 89 ce             	mov    %rcx,%rsi
   13b85:	48 89 c7             	mov    %rax,%rdi
   13b88:	ff d2                	call   *%rdx
   13b8a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b8e:	48 89 82 f8 08 00 00 	mov    %rax,0x8f8(%rdx)
        vkCopyMemoryToMicromapEXT           = PFN_vkCopyMemoryToMicromapEXT( vkGetDeviceProcAddr( device, "vkCopyMemoryToMicromapEXT" ) );
   13b95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b99:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ba1:	48 8d 0d 36 36 01 00 	lea    0x13636(%rip),%rcx        # 271de <_ZNSt8__detailL19__atomic_spin_countE+0x1aaa>
   13ba8:	48 89 ce             	mov    %rcx,%rsi
   13bab:	48 89 c7             	mov    %rax,%rdi
   13bae:	ff d2                	call   *%rdx
   13bb0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13bb4:	48 89 82 00 09 00 00 	mov    %rax,0x900(%rdx)
        vkWriteMicromapsPropertiesEXT       = PFN_vkWriteMicromapsPropertiesEXT( vkGetDeviceProcAddr( device, "vkWriteMicromapsPropertiesEXT" ) );
   13bbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13bbf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13bc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13bc7:	48 8d 0d 2a 36 01 00 	lea    0x1362a(%rip),%rcx        # 271f8 <_ZNSt8__detailL19__atomic_spin_countE+0x1ac4>
   13bce:	48 89 ce             	mov    %rcx,%rsi
   13bd1:	48 89 c7             	mov    %rax,%rdi
   13bd4:	ff d2                	call   *%rdx
   13bd6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13bda:	48 89 82 08 09 00 00 	mov    %rax,0x908(%rdx)
        vkCmdCopyMicromapEXT                = PFN_vkCmdCopyMicromapEXT( vkGetDeviceProcAddr( device, "vkCmdCopyMicromapEXT" ) );
   13be1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13be5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13be9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13bed:	48 8d 0d 22 36 01 00 	lea    0x13622(%rip),%rcx        # 27216 <_ZNSt8__detailL19__atomic_spin_countE+0x1ae2>
   13bf4:	48 89 ce             	mov    %rcx,%rsi
   13bf7:	48 89 c7             	mov    %rax,%rdi
   13bfa:	ff d2                	call   *%rdx
   13bfc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c00:	48 89 82 10 09 00 00 	mov    %rax,0x910(%rdx)
        vkCmdCopyMicromapToMemoryEXT        = PFN_vkCmdCopyMicromapToMemoryEXT( vkGetDeviceProcAddr( device, "vkCmdCopyMicromapToMemoryEXT" ) );
   13c07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c0b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c13:	48 8d 0d 11 36 01 00 	lea    0x13611(%rip),%rcx        # 2722b <_ZNSt8__detailL19__atomic_spin_countE+0x1af7>
   13c1a:	48 89 ce             	mov    %rcx,%rsi
   13c1d:	48 89 c7             	mov    %rax,%rdi
   13c20:	ff d2                	call   *%rdx
   13c22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c26:	48 89 82 18 09 00 00 	mov    %rax,0x918(%rdx)
        vkCmdCopyMemoryToMicromapEXT        = PFN_vkCmdCopyMemoryToMicromapEXT( vkGetDeviceProcAddr( device, "vkCmdCopyMemoryToMicromapEXT" ) );
   13c2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c31:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c39:	48 8d 0d 08 36 01 00 	lea    0x13608(%rip),%rcx        # 27248 <_ZNSt8__detailL19__atomic_spin_countE+0x1b14>
   13c40:	48 89 ce             	mov    %rcx,%rsi
   13c43:	48 89 c7             	mov    %rax,%rdi
   13c46:	ff d2                	call   *%rdx
   13c48:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c4c:	48 89 82 20 09 00 00 	mov    %rax,0x920(%rdx)
        vkCmdWriteMicromapsPropertiesEXT    = PFN_vkCmdWriteMicromapsPropertiesEXT( vkGetDeviceProcAddr( device, "vkCmdWriteMicromapsPropertiesEXT" ) );
   13c53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c57:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c5f:	48 8d 0d 02 36 01 00 	lea    0x13602(%rip),%rcx        # 27268 <_ZNSt8__detailL19__atomic_spin_countE+0x1b34>
   13c66:	48 89 ce             	mov    %rcx,%rsi
   13c69:	48 89 c7             	mov    %rax,%rdi
   13c6c:	ff d2                	call   *%rdx
   13c6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c72:	48 89 82 28 09 00 00 	mov    %rax,0x928(%rdx)
        vkGetDeviceMicromapCompatibilityEXT = PFN_vkGetDeviceMicromapCompatibilityEXT( vkGetDeviceProcAddr( device, "vkGetDeviceMicromapCompatibilityEXT" ) );
   13c79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c7d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c85:	48 8d 0d 04 36 01 00 	lea    0x13604(%rip),%rcx        # 27290 <_ZNSt8__detailL19__atomic_spin_countE+0x1b5c>
   13c8c:	48 89 ce             	mov    %rcx,%rsi
   13c8f:	48 89 c7             	mov    %rax,%rdi
   13c92:	ff d2                	call   *%rdx
   13c94:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c98:	48 89 82 30 09 00 00 	mov    %rax,0x930(%rdx)
        vkGetMicromapBuildSizesEXT          = PFN_vkGetMicromapBuildSizesEXT( vkGetDeviceProcAddr( device, "vkGetMicromapBuildSizesEXT" ) );
   13c9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ca3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ca7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13cab:	48 8d 0d 02 36 01 00 	lea    0x13602(%rip),%rcx        # 272b4 <_ZNSt8__detailL19__atomic_spin_countE+0x1b80>
   13cb2:	48 89 ce             	mov    %rcx,%rsi
   13cb5:	48 89 c7             	mov    %rax,%rdi
   13cb8:	ff d2                	call   *%rdx
   13cba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13cbe:	48 89 82 38 09 00 00 	mov    %rax,0x938(%rdx)
        vkSetDeviceMemoryPriorityEXT = PFN_vkSetDeviceMemoryPriorityEXT( vkGetDeviceProcAddr( device, "vkSetDeviceMemoryPriorityEXT" ) );
   13cc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13cc9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ccd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13cd1:	48 8d 0d f7 35 01 00 	lea    0x135f7(%rip),%rcx        # 272cf <_ZNSt8__detailL19__atomic_spin_countE+0x1b9b>
   13cd8:	48 89 ce             	mov    %rcx,%rsi
   13cdb:	48 89 c7             	mov    %rax,%rdi
   13cde:	ff d2                	call   *%rdx
   13ce0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ce4:	48 89 82 40 09 00 00 	mov    %rax,0x940(%rdx)
        vkGetPipelinePropertiesEXT = PFN_vkGetPipelinePropertiesEXT( vkGetDeviceProcAddr( device, "vkGetPipelinePropertiesEXT" ) );
   13ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13cef:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13cf3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13cf7:	48 8d 0d ee 35 01 00 	lea    0x135ee(%rip),%rcx        # 272ec <_ZNSt8__detailL19__atomic_spin_countE+0x1bb8>
   13cfe:	48 89 ce             	mov    %rcx,%rsi
   13d01:	48 89 c7             	mov    %rax,%rdi
   13d04:	ff d2                	call   *%rdx
   13d06:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d0a:	48 89 82 48 09 00 00 	mov    %rax,0x948(%rdx)
        vkCreatePrivateDataSlotEXT = PFN_vkCreatePrivateDataSlotEXT( vkGetDeviceProcAddr( device, "vkCreatePrivateDataSlotEXT" ) );
   13d11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d15:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13d19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d1d:	48 8d 0d e3 35 01 00 	lea    0x135e3(%rip),%rcx        # 27307 <_ZNSt8__detailL19__atomic_spin_countE+0x1bd3>
   13d24:	48 89 ce             	mov    %rcx,%rsi
   13d27:	48 89 c7             	mov    %rax,%rdi
   13d2a:	ff d2                	call   *%rdx
   13d2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d30:	48 89 82 50 09 00 00 	mov    %rax,0x950(%rdx)
        if ( !vkCreatePrivateDataSlot )
   13d37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d3b:	48 8b 80 c0 04 00 00 	mov    0x4c0(%rax),%rax
   13d42:	48 85 c0             	test   %rax,%rax
   13d45:	75 16                	jne    13d5d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4b51>
          vkCreatePrivateDataSlot = vkCreatePrivateDataSlotEXT;
   13d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d4b:	48 8b 90 50 09 00 00 	mov    0x950(%rax),%rdx
   13d52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d56:	48 89 90 c0 04 00 00 	mov    %rdx,0x4c0(%rax)
        vkDestroyPrivateDataSlotEXT = PFN_vkDestroyPrivateDataSlotEXT( vkGetDeviceProcAddr( device, "vkDestroyPrivateDataSlotEXT" ) );
   13d5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d61:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13d65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d69:	48 8d 0d b2 35 01 00 	lea    0x135b2(%rip),%rcx        # 27322 <_ZNSt8__detailL19__atomic_spin_countE+0x1bee>
   13d70:	48 89 ce             	mov    %rcx,%rsi
   13d73:	48 89 c7             	mov    %rax,%rdi
   13d76:	ff d2                	call   *%rdx
   13d78:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d7c:	48 89 82 58 09 00 00 	mov    %rax,0x958(%rdx)
        if ( !vkDestroyPrivateDataSlot )
   13d83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d87:	48 8b 80 c8 04 00 00 	mov    0x4c8(%rax),%rax
   13d8e:	48 85 c0             	test   %rax,%rax
   13d91:	75 16                	jne    13da9 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4b9d>
          vkDestroyPrivateDataSlot = vkDestroyPrivateDataSlotEXT;
   13d93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d97:	48 8b 90 58 09 00 00 	mov    0x958(%rax),%rdx
   13d9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13da2:	48 89 90 c8 04 00 00 	mov    %rdx,0x4c8(%rax)
        vkSetPrivateDataEXT = PFN_vkSetPrivateDataEXT( vkGetDeviceProcAddr( device, "vkSetPrivateDataEXT" ) );
   13da9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13dad:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13db1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13db5:	48 8d 0d 82 35 01 00 	lea    0x13582(%rip),%rcx        # 2733e <_ZNSt8__detailL19__atomic_spin_countE+0x1c0a>
   13dbc:	48 89 ce             	mov    %rcx,%rsi
   13dbf:	48 89 c7             	mov    %rax,%rdi
   13dc2:	ff d2                	call   *%rdx
   13dc4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13dc8:	48 89 82 60 09 00 00 	mov    %rax,0x960(%rdx)
        if ( !vkSetPrivateData )
   13dcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13dd3:	48 8b 80 d0 04 00 00 	mov    0x4d0(%rax),%rax
   13dda:	48 85 c0             	test   %rax,%rax
   13ddd:	75 16                	jne    13df5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4be9>
          vkSetPrivateData = vkSetPrivateDataEXT;
   13ddf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13de3:	48 8b 90 60 09 00 00 	mov    0x960(%rax),%rdx
   13dea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13dee:	48 89 90 d0 04 00 00 	mov    %rdx,0x4d0(%rax)
        vkGetPrivateDataEXT = PFN_vkGetPrivateDataEXT( vkGetDeviceProcAddr( device, "vkGetPrivateDataEXT" ) );
   13df5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13df9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13dfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e01:	48 8d 0d 4a 35 01 00 	lea    0x1354a(%rip),%rcx        # 27352 <_ZNSt8__detailL19__atomic_spin_countE+0x1c1e>
   13e08:	48 89 ce             	mov    %rcx,%rsi
   13e0b:	48 89 c7             	mov    %rax,%rdi
   13e0e:	ff d2                	call   *%rdx
   13e10:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e14:	48 89 82 68 09 00 00 	mov    %rax,0x968(%rdx)
        if ( !vkGetPrivateData )
   13e1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e1f:	48 8b 80 d8 04 00 00 	mov    0x4d8(%rax),%rax
   13e26:	48 85 c0             	test   %rax,%rax
   13e29:	75 16                	jne    13e41 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4c35>
          vkGetPrivateData = vkGetPrivateDataEXT;
   13e2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e2f:	48 8b 90 68 09 00 00 	mov    0x968(%rax),%rdx
   13e36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e3a:	48 89 90 d8 04 00 00 	mov    %rdx,0x4d8(%rax)
        vkCmdSetSampleLocationsEXT = PFN_vkCmdSetSampleLocationsEXT( vkGetDeviceProcAddr( device, "vkCmdSetSampleLocationsEXT" ) );
   13e41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e45:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e4d:	48 8d 0d 12 35 01 00 	lea    0x13512(%rip),%rcx        # 27366 <_ZNSt8__detailL19__atomic_spin_countE+0x1c32>
   13e54:	48 89 ce             	mov    %rcx,%rsi
   13e57:	48 89 c7             	mov    %rax,%rdi
   13e5a:	ff d2                	call   *%rdx
   13e5c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e60:	48 89 82 70 09 00 00 	mov    %rax,0x970(%rdx)
        vkGetShaderModuleIdentifierEXT = PFN_vkGetShaderModuleIdentifierEXT( vkGetDeviceProcAddr( device, "vkGetShaderModuleIdentifierEXT" ) );
   13e67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e6b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e73:	48 8d 0d 0e 35 01 00 	lea    0x1350e(%rip),%rcx        # 27388 <_ZNSt8__detailL19__atomic_spin_countE+0x1c54>
   13e7a:	48 89 ce             	mov    %rcx,%rsi
   13e7d:	48 89 c7             	mov    %rax,%rdi
   13e80:	ff d2                	call   *%rdx
   13e82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e86:	48 89 82 78 09 00 00 	mov    %rax,0x978(%rdx)
          PFN_vkGetShaderModuleCreateInfoIdentifierEXT( vkGetDeviceProcAddr( device, "vkGetShaderModuleCreateInfoIdentifierEXT" ) );
   13e8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e91:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e99:	48 8d 0d 08 35 01 00 	lea    0x13508(%rip),%rcx        # 273a8 <_ZNSt8__detailL19__atomic_spin_countE+0x1c74>
   13ea0:	48 89 ce             	mov    %rcx,%rsi
   13ea3:	48 89 c7             	mov    %rax,%rdi
   13ea6:	ff d2                	call   *%rdx
        vkGetShaderModuleCreateInfoIdentifierEXT =
   13ea8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13eac:	48 89 82 80 09 00 00 	mov    %rax,0x980(%rdx)
          PFN_vkCmdBindTransformFeedbackBuffersEXT( vkGetDeviceProcAddr( device, "vkCmdBindTransformFeedbackBuffersEXT" ) );
   13eb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13eb7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ebb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ebf:	48 8d 0d 12 35 01 00 	lea    0x13512(%rip),%rcx        # 273d8 <_ZNSt8__detailL19__atomic_spin_countE+0x1ca4>
   13ec6:	48 89 ce             	mov    %rcx,%rsi
   13ec9:	48 89 c7             	mov    %rax,%rdi
   13ecc:	ff d2                	call   *%rdx
        vkCmdBindTransformFeedbackBuffersEXT =
   13ece:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ed2:	48 89 82 88 09 00 00 	mov    %rax,0x988(%rdx)
        vkCmdBeginTransformFeedbackEXT = PFN_vkCmdBeginTransformFeedbackEXT( vkGetDeviceProcAddr( device, "vkCmdBeginTransformFeedbackEXT" ) );
   13ed9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13edd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ee1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ee5:	48 8d 0d 14 35 01 00 	lea    0x13514(%rip),%rcx        # 27400 <_ZNSt8__detailL19__atomic_spin_countE+0x1ccc>
   13eec:	48 89 ce             	mov    %rcx,%rsi
   13eef:	48 89 c7             	mov    %rax,%rdi
   13ef2:	ff d2                	call   *%rdx
   13ef4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ef8:	48 89 82 90 09 00 00 	mov    %rax,0x990(%rdx)
        vkCmdEndTransformFeedbackEXT   = PFN_vkCmdEndTransformFeedbackEXT( vkGetDeviceProcAddr( device, "vkCmdEndTransformFeedbackEXT" ) );
   13eff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f03:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f0b:	48 8d 0d 0d 35 01 00 	lea    0x1350d(%rip),%rcx        # 2741f <_ZNSt8__detailL19__atomic_spin_countE+0x1ceb>
   13f12:	48 89 ce             	mov    %rcx,%rsi
   13f15:	48 89 c7             	mov    %rax,%rdi
   13f18:	ff d2                	call   *%rdx
   13f1a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f1e:	48 89 82 98 09 00 00 	mov    %rax,0x998(%rdx)
        vkCmdBeginQueryIndexedEXT      = PFN_vkCmdBeginQueryIndexedEXT( vkGetDeviceProcAddr( device, "vkCmdBeginQueryIndexedEXT" ) );
   13f25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f29:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f31:	48 8d 0d 04 35 01 00 	lea    0x13504(%rip),%rcx        # 2743c <_ZNSt8__detailL19__atomic_spin_countE+0x1d08>
   13f38:	48 89 ce             	mov    %rcx,%rsi
   13f3b:	48 89 c7             	mov    %rax,%rdi
   13f3e:	ff d2                	call   *%rdx
   13f40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f44:	48 89 82 a0 09 00 00 	mov    %rax,0x9a0(%rdx)
        vkCmdEndQueryIndexedEXT        = PFN_vkCmdEndQueryIndexedEXT( vkGetDeviceProcAddr( device, "vkCmdEndQueryIndexedEXT" ) );
   13f4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f4f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f57:	48 8d 0d f8 34 01 00 	lea    0x134f8(%rip),%rcx        # 27456 <_ZNSt8__detailL19__atomic_spin_countE+0x1d22>
   13f5e:	48 89 ce             	mov    %rcx,%rsi
   13f61:	48 89 c7             	mov    %rax,%rdi
   13f64:	ff d2                	call   *%rdx
   13f66:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f6a:	48 89 82 a8 09 00 00 	mov    %rax,0x9a8(%rdx)
        vkCmdDrawIndirectByteCountEXT  = PFN_vkCmdDrawIndirectByteCountEXT( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectByteCountEXT" ) );
   13f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f75:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f7d:	48 8d 0d ea 34 01 00 	lea    0x134ea(%rip),%rcx        # 2746e <_ZNSt8__detailL19__atomic_spin_countE+0x1d3a>
   13f84:	48 89 ce             	mov    %rcx,%rsi
   13f87:	48 89 c7             	mov    %rax,%rdi
   13f8a:	ff d2                	call   *%rdx
   13f8c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f90:	48 89 82 b0 09 00 00 	mov    %rax,0x9b0(%rdx)
        vkCreateValidationCacheEXT  = PFN_vkCreateValidationCacheEXT( vkGetDeviceProcAddr( device, "vkCreateValidationCacheEXT" ) );
   13f97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f9b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13fa3:	48 8d 0d e2 34 01 00 	lea    0x134e2(%rip),%rcx        # 2748c <_ZNSt8__detailL19__atomic_spin_countE+0x1d58>
   13faa:	48 89 ce             	mov    %rcx,%rsi
   13fad:	48 89 c7             	mov    %rax,%rdi
   13fb0:	ff d2                	call   *%rdx
   13fb2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13fb6:	48 89 82 b8 09 00 00 	mov    %rax,0x9b8(%rdx)
        vkDestroyValidationCacheEXT = PFN_vkDestroyValidationCacheEXT( vkGetDeviceProcAddr( device, "vkDestroyValidationCacheEXT" ) );
   13fbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fc1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13fc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13fc9:	48 8d 0d d7 34 01 00 	lea    0x134d7(%rip),%rcx        # 274a7 <_ZNSt8__detailL19__atomic_spin_countE+0x1d73>
   13fd0:	48 89 ce             	mov    %rcx,%rsi
   13fd3:	48 89 c7             	mov    %rax,%rdi
   13fd6:	ff d2                	call   *%rdx
   13fd8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13fdc:	48 89 82 c0 09 00 00 	mov    %rax,0x9c0(%rdx)
        vkMergeValidationCachesEXT  = PFN_vkMergeValidationCachesEXT( vkGetDeviceProcAddr( device, "vkMergeValidationCachesEXT" ) );
   13fe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fe7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13feb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13fef:	48 8d 0d cd 34 01 00 	lea    0x134cd(%rip),%rcx        # 274c3 <_ZNSt8__detailL19__atomic_spin_countE+0x1d8f>
   13ff6:	48 89 ce             	mov    %rcx,%rsi
   13ff9:	48 89 c7             	mov    %rax,%rdi
   13ffc:	ff d2                	call   *%rdx
   13ffe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14002:	48 89 82 c8 09 00 00 	mov    %rax,0x9c8(%rdx)
        vkGetValidationCacheDataEXT = PFN_vkGetValidationCacheDataEXT( vkGetDeviceProcAddr( device, "vkGetValidationCacheDataEXT" ) );
   14009:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1400d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14011:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14015:	48 8d 0d c2 34 01 00 	lea    0x134c2(%rip),%rcx        # 274de <_ZNSt8__detailL19__atomic_spin_countE+0x1daa>
   1401c:	48 89 ce             	mov    %rcx,%rsi
   1401f:	48 89 c7             	mov    %rax,%rdi
   14022:	ff d2                	call   *%rdx
   14024:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14028:	48 89 82 d0 09 00 00 	mov    %rax,0x9d0(%rdx)
        vkCmdSetVertexInputEXT = PFN_vkCmdSetVertexInputEXT( vkGetDeviceProcAddr( device, "vkCmdSetVertexInputEXT" ) );
   1402f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14033:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14037:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1403b:	48 8d 0d b8 34 01 00 	lea    0x134b8(%rip),%rcx        # 274fa <_ZNSt8__detailL19__atomic_spin_countE+0x1dc6>
   14042:	48 89 ce             	mov    %rcx,%rsi
   14045:	48 89 c7             	mov    %rax,%rdi
   14048:	ff d2                	call   *%rdx
   1404a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1404e:	48 89 82 d8 09 00 00 	mov    %rax,0x9d8(%rdx)
        vkGetRefreshCycleDurationGOOGLE   = PFN_vkGetRefreshCycleDurationGOOGLE( vkGetDeviceProcAddr( device, "vkGetRefreshCycleDurationGOOGLE" ) );
   14055:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14059:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1405d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14061:	48 8d 0d b0 34 01 00 	lea    0x134b0(%rip),%rcx        # 27518 <_ZNSt8__detailL19__atomic_spin_countE+0x1de4>
   14068:	48 89 ce             	mov    %rcx,%rsi
   1406b:	48 89 c7             	mov    %rax,%rdi
   1406e:	ff d2                	call   *%rdx
   14070:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14074:	48 89 82 28 0a 00 00 	mov    %rax,0xa28(%rdx)
        vkGetPastPresentationTimingGOOGLE = PFN_vkGetPastPresentationTimingGOOGLE( vkGetDeviceProcAddr( device, "vkGetPastPresentationTimingGOOGLE" ) );
   1407b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1407f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14083:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14087:	48 8d 0d aa 34 01 00 	lea    0x134aa(%rip),%rcx        # 27538 <_ZNSt8__detailL19__atomic_spin_countE+0x1e04>
   1408e:	48 89 ce             	mov    %rcx,%rsi
   14091:	48 89 c7             	mov    %rax,%rdi
   14094:	ff d2                	call   *%rdx
   14096:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1409a:	48 89 82 30 0a 00 00 	mov    %rax,0xa30(%rdx)
        vkCmdBindInvocationMaskHUAWEI = PFN_vkCmdBindInvocationMaskHUAWEI( vkGetDeviceProcAddr( device, "vkCmdBindInvocationMaskHUAWEI" ) );
   140a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140a5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   140a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140ad:	48 8d 0d a6 34 01 00 	lea    0x134a6(%rip),%rcx        # 2755a <_ZNSt8__detailL19__atomic_spin_countE+0x1e26>
   140b4:	48 89 ce             	mov    %rcx,%rsi
   140b7:	48 89 c7             	mov    %rax,%rdi
   140ba:	ff d2                	call   *%rdx
   140bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   140c0:	48 89 82 38 0a 00 00 	mov    %rax,0xa38(%rdx)
          PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI( vkGetDeviceProcAddr( device, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI" ) );
   140c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140cb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   140cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140d3:	48 8d 0d 9e 34 01 00 	lea    0x1349e(%rip),%rcx        # 27578 <_ZNSt8__detailL19__atomic_spin_countE+0x1e44>
   140da:	48 89 ce             	mov    %rcx,%rsi
   140dd:	48 89 c7             	mov    %rax,%rdi
   140e0:	ff d2                	call   *%rdx
        vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI =
   140e2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   140e6:	48 89 82 40 0a 00 00 	mov    %rax,0xa40(%rdx)
        vkCmdSubpassShadingHUAWEI = PFN_vkCmdSubpassShadingHUAWEI( vkGetDeviceProcAddr( device, "vkCmdSubpassShadingHUAWEI" ) );
   140ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140f1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   140f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140f9:	48 8d 0d a8 34 01 00 	lea    0x134a8(%rip),%rcx        # 275a8 <_ZNSt8__detailL19__atomic_spin_countE+0x1e74>
   14100:	48 89 ce             	mov    %rcx,%rsi
   14103:	48 89 c7             	mov    %rax,%rdi
   14106:	ff d2                	call   *%rdx
   14108:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1410c:	48 89 82 48 0a 00 00 	mov    %rax,0xa48(%rdx)
        vkInitializePerformanceApiINTEL   = PFN_vkInitializePerformanceApiINTEL( vkGetDeviceProcAddr( device, "vkInitializePerformanceApiINTEL" ) );
   14113:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14117:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1411b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1411f:	48 8d 0d a2 34 01 00 	lea    0x134a2(%rip),%rcx        # 275c8 <_ZNSt8__detailL19__atomic_spin_countE+0x1e94>
   14126:	48 89 ce             	mov    %rcx,%rsi
   14129:	48 89 c7             	mov    %rax,%rdi
   1412c:	ff d2                	call   *%rdx
   1412e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14132:	48 89 82 50 0a 00 00 	mov    %rax,0xa50(%rdx)
        vkUninitializePerformanceApiINTEL = PFN_vkUninitializePerformanceApiINTEL( vkGetDeviceProcAddr( device, "vkUninitializePerformanceApiINTEL" ) );
   14139:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1413d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14141:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14145:	48 8d 0d 9c 34 01 00 	lea    0x1349c(%rip),%rcx        # 275e8 <_ZNSt8__detailL19__atomic_spin_countE+0x1eb4>
   1414c:	48 89 ce             	mov    %rcx,%rsi
   1414f:	48 89 c7             	mov    %rax,%rdi
   14152:	ff d2                	call   *%rdx
   14154:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14158:	48 89 82 58 0a 00 00 	mov    %rax,0xa58(%rdx)
        vkCmdSetPerformanceMarkerINTEL    = PFN_vkCmdSetPerformanceMarkerINTEL( vkGetDeviceProcAddr( device, "vkCmdSetPerformanceMarkerINTEL" ) );
   1415f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14163:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14167:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1416b:	48 8d 0d 9e 34 01 00 	lea    0x1349e(%rip),%rcx        # 27610 <_ZNSt8__detailL19__atomic_spin_countE+0x1edc>
   14172:	48 89 ce             	mov    %rcx,%rsi
   14175:	48 89 c7             	mov    %rax,%rdi
   14178:	ff d2                	call   *%rdx
   1417a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1417e:	48 89 82 60 0a 00 00 	mov    %rax,0xa60(%rdx)
          PFN_vkCmdSetPerformanceStreamMarkerINTEL( vkGetDeviceProcAddr( device, "vkCmdSetPerformanceStreamMarkerINTEL" ) );
   14185:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14189:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1418d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14191:	48 8d 0d 98 34 01 00 	lea    0x13498(%rip),%rcx        # 27630 <_ZNSt8__detailL19__atomic_spin_countE+0x1efc>
   14198:	48 89 ce             	mov    %rcx,%rsi
   1419b:	48 89 c7             	mov    %rax,%rdi
   1419e:	ff d2                	call   *%rdx
        vkCmdSetPerformanceStreamMarkerINTEL =
   141a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   141a4:	48 89 82 68 0a 00 00 	mov    %rax,0xa68(%rdx)
        vkCmdSetPerformanceOverrideINTEL = PFN_vkCmdSetPerformanceOverrideINTEL( vkGetDeviceProcAddr( device, "vkCmdSetPerformanceOverrideINTEL" ) );
   141ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141af:	48 8b 50 10          	mov    0x10(%rax),%rdx
   141b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   141b7:	48 8d 0d 9a 34 01 00 	lea    0x1349a(%rip),%rcx        # 27658 <_ZNSt8__detailL19__atomic_spin_countE+0x1f24>
   141be:	48 89 ce             	mov    %rcx,%rsi
   141c1:	48 89 c7             	mov    %rax,%rdi
   141c4:	ff d2                	call   *%rdx
   141c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   141ca:	48 89 82 70 0a 00 00 	mov    %rax,0xa70(%rdx)
          PFN_vkAcquirePerformanceConfigurationINTEL( vkGetDeviceProcAddr( device, "vkAcquirePerformanceConfigurationINTEL" ) );
   141d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   141d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   141dd:	48 8d 0d 9c 34 01 00 	lea    0x1349c(%rip),%rcx        # 27680 <_ZNSt8__detailL19__atomic_spin_countE+0x1f4c>
   141e4:	48 89 ce             	mov    %rcx,%rsi
   141e7:	48 89 c7             	mov    %rax,%rdi
   141ea:	ff d2                	call   *%rdx
        vkAcquirePerformanceConfigurationINTEL =
   141ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   141f0:	48 89 82 78 0a 00 00 	mov    %rax,0xa78(%rdx)
          PFN_vkReleasePerformanceConfigurationINTEL( vkGetDeviceProcAddr( device, "vkReleasePerformanceConfigurationINTEL" ) );
   141f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141fb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   141ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14203:	48 8d 0d 9e 34 01 00 	lea    0x1349e(%rip),%rcx        # 276a8 <_ZNSt8__detailL19__atomic_spin_countE+0x1f74>
   1420a:	48 89 ce             	mov    %rcx,%rsi
   1420d:	48 89 c7             	mov    %rax,%rdi
   14210:	ff d2                	call   *%rdx
        vkReleasePerformanceConfigurationINTEL =
   14212:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14216:	48 89 82 80 0a 00 00 	mov    %rax,0xa80(%rdx)
          PFN_vkQueueSetPerformanceConfigurationINTEL( vkGetDeviceProcAddr( device, "vkQueueSetPerformanceConfigurationINTEL" ) );
   1421d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14221:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14225:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14229:	48 8d 0d a0 34 01 00 	lea    0x134a0(%rip),%rcx        # 276d0 <_ZNSt8__detailL19__atomic_spin_countE+0x1f9c>
   14230:	48 89 ce             	mov    %rcx,%rsi
   14233:	48 89 c7             	mov    %rax,%rdi
   14236:	ff d2                	call   *%rdx
        vkQueueSetPerformanceConfigurationINTEL =
   14238:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1423c:	48 89 82 88 0a 00 00 	mov    %rax,0xa88(%rdx)
        vkGetPerformanceParameterINTEL = PFN_vkGetPerformanceParameterINTEL( vkGetDeviceProcAddr( device, "vkGetPerformanceParameterINTEL" ) );
   14243:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14247:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1424b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1424f:	48 8d 0d a2 34 01 00 	lea    0x134a2(%rip),%rcx        # 276f8 <_ZNSt8__detailL19__atomic_spin_countE+0x1fc4>
   14256:	48 89 ce             	mov    %rcx,%rsi
   14259:	48 89 c7             	mov    %rax,%rdi
   1425c:	ff d2                	call   *%rdx
   1425e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14262:	48 89 82 90 0a 00 00 	mov    %rax,0xa90(%rdx)
        vkCreateAccelerationStructureKHR    = PFN_vkCreateAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCreateAccelerationStructureKHR" ) );
   14269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1426d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14271:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14275:	48 8d 0d 9c 34 01 00 	lea    0x1349c(%rip),%rcx        # 27718 <_ZNSt8__detailL19__atomic_spin_countE+0x1fe4>
   1427c:	48 89 ce             	mov    %rcx,%rsi
   1427f:	48 89 c7             	mov    %rax,%rdi
   14282:	ff d2                	call   *%rdx
   14284:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14288:	48 89 82 98 0a 00 00 	mov    %rax,0xa98(%rdx)
        vkDestroyAccelerationStructureKHR   = PFN_vkDestroyAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkDestroyAccelerationStructureKHR" ) );
   1428f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14293:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14297:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1429b:	48 8d 0d 9e 34 01 00 	lea    0x1349e(%rip),%rcx        # 27740 <_ZNSt8__detailL19__atomic_spin_countE+0x200c>
   142a2:	48 89 ce             	mov    %rcx,%rsi
   142a5:	48 89 c7             	mov    %rax,%rdi
   142a8:	ff d2                	call   *%rdx
   142aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   142ae:	48 89 82 a0 0a 00 00 	mov    %rax,0xaa0(%rdx)
        vkCmdBuildAccelerationStructuresKHR = PFN_vkCmdBuildAccelerationStructuresKHR( vkGetDeviceProcAddr( device, "vkCmdBuildAccelerationStructuresKHR" ) );
   142b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142b9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   142bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   142c1:	48 8d 0d a0 34 01 00 	lea    0x134a0(%rip),%rcx        # 27768 <_ZNSt8__detailL19__atomic_spin_countE+0x2034>
   142c8:	48 89 ce             	mov    %rcx,%rsi
   142cb:	48 89 c7             	mov    %rax,%rdi
   142ce:	ff d2                	call   *%rdx
   142d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   142d4:	48 89 82 a8 0a 00 00 	mov    %rax,0xaa8(%rdx)
          PFN_vkCmdBuildAccelerationStructuresIndirectKHR( vkGetDeviceProcAddr( device, "vkCmdBuildAccelerationStructuresIndirectKHR" ) );
   142db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142df:	48 8b 50 10          	mov    0x10(%rax),%rdx
   142e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   142e7:	48 8d 0d a2 34 01 00 	lea    0x134a2(%rip),%rcx        # 27790 <_ZNSt8__detailL19__atomic_spin_countE+0x205c>
   142ee:	48 89 ce             	mov    %rcx,%rsi
   142f1:	48 89 c7             	mov    %rax,%rdi
   142f4:	ff d2                	call   *%rdx
        vkCmdBuildAccelerationStructuresIndirectKHR =
   142f6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   142fa:	48 89 82 b0 0a 00 00 	mov    %rax,0xab0(%rdx)
        vkBuildAccelerationStructuresKHR = PFN_vkBuildAccelerationStructuresKHR( vkGetDeviceProcAddr( device, "vkBuildAccelerationStructuresKHR" ) );
   14301:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14305:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14309:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1430d:	48 8d 0d ac 34 01 00 	lea    0x134ac(%rip),%rcx        # 277c0 <_ZNSt8__detailL19__atomic_spin_countE+0x208c>
   14314:	48 89 ce             	mov    %rcx,%rsi
   14317:	48 89 c7             	mov    %rax,%rdi
   1431a:	ff d2                	call   *%rdx
   1431c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14320:	48 89 82 b8 0a 00 00 	mov    %rax,0xab8(%rdx)
        vkCopyAccelerationStructureKHR   = PFN_vkCopyAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCopyAccelerationStructureKHR" ) );
   14327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1432b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1432f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14333:	48 8d 0d ae 34 01 00 	lea    0x134ae(%rip),%rcx        # 277e8 <_ZNSt8__detailL19__atomic_spin_countE+0x20b4>
   1433a:	48 89 ce             	mov    %rcx,%rsi
   1433d:	48 89 c7             	mov    %rax,%rdi
   14340:	ff d2                	call   *%rdx
   14342:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14346:	48 89 82 c0 0a 00 00 	mov    %rax,0xac0(%rdx)
          PFN_vkCopyAccelerationStructureToMemoryKHR( vkGetDeviceProcAddr( device, "vkCopyAccelerationStructureToMemoryKHR" ) );
   1434d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14351:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14355:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14359:	48 8d 0d a8 34 01 00 	lea    0x134a8(%rip),%rcx        # 27808 <_ZNSt8__detailL19__atomic_spin_countE+0x20d4>
   14360:	48 89 ce             	mov    %rcx,%rsi
   14363:	48 89 c7             	mov    %rax,%rdi
   14366:	ff d2                	call   *%rdx
        vkCopyAccelerationStructureToMemoryKHR =
   14368:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1436c:	48 89 82 c8 0a 00 00 	mov    %rax,0xac8(%rdx)
          PFN_vkCopyMemoryToAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCopyMemoryToAccelerationStructureKHR" ) );
   14373:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14377:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1437b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1437f:	48 8d 0d aa 34 01 00 	lea    0x134aa(%rip),%rcx        # 27830 <_ZNSt8__detailL19__atomic_spin_countE+0x20fc>
   14386:	48 89 ce             	mov    %rcx,%rsi
   14389:	48 89 c7             	mov    %rax,%rdi
   1438c:	ff d2                	call   *%rdx
        vkCopyMemoryToAccelerationStructureKHR =
   1438e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14392:	48 89 82 d0 0a 00 00 	mov    %rax,0xad0(%rdx)
          PFN_vkWriteAccelerationStructuresPropertiesKHR( vkGetDeviceProcAddr( device, "vkWriteAccelerationStructuresPropertiesKHR" ) );
   14399:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1439d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   143a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   143a5:	48 8d 0d ac 34 01 00 	lea    0x134ac(%rip),%rcx        # 27858 <_ZNSt8__detailL19__atomic_spin_countE+0x2124>
   143ac:	48 89 ce             	mov    %rcx,%rsi
   143af:	48 89 c7             	mov    %rax,%rdi
   143b2:	ff d2                	call   *%rdx
        vkWriteAccelerationStructuresPropertiesKHR =
   143b4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   143b8:	48 89 82 d8 0a 00 00 	mov    %rax,0xad8(%rdx)
        vkCmdCopyAccelerationStructureKHR = PFN_vkCmdCopyAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCmdCopyAccelerationStructureKHR" ) );
   143bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143c3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   143c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   143cb:	48 8d 0d b6 34 01 00 	lea    0x134b6(%rip),%rcx        # 27888 <_ZNSt8__detailL19__atomic_spin_countE+0x2154>
   143d2:	48 89 ce             	mov    %rcx,%rsi
   143d5:	48 89 c7             	mov    %rax,%rdi
   143d8:	ff d2                	call   *%rdx
   143da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   143de:	48 89 82 e0 0a 00 00 	mov    %rax,0xae0(%rdx)
          PFN_vkCmdCopyAccelerationStructureToMemoryKHR( vkGetDeviceProcAddr( device, "vkCmdCopyAccelerationStructureToMemoryKHR" ) );
   143e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   143ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   143f1:	48 8d 0d b8 34 01 00 	lea    0x134b8(%rip),%rcx        # 278b0 <_ZNSt8__detailL19__atomic_spin_countE+0x217c>
   143f8:	48 89 ce             	mov    %rcx,%rsi
   143fb:	48 89 c7             	mov    %rax,%rdi
   143fe:	ff d2                	call   *%rdx
        vkCmdCopyAccelerationStructureToMemoryKHR =
   14400:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14404:	48 89 82 e8 0a 00 00 	mov    %rax,0xae8(%rdx)
          PFN_vkCmdCopyMemoryToAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCmdCopyMemoryToAccelerationStructureKHR" ) );
   1440b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1440f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14413:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14417:	48 8d 0d c2 34 01 00 	lea    0x134c2(%rip),%rcx        # 278e0 <_ZNSt8__detailL19__atomic_spin_countE+0x21ac>
   1441e:	48 89 ce             	mov    %rcx,%rsi
   14421:	48 89 c7             	mov    %rax,%rdi
   14424:	ff d2                	call   *%rdx
        vkCmdCopyMemoryToAccelerationStructureKHR =
   14426:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1442a:	48 89 82 f0 0a 00 00 	mov    %rax,0xaf0(%rdx)
          PFN_vkGetAccelerationStructureDeviceAddressKHR( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureDeviceAddressKHR" ) );
   14431:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14435:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14439:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1443d:	48 8d 0d cc 34 01 00 	lea    0x134cc(%rip),%rcx        # 27910 <_ZNSt8__detailL19__atomic_spin_countE+0x21dc>
   14444:	48 89 ce             	mov    %rcx,%rsi
   14447:	48 89 c7             	mov    %rax,%rdi
   1444a:	ff d2                	call   *%rdx
        vkGetAccelerationStructureDeviceAddressKHR =
   1444c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14450:	48 89 82 f8 0a 00 00 	mov    %rax,0xaf8(%rdx)
          PFN_vkCmdWriteAccelerationStructuresPropertiesKHR( vkGetDeviceProcAddr( device, "vkCmdWriteAccelerationStructuresPropertiesKHR" ) );
   14457:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1445b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1445f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14463:	48 8d 0d d6 34 01 00 	lea    0x134d6(%rip),%rcx        # 27940 <_ZNSt8__detailL19__atomic_spin_countE+0x220c>
   1446a:	48 89 ce             	mov    %rcx,%rsi
   1446d:	48 89 c7             	mov    %rax,%rdi
   14470:	ff d2                	call   *%rdx
        vkCmdWriteAccelerationStructuresPropertiesKHR =
   14472:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14476:	48 89 82 00 0b 00 00 	mov    %rax,0xb00(%rdx)
          PFN_vkGetDeviceAccelerationStructureCompatibilityKHR( vkGetDeviceProcAddr( device, "vkGetDeviceAccelerationStructureCompatibilityKHR" ) );
   1447d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14481:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14485:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14489:	48 8d 0d e0 34 01 00 	lea    0x134e0(%rip),%rcx        # 27970 <_ZNSt8__detailL19__atomic_spin_countE+0x223c>
   14490:	48 89 ce             	mov    %rcx,%rsi
   14493:	48 89 c7             	mov    %rax,%rdi
   14496:	ff d2                	call   *%rdx
        vkGetDeviceAccelerationStructureCompatibilityKHR =
   14498:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1449c:	48 89 82 08 0b 00 00 	mov    %rax,0xb08(%rdx)
          PFN_vkGetAccelerationStructureBuildSizesKHR( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureBuildSizesKHR" ) );
   144a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144a7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   144ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   144af:	48 8d 0d f2 34 01 00 	lea    0x134f2(%rip),%rcx        # 279a8 <_ZNSt8__detailL19__atomic_spin_countE+0x2274>
   144b6:	48 89 ce             	mov    %rcx,%rsi
   144b9:	48 89 c7             	mov    %rax,%rdi
   144bc:	ff d2                	call   *%rdx
        vkGetAccelerationStructureBuildSizesKHR =
   144be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   144c2:	48 89 82 10 0b 00 00 	mov    %rax,0xb10(%rdx)
        vkBindBufferMemory2KHR = PFN_vkBindBufferMemory2KHR( vkGetDeviceProcAddr( device, "vkBindBufferMemory2KHR" ) );
   144c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144cd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   144d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   144d5:	48 8d 0d f4 34 01 00 	lea    0x134f4(%rip),%rcx        # 279d0 <_ZNSt8__detailL19__atomic_spin_countE+0x229c>
   144dc:	48 89 ce             	mov    %rcx,%rsi
   144df:	48 89 c7             	mov    %rax,%rdi
   144e2:	ff d2                	call   *%rdx
   144e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   144e8:	48 89 82 18 0b 00 00 	mov    %rax,0xb18(%rdx)
        if ( !vkBindBufferMemory2 )
   144ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144f3:	48 8b 80 d8 03 00 00 	mov    0x3d8(%rax),%rax
   144fa:	48 85 c0             	test   %rax,%rax
   144fd:	75 16                	jne    14515 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5309>
          vkBindBufferMemory2 = vkBindBufferMemory2KHR;
   144ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14503:	48 8b 90 18 0b 00 00 	mov    0xb18(%rax),%rdx
   1450a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1450e:	48 89 90 d8 03 00 00 	mov    %rdx,0x3d8(%rax)
        vkBindImageMemory2KHR = PFN_vkBindImageMemory2KHR( vkGetDeviceProcAddr( device, "vkBindImageMemory2KHR" ) );
   14515:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14519:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1451d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14521:	48 8d 0d bf 34 01 00 	lea    0x134bf(%rip),%rcx        # 279e7 <_ZNSt8__detailL19__atomic_spin_countE+0x22b3>
   14528:	48 89 ce             	mov    %rcx,%rsi
   1452b:	48 89 c7             	mov    %rax,%rdi
   1452e:	ff d2                	call   *%rdx
   14530:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14534:	48 89 82 20 0b 00 00 	mov    %rax,0xb20(%rdx)
        if ( !vkBindImageMemory2 )
   1453b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1453f:	48 8b 80 e0 03 00 00 	mov    0x3e0(%rax),%rax
   14546:	48 85 c0             	test   %rax,%rax
   14549:	75 16                	jne    14561 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5355>
          vkBindImageMemory2 = vkBindImageMemory2KHR;
   1454b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1454f:	48 8b 90 20 0b 00 00 	mov    0xb20(%rax),%rdx
   14556:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1455a:	48 89 90 e0 03 00 00 	mov    %rdx,0x3e0(%rax)
        vkGetBufferDeviceAddressKHR = PFN_vkGetBufferDeviceAddressKHR( vkGetDeviceProcAddr( device, "vkGetBufferDeviceAddressKHR" ) );
   14561:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14565:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14569:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1456d:	48 8d 0d 89 34 01 00 	lea    0x13489(%rip),%rcx        # 279fd <_ZNSt8__detailL19__atomic_spin_countE+0x22c9>
   14574:	48 89 ce             	mov    %rcx,%rsi
   14577:	48 89 c7             	mov    %rax,%rdi
   1457a:	ff d2                	call   *%rdx
   1457c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14580:	48 89 82 28 0b 00 00 	mov    %rax,0xb28(%rdx)
        if ( !vkGetBufferDeviceAddress )
   14587:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1458b:	48 8b 80 a8 04 00 00 	mov    0x4a8(%rax),%rax
   14592:	48 85 c0             	test   %rax,%rax
   14595:	75 16                	jne    145ad <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x53a1>
          vkGetBufferDeviceAddress = vkGetBufferDeviceAddressKHR;
   14597:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1459b:	48 8b 90 28 0b 00 00 	mov    0xb28(%rax),%rdx
   145a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145a6:	48 89 90 a8 04 00 00 	mov    %rdx,0x4a8(%rax)
        vkGetBufferOpaqueCaptureAddressKHR = PFN_vkGetBufferOpaqueCaptureAddressKHR( vkGetDeviceProcAddr( device, "vkGetBufferOpaqueCaptureAddressKHR" ) );
   145ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145b1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   145b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   145b9:	48 8d 0d 60 34 01 00 	lea    0x13460(%rip),%rcx        # 27a20 <_ZNSt8__detailL19__atomic_spin_countE+0x22ec>
   145c0:	48 89 ce             	mov    %rcx,%rsi
   145c3:	48 89 c7             	mov    %rax,%rdi
   145c6:	ff d2                	call   *%rdx
   145c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   145cc:	48 89 82 30 0b 00 00 	mov    %rax,0xb30(%rdx)
        if ( !vkGetBufferOpaqueCaptureAddress )
   145d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145d7:	48 8b 80 b0 04 00 00 	mov    0x4b0(%rax),%rax
   145de:	48 85 c0             	test   %rax,%rax
   145e1:	75 16                	jne    145f9 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x53ed>
          vkGetBufferOpaqueCaptureAddress = vkGetBufferOpaqueCaptureAddressKHR;
   145e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145e7:	48 8b 90 30 0b 00 00 	mov    0xb30(%rax),%rdx
   145ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145f2:	48 89 90 b0 04 00 00 	mov    %rdx,0x4b0(%rax)
          PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR( vkGetDeviceProcAddr( device, "vkGetDeviceMemoryOpaqueCaptureAddressKHR" ) );
   145f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145fd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14601:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14605:	48 8d 0d 3c 34 01 00 	lea    0x1343c(%rip),%rcx        # 27a48 <_ZNSt8__detailL19__atomic_spin_countE+0x2314>
   1460c:	48 89 ce             	mov    %rcx,%rsi
   1460f:	48 89 c7             	mov    %rax,%rdi
   14612:	ff d2                	call   *%rdx
        vkGetDeviceMemoryOpaqueCaptureAddressKHR =
   14614:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14618:	48 89 82 38 0b 00 00 	mov    %rax,0xb38(%rdx)
        if ( !vkGetDeviceMemoryOpaqueCaptureAddress )
   1461f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14623:	48 8b 80 b8 04 00 00 	mov    0x4b8(%rax),%rax
   1462a:	48 85 c0             	test   %rax,%rax
   1462d:	75 16                	jne    14645 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5439>
          vkGetDeviceMemoryOpaqueCaptureAddress = vkGetDeviceMemoryOpaqueCaptureAddressKHR;
   1462f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14633:	48 8b 90 38 0b 00 00 	mov    0xb38(%rax),%rdx
   1463a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1463e:	48 89 90 b8 04 00 00 	mov    %rdx,0x4b8(%rax)
        vkCmdCopyBuffer2KHR = PFN_vkCmdCopyBuffer2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyBuffer2KHR" ) );
   14645:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14649:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1464d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14651:	48 8d 0d 19 34 01 00 	lea    0x13419(%rip),%rcx        # 27a71 <_ZNSt8__detailL19__atomic_spin_countE+0x233d>
   14658:	48 89 ce             	mov    %rcx,%rsi
   1465b:	48 89 c7             	mov    %rax,%rdi
   1465e:	ff d2                	call   *%rdx
   14660:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14664:	48 89 82 40 0b 00 00 	mov    %rax,0xb40(%rdx)
        if ( !vkCmdCopyBuffer2 )
   1466b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1466f:	48 8b 80 10 05 00 00 	mov    0x510(%rax),%rax
   14676:	48 85 c0             	test   %rax,%rax
   14679:	75 16                	jne    14691 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5485>
          vkCmdCopyBuffer2 = vkCmdCopyBuffer2KHR;
   1467b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1467f:	48 8b 90 40 0b 00 00 	mov    0xb40(%rax),%rdx
   14686:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1468a:	48 89 90 10 05 00 00 	mov    %rdx,0x510(%rax)
        vkCmdCopyImage2KHR = PFN_vkCmdCopyImage2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyImage2KHR" ) );
   14691:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14695:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14699:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1469d:	48 8d 0d e1 33 01 00 	lea    0x133e1(%rip),%rcx        # 27a85 <_ZNSt8__detailL19__atomic_spin_countE+0x2351>
   146a4:	48 89 ce             	mov    %rcx,%rsi
   146a7:	48 89 c7             	mov    %rax,%rdi
   146aa:	ff d2                	call   *%rdx
   146ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   146b0:	48 89 82 48 0b 00 00 	mov    %rax,0xb48(%rdx)
        if ( !vkCmdCopyImage2 )
   146b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146bb:	48 8b 80 18 05 00 00 	mov    0x518(%rax),%rax
   146c2:	48 85 c0             	test   %rax,%rax
   146c5:	75 16                	jne    146dd <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x54d1>
          vkCmdCopyImage2 = vkCmdCopyImage2KHR;
   146c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146cb:	48 8b 90 48 0b 00 00 	mov    0xb48(%rax),%rdx
   146d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146d6:	48 89 90 18 05 00 00 	mov    %rdx,0x518(%rax)
        vkCmdCopyBufferToImage2KHR = PFN_vkCmdCopyBufferToImage2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyBufferToImage2KHR" ) );
   146dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146e1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   146e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   146e9:	48 8d 0d a8 33 01 00 	lea    0x133a8(%rip),%rcx        # 27a98 <_ZNSt8__detailL19__atomic_spin_countE+0x2364>
   146f0:	48 89 ce             	mov    %rcx,%rsi
   146f3:	48 89 c7             	mov    %rax,%rdi
   146f6:	ff d2                	call   *%rdx
   146f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   146fc:	48 89 82 50 0b 00 00 	mov    %rax,0xb50(%rdx)
        if ( !vkCmdCopyBufferToImage2 )
   14703:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14707:	48 8b 80 20 05 00 00 	mov    0x520(%rax),%rax
   1470e:	48 85 c0             	test   %rax,%rax
   14711:	75 16                	jne    14729 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x551d>
          vkCmdCopyBufferToImage2 = vkCmdCopyBufferToImage2KHR;
   14713:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14717:	48 8b 90 50 0b 00 00 	mov    0xb50(%rax),%rdx
   1471e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14722:	48 89 90 20 05 00 00 	mov    %rdx,0x520(%rax)
        vkCmdCopyImageToBuffer2KHR = PFN_vkCmdCopyImageToBuffer2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyImageToBuffer2KHR" ) );
   14729:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1472d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14731:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14735:	48 8d 0d 77 33 01 00 	lea    0x13377(%rip),%rcx        # 27ab3 <_ZNSt8__detailL19__atomic_spin_countE+0x237f>
   1473c:	48 89 ce             	mov    %rcx,%rsi
   1473f:	48 89 c7             	mov    %rax,%rdi
   14742:	ff d2                	call   *%rdx
   14744:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14748:	48 89 82 58 0b 00 00 	mov    %rax,0xb58(%rdx)
        if ( !vkCmdCopyImageToBuffer2 )
   1474f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14753:	48 8b 80 28 05 00 00 	mov    0x528(%rax),%rax
   1475a:	48 85 c0             	test   %rax,%rax
   1475d:	75 16                	jne    14775 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5569>
          vkCmdCopyImageToBuffer2 = vkCmdCopyImageToBuffer2KHR;
   1475f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14763:	48 8b 90 58 0b 00 00 	mov    0xb58(%rax),%rdx
   1476a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1476e:	48 89 90 28 05 00 00 	mov    %rdx,0x528(%rax)
        vkCmdBlitImage2KHR = PFN_vkCmdBlitImage2KHR( vkGetDeviceProcAddr( device, "vkCmdBlitImage2KHR" ) );
   14775:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14779:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1477d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14781:	48 8d 0d 46 33 01 00 	lea    0x13346(%rip),%rcx        # 27ace <_ZNSt8__detailL19__atomic_spin_countE+0x239a>
   14788:	48 89 ce             	mov    %rcx,%rsi
   1478b:	48 89 c7             	mov    %rax,%rdi
   1478e:	ff d2                	call   *%rdx
   14790:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14794:	48 89 82 60 0b 00 00 	mov    %rax,0xb60(%rdx)
        if ( !vkCmdBlitImage2 )
   1479b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1479f:	48 8b 80 30 05 00 00 	mov    0x530(%rax),%rax
   147a6:	48 85 c0             	test   %rax,%rax
   147a9:	75 16                	jne    147c1 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x55b5>
          vkCmdBlitImage2 = vkCmdBlitImage2KHR;
   147ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147af:	48 8b 90 60 0b 00 00 	mov    0xb60(%rax),%rdx
   147b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147ba:	48 89 90 30 05 00 00 	mov    %rdx,0x530(%rax)
        vkCmdResolveImage2KHR = PFN_vkCmdResolveImage2KHR( vkGetDeviceProcAddr( device, "vkCmdResolveImage2KHR" ) );
   147c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147c5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   147c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   147cd:	48 8d 0d 0d 33 01 00 	lea    0x1330d(%rip),%rcx        # 27ae1 <_ZNSt8__detailL19__atomic_spin_countE+0x23ad>
   147d4:	48 89 ce             	mov    %rcx,%rsi
   147d7:	48 89 c7             	mov    %rax,%rdi
   147da:	ff d2                	call   *%rdx
   147dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   147e0:	48 89 82 68 0b 00 00 	mov    %rax,0xb68(%rdx)
        if ( !vkCmdResolveImage2 )
   147e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147eb:	48 8b 80 38 05 00 00 	mov    0x538(%rax),%rax
   147f2:	48 85 c0             	test   %rax,%rax
   147f5:	75 16                	jne    1480d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5601>
          vkCmdResolveImage2 = vkCmdResolveImage2KHR;
   147f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147fb:	48 8b 90 68 0b 00 00 	mov    0xb68(%rax),%rdx
   14802:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14806:	48 89 90 38 05 00 00 	mov    %rdx,0x538(%rax)
        vkCreateRenderPass2KHR = PFN_vkCreateRenderPass2KHR( vkGetDeviceProcAddr( device, "vkCreateRenderPass2KHR" ) );
   1480d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14811:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14815:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14819:	48 8d 0d d7 32 01 00 	lea    0x132d7(%rip),%rcx        # 27af7 <_ZNSt8__detailL19__atomic_spin_countE+0x23c3>
   14820:	48 89 ce             	mov    %rcx,%rsi
   14823:	48 89 c7             	mov    %rax,%rdi
   14826:	ff d2                	call   *%rdx
   14828:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1482c:	48 89 82 70 0b 00 00 	mov    %rax,0xb70(%rdx)
        if ( !vkCreateRenderPass2 )
   14833:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14837:	48 8b 80 68 04 00 00 	mov    0x468(%rax),%rax
   1483e:	48 85 c0             	test   %rax,%rax
   14841:	75 16                	jne    14859 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x564d>
          vkCreateRenderPass2 = vkCreateRenderPass2KHR;
   14843:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14847:	48 8b 90 70 0b 00 00 	mov    0xb70(%rax),%rdx
   1484e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14852:	48 89 90 68 04 00 00 	mov    %rdx,0x468(%rax)
        vkCmdBeginRenderPass2KHR = PFN_vkCmdBeginRenderPass2KHR( vkGetDeviceProcAddr( device, "vkCmdBeginRenderPass2KHR" ) );
   14859:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1485d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14861:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14865:	48 8d 0d a2 32 01 00 	lea    0x132a2(%rip),%rcx        # 27b0e <_ZNSt8__detailL19__atomic_spin_countE+0x23da>
   1486c:	48 89 ce             	mov    %rcx,%rsi
   1486f:	48 89 c7             	mov    %rax,%rdi
   14872:	ff d2                	call   *%rdx
   14874:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14878:	48 89 82 78 0b 00 00 	mov    %rax,0xb78(%rdx)
        if ( !vkCmdBeginRenderPass2 )
   1487f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14883:	48 8b 80 70 04 00 00 	mov    0x470(%rax),%rax
   1488a:	48 85 c0             	test   %rax,%rax
   1488d:	75 16                	jne    148a5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5699>
          vkCmdBeginRenderPass2 = vkCmdBeginRenderPass2KHR;
   1488f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14893:	48 8b 90 78 0b 00 00 	mov    0xb78(%rax),%rdx
   1489a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1489e:	48 89 90 70 04 00 00 	mov    %rdx,0x470(%rax)
        vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2KHR( vkGetDeviceProcAddr( device, "vkCmdNextSubpass2KHR" ) );
   148a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148a9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   148ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   148b1:	48 8d 0d 6f 32 01 00 	lea    0x1326f(%rip),%rcx        # 27b27 <_ZNSt8__detailL19__atomic_spin_countE+0x23f3>
   148b8:	48 89 ce             	mov    %rcx,%rsi
   148bb:	48 89 c7             	mov    %rax,%rdi
   148be:	ff d2                	call   *%rdx
   148c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   148c4:	48 89 82 80 0b 00 00 	mov    %rax,0xb80(%rdx)
        if ( !vkCmdNextSubpass2 )
   148cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148cf:	48 8b 80 78 04 00 00 	mov    0x478(%rax),%rax
   148d6:	48 85 c0             	test   %rax,%rax
   148d9:	75 16                	jne    148f1 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x56e5>
          vkCmdNextSubpass2 = vkCmdNextSubpass2KHR;
   148db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148df:	48 8b 90 80 0b 00 00 	mov    0xb80(%rax),%rdx
   148e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148ea:	48 89 90 78 04 00 00 	mov    %rdx,0x478(%rax)
        vkCmdEndRenderPass2KHR = PFN_vkCmdEndRenderPass2KHR( vkGetDeviceProcAddr( device, "vkCmdEndRenderPass2KHR" ) );
   148f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148f5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   148f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   148fd:	48 8d 0d 38 32 01 00 	lea    0x13238(%rip),%rcx        # 27b3c <_ZNSt8__detailL19__atomic_spin_countE+0x2408>
   14904:	48 89 ce             	mov    %rcx,%rsi
   14907:	48 89 c7             	mov    %rax,%rdi
   1490a:	ff d2                	call   *%rdx
   1490c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14910:	48 89 82 88 0b 00 00 	mov    %rax,0xb88(%rdx)
        if ( !vkCmdEndRenderPass2 )
   14917:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1491b:	48 8b 80 80 04 00 00 	mov    0x480(%rax),%rax
   14922:	48 85 c0             	test   %rax,%rax
   14925:	75 16                	jne    1493d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5731>
          vkCmdEndRenderPass2 = vkCmdEndRenderPass2KHR;
   14927:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1492b:	48 8b 90 88 0b 00 00 	mov    0xb88(%rax),%rdx
   14932:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14936:	48 89 90 80 04 00 00 	mov    %rdx,0x480(%rax)
        vkCreateDeferredOperationKHR  = PFN_vkCreateDeferredOperationKHR( vkGetDeviceProcAddr( device, "vkCreateDeferredOperationKHR" ) );
   1493d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14941:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14945:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14949:	48 8d 0d 03 32 01 00 	lea    0x13203(%rip),%rcx        # 27b53 <_ZNSt8__detailL19__atomic_spin_countE+0x241f>
   14950:	48 89 ce             	mov    %rcx,%rsi
   14953:	48 89 c7             	mov    %rax,%rdi
   14956:	ff d2                	call   *%rdx
   14958:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1495c:	48 89 82 90 0b 00 00 	mov    %rax,0xb90(%rdx)
        vkDestroyDeferredOperationKHR = PFN_vkDestroyDeferredOperationKHR( vkGetDeviceProcAddr( device, "vkDestroyDeferredOperationKHR" ) );
   14963:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14967:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1496b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1496f:	48 8d 0d fa 31 01 00 	lea    0x131fa(%rip),%rcx        # 27b70 <_ZNSt8__detailL19__atomic_spin_countE+0x243c>
   14976:	48 89 ce             	mov    %rcx,%rsi
   14979:	48 89 c7             	mov    %rax,%rdi
   1497c:	ff d2                	call   *%rdx
   1497e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14982:	48 89 82 98 0b 00 00 	mov    %rax,0xb98(%rdx)
          PFN_vkGetDeferredOperationMaxConcurrencyKHR( vkGetDeviceProcAddr( device, "vkGetDeferredOperationMaxConcurrencyKHR" ) );
   14989:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1498d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14991:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14995:	48 8d 0d f4 31 01 00 	lea    0x131f4(%rip),%rcx        # 27b90 <_ZNSt8__detailL19__atomic_spin_countE+0x245c>
   1499c:	48 89 ce             	mov    %rcx,%rsi
   1499f:	48 89 c7             	mov    %rax,%rdi
   149a2:	ff d2                	call   *%rdx
        vkGetDeferredOperationMaxConcurrencyKHR =
   149a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   149a8:	48 89 82 a0 0b 00 00 	mov    %rax,0xba0(%rdx)
        vkGetDeferredOperationResultKHR = PFN_vkGetDeferredOperationResultKHR( vkGetDeviceProcAddr( device, "vkGetDeferredOperationResultKHR" ) );
   149af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149b3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   149b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   149bb:	48 8d 0d f6 31 01 00 	lea    0x131f6(%rip),%rcx        # 27bb8 <_ZNSt8__detailL19__atomic_spin_countE+0x2484>
   149c2:	48 89 ce             	mov    %rcx,%rsi
   149c5:	48 89 c7             	mov    %rax,%rdi
   149c8:	ff d2                	call   *%rdx
   149ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   149ce:	48 89 82 a8 0b 00 00 	mov    %rax,0xba8(%rdx)
        vkDeferredOperationJoinKHR      = PFN_vkDeferredOperationJoinKHR( vkGetDeviceProcAddr( device, "vkDeferredOperationJoinKHR" ) );
   149d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   149dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   149e1:	48 8d 0d f0 31 01 00 	lea    0x131f0(%rip),%rcx        # 27bd8 <_ZNSt8__detailL19__atomic_spin_countE+0x24a4>
   149e8:	48 89 ce             	mov    %rcx,%rsi
   149eb:	48 89 c7             	mov    %rax,%rdi
   149ee:	ff d2                	call   *%rdx
   149f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   149f4:	48 89 82 b0 0b 00 00 	mov    %rax,0xbb0(%rdx)
        vkCreateDescriptorUpdateTemplateKHR = PFN_vkCreateDescriptorUpdateTemplateKHR( vkGetDeviceProcAddr( device, "vkCreateDescriptorUpdateTemplateKHR" ) );
   149fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149ff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a07:	48 8d 0d ea 31 01 00 	lea    0x131ea(%rip),%rcx        # 27bf8 <_ZNSt8__detailL19__atomic_spin_countE+0x24c4>
   14a0e:	48 89 ce             	mov    %rcx,%rsi
   14a11:	48 89 c7             	mov    %rax,%rdi
   14a14:	ff d2                	call   *%rdx
   14a16:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a1a:	48 89 82 b8 0b 00 00 	mov    %rax,0xbb8(%rdx)
        if ( !vkCreateDescriptorUpdateTemplate )
   14a21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a25:	48 8b 80 38 04 00 00 	mov    0x438(%rax),%rax
   14a2c:	48 85 c0             	test   %rax,%rax
   14a2f:	75 16                	jne    14a47 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x583b>
          vkCreateDescriptorUpdateTemplate = vkCreateDescriptorUpdateTemplateKHR;
   14a31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a35:	48 8b 90 b8 0b 00 00 	mov    0xbb8(%rax),%rdx
   14a3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a40:	48 89 90 38 04 00 00 	mov    %rdx,0x438(%rax)
          PFN_vkDestroyDescriptorUpdateTemplateKHR( vkGetDeviceProcAddr( device, "vkDestroyDescriptorUpdateTemplateKHR" ) );
   14a47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a4b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a53:	48 8d 0d c6 31 01 00 	lea    0x131c6(%rip),%rcx        # 27c20 <_ZNSt8__detailL19__atomic_spin_countE+0x24ec>
   14a5a:	48 89 ce             	mov    %rcx,%rsi
   14a5d:	48 89 c7             	mov    %rax,%rdi
   14a60:	ff d2                	call   *%rdx
        vkDestroyDescriptorUpdateTemplateKHR =
   14a62:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a66:	48 89 82 c0 0b 00 00 	mov    %rax,0xbc0(%rdx)
        if ( !vkDestroyDescriptorUpdateTemplate )
   14a6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a71:	48 8b 80 40 04 00 00 	mov    0x440(%rax),%rax
   14a78:	48 85 c0             	test   %rax,%rax
   14a7b:	75 16                	jne    14a93 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5887>
          vkDestroyDescriptorUpdateTemplate = vkDestroyDescriptorUpdateTemplateKHR;
   14a7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a81:	48 8b 90 c0 0b 00 00 	mov    0xbc0(%rax),%rdx
   14a88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a8c:	48 89 90 40 04 00 00 	mov    %rdx,0x440(%rax)
          PFN_vkUpdateDescriptorSetWithTemplateKHR( vkGetDeviceProcAddr( device, "vkUpdateDescriptorSetWithTemplateKHR" ) );
   14a93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a97:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a9f:	48 8d 0d a2 31 01 00 	lea    0x131a2(%rip),%rcx        # 27c48 <_ZNSt8__detailL19__atomic_spin_countE+0x2514>
   14aa6:	48 89 ce             	mov    %rcx,%rsi
   14aa9:	48 89 c7             	mov    %rax,%rdi
   14aac:	ff d2                	call   *%rdx
        vkUpdateDescriptorSetWithTemplateKHR =
   14aae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14ab2:	48 89 82 c8 0b 00 00 	mov    %rax,0xbc8(%rdx)
        if ( !vkUpdateDescriptorSetWithTemplate )
   14ab9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14abd:	48 8b 80 48 04 00 00 	mov    0x448(%rax),%rax
   14ac4:	48 85 c0             	test   %rax,%rax
   14ac7:	75 16                	jne    14adf <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x58d3>
          vkUpdateDescriptorSetWithTemplate = vkUpdateDescriptorSetWithTemplateKHR;
   14ac9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14acd:	48 8b 90 c8 0b 00 00 	mov    0xbc8(%rax),%rdx
   14ad4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ad8:	48 89 90 48 04 00 00 	mov    %rdx,0x448(%rax)
          PFN_vkCmdPushDescriptorSetWithTemplateKHR( vkGetDeviceProcAddr( device, "vkCmdPushDescriptorSetWithTemplateKHR" ) );
   14adf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ae3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ae7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14aeb:	48 8d 0d 7e 31 01 00 	lea    0x1317e(%rip),%rcx        # 27c70 <_ZNSt8__detailL19__atomic_spin_countE+0x253c>
   14af2:	48 89 ce             	mov    %rcx,%rsi
   14af5:	48 89 c7             	mov    %rax,%rdi
   14af8:	ff d2                	call   *%rdx
        vkCmdPushDescriptorSetWithTemplateKHR =
   14afa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14afe:	48 89 82 d0 0b 00 00 	mov    %rax,0xbd0(%rdx)
          PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR( vkGetDeviceProcAddr( device, "vkGetDeviceGroupPeerMemoryFeaturesKHR" ) );
   14b05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b09:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14b0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14b11:	48 8d 0d 80 31 01 00 	lea    0x13180(%rip),%rcx        # 27c98 <_ZNSt8__detailL19__atomic_spin_countE+0x2564>
   14b18:	48 89 ce             	mov    %rcx,%rsi
   14b1b:	48 89 c7             	mov    %rax,%rdi
   14b1e:	ff d2                	call   *%rdx
        vkGetDeviceGroupPeerMemoryFeaturesKHR =
   14b20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14b24:	48 89 82 d8 0b 00 00 	mov    %rax,0xbd8(%rdx)
        if ( !vkGetDeviceGroupPeerMemoryFeatures )
   14b2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b2f:	48 8b 80 e8 03 00 00 	mov    0x3e8(%rax),%rax
   14b36:	48 85 c0             	test   %rax,%rax
   14b39:	75 16                	jne    14b51 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5945>
          vkGetDeviceGroupPeerMemoryFeatures = vkGetDeviceGroupPeerMemoryFeaturesKHR;
   14b3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b3f:	48 8b 90 d8 0b 00 00 	mov    0xbd8(%rax),%rdx
   14b46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b4a:	48 89 90 e8 03 00 00 	mov    %rdx,0x3e8(%rax)
        vkCmdSetDeviceMaskKHR = PFN_vkCmdSetDeviceMaskKHR( vkGetDeviceProcAddr( device, "vkCmdSetDeviceMaskKHR" ) );
   14b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b55:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14b59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14b5d:	48 8d 0d 5a 31 01 00 	lea    0x1315a(%rip),%rcx        # 27cbe <_ZNSt8__detailL19__atomic_spin_countE+0x258a>
   14b64:	48 89 ce             	mov    %rcx,%rsi
   14b67:	48 89 c7             	mov    %rax,%rdi
   14b6a:	ff d2                	call   *%rdx
   14b6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14b70:	48 89 82 e0 0b 00 00 	mov    %rax,0xbe0(%rdx)
        if ( !vkCmdSetDeviceMask )
   14b77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b7b:	48 8b 80 f0 03 00 00 	mov    0x3f0(%rax),%rax
   14b82:	48 85 c0             	test   %rax,%rax
   14b85:	75 16                	jne    14b9d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5991>
          vkCmdSetDeviceMask = vkCmdSetDeviceMaskKHR;
   14b87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b8b:	48 8b 90 e0 0b 00 00 	mov    0xbe0(%rax),%rdx
   14b92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b96:	48 89 90 f0 03 00 00 	mov    %rdx,0x3f0(%rax)
        vkCmdDispatchBaseKHR = PFN_vkCmdDispatchBaseKHR( vkGetDeviceProcAddr( device, "vkCmdDispatchBaseKHR" ) );
   14b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ba1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ba5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ba9:	48 8d 0d 24 31 01 00 	lea    0x13124(%rip),%rcx        # 27cd4 <_ZNSt8__detailL19__atomic_spin_countE+0x25a0>
   14bb0:	48 89 ce             	mov    %rcx,%rsi
   14bb3:	48 89 c7             	mov    %rax,%rdi
   14bb6:	ff d2                	call   *%rdx
   14bb8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14bbc:	48 89 82 e8 0b 00 00 	mov    %rax,0xbe8(%rdx)
        if ( !vkCmdDispatchBase )
   14bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14bc7:	48 8b 80 f8 03 00 00 	mov    0x3f8(%rax),%rax
   14bce:	48 85 c0             	test   %rax,%rax
   14bd1:	75 16                	jne    14be9 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x59dd>
          vkCmdDispatchBase = vkCmdDispatchBaseKHR;
   14bd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14bd7:	48 8b 90 e8 0b 00 00 	mov    0xbe8(%rax),%rdx
   14bde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14be2:	48 89 90 f8 03 00 00 	mov    %rdx,0x3f8(%rax)
          PFN_vkGetDeviceGroupPresentCapabilitiesKHR( vkGetDeviceProcAddr( device, "vkGetDeviceGroupPresentCapabilitiesKHR" ) );
   14be9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14bed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14bf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14bf5:	48 8d 0d f4 30 01 00 	lea    0x130f4(%rip),%rcx        # 27cf0 <_ZNSt8__detailL19__atomic_spin_countE+0x25bc>
   14bfc:	48 89 ce             	mov    %rcx,%rsi
   14bff:	48 89 c7             	mov    %rax,%rdi
   14c02:	ff d2                	call   *%rdx
        vkGetDeviceGroupPresentCapabilitiesKHR =
   14c04:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c08:	48 89 82 f0 0b 00 00 	mov    %rax,0xbf0(%rdx)
          PFN_vkGetDeviceGroupSurfacePresentModesKHR( vkGetDeviceProcAddr( device, "vkGetDeviceGroupSurfacePresentModesKHR" ) );
   14c0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c13:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c1b:	48 8d 0d f6 30 01 00 	lea    0x130f6(%rip),%rcx        # 27d18 <_ZNSt8__detailL19__atomic_spin_countE+0x25e4>
   14c22:	48 89 ce             	mov    %rcx,%rsi
   14c25:	48 89 c7             	mov    %rax,%rdi
   14c28:	ff d2                	call   *%rdx
        vkGetDeviceGroupSurfacePresentModesKHR =
   14c2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c2e:	48 89 82 f8 0b 00 00 	mov    %rax,0xbf8(%rdx)
        vkAcquireNextImage2KHR = PFN_vkAcquireNextImage2KHR( vkGetDeviceProcAddr( device, "vkAcquireNextImage2KHR" ) );
   14c35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c39:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c41:	48 8d 0d f7 30 01 00 	lea    0x130f7(%rip),%rcx        # 27d3f <_ZNSt8__detailL19__atomic_spin_countE+0x260b>
   14c48:	48 89 ce             	mov    %rcx,%rsi
   14c4b:	48 89 c7             	mov    %rax,%rdi
   14c4e:	ff d2                	call   *%rdx
   14c50:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c54:	48 89 82 00 0c 00 00 	mov    %rax,0xc00(%rdx)
        vkCreateSharedSwapchainsKHR = PFN_vkCreateSharedSwapchainsKHR( vkGetDeviceProcAddr( device, "vkCreateSharedSwapchainsKHR" ) );
   14c5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c5f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c67:	48 8d 0d e8 30 01 00 	lea    0x130e8(%rip),%rcx        # 27d56 <_ZNSt8__detailL19__atomic_spin_countE+0x2622>
   14c6e:	48 89 ce             	mov    %rcx,%rsi
   14c71:	48 89 c7             	mov    %rax,%rdi
   14c74:	ff d2                	call   *%rdx
   14c76:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c7a:	48 89 82 08 0c 00 00 	mov    %rax,0xc08(%rdx)
        vkCmdDrawIndirectCountKHR = PFN_vkCmdDrawIndirectCountKHR( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectCountKHR" ) );
   14c81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c85:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c8d:	48 8d 0d de 30 01 00 	lea    0x130de(%rip),%rcx        # 27d72 <_ZNSt8__detailL19__atomic_spin_countE+0x263e>
   14c94:	48 89 ce             	mov    %rcx,%rsi
   14c97:	48 89 c7             	mov    %rax,%rdi
   14c9a:	ff d2                	call   *%rdx
   14c9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14ca0:	48 89 82 10 0c 00 00 	mov    %rax,0xc10(%rdx)
        if ( !vkCmdDrawIndirectCount )
   14ca7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cab:	48 8b 80 58 04 00 00 	mov    0x458(%rax),%rax
   14cb2:	48 85 c0             	test   %rax,%rax
   14cb5:	75 16                	jne    14ccd <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ac1>
          vkCmdDrawIndirectCount = vkCmdDrawIndirectCountKHR;
   14cb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cbb:	48 8b 90 10 0c 00 00 	mov    0xc10(%rax),%rdx
   14cc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cc6:	48 89 90 58 04 00 00 	mov    %rdx,0x458(%rax)
        vkCmdDrawIndexedIndirectCountKHR = PFN_vkCmdDrawIndexedIndirectCountKHR( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirectCountKHR" ) );
   14ccd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cd1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14cd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14cd9:	48 8d 0d b0 30 01 00 	lea    0x130b0(%rip),%rcx        # 27d90 <_ZNSt8__detailL19__atomic_spin_countE+0x265c>
   14ce0:	48 89 ce             	mov    %rcx,%rsi
   14ce3:	48 89 c7             	mov    %rax,%rdi
   14ce6:	ff d2                	call   *%rdx
   14ce8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14cec:	48 89 82 18 0c 00 00 	mov    %rax,0xc18(%rdx)
        if ( !vkCmdDrawIndexedIndirectCount )
   14cf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cf7:	48 8b 80 60 04 00 00 	mov    0x460(%rax),%rax
   14cfe:	48 85 c0             	test   %rax,%rax
   14d01:	75 16                	jne    14d19 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5b0d>
          vkCmdDrawIndexedIndirectCount = vkCmdDrawIndexedIndirectCountKHR;
   14d03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d07:	48 8b 90 18 0c 00 00 	mov    0xc18(%rax),%rdx
   14d0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d12:	48 89 90 60 04 00 00 	mov    %rdx,0x460(%rax)
        vkCmdBeginRenderingKHR = PFN_vkCmdBeginRenderingKHR( vkGetDeviceProcAddr( device, "vkCmdBeginRenderingKHR" ) );
   14d19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d1d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14d21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d25:	48 8d 0d 85 30 01 00 	lea    0x13085(%rip),%rcx        # 27db1 <_ZNSt8__detailL19__atomic_spin_countE+0x267d>
   14d2c:	48 89 ce             	mov    %rcx,%rsi
   14d2f:	48 89 c7             	mov    %rax,%rdi
   14d32:	ff d2                	call   *%rdx
   14d34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14d38:	48 89 82 20 0c 00 00 	mov    %rax,0xc20(%rdx)
        if ( !vkCmdBeginRendering )
   14d3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d43:	48 8b 80 40 05 00 00 	mov    0x540(%rax),%rax
   14d4a:	48 85 c0             	test   %rax,%rax
   14d4d:	75 16                	jne    14d65 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5b59>
          vkCmdBeginRendering = vkCmdBeginRenderingKHR;
   14d4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d53:	48 8b 90 20 0c 00 00 	mov    0xc20(%rax),%rdx
   14d5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d5e:	48 89 90 40 05 00 00 	mov    %rdx,0x540(%rax)
        vkCmdEndRenderingKHR = PFN_vkCmdEndRenderingKHR( vkGetDeviceProcAddr( device, "vkCmdEndRenderingKHR" ) );
   14d65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d69:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14d6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d71:	48 8d 0d 50 30 01 00 	lea    0x13050(%rip),%rcx        # 27dc8 <_ZNSt8__detailL19__atomic_spin_countE+0x2694>
   14d78:	48 89 ce             	mov    %rcx,%rsi
   14d7b:	48 89 c7             	mov    %rax,%rdi
   14d7e:	ff d2                	call   *%rdx
   14d80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14d84:	48 89 82 28 0c 00 00 	mov    %rax,0xc28(%rdx)
        if ( !vkCmdEndRendering )
   14d8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d8f:	48 8b 80 48 05 00 00 	mov    0x548(%rax),%rax
   14d96:	48 85 c0             	test   %rax,%rax
   14d99:	75 16                	jne    14db1 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ba5>
          vkCmdEndRendering = vkCmdEndRenderingKHR;
   14d9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d9f:	48 8b 90 28 0c 00 00 	mov    0xc28(%rax),%rdx
   14da6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14daa:	48 89 90 48 05 00 00 	mov    %rdx,0x548(%rax)
        vkImportFenceFdKHR = PFN_vkImportFenceFdKHR( vkGetDeviceProcAddr( device, "vkImportFenceFdKHR" ) );
   14db1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14db5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14db9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14dbd:	48 8d 0d 19 30 01 00 	lea    0x13019(%rip),%rcx        # 27ddd <_ZNSt8__detailL19__atomic_spin_countE+0x26a9>
   14dc4:	48 89 ce             	mov    %rcx,%rsi
   14dc7:	48 89 c7             	mov    %rax,%rdi
   14dca:	ff d2                	call   *%rdx
   14dcc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14dd0:	48 89 82 30 0c 00 00 	mov    %rax,0xc30(%rdx)
        vkGetFenceFdKHR    = PFN_vkGetFenceFdKHR( vkGetDeviceProcAddr( device, "vkGetFenceFdKHR" ) );
   14dd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ddb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ddf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14de3:	48 8d 0d 06 30 01 00 	lea    0x13006(%rip),%rcx        # 27df0 <_ZNSt8__detailL19__atomic_spin_countE+0x26bc>
   14dea:	48 89 ce             	mov    %rcx,%rsi
   14ded:	48 89 c7             	mov    %rax,%rdi
   14df0:	ff d2                	call   *%rdx
   14df2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14df6:	48 89 82 38 0c 00 00 	mov    %rax,0xc38(%rdx)
        vkGetMemoryFdKHR           = PFN_vkGetMemoryFdKHR( vkGetDeviceProcAddr( device, "vkGetMemoryFdKHR" ) );
   14dfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e01:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e09:	48 8d 0d f0 2f 01 00 	lea    0x12ff0(%rip),%rcx        # 27e00 <_ZNSt8__detailL19__atomic_spin_countE+0x26cc>
   14e10:	48 89 ce             	mov    %rcx,%rsi
   14e13:	48 89 c7             	mov    %rax,%rdi
   14e16:	ff d2                	call   *%rdx
   14e18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e1c:	48 89 82 50 0c 00 00 	mov    %rax,0xc50(%rdx)
        vkGetMemoryFdPropertiesKHR = PFN_vkGetMemoryFdPropertiesKHR( vkGetDeviceProcAddr( device, "vkGetMemoryFdPropertiesKHR" ) );
   14e23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e27:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e2f:	48 8d 0d db 2f 01 00 	lea    0x12fdb(%rip),%rcx        # 27e11 <_ZNSt8__detailL19__atomic_spin_countE+0x26dd>
   14e36:	48 89 ce             	mov    %rcx,%rsi
   14e39:	48 89 c7             	mov    %rax,%rdi
   14e3c:	ff d2                	call   *%rdx
   14e3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e42:	48 89 82 58 0c 00 00 	mov    %rax,0xc58(%rdx)
        vkImportSemaphoreFdKHR = PFN_vkImportSemaphoreFdKHR( vkGetDeviceProcAddr( device, "vkImportSemaphoreFdKHR" ) );
   14e49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e4d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e55:	48 8d 0d d0 2f 01 00 	lea    0x12fd0(%rip),%rcx        # 27e2c <_ZNSt8__detailL19__atomic_spin_countE+0x26f8>
   14e5c:	48 89 ce             	mov    %rcx,%rsi
   14e5f:	48 89 c7             	mov    %rax,%rdi
   14e62:	ff d2                	call   *%rdx
   14e64:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e68:	48 89 82 70 0c 00 00 	mov    %rax,0xc70(%rdx)
        vkGetSemaphoreFdKHR    = PFN_vkGetSemaphoreFdKHR( vkGetDeviceProcAddr( device, "vkGetSemaphoreFdKHR" ) );
   14e6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e73:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e7b:	48 8d 0d c1 2f 01 00 	lea    0x12fc1(%rip),%rcx        # 27e43 <_ZNSt8__detailL19__atomic_spin_countE+0x270f>
   14e82:	48 89 ce             	mov    %rcx,%rsi
   14e85:	48 89 c7             	mov    %rax,%rdi
   14e88:	ff d2                	call   *%rdx
   14e8a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e8e:	48 89 82 78 0c 00 00 	mov    %rax,0xc78(%rdx)
        vkCmdSetFragmentShadingRateKHR = PFN_vkCmdSetFragmentShadingRateKHR( vkGetDeviceProcAddr( device, "vkCmdSetFragmentShadingRateKHR" ) );
   14e95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e99:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ea1:	48 8d 0d b0 2f 01 00 	lea    0x12fb0(%rip),%rcx        # 27e58 <_ZNSt8__detailL19__atomic_spin_countE+0x2724>
   14ea8:	48 89 ce             	mov    %rcx,%rsi
   14eab:	48 89 c7             	mov    %rax,%rdi
   14eae:	ff d2                	call   *%rdx
   14eb0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14eb4:	48 89 82 90 0c 00 00 	mov    %rax,0xc90(%rdx)
        vkGetImageMemoryRequirements2KHR = PFN_vkGetImageMemoryRequirements2KHR( vkGetDeviceProcAddr( device, "vkGetImageMemoryRequirements2KHR" ) );
   14ebb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ebf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ec3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ec7:	48 8d 0d aa 2f 01 00 	lea    0x12faa(%rip),%rcx        # 27e78 <_ZNSt8__detailL19__atomic_spin_countE+0x2744>
   14ece:	48 89 ce             	mov    %rcx,%rsi
   14ed1:	48 89 c7             	mov    %rax,%rdi
   14ed4:	ff d2                	call   *%rdx
   14ed6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14eda:	48 89 82 98 0c 00 00 	mov    %rax,0xc98(%rdx)
        if ( !vkGetImageMemoryRequirements2 )
   14ee1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ee5:	48 8b 80 00 04 00 00 	mov    0x400(%rax),%rax
   14eec:	48 85 c0             	test   %rax,%rax
   14eef:	75 16                	jne    14f07 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5cfb>
          vkGetImageMemoryRequirements2 = vkGetImageMemoryRequirements2KHR;
   14ef1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ef5:	48 8b 90 98 0c 00 00 	mov    0xc98(%rax),%rdx
   14efc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f00:	48 89 90 00 04 00 00 	mov    %rdx,0x400(%rax)
        vkGetBufferMemoryRequirements2KHR = PFN_vkGetBufferMemoryRequirements2KHR( vkGetDeviceProcAddr( device, "vkGetBufferMemoryRequirements2KHR" ) );
   14f07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f0b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14f0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14f13:	48 8d 0d 86 2f 01 00 	lea    0x12f86(%rip),%rcx        # 27ea0 <_ZNSt8__detailL19__atomic_spin_countE+0x276c>
   14f1a:	48 89 ce             	mov    %rcx,%rsi
   14f1d:	48 89 c7             	mov    %rax,%rdi
   14f20:	ff d2                	call   *%rdx
   14f22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14f26:	48 89 82 a0 0c 00 00 	mov    %rax,0xca0(%rdx)
        if ( !vkGetBufferMemoryRequirements2 )
   14f2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f31:	48 8b 80 08 04 00 00 	mov    0x408(%rax),%rax
   14f38:	48 85 c0             	test   %rax,%rax
   14f3b:	75 16                	jne    14f53 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5d47>
          vkGetBufferMemoryRequirements2 = vkGetBufferMemoryRequirements2KHR;
   14f3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f41:	48 8b 90 a0 0c 00 00 	mov    0xca0(%rax),%rdx
   14f48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f4c:	48 89 90 08 04 00 00 	mov    %rdx,0x408(%rax)
          PFN_vkGetImageSparseMemoryRequirements2KHR( vkGetDeviceProcAddr( device, "vkGetImageSparseMemoryRequirements2KHR" ) );
   14f53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f57:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14f5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14f5f:	48 8d 0d 62 2f 01 00 	lea    0x12f62(%rip),%rcx        # 27ec8 <_ZNSt8__detailL19__atomic_spin_countE+0x2794>
   14f66:	48 89 ce             	mov    %rcx,%rsi
   14f69:	48 89 c7             	mov    %rax,%rdi
   14f6c:	ff d2                	call   *%rdx
        vkGetImageSparseMemoryRequirements2KHR =
   14f6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14f72:	48 89 82 a8 0c 00 00 	mov    %rax,0xca8(%rdx)
        if ( !vkGetImageSparseMemoryRequirements2 )
   14f79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f7d:	48 8b 80 10 04 00 00 	mov    0x410(%rax),%rax
   14f84:	48 85 c0             	test   %rax,%rax
   14f87:	75 16                	jne    14f9f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5d93>
          vkGetImageSparseMemoryRequirements2 = vkGetImageSparseMemoryRequirements2KHR;
   14f89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f8d:	48 8b 90 a8 0c 00 00 	mov    0xca8(%rax),%rdx
   14f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f98:	48 89 90 10 04 00 00 	mov    %rdx,0x410(%rax)
        vkTrimCommandPoolKHR = PFN_vkTrimCommandPoolKHR( vkGetDeviceProcAddr( device, "vkTrimCommandPoolKHR" ) );
   14f9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fa3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14fa7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14fab:	48 8d 0d 3d 2f 01 00 	lea    0x12f3d(%rip),%rcx        # 27eef <_ZNSt8__detailL19__atomic_spin_countE+0x27bb>
   14fb2:	48 89 ce             	mov    %rcx,%rsi
   14fb5:	48 89 c7             	mov    %rax,%rdi
   14fb8:	ff d2                	call   *%rdx
   14fba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14fbe:	48 89 82 b0 0c 00 00 	mov    %rax,0xcb0(%rdx)
        if ( !vkTrimCommandPool )
   14fc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fc9:	48 8b 80 18 04 00 00 	mov    0x418(%rax),%rax
   14fd0:	48 85 c0             	test   %rax,%rax
   14fd3:	75 16                	jne    14feb <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ddf>
          vkTrimCommandPool = vkTrimCommandPoolKHR;
   14fd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fd9:	48 8b 90 b0 0c 00 00 	mov    0xcb0(%rax),%rdx
   14fe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fe4:	48 89 90 18 04 00 00 	mov    %rdx,0x418(%rax)
        vkGetDescriptorSetLayoutSupportKHR = PFN_vkGetDescriptorSetLayoutSupportKHR( vkGetDeviceProcAddr( device, "vkGetDescriptorSetLayoutSupportKHR" ) );
   14feb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fef:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ff3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ff7:	48 8d 0d 0a 2f 01 00 	lea    0x12f0a(%rip),%rcx        # 27f08 <_ZNSt8__detailL19__atomic_spin_countE+0x27d4>
   14ffe:	48 89 ce             	mov    %rcx,%rsi
   15001:	48 89 c7             	mov    %rax,%rdi
   15004:	ff d2                	call   *%rdx
   15006:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1500a:	48 89 82 b8 0c 00 00 	mov    %rax,0xcb8(%rdx)
        if ( !vkGetDescriptorSetLayoutSupport )
   15011:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15015:	48 8b 80 50 04 00 00 	mov    0x450(%rax),%rax
   1501c:	48 85 c0             	test   %rax,%rax
   1501f:	75 16                	jne    15037 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5e2b>
          vkGetDescriptorSetLayoutSupport = vkGetDescriptorSetLayoutSupportKHR;
   15021:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15025:	48 8b 90 b8 0c 00 00 	mov    0xcb8(%rax),%rdx
   1502c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15030:	48 89 90 50 04 00 00 	mov    %rdx,0x450(%rax)
          PFN_vkGetDeviceBufferMemoryRequirementsKHR( vkGetDeviceProcAddr( device, "vkGetDeviceBufferMemoryRequirementsKHR" ) );
   15037:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1503b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1503f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15043:	48 8d 0d e6 2e 01 00 	lea    0x12ee6(%rip),%rcx        # 27f30 <_ZNSt8__detailL19__atomic_spin_countE+0x27fc>
   1504a:	48 89 ce             	mov    %rcx,%rsi
   1504d:	48 89 c7             	mov    %rax,%rdi
   15050:	ff d2                	call   *%rdx
        vkGetDeviceBufferMemoryRequirementsKHR =
   15052:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15056:	48 89 82 c0 0c 00 00 	mov    %rax,0xcc0(%rdx)
        if ( !vkGetDeviceBufferMemoryRequirements )
   1505d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15061:	48 8b 80 c8 05 00 00 	mov    0x5c8(%rax),%rax
   15068:	48 85 c0             	test   %rax,%rax
   1506b:	75 16                	jne    15083 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5e77>
          vkGetDeviceBufferMemoryRequirements = vkGetDeviceBufferMemoryRequirementsKHR;
   1506d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15071:	48 8b 90 c0 0c 00 00 	mov    0xcc0(%rax),%rdx
   15078:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1507c:	48 89 90 c8 05 00 00 	mov    %rdx,0x5c8(%rax)
          PFN_vkGetDeviceImageMemoryRequirementsKHR( vkGetDeviceProcAddr( device, "vkGetDeviceImageMemoryRequirementsKHR" ) );
   15083:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15087:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1508b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1508f:	48 8d 0d c2 2e 01 00 	lea    0x12ec2(%rip),%rcx        # 27f58 <_ZNSt8__detailL19__atomic_spin_countE+0x2824>
   15096:	48 89 ce             	mov    %rcx,%rsi
   15099:	48 89 c7             	mov    %rax,%rdi
   1509c:	ff d2                	call   *%rdx
        vkGetDeviceImageMemoryRequirementsKHR =
   1509e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   150a2:	48 89 82 c8 0c 00 00 	mov    %rax,0xcc8(%rdx)
        if ( !vkGetDeviceImageMemoryRequirements )
   150a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150ad:	48 8b 80 d0 05 00 00 	mov    0x5d0(%rax),%rax
   150b4:	48 85 c0             	test   %rax,%rax
   150b7:	75 16                	jne    150cf <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ec3>
          vkGetDeviceImageMemoryRequirements = vkGetDeviceImageMemoryRequirementsKHR;
   150b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150bd:	48 8b 90 c8 0c 00 00 	mov    0xcc8(%rax),%rdx
   150c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150c8:	48 89 90 d0 05 00 00 	mov    %rdx,0x5d0(%rax)
          PFN_vkGetDeviceImageSparseMemoryRequirementsKHR( vkGetDeviceProcAddr( device, "vkGetDeviceImageSparseMemoryRequirementsKHR" ) );
   150cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150d3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   150d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   150db:	48 8d 0d 9e 2e 01 00 	lea    0x12e9e(%rip),%rcx        # 27f80 <_ZNSt8__detailL19__atomic_spin_countE+0x284c>
   150e2:	48 89 ce             	mov    %rcx,%rsi
   150e5:	48 89 c7             	mov    %rax,%rdi
   150e8:	ff d2                	call   *%rdx
        vkGetDeviceImageSparseMemoryRequirementsKHR =
   150ea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   150ee:	48 89 82 d0 0c 00 00 	mov    %rax,0xcd0(%rdx)
        if ( !vkGetDeviceImageSparseMemoryRequirements )
   150f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150f9:	48 8b 80 d8 05 00 00 	mov    0x5d8(%rax),%rax
   15100:	48 85 c0             	test   %rax,%rax
   15103:	75 16                	jne    1511b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5f0f>
          vkGetDeviceImageSparseMemoryRequirements = vkGetDeviceImageSparseMemoryRequirementsKHR;
   15105:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15109:	48 8b 90 d0 0c 00 00 	mov    0xcd0(%rax),%rdx
   15110:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15114:	48 89 90 d8 05 00 00 	mov    %rdx,0x5d8(%rax)
        vkAcquireProfilingLockKHR = PFN_vkAcquireProfilingLockKHR( vkGetDeviceProcAddr( device, "vkAcquireProfilingLockKHR" ) );
   1511b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1511f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15123:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15127:	48 8d 0d 7e 2e 01 00 	lea    0x12e7e(%rip),%rcx        # 27fac <_ZNSt8__detailL19__atomic_spin_countE+0x2878>
   1512e:	48 89 ce             	mov    %rcx,%rsi
   15131:	48 89 c7             	mov    %rax,%rdi
   15134:	ff d2                	call   *%rdx
   15136:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1513a:	48 89 82 d8 0c 00 00 	mov    %rax,0xcd8(%rdx)
        vkReleaseProfilingLockKHR = PFN_vkReleaseProfilingLockKHR( vkGetDeviceProcAddr( device, "vkReleaseProfilingLockKHR" ) );
   15141:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15145:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15149:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1514d:	48 8d 0d 72 2e 01 00 	lea    0x12e72(%rip),%rcx        # 27fc6 <_ZNSt8__detailL19__atomic_spin_countE+0x2892>
   15154:	48 89 ce             	mov    %rcx,%rsi
   15157:	48 89 c7             	mov    %rax,%rdi
   1515a:	ff d2                	call   *%rdx
   1515c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15160:	48 89 82 e0 0c 00 00 	mov    %rax,0xce0(%rdx)
          PFN_vkGetPipelineExecutablePropertiesKHR( vkGetDeviceProcAddr( device, "vkGetPipelineExecutablePropertiesKHR" ) );
   15167:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1516b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1516f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15173:	48 8d 0d 66 2e 01 00 	lea    0x12e66(%rip),%rcx        # 27fe0 <_ZNSt8__detailL19__atomic_spin_countE+0x28ac>
   1517a:	48 89 ce             	mov    %rcx,%rsi
   1517d:	48 89 c7             	mov    %rax,%rdi
   15180:	ff d2                	call   *%rdx
        vkGetPipelineExecutablePropertiesKHR =
   15182:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15186:	48 89 82 e8 0c 00 00 	mov    %rax,0xce8(%rdx)
          PFN_vkGetPipelineExecutableStatisticsKHR( vkGetDeviceProcAddr( device, "vkGetPipelineExecutableStatisticsKHR" ) );
   1518d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15191:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15195:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15199:	48 8d 0d 68 2e 01 00 	lea    0x12e68(%rip),%rcx        # 28008 <_ZNSt8__detailL19__atomic_spin_countE+0x28d4>
   151a0:	48 89 ce             	mov    %rcx,%rsi
   151a3:	48 89 c7             	mov    %rax,%rdi
   151a6:	ff d2                	call   *%rdx
        vkGetPipelineExecutableStatisticsKHR =
   151a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   151ac:	48 89 82 f0 0c 00 00 	mov    %rax,0xcf0(%rdx)
          PFN_vkGetPipelineExecutableInternalRepresentationsKHR( vkGetDeviceProcAddr( device, "vkGetPipelineExecutableInternalRepresentationsKHR" ) );
   151b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   151b7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   151bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   151bf:	48 8d 0d 6a 2e 01 00 	lea    0x12e6a(%rip),%rcx        # 28030 <_ZNSt8__detailL19__atomic_spin_countE+0x28fc>
   151c6:	48 89 ce             	mov    %rcx,%rsi
   151c9:	48 89 c7             	mov    %rax,%rdi
   151cc:	ff d2                	call   *%rdx
        vkGetPipelineExecutableInternalRepresentationsKHR =
   151ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   151d2:	48 89 82 f8 0c 00 00 	mov    %rax,0xcf8(%rdx)
        vkWaitForPresentKHR = PFN_vkWaitForPresentKHR( vkGetDeviceProcAddr( device, "vkWaitForPresentKHR" ) );
   151d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   151dd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   151e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   151e5:	48 8d 0d 76 2e 01 00 	lea    0x12e76(%rip),%rcx        # 28062 <_ZNSt8__detailL19__atomic_spin_countE+0x292e>
   151ec:	48 89 ce             	mov    %rcx,%rsi
   151ef:	48 89 c7             	mov    %rax,%rdi
   151f2:	ff d2                	call   *%rdx
   151f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   151f8:	48 89 82 00 0d 00 00 	mov    %rax,0xd00(%rdx)
        vkCmdPushDescriptorSetKHR = PFN_vkCmdPushDescriptorSetKHR( vkGetDeviceProcAddr( device, "vkCmdPushDescriptorSetKHR" ) );
   151ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15203:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15207:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1520b:	48 8d 0d 64 2e 01 00 	lea    0x12e64(%rip),%rcx        # 28076 <_ZNSt8__detailL19__atomic_spin_countE+0x2942>
   15212:	48 89 ce             	mov    %rcx,%rsi
   15215:	48 89 c7             	mov    %rax,%rdi
   15218:	ff d2                	call   *%rdx
   1521a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1521e:	48 89 82 08 0d 00 00 	mov    %rax,0xd08(%rdx)
        vkCmdTraceRaysIndirect2KHR = PFN_vkCmdTraceRaysIndirect2KHR( vkGetDeviceProcAddr( device, "vkCmdTraceRaysIndirect2KHR" ) );
   15225:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15229:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1522d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15231:	48 8d 0d 58 2e 01 00 	lea    0x12e58(%rip),%rcx        # 28090 <_ZNSt8__detailL19__atomic_spin_countE+0x295c>
   15238:	48 89 ce             	mov    %rcx,%rsi
   1523b:	48 89 c7             	mov    %rax,%rdi
   1523e:	ff d2                	call   *%rdx
   15240:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15244:	48 89 82 10 0d 00 00 	mov    %rax,0xd10(%rdx)
        vkCmdTraceRaysKHR              = PFN_vkCmdTraceRaysKHR( vkGetDeviceProcAddr( device, "vkCmdTraceRaysKHR" ) );
   1524b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1524f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15253:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15257:	48 8d 0d 4d 2e 01 00 	lea    0x12e4d(%rip),%rcx        # 280ab <_ZNSt8__detailL19__atomic_spin_countE+0x2977>
   1525e:	48 89 ce             	mov    %rcx,%rsi
   15261:	48 89 c7             	mov    %rax,%rdi
   15264:	ff d2                	call   *%rdx
   15266:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1526a:	48 89 82 18 0d 00 00 	mov    %rax,0xd18(%rdx)
        vkCreateRayTracingPipelinesKHR = PFN_vkCreateRayTracingPipelinesKHR( vkGetDeviceProcAddr( device, "vkCreateRayTracingPipelinesKHR" ) );
   15271:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15275:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15279:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1527d:	48 8d 0d 3c 2e 01 00 	lea    0x12e3c(%rip),%rcx        # 280c0 <_ZNSt8__detailL19__atomic_spin_countE+0x298c>
   15284:	48 89 ce             	mov    %rcx,%rsi
   15287:	48 89 c7             	mov    %rax,%rdi
   1528a:	ff d2                	call   *%rdx
   1528c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15290:	48 89 82 20 0d 00 00 	mov    %rax,0xd20(%rdx)
          PFN_vkGetRayTracingShaderGroupHandlesKHR( vkGetDeviceProcAddr( device, "vkGetRayTracingShaderGroupHandlesKHR" ) );
   15297:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1529b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1529f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   152a3:	48 8d 0d 36 2e 01 00 	lea    0x12e36(%rip),%rcx        # 280e0 <_ZNSt8__detailL19__atomic_spin_countE+0x29ac>
   152aa:	48 89 ce             	mov    %rcx,%rsi
   152ad:	48 89 c7             	mov    %rax,%rdi
   152b0:	ff d2                	call   *%rdx
        vkGetRayTracingShaderGroupHandlesKHR =
   152b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   152b6:	48 89 82 28 0d 00 00 	mov    %rax,0xd28(%rdx)
          PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR( vkGetDeviceProcAddr( device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR" ) );
   152bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   152c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   152c9:	48 8d 0d 38 2e 01 00 	lea    0x12e38(%rip),%rcx        # 28108 <_ZNSt8__detailL19__atomic_spin_countE+0x29d4>
   152d0:	48 89 ce             	mov    %rcx,%rsi
   152d3:	48 89 c7             	mov    %rax,%rdi
   152d6:	ff d2                	call   *%rdx
        vkGetRayTracingCaptureReplayShaderGroupHandlesKHR =
   152d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   152dc:	48 89 82 30 0d 00 00 	mov    %rax,0xd30(%rdx)
        vkCmdTraceRaysIndirectKHR = PFN_vkCmdTraceRaysIndirectKHR( vkGetDeviceProcAddr( device, "vkCmdTraceRaysIndirectKHR" ) );
   152e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   152eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   152ef:	48 8d 0d 44 2e 01 00 	lea    0x12e44(%rip),%rcx        # 2813a <_ZNSt8__detailL19__atomic_spin_countE+0x2a06>
   152f6:	48 89 ce             	mov    %rcx,%rsi
   152f9:	48 89 c7             	mov    %rax,%rdi
   152fc:	ff d2                	call   *%rdx
   152fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15302:	48 89 82 38 0d 00 00 	mov    %rax,0xd38(%rdx)
          PFN_vkGetRayTracingShaderGroupStackSizeKHR( vkGetDeviceProcAddr( device, "vkGetRayTracingShaderGroupStackSizeKHR" ) );
   15309:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1530d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15311:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15315:	48 8d 0d 3c 2e 01 00 	lea    0x12e3c(%rip),%rcx        # 28158 <_ZNSt8__detailL19__atomic_spin_countE+0x2a24>
   1531c:	48 89 ce             	mov    %rcx,%rsi
   1531f:	48 89 c7             	mov    %rax,%rdi
   15322:	ff d2                	call   *%rdx
        vkGetRayTracingShaderGroupStackSizeKHR =
   15324:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15328:	48 89 82 40 0d 00 00 	mov    %rax,0xd40(%rdx)
          PFN_vkCmdSetRayTracingPipelineStackSizeKHR( vkGetDeviceProcAddr( device, "vkCmdSetRayTracingPipelineStackSizeKHR" ) );
   1532f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15333:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15337:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1533b:	48 8d 0d 3e 2e 01 00 	lea    0x12e3e(%rip),%rcx        # 28180 <_ZNSt8__detailL19__atomic_spin_countE+0x2a4c>
   15342:	48 89 ce             	mov    %rcx,%rsi
   15345:	48 89 c7             	mov    %rax,%rdi
   15348:	ff d2                	call   *%rdx
        vkCmdSetRayTracingPipelineStackSizeKHR =
   1534a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1534e:	48 89 82 48 0d 00 00 	mov    %rax,0xd48(%rdx)
        vkCreateSamplerYcbcrConversionKHR = PFN_vkCreateSamplerYcbcrConversionKHR( vkGetDeviceProcAddr( device, "vkCreateSamplerYcbcrConversionKHR" ) );
   15355:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15359:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1535d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15361:	48 8d 0d 40 2e 01 00 	lea    0x12e40(%rip),%rcx        # 281a8 <_ZNSt8__detailL19__atomic_spin_countE+0x2a74>
   15368:	48 89 ce             	mov    %rcx,%rsi
   1536b:	48 89 c7             	mov    %rax,%rdi
   1536e:	ff d2                	call   *%rdx
   15370:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15374:	48 89 82 50 0d 00 00 	mov    %rax,0xd50(%rdx)
        if ( !vkCreateSamplerYcbcrConversion )
   1537b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1537f:	48 8b 80 28 04 00 00 	mov    0x428(%rax),%rax
   15386:	48 85 c0             	test   %rax,%rax
   15389:	75 16                	jne    153a1 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6195>
          vkCreateSamplerYcbcrConversion = vkCreateSamplerYcbcrConversionKHR;
   1538b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1538f:	48 8b 90 50 0d 00 00 	mov    0xd50(%rax),%rdx
   15396:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1539a:	48 89 90 28 04 00 00 	mov    %rdx,0x428(%rax)
        vkDestroySamplerYcbcrConversionKHR = PFN_vkDestroySamplerYcbcrConversionKHR( vkGetDeviceProcAddr( device, "vkDestroySamplerYcbcrConversionKHR" ) );
   153a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153a5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   153a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   153ad:	48 8d 0d 1c 2e 01 00 	lea    0x12e1c(%rip),%rcx        # 281d0 <_ZNSt8__detailL19__atomic_spin_countE+0x2a9c>
   153b4:	48 89 ce             	mov    %rcx,%rsi
   153b7:	48 89 c7             	mov    %rax,%rdi
   153ba:	ff d2                	call   *%rdx
   153bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   153c0:	48 89 82 58 0d 00 00 	mov    %rax,0xd58(%rdx)
        if ( !vkDestroySamplerYcbcrConversion )
   153c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153cb:	48 8b 80 30 04 00 00 	mov    0x430(%rax),%rax
   153d2:	48 85 c0             	test   %rax,%rax
   153d5:	75 16                	jne    153ed <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x61e1>
          vkDestroySamplerYcbcrConversion = vkDestroySamplerYcbcrConversionKHR;
   153d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153db:	48 8b 90 58 0d 00 00 	mov    0xd58(%rax),%rdx
   153e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153e6:	48 89 90 30 04 00 00 	mov    %rdx,0x430(%rax)
        vkGetSwapchainStatusKHR = PFN_vkGetSwapchainStatusKHR( vkGetDeviceProcAddr( device, "vkGetSwapchainStatusKHR" ) );
   153ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153f1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   153f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   153f9:	48 8d 0d f3 2d 01 00 	lea    0x12df3(%rip),%rcx        # 281f3 <_ZNSt8__detailL19__atomic_spin_countE+0x2abf>
   15400:	48 89 ce             	mov    %rcx,%rsi
   15403:	48 89 c7             	mov    %rax,%rdi
   15406:	ff d2                	call   *%rdx
   15408:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1540c:	48 89 82 60 0d 00 00 	mov    %rax,0xd60(%rdx)
        vkCreateSwapchainKHR    = PFN_vkCreateSwapchainKHR( vkGetDeviceProcAddr( device, "vkCreateSwapchainKHR" ) );
   15413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15417:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1541b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1541f:	48 8d 0d e5 2d 01 00 	lea    0x12de5(%rip),%rcx        # 2820b <_ZNSt8__detailL19__atomic_spin_countE+0x2ad7>
   15426:	48 89 ce             	mov    %rcx,%rsi
   15429:	48 89 c7             	mov    %rax,%rdi
   1542c:	ff d2                	call   *%rdx
   1542e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15432:	48 89 82 68 0d 00 00 	mov    %rax,0xd68(%rdx)
        vkDestroySwapchainKHR   = PFN_vkDestroySwapchainKHR( vkGetDeviceProcAddr( device, "vkDestroySwapchainKHR" ) );
   15439:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1543d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15441:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15445:	48 8d 0d d4 2d 01 00 	lea    0x12dd4(%rip),%rcx        # 28220 <_ZNSt8__detailL19__atomic_spin_countE+0x2aec>
   1544c:	48 89 ce             	mov    %rcx,%rsi
   1544f:	48 89 c7             	mov    %rax,%rdi
   15452:	ff d2                	call   *%rdx
   15454:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15458:	48 89 82 70 0d 00 00 	mov    %rax,0xd70(%rdx)
        vkGetSwapchainImagesKHR = PFN_vkGetSwapchainImagesKHR( vkGetDeviceProcAddr( device, "vkGetSwapchainImagesKHR" ) );
   1545f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15463:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15467:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1546b:	48 8d 0d c4 2d 01 00 	lea    0x12dc4(%rip),%rcx        # 28236 <_ZNSt8__detailL19__atomic_spin_countE+0x2b02>
   15472:	48 89 ce             	mov    %rcx,%rsi
   15475:	48 89 c7             	mov    %rax,%rdi
   15478:	ff d2                	call   *%rdx
   1547a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1547e:	48 89 82 78 0d 00 00 	mov    %rax,0xd78(%rdx)
        vkAcquireNextImageKHR   = PFN_vkAcquireNextImageKHR( vkGetDeviceProcAddr( device, "vkAcquireNextImageKHR" ) );
   15485:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15489:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1548d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15491:	48 8d 0d b6 2d 01 00 	lea    0x12db6(%rip),%rcx        # 2824e <_ZNSt8__detailL19__atomic_spin_countE+0x2b1a>
   15498:	48 89 ce             	mov    %rcx,%rsi
   1549b:	48 89 c7             	mov    %rax,%rdi
   1549e:	ff d2                	call   *%rdx
   154a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   154a4:	48 89 82 80 0d 00 00 	mov    %rax,0xd80(%rdx)
        vkQueuePresentKHR       = PFN_vkQueuePresentKHR( vkGetDeviceProcAddr( device, "vkQueuePresentKHR" ) );
   154ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154af:	48 8b 50 10          	mov    0x10(%rax),%rdx
   154b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   154b7:	48 8d 0d a6 2d 01 00 	lea    0x12da6(%rip),%rcx        # 28264 <_ZNSt8__detailL19__atomic_spin_countE+0x2b30>
   154be:	48 89 ce             	mov    %rcx,%rsi
   154c1:	48 89 c7             	mov    %rax,%rdi
   154c4:	ff d2                	call   *%rdx
   154c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   154ca:	48 89 82 88 0d 00 00 	mov    %rax,0xd88(%rdx)
        vkCmdSetEvent2KHR = PFN_vkCmdSetEvent2KHR( vkGetDeviceProcAddr( device, "vkCmdSetEvent2KHR" ) );
   154d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   154d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   154dd:	48 8d 0d 92 2d 01 00 	lea    0x12d92(%rip),%rcx        # 28276 <_ZNSt8__detailL19__atomic_spin_countE+0x2b42>
   154e4:	48 89 ce             	mov    %rcx,%rsi
   154e7:	48 89 c7             	mov    %rax,%rdi
   154ea:	ff d2                	call   *%rdx
   154ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   154f0:	48 89 82 90 0d 00 00 	mov    %rax,0xd90(%rdx)
        if ( !vkCmdSetEvent2 )
   154f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154fb:	48 8b 80 e0 04 00 00 	mov    0x4e0(%rax),%rax
   15502:	48 85 c0             	test   %rax,%rax
   15505:	75 16                	jne    1551d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6311>
          vkCmdSetEvent2 = vkCmdSetEvent2KHR;
   15507:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1550b:	48 8b 90 90 0d 00 00 	mov    0xd90(%rax),%rdx
   15512:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15516:	48 89 90 e0 04 00 00 	mov    %rdx,0x4e0(%rax)
        vkCmdResetEvent2KHR = PFN_vkCmdResetEvent2KHR( vkGetDeviceProcAddr( device, "vkCmdResetEvent2KHR" ) );
   1551d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15521:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15525:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15529:	48 8d 0d 58 2d 01 00 	lea    0x12d58(%rip),%rcx        # 28288 <_ZNSt8__detailL19__atomic_spin_countE+0x2b54>
   15530:	48 89 ce             	mov    %rcx,%rsi
   15533:	48 89 c7             	mov    %rax,%rdi
   15536:	ff d2                	call   *%rdx
   15538:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1553c:	48 89 82 98 0d 00 00 	mov    %rax,0xd98(%rdx)
        if ( !vkCmdResetEvent2 )
   15543:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15547:	48 8b 80 e8 04 00 00 	mov    0x4e8(%rax),%rax
   1554e:	48 85 c0             	test   %rax,%rax
   15551:	75 16                	jne    15569 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x635d>
          vkCmdResetEvent2 = vkCmdResetEvent2KHR;
   15553:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15557:	48 8b 90 98 0d 00 00 	mov    0xd98(%rax),%rdx
   1555e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15562:	48 89 90 e8 04 00 00 	mov    %rdx,0x4e8(%rax)
        vkCmdWaitEvents2KHR = PFN_vkCmdWaitEvents2KHR( vkGetDeviceProcAddr( device, "vkCmdWaitEvents2KHR" ) );
   15569:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1556d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15571:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15575:	48 8d 0d 20 2d 01 00 	lea    0x12d20(%rip),%rcx        # 2829c <_ZNSt8__detailL19__atomic_spin_countE+0x2b68>
   1557c:	48 89 ce             	mov    %rcx,%rsi
   1557f:	48 89 c7             	mov    %rax,%rdi
   15582:	ff d2                	call   *%rdx
   15584:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15588:	48 89 82 a0 0d 00 00 	mov    %rax,0xda0(%rdx)
        if ( !vkCmdWaitEvents2 )
   1558f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15593:	48 8b 80 f0 04 00 00 	mov    0x4f0(%rax),%rax
   1559a:	48 85 c0             	test   %rax,%rax
   1559d:	75 16                	jne    155b5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x63a9>
          vkCmdWaitEvents2 = vkCmdWaitEvents2KHR;
   1559f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155a3:	48 8b 90 a0 0d 00 00 	mov    0xda0(%rax),%rdx
   155aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155ae:	48 89 90 f0 04 00 00 	mov    %rdx,0x4f0(%rax)
        vkCmdPipelineBarrier2KHR = PFN_vkCmdPipelineBarrier2KHR( vkGetDeviceProcAddr( device, "vkCmdPipelineBarrier2KHR" ) );
   155b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155b9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   155bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   155c1:	48 8d 0d e8 2c 01 00 	lea    0x12ce8(%rip),%rcx        # 282b0 <_ZNSt8__detailL19__atomic_spin_countE+0x2b7c>
   155c8:	48 89 ce             	mov    %rcx,%rsi
   155cb:	48 89 c7             	mov    %rax,%rdi
   155ce:	ff d2                	call   *%rdx
   155d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   155d4:	48 89 82 a8 0d 00 00 	mov    %rax,0xda8(%rdx)
        if ( !vkCmdPipelineBarrier2 )
   155db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155df:	48 8b 80 f8 04 00 00 	mov    0x4f8(%rax),%rax
   155e6:	48 85 c0             	test   %rax,%rax
   155e9:	75 16                	jne    15601 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x63f5>
          vkCmdPipelineBarrier2 = vkCmdPipelineBarrier2KHR;
   155eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155ef:	48 8b 90 a8 0d 00 00 	mov    0xda8(%rax),%rdx
   155f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155fa:	48 89 90 f8 04 00 00 	mov    %rdx,0x4f8(%rax)
        vkCmdWriteTimestamp2KHR = PFN_vkCmdWriteTimestamp2KHR( vkGetDeviceProcAddr( device, "vkCmdWriteTimestamp2KHR" ) );
   15601:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15605:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15609:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1560d:	48 8d 0d b5 2c 01 00 	lea    0x12cb5(%rip),%rcx        # 282c9 <_ZNSt8__detailL19__atomic_spin_countE+0x2b95>
   15614:	48 89 ce             	mov    %rcx,%rsi
   15617:	48 89 c7             	mov    %rax,%rdi
   1561a:	ff d2                	call   *%rdx
   1561c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15620:	48 89 82 b0 0d 00 00 	mov    %rax,0xdb0(%rdx)
        if ( !vkCmdWriteTimestamp2 )
   15627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1562b:	48 8b 80 00 05 00 00 	mov    0x500(%rax),%rax
   15632:	48 85 c0             	test   %rax,%rax
   15635:	75 16                	jne    1564d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6441>
          vkCmdWriteTimestamp2 = vkCmdWriteTimestamp2KHR;
   15637:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1563b:	48 8b 90 b0 0d 00 00 	mov    0xdb0(%rax),%rdx
   15642:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15646:	48 89 90 00 05 00 00 	mov    %rdx,0x500(%rax)
        vkQueueSubmit2KHR = PFN_vkQueueSubmit2KHR( vkGetDeviceProcAddr( device, "vkQueueSubmit2KHR" ) );
   1564d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15651:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15655:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15659:	48 8d 0d 81 2c 01 00 	lea    0x12c81(%rip),%rcx        # 282e1 <_ZNSt8__detailL19__atomic_spin_countE+0x2bad>
   15660:	48 89 ce             	mov    %rcx,%rsi
   15663:	48 89 c7             	mov    %rax,%rdi
   15666:	ff d2                	call   *%rdx
   15668:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1566c:	48 89 82 b8 0d 00 00 	mov    %rax,0xdb8(%rdx)
        if ( !vkQueueSubmit2 )
   15673:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15677:	48 8b 80 08 05 00 00 	mov    0x508(%rax),%rax
   1567e:	48 85 c0             	test   %rax,%rax
   15681:	75 16                	jne    15699 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x648d>
          vkQueueSubmit2 = vkQueueSubmit2KHR;
   15683:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15687:	48 8b 90 b8 0d 00 00 	mov    0xdb8(%rax),%rdx
   1568e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15692:	48 89 90 08 05 00 00 	mov    %rdx,0x508(%rax)
        vkCmdWriteBufferMarker2AMD  = PFN_vkCmdWriteBufferMarker2AMD( vkGetDeviceProcAddr( device, "vkCmdWriteBufferMarker2AMD" ) );
   15699:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1569d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   156a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   156a5:	48 8d 0d 47 2c 01 00 	lea    0x12c47(%rip),%rcx        # 282f3 <_ZNSt8__detailL19__atomic_spin_countE+0x2bbf>
   156ac:	48 89 ce             	mov    %rcx,%rsi
   156af:	48 89 c7             	mov    %rax,%rdi
   156b2:	ff d2                	call   *%rdx
   156b4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   156b8:	48 89 82 c0 0d 00 00 	mov    %rax,0xdc0(%rdx)
        vkGetQueueCheckpointData2NV = PFN_vkGetQueueCheckpointData2NV( vkGetDeviceProcAddr( device, "vkGetQueueCheckpointData2NV" ) );
   156bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156c3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   156c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   156cb:	48 8d 0d 3c 2c 01 00 	lea    0x12c3c(%rip),%rcx        # 2830e <_ZNSt8__detailL19__atomic_spin_countE+0x2bda>
   156d2:	48 89 ce             	mov    %rcx,%rsi
   156d5:	48 89 c7             	mov    %rax,%rdi
   156d8:	ff d2                	call   *%rdx
   156da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   156de:	48 89 82 c8 0d 00 00 	mov    %rax,0xdc8(%rdx)
        vkGetSemaphoreCounterValueKHR = PFN_vkGetSemaphoreCounterValueKHR( vkGetDeviceProcAddr( device, "vkGetSemaphoreCounterValueKHR" ) );
   156e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   156ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   156f1:	48 8d 0d 32 2c 01 00 	lea    0x12c32(%rip),%rcx        # 2832a <_ZNSt8__detailL19__atomic_spin_countE+0x2bf6>
   156f8:	48 89 ce             	mov    %rcx,%rsi
   156fb:	48 89 c7             	mov    %rax,%rdi
   156fe:	ff d2                	call   *%rdx
   15700:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15704:	48 89 82 d0 0d 00 00 	mov    %rax,0xdd0(%rdx)
        if ( !vkGetSemaphoreCounterValue )
   1570b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1570f:	48 8b 80 90 04 00 00 	mov    0x490(%rax),%rax
   15716:	48 85 c0             	test   %rax,%rax
   15719:	75 16                	jne    15731 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6525>
          vkGetSemaphoreCounterValue = vkGetSemaphoreCounterValueKHR;
   1571b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1571f:	48 8b 90 d0 0d 00 00 	mov    0xdd0(%rax),%rdx
   15726:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1572a:	48 89 90 90 04 00 00 	mov    %rdx,0x490(%rax)
        vkWaitSemaphoresKHR = PFN_vkWaitSemaphoresKHR( vkGetDeviceProcAddr( device, "vkWaitSemaphoresKHR" ) );
   15731:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15735:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15739:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1573d:	48 8d 0d 04 2c 01 00 	lea    0x12c04(%rip),%rcx        # 28348 <_ZNSt8__detailL19__atomic_spin_countE+0x2c14>
   15744:	48 89 ce             	mov    %rcx,%rsi
   15747:	48 89 c7             	mov    %rax,%rdi
   1574a:	ff d2                	call   *%rdx
   1574c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15750:	48 89 82 d8 0d 00 00 	mov    %rax,0xdd8(%rdx)
        if ( !vkWaitSemaphores )
   15757:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1575b:	48 8b 80 98 04 00 00 	mov    0x498(%rax),%rax
   15762:	48 85 c0             	test   %rax,%rax
   15765:	75 16                	jne    1577d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6571>
          vkWaitSemaphores = vkWaitSemaphoresKHR;
   15767:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1576b:	48 8b 90 d8 0d 00 00 	mov    0xdd8(%rax),%rdx
   15772:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15776:	48 89 90 98 04 00 00 	mov    %rdx,0x498(%rax)
        vkSignalSemaphoreKHR = PFN_vkSignalSemaphoreKHR( vkGetDeviceProcAddr( device, "vkSignalSemaphoreKHR" ) );
   1577d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15781:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15785:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15789:	48 8d 0d cc 2b 01 00 	lea    0x12bcc(%rip),%rcx        # 2835c <_ZNSt8__detailL19__atomic_spin_countE+0x2c28>
   15790:	48 89 ce             	mov    %rcx,%rsi
   15793:	48 89 c7             	mov    %rax,%rdi
   15796:	ff d2                	call   *%rdx
   15798:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1579c:	48 89 82 e0 0d 00 00 	mov    %rax,0xde0(%rdx)
        if ( !vkSignalSemaphore )
   157a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157a7:	48 8b 80 a0 04 00 00 	mov    0x4a0(%rax),%rax
   157ae:	48 85 c0             	test   %rax,%rax
   157b1:	75 16                	jne    157c9 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x65bd>
          vkSignalSemaphore = vkSignalSemaphoreKHR;
   157b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157b7:	48 8b 90 e0 0d 00 00 	mov    0xde0(%rax),%rdx
   157be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157c2:	48 89 90 a0 04 00 00 	mov    %rdx,0x4a0(%rax)
        vkCreateCuModuleNVX    = PFN_vkCreateCuModuleNVX( vkGetDeviceProcAddr( device, "vkCreateCuModuleNVX" ) );
   157c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157cd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   157d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   157d5:	48 8d 0d 95 2b 01 00 	lea    0x12b95(%rip),%rcx        # 28371 <_ZNSt8__detailL19__atomic_spin_countE+0x2c3d>
   157dc:	48 89 ce             	mov    %rcx,%rsi
   157df:	48 89 c7             	mov    %rax,%rdi
   157e2:	ff d2                	call   *%rdx
   157e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   157e8:	48 89 82 48 0e 00 00 	mov    %rax,0xe48(%rdx)
        vkCreateCuFunctionNVX  = PFN_vkCreateCuFunctionNVX( vkGetDeviceProcAddr( device, "vkCreateCuFunctionNVX" ) );
   157ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157f3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   157f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   157fb:	48 8d 0d 83 2b 01 00 	lea    0x12b83(%rip),%rcx        # 28385 <_ZNSt8__detailL19__atomic_spin_countE+0x2c51>
   15802:	48 89 ce             	mov    %rcx,%rsi
   15805:	48 89 c7             	mov    %rax,%rdi
   15808:	ff d2                	call   *%rdx
   1580a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1580e:	48 89 82 50 0e 00 00 	mov    %rax,0xe50(%rdx)
        vkDestroyCuModuleNVX   = PFN_vkDestroyCuModuleNVX( vkGetDeviceProcAddr( device, "vkDestroyCuModuleNVX" ) );
   15815:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15819:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1581d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15821:	48 8d 0d 73 2b 01 00 	lea    0x12b73(%rip),%rcx        # 2839b <_ZNSt8__detailL19__atomic_spin_countE+0x2c67>
   15828:	48 89 ce             	mov    %rcx,%rsi
   1582b:	48 89 c7             	mov    %rax,%rdi
   1582e:	ff d2                	call   *%rdx
   15830:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15834:	48 89 82 58 0e 00 00 	mov    %rax,0xe58(%rdx)
        vkDestroyCuFunctionNVX = PFN_vkDestroyCuFunctionNVX( vkGetDeviceProcAddr( device, "vkDestroyCuFunctionNVX" ) );
   1583b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1583f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15843:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15847:	48 8d 0d 62 2b 01 00 	lea    0x12b62(%rip),%rcx        # 283b0 <_ZNSt8__detailL19__atomic_spin_countE+0x2c7c>
   1584e:	48 89 ce             	mov    %rcx,%rsi
   15851:	48 89 c7             	mov    %rax,%rdi
   15854:	ff d2                	call   *%rdx
   15856:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1585a:	48 89 82 60 0e 00 00 	mov    %rax,0xe60(%rdx)
        vkCmdCuLaunchKernelNVX = PFN_vkCmdCuLaunchKernelNVX( vkGetDeviceProcAddr( device, "vkCmdCuLaunchKernelNVX" ) );
   15861:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15865:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15869:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1586d:	48 8d 0d 53 2b 01 00 	lea    0x12b53(%rip),%rcx        # 283c7 <_ZNSt8__detailL19__atomic_spin_countE+0x2c93>
   15874:	48 89 ce             	mov    %rcx,%rsi
   15877:	48 89 c7             	mov    %rax,%rdi
   1587a:	ff d2                	call   *%rdx
   1587c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15880:	48 89 82 68 0e 00 00 	mov    %rax,0xe68(%rdx)
        vkGetImageViewHandleNVX  = PFN_vkGetImageViewHandleNVX( vkGetDeviceProcAddr( device, "vkGetImageViewHandleNVX" ) );
   15887:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1588b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1588f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15893:	48 8d 0d 44 2b 01 00 	lea    0x12b44(%rip),%rcx        # 283de <_ZNSt8__detailL19__atomic_spin_countE+0x2caa>
   1589a:	48 89 ce             	mov    %rcx,%rsi
   1589d:	48 89 c7             	mov    %rax,%rdi
   158a0:	ff d2                	call   *%rdx
   158a2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   158a6:	48 89 82 70 0e 00 00 	mov    %rax,0xe70(%rdx)
        vkGetImageViewAddressNVX = PFN_vkGetImageViewAddressNVX( vkGetDeviceProcAddr( device, "vkGetImageViewAddressNVX" ) );
   158ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158b1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   158b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   158b9:	48 8d 0d 36 2b 01 00 	lea    0x12b36(%rip),%rcx        # 283f6 <_ZNSt8__detailL19__atomic_spin_countE+0x2cc2>
   158c0:	48 89 ce             	mov    %rcx,%rsi
   158c3:	48 89 c7             	mov    %rax,%rdi
   158c6:	ff d2                	call   *%rdx
   158c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   158cc:	48 89 82 78 0e 00 00 	mov    %rax,0xe78(%rdx)
        vkCmdSetViewportWScalingNV = PFN_vkCmdSetViewportWScalingNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportWScalingNV" ) );
   158d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158d7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   158db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   158df:	48 8d 0d 29 2b 01 00 	lea    0x12b29(%rip),%rcx        # 2840f <_ZNSt8__detailL19__atomic_spin_countE+0x2cdb>
   158e6:	48 89 ce             	mov    %rcx,%rsi
   158e9:	48 89 c7             	mov    %rax,%rdi
   158ec:	ff d2                	call   *%rdx
   158ee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   158f2:	48 89 82 80 0e 00 00 	mov    %rax,0xe80(%rdx)
        vkCmdSetCheckpointNV       = PFN_vkCmdSetCheckpointNV( vkGetDeviceProcAddr( device, "vkCmdSetCheckpointNV" ) );
   158f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158fd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15901:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15905:	48 8d 0d 1e 2b 01 00 	lea    0x12b1e(%rip),%rcx        # 2842a <_ZNSt8__detailL19__atomic_spin_countE+0x2cf6>
   1590c:	48 89 ce             	mov    %rcx,%rsi
   1590f:	48 89 c7             	mov    %rax,%rdi
   15912:	ff d2                	call   *%rdx
   15914:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15918:	48 89 82 88 0e 00 00 	mov    %rax,0xe88(%rdx)
        vkGetQueueCheckpointDataNV = PFN_vkGetQueueCheckpointDataNV( vkGetDeviceProcAddr( device, "vkGetQueueCheckpointDataNV" ) );
   1591f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15923:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15927:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1592b:	48 8d 0d 0d 2b 01 00 	lea    0x12b0d(%rip),%rcx        # 2843f <_ZNSt8__detailL19__atomic_spin_countE+0x2d0b>
   15932:	48 89 ce             	mov    %rcx,%rsi
   15935:	48 89 c7             	mov    %rax,%rdi
   15938:	ff d2                	call   *%rdx
   1593a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1593e:	48 89 82 90 0e 00 00 	mov    %rax,0xe90(%rdx)
          PFN_vkGetGeneratedCommandsMemoryRequirementsNV( vkGetDeviceProcAddr( device, "vkGetGeneratedCommandsMemoryRequirementsNV" ) );
   15945:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15949:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1594d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15951:	48 8d 0d 08 2b 01 00 	lea    0x12b08(%rip),%rcx        # 28460 <_ZNSt8__detailL19__atomic_spin_countE+0x2d2c>
   15958:	48 89 ce             	mov    %rcx,%rsi
   1595b:	48 89 c7             	mov    %rax,%rdi
   1595e:	ff d2                	call   *%rdx
        vkGetGeneratedCommandsMemoryRequirementsNV =
   15960:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15964:	48 89 82 98 0e 00 00 	mov    %rax,0xe98(%rdx)
        vkCmdPreprocessGeneratedCommandsNV = PFN_vkCmdPreprocessGeneratedCommandsNV( vkGetDeviceProcAddr( device, "vkCmdPreprocessGeneratedCommandsNV" ) );
   1596b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1596f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15973:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15977:	48 8d 0d 12 2b 01 00 	lea    0x12b12(%rip),%rcx        # 28490 <_ZNSt8__detailL19__atomic_spin_countE+0x2d5c>
   1597e:	48 89 ce             	mov    %rcx,%rsi
   15981:	48 89 c7             	mov    %rax,%rdi
   15984:	ff d2                	call   *%rdx
   15986:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1598a:	48 89 82 a0 0e 00 00 	mov    %rax,0xea0(%rdx)
        vkCmdExecuteGeneratedCommandsNV    = PFN_vkCmdExecuteGeneratedCommandsNV( vkGetDeviceProcAddr( device, "vkCmdExecuteGeneratedCommandsNV" ) );
   15991:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15995:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15999:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1599d:	48 8d 0d 14 2b 01 00 	lea    0x12b14(%rip),%rcx        # 284b8 <_ZNSt8__detailL19__atomic_spin_countE+0x2d84>
   159a4:	48 89 ce             	mov    %rcx,%rsi
   159a7:	48 89 c7             	mov    %rax,%rdi
   159aa:	ff d2                	call   *%rdx
   159ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   159b0:	48 89 82 a8 0e 00 00 	mov    %rax,0xea8(%rdx)
        vkCmdBindPipelineShaderGroupNV     = PFN_vkCmdBindPipelineShaderGroupNV( vkGetDeviceProcAddr( device, "vkCmdBindPipelineShaderGroupNV" ) );
   159b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159bb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   159bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   159c3:	48 8d 0d 0e 2b 01 00 	lea    0x12b0e(%rip),%rcx        # 284d8 <_ZNSt8__detailL19__atomic_spin_countE+0x2da4>
   159ca:	48 89 ce             	mov    %rcx,%rsi
   159cd:	48 89 c7             	mov    %rax,%rdi
   159d0:	ff d2                	call   *%rdx
   159d2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   159d6:	48 89 82 b0 0e 00 00 	mov    %rax,0xeb0(%rdx)
        vkCreateIndirectCommandsLayoutNV   = PFN_vkCreateIndirectCommandsLayoutNV( vkGetDeviceProcAddr( device, "vkCreateIndirectCommandsLayoutNV" ) );
   159dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159e1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   159e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   159e9:	48 8d 0d 08 2b 01 00 	lea    0x12b08(%rip),%rcx        # 284f8 <_ZNSt8__detailL19__atomic_spin_countE+0x2dc4>
   159f0:	48 89 ce             	mov    %rcx,%rsi
   159f3:	48 89 c7             	mov    %rax,%rdi
   159f6:	ff d2                	call   *%rdx
   159f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   159fc:	48 89 82 b8 0e 00 00 	mov    %rax,0xeb8(%rdx)
        vkDestroyIndirectCommandsLayoutNV  = PFN_vkDestroyIndirectCommandsLayoutNV( vkGetDeviceProcAddr( device, "vkDestroyIndirectCommandsLayoutNV" ) );
   15a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a07:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a0f:	48 8d 0d 0a 2b 01 00 	lea    0x12b0a(%rip),%rcx        # 28520 <_ZNSt8__detailL19__atomic_spin_countE+0x2dec>
   15a16:	48 89 ce             	mov    %rcx,%rsi
   15a19:	48 89 c7             	mov    %rax,%rdi
   15a1c:	ff d2                	call   *%rdx
   15a1e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a22:	48 89 82 c0 0e 00 00 	mov    %rax,0xec0(%rdx)
        vkGetMemoryRemoteAddressNV = PFN_vkGetMemoryRemoteAddressNV( vkGetDeviceProcAddr( device, "vkGetMemoryRemoteAddressNV" ) );
   15a29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a2d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a35:	48 8d 0d 06 2b 01 00 	lea    0x12b06(%rip),%rcx        # 28542 <_ZNSt8__detailL19__atomic_spin_countE+0x2e0e>
   15a3c:	48 89 ce             	mov    %rcx,%rsi
   15a3f:	48 89 c7             	mov    %rax,%rdi
   15a42:	ff d2                	call   *%rdx
   15a44:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a48:	48 89 82 c8 0e 00 00 	mov    %rax,0xec8(%rdx)
        vkCmdSetFragmentShadingRateEnumNV = PFN_vkCmdSetFragmentShadingRateEnumNV( vkGetDeviceProcAddr( device, "vkCmdSetFragmentShadingRateEnumNV" ) );
   15a4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a53:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a5b:	48 8d 0d fe 2a 01 00 	lea    0x12afe(%rip),%rcx        # 28560 <_ZNSt8__detailL19__atomic_spin_countE+0x2e2c>
   15a62:	48 89 ce             	mov    %rcx,%rsi
   15a65:	48 89 c7             	mov    %rax,%rdi
   15a68:	ff d2                	call   *%rdx
   15a6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a6e:	48 89 82 d8 0e 00 00 	mov    %rax,0xed8(%rdx)
        vkCmdDrawMeshTasksNV              = PFN_vkCmdDrawMeshTasksNV( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksNV" ) );
   15a75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a79:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a81:	48 8d 0d fa 2a 01 00 	lea    0x12afa(%rip),%rcx        # 28582 <_ZNSt8__detailL19__atomic_spin_countE+0x2e4e>
   15a88:	48 89 ce             	mov    %rcx,%rsi
   15a8b:	48 89 c7             	mov    %rax,%rdi
   15a8e:	ff d2                	call   *%rdx
   15a90:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a94:	48 89 82 e0 0e 00 00 	mov    %rax,0xee0(%rdx)
        vkCmdDrawMeshTasksIndirectNV      = PFN_vkCmdDrawMeshTasksIndirectNV( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectNV" ) );
   15a9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a9f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15aa3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15aa7:	48 8d 0d e9 2a 01 00 	lea    0x12ae9(%rip),%rcx        # 28597 <_ZNSt8__detailL19__atomic_spin_countE+0x2e63>
   15aae:	48 89 ce             	mov    %rcx,%rsi
   15ab1:	48 89 c7             	mov    %rax,%rdi
   15ab4:	ff d2                	call   *%rdx
   15ab6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15aba:	48 89 82 e8 0e 00 00 	mov    %rax,0xee8(%rdx)
        vkCmdDrawMeshTasksIndirectCountNV = PFN_vkCmdDrawMeshTasksIndirectCountNV( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectCountNV" ) );
   15ac1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ac5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15ac9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15acd:	48 8d 0d e4 2a 01 00 	lea    0x12ae4(%rip),%rcx        # 285b8 <_ZNSt8__detailL19__atomic_spin_countE+0x2e84>
   15ad4:	48 89 ce             	mov    %rcx,%rsi
   15ad7:	48 89 c7             	mov    %rax,%rdi
   15ada:	ff d2                	call   *%rdx
   15adc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15ae0:	48 89 82 f0 0e 00 00 	mov    %rax,0xef0(%rdx)
        vkCreateOpticalFlowSessionNV    = PFN_vkCreateOpticalFlowSessionNV( vkGetDeviceProcAddr( device, "vkCreateOpticalFlowSessionNV" ) );
   15ae7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15aeb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15aef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15af3:	48 8d 0d e0 2a 01 00 	lea    0x12ae0(%rip),%rcx        # 285da <_ZNSt8__detailL19__atomic_spin_countE+0x2ea6>
   15afa:	48 89 ce             	mov    %rcx,%rsi
   15afd:	48 89 c7             	mov    %rax,%rdi
   15b00:	ff d2                	call   *%rdx
   15b02:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b06:	48 89 82 f8 0e 00 00 	mov    %rax,0xef8(%rdx)
        vkDestroyOpticalFlowSessionNV   = PFN_vkDestroyOpticalFlowSessionNV( vkGetDeviceProcAddr( device, "vkDestroyOpticalFlowSessionNV" ) );
   15b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b11:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b19:	48 8d 0d d7 2a 01 00 	lea    0x12ad7(%rip),%rcx        # 285f7 <_ZNSt8__detailL19__atomic_spin_countE+0x2ec3>
   15b20:	48 89 ce             	mov    %rcx,%rsi
   15b23:	48 89 c7             	mov    %rax,%rdi
   15b26:	ff d2                	call   *%rdx
   15b28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b2c:	48 89 82 00 0f 00 00 	mov    %rax,0xf00(%rdx)
        vkBindOpticalFlowSessionImageNV = PFN_vkBindOpticalFlowSessionImageNV( vkGetDeviceProcAddr( device, "vkBindOpticalFlowSessionImageNV" ) );
   15b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b37:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b3f:	48 8d 0d d2 2a 01 00 	lea    0x12ad2(%rip),%rcx        # 28618 <_ZNSt8__detailL19__atomic_spin_countE+0x2ee4>
   15b46:	48 89 ce             	mov    %rcx,%rsi
   15b49:	48 89 c7             	mov    %rax,%rdi
   15b4c:	ff d2                	call   *%rdx
   15b4e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b52:	48 89 82 08 0f 00 00 	mov    %rax,0xf08(%rdx)
        vkCmdOpticalFlowExecuteNV       = PFN_vkCmdOpticalFlowExecuteNV( vkGetDeviceProcAddr( device, "vkCmdOpticalFlowExecuteNV" ) );
   15b59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b5d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b65:	48 8d 0d cc 2a 01 00 	lea    0x12acc(%rip),%rcx        # 28638 <_ZNSt8__detailL19__atomic_spin_countE+0x2f04>
   15b6c:	48 89 ce             	mov    %rcx,%rsi
   15b6f:	48 89 c7             	mov    %rax,%rdi
   15b72:	ff d2                	call   *%rdx
   15b74:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b78:	48 89 82 10 0f 00 00 	mov    %rax,0xf10(%rdx)
        vkCreateAccelerationStructureNV  = PFN_vkCreateAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkCreateAccelerationStructureNV" ) );
   15b7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b83:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b8b:	48 8d 0d c6 2a 01 00 	lea    0x12ac6(%rip),%rcx        # 28658 <_ZNSt8__detailL19__atomic_spin_countE+0x2f24>
   15b92:	48 89 ce             	mov    %rcx,%rsi
   15b95:	48 89 c7             	mov    %rax,%rdi
   15b98:	ff d2                	call   *%rdx
   15b9a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b9e:	48 89 82 18 0f 00 00 	mov    %rax,0xf18(%rdx)
        vkDestroyAccelerationStructureNV = PFN_vkDestroyAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkDestroyAccelerationStructureNV" ) );
   15ba5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ba9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15bad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15bb1:	48 8d 0d c0 2a 01 00 	lea    0x12ac0(%rip),%rcx        # 28678 <_ZNSt8__detailL19__atomic_spin_countE+0x2f44>
   15bb8:	48 89 ce             	mov    %rcx,%rsi
   15bbb:	48 89 c7             	mov    %rax,%rdi
   15bbe:	ff d2                	call   *%rdx
   15bc0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15bc4:	48 89 82 20 0f 00 00 	mov    %rax,0xf20(%rdx)
          PFN_vkGetAccelerationStructureMemoryRequirementsNV( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureMemoryRequirementsNV" ) );
   15bcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15bcf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15bd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15bd7:	48 8d 0d c2 2a 01 00 	lea    0x12ac2(%rip),%rcx        # 286a0 <_ZNSt8__detailL19__atomic_spin_countE+0x2f6c>
   15bde:	48 89 ce             	mov    %rcx,%rsi
   15be1:	48 89 c7             	mov    %rax,%rdi
   15be4:	ff d2                	call   *%rdx
        vkGetAccelerationStructureMemoryRequirementsNV =
   15be6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15bea:	48 89 82 28 0f 00 00 	mov    %rax,0xf28(%rdx)
        vkBindAccelerationStructureMemoryNV = PFN_vkBindAccelerationStructureMemoryNV( vkGetDeviceProcAddr( device, "vkBindAccelerationStructureMemoryNV" ) );
   15bf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15bf5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15bf9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15bfd:	48 8d 0d cc 2a 01 00 	lea    0x12acc(%rip),%rcx        # 286d0 <_ZNSt8__detailL19__atomic_spin_countE+0x2f9c>
   15c04:	48 89 ce             	mov    %rcx,%rsi
   15c07:	48 89 c7             	mov    %rax,%rdi
   15c0a:	ff d2                	call   *%rdx
   15c0c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15c10:	48 89 82 30 0f 00 00 	mov    %rax,0xf30(%rdx)
        vkCmdBuildAccelerationStructureNV   = PFN_vkCmdBuildAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkCmdBuildAccelerationStructureNV" ) );
   15c17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c1b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15c1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c23:	48 8d 0d ce 2a 01 00 	lea    0x12ace(%rip),%rcx        # 286f8 <_ZNSt8__detailL19__atomic_spin_countE+0x2fc4>
   15c2a:	48 89 ce             	mov    %rcx,%rsi
   15c2d:	48 89 c7             	mov    %rax,%rdi
   15c30:	ff d2                	call   *%rdx
   15c32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15c36:	48 89 82 38 0f 00 00 	mov    %rax,0xf38(%rdx)
        vkCmdCopyAccelerationStructureNV    = PFN_vkCmdCopyAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkCmdCopyAccelerationStructureNV" ) );
   15c3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c41:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15c45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c49:	48 8d 0d d0 2a 01 00 	lea    0x12ad0(%rip),%rcx        # 28720 <_ZNSt8__detailL19__atomic_spin_countE+0x2fec>
   15c50:	48 89 ce             	mov    %rcx,%rsi
   15c53:	48 89 c7             	mov    %rax,%rdi
   15c56:	ff d2                	call   *%rdx
   15c58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15c5c:	48 89 82 40 0f 00 00 	mov    %rax,0xf40(%rdx)
        vkCmdTraceRaysNV                    = PFN_vkCmdTraceRaysNV( vkGetDeviceProcAddr( device, "vkCmdTraceRaysNV" ) );
   15c63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c67:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15c6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c6f:	48 8d 0d cb 2a 01 00 	lea    0x12acb(%rip),%rcx        # 28741 <_ZNSt8__detailL19__atomic_spin_countE+0x300d>
   15c76:	48 89 ce             	mov    %rcx,%rsi
   15c79:	48 89 c7             	mov    %rax,%rdi
   15c7c:	ff d2                	call   *%rdx
   15c7e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15c82:	48 89 82 48 0f 00 00 	mov    %rax,0xf48(%rdx)
        vkCreateRayTracingPipelinesNV       = PFN_vkCreateRayTracingPipelinesNV( vkGetDeviceProcAddr( device, "vkCreateRayTracingPipelinesNV" ) );
   15c89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c8d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15c91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c95:	48 8d 0d b6 2a 01 00 	lea    0x12ab6(%rip),%rcx        # 28752 <_ZNSt8__detailL19__atomic_spin_countE+0x301e>
   15c9c:	48 89 ce             	mov    %rcx,%rsi
   15c9f:	48 89 c7             	mov    %rax,%rdi
   15ca2:	ff d2                	call   *%rdx
   15ca4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15ca8:	48 89 82 50 0f 00 00 	mov    %rax,0xf50(%rdx)
        vkGetRayTracingShaderGroupHandlesNV = PFN_vkGetRayTracingShaderGroupHandlesNV( vkGetDeviceProcAddr( device, "vkGetRayTracingShaderGroupHandlesNV" ) );
   15caf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cb3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15cb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15cbb:	48 8d 0d ae 2a 01 00 	lea    0x12aae(%rip),%rcx        # 28770 <_ZNSt8__detailL19__atomic_spin_countE+0x303c>
   15cc2:	48 89 ce             	mov    %rcx,%rsi
   15cc5:	48 89 c7             	mov    %rax,%rdi
   15cc8:	ff d2                	call   *%rdx
   15cca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15cce:	48 89 82 58 0f 00 00 	mov    %rax,0xf58(%rdx)
        if ( !vkGetRayTracingShaderGroupHandlesKHR )
   15cd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cd9:	48 8b 80 28 0d 00 00 	mov    0xd28(%rax),%rax
   15ce0:	48 85 c0             	test   %rax,%rax
   15ce3:	75 16                	jne    15cfb <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6aef>
          vkGetRayTracingShaderGroupHandlesKHR = vkGetRayTracingShaderGroupHandlesNV;
   15ce5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ce9:	48 8b 90 58 0f 00 00 	mov    0xf58(%rax),%rdx
   15cf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cf4:	48 89 90 28 0d 00 00 	mov    %rdx,0xd28(%rax)
        vkGetAccelerationStructureHandleNV = PFN_vkGetAccelerationStructureHandleNV( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureHandleNV" ) );
   15cfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d07:	48 8d 0d 8a 2a 01 00 	lea    0x12a8a(%rip),%rcx        # 28798 <_ZNSt8__detailL19__atomic_spin_countE+0x3064>
   15d0e:	48 89 ce             	mov    %rcx,%rsi
   15d11:	48 89 c7             	mov    %rax,%rdi
   15d14:	ff d2                	call   *%rdx
   15d16:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d1a:	48 89 82 60 0f 00 00 	mov    %rax,0xf60(%rdx)
          PFN_vkCmdWriteAccelerationStructuresPropertiesNV( vkGetDeviceProcAddr( device, "vkCmdWriteAccelerationStructuresPropertiesNV" ) );
   15d21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d25:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d2d:	48 8d 0d 8c 2a 01 00 	lea    0x12a8c(%rip),%rcx        # 287c0 <_ZNSt8__detailL19__atomic_spin_countE+0x308c>
   15d34:	48 89 ce             	mov    %rcx,%rsi
   15d37:	48 89 c7             	mov    %rax,%rdi
   15d3a:	ff d2                	call   *%rdx
        vkCmdWriteAccelerationStructuresPropertiesNV =
   15d3c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d40:	48 89 82 68 0f 00 00 	mov    %rax,0xf68(%rdx)
        vkCompileDeferredNV = PFN_vkCompileDeferredNV( vkGetDeviceProcAddr( device, "vkCompileDeferredNV" ) );
   15d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d4b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d53:	48 8d 0d 93 2a 01 00 	lea    0x12a93(%rip),%rcx        # 287ed <_ZNSt8__detailL19__atomic_spin_countE+0x30b9>
   15d5a:	48 89 ce             	mov    %rcx,%rsi
   15d5d:	48 89 c7             	mov    %rax,%rdi
   15d60:	ff d2                	call   *%rdx
   15d62:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d66:	48 89 82 70 0f 00 00 	mov    %rax,0xf70(%rdx)
        vkCmdSetExclusiveScissorNV = PFN_vkCmdSetExclusiveScissorNV( vkGetDeviceProcAddr( device, "vkCmdSetExclusiveScissorNV" ) );
   15d6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d71:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d79:	48 8d 0d 81 2a 01 00 	lea    0x12a81(%rip),%rcx        # 28801 <_ZNSt8__detailL19__atomic_spin_countE+0x30cd>
   15d80:	48 89 ce             	mov    %rcx,%rsi
   15d83:	48 89 c7             	mov    %rax,%rdi
   15d86:	ff d2                	call   *%rdx
   15d88:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d8c:	48 89 82 78 0f 00 00 	mov    %rax,0xf78(%rdx)
        vkCmdBindShadingRateImageNV = PFN_vkCmdBindShadingRateImageNV( vkGetDeviceProcAddr( device, "vkCmdBindShadingRateImageNV" ) );
   15d93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d97:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d9f:	48 8d 0d 76 2a 01 00 	lea    0x12a76(%rip),%rcx        # 2881c <_ZNSt8__detailL19__atomic_spin_countE+0x30e8>
   15da6:	48 89 ce             	mov    %rcx,%rsi
   15da9:	48 89 c7             	mov    %rax,%rdi
   15dac:	ff d2                	call   *%rdx
   15dae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15db2:	48 89 82 80 0f 00 00 	mov    %rax,0xf80(%rdx)
          PFN_vkCmdSetViewportShadingRatePaletteNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportShadingRatePaletteNV" ) );
   15db9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15dbd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15dc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15dc5:	48 8d 0d 6c 2a 01 00 	lea    0x12a6c(%rip),%rcx        # 28838 <_ZNSt8__detailL19__atomic_spin_countE+0x3104>
   15dcc:	48 89 ce             	mov    %rcx,%rsi
   15dcf:	48 89 c7             	mov    %rax,%rdi
   15dd2:	ff d2                	call   *%rdx
        vkCmdSetViewportShadingRatePaletteNV =
   15dd4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15dd8:	48 89 82 88 0f 00 00 	mov    %rax,0xf88(%rdx)
        vkCmdSetCoarseSampleOrderNV = PFN_vkCmdSetCoarseSampleOrderNV( vkGetDeviceProcAddr( device, "vkCmdSetCoarseSampleOrderNV" ) );
   15ddf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15de3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15de7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15deb:	48 8d 0d 6b 2a 01 00 	lea    0x12a6b(%rip),%rcx        # 2885d <_ZNSt8__detailL19__atomic_spin_countE+0x3129>
   15df2:	48 89 ce             	mov    %rcx,%rsi
   15df5:	48 89 c7             	mov    %rax,%rdi
   15df8:	ff d2                	call   *%rdx
   15dfa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15dfe:	48 89 82 90 0f 00 00 	mov    %rax,0xf90(%rdx)
        vkGetFramebufferTilePropertiesQCOM = PFN_vkGetFramebufferTilePropertiesQCOM( vkGetDeviceProcAddr( device, "vkGetFramebufferTilePropertiesQCOM" ) );
   15e05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e09:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e11:	48 8d 0d 68 2a 01 00 	lea    0x12a68(%rip),%rcx        # 28880 <_ZNSt8__detailL19__atomic_spin_countE+0x314c>
   15e18:	48 89 ce             	mov    %rcx,%rsi
   15e1b:	48 89 c7             	mov    %rax,%rdi
   15e1e:	ff d2                	call   *%rdx
   15e20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e24:	48 89 82 98 0f 00 00 	mov    %rax,0xf98(%rdx)
          PFN_vkGetDynamicRenderingTilePropertiesQCOM( vkGetDeviceProcAddr( device, "vkGetDynamicRenderingTilePropertiesQCOM" ) );
   15e2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e2f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e37:	48 8d 0d 6a 2a 01 00 	lea    0x12a6a(%rip),%rcx        # 288a8 <_ZNSt8__detailL19__atomic_spin_countE+0x3174>
   15e3e:	48 89 ce             	mov    %rcx,%rsi
   15e41:	48 89 c7             	mov    %rax,%rdi
   15e44:	ff d2                	call   *%rdx
        vkGetDynamicRenderingTilePropertiesQCOM =
   15e46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e4a:	48 89 82 a0 0f 00 00 	mov    %rax,0xfa0(%rdx)
          PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE( vkGetDeviceProcAddr( device, "vkGetDescriptorSetLayoutHostMappingInfoVALVE" ) );
   15e51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e55:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e5d:	48 8d 0d 6c 2a 01 00 	lea    0x12a6c(%rip),%rcx        # 288d0 <_ZNSt8__detailL19__atomic_spin_countE+0x319c>
   15e64:	48 89 ce             	mov    %rcx,%rsi
   15e67:	48 89 c7             	mov    %rax,%rdi
   15e6a:	ff d2                	call   *%rdx
        vkGetDescriptorSetLayoutHostMappingInfoVALVE =
   15e6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e70:	48 89 82 a8 0f 00 00 	mov    %rax,0xfa8(%rdx)
        vkGetDescriptorSetHostMappingVALVE = PFN_vkGetDescriptorSetHostMappingVALVE( vkGetDeviceProcAddr( device, "vkGetDescriptorSetHostMappingVALVE" ) );
   15e77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e7b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e83:	48 8d 0d 76 2a 01 00 	lea    0x12a76(%rip),%rcx        # 28900 <_ZNSt8__detailL19__atomic_spin_countE+0x31cc>
   15e8a:	48 89 ce             	mov    %rcx,%rsi
   15e8d:	48 89 c7             	mov    %rax,%rdi
   15e90:	ff d2                	call   *%rdx
   15e92:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e96:	48 89 82 b0 0f 00 00 	mov    %rax,0xfb0(%rdx)
      }
   15e9d:	90                   	nop
   15e9e:	c9                   	leave
   15e9f:	c3                   	ret

0000000000015ea0 <_ZNK2vk4raii8InstancedeEv>:
      VULKAN_HPP_NAMESPACE::Instance const & operator*() const VULKAN_HPP_NOEXCEPT
   15ea0:	55                   	push   %rbp
   15ea1:	48 89 e5             	mov    %rsp,%rbp
   15ea4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_instance;
   15ea8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   15eac:	5d                   	pop    %rbp
   15ead:	c3                   	ret

0000000000015eae <_ZN2vk14PhysicalDeviceC1Ev>:
    VULKAN_HPP_CONSTEXPR PhysicalDevice() = default;
   15eae:	55                   	push   %rbp
   15eaf:	48 89 e5             	mov    %rsp,%rbp
   15eb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15eb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15eba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   15ec1:	90                   	nop
   15ec2:	5d                   	pop    %rbp
   15ec3:	c3                   	ret

0000000000015ec4 <_ZN2vk4raii14PhysicalDeviceC1ERKNS0_8InstanceEP18VkPhysicalDevice_T>:
      PhysicalDevice( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const & instance, VkPhysicalDevice physicalDevice )
   15ec4:	55                   	push   %rbp
   15ec5:	48 89 e5             	mov    %rsp,%rbp
   15ec8:	48 83 ec 20          	sub    $0x20,%rsp
   15ecc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15ed0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   15ed4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        : m_physicalDevice( physicalDevice ), m_dispatcher( instance.getDispatcher() )
   15ed8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15edc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   15ee0:	48 89 d6             	mov    %rdx,%rsi
   15ee3:	48 89 c7             	mov    %rax,%rdi
   15ee6:	e8 f5 92 ff ff       	call   f1e0 <_ZN2vk14PhysicalDeviceC1EP18VkPhysicalDevice_T>
   15eeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15eef:	48 89 c7             	mov    %rax,%rdi
   15ef2:	e8 13 35 ff ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   15ef7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15efb:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   15eff:	90                   	nop
   15f00:	c9                   	leave
   15f01:	c3                   	ret

0000000000015f02 <_ZN2vk4raii14PhysicalDeviceC1ERKS1_>:
      PhysicalDevice( PhysicalDevice const & rhs ) : m_physicalDevice( rhs.m_physicalDevice ), m_dispatcher( rhs.m_dispatcher ) {}
   15f02:	55                   	push   %rbp
   15f03:	48 89 e5             	mov    %rsp,%rbp
   15f06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15f0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   15f0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f12:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   15f16:	48 8b 12             	mov    (%rdx),%rdx
   15f19:	48 89 10             	mov    %rdx,(%rax)
   15f1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15f20:	48 8b 50 08          	mov    0x8(%rax),%rdx
   15f24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f28:	48 89 50 08          	mov    %rdx,0x8(%rax)
   15f2c:	90                   	nop
   15f2d:	5d                   	pop    %rbp
   15f2e:	c3                   	ret
   15f2f:	90                   	nop

0000000000015f30 <_ZN2vk4raii14PhysicalDeviceC1EOS1_>:
      PhysicalDevice( PhysicalDevice && rhs ) VULKAN_HPP_NOEXCEPT
   15f30:	55                   	push   %rbp
   15f31:	48 89 e5             	mov    %rsp,%rbp
   15f34:	48 83 ec 30          	sub    $0x30,%rsp
   15f38:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   15f3c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        : m_physicalDevice( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_physicalDevice, {} ) )
   15f40:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   15f47:	00 
   15f48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   15f4c:	48 89 c7             	mov    %rax,%rdi
   15f4f:	e8 5a ff ff ff       	call   15eae <_ZN2vk14PhysicalDeviceC1Ev>
   15f54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   15f58:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   15f5c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   15f60:	48 89 c7             	mov    %rax,%rdi
   15f63:	e8 73 21 00 00       	call   180db <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   15f68:	48 89 c2             	mov    %rax,%rdx
   15f6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15f6f:	48 89 d6             	mov    %rdx,%rsi
   15f72:	48 89 c7             	mov    %rax,%rdi
   15f75:	e8 6f 21 00 00       	call   180e9 <_ZSt8exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>
   15f7a:	90                   	nop
   15f7b:	48 89 c2             	mov    %rax,%rdx
        : m_physicalDevice( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_physicalDevice, {} ) )
   15f7e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   15f82:	48 89 10             	mov    %rdx,(%rax)
        , m_dispatcher( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_dispatcher, nullptr ) )
   15f85:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   15f8c:	00 
   15f8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   15f91:	48 83 c0 08          	add    $0x8,%rax
   15f95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   15f99:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   15f9d:	48 89 c7             	mov    %rax,%rdi
   15fa0:	e8 74 21 00 00       	call   18119 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   15fa5:	48 89 c2             	mov    %rax,%rdx
   15fa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15fac:	48 89 d6             	mov    %rdx,%rsi
   15faf:	48 89 c7             	mov    %rax,%rdi
   15fb2:	e8 70 21 00 00       	call   18127 <_ZSt8exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>
   15fb7:	90                   	nop
        , m_dispatcher( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_dispatcher, nullptr ) )
   15fb8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   15fbc:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   15fc0:	90                   	nop
   15fc1:	c9                   	leave
   15fc2:	c3                   	ret
   15fc3:	90                   	nop

0000000000015fc4 <_ZNK2vk4raii14PhysicalDevicedeEv>:
      VULKAN_HPP_NAMESPACE::PhysicalDevice const & operator*() const VULKAN_HPP_NOEXCEPT
   15fc4:	55                   	push   %rbp
   15fc5:	48 89 e5             	mov    %rsp,%rbp
   15fc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_physicalDevice;
   15fcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   15fd0:	5d                   	pop    %rbp
   15fd1:	c3                   	ret

0000000000015fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
   15fd2:	55                   	push   %rbp
   15fd3:	48 89 e5             	mov    %rsp,%rbp
   15fd6:	48 83 ec 10          	sub    $0x10,%rsp
   15fda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
   15fde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15fe2:	48 8b 40 08          	mov    0x8(%rax),%rax
   15fe6:	48 89 c7             	mov    %rax,%rdi
   15fe9:	e8 64 05 ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   15fee:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   15ff4:	74 28                	je     1601e <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv+0x4c>
   15ff6:	48 8d 05 db 29 01 00 	lea    0x129db(%rip),%rax        # 289d8 <_ZNSt8__detailL19__atomic_spin_countE+0x32a4>
   15ffd:	48 89 c1             	mov    %rax,%rcx
   16000:	ba 0a 0b 00 00       	mov    $0xb0a,%edx
   16005:	48 8d 05 6c 29 01 00 	lea    0x1296c(%rip),%rax        # 28978 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
   1600c:	48 89 c6             	mov    %rax,%rsi
   1600f:	48 8d 05 8a 29 01 00 	lea    0x1298a(%rip),%rax        # 289a0 <_ZNSt8__detailL19__atomic_spin_countE+0x326c>
   16016:	48 89 c7             	mov    %rax,%rdi
   16019:	e8 f2 f0 fe ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
   1601e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16022:	48 8b 40 08          	mov    0x8(%rax),%rax
      }
   16026:	c9                   	leave
   16027:	c3                   	ret

0000000000016028 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
   16028:	55                   	push   %rbp
   16029:	48 89 e5             	mov    %rsp,%rbp
   1602c:	48 83 ec 10          	sub    $0x10,%rsp
   16030:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16034:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16038:	48 89 c7             	mov    %rax,%rdi
   1603b:	e8 16 11 00 00       	call   17156 <_ZNSaIN2vk4raii14PhysicalDeviceEED1Ev>
   16040:	90                   	nop
   16041:	c9                   	leave
   16042:	c3                   	ret
   16043:	90                   	nop

0000000000016044 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
   16044:	55                   	push   %rbp
   16045:	48 89 e5             	mov    %rsp,%rbp
   16048:	48 83 ec 10          	sub    $0x10,%rsp
   1604c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16050:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16054:	48 89 c7             	mov    %rax,%rdi
   16057:	e8 d2 10 00 00       	call   1712e <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implC1Ev>
   1605c:	90                   	nop
   1605d:	c9                   	leave
   1605e:	c3                   	ret
   1605f:	90                   	nop

0000000000016060 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
   16060:	55                   	push   %rbp
   16061:	48 89 e5             	mov    %rsp,%rbp
   16064:	48 83 ec 10          	sub    $0x10,%rsp
   16068:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1606c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16070:	48 89 c7             	mov    %rax,%rdi
   16073:	e8 cc ff ff ff       	call   16044 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>
   16078:	90                   	nop
   16079:	c9                   	leave
   1607a:	c3                   	ret
   1607b:	90                   	nop

000000000001607c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   1607c:	55                   	push   %rbp
   1607d:	48 89 e5             	mov    %rsp,%rbp
   16080:	48 83 ec 10          	sub    $0x10,%rsp
   16084:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16088:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1608c:	48 89 c7             	mov    %rax,%rdi
   1608f:	e8 60 11 00 00       	call   171f4 <_ZNSaIP18VkPhysicalDevice_TED1Ev>
   16094:	90                   	nop
   16095:	c9                   	leave
   16096:	c3                   	ret

0000000000016097 <_ZN9__gnu_cxxeqIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    [[nodiscard]]
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   16097:	55                   	push   %rbp
   16098:	48 89 e5             	mov    %rsp,%rbp
   1609b:	53                   	push   %rbx
   1609c:	48 83 ec 18          	sub    $0x18,%rsp
   160a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   160a4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
   160a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   160ac:	48 89 c7             	mov    %rax,%rdi
   160af:	e8 1e 00 00 00       	call   160d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
   160b4:	48 8b 18             	mov    (%rax),%rbx
   160b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   160bb:	48 89 c7             	mov    %rax,%rdi
   160be:	e8 0f 00 00 00       	call   160d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
   160c3:	48 8b 00             	mov    (%rax),%rax
   160c6:	48 39 c3             	cmp    %rax,%rbx
   160c9:	0f 94 c0             	sete   %al
   160cc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   160d0:	c9                   	leave
   160d1:	c3                   	ret

00000000000160d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   160d2:	55                   	push   %rbp
   160d3:	48 89 e5             	mov    %rsp,%rbp
   160d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   160da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160de:	5d                   	pop    %rbp
   160df:	c3                   	ret

00000000000160e0 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   160e0:	55                   	push   %rbp
   160e1:	48 89 e5             	mov    %rsp,%rbp
   160e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   160e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160ec:	48 8b 00             	mov    (%rax),%rax
   160ef:	5d                   	pop    %rbp
   160f0:	c3                   	ret
   160f1:	90                   	nop

00000000000160f2 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE>:
      PhysicalDevices( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const & instance )
   160f2:	55                   	push   %rbp
   160f3:	48 89 e5             	mov    %rsp,%rbp
   160f6:	41 54                	push   %r12
   160f8:	53                   	push   %rbx
   160f9:	48 83 ec 70          	sub    $0x70,%rsp
   160fd:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   16101:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
      {
   16105:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   16109:	48 89 c7             	mov    %rax,%rdi
   1610c:	e8 4f ff ff ff       	call   16060 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>
        VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * dispatcher = instance.getDispatcher();
   16111:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   16115:	48 89 c7             	mov    %rax,%rdi
   16118:	e8 ed 32 ff ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   1611d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        std::vector<VkPhysicalDevice>                                               physicalDevices;
   16121:	66 0f ef c0          	pxor   %xmm0,%xmm0
   16125:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
   16129:	66 0f d6 45 c0       	movq   %xmm0,-0x40(%rbp)
            dispatcher->vkEnumeratePhysicalDevices( static_cast<VkInstance>( *instance ), &physicalDeviceCount, nullptr ) );
   1612e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16132:	48 8b 58 18          	mov    0x18(%rax),%rbx
   16136:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1613a:	48 89 c7             	mov    %rax,%rdi
   1613d:	e8 5e fd ff ff       	call   15ea0 <_ZNK2vk4raii8InstancedeEv>
   16142:	48 89 c7             	mov    %rax,%rdi
   16145:	e8 4a 2f ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   1614a:	48 89 c1             	mov    %rax,%rcx
   1614d:	48 8d 45 ac          	lea    -0x54(%rbp),%rax
   16151:	ba 00 00 00 00       	mov    $0x0,%edx
   16156:	48 89 c6             	mov    %rax,%rsi
   16159:	48 89 cf             	mov    %rcx,%rdi
   1615c:	ff d3                	call   *%rbx
   1615e:	89 45 ec             	mov    %eax,-0x14(%rbp)
          if ( ( result == VULKAN_HPP_NAMESPACE::Result::eSuccess ) && physicalDeviceCount )
   16161:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   16165:	75 5b                	jne    161c2 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0xd0>
   16167:	8b 45 ac             	mov    -0x54(%rbp),%eax
   1616a:	85 c0                	test   %eax,%eax
   1616c:	74 54                	je     161c2 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0xd0>
            physicalDevices.resize( physicalDeviceCount );
   1616e:	8b 45 ac             	mov    -0x54(%rbp),%eax
   16171:	89 c2                	mov    %eax,%edx
   16173:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   16177:	48 89 d6             	mov    %rdx,%rsi
   1617a:	48 89 c7             	mov    %rax,%rdi
   1617d:	e8 10 11 00 00       	call   17292 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm>
              dispatcher->vkEnumeratePhysicalDevices( static_cast<VkInstance>( *instance ), &physicalDeviceCount, physicalDevices.data() ) );
   16182:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16186:	48 8b 58 18          	mov    0x18(%rax),%rbx
   1618a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1618e:	48 89 c7             	mov    %rax,%rdi
   16191:	e8 82 11 00 00       	call   17318 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>
   16196:	49 89 c4             	mov    %rax,%r12
   16199:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1619d:	48 89 c7             	mov    %rax,%rdi
   161a0:	e8 fb fc ff ff       	call   15ea0 <_ZNK2vk4raii8InstancedeEv>
   161a5:	48 89 c7             	mov    %rax,%rdi
   161a8:	e8 e7 2e ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   161ad:	48 89 c1             	mov    %rax,%rcx
   161b0:	48 8d 45 ac          	lea    -0x54(%rbp),%rax
   161b4:	4c 89 e2             	mov    %r12,%rdx
   161b7:	48 89 c6             	mov    %rax,%rsi
   161ba:	48 89 cf             	mov    %rcx,%rdi
   161bd:	ff d3                	call   *%rbx
   161bf:	89 45 ec             	mov    %eax,-0x14(%rbp)
        } while ( result == VULKAN_HPP_NAMESPACE::Result::eIncomplete );
   161c2:	83 7d ec 05          	cmpl   $0x5,-0x14(%rbp)
   161c6:	0f 84 62 ff ff ff    	je     1612e <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x3c>
        if ( result == VULKAN_HPP_NAMESPACE::Result::eSuccess )
   161cc:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   161d0:	0f 85 cb 00 00 00    	jne    162a1 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x1af>
          VULKAN_HPP_ASSERT( physicalDeviceCount <= physicalDevices.size() );
   161d6:	8b 45 ac             	mov    -0x54(%rbp),%eax
   161d9:	89 c3                	mov    %eax,%ebx
   161db:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   161df:	48 89 c7             	mov    %rax,%rdi
   161e2:	e8 55 11 00 00       	call   1733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   161e7:	48 39 d8             	cmp    %rbx,%rax
   161ea:	73 28                	jae    16214 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x122>
   161ec:	48 8d 05 3d 28 01 00 	lea    0x1283d(%rip),%rax        # 28a30 <_ZNSt8__detailL19__atomic_spin_countE+0x32fc>
   161f3:	48 89 c1             	mov    %rax,%rcx
   161f6:	ba 6e 0c 00 00       	mov    $0xc6e,%edx
   161fb:	48 8d 05 76 27 01 00 	lea    0x12776(%rip),%rax        # 28978 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
   16202:	48 89 c6             	mov    %rax,%rsi
   16205:	48 8d 05 6c 28 01 00 	lea    0x1286c(%rip),%rax        # 28a78 <_ZNSt8__detailL19__atomic_spin_countE+0x3344>
   1620c:	48 89 c7             	mov    %rax,%rdi
   1620f:	e8 fc ee fe ff       	call   5110 <__assert_fail@plt>
          this->reserve( physicalDeviceCount );
   16214:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   16218:	8b 55 ac             	mov    -0x54(%rbp),%edx
   1621b:	89 d2                	mov    %edx,%edx
   1621d:	48 89 d6             	mov    %rdx,%rsi
   16220:	48 89 c7             	mov    %rax,%rdi
   16223:	e8 5c 11 00 00       	call   17384 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm>
          for ( auto const & physicalDevice : physicalDevices )
   16228:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1622c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   16230:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16234:	48 89 c7             	mov    %rax,%rdi
   16237:	e8 62 12 00 00       	call   1749e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>
   1623c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   16240:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16244:	48 89 c7             	mov    %rax,%rdi
   16247:	e8 78 12 00 00       	call   174c4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>
   1624c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   16250:	eb 33                	jmp    16285 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x193>
   16252:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   16256:	48 89 c7             	mov    %rax,%rdi
   16259:	e8 82 fe ff ff       	call   160e0 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>
   1625e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            this->emplace_back( instance, physicalDevice );
   16262:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   16266:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1626a:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   1626e:	48 89 ce             	mov    %rcx,%rsi
   16271:	48 89 c7             	mov    %rax,%rdi
   16274:	e8 95 12 00 00       	call   1750e <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_>
          for ( auto const & physicalDevice : physicalDevices )
   16279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1627d:	48 89 c7             	mov    %rax,%rdi
   16280:	e8 69 12 00 00       	call   174ee <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>
   16285:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   16289:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1628d:	48 89 d6             	mov    %rdx,%rsi
   16290:	48 89 c7             	mov    %rax,%rdi
   16293:	e8 ff fd ff ff       	call   16097 <_ZN9__gnu_cxxeqIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   16298:	83 f0 01             	xor    $0x1,%eax
   1629b:	84 c0                	test   %al,%al
   1629d:	75 b3                	jne    16252 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x160>
   1629f:	eb 14                	jmp    162b5 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x1c3>
          throwResultException( result, "vkEnumeratePhysicalDevices" );
   162a1:	8b 45 ec             	mov    -0x14(%rbp),%eax
   162a4:	48 8d 15 fb 27 01 00 	lea    0x127fb(%rip),%rdx        # 28aa6 <_ZNSt8__detailL19__atomic_spin_countE+0x3372>
   162ab:	48 89 d6             	mov    %rdx,%rsi
   162ae:	89 c7                	mov    %eax,%edi
   162b0:	e8 1b 6e ff ff       	call   d0d0 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   162b5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   162b9:	48 89 c7             	mov    %rax,%rdi
   162bc:	e8 8d 0f 00 00       	call   1724e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   162c1:	eb 26                	jmp    162e9 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x1f7>
   162c3:	48 89 c3             	mov    %rax,%rbx
   162c6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   162ca:	48 89 c7             	mov    %rax,%rdi
   162cd:	e8 7c 0f 00 00       	call   1724e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   162d2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   162d6:	48 89 c7             	mov    %rax,%rdi
   162d9:	e8 d2 0e 00 00       	call   171b0 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>
   162de:	48 89 d8             	mov    %rbx,%rax
   162e1:	48 89 c7             	mov    %rax,%rdi
   162e4:	e8 b7 f0 fe ff       	call   53a0 <_Unwind_Resume@plt>
   162e9:	48 83 c4 70          	add    $0x70,%rsp
   162ed:	5b                   	pop    %rbx
   162ee:	41 5c                	pop    %r12
   162f0:	5d                   	pop    %rbp
   162f1:	c3                   	ret

00000000000162f2 <_ZN2vk6DeviceC1Ev>:
    VULKAN_HPP_CONSTEXPR Device() = default;
   162f2:	55                   	push   %rbp
   162f3:	48 89 e5             	mov    %rsp,%rbp
   162f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   162fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   162fe:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   16305:	90                   	nop
   16306:	5d                   	pop    %rbp
   16307:	c3                   	ret

0000000000016308 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      Device( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::PhysicalDevice const &         physicalDevice,
   16308:	55                   	push   %rbp
   16309:	48 89 e5             	mov    %rsp,%rbp
   1630c:	41 55                	push   %r13
   1630e:	41 54                	push   %r12
   16310:	53                   	push   %rbx
   16311:	48 83 ec 48          	sub    $0x48,%rsp
   16315:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   16319:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   1631d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   16321:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   16325:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   16329:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   16330:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   16334:	48 89 c7             	mov    %rax,%rdi
   16337:	e8 b6 ff ff ff       	call   162f2 <_ZN2vk6DeviceC1Ev>
   1633c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   16340:	48 89 c7             	mov    %rax,%rdi
   16343:	e8 d4 0d 00 00       	call   1711c <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   16348:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1634c:	48 89 42 08          	mov    %rax,0x8(%rdx)
   16350:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   16354:	48 83 c0 10          	add    $0x10,%rax
   16358:	48 89 c7             	mov    %rax,%rdi
   1635b:	e8 b2 12 00 00       	call   17612 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>
          physicalDevice.getDispatcher()->vkCreateDevice( static_cast<VkPhysicalDevice>( *physicalDevice ),
   16360:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   16364:	48 89 c7             	mov    %rax,%rdi
   16367:	e8 66 fc ff ff       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1636c:	4c 8b 68 58          	mov    0x58(%rax),%r13
                                                          reinterpret_cast<VkDevice *>( &m_device ) ) );
   16370:	4c 8b 65 c8          	mov    -0x38(%rbp),%r12
                                                          reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   16374:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   16378:	48 8b 58 08          	mov    0x8(%rax),%rbx
          physicalDevice.getDispatcher()->vkCreateDevice( static_cast<VkPhysicalDevice>( *physicalDevice ),
   1637c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   16380:	48 89 c7             	mov    %rax,%rdi
   16383:	e8 3c fc ff ff       	call   15fc4 <_ZNK2vk4raii14PhysicalDevicedeEv>
   16388:	48 89 c7             	mov    %rax,%rdi
   1638b:	e8 6a 8e ff ff       	call   f1fa <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
   16390:	48 89 c7             	mov    %rax,%rdi
   16393:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   16397:	4c 89 e1             	mov    %r12,%rcx
   1639a:	48 89 da             	mov    %rbx,%rdx
   1639d:	48 89 c6             	mov    %rax,%rsi
   163a0:	41 ff d5             	call   *%r13
   163a3:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   163a6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   163aa:	74 14                	je     163c0 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0xb8>
          throwResultException( result, "vkCreateDevice" );
   163ac:	8b 45 dc             	mov    -0x24(%rbp),%eax
   163af:	48 8d 15 0b 27 01 00 	lea    0x1270b(%rip),%rdx        # 28ac1 <_ZNSt8__detailL19__atomic_spin_countE+0x338d>
   163b6:	48 89 d6             	mov    %rdx,%rsi
   163b9:	89 c7                	mov    %eax,%edi
   163bb:	e8 10 6d ff ff       	call   d0d0 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   163c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   163c4:	48 8d 58 10          	lea    0x10(%rax),%rbx
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   163c8:	bf b8 0f 00 00       	mov    $0xfb8,%edi
   163cd:	e8 4e ee fe ff       	call   5220 <_Znwm@plt>
   163d2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   163d6:	41 bd 01 00 00 00    	mov    $0x1,%r13d
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   163dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   163e0:	48 89 c7             	mov    %rax,%rdi
   163e3:	e8 46 2c ff ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
   163e8:	49 89 c4             	mov    %rax,%r12
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   163eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   163ef:	48 89 c7             	mov    %rax,%rdi
   163f2:	e8 db fb ff ff       	call   15fd2 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   163f7:	48 8b 80 40 03 00 00 	mov    0x340(%rax),%rax
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   163fe:	4c 89 e2             	mov    %r12,%rdx
   16401:	48 89 c6             	mov    %rax,%rsi
   16404:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   16408:	e8 ff 8d ff ff       	call   f20c <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   1640d:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   16411:	48 89 df             	mov    %rbx,%rdi
   16414:	e8 03 40 ff ff       	call   a41c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
   16419:	eb 36                	jmp    16451 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x149>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   1641b:	48 89 c3             	mov    %rax,%rbx
   1641e:	45 84 ed             	test   %r13b,%r13b
   16421:	74 13                	je     16436 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x12e>
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   16423:	be b8 0f 00 00       	mov    $0xfb8,%esi
   16428:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   1642c:	e8 ff ed fe ff       	call   5230 <_ZdlPvm@plt>
   16431:	eb 03                	jmp    16436 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x12e>
      }
   16433:	48 89 c3             	mov    %rax,%rbx
   16436:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1643a:	48 83 c0 10          	add    $0x10,%rax
   1643e:	48 89 c7             	mov    %rax,%rdi
   16441:	e8 72 3f ff ff       	call   a3b8 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev>
   16446:	48 89 d8             	mov    %rbx,%rax
   16449:	48 89 c7             	mov    %rax,%rdi
   1644c:	e8 4f ef fe ff       	call   53a0 <_Unwind_Resume@plt>
   16451:	48 83 c4 48          	add    $0x48,%rsp
   16455:	5b                   	pop    %rbx
   16456:	41 5c                	pop    %r12
   16458:	41 5d                	pop    %r13
   1645a:	5d                   	pop    %rbp
   1645b:	c3                   	ret

000000000001645c <_ZNK2vk4raii6DevicedeEv>:
      VULKAN_HPP_NAMESPACE::Device const & operator*() const VULKAN_HPP_NOEXCEPT
   1645c:	55                   	push   %rbp
   1645d:	48 89 e5             	mov    %rsp,%rbp
   16460:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_device;
   16464:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   16468:	5d                   	pop    %rbp
   16469:	c3                   	ret

000000000001646a <_ZN2vk5QueueC1Ev>:
    VULKAN_HPP_CONSTEXPR Queue() = default;
   1646a:	55                   	push   %rbp
   1646b:	48 89 e5             	mov    %rsp,%rbp
   1646e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16472:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16476:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1647d:	90                   	nop
   1647e:	5d                   	pop    %rbp
   1647f:	c3                   	ret

0000000000016480 <_ZN2vk4raii5QueueC1ERKNS0_6DeviceEjj>:
      Queue( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Device const & device, uint32_t queueFamilyIndex, uint32_t queueIndex )
   16480:	55                   	push   %rbp
   16481:	48 89 e5             	mov    %rsp,%rbp
   16484:	41 54                	push   %r12
   16486:	53                   	push   %rbx
   16487:	48 83 ec 20          	sub    $0x20,%rsp
   1648b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1648f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   16493:	89 55 dc             	mov    %edx,-0x24(%rbp)
   16496:	89 4d d8             	mov    %ecx,-0x28(%rbp)
        : m_dispatcher( device.getDispatcher() )
   16499:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1649d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   164a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   164a8:	48 89 c7             	mov    %rax,%rdi
   164ab:	e8 ba ff ff ff       	call   1646a <_ZN2vk5QueueC1Ev>
   164b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   164b4:	48 89 c7             	mov    %rax,%rdi
   164b7:	e8 b0 30 ff ff       	call   956c <_ZNK2vk4raii6Device13getDispatcherEv>
   164bc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   164c0:	48 89 42 08          	mov    %rax,0x8(%rdx)
        getDispatcher()->vkGetDeviceQueue( static_cast<VkDevice>( *device ), queueFamilyIndex, queueIndex, reinterpret_cast<VkQueue *>( &m_queue ) );
   164c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   164c8:	48 89 c7             	mov    %rax,%rdi
   164cb:	e8 66 00 00 00       	call   16536 <_ZNK2vk4raii5Queue13getDispatcherEv>
   164d0:	4c 8b 60 20          	mov    0x20(%rax),%r12
   164d4:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   164d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   164dc:	48 89 c7             	mov    %rax,%rdi
   164df:	e8 78 ff ff ff       	call   1645c <_ZNK2vk4raii6DevicedeEv>
   164e4:	48 89 c7             	mov    %rax,%rdi
   164e7:	e8 42 2b ff ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
   164ec:	48 89 c7             	mov    %rax,%rdi
   164ef:	8b 55 d8             	mov    -0x28(%rbp),%edx
   164f2:	8b 45 dc             	mov    -0x24(%rbp),%eax
   164f5:	48 89 d9             	mov    %rbx,%rcx
   164f8:	89 c6                	mov    %eax,%esi
   164fa:	41 ff d4             	call   *%r12
      }
   164fd:	90                   	nop
   164fe:	48 83 c4 20          	add    $0x20,%rsp
   16502:	5b                   	pop    %rbx
   16503:	41 5c                	pop    %r12
   16505:	5d                   	pop    %rbp
   16506:	c3                   	ret
   16507:	90                   	nop

0000000000016508 <_ZN2vk4raii5QueueC1ERKS1_>:
      Queue( Queue const & rhs ) : m_queue( rhs.m_queue ), m_dispatcher( rhs.m_dispatcher ) {}
   16508:	55                   	push   %rbp
   16509:	48 89 e5             	mov    %rsp,%rbp
   1650c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16510:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16514:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16518:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1651c:	48 8b 12             	mov    (%rdx),%rdx
   1651f:	48 89 10             	mov    %rdx,(%rax)
   16522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16526:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1652a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1652e:	48 89 50 08          	mov    %rdx,0x8(%rax)
   16532:	90                   	nop
   16533:	5d                   	pop    %rbp
   16534:	c3                   	ret
   16535:	90                   	nop

0000000000016536 <_ZNK2vk4raii5Queue13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
   16536:	55                   	push   %rbp
   16537:	48 89 e5             	mov    %rsp,%rbp
   1653a:	48 83 ec 10          	sub    $0x10,%rsp
   1653e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
   16542:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16546:	48 8b 40 08          	mov    0x8(%rax),%rax
   1654a:	48 89 c7             	mov    %rax,%rdi
   1654d:	e8 00 00 ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   16552:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   16558:	74 28                	je     16582 <_ZNK2vk4raii5Queue13getDispatcherEv+0x4c>
   1655a:	48 8d 05 bf 25 01 00 	lea    0x125bf(%rip),%rax        # 28b20 <_ZNSt8__detailL19__atomic_spin_countE+0x33ec>
   16561:	48 89 c1             	mov    %rax,%rcx
   16564:	ba c7 23 00 00       	mov    $0x23c7,%edx
   16569:	48 8d 05 08 24 01 00 	lea    0x12408(%rip),%rax        # 28978 <_ZNSt8__detailL19__atomic_spin_countE+0x3244>
   16570:	48 89 c6             	mov    %rax,%rsi
   16573:	48 8d 05 26 24 01 00 	lea    0x12426(%rip),%rax        # 289a0 <_ZNSt8__detailL19__atomic_spin_countE+0x326c>
   1657a:	48 89 c7             	mov    %rax,%rdi
   1657d:	e8 8e eb fe ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
   16582:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16586:	48 8b 40 08          	mov    0x8(%rax),%rax
      }
   1658a:	c9                   	leave
   1658b:	c3                   	ret

000000000001658c <_ZNK2vk4raii10SurfaceKHRdeEv>:
      VULKAN_HPP_NAMESPACE::SurfaceKHR const & operator*() const VULKAN_HPP_NOEXCEPT
   1658c:	55                   	push   %rbp
   1658d:	48 89 e5             	mov    %rsp,%rbp
   16590:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_surface;
   16594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16598:	48 83 c0 08          	add    $0x8,%rax
      }
   1659c:	5d                   	pop    %rbp
   1659d:	c3                   	ret

000000000001659e <_ZN2vk4raii15PhysicalDevicesD1Ev>:
    class PhysicalDevices : public std::vector<VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::PhysicalDevice>
   1659e:	55                   	push   %rbp
   1659f:	48 89 e5             	mov    %rsp,%rbp
   165a2:	48 83 ec 10          	sub    $0x10,%rsp
   165a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   165aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   165ae:	48 89 c7             	mov    %rax,%rdi
   165b1:	e8 fa 0b 00 00       	call   171b0 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>
   165b6:	90                   	nop
   165b7:	c9                   	leave
   165b8:	c3                   	ret
   165b9:	90                   	nop

00000000000165ba <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>:
    VULKAN_HPP_CONSTEXPR ArrayWrapper1D() VULKAN_HPP_NOEXCEPT : std::array<T, N>() {}
   165ba:	55                   	push   %rbp
   165bb:	48 89 e5             	mov    %rsp,%rbp
   165be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   165c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   165c6:	b9 00 01 00 00       	mov    $0x100,%ecx
   165cb:	be 00 00 00 00       	mov    $0x0,%esi
   165d0:	48 89 30             	mov    %rsi,(%rax)
   165d3:	89 ca                	mov    %ecx,%edx
   165d5:	48 01 c2             	add    %rax,%rdx
   165d8:	48 83 c2 08          	add    $0x8,%rdx
   165dc:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   165e0:	48 8d 50 08          	lea    0x8(%rax),%rdx
   165e4:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   165e8:	48 29 d0             	sub    %rdx,%rax
   165eb:	01 c1                	add    %eax,%ecx
   165ed:	83 e1 f8             	and    $0xfffffff8,%ecx
   165f0:	89 c8                	mov    %ecx,%eax
   165f2:	c1 e8 03             	shr    $0x3,%eax
   165f5:	89 c1                	mov    %eax,%ecx
   165f7:	48 89 d7             	mov    %rdx,%rdi
   165fa:	48 89 f0             	mov    %rsi,%rax
   165fd:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   16600:	90                   	nop
   16601:	5d                   	pop    %rbp
   16602:	c3                   	ret
   16603:	90                   	nop

0000000000016604 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE12_Vector_implD1Ev>:
   16604:	55                   	push   %rbp
   16605:	48 89 e5             	mov    %rsp,%rbp
   16608:	48 83 ec 10          	sub    $0x10,%rsp
   1660c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16610:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16614:	48 89 c7             	mov    %rax,%rdi
   16617:	e8 1c 10 00 00       	call   17638 <_ZNSaIN2vk21QueueFamilyPropertiesEED1Ev>
   1661c:	90                   	nop
   1661d:	c9                   	leave
   1661e:	c3                   	ret
   1661f:	90                   	nop

0000000000016620 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE12_Vector_implD1Ev>:
   16620:	55                   	push   %rbp
   16621:	48 89 e5             	mov    %rsp,%rbp
   16624:	48 83 ec 10          	sub    $0x10,%rsp
   16628:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1662c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16630:	48 89 c7             	mov    %rax,%rdi
   16633:	e8 8a 11 00 00       	call   177c2 <_ZNSaIN2vk19ExtensionPropertiesEED1Ev>
   16638:	90                   	nop
   16639:	c9                   	leave
   1663a:	c3                   	ret
   1663b:	90                   	nop

000000000001663c <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implD1Ev>:
   1663c:	55                   	push   %rbp
   1663d:	48 89 e5             	mov    %rsp,%rbp
   16640:	48 83 ec 10          	sub    $0x10,%rsp
   16644:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1664c:	48 89 c7             	mov    %rax,%rdi
   1664f:	e8 24 13 00 00       	call   17978 <_ZNSaIN2vk15LayerPropertiesEED1Ev>
   16654:	90                   	nop
   16655:	c9                   	leave
   16656:	c3                   	ret
   16657:	90                   	nop

0000000000016658 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
   16658:	55                   	push   %rbp
   16659:	48 89 e5             	mov    %rsp,%rbp
   1665c:	48 83 ec 10          	sub    $0x10,%rsp
   16660:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_color = _S_red;
   16664:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16668:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      _M_reset();
   1666e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16672:	48 89 c7             	mov    %rax,%rdi
   16675:	e8 04 00 00 00       	call   1667e <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
   1667a:	90                   	nop
   1667b:	c9                   	leave
   1667c:	c3                   	ret
   1667d:	90                   	nop

000000000001667e <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
   1667e:	55                   	push   %rbp
   1667f:	48 89 e5             	mov    %rsp,%rbp
   16682:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_parent = 0;
   16686:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1668a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   16691:	00 
      _M_header._M_left = &_M_header;
   16692:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16696:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1669a:	48 89 50 10          	mov    %rdx,0x10(%rax)
      _M_header._M_right = &_M_header;
   1669e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   166a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166a6:	48 89 50 18          	mov    %rdx,0x18(%rax)
      _M_node_count = 0;
   166aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166ae:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   166b5:	00 
    }
   166b6:	90                   	nop
   166b7:	5d                   	pop    %rbp
   166b8:	c3                   	ret
   166b9:	90                   	nop

00000000000166ba <_ZNKSt19bad_optional_access4whatEv>:
  {
  public:
    bad_optional_access() = default;
    virtual ~bad_optional_access() = default;

    const char* what() const noexcept override
   166ba:	55                   	push   %rbp
   166bb:	48 89 e5             	mov    %rsp,%rbp
   166be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return "bad optional access"; }
   166c2:	48 8d 05 a0 24 01 00 	lea    0x124a0(%rip),%rax        # 28b69 <_ZNSt8__detailL19__atomic_spin_countE+0x3435>
   166c9:	5d                   	pop    %rbp
   166ca:	c3                   	ret
   166cb:	90                   	nop

00000000000166cc <_ZNSt19bad_optional_accessC1Ev>:
    bad_optional_access() = default;
   166cc:	55                   	push   %rbp
   166cd:	48 89 e5             	mov    %rsp,%rbp
   166d0:	48 83 ec 10          	sub    $0x10,%rsp
   166d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   166d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166dc:	48 89 c7             	mov    %rax,%rdi
   166df:	e8 e2 89 ff ff       	call   f0c6 <_ZNSt9exceptionC1Ev>
   166e4:	48 8d 15 75 12 02 00 	lea    0x21275(%rip),%rdx        # 37960 <_ZTVSt19bad_optional_access+0x10>
   166eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166ef:	48 89 10             	mov    %rdx,(%rax)
   166f2:	90                   	nop
   166f3:	c9                   	leave
   166f4:	c3                   	ret

00000000000166f5 <_ZSt27__throw_bad_optional_accessv>:
  };

  // XXX Does not belong here.
  [[__noreturn__]] inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
   166f5:	55                   	push   %rbp
   166f6:	48 89 e5             	mov    %rsp,%rbp
   166f9:	53                   	push   %rbx
   166fa:	48 83 ec 08          	sub    $0x8,%rsp
   166fe:	bf 08 00 00 00       	mov    $0x8,%edi
   16703:	e8 c8 e9 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   16708:	48 89 c3             	mov    %rax,%rbx
   1670b:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
   16712:	48 89 df             	mov    %rbx,%rdi
   16715:	e8 b2 ff ff ff       	call   166cc <_ZNSt19bad_optional_accessC1Ev>
   1671a:	48 8d 05 09 6f 00 00 	lea    0x6f09(%rip),%rax        # 1d62a <_ZNSt19bad_optional_accessD1Ev>
   16721:	48 89 c2             	mov    %rax,%rdx
   16724:	48 8d 05 35 16 02 00 	lea    0x21635(%rip),%rax        # 37d60 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1672b:	48 89 c6             	mov    %rax,%rsi
   1672e:	48 89 df             	mov    %rbx,%rdi
   16731:	e8 4a ec fe ff       	call   5380 <__cxa_throw@plt>

0000000000016736 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<value_type> __l,
   16736:	55                   	push   %rbp
   16737:	48 89 e5             	mov    %rsp,%rbp
   1673a:	53                   	push   %rbx
   1673b:	48 83 ec 38          	sub    $0x38,%rsp
   1673f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   16743:	48 89 f0             	mov    %rsi,%rax
   16746:	48 89 d6             	mov    %rdx,%rsi
   16749:	48 89 f2             	mov    %rsi,%rdx
   1674c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   16750:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   16754:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
   16758:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1675c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   16760:	48 89 d6             	mov    %rdx,%rsi
   16763:	48 89 c7             	mov    %rax,%rdi
   16766:	e8 af 00 00 00       	call   1681a <_ZNSt12_Vector_baseIPKcSaIS1_EEC2ERKS2_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
   1676b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1676f:	48 89 c7             	mov    %rax,%rdi
   16772:	e8 97 01 00 00       	call   1690e <_ZNKSt16initializer_listIPKcE3endEv>
   16777:	48 89 c3             	mov    %rax,%rbx
   1677a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1677e:	48 89 c7             	mov    %rax,%rdi
   16781:	e8 76 01 00 00       	call   168fc <_ZNKSt16initializer_listIPKcE5beginEv>
   16786:	48 89 c1             	mov    %rax,%rcx
   16789:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1678d:	48 89 da             	mov    %rbx,%rdx
   16790:	48 89 ce             	mov    %rcx,%rsi
   16793:	48 89 c7             	mov    %rax,%rdi
   16796:	e8 ed 01 00 00       	call   16988 <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
   1679b:	eb 1a                	jmp    167b7 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_+0x81>
   1679d:	48 89 c3             	mov    %rax,%rbx
   167a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   167a4:	48 89 c7             	mov    %rax,%rdi
   167a7:	e8 58 13 00 00       	call   17b04 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   167ac:	48 89 d8             	mov    %rbx,%rax
   167af:	48 89 c7             	mov    %rax,%rdi
   167b2:	e8 e9 eb fe ff       	call   53a0 <_Unwind_Resume@plt>
   167b7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   167bb:	c9                   	leave
   167bc:	c3                   	ret
   167bd:	90                   	nop

00000000000167be <_ZNSaIPKcEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   167be:	55                   	push   %rbp
   167bf:	48 89 e5             	mov    %rsp,%rbp
   167c2:	48 83 ec 10          	sub    $0x10,%rsp
   167c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   167ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   167ce:	48 89 c7             	mov    %rax,%rdi
   167d1:	e8 1c 00 00 00       	call   167f2 <_ZNSt15__new_allocatorIPKcEC2Ev>
   167d6:	90                   	nop
   167d7:	c9                   	leave
   167d8:	c3                   	ret
   167d9:	90                   	nop

00000000000167da <_ZNSaIPKcED2Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   167da:	55                   	push   %rbp
   167db:	48 89 e5             	mov    %rsp,%rbp
   167de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   167e2:	90                   	nop
   167e3:	5d                   	pop    %rbp
   167e4:	c3                   	ret
   167e5:	90                   	nop

00000000000167e6 <_ZNSaIPKcED1Ev>:
   167e6:	55                   	push   %rbp
   167e7:	48 89 e5             	mov    %rsp,%rbp
   167ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   167ee:	90                   	nop
   167ef:	5d                   	pop    %rbp
   167f0:	c3                   	ret
   167f1:	90                   	nop

00000000000167f2 <_ZNSt15__new_allocatorIPKcEC2Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   167f2:	55                   	push   %rbp
   167f3:	48 89 e5             	mov    %rsp,%rbp
   167f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   167fa:	90                   	nop
   167fb:	5d                   	pop    %rbp
   167fc:	c3                   	ret
   167fd:	90                   	nop

00000000000167fe <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   167fe:	55                   	push   %rbp
   167ff:	48 89 e5             	mov    %rsp,%rbp
   16802:	48 83 ec 10          	sub    $0x10,%rsp
   16806:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1680a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1680e:	48 89 c7             	mov    %rax,%rdi
   16811:	e8 c4 ff ff ff       	call   167da <_ZNSaIPKcED2Ev>
   16816:	90                   	nop
   16817:	c9                   	leave
   16818:	c3                   	ret
   16819:	90                   	nop

000000000001681a <_ZNSt12_Vector_baseIPKcSaIS1_EEC2ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   1681a:	55                   	push   %rbp
   1681b:	48 89 e5             	mov    %rsp,%rbp
   1681e:	48 83 ec 10          	sub    $0x10,%rsp
   16822:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16826:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   1682a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1682e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16832:	48 89 d6             	mov    %rdx,%rsi
   16835:	48 89 c7             	mov    %rax,%rdi
   16838:	e8 03 00 00 00       	call   16840 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
   1683d:	90                   	nop
   1683e:	c9                   	leave
   1683f:	c3                   	ret

0000000000016840 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   16840:	55                   	push   %rbp
   16841:	48 89 e5             	mov    %rsp,%rbp
   16844:	48 83 ec 10          	sub    $0x10,%rsp
   16848:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1684c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   16850:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16854:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16858:	48 89 d6             	mov    %rdx,%rsi
   1685b:	48 89 c7             	mov    %rax,%rdi
   1685e:	e8 0f 00 00 00       	call   16872 <_ZNSaIPKcEC2ERKS1_>
   16863:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16867:	48 89 c7             	mov    %rax,%rdi
   1686a:	e8 5f 00 00 00       	call   168ce <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
   1686f:	90                   	nop
   16870:	c9                   	leave
   16871:	c3                   	ret

0000000000016872 <_ZNSaIPKcEC2ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   16872:	55                   	push   %rbp
   16873:	48 89 e5             	mov    %rsp,%rbp
   16876:	48 83 ec 10          	sub    $0x10,%rsp
   1687a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1687e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   16882:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1688a:	48 89 d6             	mov    %rdx,%rsi
   1688d:	48 89 c7             	mov    %rax,%rdi
   16890:	e8 29 00 00 00       	call   168be <_ZNSt15__new_allocatorIPKcEC2ERKS2_>
   16895:	90                   	nop
   16896:	c9                   	leave
   16897:	c3                   	ret

0000000000016898 <_ZNSaIPKcEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   16898:	55                   	push   %rbp
   16899:	48 89 e5             	mov    %rsp,%rbp
   1689c:	48 83 ec 10          	sub    $0x10,%rsp
   168a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   168a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   168a8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   168ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168b0:	48 89 d6             	mov    %rdx,%rsi
   168b3:	48 89 c7             	mov    %rax,%rdi
   168b6:	e8 03 00 00 00       	call   168be <_ZNSt15__new_allocatorIPKcEC2ERKS2_>
   168bb:	90                   	nop
   168bc:	c9                   	leave
   168bd:	c3                   	ret

00000000000168be <_ZNSt15__new_allocatorIPKcEC2ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   168be:	55                   	push   %rbp
   168bf:	48 89 e5             	mov    %rsp,%rbp
   168c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   168c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   168ca:	90                   	nop
   168cb:	5d                   	pop    %rbp
   168cc:	c3                   	ret
   168cd:	90                   	nop

00000000000168ce <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   168ce:	55                   	push   %rbp
   168cf:	48 89 e5             	mov    %rsp,%rbp
   168d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   168d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168da:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   168e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168e5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   168ec:	00 
   168ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168f1:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   168f8:	00 
	{ }
   168f9:	90                   	nop
   168fa:	5d                   	pop    %rbp
   168fb:	c3                   	ret

00000000000168fc <_ZNKSt16initializer_listIPKcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
   168fc:	55                   	push   %rbp
   168fd:	48 89 e5             	mov    %rsp,%rbp
   16900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16908:	48 8b 00             	mov    (%rax),%rax
   1690b:	5d                   	pop    %rbp
   1690c:	c3                   	ret
   1690d:	90                   	nop

000000000001690e <_ZNKSt16initializer_listIPKcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   1690e:	55                   	push   %rbp
   1690f:	48 89 e5             	mov    %rsp,%rbp
   16912:	53                   	push   %rbx
   16913:	48 83 ec 18          	sub    $0x18,%rsp
   16917:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1691b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1691f:	48 89 c7             	mov    %rax,%rdi
   16922:	e8 d5 ff ff ff       	call   168fc <_ZNKSt16initializer_listIPKcE5beginEv>
   16927:	48 89 c3             	mov    %rax,%rbx
   1692a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1692e:	48 89 c7             	mov    %rax,%rdi
   16931:	e8 0e 00 00 00       	call   16944 <_ZNKSt16initializer_listIPKcE4sizeEv>
   16936:	48 c1 e0 03          	shl    $0x3,%rax
   1693a:	48 01 d8             	add    %rbx,%rax
   1693d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16941:	c9                   	leave
   16942:	c3                   	ret
   16943:	90                   	nop

0000000000016944 <_ZNKSt16initializer_listIPKcE4sizeEv>:
      size() const noexcept { return _M_len; }
   16944:	55                   	push   %rbp
   16945:	48 89 e5             	mov    %rsp,%rbp
   16948:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1694c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16950:	48 8b 40 08          	mov    0x8(%rax),%rax
   16954:	5d                   	pop    %rbp
   16955:	c3                   	ret

0000000000016956 <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
   16956:	55                   	push   %rbp
   16957:	48 89 e5             	mov    %rsp,%rbp
   1695a:	48 83 ec 10          	sub    $0x10,%rsp
   1695e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16962:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
   16966:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1696a:	48 89 c7             	mov    %rax,%rdi
   1696d:	e8 c5 00 00 00       	call   16a37 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
   16972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16976:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1697a:	48 89 d6             	mov    %rdx,%rsi
   1697d:	48 89 c7             	mov    %rax,%rdi
   16980:	e8 bd 00 00 00       	call   16a42 <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
    }
   16985:	c9                   	leave
   16986:	c3                   	ret
   16987:	90                   	nop

0000000000016988 <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
   16988:	55                   	push   %rbp
   16989:	48 89 e5             	mov    %rsp,%rbp
   1698c:	53                   	push   %rbx
   1698d:	48 83 ec 38          	sub    $0x38,%rsp
   16991:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   16995:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   16999:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
   1699d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   169a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   169a5:	48 89 d6             	mov    %rdx,%rsi
   169a8:	48 89 c7             	mov    %rax,%rdi
   169ab:	e8 a6 ff ff ff       	call   16956 <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>
   169b0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   169b4:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   169b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   169bc:	48 89 c7             	mov    %rax,%rdi
   169bf:	e8 98 00 00 00       	call   16a5c <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   169c4:	48 89 c2             	mov    %rax,%rdx
   169c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   169cb:	48 89 d6             	mov    %rdx,%rsi
   169ce:	48 89 c7             	mov    %rax,%rdi
   169d1:	e8 94 00 00 00       	call   16a6a <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
   169d6:	48 89 c6             	mov    %rax,%rsi
   169d9:	48 89 df             	mov    %rbx,%rdi
   169dc:	e8 6b 01 00 00       	call   16b4c <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   169e1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   169e5:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   169e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   169ec:	48 8b 00             	mov    (%rax),%rax
   169ef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   169f3:	48 c1 e2 03          	shl    $0x3,%rdx
   169f7:	48 01 c2             	add    %rax,%rdx
   169fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   169fe:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
   16a02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16a06:	48 89 c7             	mov    %rax,%rdi
   16a09:	e8 4e 00 00 00       	call   16a5c <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   16a0e:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
   16a11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16a15:	48 8b 10             	mov    (%rax),%rdx
   16a18:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   16a1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   16a20:	48 89 c7             	mov    %rax,%rdi
   16a23:	e8 de 01 00 00       	call   16c06 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>
	  this->_M_impl._M_finish =
   16a28:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   16a2c:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
   16a30:	90                   	nop
   16a31:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16a35:	c9                   	leave
   16a36:	c3                   	ret

0000000000016a37 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
   16a37:	55                   	push   %rbp
   16a38:	48 89 e5             	mov    %rsp,%rbp
   16a3b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   16a3f:	90                   	nop
   16a40:	5d                   	pop    %rbp
   16a41:	c3                   	ret

0000000000016a42 <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   16a42:	55                   	push   %rbp
   16a43:	48 89 e5             	mov    %rsp,%rbp
   16a46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16a4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
   16a4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16a52:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   16a56:	48 c1 f8 03          	sar    $0x3,%rax
    }
   16a5a:	5d                   	pop    %rbp
   16a5b:	c3                   	ret

0000000000016a5c <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   16a5c:	55                   	push   %rbp
   16a5d:	48 89 e5             	mov    %rsp,%rbp
   16a60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   16a64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a68:	5d                   	pop    %rbp
   16a69:	c3                   	ret

0000000000016a6a <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
   16a6a:	55                   	push   %rbp
   16a6b:	48 89 e5             	mov    %rsp,%rbp
   16a6e:	53                   	push   %rbx
   16a6f:	48 83 ec 28          	sub    $0x28,%rsp
   16a73:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   16a77:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   16a7b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   16a7f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   16a83:	48 89 d6             	mov    %rdx,%rsi
   16a86:	48 89 c7             	mov    %rax,%rdi
   16a89:	e8 0a fe ff ff       	call   16898 <_ZNSaIPKcEC1ERKS1_>
   16a8e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   16a92:	48 89 c7             	mov    %rax,%rdi
   16a95:	e8 44 00 00 00       	call   16ade <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
   16a9a:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   16a9e:	0f 92 c3             	setb   %bl
   16aa1:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   16aa5:	48 89 c7             	mov    %rax,%rdi
   16aa8:	e8 39 fd ff ff       	call   167e6 <_ZNSaIPKcED1Ev>
   16aad:	84 db                	test   %bl,%bl
   16aaf:	74 0f                	je     16ac0 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
   16ab1:	48 8d 05 c8 20 01 00 	lea    0x120c8(%rip),%rax        # 28b80 <_ZNSt8__detailL19__atomic_spin_countE+0x344c>
   16ab8:	48 89 c7             	mov    %rax,%rdi
   16abb:	e8 20 e6 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
   16ac0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
   16ac4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16ac8:	c9                   	leave
   16ac9:	c3                   	ret

0000000000016aca <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   16aca:	55                   	push   %rbp
   16acb:	48 89 e5             	mov    %rsp,%rbp
   16ace:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   16ad2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   16ad9:	ff ff 1f 
      }
   16adc:	5d                   	pop    %rbp
   16add:	c3                   	ret

0000000000016ade <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   16ade:	55                   	push   %rbp
   16adf:	48 89 e5             	mov    %rsp,%rbp
   16ae2:	48 83 ec 20          	sub    $0x20,%rsp
   16ae6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
   16aea:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   16af1:	ff ff 0f 
   16af4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   16af8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16afc:	48 89 c7             	mov    %rax,%rdi
   16aff:	e8 c6 ff ff ff       	call   16aca <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>
   16b04:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   16b08:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   16b0c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   16b10:	48 89 d6             	mov    %rdx,%rsi
   16b13:	48 89 c7             	mov    %rax,%rdi
   16b16:	e8 05 00 00 00       	call   16b20 <_ZSt3minImERKT_S2_S2_>
   16b1b:	48 8b 00             	mov    (%rax),%rax
      }
   16b1e:	c9                   	leave
   16b1f:	c3                   	ret

0000000000016b20 <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
   16b20:	55                   	push   %rbp
   16b21:	48 89 e5             	mov    %rsp,%rbp
   16b24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16b28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__b < __a)
   16b2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16b30:	48 8b 10             	mov    (%rax),%rdx
   16b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b37:	48 8b 00             	mov    (%rax),%rax
   16b3a:	48 39 c2             	cmp    %rax,%rdx
   16b3d:	73 06                	jae    16b45 <_ZSt3minImERKT_S2_S2_+0x25>
	return __b;
   16b3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16b43:	eb 04                	jmp    16b49 <_ZSt3minImERKT_S2_S2_+0x29>
      return __a;
   16b45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   16b49:	5d                   	pop    %rbp
   16b4a:	c3                   	ret
   16b4b:	90                   	nop

0000000000016b4c <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   16b4c:	55                   	push   %rbp
   16b4d:	48 89 e5             	mov    %rsp,%rbp
   16b50:	48 83 ec 10          	sub    $0x10,%rsp
   16b54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16b58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   16b5c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   16b61:	74 15                	je     16b78 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x2c>
   16b63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b67:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16b6b:	48 89 d6             	mov    %rdx,%rsi
   16b6e:	48 89 c7             	mov    %rax,%rdi
   16b71:	e8 09 00 00 00       	call   16b7f <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>
   16b76:	eb 05                	jmp    16b7d <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x31>
   16b78:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   16b7d:	c9                   	leave
   16b7e:	c3                   	ret

0000000000016b7f <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   16b7f:	55                   	push   %rbp
   16b80:	48 89 e5             	mov    %rsp,%rbp
   16b83:	48 83 ec 20          	sub    $0x20,%rsp
   16b87:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16b8b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   16b8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b93:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16b97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16b9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   16b9f:	e8 fa f5 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   16ba4:	84 c0                	test   %al,%al
   16ba6:	74 43                	je     16beb <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x6c>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   16ba8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16bac:	b9 00 00 00 00       	mov    $0x0,%ecx
   16bb1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   16bb8:	00 
   16bb9:	48 c1 e8 3d          	shr    $0x3d,%rax
   16bbd:	48 85 c0             	test   %rax,%rax
   16bc0:	74 05                	je     16bc7 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x48>
   16bc2:	b9 01 00 00 00       	mov    $0x1,%ecx
   16bc7:	48 89 d0             	mov    %rdx,%rax
   16bca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   16bce:	48 89 c8             	mov    %rcx,%rax
   16bd1:	83 e0 01             	and    $0x1,%eax
   16bd4:	84 c0                	test   %al,%al
   16bd6:	74 05                	je     16bdd <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x5e>
	      std::__throw_bad_array_new_length();
   16bd8:	e8 a3 e5 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   16bdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16be1:	48 89 c7             	mov    %rax,%rdi
   16be4:	e8 37 e6 fe ff       	call   5220 <_Znwm@plt>
   16be9:	eb 19                	jmp    16c04 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x85>
	return __allocator_base<_Tp>::allocate(__n, 0);
   16beb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   16bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bf3:	ba 00 00 00 00       	mov    $0x0,%edx
   16bf8:	48 89 ce             	mov    %rcx,%rsi
   16bfb:	48 89 c7             	mov    %rax,%rdi
   16bfe:	e8 4f 0f 00 00       	call   17b52 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>
   16c03:	90                   	nop
      { return __a.allocate(__n); }
   16c04:	c9                   	leave
   16c05:	c3                   	ret

0000000000016c06 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   16c06:	55                   	push   %rbp
   16c07:	48 89 e5             	mov    %rsp,%rbp
   16c0a:	48 83 ec 20          	sub    $0x20,%rsp
   16c0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16c12:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16c16:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   16c1a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
   16c1e:	e8 86 f5 fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   16c23:	84 c0                	test   %al,%al
   16c25:	74 19                	je     16c40 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E+0x3a>
	return std::__do_uninit_copy(__first, __last, __result);
   16c27:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16c2b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   16c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c33:	48 89 ce             	mov    %rcx,%rsi
   16c36:	48 89 c7             	mov    %rax,%rdi
   16c39:	e8 1c 00 00 00       	call   16c5a <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_>
   16c3e:	eb 18                	jmp    16c58 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E+0x52>
#endif
      return std::uninitialized_copy(__first, __last, __result);
   16c40:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16c44:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   16c48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c4c:	48 89 ce             	mov    %rcx,%rsi
   16c4f:	48 89 c7             	mov    %rax,%rdi
   16c52:	e8 5c 0f 00 00       	call   17bb3 <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>
   16c57:	90                   	nop
    }
   16c58:	c9                   	leave
   16c59:	c3                   	ret

0000000000016c5a <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
   16c5a:	55                   	push   %rbp
   16c5b:	48 89 e5             	mov    %rsp,%rbp
   16c5e:	48 83 ec 30          	sub    $0x30,%rsp
   16c62:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16c66:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   16c6a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      _ForwardIterator __cur = __result;
   16c6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16c72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  for (; __first != __last; ++__first, (void)++__cur)
   16c76:	eb 28                	jmp    16ca0 <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_+0x46>
	    std::_Construct(std::__addressof(*__cur), *__first);
   16c78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c7c:	48 89 c7             	mov    %rax,%rdi
   16c7f:	e8 2c 00 00 00       	call   16cb0 <_ZSt11__addressofIPKcEPT_RS2_>
   16c84:	48 89 c2             	mov    %rax,%rdx
   16c87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c8b:	48 89 c6             	mov    %rax,%rsi
   16c8e:	48 89 d7             	mov    %rdx,%rdi
   16c91:	e8 28 00 00 00       	call   16cbe <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
   16c96:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   16c9b:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   16ca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ca4:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   16ca8:	75 ce                	jne    16c78 <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_+0x1e>
	  return __cur;
   16caa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   16cae:	c9                   	leave
   16caf:	c3                   	ret

0000000000016cb0 <_ZSt11__addressofIPKcEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   16cb0:	55                   	push   %rbp
   16cb1:	48 89 e5             	mov    %rsp,%rbp
   16cb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   16cb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cbc:	5d                   	pop    %rbp
   16cbd:	c3                   	ret

0000000000016cbe <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_>:
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
   16cbe:	55                   	push   %rbp
   16cbf:	48 89 e5             	mov    %rsp,%rbp
   16cc2:	53                   	push   %rbx
   16cc3:	48 83 ec 18          	sub    $0x18,%rsp
   16cc7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16ccb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    {
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
   16ccf:	e8 ca f4 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   16cd4:	84 c0                	test   %al,%al
   16cd6:	74 20                	je     16cf8 <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_+0x3a>
	{
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   16cd8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16cdc:	48 89 c7             	mov    %rax,%rdi
   16cdf:	e8 40 00 00 00       	call   16d24 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
   16ce4:	48 89 c2             	mov    %rax,%rdx
   16ce7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ceb:	48 89 d6             	mov    %rdx,%rsi
   16cee:	48 89 c7             	mov    %rax,%rdi
   16cf1:	e8 3c 00 00 00       	call   16d32 <_ZSt12construct_atIPKcJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	  return;
   16cf6:	eb 26                	jmp    16d1e <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_+0x60>
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   16cf8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16cfc:	48 89 c6             	mov    %rax,%rsi
   16cff:	bf 08 00 00 00       	mov    $0x8,%edi
   16d04:	e8 ab f4 fe ff       	call   61b4 <_ZnwmPv>
   16d09:	48 89 c3             	mov    %rax,%rbx
   16d0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16d10:	48 89 c7             	mov    %rax,%rdi
   16d13:	e8 0c 00 00 00       	call   16d24 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
   16d18:	48 8b 00             	mov    (%rax),%rax
   16d1b:	48 89 03             	mov    %rax,(%rbx)
    }
   16d1e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16d22:	c9                   	leave
   16d23:	c3                   	ret

0000000000016d24 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   16d24:	55                   	push   %rbp
   16d25:	48 89 e5             	mov    %rsp,%rbp
   16d28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   16d2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d30:	5d                   	pop    %rbp
   16d31:	c3                   	ret

0000000000016d32 <_ZSt12construct_atIPKcJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
   16d32:	55                   	push   %rbp
   16d33:	48 89 e5             	mov    %rsp,%rbp
   16d36:	53                   	push   %rbx
   16d37:	48 83 ec 18          	sub    $0x18,%rsp
   16d3b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16d3f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   16d43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16d47:	48 89 c6             	mov    %rax,%rsi
   16d4a:	bf 08 00 00 00       	mov    $0x8,%edi
   16d4f:	e8 60 f4 fe ff       	call   61b4 <_ZnwmPv>
   16d54:	48 89 c3             	mov    %rax,%rbx
   16d57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16d5b:	48 89 c7             	mov    %rax,%rdi
   16d5e:	e8 c1 ff ff ff       	call   16d24 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
   16d63:	48 8b 00             	mov    (%rax),%rax
   16d66:	48 89 03             	mov    %rax,(%rbx)
   16d69:	48 89 d8             	mov    %rbx,%rax
   16d6c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16d70:	c9                   	leave
   16d71:	c3                   	ret

0000000000016d72 <_ZN9__gnu_cxxeqIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   16d72:	55                   	push   %rbp
   16d73:	48 89 e5             	mov    %rsp,%rbp
   16d76:	53                   	push   %rbx
   16d77:	48 83 ec 18          	sub    $0x18,%rsp
   16d7b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16d7f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   16d83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16d87:	48 89 c7             	mov    %rax,%rdi
   16d8a:	e8 1f 00 00 00       	call   16dae <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   16d8f:	48 8b 18             	mov    (%rax),%rbx
   16d92:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16d96:	48 89 c7             	mov    %rax,%rdi
   16d99:	e8 10 00 00 00       	call   16dae <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   16d9e:	48 8b 00             	mov    (%rax),%rax
   16da1:	48 39 c3             	cmp    %rax,%rbx
   16da4:	0f 94 c0             	sete   %al
   16da7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16dab:	c9                   	leave
   16dac:	c3                   	ret
   16dad:	90                   	nop

0000000000016dae <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   16dae:	55                   	push   %rbp
   16daf:	48 89 e5             	mov    %rsp,%rbp
   16db2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   16db6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dba:	5d                   	pop    %rbp
   16dbb:	c3                   	ret

0000000000016dbc <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   16dbc:	55                   	push   %rbp
   16dbd:	48 89 e5             	mov    %rsp,%rbp
   16dc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   16dc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dc8:	48 8b 00             	mov    (%rax),%rax
   16dcb:	5d                   	pop    %rbp
   16dcc:	c3                   	ret
   16dcd:	90                   	nop

0000000000016dce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
   16dce:	55                   	push   %rbp
   16dcf:	48 89 e5             	mov    %rsp,%rbp
   16dd2:	48 83 ec 10          	sub    $0x10,%rsp
   16dd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dde:	48 89 c7             	mov    %rax,%rdi
   16de1:	e8 4c 0f 00 00       	call   17d32 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>
   16de6:	90                   	nop
   16de7:	c9                   	leave
   16de8:	c3                   	ret
   16de9:	90                   	nop

0000000000016dea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
   16dea:	55                   	push   %rbp
   16deb:	48 89 e5             	mov    %rsp,%rbp
   16dee:	48 83 ec 10          	sub    $0x10,%rsp
   16df2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16df6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dfa:	48 89 c7             	mov    %rax,%rdi
   16dfd:	e8 f8 0e 00 00       	call   17cfa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>
   16e02:	90                   	nop
   16e03:	c9                   	leave
   16e04:	c3                   	ret
   16e05:	90                   	nop

0000000000016e06 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
   16e06:	55                   	push   %rbp
   16e07:	48 89 e5             	mov    %rsp,%rbp
   16e0a:	48 83 ec 10          	sub    $0x10,%rsp
   16e0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e16:	48 89 c7             	mov    %rax,%rdi
   16e19:	e8 cc ff ff ff       	call   16dea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>
   16e1e:	90                   	nop
   16e1f:	c9                   	leave
   16e20:	c3                   	ret
   16e21:	90                   	nop

0000000000016e22 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
   16e22:	55                   	push   %rbp
   16e23:	48 89 e5             	mov    %rsp,%rbp
   16e26:	48 83 ec 10          	sub    $0x10,%rsp
   16e2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e32:	48 89 c7             	mov    %rax,%rdi
   16e35:	e8 04 0f 00 00       	call   17d3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>
   16e3a:	90                   	nop
   16e3b:	c9                   	leave
   16e3c:	c3                   	ret

0000000000016e3d <_ZN9__gnu_cxxeqIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   16e3d:	55                   	push   %rbp
   16e3e:	48 89 e5             	mov    %rsp,%rbp
   16e41:	53                   	push   %rbx
   16e42:	48 83 ec 18          	sub    $0x18,%rsp
   16e46:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16e4a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   16e4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16e52:	48 89 c7             	mov    %rax,%rdi
   16e55:	e8 1e 00 00 00       	call   16e78 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   16e5a:	48 8b 18             	mov    (%rax),%rbx
   16e5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16e61:	48 89 c7             	mov    %rax,%rdi
   16e64:	e8 0f 00 00 00       	call   16e78 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   16e69:	48 8b 00             	mov    (%rax),%rax
   16e6c:	48 39 c3             	cmp    %rax,%rbx
   16e6f:	0f 94 c0             	sete   %al
   16e72:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16e76:	c9                   	leave
   16e77:	c3                   	ret

0000000000016e78 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   16e78:	55                   	push   %rbp
   16e79:	48 89 e5             	mov    %rsp,%rbp
   16e7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   16e80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e84:	5d                   	pop    %rbp
   16e85:	c3                   	ret

0000000000016e86 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   16e86:	55                   	push   %rbp
   16e87:	48 89 e5             	mov    %rsp,%rbp
   16e8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   16e8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e92:	48 8b 00             	mov    (%rax),%rax
   16e95:	5d                   	pop    %rbp
   16e96:	c3                   	ret
   16e97:	90                   	nop

0000000000016e98 <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
   16e98:	55                   	push   %rbp
   16e99:	48 89 e5             	mov    %rsp,%rbp
   16e9c:	48 83 ec 20          	sub    $0x20,%rsp
   16ea0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
   16ea4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16ea8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   16eac:	48 89 d6             	mov    %rdx,%rsi
   16eaf:	48 89 c7             	mov    %rax,%rdi
   16eb2:	e8 07 00 00 00       	call   16ebe <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
   16eb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ebb:	c9                   	leave
   16ebc:	c3                   	ret
   16ebd:	90                   	nop

0000000000016ebe <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   16ebe:	55                   	push   %rbp
   16ebf:	48 89 e5             	mov    %rsp,%rbp
   16ec2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16ec6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   16eca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16ece:	48 8b 10             	mov    (%rax),%rdx
   16ed1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ed5:	48 89 10             	mov    %rdx,(%rax)
   16ed8:	90                   	nop
   16ed9:	5d                   	pop    %rbp
   16eda:	c3                   	ret
   16edb:	90                   	nop

0000000000016edc <_ZNKSt6vectorIPKcSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
   16edc:	55                   	push   %rbp
   16edd:	48 89 e5             	mov    %rsp,%rbp
   16ee0:	48 83 ec 20          	sub    $0x20,%rsp
   16ee4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
   16ee8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16eec:	48 8d 50 08          	lea    0x8(%rax),%rdx
   16ef0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   16ef4:	48 89 d6             	mov    %rdx,%rsi
   16ef7:	48 89 c7             	mov    %rax,%rdi
   16efa:	e8 bf ff ff ff       	call   16ebe <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
   16eff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f03:	c9                   	leave
   16f04:	c3                   	ret

0000000000016f05 <_ZN9__gnu_cxxeqIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   16f05:	55                   	push   %rbp
   16f06:	48 89 e5             	mov    %rsp,%rbp
   16f09:	53                   	push   %rbx
   16f0a:	48 83 ec 18          	sub    $0x18,%rsp
   16f0e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16f12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   16f16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f1a:	48 89 c7             	mov    %rax,%rdi
   16f1d:	e8 1e 00 00 00       	call   16f40 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   16f22:	48 8b 18             	mov    (%rax),%rbx
   16f25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16f29:	48 89 c7             	mov    %rax,%rdi
   16f2c:	e8 0f 00 00 00       	call   16f40 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   16f31:	48 8b 00             	mov    (%rax),%rax
   16f34:	48 39 c3             	cmp    %rax,%rbx
   16f37:	0f 94 c0             	sete   %al
   16f3a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16f3e:	c9                   	leave
   16f3f:	c3                   	ret

0000000000016f40 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   16f40:	55                   	push   %rbp
   16f41:	48 89 e5             	mov    %rsp,%rbp
   16f44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   16f48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f4c:	5d                   	pop    %rbp
   16f4d:	c3                   	ret

0000000000016f4e <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   16f4e:	55                   	push   %rbp
   16f4f:	48 89 e5             	mov    %rsp,%rbp
   16f52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   16f56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f5a:	48 8b 00             	mov    (%rax),%rax
   16f5d:	5d                   	pop    %rbp
   16f5e:	c3                   	ret

0000000000016f5f <_ZN9__gnu_cxxeqIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   16f5f:	55                   	push   %rbp
   16f60:	48 89 e5             	mov    %rsp,%rbp
   16f63:	53                   	push   %rbx
   16f64:	48 83 ec 18          	sub    $0x18,%rsp
   16f68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16f6c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   16f70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f74:	48 89 c7             	mov    %rax,%rdi
   16f77:	e8 1e 00 00 00       	call   16f9a <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   16f7c:	48 8b 18             	mov    (%rax),%rbx
   16f7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16f83:	48 89 c7             	mov    %rax,%rdi
   16f86:	e8 0f 00 00 00       	call   16f9a <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   16f8b:	48 8b 00             	mov    (%rax),%rax
   16f8e:	48 39 c3             	cmp    %rax,%rbx
   16f91:	0f 94 c0             	sete   %al
   16f94:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16f98:	c9                   	leave
   16f99:	c3                   	ret

0000000000016f9a <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   16f9a:	55                   	push   %rbp
   16f9b:	48 89 e5             	mov    %rsp,%rbp
   16f9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   16fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fa6:	5d                   	pop    %rbp
   16fa7:	c3                   	ret

0000000000016fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   16fa8:	55                   	push   %rbp
   16fa9:	48 89 e5             	mov    %rsp,%rbp
   16fac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   16fb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fb4:	48 8b 00             	mov    (%rax),%rax
   16fb7:	5d                   	pop    %rbp
   16fb8:	c3                   	ret
   16fb9:	90                   	nop

0000000000016fba <_ZNKSt8optionalIjE9has_valueEv>:
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
      { return this->_M_is_engaged(); }

      constexpr bool has_value() const noexcept
   16fba:	55                   	push   %rbp
   16fbb:	48 89 e5             	mov    %rsp,%rbp
   16fbe:	48 83 ec 10          	sub    $0x10,%rsp
   16fc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_is_engaged(); }
   16fc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fca:	48 89 c7             	mov    %rax,%rdi
   16fcd:	e8 02 00 00 00       	call   16fd4 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>
   16fd2:	c9                   	leave
   16fd3:	c3                   	ret

0000000000016fd4 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
   16fd4:	55                   	push   %rbp
   16fd5:	48 89 e5             	mov    %rsp,%rbp
   16fd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
   16fdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fe0:	0f b6 40 04          	movzbl 0x4(%rax),%eax
   16fe4:	5d                   	pop    %rbp
   16fe5:	c3                   	ret

0000000000016fe6 <_ZNRSt8optionalIjE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
   16fe6:	55                   	push   %rbp
   16fe7:	48 89 e5             	mov    %rsp,%rbp
   16fea:	48 83 ec 10          	sub    $0x10,%rsp
   16fee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (this->_M_is_engaged())
   16ff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ff6:	48 89 c7             	mov    %rax,%rdi
   16ff9:	e8 d6 ff ff ff       	call   16fd4 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>
   16ffe:	84 c0                	test   %al,%al
   17000:	74 0e                	je     17010 <_ZNRSt8optionalIjE5valueEv+0x2a>
	  return this->_M_get();
   17002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17006:	48 89 c7             	mov    %rax,%rdi
   17009:	e8 46 10 00 00       	call   18054 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv>
   1700e:	eb 05                	jmp    17015 <_ZNRSt8optionalIjE5valueEv+0x2f>
	__throw_bad_optional_access();
   17010:	e8 e0 f6 ff ff       	call   166f5 <_ZSt27__throw_bad_optional_accessv>
      }
   17015:	c9                   	leave
   17016:	c3                   	ret
   17017:	90                   	nop

0000000000017018 <_ZN2vk5FlagsINS_25DeviceQueueCreateFlagBitsEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   17018:	55                   	push   %rbp
   17019:	48 89 e5             	mov    %rsp,%rbp
   1701c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17024:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   1702a:	90                   	nop
   1702b:	5d                   	pop    %rbp
   1702c:	c3                   	ret
   1702d:	90                   	nop

000000000001702e <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1702e:	55                   	push   %rbp
   1702f:	48 89 e5             	mov    %rsp,%rbp
   17032:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1703a:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1703e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17042:	48 8b 00             	mov    (%rax),%rax
   17045:	48 29 c2             	sub    %rax,%rdx
   17048:	48 89 d0             	mov    %rdx,%rax
   1704b:	48 c1 f8 03          	sar    $0x3,%rax
   1704f:	5d                   	pop    %rbp
   17050:	c3                   	ret
   17051:	90                   	nop

0000000000017052 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   17052:	55                   	push   %rbp
   17053:	48 89 e5             	mov    %rsp,%rbp
   17056:	48 83 ec 10          	sub    $0x10,%rsp
   1705a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   1705e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17062:	48 8b 10             	mov    (%rax),%rdx
   17065:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17069:	48 89 d6             	mov    %rdx,%rsi
   1706c:	48 89 c7             	mov    %rax,%rdi
   1706f:	e8 24 10 00 00       	call   18098 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   17074:	c9                   	leave
   17075:	c3                   	ret

0000000000017076 <_ZN2vk5FlagsINS_20DeviceCreateFlagBitsEEC1Ev>:
   17076:	55                   	push   %rbp
   17077:	48 89 e5             	mov    %rsp,%rbp
   1707a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1707e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17082:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   17088:	90                   	nop
   17089:	5d                   	pop    %rbp
   1708a:	c3                   	ret
   1708b:	90                   	nop

000000000001708c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   1708c:	55                   	push   %rbp
   1708d:	48 89 e5             	mov    %rsp,%rbp
   17090:	48 83 ec 10          	sub    $0x10,%rsp
   17094:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
   17098:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1709c:	48 89 c7             	mov    %rax,%rdi
   1709f:	e8 40 34 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
   170a4:	c9                   	leave
   170a5:	c3                   	ret

00000000000170a6 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1ES1_>:
    VULKAN_HPP_CONSTEXPR Flags( BitType bit ) VULKAN_HPP_NOEXCEPT : m_mask( static_cast<MaskType>( bit ) ) {}
   170a6:	55                   	push   %rbp
   170a7:	48 89 e5             	mov    %rsp,%rbp
   170aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   170ae:	89 75 f4             	mov    %esi,-0xc(%rbp)
   170b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   170b5:	8b 55 f4             	mov    -0xc(%rbp),%edx
   170b8:	89 10                	mov    %edx,(%rax)
   170ba:	90                   	nop
   170bb:	5d                   	pop    %rbp
   170bc:	c3                   	ret
   170bd:	90                   	nop

00000000000170be <_ZNK2vk5FlagsINS_13QueueFlagBitsEEanERKS2_>:
    VULKAN_HPP_CONSTEXPR Flags<BitType> operator&( Flags<BitType> const & rhs ) const VULKAN_HPP_NOEXCEPT
   170be:	55                   	push   %rbp
   170bf:	48 89 e5             	mov    %rsp,%rbp
   170c2:	48 83 ec 20          	sub    $0x20,%rsp
   170c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   170ca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return Flags<BitType>( m_mask & rhs.m_mask );
   170ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   170d2:	8b 10                	mov    (%rax),%edx
   170d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   170d8:	8b 00                	mov    (%rax),%eax
   170da:	21 c2                	and    %eax,%edx
   170dc:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
   170e0:	89 d6                	mov    %edx,%esi
   170e2:	48 89 c7             	mov    %rax,%rdi
   170e5:	e8 da 0f 00 00       	call   180c4 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ej>
   170ea:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
   170ed:	c9                   	leave
   170ee:	c3                   	ret
   170ef:	90                   	nop

00000000000170f0 <_ZNK2vk5FlagsINS_13QueueFlagBitsEEcvbEv>:
    explicit VULKAN_HPP_CONSTEXPR operator bool() const VULKAN_HPP_NOEXCEPT
   170f0:	55                   	push   %rbp
   170f1:	48 89 e5             	mov    %rsp,%rbp
   170f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return !!m_mask;
   170f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   170fc:	8b 00                	mov    (%rax),%eax
   170fe:	85 c0                	test   %eax,%eax
   17100:	0f 95 c0             	setne  %al
    }
   17103:	5d                   	pop    %rbp
   17104:	c3                   	ret
   17105:	90                   	nop

0000000000017106 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   17106:	55                   	push   %rbp
   17107:	48 89 e5             	mov    %rsp,%rbp
   1710a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1710e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17112:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   17118:	90                   	nop
   17119:	5d                   	pop    %rbp
   1711a:	c3                   	ret
   1711b:	90                   	nop

000000000001711c <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>:
    operator RefType *() const VULKAN_HPP_NOEXCEPT
   1711c:	55                   	push   %rbp
   1711d:	48 89 e5             	mov    %rsp,%rbp
   17120:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return m_ptr;
   17124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17128:	48 8b 00             	mov    (%rax),%rax
    }
   1712b:	5d                   	pop    %rbp
   1712c:	c3                   	ret
   1712d:	90                   	nop

000000000001712e <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   1712e:	55                   	push   %rbp
   1712f:	48 89 e5             	mov    %rsp,%rbp
   17132:	48 83 ec 10          	sub    $0x10,%rsp
   17136:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   1713a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1713e:	48 89 c7             	mov    %rax,%rdi
   17141:	e8 2e 10 00 00       	call   18174 <_ZNSaIN2vk4raii14PhysicalDeviceEEC1Ev>
   17146:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1714a:	48 89 c7             	mov    %rax,%rdi
   1714d:	e8 3e 10 00 00       	call   18190 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
   17152:	90                   	nop
   17153:	c9                   	leave
   17154:	c3                   	ret
   17155:	90                   	nop

0000000000017156 <_ZNSaIN2vk4raii14PhysicalDeviceEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   17156:	55                   	push   %rbp
   17157:	48 89 e5             	mov    %rsp,%rbp
   1715a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1715e:	90                   	nop
   1715f:	5d                   	pop    %rbp
   17160:	c3                   	ret
   17161:	90                   	nop

0000000000017162 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17162:	55                   	push   %rbp
   17163:	48 89 e5             	mov    %rsp,%rbp
   17166:	48 83 ec 10          	sub    $0x10,%rsp
   1716a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1716e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17172:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17176:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1717a:	48 8b 00             	mov    (%rax),%rax
   1717d:	48 29 c2             	sub    %rax,%rdx
   17180:	48 89 d0             	mov    %rdx,%rax
   17183:	48 c1 f8 04          	sar    $0x4,%rax
	_M_deallocate(_M_impl._M_start,
   17187:	48 89 c2             	mov    %rax,%rdx
   1718a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1718e:	48 8b 08             	mov    (%rax),%rcx
   17191:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17195:	48 89 ce             	mov    %rcx,%rsi
   17198:	48 89 c7             	mov    %rax,%rdi
   1719b:	e8 1e 10 00 00       	call   181be <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>
      }
   171a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   171a4:	48 89 c7             	mov    %rax,%rdi
   171a7:	e8 7c ee ff ff       	call   16028 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implD1Ev>
   171ac:	90                   	nop
   171ad:	c9                   	leave
   171ae:	c3                   	ret
   171af:	90                   	nop

00000000000171b0 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   171b0:	55                   	push   %rbp
   171b1:	48 89 e5             	mov    %rsp,%rbp
   171b4:	48 83 ec 10          	sub    $0x10,%rsp
   171b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   171bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   171c0:	48 89 c7             	mov    %rax,%rdi
   171c3:	e8 2c 10 00 00       	call   181f4 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   171c8:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   171cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   171cf:	48 8b 48 08          	mov    0x8(%rax),%rcx
   171d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   171d7:	48 8b 00             	mov    (%rax),%rax
   171da:	48 89 ce             	mov    %rcx,%rsi
   171dd:	48 89 c7             	mov    %rax,%rdi
   171e0:	e8 1d 10 00 00       	call   18202 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceES2_EvT_S4_RSaIT0_E>
      }
   171e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   171e9:	48 89 c7             	mov    %rax,%rdi
   171ec:	e8 71 ff ff ff       	call   17162 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>
   171f1:	90                   	nop
   171f2:	c9                   	leave
   171f3:	c3                   	ret

00000000000171f4 <_ZNSaIP18VkPhysicalDevice_TED1Ev>:
   171f4:	55                   	push   %rbp
   171f5:	48 89 e5             	mov    %rsp,%rbp
   171f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   171fc:	90                   	nop
   171fd:	5d                   	pop    %rbp
   171fe:	c3                   	ret
   171ff:	90                   	nop

0000000000017200 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17200:	55                   	push   %rbp
   17201:	48 89 e5             	mov    %rsp,%rbp
   17204:	48 83 ec 10          	sub    $0x10,%rsp
   17208:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1720c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17210:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17214:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17218:	48 8b 00             	mov    (%rax),%rax
   1721b:	48 29 c2             	sub    %rax,%rdx
   1721e:	48 89 d0             	mov    %rdx,%rax
   17221:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   17225:	48 89 c2             	mov    %rax,%rdx
   17228:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1722c:	48 8b 08             	mov    (%rax),%rcx
   1722f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17233:	48 89 ce             	mov    %rcx,%rsi
   17236:	48 89 c7             	mov    %rax,%rdi
   17239:	e8 ee 0f 00 00       	call   1822c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   1723e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17242:	48 89 c7             	mov    %rax,%rdi
   17245:	e8 32 ee ff ff       	call   1607c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>
   1724a:	90                   	nop
   1724b:	c9                   	leave
   1724c:	c3                   	ret
   1724d:	90                   	nop

000000000001724e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1724e:	55                   	push   %rbp
   1724f:	48 89 e5             	mov    %rsp,%rbp
   17252:	48 83 ec 10          	sub    $0x10,%rsp
   17256:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   1725a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1725e:	48 89 c7             	mov    %rax,%rdi
   17261:	e8 fc 0f 00 00       	call   18262 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   17266:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1726d:	48 8b 48 08          	mov    0x8(%rax),%rcx
   17271:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17275:	48 8b 00             	mov    (%rax),%rax
   17278:	48 89 ce             	mov    %rcx,%rsi
   1727b:	48 89 c7             	mov    %rax,%rdi
   1727e:	e8 ed 0f 00 00       	call   18270 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>
      }
   17283:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17287:	48 89 c7             	mov    %rax,%rdi
   1728a:	e8 71 ff ff ff       	call   17200 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   1728f:	90                   	nop
   17290:	c9                   	leave
   17291:	c3                   	ret

0000000000017292 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   17292:	55                   	push   %rbp
   17293:	48 89 e5             	mov    %rsp,%rbp
   17296:	48 83 ec 10          	sub    $0x10,%rsp
   1729a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1729e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   172a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   172a6:	48 89 c7             	mov    %rax,%rdi
   172a9:	e8 8e 00 00 00       	call   1733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   172ae:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   172b2:	0f 92 c0             	setb   %al
   172b5:	84 c0                	test   %al,%al
   172b7:	74 24                	je     172dd <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   172b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   172bd:	48 89 c7             	mov    %rax,%rdi
   172c0:	e8 77 00 00 00       	call   1733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   172c5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   172c9:	48 29 c2             	sub    %rax,%rdx
   172cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   172d0:	48 89 d6             	mov    %rdx,%rsi
   172d3:	48 89 c7             	mov    %rax,%rdi
   172d6:	e8 b3 10 00 00       	call   1838e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm>
      }
   172db:	eb 38                	jmp    17315 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   172dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   172e1:	48 89 c7             	mov    %rax,%rdi
   172e4:	e8 53 00 00 00       	call   1733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   172e9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   172ed:	0f 92 c0             	setb   %al
   172f0:	84 c0                	test   %al,%al
   172f2:	74 21                	je     17315 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   172f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   172f8:	48 8b 00             	mov    (%rax),%rax
   172fb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   172ff:	48 c1 e2 03          	shl    $0x3,%rdx
   17303:	48 01 c2             	add    %rax,%rdx
   17306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1730a:	48 89 d6             	mov    %rdx,%rsi
   1730d:	48 89 c7             	mov    %rax,%rdi
   17310:	e8 83 12 00 00       	call   18598 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
   17315:	90                   	nop
   17316:	c9                   	leave
   17317:	c3                   	ret

0000000000017318 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   17318:	55                   	push   %rbp
   17319:	48 89 e5             	mov    %rsp,%rbp
   1731c:	48 83 ec 10          	sub    $0x10,%rsp
   17320:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   17324:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17328:	48 8b 10             	mov    (%rax),%rdx
   1732b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1732f:	48 89 d6             	mov    %rdx,%rsi
   17332:	48 89 c7             	mov    %rax,%rdi
   17335:	e8 be 12 00 00       	call   185f8 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   1733a:	c9                   	leave
   1733b:	c3                   	ret

000000000001733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1733c:	55                   	push   %rbp
   1733d:	48 89 e5             	mov    %rsp,%rbp
   17340:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17344:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17348:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1734c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17350:	48 8b 00             	mov    (%rax),%rax
   17353:	48 29 c2             	sub    %rax,%rdx
   17356:	48 89 d0             	mov    %rdx,%rax
   17359:	48 c1 f8 03          	sar    $0x3,%rax
   1735d:	5d                   	pop    %rbp
   1735e:	c3                   	ret
   1735f:	90                   	nop

0000000000017360 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   17360:	55                   	push   %rbp
   17361:	48 89 e5             	mov    %rsp,%rbp
   17364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1736c:	48 8b 50 08          	mov    0x8(%rax),%rdx
   17370:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17374:	48 8b 00             	mov    (%rax),%rax
   17377:	48 29 c2             	sub    %rax,%rdx
   1737a:	48 89 d0             	mov    %rdx,%rax
   1737d:	48 c1 f8 04          	sar    $0x4,%rax
   17381:	5d                   	pop    %rbp
   17382:	c3                   	ret
   17383:	90                   	nop

0000000000017384 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm>:
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
   17384:	55                   	push   %rbp
   17385:	48 89 e5             	mov    %rsp,%rbp
   17388:	48 83 ec 20          	sub    $0x20,%rsp
   1738c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17390:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    reserve(size_type __n)
    {
      if (__n > this->max_size())
   17394:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17398:	48 89 c7             	mov    %rax,%rdi
   1739b:	e8 6a 12 00 00       	call   1860a <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   173a0:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   173a4:	0f 92 c0             	setb   %al
   173a7:	84 c0                	test   %al,%al
   173a9:	74 0f                	je     173ba <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm+0x36>
	__throw_length_error(__N("vector::reserve"));
   173ab:	48 8d 05 30 1c 01 00 	lea    0x11c30(%rip),%rax        # 28fe2 <_ZNSt8__detailL19__atomic_spin_countE+0x38ae>
   173b2:	48 89 c7             	mov    %rax,%rdi
   173b5:	e8 26 dd fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      if (this->capacity() < __n)
   173ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   173be:	48 89 c7             	mov    %rax,%rdi
   173c1:	e8 66 12 00 00       	call   1862c <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8capacityEv>
   173c6:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   173ca:	0f 92 c0             	setb   %al
   173cd:	84 c0                	test   %al,%al
   173cf:	0f 84 c5 00 00 00    	je     1749a <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm+0x116>
	{
	  const size_type __old_size = size();
   173d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   173d9:	48 89 c7             	mov    %rax,%rdi
   173dc:	e8 7f ff ff ff       	call   17360 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   173e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __tmp = this->_M_allocate(__n);
   173e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   173e9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   173ed:	48 89 d6             	mov    %rdx,%rsi
   173f0:	48 89 c7             	mov    %rax,%rdi
   173f3:	e8 58 12 00 00       	call   18650 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm>
   173f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
			  __tmp, _M_get_Tp_allocator());
   173fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17400:	48 89 c7             	mov    %rax,%rdi
   17403:	e8 ec 0d 00 00       	call   181f4 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   17408:	48 89 c1             	mov    %rax,%rcx
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1740b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1740f:	48 8b 70 08          	mov    0x8(%rax),%rsi
   17413:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17417:	48 8b 00             	mov    (%rax),%rax
   1741a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1741e:	48 89 c7             	mov    %rax,%rdi
   17421:	e8 5d 12 00 00       	call   18683 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
   17426:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
			this->_M_impl._M_end_of_storage
   1742a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1742e:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			- this->_M_impl._M_start);
   17432:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17436:	48 8b 12             	mov    (%rdx),%rdx
   17439:	48 29 d1             	sub    %rdx,%rcx
   1743c:	48 c1 f9 04          	sar    $0x4,%rcx
   17440:	48 89 ca             	mov    %rcx,%rdx
	  _M_deallocate(this->_M_impl._M_start,
   17443:	48 89 d6             	mov    %rdx,%rsi
   17446:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1744a:	48 8b 0a             	mov    (%rdx),%rcx
   1744d:	48 89 f2             	mov    %rsi,%rdx
   17450:	48 89 ce             	mov    %rcx,%rsi
   17453:	48 89 c7             	mov    %rax,%rdi
   17456:	e8 63 0d 00 00       	call   181be <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>
	  this->_M_impl._M_start = __tmp;
   1745b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1745f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17463:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_finish = __tmp + __old_size;
   17466:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1746a:	48 c1 e0 04          	shl    $0x4,%rax
   1746e:	48 89 c2             	mov    %rax,%rdx
   17471:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17475:	48 01 c2             	add    %rax,%rdx
   17478:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1747c:	48 89 50 08          	mov    %rdx,0x8(%rax)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   17480:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17484:	48 8b 00             	mov    (%rax),%rax
   17487:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1748b:	48 c1 e2 04          	shl    $0x4,%rdx
   1748f:	48 01 c2             	add    %rax,%rdx
   17492:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17496:	48 89 50 10          	mov    %rdx,0x10(%rax)
	}
    }
   1749a:	90                   	nop
   1749b:	c9                   	leave
   1749c:	c3                   	ret
   1749d:	90                   	nop

000000000001749e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1749e:	55                   	push   %rbp
   1749f:	48 89 e5             	mov    %rsp,%rbp
   174a2:	48 83 ec 20          	sub    $0x20,%rsp
   174a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   174aa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   174ae:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   174b2:	48 89 d6             	mov    %rdx,%rsi
   174b5:	48 89 c7             	mov    %rax,%rdi
   174b8:	e8 f9 11 00 00       	call   186b6 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   174bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   174c1:	c9                   	leave
   174c2:	c3                   	ret
   174c3:	90                   	nop

00000000000174c4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   174c4:	55                   	push   %rbp
   174c5:	48 89 e5             	mov    %rsp,%rbp
   174c8:	48 83 ec 20          	sub    $0x20,%rsp
   174cc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   174d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   174d4:	48 8d 50 08          	lea    0x8(%rax),%rdx
   174d8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   174dc:	48 89 d6             	mov    %rdx,%rsi
   174df:	48 89 c7             	mov    %rax,%rdi
   174e2:	e8 cf 11 00 00       	call   186b6 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   174e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   174eb:	c9                   	leave
   174ec:	c3                   	ret
   174ed:	90                   	nop

00000000000174ee <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   174ee:	55                   	push   %rbp
   174ef:	48 89 e5             	mov    %rsp,%rbp
   174f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   174f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   174fa:	48 8b 00             	mov    (%rax),%rax
   174fd:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17501:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17505:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   17508:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1750c:	5d                   	pop    %rbp
   1750d:	c3                   	ret

000000000001750e <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
   1750e:	55                   	push   %rbp
   1750f:	48 89 e5             	mov    %rsp,%rbp
   17512:	41 54                	push   %r12
   17514:	53                   	push   %rbx
   17515:	48 83 ec 20          	sub    $0x20,%rsp
   17519:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1751d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   17521:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   17525:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17529:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1752d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17531:	48 8b 40 10          	mov    0x10(%rax),%rax
   17535:	48 39 c2             	cmp    %rax,%rdx
   17538:	74 4b                	je     17585 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_+0x77>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
   1753a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1753e:	48 89 c7             	mov    %rax,%rdi
   17541:	e8 9b 11 00 00       	call   186e1 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   17546:	48 89 c3             	mov    %rax,%rbx
   17549:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1754d:	48 89 c7             	mov    %rax,%rdi
   17550:	e8 7e 11 00 00       	call   186d3 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   17555:	48 89 c2             	mov    %rax,%rdx
   17558:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1755c:	48 8b 70 08          	mov    0x8(%rax),%rsi
   17560:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17564:	48 89 d9             	mov    %rbx,%rcx
   17567:	48 89 c7             	mov    %rax,%rdi
   1756a:	e8 80 11 00 00       	call   186ef <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
   1756f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17573:	48 8b 40 08          	mov    0x8(%rax),%rax
   17577:	48 8d 50 10          	lea    0x10(%rax),%rdx
   1757b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1757f:	48 89 50 08          	mov    %rdx,0x8(%rax)
   17583:	eb 3f                	jmp    175c4 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_+0xb6>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   17585:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17589:	48 89 c7             	mov    %rax,%rdi
   1758c:	e8 50 11 00 00       	call   186e1 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   17591:	49 89 c4             	mov    %rax,%r12
   17594:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17598:	48 89 c7             	mov    %rax,%rdi
   1759b:	e8 33 11 00 00       	call   186d3 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   175a0:	48 89 c3             	mov    %rax,%rbx
   175a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175a7:	48 89 c7             	mov    %rax,%rdi
   175aa:	e8 e7 06 00 00       	call   17c96 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>
   175af:	48 89 c6             	mov    %rax,%rsi
   175b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175b6:	4c 89 e1             	mov    %r12,%rcx
   175b9:	48 89 da             	mov    %rbx,%rdx
   175bc:	48 89 c7             	mov    %rax,%rdi
   175bf:	e8 86 12 00 00       	call   1884a <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE17_M_realloc_insertIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
#if __cplusplus > 201402L
	return back();
   175c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175c8:	48 89 c7             	mov    %rax,%rdi
   175cb:	e8 1e 14 00 00       	call   189ee <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4backEv>
#endif
      }
   175d0:	48 83 c4 20          	add    $0x20,%rsp
   175d4:	5b                   	pop    %rbx
   175d5:	41 5c                	pop    %r12
   175d7:	5d                   	pop    %rbp
   175d8:	c3                   	ret
   175d9:	90                   	nop

00000000000175da <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1Ev>:
      __uniq_ptr_impl() = default;
   175da:	55                   	push   %rbp
   175db:	48 89 e5             	mov    %rsp,%rbp
   175de:	48 83 ec 10          	sub    $0x10,%rsp
   175e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   175e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   175ea:	48 89 c7             	mov    %rax,%rdi
   175ed:	e8 3c 14 00 00       	call   18a2e <_ZNSt5tupleIJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
   175f2:	90                   	nop
   175f3:	c9                   	leave
   175f4:	c3                   	ret
   175f5:	90                   	nop

00000000000175f6 <_ZNSt15__uniq_ptr_dataIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
   175f6:	55                   	push   %rbp
   175f7:	48 89 e5             	mov    %rsp,%rbp
   175fa:	48 83 ec 10          	sub    $0x10,%rsp
   175fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17602:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17606:	48 89 c7             	mov    %rax,%rdi
   17609:	e8 cc ff ff ff       	call   175da <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1Ev>
   1760e:	90                   	nop
   1760f:	c9                   	leave
   17610:	c3                   	ret
   17611:	90                   	nop

0000000000017612 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>:
	constexpr unique_ptr() noexcept
   17612:	55                   	push   %rbp
   17613:	48 89 e5             	mov    %rsp,%rbp
   17616:	48 83 ec 10          	sub    $0x10,%rsp
   1761a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_t()
   1761e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17622:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   17629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1762d:	48 89 c7             	mov    %rax,%rdi
   17630:	e8 c1 ff ff ff       	call   175f6 <_ZNSt15__uniq_ptr_dataIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>
	{ }
   17635:	90                   	nop
   17636:	c9                   	leave
   17637:	c3                   	ret

0000000000017638 <_ZNSaIN2vk21QueueFamilyPropertiesEED1Ev>:
   17638:	55                   	push   %rbp
   17639:	48 89 e5             	mov    %rsp,%rbp
   1763c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17640:	90                   	nop
   17641:	5d                   	pop    %rbp
   17642:	c3                   	ret
   17643:	90                   	nop

0000000000017644 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17644:	55                   	push   %rbp
   17645:	48 89 e5             	mov    %rsp,%rbp
   17648:	48 83 ec 10          	sub    $0x10,%rsp
   1764c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   17650:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17654:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17658:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1765c:	48 8b 00             	mov    (%rax),%rax
   1765f:	48 29 c2             	sub    %rax,%rdx
   17662:	48 c1 fa 03          	sar    $0x3,%rdx
   17666:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   1766d:	aa aa aa 
   17670:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   17674:	48 89 c2             	mov    %rax,%rdx
   17677:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1767b:	48 8b 08             	mov    (%rax),%rcx
   1767e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17682:	48 89 ce             	mov    %rcx,%rsi
   17685:	48 89 c7             	mov    %rax,%rdi
   17688:	e8 bd 13 00 00       	call   18a4a <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>
      }
   1768d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17691:	48 89 c7             	mov    %rax,%rdi
   17694:	e8 6b ef ff ff       	call   16604 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE12_Vector_implD1Ev>
   17699:	90                   	nop
   1769a:	c9                   	leave
   1769b:	c3                   	ret

000000000001769c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1769c:	55                   	push   %rbp
   1769d:	48 89 e5             	mov    %rsp,%rbp
   176a0:	48 83 ec 10          	sub    $0x10,%rsp
   176a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   176a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176ac:	48 89 c7             	mov    %rax,%rdi
   176af:	e8 cc 13 00 00       	call   18a80 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   176b4:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   176b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176bb:	48 8b 48 08          	mov    0x8(%rax),%rcx
   176bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176c3:	48 8b 00             	mov    (%rax),%rax
   176c6:	48 89 ce             	mov    %rcx,%rsi
   176c9:	48 89 c7             	mov    %rax,%rdi
   176cc:	e8 bd 13 00 00       	call   18a8e <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesES1_EvT_S3_RSaIT0_E>
      }
   176d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176d5:	48 89 c7             	mov    %rax,%rdi
   176d8:	e8 67 ff ff ff       	call   17644 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
   176dd:	90                   	nop
   176de:	c9                   	leave
   176df:	c3                   	ret

00000000000176e0 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   176e0:	55                   	push   %rbp
   176e1:	48 89 e5             	mov    %rsp,%rbp
   176e4:	48 83 ec 10          	sub    $0x10,%rsp
   176e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   176ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   176f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176f4:	48 89 c7             	mov    %rax,%rdi
   176f7:	e8 98 00 00 00       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   176fc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   17700:	0f 92 c0             	setb   %al
   17703:	84 c0                	test   %al,%al
   17705:	74 24                	je     1772b <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   17707:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1770b:	48 89 c7             	mov    %rax,%rdi
   1770e:	e8 81 00 00 00       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   17713:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17717:	48 29 c2             	sub    %rax,%rdx
   1771a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1771e:	48 89 d6             	mov    %rdx,%rsi
   17721:	48 89 c7             	mov    %rax,%rdi
   17724:	e8 57 14 00 00       	call   18b80 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm>
      }
   17729:	eb 42                	jmp    1776d <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm+0x8d>
	else if (__new_size < size())
   1772b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1772f:	48 89 c7             	mov    %rax,%rdi
   17732:	e8 5d 00 00 00       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   17737:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   1773b:	0f 92 c0             	setb   %al
   1773e:	84 c0                	test   %al,%al
   17740:	74 2b                	je     1776d <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm+0x8d>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   17742:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17746:	48 8b 08             	mov    (%rax),%rcx
   17749:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1774d:	48 89 d0             	mov    %rdx,%rax
   17750:	48 01 c0             	add    %rax,%rax
   17753:	48 01 d0             	add    %rdx,%rax
   17756:	48 c1 e0 03          	shl    $0x3,%rax
   1775a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   1775e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17762:	48 89 d6             	mov    %rdx,%rsi
   17765:	48 89 c7             	mov    %rax,%rdi
   17768:	e8 4f 16 00 00       	call   18dbc <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE15_M_erase_at_endEPS1_>
      }
   1776d:	90                   	nop
   1776e:	c9                   	leave
   1776f:	c3                   	ret

0000000000017770 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   17770:	55                   	push   %rbp
   17771:	48 89 e5             	mov    %rsp,%rbp
   17774:	48 83 ec 10          	sub    $0x10,%rsp
   17778:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   1777c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17780:	48 8b 10             	mov    (%rax),%rdx
   17783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17787:	48 89 d6             	mov    %rdx,%rsi
   1778a:	48 89 c7             	mov    %rax,%rdi
   1778d:	e8 9c 16 00 00       	call   18e2e <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   17792:	c9                   	leave
   17793:	c3                   	ret

0000000000017794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   17794:	55                   	push   %rbp
   17795:	48 89 e5             	mov    %rsp,%rbp
   17798:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1779c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   177a0:	48 8b 50 08          	mov    0x8(%rax),%rdx
   177a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   177a8:	48 8b 00             	mov    (%rax),%rax
   177ab:	48 29 c2             	sub    %rax,%rdx
   177ae:	48 c1 fa 03          	sar    $0x3,%rdx
   177b2:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   177b9:	aa aa aa 
   177bc:	48 0f af c2          	imul   %rdx,%rax
   177c0:	5d                   	pop    %rbp
   177c1:	c3                   	ret

00000000000177c2 <_ZNSaIN2vk19ExtensionPropertiesEED1Ev>:
   177c2:	55                   	push   %rbp
   177c3:	48 89 e5             	mov    %rsp,%rbp
   177c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   177ca:	90                   	nop
   177cb:	5d                   	pop    %rbp
   177cc:	c3                   	ret
   177cd:	90                   	nop

00000000000177ce <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   177ce:	55                   	push   %rbp
   177cf:	48 89 e5             	mov    %rsp,%rbp
   177d2:	48 83 ec 10          	sub    $0x10,%rsp
   177d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   177da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   177de:	48 8b 50 10          	mov    0x10(%rax),%rdx
   177e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   177e6:	48 8b 00             	mov    (%rax),%rax
   177e9:	48 29 c2             	sub    %rax,%rdx
   177ec:	48 c1 fa 02          	sar    $0x2,%rdx
   177f0:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   177f7:	fc c0 0f 
   177fa:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   177fe:	48 89 c2             	mov    %rax,%rdx
   17801:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17805:	48 8b 08             	mov    (%rax),%rcx
   17808:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1780c:	48 89 ce             	mov    %rcx,%rsi
   1780f:	48 89 c7             	mov    %rax,%rdi
   17812:	e8 29 16 00 00       	call   18e40 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>
      }
   17817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1781b:	48 89 c7             	mov    %rax,%rdi
   1781e:	e8 fd ed ff ff       	call   16620 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE12_Vector_implD1Ev>
   17823:	90                   	nop
   17824:	c9                   	leave
   17825:	c3                   	ret

0000000000017826 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   17826:	55                   	push   %rbp
   17827:	48 89 e5             	mov    %rsp,%rbp
   1782a:	48 83 ec 10          	sub    $0x10,%rsp
   1782e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   17832:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17836:	48 89 c7             	mov    %rax,%rdi
   17839:	e8 38 16 00 00       	call   18e76 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1783e:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17841:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17845:	48 8b 48 08          	mov    0x8(%rax),%rcx
   17849:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1784d:	48 8b 00             	mov    (%rax),%rax
   17850:	48 89 ce             	mov    %rcx,%rsi
   17853:	48 89 c7             	mov    %rax,%rdi
   17856:	e8 29 16 00 00       	call   18e84 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesES1_EvT_S3_RSaIT0_E>
      }
   1785b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1785f:	48 89 c7             	mov    %rax,%rdi
   17862:	e8 67 ff ff ff       	call   177ce <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
   17867:	90                   	nop
   17868:	c9                   	leave
   17869:	c3                   	ret

000000000001786a <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv>:
    RefType const * operator->() const VULKAN_HPP_NOEXCEPT
   1786a:	55                   	push   %rbp
   1786b:	48 89 e5             	mov    %rsp,%rbp
   1786e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return m_ptr;
   17872:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17876:	48 8b 00             	mov    (%rax),%rax
    }
   17879:	5d                   	pop    %rbp
   1787a:	c3                   	ret
   1787b:	90                   	nop

000000000001787c <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvbEv>:
    explicit operator bool() const VULKAN_HPP_NOEXCEPT
   1787c:	55                   	push   %rbp
   1787d:	48 89 e5             	mov    %rsp,%rbp
   17880:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return !!m_ptr;
   17884:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17888:	48 8b 00             	mov    (%rax),%rax
   1788b:	48 85 c0             	test   %rax,%rax
   1788e:	0f 95 c0             	setne  %al
    }
   17891:	5d                   	pop    %rbp
   17892:	c3                   	ret
   17893:	90                   	nop

0000000000017894 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   17894:	55                   	push   %rbp
   17895:	48 89 e5             	mov    %rsp,%rbp
   17898:	48 83 ec 10          	sub    $0x10,%rsp
   1789c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   178a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   178a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178a8:	48 89 c7             	mov    %rax,%rdi
   178ab:	e8 9a 00 00 00       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   178b0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   178b4:	0f 92 c0             	setb   %al
   178b7:	84 c0                	test   %al,%al
   178b9:	74 24                	je     178df <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   178bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178bf:	48 89 c7             	mov    %rax,%rdi
   178c2:	e8 83 00 00 00       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   178c7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   178cb:	48 29 c2             	sub    %rax,%rdx
   178ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178d2:	48 89 d6             	mov    %rdx,%rsi
   178d5:	48 89 c7             	mov    %rax,%rdi
   178d8:	e8 99 16 00 00       	call   18f76 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm>
      }
   178dd:	eb 43                	jmp    17922 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm+0x8e>
	else if (__new_size < size())
   178df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178e3:	48 89 c7             	mov    %rax,%rdi
   178e6:	e8 5f 00 00 00       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   178eb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   178ef:	0f 92 c0             	setb   %al
   178f2:	84 c0                	test   %al,%al
   178f4:	74 2c                	je     17922 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm+0x8e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   178f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178fa:	48 8b 08             	mov    (%rax),%rcx
   178fd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17901:	48 89 d0             	mov    %rdx,%rax
   17904:	48 c1 e0 06          	shl    $0x6,%rax
   17908:	48 01 d0             	add    %rdx,%rax
   1790b:	48 c1 e0 02          	shl    $0x2,%rax
   1790f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   17913:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17917:	48 89 d6             	mov    %rdx,%rsi
   1791a:	48 89 c7             	mov    %rax,%rdi
   1791d:	e8 94 18 00 00       	call   191b6 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE15_M_erase_at_endEPS1_>
      }
   17922:	90                   	nop
   17923:	c9                   	leave
   17924:	c3                   	ret
   17925:	90                   	nop

0000000000017926 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   17926:	55                   	push   %rbp
   17927:	48 89 e5             	mov    %rsp,%rbp
   1792a:	48 83 ec 10          	sub    $0x10,%rsp
   1792e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   17932:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17936:	48 8b 10             	mov    (%rax),%rdx
   17939:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1793d:	48 89 d6             	mov    %rdx,%rsi
   17940:	48 89 c7             	mov    %rax,%rdi
   17943:	e8 e0 18 00 00       	call   19228 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   17948:	c9                   	leave
   17949:	c3                   	ret

000000000001794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1794a:	55                   	push   %rbp
   1794b:	48 89 e5             	mov    %rsp,%rbp
   1794e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17952:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17956:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1795a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1795e:	48 8b 00             	mov    (%rax),%rax
   17961:	48 29 c2             	sub    %rax,%rdx
   17964:	48 c1 fa 02          	sar    $0x2,%rdx
   17968:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   1796f:	fc c0 0f 
   17972:	48 0f af c2          	imul   %rdx,%rax
   17976:	5d                   	pop    %rbp
   17977:	c3                   	ret

0000000000017978 <_ZNSaIN2vk15LayerPropertiesEED1Ev>:
   17978:	55                   	push   %rbp
   17979:	48 89 e5             	mov    %rsp,%rbp
   1797c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17980:	90                   	nop
   17981:	5d                   	pop    %rbp
   17982:	c3                   	ret
   17983:	90                   	nop

0000000000017984 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17984:	55                   	push   %rbp
   17985:	48 89 e5             	mov    %rsp,%rbp
   17988:	48 83 ec 10          	sub    $0x10,%rsp
   1798c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   17990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17994:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17998:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1799c:	48 8b 00             	mov    (%rax),%rax
   1799f:	48 29 c2             	sub    %rax,%rdx
   179a2:	48 c1 fa 03          	sar    $0x3,%rdx
   179a6:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   179ad:	fc c0 0f 
   179b0:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   179b4:	48 89 c2             	mov    %rax,%rdx
   179b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   179bb:	48 8b 08             	mov    (%rax),%rcx
   179be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   179c2:	48 89 ce             	mov    %rcx,%rsi
   179c5:	48 89 c7             	mov    %rax,%rdi
   179c8:	e8 6d 18 00 00       	call   1923a <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>
      }
   179cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   179d1:	48 89 c7             	mov    %rax,%rdi
   179d4:	e8 63 ec ff ff       	call   1663c <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implD1Ev>
   179d9:	90                   	nop
   179da:	c9                   	leave
   179db:	c3                   	ret

00000000000179dc <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   179dc:	55                   	push   %rbp
   179dd:	48 89 e5             	mov    %rsp,%rbp
   179e0:	48 83 ec 10          	sub    $0x10,%rsp
   179e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   179e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   179ec:	48 89 c7             	mov    %rax,%rdi
   179ef:	e8 7c 18 00 00       	call   19270 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   179f4:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   179f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   179fb:	48 8b 48 08          	mov    0x8(%rax),%rcx
   179ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a03:	48 8b 00             	mov    (%rax),%rax
   17a06:	48 89 ce             	mov    %rcx,%rsi
   17a09:	48 89 c7             	mov    %rax,%rdi
   17a0c:	e8 6d 18 00 00       	call   1927e <_ZSt8_DestroyIPN2vk15LayerPropertiesES1_EvT_S3_RSaIT0_E>
      }
   17a11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a15:	48 89 c7             	mov    %rax,%rdi
   17a18:	e8 67 ff ff ff       	call   17984 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EED1Ev>
   17a1d:	90                   	nop
   17a1e:	c9                   	leave
   17a1f:	c3                   	ret

0000000000017a20 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   17a20:	55                   	push   %rbp
   17a21:	48 89 e5             	mov    %rsp,%rbp
   17a24:	48 83 ec 10          	sub    $0x10,%rsp
   17a28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17a2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   17a30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a34:	48 89 c7             	mov    %rax,%rdi
   17a37:	e8 9a 00 00 00       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   17a3c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   17a40:	0f 92 c0             	setb   %al
   17a43:	84 c0                	test   %al,%al
   17a45:	74 24                	je     17a6b <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   17a47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a4b:	48 89 c7             	mov    %rax,%rdi
   17a4e:	e8 83 00 00 00       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   17a53:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17a57:	48 29 c2             	sub    %rax,%rdx
   17a5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a5e:	48 89 d6             	mov    %rdx,%rsi
   17a61:	48 89 c7             	mov    %rax,%rdi
   17a64:	e8 07 19 00 00       	call   19370 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm>
      }
   17a69:	eb 43                	jmp    17aae <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm+0x8e>
	else if (__new_size < size())
   17a6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a6f:	48 89 c7             	mov    %rax,%rdi
   17a72:	e8 5f 00 00 00       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   17a77:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   17a7b:	0f 92 c0             	setb   %al
   17a7e:	84 c0                	test   %al,%al
   17a80:	74 2c                	je     17aae <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm+0x8e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   17a82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a86:	48 8b 08             	mov    (%rax),%rcx
   17a89:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17a8d:	48 89 d0             	mov    %rdx,%rax
   17a90:	48 c1 e0 06          	shl    $0x6,%rax
   17a94:	48 01 d0             	add    %rdx,%rax
   17a97:	48 c1 e0 03          	shl    $0x3,%rax
   17a9b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   17a9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17aa3:	48 89 d6             	mov    %rdx,%rsi
   17aa6:	48 89 c7             	mov    %rax,%rdi
   17aa9:	e8 02 1b 00 00       	call   195b0 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE15_M_erase_at_endEPS1_>
      }
   17aae:	90                   	nop
   17aaf:	c9                   	leave
   17ab0:	c3                   	ret
   17ab1:	90                   	nop

0000000000017ab2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   17ab2:	55                   	push   %rbp
   17ab3:	48 89 e5             	mov    %rsp,%rbp
   17ab6:	48 83 ec 10          	sub    $0x10,%rsp
   17aba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   17abe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ac2:	48 8b 10             	mov    (%rax),%rdx
   17ac5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ac9:	48 89 d6             	mov    %rdx,%rsi
   17acc:	48 89 c7             	mov    %rax,%rdi
   17acf:	e8 4e 1b 00 00       	call   19622 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   17ad4:	c9                   	leave
   17ad5:	c3                   	ret

0000000000017ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   17ad6:	55                   	push   %rbp
   17ad7:	48 89 e5             	mov    %rsp,%rbp
   17ada:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17ade:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ae2:	48 8b 50 08          	mov    0x8(%rax),%rdx
   17ae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17aea:	48 8b 00             	mov    (%rax),%rax
   17aed:	48 29 c2             	sub    %rax,%rdx
   17af0:	48 c1 fa 03          	sar    $0x3,%rdx
   17af4:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   17afb:	fc c0 0f 
   17afe:	48 0f af c2          	imul   %rdx,%rax
   17b02:	5d                   	pop    %rbp
   17b03:	c3                   	ret

0000000000017b04 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17b04:	55                   	push   %rbp
   17b05:	48 89 e5             	mov    %rsp,%rbp
   17b08:	48 83 ec 10          	sub    $0x10,%rsp
   17b0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   17b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b14:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17b18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b1c:	48 8b 00             	mov    (%rax),%rax
   17b1f:	48 29 c2             	sub    %rax,%rdx
   17b22:	48 89 d0             	mov    %rdx,%rax
   17b25:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   17b29:	48 89 c2             	mov    %rax,%rdx
   17b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b30:	48 8b 08             	mov    (%rax),%rcx
   17b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b37:	48 89 ce             	mov    %rcx,%rsi
   17b3a:	48 89 c7             	mov    %rax,%rdi
   17b3d:	e8 00 1b 00 00       	call   19642 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      }
   17b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b46:	48 89 c7             	mov    %rax,%rdi
   17b49:	e8 b0 ec ff ff       	call   167fe <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
   17b4e:	90                   	nop
   17b4f:	c9                   	leave
   17b50:	c3                   	ret
   17b51:	90                   	nop

0000000000017b52 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   17b52:	55                   	push   %rbp
   17b53:	48 89 e5             	mov    %rsp,%rbp
   17b56:	48 83 ec 20          	sub    $0x20,%rsp
   17b5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17b5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17b62:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   17b66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b6a:	48 89 c7             	mov    %rax,%rdi
   17b6d:	e8 06 1b 00 00       	call   19678 <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>
   17b72:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   17b76:	0f 92 c0             	setb   %al
   17b79:	0f b6 c0             	movzbl %al,%eax
   17b7c:	48 85 c0             	test   %rax,%rax
   17b7f:	0f 95 c0             	setne  %al
   17b82:	84 c0                	test   %al,%al
   17b84:	74 1a                	je     17ba0 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   17b86:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   17b8d:	ff ff 1f 
   17b90:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   17b94:	73 05                	jae    17b9b <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   17b96:	e8 e5 d5 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   17b9b:	e8 e0 d4 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   17ba0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17ba4:	48 c1 e0 03          	shl    $0x3,%rax
   17ba8:	48 89 c7             	mov    %rax,%rdi
   17bab:	e8 70 d6 fe ff       	call   5220 <_Znwm@plt>
   17bb0:	90                   	nop
      }
   17bb1:	c9                   	leave
   17bb2:	c3                   	ret

0000000000017bb3 <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   17bb3:	55                   	push   %rbp
   17bb4:	48 89 e5             	mov    %rsp,%rbp
   17bb7:	48 83 ec 30          	sub    $0x30,%rsp
   17bbb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17bbf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   17bc3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   17bc7:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
   17bcb:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   17bcf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   17bd3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   17bd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17bdb:	48 89 ce             	mov    %rcx,%rsi
   17bde:	48 89 c7             	mov    %rax,%rdi
   17be1:	e8 a6 1a 00 00       	call   1968c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>
    }
   17be6:	c9                   	leave
   17be7:	c3                   	ret

0000000000017be8 <_ZSt8_DestroyIPPKcEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   17be8:	55                   	push   %rbp
   17be9:	48 89 e5             	mov    %rsp,%rbp
   17bec:	48 83 ec 10          	sub    $0x10,%rsp
   17bf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17bf4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
   17bf8:	e8 a1 e5 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   17bfd:	84 c0                	test   %al,%al
   17bff:	74 15                	je     17c16 <_ZSt8_DestroyIPPKcEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   17c01:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17c05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c09:	48 89 d6             	mov    %rdx,%rsi
   17c0c:	48 89 c7             	mov    %rax,%rdi
   17c0f:	e8 a5 1a 00 00       	call   196b9 <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_>
   17c14:	eb 13                	jmp    17c29 <_ZSt8_DestroyIPPKcEvT_S3_+0x41>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   17c16:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c1e:	48 89 d6             	mov    %rdx,%rsi
   17c21:	48 89 c7             	mov    %rax,%rdi
   17c24:	e8 c9 1a 00 00       	call   196f2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>
    }
   17c29:	c9                   	leave
   17c2a:	c3                   	ret
   17c2b:	90                   	nop

0000000000017c2c <_ZNSt6vectorIPKcSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   17c2c:	55                   	push   %rbp
   17c2d:	48 89 e5             	mov    %rsp,%rbp
   17c30:	48 83 ec 10          	sub    $0x10,%rsp
   17c34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   17c38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c3c:	48 89 c7             	mov    %rax,%rdi
   17c3f:	e8 18 ee ff ff       	call   16a5c <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   17c44:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17c47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c4b:	48 8b 48 08          	mov    0x8(%rax),%rcx
   17c4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c53:	48 8b 00             	mov    (%rax),%rax
   17c56:	48 89 ce             	mov    %rcx,%rsi
   17c59:	48 89 c7             	mov    %rax,%rdi
   17c5c:	e8 a0 1a 00 00       	call   19701 <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>
      }
   17c61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c65:	48 89 c7             	mov    %rax,%rdi
   17c68:	e8 97 fe ff ff       	call   17b04 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   17c6d:	90                   	nop
   17c6e:	c9                   	leave
   17c6f:	c3                   	ret

0000000000017c70 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   17c70:	55                   	push   %rbp
   17c71:	48 89 e5             	mov    %rsp,%rbp
   17c74:	48 83 ec 20          	sub    $0x20,%rsp
   17c78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   17c7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17c80:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17c84:	48 89 d6             	mov    %rdx,%rsi
   17c87:	48 89 c7             	mov    %rax,%rdi
   17c8a:	e8 9d 1a 00 00       	call   1972c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   17c8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c93:	c9                   	leave
   17c94:	c3                   	ret
   17c95:	90                   	nop

0000000000017c96 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   17c96:	55                   	push   %rbp
   17c97:	48 89 e5             	mov    %rsp,%rbp
   17c9a:	48 83 ec 20          	sub    $0x20,%rsp
   17c9e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   17ca2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17ca6:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17caa:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17cae:	48 89 d6             	mov    %rdx,%rsi
   17cb1:	48 89 c7             	mov    %rax,%rdi
   17cb4:	e8 73 1a 00 00       	call   1972c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   17cb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cbd:	c9                   	leave
   17cbe:	c3                   	ret
   17cbf:	90                   	nop

0000000000017cc0 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   17cc0:	55                   	push   %rbp
   17cc1:	48 89 e5             	mov    %rsp,%rbp
   17cc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   17cc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ccc:	48 8b 00             	mov    (%rax),%rax
   17ccf:	48 8d 50 10          	lea    0x10(%rax),%rdx
   17cd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cd7:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   17cda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   17cde:	5d                   	pop    %rbp
   17cdf:	c3                   	ret

0000000000017ce0 <_ZN2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1EDn>:
    Optional( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
   17ce0:	55                   	push   %rbp
   17ce1:	48 89 e5             	mov    %rsp,%rbp
   17ce4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ce8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      m_ptr = nullptr;
   17cec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cf0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   17cf7:	90                   	nop
   17cf8:	5d                   	pop    %rbp
   17cf9:	c3                   	ret

0000000000017cfa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>:
	  _Rb_tree_impl()
   17cfa:	55                   	push   %rbp
   17cfb:	48 89 e5             	mov    %rsp,%rbp
   17cfe:	48 83 ec 10          	sub    $0x10,%rsp
   17d02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  : _Node_allocator()
   17d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d0a:	48 89 c7             	mov    %rax,%rdi
   17d0d:	e8 38 1a 00 00       	call   1974a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
   17d12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d16:	48 89 c7             	mov    %rax,%rdi
   17d19:	e8 48 1a 00 00       	call   19766 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
   17d1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d22:	48 83 c0 08          	add    $0x8,%rax
   17d26:	48 89 c7             	mov    %rax,%rdi
   17d29:	e8 2a e9 ff ff       	call   16658 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
   17d2e:	90                   	nop
   17d2f:	c9                   	leave
   17d30:	c3                   	ret
   17d31:	90                   	nop

0000000000017d32 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>:
   17d32:	55                   	push   %rbp
   17d33:	48 89 e5             	mov    %rsp,%rbp
   17d36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17d3a:	90                   	nop
   17d3b:	5d                   	pop    %rbp
   17d3c:	c3                   	ret
   17d3d:	90                   	nop

0000000000017d3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
   17d3e:	55                   	push   %rbp
   17d3f:	48 89 e5             	mov    %rsp,%rbp
   17d42:	48 83 ec 10          	sub    $0x10,%rsp
   17d46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_erase(_M_begin()); }
   17d4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d4e:	48 89 c7             	mov    %rax,%rdi
   17d51:	e8 82 1a 00 00       	call   197d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   17d56:	48 89 c2             	mov    %rax,%rdx
   17d59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d5d:	48 89 d6             	mov    %rdx,%rsi
   17d60:	48 89 c7             	mov    %rax,%rdi
   17d63:	e8 0a 1a 00 00       	call   19772 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
   17d68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d6c:	48 89 c7             	mov    %rax,%rdi
   17d6f:	e8 5a f0 ff ff       	call   16dce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
   17d74:	90                   	nop
   17d75:	c9                   	leave
   17d76:	c3                   	ret
   17d77:	90                   	nop

0000000000017d78 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   17d78:	55                   	push   %rbp
   17d79:	48 89 e5             	mov    %rsp,%rbp
   17d7c:	48 83 ec 20          	sub    $0x20,%rsp
   17d80:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   17d84:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17d88:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17d8c:	48 89 d6             	mov    %rdx,%rsi
   17d8f:	48 89 c7             	mov    %rax,%rdi
   17d92:	e8 5b 1a 00 00       	call   197f2 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   17d97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d9b:	c9                   	leave
   17d9c:	c3                   	ret
   17d9d:	90                   	nop

0000000000017d9e <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   17d9e:	55                   	push   %rbp
   17d9f:	48 89 e5             	mov    %rsp,%rbp
   17da2:	48 83 ec 20          	sub    $0x20,%rsp
   17da6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   17daa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17dae:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17db2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17db6:	48 89 d6             	mov    %rdx,%rsi
   17db9:	48 89 c7             	mov    %rax,%rdi
   17dbc:	e8 31 1a 00 00       	call   197f2 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   17dc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17dc5:	c9                   	leave
   17dc6:	c3                   	ret
   17dc7:	90                   	nop

0000000000017dc8 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   17dc8:	55                   	push   %rbp
   17dc9:	48 89 e5             	mov    %rsp,%rbp
   17dcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   17dd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17dd4:	48 8b 00             	mov    (%rax),%rax
   17dd7:	48 8d 90 04 01 00 00 	lea    0x104(%rax),%rdx
   17dde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17de2:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   17de5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   17de9:	5d                   	pop    %rbp
   17dea:	c3                   	ret
   17deb:	90                   	nop

0000000000017dec <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv>:
    operator std::string() const
   17dec:	55                   	push   %rbp
   17ded:	48 89 e5             	mov    %rsp,%rbp
   17df0:	53                   	push   %rbx
   17df1:	48 83 ec 28          	sub    $0x28,%rsp
   17df5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   17df9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      return std::string( this->data() );
   17dfd:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   17e01:	48 89 c7             	mov    %rax,%rdi
   17e04:	e8 a7 d5 fe ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
   17e09:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17e0d:	48 89 c7             	mov    %rax,%rdi
   17e10:	e8 fb 19 00 00       	call   19810 <_ZNKSt5arrayIcLm256EE4dataEv>
   17e15:	48 89 c1             	mov    %rax,%rcx
   17e18:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   17e1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e20:	48 89 ce             	mov    %rcx,%rsi
   17e23:	48 89 c7             	mov    %rax,%rdi
   17e26:	e8 43 22 ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   17e2b:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   17e2f:	48 89 c7             	mov    %rax,%rdi
   17e32:	e8 39 d4 fe ff       	call   5270 <_ZNSaIcED1Ev@plt>
   17e37:	eb 1a                	jmp    17e53 <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv+0x67>
   17e39:	48 89 c3             	mov    %rax,%rbx
   17e3c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   17e40:	48 89 c7             	mov    %rax,%rdi
   17e43:	e8 28 d4 fe ff       	call   5270 <_ZNSaIcED1Ev@plt>
   17e48:	48 89 d8             	mov    %rbx,%rax
   17e4b:	48 89 c7             	mov    %rax,%rdi
   17e4e:	e8 4d d5 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   17e53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e57:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17e5b:	c9                   	leave
   17e5c:	c3                   	ret
   17e5d:	90                   	nop

0000000000017e5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   17e5e:	55                   	push   %rbp
   17e5f:	48 89 e5             	mov    %rsp,%rbp
   17e62:	53                   	push   %rbx
   17e63:	48 83 ec 48          	sub    $0x48,%rsp
   17e67:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   17e6b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
   17e6f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   17e73:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   17e77:	48 89 d6             	mov    %rdx,%rsi
   17e7a:	48 89 c7             	mov    %rax,%rdi
   17e7d:	e8 a8 19 00 00       	call   1982a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>
   17e82:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   17e86:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   17e8a:	48 89 c7             	mov    %rax,%rdi
   17e8d:	e8 be 19 00 00       	call   19850 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>
   17e92:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   17e96:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   17e9a:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   17e9e:	48 89 d6             	mov    %rdx,%rsi
   17ea1:	48 89 c7             	mov    %rax,%rdi
   17ea4:	e8 c1 19 00 00       	call   1986a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
   17ea9:	84 c0                	test   %al,%al
   17eab:	75 32                	jne    17edf <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x81>
   17ead:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   17eb1:	48 89 c7             	mov    %rax,%rdi
   17eb4:	e8 d3 19 00 00       	call   1988c <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>
   17eb9:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   17ebd:	48 89 c7             	mov    %rax,%rdi
   17ec0:	e8 e3 19 00 00       	call   198a8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
   17ec5:	48 89 c2             	mov    %rax,%rdx
   17ec8:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   17ecc:	48 8d 45 de          	lea    -0x22(%rbp),%rax
   17ed0:	48 89 ce             	mov    %rcx,%rsi
   17ed3:	48 89 c7             	mov    %rax,%rdi
   17ed6:	e8 11 1a 00 00       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   17edb:	84 c0                	test   %al,%al
   17edd:	74 07                	je     17ee6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x88>
   17edf:	b8 01 00 00 00       	mov    $0x1,%eax
   17ee4:	eb 05                	jmp    17eeb <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x8d>
   17ee6:	b8 00 00 00 00       	mov    $0x0,%eax
   17eeb:	84 c0                	test   %al,%al
   17eed:	74 5d                	je     17f4c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0xee>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17eef:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
					std::forward_as_tuple(std::move(__k)),
   17ef3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   17ef7:	48 89 c7             	mov    %rax,%rdi
   17efa:	e8 f2 28 ff ff       	call   a7f1 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
   17eff:	48 89 c2             	mov    %rax,%rdx
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17f02:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   17f06:	48 89 d6             	mov    %rdx,%rsi
   17f09:	48 89 c7             	mov    %rax,%rdi
   17f0c:	e8 1c 1a 00 00       	call   1992d <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>
   17f11:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
   17f15:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   17f19:	48 89 d6             	mov    %rdx,%rsi
   17f1c:	48 89 c7             	mov    %rax,%rdi
   17f1f:	e8 3e 1a 00 00       	call   19962 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>
   17f24:	48 8d 4d df          	lea    -0x21(%rbp),%rcx
   17f28:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   17f2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17f30:	49 89 c8             	mov    %rcx,%r8
   17f33:	48 89 d1             	mov    %rdx,%rcx
   17f36:	48 8d 15 d9 cd 00 00 	lea    0xcdd9(%rip),%rdx        # 24d16 <_ZSt19piecewise_construct>
   17f3d:	48 89 c6             	mov    %rax,%rsi
   17f40:	48 89 df             	mov    %rbx,%rdi
   17f43:	e8 38 1a 00 00       	call   19980 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
   17f48:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
					std::tuple<>());
	return (*__i).second;
   17f4c:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   17f50:	48 89 c7             	mov    %rax,%rdi
   17f53:	e8 50 19 00 00       	call   198a8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
   17f58:	48 83 c0 20          	add    $0x20,%rax
      }
   17f5c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17f60:	c9                   	leave
   17f61:	c3                   	ret

0000000000017f62 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   17f62:	55                   	push   %rbp
   17f63:	48 89 e5             	mov    %rsp,%rbp
   17f66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   17f6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f6e:	48 8b 00             	mov    (%rax),%rax
   17f71:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17f75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f79:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   17f7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   17f80:	5d                   	pop    %rbp
   17f81:	c3                   	ret

0000000000017f82 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   17f82:	55                   	push   %rbp
   17f83:	48 89 e5             	mov    %rsp,%rbp
   17f86:	48 83 ec 20          	sub    $0x20,%rsp
   17f8a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   17f8e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17f92:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17f96:	48 89 d6             	mov    %rdx,%rsi
   17f99:	48 89 c7             	mov    %rax,%rdi
   17f9c:	e8 db 1a 00 00       	call   19a7c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   17fa1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fa5:	c9                   	leave
   17fa6:	c3                   	ret
   17fa7:	90                   	nop

0000000000017fa8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   17fa8:	55                   	push   %rbp
   17fa9:	48 89 e5             	mov    %rsp,%rbp
   17fac:	48 83 ec 20          	sub    $0x20,%rsp
   17fb0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   17fb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17fb8:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17fbc:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17fc0:	48 89 d6             	mov    %rdx,%rsi
   17fc3:	48 89 c7             	mov    %rax,%rdi
   17fc6:	e8 b1 1a 00 00       	call   19a7c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   17fcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fcf:	c9                   	leave
   17fd0:	c3                   	ret
   17fd1:	90                   	nop

0000000000017fd2 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   17fd2:	55                   	push   %rbp
   17fd3:	48 89 e5             	mov    %rsp,%rbp
   17fd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   17fda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fde:	48 8b 00             	mov    (%rax),%rax
   17fe1:	48 8d 90 08 02 00 00 	lea    0x208(%rax),%rdx
   17fe8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fec:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   17fef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   17ff3:	5d                   	pop    %rbp
   17ff4:	c3                   	ret
   17ff5:	90                   	nop

0000000000017ff6 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   17ff6:	55                   	push   %rbp
   17ff7:	48 89 e5             	mov    %rsp,%rbp
   17ffa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ffe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   18002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18006:	48 8b 08             	mov    (%rax),%rcx
   18009:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1800d:	48 89 d0             	mov    %rdx,%rax
   18010:	48 01 c0             	add    %rax,%rax
   18013:	48 01 d0             	add    %rdx,%rax
   18016:	48 c1 e0 03          	shl    $0x3,%rax
   1801a:	48 01 c8             	add    %rcx,%rax
      }
   1801d:	5d                   	pop    %rbp
   1801e:	c3                   	ret
   1801f:	90                   	nop

0000000000018020 <_ZNSt8optionalIjEC1IjLb1EEEOT_>:
	optional(_Up&& __t)
   18020:	55                   	push   %rbp
   18021:	48 89 e5             	mov    %rsp,%rbp
   18024:	53                   	push   %rbx
   18025:	48 83 ec 18          	sub    $0x18,%rsp
   18029:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1802d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
   18031:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   18035:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18039:	48 89 c7             	mov    %rax,%rdi
   1803c:	e8 f3 15 00 00       	call   19634 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   18041:	48 89 c6             	mov    %rax,%rsi
   18044:	48 89 df             	mov    %rbx,%rdi
   18047:	e8 74 1a 00 00       	call   19ac0 <_ZNSt14_Optional_baseIjLb1ELb1EEC1IJjELb0EEESt10in_place_tDpOT_>
   1804c:	90                   	nop
   1804d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18051:	c9                   	leave
   18052:	c3                   	ret
   18053:	90                   	nop

0000000000018054 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
   18054:	55                   	push   %rbp
   18055:	48 89 e5             	mov    %rsp,%rbp
   18058:	48 83 ec 10          	sub    $0x10,%rsp
   1805c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(this->_M_is_engaged());
   18060:	e8 39 e1 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   18065:	84 c0                	test   %al,%al
   18067:	74 1a                	je     18083 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv+0x2f>
   18069:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1806d:	48 89 c7             	mov    %rax,%rdi
   18070:	e8 5f ef ff ff       	call   16fd4 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>
   18075:	83 f0 01             	xor    $0x1,%eax
   18078:	84 c0                	test   %al,%al
   1807a:	74 07                	je     18083 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv+0x2f>
   1807c:	b8 01 00 00 00       	mov    $0x1,%eax
   18081:	eb 05                	jmp    18088 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv+0x34>
   18083:	b8 00 00 00 00       	mov    $0x0,%eax
   18088:	84 c0                	test   %al,%al
	return static_cast<_Dp*>(this)->_M_payload._M_get();
   1808a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1808e:	48 89 c7             	mov    %rax,%rdi
   18091:	e8 5e 1a 00 00       	call   19af4 <_ZNSt22_Optional_payload_baseIjE6_M_getEv>
      }
   18096:	c9                   	leave
   18097:	c3                   	ret

0000000000018098 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
#endif

      template<typename _Up>
	_GLIBCXX20_CONSTEXPR
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   18098:	55                   	push   %rbp
   18099:	48 89 e5             	mov    %rsp,%rbp
   1809c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   180a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   180a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   180a8:	5d                   	pop    %rbp
   180a9:	c3                   	ret

00000000000180aa <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>:
    Optional( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
   180aa:	55                   	push   %rbp
   180ab:	48 89 e5             	mov    %rsp,%rbp
   180ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   180b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      m_ptr = nullptr;
   180b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   180ba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   180c1:	90                   	nop
   180c2:	5d                   	pop    %rbp
   180c3:	c3                   	ret

00000000000180c4 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ej>:
    VULKAN_HPP_CONSTEXPR explicit Flags( MaskType flags ) VULKAN_HPP_NOEXCEPT : m_mask( flags ) {}
   180c4:	55                   	push   %rbp
   180c5:	48 89 e5             	mov    %rsp,%rbp
   180c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   180cc:	89 75 f4             	mov    %esi,-0xc(%rbp)
   180cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   180d3:	8b 55 f4             	mov    -0xc(%rbp),%edx
   180d6:	89 10                	mov    %edx,(%rax)
   180d8:	90                   	nop
   180d9:	5d                   	pop    %rbp
   180da:	c3                   	ret

00000000000180db <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   180db:	55                   	push   %rbp
   180dc:	48 89 e5             	mov    %rsp,%rbp
   180df:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   180e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   180e7:	5d                   	pop    %rbp
   180e8:	c3                   	ret

00000000000180e9 <_ZSt8exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>:

  /// Assign @p __new_val to @p __obj and return its previous value.
  template <typename _Tp, typename _Up = _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
   180e9:	55                   	push   %rbp
   180ea:	48 89 e5             	mov    %rsp,%rbp
   180ed:	48 83 ec 10          	sub    $0x10,%rsp
   180f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   180f5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
		    is_nothrow_assignable<_Tp&, _Up>>::value)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   180f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   180fd:	48 89 c7             	mov    %rax,%rdi
   18100:	e8 d6 ff ff ff       	call   180db <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   18105:	48 89 c2             	mov    %rax,%rdx
   18108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1810c:	48 89 d6             	mov    %rdx,%rsi
   1810f:	48 89 c7             	mov    %rax,%rdi
   18112:	e8 eb 19 00 00       	call   19b02 <_ZSt10__exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>
   18117:	c9                   	leave
   18118:	c3                   	ret

0000000000018119 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   18119:	55                   	push   %rbp
   1811a:	48 89 e5             	mov    %rsp,%rbp
   1811d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   18121:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18125:	5d                   	pop    %rbp
   18126:	c3                   	ret

0000000000018127 <_ZSt8exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>:
    exchange(_Tp& __obj, _Up&& __new_val)
   18127:	55                   	push   %rbp
   18128:	48 89 e5             	mov    %rsp,%rbp
   1812b:	48 83 ec 10          	sub    $0x10,%rsp
   1812f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18133:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   18137:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1813b:	48 89 c7             	mov    %rax,%rdi
   1813e:	e8 d6 ff ff ff       	call   18119 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   18143:	48 89 c2             	mov    %rax,%rdx
   18146:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1814a:	48 89 d6             	mov    %rdx,%rsi
   1814d:	48 89 c7             	mov    %rax,%rdi
   18150:	e8 ec 19 00 00       	call   19b41 <_ZSt10__exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>
   18155:	c9                   	leave
   18156:	c3                   	ret

0000000000018157 <_ZSt4moveIRN2vk14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   18157:	55                   	push   %rbp
   18158:	48 89 e5             	mov    %rsp,%rbp
   1815b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1815f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18163:	5d                   	pop    %rbp
   18164:	c3                   	ret

0000000000018165 <_ZSt4moveIRPKN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
   18165:	55                   	push   %rbp
   18166:	48 89 e5             	mov    %rsp,%rbp
   18169:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1816d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18171:	5d                   	pop    %rbp
   18172:	c3                   	ret
   18173:	90                   	nop

0000000000018174 <_ZNSaIN2vk4raii14PhysicalDeviceEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   18174:	55                   	push   %rbp
   18175:	48 89 e5             	mov    %rsp,%rbp
   18178:	48 83 ec 10          	sub    $0x10,%rsp
   1817c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18180:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18184:	48 89 c7             	mov    %rax,%rdi
   18187:	e8 f6 19 00 00       	call   19b82 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEEC1Ev>
   1818c:	90                   	nop
   1818d:	c9                   	leave
   1818e:	c3                   	ret
   1818f:	90                   	nop

0000000000018190 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   18190:	55                   	push   %rbp
   18191:	48 89 e5             	mov    %rsp,%rbp
   18194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   18198:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1819c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   181a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   181a7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   181ae:	00 
   181af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   181b3:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   181ba:	00 
	{ }
   181bb:	90                   	nop
   181bc:	5d                   	pop    %rbp
   181bd:	c3                   	ret

00000000000181be <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>:
      _M_deallocate(pointer __p, size_t __n)
   181be:	55                   	push   %rbp
   181bf:	48 89 e5             	mov    %rsp,%rbp
   181c2:	48 83 ec 20          	sub    $0x20,%rsp
   181c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   181ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   181ce:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   181d2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   181d7:	74 17                	je     181f0 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   181d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   181dd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   181e1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   181e5:	48 89 ce             	mov    %rcx,%rsi
   181e8:	48 89 c7             	mov    %rax,%rdi
   181eb:	e8 9d 19 00 00       	call   19b8d <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m>
      }
   181f0:	90                   	nop
   181f1:	c9                   	leave
   181f2:	c3                   	ret
   181f3:	90                   	nop

00000000000181f4 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   181f4:	55                   	push   %rbp
   181f5:	48 89 e5             	mov    %rsp,%rbp
   181f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   181fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18200:	5d                   	pop    %rbp
   18201:	c3                   	ret

0000000000018202 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   18202:	55                   	push   %rbp
   18203:	48 89 e5             	mov    %rsp,%rbp
   18206:	48 83 ec 20          	sub    $0x20,%rsp
   1820a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1820e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18212:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
   18216:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1821a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1821e:	48 89 d6             	mov    %rdx,%rsi
   18221:	48 89 c7             	mov    %rax,%rdi
   18224:	e8 c2 19 00 00       	call   19beb <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_>
    }
   18229:	90                   	nop
   1822a:	c9                   	leave
   1822b:	c3                   	ret

000000000001822c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1822c:	55                   	push   %rbp
   1822d:	48 89 e5             	mov    %rsp,%rbp
   18230:	48 83 ec 20          	sub    $0x20,%rsp
   18234:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18238:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1823c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   18240:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   18245:	74 17                	je     1825e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   18247:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1824b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1824f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   18253:	48 89 ce             	mov    %rcx,%rsi
   18256:	48 89 c7             	mov    %rax,%rdi
   18259:	e8 d0 19 00 00       	call   19c2e <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>
      }
   1825e:	90                   	nop
   1825f:	c9                   	leave
   18260:	c3                   	ret
   18261:	90                   	nop

0000000000018262 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   18262:	55                   	push   %rbp
   18263:	48 89 e5             	mov    %rsp,%rbp
   18266:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1826a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1826e:	5d                   	pop    %rbp
   1826f:	c3                   	ret

0000000000018270 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   18270:	55                   	push   %rbp
   18271:	48 89 e5             	mov    %rsp,%rbp
   18274:	48 83 ec 20          	sub    $0x20,%rsp
   18278:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1827c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18280:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   18284:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18288:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1828c:	48 89 d6             	mov    %rdx,%rsi
   1828f:	48 89 c7             	mov    %rax,%rdi
   18292:	e8 f5 19 00 00       	call   19c8c <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>
    }
   18297:	90                   	nop
   18298:	c9                   	leave
   18299:	c3                   	ret

000000000001829a <_ZSt3maxImERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
   1829a:	55                   	push   %rbp
   1829b:	48 89 e5             	mov    %rsp,%rbp
   1829e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   182a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__a < __b)
   182a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   182aa:	48 8b 10             	mov    (%rax),%rdx
   182ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   182b1:	48 8b 00             	mov    (%rax),%rax
   182b4:	48 39 c2             	cmp    %rax,%rdx
   182b7:	73 06                	jae    182bf <_ZSt3maxImERKT_S2_S2_+0x25>
	return __b;
   182b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   182bd:	eb 04                	jmp    182c3 <_ZSt3maxImERKT_S2_S2_+0x29>
      return __a;
   182bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   182c3:	5d                   	pop    %rbp
   182c4:	c3                   	ret
   182c5:	90                   	nop

00000000000182c6 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   182c6:	55                   	push   %rbp
   182c7:	48 89 e5             	mov    %rsp,%rbp
   182ca:	53                   	push   %rbx
   182cb:	48 83 ec 38          	sub    $0x38,%rsp
   182cf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   182d3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   182d7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   182db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   182df:	48 89 c7             	mov    %rax,%rdi
   182e2:	e8 e9 19 00 00       	call   19cd0 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   182e7:	48 89 c3             	mov    %rax,%rbx
   182ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   182ee:	48 89 c7             	mov    %rax,%rdi
   182f1:	e8 46 f0 ff ff       	call   1733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   182f6:	48 29 c3             	sub    %rax,%rbx
   182f9:	48 89 da             	mov    %rbx,%rdx
   182fc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18300:	48 39 c2             	cmp    %rax,%rdx
   18303:	0f 92 c0             	setb   %al
   18306:	84 c0                	test   %al,%al
   18308:	74 0c                	je     18316 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1830a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1830e:	48 89 c7             	mov    %rax,%rdi
   18311:	e8 ca cd fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   18316:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1831a:	48 89 c7             	mov    %rax,%rdi
   1831d:	e8 1a f0 ff ff       	call   1733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   18322:	48 89 c3             	mov    %rax,%rbx
   18325:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18329:	48 89 c7             	mov    %rax,%rdi
   1832c:	e8 0b f0 ff ff       	call   1733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   18331:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18335:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   18339:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1833d:	48 89 d6             	mov    %rdx,%rsi
   18340:	48 89 c7             	mov    %rax,%rdi
   18343:	e8 52 ff ff ff       	call   1829a <_ZSt3maxImERKT_S2_S2_>
   18348:	48 8b 00             	mov    (%rax),%rax
   1834b:	48 01 d8             	add    %rbx,%rax
   1834e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   18352:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18356:	48 89 c7             	mov    %rax,%rdi
   18359:	e8 de ef ff ff       	call   1733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   1835e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   18362:	72 12                	jb     18376 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   18364:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18368:	48 89 c7             	mov    %rax,%rdi
   1836b:	e8 60 19 00 00       	call   19cd0 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   18370:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   18374:	73 0e                	jae    18384 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   18376:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1837a:	48 89 c7             	mov    %rax,%rdi
   1837d:	e8 4e 19 00 00       	call   19cd0 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   18382:	eb 04                	jmp    18388 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   18384:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   18388:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1838c:	c9                   	leave
   1838d:	c3                   	ret

000000000001838e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
   1838e:	55                   	push   %rbp
   1838f:	48 89 e5             	mov    %rsp,%rbp
   18392:	53                   	push   %rbx
   18393:	48 83 ec 38          	sub    $0x38,%rsp
   18397:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1839b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   1839f:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   183a4:	0f 84 e7 01 00 00    	je     18591 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x203>
	{
	  const size_type __size = size();
   183aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   183ae:	48 89 c7             	mov    %rax,%rdi
   183b1:	e8 86 ef ff ff       	call   1733c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   183b6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   183ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   183be:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   183c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   183c6:	48 8b 40 08          	mov    0x8(%rax),%rax
   183ca:	48 29 c2             	sub    %rax,%rdx
   183cd:	48 89 d0             	mov    %rdx,%rax
   183d0:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   183d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	  if (__size > max_size() || __navail > max_size() - __size)
   183d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   183dc:	48 89 c7             	mov    %rax,%rdi
   183df:	e8 ec 18 00 00       	call   19cd0 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   183e4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   183e8:	72 16                	jb     18400 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x72>
   183ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   183ee:	48 89 c7             	mov    %rax,%rdi
   183f1:	e8 da 18 00 00       	call   19cd0 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   183f6:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   183fa:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   183fe:	73 07                	jae    18407 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x79>
   18400:	b8 01 00 00 00       	mov    $0x1,%eax
   18405:	eb 05                	jmp    1840c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x7e>
   18407:	b8 00 00 00 00       	mov    $0x0,%eax
   1840c:	84 c0                	test   %al,%al
	    __builtin_unreachable();

	  if (__navail >= __n)
   1840e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18412:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   18416:	72 33                	jb     1844b <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0xbd>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
						 __n, _M_get_Tp_allocator());
   18418:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1841c:	48 89 c7             	mov    %rax,%rdi
   1841f:	e8 3e fe ff ff       	call   18262 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18424:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   18427:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1842b:	48 8b 40 08          	mov    0x8(%rax),%rax
   1842f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   18433:	48 89 ce             	mov    %rcx,%rsi
   18436:	48 89 c7             	mov    %rax,%rdi
   18439:	e8 b4 18 00 00       	call   19cf2 <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   1843e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18442:	48 89 42 08          	mov    %rax,0x8(%rdx)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   18446:	e9 46 01 00 00       	jmp    18591 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   1844b:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1844f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18453:	48 8d 15 e5 0b 01 00 	lea    0x10be5(%rip),%rdx        # 2903f <_ZNSt8__detailL19__atomic_spin_countE+0x390b>
   1845a:	48 89 ce             	mov    %rcx,%rsi
   1845d:	48 89 c7             	mov    %rax,%rdi
   18460:	e8 61 fe ff ff       	call   182c6 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc>
   18465:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   18469:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1846d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18471:	48 89 d6             	mov    %rdx,%rsi
   18474:	48 89 c7             	mov    %rax,%rdi
   18477:	e8 a0 18 00 00       	call   19d1c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>
   1847c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   18480:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18484:	48 89 c7             	mov    %rax,%rdi
   18487:	e8 d6 fd ff ff       	call   18262 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1848c:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   1848f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18493:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   1849a:	00 
   1849b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1849f:	48 01 c1             	add    %rax,%rcx
   184a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   184a6:	48 89 c6             	mov    %rax,%rsi
   184a9:	48 89 cf             	mov    %rcx,%rdi
   184ac:	e8 41 18 00 00       	call   19cf2 <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   184b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   184b5:	48 89 c7             	mov    %rax,%rdi
   184b8:	e8 a5 fd ff ff       	call   18262 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   184bd:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   184c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   184c4:	48 8b 70 08          	mov    0x8(%rax),%rsi
   184c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   184cc:	48 8b 00             	mov    (%rax),%rax
   184cf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   184d3:	48 89 c7             	mov    %rax,%rdi
   184d6:	e8 74 18 00 00       	call   19d4f <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   184db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   184df:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   184e3:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   184e7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   184eb:	48 8b 12             	mov    (%rdx),%rdx
   184ee:	48 29 d1             	sub    %rdx,%rcx
   184f1:	48 c1 f9 03          	sar    $0x3,%rcx
   184f5:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   184f8:	48 89 d6             	mov    %rdx,%rsi
   184fb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   184ff:	48 8b 0a             	mov    (%rdx),%rcx
   18502:	48 89 f2             	mov    %rsi,%rdx
   18505:	48 89 ce             	mov    %rcx,%rsi
   18508:	48 89 c7             	mov    %rax,%rdi
   1850b:	e8 1c fd ff ff       	call   1822c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   18510:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18514:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   18518:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1851b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1851f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   18523:	48 01 d0             	add    %rdx,%rax
   18526:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1852d:	00 
   1852e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18532:	48 01 c2             	add    %rax,%rdx
   18535:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18539:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1853d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18541:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   18548:	00 
   18549:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1854d:	48 01 c2             	add    %rax,%rdx
   18550:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18554:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   18558:	eb 37                	jmp    18591 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   1855a:	48 89 c7             	mov    %rax,%rdi
   1855d:	e8 3e cb fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   18562:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18566:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1856a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1856e:	48 89 ce             	mov    %rcx,%rsi
   18571:	48 89 c7             	mov    %rax,%rdi
   18574:	e8 b3 fc ff ff       	call   1822c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   18579:	e8 92 cd fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   1857e:	48 89 c3             	mov    %rax,%rbx
   18581:	e8 ea cd fe ff       	call   5370 <__cxa_end_catch@plt>
   18586:	48 89 d8             	mov    %rbx,%rax
   18589:	48 89 c7             	mov    %rax,%rdi
   1858c:	e8 0f ce fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   18591:	90                   	nop
   18592:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18596:	c9                   	leave
   18597:	c3                   	ret

0000000000018598 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   18598:	55                   	push   %rbp
   18599:	48 89 e5             	mov    %rsp,%rbp
   1859c:	48 83 ec 20          	sub    $0x20,%rsp
   185a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   185a4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   185a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   185ac:	48 8b 40 08          	mov    0x8(%rax),%rax
   185b0:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   185b4:	48 c1 f8 03          	sar    $0x3,%rax
   185b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   185bc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   185c1:	74 32                	je     185f5 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   185c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   185c7:	48 89 c7             	mov    %rax,%rdi
   185ca:	e8 93 fc ff ff       	call   18262 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   185cf:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   185d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   185d6:	48 8b 48 08          	mov    0x8(%rax),%rcx
   185da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   185de:	48 89 ce             	mov    %rcx,%rsi
   185e1:	48 89 c7             	mov    %rax,%rdi
   185e4:	e8 87 fc ff ff       	call   18270 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   185e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   185ed:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   185f1:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   185f5:	90                   	nop
   185f6:	c9                   	leave
   185f7:	c3                   	ret

00000000000185f8 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   185f8:	55                   	push   %rbp
   185f9:	48 89 e5             	mov    %rsp,%rbp
   185fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18600:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   18604:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18608:	5d                   	pop    %rbp
   18609:	c3                   	ret

000000000001860a <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1860a:	55                   	push   %rbp
   1860b:	48 89 e5             	mov    %rsp,%rbp
   1860e:	48 83 ec 10          	sub    $0x10,%rsp
   18612:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   18616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1861a:	48 89 c7             	mov    %rax,%rdi
   1861d:	e8 b6 17 00 00       	call   19dd8 <_ZNKSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   18622:	48 89 c7             	mov    %rax,%rdi
   18625:	e8 6b 17 00 00       	call   19d95 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_max_sizeERKS3_>
   1862a:	c9                   	leave
   1862b:	c3                   	ret

000000000001862c <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
   1862c:	55                   	push   %rbp
   1862d:	48 89 e5             	mov    %rsp,%rbp
   18630:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_end_of_storage
   18634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18638:	48 8b 50 10          	mov    0x10(%rax),%rdx
			 - this->_M_impl._M_start); }
   1863c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18640:	48 8b 00             	mov    (%rax),%rax
   18643:	48 29 c2             	sub    %rax,%rdx
   18646:	48 89 d0             	mov    %rdx,%rax
   18649:	48 c1 f8 04          	sar    $0x4,%rax
   1864d:	5d                   	pop    %rbp
   1864e:	c3                   	ret
   1864f:	90                   	nop

0000000000018650 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   18650:	55                   	push   %rbp
   18651:	48 89 e5             	mov    %rsp,%rbp
   18654:	48 83 ec 10          	sub    $0x10,%rsp
   18658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1865c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   18660:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   18665:	74 15                	je     1867c <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm+0x2c>
   18667:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1866b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1866f:	48 89 d6             	mov    %rdx,%rsi
   18672:	48 89 c7             	mov    %rax,%rdi
   18675:	e8 6c 17 00 00       	call   19de6 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m>
   1867a:	eb 05                	jmp    18681 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm+0x31>
   1867c:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   18681:	c9                   	leave
   18682:	c3                   	ret

0000000000018683 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   18683:	55                   	push   %rbp
   18684:	48 89 e5             	mov    %rsp,%rbp
   18687:	48 83 ec 20          	sub    $0x20,%rsp
   1868b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1868f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18693:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   18697:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1869b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1869f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   186a3:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   186a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186ab:	48 89 c7             	mov    %rax,%rdi
   186ae:	e8 b9 17 00 00       	call   19e6c <_ZSt12__relocate_aIPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>
      }
   186b3:	c9                   	leave
   186b4:	c3                   	ret
   186b5:	90                   	nop

00000000000186b6 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   186b6:	55                   	push   %rbp
   186b7:	48 89 e5             	mov    %rsp,%rbp
   186ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   186be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   186c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   186c6:	48 8b 10             	mov    (%rax),%rdx
   186c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186cd:	48 89 10             	mov    %rdx,(%rax)
   186d0:	90                   	nop
   186d1:	5d                   	pop    %rbp
   186d2:	c3                   	ret

00000000000186d3 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   186d3:	55                   	push   %rbp
   186d4:	48 89 e5             	mov    %rsp,%rbp
   186d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   186db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186df:	5d                   	pop    %rbp
   186e0:	c3                   	ret

00000000000186e1 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   186e1:	55                   	push   %rbp
   186e2:	48 89 e5             	mov    %rsp,%rbp
   186e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   186e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186ed:	5d                   	pop    %rbp
   186ee:	c3                   	ret

00000000000186ef <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   186ef:	55                   	push   %rbp
   186f0:	48 89 e5             	mov    %rsp,%rbp
   186f3:	53                   	push   %rbx
   186f4:	48 83 ec 28          	sub    $0x28,%rsp
   186f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   186fc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   18700:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   18704:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   18708:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1870c:	48 89 c7             	mov    %rax,%rdi
   1870f:	e8 cd ff ff ff       	call   186e1 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   18714:	48 89 c3             	mov    %rax,%rbx
   18717:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1871b:	48 89 c7             	mov    %rax,%rdi
   1871e:	e8 b0 ff ff ff       	call   186d3 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   18723:	48 89 c1             	mov    %rax,%rcx
   18726:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1872a:	48 89 da             	mov    %rbx,%rdx
   1872d:	48 89 ce             	mov    %rcx,%rsi
   18730:	48 89 c7             	mov    %rax,%rdi
   18733:	e8 97 17 00 00       	call   19ecf <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>
	}
   18738:	90                   	nop
   18739:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1873d:	c9                   	leave
   1873e:	c3                   	ret
   1873f:	90                   	nop

0000000000018740 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   18740:	55                   	push   %rbp
   18741:	48 89 e5             	mov    %rsp,%rbp
   18744:	53                   	push   %rbx
   18745:	48 83 ec 38          	sub    $0x38,%rsp
   18749:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1874d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   18751:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   18755:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18759:	48 89 c7             	mov    %rax,%rdi
   1875c:	e8 a9 fe ff ff       	call   1860a <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   18761:	48 89 c3             	mov    %rax,%rbx
   18764:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18768:	48 89 c7             	mov    %rax,%rdi
   1876b:	e8 f0 eb ff ff       	call   17360 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   18770:	48 29 c3             	sub    %rax,%rbx
   18773:	48 89 da             	mov    %rbx,%rdx
   18776:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1877a:	48 39 c2             	cmp    %rax,%rdx
   1877d:	0f 92 c0             	setb   %al
   18780:	84 c0                	test   %al,%al
   18782:	74 0c                	je     18790 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   18784:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18788:	48 89 c7             	mov    %rax,%rdi
   1878b:	e8 50 c9 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   18790:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18794:	48 89 c7             	mov    %rax,%rdi
   18797:	e8 c4 eb ff ff       	call   17360 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   1879c:	48 89 c3             	mov    %rax,%rbx
   1879f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   187a3:	48 89 c7             	mov    %rax,%rdi
   187a6:	e8 b5 eb ff ff       	call   17360 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   187ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   187af:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   187b3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   187b7:	48 89 d6             	mov    %rdx,%rsi
   187ba:	48 89 c7             	mov    %rax,%rdi
   187bd:	e8 d8 fa ff ff       	call   1829a <_ZSt3maxImERKT_S2_S2_>
   187c2:	48 8b 00             	mov    (%rax),%rax
   187c5:	48 01 d8             	add    %rbx,%rax
   187c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   187cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   187d0:	48 89 c7             	mov    %rax,%rdi
   187d3:	e8 88 eb ff ff       	call   17360 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   187d8:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   187dc:	72 12                	jb     187f0 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0xb0>
   187de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   187e2:	48 89 c7             	mov    %rax,%rdi
   187e5:	e8 20 fe ff ff       	call   1860a <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   187ea:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   187ee:	73 0e                	jae    187fe <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0xbe>
   187f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   187f4:	48 89 c7             	mov    %rax,%rdi
   187f7:	e8 0e fe ff ff       	call   1860a <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   187fc:	eb 04                	jmp    18802 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0xc2>
   187fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   18802:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18806:	c9                   	leave
   18807:	c3                   	ret

0000000000018808 <_ZN9__gnu_cxxmiIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
   18808:	55                   	push   %rbp
   18809:	48 89 e5             	mov    %rsp,%rbp
   1880c:	53                   	push   %rbx
   1880d:	48 83 ec 18          	sub    $0x18,%rsp
   18811:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18815:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   18819:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1881d:	48 89 c7             	mov    %rax,%rdi
   18820:	e8 89 e5 ff ff       	call   16dae <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   18825:	48 8b 18             	mov    (%rax),%rbx
   18828:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1882c:	48 89 c7             	mov    %rax,%rdi
   1882f:	e8 7a e5 ff ff       	call   16dae <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   18834:	48 8b 00             	mov    (%rax),%rax
   18837:	48 89 da             	mov    %rbx,%rdx
   1883a:	48 29 c2             	sub    %rax,%rdx
   1883d:	48 89 d0             	mov    %rdx,%rax
   18840:	48 c1 f8 04          	sar    $0x4,%rax
   18844:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18848:	c9                   	leave
   18849:	c3                   	ret

000000000001884a <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE17_M_realloc_insertIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   1884a:	55                   	push   %rbp
   1884b:	48 89 e5             	mov    %rsp,%rbp
   1884e:	53                   	push   %rbx
   1884f:	48 83 ec 68          	sub    $0x68,%rsp
   18853:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   18857:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   1885b:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   1885f:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   18863:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18867:	48 8d 15 eb 07 01 00 	lea    0x107eb(%rip),%rdx        # 29059 <_ZNSt8__detailL19__atomic_spin_countE+0x3925>
   1886e:	be 01 00 00 00       	mov    $0x1,%esi
   18873:	48 89 c7             	mov    %rax,%rdi
   18876:	e8 c5 fe ff ff       	call   18740 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc>
   1887b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __old_start = this->_M_impl._M_start;
   1887f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18883:	48 8b 00             	mov    (%rax),%rax
   18886:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pointer __old_finish = this->_M_impl._M_finish;
   1888a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1888e:	48 8b 40 08          	mov    0x8(%rax),%rax
   18892:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      const size_type __elems_before = __position - begin();
   18896:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1889a:	48 89 c7             	mov    %rax,%rdi
   1889d:	e8 ce f3 ff ff       	call   17c70 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE5beginEv>
   188a2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   188a6:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   188aa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   188ae:	48 89 d6             	mov    %rdx,%rsi
   188b1:	48 89 c7             	mov    %rax,%rdi
   188b4:	e8 4f ff ff ff       	call   18808 <_ZN9__gnu_cxxmiIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
   188b9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_start(this->_M_allocate(__len));
   188bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   188c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   188c5:	48 89 d6             	mov    %rdx,%rsi
   188c8:	48 89 c7             	mov    %rax,%rdi
   188cb:	e8 80 fd ff ff       	call   18650 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm>
   188d0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      pointer __new_finish(__new_start);
   188d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   188d8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
   188dc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   188e0:	48 89 c7             	mov    %rax,%rdi
   188e3:	e8 f9 fd ff ff       	call   186e1 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   188e8:	48 89 c3             	mov    %rax,%rbx
   188eb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   188ef:	48 89 c7             	mov    %rax,%rdi
   188f2:	e8 dc fd ff ff       	call   186d3 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   188f7:	48 89 c2             	mov    %rax,%rdx
				   __new_start + __elems_before,
   188fa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   188fe:	48 c1 e0 04          	shl    $0x4,%rax
   18902:	48 89 c1             	mov    %rax,%rcx
	  _Alloc_traits::construct(this->_M_impl,
   18905:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18909:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
   1890d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18911:	48 89 d9             	mov    %rbx,%rcx
   18914:	48 89 c7             	mov    %rax,%rdi
   18917:	e8 d3 fd ff ff       	call   186ef <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
   1891c:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   18923:	00 
					 __new_start, _M_get_Tp_allocator());
   18924:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18928:	48 89 c7             	mov    %rax,%rdi
   1892b:	e8 c4 f8 ff ff       	call   181f4 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   18930:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__old_start, __position.base(),
   18933:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   18937:	48 89 c7             	mov    %rax,%rdi
   1893a:	e8 6f e4 ff ff       	call   16dae <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   1893f:	48 8b 30             	mov    (%rax),%rsi
   18942:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18946:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1894a:	48 89 d9             	mov    %rbx,%rcx
   1894d:	48 89 c7             	mov    %rax,%rdi
   18950:	e8 2e fd ff ff       	call   18683 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
   18955:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	      ++__new_finish;
   18959:	48 83 45 c0 10       	addq   $0x10,-0x40(%rbp)
					 __new_finish, _M_get_Tp_allocator());
   1895e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18962:	48 89 c7             	mov    %rax,%rdi
   18965:	e8 8a f8 ff ff       	call   181f4 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   1896a:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__position.base(), __old_finish,
   1896d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   18971:	48 89 c7             	mov    %rax,%rdi
   18974:	e8 35 e4 ff ff       	call   16dae <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   18979:	48 8b 00             	mov    (%rax),%rax
   1897c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   18980:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   18984:	48 89 d9             	mov    %rbx,%rcx
   18987:	48 89 c7             	mov    %rax,%rdi
   1898a:	e8 f4 fc ff ff       	call   18683 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
   1898f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _M_deallocate(__old_start,
   18993:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
		    this->_M_impl._M_end_of_storage - __old_start);
   18997:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1899b:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   1899f:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
   189a3:	48 c1 fa 04          	sar    $0x4,%rdx
      _M_deallocate(__old_start,
   189a7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   189ab:	48 89 ce             	mov    %rcx,%rsi
   189ae:	48 89 c7             	mov    %rax,%rdi
   189b1:	e8 08 f8 ff ff       	call   181be <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>
      this->_M_impl._M_start = __new_start;
   189b6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   189ba:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   189be:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
   189c1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   189c5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   189c9:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   189cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   189d1:	48 c1 e0 04          	shl    $0x4,%rax
   189d5:	48 89 c2             	mov    %rax,%rdx
   189d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   189dc:	48 01 c2             	add    %rax,%rdx
   189df:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   189e3:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   189e7:	90                   	nop
   189e8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   189ec:	c9                   	leave
   189ed:	c3                   	ret

00000000000189ee <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
   189ee:	55                   	push   %rbp
   189ef:	48 89 e5             	mov    %rsp,%rbp
   189f2:	48 83 ec 20          	sub    $0x20,%rsp
   189f6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
   189fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   189fe:	48 89 c7             	mov    %rax,%rdi
   18a01:	e8 90 f2 ff ff       	call   17c96 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>
   18a06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18a0a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   18a0e:	be 01 00 00 00       	mov    $0x1,%esi
   18a13:	48 89 c7             	mov    %rax,%rdi
   18a16:	e8 33 15 00 00       	call   19f4e <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEmiEl>
   18a1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   18a1f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   18a23:	48 89 c7             	mov    %rax,%rdi
   18a26:	e8 91 e3 ff ff       	call   16dbc <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEdeEv>
      }
   18a2b:	c9                   	leave
   18a2c:	c3                   	ret
   18a2d:	90                   	nop

0000000000018a2e <_ZNSt5tupleIJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:
	tuple()
   18a2e:	55                   	push   %rbp
   18a2f:	48 89 e5             	mov    %rsp,%rbp
   18a32:	48 83 ec 10          	sub    $0x10,%rsp
   18a36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Inherited() { }
   18a3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a3e:	48 89 c7             	mov    %rax,%rdi
   18a41:	e8 4a 15 00 00       	call   19f90 <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1Ev>
   18a46:	90                   	nop
   18a47:	c9                   	leave
   18a48:	c3                   	ret
   18a49:	90                   	nop

0000000000018a4a <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   18a4a:	55                   	push   %rbp
   18a4b:	48 89 e5             	mov    %rsp,%rbp
   18a4e:	48 83 ec 20          	sub    $0x20,%rsp
   18a52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18a56:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18a5a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   18a5e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   18a63:	74 17                	je     18a7c <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   18a65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a69:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18a6d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   18a71:	48 89 ce             	mov    %rcx,%rsi
   18a74:	48 89 c7             	mov    %rax,%rdi
   18a77:	e8 3b 15 00 00       	call   19fb7 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m>
      }
   18a7c:	90                   	nop
   18a7d:	c9                   	leave
   18a7e:	c3                   	ret
   18a7f:	90                   	nop

0000000000018a80 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   18a80:	55                   	push   %rbp
   18a81:	48 89 e5             	mov    %rsp,%rbp
   18a84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   18a88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a8c:	5d                   	pop    %rbp
   18a8d:	c3                   	ret

0000000000018a8e <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   18a8e:	55                   	push   %rbp
   18a8f:	48 89 e5             	mov    %rsp,%rbp
   18a92:	48 83 ec 20          	sub    $0x20,%rsp
   18a96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18a9a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18a9e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   18aa2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18aa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18aaa:	48 89 d6             	mov    %rdx,%rsi
   18aad:	48 89 c7             	mov    %rax,%rdi
   18ab0:	e8 60 15 00 00       	call   1a015 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_>
    }
   18ab5:	90                   	nop
   18ab6:	c9                   	leave
   18ab7:	c3                   	ret

0000000000018ab8 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   18ab8:	55                   	push   %rbp
   18ab9:	48 89 e5             	mov    %rsp,%rbp
   18abc:	53                   	push   %rbx
   18abd:	48 83 ec 38          	sub    $0x38,%rsp
   18ac1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   18ac5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   18ac9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   18acd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18ad1:	48 89 c7             	mov    %rax,%rdi
   18ad4:	e8 7f 15 00 00       	call   1a058 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   18ad9:	48 89 c3             	mov    %rax,%rbx
   18adc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18ae0:	48 89 c7             	mov    %rax,%rdi
   18ae3:	e8 ac ec ff ff       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   18ae8:	48 29 c3             	sub    %rax,%rbx
   18aeb:	48 89 da             	mov    %rbx,%rdx
   18aee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18af2:	48 39 c2             	cmp    %rax,%rdx
   18af5:	0f 92 c0             	setb   %al
   18af8:	84 c0                	test   %al,%al
   18afa:	74 0c                	je     18b08 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   18afc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18b00:	48 89 c7             	mov    %rax,%rdi
   18b03:	e8 d8 c5 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   18b08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18b0c:	48 89 c7             	mov    %rax,%rdi
   18b0f:	e8 80 ec ff ff       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   18b14:	48 89 c3             	mov    %rax,%rbx
   18b17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18b1b:	48 89 c7             	mov    %rax,%rdi
   18b1e:	e8 71 ec ff ff       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   18b23:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18b27:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   18b2b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   18b2f:	48 89 d6             	mov    %rdx,%rsi
   18b32:	48 89 c7             	mov    %rax,%rdi
   18b35:	e8 60 f7 ff ff       	call   1829a <_ZSt3maxImERKT_S2_S2_>
   18b3a:	48 8b 00             	mov    (%rax),%rax
   18b3d:	48 01 d8             	add    %rbx,%rax
   18b40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   18b44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18b48:	48 89 c7             	mov    %rax,%rdi
   18b4b:	e8 44 ec ff ff       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   18b50:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   18b54:	72 12                	jb     18b68 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0xb0>
   18b56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18b5a:	48 89 c7             	mov    %rax,%rdi
   18b5d:	e8 f6 14 00 00       	call   1a058 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   18b62:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   18b66:	73 0e                	jae    18b76 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0xbe>
   18b68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18b6c:	48 89 c7             	mov    %rax,%rdi
   18b6f:	e8 e4 14 00 00       	call   1a058 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   18b74:	eb 04                	jmp    18b7a <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0xc2>
   18b76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   18b7a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18b7e:	c9                   	leave
   18b7f:	c3                   	ret

0000000000018b80 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   18b80:	55                   	push   %rbp
   18b81:	48 89 e5             	mov    %rsp,%rbp
   18b84:	53                   	push   %rbx
   18b85:	48 83 ec 38          	sub    $0x38,%rsp
   18b89:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   18b8d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   18b91:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   18b96:	0f 84 19 02 00 00    	je     18db5 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x235>
	  const size_type __size = size();
   18b9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18ba0:	48 89 c7             	mov    %rax,%rdi
   18ba3:	e8 ec eb ff ff       	call   17794 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   18ba8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   18bac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18bb0:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   18bb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18bb8:	48 8b 40 08          	mov    0x8(%rax),%rax
   18bbc:	48 29 c2             	sub    %rax,%rdx
   18bbf:	48 c1 fa 03          	sar    $0x3,%rdx
   18bc3:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   18bca:	aa aa aa 
   18bcd:	48 0f af c2          	imul   %rdx,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   18bd1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   18bd5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18bd9:	48 89 c7             	mov    %rax,%rdi
   18bdc:	e8 77 14 00 00       	call   1a058 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   18be1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   18be5:	72 16                	jb     18bfd <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x7d>
   18be7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18beb:	48 89 c7             	mov    %rax,%rdi
   18bee:	e8 65 14 00 00       	call   1a058 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   18bf3:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   18bf7:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   18bfb:	73 07                	jae    18c04 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x84>
   18bfd:	b8 01 00 00 00       	mov    $0x1,%eax
   18c02:	eb 05                	jmp    18c09 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x89>
   18c04:	b8 00 00 00 00       	mov    $0x0,%eax
   18c09:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   18c0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18c0f:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   18c13:	72 33                	jb     18c48 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0xc8>
						 __n, _M_get_Tp_allocator());
   18c15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18c19:	48 89 c7             	mov    %rax,%rdi
   18c1c:	e8 5f fe ff ff       	call   18a80 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   18c21:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   18c24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18c28:	48 8b 40 08          	mov    0x8(%rax),%rax
   18c2c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   18c30:	48 89 ce             	mov    %rcx,%rsi
   18c33:	48 89 c7             	mov    %rax,%rdi
   18c36:	e8 3f 14 00 00       	call   1a07a <_ZSt27__uninitialized_default_n_aIPN2vk21QueueFamilyPropertiesEmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   18c3b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18c3f:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   18c43:	e9 6d 01 00 00       	jmp    18db5 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x235>
		_M_check_len(__n, "vector::_M_default_append");
   18c48:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   18c4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18c50:	48 8d 15 e8 03 01 00 	lea    0x103e8(%rip),%rdx        # 2903f <_ZNSt8__detailL19__atomic_spin_countE+0x390b>
   18c57:	48 89 ce             	mov    %rcx,%rsi
   18c5a:	48 89 c7             	mov    %rax,%rdi
   18c5d:	e8 56 fe ff ff       	call   18ab8 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc>
   18c62:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   18c66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18c6a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18c6e:	48 89 d6             	mov    %rdx,%rsi
   18c71:	48 89 c7             	mov    %rax,%rdi
   18c74:	e8 2b 14 00 00       	call   1a0a4 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm>
   18c79:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   18c7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18c81:	48 89 c7             	mov    %rax,%rdi
   18c84:	e8 f7 fd ff ff       	call   18a80 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   18c89:	48 89 c6             	mov    %rax,%rsi
		      std::__uninitialized_default_n_a(__new_start + __size,
   18c8c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18c90:	48 89 d0             	mov    %rdx,%rax
   18c93:	48 01 c0             	add    %rax,%rax
   18c96:	48 01 d0             	add    %rdx,%rax
   18c99:	48 c1 e0 03          	shl    $0x3,%rax
   18c9d:	48 89 c2             	mov    %rax,%rdx
   18ca0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18ca4:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   18ca8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   18cac:	48 89 f2             	mov    %rsi,%rdx
   18caf:	48 89 c6             	mov    %rax,%rsi
   18cb2:	48 89 cf             	mov    %rcx,%rdi
   18cb5:	e8 c0 13 00 00       	call   1a07a <_ZSt27__uninitialized_default_n_aIPN2vk21QueueFamilyPropertiesEmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   18cba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18cbe:	48 89 c7             	mov    %rax,%rdi
   18cc1:	e8 ba fd ff ff       	call   18a80 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   18cc6:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   18cc9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18ccd:	48 8b 70 08          	mov    0x8(%rax),%rsi
   18cd1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18cd5:	48 8b 00             	mov    (%rax),%rax
   18cd8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   18cdc:	48 89 c7             	mov    %rax,%rdi
   18cdf:	e8 f3 13 00 00       	call   1a0d7 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   18ce4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   18ce8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18cec:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   18cf0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18cf4:	48 8b 12             	mov    (%rdx),%rdx
   18cf7:	48 29 d1             	sub    %rdx,%rcx
   18cfa:	48 c1 f9 03          	sar    $0x3,%rcx
   18cfe:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
   18d05:	aa aa aa 
   18d08:	48 0f af d1          	imul   %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   18d0c:	48 89 d6             	mov    %rdx,%rsi
   18d0f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18d13:	48 8b 0a             	mov    (%rdx),%rcx
   18d16:	48 89 f2             	mov    %rsi,%rdx
   18d19:	48 89 ce             	mov    %rcx,%rsi
   18d1c:	48 89 c7             	mov    %rax,%rdi
   18d1f:	e8 26 fd ff ff       	call   18a4a <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   18d24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18d28:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   18d2c:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   18d2f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18d33:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   18d37:	48 01 c2             	add    %rax,%rdx
   18d3a:	48 89 d0             	mov    %rdx,%rax
   18d3d:	48 01 c0             	add    %rax,%rax
   18d40:	48 01 d0             	add    %rdx,%rax
   18d43:	48 c1 e0 03          	shl    $0x3,%rax
   18d47:	48 89 c2             	mov    %rax,%rdx
   18d4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18d4e:	48 01 c2             	add    %rax,%rdx
   18d51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18d55:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   18d59:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18d5d:	48 89 d0             	mov    %rdx,%rax
   18d60:	48 01 c0             	add    %rax,%rax
   18d63:	48 01 d0             	add    %rdx,%rax
   18d66:	48 c1 e0 03          	shl    $0x3,%rax
   18d6a:	48 89 c2             	mov    %rax,%rdx
   18d6d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18d71:	48 01 c2             	add    %rax,%rdx
   18d74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18d78:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   18d7c:	eb 37                	jmp    18db5 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x235>
		  __catch(...)
   18d7e:	48 89 c7             	mov    %rax,%rdi
   18d81:	e8 1a c3 fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   18d86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18d8a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18d8e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   18d92:	48 89 ce             	mov    %rcx,%rsi
   18d95:	48 89 c7             	mov    %rax,%rdi
   18d98:	e8 ad fc ff ff       	call   18a4a <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   18d9d:	e8 6e c5 fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   18da2:	48 89 c3             	mov    %rax,%rbx
   18da5:	e8 c6 c5 fe ff       	call   5370 <__cxa_end_catch@plt>
   18daa:	48 89 d8             	mov    %rbx,%rax
   18dad:	48 89 c7             	mov    %rax,%rdi
   18db0:	e8 eb c5 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   18db5:	90                   	nop
   18db6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18dba:	c9                   	leave
   18dbb:	c3                   	ret

0000000000018dbc <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   18dbc:	55                   	push   %rbp
   18dbd:	48 89 e5             	mov    %rsp,%rbp
   18dc0:	48 83 ec 20          	sub    $0x20,%rsp
   18dc4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18dc8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   18dcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18dd0:	48 8b 40 08          	mov    0x8(%rax),%rax
   18dd4:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   18dd8:	48 c1 f8 03          	sar    $0x3,%rax
   18ddc:	48 89 c2             	mov    %rax,%rdx
   18ddf:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   18de6:	aa aa aa 
   18de9:	48 0f af c2          	imul   %rdx,%rax
   18ded:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18df1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   18df6:	74 32                	je     18e2a <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE15_M_erase_at_endEPS1_+0x6e>
			  _M_get_Tp_allocator());
   18df8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18dfc:	48 89 c7             	mov    %rax,%rdi
   18dff:	e8 7c fc ff ff       	call   18a80 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   18e04:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   18e07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18e0b:	48 8b 48 08          	mov    0x8(%rax),%rcx
   18e0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18e13:	48 89 ce             	mov    %rcx,%rsi
   18e16:	48 89 c7             	mov    %rax,%rdi
   18e19:	e8 70 fc ff ff       	call   18a8e <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   18e1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18e22:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   18e26:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   18e2a:	90                   	nop
   18e2b:	c9                   	leave
   18e2c:	c3                   	ret
   18e2d:	90                   	nop

0000000000018e2e <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   18e2e:	55                   	push   %rbp
   18e2f:	48 89 e5             	mov    %rsp,%rbp
   18e32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18e36:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   18e3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18e3e:	5d                   	pop    %rbp
   18e3f:	c3                   	ret

0000000000018e40 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   18e40:	55                   	push   %rbp
   18e41:	48 89 e5             	mov    %rsp,%rbp
   18e44:	48 83 ec 20          	sub    $0x20,%rsp
   18e48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18e4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18e50:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   18e54:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   18e59:	74 17                	je     18e72 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   18e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e5f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18e63:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   18e67:	48 89 ce             	mov    %rcx,%rsi
   18e6a:	48 89 c7             	mov    %rax,%rdi
   18e6d:	e8 97 12 00 00       	call   1a109 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m>
      }
   18e72:	90                   	nop
   18e73:	c9                   	leave
   18e74:	c3                   	ret
   18e75:	90                   	nop

0000000000018e76 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   18e76:	55                   	push   %rbp
   18e77:	48 89 e5             	mov    %rsp,%rbp
   18e7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   18e7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e82:	5d                   	pop    %rbp
   18e83:	c3                   	ret

0000000000018e84 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   18e84:	55                   	push   %rbp
   18e85:	48 89 e5             	mov    %rsp,%rbp
   18e88:	48 83 ec 20          	sub    $0x20,%rsp
   18e8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18e90:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18e94:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   18e98:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18e9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ea0:	48 89 d6             	mov    %rdx,%rsi
   18ea3:	48 89 c7             	mov    %rax,%rdi
   18ea6:	e8 bc 12 00 00       	call   1a167 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_>
    }
   18eab:	90                   	nop
   18eac:	c9                   	leave
   18ead:	c3                   	ret

0000000000018eae <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   18eae:	55                   	push   %rbp
   18eaf:	48 89 e5             	mov    %rsp,%rbp
   18eb2:	53                   	push   %rbx
   18eb3:	48 83 ec 38          	sub    $0x38,%rsp
   18eb7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   18ebb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   18ebf:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   18ec3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18ec7:	48 89 c7             	mov    %rax,%rdi
   18eca:	e8 db 12 00 00       	call   1a1aa <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   18ecf:	48 89 c3             	mov    %rax,%rbx
   18ed2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18ed6:	48 89 c7             	mov    %rax,%rdi
   18ed9:	e8 6c ea ff ff       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   18ede:	48 29 c3             	sub    %rax,%rbx
   18ee1:	48 89 da             	mov    %rbx,%rdx
   18ee4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18ee8:	48 39 c2             	cmp    %rax,%rdx
   18eeb:	0f 92 c0             	setb   %al
   18eee:	84 c0                	test   %al,%al
   18ef0:	74 0c                	je     18efe <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   18ef2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18ef6:	48 89 c7             	mov    %rax,%rdi
   18ef9:	e8 e2 c1 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   18efe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18f02:	48 89 c7             	mov    %rax,%rdi
   18f05:	e8 40 ea ff ff       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   18f0a:	48 89 c3             	mov    %rax,%rbx
   18f0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18f11:	48 89 c7             	mov    %rax,%rdi
   18f14:	e8 31 ea ff ff       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   18f19:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18f1d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   18f21:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   18f25:	48 89 d6             	mov    %rdx,%rsi
   18f28:	48 89 c7             	mov    %rax,%rdi
   18f2b:	e8 6a f3 ff ff       	call   1829a <_ZSt3maxImERKT_S2_S2_>
   18f30:	48 8b 00             	mov    (%rax),%rax
   18f33:	48 01 d8             	add    %rbx,%rax
   18f36:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   18f3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18f3e:	48 89 c7             	mov    %rax,%rdi
   18f41:	e8 04 ea ff ff       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   18f46:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   18f4a:	72 12                	jb     18f5e <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0xb0>
   18f4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18f50:	48 89 c7             	mov    %rax,%rdi
   18f53:	e8 52 12 00 00       	call   1a1aa <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   18f58:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   18f5c:	73 0e                	jae    18f6c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0xbe>
   18f5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18f62:	48 89 c7             	mov    %rax,%rdi
   18f65:	e8 40 12 00 00       	call   1a1aa <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   18f6a:	eb 04                	jmp    18f70 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0xc2>
   18f6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   18f70:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18f74:	c9                   	leave
   18f75:	c3                   	ret

0000000000018f76 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   18f76:	55                   	push   %rbp
   18f77:	48 89 e5             	mov    %rsp,%rbp
   18f7a:	53                   	push   %rbx
   18f7b:	48 83 ec 38          	sub    $0x38,%rsp
   18f7f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   18f83:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   18f87:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   18f8c:	0f 84 1c 02 00 00    	je     191ae <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x238>
	  const size_type __size = size();
   18f92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18f96:	48 89 c7             	mov    %rax,%rdi
   18f99:	e8 ac e9 ff ff       	call   1794a <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   18f9e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   18fa2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18fa6:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   18faa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18fae:	48 8b 40 08          	mov    0x8(%rax),%rax
   18fb2:	48 29 c2             	sub    %rax,%rdx
   18fb5:	48 c1 fa 02          	sar    $0x2,%rdx
   18fb9:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   18fc0:	fc c0 0f 
   18fc3:	48 0f af c2          	imul   %rdx,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   18fc7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   18fcb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18fcf:	48 89 c7             	mov    %rax,%rdi
   18fd2:	e8 d3 11 00 00       	call   1a1aa <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   18fd7:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   18fdb:	72 16                	jb     18ff3 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x7d>
   18fdd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18fe1:	48 89 c7             	mov    %rax,%rdi
   18fe4:	e8 c1 11 00 00       	call   1a1aa <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   18fe9:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   18fed:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   18ff1:	73 07                	jae    18ffa <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x84>
   18ff3:	b8 01 00 00 00       	mov    $0x1,%eax
   18ff8:	eb 05                	jmp    18fff <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x89>
   18ffa:	b8 00 00 00 00       	mov    $0x0,%eax
   18fff:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   19001:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19005:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   19009:	72 33                	jb     1903e <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0xc8>
						 __n, _M_get_Tp_allocator());
   1900b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1900f:	48 89 c7             	mov    %rax,%rdi
   19012:	e8 5f fe ff ff       	call   18e76 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19017:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   1901a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1901e:	48 8b 40 08          	mov    0x8(%rax),%rax
   19022:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19026:	48 89 ce             	mov    %rcx,%rsi
   19029:	48 89 c7             	mov    %rax,%rdi
   1902c:	e8 9b 11 00 00       	call   1a1cc <_ZSt27__uninitialized_default_n_aIPN2vk19ExtensionPropertiesEmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   19031:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19035:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   19039:	e9 70 01 00 00       	jmp    191ae <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		_M_check_len(__n, "vector::_M_default_append");
   1903e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19042:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19046:	48 8d 15 f2 ff 00 00 	lea    0xfff2(%rip),%rdx        # 2903f <_ZNSt8__detailL19__atomic_spin_countE+0x390b>
   1904d:	48 89 ce             	mov    %rcx,%rsi
   19050:	48 89 c7             	mov    %rax,%rdi
   19053:	e8 56 fe ff ff       	call   18eae <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc>
   19058:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   1905c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19060:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19064:	48 89 d6             	mov    %rdx,%rsi
   19067:	48 89 c7             	mov    %rax,%rdi
   1906a:	e8 87 11 00 00       	call   1a1f6 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm>
   1906f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   19073:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19077:	48 89 c7             	mov    %rax,%rdi
   1907a:	e8 f7 fd ff ff       	call   18e76 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1907f:	48 89 c6             	mov    %rax,%rsi
		      std::__uninitialized_default_n_a(__new_start + __size,
   19082:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19086:	48 89 d0             	mov    %rdx,%rax
   19089:	48 c1 e0 06          	shl    $0x6,%rax
   1908d:	48 01 d0             	add    %rdx,%rax
   19090:	48 c1 e0 02          	shl    $0x2,%rax
   19094:	48 89 c2             	mov    %rax,%rdx
   19097:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1909b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1909f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   190a3:	48 89 f2             	mov    %rsi,%rdx
   190a6:	48 89 c6             	mov    %rax,%rsi
   190a9:	48 89 cf             	mov    %rcx,%rdi
   190ac:	e8 1b 11 00 00       	call   1a1cc <_ZSt27__uninitialized_default_n_aIPN2vk19ExtensionPropertiesEmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   190b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   190b5:	48 89 c7             	mov    %rax,%rdi
   190b8:	e8 b9 fd ff ff       	call   18e76 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   190bd:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   190c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   190c4:	48 8b 70 08          	mov    0x8(%rax),%rsi
   190c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   190cc:	48 8b 00             	mov    (%rax),%rax
   190cf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   190d3:	48 89 c7             	mov    %rax,%rdi
   190d6:	e8 4e 11 00 00       	call   1a229 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   190db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   190df:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   190e3:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   190e7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   190eb:	48 8b 12             	mov    (%rdx),%rdx
   190ee:	48 29 d1             	sub    %rdx,%rcx
   190f1:	48 c1 f9 02          	sar    $0x2,%rcx
   190f5:	48 ba c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rdx
   190fc:	fc c0 0f 
   190ff:	48 0f af d1          	imul   %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   19103:	48 89 d6             	mov    %rdx,%rsi
   19106:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1910a:	48 8b 0a             	mov    (%rdx),%rcx
   1910d:	48 89 f2             	mov    %rsi,%rdx
   19110:	48 89 ce             	mov    %rcx,%rsi
   19113:	48 89 c7             	mov    %rax,%rdi
   19116:	e8 25 fd ff ff       	call   18e40 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   1911b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1911f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19123:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   19126:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1912a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1912e:	48 01 c2             	add    %rax,%rdx
   19131:	48 89 d0             	mov    %rdx,%rax
   19134:	48 c1 e0 06          	shl    $0x6,%rax
   19138:	48 01 d0             	add    %rdx,%rax
   1913b:	48 c1 e0 02          	shl    $0x2,%rax
   1913f:	48 89 c2             	mov    %rax,%rdx
   19142:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19146:	48 01 c2             	add    %rax,%rdx
   19149:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1914d:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   19151:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19155:	48 89 d0             	mov    %rdx,%rax
   19158:	48 c1 e0 06          	shl    $0x6,%rax
   1915c:	48 01 d0             	add    %rdx,%rax
   1915f:	48 c1 e0 02          	shl    $0x2,%rax
   19163:	48 89 c2             	mov    %rax,%rdx
   19166:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1916a:	48 01 c2             	add    %rax,%rdx
   1916d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19171:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   19175:	eb 37                	jmp    191ae <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		  __catch(...)
   19177:	48 89 c7             	mov    %rax,%rdi
   1917a:	e8 21 bf fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   1917f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19183:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19187:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1918b:	48 89 ce             	mov    %rcx,%rsi
   1918e:	48 89 c7             	mov    %rax,%rdi
   19191:	e8 aa fc ff ff       	call   18e40 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   19196:	e8 75 c1 fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   1919b:	48 89 c3             	mov    %rax,%rbx
   1919e:	e8 cd c1 fe ff       	call   5370 <__cxa_end_catch@plt>
   191a3:	48 89 d8             	mov    %rbx,%rax
   191a6:	48 89 c7             	mov    %rax,%rdi
   191a9:	e8 f2 c1 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   191ae:	90                   	nop
   191af:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   191b3:	c9                   	leave
   191b4:	c3                   	ret
   191b5:	90                   	nop

00000000000191b6 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   191b6:	55                   	push   %rbp
   191b7:	48 89 e5             	mov    %rsp,%rbp
   191ba:	48 83 ec 20          	sub    $0x20,%rsp
   191be:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   191c2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   191c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   191ca:	48 8b 40 08          	mov    0x8(%rax),%rax
   191ce:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   191d2:	48 c1 f8 02          	sar    $0x2,%rax
   191d6:	48 89 c2             	mov    %rax,%rdx
   191d9:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   191e0:	fc c0 0f 
   191e3:	48 0f af c2          	imul   %rdx,%rax
   191e7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   191eb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   191f0:	74 32                	je     19224 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE15_M_erase_at_endEPS1_+0x6e>
			  _M_get_Tp_allocator());
   191f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   191f6:	48 89 c7             	mov    %rax,%rdi
   191f9:	e8 78 fc ff ff       	call   18e76 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   191fe:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   19201:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19205:	48 8b 48 08          	mov    0x8(%rax),%rcx
   19209:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1920d:	48 89 ce             	mov    %rcx,%rsi
   19210:	48 89 c7             	mov    %rax,%rdi
   19213:	e8 6c fc ff ff       	call   18e84 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   19218:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1921c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   19220:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   19224:	90                   	nop
   19225:	c9                   	leave
   19226:	c3                   	ret
   19227:	90                   	nop

0000000000019228 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   19228:	55                   	push   %rbp
   19229:	48 89 e5             	mov    %rsp,%rbp
   1922c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19230:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   19234:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19238:	5d                   	pop    %rbp
   19239:	c3                   	ret

000000000001923a <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1923a:	55                   	push   %rbp
   1923b:	48 89 e5             	mov    %rsp,%rbp
   1923e:	48 83 ec 20          	sub    $0x20,%rsp
   19242:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19246:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1924a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1924e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19253:	74 17                	je     1926c <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19255:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19259:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1925d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19261:	48 89 ce             	mov    %rcx,%rsi
   19264:	48 89 c7             	mov    %rax,%rdi
   19267:	e8 ef 0f 00 00       	call   1a25b <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m>
      }
   1926c:	90                   	nop
   1926d:	c9                   	leave
   1926e:	c3                   	ret
   1926f:	90                   	nop

0000000000019270 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   19270:	55                   	push   %rbp
   19271:	48 89 e5             	mov    %rsp,%rbp
   19274:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   19278:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1927c:	5d                   	pop    %rbp
   1927d:	c3                   	ret

000000000001927e <_ZSt8_DestroyIPN2vk15LayerPropertiesES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1927e:	55                   	push   %rbp
   1927f:	48 89 e5             	mov    %rsp,%rbp
   19282:	48 83 ec 20          	sub    $0x20,%rsp
   19286:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1928a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1928e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   19292:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19296:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1929a:	48 89 d6             	mov    %rdx,%rsi
   1929d:	48 89 c7             	mov    %rax,%rdi
   192a0:	e8 14 10 00 00       	call   1a2b9 <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_>
    }
   192a5:	90                   	nop
   192a6:	c9                   	leave
   192a7:	c3                   	ret

00000000000192a8 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   192a8:	55                   	push   %rbp
   192a9:	48 89 e5             	mov    %rsp,%rbp
   192ac:	53                   	push   %rbx
   192ad:	48 83 ec 38          	sub    $0x38,%rsp
   192b1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   192b5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   192b9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   192bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   192c1:	48 89 c7             	mov    %rax,%rdi
   192c4:	e8 33 10 00 00       	call   1a2fc <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   192c9:	48 89 c3             	mov    %rax,%rbx
   192cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   192d0:	48 89 c7             	mov    %rax,%rdi
   192d3:	e8 fe e7 ff ff       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   192d8:	48 29 c3             	sub    %rax,%rbx
   192db:	48 89 da             	mov    %rbx,%rdx
   192de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   192e2:	48 39 c2             	cmp    %rax,%rdx
   192e5:	0f 92 c0             	setb   %al
   192e8:	84 c0                	test   %al,%al
   192ea:	74 0c                	je     192f8 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   192ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   192f0:	48 89 c7             	mov    %rax,%rdi
   192f3:	e8 e8 bd fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   192f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   192fc:	48 89 c7             	mov    %rax,%rdi
   192ff:	e8 d2 e7 ff ff       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   19304:	48 89 c3             	mov    %rax,%rbx
   19307:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1930b:	48 89 c7             	mov    %rax,%rdi
   1930e:	e8 c3 e7 ff ff       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   19313:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19317:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1931b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1931f:	48 89 d6             	mov    %rdx,%rsi
   19322:	48 89 c7             	mov    %rax,%rdi
   19325:	e8 70 ef ff ff       	call   1829a <_ZSt3maxImERKT_S2_S2_>
   1932a:	48 8b 00             	mov    (%rax),%rax
   1932d:	48 01 d8             	add    %rbx,%rax
   19330:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   19334:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19338:	48 89 c7             	mov    %rax,%rdi
   1933b:	e8 96 e7 ff ff       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   19340:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   19344:	72 12                	jb     19358 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0xb0>
   19346:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1934a:	48 89 c7             	mov    %rax,%rdi
   1934d:	e8 aa 0f 00 00       	call   1a2fc <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   19352:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   19356:	73 0e                	jae    19366 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0xbe>
   19358:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1935c:	48 89 c7             	mov    %rax,%rdi
   1935f:	e8 98 0f 00 00       	call   1a2fc <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   19364:	eb 04                	jmp    1936a <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0xc2>
   19366:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1936a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1936e:	c9                   	leave
   1936f:	c3                   	ret

0000000000019370 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   19370:	55                   	push   %rbp
   19371:	48 89 e5             	mov    %rsp,%rbp
   19374:	53                   	push   %rbx
   19375:	48 83 ec 38          	sub    $0x38,%rsp
   19379:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1937d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   19381:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   19386:	0f 84 1c 02 00 00    	je     195a8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x238>
	  const size_type __size = size();
   1938c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19390:	48 89 c7             	mov    %rax,%rdi
   19393:	e8 3e e7 ff ff       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   19398:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1939c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   193a0:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   193a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   193a8:	48 8b 40 08          	mov    0x8(%rax),%rax
   193ac:	48 29 c2             	sub    %rax,%rdx
   193af:	48 c1 fa 03          	sar    $0x3,%rdx
   193b3:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   193ba:	fc c0 0f 
   193bd:	48 0f af c2          	imul   %rdx,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   193c1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   193c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   193c9:	48 89 c7             	mov    %rax,%rdi
   193cc:	e8 2b 0f 00 00       	call   1a2fc <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   193d1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   193d5:	72 16                	jb     193ed <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x7d>
   193d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   193db:	48 89 c7             	mov    %rax,%rdi
   193de:	e8 19 0f 00 00       	call   1a2fc <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   193e3:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   193e7:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   193eb:	73 07                	jae    193f4 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x84>
   193ed:	b8 01 00 00 00       	mov    $0x1,%eax
   193f2:	eb 05                	jmp    193f9 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x89>
   193f4:	b8 00 00 00 00       	mov    $0x0,%eax
   193f9:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   193fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   193ff:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   19403:	72 33                	jb     19438 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0xc8>
						 __n, _M_get_Tp_allocator());
   19405:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19409:	48 89 c7             	mov    %rax,%rdi
   1940c:	e8 5f fe ff ff       	call   19270 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19411:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   19414:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19418:	48 8b 40 08          	mov    0x8(%rax),%rax
   1941c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19420:	48 89 ce             	mov    %rcx,%rsi
   19423:	48 89 c7             	mov    %rax,%rdi
   19426:	e8 f3 0e 00 00       	call   1a31e <_ZSt27__uninitialized_default_n_aIPN2vk15LayerPropertiesEmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   1942b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1942f:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   19433:	e9 70 01 00 00       	jmp    195a8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		_M_check_len(__n, "vector::_M_default_append");
   19438:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1943c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19440:	48 8d 15 f8 fb 00 00 	lea    0xfbf8(%rip),%rdx        # 2903f <_ZNSt8__detailL19__atomic_spin_countE+0x390b>
   19447:	48 89 ce             	mov    %rcx,%rsi
   1944a:	48 89 c7             	mov    %rax,%rdi
   1944d:	e8 56 fe ff ff       	call   192a8 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc>
   19452:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   19456:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1945a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1945e:	48 89 d6             	mov    %rdx,%rsi
   19461:	48 89 c7             	mov    %rax,%rdi
   19464:	e8 df 0e 00 00       	call   1a348 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm>
   19469:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   1946d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19471:	48 89 c7             	mov    %rax,%rdi
   19474:	e8 f7 fd ff ff       	call   19270 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19479:	48 89 c6             	mov    %rax,%rsi
		      std::__uninitialized_default_n_a(__new_start + __size,
   1947c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19480:	48 89 d0             	mov    %rdx,%rax
   19483:	48 c1 e0 06          	shl    $0x6,%rax
   19487:	48 01 d0             	add    %rdx,%rax
   1948a:	48 c1 e0 03          	shl    $0x3,%rax
   1948e:	48 89 c2             	mov    %rax,%rdx
   19491:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19495:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   19499:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1949d:	48 89 f2             	mov    %rsi,%rdx
   194a0:	48 89 c6             	mov    %rax,%rsi
   194a3:	48 89 cf             	mov    %rcx,%rdi
   194a6:	e8 73 0e 00 00       	call   1a31e <_ZSt27__uninitialized_default_n_aIPN2vk15LayerPropertiesEmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   194ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   194af:	48 89 c7             	mov    %rax,%rdi
   194b2:	e8 b9 fd ff ff       	call   19270 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   194b7:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   194ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   194be:	48 8b 70 08          	mov    0x8(%rax),%rsi
   194c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   194c6:	48 8b 00             	mov    (%rax),%rax
   194c9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   194cd:	48 89 c7             	mov    %rax,%rdi
   194d0:	e8 a6 0e 00 00       	call   1a37b <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   194d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   194d9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   194dd:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   194e1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   194e5:	48 8b 12             	mov    (%rdx),%rdx
   194e8:	48 29 d1             	sub    %rdx,%rcx
   194eb:	48 c1 f9 03          	sar    $0x3,%rcx
   194ef:	48 ba c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rdx
   194f6:	fc c0 0f 
   194f9:	48 0f af d1          	imul   %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   194fd:	48 89 d6             	mov    %rdx,%rsi
   19500:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19504:	48 8b 0a             	mov    (%rdx),%rcx
   19507:	48 89 f2             	mov    %rsi,%rdx
   1950a:	48 89 ce             	mov    %rcx,%rsi
   1950d:	48 89 c7             	mov    %rax,%rdi
   19510:	e8 25 fd ff ff       	call   1923a <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   19515:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19519:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1951d:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   19520:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19524:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19528:	48 01 c2             	add    %rax,%rdx
   1952b:	48 89 d0             	mov    %rdx,%rax
   1952e:	48 c1 e0 06          	shl    $0x6,%rax
   19532:	48 01 d0             	add    %rdx,%rax
   19535:	48 c1 e0 03          	shl    $0x3,%rax
   19539:	48 89 c2             	mov    %rax,%rdx
   1953c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19540:	48 01 c2             	add    %rax,%rdx
   19543:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19547:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1954b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1954f:	48 89 d0             	mov    %rdx,%rax
   19552:	48 c1 e0 06          	shl    $0x6,%rax
   19556:	48 01 d0             	add    %rdx,%rax
   19559:	48 c1 e0 03          	shl    $0x3,%rax
   1955d:	48 89 c2             	mov    %rax,%rdx
   19560:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19564:	48 01 c2             	add    %rax,%rdx
   19567:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1956b:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1956f:	eb 37                	jmp    195a8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		  __catch(...)
   19571:	48 89 c7             	mov    %rax,%rdi
   19574:	e8 27 bb fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   19579:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1957d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19581:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   19585:	48 89 ce             	mov    %rcx,%rsi
   19588:	48 89 c7             	mov    %rax,%rdi
   1958b:	e8 aa fc ff ff       	call   1923a <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   19590:	e8 7b bd fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   19595:	48 89 c3             	mov    %rax,%rbx
   19598:	e8 d3 bd fe ff       	call   5370 <__cxa_end_catch@plt>
   1959d:	48 89 d8             	mov    %rbx,%rax
   195a0:	48 89 c7             	mov    %rax,%rdi
   195a3:	e8 f8 bd fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   195a8:	90                   	nop
   195a9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   195ad:	c9                   	leave
   195ae:	c3                   	ret
   195af:	90                   	nop

00000000000195b0 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   195b0:	55                   	push   %rbp
   195b1:	48 89 e5             	mov    %rsp,%rbp
   195b4:	48 83 ec 20          	sub    $0x20,%rsp
   195b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   195bc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   195c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   195c4:	48 8b 40 08          	mov    0x8(%rax),%rax
   195c8:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   195cc:	48 c1 f8 03          	sar    $0x3,%rax
   195d0:	48 89 c2             	mov    %rax,%rdx
   195d3:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   195da:	fc c0 0f 
   195dd:	48 0f af c2          	imul   %rdx,%rax
   195e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   195e5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   195ea:	74 32                	je     1961e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE15_M_erase_at_endEPS1_+0x6e>
			  _M_get_Tp_allocator());
   195ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   195f0:	48 89 c7             	mov    %rax,%rdi
   195f3:	e8 78 fc ff ff       	call   19270 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   195f8:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   195fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   195ff:	48 8b 48 08          	mov    0x8(%rax),%rcx
   19603:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19607:	48 89 ce             	mov    %rcx,%rsi
   1960a:	48 89 c7             	mov    %rax,%rdi
   1960d:	e8 6c fc ff ff       	call   1927e <_ZSt8_DestroyIPN2vk15LayerPropertiesES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   19612:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19616:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1961a:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   1961e:	90                   	nop
   1961f:	c9                   	leave
   19620:	c3                   	ret
   19621:	90                   	nop

0000000000019622 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   19622:	55                   	push   %rbp
   19623:	48 89 e5             	mov    %rsp,%rbp
   19626:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1962a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1962e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19632:	5d                   	pop    %rbp
   19633:	c3                   	ret

0000000000019634 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   19634:	55                   	push   %rbp
   19635:	48 89 e5             	mov    %rsp,%rbp
   19638:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1963c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19640:	5d                   	pop    %rbp
   19641:	c3                   	ret

0000000000019642 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   19642:	55                   	push   %rbp
   19643:	48 89 e5             	mov    %rsp,%rbp
   19646:	48 83 ec 20          	sub    $0x20,%rsp
   1964a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1964e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19652:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19656:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1965b:	74 17                	je     19674 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1965d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19661:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19665:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19669:	48 89 ce             	mov    %rcx,%rsi
   1966c:	48 89 c7             	mov    %rax,%rdi
   1966f:	e8 39 0d 00 00       	call   1a3ad <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>
      }
   19674:	90                   	nop
   19675:	c9                   	leave
   19676:	c3                   	ret
   19677:	90                   	nop

0000000000019678 <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   19678:	55                   	push   %rbp
   19679:	48 89 e5             	mov    %rsp,%rbp
   1967c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   19680:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   19687:	ff ff 0f 
      }
   1968a:	5d                   	pop    %rbp
   1968b:	c3                   	ret

000000000001968c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   1968c:	55                   	push   %rbp
   1968d:	48 89 e5             	mov    %rsp,%rbp
   19690:	48 83 ec 20          	sub    $0x20,%rsp
   19694:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19698:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1969c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
   196a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   196a4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   196a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196ac:	48 89 ce             	mov    %rcx,%rsi
   196af:	48 89 c7             	mov    %rax,%rdi
   196b2:	e8 54 0d 00 00       	call   1a40b <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>
   196b7:	c9                   	leave
   196b8:	c3                   	ret

00000000000196b9 <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   196b9:	55                   	push   %rbp
   196ba:	48 89 e5             	mov    %rsp,%rbp
   196bd:	48 83 ec 10          	sub    $0x10,%rsp
   196c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   196c5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   196c9:	eb 19                	jmp    196e4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   196cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196cf:	48 89 c7             	mov    %rax,%rdi
   196d2:	e8 d9 d5 ff ff       	call   16cb0 <_ZSt11__addressofIPKcEPT_RS2_>
   196d7:	48 89 c7             	mov    %rax,%rdi
   196da:	e8 77 0d 00 00       	call   1a456 <_ZSt8_DestroyIPKcEvPT_>
	  for (; __first != __last; ++__first)
   196df:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   196e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196e8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   196ec:	75 dd                	jne    196cb <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_+0x12>
	}
   196ee:	90                   	nop
   196ef:	90                   	nop
   196f0:	c9                   	leave
   196f1:	c3                   	ret

00000000000196f2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   196f2:	55                   	push   %rbp
   196f3:	48 89 e5             	mov    %rsp,%rbp
   196f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   196fa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   196fe:	90                   	nop
   196ff:	5d                   	pop    %rbp
   19700:	c3                   	ret

0000000000019701 <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   19701:	55                   	push   %rbp
   19702:	48 89 e5             	mov    %rsp,%rbp
   19705:	48 83 ec 20          	sub    $0x20,%rsp
   19709:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1970d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19711:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   19715:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19719:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1971d:	48 89 d6             	mov    %rdx,%rsi
   19720:	48 89 c7             	mov    %rax,%rdi
   19723:	e8 c0 e4 ff ff       	call   17be8 <_ZSt8_DestroyIPPKcEvT_S3_>
    }
   19728:	90                   	nop
   19729:	c9                   	leave
   1972a:	c3                   	ret
   1972b:	90                   	nop

000000000001972c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1972c:	55                   	push   %rbp
   1972d:	48 89 e5             	mov    %rsp,%rbp
   19730:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19734:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   19738:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1973c:	48 8b 10             	mov    (%rax),%rdx
   1973f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19743:	48 89 10             	mov    %rdx,(%rax)
   19746:	90                   	nop
   19747:	5d                   	pop    %rbp
   19748:	c3                   	ret
   19749:	90                   	nop

000000000001974a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
   1974a:	55                   	push   %rbp
   1974b:	48 89 e5             	mov    %rsp,%rbp
   1974e:	48 83 ec 10          	sub    $0x10,%rsp
   19752:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19756:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1975a:	48 89 c7             	mov    %rax,%rdi
   1975d:	e8 10 0d 00 00       	call   1a472 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
   19762:	90                   	nop
   19763:	c9                   	leave
   19764:	c3                   	ret
   19765:	90                   	nop

0000000000019766 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
   19766:	55                   	push   %rbp
   19767:	48 89 e5             	mov    %rsp,%rbp
   1976a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { }
   1976e:	90                   	nop
   1976f:	5d                   	pop    %rbp
   19770:	c3                   	ret
   19771:	90                   	nop

0000000000019772 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   19772:	55                   	push   %rbp
   19773:	48 89 e5             	mov    %rsp,%rbp
   19776:	48 83 ec 20          	sub    $0x20,%rsp
   1977a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1977e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   19782:	eb 49                	jmp    197cd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x5b>
	{
	  _M_erase(_S_right(__x));
   19784:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19788:	48 89 c7             	mov    %rax,%rdi
   1978b:	e8 ed 0c 00 00       	call   1a47d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   19790:	48 89 c2             	mov    %rax,%rdx
   19793:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19797:	48 89 d6             	mov    %rdx,%rsi
   1979a:	48 89 c7             	mov    %rax,%rdi
   1979d:	e8 d0 ff ff ff       	call   19772 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
   197a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   197a6:	48 89 c7             	mov    %rax,%rdi
   197a9:	e8 e1 0c 00 00       	call   1a48f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   197ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_drop_node(__x);
   197b2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   197b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   197ba:	48 89 d6             	mov    %rdx,%rsi
   197bd:	48 89 c7             	mov    %rax,%rdi
   197c0:	e8 dd 0c 00 00       	call   1a4a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
   197c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   197c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      while (__x != 0)
   197cd:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   197d2:	75 b0                	jne    19784 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x12>
	}
    }
   197d4:	90                   	nop
   197d5:	90                   	nop
   197d6:	c9                   	leave
   197d7:	c3                   	ret

00000000000197d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
   197d8:	55                   	push   %rbp
   197d9:	48 89 e5             	mov    %rsp,%rbp
   197dc:	48 83 ec 10          	sub    $0x10,%rsp
   197e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_mbegin(); }
   197e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   197e8:	48 89 c7             	mov    %rax,%rdi
   197eb:	e8 ec 0c 00 00       	call   1a4dc <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>
   197f0:	c9                   	leave
   197f1:	c3                   	ret

00000000000197f2 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   197f2:	55                   	push   %rbp
   197f3:	48 89 e5             	mov    %rsp,%rbp
   197f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   197fa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   197fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19802:	48 8b 10             	mov    (%rax),%rdx
   19805:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19809:	48 89 10             	mov    %rdx,(%rax)
   1980c:	90                   	nop
   1980d:	5d                   	pop    %rbp
   1980e:	c3                   	ret
   1980f:	90                   	nop

0000000000019810 <_ZNKSt5arrayIcLm256EE4dataEv>:
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
   19810:	55                   	push   %rbp
   19811:	48 89 e5             	mov    %rsp,%rbp
   19814:	48 83 ec 10          	sub    $0x10,%rsp
   19818:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _AT_Type::_S_ptr(_M_elems); }
   1981c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19820:	48 89 c7             	mov    %rax,%rdi
   19823:	e8 c6 0c 00 00       	call   1a4ee <_ZNSt14__array_traitsIcLm256EE6_S_ptrERA256_Kc>
   19828:	c9                   	leave
   19829:	c3                   	ret

000000000001982a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
   1982a:	55                   	push   %rbp
   1982b:	48 89 e5             	mov    %rsp,%rbp
   1982e:	48 83 ec 10          	sub    $0x10,%rsp
   19832:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19836:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_t.lower_bound(__x); }
   1983a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1983e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19842:	48 89 d6             	mov    %rdx,%rsi
   19845:	48 89 c7             	mov    %rax,%rdi
   19848:	e8 af 0c 00 00       	call   1a4fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>
   1984d:	c9                   	leave
   1984e:	c3                   	ret
   1984f:	90                   	nop

0000000000019850 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   19850:	55                   	push   %rbp
   19851:	48 89 e5             	mov    %rsp,%rbp
   19854:	48 83 ec 10          	sub    $0x10,%rsp
   19858:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.end(); }
   1985c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19860:	48 89 c7             	mov    %rax,%rdi
   19863:	e8 e0 0c 00 00       	call   1a548 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>
   19868:	c9                   	leave
   19869:	c3                   	ret

000000000001986a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
   1986a:	55                   	push   %rbp
   1986b:	48 89 e5             	mov    %rsp,%rbp
   1986e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19872:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x._M_node == __y._M_node; }
   19876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1987a:	48 8b 10             	mov    (%rax),%rdx
   1987d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19881:	48 8b 00             	mov    (%rax),%rax
   19884:	48 39 c2             	cmp    %rax,%rdx
   19887:	0f 94 c0             	sete   %al
   1988a:	5d                   	pop    %rbp
   1988b:	c3                   	ret

000000000001988c <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>:
      key_comp() const
   1988c:	55                   	push   %rbp
   1988d:	48 89 e5             	mov    %rsp,%rbp
   19890:	48 83 ec 10          	sub    $0x10,%rsp
   19894:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.key_comp(); }
   19898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1989c:	48 89 c7             	mov    %rax,%rdi
   1989f:	e8 ce 0c 00 00       	call   1a572 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>
   198a4:	90                   	nop
   198a5:	c9                   	leave
   198a6:	c3                   	ret
   198a7:	90                   	nop

00000000000198a8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   198a8:	55                   	push   %rbp
   198a9:	48 89 e5             	mov    %rsp,%rbp
   198ac:	48 83 ec 10          	sub    $0x10,%rsp
   198b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
   198b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   198b8:	48 8b 00             	mov    (%rax),%rax
   198bb:	48 89 c7             	mov    %rax,%rdi
   198be:	e8 bb 0c 00 00       	call   1a57e <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   198c3:	c9                   	leave
   198c4:	c3                   	ret

00000000000198c5 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai>:
#if __cpp_lib_three_way_comparison
  namespace __detail
  {
    template<typename _ChTraits>
      constexpr auto
      __char_traits_cmp_cat(int __cmp) noexcept
   198c5:	55                   	push   %rbp
   198c6:	48 89 e5             	mov    %rsp,%rbp
   198c9:	89 7d fc             	mov    %edi,-0x4(%rbp)
      {
	if constexpr (requires { typename _ChTraits::comparison_category; })
	  {
	    using _Cat = typename _ChTraits::comparison_category;
	    static_assert( !is_void_v<common_comparison_category_t<_Cat>> );
	    return static_cast<_Cat>(__cmp <=> 0);
   198cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
   198cf:	85 c0                	test   %eax,%eax
   198d1:	74 12                	je     198e5 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x20>
   198d3:	85 c0                	test   %eax,%eax
   198d5:	79 07                	jns    198de <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x19>
   198d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   198dc:	eb 0c                	jmp    198ea <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x25>
   198de:	b8 01 00 00 00       	mov    $0x1,%eax
   198e3:	eb 05                	jmp    198ea <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x25>
   198e5:	b8 00 00 00 00       	mov    $0x0,%eax
	  }
	else
	  return static_cast<weak_ordering>(__cmp <=> 0);
      }
   198ea:	5d                   	pop    %rbp
   198eb:	c3                   	ret

00000000000198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
      operator()(const _Tp& __x, const _Tp& __y) const
   198ec:	55                   	push   %rbp
   198ed:	48 89 e5             	mov    %rsp,%rbp
   198f0:	48 83 ec 30          	sub    $0x30,%rsp
   198f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   198f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   198fc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      { return __x < __y; }
   19900:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   19904:	be 00 00 00 00       	mov    $0x0,%esi
   19909:	48 89 c7             	mov    %rax,%rdi
   1990c:	e8 95 57 ff ff       	call   f0a6 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
   19911:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19915:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19919:	48 89 d6             	mov    %rdx,%rsi
   1991c:	48 89 c7             	mov    %rax,%rdi
   1991f:	e8 78 0c 00 00       	call   1a59c <_ZStssIcSt11char_traitsIcESaIcEEDTcl21__char_traits_cmp_catIT0_ELi0EEERKNSt7__cxx1112basic_stringIT_S3_T1_EESB_>
   19924:	89 c7                	mov    %eax,%edi
   19926:	e8 8a 57 ff ff       	call   f0b5 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
   1992b:	c9                   	leave
   1992c:	c3                   	ret

000000000001992d <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
   1992d:	55                   	push   %rbp
   1992e:	48 89 e5             	mov    %rsp,%rbp
   19931:	48 83 ec 10          	sub    $0x10,%rsp
   19935:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19939:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
   1993d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19941:	48 89 c7             	mov    %rax,%rdi
   19944:	e8 7f 0c 00 00       	call   1a5c8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   19949:	48 89 c2             	mov    %rax,%rdx
   1994c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19950:	48 89 d6             	mov    %rdx,%rsi
   19953:	48 89 c7             	mov    %rax,%rdi
   19956:	e8 7b 0c 00 00       	call   1a5d6 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>
   1995b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1995f:	c9                   	leave
   19960:	c3                   	ret
   19961:	90                   	nop

0000000000019962 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
   19962:	55                   	push   %rbp
   19963:	48 89 e5             	mov    %rsp,%rbp
   19966:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1996a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__it._M_node) { }
   1996e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19972:	48 8b 10             	mov    (%rax),%rdx
   19975:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19979:	48 89 10             	mov    %rdx,(%rax)
   1997c:	90                   	nop
   1997d:	5d                   	pop    %rbp
   1997e:	c3                   	ret
   1997f:	90                   	nop

0000000000019980 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   19980:	55                   	push   %rbp
   19981:	48 89 e5             	mov    %rsp,%rbp
   19984:	41 54                	push   %r12
   19986:	53                   	push   %rbx
   19987:	48 83 ec 60          	sub    $0x60,%rsp
   1998b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   1998f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
   19993:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   19997:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   1999b:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
   1999f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   199a3:	48 89 c7             	mov    %rax,%rdi
   199a6:	e8 7a 0c 00 00       	call   1a625 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   199ab:	49 89 c4             	mov    %rax,%r12
   199ae:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   199b2:	48 89 c7             	mov    %rax,%rdi
   199b5:	e8 5d 0c 00 00       	call   1a617 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   199ba:	48 89 c3             	mov    %rax,%rbx
   199bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   199c1:	48 89 c7             	mov    %rax,%rdi
   199c4:	e8 40 0c 00 00       	call   1a609 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   199c9:	48 89 c2             	mov    %rax,%rdx
   199cc:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   199d0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   199d4:	4d 89 e0             	mov    %r12,%r8
   199d7:	48 89 d9             	mov    %rbx,%rcx
   199da:	48 89 c7             	mov    %rax,%rdi
   199dd:	e8 52 0c 00 00       	call   1a634 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   199e2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   199e6:	48 89 c7             	mov    %rax,%rdi
   199e9:	e8 46 11 00 00       	call   1ab34 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>
   199ee:	48 89 c2             	mov    %rax,%rdx
   199f1:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   199f5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   199f9:	48 89 ce             	mov    %rcx,%rsi
   199fc:	48 89 c7             	mov    %rax,%rdi
   199ff:	e8 e2 0c 00 00       	call   1a6e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>
   19a04:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   19a08:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__res.second)
   19a0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19a10:	48 85 c0             	test   %rax,%rax
   19a13:	74 1c                	je     19a31 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb1>
	  return __z._M_insert(__res);
   19a15:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19a19:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19a1d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   19a21:	48 89 ce             	mov    %rcx,%rsi
   19a24:	48 89 c7             	mov    %rax,%rdi
   19a27:	e8 26 11 00 00       	call   1ab52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>
   19a2c:	48 89 c3             	mov    %rax,%rbx
   19a2f:	eb 17                	jmp    19a48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc8>
	return iterator(__res.first);
   19a31:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   19a35:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   19a39:	48 89 d6             	mov    %rdx,%rsi
   19a3c:	48 89 c7             	mov    %rax,%rdi
   19a3f:	e8 64 11 00 00       	call   1aba8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   19a44:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
      }
   19a48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   19a4c:	48 89 c7             	mov    %rax,%rdi
   19a4f:	e8 5c 0c 00 00       	call   1a6b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
   19a54:	48 89 d8             	mov    %rbx,%rax
   19a57:	eb 1a                	jmp    19a73 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xf3>
   19a59:	48 89 c3             	mov    %rax,%rbx
   19a5c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   19a60:	48 89 c7             	mov    %rax,%rdi
   19a63:	e8 48 0c 00 00       	call   1a6b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
   19a68:	48 89 d8             	mov    %rbx,%rax
   19a6b:	48 89 c7             	mov    %rax,%rdi
   19a6e:	e8 2d b9 fe ff       	call   53a0 <_Unwind_Resume@plt>
   19a73:	48 83 c4 60          	add    $0x60,%rsp
   19a77:	5b                   	pop    %rbx
   19a78:	41 5c                	pop    %r12
   19a7a:	5d                   	pop    %rbp
   19a7b:	c3                   	ret

0000000000019a7c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   19a7c:	55                   	push   %rbp
   19a7d:	48 89 e5             	mov    %rsp,%rbp
   19a80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19a84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   19a88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19a8c:	48 8b 10             	mov    (%rax),%rdx
   19a8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19a93:	48 89 10             	mov    %rdx,(%rax)
   19a96:	90                   	nop
   19a97:	5d                   	pop    %rbp
   19a98:	c3                   	ret
   19a99:	90                   	nop

0000000000019a9a <_ZNSt17_Optional_payloadIjLb1ELb1ELb1EECI1St22_Optional_payload_baseIjEIJjEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
   19a9a:	55                   	push   %rbp
   19a9b:	48 89 e5             	mov    %rsp,%rbp
   19a9e:	48 83 ec 20          	sub    $0x20,%rsp
   19aa2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19aa6:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   19aaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19aae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19ab2:	48 89 d6             	mov    %rdx,%rsi
   19ab5:	48 89 c7             	mov    %rax,%rdi
   19ab8:	e8 05 11 00 00       	call   1abc2 <_ZNSt22_Optional_payload_baseIjEC1IJjEEESt10in_place_tDpOT_>
   19abd:	90                   	nop
   19abe:	c9                   	leave
   19abf:	c3                   	ret

0000000000019ac0 <_ZNSt14_Optional_baseIjLb1ELb1EEC1IJjELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
   19ac0:	55                   	push   %rbp
   19ac1:	48 89 e5             	mov    %rsp,%rbp
   19ac4:	53                   	push   %rbx
   19ac5:	48 83 ec 18          	sub    $0x18,%rsp
   19ac9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19acd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_payload(in_place, std::forward<_Args>(__args)...)
   19ad1:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   19ad5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19ad9:	48 89 c7             	mov    %rax,%rdi
   19adc:	e8 53 fb ff ff       	call   19634 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   19ae1:	48 89 c6             	mov    %rax,%rsi
   19ae4:	48 89 df             	mov    %rbx,%rdi
   19ae7:	e8 ae ff ff ff       	call   19a9a <_ZNSt17_Optional_payloadIjLb1ELb1ELb1EECI1St22_Optional_payload_baseIjEIJjEEESt10in_place_tDpOT_>
	{ }
   19aec:	90                   	nop
   19aed:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19af1:	c9                   	leave
   19af2:	c3                   	ret
   19af3:	90                   	nop

0000000000019af4 <_ZNSt22_Optional_payload_baseIjE6_M_getEv>:
      _M_get() noexcept
   19af4:	55                   	push   %rbp
   19af5:	48 89 e5             	mov    %rsp,%rbp
   19af8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_payload._M_value; }
   19afc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b00:	5d                   	pop    %rbp
   19b01:	c3                   	ret

0000000000019b02 <_ZSt10__exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>:

  // C++11 version of std::exchange for internal use.
  template <typename _Tp, typename _Up = _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
   19b02:	55                   	push   %rbp
   19b03:	48 89 e5             	mov    %rsp,%rbp
   19b06:	48 83 ec 20          	sub    $0x20,%rsp
   19b0a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19b0e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    {
      _Tp __old_val = std::move(__obj);
   19b12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19b16:	48 89 c7             	mov    %rax,%rdi
   19b19:	e8 39 e6 ff ff       	call   18157 <_ZSt4moveIRN2vk14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS4_>
   19b1e:	48 8b 00             	mov    (%rax),%rax
   19b21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   19b25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19b29:	48 89 c7             	mov    %rax,%rdi
   19b2c:	e8 aa e5 ff ff       	call   180db <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   19b31:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19b35:	48 8b 00             	mov    (%rax),%rax
   19b38:	48 89 02             	mov    %rax,(%rdx)
      return __old_val;
   19b3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   19b3f:	c9                   	leave
   19b40:	c3                   	ret

0000000000019b41 <_ZSt10__exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>:
    __exchange(_Tp& __obj, _Up&& __new_val)
   19b41:	55                   	push   %rbp
   19b42:	48 89 e5             	mov    %rsp,%rbp
   19b45:	48 83 ec 20          	sub    $0x20,%rsp
   19b49:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19b4d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      _Tp __old_val = std::move(__obj);
   19b51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19b55:	48 89 c7             	mov    %rax,%rdi
   19b58:	e8 08 e6 ff ff       	call   18165 <_ZSt4moveIRPKN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS7_>
   19b5d:	48 8b 00             	mov    (%rax),%rax
   19b60:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   19b64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19b68:	48 89 c7             	mov    %rax,%rdi
   19b6b:	e8 a9 e5 ff ff       	call   18119 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   19b70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19b74:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return __old_val;
   19b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   19b7f:	c9                   	leave
   19b80:	c3                   	ret
   19b81:	90                   	nop

0000000000019b82 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   19b82:	55                   	push   %rbp
   19b83:	48 89 e5             	mov    %rsp,%rbp
   19b86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19b8a:	90                   	nop
   19b8b:	5d                   	pop    %rbp
   19b8c:	c3                   	ret

0000000000019b8d <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   19b8d:	55                   	push   %rbp
   19b8e:	48 89 e5             	mov    %rsp,%rbp
   19b91:	48 83 ec 40          	sub    $0x40,%rsp
   19b95:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   19b99:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   19b9d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   19ba1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19ba5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19ba9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19bad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   19bb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19bb5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   19bb9:	e8 e0 c5 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   19bbe:	84 c0                	test   %al,%al
   19bc0:	74 0e                	je     19bd0 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m+0x43>
	    ::operator delete(__p);
   19bc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19bc6:	48 89 c7             	mov    %rax,%rdi
   19bc9:	e8 22 b6 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   19bce:	eb 18                	jmp    19be8 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   19bd0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19bd4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19bd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19bdc:	48 89 ce             	mov    %rcx,%rsi
   19bdf:	48 89 c7             	mov    %rax,%rdi
   19be2:	e8 d7 1e 00 00       	call   1babe <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE10deallocateEPS2_m>
      { __a.deallocate(__p, __n); }
   19be7:	90                   	nop
   19be8:	90                   	nop
   19be9:	c9                   	leave
   19bea:	c3                   	ret

0000000000019beb <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   19beb:	55                   	push   %rbp
   19bec:	48 89 e5             	mov    %rsp,%rbp
   19bef:	48 83 ec 10          	sub    $0x10,%rsp
   19bf3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19bf7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   19bfb:	e8 9e c5 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   19c00:	84 c0                	test   %al,%al
   19c02:	74 15                	je     19c19 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   19c04:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19c08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19c0c:	48 89 d6             	mov    %rdx,%rsi
   19c0f:	48 89 c7             	mov    %rax,%rdi
   19c12:	e8 e6 0f 00 00       	call   1abfd <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_>
   19c17:	eb 13                	jmp    19c2c <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_+0x41>
	__destroy(__first, __last);
   19c19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19c1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19c21:	48 89 d6             	mov    %rdx,%rsi
   19c24:	48 89 c7             	mov    %rax,%rdi
   19c27:	e8 d1 0f 00 00       	call   1abfd <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_>
    }
   19c2c:	c9                   	leave
   19c2d:	c3                   	ret

0000000000019c2e <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   19c2e:	55                   	push   %rbp
   19c2f:	48 89 e5             	mov    %rsp,%rbp
   19c32:	48 83 ec 40          	sub    $0x40,%rsp
   19c36:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   19c3a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   19c3e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   19c42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c46:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19c4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19c4e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   19c52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19c56:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   19c5a:	e8 3f c5 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   19c5f:	84 c0                	test   %al,%al
   19c61:	74 0e                	je     19c71 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   19c63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19c67:	48 89 c7             	mov    %rax,%rdi
   19c6a:	e8 81 b5 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   19c6f:	eb 18                	jmp    19c89 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   19c71:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19c75:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19c79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19c7d:	48 89 ce             	mov    %rcx,%rsi
   19c80:	48 89 c7             	mov    %rax,%rdi
   19c83:	e8 90 1e 00 00       	call   1bb18 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   19c88:	90                   	nop
   19c89:	90                   	nop
   19c8a:	c9                   	leave
   19c8b:	c3                   	ret

0000000000019c8c <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   19c8c:	55                   	push   %rbp
   19c8d:	48 89 e5             	mov    %rsp,%rbp
   19c90:	48 83 ec 10          	sub    $0x10,%rsp
   19c94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19c98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   19c9c:	e8 fd c4 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   19ca1:	84 c0                	test   %al,%al
   19ca3:	74 15                	je     19cba <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   19ca5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19ca9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19cad:	48 89 d6             	mov    %rdx,%rsi
   19cb0:	48 89 c7             	mov    %rax,%rdi
   19cb3:	e8 7e 0f 00 00       	call   1ac36 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>
   19cb8:	eb 13                	jmp    19ccd <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_+0x41>
	__destroy(__first, __last);
   19cba:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19cc2:	48 89 d6             	mov    %rdx,%rsi
   19cc5:	48 89 c7             	mov    %rax,%rdi
   19cc8:	e8 a2 0f 00 00       	call   1ac6f <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>
    }
   19ccd:	c9                   	leave
   19cce:	c3                   	ret
   19ccf:	90                   	nop

0000000000019cd0 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   19cd0:	55                   	push   %rbp
   19cd1:	48 89 e5             	mov    %rsp,%rbp
   19cd4:	48 83 ec 10          	sub    $0x10,%rsp
   19cd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   19cdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ce0:	48 89 c7             	mov    %rax,%rdi
   19ce3:	e8 ec 0f 00 00       	call   1acd4 <_ZNKSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   19ce8:	48 89 c7             	mov    %rax,%rdi
   19ceb:	e8 a2 0f 00 00       	call   1ac92 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>
   19cf0:	c9                   	leave
   19cf1:	c3                   	ret

0000000000019cf2 <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>:
  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   19cf2:	55                   	push   %rbp
   19cf3:	48 89 e5             	mov    %rsp,%rbp
   19cf6:	48 83 ec 20          	sub    $0x20,%rsp
   19cfa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19cfe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19d02:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
   19d06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19d0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d0e:	48 89 d6             	mov    %rdx,%rsi
   19d11:	48 89 c7             	mov    %rax,%rdi
   19d14:	e8 c9 0f 00 00       	call   1ace2 <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>
   19d19:	c9                   	leave
   19d1a:	c3                   	ret
   19d1b:	90                   	nop

0000000000019d1c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   19d1c:	55                   	push   %rbp
   19d1d:	48 89 e5             	mov    %rsp,%rbp
   19d20:	48 83 ec 10          	sub    $0x10,%rsp
   19d24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   19d2c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19d31:	74 15                	je     19d48 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x2c>
   19d33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d37:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19d3b:	48 89 d6             	mov    %rdx,%rsi
   19d3e:	48 89 c7             	mov    %rax,%rdi
   19d41:	e8 c5 0f 00 00       	call   1ad0b <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>
   19d46:	eb 05                	jmp    19d4d <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x31>
   19d48:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   19d4d:	c9                   	leave
   19d4e:	c3                   	ret

0000000000019d4f <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   19d4f:	55                   	push   %rbp
   19d50:	48 89 e5             	mov    %rsp,%rbp
   19d53:	48 83 ec 20          	sub    $0x20,%rsp
   19d57:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d5b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19d5f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   19d63:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   19d67:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   19d6b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19d6f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   19d73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d77:	48 89 c7             	mov    %rax,%rdi
   19d7a:	e8 13 10 00 00       	call   1ad92 <_ZSt12__relocate_aIPP18VkPhysicalDevice_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   19d7f:	c9                   	leave
   19d80:	c3                   	ret

0000000000019d81 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   19d81:	55                   	push   %rbp
   19d82:	48 89 e5             	mov    %rsp,%rbp
   19d85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   19d89:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   19d90:	ff ff 0f 
      }
   19d93:	5d                   	pop    %rbp
   19d94:	c3                   	ret

0000000000019d95 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   19d95:	55                   	push   %rbp
   19d96:	48 89 e5             	mov    %rsp,%rbp
   19d99:	48 83 ec 20          	sub    $0x20,%rsp
   19d9d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   19da1:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
   19da8:	ff ff 07 
   19dab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   19daf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19db3:	48 89 c7             	mov    %rax,%rdi
   19db6:	e8 c6 ff ff ff       	call   19d81 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8max_sizeERKS3_>
   19dbb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   19dbf:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   19dc3:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   19dc7:	48 89 d6             	mov    %rdx,%rsi
   19dca:	48 89 c7             	mov    %rax,%rdi
   19dcd:	e8 4e cd ff ff       	call   16b20 <_ZSt3minImERKT_S2_S2_>
   19dd2:	48 8b 00             	mov    (%rax),%rax
      }
   19dd5:	c9                   	leave
   19dd6:	c3                   	ret
   19dd7:	90                   	nop

0000000000019dd8 <_ZNKSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   19dd8:	55                   	push   %rbp
   19dd9:	48 89 e5             	mov    %rsp,%rbp
   19ddc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   19de0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19de4:	5d                   	pop    %rbp
   19de5:	c3                   	ret

0000000000019de6 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m>:
      allocate(allocator_type& __a, size_type __n)
   19de6:	55                   	push   %rbp
   19de7:	48 89 e5             	mov    %rsp,%rbp
   19dea:	48 83 ec 20          	sub    $0x20,%rsp
   19dee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19df2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   19df6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19dfa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19dfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19e02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   19e06:	e8 93 c3 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   19e0b:	84 c0                	test   %al,%al
   19e0d:	74 42                	je     19e51 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x6b>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   19e0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19e13:	b9 00 00 00 00       	mov    $0x0,%ecx
   19e18:	48 89 c2             	mov    %rax,%rdx
   19e1b:	48 c1 e2 04          	shl    $0x4,%rdx
   19e1f:	48 c1 e8 3c          	shr    $0x3c,%rax
   19e23:	48 85 c0             	test   %rax,%rax
   19e26:	74 05                	je     19e2d <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x47>
   19e28:	b9 01 00 00 00       	mov    $0x1,%ecx
   19e2d:	48 89 d0             	mov    %rdx,%rax
   19e30:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   19e34:	48 89 c8             	mov    %rcx,%rax
   19e37:	83 e0 01             	and    $0x1,%eax
   19e3a:	84 c0                	test   %al,%al
   19e3c:	74 05                	je     19e43 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x5d>
	      std::__throw_bad_array_new_length();
   19e3e:	e8 3d b3 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   19e43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19e47:	48 89 c7             	mov    %rax,%rdi
   19e4a:	e8 d1 b3 fe ff       	call   5220 <_Znwm@plt>
   19e4f:	eb 19                	jmp    19e6a <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x84>
	return __allocator_base<_Tp>::allocate(__n, 0);
   19e51:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19e55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e59:	ba 00 00 00 00       	mov    $0x0,%edx
   19e5e:	48 89 ce             	mov    %rcx,%rsi
   19e61:	48 89 c7             	mov    %rax,%rdi
   19e64:	e8 3b 1e 00 00       	call   1bca4 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv>
   19e69:	90                   	nop
      { return __a.allocate(__n); }
   19e6a:	c9                   	leave
   19e6b:	c3                   	ret

0000000000019e6c <_ZSt12__relocate_aIPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
   19e6c:	55                   	push   %rbp
   19e6d:	48 89 e5             	mov    %rsp,%rbp
   19e70:	41 54                	push   %r12
   19e72:	53                   	push   %rbx
   19e73:	48 83 ec 20          	sub    $0x20,%rsp
   19e77:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19e7b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   19e7f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   19e83:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
   19e87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19e8b:	48 89 c7             	mov    %rax,%rdi
   19e8e:	e8 62 0f 00 00       	call   1adf5 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>
   19e93:	49 89 c4             	mov    %rax,%r12
   19e96:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19e9a:	48 89 c7             	mov    %rax,%rdi
   19e9d:	e8 53 0f 00 00       	call   1adf5 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>
   19ea2:	48 89 c3             	mov    %rax,%rbx
   19ea5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19ea9:	48 89 c7             	mov    %rax,%rdi
   19eac:	e8 44 0f 00 00       	call   1adf5 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>
   19eb1:	48 89 c7             	mov    %rax,%rdi
   19eb4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19eb8:	48 89 c1             	mov    %rax,%rcx
   19ebb:	4c 89 e2             	mov    %r12,%rdx
   19ebe:	48 89 de             	mov    %rbx,%rsi
   19ec1:	e8 3d 0f 00 00       	call   1ae03 <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
   19ec6:	48 83 c4 20          	add    $0x20,%rsp
   19eca:	5b                   	pop    %rbx
   19ecb:	41 5c                	pop    %r12
   19ecd:	5d                   	pop    %rbp
   19ece:	c3                   	ret

0000000000019ecf <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>:
    construct_at(_Tp* __location, _Args&&... __args)
   19ecf:	55                   	push   %rbp
   19ed0:	48 89 e5             	mov    %rsp,%rbp
   19ed3:	41 54                	push   %r12
   19ed5:	53                   	push   %rbx
   19ed6:	48 83 ec 20          	sub    $0x20,%rsp
   19eda:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19ede:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   19ee2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   19ee6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19eea:	48 89 c6             	mov    %rax,%rsi
   19eed:	bf 10 00 00 00       	mov    $0x10,%edi
   19ef2:	e8 bd c2 fe ff       	call   61b4 <_ZnwmPv>
   19ef7:	48 89 c3             	mov    %rax,%rbx
   19efa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19efe:	48 89 c7             	mov    %rax,%rdi
   19f01:	e8 db e7 ff ff       	call   186e1 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   19f06:	4c 8b 20             	mov    (%rax),%r12
   19f09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19f0d:	48 89 c7             	mov    %rax,%rdi
   19f10:	e8 be e7 ff ff       	call   186d3 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   19f15:	4c 89 e2             	mov    %r12,%rdx
   19f18:	48 89 c6             	mov    %rax,%rsi
   19f1b:	48 89 df             	mov    %rbx,%rdi
   19f1e:	e8 a1 bf ff ff       	call   15ec4 <_ZN2vk4raii14PhysicalDeviceC1ERKNS0_8InstanceEP18VkPhysicalDevice_T>
   19f23:	48 89 d8             	mov    %rbx,%rax
   19f26:	48 83 c4 20          	add    $0x20,%rsp
   19f2a:	5b                   	pop    %rbx
   19f2b:	41 5c                	pop    %r12
   19f2d:	5d                   	pop    %rbp
   19f2e:	c3                   	ret

0000000000019f2f <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   19f2f:	55                   	push   %rbp
   19f30:	48 89 e5             	mov    %rsp,%rbp
   19f33:	48 83 ec 10          	sub    $0x10,%rsp
   19f37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19f3b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   19f3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19f43:	48 89 c7             	mov    %rax,%rdi
   19f46:	e8 29 0f 00 00       	call   1ae74 <_ZSt10destroy_atIN2vk4raii14PhysicalDeviceEEvPT_>
	}
   19f4b:	90                   	nop
   19f4c:	c9                   	leave
   19f4d:	c3                   	ret

0000000000019f4e <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEmiEl>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
   19f4e:	55                   	push   %rbp
   19f4f:	48 89 e5             	mov    %rsp,%rbp
   19f52:	48 83 ec 20          	sub    $0x20,%rsp
   19f56:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19f5a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
   19f5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19f62:	48 8b 00             	mov    (%rax),%rax
   19f65:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   19f69:	48 c1 e2 04          	shl    $0x4,%rdx
   19f6d:	48 f7 da             	neg    %rdx
   19f70:	48 01 d0             	add    %rdx,%rax
   19f73:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19f77:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   19f7b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   19f7f:	48 89 d6             	mov    %rdx,%rsi
   19f82:	48 89 c7             	mov    %rax,%rdi
   19f85:	e8 a2 f7 ff ff       	call   1972c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   19f8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19f8e:	c9                   	leave
   19f8f:	c3                   	ret

0000000000019f90 <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
   19f90:	55                   	push   %rbp
   19f91:	48 89 e5             	mov    %rsp,%rbp
   19f94:	48 83 ec 10          	sub    $0x10,%rsp
   19f98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
   19f9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19fa0:	48 89 c7             	mov    %rax,%rdi
   19fa3:	e8 e8 0e 00 00       	call   1ae90 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEEC1Ev>
   19fa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19fac:	48 89 c7             	mov    %rax,%rdi
   19faf:	e8 f8 0e 00 00       	call   1aeac <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EEC1Ev>
   19fb4:	90                   	nop
   19fb5:	c9                   	leave
   19fb6:	c3                   	ret

0000000000019fb7 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   19fb7:	55                   	push   %rbp
   19fb8:	48 89 e5             	mov    %rsp,%rbp
   19fbb:	48 83 ec 40          	sub    $0x40,%rsp
   19fbf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   19fc3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   19fc7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   19fcb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19fcf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19fd3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19fd7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   19fdb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19fdf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   19fe3:	e8 b6 c1 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   19fe8:	84 c0                	test   %al,%al
   19fea:	74 0e                	je     19ffa <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   19fec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19ff0:	48 89 c7             	mov    %rax,%rdi
   19ff3:	e8 f8 b1 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   19ff8:	eb 18                	jmp    1a012 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   19ffa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19ffe:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a006:	48 89 ce             	mov    %rcx,%rsi
   1a009:	48 89 c7             	mov    %rax,%rdi
   1a00c:	e8 57 1d 00 00       	call   1bd68 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1a011:	90                   	nop
   1a012:	90                   	nop
   1a013:	c9                   	leave
   1a014:	c3                   	ret

000000000001a015 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1a015:	55                   	push   %rbp
   1a016:	48 89 e5             	mov    %rsp,%rbp
   1a019:	48 83 ec 10          	sub    $0x10,%rsp
   1a01d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a021:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1a025:	e8 74 c1 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a02a:	84 c0                	test   %al,%al
   1a02c:	74 15                	je     1a043 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1a02e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a032:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a036:	48 89 d6             	mov    %rdx,%rsi
   1a039:	48 89 c7             	mov    %rax,%rdi
   1a03c:	e8 81 0e 00 00       	call   1aec2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>
   1a041:	eb 13                	jmp    1a056 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_+0x41>
	__destroy(__first, __last);
   1a043:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a047:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a04b:	48 89 d6             	mov    %rdx,%rsi
   1a04e:	48 89 c7             	mov    %rax,%rdi
   1a051:	e8 a5 0e 00 00       	call   1aefb <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>
    }
   1a056:	c9                   	leave
   1a057:	c3                   	ret

000000000001a058 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1a058:	55                   	push   %rbp
   1a059:	48 89 e5             	mov    %rsp,%rbp
   1a05c:	48 83 ec 10          	sub    $0x10,%rsp
   1a060:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1a064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a068:	48 89 c7             	mov    %rax,%rdi
   1a06b:	e8 f0 0e 00 00       	call   1af60 <_ZNKSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a070:	48 89 c7             	mov    %rax,%rdi
   1a073:	e8 a6 0e 00 00       	call   1af1e <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_max_sizeERKS2_>
   1a078:	c9                   	leave
   1a079:	c3                   	ret

000000000001a07a <_ZSt27__uninitialized_default_n_aIPN2vk21QueueFamilyPropertiesEmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1a07a:	55                   	push   %rbp
   1a07b:	48 89 e5             	mov    %rsp,%rbp
   1a07e:	48 83 ec 20          	sub    $0x20,%rsp
   1a082:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a086:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a08a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1a08e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a092:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a096:	48 89 d6             	mov    %rdx,%rsi
   1a099:	48 89 c7             	mov    %rax,%rdi
   1a09c:	e8 cd 0e 00 00       	call   1af6e <_ZSt25__uninitialized_default_nIPN2vk21QueueFamilyPropertiesEmET_S3_T0_>
   1a0a1:	c9                   	leave
   1a0a2:	c3                   	ret
   1a0a3:	90                   	nop

000000000001a0a4 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1a0a4:	55                   	push   %rbp
   1a0a5:	48 89 e5             	mov    %rsp,%rbp
   1a0a8:	48 83 ec 10          	sub    $0x10,%rsp
   1a0ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a0b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a0b4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a0b9:	74 15                	je     1a0d0 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm+0x2c>
   1a0bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a0bf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a0c3:	48 89 d6             	mov    %rdx,%rsi
   1a0c6:	48 89 c7             	mov    %rax,%rdi
   1a0c9:	e8 c9 0e 00 00       	call   1af97 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m>
   1a0ce:	eb 05                	jmp    1a0d5 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm+0x31>
   1a0d0:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1a0d5:	c9                   	leave
   1a0d6:	c3                   	ret

000000000001a0d7 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1a0d7:	55                   	push   %rbp
   1a0d8:	48 89 e5             	mov    %rsp,%rbp
   1a0db:	48 83 ec 20          	sub    $0x20,%rsp
   1a0df:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a0e3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a0e7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a0eb:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1a0ef:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1a0f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a0f7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a0fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a0ff:	48 89 c7             	mov    %rax,%rdi
   1a102:	e8 0d 0f 00 00       	call   1b014 <_ZSt12__relocate_aIPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1a107:	c9                   	leave
   1a108:	c3                   	ret

000000000001a109 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1a109:	55                   	push   %rbp
   1a10a:	48 89 e5             	mov    %rsp,%rbp
   1a10d:	48 83 ec 40          	sub    $0x40,%rsp
   1a111:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a115:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a119:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1a11d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a121:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a125:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a129:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a12d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a131:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1a135:	e8 64 c0 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a13a:	84 c0                	test   %al,%al
   1a13c:	74 0e                	je     1a14c <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1a13e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a142:	48 89 c7             	mov    %rax,%rdi
   1a145:	e8 a6 b0 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1a14a:	eb 18                	jmp    1a164 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1a14c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a150:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a154:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a158:	48 89 ce             	mov    %rcx,%rsi
   1a15b:	48 89 c7             	mov    %rax,%rdi
   1a15e:	e8 2b 1d 00 00       	call   1be8e <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1a163:	90                   	nop
   1a164:	90                   	nop
   1a165:	c9                   	leave
   1a166:	c3                   	ret

000000000001a167 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1a167:	55                   	push   %rbp
   1a168:	48 89 e5             	mov    %rsp,%rbp
   1a16b:	48 83 ec 10          	sub    $0x10,%rsp
   1a16f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a173:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1a177:	e8 22 c0 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a17c:	84 c0                	test   %al,%al
   1a17e:	74 15                	je     1a195 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1a180:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a184:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a188:	48 89 d6             	mov    %rdx,%rsi
   1a18b:	48 89 c7             	mov    %rax,%rdi
   1a18e:	e8 e4 0e 00 00       	call   1b077 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>
   1a193:	eb 13                	jmp    1a1a8 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_+0x41>
	__destroy(__first, __last);
   1a195:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a199:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a19d:	48 89 d6             	mov    %rdx,%rsi
   1a1a0:	48 89 c7             	mov    %rax,%rdi
   1a1a3:	e8 0b 0f 00 00       	call   1b0b3 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>
    }
   1a1a8:	c9                   	leave
   1a1a9:	c3                   	ret

000000000001a1aa <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1a1aa:	55                   	push   %rbp
   1a1ab:	48 89 e5             	mov    %rsp,%rbp
   1a1ae:	48 83 ec 10          	sub    $0x10,%rsp
   1a1b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1a1b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a1ba:	48 89 c7             	mov    %rax,%rdi
   1a1bd:	e8 56 0f 00 00       	call   1b118 <_ZNKSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a1c2:	48 89 c7             	mov    %rax,%rdi
   1a1c5:	e8 0c 0f 00 00       	call   1b0d6 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_max_sizeERKS2_>
   1a1ca:	c9                   	leave
   1a1cb:	c3                   	ret

000000000001a1cc <_ZSt27__uninitialized_default_n_aIPN2vk19ExtensionPropertiesEmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1a1cc:	55                   	push   %rbp
   1a1cd:	48 89 e5             	mov    %rsp,%rbp
   1a1d0:	48 83 ec 20          	sub    $0x20,%rsp
   1a1d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a1d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a1dc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1a1e0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a1e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a1e8:	48 89 d6             	mov    %rdx,%rsi
   1a1eb:	48 89 c7             	mov    %rax,%rdi
   1a1ee:	e8 33 0f 00 00       	call   1b126 <_ZSt25__uninitialized_default_nIPN2vk19ExtensionPropertiesEmET_S3_T0_>
   1a1f3:	c9                   	leave
   1a1f4:	c3                   	ret
   1a1f5:	90                   	nop

000000000001a1f6 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1a1f6:	55                   	push   %rbp
   1a1f7:	48 89 e5             	mov    %rsp,%rbp
   1a1fa:	48 83 ec 10          	sub    $0x10,%rsp
   1a1fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a202:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a206:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a20b:	74 15                	je     1a222 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm+0x2c>
   1a20d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a211:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a215:	48 89 d6             	mov    %rdx,%rsi
   1a218:	48 89 c7             	mov    %rax,%rdi
   1a21b:	e8 2f 0f 00 00       	call   1b14f <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m>
   1a220:	eb 05                	jmp    1a227 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm+0x31>
   1a222:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1a227:	c9                   	leave
   1a228:	c3                   	ret

000000000001a229 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1a229:	55                   	push   %rbp
   1a22a:	48 89 e5             	mov    %rsp,%rbp
   1a22d:	48 83 ec 20          	sub    $0x20,%rsp
   1a231:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a235:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a239:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a23d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1a241:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1a245:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a249:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a24d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a251:	48 89 c7             	mov    %rax,%rdi
   1a254:	e8 73 0f 00 00       	call   1b1cc <_ZSt12__relocate_aIPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1a259:	c9                   	leave
   1a25a:	c3                   	ret

000000000001a25b <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1a25b:	55                   	push   %rbp
   1a25c:	48 89 e5             	mov    %rsp,%rbp
   1a25f:	48 83 ec 40          	sub    $0x40,%rsp
   1a263:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a267:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a26b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1a26f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a273:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a277:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a27b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a27f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a283:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1a287:	e8 12 bf fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a28c:	84 c0                	test   %al,%al
   1a28e:	74 0e                	je     1a29e <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1a290:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a294:	48 89 c7             	mov    %rax,%rdi
   1a297:	e8 54 af fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1a29c:	eb 18                	jmp    1a2b6 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1a29e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a2a2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a2a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a2aa:	48 89 ce             	mov    %rcx,%rsi
   1a2ad:	48 89 c7             	mov    %rax,%rdi
   1a2b0:	e8 09 1d 00 00       	call   1bfbe <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1a2b5:	90                   	nop
   1a2b6:	90                   	nop
   1a2b7:	c9                   	leave
   1a2b8:	c3                   	ret

000000000001a2b9 <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1a2b9:	55                   	push   %rbp
   1a2ba:	48 89 e5             	mov    %rsp,%rbp
   1a2bd:	48 83 ec 10          	sub    $0x10,%rsp
   1a2c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a2c5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1a2c9:	e8 d0 be fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a2ce:	84 c0                	test   %al,%al
   1a2d0:	74 15                	je     1a2e7 <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1a2d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a2d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a2da:	48 89 d6             	mov    %rdx,%rsi
   1a2dd:	48 89 c7             	mov    %rax,%rdi
   1a2e0:	e8 4a 0f 00 00       	call   1b22f <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>
   1a2e5:	eb 13                	jmp    1a2fa <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_+0x41>
	__destroy(__first, __last);
   1a2e7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a2eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a2ef:	48 89 d6             	mov    %rdx,%rsi
   1a2f2:	48 89 c7             	mov    %rax,%rdi
   1a2f5:	e8 71 0f 00 00       	call   1b26b <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>
    }
   1a2fa:	c9                   	leave
   1a2fb:	c3                   	ret

000000000001a2fc <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1a2fc:	55                   	push   %rbp
   1a2fd:	48 89 e5             	mov    %rsp,%rbp
   1a300:	48 83 ec 10          	sub    $0x10,%rsp
   1a304:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1a308:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a30c:	48 89 c7             	mov    %rax,%rdi
   1a30f:	e8 bc 0f 00 00       	call   1b2d0 <_ZNKSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a314:	48 89 c7             	mov    %rax,%rdi
   1a317:	e8 72 0f 00 00       	call   1b28e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_max_sizeERKS2_>
   1a31c:	c9                   	leave
   1a31d:	c3                   	ret

000000000001a31e <_ZSt27__uninitialized_default_n_aIPN2vk15LayerPropertiesEmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1a31e:	55                   	push   %rbp
   1a31f:	48 89 e5             	mov    %rsp,%rbp
   1a322:	48 83 ec 20          	sub    $0x20,%rsp
   1a326:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a32a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a32e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1a332:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a336:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a33a:	48 89 d6             	mov    %rdx,%rsi
   1a33d:	48 89 c7             	mov    %rax,%rdi
   1a340:	e8 99 0f 00 00       	call   1b2de <_ZSt25__uninitialized_default_nIPN2vk15LayerPropertiesEmET_S3_T0_>
   1a345:	c9                   	leave
   1a346:	c3                   	ret
   1a347:	90                   	nop

000000000001a348 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1a348:	55                   	push   %rbp
   1a349:	48 89 e5             	mov    %rsp,%rbp
   1a34c:	48 83 ec 10          	sub    $0x10,%rsp
   1a350:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a354:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a358:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a35d:	74 15                	je     1a374 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm+0x2c>
   1a35f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a363:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a367:	48 89 d6             	mov    %rdx,%rsi
   1a36a:	48 89 c7             	mov    %rax,%rdi
   1a36d:	e8 95 0f 00 00       	call   1b307 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m>
   1a372:	eb 05                	jmp    1a379 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm+0x31>
   1a374:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1a379:	c9                   	leave
   1a37a:	c3                   	ret

000000000001a37b <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1a37b:	55                   	push   %rbp
   1a37c:	48 89 e5             	mov    %rsp,%rbp
   1a37f:	48 83 ec 20          	sub    $0x20,%rsp
   1a383:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a387:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a38b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a38f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1a393:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1a397:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a39b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a39f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a3a3:	48 89 c7             	mov    %rax,%rdi
   1a3a6:	e8 d9 0f 00 00       	call   1b384 <_ZSt12__relocate_aIPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1a3ab:	c9                   	leave
   1a3ac:	c3                   	ret

000000000001a3ad <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1a3ad:	55                   	push   %rbp
   1a3ae:	48 89 e5             	mov    %rsp,%rbp
   1a3b1:	48 83 ec 40          	sub    $0x40,%rsp
   1a3b5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a3b9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a3bd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1a3c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a3c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a3c9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a3cd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a3d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a3d5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1a3d9:	e8 c0 bd fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1a3de:	84 c0                	test   %al,%al
   1a3e0:	74 0e                	je     1a3f0 <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1a3e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a3e6:	48 89 c7             	mov    %rax,%rdi
   1a3e9:	e8 02 ae fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1a3ee:	eb 18                	jmp    1a408 <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1a3f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a3f4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a3f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a3fc:	48 89 ce             	mov    %rcx,%rsi
   1a3ff:	48 89 c7             	mov    %rax,%rdi
   1a402:	e8 e7 1c 00 00       	call   1c0ee <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1a407:	90                   	nop
   1a408:	90                   	nop
   1a409:	c9                   	leave
   1a40a:	c3                   	ret

000000000001a40b <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
   1a40b:	55                   	push   %rbp
   1a40c:	48 89 e5             	mov    %rsp,%rbp
   1a40f:	53                   	push   %rbx
   1a410:	48 83 ec 28          	sub    $0x28,%rsp
   1a414:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a418:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a41c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1a420:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a424:	48 89 c7             	mov    %rax,%rdi
   1a427:	e8 bb 0f 00 00       	call   1b3e7 <_ZSt12__miter_baseIPKPKcET_S4_>
   1a42c:	48 89 c3             	mov    %rax,%rbx
   1a42f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a433:	48 89 c7             	mov    %rax,%rdi
   1a436:	e8 ac 0f 00 00       	call   1b3e7 <_ZSt12__miter_baseIPKPKcET_S4_>
   1a43b:	48 89 c1             	mov    %rax,%rcx
   1a43e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a442:	48 89 c2             	mov    %rax,%rdx
   1a445:	48 89 de             	mov    %rbx,%rsi
   1a448:	48 89 cf             	mov    %rcx,%rdi
   1a44b:	e8 a5 0f 00 00       	call   1b3f5 <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>
    }
   1a450:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a454:	c9                   	leave
   1a455:	c3                   	ret

000000000001a456 <_ZSt8_DestroyIPKcEvPT_>:
    _Destroy(_Tp* __pointer)
   1a456:	55                   	push   %rbp
   1a457:	48 89 e5             	mov    %rsp,%rbp
   1a45a:	48 83 ec 10          	sub    $0x10,%rsp
   1a45e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1a462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a466:	48 89 c7             	mov    %rax,%rdi
   1a469:	e8 f1 0f 00 00       	call   1b45f <_ZSt10destroy_atIPKcEvPT_>
    }
   1a46e:	90                   	nop
   1a46f:	c9                   	leave
   1a470:	c3                   	ret
   1a471:	90                   	nop

000000000001a472 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
   1a472:	55                   	push   %rbp
   1a473:	48 89 e5             	mov    %rsp,%rbp
   1a476:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a47a:	90                   	nop
   1a47b:	5d                   	pop    %rbp
   1a47c:	c3                   	ret

000000000001a47d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1a47d:	55                   	push   %rbp
   1a47e:	48 89 e5             	mov    %rsp,%rbp
   1a481:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_right); }
   1a485:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a489:	48 8b 40 18          	mov    0x18(%rax),%rax
   1a48d:	5d                   	pop    %rbp
   1a48e:	c3                   	ret

000000000001a48f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1a48f:	55                   	push   %rbp
   1a490:	48 89 e5             	mov    %rsp,%rbp
   1a493:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_left); }
   1a497:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a49b:	48 8b 40 10          	mov    0x10(%rax),%rax
   1a49f:	5d                   	pop    %rbp
   1a4a0:	c3                   	ret
   1a4a1:	90                   	nop

000000000001a4a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1a4a2:	55                   	push   %rbp
   1a4a3:	48 89 e5             	mov    %rsp,%rbp
   1a4a6:	48 83 ec 10          	sub    $0x10,%rsp
   1a4aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a4ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	_M_destroy_node(__p);
   1a4b2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a4b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a4ba:	48 89 d6             	mov    %rdx,%rsi
   1a4bd:	48 89 c7             	mov    %rax,%rdi
   1a4c0:	e8 a5 0f 00 00       	call   1b46a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
   1a4c5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a4c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a4cd:	48 89 d6             	mov    %rdx,%rsi
   1a4d0:	48 89 c7             	mov    %rax,%rdi
   1a4d3:	e8 d0 0f 00 00       	call   1b4a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
   1a4d8:	90                   	nop
   1a4d9:	c9                   	leave
   1a4da:	c3                   	ret
   1a4db:	90                   	nop

000000000001a4dc <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
   1a4dc:	55                   	push   %rbp
   1a4dd:	48 89 e5             	mov    %rsp,%rbp
   1a4e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1a4e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a4e8:	48 8b 40 10          	mov    0x10(%rax),%rax
   1a4ec:	5d                   	pop    %rbp
   1a4ed:	c3                   	ret

000000000001a4ee <_ZNSt14__array_traitsIcLm256EE6_S_ptrERA256_Kc>:
      _S_ptr(const _Type& __t) noexcept
   1a4ee:	55                   	push   %rbp
   1a4ef:	48 89 e5             	mov    %rsp,%rbp
   1a4f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_cast<_Tp*>(__t); }
   1a4f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a4fa:	5d                   	pop    %rbp
   1a4fb:	c3                   	ret

000000000001a4fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>:
      lower_bound(const key_type& __k)
   1a4fc:	55                   	push   %rbp
   1a4fd:	48 89 e5             	mov    %rsp,%rbp
   1a500:	53                   	push   %rbx
   1a501:	48 83 ec 18          	sub    $0x18,%rsp
   1a505:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a509:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   1a50d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a511:	48 89 c7             	mov    %rax,%rdi
   1a514:	e8 c5 0f 00 00       	call   1b4de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1a519:	48 89 c3             	mov    %rax,%rbx
   1a51c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a520:	48 89 c7             	mov    %rax,%rdi
   1a523:	e8 b0 f2 ff ff       	call   197d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   1a528:	48 89 c6             	mov    %rax,%rsi
   1a52b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1a52f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a533:	48 89 d1             	mov    %rdx,%rcx
   1a536:	48 89 da             	mov    %rbx,%rdx
   1a539:	48 89 c7             	mov    %rax,%rdi
   1a53c:	e8 af 0f 00 00       	call   1b4f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>
   1a541:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a545:	c9                   	leave
   1a546:	c3                   	ret
   1a547:	90                   	nop

000000000001a548 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   1a548:	55                   	push   %rbp
   1a549:	48 89 e5             	mov    %rsp,%rbp
   1a54c:	48 83 ec 20          	sub    $0x20,%rsp
   1a550:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(&this->_M_impl._M_header); }
   1a554:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a558:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1a55c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1a560:	48 89 d6             	mov    %rdx,%rsi
   1a563:	48 89 c7             	mov    %rax,%rdi
   1a566:	e8 3d 06 00 00       	call   1aba8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1a56b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a56f:	c9                   	leave
   1a570:	c3                   	ret
   1a571:	90                   	nop

000000000001a572 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>:
      key_comp() const
   1a572:	55                   	push   %rbp
   1a573:	48 89 e5             	mov    %rsp,%rbp
   1a576:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_key_compare; }
   1a57a:	90                   	nop
   1a57b:	5d                   	pop    %rbp
   1a57c:	c3                   	ret
   1a57d:	90                   	nop

000000000001a57e <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr()
   1a57e:	55                   	push   %rbp
   1a57f:	48 89 e5             	mov    %rsp,%rbp
   1a582:	48 83 ec 10          	sub    $0x10,%rsp
   1a586:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   1a58a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a58e:	48 83 c0 20          	add    $0x20,%rax
   1a592:	48 89 c7             	mov    %rax,%rdi
   1a595:	e8 ec 0f 00 00       	call   1b586 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   1a59a:	c9                   	leave
   1a59b:	c3                   	ret

000000000001a59c <_ZStssIcSt11char_traitsIcESaIcEEDTcl21__char_traits_cmp_catIT0_ELi0EEERKNSt7__cxx1112basic_stringIT_S3_T1_EESB_>:
   *  @return  A value indicating whether `__lhs` is less than, equal to,
   *	       greater than, or incomparable with `__rhs`.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    constexpr auto
    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   1a59c:	55                   	push   %rbp
   1a59d:	48 89 e5             	mov    %rsp,%rbp
   1a5a0:	48 83 ec 10          	sub    $0x10,%rsp
   1a5a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a5a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		const basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept
    -> decltype(__detail::__char_traits_cmp_cat<_Traits>(0))
    { return __detail::__char_traits_cmp_cat<_Traits>(__lhs.compare(__rhs)); }
   1a5ac:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a5b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a5b4:	48 89 d6             	mov    %rdx,%rsi
   1a5b7:	48 89 c7             	mov    %rax,%rdi
   1a5ba:	e8 e1 0f 00 00       	call   1b5a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
   1a5bf:	89 c7                	mov    %eax,%edi
   1a5c1:	e8 ff f2 ff ff       	call   198c5 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai>
   1a5c6:	c9                   	leave
   1a5c7:	c3                   	ret

000000000001a5c8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1a5c8:	55                   	push   %rbp
   1a5c9:	48 89 e5             	mov    %rsp,%rbp
   1a5cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1a5d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a5d4:	5d                   	pop    %rbp
   1a5d5:	c3                   	ret

000000000001a5d6 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
   1a5d6:	55                   	push   %rbp
   1a5d7:	48 89 e5             	mov    %rsp,%rbp
   1a5da:	53                   	push   %rbx
   1a5db:	48 83 ec 18          	sub    $0x18,%rsp
   1a5df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a5e3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Inherited(std::forward<_UElements>(__elements)...) { }
   1a5e7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1a5eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a5ef:	48 89 c7             	mov    %rax,%rdi
   1a5f2:	e8 d1 ff ff ff       	call   1a5c8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1a5f7:	48 89 c6             	mov    %rax,%rsi
   1a5fa:	48 89 df             	mov    %rbx,%rdi
   1a5fd:	e8 42 10 00 00       	call   1b644 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>
   1a602:	90                   	nop
   1a603:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a607:	c9                   	leave
   1a608:	c3                   	ret

000000000001a609 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1a609:	55                   	push   %rbp
   1a60a:	48 89 e5             	mov    %rsp,%rbp
   1a60d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1a611:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a615:	5d                   	pop    %rbp
   1a616:	c3                   	ret

000000000001a617 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1a617:	55                   	push   %rbp
   1a618:	48 89 e5             	mov    %rsp,%rbp
   1a61b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1a61f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a623:	5d                   	pop    %rbp
   1a624:	c3                   	ret

000000000001a625 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1a625:	55                   	push   %rbp
   1a626:	48 89 e5             	mov    %rsp,%rbp
   1a629:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1a62d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a631:	5d                   	pop    %rbp
   1a632:	c3                   	ret
   1a633:	90                   	nop

000000000001a634 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
   1a634:	55                   	push   %rbp
   1a635:	48 89 e5             	mov    %rsp,%rbp
   1a638:	41 54                	push   %r12
   1a63a:	53                   	push   %rbx
   1a63b:	48 83 ec 30          	sub    $0x30,%rsp
   1a63f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a643:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a647:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1a64b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1a64f:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  : _M_t(__t),
   1a653:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a657:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1a65b:	48 89 10             	mov    %rdx,(%rax)
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
   1a65e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a662:	48 89 c7             	mov    %rax,%rdi
   1a665:	e8 bb ff ff ff       	call   1a625 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1a66a:	49 89 c4             	mov    %rax,%r12
   1a66d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a671:	48 89 c7             	mov    %rax,%rdi
   1a674:	e8 9e ff ff ff       	call   1a617 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1a679:	48 89 c3             	mov    %rax,%rbx
   1a67c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a680:	48 89 c7             	mov    %rax,%rdi
   1a683:	e8 81 ff ff ff       	call   1a609 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1a688:	48 89 c6             	mov    %rax,%rsi
   1a68b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a68f:	4c 89 e1             	mov    %r12,%rcx
   1a692:	48 89 da             	mov    %rbx,%rdx
   1a695:	48 89 c7             	mov    %rax,%rdi
   1a698:	e8 db 0f 00 00       	call   1b678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
   1a69d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a6a1:	48 89 42 08          	mov    %rax,0x8(%rdx)
	  { }
   1a6a5:	90                   	nop
   1a6a6:	48 83 c4 30          	add    $0x30,%rsp
   1a6aa:	5b                   	pop    %rbx
   1a6ab:	41 5c                	pop    %r12
   1a6ad:	5d                   	pop    %rbp
   1a6ae:	c3                   	ret
   1a6af:	90                   	nop

000000000001a6b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
   1a6b0:	55                   	push   %rbp
   1a6b1:	48 89 e5             	mov    %rsp,%rbp
   1a6b4:	48 83 ec 10          	sub    $0x10,%rsp
   1a6b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (_M_node)
   1a6bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a6c0:	48 8b 40 08          	mov    0x8(%rax),%rax
   1a6c4:	48 85 c0             	test   %rax,%rax
   1a6c7:	74 1a                	je     1a6e3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev+0x33>
	    _M_t._M_drop_node(_M_node);
   1a6c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a6cd:	48 8b 00             	mov    (%rax),%rax
   1a6d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1a6d4:	48 8b 52 08          	mov    0x8(%rdx),%rdx
   1a6d8:	48 89 d6             	mov    %rdx,%rsi
   1a6db:	48 89 c7             	mov    %rax,%rdi
   1a6de:	e8 bf fd ff ff       	call   1a4a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	}
   1a6e3:	90                   	nop
   1a6e4:	c9                   	leave
   1a6e5:	c3                   	ret

000000000001a6e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1a6e6:	55                   	push   %rbp
   1a6e7:	48 89 e5             	mov    %rsp,%rbp
   1a6ea:	53                   	push   %rbx
   1a6eb:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
   1a6f2:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
   1a6f9:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
   1a700:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
      iterator __pos = __position._M_const_cast();
   1a707:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1a70e:	48 89 c7             	mov    %rax,%rdi
   1a711:	e8 de 0f 00 00       	call   1b6f4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>
   1a716:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
      if (__pos._M_node == _M_end())
   1a71d:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1a724:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a72b:	48 89 c7             	mov    %rax,%rdi
   1a72e:	e8 ab 0d 00 00       	call   1b4de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1a733:	48 39 c3             	cmp    %rax,%rbx
   1a736:	0f 94 c0             	sete   %al
   1a739:	84 c0                	test   %al,%al
   1a73b:	0f 84 c8 00 00 00    	je     1a809 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x123>
	  if (size() > 0
   1a741:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a748:	48 89 c7             	mov    %rax,%rdi
   1a74b:	e8 cc 0f 00 00       	call   1b71c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1a750:	48 85 c0             	test   %rax,%rax
   1a753:	74 44                	je     1a799 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   1a755:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1a75c:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a763:	48 89 c7             	mov    %rax,%rdi
   1a766:	e8 c3 0f 00 00       	call   1b72e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1a76b:	48 8b 00             	mov    (%rax),%rax
   1a76e:	48 89 c7             	mov    %rax,%rdi
   1a771:	e8 ca 0f 00 00       	call   1b740 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1a776:	48 89 c1             	mov    %rax,%rcx
   1a779:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1a780:	48 89 c2             	mov    %rax,%rdx
   1a783:	48 89 ce             	mov    %rcx,%rsi
   1a786:	48 89 df             	mov    %rbx,%rdi
   1a789:	e8 5e f1 ff ff       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1a78e:	84 c0                	test   %al,%al
   1a790:	74 07                	je     1a799 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   1a792:	b8 01 00 00 00       	mov    $0x1,%eax
   1a797:	eb 05                	jmp    1a79e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb8>
   1a799:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (size() > 0
   1a79e:	84 c0                	test   %al,%al
   1a7a0:	74 49                	je     1a7eb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x105>
	    return _Res(0, _M_rightmost());
   1a7a2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a7a9:	48 89 c7             	mov    %rax,%rdi
   1a7ac:	e8 7d 0f 00 00       	call   1b72e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1a7b1:	48 89 c2             	mov    %rax,%rdx
   1a7b4:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
   1a7bb:	00 00 00 00 
   1a7bf:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
   1a7c6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1a7cd:	48 89 ce             	mov    %rcx,%rsi
   1a7d0:	48 89 c7             	mov    %rax,%rdi
   1a7d3:	e8 82 0f 00 00       	call   1b75a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1a7d8:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   1a7df:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
   1a7e6:	e9 43 03 00 00       	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1a7eb:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1a7f2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a7f9:	48 89 d6             	mov    %rdx,%rsi
   1a7fc:	48 89 c7             	mov    %rax,%rdi
   1a7ff:	e8 86 0f 00 00       	call   1b78a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1a804:	e9 25 03 00 00       	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1a809:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1a810:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1a817:	48 89 c7             	mov    %rax,%rdi
   1a81a:	e8 21 0f 00 00       	call   1b740 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1a81f:	48 89 c2             	mov    %rax,%rdx
   1a822:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1a829:	48 89 c6             	mov    %rax,%rsi
   1a82c:	48 89 df             	mov    %rbx,%rdi
   1a82f:	e8 b8 f0 ff ff       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1a834:	84 c0                	test   %al,%al
   1a836:	0f 84 66 01 00 00    	je     1a9a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x2bc>
	  iterator __before = __pos;
   1a83c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1a843:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
	  if (__pos._M_node == _M_leftmost()) // begin()
   1a84a:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1a851:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a858:	48 89 c7             	mov    %rax,%rdi
   1a85b:	e8 a0 10 00 00       	call   1b900 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1a860:	48 8b 00             	mov    (%rax),%rax
   1a863:	48 39 c3             	cmp    %rax,%rbx
   1a866:	0f 94 c0             	sete   %al
   1a869:	84 c0                	test   %al,%al
   1a86b:	74 4c                	je     1a8b9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1d3>
	    return _Res(_M_leftmost(), _M_leftmost());
   1a86d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a874:	48 89 c7             	mov    %rax,%rdi
   1a877:	e8 84 10 00 00       	call   1b900 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1a87c:	48 89 c3             	mov    %rax,%rbx
   1a87f:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a886:	48 89 c7             	mov    %rax,%rdi
   1a889:	e8 72 10 00 00       	call   1b900 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1a88e:	48 89 c1             	mov    %rax,%rcx
   1a891:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1a898:	48 89 da             	mov    %rbx,%rdx
   1a89b:	48 89 ce             	mov    %rcx,%rsi
   1a89e:	48 89 c7             	mov    %rax,%rdi
   1a8a1:	e8 6c 10 00 00       	call   1b912 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
   1a8a6:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1a8ad:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
   1a8b4:	e9 75 02 00 00       	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1a8b9:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1a8c0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
   1a8c7:	48 89 c7             	mov    %rax,%rdi
   1a8ca:	e8 87 10 00 00       	call   1b956 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
   1a8cf:	48 8b 00             	mov    (%rax),%rax
   1a8d2:	48 89 c7             	mov    %rax,%rdi
   1a8d5:	e8 66 0e 00 00       	call   1b740 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1a8da:	48 89 c1             	mov    %rax,%rcx
   1a8dd:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1a8e4:	48 89 c2             	mov    %rax,%rdx
   1a8e7:	48 89 ce             	mov    %rcx,%rsi
   1a8ea:	48 89 df             	mov    %rbx,%rdi
   1a8ed:	e8 fa ef ff ff       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1a8f2:	84 c0                	test   %al,%al
   1a8f4:	0f 84 8a 00 00 00    	je     1a984 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x29e>
	      if (_S_right(__before._M_node) == 0)
   1a8fa:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   1a901:	48 89 c7             	mov    %rax,%rdi
   1a904:	e8 74 fb ff ff       	call   1a47d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1a909:	48 85 c0             	test   %rax,%rax
   1a90c:	0f 94 c0             	sete   %al
   1a90f:	84 c0                	test   %al,%al
   1a911:	74 3e                	je     1a951 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x26b>
		return _Res(0, __before._M_node);
   1a913:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1a91a:	00 00 00 00 
   1a91e:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
   1a925:	48 8d 8d 68 ff ff ff 	lea    -0x98(%rbp),%rcx
   1a92c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1a933:	48 89 ce             	mov    %rcx,%rsi
   1a936:	48 89 c7             	mov    %rax,%rdi
   1a939:	e8 1c 0e 00 00       	call   1b75a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1a93e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   1a945:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
   1a94c:	e9 dd 01 00 00       	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__pos._M_node, __pos._M_node);
   1a951:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   1a958:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   1a95f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   1a966:	48 89 ce             	mov    %rcx,%rsi
   1a969:	48 89 c7             	mov    %rax,%rdi
   1a96c:	e8 a1 0f 00 00       	call   1b912 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
   1a971:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1a978:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   1a97f:	e9 aa 01 00 00       	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1a984:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1a98b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a992:	48 89 d6             	mov    %rdx,%rsi
   1a995:	48 89 c7             	mov    %rax,%rdi
   1a998:	e8 ed 0d 00 00       	call   1b78a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1a99d:	e9 8c 01 00 00       	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1a9a2:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1a9a9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1a9b0:	48 89 c7             	mov    %rax,%rdi
   1a9b3:	e8 88 0d 00 00       	call   1b740 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1a9b8:	48 89 c1             	mov    %rax,%rcx
   1a9bb:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1a9c2:	48 89 c2             	mov    %rax,%rdx
   1a9c5:	48 89 ce             	mov    %rcx,%rsi
   1a9c8:	48 89 df             	mov    %rbx,%rdi
   1a9cb:	e8 1c ef ff ff       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1a9d0:	84 c0                	test   %al,%al
   1a9d2:	0f 84 2c 01 00 00    	je     1ab04 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x41e>
	  iterator __after = __pos;
   1a9d8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1a9df:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
	  if (__pos._M_node == _M_rightmost())
   1a9e6:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1a9ed:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a9f4:	48 89 c7             	mov    %rax,%rdi
   1a9f7:	e8 32 0d 00 00       	call   1b72e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1a9fc:	48 8b 00             	mov    (%rax),%rax
   1a9ff:	48 39 c3             	cmp    %rax,%rbx
   1aa02:	0f 94 c0             	sete   %al
   1aa05:	84 c0                	test   %al,%al
   1aa07:	74 3a                	je     1aa43 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x35d>
	    return _Res(0, _M_rightmost());
   1aa09:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1aa10:	48 89 c7             	mov    %rax,%rdi
   1aa13:	e8 16 0d 00 00       	call   1b72e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1aa18:	48 89 c2             	mov    %rax,%rdx
   1aa1b:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
   1aa22:	00 
   1aa23:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
   1aa27:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   1aa2b:	48 89 ce             	mov    %rcx,%rsi
   1aa2e:	48 89 c7             	mov    %rax,%rdi
   1aa31:	e8 24 0d 00 00       	call   1b75a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1aa36:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1aa3a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1aa3e:	e9 eb 00 00 00       	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1aa43:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1aa4a:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
   1aa51:	48 89 c7             	mov    %rax,%rdi
   1aa54:	e8 25 0f 00 00       	call   1b97e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>
   1aa59:	48 8b 00             	mov    (%rax),%rax
   1aa5c:	48 89 c7             	mov    %rax,%rdi
   1aa5f:	e8 dc 0c 00 00       	call   1b740 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1aa64:	48 89 c2             	mov    %rax,%rdx
   1aa67:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1aa6e:	48 89 c6             	mov    %rax,%rsi
   1aa71:	48 89 df             	mov    %rbx,%rdi
   1aa74:	e8 73 ee ff ff       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1aa79:	84 c0                	test   %al,%al
   1aa7b:	74 6c                	je     1aae9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x403>
	      if (_S_right(__pos._M_node) == 0)
   1aa7d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1aa84:	48 89 c7             	mov    %rax,%rdi
   1aa87:	e8 f1 f9 ff ff       	call   1a47d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1aa8c:	48 85 c0             	test   %rax,%rax
   1aa8f:	0f 94 c0             	sete   %al
   1aa92:	84 c0                	test   %al,%al
   1aa94:	74 2c                	je     1aac2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x3dc>
		return _Res(0, __pos._M_node);
   1aa96:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   1aa9d:	00 
   1aa9e:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   1aaa5:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
   1aaa9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1aaad:	48 89 ce             	mov    %rcx,%rsi
   1aab0:	48 89 c7             	mov    %rax,%rdi
   1aab3:	e8 a2 0c 00 00       	call   1b75a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1aab8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1aabc:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1aac0:	eb 6c                	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__after._M_node, __after._M_node);
   1aac2:	48 8d 95 08 ff ff ff 	lea    -0xf8(%rbp),%rdx
   1aac9:	48 8d 8d 08 ff ff ff 	lea    -0xf8(%rbp),%rcx
   1aad0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1aad4:	48 89 ce             	mov    %rcx,%rsi
   1aad7:	48 89 c7             	mov    %rax,%rdi
   1aada:	e8 33 0e 00 00       	call   1b912 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
   1aadf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1aae3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1aae7:	eb 45                	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1aae9:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1aaf0:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1aaf7:	48 89 d6             	mov    %rdx,%rsi
   1aafa:	48 89 c7             	mov    %rax,%rdi
   1aafd:	e8 88 0c 00 00       	call   1b78a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1ab02:	eb 2a                	jmp    1ab2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	return _Res(__pos._M_node, 0);
   1ab04:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1ab0b:	00 
   1ab0c:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   1ab10:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   1ab17:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1ab1b:	48 89 ce             	mov    %rcx,%rsi
   1ab1e:	48 89 c7             	mov    %rax,%rdi
   1ab21:	e8 34 0c 00 00       	call   1b75a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1ab26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ab2a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   1ab2e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ab32:	c9                   	leave
   1ab33:	c3                   	ret

000000000001ab34 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>:
	_M_key() const
   1ab34:	55                   	push   %rbp
   1ab35:	48 89 e5             	mov    %rsp,%rbp
   1ab38:	48 83 ec 10          	sub    $0x10,%rsp
   1ab3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return _S_key(_M_node); }
   1ab40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ab44:	48 8b 40 08          	mov    0x8(%rax),%rax
   1ab48:	48 89 c7             	mov    %rax,%rdi
   1ab4b:	e8 56 0e 00 00       	call   1b9a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1ab50:	c9                   	leave
   1ab51:	c3                   	ret

000000000001ab52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
   1ab52:	55                   	push   %rbp
   1ab53:	48 89 e5             	mov    %rsp,%rbp
   1ab56:	48 83 ec 30          	sub    $0x30,%rsp
   1ab5a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ab5e:	48 89 d1             	mov    %rdx,%rcx
   1ab61:	48 89 f0             	mov    %rsi,%rax
   1ab64:	48 89 fa             	mov    %rdi,%rdx
   1ab67:	48 89 ca             	mov    %rcx,%rdx
   1ab6a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1ab6e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
   1ab72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ab76:	48 8b 00             	mov    (%rax),%rax
   1ab79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ab7d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
   1ab81:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1ab85:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   1ab89:	48 89 c7             	mov    %rax,%rdi
   1ab8c:	e8 41 0e 00 00       	call   1b9d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
   1ab91:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_node = nullptr;
   1ab95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ab99:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1aba0:	00 
	  return __it;
   1aba1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1aba5:	c9                   	leave
   1aba6:	c3                   	ret
   1aba7:	90                   	nop

000000000001aba8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1aba8:	55                   	push   %rbp
   1aba9:	48 89 e5             	mov    %rsp,%rbp
   1abac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1abb0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__x) { }
   1abb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1abb8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1abbc:	48 89 10             	mov    %rdx,(%rax)
   1abbf:	90                   	nop
   1abc0:	5d                   	pop    %rbp
   1abc1:	c3                   	ret

000000000001abc2 <_ZNSt22_Optional_payload_baseIjEC1IJjEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
   1abc2:	55                   	push   %rbp
   1abc3:	48 89 e5             	mov    %rsp,%rbp
   1abc6:	53                   	push   %rbx
   1abc7:	48 83 ec 28          	sub    $0x28,%rsp
   1abcb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1abcf:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
   1abd3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1abd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1abdb:	48 89 c7             	mov    %rax,%rdi
   1abde:	e8 51 ea ff ff       	call   19634 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   1abe3:	48 89 c6             	mov    %rax,%rsi
   1abe6:	48 89 df             	mov    %rbx,%rdi
   1abe9:	e8 a8 0e 00 00       	call   1ba96 <_ZNSt22_Optional_payload_baseIjE8_StorageIjLb1EEC1IJjEEESt10in_place_tDpOT_>
	  _M_engaged(true)
   1abee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1abf2:	c6 40 04 01          	movb   $0x1,0x4(%rax)
	{ }
   1abf6:	90                   	nop
   1abf7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1abfb:	c9                   	leave
   1abfc:	c3                   	ret

000000000001abfd <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1abfd:	55                   	push   %rbp
   1abfe:	48 89 e5             	mov    %rsp,%rbp
   1ac01:	48 83 ec 10          	sub    $0x10,%rsp
   1ac05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ac09:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1ac0d:	eb 19                	jmp    1ac28 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1ac0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac13:	48 89 c7             	mov    %rax,%rdi
   1ac16:	e8 d3 0e 00 00       	call   1baee <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1ac1b:	48 89 c7             	mov    %rax,%rdi
   1ac1e:	e8 d9 0e 00 00       	call   1bafc <_ZSt8_DestroyIN2vk4raii14PhysicalDeviceEEvPT_>
	  for (; __first != __last; ++__first)
   1ac23:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
   1ac28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac2c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ac30:	75 dd                	jne    1ac0f <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_+0x12>
	}
   1ac32:	90                   	nop
   1ac33:	90                   	nop
   1ac34:	c9                   	leave
   1ac35:	c3                   	ret

000000000001ac36 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1ac36:	55                   	push   %rbp
   1ac37:	48 89 e5             	mov    %rsp,%rbp
   1ac3a:	48 83 ec 10          	sub    $0x10,%rsp
   1ac3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ac42:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1ac46:	eb 19                	jmp    1ac61 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1ac48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac4c:	48 89 c7             	mov    %rax,%rdi
   1ac4f:	e8 f5 0e 00 00       	call   1bb49 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1ac54:	48 89 c7             	mov    %rax,%rdi
   1ac57:	e8 fb 0e 00 00       	call   1bb57 <_ZSt8_DestroyIP18VkPhysicalDevice_TEvPT_>
	  for (; __first != __last; ++__first)
   1ac5c:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   1ac61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac65:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ac69:	75 dd                	jne    1ac48 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_+0x12>
	}
   1ac6b:	90                   	nop
   1ac6c:	90                   	nop
   1ac6d:	c9                   	leave
   1ac6e:	c3                   	ret

000000000001ac6f <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1ac6f:	55                   	push   %rbp
   1ac70:	48 89 e5             	mov    %rsp,%rbp
   1ac73:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ac77:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ac7b:	90                   	nop
   1ac7c:	5d                   	pop    %rbp
   1ac7d:	c3                   	ret

000000000001ac7e <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1ac7e:	55                   	push   %rbp
   1ac7f:	48 89 e5             	mov    %rsp,%rbp
   1ac82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1ac86:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1ac8d:	ff ff 1f 
      }
   1ac90:	5d                   	pop    %rbp
   1ac91:	c3                   	ret

000000000001ac92 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1ac92:	55                   	push   %rbp
   1ac93:	48 89 e5             	mov    %rsp,%rbp
   1ac96:	48 83 ec 20          	sub    $0x20,%rsp
   1ac9a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1ac9e:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1aca5:	ff ff 0f 
   1aca8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1acac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1acb0:	48 89 c7             	mov    %rax,%rdi
   1acb3:	e8 c6 ff ff ff       	call   1ac7e <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>
   1acb8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1acbc:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1acc0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1acc4:	48 89 d6             	mov    %rdx,%rsi
   1acc7:	48 89 c7             	mov    %rax,%rdi
   1acca:	e8 51 be ff ff       	call   16b20 <_ZSt3minImERKT_S2_S2_>
   1accf:	48 8b 00             	mov    (%rax),%rax
      }
   1acd2:	c9                   	leave
   1acd3:	c3                   	ret

000000000001acd4 <_ZNKSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1acd4:	55                   	push   %rbp
   1acd5:	48 89 e5             	mov    %rsp,%rbp
   1acd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1acdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ace0:	5d                   	pop    %rbp
   1ace1:	c3                   	ret

000000000001ace2 <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1ace2:	55                   	push   %rbp
   1ace3:	48 89 e5             	mov    %rsp,%rbp
   1ace6:	48 83 ec 20          	sub    $0x20,%rsp
   1acea:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1acee:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1acf2:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1acf6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1acfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1acfe:	48 89 d6             	mov    %rdx,%rsi
   1ad01:	48 89 c7             	mov    %rax,%rdi
   1ad04:	e8 69 0e 00 00       	call   1bb72 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>
    }
   1ad09:	c9                   	leave
   1ad0a:	c3                   	ret

000000000001ad0b <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1ad0b:	55                   	push   %rbp
   1ad0c:	48 89 e5             	mov    %rsp,%rbp
   1ad0f:	48 83 ec 20          	sub    $0x20,%rsp
   1ad13:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ad17:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ad1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ad1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1ad23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ad27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1ad2b:	e8 6e b4 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1ad30:	84 c0                	test   %al,%al
   1ad32:	74 43                	je     1ad77 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x6c>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1ad34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ad38:	b9 00 00 00 00       	mov    $0x0,%ecx
   1ad3d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1ad44:	00 
   1ad45:	48 c1 e8 3d          	shr    $0x3d,%rax
   1ad49:	48 85 c0             	test   %rax,%rax
   1ad4c:	74 05                	je     1ad53 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x48>
   1ad4e:	b9 01 00 00 00       	mov    $0x1,%ecx
   1ad53:	48 89 d0             	mov    %rdx,%rax
   1ad56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1ad5a:	48 89 c8             	mov    %rcx,%rax
   1ad5d:	83 e0 01             	and    $0x1,%eax
   1ad60:	84 c0                	test   %al,%al
   1ad62:	74 05                	je     1ad69 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x5e>
	      std::__throw_bad_array_new_length();
   1ad64:	e8 17 a4 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1ad69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ad6d:	48 89 c7             	mov    %rax,%rdi
   1ad70:	e8 ab a4 fe ff       	call   5220 <_Znwm@plt>
   1ad75:	eb 19                	jmp    1ad90 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x85>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1ad77:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1ad7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ad7f:	ba 00 00 00 00       	mov    $0x0,%edx
   1ad84:	48 89 ce             	mov    %rcx,%rsi
   1ad87:	48 89 c7             	mov    %rax,%rdi
   1ad8a:	e8 25 17 00 00       	call   1c4b4 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>
   1ad8f:	90                   	nop
      { return __a.allocate(__n); }
   1ad90:	c9                   	leave
   1ad91:	c3                   	ret

000000000001ad92 <_ZSt12__relocate_aIPP18VkPhysicalDevice_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1ad92:	55                   	push   %rbp
   1ad93:	48 89 e5             	mov    %rsp,%rbp
   1ad96:	41 54                	push   %r12
   1ad98:	53                   	push   %rbx
   1ad99:	48 83 ec 20          	sub    $0x20,%rsp
   1ad9d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ada1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ada5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1ada9:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1adad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1adb1:	48 89 c7             	mov    %rax,%rdi
   1adb4:	e8 16 0e 00 00       	call   1bbcf <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>
   1adb9:	49 89 c4             	mov    %rax,%r12
   1adbc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1adc0:	48 89 c7             	mov    %rax,%rdi
   1adc3:	e8 07 0e 00 00       	call   1bbcf <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>
   1adc8:	48 89 c3             	mov    %rax,%rbx
   1adcb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1adcf:	48 89 c7             	mov    %rax,%rdi
   1add2:	e8 f8 0d 00 00       	call   1bbcf <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>
   1add7:	48 89 c7             	mov    %rax,%rdi
   1adda:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1adde:	48 89 c1             	mov    %rax,%rcx
   1ade1:	4c 89 e2             	mov    %r12,%rdx
   1ade4:	48 89 de             	mov    %rbx,%rsi
   1ade7:	e8 0f 0e 00 00       	call   1bbfb <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1adec:	48 83 c4 20          	add    $0x20,%rsp
   1adf0:	5b                   	pop    %rbx
   1adf1:	41 5c                	pop    %r12
   1adf3:	5d                   	pop    %rbp
   1adf4:	c3                   	ret

000000000001adf5 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>:
    __niter_base(_Iterator __it)
   1adf5:	55                   	push   %rbp
   1adf6:	48 89 e5             	mov    %rsp,%rbp
   1adf9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1adfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ae01:	5d                   	pop    %rbp
   1ae02:	c3                   	ret

000000000001ae03 <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1ae03:	55                   	push   %rbp
   1ae04:	48 89 e5             	mov    %rsp,%rbp
   1ae07:	53                   	push   %rbx
   1ae08:	48 83 ec 38          	sub    $0x38,%rsp
   1ae0c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1ae10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1ae14:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1ae18:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1ae1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ae20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1ae24:	eb 3a                	jmp    1ae60 <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_+0x5d>
	std::__relocate_object_a(std::__addressof(*__cur),
   1ae26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ae2a:	48 89 c7             	mov    %rax,%rdi
   1ae2d:	e8 bc 0c 00 00       	call   1baee <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1ae32:	48 89 c3             	mov    %rax,%rbx
   1ae35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ae39:	48 89 c7             	mov    %rax,%rdi
   1ae3c:	e8 ad 0c 00 00       	call   1baee <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1ae41:	48 89 c1             	mov    %rax,%rcx
   1ae44:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ae48:	48 89 c2             	mov    %rax,%rdx
   1ae4b:	48 89 de             	mov    %rbx,%rsi
   1ae4e:	48 89 cf             	mov    %rcx,%rdi
   1ae51:	e8 af 0e 00 00       	call   1bd05 <_ZSt19__relocate_object_aIN2vk4raii14PhysicalDeviceES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1ae56:	48 83 45 d8 10       	addq   $0x10,-0x28(%rbp)
   1ae5b:	48 83 45 e8 10       	addq   $0x10,-0x18(%rbp)
   1ae60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ae64:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1ae68:	75 bc                	jne    1ae26 <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_+0x23>
      return __cur;
   1ae6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1ae6e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ae72:	c9                   	leave
   1ae73:	c3                   	ret

000000000001ae74 <_ZSt10destroy_atIN2vk4raii14PhysicalDeviceEEvPT_>:
    destroy_at(_Tp* __location)
   1ae74:	55                   	push   %rbp
   1ae75:	48 89 e5             	mov    %rsp,%rbp
   1ae78:	48 83 ec 10          	sub    $0x10,%rsp
   1ae7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__location->~_Tp();
   1ae80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ae84:	48 89 c7             	mov    %rax,%rdi
   1ae87:	e8 e4 e5 fe ff       	call   9470 <_ZN2vk4raii14PhysicalDeviceD1Ev>
    }
   1ae8c:	90                   	nop
   1ae8d:	c9                   	leave
   1ae8e:	c3                   	ret
   1ae8f:	90                   	nop

000000000001ae90 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEEC1Ev>:
      _Tuple_impl()
   1ae90:	55                   	push   %rbp
   1ae91:	48 89 e5             	mov    %rsp,%rbp
   1ae94:	48 83 ec 10          	sub    $0x10,%rsp
   1ae98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
   1ae9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aea0:	48 89 c7             	mov    %rax,%rdi
   1aea3:	e8 b4 0e 00 00       	call   1bd5c <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EEC1Ev>
   1aea8:	90                   	nop
   1aea9:	c9                   	leave
   1aeaa:	c3                   	ret
   1aeab:	90                   	nop

000000000001aeac <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EEC1Ev>:
      constexpr _Head_base()
   1aeac:	55                   	push   %rbp
   1aead:	48 89 e5             	mov    %rsp,%rbp
   1aeb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   1aeb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aeb8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1aebf:	90                   	nop
   1aec0:	5d                   	pop    %rbp
   1aec1:	c3                   	ret

000000000001aec2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1aec2:	55                   	push   %rbp
   1aec3:	48 89 e5             	mov    %rsp,%rbp
   1aec6:	48 83 ec 10          	sub    $0x10,%rsp
   1aeca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1aece:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1aed2:	eb 19                	jmp    1aeed <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1aed4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aed8:	48 89 c7             	mov    %rax,%rdi
   1aedb:	e8 c1 0e 00 00       	call   1bda1 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1aee0:	48 89 c7             	mov    %rax,%rdi
   1aee3:	e8 c7 0e 00 00       	call   1bdaf <_ZSt8_DestroyIN2vk21QueueFamilyPropertiesEEvPT_>
	  for (; __first != __last; ++__first)
   1aee8:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
   1aeed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aef1:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1aef5:	75 dd                	jne    1aed4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_+0x12>
	}
   1aef7:	90                   	nop
   1aef8:	90                   	nop
   1aef9:	c9                   	leave
   1aefa:	c3                   	ret

000000000001aefb <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1aefb:	55                   	push   %rbp
   1aefc:	48 89 e5             	mov    %rsp,%rbp
   1aeff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1af03:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1af07:	90                   	nop
   1af08:	5d                   	pop    %rbp
   1af09:	c3                   	ret

000000000001af0a <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1af0a:	55                   	push   %rbp
   1af0b:	48 89 e5             	mov    %rsp,%rbp
   1af0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1af12:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
   1af19:	aa aa 0a 
      }
   1af1c:	5d                   	pop    %rbp
   1af1d:	c3                   	ret

000000000001af1e <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1af1e:	55                   	push   %rbp
   1af1f:	48 89 e5             	mov    %rsp,%rbp
   1af22:	48 83 ec 20          	sub    $0x20,%rsp
   1af26:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1af2a:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
   1af31:	55 55 05 
   1af34:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1af38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1af3c:	48 89 c7             	mov    %rax,%rdi
   1af3f:	e8 c6 ff ff ff       	call   1af0a <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8max_sizeERKS2_>
   1af44:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1af48:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1af4c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1af50:	48 89 d6             	mov    %rdx,%rsi
   1af53:	48 89 c7             	mov    %rax,%rdi
   1af56:	e8 c5 bb ff ff       	call   16b20 <_ZSt3minImERKT_S2_S2_>
   1af5b:	48 8b 00             	mov    (%rax),%rax
      }
   1af5e:	c9                   	leave
   1af5f:	c3                   	ret

000000000001af60 <_ZNKSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1af60:	55                   	push   %rbp
   1af61:	48 89 e5             	mov    %rsp,%rbp
   1af64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1af68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1af6c:	5d                   	pop    %rbp
   1af6d:	c3                   	ret

000000000001af6e <_ZSt25__uninitialized_default_nIPN2vk21QueueFamilyPropertiesEmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1af6e:	55                   	push   %rbp
   1af6f:	48 89 e5             	mov    %rsp,%rbp
   1af72:	48 83 ec 20          	sub    $0x20,%rsp
   1af76:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1af7a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1af7e:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1af82:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1af86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1af8a:	48 89 d6             	mov    %rdx,%rsi
   1af8d:	48 89 c7             	mov    %rax,%rdi
   1af90:	e8 35 0e 00 00       	call   1bdca <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_>
    }
   1af95:	c9                   	leave
   1af96:	c3                   	ret

000000000001af97 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1af97:	55                   	push   %rbp
   1af98:	48 89 e5             	mov    %rsp,%rbp
   1af9b:	48 83 ec 20          	sub    $0x20,%rsp
   1af9f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1afa3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1afa7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1afab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1afaf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1afb3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1afb7:	e8 e2 b1 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1afbc:	84 c0                	test   %al,%al
   1afbe:	74 39                	je     1aff9 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1afc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1afc4:	b9 00 00 00 00       	mov    $0x0,%ecx
   1afc9:	ba 18 00 00 00       	mov    $0x18,%edx
   1afce:	48 f7 e2             	mul    %rdx
   1afd1:	71 05                	jno    1afd8 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x41>
   1afd3:	b9 01 00 00 00       	mov    $0x1,%ecx
   1afd8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1afdc:	48 89 c8             	mov    %rcx,%rax
   1afdf:	83 e0 01             	and    $0x1,%eax
   1afe2:	84 c0                	test   %al,%al
   1afe4:	74 05                	je     1afeb <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x54>
	      std::__throw_bad_array_new_length();
   1afe6:	e8 95 a1 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1afeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1afef:	48 89 c7             	mov    %rax,%rdi
   1aff2:	e8 29 a2 fe ff       	call   5220 <_Znwm@plt>
   1aff7:	eb 19                	jmp    1b012 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1aff9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1affd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b001:	ba 00 00 00 00       	mov    $0x0,%edx
   1b006:	48 89 ce             	mov    %rcx,%rsi
   1b009:	48 89 c7             	mov    %rax,%rdi
   1b00c:	e8 af 16 00 00       	call   1c6c0 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv>
   1b011:	90                   	nop
      { return __a.allocate(__n); }
   1b012:	c9                   	leave
   1b013:	c3                   	ret

000000000001b014 <_ZSt12__relocate_aIPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1b014:	55                   	push   %rbp
   1b015:	48 89 e5             	mov    %rsp,%rbp
   1b018:	41 54                	push   %r12
   1b01a:	53                   	push   %rbx
   1b01b:	48 83 ec 20          	sub    $0x20,%rsp
   1b01f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b023:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b027:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1b02b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1b02f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b033:	48 89 c7             	mov    %rax,%rdi
   1b036:	e8 d4 0d 00 00       	call   1be0f <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>
   1b03b:	49 89 c4             	mov    %rax,%r12
   1b03e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b042:	48 89 c7             	mov    %rax,%rdi
   1b045:	e8 c5 0d 00 00       	call   1be0f <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>
   1b04a:	48 89 c3             	mov    %rax,%rbx
   1b04d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b051:	48 89 c7             	mov    %rax,%rdi
   1b054:	e8 b6 0d 00 00       	call   1be0f <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>
   1b059:	48 89 c7             	mov    %rax,%rdi
   1b05c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b060:	48 89 c1             	mov    %rax,%rcx
   1b063:	4c 89 e2             	mov    %r12,%rdx
   1b066:	48 89 de             	mov    %rbx,%rsi
   1b069:	e8 af 0d 00 00       	call   1be1d <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   1b06e:	48 83 c4 20          	add    $0x20,%rsp
   1b072:	5b                   	pop    %rbx
   1b073:	41 5c                	pop    %r12
   1b075:	5d                   	pop    %rbp
   1b076:	c3                   	ret

000000000001b077 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b077:	55                   	push   %rbp
   1b078:	48 89 e5             	mov    %rsp,%rbp
   1b07b:	48 83 ec 10          	sub    $0x10,%rsp
   1b07f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b083:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1b087:	eb 1c                	jmp    1b0a5 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_+0x2e>
	    std::_Destroy(std::__addressof(*__first));
   1b089:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b08d:	48 89 c7             	mov    %rax,%rdi
   1b090:	e8 33 0e 00 00       	call   1bec8 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1b095:	48 89 c7             	mov    %rax,%rdi
   1b098:	e8 39 0e 00 00       	call   1bed6 <_ZSt8_DestroyIN2vk19ExtensionPropertiesEEvPT_>
	  for (; __first != __last; ++__first)
   1b09d:	48 81 45 f8 04 01 00 	addq   $0x104,-0x8(%rbp)
   1b0a4:	00 
   1b0a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b0a9:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1b0ad:	75 da                	jne    1b089 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_+0x12>
	}
   1b0af:	90                   	nop
   1b0b0:	90                   	nop
   1b0b1:	c9                   	leave
   1b0b2:	c3                   	ret

000000000001b0b3 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1b0b3:	55                   	push   %rbp
   1b0b4:	48 89 e5             	mov    %rsp,%rbp
   1b0b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b0bb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b0bf:	90                   	nop
   1b0c0:	5d                   	pop    %rbp
   1b0c1:	c3                   	ret

000000000001b0c2 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1b0c2:	55                   	push   %rbp
   1b0c3:	48 89 e5             	mov    %rsp,%rbp
   1b0c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1b0ca:	48 b8 fc c0 0f fc c0 	movabs $0xfc0fc0fc0fc0fc,%rax
   1b0d1:	0f fc 00 
      }
   1b0d4:	5d                   	pop    %rbp
   1b0d5:	c3                   	ret

000000000001b0d6 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1b0d6:	55                   	push   %rbp
   1b0d7:	48 89 e5             	mov    %rsp,%rbp
   1b0da:	48 83 ec 20          	sub    $0x20,%rsp
   1b0de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1b0e2:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1b0e9:	07 7e 00 
   1b0ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1b0f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b0f4:	48 89 c7             	mov    %rax,%rdi
   1b0f7:	e8 c6 ff ff ff       	call   1b0c2 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8max_sizeERKS2_>
   1b0fc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1b100:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1b104:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1b108:	48 89 d6             	mov    %rdx,%rsi
   1b10b:	48 89 c7             	mov    %rax,%rdi
   1b10e:	e8 0d ba ff ff       	call   16b20 <_ZSt3minImERKT_S2_S2_>
   1b113:	48 8b 00             	mov    (%rax),%rax
      }
   1b116:	c9                   	leave
   1b117:	c3                   	ret

000000000001b118 <_ZNKSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1b118:	55                   	push   %rbp
   1b119:	48 89 e5             	mov    %rsp,%rbp
   1b11c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1b120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b124:	5d                   	pop    %rbp
   1b125:	c3                   	ret

000000000001b126 <_ZSt25__uninitialized_default_nIPN2vk19ExtensionPropertiesEmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1b126:	55                   	push   %rbp
   1b127:	48 89 e5             	mov    %rsp,%rbp
   1b12a:	48 83 ec 20          	sub    $0x20,%rsp
   1b12e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b132:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1b136:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1b13a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1b13e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b142:	48 89 d6             	mov    %rdx,%rsi
   1b145:	48 89 c7             	mov    %rax,%rdi
   1b148:	e8 a4 0d 00 00       	call   1bef1 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_>
    }
   1b14d:	c9                   	leave
   1b14e:	c3                   	ret

000000000001b14f <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1b14f:	55                   	push   %rbp
   1b150:	48 89 e5             	mov    %rsp,%rbp
   1b153:	48 83 ec 20          	sub    $0x20,%rsp
   1b157:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b15b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b15f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b163:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b167:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b16b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1b16f:	e8 2a b0 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b174:	84 c0                	test   %al,%al
   1b176:	74 39                	je     1b1b1 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1b178:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b17c:	b9 00 00 00 00       	mov    $0x0,%ecx
   1b181:	ba 04 01 00 00       	mov    $0x104,%edx
   1b186:	48 f7 e2             	mul    %rdx
   1b189:	71 05                	jno    1b190 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x41>
   1b18b:	b9 01 00 00 00       	mov    $0x1,%ecx
   1b190:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b194:	48 89 c8             	mov    %rcx,%rax
   1b197:	83 e0 01             	and    $0x1,%eax
   1b19a:	84 c0                	test   %al,%al
   1b19c:	74 05                	je     1b1a3 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x54>
	      std::__throw_bad_array_new_length();
   1b19e:	e8 dd 9f fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1b1a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b1a7:	48 89 c7             	mov    %rax,%rdi
   1b1aa:	e8 71 a0 fe ff       	call   5220 <_Znwm@plt>
   1b1af:	eb 19                	jmp    1b1ca <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1b1b1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b1b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b1b9:	ba 00 00 00 00       	mov    $0x0,%edx
   1b1be:	48 89 ce             	mov    %rcx,%rsi
   1b1c1:	48 89 c7             	mov    %rax,%rdi
   1b1c4:	e8 6b 16 00 00       	call   1c834 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv>
   1b1c9:	90                   	nop
      { return __a.allocate(__n); }
   1b1ca:	c9                   	leave
   1b1cb:	c3                   	ret

000000000001b1cc <_ZSt12__relocate_aIPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1b1cc:	55                   	push   %rbp
   1b1cd:	48 89 e5             	mov    %rsp,%rbp
   1b1d0:	41 54                	push   %r12
   1b1d2:	53                   	push   %rbx
   1b1d3:	48 83 ec 20          	sub    $0x20,%rsp
   1b1d7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b1db:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b1df:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1b1e3:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1b1e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b1eb:	48 89 c7             	mov    %rax,%rdi
   1b1ee:	e8 46 0d 00 00       	call   1bf39 <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>
   1b1f3:	49 89 c4             	mov    %rax,%r12
   1b1f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b1fa:	48 89 c7             	mov    %rax,%rdi
   1b1fd:	e8 37 0d 00 00       	call   1bf39 <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>
   1b202:	48 89 c3             	mov    %rax,%rbx
   1b205:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b209:	48 89 c7             	mov    %rax,%rdi
   1b20c:	e8 28 0d 00 00       	call   1bf39 <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>
   1b211:	48 89 c7             	mov    %rax,%rdi
   1b214:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b218:	48 89 c1             	mov    %rax,%rcx
   1b21b:	4c 89 e2             	mov    %r12,%rdx
   1b21e:	48 89 de             	mov    %rbx,%rsi
   1b221:	e8 21 0d 00 00       	call   1bf47 <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   1b226:	48 83 c4 20          	add    $0x20,%rsp
   1b22a:	5b                   	pop    %rbx
   1b22b:	41 5c                	pop    %r12
   1b22d:	5d                   	pop    %rbp
   1b22e:	c3                   	ret

000000000001b22f <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b22f:	55                   	push   %rbp
   1b230:	48 89 e5             	mov    %rsp,%rbp
   1b233:	48 83 ec 10          	sub    $0x10,%rsp
   1b237:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b23b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1b23f:	eb 1c                	jmp    1b25d <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_+0x2e>
	    std::_Destroy(std::__addressof(*__first));
   1b241:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b245:	48 89 c7             	mov    %rax,%rdi
   1b248:	e8 ab 0d 00 00       	call   1bff8 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1b24d:	48 89 c7             	mov    %rax,%rdi
   1b250:	e8 b1 0d 00 00       	call   1c006 <_ZSt8_DestroyIN2vk15LayerPropertiesEEvPT_>
	  for (; __first != __last; ++__first)
   1b255:	48 81 45 f8 08 02 00 	addq   $0x208,-0x8(%rbp)
   1b25c:	00 
   1b25d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b261:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1b265:	75 da                	jne    1b241 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_+0x12>
	}
   1b267:	90                   	nop
   1b268:	90                   	nop
   1b269:	c9                   	leave
   1b26a:	c3                   	ret

000000000001b26b <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1b26b:	55                   	push   %rbp
   1b26c:	48 89 e5             	mov    %rsp,%rbp
   1b26f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b273:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b277:	90                   	nop
   1b278:	5d                   	pop    %rbp
   1b279:	c3                   	ret

000000000001b27a <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1b27a:	55                   	push   %rbp
   1b27b:	48 89 e5             	mov    %rsp,%rbp
   1b27e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1b282:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1b289:	07 7e 00 
      }
   1b28c:	5d                   	pop    %rbp
   1b28d:	c3                   	ret

000000000001b28e <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1b28e:	55                   	push   %rbp
   1b28f:	48 89 e5             	mov    %rsp,%rbp
   1b292:	48 83 ec 20          	sub    $0x20,%rsp
   1b296:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1b29a:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
   1b2a1:	03 3f 00 
   1b2a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1b2a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b2ac:	48 89 c7             	mov    %rax,%rdi
   1b2af:	e8 c6 ff ff ff       	call   1b27a <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8max_sizeERKS2_>
   1b2b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1b2b8:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1b2bc:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1b2c0:	48 89 d6             	mov    %rdx,%rsi
   1b2c3:	48 89 c7             	mov    %rax,%rdi
   1b2c6:	e8 55 b8 ff ff       	call   16b20 <_ZSt3minImERKT_S2_S2_>
   1b2cb:	48 8b 00             	mov    (%rax),%rax
      }
   1b2ce:	c9                   	leave
   1b2cf:	c3                   	ret

000000000001b2d0 <_ZNKSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1b2d0:	55                   	push   %rbp
   1b2d1:	48 89 e5             	mov    %rsp,%rbp
   1b2d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1b2d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b2dc:	5d                   	pop    %rbp
   1b2dd:	c3                   	ret

000000000001b2de <_ZSt25__uninitialized_default_nIPN2vk15LayerPropertiesEmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1b2de:	55                   	push   %rbp
   1b2df:	48 89 e5             	mov    %rsp,%rbp
   1b2e2:	48 83 ec 20          	sub    $0x20,%rsp
   1b2e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b2ea:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1b2ee:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1b2f2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1b2f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b2fa:	48 89 d6             	mov    %rdx,%rsi
   1b2fd:	48 89 c7             	mov    %rax,%rdi
   1b300:	e8 1c 0d 00 00       	call   1c021 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_>
    }
   1b305:	c9                   	leave
   1b306:	c3                   	ret

000000000001b307 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1b307:	55                   	push   %rbp
   1b308:	48 89 e5             	mov    %rsp,%rbp
   1b30b:	48 83 ec 20          	sub    $0x20,%rsp
   1b30f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b313:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b317:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b31b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b31f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b323:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1b327:	e8 72 ae fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b32c:	84 c0                	test   %al,%al
   1b32e:	74 39                	je     1b369 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1b330:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b334:	b9 00 00 00 00       	mov    $0x0,%ecx
   1b339:	ba 08 02 00 00       	mov    $0x208,%edx
   1b33e:	48 f7 e2             	mul    %rdx
   1b341:	71 05                	jno    1b348 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x41>
   1b343:	b9 01 00 00 00       	mov    $0x1,%ecx
   1b348:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b34c:	48 89 c8             	mov    %rcx,%rax
   1b34f:	83 e0 01             	and    $0x1,%eax
   1b352:	84 c0                	test   %al,%al
   1b354:	74 05                	je     1b35b <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x54>
	      std::__throw_bad_array_new_length();
   1b356:	e8 25 9e fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1b35b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b35f:	48 89 c7             	mov    %rax,%rdi
   1b362:	e8 b9 9e fe ff       	call   5220 <_Znwm@plt>
   1b367:	eb 19                	jmp    1b382 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1b369:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b36d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b371:	ba 00 00 00 00       	mov    $0x0,%edx
   1b376:	48 89 ce             	mov    %rcx,%rsi
   1b379:	48 89 c7             	mov    %rax,%rdi
   1b37c:	e8 49 16 00 00       	call   1c9ca <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv>
   1b381:	90                   	nop
      { return __a.allocate(__n); }
   1b382:	c9                   	leave
   1b383:	c3                   	ret

000000000001b384 <_ZSt12__relocate_aIPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1b384:	55                   	push   %rbp
   1b385:	48 89 e5             	mov    %rsp,%rbp
   1b388:	41 54                	push   %r12
   1b38a:	53                   	push   %rbx
   1b38b:	48 83 ec 20          	sub    $0x20,%rsp
   1b38f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b393:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b397:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1b39b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1b39f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b3a3:	48 89 c7             	mov    %rax,%rdi
   1b3a6:	e8 be 0c 00 00       	call   1c069 <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>
   1b3ab:	49 89 c4             	mov    %rax,%r12
   1b3ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b3b2:	48 89 c7             	mov    %rax,%rdi
   1b3b5:	e8 af 0c 00 00       	call   1c069 <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>
   1b3ba:	48 89 c3             	mov    %rax,%rbx
   1b3bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b3c1:	48 89 c7             	mov    %rax,%rdi
   1b3c4:	e8 a0 0c 00 00       	call   1c069 <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>
   1b3c9:	48 89 c7             	mov    %rax,%rdi
   1b3cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b3d0:	48 89 c1             	mov    %rax,%rcx
   1b3d3:	4c 89 e2             	mov    %r12,%rdx
   1b3d6:	48 89 de             	mov    %rbx,%rsi
   1b3d9:	e8 99 0c 00 00       	call   1c077 <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   1b3de:	48 83 c4 20          	add    $0x20,%rsp
   1b3e2:	5b                   	pop    %rbx
   1b3e3:	41 5c                	pop    %r12
   1b3e5:	5d                   	pop    %rbp
   1b3e6:	c3                   	ret

000000000001b3e7 <_ZSt12__miter_baseIPKPKcET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
   1b3e7:	55                   	push   %rbp
   1b3e8:	48 89 e5             	mov    %rsp,%rbp
   1b3eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1b3ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b3f3:	5d                   	pop    %rbp
   1b3f4:	c3                   	ret

000000000001b3f5 <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   1b3f5:	55                   	push   %rbp
   1b3f6:	48 89 e5             	mov    %rsp,%rbp
   1b3f9:	41 54                	push   %r12
   1b3fb:	53                   	push   %rbx
   1b3fc:	48 83 ec 20          	sub    $0x20,%rsp
   1b400:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b404:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b408:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
   1b40c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b410:	48 89 c7             	mov    %rax,%rdi
   1b413:	e8 15 0d 00 00       	call   1c12d <_ZSt12__niter_baseIPPKcET_S3_>
   1b418:	49 89 c4             	mov    %rax,%r12
   1b41b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b41f:	48 89 c7             	mov    %rax,%rdi
   1b422:	e8 f8 0c 00 00       	call   1c11f <_ZSt12__niter_baseIPKPKcET_S4_>
   1b427:	48 89 c3             	mov    %rax,%rbx
   1b42a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b42e:	48 89 c7             	mov    %rax,%rdi
   1b431:	e8 e9 0c 00 00       	call   1c11f <_ZSt12__niter_baseIPKPKcET_S4_>
   1b436:	4c 89 e2             	mov    %r12,%rdx
   1b439:	48 89 de             	mov    %rbx,%rsi
   1b43c:	48 89 c7             	mov    %rax,%rdi
   1b43f:	e8 f7 0c 00 00       	call   1c13b <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   1b444:	48 89 c2             	mov    %rax,%rdx
   1b447:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1b44b:	48 89 d6             	mov    %rdx,%rsi
   1b44e:	48 89 c7             	mov    %rax,%rdi
   1b451:	e8 12 0d 00 00       	call   1c168 <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>
    }
   1b456:	48 83 c4 20          	add    $0x20,%rsp
   1b45a:	5b                   	pop    %rbx
   1b45b:	41 5c                	pop    %r12
   1b45d:	5d                   	pop    %rbp
   1b45e:	c3                   	ret

000000000001b45f <_ZSt10destroy_atIPKcEvPT_>:
    destroy_at(_Tp* __location)
   1b45f:	55                   	push   %rbp
   1b460:	48 89 e5             	mov    %rsp,%rbp
   1b463:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1b467:	90                   	nop
   1b468:	5d                   	pop    %rbp
   1b469:	c3                   	ret

000000000001b46a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1b46a:	55                   	push   %rbp
   1b46b:	48 89 e5             	mov    %rsp,%rbp
   1b46e:	53                   	push   %rbx
   1b46f:	48 83 ec 18          	sub    $0x18,%rsp
   1b473:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b477:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
   1b47b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b47f:	48 89 c7             	mov    %rax,%rdi
   1b482:	e8 f7 f0 ff ff       	call   1a57e <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1b487:	48 89 c3             	mov    %rax,%rbx
   1b48a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b48e:	48 89 c7             	mov    %rax,%rdi
   1b491:	e8 e4 0c 00 00       	call   1c17a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1b496:	48 89 de             	mov    %rbx,%rsi
   1b499:	48 89 c7             	mov    %rax,%rdi
   1b49c:	e8 e7 0c 00 00       	call   1c188 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>
      }
   1b4a1:	90                   	nop
   1b4a2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b4a6:	c9                   	leave
   1b4a7:	c3                   	ret

000000000001b4a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1b4a8:	55                   	push   %rbp
   1b4a9:	48 89 e5             	mov    %rsp,%rbp
   1b4ac:	48 83 ec 10          	sub    $0x10,%rsp
   1b4b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b4b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
   1b4b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b4bc:	48 89 c7             	mov    %rax,%rdi
   1b4bf:	e8 b6 0c 00 00       	call   1c17a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1b4c4:	48 89 c1             	mov    %rax,%rcx
   1b4c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b4cb:	ba 01 00 00 00       	mov    $0x1,%edx
   1b4d0:	48 89 c6             	mov    %rax,%rsi
   1b4d3:	48 89 cf             	mov    %rcx,%rdi
   1b4d6:	e8 cc 0c 00 00       	call   1c1a7 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>
   1b4db:	90                   	nop
   1b4dc:	c9                   	leave
   1b4dd:	c3                   	ret

000000000001b4de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
   1b4de:	55                   	push   %rbp
   1b4df:	48 89 e5             	mov    %rsp,%rbp
   1b4e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return &this->_M_impl._M_header; }
   1b4e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b4ea:	48 83 c0 08          	add    $0x8,%rax
   1b4ee:	5d                   	pop    %rbp
   1b4ef:	c3                   	ret

000000000001b4f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1b4f0:	55                   	push   %rbp
   1b4f1:	48 89 e5             	mov    %rsp,%rbp
   1b4f4:	53                   	push   %rbx
   1b4f5:	48 83 ec 38          	sub    $0x38,%rsp
   1b4f9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b4fd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1b501:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1b505:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      while (__x != 0)
   1b509:	eb 56                	jmp    1b561 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   1b50b:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   1b50f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b513:	48 89 c7             	mov    %rax,%rdi
   1b516:	e8 8b 04 00 00       	call   1b9a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1b51b:	48 89 c1             	mov    %rax,%rcx
   1b51e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1b522:	48 89 c2             	mov    %rax,%rdx
   1b525:	48 89 ce             	mov    %rcx,%rsi
   1b528:	48 89 df             	mov    %rbx,%rdi
   1b52b:	e8 bc e3 ff ff       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1b530:	83 f0 01             	xor    $0x1,%eax
   1b533:	84 c0                	test   %al,%al
   1b535:	74 1a                	je     1b551 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x61>
	  __y = __x, __x = _S_left(__x);
   1b537:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b53b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1b53f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b543:	48 89 c7             	mov    %rax,%rdi
   1b546:	e8 44 ef ff ff       	call   1a48f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   1b54b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1b54f:	eb 10                	jmp    1b561 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	  __x = _S_right(__x);
   1b551:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b555:	48 89 c7             	mov    %rax,%rdi
   1b558:	e8 20 ef ff ff       	call   1a47d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1b55d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      while (__x != 0)
   1b561:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   1b566:	75 a3                	jne    1b50b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x1b>
      return iterator(__y);
   1b568:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1b56c:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1b570:	48 89 d6             	mov    %rdx,%rsi
   1b573:	48 89 c7             	mov    %rax,%rdi
   1b576:	e8 2d f6 ff ff       	call   1aba8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1b57b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1b57f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b583:	c9                   	leave
   1b584:	c3                   	ret
   1b585:	90                   	nop

000000000001b586 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
   1b586:	55                   	push   %rbp
   1b587:	48 89 e5             	mov    %rsp,%rbp
   1b58a:	48 83 ec 10          	sub    $0x10,%rsp
   1b58e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
   1b592:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b596:	48 89 c7             	mov    %rax,%rdi
   1b599:	e8 68 0c 00 00       	call   1c206 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   1b59e:	c9                   	leave
   1b59f:	c3                   	ret

000000000001b5a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
      compare(const basic_string& __str) const
   1b5a0:	55                   	push   %rbp
   1b5a1:	48 89 e5             	mov    %rsp,%rbp
   1b5a4:	53                   	push   %rbx
   1b5a5:	48 83 ec 38          	sub    $0x38,%rsp
   1b5a9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1b5ad:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	const size_type __size = this->size();
   1b5b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b5b5:	48 89 c7             	mov    %rax,%rdi
   1b5b8:	e8 39 ad fe ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
   1b5bd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	const size_type __osize = __str.size();
   1b5c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1b5c5:	48 89 c7             	mov    %rax,%rdi
   1b5c8:	e8 29 ad fe ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
   1b5cd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	const size_type __len = std::min(__size, __osize);
   1b5d1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1b5d5:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1b5d9:	48 89 d6             	mov    %rdx,%rsi
   1b5dc:	48 89 c7             	mov    %rax,%rdi
   1b5df:	e8 3c b5 ff ff       	call   16b20 <_ZSt3minImERKT_S2_S2_>
   1b5e4:	48 8b 00             	mov    (%rax),%rax
   1b5e7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int __r = traits_type::compare(_M_data(), __str.data(), __len);
   1b5eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1b5ef:	48 89 c7             	mov    %rax,%rdi
   1b5f2:	e8 95 ba ff ff       	call   1708c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
   1b5f7:	48 89 c3             	mov    %rax,%rbx
   1b5fa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b5fe:	48 89 c7             	mov    %rax,%rdi
   1b601:	e8 de ee fe ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
   1b606:	48 89 c1             	mov    %rax,%rcx
   1b609:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b60d:	48 89 c2             	mov    %rax,%rdx
   1b610:	48 89 de             	mov    %rbx,%rsi
   1b613:	48 89 cf             	mov    %rcx,%rdi
   1b616:	e8 04 3b ff ff       	call   f11f <_ZNSt11char_traitsIcE7compareEPKcS2_m>
   1b61b:	89 45 ec             	mov    %eax,-0x14(%rbp)
	if (!__r)
   1b61e:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   1b622:	75 16                	jne    1b63a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x9a>
	  __r = _S_compare(__size, __osize);
   1b624:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1b628:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b62c:	48 89 d6             	mov    %rdx,%rsi
   1b62f:	48 89 c7             	mov    %rax,%rdi
   1b632:	e8 dd 0b 00 00       	call   1c214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm>
   1b637:	89 45 ec             	mov    %eax,-0x14(%rbp)
	return __r;
   1b63a:	8b 45 ec             	mov    -0x14(%rbp),%eax
      }
   1b63d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b641:	c9                   	leave
   1b642:	c3                   	ret
   1b643:	90                   	nop

000000000001b644 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>:
	_Tuple_impl(_UHead&& __head)
   1b644:	55                   	push   %rbp
   1b645:	48 89 e5             	mov    %rsp,%rbp
   1b648:	53                   	push   %rbx
   1b649:	48 83 ec 18          	sub    $0x18,%rsp
   1b64d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b651:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::forward<_UHead>(__head))
   1b655:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1b659:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b65d:	48 89 c7             	mov    %rax,%rdi
   1b660:	e8 63 ef ff ff       	call   1a5c8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1b665:	48 89 c6             	mov    %rax,%rsi
   1b668:	48 89 df             	mov    %rbx,%rdi
   1b66b:	e8 ec 0b 00 00       	call   1c25c <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>
	{ }
   1b670:	90                   	nop
   1b671:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b675:	c9                   	leave
   1b676:	c3                   	ret
   1b677:	90                   	nop

000000000001b678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
   1b678:	55                   	push   %rbp
   1b679:	48 89 e5             	mov    %rsp,%rbp
   1b67c:	41 54                	push   %r12
   1b67e:	53                   	push   %rbx
   1b67f:	48 83 ec 30          	sub    $0x30,%rsp
   1b683:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b687:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1b68b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1b68f:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	  _Link_type __tmp = _M_get_node();
   1b693:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b697:	48 89 c7             	mov    %rax,%rdi
   1b69a:	e8 e3 0b 00 00       	call   1c282 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>
   1b69f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   1b6a3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1b6a7:	48 89 c7             	mov    %rax,%rdi
   1b6aa:	e8 76 ef ff ff       	call   1a625 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1b6af:	49 89 c4             	mov    %rax,%r12
   1b6b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b6b6:	48 89 c7             	mov    %rax,%rdi
   1b6b9:	e8 59 ef ff ff       	call   1a617 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1b6be:	48 89 c3             	mov    %rax,%rbx
   1b6c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b6c5:	48 89 c7             	mov    %rax,%rdi
   1b6c8:	e8 3c ef ff ff       	call   1a609 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1b6cd:	48 89 c2             	mov    %rax,%rdx
   1b6d0:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1b6d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b6d8:	4d 89 e0             	mov    %r12,%r8
   1b6db:	48 89 d9             	mov    %rbx,%rcx
   1b6de:	48 89 c7             	mov    %rax,%rdi
   1b6e1:	e8 c4 0b 00 00       	call   1c2aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
   1b6e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1b6ea:	48 83 c4 30          	add    $0x30,%rsp
   1b6ee:	5b                   	pop    %rbx
   1b6ef:	41 5c                	pop    %r12
   1b6f1:	5d                   	pop    %rbp
   1b6f2:	c3                   	ret
   1b6f3:	90                   	nop

000000000001b6f4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
   1b6f4:	55                   	push   %rbp
   1b6f5:	48 89 e5             	mov    %rsp,%rbp
   1b6f8:	48 83 ec 20          	sub    $0x20,%rsp
   1b6fc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
   1b700:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b704:	48 8b 10             	mov    (%rax),%rdx
   1b707:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1b70b:	48 89 d6             	mov    %rdx,%rsi
   1b70e:	48 89 c7             	mov    %rax,%rdi
   1b711:	e8 92 f4 ff ff       	call   1aba8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1b716:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b71a:	c9                   	leave
   1b71b:	c3                   	ret

000000000001b71c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1b71c:	55                   	push   %rbp
   1b71d:	48 89 e5             	mov    %rsp,%rbp
   1b720:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_node_count; }
   1b724:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b728:	48 8b 40 28          	mov    0x28(%rax),%rax
   1b72c:	5d                   	pop    %rbp
   1b72d:	c3                   	ret

000000000001b72e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
   1b72e:	55                   	push   %rbp
   1b72f:	48 89 e5             	mov    %rsp,%rbp
   1b732:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_right; }
   1b736:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b73a:	48 83 c0 20          	add    $0x20,%rax
   1b73e:	5d                   	pop    %rbp
   1b73f:	c3                   	ret

000000000001b740 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
   1b740:	55                   	push   %rbp
   1b741:	48 89 e5             	mov    %rsp,%rbp
   1b744:	48 83 ec 10          	sub    $0x10,%rsp
   1b748:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
   1b74c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b750:	48 89 c7             	mov    %rax,%rdi
   1b753:	e8 4e 02 00 00       	call   1b9a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1b758:	c9                   	leave
   1b759:	c3                   	ret

000000000001b75a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>:

    public:

      /// Constructor accepting lvalues of `first_type` and `second_type`
      constexpr explicit(!_S_convertible<const _T1&, const _T2&>())
      pair(const _T1& __x, const _T2& __y)
   1b75a:	55                   	push   %rbp
   1b75b:	48 89 e5             	mov    %rsp,%rbp
   1b75e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b762:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b766:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      noexcept(_S_nothrow_constructible<const _T1&, const _T2&>())
      requires (_S_constructible<const _T1&, const _T2&>())
      : first(__x), second(__y)
   1b76a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b76e:	48 8b 10             	mov    (%rax),%rdx
   1b771:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b775:	48 89 10             	mov    %rdx,(%rax)
   1b778:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b77c:	48 8b 10             	mov    (%rax),%rdx
   1b77f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b783:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
   1b787:	90                   	nop
   1b788:	5d                   	pop    %rbp
   1b789:	c3                   	ret

000000000001b78a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1b78a:	55                   	push   %rbp
   1b78b:	48 89 e5             	mov    %rsp,%rbp
   1b78e:	53                   	push   %rbx
   1b78f:	48 83 ec 78          	sub    $0x78,%rsp
   1b793:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   1b797:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
      _Link_type __x = _M_begin();
   1b79b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1b79f:	48 89 c7             	mov    %rax,%rdi
   1b7a2:	e8 31 e0 ff ff       	call   197d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   1b7a7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      _Base_ptr __y = _M_end();
   1b7ab:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1b7af:	48 89 c7             	mov    %rax,%rdi
   1b7b2:	e8 27 fd ff ff       	call   1b4de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1b7b7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      bool __comp = true;
   1b7bb:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
      while (__x != 0)
   1b7bf:	eb 51                	jmp    1b812 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x88>
	  __y = __x;
   1b7c1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1b7c5:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   1b7c9:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   1b7cd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1b7d1:	48 89 c7             	mov    %rax,%rdi
   1b7d4:	e8 cd 01 00 00       	call   1b9a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1b7d9:	48 89 c2             	mov    %rax,%rdx
   1b7dc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1b7e0:	48 89 c6             	mov    %rax,%rsi
   1b7e3:	48 89 df             	mov    %rbx,%rdi
   1b7e6:	e8 01 e1 ff ff       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1b7eb:	88 45 ef             	mov    %al,-0x11(%rbp)
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1b7ee:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1b7f2:	74 0e                	je     1b802 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x78>
   1b7f4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1b7f8:	48 89 c7             	mov    %rax,%rdi
   1b7fb:	e8 8f ec ff ff       	call   1a48f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   1b800:	eb 0c                	jmp    1b80e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x84>
   1b802:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1b806:	48 89 c7             	mov    %rax,%rdi
   1b809:	e8 6f ec ff ff       	call   1a47d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1b80e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      while (__x != 0)
   1b812:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1b816:	48 85 c0             	test   %rax,%rax
   1b819:	75 a6                	jne    1b7c1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x37>
      iterator __j = iterator(__y);
   1b81b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   1b81f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1b823:	48 89 d6             	mov    %rdx,%rsi
   1b826:	48 89 c7             	mov    %rax,%rdi
   1b829:	e8 7a f3 ff ff       	call   1aba8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
   1b82e:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1b832:	74 54                	je     1b888 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xfe>
	  if (__j == begin())
   1b834:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1b838:	48 89 c7             	mov    %rax,%rdi
   1b83b:	e8 3c 0b 00 00       	call   1c37c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>
   1b840:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1b844:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
   1b848:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1b84c:	48 89 d6             	mov    %rdx,%rsi
   1b84f:	48 89 c7             	mov    %rax,%rdi
   1b852:	e8 13 e0 ff ff       	call   1986a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
   1b857:	84 c0                	test   %al,%al
   1b859:	74 21                	je     1b87c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf2>
	    return _Res(__x, __y);
   1b85b:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   1b85f:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   1b863:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1b867:	48 89 ce             	mov    %rcx,%rsi
   1b86a:	48 89 c7             	mov    %rax,%rdi
   1b86d:	e8 34 0b 00 00       	call   1c3a6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_EEOT_OT0_>
   1b872:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1b876:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   1b87a:	eb 7d                	jmp    1b8f9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
	    --__j;
   1b87c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1b880:	48 89 c7             	mov    %rax,%rdi
   1b883:	e8 ce 00 00 00       	call   1b956 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1b888:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   1b88c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1b890:	48 89 c7             	mov    %rax,%rdi
   1b893:	e8 a8 fe ff ff       	call   1b740 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1b898:	48 89 c1             	mov    %rax,%rcx
   1b89b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1b89f:	48 89 c2             	mov    %rax,%rdx
   1b8a2:	48 89 ce             	mov    %rcx,%rsi
   1b8a5:	48 89 df             	mov    %rbx,%rdi
   1b8a8:	e8 3f e0 ff ff       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1b8ad:	84 c0                	test   %al,%al
   1b8af:	74 21                	je     1b8d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x148>
	return _Res(__x, __y);
   1b8b1:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   1b8b5:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   1b8b9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1b8bd:	48 89 ce             	mov    %rcx,%rsi
   1b8c0:	48 89 c7             	mov    %rax,%rdi
   1b8c3:	e8 de 0a 00 00       	call   1c3a6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_EEOT_OT0_>
   1b8c8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1b8cc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1b8d0:	eb 27                	jmp    1b8f9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
      return _Res(__j._M_node, 0);
   1b8d2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1b8d9:	00 
   1b8da:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   1b8de:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
   1b8e2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1b8e6:	48 89 ce             	mov    %rcx,%rsi
   1b8e9:	48 89 c7             	mov    %rax,%rdi
   1b8ec:	e8 69 fe ff ff       	call   1b75a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1b8f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b8f5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   1b8f9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b8fd:	c9                   	leave
   1b8fe:	c3                   	ret
   1b8ff:	90                   	nop

000000000001b900 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
   1b900:	55                   	push   %rbp
   1b901:	48 89 e5             	mov    %rsp,%rbp
   1b904:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_left; }
   1b908:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b90c:	48 83 c0 18          	add    $0x18,%rax
   1b910:	5d                   	pop    %rbp
   1b911:	c3                   	ret

000000000001b912 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>:

      /// Constructor accepting two values of arbitrary types
      template<typename _U1, typename _U2>
	requires (_S_constructible<_U1, _U2>())
	constexpr explicit(!_S_convertible<_U1, _U2>())
	pair(_U1&& __x, _U2&& __y)
   1b912:	55                   	push   %rbp
   1b913:	48 89 e5             	mov    %rsp,%rbp
   1b916:	48 83 ec 20          	sub    $0x20,%rsp
   1b91a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b91e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b922:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	noexcept(_S_nothrow_constructible<_U1, _U2>())
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
   1b926:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b92a:	48 89 c7             	mov    %rax,%rdi
   1b92d:	e8 b8 0a 00 00       	call   1c3ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1b932:	48 8b 10             	mov    (%rax),%rdx
   1b935:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b939:	48 89 10             	mov    %rdx,(%rax)
   1b93c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b940:	48 89 c7             	mov    %rax,%rdi
   1b943:	e8 a2 0a 00 00       	call   1c3ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1b948:	48 8b 10             	mov    (%rax),%rdx
   1b94b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b94f:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
   1b953:	90                   	nop
   1b954:	c9                   	leave
   1b955:	c3                   	ret

000000000001b956 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
   1b956:	55                   	push   %rbp
   1b957:	48 89 e5             	mov    %rsp,%rbp
   1b95a:	48 83 ec 10          	sub    $0x10,%rsp
   1b95e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_decrement(_M_node);
   1b962:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b966:	48 8b 00             	mov    (%rax),%rax
   1b969:	48 89 c7             	mov    %rax,%rdi
   1b96c:	e8 df 98 fe ff       	call   5250 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>
   1b971:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1b975:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   1b978:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1b97c:	c9                   	leave
   1b97d:	c3                   	ret

000000000001b97e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1b97e:	55                   	push   %rbp
   1b97f:	48 89 e5             	mov    %rsp,%rbp
   1b982:	48 83 ec 10          	sub    $0x10,%rsp
   1b986:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_increment(_M_node);
   1b98a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b98e:	48 8b 00             	mov    (%rax),%rax
   1b991:	48 89 c7             	mov    %rax,%rdi
   1b994:	e8 87 97 fe ff       	call   5120 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>
   1b999:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1b99d:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   1b9a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1b9a4:	c9                   	leave
   1b9a5:	c3                   	ret

000000000001b9a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
   1b9a6:	55                   	push   %rbp
   1b9a7:	48 89 e5             	mov    %rsp,%rbp
   1b9aa:	48 83 ec 20          	sub    $0x20,%rsp
   1b9ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return _KeyOfValue()(*__x->_M_valptr());
   1b9b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b9b6:	48 89 c7             	mov    %rax,%rdi
   1b9b9:	e8 3a 0a 00 00       	call   1c3f8 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1b9be:	48 89 c2             	mov    %rax,%rdx
   1b9c1:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   1b9c5:	48 89 d6             	mov    %rdx,%rsi
   1b9c8:	48 89 c7             	mov    %rax,%rdi
   1b9cb:	e8 46 0a 00 00       	call   1c416 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>
      }
   1b9d0:	c9                   	leave
   1b9d1:	c3                   	ret

000000000001b9d2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1b9d2:	55                   	push   %rbp
   1b9d3:	48 89 e5             	mov    %rsp,%rbp
   1b9d6:	41 54                	push   %r12
   1b9d8:	53                   	push   %rbx
   1b9d9:	48 83 ec 30          	sub    $0x30,%rsp
   1b9dd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b9e1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1b9e5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1b9e9:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
			    || _M_impl._M_key_compare(_S_key(__z),
   1b9ed:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   1b9f2:	75 43                	jne    1ba37 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
      bool __insert_left = (__x != 0 || __p == _M_end()
   1b9f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b9f8:	48 89 c7             	mov    %rax,%rdi
   1b9fb:	e8 de fa ff ff       	call   1b4de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1ba00:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
   1ba04:	74 31                	je     1ba37 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
			    || _M_impl._M_key_compare(_S_key(__z),
   1ba06:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   1ba0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ba0e:	48 89 c7             	mov    %rax,%rdi
   1ba11:	e8 2a fd ff ff       	call   1b740 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1ba16:	49 89 c4             	mov    %rax,%r12
   1ba19:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ba1d:	48 89 c7             	mov    %rax,%rdi
   1ba20:	e8 81 ff ff ff       	call   1b9a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1ba25:	4c 89 e2             	mov    %r12,%rdx
   1ba28:	48 89 c6             	mov    %rax,%rsi
   1ba2b:	48 89 df             	mov    %rbx,%rdi
   1ba2e:	e8 b9 de ff ff       	call   198ec <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1ba33:	84 c0                	test   %al,%al
   1ba35:	74 07                	je     1ba3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x6c>
   1ba37:	b8 01 00 00 00       	mov    $0x1,%eax
   1ba3c:	eb 05                	jmp    1ba43 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x71>
   1ba3e:	b8 00 00 00 00       	mov    $0x0,%eax
      bool __insert_left = (__x != 0 || __p == _M_end()
   1ba43:	88 45 ef             	mov    %al,-0x11(%rbp)
				    this->_M_impl._M_header);
   1ba46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ba4a:	48 8d 48 08          	lea    0x8(%rax),%rcx
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1ba4e:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
   1ba52:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ba56:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1ba5a:	89 c7                	mov    %eax,%edi
   1ba5c:	e8 df 95 fe ff       	call   5040 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>
      ++_M_impl._M_node_count;
   1ba61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ba65:	48 8b 40 28          	mov    0x28(%rax),%rax
   1ba69:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1ba6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ba71:	48 89 50 28          	mov    %rdx,0x28(%rax)
      return iterator(__z);
   1ba75:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1ba79:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1ba7d:	48 89 d6             	mov    %rdx,%rsi
   1ba80:	48 89 c7             	mov    %rax,%rdi
   1ba83:	e8 20 f1 ff ff       	call   1aba8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1ba88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
   1ba8c:	48 83 c4 30          	add    $0x30,%rsp
   1ba90:	5b                   	pop    %rbx
   1ba91:	41 5c                	pop    %r12
   1ba93:	5d                   	pop    %rbp
   1ba94:	c3                   	ret
   1ba95:	90                   	nop

000000000001ba96 <_ZNSt22_Optional_payload_baseIjE8_StorageIjLb1EEC1IJjEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
   1ba96:	55                   	push   %rbp
   1ba97:	48 89 e5             	mov    %rsp,%rbp
   1ba9a:	48 83 ec 10          	sub    $0x10,%rsp
   1ba9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1baa2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    : _M_value(std::forward<_Args>(__args)...)
   1baa6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1baaa:	48 89 c7             	mov    %rax,%rdi
   1baad:	e8 82 db ff ff       	call   19634 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   1bab2:	8b 10                	mov    (%rax),%edx
   1bab4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bab8:	89 10                	mov    %edx,(%rax)
	    { }
   1baba:	90                   	nop
   1babb:	c9                   	leave
   1babc:	c3                   	ret
   1babd:	90                   	nop

000000000001babe <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE10deallocateEPS2_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1babe:	55                   	push   %rbp
   1babf:	48 89 e5             	mov    %rsp,%rbp
   1bac2:	48 83 ec 20          	sub    $0x20,%rsp
   1bac6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1baca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bace:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bad2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bad6:	48 c1 e0 04          	shl    $0x4,%rax
   1bada:	48 89 c2             	mov    %rax,%rdx
   1badd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bae1:	48 89 d6             	mov    %rdx,%rsi
   1bae4:	48 89 c7             	mov    %rax,%rdi
   1bae7:	e8 44 97 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1baec:	c9                   	leave
   1baed:	c3                   	ret

000000000001baee <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1baee:	55                   	push   %rbp
   1baef:	48 89 e5             	mov    %rsp,%rbp
   1baf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1baf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bafa:	5d                   	pop    %rbp
   1bafb:	c3                   	ret

000000000001bafc <_ZSt8_DestroyIN2vk4raii14PhysicalDeviceEEvPT_>:
    _Destroy(_Tp* __pointer)
   1bafc:	55                   	push   %rbp
   1bafd:	48 89 e5             	mov    %rsp,%rbp
   1bb00:	48 83 ec 10          	sub    $0x10,%rsp
   1bb04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1bb08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bb0c:	48 89 c7             	mov    %rax,%rdi
   1bb0f:	e8 60 f3 ff ff       	call   1ae74 <_ZSt10destroy_atIN2vk4raii14PhysicalDeviceEEvPT_>
    }
   1bb14:	90                   	nop
   1bb15:	c9                   	leave
   1bb16:	c3                   	ret
   1bb17:	90                   	nop

000000000001bb18 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1bb18:	55                   	push   %rbp
   1bb19:	48 89 e5             	mov    %rsp,%rbp
   1bb1c:	48 83 ec 20          	sub    $0x20,%rsp
   1bb20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bb24:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bb28:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bb2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bb30:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1bb37:	00 
   1bb38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bb3c:	48 89 d6             	mov    %rdx,%rsi
   1bb3f:	48 89 c7             	mov    %rax,%rdi
   1bb42:	e8 e9 96 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1bb47:	c9                   	leave
   1bb48:	c3                   	ret

000000000001bb49 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1bb49:	55                   	push   %rbp
   1bb4a:	48 89 e5             	mov    %rsp,%rbp
   1bb4d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1bb51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bb55:	5d                   	pop    %rbp
   1bb56:	c3                   	ret

000000000001bb57 <_ZSt8_DestroyIP18VkPhysicalDevice_TEvPT_>:
    _Destroy(_Tp* __pointer)
   1bb57:	55                   	push   %rbp
   1bb58:	48 89 e5             	mov    %rsp,%rbp
   1bb5b:	48 83 ec 10          	sub    $0x10,%rsp
   1bb5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1bb63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bb67:	48 89 c7             	mov    %rax,%rdi
   1bb6a:	e8 b9 08 00 00       	call   1c428 <_ZSt10destroy_atIP18VkPhysicalDevice_TEvPT_>
    }
   1bb6f:	90                   	nop
   1bb70:	c9                   	leave
   1bb71:	c3                   	ret

000000000001bb72 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1bb72:	55                   	push   %rbp
   1bb73:	48 89 e5             	mov    %rsp,%rbp
   1bb76:	48 83 ec 20          	sub    $0x20,%rsp
   1bb7a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1bb7e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1bb82:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1bb87:	74 40                	je     1bbc9 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1bb89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bb8d:	48 89 c7             	mov    %rax,%rdi
   1bb90:	e8 b4 ff ff ff       	call   1bb49 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1bb95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1bb99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bb9d:	48 89 c7             	mov    %rax,%rdi
   1bba0:	e8 8e 08 00 00       	call   1c433 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>
	      ++__first;
   1bba5:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1bbaa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bbae:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1bbb2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1bbb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bbba:	48 89 ce             	mov    %rcx,%rsi
   1bbbd:	48 89 c7             	mov    %rax,%rdi
   1bbc0:	e8 ab 08 00 00       	call   1c470 <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>
   1bbc5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1bbc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1bbcd:	c9                   	leave
   1bbce:	c3                   	ret

000000000001bbcf <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>:
    __niter_base(_Iterator __it)
   1bbcf:	55                   	push   %rbp
   1bbd0:	48 89 e5             	mov    %rsp,%rbp
   1bbd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1bbd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bbdb:	5d                   	pop    %rbp
   1bbdc:	c3                   	ret
   1bbdd:	90                   	nop

000000000001bbde <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1bbde:	55                   	push   %rbp
   1bbdf:	48 89 e5             	mov    %rsp,%rbp
   1bbe2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bbe6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1bbea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bbee:	48 8b 10             	mov    (%rax),%rdx
   1bbf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bbf5:	48 89 10             	mov    %rdx,(%rax)
   1bbf8:	90                   	nop
   1bbf9:	5d                   	pop    %rbp
   1bbfa:	c3                   	ret

000000000001bbfb <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1bbfb:	55                   	push   %rbp
   1bbfc:	48 89 e5             	mov    %rsp,%rbp
   1bbff:	48 83 ec 30          	sub    $0x30,%rsp
   1bc03:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1bc07:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1bc0b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1bc0f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1bc13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bc17:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1bc1b:	48 c1 f8 03          	sar    $0x3,%rax
   1bc1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1bc23:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1bc28:	7e 68                	jle    1bc92 <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x97>
	  if (std::is_constant_evaluated())
   1bc2a:	e8 7a a5 fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   1bc2f:	84 c0                	test   %al,%al
   1bc31:	74 40                	je     1bc73 <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x78>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
   1bc33:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   1bc37:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1bc3b:	48 89 d6             	mov    %rdx,%rsi
   1bc3e:	48 89 c7             	mov    %rax,%rdi
   1bc41:	e8 98 ff ff ff       	call   1bbde <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEC1ERKS3_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
   1bc46:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1bc4a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bc4e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1bc52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bc56:	48 89 c7             	mov    %rax,%rdi
   1bc59:	e8 b7 08 00 00       	call   1c515 <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>
   1bc5e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      return __out.base();
   1bc62:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1bc66:	48 89 c7             	mov    %rax,%rdi
   1bc69:	e8 28 09 00 00       	call   1c596 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvE4baseEv>
   1bc6e:	48 8b 00             	mov    (%rax),%rax
   1bc71:	eb 2e                	jmp    1bca1 <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0xa6>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1bc73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bc77:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1bc7e:	00 
   1bc7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bc83:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1bc87:	48 89 ce             	mov    %rcx,%rsi
   1bc8a:	48 89 c7             	mov    %rax,%rdi
   1bc8d:	e8 ce 96 fe ff       	call   5360 <memmove@plt>
      return __result + __count;
   1bc92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bc96:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1bc9a:	48 c1 e2 03          	shl    $0x3,%rdx
   1bc9e:	48 01 d0             	add    %rdx,%rax
    }
   1bca1:	c9                   	leave
   1bca2:	c3                   	ret
   1bca3:	90                   	nop

000000000001bca4 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1bca4:	55                   	push   %rbp
   1bca5:	48 89 e5             	mov    %rsp,%rbp
   1bca8:	48 83 ec 20          	sub    $0x20,%rsp
   1bcac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bcb0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bcb4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1bcb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bcbc:	48 89 c7             	mov    %rax,%rdi
   1bcbf:	e8 e0 08 00 00       	call   1c5a4 <_ZNKSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE11_M_max_sizeEv>
   1bcc4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1bcc8:	0f 92 c0             	setb   %al
   1bccb:	0f b6 c0             	movzbl %al,%eax
   1bcce:	48 85 c0             	test   %rax,%rax
   1bcd1:	0f 95 c0             	setne  %al
   1bcd4:	84 c0                	test   %al,%al
   1bcd6:	74 1a                	je     1bcf2 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1bcd8:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1bcdf:	ff ff 0f 
   1bce2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1bce6:	73 05                	jae    1bced <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1bce8:	e8 93 94 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1bced:	e8 8e 93 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1bcf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bcf6:	48 c1 e0 04          	shl    $0x4,%rax
   1bcfa:	48 89 c7             	mov    %rax,%rdi
   1bcfd:	e8 1e 95 fe ff       	call   5220 <_Znwm@plt>
   1bd02:	90                   	nop
      }
   1bd03:	c9                   	leave
   1bd04:	c3                   	ret

000000000001bd05 <_ZSt19__relocate_object_aIN2vk4raii14PhysicalDeviceES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1bd05:	55                   	push   %rbp
   1bd06:	48 89 e5             	mov    %rsp,%rbp
   1bd09:	48 83 ec 20          	sub    $0x20,%rsp
   1bd0d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bd11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bd15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1bd19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bd1d:	48 89 c7             	mov    %rax,%rdi
   1bd20:	e8 93 08 00 00       	call   1c5b8 <_ZSt4moveIRN2vk4raii14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS5_>
   1bd25:	48 89 c2             	mov    %rax,%rdx
   1bd28:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1bd2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bd30:	48 89 ce             	mov    %rcx,%rsi
   1bd33:	48 89 c7             	mov    %rax,%rdi
   1bd36:	e8 8b 08 00 00       	call   1c5c6 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1bd3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bd3f:	48 89 c7             	mov    %rax,%rdi
   1bd42:	e8 a7 fd ff ff       	call   1baee <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1bd47:	48 89 c2             	mov    %rax,%rdx
   1bd4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bd4e:	48 89 d6             	mov    %rdx,%rsi
   1bd51:	48 89 c7             	mov    %rax,%rdi
   1bd54:	e8 d6 e1 ff ff       	call   19f2f <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE7destroyIS2_EEvRS3_PT_>
    }
   1bd59:	90                   	nop
   1bd5a:	c9                   	leave
   1bd5b:	c3                   	ret

000000000001bd5c <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EEC1Ev>:
      constexpr _Head_base()
   1bd5c:	55                   	push   %rbp
   1bd5d:	48 89 e5             	mov    %rsp,%rbp
   1bd60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   1bd64:	90                   	nop
   1bd65:	5d                   	pop    %rbp
   1bd66:	c3                   	ret
   1bd67:	90                   	nop

000000000001bd68 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1bd68:	55                   	push   %rbp
   1bd69:	48 89 e5             	mov    %rsp,%rbp
   1bd6c:	48 83 ec 20          	sub    $0x20,%rsp
   1bd70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bd74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bd78:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bd7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bd80:	48 89 d0             	mov    %rdx,%rax
   1bd83:	48 01 c0             	add    %rax,%rax
   1bd86:	48 01 d0             	add    %rdx,%rax
   1bd89:	48 c1 e0 03          	shl    $0x3,%rax
   1bd8d:	48 89 c2             	mov    %rax,%rdx
   1bd90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bd94:	48 89 d6             	mov    %rdx,%rsi
   1bd97:	48 89 c7             	mov    %rax,%rdi
   1bd9a:	e8 91 94 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1bd9f:	c9                   	leave
   1bda0:	c3                   	ret

000000000001bda1 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1bda1:	55                   	push   %rbp
   1bda2:	48 89 e5             	mov    %rsp,%rbp
   1bda5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1bda9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bdad:	5d                   	pop    %rbp
   1bdae:	c3                   	ret

000000000001bdaf <_ZSt8_DestroyIN2vk21QueueFamilyPropertiesEEvPT_>:
    _Destroy(_Tp* __pointer)
   1bdaf:	55                   	push   %rbp
   1bdb0:	48 89 e5             	mov    %rsp,%rbp
   1bdb3:	48 83 ec 10          	sub    $0x10,%rsp
   1bdb7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1bdbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bdbf:	48 89 c7             	mov    %rax,%rdi
   1bdc2:	e8 34 08 00 00       	call   1c5fb <_ZSt10destroy_atIN2vk21QueueFamilyPropertiesEEvPT_>
    }
   1bdc7:	90                   	nop
   1bdc8:	c9                   	leave
   1bdc9:	c3                   	ret

000000000001bdca <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1bdca:	55                   	push   %rbp
   1bdcb:	48 89 e5             	mov    %rsp,%rbp
   1bdce:	48 83 ec 20          	sub    $0x20,%rsp
   1bdd2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1bdd6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   1bdda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bdde:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   1bde2:	eb 1e                	jmp    1be02 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_+0x38>
		std::_Construct(std::__addressof(*__cur));
   1bde4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bde8:	48 89 c7             	mov    %rax,%rdi
   1bdeb:	e8 b1 ff ff ff       	call   1bda1 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1bdf0:	48 89 c7             	mov    %rax,%rdi
   1bdf3:	e8 60 08 00 00       	call   1c658 <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   1bdf8:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   1bdfd:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
   1be02:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1be07:	75 db                	jne    1bde4 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_+0x1a>
	      return __cur;
   1be09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1be0d:	c9                   	leave
   1be0e:	c3                   	ret

000000000001be0f <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>:
    __niter_base(_Iterator __it)
   1be0f:	55                   	push   %rbp
   1be10:	48 89 e5             	mov    %rsp,%rbp
   1be13:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1be17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1be1b:	5d                   	pop    %rbp
   1be1c:	c3                   	ret

000000000001be1d <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1be1d:	55                   	push   %rbp
   1be1e:	48 89 e5             	mov    %rsp,%rbp
   1be21:	53                   	push   %rbx
   1be22:	48 83 ec 38          	sub    $0x38,%rsp
   1be26:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1be2a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1be2e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1be32:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1be36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1be3a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1be3e:	eb 3a                	jmp    1be7a <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x5d>
	std::__relocate_object_a(std::__addressof(*__cur),
   1be40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1be44:	48 89 c7             	mov    %rax,%rdi
   1be47:	e8 55 ff ff ff       	call   1bda1 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1be4c:	48 89 c3             	mov    %rax,%rbx
   1be4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1be53:	48 89 c7             	mov    %rax,%rdi
   1be56:	e8 46 ff ff ff       	call   1bda1 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1be5b:	48 89 c1             	mov    %rax,%rcx
   1be5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1be62:	48 89 c2             	mov    %rax,%rdx
   1be65:	48 89 de             	mov    %rbx,%rsi
   1be68:	48 89 cf             	mov    %rcx,%rdi
   1be6b:	e8 ba 08 00 00       	call   1c72a <_ZSt19__relocate_object_aIN2vk21QueueFamilyPropertiesES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1be70:	48 83 45 d8 18       	addq   $0x18,-0x28(%rbp)
   1be75:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
   1be7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1be7e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1be82:	75 bc                	jne    1be40 <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   1be84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1be88:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1be8c:	c9                   	leave
   1be8d:	c3                   	ret

000000000001be8e <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1be8e:	55                   	push   %rbp
   1be8f:	48 89 e5             	mov    %rsp,%rbp
   1be92:	48 83 ec 20          	sub    $0x20,%rsp
   1be96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1be9a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1be9e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bea2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bea6:	48 89 d0             	mov    %rdx,%rax
   1bea9:	48 c1 e0 06          	shl    $0x6,%rax
   1bead:	48 01 d0             	add    %rdx,%rax
   1beb0:	48 c1 e0 02          	shl    $0x2,%rax
   1beb4:	48 89 c2             	mov    %rax,%rdx
   1beb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bebb:	48 89 d6             	mov    %rdx,%rsi
   1bebe:	48 89 c7             	mov    %rax,%rdi
   1bec1:	e8 6a 93 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1bec6:	c9                   	leave
   1bec7:	c3                   	ret

000000000001bec8 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1bec8:	55                   	push   %rbp
   1bec9:	48 89 e5             	mov    %rsp,%rbp
   1becc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1bed0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bed4:	5d                   	pop    %rbp
   1bed5:	c3                   	ret

000000000001bed6 <_ZSt8_DestroyIN2vk19ExtensionPropertiesEEvPT_>:
    _Destroy(_Tp* __pointer)
   1bed6:	55                   	push   %rbp
   1bed7:	48 89 e5             	mov    %rsp,%rbp
   1beda:	48 83 ec 10          	sub    $0x10,%rsp
   1bede:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1bee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bee6:	48 89 c7             	mov    %rax,%rdi
   1bee9:	e8 93 08 00 00       	call   1c781 <_ZSt10destroy_atIN2vk19ExtensionPropertiesEEvPT_>
    }
   1beee:	90                   	nop
   1beef:	c9                   	leave
   1bef0:	c3                   	ret

000000000001bef1 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1bef1:	55                   	push   %rbp
   1bef2:	48 89 e5             	mov    %rsp,%rbp
   1bef5:	48 83 ec 20          	sub    $0x20,%rsp
   1bef9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1befd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   1bf01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bf05:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   1bf09:	eb 21                	jmp    1bf2c <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_+0x3b>
		std::_Construct(std::__addressof(*__cur));
   1bf0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bf0f:	48 89 c7             	mov    %rax,%rdi
   1bf12:	e8 b1 ff ff ff       	call   1bec8 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1bf17:	48 89 c7             	mov    %rax,%rdi
   1bf1a:	e8 96 08 00 00       	call   1c7b5 <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   1bf1f:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   1bf24:	48 81 45 f8 04 01 00 	addq   $0x104,-0x8(%rbp)
   1bf2b:	00 
   1bf2c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1bf31:	75 d8                	jne    1bf0b <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_+0x1a>
	      return __cur;
   1bf33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1bf37:	c9                   	leave
   1bf38:	c3                   	ret

000000000001bf39 <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>:
    __niter_base(_Iterator __it)
   1bf39:	55                   	push   %rbp
   1bf3a:	48 89 e5             	mov    %rsp,%rbp
   1bf3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1bf41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bf45:	5d                   	pop    %rbp
   1bf46:	c3                   	ret

000000000001bf47 <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1bf47:	55                   	push   %rbp
   1bf48:	48 89 e5             	mov    %rsp,%rbp
   1bf4b:	53                   	push   %rbx
   1bf4c:	48 83 ec 38          	sub    $0x38,%rsp
   1bf50:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1bf54:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1bf58:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1bf5c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1bf60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bf64:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1bf68:	eb 40                	jmp    1bfaa <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x63>
	std::__relocate_object_a(std::__addressof(*__cur),
   1bf6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bf6e:	48 89 c7             	mov    %rax,%rdi
   1bf71:	e8 52 ff ff ff       	call   1bec8 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1bf76:	48 89 c3             	mov    %rax,%rbx
   1bf79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bf7d:	48 89 c7             	mov    %rax,%rdi
   1bf80:	e8 43 ff ff ff       	call   1bec8 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1bf85:	48 89 c1             	mov    %rax,%rcx
   1bf88:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bf8c:	48 89 c2             	mov    %rax,%rdx
   1bf8f:	48 89 de             	mov    %rbx,%rsi
   1bf92:	48 89 cf             	mov    %rcx,%rdi
   1bf95:	e8 05 09 00 00       	call   1c89f <_ZSt19__relocate_object_aIN2vk19ExtensionPropertiesES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1bf9a:	48 81 45 d8 04 01 00 	addq   $0x104,-0x28(%rbp)
   1bfa1:	00 
   1bfa2:	48 81 45 e8 04 01 00 	addq   $0x104,-0x18(%rbp)
   1bfa9:	00 
   1bfaa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bfae:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1bfb2:	75 b6                	jne    1bf6a <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   1bfb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1bfb8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1bfbc:	c9                   	leave
   1bfbd:	c3                   	ret

000000000001bfbe <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1bfbe:	55                   	push   %rbp
   1bfbf:	48 89 e5             	mov    %rsp,%rbp
   1bfc2:	48 83 ec 20          	sub    $0x20,%rsp
   1bfc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bfca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bfce:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bfd2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bfd6:	48 89 d0             	mov    %rdx,%rax
   1bfd9:	48 c1 e0 06          	shl    $0x6,%rax
   1bfdd:	48 01 d0             	add    %rdx,%rax
   1bfe0:	48 c1 e0 03          	shl    $0x3,%rax
   1bfe4:	48 89 c2             	mov    %rax,%rdx
   1bfe7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bfeb:	48 89 d6             	mov    %rdx,%rsi
   1bfee:	48 89 c7             	mov    %rax,%rdi
   1bff1:	e8 3a 92 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1bff6:	c9                   	leave
   1bff7:	c3                   	ret

000000000001bff8 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1bff8:	55                   	push   %rbp
   1bff9:	48 89 e5             	mov    %rsp,%rbp
   1bffc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1c000:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c004:	5d                   	pop    %rbp
   1c005:	c3                   	ret

000000000001c006 <_ZSt8_DestroyIN2vk15LayerPropertiesEEvPT_>:
    _Destroy(_Tp* __pointer)
   1c006:	55                   	push   %rbp
   1c007:	48 89 e5             	mov    %rsp,%rbp
   1c00a:	48 83 ec 10          	sub    $0x10,%rsp
   1c00e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1c012:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c016:	48 89 c7             	mov    %rax,%rdi
   1c019:	e8 d8 08 00 00       	call   1c8f6 <_ZSt10destroy_atIN2vk15LayerPropertiesEEvPT_>
    }
   1c01e:	90                   	nop
   1c01f:	c9                   	leave
   1c020:	c3                   	ret

000000000001c021 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1c021:	55                   	push   %rbp
   1c022:	48 89 e5             	mov    %rsp,%rbp
   1c025:	48 83 ec 20          	sub    $0x20,%rsp
   1c029:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c02d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   1c031:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c035:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   1c039:	eb 21                	jmp    1c05c <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_+0x3b>
		std::_Construct(std::__addressof(*__cur));
   1c03b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c03f:	48 89 c7             	mov    %rax,%rdi
   1c042:	e8 b1 ff ff ff       	call   1bff8 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1c047:	48 89 c7             	mov    %rax,%rdi
   1c04a:	e8 fc 08 00 00       	call   1c94b <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   1c04f:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   1c054:	48 81 45 f8 08 02 00 	addq   $0x208,-0x8(%rbp)
   1c05b:	00 
   1c05c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1c061:	75 d8                	jne    1c03b <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_+0x1a>
	      return __cur;
   1c063:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1c067:	c9                   	leave
   1c068:	c3                   	ret

000000000001c069 <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>:
    __niter_base(_Iterator __it)
   1c069:	55                   	push   %rbp
   1c06a:	48 89 e5             	mov    %rsp,%rbp
   1c06d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1c071:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c075:	5d                   	pop    %rbp
   1c076:	c3                   	ret

000000000001c077 <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1c077:	55                   	push   %rbp
   1c078:	48 89 e5             	mov    %rsp,%rbp
   1c07b:	53                   	push   %rbx
   1c07c:	48 83 ec 38          	sub    $0x38,%rsp
   1c080:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c084:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c088:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c08c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1c090:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c094:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1c098:	eb 40                	jmp    1c0da <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x63>
	std::__relocate_object_a(std::__addressof(*__cur),
   1c09a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c09e:	48 89 c7             	mov    %rax,%rdi
   1c0a1:	e8 52 ff ff ff       	call   1bff8 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1c0a6:	48 89 c3             	mov    %rax,%rbx
   1c0a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c0ad:	48 89 c7             	mov    %rax,%rdi
   1c0b0:	e8 43 ff ff ff       	call   1bff8 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1c0b5:	48 89 c1             	mov    %rax,%rcx
   1c0b8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c0bc:	48 89 c2             	mov    %rax,%rdx
   1c0bf:	48 89 de             	mov    %rbx,%rsi
   1c0c2:	48 89 cf             	mov    %rcx,%rdi
   1c0c5:	e8 6b 09 00 00       	call   1ca35 <_ZSt19__relocate_object_aIN2vk15LayerPropertiesES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1c0ca:	48 81 45 d8 08 02 00 	addq   $0x208,-0x28(%rbp)
   1c0d1:	00 
   1c0d2:	48 81 45 e8 08 02 00 	addq   $0x208,-0x18(%rbp)
   1c0d9:	00 
   1c0da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c0de:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1c0e2:	75 b6                	jne    1c09a <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   1c0e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1c0e8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c0ec:	c9                   	leave
   1c0ed:	c3                   	ret

000000000001c0ee <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1c0ee:	55                   	push   %rbp
   1c0ef:	48 89 e5             	mov    %rsp,%rbp
   1c0f2:	48 83 ec 20          	sub    $0x20,%rsp
   1c0f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c0fa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c0fe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c106:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1c10d:	00 
   1c10e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c112:	48 89 d6             	mov    %rdx,%rsi
   1c115:	48 89 c7             	mov    %rax,%rdi
   1c118:	e8 13 91 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1c11d:	c9                   	leave
   1c11e:	c3                   	ret

000000000001c11f <_ZSt12__niter_baseIPKPKcET_S4_>:
    __niter_base(_Iterator __it)
   1c11f:	55                   	push   %rbp
   1c120:	48 89 e5             	mov    %rsp,%rbp
   1c123:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1c127:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c12b:	5d                   	pop    %rbp
   1c12c:	c3                   	ret

000000000001c12d <_ZSt12__niter_baseIPPKcET_S3_>:
    __niter_base(_Iterator __it)
   1c12d:	55                   	push   %rbp
   1c12e:	48 89 e5             	mov    %rsp,%rbp
   1c131:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1c135:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c139:	5d                   	pop    %rbp
   1c13a:	c3                   	ret

000000000001c13b <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   1c13b:	55                   	push   %rbp
   1c13c:	48 89 e5             	mov    %rsp,%rbp
   1c13f:	48 83 ec 20          	sub    $0x20,%rsp
   1c143:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c147:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c14b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   1c14f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c153:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c157:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c15b:	48 89 ce             	mov    %rcx,%rsi
   1c15e:	48 89 c7             	mov    %rax,%rdi
   1c161:	e8 26 09 00 00       	call   1ca8c <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   1c166:	c9                   	leave
   1c167:	c3                   	ret

000000000001c168 <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   1c168:	55                   	push   %rbp
   1c169:	48 89 e5             	mov    %rsp,%rbp
   1c16c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c170:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
   1c174:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c178:	5d                   	pop    %rbp
   1c179:	c3                   	ret

000000000001c17a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
   1c17a:	55                   	push   %rbp
   1c17b:	48 89 e5             	mov    %rsp,%rbp
   1c17e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1c182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c186:	5d                   	pop    %rbp
   1c187:	c3                   	ret

000000000001c188 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1c188:	55                   	push   %rbp
   1c189:	48 89 e5             	mov    %rsp,%rbp
   1c18c:	48 83 ec 10          	sub    $0x10,%rsp
   1c190:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c194:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1c198:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c19c:	48 89 c7             	mov    %rax,%rdi
   1c19f:	e8 53 09 00 00       	call   1caf7 <_ZSt10destroy_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEvPT_>
	}
   1c1a4:	90                   	nop
   1c1a5:	c9                   	leave
   1c1a6:	c3                   	ret

000000000001c1a7 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1c1a7:	55                   	push   %rbp
   1c1a8:	48 89 e5             	mov    %rsp,%rbp
   1c1ab:	48 83 ec 40          	sub    $0x40,%rsp
   1c1af:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c1b3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c1b7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c1bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c1bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c1c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c1c7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c1cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c1cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1c1d3:	e8 c6 9f fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1c1d8:	84 c0                	test   %al,%al
   1c1da:	74 0e                	je     1c1ea <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m+0x43>
	    ::operator delete(__p);
   1c1dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c1e0:	48 89 c7             	mov    %rax,%rdi
   1c1e3:	e8 08 90 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1c1e8:	eb 18                	jmp    1c202 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1c1ea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c1ee:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c1f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c1f6:	48 89 ce             	mov    %rcx,%rsi
   1c1f9:	48 89 c7             	mov    %rax,%rdi
   1c1fc:	e8 e5 0e 00 00       	call   1d0e6 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>
      { __a.deallocate(__p, __n); }
   1c201:	90                   	nop
   1c202:	90                   	nop
   1c203:	c9                   	leave
   1c204:	c3                   	ret
   1c205:	90                   	nop

000000000001c206 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() noexcept
   1c206:	55                   	push   %rbp
   1c207:	48 89 e5             	mov    %rsp,%rbp
   1c20a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
   1c20e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c212:	5d                   	pop    %rbp
   1c213:	c3                   	ret

000000000001c214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm>:
      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
   1c214:	55                   	push   %rbp
   1c215:	48 89 e5             	mov    %rsp,%rbp
   1c218:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c21c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const difference_type __d = difference_type(__n1 - __n2);
   1c220:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c224:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1c228:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   1c22c:	b8 00 00 00 80       	mov    $0x80000000,%eax
   1c231:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1c235:	7c 07                	jl     1c23e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x2a>
	  return __gnu_cxx::__numeric_traits<int>::__max;
   1c237:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1c23c:	eb 1b                	jmp    1c259 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x45>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   1c23e:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
   1c245:	ff ff ff 
   1c248:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1c24c:	7f 07                	jg     1c255 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x41>
	  return __gnu_cxx::__numeric_traits<int>::__min;
   1c24e:	b8 00 00 00 80       	mov    $0x80000000,%eax
   1c253:	eb 04                	jmp    1c259 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x45>
	  return int(__d);
   1c255:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1c259:	5d                   	pop    %rbp
   1c25a:	c3                   	ret
   1c25b:	90                   	nop

000000000001c25c <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
   1c25c:	55                   	push   %rbp
   1c25d:	48 89 e5             	mov    %rsp,%rbp
   1c260:	48 83 ec 10          	sub    $0x10,%rsp
   1c264:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c268:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   1c26c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c270:	48 89 c7             	mov    %rax,%rdi
   1c273:	e8 50 e3 ff ff       	call   1a5c8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1c278:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c27c:	48 89 02             	mov    %rax,(%rdx)
   1c27f:	90                   	nop
   1c280:	c9                   	leave
   1c281:	c3                   	ret

000000000001c282 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
   1c282:	55                   	push   %rbp
   1c283:	48 89 e5             	mov    %rsp,%rbp
   1c286:	48 83 ec 10          	sub    $0x10,%rsp
   1c28a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
   1c28e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c292:	48 89 c7             	mov    %rax,%rdi
   1c295:	e8 e0 fe ff ff       	call   1c17a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1c29a:	be 01 00 00 00       	mov    $0x1,%esi
   1c29f:	48 89 c7             	mov    %rax,%rdi
   1c2a2:	e8 6b 08 00 00       	call   1cb12 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>
   1c2a7:	c9                   	leave
   1c2a8:	c3                   	ret
   1c2a9:	90                   	nop

000000000001c2aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
   1c2aa:	55                   	push   %rbp
   1c2ab:	48 89 e5             	mov    %rsp,%rbp
   1c2ae:	41 56                	push   %r14
   1c2b0:	41 55                	push   %r13
   1c2b2:	41 54                	push   %r12
   1c2b4:	53                   	push   %rbx
   1c2b5:	48 83 ec 30          	sub    $0x30,%rsp
   1c2b9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c2bd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c2c1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c2c5:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   1c2c9:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	      ::new(__node) _Rb_tree_node<_Val>;
   1c2cd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c2d1:	48 89 c6             	mov    %rax,%rsi
   1c2d4:	bf 48 00 00 00       	mov    $0x48,%edi
   1c2d9:	e8 d6 9e fe ff       	call   61b4 <_ZnwmPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
   1c2de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1c2e2:	48 89 c7             	mov    %rax,%rdi
   1c2e5:	e8 3b e3 ff ff       	call   1a625 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1c2ea:	49 89 c6             	mov    %rax,%r14
   1c2ed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c2f1:	48 89 c7             	mov    %rax,%rdi
   1c2f4:	e8 1e e3 ff ff       	call   1a617 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1c2f9:	49 89 c5             	mov    %rax,%r13
   1c2fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c300:	48 89 c7             	mov    %rax,%rdi
   1c303:	e8 01 e3 ff ff       	call   1a609 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1c308:	49 89 c4             	mov    %rax,%r12
   1c30b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c30f:	48 89 c7             	mov    %rax,%rdi
   1c312:	e8 67 e2 ff ff       	call   1a57e <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1c317:	48 89 c3             	mov    %rax,%rbx
   1c31a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c31e:	48 89 c7             	mov    %rax,%rdi
   1c321:	e8 54 fe ff ff       	call   1c17a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1c326:	4d 89 f0             	mov    %r14,%r8
   1c329:	4c 89 e9             	mov    %r13,%rcx
   1c32c:	4c 89 e2             	mov    %r12,%rdx
   1c32f:	48 89 de             	mov    %rbx,%rsi
   1c332:	48 89 c7             	mov    %rax,%rdi
   1c335:	e8 55 08 00 00       	call   1cb8f <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>
	}
   1c33a:	eb 33                	jmp    1c36f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_+0xc5>
	  __catch(...)
   1c33c:	48 89 c7             	mov    %rax,%rdi
   1c33f:	e8 5c 8d fe ff       	call   50a0 <__cxa_begin_catch@plt>
	      _M_put_node(__node);
   1c344:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1c348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c34c:	48 89 d6             	mov    %rdx,%rsi
   1c34f:	48 89 c7             	mov    %rax,%rdi
   1c352:	e8 51 f1 ff ff       	call   1b4a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
	      __throw_exception_again;
   1c357:	e8 b4 8f fe ff       	call   5310 <__cxa_rethrow@plt>
	  __catch(...)
   1c35c:	48 89 c3             	mov    %rax,%rbx
   1c35f:	e8 0c 90 fe ff       	call   5370 <__cxa_end_catch@plt>
   1c364:	48 89 d8             	mov    %rbx,%rax
   1c367:	48 89 c7             	mov    %rax,%rdi
   1c36a:	e8 31 90 fe ff       	call   53a0 <_Unwind_Resume@plt>
	}
   1c36f:	48 83 c4 30          	add    $0x30,%rsp
   1c373:	5b                   	pop    %rbx
   1c374:	41 5c                	pop    %r12
   1c376:	41 5d                	pop    %r13
   1c378:	41 5e                	pop    %r14
   1c37a:	5d                   	pop    %rbp
   1c37b:	c3                   	ret

000000000001c37c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1c37c:	55                   	push   %rbp
   1c37d:	48 89 e5             	mov    %rsp,%rbp
   1c380:	48 83 ec 20          	sub    $0x20,%rsp
   1c384:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_header._M_left); }
   1c388:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c38c:	48 8b 50 18          	mov    0x18(%rax),%rdx
   1c390:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1c394:	48 89 d6             	mov    %rdx,%rsi
   1c397:	48 89 c7             	mov    %rax,%rdi
   1c39a:	e8 09 e8 ff ff       	call   1aba8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1c39f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c3a3:	c9                   	leave
   1c3a4:	c3                   	ret
   1c3a5:	90                   	nop

000000000001c3a6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
   1c3a6:	55                   	push   %rbp
   1c3a7:	48 89 e5             	mov    %rsp,%rbp
   1c3aa:	48 83 ec 20          	sub    $0x20,%rsp
   1c3ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c3b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c3b6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
   1c3ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c3be:	48 89 c7             	mov    %rax,%rdi
   1c3c1:	e8 31 08 00 00       	call   1cbf7 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>
   1c3c6:	48 8b 10             	mov    (%rax),%rdx
   1c3c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c3cd:	48 89 10             	mov    %rdx,(%rax)
   1c3d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c3d4:	48 89 c7             	mov    %rax,%rdi
   1c3d7:	e8 0e 00 00 00       	call   1c3ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1c3dc:	48 8b 10             	mov    (%rax),%rdx
   1c3df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c3e3:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
   1c3e7:	90                   	nop
   1c3e8:	c9                   	leave
   1c3e9:	c3                   	ret

000000000001c3ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1c3ea:	55                   	push   %rbp
   1c3eb:	48 89 e5             	mov    %rsp,%rbp
   1c3ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1c3f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c3f6:	5d                   	pop    %rbp
   1c3f7:	c3                   	ret

000000000001c3f8 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr() const
   1c3f8:	55                   	push   %rbp
   1c3f9:	48 89 e5             	mov    %rsp,%rbp
   1c3fc:	48 83 ec 10          	sub    $0x10,%rsp
   1c400:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   1c404:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c408:	48 83 c0 20          	add    $0x20,%rax
   1c40c:	48 89 c7             	mov    %rax,%rdi
   1c40f:	e8 f2 07 00 00       	call   1cc06 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   1c414:	c9                   	leave
   1c415:	c3                   	ret

000000000001c416 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
   1c416:	55                   	push   %rbp
   1c417:	48 89 e5             	mov    %rsp,%rbp
   1c41a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c41e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x.first; }
   1c422:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c426:	5d                   	pop    %rbp
   1c427:	c3                   	ret

000000000001c428 <_ZSt10destroy_atIP18VkPhysicalDevice_TEvPT_>:
    destroy_at(_Tp* __location)
   1c428:	55                   	push   %rbp
   1c429:	48 89 e5             	mov    %rsp,%rbp
   1c42c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1c430:	90                   	nop
   1c431:	5d                   	pop    %rbp
   1c432:	c3                   	ret

000000000001c433 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1c433:	55                   	push   %rbp
   1c434:	48 89 e5             	mov    %rsp,%rbp
   1c437:	48 83 ec 10          	sub    $0x10,%rsp
   1c43b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1c43f:	e8 5a 9d fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1c444:	84 c0                	test   %al,%al
   1c446:	74 0e                	je     1c456 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1c448:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c44c:	48 89 c7             	mov    %rax,%rdi
   1c44f:	e8 cc 07 00 00       	call   1cc20 <_ZSt12construct_atIP18VkPhysicalDevice_TJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1c454:	eb 18                	jmp    1c46e <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_+0x3b>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1c456:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c45a:	48 89 c6             	mov    %rax,%rsi
   1c45d:	bf 08 00 00 00       	mov    $0x8,%edi
   1c462:	e8 4d 9d fe ff       	call   61b4 <_ZnwmPv>
   1c467:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1c46e:	c9                   	leave
   1c46f:	c3                   	ret

000000000001c470 <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1c470:	55                   	push   %rbp
   1c471:	48 89 e5             	mov    %rsp,%rbp
   1c474:	48 83 ec 20          	sub    $0x20,%rsp
   1c478:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c47c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c480:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
			       std::__iterator_category(__first));
   1c484:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1c488:	48 89 c7             	mov    %rax,%rdi
   1c48b:	e8 b6 07 00 00       	call   1cc46 <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1c490:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c494:	48 89 c7             	mov    %rax,%rdi
   1c497:	e8 52 2c ff ff       	call   f0ee <_ZSt17__size_to_integerm>
   1c49c:	48 89 c1             	mov    %rax,%rcx
   1c49f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c4a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c4a7:	48 89 ce             	mov    %rcx,%rsi
   1c4aa:	48 89 c7             	mov    %rax,%rdi
   1c4ad:	e8 9f 07 00 00       	call   1cc51 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1c4b2:	c9                   	leave
   1c4b3:	c3                   	ret

000000000001c4b4 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1c4b4:	55                   	push   %rbp
   1c4b5:	48 89 e5             	mov    %rsp,%rbp
   1c4b8:	48 83 ec 20          	sub    $0x20,%rsp
   1c4bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c4c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c4c4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1c4c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c4cc:	48 89 c7             	mov    %rax,%rdi
   1c4cf:	e8 da 07 00 00       	call   1ccae <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>
   1c4d4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c4d8:	0f 92 c0             	setb   %al
   1c4db:	0f b6 c0             	movzbl %al,%eax
   1c4de:	48 85 c0             	test   %rax,%rax
   1c4e1:	0f 95 c0             	setne  %al
   1c4e4:	84 c0                	test   %al,%al
   1c4e6:	74 1a                	je     1c502 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1c4e8:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1c4ef:	ff ff 1f 
   1c4f2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c4f6:	73 05                	jae    1c4fd <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1c4f8:	e8 83 8c fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1c4fd:	e8 7e 8b fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c502:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c506:	48 c1 e0 03          	shl    $0x3,%rax
   1c50a:	48 89 c7             	mov    %rax,%rdi
   1c50d:	e8 0e 8d fe ff       	call   5220 <_Znwm@plt>
   1c512:	90                   	nop
      }
   1c513:	c9                   	leave
   1c514:	c3                   	ret

000000000001c515 <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1c515:	55                   	push   %rbp
   1c516:	48 89 e5             	mov    %rsp,%rbp
   1c519:	53                   	push   %rbx
   1c51a:	48 83 ec 38          	sub    $0x38,%rsp
   1c51e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c522:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c526:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c52a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1c52e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c532:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1c536:	eb 49                	jmp    1c581 <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x6c>
	std::__relocate_object_a(std::__addressof(*__cur),
   1c538:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c53c:	48 89 c7             	mov    %rax,%rdi
   1c53f:	e8 05 f6 ff ff       	call   1bb49 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1c544:	48 89 c3             	mov    %rax,%rbx
   1c547:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1c54b:	48 89 c7             	mov    %rax,%rdi
   1c54e:	e8 8f 07 00 00       	call   1cce2 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEdeEv>
   1c553:	48 89 c7             	mov    %rax,%rdi
   1c556:	e8 ee f5 ff ff       	call   1bb49 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1c55b:	48 89 c1             	mov    %rax,%rcx
   1c55e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c562:	48 89 c2             	mov    %rax,%rdx
   1c565:	48 89 de             	mov    %rbx,%rsi
   1c568:	48 89 cf             	mov    %rcx,%rdi
   1c56b:	e8 83 07 00 00       	call   1ccf3 <_ZSt19__relocate_object_aIP18VkPhysicalDevice_TS1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1c570:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
   1c575:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1c579:	48 89 c7             	mov    %rax,%rdi
   1c57c:	e8 41 07 00 00       	call   1ccc2 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEppEv>
   1c581:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c585:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1c589:	75 ad                	jne    1c538 <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x23>
      return __cur;
   1c58b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1c58f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c593:	c9                   	leave
   1c594:	c3                   	ret
   1c595:	90                   	nop

000000000001c596 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1c596:	55                   	push   %rbp
   1c597:	48 89 e5             	mov    %rsp,%rbp
   1c59a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1c59e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c5a2:	5d                   	pop    %rbp
   1c5a3:	c3                   	ret

000000000001c5a4 <_ZNKSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1c5a4:	55                   	push   %rbp
   1c5a5:	48 89 e5             	mov    %rsp,%rbp
   1c5a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1c5ac:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
   1c5b3:	ff ff 07 
      }
   1c5b6:	5d                   	pop    %rbp
   1c5b7:	c3                   	ret

000000000001c5b8 <_ZSt4moveIRN2vk4raii14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
   1c5b8:	55                   	push   %rbp
   1c5b9:	48 89 e5             	mov    %rsp,%rbp
   1c5bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1c5c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c5c4:	5d                   	pop    %rbp
   1c5c5:	c3                   	ret

000000000001c5c6 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1c5c6:	55                   	push   %rbp
   1c5c7:	48 89 e5             	mov    %rsp,%rbp
   1c5ca:	48 83 ec 20          	sub    $0x20,%rsp
   1c5ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c5d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c5d6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1c5da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c5de:	48 89 c7             	mov    %rax,%rdi
   1c5e1:	e8 64 07 00 00       	call   1cd4a <_ZSt7forwardIN2vk4raii14PhysicalDeviceEEOT_RNSt16remove_referenceIS3_E4typeE>
   1c5e6:	48 89 c2             	mov    %rax,%rdx
   1c5e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c5ed:	48 89 d6             	mov    %rdx,%rsi
   1c5f0:	48 89 c7             	mov    %rax,%rdi
   1c5f3:	e8 60 07 00 00       	call   1cd58 <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
   1c5f8:	90                   	nop
   1c5f9:	c9                   	leave
   1c5fa:	c3                   	ret

000000000001c5fb <_ZSt10destroy_atIN2vk21QueueFamilyPropertiesEEvPT_>:
    destroy_at(_Tp* __location)
   1c5fb:	55                   	push   %rbp
   1c5fc:	48 89 e5             	mov    %rsp,%rbp
   1c5ff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1c603:	90                   	nop
   1c604:	5d                   	pop    %rbp
   1c605:	c3                   	ret

000000000001c606 <_ZN2vk21QueueFamilyPropertiesC1Ev>:
  {
    using Type = QueueFamilyGlobalPriorityPropertiesKHR;
  };
  using QueueFamilyGlobalPriorityPropertiesEXT = QueueFamilyGlobalPriorityPropertiesKHR;

  struct QueueFamilyProperties
   1c606:	55                   	push   %rbp
   1c607:	48 89 e5             	mov    %rsp,%rbp
   1c60a:	48 83 ec 10          	sub    $0x10,%rsp
   1c60e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c612:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c616:	48 89 c7             	mov    %rax,%rdi
   1c619:	e8 e8 aa ff ff       	call   17106 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ev>
   1c61e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c622:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   1c629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c62d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
   1c634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c638:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
   1c63f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c643:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
   1c64a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c64e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
   1c655:	90                   	nop
   1c656:	c9                   	leave
   1c657:	c3                   	ret

000000000001c658 <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1c658:	55                   	push   %rbp
   1c659:	48 89 e5             	mov    %rsp,%rbp
   1c65c:	48 83 ec 10          	sub    $0x10,%rsp
   1c660:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1c664:	e8 35 9b fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1c669:	84 c0                	test   %al,%al
   1c66b:	74 0e                	je     1c67b <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1c66d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c671:	48 89 c7             	mov    %rax,%rdi
   1c674:	e8 24 07 00 00       	call   1cd9d <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1c679:	eb 42                	jmp    1c6bd <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_+0x65>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1c67b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c67f:	48 89 c6             	mov    %rax,%rsi
   1c682:	bf 18 00 00 00       	mov    $0x18,%edi
   1c687:	e8 28 9b fe ff       	call   61b4 <_ZnwmPv>
   1c68c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   1c692:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   1c699:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
   1c6a0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
   1c6a7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
   1c6ae:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
   1c6b5:	48 89 c7             	mov    %rax,%rdi
   1c6b8:	e8 49 ff ff ff       	call   1c606 <_ZN2vk21QueueFamilyPropertiesC1Ev>
    }
   1c6bd:	c9                   	leave
   1c6be:	c3                   	ret
   1c6bf:	90                   	nop

000000000001c6c0 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1c6c0:	55                   	push   %rbp
   1c6c1:	48 89 e5             	mov    %rsp,%rbp
   1c6c4:	48 83 ec 20          	sub    $0x20,%rsp
   1c6c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c6cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c6d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1c6d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c6d8:	48 89 c7             	mov    %rax,%rdi
   1c6db:	e8 18 07 00 00       	call   1cdf8 <_ZNKSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE11_M_max_sizeEv>
   1c6e0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c6e4:	0f 92 c0             	setb   %al
   1c6e7:	0f b6 c0             	movzbl %al,%eax
   1c6ea:	48 85 c0             	test   %rax,%rax
   1c6ed:	0f 95 c0             	setne  %al
   1c6f0:	84 c0                	test   %al,%al
   1c6f2:	74 1a                	je     1c70e <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1c6f4:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
   1c6fb:	aa aa 0a 
   1c6fe:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c702:	73 05                	jae    1c709 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1c704:	e8 77 8a fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1c709:	e8 72 89 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c70e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c712:	48 89 d0             	mov    %rdx,%rax
   1c715:	48 01 c0             	add    %rax,%rax
   1c718:	48 01 d0             	add    %rdx,%rax
   1c71b:	48 c1 e0 03          	shl    $0x3,%rax
   1c71f:	48 89 c7             	mov    %rax,%rdi
   1c722:	e8 f9 8a fe ff       	call   5220 <_Znwm@plt>
   1c727:	90                   	nop
      }
   1c728:	c9                   	leave
   1c729:	c3                   	ret

000000000001c72a <_ZSt19__relocate_object_aIN2vk21QueueFamilyPropertiesES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1c72a:	55                   	push   %rbp
   1c72b:	48 89 e5             	mov    %rsp,%rbp
   1c72e:	48 83 ec 20          	sub    $0x20,%rsp
   1c732:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c736:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c73a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1c73e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c742:	48 89 c7             	mov    %rax,%rdi
   1c745:	e8 c2 06 00 00       	call   1ce0c <_ZSt4moveIRN2vk21QueueFamilyPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>
   1c74a:	48 89 c2             	mov    %rax,%rdx
   1c74d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1c751:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c755:	48 89 ce             	mov    %rcx,%rsi
   1c758:	48 89 c7             	mov    %rax,%rdi
   1c75b:	e8 ba 06 00 00       	call   1ce1a <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1c760:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c764:	48 89 c7             	mov    %rax,%rdi
   1c767:	e8 35 f6 ff ff       	call   1bda1 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1c76c:	48 89 c2             	mov    %rax,%rdx
   1c76f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c773:	48 89 d6             	mov    %rdx,%rsi
   1c776:	48 89 c7             	mov    %rax,%rdi
   1c779:	e8 d1 06 00 00       	call   1ce4f <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE7destroyIS1_EEvRS2_PT_>
    }
   1c77e:	90                   	nop
   1c77f:	c9                   	leave
   1c780:	c3                   	ret

000000000001c781 <_ZSt10destroy_atIN2vk19ExtensionPropertiesEEvPT_>:
    destroy_at(_Tp* __location)
   1c781:	55                   	push   %rbp
   1c782:	48 89 e5             	mov    %rsp,%rbp
   1c785:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1c789:	90                   	nop
   1c78a:	5d                   	pop    %rbp
   1c78b:	c3                   	ret

000000000001c78c <_ZN2vk19ExtensionPropertiesC1Ev>:
  struct ExtensionProperties
   1c78c:	55                   	push   %rbp
   1c78d:	48 89 e5             	mov    %rsp,%rbp
   1c790:	48 83 ec 10          	sub    $0x10,%rsp
   1c794:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c798:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c79c:	48 89 c7             	mov    %rax,%rdi
   1c79f:	e8 16 9e ff ff       	call   165ba <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>
   1c7a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c7a8:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%rax)
   1c7af:	00 00 00 
   1c7b2:	90                   	nop
   1c7b3:	c9                   	leave
   1c7b4:	c3                   	ret

000000000001c7b5 <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1c7b5:	55                   	push   %rbp
   1c7b6:	48 89 e5             	mov    %rsp,%rbp
   1c7b9:	48 83 ec 10          	sub    $0x10,%rsp
   1c7bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1c7c1:	e8 d8 99 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1c7c6:	84 c0                	test   %al,%al
   1c7c8:	74 0e                	je     1c7d8 <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1c7ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c7ce:	48 89 c7             	mov    %rax,%rdi
   1c7d1:	e8 98 06 00 00       	call   1ce6e <_ZSt12construct_atIN2vk19ExtensionPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1c7d6:	eb 59                	jmp    1c831 <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_+0x7c>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1c7d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c7dc:	48 89 c6             	mov    %rax,%rsi
   1c7df:	bf 04 01 00 00       	mov    $0x104,%edi
   1c7e4:	e8 cb 99 fe ff       	call   61b4 <_ZnwmPv>
   1c7e9:	49 89 c0             	mov    %rax,%r8
   1c7ec:	4c 89 c0             	mov    %r8,%rax
   1c7ef:	b9 04 01 00 00       	mov    $0x104,%ecx
   1c7f4:	be 00 00 00 00       	mov    $0x0,%esi
   1c7f9:	48 89 30             	mov    %rsi,(%rax)
   1c7fc:	89 ca                	mov    %ecx,%edx
   1c7fe:	48 01 c2             	add    %rax,%rdx
   1c801:	48 83 c2 08          	add    $0x8,%rdx
   1c805:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1c809:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1c80d:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1c811:	48 29 d0             	sub    %rdx,%rax
   1c814:	01 c1                	add    %eax,%ecx
   1c816:	83 e1 f8             	and    $0xfffffff8,%ecx
   1c819:	89 c8                	mov    %ecx,%eax
   1c81b:	c1 e8 03             	shr    $0x3,%eax
   1c81e:	89 c1                	mov    %eax,%ecx
   1c820:	48 89 d7             	mov    %rdx,%rdi
   1c823:	48 89 f0             	mov    %rsi,%rax
   1c826:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1c829:	4c 89 c7             	mov    %r8,%rdi
   1c82c:	e8 5b ff ff ff       	call   1c78c <_ZN2vk19ExtensionPropertiesC1Ev>
    }
   1c831:	c9                   	leave
   1c832:	c3                   	ret
   1c833:	90                   	nop

000000000001c834 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1c834:	55                   	push   %rbp
   1c835:	48 89 e5             	mov    %rsp,%rbp
   1c838:	48 83 ec 20          	sub    $0x20,%rsp
   1c83c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c840:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c844:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1c848:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c84c:	48 89 c7             	mov    %rax,%rdi
   1c84f:	e8 8a 06 00 00       	call   1cede <_ZNKSt15__new_allocatorIN2vk19ExtensionPropertiesEE11_M_max_sizeEv>
   1c854:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c858:	0f 92 c0             	setb   %al
   1c85b:	0f b6 c0             	movzbl %al,%eax
   1c85e:	48 85 c0             	test   %rax,%rax
   1c861:	0f 95 c0             	setne  %al
   1c864:	84 c0                	test   %al,%al
   1c866:	74 1a                	je     1c882 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1c868:	48 b8 fc c0 0f fc c0 	movabs $0xfc0fc0fc0fc0fc,%rax
   1c86f:	0f fc 00 
   1c872:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c876:	73 05                	jae    1c87d <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1c878:	e8 03 89 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1c87d:	e8 fe 87 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c882:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c886:	48 89 d0             	mov    %rdx,%rax
   1c889:	48 c1 e0 06          	shl    $0x6,%rax
   1c88d:	48 01 d0             	add    %rdx,%rax
   1c890:	48 c1 e0 02          	shl    $0x2,%rax
   1c894:	48 89 c7             	mov    %rax,%rdi
   1c897:	e8 84 89 fe ff       	call   5220 <_Znwm@plt>
   1c89c:	90                   	nop
      }
   1c89d:	c9                   	leave
   1c89e:	c3                   	ret

000000000001c89f <_ZSt19__relocate_object_aIN2vk19ExtensionPropertiesES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1c89f:	55                   	push   %rbp
   1c8a0:	48 89 e5             	mov    %rsp,%rbp
   1c8a3:	48 83 ec 20          	sub    $0x20,%rsp
   1c8a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c8ab:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c8af:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1c8b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c8b7:	48 89 c7             	mov    %rax,%rdi
   1c8ba:	e8 33 06 00 00       	call   1cef2 <_ZSt4moveIRN2vk19ExtensionPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>
   1c8bf:	48 89 c2             	mov    %rax,%rdx
   1c8c2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1c8c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c8ca:	48 89 ce             	mov    %rcx,%rsi
   1c8cd:	48 89 c7             	mov    %rax,%rdi
   1c8d0:	e8 2b 06 00 00       	call   1cf00 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1c8d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c8d9:	48 89 c7             	mov    %rax,%rdi
   1c8dc:	e8 e7 f5 ff ff       	call   1bec8 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1c8e1:	48 89 c2             	mov    %rax,%rdx
   1c8e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c8e8:	48 89 d6             	mov    %rdx,%rsi
   1c8eb:	48 89 c7             	mov    %rax,%rdi
   1c8ee:	e8 42 06 00 00       	call   1cf35 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE7destroyIS1_EEvRS2_PT_>
    }
   1c8f3:	90                   	nop
   1c8f4:	c9                   	leave
   1c8f5:	c3                   	ret

000000000001c8f6 <_ZSt10destroy_atIN2vk15LayerPropertiesEEvPT_>:
    destroy_at(_Tp* __location)
   1c8f6:	55                   	push   %rbp
   1c8f7:	48 89 e5             	mov    %rsp,%rbp
   1c8fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1c8fe:	90                   	nop
   1c8ff:	5d                   	pop    %rbp
   1c900:	c3                   	ret
   1c901:	90                   	nop

000000000001c902 <_ZN2vk15LayerPropertiesC1Ev>:
  struct LayerProperties
   1c902:	55                   	push   %rbp
   1c903:	48 89 e5             	mov    %rsp,%rbp
   1c906:	48 83 ec 10          	sub    $0x10,%rsp
   1c90a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c90e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c912:	48 89 c7             	mov    %rax,%rdi
   1c915:	e8 a0 9c ff ff       	call   165ba <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>
   1c91a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c91e:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%rax)
   1c925:	00 00 00 
   1c928:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c92c:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%rax)
   1c933:	00 00 00 
   1c936:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c93a:	48 05 08 01 00 00    	add    $0x108,%rax
   1c940:	48 89 c7             	mov    %rax,%rdi
   1c943:	e8 72 9c ff ff       	call   165ba <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>
   1c948:	90                   	nop
   1c949:	c9                   	leave
   1c94a:	c3                   	ret

000000000001c94b <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1c94b:	55                   	push   %rbp
   1c94c:	48 89 e5             	mov    %rsp,%rbp
   1c94f:	48 83 ec 10          	sub    $0x10,%rsp
   1c953:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1c957:	e8 42 98 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1c95c:	84 c0                	test   %al,%al
   1c95e:	74 0e                	je     1c96e <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1c960:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c964:	48 89 c7             	mov    %rax,%rdi
   1c967:	e8 e8 05 00 00       	call   1cf54 <_ZSt12construct_atIN2vk15LayerPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1c96c:	eb 59                	jmp    1c9c7 <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_+0x7c>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1c96e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c972:	48 89 c6             	mov    %rax,%rsi
   1c975:	bf 08 02 00 00       	mov    $0x208,%edi
   1c97a:	e8 35 98 fe ff       	call   61b4 <_ZnwmPv>
   1c97f:	49 89 c0             	mov    %rax,%r8
   1c982:	4c 89 c0             	mov    %r8,%rax
   1c985:	b9 08 02 00 00       	mov    $0x208,%ecx
   1c98a:	be 00 00 00 00       	mov    $0x0,%esi
   1c98f:	48 89 30             	mov    %rsi,(%rax)
   1c992:	89 ca                	mov    %ecx,%edx
   1c994:	48 01 c2             	add    %rax,%rdx
   1c997:	48 83 c2 08          	add    $0x8,%rdx
   1c99b:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1c99f:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1c9a3:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1c9a7:	48 29 d0             	sub    %rdx,%rax
   1c9aa:	01 c1                	add    %eax,%ecx
   1c9ac:	83 e1 f8             	and    $0xfffffff8,%ecx
   1c9af:	89 c8                	mov    %ecx,%eax
   1c9b1:	c1 e8 03             	shr    $0x3,%eax
   1c9b4:	89 c1                	mov    %eax,%ecx
   1c9b6:	48 89 d7             	mov    %rdx,%rdi
   1c9b9:	48 89 f0             	mov    %rsi,%rax
   1c9bc:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1c9bf:	4c 89 c7             	mov    %r8,%rdi
   1c9c2:	e8 3b ff ff ff       	call   1c902 <_ZN2vk15LayerPropertiesC1Ev>
    }
   1c9c7:	c9                   	leave
   1c9c8:	c3                   	ret
   1c9c9:	90                   	nop

000000000001c9ca <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1c9ca:	55                   	push   %rbp
   1c9cb:	48 89 e5             	mov    %rsp,%rbp
   1c9ce:	48 83 ec 20          	sub    $0x20,%rsp
   1c9d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c9d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c9da:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1c9de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c9e2:	48 89 c7             	mov    %rax,%rdi
   1c9e5:	e8 da 05 00 00       	call   1cfc4 <_ZNKSt15__new_allocatorIN2vk15LayerPropertiesEE11_M_max_sizeEv>
   1c9ea:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c9ee:	0f 92 c0             	setb   %al
   1c9f1:	0f b6 c0             	movzbl %al,%eax
   1c9f4:	48 85 c0             	test   %rax,%rax
   1c9f7:	0f 95 c0             	setne  %al
   1c9fa:	84 c0                	test   %al,%al
   1c9fc:	74 1a                	je     1ca18 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1c9fe:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1ca05:	07 7e 00 
   1ca08:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ca0c:	73 05                	jae    1ca13 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1ca0e:	e8 6d 87 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1ca13:	e8 68 86 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ca18:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ca1c:	48 89 d0             	mov    %rdx,%rax
   1ca1f:	48 c1 e0 06          	shl    $0x6,%rax
   1ca23:	48 01 d0             	add    %rdx,%rax
   1ca26:	48 c1 e0 03          	shl    $0x3,%rax
   1ca2a:	48 89 c7             	mov    %rax,%rdi
   1ca2d:	e8 ee 87 fe ff       	call   5220 <_Znwm@plt>
   1ca32:	90                   	nop
      }
   1ca33:	c9                   	leave
   1ca34:	c3                   	ret

000000000001ca35 <_ZSt19__relocate_object_aIN2vk15LayerPropertiesES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1ca35:	55                   	push   %rbp
   1ca36:	48 89 e5             	mov    %rsp,%rbp
   1ca39:	48 83 ec 20          	sub    $0x20,%rsp
   1ca3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ca41:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ca45:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1ca49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ca4d:	48 89 c7             	mov    %rax,%rdi
   1ca50:	e8 83 05 00 00       	call   1cfd8 <_ZSt4moveIRN2vk15LayerPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>
   1ca55:	48 89 c2             	mov    %rax,%rdx
   1ca58:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1ca5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ca60:	48 89 ce             	mov    %rcx,%rsi
   1ca63:	48 89 c7             	mov    %rax,%rdi
   1ca66:	e8 7b 05 00 00       	call   1cfe6 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1ca6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ca6f:	48 89 c7             	mov    %rax,%rdi
   1ca72:	e8 81 f5 ff ff       	call   1bff8 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1ca77:	48 89 c2             	mov    %rax,%rdx
   1ca7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ca7e:	48 89 d6             	mov    %rdx,%rsi
   1ca81:	48 89 c7             	mov    %rax,%rdi
   1ca84:	e8 92 05 00 00       	call   1d01b <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE7destroyIS1_EEvRS2_PT_>
    }
   1ca89:	90                   	nop
   1ca8a:	c9                   	leave
   1ca8b:	c3                   	ret

000000000001ca8c <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   1ca8c:	55                   	push   %rbp
   1ca8d:	48 89 e5             	mov    %rsp,%rbp
   1ca90:	48 83 ec 20          	sub    $0x20,%rsp
   1ca94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ca98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ca9c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (std::is_constant_evaluated())
   1caa0:	e8 04 97 fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   1caa5:	84 c0                	test   %al,%al
   1caa7:	74 19                	je     1cac2 <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_+0x36>
	  __copy_m(__first, __last, __result);
   1caa9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1caad:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1cab1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cab5:	48 89 ce             	mov    %rcx,%rsi
   1cab8:	48 89 c7             	mov    %rax,%rdi
   1cabb:	e8 7a 05 00 00       	call   1d03a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_>
   1cac0:	eb 18                	jmp    1cada <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_+0x4e>
			      _Category>::__copy_m(__first, __last, __result);
   1cac2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1cac6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1caca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cace:	48 89 ce             	mov    %rcx,%rsi
   1cad1:	48 89 c7             	mov    %rax,%rdi
   1cad4:	e8 ad 05 00 00       	call   1d086 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>
   1cad9:	90                   	nop
    }
   1cada:	c9                   	leave
   1cadb:	c3                   	ret

000000000001cadc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>:
    struct pair
   1cadc:	55                   	push   %rbp
   1cadd:	48 89 e5             	mov    %rsp,%rbp
   1cae0:	48 83 ec 10          	sub    $0x10,%rsp
   1cae4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cae8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1caec:	48 89 c7             	mov    %rax,%rdi
   1caef:	e8 e4 d3 fe ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
   1caf4:	90                   	nop
   1caf5:	c9                   	leave
   1caf6:	c3                   	ret

000000000001caf7 <_ZSt10destroy_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEvPT_>:
    destroy_at(_Tp* __location)
   1caf7:	55                   	push   %rbp
   1caf8:	48 89 e5             	mov    %rsp,%rbp
   1cafb:	48 83 ec 10          	sub    $0x10,%rsp
   1caff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__location->~_Tp();
   1cb03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb07:	48 89 c7             	mov    %rax,%rdi
   1cb0a:	e8 cd ff ff ff       	call   1cadc <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>
    }
   1cb0f:	90                   	nop
   1cb10:	c9                   	leave
   1cb11:	c3                   	ret

000000000001cb12 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>:
      allocate(allocator_type& __a, size_type __n)
   1cb12:	55                   	push   %rbp
   1cb13:	48 89 e5             	mov    %rsp,%rbp
   1cb16:	48 83 ec 20          	sub    $0x20,%rsp
   1cb1a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cb1e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1cb22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cb26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1cb2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cb2e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1cb32:	e8 67 96 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1cb37:	84 c0                	test   %al,%al
   1cb39:	74 39                	je     1cb74 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1cb3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cb3f:	b9 00 00 00 00       	mov    $0x0,%ecx
   1cb44:	ba 48 00 00 00       	mov    $0x48,%edx
   1cb49:	48 f7 e2             	mul    %rdx
   1cb4c:	71 05                	jno    1cb53 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x41>
   1cb4e:	b9 01 00 00 00       	mov    $0x1,%ecx
   1cb53:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1cb57:	48 89 c8             	mov    %rcx,%rax
   1cb5a:	83 e0 01             	and    $0x1,%eax
   1cb5d:	84 c0                	test   %al,%al
   1cb5f:	74 05                	je     1cb66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x54>
	      std::__throw_bad_array_new_length();
   1cb61:	e8 1a 86 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1cb66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cb6a:	48 89 c7             	mov    %rax,%rdi
   1cb6d:	e8 ae 86 fe ff       	call   5220 <_Znwm@plt>
   1cb72:	eb 19                	jmp    1cb8d <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1cb74:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1cb78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb7c:	ba 00 00 00 00       	mov    $0x0,%edx
   1cb81:	48 89 ce             	mov    %rcx,%rsi
   1cb84:	48 89 c7             	mov    %rax,%rdi
   1cb87:	e8 94 08 00 00       	call   1d420 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>
   1cb8c:	90                   	nop
      { return __a.allocate(__n); }
   1cb8d:	c9                   	leave
   1cb8e:	c3                   	ret

000000000001cb8f <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1cb8f:	55                   	push   %rbp
   1cb90:	48 89 e5             	mov    %rsp,%rbp
   1cb93:	41 54                	push   %r12
   1cb95:	53                   	push   %rbx
   1cb96:	48 83 ec 30          	sub    $0x30,%rsp
   1cb9a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cb9e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1cba2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1cba6:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1cbaa:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1cbae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1cbb2:	48 89 c7             	mov    %rax,%rdi
   1cbb5:	e8 6b da ff ff       	call   1a625 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1cbba:	49 89 c4             	mov    %rax,%r12
   1cbbd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1cbc1:	48 89 c7             	mov    %rax,%rdi
   1cbc4:	e8 4e da ff ff       	call   1a617 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1cbc9:	48 89 c3             	mov    %rax,%rbx
   1cbcc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1cbd0:	48 89 c7             	mov    %rax,%rdi
   1cbd3:	e8 31 da ff ff       	call   1a609 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1cbd8:	48 89 c6             	mov    %rax,%rsi
   1cbdb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cbdf:	4c 89 e1             	mov    %r12,%rcx
   1cbe2:	48 89 da             	mov    %rbx,%rdx
   1cbe5:	48 89 c7             	mov    %rax,%rdi
   1cbe8:	e8 59 05 00 00       	call   1d146 <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_>
	}
   1cbed:	90                   	nop
   1cbee:	48 83 c4 30          	add    $0x30,%rsp
   1cbf2:	5b                   	pop    %rbx
   1cbf3:	41 5c                	pop    %r12
   1cbf5:	5d                   	pop    %rbp
   1cbf6:	c3                   	ret

000000000001cbf7 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1cbf7:	55                   	push   %rbp
   1cbf8:	48 89 e5             	mov    %rsp,%rbp
   1cbfb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1cbff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc03:	5d                   	pop    %rbp
   1cc04:	c3                   	ret
   1cc05:	90                   	nop

000000000001cc06 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
   1cc06:	55                   	push   %rbp
   1cc07:	48 89 e5             	mov    %rsp,%rbp
   1cc0a:	48 83 ec 10          	sub    $0x10,%rsp
   1cc0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Tp*>(_M_addr()); }
   1cc12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc16:	48 89 c7             	mov    %rax,%rdi
   1cc19:	e8 d6 05 00 00       	call   1d1f4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   1cc1e:	c9                   	leave
   1cc1f:	c3                   	ret

000000000001cc20 <_ZSt12construct_atIP18VkPhysicalDevice_TJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1cc20:	55                   	push   %rbp
   1cc21:	48 89 e5             	mov    %rsp,%rbp
   1cc24:	48 83 ec 10          	sub    $0x10,%rsp
   1cc28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1cc2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc30:	48 89 c6             	mov    %rax,%rsi
   1cc33:	bf 08 00 00 00       	mov    $0x8,%edi
   1cc38:	e8 77 95 fe ff       	call   61b4 <_ZnwmPv>
   1cc3d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1cc44:	c9                   	leave
   1cc45:	c3                   	ret

000000000001cc46 <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1cc46:	55                   	push   %rbp
   1cc47:	48 89 e5             	mov    %rsp,%rbp
   1cc4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1cc4e:	90                   	nop
   1cc4f:	5d                   	pop    %rbp
   1cc50:	c3                   	ret

000000000001cc51 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1cc51:	55                   	push   %rbp
   1cc52:	48 89 e5             	mov    %rsp,%rbp
   1cc55:	48 83 ec 20          	sub    $0x20,%rsp
   1cc59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cc5d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cc61:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1cc65:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1cc6a:	75 06                	jne    1cc72 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1cc6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc70:	eb 3a                	jmp    1ccac <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1cc72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cc76:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1cc7d:	00 
   1cc7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc82:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1cc86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1cc8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc8e:	48 89 ce             	mov    %rcx,%rsi
   1cc91:	48 89 c7             	mov    %rax,%rdi
   1cc94:	e8 69 05 00 00       	call   1d202 <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1cc99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cc9d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1cca4:	00 
   1cca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cca9:	48 01 d0             	add    %rdx,%rax
    }
   1ccac:	c9                   	leave
   1ccad:	c3                   	ret

000000000001ccae <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1ccae:	55                   	push   %rbp
   1ccaf:	48 89 e5             	mov    %rsp,%rbp
   1ccb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ccb6:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1ccbd:	ff ff 0f 
      }
   1ccc0:	5d                   	pop    %rbp
   1ccc1:	c3                   	ret

000000000001ccc2 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1ccc2:	55                   	push   %rbp
   1ccc3:	48 89 e5             	mov    %rsp,%rbp
   1ccc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   1ccca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ccce:	48 8b 00             	mov    (%rax),%rax
   1ccd1:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1ccd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ccd9:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   1ccdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1cce0:	5d                   	pop    %rbp
   1cce1:	c3                   	ret

000000000001cce2 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   1cce2:	55                   	push   %rbp
   1cce3:	48 89 e5             	mov    %rsp,%rbp
   1cce6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1ccea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ccee:	48 8b 00             	mov    (%rax),%rax
   1ccf1:	5d                   	pop    %rbp
   1ccf2:	c3                   	ret

000000000001ccf3 <_ZSt19__relocate_object_aIP18VkPhysicalDevice_TS1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1ccf3:	55                   	push   %rbp
   1ccf4:	48 89 e5             	mov    %rsp,%rbp
   1ccf7:	48 83 ec 20          	sub    $0x20,%rsp
   1ccfb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ccff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cd03:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1cd07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cd0b:	48 89 c7             	mov    %rax,%rdi
   1cd0e:	e8 1d 05 00 00       	call   1d230 <_ZSt4moveIRP18VkPhysicalDevice_TEONSt16remove_referenceIT_E4typeEOS4_>
   1cd13:	48 89 c2             	mov    %rax,%rdx
   1cd16:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1cd1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cd1e:	48 89 ce             	mov    %rcx,%rsi
   1cd21:	48 89 c7             	mov    %rax,%rdi
   1cd24:	e8 15 05 00 00       	call   1d23e <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1cd29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cd2d:	48 89 c7             	mov    %rax,%rdi
   1cd30:	e8 14 ee ff ff       	call   1bb49 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1cd35:	48 89 c2             	mov    %rax,%rdx
   1cd38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cd3c:	48 89 d6             	mov    %rdx,%rsi
   1cd3f:	48 89 c7             	mov    %rax,%rdi
   1cd42:	e8 2c 05 00 00       	call   1d273 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE7destroyIS1_EEvRS2_PT_>
    }
   1cd47:	90                   	nop
   1cd48:	c9                   	leave
   1cd49:	c3                   	ret

000000000001cd4a <_ZSt7forwardIN2vk4raii14PhysicalDeviceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1cd4a:	55                   	push   %rbp
   1cd4b:	48 89 e5             	mov    %rsp,%rbp
   1cd4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1cd52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd56:	5d                   	pop    %rbp
   1cd57:	c3                   	ret

000000000001cd58 <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1cd58:	55                   	push   %rbp
   1cd59:	48 89 e5             	mov    %rsp,%rbp
   1cd5c:	53                   	push   %rbx
   1cd5d:	48 83 ec 18          	sub    $0x18,%rsp
   1cd61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cd65:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1cd69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cd6d:	48 89 c6             	mov    %rax,%rsi
   1cd70:	bf 10 00 00 00       	mov    $0x10,%edi
   1cd75:	e8 3a 94 fe ff       	call   61b4 <_ZnwmPv>
   1cd7a:	48 89 c3             	mov    %rax,%rbx
   1cd7d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cd81:	48 89 c7             	mov    %rax,%rdi
   1cd84:	e8 c1 ff ff ff       	call   1cd4a <_ZSt7forwardIN2vk4raii14PhysicalDeviceEEOT_RNSt16remove_referenceIS3_E4typeE>
   1cd89:	48 89 c6             	mov    %rax,%rsi
   1cd8c:	48 89 df             	mov    %rbx,%rdi
   1cd8f:	e8 9c 91 ff ff       	call   15f30 <_ZN2vk4raii14PhysicalDeviceC1EOS1_>
   1cd94:	48 89 d8             	mov    %rbx,%rax
   1cd97:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1cd9b:	c9                   	leave
   1cd9c:	c3                   	ret

000000000001cd9d <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1cd9d:	55                   	push   %rbp
   1cd9e:	48 89 e5             	mov    %rsp,%rbp
   1cda1:	53                   	push   %rbx
   1cda2:	48 83 ec 18          	sub    $0x18,%rsp
   1cda6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1cdaa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cdae:	48 89 c6             	mov    %rax,%rsi
   1cdb1:	bf 18 00 00 00       	mov    $0x18,%edi
   1cdb6:	e8 f9 93 fe ff       	call   61b4 <_ZnwmPv>
   1cdbb:	48 89 c3             	mov    %rax,%rbx
   1cdbe:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
   1cdc4:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%rbx)
   1cdcb:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
   1cdd2:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
   1cdd9:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
   1cde0:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%rbx)
   1cde7:	48 89 df             	mov    %rbx,%rdi
   1cdea:	e8 17 f8 ff ff       	call   1c606 <_ZN2vk21QueueFamilyPropertiesC1Ev>
   1cdef:	48 89 d8             	mov    %rbx,%rax
   1cdf2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1cdf6:	c9                   	leave
   1cdf7:	c3                   	ret

000000000001cdf8 <_ZNKSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1cdf8:	55                   	push   %rbp
   1cdf9:	48 89 e5             	mov    %rsp,%rbp
   1cdfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ce00:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
   1ce07:	55 55 05 
      }
   1ce0a:	5d                   	pop    %rbp
   1ce0b:	c3                   	ret

000000000001ce0c <_ZSt4moveIRN2vk21QueueFamilyPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1ce0c:	55                   	push   %rbp
   1ce0d:	48 89 e5             	mov    %rsp,%rbp
   1ce10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1ce14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ce18:	5d                   	pop    %rbp
   1ce19:	c3                   	ret

000000000001ce1a <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1ce1a:	55                   	push   %rbp
   1ce1b:	48 89 e5             	mov    %rsp,%rbp
   1ce1e:	48 83 ec 20          	sub    $0x20,%rsp
   1ce22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ce26:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ce2a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1ce2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ce32:	48 89 c7             	mov    %rax,%rdi
   1ce35:	e8 58 04 00 00       	call   1d292 <_ZSt7forwardIN2vk21QueueFamilyPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1ce3a:	48 89 c2             	mov    %rax,%rdx
   1ce3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ce41:	48 89 d6             	mov    %rdx,%rsi
   1ce44:	48 89 c7             	mov    %rax,%rdi
   1ce47:	e8 54 04 00 00       	call   1d2a0 <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1ce4c:	90                   	nop
   1ce4d:	c9                   	leave
   1ce4e:	c3                   	ret

000000000001ce4f <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1ce4f:	55                   	push   %rbp
   1ce50:	48 89 e5             	mov    %rsp,%rbp
   1ce53:	48 83 ec 10          	sub    $0x10,%rsp
   1ce57:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ce5b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1ce5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ce63:	48 89 c7             	mov    %rax,%rdi
   1ce66:	e8 90 f7 ff ff       	call   1c5fb <_ZSt10destroy_atIN2vk21QueueFamilyPropertiesEEvPT_>
	}
   1ce6b:	90                   	nop
   1ce6c:	c9                   	leave
   1ce6d:	c3                   	ret

000000000001ce6e <_ZSt12construct_atIN2vk19ExtensionPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1ce6e:	55                   	push   %rbp
   1ce6f:	48 89 e5             	mov    %rsp,%rbp
   1ce72:	53                   	push   %rbx
   1ce73:	48 83 ec 18          	sub    $0x18,%rsp
   1ce77:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1ce7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ce7f:	48 89 c6             	mov    %rax,%rsi
   1ce82:	bf 04 01 00 00       	mov    $0x104,%edi
   1ce87:	e8 28 93 fe ff       	call   61b4 <_ZnwmPv>
   1ce8c:	48 89 c3             	mov    %rax,%rbx
   1ce8f:	48 89 d8             	mov    %rbx,%rax
   1ce92:	b9 04 01 00 00       	mov    $0x104,%ecx
   1ce97:	be 00 00 00 00       	mov    $0x0,%esi
   1ce9c:	48 89 30             	mov    %rsi,(%rax)
   1ce9f:	89 ca                	mov    %ecx,%edx
   1cea1:	48 01 c2             	add    %rax,%rdx
   1cea4:	48 83 c2 08          	add    $0x8,%rdx
   1cea8:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1ceac:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1ceb0:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1ceb4:	48 29 d0             	sub    %rdx,%rax
   1ceb7:	01 c1                	add    %eax,%ecx
   1ceb9:	83 e1 f8             	and    $0xfffffff8,%ecx
   1cebc:	89 c8                	mov    %ecx,%eax
   1cebe:	c1 e8 03             	shr    $0x3,%eax
   1cec1:	89 c1                	mov    %eax,%ecx
   1cec3:	48 89 d7             	mov    %rdx,%rdi
   1cec6:	48 89 f0             	mov    %rsi,%rax
   1cec9:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1cecc:	48 89 df             	mov    %rbx,%rdi
   1cecf:	e8 b8 f8 ff ff       	call   1c78c <_ZN2vk19ExtensionPropertiesC1Ev>
   1ced4:	48 89 d8             	mov    %rbx,%rax
   1ced7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1cedb:	c9                   	leave
   1cedc:	c3                   	ret
   1cedd:	90                   	nop

000000000001cede <_ZNKSt15__new_allocatorIN2vk19ExtensionPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1cede:	55                   	push   %rbp
   1cedf:	48 89 e5             	mov    %rsp,%rbp
   1cee2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1cee6:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1ceed:	07 7e 00 
      }
   1cef0:	5d                   	pop    %rbp
   1cef1:	c3                   	ret

000000000001cef2 <_ZSt4moveIRN2vk19ExtensionPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1cef2:	55                   	push   %rbp
   1cef3:	48 89 e5             	mov    %rsp,%rbp
   1cef6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1cefa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cefe:	5d                   	pop    %rbp
   1ceff:	c3                   	ret

000000000001cf00 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1cf00:	55                   	push   %rbp
   1cf01:	48 89 e5             	mov    %rsp,%rbp
   1cf04:	48 83 ec 20          	sub    $0x20,%rsp
   1cf08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cf0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cf10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1cf14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cf18:	48 89 c7             	mov    %rax,%rdi
   1cf1b:	e8 d3 03 00 00       	call   1d2f3 <_ZSt7forwardIN2vk19ExtensionPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1cf20:	48 89 c2             	mov    %rax,%rdx
   1cf23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cf27:	48 89 d6             	mov    %rdx,%rsi
   1cf2a:	48 89 c7             	mov    %rax,%rdi
   1cf2d:	e8 cf 03 00 00       	call   1d301 <_ZSt12construct_atIN2vk19ExtensionPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1cf32:	90                   	nop
   1cf33:	c9                   	leave
   1cf34:	c3                   	ret

000000000001cf35 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1cf35:	55                   	push   %rbp
   1cf36:	48 89 e5             	mov    %rsp,%rbp
   1cf39:	48 83 ec 10          	sub    $0x10,%rsp
   1cf3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cf41:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1cf45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cf49:	48 89 c7             	mov    %rax,%rdi
   1cf4c:	e8 30 f8 ff ff       	call   1c781 <_ZSt10destroy_atIN2vk19ExtensionPropertiesEEvPT_>
	}
   1cf51:	90                   	nop
   1cf52:	c9                   	leave
   1cf53:	c3                   	ret

000000000001cf54 <_ZSt12construct_atIN2vk15LayerPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1cf54:	55                   	push   %rbp
   1cf55:	48 89 e5             	mov    %rsp,%rbp
   1cf58:	53                   	push   %rbx
   1cf59:	48 83 ec 18          	sub    $0x18,%rsp
   1cf5d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1cf61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cf65:	48 89 c6             	mov    %rax,%rsi
   1cf68:	bf 08 02 00 00       	mov    $0x208,%edi
   1cf6d:	e8 42 92 fe ff       	call   61b4 <_ZnwmPv>
   1cf72:	48 89 c3             	mov    %rax,%rbx
   1cf75:	48 89 d8             	mov    %rbx,%rax
   1cf78:	b9 08 02 00 00       	mov    $0x208,%ecx
   1cf7d:	be 00 00 00 00       	mov    $0x0,%esi
   1cf82:	48 89 30             	mov    %rsi,(%rax)
   1cf85:	89 ca                	mov    %ecx,%edx
   1cf87:	48 01 c2             	add    %rax,%rdx
   1cf8a:	48 83 c2 08          	add    $0x8,%rdx
   1cf8e:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1cf92:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1cf96:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1cf9a:	48 29 d0             	sub    %rdx,%rax
   1cf9d:	01 c1                	add    %eax,%ecx
   1cf9f:	83 e1 f8             	and    $0xfffffff8,%ecx
   1cfa2:	89 c8                	mov    %ecx,%eax
   1cfa4:	c1 e8 03             	shr    $0x3,%eax
   1cfa7:	89 c1                	mov    %eax,%ecx
   1cfa9:	48 89 d7             	mov    %rdx,%rdi
   1cfac:	48 89 f0             	mov    %rsi,%rax
   1cfaf:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1cfb2:	48 89 df             	mov    %rbx,%rdi
   1cfb5:	e8 48 f9 ff ff       	call   1c902 <_ZN2vk15LayerPropertiesC1Ev>
   1cfba:	48 89 d8             	mov    %rbx,%rax
   1cfbd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1cfc1:	c9                   	leave
   1cfc2:	c3                   	ret
   1cfc3:	90                   	nop

000000000001cfc4 <_ZNKSt15__new_allocatorIN2vk15LayerPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1cfc4:	55                   	push   %rbp
   1cfc5:	48 89 e5             	mov    %rsp,%rbp
   1cfc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1cfcc:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
   1cfd3:	03 3f 00 
      }
   1cfd6:	5d                   	pop    %rbp
   1cfd7:	c3                   	ret

000000000001cfd8 <_ZSt4moveIRN2vk15LayerPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1cfd8:	55                   	push   %rbp
   1cfd9:	48 89 e5             	mov    %rsp,%rbp
   1cfdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1cfe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cfe4:	5d                   	pop    %rbp
   1cfe5:	c3                   	ret

000000000001cfe6 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1cfe6:	55                   	push   %rbp
   1cfe7:	48 89 e5             	mov    %rsp,%rbp
   1cfea:	48 83 ec 20          	sub    $0x20,%rsp
   1cfee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cff2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cff6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1cffa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cffe:	48 89 c7             	mov    %rax,%rdi
   1d001:	e8 83 03 00 00       	call   1d389 <_ZSt7forwardIN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d006:	48 89 c2             	mov    %rax,%rdx
   1d009:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d00d:	48 89 d6             	mov    %rdx,%rsi
   1d010:	48 89 c7             	mov    %rax,%rdi
   1d013:	e8 7f 03 00 00       	call   1d397 <_ZSt12construct_atIN2vk15LayerPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1d018:	90                   	nop
   1d019:	c9                   	leave
   1d01a:	c3                   	ret

000000000001d01b <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1d01b:	55                   	push   %rbp
   1d01c:	48 89 e5             	mov    %rsp,%rbp
   1d01f:	48 83 ec 10          	sub    $0x10,%rsp
   1d023:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d027:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1d02b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d02f:	48 89 c7             	mov    %rax,%rdi
   1d032:	e8 bf f8 ff ff       	call   1c8f6 <_ZSt10destroy_atIN2vk15LayerPropertiesEEvPT_>
	}
   1d037:	90                   	nop
   1d038:	c9                   	leave
   1d039:	c3                   	ret

000000000001d03a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_>:
	__copy_m(_II __first, _II __last, _OI __result)
   1d03a:	55                   	push   %rbp
   1d03b:	48 89 e5             	mov    %rsp,%rbp
   1d03e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d042:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d046:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   1d04a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d04e:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1d052:	48 c1 f8 03          	sar    $0x3,%rax
   1d056:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d05a:	eb 1d                	jmp    1d079 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_+0x3f>
	      *__result = *__first;
   1d05c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d060:	48 8b 10             	mov    (%rax),%rdx
   1d063:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d067:	48 89 10             	mov    %rdx,(%rax)
	      ++__first;
   1d06a:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      ++__result;
   1d06f:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   1d074:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   1d079:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1d07e:	7f dc                	jg     1d05c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_+0x22>
	  return __result;
   1d080:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
	}
   1d084:	5d                   	pop    %rbp
   1d085:	c3                   	ret

000000000001d086 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   1d086:	55                   	push   %rbp
   1d087:	48 89 e5             	mov    %rsp,%rbp
   1d08a:	48 83 ec 30          	sub    $0x30,%rsp
   1d08e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d092:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d096:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
   1d09a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d09e:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1d0a2:	48 c1 f8 03          	sar    $0x3,%rax
   1d0a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
   1d0aa:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1d0af:	74 1f                	je     1d0d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_+0x4a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1d0b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d0b5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d0bc:	00 
   1d0bd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1d0c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d0c5:	48 89 ce             	mov    %rcx,%rsi
   1d0c8:	48 89 c7             	mov    %rax,%rdi
   1d0cb:	e8 90 82 fe ff       	call   5360 <memmove@plt>
	  return __result + _Num;
   1d0d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d0d4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d0db:	00 
   1d0dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d0e0:	48 01 d0             	add    %rdx,%rax
	}
   1d0e3:	c9                   	leave
   1d0e4:	c3                   	ret
   1d0e5:	90                   	nop

000000000001d0e6 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1d0e6:	55                   	push   %rbp
   1d0e7:	48 89 e5             	mov    %rsp,%rbp
   1d0ea:	48 83 ec 20          	sub    $0x20,%rsp
   1d0ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d0f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d0f6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d0fa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d0fe:	48 89 d0             	mov    %rdx,%rax
   1d101:	48 c1 e0 03          	shl    $0x3,%rax
   1d105:	48 01 d0             	add    %rdx,%rax
   1d108:	48 c1 e0 03          	shl    $0x3,%rax
   1d10c:	48 89 c2             	mov    %rax,%rdx
   1d10f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d113:	48 89 d6             	mov    %rdx,%rsi
   1d116:	48 89 c7             	mov    %rax,%rdi
   1d119:	e8 12 81 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1d11e:	c9                   	leave
   1d11f:	c3                   	ret

000000000001d120 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      constexpr tuple(tuple&&) = default;
   1d120:	55                   	push   %rbp
   1d121:	48 89 e5             	mov    %rsp,%rbp
   1d124:	48 83 ec 10          	sub    $0x10,%rsp
   1d128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d12c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d130:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d134:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1d138:	48 89 d6             	mov    %rdx,%rsi
   1d13b:	48 89 c7             	mov    %rax,%rdi
   1d13e:	e8 49 03 00 00       	call   1d48c <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   1d143:	90                   	nop
   1d144:	c9                   	leave
   1d145:	c3                   	ret

000000000001d146 <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d146:	55                   	push   %rbp
   1d147:	48 89 e5             	mov    %rsp,%rbp
   1d14a:	41 56                	push   %r14
   1d14c:	41 55                	push   %r13
   1d14e:	41 54                	push   %r12
   1d150:	53                   	push   %rbx
   1d151:	48 83 ec 30          	sub    $0x30,%rsp
   1d155:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1d159:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   1d15d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   1d161:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d165:	4c 8b 65 c8          	mov    -0x38(%rbp),%r12
   1d169:	4c 89 e6             	mov    %r12,%rsi
   1d16c:	bf 28 00 00 00       	mov    $0x28,%edi
   1d171:	e8 3e 90 fe ff       	call   61b4 <_ZnwmPv>
   1d176:	48 89 c3             	mov    %rax,%rbx
   1d179:	41 be 01 00 00 00    	mov    $0x1,%r14d
   1d17f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1d183:	48 89 c7             	mov    %rax,%rdi
   1d186:	e8 9a d4 ff ff       	call   1a625 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d18b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1d18f:	48 89 c7             	mov    %rax,%rdi
   1d192:	e8 80 d4 ff ff       	call   1a617 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1d197:	48 89 c2             	mov    %rax,%rdx
   1d19a:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1d19e:	48 89 d6             	mov    %rdx,%rsi
   1d1a1:	48 89 c7             	mov    %rax,%rdi
   1d1a4:	e8 77 ff ff ff       	call   1d120 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   1d1a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d1ad:	48 89 c7             	mov    %rax,%rdi
   1d1b0:	e8 54 d4 ff ff       	call   1a609 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1d1b5:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1d1b9:	48 89 c6             	mov    %rax,%rsi
   1d1bc:	48 89 df             	mov    %rbx,%rdi
   1d1bf:	e8 e6 02 00 00       	call   1d4aa <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
   1d1c4:	48 89 d8             	mov    %rbx,%rax
   1d1c7:	eb 1e                	jmp    1d1e7 <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_+0xa1>
   1d1c9:	49 89 c5             	mov    %rax,%r13
   1d1cc:	45 84 f6             	test   %r14b,%r14b
   1d1cf:	74 0b                	je     1d1dc <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_+0x96>
   1d1d1:	4c 89 e6             	mov    %r12,%rsi
   1d1d4:	48 89 df             	mov    %rbx,%rdi
   1d1d7:	e8 03 1f ff ff       	call   f0df <_ZdlPvS_>
   1d1dc:	4c 89 e8             	mov    %r13,%rax
   1d1df:	48 89 c7             	mov    %rax,%rdi
   1d1e2:	e8 b9 81 fe ff       	call   53a0 <_Unwind_Resume@plt>
   1d1e7:	48 83 c4 30          	add    $0x30,%rsp
   1d1eb:	5b                   	pop    %rbx
   1d1ec:	41 5c                	pop    %r12
   1d1ee:	41 5d                	pop    %r13
   1d1f0:	41 5e                	pop    %r14
   1d1f2:	5d                   	pop    %rbp
   1d1f3:	c3                   	ret

000000000001d1f4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() const noexcept
   1d1f4:	55                   	push   %rbp
   1d1f5:	48 89 e5             	mov    %rsp,%rbp
   1d1f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const void*>(&_M_storage); }
   1d1fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d200:	5d                   	pop    %rbp
   1d201:	c3                   	ret

000000000001d202 <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1d202:	55                   	push   %rbp
   1d203:	48 89 e5             	mov    %rsp,%rbp
   1d206:	48 83 ec 20          	sub    $0x20,%rsp
   1d20a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d20e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d212:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1d216:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d21a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d21e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d222:	48 89 ce             	mov    %rcx,%rsi
   1d225:	48 89 c7             	mov    %rax,%rdi
   1d228:	e8 a7 02 00 00       	call   1d4d4 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1d22d:	90                   	nop
   1d22e:	c9                   	leave
   1d22f:	c3                   	ret

000000000001d230 <_ZSt4moveIRP18VkPhysicalDevice_TEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1d230:	55                   	push   %rbp
   1d231:	48 89 e5             	mov    %rsp,%rbp
   1d234:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1d238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d23c:	5d                   	pop    %rbp
   1d23d:	c3                   	ret

000000000001d23e <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1d23e:	55                   	push   %rbp
   1d23f:	48 89 e5             	mov    %rsp,%rbp
   1d242:	48 83 ec 20          	sub    $0x20,%rsp
   1d246:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d24a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d24e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1d252:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d256:	48 89 c7             	mov    %rax,%rdi
   1d259:	e8 b1 02 00 00       	call   1d50f <_ZSt7forwardIP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS2_E4typeE>
   1d25e:	48 89 c2             	mov    %rax,%rdx
   1d261:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d265:	48 89 d6             	mov    %rdx,%rsi
   1d268:	48 89 c7             	mov    %rax,%rdi
   1d26b:	e8 ad 02 00 00       	call   1d51d <_ZSt12construct_atIP18VkPhysicalDevice_TJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1d270:	90                   	nop
   1d271:	c9                   	leave
   1d272:	c3                   	ret

000000000001d273 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1d273:	55                   	push   %rbp
   1d274:	48 89 e5             	mov    %rsp,%rbp
   1d277:	48 83 ec 10          	sub    $0x10,%rsp
   1d27b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d27f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1d283:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d287:	48 89 c7             	mov    %rax,%rdi
   1d28a:	e8 99 f1 ff ff       	call   1c428 <_ZSt10destroy_atIP18VkPhysicalDevice_TEvPT_>
	}
   1d28f:	90                   	nop
   1d290:	c9                   	leave
   1d291:	c3                   	ret

000000000001d292 <_ZSt7forwardIN2vk21QueueFamilyPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d292:	55                   	push   %rbp
   1d293:	48 89 e5             	mov    %rsp,%rbp
   1d296:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d29a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d29e:	5d                   	pop    %rbp
   1d29f:	c3                   	ret

000000000001d2a0 <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d2a0:	55                   	push   %rbp
   1d2a1:	48 89 e5             	mov    %rsp,%rbp
   1d2a4:	53                   	push   %rbx
   1d2a5:	48 83 ec 18          	sub    $0x18,%rsp
   1d2a9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d2ad:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d2b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d2b5:	48 89 c6             	mov    %rax,%rsi
   1d2b8:	bf 18 00 00 00       	mov    $0x18,%edi
   1d2bd:	e8 f2 8e fe ff       	call   61b4 <_ZnwmPv>
   1d2c2:	48 89 c3             	mov    %rax,%rbx
   1d2c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d2c9:	48 89 c7             	mov    %rax,%rdi
   1d2cc:	e8 c1 ff ff ff       	call   1d292 <_ZSt7forwardIN2vk21QueueFamilyPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d2d1:	48 89 c1             	mov    %rax,%rcx
   1d2d4:	48 8b 01             	mov    (%rcx),%rax
   1d2d7:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   1d2db:	48 89 03             	mov    %rax,(%rbx)
   1d2de:	48 89 53 08          	mov    %rdx,0x8(%rbx)
   1d2e2:	48 8b 41 10          	mov    0x10(%rcx),%rax
   1d2e6:	48 89 43 10          	mov    %rax,0x10(%rbx)
   1d2ea:	48 89 d8             	mov    %rbx,%rax
   1d2ed:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d2f1:	c9                   	leave
   1d2f2:	c3                   	ret

000000000001d2f3 <_ZSt7forwardIN2vk19ExtensionPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d2f3:	55                   	push   %rbp
   1d2f4:	48 89 e5             	mov    %rsp,%rbp
   1d2f7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d2fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d2ff:	5d                   	pop    %rbp
   1d300:	c3                   	ret

000000000001d301 <_ZSt12construct_atIN2vk19ExtensionPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d301:	55                   	push   %rbp
   1d302:	48 89 e5             	mov    %rsp,%rbp
   1d305:	53                   	push   %rbx
   1d306:	48 83 ec 18          	sub    $0x18,%rsp
   1d30a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d30e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d312:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d316:	48 89 c6             	mov    %rax,%rsi
   1d319:	bf 04 01 00 00       	mov    $0x104,%edi
   1d31e:	e8 91 8e fe ff       	call   61b4 <_ZnwmPv>
   1d323:	48 89 c3             	mov    %rax,%rbx
   1d326:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d32a:	48 89 c7             	mov    %rax,%rdi
   1d32d:	e8 c1 ff ff ff       	call   1d2f3 <_ZSt7forwardIN2vk19ExtensionPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d332:	48 89 c2             	mov    %rax,%rdx
   1d335:	48 89 d8             	mov    %rbx,%rax
   1d338:	b9 04 01 00 00       	mov    $0x104,%ecx
   1d33d:	48 8b 32             	mov    (%rdx),%rsi
   1d340:	48 89 30             	mov    %rsi,(%rax)
   1d343:	89 ce                	mov    %ecx,%esi
   1d345:	48 01 c6             	add    %rax,%rsi
   1d348:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   1d34c:	89 ce                	mov    %ecx,%esi
   1d34e:	48 01 d6             	add    %rdx,%rsi
   1d351:	48 83 c6 08          	add    $0x8,%rsi
   1d355:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   1d359:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   1d35d:	48 8d 78 08          	lea    0x8(%rax),%rdi
   1d361:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1d365:	48 29 f8             	sub    %rdi,%rax
   1d368:	48 29 c2             	sub    %rax,%rdx
   1d36b:	01 c1                	add    %eax,%ecx
   1d36d:	83 e1 f8             	and    $0xfffffff8,%ecx
   1d370:	89 c8                	mov    %ecx,%eax
   1d372:	c1 e8 03             	shr    $0x3,%eax
   1d375:	89 c0                	mov    %eax,%eax
   1d377:	48 89 d6             	mov    %rdx,%rsi
   1d37a:	48 89 c1             	mov    %rax,%rcx
   1d37d:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   1d380:	48 89 d8             	mov    %rbx,%rax
   1d383:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d387:	c9                   	leave
   1d388:	c3                   	ret

000000000001d389 <_ZSt7forwardIN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d389:	55                   	push   %rbp
   1d38a:	48 89 e5             	mov    %rsp,%rbp
   1d38d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d395:	5d                   	pop    %rbp
   1d396:	c3                   	ret

000000000001d397 <_ZSt12construct_atIN2vk15LayerPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d397:	55                   	push   %rbp
   1d398:	48 89 e5             	mov    %rsp,%rbp
   1d39b:	53                   	push   %rbx
   1d39c:	48 83 ec 18          	sub    $0x18,%rsp
   1d3a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d3a4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d3a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d3ac:	48 89 c6             	mov    %rax,%rsi
   1d3af:	bf 08 02 00 00       	mov    $0x208,%edi
   1d3b4:	e8 fb 8d fe ff       	call   61b4 <_ZnwmPv>
   1d3b9:	48 89 c3             	mov    %rax,%rbx
   1d3bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d3c0:	48 89 c7             	mov    %rax,%rdi
   1d3c3:	e8 c1 ff ff ff       	call   1d389 <_ZSt7forwardIN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d3c8:	48 89 c2             	mov    %rax,%rdx
   1d3cb:	48 89 d8             	mov    %rbx,%rax
   1d3ce:	b9 08 02 00 00       	mov    $0x208,%ecx
   1d3d3:	48 8b 32             	mov    (%rdx),%rsi
   1d3d6:	48 89 30             	mov    %rsi,(%rax)
   1d3d9:	89 ce                	mov    %ecx,%esi
   1d3db:	48 01 c6             	add    %rax,%rsi
   1d3de:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   1d3e2:	89 ce                	mov    %ecx,%esi
   1d3e4:	48 01 d6             	add    %rdx,%rsi
   1d3e7:	48 83 c6 08          	add    $0x8,%rsi
   1d3eb:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   1d3ef:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   1d3f3:	48 8d 78 08          	lea    0x8(%rax),%rdi
   1d3f7:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1d3fb:	48 29 f8             	sub    %rdi,%rax
   1d3fe:	48 29 c2             	sub    %rax,%rdx
   1d401:	01 c1                	add    %eax,%ecx
   1d403:	83 e1 f8             	and    $0xfffffff8,%ecx
   1d406:	89 c8                	mov    %ecx,%eax
   1d408:	c1 e8 03             	shr    $0x3,%eax
   1d40b:	89 c0                	mov    %eax,%eax
   1d40d:	48 89 d6             	mov    %rdx,%rsi
   1d410:	48 89 c1             	mov    %rax,%rcx
   1d413:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   1d416:	48 89 d8             	mov    %rbx,%rax
   1d419:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d41d:	c9                   	leave
   1d41e:	c3                   	ret
   1d41f:	90                   	nop

000000000001d420 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1d420:	55                   	push   %rbp
   1d421:	48 89 e5             	mov    %rsp,%rbp
   1d424:	48 83 ec 20          	sub    $0x20,%rsp
   1d428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d42c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d430:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1d434:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d438:	48 89 c7             	mov    %rax,%rdi
   1d43b:	e8 1e 01 00 00       	call   1d55e <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>
   1d440:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1d444:	0f 92 c0             	setb   %al
   1d447:	0f b6 c0             	movzbl %al,%eax
   1d44a:	48 85 c0             	test   %rax,%rax
   1d44d:	0f 95 c0             	setne  %al
   1d450:	84 c0                	test   %al,%al
   1d452:	74 1a                	je     1d46e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1d454:	48 b8 8e e3 38 8e e3 	movabs $0x38e38e38e38e38e,%rax
   1d45b:	38 8e 03 
   1d45e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1d462:	73 05                	jae    1d469 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1d464:	e8 17 7d fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1d469:	e8 12 7c fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1d46e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1d472:	48 89 d0             	mov    %rdx,%rax
   1d475:	48 c1 e0 03          	shl    $0x3,%rax
   1d479:	48 01 d0             	add    %rdx,%rax
   1d47c:	48 c1 e0 03          	shl    $0x3,%rax
   1d480:	48 89 c7             	mov    %rax,%rdi
   1d483:	e8 98 7d fe ff       	call   5220 <_Znwm@plt>
   1d488:	90                   	nop
      }
   1d489:	c9                   	leave
   1d48a:	c3                   	ret
   1d48b:	90                   	nop

000000000001d48c <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
   1d48c:	55                   	push   %rbp
   1d48d:	48 89 e5             	mov    %rsp,%rbp
   1d490:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d494:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(static_cast<_Base&&>(__in))
   1d498:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d49c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1d4a0:	48 8b 12             	mov    (%rdx),%rdx
   1d4a3:	48 89 10             	mov    %rdx,(%rax)
      { }
   1d4a6:	90                   	nop
   1d4a7:	5d                   	pop    %rbp
   1d4a8:	c3                   	ret
   1d4a9:	90                   	nop

000000000001d4aa <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
   1d4aa:	55                   	push   %rbp
   1d4ab:	48 89 e5             	mov    %rsp,%rbp
   1d4ae:	48 83 ec 20          	sub    $0x20,%rsp
   1d4b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d4b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
   1d4ba:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   1d4be:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d4c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d4c6:	48 89 ce             	mov    %rcx,%rsi
   1d4c9:	48 89 c7             	mov    %rax,%rdi
   1d4cc:	e8 a1 00 00 00       	call   1d572 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
   1d4d1:	90                   	nop
   1d4d2:	c9                   	leave
   1d4d3:	c3                   	ret

000000000001d4d4 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1d4d4:	55                   	push   %rbp
   1d4d5:	48 89 e5             	mov    %rsp,%rbp
   1d4d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d4dc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d4e0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1d4e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d4e8:	48 8b 00             	mov    (%rax),%rax
   1d4eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1d4ef:	eb 10                	jmp    1d501 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1d4f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d4f5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1d4f9:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1d4fc:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1d501:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d505:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1d509:	75 e6                	jne    1d4f1 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   1d50b:	90                   	nop
   1d50c:	90                   	nop
   1d50d:	5d                   	pop    %rbp
   1d50e:	c3                   	ret

000000000001d50f <_ZSt7forwardIP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d50f:	55                   	push   %rbp
   1d510:	48 89 e5             	mov    %rsp,%rbp
   1d513:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d517:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d51b:	5d                   	pop    %rbp
   1d51c:	c3                   	ret

000000000001d51d <_ZSt12construct_atIP18VkPhysicalDevice_TJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d51d:	55                   	push   %rbp
   1d51e:	48 89 e5             	mov    %rsp,%rbp
   1d521:	53                   	push   %rbx
   1d522:	48 83 ec 18          	sub    $0x18,%rsp
   1d526:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d52a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d52e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d532:	48 89 c6             	mov    %rax,%rsi
   1d535:	bf 08 00 00 00       	mov    $0x8,%edi
   1d53a:	e8 75 8c fe ff       	call   61b4 <_ZnwmPv>
   1d53f:	48 89 c3             	mov    %rax,%rbx
   1d542:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d546:	48 89 c7             	mov    %rax,%rdi
   1d549:	e8 c1 ff ff ff       	call   1d50f <_ZSt7forwardIP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS2_E4typeE>
   1d54e:	48 8b 00             	mov    (%rax),%rax
   1d551:	48 89 03             	mov    %rax,(%rbx)
   1d554:	48 89 d8             	mov    %rbx,%rax
   1d557:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d55b:	c9                   	leave
   1d55c:	c3                   	ret
   1d55d:	90                   	nop

000000000001d55e <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1d55e:	55                   	push   %rbp
   1d55f:	48 89 e5             	mov    %rsp,%rbp
   1d562:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1d566:	48 b8 c7 71 1c c7 71 	movabs $0x1c71c71c71c71c7,%rax
   1d56d:	1c c7 01 
      }
   1d570:	5d                   	pop    %rbp
   1d571:	c3                   	ret

000000000001d572 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
   1d572:	55                   	push   %rbp
   1d573:	48 89 e5             	mov    %rsp,%rbp
   1d576:	53                   	push   %rbx
   1d577:	48 83 ec 28          	sub    $0x28,%rsp
   1d57b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d57f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d583:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   1d587:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1d58b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d58f:	48 89 c7             	mov    %rax,%rdi
   1d592:	e8 25 00 00 00       	call   1d5bc <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>
   1d597:	48 89 c7             	mov    %rax,%rdi
   1d59a:	e8 37 00 00 00       	call   1d5d6 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
   1d59f:	48 89 c6             	mov    %rax,%rsi
   1d5a2:	48 89 df             	mov    %rbx,%rdi
   1d5a5:	e8 56 c9 fe ff       	call   9f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   1d5aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d5ae:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
      { }
   1d5b5:	90                   	nop
   1d5b6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d5ba:	c9                   	leave
   1d5bb:	c3                   	ret

000000000001d5bc <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>:
    get(tuple<_Elements...>& __t) noexcept
   1d5bc:	55                   	push   %rbp
   1d5bd:	48 89 e5             	mov    %rsp,%rbp
   1d5c0:	48 83 ec 10          	sub    $0x10,%rsp
   1d5c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
   1d5c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d5cc:	48 89 c7             	mov    %rax,%rdi
   1d5cf:	e8 10 00 00 00       	call   1d5e4 <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
   1d5d4:	c9                   	leave
   1d5d5:	c3                   	ret

000000000001d5d6 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1d5d6:	55                   	push   %rbp
   1d5d7:	48 89 e5             	mov    %rsp,%rbp
   1d5da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1d5de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d5e2:	5d                   	pop    %rbp
   1d5e3:	c3                   	ret

000000000001d5e4 <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   1d5e4:	55                   	push   %rbp
   1d5e5:	48 89 e5             	mov    %rsp,%rbp
   1d5e8:	48 83 ec 10          	sub    $0x10,%rsp
   1d5ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
   1d5f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d5f4:	48 89 c7             	mov    %rax,%rdi
   1d5f7:	e8 02 00 00 00       	call   1d5fe <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>
   1d5fc:	c9                   	leave
   1d5fd:	c3                   	ret

000000000001d5fe <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   1d5fe:	55                   	push   %rbp
   1d5ff:	48 89 e5             	mov    %rsp,%rbp
   1d602:	48 83 ec 10          	sub    $0x10,%rsp
   1d606:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d60a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d60e:	48 89 c7             	mov    %rax,%rdi
   1d611:	e8 02 00 00 00       	call   1d618 <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>
   1d616:	c9                   	leave
   1d617:	c3                   	ret

000000000001d618 <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   1d618:	55                   	push   %rbp
   1d619:	48 89 e5             	mov    %rsp,%rbp
   1d61c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d620:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d624:	48 8b 00             	mov    (%rax),%rax
   1d627:	5d                   	pop    %rbp
   1d628:	c3                   	ret
   1d629:	90                   	nop

000000000001d62a <_ZNSt19bad_optional_accessD1Ev>:
    virtual ~bad_optional_access() = default;
   1d62a:	55                   	push   %rbp
   1d62b:	48 89 e5             	mov    %rsp,%rbp
   1d62e:	48 83 ec 10          	sub    $0x10,%rsp
   1d632:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d636:	48 8d 15 23 a3 01 00 	lea    0x1a323(%rip),%rdx        # 37960 <_ZTVSt19bad_optional_access+0x10>
   1d63d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d641:	48 89 10             	mov    %rdx,(%rax)
   1d644:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d648:	48 89 c7             	mov    %rax,%rdi
   1d64b:	e8 90 7d fe ff       	call   53e0 <_ZNSt9exceptionD2Ev@plt>
   1d650:	90                   	nop
   1d651:	c9                   	leave
   1d652:	c3                   	ret
   1d653:	90                   	nop

000000000001d654 <_ZNSt19bad_optional_accessD0Ev>:
   1d654:	55                   	push   %rbp
   1d655:	48 89 e5             	mov    %rsp,%rbp
   1d658:	48 83 ec 10          	sub    $0x10,%rsp
   1d65c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d660:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d664:	48 89 c7             	mov    %rax,%rdi
   1d667:	e8 be ff ff ff       	call   1d62a <_ZNSt19bad_optional_accessD1Ev>
   1d66c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d670:	be 08 00 00 00       	mov    $0x8,%esi
   1d675:	48 89 c7             	mov    %rax,%rdi
   1d678:	e8 b3 7b fe ff       	call   5230 <_ZdlPvm@plt>
   1d67d:	c9                   	leave
   1d67e:	c3                   	ret

000000000001d67f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
   1d67f:	55                   	push   %rbp
   1d680:	48 89 e5             	mov    %rsp,%rbp
   1d683:	41 54                	push   %r12
   1d685:	53                   	push   %rbx
   1d686:	48 83 ec 30          	sub    $0x30,%rsp
   1d68a:	89 7d cc             	mov    %edi,-0x34(%rbp)
   1d68d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
   1d691:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   1d695:	0f 89 28 07 00 00    	jns    1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d69b:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
   1d69f:	0f 8d 3d 01 00 00    	jge    1d7e2 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
   1d6a5:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   1d6ac:	0f 84 19 05 00 00    	je     1dbcb <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
   1d6b2:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   1d6b9:	0f 8f 04 07 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d6bf:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   1d6c6:	0f 84 37 05 00 00    	je     1dc03 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
   1d6cc:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   1d6d3:	0f 8f ea 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d6d9:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   1d6e0:	0f 84 55 05 00 00    	je     1dc3b <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
   1d6e6:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   1d6ed:	0f 8f d0 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d6f3:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   1d6fa:	0f 84 73 05 00 00    	je     1dc73 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
   1d700:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   1d707:	0f 8f b6 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d70d:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   1d714:	0f 84 91 05 00 00    	je     1dcab <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
   1d71a:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   1d721:	0f 8f 9c 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d727:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   1d72e:	0f 84 af 05 00 00    	je     1dce3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
   1d734:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   1d73b:	0f 8f 82 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d741:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   1d748:	0f 84 9d 03 00 00    	je     1daeb <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
   1d74e:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   1d755:	0f 8f 68 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d75b:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   1d762:	0f 84 bb 03 00 00    	je     1db23 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
   1d768:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   1d76f:	0f 8f 4e 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d775:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   1d77c:	0f 84 99 05 00 00    	je     1dd1b <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
   1d782:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   1d789:	0f 8f 34 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d78f:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   1d796:	0f 84 bf 03 00 00    	je     1db5b <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
   1d79c:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   1d7a3:	0f 8f 1a 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d7a9:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   1d7b0:	0f 84 9d 05 00 00    	je     1dd53 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
   1d7b6:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   1d7bd:	0f 8f 00 06 00 00    	jg     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d7c3:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
   1d7ca:	0f 84 bb 05 00 00    	je     1dd8b <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
   1d7d0:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
   1d7d7:	0f 84 b6 03 00 00    	je     1db93 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
   1d7dd:	e9 e1 05 00 00       	jmp    1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d7e2:	8b 45 cc             	mov    -0x34(%rbp),%eax
   1d7e5:	83 c0 0d             	add    $0xd,%eax
   1d7e8:	83 f8 0c             	cmp    $0xc,%eax
   1d7eb:	0f 87 d2 05 00 00    	ja     1ddc3 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1d7f1:	89 c0                	mov    %eax,%eax
   1d7f3:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1d7fa:	00 
   1d7fb:	48 8d 05 ae c2 00 00 	lea    0xc2ae(%rip),%rax        # 29ab0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   1d802:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1d805:	48 98                	cltq
   1d807:	48 8d 15 a2 c2 00 00 	lea    0xc2a2(%rip),%rdx        # 29ab0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   1d80e:	48 01 d0             	add    %rdx,%rax
   1d811:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   1d813:	bf 28 00 00 00       	mov    $0x28,%edi
   1d818:	e8 b3 78 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1d81d:	48 89 c3             	mov    %rax,%rbx
   1d820:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d824:	48 89 c6             	mov    %rax,%rsi
   1d827:	48 89 df             	mov    %rbx,%rdi
   1d82a:	e8 97 a1 fe ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
   1d82f:	48 8d 05 7e ed fe ff 	lea    -0x11282(%rip),%rax        # c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
   1d836:	48 89 c2             	mov    %rax,%rdx
   1d839:	48 8d 05 a8 a4 01 00 	lea    0x1a4a8(%rip),%rax        # 37ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1d840:	48 89 c6             	mov    %rax,%rsi
   1d843:	48 89 df             	mov    %rbx,%rdi
   1d846:	e8 35 7b fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   1d84b:	bf 28 00 00 00       	mov    $0x28,%edi
   1d850:	e8 7b 78 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1d855:	48 89 c3             	mov    %rax,%rbx
   1d858:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d85c:	48 89 c6             	mov    %rax,%rsi
   1d85f:	48 89 df             	mov    %rbx,%rdi
   1d862:	e8 31 a2 fe ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
   1d867:	48 8d 05 d6 ec fe ff 	lea    -0x1132a(%rip),%rax        # c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
   1d86e:	48 89 c2             	mov    %rax,%rdx
   1d871:	48 8d 05 58 a4 01 00 	lea    0x1a458(%rip),%rax        # 37cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1d878:	48 89 c6             	mov    %rax,%rsi
   1d87b:	48 89 df             	mov    %rbx,%rdi
   1d87e:	e8 fd 7a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   1d883:	bf 28 00 00 00       	mov    $0x28,%edi
   1d888:	e8 43 78 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1d88d:	48 89 c3             	mov    %rax,%rbx
   1d890:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d894:	48 89 c6             	mov    %rax,%rsi
   1d897:	48 89 df             	mov    %rbx,%rdi
   1d89a:	e8 cb a2 fe ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
   1d89f:	48 8d 05 2e ec fe ff 	lea    -0x113d2(%rip),%rax        # c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>
   1d8a6:	48 89 c2             	mov    %rax,%rdx
   1d8a9:	48 8d 05 08 a4 01 00 	lea    0x1a408(%rip),%rax        # 37cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1d8b0:	48 89 c6             	mov    %rax,%rsi
   1d8b3:	48 89 df             	mov    %rbx,%rdi
   1d8b6:	e8 c5 7a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   1d8bb:	bf 28 00 00 00       	mov    $0x28,%edi
   1d8c0:	e8 0b 78 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1d8c5:	48 89 c3             	mov    %rax,%rbx
   1d8c8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d8cc:	48 89 c6             	mov    %rax,%rsi
   1d8cf:	48 89 df             	mov    %rbx,%rdi
   1d8d2:	e8 65 a3 fe ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
   1d8d7:	48 8d 05 86 eb fe ff 	lea    -0x1147a(%rip),%rax        # c464 <_ZN2vk15DeviceLostErrorD1Ev>
   1d8de:	48 89 c2             	mov    %rax,%rdx
   1d8e1:	48 8d 05 b8 a3 01 00 	lea    0x1a3b8(%rip),%rax        # 37ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1d8e8:	48 89 c6             	mov    %rax,%rsi
   1d8eb:	48 89 df             	mov    %rbx,%rdi
   1d8ee:	e8 8d 7a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   1d8f3:	bf 28 00 00 00       	mov    $0x28,%edi
   1d8f8:	e8 d3 77 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1d8fd:	48 89 c3             	mov    %rax,%rbx
   1d900:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d904:	48 89 c6             	mov    %rax,%rsi
   1d907:	48 89 df             	mov    %rbx,%rdi
   1d90a:	e8 ff a3 fe ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
   1d90f:	48 8d 05 de ea fe ff 	lea    -0x11522(%rip),%rax        # c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>
   1d916:	48 89 c2             	mov    %rax,%rdx
   1d919:	48 8d 05 68 a3 01 00 	lea    0x1a368(%rip),%rax        # 37c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1d920:	48 89 c6             	mov    %rax,%rsi
   1d923:	48 89 df             	mov    %rbx,%rdi
   1d926:	e8 55 7a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   1d92b:	bf 28 00 00 00       	mov    $0x28,%edi
   1d930:	e8 9b 77 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1d935:	48 89 c3             	mov    %rax,%rbx
   1d938:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d93c:	48 89 c6             	mov    %rax,%rsi
   1d93f:	48 89 df             	mov    %rbx,%rdi
   1d942:	e8 99 a4 fe ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
   1d947:	48 8d 05 36 ea fe ff 	lea    -0x115ca(%rip),%rax        # c384 <_ZN2vk20LayerNotPresentErrorD1Ev>
   1d94e:	48 89 c2             	mov    %rax,%rdx
   1d951:	48 8d 05 18 a3 01 00 	lea    0x1a318(%rip),%rax        # 37c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1d958:	48 89 c6             	mov    %rax,%rsi
   1d95b:	48 89 df             	mov    %rbx,%rdi
   1d95e:	e8 1d 7a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   1d963:	bf 28 00 00 00       	mov    $0x28,%edi
   1d968:	e8 63 77 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1d96d:	48 89 c3             	mov    %rax,%rbx
   1d970:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d974:	48 89 c6             	mov    %rax,%rsi
   1d977:	48 89 df             	mov    %rbx,%rdi
   1d97a:	e8 33 a5 fe ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
   1d97f:	48 8d 05 8e e9 fe ff 	lea    -0x11672(%rip),%rax        # c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
   1d986:	48 89 c2             	mov    %rax,%rdx
   1d989:	48 8d 05 c8 a2 01 00 	lea    0x1a2c8(%rip),%rax        # 37c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1d990:	48 89 c6             	mov    %rax,%rsi
   1d993:	48 89 df             	mov    %rbx,%rdi
   1d996:	e8 e5 79 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   1d99b:	bf 28 00 00 00       	mov    $0x28,%edi
   1d9a0:	e8 2b 77 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1d9a5:	48 89 c3             	mov    %rax,%rbx
   1d9a8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d9ac:	48 89 c6             	mov    %rax,%rsi
   1d9af:	48 89 df             	mov    %rbx,%rdi
   1d9b2:	e8 cd a5 fe ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
   1d9b7:	48 8d 05 e6 e8 fe ff 	lea    -0x1171a(%rip),%rax        # c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>
   1d9be:	48 89 c2             	mov    %rax,%rdx
   1d9c1:	48 8d 05 78 a2 01 00 	lea    0x1a278(%rip),%rax        # 37c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1d9c8:	48 89 c6             	mov    %rax,%rsi
   1d9cb:	48 89 df             	mov    %rbx,%rdi
   1d9ce:	e8 ad 79 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   1d9d3:	bf 28 00 00 00       	mov    $0x28,%edi
   1d9d8:	e8 f3 76 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1d9dd:	48 89 c3             	mov    %rax,%rbx
   1d9e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d9e4:	48 89 c6             	mov    %rax,%rsi
   1d9e7:	48 89 df             	mov    %rbx,%rdi
   1d9ea:	e8 67 a6 fe ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
   1d9ef:	48 8d 05 3e e8 fe ff 	lea    -0x117c2(%rip),%rax        # c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>
   1d9f6:	48 89 c2             	mov    %rax,%rdx
   1d9f9:	48 8d 05 28 a2 01 00 	lea    0x1a228(%rip),%rax        # 37c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1da00:	48 89 c6             	mov    %rax,%rsi
   1da03:	48 89 df             	mov    %rbx,%rdi
   1da06:	e8 75 79 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   1da0b:	bf 28 00 00 00       	mov    $0x28,%edi
   1da10:	e8 bb 76 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1da15:	48 89 c3             	mov    %rax,%rbx
   1da18:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1da1c:	48 89 c6             	mov    %rax,%rsi
   1da1f:	48 89 df             	mov    %rbx,%rdi
   1da22:	e8 01 a7 fe ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
   1da27:	48 8d 05 96 e7 fe ff 	lea    -0x1186a(%rip),%rax        # c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>
   1da2e:	48 89 c2             	mov    %rax,%rdx
   1da31:	48 8d 05 d8 a1 01 00 	lea    0x1a1d8(%rip),%rax        # 37c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1da38:	48 89 c6             	mov    %rax,%rsi
   1da3b:	48 89 df             	mov    %rbx,%rdi
   1da3e:	e8 3d 79 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   1da43:	bf 28 00 00 00       	mov    $0x28,%edi
   1da48:	e8 83 76 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1da4d:	48 89 c3             	mov    %rax,%rbx
   1da50:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1da54:	48 89 c6             	mov    %rax,%rsi
   1da57:	48 89 df             	mov    %rbx,%rdi
   1da5a:	e8 9b a7 fe ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
   1da5f:	48 8d 05 ee e6 fe ff 	lea    -0x11912(%rip),%rax        # c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>
   1da66:	48 89 c2             	mov    %rax,%rdx
   1da69:	48 8d 05 88 a1 01 00 	lea    0x1a188(%rip),%rax        # 37bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1da70:	48 89 c6             	mov    %rax,%rsi
   1da73:	48 89 df             	mov    %rbx,%rdi
   1da76:	e8 05 79 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   1da7b:	bf 28 00 00 00       	mov    $0x28,%edi
   1da80:	e8 4b 76 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1da85:	48 89 c3             	mov    %rax,%rbx
   1da88:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1da8c:	48 89 c6             	mov    %rax,%rsi
   1da8f:	48 89 df             	mov    %rbx,%rdi
   1da92:	e8 35 a8 fe ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
   1da97:	48 8d 05 46 e6 fe ff 	lea    -0x119ba(%rip),%rax        # c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>
   1da9e:	48 89 c2             	mov    %rax,%rdx
   1daa1:	48 8d 05 38 a1 01 00 	lea    0x1a138(%rip),%rax        # 37be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1daa8:	48 89 c6             	mov    %rax,%rsi
   1daab:	48 89 df             	mov    %rbx,%rdi
   1daae:	e8 cd 78 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   1dab3:	bf 28 00 00 00       	mov    $0x28,%edi
   1dab8:	e8 13 76 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dabd:	48 89 c3             	mov    %rax,%rbx
   1dac0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dac4:	48 89 c6             	mov    %rax,%rsi
   1dac7:	48 89 df             	mov    %rbx,%rdi
   1daca:	e8 cf a8 fe ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
   1dacf:	48 8d 05 9e e5 fe ff 	lea    -0x11a62(%rip),%rax        # c074 <_ZN2vk12UnknownErrorD1Ev>
   1dad6:	48 89 c2             	mov    %rax,%rdx
   1dad9:	48 8d 05 e8 a0 01 00 	lea    0x1a0e8(%rip),%rax        # 37bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dae0:	48 89 c6             	mov    %rax,%rsi
   1dae3:	48 89 df             	mov    %rbx,%rdi
   1dae6:	e8 95 78 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   1daeb:	bf 28 00 00 00       	mov    $0x28,%edi
   1daf0:	e8 db 75 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1daf5:	48 89 c3             	mov    %rax,%rbx
   1daf8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dafc:	48 89 c6             	mov    %rax,%rsi
   1daff:	48 89 df             	mov    %rbx,%rdi
   1db02:	e8 69 a9 fe ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
   1db07:	48 8d 05 f6 e4 fe ff 	lea    -0x11b0a(%rip),%rax        # c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
   1db0e:	48 89 c2             	mov    %rax,%rdx
   1db11:	48 8d 05 98 a0 01 00 	lea    0x1a098(%rip),%rax        # 37bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1db18:	48 89 c6             	mov    %rax,%rsi
   1db1b:	48 89 df             	mov    %rbx,%rdi
   1db1e:	e8 5d 78 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   1db23:	bf 28 00 00 00       	mov    $0x28,%edi
   1db28:	e8 a3 75 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1db2d:	48 89 c3             	mov    %rax,%rbx
   1db30:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1db34:	48 89 c6             	mov    %rax,%rsi
   1db37:	48 89 df             	mov    %rbx,%rdi
   1db3a:	e8 03 aa fe ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
   1db3f:	48 8d 05 4e e4 fe ff 	lea    -0x11bb2(%rip),%rax        # bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
   1db46:	48 89 c2             	mov    %rax,%rdx
   1db49:	48 8d 05 48 a0 01 00 	lea    0x1a048(%rip),%rax        # 37b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1db50:	48 89 c6             	mov    %rax,%rsi
   1db53:	48 89 df             	mov    %rbx,%rdi
   1db56:	e8 25 78 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   1db5b:	bf 28 00 00 00       	mov    $0x28,%edi
   1db60:	e8 6b 75 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1db65:	48 89 c3             	mov    %rax,%rbx
   1db68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1db6c:	48 89 c6             	mov    %rax,%rsi
   1db6f:	48 89 df             	mov    %rbx,%rdi
   1db72:	e8 9d aa fe ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
   1db77:	48 8d 05 a6 e3 fe ff 	lea    -0x11c5a(%rip),%rax        # bf24 <_ZN2vk18FragmentationErrorD1Ev>
   1db7e:	48 89 c2             	mov    %rax,%rdx
   1db81:	48 8d 05 f8 9f 01 00 	lea    0x19ff8(%rip),%rax        # 37b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1db88:	48 89 c6             	mov    %rax,%rsi
   1db8b:	48 89 df             	mov    %rbx,%rdi
   1db8e:	e8 ed 77 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   1db93:	bf 28 00 00 00       	mov    $0x28,%edi
   1db98:	e8 33 75 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1db9d:	48 89 c3             	mov    %rax,%rbx
   1dba0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dba4:	48 89 c6             	mov    %rax,%rsi
   1dba7:	48 89 df             	mov    %rbx,%rdi
   1dbaa:	e8 37 ab fe ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
   1dbaf:	48 8d 05 fe e2 fe ff 	lea    -0x11d02(%rip),%rax        # beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
   1dbb6:	48 89 c2             	mov    %rax,%rdx
   1dbb9:	48 8d 05 a8 9f 01 00 	lea    0x19fa8(%rip),%rax        # 37b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dbc0:	48 89 c6             	mov    %rax,%rsi
   1dbc3:	48 89 df             	mov    %rbx,%rdi
   1dbc6:	e8 b5 77 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   1dbcb:	bf 28 00 00 00       	mov    $0x28,%edi
   1dbd0:	e8 fb 74 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dbd5:	48 89 c3             	mov    %rax,%rbx
   1dbd8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dbdc:	48 89 c6             	mov    %rax,%rsi
   1dbdf:	48 89 df             	mov    %rbx,%rdi
   1dbe2:	e8 d1 ab fe ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
   1dbe7:	48 8d 05 56 e2 fe ff 	lea    -0x11daa(%rip),%rax        # be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
   1dbee:	48 89 c2             	mov    %rax,%rdx
   1dbf1:	48 8d 05 58 9f 01 00 	lea    0x19f58(%rip),%rax        # 37b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dbf8:	48 89 c6             	mov    %rax,%rsi
   1dbfb:	48 89 df             	mov    %rbx,%rdi
   1dbfe:	e8 7d 77 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   1dc03:	bf 28 00 00 00       	mov    $0x28,%edi
   1dc08:	e8 c3 74 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dc0d:	48 89 c3             	mov    %rax,%rbx
   1dc10:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dc14:	48 89 c6             	mov    %rax,%rsi
   1dc17:	48 89 df             	mov    %rbx,%rdi
   1dc1a:	e8 6b ac fe ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
   1dc1f:	48 8d 05 ae e1 fe ff 	lea    -0x11e52(%rip),%rax        # bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
   1dc26:	48 89 c2             	mov    %rax,%rdx
   1dc29:	48 8d 05 08 9f 01 00 	lea    0x19f08(%rip),%rax        # 37b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dc30:	48 89 c6             	mov    %rax,%rsi
   1dc33:	48 89 df             	mov    %rbx,%rdi
   1dc36:	e8 45 77 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   1dc3b:	bf 28 00 00 00       	mov    $0x28,%edi
   1dc40:	e8 8b 74 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dc45:	48 89 c3             	mov    %rax,%rbx
   1dc48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dc4c:	48 89 c6             	mov    %rax,%rsi
   1dc4f:	48 89 df             	mov    %rbx,%rdi
   1dc52:	e8 05 ad fe ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
   1dc57:	48 8d 05 06 e1 fe ff 	lea    -0x11efa(%rip),%rax        # bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>
   1dc5e:	48 89 c2             	mov    %rax,%rdx
   1dc61:	48 8d 05 b8 9e 01 00 	lea    0x19eb8(%rip),%rax        # 37b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dc68:	48 89 c6             	mov    %rax,%rsi
   1dc6b:	48 89 df             	mov    %rbx,%rdi
   1dc6e:	e8 0d 77 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   1dc73:	bf 28 00 00 00       	mov    $0x28,%edi
   1dc78:	e8 53 74 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dc7d:	48 89 c3             	mov    %rax,%rbx
   1dc80:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dc84:	48 89 c6             	mov    %rax,%rsi
   1dc87:	48 89 df             	mov    %rbx,%rdi
   1dc8a:	e8 9f ad fe ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
   1dc8f:	48 8d 05 5e e0 fe ff 	lea    -0x11fa2(%rip),%rax        # bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
   1dc96:	48 89 c2             	mov    %rax,%rdx
   1dc99:	48 8d 05 68 9e 01 00 	lea    0x19e68(%rip),%rax        # 37b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dca0:	48 89 c6             	mov    %rax,%rsi
   1dca3:	48 89 df             	mov    %rbx,%rdi
   1dca6:	e8 d5 76 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   1dcab:	bf 28 00 00 00       	mov    $0x28,%edi
   1dcb0:	e8 1b 74 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dcb5:	48 89 c3             	mov    %rax,%rbx
   1dcb8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dcbc:	48 89 c6             	mov    %rax,%rsi
   1dcbf:	48 89 df             	mov    %rbx,%rdi
   1dcc2:	e8 39 ae fe ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
   1dcc7:	48 8d 05 b6 df fe ff 	lea    -0x1204a(%rip),%rax        # bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
   1dcce:	48 89 c2             	mov    %rax,%rdx
   1dcd1:	48 8d 05 18 9e 01 00 	lea    0x19e18(%rip),%rax        # 37af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dcd8:	48 89 c6             	mov    %rax,%rsi
   1dcdb:	48 89 df             	mov    %rbx,%rdi
   1dcde:	e8 9d 76 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   1dce3:	bf 28 00 00 00       	mov    $0x28,%edi
   1dce8:	e8 e3 73 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dced:	48 89 c3             	mov    %rax,%rbx
   1dcf0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dcf4:	48 89 c6             	mov    %rax,%rsi
   1dcf7:	48 89 df             	mov    %rbx,%rdi
   1dcfa:	e8 d3 ae fe ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
   1dcff:	48 8d 05 0e df fe ff 	lea    -0x120f2(%rip),%rax        # bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>
   1dd06:	48 89 c2             	mov    %rax,%rdx
   1dd09:	48 8d 05 c8 9d 01 00 	lea    0x19dc8(%rip),%rax        # 37ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dd10:	48 89 c6             	mov    %rax,%rsi
   1dd13:	48 89 df             	mov    %rbx,%rdi
   1dd16:	e8 65 76 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   1dd1b:	bf 28 00 00 00       	mov    $0x28,%edi
   1dd20:	e8 ab 73 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dd25:	48 89 c3             	mov    %rax,%rbx
   1dd28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dd2c:	48 89 c6             	mov    %rax,%rsi
   1dd2f:	48 89 df             	mov    %rbx,%rdi
   1dd32:	e8 6d af fe ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
   1dd37:	48 8d 05 66 de fe ff 	lea    -0x1219a(%rip),%rax        # bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
   1dd3e:	48 89 c2             	mov    %rax,%rdx
   1dd41:	48 8d 05 78 9d 01 00 	lea    0x19d78(%rip),%rax        # 37ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dd48:	48 89 c6             	mov    %rax,%rsi
   1dd4b:	48 89 df             	mov    %rbx,%rdi
   1dd4e:	e8 2d 76 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   1dd53:	bf 28 00 00 00       	mov    $0x28,%edi
   1dd58:	e8 73 73 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dd5d:	48 89 c3             	mov    %rax,%rbx
   1dd60:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dd64:	48 89 c6             	mov    %rax,%rsi
   1dd67:	48 89 df             	mov    %rbx,%rdi
   1dd6a:	e8 07 b0 fe ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
   1dd6f:	48 8d 05 be dd fe ff 	lea    -0x12242(%rip),%rax        # bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>
   1dd76:	48 89 c2             	mov    %rax,%rdx
   1dd79:	48 8d 05 28 9d 01 00 	lea    0x19d28(%rip),%rax        # 37aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1dd80:	48 89 c6             	mov    %rax,%rsi
   1dd83:	48 89 df             	mov    %rbx,%rdi
   1dd86:	e8 f5 75 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   1dd8b:	bf 28 00 00 00       	mov    $0x28,%edi
   1dd90:	e8 3b 73 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1dd95:	48 89 c3             	mov    %rax,%rbx
   1dd98:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dd9c:	48 89 c6             	mov    %rax,%rsi
   1dd9f:	48 89 df             	mov    %rbx,%rdi
   1dda2:	e8 a1 b0 fe ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
   1dda7:	48 8d 05 16 dd fe ff 	lea    -0x122ea(%rip),%rax        # bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
   1ddae:	48 89 c2             	mov    %rax,%rdx
   1ddb1:	48 8d 05 d8 9c 01 00 	lea    0x19cd8(%rip),%rax        # 37a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1ddb8:	48 89 c6             	mov    %rax,%rsi
   1ddbb:	48 89 df             	mov    %rbx,%rdi
   1ddbe:	e8 bd 75 fe ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
   1ddc3:	bf 28 00 00 00       	mov    $0x28,%edi
   1ddc8:	e8 03 73 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1ddcd:	48 89 c3             	mov    %rax,%rbx
   1ddd0:	8b 45 cc             	mov    -0x34(%rbp),%eax
   1ddd3:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
   1ddd6:	0f b6 05 7b a5 01 00 	movzbl 0x1a57b(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
   1dddd:	84 c0                	test   %al,%al
   1dddf:	0f 94 c0             	sete   %al
   1dde2:	84 c0                	test   %al,%al
   1dde4:	74 4a                	je     1de30 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   1dde6:	48 8d 05 6b a5 01 00 	lea    0x1a56b(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
   1dded:	48 89 c7             	mov    %rax,%rdi
   1ddf0:	e8 cb 75 fe ff       	call   53c0 <__cxa_guard_acquire@plt>
   1ddf5:	85 c0                	test   %eax,%eax
   1ddf7:	0f 95 c0             	setne  %al
   1ddfa:	84 c0                	test   %al,%al
   1ddfc:	74 32                	je     1de30 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   1ddfe:	48 8d 05 f3 a3 01 00 	lea    0x1a3f3(%rip),%rax        # 381f8 <__dso_handle>
   1de05:	48 89 c2             	mov    %rax,%rdx
   1de08:	48 8d 05 f1 a3 01 00 	lea    0x1a3f1(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
   1de0f:	48 89 c6             	mov    %rax,%rsi
   1de12:	48 8d 05 0b e8 fe ff 	lea    -0x117f5(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
   1de19:	48 89 c7             	mov    %rax,%rdi
   1de1c:	e8 af 73 fe ff       	call   51d0 <__cxa_atexit@plt>
   1de21:	48 8d 05 30 a5 01 00 	lea    0x1a530(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
   1de28:	48 89 c7             	mov    %rax,%rdi
   1de2b:	e8 d0 72 fe ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
   1de30:	48 8d 15 c9 a3 01 00 	lea    0x1a3c9(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
   1de37:	8b 4d ec             	mov    -0x14(%rbp),%ecx
   1de3a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1de3e:	89 ce                	mov    %ecx,%esi
   1de40:	48 89 c7             	mov    %rax,%rdi
   1de43:	e8 c0 84 fe ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
   1de48:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1de4c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
   1de50:	48 89 c6             	mov    %rax,%rsi
   1de53:	48 89 d7             	mov    %rdx,%rdi
   1de56:	89 f1                	mov    %esi,%ecx
   1de58:	48 89 d0             	mov    %rdx,%rax
   1de5b:	89 ce                	mov    %ecx,%esi
   1de5d:	48 89 c2             	mov    %rax,%rdx
   1de60:	48 89 df             	mov    %rbx,%rdi
   1de63:	e8 a8 99 fe ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
   1de68:	48 8d 05 d7 9a fe ff 	lea    -0x16529(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
   1de6f:	48 89 c2             	mov    %rax,%rdx
   1de72:	48 8d 05 87 9e 01 00 	lea    0x19e87(%rip),%rax        # 37d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
   1de79:	48 89 c6             	mov    %rax,%rsi
   1de7c:	48 89 df             	mov    %rbx,%rdi
   1de7f:	e8 fc 74 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   1de84:	49 89 c4             	mov    %rax,%r12
   1de87:	48 89 df             	mov    %rbx,%rdi
   1de8a:	e8 c1 72 fe ff       	call   5150 <__cxa_free_exception@plt>
   1de8f:	4c 89 e0             	mov    %r12,%rax
   1de92:	48 89 c7             	mov    %rax,%rdi
   1de95:	e8 06 75 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   1de9a:	49 89 c4             	mov    %rax,%r12
   1de9d:	48 89 df             	mov    %rbx,%rdi
   1dea0:	e8 ab 72 fe ff       	call   5150 <__cxa_free_exception@plt>
   1dea5:	4c 89 e0             	mov    %r12,%rax
   1dea8:	48 89 c7             	mov    %rax,%rdi
   1deab:	e8 f0 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   1deb0:	49 89 c4             	mov    %rax,%r12
   1deb3:	48 89 df             	mov    %rbx,%rdi
   1deb6:	e8 95 72 fe ff       	call   5150 <__cxa_free_exception@plt>
   1debb:	4c 89 e0             	mov    %r12,%rax
   1debe:	48 89 c7             	mov    %rax,%rdi
   1dec1:	e8 da 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   1dec6:	49 89 c4             	mov    %rax,%r12
   1dec9:	48 89 df             	mov    %rbx,%rdi
   1decc:	e8 7f 72 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ded1:	4c 89 e0             	mov    %r12,%rax
   1ded4:	48 89 c7             	mov    %rax,%rdi
   1ded7:	e8 c4 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   1dedc:	49 89 c4             	mov    %rax,%r12
   1dedf:	48 89 df             	mov    %rbx,%rdi
   1dee2:	e8 69 72 fe ff       	call   5150 <__cxa_free_exception@plt>
   1dee7:	4c 89 e0             	mov    %r12,%rax
   1deea:	48 89 c7             	mov    %rax,%rdi
   1deed:	e8 ae 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   1def2:	49 89 c4             	mov    %rax,%r12
   1def5:	48 89 df             	mov    %rbx,%rdi
   1def8:	e8 53 72 fe ff       	call   5150 <__cxa_free_exception@plt>
   1defd:	4c 89 e0             	mov    %r12,%rax
   1df00:	48 89 c7             	mov    %rax,%rdi
   1df03:	e8 98 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   1df08:	49 89 c4             	mov    %rax,%r12
   1df0b:	48 89 df             	mov    %rbx,%rdi
   1df0e:	e8 3d 72 fe ff       	call   5150 <__cxa_free_exception@plt>
   1df13:	4c 89 e0             	mov    %r12,%rax
   1df16:	48 89 c7             	mov    %rax,%rdi
   1df19:	e8 82 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   1df1e:	49 89 c4             	mov    %rax,%r12
   1df21:	48 89 df             	mov    %rbx,%rdi
   1df24:	e8 27 72 fe ff       	call   5150 <__cxa_free_exception@plt>
   1df29:	4c 89 e0             	mov    %r12,%rax
   1df2c:	48 89 c7             	mov    %rax,%rdi
   1df2f:	e8 6c 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   1df34:	49 89 c4             	mov    %rax,%r12
   1df37:	48 89 df             	mov    %rbx,%rdi
   1df3a:	e8 11 72 fe ff       	call   5150 <__cxa_free_exception@plt>
   1df3f:	4c 89 e0             	mov    %r12,%rax
   1df42:	48 89 c7             	mov    %rax,%rdi
   1df45:	e8 56 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   1df4a:	49 89 c4             	mov    %rax,%r12
   1df4d:	48 89 df             	mov    %rbx,%rdi
   1df50:	e8 fb 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1df55:	4c 89 e0             	mov    %r12,%rax
   1df58:	48 89 c7             	mov    %rax,%rdi
   1df5b:	e8 40 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   1df60:	49 89 c4             	mov    %rax,%r12
   1df63:	48 89 df             	mov    %rbx,%rdi
   1df66:	e8 e5 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1df6b:	4c 89 e0             	mov    %r12,%rax
   1df6e:	48 89 c7             	mov    %rax,%rdi
   1df71:	e8 2a 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   1df76:	49 89 c4             	mov    %rax,%r12
   1df79:	48 89 df             	mov    %rbx,%rdi
   1df7c:	e8 cf 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1df81:	4c 89 e0             	mov    %r12,%rax
   1df84:	48 89 c7             	mov    %rax,%rdi
   1df87:	e8 14 74 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   1df8c:	49 89 c4             	mov    %rax,%r12
   1df8f:	48 89 df             	mov    %rbx,%rdi
   1df92:	e8 b9 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1df97:	4c 89 e0             	mov    %r12,%rax
   1df9a:	48 89 c7             	mov    %rax,%rdi
   1df9d:	e8 fe 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   1dfa2:	49 89 c4             	mov    %rax,%r12
   1dfa5:	48 89 df             	mov    %rbx,%rdi
   1dfa8:	e8 a3 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1dfad:	4c 89 e0             	mov    %r12,%rax
   1dfb0:	48 89 c7             	mov    %rax,%rdi
   1dfb3:	e8 e8 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   1dfb8:	49 89 c4             	mov    %rax,%r12
   1dfbb:	48 89 df             	mov    %rbx,%rdi
   1dfbe:	e8 8d 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1dfc3:	4c 89 e0             	mov    %r12,%rax
   1dfc6:	48 89 c7             	mov    %rax,%rdi
   1dfc9:	e8 d2 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   1dfce:	49 89 c4             	mov    %rax,%r12
   1dfd1:	48 89 df             	mov    %rbx,%rdi
   1dfd4:	e8 77 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1dfd9:	4c 89 e0             	mov    %r12,%rax
   1dfdc:	48 89 c7             	mov    %rax,%rdi
   1dfdf:	e8 bc 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   1dfe4:	49 89 c4             	mov    %rax,%r12
   1dfe7:	48 89 df             	mov    %rbx,%rdi
   1dfea:	e8 61 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1dfef:	4c 89 e0             	mov    %r12,%rax
   1dff2:	48 89 c7             	mov    %rax,%rdi
   1dff5:	e8 a6 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   1dffa:	49 89 c4             	mov    %rax,%r12
   1dffd:	48 89 df             	mov    %rbx,%rdi
   1e000:	e8 4b 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e005:	4c 89 e0             	mov    %r12,%rax
   1e008:	48 89 c7             	mov    %rax,%rdi
   1e00b:	e8 90 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   1e010:	49 89 c4             	mov    %rax,%r12
   1e013:	48 89 df             	mov    %rbx,%rdi
   1e016:	e8 35 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e01b:	4c 89 e0             	mov    %r12,%rax
   1e01e:	48 89 c7             	mov    %rax,%rdi
   1e021:	e8 7a 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   1e026:	49 89 c4             	mov    %rax,%r12
   1e029:	48 89 df             	mov    %rbx,%rdi
   1e02c:	e8 1f 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e031:	4c 89 e0             	mov    %r12,%rax
   1e034:	48 89 c7             	mov    %rax,%rdi
   1e037:	e8 64 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   1e03c:	49 89 c4             	mov    %rax,%r12
   1e03f:	48 89 df             	mov    %rbx,%rdi
   1e042:	e8 09 71 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e047:	4c 89 e0             	mov    %r12,%rax
   1e04a:	48 89 c7             	mov    %rax,%rdi
   1e04d:	e8 4e 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   1e052:	49 89 c4             	mov    %rax,%r12
   1e055:	48 89 df             	mov    %rbx,%rdi
   1e058:	e8 f3 70 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e05d:	4c 89 e0             	mov    %r12,%rax
   1e060:	48 89 c7             	mov    %rax,%rdi
   1e063:	e8 38 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   1e068:	49 89 c4             	mov    %rax,%r12
   1e06b:	48 89 df             	mov    %rbx,%rdi
   1e06e:	e8 dd 70 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e073:	4c 89 e0             	mov    %r12,%rax
   1e076:	48 89 c7             	mov    %rax,%rdi
   1e079:	e8 22 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   1e07e:	49 89 c4             	mov    %rax,%r12
   1e081:	48 89 df             	mov    %rbx,%rdi
   1e084:	e8 c7 70 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e089:	4c 89 e0             	mov    %r12,%rax
   1e08c:	48 89 c7             	mov    %rax,%rdi
   1e08f:	e8 0c 73 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   1e094:	49 89 c4             	mov    %rax,%r12
   1e097:	48 89 df             	mov    %rbx,%rdi
   1e09a:	e8 b1 70 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e09f:	4c 89 e0             	mov    %r12,%rax
   1e0a2:	48 89 c7             	mov    %rax,%rdi
   1e0a5:	e8 f6 72 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   1e0aa:	49 89 c4             	mov    %rax,%r12
   1e0ad:	48 89 df             	mov    %rbx,%rdi
   1e0b0:	e8 9b 70 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e0b5:	4c 89 e0             	mov    %r12,%rax
   1e0b8:	48 89 c7             	mov    %rax,%rdi
   1e0bb:	e8 e0 72 fe ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
   1e0c0:	49 89 c4             	mov    %rax,%r12
   1e0c3:	48 89 df             	mov    %rbx,%rdi
   1e0c6:	e8 85 70 fe ff       	call   5150 <__cxa_free_exception@plt>
   1e0cb:	4c 89 e0             	mov    %r12,%rax
   1e0ce:	48 89 c7             	mov    %rax,%rdi
   1e0d1:	e8 ca 72 fe ff       	call   53a0 <_Unwind_Resume@plt>

000000000001e0d6 <_ZN4rtvc15makeCommandPoolERKNS_13DeviceWrapperE>:
#include "command_pool.hpp"

namespace rtvc {

vk::raii::CommandPool makeCommandPool(const DeviceWrapper &device) {
   1e0d6:	55                   	push   %rbp
   1e0d7:	48 89 e5             	mov    %rsp,%rbp
   1e0da:	53                   	push   %rbx
   1e0db:	48 83 ec 38          	sub    $0x38,%rsp
   1e0df:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1e0e3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  vk::CommandPoolCreateInfo commandPoolInfo{
   1e0e7:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1e0eb:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
   1e0ef:	66 0f d6 45 e0       	movq   %xmm0,-0x20(%rbp)
   1e0f4:	c7 45 d0 27 00 00 00 	movl   $0x27,-0x30(%rbp)
   1e0fb:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%rbp)
      .flags{vk::CommandPoolCreateFlagBits::eResetCommandBuffer},
      .queueFamilyIndex{device.queueFamilyIndex},
   1e102:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e106:	8b 00                	mov    (%rax),%eax
  };
   1e108:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  return {device.logical, commandPoolInfo};
   1e10b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e10f:	48 8d 58 28          	lea    0x28(%rax),%rbx
   1e113:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1e117:	be 00 00 00 00       	mov    $0x0,%esi
   1e11c:	48 89 c7             	mov    %rax,%rdi
   1e11f:	e8 86 9f ff ff       	call   180aa <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
   1e124:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1e128:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1e12c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e130:	48 89 de             	mov    %rbx,%rsi
   1e133:	48 89 c7             	mov    %rax,%rdi
   1e136:	e8 21 00 00 00       	call   1e15c <_ZN2vk4raii11CommandPoolC1ERKNS0_6DeviceERKNS_21CommandPoolCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
}
   1e13b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e13f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1e143:	c9                   	leave
   1e144:	c3                   	ret
   1e145:	90                   	nop

000000000001e146 <_ZN2vk11CommandPoolC1Ev>:
    VULKAN_HPP_CONSTEXPR         CommandPool() = default;
   1e146:	55                   	push   %rbp
   1e147:	48 89 e5             	mov    %rsp,%rbp
   1e14a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e14e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e152:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1e159:	90                   	nop
   1e15a:	5d                   	pop    %rbp
   1e15b:	c3                   	ret

000000000001e15c <_ZN2vk4raii11CommandPoolC1ERKNS0_6DeviceERKNS_21CommandPoolCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      CommandPool( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Device const &                 device,
   1e15c:	55                   	push   %rbp
   1e15d:	48 89 e5             	mov    %rsp,%rbp
   1e160:	41 55                	push   %r13
   1e162:	41 54                	push   %r12
   1e164:	53                   	push   %rbx
   1e165:	48 83 ec 38          	sub    $0x38,%rsp
   1e169:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1e16d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   1e171:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   1e175:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_device( *device )
   1e179:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e17d:	48 89 c7             	mov    %rax,%rdi
   1e180:	e8 d7 82 ff ff       	call   1645c <_ZNK2vk4raii6DevicedeEv>
   1e185:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1e189:	48 8b 00             	mov    (%rax),%rax
   1e18c:	48 89 02             	mov    %rax,(%rdx)
        , m_dispatcher( device.getDispatcher() )
   1e18f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e193:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1e19a:	00 
   1e19b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e19f:	48 83 c0 08          	add    $0x8,%rax
   1e1a3:	48 89 c7             	mov    %rax,%rdi
   1e1a6:	e8 9b ff ff ff       	call   1e146 <_ZN2vk11CommandPoolC1Ev>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   1e1ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1e1af:	48 89 c7             	mov    %rax,%rdi
   1e1b2:	e8 65 8f ff ff       	call   1711c <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   1e1b7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1e1bb:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( device.getDispatcher() )
   1e1bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e1c3:	48 89 c7             	mov    %rax,%rdi
   1e1c6:	e8 a1 b3 fe ff       	call   956c <_ZNK2vk4raii6Device13getDispatcherEv>
   1e1cb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1e1cf:	48 89 42 18          	mov    %rax,0x18(%rdx)
          device.getDispatcher()->vkCreateCommandPool( static_cast<VkDevice>( *device ),
   1e1d3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e1d7:	48 89 c7             	mov    %rax,%rdi
   1e1da:	e8 8d b3 fe ff       	call   956c <_ZNK2vk4raii6Device13getDispatcherEv>
   1e1df:	4c 8b a0 38 02 00 00 	mov    0x238(%rax),%r12
                                                       reinterpret_cast<VkCommandPool *>( &m_commandPool ) ) );
   1e1e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e1ea:	4c 8d 68 08          	lea    0x8(%rax),%r13
                                                       reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   1e1ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e1f2:	48 8b 58 10          	mov    0x10(%rax),%rbx
          device.getDispatcher()->vkCreateCommandPool( static_cast<VkDevice>( *device ),
   1e1f6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e1fa:	48 89 c7             	mov    %rax,%rdi
   1e1fd:	e8 5a 82 ff ff       	call   1645c <_ZNK2vk4raii6DevicedeEv>
   1e202:	48 89 c7             	mov    %rax,%rdi
   1e205:	e8 24 ae fe ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
   1e20a:	48 89 c7             	mov    %rax,%rdi
   1e20d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1e211:	4c 89 e9             	mov    %r13,%rcx
   1e214:	48 89 da             	mov    %rbx,%rdx
   1e217:	48 89 c6             	mov    %rax,%rsi
   1e21a:	41 ff d4             	call   *%r12
   1e21d:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   1e220:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   1e224:	74 14                	je     1e23a <_ZN2vk4raii11CommandPoolC1ERKNS0_6DeviceERKNS_21CommandPoolCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0xde>
          throwResultException( result, "vkCreateCommandPool" );
   1e226:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1e229:	48 8d 15 78 b9 00 00 	lea    0xb978(%rip),%rdx        # 29ba8 <_ZNSt8__detailL19__atomic_spin_countE+0xb4>
   1e230:	48 89 d6             	mov    %rdx,%rsi
   1e233:	89 c7                	mov    %eax,%edi
   1e235:	e8 45 f4 ff ff       	call   1d67f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   1e23a:	90                   	nop
   1e23b:	48 83 c4 38          	add    $0x38,%rsp
   1e23f:	5b                   	pop    %rbx
   1e240:	41 5c                	pop    %r12
   1e242:	41 5d                	pop    %r13
   1e244:	5d                   	pop    %rbp
   1e245:	c3                   	ret

000000000001e246 <_ZN2vkL23getDispatchLoaderStaticEv>:
  {
   1e246:	55                   	push   %rbp
   1e247:	48 89 e5             	mov    %rsp,%rbp
    return dls;
   1e24a:	48 8d 05 cf 9f 01 00 	lea    0x19fcf(%rip),%rax        # 38220 <_ZZN2vkL23getDispatchLoaderStaticEvE3dls>
  }
   1e251:	5d                   	pop    %rbp
   1e252:	c3                   	ret

000000000001e253 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
   1e253:	55                   	push   %rbp
   1e254:	48 89 e5             	mov    %rsp,%rbp
   1e257:	41 54                	push   %r12
   1e259:	53                   	push   %rbx
   1e25a:	48 83 ec 30          	sub    $0x30,%rsp
   1e25e:	89 7d cc             	mov    %edi,-0x34(%rbp)
   1e261:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
   1e265:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   1e269:	0f 89 28 07 00 00    	jns    1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e26f:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
   1e273:	0f 8d 3d 01 00 00    	jge    1e3b6 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
   1e279:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   1e280:	0f 84 19 05 00 00    	je     1e79f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
   1e286:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
   1e28d:	0f 8f 04 07 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e293:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   1e29a:	0f 84 37 05 00 00    	je     1e7d7 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
   1e2a0:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
   1e2a7:	0f 8f ea 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e2ad:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   1e2b4:	0f 84 55 05 00 00    	je     1e80f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
   1e2ba:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   1e2c1:	0f 8f d0 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e2c7:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   1e2ce:	0f 84 73 05 00 00    	je     1e847 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
   1e2d4:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
   1e2db:	0f 8f b6 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e2e1:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   1e2e8:	0f 84 91 05 00 00    	je     1e87f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
   1e2ee:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
   1e2f5:	0f 8f 9c 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e2fb:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   1e302:	0f 84 af 05 00 00    	je     1e8b7 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
   1e308:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
   1e30f:	0f 8f 82 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e315:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   1e31c:	0f 84 9d 03 00 00    	je     1e6bf <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
   1e322:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
   1e329:	0f 8f 68 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e32f:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   1e336:	0f 84 bb 03 00 00    	je     1e6f7 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
   1e33c:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
   1e343:	0f 8f 4e 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e349:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   1e350:	0f 84 99 05 00 00    	je     1e8ef <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
   1e356:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
   1e35d:	0f 8f 34 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e363:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   1e36a:	0f 84 bf 03 00 00    	je     1e72f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
   1e370:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
   1e377:	0f 8f 1a 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e37d:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   1e384:	0f 84 9d 05 00 00    	je     1e927 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
   1e38a:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
   1e391:	0f 8f 00 06 00 00    	jg     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e397:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
   1e39e:	0f 84 bb 05 00 00    	je     1e95f <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
   1e3a4:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
   1e3ab:	0f 84 b6 03 00 00    	je     1e767 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
   1e3b1:	e9 e1 05 00 00       	jmp    1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e3b6:	8b 45 cc             	mov    -0x34(%rbp),%eax
   1e3b9:	83 c0 0d             	add    $0xd,%eax
   1e3bc:	83 f8 0c             	cmp    $0xc,%eax
   1e3bf:	0f 87 d2 05 00 00    	ja     1e997 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
   1e3c5:	89 c0                	mov    %eax,%eax
   1e3c7:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1e3ce:	00 
   1e3cf:	48 8d 05 8a c2 00 00 	lea    0xc28a(%rip),%rax        # 2a660 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   1e3d6:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1e3d9:	48 98                	cltq
   1e3db:	48 8d 15 7e c2 00 00 	lea    0xc27e(%rip),%rdx        # 2a660 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
   1e3e2:	48 01 d0             	add    %rdx,%rax
   1e3e5:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   1e3e7:	bf 28 00 00 00       	mov    $0x28,%edi
   1e3ec:	e8 df 6c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e3f1:	48 89 c3             	mov    %rax,%rbx
   1e3f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e3f8:	48 89 c6             	mov    %rax,%rsi
   1e3fb:	48 89 df             	mov    %rbx,%rdi
   1e3fe:	e8 c3 95 fe ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
   1e403:	48 8d 05 aa e1 fe ff 	lea    -0x11e56(%rip),%rax        # c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
   1e40a:	48 89 c2             	mov    %rax,%rdx
   1e40d:	48 8d 05 d4 98 01 00 	lea    0x198d4(%rip),%rax        # 37ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e414:	48 89 c6             	mov    %rax,%rsi
   1e417:	48 89 df             	mov    %rbx,%rdi
   1e41a:	e8 61 6f fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   1e41f:	bf 28 00 00 00       	mov    $0x28,%edi
   1e424:	e8 a7 6c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e429:	48 89 c3             	mov    %rax,%rbx
   1e42c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e430:	48 89 c6             	mov    %rax,%rsi
   1e433:	48 89 df             	mov    %rbx,%rdi
   1e436:	e8 5d 96 fe ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
   1e43b:	48 8d 05 02 e1 fe ff 	lea    -0x11efe(%rip),%rax        # c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
   1e442:	48 89 c2             	mov    %rax,%rdx
   1e445:	48 8d 05 84 98 01 00 	lea    0x19884(%rip),%rax        # 37cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e44c:	48 89 c6             	mov    %rax,%rsi
   1e44f:	48 89 df             	mov    %rbx,%rdi
   1e452:	e8 29 6f fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   1e457:	bf 28 00 00 00       	mov    $0x28,%edi
   1e45c:	e8 6f 6c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e461:	48 89 c3             	mov    %rax,%rbx
   1e464:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e468:	48 89 c6             	mov    %rax,%rsi
   1e46b:	48 89 df             	mov    %rbx,%rdi
   1e46e:	e8 f7 96 fe ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
   1e473:	48 8d 05 5a e0 fe ff 	lea    -0x11fa6(%rip),%rax        # c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>
   1e47a:	48 89 c2             	mov    %rax,%rdx
   1e47d:	48 8d 05 34 98 01 00 	lea    0x19834(%rip),%rax        # 37cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e484:	48 89 c6             	mov    %rax,%rsi
   1e487:	48 89 df             	mov    %rbx,%rdi
   1e48a:	e8 f1 6e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   1e48f:	bf 28 00 00 00       	mov    $0x28,%edi
   1e494:	e8 37 6c fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e499:	48 89 c3             	mov    %rax,%rbx
   1e49c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e4a0:	48 89 c6             	mov    %rax,%rsi
   1e4a3:	48 89 df             	mov    %rbx,%rdi
   1e4a6:	e8 91 97 fe ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
   1e4ab:	48 8d 05 b2 df fe ff 	lea    -0x1204e(%rip),%rax        # c464 <_ZN2vk15DeviceLostErrorD1Ev>
   1e4b2:	48 89 c2             	mov    %rax,%rdx
   1e4b5:	48 8d 05 e4 97 01 00 	lea    0x197e4(%rip),%rax        # 37ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e4bc:	48 89 c6             	mov    %rax,%rsi
   1e4bf:	48 89 df             	mov    %rbx,%rdi
   1e4c2:	e8 b9 6e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   1e4c7:	bf 28 00 00 00       	mov    $0x28,%edi
   1e4cc:	e8 ff 6b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e4d1:	48 89 c3             	mov    %rax,%rbx
   1e4d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e4d8:	48 89 c6             	mov    %rax,%rsi
   1e4db:	48 89 df             	mov    %rbx,%rdi
   1e4de:	e8 2b 98 fe ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
   1e4e3:	48 8d 05 0a df fe ff 	lea    -0x120f6(%rip),%rax        # c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>
   1e4ea:	48 89 c2             	mov    %rax,%rdx
   1e4ed:	48 8d 05 94 97 01 00 	lea    0x19794(%rip),%rax        # 37c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e4f4:	48 89 c6             	mov    %rax,%rsi
   1e4f7:	48 89 df             	mov    %rbx,%rdi
   1e4fa:	e8 81 6e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   1e4ff:	bf 28 00 00 00       	mov    $0x28,%edi
   1e504:	e8 c7 6b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e509:	48 89 c3             	mov    %rax,%rbx
   1e50c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e510:	48 89 c6             	mov    %rax,%rsi
   1e513:	48 89 df             	mov    %rbx,%rdi
   1e516:	e8 c5 98 fe ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
   1e51b:	48 8d 05 62 de fe ff 	lea    -0x1219e(%rip),%rax        # c384 <_ZN2vk20LayerNotPresentErrorD1Ev>
   1e522:	48 89 c2             	mov    %rax,%rdx
   1e525:	48 8d 05 44 97 01 00 	lea    0x19744(%rip),%rax        # 37c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e52c:	48 89 c6             	mov    %rax,%rsi
   1e52f:	48 89 df             	mov    %rbx,%rdi
   1e532:	e8 49 6e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   1e537:	bf 28 00 00 00       	mov    $0x28,%edi
   1e53c:	e8 8f 6b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e541:	48 89 c3             	mov    %rax,%rbx
   1e544:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e548:	48 89 c6             	mov    %rax,%rsi
   1e54b:	48 89 df             	mov    %rbx,%rdi
   1e54e:	e8 5f 99 fe ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
   1e553:	48 8d 05 ba dd fe ff 	lea    -0x12246(%rip),%rax        # c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
   1e55a:	48 89 c2             	mov    %rax,%rdx
   1e55d:	48 8d 05 f4 96 01 00 	lea    0x196f4(%rip),%rax        # 37c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e564:	48 89 c6             	mov    %rax,%rsi
   1e567:	48 89 df             	mov    %rbx,%rdi
   1e56a:	e8 11 6e fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   1e56f:	bf 28 00 00 00       	mov    $0x28,%edi
   1e574:	e8 57 6b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e579:	48 89 c3             	mov    %rax,%rbx
   1e57c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e580:	48 89 c6             	mov    %rax,%rsi
   1e583:	48 89 df             	mov    %rbx,%rdi
   1e586:	e8 f9 99 fe ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
   1e58b:	48 8d 05 12 dd fe ff 	lea    -0x122ee(%rip),%rax        # c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>
   1e592:	48 89 c2             	mov    %rax,%rdx
   1e595:	48 8d 05 a4 96 01 00 	lea    0x196a4(%rip),%rax        # 37c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e59c:	48 89 c6             	mov    %rax,%rsi
   1e59f:	48 89 df             	mov    %rbx,%rdi
   1e5a2:	e8 d9 6d fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   1e5a7:	bf 28 00 00 00       	mov    $0x28,%edi
   1e5ac:	e8 1f 6b fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e5b1:	48 89 c3             	mov    %rax,%rbx
   1e5b4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e5b8:	48 89 c6             	mov    %rax,%rsi
   1e5bb:	48 89 df             	mov    %rbx,%rdi
   1e5be:	e8 93 9a fe ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
   1e5c3:	48 8d 05 6a dc fe ff 	lea    -0x12396(%rip),%rax        # c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>
   1e5ca:	48 89 c2             	mov    %rax,%rdx
   1e5cd:	48 8d 05 54 96 01 00 	lea    0x19654(%rip),%rax        # 37c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e5d4:	48 89 c6             	mov    %rax,%rsi
   1e5d7:	48 89 df             	mov    %rbx,%rdi
   1e5da:	e8 a1 6d fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   1e5df:	bf 28 00 00 00       	mov    $0x28,%edi
   1e5e4:	e8 e7 6a fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e5e9:	48 89 c3             	mov    %rax,%rbx
   1e5ec:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e5f0:	48 89 c6             	mov    %rax,%rsi
   1e5f3:	48 89 df             	mov    %rbx,%rdi
   1e5f6:	e8 2d 9b fe ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
   1e5fb:	48 8d 05 c2 db fe ff 	lea    -0x1243e(%rip),%rax        # c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>
   1e602:	48 89 c2             	mov    %rax,%rdx
   1e605:	48 8d 05 04 96 01 00 	lea    0x19604(%rip),%rax        # 37c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e60c:	48 89 c6             	mov    %rax,%rsi
   1e60f:	48 89 df             	mov    %rbx,%rdi
   1e612:	e8 69 6d fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   1e617:	bf 28 00 00 00       	mov    $0x28,%edi
   1e61c:	e8 af 6a fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e621:	48 89 c3             	mov    %rax,%rbx
   1e624:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e628:	48 89 c6             	mov    %rax,%rsi
   1e62b:	48 89 df             	mov    %rbx,%rdi
   1e62e:	e8 c7 9b fe ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
   1e633:	48 8d 05 1a db fe ff 	lea    -0x124e6(%rip),%rax        # c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>
   1e63a:	48 89 c2             	mov    %rax,%rdx
   1e63d:	48 8d 05 b4 95 01 00 	lea    0x195b4(%rip),%rax        # 37bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e644:	48 89 c6             	mov    %rax,%rsi
   1e647:	48 89 df             	mov    %rbx,%rdi
   1e64a:	e8 31 6d fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   1e64f:	bf 28 00 00 00       	mov    $0x28,%edi
   1e654:	e8 77 6a fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e659:	48 89 c3             	mov    %rax,%rbx
   1e65c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e660:	48 89 c6             	mov    %rax,%rsi
   1e663:	48 89 df             	mov    %rbx,%rdi
   1e666:	e8 61 9c fe ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
   1e66b:	48 8d 05 72 da fe ff 	lea    -0x1258e(%rip),%rax        # c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>
   1e672:	48 89 c2             	mov    %rax,%rdx
   1e675:	48 8d 05 64 95 01 00 	lea    0x19564(%rip),%rax        # 37be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e67c:	48 89 c6             	mov    %rax,%rsi
   1e67f:	48 89 df             	mov    %rbx,%rdi
   1e682:	e8 f9 6c fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   1e687:	bf 28 00 00 00       	mov    $0x28,%edi
   1e68c:	e8 3f 6a fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e691:	48 89 c3             	mov    %rax,%rbx
   1e694:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e698:	48 89 c6             	mov    %rax,%rsi
   1e69b:	48 89 df             	mov    %rbx,%rdi
   1e69e:	e8 fb 9c fe ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
   1e6a3:	48 8d 05 ca d9 fe ff 	lea    -0x12636(%rip),%rax        # c074 <_ZN2vk12UnknownErrorD1Ev>
   1e6aa:	48 89 c2             	mov    %rax,%rdx
   1e6ad:	48 8d 05 14 95 01 00 	lea    0x19514(%rip),%rax        # 37bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e6b4:	48 89 c6             	mov    %rax,%rsi
   1e6b7:	48 89 df             	mov    %rbx,%rdi
   1e6ba:	e8 c1 6c fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   1e6bf:	bf 28 00 00 00       	mov    $0x28,%edi
   1e6c4:	e8 07 6a fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e6c9:	48 89 c3             	mov    %rax,%rbx
   1e6cc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e6d0:	48 89 c6             	mov    %rax,%rsi
   1e6d3:	48 89 df             	mov    %rbx,%rdi
   1e6d6:	e8 95 9d fe ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
   1e6db:	48 8d 05 22 d9 fe ff 	lea    -0x126de(%rip),%rax        # c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
   1e6e2:	48 89 c2             	mov    %rax,%rdx
   1e6e5:	48 8d 05 c4 94 01 00 	lea    0x194c4(%rip),%rax        # 37bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e6ec:	48 89 c6             	mov    %rax,%rsi
   1e6ef:	48 89 df             	mov    %rbx,%rdi
   1e6f2:	e8 89 6c fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   1e6f7:	bf 28 00 00 00       	mov    $0x28,%edi
   1e6fc:	e8 cf 69 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e701:	48 89 c3             	mov    %rax,%rbx
   1e704:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e708:	48 89 c6             	mov    %rax,%rsi
   1e70b:	48 89 df             	mov    %rbx,%rdi
   1e70e:	e8 2f 9e fe ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
   1e713:	48 8d 05 7a d8 fe ff 	lea    -0x12786(%rip),%rax        # bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
   1e71a:	48 89 c2             	mov    %rax,%rdx
   1e71d:	48 8d 05 74 94 01 00 	lea    0x19474(%rip),%rax        # 37b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e724:	48 89 c6             	mov    %rax,%rsi
   1e727:	48 89 df             	mov    %rbx,%rdi
   1e72a:	e8 51 6c fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   1e72f:	bf 28 00 00 00       	mov    $0x28,%edi
   1e734:	e8 97 69 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e739:	48 89 c3             	mov    %rax,%rbx
   1e73c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e740:	48 89 c6             	mov    %rax,%rsi
   1e743:	48 89 df             	mov    %rbx,%rdi
   1e746:	e8 c9 9e fe ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
   1e74b:	48 8d 05 d2 d7 fe ff 	lea    -0x1282e(%rip),%rax        # bf24 <_ZN2vk18FragmentationErrorD1Ev>
   1e752:	48 89 c2             	mov    %rax,%rdx
   1e755:	48 8d 05 24 94 01 00 	lea    0x19424(%rip),%rax        # 37b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e75c:	48 89 c6             	mov    %rax,%rsi
   1e75f:	48 89 df             	mov    %rbx,%rdi
   1e762:	e8 19 6c fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   1e767:	bf 28 00 00 00       	mov    $0x28,%edi
   1e76c:	e8 5f 69 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e771:	48 89 c3             	mov    %rax,%rbx
   1e774:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e778:	48 89 c6             	mov    %rax,%rsi
   1e77b:	48 89 df             	mov    %rbx,%rdi
   1e77e:	e8 63 9f fe ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
   1e783:	48 8d 05 2a d7 fe ff 	lea    -0x128d6(%rip),%rax        # beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
   1e78a:	48 89 c2             	mov    %rax,%rdx
   1e78d:	48 8d 05 d4 93 01 00 	lea    0x193d4(%rip),%rax        # 37b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e794:	48 89 c6             	mov    %rax,%rsi
   1e797:	48 89 df             	mov    %rbx,%rdi
   1e79a:	e8 e1 6b fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   1e79f:	bf 28 00 00 00       	mov    $0x28,%edi
   1e7a4:	e8 27 69 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e7a9:	48 89 c3             	mov    %rax,%rbx
   1e7ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e7b0:	48 89 c6             	mov    %rax,%rsi
   1e7b3:	48 89 df             	mov    %rbx,%rdi
   1e7b6:	e8 fd 9f fe ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
   1e7bb:	48 8d 05 82 d6 fe ff 	lea    -0x1297e(%rip),%rax        # be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
   1e7c2:	48 89 c2             	mov    %rax,%rdx
   1e7c5:	48 8d 05 84 93 01 00 	lea    0x19384(%rip),%rax        # 37b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e7cc:	48 89 c6             	mov    %rax,%rsi
   1e7cf:	48 89 df             	mov    %rbx,%rdi
   1e7d2:	e8 a9 6b fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   1e7d7:	bf 28 00 00 00       	mov    $0x28,%edi
   1e7dc:	e8 ef 68 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e7e1:	48 89 c3             	mov    %rax,%rbx
   1e7e4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e7e8:	48 89 c6             	mov    %rax,%rsi
   1e7eb:	48 89 df             	mov    %rbx,%rdi
   1e7ee:	e8 97 a0 fe ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
   1e7f3:	48 8d 05 da d5 fe ff 	lea    -0x12a26(%rip),%rax        # bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
   1e7fa:	48 89 c2             	mov    %rax,%rdx
   1e7fd:	48 8d 05 34 93 01 00 	lea    0x19334(%rip),%rax        # 37b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e804:	48 89 c6             	mov    %rax,%rsi
   1e807:	48 89 df             	mov    %rbx,%rdi
   1e80a:	e8 71 6b fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   1e80f:	bf 28 00 00 00       	mov    $0x28,%edi
   1e814:	e8 b7 68 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e819:	48 89 c3             	mov    %rax,%rbx
   1e81c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e820:	48 89 c6             	mov    %rax,%rsi
   1e823:	48 89 df             	mov    %rbx,%rdi
   1e826:	e8 31 a1 fe ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
   1e82b:	48 8d 05 32 d5 fe ff 	lea    -0x12ace(%rip),%rax        # bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>
   1e832:	48 89 c2             	mov    %rax,%rdx
   1e835:	48 8d 05 e4 92 01 00 	lea    0x192e4(%rip),%rax        # 37b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e83c:	48 89 c6             	mov    %rax,%rsi
   1e83f:	48 89 df             	mov    %rbx,%rdi
   1e842:	e8 39 6b fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   1e847:	bf 28 00 00 00       	mov    $0x28,%edi
   1e84c:	e8 7f 68 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e851:	48 89 c3             	mov    %rax,%rbx
   1e854:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e858:	48 89 c6             	mov    %rax,%rsi
   1e85b:	48 89 df             	mov    %rbx,%rdi
   1e85e:	e8 cb a1 fe ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
   1e863:	48 8d 05 8a d4 fe ff 	lea    -0x12b76(%rip),%rax        # bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
   1e86a:	48 89 c2             	mov    %rax,%rdx
   1e86d:	48 8d 05 94 92 01 00 	lea    0x19294(%rip),%rax        # 37b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e874:	48 89 c6             	mov    %rax,%rsi
   1e877:	48 89 df             	mov    %rbx,%rdi
   1e87a:	e8 01 6b fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   1e87f:	bf 28 00 00 00       	mov    $0x28,%edi
   1e884:	e8 47 68 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e889:	48 89 c3             	mov    %rax,%rbx
   1e88c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e890:	48 89 c6             	mov    %rax,%rsi
   1e893:	48 89 df             	mov    %rbx,%rdi
   1e896:	e8 65 a2 fe ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
   1e89b:	48 8d 05 e2 d3 fe ff 	lea    -0x12c1e(%rip),%rax        # bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
   1e8a2:	48 89 c2             	mov    %rax,%rdx
   1e8a5:	48 8d 05 44 92 01 00 	lea    0x19244(%rip),%rax        # 37af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e8ac:	48 89 c6             	mov    %rax,%rsi
   1e8af:	48 89 df             	mov    %rbx,%rdi
   1e8b2:	e8 c9 6a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   1e8b7:	bf 28 00 00 00       	mov    $0x28,%edi
   1e8bc:	e8 0f 68 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e8c1:	48 89 c3             	mov    %rax,%rbx
   1e8c4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e8c8:	48 89 c6             	mov    %rax,%rsi
   1e8cb:	48 89 df             	mov    %rbx,%rdi
   1e8ce:	e8 ff a2 fe ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
   1e8d3:	48 8d 05 3a d3 fe ff 	lea    -0x12cc6(%rip),%rax        # bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>
   1e8da:	48 89 c2             	mov    %rax,%rdx
   1e8dd:	48 8d 05 f4 91 01 00 	lea    0x191f4(%rip),%rax        # 37ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e8e4:	48 89 c6             	mov    %rax,%rsi
   1e8e7:	48 89 df             	mov    %rbx,%rdi
   1e8ea:	e8 91 6a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   1e8ef:	bf 28 00 00 00       	mov    $0x28,%edi
   1e8f4:	e8 d7 67 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e8f9:	48 89 c3             	mov    %rax,%rbx
   1e8fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e900:	48 89 c6             	mov    %rax,%rsi
   1e903:	48 89 df             	mov    %rbx,%rdi
   1e906:	e8 99 a3 fe ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
   1e90b:	48 8d 05 92 d2 fe ff 	lea    -0x12d6e(%rip),%rax        # bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
   1e912:	48 89 c2             	mov    %rax,%rdx
   1e915:	48 8d 05 a4 91 01 00 	lea    0x191a4(%rip),%rax        # 37ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e91c:	48 89 c6             	mov    %rax,%rsi
   1e91f:	48 89 df             	mov    %rbx,%rdi
   1e922:	e8 59 6a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   1e927:	bf 28 00 00 00       	mov    $0x28,%edi
   1e92c:	e8 9f 67 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e931:	48 89 c3             	mov    %rax,%rbx
   1e934:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e938:	48 89 c6             	mov    %rax,%rsi
   1e93b:	48 89 df             	mov    %rbx,%rdi
   1e93e:	e8 33 a4 fe ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
   1e943:	48 8d 05 ea d1 fe ff 	lea    -0x12e16(%rip),%rax        # bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>
   1e94a:	48 89 c2             	mov    %rax,%rdx
   1e94d:	48 8d 05 54 91 01 00 	lea    0x19154(%rip),%rax        # 37aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e954:	48 89 c6             	mov    %rax,%rsi
   1e957:	48 89 df             	mov    %rbx,%rdi
   1e95a:	e8 21 6a fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   1e95f:	bf 28 00 00 00       	mov    $0x28,%edi
   1e964:	e8 67 67 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e969:	48 89 c3             	mov    %rax,%rbx
   1e96c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e970:	48 89 c6             	mov    %rax,%rsi
   1e973:	48 89 df             	mov    %rbx,%rdi
   1e976:	e8 cd a4 fe ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
   1e97b:	48 8d 05 42 d1 fe ff 	lea    -0x12ebe(%rip),%rax        # bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
   1e982:	48 89 c2             	mov    %rax,%rdx
   1e985:	48 8d 05 04 91 01 00 	lea    0x19104(%rip),%rax        # 37a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   1e98c:	48 89 c6             	mov    %rax,%rsi
   1e98f:	48 89 df             	mov    %rbx,%rdi
   1e992:	e8 e9 69 fe ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
   1e997:	bf 28 00 00 00       	mov    $0x28,%edi
   1e99c:	e8 2f 67 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   1e9a1:	48 89 c3             	mov    %rax,%rbx
   1e9a4:	8b 45 cc             	mov    -0x34(%rbp),%eax
   1e9a7:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
   1e9aa:	0f b6 05 a7 99 01 00 	movzbl 0x199a7(%rip),%eax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
   1e9b1:	84 c0                	test   %al,%al
   1e9b3:	0f 94 c0             	sete   %al
   1e9b6:	84 c0                	test   %al,%al
   1e9b8:	74 4a                	je     1ea04 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   1e9ba:	48 8d 05 97 99 01 00 	lea    0x19997(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
   1e9c1:	48 89 c7             	mov    %rax,%rdi
   1e9c4:	e8 f7 69 fe ff       	call   53c0 <__cxa_guard_acquire@plt>
   1e9c9:	85 c0                	test   %eax,%eax
   1e9cb:	0f 95 c0             	setne  %al
   1e9ce:	84 c0                	test   %al,%al
   1e9d0:	74 32                	je     1ea04 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
   1e9d2:	48 8d 05 1f 98 01 00 	lea    0x1981f(%rip),%rax        # 381f8 <__dso_handle>
   1e9d9:	48 89 c2             	mov    %rax,%rdx
   1e9dc:	48 8d 05 1d 98 01 00 	lea    0x1981d(%rip),%rax        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
   1e9e3:	48 89 c6             	mov    %rax,%rsi
   1e9e6:	48 8d 05 37 dc fe ff 	lea    -0x123c9(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
   1e9ed:	48 89 c7             	mov    %rax,%rdi
   1e9f0:	e8 db 67 fe ff       	call   51d0 <__cxa_atexit@plt>
   1e9f5:	48 8d 05 5c 99 01 00 	lea    0x1995c(%rip),%rax        # 38358 <_ZGVZN2vk13errorCategoryEvE8instance>
   1e9fc:	48 89 c7             	mov    %rax,%rdi
   1e9ff:	e8 fc 66 fe ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
   1ea04:	48 8d 15 f5 97 01 00 	lea    0x197f5(%rip),%rdx        # 38200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
   1ea0b:	8b 4d ec             	mov    -0x14(%rbp),%ecx
   1ea0e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1ea12:	89 ce                	mov    %ecx,%esi
   1ea14:	48 89 c7             	mov    %rax,%rdi
   1ea17:	e8 ec 78 fe ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
   1ea1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ea20:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
   1ea24:	48 89 c6             	mov    %rax,%rsi
   1ea27:	48 89 d7             	mov    %rdx,%rdi
   1ea2a:	89 f1                	mov    %esi,%ecx
   1ea2c:	48 89 d0             	mov    %rdx,%rax
   1ea2f:	89 ce                	mov    %ecx,%esi
   1ea31:	48 89 c2             	mov    %rax,%rdx
   1ea34:	48 89 df             	mov    %rbx,%rdi
   1ea37:	e8 d4 8d fe ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
   1ea3c:	48 8d 05 03 8f fe ff 	lea    -0x170fd(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
   1ea43:	48 89 c2             	mov    %rax,%rdx
   1ea46:	48 8d 05 b3 92 01 00 	lea    0x192b3(%rip),%rax        # 37d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
   1ea4d:	48 89 c6             	mov    %rax,%rsi
   1ea50:	48 89 df             	mov    %rbx,%rdi
   1ea53:	e8 28 69 fe ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
   1ea58:	49 89 c4             	mov    %rax,%r12
   1ea5b:	48 89 df             	mov    %rbx,%rdi
   1ea5e:	e8 ed 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ea63:	4c 89 e0             	mov    %r12,%rax
   1ea66:	48 89 c7             	mov    %rax,%rdi
   1ea69:	e8 32 69 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
   1ea6e:	49 89 c4             	mov    %rax,%r12
   1ea71:	48 89 df             	mov    %rbx,%rdi
   1ea74:	e8 d7 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ea79:	4c 89 e0             	mov    %r12,%rax
   1ea7c:	48 89 c7             	mov    %rax,%rdi
   1ea7f:	e8 1c 69 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
   1ea84:	49 89 c4             	mov    %rax,%r12
   1ea87:	48 89 df             	mov    %rbx,%rdi
   1ea8a:	e8 c1 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ea8f:	4c 89 e0             	mov    %r12,%rax
   1ea92:	48 89 c7             	mov    %rax,%rdi
   1ea95:	e8 06 69 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
   1ea9a:	49 89 c4             	mov    %rax,%r12
   1ea9d:	48 89 df             	mov    %rbx,%rdi
   1eaa0:	e8 ab 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eaa5:	4c 89 e0             	mov    %r12,%rax
   1eaa8:	48 89 c7             	mov    %rax,%rdi
   1eaab:	e8 f0 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
   1eab0:	49 89 c4             	mov    %rax,%r12
   1eab3:	48 89 df             	mov    %rbx,%rdi
   1eab6:	e8 95 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eabb:	4c 89 e0             	mov    %r12,%rax
   1eabe:	48 89 c7             	mov    %rax,%rdi
   1eac1:	e8 da 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
   1eac6:	49 89 c4             	mov    %rax,%r12
   1eac9:	48 89 df             	mov    %rbx,%rdi
   1eacc:	e8 7f 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ead1:	4c 89 e0             	mov    %r12,%rax
   1ead4:	48 89 c7             	mov    %rax,%rdi
   1ead7:	e8 c4 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
   1eadc:	49 89 c4             	mov    %rax,%r12
   1eadf:	48 89 df             	mov    %rbx,%rdi
   1eae2:	e8 69 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eae7:	4c 89 e0             	mov    %r12,%rax
   1eaea:	48 89 c7             	mov    %rax,%rdi
   1eaed:	e8 ae 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
   1eaf2:	49 89 c4             	mov    %rax,%r12
   1eaf5:	48 89 df             	mov    %rbx,%rdi
   1eaf8:	e8 53 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eafd:	4c 89 e0             	mov    %r12,%rax
   1eb00:	48 89 c7             	mov    %rax,%rdi
   1eb03:	e8 98 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
   1eb08:	49 89 c4             	mov    %rax,%r12
   1eb0b:	48 89 df             	mov    %rbx,%rdi
   1eb0e:	e8 3d 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eb13:	4c 89 e0             	mov    %r12,%rax
   1eb16:	48 89 c7             	mov    %rax,%rdi
   1eb19:	e8 82 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
   1eb1e:	49 89 c4             	mov    %rax,%r12
   1eb21:	48 89 df             	mov    %rbx,%rdi
   1eb24:	e8 27 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eb29:	4c 89 e0             	mov    %r12,%rax
   1eb2c:	48 89 c7             	mov    %rax,%rdi
   1eb2f:	e8 6c 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
   1eb34:	49 89 c4             	mov    %rax,%r12
   1eb37:	48 89 df             	mov    %rbx,%rdi
   1eb3a:	e8 11 66 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eb3f:	4c 89 e0             	mov    %r12,%rax
   1eb42:	48 89 c7             	mov    %rax,%rdi
   1eb45:	e8 56 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
   1eb4a:	49 89 c4             	mov    %rax,%r12
   1eb4d:	48 89 df             	mov    %rbx,%rdi
   1eb50:	e8 fb 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eb55:	4c 89 e0             	mov    %r12,%rax
   1eb58:	48 89 c7             	mov    %rax,%rdi
   1eb5b:	e8 40 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
   1eb60:	49 89 c4             	mov    %rax,%r12
   1eb63:	48 89 df             	mov    %rbx,%rdi
   1eb66:	e8 e5 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eb6b:	4c 89 e0             	mov    %r12,%rax
   1eb6e:	48 89 c7             	mov    %rax,%rdi
   1eb71:	e8 2a 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
   1eb76:	49 89 c4             	mov    %rax,%r12
   1eb79:	48 89 df             	mov    %rbx,%rdi
   1eb7c:	e8 cf 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eb81:	4c 89 e0             	mov    %r12,%rax
   1eb84:	48 89 c7             	mov    %rax,%rdi
   1eb87:	e8 14 68 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
   1eb8c:	49 89 c4             	mov    %rax,%r12
   1eb8f:	48 89 df             	mov    %rbx,%rdi
   1eb92:	e8 b9 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1eb97:	4c 89 e0             	mov    %r12,%rax
   1eb9a:	48 89 c7             	mov    %rax,%rdi
   1eb9d:	e8 fe 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
   1eba2:	49 89 c4             	mov    %rax,%r12
   1eba5:	48 89 df             	mov    %rbx,%rdi
   1eba8:	e8 a3 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ebad:	4c 89 e0             	mov    %r12,%rax
   1ebb0:	48 89 c7             	mov    %rax,%rdi
   1ebb3:	e8 e8 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
   1ebb8:	49 89 c4             	mov    %rax,%r12
   1ebbb:	48 89 df             	mov    %rbx,%rdi
   1ebbe:	e8 8d 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ebc3:	4c 89 e0             	mov    %r12,%rax
   1ebc6:	48 89 c7             	mov    %rax,%rdi
   1ebc9:	e8 d2 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
   1ebce:	49 89 c4             	mov    %rax,%r12
   1ebd1:	48 89 df             	mov    %rbx,%rdi
   1ebd4:	e8 77 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ebd9:	4c 89 e0             	mov    %r12,%rax
   1ebdc:	48 89 c7             	mov    %rax,%rdi
   1ebdf:	e8 bc 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
   1ebe4:	49 89 c4             	mov    %rax,%r12
   1ebe7:	48 89 df             	mov    %rbx,%rdi
   1ebea:	e8 61 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ebef:	4c 89 e0             	mov    %r12,%rax
   1ebf2:	48 89 c7             	mov    %rax,%rdi
   1ebf5:	e8 a6 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
   1ebfa:	49 89 c4             	mov    %rax,%r12
   1ebfd:	48 89 df             	mov    %rbx,%rdi
   1ec00:	e8 4b 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ec05:	4c 89 e0             	mov    %r12,%rax
   1ec08:	48 89 c7             	mov    %rax,%rdi
   1ec0b:	e8 90 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
   1ec10:	49 89 c4             	mov    %rax,%r12
   1ec13:	48 89 df             	mov    %rbx,%rdi
   1ec16:	e8 35 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ec1b:	4c 89 e0             	mov    %r12,%rax
   1ec1e:	48 89 c7             	mov    %rax,%rdi
   1ec21:	e8 7a 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
   1ec26:	49 89 c4             	mov    %rax,%r12
   1ec29:	48 89 df             	mov    %rbx,%rdi
   1ec2c:	e8 1f 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ec31:	4c 89 e0             	mov    %r12,%rax
   1ec34:	48 89 c7             	mov    %rax,%rdi
   1ec37:	e8 64 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
   1ec3c:	49 89 c4             	mov    %rax,%r12
   1ec3f:	48 89 df             	mov    %rbx,%rdi
   1ec42:	e8 09 65 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ec47:	4c 89 e0             	mov    %r12,%rax
   1ec4a:	48 89 c7             	mov    %rax,%rdi
   1ec4d:	e8 4e 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
   1ec52:	49 89 c4             	mov    %rax,%r12
   1ec55:	48 89 df             	mov    %rbx,%rdi
   1ec58:	e8 f3 64 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ec5d:	4c 89 e0             	mov    %r12,%rax
   1ec60:	48 89 c7             	mov    %rax,%rdi
   1ec63:	e8 38 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
   1ec68:	49 89 c4             	mov    %rax,%r12
   1ec6b:	48 89 df             	mov    %rbx,%rdi
   1ec6e:	e8 dd 64 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ec73:	4c 89 e0             	mov    %r12,%rax
   1ec76:	48 89 c7             	mov    %rax,%rdi
   1ec79:	e8 22 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
   1ec7e:	49 89 c4             	mov    %rax,%r12
   1ec81:	48 89 df             	mov    %rbx,%rdi
   1ec84:	e8 c7 64 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ec89:	4c 89 e0             	mov    %r12,%rax
   1ec8c:	48 89 c7             	mov    %rax,%rdi
   1ec8f:	e8 0c 67 fe ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
   1ec94:	49 89 c4             	mov    %rax,%r12
   1ec97:	48 89 df             	mov    %rbx,%rdi
   1ec9a:	e8 b1 64 fe ff       	call   5150 <__cxa_free_exception@plt>
   1ec9f:	4c 89 e0             	mov    %r12,%rax
   1eca2:	48 89 c7             	mov    %rax,%rdi
   1eca5:	e8 f6 66 fe ff       	call   53a0 <_Unwind_Resume@plt>

000000000001ecaa <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:

VKAPI_ATTR VkBool32 VKAPI_CALL
debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
              [[maybe_unused]] VkDebugUtilsMessageTypeFlagsEXT messageType,
              const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
              [[maybe_unused]] void *pUserData) {
   1ecaa:	55                   	push   %rbp
   1ecab:	48 89 e5             	mov    %rsp,%rbp
   1ecae:	48 83 ec 20          	sub    $0x20,%rsp
   1ecb2:	89 7d fc             	mov    %edi,-0x4(%rbp)
   1ecb5:	89 75 f8             	mov    %esi,-0x8(%rbp)
   1ecb8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1ecbc:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  if (messageSeverity > VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT) {
   1ecc0:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1ecc3:	83 f8 01             	cmp    $0x1,%eax
   1ecc6:	7e 3c                	jle    1ed04 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x5a>
    std::cerr << '\n' << pCallbackData->pMessage << std::endl;
   1ecc8:	be 0a 00 00 00       	mov    $0xa,%esi
   1eccd:	48 8d 05 6c 95 01 00 	lea    0x1956c(%rip),%rax        # 38240 <_ZSt4cerr@GLIBCXX_3.4>
   1ecd4:	48 89 c7             	mov    %rax,%rdi
   1ecd7:	e8 c4 65 fe ff       	call   52a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
   1ecdc:	48 89 c2             	mov    %rax,%rdx
   1ecdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ece3:	48 8b 40 28          	mov    0x28(%rax),%rax
   1ece7:	48 89 c6             	mov    %rax,%rsi
   1ecea:	48 89 d7             	mov    %rdx,%rdi
   1eced:	e8 1e 65 fe ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   1ecf2:	48 8b 15 a7 92 01 00 	mov    0x192a7(%rip),%rdx        # 37fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
   1ecf9:	48 89 d6             	mov    %rdx,%rsi
   1ecfc:	48 89 c7             	mov    %rax,%rdi
   1ecff:	e8 5c 65 fe ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  }
  return VK_FALSE;
   1ed04:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1ed09:	c9                   	leave
   1ed0a:	c3                   	ret

000000000001ed0b <_ZN4rtvc24validationLayerSupportedEv>:

bool validationLayerSupported() {
   1ed0b:	55                   	push   %rbp
   1ed0c:	48 89 e5             	mov    %rsp,%rbp
   1ed0f:	41 54                	push   %r12
   1ed11:	53                   	push   %rbx
   1ed12:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  auto supportedLayers = vk::enumerateInstanceLayerProperties();
   1ed16:	e8 2b f5 ff ff       	call   1e246 <_ZN2vkL23getDispatchLoaderStaticEv>
   1ed1b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1ed1f:	48 8d 5d b0          	lea    -0x50(%rbp),%rbx
#ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE
  template <typename LayerPropertiesAllocator, typename Dispatch>
  VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE typename ResultValueType<std::vector<VULKAN_HPP_NAMESPACE::LayerProperties, LayerPropertiesAllocator>>::type
                       enumerateInstanceLayerProperties( Dispatch const & d )
  {
    VULKAN_HPP_ASSERT( d.getVkHeaderVersion() == VK_HEADER_VERSION );
   1ed23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ed27:	48 89 c7             	mov    %rax,%rdi
   1ed2a:	e8 23 78 fe ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   1ed2f:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   1ed35:	74 28                	je     1ed5f <_ZN4rtvc24validationLayerSupportedEv+0x54>
   1ed37:	48 8d 05 92 c6 00 00 	lea    0xc692(%rip),%rax        # 2b3d0 <_ZNSt8__detailL19__atomic_spin_countE+0xd2c>
   1ed3e:	48 89 c1             	mov    %rax,%rcx
   1ed41:	ba 68 02 00 00       	mov    $0x268,%edx
   1ed46:	48 8d 05 fb c7 00 00 	lea    0xc7fb(%rip),%rax        # 2b548 <_ZNSt8__detailL19__atomic_spin_countE+0xea4>
   1ed4d:	48 89 c6             	mov    %rax,%rsi
   1ed50:	48 8d 05 19 c8 00 00 	lea    0xc819(%rip),%rax        # 2b570 <_ZNSt8__detailL19__atomic_spin_countE+0xecc>
   1ed57:	48 89 c7             	mov    %rax,%rdi
   1ed5a:	e8 b1 63 fe ff       	call   5110 <__assert_fail@plt>

    std::vector<VULKAN_HPP_NAMESPACE::LayerProperties, LayerPropertiesAllocator> properties;
   1ed5f:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1ed63:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
   1ed67:	66 0f d6 45 a0       	movq   %xmm0,-0x60(%rbp)
    uint32_t                                                                     propertyCount;
    VkResult                                                                     result;
    do
    {
      result = d.vkEnumerateInstanceLayerProperties( &propertyCount, nullptr );
   1ed6c:	48 8d 4d 8c          	lea    -0x74(%rbp),%rcx
   1ed70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ed74:	ba 00 00 00 00       	mov    $0x0,%edx
   1ed79:	48 89 ce             	mov    %rcx,%rsi
   1ed7c:	48 89 c7             	mov    %rax,%rdi
   1ed7f:	e8 5e 07 00 00       	call   1f4e2 <_ZNK2vk20DispatchLoaderStatic34vkEnumerateInstanceLayerPropertiesEPjP17VkLayerProperties>
   1ed84:	89 45 d4             	mov    %eax,-0x2c(%rbp)
      if ( ( result == VK_SUCCESS ) && propertyCount )
   1ed87:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   1ed8b:	75 40                	jne    1edcd <_ZN4rtvc24validationLayerSupportedEv+0xc2>
   1ed8d:	8b 45 8c             	mov    -0x74(%rbp),%eax
   1ed90:	85 c0                	test   %eax,%eax
   1ed92:	74 39                	je     1edcd <_ZN4rtvc24validationLayerSupportedEv+0xc2>
      {
        properties.resize( propertyCount );
   1ed94:	8b 45 8c             	mov    -0x74(%rbp),%eax
   1ed97:	89 c2                	mov    %eax,%edx
   1ed99:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1ed9d:	48 89 d6             	mov    %rdx,%rsi
   1eda0:	48 89 c7             	mov    %rax,%rdi
   1eda3:	e8 78 8c ff ff       	call   17a20 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
        result = d.vkEnumerateInstanceLayerProperties( &propertyCount, reinterpret_cast<VkLayerProperties *>( properties.data() ) );
   1eda8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1edac:	48 89 c7             	mov    %rax,%rdi
   1edaf:	e8 fe 8c ff ff       	call   17ab2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE4dataEv>
   1edb4:	48 89 c2             	mov    %rax,%rdx
   1edb7:	48 8d 4d 8c          	lea    -0x74(%rbp),%rcx
   1edbb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1edbf:	48 89 ce             	mov    %rcx,%rsi
   1edc2:	48 89 c7             	mov    %rax,%rdi
   1edc5:	e8 18 07 00 00       	call   1f4e2 <_ZNK2vk20DispatchLoaderStatic34vkEnumerateInstanceLayerPropertiesEPjP17VkLayerProperties>
   1edca:	89 45 d4             	mov    %eax,-0x2c(%rbp)
      }
    } while ( result == VK_INCOMPLETE );
   1edcd:	83 7d d4 05          	cmpl   $0x5,-0x2c(%rbp)
   1edd1:	74 99                	je     1ed6c <_ZN4rtvc24validationLayerSupportedEv+0x61>
   1edd3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   1edd6:	89 45 d0             	mov    %eax,-0x30(%rbp)
   1edd9:	48 8d 05 c0 c7 00 00 	lea    0xc7c0(%rip),%rax        # 2b5a0 <_ZNSt8__detailL19__atomic_spin_countE+0xefc>
   1ede0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    if ( result != Result::eSuccess )
   1ede4:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
   1ede8:	74 11                	je     1edfb <_ZN4rtvc24validationLayerSupportedEv+0xf0>
      throwResultException( result, message );
   1edea:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1edee:	8b 45 d0             	mov    -0x30(%rbp),%eax
   1edf1:	48 89 d6             	mov    %rdx,%rsi
   1edf4:	89 c7                	mov    %eax,%edi
   1edf6:	e8 58 f4 ff ff       	call   1e253 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
   1edfb:	90                   	nop
    resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::enumerateInstanceLayerProperties" );
    VULKAN_HPP_ASSERT( propertyCount <= properties.size() );
   1edfc:	8b 45 8c             	mov    -0x74(%rbp),%eax
   1edff:	41 89 c4             	mov    %eax,%r12d
   1ee02:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1ee06:	48 89 c7             	mov    %rax,%rdi
   1ee09:	e8 c8 8c ff ff       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1ee0e:	4c 39 e0             	cmp    %r12,%rax
   1ee11:	73 28                	jae    1ee3b <_ZN4rtvc24validationLayerSupportedEv+0x130>
   1ee13:	48 8d 05 b6 c5 00 00 	lea    0xc5b6(%rip),%rax        # 2b3d0 <_ZNSt8__detailL19__atomic_spin_countE+0xd2c>
   1ee1a:	48 89 c1             	mov    %rax,%rcx
   1ee1d:	ba 77 02 00 00       	mov    $0x277,%edx
   1ee22:	48 8d 05 1f c7 00 00 	lea    0xc71f(%rip),%rax        # 2b548 <_ZNSt8__detailL19__atomic_spin_countE+0xea4>
   1ee29:	48 89 c6             	mov    %rax,%rsi
   1ee2c:	48 8d 05 95 c7 00 00 	lea    0xc795(%rip),%rax        # 2b5c8 <_ZNSt8__detailL19__atomic_spin_countE+0xf24>
   1ee33:	48 89 c7             	mov    %rax,%rdi
   1ee36:	e8 d5 62 fe ff       	call   5110 <__assert_fail@plt>
    if ( propertyCount < properties.size() )
   1ee3b:	8b 45 8c             	mov    -0x74(%rbp),%eax
   1ee3e:	41 89 c4             	mov    %eax,%r12d
   1ee41:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1ee45:	48 89 c7             	mov    %rax,%rdi
   1ee48:	e8 89 8c ff ff       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1ee4d:	49 39 c4             	cmp    %rax,%r12
   1ee50:	0f 92 c0             	setb   %al
   1ee53:	84 c0                	test   %al,%al
   1ee55:	74 14                	je     1ee6b <_ZN4rtvc24validationLayerSupportedEv+0x160>
    {
      properties.resize( propertyCount );
   1ee57:	8b 45 8c             	mov    -0x74(%rbp),%eax
   1ee5a:	89 c2                	mov    %eax,%edx
   1ee5c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1ee60:	48 89 d6             	mov    %rdx,%rsi
   1ee63:	48 89 c7             	mov    %rax,%rdi
   1ee66:	e8 b5 8b ff ff       	call   17a20 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
   1ee6b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   1ee6e:	89 45 88             	mov    %eax,-0x78(%rbp)
    ignore( result );
   1ee71:	48 8d 45 88          	lea    -0x78(%rbp),%rax
   1ee75:	48 89 c7             	mov    %rax,%rdi
   1ee78:	e8 5f 1d 00 00       	call   20bdc <_ZN2vk6ignoreINS_6ResultEEEvRKT_>
    return data;
   1ee7d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1ee81:	48 89 c6             	mov    %rax,%rsi
   1ee84:	48 89 df             	mov    %rbx,%rdi
   1ee87:	e8 2c 22 00 00       	call   210b8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EEC1ERKS3_>
   1ee8c:	90                   	nop
    }
    return createResultValueType( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), properties );
  }
   1ee8d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1ee91:	48 89 c7             	mov    %rax,%rdi
   1ee94:	e8 43 8b ff ff       	call   179dc <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    return createResultValueType( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), properties );
   1ee99:	90                   	nop
  for (const auto &supportedLayer : supportedLayers) {
   1ee9a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1ee9e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1eea2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1eea6:	48 89 c7             	mov    %rax,%rdi
   1eea9:	e8 d4 90 ff ff       	call   17f82 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>
   1eeae:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1eeb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1eeb6:	48 89 c7             	mov    %rax,%rdi
   1eeb9:	e8 ea 90 ff ff       	call   17fa8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>
   1eebe:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1eec5:	eb 66                	jmp    1ef2d <_ZN4rtvc24validationLayerSupportedEv+0x222>
  }
   1eec7:	48 89 c3             	mov    %rax,%rbx
   1eeca:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1eece:	48 89 c7             	mov    %rax,%rdi
   1eed1:	e8 06 8b ff ff       	call   179dc <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
   1eed6:	48 89 d8             	mov    %rbx,%rax
   1eed9:	48 89 c7             	mov    %rax,%rdi
   1eedc:	e8 bf 64 fe ff       	call   53a0 <_Unwind_Resume@plt>
   1eee1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   1eee5:	48 89 c7             	mov    %rax,%rdi
   1eee8:	e8 bb 80 ff ff       	call   16fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
   1eeed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (supportedLayer.layerName == validationLayerName) {
   1eef1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1eef5:	48 89 c7             	mov    %rax,%rdi
   1eef8:	e8 bb 1d 00 00       	call   20cb8 <_ZNK2vk14ArrayWrapper1DIcLm256EEcvSt17basic_string_viewIcSt11char_traitsIcEEIcLi0EEEv>
   1eefd:	48 8b 3d 7c 8a 01 00 	mov    0x18a7c(%rip),%rdi        # 37980 <_ZN4rtvc19validationLayerNameE>
   1ef04:	48 8b 35 7d 8a 01 00 	mov    0x18a7d(%rip),%rsi        # 37988 <_ZN4rtvc19validationLayerNameE+0x8>
   1ef0b:	48 89 d1             	mov    %rdx,%rcx
   1ef0e:	48 89 c2             	mov    %rax,%rdx
   1ef11:	e8 e7 1d 00 00       	call   20cfd <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>
   1ef16:	84 c0                	test   %al,%al
   1ef18:	74 07                	je     1ef21 <_ZN4rtvc24validationLayerSupportedEv+0x216>
      return true;
   1ef1a:	bb 01 00 00 00       	mov    $0x1,%ebx
   1ef1f:	eb 2e                	jmp    1ef4f <_ZN4rtvc24validationLayerSupportedEv+0x244>
  for (const auto &supportedLayer : supportedLayers) {
   1ef21:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   1ef25:	48 89 c7             	mov    %rax,%rdi
   1ef28:	e8 a5 90 ff ff       	call   17fd2 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>
   1ef2d:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
   1ef34:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   1ef38:	48 89 d6             	mov    %rdx,%rsi
   1ef3b:	48 89 c7             	mov    %rax,%rdi
   1ef3e:	e8 1c 80 ff ff       	call   16f5f <_ZN9__gnu_cxxeqIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   1ef43:	83 f0 01             	xor    $0x1,%eax
   1ef46:	84 c0                	test   %al,%al
   1ef48:	75 97                	jne    1eee1 <_ZN4rtvc24validationLayerSupportedEv+0x1d6>
    }
  }
  return false;
   1ef4a:	bb 00 00 00 00       	mov    $0x0,%ebx
}
   1ef4f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1ef53:	48 89 c7             	mov    %rax,%rdi
   1ef56:	e8 81 8a ff ff       	call   179dc <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
   1ef5b:	89 d8                	mov    %ebx,%eax
   1ef5d:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp
   1ef61:	5b                   	pop    %rbx
   1ef62:	41 5c                	pop    %r12
   1ef64:	5d                   	pop    %rbp
   1ef65:	c3                   	ret

000000000001ef66 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE>:

vk::raii::Instance makeInstance(const vk::raii::Context &context) {
   1ef66:	55                   	push   %rbp
   1ef67:	48 89 e5             	mov    %rsp,%rbp
   1ef6a:	41 55                	push   %r13
   1ef6c:	41 54                	push   %r12
   1ef6e:	53                   	push   %rbx
   1ef6f:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
   1ef76:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
   1ef7d:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  vk::ApplicationInfo applicationInfo{
   1ef84:	c7 85 60 ff ff ff 00 	movl   $0x0,-0xa0(%rbp)
   1ef8b:	00 00 00 
   1ef8e:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1ef95:	00 00 00 00 
   1ef99:	48 8d 05 81 c6 00 00 	lea    0xc681(%rip),%rax        # 2b621 <_ZNSt8__detailL19__atomic_spin_countE+0xf7d>
   1efa0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1efa7:	c7 85 78 ff ff ff 00 	movl   $0x400000,-0x88(%rbp)
   1efae:	00 40 00 
   1efb1:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
   1efb8:	00 
   1efb9:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
   1efc0:	c7 45 8c 00 00 40 00 	movl   $0x400000,-0x74(%rbp)
      .applicationVersion{VK_MAKE_VERSION(1, 0, 0)},
      .apiVersion{VK_API_VERSION_1_0},
  };

  // Required extensions
  uint32_t requiredExtensionCount = 0;
   1efc7:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
   1efce:	00 00 00 
  auto ppRequiredExtensions =
      glfwGetRequiredInstanceExtensions(&requiredExtensionCount);
   1efd1:	48 8d 85 5c ff ff ff 	lea    -0xa4(%rbp),%rax
   1efd8:	48 89 c7             	mov    %rax,%rdi
   1efdb:	e8 90 61 fe ff       	call   5170 <glfwGetRequiredInstanceExtensions@plt>
   1efe0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  std::vector<const char *> requiredExtensions{requiredExtensionCount};
   1efe4:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   1efea:	89 c3                	mov    %eax,%ebx
   1efec:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
   1eff0:	48 89 c7             	mov    %rax,%rdi
   1eff3:	e8 c6 77 ff ff       	call   167be <_ZNSaIPKcEC1Ev>
   1eff8:	48 8d 55 9f          	lea    -0x61(%rbp),%rdx
   1effc:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1f003:	48 89 de             	mov    %rbx,%rsi
   1f006:	48 89 c7             	mov    %rax,%rdi
   1f009:	e8 64 1d 00 00       	call   20d72 <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>
   1f00e:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
   1f012:	48 89 c7             	mov    %rax,%rdi
   1f015:	e8 cc 77 ff ff       	call   167e6 <_ZNSaIPKcED1Ev>
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
   1f01a:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1f021:	00 
   1f022:	eb 34                	jmp    1f058 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0xf2>
    requiredExtensions[i] = ppRequiredExtensions[i];
   1f024:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f028:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f02f:	00 
   1f030:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f034:	48 01 d0             	add    %rdx,%rax
   1f037:	48 8b 18             	mov    (%rax),%rbx
   1f03a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1f03e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1f045:	48 89 d6             	mov    %rdx,%rsi
   1f048:	48 89 c7             	mov    %rax,%rdi
   1f04b:	e8 98 1d 00 00       	call   20de8 <_ZNSt6vectorIPKcSaIS1_EEixEm>
   1f050:	48 89 18             	mov    %rbx,(%rax)
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
   1f053:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
   1f058:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   1f05e:	89 c0                	mov    %eax,%eax
   1f060:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
   1f064:	72 be                	jb     1f024 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0xbe>
  }

  // Requested layers
  std::vector<const char *> requestedLayers = {
      mangohudLayerName.data(),
  };
   1f066:	48 8d 05 c7 c5 00 00 	lea    0xc5c7(%rip),%rax        # 2b634 <_ZNSt8__detailL19__atomic_spin_countE+0xf90>
   1f06d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1f071:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1f075:	49 89 c4             	mov    %rax,%r12
   1f078:	41 bd 01 00 00 00    	mov    $0x1,%r13d
   1f07e:	48 8d 45 af          	lea    -0x51(%rbp),%rax
   1f082:	48 89 c7             	mov    %rax,%rdi
   1f085:	e8 34 77 ff ff       	call   167be <_ZNSaIPKcEC1Ev>
   1f08a:	48 8d 55 af          	lea    -0x51(%rbp),%rdx
   1f08e:	4c 89 e6             	mov    %r12,%rsi
   1f091:	4c 89 ef             	mov    %r13,%rdi
   1f094:	4c 89 e1             	mov    %r12,%rcx
   1f097:	4c 89 eb             	mov    %r13,%rbx
   1f09a:	48 89 df             	mov    %rbx,%rdi
   1f09d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1f0a4:	48 89 d1             	mov    %rdx,%rcx
   1f0a7:	48 89 fa             	mov    %rdi,%rdx
   1f0aa:	48 89 c7             	mov    %rax,%rdi
   1f0ad:	e8 84 76 ff ff       	call   16736 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
   1f0b2:	48 8d 45 af          	lea    -0x51(%rbp),%rax
   1f0b6:	48 89 c7             	mov    %rax,%rdi
   1f0b9:	e8 28 77 ff ff       	call   167e6 <_ZNSaIPKcED1Ev>

  // Enable validation layers if the application is running in debug mode
  vk::DebugUtilsMessengerCreateInfoEXT *pDebugInfo = nullptr;
   1f0be:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   1f0c5:	00 
  vk::DebugUtilsMessengerCreateInfoEXT debugInfo{};
   1f0c6:	c7 85 f0 fe ff ff 04 	movl   $0x3b9cbe04,-0x110(%rbp)
   1f0cd:	be 9c 3b 
   1f0d0:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
   1f0d7:	00 00 00 00 
   1f0db:	c7 85 00 ff ff ff 00 	movl   $0x0,-0x100(%rbp)
   1f0e2:	00 00 00 
   1f0e5:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
   1f0ec:	00 00 00 
   1f0ef:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
   1f0f6:	00 00 00 
   1f0f9:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
   1f100:	00 00 00 00 
   1f104:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
   1f10b:	00 00 00 00 
  if constexpr (debugMode) {
    if (validationLayerSupported()) {
   1f10f:	e8 f7 fb ff ff       	call   1ed0b <_ZN4rtvc24validationLayerSupportedEv>
   1f114:	84 c0                	test   %al,%al
   1f116:	0f 84 b8 00 00 00    	je     1f1d4 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0x26e>
      requiredExtensions.push_back(VK_EXT_DEBUG_UTILS_EXTENSION_NAME);
   1f11c:	48 8d 05 2b c5 00 00 	lea    0xc52b(%rip),%rax        # 2b64e <_ZNSt8__detailL19__atomic_spin_countE+0xfaa>
   1f123:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1f127:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
   1f12b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1f132:	48 89 d6             	mov    %rdx,%rsi
   1f135:	48 89 c7             	mov    %rax,%rdi
   1f138:	e8 cb 1c 00 00       	call   20e08 <_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_>
      requestedLayers.push_back(validationLayerName.data());
   1f13d:	48 8d 05 3c 88 01 00 	lea    0x1883c(%rip),%rax        # 37980 <_ZN4rtvc19validationLayerNameE>
   1f144:	48 89 c7             	mov    %rax,%rdi
   1f147:	e8 44 1a 00 00       	call   20b90 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
   1f14c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1f150:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   1f154:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1f15b:	48 89 d6             	mov    %rdx,%rsi
   1f15e:	48 89 c7             	mov    %rax,%rdi
   1f161:	e8 a2 1c 00 00       	call   20e08 <_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_>

      debugInfo = makeDebugMessengerInfo();
   1f166:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
   1f16d:	48 89 c7             	mov    %rax,%rdi
   1f170:	e8 c9 01 00 00       	call   1f33e <_ZN4rtvc22makeDebugMessengerInfoEv>
   1f175:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
   1f17c:	48 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%rdx
   1f183:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   1f18a:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
   1f191:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
   1f198:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
   1f19f:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   1f1a6:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
   1f1ad:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
   1f1b4:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
   1f1bb:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   1f1c2:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
      pDebugInfo = &debugInfo;
   1f1c9:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1f1d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    }
  }

  vk::InstanceCreateInfo instanceInfo{
   1f1d4:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1f1d8:	0f 29 85 b0 fe ff ff 	movaps %xmm0,-0x150(%rbp)
   1f1df:	0f 29 85 c0 fe ff ff 	movaps %xmm0,-0x140(%rbp)
   1f1e6:	0f 29 85 d0 fe ff ff 	movaps %xmm0,-0x130(%rbp)
   1f1ed:	0f 29 85 e0 fe ff ff 	movaps %xmm0,-0x120(%rbp)
   1f1f4:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
   1f1fb:	00 00 00 
      .pApplicationInfo{&applicationInfo},
      .enabledLayerCount{static_cast<uint32_t>(requestedLayers.size())},
      .ppEnabledLayerNames{requestedLayers.data()},
      .enabledExtensionCount{static_cast<uint32_t>(requiredExtensions.size())},
      .ppEnabledExtensionNames{requiredExtensions.data()},
  };
   1f1fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f202:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
   1f209:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   1f210:	48 83 c0 10          	add    $0x10,%rax
   1f214:	48 89 c7             	mov    %rax,%rdi
   1f217:	e8 cc 19 00 00       	call   20be8 <_ZN2vk5FlagsINS_22InstanceCreateFlagBitsEEC1Ev>
   1f21c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   1f223:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
      .enabledLayerCount{static_cast<uint32_t>(requestedLayers.size())},
   1f22a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1f231:	48 89 c7             	mov    %rax,%rdi
   1f234:	e8 f5 7d ff ff       	call   1702e <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  };
   1f239:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%rbp)
      .ppEnabledLayerNames{requestedLayers.data()},
   1f23f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1f246:	48 89 c7             	mov    %rax,%rdi
   1f249:	e8 6a 19 00 00       	call   20bb8 <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
  };
   1f24e:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
      .enabledExtensionCount{static_cast<uint32_t>(requiredExtensions.size())},
   1f255:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1f25c:	48 89 c7             	mov    %rax,%rdi
   1f25f:	e8 ca 7d ff ff       	call   1702e <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  };
   1f264:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%rbp)
      .ppEnabledExtensionNames{requiredExtensions.data()},
   1f26a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1f271:	48 89 c7             	mov    %rax,%rdi
   1f274:	e8 3f 19 00 00       	call   20bb8 <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
  };
   1f279:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  return {context, instanceInfo};
   1f280:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1f284:	be 00 00 00 00       	mov    $0x0,%esi
   1f289:	48 89 c7             	mov    %rax,%rdi
   1f28c:	e8 19 8e ff ff       	call   180aa <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
   1f291:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1f295:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
   1f29c:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
   1f2a3:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   1f2aa:	48 89 c7             	mov    %rax,%rdi
   1f2ad:	e8 d6 15 00 00       	call   20888 <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
}
   1f2b2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1f2b9:	48 89 c7             	mov    %rax,%rdi
   1f2bc:	e8 6b 89 ff ff       	call   17c2c <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   1f2c1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1f2c8:	48 89 c7             	mov    %rax,%rdi
   1f2cb:	e8 5c 89 ff ff       	call   17c2c <_ZNSt6vectorIPKcSaIS1_EED1Ev>
  return {context, instanceInfo};
   1f2d0:	eb 57                	jmp    1f329 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0x3c3>
  std::vector<const char *> requiredExtensions{requiredExtensionCount};
   1f2d2:	48 89 c3             	mov    %rax,%rbx
   1f2d5:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
   1f2d9:	48 89 c7             	mov    %rax,%rdi
   1f2dc:	e8 05 75 ff ff       	call   167e6 <_ZNSaIPKcED1Ev>
   1f2e1:	48 89 d8             	mov    %rbx,%rax
   1f2e4:	48 89 c7             	mov    %rax,%rdi
   1f2e7:	e8 b4 60 fe ff       	call   53a0 <_Unwind_Resume@plt>
  };
   1f2ec:	48 89 c3             	mov    %rax,%rbx
   1f2ef:	48 8d 45 af          	lea    -0x51(%rbp),%rax
   1f2f3:	48 89 c7             	mov    %rax,%rdi
   1f2f6:	e8 eb 74 ff ff       	call   167e6 <_ZNSaIPKcED1Ev>
   1f2fb:	eb 12                	jmp    1f30f <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0x3a9>
}
   1f2fd:	48 89 c3             	mov    %rax,%rbx
   1f300:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1f307:	48 89 c7             	mov    %rax,%rdi
   1f30a:	e8 1d 89 ff ff       	call   17c2c <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   1f30f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1f316:	48 89 c7             	mov    %rax,%rdi
   1f319:	e8 0e 89 ff ff       	call   17c2c <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   1f31e:	48 89 d8             	mov    %rbx,%rax
   1f321:	48 89 c7             	mov    %rax,%rdi
   1f324:	e8 77 60 fe ff       	call   53a0 <_Unwind_Resume@plt>
   1f329:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   1f330:	48 81 c4 78 01 00 00 	add    $0x178,%rsp
   1f337:	5b                   	pop    %rbx
   1f338:	41 5c                	pop    %r12
   1f33a:	41 5d                	pop    %r13
   1f33c:	5d                   	pop    %rbp
   1f33d:	c3                   	ret

000000000001f33e <_ZN4rtvc22makeDebugMessengerInfoEv>:

[[nodiscard]] vk::DebugUtilsMessengerCreateInfoEXT makeDebugMessengerInfo() {
   1f33e:	55                   	push   %rbp
   1f33f:	48 89 e5             	mov    %rsp,%rbp
   1f342:	48 83 ec 10          	sub    $0x10,%rsp
   1f346:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
          vk::DebugUtilsMessageTypeFlagBitsEXT::eGeneral |
          vk::DebugUtilsMessageTypeFlagBitsEXT::eValidation |
          vk::DebugUtilsMessageTypeFlagBitsEXT::ePerformance |
          vk::DebugUtilsMessageTypeFlagBitsEXT::eDeviceAddressBinding,
      .pfnUserCallback = debugCallback,
  };
   1f34a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f34e:	c7 00 04 be 9c 3b    	movl   $0x3b9cbe04,(%rax)
   1f354:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f358:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1f35f:	00 
   1f360:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f364:	48 83 c0 10          	add    $0x10,%rax
   1f368:	48 89 c7             	mov    %rax,%rdi
   1f36b:	e8 32 18 00 00       	call   20ba2 <_ZN2vk5FlagsINS_36DebugUtilsMessengerCreateFlagBitsEXTEEC1Ev>
   1f370:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f374:	c7 40 14 01 11 00 00 	movl   $0x1101,0x14(%rax)
   1f37b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f37f:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%rax)
   1f386:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f38a:	48 8d 15 19 f9 ff ff 	lea    -0x6e7(%rip),%rdx        # 1ecaa <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>
   1f391:	48 89 50 20          	mov    %rdx,0x20(%rax)
   1f395:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f399:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   1f3a0:	00 
}
   1f3a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f3a5:	c9                   	leave
   1f3a6:	c3                   	ret

000000000001f3a7 <_ZN4rtvc18makeDebugMessengerERKN2vk4raii8InstanceE>:

vk::raii::DebugUtilsMessengerEXT
makeDebugMessenger(const vk::raii::Instance &instance) {
   1f3a7:	55                   	push   %rbp
   1f3a8:	48 89 e5             	mov    %rsp,%rbp
   1f3ab:	48 83 ec 50          	sub    $0x50,%rsp
   1f3af:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   1f3b3:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  if constexpr (debugMode) {
    return {instance, makeDebugMessengerInfo()};
   1f3b7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1f3bb:	48 89 c7             	mov    %rax,%rdi
   1f3be:	e8 7b ff ff ff       	call   1f33e <_ZN4rtvc22makeDebugMessengerInfoEv>
   1f3c3:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1f3c7:	be 00 00 00 00       	mov    $0x0,%esi
   1f3cc:	48 89 c7             	mov    %rax,%rdi
   1f3cf:	e8 d6 8c ff ff       	call   180aa <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
   1f3d4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1f3d8:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
   1f3dc:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   1f3e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f3e4:	48 89 c7             	mov    %rax,%rdi
   1f3e7:	e8 ea 15 00 00       	call   209d6 <_ZN2vk4raii22DebugUtilsMessengerEXTC1ERKNS0_8InstanceERKNS_32DebugUtilsMessengerCreateInfoEXTENS_8OptionalIKNS_19AllocationCallbacksEEE>
  }
  return {VK_NULL_HANDLE};
}
   1f3ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f3f0:	c9                   	leave
   1f3f1:	c3                   	ret

000000000001f3f2 <_ZN4rtvc11makeSurfaceERKN2vk4raii8InstanceERKNS_6WindowE>:

vk::raii::SurfaceKHR makeSurface(const vk::raii::Instance &instance,
                                 const Window &window) {
   1f3f2:	55                   	push   %rbp
   1f3f3:	48 89 e5             	mov    %rsp,%rbp
   1f3f6:	53                   	push   %rbx
   1f3f7:	48 83 ec 38          	sub    $0x38,%rsp
   1f3fb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1f3ff:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1f403:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkSurfaceKHR surface;
  glfwCreateWindowSurface(static_cast<VkInstance>(*instance), *window, nullptr,
   1f407:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f40b:	48 89 c7             	mov    %rax,%rdi
   1f40e:	e8 85 a6 fe ff       	call   9a98 <_ZNK4rtvc6WindowdeEv>
   1f413:	48 89 c3             	mov    %rax,%rbx
   1f416:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f41a:	48 89 c7             	mov    %rax,%rdi
   1f41d:	e8 7e 6a ff ff       	call   15ea0 <_ZNK2vk4raii8InstancedeEv>
   1f422:	48 89 c7             	mov    %rax,%rdi
   1f425:	e8 6a 9c fe ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   1f42a:	48 89 c7             	mov    %rax,%rdi
   1f42d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1f431:	48 89 c1             	mov    %rax,%rcx
   1f434:	ba 00 00 00 00       	mov    $0x0,%edx
   1f439:	48 89 de             	mov    %rbx,%rsi
   1f43c:	e8 ff 5e fe ff       	call   5340 <glfwCreateWindowSurface@plt>
                          &surface);
  return {instance, surface};
   1f441:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
   1f445:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1f449:	be 00 00 00 00       	mov    $0x0,%esi
   1f44e:	48 89 c7             	mov    %rax,%rdi
   1f451:	e8 54 8c ff ff       	call   180aa <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
   1f456:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f45a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   1f45e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f462:	48 89 d1             	mov    %rdx,%rcx
   1f465:	48 89 da             	mov    %rbx,%rdx
   1f468:	48 89 c7             	mov    %rax,%rdi
   1f46b:	e8 50 16 00 00       	call   20ac0 <_ZN2vk4raii10SurfaceKHRC1ERKNS0_8InstanceEP14VkSurfaceKHR_TNS_8OptionalIKNS_19AllocationCallbacksEEE>
}
   1f470:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f474:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1f478:	c9                   	leave
   1f479:	c3                   	ret

000000000001f47a <_Z41__static_initialization_and_destruction_0ii>:

   1f47a:	55                   	push   %rbp
   1f47b:	48 89 e5             	mov    %rsp,%rbp
   1f47e:	48 83 ec 10          	sub    $0x10,%rsp
   1f482:	89 7d fc             	mov    %edi,-0x4(%rbp)
   1f485:	89 75 f8             	mov    %esi,-0x8(%rbp)
   1f488:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
   1f48c:	75 3b                	jne    1f4c9 <_Z41__static_initialization_and_destruction_0ii+0x4f>
   1f48e:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
   1f495:	75 32                	jne    1f4c9 <_Z41__static_initialization_and_destruction_0ii+0x4f>
   1f497:	48 8d 05 02 8f 01 00 	lea    0x18f02(%rip),%rax        # 383a0 <_ZStL8__ioinit>
   1f49e:	48 89 c7             	mov    %rax,%rdi
   1f4a1:	e8 8a 5e fe ff       	call   5330 <_ZNSt8ios_base4InitC1Ev@plt>
   1f4a6:	48 8d 05 4b 8d 01 00 	lea    0x18d4b(%rip),%rax        # 381f8 <__dso_handle>
   1f4ad:	48 89 c2             	mov    %rax,%rdx
   1f4b0:	48 8d 05 e9 8e 01 00 	lea    0x18ee9(%rip),%rax        # 383a0 <_ZStL8__ioinit>
   1f4b7:	48 89 c6             	mov    %rax,%rsi
   1f4ba:	48 8b 05 0f 8b 01 00 	mov    0x18b0f(%rip),%rax        # 37fd0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
   1f4c1:	48 89 c7             	mov    %rax,%rdi
   1f4c4:	e8 07 5d fe ff       	call   51d0 <__cxa_atexit@plt>
   1f4c9:	90                   	nop
   1f4ca:	c9                   	leave
   1f4cb:	c3                   	ret

000000000001f4cc <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:
   1f4cc:	55                   	push   %rbp
   1f4cd:	48 89 e5             	mov    %rsp,%rbp
   1f4d0:	be ff ff 00 00       	mov    $0xffff,%esi
   1f4d5:	bf 01 00 00 00       	mov    $0x1,%edi
   1f4da:	e8 9b ff ff ff       	call   1f47a <_Z41__static_initialization_and_destruction_0ii>
   1f4df:	5d                   	pop    %rbp
   1f4e0:	c3                   	ret
   1f4e1:	90                   	nop

000000000001f4e2 <_ZNK2vk20DispatchLoaderStatic34vkEnumerateInstanceLayerPropertiesEPjP17VkLayerProperties>:
    VkResult vkEnumerateInstanceLayerProperties( uint32_t * pPropertyCount, VkLayerProperties * pProperties ) const VULKAN_HPP_NOEXCEPT
   1f4e2:	55                   	push   %rbp
   1f4e3:	48 89 e5             	mov    %rsp,%rbp
   1f4e6:	48 83 ec 20          	sub    $0x20,%rsp
   1f4ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f4ee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f4f2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      return ::vkEnumerateInstanceLayerProperties( pPropertyCount, pProperties );
   1f4f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f4fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f4fe:	48 89 d6             	mov    %rdx,%rsi
   1f501:	48 89 c7             	mov    %rax,%rdi
   1f504:	e8 77 5d fe ff       	call   5280 <vkEnumerateInstanceLayerProperties@plt>
    }
   1f509:	c9                   	leave
   1f50a:	c3                   	ret
   1f50b:	90                   	nop

000000000001f50c <_ZN2vk10SurfaceKHRC1EP14VkSurfaceKHR_T>:
    VULKAN_HPP_TYPESAFE_EXPLICIT SurfaceKHR( VkSurfaceKHR surfaceKHR ) VULKAN_HPP_NOEXCEPT : m_surfaceKHR( surfaceKHR ) {}
   1f50c:	55                   	push   %rbp
   1f50d:	48 89 e5             	mov    %rsp,%rbp
   1f510:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f514:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f518:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f51c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f520:	48 89 10             	mov    %rdx,(%rax)
   1f523:	90                   	nop
   1f524:	5d                   	pop    %rbp
   1f525:	c3                   	ret

000000000001f526 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_>:
      InstanceDispatcher( PFN_vkGetInstanceProcAddr getProcAddr, VkInstance instance ) : vkGetInstanceProcAddr( getProcAddr )
   1f526:	55                   	push   %rbp
   1f527:	48 89 e5             	mov    %rsp,%rbp
   1f52a:	48 83 ec 20          	sub    $0x20,%rsp
   1f52e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f532:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f536:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1f53a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f53e:	48 89 c7             	mov    %rax,%rdi
   1f541:	e8 56 70 fe ff       	call   659c <_ZN2vk18DispatchLoaderBaseC1Ev>
   1f546:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f54a:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   1f551:	00 
   1f552:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f556:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   1f55d:	00 
   1f55e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f562:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   1f569:	00 
   1f56a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f56e:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   1f575:	00 
   1f576:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f57a:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
   1f581:	00 
   1f582:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f586:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
   1f58d:	00 
   1f58e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f592:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
   1f599:	00 
   1f59a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f59e:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
   1f5a5:	00 
   1f5a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5aa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f5ae:	48 89 50 50          	mov    %rdx,0x50(%rax)
   1f5b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5b6:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
   1f5bd:	00 
   1f5be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5c2:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
   1f5c9:	00 
   1f5ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5ce:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
   1f5d5:	00 
   1f5d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5da:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
   1f5e1:	00 
   1f5e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5e6:	48 c7 40 78 00 00 00 	movq   $0x0,0x78(%rax)
   1f5ed:	00 
   1f5ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5f2:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
   1f5f9:	00 00 00 00 
   1f5fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f601:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
   1f608:	00 00 00 00 
   1f60c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f610:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
   1f617:	00 00 00 00 
   1f61b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f61f:	48 c7 80 98 00 00 00 	movq   $0x0,0x98(%rax)
   1f626:	00 00 00 00 
   1f62a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f62e:	48 c7 80 a0 00 00 00 	movq   $0x0,0xa0(%rax)
   1f635:	00 00 00 00 
   1f639:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f63d:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
   1f644:	00 00 00 00 
   1f648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f64c:	48 c7 80 b0 00 00 00 	movq   $0x0,0xb0(%rax)
   1f653:	00 00 00 00 
   1f657:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f65b:	48 c7 80 b8 00 00 00 	movq   $0x0,0xb8(%rax)
   1f662:	00 00 00 00 
   1f666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f66a:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
   1f671:	00 00 00 00 
   1f675:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f679:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)
   1f680:	00 00 00 00 
   1f684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f688:	48 c7 80 d0 00 00 00 	movq   $0x0,0xd0(%rax)
   1f68f:	00 00 00 00 
   1f693:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f697:	48 c7 80 d8 00 00 00 	movq   $0x0,0xd8(%rax)
   1f69e:	00 00 00 00 
   1f6a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6a6:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
   1f6ad:	00 00 00 00 
   1f6b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6b5:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
   1f6bc:	00 00 00 00 
   1f6c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6c4:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
   1f6cb:	00 00 00 00 
   1f6cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6d3:	48 c7 80 f8 00 00 00 	movq   $0x0,0xf8(%rax)
   1f6da:	00 00 00 00 
   1f6de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6e2:	48 c7 80 00 01 00 00 	movq   $0x0,0x100(%rax)
   1f6e9:	00 00 00 00 
   1f6ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6f1:	48 c7 80 08 01 00 00 	movq   $0x0,0x108(%rax)
   1f6f8:	00 00 00 00 
   1f6fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f700:	48 c7 80 10 01 00 00 	movq   $0x0,0x110(%rax)
   1f707:	00 00 00 00 
   1f70b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f70f:	48 c7 80 18 01 00 00 	movq   $0x0,0x118(%rax)
   1f716:	00 00 00 00 
   1f71a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f71e:	48 c7 80 20 01 00 00 	movq   $0x0,0x120(%rax)
   1f725:	00 00 00 00 
   1f729:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f72d:	48 c7 80 28 01 00 00 	movq   $0x0,0x128(%rax)
   1f734:	00 00 00 00 
   1f738:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f73c:	48 c7 80 30 01 00 00 	movq   $0x0,0x130(%rax)
   1f743:	00 00 00 00 
   1f747:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f74b:	48 c7 80 38 01 00 00 	movq   $0x0,0x138(%rax)
   1f752:	00 00 00 00 
   1f756:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f75a:	48 c7 80 40 01 00 00 	movq   $0x0,0x140(%rax)
   1f761:	00 00 00 00 
   1f765:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f769:	48 c7 80 48 01 00 00 	movq   $0x0,0x148(%rax)
   1f770:	00 00 00 00 
   1f774:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f778:	48 c7 80 50 01 00 00 	movq   $0x0,0x150(%rax)
   1f77f:	00 00 00 00 
   1f783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f787:	48 c7 80 58 01 00 00 	movq   $0x0,0x158(%rax)
   1f78e:	00 00 00 00 
   1f792:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f796:	48 c7 80 60 01 00 00 	movq   $0x0,0x160(%rax)
   1f79d:	00 00 00 00 
   1f7a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7a5:	48 c7 80 68 01 00 00 	movq   $0x0,0x168(%rax)
   1f7ac:	00 00 00 00 
   1f7b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7b4:	48 c7 80 70 01 00 00 	movq   $0x0,0x170(%rax)
   1f7bb:	00 00 00 00 
   1f7bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7c3:	48 c7 80 78 01 00 00 	movq   $0x0,0x178(%rax)
   1f7ca:	00 00 00 00 
   1f7ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7d2:	48 c7 80 80 01 00 00 	movq   $0x0,0x180(%rax)
   1f7d9:	00 00 00 00 
   1f7dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7e1:	48 c7 80 88 01 00 00 	movq   $0x0,0x188(%rax)
   1f7e8:	00 00 00 00 
   1f7ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7f0:	48 c7 80 90 01 00 00 	movq   $0x0,0x190(%rax)
   1f7f7:	00 00 00 00 
   1f7fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7ff:	48 c7 80 98 01 00 00 	movq   $0x0,0x198(%rax)
   1f806:	00 00 00 00 
   1f80a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f80e:	48 c7 80 a0 01 00 00 	movq   $0x0,0x1a0(%rax)
   1f815:	00 00 00 00 
   1f819:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f81d:	48 c7 80 a8 01 00 00 	movq   $0x0,0x1a8(%rax)
   1f824:	00 00 00 00 
   1f828:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f82c:	48 c7 80 b0 01 00 00 	movq   $0x0,0x1b0(%rax)
   1f833:	00 00 00 00 
   1f837:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f83b:	48 c7 80 b8 01 00 00 	movq   $0x0,0x1b8(%rax)
   1f842:	00 00 00 00 
   1f846:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f84a:	48 c7 80 c0 01 00 00 	movq   $0x0,0x1c0(%rax)
   1f851:	00 00 00 00 
   1f855:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f859:	48 c7 80 c8 01 00 00 	movq   $0x0,0x1c8(%rax)
   1f860:	00 00 00 00 
   1f864:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f868:	48 c7 80 d0 01 00 00 	movq   $0x0,0x1d0(%rax)
   1f86f:	00 00 00 00 
   1f873:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f877:	48 c7 80 d8 01 00 00 	movq   $0x0,0x1d8(%rax)
   1f87e:	00 00 00 00 
   1f882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f886:	48 c7 80 e0 01 00 00 	movq   $0x0,0x1e0(%rax)
   1f88d:	00 00 00 00 
   1f891:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f895:	48 c7 80 e8 01 00 00 	movq   $0x0,0x1e8(%rax)
   1f89c:	00 00 00 00 
   1f8a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8a4:	48 c7 80 f0 01 00 00 	movq   $0x0,0x1f0(%rax)
   1f8ab:	00 00 00 00 
   1f8af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8b3:	48 c7 80 f8 01 00 00 	movq   $0x0,0x1f8(%rax)
   1f8ba:	00 00 00 00 
   1f8be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8c2:	48 c7 80 00 02 00 00 	movq   $0x0,0x200(%rax)
   1f8c9:	00 00 00 00 
   1f8cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8d1:	48 c7 80 08 02 00 00 	movq   $0x0,0x208(%rax)
   1f8d8:	00 00 00 00 
   1f8dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8e0:	48 c7 80 10 02 00 00 	movq   $0x0,0x210(%rax)
   1f8e7:	00 00 00 00 
   1f8eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8ef:	48 c7 80 18 02 00 00 	movq   $0x0,0x218(%rax)
   1f8f6:	00 00 00 00 
   1f8fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8fe:	48 c7 80 20 02 00 00 	movq   $0x0,0x220(%rax)
   1f905:	00 00 00 00 
   1f909:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f90d:	48 c7 80 28 02 00 00 	movq   $0x0,0x228(%rax)
   1f914:	00 00 00 00 
   1f918:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f91c:	48 c7 80 30 02 00 00 	movq   $0x0,0x230(%rax)
   1f923:	00 00 00 00 
   1f927:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f92b:	48 c7 80 38 02 00 00 	movq   $0x0,0x238(%rax)
   1f932:	00 00 00 00 
   1f936:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f93a:	48 c7 80 40 02 00 00 	movq   $0x0,0x240(%rax)
   1f941:	00 00 00 00 
   1f945:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f949:	48 c7 80 48 02 00 00 	movq   $0x0,0x248(%rax)
   1f950:	00 00 00 00 
   1f954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f958:	48 c7 80 50 02 00 00 	movq   $0x0,0x250(%rax)
   1f95f:	00 00 00 00 
   1f963:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f967:	48 c7 80 58 02 00 00 	movq   $0x0,0x258(%rax)
   1f96e:	00 00 00 00 
   1f972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f976:	48 c7 80 60 02 00 00 	movq   $0x0,0x260(%rax)
   1f97d:	00 00 00 00 
   1f981:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f985:	48 c7 80 68 02 00 00 	movq   $0x0,0x268(%rax)
   1f98c:	00 00 00 00 
   1f990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f994:	48 c7 80 70 02 00 00 	movq   $0x0,0x270(%rax)
   1f99b:	00 00 00 00 
   1f99f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9a3:	48 c7 80 78 02 00 00 	movq   $0x0,0x278(%rax)
   1f9aa:	00 00 00 00 
   1f9ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9b2:	48 c7 80 80 02 00 00 	movq   $0x0,0x280(%rax)
   1f9b9:	00 00 00 00 
   1f9bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9c1:	48 c7 80 88 02 00 00 	movq   $0x0,0x288(%rax)
   1f9c8:	00 00 00 00 
   1f9cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9d0:	48 c7 80 90 02 00 00 	movq   $0x0,0x290(%rax)
   1f9d7:	00 00 00 00 
   1f9db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9df:	48 c7 80 98 02 00 00 	movq   $0x0,0x298(%rax)
   1f9e6:	00 00 00 00 
   1f9ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9ee:	48 c7 80 a0 02 00 00 	movq   $0x0,0x2a0(%rax)
   1f9f5:	00 00 00 00 
   1f9f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9fd:	48 c7 80 a8 02 00 00 	movq   $0x0,0x2a8(%rax)
   1fa04:	00 00 00 00 
   1fa08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa0c:	48 c7 80 b0 02 00 00 	movq   $0x0,0x2b0(%rax)
   1fa13:	00 00 00 00 
   1fa17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa1b:	48 c7 80 b8 02 00 00 	movq   $0x0,0x2b8(%rax)
   1fa22:	00 00 00 00 
   1fa26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa2a:	48 c7 80 c0 02 00 00 	movq   $0x0,0x2c0(%rax)
   1fa31:	00 00 00 00 
   1fa35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa39:	48 c7 80 c8 02 00 00 	movq   $0x0,0x2c8(%rax)
   1fa40:	00 00 00 00 
   1fa44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa48:	48 c7 80 d0 02 00 00 	movq   $0x0,0x2d0(%rax)
   1fa4f:	00 00 00 00 
   1fa53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa57:	48 c7 80 d8 02 00 00 	movq   $0x0,0x2d8(%rax)
   1fa5e:	00 00 00 00 
   1fa62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa66:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
   1fa6d:	00 00 00 00 
   1fa71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa75:	48 c7 80 e8 02 00 00 	movq   $0x0,0x2e8(%rax)
   1fa7c:	00 00 00 00 
   1fa80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa84:	48 c7 80 f0 02 00 00 	movq   $0x0,0x2f0(%rax)
   1fa8b:	00 00 00 00 
   1fa8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa93:	48 c7 80 f8 02 00 00 	movq   $0x0,0x2f8(%rax)
   1fa9a:	00 00 00 00 
   1fa9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1faa2:	48 c7 80 00 03 00 00 	movq   $0x0,0x300(%rax)
   1faa9:	00 00 00 00 
   1faad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fab1:	48 c7 80 08 03 00 00 	movq   $0x0,0x308(%rax)
   1fab8:	00 00 00 00 
   1fabc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fac0:	48 c7 80 10 03 00 00 	movq   $0x0,0x310(%rax)
   1fac7:	00 00 00 00 
   1facb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1facf:	48 c7 80 18 03 00 00 	movq   $0x0,0x318(%rax)
   1fad6:	00 00 00 00 
   1fada:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fade:	48 c7 80 20 03 00 00 	movq   $0x0,0x320(%rax)
   1fae5:	00 00 00 00 
   1fae9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1faed:	48 c7 80 28 03 00 00 	movq   $0x0,0x328(%rax)
   1faf4:	00 00 00 00 
   1faf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fafc:	48 c7 80 30 03 00 00 	movq   $0x0,0x330(%rax)
   1fb03:	00 00 00 00 
   1fb07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb0b:	48 c7 80 38 03 00 00 	movq   $0x0,0x338(%rax)
   1fb12:	00 00 00 00 
   1fb16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb1a:	48 c7 80 40 03 00 00 	movq   $0x0,0x340(%rax)
   1fb21:	00 00 00 00 
        vkDestroyInstance           = PFN_vkDestroyInstance( vkGetInstanceProcAddr( instance, "vkDestroyInstance" ) );
   1fb25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb29:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fb2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb31:	48 8d 0d 70 ab 00 00 	lea    0xab70(%rip),%rcx        # 2a6a8 <_ZNSt8__detailL19__atomic_spin_countE+0x4>
   1fb38:	48 89 ce             	mov    %rcx,%rsi
   1fb3b:	48 89 c7             	mov    %rax,%rdi
   1fb3e:	ff d2                	call   *%rdx
   1fb40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fb44:	48 89 42 10          	mov    %rax,0x10(%rdx)
        vkEnumeratePhysicalDevices  = PFN_vkEnumeratePhysicalDevices( vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDevices" ) );
   1fb48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb4c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fb50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb54:	48 8d 0d 5f ab 00 00 	lea    0xab5f(%rip),%rcx        # 2a6ba <_ZNSt8__detailL19__atomic_spin_countE+0x16>
   1fb5b:	48 89 ce             	mov    %rcx,%rsi
   1fb5e:	48 89 c7             	mov    %rax,%rdi
   1fb61:	ff d2                	call   *%rdx
   1fb63:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fb67:	48 89 42 18          	mov    %rax,0x18(%rdx)
        vkGetPhysicalDeviceFeatures = PFN_vkGetPhysicalDeviceFeatures( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFeatures" ) );
   1fb6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb6f:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fb73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb77:	48 8d 0d 57 ab 00 00 	lea    0xab57(%rip),%rcx        # 2a6d5 <_ZNSt8__detailL19__atomic_spin_countE+0x31>
   1fb7e:	48 89 ce             	mov    %rcx,%rsi
   1fb81:	48 89 c7             	mov    %rax,%rdi
   1fb84:	ff d2                	call   *%rdx
   1fb86:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fb8a:	48 89 42 20          	mov    %rax,0x20(%rdx)
          PFN_vkGetPhysicalDeviceFormatProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFormatProperties" ) );
   1fb8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb92:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fb96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb9a:	48 8d 0d 57 ab 00 00 	lea    0xab57(%rip),%rcx        # 2a6f8 <_ZNSt8__detailL19__atomic_spin_countE+0x54>
   1fba1:	48 89 ce             	mov    %rcx,%rsi
   1fba4:	48 89 c7             	mov    %rax,%rdi
   1fba7:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFormatProperties =
   1fba9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fbad:	48 89 42 28          	mov    %rax,0x28(%rdx)
          PFN_vkGetPhysicalDeviceImageFormatProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceImageFormatProperties" ) );
   1fbb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fbb5:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fbb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fbbd:	48 8d 0d 5c ab 00 00 	lea    0xab5c(%rip),%rcx        # 2a720 <_ZNSt8__detailL19__atomic_spin_countE+0x7c>
   1fbc4:	48 89 ce             	mov    %rcx,%rsi
   1fbc7:	48 89 c7             	mov    %rax,%rdi
   1fbca:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceImageFormatProperties =
   1fbcc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fbd0:	48 89 42 30          	mov    %rax,0x30(%rdx)
        vkGetPhysicalDeviceProperties = PFN_vkGetPhysicalDeviceProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceProperties" ) );
   1fbd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fbd8:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fbdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fbe0:	48 8d 0d 62 ab 00 00 	lea    0xab62(%rip),%rcx        # 2a749 <_ZNSt8__detailL19__atomic_spin_countE+0xa5>
   1fbe7:	48 89 ce             	mov    %rcx,%rsi
   1fbea:	48 89 c7             	mov    %rax,%rdi
   1fbed:	ff d2                	call   *%rdx
   1fbef:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fbf3:	48 89 42 38          	mov    %rax,0x38(%rdx)
          PFN_vkGetPhysicalDeviceQueueFamilyProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyProperties" ) );
   1fbf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fbfb:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fbff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc03:	48 8d 0d 5e ab 00 00 	lea    0xab5e(%rip),%rcx        # 2a768 <_ZNSt8__detailL19__atomic_spin_countE+0xc4>
   1fc0a:	48 89 ce             	mov    %rcx,%rsi
   1fc0d:	48 89 c7             	mov    %rax,%rdi
   1fc10:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyProperties =
   1fc12:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fc16:	48 89 42 40          	mov    %rax,0x40(%rdx)
          PFN_vkGetPhysicalDeviceMemoryProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMemoryProperties" ) );
   1fc1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fc1e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fc22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc26:	48 8d 0d 6b ab 00 00 	lea    0xab6b(%rip),%rcx        # 2a798 <_ZNSt8__detailL19__atomic_spin_countE+0xf4>
   1fc2d:	48 89 ce             	mov    %rcx,%rsi
   1fc30:	48 89 c7             	mov    %rax,%rdi
   1fc33:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMemoryProperties =
   1fc35:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fc39:	48 89 42 48          	mov    %rax,0x48(%rdx)
        vkCreateDevice = PFN_vkCreateDevice( vkGetInstanceProcAddr( instance, "vkCreateDevice" ) );
   1fc3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fc41:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fc45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc49:	48 8d 0d 6c ab 00 00 	lea    0xab6c(%rip),%rcx        # 2a7bc <_ZNSt8__detailL19__atomic_spin_countE+0x118>
   1fc50:	48 89 ce             	mov    %rcx,%rsi
   1fc53:	48 89 c7             	mov    %rax,%rdi
   1fc56:	ff d2                	call   *%rdx
   1fc58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fc5c:	48 89 42 58          	mov    %rax,0x58(%rdx)
          PFN_vkEnumerateDeviceExtensionProperties( vkGetInstanceProcAddr( instance, "vkEnumerateDeviceExtensionProperties" ) );
   1fc60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fc64:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fc68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc6c:	48 8d 0d 5d ab 00 00 	lea    0xab5d(%rip),%rcx        # 2a7d0 <_ZNSt8__detailL19__atomic_spin_countE+0x12c>
   1fc73:	48 89 ce             	mov    %rcx,%rsi
   1fc76:	48 89 c7             	mov    %rax,%rdi
   1fc79:	ff d2                	call   *%rdx
        vkEnumerateDeviceExtensionProperties =
   1fc7b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fc7f:	48 89 42 60          	mov    %rax,0x60(%rdx)
        vkEnumerateDeviceLayerProperties = PFN_vkEnumerateDeviceLayerProperties( vkGetInstanceProcAddr( instance, "vkEnumerateDeviceLayerProperties" ) );
   1fc83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fc87:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fc8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc8f:	48 8d 0d 62 ab 00 00 	lea    0xab62(%rip),%rcx        # 2a7f8 <_ZNSt8__detailL19__atomic_spin_countE+0x154>
   1fc96:	48 89 ce             	mov    %rcx,%rsi
   1fc99:	48 89 c7             	mov    %rax,%rdi
   1fc9c:	ff d2                	call   *%rdx
   1fc9e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fca2:	48 89 42 68          	mov    %rax,0x68(%rdx)
          PFN_vkGetPhysicalDeviceSparseImageFormatProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSparseImageFormatProperties" ) );
   1fca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fcaa:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fcae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fcb2:	48 8d 0d 67 ab 00 00 	lea    0xab67(%rip),%rcx        # 2a820 <_ZNSt8__detailL19__atomic_spin_countE+0x17c>
   1fcb9:	48 89 ce             	mov    %rcx,%rsi
   1fcbc:	48 89 c7             	mov    %rax,%rdi
   1fcbf:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSparseImageFormatProperties =
   1fcc1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fcc5:	48 89 42 70          	mov    %rax,0x70(%rdx)
        vkEnumeratePhysicalDeviceGroups = PFN_vkEnumeratePhysicalDeviceGroups( vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDeviceGroups" ) );
   1fcc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fccd:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fcd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fcd5:	48 8d 0d 74 ab 00 00 	lea    0xab74(%rip),%rcx        # 2a850 <_ZNSt8__detailL19__atomic_spin_countE+0x1ac>
   1fcdc:	48 89 ce             	mov    %rcx,%rsi
   1fcdf:	48 89 c7             	mov    %rax,%rdi
   1fce2:	ff d2                	call   *%rdx
   1fce4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fce8:	48 89 42 78          	mov    %rax,0x78(%rdx)
        vkGetPhysicalDeviceFeatures2    = PFN_vkGetPhysicalDeviceFeatures2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFeatures2" ) );
   1fcec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fcf0:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fcf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fcf8:	48 8d 0d 71 ab 00 00 	lea    0xab71(%rip),%rcx        # 2a870 <_ZNSt8__detailL19__atomic_spin_countE+0x1cc>
   1fcff:	48 89 ce             	mov    %rcx,%rsi
   1fd02:	48 89 c7             	mov    %rax,%rdi
   1fd05:	ff d2                	call   *%rdx
   1fd07:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fd0b:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        vkGetPhysicalDeviceProperties2  = PFN_vkGetPhysicalDeviceProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceProperties2" ) );
   1fd12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fd16:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fd1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fd1e:	48 8d 0d 6b ab 00 00 	lea    0xab6b(%rip),%rcx        # 2a890 <_ZNSt8__detailL19__atomic_spin_countE+0x1ec>
   1fd25:	48 89 ce             	mov    %rcx,%rsi
   1fd28:	48 89 c7             	mov    %rax,%rdi
   1fd2b:	ff d2                	call   *%rdx
   1fd2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fd31:	48 89 82 88 00 00 00 	mov    %rax,0x88(%rdx)
          PFN_vkGetPhysicalDeviceFormatProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFormatProperties2" ) );
   1fd38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fd3c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fd40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fd44:	48 8d 0d 65 ab 00 00 	lea    0xab65(%rip),%rcx        # 2a8b0 <_ZNSt8__detailL19__atomic_spin_countE+0x20c>
   1fd4b:	48 89 ce             	mov    %rcx,%rsi
   1fd4e:	48 89 c7             	mov    %rax,%rdi
   1fd51:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFormatProperties2 =
   1fd53:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fd57:	48 89 82 90 00 00 00 	mov    %rax,0x90(%rdx)
          PFN_vkGetPhysicalDeviceImageFormatProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceImageFormatProperties2" ) );
   1fd5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fd62:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fd66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fd6a:	48 8d 0d 67 ab 00 00 	lea    0xab67(%rip),%rcx        # 2a8d8 <_ZNSt8__detailL19__atomic_spin_countE+0x234>
   1fd71:	48 89 ce             	mov    %rcx,%rsi
   1fd74:	48 89 c7             	mov    %rax,%rdi
   1fd77:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceImageFormatProperties2 =
   1fd79:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fd7d:	48 89 82 98 00 00 00 	mov    %rax,0x98(%rdx)
          PFN_vkGetPhysicalDeviceQueueFamilyProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyProperties2" ) );
   1fd84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fd88:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fd8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fd90:	48 8d 0d 71 ab 00 00 	lea    0xab71(%rip),%rcx        # 2a908 <_ZNSt8__detailL19__atomic_spin_countE+0x264>
   1fd97:	48 89 ce             	mov    %rcx,%rsi
   1fd9a:	48 89 c7             	mov    %rax,%rdi
   1fd9d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyProperties2 =
   1fd9f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fda3:	48 89 82 a0 00 00 00 	mov    %rax,0xa0(%rdx)
          PFN_vkGetPhysicalDeviceMemoryProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMemoryProperties2" ) );
   1fdaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fdae:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fdb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fdb6:	48 8d 0d 7b ab 00 00 	lea    0xab7b(%rip),%rcx        # 2a938 <_ZNSt8__detailL19__atomic_spin_countE+0x294>
   1fdbd:	48 89 ce             	mov    %rcx,%rsi
   1fdc0:	48 89 c7             	mov    %rax,%rdi
   1fdc3:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMemoryProperties2 =
   1fdc5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fdc9:	48 89 82 a8 00 00 00 	mov    %rax,0xa8(%rdx)
          PFN_vkGetPhysicalDeviceSparseImageFormatProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSparseImageFormatProperties2" ) );
   1fdd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fdd4:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fdd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fddc:	48 8d 0d 7d ab 00 00 	lea    0xab7d(%rip),%rcx        # 2a960 <_ZNSt8__detailL19__atomic_spin_countE+0x2bc>
   1fde3:	48 89 ce             	mov    %rcx,%rsi
   1fde6:	48 89 c7             	mov    %rax,%rdi
   1fde9:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSparseImageFormatProperties2 =
   1fdeb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fdef:	48 89 82 b0 00 00 00 	mov    %rax,0xb0(%rdx)
          PFN_vkGetPhysicalDeviceExternalBufferProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalBufferProperties" ) );
   1fdf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fdfa:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fdfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fe02:	48 8d 0d 87 ab 00 00 	lea    0xab87(%rip),%rcx        # 2a990 <_ZNSt8__detailL19__atomic_spin_countE+0x2ec>
   1fe09:	48 89 ce             	mov    %rcx,%rsi
   1fe0c:	48 89 c7             	mov    %rax,%rdi
   1fe0f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalBufferProperties =
   1fe11:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fe15:	48 89 82 b8 00 00 00 	mov    %rax,0xb8(%rdx)
          PFN_vkGetPhysicalDeviceExternalFenceProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalFenceProperties" ) );
   1fe1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe20:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fe24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fe28:	48 8d 0d 91 ab 00 00 	lea    0xab91(%rip),%rcx        # 2a9c0 <_ZNSt8__detailL19__atomic_spin_countE+0x31c>
   1fe2f:	48 89 ce             	mov    %rcx,%rsi
   1fe32:	48 89 c7             	mov    %rax,%rdi
   1fe35:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalFenceProperties =
   1fe37:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fe3b:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
          PFN_vkGetPhysicalDeviceExternalSemaphoreProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalSemaphoreProperties" ) );
   1fe42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe46:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fe4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fe4e:	48 8d 0d 9b ab 00 00 	lea    0xab9b(%rip),%rcx        # 2a9f0 <_ZNSt8__detailL19__atomic_spin_countE+0x34c>
   1fe55:	48 89 ce             	mov    %rcx,%rsi
   1fe58:	48 89 c7             	mov    %rax,%rdi
   1fe5b:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalSemaphoreProperties =
   1fe5d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fe61:	48 89 82 c8 00 00 00 	mov    %rax,0xc8(%rdx)
        vkGetPhysicalDeviceToolProperties = PFN_vkGetPhysicalDeviceToolProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceToolProperties" ) );
   1fe68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe6c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fe70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fe74:	48 8d 0d a5 ab 00 00 	lea    0xaba5(%rip),%rcx        # 2aa20 <_ZNSt8__detailL19__atomic_spin_countE+0x37c>
   1fe7b:	48 89 ce             	mov    %rcx,%rsi
   1fe7e:	48 89 c7             	mov    %rax,%rdi
   1fe81:	ff d2                	call   *%rdx
   1fe83:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fe87:	48 89 82 d0 00 00 00 	mov    %rax,0xd0(%rdx)
        vkAcquireDrmDisplayEXT = PFN_vkAcquireDrmDisplayEXT( vkGetInstanceProcAddr( instance, "vkAcquireDrmDisplayEXT" ) );
   1fe8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe92:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fe96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fe9a:	48 8d 0d a1 ab 00 00 	lea    0xaba1(%rip),%rcx        # 2aa42 <_ZNSt8__detailL19__atomic_spin_countE+0x39e>
   1fea1:	48 89 ce             	mov    %rcx,%rsi
   1fea4:	48 89 c7             	mov    %rax,%rdi
   1fea7:	ff d2                	call   *%rdx
   1fea9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fead:	48 89 82 d8 00 00 00 	mov    %rax,0xd8(%rdx)
        vkGetDrmDisplayEXT     = PFN_vkGetDrmDisplayEXT( vkGetInstanceProcAddr( instance, "vkGetDrmDisplayEXT" ) );
   1feb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1feb8:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1febc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fec0:	48 8d 0d 92 ab 00 00 	lea    0xab92(%rip),%rcx        # 2aa59 <_ZNSt8__detailL19__atomic_spin_countE+0x3b5>
   1fec7:	48 89 ce             	mov    %rcx,%rsi
   1feca:	48 89 c7             	mov    %rax,%rdi
   1fecd:	ff d2                	call   *%rdx
   1fecf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fed3:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
          PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" ) );
   1feda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fede:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1fee2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fee6:	48 8d 0d 83 ab 00 00 	lea    0xab83(%rip),%rcx        # 2aa70 <_ZNSt8__detailL19__atomic_spin_countE+0x3cc>
   1feed:	48 89 ce             	mov    %rcx,%rsi
   1fef0:	48 89 c7             	mov    %rax,%rdi
   1fef3:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceCalibrateableTimeDomainsEXT =
   1fef5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fef9:	48 89 82 f8 00 00 00 	mov    %rax,0xf8(%rdx)
        vkCreateDebugReportCallbackEXT  = PFN_vkCreateDebugReportCallbackEXT( vkGetInstanceProcAddr( instance, "vkCreateDebugReportCallbackEXT" ) );
   1ff00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff04:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1ff08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ff0c:	48 8d 0d 8d ab 00 00 	lea    0xab8d(%rip),%rcx        # 2aaa0 <_ZNSt8__detailL19__atomic_spin_countE+0x3fc>
   1ff13:	48 89 ce             	mov    %rcx,%rsi
   1ff16:	48 89 c7             	mov    %rax,%rdi
   1ff19:	ff d2                	call   *%rdx
   1ff1b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ff1f:	48 89 82 00 01 00 00 	mov    %rax,0x100(%rdx)
        vkDestroyDebugReportCallbackEXT = PFN_vkDestroyDebugReportCallbackEXT( vkGetInstanceProcAddr( instance, "vkDestroyDebugReportCallbackEXT" ) );
   1ff26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff2a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1ff2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ff32:	48 8d 0d 87 ab 00 00 	lea    0xab87(%rip),%rcx        # 2aac0 <_ZNSt8__detailL19__atomic_spin_countE+0x41c>
   1ff39:	48 89 ce             	mov    %rcx,%rsi
   1ff3c:	48 89 c7             	mov    %rax,%rdi
   1ff3f:	ff d2                	call   *%rdx
   1ff41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ff45:	48 89 82 08 01 00 00 	mov    %rax,0x108(%rdx)
        vkDebugReportMessageEXT         = PFN_vkDebugReportMessageEXT( vkGetInstanceProcAddr( instance, "vkDebugReportMessageEXT" ) );
   1ff4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff50:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1ff54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ff58:	48 8d 0d 81 ab 00 00 	lea    0xab81(%rip),%rcx        # 2aae0 <_ZNSt8__detailL19__atomic_spin_countE+0x43c>
   1ff5f:	48 89 ce             	mov    %rcx,%rsi
   1ff62:	48 89 c7             	mov    %rax,%rdi
   1ff65:	ff d2                	call   *%rdx
   1ff67:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ff6b:	48 89 82 10 01 00 00 	mov    %rax,0x110(%rdx)
        vkCreateDebugUtilsMessengerEXT  = PFN_vkCreateDebugUtilsMessengerEXT( vkGetInstanceProcAddr( instance, "vkCreateDebugUtilsMessengerEXT" ) );
   1ff72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff76:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1ff7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ff7e:	48 8d 0d 73 ab 00 00 	lea    0xab73(%rip),%rcx        # 2aaf8 <_ZNSt8__detailL19__atomic_spin_countE+0x454>
   1ff85:	48 89 ce             	mov    %rcx,%rsi
   1ff88:	48 89 c7             	mov    %rax,%rdi
   1ff8b:	ff d2                	call   *%rdx
   1ff8d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ff91:	48 89 82 18 01 00 00 	mov    %rax,0x118(%rdx)
        vkDestroyDebugUtilsMessengerEXT = PFN_vkDestroyDebugUtilsMessengerEXT( vkGetInstanceProcAddr( instance, "vkDestroyDebugUtilsMessengerEXT" ) );
   1ff98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff9c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1ffa0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ffa4:	48 8d 0d 6d ab 00 00 	lea    0xab6d(%rip),%rcx        # 2ab18 <_ZNSt8__detailL19__atomic_spin_countE+0x474>
   1ffab:	48 89 ce             	mov    %rcx,%rsi
   1ffae:	48 89 c7             	mov    %rax,%rdi
   1ffb1:	ff d2                	call   *%rdx
   1ffb3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ffb7:	48 89 82 20 01 00 00 	mov    %rax,0x120(%rdx)
        vkSubmitDebugUtilsMessageEXT    = PFN_vkSubmitDebugUtilsMessageEXT( vkGetInstanceProcAddr( instance, "vkSubmitDebugUtilsMessageEXT" ) );
   1ffbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ffc2:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1ffc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ffca:	48 8d 0d 67 ab 00 00 	lea    0xab67(%rip),%rcx        # 2ab38 <_ZNSt8__detailL19__atomic_spin_countE+0x494>
   1ffd1:	48 89 ce             	mov    %rcx,%rsi
   1ffd4:	48 89 c7             	mov    %rax,%rdi
   1ffd7:	ff d2                	call   *%rdx
   1ffd9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ffdd:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)
        vkReleaseDisplayEXT = PFN_vkReleaseDisplayEXT( vkGetInstanceProcAddr( instance, "vkReleaseDisplayEXT" ) );
   1ffe4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ffe8:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1ffec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fff0:	48 8d 0d 5e ab 00 00 	lea    0xab5e(%rip),%rcx        # 2ab55 <_ZNSt8__detailL19__atomic_spin_countE+0x4b1>
   1fff7:	48 89 ce             	mov    %rcx,%rsi
   1fffa:	48 89 c7             	mov    %rax,%rdi
   1fffd:	ff d2                	call   *%rdx
   1ffff:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20003:	48 89 82 30 01 00 00 	mov    %rax,0x130(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT" ) );
   2000a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2000e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20012:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20016:	48 8d 0d 53 ab 00 00 	lea    0xab53(%rip),%rcx        # 2ab70 <_ZNSt8__detailL19__atomic_spin_countE+0x4cc>
   2001d:	48 89 ce             	mov    %rcx,%rsi
   20020:	48 89 c7             	mov    %rax,%rdi
   20023:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceCapabilities2EXT =
   20025:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20029:	48 89 82 48 01 00 00 	mov    %rax,0x148(%rdx)
        vkCreateHeadlessSurfaceEXT = PFN_vkCreateHeadlessSurfaceEXT( vkGetInstanceProcAddr( instance, "vkCreateHeadlessSurfaceEXT" ) );
   20030:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20034:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20038:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2003c:	48 8d 0d 58 ab 00 00 	lea    0xab58(%rip),%rcx        # 2ab9b <_ZNSt8__detailL19__atomic_spin_countE+0x4f7>
   20043:	48 89 ce             	mov    %rcx,%rsi
   20046:	48 89 c7             	mov    %rax,%rdi
   20049:	ff d2                	call   *%rdx
   2004b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2004f:	48 89 82 58 01 00 00 	mov    %rax,0x158(%rdx)
          PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT" ) );
   20056:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2005a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2005e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20062:	48 8d 0d 4f ab 00 00 	lea    0xab4f(%rip),%rcx        # 2abb8 <_ZNSt8__detailL19__atomic_spin_countE+0x514>
   20069:	48 89 ce             	mov    %rcx,%rsi
   2006c:	48 89 c7             	mov    %rax,%rdi
   2006f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMultisamplePropertiesEXT =
   20071:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20075:	48 89 82 68 01 00 00 	mov    %rax,0x168(%rdx)
          PFN_vkGetPhysicalDeviceToolPropertiesEXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceToolPropertiesEXT" ) );
   2007c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20080:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20084:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20088:	48 8d 0d 59 ab 00 00 	lea    0xab59(%rip),%rcx        # 2abe8 <_ZNSt8__detailL19__atomic_spin_countE+0x544>
   2008f:	48 89 ce             	mov    %rcx,%rsi
   20092:	48 89 c7             	mov    %rax,%rdi
   20095:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceToolPropertiesEXT =
   20097:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2009b:	48 89 82 70 01 00 00 	mov    %rax,0x170(%rdx)
        if ( !vkGetPhysicalDeviceToolProperties )
   200a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   200a6:	48 8b 80 d0 00 00 00 	mov    0xd0(%rax),%rax
   200ad:	48 85 c0             	test   %rax,%rax
   200b0:	75 16                	jne    200c8 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xba2>
          vkGetPhysicalDeviceToolProperties = vkGetPhysicalDeviceToolPropertiesEXT;
   200b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   200b6:	48 8b 90 70 01 00 00 	mov    0x170(%rax),%rdx
   200bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   200c1:	48 89 90 d0 00 00 00 	mov    %rdx,0xd0(%rax)
          PFN_vkGetPhysicalDevicePresentRectanglesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDevicePresentRectanglesKHR" ) );
   200c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   200cc:	48 8b 50 50          	mov    0x50(%rax),%rdx
   200d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   200d4:	48 8d 0d 35 ab 00 00 	lea    0xab35(%rip),%rcx        # 2ac10 <_ZNSt8__detailL19__atomic_spin_countE+0x56c>
   200db:	48 89 ce             	mov    %rcx,%rsi
   200de:	48 89 c7             	mov    %rax,%rdi
   200e1:	ff d2                	call   *%rdx
        vkGetPhysicalDevicePresentRectanglesKHR =
   200e3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   200e7:	48 89 82 90 01 00 00 	mov    %rax,0x190(%rdx)
        vkEnumeratePhysicalDeviceGroupsKHR = PFN_vkEnumeratePhysicalDeviceGroupsKHR( vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDeviceGroupsKHR" ) );
   200ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   200f2:	48 8b 50 50          	mov    0x50(%rax),%rdx
   200f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   200fa:	48 8d 0d 37 ab 00 00 	lea    0xab37(%rip),%rcx        # 2ac38 <_ZNSt8__detailL19__atomic_spin_countE+0x594>
   20101:	48 89 ce             	mov    %rcx,%rsi
   20104:	48 89 c7             	mov    %rax,%rdi
   20107:	ff d2                	call   *%rdx
   20109:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2010d:	48 89 82 98 01 00 00 	mov    %rax,0x198(%rdx)
        if ( !vkEnumeratePhysicalDeviceGroups )
   20114:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20118:	48 8b 40 78          	mov    0x78(%rax),%rax
   2011c:	48 85 c0             	test   %rax,%rax
   2011f:	75 13                	jne    20134 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xc0e>
          vkEnumeratePhysicalDeviceGroups = vkEnumeratePhysicalDeviceGroupsKHR;
   20121:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20125:	48 8b 90 98 01 00 00 	mov    0x198(%rax),%rdx
   2012c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20130:	48 89 50 78          	mov    %rdx,0x78(%rax)
          PFN_vkGetPhysicalDeviceDisplayPropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayPropertiesKHR" ) );
   20134:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20138:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2013c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20140:	48 8d 0d 19 ab 00 00 	lea    0xab19(%rip),%rcx        # 2ac60 <_ZNSt8__detailL19__atomic_spin_countE+0x5bc>
   20147:	48 89 ce             	mov    %rcx,%rsi
   2014a:	48 89 c7             	mov    %rax,%rdi
   2014d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayPropertiesKHR =
   2014f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20153:	48 89 82 a0 01 00 00 	mov    %rax,0x1a0(%rdx)
          PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR" ) );
   2015a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2015e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20162:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20166:	48 8d 0d 1b ab 00 00 	lea    0xab1b(%rip),%rcx        # 2ac88 <_ZNSt8__detailL19__atomic_spin_countE+0x5e4>
   2016d:	48 89 ce             	mov    %rcx,%rsi
   20170:	48 89 c7             	mov    %rax,%rdi
   20173:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayPlanePropertiesKHR =
   20175:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20179:	48 89 82 a8 01 00 00 	mov    %rax,0x1a8(%rdx)
          PFN_vkGetDisplayPlaneSupportedDisplaysKHR( vkGetInstanceProcAddr( instance, "vkGetDisplayPlaneSupportedDisplaysKHR" ) );
   20180:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20184:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20188:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2018c:	48 8d 0d 25 ab 00 00 	lea    0xab25(%rip),%rcx        # 2acb8 <_ZNSt8__detailL19__atomic_spin_countE+0x614>
   20193:	48 89 ce             	mov    %rcx,%rsi
   20196:	48 89 c7             	mov    %rax,%rdi
   20199:	ff d2                	call   *%rdx
        vkGetDisplayPlaneSupportedDisplaysKHR =
   2019b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2019f:	48 89 82 b0 01 00 00 	mov    %rax,0x1b0(%rdx)
        vkGetDisplayModePropertiesKHR    = PFN_vkGetDisplayModePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetDisplayModePropertiesKHR" ) );
   201a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   201aa:	48 8b 50 50          	mov    0x50(%rax),%rdx
   201ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   201b2:	48 8d 0d 25 ab 00 00 	lea    0xab25(%rip),%rcx        # 2acde <_ZNSt8__detailL19__atomic_spin_countE+0x63a>
   201b9:	48 89 ce             	mov    %rcx,%rsi
   201bc:	48 89 c7             	mov    %rax,%rdi
   201bf:	ff d2                	call   *%rdx
   201c1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   201c5:	48 89 82 b8 01 00 00 	mov    %rax,0x1b8(%rdx)
        vkCreateDisplayModeKHR           = PFN_vkCreateDisplayModeKHR( vkGetInstanceProcAddr( instance, "vkCreateDisplayModeKHR" ) );
   201cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   201d0:	48 8b 50 50          	mov    0x50(%rax),%rdx
   201d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   201d8:	48 8d 0d 1d ab 00 00 	lea    0xab1d(%rip),%rcx        # 2acfc <_ZNSt8__detailL19__atomic_spin_countE+0x658>
   201df:	48 89 ce             	mov    %rcx,%rsi
   201e2:	48 89 c7             	mov    %rax,%rdi
   201e5:	ff d2                	call   *%rdx
   201e7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   201eb:	48 89 82 c0 01 00 00 	mov    %rax,0x1c0(%rdx)
        vkGetDisplayPlaneCapabilitiesKHR = PFN_vkGetDisplayPlaneCapabilitiesKHR( vkGetInstanceProcAddr( instance, "vkGetDisplayPlaneCapabilitiesKHR" ) );
   201f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   201f6:	48 8b 50 50          	mov    0x50(%rax),%rdx
   201fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   201fe:	48 8d 0d 13 ab 00 00 	lea    0xab13(%rip),%rcx        # 2ad18 <_ZNSt8__detailL19__atomic_spin_countE+0x674>
   20205:	48 89 ce             	mov    %rcx,%rsi
   20208:	48 89 c7             	mov    %rax,%rdi
   2020b:	ff d2                	call   *%rdx
   2020d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20211:	48 89 82 c8 01 00 00 	mov    %rax,0x1c8(%rdx)
        vkCreateDisplayPlaneSurfaceKHR   = PFN_vkCreateDisplayPlaneSurfaceKHR( vkGetInstanceProcAddr( instance, "vkCreateDisplayPlaneSurfaceKHR" ) );
   20218:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2021c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20220:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20224:	48 8d 0d 15 ab 00 00 	lea    0xab15(%rip),%rcx        # 2ad40 <_ZNSt8__detailL19__atomic_spin_countE+0x69c>
   2022b:	48 89 ce             	mov    %rcx,%rsi
   2022e:	48 89 c7             	mov    %rax,%rdi
   20231:	ff d2                	call   *%rdx
   20233:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20237:	48 89 82 d0 01 00 00 	mov    %rax,0x1d0(%rdx)
          PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR" ) );
   2023e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20242:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20246:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2024a:	48 8d 0d 0f ab 00 00 	lea    0xab0f(%rip),%rcx        # 2ad60 <_ZNSt8__detailL19__atomic_spin_countE+0x6bc>
   20251:	48 89 ce             	mov    %rcx,%rsi
   20254:	48 89 c7             	mov    %rax,%rdi
   20257:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalFencePropertiesKHR =
   20259:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2025d:	48 89 82 d8 01 00 00 	mov    %rax,0x1d8(%rdx)
        if ( !vkGetPhysicalDeviceExternalFenceProperties )
   20264:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20268:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
   2026f:	48 85 c0             	test   %rax,%rax
   20272:	75 16                	jne    2028a <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xd64>
          vkGetPhysicalDeviceExternalFenceProperties = vkGetPhysicalDeviceExternalFencePropertiesKHR;
   20274:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20278:	48 8b 90 d8 01 00 00 	mov    0x1d8(%rax),%rdx
   2027f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20283:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
          PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR" ) );
   2028a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2028e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20292:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20296:	48 8d 0d f3 aa 00 00 	lea    0xaaf3(%rip),%rcx        # 2ad90 <_ZNSt8__detailL19__atomic_spin_countE+0x6ec>
   2029d:	48 89 ce             	mov    %rcx,%rsi
   202a0:	48 89 c7             	mov    %rax,%rdi
   202a3:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalBufferPropertiesKHR =
   202a5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   202a9:	48 89 82 e0 01 00 00 	mov    %rax,0x1e0(%rdx)
        if ( !vkGetPhysicalDeviceExternalBufferProperties )
   202b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   202b4:	48 8b 80 b8 00 00 00 	mov    0xb8(%rax),%rax
   202bb:	48 85 c0             	test   %rax,%rax
   202be:	75 16                	jne    202d6 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xdb0>
          vkGetPhysicalDeviceExternalBufferProperties = vkGetPhysicalDeviceExternalBufferPropertiesKHR;
   202c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   202c4:	48 8b 90 e0 01 00 00 	mov    0x1e0(%rax),%rdx
   202cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   202cf:	48 89 90 b8 00 00 00 	mov    %rdx,0xb8(%rax)
          PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR" ) );
   202d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   202da:	48 8b 50 50          	mov    0x50(%rax),%rdx
   202de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   202e2:	48 8d 0d d7 aa 00 00 	lea    0xaad7(%rip),%rcx        # 2adc0 <_ZNSt8__detailL19__atomic_spin_countE+0x71c>
   202e9:	48 89 ce             	mov    %rcx,%rsi
   202ec:	48 89 c7             	mov    %rax,%rdi
   202ef:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalSemaphorePropertiesKHR =
   202f1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   202f5:	48 89 82 e8 01 00 00 	mov    %rax,0x1e8(%rdx)
        if ( !vkGetPhysicalDeviceExternalSemaphoreProperties )
   202fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20300:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax
   20307:	48 85 c0             	test   %rax,%rax
   2030a:	75 16                	jne    20322 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xdfc>
          vkGetPhysicalDeviceExternalSemaphoreProperties = vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
   2030c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20310:	48 8b 90 e8 01 00 00 	mov    0x1e8(%rax),%rdx
   20317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2031b:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)
          PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR" ) );
   20322:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20326:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2032a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2032e:	48 8d 0d c3 aa 00 00 	lea    0xaac3(%rip),%rcx        # 2adf8 <_ZNSt8__detailL19__atomic_spin_countE+0x754>
   20335:	48 89 ce             	mov    %rcx,%rsi
   20338:	48 89 c7             	mov    %rax,%rdi
   2033b:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFragmentShadingRatesKHR =
   2033d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20341:	48 89 82 f0 01 00 00 	mov    %rax,0x1f0(%rdx)
          PFN_vkGetPhysicalDeviceDisplayProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayProperties2KHR" ) );
   20348:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2034c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20350:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20354:	48 8d 0d cd aa 00 00 	lea    0xaacd(%rip),%rcx        # 2ae28 <_ZNSt8__detailL19__atomic_spin_countE+0x784>
   2035b:	48 89 ce             	mov    %rcx,%rsi
   2035e:	48 89 c7             	mov    %rax,%rdi
   20361:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayProperties2KHR =
   20363:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20367:	48 89 82 f8 01 00 00 	mov    %rax,0x1f8(%rdx)
          PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR" ) );
   2036e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20372:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20376:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2037a:	48 8d 0d d7 aa 00 00 	lea    0xaad7(%rip),%rcx        # 2ae58 <_ZNSt8__detailL19__atomic_spin_countE+0x7b4>
   20381:	48 89 ce             	mov    %rcx,%rsi
   20384:	48 89 c7             	mov    %rax,%rdi
   20387:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayPlaneProperties2KHR =
   20389:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2038d:	48 89 82 00 02 00 00 	mov    %rax,0x200(%rdx)
        vkGetDisplayModeProperties2KHR    = PFN_vkGetDisplayModeProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetDisplayModeProperties2KHR" ) );
   20394:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20398:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2039c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   203a0:	48 8d 0d e1 aa 00 00 	lea    0xaae1(%rip),%rcx        # 2ae88 <_ZNSt8__detailL19__atomic_spin_countE+0x7e4>
   203a7:	48 89 ce             	mov    %rcx,%rsi
   203aa:	48 89 c7             	mov    %rax,%rdi
   203ad:	ff d2                	call   *%rdx
   203af:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   203b3:	48 89 82 08 02 00 00 	mov    %rax,0x208(%rdx)
        vkGetDisplayPlaneCapabilities2KHR = PFN_vkGetDisplayPlaneCapabilities2KHR( vkGetInstanceProcAddr( instance, "vkGetDisplayPlaneCapabilities2KHR" ) );
   203ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   203be:	48 8b 50 50          	mov    0x50(%rax),%rdx
   203c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   203c6:	48 8d 0d db aa 00 00 	lea    0xaadb(%rip),%rcx        # 2aea8 <_ZNSt8__detailL19__atomic_spin_countE+0x804>
   203cd:	48 89 ce             	mov    %rcx,%rsi
   203d0:	48 89 c7             	mov    %rax,%rdi
   203d3:	ff d2                	call   *%rdx
   203d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   203d9:	48 89 82 10 02 00 00 	mov    %rax,0x210(%rdx)
        vkGetPhysicalDeviceFeatures2KHR = PFN_vkGetPhysicalDeviceFeatures2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFeatures2KHR" ) );
   203e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   203e4:	48 8b 50 50          	mov    0x50(%rax),%rdx
   203e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   203ec:	48 8d 0d dd aa 00 00 	lea    0xaadd(%rip),%rcx        # 2aed0 <_ZNSt8__detailL19__atomic_spin_countE+0x82c>
   203f3:	48 89 ce             	mov    %rcx,%rsi
   203f6:	48 89 c7             	mov    %rax,%rdi
   203f9:	ff d2                	call   *%rdx
   203fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   203ff:	48 89 82 18 02 00 00 	mov    %rax,0x218(%rdx)
        if ( !vkGetPhysicalDeviceFeatures2 )
   20406:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2040a:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   20411:	48 85 c0             	test   %rax,%rax
   20414:	75 16                	jne    2042c <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xf06>
          vkGetPhysicalDeviceFeatures2 = vkGetPhysicalDeviceFeatures2KHR;
   20416:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2041a:	48 8b 90 18 02 00 00 	mov    0x218(%rax),%rdx
   20421:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20425:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
        vkGetPhysicalDeviceProperties2KHR = PFN_vkGetPhysicalDeviceProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceProperties2KHR" ) );
   2042c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20430:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20434:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20438:	48 8d 0d b1 aa 00 00 	lea    0xaab1(%rip),%rcx        # 2aef0 <_ZNSt8__detailL19__atomic_spin_countE+0x84c>
   2043f:	48 89 ce             	mov    %rcx,%rsi
   20442:	48 89 c7             	mov    %rax,%rdi
   20445:	ff d2                	call   *%rdx
   20447:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2044b:	48 89 82 20 02 00 00 	mov    %rax,0x220(%rdx)
        if ( !vkGetPhysicalDeviceProperties2 )
   20452:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20456:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
   2045d:	48 85 c0             	test   %rax,%rax
   20460:	75 16                	jne    20478 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xf52>
          vkGetPhysicalDeviceProperties2 = vkGetPhysicalDeviceProperties2KHR;
   20462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20466:	48 8b 90 20 02 00 00 	mov    0x220(%rax),%rdx
   2046d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20471:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
          PFN_vkGetPhysicalDeviceFormatProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFormatProperties2KHR" ) );
   20478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2047c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20480:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20484:	48 8d 0d 8d aa 00 00 	lea    0xaa8d(%rip),%rcx        # 2af18 <_ZNSt8__detailL19__atomic_spin_countE+0x874>
   2048b:	48 89 ce             	mov    %rcx,%rsi
   2048e:	48 89 c7             	mov    %rax,%rdi
   20491:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFormatProperties2KHR =
   20493:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20497:	48 89 82 28 02 00 00 	mov    %rax,0x228(%rdx)
        if ( !vkGetPhysicalDeviceFormatProperties2 )
   2049e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   204a2:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   204a9:	48 85 c0             	test   %rax,%rax
   204ac:	75 16                	jne    204c4 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xf9e>
          vkGetPhysicalDeviceFormatProperties2 = vkGetPhysicalDeviceFormatProperties2KHR;
   204ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   204b2:	48 8b 90 28 02 00 00 	mov    0x228(%rax),%rdx
   204b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   204bd:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
          PFN_vkGetPhysicalDeviceImageFormatProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceImageFormatProperties2KHR" ) );
   204c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   204c8:	48 8b 50 50          	mov    0x50(%rax),%rdx
   204cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   204d0:	48 8d 0d 69 aa 00 00 	lea    0xaa69(%rip),%rcx        # 2af40 <_ZNSt8__detailL19__atomic_spin_countE+0x89c>
   204d7:	48 89 ce             	mov    %rcx,%rsi
   204da:	48 89 c7             	mov    %rax,%rdi
   204dd:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceImageFormatProperties2KHR =
   204df:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   204e3:	48 89 82 30 02 00 00 	mov    %rax,0x230(%rdx)
        if ( !vkGetPhysicalDeviceImageFormatProperties2 )
   204ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   204ee:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   204f5:	48 85 c0             	test   %rax,%rax
   204f8:	75 16                	jne    20510 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xfea>
          vkGetPhysicalDeviceImageFormatProperties2 = vkGetPhysicalDeviceImageFormatProperties2KHR;
   204fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   204fe:	48 8b 90 30 02 00 00 	mov    0x230(%rax),%rdx
   20505:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20509:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
          PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR" ) );
   20510:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20514:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20518:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2051c:	48 8d 0d 4d aa 00 00 	lea    0xaa4d(%rip),%rcx        # 2af70 <_ZNSt8__detailL19__atomic_spin_countE+0x8cc>
   20523:	48 89 ce             	mov    %rcx,%rsi
   20526:	48 89 c7             	mov    %rax,%rdi
   20529:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyProperties2KHR =
   2052b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2052f:	48 89 82 38 02 00 00 	mov    %rax,0x238(%rdx)
        if ( !vkGetPhysicalDeviceQueueFamilyProperties2 )
   20536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2053a:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
   20541:	48 85 c0             	test   %rax,%rax
   20544:	75 16                	jne    2055c <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0x1036>
          vkGetPhysicalDeviceQueueFamilyProperties2 = vkGetPhysicalDeviceQueueFamilyProperties2KHR;
   20546:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2054a:	48 8b 90 38 02 00 00 	mov    0x238(%rax),%rdx
   20551:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20555:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
          PFN_vkGetPhysicalDeviceMemoryProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMemoryProperties2KHR" ) );
   2055c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20560:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20564:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20568:	48 8d 0d 31 aa 00 00 	lea    0xaa31(%rip),%rcx        # 2afa0 <_ZNSt8__detailL19__atomic_spin_countE+0x8fc>
   2056f:	48 89 ce             	mov    %rcx,%rsi
   20572:	48 89 c7             	mov    %rax,%rdi
   20575:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMemoryProperties2KHR =
   20577:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2057b:	48 89 82 40 02 00 00 	mov    %rax,0x240(%rdx)
        if ( !vkGetPhysicalDeviceMemoryProperties2 )
   20582:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20586:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
   2058d:	48 85 c0             	test   %rax,%rax
   20590:	75 16                	jne    205a8 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0x1082>
          vkGetPhysicalDeviceMemoryProperties2 = vkGetPhysicalDeviceMemoryProperties2KHR;
   20592:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20596:	48 8b 90 40 02 00 00 	mov    0x240(%rax),%rdx
   2059d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   205a1:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
          PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR" ) );
   205a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   205ac:	48 8b 50 50          	mov    0x50(%rax),%rdx
   205b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   205b4:	48 8d 0d 0d aa 00 00 	lea    0xaa0d(%rip),%rcx        # 2afc8 <_ZNSt8__detailL19__atomic_spin_countE+0x924>
   205bb:	48 89 ce             	mov    %rcx,%rsi
   205be:	48 89 c7             	mov    %rax,%rdi
   205c1:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSparseImageFormatProperties2KHR =
   205c3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   205c7:	48 89 82 48 02 00 00 	mov    %rax,0x248(%rdx)
        if ( !vkGetPhysicalDeviceSparseImageFormatProperties2 )
   205ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   205d2:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
   205d9:	48 85 c0             	test   %rax,%rax
   205dc:	75 16                	jne    205f4 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0x10ce>
          vkGetPhysicalDeviceSparseImageFormatProperties2 = vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
   205de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   205e2:	48 8b 90 48 02 00 00 	mov    0x248(%rax),%rdx
   205e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   205ed:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
          PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR" ) );
   205f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   205f8:	48 8b 50 50          	mov    0x50(%rax),%rdx
   205fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20600:	48 8d 0d f9 a9 00 00 	lea    0xa9f9(%rip),%rcx        # 2b000 <_ZNSt8__detailL19__atomic_spin_countE+0x95c>
   20607:	48 89 ce             	mov    %rcx,%rsi
   2060a:	48 89 c7             	mov    %rax,%rdi
   2060d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceCapabilities2KHR =
   2060f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20613:	48 89 82 50 02 00 00 	mov    %rax,0x250(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceFormats2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceFormats2KHR" ) );
   2061a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2061e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20622:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20626:	48 8d 0d 03 aa 00 00 	lea    0xaa03(%rip),%rcx        # 2b030 <_ZNSt8__detailL19__atomic_spin_countE+0x98c>
   2062d:	48 89 ce             	mov    %rcx,%rsi
   20630:	48 89 c7             	mov    %rax,%rdi
   20633:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceFormats2KHR =
   20635:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20639:	48 89 82 58 02 00 00 	mov    %rax,0x258(%rdx)
          vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR" ) );
   20640:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20644:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20648:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2064c:	48 8d 0d 05 aa 00 00 	lea    0xaa05(%rip),%rcx        # 2b058 <_ZNSt8__detailL19__atomic_spin_countE+0x9b4>
   20653:	48 89 ce             	mov    %rcx,%rsi
   20656:	48 89 c7             	mov    %rax,%rdi
   20659:	ff d2                	call   *%rdx
        vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
   2065b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2065f:	48 89 82 60 02 00 00 	mov    %rax,0x260(%rdx)
          vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR" ) );
   20666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2066a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2066e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20672:	48 8d 0d 1f aa 00 00 	lea    0xaa1f(%rip),%rcx        # 2b098 <_ZNSt8__detailL19__atomic_spin_countE+0x9f4>
   20679:	48 89 ce             	mov    %rcx,%rsi
   2067c:	48 89 c7             	mov    %rax,%rdi
   2067f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
   20681:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20685:	48 89 82 68 02 00 00 	mov    %rax,0x268(%rdx)
        vkDestroySurfaceKHR = PFN_vkDestroySurfaceKHR( vkGetInstanceProcAddr( instance, "vkDestroySurfaceKHR" ) );
   2068c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20690:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20694:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20698:	48 8d 0d 31 aa 00 00 	lea    0xaa31(%rip),%rcx        # 2b0d0 <_ZNSt8__detailL19__atomic_spin_countE+0xa2c>
   2069f:	48 89 ce             	mov    %rcx,%rsi
   206a2:	48 89 c7             	mov    %rax,%rdi
   206a5:	ff d2                	call   *%rdx
   206a7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   206ab:	48 89 82 70 02 00 00 	mov    %rax,0x270(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceSupportKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceSupportKHR" ) );
   206b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   206b6:	48 8b 50 50          	mov    0x50(%rax),%rdx
   206ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   206be:	48 8d 0d 23 aa 00 00 	lea    0xaa23(%rip),%rcx        # 2b0e8 <_ZNSt8__detailL19__atomic_spin_countE+0xa44>
   206c5:	48 89 ce             	mov    %rcx,%rsi
   206c8:	48 89 c7             	mov    %rax,%rdi
   206cb:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceSupportKHR =
   206cd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   206d1:	48 89 82 78 02 00 00 	mov    %rax,0x278(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR" ) );
   206d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   206dc:	48 8b 50 50          	mov    0x50(%rax),%rdx
   206e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   206e4:	48 8d 0d 25 aa 00 00 	lea    0xaa25(%rip),%rcx        # 2b110 <_ZNSt8__detailL19__atomic_spin_countE+0xa6c>
   206eb:	48 89 ce             	mov    %rcx,%rsi
   206ee:	48 89 c7             	mov    %rax,%rdi
   206f1:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceCapabilitiesKHR =
   206f3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   206f7:	48 89 82 80 02 00 00 	mov    %rax,0x280(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceFormatsKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceFormatsKHR" ) );
   206fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20702:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20706:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2070a:	48 8d 0d 2f aa 00 00 	lea    0xaa2f(%rip),%rcx        # 2b140 <_ZNSt8__detailL19__atomic_spin_countE+0xa9c>
   20711:	48 89 ce             	mov    %rcx,%rsi
   20714:	48 89 c7             	mov    %rax,%rdi
   20717:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceFormatsKHR =
   20719:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2071d:	48 89 82 88 02 00 00 	mov    %rax,0x288(%rdx)
          PFN_vkGetPhysicalDeviceSurfacePresentModesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfacePresentModesKHR" ) );
   20724:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20728:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2072c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20730:	48 8d 0d 31 aa 00 00 	lea    0xaa31(%rip),%rcx        # 2b168 <_ZNSt8__detailL19__atomic_spin_countE+0xac4>
   20737:	48 89 ce             	mov    %rcx,%rsi
   2073a:	48 89 c7             	mov    %rax,%rdi
   2073d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfacePresentModesKHR =
   2073f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20743:	48 89 82 90 02 00 00 	mov    %rax,0x290(%rdx)
          PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" ) );
   2074a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2074e:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20752:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20756:	48 8d 0d 3b aa 00 00 	lea    0xaa3b(%rip),%rcx        # 2b198 <_ZNSt8__detailL19__atomic_spin_countE+0xaf4>
   2075d:	48 89 ce             	mov    %rcx,%rsi
   20760:	48 89 c7             	mov    %rax,%rdi
   20763:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceCooperativeMatrixPropertiesNV =
   20765:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20769:	48 89 82 10 03 00 00 	mov    %rax,0x310(%rdx)
          vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV" ) );
   20770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20774:	48 8b 50 50          	mov    0x50(%rax),%rdx
   20778:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2077c:	48 8d 0d 4d aa 00 00 	lea    0xaa4d(%rip),%rcx        # 2b1d0 <_ZNSt8__detailL19__atomic_spin_countE+0xb2c>
   20783:	48 89 ce             	mov    %rcx,%rsi
   20786:	48 89 c7             	mov    %rax,%rdi
   20789:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
   2078b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2078f:	48 89 82 18 03 00 00 	mov    %rax,0x318(%rdx)
          PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV" ) );
   20796:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2079a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2079e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   207a2:	48 8d 0d 6f aa 00 00 	lea    0xaa6f(%rip),%rcx        # 2b218 <_ZNSt8__detailL19__atomic_spin_countE+0xb74>
   207a9:	48 89 ce             	mov    %rcx,%rsi
   207ac:	48 89 c7             	mov    %rax,%rdi
   207af:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalImageFormatPropertiesNV =
   207b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   207b5:	48 89 82 20 03 00 00 	mov    %rax,0x320(%rdx)
          PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV" ) );
   207bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   207c0:	48 8b 50 50          	mov    0x50(%rax),%rdx
   207c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   207c8:	48 8d 0d 81 aa 00 00 	lea    0xaa81(%rip),%rcx        # 2b250 <_ZNSt8__detailL19__atomic_spin_countE+0xbac>
   207cf:	48 89 ce             	mov    %rcx,%rsi
   207d2:	48 89 c7             	mov    %rax,%rdi
   207d5:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceOpticalFlowImageFormatsNV =
   207d7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   207db:	48 89 82 28 03 00 00 	mov    %rax,0x328(%rdx)
        vkGetDeviceProcAddr = PFN_vkGetDeviceProcAddr( vkGetInstanceProcAddr( instance, "vkGetDeviceProcAddr" ) );
   207e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   207e6:	48 8b 50 50          	mov    0x50(%rax),%rdx
   207ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   207ee:	48 8d 0d 88 aa 00 00 	lea    0xaa88(%rip),%rcx        # 2b27d <_ZNSt8__detailL19__atomic_spin_countE+0xbd9>
   207f5:	48 89 ce             	mov    %rcx,%rsi
   207f8:	48 89 c7             	mov    %rax,%rdi
   207fb:	ff d2                	call   *%rdx
   207fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20801:	48 89 82 40 03 00 00 	mov    %rax,0x340(%rdx)
      }
   20808:	90                   	nop
   20809:	c9                   	leave
   2080a:	c3                   	ret
   2080b:	90                   	nop

000000000002080c <_ZNK2vk4raii7Context13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher const * getDispatcher() const
   2080c:	55                   	push   %rbp
   2080d:	48 89 e5             	mov    %rsp,%rbp
   20810:	48 83 ec 10          	sub    $0x10,%rsp
   20814:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
   20818:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2081c:	48 83 c0 08          	add    $0x8,%rax
   20820:	48 89 c7             	mov    %rax,%rdi
   20823:	e8 d6 03 00 00       	call   20bfe <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEptEv>
   20828:	48 89 c7             	mov    %rax,%rdi
   2082b:	e8 22 5d fe ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   20830:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   20836:	74 28                	je     20860 <_ZNK2vk4raii7Context13getDispatcherEv+0x54>
   20838:	48 8d 05 59 aa 00 00 	lea    0xaa59(%rip),%rax        # 2b298 <_ZNSt8__detailL19__atomic_spin_countE+0xbf4>
   2083f:	48 89 c1             	mov    %rax,%rcx
   20842:	ba b1 09 00 00       	mov    $0x9b1,%edx
   20847:	48 8d 05 9a aa 00 00 	lea    0xaa9a(%rip),%rax        # 2b2e8 <_ZNSt8__detailL19__atomic_spin_countE+0xc44>
   2084e:	48 89 c6             	mov    %rax,%rsi
   20851:	48 8d 05 b8 aa 00 00 	lea    0xaab8(%rip),%rax        # 2b310 <_ZNSt8__detailL19__atomic_spin_countE+0xc6c>
   20858:	48 89 c7             	mov    %rax,%rdi
   2085b:	e8 b0 48 fe ff       	call   5110 <__assert_fail@plt>
        return &*m_dispatcher;
   20860:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20864:	48 83 c0 08          	add    $0x8,%rax
   20868:	48 89 c7             	mov    %rax,%rdi
   2086b:	e8 a8 03 00 00       	call   20c18 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv>
      }
   20870:	c9                   	leave
   20871:	c3                   	ret

0000000000020872 <_ZN2vk8InstanceC1Ev>:
    VULKAN_HPP_CONSTEXPR Instance() = default;
   20872:	55                   	push   %rbp
   20873:	48 89 e5             	mov    %rsp,%rbp
   20876:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2087a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2087e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   20885:	90                   	nop
   20886:	5d                   	pop    %rbp
   20887:	c3                   	ret

0000000000020888 <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      Instance( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Context const &                context,
   20888:	55                   	push   %rbp
   20889:	48 89 e5             	mov    %rsp,%rbp
   2088c:	41 55                	push   %r13
   2088e:	41 54                	push   %r12
   20890:	53                   	push   %rbx
   20891:	48 83 ec 48          	sub    $0x48,%rsp
   20895:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   20899:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   2089d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   208a1:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   208a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   208a9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   208b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   208b4:	48 89 c7             	mov    %rax,%rdi
   208b7:	e8 b6 ff ff ff       	call   20872 <_ZN2vk8InstanceC1Ev>
   208bc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   208c0:	48 89 c7             	mov    %rax,%rdi
   208c3:	e8 54 68 ff ff       	call   1711c <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   208c8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   208cc:	48 89 42 08          	mov    %rax,0x8(%rdx)
   208d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   208d4:	48 83 c0 10          	add    $0x10,%rax
   208d8:	48 89 c7             	mov    %rax,%rdi
   208db:	e8 b2 03 00 00       	call   20c92 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>
          static_cast<VULKAN_HPP_NAMESPACE::Result>( context.getDispatcher()->vkCreateInstance( reinterpret_cast<const VkInstanceCreateInfo *>( &createInfo ),
   208e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   208e4:	48 89 c7             	mov    %rax,%rdi
   208e7:	e8 20 ff ff ff       	call   2080c <_ZNK2vk4raii7Context13getDispatcherEv>
   208ec:	4c 8b 40 18          	mov    0x18(%rax),%r8
                                                                                                reinterpret_cast<VkInstance *>( &m_instance ) ) );
   208f0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
                                                                                                reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   208f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   208f8:	48 8b 48 08          	mov    0x8(%rax),%rcx
          static_cast<VULKAN_HPP_NAMESPACE::Result>( context.getDispatcher()->vkCreateInstance( reinterpret_cast<const VkInstanceCreateInfo *>( &createInfo ),
   208fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   20900:	48 89 ce             	mov    %rcx,%rsi
   20903:	48 89 c7             	mov    %rax,%rdi
   20906:	41 ff d0             	call   *%r8
   20909:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   2090c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   20910:	74 14                	je     20926 <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x9e>
          throwResultException( result, "vkCreateInstance" );
   20912:	8b 45 dc             	mov    -0x24(%rbp),%eax
   20915:	48 8d 15 2c aa 00 00 	lea    0xaa2c(%rip),%rdx        # 2b348 <_ZNSt8__detailL19__atomic_spin_countE+0xca4>
   2091c:	48 89 d6             	mov    %rdx,%rsi
   2091f:	89 c7                	mov    %eax,%edi
   20921:	e8 2d d9 ff ff       	call   1e253 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   20926:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2092a:	48 8d 58 10          	lea    0x10(%rax),%rbx
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   2092e:	bf 48 03 00 00       	mov    $0x348,%edi
   20933:	e8 e8 48 fe ff       	call   5220 <_Znwm@plt>
   20938:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   2093c:	41 bd 01 00 00 00    	mov    $0x1,%r13d
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   20942:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   20946:	48 89 c7             	mov    %rax,%rdi
   20949:	e8 46 87 fe ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   2094e:	49 89 c4             	mov    %rax,%r12
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   20951:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   20955:	48 89 c7             	mov    %rax,%rdi
   20958:	e8 af fe ff ff       	call   2080c <_ZNK2vk4raii7Context13getDispatcherEv>
   2095d:	48 8b 40 10          	mov    0x10(%rax),%rax
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   20961:	4c 89 e2             	mov    %r12,%rdx
   20964:	48 89 c6             	mov    %rax,%rsi
   20967:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   2096b:	e8 b6 eb ff ff       	call   1f526 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   20970:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   20974:	48 89 df             	mov    %rbx,%rdi
   20977:	e8 82 99 fe ff       	call   a2fe <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
   2097c:	eb 36                	jmp    209b4 <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x12c>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   2097e:	48 89 c3             	mov    %rax,%rbx
   20981:	45 84 ed             	test   %r13b,%r13b
   20984:	74 13                	je     20999 <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x111>
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   20986:	be 48 03 00 00       	mov    $0x348,%esi
   2098b:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   2098f:	e8 9c 48 fe ff       	call   5230 <_ZdlPvm@plt>
   20994:	eb 03                	jmp    20999 <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x111>
      }
   20996:	48 89 c3             	mov    %rax,%rbx
   20999:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2099d:	48 83 c0 10          	add    $0x10,%rax
   209a1:	48 89 c7             	mov    %rax,%rdi
   209a4:	e8 f1 98 fe ff       	call   a29a <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev>
   209a9:	48 89 d8             	mov    %rbx,%rax
   209ac:	48 89 c7             	mov    %rax,%rdi
   209af:	e8 ec 49 fe ff       	call   53a0 <_Unwind_Resume@plt>
   209b4:	48 83 c4 48          	add    $0x48,%rsp
   209b8:	5b                   	pop    %rbx
   209b9:	41 5c                	pop    %r12
   209bb:	41 5d                	pop    %r13
   209bd:	5d                   	pop    %rbp
   209be:	c3                   	ret
   209bf:	90                   	nop

00000000000209c0 <_ZN2vk22DebugUtilsMessengerEXTC1Ev>:
    VULKAN_HPP_CONSTEXPR         DebugUtilsMessengerEXT() = default;
   209c0:	55                   	push   %rbp
   209c1:	48 89 e5             	mov    %rsp,%rbp
   209c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   209c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   209cc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   209d3:	90                   	nop
   209d4:	5d                   	pop    %rbp
   209d5:	c3                   	ret

00000000000209d6 <_ZN2vk4raii22DebugUtilsMessengerEXTC1ERKNS0_8InstanceERKNS_32DebugUtilsMessengerCreateInfoEXTENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      DebugUtilsMessengerEXT( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const &               instance,
   209d6:	55                   	push   %rbp
   209d7:	48 89 e5             	mov    %rsp,%rbp
   209da:	41 55                	push   %r13
   209dc:	41 54                	push   %r12
   209de:	53                   	push   %rbx
   209df:	48 83 ec 38          	sub    $0x38,%rsp
   209e3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   209e7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   209eb:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   209ef:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_instance( *instance )
   209f3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   209f7:	48 89 c7             	mov    %rax,%rdi
   209fa:	e8 a1 54 ff ff       	call   15ea0 <_ZNK2vk4raii8InstancedeEv>
   209ff:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   20a03:	48 8b 00             	mov    (%rax),%rax
   20a06:	48 89 02             	mov    %rax,(%rdx)
        , m_dispatcher( instance.getDispatcher() )
   20a09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   20a0d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   20a14:	00 
   20a15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   20a19:	48 83 c0 08          	add    $0x8,%rax
   20a1d:	48 89 c7             	mov    %rax,%rdi
   20a20:	e8 9b ff ff ff       	call   209c0 <_ZN2vk22DebugUtilsMessengerEXTC1Ev>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   20a25:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20a29:	48 89 c7             	mov    %rax,%rdi
   20a2c:	e8 eb 66 ff ff       	call   1711c <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   20a31:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   20a35:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( instance.getDispatcher() )
   20a39:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   20a3d:	48 89 c7             	mov    %rax,%rdi
   20a40:	e8 c5 89 fe ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   20a45:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   20a49:	48 89 42 18          	mov    %rax,0x18(%rdx)
          instance.getDispatcher()->vkCreateDebugUtilsMessengerEXT( static_cast<VkInstance>( *instance ),
   20a4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   20a51:	48 89 c7             	mov    %rax,%rdi
   20a54:	e8 b1 89 fe ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   20a59:	4c 8b a0 18 01 00 00 	mov    0x118(%rax),%r12
                                                                    reinterpret_cast<VkDebugUtilsMessengerEXT *>( &m_messenger ) ) );
   20a60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   20a64:	4c 8d 68 08          	lea    0x8(%rax),%r13
                                                                    reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   20a68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   20a6c:	48 8b 58 10          	mov    0x10(%rax),%rbx
          instance.getDispatcher()->vkCreateDebugUtilsMessengerEXT( static_cast<VkInstance>( *instance ),
   20a70:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   20a74:	48 89 c7             	mov    %rax,%rdi
   20a77:	e8 24 54 ff ff       	call   15ea0 <_ZNK2vk4raii8InstancedeEv>
   20a7c:	48 89 c7             	mov    %rax,%rdi
   20a7f:	e8 10 86 fe ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   20a84:	48 89 c7             	mov    %rax,%rdi
   20a87:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   20a8b:	4c 89 e9             	mov    %r13,%rcx
   20a8e:	48 89 da             	mov    %rbx,%rdx
   20a91:	48 89 c6             	mov    %rax,%rsi
   20a94:	41 ff d4             	call   *%r12
   20a97:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   20a9a:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   20a9e:	74 14                	je     20ab4 <_ZN2vk4raii22DebugUtilsMessengerEXTC1ERKNS0_8InstanceERKNS_32DebugUtilsMessengerCreateInfoEXTENS_8OptionalIKNS_19AllocationCallbacksEEE+0xde>
          throwResultException( result, "vkCreateDebugUtilsMessengerEXT" );
   20aa0:	8b 45 dc             	mov    -0x24(%rbp),%eax
   20aa3:	48 8d 15 4e a0 00 00 	lea    0xa04e(%rip),%rdx        # 2aaf8 <_ZNSt8__detailL19__atomic_spin_countE+0x454>
   20aaa:	48 89 d6             	mov    %rdx,%rsi
   20aad:	89 c7                	mov    %eax,%edi
   20aaf:	e8 9f d7 ff ff       	call   1e253 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   20ab4:	90                   	nop
   20ab5:	48 83 c4 38          	add    $0x38,%rsp
   20ab9:	5b                   	pop    %rbx
   20aba:	41 5c                	pop    %r12
   20abc:	41 5d                	pop    %r13
   20abe:	5d                   	pop    %rbp
   20abf:	c3                   	ret

0000000000020ac0 <_ZN2vk4raii10SurfaceKHRC1ERKNS0_8InstanceEP14VkSurfaceKHR_TNS_8OptionalIKNS_19AllocationCallbacksEEE>:
      SurfaceKHR( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const &               instance,
   20ac0:	55                   	push   %rbp
   20ac1:	48 89 e5             	mov    %rsp,%rbp
   20ac4:	48 83 ec 20          	sub    $0x20,%rsp
   20ac8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20acc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20ad0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20ad4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
        : m_instance( *instance )
   20ad8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20adc:	48 89 c7             	mov    %rax,%rdi
   20adf:	e8 bc 53 ff ff       	call   15ea0 <_ZNK2vk4raii8InstancedeEv>
   20ae4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20ae8:	48 8b 00             	mov    (%rax),%rax
   20aeb:	48 89 02             	mov    %rax,(%rdx)
        , m_surface( surface )
   20aee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20af2:	48 8d 50 08          	lea    0x8(%rax),%rdx
   20af6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20afa:	48 89 c6             	mov    %rax,%rsi
   20afd:	48 89 d7             	mov    %rdx,%rdi
   20b00:	e8 07 ea ff ff       	call   1f50c <_ZN2vk10SurfaceKHRC1EP14VkSurfaceKHR_T>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   20b05:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   20b09:	48 89 c7             	mov    %rax,%rdi
   20b0c:	e8 0b 66 ff ff       	call   1711c <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   20b11:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20b15:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( instance.getDispatcher() )
   20b19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20b1d:	48 89 c7             	mov    %rax,%rdi
   20b20:	e8 e5 88 fe ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   20b25:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20b29:	48 89 42 18          	mov    %rax,0x18(%rdx)
      }
   20b2d:	90                   	nop
   20b2e:	c9                   	leave
   20b2f:	c3                   	ret

0000000000020b30 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   20b30:	55                   	push   %rbp
   20b31:	48 89 e5             	mov    %rsp,%rbp
   20b34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   20b38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20b3c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   20b43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20b47:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   20b4e:	00 
   20b4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20b53:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   20b5a:	00 
	{ }
   20b5b:	90                   	nop
   20b5c:	5d                   	pop    %rbp
   20b5d:	c3                   	ret

0000000000020b5e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:
      { }

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      __attribute__((__nonnull__)) constexpr
      basic_string_view(const _CharT* __str) noexcept
   20b5e:	55                   	push   %rbp
   20b5f:	48 89 e5             	mov    %rsp,%rbp
   20b62:	48 83 ec 10          	sub    $0x10,%rsp
   20b66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20b6a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_len{traits_type::length(__str)},
   20b6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20b72:	48 89 c7             	mov    %rax,%rdi
   20b75:	e8 8a 56 fe ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
   20b7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20b7e:	48 89 02             	mov    %rax,(%rdx)
	_M_str{__str}
   20b81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20b85:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20b89:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
   20b8d:	90                   	nop
   20b8e:	c9                   	leave
   20b8f:	c3                   	ret

0000000000020b90 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>:
	__glibcxx_assert(this->_M_len > 0);
	return *(this->_M_str + this->_M_len - 1);
      }

      constexpr const_pointer
      data() const noexcept
   20b90:	55                   	push   %rbp
   20b91:	48 89 e5             	mov    %rsp,%rbp
   20b94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str; }
   20b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20b9c:	48 8b 40 08          	mov    0x8(%rax),%rax
   20ba0:	5d                   	pop    %rbp
   20ba1:	c3                   	ret

0000000000020ba2 <_ZN2vk5FlagsINS_36DebugUtilsMessengerCreateFlagBitsEXTEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   20ba2:	55                   	push   %rbp
   20ba3:	48 89 e5             	mov    %rsp,%rbp
   20ba6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20baa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20bae:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   20bb4:	90                   	nop
   20bb5:	5d                   	pop    %rbp
   20bb6:	c3                   	ret
   20bb7:	90                   	nop

0000000000020bb8 <_ZNSt6vectorIPKcSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   20bb8:	55                   	push   %rbp
   20bb9:	48 89 e5             	mov    %rsp,%rbp
   20bbc:	48 83 ec 10          	sub    $0x10,%rsp
   20bc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   20bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20bc8:	48 8b 10             	mov    (%rax),%rdx
   20bcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20bcf:	48 89 d6             	mov    %rdx,%rsi
   20bd2:	48 89 c7             	mov    %rax,%rdi
   20bd5:	e8 be 74 ff ff       	call   18098 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   20bda:	c9                   	leave
   20bdb:	c3                   	ret

0000000000020bdc <_ZN2vk6ignoreINS_6ResultEEEvRKT_>:
  void ignore( T const & ) VULKAN_HPP_NOEXCEPT
   20bdc:	55                   	push   %rbp
   20bdd:	48 89 e5             	mov    %rsp,%rbp
   20be0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  }
   20be4:	90                   	nop
   20be5:	5d                   	pop    %rbp
   20be6:	c3                   	ret
   20be7:	90                   	nop

0000000000020be8 <_ZN2vk5FlagsINS_22InstanceCreateFlagBitsEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   20be8:	55                   	push   %rbp
   20be9:	48 89 e5             	mov    %rsp,%rbp
   20bec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20bf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20bf4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   20bfa:	90                   	nop
   20bfb:	5d                   	pop    %rbp
   20bfc:	c3                   	ret
   20bfd:	90                   	nop

0000000000020bfe <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
   20bfe:	55                   	push   %rbp
   20bff:	48 89 e5             	mov    %rsp,%rbp
   20c02:	48 83 ec 10          	sub    $0x10,%rsp
   20c06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return get();
   20c0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20c0e:	48 89 c7             	mov    %rax,%rdi
   20c11:	e8 24 02 00 00       	call   20e3a <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>
      }
   20c16:	c9                   	leave
   20c17:	c3                   	ret

0000000000020c18 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
   20c18:	55                   	push   %rbp
   20c19:	48 89 e5             	mov    %rsp,%rbp
   20c1c:	48 83 ec 10          	sub    $0x10,%rsp
   20c20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(get() != pointer());
   20c24:	e8 75 55 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   20c29:	84 c0                	test   %al,%al
   20c2b:	74 18                	je     20c45 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
   20c2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20c31:	48 89 c7             	mov    %rax,%rdi
   20c34:	e8 01 02 00 00       	call   20e3a <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>
   20c39:	48 85 c0             	test   %rax,%rax
   20c3c:	75 07                	jne    20c45 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
   20c3e:	b8 01 00 00 00       	mov    $0x1,%eax
   20c43:	eb 05                	jmp    20c4a <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv+0x32>
   20c45:	b8 00 00 00 00       	mov    $0x0,%eax
   20c4a:	84 c0                	test   %al,%al
	return *get();
   20c4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20c50:	48 89 c7             	mov    %rax,%rdi
   20c53:	e8 e2 01 00 00       	call   20e3a <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>
      }
   20c58:	c9                   	leave
   20c59:	c3                   	ret

0000000000020c5a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1Ev>:
      __uniq_ptr_impl() = default;
   20c5a:	55                   	push   %rbp
   20c5b:	48 89 e5             	mov    %rsp,%rbp
   20c5e:	48 83 ec 10          	sub    $0x10,%rsp
   20c62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20c66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20c6a:	48 89 c7             	mov    %rax,%rdi
   20c6d:	e8 e2 01 00 00       	call   20e54 <_ZNSt5tupleIJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
   20c72:	90                   	nop
   20c73:	c9                   	leave
   20c74:	c3                   	ret
   20c75:	90                   	nop

0000000000020c76 <_ZNSt15__uniq_ptr_dataIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
   20c76:	55                   	push   %rbp
   20c77:	48 89 e5             	mov    %rsp,%rbp
   20c7a:	48 83 ec 10          	sub    $0x10,%rsp
   20c7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20c86:	48 89 c7             	mov    %rax,%rdi
   20c89:	e8 cc ff ff ff       	call   20c5a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1Ev>
   20c8e:	90                   	nop
   20c8f:	c9                   	leave
   20c90:	c3                   	ret
   20c91:	90                   	nop

0000000000020c92 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>:
	constexpr unique_ptr() noexcept
   20c92:	55                   	push   %rbp
   20c93:	48 89 e5             	mov    %rsp,%rbp
   20c96:	48 83 ec 10          	sub    $0x10,%rsp
   20c9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_t()
   20c9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20ca2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   20ca9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20cad:	48 89 c7             	mov    %rax,%rdi
   20cb0:	e8 c1 ff ff ff       	call   20c76 <_ZNSt15__uniq_ptr_dataIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>
	{ }
   20cb5:	90                   	nop
   20cb6:	c9                   	leave
   20cb7:	c3                   	ret

0000000000020cb8 <_ZNK2vk14ArrayWrapper1DIcLm256EEcvSt17basic_string_viewIcSt11char_traitsIcEEIcLi0EEEv>:
    operator std::string_view() const
   20cb8:	55                   	push   %rbp
   20cb9:	48 89 e5             	mov    %rsp,%rbp
   20cbc:	48 83 ec 20          	sub    $0x20,%rsp
   20cc0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return std::string_view( this->data() );
   20cc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20cc8:	48 89 c7             	mov    %rax,%rdi
   20ccb:	e8 40 8b ff ff       	call   19810 <_ZNKSt5arrayIcLm256EE4dataEv>
   20cd0:	48 89 c2             	mov    %rax,%rdx
   20cd3:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   20cd7:	48 89 d6             	mov    %rdx,%rsi
   20cda:	48 89 c7             	mov    %rax,%rdi
   20cdd:	e8 7c fe ff ff       	call   20b5e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
   20ce2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20ce6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    }
   20cea:	c9                   	leave
   20ceb:	c3                   	ret

0000000000020cec <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:
      size() const noexcept
   20cec:	55                   	push   %rbp
   20ced:	48 89 e5             	mov    %rsp,%rbp
   20cf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len; }
   20cf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20cf8:	48 8b 00             	mov    (%rax),%rax
   20cfb:	5d                   	pop    %rbp
   20cfc:	c3                   	ret

0000000000020cfd <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>:
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }

  template<typename _CharT, typename _Traits>
    constexpr bool
    operator==(basic_string_view<_CharT, _Traits> __x,
   20cfd:	55                   	push   %rbp
   20cfe:	48 89 e5             	mov    %rsp,%rbp
   20d01:	53                   	push   %rbx
   20d02:	48 83 ec 28          	sub    $0x28,%rsp
   20d06:	48 89 f0             	mov    %rsi,%rax
   20d09:	49 89 f8             	mov    %rdi,%r8
   20d0c:	4c 89 c6             	mov    %r8,%rsi
   20d0f:	4c 89 cf             	mov    %r9,%rdi
   20d12:	48 89 c7             	mov    %rax,%rdi
   20d15:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   20d19:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20d1d:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   20d21:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }
   20d25:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   20d29:	48 89 c7             	mov    %rax,%rdi
   20d2c:	e8 bb ff ff ff       	call   20cec <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
   20d31:	48 89 c3             	mov    %rax,%rbx
   20d34:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   20d38:	48 89 c7             	mov    %rax,%rdi
   20d3b:	e8 ac ff ff ff       	call   20cec <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
   20d40:	48 39 c3             	cmp    %rax,%rbx
   20d43:	75 22                	jne    20d67 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
   20d45:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   20d49:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   20d4d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   20d51:	48 89 ce             	mov    %rcx,%rsi
   20d54:	48 89 c7             	mov    %rax,%rdi
   20d57:	e8 3a 01 00 00       	call   20e96 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>
   20d5c:	85 c0                	test   %eax,%eax
   20d5e:	75 07                	jne    20d67 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
   20d60:	b8 01 00 00 00       	mov    $0x1,%eax
   20d65:	eb 05                	jmp    20d6c <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6f>
   20d67:	b8 00 00 00 00       	mov    $0x0,%eax
   20d6c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   20d70:	c9                   	leave
   20d71:	c3                   	ret

0000000000020d72 <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
   20d72:	55                   	push   %rbp
   20d73:	48 89 e5             	mov    %rsp,%rbp
   20d76:	53                   	push   %rbx
   20d77:	48 83 ec 28          	sub    $0x28,%rsp
   20d7b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20d7f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   20d83:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
   20d87:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   20d8b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   20d8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20d93:	48 89 d6             	mov    %rdx,%rsi
   20d96:	48 89 c7             	mov    %rax,%rdi
   20d99:	e8 cc 5c ff ff       	call   16a6a <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
   20d9e:	48 89 c1             	mov    %rax,%rcx
   20da1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   20da5:	48 89 c2             	mov    %rax,%rdx
   20da8:	48 89 ce             	mov    %rcx,%rsi
   20dab:	48 89 df             	mov    %rbx,%rdi
   20dae:	e8 5f 01 00 00       	call   20f12 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
   20db3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   20db7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20dbb:	48 89 d6             	mov    %rdx,%rsi
   20dbe:	48 89 c7             	mov    %rax,%rdi
   20dc1:	e8 aa 01 00 00       	call   20f70 <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>
   20dc6:	eb 1a                	jmp    20de2 <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_+0x70>
   20dc8:	48 89 c3             	mov    %rax,%rbx
   20dcb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20dcf:	48 89 c7             	mov    %rax,%rdi
   20dd2:	e8 2d 6d ff ff       	call   17b04 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   20dd7:	48 89 d8             	mov    %rbx,%rax
   20dda:	48 89 c7             	mov    %rax,%rdi
   20ddd:	e8 be 45 fe ff       	call   53a0 <_Unwind_Resume@plt>
   20de2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   20de6:	c9                   	leave
   20de7:	c3                   	ret

0000000000020de8 <_ZNSt6vectorIPKcSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   20de8:	55                   	push   %rbp
   20de9:	48 89 e5             	mov    %rsp,%rbp
   20dec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20df0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   20df4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20df8:	48 8b 00             	mov    (%rax),%rax
   20dfb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20dff:	48 c1 e2 03          	shl    $0x3,%rdx
   20e03:	48 01 d0             	add    %rdx,%rax
      }
   20e06:	5d                   	pop    %rbp
   20e07:	c3                   	ret

0000000000020e08 <_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
   20e08:	55                   	push   %rbp
   20e09:	48 89 e5             	mov    %rsp,%rbp
   20e0c:	48 83 ec 10          	sub    $0x10,%rsp
   20e10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20e14:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
   20e18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20e1c:	48 89 c7             	mov    %rax,%rdi
   20e1f:	e8 8c 01 00 00       	call   20fb0 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
   20e24:	48 89 c2             	mov    %rax,%rdx
   20e27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e2b:	48 89 d6             	mov    %rdx,%rsi
   20e2e:	48 89 c7             	mov    %rax,%rdi
   20e31:	e8 88 01 00 00       	call   20fbe <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
   20e36:	90                   	nop
   20e37:	c9                   	leave
   20e38:	c3                   	ret
   20e39:	90                   	nop

0000000000020e3a <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
   20e3a:	55                   	push   %rbp
   20e3b:	48 89 e5             	mov    %rsp,%rbp
   20e3e:	48 83 ec 10          	sub    $0x10,%rsp
   20e42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
   20e46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e4a:	48 89 c7             	mov    %rax,%rdi
   20e4d:	e8 10 02 00 00       	call   21062 <_ZNKSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
   20e52:	c9                   	leave
   20e53:	c3                   	ret

0000000000020e54 <_ZNSt5tupleIJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:
	tuple()
   20e54:	55                   	push   %rbp
   20e55:	48 89 e5             	mov    %rsp,%rbp
   20e58:	48 83 ec 10          	sub    $0x10,%rsp
   20e5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Inherited() { }
   20e60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e64:	48 89 c7             	mov    %rax,%rdi
   20e67:	e8 14 02 00 00       	call   21080 <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1Ev>
   20e6c:	90                   	nop
   20e6d:	c9                   	leave
   20e6e:	c3                   	ret
   20e6f:	90                   	nop

0000000000020e70 <_ZNSaIN2vk15LayerPropertiesEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   20e70:	55                   	push   %rbp
   20e71:	48 89 e5             	mov    %rsp,%rbp
   20e74:	48 83 ec 10          	sub    $0x10,%rsp
   20e78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20e7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   20e80:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20e84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e88:	48 89 d6             	mov    %rdx,%rsi
   20e8b:	48 89 c7             	mov    %rax,%rdi
   20e8e:	e8 15 02 00 00       	call   210a8 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEEC1ERKS2_>
   20e93:	90                   	nop
   20e94:	c9                   	leave
   20e95:	c3                   	ret

0000000000020e96 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>:
      compare(basic_string_view __str) const noexcept
   20e96:	55                   	push   %rbp
   20e97:	48 89 e5             	mov    %rsp,%rbp
   20e9a:	48 83 ec 30          	sub    $0x30,%rsp
   20e9e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20ea2:	48 89 d1             	mov    %rdx,%rcx
   20ea5:	48 89 f0             	mov    %rsi,%rax
   20ea8:	48 89 fa             	mov    %rdi,%rdx
   20eab:	48 89 ca             	mov    %rcx,%rdx
   20eae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   20eb2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const size_type __rlen = std::min(this->_M_len, __str._M_len);
   20eb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20eba:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   20ebe:	48 89 d6             	mov    %rdx,%rsi
   20ec1:	48 89 c7             	mov    %rax,%rdi
   20ec4:	e8 57 5c ff ff       	call   16b20 <_ZSt3minImERKT_S2_S2_>
   20ec9:	48 8b 00             	mov    (%rax),%rax
   20ecc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);
   20ed0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   20ed4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20ed8:	48 8b 40 08          	mov    0x8(%rax),%rax
   20edc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20ee0:	48 89 ce             	mov    %rcx,%rsi
   20ee3:	48 89 c7             	mov    %rax,%rdi
   20ee6:	e8 34 e2 fe ff       	call   f11f <_ZNSt11char_traitsIcE7compareEPKcS2_m>
   20eeb:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (__ret == 0)
   20eee:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
   20ef2:	75 19                	jne    20f0d <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_+0x77>
	  __ret = _S_compare(this->_M_len, __str._M_len);
   20ef4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   20ef8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20efc:	48 8b 00             	mov    (%rax),%rax
   20eff:	48 89 d6             	mov    %rdx,%rsi
   20f02:	48 89 c7             	mov    %rax,%rdi
   20f05:	e8 9d 02 00 00       	call   211a7 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>
   20f0a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return __ret;
   20f0d:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
   20f10:	c9                   	leave
   20f11:	c3                   	ret

0000000000020f12 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
   20f12:	55                   	push   %rbp
   20f13:	48 89 e5             	mov    %rsp,%rbp
   20f16:	53                   	push   %rbx
   20f17:	48 83 ec 28          	sub    $0x28,%rsp
   20f1b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20f1f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   20f23:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
   20f27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20f2b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   20f2f:	48 89 d6             	mov    %rdx,%rsi
   20f32:	48 89 c7             	mov    %rax,%rdi
   20f35:	e8 06 59 ff ff       	call   16840 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
   20f3a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   20f3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20f42:	48 89 d6             	mov    %rdx,%rsi
   20f45:	48 89 c7             	mov    %rax,%rdi
   20f48:	e8 a1 02 00 00       	call   211ee <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>
   20f4d:	eb 1a                	jmp    20f69 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_+0x57>
   20f4f:	48 89 c3             	mov    %rax,%rbx
   20f52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20f56:	48 89 c7             	mov    %rax,%rdi
   20f59:	e8 a0 58 ff ff       	call   167fe <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
   20f5e:	48 89 d8             	mov    %rbx,%rax
   20f61:	48 89 c7             	mov    %rax,%rdi
   20f64:	e8 37 44 fe ff       	call   53a0 <_Unwind_Resume@plt>
   20f69:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   20f6d:	c9                   	leave
   20f6e:	c3                   	ret
   20f6f:	90                   	nop

0000000000020f70 <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
   20f70:	55                   	push   %rbp
   20f71:	48 89 e5             	mov    %rsp,%rbp
   20f74:	48 83 ec 10          	sub    $0x10,%rsp
   20f78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20f7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
   20f80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20f84:	48 89 c7             	mov    %rax,%rdi
   20f87:	e8 d0 5a ff ff       	call   16a5c <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   20f8c:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
   20f8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20f93:	48 8b 00             	mov    (%rax),%rax
   20f96:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   20f9a:	48 89 ce             	mov    %rcx,%rsi
   20f9d:	48 89 c7             	mov    %rax,%rdi
   20fa0:	e8 9f 02 00 00       	call   21244 <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
   20fa5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20fa9:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   20fad:	90                   	nop
   20fae:	c9                   	leave
   20faf:	c3                   	ret

0000000000020fb0 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   20fb0:	55                   	push   %rbp
   20fb1:	48 89 e5             	mov    %rsp,%rbp
   20fb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   20fb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20fbc:	5d                   	pop    %rbp
   20fbd:	c3                   	ret

0000000000020fbe <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
   20fbe:	55                   	push   %rbp
   20fbf:	48 89 e5             	mov    %rsp,%rbp
   20fc2:	53                   	push   %rbx
   20fc3:	48 83 ec 18          	sub    $0x18,%rsp
   20fc7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20fcb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   20fcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20fd3:	48 8b 50 08          	mov    0x8(%rax),%rdx
   20fd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20fdb:	48 8b 40 10          	mov    0x10(%rax),%rax
   20fdf:	48 39 c2             	cmp    %rax,%rdx
   20fe2:	74 3c                	je     21020 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x62>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
   20fe4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20fe8:	48 89 c7             	mov    %rax,%rdi
   20feb:	e8 7d 02 00 00       	call   2126d <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   20ff0:	48 89 c2             	mov    %rax,%rdx
   20ff3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20ff7:	48 8b 48 08          	mov    0x8(%rax),%rcx
   20ffb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20fff:	48 89 ce             	mov    %rcx,%rsi
   21002:	48 89 c7             	mov    %rax,%rdi
   21005:	e8 71 02 00 00       	call   2127b <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
   2100a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2100e:	48 8b 40 08          	mov    0x8(%rax),%rax
   21012:	48 8d 50 08          	lea    0x8(%rax),%rdx
   21016:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2101a:	48 89 50 08          	mov    %rdx,0x8(%rax)
   2101e:	eb 30                	jmp    21050 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x92>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   21020:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21024:	48 89 c7             	mov    %rax,%rdi
   21027:	e8 41 02 00 00       	call   2126d <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   2102c:	48 89 c3             	mov    %rax,%rbx
   2102f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21033:	48 89 c7             	mov    %rax,%rdi
   21036:	e8 75 02 00 00       	call   212b0 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   2103b:	48 89 c1             	mov    %rax,%rcx
   2103e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21042:	48 89 da             	mov    %rbx,%rdx
   21045:	48 89 ce             	mov    %rcx,%rsi
   21048:	48 89 c7             	mov    %rax,%rdi
   2104b:	e8 ba 03 00 00       	call   2140a <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
   21050:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21054:	48 89 c7             	mov    %rax,%rdi
   21057:	e8 40 05 00 00       	call   2159c <_ZNSt6vectorIPKcSaIS1_EE4backEv>
      }
   2105c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   21060:	c9                   	leave
   21061:	c3                   	ret

0000000000021062 <_ZNKSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
   21062:	55                   	push   %rbp
   21063:	48 89 e5             	mov    %rsp,%rbp
   21066:	48 83 ec 10          	sub    $0x10,%rsp
   2106a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2106e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21072:	48 89 c7             	mov    %rax,%rdi
   21075:	e8 61 05 00 00       	call   215db <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
   2107a:	48 8b 00             	mov    (%rax),%rax
   2107d:	c9                   	leave
   2107e:	c3                   	ret
   2107f:	90                   	nop

0000000000021080 <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
   21080:	55                   	push   %rbp
   21081:	48 89 e5             	mov    %rsp,%rbp
   21084:	48 83 ec 10          	sub    $0x10,%rsp
   21088:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
   2108c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21090:	48 89 c7             	mov    %rax,%rdi
   21093:	e8 5e 05 00 00       	call   215f6 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEEC1Ev>
   21098:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2109c:	48 89 c7             	mov    %rax,%rdi
   2109f:	e8 6e 05 00 00       	call   21612 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EEC1Ev>
   210a4:	90                   	nop
   210a5:	c9                   	leave
   210a6:	c3                   	ret
   210a7:	90                   	nop

00000000000210a8 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   210a8:	55                   	push   %rbp
   210a9:	48 89 e5             	mov    %rsp,%rbp
   210ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   210b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   210b4:	90                   	nop
   210b5:	5d                   	pop    %rbp
   210b6:	c3                   	ret
   210b7:	90                   	nop

00000000000210b8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
   210b8:	55                   	push   %rbp
   210b9:	48 89 e5             	mov    %rsp,%rbp
   210bc:	41 55                	push   %r13
   210be:	41 54                	push   %r12
   210c0:	53                   	push   %rbx
   210c1:	48 83 ec 28          	sub    $0x28,%rsp
   210c5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   210c9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
   210cd:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
   210d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   210d5:	48 89 c7             	mov    %rax,%rdi
   210d8:	e8 f3 a1 ff ff       	call   1b2d0 <_ZNKSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   210dd:	48 89 c2             	mov    %rax,%rdx
   210e0:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   210e4:	48 89 d6             	mov    %rdx,%rsi
   210e7:	48 89 c7             	mov    %rax,%rdi
   210ea:	e8 39 05 00 00       	call   21628 <_ZN9__gnu_cxx14__alloc_traitsISaIN2vk15LayerPropertiesEES2_E17_S_select_on_copyERKS3_>
   210ef:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   210f3:	48 89 c7             	mov    %rax,%rdi
   210f6:	e8 db 69 ff ff       	call   17ad6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   210fb:	48 89 c1             	mov    %rax,%rcx
   210fe:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   21102:	48 89 c2             	mov    %rax,%rdx
   21105:	48 89 ce             	mov    %rcx,%rsi
   21108:	48 89 df             	mov    %rbx,%rdi
   2110b:	e8 42 05 00 00       	call   21652 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EEC1EmRKS2_>
   21110:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   21114:	48 89 c7             	mov    %rax,%rdi
   21117:	e8 5c 68 ff ff       	call   17978 <_ZNSaIN2vk15LayerPropertiesEED1Ev>
				      _M_get_Tp_allocator());
   2111c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21120:	48 89 c7             	mov    %rax,%rdi
   21123:	e8 48 81 ff ff       	call   19270 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   21128:	49 89 c5             	mov    %rax,%r13
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   2112b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2112f:	48 8b 18             	mov    (%rax),%rbx
   21132:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21136:	48 89 c7             	mov    %rax,%rdi
   21139:	e8 98 05 00 00       	call   216d6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>
   2113e:	49 89 c4             	mov    %rax,%r12
   21141:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21145:	48 89 c7             	mov    %rax,%rdi
   21148:	e8 63 05 00 00       	call   216b0 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>
   2114d:	4c 89 e9             	mov    %r13,%rcx
   21150:	48 89 da             	mov    %rbx,%rdx
   21153:	4c 89 e6             	mov    %r12,%rsi
   21156:	48 89 c7             	mov    %rax,%rdi
   21159:	e8 a1 05 00 00       	call   216ff <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
	this->_M_impl._M_finish =
   2115e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   21162:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   21166:	eb 34                	jmp    2119c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EEC1ERKS3_+0xe4>
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
   21168:	48 89 c3             	mov    %rax,%rbx
   2116b:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   2116f:	48 89 c7             	mov    %rax,%rdi
   21172:	e8 01 68 ff ff       	call   17978 <_ZNSaIN2vk15LayerPropertiesEED1Ev>
   21177:	48 89 d8             	mov    %rbx,%rax
   2117a:	48 89 c7             	mov    %rax,%rdi
   2117d:	e8 1e 42 fe ff       	call   53a0 <_Unwind_Resume@plt>
      }
   21182:	48 89 c3             	mov    %rax,%rbx
   21185:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21189:	48 89 c7             	mov    %rax,%rdi
   2118c:	e8 f3 67 ff ff       	call   17984 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EED1Ev>
   21191:	48 89 d8             	mov    %rbx,%rax
   21194:	48 89 c7             	mov    %rax,%rdi
   21197:	e8 04 42 fe ff       	call   53a0 <_Unwind_Resume@plt>
   2119c:	48 83 c4 28          	add    $0x28,%rsp
   211a0:	5b                   	pop    %rbx
   211a1:	41 5c                	pop    %r12
   211a3:	41 5d                	pop    %r13
   211a5:	5d                   	pop    %rbp
   211a6:	c3                   	ret

00000000000211a7 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>:
      _S_compare(size_type __n1, size_type __n2) noexcept
   211a7:	55                   	push   %rbp
   211a8:	48 89 e5             	mov    %rsp,%rbp
   211ab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   211af:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const difference_type __diff = __n1 - __n2;
   211b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   211b7:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   211bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__diff > __limits::__max)
   211bf:	b8 00 00 00 80       	mov    $0x80000000,%eax
   211c4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   211c8:	7c 07                	jl     211d1 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x2a>
	  return __limits::__max;
   211ca:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   211cf:	eb 1b                	jmp    211ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	if (__diff < __limits::__min)
   211d1:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
   211d8:	ff ff ff 
   211db:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   211df:	7f 07                	jg     211e8 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x41>
	  return __limits::__min;
   211e1:	b8 00 00 00 80       	mov    $0x80000000,%eax
   211e6:	eb 04                	jmp    211ec <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	return static_cast<int>(__diff);
   211e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   211ec:	5d                   	pop    %rbp
   211ed:	c3                   	ret

00000000000211ee <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
   211ee:	55                   	push   %rbp
   211ef:	48 89 e5             	mov    %rsp,%rbp
   211f2:	48 83 ec 10          	sub    $0x10,%rsp
   211f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   211fa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
   211fe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   21202:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21206:	48 89 d6             	mov    %rdx,%rsi
   21209:	48 89 c7             	mov    %rax,%rdi
   2120c:	e8 3b 59 ff ff       	call   16b4c <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   21211:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21215:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   21218:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2121c:	48 8b 10             	mov    (%rax),%rdx
   2121f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21223:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   21227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2122b:	48 8b 00             	mov    (%rax),%rax
   2122e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   21232:	48 c1 e2 03          	shl    $0x3,%rdx
   21236:	48 01 c2             	add    %rax,%rdx
   21239:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2123d:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
   21241:	90                   	nop
   21242:	c9                   	leave
   21243:	c3                   	ret

0000000000021244 <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   21244:	55                   	push   %rbp
   21245:	48 89 e5             	mov    %rsp,%rbp
   21248:	48 83 ec 20          	sub    $0x20,%rsp
   2124c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21250:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21254:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   21258:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2125c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21260:	48 89 d6             	mov    %rdx,%rsi
   21263:	48 89 c7             	mov    %rax,%rdi
   21266:	e8 e8 04 00 00       	call   21753 <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>
   2126b:	c9                   	leave
   2126c:	c3                   	ret

000000000002126d <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   2126d:	55                   	push   %rbp
   2126e:	48 89 e5             	mov    %rsp,%rbp
   21271:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   21275:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21279:	5d                   	pop    %rbp
   2127a:	c3                   	ret

000000000002127b <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   2127b:	55                   	push   %rbp
   2127c:	48 89 e5             	mov    %rsp,%rbp
   2127f:	48 83 ec 20          	sub    $0x20,%rsp
   21283:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21287:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2128b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   2128f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21293:	48 89 c7             	mov    %rax,%rdi
   21296:	e8 d2 ff ff ff       	call   2126d <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   2129b:	48 89 c2             	mov    %rax,%rdx
   2129e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   212a2:	48 89 d6             	mov    %rdx,%rsi
   212a5:	48 89 c7             	mov    %rax,%rdi
   212a8:	e8 cf 04 00 00       	call   2177c <_ZSt12construct_atIPKcJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   212ad:	90                   	nop
   212ae:	c9                   	leave
   212af:	c3                   	ret

00000000000212b0 <_ZNSt6vectorIPKcSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   212b0:	55                   	push   %rbp
   212b1:	48 89 e5             	mov    %rsp,%rbp
   212b4:	48 83 ec 20          	sub    $0x20,%rsp
   212b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   212bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   212c0:	48 8d 50 08          	lea    0x8(%rax),%rdx
   212c4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   212c8:	48 89 d6             	mov    %rdx,%rsi
   212cb:	48 89 c7             	mov    %rax,%rdi
   212ce:	e8 e9 04 00 00       	call   217bc <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   212d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   212d7:	c9                   	leave
   212d8:	c3                   	ret
   212d9:	90                   	nop

00000000000212da <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>:
      _M_check_len(size_type __n, const char* __s) const
   212da:	55                   	push   %rbp
   212db:	48 89 e5             	mov    %rsp,%rbp
   212de:	53                   	push   %rbx
   212df:	48 83 ec 38          	sub    $0x38,%rsp
   212e3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   212e7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   212eb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   212ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   212f3:	48 89 c7             	mov    %rax,%rdi
   212f6:	e8 df 04 00 00       	call   217da <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   212fb:	48 89 c3             	mov    %rax,%rbx
   212fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21302:	48 89 c7             	mov    %rax,%rdi
   21305:	e8 24 5d ff ff       	call   1702e <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   2130a:	48 29 c3             	sub    %rax,%rbx
   2130d:	48 89 da             	mov    %rbx,%rdx
   21310:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   21314:	48 39 c2             	cmp    %rax,%rdx
   21317:	0f 92 c0             	setb   %al
   2131a:	84 c0                	test   %al,%al
   2131c:	74 0c                	je     2132a <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0x50>
	  __throw_length_error(__N(__s));
   2131e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21322:	48 89 c7             	mov    %rax,%rdi
   21325:	e8 b6 3d fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   2132a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2132e:	48 89 c7             	mov    %rax,%rdi
   21331:	e8 f8 5c ff ff       	call   1702e <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   21336:	48 89 c3             	mov    %rax,%rbx
   21339:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2133d:	48 89 c7             	mov    %rax,%rdi
   21340:	e8 e9 5c ff ff       	call   1702e <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   21345:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   21349:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   2134d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   21351:	48 89 d6             	mov    %rdx,%rsi
   21354:	48 89 c7             	mov    %rax,%rdi
   21357:	e8 3e 6f ff ff       	call   1829a <_ZSt3maxImERKT_S2_S2_>
   2135c:	48 8b 00             	mov    (%rax),%rax
   2135f:	48 01 d8             	add    %rbx,%rax
   21362:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   21366:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2136a:	48 89 c7             	mov    %rax,%rdi
   2136d:	e8 bc 5c ff ff       	call   1702e <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   21372:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   21376:	72 12                	jb     2138a <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xb0>
   21378:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2137c:	48 89 c7             	mov    %rax,%rdi
   2137f:	e8 56 04 00 00       	call   217da <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   21384:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   21388:	73 0e                	jae    21398 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xbe>
   2138a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2138e:	48 89 c7             	mov    %rax,%rdi
   21391:	e8 44 04 00 00       	call   217da <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   21396:	eb 04                	jmp    2139c <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xc2>
   21398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   2139c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   213a0:	c9                   	leave
   213a1:	c3                   	ret

00000000000213a2 <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
   213a2:	55                   	push   %rbp
   213a3:	48 89 e5             	mov    %rsp,%rbp
   213a6:	53                   	push   %rbx
   213a7:	48 83 ec 18          	sub    $0x18,%rsp
   213ab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   213af:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() - __rhs.base(); }
   213b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   213b7:	48 89 c7             	mov    %rax,%rdi
   213ba:	e8 3d 04 00 00       	call   217fc <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   213bf:	48 8b 18             	mov    (%rax),%rbx
   213c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   213c6:	48 89 c7             	mov    %rax,%rdi
   213c9:	e8 2e 04 00 00       	call   217fc <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   213ce:	48 8b 00             	mov    (%rax),%rax
   213d1:	48 89 da             	mov    %rbx,%rdx
   213d4:	48 29 c2             	sub    %rax,%rdx
   213d7:	48 89 d0             	mov    %rdx,%rax
   213da:	48 c1 f8 03          	sar    $0x3,%rax
   213de:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   213e2:	c9                   	leave
   213e3:	c3                   	ret

00000000000213e4 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   213e4:	55                   	push   %rbp
   213e5:	48 89 e5             	mov    %rsp,%rbp
   213e8:	48 83 ec 20          	sub    $0x20,%rsp
   213ec:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   213f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   213f4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   213f8:	48 89 d6             	mov    %rdx,%rsi
   213fb:	48 89 c7             	mov    %rax,%rdi
   213fe:	e8 b9 03 00 00       	call   217bc <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   21403:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21407:	c9                   	leave
   21408:	c3                   	ret
   21409:	90                   	nop

000000000002140a <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   2140a:	55                   	push   %rbp
   2140b:	48 89 e5             	mov    %rsp,%rbp
   2140e:	53                   	push   %rbx
   2140f:	48 83 ec 68          	sub    $0x68,%rsp
   21413:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   21417:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   2141b:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   2141f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   21423:	48 8d 15 05 a3 00 00 	lea    0xa305(%rip),%rdx        # 2b72f <_ZNSt8__detailL19__atomic_spin_countE+0x108b>
   2142a:	be 01 00 00 00       	mov    $0x1,%esi
   2142f:	48 89 c7             	mov    %rax,%rdi
   21432:	e8 a3 fe ff ff       	call   212da <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>
   21437:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __old_start = this->_M_impl._M_start;
   2143b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2143f:	48 8b 00             	mov    (%rax),%rax
   21442:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pointer __old_finish = this->_M_impl._M_finish;
   21446:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2144a:	48 8b 40 08          	mov    0x8(%rax),%rax
   2144e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      const size_type __elems_before = __position - begin();
   21452:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   21456:	48 89 c7             	mov    %rax,%rdi
   21459:	e8 86 ff ff ff       	call   213e4 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
   2145e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   21462:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   21466:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   2146a:	48 89 d6             	mov    %rdx,%rsi
   2146d:	48 89 c7             	mov    %rax,%rdi
   21470:	e8 2d ff ff ff       	call   213a2 <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
   21475:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_start(this->_M_allocate(__len));
   21479:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2147d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   21481:	48 89 d6             	mov    %rdx,%rsi
   21484:	48 89 c7             	mov    %rax,%rdi
   21487:	e8 c0 56 ff ff       	call   16b4c <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   2148c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      pointer __new_finish(__new_start);
   21490:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21494:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
   21498:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2149c:	48 89 c7             	mov    %rax,%rdi
   2149f:	e8 c9 fd ff ff       	call   2126d <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   214a4:	48 89 c2             	mov    %rax,%rdx
				   __new_start + __elems_before,
   214a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   214ab:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   214b2:	00 
	  _Alloc_traits::construct(this->_M_impl,
   214b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   214b7:	48 01 c1             	add    %rax,%rcx
   214ba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   214be:	48 89 ce             	mov    %rcx,%rsi
   214c1:	48 89 c7             	mov    %rax,%rdi
   214c4:	e8 b2 fd ff ff       	call   2127b <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
   214c9:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   214d0:	00 
					 __new_start, _M_get_Tp_allocator());
   214d1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   214d5:	48 89 c7             	mov    %rax,%rdi
   214d8:	e8 7f 55 ff ff       	call   16a5c <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   214dd:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__old_start, __position.base(),
   214e0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   214e4:	48 89 c7             	mov    %rax,%rdi
   214e7:	e8 10 03 00 00       	call   217fc <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   214ec:	48 8b 30             	mov    (%rax),%rsi
   214ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   214f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   214f7:	48 89 d9             	mov    %rbx,%rcx
   214fa:	48 89 c7             	mov    %rax,%rdi
   214fd:	e8 08 03 00 00       	call   2180a <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
   21502:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	      ++__new_finish;
   21506:	48 83 45 c0 08       	addq   $0x8,-0x40(%rbp)
					 __new_finish, _M_get_Tp_allocator());
   2150b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2150f:	48 89 c7             	mov    %rax,%rdi
   21512:	e8 45 55 ff ff       	call   16a5c <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   21517:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__position.base(), __old_finish,
   2151a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   2151e:	48 89 c7             	mov    %rax,%rdi
   21521:	e8 d6 02 00 00       	call   217fc <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   21526:	48 8b 00             	mov    (%rax),%rax
   21529:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   2152d:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   21531:	48 89 d9             	mov    %rbx,%rcx
   21534:	48 89 c7             	mov    %rax,%rdi
   21537:	e8 ce 02 00 00       	call   2180a <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
   2153c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _M_deallocate(__old_start,
   21540:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
		    this->_M_impl._M_end_of_storage - __old_start);
   21544:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   21548:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   2154c:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
   21550:	48 c1 fa 03          	sar    $0x3,%rdx
      _M_deallocate(__old_start,
   21554:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   21558:	48 89 ce             	mov    %rcx,%rsi
   2155b:	48 89 c7             	mov    %rax,%rdi
   2155e:	e8 df 80 ff ff       	call   19642 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      this->_M_impl._M_start = __new_start;
   21563:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   21567:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   2156b:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
   2156e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   21572:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   21576:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2157a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2157e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21585:	00 
   21586:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2158a:	48 01 c2             	add    %rax,%rdx
   2158d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   21591:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   21595:	90                   	nop
   21596:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   2159a:	c9                   	leave
   2159b:	c3                   	ret

000000000002159c <_ZNSt6vectorIPKcSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
   2159c:	55                   	push   %rbp
   2159d:	48 89 e5             	mov    %rsp,%rbp
   215a0:	48 83 ec 20          	sub    $0x20,%rsp
   215a4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
   215a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   215ac:	48 89 c7             	mov    %rax,%rdi
   215af:	e8 fc fc ff ff       	call   212b0 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   215b4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   215b8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   215bc:	be 01 00 00 00       	mov    $0x1,%esi
   215c1:	48 89 c7             	mov    %rax,%rdi
   215c4:	e8 93 02 00 00       	call   2185c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>
   215c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   215cd:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   215d1:	48 89 c7             	mov    %rax,%rdi
   215d4:	e8 c5 02 00 00       	call   2189e <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
      }
   215d9:	c9                   	leave
   215da:	c3                   	ret

00000000000215db <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
   215db:	55                   	push   %rbp
   215dc:	48 89 e5             	mov    %rsp,%rbp
   215df:	48 83 ec 10          	sub    $0x10,%rsp
   215e3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
   215e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   215eb:	48 89 c7             	mov    %rax,%rdi
   215ee:	e8 bc 02 00 00       	call   218af <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
   215f3:	c9                   	leave
   215f4:	c3                   	ret
   215f5:	90                   	nop

00000000000215f6 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEEC1Ev>:
      _Tuple_impl()
   215f6:	55                   	push   %rbp
   215f7:	48 89 e5             	mov    %rsp,%rbp
   215fa:	48 83 ec 10          	sub    $0x10,%rsp
   215fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
   21602:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21606:	48 89 c7             	mov    %rax,%rdi
   21609:	e8 bc 02 00 00       	call   218ca <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EEC1Ev>
   2160e:	90                   	nop
   2160f:	c9                   	leave
   21610:	c3                   	ret
   21611:	90                   	nop

0000000000021612 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EEC1Ev>:
      constexpr _Head_base()
   21612:	55                   	push   %rbp
   21613:	48 89 e5             	mov    %rsp,%rbp
   21616:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   2161a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2161e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   21625:	90                   	nop
   21626:	5d                   	pop    %rbp
   21627:	c3                   	ret

0000000000021628 <_ZN9__gnu_cxx14__alloc_traitsISaIN2vk15LayerPropertiesEES2_E17_S_select_on_copyERKS3_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
   21628:	55                   	push   %rbp
   21629:	48 89 e5             	mov    %rsp,%rbp
   2162c:	48 83 ec 10          	sub    $0x10,%rsp
   21630:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21634:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _Base_type::select_on_container_copy_construction(__a); }
   21638:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2163c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   21640:	48 89 d6             	mov    %rdx,%rsi
   21643:	48 89 c7             	mov    %rax,%rdi
   21646:	e8 8a 02 00 00       	call   218d5 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE37select_on_container_copy_constructionERKS2_>
   2164b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2164f:	c9                   	leave
   21650:	c3                   	ret
   21651:	90                   	nop

0000000000021652 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
   21652:	55                   	push   %rbp
   21653:	48 89 e5             	mov    %rsp,%rbp
   21656:	53                   	push   %rbx
   21657:	48 83 ec 28          	sub    $0x28,%rsp
   2165b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2165f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   21663:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
   21667:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2166b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2166f:	48 89 d6             	mov    %rdx,%rsi
   21672:	48 89 c7             	mov    %rax,%rdi
   21675:	e8 84 02 00 00       	call   218fe <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
   2167a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2167e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21682:	48 89 d6             	mov    %rdx,%rsi
   21685:	48 89 c7             	mov    %rax,%rdi
   21688:	e8 a3 02 00 00       	call   21930 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_M_create_storageEm>
   2168d:	eb 1a                	jmp    216a9 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EEC1EmRKS2_+0x57>
   2168f:	48 89 c3             	mov    %rax,%rbx
   21692:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21696:	48 89 c7             	mov    %rax,%rdi
   21699:	e8 9e 4f ff ff       	call   1663c <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implD1Ev>
   2169e:	48 89 d8             	mov    %rbx,%rax
   216a1:	48 89 c7             	mov    %rax,%rdi
   216a4:	e8 f7 3c fe ff       	call   53a0 <_Unwind_Resume@plt>
   216a9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   216ad:	c9                   	leave
   216ae:	c3                   	ret
   216af:	90                   	nop

00000000000216b0 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
   216b0:	55                   	push   %rbp
   216b1:	48 89 e5             	mov    %rsp,%rbp
   216b4:	48 83 ec 20          	sub    $0x20,%rsp
   216b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
   216bc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   216c0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   216c4:	48 89 d6             	mov    %rdx,%rsi
   216c7:	48 89 c7             	mov    %rax,%rdi
   216ca:	e8 c3 02 00 00       	call   21992 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS4_>
   216cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   216d3:	c9                   	leave
   216d4:	c3                   	ret
   216d5:	90                   	nop

00000000000216d6 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
   216d6:	55                   	push   %rbp
   216d7:	48 89 e5             	mov    %rsp,%rbp
   216da:	48 83 ec 20          	sub    $0x20,%rsp
   216de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
   216e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   216e6:	48 8d 50 08          	lea    0x8(%rax),%rdx
   216ea:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   216ee:	48 89 d6             	mov    %rdx,%rsi
   216f1:	48 89 c7             	mov    %rax,%rdi
   216f4:	e8 99 02 00 00       	call   21992 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS4_>
   216f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   216fd:	c9                   	leave
   216fe:	c3                   	ret

00000000000216ff <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   216ff:	55                   	push   %rbp
   21700:	48 89 e5             	mov    %rsp,%rbp
   21703:	48 83 ec 20          	sub    $0x20,%rsp
   21707:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2170b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2170f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   21713:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      if (std::is_constant_evaluated())
   21717:	e8 8d 4a fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   2171c:	84 c0                	test   %al,%al
   2171e:	74 19                	je     21739 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E+0x3a>
	return std::__do_uninit_copy(__first, __last, __result);
   21720:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   21724:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   21728:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2172c:	48 89 ce             	mov    %rcx,%rsi
   2172f:	48 89 c7             	mov    %rax,%rdi
   21732:	e8 c1 02 00 00       	call   219f8 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
   21737:	eb 18                	jmp    21751 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E+0x52>
      return std::uninitialized_copy(__first, __last, __result);
   21739:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2173d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   21741:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21745:	48 89 ce             	mov    %rcx,%rsi
   21748:	48 89 c7             	mov    %rax,%rdi
   2174b:	e8 25 03 00 00       	call   21a75 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
   21750:	90                   	nop
    }
   21751:	c9                   	leave
   21752:	c3                   	ret

0000000000021753 <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   21753:	55                   	push   %rbp
   21754:	48 89 e5             	mov    %rsp,%rbp
   21757:	48 83 ec 20          	sub    $0x20,%rsp
   2175b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2175f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   21763:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   21767:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2176b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2176f:	48 89 d6             	mov    %rdx,%rsi
   21772:	48 89 c7             	mov    %rax,%rdi
   21775:	e8 30 03 00 00       	call   21aaa <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>
    }
   2177a:	c9                   	leave
   2177b:	c3                   	ret

000000000002177c <_ZSt12construct_atIPKcJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   2177c:	55                   	push   %rbp
   2177d:	48 89 e5             	mov    %rsp,%rbp
   21780:	53                   	push   %rbx
   21781:	48 83 ec 18          	sub    $0x18,%rsp
   21785:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21789:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   2178d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21791:	48 89 c6             	mov    %rax,%rsi
   21794:	bf 08 00 00 00       	mov    $0x8,%edi
   21799:	e8 16 4a fe ff       	call   61b4 <_ZnwmPv>
   2179e:	48 89 c3             	mov    %rax,%rbx
   217a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   217a5:	48 89 c7             	mov    %rax,%rdi
   217a8:	e8 c0 fa ff ff       	call   2126d <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   217ad:	48 8b 00             	mov    (%rax),%rax
   217b0:	48 89 03             	mov    %rax,(%rbx)
   217b3:	48 89 d8             	mov    %rbx,%rax
   217b6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   217ba:	c9                   	leave
   217bb:	c3                   	ret

00000000000217bc <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   217bc:	55                   	push   %rbp
   217bd:	48 89 e5             	mov    %rsp,%rbp
   217c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   217c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   217c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   217cc:	48 8b 10             	mov    (%rax),%rdx
   217cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   217d3:	48 89 10             	mov    %rdx,(%rax)
   217d6:	90                   	nop
   217d7:	5d                   	pop    %rbp
   217d8:	c3                   	ret
   217d9:	90                   	nop

00000000000217da <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   217da:	55                   	push   %rbp
   217db:	48 89 e5             	mov    %rsp,%rbp
   217de:	48 83 ec 10          	sub    $0x10,%rsp
   217e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   217e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   217ea:	48 89 c7             	mov    %rax,%rdi
   217ed:	e8 16 03 00 00       	call   21b08 <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   217f2:	48 89 c7             	mov    %rax,%rdi
   217f5:	e8 e4 52 ff ff       	call   16ade <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
   217fa:	c9                   	leave
   217fb:	c3                   	ret

00000000000217fc <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   217fc:	55                   	push   %rbp
   217fd:	48 89 e5             	mov    %rsp,%rbp
   21800:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   21804:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21808:	5d                   	pop    %rbp
   21809:	c3                   	ret

000000000002180a <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   2180a:	55                   	push   %rbp
   2180b:	48 89 e5             	mov    %rsp,%rbp
   2180e:	48 83 ec 20          	sub    $0x20,%rsp
   21812:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21816:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2181a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2181e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   21822:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   21826:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2182a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2182e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21832:	48 89 c7             	mov    %rax,%rdi
   21835:	e8 dc 02 00 00       	call   21b16 <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   2183a:	c9                   	leave
   2183b:	c3                   	ret

000000000002183c <_ZNSt16allocator_traitsISaIPKcEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   2183c:	55                   	push   %rbp
   2183d:	48 89 e5             	mov    %rsp,%rbp
   21840:	48 83 ec 10          	sub    $0x10,%rsp
   21844:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21848:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   2184c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21850:	48 89 c7             	mov    %rax,%rdi
   21853:	e8 07 9c ff ff       	call   1b45f <_ZSt10destroy_atIPKcEvPT_>
	}
   21858:	90                   	nop
   21859:	c9                   	leave
   2185a:	c3                   	ret
   2185b:	90                   	nop

000000000002185c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
   2185c:	55                   	push   %rbp
   2185d:	48 89 e5             	mov    %rsp,%rbp
   21860:	48 83 ec 20          	sub    $0x20,%rsp
   21864:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21868:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
   2186c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21870:	48 8b 00             	mov    (%rax),%rax
   21873:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   21877:	48 c1 e2 03          	shl    $0x3,%rdx
   2187b:	48 f7 da             	neg    %rdx
   2187e:	48 01 d0             	add    %rdx,%rax
   21881:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21885:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   21889:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   2188d:	48 89 d6             	mov    %rdx,%rsi
   21890:	48 89 c7             	mov    %rax,%rdi
   21893:	e8 24 ff ff ff       	call   217bc <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   21898:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2189c:	c9                   	leave
   2189d:	c3                   	ret

000000000002189e <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   2189e:	55                   	push   %rbp
   2189f:	48 89 e5             	mov    %rsp,%rbp
   218a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   218a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   218aa:	48 8b 00             	mov    (%rax),%rax
   218ad:	5d                   	pop    %rbp
   218ae:	c3                   	ret

00000000000218af <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   218af:	55                   	push   %rbp
   218b0:	48 89 e5             	mov    %rsp,%rbp
   218b3:	48 83 ec 10          	sub    $0x10,%rsp
   218b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
   218bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   218bf:	48 89 c7             	mov    %rax,%rdi
   218c2:	e8 b2 02 00 00       	call   21b79 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>
   218c7:	c9                   	leave
   218c8:	c3                   	ret
   218c9:	90                   	nop

00000000000218ca <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EEC1Ev>:
      constexpr _Head_base()
   218ca:	55                   	push   %rbp
   218cb:	48 89 e5             	mov    %rsp,%rbp
   218ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   218d2:	90                   	nop
   218d3:	5d                   	pop    %rbp
   218d4:	c3                   	ret

00000000000218d5 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
   218d5:	55                   	push   %rbp
   218d6:	48 89 e5             	mov    %rsp,%rbp
   218d9:	48 83 ec 10          	sub    $0x10,%rsp
   218dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   218e1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __rhs; }
   218e5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   218e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   218ed:	48 89 d6             	mov    %rdx,%rsi
   218f0:	48 89 c7             	mov    %rax,%rdi
   218f3:	e8 78 f5 ff ff       	call   20e70 <_ZNSaIN2vk15LayerPropertiesEEC1ERKS1_>
   218f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   218fc:	c9                   	leave
   218fd:	c3                   	ret

00000000000218fe <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   218fe:	55                   	push   %rbp
   218ff:	48 89 e5             	mov    %rsp,%rbp
   21902:	48 83 ec 10          	sub    $0x10,%rsp
   21906:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2190a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   2190e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   21912:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21916:	48 89 d6             	mov    %rdx,%rsi
   21919:	48 89 c7             	mov    %rax,%rdi
   2191c:	e8 4f f5 ff ff       	call   20e70 <_ZNSaIN2vk15LayerPropertiesEEC1ERKS1_>
   21921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21925:	48 89 c7             	mov    %rax,%rdi
   21928:	e8 03 f2 ff ff       	call   20b30 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
   2192d:	90                   	nop
   2192e:	c9                   	leave
   2192f:	c3                   	ret

0000000000021930 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
   21930:	55                   	push   %rbp
   21931:	48 89 e5             	mov    %rsp,%rbp
   21934:	48 83 ec 10          	sub    $0x10,%rsp
   21938:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2193c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
   21940:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   21944:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21948:	48 89 d6             	mov    %rdx,%rsi
   2194b:	48 89 c7             	mov    %rax,%rdi
   2194e:	e8 f5 89 ff ff       	call   1a348 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm>
   21953:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21957:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   2195a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2195e:	48 8b 10             	mov    (%rax),%rdx
   21961:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21965:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   21969:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2196d:	48 8b 08             	mov    (%rax),%rcx
   21970:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   21974:	48 89 d0             	mov    %rdx,%rax
   21977:	48 c1 e0 06          	shl    $0x6,%rax
   2197b:	48 01 d0             	add    %rdx,%rax
   2197e:	48 c1 e0 03          	shl    $0x3,%rax
   21982:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   21986:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2198a:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
   2198e:	90                   	nop
   2198f:	c9                   	leave
   21990:	c3                   	ret
   21991:	90                   	nop

0000000000021992 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   21992:	55                   	push   %rbp
   21993:	48 89 e5             	mov    %rsp,%rbp
   21996:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2199a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   2199e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   219a2:	48 8b 10             	mov    (%rax),%rdx
   219a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   219a9:	48 89 10             	mov    %rdx,(%rax)
   219ac:	90                   	nop
   219ad:	5d                   	pop    %rbp
   219ae:	c3                   	ret

00000000000219af <_ZN9__gnu_cxxeqIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   219af:	55                   	push   %rbp
   219b0:	48 89 e5             	mov    %rsp,%rbp
   219b3:	53                   	push   %rbx
   219b4:	48 83 ec 18          	sub    $0x18,%rsp
   219b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   219bc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   219c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   219c4:	48 89 c7             	mov    %rax,%rdi
   219c7:	e8 1e 00 00 00       	call   219ea <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   219cc:	48 8b 18             	mov    (%rax),%rbx
   219cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   219d3:	48 89 c7             	mov    %rax,%rdi
   219d6:	e8 0f 00 00 00       	call   219ea <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   219db:	48 8b 00             	mov    (%rax),%rax
   219de:	48 39 c3             	cmp    %rax,%rbx
   219e1:	0f 94 c0             	sete   %al
   219e4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   219e8:	c9                   	leave
   219e9:	c3                   	ret

00000000000219ea <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   219ea:	55                   	push   %rbp
   219eb:	48 89 e5             	mov    %rsp,%rbp
   219ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   219f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   219f6:	5d                   	pop    %rbp
   219f7:	c3                   	ret

00000000000219f8 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
   219f8:	55                   	push   %rbp
   219f9:	48 89 e5             	mov    %rsp,%rbp
   219fc:	53                   	push   %rbx
   219fd:	48 83 ec 38          	sub    $0x38,%rsp
   21a01:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   21a05:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   21a09:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      _ForwardIterator __cur = __result;
   21a0d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21a11:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  for (; __first != __last; ++__first, (void)++__cur)
   21a15:	eb 3a                	jmp    21a51 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_+0x59>
	    std::_Construct(std::__addressof(*__cur), *__first);
   21a17:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   21a1b:	48 89 c7             	mov    %rax,%rdi
   21a1e:	e8 95 01 00 00       	call   21bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
   21a23:	48 89 c3             	mov    %rax,%rbx
   21a26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21a2a:	48 89 c7             	mov    %rax,%rdi
   21a2d:	e8 c6 a5 ff ff       	call   1bff8 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   21a32:	48 89 de             	mov    %rbx,%rsi
   21a35:	48 89 c7             	mov    %rax,%rdi
   21a38:	e8 8c 01 00 00       	call   21bc9 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
   21a3d:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   21a41:	48 89 c7             	mov    %rax,%rdi
   21a44:	e8 4b 01 00 00       	call   21b94 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>
   21a49:	48 81 45 e8 08 02 00 	addq   $0x208,-0x18(%rbp)
   21a50:	00 
   21a51:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   21a55:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   21a59:	48 89 d6             	mov    %rdx,%rsi
   21a5c:	48 89 c7             	mov    %rax,%rdi
   21a5f:	e8 4b ff ff ff       	call   219af <_ZN9__gnu_cxxeqIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
   21a64:	83 f0 01             	xor    $0x1,%eax
   21a67:	84 c0                	test   %al,%al
   21a69:	75 ac                	jne    21a17 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_+0x1f>
	  return __cur;
   21a6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   21a6f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   21a73:	c9                   	leave
   21a74:	c3                   	ret

0000000000021a75 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   21a75:	55                   	push   %rbp
   21a76:	48 89 e5             	mov    %rsp,%rbp
   21a79:	48 83 ec 30          	sub    $0x30,%rsp
   21a7d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21a81:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   21a85:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   21a89:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
      const bool __assignable
   21a8d:	c6 45 fe 00          	movb   $0x0,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   21a91:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   21a95:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   21a99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21a9d:	48 89 ce             	mov    %rcx,%rsi
   21aa0:	48 89 c7             	mov    %rax,%rdi
   21aa3:	e8 cf 01 00 00       	call   21c77 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
    }
   21aa8:	c9                   	leave
   21aa9:	c3                   	ret

0000000000021aaa <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   21aaa:	55                   	push   %rbp
   21aab:	48 89 e5             	mov    %rsp,%rbp
   21aae:	48 83 ec 20          	sub    $0x20,%rsp
   21ab2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21ab6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   21aba:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   21abf:	74 40                	je     21b01 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   21ac1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21ac5:	48 89 c7             	mov    %rax,%rdi
   21ac8:	e8 e3 51 ff ff       	call   16cb0 <_ZSt11__addressofIPKcEPT_RS2_>
   21acd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   21ad1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21ad5:	48 89 c7             	mov    %rax,%rdi
   21ad8:	e8 c7 01 00 00       	call   21ca4 <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>
	      ++__first;
   21add:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   21ae2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21ae6:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   21aea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21aee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21af2:	48 89 ce             	mov    %rcx,%rsi
   21af5:	48 89 c7             	mov    %rax,%rdi
   21af8:	e8 e4 01 00 00       	call   21ce1 <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>
   21afd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   21b01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   21b05:	c9                   	leave
   21b06:	c3                   	ret
   21b07:	90                   	nop

0000000000021b08 <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   21b08:	55                   	push   %rbp
   21b09:	48 89 e5             	mov    %rsp,%rbp
   21b0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   21b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21b14:	5d                   	pop    %rbp
   21b15:	c3                   	ret

0000000000021b16 <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   21b16:	55                   	push   %rbp
   21b17:	48 89 e5             	mov    %rsp,%rbp
   21b1a:	41 54                	push   %r12
   21b1c:	53                   	push   %rbx
   21b1d:	48 83 ec 20          	sub    $0x20,%rsp
   21b21:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21b25:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   21b29:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   21b2d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   21b31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21b35:	48 89 c7             	mov    %rax,%rdi
   21b38:	e8 f0 a5 ff ff       	call   1c12d <_ZSt12__niter_baseIPPKcET_S3_>
   21b3d:	49 89 c4             	mov    %rax,%r12
   21b40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21b44:	48 89 c7             	mov    %rax,%rdi
   21b47:	e8 e1 a5 ff ff       	call   1c12d <_ZSt12__niter_baseIPPKcET_S3_>
   21b4c:	48 89 c3             	mov    %rax,%rbx
   21b4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21b53:	48 89 c7             	mov    %rax,%rdi
   21b56:	e8 d2 a5 ff ff       	call   1c12d <_ZSt12__niter_baseIPPKcET_S3_>
   21b5b:	48 89 c7             	mov    %rax,%rdi
   21b5e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   21b62:	48 89 c1             	mov    %rax,%rcx
   21b65:	4c 89 e2             	mov    %r12,%rdx
   21b68:	48 89 de             	mov    %rbx,%rsi
   21b6b:	e8 d3 01 00 00       	call   21d43 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   21b70:	48 83 c4 20          	add    $0x20,%rsp
   21b74:	5b                   	pop    %rbx
   21b75:	41 5c                	pop    %r12
   21b77:	5d                   	pop    %rbp
   21b78:	c3                   	ret

0000000000021b79 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   21b79:	55                   	push   %rbp
   21b7a:	48 89 e5             	mov    %rsp,%rbp
   21b7d:	48 83 ec 10          	sub    $0x10,%rsp
   21b81:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21b85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21b89:	48 89 c7             	mov    %rax,%rdi
   21b8c:	e8 5a 02 00 00       	call   21deb <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERKS4_>
   21b91:	c9                   	leave
   21b92:	c3                   	ret
   21b93:	90                   	nop

0000000000021b94 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   21b94:	55                   	push   %rbp
   21b95:	48 89 e5             	mov    %rsp,%rbp
   21b98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   21b9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21ba0:	48 8b 00             	mov    (%rax),%rax
   21ba3:	48 8d 90 08 02 00 00 	lea    0x208(%rax),%rdx
   21baa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21bae:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   21bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   21bb5:	5d                   	pop    %rbp
   21bb6:	c3                   	ret
   21bb7:	90                   	nop

0000000000021bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   21bb8:	55                   	push   %rbp
   21bb9:	48 89 e5             	mov    %rsp,%rbp
   21bbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   21bc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21bc4:	48 8b 00             	mov    (%rax),%rax
   21bc7:	5d                   	pop    %rbp
   21bc8:	c3                   	ret

0000000000021bc9 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   21bc9:	55                   	push   %rbp
   21bca:	48 89 e5             	mov    %rsp,%rbp
   21bcd:	53                   	push   %rbx
   21bce:	48 83 ec 18          	sub    $0x18,%rsp
   21bd2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21bd6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      if (std::__is_constant_evaluated())
   21bda:	e8 bf 45 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   21bdf:	84 c0                	test   %al,%al
   21be1:	74 20                	je     21c03 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_+0x3a>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   21be3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21be7:	48 89 c7             	mov    %rax,%rdi
   21bea:	e8 0a 02 00 00       	call   21df9 <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>
   21bef:	48 89 c2             	mov    %rax,%rdx
   21bf2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21bf6:	48 89 d6             	mov    %rdx,%rsi
   21bf9:	48 89 c7             	mov    %rax,%rdi
   21bfc:	e8 06 02 00 00       	call   21e07 <_ZSt12construct_atIN2vk15LayerPropertiesEJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	  return;
   21c01:	eb 6e                	jmp    21c71 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_+0xa8>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   21c03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21c07:	48 89 c6             	mov    %rax,%rsi
   21c0a:	bf 08 02 00 00       	mov    $0x208,%edi
   21c0f:	e8 a0 45 fe ff       	call   61b4 <_ZnwmPv>
   21c14:	48 89 c3             	mov    %rax,%rbx
   21c17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21c1b:	48 89 c7             	mov    %rax,%rdi
   21c1e:	e8 d6 01 00 00       	call   21df9 <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>
   21c23:	48 89 c2             	mov    %rax,%rdx
   21c26:	48 89 d8             	mov    %rbx,%rax
   21c29:	b9 08 02 00 00       	mov    $0x208,%ecx
   21c2e:	48 8b 32             	mov    (%rdx),%rsi
   21c31:	48 89 30             	mov    %rsi,(%rax)
   21c34:	89 ce                	mov    %ecx,%esi
   21c36:	48 01 c6             	add    %rax,%rsi
   21c39:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   21c3d:	89 ce                	mov    %ecx,%esi
   21c3f:	48 01 d6             	add    %rdx,%rsi
   21c42:	48 83 c6 08          	add    $0x8,%rsi
   21c46:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   21c4a:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   21c4e:	48 8d 78 08          	lea    0x8(%rax),%rdi
   21c52:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   21c56:	48 29 f8             	sub    %rdi,%rax
   21c59:	48 29 c2             	sub    %rax,%rdx
   21c5c:	01 c1                	add    %eax,%ecx
   21c5e:	83 e1 f8             	and    $0xfffffff8,%ecx
   21c61:	89 c8                	mov    %ecx,%eax
   21c63:	c1 e8 03             	shr    $0x3,%eax
   21c66:	89 c0                	mov    %eax,%eax
   21c68:	48 89 d6             	mov    %rdx,%rsi
   21c6b:	48 89 c1             	mov    %rax,%rcx
   21c6e:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    }
   21c71:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   21c75:	c9                   	leave
   21c76:	c3                   	ret

0000000000021c77 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   21c77:	55                   	push   %rbp
   21c78:	48 89 e5             	mov    %rsp,%rbp
   21c7b:	48 83 ec 20          	sub    $0x20,%rsp
   21c7f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21c83:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21c87:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return std::__do_uninit_copy(__first, __last, __result); }
   21c8b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   21c8f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   21c93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21c97:	48 89 ce             	mov    %rcx,%rsi
   21c9a:	48 89 c7             	mov    %rax,%rdi
   21c9d:	e8 56 fd ff ff       	call   219f8 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
   21ca2:	c9                   	leave
   21ca3:	c3                   	ret

0000000000021ca4 <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   21ca4:	55                   	push   %rbp
   21ca5:	48 89 e5             	mov    %rsp,%rbp
   21ca8:	48 83 ec 10          	sub    $0x10,%rsp
   21cac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   21cb0:	e8 e9 44 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   21cb5:	84 c0                	test   %al,%al
   21cb7:	74 0e                	je     21cc7 <_ZSt10_ConstructIPKcJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   21cb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21cbd:	48 89 c7             	mov    %rax,%rdi
   21cc0:	e8 ca 01 00 00       	call   21e8f <_ZSt12construct_atIPKcJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   21cc5:	eb 18                	jmp    21cdf <_ZSt10_ConstructIPKcJEEvPT_DpOT0_+0x3b>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   21cc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21ccb:	48 89 c6             	mov    %rax,%rsi
   21cce:	bf 08 00 00 00       	mov    $0x8,%edi
   21cd3:	e8 dc 44 fe ff       	call   61b4 <_ZnwmPv>
   21cd8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   21cdf:	c9                   	leave
   21ce0:	c3                   	ret

0000000000021ce1 <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   21ce1:	55                   	push   %rbp
   21ce2:	48 89 e5             	mov    %rsp,%rbp
   21ce5:	48 83 ec 20          	sub    $0x20,%rsp
   21ce9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21ced:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21cf1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   21cf5:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   21cf9:	48 89 c7             	mov    %rax,%rdi
   21cfc:	e8 b4 01 00 00       	call   21eb5 <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   21d01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21d05:	48 89 c7             	mov    %rax,%rdi
   21d08:	e8 e1 d3 fe ff       	call   f0ee <_ZSt17__size_to_integerm>
   21d0d:	48 89 c1             	mov    %rax,%rcx
   21d10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21d14:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   21d18:	48 89 ce             	mov    %rcx,%rsi
   21d1b:	48 89 c7             	mov    %rax,%rdi
   21d1e:	e8 9d 01 00 00       	call   21ec0 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   21d23:	c9                   	leave
   21d24:	c3                   	ret
   21d25:	90                   	nop

0000000000021d26 <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   21d26:	55                   	push   %rbp
   21d27:	48 89 e5             	mov    %rsp,%rbp
   21d2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21d2e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   21d32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21d36:	48 8b 10             	mov    (%rax),%rdx
   21d39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21d3d:	48 89 10             	mov    %rdx,(%rax)
   21d40:	90                   	nop
   21d41:	5d                   	pop    %rbp
   21d42:	c3                   	ret

0000000000021d43 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   21d43:	55                   	push   %rbp
   21d44:	48 89 e5             	mov    %rsp,%rbp
   21d47:	48 83 ec 30          	sub    $0x30,%rsp
   21d4b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21d4f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   21d53:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   21d57:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   21d5b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21d5f:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   21d63:	48 c1 f8 03          	sar    $0x3,%rax
   21d67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   21d6b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   21d70:	7e 68                	jle    21dda <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x97>
	  if (std::is_constant_evaluated())
   21d72:	e8 32 44 fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   21d77:	84 c0                	test   %al,%al
   21d79:	74 40                	je     21dbb <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x78>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
   21d7b:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   21d7f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   21d83:	48 89 d6             	mov    %rdx,%rsi
   21d86:	48 89 c7             	mov    %rax,%rdi
   21d89:	e8 98 ff ff ff       	call   21d26 <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEC1ERKS3_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
   21d8e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   21d92:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   21d96:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   21d9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21d9e:	48 89 c7             	mov    %rax,%rdi
   21da1:	e8 77 01 00 00       	call   21f1d <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>
   21da6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      return __out.base();
   21daa:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   21dae:	48 89 c7             	mov    %rax,%rdi
   21db1:	e8 e8 01 00 00       	call   21f9e <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvE4baseEv>
   21db6:	48 8b 00             	mov    (%rax),%rax
   21db9:	eb 2e                	jmp    21de9 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0xa6>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   21dbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21dbf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21dc6:	00 
   21dc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21dcb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   21dcf:	48 89 ce             	mov    %rcx,%rsi
   21dd2:	48 89 c7             	mov    %rax,%rdi
   21dd5:	e8 86 35 fe ff       	call   5360 <memmove@plt>
      return __result + __count;
   21dda:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21dde:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21de2:	48 c1 e2 03          	shl    $0x3,%rdx
   21de6:	48 01 d0             	add    %rdx,%rax
    }
   21de9:	c9                   	leave
   21dea:	c3                   	ret

0000000000021deb <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
   21deb:	55                   	push   %rbp
   21dec:	48 89 e5             	mov    %rsp,%rbp
   21def:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21df3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21df7:	5d                   	pop    %rbp
   21df8:	c3                   	ret

0000000000021df9 <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   21df9:	55                   	push   %rbp
   21dfa:	48 89 e5             	mov    %rsp,%rbp
   21dfd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   21e01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21e05:	5d                   	pop    %rbp
   21e06:	c3                   	ret

0000000000021e07 <_ZSt12construct_atIN2vk15LayerPropertiesEJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
   21e07:	55                   	push   %rbp
   21e08:	48 89 e5             	mov    %rsp,%rbp
   21e0b:	53                   	push   %rbx
   21e0c:	48 83 ec 18          	sub    $0x18,%rsp
   21e10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   21e14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   21e18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21e1c:	48 89 c6             	mov    %rax,%rsi
   21e1f:	bf 08 02 00 00       	mov    $0x208,%edi
   21e24:	e8 8b 43 fe ff       	call   61b4 <_ZnwmPv>
   21e29:	48 89 c3             	mov    %rax,%rbx
   21e2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21e30:	48 89 c7             	mov    %rax,%rdi
   21e33:	e8 c1 ff ff ff       	call   21df9 <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>
   21e38:	48 89 c2             	mov    %rax,%rdx
   21e3b:	48 89 d8             	mov    %rbx,%rax
   21e3e:	b9 08 02 00 00       	mov    $0x208,%ecx
   21e43:	48 8b 32             	mov    (%rdx),%rsi
   21e46:	48 89 30             	mov    %rsi,(%rax)
   21e49:	89 ce                	mov    %ecx,%esi
   21e4b:	48 01 c6             	add    %rax,%rsi
   21e4e:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   21e52:	89 ce                	mov    %ecx,%esi
   21e54:	48 01 d6             	add    %rdx,%rsi
   21e57:	48 83 c6 08          	add    $0x8,%rsi
   21e5b:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   21e5f:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   21e63:	48 8d 78 08          	lea    0x8(%rax),%rdi
   21e67:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   21e6b:	48 29 f8             	sub    %rdi,%rax
   21e6e:	48 29 c2             	sub    %rax,%rdx
   21e71:	01 c1                	add    %eax,%ecx
   21e73:	83 e1 f8             	and    $0xfffffff8,%ecx
   21e76:	89 c8                	mov    %ecx,%eax
   21e78:	c1 e8 03             	shr    $0x3,%eax
   21e7b:	89 c0                	mov    %eax,%eax
   21e7d:	48 89 d6             	mov    %rdx,%rsi
   21e80:	48 89 c1             	mov    %rax,%rcx
   21e83:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   21e86:	48 89 d8             	mov    %rbx,%rax
   21e89:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   21e8d:	c9                   	leave
   21e8e:	c3                   	ret

0000000000021e8f <_ZSt12construct_atIPKcJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   21e8f:	55                   	push   %rbp
   21e90:	48 89 e5             	mov    %rsp,%rbp
   21e93:	48 83 ec 10          	sub    $0x10,%rsp
   21e97:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   21e9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21e9f:	48 89 c6             	mov    %rax,%rsi
   21ea2:	bf 08 00 00 00       	mov    $0x8,%edi
   21ea7:	e8 08 43 fe ff       	call   61b4 <_ZnwmPv>
   21eac:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   21eb3:	c9                   	leave
   21eb4:	c3                   	ret

0000000000021eb5 <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   21eb5:	55                   	push   %rbp
   21eb6:	48 89 e5             	mov    %rsp,%rbp
   21eb9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   21ebd:	90                   	nop
   21ebe:	5d                   	pop    %rbp
   21ebf:	c3                   	ret

0000000000021ec0 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   21ec0:	55                   	push   %rbp
   21ec1:	48 89 e5             	mov    %rsp,%rbp
   21ec4:	48 83 ec 20          	sub    $0x20,%rsp
   21ec8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21ecc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21ed0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   21ed4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   21ed9:	75 06                	jne    21ee1 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   21edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21edf:	eb 3a                	jmp    21f1b <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   21ee1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21ee5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21eec:	00 
   21eed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21ef1:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   21ef5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   21ef9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21efd:	48 89 ce             	mov    %rcx,%rsi
   21f00:	48 89 c7             	mov    %rax,%rdi
   21f03:	e8 a4 00 00 00       	call   21fac <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>
      return __first + __n;
   21f08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21f0c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21f13:	00 
   21f14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21f18:	48 01 d0             	add    %rdx,%rax
    }
   21f1b:	c9                   	leave
   21f1c:	c3                   	ret

0000000000021f1d <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   21f1d:	55                   	push   %rbp
   21f1e:	48 89 e5             	mov    %rsp,%rbp
   21f21:	53                   	push   %rbx
   21f22:	48 83 ec 38          	sub    $0x38,%rsp
   21f26:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   21f2a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   21f2e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   21f32:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   21f36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   21f3a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   21f3e:	eb 49                	jmp    21f89 <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x6c>
	std::__relocate_object_a(std::__addressof(*__cur),
   21f40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21f44:	48 89 c7             	mov    %rax,%rdi
   21f47:	e8 64 4d ff ff       	call   16cb0 <_ZSt11__addressofIPKcEPT_RS2_>
   21f4c:	48 89 c3             	mov    %rax,%rbx
   21f4f:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   21f53:	48 89 c7             	mov    %rax,%rdi
   21f56:	e8 9f 00 00 00       	call   21ffa <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvEdeEv>
   21f5b:	48 89 c7             	mov    %rax,%rdi
   21f5e:	e8 4d 4d ff ff       	call   16cb0 <_ZSt11__addressofIPKcEPT_RS2_>
   21f63:	48 89 c1             	mov    %rax,%rcx
   21f66:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   21f6a:	48 89 c2             	mov    %rax,%rdx
   21f6d:	48 89 de             	mov    %rbx,%rsi
   21f70:	48 89 cf             	mov    %rcx,%rdi
   21f73:	e8 93 00 00 00       	call   2200b <_ZSt19__relocate_object_aIPKcS1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   21f78:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
   21f7d:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   21f81:	48 89 c7             	mov    %rax,%rdi
   21f84:	e8 51 00 00 00       	call   21fda <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEppEv>
   21f89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21f8d:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   21f91:	75 ad                	jne    21f40 <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x23>
      return __cur;
   21f93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   21f97:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   21f9b:	c9                   	leave
   21f9c:	c3                   	ret
   21f9d:	90                   	nop

0000000000021f9e <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   21f9e:	55                   	push   %rbp
   21f9f:	48 89 e5             	mov    %rsp,%rbp
   21fa2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   21fa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21faa:	5d                   	pop    %rbp
   21fab:	c3                   	ret

0000000000021fac <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   21fac:	55                   	push   %rbp
   21fad:	48 89 e5             	mov    %rsp,%rbp
   21fb0:	48 83 ec 20          	sub    $0x20,%rsp
   21fb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21fb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21fbc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   21fc0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   21fc4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   21fc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21fcc:	48 89 ce             	mov    %rcx,%rsi
   21fcf:	48 89 c7             	mov    %rax,%rdi
   21fd2:	e8 8b 00 00 00       	call   22062 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   21fd7:	90                   	nop
   21fd8:	c9                   	leave
   21fd9:	c3                   	ret

0000000000021fda <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   21fda:	55                   	push   %rbp
   21fdb:	48 89 e5             	mov    %rsp,%rbp
   21fde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   21fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21fe6:	48 8b 00             	mov    (%rax),%rax
   21fe9:	48 8d 50 08          	lea    0x8(%rax),%rdx
   21fed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21ff1:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   21ff4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   21ff8:	5d                   	pop    %rbp
   21ff9:	c3                   	ret

0000000000021ffa <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   21ffa:	55                   	push   %rbp
   21ffb:	48 89 e5             	mov    %rsp,%rbp
   21ffe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   22002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22006:	48 8b 00             	mov    (%rax),%rax
   22009:	5d                   	pop    %rbp
   2200a:	c3                   	ret

000000000002200b <_ZSt19__relocate_object_aIPKcS1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   2200b:	55                   	push   %rbp
   2200c:	48 89 e5             	mov    %rsp,%rbp
   2200f:	48 83 ec 20          	sub    $0x20,%rsp
   22013:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22017:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2201b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   2201f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22023:	48 89 c7             	mov    %rax,%rdi
   22026:	e8 85 ef ff ff       	call   20fb0 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
   2202b:	48 89 c2             	mov    %rax,%rdx
   2202e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   22032:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22036:	48 89 ce             	mov    %rcx,%rsi
   22039:	48 89 c7             	mov    %rax,%rdi
   2203c:	e8 3a f2 ff ff       	call   2127b <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   22041:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22045:	48 89 c7             	mov    %rax,%rdi
   22048:	e8 63 4c ff ff       	call   16cb0 <_ZSt11__addressofIPKcEPT_RS2_>
   2204d:	48 89 c2             	mov    %rax,%rdx
   22050:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22054:	48 89 d6             	mov    %rdx,%rsi
   22057:	48 89 c7             	mov    %rax,%rdi
   2205a:	e8 dd f7 ff ff       	call   2183c <_ZNSt16allocator_traitsISaIPKcEE7destroyIS1_EEvRS2_PT_>
    }
   2205f:	90                   	nop
   22060:	c9                   	leave
   22061:	c3                   	ret

0000000000022062 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   22062:	55                   	push   %rbp
   22063:	48 89 e5             	mov    %rsp,%rbp
   22066:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2206a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2206e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   22072:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22076:	48 8b 00             	mov    (%rax),%rax
   22079:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   2207d:	eb 10                	jmp    2208f <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   2207f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22083:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   22087:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   2208a:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   2208f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22093:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   22097:	75 e6                	jne    2207f <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   22099:	90                   	nop
   2209a:	90                   	nop
   2209b:	5d                   	pop    %rbp
   2209c:	c3                   	ret

Disassembly of section .fini:

00000000000220a0 <_fini>:
   220a0:	48 83 ec 08          	sub    $0x8,%rsp
   220a4:	48 83 c4 08          	add    $0x8,%rsp
   220a8:	c3                   	ret
