
build/Application:     file format elf64-x86-64


Disassembly of section .init:

0000000000006000 <_init>:
    6000:	48 83 ec 08          	sub    $0x8,%rsp
    6004:	48 8b 05 ad af 03 00 	mov    0x3afad(%rip),%rax        # 40fb8 <__gmon_start__@Base>
    600b:	48 85 c0             	test   %rax,%rax
    600e:	74 02                	je     6012 <_init+0x12>
    6010:	ff d0                	call   *%rax
    6012:	48 83 c4 08          	add    $0x8,%rsp
    6016:	c3                   	ret

Disassembly of section .plt:

0000000000006020 <ftell@plt-0x10>:
    6020:	ff 35 ca af 03 00    	push   0x3afca(%rip)        # 40ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
    6026:	ff 25 cc af 03 00    	jmp    *0x3afcc(%rip)        # 40ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
    602c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006030 <ftell@plt>:
    6030:	ff 25 ca af 03 00    	jmp    *0x3afca(%rip)        # 41000 <ftell@GLIBC_2.2.5>
    6036:	68 00 00 00 00       	push   $0x0
    603b:	e9 e0 ff ff ff       	jmp    6020 <_init+0x20>

0000000000006040 <_ZNSo3putEc@plt>:
    6040:	ff 25 c2 af 03 00    	jmp    *0x3afc2(%rip)        # 41008 <_ZNSo3putEc@GLIBCXX_3.4>
    6046:	68 01 00 00 00       	push   $0x1
    604b:	e9 d0 ff ff ff       	jmp    6020 <_init+0x20>

0000000000006050 <vkAllocateDescriptorSets@plt>:
    6050:	ff 25 ba af 03 00    	jmp    *0x3afba(%rip)        # 41010 <vkAllocateDescriptorSets@Base>
    6056:	68 02 00 00 00       	push   $0x2
    605b:	e9 c0 ff ff ff       	jmp    6020 <_init+0x20>

0000000000006060 <_ZNSt6chrono3_V212system_clock3nowEv@plt>:
    6060:	ff 25 b2 af 03 00    	jmp    *0x3afb2(%rip)        # 41018 <_ZNSt6chrono3_V212system_clock3nowEv@GLIBCXX_3.4.19>
    6066:	68 03 00 00 00       	push   $0x3
    606b:	e9 b0 ff ff ff       	jmp    6020 <_init+0x20>

0000000000006070 <vkCmdEndRenderPass@plt>:
    6070:	ff 25 aa af 03 00    	jmp    *0x3afaa(%rip)        # 41020 <vkCmdEndRenderPass@Base>
    6076:	68 04 00 00 00       	push   $0x4
    607b:	e9 a0 ff ff ff       	jmp    6020 <_init+0x20>

0000000000006080 <ungetc@plt>:
    6080:	ff 25 a2 af 03 00    	jmp    *0x3afa2(%rip)        # 41028 <ungetc@GLIBC_2.2.5>
    6086:	68 05 00 00 00       	push   $0x5
    608b:	e9 90 ff ff ff       	jmp    6020 <_init+0x20>

0000000000006090 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>:
    6090:	ff 25 9a af 03 00    	jmp    *0x3af9a(%rip)        # 41030 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@GLIBCXX_3.4>
    6096:	68 06 00 00 00       	push   $0x6
    609b:	e9 80 ff ff ff       	jmp    6020 <_init+0x20>

00000000000060a0 <vkDestroyImage@plt>:
    60a0:	ff 25 92 af 03 00    	jmp    *0x3af92(%rip)        # 41038 <vkDestroyImage@Base>
    60a6:	68 07 00 00 00       	push   $0x7
    60ab:	e9 70 ff ff ff       	jmp    6020 <_init+0x20>

00000000000060b0 <vkGetBufferMemoryRequirements@plt>:
    60b0:	ff 25 8a af 03 00    	jmp    *0x3af8a(%rip)        # 41040 <vkGetBufferMemoryRequirements@Base>
    60b6:	68 08 00 00 00       	push   $0x8
    60bb:	e9 60 ff ff ff       	jmp    6020 <_init+0x20>

00000000000060c0 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@plt>:
    60c0:	ff 25 82 af 03 00    	jmp    *0x3af82(%rip)        # 41048 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@GLIBCXX_3.4>
    60c6:	68 09 00 00 00       	push   $0x9
    60cb:	e9 50 ff ff ff       	jmp    6020 <_init+0x20>

00000000000060d0 <_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv@plt>:
    60d0:	ff 25 7a af 03 00    	jmp    *0x3af7a(%rip)        # 41050 <_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv@GLIBCXX_3.4>
    60d6:	68 0a 00 00 00       	push   $0xa
    60db:	e9 40 ff ff ff       	jmp    6020 <_init+0x20>

00000000000060e0 <_ZNKSt12__basic_fileIcE7is_openEv@plt>:
    60e0:	ff 25 72 af 03 00    	jmp    *0x3af72(%rip)        # 41058 <_ZNKSt12__basic_fileIcE7is_openEv@GLIBCXX_3.4>
    60e6:	68 0b 00 00 00       	push   $0xb
    60eb:	e9 30 ff ff ff       	jmp    6020 <_init+0x20>

00000000000060f0 <vkDeviceWaitIdle@plt>:
    60f0:	ff 25 6a af 03 00    	jmp    *0x3af6a(%rip)        # 41060 <vkDeviceWaitIdle@Base>
    60f6:	68 0c 00 00 00       	push   $0xc
    60fb:	e9 20 ff ff ff       	jmp    6020 <_init+0x20>

0000000000006100 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@plt>:
    6100:	ff 25 62 af 03 00    	jmp    *0x3af62(%rip)        # 41068 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@GLIBCXX_3.4>
    6106:	68 0d 00 00 00       	push   $0xd
    610b:	e9 10 ff ff ff       	jmp    6020 <_init+0x20>

0000000000006110 <vkCreateDescriptorPool@plt>:
    6110:	ff 25 5a af 03 00    	jmp    *0x3af5a(%rip)        # 41070 <vkCreateDescriptorPool@Base>
    6116:	68 0e 00 00 00       	push   $0xe
    611b:	e9 00 ff ff ff       	jmp    6020 <_init+0x20>

0000000000006120 <_ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE@plt>:
    6120:	ff 25 52 af 03 00    	jmp    *0x3af52(%rip)        # 41078 <_ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE@GLIBCXX_3.4.26>
    6126:	68 0f 00 00 00       	push   $0xf
    612b:	e9 f0 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006130 <vkDestroySwapchainKHR@plt>:
    6130:	ff 25 4a af 03 00    	jmp    *0x3af4a(%rip)        # 41080 <vkDestroySwapchainKHR@Base>
    6136:	68 10 00 00 00       	push   $0x10
    613b:	e9 e0 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006140 <_ZNSt8ios_baseC2Ev@plt>:
    6140:	ff 25 42 af 03 00    	jmp    *0x3af42(%rip)        # 41088 <_ZNSt8ios_baseC2Ev@GLIBCXX_3.4>
    6146:	68 11 00 00 00       	push   $0x11
    614b:	e9 d0 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006150 <vkCmdPipelineBarrier@plt>:
    6150:	ff 25 3a af 03 00    	jmp    *0x3af3a(%rip)        # 41090 <vkCmdPipelineBarrier@Base>
    6156:	68 12 00 00 00       	push   $0x12
    615b:	e9 c0 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006160 <vkCreateSampler@plt>:
    6160:	ff 25 32 af 03 00    	jmp    *0x3af32(%rip)        # 41098 <vkCreateSampler@Base>
    6166:	68 13 00 00 00       	push   $0x13
    616b:	e9 b0 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006170 <vkDestroySemaphore@plt>:
    6170:	ff 25 2a af 03 00    	jmp    *0x3af2a(%rip)        # 410a0 <vkDestroySemaphore@Base>
    6176:	68 14 00 00 00       	push   $0x14
    617b:	e9 a0 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>:
    6180:	ff 25 22 af 03 00    	jmp    *0x3af22(%rip)        # 410a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@GLIBCXX_3.4.21>
    6186:	68 15 00 00 00       	push   $0x15
    618b:	e9 90 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006190 <glfwDestroyWindow@plt>:
    6190:	ff 25 1a af 03 00    	jmp    *0x3af1a(%rip)        # 410b0 <glfwDestroyWindow@Base>
    6196:	68 16 00 00 00       	push   $0x16
    619b:	e9 80 fe ff ff       	jmp    6020 <_init+0x20>

00000000000061a0 <_ZNSt8ios_baseD2Ev@plt>:
    61a0:	ff 25 12 af 03 00    	jmp    *0x3af12(%rip)        # 410b8 <_ZNSt8ios_baseD2Ev@GLIBCXX_3.4>
    61a6:	68 17 00 00 00       	push   $0x17
    61ab:	e9 70 fe ff ff       	jmp    6020 <_init+0x20>

00000000000061b0 <_ZNSt13runtime_errorC1EPKc@plt>:
    61b0:	ff 25 0a af 03 00    	jmp    *0x3af0a(%rip)        # 410c0 <_ZNSt13runtime_errorC1EPKc@GLIBCXX_3.4.21>
    61b6:	68 18 00 00 00       	push   $0x18
    61bb:	e9 60 fe ff ff       	jmp    6020 <_init+0x20>

00000000000061c0 <vkGetPhysicalDeviceProperties@plt>:
    61c0:	ff 25 02 af 03 00    	jmp    *0x3af02(%rip)        # 410c8 <vkGetPhysicalDeviceProperties@Base>
    61c6:	68 19 00 00 00       	push   $0x19
    61cb:	e9 50 fe ff ff       	jmp    6020 <_init+0x20>

00000000000061d0 <vkCmdDrawIndexed@plt>:
    61d0:	ff 25 fa ae 03 00    	jmp    *0x3aefa(%rip)        # 410d0 <vkCmdDrawIndexed@Base>
    61d6:	68 1a 00 00 00       	push   $0x1a
    61db:	e9 40 fe ff ff       	jmp    6020 <_init+0x20>

00000000000061e0 <__cxa_begin_catch@plt>:
    61e0:	ff 25 f2 ae 03 00    	jmp    *0x3aef2(%rip)        # 410d8 <__cxa_begin_catch@CXXABI_1.3>
    61e6:	68 1b 00 00 00       	push   $0x1b
    61eb:	e9 30 fe ff ff       	jmp    6020 <_init+0x20>

00000000000061f0 <vkAcquireNextImageKHR@plt>:
    61f0:	ff 25 ea ae 03 00    	jmp    *0x3aeea(%rip)        # 410e0 <vkAcquireNextImageKHR@Base>
    61f6:	68 1c 00 00 00       	push   $0x1c
    61fb:	e9 20 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006200 <sincosf@plt>:
    6200:	ff 25 e2 ae 03 00    	jmp    *0x3aee2(%rip)        # 410e8 <sincosf@GLIBC_2.2.5>
    6206:	68 1d 00 00 00       	push   $0x1d
    620b:	e9 10 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006210 <vkCreateCommandPool@plt>:
    6210:	ff 25 da ae 03 00    	jmp    *0x3aeda(%rip)        # 410f0 <vkCreateCommandPool@Base>
    6216:	68 1e 00 00 00       	push   $0x1e
    621b:	e9 00 fe ff ff       	jmp    6020 <_init+0x20>

0000000000006220 <strlen@plt>:
    6220:	ff 25 d2 ae 03 00    	jmp    *0x3aed2(%rip)        # 410f8 <strlen@GLIBC_2.2.5>
    6226:	68 1f 00 00 00       	push   $0x1f
    622b:	e9 f0 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006230 <memcmp@plt>:
    6230:	ff 25 ca ae 03 00    	jmp    *0x3aeca(%rip)        # 41100 <memcmp@GLIBC_2.2.5>
    6236:	68 20 00 00 00       	push   $0x20
    623b:	e9 e0 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006240 <vkCreateGraphicsPipelines@plt>:
    6240:	ff 25 c2 ae 03 00    	jmp    *0x3aec2(%rip)        # 41108 <vkCreateGraphicsPipelines@Base>
    6246:	68 21 00 00 00       	push   $0x21
    624b:	e9 d0 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006250 <__cxa_allocate_exception@plt>:
    6250:	ff 25 ba ae 03 00    	jmp    *0x3aeba(%rip)        # 41110 <__cxa_allocate_exception@CXXABI_1.3>
    6256:	68 22 00 00 00       	push   $0x22
    625b:	e9 c0 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006260 <vkDestroyBuffer@plt>:
    6260:	ff 25 b2 ae 03 00    	jmp    *0x3aeb2(%rip)        # 41118 <vkDestroyBuffer@Base>
    6266:	68 23 00 00 00       	push   $0x23
    626b:	e9 b0 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006270 <glfwSetWindowUserPointer@plt>:
    6270:	ff 25 aa ae 03 00    	jmp    *0x3aeaa(%rip)        # 41120 <glfwSetWindowUserPointer@Base>
    6276:	68 24 00 00 00       	push   $0x24
    627b:	e9 a0 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006280 <_ZSt20__throw_length_errorPKc@plt>:
    6280:	ff 25 a2 ae 03 00    	jmp    *0x3aea2(%rip)        # 41128 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
    6286:	68 25 00 00 00       	push   $0x25
    628b:	e9 90 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006290 <vkEnumeratePhysicalDevices@plt>:
    6290:	ff 25 9a ae 03 00    	jmp    *0x3ae9a(%rip)        # 41130 <vkEnumeratePhysicalDevices@Base>
    6296:	68 26 00 00 00       	push   $0x26
    629b:	e9 80 fd ff ff       	jmp    6020 <_init+0x20>

00000000000062a0 <memset@plt>:
    62a0:	ff 25 92 ae 03 00    	jmp    *0x3ae92(%rip)        # 41138 <memset@GLIBC_2.2.5>
    62a6:	68 27 00 00 00       	push   $0x27
    62ab:	e9 70 fd ff ff       	jmp    6020 <_init+0x20>

00000000000062b0 <vkCmdBindDescriptorSets@plt>:
    62b0:	ff 25 8a ae 03 00    	jmp    *0x3ae8a(%rip)        # 41140 <vkCmdBindDescriptorSets@Base>
    62b6:	68 28 00 00 00       	push   $0x28
    62bb:	e9 60 fd ff ff       	jmp    6020 <_init+0x20>

00000000000062c0 <vkWaitForFences@plt>:
    62c0:	ff 25 82 ae 03 00    	jmp    *0x3ae82(%rip)        # 41148 <vkWaitForFences@Base>
    62c6:	68 29 00 00 00       	push   $0x29
    62cb:	e9 50 fd ff ff       	jmp    6020 <_init+0x20>

00000000000062d0 <glfwWaitEvents@plt>:
    62d0:	ff 25 7a ae 03 00    	jmp    *0x3ae7a(%rip)        # 41150 <glfwWaitEvents@Base>
    62d6:	68 2a 00 00 00       	push   $0x2a
    62db:	e9 40 fd ff ff       	jmp    6020 <_init+0x20>

00000000000062e0 <vkGetSwapchainImagesKHR@plt>:
    62e0:	ff 25 72 ae 03 00    	jmp    *0x3ae72(%rip)        # 41158 <vkGetSwapchainImagesKHR@Base>
    62e6:	68 2b 00 00 00       	push   $0x2b
    62eb:	e9 30 fd ff ff       	jmp    6020 <_init+0x20>

00000000000062f0 <vkDestroySampler@plt>:
    62f0:	ff 25 6a ae 03 00    	jmp    *0x3ae6a(%rip)        # 41160 <vkDestroySampler@Base>
    62f6:	68 2c 00 00 00       	push   $0x2c
    62fb:	e9 20 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006300 <__cxa_guard_abort@plt>:
    6300:	ff 25 62 ae 03 00    	jmp    *0x3ae62(%rip)        # 41168 <__cxa_guard_abort@CXXABI_1.3>
    6306:	68 2d 00 00 00       	push   $0x2d
    630b:	e9 10 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006310 <vkCreateRenderPass@plt>:
    6310:	ff 25 5a ae 03 00    	jmp    *0x3ae5a(%rip)        # 41170 <vkCreateRenderPass@Base>
    6316:	68 2e 00 00 00       	push   $0x2e
    631b:	e9 00 fd ff ff       	jmp    6020 <_init+0x20>

0000000000006320 <__cxa_guard_release@plt>:
    6320:	ff 25 52 ae 03 00    	jmp    *0x3ae52(%rip)        # 41178 <__cxa_guard_release@CXXABI_1.3>
    6326:	68 2f 00 00 00       	push   $0x2f
    632b:	e9 f0 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006330 <vkGetImageMemoryRequirements@plt>:
    6330:	ff 25 4a ae 03 00    	jmp    *0x3ae4a(%rip)        # 41180 <vkGetImageMemoryRequirements@Base>
    6336:	68 30 00 00 00       	push   $0x30
    633b:	e9 e0 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006340 <calloc@plt>:
    6340:	ff 25 42 ae 03 00    	jmp    *0x3ae42(%rip)        # 41188 <calloc@GLIBC_2.2.5>
    6346:	68 31 00 00 00       	push   $0x31
    634b:	e9 d0 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006350 <_ZNSo9_M_insertImEERSoT_@plt>:
    6350:	ff 25 3a ae 03 00    	jmp    *0x3ae3a(%rip)        # 41190 <_ZNSo9_M_insertImEERSoT_@GLIBCXX_3.4.9>
    6356:	68 32 00 00 00       	push   $0x32
    635b:	e9 c0 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006360 <_ZNSo5flushEv@plt>:
    6360:	ff 25 32 ae 03 00    	jmp    *0x3ae32(%rip)        # 41198 <_ZNSo5flushEv@GLIBCXX_3.4>
    6366:	68 33 00 00 00       	push   $0x33
    636b:	e9 b0 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006370 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>:
    6370:	ff 25 2a ae 03 00    	jmp    *0x3ae2a(%rip)        # 411a0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    6376:	68 34 00 00 00       	push   $0x34
    637b:	e9 a0 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006380 <_ZSt19__throw_logic_errorPKc@plt>:
    6380:	ff 25 22 ae 03 00    	jmp    *0x3ae22(%rip)        # 411a8 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
    6386:	68 35 00 00 00       	push   $0x35
    638b:	e9 90 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006390 <__cxa_free_exception@plt>:
    6390:	ff 25 1a ae 03 00    	jmp    *0x3ae1a(%rip)        # 411b0 <__cxa_free_exception@CXXABI_1.3>
    6396:	68 36 00 00 00       	push   $0x36
    639b:	e9 80 fc ff ff       	jmp    6020 <_init+0x20>

00000000000063a0 <vkFreeCommandBuffers@plt>:
    63a0:	ff 25 12 ae 03 00    	jmp    *0x3ae12(%rip)        # 411b8 <vkFreeCommandBuffers@Base>
    63a6:	68 37 00 00 00       	push   $0x37
    63ab:	e9 70 fc ff ff       	jmp    6020 <_init+0x20>

00000000000063b0 <vkGetPhysicalDeviceQueueFamilyProperties@plt>:
    63b0:	ff 25 0a ae 03 00    	jmp    *0x3ae0a(%rip)        # 411c0 <vkGetPhysicalDeviceQueueFamilyProperties@Base>
    63b6:	68 38 00 00 00       	push   $0x38
    63bb:	e9 60 fc ff ff       	jmp    6020 <_init+0x20>

00000000000063c0 <vkGetPhysicalDeviceFeatures@plt>:
    63c0:	ff 25 02 ae 03 00    	jmp    *0x3ae02(%rip)        # 411c8 <vkGetPhysicalDeviceFeatures@Base>
    63c6:	68 39 00 00 00       	push   $0x39
    63cb:	e9 50 fc ff ff       	jmp    6020 <_init+0x20>

00000000000063d0 <glfwGetRequiredInstanceExtensions@plt>:
    63d0:	ff 25 fa ad 03 00    	jmp    *0x3adfa(%rip)        # 411d0 <glfwGetRequiredInstanceExtensions@Base>
    63d6:	68 3a 00 00 00       	push   $0x3a
    63db:	e9 40 fc ff ff       	jmp    6020 <_init+0x20>

00000000000063e0 <_ZSt28__throw_bad_array_new_lengthv@plt>:
    63e0:	ff 25 f2 ad 03 00    	jmp    *0x3adf2(%rip)        # 411d8 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
    63e6:	68 3b 00 00 00       	push   $0x3b
    63eb:	e9 30 fc ff ff       	jmp    6020 <_init+0x20>

00000000000063f0 <vkCreateShaderModule@plt>:
    63f0:	ff 25 ea ad 03 00    	jmp    *0x3adea(%rip)        # 411e0 <vkCreateShaderModule@Base>
    63f6:	68 3c 00 00 00       	push   $0x3c
    63fb:	e9 20 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006400 <vkUnmapMemory@plt>:
    6400:	ff 25 e2 ad 03 00    	jmp    *0x3ade2(%rip)        # 411e8 <vkUnmapMemory@Base>
    6406:	68 3d 00 00 00       	push   $0x3d
    640b:	e9 10 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006410 <memcpy@plt>:
    6410:	ff 25 da ad 03 00    	jmp    *0x3adda(%rip)        # 411f0 <memcpy@GLIBC_2.14>
    6416:	68 3e 00 00 00       	push   $0x3e
    641b:	e9 00 fc ff ff       	jmp    6020 <_init+0x20>

0000000000006420 <vkDestroyDevice@plt>:
    6420:	ff 25 d2 ad 03 00    	jmp    *0x3add2(%rip)        # 411f8 <vkDestroyDevice@Base>
    6426:	68 3f 00 00 00       	push   $0x3f
    642b:	e9 f0 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006430 <vkCreatePipelineLayout@plt>:
    6430:	ff 25 ca ad 03 00    	jmp    *0x3adca(%rip)        # 41200 <vkCreatePipelineLayout@Base>
    6436:	68 40 00 00 00       	push   $0x40
    643b:	e9 e0 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006440 <vkEnumerateInstanceExtensionProperties@plt>:
    6440:	ff 25 c2 ad 03 00    	jmp    *0x3adc2(%rip)        # 41208 <vkEnumerateInstanceExtensionProperties@Base>
    6446:	68 41 00 00 00       	push   $0x41
    644b:	e9 d0 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006450 <glfwWindowHint@plt>:
    6450:	ff 25 ba ad 03 00    	jmp    *0x3adba(%rip)        # 41210 <glfwWindowHint@Base>
    6456:	68 42 00 00 00       	push   $0x42
    645b:	e9 c0 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006460 <vkGetPhysicalDeviceSurfaceCapabilitiesKHR@plt>:
    6460:	ff 25 b2 ad 03 00    	jmp    *0x3adb2(%rip)        # 41218 <vkGetPhysicalDeviceSurfaceCapabilitiesKHR@Base>
    6466:	68 43 00 00 00       	push   $0x43
    646b:	e9 b0 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006470 <vkCmdBindPipeline@plt>:
    6470:	ff 25 aa ad 03 00    	jmp    *0x3adaa(%rip)        # 41220 <vkCmdBindPipeline@Base>
    6476:	68 44 00 00 00       	push   $0x44
    647b:	e9 a0 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006480 <__cxa_atexit@plt>:
    6480:	ff 25 a2 ad 03 00    	jmp    *0x3ada2(%rip)        # 41228 <__cxa_atexit@GLIBC_2.2.5>
    6486:	68 45 00 00 00       	push   $0x45
    648b:	e9 90 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006490 <_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode@plt>:
    6490:	ff 25 9a ad 03 00    	jmp    *0x3ad9a(%rip)        # 41230 <_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode@GLIBCXX_3.4>
    6496:	68 46 00 00 00       	push   $0x46
    649b:	e9 80 fb ff ff       	jmp    6020 <_init+0x20>

00000000000064a0 <vkMapMemory@plt>:
    64a0:	ff 25 92 ad 03 00    	jmp    *0x3ad92(%rip)        # 41238 <vkMapMemory@Base>
    64a6:	68 47 00 00 00       	push   $0x47
    64ab:	e9 70 fb ff ff       	jmp    6020 <_init+0x20>

00000000000064b0 <vkFreeMemory@plt>:
    64b0:	ff 25 8a ad 03 00    	jmp    *0x3ad8a(%rip)        # 41240 <vkFreeMemory@Base>
    64b6:	68 48 00 00 00       	push   $0x48
    64bb:	e9 60 fb ff ff       	jmp    6020 <_init+0x20>

00000000000064c0 <vkAllocateCommandBuffers@plt>:
    64c0:	ff 25 82 ad 03 00    	jmp    *0x3ad82(%rip)        # 41248 <vkAllocateCommandBuffers@Base>
    64c6:	68 49 00 00 00       	push   $0x49
    64cb:	e9 50 fb ff ff       	jmp    6020 <_init+0x20>

00000000000064d0 <vkGetPhysicalDeviceProperties2@plt>:
    64d0:	ff 25 7a ad 03 00    	jmp    *0x3ad7a(%rip)        # 41250 <vkGetPhysicalDeviceProperties2@Base>
    64d6:	68 4a 00 00 00       	push   $0x4a
    64db:	e9 40 fb ff ff       	jmp    6020 <_init+0x20>

00000000000064e0 <vkGetInstanceProcAddr@plt>:
    64e0:	ff 25 72 ad 03 00    	jmp    *0x3ad72(%rip)        # 41258 <vkGetInstanceProcAddr@Base>
    64e6:	68 4b 00 00 00       	push   $0x4b
    64eb:	e9 30 fb ff ff       	jmp    6020 <_init+0x20>

00000000000064f0 <glfwPollEvents@plt>:
    64f0:	ff 25 6a ad 03 00    	jmp    *0x3ad6a(%rip)        # 41260 <glfwPollEvents@Base>
    64f6:	68 4c 00 00 00       	push   $0x4c
    64fb:	e9 20 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006500 <vkDestroyRenderPass@plt>:
    6500:	ff 25 62 ad 03 00    	jmp    *0x3ad62(%rip)        # 41268 <vkDestroyRenderPass@Base>
    6506:	68 4d 00 00 00       	push   $0x4d
    650b:	e9 10 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006510 <vkCreateBuffer@plt>:
    6510:	ff 25 5a ad 03 00    	jmp    *0x3ad5a(%rip)        # 41270 <vkCreateBuffer@Base>
    6516:	68 4e 00 00 00       	push   $0x4e
    651b:	e9 00 fb ff ff       	jmp    6020 <_init+0x20>

0000000000006520 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
    6520:	ff 25 52 ad 03 00    	jmp    *0x3ad52(%rip)        # 41278 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
    6526:	68 4f 00 00 00       	push   $0x4f
    652b:	e9 f0 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006530 <fclose@plt>:
    6530:	ff 25 4a ad 03 00    	jmp    *0x3ad4a(%rip)        # 41280 <fclose@GLIBC_2.2.5>
    6536:	68 50 00 00 00       	push   $0x50
    653b:	e9 e0 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006540 <_Znwm@plt>:
    6540:	ff 25 42 ad 03 00    	jmp    *0x3ad42(%rip)        # 41288 <_Znwm@GLIBCXX_3.4>
    6546:	68 51 00 00 00       	push   $0x51
    654b:	e9 d0 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006550 <vkBeginCommandBuffer@plt>:
    6550:	ff 25 3a ad 03 00    	jmp    *0x3ad3a(%rip)        # 41290 <vkBeginCommandBuffer@Base>
    6556:	68 52 00 00 00       	push   $0x52
    655b:	e9 c0 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006560 <_ZdlPvm@plt>:
    6560:	ff 25 32 ad 03 00    	jmp    *0x3ad32(%rip)        # 41298 <_ZdlPvm@CXXABI_1.3.9>
    6566:	68 53 00 00 00       	push   $0x53
    656b:	e9 b0 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006570 <vkDestroyInstance@plt>:
    6570:	ff 25 2a ad 03 00    	jmp    *0x3ad2a(%rip)        # 412a0 <vkDestroyInstance@Base>
    6576:	68 54 00 00 00       	push   $0x54
    657b:	e9 a0 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006580 <glfwTerminate@plt>:
    6580:	ff 25 22 ad 03 00    	jmp    *0x3ad22(%rip)        # 412a8 <glfwTerminate@Base>
    6586:	68 55 00 00 00       	push   $0x55
    658b:	e9 90 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006590 <_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev@plt>:
    6590:	ff 25 1a ad 03 00    	jmp    *0x3ad1a(%rip)        # 412b0 <_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev@GLIBCXX_3.4>
    6596:	68 56 00 00 00       	push   $0x56
    659b:	e9 80 fa ff ff       	jmp    6020 <_init+0x20>

00000000000065a0 <vkCreateImageView@plt>:
    65a0:	ff 25 12 ad 03 00    	jmp    *0x3ad12(%rip)        # 412b8 <vkCreateImageView@Base>
    65a6:	68 57 00 00 00       	push   $0x57
    65ab:	e9 70 fa ff ff       	jmp    6020 <_init+0x20>

00000000000065b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>:
    65b0:	ff 25 0a ad 03 00    	jmp    *0x3ad0a(%rip)        # 412c0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    65b6:	68 58 00 00 00       	push   $0x58
    65bb:	e9 60 fa ff ff       	jmp    6020 <_init+0x20>

00000000000065c0 <vkGetPhysicalDeviceSurfaceSupportKHR@plt>:
    65c0:	ff 25 02 ad 03 00    	jmp    *0x3ad02(%rip)        # 412c8 <vkGetPhysicalDeviceSurfaceSupportKHR@Base>
    65c6:	68 59 00 00 00       	push   $0x59
    65cb:	e9 50 fa ff ff       	jmp    6020 <_init+0x20>

00000000000065d0 <vkCreateImage@plt>:
    65d0:	ff 25 fa ac 03 00    	jmp    *0x3acfa(%rip)        # 412d0 <vkCreateImage@Base>
    65d6:	68 5a 00 00 00       	push   $0x5a
    65db:	e9 40 fa ff ff       	jmp    6020 <_init+0x20>

00000000000065e0 <vkDestroyFence@plt>:
    65e0:	ff 25 f2 ac 03 00    	jmp    *0x3acf2(%rip)        # 412d8 <vkDestroyFence@Base>
    65e6:	68 5b 00 00 00       	push   $0x5b
    65eb:	e9 30 fa ff ff       	jmp    6020 <_init+0x20>

00000000000065f0 <vkDestroyPipeline@plt>:
    65f0:	ff 25 ea ac 03 00    	jmp    *0x3acea(%rip)        # 412e0 <vkDestroyPipeline@Base>
    65f6:	68 5c 00 00 00       	push   $0x5c
    65fb:	e9 20 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006600 <vkUpdateDescriptorSets@plt>:
    6600:	ff 25 e2 ac 03 00    	jmp    *0x3ace2(%rip)        # 412e8 <vkUpdateDescriptorSets@Base>
    6606:	68 5d 00 00 00       	push   $0x5d
    660b:	e9 10 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006610 <fseek@plt>:
    6610:	ff 25 da ac 03 00    	jmp    *0x3acda(%rip)        # 412f0 <fseek@GLIBC_2.2.5>
    6616:	68 5e 00 00 00       	push   $0x5e
    661b:	e9 00 fa ff ff       	jmp    6020 <_init+0x20>

0000000000006620 <vkEnumerateInstanceLayerProperties@plt>:
    6620:	ff 25 d2 ac 03 00    	jmp    *0x3acd2(%rip)        # 412f8 <vkEnumerateInstanceLayerProperties@Base>
    6626:	68 5f 00 00 00       	push   $0x5f
    662b:	e9 f0 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>:
    6630:	ff 25 ca ac 03 00    	jmp    *0x3acca(%rip)        # 41300 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@GLIBCXX_3.4.9>
    6636:	68 60 00 00 00       	push   $0x60
    663b:	e9 e0 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006640 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>:
    6640:	ff 25 c2 ac 03 00    	jmp    *0x3acc2(%rip)        # 41308 <_ZNKSt5ctypeIcE13_M_widen_initEv@GLIBCXX_3.4.11>
    6646:	68 61 00 00 00       	push   $0x61
    664b:	e9 d0 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006650 <glfwInit@plt>:
    6650:	ff 25 ba ac 03 00    	jmp    *0x3acba(%rip)        # 41310 <glfwInit@Base>
    6656:	68 62 00 00 00       	push   $0x62
    665b:	e9 c0 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006660 <vkBindBufferMemory@plt>:
    6660:	ff 25 b2 ac 03 00    	jmp    *0x3acb2(%rip)        # 41318 <vkBindBufferMemory@Base>
    6666:	68 63 00 00 00       	push   $0x63
    666b:	e9 b0 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006670 <fopen@plt>:
    6670:	ff 25 aa ac 03 00    	jmp    *0x3acaa(%rip)        # 41320 <fopen@GLIBC_2.2.5>
    6676:	68 64 00 00 00       	push   $0x64
    667b:	e9 a0 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006680 <vkCreateSwapchainKHR@plt>:
    6680:	ff 25 a2 ac 03 00    	jmp    *0x3aca2(%rip)        # 41328 <vkCreateSwapchainKHR@Base>
    6686:	68 65 00 00 00       	push   $0x65
    668b:	e9 90 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006690 <vkDestroyShaderModule@plt>:
    6690:	ff 25 9a ac 03 00    	jmp    *0x3ac9a(%rip)        # 41330 <vkDestroyShaderModule@Base>
    6696:	68 66 00 00 00       	push   $0x66
    669b:	e9 80 f9 ff ff       	jmp    6020 <_init+0x20>

00000000000066a0 <free@plt>:
    66a0:	ff 25 92 ac 03 00    	jmp    *0x3ac92(%rip)        # 41338 <free@GLIBC_2.2.5>
    66a6:	68 67 00 00 00       	push   $0x67
    66ab:	e9 70 f9 ff ff       	jmp    6020 <_init+0x20>

00000000000066b0 <vkCreateInstance@plt>:
    66b0:	ff 25 8a ac 03 00    	jmp    *0x3ac8a(%rip)        # 41340 <vkCreateInstance@Base>
    66b6:	68 68 00 00 00       	push   $0x68
    66bb:	e9 60 f9 ff ff       	jmp    6020 <_init+0x20>

00000000000066c0 <vkFreeDescriptorSets@plt>:
    66c0:	ff 25 82 ac 03 00    	jmp    *0x3ac82(%rip)        # 41348 <vkFreeDescriptorSets@Base>
    66c6:	68 69 00 00 00       	push   $0x69
    66cb:	e9 50 f9 ff ff       	jmp    6020 <_init+0x20>

00000000000066d0 <vkCreateFence@plt>:
    66d0:	ff 25 7a ac 03 00    	jmp    *0x3ac7a(%rip)        # 41350 <vkCreateFence@Base>
    66d6:	68 6a 00 00 00       	push   $0x6a
    66db:	e9 40 f9 ff ff       	jmp    6020 <_init+0x20>

00000000000066e0 <vkResetCommandBuffer@plt>:
    66e0:	ff 25 72 ac 03 00    	jmp    *0x3ac72(%rip)        # 41358 <vkResetCommandBuffer@Base>
    66e6:	68 6b 00 00 00       	push   $0x6b
    66eb:	e9 30 f9 ff ff       	jmp    6020 <_init+0x20>

00000000000066f0 <vkDestroyPipelineLayout@plt>:
    66f0:	ff 25 6a ac 03 00    	jmp    *0x3ac6a(%rip)        # 41360 <vkDestroyPipelineLayout@Base>
    66f6:	68 6c 00 00 00       	push   $0x6c
    66fb:	e9 20 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006700 <_ZNSi4readEPcl@plt>:
    6700:	ff 25 62 ac 03 00    	jmp    *0x3ac62(%rip)        # 41368 <_ZNSi4readEPcl@GLIBCXX_3.4>
    6706:	68 6d 00 00 00       	push   $0x6d
    670b:	e9 10 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006710 <_ZSt16__throw_bad_castv@plt>:
    6710:	ff 25 5a ac 03 00    	jmp    *0x3ac5a(%rip)        # 41370 <_ZSt16__throw_bad_castv@GLIBCXX_3.4>
    6716:	68 6e 00 00 00       	push   $0x6e
    671b:	e9 00 f9 ff ff       	jmp    6020 <_init+0x20>

0000000000006720 <_ZNSi5seekgESt4fposI11__mbstate_tE@plt>:
    6720:	ff 25 52 ac 03 00    	jmp    *0x3ac52(%rip)        # 41378 <_ZNSi5seekgESt4fposI11__mbstate_tE@GLIBCXX_3.4>
    6726:	68 6f 00 00 00       	push   $0x6f
    672b:	e9 f0 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006730 <vkGetPhysicalDeviceSurfaceFormatsKHR@plt>:
    6730:	ff 25 4a ac 03 00    	jmp    *0x3ac4a(%rip)        # 41380 <vkGetPhysicalDeviceSurfaceFormatsKHR@Base>
    6736:	68 70 00 00 00       	push   $0x70
    673b:	e9 e0 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006740 <vkGetPhysicalDeviceSurfacePresentModesKHR@plt>:
    6740:	ff 25 42 ac 03 00    	jmp    *0x3ac42(%rip)        # 41388 <vkGetPhysicalDeviceSurfacePresentModesKHR@Base>
    6746:	68 71 00 00 00       	push   $0x71
    674b:	e9 d0 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006750 <vkQueueSubmit@plt>:
    6750:	ff 25 3a ac 03 00    	jmp    *0x3ac3a(%rip)        # 41390 <vkQueueSubmit@Base>
    6756:	68 72 00 00 00       	push   $0x72
    675b:	e9 c0 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006760 <malloc@plt>:
    6760:	ff 25 32 ac 03 00    	jmp    *0x3ac32(%rip)        # 41398 <malloc@GLIBC_2.2.5>
    6766:	68 73 00 00 00       	push   $0x73
    676b:	e9 b0 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006770 <vkGetDeviceQueue@plt>:
    6770:	ff 25 2a ac 03 00    	jmp    *0x3ac2a(%rip)        # 413a0 <vkGetDeviceQueue@Base>
    6776:	68 74 00 00 00       	push   $0x74
    677b:	e9 a0 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006780 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>:
    6780:	ff 25 22 ac 03 00    	jmp    *0x3ac22(%rip)        # 413a8 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@GLIBCXX_3.4>
    6786:	68 75 00 00 00       	push   $0x75
    678b:	e9 90 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006790 <vkCreateFramebuffer@plt>:
    6790:	ff 25 1a ac 03 00    	jmp    *0x3ac1a(%rip)        # 413b0 <vkCreateFramebuffer@Base>
    6796:	68 76 00 00 00       	push   $0x76
    679b:	e9 80 f8 ff ff       	jmp    6020 <_init+0x20>

00000000000067a0 <glfwGetWindowUserPointer@plt>:
    67a0:	ff 25 12 ac 03 00    	jmp    *0x3ac12(%rip)        # 413b8 <glfwGetWindowUserPointer@Base>
    67a6:	68 77 00 00 00       	push   $0x77
    67ab:	e9 70 f8 ff ff       	jmp    6020 <_init+0x20>

00000000000067b0 <ldexpf@plt>:
    67b0:	ff 25 0a ac 03 00    	jmp    *0x3ac0a(%rip)        # 413c0 <ldexpf@GLIBC_2.2.5>
    67b6:	68 78 00 00 00       	push   $0x78
    67bb:	e9 60 f8 ff ff       	jmp    6020 <_init+0x20>

00000000000067c0 <vkEnumerateDeviceExtensionProperties@plt>:
    67c0:	ff 25 02 ac 03 00    	jmp    *0x3ac02(%rip)        # 413c8 <vkEnumerateDeviceExtensionProperties@Base>
    67c6:	68 79 00 00 00       	push   $0x79
    67cb:	e9 50 f8 ff ff       	jmp    6020 <_init+0x20>

00000000000067d0 <vkCreateSemaphore@plt>:
    67d0:	ff 25 fa ab 03 00    	jmp    *0x3abfa(%rip)        # 413d0 <vkCreateSemaphore@Base>
    67d6:	68 7a 00 00 00       	push   $0x7a
    67db:	e9 40 f8 ff ff       	jmp    6020 <_init+0x20>

00000000000067e0 <vkCmdBeginRenderPass@plt>:
    67e0:	ff 25 f2 ab 03 00    	jmp    *0x3abf2(%rip)        # 413d8 <vkCmdBeginRenderPass@Base>
    67e6:	68 7b 00 00 00       	push   $0x7b
    67eb:	e9 30 f8 ff ff       	jmp    6020 <_init+0x20>

00000000000067f0 <vkDestroyCommandPool@plt>:
    67f0:	ff 25 ea ab 03 00    	jmp    *0x3abea(%rip)        # 413e0 <vkDestroyCommandPool@Base>
    67f6:	68 7c 00 00 00       	push   $0x7c
    67fb:	e9 20 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006800 <strcmp@plt>:
    6800:	ff 25 e2 ab 03 00    	jmp    *0x3abe2(%rip)        # 413e8 <strcmp@GLIBC_2.2.5>
    6806:	68 7d 00 00 00       	push   $0x7d
    680b:	e9 10 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006810 <strtol@plt>:
    6810:	ff 25 da ab 03 00    	jmp    *0x3abda(%rip)        # 413f0 <strtol@GLIBC_2.2.5>
    6816:	68 7e 00 00 00       	push   $0x7e
    681b:	e9 00 f8 ff ff       	jmp    6020 <_init+0x20>

0000000000006820 <vkCmdBindIndexBuffer@plt>:
    6820:	ff 25 d2 ab 03 00    	jmp    *0x3abd2(%rip)        # 413f8 <vkCmdBindIndexBuffer@Base>
    6826:	68 7f 00 00 00       	push   $0x7f
    682b:	e9 f0 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006830 <_ZNSt6localeD1Ev@plt>:
    6830:	ff 25 ca ab 03 00    	jmp    *0x3abca(%rip)        # 41400 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
    6836:	68 80 00 00 00       	push   $0x80
    683b:	e9 e0 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006840 <vkCmdBindVertexBuffers@plt>:
    6840:	ff 25 c2 ab 03 00    	jmp    *0x3abc2(%rip)        # 41408 <vkCmdBindVertexBuffers@Base>
    6846:	68 81 00 00 00       	push   $0x81
    684b:	e9 d0 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006850 <vkCmdCopyBuffer@plt>:
    6850:	ff 25 ba ab 03 00    	jmp    *0x3abba(%rip)        # 41410 <vkCmdCopyBuffer@Base>
    6856:	68 82 00 00 00       	push   $0x82
    685b:	e9 c0 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006860 <vkCreateDevice@plt>:
    6860:	ff 25 b2 ab 03 00    	jmp    *0x3abb2(%rip)        # 41418 <vkCreateDevice@Base>
    6866:	68 83 00 00 00       	push   $0x83
    686b:	e9 b0 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006870 <glfwSetFramebufferSizeCallback@plt>:
    6870:	ff 25 aa ab 03 00    	jmp    *0x3abaa(%rip)        # 41420 <glfwSetFramebufferSizeCallback@Base>
    6876:	68 84 00 00 00       	push   $0x84
    687b:	e9 a0 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006880 <fread@plt>:
    6880:	ff 25 a2 ab 03 00    	jmp    *0x3aba2(%rip)        # 41428 <fread@GLIBC_2.2.5>
    6886:	68 85 00 00 00       	push   $0x85
    688b:	e9 90 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006890 <_ZNSt8ios_base4InitC1Ev@plt>:
    6890:	ff 25 9a ab 03 00    	jmp    *0x3ab9a(%rip)        # 41430 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
    6896:	68 86 00 00 00       	push   $0x86
    689b:	e9 80 f7 ff ff       	jmp    6020 <_init+0x20>

00000000000068a0 <glfwCreateWindowSurface@plt>:
    68a0:	ff 25 92 ab 03 00    	jmp    *0x3ab92(%rip)        # 41438 <glfwCreateWindowSurface@Base>
    68a6:	68 87 00 00 00       	push   $0x87
    68ab:	e9 70 f7 ff ff       	jmp    6020 <_init+0x20>

00000000000068b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>:
    68b0:	ff 25 8a ab 03 00    	jmp    *0x3ab8a(%rip)        # 41440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@GLIBCXX_3.4.21>
    68b6:	68 88 00 00 00       	push   $0x88
    68bb:	e9 60 f7 ff ff       	jmp    6020 <_init+0x20>

00000000000068c0 <feof@plt>:
    68c0:	ff 25 82 ab 03 00    	jmp    *0x3ab82(%rip)        # 41448 <feof@GLIBC_2.2.5>
    68c6:	68 89 00 00 00       	push   $0x89
    68cb:	e9 50 f7 ff ff       	jmp    6020 <_init+0x20>

00000000000068d0 <vkResetFences@plt>:
    68d0:	ff 25 7a ab 03 00    	jmp    *0x3ab7a(%rip)        # 41450 <vkResetFences@Base>
    68d6:	68 8a 00 00 00       	push   $0x8a
    68db:	e9 40 f7 ff ff       	jmp    6020 <_init+0x20>

00000000000068e0 <glfwCreateWindow@plt>:
    68e0:	ff 25 72 ab 03 00    	jmp    *0x3ab72(%rip)        # 41458 <glfwCreateWindow@Base>
    68e6:	68 8b 00 00 00       	push   $0x8b
    68eb:	e9 30 f7 ff ff       	jmp    6020 <_init+0x20>

00000000000068f0 <powf@plt>:
    68f0:	ff 25 6a ab 03 00    	jmp    *0x3ab6a(%rip)        # 41460 <powf@GLIBC_2.27>
    68f6:	68 8c 00 00 00       	push   $0x8c
    68fb:	e9 20 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006900 <_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev@plt>:
    6900:	ff 25 62 ab 03 00    	jmp    *0x3ab62(%rip)        # 41468 <_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev@GLIBCXX_3.4>
    6906:	68 8d 00 00 00       	push   $0x8d
    690b:	e9 10 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006910 <fgetc@plt>:
    6910:	ff 25 5a ab 03 00    	jmp    *0x3ab5a(%rip)        # 41470 <fgetc@GLIBC_2.2.5>
    6916:	68 8e 00 00 00       	push   $0x8e
    691b:	e9 00 f7 ff ff       	jmp    6020 <_init+0x20>

0000000000006920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>:
    6920:	ff 25 52 ab 03 00    	jmp    *0x3ab52(%rip)        # 41478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@GLIBCXX_3.4.21>
    6926:	68 8f 00 00 00       	push   $0x8f
    692b:	e9 f0 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>:
    6930:	ff 25 4a ab 03 00    	jmp    *0x3ab4a(%rip)        # 41480 <_ZNSt10filesystem12current_pathB5cxx11Ev@GLIBCXX_3.4.26>
    6936:	68 90 00 00 00       	push   $0x90
    693b:	e9 e0 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006940 <vkDestroyDescriptorSetLayout@plt>:
    6940:	ff 25 42 ab 03 00    	jmp    *0x3ab42(%rip)        # 41488 <vkDestroyDescriptorSetLayout@Base>
    6946:	68 91 00 00 00       	push   $0x91
    694b:	e9 d0 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006950 <vkQueuePresentKHR@plt>:
    6950:	ff 25 3a ab 03 00    	jmp    *0x3ab3a(%rip)        # 41490 <vkQueuePresentKHR@Base>
    6956:	68 92 00 00 00       	push   $0x92
    695b:	e9 c0 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006960 <vkGetPhysicalDeviceMemoryProperties@plt>:
    6960:	ff 25 32 ab 03 00    	jmp    *0x3ab32(%rip)        # 41498 <vkGetPhysicalDeviceMemoryProperties@Base>
    6966:	68 93 00 00 00       	push   $0x93
    696b:	e9 b0 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006970 <glfwGetFramebufferSize@plt>:
    6970:	ff 25 2a ab 03 00    	jmp    *0x3ab2a(%rip)        # 414a0 <glfwGetFramebufferSize@Base>
    6976:	68 94 00 00 00       	push   $0x94
    697b:	e9 a0 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006980 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
    6980:	ff 25 22 ab 03 00    	jmp    *0x3ab22(%rip)        # 414a8 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
    6986:	68 95 00 00 00       	push   $0x95
    698b:	e9 90 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006990 <memmove@plt>:
    6990:	ff 25 1a ab 03 00    	jmp    *0x3ab1a(%rip)        # 414b0 <memmove@GLIBC_2.2.5>
    6996:	68 96 00 00 00       	push   $0x96
    699b:	e9 80 f6 ff ff       	jmp    6020 <_init+0x20>

00000000000069a0 <__cxa_end_catch@plt>:
    69a0:	ff 25 12 ab 03 00    	jmp    *0x3ab12(%rip)        # 414b8 <__cxa_end_catch@CXXABI_1.3>
    69a6:	68 97 00 00 00       	push   $0x97
    69ab:	e9 70 f6 ff ff       	jmp    6020 <_init+0x20>

00000000000069b0 <realloc@plt>:
    69b0:	ff 25 0a ab 03 00    	jmp    *0x3ab0a(%rip)        # 414c0 <realloc@GLIBC_2.2.5>
    69b6:	68 98 00 00 00       	push   $0x98
    69bb:	e9 60 f6 ff ff       	jmp    6020 <_init+0x20>

00000000000069c0 <vkCmdCopyBufferToImage@plt>:
    69c0:	ff 25 02 ab 03 00    	jmp    *0x3ab02(%rip)        # 414c8 <vkCmdCopyBufferToImage@Base>
    69c6:	68 99 00 00 00       	push   $0x99
    69cb:	e9 50 f6 ff ff       	jmp    6020 <_init+0x20>

00000000000069d0 <vkAllocateMemory@plt>:
    69d0:	ff 25 fa aa 03 00    	jmp    *0x3aafa(%rip)        # 414d0 <vkAllocateMemory@Base>
    69d6:	68 9a 00 00 00       	push   $0x9a
    69db:	e9 40 f6 ff ff       	jmp    6020 <_init+0x20>

00000000000069e0 <vkDestroyFramebuffer@plt>:
    69e0:	ff 25 f2 aa 03 00    	jmp    *0x3aaf2(%rip)        # 414d8 <vkDestroyFramebuffer@Base>
    69e6:	68 9b 00 00 00       	push   $0x9b
    69eb:	e9 30 f6 ff ff       	jmp    6020 <_init+0x20>

00000000000069f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>:
    69f0:	ff 25 ea aa 03 00    	jmp    *0x3aaea(%rip)        # 414e0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@GLIBCXX_3.4>
    69f6:	68 9c 00 00 00       	push   $0x9c
    69fb:	e9 20 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006a00 <__cxa_throw@plt>:
    6a00:	ff 25 e2 aa 03 00    	jmp    *0x3aae2(%rip)        # 414e8 <__cxa_throw@CXXABI_1.3>
    6a06:	68 9d 00 00 00       	push   $0x9d
    6a0b:	e9 10 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006a10 <vkBindImageMemory@plt>:
    6a10:	ff 25 da aa 03 00    	jmp    *0x3aada(%rip)        # 414f0 <vkBindImageMemory@Base>
    6a16:	68 9e 00 00 00       	push   $0x9e
    6a1b:	e9 00 f6 ff ff       	jmp    6020 <_init+0x20>

0000000000006a20 <_ZNSolsEi@plt>:
    6a20:	ff 25 d2 aa 03 00    	jmp    *0x3aad2(%rip)        # 414f8 <_ZNSolsEi@GLIBCXX_3.4>
    6a26:	68 9f 00 00 00       	push   $0x9f
    6a2b:	e9 f0 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006a30 <_ZNSi5tellgEv@plt>:
    6a30:	ff 25 ca aa 03 00    	jmp    *0x3aaca(%rip)        # 41500 <_ZNSi5tellgEv@GLIBCXX_3.4>
    6a36:	68 a0 00 00 00       	push   $0xa0
    6a3b:	e9 e0 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006a40 <vkQueueWaitIdle@plt>:
    6a40:	ff 25 c2 aa 03 00    	jmp    *0x3aac2(%rip)        # 41508 <vkQueueWaitIdle@Base>
    6a46:	68 a1 00 00 00       	push   $0xa1
    6a4b:	e9 d0 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006a50 <vkDestroySurfaceKHR@plt>:
    6a50:	ff 25 ba aa 03 00    	jmp    *0x3aaba(%rip)        # 41510 <vkDestroySurfaceKHR@Base>
    6a56:	68 a2 00 00 00       	push   $0xa2
    6a5b:	e9 c0 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006a60 <_Unwind_Resume@plt>:
    6a60:	ff 25 b2 aa 03 00    	jmp    *0x3aab2(%rip)        # 41518 <_Unwind_Resume@GCC_3.0>
    6a66:	68 a3 00 00 00       	push   $0xa3
    6a6b:	e9 b0 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006a70 <vkDestroyImageView@plt>:
    6a70:	ff 25 aa aa 03 00    	jmp    *0x3aaaa(%rip)        # 41520 <vkDestroyImageView@Base>
    6a76:	68 a4 00 00 00       	push   $0xa4
    6a7b:	e9 a0 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
    6a80:	ff 25 a2 aa 03 00    	jmp    *0x3aaa2(%rip)        # 41528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
    6a86:	68 a5 00 00 00       	push   $0xa5
    6a8b:	e9 90 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006a90 <vkCreateDescriptorSetLayout@plt>:
    6a90:	ff 25 9a aa 03 00    	jmp    *0x3aa9a(%rip)        # 41530 <vkCreateDescriptorSetLayout@Base>
    6a96:	68 a6 00 00 00       	push   $0xa6
    6a9b:	e9 80 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006aa0 <__cxa_guard_acquire@plt>:
    6aa0:	ff 25 92 aa 03 00    	jmp    *0x3aa92(%rip)        # 41538 <__cxa_guard_acquire@CXXABI_1.3>
    6aa6:	68 a7 00 00 00       	push   $0xa7
    6aab:	e9 70 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006ab0 <_ZNSt9exceptionD2Ev@plt>:
    6ab0:	ff 25 8a aa 03 00    	jmp    *0x3aa8a(%rip)        # 41540 <_ZNSt9exceptionD2Ev@GLIBCXX_3.4>
    6ab6:	68 a8 00 00 00       	push   $0xa8
    6abb:	e9 60 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006ac0 <_ZNSt12__basic_fileIcED1Ev@plt>:
    6ac0:	ff 25 82 aa 03 00    	jmp    *0x3aa82(%rip)        # 41548 <_ZNSt12__basic_fileIcED1Ev@GLIBCXX_3.4>
    6ac6:	68 a9 00 00 00       	push   $0xa9
    6acb:	e9 50 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006ad0 <glfwWindowShouldClose@plt>:
    6ad0:	ff 25 7a aa 03 00    	jmp    *0x3aa7a(%rip)        # 41550 <glfwWindowShouldClose@Base>
    6ad6:	68 aa 00 00 00       	push   $0xaa
    6adb:	e9 40 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc@plt>:
    6ae0:	ff 25 72 aa 03 00    	jmp    *0x3aa72(%rip)        # 41558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc@GLIBCXX_3.4.21>
    6ae6:	68 ab 00 00 00       	push   $0xab
    6aeb:	e9 30 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006af0 <vkDestroyDescriptorPool@plt>:
    6af0:	ff 25 6a aa 03 00    	jmp    *0x3aa6a(%rip)        # 41560 <vkDestroyDescriptorPool@Base>
    6af6:	68 ac 00 00 00       	push   $0xac
    6afb:	e9 20 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006b00 <ferror@plt>:
    6b00:	ff 25 62 aa 03 00    	jmp    *0x3aa62(%rip)        # 41568 <ferror@GLIBC_2.2.5>
    6b06:	68 ad 00 00 00       	push   $0xad
    6b0b:	e9 10 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006b10 <_ZNSt16invalid_argumentC1EPKc@plt>:
    6b10:	ff 25 5a aa 03 00    	jmp    *0x3aa5a(%rip)        # 41570 <_ZNSt16invalid_argumentC1EPKc@GLIBCXX_3.4.21>
    6b16:	68 ae 00 00 00       	push   $0xae
    6b1b:	e9 00 f5 ff ff       	jmp    6020 <_init+0x20>

0000000000006b20 <vkEndCommandBuffer@plt>:
    6b20:	ff 25 52 aa 03 00    	jmp    *0x3aa52(%rip)        # 41578 <vkEndCommandBuffer@Base>
    6b26:	68 af 00 00 00       	push   $0xaf
    6b2b:	e9 f0 f4 ff ff       	jmp    6020 <_init+0x20>

Disassembly of section .plt.got:

0000000000006b30 <__cxa_finalize@plt>:
    6b30:	ff 25 52 a4 03 00    	jmp    *0x3a452(%rip)        # 40f88 <__cxa_finalize@GLIBC_2.2.5>
    6b36:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000006b40 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold>:
#include <filesystem>

namespace rtvc {

inline const std::string absoluteDirectory =
    std::filesystem::current_path().string();
    6b40:	48 89 ef             	mov    %rbp,%rdi
    6b43:	e8 98 4f 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    6b48:	48 89 df             	mov    %rbx,%rdi
    6b4b:	e8 10 ff ff ff       	call   6a60 <_Unwind_Resume@plt>

      _GLIBCXX20_CONSTEXPR
      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6b50:	48 8b 3d e9 ab 03 00 	mov    0x3abe9(%rip),%rdi        # 41740 <_ZN6shader16triangle_indicesE>
    6b57:	48 8b 35 f2 ab 03 00 	mov    0x3abf2(%rip),%rsi        # 41750 <_ZN6shader16triangle_indicesE+0x10>
    6b5e:	48 29 fe             	sub    %rdi,%rsi
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
    6b61:	48 85 ff             	test   %rdi,%rdi
    6b64:	74 e2                	je     6b48 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x8>
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    6b66:	e8 f5 f9 ff ff       	call   6560 <_ZdlPvm@plt>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
    6b6b:	eb db                	jmp    6b48 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6b6d:	48 8b 3d ac ab 03 00 	mov    0x3abac(%rip),%rdi        # 41720 <_ZN6shader19triangle_index_dataE>
    6b74:	48 8b 35 b5 ab 03 00 	mov    0x3abb5(%rip),%rsi        # 41730 <_ZN6shader19triangle_index_dataE+0x10>
    6b7b:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    6b7e:	48 85 ff             	test   %rdi,%rdi
    6b81:	75 e3                	jne    6b66 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x26>
    6b83:	eb c3                	jmp    6b48 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x8>

0000000000006b85 <_Z14protected_mainv.cold>:
#include <vulkan_app.hpp>

int protected_main() {
  auto app = new rtvc::VulkanApp{};
    6b85:	48 89 df             	mov    %rbx,%rdi
    6b88:	be 90 04 00 00       	mov    $0x490,%esi
    6b8d:	e8 ce f9 ff ff       	call   6560 <_ZdlPvm@plt>
    6b92:	48 89 ef             	mov    %rbp,%rdi
    6b95:	e8 c6 fe ff ff       	call   6a60 <_Unwind_Resume@plt>
      { _M_string_length = __length; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
    6b9a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi

      _GLIBCXX20_CONSTEXPR
      void
      _M_dispose()
      {
	if (!_M_is_local())
    6b9f:	4c 39 e7             	cmp    %r12,%rdi
    6ba2:	74 0e                	je     6bb2 <_Z14protected_mainv.cold+0x2d>
      }

      _GLIBCXX20_CONSTEXPR
      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    6ba4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    6ba9:	48 8d 70 01          	lea    0x1(%rax),%rsi
    6bad:	e8 ae f9 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    6bb2:	48 89 df             	mov    %rbx,%rdi
    6bb5:	e8 a6 fe ff ff       	call   6a60 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
    6bba:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	if (!_M_is_local())
    6bbf:	4c 39 e7             	cmp    %r12,%rdi
    6bc2:	74 0e                	je     6bd2 <_Z14protected_mainv.cold+0x4d>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    6bc4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    6bc9:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    6bcd:	e8 8e f9 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    6bd2:	48 89 df             	mov    %rbx,%rdi
    6bd5:	e8 86 fe ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006bda <main.cold>:
    6bda:	48 83 e8 01          	sub    $0x1,%rax
    6bde:	74 27                	je     6c07 <main.cold+0x2d>
int main() {
  try {
    return protected_main();
  } catch (const std::exception &e) {
    std::cerr << e.what() << '\n';
  } catch (...) {
    6be0:	e8 fb f5 ff ff       	call   61e0 <__cxa_begin_catch@plt>
    std::cerr << "Uncaught exception.\n";
    6be5:	48 8d 35 93 06 03 00 	lea    0x30693(%rip),%rsi        # 3727f <_IO_stdin_used+0x27f>
    6bec:	48 8d 3d ed a9 03 00 	lea    0x3a9ed(%rip),%rdi        # 415e0 <_ZSt4cerr@GLIBCXX_3.4>
    6bf3:	e8 28 f9 ff ff       	call   6520 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  }
    6bf8:	e8 a3 fd ff ff       	call   69a0 <__cxa_end_catch@plt>
  return EXIT_FAILURE;
    6bfd:	b8 01 00 00 00       	mov    $0x1,%eax
    6c02:	e9 53 2e 00 00       	jmp    9a5a <main+0xa>
  } catch (const std::exception &e) {
    6c07:	e8 d4 f5 ff ff       	call   61e0 <__cxa_begin_catch@plt>
    6c0c:	48 89 c7             	mov    %rax,%rdi
    std::cerr << e.what() << '\n';
    6c0f:	48 8b 00             	mov    (%rax),%rax
    6c12:	ff 50 10             	call   *0x10(%rax)
    6c15:	48 8d 3d c4 a9 03 00 	lea    0x3a9c4(%rip),%rdi        # 415e0 <_ZSt4cerr@GLIBCXX_3.4>
    6c1c:	48 89 c6             	mov    %rax,%rsi
    6c1f:	e8 fc f8 ff ff       	call   6520 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    6c24:	48 89 c7             	mov    %rax,%rdi
  // Specialization
  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    {
      if (__out.width() != 0)
    6c27:	48 8b 00             	mov    (%rax),%rax
    6c2a:	c6 44 24 0f 0a       	movb   $0xa,0xf(%rsp)
     *
     *  <em>Minimum field width</em> refers to the number of characters.
    */
    streamsize
    width() const
    { return _M_width; }
    6c2f:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6c33:	48 83 7c 07 10 00    	cmpq   $0x0,0x10(%rdi,%rax,1)
    6c39:	75 21                	jne    6c5c <main.cold+0x82>
	return __ostream_insert(__out, &__c, 1);
      __out.put(__c);
    6c3b:	be 0a 00 00 00       	mov    $0xa,%esi
    6c40:	e8 fb f3 ff ff       	call   6040 <_ZNSo3putEc@plt>
  } catch (...) {
    6c45:	e8 56 fd ff ff       	call   69a0 <__cxa_end_catch@plt>
    6c4a:	eb b1                	jmp    6bfd <main.cold+0x23>
  }
    6c4c:	48 89 c3             	mov    %rax,%rbx
    6c4f:	e8 4c fd ff ff       	call   69a0 <__cxa_end_catch@plt>
    6c54:	48 89 df             	mov    %rbx,%rdi
    6c57:	e8 04 fe ff ff       	call   6a60 <_Unwind_Resume@plt>
	return __ostream_insert(__out, &__c, 1);
    6c5c:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
    6c61:	ba 01 00 00 00       	mov    $0x1,%edx
    6c66:	e8 c5 f9 ff ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    6c6b:	eb d8                	jmp    6c45 <main.cold+0x6b>
  } catch (...) {
    6c6d:	48 89 c3             	mov    %rax,%rbx
    6c70:	e8 2b fd ff ff       	call   69a0 <__cxa_end_catch@plt>
    6c75:	48 89 df             	mov    %rbx,%rdi
    6c78:	e8 e3 fd ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006c7d <_ZN3vkh21allocateCommandBufferEP10VkDevice_TPK27VkCommandBufferAllocateInfo.cold>:
allocateCommandBuffer(VkDevice device,
                      const VkCommandBufferAllocateInfo *pAllocateInfo) {
  if (pAllocateInfo->commandBufferCount != 1) {
    throw std::runtime_error(
        "VkCommandBufferAllocateInfo::commandBufferCount != 1, use "
        "{allocateCommandBuffers} instead.");
    6c7d:	bf 10 00 00 00       	mov    $0x10,%edi
    6c82:	e8 c9 f5 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    throw std::runtime_error(
    6c87:	48 8d 35 8a 07 03 00 	lea    0x3078a(%rip),%rsi        # 37418 <_ZTSN3vkw10ImageViewsE+0x48>
    6c8e:	48 89 c7             	mov    %rax,%rdi
        "{allocateCommandBuffers} instead.");
    6c91:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    6c94:	e8 17 f5 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
        "{allocateCommandBuffers} instead.");
    6c99:	48 8b 15 00 a3 03 00 	mov    0x3a300(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6ca0:	48 8d 35 79 9e 03 00 	lea    0x39e79(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6ca7:	48 89 df             	mov    %rbx,%rdi
    6caa:	e8 51 fd ff ff       	call   6a00 <__cxa_throw@plt>
  }
  VkCommandBuffer commandBuffer;
  if (vkAllocateCommandBuffers(device, pAllocateInfo, &commandBuffer) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to allocate command buffers.");
    6caf:	bf 10 00 00 00       	mov    $0x10,%edi
    6cb4:	e8 97 f5 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6cb9:	48 8d 35 b8 07 03 00 	lea    0x307b8(%rip),%rsi        # 37478 <_ZTSN3vkw10ImageViewsE+0xa8>
    6cc0:	48 89 c7             	mov    %rax,%rdi
    6cc3:	48 89 c3             	mov    %rax,%rbx
    6cc6:	e8 e5 f4 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6ccb:	48 8b 15 ce a2 03 00 	mov    0x3a2ce(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6cd2:	48 8d 35 47 9e 03 00 	lea    0x39e47(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6cd9:	48 89 df             	mov    %rbx,%rdi
    6cdc:	e8 1f fd ff ff       	call   6a00 <__cxa_throw@plt>
        "{allocateCommandBuffers} instead.");
    6ce1:	48 89 c5             	mov    %rax,%rbp
    6ce4:	48 89 df             	mov    %rbx,%rdi
    6ce7:	e8 a4 f6 ff ff       	call   6390 <__cxa_free_exception@plt>
    6cec:	48 89 ef             	mov    %rbp,%rdi
    6cef:	e8 6c fd ff ff       	call   6a60 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to allocate command buffers.");
    6cf4:	48 89 c5             	mov    %rax,%rbp
    6cf7:	48 89 df             	mov    %rbx,%rdi
    6cfa:	e8 91 f6 ff ff       	call   6390 <__cxa_free_exception@plt>
    6cff:	48 89 ef             	mov    %rbp,%rdi
    6d02:	e8 59 fd ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006d07 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo.cold>:
  must free all successfully allocated command buffer objects from this
  command, set all entries of the pCommandBuffers array to NULL and return
  the error. */
  if (vkAllocateCommandBuffers(device, pAllocateInfo, commandBuffers.data()) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to allocate command buffers.");
    6d07:	bf 10 00 00 00       	mov    $0x10,%edi
    6d0c:	e8 3f f5 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6d11:	48 8d 35 60 07 03 00 	lea    0x30760(%rip),%rsi        # 37478 <_ZTSN3vkw10ImageViewsE+0xa8>
    6d18:	48 89 c7             	mov    %rax,%rdi
    6d1b:	49 89 c4             	mov    %rax,%r12
    6d1e:	e8 8d f4 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6d23:	48 8b 15 76 a2 03 00 	mov    0x3a276(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6d2a:	48 8d 35 ef 9d 03 00 	lea    0x39def(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6d31:	4c 89 e7             	mov    %r12,%rdi
    6d34:	e8 c7 fc ff ff       	call   6a00 <__cxa_throw@plt>
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6d39:	48 89 c5             	mov    %rax,%rbp
    6d3c:	eb 0b                	jmp    6d49 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo.cold+0x42>
    6d3e:	4c 89 e7             	mov    %r12,%rdi
    6d41:	48 89 c5             	mov    %rax,%rbp
    6d44:	e8 47 f6 ff ff       	call   6390 <__cxa_free_exception@plt>
    6d49:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6d4c:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    6d50:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    6d53:	48 85 ff             	test   %rdi,%rdi
    6d56:	74 05                	je     6d5d <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo.cold+0x56>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    6d58:	e8 03 f8 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    6d5d:	48 89 ef             	mov    %rbp,%rdi
    6d60:	e8 fb fc ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006d65 <_ZN3vkh18beginCommandBufferEP17VkCommandBuffer_TPK24VkCommandBufferBeginInfo.cold>:
}

void beginCommandBuffer(VkCommandBuffer commandBuffer,
                        const VkCommandBufferBeginInfo *pBeginInfo) {
  if (vkBeginCommandBuffer(commandBuffer, pBeginInfo) != VK_SUCCESS) {
    throw std::runtime_error("Failed to begin command buffer.");
    6d65:	bf 10 00 00 00       	mov    $0x10,%edi
    6d6a:	e8 e1 f4 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6d6f:	48 8d 35 2a 07 03 00 	lea    0x3072a(%rip),%rsi        # 374a0 <_ZTSN3vkw10ImageViewsE+0xd0>
    6d76:	48 89 c7             	mov    %rax,%rdi
    6d79:	48 89 c3             	mov    %rax,%rbx
    6d7c:	e8 2f f4 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6d81:	48 8b 15 18 a2 03 00 	mov    0x3a218(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6d88:	48 8d 35 91 9d 03 00 	lea    0x39d91(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6d8f:	48 89 df             	mov    %rbx,%rdi
    6d92:	e8 69 fc ff ff       	call   6a00 <__cxa_throw@plt>
    6d97:	48 89 c5             	mov    %rax,%rbp
    6d9a:	48 89 df             	mov    %rbx,%rdi
    6d9d:	e8 ee f5 ff ff       	call   6390 <__cxa_free_exception@plt>
    6da2:	48 89 ef             	mov    %rbp,%rdi
    6da5:	e8 b6 fc ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006daa <_ZN3vkh16endCommandBufferEP17VkCommandBuffer_T.cold>:
  }
}

void endCommandBuffer(VkCommandBuffer commandBuffer) {
  if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
    throw std::runtime_error("Failed to end command buffer.");
    6daa:	bf 10 00 00 00       	mov    $0x10,%edi
    6daf:	e8 9c f4 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6db4:	48 8d 35 05 07 03 00 	lea    0x30705(%rip),%rsi        # 374c0 <_ZTSN3vkw10ImageViewsE+0xf0>
    6dbb:	48 89 c7             	mov    %rax,%rdi
    6dbe:	48 89 c3             	mov    %rax,%rbx
    6dc1:	e8 ea f3 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6dc6:	48 8b 15 d3 a1 03 00 	mov    0x3a1d3(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6dcd:	48 8d 35 4c 9d 03 00 	lea    0x39d4c(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6dd4:	48 89 df             	mov    %rbx,%rdi
    6dd7:	e8 24 fc ff ff       	call   6a00 <__cxa_throw@plt>
    6ddc:	48 89 c5             	mov    %rax,%rbp
    6ddf:	48 89 df             	mov    %rbx,%rdi
    6de2:	e8 a9 f5 ff ff       	call   6390 <__cxa_free_exception@plt>
    6de7:	48 89 ef             	mov    %rbp,%rdi
    6dea:	e8 71 fc ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006def <_ZN3vkh27checkValidationLayerSupportEv.cold>:
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    6def:	48 89 df             	mov    %rbx,%rdi
    6df2:	48 89 ee             	mov    %rbp,%rsi
    6df5:	e8 66 f7 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    6dfa:	4c 89 e7             	mov    %r12,%rdi
    6dfd:	e8 5e fc ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006e02 <_ZN3vkh20createDebugMessengerEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacks.cold>:
                     const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo,
                     const VkAllocationCallbacks *pAllocator) {
  VkDebugUtilsMessengerEXT debugMessenger;
  if (createDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator,
                                   &debugMessenger) != VK_SUCCESS) {
    throw std::runtime_error("Failed to set up debug message.");
    6e02:	bf 10 00 00 00       	mov    $0x10,%edi
    6e07:	e8 44 f4 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6e0c:	48 8d 35 0d 07 03 00 	lea    0x3070d(%rip),%rsi        # 37520 <_ZTSN3vkw10ImageViewsE+0x150>
    6e13:	48 89 c7             	mov    %rax,%rdi
    6e16:	48 89 c3             	mov    %rax,%rbx
    6e19:	e8 92 f3 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6e1e:	48 8b 15 7b a1 03 00 	mov    0x3a17b(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6e25:	48 8d 35 f4 9c 03 00 	lea    0x39cf4(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6e2c:	48 89 df             	mov    %rbx,%rdi
    6e2f:	e8 cc fb ff ff       	call   6a00 <__cxa_throw@plt>
    6e34:	48 89 c5             	mov    %rax,%rbp
    6e37:	48 89 df             	mov    %rbx,%rdi
    6e3a:	e8 51 f5 ff ff       	call   6390 <__cxa_free_exception@plt>
    6e3f:	48 89 ef             	mov    %rbp,%rdi
    6e42:	e8 19 fc ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006e47 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv.cold>:
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6e47:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6e4a:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    6e4e:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    6e51:	48 85 ff             	test   %rdi,%rdi
    6e54:	74 05                	je     6e5b <_ZN3vkh37getAvailableInstanceLayerPropertyListEv.cold+0x14>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    6e56:	e8 05 f7 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    6e5b:	48 89 ef             	mov    %rbp,%rdi
    6e5e:	e8 fd fb ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006e63 <_ZN3vkh33getAvailableInstanceExtensionListEPKc.cold>:
std::vector<VkExtensionProperties>
getAvailableInstanceExtensionList(const char *pLayerName) {
  uint32_t propertyCount;
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
                                             nullptr) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get instance extension list.");
    6e63:	bf 10 00 00 00       	mov    $0x10,%edi
    6e68:	e8 e3 f3 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6e6d:	48 8d 35 cc 06 03 00 	lea    0x306cc(%rip),%rsi        # 37540 <_ZTSN3vkw10ImageViewsE+0x170>
    6e74:	48 89 c7             	mov    %rax,%rdi
    6e77:	48 89 c3             	mov    %rax,%rbx
    6e7a:	e8 31 f3 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6e7f:	48 8b 15 1a a1 03 00 	mov    0x3a11a(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6e86:	48 8d 35 93 9c 03 00 	lea    0x39c93(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6e8d:	48 89 df             	mov    %rbx,%rdi
    6e90:	e8 6b fb ff ff       	call   6a00 <__cxa_throw@plt>
  }
  std::vector<VkExtensionProperties> instanceExtensions{propertyCount};
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
                                             instanceExtensions.data()) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to get instance extension list.");
    6e95:	bf 10 00 00 00       	mov    $0x10,%edi
    6e9a:	e8 b1 f3 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6e9f:	48 8d 35 9a 06 03 00 	lea    0x3069a(%rip),%rsi        # 37540 <_ZTSN3vkw10ImageViewsE+0x170>
    6ea6:	48 89 c7             	mov    %rax,%rdi
    6ea9:	49 89 c4             	mov    %rax,%r12
    6eac:	e8 ff f2 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6eb1:	48 8b 15 e8 a0 03 00 	mov    0x3a0e8(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6eb8:	48 8d 35 61 9c 03 00 	lea    0x39c61(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6ebf:	4c 89 e7             	mov    %r12,%rdi
    6ec2:	e8 39 fb ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get instance extension list.");
    6ec7:	48 89 c5             	mov    %rax,%rbp
    6eca:	48 89 df             	mov    %rbx,%rdi
    6ecd:	e8 be f4 ff ff       	call   6390 <__cxa_free_exception@plt>
    6ed2:	48 89 ef             	mov    %rbp,%rdi
    6ed5:	e8 86 fb ff ff       	call   6a60 <_Unwind_Resume@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6eda:	48 89 c5             	mov    %rax,%rbp
    6edd:	eb 0b                	jmp    6eea <_ZN3vkh33getAvailableInstanceExtensionListEPKc.cold+0x87>
    throw std::runtime_error("Failed to get instance extension list.");
    6edf:	4c 89 e7             	mov    %r12,%rdi
    6ee2:	48 89 c5             	mov    %rax,%rbp
    6ee5:	e8 a6 f4 ff ff       	call   6390 <__cxa_free_exception@plt>
    6eea:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6eed:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    6ef1:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    6ef4:	48 85 ff             	test   %rdi,%rdi
    6ef7:	74 05                	je     6efe <_ZN3vkh33getAvailableInstanceExtensionListEPKc.cold+0x9b>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    6ef9:	e8 62 f6 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    6efe:	48 89 ef             	mov    %rbp,%rdi
    6f01:	e8 5a fb ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006f06 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc.cold>:
getAvailableDeviceExtensionList(VkPhysicalDevice physicalDevice,
                                const char *pLayerName) {
  uint32_t propertyCount;
  if (vkEnumerateDeviceExtensionProperties(
          physicalDevice, pLayerName, &propertyCount, nullptr) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get device extension list.");
    6f06:	bf 10 00 00 00       	mov    $0x10,%edi
    6f0b:	e8 40 f3 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6f10:	48 8d 35 51 06 03 00 	lea    0x30651(%rip),%rsi        # 37568 <_ZTSN3vkw10ImageViewsE+0x198>
    6f17:	48 89 c7             	mov    %rax,%rdi
    6f1a:	48 89 c3             	mov    %rax,%rbx
    6f1d:	e8 8e f2 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6f22:	48 8b 15 77 a0 03 00 	mov    0x3a077(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6f29:	48 8d 35 f0 9b 03 00 	lea    0x39bf0(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6f30:	48 89 df             	mov    %rbx,%rdi
    6f33:	e8 c8 fa ff ff       	call   6a00 <__cxa_throw@plt>
  }
  std::vector<VkExtensionProperties> deviceExtensions{propertyCount};
  if (vkEnumerateDeviceExtensionProperties(
          physicalDevice, pLayerName, &propertyCount,
          deviceExtensions.data()) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get device extension list.");
    6f38:	bf 10 00 00 00       	mov    $0x10,%edi
    6f3d:	e8 0e f3 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6f42:	48 8d 35 1f 06 03 00 	lea    0x3061f(%rip),%rsi        # 37568 <_ZTSN3vkw10ImageViewsE+0x198>
    6f49:	48 89 c7             	mov    %rax,%rdi
    6f4c:	49 89 c4             	mov    %rax,%r12
    6f4f:	e8 5c f2 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6f54:	48 8b 15 45 a0 03 00 	mov    0x3a045(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6f5b:	48 8d 35 be 9b 03 00 	lea    0x39bbe(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6f62:	4c 89 e7             	mov    %r12,%rdi
    6f65:	e8 96 fa ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get device extension list.");
    6f6a:	48 89 c5             	mov    %rax,%rbp
    6f6d:	48 89 df             	mov    %rbx,%rdi
    6f70:	e8 1b f4 ff ff       	call   6390 <__cxa_free_exception@plt>
    6f75:	48 89 ef             	mov    %rbp,%rdi
    6f78:	e8 e3 fa ff ff       	call   6a60 <_Unwind_Resume@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6f7d:	48 89 c5             	mov    %rax,%rbp
    6f80:	eb 0b                	jmp    6f8d <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc.cold+0x87>
    throw std::runtime_error("Failed to get device extension list.");
    6f82:	4c 89 e7             	mov    %r12,%rdi
    6f85:	48 89 c5             	mov    %rax,%rbp
    6f88:	e8 03 f4 ff ff       	call   6390 <__cxa_free_exception@plt>
    6f8d:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6f90:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    6f94:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    6f97:	48 85 ff             	test   %rdi,%rdi
    6f9a:	74 05                	je     6fa1 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc.cold+0x9b>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    6f9c:	e8 bf f5 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    6fa1:	48 89 ef             	mov    %rbp,%rdi
    6fa4:	e8 b7 fa ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000006fa9 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T.cold>:
std::vector<VkPhysicalDevice> getPhysicalDeviceList(VkInstance instance) {
  uint32_t physicalDeviceCount;
  vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, nullptr);
  if (physicalDeviceCount == 0) {
    throw std::runtime_error(
        "Failed to find any physical device with Vulkan support.");
    6fa9:	bf 10 00 00 00       	mov    $0x10,%edi
    6fae:	e8 9d f2 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    throw std::runtime_error(
    6fb3:	48 8d 35 d6 05 03 00 	lea    0x305d6(%rip),%rsi        # 37590 <_ZTSN3vkw10ImageViewsE+0x1c0>
    6fba:	48 89 c7             	mov    %rax,%rdi
        "Failed to find any physical device with Vulkan support.");
    6fbd:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    6fc0:	e8 eb f1 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
        "Failed to find any physical device with Vulkan support.");
    6fc5:	48 8b 15 d4 9f 03 00 	mov    0x39fd4(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6fcc:	48 8d 35 4d 9b 03 00 	lea    0x39b4d(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6fd3:	48 89 df             	mov    %rbx,%rdi
    6fd6:	e8 25 fa ff ff       	call   6a00 <__cxa_throw@plt>
  }
  std::vector<VkPhysicalDevice> physicalDevices{physicalDeviceCount};
  if (vkEnumeratePhysicalDevices(instance, &physicalDeviceCount,
                                 physicalDevices.data()) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get physical devices list.");
    6fdb:	bf 10 00 00 00       	mov    $0x10,%edi
    6fe0:	e8 6b f2 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    6fe5:	48 8d 35 dc 05 03 00 	lea    0x305dc(%rip),%rsi        # 375c8 <_ZTSN3vkw10ImageViewsE+0x1f8>
    6fec:	48 89 c7             	mov    %rax,%rdi
    6fef:	49 89 c4             	mov    %rax,%r12
    6ff2:	e8 b9 f1 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    6ff7:	48 8b 15 a2 9f 03 00 	mov    0x39fa2(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6ffe:	48 8d 35 1b 9b 03 00 	lea    0x39b1b(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7005:	4c 89 e7             	mov    %r12,%rdi
    7008:	e8 f3 f9 ff ff       	call   6a00 <__cxa_throw@plt>
        "Failed to find any physical device with Vulkan support.");
    700d:	48 89 c5             	mov    %rax,%rbp
    7010:	48 89 df             	mov    %rbx,%rdi
    7013:	e8 78 f3 ff ff       	call   6390 <__cxa_free_exception@plt>
    7018:	48 89 ef             	mov    %rbp,%rdi
    701b:	e8 40 fa ff ff       	call   6a60 <_Unwind_Resume@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    7020:	48 89 c5             	mov    %rax,%rbp
    7023:	eb 0b                	jmp    7030 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T.cold+0x87>
    throw std::runtime_error("Failed to get physical devices list.");
    7025:	4c 89 e7             	mov    %r12,%rdi
    7028:	48 89 c5             	mov    %rax,%rbp
    702b:	e8 60 f3 ff ff       	call   6390 <__cxa_free_exception@plt>
    7030:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    7033:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    7037:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    703a:	48 85 ff             	test   %rdi,%rdi
    703d:	74 05                	je     7044 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T.cold+0x9b>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    703f:	e8 1c f5 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7044:	48 89 ef             	mov    %rbp,%rdi
    7047:	e8 14 fa ff ff       	call   6a60 <_Unwind_Resume@plt>

000000000000704c <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T.cold>:
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    704c:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    704f:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    7053:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    7056:	48 85 ff             	test   %rdi,%rdi
    7059:	74 05                	je     7060 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T.cold+0x14>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    705b:	e8 00 f5 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7060:	48 89 ef             	mov    %rbp,%rdi
    7063:	e8 f8 f9 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007068 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T.cold>:
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    7068:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    706d:	4c 29 e6             	sub    %r12,%rsi
	if (__p)
    7070:	4d 85 e4             	test   %r12,%r12
    7073:	74 08                	je     707d <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T.cold+0x15>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7075:	4c 89 e7             	mov    %r12,%rdi
    7078:	e8 e3 f4 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    707d:	48 89 df             	mov    %rbx,%rdi
    7080:	e8 db f9 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007085 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T.cold>:
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    7085:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    708a:	4c 29 e6             	sub    %r12,%rsi
	if (__p)
    708d:	4d 85 e4             	test   %r12,%r12
    7090:	74 08                	je     709a <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T.cold+0x15>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7092:	4c 89 e7             	mov    %r12,%rdi
    7095:	e8 c6 f4 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    709a:	48 89 df             	mov    %rbx,%rdi
    709d:	e8 be f9 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000070a2 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold>:
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    70a2:	49 8b 3c 24          	mov    (%r12),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    70a6:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
    70ab:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    70ae:	48 85 ff             	test   %rdi,%rdi
    70b1:	74 05                	je     70b8 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x16>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    70b3:	e8 a8 f4 ff ff       	call   6560 <_ZdlPvm@plt>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    70b8:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    70bd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    70c2:	48 29 c6             	sub    %rax,%rsi
	if (__p)
    70c5:	48 85 c0             	test   %rax,%rax
    70c8:	74 08                	je     70d2 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x30>
    70ca:	48 89 c7             	mov    %rax,%rdi
    70cd:	e8 8e f4 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    70d2:	48 89 df             	mov    %rbx,%rdi
    70d5:	e8 86 f9 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000070da <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold>:
getPhysicalDeviceSurfaceCapabilities(VkPhysicalDevice physicalDevice,
                                     VkSurfaceKHR surface) {
  VkSurfaceCapabilitiesKHR surfaceCapabilities{};
  if (vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
          physicalDevice, surface, &surfaceCapabilities) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get surface capabilities.");
    70da:	bf 10 00 00 00       	mov    $0x10,%edi
    70df:	e8 6c f1 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    70e4:	48 8d 35 3d 05 03 00 	lea    0x3053d(%rip),%rsi        # 37628 <_ZTSN3vkw10ImageViewsE+0x258>
    70eb:	48 89 c7             	mov    %rax,%rdi
    70ee:	48 89 c3             	mov    %rax,%rbx
    70f1:	e8 ba f0 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    70f6:	48 8b 15 a3 9e 03 00 	mov    0x39ea3(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    70fd:	48 8d 35 1c 9a 03 00 	lea    0x39a1c(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7104:	48 89 df             	mov    %rbx,%rdi
    7107:	e8 f4 f8 ff ff       	call   6a00 <__cxa_throw@plt>
    710c:	48 89 c5             	mov    %rax,%rbp
    710f:	48 89 df             	mov    %rbx,%rdi
    7112:	e8 79 f2 ff ff       	call   6390 <__cxa_free_exception@plt>
    7117:	48 89 ef             	mov    %rbp,%rdi
    711a:	e8 41 f9 ff ff       	call   6a60 <_Unwind_Resume@plt>

000000000000711f <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold>:
                                   VkSurfaceKHR surface) {
  uint32_t surfaceFormatCount;
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface,
                                           &surfaceFormatCount,
                                           nullptr) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get surface format list.");
    711f:	bf 10 00 00 00       	mov    $0x10,%edi
    7124:	e8 27 f1 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7129:	48 8d 35 20 05 03 00 	lea    0x30520(%rip),%rsi        # 37650 <_ZTSN3vkw10ImageViewsE+0x280>
    7130:	48 89 c7             	mov    %rax,%rdi
    7133:	48 89 c3             	mov    %rax,%rbx
    7136:	e8 75 f0 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    713b:	48 8b 15 5e 9e 03 00 	mov    0x39e5e(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7142:	48 8d 35 d7 99 03 00 	lea    0x399d7(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7149:	48 89 df             	mov    %rbx,%rdi
    714c:	e8 af f8 ff ff       	call   6a00 <__cxa_throw@plt>
  }
  std::vector<VkSurfaceFormatKHR> surfaceFormats{surfaceFormatCount};
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(
          physicalDevice, surface, &surfaceFormatCount,
          surfaceFormats.data()) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get surface format list.");
    7151:	bf 10 00 00 00       	mov    $0x10,%edi
    7156:	e8 f5 f0 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    715b:	48 8d 35 ee 04 03 00 	lea    0x304ee(%rip),%rsi        # 37650 <_ZTSN3vkw10ImageViewsE+0x280>
    7162:	48 89 c7             	mov    %rax,%rdi
    7165:	49 89 c4             	mov    %rax,%r12
    7168:	e8 43 f0 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    716d:	48 8b 15 2c 9e 03 00 	mov    0x39e2c(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7174:	48 8d 35 a5 99 03 00 	lea    0x399a5(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    717b:	4c 89 e7             	mov    %r12,%rdi
    717e:	e8 7d f8 ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get surface format list.");
    7183:	48 89 c5             	mov    %rax,%rbp
    7186:	48 89 df             	mov    %rbx,%rdi
    7189:	e8 02 f2 ff ff       	call   6390 <__cxa_free_exception@plt>
    718e:	48 89 ef             	mov    %rbp,%rdi
    7191:	e8 ca f8 ff ff       	call   6a60 <_Unwind_Resume@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    7196:	48 89 c5             	mov    %rax,%rbp
    7199:	eb 0b                	jmp    71a6 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x87>
    throw std::runtime_error("Failed to get surface format list.");
    719b:	4c 89 e7             	mov    %r12,%rdi
    719e:	48 89 c5             	mov    %rax,%rbp
    71a1:	e8 ea f1 ff ff       	call   6390 <__cxa_free_exception@plt>
    71a6:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    71a9:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    71ad:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    71b0:	48 85 ff             	test   %rdi,%rdi
    71b3:	74 05                	je     71ba <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x9b>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    71b5:	e8 a6 f3 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    71ba:	48 89 ef             	mov    %rbp,%rdi
    71bd:	e8 9e f8 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000071c2 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold>:
getPhysicalDeviceSurfacePresentModeList(VkPhysicalDevice physicalDevice,
                                        VkSurfaceKHR surface) {
  uint32_t presentModeCount;
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface,
                                                &presentModeCount, nullptr)) {
    throw std::runtime_error("Failed to get surface present mode list.");
    71c2:	bf 10 00 00 00       	mov    $0x10,%edi
    71c7:	e8 84 f0 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    71cc:	48 8d 35 a5 04 03 00 	lea    0x304a5(%rip),%rsi        # 37678 <_ZTSN3vkw10ImageViewsE+0x2a8>
    71d3:	48 89 c7             	mov    %rax,%rdi
    71d6:	48 89 c3             	mov    %rax,%rbx
    71d9:	e8 d2 ef ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    71de:	48 8b 15 bb 9d 03 00 	mov    0x39dbb(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    71e5:	48 8d 35 34 99 03 00 	lea    0x39934(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    71ec:	48 89 df             	mov    %rbx,%rdi
    71ef:	e8 0c f8 ff ff       	call   6a00 <__cxa_throw@plt>
  }
  std::vector<VkPresentModeKHR> presentModes{presentModeCount};
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(
          physicalDevice, surface, &presentModeCount, presentModes.data())) {
    throw std::runtime_error("Failed to get surface present mode list.");
    71f4:	bf 10 00 00 00       	mov    $0x10,%edi
    71f9:	e8 52 f0 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    71fe:	48 8d 35 73 04 03 00 	lea    0x30473(%rip),%rsi        # 37678 <_ZTSN3vkw10ImageViewsE+0x2a8>
    7205:	48 89 c7             	mov    %rax,%rdi
    7208:	49 89 c4             	mov    %rax,%r12
    720b:	e8 a0 ef ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7210:	48 8b 15 89 9d 03 00 	mov    0x39d89(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7217:	48 8d 35 02 99 03 00 	lea    0x39902(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    721e:	4c 89 e7             	mov    %r12,%rdi
    7221:	e8 da f7 ff ff       	call   6a00 <__cxa_throw@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    7226:	48 89 c5             	mov    %rax,%rbp
    7229:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    722c:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    7230:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    7233:	48 85 ff             	test   %rdi,%rdi
    7236:	74 05                	je     723d <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x7b>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7238:	e8 23 f3 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    723d:	48 89 ef             	mov    %rbp,%rdi
    7240:	e8 1b f8 ff ff       	call   6a60 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get surface present mode list.");
    7245:	48 89 c5             	mov    %rax,%rbp
    7248:	48 89 df             	mov    %rbx,%rdi
    724b:	e8 40 f1 ff ff       	call   6390 <__cxa_free_exception@plt>
    7250:	48 89 ef             	mov    %rbp,%rdi
    7253:	e8 08 f8 ff ff       	call   6a60 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get surface present mode list.");
    7258:	4c 89 e7             	mov    %r12,%rdi
    725b:	48 89 c5             	mov    %rax,%rbp
    725e:	e8 2d f1 ff ff       	call   6390 <__cxa_free_exception@plt>
    7263:	eb c4                	jmp    7229 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x67>

0000000000007265 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T.cold>:
std::vector<VkImage> getSwapchainImages(VkDevice device,
                                        VkSwapchainKHR swapchain) {
  uint32_t swapchainImageCount;
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
                              nullptr) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get swapchain images");
    7265:	bf 10 00 00 00       	mov    $0x10,%edi
    726a:	e8 e1 ef ff ff       	call   6250 <__cxa_allocate_exception@plt>
    726f:	48 8d 35 32 04 03 00 	lea    0x30432(%rip),%rsi        # 376a8 <_ZTSN3vkw10ImageViewsE+0x2d8>
    7276:	48 89 c7             	mov    %rax,%rdi
    7279:	48 89 c3             	mov    %rax,%rbx
    727c:	e8 2f ef ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7281:	48 8b 15 18 9d 03 00 	mov    0x39d18(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7288:	48 8d 35 91 98 03 00 	lea    0x39891(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    728f:	48 89 df             	mov    %rbx,%rdi
    7292:	e8 69 f7 ff ff       	call   6a00 <__cxa_throw@plt>
  }
  std::vector<VkImage> swapchainImages{swapchainImageCount};
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
                              swapchainImages.data()) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get swapchain images");
    7297:	bf 10 00 00 00       	mov    $0x10,%edi
    729c:	e8 af ef ff ff       	call   6250 <__cxa_allocate_exception@plt>
    72a1:	48 8d 35 00 04 03 00 	lea    0x30400(%rip),%rsi        # 376a8 <_ZTSN3vkw10ImageViewsE+0x2d8>
    72a8:	48 89 c7             	mov    %rax,%rdi
    72ab:	49 89 c4             	mov    %rax,%r12
    72ae:	e8 fd ee ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    72b3:	48 8b 15 e6 9c 03 00 	mov    0x39ce6(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    72ba:	48 8d 35 5f 98 03 00 	lea    0x3985f(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    72c1:	4c 89 e7             	mov    %r12,%rdi
    72c4:	e8 37 f7 ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get swapchain images");
    72c9:	48 89 c5             	mov    %rax,%rbp
    72cc:	48 89 df             	mov    %rbx,%rdi
    72cf:	e8 bc f0 ff ff       	call   6390 <__cxa_free_exception@plt>
    72d4:	48 89 ef             	mov    %rbp,%rdi
    72d7:	e8 84 f7 ff ff       	call   6a60 <_Unwind_Resume@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    72dc:	48 89 c5             	mov    %rax,%rbp
    72df:	eb 0b                	jmp    72ec <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T.cold+0x87>
    throw std::runtime_error("Failed to get swapchain images");
    72e1:	4c 89 e7             	mov    %r12,%rdi
    72e4:	48 89 c5             	mov    %rax,%rbp
    72e7:	e8 a4 f0 ff ff       	call   6390 <__cxa_free_exception@plt>
    72ec:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    72ef:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    72f3:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    72f6:	48 85 ff             	test   %rdi,%rdi
    72f9:	74 05                	je     7300 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T.cold+0x9b>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    72fb:	e8 60 f2 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7300:	48 89 ef             	mov    %rbp,%rdi
    7303:	e8 58 f7 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007308 <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks.cold>:

VkInstance createInstance(const VkInstanceCreateInfo *pCreateInfo,
                          const VkAllocationCallbacks *pAllocator) {
  VkInstance instance;
  if (vkCreateInstance(pCreateInfo, pAllocator, &instance) != VK_SUCCESS) {
    throw std::runtime_error("Failed to create an instance.");
    7308:	bf 10 00 00 00       	mov    $0x10,%edi
    730d:	e8 3e ef ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7312:	48 8d 35 ae 03 03 00 	lea    0x303ae(%rip),%rsi        # 376c7 <_ZTSN3vkw10ImageViewsE+0x2f7>
    7319:	48 89 c7             	mov    %rax,%rdi
    731c:	48 89 c3             	mov    %rax,%rbx
    731f:	e8 8c ee ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7324:	48 8b 15 75 9c 03 00 	mov    0x39c75(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    732b:	48 8d 35 ee 97 03 00 	lea    0x397ee(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7332:	48 89 df             	mov    %rbx,%rdi
    7335:	e8 c6 f6 ff ff       	call   6a00 <__cxa_throw@plt>
    733a:	48 89 c5             	mov    %rax,%rbp
    733d:	48 89 df             	mov    %rbx,%rdi
    7340:	e8 4b f0 ff ff       	call   6390 <__cxa_free_exception@plt>
    7345:	48 89 ef             	mov    %rbp,%rdi
    7348:	e8 13 f7 ff ff       	call   6a60 <_Unwind_Resume@plt>

000000000000734d <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks.cold>:
                      const VkDeviceCreateInfo *pCreateInfo,
                      const VkAllocationCallbacks *pAllocator) {
  VkDevice device;
  if (vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, &device) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create logical device.");
    734d:	bf 10 00 00 00       	mov    $0x10,%edi
    7352:	e8 f9 ee ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7357:	48 8d 35 0a 04 03 00 	lea    0x3040a(%rip),%rsi        # 37768 <_ZTSN3vkw10ImageViewsE+0x398>
    735e:	48 89 c7             	mov    %rax,%rdi
    7361:	48 89 c3             	mov    %rax,%rbx
    7364:	e8 47 ee ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7369:	48 8b 15 30 9c 03 00 	mov    0x39c30(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7370:	48 8d 35 a9 97 03 00 	lea    0x397a9(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7377:	48 89 df             	mov    %rbx,%rdi
    737a:	e8 81 f6 ff ff       	call   6a00 <__cxa_throw@plt>
    737f:	48 89 c5             	mov    %rax,%rbp
    7382:	48 89 df             	mov    %rbx,%rdi
    7385:	e8 06 f0 ff ff       	call   6390 <__cxa_free_exception@plt>
    738a:	48 89 ef             	mov    %rbp,%rdi
    738d:	e8 ce f6 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007392 <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks.cold>:
VkSurfaceKHR createSurface(VkInstance instance, GLFWwindow *window,
                           const VkAllocationCallbacks *allocator) {
  VkSurfaceKHR surface;
  if (glfwCreateWindowSurface(instance, window, allocator, &surface) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create window surface.");
    7392:	bf 10 00 00 00       	mov    $0x10,%edi
    7397:	e8 b4 ee ff ff       	call   6250 <__cxa_allocate_exception@plt>
    739c:	48 8d 35 ed 03 03 00 	lea    0x303ed(%rip),%rsi        # 37790 <_ZTSN3vkw10ImageViewsE+0x3c0>
    73a3:	48 89 c7             	mov    %rax,%rdi
    73a6:	48 89 c3             	mov    %rax,%rbx
    73a9:	e8 02 ee ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    73ae:	48 8b 15 eb 9b 03 00 	mov    0x39beb(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    73b5:	48 8d 35 64 97 03 00 	lea    0x39764(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    73bc:	48 89 df             	mov    %rbx,%rdi
    73bf:	e8 3c f6 ff ff       	call   6a00 <__cxa_throw@plt>
    73c4:	48 89 c5             	mov    %rax,%rbp
    73c7:	48 89 df             	mov    %rbx,%rdi
    73ca:	e8 c1 ef ff ff       	call   6390 <__cxa_free_exception@plt>
    73cf:	48 89 ef             	mov    %rbp,%rdi
    73d2:	e8 89 f6 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000073d7 <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks.cold>:
                               const VkSwapchainCreateInfoKHR *pCreateInfo,
                               const VkAllocationCallbacks *pAllocator) {
  VkSwapchainKHR swapchain;
  if (vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, &swapchain) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create a swapchain.");
    73d7:	bf 10 00 00 00       	mov    $0x10,%edi
    73dc:	e8 6f ee ff ff       	call   6250 <__cxa_allocate_exception@plt>
    73e1:	48 8d 35 fd 02 03 00 	lea    0x302fd(%rip),%rsi        # 376e5 <_ZTSN3vkw10ImageViewsE+0x315>
    73e8:	48 89 c7             	mov    %rax,%rdi
    73eb:	48 89 c3             	mov    %rax,%rbx
    73ee:	e8 bd ed ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    73f3:	48 8b 15 a6 9b 03 00 	mov    0x39ba6(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    73fa:	48 8d 35 1f 97 03 00 	lea    0x3971f(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7401:	48 89 df             	mov    %rbx,%rdi
    7404:	e8 f7 f5 ff ff       	call   6a00 <__cxa_throw@plt>
    7409:	48 89 c5             	mov    %rax,%rbp
    740c:	48 89 df             	mov    %rbx,%rdi
    740f:	e8 7c ef ff ff       	call   6390 <__cxa_free_exception@plt>
    7414:	48 89 ef             	mov    %rbp,%rdi
    7417:	e8 44 f6 ff ff       	call   6a60 <_Unwind_Resume@plt>

000000000000741c <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks.cold>:
                            const VkImageViewCreateInfo *pCreateInfo,
                            const VkAllocationCallbacks *pAllocator) {
  VkImageView imageView;
  if (vkCreateImageView(device, pCreateInfo, pAllocator, &imageView) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create an image view.");
    741c:	bf 10 00 00 00       	mov    $0x10,%edi
    7421:	e8 2a ee ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7426:	48 8d 35 8b 03 03 00 	lea    0x3038b(%rip),%rsi        # 377b8 <_ZTSN3vkw10ImageViewsE+0x3e8>
    742d:	48 89 c7             	mov    %rax,%rdi
    7430:	48 89 c3             	mov    %rax,%rbx
    7433:	e8 78 ed ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7438:	48 8b 15 61 9b 03 00 	mov    0x39b61(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    743f:	48 8d 35 da 96 03 00 	lea    0x396da(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7446:	48 89 df             	mov    %rbx,%rdi
    7449:	e8 b2 f5 ff ff       	call   6a00 <__cxa_throw@plt>
    744e:	48 89 c5             	mov    %rax,%rbp
    7451:	48 89 df             	mov    %rbx,%rdi
    7454:	e8 37 ef ff ff       	call   6390 <__cxa_free_exception@plt>
    7459:	48 89 ef             	mov    %rbp,%rdi
    745c:	e8 ff f5 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007461 <_ZN3vkh18createShaderModuleEP10VkDevice_TRKSt6vectorIcSaIcEEPK21VkAllocationCallbacks.cold>:
  shaderModuleInfo.pNext = nullptr;

  VkShaderModule shaderModule;
  if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
                           &shaderModule) != VK_SUCCESS) {
    throw std::runtime_error("Failed to create shader module.");
    7461:	bf 10 00 00 00       	mov    $0x10,%edi
    7466:	e8 e5 ed ff ff       	call   6250 <__cxa_allocate_exception@plt>
    746b:	48 8d 35 66 03 03 00 	lea    0x30366(%rip),%rsi        # 377d8 <_ZTSN3vkw10ImageViewsE+0x408>
    7472:	48 89 c7             	mov    %rax,%rdi
    7475:	48 89 c3             	mov    %rax,%rbx
    7478:	e8 33 ed ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    747d:	48 8b 15 1c 9b 03 00 	mov    0x39b1c(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7484:	48 8d 35 95 96 03 00 	lea    0x39695(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    748b:	48 89 df             	mov    %rbx,%rdi
    748e:	e8 6d f5 ff ff       	call   6a00 <__cxa_throw@plt>
    7493:	48 89 c5             	mov    %rax,%rbp
    7496:	48 89 df             	mov    %rbx,%rdi
    7499:	e8 f2 ee ff ff       	call   6390 <__cxa_free_exception@plt>
    749e:	48 89 ef             	mov    %rbp,%rdi
    74a1:	e8 ba f5 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000074a6 <_ZN3vkh20createPipelineLayoutEP10VkDevice_TPK26VkPipelineLayoutCreateInfoPK21VkAllocationCallbacks.cold>:
                     const VkPipelineLayoutCreateInfo *pCreateInfo,
                     const VkAllocationCallbacks *pAllocator) {
  VkPipelineLayout pipelineLayout;
  if (vkCreatePipelineLayout(device, pCreateInfo, pAllocator,
                             &pipelineLayout) != VK_SUCCESS) {
    throw std::runtime_error("Failed to create pipeline layout.");
    74a6:	bf 10 00 00 00       	mov    $0x10,%edi
    74ab:	e8 a0 ed ff ff       	call   6250 <__cxa_allocate_exception@plt>
    74b0:	48 8d 35 41 03 03 00 	lea    0x30341(%rip),%rsi        # 377f8 <_ZTSN3vkw10ImageViewsE+0x428>
    74b7:	48 89 c7             	mov    %rax,%rdi
    74ba:	48 89 c3             	mov    %rax,%rbx
    74bd:	e8 ee ec ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    74c2:	48 8b 15 d7 9a 03 00 	mov    0x39ad7(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    74c9:	48 8d 35 50 96 03 00 	lea    0x39650(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    74d0:	48 89 df             	mov    %rbx,%rdi
    74d3:	e8 28 f5 ff ff       	call   6a00 <__cxa_throw@plt>
    74d8:	48 89 c5             	mov    %rax,%rbp
    74db:	48 89 df             	mov    %rbx,%rdi
    74de:	e8 ad ee ff ff       	call   6390 <__cxa_free_exception@plt>
    74e3:	48 89 ef             	mov    %rbp,%rdi
    74e6:	e8 75 f5 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000074eb <_ZN3vkh16createRenderPassEP10VkDevice_TPK22VkRenderPassCreateInfoPK21VkAllocationCallbacks.cold>:
                              const VkRenderPassCreateInfo *pCreateInfo,
                              const VkAllocationCallbacks *pAllocator) {
  VkRenderPass renderPass;
  if (vkCreateRenderPass(device, pCreateInfo, pAllocator, &renderPass) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create pipeline layout.");
    74eb:	bf 10 00 00 00       	mov    $0x10,%edi
    74f0:	e8 5b ed ff ff       	call   6250 <__cxa_allocate_exception@plt>
    74f5:	48 8d 35 fc 02 03 00 	lea    0x302fc(%rip),%rsi        # 377f8 <_ZTSN3vkw10ImageViewsE+0x428>
    74fc:	48 89 c7             	mov    %rax,%rdi
    74ff:	48 89 c3             	mov    %rax,%rbx
    7502:	e8 a9 ec ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7507:	48 8b 15 92 9a 03 00 	mov    0x39a92(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    750e:	48 8d 35 0b 96 03 00 	lea    0x3960b(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7515:	48 89 df             	mov    %rbx,%rdi
    7518:	e8 e3 f4 ff ff       	call   6a00 <__cxa_throw@plt>
    751d:	48 89 c5             	mov    %rax,%rbp
    7520:	48 89 df             	mov    %rbx,%rdi
    7523:	e8 68 ee ff ff       	call   6390 <__cxa_free_exception@plt>
    7528:	48 89 ef             	mov    %rbp,%rdi
    752b:	e8 30 f5 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007530 <_ZN3vkh17createFramebufferEP10VkDevice_TPK23VkFramebufferCreateInfoPK21VkAllocationCallbacks.cold>:
                                const VkFramebufferCreateInfo *pCreateInfo,
                                const VkAllocationCallbacks *pAllocator) {
  VkFramebuffer framebuffer;
  if (vkCreateFramebuffer(device, pCreateInfo, pAllocator, &framebuffer) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create framebuffer.");
    7530:	bf 10 00 00 00       	mov    $0x10,%edi
    7535:	e8 16 ed ff ff       	call   6250 <__cxa_allocate_exception@plt>
    753a:	48 8d 35 c2 01 03 00 	lea    0x301c2(%rip),%rsi        # 37703 <_ZTSN3vkw10ImageViewsE+0x333>
    7541:	48 89 c7             	mov    %rax,%rdi
    7544:	48 89 c3             	mov    %rax,%rbx
    7547:	e8 64 ec ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    754c:	48 8b 15 4d 9a 03 00 	mov    0x39a4d(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7553:	48 8d 35 c6 95 03 00 	lea    0x395c6(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    755a:	48 89 df             	mov    %rbx,%rdi
    755d:	e8 9e f4 ff ff       	call   6a00 <__cxa_throw@plt>
    7562:	48 89 c5             	mov    %rax,%rbp
    7565:	48 89 df             	mov    %rbx,%rdi
    7568:	e8 23 ee ff ff       	call   6390 <__cxa_free_exception@plt>
    756d:	48 89 ef             	mov    %rbp,%rdi
    7570:	e8 eb f4 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007575 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks.cold>:
                                const VkCommandPoolCreateInfo *pCreateInfo,
                                const VkAllocationCallbacks *pAllocator) {
  VkCommandPool commandPool{};
  if (vkCreateCommandPool(device, pCreateInfo, pAllocator, &commandPool) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create command pool.");
    7575:	bf 10 00 00 00       	mov    $0x10,%edi
    757a:	e8 d1 ec ff ff       	call   6250 <__cxa_allocate_exception@plt>
    757f:	48 8d 35 9a 02 03 00 	lea    0x3029a(%rip),%rsi        # 37820 <_ZTSN3vkw10ImageViewsE+0x450>
    7586:	48 89 c7             	mov    %rax,%rdi
    7589:	48 89 c3             	mov    %rax,%rbx
    758c:	e8 1f ec ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7591:	48 8b 15 08 9a 03 00 	mov    0x39a08(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7598:	48 8d 35 81 95 03 00 	lea    0x39581(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    759f:	48 89 df             	mov    %rbx,%rdi
    75a2:	e8 59 f4 ff ff       	call   6a00 <__cxa_throw@plt>
    75a7:	48 89 c5             	mov    %rax,%rbp
    75aa:	48 89 df             	mov    %rbx,%rdi
    75ad:	e8 de ed ff ff       	call   6390 <__cxa_free_exception@plt>
    75b2:	48 89 ef             	mov    %rbp,%rdi
    75b5:	e8 a6 f4 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000075ba <_ZN3vkh15createSemaphoreEP10VkDevice_TPK21VkSemaphoreCreateInfoPK21VkAllocationCallbacks.cold>:
                            const VkSemaphoreCreateInfo *pCreateInfo,
                            const VkAllocationCallbacks *pAllocator) {
  VkSemaphore semaphore;
  if (vkCreateSemaphore(device, pCreateInfo, pAllocator, &semaphore) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create semaphore.");
    75ba:	bf 10 00 00 00       	mov    $0x10,%edi
    75bf:	e8 8c ec ff ff       	call   6250 <__cxa_allocate_exception@plt>
    75c4:	48 8d 35 56 01 03 00 	lea    0x30156(%rip),%rsi        # 37721 <_ZTSN3vkw10ImageViewsE+0x351>
    75cb:	48 89 c7             	mov    %rax,%rdi
    75ce:	48 89 c3             	mov    %rax,%rbx
    75d1:	e8 da eb ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    75d6:	48 8b 15 c3 99 03 00 	mov    0x399c3(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    75dd:	48 8d 35 3c 95 03 00 	lea    0x3953c(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    75e4:	48 89 df             	mov    %rbx,%rdi
    75e7:	e8 14 f4 ff ff       	call   6a00 <__cxa_throw@plt>
    75ec:	48 89 c5             	mov    %rax,%rbp
    75ef:	48 89 df             	mov    %rbx,%rdi
    75f2:	e8 99 ed ff ff       	call   6390 <__cxa_free_exception@plt>
    75f7:	48 89 ef             	mov    %rbp,%rdi
    75fa:	e8 61 f4 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000075ff <_ZN3vkh11createFenceEP10VkDevice_TPK17VkFenceCreateInfoPK21VkAllocationCallbacks.cold>:

VkFence createFence(VkDevice device, const VkFenceCreateInfo *pCreateInfo,
                    const VkAllocationCallbacks *pAllocator) {
  VkFence fence;
  if (vkCreateFence(device, pCreateInfo, pAllocator, &fence) != VK_SUCCESS) {
    throw std::runtime_error("Failed to create fence.");
    75ff:	bf 10 00 00 00       	mov    $0x10,%edi
    7604:	e8 47 ec ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7609:	48 8d 35 2d 01 03 00 	lea    0x3012d(%rip),%rsi        # 3773d <_ZTSN3vkw10ImageViewsE+0x36d>
    7610:	48 89 c7             	mov    %rax,%rdi
    7613:	48 89 c3             	mov    %rax,%rbx
    7616:	e8 95 eb ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    761b:	48 8b 15 7e 99 03 00 	mov    0x3997e(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7622:	48 8d 35 f7 94 03 00 	lea    0x394f7(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7629:	48 89 df             	mov    %rbx,%rdi
    762c:	e8 cf f3 ff ff       	call   6a00 <__cxa_throw@plt>
    7631:	48 89 c5             	mov    %rax,%rbp
    7634:	48 89 df             	mov    %rbx,%rdi
    7637:	e8 54 ed ff ff       	call   6390 <__cxa_free_exception@plt>
    763c:	48 89 ef             	mov    %rbp,%rdi
    763f:	e8 1c f4 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007644 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold>:
    throw std::runtime_error("Failed to create shader module.");
    7644:	bf 10 00 00 00       	mov    $0x10,%edi
    7649:	e8 02 ec ff ff       	call   6250 <__cxa_allocate_exception@plt>
    764e:	48 8d 35 83 01 03 00 	lea    0x30183(%rip),%rsi        # 377d8 <_ZTSN3vkw10ImageViewsE+0x408>
    7655:	48 89 c7             	mov    %rax,%rdi
    7658:	49 89 c6             	mov    %rax,%r14
    765b:	e8 50 eb ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7660:	48 8b 15 39 99 03 00 	mov    0x39939(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7667:	48 8d 35 b2 94 03 00 	lea    0x394b2(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    766e:	4c 89 f7             	mov    %r14,%rdi
    7671:	e8 8a f3 ff ff       	call   6a00 <__cxa_throw@plt>
  file.seekg(0);
    7676:	49 89 c5             	mov    %rax,%r13
    7679:	eb 1a                	jmp    7695 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x51>
      virtual
      ~basic_filebuf()
      {
	__try
	  { this->close(); }
	__catch(...)
    767b:	e8 60 eb ff ff       	call   61e0 <__cxa_begin_catch@plt>
    7680:	e8 1b f3 ff ff       	call   69a0 <__cxa_end_catch@plt>
    7685:	e9 7f 65 00 00       	jmp    dc09 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x209>
    throw std::runtime_error("Failed to create shader module.");
    768a:	4c 89 f7             	mov    %r14,%rdi
    768d:	49 89 c5             	mov    %rax,%r13
    7690:	e8 fb ec ff ff       	call   6390 <__cxa_free_exception@plt>
    7695:	48 85 ed             	test   %rbp,%rbp
    7698:	74 0b                	je     76a5 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x61>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    769a:	48 89 de             	mov    %rbx,%rsi
    769d:	48 89 ef             	mov    %rbp,%rdi
    76a0:	e8 bb ee ff ff       	call   6560 <_ZdlPvm@plt>
}
    76a5:	4c 89 e7             	mov    %r12,%rdi
    76a8:	e8 53 ea ff ff       	call   6100 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@plt>
    76ad:	4c 89 ef             	mov    %r13,%rdi
    76b0:	e8 ab f3 ff ff       	call   6a60 <_Unwind_Resume@plt>
  size_t bufferSize = static_cast<size_t>(file.tellg());
    76b5:	49 89 c5             	mov    %rax,%r13
    76b8:	eb eb                	jmp    76a5 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x61>
    throw std::runtime_error("Failed to open " + shaderCodePath);
    76ba:	bf 10 00 00 00       	mov    $0x10,%edi
	: allocator_type(__a), _M_p(__dat) { }
    76bf:	4c 8d 6c 24 30       	lea    0x30(%rsp),%r13
    76c4:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
    76c9:	e8 82 eb ff ff       	call   6250 <__cxa_allocate_exception@plt>
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str(_Alloc_traits::_S_select_on_copy(
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
    76ce:	4c 89 ef             	mov    %r13,%rdi
    76d1:	4c 89 74 24 30       	mov    %r14,0x30(%rsp)
    76d6:	48 89 c5             	mov    %rax,%rbp
      { _M_string_length = __length; }
    76d9:	31 c0                	xor    %eax,%eax
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
    76db:	c6 44 24 40 00       	movb   $0x0,0x40(%rsp)
    76e0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    76e5:	48 8b 43 08          	mov    0x8(%rbx),%rax
    76e9:	48 8d 70 0f          	lea    0xf(%rax),%rsi
    76ed:	e8 2e f2 ff ff       	call   6920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>

      _GLIBCXX20_CONSTEXPR
      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
	if (this->max_size() - (this->size() - __n1) < __n2)
    76f2:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    76f9:	ff ff 3f 
    76fc:	48 2b 44 24 38       	sub    0x38(%rsp),%rax
    7701:	48 83 f8 0e          	cmp    $0xe,%rax
    7705:	0f 86 b7 00 00 00    	jbe    77c2 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x17e>
      basic_string&
      append(const _CharT* __s, size_type __n)
      {
	__glibcxx_requires_string_len(__s, __n);
	_M_check_length(size_type(0), __n, "basic_string::append");
	return _M_append(__s, __n);
    770b:	ba 0f 00 00 00       	mov    $0xf,%edx
    7710:	48 8d 35 3e 00 03 00 	lea    0x3003e(%rip),%rsi        # 37755 <_ZTSN3vkw10ImageViewsE+0x385>
    7717:	4c 89 ef             	mov    %r13,%rdi
    771a:	e8 61 ea ff ff       	call   6180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_string_length; }
    771f:	48 8b 53 08          	mov    0x8(%rbx),%rdx
      { return _M_dataplus._M_p; }
    7723:	48 8b 33             	mov    (%rbx),%rsi
	if (this->max_size() - (this->size() - __n1) < __n2)
    7726:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    772d:	ff ff 3f 
    7730:	48 2b 44 24 38       	sub    0x38(%rsp),%rax
    7735:	48 39 d0             	cmp    %rdx,%rax
    7738:	0f 82 b8 00 00 00    	jb     77f6 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x1b2>
	return _M_append(__s, __n);
    773e:	4c 89 ef             	mov    %r13,%rdi
    7741:	e8 3a ea ff ff       	call   6180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
    7746:	4c 89 ee             	mov    %r13,%rsi
    7749:	48 89 ef             	mov    %rbp,%rdi
    774c:	e8 2f f2 ff ff       	call   6980 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
      { return _M_dataplus._M_p; }
    7751:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
	if (!_M_is_local())
    7756:	4c 39 f7             	cmp    %r14,%rdi
    7759:	74 0e                	je     7769 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x125>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    775b:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    7760:	48 8d 70 01          	lea    0x1(%rax),%rsi
    7764:	e8 f7 ed ff ff       	call   6560 <_ZdlPvm@plt>
    7769:	48 8b 15 30 98 03 00 	mov    0x39830(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7770:	48 8d 35 a9 93 03 00 	lea    0x393a9(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7777:	48 89 ef             	mov    %rbp,%rdi
    777a:	e8 81 f2 ff ff       	call   6a00 <__cxa_throw@plt>
		     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
	this->init(&_M_filebuf);
	this->open(__s, __mode);
      }
    777f:	4c 89 f7             	mov    %r14,%rdi
    7782:	e8 79 f1 ff ff       	call   6900 <_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev@plt>
       *
       *  This does very little apart from providing a virtual base dtor.
      */
      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }
    7787:	49 8b 45 e8          	mov    -0x18(%r13),%rax
    778b:	48 8b 0d 76 93 03 00 	mov    0x39376(%rip),%rcx        # 40b08 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    7792:	31 d2                	xor    %edx,%edx
    7794:	4c 89 6c 24 60       	mov    %r13,0x60(%rsp)
    7799:	48 89 4c 04 60       	mov    %rcx,0x60(%rsp,%rax,1)
    779e:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
       *
       *  The destructor does nothing.  More specifically, it does not
       *  destroy the streambuf held by rdbuf().
      */
      virtual
      ~basic_ios() { }
    77a3:	48 8d 05 06 91 03 00 	lea    0x39106(%rip),%rax        # 408b0 <_ZTVSt9basic_iosIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    77aa:	4c 89 ff             	mov    %r15,%rdi
    77ad:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    77b4:	00 
    77b5:	e8 e6 e9 ff ff       	call   61a0 <_ZNSt8ios_baseD2Ev@plt>
    77ba:	48 89 df             	mov    %rbx,%rdi
    77bd:	e8 9e f2 ff ff       	call   6a60 <_Unwind_Resume@plt>
	  __throw_length_error(__N(__s));
    77c2:	48 8d 3d 97 fa 02 00 	lea    0x2fa97(%rip),%rdi        # 37260 <_IO_stdin_used+0x260>
    77c9:	e8 b2 ea ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
      { return _M_dataplus._M_p; }
    77ce:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    77d3:	49 89 c5             	mov    %rax,%r13
	if (!_M_is_local())
    77d6:	4c 39 f7             	cmp    %r14,%rdi
    77d9:	74 0e                	je     77e9 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x1a5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    77db:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    77e0:	48 8d 70 01          	lea    0x1(%rax),%rsi
    77e4:	e8 77 ed ff ff       	call   6560 <_ZdlPvm@plt>
    77e9:	48 89 ef             	mov    %rbp,%rdi
    77ec:	e8 9f eb ff ff       	call   6390 <__cxa_free_exception@plt>
    77f1:	e9 af fe ff ff       	jmp    76a5 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x61>
	  __throw_length_error(__N(__s));
    77f6:	48 8d 3d 63 fa 02 00 	lea    0x2fa63(%rip),%rdi        # 37260 <_IO_stdin_used+0x260>
    77fd:	e8 7e ea ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
    7802:	eb ca                	jmp    77ce <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x18a>

0000000000007804 <_ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T.cold>:
  layoutInfo.bindingCount = static_cast<uint32_t>(bindings.size());
  layoutInfo.pBindings = bindings.data();

  if (vkCreateDescriptorSetLayout(device, &layoutInfo, nullptr, &_setLayout) !=
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create descriptor set layout.");
    7804:	bf 10 00 00 00       	mov    $0x10,%edi
    7809:	e8 42 ea ff ff       	call   6250 <__cxa_allocate_exception@plt>
    780e:	48 8d 35 2b 00 03 00 	lea    0x3002b(%rip),%rsi        # 37840 <_ZTSN3vkw10ImageViewsE+0x470>
    7815:	48 89 c7             	mov    %rax,%rdi
    7818:	48 89 c3             	mov    %rax,%rbx
    781b:	e8 90 e9 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7820:	48 8b 15 79 97 03 00 	mov    0x39779(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7827:	48 8d 35 f2 92 03 00 	lea    0x392f2(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    782e:	48 89 df             	mov    %rbx,%rdi
    7831:	e8 ca f1 ff ff       	call   6a00 <__cxa_throw@plt>
    7836:	48 89 c5             	mov    %rax,%rbp
    7839:	48 89 df             	mov    %rbx,%rdi
    783c:	e8 4f eb ff ff       	call   6390 <__cxa_free_exception@plt>
    7841:	48 89 ef             	mov    %rbp,%rdi
    7844:	e8 17 f2 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007849 <_GLOBAL__sub_I__ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T.cold>:
    7849:	48 89 df             	mov    %rbx,%rdi
    784c:	e8 8f 42 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    7851:	48 89 ef             	mov    %rbp,%rdi
    7854:	e8 07 f2 ff ff       	call   6a60 <_Unwind_Resume@plt>
    7859:	90                   	nop

000000000000785a <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T.cold>:
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    785a:	be 18 00 00 00       	mov    $0x18,%esi
    785f:	48 89 ef             	mov    %rbp,%rdi
    7862:	e8 f9 ec ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7867:	48 89 df             	mov    %rbx,%rdi
    786a:	e8 f1 f1 ff ff       	call   6a60 <_Unwind_Resume@plt>
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    786f:	4c 89 fe             	mov    %r15,%rsi
	if (__p)
    7872:	48 85 ed             	test   %rbp,%rbp
    7875:	75 e8                	jne    785f <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T.cold+0x5>
    7877:	eb ee                	jmp    7867 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T.cold+0xd>
    7879:	90                   	nop

000000000000787a <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold>:
    const std::vector<const char *> &requiredExtensions) {
  /* Get available device extensions */
  uint32_t propertyCount;
  if (vkEnumerateDeviceExtensionProperties(
          physicalDevice, nullptr, &propertyCount, nullptr) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get device extension list.");
    787a:	bf 10 00 00 00       	mov    $0x10,%edi
    787f:	e8 cc e9 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7884:	48 8d 35 dd fc 02 00 	lea    0x2fcdd(%rip),%rsi        # 37568 <_ZTSN3vkw10ImageViewsE+0x198>
    788b:	48 89 c7             	mov    %rax,%rdi
    788e:	48 89 c3             	mov    %rax,%rbx
    7891:	e8 1a e9 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7896:	48 8b 15 03 97 03 00 	mov    0x39703(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    789d:	48 8d 35 7c 92 03 00 	lea    0x3927c(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    78a4:	48 89 df             	mov    %rbx,%rdi
    78a7:	e8 54 f1 ff ff       	call   6a00 <__cxa_throw@plt>
  }
  std::vector<VkExtensionProperties> availableExtensions{propertyCount};
  if (vkEnumerateDeviceExtensionProperties(
          physicalDevice, nullptr, &propertyCount,
          availableExtensions.data()) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get device extension list.");
    78ac:	bf 10 00 00 00       	mov    $0x10,%edi
    78b1:	e8 9a e9 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    78b6:	48 8d 35 ab fc 02 00 	lea    0x2fcab(%rip),%rsi        # 37568 <_ZTSN3vkw10ImageViewsE+0x198>
    78bd:	48 89 c7             	mov    %rax,%rdi
    78c0:	48 89 c5             	mov    %rax,%rbp
    78c3:	e8 e8 e8 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    78c8:	48 8b 15 d1 96 03 00 	mov    0x396d1(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    78cf:	48 8d 35 4a 92 03 00 	lea    0x3924a(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    78d6:	48 89 ef             	mov    %rbp,%rdi
    78d9:	e8 22 f1 ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get device extension list.");
    78de:	48 89 c5             	mov    %rax,%rbp
    78e1:	48 89 df             	mov    %rbx,%rdi
    78e4:	e8 a7 ea ff ff       	call   6390 <__cxa_free_exception@plt>
    78e9:	48 89 ef             	mov    %rbp,%rdi
    78ec:	e8 6f f1 ff ff       	call   6a60 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
    78f1:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
    78f6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    78fb:	48 39 c7             	cmp    %rax,%rdi
    78fe:	74 6f                	je     796f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xf5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    7900:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    7907:	00 
    7908:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    790c:	e8 4f ec ff ff       	call   6560 <_ZdlPvm@plt>
    7911:	eb 5c                	jmp    796f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xf5>
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
    7913:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
    791a:	00 
    791b:	e8 00 66 00 00       	call   df20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7920:	48 89 df             	mov    %rbx,%rdi
    7923:	e8 38 f1 ff ff       	call   6a60 <_Unwind_Resume@plt>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    7928:	48 89 c3             	mov    %rax,%rbx
    792b:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
    7930:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    7935:	48 29 c6             	sub    %rax,%rsi
	if (__p)
    7938:	48 85 c0             	test   %rax,%rax
    793b:	74 0a                	je     7947 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xcd>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    793d:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    7942:	e8 19 ec ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7947:	48 89 df             	mov    %rbx,%rdi
    794a:	e8 11 f1 ff ff       	call   6a60 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
    794f:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
    7954:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    7959:	48 39 c7             	cmp    %rax,%rdi
    795c:	74 11                	je     796f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xf5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    795e:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    7965:	00 
    7966:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    796a:	e8 f1 eb ff ff       	call   6560 <_ZdlPvm@plt>
    796f:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
    7976:	00 
    7977:	e8 a4 65 00 00       	call   df20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    797c:	eb ad                	jmp    792b <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xb1>
      { return _M_dataplus._M_p; }
    797e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
    7983:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    7988:	48 39 c7             	cmp    %rax,%rdi
    798b:	74 11                	je     799e <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0x124>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    798d:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    7994:	00 
    7995:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7999:	e8 c2 eb ff ff       	call   6560 <_ZdlPvm@plt>
    799e:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
    79a5:	00 
    79a6:	e8 75 65 00 00       	call   df20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    79ab:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
    79b0:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    79b5:	48 29 c6             	sub    %rax,%rsi
      _M_deallocate(pointer __p, size_t __n)
    79b8:	eb 83                	jmp    793d <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xc3>
    throw std::runtime_error("Failed to get device extension list.");
    79ba:	48 89 ef             	mov    %rbp,%rdi
    79bd:	48 89 c3             	mov    %rax,%rbx
    79c0:	e8 cb e9 ff ff       	call   6390 <__cxa_free_exception@plt>
    79c5:	e9 61 ff ff ff       	jmp    792b <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xb1>

00000000000079ca <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold>:
    throw std::runtime_error("Failed to get physical devices list.");
    79ca:	bf 10 00 00 00       	mov    $0x10,%edi
    79cf:	e8 7c e8 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    79d4:	48 8d 35 ed fb 02 00 	lea    0x2fbed(%rip),%rsi        # 375c8 <_ZTSN3vkw10ImageViewsE+0x1f8>
    79db:	48 89 c7             	mov    %rax,%rdi
    79de:	48 89 c5             	mov    %rax,%rbp
    79e1:	e8 ca e7 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    79e6:	48 8b 15 b3 95 03 00 	mov    0x395b3(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    79ed:	48 8d 35 2c 91 03 00 	lea    0x3912c(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    79f4:	48 89 ef             	mov    %rbp,%rdi
    79f7:	e8 04 f0 ff ff       	call   6a00 <__cxa_throw@plt>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    79fc:	48 8b 3d dd 9d 03 00 	mov    0x39ddd(%rip),%rdi        # 417e0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions>
    7a03:	48 8b 35 e6 9d 03 00 	mov    0x39de6(%rip),%rsi        # 417f0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions+0x10>
    7a0a:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    7a0d:	48 85 ff             	test   %rdi,%rdi
    7a10:	74 05                	je     7a17 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0x4d>
    7a12:	e8 49 eb ff ff       	call   6560 <_ZdlPvm@plt>
      VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME};
    7a17:	48 89 ef             	mov    %rbp,%rdi
    7a1a:	e8 e1 e8 ff ff       	call   6300 <__cxa_guard_abort@plt>
    7a1f:	48 89 df             	mov    %rbx,%rdi
    7a22:	e8 39 f0 ff ff       	call   6a60 <_Unwind_Resume@plt>
    7a27:	48 89 c3             	mov    %rax,%rbx
    7a2a:	eb 0b                	jmp    7a37 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0x6d>
    throw std::runtime_error("Failed to select a physical device.");
    7a2c:	48 89 ef             	mov    %rbp,%rdi
    7a2f:	48 89 c3             	mov    %rax,%rbx
    7a32:	e8 59 e9 ff ff       	call   6390 <__cxa_free_exception@plt>
    7a37:	4c 89 ef             	mov    %r13,%rdi
    7a3a:	4c 89 fe             	mov    %r15,%rsi
    7a3d:	e8 1e eb ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7a42:	48 89 df             	mov    %rbx,%rdi
    7a45:	e8 16 f0 ff ff       	call   6a60 <_Unwind_Resume@plt>
  };

  // XXX Does not belong here.
  [[__noreturn__]] inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
    7a4a:	bf 08 00 00 00       	mov    $0x8,%edi
    7a4f:	e8 fc e7 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7a54:	48 8d 15 e5 78 00 00 	lea    0x78e5(%rip),%rdx        # f340 <_ZNSt19bad_optional_accessD1Ev>
    7a5b:	48 8d 35 b6 91 03 00 	lea    0x391b6(%rip),%rsi        # 40c18 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    7a62:	48 89 c7             	mov    %rax,%rdi
    bad_optional_access() = default;
    7a65:	48 8d 05 4c 8c 03 00 	lea    0x38c4c(%rip),%rax        # 406b8 <_ZTVSt19bad_optional_access+0x10>
    7a6c:	48 89 07             	mov    %rax,(%rdi)
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
    7a6f:	e8 8c ef ff ff       	call   6a00 <__cxa_throw@plt>
    7a74:	bf 10 00 00 00       	mov    $0x10,%edi
    7a79:	e8 d2 e7 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7a7e:	48 8d 35 43 fe 02 00 	lea    0x2fe43(%rip),%rsi        # 378c8 <_ZTSN3vkw10ImageViewsE+0x4f8>
    7a85:	48 89 c7             	mov    %rax,%rdi
    7a88:	48 89 c5             	mov    %rax,%rbp
    7a8b:	e8 20 e7 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7a90:	48 8b 15 09 95 03 00 	mov    0x39509(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7a97:	48 8d 35 82 90 03 00 	lea    0x39082(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7a9e:	48 89 ef             	mov    %rbp,%rdi
    7aa1:	e8 5a ef ff ff       	call   6a00 <__cxa_throw@plt>
    7aa6:	eb 84                	jmp    7a2c <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0x62>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    7aa8:	48 8b 3d 11 9d 03 00 	mov    0x39d11(%rip),%rdi        # 417c0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers>
    7aaf:	48 8b 35 1a 9d 03 00 	mov    0x39d1a(%rip),%rsi        # 417d0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers+0x10>
    7ab6:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    7ab9:	48 85 ff             	test   %rdi,%rdi
    7abc:	74 05                	je     7ac3 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0xf9>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7abe:	e8 9d ea ff ff       	call   6560 <_ZdlPvm@plt>
      "VK_LAYER_KHRONOS_validation", "VK_LAYER_MANGOHUD_overlay"};
    7ac3:	48 89 ef             	mov    %rbp,%rdi
    7ac6:	e8 35 e8 ff ff       	call   6300 <__cxa_guard_abort@plt>
    7acb:	48 89 df             	mov    %rbx,%rdi
    7ace:	e8 8d ef ff ff       	call   6a60 <_Unwind_Resume@plt>
        "Failed to find any physical device with Vulkan support.");
    7ad3:	bf 10 00 00 00       	mov    $0x10,%edi
    7ad8:	e8 73 e7 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    throw std::runtime_error(
    7add:	48 8d 35 ac fa 02 00 	lea    0x2faac(%rip),%rsi        # 37590 <_ZTSN3vkw10ImageViewsE+0x1c0>
    7ae4:	48 89 c7             	mov    %rax,%rdi
        "Failed to find any physical device with Vulkan support.");
    7ae7:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    7aea:	e8 c1 e6 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
        "Failed to find any physical device with Vulkan support.");
    7aef:	48 8b 15 aa 94 03 00 	mov    0x394aa(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7af6:	48 8d 35 23 90 03 00 	lea    0x39023(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7afd:	48 89 df             	mov    %rbx,%rdi
    7b00:	e8 fb ee ff ff       	call   6a00 <__cxa_throw@plt>
    7b05:	48 89 c5             	mov    %rax,%rbp
    7b08:	48 89 df             	mov    %rbx,%rdi
    7b0b:	e8 80 e8 ff ff       	call   6390 <__cxa_free_exception@plt>
    7b10:	48 89 ef             	mov    %rbp,%rdi
    7b13:	e8 48 ef ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007b18 <_ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE.cold>:
  Device &operator=(const Device &) = delete;
  Device &operator=(Device &&rhs) {
    _moveDataFrom(std::move(rhs));
    return *this;
  }
  virtual ~Device() { _destroyVkData(); }
    7b18:	48 8d 05 f1 89 03 00 	lea    0x389f1(%rip),%rax        # 40510 <_ZTVN3vkw6DeviceE+0x10>
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    7b1f:	80 7b 30 00          	cmpb   $0x0,0x30(%rbx)
  virtual ~Device() { _destroyVkData(); }
    7b23:	48 89 03             	mov    %rax,(%rbx)
    if (_isOwner) {
    7b26:	74 0d                	je     7b35 <_ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE.cold+0x1d>
      vkh::destroyDevice(_device, _pAllocator);
    7b28:	48 8b 73 28          	mov    0x28(%rbx),%rsi
    7b2c:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    7b30:	e8 4b 62 00 00       	call   dd80 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>
      _isOwner = false;
      if constexpr (enableValidationLayers) {
    7b35:	48 89 ef             	mov    %rbp,%rdi
    7b38:	e8 23 ef ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007b3d <_GLOBAL__sub_I__ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE.cold>:
    7b3d:	48 89 df             	mov    %rbx,%rdi
    7b40:	e8 9b 3f 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    7b45:	48 89 ef             	mov    %rbp,%rdi
    7b48:	e8 13 ef ff ff       	call   6a60 <_Unwind_Resume@plt>
    7b4d:	90                   	nop

0000000000007b4e <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D.cold>:
    7b4e:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
    7b54:	74 0f                	je     7b65 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D.cold+0x17>
    7b56:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    7b5b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    7b60:	e8 fb e9 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7b65:	48 89 df             	mov    %rbx,%rdi
    7b68:	e8 f3 ee ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007b6d <_GLOBAL__sub_I__ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D.cold>:
    7b6d:	48 89 df             	mov    %rbx,%rdi
    7b70:	e8 6b 3f 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    7b75:	48 89 ef             	mov    %rbp,%rdi
    7b78:	e8 e3 ee ff ff       	call   6a60 <_Unwind_Resume@plt>
    7b7d:	90                   	nop

0000000000007b7e <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold>:
    shaderModuleInfo.pNext = nullptr;

    VkShaderModule shaderModule;
    if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
                             &shaderModule) != VK_SUCCESS) {
      throw std::runtime_error("Failed to create shader module.");
    7b7e:	bf 10 00 00 00       	mov    $0x10,%edi
    7b83:	e8 c8 e6 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7b88:	48 8d 35 49 fc 02 00 	lea    0x2fc49(%rip),%rsi        # 377d8 <_ZTSN3vkw10ImageViewsE+0x408>
    7b8f:	48 89 c7             	mov    %rax,%rdi
    7b92:	49 89 c6             	mov    %rax,%r14
    7b95:	e8 16 e6 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7b9a:	48 8b 15 ff 93 03 00 	mov    0x393ff(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7ba1:	48 8d 35 78 8f 03 00 	lea    0x38f78(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7ba8:	4c 89 f7             	mov    %r14,%rdi
    7bab:	e8 50 ee ff ff       	call   6a00 <__cxa_throw@plt>
    file.seekg(0);
    7bb0:	49 89 c5             	mov    %rax,%r13
    7bb3:	eb 1a                	jmp    7bcf <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x51>
	__catch(...)
    7bb5:	e8 26 e6 ff ff       	call   61e0 <__cxa_begin_catch@plt>
    7bba:	e8 e1 ed ff ff       	call   69a0 <__cxa_end_catch@plt>
    7bbf:	e9 35 83 00 00       	jmp    fef9 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x209>
      throw std::runtime_error("Failed to create shader module.");
    7bc4:	4c 89 f7             	mov    %r14,%rdi
    7bc7:	49 89 c5             	mov    %rax,%r13
    7bca:	e8 c1 e7 ff ff       	call   6390 <__cxa_free_exception@plt>
    7bcf:	48 85 ed             	test   %rbp,%rbp
    7bd2:	74 0b                	je     7bdf <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x61>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7bd4:	48 89 de             	mov    %rbx,%rsi
    7bd7:	48 89 ef             	mov    %rbp,%rdi
    7bda:	e8 81 e9 ff ff       	call   6560 <_ZdlPvm@plt>
    }
    return shaderModule;
  }
    7bdf:	4c 89 e7             	mov    %r12,%rdi
    7be2:	e8 19 e5 ff ff       	call   6100 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@plt>
    7be7:	4c 89 ef             	mov    %r13,%rdi
    7bea:	e8 71 ee ff ff       	call   6a60 <_Unwind_Resume@plt>
    size_t bufferSize = static_cast<size_t>(file.tellg());
    7bef:	49 89 c5             	mov    %rax,%r13
    7bf2:	eb eb                	jmp    7bdf <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x61>
      throw std::runtime_error("Failed to open " + shaderPath);
    7bf4:	bf 10 00 00 00       	mov    $0x10,%edi
	: allocator_type(__a), _M_p(__dat) { }
    7bf9:	4c 8d 6c 24 30       	lea    0x30(%rsp),%r13
    7bfe:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
    7c03:	e8 48 e6 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7c08:	4c 89 ef             	mov    %r13,%rdi
    7c0b:	4c 89 74 24 30       	mov    %r14,0x30(%rsp)
    7c10:	48 89 c5             	mov    %rax,%rbp
      { _M_string_length = __length; }
    7c13:	31 c0                	xor    %eax,%eax
    7c15:	c6 44 24 40 00       	movb   $0x0,0x40(%rsp)
    7c1a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    7c1f:	48 8b 43 08          	mov    0x8(%rbx),%rax
    7c23:	48 8d 70 0f          	lea    0xf(%rax),%rsi
    7c27:	e8 f4 ec ff ff       	call   6920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>
	if (this->max_size() - (this->size() - __n1) < __n2)
    7c2c:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    7c33:	ff ff 3f 
    7c36:	48 2b 44 24 38       	sub    0x38(%rsp),%rax
    7c3b:	48 83 f8 0e          	cmp    $0xe,%rax
    7c3f:	0f 86 b7 00 00 00    	jbe    7cfc <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x17e>
	return _M_append(__s, __n);
    7c45:	ba 0f 00 00 00       	mov    $0xf,%edx
    7c4a:	48 8d 35 04 fb 02 00 	lea    0x2fb04(%rip),%rsi        # 37755 <_ZTSN3vkw10ImageViewsE+0x385>
    7c51:	4c 89 ef             	mov    %r13,%rdi
    7c54:	e8 27 e5 ff ff       	call   6180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_string_length; }
    7c59:	48 8b 53 08          	mov    0x8(%rbx),%rdx
      { return _M_dataplus._M_p; }
    7c5d:	48 8b 33             	mov    (%rbx),%rsi
	if (this->max_size() - (this->size() - __n1) < __n2)
    7c60:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    7c67:	ff ff 3f 
    7c6a:	48 2b 44 24 38       	sub    0x38(%rsp),%rax
    7c6f:	48 39 d0             	cmp    %rdx,%rax
    7c72:	0f 82 b8 00 00 00    	jb     7d30 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x1b2>
	return _M_append(__s, __n);
    7c78:	4c 89 ef             	mov    %r13,%rdi
    7c7b:	e8 00 e5 ff ff       	call   6180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
    7c80:	4c 89 ee             	mov    %r13,%rsi
    7c83:	48 89 ef             	mov    %rbp,%rdi
    7c86:	e8 f5 ec ff ff       	call   6980 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
      { return _M_dataplus._M_p; }
    7c8b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
	if (!_M_is_local())
    7c90:	4c 39 f7             	cmp    %r14,%rdi
    7c93:	74 0e                	je     7ca3 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x125>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    7c95:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    7c9a:	48 8d 70 01          	lea    0x1(%rax),%rsi
    7c9e:	e8 bd e8 ff ff       	call   6560 <_ZdlPvm@plt>
    7ca3:	48 8b 15 f6 92 03 00 	mov    0x392f6(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7caa:	48 8d 35 6f 8e 03 00 	lea    0x38e6f(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7cb1:	48 89 ef             	mov    %rbp,%rdi
    7cb4:	e8 47 ed ff ff       	call   6a00 <__cxa_throw@plt>
      }
    7cb9:	4c 89 f7             	mov    %r14,%rdi
    7cbc:	e8 3f ec ff ff       	call   6900 <_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev@plt>
    7cc1:	49 8b 45 e8          	mov    -0x18(%r13),%rax
    7cc5:	48 8b 0d 3c 8e 03 00 	mov    0x38e3c(%rip),%rcx        # 40b08 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    7ccc:	31 d2                	xor    %edx,%edx
    7cce:	4c 89 6c 24 60       	mov    %r13,0x60(%rsp)
    7cd3:	48 89 4c 04 60       	mov    %rcx,0x60(%rsp,%rax,1)
    7cd8:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
    7cdd:	48 8d 05 cc 8b 03 00 	lea    0x38bcc(%rip),%rax        # 408b0 <_ZTVSt9basic_iosIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    7ce4:	4c 89 ff             	mov    %r15,%rdi
    7ce7:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    7cee:	00 
    7cef:	e8 ac e4 ff ff       	call   61a0 <_ZNSt8ios_baseD2Ev@plt>
    7cf4:	48 89 df             	mov    %rbx,%rdi
    7cf7:	e8 64 ed ff ff       	call   6a60 <_Unwind_Resume@plt>
	  __throw_length_error(__N(__s));
    7cfc:	48 8d 3d 5d f5 02 00 	lea    0x2f55d(%rip),%rdi        # 37260 <_IO_stdin_used+0x260>
    7d03:	e8 78 e5 ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
      { return _M_dataplus._M_p; }
    7d08:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    7d0d:	49 89 c5             	mov    %rax,%r13
	if (!_M_is_local())
    7d10:	4c 39 f7             	cmp    %r14,%rdi
    7d13:	74 0e                	je     7d23 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x1a5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    7d15:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    7d1a:	48 8d 70 01          	lea    0x1(%rax),%rsi
    7d1e:	e8 3d e8 ff ff       	call   6560 <_ZdlPvm@plt>
    7d23:	48 89 ef             	mov    %rbp,%rdi
    7d26:	e8 65 e6 ff ff       	call   6390 <__cxa_free_exception@plt>
    7d2b:	e9 af fe ff ff       	jmp    7bdf <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x61>
	  __throw_length_error(__N(__s));
    7d30:	48 8d 3d 29 f5 02 00 	lea    0x2f529(%rip),%rdi        # 37260 <_IO_stdin_used+0x260>
    7d37:	e8 44 e5 ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
    7d3c:	eb ca                	jmp    7d08 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x18a>

0000000000007d3e <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE.cold>:
      { return _M_dataplus._M_p; }
    7d3e:	48 8b bc 24 60 03 00 	mov    0x360(%rsp),%rdi
    7d45:	00 
	if (!_M_is_local())
    7d46:	48 8d 84 24 70 03 00 	lea    0x370(%rsp),%rax
    7d4d:	00 
    7d4e:	48 39 c7             	cmp    %rax,%rdi
    7d51:	74 11                	je     7d64 <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE.cold+0x26>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    7d53:	48 8b 84 24 70 03 00 	mov    0x370(%rsp),%rax
    7d5a:	00 
    7d5b:	48 8d 70 01          	lea    0x1(%rax),%rsi
    7d5f:	e8 fc e7 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7d64:	48 89 df             	mov    %rbx,%rdi
    7d67:	e8 f4 ec ff ff       	call   6a60 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
    7d6c:	48 8b bc 24 60 03 00 	mov    0x360(%rsp),%rdi
    7d73:	00 
	if (!_M_is_local())
    7d74:	4c 39 ff             	cmp    %r15,%rdi
    7d77:	74 11                	je     7d8a <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE.cold+0x4c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    7d79:	48 8b 84 24 70 03 00 	mov    0x370(%rsp),%rax
    7d80:	00 
    7d81:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7d85:	e8 d6 e7 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7d8a:	48 89 df             	mov    %rbx,%rdi
    7d8d:	e8 ce ec ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007d92 <_GLOBAL__sub_I__ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE.cold>:
    7d92:	48 89 df             	mov    %rbx,%rdi
    7d95:	e8 46 3d 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    7d9a:	48 89 ef             	mov    %rbp,%rdi
    7d9d:	e8 be ec ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007da2 <_ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj.cold>:
        (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
            propFlags) {
      return i;
    }
  }
  throw std::runtime_error("Failed to find suitable memory type.");
    7da2:	bf 10 00 00 00       	mov    $0x10,%edi
    7da7:	e8 a4 e4 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7dac:	48 8d 35 6d f2 02 00 	lea    0x2f26d(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    7db3:	48 89 c7             	mov    %rax,%rdi
    7db6:	48 89 c3             	mov    %rax,%rbx
    7db9:	e8 f2 e3 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7dbe:	48 8b 15 db 91 03 00 	mov    0x391db(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7dc5:	48 8d 35 54 8d 03 00 	lea    0x38d54(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7dcc:	48 89 df             	mov    %rbx,%rdi
    7dcf:	e8 2c ec ff ff       	call   6a00 <__cxa_throw@plt>
    7dd4:	48 89 c5             	mov    %rax,%rbp
    7dd7:	48 89 df             	mov    %rbx,%rdi
    7dda:	e8 b1 e5 ff ff       	call   6390 <__cxa_free_exception@plt>
    7ddf:	48 89 ef             	mov    %rbp,%rdi
    7de2:	e8 79 ec ff ff       	call   6a60 <_Unwind_Resume@plt>
    7de7:	90                   	nop

0000000000007de8 <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE.cold>:
  imageInfo.usage = args.usage;
  imageInfo.sharingMode = VK_SHARING_MODE_EXCLUSIVE;
  imageInfo.samples = VK_SAMPLE_COUNT_1_BIT;
  imageInfo.flags = 0;
  if (vkCreateImage(device, &imageInfo, nullptr, &_image) != VK_SUCCESS) {
    throw std::runtime_error("Failed to create image.");
    7de8:	bf 10 00 00 00       	mov    $0x10,%edi
    7ded:	e8 5e e4 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7df2:	48 8d 35 e0 fb 02 00 	lea    0x2fbe0(%rip),%rsi        # 379d9 <_ZSt19piecewise_construct+0x92>
    7df9:	48 89 c7             	mov    %rax,%rdi
    7dfc:	48 89 c3             	mov    %rax,%rbx
    7dff:	e8 ac e3 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7e04:	48 8b 15 95 91 03 00 	mov    0x39195(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7e0b:	48 8d 35 0e 8d 03 00 	lea    0x38d0e(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7e12:	48 89 df             	mov    %rbx,%rdi
    7e15:	e8 e6 eb ff ff       	call   6a00 <__cxa_throw@plt>
  throw std::runtime_error("Failed to find suitable memory type.");
    7e1a:	bf 10 00 00 00       	mov    $0x10,%edi
    7e1f:	e8 2c e4 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7e24:	48 8d 35 f5 f1 02 00 	lea    0x2f1f5(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    7e2b:	48 89 c7             	mov    %rax,%rdi
    7e2e:	48 89 c3             	mov    %rax,%rbx
    7e31:	e8 7a e3 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7e36:	48 8b 15 63 91 03 00 	mov    0x39163(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7e3d:	48 8d 35 dc 8c 03 00 	lea    0x38cdc(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7e44:	48 89 df             	mov    %rbx,%rdi
    7e47:	e8 b4 eb ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to create image.");
    7e4c:	48 89 c5             	mov    %rax,%rbp
    7e4f:	48 89 df             	mov    %rbx,%rdi
    7e52:	e8 39 e5 ff ff       	call   6390 <__cxa_free_exception@plt>
    7e57:	48 89 ef             	mov    %rbp,%rdi
    7e5a:	e8 01 ec ff ff       	call   6a60 <_Unwind_Resume@plt>
  allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
  allocInfo.allocationSize = memoryRequirements.size;
  allocInfo.memoryTypeIndex = _findMemoryType(
      physicalDevice, memoryRequirements.memoryTypeBits, args.propFlags);
  if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory)) {
    throw std::runtime_error("Failed to allocate image memory.");
    7e5f:	bf 10 00 00 00       	mov    $0x10,%edi
    7e64:	e8 e7 e3 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7e69:	48 8d 35 48 fb 02 00 	lea    0x2fb48(%rip),%rsi        # 379b8 <_ZSt19piecewise_construct+0x71>
    7e70:	48 89 c7             	mov    %rax,%rdi
    7e73:	48 89 c3             	mov    %rax,%rbx
    7e76:	e8 35 e3 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7e7b:	48 8b 15 1e 91 03 00 	mov    0x3911e(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7e82:	48 8d 35 97 8c 03 00 	lea    0x38c97(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7e89:	48 89 df             	mov    %rbx,%rdi
    7e8c:	e8 6f eb ff ff       	call   6a00 <__cxa_throw@plt>
  throw std::runtime_error("Failed to find suitable memory type.");
    7e91:	48 89 c5             	mov    %rax,%rbp
    7e94:	48 89 df             	mov    %rbx,%rdi
    7e97:	e8 f4 e4 ff ff       	call   6390 <__cxa_free_exception@plt>
    7e9c:	48 89 ef             	mov    %rbp,%rdi
    7e9f:	e8 bc eb ff ff       	call   6a60 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to allocate image memory.");
    7ea4:	48 89 c5             	mov    %rax,%rbp
    7ea7:	48 89 df             	mov    %rbx,%rdi
    7eaa:	e8 e1 e4 ff ff       	call   6390 <__cxa_free_exception@plt>
    7eaf:	48 89 ef             	mov    %rbp,%rdi
    7eb2:	e8 a9 eb ff ff       	call   6a60 <_Unwind_Resume@plt>
    7eb7:	90                   	nop

0000000000007eb8 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat.cold>:
void SwapchainImageViews::_initialize(VkDevice device, VkSwapchainKHR swapchain,
                                      VkFormat format) {
  uint32_t swapchainImageCount;
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
                              nullptr) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get swapchain images");
    7eb8:	bf 10 00 00 00       	mov    $0x10,%edi
    7ebd:	e8 8e e3 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7ec2:	48 8d 35 df f7 02 00 	lea    0x2f7df(%rip),%rsi        # 376a8 <_ZTSN3vkw10ImageViewsE+0x2d8>
    7ec9:	48 89 c7             	mov    %rax,%rdi
    7ecc:	48 89 c3             	mov    %rax,%rbx
    7ecf:	e8 dc e2 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7ed4:	48 8b 15 c5 90 03 00 	mov    0x390c5(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7edb:	48 8d 35 3e 8c 03 00 	lea    0x38c3e(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7ee2:	48 89 df             	mov    %rbx,%rdi
    7ee5:	e8 16 eb ff ff       	call   6a00 <__cxa_throw@plt>
    7eea:	48 89 c5             	mov    %rax,%rbp
    7eed:	48 89 df             	mov    %rbx,%rdi
    7ef0:	e8 9b e4 ff ff       	call   6390 <__cxa_free_exception@plt>
    7ef5:	48 89 ef             	mov    %rbp,%rdi
    7ef8:	e8 63 eb ff ff       	call   6a60 <_Unwind_Resume@plt>
    7efd:	48 89 c3             	mov    %rax,%rbx
    7f00:	4d 85 e4             	test   %r12,%r12
    7f03:	74 0d                	je     7f12 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat.cold+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7f05:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    7f0a:	4c 89 e7             	mov    %r12,%rdi
    7f0d:	e8 4e e6 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7f12:	48 89 df             	mov    %rbx,%rdi
    7f15:	e8 46 eb ff ff       	call   6a60 <_Unwind_Resume@plt>
  }
  std::vector<VkImage> swapchainImages{swapchainImageCount};
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
                              swapchainImages.data()) != VK_SUCCESS) {
    throw std::runtime_error("Failed to get swapchain images");
    7f1a:	bf 10 00 00 00       	mov    $0x10,%edi
    7f1f:	e8 2c e3 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7f24:	48 8d 35 7d f7 02 00 	lea    0x2f77d(%rip),%rsi        # 376a8 <_ZTSN3vkw10ImageViewsE+0x2d8>
    7f2b:	48 89 c7             	mov    %rax,%rdi
    7f2e:	48 89 c5             	mov    %rax,%rbp
    7f31:	e8 7a e2 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    7f36:	48 8b 15 63 90 03 00 	mov    0x39063(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7f3d:	48 8d 35 dc 8b 03 00 	lea    0x38bdc(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7f44:	48 89 ef             	mov    %rbp,%rdi
    7f47:	e8 b4 ea ff ff       	call   6a00 <__cxa_throw@plt>
    7f4c:	48 89 ef             	mov    %rbp,%rdi
    7f4f:	48 89 c3             	mov    %rax,%rbx
    7f52:	e8 39 e4 ff ff       	call   6390 <__cxa_free_exception@plt>
    7f57:	eb a7                	jmp    7f00 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat.cold+0x48>

0000000000007f59 <_GLOBAL__sub_I__ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj.cold>:
    7f59:	48 89 df             	mov    %rbx,%rdi
    7f5c:	e8 7f 3b 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    7f61:	48 89 ef             	mov    %rbp,%rdi
    7f64:	e8 f7 ea ff ff       	call   6a60 <_Unwind_Resume@plt>
    7f69:	90                   	nop

0000000000007f6a <_ZN4rtvc8Instance11_initializeEv.cold>:
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7f6a:	be 08 00 00 00       	mov    $0x8,%esi
    7f6f:	48 89 ef             	mov    %rbp,%rdi
    7f72:	e8 e9 e5 ff ff       	call   6560 <_ZdlPvm@plt>
    7f77:	48 85 db             	test   %rbx,%rbx
    7f7a:	74 0b                	je     7f87 <_ZN4rtvc8Instance11_initializeEv.cold+0x1d>
    7f7c:	4c 89 f6             	mov    %r14,%rsi
    7f7f:	48 89 df             	mov    %rbx,%rdi
    7f82:	e8 d9 e5 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7f87:	4c 89 e7             	mov    %r12,%rdi
    7f8a:	e8 d1 ea ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007f8f <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv.cold>:
    7f8f:	48 89 df             	mov    %rbx,%rdi
    7f92:	e8 49 3b 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    7f97:	48 89 ef             	mov    %rbp,%rdi
    7f9a:	e8 c1 ea ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000007f9f <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold>:
#include <filesystem>

namespace vkh {

inline const std::string absoluteDirectory =
    std::filesystem::current_path().string();
    7f9f:	48 89 ef             	mov    %rbp,%rdi
    7fa2:	e8 39 3b 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    7fa7:	48 89 df             	mov    %rbx,%rdi
    7faa:	e8 b1 ea ff ff       	call   6a60 <_Unwind_Resume@plt>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    7faf:	48 8b 3d 6a 97 03 00 	mov    0x3976a(%rip),%rdi        # 41720 <_ZN6shader19triangle_index_dataE>
    7fb6:	48 8b 35 73 97 03 00 	mov    0x39773(%rip),%rsi        # 41730 <_ZN6shader19triangle_index_dataE+0x10>
    7fbd:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    7fc0:	48 85 ff             	test   %rdi,%rdi
    7fc3:	74 e2                	je     7fa7 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7fc5:	e8 96 e5 ff ff       	call   6560 <_ZdlPvm@plt>
    7fca:	eb db                	jmp    7fa7 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    7fcc:	48 8b 3d 6d 97 03 00 	mov    0x3976d(%rip),%rdi        # 41740 <_ZN6shader16triangle_indicesE>
    7fd3:	48 8b 35 76 97 03 00 	mov    0x39776(%rip),%rsi        # 41750 <_ZN6shader16triangle_indicesE+0x10>
    7fda:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    7fdd:	48 85 ff             	test   %rdi,%rdi
    7fe0:	75 e3                	jne    7fc5 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x26>
    7fe2:	eb c3                	jmp    7fa7 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x8>

0000000000007fe4 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold>:
  swapchainInfo.minImageCount = minImageCount;

  /* imageFormat and imageColorSpace must match the surfaceFormats.format and
  surfaceFormats.colorSpace members, respectively */
  if (surfaceFormats.empty()) {
    throw std::runtime_error("No surface format available.");
    7fe4:	bf 10 00 00 00       	mov    $0x10,%edi
    7fe9:	e8 62 e2 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    7fee:	48 8d 35 64 0b 03 00 	lea    0x30b64(%rip),%rsi        # 38b59 <_ZL11stbi__bmask+0x3d9>
    7ff5:	48 89 c7             	mov    %rax,%rdi
    7ff8:	48 89 c5             	mov    %rax,%rbp
    7ffb:	e8 b0 e1 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8000:	48 8b 15 99 8f 03 00 	mov    0x38f99(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8007:	48 8d 35 12 8b 03 00 	lea    0x38b12(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    800e:	48 89 ef             	mov    %rbp,%rdi
    8011:	e8 ea e9 ff ff       	call   6a00 <__cxa_throw@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    8016:	48 89 c3             	mov    %rax,%rbx
    8019:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    801e:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    8023:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    8026:	48 85 ff             	test   %rdi,%rdi
    8029:	74 05                	je     8030 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold+0x4c>
    802b:	e8 30 e5 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    8030:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    8035:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    803a:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    803d:	48 85 ff             	test   %rdi,%rdi
    8040:	74 05                	je     8047 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold+0x63>
    8042:	e8 19 e5 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    8047:	48 89 df             	mov    %rbx,%rdi
    804a:	e8 11 ea ff ff       	call   6a60 <_Unwind_Resume@plt>
  if (surfaceCapabilities.supportedTransforms &
      VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR) {
    swapchainInfo.preTransform = VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;
  } else {
    throw std::runtime_error(
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
    804f:	bf 10 00 00 00       	mov    $0x10,%edi
    8054:	e8 f7 e1 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    throw std::runtime_error(
    8059:	48 8d 35 90 0a 03 00 	lea    0x30a90(%rip),%rsi        # 38af0 <_ZL11stbi__bmask+0x370>
    8060:	48 89 c7             	mov    %rax,%rdi
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
    8063:	48 89 c5             	mov    %rax,%rbp
    throw std::runtime_error(
    8066:	e8 45 e1 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
    806b:	48 8b 15 2e 8f 03 00 	mov    0x38f2e(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8072:	48 8d 35 a7 8a 03 00 	lea    0x38aa7(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8079:	48 89 ef             	mov    %rbp,%rdi
    807c:	e8 7f e9 ff ff       	call   6a00 <__cxa_throw@plt>
  if (surfaceCapabilities.supportedCompositeAlpha &
      VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR) {
    swapchainInfo.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
  } else {
    throw std::runtime_error(
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
    8081:	48 89 ef             	mov    %rbp,%rdi
    8084:	48 89 c3             	mov    %rax,%rbx
    8087:	e8 04 e3 ff ff       	call   6390 <__cxa_free_exception@plt>
    808c:	eb 8b                	jmp    8019 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold+0x35>
    808e:	eb f1                	jmp    8081 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold+0x9d>
    8090:	bf 10 00 00 00       	mov    $0x10,%edi
    8095:	e8 b6 e1 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    throw std::runtime_error(
    809a:	48 8d 35 87 0a 03 00 	lea    0x30a87(%rip),%rsi        # 38b28 <_ZL11stbi__bmask+0x3a8>
    80a1:	48 89 c7             	mov    %rax,%rdi
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
    80a4:	48 89 c5             	mov    %rax,%rbp
    throw std::runtime_error(
    80a7:	e8 04 e1 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
    80ac:	48 8b 15 ed 8e 03 00 	mov    0x38eed(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    80b3:	48 8d 35 66 8a 03 00 	lea    0x38a66(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    80ba:	48 89 ef             	mov    %rbp,%rdi
    80bd:	e8 3e e9 ff ff       	call   6a00 <__cxa_throw@plt>
    80c2:	eb bd                	jmp    8081 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold+0x9d>

00000000000080c4 <_GLOBAL__sub_I__ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold>:
    80c4:	48 89 df             	mov    %rbx,%rdi
    80c7:	e8 14 3a 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    80cc:	48 89 ef             	mov    %rbp,%rdi
    80cf:	e8 8c e9 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000080d4 <_ZN3vkw9Swapchain14_destroyVkDataEv.part.0>:
      _isOwner = true;
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    80d4:	53                   	push   %rbx
    80d5:	48 89 fb             	mov    %rdi,%rbx
    if (_isOwner) {
      vkDestroySwapchainKHR(_device, _swapchain, _pAllocator);
    80d8:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    80dc:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    80e0:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
    80e4:	e8 47 e0 ff ff       	call   6130 <vkDestroySwapchainKHR@plt>
      _isOwner = false;
    80e9:	c6 43 30 00          	movb   $0x0,0x30(%rbx)
      if constexpr (enableValidationLayers) {
        std::cout << "Swapchain destructor" << '\n';
      }
    }
  }
    80ed:	5b                   	pop    %rbx
    80ee:	c3                   	ret
    80ef:	90                   	nop

00000000000080f0 <_ZN3vkw16GraphicsPipeline14_destroyVkDataEv.part.0>:
  void _destroyVkData() {
    80f0:	53                   	push   %rbx
    80f1:	48 89 fb             	mov    %rdi,%rbx
      vkDestroyPipeline(_device, _graphicsPipeline, _pAllocator);
    80f4:	48 8b 57 30          	mov    0x30(%rdi),%rdx
    80f8:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    80fc:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    8100:	e8 eb e4 ff ff       	call   65f0 <vkDestroyPipeline@plt>
      vkDestroyPipelineLayout(_device, _pipelineLayout, _pAllocator);
    8105:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    8109:	48 8b 73 20          	mov    0x20(%rbx),%rsi
    810d:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    8111:	e8 da e5 ff ff       	call   66f0 <vkDestroyPipelineLayout@plt>
      vkDestroyRenderPass(_device, _renderPass, _pAllocator);
    8116:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    811a:	48 8b 73 28          	mov    0x28(%rbx),%rsi
    811e:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    8122:	e8 d9 e3 ff ff       	call   6500 <vkDestroyRenderPass@plt>
      _isOwner = false;
    8127:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
  }
    812b:	5b                   	pop    %rbx
    812c:	c3                   	ret
    812d:	90                   	nop

000000000000812e <_ZN3vkw6Buffer14_destroyVkDataEv.part.0>:
      _isOwner = true;
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    812e:	53                   	push   %rbx
    812f:	48 89 fb             	mov    %rdi,%rbx
    if (_isOwner) {
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
    8132:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    8136:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    813a:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    813e:	e8 1d e1 ff ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    8143:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    8147:	48 8b 73 18          	mov    0x18(%rbx),%rsi
    814b:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    814f:	e8 5c e3 ff ff       	call   64b0 <vkFreeMemory@plt>
      _isOwner = false;
    8154:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
      if constexpr (enableValidationLayers) {
        std::cout << "Buffer destructor" << '\n';
      }
    }
  }
    8158:	5b                   	pop    %rbx
    8159:	c3                   	ret

000000000000815a <_ZN3vkw5Image14_destroyVkDataEv.part.0>:
      _isOwner = true;
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    815a:	53                   	push   %rbx
    815b:	48 89 fb             	mov    %rdi,%rbx
    if (_isOwner) {
      vkDestroyImage(_device, _image, _pImageAllocator);
    815e:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    8162:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    8166:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    816a:	e8 31 df ff ff       	call   60a0 <vkDestroyImage@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    816f:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    8173:	48 8b 73 18          	mov    0x18(%rbx),%rsi
    8177:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    817b:	e8 30 e3 ff ff       	call   64b0 <vkFreeMemory@plt>
      _isOwner = false;
    8180:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
      if constexpr (enableValidationLayers) {
        std::cout << "Image destructor" << '\n';
      }
    }
  }
    8184:	5b                   	pop    %rbx
    8185:	c3                   	ret

0000000000008186 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold>:
    8186:	48 89 ef             	mov    %rbp,%rdi
    8189:	e8 52 39 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
    818e:	48 89 df             	mov    %rbx,%rdi
    8191:	e8 ca e8 ff ff       	call   6a60 <_Unwind_Resume@plt>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    8196:	48 8b 3d a3 95 03 00 	mov    0x395a3(%rip),%rdi        # 41740 <_ZN6shader16triangle_indicesE>
    819d:	48 8b 35 ac 95 03 00 	mov    0x395ac(%rip),%rsi        # 41750 <_ZN6shader16triangle_indicesE+0x10>
    81a4:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    81a7:	48 85 ff             	test   %rdi,%rdi
    81aa:	74 e2                	je     818e <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    81ac:	e8 af e3 ff ff       	call   6560 <_ZdlPvm@plt>
    81b1:	eb db                	jmp    818e <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    81b3:	48 8b 3d 66 95 03 00 	mov    0x39566(%rip),%rdi        # 41720 <_ZN6shader19triangle_index_dataE>
    81ba:	48 8b 35 6f 95 03 00 	mov    0x3956f(%rip),%rsi        # 41730 <_ZN6shader19triangle_index_dataE+0x10>
    81c1:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    81c4:	48 85 ff             	test   %rdi,%rdi
    81c7:	75 e3                	jne    81ac <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x26>
    81c9:	eb c3                	jmp    818e <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x8>
    81cb:	90                   	nop

00000000000081cc <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold>:
#include "image_view.hpp"
#include "swapchain.hpp"

namespace rtvc {

class Framebuffers : public vkw::Framebuffers {
    81cc:	48 8d 05 ad 86 03 00 	lea    0x386ad(%rip),%rax        # 40880 <_ZTVN4rtvc12FramebuffersE+0x10>
    81d3:	4c 89 e7             	mov    %r12,%rdi
    81d6:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
    81dd:	00 
    81de:	e8 1d 2e 00 00       	call   b000 <_ZN3vkw12FramebuffersD1Ev>
    81e3:	48 89 df             	mov    %rbx,%rdi
    81e6:	e8 75 e8 ff ff       	call   6a60 <_Unwind_Resume@plt>

private:
  void _initialize(VkDevice device, VkImage image, VkFormat format);
};

class SwapchainImageViews : public vkw::ImageViews {
    81eb:	4c 89 e7             	mov    %r12,%rdi
    81ee:	4c 89 b4 24 90 00 00 	mov    %r14,0x90(%rsp)
    81f5:	00 
    81f6:	e8 85 2d 00 00       	call   af80 <_ZN3vkw10ImageViewsD1Ev>
    81fb:	48 89 df             	mov    %rbx,%rdi
    81fe:	e8 5d e8 ff ff       	call   6a60 <_Unwind_Resume@plt>
    8203:	4c 89 e7             	mov    %r12,%rdi
    8206:	e8 75 2d 00 00       	call   af80 <_ZN3vkw10ImageViewsD1Ev>
    820b:	48 89 df             	mov    %rbx,%rdi
    820e:	e8 4d e8 ff ff       	call   6a60 <_Unwind_Resume@plt>
  virtual ~Swapchain() { _destroyVkData(); }
    8213:	48 8d 05 96 83 03 00 	lea    0x38396(%rip),%rax        # 405b0 <_ZTVN3vkw9SwapchainE+0x10>
    if (_isOwner) {
    821a:	80 bc 24 c0 00 00 00 	cmpb   $0x0,0xc0(%rsp)
    8221:	00 
  virtual ~Swapchain() { _destroyVkData(); }
    8222:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
    8229:	00 
    if (_isOwner) {
    822a:	74 08                	je     8234 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x68>
    822c:	4c 89 e7             	mov    %r12,%rdi
    822f:	e8 a0 fe ff ff       	call   80d4 <_ZN3vkw9Swapchain14_destroyVkDataEv.part.0>
    8234:	48 89 df             	mov    %rbx,%rdi
    8237:	e8 24 e8 ff ff       	call   6a60 <_Unwind_Resume@plt>
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    823c:	48 8d 05 cd 83 03 00 	lea    0x383cd(%rip),%rax        # 40610 <_ZTVN3vkw16GraphicsPipelineE+0x10>
    if (_isOwner) {
    8243:	80 bc 24 c8 00 00 00 	cmpb   $0x0,0xc8(%rsp)
    824a:	00 
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    824b:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
    8252:	00 
    if (_isOwner) {
    8253:	74 08                	je     825d <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x91>
    8255:	4c 89 e7             	mov    %r12,%rdi
    8258:	e8 93 fe ff ff       	call   80f0 <_ZN3vkw16GraphicsPipeline14_destroyVkDataEv.part.0>
      { return _M_dataplus._M_p; }
    825d:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
    8262:	4c 39 f7             	cmp    %r14,%rdi
    8265:	74 0e                	je     8275 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0xa9>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    8267:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    826c:	48 8d 70 01          	lea    0x1(%rax),%rsi
    8270:	e8 eb e2 ff ff       	call   6560 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
    8275:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
    827a:	48 39 ef             	cmp    %rbp,%rdi
    827d:	74 0e                	je     828d <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0xc1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    827f:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    8284:	48 8d 70 01          	lea    0x1(%rax),%rsi
    8288:	e8 d3 e2 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    828d:	48 89 df             	mov    %rbx,%rdi
    8290:	e8 cb e7 ff ff       	call   6a60 <_Unwind_Resume@plt>
  virtual ~Swapchain() { _destroyVkData(); }
    8295:	48 8d 05 14 83 03 00 	lea    0x38314(%rip),%rax        # 405b0 <_ZTVN3vkw9SwapchainE+0x10>
    if (_isOwner) {
    829c:	80 bc 24 c0 00 00 00 	cmpb   $0x0,0xc0(%rsp)
    82a3:	00 
  virtual ~Swapchain() { _destroyVkData(); }
    82a4:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
    82ab:	00 
    if (_isOwner) {
    82ac:	74 08                	je     82b6 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0xea>
    82ae:	4c 89 e7             	mov    %r12,%rdi
    82b1:	e8 1e fe ff ff       	call   80d4 <_ZN3vkw9Swapchain14_destroyVkDataEv.part.0>
    82b6:	48 89 df             	mov    %rbx,%rdi
    82b9:	e8 a2 e7 ff ff       	call   6a60 <_Unwind_Resume@plt>
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    82be:	48 8d 05 4b 83 03 00 	lea    0x3834b(%rip),%rax        # 40610 <_ZTVN3vkw16GraphicsPipelineE+0x10>
    if (_isOwner) {
    82c5:	80 bc 24 c8 00 00 00 	cmpb   $0x0,0xc8(%rsp)
    82cc:	00 
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    82cd:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
    82d4:	00 
    if (_isOwner) {
    82d5:	74 86                	je     825d <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x91>
    82d7:	4c 89 e7             	mov    %r12,%rdi
    82da:	e8 11 fe ff ff       	call   80f0 <_ZN3vkw16GraphicsPipeline14_destroyVkDataEv.part.0>
    82df:	e9 79 ff ff ff       	jmp    825d <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x91>
public:
  using vkw::ImageViews::ImageViews;

  SwapchainImageViews(const Device &device, const Swapchain &swapchain) {
    _initialize(device.ref(), swapchain.ref(), swapchain.format());
  }
    82e4:	4c 89 e7             	mov    %r12,%rdi
    82e7:	e8 94 2c 00 00       	call   af80 <_ZN3vkw10ImageViewsD1Ev>
    82ec:	48 89 df             	mov    %rbx,%rdi
    82ef:	e8 6c e7 ff ff       	call   6a60 <_Unwind_Resume@plt>
    82f4:	4c 89 e7             	mov    %r12,%rdi
    82f7:	e8 04 2d 00 00       	call   b000 <_ZN3vkw12FramebuffersD1Ev>
    82fc:	48 89 df             	mov    %rbx,%rdi
    82ff:	e8 5c e7 ff ff       	call   6a60 <_Unwind_Resume@plt>
               const SwapchainImageViews &swapchainImageViews,
               const GraphicsPipeline &graphicsPipeline,
               const Swapchain &swapchain) {
    _initialize(device.ref(), swapchainImageViews.ref(),
                graphicsPipeline.renderPass(), swapchain.extent());
  }
    8304:	4c 89 e7             	mov    %r12,%rdi
    8307:	e8 f4 2c 00 00       	call   b000 <_ZN3vkw12FramebuffersD1Ev>
    830c:	48 89 df             	mov    %rbx,%rdi
    830f:	e8 4c e7 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000008314 <_ZN4rtvc9VulkanApp14findMemoryTypeEjj.cold>:
        (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
            propFlags) {
      return i;
    }
  }
  throw std::runtime_error("Failed to find suitable memory type.");
    8314:	bf 10 00 00 00       	mov    $0x10,%edi
    8319:	e8 32 df ff ff       	call   6250 <__cxa_allocate_exception@plt>
    831e:	48 8d 35 fb ec 02 00 	lea    0x2ecfb(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    8325:	48 89 c7             	mov    %rax,%rdi
    8328:	48 89 c3             	mov    %rax,%rbx
    832b:	e8 80 de ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8330:	48 8b 15 69 8c 03 00 	mov    0x38c69(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8337:	48 8d 35 e2 87 03 00 	lea    0x387e2(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    833e:	48 89 df             	mov    %rbx,%rdi
    8341:	e8 ba e6 ff ff       	call   6a00 <__cxa_throw@plt>
    8346:	48 89 c5             	mov    %rax,%rbp
    8349:	48 89 df             	mov    %rbx,%rdi
    834c:	e8 3f e0 ff ff       	call   6390 <__cxa_free_exception@plt>
    8351:	48 89 ef             	mov    %rbp,%rdi
    8354:	e8 07 e7 ff ff       	call   6a60 <_Unwind_Resume@plt>
    8359:	90                   	nop

000000000000835a <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold>:
    }
  }

  void endBuffer(VkCommandBuffer commandBuffer) {
    if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
      throw std::runtime_error("Failed to end command buffer.");
    835a:	bf 10 00 00 00       	mov    $0x10,%edi
    835f:	e8 ec de ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8364:	48 8d 35 55 f1 02 00 	lea    0x2f155(%rip),%rsi        # 374c0 <_ZTSN3vkw10ImageViewsE+0xf0>
    836b:	48 89 c7             	mov    %rax,%rdi
    836e:	48 89 c5             	mov    %rax,%rbp
    8371:	e8 3a de ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8376:	48 8b 15 23 8c 03 00 	mov    0x38c23(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    837d:	48 8d 35 9c 87 03 00 	lea    0x3879c(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8384:	48 89 ef             	mov    %rbp,%rdi
    8387:	e8 74 e6 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to begin command buffer.");
    838c:	bf 10 00 00 00       	mov    $0x10,%edi
    8391:	e8 ba de ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8396:	48 8d 35 03 f1 02 00 	lea    0x2f103(%rip),%rsi        # 374a0 <_ZTSN3vkw10ImageViewsE+0xd0>
    839d:	48 89 c7             	mov    %rax,%rdi
    83a0:	48 89 c5             	mov    %rax,%rbp
    83a3:	e8 08 de ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    83a8:	48 8b 15 f1 8b 03 00 	mov    0x38bf1(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    83af:	48 8d 35 6a 87 03 00 	lea    0x3876a(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    83b6:	48 89 ef             	mov    %rbp,%rdi
    83b9:	e8 42 e6 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to allocate command buffers.");
    83be:	bf 10 00 00 00       	mov    $0x10,%edi
    83c3:	e8 88 de ff ff       	call   6250 <__cxa_allocate_exception@plt>
    83c8:	48 8d 35 a9 f0 02 00 	lea    0x2f0a9(%rip),%rsi        # 37478 <_ZTSN3vkw10ImageViewsE+0xa8>
    83cf:	48 89 c7             	mov    %rax,%rdi
    83d2:	48 89 c5             	mov    %rax,%rbp
    83d5:	e8 d6 dd ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    83da:	48 8b 15 bf 8b 03 00 	mov    0x38bbf(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    83e1:	48 8d 35 38 87 03 00 	lea    0x38738(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    83e8:	48 89 ef             	mov    %rbp,%rdi
    83eb:	e8 10 e6 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to end command buffer.");
    83f0:	48 89 ef             	mov    %rbp,%rdi
    83f3:	48 89 c3             	mov    %rax,%rbx
    83f6:	e8 95 df ff ff       	call   6390 <__cxa_free_exception@plt>
  virtual ~Buffer() { _destroyVkData(); }
    83fb:	48 8d 05 2e 82 03 00 	lea    0x3822e(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
    8402:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
  virtual ~Buffer() { _destroyVkData(); }
    8408:	49 89 04 24          	mov    %rax,(%r12)
    if (_isOwner) {
    840c:	74 08                	je     8416 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0xbc>
    840e:	4c 89 e7             	mov    %r12,%rdi
    8411:	e8 18 fd ff ff       	call   812e <_ZN3vkw6Buffer14_destroyVkDataEv.part.0>
  virtual ~Buffer() { _destroyVkData(); }
    8416:	48 8d 05 13 82 03 00 	lea    0x38213(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
    841d:	80 bc 24 d8 00 00 00 	cmpb   $0x0,0xd8(%rsp)
    8424:	00 
  virtual ~Buffer() { _destroyVkData(); }
    8425:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
    842c:	00 
    if (_isOwner) {
    842d:	74 0d                	je     843c <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0xe2>
    842f:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
    8436:	00 
    8437:	e8 f2 fc ff ff       	call   812e <_ZN3vkw6Buffer14_destroyVkDataEv.part.0>
    843c:	48 89 df             	mov    %rbx,%rdi
    843f:	e8 1c e6 ff ff       	call   6a60 <_Unwind_Resume@plt>
    8444:	eb aa                	jmp    83f0 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x96>
  virtual ~Buffer() { _destroyVkData(); }
    8446:	48 89 c3             	mov    %rax,%rbx
    8449:	eb b0                	jmp    83fb <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0xa1>
    844b:	eb a3                	jmp    83f0 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x96>
          (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
              propFlags) {
        return i;
      }
    }
    throw std::runtime_error("Failed to find suitable memory type.");
    844d:	bf 10 00 00 00       	mov    $0x10,%edi
    8452:	e8 f9 dd ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8457:	48 8d 35 c2 eb 02 00 	lea    0x2ebc2(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    845e:	48 89 c7             	mov    %rax,%rdi
    8461:	48 89 c5             	mov    %rax,%rbp
    8464:	e8 47 dd ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8469:	48 8b 15 30 8b 03 00 	mov    0x38b30(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8470:	48 8d 35 a9 86 03 00 	lea    0x386a9(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8477:	48 89 ef             	mov    %rbp,%rdi
    847a:	e8 81 e5 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed creating buffer.");
    847f:	bf 10 00 00 00       	mov    $0x10,%edi
    8484:	e8 c7 dd ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8489:	48 8d 35 74 eb 02 00 	lea    0x2eb74(%rip),%rsi        # 37004 <_IO_stdin_used+0x4>
    8490:	48 89 c7             	mov    %rax,%rdi
    8493:	48 89 c5             	mov    %rax,%rbp
    8496:	e8 15 dd ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    849b:	48 8b 15 fe 8a 03 00 	mov    0x38afe(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    84a2:	48 8d 35 77 86 03 00 	lea    0x38677(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    84a9:	48 89 ef             	mov    %rbp,%rdi
    84ac:	e8 4f e5 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    84b1:	bf 10 00 00 00       	mov    $0x10,%edi
    84b6:	e8 95 dd ff ff       	call   6250 <__cxa_allocate_exception@plt>
    84bb:	48 8d 35 86 eb 02 00 	lea    0x2eb86(%rip),%rsi        # 37048 <_IO_stdin_used+0x48>
    84c2:	48 89 c7             	mov    %rax,%rdi
    84c5:	48 89 c5             	mov    %rax,%rbp
    84c8:	e8 e3 dc ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    84cd:	48 8b 15 cc 8a 03 00 	mov    0x38acc(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    84d4:	48 8d 35 45 86 03 00 	lea    0x38645(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    84db:	48 89 ef             	mov    %rbp,%rdi
    84de:	e8 1d e5 ff ff       	call   6a00 <__cxa_throw@plt>
    84e3:	48 89 ef             	mov    %rbp,%rdi
    84e6:	48 89 c3             	mov    %rax,%rbx
    84e9:	e8 a2 de ff ff       	call   6390 <__cxa_free_exception@plt>
    84ee:	e9 23 ff ff ff       	jmp    8416 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0xbc>
    84f3:	eb ee                	jmp    84e3 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x189>
  virtual ~Buffer() { _destroyVkData(); }
    84f5:	48 89 c3             	mov    %rax,%rbx
    84f8:	e9 19 ff ff ff       	jmp    8416 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0xbc>
    84fd:	eb e4                	jmp    84e3 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x189>
    throw std::runtime_error("Failed to find suitable memory type.");
    84ff:	bf 10 00 00 00       	mov    $0x10,%edi
    8504:	e8 47 dd ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8509:	48 8d 35 10 eb 02 00 	lea    0x2eb10(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    8510:	48 89 c7             	mov    %rax,%rdi
    8513:	48 89 c3             	mov    %rax,%rbx
    8516:	e8 95 dc ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    851b:	48 8b 15 7e 8a 03 00 	mov    0x38a7e(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8522:	48 8d 35 f7 85 03 00 	lea    0x385f7(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8529:	48 89 df             	mov    %rbx,%rdi
    852c:	e8 cf e4 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed creating buffer.");
    8531:	bf 10 00 00 00       	mov    $0x10,%edi
    8536:	e8 15 dd ff ff       	call   6250 <__cxa_allocate_exception@plt>
    853b:	48 8d 35 c2 ea 02 00 	lea    0x2eac2(%rip),%rsi        # 37004 <_IO_stdin_used+0x4>
    8542:	48 89 c7             	mov    %rax,%rdi
    8545:	48 89 c3             	mov    %rax,%rbx
    8548:	e8 63 dc ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    854d:	48 8b 15 4c 8a 03 00 	mov    0x38a4c(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8554:	48 8d 35 c5 85 03 00 	lea    0x385c5(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    855b:	48 89 df             	mov    %rbx,%rdi
    855e:	e8 9d e4 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    8563:	bf 10 00 00 00       	mov    $0x10,%edi
    8568:	e8 e3 dc ff ff       	call   6250 <__cxa_allocate_exception@plt>
    856d:	48 8d 35 d4 ea 02 00 	lea    0x2ead4(%rip),%rsi        # 37048 <_IO_stdin_used+0x48>
    8574:	48 89 c7             	mov    %rax,%rdi
    8577:	48 89 c3             	mov    %rax,%rbx
    857a:	e8 31 dc ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    857f:	48 8b 15 1a 8a 03 00 	mov    0x38a1a(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8586:	48 8d 35 93 85 03 00 	lea    0x38593(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    858d:	48 89 df             	mov    %rbx,%rdi
    8590:	e8 6b e4 ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to find suitable memory type.");
    8595:	48 89 c5             	mov    %rax,%rbp
    8598:	48 89 df             	mov    %rbx,%rdi
    859b:	e8 f0 dd ff ff       	call   6390 <__cxa_free_exception@plt>
    85a0:	48 89 ef             	mov    %rbp,%rdi
    85a3:	e8 b8 e4 ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed creating buffer.");
    85a8:	48 89 c5             	mov    %rax,%rbp
    85ab:	48 89 df             	mov    %rbx,%rdi
    85ae:	e8 dd dd ff ff       	call   6390 <__cxa_free_exception@plt>
    85b3:	48 89 ef             	mov    %rbp,%rdi
    85b6:	e8 a5 e4 ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    85bb:	48 89 c5             	mov    %rax,%rbp
    85be:	48 89 df             	mov    %rbx,%rdi
    85c1:	e8 ca dd ff ff       	call   6390 <__cxa_free_exception@plt>
    85c6:	48 89 ef             	mov    %rbp,%rdi
    85c9:	e8 92 e4 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000085ce <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold>:
    85ce:	bf 10 00 00 00       	mov    $0x10,%edi
    85d3:	e8 78 dc ff ff       	call   6250 <__cxa_allocate_exception@plt>
    85d8:	48 8d 35 e1 ee 02 00 	lea    0x2eee1(%rip),%rsi        # 374c0 <_ZTSN3vkw10ImageViewsE+0xf0>
    85df:	48 89 c7             	mov    %rax,%rdi
    85e2:	48 89 c5             	mov    %rax,%rbp
    85e5:	e8 c6 db ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    85ea:	48 8b 15 af 89 03 00 	mov    0x389af(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    85f1:	48 8d 35 28 85 03 00 	lea    0x38528(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    85f8:	48 89 ef             	mov    %rbp,%rdi
    85fb:	e8 00 e4 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to begin command buffer.");
    8600:	bf 10 00 00 00       	mov    $0x10,%edi
    8605:	e8 46 dc ff ff       	call   6250 <__cxa_allocate_exception@plt>
    860a:	48 8d 35 8f ee 02 00 	lea    0x2ee8f(%rip),%rsi        # 374a0 <_ZTSN3vkw10ImageViewsE+0xd0>
    8611:	48 89 c7             	mov    %rax,%rdi
    8614:	48 89 c5             	mov    %rax,%rbp
    8617:	e8 94 db ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    861c:	48 8b 15 7d 89 03 00 	mov    0x3897d(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8623:	48 8d 35 f6 84 03 00 	lea    0x384f6(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    862a:	48 89 ef             	mov    %rbp,%rdi
    862d:	e8 ce e3 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to allocate command buffers.");
    8632:	bf 10 00 00 00       	mov    $0x10,%edi
    8637:	e8 14 dc ff ff       	call   6250 <__cxa_allocate_exception@plt>
    863c:	48 8d 35 35 ee 02 00 	lea    0x2ee35(%rip),%rsi        # 37478 <_ZTSN3vkw10ImageViewsE+0xa8>
    8643:	48 89 c7             	mov    %rax,%rdi
    8646:	48 89 c5             	mov    %rax,%rbp
    8649:	e8 62 db ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    864e:	48 8b 15 4b 89 03 00 	mov    0x3894b(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8655:	48 8d 35 c4 84 03 00 	lea    0x384c4(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    865c:	48 89 ef             	mov    %rbp,%rdi
    865f:	e8 9c e3 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to end command buffer.");
    8664:	48 89 ef             	mov    %rbp,%rdi
    8667:	48 89 c3             	mov    %rax,%rbx
    866a:	e8 21 dd ff ff       	call   6390 <__cxa_free_exception@plt>
  virtual ~Buffer() { _destroyVkData(); }
    866f:	48 8d 05 ba 7f 03 00 	lea    0x37fba(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
    8676:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
  virtual ~Buffer() { _destroyVkData(); }
    867c:	49 89 04 24          	mov    %rax,(%r12)
    if (_isOwner) {
    8680:	74 08                	je     868a <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0xbc>
    8682:	4c 89 e7             	mov    %r12,%rdi
    8685:	e8 a4 fa ff ff       	call   812e <_ZN3vkw6Buffer14_destroyVkDataEv.part.0>
  virtual ~Buffer() { _destroyVkData(); }
    868a:	48 8d 05 9f 7f 03 00 	lea    0x37f9f(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
    8691:	80 bc 24 d8 00 00 00 	cmpb   $0x0,0xd8(%rsp)
    8698:	00 
  virtual ~Buffer() { _destroyVkData(); }
    8699:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
    86a0:	00 
    if (_isOwner) {
    86a1:	74 0d                	je     86b0 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0xe2>
    86a3:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
    86aa:	00 
    86ab:	e8 7e fa ff ff       	call   812e <_ZN3vkw6Buffer14_destroyVkDataEv.part.0>
    86b0:	48 89 df             	mov    %rbx,%rdi
    86b3:	e8 a8 e3 ff ff       	call   6a60 <_Unwind_Resume@plt>
    86b8:	eb aa                	jmp    8664 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x96>
  virtual ~Buffer() { _destroyVkData(); }
    86ba:	48 89 c3             	mov    %rax,%rbx
    86bd:	eb b0                	jmp    866f <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0xa1>
    86bf:	eb a3                	jmp    8664 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x96>
    throw std::runtime_error("Failed to find suitable memory type.");
    86c1:	bf 10 00 00 00       	mov    $0x10,%edi
    86c6:	e8 85 db ff ff       	call   6250 <__cxa_allocate_exception@plt>
    86cb:	48 8d 35 4e e9 02 00 	lea    0x2e94e(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    86d2:	48 89 c7             	mov    %rax,%rdi
    86d5:	48 89 c5             	mov    %rax,%rbp
    86d8:	e8 d3 da ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    86dd:	48 8b 15 bc 88 03 00 	mov    0x388bc(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    86e4:	48 8d 35 35 84 03 00 	lea    0x38435(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    86eb:	48 89 ef             	mov    %rbp,%rdi
    86ee:	e8 0d e3 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed creating buffer.");
    86f3:	bf 10 00 00 00       	mov    $0x10,%edi
    86f8:	e8 53 db ff ff       	call   6250 <__cxa_allocate_exception@plt>
    86fd:	48 8d 35 00 e9 02 00 	lea    0x2e900(%rip),%rsi        # 37004 <_IO_stdin_used+0x4>
    8704:	48 89 c7             	mov    %rax,%rdi
    8707:	48 89 c5             	mov    %rax,%rbp
    870a:	e8 a1 da ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    870f:	48 8b 15 8a 88 03 00 	mov    0x3888a(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8716:	48 8d 35 03 84 03 00 	lea    0x38403(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    871d:	48 89 ef             	mov    %rbp,%rdi
    8720:	e8 db e2 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    8725:	bf 10 00 00 00       	mov    $0x10,%edi
    872a:	e8 21 db ff ff       	call   6250 <__cxa_allocate_exception@plt>
    872f:	48 8d 35 12 e9 02 00 	lea    0x2e912(%rip),%rsi        # 37048 <_IO_stdin_used+0x48>
    8736:	48 89 c7             	mov    %rax,%rdi
    8739:	48 89 c5             	mov    %rax,%rbp
    873c:	e8 6f da ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8741:	48 8b 15 58 88 03 00 	mov    0x38858(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8748:	48 8d 35 d1 83 03 00 	lea    0x383d1(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    874f:	48 89 ef             	mov    %rbp,%rdi
    8752:	e8 a9 e2 ff ff       	call   6a00 <__cxa_throw@plt>
    8757:	48 89 ef             	mov    %rbp,%rdi
    875a:	48 89 c3             	mov    %rax,%rbx
    875d:	e8 2e dc ff ff       	call   6390 <__cxa_free_exception@plt>
    8762:	e9 23 ff ff ff       	jmp    868a <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0xbc>
    8767:	eb ee                	jmp    8757 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x189>
  virtual ~Buffer() { _destroyVkData(); }
    8769:	48 89 c3             	mov    %rax,%rbx
    876c:	e9 19 ff ff ff       	jmp    868a <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0xbc>
    8771:	eb e4                	jmp    8757 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x189>
    throw std::runtime_error("Failed to find suitable memory type.");
    8773:	bf 10 00 00 00       	mov    $0x10,%edi
    8778:	e8 d3 da ff ff       	call   6250 <__cxa_allocate_exception@plt>
    877d:	48 8d 35 9c e8 02 00 	lea    0x2e89c(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    8784:	48 89 c7             	mov    %rax,%rdi
    8787:	48 89 c3             	mov    %rax,%rbx
    878a:	e8 21 da ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    878f:	48 8b 15 0a 88 03 00 	mov    0x3880a(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8796:	48 8d 35 83 83 03 00 	lea    0x38383(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    879d:	48 89 df             	mov    %rbx,%rdi
    87a0:	e8 5b e2 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed creating buffer.");
    87a5:	bf 10 00 00 00       	mov    $0x10,%edi
    87aa:	e8 a1 da ff ff       	call   6250 <__cxa_allocate_exception@plt>
    87af:	48 8d 35 4e e8 02 00 	lea    0x2e84e(%rip),%rsi        # 37004 <_IO_stdin_used+0x4>
    87b6:	48 89 c7             	mov    %rax,%rdi
    87b9:	48 89 c3             	mov    %rax,%rbx
    87bc:	e8 ef d9 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    87c1:	48 8b 15 d8 87 03 00 	mov    0x387d8(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    87c8:	48 8d 35 51 83 03 00 	lea    0x38351(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    87cf:	48 89 df             	mov    %rbx,%rdi
    87d2:	e8 29 e2 ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    87d7:	bf 10 00 00 00       	mov    $0x10,%edi
    87dc:	e8 6f da ff ff       	call   6250 <__cxa_allocate_exception@plt>
    87e1:	48 8d 35 60 e8 02 00 	lea    0x2e860(%rip),%rsi        # 37048 <_IO_stdin_used+0x48>
    87e8:	48 89 c7             	mov    %rax,%rdi
    87eb:	48 89 c3             	mov    %rax,%rbx
    87ee:	e8 bd d9 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    87f3:	48 8b 15 a6 87 03 00 	mov    0x387a6(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    87fa:	48 8d 35 1f 83 03 00 	lea    0x3831f(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8801:	48 89 df             	mov    %rbx,%rdi
    8804:	e8 f7 e1 ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to find suitable memory type.");
    8809:	48 89 c5             	mov    %rax,%rbp
    880c:	48 89 df             	mov    %rbx,%rdi
    880f:	e8 7c db ff ff       	call   6390 <__cxa_free_exception@plt>
    8814:	48 89 ef             	mov    %rbp,%rdi
    8817:	e8 44 e2 ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed creating buffer.");
    881c:	48 89 c5             	mov    %rax,%rbp
    881f:	48 89 df             	mov    %rbx,%rdi
    8822:	e8 69 db ff ff       	call   6390 <__cxa_free_exception@plt>
    8827:	48 89 ef             	mov    %rbp,%rdi
    882a:	e8 31 e2 ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    882f:	48 89 c5             	mov    %rax,%rbp
    8832:	48 89 df             	mov    %rbx,%rdi
    8835:	e8 56 db ff ff       	call   6390 <__cxa_free_exception@plt>
    883a:	48 89 ef             	mov    %rbp,%rdi
    883d:	e8 1e e2 ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000008842 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv.cold>:
    8842:	90                   	nop
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    8843:	48 89 c3             	mov    %rax,%rbx
    8846:	49 8b 3c 24          	mov    (%r12),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    884a:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
    884f:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    8852:	48 85 ff             	test   %rdi,%rdi
    8855:	74 05                	je     885c <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv.cold+0x1a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    8857:	e8 04 dd ff ff       	call   6560 <_ZdlPvm@plt>
    885c:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
    8862:	74 0f                	je     8873 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv.cold+0x31>
    8864:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    8869:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    886e:	e8 ed dc ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    8873:	48 89 df             	mov    %rbx,%rdi
    8876:	e8 e5 e1 ff ff       	call   6a60 <_Unwind_Resume@plt>
  DescriptorSets(VkDevice device, VkDescriptorPool pool,
                 const VkDescriptorSetAllocateInfo *pAllocateInfo)
      : _sets{pAllocateInfo->descriptorSetCount}, _device{device}, _pool{pool} {
    if (vkAllocateDescriptorSets(device, pAllocateInfo, _sets.data()) !=
        VK_SUCCESS) {
      throw std::runtime_error("Failed to allocate descriptor sets.");
    887b:	bf 10 00 00 00       	mov    $0x10,%edi
    8880:	e8 cb d9 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8885:	48 8d 35 f4 02 03 00 	lea    0x302f4(%rip),%rsi        # 38b80 <_ZL11stbi__bmask+0x400>
    888c:	48 89 c7             	mov    %rax,%rdi
    888f:	48 89 c5             	mov    %rax,%rbp
    8892:	e8 19 d9 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8897:	48 8b 15 02 87 03 00 	mov    0x38702(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    889e:	48 8d 35 7b 82 03 00 	lea    0x3827b(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    88a5:	48 89 ef             	mov    %rbp,%rdi
    88a8:	e8 53 e1 ff ff       	call   6a00 <__cxa_throw@plt>
    88ad:	48 89 ef             	mov    %rbp,%rdi
    88b0:	48 89 c3             	mov    %rax,%rbx
    88b3:	e8 d8 da ff ff       	call   6390 <__cxa_free_exception@plt>
    88b8:	eb 8c                	jmp    8846 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv.cold+0x4>
    vkUpdateDescriptorSets(device.ref(),
                           static_cast<uint32_t>(writeSets.size()),
                           writeSets.data(), 0, nullptr);
  }
  return sets;
}
    88ba:	4c 89 e7             	mov    %r12,%rdi
    88bd:	e8 0e d9 02 00       	call   361d0 <_ZN3vkw14DescriptorSetsD1Ev>
    88c2:	eb 98                	jmp    885c <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv.cold+0x1a>

00000000000088c4 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_.cold>:
      throw std::runtime_error("Failed to allocate command buffers.");
    88c4:	bf 10 00 00 00       	mov    $0x10,%edi
    88c9:	e8 82 d9 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    88ce:	48 8d 35 a3 eb 02 00 	lea    0x2eba3(%rip),%rsi        # 37478 <_ZTSN3vkw10ImageViewsE+0xa8>
    88d5:	48 89 c7             	mov    %rax,%rdi
    88d8:	48 89 c3             	mov    %rax,%rbx
    88db:	e8 d0 d8 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    88e0:	48 8b 15 b9 86 03 00 	mov    0x386b9(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    88e7:	48 8d 35 32 82 03 00 	lea    0x38232(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    88ee:	48 89 df             	mov    %rbx,%rdi
    88f1:	e8 0a e1 ff ff       	call   6a00 <__cxa_throw@plt>
    barrier.srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;
    barrier.dstAccessMask = VK_ACCESS_SHADER_READ_BIT;
    srcStage = VK_PIPELINE_STAGE_TRANSFER_BIT;
    dstStage = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
  } else {
    throw std::invalid_argument("Unsupported layout transition.");
    88f6:	bf 10 00 00 00       	mov    $0x10,%edi
    88fb:	e8 50 d9 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8900:	48 8d 35 a1 02 03 00 	lea    0x302a1(%rip),%rsi        # 38ba8 <_ZL11stbi__bmask+0x428>
    8907:	48 89 c7             	mov    %rax,%rdi
    890a:	48 89 c3             	mov    %rax,%rbx
    890d:	e8 fe e1 ff ff       	call   6b10 <_ZNSt16invalid_argumentC1EPKc@plt>
    8912:	48 8b 15 8f 86 03 00 	mov    0x3868f(%rip),%rdx        # 40fa8 <_ZNSt16invalid_argumentD1Ev@GLIBCXX_3.4>
    8919:	48 8d 35 c0 81 03 00 	lea    0x381c0(%rip),%rsi        # 40ae0 <_ZTISt16invalid_argument@GLIBCXX_3.4>
    8920:	48 89 df             	mov    %rbx,%rdi
    8923:	e8 d8 e0 ff ff       	call   6a00 <__cxa_throw@plt>
    8928:	48 89 c5             	mov    %rax,%rbp
    892b:	48 89 df             	mov    %rbx,%rdi
    892e:	e8 5d da ff ff       	call   6390 <__cxa_free_exception@plt>
    8933:	48 89 ef             	mov    %rbp,%rdi
    8936:	e8 25 e1 ff ff       	call   6a60 <_Unwind_Resume@plt>
    893b:	48 89 c5             	mov    %rax,%rbp
    893e:	48 89 df             	mov    %rbx,%rdi
    8941:	e8 4a da ff ff       	call   6390 <__cxa_free_exception@plt>
    8946:	48 89 ef             	mov    %rbp,%rdi
    8949:	e8 12 e1 ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed to end command buffer.");
    894e:	bf 10 00 00 00       	mov    $0x10,%edi
    8953:	e8 f8 d8 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8958:	48 8d 35 61 eb 02 00 	lea    0x2eb61(%rip),%rsi        # 374c0 <_ZTSN3vkw10ImageViewsE+0xf0>
    895f:	48 89 c7             	mov    %rax,%rdi
    8962:	48 89 c3             	mov    %rax,%rbx
    8965:	e8 46 d8 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    896a:	48 8b 15 2f 86 03 00 	mov    0x3862f(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8971:	48 8d 35 a8 81 03 00 	lea    0x381a8(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8978:	48 89 df             	mov    %rbx,%rdi
    897b:	e8 80 e0 ff ff       	call   6a00 <__cxa_throw@plt>
    8980:	48 89 c5             	mov    %rax,%rbp
    8983:	48 89 df             	mov    %rbx,%rdi
    8986:	e8 05 da ff ff       	call   6390 <__cxa_free_exception@plt>
    898b:	48 89 ef             	mov    %rbp,%rdi
    898e:	e8 cd e0 ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed to begin command buffer.");
    8993:	bf 10 00 00 00       	mov    $0x10,%edi
    8998:	e8 b3 d8 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    899d:	48 8d 35 fc ea 02 00 	lea    0x2eafc(%rip),%rsi        # 374a0 <_ZTSN3vkw10ImageViewsE+0xd0>
    89a4:	48 89 c7             	mov    %rax,%rdi
    89a7:	48 89 c3             	mov    %rax,%rbx
    89aa:	e8 01 d8 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    89af:	48 8b 15 ea 85 03 00 	mov    0x385ea(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    89b6:	48 8d 35 63 81 03 00 	lea    0x38163(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    89bd:	48 89 df             	mov    %rbx,%rdi
    89c0:	e8 3b e0 ff ff       	call   6a00 <__cxa_throw@plt>
    89c5:	48 89 c5             	mov    %rax,%rbp
    89c8:	48 89 df             	mov    %rbx,%rdi
    89cb:	e8 c0 d9 ff ff       	call   6390 <__cxa_free_exception@plt>
    89d0:	48 89 ef             	mov    %rbp,%rdi
    89d3:	e8 88 e0 ff ff       	call   6a60 <_Unwind_Resume@plt>

00000000000089d8 <_ZN4rtvc9VulkanApp17copyBufferToImageEP10VkBuffer_TP9VkImage_Tjj.cold>:
      throw std::runtime_error("Failed to allocate command buffers.");
    89d8:	bf 10 00 00 00       	mov    $0x10,%edi
    89dd:	e8 6e d8 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    89e2:	48 8d 35 8f ea 02 00 	lea    0x2ea8f(%rip),%rsi        # 37478 <_ZTSN3vkw10ImageViewsE+0xa8>
    89e9:	48 89 c7             	mov    %rax,%rdi
    89ec:	48 89 c3             	mov    %rax,%rbx
    89ef:	e8 bc d7 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    89f4:	48 8b 15 a5 85 03 00 	mov    0x385a5(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    89fb:	48 8d 35 1e 81 03 00 	lea    0x3811e(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8a02:	48 89 df             	mov    %rbx,%rdi
    8a05:	e8 f6 df ff ff       	call   6a00 <__cxa_throw@plt>
    8a0a:	48 89 c5             	mov    %rax,%rbp
    8a0d:	48 89 df             	mov    %rbx,%rdi
    8a10:	e8 7b d9 ff ff       	call   6390 <__cxa_free_exception@plt>
    8a15:	48 89 ef             	mov    %rbp,%rdi
    8a18:	e8 43 e0 ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed to end command buffer.");
    8a1d:	bf 10 00 00 00       	mov    $0x10,%edi
    8a22:	e8 29 d8 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8a27:	48 8d 35 92 ea 02 00 	lea    0x2ea92(%rip),%rsi        # 374c0 <_ZTSN3vkw10ImageViewsE+0xf0>
    8a2e:	48 89 c7             	mov    %rax,%rdi
    8a31:	48 89 c3             	mov    %rax,%rbx
    8a34:	e8 77 d7 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8a39:	48 8b 15 60 85 03 00 	mov    0x38560(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8a40:	48 8d 35 d9 80 03 00 	lea    0x380d9(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8a47:	48 89 df             	mov    %rbx,%rdi
    8a4a:	e8 b1 df ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to begin command buffer.");
    8a4f:	bf 10 00 00 00       	mov    $0x10,%edi
    8a54:	e8 f7 d7 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8a59:	48 8d 35 40 ea 02 00 	lea    0x2ea40(%rip),%rsi        # 374a0 <_ZTSN3vkw10ImageViewsE+0xd0>
    8a60:	48 89 c7             	mov    %rax,%rdi
    8a63:	48 89 c3             	mov    %rax,%rbx
    8a66:	e8 45 d7 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8a6b:	48 8b 15 2e 85 03 00 	mov    0x3852e(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8a72:	48 8d 35 a7 80 03 00 	lea    0x380a7(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8a79:	48 89 df             	mov    %rbx,%rdi
    8a7c:	e8 7f df ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to end command buffer.");
    8a81:	48 89 c5             	mov    %rax,%rbp
    8a84:	48 89 df             	mov    %rbx,%rdi
    8a87:	e8 04 d9 ff ff       	call   6390 <__cxa_free_exception@plt>
    8a8c:	48 89 ef             	mov    %rbp,%rdi
    8a8f:	e8 cc df ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed to begin command buffer.");
    8a94:	48 89 c5             	mov    %rax,%rbp
    8a97:	48 89 df             	mov    %rbx,%rdi
    8a9a:	e8 f1 d8 ff ff       	call   6390 <__cxa_free_exception@plt>
    8a9f:	48 89 ef             	mov    %rbp,%rdi
    8aa2:	e8 b9 df ff ff       	call   6a60 <_Unwind_Resume@plt>
    8aa7:	90                   	nop

0000000000008aa8 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold>:
  virtual ~Image() { _destroyVkData(); }
    8aa8:	48 8d 05 a9 7b 03 00 	lea    0x37ba9(%rip),%rax        # 40658 <_ZTVN3vkw5ImageE+0x10>
    if (_isOwner) {
    8aaf:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
  virtual ~Image() { _destroyVkData(); }
    8ab3:	48 89 03             	mov    %rax,(%rbx)
    if (_isOwner) {
    8ab6:	74 08                	je     8ac0 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x18>
    8ab8:	48 89 df             	mov    %rbx,%rdi
    8abb:	e8 9a f6 ff ff       	call   815a <_ZN3vkw5Image14_destroyVkDataEv.part.0>
  virtual ~Buffer() { _destroyVkData(); }
    8ac0:	48 8d 05 69 7b 03 00 	lea    0x37b69(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
    8ac7:	80 bc 24 d8 00 00 00 	cmpb   $0x0,0xd8(%rsp)
    8ace:	00 
  virtual ~Buffer() { _destroyVkData(); }
    8acf:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
    8ad6:	00 
    if (_isOwner) {
    8ad7:	74 0d                	je     8ae6 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x3e>
    8ad9:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
    8ae0:	00 
    8ae1:	e8 48 f6 ff ff       	call   812e <_ZN3vkw6Buffer14_destroyVkDataEv.part.0>
    8ae6:	48 89 ef             	mov    %rbp,%rdi
    8ae9:	e8 72 df ff ff       	call   6a60 <_Unwind_Resume@plt>
  virtual ~Image() { _destroyVkData(); }
    8aee:	48 8d 05 63 7b 03 00 	lea    0x37b63(%rip),%rax        # 40658 <_ZTVN3vkw5ImageE+0x10>
    if (_isOwner) {
    8af5:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
  virtual ~Image() { _destroyVkData(); }
    8af9:	48 89 03             	mov    %rax,(%rbx)
    if (_isOwner) {
    8afc:	74 c2                	je     8ac0 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x18>
    8afe:	48 89 df             	mov    %rbx,%rdi
    8b01:	e8 54 f6 ff ff       	call   815a <_ZN3vkw5Image14_destroyVkDataEv.part.0>
    8b06:	eb b8                	jmp    8ac0 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x18>
    throw std::runtime_error("Failed to find suitable memory type.");
    8b08:	bf 10 00 00 00       	mov    $0x10,%edi
    8b0d:	e8 3e d7 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8b12:	48 8d 35 07 e5 02 00 	lea    0x2e507(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    8b19:	48 89 c7             	mov    %rax,%rdi
    8b1c:	48 89 c3             	mov    %rax,%rbx
    8b1f:	e8 8c d6 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8b24:	48 8b 15 75 84 03 00 	mov    0x38475(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8b2b:	48 8d 35 ee 7f 03 00 	lea    0x37fee(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8b32:	48 89 df             	mov    %rbx,%rdi
    8b35:	e8 c6 de ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    8b3a:	bf 10 00 00 00       	mov    $0x10,%edi
    8b3f:	e8 0c d7 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8b44:	48 8d 35 fd e4 02 00 	lea    0x2e4fd(%rip),%rsi        # 37048 <_IO_stdin_used+0x48>
    8b4b:	48 89 c7             	mov    %rax,%rdi
    8b4e:	48 89 c3             	mov    %rax,%rbx
    8b51:	e8 5a d6 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8b56:	48 8b 15 43 84 03 00 	mov    0x38443(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8b5d:	48 8d 35 bc 7f 03 00 	lea    0x37fbc(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8b64:	48 89 df             	mov    %rbx,%rdi
    8b67:	e8 94 de ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to find suitable memory type.");
    8b6c:	48 89 c5             	mov    %rax,%rbp
    8b6f:	48 89 df             	mov    %rbx,%rdi
    8b72:	e8 19 d8 ff ff       	call   6390 <__cxa_free_exception@plt>
    8b77:	48 89 ef             	mov    %rbp,%rdi
    8b7a:	e8 e1 de ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    8b7f:	48 89 c5             	mov    %rax,%rbp
    8b82:	48 89 df             	mov    %rbx,%rdi
    8b85:	e8 06 d8 ff ff       	call   6390 <__cxa_free_exception@plt>
    8b8a:	48 89 ef             	mov    %rbp,%rdi
    8b8d:	e8 ce de ff ff       	call   6a60 <_Unwind_Resume@plt>
      throw std::runtime_error("Failed creating buffer.");
    8b92:	bf 10 00 00 00       	mov    $0x10,%edi
    8b97:	e8 b4 d6 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8b9c:	48 8d 35 61 e4 02 00 	lea    0x2e461(%rip),%rsi        # 37004 <_IO_stdin_used+0x4>
    8ba3:	48 89 c7             	mov    %rax,%rdi
    8ba6:	48 89 c3             	mov    %rax,%rbx
    8ba9:	e8 02 d6 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8bae:	48 8b 15 eb 83 03 00 	mov    0x383eb(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8bb5:	48 8d 35 64 7f 03 00 	lea    0x37f64(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8bbc:	48 89 df             	mov    %rbx,%rdi
    8bbf:	e8 3c de ff ff       	call   6a00 <__cxa_throw@plt>
  int imageWidth, imageHeight, imageChannels;
  stbi_uc *pixels = stbi_load(imagePath.c_str(), &imageWidth, &imageHeight,
                              &imageChannels, STBI_rgb_alpha);
  VkDeviceSize imageSize = imageWidth * imageHeight * 4;
  if (!pixels) {
    throw std::runtime_error("Failed to load image.");
    8bc4:	bf 10 00 00 00       	mov    $0x10,%edi
    8bc9:	e8 82 d6 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8bce:	48 8d 35 ab 02 03 00 	lea    0x302ab(%rip),%rsi        # 38e80 <_ZL11stbi__bmask+0x700>
    8bd5:	48 89 c7             	mov    %rax,%rdi
    8bd8:	48 89 c3             	mov    %rax,%rbx
    8bdb:	e8 d0 d5 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8be0:	48 8b 15 b9 83 03 00 	mov    0x383b9(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8be7:	48 8d 35 32 7f 03 00 	lea    0x37f32(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8bee:	48 89 df             	mov    %rbx,%rdi
    8bf1:	e8 0a de ff ff       	call   6a00 <__cxa_throw@plt>
    8bf6:	48 89 c5             	mov    %rax,%rbp
    8bf9:	48 89 df             	mov    %rbx,%rdi
    8bfc:	e8 8f d7 ff ff       	call   6390 <__cxa_free_exception@plt>
    8c01:	48 89 ef             	mov    %rbp,%rdi
    8c04:	e8 57 de ff ff       	call   6a60 <_Unwind_Resume@plt>
    8c09:	48 89 c5             	mov    %rax,%rbp
    8c0c:	48 89 df             	mov    %rbx,%rdi
    8c0f:	e8 7c d7 ff ff       	call   6390 <__cxa_free_exception@plt>
    8c14:	48 89 ef             	mov    %rbp,%rdi
    8c17:	e8 44 de ff ff       	call   6a60 <_Unwind_Resume@plt>

0000000000008c1c <_ZN4rtvc9VulkanApp6renderEv.cold>:
  if (result == VK_SUBOPTIMAL_KHR || result == VK_ERROR_OUT_OF_DATE_KHR ||
      framebufferResized) {
    framebufferResized = false;
    recreateSwapchain();
  } else if (result != VK_SUCCESS) {
    throw std::runtime_error("Failed to present swapchain image.");
    8c1c:	bf 10 00 00 00       	mov    $0x10,%edi
    8c21:	e8 2a d6 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8c26:	48 8d 35 eb ff 02 00 	lea    0x2ffeb(%rip),%rsi        # 38c18 <_ZL11stbi__bmask+0x498>
    8c2d:	48 89 c7             	mov    %rax,%rdi
    8c30:	48 89 c5             	mov    %rax,%rbp
    8c33:	e8 78 d5 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8c38:	48 8b 15 61 83 03 00 	mov    0x38361(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8c3f:	48 8d 35 da 7e 03 00 	lea    0x37eda(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8c46:	48 89 ef             	mov    %rbp,%rdi
    8c49:	e8 b2 dd ff ff       	call   6a00 <__cxa_throw@plt>
    throw std::runtime_error("Failed to acquire swapchain image.");
    8c4e:	bf 10 00 00 00       	mov    $0x10,%edi
    8c53:	e8 f8 d5 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8c58:	48 8d 35 69 ff 02 00 	lea    0x2ff69(%rip),%rsi        # 38bc8 <_ZL11stbi__bmask+0x448>
    8c5f:	48 89 c7             	mov    %rax,%rdi
    8c62:	48 89 c3             	mov    %rax,%rbx
    8c65:	e8 46 d5 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8c6a:	48 8b 15 2f 83 03 00 	mov    0x3832f(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8c71:	48 8d 35 a8 7e 03 00 	lea    0x37ea8(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8c78:	48 89 df             	mov    %rbx,%rdi
    8c7b:	e8 80 dd ff ff       	call   6a00 <__cxa_throw@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    8c80:	48 89 c3             	mov    %rax,%rbx
    8c83:	eb 0b                	jmp    8c90 <_ZN4rtvc9VulkanApp6renderEv.cold+0x74>
    throw std::runtime_error("Failed to present swapchain image.");
    8c85:	48 89 ef             	mov    %rbp,%rdi
    8c88:	48 89 c3             	mov    %rax,%rbx
    8c8b:	e8 00 d7 ff ff       	call   6390 <__cxa_free_exception@plt>
    8c90:	be 08 00 00 00       	mov    $0x8,%esi
    8c95:	4c 89 e7             	mov    %r12,%rdi
    8c98:	e8 c3 d8 ff ff       	call   6560 <_ZdlPvm@plt>
    8c9d:	be 04 00 00 00       	mov    $0x4,%esi
    8ca2:	4c 89 f7             	mov    %r14,%rdi
    8ca5:	e8 b6 d8 ff ff       	call   6560 <_ZdlPvm@plt>
    8caa:	4c 89 ef             	mov    %r13,%rdi
    8cad:	be 08 00 00 00       	mov    $0x8,%esi
    8cb2:	e8 a9 d8 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    8cb7:	48 89 df             	mov    %rbx,%rdi
    8cba:	e8 a1 dd ff ff       	call   6a60 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to acquire swapchain image.");
    8cbf:	48 89 c5             	mov    %rax,%rbp
    8cc2:	48 89 df             	mov    %rbx,%rdi
    8cc5:	e8 c6 d6 ff ff       	call   6390 <__cxa_free_exception@plt>
    8cca:	48 89 ef             	mov    %rbp,%rdi
    8ccd:	e8 8e dd ff ff       	call   6a60 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to submit draw command buffer.");
    8cd2:	bf 10 00 00 00       	mov    $0x10,%edi
    8cd7:	e8 74 d5 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8cdc:	48 8d 35 0d ff 02 00 	lea    0x2ff0d(%rip),%rsi        # 38bf0 <_ZL11stbi__bmask+0x470>
    8ce3:	48 89 c7             	mov    %rax,%rdi
    8ce6:	48 89 c5             	mov    %rax,%rbp
    8ce9:	e8 c2 d4 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8cee:	48 8b 15 ab 82 03 00 	mov    0x382ab(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8cf5:	48 8d 35 24 7e 03 00 	lea    0x37e24(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8cfc:	48 89 ef             	mov    %rbp,%rdi
    8cff:	e8 fc dc ff ff       	call   6a00 <__cxa_throw@plt>
    8d04:	e9 7c ff ff ff       	jmp    8c85 <_ZN4rtvc9VulkanApp6renderEv.cold+0x69>
    8d09:	90                   	nop

0000000000008d0a <_ZN4rtvc9VulkanApp18makeUniformBuffersEv.cold>:
    throw std::runtime_error("Failed to find suitable memory type.");
    8d0a:	bf 10 00 00 00       	mov    $0x10,%edi
    8d0f:	e8 3c d5 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8d14:	48 8d 35 05 e3 02 00 	lea    0x2e305(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    8d1b:	48 89 c7             	mov    %rax,%rdi
    8d1e:	48 89 c5             	mov    %rax,%rbp
    8d21:	e8 8a d4 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8d26:	48 8b 15 73 82 03 00 	mov    0x38273(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8d2d:	48 8d 35 ec 7d 03 00 	lea    0x37dec(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8d34:	48 89 ef             	mov    %rbp,%rdi
    8d37:	e8 c4 dc ff ff       	call   6a00 <__cxa_throw@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    8d3c:	bf 10 00 00 00       	mov    $0x10,%edi
    8d41:	e8 0a d5 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8d46:	48 8d 35 fb e2 02 00 	lea    0x2e2fb(%rip),%rsi        # 37048 <_IO_stdin_used+0x48>
    8d4d:	48 89 c7             	mov    %rax,%rdi
    8d50:	48 89 c5             	mov    %rax,%rbp
    8d53:	e8 58 d4 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8d58:	48 8b 15 41 82 03 00 	mov    0x38241(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8d5f:	48 8d 35 ba 7d 03 00 	lea    0x37dba(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8d66:	48 89 ef             	mov    %rbp,%rdi
    8d69:	e8 92 dc ff ff       	call   6a00 <__cxa_throw@plt>
}
    8d6e:	48 89 c3             	mov    %rax,%rbx
    8d71:	eb 3d                	jmp    8db0 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv.cold+0xa6>
      throw std::runtime_error("Failed creating buffer.");
    8d73:	bf 10 00 00 00       	mov    $0x10,%edi
    8d78:	e8 d3 d4 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    8d7d:	48 8d 35 80 e2 02 00 	lea    0x2e280(%rip),%rsi        # 37004 <_IO_stdin_used+0x4>
    8d84:	48 89 c7             	mov    %rax,%rdi
    8d87:	48 89 c5             	mov    %rax,%rbp
    8d8a:	e8 21 d4 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    8d8f:	48 8b 15 0a 82 03 00 	mov    0x3820a(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8d96:	48 8d 35 83 7d 03 00 	lea    0x37d83(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8d9d:	48 89 ef             	mov    %rbp,%rdi
    8da0:	e8 5b dc ff ff       	call   6a00 <__cxa_throw@plt>
    8da5:	48 89 ef             	mov    %rbp,%rdi
    8da8:	48 89 c3             	mov    %rax,%rbx
    8dab:	e8 e0 d5 ff ff       	call   6390 <__cxa_free_exception@plt>
    8db0:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    8db5:	e8 16 d6 02 00       	call   363d0 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev>
    8dba:	48 89 df             	mov    %rbx,%rdi
    8dbd:	e8 9e dc ff ff       	call   6a60 <_Unwind_Resume@plt>
    8dc2:	eb e1                	jmp    8da5 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv.cold+0x9b>
    8dc4:	eb df                	jmp    8da5 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv.cold+0x9b>

0000000000008dc6 <_ZN4rtvc9VulkanAppC2Ev.cold>:
      { return _M_dataplus._M_p; }
    8dc6:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
	if (!_M_is_local())
    8dca:	48 39 7c 24 18       	cmp    %rdi,0x18(%rsp)
    8dcf:	74 0d                	je     8dde <_ZN4rtvc9VulkanAppC2Ev.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    8dd1:	48 8b 43 70          	mov    0x70(%rbx),%rax
    8dd5:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    8dd9:	e8 82 d7 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    8dde:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    8de2:	48 8b 73 40          	mov    0x40(%rbx),%rsi
    8de6:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    8de9:	48 85 ff             	test   %rdi,%rdi
    8dec:	74 05                	je     8df3 <_ZN4rtvc9VulkanAppC2Ev.cold+0x2d>
    8dee:	e8 6d d7 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    8df3:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    8df7:	48 8b 73 28          	mov    0x28(%rbx),%rsi
    8dfb:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    8dfe:	48 85 ff             	test   %rdi,%rdi
    8e01:	74 05                	je     8e08 <_ZN4rtvc9VulkanAppC2Ev.cold+0x42>
    8e03:	e8 58 d7 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    8e08:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    8e0b:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    8e0f:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    8e12:	48 85 ff             	test   %rdi,%rdi
    8e15:	74 05                	je     8e1c <_ZN4rtvc9VulkanAppC2Ev.cold+0x56>
    8e17:	e8 44 d7 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    8e1c:	48 89 ef             	mov    %rbp,%rdi
    8e1f:	e8 3c dc ff ff       	call   6a60 <_Unwind_Resume@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    8e24:	48 8b ab 00 03 00 00 	mov    0x300(%rbx),%rbp
    8e2b:	4c 8b ab f8 02 00 00 	mov    0x2f8(%rbx),%r13
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
    8e32:	4c 39 ed             	cmp    %r13,%rbp
    8e35:	0f 85 a6 03 00 00    	jne    91e1 <_ZN4rtvc9VulkanAppC2Ev.cold+0x41b>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    8e3b:	48 8b bb f8 02 00 00 	mov    0x2f8(%rbx),%rdi
    8e42:	48 8b b3 08 03 00 00 	mov    0x308(%rbx),%rsi
    8e49:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    8e4c:	48 85 ff             	test   %rdi,%rdi
    8e4f:	74 05                	je     8e56 <_ZN4rtvc9VulkanAppC2Ev.cold+0x90>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    8e51:	e8 0a d7 ff ff       	call   6560 <_ZdlPvm@plt>
      for (size_t i = 0; i < frameCount; ++i) {
        imageAvailableSemaphore[i] = {device};
        renderFinishedSemaphore[i] = {device};
        inFlightFence[i] = {device, VK_FENCE_CREATE_SIGNALED_BIT};
      }
    }
    8e56:	48 8d bb e0 02 00 00 	lea    0x2e0(%rbx),%rdi
    8e5d:	e8 fe d4 02 00       	call   36360 <_ZNSt6vectorIN3vkw9SemaphoreESaIS1_EED1Ev>
    8e62:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    8e67:	4c 89 e5             	mov    %r12,%rbp
    8e6a:	e8 f1 d4 02 00       	call   36360 <_ZNSt6vectorIN3vkw9SemaphoreESaIS1_EED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    8e6f:	48 8b bb b0 02 00 00 	mov    0x2b0(%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    8e76:	48 8b b3 c0 02 00 00 	mov    0x2c0(%rbx),%rsi
    8e7d:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    8e80:	48 85 ff             	test   %rdi,%rdi
    8e83:	74 05                	je     8e8a <_ZN4rtvc9VulkanAppC2Ev.cold+0xc4>
    8e85:	e8 d6 d6 ff ff       	call   6560 <_ZdlPvm@plt>
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    8e8a:	80 bb a8 02 00 00 00 	cmpb   $0x0,0x2a8(%rbx)
    8e91:	74 1a                	je     8ead <_ZN4rtvc9VulkanAppC2Ev.cold+0xe7>
      vkh::destroyCommandPool(_device, _commandPool, _pAllocator);
    8e93:	48 8b 93 a0 02 00 00 	mov    0x2a0(%rbx),%rdx
    8e9a:	48 8b b3 90 02 00 00 	mov    0x290(%rbx),%rsi
    8ea1:	48 8b bb 98 02 00 00 	mov    0x298(%rbx),%rdi
    8ea8:	e8 b3 4f 00 00       	call   de60 <_ZN3vkh18destroyCommandPoolEP10VkDevice_TP15VkCommandPool_TPK21VkAllocationCallbacks>
class Framebuffers : public vkw::Framebuffers {
    8ead:	48 8d 05 cc 79 03 00 	lea    0x379cc(%rip),%rax        # 40880 <_ZTVN4rtvc12FramebuffersE+0x10>
    8eb4:	48 89 83 50 02 00 00 	mov    %rax,0x250(%rbx)
    8ebb:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    8ec0:	e8 3b 21 00 00       	call   b000 <_ZN3vkw12FramebuffersD1Ev>
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    8ec5:	48 8d 05 44 77 03 00 	lea    0x37744(%rip),%rax        # 40610 <_ZTVN3vkw16GraphicsPipelineE+0x10>
    if (_isOwner) {
    8ecc:	80 bb 48 02 00 00 00 	cmpb   $0x0,0x248(%rbx)
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    8ed3:	48 89 83 10 02 00 00 	mov    %rax,0x210(%rbx)
    if (_isOwner) {
    8eda:	74 0a                	je     8ee6 <_ZN4rtvc9VulkanAppC2Ev.cold+0x120>
    8edc:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    8ee1:	e8 0a f2 ff ff       	call   80f0 <_ZN3vkw16GraphicsPipeline14_destroyVkDataEv.part.0>
  DescriptorSetLayout &operator=(const DescriptorSetLayout &) = delete;
  DescriptorSetLayout &operator=(DescriptorSetLayout &&rhs) {
    _moveDataFrom(std::move(rhs));
    return *this;
  }
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    8ee6:	48 8d 05 03 77 03 00 	lea    0x37703(%rip),%rax        # 405f0 <_ZTVN3vkw19DescriptorSetLayoutE+0x10>
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    8eed:	80 bb 08 02 00 00 00 	cmpb   $0x0,0x208(%rbx)
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    8ef4:	48 89 83 e8 01 00 00 	mov    %rax,0x1e8(%rbx)
    if (_isOwner) {
    8efb:	74 1a                	je     8f17 <_ZN4rtvc9VulkanAppC2Ev.cold+0x151>
      vkDestroyDescriptorSetLayout(_device, _setLayout, _pAllocator);
    8efd:	48 8b 93 00 02 00 00 	mov    0x200(%rbx),%rdx
    8f04:	48 8b b3 f0 01 00 00 	mov    0x1f0(%rbx),%rsi
    8f0b:	48 8b bb f8 01 00 00 	mov    0x1f8(%rbx),%rdi
    8f12:	e8 29 da ff ff       	call   6940 <vkDestroyDescriptorSetLayout@plt>
class SwapchainImageViews : public vkw::ImageViews {
    8f17:	48 8d 05 42 79 03 00 	lea    0x37942(%rip),%rax        # 40860 <_ZTVN4rtvc19SwapchainImageViewsE+0x10>
    8f1e:	48 89 83 b0 01 00 00 	mov    %rax,0x1b0(%rbx)
    8f25:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    8f2a:	e8 51 20 00 00       	call   af80 <_ZN3vkw10ImageViewsD1Ev>
  virtual ~Swapchain() { _destroyVkData(); }
    8f2f:	48 8d 05 7a 76 03 00 	lea    0x3767a(%rip),%rax        # 405b0 <_ZTVN3vkw9SwapchainE+0x10>
    if (_isOwner) {
    8f36:	80 bb a8 01 00 00 00 	cmpb   $0x0,0x1a8(%rbx)
  virtual ~Swapchain() { _destroyVkData(); }
    8f3d:	48 89 83 78 01 00 00 	mov    %rax,0x178(%rbx)
    if (_isOwner) {
    8f44:	74 0a                	je     8f50 <_ZN4rtvc9VulkanAppC2Ev.cold+0x18a>
    8f46:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    8f4b:	e8 84 f1 ff ff       	call   80d4 <_ZN3vkw9Swapchain14_destroyVkDataEv.part.0>
  virtual ~Device() { _destroyVkData(); }
    8f50:	48 8d 05 b9 75 03 00 	lea    0x375b9(%rip),%rax        # 40510 <_ZTVN3vkw6DeviceE+0x10>
    if (_isOwner) {
    8f57:	80 bb 70 01 00 00 00 	cmpb   $0x0,0x170(%rbx)
  virtual ~Device() { _destroyVkData(); }
    8f5e:	48 89 83 40 01 00 00 	mov    %rax,0x140(%rbx)
    if (_isOwner) {
    8f65:	74 13                	je     8f7a <_ZN4rtvc9VulkanAppC2Ev.cold+0x1b4>
      vkh::destroyDevice(_device, _pAllocator);
    8f67:	48 8b b3 68 01 00 00 	mov    0x168(%rbx),%rsi
    8f6e:	48 8b bb 48 01 00 00 	mov    0x148(%rbx),%rdi
    8f75:	e8 06 4e 00 00       	call   dd80 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>
  Surface &operator=(const Surface &) = delete;
  Surface &operator=(Surface &&rhs) {
    _moveDataFrom(std::move(rhs));
    return *this;
  }
  virtual ~Surface() { _destroyVkData(); }
    8f7a:	48 8d 05 0f 76 03 00 	lea    0x3760f(%rip),%rax        # 40590 <_ZTVN3vkw7SurfaceE+0x10>
    _isOwner = true;
    rhs._isOwner = false;
  }

  void _destroyVkData() {
    if (_isOwner) {
    8f81:	80 bb 38 01 00 00 00 	cmpb   $0x0,0x138(%rbx)
  virtual ~Surface() { _destroyVkData(); }
    8f88:	48 89 83 10 01 00 00 	mov    %rax,0x110(%rbx)
    if (_isOwner) {
    8f8f:	74 1a                	je     8fab <_ZN4rtvc9VulkanAppC2Ev.cold+0x1e5>
      vkh::destroySurface(_instance, _surface, _pAllocator);
    8f91:	48 8b 93 30 01 00 00 	mov    0x130(%rbx),%rdx
    8f98:	48 8b b3 18 01 00 00 	mov    0x118(%rbx),%rsi
    8f9f:	48 8b bb 20 01 00 00 	mov    0x120(%rbx),%rdi
    8fa6:	e8 e5 4d 00 00       	call   dd90 <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>
  DebugMessenger &operator=(const DebugMessenger &) = delete;
  DebugMessenger &operator=(DebugMessenger &&rhs) {
    _moveDataFrom(std::move(rhs));
    return *this;
  }
  virtual ~DebugMessenger() { _destroyVkData(); }
    8fab:	48 8d 05 3e 75 03 00 	lea    0x3753e(%rip),%rax        # 404f0 <_ZTVN3vkw14DebugMessengerE+0x10>
    }
    rhs._isOwner = false;
  }

  void _destroyVkData() {
    if (_isOwner) {
    8fb2:	80 bb 08 01 00 00 00 	cmpb   $0x0,0x108(%rbx)
  virtual ~DebugMessenger() { _destroyVkData(); }
    8fb9:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
    if (_isOwner) {
    8fc0:	74 34                	je     8ff6 <_ZN4rtvc9VulkanAppC2Ev.cold+0x230>
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
    8fc2:	4c 8b b3 f8 00 00 00 	mov    0xf8(%rbx),%r14
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    8fc9:	48 8d 35 d8 e0 02 00 	lea    0x2e0d8(%rip),%rsi        # 370a8 <_IO_stdin_used+0xa8>
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
    8fd0:	4c 8b ab 00 01 00 00 	mov    0x100(%rbx),%r13
    8fd7:	4c 8b a3 f0 00 00 00 	mov    0xf0(%rbx),%r12
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    8fde:	4c 89 f7             	mov    %r14,%rdi
    8fe1:	e8 fa d4 ff ff       	call   64e0 <vkGetInstanceProcAddr@plt>
  if (func != nullptr) {
    8fe6:	48 85 c0             	test   %rax,%rax
    8fe9:	74 0b                	je     8ff6 <_ZN4rtvc9VulkanAppC2Ev.cold+0x230>
    func(instance, debugMessenger, pAllocator);
    8feb:	4c 89 ea             	mov    %r13,%rdx
    8fee:	4c 89 e6             	mov    %r12,%rsi
    8ff1:	4c 89 f7             	mov    %r14,%rdi
    8ff4:	ff d0                	call   *%rax
  Instance &operator=(const Instance &) = delete;
  Instance &operator=(Instance &&rhs) {
    _moveDataFrom(std::move(rhs));
    return *this;
  }
  virtual ~Instance() { _destroyVkData(); }
    8ff6:	48 8d 05 53 75 03 00 	lea    0x37553(%rip),%rax        # 40550 <_ZTVN3vkw8InstanceE+0x10>
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    8ffd:	80 bb b0 00 00 00 00 	cmpb   $0x0,0xb0(%rbx)
  virtual ~Instance() { _destroyVkData(); }
    9004:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
    if (_isOwner) {
    900b:	74 13                	je     9020 <_ZN4rtvc9VulkanAppC2Ev.cold+0x25a>
      vkDestroyInstance(_instance, _pAllocator);
    900d:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
    9014:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
    901b:	e8 50 d5 ff ff       	call   6570 <vkDestroyInstance@plt>
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    9020:	80 bb 90 00 00 00 00 	cmpb   $0x0,0x90(%rbx)
    9027:	74 0c                	je     9035 <_ZN4rtvc9VulkanAppC2Ev.cold+0x26f>
      glfwDestroyWindow(_window);
    9029:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
    9030:	e8 5b d1 ff ff       	call   6190 <glfwDestroyWindow@plt>
  virtual ~GLFW() { glfwTerminate(); }
    9035:	48 8d 05 94 75 03 00 	lea    0x37594(%rip),%rax        # 405d0 <_ZTVN3vkw4GLFWE+0x10>
    903c:	48 89 83 80 00 00 00 	mov    %rax,0x80(%rbx)
    9043:	e8 38 d5 ff ff       	call   6580 <glfwTerminate@plt>
      { return _M_dataplus._M_p; }
    9048:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
	if (!_M_is_local())
    904c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    9051:	48 39 c7             	cmp    %rax,%rdi
    9054:	0f 84 84 fd ff ff    	je     8dde <_ZN4rtvc9VulkanAppC2Ev.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    905a:	48 8b 43 70          	mov    0x70(%rbx),%rax
    905e:	48 8d 70 01          	lea    0x1(%rax),%rsi
    9062:	e8 f9 d4 ff ff       	call   6560 <_ZdlPvm@plt>
    9067:	e9 72 fd ff ff       	jmp    8dde <_ZN4rtvc9VulkanAppC2Ev.cold+0x18>
      throw std::runtime_error("Failed to create window surface.");
    906c:	bf 10 00 00 00       	mov    $0x10,%edi
    9071:	e8 da d1 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    9076:	48 8d 35 13 e7 02 00 	lea    0x2e713(%rip),%rsi        # 37790 <_ZTSN3vkw10ImageViewsE+0x3c0>
    907d:	48 89 c7             	mov    %rax,%rdi
    9080:	49 89 c4             	mov    %rax,%r12
    9083:	e8 28 d1 ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    9088:	48 8b 15 11 7f 03 00 	mov    0x37f11(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    908f:	48 8d 35 8a 7a 03 00 	lea    0x37a8a(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9096:	4c 89 e7             	mov    %r12,%rdi
    9099:	e8 62 d9 ff ff       	call   6a00 <__cxa_throw@plt>
  virtual ~DebugMessenger() { _destroyVkData(); }
    909e:	48 89 c5             	mov    %rax,%rbp
    90a1:	e9 05 ff ff ff       	jmp    8fab <_ZN4rtvc9VulkanAppC2Ev.cold+0x1e5>
  virtual ~Instance() { _destroyVkData(); }
    90a6:	48 8d 05 a3 74 03 00 	lea    0x374a3(%rip),%rax        # 40550 <_ZTVN3vkw8InstanceE+0x10>
    if (_isOwner) {
    90ad:	80 bb b0 00 00 00 00 	cmpb   $0x0,0xb0(%rbx)
  virtual ~Instance() { _destroyVkData(); }
    90b4:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
    if (_isOwner) {
    90bb:	0f 84 5f ff ff ff    	je     9020 <_ZN4rtvc9VulkanAppC2Ev.cold+0x25a>
      vkDestroyInstance(_instance, _pAllocator);
    90c1:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
    90c8:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
    90cf:	e8 9c d4 ff ff       	call   6570 <vkDestroyInstance@plt>
      _isOwner = false;
      if constexpr (enableValidationLayers) {
    90d4:	e9 47 ff ff ff       	jmp    9020 <_ZN4rtvc9VulkanAppC2Ev.cold+0x25a>
  ImageView &operator=(ImageView &&rhs) {
    _moveDataFrom(std::move(rhs));
    return *this;
  }

  virtual ~ImageView() { _destroyVkData(); }
    90d9:	48 89 c5             	mov    %rax,%rbp
    90dc:	48 8d 05 95 75 03 00 	lea    0x37595(%rip),%rax        # 40678 <_ZTVN3vkw9ImageViewE+0x10>
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    90e3:	80 bb 10 04 00 00 00 	cmpb   $0x0,0x410(%rbx)
  virtual ~ImageView() { _destroyVkData(); }
    90ea:	48 89 83 f0 03 00 00 	mov    %rax,0x3f0(%rbx)
    if (_isOwner) {
    90f1:	74 1a                	je     910d <_ZN4rtvc9VulkanAppC2Ev.cold+0x347>
      vkDestroyImageView(_device, _imageView, _pAllocator);
    90f3:	48 8b 93 08 04 00 00 	mov    0x408(%rbx),%rdx
    90fa:	48 8b b3 f8 03 00 00 	mov    0x3f8(%rbx),%rsi
    9101:	48 8b bb 00 04 00 00 	mov    0x400(%rbx),%rdi
    9108:	e8 63 d9 ff ff       	call   6a70 <vkDestroyImageView@plt>
  virtual ~Image() { _destroyVkData(); }
    910d:	48 8d 05 44 75 03 00 	lea    0x37544(%rip),%rax        # 40658 <_ZTVN3vkw5ImageE+0x10>
    if (_isOwner) {
    9114:	80 bb e8 03 00 00 00 	cmpb   $0x0,0x3e8(%rbx)
  virtual ~Image() { _destroyVkData(); }
    911b:	48 89 83 b0 03 00 00 	mov    %rax,0x3b0(%rbx)
    if (_isOwner) {
    9122:	74 08                	je     912c <_ZN4rtvc9VulkanAppC2Ev.cold+0x366>
    9124:	4c 89 f7             	mov    %r14,%rdi
    9127:	e8 2e f0 ff ff       	call   815a <_ZN3vkw5Image14_destroyVkDataEv.part.0>
}

VulkanApp::VulkanApp() {
  glfwSetWindowUserPointer(window.ref(), this);
  glfwSetFramebufferSizeCallback(window.ref(), framebufferResizeCallback);
}
    912c:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
    9131:	e8 9a d2 02 00       	call   363d0 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev>
  virtual ~Buffer() { _destroyVkData(); }
    9136:	4c 8d 25 f3 74 03 00 	lea    0x374f3(%rip),%r12        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
    913d:	80 bb 90 03 00 00 00 	cmpb   $0x0,0x390(%rbx)
  virtual ~Buffer() { _destroyVkData(); }
    9144:	4c 89 a3 58 03 00 00 	mov    %r12,0x358(%rbx)
    if (_isOwner) {
    914b:	74 0a                	je     9157 <_ZN4rtvc9VulkanAppC2Ev.cold+0x391>
    914d:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
    9152:	e8 d7 ef ff ff       	call   812e <_ZN3vkw6Buffer14_destroyVkDataEv.part.0>
    9157:	80 bb 50 03 00 00 00 	cmpb   $0x0,0x350(%rbx)
  virtual ~Buffer() { _destroyVkData(); }
    915e:	4c 89 a3 18 03 00 00 	mov    %r12,0x318(%rbx)
    if (_isOwner) {
    9165:	74 0a                	je     9171 <_ZN4rtvc9VulkanAppC2Ev.cold+0x3ab>
    9167:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    916c:	e8 bd ef ff ff       	call   812e <_ZN3vkw6Buffer14_destroyVkDataEv.part.0>
    9171:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    9176:	e8 a5 d0 02 00       	call   36220 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev>
    917b:	e9 ef fc ff ff       	jmp    8e6f <_ZN4rtvc9VulkanAppC2Ev.cold+0xa9>
    9180:	48 89 ef             	mov    %rbp,%rdi
    9183:	4c 89 ed             	mov    %r13,%rbp
    9186:	e8 45 d0 02 00       	call   361d0 <_ZN3vkw14DescriptorSetsD1Ev>
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    918b:	80 bb 58 04 00 00 00 	cmpb   $0x0,0x458(%rbx)
    9192:	74 1a                	je     91ae <_ZN4rtvc9VulkanAppC2Ev.cold+0x3e8>
      vkDestroyDescriptorPool(_device, _pool, _pAllocator);
    9194:	48 8b 93 50 04 00 00 	mov    0x450(%rbx),%rdx
    919b:	48 8b b3 40 04 00 00 	mov    0x440(%rbx),%rsi
    91a2:	48 8b bb 48 04 00 00 	mov    0x448(%rbx),%rdi
    91a9:	e8 42 d9 ff ff       	call   6af0 <vkDestroyDescriptorPool@plt>
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    91ae:	80 bb 38 04 00 00 00 	cmpb   $0x0,0x438(%rbx)
  virtual ~Sampler() { _destroyVkData(); }
    91b5:	4c 89 a3 18 04 00 00 	mov    %r12,0x418(%rbx)
    if (_isOwner) {
    91bc:	0f 84 1a ff ff ff    	je     90dc <_ZN4rtvc9VulkanAppC2Ev.cold+0x316>
      vkDestroySampler(_device, _sampler, _pAllocator);
    91c2:	48 8b 93 30 04 00 00 	mov    0x430(%rbx),%rdx
    91c9:	48 8b b3 20 04 00 00 	mov    0x420(%rbx),%rsi
    91d0:	48 8b bb 28 04 00 00 	mov    0x428(%rbx),%rdi
    91d7:	e8 14 d1 ff ff       	call   62f0 <vkDestroySampler@plt>
      _isOwner = false;
      if (enableValidationLayers) {
        std::cout << "Sampler destructor" << '\n';
      }
    }
  }
    91dc:	e9 fb fe ff ff       	jmp    90dc <_ZN4rtvc9VulkanAppC2Ev.cold+0x316>
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    91e1:	41 80 7d 18 00       	cmpb   $0x0,0x18(%r13)
    91e6:	74 11                	je     91f9 <_ZN4rtvc9VulkanAppC2Ev.cold+0x433>
      vkDestroyFence(_device, _fence, _pAllocator);
    91e8:	49 8b 55 10          	mov    0x10(%r13),%rdx
    91ec:	49 8b 7d 08          	mov    0x8(%r13),%rdi
    91f0:	49 8b 75 00          	mov    0x0(%r13),%rsi
    91f4:	e8 e7 d3 ff ff       	call   65e0 <vkDestroyFence@plt>
    91f9:	49 83 c5 20          	add    $0x20,%r13
    91fd:	e9 30 fc ff ff       	jmp    8e32 <_ZN4rtvc9VulkanAppC2Ev.cold+0x6c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    9202:	48 8b 3b             	mov    (%rbx),%rdi
    9205:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    9209:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    920c:	48 85 ff             	test   %rdi,%rdi
    920f:	74 05                	je     9216 <_ZN4rtvc9VulkanAppC2Ev.cold+0x450>
    9211:	e8 4a d3 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    9216:	48 89 ef             	mov    %rbp,%rdi
    9219:	e8 42 d8 ff ff       	call   6a60 <_Unwind_Resume@plt>
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    921e:	48 8d 05 cb 73 03 00 	lea    0x373cb(%rip),%rax        # 405f0 <_ZTVN3vkw19DescriptorSetLayoutE+0x10>
    if (_isOwner) {
    9225:	80 bb 08 02 00 00 00 	cmpb   $0x0,0x208(%rbx)
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    922c:	48 89 83 e8 01 00 00 	mov    %rax,0x1e8(%rbx)
    if (_isOwner) {
    9233:	0f 84 de fc ff ff    	je     8f17 <_ZN4rtvc9VulkanAppC2Ev.cold+0x151>
      vkDestroyDescriptorSetLayout(_device, _setLayout, _pAllocator);
    9239:	48 8b 93 00 02 00 00 	mov    0x200(%rbx),%rdx
    9240:	48 8b b3 f0 01 00 00 	mov    0x1f0(%rbx),%rsi
    9247:	48 8b bb f8 01 00 00 	mov    0x1f8(%rbx),%rdi
    924e:	e8 ed d6 ff ff       	call   6940 <vkDestroyDescriptorSetLayout@plt>
      _isOwner = false;
      if constexpr (enableValidationLayers) {
        std::cout << "DescriptorSetLayout destructor" << '\n';
      }
    }
  }
    9253:	e9 bf fc ff ff       	jmp    8f17 <_ZN4rtvc9VulkanAppC2Ev.cold+0x151>
    9258:	4c 89 e7             	mov    %r12,%rdi
    925b:	48 89 c5             	mov    %rax,%rbp
    925e:	e8 2d d1 ff ff       	call   6390 <__cxa_free_exception@plt>
    9263:	e9 43 fd ff ff       	jmp    8fab <_ZN4rtvc9VulkanAppC2Ev.cold+0x1e5>
  virtual ~Swapchain() { _destroyVkData(); }
    9268:	48 8d 05 41 73 03 00 	lea    0x37341(%rip),%rax        # 405b0 <_ZTVN3vkw9SwapchainE+0x10>
    if (_isOwner) {
    926f:	80 bb a8 01 00 00 00 	cmpb   $0x0,0x1a8(%rbx)
  virtual ~Swapchain() { _destroyVkData(); }
    9276:	48 89 83 78 01 00 00 	mov    %rax,0x178(%rbx)
    if (_isOwner) {
    927d:	0f 84 cd fc ff ff    	je     8f50 <_ZN4rtvc9VulkanAppC2Ev.cold+0x18a>
    9283:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    9288:	e8 47 ee ff ff       	call   80d4 <_ZN3vkw9Swapchain14_destroyVkDataEv.part.0>
    928d:	e9 be fc ff ff       	jmp    8f50 <_ZN4rtvc9VulkanAppC2Ev.cold+0x18a>
  virtual ~ImageView() { _destroyVkData(); }
    9292:	48 8d 05 df 73 03 00 	lea    0x373df(%rip),%rax        # 40678 <_ZTVN3vkw9ImageViewE+0x10>
    if (_isOwner) {
    9299:	80 bb 10 04 00 00 00 	cmpb   $0x0,0x410(%rbx)
  virtual ~ImageView() { _destroyVkData(); }
    92a0:	48 89 83 f0 03 00 00 	mov    %rax,0x3f0(%rbx)
    if (_isOwner) {
    92a7:	0f 84 60 fe ff ff    	je     910d <_ZN4rtvc9VulkanAppC2Ev.cold+0x347>
      vkDestroyImageView(_device, _imageView, _pAllocator);
    92ad:	48 8b 93 08 04 00 00 	mov    0x408(%rbx),%rdx
    92b4:	48 8b b3 f8 03 00 00 	mov    0x3f8(%rbx),%rsi
    92bb:	48 8b bb 00 04 00 00 	mov    0x400(%rbx),%rdi
    92c2:	e8 a9 d7 ff ff       	call   6a70 <vkDestroyImageView@plt>
      _isOwner = false;
      if constexpr (enableValidationLayers) {
        std::cout << "ImageView destructor" << '\n';
      }
    }
  }
    92c7:	e9 41 fe ff ff       	jmp    910d <_ZN4rtvc9VulkanAppC2Ev.cold+0x347>
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    92cc:	48 8d 05 3d 73 03 00 	lea    0x3733d(%rip),%rax        # 40610 <_ZTVN3vkw16GraphicsPipelineE+0x10>
    if (_isOwner) {
    92d3:	80 bb 48 02 00 00 00 	cmpb   $0x0,0x248(%rbx)
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    92da:	48 89 83 10 02 00 00 	mov    %rax,0x210(%rbx)
    if (_isOwner) {
    92e1:	75 44                	jne    9327 <_ZN4rtvc9VulkanAppC2Ev.cold+0x561>
      { return _M_dataplus._M_p; }
    92e3:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    92ea:	00 
	if (!_M_is_local())
    92eb:	4c 39 e7             	cmp    %r12,%rdi
    92ee:	74 11                	je     9301 <_ZN4rtvc9VulkanAppC2Ev.cold+0x53b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    92f0:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
    92f7:	00 
    92f8:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    92fc:	e8 5f d2 ff ff       	call   6560 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
    9301:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
    9308:	00 
	if (!_M_is_local())
    9309:	48 39 ef             	cmp    %rbp,%rdi
    930c:	74 11                	je     931f <_ZN4rtvc9VulkanAppC2Ev.cold+0x559>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    930e:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
    9315:	00 
    9316:	48 8d 70 01          	lea    0x1(%rax),%rsi
    931a:	e8 41 d2 ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    931f:	4c 89 ed             	mov    %r13,%rbp
    9322:	e9 bf fb ff ff       	jmp    8ee6 <_ZN4rtvc9VulkanAppC2Ev.cold+0x120>
    9327:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    932c:	e8 bf ed ff ff       	call   80f0 <_ZN3vkw16GraphicsPipeline14_destroyVkDataEv.part.0>
    9331:	eb b0                	jmp    92e3 <_ZN4rtvc9VulkanAppC2Ev.cold+0x51d>
    poolInfo.pPoolSizes = poolSizes.data();
    poolInfo.maxSets = static_cast<uint32_t>(descriptorCount);
    poolInfo.flags = requiredFlag;
    if (vkCreateDescriptorPool(device, &poolInfo, nullptr, &_pool) !=
        VK_SUCCESS) {
      throw std::runtime_error("Failed to create descriptor pool.");
    9333:	bf 10 00 00 00       	mov    $0x10,%edi
    9338:	e8 13 cf ff ff       	call   6250 <__cxa_allocate_exception@plt>
    933d:	48 8d 35 24 f9 02 00 	lea    0x2f924(%rip),%rsi        # 38c68 <_ZL11stbi__bmask+0x4e8>
    9344:	48 89 c7             	mov    %rax,%rdi
    9347:	49 89 c5             	mov    %rax,%r13
    934a:	e8 61 ce ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    934f:	48 8b 15 4a 7c 03 00 	mov    0x37c4a(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    9356:	48 8d 35 c3 77 03 00 	lea    0x377c3(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    935d:	4c 89 ef             	mov    %r13,%rdi
    9360:	e8 9b d6 ff ff       	call   6a00 <__cxa_throw@plt>
    samplerInfo.mipLodBias = 0.0f;
    samplerInfo.minLod = 0.0f;
    samplerInfo.maxLod = 0.0f;
    if (vkCreateSampler(device, &samplerInfo, nullptr, &_sampler) !=
        VK_SUCCESS) {
      throw std::runtime_error("Failed to create sampler.");
    9365:	bf 10 00 00 00       	mov    $0x10,%edi
    936a:	e8 e1 ce ff ff       	call   6250 <__cxa_allocate_exception@plt>
    936f:	48 8d 35 33 fb 02 00 	lea    0x2fb33(%rip),%rsi        # 38ea9 <_ZL11stbi__bmask+0x729>
    9376:	48 89 c7             	mov    %rax,%rdi
    9379:	49 89 c4             	mov    %rax,%r12
    937c:	e8 2f ce ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    9381:	48 8b 15 18 7c 03 00 	mov    0x37c18(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    9388:	48 8d 35 91 77 03 00 	lea    0x37791(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    938f:	4c 89 e7             	mov    %r12,%rdi
    9392:	e8 69 d6 ff ff       	call   6a00 <__cxa_throw@plt>
    9397:	4c 89 e7             	mov    %r12,%rdi
    939a:	48 89 c5             	mov    %rax,%rbp
    939d:	e8 ee cf ff ff       	call   6390 <__cxa_free_exception@plt>
    93a2:	e9 35 fd ff ff       	jmp    90dc <_ZN4rtvc9VulkanAppC2Ev.cold+0x316>
  virtual ~Sampler() { _destroyVkData(); }
    93a7:	48 89 c5             	mov    %rax,%rbp
    93aa:	e9 ff fd ff ff       	jmp    91ae <_ZN4rtvc9VulkanAppC2Ev.cold+0x3e8>
    93af:	4c 89 ef             	mov    %r13,%rdi
    93b2:	48 89 c5             	mov    %rax,%rbp
    93b5:	e8 d6 cf ff ff       	call   6390 <__cxa_free_exception@plt>
    93ba:	e9 ef fd ff ff       	jmp    91ae <_ZN4rtvc9VulkanAppC2Ev.cold+0x3e8>
    93bf:	90                   	nop

00000000000093c0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold>:
    93c0:	90                   	nop
    }
    fs << '\n';
    ++index;
  }
  fs << '\n';
}
    93c1:	48 89 c3             	mov    %rax,%rbx
    93c4:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    93c9:	e8 f2 cc ff ff       	call   60c0 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@plt>
    93ce:	48 89 df             	mov    %rbx,%rdi
    93d1:	e8 8a d6 ff ff       	call   6a60 <_Unwind_Resume@plt>
       *  @c &sb to the base class initializer.  Does not open any files
       *  (you haven't given it a filename to open).
       */
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
    93d6:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
    93dd:	00 
    93de:	e8 1d d5 ff ff       	call   6900 <_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev@plt>

      /**
       *  @brief  Destructor does nothing.
      */
      virtual
      ~basic_iostream() { }
    93e3:	48 8b 05 de 75 03 00 	mov    0x375de(%rip),%rax        # 409c8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x8>
    93ea:	48 8b 0d ff 75 03 00 	mov    0x375ff(%rip),%rcx        # 409f0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x30>
    93f1:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    93f5:	48 89 8c 04 b0 02 00 	mov    %rcx,0x2b0(%rsp,%rax,1)
    93fc:	00 
      ~basic_ostream() { }
    93fd:	48 8b 05 dc 75 03 00 	mov    0x375dc(%rip),%rax        # 409e0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x20>
    9404:	48 8b 0d dd 75 03 00 	mov    0x375dd(%rip),%rcx        # 409e8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x28>
    940b:	48 89 84 24 c0 02 00 	mov    %rax,0x2c0(%rsp)
    9412:	00 
    9413:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    9417:	48 89 8c 04 c0 02 00 	mov    %rcx,0x2c0(%rsp,%rax,1)
    941e:	00 
      { _M_gcount = streamsize(0); }
    941f:	48 8b 05 aa 75 03 00 	mov    0x375aa(%rip),%rax        # 409d0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    9426:	48 8b 0d ab 75 03 00 	mov    0x375ab(%rip),%rcx        # 409d8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
    942d:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
    9434:	00 
    9435:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    9439:	48 89 8c 04 b0 02 00 	mov    %rcx,0x2b0(%rsp,%rax,1)
    9440:	00 
    9441:	31 c9                	xor    %ecx,%ecx
    9443:	48 89 8c 24 b8 02 00 	mov    %rcx,0x2b8(%rsp)
    944a:	00 
    944b:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
    9452:	00 
    9453:	48 8d 05 56 74 03 00 	lea    0x37456(%rip),%rax        # 408b0 <_ZTVSt9basic_iosIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    945a:	48 89 84 24 b8 03 00 	mov    %rax,0x3b8(%rsp)
    9461:	00 
    9462:	e8 39 cd ff ff       	call   61a0 <_ZNSt8ios_baseD2Ev@plt>
    9467:	48 89 df             	mov    %rbx,%rdi
    946a:	e8 f1 d5 ff ff       	call   6a60 <_Unwind_Resume@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    946f:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
    9476:	00 
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    9477:	48 8b b4 24 30 01 00 	mov    0x130(%rsp),%rsi
    947e:	00 
    947f:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    9482:	48 85 ff             	test   %rdi,%rdi
    9485:	74 05                	je     948c <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0xcc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    9487:	e8 d4 d0 ff ff       	call   6560 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
    948c:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
    9493:	00 
	if (!_M_is_local())
    9494:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    9499:	48 39 c7             	cmp    %rax,%rdi
    949c:	74 11                	je     94af <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0xef>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    949e:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
    94a5:	00 
    94a6:	48 8d 70 01          	lea    0x1(%rax),%rsi
    94aa:	e8 b1 d0 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    94af:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
    94b6:	00 
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    94b7:	48 8b b4 24 10 01 00 	mov    0x110(%rsp),%rsi
    94be:	00 
    94bf:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    94c2:	48 85 ff             	test   %rdi,%rdi
    94c5:	74 05                	je     94cc <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x10c>
    94c7:	e8 94 d0 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    94cc:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
    94d3:	00 
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    94d4:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
    94db:	00 
    94dc:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    94df:	48 85 ff             	test   %rdi,%rdi
    94e2:	74 05                	je     94e9 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x129>
    94e4:	e8 77 d0 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    94e9:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
    94f0:	00 
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    94f1:	48 8b b4 24 d0 00 00 	mov    0xd0(%rsp),%rsi
    94f8:	00 
    94f9:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    94fc:	48 85 ff             	test   %rdi,%rdi
    94ff:	0f 84 bf fe ff ff    	je     93c4 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x4>
    9505:	e8 56 d0 ff ff       	call   6560 <_ZdlPvm@plt>
    950a:	e9 b5 fe ff ff       	jmp    93c4 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x4>
    throw std::runtime_error("Failed to open " + filePath + '\n');
    950f:	bf 10 00 00 00       	mov    $0x10,%edi
	: allocator_type(__a), _M_p(__dat) { }
    9514:	48 8d 9c 24 a0 07 00 	lea    0x7a0(%rsp),%rbx
    951b:	00 
    951c:	4c 8d ac 24 b0 07 00 	lea    0x7b0(%rsp),%r13
    9523:	00 
    9524:	e8 27 cd ff ff       	call   6250 <__cxa_allocate_exception@plt>
      { _M_string_length = __length; }
    9529:	31 d2                	xor    %edx,%edx
    952b:	48 89 df             	mov    %rbx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
    952e:	4c 89 ac 24 a0 07 00 	mov    %r13,0x7a0(%rsp)
    9535:	00 
    9536:	49 89 c4             	mov    %rax,%r12
    9539:	48 8b 45 08          	mov    0x8(%rbp),%rax
      { _M_string_length = __length; }
    953d:	48 89 94 24 a8 07 00 	mov    %rdx,0x7a8(%rsp)
    9544:	00 
    9545:	c6 84 24 b0 07 00 00 	movb   $0x0,0x7b0(%rsp)
    954c:	00 
    954d:	48 8d 70 0f          	lea    0xf(%rax),%rsi
    9551:	e8 ca d3 ff ff       	call   6920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>
	if (this->max_size() - (this->size() - __n1) < __n2)
    9556:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    955d:	ff ff 3f 
    9560:	48 2b 84 24 a8 07 00 	sub    0x7a8(%rsp),%rax
    9567:	00 
    9568:	48 83 f8 0e          	cmp    $0xe,%rax
    956c:	0f 86 47 01 00 00    	jbe    96b9 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x2f9>
	return _M_append(__s, __n);
    9572:	ba 0f 00 00 00       	mov    $0xf,%edx
    9577:	48 8d 35 d7 e1 02 00 	lea    0x2e1d7(%rip),%rsi        # 37755 <_ZTSN3vkw10ImageViewsE+0x385>
    957e:	48 89 df             	mov    %rbx,%rdi
    9581:	e8 fa cb ff ff       	call   6180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_string_length; }
    9586:	48 8b 55 08          	mov    0x8(%rbp),%rdx
      { return _M_dataplus._M_p; }
    958a:	48 8b 75 00          	mov    0x0(%rbp),%rsi
	if (this->max_size() - (this->size() - __n1) < __n2)
    958e:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    9595:	ff ff 3f 
    9598:	48 2b 84 24 a8 07 00 	sub    0x7a8(%rsp),%rax
    959f:	00 
    95a0:	48 39 d0             	cmp    %rdx,%rax
    95a3:	0f 82 4a 01 00 00    	jb     96f3 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x333>
	return _M_append(__s, __n);
    95a9:	48 89 df             	mov    %rbx,%rdi
    95ac:	e8 cf cb ff ff       	call   6180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
       *  Appends __n copies of __c to this string.
       */
      _GLIBCXX20_CONSTEXPR
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
    95b1:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
    95b7:	b9 01 00 00 00       	mov    $0x1,%ecx
    95bc:	31 d2                	xor    %edx,%edx
    95be:	48 89 df             	mov    %rbx,%rdi
    95c1:	48 8b b4 24 a8 07 00 	mov    0x7a8(%rsp),%rsi
    95c8:	00 
    95c9:	e8 12 d5 ff ff       	call   6ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    95ce:	48 8d ac 24 f0 0a 00 	lea    0xaf0(%rsp),%rbp
    95d5:	00 
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    95d6:	4c 8d 70 10          	lea    0x10(%rax),%r14
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
    95da:	48 89 c3             	mov    %rax,%rbx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    95dd:	48 89 ac 24 e0 0a 00 	mov    %rbp,0xae0(%rsp)
    95e4:	00 
      { return _M_dataplus._M_p; }
    95e5:	48 8b 10             	mov    (%rax),%rdx
      { return _M_string_length; }
    95e8:	48 8b 40 08          	mov    0x8(%rax),%rax
	if (__str._M_is_local())
    95ec:	4c 39 f2             	cmp    %r14,%rdx
    95ef:	0f 85 0a 01 00 00    	jne    96ff <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x33f>
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
    95f5:	48 89 c2             	mov    %rax,%rdx
    95f8:	48 83 c2 01          	add    $0x1,%rdx
    95fc:	0f 85 1c 01 00 00    	jne    971e <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x35e>
      { _M_string_length = __length; }
    9602:	48 89 84 24 e8 0a 00 	mov    %rax,0xae8(%rsp)
    9609:	00 
    960a:	31 c0                	xor    %eax,%eax
    960c:	48 8d b4 24 e0 0a 00 	lea    0xae0(%rsp),%rsi
    9613:	00 
    9614:	4c 89 e7             	mov    %r12,%rdi
      { _M_dataplus._M_p = __p; }
    9617:	4c 89 33             	mov    %r14,(%rbx)
      { _M_string_length = __length; }
    961a:	48 89 43 08          	mov    %rax,0x8(%rbx)
	__c1 = __c2;
    961e:	c6 43 10 00          	movb   $0x0,0x10(%rbx)
    9622:	e8 59 d3 ff ff       	call   6980 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
      { return _M_dataplus._M_p; }
    9627:	48 8b bc 24 e0 0a 00 	mov    0xae0(%rsp),%rdi
    962e:	00 
	if (!_M_is_local())
    962f:	48 39 ef             	cmp    %rbp,%rdi
    9632:	74 11                	je     9645 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x285>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    9634:	48 8b 84 24 f0 0a 00 	mov    0xaf0(%rsp),%rax
    963b:	00 
    963c:	48 8d 70 01          	lea    0x1(%rax),%rsi
    9640:	e8 1b cf ff ff       	call   6560 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
    9645:	48 8b bc 24 a0 07 00 	mov    0x7a0(%rsp),%rdi
    964c:	00 
	if (!_M_is_local())
    964d:	4c 39 ef             	cmp    %r13,%rdi
    9650:	74 11                	je     9663 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x2a3>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    9652:	48 8b 84 24 b0 07 00 	mov    0x7b0(%rsp),%rax
    9659:	00 
    965a:	48 8d 70 01          	lea    0x1(%rax),%rsi
    965e:	e8 fd ce ff ff       	call   6560 <_ZdlPvm@plt>
    9663:	48 8b 15 36 79 03 00 	mov    0x37936(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    966a:	48 8d 35 af 74 03 00 	lea    0x374af(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9671:	4c 89 e7             	mov    %r12,%rdi
    9674:	e8 87 d3 ff ff       	call   6a00 <__cxa_throw@plt>
    9679:	48 8b 05 50 73 03 00 	mov    0x37350(%rip),%rax        # 409d0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    9680:	48 8b 0d 51 73 03 00 	mov    0x37351(%rip),%rcx        # 409d8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
    9687:	31 f6                	xor    %esi,%esi
    9689:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
    9690:	00 
    9691:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    9695:	48 89 8c 04 b0 02 00 	mov    %rcx,0x2b0(%rsp,%rax,1)
    969c:	00 
    969d:	48 89 b4 24 b8 02 00 	mov    %rsi,0x2b8(%rsp)
    96a4:	00 
    96a5:	e9 a1 fd ff ff       	jmp    944b <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x8b>
	__catch(...)
    96aa:	e8 31 cb ff ff       	call   61e0 <__cxa_begin_catch@plt>
    96af:	e8 ec d2 ff ff       	call   69a0 <__cxa_end_catch@plt>
    96b4:	e9 55 c1 02 00       	jmp    3580e <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd1e>
	  __throw_length_error(__N(__s));
    96b9:	48 8d 3d a0 db 02 00 	lea    0x2dba0(%rip),%rdi        # 37260 <_IO_stdin_used+0x260>
    96c0:	e8 bb cb ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
      { return _M_dataplus._M_p; }
    96c5:	48 89 c3             	mov    %rax,%rbx
    96c8:	48 8b bc 24 a0 07 00 	mov    0x7a0(%rsp),%rdi
    96cf:	00 
	if (!_M_is_local())
    96d0:	4c 39 ef             	cmp    %r13,%rdi
    96d3:	74 11                	je     96e6 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x326>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    96d5:	48 8b 84 24 b0 07 00 	mov    0x7b0(%rsp),%rax
    96dc:	00 
    96dd:	48 8d 70 01          	lea    0x1(%rax),%rsi
    96e1:	e8 7a ce ff ff       	call   6560 <_ZdlPvm@plt>
    96e6:	4c 89 e7             	mov    %r12,%rdi
    96e9:	e8 a2 cc ff ff       	call   6390 <__cxa_free_exception@plt>
    96ee:	e9 d1 fc ff ff       	jmp    93c4 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x4>
	  __throw_length_error(__N(__s));
    96f3:	48 8d 3d 66 db 02 00 	lea    0x2db66(%rip),%rdi        # 37260 <_IO_stdin_used+0x260>
    96fa:	e8 81 cb ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
      { _M_dataplus._M_p = __p; }
    96ff:	48 89 94 24 e0 0a 00 	mov    %rdx,0xae0(%rsp)
    9706:	00 
      { _M_allocated_capacity = __capacity; }
    9707:	48 8b 43 10          	mov    0x10(%rbx),%rax
    970b:	48 89 84 24 f0 0a 00 	mov    %rax,0xaf0(%rsp)
    9712:	00 
    9713:	48 8b 43 08          	mov    0x8(%rbx),%rax
    9717:	e9 e6 fe ff ff       	jmp    9602 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x242>
    971c:	eb a7                	jmp    96c5 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x305>
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    971e:	4c 89 f6             	mov    %r14,%rsi
    9721:	48 89 ef             	mov    %rbp,%rdi
    9724:	e8 e7 cc ff ff       	call   6410 <memcpy@plt>
    9729:	48 8b 43 08          	mov    0x8(%rbx),%rax
    972d:	e9 d0 fe ff ff       	jmp    9602 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x242>
      { return _M_dataplus._M_p; }
    9732:	48 8b bc 24 e0 0a 00 	mov    0xae0(%rsp),%rdi
    9739:	00 
    973a:	48 89 c3             	mov    %rax,%rbx
	if (!_M_is_local())
    973d:	48 39 ef             	cmp    %rbp,%rdi
    9740:	74 86                	je     96c8 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x308>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    9742:	48 8b 84 24 f0 0a 00 	mov    0xaf0(%rsp),%rax
    9749:	00 
    974a:	48 8d 70 01          	lea    0x1(%rax),%rsi
    974e:	e8 0d ce ff ff       	call   6560 <_ZdlPvm@plt>
    9753:	e9 70 ff ff ff       	jmp    96c8 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x308>
    9758:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    975f:	00 

0000000000009760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>:
      basic_string(const _CharT* __s, size_type __n,
    9760:	41 54                	push   %r12
    9762:	49 89 f4             	mov    %rsi,%r12
    9765:	55                   	push   %rbp
    9766:	48 89 d5             	mov    %rdx,%rbp
    9769:	53                   	push   %rbx
    976a:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    976d:	48 83 c7 10          	add    $0x10,%rdi
      basic_string(const _CharT* __s, size_type __n,
    9771:	48 83 ec 10          	sub    $0x10,%rsp
	: allocator_type(__a), _M_p(__dat) { }
    9775:	48 89 3b             	mov    %rdi,(%rbx)
	if (__s == 0 && __n > 0)
    9778:	48 85 f6             	test   %rsi,%rsi
    977b:	75 05                	jne    9782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x22>
    977d:	48 85 d2             	test   %rdx,%rdx
    9780:	75 64                	jne    97e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x86>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    9782:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    9787:	48 83 fd 0f          	cmp    $0xf,%rbp
    978b:	77 2e                	ja     97bb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x5b>
	if (__n == 1)
    978d:	48 83 fd 01          	cmp    $0x1,%rbp
    9791:	75 21                	jne    97b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x54>
	__c1 = __c2;
    9793:	41 0f b6 04 24       	movzbl (%r12),%eax
    9798:	88 43 10             	mov    %al,0x10(%rbx)
	_M_set_length(__dnew);
    979b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    97a0:	48 8b 13             	mov    (%rbx),%rdx
      { _M_string_length = __length; }
    97a3:	48 89 43 08          	mov    %rax,0x8(%rbx)
    97a7:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      }
    97ab:	48 83 c4 10          	add    $0x10,%rsp
    97af:	5b                   	pop    %rbx
    97b0:	5d                   	pop    %rbp
    97b1:	41 5c                	pop    %r12
    97b3:	c3                   	ret
	if (__n == 0)
    97b4:	48 85 ed             	test   %rbp,%rbp
    97b7:	74 e2                	je     979b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
    97b9:	eb 1e                	jmp    97d9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x79>
	    _M_data(_M_create(__dnew, size_type(0)));
    97bb:	48 89 df             	mov    %rbx,%rdi
    97be:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    97c3:	31 d2                	xor    %edx,%edx
    97c5:	e8 b6 d2 ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    97ca:	48 89 03             	mov    %rax,(%rbx)
    97cd:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    97d0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    97d5:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    97d9:	48 89 ea             	mov    %rbp,%rdx
    97dc:	4c 89 e6             	mov    %r12,%rsi
    97df:	e8 2c cc ff ff       	call   6410 <memcpy@plt>
    97e4:	eb b5                	jmp    979b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
	  std::__throw_logic_error(__N("basic_string: "
    97e6:	48 8d 3d 83 d8 02 00 	lea    0x2d883(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    97ed:	e8 8e cb ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    97f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    97f9:	00 00 00 00 
    97fd:	0f 1f 00             	nopl   (%rax)

0000000000009800 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
    9800:	41 54                	push   %r12
    9802:	55                   	push   %rbp
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    9803:	48 8d 2d e7 7e 03 00 	lea    0x37ee7(%rip),%rbp        # 416f1 <_ZStL8__ioinit>
    980a:	53                   	push   %rbx
    980b:	48 89 ef             	mov    %rbp,%rdi
    980e:	48 8d 1d 73 7d 03 00 	lea    0x37d73(%rip),%rbx        # 41588 <__dso_handle>
    9815:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    981c:	e8 6f d0 ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    9821:	48 8b 3d a0 77 03 00 	mov    0x377a0(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    9828:	48 89 da             	mov    %rbx,%rdx
    982b:	48 89 ee             	mov    %rbp,%rsi
    982e:	e8 4d cc ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    9833:	80 3d d6 7e 03 00 00 	cmpb   $0x0,0x37ed6(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    983a:	74 2f                	je     986b <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b>
inline const std::string absoluteDirectory =
    983c:	80 3d c5 7e 03 00 00 	cmpb   $0x0,0x37ec5(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    9843:	0f 84 f1 00 00 00    	je     993a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a>
#include <vector>
#include <vkw.hpp>

namespace shader {

inline const std::vector<uint16_t> triangle_indices{0, 1, 2,  2,  3,  0,
    9849:	80 3d b0 7e 03 00 00 	cmpb   $0x0,0x37eb0(%rip)        # 41700 <_ZGVN6shader16triangle_indicesE>
    9850:	74 5f                	je     98b1 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1>

                                                    4, 5, 6,  6,  7,  4,

                                                    8, 9, 10, 10, 11, 8};
inline const std::vector<vkw::Vertex> triangle_index_data{
    9852:	80 3d 9f 7e 03 00 00 	cmpb   $0x0,0x37e9f(%rip)        # 416f8 <_ZGVN6shader19triangle_index_dataE>
    9859:	0f 84 24 01 00 00    	je     9983 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x183>
    985f:	48 81 c4 80 01 00 00 	add    $0x180,%rsp
    9866:	5b                   	pop    %rbx
    9867:	5d                   	pop    %rbp
    9868:	41 5c                	pop    %r12
    986a:	c3                   	ret
    std::filesystem::current_path().string();
    986b:	48 89 e5             	mov    %rsp,%rbp
inline const std::string absoluteDirectory =
    986e:	c6 05 9b 7e 03 00 01 	movb   $0x1,0x37e9b(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
  template<typename _CharT, typename _Traits, typename _Allocator>
    inline basic_string<_CharT, _Traits, _Allocator>
    path::string(const _Allocator& __a) const
    {
      if constexpr (is_same_v<_CharT, value_type>)
	return { _M_pathname.c_str(), _M_pathname.length(), __a };
    9875:	4c 8d 25 04 7f 03 00 	lea    0x37f04(%rip),%r12        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    987c:	48 89 ef             	mov    %rbp,%rdi
    987f:	e8 ac d0 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    9884:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9889:	48 8b 34 24          	mov    (%rsp),%rsi
    988d:	4c 89 e7             	mov    %r12,%rdi
    9890:	e8 cb fe ff ff       	call   9760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    9895:	48 89 ef             	mov    %rbp,%rdi
    9898:	e8 43 22 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    989d:	48 8b 3d ec 76 03 00 	mov    0x376ec(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    98a4:	48 89 da             	mov    %rbx,%rdx
    98a7:	4c 89 e6             	mov    %r12,%rsi
    98aa:	e8 d1 cb ff ff       	call   6480 <__cxa_atexit@plt>
    98af:	eb 8b                	jmp    983c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3c>
                                                    8, 9, 10, 10, 11, 8};
    98b1:	66 0f 6f 05 37 db 02 	movdqa 0x2db37(%rip),%xmm0        # 373f0 <_ZTSN3vkw10ImageViewsE+0x20>
    98b8:	00 
    98b9:	8b 05 51 db 02 00    	mov    0x2db51(%rip),%eax        # 37410 <_ZTSN3vkw10ImageViewsE+0x40>
	: _M_start(), _M_finish(), _M_end_of_storage()
    98bf:	31 d2                	xor    %edx,%edx
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    98c1:	bf 24 00 00 00       	mov    $0x24,%edi
inline const std::vector<uint16_t> triangle_indices{0, 1, 2,  2,  3,  0,
    98c6:	c6 05 33 7e 03 00 01 	movb   $0x1,0x37e33(%rip)        # 41700 <_ZGVN6shader16triangle_indicesE>
                                                    8, 9, 10, 10, 11, 8};
    98cd:	0f 29 04 24          	movaps %xmm0,(%rsp)
    98d1:	66 0f 6f 05 27 db 02 	movdqa 0x2db27(%rip),%xmm0        # 37400 <_ZTSN3vkw10ImageViewsE+0x30>
    98d8:	00 
    98d9:	89 44 24 20          	mov    %eax,0x20(%rsp)
    98dd:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
    98e2:	66 0f ef c0          	pxor   %xmm0,%xmm0
    98e6:	48 89 15 63 7e 03 00 	mov    %rdx,0x37e63(%rip)        # 41750 <_ZN6shader16triangle_indicesE+0x10>
    98ed:	0f 11 05 4c 7e 03 00 	movups %xmm0,0x37e4c(%rip)        # 41740 <_ZN6shader16triangle_indicesE>
    98f4:	e8 47 cc ff ff       	call   6540 <_Znwm@plt>
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    98f9:	48 89 e6             	mov    %rsp,%rsi
    98fc:	b9 09 00 00 00       	mov    $0x9,%ecx
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    9901:	48 8d 50 24          	lea    0x24(%rax),%rdx
    9905:	48 89 c7             	mov    %rax,%rdi
    9908:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
    990a:	48 89 15 3f 7e 03 00 	mov    %rdx,0x37e3f(%rip)        # 41750 <_ZN6shader16triangle_indicesE+0x10>
inline const std::vector<uint16_t> triangle_indices{0, 1, 2,  2,  3,  0,
    9911:	48 8d 35 28 7e 03 00 	lea    0x37e28(%rip),%rsi        # 41740 <_ZN6shader16triangle_indicesE>
    9918:	48 8d 3d b1 14 00 00 	lea    0x14b1(%rip),%rdi        # add0 <_ZNSt6vectorItSaItEED1Ev>
	  this->_M_impl._M_finish =
    991f:	48 89 15 22 7e 03 00 	mov    %rdx,0x37e22(%rip)        # 41748 <_ZN6shader16triangle_indicesE+0x8>
    9926:	48 89 da             	mov    %rbx,%rdx
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    9929:	48 89 05 10 7e 03 00 	mov    %rax,0x37e10(%rip)        # 41740 <_ZN6shader16triangle_indicesE>
    9930:	e8 4b cb ff ff       	call   6480 <__cxa_atexit@plt>
    9935:	e9 18 ff ff ff       	jmp    9852 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x52>
    std::filesystem::current_path().string();
    993a:	48 89 e5             	mov    %rsp,%rbp
inline const std::string absoluteDirectory =
    993d:	c6 05 c4 7d 03 00 01 	movb   $0x1,0x37dc4(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    9944:	4c 8d 25 15 7e 03 00 	lea    0x37e15(%rip),%r12        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    994b:	48 89 ef             	mov    %rbp,%rdi
    994e:	e8 dd cf ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    9953:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9958:	48 8b 34 24          	mov    (%rsp),%rsi
    995c:	4c 89 e7             	mov    %r12,%rdi
    995f:	e8 fc fd ff ff       	call   9760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    9964:	48 89 ef             	mov    %rbp,%rdi
    9967:	e8 74 21 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    996c:	48 8b 3d 1d 76 03 00 	mov    0x3761d(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    9973:	48 89 da             	mov    %rbx,%rdx
    9976:	4c 89 e6             	mov    %r12,%rsi
    9979:	e8 02 cb ff ff       	call   6480 <__cxa_atexit@plt>
    997e:	e9 c6 fe ff ff       	jmp    9849 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x49>
    {{-0.5f, 0.5f, 0.5f}, {1.0f, 1.0f, 1.0f}, {1.0f, 1.0f}},

    {{-0.5f, -0.5f, 0.75f}, {1.0f, 0.0f, 0.0f}, {1.0f, 0.0f}},
    {{0.5f, -0.5f, 0.75f}, {0.0f, 1.0f, 0.0f}, {0.0f, 0.0f}},
    {{0.5f, 0.5f, 0.75f}, {0.0f, 0.0f, 1.0f}, {0.0f, 1.0f}},
    {{-0.5f, 0.5f, 0.75f}, {1.0f, 1.0f, 1.0f}, {1.0f, 1.0f}}};
    9983:	48 89 e5             	mov    %rsp,%rbp
    9986:	48 8d 35 53 d7 02 00 	lea    0x2d753(%rip),%rsi        # 370e0 <_IO_stdin_used+0xe0>
	: _M_start(), _M_finish(), _M_end_of_storage()
    998d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    9991:	31 c0                	xor    %eax,%eax
    9993:	b9 30 00 00 00       	mov    $0x30,%ecx
    9998:	48 89 ef             	mov    %rbp,%rdi
inline const std::vector<vkw::Vertex> triangle_index_data{
    999b:	c6 05 56 7d 03 00 01 	movb   $0x1,0x37d56(%rip)        # 416f8 <_ZGVN6shader19triangle_index_dataE>
    {{-0.5f, 0.5f, 0.75f}, {1.0f, 1.0f, 1.0f}, {1.0f, 1.0f}}};
    99a2:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    99a5:	bf 80 01 00 00       	mov    $0x180,%edi
    99aa:	48 89 05 7f 7d 03 00 	mov    %rax,0x37d7f(%rip)        # 41730 <_ZN6shader19triangle_index_dataE+0x10>
    99b1:	0f 11 05 68 7d 03 00 	movups %xmm0,0x37d68(%rip)        # 41720 <_ZN6shader19triangle_index_dataE>
    99b8:	e8 83 cb ff ff       	call   6540 <_Znwm@plt>
    99bd:	48 8b 0c 24          	mov    (%rsp),%rcx
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    99c1:	48 8d 90 80 01 00 00 	lea    0x180(%rax),%rdx
    99c8:	48 8d 78 08          	lea    0x8(%rax),%rdi
    99cc:	48 89 ee             	mov    %rbp,%rsi
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    99cf:	48 89 05 4a 7d 03 00 	mov    %rax,0x37d4a(%rip)        # 41720 <_ZN6shader19triangle_index_dataE>
    99d6:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    99da:	48 89 15 4f 7d 03 00 	mov    %rdx,0x37d4f(%rip)        # 41730 <_ZN6shader19triangle_index_dataE+0x10>
    99e1:	48 89 08             	mov    %rcx,(%rax)
    99e4:	48 8b 8c 24 78 01 00 	mov    0x178(%rsp),%rcx
    99eb:	00 
    99ec:	48 89 88 78 01 00 00 	mov    %rcx,0x178(%rax)
    99f3:	48 29 f8             	sub    %rdi,%rax
    99f6:	48 29 c6             	sub    %rax,%rsi
    99f9:	05 80 01 00 00       	add    $0x180,%eax
    99fe:	c1 e8 03             	shr    $0x3,%eax
    9a01:	89 c1                	mov    %eax,%ecx
    9a03:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	  this->_M_impl._M_finish =
    9a06:	48 89 15 1b 7d 03 00 	mov    %rdx,0x37d1b(%rip)        # 41728 <_ZN6shader19triangle_index_dataE+0x8>
inline const std::vector<vkw::Vertex> triangle_index_data{
    9a0d:	48 89 da             	mov    %rbx,%rdx
    9a10:	48 81 c4 80 01 00 00 	add    $0x180,%rsp
    9a17:	48 8d 35 02 7d 03 00 	lea    0x37d02(%rip),%rsi        # 41720 <_ZN6shader19triangle_index_dataE>
    9a1e:	48 8d 3d db 13 00 00 	lea    0x13db(%rip),%rdi        # ae00 <_ZNSt6vectorIN3vkw6VertexESaIS1_EED1Ev>
    9a25:	5b                   	pop    %rbx
    9a26:	5d                   	pop    %rbp
    9a27:	41 5c                	pop    %r12
    9a29:	e9 52 ca ff ff       	jmp    6480 <__cxa_atexit@plt>
    std::filesystem::current_path().string();
    9a2e:	48 89 c3             	mov    %rax,%rbx
    9a31:	e9 0a d1 ff ff       	jmp    6b40 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    9a36:	48 89 c3             	mov    %rax,%rbx
    9a39:	e9 12 d1 ff ff       	jmp    6b50 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x10>
    std::filesystem::current_path().string();
    9a3e:	48 89 c3             	mov    %rax,%rbx
    9a41:	e9 fa d0 ff ff       	jmp    6b40 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold>
    9a46:	48 89 c3             	mov    %rax,%rbx
    9a49:	e9 1f d1 ff ff       	jmp    6b6d <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x2d>
    9a4e:	66 90                	xchg   %ax,%ax

0000000000009a50 <main>:
int main() {
    9a50:	53                   	push   %rbx
    9a51:	48 83 ec 10          	sub    $0x10,%rsp
    return protected_main();
    9a55:	e8 06 12 00 00       	call   ac60 <_Z14protected_mainv>
    9a5a:	48 83 c4 10          	add    $0x10,%rsp
    9a5e:	5b                   	pop    %rbx
    9a5f:	c3                   	ret
  } catch (const std::exception &e) {
    9a60:	48 89 c7             	mov    %rax,%rdi
    9a63:	48 89 d0             	mov    %rdx,%rax
    9a66:	e9 6f d1 ff ff       	jmp    6bda <main.cold>
    9a6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000009a70 <_GLOBAL__sub_I__Z14protected_mainv>:
    9a70:	e9 8b fd ff ff       	jmp    9800 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
    9a75:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9a7c:	00 00 00 
    9a7f:	90                   	nop

0000000000009a80 <_GLOBAL__sub_I__ZN3vkh27checkValidationLayerSupportEv>:
  if (func != nullptr) {
    func(instance, debugMessenger, pAllocator);
  }
}

    9a80:	53                   	push   %rbx
    9a81:	48 8d 1d 18 7d 03 00 	lea    0x37d18(%rip),%rbx        # 417a0 <_ZStL8__ioinit>
    9a88:	48 89 df             	mov    %rbx,%rdi
    9a8b:	e8 00 ce ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    9a90:	48 8b 3d 31 75 03 00 	mov    0x37531(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    9a97:	48 89 de             	mov    %rbx,%rsi
    9a9a:	5b                   	pop    %rbx
    9a9b:	48 8d 15 e6 7a 03 00 	lea    0x37ae6(%rip),%rdx        # 41588 <__dso_handle>
    9aa2:	e9 d9 c9 ff ff       	jmp    6480 <__cxa_atexit@plt>
    9aa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    9aae:	00 00 

0000000000009ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>:
      basic_string(const _CharT* __s, size_type __n,
    9ab0:	41 54                	push   %r12
    9ab2:	49 89 f4             	mov    %rsi,%r12
    9ab5:	55                   	push   %rbp
    9ab6:	48 89 d5             	mov    %rdx,%rbp
    9ab9:	53                   	push   %rbx
    9aba:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    9abd:	48 83 c7 10          	add    $0x10,%rdi
      basic_string(const _CharT* __s, size_type __n,
    9ac1:	48 83 ec 10          	sub    $0x10,%rsp
	: allocator_type(__a), _M_p(__dat) { }
    9ac5:	48 89 3b             	mov    %rdi,(%rbx)
	if (__s == 0 && __n > 0)
    9ac8:	48 85 f6             	test   %rsi,%rsi
    9acb:	75 05                	jne    9ad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x22>
    9acd:	48 85 d2             	test   %rdx,%rdx
    9ad0:	75 64                	jne    9b36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x86>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    9ad2:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    9ad7:	48 83 fd 0f          	cmp    $0xf,%rbp
    9adb:	77 2e                	ja     9b0b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x5b>
	if (__n == 1)
    9add:	48 83 fd 01          	cmp    $0x1,%rbp
    9ae1:	75 21                	jne    9b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x54>
	__c1 = __c2;
    9ae3:	41 0f b6 04 24       	movzbl (%r12),%eax
    9ae8:	88 43 10             	mov    %al,0x10(%rbx)
	_M_set_length(__dnew);
    9aeb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    9af0:	48 8b 13             	mov    (%rbx),%rdx
      { _M_string_length = __length; }
    9af3:	48 89 43 08          	mov    %rax,0x8(%rbx)
    9af7:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      }
    9afb:	48 83 c4 10          	add    $0x10,%rsp
    9aff:	5b                   	pop    %rbx
    9b00:	5d                   	pop    %rbp
    9b01:	41 5c                	pop    %r12
    9b03:	c3                   	ret
	if (__n == 0)
    9b04:	48 85 ed             	test   %rbp,%rbp
    9b07:	74 e2                	je     9aeb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
    9b09:	eb 1e                	jmp    9b29 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x79>
	    _M_data(_M_create(__dnew, size_type(0)));
    9b0b:	48 89 df             	mov    %rbx,%rdi
    9b0e:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    9b13:	31 d2                	xor    %edx,%edx
    9b15:	e8 66 cf ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    9b1a:	48 89 03             	mov    %rax,(%rbx)
    9b1d:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    9b20:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    9b25:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    9b29:	48 89 ea             	mov    %rbp,%rdx
    9b2c:	4c 89 e6             	mov    %r12,%rsi
    9b2f:	e8 dc c8 ff ff       	call   6410 <memcpy@plt>
    9b34:	eb b5                	jmp    9aeb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
	  std::__throw_logic_error(__N("basic_string: "
    9b36:	48 8d 3d 33 d5 02 00 	lea    0x2d533(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    9b3d:	e8 3e c8 ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    9b42:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    9b49:	00 00 00 00 
    9b4d:	0f 1f 00             	nopl   (%rax)

0000000000009b50 <_GLOBAL__sub_I__ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T>:
  }
  _device = device;
  _isOwner = true;
}

    9b50:	41 54                	push   %r12
    9b52:	55                   	push   %rbp
    9b53:	48 8d 2d 2e 7a 03 00 	lea    0x37a2e(%rip),%rbp        # 41588 <__dso_handle>
    9b5a:	53                   	push   %rbx
    9b5b:	48 8d 1d 3f 7c 03 00 	lea    0x37c3f(%rip),%rbx        # 417a1 <_ZStL8__ioinit>
    9b62:	48 89 df             	mov    %rbx,%rdi
    9b65:	48 83 ec 30          	sub    $0x30,%rsp
    9b69:	e8 22 cd ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    9b6e:	48 8b 3d 53 74 03 00 	mov    0x37453(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    9b75:	48 89 ea             	mov    %rbp,%rdx
    9b78:	48 89 de             	mov    %rbx,%rsi
    9b7b:	e8 00 c9 ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    9b80:	80 3d 89 7b 03 00 00 	cmpb   $0x0,0x37b89(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    9b87:	74 12                	je     9b9b <_GLOBAL__sub_I__ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T+0x4b>
inline const std::string absoluteDirectory =
    9b89:	80 3d 78 7b 03 00 00 	cmpb   $0x0,0x37b78(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    9b90:	74 4f                	je     9be1 <_GLOBAL__sub_I__ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T+0x91>
    9b92:	48 83 c4 30          	add    $0x30,%rsp
    9b96:	5b                   	pop    %rbx
    9b97:	5d                   	pop    %rbp
    9b98:	41 5c                	pop    %r12
    9b9a:	c3                   	ret
    std::filesystem::current_path().string();
    9b9b:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    9b9e:	c6 05 6b 7b 03 00 01 	movb   $0x1,0x37b6b(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    9ba5:	4c 8d 25 d4 7b 03 00 	lea    0x37bd4(%rip),%r12        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    9bac:	48 89 df             	mov    %rbx,%rdi
    9baf:	e8 7c cd ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    9bb4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9bb9:	48 8b 34 24          	mov    (%rsp),%rsi
    9bbd:	4c 89 e7             	mov    %r12,%rdi
    9bc0:	e8 eb fe ff ff       	call   9ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    9bc5:	48 89 df             	mov    %rbx,%rdi
    9bc8:	e8 13 1f 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    9bcd:	48 8b 3d bc 73 03 00 	mov    0x373bc(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    9bd4:	48 89 ea             	mov    %rbp,%rdx
    9bd7:	4c 89 e6             	mov    %r12,%rsi
    9bda:	e8 a1 c8 ff ff       	call   6480 <__cxa_atexit@plt>
    9bdf:	eb a8                	jmp    9b89 <_GLOBAL__sub_I__ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T+0x39>
    std::filesystem::current_path().string();
    9be1:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    9be4:	c6 05 1d 7b 03 00 01 	movb   $0x1,0x37b1d(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    9beb:	4c 8d 25 6e 7b 03 00 	lea    0x37b6e(%rip),%r12        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    9bf2:	48 89 df             	mov    %rbx,%rdi
    9bf5:	e8 36 cd ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    9bfa:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9bff:	48 8b 34 24          	mov    (%rsp),%rsi
    9c03:	4c 89 e7             	mov    %r12,%rdi
    9c06:	e8 a5 fe ff ff       	call   9ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    9c0b:	48 89 df             	mov    %rbx,%rdi
    9c0e:	e8 cd 1e 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    9c13:	48 8b 3d 76 73 03 00 	mov    0x37376(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    9c1a:	48 83 c4 30          	add    $0x30,%rsp
    9c1e:	48 89 ea             	mov    %rbp,%rdx
    9c21:	5b                   	pop    %rbx
    9c22:	4c 89 e6             	mov    %r12,%rsi
    9c25:	5d                   	pop    %rbp
    9c26:	41 5c                	pop    %r12
    9c28:	e9 53 c8 ff ff       	jmp    6480 <__cxa_atexit@plt>
    std::filesystem::current_path().string();
    9c2d:	48 89 c5             	mov    %rax,%rbp
    9c30:	e9 14 dc ff ff       	jmp    7849 <_GLOBAL__sub_I__ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T.cold>
    std::filesystem::current_path().string();
    9c35:	48 89 c5             	mov    %rax,%rbp
    9c38:	e9 0c dc ff ff       	jmp    7849 <_GLOBAL__sub_I__ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T.cold>
    9c3d:	0f 1f 00             	nopl   (%rax)

0000000000009c40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>:
      basic_string(const _CharT* __s, size_type __n,
    9c40:	41 54                	push   %r12
    9c42:	49 89 f4             	mov    %rsi,%r12
    9c45:	55                   	push   %rbp
    9c46:	48 89 d5             	mov    %rdx,%rbp
    9c49:	53                   	push   %rbx
    9c4a:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    9c4d:	48 83 c7 10          	add    $0x10,%rdi
      basic_string(const _CharT* __s, size_type __n,
    9c51:	48 83 ec 10          	sub    $0x10,%rsp
	: allocator_type(__a), _M_p(__dat) { }
    9c55:	48 89 3b             	mov    %rdi,(%rbx)
	if (__s == 0 && __n > 0)
    9c58:	48 85 f6             	test   %rsi,%rsi
    9c5b:	75 05                	jne    9c62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x22>
    9c5d:	48 85 d2             	test   %rdx,%rdx
    9c60:	75 64                	jne    9cc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x86>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    9c62:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    9c67:	48 83 fd 0f          	cmp    $0xf,%rbp
    9c6b:	77 2e                	ja     9c9b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x5b>
	if (__n == 1)
    9c6d:	48 83 fd 01          	cmp    $0x1,%rbp
    9c71:	75 21                	jne    9c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x54>
	__c1 = __c2;
    9c73:	41 0f b6 04 24       	movzbl (%r12),%eax
    9c78:	88 43 10             	mov    %al,0x10(%rbx)
	_M_set_length(__dnew);
    9c7b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    9c80:	48 8b 13             	mov    (%rbx),%rdx
      { _M_string_length = __length; }
    9c83:	48 89 43 08          	mov    %rax,0x8(%rbx)
    9c87:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      }
    9c8b:	48 83 c4 10          	add    $0x10,%rsp
    9c8f:	5b                   	pop    %rbx
    9c90:	5d                   	pop    %rbp
    9c91:	41 5c                	pop    %r12
    9c93:	c3                   	ret
	if (__n == 0)
    9c94:	48 85 ed             	test   %rbp,%rbp
    9c97:	74 e2                	je     9c7b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
    9c99:	eb 1e                	jmp    9cb9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x79>
	    _M_data(_M_create(__dnew, size_type(0)));
    9c9b:	48 89 df             	mov    %rbx,%rdi
    9c9e:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    9ca3:	31 d2                	xor    %edx,%edx
    9ca5:	e8 d6 cd ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    9caa:	48 89 03             	mov    %rax,(%rbx)
    9cad:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    9cb0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    9cb5:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    9cb9:	48 89 ea             	mov    %rbp,%rdx
    9cbc:	4c 89 e6             	mov    %r12,%rsi
    9cbf:	e8 4c c7 ff ff       	call   6410 <memcpy@plt>
    9cc4:	eb b5                	jmp    9c7b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
	  std::__throw_logic_error(__N("basic_string: "
    9cc6:	48 8d 3d a3 d3 02 00 	lea    0x2d3a3(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    9ccd:	e8 ae c6 ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    9cd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    9cd9:	00 00 00 00 
    9cdd:	0f 1f 00             	nopl   (%rax)

0000000000009ce0 <_GLOBAL__sub_I__ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE>:
    }
  }
  return {};
}

    9ce0:	41 54                	push   %r12
    9ce2:	55                   	push   %rbp
    9ce3:	48 8d 2d 9e 78 03 00 	lea    0x3789e(%rip),%rbp        # 41588 <__dso_handle>
    9cea:	53                   	push   %rbx
    9ceb:	48 8d 1d 06 7b 03 00 	lea    0x37b06(%rip),%rbx        # 417f8 <_ZStL8__ioinit>
    9cf2:	48 89 df             	mov    %rbx,%rdi
    9cf5:	48 83 ec 30          	sub    $0x30,%rsp
    9cf9:	e8 92 cb ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    9cfe:	48 8b 3d c3 72 03 00 	mov    0x372c3(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    9d05:	48 89 ea             	mov    %rbp,%rdx
    9d08:	48 89 de             	mov    %rbx,%rsi
    9d0b:	e8 70 c7 ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    9d10:	80 3d f9 79 03 00 00 	cmpb   $0x0,0x379f9(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    9d17:	74 12                	je     9d2b <_GLOBAL__sub_I__ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE+0x4b>
inline const std::string absoluteDirectory =
    9d19:	80 3d e8 79 03 00 00 	cmpb   $0x0,0x379e8(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    9d20:	74 4f                	je     9d71 <_GLOBAL__sub_I__ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE+0x91>
    9d22:	48 83 c4 30          	add    $0x30,%rsp
    9d26:	5b                   	pop    %rbx
    9d27:	5d                   	pop    %rbp
    9d28:	41 5c                	pop    %r12
    9d2a:	c3                   	ret
    std::filesystem::current_path().string();
    9d2b:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    9d2e:	c6 05 db 79 03 00 01 	movb   $0x1,0x379db(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    9d35:	4c 8d 25 44 7a 03 00 	lea    0x37a44(%rip),%r12        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    9d3c:	48 89 df             	mov    %rbx,%rdi
    9d3f:	e8 ec cb ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    9d44:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9d49:	48 8b 34 24          	mov    (%rsp),%rsi
    9d4d:	4c 89 e7             	mov    %r12,%rdi
    9d50:	e8 eb fe ff ff       	call   9c40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    9d55:	48 89 df             	mov    %rbx,%rdi
    9d58:	e8 83 1d 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    9d5d:	48 8b 3d 2c 72 03 00 	mov    0x3722c(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    9d64:	48 89 ea             	mov    %rbp,%rdx
    9d67:	4c 89 e6             	mov    %r12,%rsi
    9d6a:	e8 11 c7 ff ff       	call   6480 <__cxa_atexit@plt>
    9d6f:	eb a8                	jmp    9d19 <_GLOBAL__sub_I__ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE+0x39>
    std::filesystem::current_path().string();
    9d71:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    9d74:	c6 05 8d 79 03 00 01 	movb   $0x1,0x3798d(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    9d7b:	4c 8d 25 de 79 03 00 	lea    0x379de(%rip),%r12        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    9d82:	48 89 df             	mov    %rbx,%rdi
    9d85:	e8 a6 cb ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    9d8a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9d8f:	48 8b 34 24          	mov    (%rsp),%rsi
    9d93:	4c 89 e7             	mov    %r12,%rdi
    9d96:	e8 a5 fe ff ff       	call   9c40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    9d9b:	48 89 df             	mov    %rbx,%rdi
    9d9e:	e8 3d 1d 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    9da3:	48 8b 3d e6 71 03 00 	mov    0x371e6(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    9daa:	48 83 c4 30          	add    $0x30,%rsp
    9dae:	48 89 ea             	mov    %rbp,%rdx
    9db1:	5b                   	pop    %rbx
    9db2:	4c 89 e6             	mov    %r12,%rsi
    9db5:	5d                   	pop    %rbp
    9db6:	41 5c                	pop    %r12
    9db8:	e9 c3 c6 ff ff       	jmp    6480 <__cxa_atexit@plt>
    std::filesystem::current_path().string();
    9dbd:	48 89 c5             	mov    %rax,%rbp
    9dc0:	e9 78 dd ff ff       	jmp    7b3d <_GLOBAL__sub_I__ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE.cold>
    std::filesystem::current_path().string();
    9dc5:	48 89 c5             	mov    %rax,%rbp
    9dc8:	e9 70 dd ff ff       	jmp    7b3d <_GLOBAL__sub_I__ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE.cold>
    9dcd:	0f 1f 00             	nopl   (%rax)

0000000000009dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>:
      basic_string(const _CharT* __s, size_type __n,
    9dd0:	41 54                	push   %r12
    9dd2:	49 89 f4             	mov    %rsi,%r12
    9dd5:	55                   	push   %rbp
    9dd6:	48 89 d5             	mov    %rdx,%rbp
    9dd9:	53                   	push   %rbx
    9dda:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    9ddd:	48 83 c7 10          	add    $0x10,%rdi
      basic_string(const _CharT* __s, size_type __n,
    9de1:	48 83 ec 10          	sub    $0x10,%rsp
	: allocator_type(__a), _M_p(__dat) { }
    9de5:	48 89 3b             	mov    %rdi,(%rbx)
	if (__s == 0 && __n > 0)
    9de8:	48 85 f6             	test   %rsi,%rsi
    9deb:	75 05                	jne    9df2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x22>
    9ded:	48 85 d2             	test   %rdx,%rdx
    9df0:	75 64                	jne    9e56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x86>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    9df2:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    9df7:	48 83 fd 0f          	cmp    $0xf,%rbp
    9dfb:	77 2e                	ja     9e2b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x5b>
	if (__n == 1)
    9dfd:	48 83 fd 01          	cmp    $0x1,%rbp
    9e01:	75 21                	jne    9e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x54>
	__c1 = __c2;
    9e03:	41 0f b6 04 24       	movzbl (%r12),%eax
    9e08:	88 43 10             	mov    %al,0x10(%rbx)
	_M_set_length(__dnew);
    9e0b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    9e10:	48 8b 13             	mov    (%rbx),%rdx
      { _M_string_length = __length; }
    9e13:	48 89 43 08          	mov    %rax,0x8(%rbx)
    9e17:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      }
    9e1b:	48 83 c4 10          	add    $0x10,%rsp
    9e1f:	5b                   	pop    %rbx
    9e20:	5d                   	pop    %rbp
    9e21:	41 5c                	pop    %r12
    9e23:	c3                   	ret
	if (__n == 0)
    9e24:	48 85 ed             	test   %rbp,%rbp
    9e27:	74 e2                	je     9e0b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
    9e29:	eb 1e                	jmp    9e49 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x79>
	    _M_data(_M_create(__dnew, size_type(0)));
    9e2b:	48 89 df             	mov    %rbx,%rdi
    9e2e:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    9e33:	31 d2                	xor    %edx,%edx
    9e35:	e8 46 cc ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    9e3a:	48 89 03             	mov    %rax,(%rbx)
    9e3d:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    9e40:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    9e45:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    9e49:	48 89 ea             	mov    %rbp,%rdx
    9e4c:	4c 89 e6             	mov    %r12,%rsi
    9e4f:	e8 bc c5 ff ff       	call   6410 <memcpy@plt>
    9e54:	eb b5                	jmp    9e0b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
	  std::__throw_logic_error(__N("basic_string: "
    9e56:	48 8d 3d 13 d2 02 00 	lea    0x2d213(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    9e5d:	e8 1e c5 ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    9e62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    9e69:	00 00 00 00 
    9e6d:	0f 1f 00             	nopl   (%rax)

0000000000009e70 <_GLOBAL__sub_I__ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D>:
  }
  _device = device;
  _isOwner = true;
}

    9e70:	41 54                	push   %r12
    9e72:	55                   	push   %rbp
    9e73:	48 8d 2d 0e 77 03 00 	lea    0x3770e(%rip),%rbp        # 41588 <__dso_handle>
    9e7a:	53                   	push   %rbx
    9e7b:	48 8d 1d 77 79 03 00 	lea    0x37977(%rip),%rbx        # 417f9 <_ZStL8__ioinit>
    9e82:	48 89 df             	mov    %rbx,%rdi
    9e85:	48 83 ec 30          	sub    $0x30,%rsp
    9e89:	e8 02 ca ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    9e8e:	48 8b 3d 33 71 03 00 	mov    0x37133(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    9e95:	48 89 ea             	mov    %rbp,%rdx
    9e98:	48 89 de             	mov    %rbx,%rsi
    9e9b:	e8 e0 c5 ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    9ea0:	80 3d 69 78 03 00 00 	cmpb   $0x0,0x37869(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    9ea7:	74 12                	je     9ebb <_GLOBAL__sub_I__ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x4b>
inline const std::string absoluteDirectory =
    9ea9:	80 3d 58 78 03 00 00 	cmpb   $0x0,0x37858(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    9eb0:	74 4f                	je     9f01 <_GLOBAL__sub_I__ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x91>
    9eb2:	48 83 c4 30          	add    $0x30,%rsp
    9eb6:	5b                   	pop    %rbx
    9eb7:	5d                   	pop    %rbp
    9eb8:	41 5c                	pop    %r12
    9eba:	c3                   	ret
    std::filesystem::current_path().string();
    9ebb:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    9ebe:	c6 05 4b 78 03 00 01 	movb   $0x1,0x3784b(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    9ec5:	4c 8d 25 b4 78 03 00 	lea    0x378b4(%rip),%r12        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    9ecc:	48 89 df             	mov    %rbx,%rdi
    9ecf:	e8 5c ca ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    9ed4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9ed9:	48 8b 34 24          	mov    (%rsp),%rsi
    9edd:	4c 89 e7             	mov    %r12,%rdi
    9ee0:	e8 eb fe ff ff       	call   9dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    9ee5:	48 89 df             	mov    %rbx,%rdi
    9ee8:	e8 f3 1b 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    9eed:	48 8b 3d 9c 70 03 00 	mov    0x3709c(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    9ef4:	48 89 ea             	mov    %rbp,%rdx
    9ef7:	4c 89 e6             	mov    %r12,%rsi
    9efa:	e8 81 c5 ff ff       	call   6480 <__cxa_atexit@plt>
    9eff:	eb a8                	jmp    9ea9 <_GLOBAL__sub_I__ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x39>
    std::filesystem::current_path().string();
    9f01:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    9f04:	c6 05 fd 77 03 00 01 	movb   $0x1,0x377fd(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    9f0b:	4c 8d 25 4e 78 03 00 	lea    0x3784e(%rip),%r12        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    9f12:	48 89 df             	mov    %rbx,%rdi
    9f15:	e8 16 ca ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    9f1a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9f1f:	48 8b 34 24          	mov    (%rsp),%rsi
    9f23:	4c 89 e7             	mov    %r12,%rdi
    9f26:	e8 a5 fe ff ff       	call   9dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    9f2b:	48 89 df             	mov    %rbx,%rdi
    9f2e:	e8 ad 1b 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    9f33:	48 8b 3d 56 70 03 00 	mov    0x37056(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    9f3a:	48 83 c4 30          	add    $0x30,%rsp
    9f3e:	48 89 ea             	mov    %rbp,%rdx
    9f41:	5b                   	pop    %rbx
    9f42:	4c 89 e6             	mov    %r12,%rsi
    9f45:	5d                   	pop    %rbp
    9f46:	41 5c                	pop    %r12
    9f48:	e9 33 c5 ff ff       	jmp    6480 <__cxa_atexit@plt>
    std::filesystem::current_path().string();
    9f4d:	48 89 c5             	mov    %rax,%rbp
    9f50:	e9 18 dc ff ff       	jmp    7b6d <_GLOBAL__sub_I__ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D.cold>
    std::filesystem::current_path().string();
    9f55:	48 89 c5             	mov    %rax,%rbp
    9f58:	e9 10 dc ff ff       	jmp    7b6d <_GLOBAL__sub_I__ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D.cold>
    9f5d:	0f 1f 00             	nopl   (%rax)

0000000000009f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>:
      basic_string(const _CharT* __s, size_type __n,
    9f60:	41 54                	push   %r12
    9f62:	49 89 f4             	mov    %rsi,%r12
    9f65:	55                   	push   %rbp
    9f66:	48 89 d5             	mov    %rdx,%rbp
    9f69:	53                   	push   %rbx
    9f6a:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    9f6d:	48 83 c7 10          	add    $0x10,%rdi
      basic_string(const _CharT* __s, size_type __n,
    9f71:	48 83 ec 10          	sub    $0x10,%rsp
	: allocator_type(__a), _M_p(__dat) { }
    9f75:	48 89 3b             	mov    %rdi,(%rbx)
	if (__s == 0 && __n > 0)
    9f78:	48 85 f6             	test   %rsi,%rsi
    9f7b:	75 05                	jne    9f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x22>
    9f7d:	48 85 d2             	test   %rdx,%rdx
    9f80:	75 64                	jne    9fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x86>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    9f82:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    9f87:	48 83 fd 0f          	cmp    $0xf,%rbp
    9f8b:	77 2e                	ja     9fbb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x5b>
	if (__n == 1)
    9f8d:	48 83 fd 01          	cmp    $0x1,%rbp
    9f91:	75 21                	jne    9fb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x54>
	__c1 = __c2;
    9f93:	41 0f b6 04 24       	movzbl (%r12),%eax
    9f98:	88 43 10             	mov    %al,0x10(%rbx)
	_M_set_length(__dnew);
    9f9b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    9fa0:	48 8b 13             	mov    (%rbx),%rdx
      { _M_string_length = __length; }
    9fa3:	48 89 43 08          	mov    %rax,0x8(%rbx)
    9fa7:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      }
    9fab:	48 83 c4 10          	add    $0x10,%rsp
    9faf:	5b                   	pop    %rbx
    9fb0:	5d                   	pop    %rbp
    9fb1:	41 5c                	pop    %r12
    9fb3:	c3                   	ret
	if (__n == 0)
    9fb4:	48 85 ed             	test   %rbp,%rbp
    9fb7:	74 e2                	je     9f9b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
    9fb9:	eb 1e                	jmp    9fd9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x79>
	    _M_data(_M_create(__dnew, size_type(0)));
    9fbb:	48 89 df             	mov    %rbx,%rdi
    9fbe:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    9fc3:	31 d2                	xor    %edx,%edx
    9fc5:	e8 b6 ca ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    9fca:	48 89 03             	mov    %rax,(%rbx)
    9fcd:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    9fd0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    9fd5:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    9fd9:	48 89 ea             	mov    %rbp,%rdx
    9fdc:	4c 89 e6             	mov    %r12,%rsi
    9fdf:	e8 2c c4 ff ff       	call   6410 <memcpy@plt>
    9fe4:	eb b5                	jmp    9f9b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
	  std::__throw_logic_error(__N("basic_string: "
    9fe6:	48 8d 3d 83 d0 02 00 	lea    0x2d083(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    9fed:	e8 8e c3 ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    9ff2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    9ff9:	00 00 00 00 
    9ffd:	0f 1f 00             	nopl   (%rax)

000000000000a000 <_GLOBAL__sub_I__ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE>:
  vkDestroyShaderModule(args.device.ref(), fragShaderModule, nullptr);
  _device = args.device.ref();
  _isOwner = true;
}

    a000:	41 54                	push   %r12
    a002:	55                   	push   %rbp
    a003:	48 8d 2d 7e 75 03 00 	lea    0x3757e(%rip),%rbp        # 41588 <__dso_handle>
    a00a:	53                   	push   %rbx
    a00b:	48 8d 1d e8 77 03 00 	lea    0x377e8(%rip),%rbx        # 417fa <_ZStL8__ioinit>
    a012:	48 89 df             	mov    %rbx,%rdi
    a015:	48 83 ec 30          	sub    $0x30,%rsp
    a019:	e8 72 c8 ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    a01e:	48 8b 3d a3 6f 03 00 	mov    0x36fa3(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    a025:	48 89 ea             	mov    %rbp,%rdx
    a028:	48 89 de             	mov    %rbx,%rsi
    a02b:	e8 50 c4 ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    a030:	80 3d d9 76 03 00 00 	cmpb   $0x0,0x376d9(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a037:	74 12                	je     a04b <_GLOBAL__sub_I__ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE+0x4b>
inline const std::string absoluteDirectory =
    a039:	80 3d c8 76 03 00 00 	cmpb   $0x0,0x376c8(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    a040:	74 4f                	je     a091 <_GLOBAL__sub_I__ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE+0x91>
    a042:	48 83 c4 30          	add    $0x30,%rsp
    a046:	5b                   	pop    %rbx
    a047:	5d                   	pop    %rbp
    a048:	41 5c                	pop    %r12
    a04a:	c3                   	ret
    std::filesystem::current_path().string();
    a04b:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    a04e:	c6 05 bb 76 03 00 01 	movb   $0x1,0x376bb(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a055:	4c 8d 25 24 77 03 00 	lea    0x37724(%rip),%r12        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a05c:	48 89 df             	mov    %rbx,%rdi
    a05f:	e8 cc c8 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    a064:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a069:	48 8b 34 24          	mov    (%rsp),%rsi
    a06d:	4c 89 e7             	mov    %r12,%rdi
    a070:	e8 eb fe ff ff       	call   9f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    a075:	48 89 df             	mov    %rbx,%rdi
    a078:	e8 63 1a 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a07d:	48 8b 3d 0c 6f 03 00 	mov    0x36f0c(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a084:	48 89 ea             	mov    %rbp,%rdx
    a087:	4c 89 e6             	mov    %r12,%rsi
    a08a:	e8 f1 c3 ff ff       	call   6480 <__cxa_atexit@plt>
    a08f:	eb a8                	jmp    a039 <_GLOBAL__sub_I__ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE+0x39>
    std::filesystem::current_path().string();
    a091:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    a094:	c6 05 6d 76 03 00 01 	movb   $0x1,0x3766d(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    a09b:	4c 8d 25 be 76 03 00 	lea    0x376be(%rip),%r12        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a0a2:	48 89 df             	mov    %rbx,%rdi
    a0a5:	e8 86 c8 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    a0aa:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a0af:	48 8b 34 24          	mov    (%rsp),%rsi
    a0b3:	4c 89 e7             	mov    %r12,%rdi
    a0b6:	e8 a5 fe ff ff       	call   9f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    a0bb:	48 89 df             	mov    %rbx,%rdi
    a0be:	e8 1d 1a 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a0c3:	48 8b 3d c6 6e 03 00 	mov    0x36ec6(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a0ca:	48 83 c4 30          	add    $0x30,%rsp
    a0ce:	48 89 ea             	mov    %rbp,%rdx
    a0d1:	5b                   	pop    %rbx
    a0d2:	4c 89 e6             	mov    %r12,%rsi
    a0d5:	5d                   	pop    %rbp
    a0d6:	41 5c                	pop    %r12
    a0d8:	e9 a3 c3 ff ff       	jmp    6480 <__cxa_atexit@plt>
    std::filesystem::current_path().string();
    a0dd:	48 89 c5             	mov    %rax,%rbp
    a0e0:	e9 ad dc ff ff       	jmp    7d92 <_GLOBAL__sub_I__ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE.cold>
    std::filesystem::current_path().string();
    a0e5:	48 89 c5             	mov    %rax,%rbp
    a0e8:	e9 a5 dc ff ff       	jmp    7d92 <_GLOBAL__sub_I__ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE.cold>
    a0ed:	0f 1f 00             	nopl   (%rax)

000000000000a0f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>:
      basic_string(const _CharT* __s, size_type __n,
    a0f0:	41 54                	push   %r12
    a0f2:	49 89 f4             	mov    %rsi,%r12
    a0f5:	55                   	push   %rbp
    a0f6:	48 89 d5             	mov    %rdx,%rbp
    a0f9:	53                   	push   %rbx
    a0fa:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    a0fd:	48 83 c7 10          	add    $0x10,%rdi
      basic_string(const _CharT* __s, size_type __n,
    a101:	48 83 ec 10          	sub    $0x10,%rsp
	: allocator_type(__a), _M_p(__dat) { }
    a105:	48 89 3b             	mov    %rdi,(%rbx)
	if (__s == 0 && __n > 0)
    a108:	48 85 f6             	test   %rsi,%rsi
    a10b:	75 05                	jne    a112 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x22>
    a10d:	48 85 d2             	test   %rdx,%rdx
    a110:	75 64                	jne    a176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x86>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    a112:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    a117:	48 83 fd 0f          	cmp    $0xf,%rbp
    a11b:	77 2e                	ja     a14b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x5b>
	if (__n == 1)
    a11d:	48 83 fd 01          	cmp    $0x1,%rbp
    a121:	75 21                	jne    a144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x54>
	__c1 = __c2;
    a123:	41 0f b6 04 24       	movzbl (%r12),%eax
    a128:	88 43 10             	mov    %al,0x10(%rbx)
	_M_set_length(__dnew);
    a12b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a130:	48 8b 13             	mov    (%rbx),%rdx
      { _M_string_length = __length; }
    a133:	48 89 43 08          	mov    %rax,0x8(%rbx)
    a137:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      }
    a13b:	48 83 c4 10          	add    $0x10,%rsp
    a13f:	5b                   	pop    %rbx
    a140:	5d                   	pop    %rbp
    a141:	41 5c                	pop    %r12
    a143:	c3                   	ret
	if (__n == 0)
    a144:	48 85 ed             	test   %rbp,%rbp
    a147:	74 e2                	je     a12b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
    a149:	eb 1e                	jmp    a169 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x79>
	    _M_data(_M_create(__dnew, size_type(0)));
    a14b:	48 89 df             	mov    %rbx,%rdi
    a14e:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    a153:	31 d2                	xor    %edx,%edx
    a155:	e8 26 c9 ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    a15a:	48 89 03             	mov    %rax,(%rbx)
    a15d:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    a160:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a165:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    a169:	48 89 ea             	mov    %rbp,%rdx
    a16c:	4c 89 e6             	mov    %r12,%rsi
    a16f:	e8 9c c2 ff ff       	call   6410 <memcpy@plt>
    a174:	eb b5                	jmp    a12b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
	  std::__throw_logic_error(__N("basic_string: "
    a176:	48 8d 3d f3 ce 02 00 	lea    0x2cef3(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    a17d:	e8 fe c1 ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    a182:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    a189:	00 00 00 00 
    a18d:	0f 1f 00             	nopl   (%rax)

000000000000a190 <_GLOBAL__sub_I__ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj>:
  }
  _device = device;
  _isOwner = true;
}

    a190:	41 54                	push   %r12
    a192:	55                   	push   %rbp
    a193:	48 8d 2d ee 73 03 00 	lea    0x373ee(%rip),%rbp        # 41588 <__dso_handle>
    a19a:	53                   	push   %rbx
    a19b:	48 8d 1d 59 76 03 00 	lea    0x37659(%rip),%rbx        # 417fb <_ZStL8__ioinit>
    a1a2:	48 89 df             	mov    %rbx,%rdi
    a1a5:	48 83 ec 30          	sub    $0x30,%rsp
    a1a9:	e8 e2 c6 ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    a1ae:	48 8b 3d 13 6e 03 00 	mov    0x36e13(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    a1b5:	48 89 ea             	mov    %rbp,%rdx
    a1b8:	48 89 de             	mov    %rbx,%rsi
    a1bb:	e8 c0 c2 ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    a1c0:	80 3d 49 75 03 00 00 	cmpb   $0x0,0x37549(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a1c7:	74 12                	je     a1db <_GLOBAL__sub_I__ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj+0x4b>
inline const std::string absoluteDirectory =
    a1c9:	80 3d 38 75 03 00 00 	cmpb   $0x0,0x37538(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    a1d0:	74 4f                	je     a221 <_GLOBAL__sub_I__ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj+0x91>
    a1d2:	48 83 c4 30          	add    $0x30,%rsp
    a1d6:	5b                   	pop    %rbx
    a1d7:	5d                   	pop    %rbp
    a1d8:	41 5c                	pop    %r12
    a1da:	c3                   	ret
    std::filesystem::current_path().string();
    a1db:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    a1de:	c6 05 2b 75 03 00 01 	movb   $0x1,0x3752b(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a1e5:	4c 8d 25 94 75 03 00 	lea    0x37594(%rip),%r12        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a1ec:	48 89 df             	mov    %rbx,%rdi
    a1ef:	e8 3c c7 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    a1f4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a1f9:	48 8b 34 24          	mov    (%rsp),%rsi
    a1fd:	4c 89 e7             	mov    %r12,%rdi
    a200:	e8 eb fe ff ff       	call   a0f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    a205:	48 89 df             	mov    %rbx,%rdi
    a208:	e8 d3 18 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a20d:	48 8b 3d 7c 6d 03 00 	mov    0x36d7c(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a214:	48 89 ea             	mov    %rbp,%rdx
    a217:	4c 89 e6             	mov    %r12,%rsi
    a21a:	e8 61 c2 ff ff       	call   6480 <__cxa_atexit@plt>
    a21f:	eb a8                	jmp    a1c9 <_GLOBAL__sub_I__ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj+0x39>
    std::filesystem::current_path().string();
    a221:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    a224:	c6 05 dd 74 03 00 01 	movb   $0x1,0x374dd(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    a22b:	4c 8d 25 2e 75 03 00 	lea    0x3752e(%rip),%r12        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a232:	48 89 df             	mov    %rbx,%rdi
    a235:	e8 f6 c6 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    a23a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a23f:	48 8b 34 24          	mov    (%rsp),%rsi
    a243:	4c 89 e7             	mov    %r12,%rdi
    a246:	e8 a5 fe ff ff       	call   a0f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    a24b:	48 89 df             	mov    %rbx,%rdi
    a24e:	e8 8d 18 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a253:	48 8b 3d 36 6d 03 00 	mov    0x36d36(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a25a:	48 83 c4 30          	add    $0x30,%rsp
    a25e:	48 89 ea             	mov    %rbp,%rdx
    a261:	5b                   	pop    %rbx
    a262:	4c 89 e6             	mov    %r12,%rsi
    a265:	5d                   	pop    %rbp
    a266:	41 5c                	pop    %r12
    a268:	e9 13 c2 ff ff       	jmp    6480 <__cxa_atexit@plt>
    std::filesystem::current_path().string();
    a26d:	48 89 c5             	mov    %rax,%rbp
    a270:	e9 e4 dc ff ff       	jmp    7f59 <_GLOBAL__sub_I__ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj.cold>
    std::filesystem::current_path().string();
    a275:	48 89 c5             	mov    %rax,%rbp
    a278:	e9 dc dc ff ff       	jmp    7f59 <_GLOBAL__sub_I__ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj.cold>
    a27d:	0f 1f 00             	nopl   (%rax)

000000000000a280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>:
      basic_string(const _CharT* __s, size_type __n,
    a280:	41 54                	push   %r12
    a282:	49 89 f4             	mov    %rsi,%r12
    a285:	55                   	push   %rbp
    a286:	48 89 d5             	mov    %rdx,%rbp
    a289:	53                   	push   %rbx
    a28a:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    a28d:	48 83 c7 10          	add    $0x10,%rdi
      basic_string(const _CharT* __s, size_type __n,
    a291:	48 83 ec 10          	sub    $0x10,%rsp
	: allocator_type(__a), _M_p(__dat) { }
    a295:	48 89 3b             	mov    %rdi,(%rbx)
	if (__s == 0 && __n > 0)
    a298:	48 85 f6             	test   %rsi,%rsi
    a29b:	75 05                	jne    a2a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x22>
    a29d:	48 85 d2             	test   %rdx,%rdx
    a2a0:	75 64                	jne    a306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x86>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    a2a2:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    a2a7:	48 83 fd 0f          	cmp    $0xf,%rbp
    a2ab:	77 2e                	ja     a2db <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x5b>
	if (__n == 1)
    a2ad:	48 83 fd 01          	cmp    $0x1,%rbp
    a2b1:	75 21                	jne    a2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x54>
	__c1 = __c2;
    a2b3:	41 0f b6 04 24       	movzbl (%r12),%eax
    a2b8:	88 43 10             	mov    %al,0x10(%rbx)
	_M_set_length(__dnew);
    a2bb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a2c0:	48 8b 13             	mov    (%rbx),%rdx
      { _M_string_length = __length; }
    a2c3:	48 89 43 08          	mov    %rax,0x8(%rbx)
    a2c7:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      }
    a2cb:	48 83 c4 10          	add    $0x10,%rsp
    a2cf:	5b                   	pop    %rbx
    a2d0:	5d                   	pop    %rbp
    a2d1:	41 5c                	pop    %r12
    a2d3:	c3                   	ret
	if (__n == 0)
    a2d4:	48 85 ed             	test   %rbp,%rbp
    a2d7:	74 e2                	je     a2bb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
    a2d9:	eb 1e                	jmp    a2f9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x79>
	    _M_data(_M_create(__dnew, size_type(0)));
    a2db:	48 89 df             	mov    %rbx,%rdi
    a2de:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    a2e3:	31 d2                	xor    %edx,%edx
    a2e5:	e8 96 c7 ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    a2ea:	48 89 03             	mov    %rax,(%rbx)
    a2ed:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    a2f0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a2f5:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    a2f9:	48 89 ea             	mov    %rbp,%rdx
    a2fc:	4c 89 e6             	mov    %r12,%rsi
    a2ff:	e8 0c c1 ff ff       	call   6410 <memcpy@plt>
    a304:	eb b5                	jmp    a2bb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
	  std::__throw_logic_error(__N("basic_string: "
    a306:	48 8d 3d 63 cd 02 00 	lea    0x2cd63(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    a30d:	e8 6e c0 ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    a312:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    a319:	00 00 00 00 
    a31d:	0f 1f 00             	nopl   (%rax)

000000000000a320 <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:
  instanceInfo.ppEnabledExtensionNames = requiredExtensions.data();
  vkCreateInstance(&instanceInfo, nullptr, &_instance);
  _isOwner = true;
}

    a320:	41 54                	push   %r12
    a322:	55                   	push   %rbp
    a323:	48 8d 2d 5e 72 03 00 	lea    0x3725e(%rip),%rbp        # 41588 <__dso_handle>
    a32a:	53                   	push   %rbx
    a32b:	48 8d 1d ca 74 03 00 	lea    0x374ca(%rip),%rbx        # 417fc <_ZStL8__ioinit>
    a332:	48 89 df             	mov    %rbx,%rdi
    a335:	48 83 ec 30          	sub    $0x30,%rsp
    a339:	e8 52 c5 ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    a33e:	48 8b 3d 83 6c 03 00 	mov    0x36c83(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    a345:	48 89 ea             	mov    %rbp,%rdx
    a348:	48 89 de             	mov    %rbx,%rsi
    a34b:	e8 30 c1 ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    a350:	80 3d b9 73 03 00 00 	cmpb   $0x0,0x373b9(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a357:	74 12                	je     a36b <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x4b>
inline const std::string absoluteDirectory =
    a359:	80 3d a8 73 03 00 00 	cmpb   $0x0,0x373a8(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    a360:	74 4f                	je     a3b1 <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x91>
    a362:	48 83 c4 30          	add    $0x30,%rsp
    a366:	5b                   	pop    %rbx
    a367:	5d                   	pop    %rbp
    a368:	41 5c                	pop    %r12
    a36a:	c3                   	ret
    std::filesystem::current_path().string();
    a36b:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    a36e:	c6 05 9b 73 03 00 01 	movb   $0x1,0x3739b(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a375:	4c 8d 25 04 74 03 00 	lea    0x37404(%rip),%r12        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a37c:	48 89 df             	mov    %rbx,%rdi
    a37f:	e8 ac c5 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    a384:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a389:	48 8b 34 24          	mov    (%rsp),%rsi
    a38d:	4c 89 e7             	mov    %r12,%rdi
    a390:	e8 eb fe ff ff       	call   a280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    a395:	48 89 df             	mov    %rbx,%rdi
    a398:	e8 43 17 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a39d:	48 8b 3d ec 6b 03 00 	mov    0x36bec(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a3a4:	48 89 ea             	mov    %rbp,%rdx
    a3a7:	4c 89 e6             	mov    %r12,%rsi
    a3aa:	e8 d1 c0 ff ff       	call   6480 <__cxa_atexit@plt>
    a3af:	eb a8                	jmp    a359 <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x39>
    std::filesystem::current_path().string();
    a3b1:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    a3b4:	c6 05 4d 73 03 00 01 	movb   $0x1,0x3734d(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    a3bb:	4c 8d 25 9e 73 03 00 	lea    0x3739e(%rip),%r12        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a3c2:	48 89 df             	mov    %rbx,%rdi
    a3c5:	e8 66 c5 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    a3ca:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a3cf:	48 8b 34 24          	mov    (%rsp),%rsi
    a3d3:	4c 89 e7             	mov    %r12,%rdi
    a3d6:	e8 a5 fe ff ff       	call   a280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    a3db:	48 89 df             	mov    %rbx,%rdi
    a3de:	e8 fd 16 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a3e3:	48 8b 3d a6 6b 03 00 	mov    0x36ba6(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a3ea:	48 83 c4 30          	add    $0x30,%rsp
    a3ee:	48 89 ea             	mov    %rbp,%rdx
    a3f1:	5b                   	pop    %rbx
    a3f2:	4c 89 e6             	mov    %r12,%rsi
    a3f5:	5d                   	pop    %rbp
    a3f6:	41 5c                	pop    %r12
    a3f8:	e9 83 c0 ff ff       	jmp    6480 <__cxa_atexit@plt>
    std::filesystem::current_path().string();
    a3fd:	48 89 c5             	mov    %rax,%rbp
    a400:	e9 8a db ff ff       	jmp    7f8f <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv.cold>
    std::filesystem::current_path().string();
    a405:	48 89 c5             	mov    %rax,%rbp
    a408:	e9 82 db ff ff       	jmp    7f8f <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv.cold>
    a40d:	0f 1f 00             	nopl   (%rax)

000000000000a410 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
STBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)
{
   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) c, user);
   return stbi__is_16_main(&s);
}
    a410:	41 56                	push   %r14
    a412:	41 55                	push   %r13
    a414:	41 54                	push   %r12
    a416:	55                   	push   %rbp
    a417:	48 8d 2d ee 73 03 00 	lea    0x373ee(%rip),%rbp        # 4180c <_ZStL8__ioinit>
    a41e:	53                   	push   %rbx
    a41f:	48 89 ef             	mov    %rbp,%rdi
    a422:	48 8d 1d 5f 71 03 00 	lea    0x3715f(%rip),%rbx        # 41588 <__dso_handle>
    a429:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
    a430:	e8 5b c4 ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    a435:	48 8b 3d 8c 6b 03 00 	mov    0x36b8c(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    a43c:	48 89 da             	mov    %rbx,%rdx
    a43f:	48 89 ee             	mov    %rbp,%rsi
    a442:	e8 39 c0 ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    a447:	80 3d c2 72 03 00 00 	cmpb   $0x0,0x372c2(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a44e:	74 2a                	je     a47a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a>
inline const std::vector<uint16_t> triangle_indices{0, 1, 2,  2,  3,  0,
    a450:	80 3d a9 72 03 00 00 	cmpb   $0x0,0x372a9(%rip)        # 41700 <_ZGVN6shader16triangle_indicesE>
    a457:	0f 84 b8 00 00 00    	je     a515 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x105>
inline const std::vector<vkw::Vertex> triangle_index_data{
    a45d:	80 3d 94 72 03 00 00 	cmpb   $0x0,0x37294(%rip)        # 416f8 <_ZGVN6shader19triangle_index_dataE>
    a464:	0f 84 37 01 00 00    	je     a5a1 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x191>
    a46a:	48 81 c4 90 01 00 00 	add    $0x190,%rsp
    a471:	5b                   	pop    %rbx
    a472:	5d                   	pop    %rbp
    a473:	41 5c                	pop    %r12
    a475:	41 5d                	pop    %r13
    a477:	41 5e                	pop    %r14
    a479:	c3                   	ret
    std::filesystem::current_path().string();
    a47a:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
inline const std::string absoluteDirectory =
    a47f:	c6 05 8a 72 03 00 01 	movb   $0x1,0x3728a(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a486:	48 89 ef             	mov    %rbp,%rdi
    a489:	e8 a2 c4 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
      { return _M_dataplus._M_p; }
    a48e:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
      { return _M_string_length; }
    a493:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
	: allocator_type(__a), _M_p(__dat) { }
    a498:	48 8d 05 f1 72 03 00 	lea    0x372f1(%rip),%rax        # 41790 <_ZN3vkh17absoluteDirectoryB5cxx11E+0x10>
    a49f:	48 89 05 da 72 03 00 	mov    %rax,0x372da(%rip)        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
	if (__s == 0 && __n > 0)
    a4a6:	4d 85 ed             	test   %r13,%r13
    a4a9:	75 09                	jne    a4b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4>
    a4ab:	4d 85 e4             	test   %r12,%r12
    a4ae:	0f 85 f1 01 00 00    	jne    a6a5 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x295>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    a4b4:	4c 89 64 24 08       	mov    %r12,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    a4b9:	49 83 fc 0f          	cmp    $0xf,%r12
    a4bd:	0f 87 a6 01 00 00    	ja     a669 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x259>
	if (__n == 1)
    a4c3:	49 83 fc 01          	cmp    $0x1,%r12
    a4c7:	0f 85 86 01 00 00    	jne    a653 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x243>
	__c1 = __c2;
    a4cd:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
    a4d2:	4c 8d 35 a7 72 03 00 	lea    0x372a7(%rip),%r14        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    a4d9:	88 05 b1 72 03 00    	mov    %al,0x372b1(%rip)        # 41790 <_ZN3vkh17absoluteDirectoryB5cxx11E+0x10>
	_M_set_length(__dnew);
    a4df:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a4e4:	48 8b 15 95 72 03 00 	mov    0x37295(%rip),%rdx        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    a4eb:	48 89 ef             	mov    %rbp,%rdi
      { _M_string_length = __length; }
    a4ee:	48 89 05 93 72 03 00 	mov    %rax,0x37293(%rip)        # 41788 <_ZN3vkh17absoluteDirectoryB5cxx11E+0x8>
    a4f5:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
    a4f9:	e8 e2 15 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a4fe:	48 8b 3d 8b 6a 03 00 	mov    0x36a8b(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a505:	48 89 da             	mov    %rbx,%rdx
    a508:	4c 89 f6             	mov    %r14,%rsi
    a50b:	e8 70 bf ff ff       	call   6480 <__cxa_atexit@plt>
    a510:	e9 3b ff ff ff       	jmp    a450 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x40>
                                                    8, 9, 10, 10, 11, 8};
    a515:	66 0f 6f 05 d3 ce 02 	movdqa 0x2ced3(%rip),%xmm0        # 373f0 <_ZTSN3vkw10ImageViewsE+0x20>
    a51c:	00 
    a51d:	8b 05 ed ce 02 00    	mov    0x2ceed(%rip),%eax        # 37410 <_ZTSN3vkw10ImageViewsE+0x40>
	: _M_start(), _M_finish(), _M_end_of_storage()
    a523:	31 d2                	xor    %edx,%edx
    a525:	bf 24 00 00 00       	mov    $0x24,%edi
inline const std::vector<uint16_t> triangle_indices{0, 1, 2,  2,  3,  0,
    a52a:	c6 05 cf 71 03 00 01 	movb   $0x1,0x371cf(%rip)        # 41700 <_ZGVN6shader16triangle_indicesE>
                                                    8, 9, 10, 10, 11, 8};
    a531:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
    a536:	66 0f 6f 05 c2 ce 02 	movdqa 0x2cec2(%rip),%xmm0        # 37400 <_ZTSN3vkw10ImageViewsE+0x30>
    a53d:	00 
    a53e:	89 44 24 30          	mov    %eax,0x30(%rsp)
    a542:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
    a547:	66 0f ef c0          	pxor   %xmm0,%xmm0
    a54b:	48 89 15 fe 71 03 00 	mov    %rdx,0x371fe(%rip)        # 41750 <_ZN6shader16triangle_indicesE+0x10>
    a552:	0f 11 05 e7 71 03 00 	movups %xmm0,0x371e7(%rip)        # 41740 <_ZN6shader16triangle_indicesE>
    a559:	e8 e2 bf ff ff       	call   6540 <_Znwm@plt>
    a55e:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    a563:	b9 09 00 00 00       	mov    $0x9,%ecx
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a568:	48 8d 50 24          	lea    0x24(%rax),%rdx
    a56c:	48 89 c7             	mov    %rax,%rdi
    a56f:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
    a571:	48 89 15 d8 71 03 00 	mov    %rdx,0x371d8(%rip)        # 41750 <_ZN6shader16triangle_indicesE+0x10>
inline const std::vector<uint16_t> triangle_indices{0, 1, 2,  2,  3,  0,
    a578:	48 8d 35 c1 71 03 00 	lea    0x371c1(%rip),%rsi        # 41740 <_ZN6shader16triangle_indicesE>
    a57f:	48 8d 3d 4a 08 00 00 	lea    0x84a(%rip),%rdi        # add0 <_ZNSt6vectorItSaItEED1Ev>
	  this->_M_impl._M_finish =
    a586:	48 89 15 bb 71 03 00 	mov    %rdx,0x371bb(%rip)        # 41748 <_ZN6shader16triangle_indicesE+0x8>
    a58d:	48 89 da             	mov    %rbx,%rdx
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    a590:	48 89 05 a9 71 03 00 	mov    %rax,0x371a9(%rip)        # 41740 <_ZN6shader16triangle_indicesE>
    a597:	e8 e4 be ff ff       	call   6480 <__cxa_atexit@plt>
    a59c:	e9 bc fe ff ff       	jmp    a45d <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4d>
    {{-0.5f, 0.5f, 0.75f}, {1.0f, 1.0f, 1.0f}, {1.0f, 1.0f}}};
    a5a1:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
    a5a6:	b9 30 00 00 00       	mov    $0x30,%ecx
	: _M_start(), _M_finish(), _M_end_of_storage()
    a5ab:	66 0f ef c0          	pxor   %xmm0,%xmm0
    a5af:	31 c0                	xor    %eax,%eax
    a5b1:	48 8d 35 a8 db 02 00 	lea    0x2dba8(%rip),%rsi        # 38160 <_ZSt19piecewise_construct+0x819>
    a5b8:	48 89 ef             	mov    %rbp,%rdi
inline const std::vector<vkw::Vertex> triangle_index_data{
    a5bb:	c6 05 36 71 03 00 01 	movb   $0x1,0x37136(%rip)        # 416f8 <_ZGVN6shader19triangle_index_dataE>
    {{-0.5f, 0.5f, 0.75f}, {1.0f, 1.0f, 1.0f}, {1.0f, 1.0f}}};
    a5c2:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    a5c5:	bf 80 01 00 00       	mov    $0x180,%edi
    a5ca:	48 89 05 5f 71 03 00 	mov    %rax,0x3715f(%rip)        # 41730 <_ZN6shader19triangle_index_dataE+0x10>
    a5d1:	0f 11 05 48 71 03 00 	movups %xmm0,0x37148(%rip)        # 41720 <_ZN6shader19triangle_index_dataE>
    a5d8:	e8 63 bf ff ff       	call   6540 <_Znwm@plt>
    a5dd:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a5e2:	48 8d 90 80 01 00 00 	lea    0x180(%rax),%rdx
    a5e9:	48 8d 78 08          	lea    0x8(%rax),%rdi
    a5ed:	48 89 ee             	mov    %rbp,%rsi
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    a5f0:	48 89 05 29 71 03 00 	mov    %rax,0x37129(%rip)        # 41720 <_ZN6shader19triangle_index_dataE>
    a5f7:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    a5fb:	48 89 15 2e 71 03 00 	mov    %rdx,0x3712e(%rip)        # 41730 <_ZN6shader19triangle_index_dataE+0x10>
    a602:	48 89 08             	mov    %rcx,(%rax)
    a605:	48 8b 8c 24 88 01 00 	mov    0x188(%rsp),%rcx
    a60c:	00 
    a60d:	48 89 88 78 01 00 00 	mov    %rcx,0x178(%rax)
    a614:	48 29 f8             	sub    %rdi,%rax
    a617:	48 29 c6             	sub    %rax,%rsi
    a61a:	05 80 01 00 00       	add    $0x180,%eax
    a61f:	c1 e8 03             	shr    $0x3,%eax
    a622:	89 c1                	mov    %eax,%ecx
    a624:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	  this->_M_impl._M_finish =
    a627:	48 89 15 fa 70 03 00 	mov    %rdx,0x370fa(%rip)        # 41728 <_ZN6shader19triangle_index_dataE+0x8>
inline const std::vector<vkw::Vertex> triangle_index_data{
    a62e:	48 89 da             	mov    %rbx,%rdx
    a631:	48 81 c4 90 01 00 00 	add    $0x190,%rsp
    a638:	48 8d 35 e1 70 03 00 	lea    0x370e1(%rip),%rsi        # 41720 <_ZN6shader19triangle_index_dataE>
    a63f:	48 8d 3d ba 07 00 00 	lea    0x7ba(%rip),%rdi        # ae00 <_ZNSt6vectorIN3vkw6VertexESaIS1_EED1Ev>
    a646:	5b                   	pop    %rbx
    a647:	5d                   	pop    %rbp
    a648:	41 5c                	pop    %r12
    a64a:	41 5d                	pop    %r13
    a64c:	41 5e                	pop    %r14
    a64e:	e9 2d be ff ff       	jmp    6480 <__cxa_atexit@plt>
	if (__n == 0)
    a653:	4c 8d 35 26 71 03 00 	lea    0x37126(%rip),%r14        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    a65a:	4d 85 e4             	test   %r12,%r12
    a65d:	0f 84 7c fe ff ff    	je     a4df <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcf>
      { return _M_dataplus._M_p; }
    a663:	49 8d 7e 10          	lea    0x10(%r14),%rdi
    a667:	eb 2c                	jmp    a695 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x285>
	    _M_data(_M_create(__dnew, size_type(0)));
    a669:	4c 8d 35 10 71 03 00 	lea    0x37110(%rip),%r14        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    a670:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    a675:	31 d2                	xor    %edx,%edx
    a677:	4c 89 f7             	mov    %r14,%rdi
    a67a:	e8 01 c4 ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    a67f:	48 89 05 fa 70 03 00 	mov    %rax,0x370fa(%rip)        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    a686:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    a689:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a68e:	48 89 05 fb 70 03 00 	mov    %rax,0x370fb(%rip)        # 41790 <_ZN3vkh17absoluteDirectoryB5cxx11E+0x10>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    a695:	4c 89 e2             	mov    %r12,%rdx
    a698:	4c 89 ee             	mov    %r13,%rsi
    a69b:	e8 70 bd ff ff       	call   6410 <memcpy@plt>
    a6a0:	e9 3a fe ff ff       	jmp    a4df <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcf>
	  std::__throw_logic_error(__N("basic_string: "
    a6a5:	48 8d 3d c4 c9 02 00 	lea    0x2c9c4(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    a6ac:	e8 cf bc ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    std::filesystem::current_path().string();
    a6b1:	48 89 c3             	mov    %rax,%rbx
    a6b4:	e9 e6 d8 ff ff       	jmp    7f9f <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    a6b9:	48 89 c3             	mov    %rax,%rbx
    a6bc:	e9 ee d8 ff ff       	jmp    7faf <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x10>
    a6c1:	48 89 c3             	mov    %rax,%rbx
    a6c4:	e9 03 d9 ff ff       	jmp    7fcc <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x2d>
    a6c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000a6d0 <_GLOBAL__sub_I_stbi_failure_reason>:
    a6d0:	e9 3b fd ff ff       	jmp    a410 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
    a6d5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a6dc:	00 00 00 
    a6df:	90                   	nop

000000000000a6e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>:
      basic_string(const _CharT* __s, size_type __n,
    a6e0:	41 54                	push   %r12
    a6e2:	49 89 f4             	mov    %rsi,%r12
    a6e5:	55                   	push   %rbp
    a6e6:	48 89 d5             	mov    %rdx,%rbp
    a6e9:	53                   	push   %rbx
    a6ea:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    a6ed:	48 83 c7 10          	add    $0x10,%rdi
      basic_string(const _CharT* __s, size_type __n,
    a6f1:	48 83 ec 10          	sub    $0x10,%rsp
	: allocator_type(__a), _M_p(__dat) { }
    a6f5:	48 89 3b             	mov    %rdi,(%rbx)
	if (__s == 0 && __n > 0)
    a6f8:	48 85 f6             	test   %rsi,%rsi
    a6fb:	75 05                	jne    a702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x22>
    a6fd:	48 85 d2             	test   %rdx,%rdx
    a700:	75 64                	jne    a766 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x86>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    a702:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    a707:	48 83 fd 0f          	cmp    $0xf,%rbp
    a70b:	77 2e                	ja     a73b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x5b>
	if (__n == 1)
    a70d:	48 83 fd 01          	cmp    $0x1,%rbp
    a711:	75 21                	jne    a734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x54>
	__c1 = __c2;
    a713:	41 0f b6 04 24       	movzbl (%r12),%eax
    a718:	88 43 10             	mov    %al,0x10(%rbx)
	_M_set_length(__dnew);
    a71b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a720:	48 8b 13             	mov    (%rbx),%rdx
      { _M_string_length = __length; }
    a723:	48 89 43 08          	mov    %rax,0x8(%rbx)
    a727:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      }
    a72b:	48 83 c4 10          	add    $0x10,%rsp
    a72f:	5b                   	pop    %rbx
    a730:	5d                   	pop    %rbp
    a731:	41 5c                	pop    %r12
    a733:	c3                   	ret
	if (__n == 0)
    a734:	48 85 ed             	test   %rbp,%rbp
    a737:	74 e2                	je     a71b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
    a739:	eb 1e                	jmp    a759 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x79>
	    _M_data(_M_create(__dnew, size_type(0)));
    a73b:	48 89 df             	mov    %rbx,%rdi
    a73e:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    a743:	31 d2                	xor    %edx,%edx
    a745:	e8 36 c3 ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    a74a:	48 89 03             	mov    %rax,(%rbx)
    a74d:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    a750:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a755:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    a759:	48 89 ea             	mov    %rbp,%rdx
    a75c:	4c 89 e6             	mov    %r12,%rsi
    a75f:	e8 ac bc ff ff       	call   6410 <memcpy@plt>
    a764:	eb b5                	jmp    a71b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
	  std::__throw_logic_error(__N("basic_string: "
    a766:	48 8d 3d 03 c9 02 00 	lea    0x2c903(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    a76d:	e8 0e bc ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    a772:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    a779:	00 00 00 00 
    a77d:	0f 1f 00             	nopl   (%rax)

000000000000a780 <_GLOBAL__sub_I__ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR>:
  _format = swapchainInfo.imageFormat;
  _extent = swapchainInfo.imageExtent;
  _isOwner = true;
}

    a780:	41 54                	push   %r12
    a782:	55                   	push   %rbp
    a783:	48 8d 2d fe 6d 03 00 	lea    0x36dfe(%rip),%rbp        # 41588 <__dso_handle>
    a78a:	53                   	push   %rbx
    a78b:	48 8d 1d 7b 70 03 00 	lea    0x3707b(%rip),%rbx        # 4180d <_ZStL8__ioinit>
    a792:	48 89 df             	mov    %rbx,%rdi
    a795:	48 83 ec 30          	sub    $0x30,%rsp
    a799:	e8 f2 c0 ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    a79e:	48 8b 3d 23 68 03 00 	mov    0x36823(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    a7a5:	48 89 ea             	mov    %rbp,%rdx
    a7a8:	48 89 de             	mov    %rbx,%rsi
    a7ab:	e8 d0 bc ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    a7b0:	80 3d 59 6f 03 00 00 	cmpb   $0x0,0x36f59(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a7b7:	74 12                	je     a7cb <_GLOBAL__sub_I__ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x4b>
inline const std::string absoluteDirectory =
    a7b9:	80 3d 48 6f 03 00 00 	cmpb   $0x0,0x36f48(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    a7c0:	74 4f                	je     a811 <_GLOBAL__sub_I__ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x91>
    a7c2:	48 83 c4 30          	add    $0x30,%rsp
    a7c6:	5b                   	pop    %rbx
    a7c7:	5d                   	pop    %rbp
    a7c8:	41 5c                	pop    %r12
    a7ca:	c3                   	ret
    std::filesystem::current_path().string();
    a7cb:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    a7ce:	c6 05 3b 6f 03 00 01 	movb   $0x1,0x36f3b(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a7d5:	4c 8d 25 a4 6f 03 00 	lea    0x36fa4(%rip),%r12        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a7dc:	48 89 df             	mov    %rbx,%rdi
    a7df:	e8 4c c1 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    a7e4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a7e9:	48 8b 34 24          	mov    (%rsp),%rsi
    a7ed:	4c 89 e7             	mov    %r12,%rdi
    a7f0:	e8 eb fe ff ff       	call   a6e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    a7f5:	48 89 df             	mov    %rbx,%rdi
    a7f8:	e8 e3 12 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a7fd:	48 8b 3d 8c 67 03 00 	mov    0x3678c(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a804:	48 89 ea             	mov    %rbp,%rdx
    a807:	4c 89 e6             	mov    %r12,%rsi
    a80a:	e8 71 bc ff ff       	call   6480 <__cxa_atexit@plt>
    a80f:	eb a8                	jmp    a7b9 <_GLOBAL__sub_I__ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x39>
    std::filesystem::current_path().string();
    a811:	48 89 e3             	mov    %rsp,%rbx
inline const std::string absoluteDirectory =
    a814:	c6 05 ed 6e 03 00 01 	movb   $0x1,0x36eed(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    a81b:	4c 8d 25 3e 6f 03 00 	lea    0x36f3e(%rip),%r12        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a822:	48 89 df             	mov    %rbx,%rdi
    a825:	e8 06 c1 ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    a82a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a82f:	48 8b 34 24          	mov    (%rsp),%rsi
    a833:	4c 89 e7             	mov    %r12,%rdi
    a836:	e8 a5 fe ff ff       	call   a6e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    a83b:	48 89 df             	mov    %rbx,%rdi
    a83e:	e8 9d 12 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a843:	48 8b 3d 46 67 03 00 	mov    0x36746(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a84a:	48 83 c4 30          	add    $0x30,%rsp
    a84e:	48 89 ea             	mov    %rbp,%rdx
    a851:	5b                   	pop    %rbx
    a852:	4c 89 e6             	mov    %r12,%rsi
    a855:	5d                   	pop    %rbp
    a856:	41 5c                	pop    %r12
    a858:	e9 23 bc ff ff       	jmp    6480 <__cxa_atexit@plt>
    std::filesystem::current_path().string();
    a85d:	48 89 c5             	mov    %rax,%rbp
    a860:	e9 5f d8 ff ff       	jmp    80c4 <_GLOBAL__sub_I__ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold>
    std::filesystem::current_path().string();
    a865:	48 89 c5             	mov    %rax,%rbp
    a868:	e9 57 d8 ff ff       	jmp    80c4 <_GLOBAL__sub_I__ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold>
    a86d:	0f 1f 00             	nopl   (%rax)

000000000000a870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>:
      basic_string(const _CharT* __s, size_type __n,
    a870:	41 54                	push   %r12
    a872:	49 89 f4             	mov    %rsi,%r12
    a875:	55                   	push   %rbp
    a876:	48 89 d5             	mov    %rdx,%rbp
    a879:	53                   	push   %rbx
    a87a:	48 89 fb             	mov    %rdi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    a87d:	48 83 c7 10          	add    $0x10,%rdi
      basic_string(const _CharT* __s, size_type __n,
    a881:	48 83 ec 10          	sub    $0x10,%rsp
	: allocator_type(__a), _M_p(__dat) { }
    a885:	48 89 3b             	mov    %rdi,(%rbx)
	if (__s == 0 && __n > 0)
    a888:	48 85 f6             	test   %rsi,%rsi
    a88b:	75 05                	jne    a892 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x22>
    a88d:	48 85 d2             	test   %rdx,%rdx
    a890:	75 64                	jne    a8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x86>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    a892:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    a897:	48 83 fd 0f          	cmp    $0xf,%rbp
    a89b:	77 2e                	ja     a8cb <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x5b>
	if (__n == 1)
    a89d:	48 83 fd 01          	cmp    $0x1,%rbp
    a8a1:	75 21                	jne    a8c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x54>
	__c1 = __c2;
    a8a3:	41 0f b6 04 24       	movzbl (%r12),%eax
    a8a8:	88 43 10             	mov    %al,0x10(%rbx)
	_M_set_length(__dnew);
    a8ab:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a8b0:	48 8b 13             	mov    (%rbx),%rdx
      { _M_string_length = __length; }
    a8b3:	48 89 43 08          	mov    %rax,0x8(%rbx)
    a8b7:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      }
    a8bb:	48 83 c4 10          	add    $0x10,%rsp
    a8bf:	5b                   	pop    %rbx
    a8c0:	5d                   	pop    %rbp
    a8c1:	41 5c                	pop    %r12
    a8c3:	c3                   	ret
	if (__n == 0)
    a8c4:	48 85 ed             	test   %rbp,%rbp
    a8c7:	74 e2                	je     a8ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
    a8c9:	eb 1e                	jmp    a8e9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x79>
	    _M_data(_M_create(__dnew, size_type(0)));
    a8cb:	48 89 df             	mov    %rbx,%rdi
    a8ce:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    a8d3:	31 d2                	xor    %edx,%edx
    a8d5:	e8 a6 c1 ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    a8da:	48 89 03             	mov    %rax,(%rbx)
    a8dd:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    a8e0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    a8e5:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    a8e9:	48 89 ea             	mov    %rbp,%rdx
    a8ec:	4c 89 e6             	mov    %r12,%rsi
    a8ef:	e8 1c bb ff ff       	call   6410 <memcpy@plt>
    a8f4:	eb b5                	jmp    a8ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0+0x3b>
	  std::__throw_logic_error(__N("basic_string: "
    a8f6:	48 8d 3d 73 c7 02 00 	lea    0x2c773(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    a8fd:	e8 7e ba ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    a902:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    a909:	00 00 00 00 
    a90d:	0f 1f 00             	nopl   (%rax)

000000000000a910 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:

} /* namespace rtvc */
    a910:	41 54                	push   %r12
    a912:	55                   	push   %rbp
    a913:	48 8d 2d 06 6f 03 00 	lea    0x36f06(%rip),%rbp        # 41820 <_ZStL8__ioinit>
    a91a:	53                   	push   %rbx
    a91b:	48 89 ef             	mov    %rbp,%rdi
    a91e:	48 8d 1d 63 6c 03 00 	lea    0x36c63(%rip),%rbx        # 41588 <__dso_handle>
    a925:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    a92c:	e8 5f bf ff ff       	call   6890 <_ZNSt8ios_base4InitC1Ev@plt>
    a931:	48 8b 3d 90 66 03 00 	mov    0x36690(%rip),%rdi        # 40fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    a938:	48 89 da             	mov    %rbx,%rdx
    a93b:	48 89 ee             	mov    %rbp,%rsi
    a93e:	e8 3d bb ff ff       	call   6480 <__cxa_atexit@plt>
inline const std::string absoluteDirectory =
    a943:	80 3d c6 6d 03 00 00 	cmpb   $0x0,0x36dc6(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a94a:	74 2f                	je     a97b <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b>
inline const std::string absoluteDirectory =
    a94c:	80 3d b5 6d 03 00 00 	cmpb   $0x0,0x36db5(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    a953:	0f 84 f1 00 00 00    	je     aa4a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a>
inline const std::vector<uint16_t> triangle_indices{0, 1, 2,  2,  3,  0,
    a959:	80 3d a0 6d 03 00 00 	cmpb   $0x0,0x36da0(%rip)        # 41700 <_ZGVN6shader16triangle_indicesE>
    a960:	74 5f                	je     a9c1 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1>
inline const std::vector<vkw::Vertex> triangle_index_data{
    a962:	80 3d 8f 6d 03 00 00 	cmpb   $0x0,0x36d8f(%rip)        # 416f8 <_ZGVN6shader19triangle_index_dataE>
    a969:	0f 84 24 01 00 00    	je     aa93 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x183>
    a96f:	48 81 c4 80 01 00 00 	add    $0x180,%rsp
    a976:	5b                   	pop    %rbx
    a977:	5d                   	pop    %rbp
    a978:	41 5c                	pop    %r12
    a97a:	c3                   	ret
    std::filesystem::current_path().string();
    a97b:	48 89 e5             	mov    %rsp,%rbp
inline const std::string absoluteDirectory =
    a97e:	c6 05 8b 6d 03 00 01 	movb   $0x1,0x36d8b(%rip)        # 41710 <_ZGVN3vkh17absoluteDirectoryB5cxx11E>
    a985:	4c 8d 25 f4 6d 03 00 	lea    0x36df4(%rip),%r12        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    a98c:	48 89 ef             	mov    %rbp,%rdi
    a98f:	e8 9c bf ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    a994:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a999:	48 8b 34 24          	mov    (%rsp),%rsi
    a99d:	4c 89 e7             	mov    %r12,%rdi
    a9a0:	e8 cb fe ff ff       	call   a870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    a9a5:	48 89 ef             	mov    %rbp,%rdi
    a9a8:	e8 33 11 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    a9ad:	48 8b 3d dc 65 03 00 	mov    0x365dc(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    a9b4:	48 89 da             	mov    %rbx,%rdx
    a9b7:	4c 89 e6             	mov    %r12,%rsi
    a9ba:	e8 c1 ba ff ff       	call   6480 <__cxa_atexit@plt>
    a9bf:	eb 8b                	jmp    a94c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3c>
                                                    8, 9, 10, 10, 11, 8};
    a9c1:	66 0f 6f 05 27 ca 02 	movdqa 0x2ca27(%rip),%xmm0        # 373f0 <_ZTSN3vkw10ImageViewsE+0x20>
    a9c8:	00 
    a9c9:	8b 05 41 ca 02 00    	mov    0x2ca41(%rip),%eax        # 37410 <_ZTSN3vkw10ImageViewsE+0x40>
	: _M_start(), _M_finish(), _M_end_of_storage()
    a9cf:	31 d2                	xor    %edx,%edx
    a9d1:	bf 24 00 00 00       	mov    $0x24,%edi
inline const std::vector<uint16_t> triangle_indices{0, 1, 2,  2,  3,  0,
    a9d6:	c6 05 23 6d 03 00 01 	movb   $0x1,0x36d23(%rip)        # 41700 <_ZGVN6shader16triangle_indicesE>
                                                    8, 9, 10, 10, 11, 8};
    a9dd:	0f 29 04 24          	movaps %xmm0,(%rsp)
    a9e1:	66 0f 6f 05 17 ca 02 	movdqa 0x2ca17(%rip),%xmm0        # 37400 <_ZTSN3vkw10ImageViewsE+0x30>
    a9e8:	00 
    a9e9:	89 44 24 20          	mov    %eax,0x20(%rsp)
    a9ed:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
    a9f2:	66 0f ef c0          	pxor   %xmm0,%xmm0
    a9f6:	48 89 15 53 6d 03 00 	mov    %rdx,0x36d53(%rip)        # 41750 <_ZN6shader16triangle_indicesE+0x10>
    a9fd:	0f 11 05 3c 6d 03 00 	movups %xmm0,0x36d3c(%rip)        # 41740 <_ZN6shader16triangle_indicesE>
    aa04:	e8 37 bb ff ff       	call   6540 <_Znwm@plt>
    aa09:	48 89 e6             	mov    %rsp,%rsi
    aa0c:	b9 09 00 00 00       	mov    $0x9,%ecx
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    aa11:	48 8d 50 24          	lea    0x24(%rax),%rdx
    aa15:	48 89 c7             	mov    %rax,%rdi
    aa18:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
    aa1a:	48 89 15 2f 6d 03 00 	mov    %rdx,0x36d2f(%rip)        # 41750 <_ZN6shader16triangle_indicesE+0x10>
inline const std::vector<uint16_t> triangle_indices{0, 1, 2,  2,  3,  0,
    aa21:	48 8d 35 18 6d 03 00 	lea    0x36d18(%rip),%rsi        # 41740 <_ZN6shader16triangle_indicesE>
    aa28:	48 8d 3d a1 03 00 00 	lea    0x3a1(%rip),%rdi        # add0 <_ZNSt6vectorItSaItEED1Ev>
	  this->_M_impl._M_finish =
    aa2f:	48 89 15 12 6d 03 00 	mov    %rdx,0x36d12(%rip)        # 41748 <_ZN6shader16triangle_indicesE+0x8>
    aa36:	48 89 da             	mov    %rbx,%rdx
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    aa39:	48 89 05 00 6d 03 00 	mov    %rax,0x36d00(%rip)        # 41740 <_ZN6shader16triangle_indicesE>
    aa40:	e8 3b ba ff ff       	call   6480 <__cxa_atexit@plt>
    aa45:	e9 18 ff ff ff       	jmp    a962 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x52>
    std::filesystem::current_path().string();
    aa4a:	48 89 e5             	mov    %rsp,%rbp
inline const std::string absoluteDirectory =
    aa4d:	c6 05 b4 6c 03 00 01 	movb   $0x1,0x36cb4(%rip)        # 41708 <_ZGVN4rtvc17absoluteDirectoryB5cxx11E>
    aa54:	4c 8d 25 05 6d 03 00 	lea    0x36d05(%rip),%r12        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
    std::filesystem::current_path().string();
    aa5b:	48 89 ef             	mov    %rbp,%rdi
    aa5e:	e8 cd be ff ff       	call   6930 <_ZNSt10filesystem12current_pathB5cxx11Ev@plt>
    aa63:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    aa68:	48 8b 34 24          	mov    (%rsp),%rsi
    aa6c:	4c 89 e7             	mov    %r12,%rdi
    aa6f:	e8 fc fd ff ff       	call   a870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.isra.0>
    aa74:	48 89 ef             	mov    %rbp,%rdi
    aa77:	e8 64 10 00 00       	call   bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>
inline const std::string absoluteDirectory =
    aa7c:	48 8b 3d 0d 65 03 00 	mov    0x3650d(%rip),%rdi        # 40f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    aa83:	48 89 da             	mov    %rbx,%rdx
    aa86:	4c 89 e6             	mov    %r12,%rsi
    aa89:	e8 f2 b9 ff ff       	call   6480 <__cxa_atexit@plt>
    aa8e:	e9 c6 fe ff ff       	jmp    a959 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x49>
    {{-0.5f, 0.5f, 0.75f}, {1.0f, 1.0f, 1.0f}, {1.0f, 1.0f}}};
    aa93:	48 89 e5             	mov    %rsp,%rbp
    aa96:	48 8d 35 63 e2 02 00 	lea    0x2e263(%rip),%rsi        # 38d00 <_ZL11stbi__bmask+0x580>
	: _M_start(), _M_finish(), _M_end_of_storage()
    aa9d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    aaa1:	31 c0                	xor    %eax,%eax
    aaa3:	b9 30 00 00 00       	mov    $0x30,%ecx
    aaa8:	48 89 ef             	mov    %rbp,%rdi
inline const std::vector<vkw::Vertex> triangle_index_data{
    aaab:	c6 05 46 6c 03 00 01 	movb   $0x1,0x36c46(%rip)        # 416f8 <_ZGVN6shader19triangle_index_dataE>
    {{-0.5f, 0.5f, 0.75f}, {1.0f, 1.0f, 1.0f}, {1.0f, 1.0f}}};
    aab2:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    aab5:	bf 80 01 00 00       	mov    $0x180,%edi
    aaba:	48 89 05 6f 6c 03 00 	mov    %rax,0x36c6f(%rip)        # 41730 <_ZN6shader19triangle_index_dataE+0x10>
    aac1:	0f 11 05 58 6c 03 00 	movups %xmm0,0x36c58(%rip)        # 41720 <_ZN6shader19triangle_index_dataE>
    aac8:	e8 73 ba ff ff       	call   6540 <_Znwm@plt>
    aacd:	48 8b 0c 24          	mov    (%rsp),%rcx
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    aad1:	48 8d 90 80 01 00 00 	lea    0x180(%rax),%rdx
    aad8:	48 8d 78 08          	lea    0x8(%rax),%rdi
    aadc:	48 89 ee             	mov    %rbp,%rsi
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    aadf:	48 89 05 3a 6c 03 00 	mov    %rax,0x36c3a(%rip)        # 41720 <_ZN6shader19triangle_index_dataE>
    aae6:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    aaea:	48 89 15 3f 6c 03 00 	mov    %rdx,0x36c3f(%rip)        # 41730 <_ZN6shader19triangle_index_dataE+0x10>
    aaf1:	48 89 08             	mov    %rcx,(%rax)
    aaf4:	48 8b 8c 24 78 01 00 	mov    0x178(%rsp),%rcx
    aafb:	00 
    aafc:	48 89 88 78 01 00 00 	mov    %rcx,0x178(%rax)
    ab03:	48 29 f8             	sub    %rdi,%rax
    ab06:	48 29 c6             	sub    %rax,%rsi
    ab09:	05 80 01 00 00       	add    $0x180,%eax
    ab0e:	c1 e8 03             	shr    $0x3,%eax
    ab11:	89 c1                	mov    %eax,%ecx
    ab13:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	  this->_M_impl._M_finish =
    ab16:	48 89 15 0b 6c 03 00 	mov    %rdx,0x36c0b(%rip)        # 41728 <_ZN6shader19triangle_index_dataE+0x8>
inline const std::vector<vkw::Vertex> triangle_index_data{
    ab1d:	48 89 da             	mov    %rbx,%rdx
    ab20:	48 81 c4 80 01 00 00 	add    $0x180,%rsp
    ab27:	48 8d 35 f2 6b 03 00 	lea    0x36bf2(%rip),%rsi        # 41720 <_ZN6shader19triangle_index_dataE>
    ab2e:	48 8d 3d cb 02 00 00 	lea    0x2cb(%rip),%rdi        # ae00 <_ZNSt6vectorIN3vkw6VertexESaIS1_EED1Ev>
    ab35:	5b                   	pop    %rbx
    ab36:	5d                   	pop    %rbp
    ab37:	41 5c                	pop    %r12
    ab39:	e9 42 b9 ff ff       	jmp    6480 <__cxa_atexit@plt>
    std::filesystem::current_path().string();
    ab3e:	48 89 c3             	mov    %rax,%rbx
    ab41:	e9 40 d6 ff ff       	jmp    8186 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    ab46:	48 89 c3             	mov    %rax,%rbx
    ab49:	e9 48 d6 ff ff       	jmp    8196 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x10>
    std::filesystem::current_path().string();
    ab4e:	48 89 c3             	mov    %rax,%rbx
    ab51:	e9 30 d6 ff ff       	jmp    8186 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold>
    ab56:	48 89 c3             	mov    %rax,%rbx
    ab59:	e9 55 d6 ff ff       	jmp    81b3 <_Z41__static_initialization_and_destruction_0ii.constprop.0.cold+0x2d>
    ab5e:	66 90                	xchg   %ax,%ax

000000000000ab60 <_GLOBAL__sub_I__ZN4rtvc9VulkanApp17recreateSwapchainEv>:
    ab60:	e9 ab fd ff ff       	jmp    a910 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
    ab65:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ab6c:	00 00 00 
    ab6f:	90                   	nop

000000000000ab70 <_start>:
    ab70:	31 ed                	xor    %ebp,%ebp
    ab72:	49 89 d1             	mov    %rdx,%r9
    ab75:	5e                   	pop    %rsi
    ab76:	48 89 e2             	mov    %rsp,%rdx
    ab79:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    ab7d:	50                   	push   %rax
    ab7e:	54                   	push   %rsp
    ab7f:	45 31 c0             	xor    %r8d,%r8d
    ab82:	31 c9                	xor    %ecx,%ecx
    ab84:	48 8d 3d c5 ee ff ff 	lea    -0x113b(%rip),%rdi        # 9a50 <main>
    ab8b:	ff 15 07 64 03 00    	call   *0x36407(%rip)        # 40f98 <__libc_start_main@GLIBC_2.34>
    ab91:	f4                   	hlt
    ab92:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ab99:	00 00 00 
    ab9c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000aba0 <deregister_tm_clones>:
    aba0:	48 8d 3d 29 6a 03 00 	lea    0x36a29(%rip),%rdi        # 415d0 <__TMC_END__>
    aba7:	48 8d 05 22 6a 03 00 	lea    0x36a22(%rip),%rax        # 415d0 <__TMC_END__>
    abae:	48 39 f8             	cmp    %rdi,%rax
    abb1:	74 15                	je     abc8 <deregister_tm_clones+0x28>
    abb3:	48 8b 05 f6 63 03 00 	mov    0x363f6(%rip),%rax        # 40fb0 <_ITM_deregisterTMCloneTable@Base>
    abba:	48 85 c0             	test   %rax,%rax
    abbd:	74 09                	je     abc8 <deregister_tm_clones+0x28>
    abbf:	ff e0                	jmp    *%rax
    abc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    abc8:	c3                   	ret
    abc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000abd0 <register_tm_clones>:
    abd0:	48 8d 3d f9 69 03 00 	lea    0x369f9(%rip),%rdi        # 415d0 <__TMC_END__>
    abd7:	48 8d 35 f2 69 03 00 	lea    0x369f2(%rip),%rsi        # 415d0 <__TMC_END__>
    abde:	48 29 fe             	sub    %rdi,%rsi
    abe1:	48 89 f0             	mov    %rsi,%rax
    abe4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    abe8:	48 c1 f8 03          	sar    $0x3,%rax
    abec:	48 01 c6             	add    %rax,%rsi
    abef:	48 d1 fe             	sar    %rsi
    abf2:	74 14                	je     ac08 <register_tm_clones+0x38>
    abf4:	48 8b 05 c5 63 03 00 	mov    0x363c5(%rip),%rax        # 40fc0 <_ITM_registerTMCloneTable@Base>
    abfb:	48 85 c0             	test   %rax,%rax
    abfe:	74 08                	je     ac08 <register_tm_clones+0x38>
    ac00:	ff e0                	jmp    *%rax
    ac02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    ac08:	c3                   	ret
    ac09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000ac10 <__do_global_dtors_aux>:
    ac10:	f3 0f 1e fa          	endbr64
    ac14:	80 3d d5 6a 03 00 00 	cmpb   $0x0,0x36ad5(%rip)        # 416f0 <completed.0>
    ac1b:	75 2b                	jne    ac48 <__do_global_dtors_aux+0x38>
    ac1d:	55                   	push   %rbp
    ac1e:	48 83 3d 62 63 03 00 	cmpq   $0x0,0x36362(%rip)        # 40f88 <__cxa_finalize@GLIBC_2.2.5>
    ac25:	00 
    ac26:	48 89 e5             	mov    %rsp,%rbp
    ac29:	74 0c                	je     ac37 <__do_global_dtors_aux+0x27>
    ac2b:	48 8b 3d 56 69 03 00 	mov    0x36956(%rip),%rdi        # 41588 <__dso_handle>
    ac32:	e8 f9 be ff ff       	call   6b30 <__cxa_finalize@plt>
    ac37:	e8 64 ff ff ff       	call   aba0 <deregister_tm_clones>
    ac3c:	c6 05 ad 6a 03 00 01 	movb   $0x1,0x36aad(%rip)        # 416f0 <completed.0>
    ac43:	5d                   	pop    %rbp
    ac44:	c3                   	ret
    ac45:	0f 1f 00             	nopl   (%rax)
    ac48:	c3                   	ret
    ac49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000ac50 <frame_dummy>:
    ac50:	f3 0f 1e fa          	endbr64
    ac54:	e9 77 ff ff ff       	jmp    abd0 <register_tm_clones>
    ac59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000ac60 <_Z14protected_mainv>:
int protected_main() {
    ac60:	41 56                	push   %r14
  auto app = new rtvc::VulkanApp{};
    ac62:	bf 90 04 00 00       	mov    $0x490,%edi
int protected_main() {
    ac67:	41 55                	push   %r13
    ac69:	41 54                	push   %r12
    ac6b:	55                   	push   %rbp
    ac6c:	53                   	push   %rbx
    ac6d:	48 83 ec 30          	sub    $0x30,%rsp
  auto app = new rtvc::VulkanApp{};
    ac71:	e8 ca b8 ff ff       	call   6540 <_Znwm@plt>
    ac76:	48 89 c7             	mov    %rax,%rdi
    ac79:	48 89 c3             	mov    %rax,%rbx
    ac7c:	e8 9f 90 02 00       	call   33d20 <_ZN4rtvc9VulkanAppC1Ev>
  app->run();
    ac81:	48 89 df             	mov    %rbx,%rdi
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    ac84:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
    ac89:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
    ac8e:	e8 ad 8d 02 00       	call   33a40 <_ZN4rtvc9VulkanApp3runEv>
      { return _M_string_length; }
    ac93:	48 8b 2d ee 6a 03 00 	mov    0x36aee(%rip),%rbp        # 41788 <_ZN3vkh17absoluteDirectoryB5cxx11E+0x8>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    ac9a:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
      { return _M_dataplus._M_p; }
    ac9f:	4c 8b 35 da 6a 03 00 	mov    0x36ada(%rip),%r14        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    aca6:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
    acab:	48 83 fd 0f          	cmp    $0xf,%rbp
    acaf:	0f 87 ab 00 00 00    	ja     ad60 <_Z14protected_mainv+0x100>
	if (__n == 1)
    acb5:	48 83 fd 01          	cmp    $0x1,%rbp
    acb9:	0f 85 91 00 00 00    	jne    ad50 <_Z14protected_mainv+0xf0>
	__c1 = __c2;
    acbf:	41 0f b6 06          	movzbl (%r14),%eax
    acc3:	88 44 24 20          	mov    %al,0x20(%rsp)
      }
    acc7:	4c 89 e0             	mov    %r12,%rax
      { _M_string_length = __length; }
    acca:	48 89 6c 24 18       	mov    %rbp,0x18(%rsp)
	__c1 = __c2;
    accf:	c6 04 28 00          	movb   $0x0,(%rax,%rbp,1)
	if (this->max_size() - (this->size() - __n1) < __n2)
    acd3:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    acda:	ff ff 3f 
    acdd:	48 2b 44 24 18       	sub    0x18(%rsp),%rax
    ace2:	48 83 f8 08          	cmp    $0x8,%rax
    ace6:	0f 86 af 00 00 00    	jbe    ad9b <_Z14protected_mainv+0x13b>
	return _M_append(__s, __n);
    acec:	ba 09 00 00 00       	mov    $0x9,%edx
    acf1:	48 8d 35 7d c5 02 00 	lea    0x2c57d(%rip),%rsi        # 37275 <_IO_stdin_used+0x275>
    acf8:	4c 89 ef             	mov    %r13,%rdi
    acfb:	e8 80 b4 ff ff       	call   6180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
  app->writeInfo(vkh::absoluteDirectory + "/info.log");
    ad00:	4c 89 ee             	mov    %r13,%rsi
    ad03:	48 89 df             	mov    %rbx,%rdi
    ad06:	e8 e5 9d 02 00       	call   34af0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return _M_dataplus._M_p; }
    ad0b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	if (!_M_is_local())
    ad10:	4c 39 e7             	cmp    %r12,%rdi
    ad13:	74 0e                	je     ad23 <_Z14protected_mainv+0xc3>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    ad15:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    ad1a:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    ad1e:	e8 3d b8 ff ff       	call   6560 <_ZdlPvm@plt>
  delete app;
    ad23:	48 89 df             	mov    %rbx,%rdi
    ad26:	e8 f5 0d 00 00       	call   bb20 <_ZN4rtvc9VulkanAppD1Ev>
    ad2b:	48 89 df             	mov    %rbx,%rdi
    ad2e:	be 90 04 00 00       	mov    $0x490,%esi
    ad33:	e8 28 b8 ff ff       	call   6560 <_ZdlPvm@plt>
}
    ad38:	48 83 c4 30          	add    $0x30,%rsp
    ad3c:	31 c0                	xor    %eax,%eax
    ad3e:	5b                   	pop    %rbx
    ad3f:	5d                   	pop    %rbp
    ad40:	41 5c                	pop    %r12
    ad42:	41 5d                	pop    %r13
    ad44:	41 5e                	pop    %r14
    ad46:	c3                   	ret
    ad47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ad4e:	00 00 
	if (__n == 0)
    ad50:	48 85 ed             	test   %rbp,%rbp
    ad53:	75 52                	jne    ada7 <_Z14protected_mainv+0x147>
    ad55:	4c 89 e0             	mov    %r12,%rax
    ad58:	e9 6d ff ff ff       	jmp    acca <_Z14protected_mainv+0x6a>
    ad5d:	0f 1f 00             	nopl   (%rax)
	    _M_data(_M_create(__dnew, size_type(0)));
    ad60:	4c 89 ef             	mov    %r13,%rdi
    ad63:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    ad68:	31 d2                	xor    %edx,%edx
    ad6a:	e8 11 bd ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    ad6f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    ad74:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    ad77:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    ad7c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    ad81:	48 89 ea             	mov    %rbp,%rdx
    ad84:	4c 89 f6             	mov    %r14,%rsi
    ad87:	e8 84 b6 ff ff       	call   6410 <memcpy@plt>
	_M_set_length(__dnew);
    ad8c:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
      { return _M_dataplus._M_p; }
    ad91:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    ad96:	e9 2f ff ff ff       	jmp    acca <_Z14protected_mainv+0x6a>
	  __throw_length_error(__N(__s));
    ad9b:	48 8d 3d be c4 02 00 	lea    0x2c4be(%rip),%rdi        # 37260 <_IO_stdin_used+0x260>
    ada2:	e8 d9 b4 ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
      { return _M_dataplus._M_p; }
    ada7:	4c 89 e7             	mov    %r12,%rdi
    adaa:	eb d5                	jmp    ad81 <_Z14protected_mainv+0x121>
  auto app = new rtvc::VulkanApp{};
    adac:	48 89 c5             	mov    %rax,%rbp
    adaf:	e9 d1 bd ff ff       	jmp    6b85 <_Z14protected_mainv.cold>
    adb4:	48 89 c3             	mov    %rax,%rbx
    adb7:	e9 de bd ff ff       	jmp    6b9a <_Z14protected_mainv.cold+0x15>
    adbc:	48 89 c3             	mov    %rax,%rbx
    adbf:	e9 f6 bd ff ff       	jmp    6bba <_Z14protected_mainv.cold+0x35>
    adc4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    adcb:	00 00 00 
    adce:	66 90                	xchg   %ax,%ax

000000000000add0 <_ZNSt6vectorItSaItEED1Ev>:
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    add0:	48 8b 07             	mov    (%rdi),%rax
	if (__p)
    add3:	48 85 c0             	test   %rax,%rax
    add6:	74 18                	je     adf0 <_ZNSt6vectorItSaItEED1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    add8:	48 8b 77 10          	mov    0x10(%rdi),%rsi
    addc:	48 89 c7             	mov    %rax,%rdi
    addf:	48 29 c6             	sub    %rax,%rsi
    ade2:	e9 79 b7 ff ff       	jmp    6560 <_ZdlPvm@plt>
    ade7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    adee:	00 00 
      }
    adf0:	c3                   	ret
    adf1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    adf8:	00 00 00 
    adfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000ae00 <_ZNSt6vectorIN3vkw6VertexESaIS1_EED1Ev>:
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    ae00:	48 8b 07             	mov    (%rdi),%rax
	if (__p)
    ae03:	48 85 c0             	test   %rax,%rax
    ae06:	74 18                	je     ae20 <_ZNSt6vectorIN3vkw6VertexESaIS1_EED1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    ae08:	48 8b 77 10          	mov    0x10(%rdi),%rsi
    ae0c:	48 89 c7             	mov    %rax,%rdi
    ae0f:	48 29 c6             	sub    %rax,%rsi
    ae12:	e9 49 b7 ff ff       	jmp    6560 <_ZdlPvm@plt>
    ae17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ae1e:	00 00 
      }
    ae20:	c3                   	ret
    ae21:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ae28:	00 00 00 
    ae2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000ae30 <_ZN3vkw6DeviceD1Ev>:
  virtual ~Device() { _destroyVkData(); }
    ae30:	48 8d 05 d9 56 03 00 	lea    0x356d9(%rip),%rax        # 40510 <_ZTVN3vkw6DeviceE+0x10>
    if (_isOwner) {
    ae37:	80 7f 30 00          	cmpb   $0x0,0x30(%rdi)
  virtual ~Device() { _destroyVkData(); }
    ae3b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    ae3e:	75 08                	jne    ae48 <_ZN3vkw6DeviceD1Ev+0x18>
    ae40:	c3                   	ret
    ae41:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~Device() { _destroyVkData(); }
    ae48:	48 83 ec 08          	sub    $0x8,%rsp
      vkh::destroyDevice(_device, _pAllocator);
    ae4c:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    ae50:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    ae54:	e8 27 2f 00 00       	call   dd80 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>
  virtual ~Device() { _destroyVkData(); }
    ae59:	48 83 c4 08          	add    $0x8,%rsp
    ae5d:	c3                   	ret
    ae5e:	66 90                	xchg   %ax,%ax

000000000000ae60 <_ZN3vkw6DeviceD0Ev>:
    ae60:	53                   	push   %rbx
    ae61:	48 8d 05 a8 56 03 00 	lea    0x356a8(%rip),%rax        # 40510 <_ZTVN3vkw6DeviceE+0x10>
    if (_isOwner) {
    ae68:	80 7f 30 00          	cmpb   $0x0,0x30(%rdi)
  virtual ~Device() { _destroyVkData(); }
    ae6c:	48 89 fb             	mov    %rdi,%rbx
    ae6f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    ae72:	75 14                	jne    ae88 <_ZN3vkw6DeviceD0Ev+0x28>
  virtual ~Device() { _destroyVkData(); }
    ae74:	48 89 df             	mov    %rbx,%rdi
    ae77:	be 38 00 00 00       	mov    $0x38,%esi
    ae7c:	5b                   	pop    %rbx
    ae7d:	e9 de b6 ff ff       	jmp    6560 <_ZdlPvm@plt>
    ae82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkh::destroyDevice(_device, _pAllocator);
    ae88:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    ae8c:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    ae90:	e8 eb 2e 00 00       	call   dd80 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>
  virtual ~Device() { _destroyVkData(); }
    ae95:	48 89 df             	mov    %rbx,%rdi
    ae98:	be 38 00 00 00       	mov    $0x38,%esi
    ae9d:	5b                   	pop    %rbx
    ae9e:	e9 bd b6 ff ff       	jmp    6560 <_ZdlPvm@plt>
    aea3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    aeaa:	00 00 00 
    aead:	0f 1f 00             	nopl   (%rax)

000000000000aeb0 <_ZN3vkw8InstanceD1Ev>:
  virtual ~Instance() { _destroyVkData(); }
    aeb0:	48 8d 05 99 56 03 00 	lea    0x35699(%rip),%rax        # 40550 <_ZTVN3vkw8InstanceE+0x10>
    if (_isOwner) {
    aeb7:	80 7f 18 00          	cmpb   $0x0,0x18(%rdi)
  virtual ~Instance() { _destroyVkData(); }
    aebb:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    aebe:	75 08                	jne    aec8 <_ZN3vkw8InstanceD1Ev+0x18>
    aec0:	c3                   	ret
    aec1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~Instance() { _destroyVkData(); }
    aec8:	48 83 ec 08          	sub    $0x8,%rsp
      vkDestroyInstance(_instance, _pAllocator);
    aecc:	48 8b 77 10          	mov    0x10(%rdi),%rsi
    aed0:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    aed4:	e8 97 b6 ff ff       	call   6570 <vkDestroyInstance@plt>
  virtual ~Instance() { _destroyVkData(); }
    aed9:	48 83 c4 08          	add    $0x8,%rsp
    aedd:	c3                   	ret
    aede:	66 90                	xchg   %ax,%ax

000000000000aee0 <_ZN3vkw8InstanceD0Ev>:
    aee0:	53                   	push   %rbx
    aee1:	48 8d 05 68 56 03 00 	lea    0x35668(%rip),%rax        # 40550 <_ZTVN3vkw8InstanceE+0x10>
    if (_isOwner) {
    aee8:	80 7f 18 00          	cmpb   $0x0,0x18(%rdi)
  virtual ~Instance() { _destroyVkData(); }
    aeec:	48 89 fb             	mov    %rdi,%rbx
    aeef:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    aef2:	75 14                	jne    af08 <_ZN3vkw8InstanceD0Ev+0x28>
  virtual ~Instance() { _destroyVkData(); }
    aef4:	48 89 df             	mov    %rbx,%rdi
    aef7:	be 50 00 00 00       	mov    $0x50,%esi
    aefc:	5b                   	pop    %rbx
    aefd:	e9 5e b6 ff ff       	jmp    6560 <_ZdlPvm@plt>
    af02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyInstance(_instance, _pAllocator);
    af08:	48 8b 77 10          	mov    0x10(%rdi),%rsi
    af0c:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    af10:	e8 5b b6 ff ff       	call   6570 <vkDestroyInstance@plt>
  virtual ~Instance() { _destroyVkData(); }
    af15:	48 89 df             	mov    %rbx,%rdi
    af18:	be 50 00 00 00       	mov    $0x50,%esi
    af1d:	5b                   	pop    %rbx
    af1e:	e9 3d b6 ff ff       	jmp    6560 <_ZdlPvm@plt>
    af23:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    af2a:	00 00 00 
    af2d:	0f 1f 00             	nopl   (%rax)

000000000000af30 <_ZN3vkw4GLFWD1Ev>:
    af30:	48 8d 05 99 56 03 00 	lea    0x35699(%rip),%rax        # 405d0 <_ZTVN3vkw4GLFWE+0x10>
    af37:	48 83 ec 08          	sub    $0x8,%rsp
    af3b:	48 89 07             	mov    %rax,(%rdi)
    af3e:	e8 3d b6 ff ff       	call   6580 <glfwTerminate@plt>
    af43:	48 83 c4 08          	add    $0x8,%rsp
    af47:	c3                   	ret
    af48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    af4f:	00 

000000000000af50 <_ZN3vkw4GLFWD0Ev>:
    af50:	48 8d 05 79 56 03 00 	lea    0x35679(%rip),%rax        # 405d0 <_ZTVN3vkw4GLFWE+0x10>
    af57:	53                   	push   %rbx
    af58:	48 89 fb             	mov    %rdi,%rbx
    af5b:	48 89 07             	mov    %rax,(%rdi)
    af5e:	e8 1d b6 ff ff       	call   6580 <glfwTerminate@plt>
    af63:	48 89 df             	mov    %rbx,%rdi
    af66:	be 08 00 00 00       	mov    $0x8,%esi
    af6b:	5b                   	pop    %rbx
    af6c:	e9 ef b5 ff ff       	jmp    6560 <_ZdlPvm@plt>
    af71:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    af78:	00 00 00 
    af7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000af80 <_ZN3vkw10ImageViewsD1Ev>:
  ImageViews &operator=(ImageViews &&rhs) {
    _moveDataFrom(std::move(rhs));
    return *this;
  }

  virtual ~ImageViews() { _destroyVkData(); }
    af80:	41 54                	push   %r12
    af82:	48 8d 05 0f 57 03 00 	lea    0x3570f(%rip),%rax        # 40698 <_ZTVN3vkw10ImageViewsE+0x10>
    af89:	55                   	push   %rbp
    af8a:	48 89 fd             	mov    %rdi,%rbp
    af8d:	53                   	push   %rbx
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    af8e:	80 7d 30 00          	cmpb   $0x0,0x30(%rbp)
  virtual ~ImageViews() { _destroyVkData(); }
    af92:	48 89 07             	mov    %rax,(%rdi)
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
    af95:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    if (_isOwner) {
    af99:	74 36                	je     afd1 <_ZN3vkw10ImageViewsD1Ev+0x51>
    af9b:	4c 8b 65 10          	mov    0x10(%rbp),%r12
      for (auto &imageView : _imageViews) {
    af9f:	49 39 fc             	cmp    %rdi,%r12
    afa2:	74 29                	je     afcd <_ZN3vkw10ImageViewsD1Ev+0x4d>
    afa4:	48 89 fb             	mov    %rdi,%rbx
    afa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    afae:	00 00 
        vkDestroyImageView(_device, imageView, _pAllocator);
    afb0:	48 8b 33             	mov    (%rbx),%rsi
    afb3:	48 8b 55 28          	mov    0x28(%rbp),%rdx
      for (auto &imageView : _imageViews) {
    afb7:	48 83 c3 08          	add    $0x8,%rbx
        vkDestroyImageView(_device, imageView, _pAllocator);
    afbb:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
    afbf:	e8 ac ba ff ff       	call   6a70 <vkDestroyImageView@plt>
      for (auto &imageView : _imageViews) {
    afc4:	49 39 dc             	cmp    %rbx,%r12
    afc7:	75 e7                	jne    afb0 <_ZN3vkw10ImageViewsD1Ev+0x30>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    afc9:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
      }
      _isOwner = false;
    afcd:	c6 45 30 00          	movb   $0x0,0x30(%rbp)
	if (__p)
    afd1:	48 85 ff             	test   %rdi,%rdi
    afd4:	74 1a                	je     aff0 <_ZN3vkw10ImageViewsD1Ev+0x70>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    afd6:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  virtual ~ImageViews() { _destroyVkData(); }
    afda:	5b                   	pop    %rbx
    afdb:	5d                   	pop    %rbp
    afdc:	41 5c                	pop    %r12
    afde:	48 29 fe             	sub    %rdi,%rsi
    afe1:	e9 7a b5 ff ff       	jmp    6560 <_ZdlPvm@plt>
    afe6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    afed:	00 00 00 
    aff0:	5b                   	pop    %rbx
    aff1:	5d                   	pop    %rbp
    aff2:	41 5c                	pop    %r12
    aff4:	c3                   	ret
    aff5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    affc:	00 00 00 
    afff:	90                   	nop

000000000000b000 <_ZN3vkw12FramebuffersD1Ev>:
  Framebuffers &operator=(const Framebuffers &) = delete;
  Framebuffers &operator=(Framebuffers &&rhs) {
    _moveDataFrom(std::move(rhs));
    return *this;
  }
  virtual ~Framebuffers() { _destroyVkData(); }
    b000:	41 54                	push   %r12
    b002:	48 8d 05 27 55 03 00 	lea    0x35527(%rip),%rax        # 40530 <_ZTVN3vkw12FramebuffersE+0x10>
    b009:	55                   	push   %rbp
    b00a:	48 89 fd             	mov    %rdi,%rbp
    b00d:	53                   	push   %rbx
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    b00e:	80 7d 30 00          	cmpb   $0x0,0x30(%rbp)
  virtual ~Framebuffers() { _destroyVkData(); }
    b012:	48 89 07             	mov    %rax,(%rdi)
    b015:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    if (_isOwner) {
    b019:	74 36                	je     b051 <_ZN3vkw12FramebuffersD1Ev+0x51>
    b01b:	4c 8b 65 10          	mov    0x10(%rbp),%r12
      for (auto &framebuffer : _framebuffers) {
    b01f:	49 39 fc             	cmp    %rdi,%r12
    b022:	74 29                	je     b04d <_ZN3vkw12FramebuffersD1Ev+0x4d>
    b024:	48 89 fb             	mov    %rdi,%rbx
    b027:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b02e:	00 00 
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    b030:	48 8b 33             	mov    (%rbx),%rsi
    b033:	48 8b 55 28          	mov    0x28(%rbp),%rdx
      for (auto &framebuffer : _framebuffers) {
    b037:	48 83 c3 08          	add    $0x8,%rbx
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    b03b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
    b03f:	e8 9c b9 ff ff       	call   69e0 <vkDestroyFramebuffer@plt>
      for (auto &framebuffer : _framebuffers) {
    b044:	49 39 dc             	cmp    %rbx,%r12
    b047:	75 e7                	jne    b030 <_ZN3vkw12FramebuffersD1Ev+0x30>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    b049:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
      }
      _isOwner = false;
    b04d:	c6 45 30 00          	movb   $0x0,0x30(%rbp)
	if (__p)
    b051:	48 85 ff             	test   %rdi,%rdi
    b054:	74 1a                	je     b070 <_ZN3vkw12FramebuffersD1Ev+0x70>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    b056:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  virtual ~Framebuffers() { _destroyVkData(); }
    b05a:	5b                   	pop    %rbx
    b05b:	5d                   	pop    %rbp
    b05c:	41 5c                	pop    %r12
    b05e:	48 29 fe             	sub    %rdi,%rsi
    b061:	e9 fa b4 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b066:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b06d:	00 00 00 
    b070:	5b                   	pop    %rbx
    b071:	5d                   	pop    %rbp
    b072:	41 5c                	pop    %r12
    b074:	c3                   	ret
    b075:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b07c:	00 00 00 
    b07f:	90                   	nop

000000000000b080 <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj>:
  CUSTOM virtual void _customInitialize(VkDevice device,
    b080:	41 57                	push   %r15
    VkBufferCreateInfo bufferInfo{};
    b082:	66 0f ef c0          	pxor   %xmm0,%xmm0
  CUSTOM virtual void _customInitialize(VkDevice device,
    b086:	49 89 d7             	mov    %rdx,%r15
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
    b089:	31 d2                	xor    %edx,%edx
  CUSTOM virtual void _customInitialize(VkDevice device,
    b08b:	41 56                	push   %r14
    b08d:	41 55                	push   %r13
    b08f:	41 54                	push   %r12
    b091:	49 89 fc             	mov    %rdi,%r12
    b094:	55                   	push   %rbp
    b095:	48 89 f5             	mov    %rsi,%rbp
    b098:	53                   	push   %rbx
    b099:	44 89 cb             	mov    %r9d,%ebx
    b09c:	48 81 ec 98 02 00 00 	sub    $0x298,%rsp
    VkBufferCreateInfo bufferInfo{};
    b0a3:	0f 11 44 24 54       	movups %xmm0,0x54(%rsp)
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
    b0a8:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
    bufferInfo.size = size;
    b0ad:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
    b0b2:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
    b0b6:	48 89 ef             	mov    %rbp,%rdi
    VkBufferCreateInfo bufferInfo{};
    b0b9:	c7 44 24 74 00 00 00 	movl   $0x0,0x74(%rsp)
    b0c0:	00 
    bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
    b0c1:	c7 44 24 40 0c 00 00 	movl   $0xc,0x40(%rsp)
    b0c8:	00 
    bufferInfo.usage = usage;
    b0c9:	44 89 44 24 60       	mov    %r8d,0x60(%rsp)
    VkBufferCreateInfo bufferInfo{};
    b0ce:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
    b0d3:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
    b0d8:	e8 33 b4 ff ff       	call   6510 <vkCreateBuffer@plt>
    b0dd:	85 c0                	test   %eax,%eax
    b0df:	0f 85 cc 00 00 00    	jne    b1b1 <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0x131>
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
    b0e5:	49 8b 74 24 08       	mov    0x8(%r12),%rsi
    b0ea:	48 89 e2             	mov    %rsp,%rdx
    b0ed:	48 89 ef             	mov    %rbp,%rdi
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
    b0f0:	4c 8d b4 24 80 00 00 	lea    0x80(%rsp),%r14
    b0f7:	00 
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
    b0f8:	e8 b3 af ff ff       	call   60b0 <vkGetBufferMemoryRequirements@plt>
    allocInfo.allocationSize = memoryRequirements.size;
    b0fd:	48 8b 04 24          	mov    (%rsp),%rax
    VkMemoryAllocateInfo allocInfo{};
    b101:	66 0f ef c0          	pxor   %xmm0,%xmm0
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
    b105:	4c 89 f6             	mov    %r14,%rsi
    b108:	4c 89 ff             	mov    %r15,%rdi
    VkMemoryAllocateInfo allocInfo{};
    b10b:	0f 11 44 24 24       	movups %xmm0,0x24(%rsp)
    allocInfo.memoryTypeIndex = _findMemoryType(
    b110:	44 8b 6c 24 10       	mov    0x10(%rsp),%r13d
    VkMemoryAllocateInfo allocInfo{};
    b115:	0f 11 44 24 30       	movups %xmm0,0x30(%rsp)
    allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
    b11a:	c7 44 24 20 05 00 00 	movl   $0x5,0x20(%rsp)
    b121:	00 
    allocInfo.allocationSize = memoryRequirements.size;
    b122:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
    b127:	e8 34 b8 ff ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
    b12c:	8b 94 24 80 00 00 00 	mov    0x80(%rsp),%edx
    b133:	85 d2                	test   %edx,%edx
    b135:	0f 84 c6 00 00 00    	je     b201 <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0x181>
    b13b:	31 c9                	xor    %ecx,%ecx
      if (typeFilter & (1 << i) &&
    b13d:	be 01 00 00 00       	mov    $0x1,%esi
    b142:	eb 11                	jmp    b155 <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0xd5>
    b144:	0f 1f 40 00          	nopl   0x0(%rax)
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
    b148:	48 83 c1 01          	add    $0x1,%rcx
    b14c:	48 39 d1             	cmp    %rdx,%rcx
    b14f:	0f 84 ac 00 00 00    	je     b201 <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0x181>
      if (typeFilter & (1 << i) &&
    b155:	89 f0                	mov    %esi,%eax
    b157:	d3 e0                	shl    %cl,%eax
    b159:	44 85 e8             	test   %r13d,%eax
    b15c:	74 ea                	je     b148 <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0xc8>
          (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
    b15e:	41 8b 44 ce 04       	mov    0x4(%r14,%rcx,8),%eax
    b163:	21 d8                	and    %ebx,%eax
      if (typeFilter & (1 << i) &&
    b165:	39 c3                	cmp    %eax,%ebx
    b167:	75 df                	jne    b148 <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0xc8>
    allocInfo.memoryTypeIndex = _findMemoryType(
    b169:	89 4c 24 38          	mov    %ecx,0x38(%rsp)
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
    b16d:	31 d2                	xor    %edx,%edx
    b16f:	49 8d 4c 24 18       	lea    0x18(%r12),%rcx
    b174:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    b179:	48 89 ef             	mov    %rbp,%rdi
    b17c:	e8 4f b8 ff ff       	call   69d0 <vkAllocateMemory@plt>
    b181:	85 c0                	test   %eax,%eax
    b183:	75 5e                	jne    b1e3 <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0x163>
    vkBindBufferMemory(device, _buffer, _deviceMemory, 0);
    b185:	49 8b 54 24 18       	mov    0x18(%r12),%rdx
    b18a:	49 8b 74 24 08       	mov    0x8(%r12),%rsi
    b18f:	48 89 ef             	mov    %rbp,%rdi
    b192:	31 c9                	xor    %ecx,%ecx
    b194:	e8 c7 b4 ff ff       	call   6660 <vkBindBufferMemory@plt>
    _isOwner = true;
    b199:	41 c6 44 24 38 01    	movb   $0x1,0x38(%r12)
  }
    b19f:	48 81 c4 98 02 00 00 	add    $0x298,%rsp
    b1a6:	5b                   	pop    %rbx
    b1a7:	5d                   	pop    %rbp
    b1a8:	41 5c                	pop    %r12
    b1aa:	41 5d                	pop    %r13
    b1ac:	41 5e                	pop    %r14
    b1ae:	41 5f                	pop    %r15
    b1b0:	c3                   	ret
      throw std::runtime_error("Failed creating buffer.");
    b1b1:	bf 10 00 00 00       	mov    $0x10,%edi
    b1b6:	e8 95 b0 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    b1bb:	48 8d 35 42 be 02 00 	lea    0x2be42(%rip),%rsi        # 37004 <_IO_stdin_used+0x4>
    b1c2:	48 89 c7             	mov    %rax,%rdi
    b1c5:	48 89 c3             	mov    %rax,%rbx
    b1c8:	e8 e3 af ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
      throw std::runtime_error("Failed to allocate buffer memory.");
    b1cd:	48 8b 15 cc 5d 03 00 	mov    0x35dcc(%rip),%rdx        # 40fa0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    b1d4:	48 8d 35 45 59 03 00 	lea    0x35945(%rip),%rsi        # 40b20 <_ZTISt13runtime_error@GLIBCXX_3.4>
    b1db:	48 89 df             	mov    %rbx,%rdi
    b1de:	e8 1d b8 ff ff       	call   6a00 <__cxa_throw@plt>
    b1e3:	bf 10 00 00 00       	mov    $0x10,%edi
    b1e8:	e8 63 b0 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    b1ed:	48 8d 35 54 be 02 00 	lea    0x2be54(%rip),%rsi        # 37048 <_IO_stdin_used+0x48>
    b1f4:	48 89 c7             	mov    %rax,%rdi
    b1f7:	48 89 c3             	mov    %rax,%rbx
    b1fa:	e8 b1 af ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    b1ff:	eb cc                	jmp    b1cd <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0x14d>
    throw std::runtime_error("Failed to find suitable memory type.");
    b201:	bf 10 00 00 00       	mov    $0x10,%edi
    b206:	e8 45 b0 ff ff       	call   6250 <__cxa_allocate_exception@plt>
    b20b:	48 8d 35 0e be 02 00 	lea    0x2be0e(%rip),%rsi        # 37020 <_IO_stdin_used+0x20>
    b212:	48 89 c7             	mov    %rax,%rdi
    b215:	48 89 c3             	mov    %rax,%rbx
    b218:	e8 93 af ff ff       	call   61b0 <_ZNSt13runtime_errorC1EPKc@plt>
    b21d:	eb ae                	jmp    b1cd <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0x14d>
      throw std::runtime_error("Failed to allocate buffer memory.");
    b21f:	48 89 c5             	mov    %rax,%rbp
    b222:	eb 04                	jmp    b228 <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0x1a8>
    b224:	eb f9                	jmp    b21f <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0x19f>
    b226:	eb f7                	jmp    b21f <_ZN3vkw6Buffer17_customInitializeEP10VkDevice_TP18VkPhysicalDevice_Tmjj+0x19f>
    b228:	48 89 df             	mov    %rbx,%rdi
    b22b:	e8 60 b1 ff ff       	call   6390 <__cxa_free_exception@plt>
    b230:	48 89 ef             	mov    %rbp,%rdi
    b233:	e8 28 b8 ff ff       	call   6a60 <_Unwind_Resume@plt>
    b238:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    b23f:	00 

000000000000b240 <_ZN3vkw7SamplerD1Ev>:
    b240:	48 8d 05 29 53 03 00 	lea    0x35329(%rip),%rax        # 40570 <_ZTVN3vkw7SamplerE+0x10>
    if (_isOwner) {
    b247:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~Sampler() { _destroyVkData(); }
    b24b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b24e:	75 08                	jne    b258 <_ZN3vkw7SamplerD1Ev+0x18>
    b250:	c3                   	ret
    b251:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~Sampler() { _destroyVkData(); }
    b258:	48 83 ec 08          	sub    $0x8,%rsp
      vkDestroySampler(_device, _sampler, _pAllocator);
    b25c:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    b260:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b264:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b268:	e8 83 b0 ff ff       	call   62f0 <vkDestroySampler@plt>
  virtual ~Sampler() { _destroyVkData(); }
    b26d:	48 83 c4 08          	add    $0x8,%rsp
    b271:	c3                   	ret
    b272:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b279:	00 00 00 
    b27c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000b280 <_ZN3vkw9ImageViewD1Ev>:
  virtual ~ImageView() { _destroyVkData(); }
    b280:	48 8d 05 f1 53 03 00 	lea    0x353f1(%rip),%rax        # 40678 <_ZTVN3vkw9ImageViewE+0x10>
    if (_isOwner) {
    b287:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~ImageView() { _destroyVkData(); }
    b28b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b28e:	75 08                	jne    b298 <_ZN3vkw9ImageViewD1Ev+0x18>
    b290:	c3                   	ret
    b291:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~ImageView() { _destroyVkData(); }
    b298:	48 83 ec 08          	sub    $0x8,%rsp
      vkDestroyImageView(_device, _imageView, _pAllocator);
    b29c:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    b2a0:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b2a4:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b2a8:	e8 c3 b7 ff ff       	call   6a70 <vkDestroyImageView@plt>
  virtual ~ImageView() { _destroyVkData(); }
    b2ad:	48 83 c4 08          	add    $0x8,%rsp
    b2b1:	c3                   	ret
    b2b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b2b9:	00 00 00 
    b2bc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000b2c0 <_ZN3vkw9SwapchainD1Ev>:
  virtual ~Swapchain() { _destroyVkData(); }
    b2c0:	48 8d 05 e9 52 03 00 	lea    0x352e9(%rip),%rax        # 405b0 <_ZTVN3vkw9SwapchainE+0x10>
    if (_isOwner) {
    b2c7:	80 7f 30 00          	cmpb   $0x0,0x30(%rdi)
  virtual ~Swapchain() { _destroyVkData(); }
    b2cb:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b2ce:	75 08                	jne    b2d8 <_ZN3vkw9SwapchainD1Ev+0x18>
    b2d0:	c3                   	ret
    b2d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~Swapchain() { _destroyVkData(); }
    b2d8:	48 83 ec 08          	sub    $0x8,%rsp
      vkDestroySwapchainKHR(_device, _swapchain, _pAllocator);
    b2dc:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    b2e0:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b2e4:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
    b2e8:	e8 43 ae ff ff       	call   6130 <vkDestroySwapchainKHR@plt>
  virtual ~Swapchain() { _destroyVkData(); }
    b2ed:	48 83 c4 08          	add    $0x8,%rsp
    b2f1:	c3                   	ret
    b2f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b2f9:	00 00 00 
    b2fc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000b300 <_ZN3vkw19DescriptorSetLayoutD1Ev>:
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    b300:	48 8d 05 e9 52 03 00 	lea    0x352e9(%rip),%rax        # 405f0 <_ZTVN3vkw19DescriptorSetLayoutE+0x10>
    if (_isOwner) {
    b307:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    b30b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b30e:	75 08                	jne    b318 <_ZN3vkw19DescriptorSetLayoutD1Ev+0x18>
    b310:	c3                   	ret
    b311:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    b318:	48 83 ec 08          	sub    $0x8,%rsp
      vkDestroyDescriptorSetLayout(_device, _setLayout, _pAllocator);
    b31c:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    b320:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b324:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b328:	e8 13 b6 ff ff       	call   6940 <vkDestroyDescriptorSetLayout@plt>
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    b32d:	48 83 c4 08          	add    $0x8,%rsp
    b331:	c3                   	ret
    b332:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b339:	00 00 00 
    b33c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000b340 <_ZN3vkw7SurfaceD1Ev>:
  virtual ~Surface() { _destroyVkData(); }
    b340:	48 8d 05 49 52 03 00 	lea    0x35249(%rip),%rax        # 40590 <_ZTVN3vkw7SurfaceE+0x10>
    if (_isOwner) {
    b347:	80 7f 28 00          	cmpb   $0x0,0x28(%rdi)
  virtual ~Surface() { _destroyVkData(); }
    b34b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b34e:	75 08                	jne    b358 <_ZN3vkw7SurfaceD1Ev+0x18>
    b350:	c3                   	ret
    b351:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~Surface() { _destroyVkData(); }
    b358:	48 83 ec 08          	sub    $0x8,%rsp
      vkh::destroySurface(_instance, _surface, _pAllocator);
    b35c:	48 8b 57 20          	mov    0x20(%rdi),%rdx
    b360:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b364:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b368:	e8 23 2a 00 00       	call   dd90 <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>
  virtual ~Surface() { _destroyVkData(); }
    b36d:	48 83 c4 08          	add    $0x8,%rsp
    b371:	c3                   	ret
    b372:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b379:	00 00 00 
    b37c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000b380 <_ZN3vkw9SwapchainD0Ev>:
    b380:	53                   	push   %rbx
    b381:	48 8d 05 28 52 03 00 	lea    0x35228(%rip),%rax        # 405b0 <_ZTVN3vkw9SwapchainE+0x10>
    if (_isOwner) {
    b388:	80 7f 30 00          	cmpb   $0x0,0x30(%rdi)
  virtual ~Swapchain() { _destroyVkData(); }
    b38c:	48 89 fb             	mov    %rdi,%rbx
    b38f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b392:	75 14                	jne    b3a8 <_ZN3vkw9SwapchainD0Ev+0x28>
  virtual ~Swapchain() { _destroyVkData(); }
    b394:	48 89 df             	mov    %rbx,%rdi
    b397:	be 38 00 00 00       	mov    $0x38,%esi
    b39c:	5b                   	pop    %rbx
    b39d:	e9 be b1 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b3a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroySwapchainKHR(_device, _swapchain, _pAllocator);
    b3a8:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b3ac:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    b3b0:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
    b3b4:	e8 77 ad ff ff       	call   6130 <vkDestroySwapchainKHR@plt>
  virtual ~Swapchain() { _destroyVkData(); }
    b3b9:	48 89 df             	mov    %rbx,%rdi
    b3bc:	be 38 00 00 00       	mov    $0x38,%esi
    b3c1:	5b                   	pop    %rbx
    b3c2:	e9 99 b1 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b3c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b3ce:	00 00 

000000000000b3d0 <_ZN3vkw7SamplerD0Ev>:
    b3d0:	53                   	push   %rbx
    b3d1:	48 8d 05 98 51 03 00 	lea    0x35198(%rip),%rax        # 40570 <_ZTVN3vkw7SamplerE+0x10>
    if (_isOwner) {
    b3d8:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~Sampler() { _destroyVkData(); }
    b3dc:	48 89 fb             	mov    %rdi,%rbx
    b3df:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b3e2:	75 14                	jne    b3f8 <_ZN3vkw7SamplerD0Ev+0x28>
  virtual ~Sampler() { _destroyVkData(); }
    b3e4:	48 89 df             	mov    %rbx,%rdi
    b3e7:	be 28 00 00 00       	mov    $0x28,%esi
    b3ec:	5b                   	pop    %rbx
    b3ed:	e9 6e b1 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b3f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroySampler(_device, _sampler, _pAllocator);
    b3f8:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b3fc:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    b400:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b404:	e8 e7 ae ff ff       	call   62f0 <vkDestroySampler@plt>
  virtual ~Sampler() { _destroyVkData(); }
    b409:	48 89 df             	mov    %rbx,%rdi
    b40c:	be 28 00 00 00       	mov    $0x28,%esi
    b411:	5b                   	pop    %rbx
    b412:	e9 49 b1 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b417:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b41e:	00 00 

000000000000b420 <_ZN3vkw7SurfaceD0Ev>:
    b420:	53                   	push   %rbx
    b421:	48 8d 05 68 51 03 00 	lea    0x35168(%rip),%rax        # 40590 <_ZTVN3vkw7SurfaceE+0x10>
    if (_isOwner) {
    b428:	80 7f 28 00          	cmpb   $0x0,0x28(%rdi)
  virtual ~Surface() { _destroyVkData(); }
    b42c:	48 89 fb             	mov    %rdi,%rbx
    b42f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b432:	75 14                	jne    b448 <_ZN3vkw7SurfaceD0Ev+0x28>
  virtual ~Surface() { _destroyVkData(); }
    b434:	48 89 df             	mov    %rbx,%rdi
    b437:	be 30 00 00 00       	mov    $0x30,%esi
    b43c:	5b                   	pop    %rbx
    b43d:	e9 1e b1 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b442:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkh::destroySurface(_instance, _surface, _pAllocator);
    b448:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b44c:	48 8b 57 20          	mov    0x20(%rdi),%rdx
    b450:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b454:	e8 37 29 00 00       	call   dd90 <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>
  virtual ~Surface() { _destroyVkData(); }
    b459:	48 89 df             	mov    %rbx,%rdi
    b45c:	be 30 00 00 00       	mov    $0x30,%esi
    b461:	5b                   	pop    %rbx
    b462:	e9 f9 b0 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b46e:	00 00 

000000000000b470 <_ZN3vkw19DescriptorSetLayoutD0Ev>:
    b470:	53                   	push   %rbx
    b471:	48 8d 05 78 51 03 00 	lea    0x35178(%rip),%rax        # 405f0 <_ZTVN3vkw19DescriptorSetLayoutE+0x10>
    if (_isOwner) {
    b478:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    b47c:	48 89 fb             	mov    %rdi,%rbx
    b47f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b482:	75 14                	jne    b498 <_ZN3vkw19DescriptorSetLayoutD0Ev+0x28>
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    b484:	48 89 df             	mov    %rbx,%rdi
    b487:	be 28 00 00 00       	mov    $0x28,%esi
    b48c:	5b                   	pop    %rbx
    b48d:	e9 ce b0 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b492:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyDescriptorSetLayout(_device, _setLayout, _pAllocator);
    b498:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b49c:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    b4a0:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b4a4:	e8 97 b4 ff ff       	call   6940 <vkDestroyDescriptorSetLayout@plt>
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    b4a9:	48 89 df             	mov    %rbx,%rdi
    b4ac:	be 28 00 00 00       	mov    $0x28,%esi
    b4b1:	5b                   	pop    %rbx
    b4b2:	e9 a9 b0 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b4b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b4be:	00 00 

000000000000b4c0 <_ZN3vkw9ImageViewD0Ev>:
    b4c0:	53                   	push   %rbx
    b4c1:	48 8d 05 b0 51 03 00 	lea    0x351b0(%rip),%rax        # 40678 <_ZTVN3vkw9ImageViewE+0x10>
    if (_isOwner) {
    b4c8:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~ImageView() { _destroyVkData(); }
    b4cc:	48 89 fb             	mov    %rdi,%rbx
    b4cf:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b4d2:	75 14                	jne    b4e8 <_ZN3vkw9ImageViewD0Ev+0x28>
  virtual ~ImageView() { _destroyVkData(); }
    b4d4:	48 89 df             	mov    %rbx,%rdi
    b4d7:	be 28 00 00 00       	mov    $0x28,%esi
    b4dc:	5b                   	pop    %rbx
    b4dd:	e9 7e b0 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b4e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyImageView(_device, _imageView, _pAllocator);
    b4e8:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b4ec:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    b4f0:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b4f4:	e8 77 b5 ff ff       	call   6a70 <vkDestroyImageView@plt>
  virtual ~ImageView() { _destroyVkData(); }
    b4f9:	48 89 df             	mov    %rbx,%rdi
    b4fc:	be 28 00 00 00       	mov    $0x28,%esi
    b501:	5b                   	pop    %rbx
    b502:	e9 59 b0 ff ff       	jmp    6560 <_ZdlPvm@plt>
    b507:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b50e:	00 00 

000000000000b510 <_ZN3vkw14DebugMessengerD1Ev>:
    b510:	48 8d 05 d9 4f 03 00 	lea    0x34fd9(%rip),%rax        # 404f0 <_ZTVN3vkw14DebugMessengerE+0x10>
    if (_isOwner) {
    b517:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~DebugMessenger() { _destroyVkData(); }
    b51b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b51e:	75 08                	jne    b528 <_ZN3vkw14DebugMessengerD1Ev+0x18>
    b520:	c3                   	ret
    b521:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~DebugMessenger() { _destroyVkData(); }
    b528:	41 54                	push   %r12
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    b52a:	48 8d 35 77 bb 02 00 	lea    0x2bb77(%rip),%rsi        # 370a8 <_IO_stdin_used+0xa8>
  virtual ~DebugMessenger() { _destroyVkData(); }
    b531:	55                   	push   %rbp
    b532:	53                   	push   %rbx
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
    b533:	48 8b 5f 10          	mov    0x10(%rdi),%rbx
    b537:	4c 8b 67 18          	mov    0x18(%rdi),%r12
    b53b:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    b53f:	48 89 df             	mov    %rbx,%rdi
    b542:	e8 99 af ff ff       	call   64e0 <vkGetInstanceProcAddr@plt>
  if (func != nullptr) {
    b547:	48 85 c0             	test   %rax,%rax
    b54a:	74 0b                	je     b557 <_ZN3vkw14DebugMessengerD1Ev+0x47>
    func(instance, debugMessenger, pAllocator);
    b54c:	4c 89 e2             	mov    %r12,%rdx
    b54f:	48 89 ee             	mov    %rbp,%rsi
    b552:	48 89 df             	mov    %rbx,%rdi
    b555:	ff d0                	call   *%rax
  virtual ~DebugMessenger() { _destroyVkData(); }
    b557:	5b                   	pop    %rbx
    b558:	5d                   	pop    %rbp
    b559:	41 5c                	pop    %r12
    b55b:	c3                   	ret
    b55c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000b560 <_ZN3vkw14DebugMessengerD0Ev>:
    b560:	41 55                	push   %r13
    b562:	48 8d 05 87 4f 03 00 	lea    0x34f87(%rip),%rax        # 404f0 <_ZTVN3vkw14DebugMessengerE+0x10>
    b569:	41 54                	push   %r12
    b56b:	55                   	push   %rbp
    b56c:	53                   	push   %rbx
    b56d:	48 89 fb             	mov    %rdi,%rbx
    b570:	48 83 ec 08          	sub    $0x8,%rsp
    if (_isOwner) {
    b574:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~DebugMessenger() { _destroyVkData(); }
    b578:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b57b:	75 1b                	jne    b598 <_ZN3vkw14DebugMessengerD0Ev+0x38>
  virtual ~DebugMessenger() { _destroyVkData(); }
    b57d:	48 83 c4 08          	add    $0x8,%rsp
    b581:	48 89 df             	mov    %rbx,%rdi
    b584:	be 28 00 00 00       	mov    $0x28,%esi
    b589:	5b                   	pop    %rbx
    b58a:	5d                   	pop    %rbp
    b58b:	41 5c                	pop    %r12
    b58d:	41 5d                	pop    %r13
    b58f:	e9 cc af ff ff       	jmp    6560 <_ZdlPvm@plt>
    b594:	0f 1f 40 00          	nopl   0x0(%rax)
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
    b598:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
    b59c:	4c 8b 6f 18          	mov    0x18(%rdi),%r13
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    b5a0:	48 8d 35 01 bb 02 00 	lea    0x2bb01(%rip),%rsi        # 370a8 <_IO_stdin_used+0xa8>
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
    b5a7:	4c 8b 67 08          	mov    0x8(%rdi),%r12
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    b5ab:	48 89 ef             	mov    %rbp,%rdi
    b5ae:	e8 2d af ff ff       	call   64e0 <vkGetInstanceProcAddr@plt>
  if (func != nullptr) {
    b5b3:	48 85 c0             	test   %rax,%rax
    b5b6:	74 c5                	je     b57d <_ZN3vkw14DebugMessengerD0Ev+0x1d>
    func(instance, debugMessenger, pAllocator);
    b5b8:	4c 89 ea             	mov    %r13,%rdx
    b5bb:	4c 89 e6             	mov    %r12,%rsi
    b5be:	48 89 ef             	mov    %rbp,%rdi
    b5c1:	ff d0                	call   *%rax
    b5c3:	eb b8                	jmp    b57d <_ZN3vkw14DebugMessengerD0Ev+0x1d>
    b5c5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b5cc:	00 00 00 
    b5cf:	90                   	nop

000000000000b5d0 <_ZN3vkw5ImageD1Ev>:
  virtual ~Image() { _destroyVkData(); }
    b5d0:	48 8d 05 81 50 03 00 	lea    0x35081(%rip),%rax        # 40658 <_ZTVN3vkw5ImageE+0x10>
    if (_isOwner) {
    b5d7:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  virtual ~Image() { _destroyVkData(); }
    b5db:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b5de:	75 08                	jne    b5e8 <_ZN3vkw5ImageD1Ev+0x18>
    b5e0:	c3                   	ret
    b5e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~Image() { _destroyVkData(); }
    b5e8:	53                   	push   %rbx
    b5e9:	48 89 fb             	mov    %rdi,%rbx
      vkDestroyImage(_device, _image, _pImageAllocator);
    b5ec:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    b5f0:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b5f4:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b5f8:	e8 a3 aa ff ff       	call   60a0 <vkDestroyImage@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    b5fd:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    b601:	48 8b 73 18          	mov    0x18(%rbx),%rsi
    b605:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    b609:	e8 a2 ae ff ff       	call   64b0 <vkFreeMemory@plt>
  virtual ~Image() { _destroyVkData(); }
    b60e:	5b                   	pop    %rbx
    b60f:	c3                   	ret

000000000000b610 <_ZN3vkw5ImageD0Ev>:
    b610:	53                   	push   %rbx
    b611:	48 8d 05 40 50 03 00 	lea    0x35040(%rip),%rax        # 40658 <_ZTVN3vkw5ImageE+0x10>
    if (_isOwner) {
    b618:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  virtual ~Image() { _destroyVkData(); }
    b61c:	48 89 fb             	mov    %rdi,%rbx
    b61f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b622:	75 14                	jne    b638 <_ZN3vkw5ImageD0Ev+0x28>
  virtual ~Image() { _destroyVkData(); }
    b624:	48 89 df             	mov    %rbx,%rdi
    b627:	be 40 00 00 00       	mov    $0x40,%esi
    b62c:	5b                   	pop    %rbx
    b62d:	e9 2e af ff ff       	jmp    6560 <_ZdlPvm@plt>
    b632:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyImage(_device, _image, _pImageAllocator);
    b638:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    b63c:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b640:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b644:	e8 57 aa ff ff       	call   60a0 <vkDestroyImage@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    b649:	48 8b 73 18          	mov    0x18(%rbx),%rsi
    b64d:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    b651:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    b655:	e8 56 ae ff ff       	call   64b0 <vkFreeMemory@plt>
  virtual ~Image() { _destroyVkData(); }
    b65a:	48 89 df             	mov    %rbx,%rdi
    b65d:	be 40 00 00 00       	mov    $0x40,%esi
    b662:	5b                   	pop    %rbx
    b663:	e9 f8 ae ff ff       	jmp    6560 <_ZdlPvm@plt>
    b668:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    b66f:	00 

000000000000b670 <_ZN3vkw6BufferD1Ev>:
  virtual ~Buffer() { _destroyVkData(); }
    b670:	48 8d 05 b9 4f 03 00 	lea    0x34fb9(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
    b677:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  virtual ~Buffer() { _destroyVkData(); }
    b67b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b67e:	75 08                	jne    b688 <_ZN3vkw6BufferD1Ev+0x18>
    b680:	c3                   	ret
    b681:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~Buffer() { _destroyVkData(); }
    b688:	53                   	push   %rbx
    b689:	48 89 fb             	mov    %rdi,%rbx
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
    b68c:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    b690:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b694:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b698:	e8 c3 ab ff ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    b69d:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    b6a1:	48 8b 73 18          	mov    0x18(%rbx),%rsi
    b6a5:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    b6a9:	e8 02 ae ff ff       	call   64b0 <vkFreeMemory@plt>
  virtual ~Buffer() { _destroyVkData(); }
    b6ae:	5b                   	pop    %rbx
    b6af:	c3                   	ret

000000000000b6b0 <_ZN3vkw6BufferD0Ev>:
    b6b0:	53                   	push   %rbx
    b6b1:	48 8d 05 78 4f 03 00 	lea    0x34f78(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
    b6b8:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  virtual ~Buffer() { _destroyVkData(); }
    b6bc:	48 89 fb             	mov    %rdi,%rbx
    b6bf:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b6c2:	75 14                	jne    b6d8 <_ZN3vkw6BufferD0Ev+0x28>
  virtual ~Buffer() { _destroyVkData(); }
    b6c4:	48 89 df             	mov    %rbx,%rdi
    b6c7:	be 40 00 00 00       	mov    $0x40,%esi
    b6cc:	5b                   	pop    %rbx
    b6cd:	e9 8e ae ff ff       	jmp    6560 <_ZdlPvm@plt>
    b6d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
    b6d8:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    b6dc:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b6e0:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b6e4:	e8 77 ab ff ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    b6e9:	48 8b 73 18          	mov    0x18(%rbx),%rsi
    b6ed:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    b6f1:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    b6f5:	e8 b6 ad ff ff       	call   64b0 <vkFreeMemory@plt>
  virtual ~Buffer() { _destroyVkData(); }
    b6fa:	48 89 df             	mov    %rbx,%rdi
    b6fd:	be 40 00 00 00       	mov    $0x40,%esi
    b702:	5b                   	pop    %rbx
    b703:	e9 58 ae ff ff       	jmp    6560 <_ZdlPvm@plt>
    b708:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    b70f:	00 

000000000000b710 <_ZN3vkw16GraphicsPipelineD1Ev>:
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    b710:	48 8d 05 f9 4e 03 00 	lea    0x34ef9(%rip),%rax        # 40610 <_ZTVN3vkw16GraphicsPipelineE+0x10>
    if (_isOwner) {
    b717:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    b71b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b71e:	75 08                	jne    b728 <_ZN3vkw16GraphicsPipelineD1Ev+0x18>
    b720:	c3                   	ret
    b721:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    b728:	53                   	push   %rbx
    b729:	48 89 fb             	mov    %rdi,%rbx
      vkDestroyPipeline(_device, _graphicsPipeline, _pAllocator);
    b72c:	48 8b 57 30          	mov    0x30(%rdi),%rdx
    b730:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b734:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b738:	e8 b3 ae ff ff       	call   65f0 <vkDestroyPipeline@plt>
      vkDestroyPipelineLayout(_device, _pipelineLayout, _pAllocator);
    b73d:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    b741:	48 8b 73 20          	mov    0x20(%rbx),%rsi
    b745:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    b749:	e8 a2 af ff ff       	call   66f0 <vkDestroyPipelineLayout@plt>
      vkDestroyRenderPass(_device, _renderPass, _pAllocator);
    b74e:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    b752:	48 8b 73 28          	mov    0x28(%rbx),%rsi
    b756:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    b75a:	e8 a1 ad ff ff       	call   6500 <vkDestroyRenderPass@plt>
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    b75f:	5b                   	pop    %rbx
    b760:	c3                   	ret
    b761:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b768:	00 00 00 
    b76b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000b770 <_ZN3vkw16GraphicsPipelineD0Ev>:
    b770:	53                   	push   %rbx
    b771:	48 8d 05 98 4e 03 00 	lea    0x34e98(%rip),%rax        # 40610 <_ZTVN3vkw16GraphicsPipelineE+0x10>
    if (_isOwner) {
    b778:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    b77c:	48 89 fb             	mov    %rdi,%rbx
    b77f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    b782:	75 14                	jne    b798 <_ZN3vkw16GraphicsPipelineD0Ev+0x28>
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    b784:	48 89 df             	mov    %rbx,%rdi
    b787:	be 40 00 00 00       	mov    $0x40,%esi
    b78c:	5b                   	pop    %rbx
    b78d:	e9 ce ad ff ff       	jmp    6560 <_ZdlPvm@plt>
    b792:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyPipeline(_device, _graphicsPipeline, _pAllocator);
    b798:	48 8b 57 30          	mov    0x30(%rdi),%rdx
    b79c:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    b7a0:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    b7a4:	e8 47 ae ff ff       	call   65f0 <vkDestroyPipeline@plt>
      vkDestroyPipelineLayout(_device, _pipelineLayout, _pAllocator);
    b7a9:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    b7ad:	48 8b 73 20          	mov    0x20(%rbx),%rsi
    b7b1:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    b7b5:	e8 36 af ff ff       	call   66f0 <vkDestroyPipelineLayout@plt>
      vkDestroyRenderPass(_device, _renderPass, _pAllocator);
    b7ba:	48 8b 73 28          	mov    0x28(%rbx),%rsi
    b7be:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    b7c2:	48 8b 53 30          	mov    0x30(%rbx),%rdx
    b7c6:	e8 35 ad ff ff       	call   6500 <vkDestroyRenderPass@plt>
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    b7cb:	48 89 df             	mov    %rbx,%rdi
    b7ce:	be 40 00 00 00       	mov    $0x40,%esi
    b7d3:	5b                   	pop    %rbx
    b7d4:	e9 87 ad ff ff       	jmp    6560 <_ZdlPvm@plt>
    b7d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000b7e0 <_ZN4rtvc12FramebuffersD1Ev>:
    b7e0:	41 54                	push   %r12
    b7e2:	48 8d 05 47 4d 03 00 	lea    0x34d47(%rip),%rax        # 40530 <_ZTVN3vkw12FramebuffersE+0x10>
    b7e9:	55                   	push   %rbp
    b7ea:	48 89 fd             	mov    %rdi,%rbp
    b7ed:	53                   	push   %rbx
    if (_isOwner) {
    b7ee:	80 7d 30 00          	cmpb   $0x0,0x30(%rbp)
  virtual ~Framebuffers() { _destroyVkData(); }
    b7f2:	48 89 07             	mov    %rax,(%rdi)
    b7f5:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    if (_isOwner) {
    b7f9:	74 36                	je     b831 <_ZN4rtvc12FramebuffersD1Ev+0x51>
    b7fb:	4c 8b 65 10          	mov    0x10(%rbp),%r12
      for (auto &framebuffer : _framebuffers) {
    b7ff:	49 39 fc             	cmp    %rdi,%r12
    b802:	74 29                	je     b82d <_ZN4rtvc12FramebuffersD1Ev+0x4d>
    b804:	48 89 fb             	mov    %rdi,%rbx
    b807:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b80e:	00 00 
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    b810:	48 8b 33             	mov    (%rbx),%rsi
    b813:	48 8b 55 28          	mov    0x28(%rbp),%rdx
      for (auto &framebuffer : _framebuffers) {
    b817:	48 83 c3 08          	add    $0x8,%rbx
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    b81b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
    b81f:	e8 bc b1 ff ff       	call   69e0 <vkDestroyFramebuffer@plt>
      for (auto &framebuffer : _framebuffers) {
    b824:	49 39 dc             	cmp    %rbx,%r12
    b827:	75 e7                	jne    b810 <_ZN4rtvc12FramebuffersD1Ev+0x30>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    b829:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
      _isOwner = false;
    b82d:	c6 45 30 00          	movb   $0x0,0x30(%rbp)
	if (__p)
    b831:	48 85 ff             	test   %rdi,%rdi
    b834:	74 1a                	je     b850 <_ZN4rtvc12FramebuffersD1Ev+0x70>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    b836:	48 8b 75 18          	mov    0x18(%rbp),%rsi
    b83a:	5b                   	pop    %rbx
    b83b:	5d                   	pop    %rbp
    b83c:	41 5c                	pop    %r12
    b83e:	48 29 fe             	sub    %rdi,%rsi
    b841:	e9 1a ad ff ff       	jmp    6560 <_ZdlPvm@plt>
    b846:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b84d:	00 00 00 
    b850:	5b                   	pop    %rbx
    b851:	5d                   	pop    %rbp
    b852:	41 5c                	pop    %r12
    b854:	c3                   	ret
    b855:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b85c:	00 00 00 
    b85f:	90                   	nop

000000000000b860 <_ZN4rtvc19SwapchainImageViewsD1Ev>:
    b860:	41 54                	push   %r12
  virtual ~ImageViews() { _destroyVkData(); }
    b862:	48 8d 05 2f 4e 03 00 	lea    0x34e2f(%rip),%rax        # 40698 <_ZTVN3vkw10ImageViewsE+0x10>
    b869:	55                   	push   %rbp
    b86a:	48 89 fd             	mov    %rdi,%rbp
    b86d:	53                   	push   %rbx
    if (_isOwner) {
    b86e:	80 7d 30 00          	cmpb   $0x0,0x30(%rbp)
  virtual ~ImageViews() { _destroyVkData(); }
    b872:	48 89 07             	mov    %rax,(%rdi)
    b875:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    if (_isOwner) {
    b879:	74 36                	je     b8b1 <_ZN4rtvc19SwapchainImageViewsD1Ev+0x51>
    b87b:	4c 8b 65 10          	mov    0x10(%rbp),%r12
      for (auto &imageView : _imageViews) {
    b87f:	49 39 fc             	cmp    %rdi,%r12
    b882:	74 29                	je     b8ad <_ZN4rtvc19SwapchainImageViewsD1Ev+0x4d>
    b884:	48 89 fb             	mov    %rdi,%rbx
    b887:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b88e:	00 00 
        vkDestroyImageView(_device, imageView, _pAllocator);
    b890:	48 8b 33             	mov    (%rbx),%rsi
    b893:	48 8b 55 28          	mov    0x28(%rbp),%rdx
      for (auto &imageView : _imageViews) {
    b897:	48 83 c3 08          	add    $0x8,%rbx
        vkDestroyImageView(_device, imageView, _pAllocator);
    b89b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
    b89f:	e8 cc b1 ff ff       	call   6a70 <vkDestroyImageView@plt>
      for (auto &imageView : _imageViews) {
    b8a4:	49 39 dc             	cmp    %rbx,%r12
    b8a7:	75 e7                	jne    b890 <_ZN4rtvc19SwapchainImageViewsD1Ev+0x30>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    b8a9:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
      _isOwner = false;
    b8ad:	c6 45 30 00          	movb   $0x0,0x30(%rbp)
	if (__p)
    b8b1:	48 85 ff             	test   %rdi,%rdi
    b8b4:	74 1a                	je     b8d0 <_ZN4rtvc19SwapchainImageViewsD1Ev+0x70>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    b8b6:	48 8b 75 18          	mov    0x18(%rbp),%rsi
    b8ba:	5b                   	pop    %rbx
    b8bb:	5d                   	pop    %rbp
    b8bc:	41 5c                	pop    %r12
    b8be:	48 29 fe             	sub    %rdi,%rsi
    b8c1:	e9 9a ac ff ff       	jmp    6560 <_ZdlPvm@plt>
    b8c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b8cd:	00 00 00 
    b8d0:	5b                   	pop    %rbx
    b8d1:	5d                   	pop    %rbp
    b8d2:	41 5c                	pop    %r12
    b8d4:	c3                   	ret
    b8d5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b8dc:	00 00 00 
    b8df:	90                   	nop

000000000000b8e0 <_ZN3vkw10ImageViewsD0Ev>:
  virtual ~ImageViews() { _destroyVkData(); }
    b8e0:	41 54                	push   %r12
    b8e2:	48 8d 05 af 4d 03 00 	lea    0x34daf(%rip),%rax        # 40698 <_ZTVN3vkw10ImageViewsE+0x10>
    b8e9:	55                   	push   %rbp
    b8ea:	48 89 fd             	mov    %rdi,%rbp
    b8ed:	53                   	push   %rbx
    if (_isOwner) {
    b8ee:	80 7d 30 00          	cmpb   $0x0,0x30(%rbp)
  virtual ~ImageViews() { _destroyVkData(); }
    b8f2:	48 89 07             	mov    %rax,(%rdi)
    b8f5:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    if (_isOwner) {
    b8f9:	74 36                	je     b931 <_ZN3vkw10ImageViewsD0Ev+0x51>
    b8fb:	4c 8b 65 10          	mov    0x10(%rbp),%r12
      for (auto &imageView : _imageViews) {
    b8ff:	49 39 fc             	cmp    %rdi,%r12
    b902:	74 29                	je     b92d <_ZN3vkw10ImageViewsD0Ev+0x4d>
    b904:	48 89 fb             	mov    %rdi,%rbx
    b907:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b90e:	00 00 
        vkDestroyImageView(_device, imageView, _pAllocator);
    b910:	48 8b 33             	mov    (%rbx),%rsi
    b913:	48 8b 55 28          	mov    0x28(%rbp),%rdx
      for (auto &imageView : _imageViews) {
    b917:	48 83 c3 08          	add    $0x8,%rbx
        vkDestroyImageView(_device, imageView, _pAllocator);
    b91b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
    b91f:	e8 4c b1 ff ff       	call   6a70 <vkDestroyImageView@plt>
      for (auto &imageView : _imageViews) {
    b924:	49 39 dc             	cmp    %rbx,%r12
    b927:	75 e7                	jne    b910 <_ZN3vkw10ImageViewsD0Ev+0x30>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    b929:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
      _isOwner = false;
    b92d:	c6 45 30 00          	movb   $0x0,0x30(%rbp)
	if (__p)
    b931:	48 85 ff             	test   %rdi,%rdi
    b934:	74 0c                	je     b942 <_ZN3vkw10ImageViewsD0Ev+0x62>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    b936:	48 8b 75 18          	mov    0x18(%rbp),%rsi
    b93a:	48 29 fe             	sub    %rdi,%rsi
    b93d:	e8 1e ac ff ff       	call   6560 <_ZdlPvm@plt>
  virtual ~ImageViews() { _destroyVkData(); }
    b942:	5b                   	pop    %rbx
    b943:	48 89 ef             	mov    %rbp,%rdi
    b946:	be 38 00 00 00       	mov    $0x38,%esi
    b94b:	5d                   	pop    %rbp
    b94c:	41 5c                	pop    %r12
    b94e:	e9 0d ac ff ff       	jmp    6560 <_ZdlPvm@plt>
    b953:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b95a:	00 00 00 
    b95d:	0f 1f 00             	nopl   (%rax)

000000000000b960 <_ZN3vkw12FramebuffersD0Ev>:
  virtual ~Framebuffers() { _destroyVkData(); }
    b960:	41 54                	push   %r12
    b962:	48 8d 05 c7 4b 03 00 	lea    0x34bc7(%rip),%rax        # 40530 <_ZTVN3vkw12FramebuffersE+0x10>
    b969:	55                   	push   %rbp
    b96a:	48 89 fd             	mov    %rdi,%rbp
    b96d:	53                   	push   %rbx
    if (_isOwner) {
    b96e:	80 7d 30 00          	cmpb   $0x0,0x30(%rbp)
  virtual ~Framebuffers() { _destroyVkData(); }
    b972:	48 89 07             	mov    %rax,(%rdi)
    b975:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    if (_isOwner) {
    b979:	74 36                	je     b9b1 <_ZN3vkw12FramebuffersD0Ev+0x51>
    b97b:	4c 8b 65 10          	mov    0x10(%rbp),%r12
      for (auto &framebuffer : _framebuffers) {
    b97f:	49 39 fc             	cmp    %rdi,%r12
    b982:	74 29                	je     b9ad <_ZN3vkw12FramebuffersD0Ev+0x4d>
    b984:	48 89 fb             	mov    %rdi,%rbx
    b987:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b98e:	00 00 
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    b990:	48 8b 33             	mov    (%rbx),%rsi
    b993:	48 8b 55 28          	mov    0x28(%rbp),%rdx
      for (auto &framebuffer : _framebuffers) {
    b997:	48 83 c3 08          	add    $0x8,%rbx
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    b99b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
    b99f:	e8 3c b0 ff ff       	call   69e0 <vkDestroyFramebuffer@plt>
      for (auto &framebuffer : _framebuffers) {
    b9a4:	49 39 dc             	cmp    %rbx,%r12
    b9a7:	75 e7                	jne    b990 <_ZN3vkw12FramebuffersD0Ev+0x30>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    b9a9:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
      _isOwner = false;
    b9ad:	c6 45 30 00          	movb   $0x0,0x30(%rbp)
	if (__p)
    b9b1:	48 85 ff             	test   %rdi,%rdi
    b9b4:	74 0c                	je     b9c2 <_ZN3vkw12FramebuffersD0Ev+0x62>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    b9b6:	48 8b 75 18          	mov    0x18(%rbp),%rsi
    b9ba:	48 29 fe             	sub    %rdi,%rsi
    b9bd:	e8 9e ab ff ff       	call   6560 <_ZdlPvm@plt>
  virtual ~Framebuffers() { _destroyVkData(); }
    b9c2:	5b                   	pop    %rbx
    b9c3:	48 89 ef             	mov    %rbp,%rdi
    b9c6:	be 38 00 00 00       	mov    $0x38,%esi
    b9cb:	5d                   	pop    %rbp
    b9cc:	41 5c                	pop    %r12
    b9ce:	e9 8d ab ff ff       	jmp    6560 <_ZdlPvm@plt>
    b9d3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b9da:	00 00 00 
    b9dd:	0f 1f 00             	nopl   (%rax)

000000000000b9e0 <_ZN4rtvc19SwapchainImageViewsD0Ev>:
    b9e0:	41 54                	push   %r12
    b9e2:	48 8d 05 af 4c 03 00 	lea    0x34caf(%rip),%rax        # 40698 <_ZTVN3vkw10ImageViewsE+0x10>
    b9e9:	55                   	push   %rbp
    b9ea:	48 89 fd             	mov    %rdi,%rbp
    b9ed:	53                   	push   %rbx
    if (_isOwner) {
    b9ee:	80 7d 30 00          	cmpb   $0x0,0x30(%rbp)
  virtual ~ImageViews() { _destroyVkData(); }
    b9f2:	48 89 07             	mov    %rax,(%rdi)
    b9f5:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    if (_isOwner) {
    b9f9:	74 36                	je     ba31 <_ZN4rtvc19SwapchainImageViewsD0Ev+0x51>
    b9fb:	4c 8b 65 10          	mov    0x10(%rbp),%r12
      for (auto &imageView : _imageViews) {
    b9ff:	49 39 fc             	cmp    %rdi,%r12
    ba02:	74 29                	je     ba2d <_ZN4rtvc19SwapchainImageViewsD0Ev+0x4d>
    ba04:	48 89 fb             	mov    %rdi,%rbx
    ba07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ba0e:	00 00 
        vkDestroyImageView(_device, imageView, _pAllocator);
    ba10:	48 8b 33             	mov    (%rbx),%rsi
    ba13:	48 8b 55 28          	mov    0x28(%rbp),%rdx
      for (auto &imageView : _imageViews) {
    ba17:	48 83 c3 08          	add    $0x8,%rbx
        vkDestroyImageView(_device, imageView, _pAllocator);
    ba1b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
    ba1f:	e8 4c b0 ff ff       	call   6a70 <vkDestroyImageView@plt>
      for (auto &imageView : _imageViews) {
    ba24:	49 39 dc             	cmp    %rbx,%r12
    ba27:	75 e7                	jne    ba10 <_ZN4rtvc19SwapchainImageViewsD0Ev+0x30>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    ba29:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
      _isOwner = false;
    ba2d:	c6 45 30 00          	movb   $0x0,0x30(%rbp)
	if (__p)
    ba31:	48 85 ff             	test   %rdi,%rdi
    ba34:	74 0c                	je     ba42 <_ZN4rtvc19SwapchainImageViewsD0Ev+0x62>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    ba36:	48 8b 75 18          	mov    0x18(%rbp),%rsi
    ba3a:	48 29 fe             	sub    %rdi,%rsi
    ba3d:	e8 1e ab ff ff       	call   6560 <_ZdlPvm@plt>
    ba42:	5b                   	pop    %rbx
    ba43:	48 89 ef             	mov    %rbp,%rdi
    ba46:	be 38 00 00 00       	mov    $0x38,%esi
    ba4b:	5d                   	pop    %rbp
    ba4c:	41 5c                	pop    %r12
    ba4e:	e9 0d ab ff ff       	jmp    6560 <_ZdlPvm@plt>
    ba53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ba5a:	00 00 00 
    ba5d:	0f 1f 00             	nopl   (%rax)

000000000000ba60 <_ZN4rtvc12FramebuffersD0Ev>:
    ba60:	41 54                	push   %r12
    ba62:	48 8d 05 c7 4a 03 00 	lea    0x34ac7(%rip),%rax        # 40530 <_ZTVN3vkw12FramebuffersE+0x10>
    ba69:	55                   	push   %rbp
    ba6a:	48 89 fd             	mov    %rdi,%rbp
    ba6d:	53                   	push   %rbx
    if (_isOwner) {
    ba6e:	80 7d 30 00          	cmpb   $0x0,0x30(%rbp)
  virtual ~Framebuffers() { _destroyVkData(); }
    ba72:	48 89 07             	mov    %rax,(%rdi)
    ba75:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    if (_isOwner) {
    ba79:	74 36                	je     bab1 <_ZN4rtvc12FramebuffersD0Ev+0x51>
    ba7b:	4c 8b 65 10          	mov    0x10(%rbp),%r12
      for (auto &framebuffer : _framebuffers) {
    ba7f:	49 39 fc             	cmp    %rdi,%r12
    ba82:	74 29                	je     baad <_ZN4rtvc12FramebuffersD0Ev+0x4d>
    ba84:	48 89 fb             	mov    %rdi,%rbx
    ba87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ba8e:	00 00 
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    ba90:	48 8b 33             	mov    (%rbx),%rsi
    ba93:	48 8b 55 28          	mov    0x28(%rbp),%rdx
      for (auto &framebuffer : _framebuffers) {
    ba97:	48 83 c3 08          	add    $0x8,%rbx
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    ba9b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
    ba9f:	e8 3c af ff ff       	call   69e0 <vkDestroyFramebuffer@plt>
      for (auto &framebuffer : _framebuffers) {
    baa4:	49 39 dc             	cmp    %rbx,%r12
    baa7:	75 e7                	jne    ba90 <_ZN4rtvc12FramebuffersD0Ev+0x30>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    baa9:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
      _isOwner = false;
    baad:	c6 45 30 00          	movb   $0x0,0x30(%rbp)
	if (__p)
    bab1:	48 85 ff             	test   %rdi,%rdi
    bab4:	74 0c                	je     bac2 <_ZN4rtvc12FramebuffersD0Ev+0x62>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bab6:	48 8b 75 18          	mov    0x18(%rbp),%rsi
    baba:	48 29 fe             	sub    %rdi,%rsi
    babd:	e8 9e aa ff ff       	call   6560 <_ZdlPvm@plt>
    bac2:	5b                   	pop    %rbx
    bac3:	48 89 ef             	mov    %rbp,%rdi
    bac6:	be 38 00 00 00       	mov    $0x38,%esi
    bacb:	5d                   	pop    %rbp
    bacc:	41 5c                	pop    %r12
    bace:	e9 8d aa ff ff       	jmp    6560 <_ZdlPvm@plt>
    bad3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    bada:	00 00 00 
    badd:	0f 1f 00             	nopl   (%rax)

000000000000bae0 <_ZNSt10filesystem7__cxx114pathD1Ev>:
    ~path() = default;
    bae0:	53                   	push   %rbx
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
    bae1:	48 8b 77 20          	mov    0x20(%rdi),%rsi
    bae5:	48 89 fb             	mov    %rdi,%rbx
    bae8:	48 85 f6             	test   %rsi,%rsi
    baeb:	74 09                	je     baf6 <_ZNSt10filesystem7__cxx114pathD1Ev+0x16>
	_GLIBCXX20_CONSTEXPR
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    baed:	48 8d 7f 20          	lea    0x20(%rdi),%rdi
	  get_deleter()(std::move(__ptr));
    baf1:	e8 2a a6 ff ff       	call   6120 <_ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE@plt>
    baf6:	48 8b 3b             	mov    (%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    baf9:	48 8d 43 10          	lea    0x10(%rbx),%rax
	if (!_M_is_local())
    bafd:	48 39 c7             	cmp    %rax,%rdi
    bb00:	74 0e                	je     bb10 <_ZNSt10filesystem7__cxx114pathD1Ev+0x30>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    bb02:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    bb06:	5b                   	pop    %rbx
    bb07:	48 83 c6 01          	add    $0x1,%rsi
    bb0b:	e9 50 aa ff ff       	jmp    6560 <_ZdlPvm@plt>
    bb10:	5b                   	pop    %rbx
    bb11:	c3                   	ret
    bb12:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    bb19:	00 00 00 
    bb1c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000bb20 <_ZN4rtvc9VulkanAppD1Ev>:
  ~VulkanApp() = default;
    bb20:	41 56                	push   %r14
    bb22:	41 55                	push   %r13
    bb24:	41 54                	push   %r12
    bb26:	55                   	push   %rbp
    bb27:	53                   	push   %rbx
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    bb28:	80 bf 88 04 00 00 00 	cmpb   $0x0,0x488(%rdi)
    bb2f:	48 89 fb             	mov    %rdi,%rbx
    bb32:	0f 85 18 05 00 00    	jne    c050 <_ZN4rtvc9VulkanAppD1Ev+0x530>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bb38:	48 8b bb 60 04 00 00 	mov    0x460(%rbx),%rdi
	if (__p)
    bb3f:	48 85 ff             	test   %rdi,%rdi
    bb42:	74 0f                	je     bb53 <_ZN4rtvc9VulkanAppD1Ev+0x33>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bb44:	48 8b b3 70 04 00 00 	mov    0x470(%rbx),%rsi
    bb4b:	48 29 fe             	sub    %rdi,%rsi
    bb4e:	e8 0d aa ff ff       	call   6560 <_ZdlPvm@plt>
    if (_isOwner) {
    bb53:	80 bb 58 04 00 00 00 	cmpb   $0x0,0x458(%rbx)
    bb5a:	0f 85 80 07 00 00    	jne    c2e0 <_ZN4rtvc9VulkanAppD1Ev+0x7c0>
    bb60:	48 8d 05 09 4a 03 00 	lea    0x34a09(%rip),%rax        # 40570 <_ZTVN3vkw7SamplerE+0x10>
    if (_isOwner) {
    bb67:	80 bb 38 04 00 00 00 	cmpb   $0x0,0x438(%rbx)
  virtual ~Sampler() { _destroyVkData(); }
    bb6e:	48 89 83 18 04 00 00 	mov    %rax,0x418(%rbx)
    if (_isOwner) {
    bb75:	0f 85 45 07 00 00    	jne    c2c0 <_ZN4rtvc9VulkanAppD1Ev+0x7a0>
  virtual ~ImageView() { _destroyVkData(); }
    bb7b:	48 8d 05 f6 4a 03 00 	lea    0x34af6(%rip),%rax        # 40678 <_ZTVN3vkw9ImageViewE+0x10>
    if (_isOwner) {
    bb82:	80 bb 10 04 00 00 00 	cmpb   $0x0,0x410(%rbx)
  virtual ~ImageView() { _destroyVkData(); }
    bb89:	48 89 83 f0 03 00 00 	mov    %rax,0x3f0(%rbx)
    if (_isOwner) {
    bb90:	0f 85 02 07 00 00    	jne    c298 <_ZN4rtvc9VulkanAppD1Ev+0x778>
    bb96:	48 8d 05 bb 4a 03 00 	lea    0x34abb(%rip),%rax        # 40658 <_ZTVN3vkw5ImageE+0x10>
    if (_isOwner) {
    bb9d:	80 bb e8 03 00 00 00 	cmpb   $0x0,0x3e8(%rbx)
  virtual ~Image() { _destroyVkData(); }
    bba4:	48 89 83 b0 03 00 00 	mov    %rax,0x3b0(%rbx)
    if (_isOwner) {
    bbab:	0f 85 a7 06 00 00    	jne    c258 <_ZN4rtvc9VulkanAppD1Ev+0x738>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bbb1:	4c 8b a3 a0 03 00 00 	mov    0x3a0(%rbx),%r12
    bbb8:	48 8b ab 98 03 00 00 	mov    0x398(%rbx),%rbp
    bbbf:	4c 8d 2d 6a 4a 03 00 	lea    0x34a6a(%rip),%r13        # 40630 <_ZTVN3vkw6BufferE+0x10>
    bbc6:	49 39 ec             	cmp    %rbp,%r12
    bbc9:	74 62                	je     bc2d <_ZN4rtvc9VulkanAppD1Ev+0x10d>
    bbcb:	4c 8d 35 9e fa ff ff 	lea    -0x562(%rip),%r14        # b670 <_ZN3vkw6BufferD1Ev>
    bbd2:	eb 0d                	jmp    bbe1 <_ZN4rtvc9VulkanAppD1Ev+0xc1>
    bbd4:	0f 1f 40 00          	nopl   0x0(%rax)
    bbd8:	48 83 c5 40          	add    $0x40,%rbp
    bbdc:	49 39 ec             	cmp    %rbp,%r12
    bbdf:	74 45                	je     bc26 <_ZN4rtvc9VulkanAppD1Ev+0x106>
      __pointer->~_Tp();
    bbe1:	48 8b 45 00          	mov    0x0(%rbp),%rax
    bbe5:	48 8b 00             	mov    (%rax),%rax
    bbe8:	4c 39 f0             	cmp    %r14,%rax
    bbeb:	0f 85 a7 03 00 00    	jne    bf98 <_ZN4rtvc9VulkanAppD1Ev+0x478>
    if (_isOwner) {
    bbf1:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
  virtual ~Buffer() { _destroyVkData(); }
    bbf5:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    if (_isOwner) {
    bbf9:	74 dd                	je     bbd8 <_ZN4rtvc9VulkanAppD1Ev+0xb8>
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
    bbfb:	48 8b 55 28          	mov    0x28(%rbp),%rdx
    bbff:	48 8b 75 08          	mov    0x8(%rbp),%rsi
	  for (; __first != __last; ++__first)
    bc03:	48 83 c5 40          	add    $0x40,%rbp
    bc07:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    bc0b:	e8 50 a6 ff ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    bc10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bc14:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    bc18:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    bc1c:	e8 8f a8 ff ff       	call   64b0 <vkFreeMemory@plt>
    bc21:	49 39 ec             	cmp    %rbp,%r12
    bc24:	75 bb                	jne    bbe1 <_ZN4rtvc9VulkanAppD1Ev+0xc1>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bc26:	48 8b ab 98 03 00 00 	mov    0x398(%rbx),%rbp
	if (__p)
    bc2d:	48 85 ed             	test   %rbp,%rbp
    bc30:	74 12                	je     bc44 <_ZN4rtvc9VulkanAppD1Ev+0x124>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bc32:	48 8b b3 a8 03 00 00 	mov    0x3a8(%rbx),%rsi
    bc39:	48 89 ef             	mov    %rbp,%rdi
    bc3c:	48 29 ee             	sub    %rbp,%rsi
    bc3f:	e8 1c a9 ff ff       	call   6560 <_ZdlPvm@plt>
    if (_isOwner) {
    bc44:	80 bb 90 03 00 00 00 	cmpb   $0x0,0x390(%rbx)
  virtual ~Buffer() { _destroyVkData(); }
    bc4b:	4c 89 ab 58 03 00 00 	mov    %r13,0x358(%rbx)
    if (_isOwner) {
    bc52:	0f 85 c0 05 00 00    	jne    c218 <_ZN4rtvc9VulkanAppD1Ev+0x6f8>
    bc58:	80 bb 50 03 00 00 00 	cmpb   $0x0,0x350(%rbx)
  virtual ~Buffer() { _destroyVkData(); }
    bc5f:	4c 89 ab 18 03 00 00 	mov    %r13,0x318(%rbx)
    if (_isOwner) {
    bc66:	0f 85 6c 05 00 00    	jne    c1d8 <_ZN4rtvc9VulkanAppD1Ev+0x6b8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bc6c:	4c 8b a3 00 03 00 00 	mov    0x300(%rbx),%r12
    bc73:	48 8b ab f8 02 00 00 	mov    0x2f8(%rbx),%rbp
    bc7a:	49 39 ec             	cmp    %rbp,%r12
    bc7d:	74 1b                	je     bc9a <_ZN4rtvc9VulkanAppD1Ev+0x17a>
    bc7f:	90                   	nop
    if (_isOwner) {
    bc80:	80 7d 18 00          	cmpb   $0x0,0x18(%rbp)
    bc84:	0f 85 6e 03 00 00    	jne    bff8 <_ZN4rtvc9VulkanAppD1Ev+0x4d8>
    bc8a:	48 83 c5 20          	add    $0x20,%rbp
    bc8e:	49 39 ec             	cmp    %rbp,%r12
    bc91:	75 ed                	jne    bc80 <_ZN4rtvc9VulkanAppD1Ev+0x160>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bc93:	48 8b ab f8 02 00 00 	mov    0x2f8(%rbx),%rbp
	if (__p)
    bc9a:	48 85 ed             	test   %rbp,%rbp
    bc9d:	74 12                	je     bcb1 <_ZN4rtvc9VulkanAppD1Ev+0x191>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bc9f:	48 8b b3 08 03 00 00 	mov    0x308(%rbx),%rsi
    bca6:	48 89 ef             	mov    %rbp,%rdi
    bca9:	48 29 ee             	sub    %rbp,%rsi
    bcac:	e8 af a8 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bcb1:	4c 8b a3 e8 02 00 00 	mov    0x2e8(%rbx),%r12
    bcb8:	48 8b ab e0 02 00 00 	mov    0x2e0(%rbx),%rbp
    bcbf:	49 39 ec             	cmp    %rbp,%r12
    bcc2:	74 1e                	je     bce2 <_ZN4rtvc9VulkanAppD1Ev+0x1c2>
    bcc4:	0f 1f 40 00          	nopl   0x0(%rax)
      rhs._isOwner = false;
    }
  }

  void _destroyVkData() {
    if (_isOwner) {
    bcc8:	80 7d 18 00          	cmpb   $0x0,0x18(%rbp)
    bccc:	0f 85 fe 02 00 00    	jne    bfd0 <_ZN4rtvc9VulkanAppD1Ev+0x4b0>
    bcd2:	48 83 c5 20          	add    $0x20,%rbp
    bcd6:	49 39 ec             	cmp    %rbp,%r12
    bcd9:	75 ed                	jne    bcc8 <_ZN4rtvc9VulkanAppD1Ev+0x1a8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bcdb:	48 8b ab e0 02 00 00 	mov    0x2e0(%rbx),%rbp
	if (__p)
    bce2:	48 85 ed             	test   %rbp,%rbp
    bce5:	74 12                	je     bcf9 <_ZN4rtvc9VulkanAppD1Ev+0x1d9>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bce7:	48 8b b3 f0 02 00 00 	mov    0x2f0(%rbx),%rsi
    bcee:	48 89 ef             	mov    %rbp,%rdi
    bcf1:	48 29 ee             	sub    %rbp,%rsi
    bcf4:	e8 67 a8 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bcf9:	4c 8b a3 d0 02 00 00 	mov    0x2d0(%rbx),%r12
    bd00:	48 8b ab c8 02 00 00 	mov    0x2c8(%rbx),%rbp
    bd07:	49 39 ec             	cmp    %rbp,%r12
    bd0a:	74 1e                	je     bd2a <_ZN4rtvc9VulkanAppD1Ev+0x20a>
    bd0c:	0f 1f 40 00          	nopl   0x0(%rax)
    bd10:	80 7d 18 00          	cmpb   $0x0,0x18(%rbp)
    bd14:	0f 85 8e 02 00 00    	jne    bfa8 <_ZN4rtvc9VulkanAppD1Ev+0x488>
    bd1a:	48 83 c5 20          	add    $0x20,%rbp
    bd1e:	49 39 ec             	cmp    %rbp,%r12
    bd21:	75 ed                	jne    bd10 <_ZN4rtvc9VulkanAppD1Ev+0x1f0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bd23:	48 8b ab c8 02 00 00 	mov    0x2c8(%rbx),%rbp
	if (__p)
    bd2a:	48 85 ed             	test   %rbp,%rbp
    bd2d:	74 12                	je     bd41 <_ZN4rtvc9VulkanAppD1Ev+0x221>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bd2f:	48 8b b3 d8 02 00 00 	mov    0x2d8(%rbx),%rsi
    bd36:	48 89 ef             	mov    %rbp,%rdi
    bd39:	48 29 ee             	sub    %rbp,%rsi
    bd3c:	e8 1f a8 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bd41:	48 8b bb b0 02 00 00 	mov    0x2b0(%rbx),%rdi
	if (__p)
    bd48:	48 85 ff             	test   %rdi,%rdi
    bd4b:	74 0f                	je     bd5c <_ZN4rtvc9VulkanAppD1Ev+0x23c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bd4d:	48 8b b3 c0 02 00 00 	mov    0x2c0(%rbx),%rsi
    bd54:	48 29 fe             	sub    %rdi,%rsi
    bd57:	e8 04 a8 ff ff       	call   6560 <_ZdlPvm@plt>
    if (_isOwner) {
    bd5c:	80 bb a8 02 00 00 00 	cmpb   $0x0,0x2a8(%rbx)
    bd63:	0f 85 c7 02 00 00    	jne    c030 <_ZN4rtvc9VulkanAppD1Ev+0x510>
  virtual ~Framebuffers() { _destroyVkData(); }
    bd69:	48 8d 05 c0 47 03 00 	lea    0x347c0(%rip),%rax        # 40530 <_ZTVN3vkw12FramebuffersE+0x10>
    if (_isOwner) {
    bd70:	80 bb 80 02 00 00 00 	cmpb   $0x0,0x280(%rbx)
    bd77:	48 8b bb 58 02 00 00 	mov    0x258(%rbx),%rdi
  virtual ~Framebuffers() { _destroyVkData(); }
    bd7e:	48 89 83 50 02 00 00 	mov    %rax,0x250(%rbx)
    if (_isOwner) {
    bd85:	74 47                	je     bdce <_ZN4rtvc9VulkanAppD1Ev+0x2ae>
    bd87:	4c 8b a3 60 02 00 00 	mov    0x260(%rbx),%r12
      for (auto &framebuffer : _framebuffers) {
    bd8e:	49 39 fc             	cmp    %rdi,%r12
    bd91:	74 34                	je     bdc7 <_ZN4rtvc9VulkanAppD1Ev+0x2a7>
    bd93:	48 89 fd             	mov    %rdi,%rbp
    bd96:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    bd9d:	00 00 00 
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    bda0:	48 8b 75 00          	mov    0x0(%rbp),%rsi
    bda4:	48 8b 93 78 02 00 00 	mov    0x278(%rbx),%rdx
      for (auto &framebuffer : _framebuffers) {
    bdab:	48 83 c5 08          	add    $0x8,%rbp
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
    bdaf:	48 8b bb 70 02 00 00 	mov    0x270(%rbx),%rdi
    bdb6:	e8 25 ac ff ff       	call   69e0 <vkDestroyFramebuffer@plt>
      for (auto &framebuffer : _framebuffers) {
    bdbb:	49 39 ec             	cmp    %rbp,%r12
    bdbe:	75 e0                	jne    bda0 <_ZN4rtvc9VulkanAppD1Ev+0x280>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bdc0:	48 8b bb 58 02 00 00 	mov    0x258(%rbx),%rdi
      _isOwner = false;
    bdc7:	c6 83 80 02 00 00 00 	movb   $0x0,0x280(%rbx)
	if (__p)
    bdce:	48 85 ff             	test   %rdi,%rdi
    bdd1:	74 0f                	je     bde2 <_ZN4rtvc9VulkanAppD1Ev+0x2c2>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bdd3:	48 8b b3 68 02 00 00 	mov    0x268(%rbx),%rsi
    bdda:	48 29 fe             	sub    %rdi,%rsi
    bddd:	e8 7e a7 ff ff       	call   6560 <_ZdlPvm@plt>
    bde2:	48 8d 05 27 48 03 00 	lea    0x34827(%rip),%rax        # 40610 <_ZTVN3vkw16GraphicsPipelineE+0x10>
    if (_isOwner) {
    bde9:	80 bb 48 02 00 00 00 	cmpb   $0x0,0x248(%rbx)
  virtual ~GraphicsPipeline() { _destroyVkData(); }
    bdf0:	48 89 83 10 02 00 00 	mov    %rax,0x210(%rbx)
    if (_isOwner) {
    bdf7:	0f 85 83 03 00 00    	jne    c180 <_ZN4rtvc9VulkanAppD1Ev+0x660>
    bdfd:	48 8d 05 ec 47 03 00 	lea    0x347ec(%rip),%rax        # 405f0 <_ZTVN3vkw19DescriptorSetLayoutE+0x10>
    if (_isOwner) {
    be04:	80 bb 08 02 00 00 00 	cmpb   $0x0,0x208(%rbx)
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
    be0b:	48 89 83 e8 01 00 00 	mov    %rax,0x1e8(%rbx)
    if (_isOwner) {
    be12:	0f 85 48 03 00 00    	jne    c160 <_ZN4rtvc9VulkanAppD1Ev+0x640>
  virtual ~ImageViews() { _destroyVkData(); }
    be18:	48 8d 05 79 48 03 00 	lea    0x34879(%rip),%rax        # 40698 <_ZTVN3vkw10ImageViewsE+0x10>
    if (_isOwner) {
    be1f:	80 bb e0 01 00 00 00 	cmpb   $0x0,0x1e0(%rbx)
    be26:	48 8b bb b8 01 00 00 	mov    0x1b8(%rbx),%rdi
  virtual ~ImageViews() { _destroyVkData(); }
    be2d:	48 89 83 b0 01 00 00 	mov    %rax,0x1b0(%rbx)
    if (_isOwner) {
    be34:	74 40                	je     be76 <_ZN4rtvc9VulkanAppD1Ev+0x356>
    be36:	4c 8b a3 c0 01 00 00 	mov    0x1c0(%rbx),%r12
      for (auto &imageView : _imageViews) {
    be3d:	49 39 fc             	cmp    %rdi,%r12
    be40:	74 2d                	je     be6f <_ZN4rtvc9VulkanAppD1Ev+0x34f>
    be42:	48 89 fd             	mov    %rdi,%rbp
    be45:	0f 1f 00             	nopl   (%rax)
        vkDestroyImageView(_device, imageView, _pAllocator);
    be48:	48 8b 75 00          	mov    0x0(%rbp),%rsi
    be4c:	48 8b 93 d8 01 00 00 	mov    0x1d8(%rbx),%rdx
      for (auto &imageView : _imageViews) {
    be53:	48 83 c5 08          	add    $0x8,%rbp
        vkDestroyImageView(_device, imageView, _pAllocator);
    be57:	48 8b bb d0 01 00 00 	mov    0x1d0(%rbx),%rdi
    be5e:	e8 0d ac ff ff       	call   6a70 <vkDestroyImageView@plt>
      for (auto &imageView : _imageViews) {
    be63:	49 39 ec             	cmp    %rbp,%r12
    be66:	75 e0                	jne    be48 <_ZN4rtvc9VulkanAppD1Ev+0x328>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    be68:	48 8b bb b8 01 00 00 	mov    0x1b8(%rbx),%rdi
      _isOwner = false;
    be6f:	c6 83 e0 01 00 00 00 	movb   $0x0,0x1e0(%rbx)
	if (__p)
    be76:	48 85 ff             	test   %rdi,%rdi
    be79:	74 0f                	je     be8a <_ZN4rtvc9VulkanAppD1Ev+0x36a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    be7b:	48 8b b3 c8 01 00 00 	mov    0x1c8(%rbx),%rsi
    be82:	48 29 fe             	sub    %rdi,%rsi
    be85:	e8 d6 a6 ff ff       	call   6560 <_ZdlPvm@plt>
    be8a:	48 8d 05 1f 47 03 00 	lea    0x3471f(%rip),%rax        # 405b0 <_ZTVN3vkw9SwapchainE+0x10>
    if (_isOwner) {
    be91:	80 bb a8 01 00 00 00 	cmpb   $0x0,0x1a8(%rbx)
  virtual ~Swapchain() { _destroyVkData(); }
    be98:	48 89 83 78 01 00 00 	mov    %rax,0x178(%rbx)
    if (_isOwner) {
    be9f:	0f 85 9b 02 00 00    	jne    c140 <_ZN4rtvc9VulkanAppD1Ev+0x620>
    bea5:	48 8d 05 64 46 03 00 	lea    0x34664(%rip),%rax        # 40510 <_ZTVN3vkw6DeviceE+0x10>
    if (_isOwner) {
    beac:	80 bb 70 01 00 00 00 	cmpb   $0x0,0x170(%rbx)
  virtual ~Device() { _destroyVkData(); }
    beb3:	48 89 83 40 01 00 00 	mov    %rax,0x140(%rbx)
    if (_isOwner) {
    beba:	0f 85 60 02 00 00    	jne    c120 <_ZN4rtvc9VulkanAppD1Ev+0x600>
    bec0:	48 8d 05 c9 46 03 00 	lea    0x346c9(%rip),%rax        # 40590 <_ZTVN3vkw7SurfaceE+0x10>
    if (_isOwner) {
    bec7:	80 bb 38 01 00 00 00 	cmpb   $0x0,0x138(%rbx)
  virtual ~Surface() { _destroyVkData(); }
    bece:	48 89 83 10 01 00 00 	mov    %rax,0x110(%rbx)
    if (_isOwner) {
    bed5:	0f 85 25 02 00 00    	jne    c100 <_ZN4rtvc9VulkanAppD1Ev+0x5e0>
  virtual ~DebugMessenger() { _destroyVkData(); }
    bedb:	48 8d 05 0e 46 03 00 	lea    0x3460e(%rip),%rax        # 404f0 <_ZTVN3vkw14DebugMessengerE+0x10>
    if (_isOwner) {
    bee2:	80 bb 08 01 00 00 00 	cmpb   $0x0,0x108(%rbx)
  virtual ~DebugMessenger() { _destroyVkData(); }
    bee9:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
    if (_isOwner) {
    bef0:	0f 85 ca 01 00 00    	jne    c0c0 <_ZN4rtvc9VulkanAppD1Ev+0x5a0>
    bef6:	48 8d 05 53 46 03 00 	lea    0x34653(%rip),%rax        # 40550 <_ZTVN3vkw8InstanceE+0x10>
    if (_isOwner) {
    befd:	80 bb b0 00 00 00 00 	cmpb   $0x0,0xb0(%rbx)
  virtual ~Instance() { _destroyVkData(); }
    bf04:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
    if (_isOwner) {
    bf0b:	0f 85 8f 01 00 00    	jne    c0a0 <_ZN4rtvc9VulkanAppD1Ev+0x580>
    if (_isOwner) {
    bf11:	80 bb 90 00 00 00 00 	cmpb   $0x0,0x90(%rbx)
    bf18:	0f 85 6a 01 00 00    	jne    c088 <_ZN4rtvc9VulkanAppD1Ev+0x568>
  virtual ~GLFW() { glfwTerminate(); }
    bf1e:	48 8d 05 ab 46 03 00 	lea    0x346ab(%rip),%rax        # 405d0 <_ZTVN3vkw4GLFWE+0x10>
    bf25:	48 89 83 80 00 00 00 	mov    %rax,0x80(%rbx)
    bf2c:	e8 4f a6 ff ff       	call   6580 <glfwTerminate@plt>
      { return _M_dataplus._M_p; }
    bf31:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    bf35:	48 8d 43 70          	lea    0x70(%rbx),%rax
	if (!_M_is_local())
    bf39:	48 39 c7             	cmp    %rax,%rdi
    bf3c:	74 0d                	je     bf4b <_ZN4rtvc9VulkanAppD1Ev+0x42b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    bf3e:	48 8b 43 70          	mov    0x70(%rbx),%rax
    bf42:	48 8d 70 01          	lea    0x1(%rax),%rsi
    bf46:	e8 15 a6 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bf4b:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
	if (__p)
    bf4f:	48 85 ff             	test   %rdi,%rdi
    bf52:	74 0c                	je     bf60 <_ZN4rtvc9VulkanAppD1Ev+0x440>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bf54:	48 8b 73 40          	mov    0x40(%rbx),%rsi
    bf58:	48 29 fe             	sub    %rdi,%rsi
    bf5b:	e8 00 a6 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bf60:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
	if (__p)
    bf64:	48 85 ff             	test   %rdi,%rdi
    bf67:	74 0c                	je     bf75 <_ZN4rtvc9VulkanAppD1Ev+0x455>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bf69:	48 8b 73 28          	mov    0x28(%rbx),%rsi
    bf6d:	48 29 fe             	sub    %rdi,%rsi
    bf70:	e8 eb a5 ff ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    bf75:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    bf78:	48 85 ff             	test   %rdi,%rdi
    bf7b:	0f 84 9f 00 00 00    	je     c020 <_ZN4rtvc9VulkanAppD1Ev+0x500>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    bf81:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    bf85:	5b                   	pop    %rbx
    bf86:	5d                   	pop    %rbp
    bf87:	41 5c                	pop    %r12
    bf89:	48 29 fe             	sub    %rdi,%rsi
    bf8c:	41 5d                	pop    %r13
    bf8e:	41 5e                	pop    %r14
    bf90:	e9 cb a5 ff ff       	jmp    6560 <_ZdlPvm@plt>
    bf95:	0f 1f 00             	nopl   (%rax)
      __pointer->~_Tp();
    bf98:	48 89 ef             	mov    %rbp,%rdi
    bf9b:	ff d0                	call   *%rax
    bf9d:	e9 36 fc ff ff       	jmp    bbd8 <_ZN4rtvc9VulkanAppD1Ev+0xb8>
    bfa2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroySemaphore(_device, _semaphore, _pAllocator);
    bfa8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
    bfac:	48 8b 75 00          	mov    0x0(%rbp),%rsi
	  for (; __first != __last; ++__first)
    bfb0:	48 83 c5 20          	add    $0x20,%rbp
    bfb4:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    bfb8:	e8 b3 a1 ff ff       	call   6170 <vkDestroySemaphore@plt>
    bfbd:	49 39 ec             	cmp    %rbp,%r12
    bfc0:	0f 85 4a fd ff ff    	jne    bd10 <_ZN4rtvc9VulkanAppD1Ev+0x1f0>
    bfc6:	e9 58 fd ff ff       	jmp    bd23 <_ZN4rtvc9VulkanAppD1Ev+0x203>
    bfcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    bfd0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
    bfd4:	48 8b 75 00          	mov    0x0(%rbp),%rsi
    bfd8:	48 83 c5 20          	add    $0x20,%rbp
    bfdc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    bfe0:	e8 8b a1 ff ff       	call   6170 <vkDestroySemaphore@plt>
    bfe5:	49 39 ec             	cmp    %rbp,%r12
    bfe8:	0f 85 da fc ff ff    	jne    bcc8 <_ZN4rtvc9VulkanAppD1Ev+0x1a8>
    bfee:	e9 e8 fc ff ff       	jmp    bcdb <_ZN4rtvc9VulkanAppD1Ev+0x1bb>
    bff3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      vkDestroyFence(_device, _fence, _pAllocator);
    bff8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
    bffc:	48 8b 75 00          	mov    0x0(%rbp),%rsi
    c000:	48 83 c5 20          	add    $0x20,%rbp
    c004:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    c008:	e8 d3 a5 ff ff       	call   65e0 <vkDestroyFence@plt>
    c00d:	49 39 ec             	cmp    %rbp,%r12
    c010:	0f 85 6a fc ff ff    	jne    bc80 <_ZN4rtvc9VulkanAppD1Ev+0x160>
    c016:	e9 78 fc ff ff       	jmp    bc93 <_ZN4rtvc9VulkanAppD1Ev+0x173>
    c01b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    c020:	5b                   	pop    %rbx
    c021:	5d                   	pop    %rbp
    c022:	41 5c                	pop    %r12
    c024:	41 5d                	pop    %r13
    c026:	41 5e                	pop    %r14
    c028:	c3                   	ret
    c029:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      vkh::destroyCommandPool(_device, _commandPool, _pAllocator);
    c030:	48 8b 93 a0 02 00 00 	mov    0x2a0(%rbx),%rdx
    c037:	48 8b b3 90 02 00 00 	mov    0x290(%rbx),%rsi
    c03e:	48 8b bb 98 02 00 00 	mov    0x298(%rbx),%rdi
    c045:	e8 16 1e 00 00       	call   de60 <_ZN3vkh18destroyCommandPoolEP10VkDevice_TP15VkCommandPool_TPK21VkAllocationCallbacks>
      _isOwner = false;
      if constexpr (enableValidationLayers) {
        std::cout << "CommandPool destructor" << '\n';
      }
    }
  }
    c04a:	e9 1a fd ff ff       	jmp    bd69 <_ZN4rtvc9VulkanAppD1Ev+0x249>
    c04f:	90                   	nop
      { return _M_data_ptr(this->_M_impl._M_start); }
    c050:	48 8b 8f 60 04 00 00 	mov    0x460(%rdi),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c057:	48 8b 97 68 04 00 00 	mov    0x468(%rdi),%rdx
      vkFreeDescriptorSets(_device, _pool, static_cast<uint32_t>(_sets.size()),
    c05e:	48 8b b7 80 04 00 00 	mov    0x480(%rdi),%rsi
    c065:	48 8b bf 78 04 00 00 	mov    0x478(%rdi),%rdi
    c06c:	48 29 ca             	sub    %rcx,%rdx
    c06f:	48 c1 fa 03          	sar    $0x3,%rdx
    c073:	e8 48 a6 ff ff       	call   66c0 <vkFreeDescriptorSets@plt>
                           _sets.data());
      _isOwner = false;
    c078:	c6 83 88 04 00 00 00 	movb   $0x0,0x488(%rbx)
      if constexpr (enableValidationLayers) {
        std::cout << "DescriptorSets destructor" << '\n';
      }
    }
  }
    c07f:	e9 b4 fa ff ff       	jmp    bb38 <_ZN4rtvc9VulkanAppD1Ev+0x18>
    c084:	0f 1f 40 00          	nopl   0x0(%rax)
      glfwDestroyWindow(_window);
    c088:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
    c08f:	e8 fc a0 ff ff       	call   6190 <glfwDestroyWindow@plt>
      _isOwner = false;
      if constexpr (enableValidationLayers) {
    c094:	e9 85 fe ff ff       	jmp    bf1e <_ZN4rtvc9VulkanAppD1Ev+0x3fe>
    c099:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      vkDestroyInstance(_instance, _pAllocator);
    c0a0:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
    c0a7:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
    c0ae:	e8 bd a4 ff ff       	call   6570 <vkDestroyInstance@plt>
      if constexpr (enableValidationLayers) {
    c0b3:	e9 59 fe ff ff       	jmp    bf11 <_ZN4rtvc9VulkanAppD1Ev+0x3f1>
    c0b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    c0bf:	00 
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
    c0c0:	48 8b ab f8 00 00 00 	mov    0xf8(%rbx),%rbp
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    c0c7:	48 8d 35 da af 02 00 	lea    0x2afda(%rip),%rsi        # 370a8 <_IO_stdin_used+0xa8>
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
    c0ce:	4c 8b ab 00 01 00 00 	mov    0x100(%rbx),%r13
    c0d5:	4c 8b a3 f0 00 00 00 	mov    0xf0(%rbx),%r12
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    c0dc:	48 89 ef             	mov    %rbp,%rdi
    c0df:	e8 fc a3 ff ff       	call   64e0 <vkGetInstanceProcAddr@plt>
  if (func != nullptr) {
    c0e4:	48 85 c0             	test   %rax,%rax
    c0e7:	0f 84 09 fe ff ff    	je     bef6 <_ZN4rtvc9VulkanAppD1Ev+0x3d6>
    func(instance, debugMessenger, pAllocator);
    c0ed:	4c 89 ea             	mov    %r13,%rdx
    c0f0:	4c 89 e6             	mov    %r12,%rsi
    c0f3:	48 89 ef             	mov    %rbp,%rdi
    c0f6:	ff d0                	call   *%rax
    c0f8:	e9 f9 fd ff ff       	jmp    bef6 <_ZN4rtvc9VulkanAppD1Ev+0x3d6>
    c0fd:	0f 1f 00             	nopl   (%rax)
      vkh::destroySurface(_instance, _surface, _pAllocator);
    c100:	48 8b 93 30 01 00 00 	mov    0x130(%rbx),%rdx
    c107:	48 8b b3 18 01 00 00 	mov    0x118(%rbx),%rsi
    c10e:	48 8b bb 20 01 00 00 	mov    0x120(%rbx),%rdi
    c115:	e8 76 1c 00 00       	call   dd90 <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>
      _isOwner = false;
      if constexpr (enableValidationLayers) {
        std::cout << "Surface destructor" << '\n';
      }
    }
  }
    c11a:	e9 bc fd ff ff       	jmp    bedb <_ZN4rtvc9VulkanAppD1Ev+0x3bb>
    c11f:	90                   	nop
      vkh::destroyDevice(_device, _pAllocator);
    c120:	48 8b b3 68 01 00 00 	mov    0x168(%rbx),%rsi
    c127:	48 8b bb 48 01 00 00 	mov    0x148(%rbx),%rdi
    c12e:	e8 4d 1c 00 00       	call   dd80 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>
      if constexpr (enableValidationLayers) {
    c133:	e9 88 fd ff ff       	jmp    bec0 <_ZN4rtvc9VulkanAppD1Ev+0x3a0>
    c138:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    c13f:	00 
      vkDestroySwapchainKHR(_device, _swapchain, _pAllocator);
    c140:	48 8b 93 a0 01 00 00 	mov    0x1a0(%rbx),%rdx
    c147:	48 8b b3 80 01 00 00 	mov    0x180(%rbx),%rsi
    c14e:	48 8b bb 98 01 00 00 	mov    0x198(%rbx),%rdi
    c155:	e8 d6 9f ff ff       	call   6130 <vkDestroySwapchainKHR@plt>
  }
    c15a:	e9 46 fd ff ff       	jmp    bea5 <_ZN4rtvc9VulkanAppD1Ev+0x385>
    c15f:	90                   	nop
      vkDestroyDescriptorSetLayout(_device, _setLayout, _pAllocator);
    c160:	48 8b 93 00 02 00 00 	mov    0x200(%rbx),%rdx
    c167:	48 8b b3 f0 01 00 00 	mov    0x1f0(%rbx),%rsi
    c16e:	48 8b bb f8 01 00 00 	mov    0x1f8(%rbx),%rdi
    c175:	e8 c6 a7 ff ff       	call   6940 <vkDestroyDescriptorSetLayout@plt>
  }
    c17a:	e9 99 fc ff ff       	jmp    be18 <_ZN4rtvc9VulkanAppD1Ev+0x2f8>
    c17f:	90                   	nop
      vkDestroyPipeline(_device, _graphicsPipeline, _pAllocator);
    c180:	48 8b 93 40 02 00 00 	mov    0x240(%rbx),%rdx
    c187:	48 8b b3 18 02 00 00 	mov    0x218(%rbx),%rsi
    c18e:	48 8b bb 20 02 00 00 	mov    0x220(%rbx),%rdi
    c195:	e8 56 a4 ff ff       	call   65f0 <vkDestroyPipeline@plt>
      vkDestroyPipelineLayout(_device, _pipelineLayout, _pAllocator);
    c19a:	48 8b 93 40 02 00 00 	mov    0x240(%rbx),%rdx
    c1a1:	48 8b b3 30 02 00 00 	mov    0x230(%rbx),%rsi
    c1a8:	48 8b bb 20 02 00 00 	mov    0x220(%rbx),%rdi
    c1af:	e8 3c a5 ff ff       	call   66f0 <vkDestroyPipelineLayout@plt>
      vkDestroyRenderPass(_device, _renderPass, _pAllocator);
    c1b4:	48 8b 93 40 02 00 00 	mov    0x240(%rbx),%rdx
    c1bb:	48 8b b3 38 02 00 00 	mov    0x238(%rbx),%rsi
    c1c2:	48 8b bb 20 02 00 00 	mov    0x220(%rbx),%rdi
    c1c9:	e8 32 a3 ff ff       	call   6500 <vkDestroyRenderPass@plt>
  }
    c1ce:	e9 2a fc ff ff       	jmp    bdfd <_ZN4rtvc9VulkanAppD1Ev+0x2dd>
    c1d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
    c1d8:	48 8b 93 40 03 00 00 	mov    0x340(%rbx),%rdx
    c1df:	48 8b b3 20 03 00 00 	mov    0x320(%rbx),%rsi
    c1e6:	48 8b bb 28 03 00 00 	mov    0x328(%rbx),%rdi
    c1ed:	e8 6e a0 ff ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    c1f2:	48 8b 93 48 03 00 00 	mov    0x348(%rbx),%rdx
    c1f9:	48 8b b3 30 03 00 00 	mov    0x330(%rbx),%rsi
    c200:	48 8b bb 28 03 00 00 	mov    0x328(%rbx),%rdi
    c207:	e8 a4 a2 ff ff       	call   64b0 <vkFreeMemory@plt>
  }
    c20c:	e9 5b fa ff ff       	jmp    bc6c <_ZN4rtvc9VulkanAppD1Ev+0x14c>
    c211:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
    c218:	48 8b 93 80 03 00 00 	mov    0x380(%rbx),%rdx
    c21f:	48 8b b3 60 03 00 00 	mov    0x360(%rbx),%rsi
    c226:	48 8b bb 68 03 00 00 	mov    0x368(%rbx),%rdi
    c22d:	e8 2e a0 ff ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    c232:	48 8b 93 88 03 00 00 	mov    0x388(%rbx),%rdx
    c239:	48 8b b3 70 03 00 00 	mov    0x370(%rbx),%rsi
    c240:	48 8b bb 68 03 00 00 	mov    0x368(%rbx),%rdi
    c247:	e8 64 a2 ff ff       	call   64b0 <vkFreeMemory@plt>
  }
    c24c:	e9 07 fa ff ff       	jmp    bc58 <_ZN4rtvc9VulkanAppD1Ev+0x138>
    c251:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      vkDestroyImage(_device, _image, _pImageAllocator);
    c258:	48 8b 93 d8 03 00 00 	mov    0x3d8(%rbx),%rdx
    c25f:	48 8b b3 b8 03 00 00 	mov    0x3b8(%rbx),%rsi
    c266:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    c26d:	e8 2e 9e ff ff       	call   60a0 <vkDestroyImage@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
    c272:	48 8b 93 e0 03 00 00 	mov    0x3e0(%rbx),%rdx
    c279:	48 8b b3 c8 03 00 00 	mov    0x3c8(%rbx),%rsi
    c280:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    c287:	e8 24 a2 ff ff       	call   64b0 <vkFreeMemory@plt>
  }
    c28c:	e9 20 f9 ff ff       	jmp    bbb1 <_ZN4rtvc9VulkanAppD1Ev+0x91>
    c291:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      vkDestroyImageView(_device, _imageView, _pAllocator);
    c298:	48 8b 93 08 04 00 00 	mov    0x408(%rbx),%rdx
    c29f:	48 8b b3 f8 03 00 00 	mov    0x3f8(%rbx),%rsi
    c2a6:	48 8b bb 00 04 00 00 	mov    0x400(%rbx),%rdi
    c2ad:	e8 be a7 ff ff       	call   6a70 <vkDestroyImageView@plt>
  }
    c2b2:	e9 df f8 ff ff       	jmp    bb96 <_ZN4rtvc9VulkanAppD1Ev+0x76>
    c2b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    c2be:	00 00 
      vkDestroySampler(_device, _sampler, _pAllocator);
    c2c0:	48 8b 93 30 04 00 00 	mov    0x430(%rbx),%rdx
    c2c7:	48 8b b3 20 04 00 00 	mov    0x420(%rbx),%rsi
    c2ce:	48 8b bb 28 04 00 00 	mov    0x428(%rbx),%rdi
    c2d5:	e8 16 a0 ff ff       	call   62f0 <vkDestroySampler@plt>
  }
    c2da:	e9 9c f8 ff ff       	jmp    bb7b <_ZN4rtvc9VulkanAppD1Ev+0x5b>
    c2df:	90                   	nop
      vkDestroyDescriptorPool(_device, _pool, _pAllocator);
    c2e0:	48 8b 93 50 04 00 00 	mov    0x450(%rbx),%rdx
    c2e7:	48 8b b3 40 04 00 00 	mov    0x440(%rbx),%rsi
    c2ee:	48 8b bb 48 04 00 00 	mov    0x448(%rbx),%rdi
    c2f5:	e8 f6 a7 ff ff       	call   6af0 <vkDestroyDescriptorPool@plt>
  }
    c2fa:	e9 61 f8 ff ff       	jmp    bb60 <_ZN4rtvc9VulkanAppD1Ev+0x40>
    c2ff:	90                   	nop

000000000000c300 <_ZN3vkh21allocateCommandBufferEP10VkDevice_TPK27VkCommandBufferAllocateInfo>:
                      const VkCommandBufferAllocateInfo *pAllocateInfo) {
    c300:	55                   	push   %rbp
    c301:	53                   	push   %rbx
    c302:	48 83 ec 18          	sub    $0x18,%rsp
  if (pAllocateInfo->commandBufferCount != 1) {
    c306:	83 7e 1c 01          	cmpl   $0x1,0x1c(%rsi)
    c30a:	0f 85 6d a9 ff ff    	jne    6c7d <_ZN3vkh21allocateCommandBufferEP10VkDevice_TPK27VkCommandBufferAllocateInfo.cold>
  if (vkAllocateCommandBuffers(device, pAllocateInfo, &commandBuffer) !=
    c310:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
    c315:	e8 a6 a1 ff ff       	call   64c0 <vkAllocateCommandBuffers@plt>
    c31a:	85 c0                	test   %eax,%eax
    c31c:	0f 85 8d a9 ff ff    	jne    6caf <_ZN3vkh21allocateCommandBufferEP10VkDevice_TPK27VkCommandBufferAllocateInfo.cold+0x32>
  return commandBuffer;
    c322:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    c327:	48 83 c4 18          	add    $0x18,%rsp
    c32b:	5b                   	pop    %rbx
    c32c:	5d                   	pop    %rbp
    c32d:	c3                   	ret
    c32e:	66 90                	xchg   %ax,%ax

000000000000c330 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo>:
                       const VkCommandBufferAllocateInfo *pAllocateInfo) {
    c330:	41 57                	push   %r15
	: _M_start(), _M_finish(), _M_end_of_storage()
    c332:	66 0f ef c0          	pxor   %xmm0,%xmm0
    c336:	41 56                	push   %r14
    c338:	41 55                	push   %r13
    c33a:	49 89 f5             	mov    %rsi,%r13
    c33d:	41 54                	push   %r12
    c33f:	49 89 d4             	mov    %rdx,%r12
    c342:	55                   	push   %rbp
    c343:	53                   	push   %rbx
    c344:	48 89 fb             	mov    %rdi,%rbx
    c347:	48 83 ec 18          	sub    $0x18,%rsp
      pAllocateInfo->commandBufferCount};
    c34b:	44 8b 72 1c          	mov    0x1c(%rdx),%r14d
    c34f:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    c356:	00 
    c357:	0f 11 07             	movups %xmm0,(%rdi)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c35a:	4d 85 f6             	test   %r14,%r14
    c35d:	0f 84 85 00 00 00    	je     c3e8 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0xb8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    c363:	4e 8d 3c f5 00 00 00 	lea    0x0(,%r14,8),%r15
    c36a:	00 
    c36b:	4c 89 ff             	mov    %r15,%rdi
    c36e:	e8 cd a1 ff ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_start = this->_M_allocate(__n);
    c373:	66 48 0f 6e c0       	movq   %rax,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c378:	4a 8d 0c 38          	lea    (%rax,%r15,1),%rcx
	  if (__n > 0)
	    {
	      typename iterator_traits<_ForwardIterator>::value_type* __val
		= std::__addressof(*__first);
	      std::_Construct(__val);
	      ++__first;
    c37c:	48 8d 78 08          	lea    0x8(%rax),%rdi
    c380:	48 89 c5             	mov    %rax,%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
    c383:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c387:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    c38b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
    c392:	0f 11 03             	movups %xmm0,(%rbx)
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
    c395:	49 83 fe 01          	cmp    $0x1,%r14
    c399:	74 1d                	je     c3b8 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0x88>
      for (; __first != __last; ++__first)
    c39b:	48 39 cf             	cmp    %rcx,%rdi
    c39e:	74 15                	je     c3b5 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0x85>
	*__first = __tmp;
    c3a0:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
    c3a4:	31 f6                	xor    %esi,%esi
    c3a6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    c3ab:	e8 f0 9e ff ff       	call   62a0 <memset@plt>
    c3b0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c3b5:	48 89 cf             	mov    %rcx,%rdi
      // Called by the vector(n) constructor.
      _GLIBCXX20_CONSTEXPR
      void
      _M_default_initialize(size_type __n)
      {
	this->_M_impl._M_finish =
    c3b8:	48 89 7b 08          	mov    %rdi,0x8(%rbx)
  if (vkAllocateCommandBuffers(device, pAllocateInfo, commandBuffers.data()) !=
    c3bc:	48 89 ea             	mov    %rbp,%rdx
    c3bf:	4c 89 e6             	mov    %r12,%rsi
    c3c2:	4c 89 ef             	mov    %r13,%rdi
    c3c5:	e8 f6 a0 ff ff       	call   64c0 <vkAllocateCommandBuffers@plt>
    c3ca:	85 c0                	test   %eax,%eax
    c3cc:	0f 85 35 a9 ff ff    	jne    6d07 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo.cold>
}
    c3d2:	48 83 c4 18          	add    $0x18,%rsp
    c3d6:	48 89 d8             	mov    %rbx,%rax
    c3d9:	5b                   	pop    %rbx
    c3da:	5d                   	pop    %rbp
    c3db:	41 5c                	pop    %r12
    c3dd:	41 5d                	pop    %r13
    c3df:	41 5e                	pop    %r14
    c3e1:	41 5f                	pop    %r15
    c3e3:	c3                   	ret
    c3e4:	0f 1f 40 00          	nopl   0x0(%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
    c3e8:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c3ef:	31 ed                	xor    %ebp,%ebp
    c3f1:	31 ff                	xor    %edi,%edi
    c3f3:	eb c3                	jmp    c3b8 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0x88>
    c3f5:	e9 3f a9 ff ff       	jmp    6d39 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo.cold+0x32>
    c3fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000c400 <_ZN3vkh18beginCommandBufferEP17VkCommandBuffer_TPK24VkCommandBufferBeginInfo>:
                        const VkCommandBufferBeginInfo *pBeginInfo) {
    c400:	55                   	push   %rbp
    c401:	53                   	push   %rbx
    c402:	48 83 ec 08          	sub    $0x8,%rsp
  if (vkBeginCommandBuffer(commandBuffer, pBeginInfo) != VK_SUCCESS) {
    c406:	e8 45 a1 ff ff       	call   6550 <vkBeginCommandBuffer@plt>
    c40b:	85 c0                	test   %eax,%eax
    c40d:	0f 85 52 a9 ff ff    	jne    6d65 <_ZN3vkh18beginCommandBufferEP17VkCommandBuffer_TPK24VkCommandBufferBeginInfo.cold>
}
    c413:	48 83 c4 08          	add    $0x8,%rsp
    c417:	5b                   	pop    %rbx
    c418:	5d                   	pop    %rbp
    c419:	c3                   	ret
    c41a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000c420 <_ZN3vkh16endCommandBufferEP17VkCommandBuffer_T>:
void endCommandBuffer(VkCommandBuffer commandBuffer) {
    c420:	55                   	push   %rbp
    c421:	53                   	push   %rbx
    c422:	48 83 ec 08          	sub    $0x8,%rsp
  if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
    c426:	e8 f5 a6 ff ff       	call   6b20 <vkEndCommandBuffer@plt>
    c42b:	85 c0                	test   %eax,%eax
    c42d:	0f 85 77 a9 ff ff    	jne    6daa <_ZN3vkh16endCommandBufferEP17VkCommandBuffer_T.cold>
  }
}
    c433:	48 83 c4 08          	add    $0x8,%rsp
    c437:	5b                   	pop    %rbx
    c438:	5d                   	pop    %rbp
    c439:	c3                   	ret
    c43a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000c440 <_ZN3vkh27checkValidationLayerSupportEv>:
bool checkValidationLayerSupport() {
    c440:	41 57                	push   %r15
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    c442:	31 f6                	xor    %esi,%esi
bool checkValidationLayerSupport() {
    c444:	41 56                	push   %r14
    c446:	41 55                	push   %r13
    c448:	41 54                	push   %r12
    c44a:	55                   	push   %rbp
    c44b:	53                   	push   %rbx
    c44c:	48 83 ec 18          	sub    $0x18,%rsp
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    c450:	4c 8d 64 24 0c       	lea    0xc(%rsp),%r12
    c455:	4c 89 e7             	mov    %r12,%rdi
    c458:	e8 c3 a1 ff ff       	call   6620 <vkEnumerateInstanceLayerProperties@plt>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    c45d:	44 8b 7c 24 0c       	mov    0xc(%rsp),%r15d
    c462:	4d 85 ff             	test   %r15,%r15
    c465:	0f 84 8d 01 00 00    	je     c5f8 <_ZN3vkh27checkValidationLayerSupportEv+0x1b8>
    c46b:	4c 89 fd             	mov    %r15,%rbp
    c46e:	48 c1 e5 06          	shl    $0x6,%rbp
    c472:	4c 01 fd             	add    %r15,%rbp
    c475:	48 c1 e5 03          	shl    $0x3,%rbp
    c479:	48 89 ef             	mov    %rbp,%rdi
    c47c:	49 89 ed             	mov    %rbp,%r13
    c47f:	e8 bc a0 ff ff       	call   6540 <_Znwm@plt>
    c484:	48 8d 78 08          	lea    0x8(%rax),%rdi
    c488:	48 89 c1             	mov    %rax,%rcx
    c48b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c492:	4c 8d 80 08 02 00 00 	lea    0x208(%rax),%r8
    c499:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    c49d:	48 89 c3             	mov    %rax,%rbx
    c4a0:	48 8d 90 10 02 00 00 	lea    0x210(%rax),%rdx
    c4a7:	31 c0                	xor    %eax,%eax
    c4a9:	48 29 f9             	sub    %rdi,%rcx
    c4ac:	48 c7 42 f0 00 00 00 	movq   $0x0,-0x10(%rdx)
    c4b3:	00 
    c4b4:	4d 89 c6             	mov    %r8,%r14
    c4b7:	81 c1 08 02 00 00    	add    $0x208,%ecx
    c4bd:	c1 e9 03             	shr    $0x3,%ecx
    c4c0:	f3 48 ab             	rep stos %rax,%es:(%rdi)
      if (__n <= 0)
    c4c3:	49 83 ff 01          	cmp    $0x1,%r15
    c4c7:	0f 84 43 01 00 00    	je     c610 <_ZN3vkh27checkValidationLayerSupportEv+0x1d0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c4cd:	4c 8d 0c 2b          	lea    (%rbx,%rbp,1),%r9
      for (; __first != __last; ++__first)
    c4d1:	4c 89 c0             	mov    %r8,%rax
    c4d4:	4d 39 c1             	cmp    %r8,%r9
    c4d7:	74 7b                	je     c554 <_ZN3vkh27checkValidationLayerSupportEv+0x114>
    c4d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	*__first = __value;
    c4e0:	48 8b 0b             	mov    (%rbx),%rcx
    c4e3:	48 8d 78 08          	lea    0x8(%rax),%rdi
    c4e7:	48 89 de             	mov    %rbx,%rsi
    c4ea:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    c4ee:	48 89 08             	mov    %rcx,(%rax)
    c4f1:	48 8b 4a f0          	mov    -0x10(%rdx),%rcx
    c4f5:	48 89 88 00 02 00 00 	mov    %rcx,0x200(%rax)
    c4fc:	48 89 c1             	mov    %rax,%rcx
      for (; __first != __last; ++__first)
    c4ff:	48 05 08 02 00 00    	add    $0x208,%rax
	*__first = __value;
    c505:	48 29 f9             	sub    %rdi,%rcx
    c508:	48 29 ce             	sub    %rcx,%rsi
    c50b:	81 c1 08 02 00 00    	add    $0x208,%ecx
    c511:	c1 e9 03             	shr    $0x3,%ecx
    c514:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      for (; __first != __last; ++__first)
    c517:	49 39 c1             	cmp    %rax,%r9
    c51a:	75 c4                	jne    c4e0 <_ZN3vkh27checkValidationLayerSupportEv+0xa0>
    c51c:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
    c523:	48 ba c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rdx
    c52a:	fc c0 0f 
    c52d:	48 c1 e8 03          	shr    $0x3,%rax
    c531:	48 0f af c2          	imul   %rdx,%rax
    c535:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
    c53c:	ff ff 1f 
    c53f:	48 21 d0             	and    %rdx,%rax
    c542:	48 83 c0 01          	add    $0x1,%rax
    c546:	48 89 c2             	mov    %rax,%rdx
    c549:	48 c1 e2 06          	shl    $0x6,%rdx
    c54d:	48 01 d0             	add    %rdx,%rax
    c550:	4d 8d 34 c0          	lea    (%r8,%rax,8),%r14
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    c554:	48 89 de             	mov    %rbx,%rsi
    c557:	4c 89 e7             	mov    %r12,%rdi
    c55a:	e8 c1 a0 ff ff       	call   6620 <vkEnumerateInstanceLayerProperties@plt>
  for (const auto &layerProperties : availableLayers) {
    c55f:	4c 39 f3             	cmp    %r14,%rbx
    c562:	74 31                	je     c595 <_ZN3vkh27checkValidationLayerSupportEv+0x155>
	return __builtin_memcmp(__s1, __s2, __n);
    c564:	49 bf 56 4b 5f 4c 41 	movabs $0x524559414c5f4b56,%r15
    c56b:	59 45 52 
    c56e:	48 89 dd             	mov    %rbx,%rbp
    c571:	49 bc 5f 4b 48 52 4f 	movabs $0x534f4e4f52484b5f,%r12
    c578:	4e 4f 53 
	return __builtin_strlen(__s);
    c57b:	48 89 ef             	mov    %rbp,%rdi
    c57e:	e8 9d 9c ff ff       	call   6220 <strlen@plt>
  template<typename _CharT, typename _Traits>
    constexpr bool
    operator==(basic_string_view<_CharT, _Traits> __x,
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }
    c583:	48 83 f8 1b          	cmp    $0x1b,%rax
    c587:	74 17                	je     c5a0 <_ZN3vkh27checkValidationLayerSupportEv+0x160>
    c589:	48 81 c5 08 02 00 00 	add    $0x208,%rbp
    c590:	49 39 ee             	cmp    %rbp,%r14
    c593:	75 e6                	jne    c57b <_ZN3vkh27checkValidationLayerSupportEv+0x13b>
  return false;
    c595:	31 ed                	xor    %ebp,%ebp
    c597:	eb 40                	jmp    c5d9 <_ZN3vkh27checkValidationLayerSupportEv+0x199>
    c599:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __builtin_memcmp(__s1, __s2, __n);
    c5a0:	48 8b 45 08          	mov    0x8(%rbp),%rax
    c5a4:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    c5a8:	4c 31 e0             	xor    %r12,%rax
    c5ab:	4c 31 fa             	xor    %r15,%rdx
    c5ae:	48 09 d0             	or     %rdx,%rax
    c5b1:	75 d6                	jne    c589 <_ZN3vkh27checkValidationLayerSupportEv+0x149>
    c5b3:	48 b8 6c 69 64 61 74 	movabs $0x6e6f69746164696c,%rax
    c5ba:	69 6f 6e 
    c5bd:	48 33 45 13          	xor    0x13(%rbp),%rax
    c5c1:	48 ba 52 4f 4e 4f 53 	movabs $0x61765f534f4e4f52,%rdx
    c5c8:	5f 76 61 
    c5cb:	48 33 55 0b          	xor    0xb(%rbp),%rdx
    c5cf:	48 09 d0             	or     %rdx,%rax
    c5d2:	75 b5                	jne    c589 <_ZN3vkh27checkValidationLayerSupportEv+0x149>
      return true;
    c5d4:	bd 01 00 00 00       	mov    $0x1,%ebp
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    c5d9:	4c 89 ee             	mov    %r13,%rsi
    c5dc:	48 89 df             	mov    %rbx,%rdi
    c5df:	e8 7c 9f ff ff       	call   6560 <_ZdlPvm@plt>
}
    c5e4:	48 83 c4 18          	add    $0x18,%rsp
    c5e8:	89 e8                	mov    %ebp,%eax
    c5ea:	5b                   	pop    %rbx
    c5eb:	5d                   	pop    %rbp
    c5ec:	41 5c                	pop    %r12
    c5ee:	41 5d                	pop    %r13
    c5f0:	41 5e                	pop    %r14
    c5f2:	41 5f                	pop    %r15
    c5f4:	c3                   	ret
    c5f5:	0f 1f 00             	nopl   (%rax)
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    c5f8:	31 f6                	xor    %esi,%esi
    c5fa:	4c 89 e7             	mov    %r12,%rdi
  return false;
    c5fd:	31 ed                	xor    %ebp,%ebp
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    c5ff:	e8 1c a0 ff ff       	call   6620 <vkEnumerateInstanceLayerProperties@plt>
    c604:	eb de                	jmp    c5e4 <_ZN3vkh27checkValidationLayerSupportEv+0x1a4>
    c606:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c60d:	00 00 00 
    c610:	48 89 de             	mov    %rbx,%rsi
    c613:	4c 89 e7             	mov    %r12,%rdi
    c616:	e8 05 a0 ff ff       	call   6620 <vkEnumerateInstanceLayerProperties@plt>
    c61b:	41 bd 08 02 00 00    	mov    $0x208,%r13d
    c621:	e9 39 ff ff ff       	jmp    c55f <_ZN3vkh27checkValidationLayerSupportEv+0x11f>
    c626:	49 89 c4             	mov    %rax,%r12
    c629:	e9 c1 a7 ff ff       	jmp    6def <_ZN3vkh27checkValidationLayerSupportEv.cold>
    c62e:	66 90                	xchg   %ax,%ax

000000000000c630 <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:
  if (messageSeverity > VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT) {
    c630:	83 ff 01             	cmp    $0x1,%edi
    c633:	7f 0b                	jg     c640 <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x10>
}
    c635:	31 c0                	xor    %eax,%eax
    c637:	c3                   	ret
    c638:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    c63f:	00 
              [[maybe_unused]] void *pUserData) {
    c640:	55                   	push   %rbp
    c641:	48 89 d5             	mov    %rdx,%rbp
    c644:	53                   	push   %rbx
      if (__out.width() != 0)
    c645:	48 8d 1d 94 4f 03 00 	lea    0x34f94(%rip),%rbx        # 415e0 <_ZSt4cerr@GLIBCXX_3.4>
    c64c:	48 83 ec 18          	sub    $0x18,%rsp
    c650:	48 8b 05 89 4f 03 00 	mov    0x34f89(%rip),%rax        # 415e0 <_ZSt4cerr@GLIBCXX_3.4>
    c657:	c6 44 24 0f 0a       	movb   $0xa,0xf(%rsp)
    c65c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    c660:	48 83 7c 03 10 00    	cmpq   $0x0,0x10(%rbx,%rax,1)
    c666:	74 78                	je     c6e0 <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0xb0>
	return __ostream_insert(__out, &__c, 1);
    c668:	48 89 df             	mov    %rbx,%rdi
    c66b:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
    c670:	ba 01 00 00 00       	mov    $0x1,%edx
    c675:	e8 b6 9f ff ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    std::cerr << '\n' << pCallbackData->pMessage << std::endl;
    c67a:	48 8b 6d 28          	mov    0x28(%rbp),%rbp
    c67e:	48 89 c3             	mov    %rax,%rbx
  // Partial specializations
  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
    c681:	48 85 ed             	test   %rbp,%rbp
    c684:	74 70                	je     c6f6 <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0xc6>
	return __builtin_strlen(__s);
    c686:	48 89 ef             	mov    %rbp,%rdi
    c689:	e8 92 9b ff ff       	call   6220 <strlen@plt>
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
    c68e:	48 89 ee             	mov    %rbp,%rsi
    c691:	48 89 df             	mov    %rbx,%rdi
    c694:	48 89 c2             	mov    %rax,%rdx
    c697:	e8 94 9f ff ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
    c69c:	48 8b 03             	mov    (%rbx),%rax
    c69f:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    c6a3:	48 8b ac 03 f0 00 00 	mov    0xf0(%rbx,%rax,1),%rbp
    c6aa:	00 
      if (!__f)
    c6ab:	48 85 ed             	test   %rbp,%rbp
    c6ae:	0f 84 87 00 00 00    	je     c73b <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x10b>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
    c6b4:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    c6b8:	74 56                	je     c710 <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0xe0>
    c6ba:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    c6be:	48 89 df             	mov    %rbx,%rdi
    c6c1:	e8 7a 99 ff ff       	call   6040 <_ZNSo3putEc@plt>
    c6c6:	48 89 c7             	mov    %rax,%rdi
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
    c6c9:	e8 92 9c ff ff       	call   6360 <_ZNSo5flushEv@plt>
}
    c6ce:	48 83 c4 18          	add    $0x18,%rsp
    c6d2:	31 c0                	xor    %eax,%eax
    c6d4:	5b                   	pop    %rbx
    c6d5:	5d                   	pop    %rbp
    c6d6:	c3                   	ret
    c6d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    c6de:	00 00 
      __out.put(__c);
    c6e0:	be 0a 00 00 00       	mov    $0xa,%esi
    c6e5:	48 89 df             	mov    %rbx,%rdi
    c6e8:	e8 53 99 ff ff       	call   6040 <_ZNSo3putEc@plt>
    std::cerr << '\n' << pCallbackData->pMessage << std::endl;
    c6ed:	48 8b 6d 28          	mov    0x28(%rbp),%rbp
      if (!__s)
    c6f1:	48 85 ed             	test   %rbp,%rbp
    c6f4:	75 90                	jne    c686 <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x56>
	__out.setstate(ios_base::badbit);
    c6f6:	48 8b 03             	mov    (%rbx),%rax
    c6f9:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    c6fd:	48 01 df             	add    %rbx,%rdi
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
    c700:	8b 77 20             	mov    0x20(%rdi),%esi
    c703:	83 ce 01             	or     $0x1,%esi
      { this->clear(this->rdstate() | __state); }
    c706:	e8 e5 a2 ff ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
    c70b:	eb 8f                	jmp    c69c <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x6c>
    c70d:	0f 1f 00             	nopl   (%rax)
	  return _M_widen[static_cast<unsigned char>(__c)];
	this->_M_widen_init();
    c710:	48 89 ef             	mov    %rbp,%rdi
    c713:	e8 28 9f ff ff       	call   6640 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    c718:	48 8b 45 00          	mov    0x0(%rbp),%rax
    c71c:	be 0a 00 00 00       	mov    $0xa,%esi
    c721:	48 8d 15 f8 00 00 00 	lea    0xf8(%rip),%rdx        # c820 <_ZNKSt5ctypeIcE8do_widenEc>
    c728:	48 8b 40 30          	mov    0x30(%rax),%rax
    c72c:	48 39 d0             	cmp    %rdx,%rax
    c72f:	74 8d                	je     c6be <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x8e>
    c731:	48 89 ef             	mov    %rbp,%rdi
    c734:	ff d0                	call   *%rax
    { return flush(__os.put(__os.widen('\n'))); }
    c736:	0f be f0             	movsbl %al,%esi
    c739:	eb 83                	jmp    c6be <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x8e>
	__throw_bad_cast();
    c73b:	e8 d0 9f ff ff       	call   6710 <_ZSt16__throw_bad_castv@plt>

000000000000c740 <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T>:
    VkDebugUtilsMessengerEXT *pDebugMessenger) {
    c740:	41 55                	push   %r13
    c742:	49 89 cd             	mov    %rcx,%r13
    c745:	41 54                	push   %r12
    c747:	49 89 d4             	mov    %rdx,%r12
    c74a:	55                   	push   %rbp
    c74b:	48 89 f5             	mov    %rsi,%rbp
  auto func = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    c74e:	48 8d 35 ab ad 02 00 	lea    0x2adab(%rip),%rsi        # 37500 <_ZTSN3vkw10ImageViewsE+0x130>
    VkDebugUtilsMessengerEXT *pDebugMessenger) {
    c755:	53                   	push   %rbx
    c756:	48 89 fb             	mov    %rdi,%rbx
    c759:	48 83 ec 08          	sub    $0x8,%rsp
  auto func = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    c75d:	e8 7e 9d ff ff       	call   64e0 <vkGetInstanceProcAddr@plt>
  if (func == nullptr) {
    c762:	48 85 c0             	test   %rax,%rax
    c765:	74 18                	je     c77f <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T+0x3f>
}
    c767:	48 83 c4 08          	add    $0x8,%rsp
  return func(instance, pCreateInfo, pAllocator, pDebugMessenger);
    c76b:	4c 89 e9             	mov    %r13,%rcx
    c76e:	4c 89 e2             	mov    %r12,%rdx
    c771:	48 89 ee             	mov    %rbp,%rsi
    c774:	48 89 df             	mov    %rbx,%rdi
}
    c777:	5b                   	pop    %rbx
    c778:	5d                   	pop    %rbp
    c779:	41 5c                	pop    %r12
    c77b:	41 5d                	pop    %r13
  return func(instance, pCreateInfo, pAllocator, pDebugMessenger);
    c77d:	ff e0                	jmp    *%rax
}
    c77f:	48 83 c4 08          	add    $0x8,%rsp
    c783:	b8 f9 ff ff ff       	mov    $0xfffffff9,%eax
    c788:	5b                   	pop    %rbx
    c789:	5d                   	pop    %rbp
    c78a:	41 5c                	pop    %r12
    c78c:	41 5d                	pop    %r13
    c78e:	c3                   	ret
    c78f:	90                   	nop

000000000000c790 <_ZN3vkh20createDebugMessengerEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacks>:
                     const VkAllocationCallbacks *pAllocator) {
    c790:	41 54                	push   %r12
    c792:	49 89 d4             	mov    %rdx,%r12
    c795:	55                   	push   %rbp
    c796:	48 89 f5             	mov    %rsi,%rbp
  auto func = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    c799:	48 8d 35 60 ad 02 00 	lea    0x2ad60(%rip),%rsi        # 37500 <_ZTSN3vkw10ImageViewsE+0x130>
                     const VkAllocationCallbacks *pAllocator) {
    c7a0:	53                   	push   %rbx
    c7a1:	48 89 fb             	mov    %rdi,%rbx
    c7a4:	48 83 ec 10          	sub    $0x10,%rsp
  auto func = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    c7a8:	e8 33 9d ff ff       	call   64e0 <vkGetInstanceProcAddr@plt>
  if (func == nullptr) {
    c7ad:	48 85 c0             	test   %rax,%rax
    c7b0:	0f 84 4c a6 ff ff    	je     6e02 <_ZN3vkh20createDebugMessengerEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacks.cold>
  return func(instance, pCreateInfo, pAllocator, pDebugMessenger);
    c7b6:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    c7bb:	4c 89 e2             	mov    %r12,%rdx
    c7be:	48 89 ee             	mov    %rbp,%rsi
    c7c1:	48 89 df             	mov    %rbx,%rdi
    c7c4:	ff d0                	call   *%rax
  if (createDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator,
    c7c6:	85 c0                	test   %eax,%eax
    c7c8:	75 0e                	jne    c7d8 <_ZN3vkh20createDebugMessengerEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacks+0x48>
  return debugMessenger;
    c7ca:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    c7cf:	48 83 c4 10          	add    $0x10,%rsp
    c7d3:	5b                   	pop    %rbx
    c7d4:	5d                   	pop    %rbp
    c7d5:	41 5c                	pop    %r12
    c7d7:	c3                   	ret
    c7d8:	e9 25 a6 ff ff       	jmp    6e02 <_ZN3vkh20createDebugMessengerEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacks.cold>
    c7dd:	0f 1f 00             	nopl   (%rax)

000000000000c7e0 <_ZN3vkh21destroyDebugMessengerEP12VkInstance_TP26VkDebugUtilsMessengerEXT_TPK21VkAllocationCallbacks>:
                           const VkAllocationCallbacks *pAllocator) {
    c7e0:	41 54                	push   %r12
    c7e2:	49 89 d4             	mov    %rdx,%r12
    c7e5:	55                   	push   %rbp
    c7e6:	48 89 f5             	mov    %rsi,%rbp
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    c7e9:	48 8d 35 b8 a8 02 00 	lea    0x2a8b8(%rip),%rsi        # 370a8 <_IO_stdin_used+0xa8>
                           const VkAllocationCallbacks *pAllocator) {
    c7f0:	53                   	push   %rbx
    c7f1:	48 89 fb             	mov    %rdi,%rbx
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    c7f4:	e8 e7 9c ff ff       	call   64e0 <vkGetInstanceProcAddr@plt>
  if (func != nullptr) {
    c7f9:	48 85 c0             	test   %rax,%rax
    c7fc:	74 12                	je     c810 <_ZN3vkh21destroyDebugMessengerEP12VkInstance_TP26VkDebugUtilsMessengerEXT_TPK21VkAllocationCallbacks+0x30>
    func(instance, debugMessenger, pAllocator);
    c7fe:	4c 89 e2             	mov    %r12,%rdx
    c801:	48 89 ee             	mov    %rbp,%rsi
    c804:	48 89 df             	mov    %rbx,%rdi
}
    c807:	5b                   	pop    %rbx
    c808:	5d                   	pop    %rbp
    c809:	41 5c                	pop    %r12
    func(instance, debugMessenger, pAllocator);
    c80b:	ff e0                	jmp    *%rax
    c80d:	0f 1f 00             	nopl   (%rax)
}
    c810:	5b                   	pop    %rbx
    c811:	5d                   	pop    %rbp
    c812:	41 5c                	pop    %r12
    c814:	c3                   	ret
    c815:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c81c:	00 00 00 
    c81f:	90                   	nop

000000000000c820 <_ZNKSt5ctypeIcE8do_widenEc>:
       *
       *  @param __c  The char to convert.
       *  @return  The converted character.
      */
      virtual char_type
      do_widen(char __c) const
    c820:	89 f0                	mov    %esi,%eax
      { return __c; }
    c822:	c3                   	ret
    c823:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c82a:	00 00 00 
    c82d:	0f 1f 00             	nopl   (%rax)

000000000000c830 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv>:
std::vector<VkLayerProperties> getAvailableInstanceLayerPropertyList() {
    c830:	41 55                	push   %r13
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    c832:	31 f6                	xor    %esi,%esi
std::vector<VkLayerProperties> getAvailableInstanceLayerPropertyList() {
    c834:	41 54                	push   %r12
    c836:	55                   	push   %rbp
    c837:	53                   	push   %rbx
    c838:	48 89 fb             	mov    %rdi,%rbx
    c83b:	48 83 ec 18          	sub    $0x18,%rsp
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    c83f:	48 8d 6c 24 0c       	lea    0xc(%rsp),%rbp
    c844:	48 89 ef             	mov    %rbp,%rdi
    c847:	e8 d4 9d ff ff       	call   6620 <vkEnumerateInstanceLayerProperties@plt>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    c84c:	44 8b 64 24 0c       	mov    0xc(%rsp),%r12d
	: _M_start(), _M_finish(), _M_end_of_storage()
    c851:	66 0f ef c0          	pxor   %xmm0,%xmm0
    c855:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    c85c:	00 
    c85d:	0f 11 03             	movups %xmm0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c860:	4d 85 e4             	test   %r12,%r12
    c863:	0f 84 df 00 00 00    	je     c948 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv+0x118>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    c869:	4d 89 e0             	mov    %r12,%r8
    c86c:	49 c1 e0 06          	shl    $0x6,%r8
    c870:	4d 01 e0             	add    %r12,%r8
    c873:	4e 8d 2c c5 00 00 00 	lea    0x0(,%r8,8),%r13
    c87a:	00 
    c87b:	4c 89 ef             	mov    %r13,%rdi
    c87e:	e8 bd 9c ff ff       	call   6540 <_Znwm@plt>
    c883:	48 8d 78 08          	lea    0x8(%rax),%rdi
    c887:	48 89 c1             	mov    %rax,%rcx
	this->_M_impl._M_start = this->_M_allocate(__n);
    c88a:	66 48 0f 6e c0       	movq   %rax,%xmm0
    c88f:	48 89 c2             	mov    %rax,%rdx
    c892:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c896:	4e 8d 04 28          	lea    (%rax,%r13,1),%r8
	this->_M_impl._M_start = this->_M_allocate(__n);
    c89a:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    c89e:	48 29 f9             	sub    %rdi,%rcx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c8a1:	4c 89 43 10          	mov    %r8,0x10(%rbx)
    c8a5:	4c 8d 88 10 02 00 00 	lea    0x210(%rax),%r9
    c8ac:	81 c1 08 02 00 00    	add    $0x208,%ecx
	this->_M_impl._M_start = this->_M_allocate(__n);
    c8b2:	0f 11 03             	movups %xmm0,(%rbx)
    c8b5:	c1 e9 03             	shr    $0x3,%ecx
    c8b8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c8bf:	31 c0                	xor    %eax,%eax
    c8c1:	49 c7 41 f0 00 00 00 	movq   $0x0,-0x10(%r9)
    c8c8:	00 
    c8c9:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    c8cc:	48 8d 82 08 02 00 00 	lea    0x208(%rdx),%rax
      if (__n <= 0)
    c8d3:	49 83 fc 01          	cmp    $0x1,%r12
    c8d7:	75 5e                	jne    c937 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv+0x107>
	this->_M_impl._M_finish =
    c8d9:	48 89 43 08          	mov    %rax,0x8(%rbx)
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    c8dd:	48 89 d6             	mov    %rdx,%rsi
    c8e0:	48 89 ef             	mov    %rbp,%rdi
    c8e3:	e8 38 9d ff ff       	call   6620 <vkEnumerateInstanceLayerProperties@plt>
}
    c8e8:	48 83 c4 18          	add    $0x18,%rsp
    c8ec:	48 89 d8             	mov    %rbx,%rax
    c8ef:	5b                   	pop    %rbx
    c8f0:	5d                   	pop    %rbp
    c8f1:	41 5c                	pop    %r12
    c8f3:	41 5d                	pop    %r13
    c8f5:	c3                   	ret
    c8f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c8fd:	00 00 00 
	*__first = __value;
    c900:	48 8b 0a             	mov    (%rdx),%rcx
    c903:	48 8d 78 08          	lea    0x8(%rax),%rdi
    c907:	48 89 d6             	mov    %rdx,%rsi
    c90a:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    c90e:	48 89 08             	mov    %rcx,(%rax)
    c911:	49 8b 49 f0          	mov    -0x10(%r9),%rcx
    c915:	48 89 88 00 02 00 00 	mov    %rcx,0x200(%rax)
    c91c:	48 89 c1             	mov    %rax,%rcx
      for (; __first != __last; ++__first)
    c91f:	48 05 08 02 00 00    	add    $0x208,%rax
	*__first = __value;
    c925:	48 29 f9             	sub    %rdi,%rcx
    c928:	48 29 ce             	sub    %rcx,%rsi
    c92b:	81 c1 08 02 00 00    	add    $0x208,%ecx
    c931:	c1 e9 03             	shr    $0x3,%ecx
    c934:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      for (; __first != __last; ++__first)
    c937:	4c 39 c0             	cmp    %r8,%rax
    c93a:	75 c4                	jne    c900 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv+0xd0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c93c:	4c 89 c0             	mov    %r8,%rax
    c93f:	eb 98                	jmp    c8d9 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv+0xa9>
    c941:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
    c948:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c94f:	31 d2                	xor    %edx,%edx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c951:	31 c0                	xor    %eax,%eax
    c953:	eb 84                	jmp    c8d9 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv+0xa9>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    c955:	48 89 c5             	mov    %rax,%rbp
    c958:	e9 ea a4 ff ff       	jmp    6e47 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv.cold>
    c95d:	0f 1f 00             	nopl   (%rax)

000000000000c960 <_ZN3vkh33getAvailableInstanceExtensionListEPKc>:
getAvailableInstanceExtensionList(const char *pLayerName) {
    c960:	41 56                	push   %r14
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    c962:	31 d2                	xor    %edx,%edx
getAvailableInstanceExtensionList(const char *pLayerName) {
    c964:	41 55                	push   %r13
    c966:	41 54                	push   %r12
    c968:	55                   	push   %rbp
    c969:	48 89 f5             	mov    %rsi,%rbp
    c96c:	53                   	push   %rbx
    c96d:	48 89 fb             	mov    %rdi,%rbx
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    c970:	48 89 ef             	mov    %rbp,%rdi
getAvailableInstanceExtensionList(const char *pLayerName) {
    c973:	48 83 ec 10          	sub    $0x10,%rsp
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    c977:	4c 8d 64 24 0c       	lea    0xc(%rsp),%r12
    c97c:	4c 89 e6             	mov    %r12,%rsi
    c97f:	e8 bc 9a ff ff       	call   6440 <vkEnumerateInstanceExtensionProperties@plt>
    c984:	85 c0                	test   %eax,%eax
    c986:	0f 85 d7 a4 ff ff    	jne    6e63 <_ZN3vkh33getAvailableInstanceExtensionListEPKc.cold>
  std::vector<VkExtensionProperties> instanceExtensions{propertyCount};
    c98c:	44 8b 6c 24 0c       	mov    0xc(%rsp),%r13d
	: _M_start(), _M_finish(), _M_end_of_storage()
    c991:	66 0f ef c0          	pxor   %xmm0,%xmm0
    c995:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    c99c:	00 
    c99d:	0f 11 03             	movups %xmm0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c9a0:	4d 85 ed             	test   %r13,%r13
    c9a3:	0f 84 df 00 00 00    	je     ca88 <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0x128>
    c9a9:	4d 89 e8             	mov    %r13,%r8
    c9ac:	49 c1 e0 06          	shl    $0x6,%r8
    c9b0:	4d 01 e8             	add    %r13,%r8
    c9b3:	4e 8d 34 85 00 00 00 	lea    0x0(,%r8,4),%r14
    c9ba:	00 
    c9bb:	4c 89 f7             	mov    %r14,%rdi
    c9be:	e8 7d 9b ff ff       	call   6540 <_Znwm@plt>
    c9c3:	48 8d 78 08          	lea    0x8(%rax),%rdi
    c9c7:	48 89 c1             	mov    %rax,%rcx
	this->_M_impl._M_start = this->_M_allocate(__n);
    c9ca:	66 48 0f 6e c0       	movq   %rax,%xmm0
    c9cf:	48 89 c2             	mov    %rax,%rdx
    c9d2:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c9d6:	4e 8d 04 30          	lea    (%rax,%r14,1),%r8
	this->_M_impl._M_start = this->_M_allocate(__n);
    c9da:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    c9de:	48 29 f9             	sub    %rdi,%rcx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c9e1:	4c 89 43 10          	mov    %r8,0x10(%rbx)
    c9e5:	4c 8d 88 0c 01 00 00 	lea    0x10c(%rax),%r9
    c9ec:	81 c1 04 01 00 00    	add    $0x104,%ecx
	this->_M_impl._M_start = this->_M_allocate(__n);
    c9f2:	0f 11 03             	movups %xmm0,(%rbx)
    c9f5:	c1 e9 03             	shr    $0x3,%ecx
    c9f8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c9ff:	31 c0                	xor    %eax,%eax
    ca01:	49 c7 41 f0 00 00 00 	movq   $0x0,-0x10(%r9)
    ca08:	00 
    ca09:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    ca0c:	48 8d 82 04 01 00 00 	lea    0x104(%rdx),%rax
      if (__n <= 0)
    ca13:	49 83 fd 01          	cmp    $0x1,%r13
    ca17:	75 5e                	jne    ca77 <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0x117>
	this->_M_impl._M_finish =
    ca19:	48 89 43 08          	mov    %rax,0x8(%rbx)
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    ca1d:	4c 89 e6             	mov    %r12,%rsi
    ca20:	48 89 ef             	mov    %rbp,%rdi
    ca23:	e8 18 9a ff ff       	call   6440 <vkEnumerateInstanceExtensionProperties@plt>
    ca28:	85 c0                	test   %eax,%eax
    ca2a:	0f 85 65 a4 ff ff    	jne    6e95 <_ZN3vkh33getAvailableInstanceExtensionListEPKc.cold+0x32>
}
    ca30:	48 83 c4 10          	add    $0x10,%rsp
    ca34:	48 89 d8             	mov    %rbx,%rax
    ca37:	5b                   	pop    %rbx
    ca38:	5d                   	pop    %rbp
    ca39:	41 5c                	pop    %r12
    ca3b:	41 5d                	pop    %r13
    ca3d:	41 5e                	pop    %r14
    ca3f:	c3                   	ret
	*__first = __value;
    ca40:	48 8b 0a             	mov    (%rdx),%rcx
    ca43:	48 8d 78 08          	lea    0x8(%rax),%rdi
    ca47:	48 89 d6             	mov    %rdx,%rsi
    ca4a:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    ca4e:	48 89 08             	mov    %rcx,(%rax)
    ca51:	49 8b 49 f0          	mov    -0x10(%r9),%rcx
    ca55:	48 89 88 fc 00 00 00 	mov    %rcx,0xfc(%rax)
    ca5c:	48 89 c1             	mov    %rax,%rcx
      for (; __first != __last; ++__first)
    ca5f:	48 05 04 01 00 00    	add    $0x104,%rax
	*__first = __value;
    ca65:	48 29 f9             	sub    %rdi,%rcx
    ca68:	48 29 ce             	sub    %rcx,%rsi
    ca6b:	81 c1 04 01 00 00    	add    $0x104,%ecx
    ca71:	c1 e9 03             	shr    $0x3,%ecx
    ca74:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      for (; __first != __last; ++__first)
    ca77:	4c 39 c0             	cmp    %r8,%rax
    ca7a:	75 c4                	jne    ca40 <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0xe0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ca7c:	4c 89 c0             	mov    %r8,%rax
    ca7f:	eb 98                	jmp    ca19 <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0xb9>
    ca81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
    ca88:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    ca8f:	31 d2                	xor    %edx,%edx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ca91:	31 c0                	xor    %eax,%eax
    ca93:	eb 84                	jmp    ca19 <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0xb9>
    ca95:	e9 40 a4 ff ff       	jmp    6eda <_ZN3vkh33getAvailableInstanceExtensionListEPKc.cold+0x77>
    ca9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000caa0 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc>:
                                const char *pLayerName) {
    caa0:	41 57                	push   %r15
  if (vkEnumerateDeviceExtensionProperties(
    caa2:	31 c9                	xor    %ecx,%ecx
                                const char *pLayerName) {
    caa4:	41 56                	push   %r14
    caa6:	41 55                	push   %r13
    caa8:	41 54                	push   %r12
    caaa:	49 89 d4             	mov    %rdx,%r12
    caad:	55                   	push   %rbp
    caae:	48 89 f5             	mov    %rsi,%rbp
  if (vkEnumerateDeviceExtensionProperties(
    cab1:	4c 89 e6             	mov    %r12,%rsi
                                const char *pLayerName) {
    cab4:	53                   	push   %rbx
    cab5:	48 89 fb             	mov    %rdi,%rbx
  if (vkEnumerateDeviceExtensionProperties(
    cab8:	48 89 ef             	mov    %rbp,%rdi
                                const char *pLayerName) {
    cabb:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkEnumerateDeviceExtensionProperties(
    cabf:	4c 8d 6c 24 0c       	lea    0xc(%rsp),%r13
    cac4:	4c 89 ea             	mov    %r13,%rdx
    cac7:	e8 f4 9c ff ff       	call   67c0 <vkEnumerateDeviceExtensionProperties@plt>
    cacc:	85 c0                	test   %eax,%eax
    cace:	0f 85 32 a4 ff ff    	jne    6f06 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc.cold>
  std::vector<VkExtensionProperties> deviceExtensions{propertyCount};
    cad4:	44 8b 74 24 0c       	mov    0xc(%rsp),%r14d
	: _M_start(), _M_finish(), _M_end_of_storage()
    cad9:	66 0f ef c0          	pxor   %xmm0,%xmm0
    cadd:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    cae4:	00 
    cae5:	0f 11 03             	movups %xmm0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cae8:	4d 85 f6             	test   %r14,%r14
    caeb:	0f 84 e7 00 00 00    	je     cbd8 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0x138>
    caf1:	4d 89 f0             	mov    %r14,%r8
    caf4:	49 c1 e0 06          	shl    $0x6,%r8
    caf8:	4d 01 f0             	add    %r14,%r8
    cafb:	4e 8d 3c 85 00 00 00 	lea    0x0(,%r8,4),%r15
    cb02:	00 
    cb03:	4c 89 ff             	mov    %r15,%rdi
    cb06:	e8 35 9a ff ff       	call   6540 <_Znwm@plt>
    cb0b:	48 8d 78 08          	lea    0x8(%rax),%rdi
    cb0f:	48 89 c1             	mov    %rax,%rcx
	this->_M_impl._M_start = this->_M_allocate(__n);
    cb12:	66 48 0f 6e c0       	movq   %rax,%xmm0
    cb17:	48 89 c2             	mov    %rax,%rdx
    cb1a:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cb1e:	4e 8d 04 38          	lea    (%rax,%r15,1),%r8
	this->_M_impl._M_start = this->_M_allocate(__n);
    cb22:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    cb26:	48 29 f9             	sub    %rdi,%rcx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cb29:	4c 89 43 10          	mov    %r8,0x10(%rbx)
    cb2d:	4c 8d 88 0c 01 00 00 	lea    0x10c(%rax),%r9
    cb34:	81 c1 04 01 00 00    	add    $0x104,%ecx
	this->_M_impl._M_start = this->_M_allocate(__n);
    cb3a:	0f 11 03             	movups %xmm0,(%rbx)
    cb3d:	c1 e9 03             	shr    $0x3,%ecx
    cb40:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    cb47:	31 c0                	xor    %eax,%eax
    cb49:	49 c7 41 f0 00 00 00 	movq   $0x0,-0x10(%r9)
    cb50:	00 
    cb51:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    cb54:	48 8d 82 04 01 00 00 	lea    0x104(%rdx),%rax
      if (__n <= 0)
    cb5b:	49 83 fe 01          	cmp    $0x1,%r14
    cb5f:	75 66                	jne    cbc7 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0x127>
	this->_M_impl._M_finish =
    cb61:	48 89 43 08          	mov    %rax,0x8(%rbx)
  if (vkEnumerateDeviceExtensionProperties(
    cb65:	48 89 d1             	mov    %rdx,%rcx
    cb68:	4c 89 e6             	mov    %r12,%rsi
    cb6b:	4c 89 ea             	mov    %r13,%rdx
    cb6e:	48 89 ef             	mov    %rbp,%rdi
    cb71:	e8 4a 9c ff ff       	call   67c0 <vkEnumerateDeviceExtensionProperties@plt>
    cb76:	85 c0                	test   %eax,%eax
    cb78:	0f 85 ba a3 ff ff    	jne    6f38 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc.cold+0x32>
}
    cb7e:	48 83 c4 18          	add    $0x18,%rsp
    cb82:	48 89 d8             	mov    %rbx,%rax
    cb85:	5b                   	pop    %rbx
    cb86:	5d                   	pop    %rbp
    cb87:	41 5c                	pop    %r12
    cb89:	41 5d                	pop    %r13
    cb8b:	41 5e                	pop    %r14
    cb8d:	41 5f                	pop    %r15
    cb8f:	c3                   	ret
	*__first = __value;
    cb90:	48 8b 0a             	mov    (%rdx),%rcx
    cb93:	48 8d 78 08          	lea    0x8(%rax),%rdi
    cb97:	48 89 d6             	mov    %rdx,%rsi
    cb9a:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    cb9e:	48 89 08             	mov    %rcx,(%rax)
    cba1:	49 8b 49 f0          	mov    -0x10(%r9),%rcx
    cba5:	48 89 88 fc 00 00 00 	mov    %rcx,0xfc(%rax)
    cbac:	48 89 c1             	mov    %rax,%rcx
      for (; __first != __last; ++__first)
    cbaf:	48 05 04 01 00 00    	add    $0x104,%rax
	*__first = __value;
    cbb5:	48 29 f9             	sub    %rdi,%rcx
    cbb8:	48 29 ce             	sub    %rcx,%rsi
    cbbb:	81 c1 04 01 00 00    	add    $0x104,%ecx
    cbc1:	c1 e9 03             	shr    $0x3,%ecx
    cbc4:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      for (; __first != __last; ++__first)
    cbc7:	4c 39 c0             	cmp    %r8,%rax
    cbca:	75 c4                	jne    cb90 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0xf0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cbcc:	4c 89 c0             	mov    %r8,%rax
    cbcf:	eb 90                	jmp    cb61 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0xc1>
    cbd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
    cbd8:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cbdf:	31 d2                	xor    %edx,%edx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cbe1:	31 c0                	xor    %eax,%eax
    cbe3:	e9 79 ff ff ff       	jmp    cb61 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0xc1>
    cbe8:	e9 90 a3 ff ff       	jmp    6f7d <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc.cold+0x77>
    cbed:	0f 1f 00             	nopl   (%rax)

000000000000cbf0 <_ZN3vkh36getRequiredInstanceExtensionNameListEv>:
std::vector<const char *> getRequiredInstanceExtensionNameList() {
    cbf0:	41 57                	push   %r15
    cbf2:	41 56                	push   %r14
    cbf4:	41 55                	push   %r13
    cbf6:	49 89 fd             	mov    %rdi,%r13
    cbf9:	41 54                	push   %r12
    cbfb:	55                   	push   %rbp
    cbfc:	53                   	push   %rbx
    cbfd:	48 83 ec 18          	sub    $0x18,%rsp
      glfwGetRequiredInstanceExtensions(&requiredExtensionCount);
    cc01:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
    cc06:	e8 c5 97 ff ff       	call   63d0 <glfwGetRequiredInstanceExtensions@plt>
  std::vector<const char *> requiredInstanceExtensions{requiredExtensionCount};
    cc0b:	44 8b 64 24 0c       	mov    0xc(%rsp),%r12d
	: _M_start(), _M_finish(), _M_end_of_storage()
    cc10:	66 0f ef c0          	pxor   %xmm0,%xmm0
    cc14:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
    cc1b:	00 
    cc1c:	41 0f 11 45 00       	movups %xmm0,0x0(%r13)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cc21:	4d 85 e4             	test   %r12,%r12
    cc24:	0f 84 9e 00 00 00    	je     ccc8 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xd8>
    cc2a:	4e 8d 34 e5 00 00 00 	lea    0x0(,%r12,8),%r14
    cc31:	00 
    cc32:	48 89 c5             	mov    %rax,%rbp
    cc35:	4c 89 f7             	mov    %r14,%rdi
    cc38:	e8 03 99 ff ff       	call   6540 <_Znwm@plt>
      if (__n <= 0)
    cc3d:	49 83 fc 01          	cmp    $0x1,%r12
  for (uint32_t i = 0; i < requiredExtensionCount; ++i) {
    cc41:	44 8b 64 24 0c       	mov    0xc(%rsp),%r12d
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cc46:	4e 8d 3c 30          	lea    (%rax,%r14,1),%r15
	this->_M_impl._M_start = this->_M_allocate(__n);
    cc4a:	49 89 45 00          	mov    %rax,0x0(%r13)
    cc4e:	48 89 c3             	mov    %rax,%rbx
    cc51:	48 8d 78 08          	lea    0x8(%rax),%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cc55:	4d 89 7d 10          	mov    %r15,0x10(%r13)
    cc59:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    cc60:	0f 84 ba 00 00 00    	je     cd20 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0x130>
      for (; __first != __last; ++__first)
    cc66:	49 39 ff             	cmp    %rdi,%r15
    cc69:	74 0b                	je     cc76 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0x86>
	*__first = __tmp;
    cc6b:	49 8d 56 f8          	lea    -0x8(%r14),%rdx
    cc6f:	31 f6                	xor    %esi,%esi
    cc71:	e8 2a 96 ff ff       	call   62a0 <memset@plt>
	this->_M_impl._M_finish =
    cc76:	4d 89 7d 08          	mov    %r15,0x8(%r13)
    cc7a:	45 85 e4             	test   %r12d,%r12d
    cc7d:	74 33                	je     ccb2 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xc2>
    cc7f:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
    cc84:	83 f8 02             	cmp    $0x2,%eax
    cc87:	76 09                	jbe    cc92 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xa2>
    cc89:	48 8d 45 08          	lea    0x8(%rbp),%rax
    cc8d:	48 39 c3             	cmp    %rax,%rbx
    cc90:	75 4e                	jne    cce0 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xf0>
    cc92:	44 89 e2             	mov    %r12d,%edx
    cc95:	31 c0                	xor    %eax,%eax
    cc97:	48 c1 e2 03          	shl    $0x3,%rdx
    cc9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    requiredInstanceExtensions[i] = ppRequiredExtensions[i];
    cca0:	48 8b 4c 05 00       	mov    0x0(%rbp,%rax,1),%rcx
    cca5:	48 89 0c 03          	mov    %rcx,(%rbx,%rax,1)
  for (uint32_t i = 0; i < requiredExtensionCount; ++i) {
    cca9:	48 83 c0 08          	add    $0x8,%rax
    ccad:	48 39 d0             	cmp    %rdx,%rax
    ccb0:	75 ee                	jne    cca0 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xb0>
}
    ccb2:	48 83 c4 18          	add    $0x18,%rsp
    ccb6:	4c 89 e8             	mov    %r13,%rax
    ccb9:	5b                   	pop    %rbx
    ccba:	5d                   	pop    %rbp
    ccbb:	41 5c                	pop    %r12
    ccbd:	41 5d                	pop    %r13
    ccbf:	41 5e                	pop    %r14
    ccc1:	41 5f                	pop    %r15
    ccc3:	c3                   	ret
    ccc4:	0f 1f 40 00          	nopl   0x0(%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
    ccc8:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
    cccf:	00 
	this->_M_impl._M_finish =
    ccd0:	49 c7 45 08 00 00 00 	movq   $0x0,0x8(%r13)
    ccd7:	00 
  for (uint32_t i = 0; i < requiredExtensionCount; ++i) {
    ccd8:	eb d8                	jmp    ccb2 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xc2>
    ccda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    cce0:	44 89 e2             	mov    %r12d,%edx
    cce3:	31 c0                	xor    %eax,%eax
    cce5:	d1 ea                	shr    %edx
    cce7:	48 c1 e2 04          	shl    $0x4,%rdx
    cceb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    requiredInstanceExtensions[i] = ppRequiredExtensions[i];
    ccf0:	f3 0f 6f 4c 05 00    	movdqu 0x0(%rbp,%rax,1),%xmm1
    ccf6:	0f 11 0c 03          	movups %xmm1,(%rbx,%rax,1)
  for (uint32_t i = 0; i < requiredExtensionCount; ++i) {
    ccfa:	48 83 c0 10          	add    $0x10,%rax
    ccfe:	48 39 d0             	cmp    %rdx,%rax
    cd01:	75 ed                	jne    ccf0 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0x100>
    cd03:	44 89 e0             	mov    %r12d,%eax
    cd06:	83 e0 fe             	and    $0xfffffffe,%eax
    cd09:	41 83 e4 01          	and    $0x1,%r12d
    cd0d:	74 a3                	je     ccb2 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xc2>
    requiredInstanceExtensions[i] = ppRequiredExtensions[i];
    cd0f:	48 8b 54 c5 00       	mov    0x0(%rbp,%rax,8),%rdx
    cd14:	48 89 14 c3          	mov    %rdx,(%rbx,%rax,8)
  for (uint32_t i = 0; i < requiredExtensionCount; ++i) {
    cd18:	eb 98                	jmp    ccb2 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xc2>
    cd1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __first;
    cd20:	49 89 ff             	mov    %rdi,%r15
    cd23:	e9 4e ff ff ff       	jmp    cc76 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0x86>
    cd28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    cd2f:	00 

000000000000cd30 <_ZN3vkh29getAvailableInstanceLayerListEv>:
std::vector<VkLayerProperties> getAvailableInstanceLayerList() {
    cd30:	53                   	push   %rbx
    cd31:	48 89 fb             	mov    %rdi,%rbx
    cd34:	e8 f7 fa ff ff       	call   c830 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv>
    cd39:	48 89 d8             	mov    %rbx,%rax
    cd3c:	5b                   	pop    %rbx
    cd3d:	c3                   	ret
    cd3e:	66 90                	xchg   %ax,%ax

000000000000cd40 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T>:
std::vector<VkPhysicalDevice> getPhysicalDeviceList(VkInstance instance) {
    cd40:	41 57                	push   %r15
  vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, nullptr);
    cd42:	31 d2                	xor    %edx,%edx
std::vector<VkPhysicalDevice> getPhysicalDeviceList(VkInstance instance) {
    cd44:	41 56                	push   %r14
    cd46:	41 55                	push   %r13
    cd48:	49 89 f5             	mov    %rsi,%r13
    cd4b:	41 54                	push   %r12
    cd4d:	55                   	push   %rbp
    cd4e:	53                   	push   %rbx
    cd4f:	48 89 fb             	mov    %rdi,%rbx
  vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, nullptr);
    cd52:	4c 89 ef             	mov    %r13,%rdi
std::vector<VkPhysicalDevice> getPhysicalDeviceList(VkInstance instance) {
    cd55:	48 83 ec 28          	sub    $0x28,%rsp
  vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, nullptr);
    cd59:	4c 8d 74 24 1c       	lea    0x1c(%rsp),%r14
    cd5e:	4c 89 f6             	mov    %r14,%rsi
    cd61:	e8 2a 95 ff ff       	call   6290 <vkEnumeratePhysicalDevices@plt>
  if (physicalDeviceCount == 0) {
    cd66:	44 8b 64 24 1c       	mov    0x1c(%rsp),%r12d
    cd6b:	45 85 e4             	test   %r12d,%r12d
    cd6e:	0f 84 35 a2 ff ff    	je     6fa9 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T.cold>
	: _M_start(), _M_finish(), _M_end_of_storage()
    cd74:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    cd7b:	00 
    cd7c:	66 0f ef c0          	pxor   %xmm0,%xmm0
    cd80:	4e 8d 3c e5 00 00 00 	lea    0x0(,%r12,8),%r15
    cd87:	00 
    cd88:	0f 11 03             	movups %xmm0,(%rbx)
    cd8b:	4c 89 ff             	mov    %r15,%rdi
    cd8e:	e8 ad 97 ff ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_start = this->_M_allocate(__n);
    cd93:	66 48 0f 6e c0       	movq   %rax,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cd98:	4a 8d 0c 38          	lea    (%rax,%r15,1),%rcx
    cd9c:	48 8d 78 08          	lea    0x8(%rax),%rdi
    cda0:	48 89 c5             	mov    %rax,%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
    cda3:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cda7:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
    cdab:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
    cdb2:	0f 11 03             	movups %xmm0,(%rbx)
      if (__n <= 0)
    cdb5:	49 83 fc 01          	cmp    $0x1,%r12
    cdb9:	74 4d                	je     ce08 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T+0xc8>
      for (; __first != __last; ++__first)
    cdbb:	48 39 f9             	cmp    %rdi,%rcx
    cdbe:	74 15                	je     cdd5 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T+0x95>
	*__first = __tmp;
    cdc0:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
    cdc4:	31 f6                	xor    %esi,%esi
    cdc6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    cdcb:	e8 d0 94 ff ff       	call   62a0 <memset@plt>
    cdd0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_finish =
    cdd5:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
  if (vkEnumeratePhysicalDevices(instance, &physicalDeviceCount,
    cdd9:	48 89 ea             	mov    %rbp,%rdx
    cddc:	4c 89 f6             	mov    %r14,%rsi
    cddf:	4c 89 ef             	mov    %r13,%rdi
    cde2:	e8 a9 94 ff ff       	call   6290 <vkEnumeratePhysicalDevices@plt>
    cde7:	85 c0                	test   %eax,%eax
    cde9:	0f 85 ec a1 ff ff    	jne    6fdb <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T.cold+0x32>
}
    cdef:	48 83 c4 28          	add    $0x28,%rsp
    cdf3:	48 89 d8             	mov    %rbx,%rax
    cdf6:	5b                   	pop    %rbx
    cdf7:	5d                   	pop    %rbp
    cdf8:	41 5c                	pop    %r12
    cdfa:	41 5d                	pop    %r13
    cdfc:	41 5e                	pop    %r14
    cdfe:	41 5f                	pop    %r15
    ce00:	c3                   	ret
    ce01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __first;
    ce08:	48 89 f9             	mov    %rdi,%rcx
    ce0b:	eb c8                	jmp    cdd5 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T+0x95>
    ce0d:	e9 0e a2 ff ff       	jmp    7020 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T.cold+0x77>
    ce12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    ce19:	00 00 00 00 
    ce1d:	0f 1f 00             	nopl   (%rax)

000000000000ce20 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_T>:
getPhysicalDevicePropertyList(VkPhysicalDevice physicalDevice) {
    ce20:	53                   	push   %rbx
    ce21:	48 89 fb             	mov    %rdi,%rbx
    ce24:	48 89 f7             	mov    %rsi,%rdi
  vkGetPhysicalDeviceProperties(physicalDevice, &properties);
    ce27:	48 89 de             	mov    %rbx,%rsi
    ce2a:	e8 91 93 ff ff       	call   61c0 <vkGetPhysicalDeviceProperties@plt>
}
    ce2f:	48 89 d8             	mov    %rbx,%rax
    ce32:	5b                   	pop    %rbx
    ce33:	c3                   	ret
    ce34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    ce3b:	00 00 00 00 
    ce3f:	90                   	nop

000000000000ce40 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_TPv>:
                              void *pNextProperty) {
    ce40:	53                   	push   %rbx
    ce41:	48 89 fb             	mov    %rdi,%rbx
    ce44:	48 89 f7             	mov    %rsi,%rdi
  vkGetPhysicalDeviceProperties2(physicalDevice, &properties);
    ce47:	48 89 de             	mov    %rbx,%rsi
  properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    ce4a:	c7 03 79 b0 9b 3b    	movl   $0x3b9bb079,(%rbx)
  properties.pNext = pNextProperty;
    ce50:	48 89 53 08          	mov    %rdx,0x8(%rbx)
  vkGetPhysicalDeviceProperties2(physicalDevice, &properties);
    ce54:	e8 77 96 ff ff       	call   64d0 <vkGetPhysicalDeviceProperties2@plt>
}
    ce59:	48 89 d8             	mov    %rbx,%rax
    ce5c:	5b                   	pop    %rbx
    ce5d:	c3                   	ret
    ce5e:	66 90                	xchg   %ax,%ax

000000000000ce60 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>:
getPhysicalDeviceQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    ce60:	41 56                	push   %r14
  vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,
    ce62:	31 d2                	xor    %edx,%edx
getPhysicalDeviceQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    ce64:	41 55                	push   %r13
    ce66:	41 54                	push   %r12
    ce68:	55                   	push   %rbp
    ce69:	48 89 f5             	mov    %rsi,%rbp
    ce6c:	53                   	push   %rbx
    ce6d:	48 89 fb             	mov    %rdi,%rbx
  vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,
    ce70:	48 89 ef             	mov    %rbp,%rdi
getPhysicalDeviceQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    ce73:	48 83 ec 10          	sub    $0x10,%rsp
  vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,
    ce77:	4c 8d 64 24 0c       	lea    0xc(%rsp),%r12
    ce7c:	4c 89 e6             	mov    %r12,%rsi
    ce7f:	e8 2c 95 ff ff       	call   63b0 <vkGetPhysicalDeviceQueueFamilyProperties@plt>
      queueFamilyPropertyCount};
    ce84:	44 8b 6c 24 0c       	mov    0xc(%rsp),%r13d
	: _M_start(), _M_finish(), _M_end_of_storage()
    ce89:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ce8d:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    ce94:	00 
    ce95:	0f 11 03             	movups %xmm0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ce98:	4d 85 ed             	test   %r13,%r13
    ce9b:	0f 84 8f 00 00 00    	je     cf30 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xd0>
    cea1:	4f 8d 74 6d 00       	lea    0x0(%r13,%r13,2),%r14
    cea6:	49 c1 e6 03          	shl    $0x3,%r14
    ceaa:	4c 89 f7             	mov    %r14,%rdi
    cead:	e8 8e 96 ff ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_start = this->_M_allocate(__n);
    ceb2:	66 48 0f 6e c0       	movq   %rax,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    ceb7:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
    cebb:	48 8d 78 18          	lea    0x18(%rax),%rdi
    cebf:	48 89 c2             	mov    %rax,%rdx
	this->_M_impl._M_start = this->_M_allocate(__n);
    cec2:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cec6:	48 89 73 10          	mov    %rsi,0x10(%rbx)
	this->_M_impl._M_start = this->_M_allocate(__n);
    ceca:	0f 11 03             	movups %xmm0,(%rbx)
    cecd:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ced1:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    ced8:	00 
    ced9:	0f 11 00             	movups %xmm0,(%rax)
      if (__n <= 0)
    cedc:	49 83 fd 01          	cmp    $0x1,%r13
    cee0:	74 2c                	je     cf0e <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xae>
      for (; __first != __last; ++__first)
    cee2:	48 39 fe             	cmp    %rdi,%rsi
    cee5:	74 27                	je     cf0e <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xae>
    cee7:	48 89 f9             	mov    %rdi,%rcx
    ceea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	*__first = __value;
    cef0:	f3 0f 6f 0a          	movdqu (%rdx),%xmm1
      for (; __first != __last; ++__first)
    cef4:	48 83 c1 18          	add    $0x18,%rcx
	*__first = __value;
    cef8:	0f 11 49 e8          	movups %xmm1,-0x18(%rcx)
    cefc:	48 8b 42 10          	mov    0x10(%rdx),%rax
    cf00:	48 89 41 f8          	mov    %rax,-0x8(%rcx)
      for (; __first != __last; ++__first)
    cf04:	48 39 ce             	cmp    %rcx,%rsi
    cf07:	75 e7                	jne    cef0 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x90>
    cf09:	4a 8d 7c 37 e8       	lea    -0x18(%rdi,%r14,1),%rdi
	this->_M_impl._M_finish =
    cf0e:	48 89 7b 08          	mov    %rdi,0x8(%rbx)
  vkGetPhysicalDeviceQueueFamilyProperties(
    cf12:	4c 89 e6             	mov    %r12,%rsi
    cf15:	48 89 ef             	mov    %rbp,%rdi
    cf18:	e8 93 94 ff ff       	call   63b0 <vkGetPhysicalDeviceQueueFamilyProperties@plt>
}
    cf1d:	48 83 c4 10          	add    $0x10,%rsp
    cf21:	48 89 d8             	mov    %rbx,%rax
    cf24:	5b                   	pop    %rbx
    cf25:	5d                   	pop    %rbp
    cf26:	41 5c                	pop    %r12
    cf28:	41 5d                	pop    %r13
    cf2a:	41 5e                	pop    %r14
    cf2c:	c3                   	ret
    cf2d:	0f 1f 00             	nopl   (%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
    cf30:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cf37:	31 d2                	xor    %edx,%edx
    cf39:	31 ff                	xor    %edi,%edi
    cf3b:	eb d1                	jmp    cf0e <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xae>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    cf3d:	48 89 c5             	mov    %rax,%rbp
    cf40:	e9 07 a1 ff ff       	jmp    704c <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T.cold>
    cf45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    cf4c:	00 00 00 00 

000000000000cf50 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T>:
getGraphicsQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    cf50:	41 55                	push   %r13
    cf52:	41 54                	push   %r12
    cf54:	55                   	push   %rbp
    cf55:	48 89 fd             	mov    %rdi,%rbp
    cf58:	53                   	push   %rbx
    cf59:	48 83 ec 28          	sub    $0x28,%rsp
      getPhysicalDeviceQueueFamilyPropertyList(physicalDevice);
    cf5d:	48 89 e7             	mov    %rsp,%rdi
    cf60:	e8 fb fe ff ff       	call   ce60 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cf65:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    cf6a:	4c 8b 24 24          	mov    (%rsp),%r12
    cf6e:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    cf75:	aa aa aa 
    cf78:	48 89 da             	mov    %rbx,%rdx
    cf7b:	4c 29 e2             	sub    %r12,%rdx
    cf7e:	48 89 d0             	mov    %rdx,%rax
    cf81:	48 c1 f8 03          	sar    $0x3,%rax
    cf85:	48 0f af c1          	imul   %rcx,%rax

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    cf89:	48 b9 b0 6d db b6 6d 	movabs $0x6db6db6db6db6db0,%rcx
    cf90:	db b6 6d 
    cf93:	48 39 d1             	cmp    %rdx,%rcx
    cf96:	0f 82 db 00 00 00    	jb     d077 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x127>
	: _M_start(), _M_finish(), _M_end_of_storage()
    cf9c:	66 0f ef c0          	pxor   %xmm0,%xmm0
    cfa0:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
    cfa7:	00 
    cfa8:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cfac:	48 85 c0             	test   %rax,%rax
    cfaf:	0f 84 b3 00 00 00    	je     d068 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x118>
    cfb5:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
    cfbc:	00 
    cfbd:	48 29 c1             	sub    %rax,%rcx
    cfc0:	4c 8d 2c 8d 00 00 00 	lea    0x0(,%rcx,4),%r13
    cfc7:	00 
    cfc8:	4c 89 ef             	mov    %r13,%rdi
    cfcb:	e8 70 95 ff ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cfd0:	4a 8d 0c 28          	lea    (%rax,%r13,1),%rcx
	this->_M_impl._M_start = this->_M_allocate(__n);
    cfd4:	48 89 45 00          	mov    %rax,0x0(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cfd8:	48 89 c2             	mov    %rax,%rdx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    cfdb:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
    cfdf:	90                   	nop
  template <typename _Tp>
    struct _Optional_payload_base
    {
      using _Stored_type = remove_const_t<_Tp>;

      _Optional_payload_base() = default;
    cfe0:	c6 42 18 00          	movb   $0x0,0x18(%rdx)
    cfe4:	48 83 c2 1c          	add    $0x1c,%rdx
    cfe8:	48 39 ca             	cmp    %rcx,%rdx
    cfeb:	75 f3                	jne    cfe0 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x90>
	this->_M_impl._M_finish =
    cfed:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    cff1:	49 39 dc             	cmp    %rbx,%r12
    cff4:	74 49                	je     d03f <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xef>
    cff6:	4c 89 e2             	mov    %r12,%rdx
    cff9:	eb 1d                	jmp    d018 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xc8>
    cffb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	operator=(_Up&& __u)
	noexcept(__and_v<is_nothrow_constructible<_Tp, _Up>,
			 is_nothrow_assignable<_Tp&, _Up>>)
	{
	  if (this->_M_is_engaged())
	    this->_M_get() = std::forward<_Up>(__u);
    d000:	f3 0f 6f 0a          	movdqu (%rdx),%xmm1
    d004:	0f 11 08             	movups %xmm1,(%rax)
    d007:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
    d00b:	48 89 48 10          	mov    %rcx,0x10(%rax)
    d00f:	48 83 c2 18          	add    $0x18,%rdx
    d013:	48 39 d3             	cmp    %rdx,%rbx
    d016:	74 27                	je     d03f <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xef>
    if (queueFamilyProp.queueFlags & VK_QUEUE_GRAPHICS_BIT) {
    d018:	f6 02 01             	testb  $0x1,(%rdx)
    d01b:	74 f2                	je     d00f <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xbf>
	  if (this->_M_is_engaged())
    d01d:	80 78 18 00          	cmpb   $0x0,0x18(%rax)
    d021:	75 dd                	jne    d000 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xb0>
    d023:	f3 0f 6f 12          	movdqu (%rdx),%xmm2
  for (const auto &queueFamilyProp : queueFamilyProps) {
    d027:	48 83 c2 18          	add    $0x18,%rdx
    d02b:	0f 11 10             	movups %xmm2,(%rax)
    d02e:	48 8b 4a f8          	mov    -0x8(%rdx),%rcx
	  this->_M_engaged = true;
    d032:	c6 40 18 01          	movb   $0x1,0x18(%rax)
    d036:	48 89 48 10          	mov    %rcx,0x10(%rax)
    d03a:	48 39 d3             	cmp    %rdx,%rbx
    d03d:	75 d9                	jne    d018 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xc8>
	if (__p)
    d03f:	4d 85 e4             	test   %r12,%r12
    d042:	74 10                	je     d054 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x104>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    d044:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    d049:	4c 89 e7             	mov    %r12,%rdi
    d04c:	4c 29 e6             	sub    %r12,%rsi
    d04f:	e8 0c 95 ff ff       	call   6560 <_ZdlPvm@plt>
}
    d054:	48 83 c4 28          	add    $0x28,%rsp
    d058:	48 89 e8             	mov    %rbp,%rax
    d05b:	5b                   	pop    %rbx
    d05c:	5d                   	pop    %rbp
    d05d:	41 5c                	pop    %r12
    d05f:	41 5d                	pop    %r13
    d061:	c3                   	ret
    d062:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	this->_M_impl._M_start = this->_M_allocate(__n);
    d068:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
    d06f:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d070:	31 c9                	xor    %ecx,%ecx
    d072:	e9 76 ff ff ff       	jmp    cfed <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x9d>
	  __throw_length_error(
    d077:	48 8d 3d 72 a5 02 00 	lea    0x2a572(%rip),%rdi        # 375f0 <_ZTSN3vkw10ImageViewsE+0x220>
    d07e:	e8 fd 91 ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    d083:	48 89 c3             	mov    %rax,%rbx
    d086:	e9 dd 9f ff ff       	jmp    7068 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T.cold>
    d08b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000d090 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T>:
getComputeQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    d090:	41 55                	push   %r13
    d092:	41 54                	push   %r12
    d094:	55                   	push   %rbp
    d095:	48 89 fd             	mov    %rdi,%rbp
    d098:	53                   	push   %rbx
    d099:	48 83 ec 28          	sub    $0x28,%rsp
      getPhysicalDeviceQueueFamilyPropertyList(physicalDevice);
    d09d:	48 89 e7             	mov    %rsp,%rdi
    d0a0:	e8 bb fd ff ff       	call   ce60 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d0a5:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    d0aa:	4c 8b 24 24          	mov    (%rsp),%r12
    d0ae:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    d0b5:	aa aa aa 
    d0b8:	48 89 da             	mov    %rbx,%rdx
    d0bb:	4c 29 e2             	sub    %r12,%rdx
    d0be:	48 89 d0             	mov    %rdx,%rax
    d0c1:	48 c1 f8 03          	sar    $0x3,%rax
    d0c5:	48 0f af c1          	imul   %rcx,%rax
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    d0c9:	48 b9 b0 6d db b6 6d 	movabs $0x6db6db6db6db6db0,%rcx
    d0d0:	db b6 6d 
    d0d3:	48 39 d1             	cmp    %rdx,%rcx
    d0d6:	0f 82 e3 00 00 00    	jb     d1bf <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x12f>
	: _M_start(), _M_finish(), _M_end_of_storage()
    d0dc:	66 0f ef c0          	pxor   %xmm0,%xmm0
    d0e0:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
    d0e7:	00 
    d0e8:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d0ec:	48 85 c0             	test   %rax,%rax
    d0ef:	0f 84 bb 00 00 00    	je     d1b0 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x120>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d0f5:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
    d0fc:	00 
    d0fd:	48 29 c1             	sub    %rax,%rcx
    d100:	4c 8d 2c 8d 00 00 00 	lea    0x0(,%rcx,4),%r13
    d107:	00 
    d108:	4c 89 ef             	mov    %r13,%rdi
    d10b:	e8 30 94 ff ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d110:	4a 8d 0c 28          	lea    (%rax,%r13,1),%rcx
	this->_M_impl._M_start = this->_M_allocate(__n);
    d114:	48 89 45 00          	mov    %rax,0x0(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d118:	48 89 c2             	mov    %rax,%rdx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d11b:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
    d11f:	90                   	nop
      _Optional_payload_base() = default;
    d120:	c6 42 18 00          	movb   $0x0,0x18(%rdx)
    d124:	48 83 c2 1c          	add    $0x1c,%rdx
    d128:	48 39 ca             	cmp    %rcx,%rdx
    d12b:	75 f3                	jne    d120 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x90>
	this->_M_impl._M_finish =
    d12d:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    d131:	49 39 dc             	cmp    %rbx,%r12
    d134:	74 52                	je     d188 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xf8>
    d136:	4c 89 e2             	mov    %r12,%rdx
    d139:	eb 21                	jmp    d15c <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xcc>
    d13b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	    this->_M_get() = std::forward<_Up>(__u);
    d140:	f3 0f 6f 0a          	movdqu (%rdx),%xmm1
    d144:	0f 11 08             	movups %xmm1,(%rax)
    d147:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
    d14b:	48 89 48 10          	mov    %rcx,0x10(%rax)
    d14f:	48 83 c2 18          	add    $0x18,%rdx
    d153:	48 83 c0 1c          	add    $0x1c,%rax
    d157:	48 39 d3             	cmp    %rdx,%rbx
    d15a:	74 2c                	je     d188 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xf8>
    if (queueFamilyProp.queueFlags & VK_QUEUE_COMPUTE_BIT) {
    d15c:	f6 02 02             	testb  $0x2,(%rdx)
    d15f:	74 ee                	je     d14f <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xbf>
	  if (this->_M_is_engaged())
    d161:	80 78 18 00          	cmpb   $0x0,0x18(%rax)
    d165:	75 d9                	jne    d140 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xb0>
    d167:	f3 0f 6f 12          	movdqu (%rdx),%xmm2
  for (const auto &queueFamilyProp : queueFamilyProps) {
    d16b:	48 83 c2 18          	add    $0x18,%rdx
    d16f:	48 83 c0 1c          	add    $0x1c,%rax
    d173:	0f 11 50 e4          	movups %xmm2,-0x1c(%rax)
    d177:	48 8b 4a f8          	mov    -0x8(%rdx),%rcx
	  this->_M_engaged = true;
    d17b:	c6 40 fc 01          	movb   $0x1,-0x4(%rax)
    d17f:	48 89 48 f4          	mov    %rcx,-0xc(%rax)
    d183:	48 39 d3             	cmp    %rdx,%rbx
    d186:	75 d4                	jne    d15c <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xcc>
	if (__p)
    d188:	4d 85 e4             	test   %r12,%r12
    d18b:	74 10                	je     d19d <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x10d>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    d18d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    d192:	4c 89 e7             	mov    %r12,%rdi
    d195:	4c 29 e6             	sub    %r12,%rsi
    d198:	e8 c3 93 ff ff       	call   6560 <_ZdlPvm@plt>
}
    d19d:	48 83 c4 28          	add    $0x28,%rsp
    d1a1:	48 89 e8             	mov    %rbp,%rax
    d1a4:	5b                   	pop    %rbx
    d1a5:	5d                   	pop    %rbp
    d1a6:	41 5c                	pop    %r12
    d1a8:	41 5d                	pop    %r13
    d1aa:	c3                   	ret
    d1ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	this->_M_impl._M_start = this->_M_allocate(__n);
    d1b0:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
    d1b7:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d1b8:	31 c9                	xor    %ecx,%ecx
    d1ba:	e9 6e ff ff ff       	jmp    d12d <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x9d>
	  __throw_length_error(
    d1bf:	48 8d 3d 2a a4 02 00 	lea    0x2a42a(%rip),%rdi        # 375f0 <_ZTSN3vkw10ImageViewsE+0x220>
    d1c6:	e8 b5 90 ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    d1cb:	48 89 c3             	mov    %rax,%rbx
    d1ce:	e9 b2 9e ff ff       	jmp    7085 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T.cold>
    d1d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d1da:	00 00 00 00 
    d1de:	66 90                	xchg   %ax,%ax

000000000000d1e0 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:
                                  VkSurfaceKHR surface) {
    d1e0:	41 57                	push   %r15
    d1e2:	41 56                	push   %r14
    d1e4:	49 89 d6             	mov    %rdx,%r14
    d1e7:	41 55                	push   %r13
    d1e9:	49 89 f5             	mov    %rsi,%r13
    d1ec:	41 54                	push   %r12
    d1ee:	49 89 fc             	mov    %rdi,%r12
    d1f1:	55                   	push   %rbp
    d1f2:	53                   	push   %rbx
    d1f3:	48 83 ec 48          	sub    $0x48,%rsp
      getPhysicalDeviceQueueFamilyPropertyList(physicalDevice);
    d1f7:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
    d1fc:	e8 5f fc ff ff       	call   ce60 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d201:	4c 8b 7c 24 28       	mov    0x28(%rsp),%r15
    d206:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    d20b:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    d212:	aa aa aa 
    d215:	4c 89 fa             	mov    %r15,%rdx
    d218:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    d21d:	48 29 c2             	sub    %rax,%rdx
    d220:	48 89 d0             	mov    %rdx,%rax
    d223:	48 c1 f8 03          	sar    $0x3,%rax
    d227:	48 0f af c1          	imul   %rcx,%rax
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    d22b:	48 b9 b0 6d db b6 6d 	movabs $0x6db6db6db6db6db0,%rcx
    d232:	db b6 6d 
    d235:	48 39 d1             	cmp    %rdx,%rcx
    d238:	0f 82 21 01 00 00    	jb     d35f <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x17f>
	: _M_start(), _M_finish(), _M_end_of_storage()
    d23e:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
    d245:	00 00 
    d247:	66 0f ef c0          	pxor   %xmm0,%xmm0
    d24b:	41 0f 11 04 24       	movups %xmm0,(%r12)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d250:	48 85 c0             	test   %rax,%rax
    d253:	0f 84 f7 00 00 00    	je     d350 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x170>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d259:	48 8d 1c c5 00 00 00 	lea    0x0(,%rax,8),%rbx
    d260:	00 
    d261:	48 29 c3             	sub    %rax,%rbx
    d264:	48 c1 e3 02          	shl    $0x2,%rbx
    d268:	48 89 df             	mov    %rbx,%rdi
    d26b:	e8 d0 92 ff ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d270:	48 01 c3             	add    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
    d273:	49 89 04 24          	mov    %rax,(%r12)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d277:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
    d27c:	0f 1f 40 00          	nopl   0x0(%rax)
      _Optional_payload_base() = default;
    d280:	c6 40 18 00          	movb   $0x0,0x18(%rax)
    d284:	48 83 c0 1c          	add    $0x1c,%rax
    d288:	48 39 d8             	cmp    %rbx,%rax
    d28b:	75 f3                	jne    d280 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xa0>
  for (const auto &queueFamilyProp : queueFamilyProps) {
    d28d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	this->_M_impl._M_finish =
    d292:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
    d297:	4c 39 f8             	cmp    %r15,%rax
    d29a:	0f 84 86 00 00 00    	je     d326 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x146>
    d2a0:	48 89 c3             	mov    %rax,%rbx
    d2a3:	48 8d 44 24 1c       	lea    0x1c(%rsp),%rax
  uint32_t index = 0;
    d2a8:	31 ed                	xor    %ebp,%ebp
    d2aa:	48 89 04 24          	mov    %rax,(%rsp)
    d2ae:	eb 1b                	jmp    d2cb <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xeb>
	    this->_M_get() = std::forward<_Up>(__u);
    d2b0:	f3 0f 6f 0b          	movdqu (%rbx),%xmm1
    d2b4:	0f 11 08             	movups %xmm1,(%rax)
    d2b7:	48 8b 53 10          	mov    0x10(%rbx),%rdx
    d2bb:	48 89 50 10          	mov    %rdx,0x10(%rax)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    d2bf:	48 83 c3 18          	add    $0x18,%rbx
    ++index;
    d2c3:	83 c5 01             	add    $0x1,%ebp
  for (const auto &queueFamilyProp : queueFamilyProps) {
    d2c6:	49 39 df             	cmp    %rbx,%r15
    d2c9:	74 5b                	je     d326 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x146>
    vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, index, surface,
    d2cb:	48 8b 0c 24          	mov    (%rsp),%rcx
    d2cf:	4c 89 f2             	mov    %r14,%rdx
    d2d2:	89 ee                	mov    %ebp,%esi
    d2d4:	4c 89 ef             	mov    %r13,%rdi
    VkBool32 presentSupported = false;
    d2d7:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
    d2de:	00 
    vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, index, surface,
    d2df:	e8 dc 92 ff ff       	call   65c0 <vkGetPhysicalDeviceSurfaceSupportKHR@plt>
    if (presentSupported) {
    d2e4:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
    d2e8:	85 c0                	test   %eax,%eax
    d2ea:	74 d3                	je     d2bf <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xdf>
      presentQueueFamilies[index] = queueFamilyProp;
    d2ec:	89 ea                	mov    %ebp,%edx
	return *(this->_M_impl._M_start + __n);
    d2ee:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
    d2f5:	00 
    d2f6:	48 29 d0             	sub    %rdx,%rax
    d2f9:	49 8b 14 24          	mov    (%r12),%rdx
    d2fd:	48 8d 04 82          	lea    (%rdx,%rax,4),%rax
	  if (this->_M_is_engaged())
    d301:	80 78 18 00          	cmpb   $0x0,0x18(%rax)
    d305:	75 a9                	jne    d2b0 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xd0>
    d307:	f3 0f 6f 13          	movdqu (%rbx),%xmm2
  for (const auto &queueFamilyProp : queueFamilyProps) {
    d30b:	48 83 c3 18          	add    $0x18,%rbx
    ++index;
    d30f:	83 c5 01             	add    $0x1,%ebp
    d312:	0f 11 10             	movups %xmm2,(%rax)
    d315:	48 8b 53 f8          	mov    -0x8(%rbx),%rdx
	  this->_M_engaged = true;
    d319:	c6 40 18 01          	movb   $0x1,0x18(%rax)
    d31d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    d321:	49 39 df             	cmp    %rbx,%r15
    d324:	75 a5                	jne    d2cb <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xeb>
	if (__p)
    d326:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    d32b:	48 85 ff             	test   %rdi,%rdi
    d32e:	74 0d                	je     d33d <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x15d>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    d330:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    d335:	48 29 fe             	sub    %rdi,%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    d338:	e8 23 92 ff ff       	call   6560 <_ZdlPvm@plt>
}
    d33d:	48 83 c4 48          	add    $0x48,%rsp
    d341:	4c 89 e0             	mov    %r12,%rax
    d344:	5b                   	pop    %rbx
    d345:	5d                   	pop    %rbp
    d346:	41 5c                	pop    %r12
    d348:	41 5d                	pop    %r13
    d34a:	41 5e                	pop    %r14
    d34c:	41 5f                	pop    %r15
    d34e:	c3                   	ret
    d34f:	90                   	nop
	this->_M_impl._M_start = this->_M_allocate(__n);
    d350:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
    d357:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d358:	31 db                	xor    %ebx,%ebx
    d35a:	e9 2e ff ff ff       	jmp    d28d <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xad>
	  __throw_length_error(
    d35f:	48 8d 3d 8a a2 02 00 	lea    0x2a28a(%rip),%rdi        # 375f0 <_ZTSN3vkw10ImageViewsE+0x220>
    d366:	e8 15 8f ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    d36b:	48 89 c3             	mov    %rax,%rbx
    d36e:	e9 2f 9d ff ff       	jmp    70a2 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    d373:	48 89 c3             	mov    %rax,%rbx
    d376:	e9 3d 9d ff ff       	jmp    70b8 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x16>
    d37b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000d380 <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:
                                     VkSurfaceKHR surface) {
    d380:	55                   	push   %rbp
  VkSurfaceCapabilitiesKHR surfaceCapabilities{};
    d381:	66 0f ef c0          	pxor   %xmm0,%xmm0
                                     VkSurfaceKHR surface) {
    d385:	53                   	push   %rbx
    d386:	48 89 fb             	mov    %rdi,%rbx
    d389:	48 89 f7             	mov    %rsi,%rdi
    d38c:	48 89 d6             	mov    %rdx,%rsi
  if (vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    d38f:	48 89 da             	mov    %rbx,%rdx
                                     VkSurfaceKHR surface) {
    d392:	48 83 ec 08          	sub    $0x8,%rsp
  VkSurfaceCapabilitiesKHR surfaceCapabilities{};
    d396:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
    d39d:	0f 11 03             	movups %xmm0,(%rbx)
    d3a0:	0f 11 43 10          	movups %xmm0,0x10(%rbx)
    d3a4:	0f 11 43 20          	movups %xmm0,0x20(%rbx)
  if (vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    d3a8:	e8 b3 90 ff ff       	call   6460 <vkGetPhysicalDeviceSurfaceCapabilitiesKHR@plt>
    d3ad:	85 c0                	test   %eax,%eax
    d3af:	0f 85 25 9d ff ff    	jne    70da <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold>
}
    d3b5:	48 83 c4 08          	add    $0x8,%rsp
    d3b9:	48 89 d8             	mov    %rbx,%rax
    d3bc:	5b                   	pop    %rbx
    d3bd:	5d                   	pop    %rbp
    d3be:	c3                   	ret
    d3bf:	90                   	nop

000000000000d3c0 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:
                                   VkSurfaceKHR surface) {
    d3c0:	41 57                	push   %r15
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface,
    d3c2:	31 c9                	xor    %ecx,%ecx
                                   VkSurfaceKHR surface) {
    d3c4:	41 56                	push   %r14
    d3c6:	41 55                	push   %r13
    d3c8:	41 54                	push   %r12
    d3ca:	49 89 d4             	mov    %rdx,%r12
    d3cd:	55                   	push   %rbp
    d3ce:	48 89 f5             	mov    %rsi,%rbp
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface,
    d3d1:	4c 89 e6             	mov    %r12,%rsi
                                   VkSurfaceKHR surface) {
    d3d4:	53                   	push   %rbx
    d3d5:	48 89 fb             	mov    %rdi,%rbx
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface,
    d3d8:	48 89 ef             	mov    %rbp,%rdi
                                   VkSurfaceKHR surface) {
    d3db:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface,
    d3df:	4c 8d 6c 24 0c       	lea    0xc(%rsp),%r13
    d3e4:	4c 89 ea             	mov    %r13,%rdx
    d3e7:	e8 44 93 ff ff       	call   6730 <vkGetPhysicalDeviceSurfaceFormatsKHR@plt>
    d3ec:	85 c0                	test   %eax,%eax
    d3ee:	0f 85 2b 9d ff ff    	jne    711f <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold>
  std::vector<VkSurfaceFormatKHR> surfaceFormats{surfaceFormatCount};
    d3f4:	44 8b 7c 24 0c       	mov    0xc(%rsp),%r15d
	: _M_start(), _M_finish(), _M_end_of_storage()
    d3f9:	66 0f ef c0          	pxor   %xmm0,%xmm0
    d3fd:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    d404:	00 
    d405:	0f 11 03             	movups %xmm0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d408:	4d 85 ff             	test   %r15,%r15
    d40b:	0f 84 7f 00 00 00    	je     d490 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xd0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d411:	4e 8d 34 fd 00 00 00 	lea    0x0(,%r15,8),%r14
    d418:	00 
    d419:	4c 89 f7             	mov    %r14,%rdi
    d41c:	e8 1f 91 ff ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_start = this->_M_allocate(__n);
    d421:	66 48 0f 6e c0       	movq   %rax,%xmm0
    d426:	48 89 c1             	mov    %rax,%rcx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d429:	4a 8d 04 30          	lea    (%rax,%r14,1),%rax
	this->_M_impl._M_start = this->_M_allocate(__n);
    d42d:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d431:	48 89 43 10          	mov    %rax,0x10(%rbx)
	      ++__first;
    d435:	48 8d 51 08          	lea    0x8(%rcx),%rdx
    d439:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
	this->_M_impl._M_start = this->_M_allocate(__n);
    d440:	0f 11 03             	movups %xmm0,(%rbx)
      if (__n <= 0)
    d443:	49 83 ff 01          	cmp    $0x1,%r15
    d447:	75 3a                	jne    d483 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xc3>
	this->_M_impl._M_finish =
    d449:	48 89 53 08          	mov    %rdx,0x8(%rbx)
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(
    d44d:	4c 89 e6             	mov    %r12,%rsi
    d450:	4c 89 ea             	mov    %r13,%rdx
    d453:	48 89 ef             	mov    %rbp,%rdi
    d456:	e8 d5 92 ff ff       	call   6730 <vkGetPhysicalDeviceSurfaceFormatsKHR@plt>
    d45b:	85 c0                	test   %eax,%eax
    d45d:	0f 85 ee 9c ff ff    	jne    7151 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x32>
}
    d463:	48 83 c4 18          	add    $0x18,%rsp
    d467:	48 89 d8             	mov    %rbx,%rax
    d46a:	5b                   	pop    %rbx
    d46b:	5d                   	pop    %rbp
    d46c:	41 5c                	pop    %r12
    d46e:	41 5d                	pop    %r13
    d470:	41 5e                	pop    %r14
    d472:	41 5f                	pop    %r15
    d474:	c3                   	ret
    d475:	0f 1f 00             	nopl   (%rax)
	*__first = __value;
    d478:	48 8b 31             	mov    (%rcx),%rsi
      for (; __first != __last; ++__first)
    d47b:	48 83 c2 08          	add    $0x8,%rdx
	*__first = __value;
    d47f:	48 89 72 f8          	mov    %rsi,-0x8(%rdx)
      for (; __first != __last; ++__first)
    d483:	48 39 c2             	cmp    %rax,%rdx
    d486:	75 f0                	jne    d478 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xb8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d488:	48 89 c2             	mov    %rax,%rdx
    d48b:	eb bc                	jmp    d449 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x89>
    d48d:	0f 1f 00             	nopl   (%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
    d490:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d497:	31 c9                	xor    %ecx,%ecx
    d499:	31 d2                	xor    %edx,%edx
    d49b:	eb ac                	jmp    d449 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x89>
    d49d:	e9 f4 9c ff ff       	jmp    7196 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x77>
    d4a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d4a9:	00 00 00 00 
    d4ad:	0f 1f 00             	nopl   (%rax)

000000000000d4b0 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:
                                        VkSurfaceKHR surface) {
    d4b0:	41 57                	push   %r15
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface,
    d4b2:	31 c9                	xor    %ecx,%ecx
                                        VkSurfaceKHR surface) {
    d4b4:	41 56                	push   %r14
    d4b6:	41 55                	push   %r13
    d4b8:	41 54                	push   %r12
    d4ba:	49 89 d4             	mov    %rdx,%r12
    d4bd:	55                   	push   %rbp
    d4be:	48 89 f5             	mov    %rsi,%rbp
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface,
    d4c1:	4c 89 e6             	mov    %r12,%rsi
                                        VkSurfaceKHR surface) {
    d4c4:	53                   	push   %rbx
    d4c5:	48 89 fb             	mov    %rdi,%rbx
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface,
    d4c8:	48 89 ef             	mov    %rbp,%rdi
                                        VkSurfaceKHR surface) {
    d4cb:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface,
    d4cf:	4c 8d 6c 24 0c       	lea    0xc(%rsp),%r13
    d4d4:	4c 89 ea             	mov    %r13,%rdx
    d4d7:	e8 64 92 ff ff       	call   6740 <vkGetPhysicalDeviceSurfacePresentModesKHR@plt>
    d4dc:	85 c0                	test   %eax,%eax
    d4de:	0f 85 de 9c ff ff    	jne    71c2 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold>
  std::vector<VkPresentModeKHR> presentModes{presentModeCount};
    d4e4:	44 8b 7c 24 0c       	mov    0xc(%rsp),%r15d
	: _M_start(), _M_finish(), _M_end_of_storage()
    d4e9:	66 0f ef c0          	pxor   %xmm0,%xmm0
    d4ed:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    d4f4:	00 
    d4f5:	0f 11 03             	movups %xmm0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d4f8:	4d 85 ff             	test   %r15,%r15
    d4fb:	0f 84 0f 01 00 00    	je     d610 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x160>
    d501:	4e 8d 34 bd 00 00 00 	lea    0x0(,%r15,4),%r14
    d508:	00 
    d509:	4c 89 f7             	mov    %r14,%rdi
    d50c:	e8 2f 90 ff ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_start = this->_M_allocate(__n);
    d511:	66 48 0f 6e c0       	movq   %rax,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d516:	4a 8d 14 30          	lea    (%rax,%r14,1),%rdx
    d51a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    d520:	48 89 c1             	mov    %rax,%rcx
	this->_M_impl._M_start = this->_M_allocate(__n);
    d523:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d527:	48 89 53 10          	mov    %rdx,0x10(%rbx)
    d52b:	48 8d 40 04          	lea    0x4(%rax),%rax
	this->_M_impl._M_start = this->_M_allocate(__n);
    d52f:	0f 11 03             	movups %xmm0,(%rbx)
      if (__n <= 0)
    d532:	49 83 ff 01          	cmp    $0x1,%r15
    d536:	74 7f                	je     d5b7 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x107>
      for (; __first != __last; ++__first)
    d538:	48 39 d0             	cmp    %rdx,%rax
    d53b:	74 77                	je     d5b4 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x104>
    d53d:	48 8d 41 08          	lea    0x8(%rcx),%rax
	*__first = __value;
    d541:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%rcx)
      for (; __first != __last; ++__first)
    d548:	48 39 d0             	cmp    %rdx,%rax
    d54b:	74 67                	je     d5b4 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x104>
    d54d:	49 83 ee 0c          	sub    $0xc,%r14
    d551:	49 83 fe 0c          	cmp    $0xc,%r14
    d555:	0f 86 8d 00 00 00    	jbe    d5e8 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x138>
    d55b:	49 c1 ee 02          	shr    $0x2,%r14
    d55f:	48 89 ce             	mov    %rcx,%rsi
	*__first = __value;
    d562:	66 0f ef c0          	pxor   %xmm0,%xmm0
    d566:	49 83 c6 01          	add    $0x1,%r14
    d56a:	4c 89 f7             	mov    %r14,%rdi
    d56d:	48 c1 ef 02          	shr    $0x2,%rdi
    d571:	48 c1 e7 04          	shl    $0x4,%rdi
    d575:	48 01 cf             	add    %rcx,%rdi
    d578:	0f 11 46 08          	movups %xmm0,0x8(%rsi)
      for (; __first != __last; ++__first)
    d57c:	48 83 c6 10          	add    $0x10,%rsi
    d580:	48 39 f7             	cmp    %rsi,%rdi
    d583:	75 f3                	jne    d578 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xc8>
    d585:	4c 89 f6             	mov    %r14,%rsi
    d588:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
    d58c:	41 83 e6 03          	and    $0x3,%r14d
    d590:	48 8d 04 b0          	lea    (%rax,%rsi,4),%rax
    d594:	74 1e                	je     d5b4 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x104>
	*__first = __value;
    d596:	8b 31                	mov    (%rcx),%esi
      for (; __first != __last; ++__first)
    d598:	48 8d 78 04          	lea    0x4(%rax),%rdi
	*__first = __value;
    d59c:	89 30                	mov    %esi,(%rax)
      for (; __first != __last; ++__first)
    d59e:	48 39 fa             	cmp    %rdi,%rdx
    d5a1:	74 11                	je     d5b4 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x104>
	*__first = __value;
    d5a3:	89 70 04             	mov    %esi,0x4(%rax)
      for (; __first != __last; ++__first)
    d5a6:	48 8d 70 08          	lea    0x8(%rax),%rsi
    d5aa:	48 39 f2             	cmp    %rsi,%rdx
    d5ad:	74 05                	je     d5b4 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x104>
	*__first = __value;
    d5af:	8b 31                	mov    (%rcx),%esi
    d5b1:	89 70 08             	mov    %esi,0x8(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d5b4:	48 89 d0             	mov    %rdx,%rax
	this->_M_impl._M_finish =
    d5b7:	48 89 43 08          	mov    %rax,0x8(%rbx)
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(
    d5bb:	4c 89 ea             	mov    %r13,%rdx
    d5be:	4c 89 e6             	mov    %r12,%rsi
    d5c1:	48 89 ef             	mov    %rbp,%rdi
    d5c4:	e8 77 91 ff ff       	call   6740 <vkGetPhysicalDeviceSurfacePresentModesKHR@plt>
    d5c9:	85 c0                	test   %eax,%eax
    d5cb:	0f 85 23 9c ff ff    	jne    71f4 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x32>
}
    d5d1:	48 83 c4 18          	add    $0x18,%rsp
    d5d5:	48 89 d8             	mov    %rbx,%rax
    d5d8:	5b                   	pop    %rbx
    d5d9:	5d                   	pop    %rbp
    d5da:	41 5c                	pop    %r12
    d5dc:	41 5d                	pop    %r13
    d5de:	41 5e                	pop    %r14
    d5e0:	41 5f                	pop    %r15
    d5e2:	c3                   	ret
    d5e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    d5e8:	8b 31                	mov    (%rcx),%esi
      for (; __first != __last; ++__first)
    d5ea:	48 83 c0 04          	add    $0x4,%rax
	*__first = __value;
    d5ee:	89 70 fc             	mov    %esi,-0x4(%rax)
      for (; __first != __last; ++__first)
    d5f1:	48 39 c2             	cmp    %rax,%rdx
    d5f4:	74 be                	je     d5b4 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x104>
	*__first = __value;
    d5f6:	8b 31                	mov    (%rcx),%esi
      for (; __first != __last; ++__first)
    d5f8:	48 83 c0 04          	add    $0x4,%rax
	*__first = __value;
    d5fc:	89 70 fc             	mov    %esi,-0x4(%rax)
      for (; __first != __last; ++__first)
    d5ff:	48 39 c2             	cmp    %rax,%rdx
    d602:	75 e4                	jne    d5e8 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x138>
    d604:	eb ae                	jmp    d5b4 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x104>
    d606:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d60d:	00 00 00 
	this->_M_impl._M_start = this->_M_allocate(__n);
    d610:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d617:	31 c9                	xor    %ecx,%ecx
    d619:	31 c0                	xor    %eax,%eax
    d61b:	eb 9a                	jmp    d5b7 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x107>
    d61d:	e9 04 9c ff ff       	jmp    7226 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T.cold+0x64>
    d622:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d629:	00 00 00 00 
    d62d:	0f 1f 00             	nopl   (%rax)

000000000000d630 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T>:
                                        VkSwapchainKHR swapchain) {
    d630:	41 57                	push   %r15
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    d632:	31 c9                	xor    %ecx,%ecx
                                        VkSwapchainKHR swapchain) {
    d634:	41 56                	push   %r14
    d636:	41 55                	push   %r13
    d638:	49 89 d5             	mov    %rdx,%r13
    d63b:	41 54                	push   %r12
    d63d:	49 89 f4             	mov    %rsi,%r12
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    d640:	4c 89 ee             	mov    %r13,%rsi
                                        VkSwapchainKHR swapchain) {
    d643:	55                   	push   %rbp
    d644:	53                   	push   %rbx
    d645:	48 89 fb             	mov    %rdi,%rbx
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    d648:	4c 89 e7             	mov    %r12,%rdi
                                        VkSwapchainKHR swapchain) {
    d64b:	48 83 ec 28          	sub    $0x28,%rsp
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    d64f:	4c 8d 74 24 1c       	lea    0x1c(%rsp),%r14
    d654:	4c 89 f2             	mov    %r14,%rdx
    d657:	e8 84 8c ff ff       	call   62e0 <vkGetSwapchainImagesKHR@plt>
    d65c:	85 c0                	test   %eax,%eax
    d65e:	0f 85 01 9c ff ff    	jne    7265 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T.cold>
  std::vector<VkImage> swapchainImages{swapchainImageCount};
    d664:	44 8b 7c 24 1c       	mov    0x1c(%rsp),%r15d
	: _M_start(), _M_finish(), _M_end_of_storage()
    d669:	66 0f ef c0          	pxor   %xmm0,%xmm0
    d66d:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    d674:	00 
    d675:	0f 11 03             	movups %xmm0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d678:	4d 85 ff             	test   %r15,%r15
    d67b:	0f 84 8f 00 00 00    	je     d710 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0xe0>
    d681:	4a 8d 14 fd 00 00 00 	lea    0x0(,%r15,8),%rdx
    d688:	00 
    d689:	48 89 d7             	mov    %rdx,%rdi
    d68c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    d691:	e8 aa 8e ff ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d696:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	this->_M_impl._M_start = this->_M_allocate(__n);
    d69b:	66 48 0f 6e c0       	movq   %rax,%xmm0
    d6a0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    d6a7:	48 89 c5             	mov    %rax,%rbp
    d6aa:	48 8d 78 08          	lea    0x8(%rax),%rdi
    d6ae:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    d6b2:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    d6b6:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
	this->_M_impl._M_start = this->_M_allocate(__n);
    d6ba:	0f 11 03             	movups %xmm0,(%rbx)
      if (__n <= 0)
    d6bd:	49 83 ff 01          	cmp    $0x1,%r15
    d6c1:	74 1d                	je     d6e0 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0xb0>
      for (; __first != __last; ++__first)
    d6c3:	48 39 cf             	cmp    %rcx,%rdi
    d6c6:	74 15                	je     d6dd <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0xad>
	*__first = __tmp;
    d6c8:	48 83 ea 08          	sub    $0x8,%rdx
    d6cc:	31 f6                	xor    %esi,%esi
    d6ce:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    d6d3:	e8 c8 8b ff ff       	call   62a0 <memset@plt>
    d6d8:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d6dd:	48 89 cf             	mov    %rcx,%rdi
	this->_M_impl._M_finish =
    d6e0:	48 89 7b 08          	mov    %rdi,0x8(%rbx)
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    d6e4:	48 89 e9             	mov    %rbp,%rcx
    d6e7:	4c 89 f2             	mov    %r14,%rdx
    d6ea:	4c 89 ee             	mov    %r13,%rsi
    d6ed:	4c 89 e7             	mov    %r12,%rdi
    d6f0:	e8 eb 8b ff ff       	call   62e0 <vkGetSwapchainImagesKHR@plt>
    d6f5:	85 c0                	test   %eax,%eax
    d6f7:	0f 85 9a 9b ff ff    	jne    7297 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T.cold+0x32>
  }
  return swapchainImages;
}
    d6fd:	48 83 c4 28          	add    $0x28,%rsp
    d701:	48 89 d8             	mov    %rbx,%rax
    d704:	5b                   	pop    %rbx
    d705:	5d                   	pop    %rbp
    d706:	41 5c                	pop    %r12
    d708:	41 5d                	pop    %r13
    d70a:	41 5e                	pop    %r14
    d70c:	41 5f                	pop    %r15
    d70e:	c3                   	ret
    d70f:	90                   	nop
	this->_M_impl._M_start = this->_M_allocate(__n);
    d710:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    d717:	31 ed                	xor    %ebp,%ebp
    d719:	31 ff                	xor    %edi,%edi
    d71b:	eb c3                	jmp    d6e0 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0xb0>
    d71d:	e9 ba 9b ff ff       	jmp    72dc <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T.cold+0x77>
    d722:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d729:	00 00 00 
    d72c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000d730 <_ZN3vkh12createWindowEiiPKcbP11GLFWmonitorP10GLFWwindow>:
                         GLFWwindow *share) {
    d730:	41 57                	push   %r15
    d732:	4d 89 cf             	mov    %r9,%r15
    d735:	41 56                	push   %r14
    d737:	4d 89 c6             	mov    %r8,%r14
    d73a:	41 55                	push   %r13
    d73c:	49 89 d5             	mov    %rdx,%r13
    d73f:	41 54                	push   %r12
    d741:	41 89 f4             	mov    %esi,%r12d
  glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
    d744:	31 f6                	xor    %esi,%esi
                         GLFWwindow *share) {
    d746:	55                   	push   %rbp
    d747:	89 fd                	mov    %edi,%ebp
  glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
    d749:	bf 01 20 02 00       	mov    $0x22001,%edi
                         GLFWwindow *share) {
    d74e:	53                   	push   %rbx
    d74f:	89 cb                	mov    %ecx,%ebx
    d751:	48 83 ec 08          	sub    $0x8,%rsp
  glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
    d755:	e8 f6 8c ff ff       	call   6450 <glfwWindowHint@plt>
  glfwWindowHint(GLFW_RESIZABLE, resizable);
    d75a:	0f b6 f3             	movzbl %bl,%esi
    d75d:	bf 03 00 02 00       	mov    $0x20003,%edi
    d762:	e8 e9 8c ff ff       	call   6450 <glfwWindowHint@plt>
}
    d767:	48 83 c4 08          	add    $0x8,%rsp
  return glfwCreateWindow(width, height, title, monitor, share);
    d76b:	4d 89 f8             	mov    %r15,%r8
    d76e:	4c 89 f1             	mov    %r14,%rcx
}
    d771:	5b                   	pop    %rbx
  return glfwCreateWindow(width, height, title, monitor, share);
    d772:	4c 89 ea             	mov    %r13,%rdx
    d775:	44 89 e6             	mov    %r12d,%esi
    d778:	89 ef                	mov    %ebp,%edi
}
    d77a:	5d                   	pop    %rbp
    d77b:	41 5c                	pop    %r12
    d77d:	41 5d                	pop    %r13
    d77f:	41 5e                	pop    %r14
    d781:	41 5f                	pop    %r15
  return glfwCreateWindow(width, height, title, monitor, share);
    d783:	e9 58 91 ff ff       	jmp    68e0 <glfwCreateWindow@plt>
    d788:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    d78f:	00 

000000000000d790 <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks>:
                          const VkAllocationCallbacks *pAllocator) {
    d790:	55                   	push   %rbp
    d791:	53                   	push   %rbx
    d792:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkCreateInstance(pCreateInfo, pAllocator, &instance) != VK_SUCCESS) {
    d796:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
    d79b:	e8 10 8f ff ff       	call   66b0 <vkCreateInstance@plt>
    d7a0:	85 c0                	test   %eax,%eax
    d7a2:	0f 85 60 9b ff ff    	jne    7308 <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks.cold>
  return instance;
    d7a8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d7ad:	48 83 c4 18          	add    $0x18,%rsp
    d7b1:	5b                   	pop    %rbx
    d7b2:	5d                   	pop    %rbp
    d7b3:	c3                   	ret
    d7b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d7bb:	00 00 00 00 
    d7bf:	90                   	nop

000000000000d7c0 <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks>:
                      const VkAllocationCallbacks *pAllocator) {
    d7c0:	55                   	push   %rbp
    d7c1:	53                   	push   %rbx
    d7c2:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, &device) !=
    d7c6:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d7cb:	e8 90 90 ff ff       	call   6860 <vkCreateDevice@plt>
    d7d0:	85 c0                	test   %eax,%eax
    d7d2:	0f 85 75 9b ff ff    	jne    734d <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks.cold>
  return device;
    d7d8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d7dd:	48 83 c4 18          	add    $0x18,%rsp
    d7e1:	5b                   	pop    %rbx
    d7e2:	5d                   	pop    %rbp
    d7e3:	c3                   	ret
    d7e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d7eb:	00 00 00 00 
    d7ef:	90                   	nop

000000000000d7f0 <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks>:
                           const VkAllocationCallbacks *allocator) {
    d7f0:	55                   	push   %rbp
    d7f1:	53                   	push   %rbx
    d7f2:	48 83 ec 18          	sub    $0x18,%rsp
  if (glfwCreateWindowSurface(instance, window, allocator, &surface) !=
    d7f6:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d7fb:	e8 a0 90 ff ff       	call   68a0 <glfwCreateWindowSurface@plt>
    d800:	85 c0                	test   %eax,%eax
    d802:	0f 85 8a 9b ff ff    	jne    7392 <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks.cold>
  return surface;
    d808:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d80d:	48 83 c4 18          	add    $0x18,%rsp
    d811:	5b                   	pop    %rbx
    d812:	5d                   	pop    %rbp
    d813:	c3                   	ret
    d814:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d81b:	00 00 00 00 
    d81f:	90                   	nop

000000000000d820 <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks>:
                               const VkAllocationCallbacks *pAllocator) {
    d820:	55                   	push   %rbp
    d821:	53                   	push   %rbx
    d822:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, &swapchain) !=
    d826:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d82b:	e8 50 8e ff ff       	call   6680 <vkCreateSwapchainKHR@plt>
    d830:	85 c0                	test   %eax,%eax
    d832:	0f 85 9f 9b ff ff    	jne    73d7 <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks.cold>
  return swapchain;
    d838:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d83d:	48 83 c4 18          	add    $0x18,%rsp
    d841:	5b                   	pop    %rbx
    d842:	5d                   	pop    %rbp
    d843:	c3                   	ret
    d844:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d84b:	00 00 00 00 
    d84f:	90                   	nop

000000000000d850 <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks>:
                            const VkAllocationCallbacks *pAllocator) {
    d850:	55                   	push   %rbp
    d851:	53                   	push   %rbx
    d852:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkCreateImageView(device, pCreateInfo, pAllocator, &imageView) !=
    d856:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d85b:	e8 40 8d ff ff       	call   65a0 <vkCreateImageView@plt>
    d860:	85 c0                	test   %eax,%eax
    d862:	0f 85 b4 9b ff ff    	jne    741c <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks.cold>
  return imageView;
    d868:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d86d:	48 83 c4 18          	add    $0x18,%rsp
    d871:	5b                   	pop    %rbx
    d872:	5d                   	pop    %rbp
    d873:	c3                   	ret
    d874:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d87b:	00 00 00 00 
    d87f:	90                   	nop

000000000000d880 <_ZN3vkh18createShaderModuleEP10VkDevice_TRKSt6vectorIcSaIcEEPK21VkAllocationCallbacks>:
                                  const VkAllocationCallbacks *pAllocator) {
    d880:	55                   	push   %rbp
  VkShaderModuleCreateInfo shaderModuleInfo{};
    d881:	66 0f ef c0          	pxor   %xmm0,%xmm0
                                  const VkAllocationCallbacks *pAllocator) {
    d885:	53                   	push   %rbx
    d886:	48 83 ec 48          	sub    $0x48,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    d88a:	48 8b 0e             	mov    (%rsi),%rcx
    d88d:	48 8b 46 08          	mov    0x8(%rsi),%rax
  if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    d891:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  VkShaderModuleCreateInfo shaderModuleInfo{};
    d896:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
    d89d:	00 
    d89e:	48 29 c8             	sub    %rcx,%rax
  shaderModuleInfo.pCode =
    d8a1:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    d8a6:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  shaderModuleInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
    d8ab:	c7 44 24 10 10 00 00 	movl   $0x10,0x10(%rsp)
    d8b2:	00 
  shaderModuleInfo.codeSize = shaderCode.size();
    d8b3:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  VkShaderModuleCreateInfo shaderModuleInfo{};
    d8b8:	0f 11 44 24 14       	movups %xmm0,0x14(%rsp)
  if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    d8bd:	e8 2e 8b ff ff       	call   63f0 <vkCreateShaderModule@plt>
    d8c2:	85 c0                	test   %eax,%eax
    d8c4:	0f 85 97 9b ff ff    	jne    7461 <_ZN3vkh18createShaderModuleEP10VkDevice_TRKSt6vectorIcSaIcEEPK21VkAllocationCallbacks.cold>
  return shaderModule;
    d8ca:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d8cf:	48 83 c4 48          	add    $0x48,%rsp
    d8d3:	5b                   	pop    %rbx
    d8d4:	5d                   	pop    %rbp
    d8d5:	c3                   	ret
    d8d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d8dd:	00 00 00 

000000000000d8e0 <_ZN3vkh20createPipelineLayoutEP10VkDevice_TPK26VkPipelineLayoutCreateInfoPK21VkAllocationCallbacks>:
                     const VkAllocationCallbacks *pAllocator) {
    d8e0:	55                   	push   %rbp
    d8e1:	53                   	push   %rbx
    d8e2:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkCreatePipelineLayout(device, pCreateInfo, pAllocator,
    d8e6:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d8eb:	e8 40 8b ff ff       	call   6430 <vkCreatePipelineLayout@plt>
    d8f0:	85 c0                	test   %eax,%eax
    d8f2:	0f 85 ae 9b ff ff    	jne    74a6 <_ZN3vkh20createPipelineLayoutEP10VkDevice_TPK26VkPipelineLayoutCreateInfoPK21VkAllocationCallbacks.cold>
  return pipelineLayout;
    d8f8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d8fd:	48 83 c4 18          	add    $0x18,%rsp
    d901:	5b                   	pop    %rbx
    d902:	5d                   	pop    %rbp
    d903:	c3                   	ret
    d904:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d90b:	00 00 00 00 
    d90f:	90                   	nop

000000000000d910 <_ZN3vkh16createRenderPassEP10VkDevice_TPK22VkRenderPassCreateInfoPK21VkAllocationCallbacks>:
                              const VkAllocationCallbacks *pAllocator) {
    d910:	55                   	push   %rbp
    d911:	53                   	push   %rbx
    d912:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkCreateRenderPass(device, pCreateInfo, pAllocator, &renderPass) !=
    d916:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d91b:	e8 f0 89 ff ff       	call   6310 <vkCreateRenderPass@plt>
    d920:	85 c0                	test   %eax,%eax
    d922:	0f 85 c3 9b ff ff    	jne    74eb <_ZN3vkh16createRenderPassEP10VkDevice_TPK22VkRenderPassCreateInfoPK21VkAllocationCallbacks.cold>
  return renderPass;
    d928:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d92d:	48 83 c4 18          	add    $0x18,%rsp
    d931:	5b                   	pop    %rbx
    d932:	5d                   	pop    %rbp
    d933:	c3                   	ret
    d934:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d93b:	00 00 00 00 
    d93f:	90                   	nop

000000000000d940 <_ZN3vkh17createFramebufferEP10VkDevice_TPK23VkFramebufferCreateInfoPK21VkAllocationCallbacks>:
                                const VkAllocationCallbacks *pAllocator) {
    d940:	55                   	push   %rbp
    d941:	53                   	push   %rbx
    d942:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkCreateFramebuffer(device, pCreateInfo, pAllocator, &framebuffer) !=
    d946:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d94b:	e8 40 8e ff ff       	call   6790 <vkCreateFramebuffer@plt>
    d950:	85 c0                	test   %eax,%eax
    d952:	0f 85 d8 9b ff ff    	jne    7530 <_ZN3vkh17createFramebufferEP10VkDevice_TPK23VkFramebufferCreateInfoPK21VkAllocationCallbacks.cold>
  return framebuffer;
    d958:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d95d:	48 83 c4 18          	add    $0x18,%rsp
    d961:	5b                   	pop    %rbx
    d962:	5d                   	pop    %rbp
    d963:	c3                   	ret
    d964:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d96b:	00 00 00 00 
    d96f:	90                   	nop

000000000000d970 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks>:
                                const VkAllocationCallbacks *pAllocator) {
    d970:	55                   	push   %rbp
    d971:	53                   	push   %rbx
    d972:	48 83 ec 18          	sub    $0x18,%rsp
  VkCommandPool commandPool{};
    d976:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
    d97d:	00 00 
  if (vkCreateCommandPool(device, pCreateInfo, pAllocator, &commandPool) !=
    d97f:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d984:	e8 87 88 ff ff       	call   6210 <vkCreateCommandPool@plt>
    d989:	85 c0                	test   %eax,%eax
    d98b:	0f 85 e4 9b ff ff    	jne    7575 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks.cold>
  return commandPool;
    d991:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d996:	48 83 c4 18          	add    $0x18,%rsp
    d99a:	5b                   	pop    %rbx
    d99b:	5d                   	pop    %rbp
    d99c:	c3                   	ret
    d99d:	0f 1f 00             	nopl   (%rax)

000000000000d9a0 <_ZN3vkh15createSemaphoreEP10VkDevice_TPK21VkSemaphoreCreateInfoPK21VkAllocationCallbacks>:
                            const VkAllocationCallbacks *pAllocator) {
    d9a0:	55                   	push   %rbp
    d9a1:	53                   	push   %rbx
    d9a2:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkCreateSemaphore(device, pCreateInfo, pAllocator, &semaphore) !=
    d9a6:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d9ab:	e8 20 8e ff ff       	call   67d0 <vkCreateSemaphore@plt>
    d9b0:	85 c0                	test   %eax,%eax
    d9b2:	0f 85 02 9c ff ff    	jne    75ba <_ZN3vkh15createSemaphoreEP10VkDevice_TPK21VkSemaphoreCreateInfoPK21VkAllocationCallbacks.cold>
  return semaphore;
    d9b8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d9bd:	48 83 c4 18          	add    $0x18,%rsp
    d9c1:	5b                   	pop    %rbx
    d9c2:	5d                   	pop    %rbp
    d9c3:	c3                   	ret
    d9c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d9cb:	00 00 00 00 
    d9cf:	90                   	nop

000000000000d9d0 <_ZN3vkh11createFenceEP10VkDevice_TPK17VkFenceCreateInfoPK21VkAllocationCallbacks>:
                    const VkAllocationCallbacks *pAllocator) {
    d9d0:	55                   	push   %rbp
    d9d1:	53                   	push   %rbx
    d9d2:	48 83 ec 18          	sub    $0x18,%rsp
  if (vkCreateFence(device, pCreateInfo, pAllocator, &fence) != VK_SUCCESS) {
    d9d6:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    d9db:	e8 f0 8c ff ff       	call   66d0 <vkCreateFence@plt>
    d9e0:	85 c0                	test   %eax,%eax
    d9e2:	0f 85 17 9c ff ff    	jne    75ff <_ZN3vkh11createFenceEP10VkDevice_TPK17VkFenceCreateInfoPK21VkAllocationCallbacks.cold>
  }
  return fence;
    d9e8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
    d9ed:	48 83 c4 18          	add    $0x18,%rsp
    d9f1:	5b                   	pop    %rbx
    d9f2:	5d                   	pop    %rbp
    d9f3:	c3                   	ret
    d9f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    d9fb:	00 00 00 00 
    d9ff:	90                   	nop

000000000000da00 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks>:
                                  const VkAllocationCallbacks *pAllocator) {
    da00:	41 57                	push   %r15
    da02:	41 56                	push   %r14
    da04:	41 55                	push   %r13
    da06:	41 54                	push   %r12
    da08:	55                   	push   %rbp
    da09:	53                   	push   %rbx
    da0a:	48 89 f3             	mov    %rsi,%rbx
    da0d:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
       *  The default constructor does nothing and is not normally
       *  accessible to users.
      */
      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    da14:	4c 8d bc 24 60 01 00 	lea    0x160(%rsp),%r15
    da1b:	00 
    da1c:	48 89 3c 24          	mov    %rdi,(%rsp)
    da20:	4c 8d 64 24 60       	lea    0x60(%rsp),%r12
    da25:	4c 89 ff             	mov    %r15,%rdi
    da28:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    da2d:	e8 0e 87 ff ff       	call   6140 <_ZNSt8ios_baseC2Ev@plt>
      : _M_gcount(streamsize(0))
    da32:	4c 8b 2d c7 30 03 00 	mov    0x330c7(%rip),%r13        # 40b00 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x8>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    da39:	31 c9                	xor    %ecx,%ecx
      { this->init(0); }
    da3b:	31 f6                	xor    %esi,%esi
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    da3d:	48 8d 05 6c 2e 03 00 	lea    0x32e6c(%rip),%rax        # 408b0 <_ZTVSt9basic_iosIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    da44:	66 0f ef c0          	pxor   %xmm0,%xmm0
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    da48:	66 89 8c 24 40 02 00 	mov    %cx,0x240(%rsp)
    da4f:	00 
      : _M_gcount(streamsize(0))
    da50:	48 8b 0d b1 30 03 00 	mov    0x330b1(%rip),%rcx        # 40b08 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    da57:	0f 11 84 24 48 02 00 	movups %xmm0,0x248(%rsp)
    da5e:	00 
    da5f:	0f 11 84 24 58 02 00 	movups %xmm0,0x258(%rsp)
    da66:	00 
    da67:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    da6e:	00 
    da6f:	49 8b 45 e8          	mov    -0x18(%r13),%rax
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    da73:	48 c7 84 24 38 02 00 	movq   $0x0,0x238(%rsp)
    da7a:	00 00 00 00 00 
    da7f:	4c 89 6c 24 60       	mov    %r13,0x60(%rsp)
    da84:	48 89 4c 04 60       	mov    %rcx,0x60(%rsp,%rax,1)
    da89:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
    da90:	00 00 
      { this->init(0); }
    da92:	49 8b 7d e8          	mov    -0x18(%r13),%rdi
    da96:	4c 01 e7             	add    %r12,%rdi
    da99:	e8 e2 8c ff ff       	call   6780 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>
      : __istream_type(), _M_filebuf()
    da9e:	48 8d 05 83 2f 03 00 	lea    0x32f83(%rip),%rax        # 40a28 <_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
    daa5:	4c 8d 74 24 70       	lea    0x70(%rsp),%r14
    daaa:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    daaf:	4c 89 f7             	mov    %r14,%rdi
    dab2:	48 83 c0 28          	add    $0x28,%rax
    dab6:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    dabd:	00 
    dabe:	e8 cd 8a ff ff       	call   6590 <_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev@plt>
	this->init(&_M_filebuf);
    dac3:	4c 89 f6             	mov    %r14,%rsi
    dac6:	4c 89 ff             	mov    %r15,%rdi
    dac9:	e8 b2 8c ff ff       	call   6780 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>
      { return open(__s.c_str(), __mode); }
    dace:	48 8b 33             	mov    (%rbx),%rsi
    dad1:	ba 0e 00 00 00       	mov    $0xe,%edx
    dad6:	4c 89 f7             	mov    %r14,%rdi
    dad9:	e8 b2 89 ff ff       	call   6490 <_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode@plt>
	  this->setstate(ios_base::failbit);
    dade:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
    dae3:	48 8b 7a e8          	mov    -0x18(%rdx),%rdi
    dae7:	4c 01 e7             	add    %r12,%rdi
	if (!_M_filebuf.open(__s, __mode | ios_base::in))
    daea:	48 85 c0             	test   %rax,%rax
    daed:	0f 84 b5 01 00 00    	je     dca8 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x2a8>
	  this->clear();
    daf3:	31 f6                	xor    %esi,%esi
    daf5:	e8 f6 8e ff ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
      { return _M_file.is_open(); }
    dafa:	48 8d 84 24 d8 00 00 	lea    0xd8(%rsp),%rax
    db01:	00 
    db02:	48 89 c7             	mov    %rax,%rdi
    db05:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    db0a:	e8 d1 85 ff ff       	call   60e0 <_ZNKSt12__basic_fileIcE7is_openEv@plt>
  if (!file.is_open()) {
    db0f:	84 c0                	test   %al,%al
    db11:	0f 84 2b 02 00 00    	je     dd42 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x342>
  size_t bufferSize = static_cast<size_t>(file.tellg());
    db17:	4c 89 e7             	mov    %r12,%rdi
    db1a:	e8 11 8f ff ff       	call   6a30 <_ZNSi5tellgEv@plt>
    db1f:	48 89 c3             	mov    %rax,%rbx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    db22:	48 85 c0             	test   %rax,%rax
    db25:	0f 88 e5 01 00 00    	js     dd10 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x310>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    db2b:	0f 84 8f 01 00 00    	je     dcc0 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x2c0>
    db31:	48 89 c7             	mov    %rax,%rdi
    db34:	e8 07 8a ff ff       	call   6540 <_Znwm@plt>
      if (__n <= 0)
    db39:	48 89 da             	mov    %rbx,%rdx
    db3c:	c6 00 00             	movb   $0x0,(%rax)
    db3f:	48 89 c5             	mov    %rax,%rbp
    db42:	48 83 ea 01          	sub    $0x1,%rdx
    db46:	0f 85 34 01 00 00    	jne    dc80 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x280>
  file.seekg(0);
    db4c:	31 f6                	xor    %esi,%esi
    db4e:	31 d2                	xor    %edx,%edx
    db50:	4c 89 e7             	mov    %r12,%rdi
    db53:	e8 c8 8b ff ff       	call   6720 <_ZNSi5seekgESt4fposI11__mbstate_tE@plt>
    db58:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
    db5f:	00 00 
  file.read(buffer.data(), bufferSize);
    db61:	48 89 da             	mov    %rbx,%rdx
    db64:	48 89 ee             	mov    %rbp,%rsi
    db67:	4c 89 e7             	mov    %r12,%rdi
    db6a:	e8 91 8b ff ff       	call   6700 <_ZNSi4readEPcl@plt>
	if (!_M_filebuf.close())
    db6f:	4c 89 f7             	mov    %r14,%rdi
    db72:	e8 59 85 ff ff       	call   60d0 <_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv@plt>
    db77:	48 85 c0             	test   %rax,%rax
    db7a:	0f 84 74 01 00 00    	je     dcf4 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x2f4>
  shaderModuleInfo.codeSize = shaderCode.size();
    db80:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    db85:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  VkShaderModuleCreateInfo shaderModuleInfo{};
    db8a:	66 0f ef c0          	pxor   %xmm0,%xmm0
  if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    db8e:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
    db93:	48 8b 3c 24          	mov    (%rsp),%rdi
    db97:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  VkShaderModuleCreateInfo shaderModuleInfo{};
    db9c:	c7 44 24 44 00 00 00 	movl   $0x0,0x44(%rsp)
    dba3:	00 
  shaderModuleInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
    dba4:	c7 44 24 30 10 00 00 	movl   $0x10,0x30(%rsp)
    dbab:	00 
  shaderModuleInfo.codeSize = shaderCode.size();
    dbac:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  shaderModuleInfo.pCode =
    dbb1:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  VkShaderModuleCreateInfo shaderModuleInfo{};
    dbb6:	0f 11 44 24 34       	movups %xmm0,0x34(%rsp)
  if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    dbbb:	e8 30 88 ff ff       	call   63f0 <vkCreateShaderModule@plt>
    dbc0:	85 c0                	test   %eax,%eax
    dbc2:	0f 85 7c 9a ff ff    	jne    7644 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold>
  return shaderModule;
    dbc8:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
	if (__p)
    dbcd:	48 85 ed             	test   %rbp,%rbp
    dbd0:	74 0b                	je     dbdd <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x1dd>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    dbd2:	48 89 de             	mov    %rbx,%rsi
    dbd5:	48 89 ef             	mov    %rbp,%rdi
    dbd8:	e8 83 89 ff ff       	call   6560 <_ZdlPvm@plt>
      { }
    dbdd:	48 8d 05 44 2e 03 00 	lea    0x32e44(%rip),%rax        # 40a28 <_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
	  { this->close(); }
    dbe4:	4c 89 f7             	mov    %r14,%rdi
      { }
    dbe7:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    dbec:	48 83 c0 28          	add    $0x28,%rax
    dbf0:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    dbf7:	00 
      }
    dbf8:	48 8d 05 71 2e 03 00 	lea    0x32e71(%rip),%rax        # 40a70 <_ZTVSt13basic_filebufIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    dbff:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
	  { this->close(); }
    dc04:	e8 c7 84 ff ff       	call   60d0 <_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv@plt>
      }
    dc09:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    dc0e:	e8 ad 8e ff ff       	call   6ac0 <_ZNSt12__basic_fileIcED1Ev@plt>

  public:
      /// Destructor deallocates no buffer space.
      virtual
      ~basic_streambuf()
      { }
    dc13:	48 8d 05 2e 2d 03 00 	lea    0x32d2e(%rip),%rax        # 40948 <_ZTVSt15basic_streambufIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    dc1a:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
    dc21:	00 
    dc22:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    dc27:	e8 04 8c ff ff       	call   6830 <_ZNSt6localeD1Ev@plt>
      { _M_gcount = streamsize(0); }
    dc2c:	49 8b 45 e8          	mov    -0x18(%r13),%rax
    dc30:	4c 89 6c 24 60       	mov    %r13,0x60(%rsp)
      ~basic_ios() { }
    dc35:	4c 89 ff             	mov    %r15,%rdi
    dc38:	48 8b 0d c9 2e 03 00 	mov    0x32ec9(%rip),%rcx        # 40b08 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    dc3f:	48 89 4c 04 60       	mov    %rcx,0x60(%rsp,%rax,1)
    dc44:	48 8d 05 65 2c 03 00 	lea    0x32c65(%rip),%rax        # 408b0 <_ZTVSt9basic_iosIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    dc4b:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    dc52:	00 
    dc53:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
    dc5a:	00 00 
    dc5c:	e8 3f 85 ff ff       	call   61a0 <_ZNSt8ios_baseD2Ev@plt>
}
    dc61:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
    dc68:	4c 89 e0             	mov    %r12,%rax
    dc6b:	5b                   	pop    %rbx
    dc6c:	5d                   	pop    %rbp
    dc6d:	41 5c                	pop    %r12
    dc6f:	41 5d                	pop    %r13
    dc71:	41 5e                	pop    %r14
    dc73:	41 5f                	pop    %r15
    dc75:	c3                   	ret
    dc76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    dc7d:	00 00 00 
    dc80:	48 8d 78 01          	lea    0x1(%rax),%rdi
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    dc84:	31 f6                	xor    %esi,%esi
    dc86:	e8 15 86 ff ff       	call   62a0 <memset@plt>
  file.seekg(0);
    dc8b:	31 f6                	xor    %esi,%esi
    dc8d:	31 d2                	xor    %edx,%edx
    dc8f:	4c 89 e7             	mov    %r12,%rdi
    dc92:	e8 89 8a ff ff       	call   6720 <_ZNSi5seekgESt4fposI11__mbstate_tE@plt>
    dc97:	48 89 5c 24 18       	mov    %rbx,0x18(%rsp)
    dc9c:	e9 c0 fe ff ff       	jmp    db61 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x161>
    dca1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    dca8:	8b 77 20             	mov    0x20(%rdi),%esi
    dcab:	83 ce 04             	or     $0x4,%esi
      { this->clear(this->rdstate() | __state); }
    dcae:	e8 3d 8d ff ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
    dcb3:	e9 42 fe ff ff       	jmp    dafa <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0xfa>
    dcb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    dcbf:	00 
    dcc0:	31 f6                	xor    %esi,%esi
    dcc2:	31 d2                	xor    %edx,%edx
    dcc4:	4c 89 e7             	mov    %r12,%rdi
    dcc7:	e8 54 8a ff ff       	call   6720 <_ZNSi5seekgESt4fposI11__mbstate_tE@plt>
  file.read(buffer.data(), bufferSize);
    dccc:	31 d2                	xor    %edx,%edx
    dcce:	31 f6                	xor    %esi,%esi
    dcd0:	4c 89 e7             	mov    %r12,%rdi
    dcd3:	e8 28 8a ff ff       	call   6700 <_ZNSi4readEPcl@plt>
	if (!_M_filebuf.close())
    dcd8:	4c 89 f7             	mov    %r14,%rdi
    dcdb:	e8 f0 83 ff ff       	call   60d0 <_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv@plt>
    dce0:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
    dce7:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    dce9:	31 ed                	xor    %ebp,%ebp
    dceb:	48 85 c0             	test   %rax,%rax
    dcee:	0f 85 8c fe ff ff    	jne    db80 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x180>
	  this->setstate(ios_base::failbit);
    dcf4:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    dcf9:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    dcfd:	4c 01 e7             	add    %r12,%rdi
    dd00:	8b 77 20             	mov    0x20(%rdi),%esi
    dd03:	83 ce 04             	or     $0x4,%esi
    dd06:	e8 e5 8c ff ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
    dd0b:	e9 70 fe ff ff       	jmp    db80 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x180>
	  __throw_length_error(
    dd10:	48 8d 3d d9 98 02 00 	lea    0x298d9(%rip),%rdi        # 375f0 <_ZTSN3vkw10ImageViewsE+0x220>
    dd17:	e8 64 85 ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
    dd1c:	e9 55 99 ff ff       	jmp    7676 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x32>
	__catch(...)
    dd21:	48 89 c7             	mov    %rax,%rdi
    dd24:	e9 52 99 ff ff       	jmp    767b <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x37>
  file.seekg(0);
    dd29:	49 89 c5             	mov    %rax,%r13
    dd2c:	e9 74 99 ff ff       	jmp    76a5 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x61>
    dd31:	eb f6                	jmp    dd29 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x329>
    dd33:	eb f4                	jmp    dd29 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x329>
    dd35:	e9 7b 99 ff ff       	jmp    76b5 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x71>
    dd3a:	49 89 c5             	mov    %rax,%r13
    dd3d:	e9 58 99 ff ff       	jmp    769a <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x56>
    dd42:	e9 73 99 ff ff       	jmp    76ba <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x76>
      ~basic_ios() { }
    dd47:	48 89 c3             	mov    %rax,%rbx
    dd4a:	e9 54 9a ff ff       	jmp    77a3 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x15f>
      }
    dd4f:	48 89 c3             	mov    %rax,%rbx
    dd52:	e9 28 9a ff ff       	jmp    777f <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x13b>
    dd57:	48 89 c3             	mov    %rax,%rbx
    dd5a:	e9 28 9a ff ff       	jmp    7787 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.cold+0x143>
    dd5f:	90                   	nop

000000000000dd60 <_ZN3vkh13destroyWindowEP10GLFWwindow>:
#include "destroy_object.hpp"

namespace vkh {

void destroyWindow(GLFWwindow *window) { glfwDestroyWindow(window); }
    dd60:	e9 2b 84 ff ff       	jmp    6190 <glfwDestroyWindow@plt>
    dd65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    dd6c:	00 00 00 00 

000000000000dd70 <_ZN3vkh15destroyInstanceEP12VkInstance_TPK21VkAllocationCallbacks>:

void destroyInstance(VkInstance instance,
                     const VkAllocationCallbacks *pAllocator) {
  vkDestroyInstance(instance, pAllocator);
    dd70:	e9 fb 87 ff ff       	jmp    6570 <vkDestroyInstance@plt>
    dd75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    dd7c:	00 00 00 00 

000000000000dd80 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>:
}

void destroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator) {
  vkDestroyDevice(device, pAllocator);
    dd80:	e9 9b 86 ff ff       	jmp    6420 <vkDestroyDevice@plt>
    dd85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    dd8c:	00 00 00 00 

000000000000dd90 <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>:
}

void destroySurface(VkInstance instance, VkSurfaceKHR surface,
                    const VkAllocationCallbacks *pAllocator) {
  vkDestroySurfaceKHR(instance, surface, pAllocator);
    dd90:	e9 bb 8c ff ff       	jmp    6a50 <vkDestroySurfaceKHR@plt>
    dd95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    dd9c:	00 00 00 00 

000000000000dda0 <_ZN3vkh16destroySwapchainEP10VkDevice_TP16VkSwapchainKHR_TPK21VkAllocationCallbacks>:
}

void destroySwapchain(VkDevice device, VkSwapchainKHR swapchain,
                      const VkAllocationCallbacks *pAllocator) {
  vkDestroySwapchainKHR(device, swapchain, pAllocator);
    dda0:	e9 8b 83 ff ff       	jmp    6130 <vkDestroySwapchainKHR@plt>
    dda5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    ddac:	00 00 00 00 

000000000000ddb0 <_ZN3vkh16destroyImageViewEP10VkDevice_TP13VkImageView_TPK21VkAllocationCallbacks>:
}

void destroyImageView(VkDevice device, VkImageView imageView,
                      const VkAllocationCallbacks *pAllocator) {
  vkDestroyImageView(device, imageView, pAllocator);
    ddb0:	e9 bb 8c ff ff       	jmp    6a70 <vkDestroyImageView@plt>
    ddb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    ddbc:	00 00 00 00 

000000000000ddc0 <_ZN3vkh19destroyShaderModuleEP10VkDevice_TP16VkShaderModule_TPK21VkAllocationCallbacks>:
}

void destroyShaderModule(VkDevice device, VkShaderModule shaderModule,
                         const VkAllocationCallbacks *pAllocator) {
  vkDestroyShaderModule(device, shaderModule, pAllocator);
    ddc0:	e9 cb 88 ff ff       	jmp    6690 <vkDestroyShaderModule@plt>
    ddc5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    ddcc:	00 00 00 00 

000000000000ddd0 <_ZN3vkh21destroyPipelineLayoutEP10VkDevice_TP18VkPipelineLayout_TPK21VkAllocationCallbacks>:
}

void destroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout,
                           const VkAllocationCallbacks *pAllocator) {
  vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
    ddd0:	e9 1b 89 ff ff       	jmp    66f0 <vkDestroyPipelineLayout@plt>
    ddd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    dddc:	00 00 00 00 

000000000000dde0 <_ZN3vkh17destroyRenderPassEP10VkDevice_TP14VkRenderPass_TPK21VkAllocationCallbacks>:
}

void destroyRenderPass(VkDevice device, VkRenderPass renderPass,
                       const VkAllocationCallbacks *pAllocator) {
  vkDestroyRenderPass(device, renderPass, pAllocator);
    dde0:	e9 1b 87 ff ff       	jmp    6500 <vkDestroyRenderPass@plt>
    dde5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    ddec:	00 00 00 00 

000000000000ddf0 <_ZN3vkh15destroyPipelineEP10VkDevice_TP12VkPipeline_TPK21VkAllocationCallbacks>:
}

void destroyPipeline(VkDevice device, VkPipeline pipeline,
                     const VkAllocationCallbacks *pAllocator) {
  vkDestroyPipeline(device, pipeline, pAllocator);
    ddf0:	e9 fb 87 ff ff       	jmp    65f0 <vkDestroyPipeline@plt>
    ddf5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    ddfc:	00 00 00 00 

000000000000de00 <_ZN3vkh16destroyPipelinesEP10VkDevice_TSt6vectorIP12VkPipeline_TSaIS4_EEPK21VkAllocationCallbacks>:
}

void destroyPipelines(VkDevice device, std::vector<VkPipeline> pipelines,
                      const VkAllocationCallbacks *pAllocator) {
    de00:	41 55                	push   %r13
    de02:	41 54                	push   %r12
    de04:	55                   	push   %rbp
    de05:	53                   	push   %rbx
    de06:	48 83 ec 08          	sub    $0x8,%rsp
    de0a:	48 8b 1e             	mov    (%rsi),%rbx
    de0d:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
  for (auto &pipeline : pipelines) {
    de11:	49 39 dd             	cmp    %rbx,%r13
    de14:	74 21                	je     de37 <_ZN3vkh16destroyPipelinesEP10VkDevice_TSt6vectorIP12VkPipeline_TSaIS4_EEPK21VkAllocationCallbacks+0x37>
    de16:	48 89 fd             	mov    %rdi,%rbp
    de19:	49 89 d4             	mov    %rdx,%r12
    de1c:	0f 1f 40 00          	nopl   0x0(%rax)
    vkDestroyPipeline(device, pipeline, pAllocator);
    de20:	48 8b 33             	mov    (%rbx),%rsi
    de23:	4c 89 e2             	mov    %r12,%rdx
    de26:	48 89 ef             	mov    %rbp,%rdi
  for (auto &pipeline : pipelines) {
    de29:	48 83 c3 08          	add    $0x8,%rbx
    vkDestroyPipeline(device, pipeline, pAllocator);
    de2d:	e8 be 87 ff ff       	call   65f0 <vkDestroyPipeline@plt>
  for (auto &pipeline : pipelines) {
    de32:	49 39 dd             	cmp    %rbx,%r13
    de35:	75 e9                	jne    de20 <_ZN3vkh16destroyPipelinesEP10VkDevice_TSt6vectorIP12VkPipeline_TSaIS4_EEPK21VkAllocationCallbacks+0x20>
  }
}
    de37:	48 83 c4 08          	add    $0x8,%rsp
    de3b:	5b                   	pop    %rbx
    de3c:	5d                   	pop    %rbp
    de3d:	41 5c                	pop    %r12
    de3f:	41 5d                	pop    %r13
    de41:	c3                   	ret
    de42:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    de49:	00 00 00 00 
    de4d:	0f 1f 00             	nopl   (%rax)

000000000000de50 <_ZN3vkh18destroyFramebufferEP10VkDevice_TP15VkFramebuffer_TPK21VkAllocationCallbacks>:

void destroyFramebuffer(VkDevice device, VkFramebuffer framebuffer,
                        const VkAllocationCallbacks *pAllocator) {
  vkDestroyFramebuffer(device, framebuffer, pAllocator);
    de50:	e9 8b 8b ff ff       	jmp    69e0 <vkDestroyFramebuffer@plt>
    de55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    de5c:	00 00 00 00 

000000000000de60 <_ZN3vkh18destroyCommandPoolEP10VkDevice_TP15VkCommandPool_TPK21VkAllocationCallbacks>:
}

void destroyCommandPool(VkDevice device, VkCommandPool commandPool,
                        const VkAllocationCallbacks *pAllocator) {
  vkDestroyCommandPool(device, commandPool, pAllocator);
    de60:	e9 8b 89 ff ff       	jmp    67f0 <vkDestroyCommandPool@plt>
    de65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    de6c:	00 00 00 00 

000000000000de70 <_ZN3vkh16destroySemaphoreEP10VkDevice_TP13VkSemaphore_TPK21VkAllocationCallbacks>:
}

void destroySemaphore(VkDevice device, VkSemaphore semaphore,
                      const VkAllocationCallbacks *pAllocator) {
  vkDestroySemaphore(device, semaphore, pAllocator);
    de70:	e9 fb 82 ff ff       	jmp    6170 <vkDestroySemaphore@plt>
    de75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    de7c:	00 00 00 00 

000000000000de80 <_ZN3vkh12destroyFenceEP10VkDevice_TP9VkFence_TPK21VkAllocationCallbacks>:
}

void destroyFence(VkDevice device, VkFence fence,
                  const VkAllocationCallbacks *pAllocator) {
  vkDestroyFence(device, fence, pAllocator);
    de80:	e9 5b 87 ff ff       	jmp    65e0 <vkDestroyFence@plt>
    de85:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    de8c:	00 00 00 
    de8f:	90                   	nop

000000000000de90 <_ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T>:
void DescriptorSetLayout::_initialize(VkDevice device) {
    de90:	55                   	push   %rbp
    de91:	48 89 f5             	mov    %rsi,%rbp
  if (vkCreateDescriptorSetLayout(device, &layoutInfo, nullptr, &_setLayout) !=
    de94:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
    de98:	31 d2                	xor    %edx,%edx
void DescriptorSetLayout::_initialize(VkDevice device) {
    de9a:	53                   	push   %rbx
    de9b:	48 89 fb             	mov    %rdi,%rbx
  if (vkCreateDescriptorSetLayout(device, &layoutInfo, nullptr, &_setLayout) !=
    de9e:	48 89 ef             	mov    %rbp,%rdi
void DescriptorSetLayout::_initialize(VkDevice device) {
    dea1:	48 83 ec 58          	sub    $0x58,%rsp
                                                          samplerLayoutBinding};
    dea5:	66 0f 6f 05 c3 99 02 	movdqa 0x299c3(%rip),%xmm0        # 37870 <_ZTSN3vkw10ImageViewsE+0x4a0>
    deac:	00 
  layoutInfo.pBindings = bindings.data();
    dead:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  if (vkCreateDescriptorSetLayout(device, &layoutInfo, nullptr, &_setLayout) !=
    deb2:	48 89 e6             	mov    %rsp,%rsi
                                                          samplerLayoutBinding};
    deb5:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
    debc:	00 00 
    debe:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
    dec3:	66 0f 6f 05 b5 99 02 	movdqa 0x299b5(%rip),%xmm0        # 37880 <_ZTSN3vkw10ImageViewsE+0x4b0>
    deca:	00 
    decb:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
    ded2:	00 00 
    ded4:	0f 11 44 24 38       	movups %xmm0,0x38(%rsp)
  VkDescriptorSetLayoutCreateInfo layoutInfo{};
    ded9:	66 0f ef c0          	pxor   %xmm0,%xmm0
  layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
    dedd:	c7 04 24 20 00 00 00 	movl   $0x20,(%rsp)
  layoutInfo.bindingCount = static_cast<uint32_t>(bindings.size());
    dee4:	c7 44 24 14 02 00 00 	movl   $0x2,0x14(%rsp)
    deeb:	00 
  layoutInfo.pBindings = bindings.data();
    deec:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  VkDescriptorSetLayoutCreateInfo layoutInfo{};
    def1:	0f 11 44 24 04       	movups %xmm0,0x4(%rsp)
  if (vkCreateDescriptorSetLayout(device, &layoutInfo, nullptr, &_setLayout) !=
    def6:	e8 95 8b ff ff       	call   6a90 <vkCreateDescriptorSetLayout@plt>
    defb:	85 c0                	test   %eax,%eax
    defd:	0f 85 01 99 ff ff    	jne    7804 <_ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T.cold>
  _device = device;
    df03:	48 89 6b 10          	mov    %rbp,0x10(%rbx)
  _isOwner = true;
    df07:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
}
    df0b:	48 83 c4 58          	add    $0x58,%rsp
    df0f:	5b                   	pop    %rbx
    df10:	5d                   	pop    %rbp
    df11:	c3                   	ret
    df12:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    df19:	00 00 00 
    df1c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000df20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    df20:	41 57                	push   %r15
    df22:	41 56                	push   %r14
    df24:	41 55                	push   %r13
    df26:	41 54                	push   %r12
    df28:	55                   	push   %rbp
    df29:	53                   	push   %rbx
    df2a:	48 83 ec 28          	sub    $0x28,%rsp
    df2e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
    df33:	48 85 ff             	test   %rdi,%rdi
    df36:	0f 84 1a 03 00 00    	je     e256 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x336>
      { return static_cast<_Link_type>(__x->_M_right); }
    df3c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    df41:	48 8b 40 18          	mov    0x18(%rax),%rax
    df45:	48 89 04 24          	mov    %rax,(%rsp)
      while (__x != 0)
    df49:	48 85 c0             	test   %rax,%rax
    df4c:	0f 84 af 02 00 00    	je     e201 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x2e1>
      { return static_cast<_Link_type>(__x->_M_right); }
    df52:	48 8b 04 24          	mov    (%rsp),%rax
    df56:	48 8b 40 18          	mov    0x18(%rax),%rax
    df5a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
      while (__x != 0)
    df5f:	48 85 c0             	test   %rax,%rax
    df62:	0f 84 46 02 00 00    	je     e1ae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28e>
      { return static_cast<_Link_type>(__x->_M_right); }
    df68:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    df6d:	4c 8b 78 18          	mov    0x18(%rax),%r15
      while (__x != 0)
    df71:	4d 85 ff             	test   %r15,%r15
    df74:	0f 84 de 01 00 00    	je     e158 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x238>
      { return static_cast<_Link_type>(__x->_M_right); }
    df7a:	49 8b 6f 18          	mov    0x18(%r15),%rbp
      while (__x != 0)
    df7e:	48 85 ed             	test   %rbp,%rbp
    df81:	0f 84 55 01 00 00    	je     e0dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1bc>
      { return static_cast<_Link_type>(__x->_M_right); }
    df87:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
      while (__x != 0)
    df8b:	48 85 db             	test   %rbx,%rbx
    df8e:	0f 84 ad 00 00 00    	je     e041 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x121>
      { return static_cast<_Link_type>(__x->_M_right); }
    df94:	4c 8b 63 18          	mov    0x18(%rbx),%r12
      while (__x != 0)
    df98:	4d 85 e4             	test   %r12,%r12
    df9b:	0f 84 ff 00 00 00    	je     e0a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x180>
      { return static_cast<_Link_type>(__x->_M_right); }
    dfa1:	4d 8b 74 24 18       	mov    0x18(%r12),%r14
      while (__x != 0)
    dfa6:	4d 85 f6             	test   %r14,%r14
    dfa9:	0f 84 69 01 00 00    	je     e118 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1f8>
      { return static_cast<_Link_type>(__x->_M_right); }
    dfaf:	49 8b 56 18          	mov    0x18(%r14),%rdx
      while (__x != 0)
    dfb3:	48 85 d2             	test   %rdx,%rdx
    dfb6:	74 4d                	je     e005 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xe5>
	{
	  _M_erase(_S_right(__x));
    dfb8:	48 8b 7a 18          	mov    0x18(%rdx),%rdi
    dfbc:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
    dfc1:	e8 5a ff ff ff       	call   df20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { return static_cast<_Link_type>(__x->_M_left); }
    dfc6:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
      { return _M_dataplus._M_p; }
    dfcb:	48 8b 7a 20          	mov    0x20(%rdx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    dfcf:	48 8d 4a 30          	lea    0x30(%rdx),%rcx
    dfd3:	4c 8b 6a 10          	mov    0x10(%rdx),%r13
	if (!_M_is_local())
    dfd7:	48 39 cf             	cmp    %rcx,%rdi
    dfda:	0f 84 99 00 00 00    	je     e079 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x159>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    dfe0:	48 8b 42 30          	mov    0x30(%rdx),%rax
    dfe4:	48 8d 70 01          	lea    0x1(%rax),%rsi
    dfe8:	e8 73 85 ff ff       	call   6560 <_ZdlPvm@plt>
    dfed:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    dff2:	be 48 00 00 00       	mov    $0x48,%esi
    dff7:	e8 64 85 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    dffc:	4d 85 ed             	test   %r13,%r13
    dfff:	0f 85 8a 00 00 00    	jne    e08f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x16f>
      { return _M_dataplus._M_p; }
    e005:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    e009:	49 8d 56 30          	lea    0x30(%r14),%rdx
      { return static_cast<_Link_type>(__x->_M_left); }
    e00d:	4d 8b 6e 10          	mov    0x10(%r14),%r13
	if (!_M_is_local())
    e011:	48 39 d7             	cmp    %rdx,%rdi
    e014:	74 0d                	je     e023 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x103>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e016:	49 8b 46 30          	mov    0x30(%r14),%rax
    e01a:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e01e:	e8 3d 85 ff ff       	call   6560 <_ZdlPvm@plt>
    e023:	be 48 00 00 00       	mov    $0x48,%esi
    e028:	4c 89 f7             	mov    %r14,%rdi
    e02b:	e8 30 85 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e030:	4d 85 ed             	test   %r13,%r13
    e033:	0f 84 df 00 00 00    	je     e118 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1f8>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
    e039:	4d 89 ee             	mov    %r13,%r14
    e03c:	e9 6e ff ff ff       	jmp    dfaf <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x8f>
      { return _M_dataplus._M_p; }
    e041:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    e045:	48 8d 45 30          	lea    0x30(%rbp),%rax
      { return static_cast<_Link_type>(__x->_M_left); }
    e049:	48 8b 5d 10          	mov    0x10(%rbp),%rbx
	if (!_M_is_local())
    e04d:	48 39 c7             	cmp    %rax,%rdi
    e050:	74 0d                	je     e05f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x13f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e052:	48 8b 45 30          	mov    0x30(%rbp),%rax
    e056:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e05a:	e8 01 85 ff ff       	call   6560 <_ZdlPvm@plt>
    e05f:	be 48 00 00 00       	mov    $0x48,%esi
    e064:	48 89 ef             	mov    %rbp,%rdi
    e067:	e8 f4 84 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e06c:	48 85 db             	test   %rbx,%rbx
    e06f:	74 6b                	je     e0dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1bc>
	  __x = __y;
    e071:	48 89 dd             	mov    %rbx,%rbp
    e074:	e9 0e ff ff ff       	jmp    df87 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x67>
    e079:	be 48 00 00 00       	mov    $0x48,%esi
    e07e:	48 89 d7             	mov    %rdx,%rdi
    e081:	e8 da 84 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e086:	4d 85 ed             	test   %r13,%r13
    e089:	0f 84 76 ff ff ff    	je     e005 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xe5>
	  __x = __y;
    e08f:	4c 89 ea             	mov    %r13,%rdx
    e092:	e9 21 ff ff ff       	jmp    dfb8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x98>
    e097:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    e09e:	00 00 
      { return _M_dataplus._M_p; }
    e0a0:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    e0a4:	48 8d 43 30          	lea    0x30(%rbx),%rax
      { return static_cast<_Link_type>(__x->_M_left); }
    e0a8:	4c 8b 63 10          	mov    0x10(%rbx),%r12
	if (!_M_is_local())
    e0ac:	48 39 c7             	cmp    %rax,%rdi
    e0af:	74 0d                	je     e0be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x19e>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e0b1:	48 8b 43 30          	mov    0x30(%rbx),%rax
    e0b5:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e0b9:	e8 a2 84 ff ff       	call   6560 <_ZdlPvm@plt>
    e0be:	be 48 00 00 00       	mov    $0x48,%esi
    e0c3:	48 89 df             	mov    %rbx,%rdi
    e0c6:	e8 95 84 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e0cb:	4d 85 e4             	test   %r12,%r12
    e0ce:	0f 84 6d ff ff ff    	je     e041 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x121>
	  __x = __y;
    e0d4:	4c 89 e3             	mov    %r12,%rbx
    e0d7:	e9 b8 fe ff ff       	jmp    df94 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x74>
      { return _M_dataplus._M_p; }
    e0dc:	49 8b 7f 20          	mov    0x20(%r15),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    e0e0:	49 8d 47 30          	lea    0x30(%r15),%rax
      { return static_cast<_Link_type>(__x->_M_left); }
    e0e4:	49 8b 5f 10          	mov    0x10(%r15),%rbx
	if (!_M_is_local())
    e0e8:	48 39 c7             	cmp    %rax,%rdi
    e0eb:	74 0d                	je     e0fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1da>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e0ed:	49 8b 47 30          	mov    0x30(%r15),%rax
    e0f1:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e0f5:	e8 66 84 ff ff       	call   6560 <_ZdlPvm@plt>
    e0fa:	be 48 00 00 00       	mov    $0x48,%esi
    e0ff:	4c 89 ff             	mov    %r15,%rdi
    e102:	e8 59 84 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e107:	48 85 db             	test   %rbx,%rbx
    e10a:	74 4c                	je     e158 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x238>
	  __x = __y;
    e10c:	49 89 df             	mov    %rbx,%r15
    e10f:	e9 66 fe ff ff       	jmp    df7a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x5a>
    e114:	0f 1f 40 00          	nopl   0x0(%rax)
      { return _M_dataplus._M_p; }
    e118:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    e11d:	49 8d 44 24 30       	lea    0x30(%r12),%rax
      { return static_cast<_Link_type>(__x->_M_left); }
    e122:	4d 8b 6c 24 10       	mov    0x10(%r12),%r13
	if (!_M_is_local())
    e127:	48 39 c7             	cmp    %rax,%rdi
    e12a:	74 0e                	je     e13a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x21a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e12c:	49 8b 44 24 30       	mov    0x30(%r12),%rax
    e131:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e135:	e8 26 84 ff ff       	call   6560 <_ZdlPvm@plt>
    e13a:	be 48 00 00 00       	mov    $0x48,%esi
    e13f:	4c 89 e7             	mov    %r12,%rdi
    e142:	e8 19 84 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e147:	4d 85 ed             	test   %r13,%r13
    e14a:	0f 84 50 ff ff ff    	je     e0a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x180>
	  __x = __y;
    e150:	4d 89 ec             	mov    %r13,%r12
    e153:	e9 49 fe ff ff       	jmp    dfa1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x81>
      { return static_cast<_Link_type>(__x->_M_left); }
    e158:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
      { return _M_dataplus._M_p; }
    e15d:	49 8b 7f 20          	mov    0x20(%r15),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    e161:	49 8d 47 30          	lea    0x30(%r15),%rax
    e165:	49 8b 5f 10          	mov    0x10(%r15),%rbx
	if (!_M_is_local())
    e169:	48 39 c7             	cmp    %rax,%rdi
    e16c:	74 2e                	je     e19c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x27c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e16e:	49 8b 47 30          	mov    0x30(%r15),%rax
    e172:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e176:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    e17b:	e8 e0 83 ff ff       	call   6560 <_ZdlPvm@plt>
    e180:	be 48 00 00 00       	mov    $0x48,%esi
    e185:	4c 89 ff             	mov    %r15,%rdi
    e188:	e8 d3 83 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e18d:	48 85 db             	test   %rbx,%rbx
    e190:	74 1c                	je     e1ae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28e>
	  __x = __y;
    e192:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
    e197:	e9 cc fd ff ff       	jmp    df68 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x48>
    e19c:	4c 89 ff             	mov    %r15,%rdi
    e19f:	be 48 00 00 00       	mov    $0x48,%esi
    e1a4:	e8 b7 83 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e1a9:	48 85 db             	test   %rbx,%rbx
    e1ac:	75 e4                	jne    e192 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x272>
      { return static_cast<_Link_type>(__x->_M_left); }
    e1ae:	4c 8b 3c 24          	mov    (%rsp),%r15
      { return _M_dataplus._M_p; }
    e1b2:	49 8b 7f 20          	mov    0x20(%r15),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    e1b6:	49 8d 47 30          	lea    0x30(%r15),%rax
    e1ba:	49 8b 5f 10          	mov    0x10(%r15),%rbx
	if (!_M_is_local())
    e1be:	48 39 c7             	cmp    %rax,%rdi
    e1c1:	74 2c                	je     e1ef <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x2cf>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e1c3:	49 8b 47 30          	mov    0x30(%r15),%rax
    e1c7:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e1cb:	48 89 04 24          	mov    %rax,(%rsp)
    e1cf:	e8 8c 83 ff ff       	call   6560 <_ZdlPvm@plt>
    e1d4:	be 48 00 00 00       	mov    $0x48,%esi
    e1d9:	4c 89 ff             	mov    %r15,%rdi
    e1dc:	e8 7f 83 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e1e1:	48 85 db             	test   %rbx,%rbx
    e1e4:	74 1b                	je     e201 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x2e1>
	  __x = __y;
    e1e6:	48 89 1c 24          	mov    %rbx,(%rsp)
    e1ea:	e9 63 fd ff ff       	jmp    df52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x32>
    e1ef:	4c 89 ff             	mov    %r15,%rdi
    e1f2:	be 48 00 00 00       	mov    $0x48,%esi
    e1f7:	e8 64 83 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e1fc:	48 85 db             	test   %rbx,%rbx
    e1ff:	75 e5                	jne    e1e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x2c6>
      { return static_cast<_Link_type>(__x->_M_left); }
    e201:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
      { return _M_dataplus._M_p; }
    e206:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    e20a:	49 8d 46 30          	lea    0x30(%r14),%rax
    e20e:	49 8b 5e 10          	mov    0x10(%r14),%rbx
	if (!_M_is_local())
    e212:	48 39 c7             	cmp    %rax,%rdi
    e215:	74 2d                	je     e244 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x324>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e217:	49 8b 46 30          	mov    0x30(%r14),%rax
    e21b:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e21f:	48 89 04 24          	mov    %rax,(%rsp)
    e223:	e8 38 83 ff ff       	call   6560 <_ZdlPvm@plt>
    e228:	be 48 00 00 00       	mov    $0x48,%esi
    e22d:	4c 89 f7             	mov    %r14,%rdi
    e230:	e8 2b 83 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e235:	48 85 db             	test   %rbx,%rbx
    e238:	74 1c                	je     e256 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x336>
	  __x = __y;
    e23a:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
    e23f:	e9 f8 fc ff ff       	jmp    df3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1c>
    e244:	4c 89 f7             	mov    %r14,%rdi
    e247:	be 48 00 00 00       	mov    $0x48,%esi
    e24c:	e8 0f 83 ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    e251:	48 85 db             	test   %rbx,%rbx
    e254:	75 e4                	jne    e23a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x31a>
	}
    }
    e256:	48 83 c4 28          	add    $0x28,%rsp
    e25a:	5b                   	pop    %rbx
    e25b:	5d                   	pop    %rbp
    e25c:	41 5c                	pop    %r12
    e25e:	41 5d                	pop    %r13
    e260:	41 5e                	pop    %r14
    e262:	41 5f                	pop    %r15
    e264:	c3                   	ret
    e265:	90                   	nop
    e266:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e26d:	00 00 00 

000000000000e270 <_ZN4rtvc6Device16_checkPropertiesEP18VkPhysicalDevice_T>:
bool Device::_checkProperties(VkPhysicalDevice physicalDevice) {
    e270:	48 81 ec 48 03 00 00 	sub    $0x348,%rsp
    e277:	48 89 f7             	mov    %rsi,%rdi
  vkGetPhysicalDeviceProperties(physicalDevice, &properties);
    e27a:	48 89 e6             	mov    %rsp,%rsi
    e27d:	e8 3e 7f ff ff       	call   61c0 <vkGetPhysicalDeviceProperties@plt>
  return properties.deviceType == VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU;
    e282:	83 7c 24 10 02       	cmpl   $0x2,0x10(%rsp)
    e287:	0f 94 c0             	sete   %al
}
    e28a:	48 81 c4 48 03 00 00 	add    $0x348,%rsp
    e291:	c3                   	ret
    e292:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    e299:	00 00 00 00 
    e29d:	0f 1f 00             	nopl   (%rax)

000000000000e2a0 <_ZN4rtvc6Device22_checkSwapchainSupportEP18VkPhysicalDevice_T>:
}
    e2a0:	b8 01 00 00 00       	mov    $0x1,%eax
    e2a5:	c3                   	ret
    e2a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e2ad:	00 00 00 

000000000000e2b0 <_ZN4rtvc6Device20_checkFeatureSupportEP18VkPhysicalDevice_T>:
bool Device::_checkFeatureSupport(VkPhysicalDevice physicalDevice) {
    e2b0:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  VkPhysicalDeviceFeatures supportedFeatures{};
    e2b7:	31 c0                	xor    %eax,%eax
    e2b9:	b9 1b 00 00 00       	mov    $0x1b,%ecx
bool Device::_checkFeatureSupport(VkPhysicalDevice physicalDevice) {
    e2be:	48 89 f2             	mov    %rsi,%rdx
  VkPhysicalDeviceFeatures supportedFeatures{};
    e2c1:	48 89 e7             	mov    %rsp,%rdi
  vkGetPhysicalDeviceFeatures(physicalDevice, &supportedFeatures);
    e2c4:	48 89 e6             	mov    %rsp,%rsi
  VkPhysicalDeviceFeatures supportedFeatures{};
    e2c7:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    e2ca:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  vkGetPhysicalDeviceFeatures(physicalDevice, &supportedFeatures);
    e2d0:	48 89 d7             	mov    %rdx,%rdi
    e2d3:	e8 e8 80 ff ff       	call   63c0 <vkGetPhysicalDeviceFeatures@plt>
  return supportedFeatures.samplerAnisotropy;
    e2d8:	8b 44 24 4c          	mov    0x4c(%rsp),%eax
    e2dc:	85 c0                	test   %eax,%eax
    e2de:	0f 95 c0             	setne  %al
}
    e2e1:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    e2e8:	c3                   	ret
    e2e9:	90                   	nop
    e2ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e2f0 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T>:
                           VkPhysicalDevice physicalDevice) {
    e2f0:	41 57                	push   %r15
    e2f2:	41 56                	push   %r14
    e2f4:	49 89 ce             	mov    %rcx,%r14
    e2f7:	41 55                	push   %r13
    e2f9:	49 89 fd             	mov    %rdi,%r13
  vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,
    e2fc:	48 89 cf             	mov    %rcx,%rdi
                           VkPhysicalDevice physicalDevice) {
    e2ff:	41 54                	push   %r12
    e301:	55                   	push   %rbp
    e302:	53                   	push   %rbx
    e303:	48 83 ec 28          	sub    $0x28,%rsp
  vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,
    e307:	48 8d 5c 24 18       	lea    0x18(%rsp),%rbx
                           VkPhysicalDevice physicalDevice) {
    e30c:	48 89 14 24          	mov    %rdx,(%rsp)
  vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,
    e310:	31 d2                	xor    %edx,%edx
    e312:	48 89 de             	mov    %rbx,%rsi
    e315:	e8 96 80 ff ff       	call   63b0 <vkGetPhysicalDeviceQueueFamilyProperties@plt>
      queueFamilyPropertyCount};
    e31a:	44 8b 7c 24 18       	mov    0x18(%rsp),%r15d
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    e31f:	4d 85 ff             	test   %r15,%r15
    e322:	0f 84 08 01 00 00    	je     e430 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0x140>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    e328:	4b 8d 34 7f          	lea    (%r15,%r15,2),%rsi
    e32c:	48 c1 e6 03          	shl    $0x3,%rsi
    e330:	48 89 f7             	mov    %rsi,%rdi
    e333:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    e338:	e8 03 82 ff ff       	call   6540 <_Znwm@plt>
    e33d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e341:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    e348:	00 
    e349:	48 89 c5             	mov    %rax,%rbp
    e34c:	4c 8d 60 18          	lea    0x18(%rax),%r12
    e350:	0f 11 00             	movups %xmm0,(%rax)
      if (__n <= 0)
    e353:	49 83 ff 01          	cmp    $0x1,%r15
    e357:	0f 84 e3 00 00 00    	je     e440 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0x150>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    e35d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    e362:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
      for (; __first != __last; ++__first)
    e366:	4c 89 e0             	mov    %r12,%rax
    e369:	4c 39 e1             	cmp    %r12,%rcx
    e36c:	74 21                	je     e38f <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0x9f>
    e36e:	66 90                	xchg   %ax,%ax
	*__first = __value;
    e370:	f3 0f 6f 4d 00       	movdqu 0x0(%rbp),%xmm1
      for (; __first != __last; ++__first)
    e375:	48 83 c0 18          	add    $0x18,%rax
	*__first = __value;
    e379:	0f 11 48 e8          	movups %xmm1,-0x18(%rax)
    e37d:	48 8b 55 10          	mov    0x10(%rbp),%rdx
    e381:	48 89 50 f8          	mov    %rdx,-0x8(%rax)
      for (; __first != __last; ++__first)
    e385:	48 39 c1             	cmp    %rax,%rcx
    e388:	75 e6                	jne    e370 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0x80>
    e38a:	4d 8d 64 34 e8       	lea    -0x18(%r12,%rsi,1),%r12
    e38f:	49 89 f7             	mov    %rsi,%r15
  vkGetPhysicalDeviceQueueFamilyProperties(
    e392:	48 89 ea             	mov    %rbp,%rdx
    e395:	48 89 de             	mov    %rbx,%rsi
    e398:	4c 89 f7             	mov    %r14,%rdi
    e39b:	e8 10 80 ff ff       	call   63b0 <vkGetPhysicalDeviceQueueFamilyProperties@plt>
  for (const auto &queueFamilyProperty : queueFamilyProperties) {
    e3a0:	49 39 ec             	cmp    %rbp,%r12
    e3a3:	0f 84 7f 00 00 00    	je     e428 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0x138>
    e3a9:	48 89 eb             	mov    %rbp,%rbx
    e3ac:	eb 0b                	jmp    e3b9 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0xc9>
    e3ae:	66 90                	xchg   %ax,%ax
    e3b0:	48 83 c3 18          	add    $0x18,%rbx
    e3b4:	49 39 dc             	cmp    %rbx,%r12
    e3b7:	74 6f                	je     e428 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0x138>
    if ((queueFamilyProperty.queueFlags & VK_QUEUE_COMPUTE_BIT) &&
    e3b9:	8b 03                	mov    (%rbx),%eax
    e3bb:	83 e0 03             	and    $0x3,%eax
    e3be:	83 f8 03             	cmp    $0x3,%eax
    e3c1:	75 ed                	jne    e3b0 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0xc0>
      vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, index, surface,
    e3c3:	48 8b 14 24          	mov    (%rsp),%rdx
    e3c7:	48 8d 4c 24 1c       	lea    0x1c(%rsp),%rcx
    e3cc:	31 f6                	xor    %esi,%esi
    e3ce:	4c 89 f7             	mov    %r14,%rdi
      VkBool32 presentSupported = false;
    e3d1:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
    e3d8:	00 
      vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, index, surface,
    e3d9:	e8 e2 81 ff ff       	call   65c0 <vkGetPhysicalDeviceSurfaceSupportKHR@plt>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
    e3de:	48 8b 0b             	mov    (%rbx),%rcx
    e3e1:	48 8b 53 08          	mov    0x8(%rbx),%rdx
	    : _M_value(std::forward<_Args>(__args)...)
    e3e5:	41 c7 45 00 00 00 00 	movl   $0x0,0x0(%r13)
    e3ec:	00 
    e3ed:	48 8b 43 10          	mov    0x10(%rbx),%rax
	  _M_engaged(true)
    e3f1:	41 c6 45 1c 01       	movb   $0x1,0x1c(%r13)
	    : _M_value(std::forward<_Args>(__args)...)
    e3f6:	49 89 4d 04          	mov    %rcx,0x4(%r13)
    e3fa:	49 89 55 0c          	mov    %rdx,0xc(%r13)
    e3fe:	49 89 45 14          	mov    %rax,0x14(%r13)
	if (__p)
    e402:	48 85 ed             	test   %rbp,%rbp
    e405:	74 0b                	je     e412 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0x122>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    e407:	4c 89 fe             	mov    %r15,%rsi
    e40a:	48 89 ef             	mov    %rbp,%rdi
    e40d:	e8 4e 81 ff ff       	call   6560 <_ZdlPvm@plt>
}
    e412:	48 83 c4 28          	add    $0x28,%rsp
    e416:	4c 89 e8             	mov    %r13,%rax
    e419:	5b                   	pop    %rbx
    e41a:	5d                   	pop    %rbp
    e41b:	41 5c                	pop    %r12
    e41d:	41 5d                	pop    %r13
    e41f:	41 5e                	pop    %r14
    e421:	41 5f                	pop    %r15
    e423:	c3                   	ret
    e424:	0f 1f 40 00          	nopl   0x0(%rax)
      _Optional_payload_base() = default;
    e428:	41 c6 45 1c 00       	movb   $0x0,0x1c(%r13)
      constexpr optional() noexcept { }
    e42d:	eb d3                	jmp    e402 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0x112>
    e42f:	90                   	nop
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    e430:	31 ed                	xor    %ebp,%ebp
    e432:	45 31 e4             	xor    %r12d,%r12d
    e435:	e9 58 ff ff ff       	jmp    e392 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0xa2>
    e43a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  vkGetPhysicalDeviceQueueFamilyProperties(
    e440:	48 89 c2             	mov    %rax,%rdx
    e443:	48 89 de             	mov    %rbx,%rsi
    e446:	4c 89 f7             	mov    %r14,%rdi
    e449:	e8 62 7f ff ff       	call   63b0 <vkGetPhysicalDeviceQueueFamilyProperties@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    e44e:	41 bf 18 00 00 00    	mov    $0x18,%r15d
    e454:	e9 50 ff ff ff       	jmp    e3a9 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T+0xb9>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    e459:	48 89 c3             	mov    %rax,%rbx
    e45c:	e9 f9 93 ff ff       	jmp    785a <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T.cold>
    e461:	48 89 c3             	mov    %rax,%rbx
    e464:	e9 06 94 ff ff       	jmp    786f <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T.cold+0x15>
    e469:	90                   	nop
    e46a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000e470 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE>:
    const std::vector<const char *> &requiredExtensions) {
    e470:	41 57                	push   %r15
  if (vkEnumerateDeviceExtensionProperties(
    e472:	31 c9                	xor    %ecx,%ecx
    const std::vector<const char *> &requiredExtensions) {
    e474:	41 56                	push   %r14
    e476:	41 55                	push   %r13
    e478:	41 54                	push   %r12
    e47a:	55                   	push   %rbp
    e47b:	53                   	push   %rbx
    e47c:	48 89 f3             	mov    %rsi,%rbx
  if (vkEnumerateDeviceExtensionProperties(
    e47f:	31 f6                	xor    %esi,%esi
    e481:	48 89 df             	mov    %rbx,%rdi
    const std::vector<const char *> &requiredExtensions) {
    e484:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  if (vkEnumerateDeviceExtensionProperties(
    e48b:	48 8d 6c 24 54       	lea    0x54(%rsp),%rbp
    const std::vector<const char *> &requiredExtensions) {
    e490:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  if (vkEnumerateDeviceExtensionProperties(
    e495:	48 89 ea             	mov    %rbp,%rdx
    e498:	e8 23 83 ff ff       	call   67c0 <vkEnumerateDeviceExtensionProperties@plt>
    e49d:	85 c0                	test   %eax,%eax
    e49f:	0f 85 d5 93 ff ff    	jne    787a <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold>
  std::vector<VkExtensionProperties> availableExtensions{propertyCount};
    e4a5:	44 8b 7c 24 54       	mov    0x54(%rsp),%r15d
    e4aa:	4c 89 7c 24 40       	mov    %r15,0x40(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    e4af:	4d 85 ff             	test   %r15,%r15
    e4b2:	0f 84 6e 08 00 00    	je     ed26 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x8b6>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    e4b8:	4d 89 fc             	mov    %r15,%r12
    e4bb:	49 c1 e4 06          	shl    $0x6,%r12
    e4bf:	4d 01 fc             	add    %r15,%r12
    e4c2:	49 c1 e4 02          	shl    $0x2,%r12
    e4c6:	4c 89 e7             	mov    %r12,%rdi
    e4c9:	e8 72 80 ff ff       	call   6540 <_Znwm@plt>
    e4ce:	48 8d 78 08          	lea    0x8(%rax),%rdi
    e4d2:	48 89 c1             	mov    %rax,%rcx
    e4d5:	49 89 c1             	mov    %rax,%r9
    e4d8:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    e4dd:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    e4e1:	4a 8d 34 20          	lea    (%rax,%r12,1),%rsi
    e4e5:	48 8d 90 0c 01 00 00 	lea    0x10c(%rax),%rdx
    e4ec:	48 29 f9             	sub    %rdi,%rcx
    e4ef:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
    e4f4:	4d 8d 81 04 01 00 00 	lea    0x104(%r9),%r8
    e4fb:	81 c1 04 01 00 00    	add    $0x104,%ecx
    e501:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    e508:	31 c0                	xor    %eax,%eax
    e50a:	c1 e9 03             	shr    $0x3,%ecx
    e50d:	48 c7 42 f0 00 00 00 	movq   $0x0,-0x10(%rdx)
    e514:	00 
    e515:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    e518:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
      if (__n <= 0)
    e51d:	49 83 ff 01          	cmp    $0x1,%r15
    e521:	0f 84 1f 08 00 00    	je     ed46 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x8d6>
      for (; __first != __last; ++__first)
    e527:	49 39 f0             	cmp    %rsi,%r8
    e52a:	74 45                	je     e571 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x101>
    e52c:	49 89 f2             	mov    %rsi,%r10
    e52f:	90                   	nop
	*__first = __value;
    e530:	49 8b 01             	mov    (%r9),%rax
    e533:	49 8d 78 08          	lea    0x8(%r8),%rdi
    e537:	4c 89 ce             	mov    %r9,%rsi
    e53a:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    e53e:	49 89 00             	mov    %rax,(%r8)
    e541:	48 8b 42 f0          	mov    -0x10(%rdx),%rax
    e545:	49 89 80 fc 00 00 00 	mov    %rax,0xfc(%r8)
    e54c:	4c 89 c0             	mov    %r8,%rax
      for (; __first != __last; ++__first)
    e54f:	49 81 c0 04 01 00 00 	add    $0x104,%r8
	*__first = __value;
    e556:	48 29 f8             	sub    %rdi,%rax
    e559:	8d 88 04 01 00 00    	lea    0x104(%rax),%ecx
    e55f:	48 29 c6             	sub    %rax,%rsi
    e562:	89 c8                	mov    %ecx,%eax
    e564:	c1 e8 03             	shr    $0x3,%eax
    e567:	89 c1                	mov    %eax,%ecx
    e569:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      for (; __first != __last; ++__first)
    e56c:	4d 39 d0             	cmp    %r10,%r8
    e56f:	75 bf                	jne    e530 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0xc0>
    e571:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    e576:	4c 89 64 24 40       	mov    %r12,0x40(%rsp)
    e57b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  if (vkEnumerateDeviceExtensionProperties(
    e580:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
    e585:	48 89 ea             	mov    %rbp,%rdx
    e588:	31 f6                	xor    %esi,%esi
    e58a:	48 89 df             	mov    %rbx,%rdi
    e58d:	e8 2e 82 ff ff       	call   67c0 <vkEnumerateDeviceExtensionProperties@plt>
    e592:	85 c0                	test   %eax,%eax
    e594:	0f 85 12 93 ff ff    	jne    78ac <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0x32>
      _M_header._M_left = &_M_header;
    e59a:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
    e5a1:	00 
      _M_header._M_color = _S_red;
    e5a2:	c7 84 24 98 00 00 00 	movl   $0x0,0x98(%rsp)
    e5a9:	00 00 00 00 
      _M_header._M_left = &_M_header;
    e5ad:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    e5b2:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
    e5b9:	00 
      _M_header._M_right = &_M_header;
    e5ba:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
    e5c1:	00 
  for (const auto &availableExtension : availableExtensions) {
    e5c2:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
      _M_header._M_parent = 0;
    e5c7:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
    e5ce:	00 00 00 00 00 
      _M_node_count = 0;
    e5d3:	48 c7 84 24 b8 00 00 	movq   $0x0,0xb8(%rsp)
    e5da:	00 00 00 00 00 
    e5df:	48 39 44 24 20       	cmp    %rax,0x20(%rsp)
    e5e4:	0f 84 8b 06 00 00    	je     ec75 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x805>
	: allocator_type(__a), _M_p(__dat) { }
    e5ea:	48 8d 8c 24 80 00 00 	lea    0x80(%rsp),%rcx
    e5f1:	00 
    e5f2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e5f7:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
	if (__s == 0)
    e5fc:	48 85 c0             	test   %rax,%rax
    e5ff:	0f 84 77 07 00 00    	je     ed7c <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x90c>
    e605:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    e60a:	bd 00 00 00 80       	mov    $0x80000000,%ebp
    e60f:	90                   	nop
    e610:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    e615:	e8 06 7c ff ff       	call   6220 <strlen@plt>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    e61a:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    e61f:	48 89 c3             	mov    %rax,%rbx
	if (__dnew > size_type(_S_local_capacity))
    e622:	48 83 f8 0f          	cmp    $0xf,%rax
    e626:	0f 87 04 06 00 00    	ja     ec30 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x7c0>
	if (__n == 1)
    e62c:	48 83 f8 01          	cmp    $0x1,%rax
    e630:	0f 84 da 05 00 00    	je     ec10 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x7a0>
	if (__n == 0)
    e636:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    e63b:	48 85 c0             	test   %rax,%rax
    e63e:	0f 85 d2 06 00 00    	jne    ed16 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x8a6>
      { _M_string_length = __length; }
    e644:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
	__c1 = __c2;
    e649:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
    e64d:	4c 8b ac 24 a0 00 00 	mov    0xa0(%rsp),%r13
    e654:	00 
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
    e655:	4d 85 ed             	test   %r13,%r13
    e658:	0f 84 9a 06 00 00    	je     ecf8 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x888>
    e65e:	4c 8b 64 24 70       	mov    0x70(%rsp),%r12
    e663:	4c 8b 74 24 78       	mov    0x78(%rsp),%r14
    e668:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
    e66d:	eb 0a                	jmp    e679 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x209>
    e66f:	90                   	nop
      { return static_cast<_Link_type>(__x->_M_right); }
    e670:	4d 8b 6d 18          	mov    0x18(%r13),%r13
      while (__x != 0)
    e674:	4d 85 ed             	test   %r13,%r13
    e677:	74 4c                	je     e6c5 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x255>
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    e679:	49 8b 5d 28          	mov    0x28(%r13),%rbx
      compare(const basic_string& __str) const
    e67d:	4c 89 f2             	mov    %r14,%rdx
    e680:	49 8b 7d 20          	mov    0x20(%r13),%rdi
    e684:	4c 39 f3             	cmp    %r14,%rbx
    e687:	48 0f 46 d3          	cmovbe %rbx,%rdx
	if (__n == 0)
    e68b:	48 85 d2             	test   %rdx,%rdx
    e68e:	74 0c                	je     e69c <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x22c>
	return __builtin_memcmp(__s1, __s2, __n);
    e690:	4c 89 e6             	mov    %r12,%rsi
    e693:	e8 98 7b ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    e698:	85 c0                	test   %eax,%eax
    e69a:	75 19                	jne    e6b5 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x245>
	const difference_type __d = difference_type(__n1 - __n2);
    e69c:	4c 29 f3             	sub    %r14,%rbx
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    e69f:	48 39 eb             	cmp    %rbp,%rbx
    e6a2:	7d 15                	jge    e6b9 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x249>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    e6a4:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
    e6ab:	ff ff ff 
    e6ae:	48 39 c3             	cmp    %rax,%rbx
    e6b1:	7e bd                	jle    e670 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x200>
	  return int(__d);
    e6b3:	89 d8                	mov    %ebx,%eax
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
    e6b5:	85 c0                	test   %eax,%eax
    e6b7:	78 b7                	js     e670 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x200>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
    e6b9:	4d 89 ef             	mov    %r13,%r15
	  __y = __x, __x = _S_left(__x);
    e6bc:	4d 8b 6d 10          	mov    0x10(%r13),%r13
      while (__x != 0)
    e6c0:	4d 85 ed             	test   %r13,%r13
    e6c3:	75 b4                	jne    e679 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x209>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
    e6c5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    e6ca:	49 39 c7             	cmp    %rax,%r15
    e6cd:	74 44                	je     e713 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x2a3>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    e6cf:	49 8b 5f 28          	mov    0x28(%r15),%rbx
      compare(const basic_string& __str) const
    e6d3:	4c 89 f2             	mov    %r14,%rdx
    e6d6:	49 8b 77 20          	mov    0x20(%r15),%rsi
    e6da:	4c 39 f3             	cmp    %r14,%rbx
    e6dd:	48 0f 46 d3          	cmovbe %rbx,%rdx
	if (__n == 0)
    e6e1:	48 85 d2             	test   %rdx,%rdx
    e6e4:	74 0c                	je     e6f2 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x282>
	return __builtin_memcmp(__s1, __s2, __n);
    e6e6:	4c 89 e7             	mov    %r12,%rdi
    e6e9:	e8 42 7b ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    e6ee:	85 c0                	test   %eax,%eax
    e6f0:	75 1d                	jne    e70f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x29f>
	const difference_type __d = difference_type(__n1 - __n2);
    e6f2:	4d 89 f0             	mov    %r14,%r8
    e6f5:	49 29 d8             	sub    %rbx,%r8
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    e6f8:	49 39 e8             	cmp    %rbp,%r8
    e6fb:	7d 49                	jge    e746 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x2d6>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    e6fd:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
    e704:	ff ff ff 
    e707:	49 39 c0             	cmp    %rax,%r8
    e70a:	7e 07                	jle    e713 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x2a3>
	  return int(__d);
    e70c:	44 89 c0             	mov    %r8d,%eax
    e70f:	85 c0                	test   %eax,%eax
    e711:	79 33                	jns    e746 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x2d6>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    e713:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
    e718:	48 8d 4c 24 58       	lea    0x58(%rsp),%rcx
    e71d:	4c 89 fe             	mov    %r15,%rsi
    e720:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
    e727:	00 
    e728:	4c 8d 44 24 51       	lea    0x51(%rsp),%r8
    e72d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    e732:	48 8d 15 0e 92 02 00 	lea    0x2920e(%rip),%rdx        # 37947 <_ZSt19piecewise_construct>
    e739:	e8 32 10 00 00       	call   f770 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
      { return _M_dataplus._M_p; }
    e73e:	4c 8b 64 24 70       	mov    0x70(%rsp),%r12
    e743:	49 89 c7             	mov    %rax,%r15
	if (!_M_is_local())
    e746:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    helper[availableExtension.extensionName]++;
    e74b:	41 83 47 40 01       	addl   $0x1,0x40(%r15)
    e750:	49 39 c4             	cmp    %rax,%r12
    e753:	74 3b                	je     e790 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x320>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e755:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    e75c:	00 
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    e75d:	4c 89 e7             	mov    %r12,%rdi
    e760:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e764:	e8 f7 7d ff ff       	call   6560 <_ZdlPvm@plt>
  for (const auto &availableExtension : availableExtensions) {
    e769:	48 81 44 24 10 04 01 	addq   $0x104,0x10(%rsp)
    e770:	00 00 
    e772:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    e777:	48 39 44 24 20       	cmp    %rax,0x20(%rsp)
    e77c:	74 27                	je     e7a5 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x335>
	: allocator_type(__a), _M_p(__dat) { }
    e77e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    e783:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    e788:	e9 83 fe ff ff       	jmp    e610 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x1a0>
    e78d:	0f 1f 00             	nopl   (%rax)
    e790:	48 81 44 24 10 04 01 	addq   $0x104,0x10(%rsp)
    e797:	00 00 
    e799:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    e79e:	48 39 44 24 20       	cmp    %rax,0x20(%rsp)
    e7a3:	75 d9                	jne    e77e <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x30e>
    e7a5:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    e7aa:	4c 8b 30             	mov    (%rax),%r14
    e7ad:	48 8b 40 08          	mov    0x8(%rax),%rax
    e7b1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  for (const auto &requiredExtension : requiredExtensions) {
    e7b6:	49 39 c6             	cmp    %rax,%r14
    e7b9:	0f 84 95 05 00 00    	je     ed54 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x8e4>
    e7bf:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
    e7c4:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    e7c9:	bb 00 00 00 80       	mov    $0x80000000,%ebx
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    e7ce:	48 bd ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rbp
    e7d5:	ff ff ff 
    e7d8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    e7dd:	0f 1f 00             	nopl   (%rax)
    helper[requiredExtension]++;
    e7e0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    e7e5:	4c 8b 38             	mov    (%rax),%r15
	: allocator_type(__a), _M_p(__dat) { }
    e7e8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    e7ed:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
	if (__s == 0)
    e7f2:	4d 85 ff             	test   %r15,%r15
    e7f5:	0f 84 8d 05 00 00    	je     ed88 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x918>
	return __builtin_strlen(__s);
    e7fb:	4c 89 ff             	mov    %r15,%rdi
    e7fe:	e8 1d 7a ff ff       	call   6220 <strlen@plt>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    e803:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    e808:	49 89 c5             	mov    %rax,%r13
	if (__dnew > size_type(_S_local_capacity))
    e80b:	48 83 f8 0f          	cmp    $0xf,%rax
    e80f:	0f 87 bb 03 00 00    	ja     ebd0 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x760>
	if (__n == 1)
    e815:	48 83 f8 01          	cmp    $0x1,%rax
    e819:	0f 84 61 03 00 00    	je     eb80 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x710>
	if (__n == 0)
    e81f:	48 85 c0             	test   %rax,%rax
    e822:	0f 85 e4 04 00 00    	jne    ed0c <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x89c>
      { return _M_dataplus._M_p; }
    e828:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
      { _M_string_length = __length; }
    e82d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
	__c1 = __c2;
    e832:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
    e836:	4c 8b a4 24 a0 00 00 	mov    0xa0(%rsp),%r12
    e83d:	00 
      while (__x != 0)
    e83e:	4d 85 e4             	test   %r12,%r12
    e841:	0f 84 a1 04 00 00    	je     ece8 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x878>
    e847:	4c 8b 74 24 78       	mov    0x78(%rsp),%r14
    e84c:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
    e851:	4c 89 e0             	mov    %r12,%rax
    e854:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
    e859:	4d 89 f4             	mov    %r14,%r12
    e85c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    e861:	49 89 c6             	mov    %rax,%r14
    e864:	eb 13                	jmp    e879 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x409>
    e866:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e86d:	00 00 00 
      { return static_cast<_Link_type>(__x->_M_right); }
    e870:	4d 8b 76 18          	mov    0x18(%r14),%r14
      while (__x != 0)
    e874:	4d 85 f6             	test   %r14,%r14
    e877:	74 45                	je     e8be <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x44e>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    e879:	4d 8b 6e 28          	mov    0x28(%r14),%r13
      compare(const basic_string& __str) const
    e87d:	4c 89 e2             	mov    %r12,%rdx
    e880:	49 8b 7e 20          	mov    0x20(%r14),%rdi
    e884:	4d 39 e5             	cmp    %r12,%r13
    e887:	49 0f 46 d5          	cmovbe %r13,%rdx
	if (__n == 0)
    e88b:	48 85 d2             	test   %rdx,%rdx
    e88e:	74 0e                	je     e89e <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x42e>
	return __builtin_memcmp(__s1, __s2, __n);
    e890:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    e895:	e8 96 79 ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    e89a:	85 c0                	test   %eax,%eax
    e89c:	75 10                	jne    e8ae <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x43e>
	const difference_type __d = difference_type(__n1 - __n2);
    e89e:	4d 29 e5             	sub    %r12,%r13
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    e8a1:	49 39 dd             	cmp    %rbx,%r13
    e8a4:	7d 0c                	jge    e8b2 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x442>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    e8a6:	49 39 ed             	cmp    %rbp,%r13
    e8a9:	7e c5                	jle    e870 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x400>
	  return int(__d);
    e8ab:	44 89 e8             	mov    %r13d,%eax
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
    e8ae:	85 c0                	test   %eax,%eax
    e8b0:	78 be                	js     e870 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x400>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
    e8b2:	4d 89 f7             	mov    %r14,%r15
	  __y = __x, __x = _S_left(__x);
    e8b5:	4d 8b 76 10          	mov    0x10(%r14),%r14
      while (__x != 0)
    e8b9:	4d 85 f6             	test   %r14,%r14
    e8bc:	75 bb                	jne    e879 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x409>
	if (__i == end() || key_comp()(__k, (*__i).first))
    e8be:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    e8c3:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    e8c8:	4d 89 e6             	mov    %r12,%r14
    e8cb:	49 39 c7             	cmp    %rax,%r15
    e8ce:	74 3f                	je     e90f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x49f>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    e8d0:	4d 8b 6f 28          	mov    0x28(%r15),%r13
      compare(const basic_string& __str) const
    e8d4:	4c 89 e2             	mov    %r12,%rdx
    e8d7:	49 8b 77 20          	mov    0x20(%r15),%rsi
    e8db:	4d 39 e5             	cmp    %r12,%r13
    e8de:	49 0f 46 d5          	cmovbe %r13,%rdx
	if (__n == 0)
    e8e2:	48 85 d2             	test   %rdx,%rdx
    e8e5:	74 11                	je     e8f8 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x488>
	return __builtin_memcmp(__s1, __s2, __n);
    e8e7:	48 89 cf             	mov    %rcx,%rdi
    e8ea:	e8 41 79 ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    e8ef:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    e8f4:	85 c0                	test   %eax,%eax
    e8f6:	75 13                	jne    e90b <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x49b>
	const difference_type __d = difference_type(__n1 - __n2);
    e8f8:	4d 89 f0             	mov    %r14,%r8
    e8fb:	4d 29 e8             	sub    %r13,%r8
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    e8fe:	49 39 d8             	cmp    %rbx,%r8
    e901:	7d 3f                	jge    e942 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x4d2>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    e903:	49 39 e8             	cmp    %rbp,%r8
    e906:	7e 07                	jle    e90f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x49f>
	  return int(__d);
    e908:	44 89 c0             	mov    %r8d,%eax
    e90b:	85 c0                	test   %eax,%eax
    e90d:	79 33                	jns    e942 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x4d2>
    e90f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
    e914:	48 8d 4c 24 60       	lea    0x60(%rsp),%rcx
    e919:	4c 89 fe             	mov    %r15,%rsi
    e91c:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
    e923:	00 
    e924:	4c 8d 44 24 52       	lea    0x52(%rsp),%r8
    e929:	48 8d 15 17 90 02 00 	lea    0x29017(%rip),%rdx        # 37947 <_ZSt19piecewise_construct>
    e930:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    e935:	e8 36 0e 00 00       	call   f770 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
      { return _M_dataplus._M_p; }
    e93a:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
    e93f:	49 89 c7             	mov    %rax,%r15
	if (!_M_is_local())
    e942:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    e947:	41 83 47 40 01       	addl   $0x1,0x40(%r15)
    e94c:	48 39 c1             	cmp    %rax,%rcx
    e94f:	74 14                	je     e965 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x4f5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    e951:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    e958:	00 
    e959:	48 89 cf             	mov    %rcx,%rdi
    e95c:	48 8d 70 01          	lea    0x1(%rax),%rsi
    e960:	e8 fb 7b ff ff       	call   6560 <_ZdlPvm@plt>
    if (helper[requiredExtension] < 2) {
    e965:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    e96a:	4c 8b 38             	mov    (%rax),%r15
	: allocator_type(__a), _M_p(__dat) { }
    e96d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    e972:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
	if (__s == 0)
    e977:	4d 85 ff             	test   %r15,%r15
    e97a:	0f 84 f0 03 00 00    	je     ed70 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x900>
	return __builtin_strlen(__s);
    e980:	4c 89 ff             	mov    %r15,%rdi
    e983:	e8 98 78 ff ff       	call   6220 <strlen@plt>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    e988:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    e98d:	49 89 c5             	mov    %rax,%r13
	if (__dnew > size_type(_S_local_capacity))
    e990:	48 83 f8 0f          	cmp    $0xf,%rax
    e994:	0f 87 f6 01 00 00    	ja     eb90 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x720>
	if (__n == 1)
    e99a:	48 83 f8 01          	cmp    $0x1,%rax
    e99e:	0f 84 c4 01 00 00    	je     eb68 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x6f8>
	if (__n == 0)
    e9a4:	48 85 c0             	test   %rax,%rax
    e9a7:	0f 85 55 03 00 00    	jne    ed02 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x892>
      { return _M_dataplus._M_p; }
    e9ad:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
      { _M_string_length = __length; }
    e9b2:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
	__c1 = __c2;
    e9b7:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
    e9bb:	4c 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%r14
    e9c2:	00 
      while (__x != 0)
    e9c3:	4d 85 f6             	test   %r14,%r14
    e9c6:	0f 84 0c 03 00 00    	je     ecd8 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x868>
    e9cc:	4c 8b 64 24 78       	mov    0x78(%rsp),%r12
    e9d1:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
    e9d6:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
    e9db:	4c 89 e0             	mov    %r12,%rax
    e9de:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    e9e3:	4d 89 f4             	mov    %r14,%r12
    e9e6:	49 89 c6             	mov    %rax,%r14
    e9e9:	eb 0f                	jmp    e9fa <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x58a>
    e9eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      { return static_cast<_Link_type>(__x->_M_right); }
    e9f0:	4d 8b 64 24 18       	mov    0x18(%r12),%r12
      while (__x != 0)
    e9f5:	4d 85 e4             	test   %r12,%r12
    e9f8:	74 48                	je     ea42 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x5d2>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    e9fa:	4d 8b 6c 24 28       	mov    0x28(%r12),%r13
      compare(const basic_string& __str) const
    e9ff:	4c 89 f2             	mov    %r14,%rdx
    ea02:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
    ea07:	4d 39 f5             	cmp    %r14,%r13
    ea0a:	49 0f 46 d5          	cmovbe %r13,%rdx
	if (__n == 0)
    ea0e:	48 85 d2             	test   %rdx,%rdx
    ea11:	74 0e                	je     ea21 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x5b1>
	return __builtin_memcmp(__s1, __s2, __n);
    ea13:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    ea18:	e8 13 78 ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    ea1d:	85 c0                	test   %eax,%eax
    ea1f:	75 10                	jne    ea31 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x5c1>
	const difference_type __d = difference_type(__n1 - __n2);
    ea21:	4d 29 f5             	sub    %r14,%r13
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    ea24:	49 39 dd             	cmp    %rbx,%r13
    ea27:	7d 0c                	jge    ea35 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x5c5>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    ea29:	49 39 ed             	cmp    %rbp,%r13
    ea2c:	7e c2                	jle    e9f0 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x580>
	  return int(__d);
    ea2e:	44 89 e8             	mov    %r13d,%eax
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
    ea31:	85 c0                	test   %eax,%eax
    ea33:	78 bb                	js     e9f0 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x580>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
    ea35:	4d 89 e7             	mov    %r12,%r15
	  __y = __x, __x = _S_left(__x);
    ea38:	4d 8b 64 24 10       	mov    0x10(%r12),%r12
      while (__x != 0)
    ea3d:	4d 85 e4             	test   %r12,%r12
    ea40:	75 b8                	jne    e9fa <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x58a>
	if (__i == end() || key_comp()(__k, (*__i).first))
    ea42:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    ea47:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    ea4c:	4d 89 f4             	mov    %r14,%r12
    ea4f:	49 39 c7             	cmp    %rax,%r15
    ea52:	74 3f                	je     ea93 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x623>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ea54:	4d 8b 6f 28          	mov    0x28(%r15),%r13
      compare(const basic_string& __str) const
    ea58:	4c 89 f2             	mov    %r14,%rdx
    ea5b:	49 8b 77 20          	mov    0x20(%r15),%rsi
    ea5f:	4d 39 f5             	cmp    %r14,%r13
    ea62:	49 0f 46 d5          	cmovbe %r13,%rdx
	if (__n == 0)
    ea66:	48 85 d2             	test   %rdx,%rdx
    ea69:	74 11                	je     ea7c <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x60c>
	return __builtin_memcmp(__s1, __s2, __n);
    ea6b:	48 89 cf             	mov    %rcx,%rdi
    ea6e:	e8 bd 77 ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    ea73:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    ea78:	85 c0                	test   %eax,%eax
    ea7a:	75 13                	jne    ea8f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x61f>
	const difference_type __d = difference_type(__n1 - __n2);
    ea7c:	4d 89 e0             	mov    %r12,%r8
    ea7f:	4d 29 e8             	sub    %r13,%r8
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    ea82:	49 39 d8             	cmp    %rbx,%r8
    ea85:	7d 3f                	jge    eac6 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x656>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    ea87:	49 39 e8             	cmp    %rbp,%r8
    ea8a:	7e 07                	jle    ea93 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x623>
	  return int(__d);
    ea8c:	44 89 c0             	mov    %r8d,%eax
    ea8f:	85 c0                	test   %eax,%eax
    ea91:	79 33                	jns    eac6 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x656>
    ea93:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
    ea98:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
    ea9d:	4c 89 fe             	mov    %r15,%rsi
    eaa0:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
    eaa7:	00 
    eaa8:	4c 8d 44 24 53       	lea    0x53(%rsp),%r8
    eaad:	48 8d 15 93 8e 02 00 	lea    0x28e93(%rip),%rdx        # 37947 <_ZSt19piecewise_construct>
    eab4:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    eab9:	e8 b2 0c 00 00       	call   f770 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
      { return _M_dataplus._M_p; }
    eabe:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
    eac3:	49 89 c7             	mov    %rax,%r15
	if (!_M_is_local())
    eac6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    eacb:	45 8b 6f 40          	mov    0x40(%r15),%r13d
    eacf:	48 39 c1             	cmp    %rax,%rcx
    ead2:	74 14                	je     eae8 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x678>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    ead4:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    eadb:	00 
    eadc:	48 89 cf             	mov    %rcx,%rdi
    eadf:	48 8d 70 01          	lea    0x1(%rax),%rsi
    eae3:	e8 78 7a ff ff       	call   6560 <_ZdlPvm@plt>
    eae8:	41 83 fd 01          	cmp    $0x1,%r13d
    eaec:	0f 86 2c 02 00 00    	jbe    ed1e <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x8ae>
  for (const auto &requiredExtension : requiredExtensions) {
    eaf2:	48 83 44 24 20 08    	addq   $0x8,0x20(%rsp)
    eaf8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    eafd:	48 39 44 24 30       	cmp    %rax,0x30(%rsp)
    eb02:	0f 85 d8 fc ff ff    	jne    e7e0 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x370>
  return true;
    eb08:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
    eb0e:	48 8b 9c 24 a0 00 00 	mov    0xa0(%rsp),%rbx
    eb15:	00 
      while (__x != 0)
    eb16:	48 85 db             	test   %rbx,%rbx
    eb19:	0f 84 89 01 00 00    	je     eca8 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x838>
	  _M_erase(_S_right(__x));
    eb1f:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    eb23:	e8 f8 f3 ff ff       	call   df20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { return _M_dataplus._M_p; }
    eb28:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    eb2c:	48 8d 43 30          	lea    0x30(%rbx),%rax
      { return static_cast<_Link_type>(__x->_M_left); }
    eb30:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
	if (!_M_is_local())
    eb34:	48 39 c7             	cmp    %rax,%rdi
    eb37:	74 0d                	je     eb46 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x6d6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    eb39:	48 8b 43 30          	mov    0x30(%rbx),%rax
    eb3d:	48 8d 70 01          	lea    0x1(%rax),%rsi
    eb41:	e8 1a 7a ff ff       	call   6560 <_ZdlPvm@plt>
    eb46:	be 48 00 00 00       	mov    $0x48,%esi
    eb4b:	48 89 df             	mov    %rbx,%rdi
    eb4e:	e8 0d 7a ff ff       	call   6560 <_ZdlPvm@plt>
      while (__x != 0)
    eb53:	48 85 ed             	test   %rbp,%rbp
    eb56:	0f 84 4c 01 00 00    	je     eca8 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x838>
	  __x = __y;
    eb5c:	48 89 eb             	mov    %rbp,%rbx
    eb5f:	eb be                	jmp    eb1f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x6af>
    eb61:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	__c1 = __c2;
    eb68:	41 0f b6 17          	movzbl (%r15),%edx
    eb6c:	88 94 24 80 00 00 00 	mov    %dl,0x80(%rsp)
      }
    eb73:	e9 35 fe ff ff       	jmp    e9ad <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x53d>
    eb78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    eb7f:	00 
	__c1 = __c2;
    eb80:	41 0f b6 17          	movzbl (%r15),%edx
    eb84:	88 94 24 80 00 00 00 	mov    %dl,0x80(%rsp)
      }
    eb8b:	e9 98 fc ff ff       	jmp    e828 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x3b8>
	    _M_data(_M_create(__dnew, size_type(0)));
    eb90:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    eb95:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
    eb9a:	31 d2                	xor    %edx,%edx
    eb9c:	e8 df 7e ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    eba1:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    eba6:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    eba9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
    ebae:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    ebb5:	00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    ebb6:	4c 89 ea             	mov    %r13,%rdx
    ebb9:	4c 89 fe             	mov    %r15,%rsi
    ebbc:	e8 4f 78 ff ff       	call   6410 <memcpy@plt>
	_M_set_length(__dnew);
    ebc1:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
      { return _M_dataplus._M_p; }
    ebc6:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
    ebcb:	e9 e2 fd ff ff       	jmp    e9b2 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x542>
	    _M_data(_M_create(__dnew, size_type(0)));
    ebd0:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    ebd5:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
    ebda:	31 d2                	xor    %edx,%edx
    ebdc:	e8 9f 7e ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    ebe1:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    ebe6:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    ebe9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
    ebee:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    ebf5:	00 
    ebf6:	4c 89 ea             	mov    %r13,%rdx
    ebf9:	4c 89 fe             	mov    %r15,%rsi
    ebfc:	e8 0f 78 ff ff       	call   6410 <memcpy@plt>
	_M_set_length(__dnew);
    ec01:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
      { return _M_dataplus._M_p; }
    ec06:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
    ec0b:	e9 1d fc ff ff       	jmp    e82d <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x3bd>
	__c1 = __c2;
    ec10:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    ec15:	0f b6 11             	movzbl (%rcx),%edx
    ec18:	88 94 24 80 00 00 00 	mov    %dl,0x80(%rsp)
    ec1f:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
      }
    ec24:	e9 1b fa ff ff       	jmp    e644 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x1d4>
    ec29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	    _M_data(_M_create(__dnew, size_type(0)));
    ec30:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
    ec35:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
    ec3a:	31 d2                	xor    %edx,%edx
    ec3c:	48 89 c7             	mov    %rax,%rdi
    ec3f:	e8 3c 7e ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
    ec44:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    ec49:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
    ec4c:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
    ec51:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    ec58:	00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    ec59:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    ec5e:	48 89 da             	mov    %rbx,%rdx
    ec61:	e8 aa 77 ff ff       	call   6410 <memcpy@plt>
	_M_set_length(__dnew);
    ec66:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
      { return _M_dataplus._M_p; }
    ec6b:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
    ec70:	e9 cf f9 ff ff       	jmp    e644 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x1d4>
    ec75:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    ec7a:	48 8d 8c 24 80 00 00 	lea    0x80(%rsp),%rcx
    ec81:	00 
    ec82:	41 bc 01 00 00 00    	mov    $0x1,%r12d
    ec88:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ec8d:	4c 8b 30             	mov    (%rax),%r14
    ec90:	48 8b 40 08          	mov    0x8(%rax),%rax
    ec94:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  for (const auto &requiredExtension : requiredExtensions) {
    ec99:	49 39 c6             	cmp    %rax,%r14
    ec9c:	0f 85 1d fb ff ff    	jne    e7bf <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x34f>
    eca2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	if (__p)
    eca8:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
    ecae:	74 0f                	je     ecbf <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x84f>
    ecb0:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    ecb5:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    ecba:	e8 a1 78 ff ff       	call   6560 <_ZdlPvm@plt>
}
    ecbf:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    ecc6:	44 89 e0             	mov    %r12d,%eax
    ecc9:	5b                   	pop    %rbx
    ecca:	5d                   	pop    %rbp
    eccb:	41 5c                	pop    %r12
    eccd:	41 5d                	pop    %r13
    eccf:	41 5e                	pop    %r14
    ecd1:	41 5f                	pop    %r15
    ecd3:	c3                   	ret
    ecd4:	0f 1f 40 00          	nopl   0x0(%rax)
      while (__x != 0)
    ecd8:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
    ecdd:	e9 b1 fd ff ff       	jmp    ea93 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x623>
    ece2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    ece8:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
    eced:	e9 1d fc ff ff       	jmp    e90f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x49f>
    ecf2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    ecf8:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
    ecfd:	e9 11 fa ff ff       	jmp    e713 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x2a3>
    ed02:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    ed07:	e9 aa fe ff ff       	jmp    ebb6 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x746>
    ed0c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    ed11:	e9 e0 fe ff ff       	jmp    ebf6 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x786>
    ed16:	48 89 d7             	mov    %rdx,%rdi
    ed19:	e9 3b ff ff ff       	jmp    ec59 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x7e9>
      return false;
    ed1e:	45 31 e4             	xor    %r12d,%r12d
    ed21:	e9 e8 fd ff ff       	jmp    eb0e <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x69e>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    ed26:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
    ed2d:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ed2f:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
    ed36:	00 00 
    ed38:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    ed3f:	00 00 
    ed41:	e9 3a f8 ff ff       	jmp    e580 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x110>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    ed46:	48 c7 44 24 40 04 01 	movq   $0x104,0x40(%rsp)
    ed4d:	00 00 
    ed4f:	e9 2c f8 ff ff       	jmp    e580 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x110>
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
    ed54:	48 8b 9c 24 a0 00 00 	mov    0xa0(%rsp),%rbx
    ed5b:	00 
  return true;
    ed5c:	41 bc 01 00 00 00    	mov    $0x1,%r12d
      while (__x != 0)
    ed62:	48 85 db             	test   %rbx,%rbx
    ed65:	0f 85 b4 fd ff ff    	jne    eb1f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x6af>
    ed6b:	e9 40 ff ff ff       	jmp    ecb0 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE+0x840>
	  std::__throw_logic_error(__N("basic_string: "
    ed70:	48 8d 3d f9 82 02 00 	lea    0x282f9(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    ed77:	e8 04 76 ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    ed7c:	48 8d 3d ed 82 02 00 	lea    0x282ed(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    ed83:	e8 f8 75 ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
    ed88:	48 8d 3d e1 82 02 00 	lea    0x282e1(%rip),%rdi        # 37070 <_IO_stdin_used+0x70>
    ed8f:	e8 ec 75 ff ff       	call   6380 <_ZSt19__throw_logic_errorPKc@plt>
      { _M_erase(_M_begin()); }
    ed94:	48 89 c3             	mov    %rax,%rbx
    ed97:	e9 77 8b ff ff       	jmp    7913 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0x99>
    ed9c:	e9 87 8b ff ff       	jmp    7928 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xae>
      { return _M_dataplus._M_p; }
    eda1:	48 89 c3             	mov    %rax,%rbx
    eda4:	e9 d5 8b ff ff       	jmp    797e <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0x104>
    eda9:	48 89 c3             	mov    %rax,%rbx
    edac:	e9 ed 8b ff ff       	jmp    799e <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0x124>
    edb1:	48 89 c3             	mov    %rax,%rbx
    edb4:	e9 96 8b ff ff       	jmp    794f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xd5>
    edb9:	48 89 c3             	mov    %rax,%rbx
    edbc:	e9 ae 8b ff ff       	jmp    796f <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0xf5>
    edc1:	48 89 c3             	mov    %rax,%rbx
    edc4:	e9 28 8b ff ff       	jmp    78f1 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE.cold+0x77>
    edc9:	90                   	nop
    edca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000edd0 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T>:
void Device::_initialize(VkInstance instance, VkSurfaceKHR surface) {
    edd0:	41 57                	push   %r15
    edd2:	41 56                	push   %r14
    edd4:	41 55                	push   %r13
    edd6:	41 54                	push   %r12
    edd8:	49 89 fc             	mov    %rdi,%r12
    eddb:	55                   	push   %rbp
    eddc:	53                   	push   %rbx
    eddd:	48 89 f3             	mov    %rsi,%rbx
    ede0:	48 81 ec b8 05 00 00 	sub    $0x5b8,%rsp
    ede7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
      VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME};
    edec:	0f b6 05 e5 29 03 00 	movzbl 0x329e5(%rip),%eax        # 417d8 <_ZGVZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions>
    edf3:	84 c0                	test   %al,%al
    edf5:	75 17                	jne    ee0e <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x3e>
    edf7:	48 8d 2d da 29 03 00 	lea    0x329da(%rip),%rbp        # 417d8 <_ZGVZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions>
    edfe:	48 89 ef             	mov    %rbp,%rdi
    ee01:	e8 9a 7c ff ff       	call   6aa0 <__cxa_guard_acquire@plt>
    ee06:	85 c0                	test   %eax,%eax
    ee08:	0f 85 62 03 00 00    	jne    f170 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x3a0>
      "VK_LAYER_KHRONOS_validation", "VK_LAYER_MANGOHUD_overlay"};
    ee0e:	0f b6 05 9b 29 03 00 	movzbl 0x3299b(%rip),%eax        # 417b0 <_ZGVZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers>
    ee15:	84 c0                	test   %al,%al
    ee17:	0f 84 bb 02 00 00    	je     f0d8 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x308>
  vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, nullptr);
    ee1d:	4c 8d 74 24 28       	lea    0x28(%rsp),%r14
    ee22:	31 d2                	xor    %edx,%edx
    ee24:	48 89 df             	mov    %rbx,%rdi
    ee27:	4c 89 f6             	mov    %r14,%rsi
    ee2a:	e8 61 74 ff ff       	call   6290 <vkEnumeratePhysicalDevices@plt>
  if (physicalDeviceCount == 0) {
    ee2f:	8b 54 24 28          	mov    0x28(%rsp),%edx
    ee33:	85 d2                	test   %edx,%edx
    ee35:	0f 84 98 8c ff ff    	je     7ad3 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0x109>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    ee3b:	4c 8d 3c d5 00 00 00 	lea    0x0(,%rdx,8),%r15
    ee42:	00 
    ee43:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    ee48:	4c 89 ff             	mov    %r15,%rdi
    ee4b:	e8 f0 76 ff ff       	call   6540 <_Znwm@plt>
      if (__n <= 0)
    ee50:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    ee55:	48 8d 78 08          	lea    0x8(%rax),%rdi
    ee59:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    ee60:	49 89 c5             	mov    %rax,%r13
	return __first;
    ee63:	48 89 fd             	mov    %rdi,%rbp
      if (__n <= 0)
    ee66:	48 83 fa 01          	cmp    $0x1,%rdx
    ee6a:	74 14                	je     ee80 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0xb0>
    ee6c:	4a 8d 2c 38          	lea    (%rax,%r15,1),%rbp
      for (; __first != __last; ++__first)
    ee70:	48 39 fd             	cmp    %rdi,%rbp
    ee73:	74 0b                	je     ee80 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0xb0>
	*__first = __tmp;
    ee75:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
    ee79:	31 f6                	xor    %esi,%esi
    ee7b:	e8 20 74 ff ff       	call   62a0 <memset@plt>
  if (vkEnumeratePhysicalDevices(instance, &physicalDeviceCount,
    ee80:	4c 89 ea             	mov    %r13,%rdx
    ee83:	4c 89 f6             	mov    %r14,%rsi
    ee86:	48 89 df             	mov    %rbx,%rdi
    ee89:	e8 02 74 ff ff       	call   6290 <vkEnumeratePhysicalDevices@plt>
    ee8e:	85 c0                	test   %eax,%eax
    ee90:	0f 85 34 8b ff ff    	jne    79ca <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold>
  for (const auto &physicalDevice : physicalDevices) {
    ee96:	49 39 ed             	cmp    %rbp,%r13
    ee99:	0f 84 d5 8b ff ff    	je     7a74 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0xaa>
      selectedQueueFamily;
    ee9f:	c6 44 24 17 00       	movb   $0x0,0x17(%rsp)
    eea4:	4c 89 eb             	mov    %r13,%rbx
    eea7:	4c 8d b4 24 70 02 00 	lea    0x270(%rsp),%r14
    eeae:	00 
    eeaf:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
    eeb6:	00 
  VkPhysicalDevice selectedPhysicalDeivce = VK_NULL_HANDLE;
    eeb7:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
    eebe:	00 00 
    eec0:	eb 13                	jmp    eed5 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x105>
    eec2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  for (const auto &physicalDevice : physicalDevices) {
    eec8:	48 83 c3 08          	add    $0x8,%rbx
    eecc:	48 39 dd             	cmp    %rbx,%rbp
    eecf:	0f 84 a3 00 00 00    	je     ef78 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x1a8>
  vkGetPhysicalDeviceProperties(physicalDevice, &properties);
    eed5:	48 8b 3b             	mov    (%rbx),%rdi
    eed8:	4c 89 f6             	mov    %r14,%rsi
    eedb:	e8 e0 72 ff ff       	call   61c0 <vkGetPhysicalDeviceProperties@plt>
        _checkSwapchainSupport(physicalDevice) &&
    eee0:	83 bc 24 80 02 00 00 	cmpl   $0x2,0x280(%rsp)
    eee7:	02 
    eee8:	75 de                	jne    eec8 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0xf8>
        _checkExtensionSupport(physicalDevice, requiredExtensions) &&
    eeea:	48 8b 33             	mov    (%rbx),%rsi
    eeed:	48 8d 15 ec 28 03 00 	lea    0x328ec(%rip),%rdx        # 417e0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions>
    eef4:	4c 89 e7             	mov    %r12,%rdi
    eef7:	e8 74 f5 ff ff       	call   e470 <_ZN4rtvc6Device22_checkExtensionSupportEP18VkPhysicalDevice_TRKSt6vectorIPKcSaIS5_EE>
    if (_checkProperties(physicalDevice) &&
    eefc:	84 c0                	test   %al,%al
    eefe:	74 c8                	je     eec8 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0xf8>
  VkPhysicalDeviceFeatures supportedFeatures{};
    ef00:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
    ef07:	00 
    ef08:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    ef0d:	31 c0                	xor    %eax,%eax
    ef0f:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  vkGetPhysicalDeviceFeatures(physicalDevice, &supportedFeatures);
    ef12:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
    ef19:	00 
  VkPhysicalDeviceFeatures supportedFeatures{};
    ef1a:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  vkGetPhysicalDeviceFeatures(physicalDevice, &supportedFeatures);
    ef20:	48 8b 3b             	mov    (%rbx),%rdi
    ef23:	e8 98 74 ff ff       	call   63c0 <vkGetPhysicalDeviceFeatures@plt>
        _checkSwapchainSupport(physicalDevice) &&
    ef28:	8b 84 24 dc 01 00 00 	mov    0x1dc(%rsp),%eax
    ef2f:	85 c0                	test   %eax,%eax
    ef31:	74 95                	je     eec8 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0xf8>
              _selectQueueFamily(surface, physicalDevice);
    ef33:	48 8b 0b             	mov    (%rbx),%rcx
    ef36:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    ef3b:	4c 89 e6             	mov    %r12,%rsi
    ef3e:	4c 89 f7             	mov    %r14,%rdi
    ef41:	e8 aa f3 ff ff       	call   e2f0 <_ZN4rtvc6Device18_selectQueueFamilyEP14VkSurfaceKHR_TP18VkPhysicalDevice_T>
      if (auto returnedQueueFamily =
    ef46:	80 bc 24 8c 02 00 00 	cmpb   $0x0,0x28c(%rsp)
    ef4d:	00 
              _selectQueueFamily(surface, physicalDevice);
    ef4e:	8b 84 24 70 02 00 00 	mov    0x270(%rsp),%eax
      if (auto returnedQueueFamily =
    ef55:	0f 84 6d ff ff ff    	je     eec8 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0xf8>
        selectedPhysicalDeivce = physicalDevice;
    ef5b:	48 8b 0b             	mov    (%rbx),%rcx
    ef5e:	89 44 24 10          	mov    %eax,0x10(%rsp)
    ef62:	c6 44 24 17 01       	movb   $0x1,0x17(%rsp)
    ef67:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ef6c:	e9 57 ff ff ff       	jmp    eec8 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0xf8>
    ef71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  if (selectedPhysicalDeivce == VK_NULL_HANDLE) {
    ef78:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
    ef7e:	0f 84 82 02 00 00    	je     f206 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x436>
      }

      constexpr _Tp&
      value()&
      {
	if (this->_M_is_engaged())
    ef84:	80 7c 24 17 00       	cmpb   $0x0,0x17(%rsp)
    ef89:	0f 84 bb 8a ff ff    	je     7a4a <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0x80>
  queueInfo.queueFamilyIndex = selectedIndex;
    ef8f:	8b 44 24 10          	mov    0x10(%rsp),%eax
  VkDeviceQueueCreateInfo queueInfo{};
    ef93:	66 0f ef c0          	pxor   %xmm0,%xmm0
  VkPhysicalDeviceFeatures deviceFeatures{};
    ef97:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
    ef9e:	00 
    ef9f:	b9 1b 00 00 00       	mov    $0x1b,%ecx
  VkDeviceQueueCreateInfo queueInfo{};
    efa4:	0f 11 44 24 34       	movups %xmm0,0x34(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    efa9:	48 8b 15 30 28 03 00 	mov    0x32830(%rip),%rdx        # 417e0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions>
  vkCreateDevice(selectedPhysicalDeivce, &deviceCreateInfo, nullptr, &_device);
    efb0:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  VkDeviceQueueCreateInfo queueInfo{};
    efb5:	0f 11 44 24 40       	movups %xmm0,0x40(%rsp)
  queueInfo.queueFamilyIndex = selectedIndex;
    efba:	89 44 24 44          	mov    %eax,0x44(%rsp)
  queueInfo.pQueuePriorities = &queuePriority;
    efbe:	48 8d 44 24 2c       	lea    0x2c(%rsp),%rax
    efc3:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  VkPhysicalDeviceFeatures deviceFeatures{};
    efc8:	31 c0                	xor    %eax,%eax
    efca:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  deviceCreateInfo.pQueueCreateInfos = &queueInfo;
    efcd:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  VkDeviceCreateInfo deviceCreateInfo{};
    efd2:	0f 11 84 24 84 00 00 	movups %xmm0,0x84(%rsp)
    efd9:	00 
  vkCreateDevice(selectedPhysicalDeivce, &deviceCreateInfo, nullptr, &_device);
    efda:	49 8d 4c 24 08       	lea    0x8(%r12),%rcx
  deviceCreateInfo.pQueueCreateInfos = &queueInfo;
    efdf:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    efe4:	48 8b 05 fd 27 03 00 	mov    0x327fd(%rip),%rax        # 417e8 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions+0x8>
  deviceCreateInfo.ppEnabledExtensionNames = requiredExtensions.data();
    efeb:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
    eff2:	00 
    eff3:	48 29 d0             	sub    %rdx,%rax
    eff6:	48 8b 15 c3 27 03 00 	mov    0x327c3(%rip),%rdx        # 417c0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers>
  const float queuePriority = 1.0f;
    effd:	c7 44 24 2c 00 00 80 	movl   $0x3f800000,0x2c(%rsp)
    f004:	3f 
    f005:	48 c1 f8 03          	sar    $0x3,%rax
  VkDeviceCreateInfo deviceCreateInfo{};
    f009:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
  deviceCreateInfo.enabledExtensionCount =
    f00e:	89 84 24 90 00 00 00 	mov    %eax,0x90(%rsp)
  deviceCreateInfo.pEnabledFeatures = &deviceFeatures;
    f015:	48 8d 84 24 b0 00 00 	lea    0xb0(%rsp),%rax
    f01c:	00 
    f01d:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
    f024:	00 
    f025:	48 8b 05 9c 27 03 00 	mov    0x3279c(%rip),%rax        # 417c8 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers+0x8>
  VkPhysicalDeviceFeatures deviceFeatures{};
    f02c:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  vkCreateDevice(selectedPhysicalDeivce, &deviceCreateInfo, nullptr, &_device);
    f032:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    f037:	48 29 d0             	sub    %rdx,%rax
  deviceCreateInfo.ppEnabledLayerNames = instanceLayers.data();
    f03a:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
    f041:	00 
  vkCreateDevice(selectedPhysicalDeivce, &deviceCreateInfo, nullptr, &_device);
    f042:	31 d2                	xor    %edx,%edx
    f044:	48 c1 f8 03          	sar    $0x3,%rax
  queueInfo.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
    f048:	c7 44 24 30 02 00 00 	movl   $0x2,0x30(%rsp)
    f04f:	00 
  queueInfo.queueCount = 1;
    f050:	c7 44 24 48 01 00 00 	movl   $0x1,0x48(%rsp)
    f057:	00 
  deviceFeatures.samplerAnisotropy = VK_TRUE;
    f058:	c7 84 24 fc 00 00 00 	movl   $0x1,0xfc(%rsp)
    f05f:	01 00 00 00 
  VkDeviceCreateInfo deviceCreateInfo{};
    f063:	c7 84 24 94 00 00 00 	movl   $0x0,0x94(%rsp)
    f06a:	00 00 00 00 
  deviceCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
    f06e:	c7 44 24 60 03 00 00 	movl   $0x3,0x60(%rsp)
    f075:	00 
  deviceCreateInfo.queueCreateInfoCount = 1;
    f076:	c7 44 24 74 01 00 00 	movl   $0x1,0x74(%rsp)
    f07d:	00 
  deviceCreateInfo.enabledLayerCount =
    f07e:	89 84 24 80 00 00 00 	mov    %eax,0x80(%rsp)
  vkCreateDevice(selectedPhysicalDeivce, &deviceCreateInfo, nullptr, &_device);
    f085:	e8 d6 77 ff ff       	call   6860 <vkCreateDevice@plt>
  _physicalDevice = selectedPhysicalDeivce;
    f08a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  vkGetDeviceQueue(_device, selectedIndex, 0, &_queue.ref);
    f08f:	8b 5c 24 10          	mov    0x10(%rsp),%ebx
    f093:	49 8d 4c 24 18       	lea    0x18(%r12),%rcx
    f098:	31 d2                	xor    %edx,%edx
    f09a:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  _physicalDevice = selectedPhysicalDeivce;
    f09f:	49 89 44 24 10       	mov    %rax,0x10(%r12)
  vkGetDeviceQueue(_device, selectedIndex, 0, &_queue.ref);
    f0a4:	89 de                	mov    %ebx,%esi
    f0a6:	e8 c5 76 ff ff       	call   6770 <vkGetDeviceQueue@plt>
  _queue.familyIndex = selectedIndex;
    f0ab:	41 89 5c 24 20       	mov    %ebx,0x20(%r12)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    f0b0:	4c 89 fe             	mov    %r15,%rsi
    f0b3:	4c 89 ef             	mov    %r13,%rdi
  _isOwner = true;
    f0b6:	41 c6 44 24 30 01    	movb   $0x1,0x30(%r12)
    f0bc:	e8 9f 74 ff ff       	call   6560 <_ZdlPvm@plt>
}
    f0c1:	48 81 c4 b8 05 00 00 	add    $0x5b8,%rsp
    f0c8:	5b                   	pop    %rbx
    f0c9:	5d                   	pop    %rbp
    f0ca:	41 5c                	pop    %r12
    f0cc:	41 5d                	pop    %r13
    f0ce:	41 5e                	pop    %r14
    f0d0:	41 5f                	pop    %r15
    f0d2:	c3                   	ret
    f0d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      "VK_LAYER_KHRONOS_validation", "VK_LAYER_MANGOHUD_overlay"};
    f0d8:	48 8d 2d d1 26 03 00 	lea    0x326d1(%rip),%rbp        # 417b0 <_ZGVZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers>
    f0df:	48 89 ef             	mov    %rbp,%rdi
    f0e2:	e8 b9 79 ff ff       	call   6aa0 <__cxa_guard_acquire@plt>
    f0e7:	85 c0                	test   %eax,%eax
    f0e9:	0f 84 2e fd ff ff    	je     ee1d <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x4d>
	: _M_start(), _M_finish(), _M_end_of_storage()
    f0ef:	66 0f ef c0          	pxor   %xmm0,%xmm0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    f0f3:	bf 10 00 00 00       	mov    $0x10,%edi
    f0f8:	48 c7 05 cd 26 03 00 	movq   $0x0,0x326cd(%rip)        # 417d0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers+0x10>
    f0ff:	00 00 00 00 
    f103:	0f 29 05 b6 26 03 00 	movaps %xmm0,0x326b6(%rip)        # 417c0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers>
    f10a:	e8 31 74 ff ff       	call   6540 <_Znwm@plt>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    f10f:	48 8d 0d e7 87 02 00 	lea    0x287e7(%rip),%rcx        # 378fd <_ZTSN3vkw10ImageViewsE+0x52d>
    f116:	48 8d 35 c1 83 02 00 	lea    0x283c1(%rip),%rsi        # 374de <_ZTSN3vkw10ImageViewsE+0x10e>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    f11d:	48 89 05 9c 26 03 00 	mov    %rax,0x3269c(%rip)        # 417c0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers>
    f124:	66 48 0f 6e d1       	movq   %rcx,%xmm2
    f129:	66 48 0f 6e c6       	movq   %rsi,%xmm0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    f12e:	48 8d 50 10          	lea    0x10(%rax),%rdx
    f132:	66 0f 6c c2          	punpcklqdq %xmm2,%xmm0
    f136:	48 89 15 93 26 03 00 	mov    %rdx,0x32693(%rip)        # 417d0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers+0x10>
    f13d:	48 8d 35 7c 26 03 00 	lea    0x3267c(%rip),%rsi        # 417c0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers>
    f144:	48 8d 3d 45 01 00 00 	lea    0x145(%rip),%rdi        # f290 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
	  this->_M_impl._M_finish =
    f14b:	48 89 15 76 26 03 00 	mov    %rdx,0x32676(%rip)        # 417c8 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers+0x8>
    f152:	48 8d 15 2f 24 03 00 	lea    0x3242f(%rip),%rdx        # 41588 <__dso_handle>
    f159:	0f 11 00             	movups %xmm0,(%rax)
    f15c:	e8 1f 73 ff ff       	call   6480 <__cxa_atexit@plt>
    f161:	48 89 ef             	mov    %rbp,%rdi
    f164:	e8 b7 71 ff ff       	call   6320 <__cxa_guard_release@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    f169:	e9 af fc ff ff       	jmp    ee1d <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x4d>
    f16e:	66 90                	xchg   %ax,%ax
	: _M_start(), _M_finish(), _M_end_of_storage()
    f170:	66 0f ef c0          	pxor   %xmm0,%xmm0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    f174:	bf 10 00 00 00       	mov    $0x10,%edi
    f179:	48 c7 05 6c 26 03 00 	movq   $0x0,0x3266c(%rip)        # 417f0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions+0x10>
    f180:	00 00 00 00 
    f184:	0f 29 05 55 26 03 00 	movaps %xmm0,0x32655(%rip)        # 417e0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions>
    f18b:	e8 b0 73 ff ff       	call   6540 <_Znwm@plt>
    f190:	48 8d 0d 11 87 02 00 	lea    0x28711(%rip),%rcx        # 378a8 <_ZTSN3vkw10ImageViewsE+0x4d8>
    f197:	48 8d 35 4e 87 02 00 	lea    0x2874e(%rip),%rsi        # 378ec <_ZTSN3vkw10ImageViewsE+0x51c>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    f19e:	48 89 05 3b 26 03 00 	mov    %rax,0x3263b(%rip)        # 417e0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions>
    f1a5:	66 48 0f 6e c9       	movq   %rcx,%xmm1
    f1aa:	66 48 0f 6e c6       	movq   %rsi,%xmm0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    f1af:	48 8d 50 10          	lea    0x10(%rax),%rdx
    f1b3:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
    f1b7:	48 89 15 32 26 03 00 	mov    %rdx,0x32632(%rip)        # 417f0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions+0x10>
      VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME};
    f1be:	48 8d 35 1b 26 03 00 	lea    0x3261b(%rip),%rsi        # 417e0 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions>
    f1c5:	48 8d 3d c4 00 00 00 	lea    0xc4(%rip),%rdi        # f290 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
	  this->_M_impl._M_finish =
    f1cc:	48 89 15 15 26 03 00 	mov    %rdx,0x32615(%rip)        # 417e8 <_ZZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE18requiredExtensions+0x8>
    f1d3:	48 8d 15 ae 23 03 00 	lea    0x323ae(%rip),%rdx        # 41588 <__dso_handle>
    f1da:	0f 11 00             	movups %xmm0,(%rax)
    f1dd:	e8 9e 72 ff ff       	call   6480 <__cxa_atexit@plt>
    f1e2:	48 89 ef             	mov    %rbp,%rdi
    f1e5:	e8 36 71 ff ff       	call   6320 <__cxa_guard_release@plt>
      "VK_LAYER_KHRONOS_validation", "VK_LAYER_MANGOHUD_overlay"};
    f1ea:	0f b6 05 bf 25 03 00 	movzbl 0x325bf(%rip),%eax        # 417b0 <_ZGVZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_TE14instanceLayers>
    f1f1:	84 c0                	test   %al,%al
    f1f3:	0f 85 24 fc ff ff    	jne    ee1d <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x4d>
    f1f9:	e9 da fe ff ff       	jmp    f0d8 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T+0x308>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    f1fe:	48 89 c3             	mov    %rax,%rbx
    f201:	e9 f6 87 ff ff       	jmp    79fc <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0x32>
    f206:	e9 69 88 ff ff       	jmp    7a74 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0xaa>
    f20b:	48 89 c3             	mov    %rax,%rbx
    f20e:	e9 95 88 ff ff       	jmp    7aa8 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0xde>
    f213:	e9 0f 88 ff ff       	jmp    7a27 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T.cold+0x5d>
    f218:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    f21f:	00 

000000000000f220 <_ZN4rtvc6DeviceC1ERKNS_8InstanceERKN3vkw7SurfaceE>:
Device::Device(const Instance &instance, const vkw::Surface &surface) {
    f220:	55                   	push   %rbp
    f221:	48 8d 05 b8 14 03 00 	lea    0x314b8(%rip),%rax        # 406e0 <_ZTVN4rtvc6DeviceE+0x10>
  Device() = default;
    f228:	66 0f ef c0          	pxor   %xmm0,%xmm0
    f22c:	53                   	push   %rbx
    f22d:	48 89 fb             	mov    %rdi,%rbx
    f230:	48 83 ec 08          	sub    $0x8,%rsp
    f234:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    f23b:	00 
  _initialize(instance.ref(), surface.ref());
    f23c:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    f240:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    f247:	00 
    f248:	48 8b 76 08          	mov    0x8(%rsi),%rsi
    f24c:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
    f253:	00 
    f254:	c6 47 30 00          	movb   $0x0,0x30(%rdi)
Device::Device(const Instance &instance, const vkw::Surface &surface) {
    f258:	48 89 07             	mov    %rax,(%rdi)
    f25b:	0f 11 47 18          	movups %xmm0,0x18(%rdi)
  _initialize(instance.ref(), surface.ref());
    f25f:	e8 6c fb ff ff       	call   edd0 <_ZN4rtvc6Device11_initializeEP12VkInstance_TP14VkSurfaceKHR_T>
}
    f264:	48 83 c4 08          	add    $0x8,%rsp
    f268:	5b                   	pop    %rbx
    f269:	5d                   	pop    %rbp
    f26a:	c3                   	ret
  virtual ~Device() { _destroyVkData(); }
    f26b:	48 89 c5             	mov    %rax,%rbp
    f26e:	e9 a5 88 ff ff       	jmp    7b18 <_ZN4rtvc6DeviceC2ERKNS_8InstanceERKN3vkw7SurfaceE.cold>
    f273:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f27a:	00 00 00 
    f27d:	0f 1f 00             	nopl   (%rax)

000000000000f280 <_ZNKSt19bad_optional_access4whatEv>:
    { return "bad optional access"; }
    f280:	48 8d 05 09 86 02 00 	lea    0x28609(%rip),%rax        # 37890 <_ZTSN3vkw10ImageViewsE+0x4c0>
    f287:	c3                   	ret
    f288:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    f28f:	00 

000000000000f290 <_ZNSt6vectorIPKcSaIS1_EED1Ev>:
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    f290:	48 8b 07             	mov    (%rdi),%rax
	if (__p)
    f293:	48 85 c0             	test   %rax,%rax
    f296:	74 18                	je     f2b0 <_ZNSt6vectorIPKcSaIS1_EED1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    f298:	48 8b 77 10          	mov    0x10(%rdi),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    f29c:	48 89 c7             	mov    %rax,%rdi
    f29f:	48 29 c6             	sub    %rax,%rsi
    f2a2:	e9 b9 72 ff ff       	jmp    6560 <_ZdlPvm@plt>
    f2a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f2ae:	00 00 
      }
    f2b0:	c3                   	ret
    f2b1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f2b8:	00 00 00 
    f2bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000f2c0 <_ZN4rtvc6DeviceD1Ev>:
    f2c0:	48 8d 05 49 12 03 00 	lea    0x31249(%rip),%rax        # 40510 <_ZTVN3vkw6DeviceE+0x10>
    if (_isOwner) {
    f2c7:	80 7f 30 00          	cmpb   $0x0,0x30(%rdi)
  virtual ~Device() { _destroyVkData(); }
    f2cb:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    f2ce:	75 08                	jne    f2d8 <_ZN4rtvc6DeviceD1Ev+0x18>
    f2d0:	c3                   	ret
    f2d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
#include <map>
#include <optional>

namespace rtvc {

class Device : public vkw::Device {
    f2d8:	48 83 ec 08          	sub    $0x8,%rsp
      vkh::destroyDevice(_device, _pAllocator);
    f2dc:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    f2e0:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    f2e4:	e8 97 ea ff ff       	call   dd80 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>
    f2e9:	48 83 c4 08          	add    $0x8,%rsp
    f2ed:	c3                   	ret
    f2ee:	66 90                	xchg   %ax,%ax

000000000000f2f0 <_ZN4rtvc6DeviceD0Ev>:
    f2f0:	53                   	push   %rbx
  virtual ~Device() { _destroyVkData(); }
    f2f1:	48 8d 05 18 12 03 00 	lea    0x31218(%rip),%rax        # 40510 <_ZTVN3vkw6DeviceE+0x10>
    if (_isOwner) {
    f2f8:	80 7f 30 00          	cmpb   $0x0,0x30(%rdi)
    f2fc:	48 89 fb             	mov    %rdi,%rbx
  virtual ~Device() { _destroyVkData(); }
    f2ff:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
    f302:	75 14                	jne    f318 <_ZN4rtvc6DeviceD0Ev+0x28>
    f304:	48 89 df             	mov    %rbx,%rdi
    f307:	be 38 00 00 00       	mov    $0x38,%esi
    f30c:	5b                   	pop    %rbx
    f30d:	e9 4e 72 ff ff       	jmp    6560 <_ZdlPvm@plt>
    f312:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkh::destroyDevice(_device, _pAllocator);
    f318:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    f31c:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    f320:	e8 5b ea ff ff       	call   dd80 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>
    f325:	48 89 df             	mov    %rbx,%rdi
    f328:	be 38 00 00 00       	mov    $0x38,%esi
    f32d:	5b                   	pop    %rbx
    f32e:	e9 2d 72 ff ff       	jmp    6560 <_ZdlPvm@plt>
    f333:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f33a:	00 00 00 
    f33d:	0f 1f 00             	nopl   (%rax)

000000000000f340 <_ZNSt19bad_optional_accessD1Ev>:
    virtual ~bad_optional_access() = default;
    f340:	48 8d 05 71 13 03 00 	lea    0x31371(%rip),%rax        # 406b8 <_ZTVSt19bad_optional_access+0x10>
    f347:	48 89 07             	mov    %rax,(%rdi)
    f34a:	e9 61 77 ff ff       	jmp    6ab0 <_ZNSt9exceptionD2Ev@plt>
    f34f:	90                   	nop

000000000000f350 <_ZNSt19bad_optional_accessD0Ev>:
    f350:	48 8d 05 61 13 03 00 	lea    0x31361(%rip),%rax        # 406b8 <_ZTVSt19bad_optional_access+0x10>
    f357:	53                   	push   %rbx
    f358:	48 89 fb             	mov    %rdi,%rbx
    f35b:	48 89 07             	mov    %rax,(%rdi)
    f35e:	e8 4d 77 ff ff       	call   6ab0 <_ZNSt9exceptionD2Ev@plt>
    f363:	48 89 df             	mov    %rbx,%rdi
    f366:	be 08 00 00 00       	mov    $0x8,%esi
    f36b:	5b                   	pop    %rbx
    f36c:	e9 ef 71 ff ff       	jmp    6560 <_ZdlPvm@plt>
    f371:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f378:	00 00 00 
    f37b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000f380 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    f380:	41 57                	push   %r15
    f382:	41 56                	push   %r14
    f384:	41 55                	push   %r13
    f386:	41 54                	push   %r12
    f388:	55                   	push   %rbp
    f389:	53                   	push   %rbx
    f38a:	48 83 ec 28          	sub    $0x28,%rsp
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
    f38e:	4c 8b 7f 10          	mov    0x10(%rdi),%r15
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    f392:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    f397:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
      while (__x != 0)
    f39c:	4d 85 ff             	test   %r15,%r15
    f39f:	0f 84 eb 00 00 00    	je     f490 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x110>
    f3a5:	48 8b 16             	mov    (%rsi),%rdx
    f3a8:	4c 8b 76 08          	mov    0x8(%rsi),%r14
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f3ac:	bd 00 00 00 80       	mov    $0x80000000,%ebp
    f3b1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    f3b6:	eb 19                	jmp    f3d1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x51>
    f3b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    f3bf:	00 
      { return static_cast<_Link_type>(__x->_M_left); }
    f3c0:	49 8b 47 10          	mov    0x10(%r15),%rax
    f3c4:	be 01 00 00 00       	mov    $0x1,%esi
      while (__x != 0)
    f3c9:	48 85 c0             	test   %rax,%rax
    f3cc:	74 57                	je     f425 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xa5>
    f3ce:	49 89 c7             	mov    %rax,%r15
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    f3d1:	4d 8b 67 28          	mov    0x28(%r15),%r12
      compare(const basic_string& __str) const
    f3d5:	4d 8b 6f 20          	mov    0x20(%r15),%r13
    f3d9:	4d 39 e6             	cmp    %r12,%r14
    f3dc:	4c 89 e3             	mov    %r12,%rbx
    f3df:	49 0f 46 de          	cmovbe %r14,%rbx
	if (__n == 0)
    f3e3:	48 85 db             	test   %rbx,%rbx
    f3e6:	74 14                	je     f3fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x7c>
	return __builtin_memcmp(__s1, __s2, __n);
    f3e8:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    f3ed:	48 89 da             	mov    %rbx,%rdx
    f3f0:	4c 89 ee             	mov    %r13,%rsi
    f3f3:	e8 38 6e ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    f3f8:	85 c0                	test   %eax,%eax
    f3fa:	75 1a                	jne    f416 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x96>
	const difference_type __d = difference_type(__n1 - __n2);
    f3fc:	4c 89 f0             	mov    %r14,%rax
    f3ff:	4c 29 e0             	sub    %r12,%rax
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f402:	48 39 e8             	cmp    %rbp,%rax
    f405:	7d 13                	jge    f41a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x9a>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    f407:	48 b9 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rcx
    f40e:	ff ff ff 
    f411:	48 39 c8             	cmp    %rcx,%rax
    f414:	7e aa                	jle    f3c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x40>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
    f416:	85 c0                	test   %eax,%eax
    f418:	78 a6                	js     f3c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x40>
      { return static_cast<_Link_type>(__x->_M_right); }
    f41a:	49 8b 47 18          	mov    0x18(%r15),%rax
    f41e:	31 f6                	xor    %esi,%esi
      while (__x != 0)
    f420:	48 85 c0             	test   %rax,%rax
    f423:	75 a9                	jne    f3ce <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x4e>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
    f425:	4c 89 fd             	mov    %r15,%rbp
	}
      iterator __j = iterator(__y);
      if (__comp)
    f428:	40 84 f6             	test   %sil,%sil
    f42b:	75 67                	jne    f494 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x114>
	if (__n == 0)
    f42d:	48 85 db             	test   %rbx,%rbx
    f430:	74 3e                	je     f470 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf0>
	return __builtin_memcmp(__s1, __s2, __n);
    f432:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    f437:	48 89 da             	mov    %rbx,%rdx
    f43a:	4c 89 ef             	mov    %r13,%rdi
    f43d:	e8 ee 6d ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    f442:	85 c0                	test   %eax,%eax
    f444:	74 2a                	je     f470 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf0>
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
    f446:	31 d2                	xor    %edx,%edx
    f448:	85 c0                	test   %eax,%eax
    f44a:	4c 0f 48 fa          	cmovs  %rdx,%r15
    f44e:	48 0f 49 ea          	cmovns %rdx,%rbp
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
    f452:	48 83 c4 28          	add    $0x28,%rsp
    f456:	4c 89 f8             	mov    %r15,%rax
    f459:	5b                   	pop    %rbx
    f45a:	48 89 ea             	mov    %rbp,%rdx
    f45d:	5d                   	pop    %rbp
    f45e:	41 5c                	pop    %r12
    f460:	41 5d                	pop    %r13
    f462:	41 5e                	pop    %r14
    f464:	41 5f                	pop    %r15
    f466:	c3                   	ret
    f467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f46e:	00 00 
	const difference_type __d = difference_type(__n1 - __n2);
    f470:	4c 89 e1             	mov    %r12,%rcx
    f473:	4c 29 f1             	sub    %r14,%rcx
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f476:	48 81 f9 ff ff ff 7f 	cmp    $0x7fffffff,%rcx
    f47d:	7f 69                	jg     f4e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x168>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    f47f:	48 81 f9 00 00 00 80 	cmp    $0xffffffff80000000,%rcx
    f486:	7c 67                	jl     f4ef <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
	  return int(__d);
    f488:	89 c8                	mov    %ecx,%eax
    f48a:	eb ba                	jmp    f446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xc6>
    f48c:	0f 1f 40 00          	nopl   0x0(%rax)
      { return &this->_M_impl._M_header; }
    f490:	4c 8d 7f 08          	lea    0x8(%rdi),%r15
	  if (__j == begin())
    f494:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    f499:	4c 39 78 18          	cmp    %r15,0x18(%rax)
    f49d:	74 39                	je     f4d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x158>
	_M_node = _Rb_tree_decrement(_M_node);
    f49f:	4c 89 ff             	mov    %r15,%rdi
	return *this;
    f4a2:	4c 89 fd             	mov    %r15,%rbp
	_M_node = _Rb_tree_decrement(_M_node);
    f4a5:	e8 06 71 ff ff       	call   65b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>
    f4aa:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
    f4af:	4c 8b 60 28          	mov    0x28(%rax),%r12
    f4b3:	4c 8b 68 20          	mov    0x20(%rax),%r13
    f4b7:	49 89 c7             	mov    %rax,%r15
    f4ba:	4c 8b 72 08          	mov    0x8(%rdx),%r14
    f4be:	48 8b 0a             	mov    (%rdx),%rcx
    f4c1:	4d 39 f4             	cmp    %r14,%r12
    f4c4:	4c 89 f3             	mov    %r14,%rbx
    f4c7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f4cc:	49 0f 46 dc          	cmovbe %r12,%rbx
	return *this;
    f4d0:	e9 58 ff ff ff       	jmp    f42d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xad>
    f4d5:	0f 1f 00             	nopl   (%rax)
    f4d8:	4c 89 fd             	mov    %r15,%rbp
    f4db:	45 31 ff             	xor    %r15d,%r15d
    f4de:	e9 6f ff ff ff       	jmp    f452 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xd2>
    f4e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    f4e8:	31 ed                	xor    %ebp,%ebp
    f4ea:	e9 63 ff ff ff       	jmp    f452 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xd2>
    f4ef:	45 31 ff             	xor    %r15d,%r15d
    f4f2:	e9 5b ff ff ff       	jmp    f452 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xd2>
    f4f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f4fe:	00 00 

000000000000f500 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    f500:	41 57                	push   %r15
      { return &this->_M_impl._M_header; }
    f502:	48 8d 47 08          	lea    0x8(%rdi),%rax
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    f506:	41 56                	push   %r14
    f508:	41 55                	push   %r13
    f50a:	41 54                	push   %r12
    f50c:	49 89 d4             	mov    %rdx,%r12
    f50f:	55                   	push   %rbp
    f510:	48 89 fd             	mov    %rdi,%rbp
    f513:	53                   	push   %rbx
    f514:	48 83 ec 18          	sub    $0x18,%rsp
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
    f518:	48 39 c6             	cmp    %rax,%rsi
    f51b:	0f 84 4f 01 00 00    	je     f670 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x170>
    f521:	4c 8b 6a 08          	mov    0x8(%rdx),%r13
    f525:	4c 8b 76 28          	mov    0x28(%rsi),%r14
    f529:	48 89 f3             	mov    %rsi,%rbx
      compare(const basic_string& __str) const
    f52c:	4c 8b 3a             	mov    (%rdx),%r15
    f52f:	48 8b 4e 20          	mov    0x20(%rsi),%rcx
    f533:	4d 39 f5             	cmp    %r14,%r13
    f536:	4c 89 f2             	mov    %r14,%rdx
    f539:	49 0f 46 d5          	cmovbe %r13,%rdx
	if (__n == 0)
    f53d:	48 85 d2             	test   %rdx,%rdx
    f540:	0f 84 8a 00 00 00    	je     f5d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xd0>
	return __builtin_memcmp(__s1, __s2, __n);
    f546:	48 89 ce             	mov    %rcx,%rsi
    f549:	4c 89 ff             	mov    %r15,%rdi
    f54c:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    f551:	48 89 0c 24          	mov    %rcx,(%rsp)
    f555:	e8 d6 6c ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    f55a:	48 8b 0c 24          	mov    (%rsp),%rcx
    f55e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    f563:	85 c0                	test   %eax,%eax
    f565:	75 18                	jne    f57f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x7f>
	const difference_type __d = difference_type(__n1 - __n2);
    f567:	4c 89 e8             	mov    %r13,%rax
    f56a:	4c 29 f0             	sub    %r14,%rax
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f56d:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
    f573:	7f 0c                	jg     f581 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x81>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    f575:	48 3d 00 00 00 80    	cmp    $0xffffffff80000000,%rax
    f57b:	7c 6d                	jl     f5ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xea>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
    f57d:	85 c0                	test   %eax,%eax
    f57f:	78 69                	js     f5ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xea>
    f581:	4c 89 fe             	mov    %r15,%rsi
    f584:	48 89 cf             	mov    %rcx,%rdi
    f587:	e8 a4 6c ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    f58c:	85 c0                	test   %eax,%eax
    f58e:	75 1a                	jne    f5aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xaa>
	const difference_type __d = difference_type(__n1 - __n2);
    f590:	4c 89 f0             	mov    %r14,%rax
    f593:	4c 29 e8             	sub    %r13,%rax
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f596:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
    f59c:	7f 14                	jg     f5b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb2>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    f59e:	48 3d 00 00 00 80    	cmp    $0xffffffff80000000,%rax
    f5a4:	0f 8c 36 01 00 00    	jl     f6e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1e0>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
    f5aa:	85 c0                	test   %eax,%eax
    f5ac:	0f 88 2e 01 00 00    	js     f6e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1e0>
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else
	// Equivalent keys.
	return _Res(__pos._M_node, 0);
    f5b2:	48 89 d8             	mov    %rbx,%rax
    f5b5:	31 d2                	xor    %edx,%edx
    }
    f5b7:	48 83 c4 18          	add    $0x18,%rsp
    f5bb:	5b                   	pop    %rbx
    f5bc:	5d                   	pop    %rbp
    f5bd:	41 5c                	pop    %r12
    f5bf:	41 5d                	pop    %r13
    f5c1:	41 5e                	pop    %r14
    f5c3:	41 5f                	pop    %r15
    f5c5:	c3                   	ret
    f5c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f5cd:	00 00 00 
	const difference_type __d = difference_type(__n1 - __n2);
    f5d0:	4c 89 e8             	mov    %r13,%rax
    f5d3:	4c 29 f0             	sub    %r14,%rax
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f5d6:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
    f5dc:	7f b2                	jg     f590 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x90>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    f5de:	48 3d 00 00 00 80    	cmp    $0xffffffff80000000,%rax
    f5e4:	7c 04                	jl     f5ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xea>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
    f5e6:	85 c0                	test   %eax,%eax
    f5e8:	79 a6                	jns    f590 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x90>
	    return _Res(_M_leftmost(), _M_leftmost());
    f5ea:	48 89 d8             	mov    %rbx,%rax
    f5ed:	48 89 da             	mov    %rbx,%rdx
	  if (__pos._M_node == _M_leftmost()) // begin()
    f5f0:	48 39 5d 18          	cmp    %rbx,0x18(%rbp)
    f5f4:	74 c1                	je     f5b7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb7>
	_M_node = _Rb_tree_decrement(_M_node);
    f5f6:	48 89 df             	mov    %rbx,%rdi
    f5f9:	e8 b2 6f ff ff       	call   65b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>
    f5fe:	4c 89 ea             	mov    %r13,%rdx
    f601:	4c 8b 70 28          	mov    0x28(%rax),%r14
    f605:	48 8b 78 20          	mov    0x20(%rax),%rdi
    f609:	48 89 c1             	mov    %rax,%rcx
      compare(const basic_string& __str) const
    f60c:	4d 39 ee             	cmp    %r13,%r14
    f60f:	49 0f 46 d6          	cmovbe %r14,%rdx
	if (__n == 0)
    f613:	48 85 d2             	test   %rdx,%rdx
    f616:	74 14                	je     f62c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x12c>
	return __builtin_memcmp(__s1, __s2, __n);
    f618:	4c 89 fe             	mov    %r15,%rsi
    f61b:	48 89 04 24          	mov    %rax,(%rsp)
    f61f:	e8 0c 6c ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    f624:	48 8b 0c 24          	mov    (%rsp),%rcx
    f628:	85 c0                	test   %eax,%eax
    f62a:	75 1c                	jne    f648 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x148>
	const difference_type __d = difference_type(__n1 - __n2);
    f62c:	4d 29 ee             	sub    %r13,%r14
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f62f:	49 81 fe ff ff ff 7f 	cmp    $0x7fffffff,%r14
    f636:	0f 8f fa 00 00 00    	jg     f736 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x236>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    f63c:	49 81 fe 00 00 00 80 	cmp    $0xffffffff80000000,%r14
    f643:	7c 0b                	jl     f650 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x150>
	  return int(__d);
    f645:	44 89 f0             	mov    %r14d,%eax
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
    f648:	85 c0                	test   %eax,%eax
    f64a:	0f 89 e6 00 00 00    	jns    f736 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x236>
		return _Res(0, __before._M_node);
    f650:	31 c0                	xor    %eax,%eax
    f652:	48 83 79 18 00       	cmpq   $0x0,0x18(%rcx)
    f657:	48 0f 45 c3          	cmovne %rbx,%rax
    f65b:	48 0f 44 d9          	cmove  %rcx,%rbx
    f65f:	48 89 da             	mov    %rbx,%rdx
    f662:	e9 50 ff ff ff       	jmp    f5b7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb7>
    f667:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f66e:	00 00 
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
    f670:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
    f675:	0f 84 bb 00 00 00    	je     f736 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x236>
    f67b:	48 8b 5f 20          	mov    0x20(%rdi),%rbx
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    f67f:	4c 8b 72 08          	mov    0x8(%rdx),%r14
      compare(const basic_string& __str) const
    f683:	48 8b 32             	mov    (%rdx),%rsi
    f686:	4c 8b 6b 28          	mov    0x28(%rbx),%r13
    f68a:	4c 89 f2             	mov    %r14,%rdx
    f68d:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    f691:	4d 39 f5             	cmp    %r14,%r13
    f694:	49 0f 46 d5          	cmovbe %r13,%rdx
	if (__n == 0)
    f698:	48 85 d2             	test   %rdx,%rdx
    f69b:	74 09                	je     f6a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1a6>
	return __builtin_memcmp(__s1, __s2, __n);
    f69d:	e8 8e 6b ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    f6a2:	85 c0                	test   %eax,%eax
    f6a4:	75 1c                	jne    f6c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1c2>
	const difference_type __d = difference_type(__n1 - __n2);
    f6a6:	4d 29 f5             	sub    %r14,%r13
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f6a9:	49 81 fd ff ff ff 7f 	cmp    $0x7fffffff,%r13
    f6b0:	0f 8f 80 00 00 00    	jg     f736 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x236>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    f6b6:	49 81 fd 00 00 00 80 	cmp    $0xffffffff80000000,%r13
    f6bd:	7c 07                	jl     f6c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1c6>
	  return int(__d);
    f6bf:	44 89 e8             	mov    %r13d,%eax
    f6c2:	85 c0                	test   %eax,%eax
    f6c4:	79 70                	jns    f736 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x236>
    }
    f6c6:	48 83 c4 18          	add    $0x18,%rsp
	    return _Res(0, _M_rightmost());
    f6ca:	48 89 da             	mov    %rbx,%rdx
    f6cd:	31 c0                	xor    %eax,%eax
    }
    f6cf:	5b                   	pop    %rbx
    f6d0:	5d                   	pop    %rbp
    f6d1:	41 5c                	pop    %r12
    f6d3:	41 5d                	pop    %r13
    f6d5:	41 5e                	pop    %r14
    f6d7:	41 5f                	pop    %r15
    f6d9:	c3                   	ret
    f6da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  if (__pos._M_node == _M_rightmost())
    f6e0:	48 39 5d 20          	cmp    %rbx,0x20(%rbp)
    f6e4:	74 e0                	je     f6c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1c6>
	_M_node = _Rb_tree_increment(_M_node);
    f6e6:	48 89 df             	mov    %rbx,%rdi
    f6e9:	e8 82 6c ff ff       	call   6370 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>
    f6ee:	4c 89 ea             	mov    %r13,%rdx
    f6f1:	48 8b 48 28          	mov    0x28(%rax),%rcx
    f6f5:	48 8b 70 20          	mov    0x20(%rax),%rsi
    f6f9:	49 89 c6             	mov    %rax,%r14
      compare(const basic_string& __str) const
    f6fc:	4c 39 e9             	cmp    %r13,%rcx
    f6ff:	48 0f 46 d1          	cmovbe %rcx,%rdx
	if (__n == 0)
    f703:	48 85 d2             	test   %rdx,%rdx
    f706:	74 14                	je     f71c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x21c>
	return __builtin_memcmp(__s1, __s2, __n);
    f708:	4c 89 ff             	mov    %r15,%rdi
    f70b:	48 89 0c 24          	mov    %rcx,(%rsp)
    f70f:	e8 1c 6b ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    f714:	48 8b 0c 24          	mov    (%rsp),%rcx
    f718:	85 c0                	test   %eax,%eax
    f71a:	75 16                	jne    f732 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x232>
	const difference_type __d = difference_type(__n1 - __n2);
    f71c:	4c 89 e8             	mov    %r13,%rax
    f71f:	48 29 c8             	sub    %rcx,%rax
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f722:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
    f728:	7f 0c                	jg     f736 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x236>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    f72a:	48 3d 00 00 00 80    	cmp    $0xffffffff80000000,%rax
    f730:	7c 1e                	jl     f750 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x250>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
    f732:	85 c0                	test   %eax,%eax
    f734:	78 1a                	js     f750 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x250>
    }
    f736:	48 83 c4 18          	add    $0x18,%rsp
	    return _M_get_insert_unique_pos(__k);
    f73a:	4c 89 e6             	mov    %r12,%rsi
    f73d:	48 89 ef             	mov    %rbp,%rdi
    }
    f740:	5b                   	pop    %rbx
    f741:	5d                   	pop    %rbp
    f742:	41 5c                	pop    %r12
    f744:	41 5d                	pop    %r13
    f746:	41 5e                	pop    %r14
    f748:	41 5f                	pop    %r15
	    return _M_get_insert_unique_pos(__k);
    f74a:	e9 31 fc ff ff       	jmp    f380 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
    f74f:	90                   	nop
		return _Res(0, __pos._M_node);
    f750:	31 c0                	xor    %eax,%eax
    f752:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
    f757:	49 0f 45 de          	cmovne %r14,%rbx
    f75b:	49 0f 45 c6          	cmovne %r14,%rax
    f75f:	48 89 da             	mov    %rbx,%rdx
    f762:	e9 50 fe ff ff       	jmp    f5b7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb7>
    f767:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f76e:	00 00 

000000000000f770 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    f770:	41 57                	push   %r15
    f772:	41 56                	push   %r14
    f774:	41 55                	push   %r13
    f776:	49 89 f5             	mov    %rsi,%r13
    f779:	41 54                	push   %r12
    f77b:	49 89 fc             	mov    %rdi,%r12
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    f77e:	bf 48 00 00 00       	mov    $0x48,%edi
    f783:	55                   	push   %rbp
    f784:	48 89 cd             	mov    %rcx,%rbp
    f787:	53                   	push   %rbx
    f788:	48 83 ec 18          	sub    $0x18,%rsp
    f78c:	e8 af 6d ff ff       	call   6540 <_Znwm@plt>
      _Tuple_impl(_Tuple_impl&&) = default;
#else
      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(static_cast<_Base&&>(__in))
    f791:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    f795:	4c 8d 78 30          	lea    0x30(%rax),%r15
    f799:	48 89 c3             	mov    %rax,%rbx
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
    f79c:	48 8d 48 20          	lea    0x20(%rax),%rcx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f7a0:	4c 89 78 20          	mov    %r15,0x20(%rax)
      { return _M_dataplus._M_p; }
    f7a4:	48 8b 45 00          	mov    0x0(%rbp),%rax
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    f7a8:	4c 8d 75 10          	lea    0x10(%rbp),%r14
	if (__str._M_is_local())
    f7ac:	4c 39 f0             	cmp    %r14,%rax
    f7af:	0f 84 ab 00 00 00    	je     f860 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xf0>
      { _M_dataplus._M_p = __p; }
    f7b5:	48 89 43 20          	mov    %rax,0x20(%rbx)
      { _M_allocated_capacity = __capacity; }
    f7b9:	48 8b 45 10          	mov    0x10(%rbp),%rax
    f7bd:	48 89 43 30          	mov    %rax,0x30(%rbx)
      { return _M_string_length; }
    f7c1:	48 8b 45 08          	mov    0x8(%rbp),%rax
      { _M_dataplus._M_p = __p; }
    f7c5:	4c 89 75 00          	mov    %r14,0x0(%rbp)
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
    f7c9:	4c 89 ee             	mov    %r13,%rsi
    f7cc:	48 89 ca             	mov    %rcx,%rdx
    f7cf:	4c 89 e7             	mov    %r12,%rdi
      { _M_string_length = __length; }
    f7d2:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
    f7d9:	00 
    f7da:	48 89 43 28          	mov    %rax,0x28(%rbx)
	__c1 = __c2;
    f7de:	c6 45 10 00          	movb   $0x0,0x10(%rbp)
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
    f7e2:	c7 43 40 00 00 00 00 	movl   $0x0,0x40(%rbx)
    f7e9:	e8 12 fd ff ff       	call   f500 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>
    f7ee:	48 89 c5             	mov    %rax,%rbp
    f7f1:	49 89 d5             	mov    %rdx,%r13
	if (__res.second)
    f7f4:	48 85 d2             	test   %rdx,%rdx
    f7f7:	74 3f                	je     f838 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc8>
      { return &this->_M_impl._M_header; }
    f7f9:	49 8d 4c 24 08       	lea    0x8(%r12),%rcx
    f7fe:	bf 01 00 00 00       	mov    $0x1,%edi
			    || _M_impl._M_key_compare(_S_key(__z),
    f803:	48 85 c0             	test   %rax,%rax
    f806:	0f 84 8c 00 00 00    	je     f898 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x128>
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
    f80c:	4c 89 ea             	mov    %r13,%rdx
    f80f:	48 89 de             	mov    %rbx,%rsi
    f812:	48 89 dd             	mov    %rbx,%rbp
    f815:	e8 76 68 ff ff       	call   6090 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>
      ++_M_impl._M_node_count;
    f81a:	49 83 44 24 28 01    	addq   $0x1,0x28(%r12)
	  return __z._M_insert(__res);
	return iterator(__res.first);
      }
    f820:	48 83 c4 18          	add    $0x18,%rsp
    f824:	48 89 e8             	mov    %rbp,%rax
    f827:	5b                   	pop    %rbx
    f828:	5d                   	pop    %rbp
    f829:	41 5c                	pop    %r12
    f82b:	41 5d                	pop    %r13
    f82d:	41 5e                	pop    %r14
    f82f:	41 5f                	pop    %r15
    f831:	c3                   	ret
    f832:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      { return _M_dataplus._M_p; }
    f838:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	if (!_M_is_local())
    f83c:	49 39 ff             	cmp    %rdi,%r15
    f83f:	74 0d                	je     f84e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xde>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    f841:	48 8b 43 30          	mov    0x30(%rbx),%rax
    f845:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    f849:	e8 12 6d ff ff       	call   6560 <_ZdlPvm@plt>
    f84e:	be 48 00 00 00       	mov    $0x48,%esi
    f853:	48 89 df             	mov    %rbx,%rdi
    f856:	e8 05 6d ff ff       	call   6560 <_ZdlPvm@plt>
      }
    f85b:	eb c3                	jmp    f820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb0>
    f85d:	0f 1f 00             	nopl   (%rax)
	if (__n == 0)
    f860:	48 8b 55 08          	mov    0x8(%rbp),%rdx
    f864:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    f86b:	48 83 c2 01          	add    $0x1,%rdx
    f86f:	0f 84 50 ff ff ff    	je     f7c5 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x55>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    f875:	4c 89 f6             	mov    %r14,%rsi
    f878:	4c 89 ff             	mov    %r15,%rdi
    f87b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f880:	e8 8b 6b ff ff       	call   6410 <memcpy@plt>
      { return _M_string_length; }
    f885:	48 8b 45 08          	mov    0x8(%rbp),%rax
    f889:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    f88e:	e9 32 ff ff ff       	jmp    f7c5 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x55>
    f893:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      bool __insert_left = (__x != 0 || __p == _M_end()
    f898:	48 39 ca             	cmp    %rcx,%rdx
    f89b:	0f 84 6b ff ff ff    	je     f80c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x9c>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    f8a1:	48 8b 6b 28          	mov    0x28(%rbx),%rbp
    f8a5:	4c 8b 72 28          	mov    0x28(%rdx),%r14
      compare(const basic_string& __str) const
    f8a9:	4c 39 f5             	cmp    %r14,%rbp
    f8ac:	4c 89 f2             	mov    %r14,%rdx
    f8af:	48 0f 46 d5          	cmovbe %rbp,%rdx
	if (__n == 0)
    f8b3:	48 85 d2             	test   %rdx,%rdx
    f8b6:	74 1d                	je     f8d5 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x165>
	return __builtin_memcmp(__s1, __s2, __n);
    f8b8:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    f8bc:	49 8b 75 20          	mov    0x20(%r13),%rsi
    f8c0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f8c5:	e8 66 69 ff ff       	call   6230 <memcmp@plt>
	if (!__r)
    f8ca:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    f8cf:	85 c0                	test   %eax,%eax
    f8d1:	89 c7                	mov    %eax,%edi
    f8d3:	75 1d                	jne    f8f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x182>
	const difference_type __d = difference_type(__n1 - __n2);
    f8d5:	4c 29 f5             	sub    %r14,%rbp
    f8d8:	31 ff                	xor    %edi,%edi
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
    f8da:	48 81 fd ff ff ff 7f 	cmp    $0x7fffffff,%rbp
    f8e1:	0f 8f 25 ff ff ff    	jg     f80c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x9c>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
    f8e7:	48 81 fd 00 00 00 80 	cmp    $0xffffffff80000000,%rbp
    f8ee:	7c 0a                	jl     f8fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x18a>
	  return int(__d);
    f8f0:	89 ef                	mov    %ebp,%edi
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
    f8f2:	c1 ef 1f             	shr    $0x1f,%edi
    f8f5:	e9 12 ff ff ff       	jmp    f80c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x9c>
    f8fa:	bf 01 00 00 00       	mov    $0x1,%edi
    f8ff:	e9 08 ff ff ff       	jmp    f80c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x9c>
    f904:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f90b:	00 00 00 
    f90e:	66 90                	xchg   %ax,%ax

000000000000f910 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D>:
    VkRenderPass renderPass, const VkExtent2D &extent) {
    f910:	41 57                	push   %r15
    f912:	41 56                	push   %r14
    f914:	4d 89 c6             	mov    %r8,%r14
    f917:	41 55                	push   %r13
    f919:	49 89 cd             	mov    %rcx,%r13
    f91c:	41 54                	push   %r12
    f91e:	49 89 fc             	mov    %rdi,%r12
    f921:	55                   	push   %rbp
    f922:	53                   	push   %rbx
    f923:	48 89 d3             	mov    %rdx,%rbx
    f926:	48 83 ec 68          	sub    $0x68,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    f92a:	48 8b 42 08          	mov    0x8(%rdx),%rax
    f92e:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    f932:	48 89 34 24          	mov    %rsi,(%rsp)
    f936:	48 8b 32             	mov    (%rdx),%rsi
    f939:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
    f93e:	48 89 c5             	mov    %rax,%rbp
    f941:	48 89 fa             	mov    %rdi,%rdx
    f944:	48 29 f5             	sub    %rsi,%rbp
    f947:	49 89 ef             	mov    %rbp,%r15
    f94a:	48 29 ca             	sub    %rcx,%rdx
    f94d:	48 89 6c 24 18       	mov    %rbp,0x18(%rsp)
    f952:	49 c1 ff 03          	sar    $0x3,%r15
	if (__new_size > size())
    f956:	48 39 ea             	cmp    %rbp,%rdx
    f959:	0f 82 71 01 00 00    	jb     fad0 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x1c0>
	else if (__new_size < size())
    f95f:	48 39 d5             	cmp    %rdx,%rbp
    f962:	0f 82 f8 00 00 00    	jb     fa60 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x150>
    f968:	48 89 ea             	mov    %rbp,%rdx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    f96b:	48 85 d2             	test   %rdx,%rdx
    f96e:	0f 84 34 01 00 00    	je     faa8 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x198>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    f974:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
    f97b:	ff ff 7f 
    f97e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    f983:	48 39 f8             	cmp    %rdi,%rax
    f986:	0f 82 6f 01 00 00    	jb     fafb <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x1eb>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    f98c:	e8 af 6b ff ff       	call   6540 <_Znwm@plt>
    f991:	48 8b 33             	mov    (%rbx),%rsi
    f994:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    f999:	48 8b 43 08          	mov    0x8(%rbx),%rax
	  const ptrdiff_t _Num = __last - __first;
    f99d:	48 89 c2             	mov    %rax,%rdx
    f9a0:	48 29 f2             	sub    %rsi,%rdx
	  if (_Num)
    f9a3:	48 39 c6             	cmp    %rax,%rsi
    f9a6:	0f 84 0e 01 00 00    	je     faba <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x1aa>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    f9ac:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    f9b1:	e8 da 6f ff ff       	call   6990 <memmove@plt>
  for (size_t i = 0; i < imageCount; ++i) {
    f9b6:	48 85 ed             	test   %rbp,%rbp
    f9b9:	0f 84 b7 00 00 00    	je     fa76 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x166>
    f9bf:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    f9c4:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
    f9c9:	31 db                	xor    %ebx,%ebx
    f9cb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    framebufferInfo.width = extent.width;
    f9d0:	49 8b 06             	mov    (%r14),%rax
    VkFramebufferCreateInfo framebufferInfo{};
    f9d3:	66 0f ef c0          	pxor   %xmm0,%xmm0
    vkCreateFramebuffer(device, &framebufferInfo, nullptr, &_framebuffers[i]);
    f9d7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    f9dc:	31 d2                	xor    %edx,%edx
    VkFramebufferCreateInfo framebufferInfo{};
    f9de:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
    vkCreateFramebuffer(device, &framebufferInfo, nullptr, &_framebuffers[i]);
    f9e3:	48 8b 3c 24          	mov    (%rsp),%rdi
    VkFramebufferCreateInfo framebufferInfo{};
    f9e7:	0f 11 44 24 50       	movups %xmm0,0x50(%rsp)
    framebufferInfo.width = extent.width;
    f9ec:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
	return *(this->_M_impl._M_start + __n);
    f9f1:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    VkFramebufferCreateInfo framebufferInfo{};
    f9f6:	0f 11 44 24 34       	movups %xmm0,0x34(%rsp)
    f9fb:	48 8d 0c d8          	lea    (%rax,%rbx,8),%rcx
    framebufferInfo.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
    f9ff:	c7 44 24 20 25 00 00 	movl   $0x25,0x20(%rsp)
    fa06:	00 
    framebufferInfo.renderPass = renderPass;
    fa07:	4c 89 6c 24 38       	mov    %r13,0x38(%rsp)
    framebufferInfo.attachmentCount = 1;
    fa0c:	c7 44 24 40 01 00 00 	movl   $0x1,0x40(%rsp)
    fa13:	00 
    framebufferInfo.pAttachments = &attachments[i];
    fa14:	48 89 6c 24 48       	mov    %rbp,0x48(%rsp)
    framebufferInfo.layers = 1;
    fa19:	c7 44 24 58 01 00 00 	movl   $0x1,0x58(%rsp)
    fa20:	00 
    VkFramebufferCreateInfo framebufferInfo{};
    fa21:	0f 11 44 24 24       	movups %xmm0,0x24(%rsp)
    vkCreateFramebuffer(device, &framebufferInfo, nullptr, &_framebuffers[i]);
    fa26:	e8 65 6d ff ff       	call   6790 <vkCreateFramebuffer@plt>
  for (size_t i = 0; i < imageCount; ++i) {
    fa2b:	48 83 c3 01          	add    $0x1,%rbx
    fa2f:	48 83 c5 08          	add    $0x8,%rbp
    fa33:	4c 39 fb             	cmp    %r15,%rbx
    fa36:	72 98                	jb     f9d0 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0xc0>
  _device = device;
    fa38:	48 8b 04 24          	mov    (%rsp),%rax
	if (__p)
    fa3c:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
  _isOwner = true;
    fa42:	41 c6 44 24 30 01    	movb   $0x1,0x30(%r12)
  _device = device;
    fa48:	49 89 44 24 20       	mov    %rax,0x20(%r12)
    fa4d:	75 36                	jne    fa85 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x175>
}
    fa4f:	48 83 c4 68          	add    $0x68,%rsp
    fa53:	5b                   	pop    %rbx
    fa54:	5d                   	pop    %rbp
    fa55:	41 5c                	pop    %r12
    fa57:	41 5d                	pop    %r13
    fa59:	41 5e                	pop    %r14
    fa5b:	41 5f                	pop    %r15
    fa5d:	c3                   	ret
    fa5e:	66 90                	xchg   %ax,%ax
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
    fa60:	48 01 e9             	add    %rbp,%rcx
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
    fa63:	48 39 cf             	cmp    %rcx,%rdi
    fa66:	0f 84 fc fe ff ff    	je     f968 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x58>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
    fa6c:	49 89 4c 24 10       	mov    %rcx,0x10(%r12)
    fa71:	e9 f2 fe ff ff       	jmp    f968 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x58>
  _device = device;
    fa76:	48 8b 04 24          	mov    (%rsp),%rax
  _isOwner = true;
    fa7a:	41 c6 44 24 30 01    	movb   $0x1,0x30(%r12)
  _device = device;
    fa80:	49 89 44 24 20       	mov    %rax,0x20(%r12)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    fa85:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    fa8a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
}
    fa8f:	48 83 c4 68          	add    $0x68,%rsp
    fa93:	5b                   	pop    %rbx
    fa94:	5d                   	pop    %rbp
    fa95:	41 5c                	pop    %r12
    fa97:	41 5d                	pop    %r13
    fa99:	41 5e                	pop    %r14
    fa9b:	41 5f                	pop    %r15
    fa9d:	e9 be 6a ff ff       	jmp    6560 <_ZdlPvm@plt>
    faa2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    faa8:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    faaf:	00 00 
	  if (_Num)
    fab1:	48 39 c6             	cmp    %rax,%rsi
    fab4:	0f 85 f2 fe ff ff    	jne    f9ac <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x9c>
  for (size_t i = 0; i < imageCount; ++i) {
    faba:	48 85 ed             	test   %rbp,%rbp
    fabd:	0f 85 fc fe ff ff    	jne    f9bf <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0xaf>
    fac3:	e9 70 ff ff ff       	jmp    fa38 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x128>
    fac8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    facf:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    fad0:	48 c1 fa 03          	sar    $0x3,%rdx
	  _M_default_append(__new_size - size());
    fad4:	4c 89 fe             	mov    %r15,%rsi
  _framebuffers.resize(imageCount);
    fad7:	49 8d 7c 24 08       	lea    0x8(%r12),%rdi
    fadc:	48 29 d6             	sub    %rdx,%rsi
    fadf:	e8 2c 00 00 00       	call   fb10 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    fae4:	48 8b 43 08          	mov    0x8(%rbx),%rax
    fae8:	48 8b 33             	mov    (%rbx),%rsi
    faeb:	48 89 c2             	mov    %rax,%rdx
    faee:	48 29 f2             	sub    %rsi,%rdx
    faf1:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
    faf6:	e9 70 fe ff ff       	jmp    f96b <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D+0x5b>
	      std::__throw_bad_array_new_length();
    fafb:	e8 e0 68 ff ff       	call   63e0 <_ZSt28__throw_bad_array_new_lengthv@plt>
	if (__p)
    fb00:	48 89 c3             	mov    %rax,%rbx
    fb03:	e9 46 80 ff ff       	jmp    7b4e <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D.cold>
    fb08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    fb0f:	00 

000000000000fb10 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
    fb10:	48 85 f6             	test   %rsi,%rsi
    fb13:	0f 84 3f 01 00 00    	je     fc58 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x148>
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);

	  if (__size > max_size() || __navail > max_size() - __size)
    fb19:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    fb20:	ff ff 0f 
    vector<_Tp, _Alloc>::
    fb23:	41 57                	push   %r15
    fb25:	41 56                	push   %r14
    fb27:	41 55                	push   %r13
    fb29:	41 54                	push   %r12
    fb2b:	55                   	push   %rbp
    fb2c:	48 89 fd             	mov    %rdi,%rbp
    fb2f:	53                   	push   %rbx
    fb30:	48 89 f3             	mov    %rsi,%rbx
    fb33:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    fb37:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    fb3b:	49 89 d4             	mov    %rdx,%r12
    fb3e:	4c 2b 27             	sub    (%rdi),%r12
    fb41:	4c 89 e1             	mov    %r12,%rcx
    fb44:	48 c1 f9 03          	sar    $0x3,%rcx
	  if (__size > max_size() || __navail > max_size() - __size)
    fb48:	48 29 c8             	sub    %rcx,%rax
    fb4b:	48 89 c6             	mov    %rax,%rsi
					 - this->_M_impl._M_finish);
    fb4e:	48 8b 47 10          	mov    0x10(%rdi),%rax
    fb52:	48 29 d0             	sub    %rdx,%rax
    fb55:	48 c1 f8 03          	sar    $0x3,%rax
	    __builtin_unreachable();

	  if (__navail >= __n)
    fb59:	48 39 d8             	cmp    %rbx,%rax
    fb5c:	0f 83 ae 00 00 00    	jae    fc10 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x100>
	if (max_size() - size() < __n)
    fb62:	48 39 de             	cmp    %rbx,%rsi
    fb65:	0f 82 4e 01 00 00    	jb     fcb9 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x1a9>
	const size_type __len = size() + (std::max)(size(), __n);
    fb6b:	4c 8d 34 0b          	lea    (%rbx,%rcx,1),%r14
      if (__a < __b)
    fb6f:	48 39 d9             	cmp    %rbx,%rcx
    fb72:	0f 82 e8 00 00 00    	jb     fc60 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x150>
    fb78:	49 bd f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%r13
    fb7f:	ff ff 7f 
    fb82:	48 8d 04 09          	lea    (%rcx,%rcx,1),%rax
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    fb86:	48 39 c8             	cmp    %rcx,%rax
    fb89:	0f 83 36 01 00 00    	jae    fcc5 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x1b5>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    fb8f:	4c 89 ef             	mov    %r13,%rdi
    fb92:	e8 a9 69 ff ff       	call   6540 <_Znwm@plt>
		  __catch(...)
		    {
		      _M_deallocate(__new_start, __len);
		      __throw_exception_again;
		    }
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
    fb97:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
    fb9b:	48 8b 4d 08          	mov    0x8(%rbp),%rcx
		      std::__uninitialized_default_n_a(__new_start + __size,
    fb9f:	49 01 c4             	add    %rax,%r12
    fba2:	49 89 c7             	mov    %rax,%r15
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
    fba5:	49 01 c5             	add    %rax,%r13
    fba8:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
    fbaf:	00 
    fbb0:	4c 29 c1             	sub    %r8,%rcx
      if (__n <= 0)
    fbb3:	48 83 eb 01          	sub    $0x1,%rbx
    fbb7:	74 26                	je     fbdf <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0xcf>

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
    fbb9:	49 8d 7c 24 08       	lea    0x8(%r12),%rdi
	*__first = __tmp;
    fbbe:	48 8d 14 dd 00 00 00 	lea    0x0(,%rbx,8),%rdx
    fbc5:	00 
    fbc6:	31 f6                	xor    %esi,%esi
    fbc8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    fbcd:	4c 89 04 24          	mov    %r8,(%rsp)
    fbd1:	e8 ca 66 ff ff       	call   62a0 <memset@plt>
    fbd6:	4c 8b 04 24          	mov    (%rsp),%r8
    fbda:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      if (__count > 0)
    fbdf:	48 85 c9             	test   %rcx,%rcx
    fbe2:	0f 8f 98 00 00 00    	jg     fc80 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x170>
	if (__p)
    fbe8:	4d 85 c0             	test   %r8,%r8
    fbeb:	0f 85 bf 00 00 00    	jne    fcb0 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x1a0>
	      this->_M_impl._M_finish = __new_start + __size + __n;
    fbf1:	4b 8d 04 f7          	lea    (%r15,%r14,8),%rax
	      this->_M_impl._M_start = __new_start;
    fbf5:	4c 89 7d 00          	mov    %r15,0x0(%rbp)
	      this->_M_impl._M_finish = __new_start + __size + __n;
    fbf9:	48 89 45 08          	mov    %rax,0x8(%rbp)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
    fbfd:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
	    }
	}
    }
    fc01:	48 83 c4 18          	add    $0x18,%rsp
    fc05:	5b                   	pop    %rbx
    fc06:	5d                   	pop    %rbp
    fc07:	41 5c                	pop    %r12
    fc09:	41 5d                	pop    %r13
    fc0b:	41 5e                	pop    %r14
    fc0d:	41 5f                	pop    %r15
    fc0f:	c3                   	ret
    fc10:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
	      ++__first;
    fc17:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
      if (__n <= 0)
    fc1b:	48 83 eb 01          	sub    $0x1,%rbx
    fc1f:	74 1e                	je     fc3f <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x12f>
      std::__fill_a(__first, __first + __n, __value);
    fc21:	48 8d 04 d9          	lea    (%rcx,%rbx,8),%rax
	*__first = __tmp;
    fc25:	48 89 cf             	mov    %rcx,%rdi
    fc28:	31 f6                	xor    %esi,%esi
    fc2a:	48 29 d0             	sub    %rdx,%rax
    fc2d:	48 8d 58 f8          	lea    -0x8(%rax),%rbx
    fc31:	48 89 da             	mov    %rbx,%rdx
    fc34:	e8 67 66 ff ff       	call   62a0 <memset@plt>
    fc39:	48 89 c1             	mov    %rax,%rcx
      for (; __first != __last; ++__first)
    fc3c:	48 01 d9             	add    %rbx,%rcx
	      this->_M_impl._M_finish =
    fc3f:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
    }
    fc43:	48 83 c4 18          	add    $0x18,%rsp
    fc47:	5b                   	pop    %rbx
    fc48:	5d                   	pop    %rbp
    fc49:	41 5c                	pop    %r12
    fc4b:	41 5d                	pop    %r13
    fc4d:	41 5e                	pop    %r14
    fc4f:	41 5f                	pop    %r15
    fc51:	c3                   	ret
    fc52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    fc58:	c3                   	ret
    fc59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    fc60:	49 bd ff ff ff ff ff 	movabs $0xfffffffffffffff,%r13
    fc67:	ff ff 0f 
    fc6a:	4d 39 ee             	cmp    %r13,%r14
    fc6d:	4d 0f 46 ee          	cmovbe %r14,%r13
    fc71:	49 c1 e5 03          	shl    $0x3,%r13
    fc75:	e9 15 ff ff ff       	jmp    fb8f <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x7f>
    fc7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
    fc80:	4c 89 c6             	mov    %r8,%rsi
    fc83:	48 89 ca             	mov    %rcx,%rdx
    fc86:	4c 89 ff             	mov    %r15,%rdi
    fc89:	4c 89 04 24          	mov    %r8,(%rsp)
    fc8d:	e8 fe 6c ff ff       	call   6990 <memmove@plt>
			    - this->_M_impl._M_start);
    fc92:	48 8b 75 10          	mov    0x10(%rbp),%rsi
    fc96:	4c 8b 04 24          	mov    (%rsp),%r8
    fc9a:	4c 29 c6             	sub    %r8,%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    fc9d:	4c 89 c7             	mov    %r8,%rdi
    fca0:	e8 bb 68 ff ff       	call   6560 <_ZdlPvm@plt>
    fca5:	e9 47 ff ff ff       	jmp    fbf1 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0xe1>
    fcaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    fcb0:	48 8b 75 10          	mov    0x10(%rbp),%rsi
    fcb4:	4c 29 c6             	sub    %r8,%rsi
    fcb7:	eb e4                	jmp    fc9d <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x18d>
	  __throw_length_error(__N(__s));
    fcb9:	48 8d 3d 88 7c 02 00 	lea    0x27c88(%rip),%rdi        # 37948 <_ZSt19piecewise_construct+0x1>
    fcc0:	e8 bb 65 ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    fcc5:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
    fccc:	ff ff 0f 
    fccf:	48 39 d0             	cmp    %rdx,%rax
    fcd2:	48 0f 47 c2          	cmova  %rdx,%rax
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    fcd6:	4c 8d 2c c5 00 00 00 	lea    0x0(,%rax,8),%r13
    fcdd:	00 
    fcde:	e9 ac fe ff ff       	jmp    fb8f <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x7f>
    fce3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    fcea:	00 00 00 
    fced:	0f 1f 00             	nopl   (%rax)

000000000000fcf0 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0>:
  _makeShaderModule(VkDevice device, const std::string &shaderPath,
    fcf0:	41 57                	push   %r15
    fcf2:	41 56                	push   %r14
    fcf4:	41 55                	push   %r13
    fcf6:	41 54                	push   %r12
    fcf8:	55                   	push   %rbp
    fcf9:	53                   	push   %rbx
    fcfa:	48 89 f3             	mov    %rsi,%rbx
    fcfd:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    fd04:	4c 8d bc 24 60 01 00 	lea    0x160(%rsp),%r15
    fd0b:	00 
    fd0c:	48 89 3c 24          	mov    %rdi,(%rsp)
    fd10:	4c 8d 64 24 60       	lea    0x60(%rsp),%r12
    fd15:	4c 89 ff             	mov    %r15,%rdi
    fd18:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    fd1d:	e8 1e 64 ff ff       	call   6140 <_ZNSt8ios_baseC2Ev@plt>
      : _M_gcount(streamsize(0))
    fd22:	4c 8b 2d d7 0d 03 00 	mov    0x30dd7(%rip),%r13        # 40b00 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x8>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    fd29:	31 c9                	xor    %ecx,%ecx
      { this->init(0); }
    fd2b:	31 f6                	xor    %esi,%esi
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    fd2d:	48 8d 05 7c 0b 03 00 	lea    0x30b7c(%rip),%rax        # 408b0 <_ZTVSt9basic_iosIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    fd34:	66 0f ef c0          	pxor   %xmm0,%xmm0
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    fd38:	66 89 8c 24 40 02 00 	mov    %cx,0x240(%rsp)
    fd3f:	00 
      : _M_gcount(streamsize(0))
    fd40:	48 8b 0d c1 0d 03 00 	mov    0x30dc1(%rip),%rcx        # 40b08 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    fd47:	0f 11 84 24 48 02 00 	movups %xmm0,0x248(%rsp)
    fd4e:	00 
    fd4f:	0f 11 84 24 58 02 00 	movups %xmm0,0x258(%rsp)
    fd56:	00 
    fd57:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    fd5e:	00 
    fd5f:	49 8b 45 e8          	mov    -0x18(%r13),%rax
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    fd63:	48 c7 84 24 38 02 00 	movq   $0x0,0x238(%rsp)
    fd6a:	00 00 00 00 00 
    fd6f:	4c 89 6c 24 60       	mov    %r13,0x60(%rsp)
    fd74:	48 89 4c 04 60       	mov    %rcx,0x60(%rsp,%rax,1)
    fd79:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
    fd80:	00 00 
      { this->init(0); }
    fd82:	49 8b 7d e8          	mov    -0x18(%r13),%rdi
    fd86:	4c 01 e7             	add    %r12,%rdi
    fd89:	e8 f2 69 ff ff       	call   6780 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>
      : __istream_type(), _M_filebuf()
    fd8e:	48 8d 05 93 0c 03 00 	lea    0x30c93(%rip),%rax        # 40a28 <_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
    fd95:	4c 8d 74 24 70       	lea    0x70(%rsp),%r14
    fd9a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    fd9f:	4c 89 f7             	mov    %r14,%rdi
    fda2:	48 83 c0 28          	add    $0x28,%rax
    fda6:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    fdad:	00 
    fdae:	e8 dd 67 ff ff       	call   6590 <_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev@plt>
	this->init(&_M_filebuf);
    fdb3:	4c 89 f6             	mov    %r14,%rsi
    fdb6:	4c 89 ff             	mov    %r15,%rdi
    fdb9:	e8 c2 69 ff ff       	call   6780 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>
      { return open(__s.c_str(), __mode); }
    fdbe:	48 8b 33             	mov    (%rbx),%rsi
    fdc1:	ba 0e 00 00 00       	mov    $0xe,%edx
    fdc6:	4c 89 f7             	mov    %r14,%rdi
    fdc9:	e8 c2 66 ff ff       	call   6490 <_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode@plt>
	  this->setstate(ios_base::failbit);
    fdce:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
    fdd3:	48 8b 7a e8          	mov    -0x18(%rdx),%rdi
    fdd7:	4c 01 e7             	add    %r12,%rdi
	if (!_M_filebuf.open(__s, __mode | ios_base::in))
    fdda:	48 85 c0             	test   %rax,%rax
    fddd:	0f 84 b5 01 00 00    	je     ff98 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x2a8>
	  this->clear();
    fde3:	31 f6                	xor    %esi,%esi
    fde5:	e8 06 6c ff ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
      { return _M_file.is_open(); }
    fdea:	48 8d 84 24 d8 00 00 	lea    0xd8(%rsp),%rax
    fdf1:	00 
    fdf2:	48 89 c7             	mov    %rax,%rdi
    fdf5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    fdfa:	e8 e1 62 ff ff       	call   60e0 <_ZNKSt12__basic_fileIcE7is_openEv@plt>
    if (!file.is_open()) {
    fdff:	84 c0                	test   %al,%al
    fe01:	0f 84 2b 02 00 00    	je     10032 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x342>
    size_t bufferSize = static_cast<size_t>(file.tellg());
    fe07:	4c 89 e7             	mov    %r12,%rdi
    fe0a:	e8 21 6c ff ff       	call   6a30 <_ZNSi5tellgEv@plt>
    fe0f:	48 89 c3             	mov    %rax,%rbx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    fe12:	48 85 c0             	test   %rax,%rax
    fe15:	0f 88 e5 01 00 00    	js     10000 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x310>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    fe1b:	0f 84 8f 01 00 00    	je     ffb0 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x2c0>
    fe21:	48 89 c7             	mov    %rax,%rdi
    fe24:	e8 17 67 ff ff       	call   6540 <_Znwm@plt>
      if (__n <= 0)
    fe29:	48 89 da             	mov    %rbx,%rdx
    fe2c:	c6 00 00             	movb   $0x0,(%rax)
    fe2f:	48 89 c5             	mov    %rax,%rbp
    fe32:	48 83 ea 01          	sub    $0x1,%rdx
    fe36:	0f 85 34 01 00 00    	jne    ff70 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x280>
    file.seekg(0);
    fe3c:	31 f6                	xor    %esi,%esi
    fe3e:	31 d2                	xor    %edx,%edx
    fe40:	4c 89 e7             	mov    %r12,%rdi
    fe43:	e8 d8 68 ff ff       	call   6720 <_ZNSi5seekgESt4fposI11__mbstate_tE@plt>
    fe48:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
    fe4f:	00 00 
    file.read(buffer.data(), bufferSize);
    fe51:	48 89 da             	mov    %rbx,%rdx
    fe54:	48 89 ee             	mov    %rbp,%rsi
    fe57:	4c 89 e7             	mov    %r12,%rdi
    fe5a:	e8 a1 68 ff ff       	call   6700 <_ZNSi4readEPcl@plt>
	if (!_M_filebuf.close())
    fe5f:	4c 89 f7             	mov    %r14,%rdi
    fe62:	e8 69 62 ff ff       	call   60d0 <_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv@plt>
    fe67:	48 85 c0             	test   %rax,%rax
    fe6a:	0f 84 74 01 00 00    	je     ffe4 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x2f4>
    shaderModuleInfo.codeSize = buffer.size();
    fe70:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    fe75:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    VkShaderModuleCreateInfo shaderModuleInfo{};
    fe7a:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    fe7e:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
    fe83:	48 8b 3c 24          	mov    (%rsp),%rdi
    fe87:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
    VkShaderModuleCreateInfo shaderModuleInfo{};
    fe8c:	c7 44 24 44 00 00 00 	movl   $0x0,0x44(%rsp)
    fe93:	00 
    shaderModuleInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
    fe94:	c7 44 24 30 10 00 00 	movl   $0x10,0x30(%rsp)
    fe9b:	00 
    shaderModuleInfo.codeSize = buffer.size();
    fe9c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    shaderModuleInfo.pCode = reinterpret_cast<const uint32_t *>(buffer.data());
    fea1:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
    VkShaderModuleCreateInfo shaderModuleInfo{};
    fea6:	0f 11 44 24 34       	movups %xmm0,0x34(%rsp)
    if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    feab:	e8 40 65 ff ff       	call   63f0 <vkCreateShaderModule@plt>
    feb0:	85 c0                	test   %eax,%eax
    feb2:	0f 85 c6 7c ff ff    	jne    7b7e <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold>
    return shaderModule;
    feb8:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
	if (__p)
    febd:	48 85 ed             	test   %rbp,%rbp
    fec0:	74 0b                	je     fecd <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x1dd>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    fec2:	48 89 de             	mov    %rbx,%rsi
    fec5:	48 89 ef             	mov    %rbp,%rdi
    fec8:	e8 93 66 ff ff       	call   6560 <_ZdlPvm@plt>
      { }
    fecd:	48 8d 05 54 0b 03 00 	lea    0x30b54(%rip),%rax        # 40a28 <_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
	  { this->close(); }
    fed4:	4c 89 f7             	mov    %r14,%rdi
      { }
    fed7:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    fedc:	48 83 c0 28          	add    $0x28,%rax
    fee0:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    fee7:	00 
      }
    fee8:	48 8d 05 81 0b 03 00 	lea    0x30b81(%rip),%rax        # 40a70 <_ZTVSt13basic_filebufIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    feef:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
	  { this->close(); }
    fef4:	e8 d7 61 ff ff       	call   60d0 <_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv@plt>
      }
    fef9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    fefe:	e8 bd 6b ff ff       	call   6ac0 <_ZNSt12__basic_fileIcED1Ev@plt>
    ff03:	48 8d 05 3e 0a 03 00 	lea    0x30a3e(%rip),%rax        # 40948 <_ZTVSt15basic_streambufIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    ff0a:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
    ff11:	00 
    ff12:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    ff17:	e8 14 69 ff ff       	call   6830 <_ZNSt6localeD1Ev@plt>
      { _M_gcount = streamsize(0); }
    ff1c:	49 8b 45 e8          	mov    -0x18(%r13),%rax
    ff20:	4c 89 6c 24 60       	mov    %r13,0x60(%rsp)
      ~basic_ios() { }
    ff25:	4c 89 ff             	mov    %r15,%rdi
    ff28:	48 8b 0d d9 0b 03 00 	mov    0x30bd9(%rip),%rcx        # 40b08 <_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    ff2f:	48 89 4c 04 60       	mov    %rcx,0x60(%rsp,%rax,1)
    ff34:	48 8d 05 75 09 03 00 	lea    0x30975(%rip),%rax        # 408b0 <_ZTVSt9basic_iosIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
    ff3b:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
    ff42:	00 
    ff43:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
    ff4a:	00 00 
    ff4c:	e8 4f 62 ff ff       	call   61a0 <_ZNSt8ios_baseD2Ev@plt>
  }
    ff51:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
    ff58:	4c 89 e0             	mov    %r12,%rax
    ff5b:	5b                   	pop    %rbx
    ff5c:	5d                   	pop    %rbp
    ff5d:	41 5c                	pop    %r12
    ff5f:	41 5d                	pop    %r13
    ff61:	41 5e                	pop    %r14
    ff63:	41 5f                	pop    %r15
    ff65:	c3                   	ret
    ff66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ff6d:	00 00 00 
	      ++__first;
    ff70:	48 8d 78 01          	lea    0x1(%rax),%rdi
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    ff74:	31 f6                	xor    %esi,%esi
    ff76:	e8 25 63 ff ff       	call   62a0 <memset@plt>
    file.seekg(0);
    ff7b:	31 f6                	xor    %esi,%esi
    ff7d:	31 d2                	xor    %edx,%edx
    ff7f:	4c 89 e7             	mov    %r12,%rdi
    ff82:	e8 99 67 ff ff       	call   6720 <_ZNSi5seekgESt4fposI11__mbstate_tE@plt>
    ff87:	48 89 5c 24 18       	mov    %rbx,0x18(%rsp)
    ff8c:	e9 c0 fe ff ff       	jmp    fe51 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x161>
    ff91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ff98:	8b 77 20             	mov    0x20(%rdi),%esi
    ff9b:	83 ce 04             	or     $0x4,%esi
      { this->clear(this->rdstate() | __state); }
    ff9e:	e8 4d 6a ff ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
    ffa3:	e9 42 fe ff ff       	jmp    fdea <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0xfa>
    ffa8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    ffaf:	00 
    ffb0:	31 f6                	xor    %esi,%esi
    ffb2:	31 d2                	xor    %edx,%edx
    ffb4:	4c 89 e7             	mov    %r12,%rdi
    ffb7:	e8 64 67 ff ff       	call   6720 <_ZNSi5seekgESt4fposI11__mbstate_tE@plt>
    file.read(buffer.data(), bufferSize);
    ffbc:	31 d2                	xor    %edx,%edx
    ffbe:	31 f6                	xor    %esi,%esi
    ffc0:	4c 89 e7             	mov    %r12,%rdi
    ffc3:	e8 38 67 ff ff       	call   6700 <_ZNSi4readEPcl@plt>
	if (!_M_filebuf.close())
    ffc8:	4c 89 f7             	mov    %r14,%rdi
    ffcb:	e8 00 61 ff ff       	call   60d0 <_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv@plt>
    ffd0:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
    ffd7:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ffd9:	31 ed                	xor    %ebp,%ebp
    ffdb:	48 85 c0             	test   %rax,%rax
    ffde:	0f 85 8c fe ff ff    	jne    fe70 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x180>
	  this->setstate(ios_base::failbit);
    ffe4:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    ffe9:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    ffed:	4c 01 e7             	add    %r12,%rdi
    fff0:	8b 77 20             	mov    0x20(%rdi),%esi
    fff3:	83 ce 04             	or     $0x4,%esi
    fff6:	e8 f5 69 ff ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
    fffb:	e9 70 fe ff ff       	jmp    fe70 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x180>
	  __throw_length_error(
   10000:	48 8d 3d e9 75 02 00 	lea    0x275e9(%rip),%rdi        # 375f0 <_ZTSN3vkw10ImageViewsE+0x220>
   10007:	e8 74 62 ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
   1000c:	e9 9f 7b ff ff       	jmp    7bb0 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x32>
	__catch(...)
   10011:	48 89 c7             	mov    %rax,%rdi
   10014:	e9 9c 7b ff ff       	jmp    7bb5 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x37>
    file.seekg(0);
   10019:	49 89 c5             	mov    %rax,%r13
   1001c:	e9 be 7b ff ff       	jmp    7bdf <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x61>
   10021:	eb f6                	jmp    10019 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x329>
   10023:	eb f4                	jmp    10019 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0+0x329>
   10025:	e9 c5 7b ff ff       	jmp    7bef <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x71>
   1002a:	49 89 c5             	mov    %rax,%r13
   1002d:	e9 a2 7b ff ff       	jmp    7bd4 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x56>
   10032:	e9 bd 7b ff ff       	jmp    7bf4 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x76>
      ~basic_ios() { }
   10037:	48 89 c3             	mov    %rax,%rbx
   1003a:	e9 9e 7c ff ff       	jmp    7cdd <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x15f>
      }
   1003f:	48 89 c3             	mov    %rax,%rbx
   10042:	e9 72 7c ff ff       	jmp    7cb9 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x13b>
   10047:	48 89 c3             	mov    %rax,%rbx
   1004a:	e9 72 7c ff ff       	jmp    7cc1 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0.cold+0x143>
   1004f:	90                   	nop

0000000000010050 <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE>:
void GraphicsPipeline::_initialize(const CustomArgs &args) {
   10050:	41 57                	push   %r15
   10052:	41 56                	push   %r14
   10054:	41 55                	push   %r13
      _makeShaderModule(args.device.ref(), absoluteDirectory + args.vertPath);
   10056:	4c 8d 2d 03 17 03 00 	lea    0x31703(%rip),%r13        # 41760 <_ZN4rtvc17absoluteDirectoryB5cxx11E>
void GraphicsPipeline::_initialize(const CustomArgs &args) {
   1005d:	41 54                	push   %r12
   1005f:	55                   	push   %rbp
   10060:	48 89 fd             	mov    %rdi,%rbp
   10063:	53                   	push   %rbx
   10064:	48 89 f3             	mov    %rsi,%rbx
   10067:	48 81 ec f8 03 00 00 	sub    $0x3f8,%rsp
      _makeShaderModule(args.device.ref(), absoluteDirectory + args.vertPath);
   1006e:	48 8b 56 18          	mov    0x18(%rsi),%rdx
   10072:	4c 89 ee             	mov    %r13,%rsi
   10075:	4c 8d a4 24 60 03 00 	lea    0x360(%rsp),%r12
   1007c:	00 
   1007d:	4c 89 e7             	mov    %r12,%rdi
   10080:	e8 ab 06 00 00       	call   10730 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>
   10085:	48 8b 03             	mov    (%rbx),%rax
   10088:	31 d2                	xor    %edx,%edx
   1008a:	4c 89 e6             	mov    %r12,%rsi
   1008d:	48 8b 78 08          	mov    0x8(%rax),%rdi
   10091:	e8 5a fc ff ff       	call   fcf0 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0>
      { return _M_dataplus._M_p; }
   10096:	48 8b bc 24 60 03 00 	mov    0x360(%rsp),%rdi
   1009d:	00 
	if (!_M_is_local())
   1009e:	4c 8d bc 24 70 03 00 	lea    0x370(%rsp),%r15
   100a5:	00 
   100a6:	49 89 c6             	mov    %rax,%r14
   100a9:	4c 39 ff             	cmp    %r15,%rdi
   100ac:	74 11                	je     100bf <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE+0x6f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   100ae:	48 8b 84 24 70 03 00 	mov    0x370(%rsp),%rax
   100b5:	00 
   100b6:	48 8d 70 01          	lea    0x1(%rax),%rsi
   100ba:	e8 a1 64 ff ff       	call   6560 <_ZdlPvm@plt>
      _makeShaderModule(args.device.ref(), absoluteDirectory + args.fragPath);
   100bf:	48 8b 53 20          	mov    0x20(%rbx),%rdx
   100c3:	4c 89 ee             	mov    %r13,%rsi
   100c6:	4c 89 e7             	mov    %r12,%rdi
   100c9:	e8 62 06 00 00       	call   10730 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>
   100ce:	48 8b 03             	mov    (%rbx),%rax
   100d1:	31 d2                	xor    %edx,%edx
   100d3:	4c 89 e6             	mov    %r12,%rsi
   100d6:	48 8b 78 08          	mov    0x8(%rax),%rdi
   100da:	e8 11 fc ff ff       	call   fcf0 <_ZN3vkw16GraphicsPipeline17_makeShaderModuleEP10VkDevice_TRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks.isra.0>
   100df:	48 8d 94 24 60 01 00 	lea    0x160(%rsp),%rdx
   100e6:	00 
   100e7:	49 89 c5             	mov    %rax,%r13
   100ea:	48 8d 84 24 30 02 00 	lea    0x230(%rsp),%rax
   100f1:	00 
      { return _M_dataplus._M_p; }
   100f2:	48 8b bc 24 60 03 00 	mov    0x360(%rsp),%rdi
   100f9:	00 
   100fa:	66 48 0f 6e da       	movq   %rdx,%xmm3
   100ff:	66 48 0f 6e e8       	movq   %rax,%xmm5
   10104:	48 8d 94 24 00 03 00 	lea    0x300(%rsp),%rdx
   1010b:	00 
   1010c:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
   10113:	00 
   10114:	66 48 0f 6e e2       	movq   %rdx,%xmm4
   10119:	66 0f 6c dd          	punpcklqdq %xmm5,%xmm3
   1011d:	66 48 0f 6e f0       	movq   %rax,%xmm6
   10122:	0f 29 5c 24 10       	movaps %xmm3,0x10(%rsp)
   10127:	66 0f 6c e6          	punpcklqdq %xmm6,%xmm4
   1012b:	0f 29 24 24          	movaps %xmm4,(%rsp)
	if (!_M_is_local())
   1012f:	4c 39 ff             	cmp    %r15,%rdi
   10132:	74 11                	je     10145 <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE+0xf5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   10134:	48 8b 84 24 70 03 00 	mov    0x370(%rsp),%rax
   1013b:	00 
   1013c:	48 8d 70 01          	lea    0x1(%rax),%rsi
   10140:	e8 1b 64 ff ff       	call   6560 <_ZdlPvm@plt>
                                                    fragShaderStageInfo};
   10145:	48 8b 05 1c 78 02 00 	mov    0x2781c(%rip),%rax        # 37968 <_ZSt19piecewise_construct+0x21>
  }

  static std::array<VkVertexInputAttributeDescription, attributeCount>
  getAttributeDescriptions() {
    std::array<VkVertexInputAttributeDescription, attributeCount>
        attributeDescriptions{};
   1014c:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10150:	48 8b 15 19 78 02 00 	mov    0x27819(%rip),%rdx        # 37970 <_ZSt19piecewise_construct+0x29>
   10157:	4c 89 b4 24 18 03 00 	mov    %r14,0x318(%rsp)
   1015e:	00 
   1015f:	0f 29 84 24 10 01 00 	movaps %xmm0,0x110(%rsp)
   10166:	00 
  viewport.width = static_cast<float>(args.swapchain.extent().width);
   10167:	66 0f ef c9          	pxor   %xmm1,%xmm1
  viewport.height = static_cast<float>(args.swapchain.extent().height);
   1016b:	66 0f ef d2          	pxor   %xmm2,%xmm2
  vkCreatePipelineLayout(args.device.ref(), &pipelineLayoutInfo, nullptr,
   1016f:	48 8d 4d 20          	lea    0x20(%rbp),%rcx
                                                    fragShaderStageInfo};
   10173:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
   1017a:	00 
   1017b:	48 8d 05 e0 77 02 00 	lea    0x277e0(%rip),%rax        # 37962 <_ZSt19piecewise_construct+0x1b>
  vkCreatePipelineLayout(args.device.ref(), &pipelineLayoutInfo, nullptr,
   10182:	48 8d b4 24 c0 01 00 	lea    0x1c0(%rsp),%rsi
   10189:	00 
                                                    fragShaderStageInfo};
   1018a:	48 89 84 24 20 03 00 	mov    %rax,0x320(%rsp)
   10191:	00 
   10192:	48 89 84 24 50 03 00 	mov    %rax,0x350(%rsp)
   10199:	00 
  auto bindingDescription = vkw::Vertex::getBindingDescription();
   1019a:	48 8b 05 d7 77 02 00 	mov    0x277d7(%rip),%rax        # 37978 <_ZSt19piecewise_construct+0x31>
   101a1:	0f 29 84 24 00 01 00 	movaps %xmm0,0x100(%rsp)
   101a8:	00 
   101a9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    attributeDescriptions[0].format = VK_FORMAT_R32G32B32_SFLOAT;
    attributeDescriptions[0].offset = offsetof(Vertex, position);

    attributeDescriptions[1].binding = 0;
    attributeDescriptions[1].location = 1;
    attributeDescriptions[1].format = VK_FORMAT_R32G32B32_SFLOAT;
   101ae:	48 8b 05 cb 77 02 00 	mov    0x277cb(%rip),%rax        # 37980 <_ZSt19piecewise_construct+0x39>
  VkPipelineVertexInputStateCreateInfo vertInputInfo{};
   101b5:	0f 11 84 24 34 01 00 	movups %xmm0,0x134(%rsp)
   101bc:	00 
   101bd:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
   101c4:	00 
    attributeDescriptions[1].offset = offsetof(Vertex, color);

    attributeDescriptions[2].binding = 0;
    attributeDescriptions[2].location = 2;
    attributeDescriptions[2].format = VK_FORMAT_R32G32_SFLOAT;
   101c5:	48 8b 05 bc 77 02 00 	mov    0x277bc(%rip),%rax        # 37988 <_ZSt19piecewise_construct+0x41>
                                                    fragShaderStageInfo};
   101cc:	48 89 94 24 40 03 00 	mov    %rdx,0x340(%rsp)
   101d3:	00 
   101d4:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
   101db:	00 
  vertInputInfo.pVertexBindingDescriptions = &bindingDescription;
   101dc:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
   101e1:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
   101e8:	00 
  vertInputInfo.pVertexAttributeDescriptions = attributeDescriptions.data();
   101e9:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
   101f0:	00 
                                                    fragShaderStageInfo};
   101f1:	4c 89 ac 24 48 03 00 	mov    %r13,0x348(%rsp)
   101f8:	00 
        attributeDescriptions{};
   101f9:	48 c7 84 24 20 01 00 	movq   $0x0,0x120(%rsp)
   10200:	00 00 00 00 00 
   10205:	c7 84 24 00 03 00 00 	movl   $0x12,0x300(%rsp)
   1020c:	12 00 00 00 
   10210:	48 c7 84 24 08 03 00 	movq   $0x0,0x308(%rsp)
   10217:	00 00 00 00 00 
   1021c:	48 c7 84 24 28 03 00 	movq   $0x0,0x328(%rsp)
   10223:	00 00 00 00 00 
   10228:	c7 84 24 30 03 00 00 	movl   $0x12,0x330(%rsp)
   1022f:	12 00 00 00 
   10233:	48 c7 84 24 38 03 00 	movq   $0x0,0x338(%rsp)
   1023a:	00 00 00 00 00 
   1023f:	48 c7 84 24 58 03 00 	movq   $0x0,0x358(%rsp)
   10246:	00 00 00 00 00 
  auto bindingDescription = vkw::Vertex::getBindingDescription();
   1024b:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%rsp)
   10252:	00 
    attributeDescriptions[0].format = VK_FORMAT_R32G32B32_SFLOAT;
   10253:	c7 84 24 08 01 00 00 	movl   $0x6a,0x108(%rsp)
   1025a:	6a 00 00 00 
    attributeDescriptions[1].location = 1;
   1025e:	c7 84 24 10 01 00 00 	movl   $0x1,0x110(%rsp)
   10265:	01 00 00 00 
    attributeDescriptions[2].location = 2;
   10269:	c7 84 24 20 01 00 00 	movl   $0x2,0x120(%rsp)
   10270:	02 00 00 00 
  VkPipelineVertexInputStateCreateInfo vertInputInfo{};
   10274:	c7 84 24 54 01 00 00 	movl   $0x0,0x154(%rsp)
   1027b:	00 00 00 00 
  vertInputInfo.sType =
   1027f:	c7 84 24 30 01 00 00 	movl   $0x13,0x130(%rsp)
   10286:	13 00 00 00 
  vertInputInfo.vertexBindingDescriptionCount = 1;
   1028a:	c7 84 24 44 01 00 00 	movl   $0x1,0x144(%rsp)
   10291:	01 00 00 00 
  vertInputInfo.vertexAttributeDescriptionCount =
   10295:	c7 84 24 50 01 00 00 	movl   $0x3,0x150(%rsp)
   1029c:	03 00 00 00 
  vertInputInfo.pVertexAttributeDescriptions = attributeDescriptions.data();
   102a0:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
   102a7:	00 
  viewport.width = static_cast<float>(args.swapchain.extent().width);
   102a8:	48 8b 43 08          	mov    0x8(%rbx),%rax
  VkViewport viewport{};
   102ac:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
  viewport.width = static_cast<float>(args.swapchain.extent().width);
   102b1:	8b 50 14             	mov    0x14(%rax),%edx
  VkPipelineInputAssemblyStateCreateInfo inputAssemblyInfo{};
   102b4:	0f 11 84 24 94 00 00 	movups %xmm0,0x94(%rsp)
   102bb:	00 
  inputAssemblyInfo.sType =
   102bc:	c7 84 24 90 00 00 00 	movl   $0x14,0x90(%rsp)
   102c3:	14 00 00 00 
  viewport.width = static_cast<float>(args.swapchain.extent().width);
   102c7:	f3 48 0f 2a ca       	cvtsi2ss %rdx,%xmm1
  viewport.height = static_cast<float>(args.swapchain.extent().height);
   102cc:	8b 50 18             	mov    0x18(%rax),%edx
  scissor.extent = args.swapchain.extent();
   102cf:	48 8b 40 14          	mov    0x14(%rax),%rax
  VkPipelineInputAssemblyStateCreateInfo inputAssemblyInfo{};
   102d3:	0f 11 84 24 a0 00 00 	movups %xmm0,0xa0(%rsp)
   102da:	00 
  VkPipelineRasterizationStateCreateInfo rastStateInfo{};
   102db:	0f 11 84 24 44 02 00 	movups %xmm0,0x244(%rsp)
   102e2:	00 
  viewport.height = static_cast<float>(args.swapchain.extent().height);
   102e3:	f3 48 0f 2a d2       	cvtsi2ss %rdx,%xmm2
  scissor.extent = args.swapchain.extent();
   102e8:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  viewportStateInfo.pViewports = &viewport;
   102ed:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  vkCreatePipelineLayout(args.device.ref(), &pipelineLayoutInfo, nullptr,
   102f2:	31 d2                	xor    %edx,%edx
  viewportStateInfo.pViewports = &viewport;
   102f4:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
   102fb:	00 
  viewportStateInfo.pScissors = &scissor;
   102fc:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  VkPipelineRasterizationStateCreateInfo rastStateInfo{};
   10301:	0f 11 84 24 54 02 00 	movups %xmm0,0x254(%rsp)
   10308:	00 
  VkPipelineViewportStateCreateInfo viewportStateInfo{};
   10309:	0f 11 84 24 64 01 00 	movups %xmm0,0x164(%rsp)
   10310:	00 
  viewport.width = static_cast<float>(args.swapchain.extent().width);
   10311:	0f 14 ca             	unpcklps %xmm2,%xmm1
  VkPipelineRasterizationStateCreateInfo rastStateInfo{};
   10314:	0f 11 84 24 60 02 00 	movups %xmm0,0x260(%rsp)
   1031b:	00 
  viewport.width = static_cast<float>(args.swapchain.extent().width);
   1031c:	0f 13 4c 24 58       	movlps %xmm1,0x58(%rsp)
  viewport.maxDepth = 1.0f;
   10321:	f3 0f 10 0d 87 76 02 	movss  0x27687(%rip),%xmm1        # 379b0 <_ZSt19piecewise_construct+0x69>
   10328:	00 
  VkPipelineRasterizationStateCreateInfo rastStateInfo{};
   10329:	0f 11 84 24 34 02 00 	movups %xmm0,0x234(%rsp)
   10330:	00 
  viewport.maxDepth = 1.0f;
   10331:	f3 0f 11 4c 24 64    	movss  %xmm1,0x64(%rsp)
  rastStateInfo.lineWidth = 1.0f;
   10337:	f3 0f 11 8c 24 68 02 	movss  %xmm1,0x268(%rsp)
   1033e:	00 00 
  VkPipelineMultisampleStateCreateInfo multisampleStateInfo{};
   10340:	0f 11 84 24 94 01 00 	movups %xmm0,0x194(%rsp)
   10347:	00 
   10348:	0f 11 84 24 a4 01 00 	movups %xmm0,0x1a4(%rsp)
   1034f:	00 
  viewportStateInfo.pScissors = &scissor;
   10350:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
   10357:	00 
  inputAssemblyInfo.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
   10358:	c7 84 24 a4 00 00 00 	movl   $0x3,0xa4(%rsp)
   1035f:	03 00 00 00 
  VkViewport viewport{};
   10363:	c7 44 24 60 00 00 00 	movl   $0x0,0x60(%rsp)
   1036a:	00 
  VkRect2D scissor{};
   1036b:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
   10372:	00 00 
  VkPipelineViewportStateCreateInfo viewportStateInfo{};
   10374:	c7 84 24 84 01 00 00 	movl   $0x0,0x184(%rsp)
   1037b:	00 00 00 00 
  viewportStateInfo.sType =
   1037f:	c7 84 24 60 01 00 00 	movl   $0x16,0x160(%rsp)
   10386:	16 00 00 00 
  viewportStateInfo.viewportCount = 1;
   1038a:	c7 84 24 74 01 00 00 	movl   $0x1,0x174(%rsp)
   10391:	01 00 00 00 
  viewportStateInfo.scissorCount = 1;
   10395:	c7 84 24 80 01 00 00 	movl   $0x1,0x180(%rsp)
   1039c:	01 00 00 00 
  rastStateInfo.sType =
   103a0:	c7 84 24 30 02 00 00 	movl   $0x17,0x230(%rsp)
   103a7:	17 00 00 00 
  rastStateInfo.cullMode = VK_CULL_MODE_BACK_BIT;
   103ab:	c7 84 24 50 02 00 00 	movl   $0x2,0x250(%rsp)
   103b2:	02 00 00 00 
  VkPipelineMultisampleStateCreateInfo multisampleStateInfo{};
   103b6:	0f 11 84 24 b0 01 00 	movups %xmm0,0x1b0(%rsp)
   103bd:	00 
  colorBlendAttachment.blendEnable = VK_TRUE;
   103be:	48 8b 05 cb 75 02 00 	mov    0x275cb(%rip),%rax        # 37990 <_ZSt19piecewise_construct+0x49>
  VkPipelineColorBlendStateCreateInfo colorBlendState{};
   103c5:	0f 11 84 24 04 02 00 	movups %xmm0,0x204(%rsp)
   103cc:	00 
  colorBlendAttachment.blendEnable = VK_TRUE;
   103cd:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
   103d4:	00 
  VkPipelineColorBlendAttachmentState colorBlendAttachment{};
   103d5:	48 b8 00 00 00 00 0f 	movabs $0xf00000000,%rax
   103dc:	00 00 00 
   103df:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   103e6:	00 
  colorBlendState.logicOp = VK_LOGIC_OP_COPY;
   103e7:	48 8b 05 aa 75 02 00 	mov    0x275aa(%rip),%rax        # 37998 <_ZSt19piecewise_construct+0x51>
  VkPipelineColorBlendStateCreateInfo colorBlendState{};
   103ee:	0f 11 84 24 14 02 00 	movups %xmm0,0x214(%rsp)
   103f5:	00 
  colorBlendState.logicOp = VK_LOGIC_OP_COPY;
   103f6:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
   103fd:	00 
  colorBlendState.pAttachments = &colorBlendAttachment;
   103fe:	48 8d 84 24 b0 00 00 	lea    0xb0(%rsp),%rax
   10405:	00 
   10406:	48 89 84 24 10 02 00 	mov    %rax,0x210(%rsp)
   1040d:	00 
  const VkDescriptorSetLayout &ref() const noexcept { return _setLayout; }
   1040e:	48 8b 43 10          	mov    0x10(%rbx),%rax
  VkPipelineColorBlendStateCreateInfo colorBlendState{};
   10412:	0f 11 84 24 f4 01 00 	movups %xmm0,0x1f4(%rsp)
   10419:	00 
   1041a:	48 83 c0 08          	add    $0x8,%rax
  VkPipelineLayoutCreateInfo pipelineLayoutInfo{};
   1041e:	0f 11 84 24 c4 01 00 	movups %xmm0,0x1c4(%rsp)
   10425:	00 
  pipelineLayoutInfo.pSetLayouts = &args.desSetLayout.ref();
   10426:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
   1042d:	00 
  vkCreatePipelineLayout(args.device.ref(), &pipelineLayoutInfo, nullptr,
   1042e:	48 8b 03             	mov    (%rbx),%rax
  VkPipelineLayoutCreateInfo pipelineLayoutInfo{};
   10431:	0f 11 84 24 e0 01 00 	movups %xmm0,0x1e0(%rsp)
   10438:	00 
  colorBlendAttachment.dstColorBlendFactor =
   10439:	48 c7 84 24 b8 00 00 	movq   $0x7,0xb8(%rsp)
   10440:	00 07 00 00 00 
  VkPipelineColorBlendAttachmentState colorBlendAttachment{};
   10445:	48 c7 84 24 c0 00 00 	movq   $0x1,0xc0(%rsp)
   1044c:	00 01 00 00 00 
  VkPipelineColorBlendStateCreateInfo colorBlendState{};
   10451:	c7 84 24 24 02 00 00 	movl   $0x0,0x224(%rsp)
   10458:	00 00 00 00 
  vkCreatePipelineLayout(args.device.ref(), &pipelineLayoutInfo, nullptr,
   1045c:	48 8b 78 08          	mov    0x8(%rax),%rdi
  multisampleStateInfo.minSampleShading = 1.0f;
   10460:	f3 0f 11 8c 24 ac 01 	movss  %xmm1,0x1ac(%rsp)
   10467:	00 00 
  multisampleStateInfo.sType =
   10469:	c7 84 24 90 01 00 00 	movl   $0x18,0x190(%rsp)
   10470:	18 00 00 00 
  multisampleStateInfo.rasterizationSamples = VK_SAMPLE_COUNT_1_BIT;
   10474:	c7 84 24 a4 01 00 00 	movl   $0x1,0x1a4(%rsp)
   1047b:	01 00 00 00 
  colorBlendState.sType =
   1047f:	c7 84 24 f0 01 00 00 	movl   $0x1a,0x1f0(%rsp)
   10486:	1a 00 00 00 
  pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
   1048a:	c7 84 24 c0 01 00 00 	movl   $0x1e,0x1c0(%rsp)
   10491:	1e 00 00 00 
  pipelineLayoutInfo.setLayoutCount = 1;
   10495:	c7 84 24 d4 01 00 00 	movl   $0x1,0x1d4(%rsp)
   1049c:	01 00 00 00 
  vkCreatePipelineLayout(args.device.ref(), &pipelineLayoutInfo, nullptr,
   104a0:	e8 8b 5f ff ff       	call   6430 <vkCreatePipelineLayout@plt>
  colorAttachment.format = args.swapchain.format();
   104a5:	48 8b 43 08          	mov    0x8(%rbx),%rax
  VkAttachmentDescription colorAttachment{};
   104a9:	66 0f ef c0          	pxor   %xmm0,%xmm0
  vkCreateRenderPass(args.device.ref(), &renderPassInfo, nullptr, &_renderPass);
   104ad:	31 d2                	xor    %edx,%edx
  VkAttachmentDescription colorAttachment{};
   104af:	0f 29 84 24 d0 00 00 	movaps %xmm0,0xd0(%rsp)
   104b6:	00 
  vkCreateRenderPass(args.device.ref(), &renderPassInfo, nullptr, &_renderPass);
   104b7:	48 8d 4d 28          	lea    0x28(%rbp),%rcx
   104bb:	48 8d b4 24 70 02 00 	lea    0x270(%rsp),%rsi
   104c2:	00 
  VkAttachmentDescription colorAttachment{};
   104c3:	0f 29 84 24 e0 00 00 	movaps %xmm0,0xe0(%rsp)
   104ca:	00 
   104cb:	c7 84 24 f0 00 00 00 	movl   $0x0,0xf0(%rsp)
   104d2:	00 00 00 00 
  colorAttachment.format = args.swapchain.format();
   104d6:	8b 40 10             	mov    0x10(%rax),%eax
  VkSubpassDescription subpass{};
   104d9:	0f 29 84 24 d0 02 00 	movaps %xmm0,0x2d0(%rsp)
   104e0:	00 
  colorAttachment.format = args.swapchain.format();
   104e1:	89 84 24 d4 00 00 00 	mov    %eax,0xd4(%rsp)
  colorAttachment.samples = VK_SAMPLE_COUNT_1_BIT;
   104e8:	48 b8 01 00 00 00 01 	movabs $0x100000001,%rax
   104ef:	00 00 00 
   104f2:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   104f9:	00 
  colorAttachment.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
   104fa:	48 8b 05 9f 74 02 00 	mov    0x2749f(%rip),%rax        # 379a0 <_ZSt19piecewise_construct+0x59>
  VkSubpassDependency subPassDep{}; /* Needed when rendering */
   10501:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
  colorAttachment.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
   10506:	48 89 84 24 e4 00 00 	mov    %rax,0xe4(%rsp)
   1050d:	00 
  VkAttachmentReference colorAttachmentRef{};
   1050e:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
   10515:	00 00 00 
   10518:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  subpass.pColorAttachments = &colorAttachmentRef;
   1051d:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
   10522:	48 89 84 24 d0 02 00 	mov    %rax,0x2d0(%rsp)
   10529:	00 
  subPassDep.srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
   1052a:	48 8b 05 77 74 02 00 	mov    0x27477(%rip),%rax        # 379a8 <_ZSt19piecewise_construct+0x61>
  VkRenderPassCreateInfo renderPassInfo{};
   10531:	0f 11 84 24 94 02 00 	movups %xmm0,0x294(%rsp)
   10538:	00 
  subPassDep.srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
   10539:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  renderPassInfo.pAttachments = &colorAttachment;
   1053e:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
   10545:	00 
   10546:	48 89 84 24 88 02 00 	mov    %rax,0x288(%rsp)
   1054d:	00 
  renderPassInfo.pSubpasses = &subpass;
   1054e:	48 8d 84 24 b0 02 00 	lea    0x2b0(%rsp),%rax
   10555:	00 
   10556:	48 89 84 24 98 02 00 	mov    %rax,0x298(%rsp)
   1055d:	00 
  renderPassInfo.pDependencies = &subPassDep;
   1055e:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
  VkSubpassDescription subpass{};
   10563:	0f 29 84 24 c0 02 00 	movaps %xmm0,0x2c0(%rsp)
   1056a:	00 
   1056b:	0f 29 84 24 b0 02 00 	movaps %xmm0,0x2b0(%rsp)
   10572:	00 
   10573:	0f 29 84 24 e0 02 00 	movaps %xmm0,0x2e0(%rsp)
   1057a:	00 
  VkRenderPassCreateInfo renderPassInfo{};
   1057b:	0f 11 84 24 74 02 00 	movups %xmm0,0x274(%rsp)
   10582:	00 
  VkSubpassDependency subPassDep{}; /* Needed when rendering */
   10583:	48 c7 84 24 84 00 00 	movq   $0x0,0x84(%rsp)
   1058a:	00 00 00 00 00 
  colorAttachment.finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
   1058f:	c7 84 24 f0 00 00 00 	movl   $0x3b9acdea,0xf0(%rsp)
   10596:	ea cd 9a 3b 
  VkSubpassDescription subpass{};
   1059a:	48 c7 84 24 f0 02 00 	movq   $0x0,0x2f0(%rsp)
   105a1:	00 00 00 00 00 
  subpass.colorAttachmentCount = 1;
   105a6:	c7 84 24 c8 02 00 00 	movl   $0x1,0x2c8(%rsp)
   105ad:	01 00 00 00 
  subPassDep.srcSubpass = VK_SUBPASS_EXTERNAL;
   105b1:	c7 44 24 70 ff ff ff 	movl   $0xffffffff,0x70(%rsp)
   105b8:	ff 
  subPassDep.dstAccessMask = VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
   105b9:	c7 84 24 84 00 00 00 	movl   $0x100,0x84(%rsp)
   105c0:	00 01 00 00 
  VkRenderPassCreateInfo renderPassInfo{};
   105c4:	c7 84 24 a4 02 00 00 	movl   $0x0,0x2a4(%rsp)
   105cb:	00 00 00 00 
  renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
   105cf:	c7 84 24 70 02 00 00 	movl   $0x26,0x270(%rsp)
   105d6:	26 00 00 00 
  renderPassInfo.attachmentCount = 1;
   105da:	c7 84 24 84 02 00 00 	movl   $0x1,0x284(%rsp)
   105e1:	01 00 00 00 
  renderPassInfo.subpassCount = 1;
   105e5:	c7 84 24 90 02 00 00 	movl   $0x1,0x290(%rsp)
   105ec:	01 00 00 00 
  renderPassInfo.dependencyCount = 1;
   105f0:	c7 84 24 a0 02 00 00 	movl   $0x1,0x2a0(%rsp)
   105f7:	01 00 00 00 
  renderPassInfo.pDependencies = &subPassDep;
   105fb:	48 89 84 24 a8 02 00 	mov    %rax,0x2a8(%rsp)
   10602:	00 
  vkCreateRenderPass(args.device.ref(), &renderPassInfo, nullptr, &_renderPass);
   10603:	48 8b 03             	mov    (%rbx),%rax
   10606:	48 8b 78 08          	mov    0x8(%rax),%rdi
   1060a:	e8 01 5d ff ff       	call   6310 <vkCreateRenderPass@plt>
  VkGraphicsPipelineCreateInfo pipelineInfo{};
   1060f:	31 c0                	xor    %eax,%eax
   10611:	b9 11 00 00 00       	mov    $0x11,%ecx
  vkCreateGraphicsPipelines(args.device.ref(), VK_NULL_HANDLE, 1, &pipelineInfo,
   10616:	4c 8d 4d 08          	lea    0x8(%rbp),%r9
  pipelineInfo.pStages = shaderStages;
   1061a:	66 0f 6f 3c 24       	movdqa (%rsp),%xmm7
  pipelineInfo.pViewportState = &viewportStateInfo;
   1061f:	66 0f 6f 54 24 10    	movdqa 0x10(%rsp),%xmm2
  vkCreateGraphicsPipelines(args.device.ref(), VK_NULL_HANDLE, 1, &pipelineInfo,
   10625:	45 31 c0             	xor    %r8d,%r8d
   10628:	31 f6                	xor    %esi,%esi
  VkGraphicsPipelineCreateInfo pipelineInfo{};
   1062a:	48 8d bc 24 68 03 00 	lea    0x368(%rsp),%rdi
   10631:	00 
  vkCreateGraphicsPipelines(args.device.ref(), VK_NULL_HANDLE, 1, &pipelineInfo,
   10632:	ba 01 00 00 00       	mov    $0x1,%edx
  VkGraphicsPipelineCreateInfo pipelineInfo{};
   10637:	48 c7 84 24 e8 03 00 	movq   $0x0,0x3e8(%rsp)
   1063e:	00 00 00 00 00 
   10643:	48 c7 84 24 64 03 00 	movq   $0x0,0x364(%rsp)
   1064a:	00 00 00 00 00 
   1064f:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  pipelineInfo.pInputAssemblyState = &inputAssemblyInfo;
   10652:	48 8d 84 24 90 00 00 	lea    0x90(%rsp),%rax
   10659:	00 
  pipelineInfo.pStages = shaderStages;
   1065a:	0f 11 bc 24 78 03 00 	movups %xmm7,0x378(%rsp)
   10661:	00 
  vkCreateGraphicsPipelines(args.device.ref(), VK_NULL_HANDLE, 1, &pipelineInfo,
   10662:	4c 89 e1             	mov    %r12,%rcx
  pipelineInfo.pInputAssemblyState = &inputAssemblyInfo;
   10665:	48 89 84 24 88 03 00 	mov    %rax,0x388(%rsp)
   1066c:	00 
  pipelineInfo.pMultisampleState = &multisampleStateInfo;
   1066d:	48 8d 84 24 90 01 00 	lea    0x190(%rsp),%rax
   10674:	00 
   10675:	48 89 84 24 a8 03 00 	mov    %rax,0x3a8(%rsp)
   1067c:	00 
  pipelineInfo.layout = _pipelineLayout;
   1067d:	f3 0f 6f 6d 20       	movdqu 0x20(%rbp),%xmm5
  pipelineInfo.pColorBlendState = &colorBlendState;
   10682:	48 8d 84 24 f0 01 00 	lea    0x1f0(%rsp),%rax
   10689:	00 
   1068a:	48 89 84 24 b8 03 00 	mov    %rax,0x3b8(%rsp)
   10691:	00 
  vkCreateGraphicsPipelines(args.device.ref(), VK_NULL_HANDLE, 1, &pipelineInfo,
   10692:	48 8b 03             	mov    (%rbx),%rax
  pipelineInfo.pViewportState = &viewportStateInfo;
   10695:	0f 11 94 24 98 03 00 	movups %xmm2,0x398(%rsp)
   1069c:	00 
  pipelineInfo.layout = _pipelineLayout;
   1069d:	0f 11 ac 24 c8 03 00 	movups %xmm5,0x3c8(%rsp)
   106a4:	00 
  vkCreateGraphicsPipelines(args.device.ref(), VK_NULL_HANDLE, 1, &pipelineInfo,
   106a5:	48 8b 78 08          	mov    0x8(%rax),%rdi
  pipelineInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
   106a9:	c7 84 24 60 03 00 00 	movl   $0x1c,0x360(%rsp)
   106b0:	1c 00 00 00 
  pipelineInfo.stageCount = vkw::ShaderModuleWrapper::stageCount;
   106b4:	c7 84 24 74 03 00 00 	movl   $0x2,0x374(%rsp)
   106bb:	02 00 00 00 
  pipelineInfo.basePipelineIndex = -1;
   106bf:	c7 84 24 e8 03 00 00 	movl   $0xffffffff,0x3e8(%rsp)
   106c6:	ff ff ff ff 
  vkCreateGraphicsPipelines(args.device.ref(), VK_NULL_HANDLE, 1, &pipelineInfo,
   106ca:	e8 71 5b ff ff       	call   6240 <vkCreateGraphicsPipelines@plt>
  vkDestroyShaderModule(args.device.ref(), vertShaderModule, nullptr);
   106cf:	48 8b 03             	mov    (%rbx),%rax
   106d2:	4c 89 f6             	mov    %r14,%rsi
   106d5:	31 d2                	xor    %edx,%edx
   106d7:	48 8b 78 08          	mov    0x8(%rax),%rdi
   106db:	e8 b0 5f ff ff       	call   6690 <vkDestroyShaderModule@plt>
  vkDestroyShaderModule(args.device.ref(), fragShaderModule, nullptr);
   106e0:	48 8b 03             	mov    (%rbx),%rax
   106e3:	4c 89 ee             	mov    %r13,%rsi
   106e6:	31 d2                	xor    %edx,%edx
   106e8:	48 8b 78 08          	mov    0x8(%rax),%rdi
   106ec:	e8 9f 5f ff ff       	call   6690 <vkDestroyShaderModule@plt>
  _device = args.device.ref();
   106f1:	48 8b 03             	mov    (%rbx),%rax
   106f4:	48 8b 40 08          	mov    0x8(%rax),%rax
  _isOwner = true;
   106f8:	c6 45 38 01          	movb   $0x1,0x38(%rbp)
  _device = args.device.ref();
   106fc:	48 89 45 10          	mov    %rax,0x10(%rbp)
}
   10700:	48 81 c4 f8 03 00 00 	add    $0x3f8,%rsp
   10707:	5b                   	pop    %rbx
   10708:	5d                   	pop    %rbp
   10709:	41 5c                	pop    %r12
   1070b:	41 5d                	pop    %r13
   1070d:	41 5e                	pop    %r14
   1070f:	41 5f                	pop    %r15
   10711:	c3                   	ret
      { return _M_dataplus._M_p; }
   10712:	48 89 c3             	mov    %rax,%rbx
   10715:	e9 24 76 ff ff       	jmp    7d3e <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE.cold>
   1071a:	48 89 c3             	mov    %rax,%rbx
   1071d:	e9 4a 76 ff ff       	jmp    7d6c <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE.cold+0x2e>
   10722:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10729:	00 00 00 
   1072c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000010730 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   10730:	41 56                	push   %r14
   10732:	41 55                	push   %r13
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   10734:	4c 8d 6f 10          	lea    0x10(%rdi),%r13
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   10738:	41 54                	push   %r12
   1073a:	49 89 d4             	mov    %rdx,%r12
   1073d:	55                   	push   %rbp
   1073e:	53                   	push   %rbx
   1073f:	48 89 fb             	mov    %rdi,%rbx
   10742:	48 83 ec 10          	sub    $0x10,%rsp
      { return _M_string_length; }
   10746:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1074a:	4c 89 2f             	mov    %r13,(%rdi)
      { return _M_dataplus._M_p; }
   1074d:	4c 8b 36             	mov    (%rsi),%r14
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   10750:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
   10755:	48 83 fd 0f          	cmp    $0xf,%rbp
   10759:	77 65                	ja     107c0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_+0x90>
	if (__n == 1)
   1075b:	48 83 fd 01          	cmp    $0x1,%rbp
   1075f:	75 4f                	jne    107b0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_+0x80>
	__c1 = __c2;
   10761:	41 0f b6 06          	movzbl (%r14),%eax
   10765:	88 47 10             	mov    %al,0x10(%rdi)
      }
   10768:	4c 89 e8             	mov    %r13,%rax
      { _M_string_length = __length; }
   1076b:	48 89 6b 08          	mov    %rbp,0x8(%rbx)
	__c1 = __c2;
   1076f:	c6 04 28 00          	movb   $0x0,(%rax,%rbp,1)
      { return _M_string_length; }
   10773:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
	if (this->max_size() - (this->size() - __n1) < __n2)
   10778:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
   1077f:	ff ff 3f 
   10782:	48 2b 43 08          	sub    0x8(%rbx),%rax
      { return _M_dataplus._M_p; }
   10786:	49 8b 34 24          	mov    (%r12),%rsi
	if (this->max_size() - (this->size() - __n1) < __n2)
   1078a:	48 39 d0             	cmp    %rdx,%rax
   1078d:	72 64                	jb     107f3 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_+0xc3>
	return _M_append(__s, __n);
   1078f:	48 89 df             	mov    %rbx,%rdi
   10792:	e8 e9 59 ff ff       	call   6180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
    }
   10797:	48 83 c4 10          	add    $0x10,%rsp
   1079b:	48 89 d8             	mov    %rbx,%rax
   1079e:	5b                   	pop    %rbx
   1079f:	5d                   	pop    %rbp
   107a0:	41 5c                	pop    %r12
   107a2:	41 5d                	pop    %r13
   107a4:	41 5e                	pop    %r14
   107a6:	c3                   	ret
   107a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   107ae:	00 00 
	if (__n == 0)
   107b0:	48 85 ed             	test   %rbp,%rbp
   107b3:	75 4a                	jne    107ff <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_+0xcf>
   107b5:	4c 89 e8             	mov    %r13,%rax
   107b8:	eb b1                	jmp    1076b <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_+0x3b>
   107ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	    _M_data(_M_create(__dnew, size_type(0)));
   107c0:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
   107c5:	31 d2                	xor    %edx,%edx
   107c7:	e8 b4 62 ff ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
   107cc:	48 89 03             	mov    %rax,(%rbx)
   107cf:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
   107d2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   107d7:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   107db:	48 89 ea             	mov    %rbp,%rdx
   107de:	4c 89 f6             	mov    %r14,%rsi
   107e1:	e8 2a 5c ff ff       	call   6410 <memcpy@plt>
	_M_set_length(__dnew);
   107e6:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
      { return _M_dataplus._M_p; }
   107eb:	48 8b 03             	mov    (%rbx),%rax
   107ee:	e9 78 ff ff ff       	jmp    1076b <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_+0x3b>
	  __throw_length_error(__N(__s));
   107f3:	48 8d 3d 66 6a 02 00 	lea    0x26a66(%rip),%rdi        # 37260 <_IO_stdin_used+0x260>
   107fa:	e8 81 5a ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
      { return _M_dataplus._M_p; }
   107ff:	4c 89 ef             	mov    %r13,%rdi
   10802:	eb d7                	jmp    107db <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_+0xab>
   10804:	48 89 c5             	mov    %rax,%rbp
   10807:	48 8b 3b             	mov    (%rbx),%rdi
	if (!_M_is_local())
   1080a:	49 39 fd             	cmp    %rdi,%r13
   1080d:	74 0d                	je     1081c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_+0xec>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1080f:	48 8b 73 10          	mov    0x10(%rbx),%rsi
   10813:	48 83 c6 01          	add    $0x1,%rsi
   10817:	e8 44 5d ff ff       	call   6560 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1081c:	48 89 ef             	mov    %rbp,%rdi
   1081f:	e8 3c 62 ff ff       	call   6a60 <_Unwind_Resume@plt>
   10824:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1082b:	00 00 00 
   1082e:	66 90                	xchg   %ax,%ax

0000000000010830 <_ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj>:
                                VkMemoryPropertyFlags propFlags) {
   10830:	41 54                	push   %r12
   10832:	48 89 f7             	mov    %rsi,%rdi
   10835:	55                   	push   %rbp
   10836:	89 cd                	mov    %ecx,%ebp
   10838:	53                   	push   %rbx
   10839:	89 d3                	mov    %edx,%ebx
   1083b:	48 81 ec 10 02 00 00 	sub    $0x210,%rsp
  vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   10842:	49 89 e4             	mov    %rsp,%r12
   10845:	4c 89 e6             	mov    %r12,%rsi
   10848:	e8 13 61 ff ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
  for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   1084d:	8b 34 24             	mov    (%rsp),%esi
   10850:	85 f6                	test   %esi,%esi
   10852:	0f 84 4a 75 ff ff    	je     7da2 <_ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj.cold>
   10858:	31 c9                	xor    %ecx,%ecx
    if (typeFilter & (1 << i) &&
   1085a:	bf 01 00 00 00       	mov    $0x1,%edi
   1085f:	eb 14                	jmp    10875 <_ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj+0x45>
   10861:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   10868:	48 83 c1 01          	add    $0x1,%rcx
   1086c:	48 39 f1             	cmp    %rsi,%rcx
   1086f:	0f 84 2d 75 ff ff    	je     7da2 <_ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj.cold>
    if (typeFilter & (1 << i) &&
   10875:	89 f8                	mov    %edi,%eax
   10877:	d3 e0                	shl    %cl,%eax
   10879:	85 d8                	test   %ebx,%eax
   1087b:	74 eb                	je     10868 <_ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj+0x38>
        (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
   1087d:	41 8b 44 cc 04       	mov    0x4(%r12,%rcx,8),%eax
   10882:	21 e8                	and    %ebp,%eax
    if (typeFilter & (1 << i) &&
   10884:	39 e8                	cmp    %ebp,%eax
   10886:	75 e0                	jne    10868 <_ZN4rtvc5Image15_findMemoryTypeEP18VkPhysicalDevice_Tjj+0x38>
}
   10888:	48 81 c4 10 02 00 00 	add    $0x210,%rsp
   1088f:	89 c8                	mov    %ecx,%eax
   10891:	5b                   	pop    %rbx
   10892:	5d                   	pop    %rbp
   10893:	41 5c                	pop    %r12
   10895:	c3                   	ret
   10896:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1089d:	00 00 00 

00000000000108a0 <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE>:
                        const CustomArgs &args) {
   108a0:	41 57                	push   %r15
  VkImageCreateInfo imageInfo{};
   108a2:	31 c0                	xor    %eax,%eax
                        const CustomArgs &args) {
   108a4:	49 89 d7             	mov    %rdx,%r15
  if (vkCreateImage(device, &imageInfo, nullptr, &_image) != VK_SUCCESS) {
   108a7:	31 d2                	xor    %edx,%edx
                        const CustomArgs &args) {
   108a9:	41 56                	push   %r14
   108ab:	49 89 fe             	mov    %rdi,%r14
   108ae:	41 55                	push   %r13
   108b0:	41 54                	push   %r12
   108b2:	55                   	push   %rbp
   108b3:	48 89 cd             	mov    %rcx,%rbp
  VkImageCreateInfo imageInfo{};
   108b6:	b9 0a 00 00 00       	mov    $0xa,%ecx
                        const CustomArgs &args) {
   108bb:	53                   	push   %rbx
   108bc:	48 89 f3             	mov    %rsi,%rbx
   108bf:	48 81 ec b8 02 00 00 	sub    $0x2b8,%rsp
  VkImageCreateInfo imageInfo{};
   108c6:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  if (vkCreateImage(device, &imageInfo, nullptr, &_image) != VK_SUCCESS) {
   108cb:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  VkImageCreateInfo imageInfo{};
   108d0:	48 c7 44 24 44 00 00 	movq   $0x0,0x44(%rsp)
   108d7:	00 00 
   108d9:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
   108e0:	00 00 00 00 00 
   108e5:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  if (vkCreateImage(device, &imageInfo, nullptr, &_image) != VK_SUCCESS) {
   108e8:	49 8d 4e 08          	lea    0x8(%r14),%rcx
   108ec:	48 89 df             	mov    %rbx,%rdi
  imageInfo.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
   108ef:	c7 44 24 40 0e 00 00 	movl   $0xe,0x40(%rsp)
   108f6:	00 
  imageInfo.imageType = VK_IMAGE_TYPE_2D;
   108f7:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%rsp)
   108fe:	00 
  imageInfo.extent.width = args.width;
   108ff:	48 8b 45 00          	mov    0x0(%rbp),%rax
   10903:	48 89 44 24 5c       	mov    %rax,0x5c(%rsp)
  imageInfo.format = args.format;
   10908:	8b 45 08             	mov    0x8(%rbp),%eax
   1090b:	89 44 24 58          	mov    %eax,0x58(%rsp)
  imageInfo.tiling = args.tiling;
   1090f:	48 8b 45 0c          	mov    0xc(%rbp),%rax
   10913:	48 89 44 24 74       	mov    %rax,0x74(%rsp)
  imageInfo.extent.depth = 1;
   10918:	48 b8 01 00 00 00 01 	movabs $0x100000001,%rax
   1091f:	00 00 00 
   10922:	48 89 44 24 64       	mov    %rax,0x64(%rsp)
  imageInfo.arrayLayers = 1;
   10927:	48 89 44 24 6c       	mov    %rax,0x6c(%rsp)
  if (vkCreateImage(device, &imageInfo, nullptr, &_image) != VK_SUCCESS) {
   1092c:	e8 9f 5c ff ff       	call   65d0 <vkCreateImage@plt>
   10931:	85 c0                	test   %eax,%eax
   10933:	0f 85 af 74 ff ff    	jne    7de8 <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE.cold>
  vkGetImageMemoryRequirements(device, _image, &memoryRequirements);
   10939:	49 8b 76 08          	mov    0x8(%r14),%rsi
   1093d:	48 89 e2             	mov    %rsp,%rdx
   10940:	48 89 df             	mov    %rbx,%rdi
   10943:	4c 8d ac 24 a0 00 00 	lea    0xa0(%rsp),%r13
   1094a:	00 
   1094b:	e8 e0 59 ff ff       	call   6330 <vkGetImageMemoryRequirements@plt>
  allocInfo.allocationSize = memoryRequirements.size;
   10950:	48 8b 04 24          	mov    (%rsp),%rax
  VkMemoryAllocateInfo allocInfo{};
   10954:	66 0f ef c0          	pxor   %xmm0,%xmm0
  vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   10958:	4c 89 ee             	mov    %r13,%rsi
   1095b:	4c 89 ff             	mov    %r15,%rdi
  VkMemoryAllocateInfo allocInfo{};
   1095e:	0f 11 44 24 24       	movups %xmm0,0x24(%rsp)
      physicalDevice, memoryRequirements.memoryTypeBits, args.propFlags);
   10963:	8b 6d 14             	mov    0x14(%rbp),%ebp
  allocInfo.memoryTypeIndex = _findMemoryType(
   10966:	44 8b 64 24 10       	mov    0x10(%rsp),%r12d
  VkMemoryAllocateInfo allocInfo{};
   1096b:	0f 11 44 24 30       	movups %xmm0,0x30(%rsp)
  allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
   10970:	c7 44 24 20 05 00 00 	movl   $0x5,0x20(%rsp)
   10977:	00 
  allocInfo.allocationSize = memoryRequirements.size;
   10978:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   1097d:	e8 de 5f ff ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
  for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   10982:	8b 94 24 a0 00 00 00 	mov    0xa0(%rsp),%edx
   10989:	85 d2                	test   %edx,%edx
   1098b:	0f 84 89 74 ff ff    	je     7e1a <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE.cold+0x32>
   10991:	31 c9                	xor    %ecx,%ecx
    if (typeFilter & (1 << i) &&
   10993:	be 01 00 00 00       	mov    $0x1,%esi
   10998:	eb 13                	jmp    109ad <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE+0x10d>
   1099a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   109a0:	48 83 c1 01          	add    $0x1,%rcx
   109a4:	48 39 d1             	cmp    %rdx,%rcx
   109a7:	0f 84 6d 74 ff ff    	je     7e1a <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE.cold+0x32>
    if (typeFilter & (1 << i) &&
   109ad:	89 f0                	mov    %esi,%eax
   109af:	d3 e0                	shl    %cl,%eax
   109b1:	44 85 e0             	test   %r12d,%eax
   109b4:	74 ea                	je     109a0 <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE+0x100>
        (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
   109b6:	41 8b 44 cd 04       	mov    0x4(%r13,%rcx,8),%eax
   109bb:	21 e8                	and    %ebp,%eax
    if (typeFilter & (1 << i) &&
   109bd:	39 c5                	cmp    %eax,%ebp
   109bf:	75 df                	jne    109a0 <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE+0x100>
  allocInfo.memoryTypeIndex = _findMemoryType(
   109c1:	89 4c 24 38          	mov    %ecx,0x38(%rsp)
  if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory)) {
   109c5:	31 d2                	xor    %edx,%edx
   109c7:	49 8d 4e 18          	lea    0x18(%r14),%rcx
   109cb:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
   109d0:	48 89 df             	mov    %rbx,%rdi
   109d3:	e8 f8 5f ff ff       	call   69d0 <vkAllocateMemory@plt>
   109d8:	85 c0                	test   %eax,%eax
   109da:	75 2d                	jne    10a09 <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE+0x169>
  vkBindImageMemory(device, _image, _deviceMemory, 0);
   109dc:	49 8b 56 18          	mov    0x18(%r14),%rdx
   109e0:	49 8b 76 08          	mov    0x8(%r14),%rsi
   109e4:	48 89 df             	mov    %rbx,%rdi
   109e7:	31 c9                	xor    %ecx,%ecx
   109e9:	e8 22 60 ff ff       	call   6a10 <vkBindImageMemory@plt>
  _device = device;
   109ee:	49 89 5e 10          	mov    %rbx,0x10(%r14)
  _isOwner = true;
   109f2:	41 c6 46 38 01       	movb   $0x1,0x38(%r14)
}
   109f7:	48 81 c4 b8 02 00 00 	add    $0x2b8,%rsp
   109fe:	5b                   	pop    %rbx
   109ff:	5d                   	pop    %rbp
   10a00:	41 5c                	pop    %r12
   10a02:	41 5d                	pop    %r13
   10a04:	41 5e                	pop    %r14
   10a06:	41 5f                	pop    %r15
   10a08:	c3                   	ret
   10a09:	e9 51 74 ff ff       	jmp    7e5f <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE.cold+0x77>
   10a0e:	66 90                	xchg   %ax,%ax

0000000000010a10 <_ZN4rtvc9ImageView11_initializeEP10VkDevice_TP9VkImage_T8VkFormat>:
void ImageView::_initialize(VkDevice device, VkImage image, VkFormat format) {
   10a10:	55                   	push   %rbp
  VkImageViewCreateInfo imageViewInfo{};
   10a11:	66 0f ef c0          	pxor   %xmm0,%xmm0
void ImageView::_initialize(VkDevice device, VkImage image, VkFormat format) {
   10a15:	48 89 f5             	mov    %rsi,%rbp
   10a18:	53                   	push   %rbx
   10a19:	48 89 fb             	mov    %rdi,%rbx
   10a1c:	48 83 ec 58          	sub    $0x58,%rsp
  VkImageViewCreateInfo imageViewInfo{};
   10a20:	0f 11 44 24 14       	movups %xmm0,0x14(%rsp)
  vkCreateImageView(device, &imageViewInfo, nullptr, &_imageView);
   10a25:	48 89 e6             	mov    %rsp,%rsi
  imageViewInfo.image = image;
   10a28:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  vkCreateImageView(device, &imageViewInfo, nullptr, &_imageView);
   10a2d:	31 d2                	xor    %edx,%edx
  VkImageViewCreateInfo imageViewInfo{};
   10a2f:	0f 11 44 24 24       	movups %xmm0,0x24(%rsp)
  imageViewInfo.format = format;
   10a34:	89 4c 24 24          	mov    %ecx,0x24(%rsp)
  vkCreateImageView(device, &imageViewInfo, nullptr, &_imageView);
   10a38:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
   10a3c:	48 89 ef             	mov    %rbp,%rdi
  VkImageViewCreateInfo imageViewInfo{};
   10a3f:	0f 11 44 24 34       	movups %xmm0,0x34(%rsp)
  imageViewInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
   10a44:	c7 04 24 0f 00 00 00 	movl   $0xf,(%rsp)
  VkImageViewCreateInfo imageViewInfo{};
   10a4b:	0f 11 44 24 40       	movups %xmm0,0x40(%rsp)
  imageViewInfo.viewType = VK_IMAGE_VIEW_TYPE_2D;
   10a50:	c7 44 24 20 01 00 00 	movl   $0x1,0x20(%rsp)
   10a57:	00 
  imageViewInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
   10a58:	c7 44 24 38 01 00 00 	movl   $0x1,0x38(%rsp)
   10a5f:	00 
  imageViewInfo.subresourceRange.levelCount = 1;
   10a60:	c7 44 24 40 01 00 00 	movl   $0x1,0x40(%rsp)
   10a67:	00 
  imageViewInfo.subresourceRange.layerCount = 1;
   10a68:	c7 44 24 48 01 00 00 	movl   $0x1,0x48(%rsp)
   10a6f:	00 
  VkImageViewCreateInfo imageViewInfo{};
   10a70:	0f 11 44 24 04       	movups %xmm0,0x4(%rsp)
  vkCreateImageView(device, &imageViewInfo, nullptr, &_imageView);
   10a75:	e8 26 5b ff ff       	call   65a0 <vkCreateImageView@plt>
  _device = device;
   10a7a:	48 89 6b 10          	mov    %rbp,0x10(%rbx)
  _isOwner = true;
   10a7e:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
}
   10a82:	48 83 c4 58          	add    $0x58,%rsp
   10a86:	5b                   	pop    %rbx
   10a87:	5d                   	pop    %rbp
   10a88:	c3                   	ret
   10a89:	90                   	nop
   10a8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000010a90 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat>:
                                      VkFormat format) {
   10a90:	41 57                	push   %r15
   10a92:	41 56                	push   %r14
   10a94:	41 89 ce             	mov    %ecx,%r14d
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
   10a97:	31 c9                	xor    %ecx,%ecx
                                      VkFormat format) {
   10a99:	41 55                	push   %r13
   10a9b:	49 89 f5             	mov    %rsi,%r13
   10a9e:	48 89 d6             	mov    %rdx,%rsi
   10aa1:	41 54                	push   %r12
   10aa3:	55                   	push   %rbp
   10aa4:	48 89 fd             	mov    %rdi,%rbp
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
   10aa7:	4c 89 ef             	mov    %r13,%rdi
                                      VkFormat format) {
   10aaa:	53                   	push   %rbx
   10aab:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
   10ab2:	4c 8d 7c 24 2c       	lea    0x2c(%rsp),%r15
                                      VkFormat format) {
   10ab7:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
   10abc:	4c 89 fa             	mov    %r15,%rdx
   10abf:	e8 1c 58 ff ff       	call   62e0 <vkGetSwapchainImagesKHR@plt>
   10ac4:	85 c0                	test   %eax,%eax
   10ac6:	0f 85 ec 73 ff ff    	jne    7eb8 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat.cold>
  std::vector<VkImage> swapchainImages{swapchainImageCount};
   10acc:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
   10ad0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   10ad5:	48 85 c0             	test   %rax,%rax
   10ad8:	0f 84 72 01 00 00    	je     10c50 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x1c0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   10ade:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   10ae5:	00 
   10ae6:	48 89 cf             	mov    %rcx,%rdi
   10ae9:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   10aee:	e8 4d 5a ff ff       	call   6540 <_Znwm@plt>
      if (__n <= 0)
   10af3:	48 83 7c 24 10 01    	cmpq   $0x1,0x10(%rsp)
   10af9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   10b00:	49 89 c4             	mov    %rax,%r12
   10b03:	48 8d 58 08          	lea    0x8(%rax),%rbx
   10b07:	0f 84 83 01 00 00    	je     10c90 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x200>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   10b0d:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
   10b12:	4c 8d 04 08          	lea    (%rax,%rcx,1),%r8
      for (; __first != __last; ++__first)
   10b16:	4c 39 c3             	cmp    %r8,%rbx
   10b19:	74 22                	je     10b3d <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0xad>
	*__first = __tmp;
   10b1b:	48 8d 51 f8          	lea    -0x8(%rcx),%rdx
   10b1f:	31 f6                	xor    %esi,%esi
   10b21:	48 89 df             	mov    %rbx,%rdi
   10b24:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
   10b29:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   10b2e:	e8 6d 57 ff ff       	call   62a0 <memset@plt>
   10b33:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
   10b38:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   10b3d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   10b42:	4c 89 c3             	mov    %r8,%rbx
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
   10b45:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
   10b4a:	4c 89 e1             	mov    %r12,%rcx
   10b4d:	4c 89 fa             	mov    %r15,%rdx
   10b50:	4c 89 ef             	mov    %r13,%rdi
   10b53:	e8 88 57 ff ff       	call   62e0 <vkGetSwapchainImagesKHR@plt>
   10b58:	85 c0                	test   %eax,%eax
   10b5a:	0f 85 ba 73 ff ff    	jne    7f1a <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat.cold+0x62>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   10b60:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10b64:	48 8b 55 08          	mov    0x8(%rbp),%rdx
   10b68:	4c 29 e3             	sub    %r12,%rbx
   10b6b:	49 89 df             	mov    %rbx,%r15
   10b6e:	48 89 c8             	mov    %rcx,%rax
   10b71:	49 c1 ff 03          	sar    $0x3,%r15
   10b75:	48 29 d0             	sub    %rdx,%rax
	if (__new_size > size())
   10b78:	48 39 d8             	cmp    %rbx,%rax
   10b7b:	0f 82 ef 00 00 00    	jb     10c70 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x1e0>
	else if (__new_size < size())
   10b81:	48 39 c3             	cmp    %rax,%rbx
   10b84:	73 0c                	jae    10b92 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x102>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   10b86:	48 01 da             	add    %rbx,%rdx
	if (size_type __n = this->_M_impl._M_finish - __pos)
   10b89:	48 39 d1             	cmp    %rdx,%rcx
   10b8c:	74 04                	je     10b92 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x102>
	    this->_M_impl._M_finish = __pos;
   10b8e:	48 89 55 10          	mov    %rdx,0x10(%rbp)
  for (size_t i = 0; i < imageCount; ++i) {
   10b92:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
   10b97:	31 db                	xor    %ebx,%ebx
   10b99:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   10b9e:	4d 85 ff             	test   %r15,%r15
   10ba1:	0f 84 b9 00 00 00    	je     10c60 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x1d0>
   10ba7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   10bae:	00 00 
    imageViewInfo.image = swapchainImages[i];
   10bb0:	49 8b 04 dc          	mov    (%r12,%rbx,8),%rax
    _imageViews[i] = vkh::createImageView(device, &imageViewInfo);
   10bb4:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    VkImageViewCreateInfo imageViewInfo{};
   10bb9:	66 0f ef c0          	pxor   %xmm0,%xmm0
    _imageViews[i] = vkh::createImageView(device, &imageViewInfo);
   10bbd:	31 d2                	xor    %edx,%edx
   10bbf:	4c 89 ef             	mov    %r13,%rdi
    VkImageViewCreateInfo imageViewInfo{};
   10bc2:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   10bc7:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
   10bcc:	0f 11 44 24 70       	movups %xmm0,0x70(%rsp)
   10bd1:	0f 11 44 24 54       	movups %xmm0,0x54(%rsp)
    imageViewInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
   10bd6:	c7 44 24 30 0f 00 00 	movl   $0xf,0x30(%rsp)
   10bdd:	00 
    imageViewInfo.image = swapchainImages[i];
   10bde:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    imageViewInfo.viewType = VK_IMAGE_VIEW_TYPE_2D;
   10be3:	c7 44 24 50 01 00 00 	movl   $0x1,0x50(%rsp)
   10bea:	00 
    imageViewInfo.format = format;
   10beb:	44 89 74 24 54       	mov    %r14d,0x54(%rsp)
    imageViewInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
   10bf0:	c7 44 24 68 01 00 00 	movl   $0x1,0x68(%rsp)
   10bf7:	00 
    imageViewInfo.subresourceRange.levelCount = 1;
   10bf8:	c7 44 24 70 01 00 00 	movl   $0x1,0x70(%rsp)
   10bff:	00 
    imageViewInfo.subresourceRange.layerCount = 1;
   10c00:	c7 44 24 78 01 00 00 	movl   $0x1,0x78(%rsp)
   10c07:	00 
    VkImageViewCreateInfo imageViewInfo{};
   10c08:	0f 11 44 24 34       	movups %xmm0,0x34(%rsp)
    _imageViews[i] = vkh::createImageView(device, &imageViewInfo);
   10c0d:	e8 3e cc ff ff       	call   d850 <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks>
   10c12:	48 8b 55 08          	mov    0x8(%rbp),%rdx
   10c16:	48 89 04 da          	mov    %rax,(%rdx,%rbx,8)
  for (size_t i = 0; i < imageCount; ++i) {
   10c1a:	48 83 c3 01          	add    $0x1,%rbx
   10c1e:	49 39 df             	cmp    %rbx,%r15
   10c21:	75 8d                	jne    10bb0 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x120>
  _device = device;
   10c23:	4c 89 6d 20          	mov    %r13,0x20(%rbp)
  _isOwner = true;
   10c27:	c6 45 30 01          	movb   $0x1,0x30(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   10c2b:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
   10c30:	4c 89 e7             	mov    %r12,%rdi
   10c33:	e8 28 59 ff ff       	call   6560 <_ZdlPvm@plt>
}
   10c38:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
   10c3f:	5b                   	pop    %rbx
   10c40:	5d                   	pop    %rbp
   10c41:	41 5c                	pop    %r12
   10c43:	41 5d                	pop    %r13
   10c45:	41 5e                	pop    %r14
   10c47:	41 5f                	pop    %r15
   10c49:	c3                   	ret
   10c4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   10c50:	45 31 e4             	xor    %r12d,%r12d
   10c53:	31 db                	xor    %ebx,%ebx
   10c55:	e9 eb fe ff ff       	jmp    10b45 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0xb5>
   10c5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  _device = device;
   10c60:	4c 89 6d 20          	mov    %r13,0x20(%rbp)
  _isOwner = true;
   10c64:	c6 45 30 01          	movb   $0x1,0x30(%rbp)
	if (__p)
   10c68:	4d 85 e4             	test   %r12,%r12
   10c6b:	74 cb                	je     10c38 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x1a8>
   10c6d:	eb bc                	jmp    10c2b <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x19b>
   10c6f:	90                   	nop
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   10c70:	48 c1 f8 03          	sar    $0x3,%rax
	  _M_default_append(__new_size - size());
   10c74:	4c 89 fe             	mov    %r15,%rsi
  _imageViews.resize(imageCount);
   10c77:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
   10c7b:	48 29 c6             	sub    %rax,%rsi
   10c7e:	e8 2d 00 00 00       	call   10cb0 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm>
   10c83:	e9 0a ff ff ff       	jmp    10b92 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0x102>
   10c88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   10c8f:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   10c90:	48 c7 44 24 10 08 00 	movq   $0x8,0x10(%rsp)
   10c97:	00 00 
   10c99:	e9 a7 fe ff ff       	jmp    10b45 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat+0xb5>
   10c9e:	e9 5a 72 ff ff       	jmp    7efd <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat.cold+0x45>
   10ca3:	48 89 c3             	mov    %rax,%rbx
   10ca6:	e9 5a 72 ff ff       	jmp    7f05 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat.cold+0x4d>
   10cab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010cb0 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm>:
      if (__n != 0)
   10cb0:	48 85 f6             	test   %rsi,%rsi
   10cb3:	0f 84 3f 01 00 00    	je     10df8 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x148>
	  if (__size > max_size() || __navail > max_size() - __size)
   10cb9:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   10cc0:	ff ff 0f 
    vector<_Tp, _Alloc>::
   10cc3:	41 57                	push   %r15
   10cc5:	41 56                	push   %r14
   10cc7:	41 55                	push   %r13
   10cc9:	41 54                	push   %r12
   10ccb:	55                   	push   %rbp
   10ccc:	48 89 fd             	mov    %rdi,%rbp
   10ccf:	53                   	push   %rbx
   10cd0:	48 89 f3             	mov    %rsi,%rbx
   10cd3:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   10cd7:	48 8b 57 08          	mov    0x8(%rdi),%rdx
   10cdb:	49 89 d4             	mov    %rdx,%r12
   10cde:	4c 2b 27             	sub    (%rdi),%r12
   10ce1:	4c 89 e1             	mov    %r12,%rcx
   10ce4:	48 c1 f9 03          	sar    $0x3,%rcx
	  if (__size > max_size() || __navail > max_size() - __size)
   10ce8:	48 29 c8             	sub    %rcx,%rax
   10ceb:	48 89 c6             	mov    %rax,%rsi
					 - this->_M_impl._M_finish);
   10cee:	48 8b 47 10          	mov    0x10(%rdi),%rax
   10cf2:	48 29 d0             	sub    %rdx,%rax
   10cf5:	48 c1 f8 03          	sar    $0x3,%rax
	  if (__navail >= __n)
   10cf9:	48 39 d8             	cmp    %rbx,%rax
   10cfc:	0f 83 ae 00 00 00    	jae    10db0 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x100>
	if (max_size() - size() < __n)
   10d02:	48 39 de             	cmp    %rbx,%rsi
   10d05:	0f 82 4e 01 00 00    	jb     10e59 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x1a9>
	const size_type __len = size() + (std::max)(size(), __n);
   10d0b:	4c 8d 34 0b          	lea    (%rbx,%rcx,1),%r14
      if (__a < __b)
   10d0f:	48 39 d9             	cmp    %rbx,%rcx
   10d12:	0f 82 e8 00 00 00    	jb     10e00 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x150>
   10d18:	49 bd f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%r13
   10d1f:	ff ff 7f 
   10d22:	48 8d 04 09          	lea    (%rcx,%rcx,1),%rax
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   10d26:	48 39 c8             	cmp    %rcx,%rax
   10d29:	0f 83 36 01 00 00    	jae    10e65 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x1b5>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   10d2f:	4c 89 ef             	mov    %r13,%rdi
   10d32:	e8 09 58 ff ff       	call   6540 <_Znwm@plt>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   10d37:	4c 8b 45 00          	mov    0x0(%rbp),%r8
      ptrdiff_t __count = __last - __first;
   10d3b:	48 8b 4d 08          	mov    0x8(%rbp),%rcx
		      std::__uninitialized_default_n_a(__new_start + __size,
   10d3f:	49 01 c4             	add    %rax,%r12
   10d42:	49 89 c7             	mov    %rax,%r15
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   10d45:	49 01 c5             	add    %rax,%r13
   10d48:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
   10d4f:	00 
   10d50:	4c 29 c1             	sub    %r8,%rcx
      if (__n <= 0)
   10d53:	48 83 eb 01          	sub    $0x1,%rbx
   10d57:	74 26                	je     10d7f <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0xcf>
      std::__fill_a(__first, __first + __n, __value);
   10d59:	49 8d 7c 24 08       	lea    0x8(%r12),%rdi
	*__first = __tmp;
   10d5e:	48 8d 14 dd 00 00 00 	lea    0x0(,%rbx,8),%rdx
   10d65:	00 
   10d66:	31 f6                	xor    %esi,%esi
   10d68:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10d6d:	4c 89 04 24          	mov    %r8,(%rsp)
   10d71:	e8 2a 55 ff ff       	call   62a0 <memset@plt>
   10d76:	4c 8b 04 24          	mov    (%rsp),%r8
   10d7a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      if (__count > 0)
   10d7f:	48 85 c9             	test   %rcx,%rcx
   10d82:	0f 8f 98 00 00 00    	jg     10e20 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x170>
	if (__p)
   10d88:	4d 85 c0             	test   %r8,%r8
   10d8b:	0f 85 bf 00 00 00    	jne    10e50 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x1a0>
	      this->_M_impl._M_finish = __new_start + __size + __n;
   10d91:	4b 8d 04 f7          	lea    (%r15,%r14,8),%rax
	      this->_M_impl._M_start = __new_start;
   10d95:	4c 89 7d 00          	mov    %r15,0x0(%rbp)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   10d99:	48 89 45 08          	mov    %rax,0x8(%rbp)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   10d9d:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
    }
   10da1:	48 83 c4 18          	add    $0x18,%rsp
   10da5:	5b                   	pop    %rbx
   10da6:	5d                   	pop    %rbp
   10da7:	41 5c                	pop    %r12
   10da9:	41 5d                	pop    %r13
   10dab:	41 5e                	pop    %r14
   10dad:	41 5f                	pop    %r15
   10daf:	c3                   	ret
   10db0:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
	      ++__first;
   10db7:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
      if (__n <= 0)
   10dbb:	48 83 eb 01          	sub    $0x1,%rbx
   10dbf:	74 1e                	je     10ddf <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x12f>
      std::__fill_a(__first, __first + __n, __value);
   10dc1:	48 8d 04 d9          	lea    (%rcx,%rbx,8),%rax
	*__first = __tmp;
   10dc5:	48 89 cf             	mov    %rcx,%rdi
   10dc8:	31 f6                	xor    %esi,%esi
   10dca:	48 29 d0             	sub    %rdx,%rax
   10dcd:	48 8d 58 f8          	lea    -0x8(%rax),%rbx
   10dd1:	48 89 da             	mov    %rbx,%rdx
   10dd4:	e8 c7 54 ff ff       	call   62a0 <memset@plt>
   10dd9:	48 89 c1             	mov    %rax,%rcx
      for (; __first != __last; ++__first)
   10ddc:	48 01 d9             	add    %rbx,%rcx
	      this->_M_impl._M_finish =
   10ddf:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
    }
   10de3:	48 83 c4 18          	add    $0x18,%rsp
   10de7:	5b                   	pop    %rbx
   10de8:	5d                   	pop    %rbp
   10de9:	41 5c                	pop    %r12
   10deb:	41 5d                	pop    %r13
   10ded:	41 5e                	pop    %r14
   10def:	41 5f                	pop    %r15
   10df1:	c3                   	ret
   10df2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   10df8:	c3                   	ret
   10df9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   10e00:	49 bd ff ff ff ff ff 	movabs $0xfffffffffffffff,%r13
   10e07:	ff ff 0f 
   10e0a:	4d 39 ee             	cmp    %r13,%r14
   10e0d:	4d 0f 46 ee          	cmovbe %r14,%r13
   10e11:	49 c1 e5 03          	shl    $0x3,%r13
   10e15:	e9 15 ff ff ff       	jmp    10d2f <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x7f>
   10e1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   10e20:	4c 89 c6             	mov    %r8,%rsi
   10e23:	48 89 ca             	mov    %rcx,%rdx
   10e26:	4c 89 ff             	mov    %r15,%rdi
   10e29:	4c 89 04 24          	mov    %r8,(%rsp)
   10e2d:	e8 5e 5b ff ff       	call   6990 <memmove@plt>
			    - this->_M_impl._M_start);
   10e32:	48 8b 75 10          	mov    0x10(%rbp),%rsi
   10e36:	4c 8b 04 24          	mov    (%rsp),%r8
   10e3a:	4c 29 c6             	sub    %r8,%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   10e3d:	4c 89 c7             	mov    %r8,%rdi
   10e40:	e8 1b 57 ff ff       	call   6560 <_ZdlPvm@plt>
   10e45:	e9 47 ff ff ff       	jmp    10d91 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0xe1>
   10e4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   10e50:	48 8b 75 10          	mov    0x10(%rbp),%rsi
   10e54:	4c 29 c6             	sub    %r8,%rsi
   10e57:	eb e4                	jmp    10e3d <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x18d>
	  __throw_length_error(__N(__s));
   10e59:	48 8d 3d e8 6a 02 00 	lea    0x26ae8(%rip),%rdi        # 37948 <_ZSt19piecewise_construct+0x1>
   10e60:	e8 1b 54 ff ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   10e65:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
   10e6c:	ff ff 0f 
   10e6f:	48 39 d0             	cmp    %rdx,%rax
   10e72:	48 0f 47 c2          	cmova  %rdx,%rax
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   10e76:	4c 8d 2c c5 00 00 00 	lea    0x0(,%rax,8),%r13
   10e7d:	00 
   10e7e:	e9 ac fe ff ff       	jmp    10d2f <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x7f>
   10e83:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10e8a:	00 00 00 
   10e8d:	0f 1f 00             	nopl   (%rax)

0000000000010e90 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:
  if (messageSeverity > VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT) {
   10e90:	83 ff 01             	cmp    $0x1,%edi
   10e93:	7f 0b                	jg     10ea0 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x10>
}
   10e95:	31 c0                	xor    %eax,%eax
   10e97:	c3                   	ret
   10e98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   10e9f:	00 
              [[maybe_unused]] void *pUserData) {
   10ea0:	55                   	push   %rbp
   10ea1:	48 89 d5             	mov    %rdx,%rbp
   10ea4:	53                   	push   %rbx
      if (__out.width() != 0)
   10ea5:	48 8d 1d 34 07 03 00 	lea    0x30734(%rip),%rbx        # 415e0 <_ZSt4cerr@GLIBCXX_3.4>
   10eac:	48 83 ec 18          	sub    $0x18,%rsp
   10eb0:	48 8b 05 29 07 03 00 	mov    0x30729(%rip),%rax        # 415e0 <_ZSt4cerr@GLIBCXX_3.4>
   10eb7:	c6 44 24 0f 0a       	movb   $0xa,0xf(%rsp)
    { return _M_width; }
   10ebc:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   10ec0:	48 83 7c 03 10 00    	cmpq   $0x0,0x10(%rbx,%rax,1)
   10ec6:	74 78                	je     10f40 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0xb0>
	return __ostream_insert(__out, &__c, 1);
   10ec8:	48 89 df             	mov    %rbx,%rdi
   10ecb:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
   10ed0:	ba 01 00 00 00       	mov    $0x1,%edx
   10ed5:	e8 56 57 ff ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    std::cerr << '\n' << pCallbackData->pMessage << std::endl;
   10eda:	48 8b 6d 28          	mov    0x28(%rbp),%rbp
   10ede:	48 89 c3             	mov    %rax,%rbx
      if (!__s)
   10ee1:	48 85 ed             	test   %rbp,%rbp
   10ee4:	74 70                	je     10f56 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0xc6>
	return __builtin_strlen(__s);
   10ee6:	48 89 ef             	mov    %rbp,%rdi
   10ee9:	e8 32 53 ff ff       	call   6220 <strlen@plt>
	__ostream_insert(__out, __s,
   10eee:	48 89 ee             	mov    %rbp,%rsi
   10ef1:	48 89 df             	mov    %rbx,%rdi
   10ef4:	48 89 c2             	mov    %rax,%rdx
   10ef7:	e8 34 57 ff ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
   10efc:	48 8b 03             	mov    (%rbx),%rax
   10eff:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   10f03:	48 8b ac 03 f0 00 00 	mov    0xf0(%rbx,%rax,1),%rbp
   10f0a:	00 
      if (!__f)
   10f0b:	48 85 ed             	test   %rbp,%rbp
   10f0e:	0f 84 87 00 00 00    	je     10f9b <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x10b>
	if (_M_widen_ok)
   10f14:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
   10f18:	74 56                	je     10f70 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0xe0>
   10f1a:	0f be 75 43          	movsbl 0x43(%rbp),%esi
   10f1e:	48 89 df             	mov    %rbx,%rdi
   10f21:	e8 1a 51 ff ff       	call   6040 <_ZNSo3putEc@plt>
   10f26:	48 89 c7             	mov    %rax,%rdi
    { return __os.flush(); }
   10f29:	e8 32 54 ff ff       	call   6360 <_ZNSo5flushEv@plt>
}
   10f2e:	48 83 c4 18          	add    $0x18,%rsp
   10f32:	31 c0                	xor    %eax,%eax
   10f34:	5b                   	pop    %rbx
   10f35:	5d                   	pop    %rbp
   10f36:	c3                   	ret
   10f37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   10f3e:	00 00 
      __out.put(__c);
   10f40:	be 0a 00 00 00       	mov    $0xa,%esi
   10f45:	48 89 df             	mov    %rbx,%rdi
   10f48:	e8 f3 50 ff ff       	call   6040 <_ZNSo3putEc@plt>
    std::cerr << '\n' << pCallbackData->pMessage << std::endl;
   10f4d:	48 8b 6d 28          	mov    0x28(%rbp),%rbp
      if (!__s)
   10f51:	48 85 ed             	test   %rbp,%rbp
   10f54:	75 90                	jne    10ee6 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x56>
	__out.setstate(ios_base::badbit);
   10f56:	48 8b 03             	mov    (%rbx),%rax
   10f59:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
   10f5d:	48 01 df             	add    %rbx,%rdi
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
   10f60:	8b 77 20             	mov    0x20(%rdi),%esi
   10f63:	83 ce 01             	or     $0x1,%esi
      { this->clear(this->rdstate() | __state); }
   10f66:	e8 85 5a ff ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
   10f6b:	eb 8f                	jmp    10efc <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x6c>
   10f6d:	0f 1f 00             	nopl   (%rax)
	this->_M_widen_init();
   10f70:	48 89 ef             	mov    %rbp,%rdi
   10f73:	e8 c8 56 ff ff       	call   6640 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
   10f78:	48 8b 45 00          	mov    0x0(%rbp),%rax
   10f7c:	be 0a 00 00 00       	mov    $0xa,%esi
   10f81:	48 8d 15 98 b8 ff ff 	lea    -0x4768(%rip),%rdx        # c820 <_ZNKSt5ctypeIcE8do_widenEc>
   10f88:	48 8b 40 30          	mov    0x30(%rax),%rax
   10f8c:	48 39 d0             	cmp    %rdx,%rax
   10f8f:	74 8d                	je     10f1e <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x8e>
   10f91:	48 89 ef             	mov    %rbp,%rdi
   10f94:	ff d0                	call   *%rax
    { return flush(__os.put(__os.widen('\n'))); }
   10f96:	0f be f0             	movsbl %al,%esi
   10f99:	eb 83                	jmp    10f1e <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x8e>
	__throw_bad_cast();
   10f9b:	e8 70 57 ff ff       	call   6710 <_ZSt16__throw_bad_castv@plt>

0000000000010fa0 <_ZN4rtvc8Instance11_initializeEv>:
void Instance::_initialize() {
   10fa0:	41 57                	push   %r15
  VkApplicationInfo appInfo{};
   10fa2:	66 0f ef c0          	pxor   %xmm0,%xmm0
  appInfo.pApplicationName = "Vulkan Application";
   10fa6:	48 8d 05 44 6a 02 00 	lea    0x26a44(%rip),%rax        # 379f1 <_ZSt19piecewise_construct+0xaa>
void Instance::_initialize() {
   10fad:	41 56                	push   %r14
   10faf:	41 55                	push   %r13
   10fb1:	49 89 fd             	mov    %rdi,%r13
   10fb4:	41 54                	push   %r12
   10fb6:	55                   	push   %rbp
   10fb7:	53                   	push   %rbx
   10fb8:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  VkApplicationInfo appInfo{};
   10fbf:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
      glfwGetRequiredInstanceExtensions(&requiredExtensionCount);
   10fc4:	48 8d 7c 24 1c       	lea    0x1c(%rsp),%rdi
  appInfo.pApplicationName = "Vulkan Application";
   10fc9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  appInfo.pEngineName = "No Engine";
   10fce:	48 8d 05 2f 6a 02 00 	lea    0x26a2f(%rip),%rax        # 37a04 <_ZSt19piecewise_construct+0xbd>
   10fd5:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
   10fda:	48 8b 05 2f 6a 02 00 	mov    0x26a2f(%rip),%rax        # 37a10 <_ZSt19piecewise_construct+0xc9>
  appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
   10fe1:	c7 44 24 38 00 00 40 	movl   $0x400000,0x38(%rsp)
   10fe8:	00 
  appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
   10fe9:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  VkApplicationInfo appInfo{};
   10fee:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
      glfwGetRequiredInstanceExtensions(&requiredExtensionCount);
   10ff3:	e8 d8 53 ff ff       	call   63d0 <glfwGetRequiredInstanceExtensions@plt>
  std::vector<const char *> requiredExtensions{requiredExtensionCount};
   10ff8:	44 8b 74 24 1c       	mov    0x1c(%rsp),%r14d
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   10ffd:	4d 85 f6             	test   %r14,%r14
   11000:	0f 84 aa 01 00 00    	je     111b0 <_ZN4rtvc8Instance11_initializeEv+0x210>
   11006:	4a 8d 0c f5 00 00 00 	lea    0x0(,%r14,8),%rcx
   1100d:	00 
   1100e:	48 89 c5             	mov    %rax,%rbp
   11011:	48 89 cf             	mov    %rcx,%rdi
   11014:	48 89 0c 24          	mov    %rcx,(%rsp)
   11018:	e8 23 55 ff ff       	call   6540 <_Znwm@plt>
      if (__n <= 0)
   1101d:	49 83 fe 01          	cmp    $0x1,%r14
   11021:	48 8b 0c 24          	mov    (%rsp),%rcx
   11025:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1102c:	48 89 c3             	mov    %rax,%rbx
	      ++__first;
   1102f:	48 8d 78 08          	lea    0x8(%rax),%rdi
   11033:	0f 84 97 01 00 00    	je     111d0 <_ZN4rtvc8Instance11_initializeEv+0x230>
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
   11039:	44 8b 7c 24 1c       	mov    0x1c(%rsp),%r15d
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   1103e:	4c 8d 24 08          	lea    (%rax,%rcx,1),%r12
   11042:	4d 89 f8             	mov    %r15,%r8
      for (; __first != __last; ++__first)
   11045:	4c 39 e7             	cmp    %r12,%rdi
   11048:	74 1d                	je     11067 <_ZN4rtvc8Instance11_initializeEv+0xc7>
	*__first = __tmp;
   1104a:	48 8d 51 f8          	lea    -0x8(%rcx),%rdx
   1104e:	31 f6                	xor    %esi,%esi
   11050:	48 89 0c 24          	mov    %rcx,(%rsp)
   11054:	44 89 7c 24 0c       	mov    %r15d,0xc(%rsp)
   11059:	e8 42 52 ff ff       	call   62a0 <memset@plt>
   1105e:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
   11063:	48 8b 0c 24          	mov    (%rsp),%rcx
   11067:	49 89 ce             	mov    %rcx,%r14
   1106a:	45 85 c0             	test   %r8d,%r8d
   1106d:	0f 84 25 01 00 00    	je     11198 <_ZN4rtvc8Instance11_initializeEv+0x1f8>
   11073:	49 83 ff 03          	cmp    $0x3,%r15
   11077:	0f 86 43 01 00 00    	jbe    111c0 <_ZN4rtvc8Instance11_initializeEv+0x220>
   1107d:	48 8d 55 08          	lea    0x8(%rbp),%rdx
   11081:	31 c0                	xor    %eax,%eax
   11083:	48 39 d3             	cmp    %rdx,%rbx
   11086:	0f 85 cc 00 00 00    	jne    11158 <_ZN4rtvc8Instance11_initializeEv+0x1b8>
   1108c:	0f 1f 40 00          	nopl   0x0(%rax)
    requiredExtensions[i] = ppRequiredExtensions[i];
   11090:	48 8b 54 c5 00       	mov    0x0(%rbp,%rax,8),%rdx
   11095:	48 89 14 c3          	mov    %rdx,(%rbx,%rax,8)
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
   11099:	48 83 c0 01          	add    $0x1,%rax
   1109d:	4c 39 f8             	cmp    %r15,%rax
   110a0:	72 ee                	jb     11090 <_ZN4rtvc8Instance11_initializeEv+0xf0>
   110a2:	bf 08 00 00 00       	mov    $0x8,%edi
  std::vector<const char *> layers = {"VK_LAYER_MANGOHUD_overlay"};
   110a7:	4c 8d 3d 4f 68 02 00 	lea    0x2684f(%rip),%r15        # 378fd <_ZTSN3vkw10ImageViewsE+0x52d>
   110ae:	e8 8d 54 ff ff       	call   6540 <_Znwm@plt>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   110b3:	4c 89 38             	mov    %r15,(%rax)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   110b6:	49 29 dc             	sub    %rbx,%r12
  VkInstanceCreateInfo instanceInfo{};
   110b9:	66 0f ef c0          	pxor   %xmm0,%xmm0
   110bd:	48 89 c5             	mov    %rax,%rbp
   110c0:	49 c1 fc 03          	sar    $0x3,%r12
  instanceInfo.pApplicationInfo = &appInfo;
   110c4:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  vkCreateInstance(&instanceInfo, nullptr, &_instance);
   110c9:	49 8d 55 08          	lea    0x8(%r13),%rdx
   110cd:	31 f6                	xor    %esi,%esi
   110cf:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  VkInstanceCreateInfo instanceInfo{};
   110d4:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   110d9:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
   110de:	c7 84 24 84 00 00 00 	movl   $0x0,0x84(%rsp)
   110e5:	00 00 00 00 
  instanceInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
   110e9:	c7 44 24 50 01 00 00 	movl   $0x1,0x50(%rsp)
   110f0:	00 
  instanceInfo.pApplicationInfo = &appInfo;
   110f1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  instanceInfo.enabledLayerCount = static_cast<uint32_t>(layers.size());
   110f6:	c7 44 24 70 01 00 00 	movl   $0x1,0x70(%rsp)
   110fd:	00 
  instanceInfo.ppEnabledLayerNames = layers.data();
   110fe:	48 89 6c 24 78       	mov    %rbp,0x78(%rsp)
  instanceInfo.enabledExtensionCount =
   11103:	44 89 a4 24 80 00 00 	mov    %r12d,0x80(%rsp)
   1110a:	00 
  instanceInfo.ppEnabledExtensionNames = requiredExtensions.data();
   1110b:	48 89 9c 24 88 00 00 	mov    %rbx,0x88(%rsp)
   11112:	00 
  VkInstanceCreateInfo instanceInfo{};
   11113:	0f 11 44 24 54       	movups %xmm0,0x54(%rsp)
  vkCreateInstance(&instanceInfo, nullptr, &_instance);
   11118:	e8 93 55 ff ff       	call   66b0 <vkCreateInstance@plt>
  _isOwner = true;
   1111d:	41 c6 45 18 01       	movb   $0x1,0x18(%r13)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   11122:	be 08 00 00 00       	mov    $0x8,%esi
   11127:	48 89 ef             	mov    %rbp,%rdi
   1112a:	e8 31 54 ff ff       	call   6560 <_ZdlPvm@plt>
	if (__p)
   1112f:	48 85 db             	test   %rbx,%rbx
   11132:	74 0b                	je     1113f <_ZN4rtvc8Instance11_initializeEv+0x19f>
   11134:	4c 89 f6             	mov    %r14,%rsi
   11137:	48 89 df             	mov    %rbx,%rdi
   1113a:	e8 21 54 ff ff       	call   6560 <_ZdlPvm@plt>
}
   1113f:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
   11146:	5b                   	pop    %rbx
   11147:	5d                   	pop    %rbp
   11148:	41 5c                	pop    %r12
   1114a:	41 5d                	pop    %r13
   1114c:	41 5e                	pop    %r14
   1114e:	41 5f                	pop    %r15
   11150:	c3                   	ret
   11151:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   11158:	4d 85 ff             	test   %r15,%r15
   1115b:	b9 01 00 00 00       	mov    $0x1,%ecx
   11160:	49 0f 45 cf          	cmovne %r15,%rcx
   11164:	48 89 ca             	mov    %rcx,%rdx
   11167:	48 d1 ea             	shr    %rdx
   1116a:	48 c1 e2 04          	shl    $0x4,%rdx
   1116e:	66 90                	xchg   %ax,%ax
    requiredExtensions[i] = ppRequiredExtensions[i];
   11170:	f3 0f 6f 4c 05 00    	movdqu 0x0(%rbp,%rax,1),%xmm1
   11176:	0f 11 0c 03          	movups %xmm1,(%rbx,%rax,1)
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
   1117a:	48 83 c0 10          	add    $0x10,%rax
   1117e:	48 39 c2             	cmp    %rax,%rdx
   11181:	75 ed                	jne    11170 <_ZN4rtvc8Instance11_initializeEv+0x1d0>
   11183:	48 89 c8             	mov    %rcx,%rax
   11186:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
   1118a:	83 e1 01             	and    $0x1,%ecx
   1118d:	74 09                	je     11198 <_ZN4rtvc8Instance11_initializeEv+0x1f8>
    requiredExtensions[i] = ppRequiredExtensions[i];
   1118f:	48 8b 54 c5 00       	mov    0x0(%rbp,%rax,8),%rdx
   11194:	48 89 14 c3          	mov    %rdx,(%rbx,%rax,8)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   11198:	bf 08 00 00 00       	mov    $0x8,%edi
  std::vector<const char *> layers = {"VK_LAYER_MANGOHUD_overlay"};
   1119d:	4c 8d 3d 59 67 02 00 	lea    0x26759(%rip),%r15        # 378fd <_ZTSN3vkw10ImageViewsE+0x52d>
   111a4:	e8 97 53 ff ff       	call   6540 <_Znwm@plt>
   111a9:	e9 05 ff ff ff       	jmp    110b3 <_ZN4rtvc8Instance11_initializeEv+0x113>
   111ae:	66 90                	xchg   %ax,%ax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   111b0:	31 db                	xor    %ebx,%ebx
   111b2:	45 31 e4             	xor    %r12d,%r12d
   111b5:	eb e1                	jmp    11198 <_ZN4rtvc8Instance11_initializeEv+0x1f8>
   111b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   111be:	00 00 
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
   111c0:	31 c0                	xor    %eax,%eax
   111c2:	e9 c9 fe ff ff       	jmp    11090 <_ZN4rtvc8Instance11_initializeEv+0xf0>
   111c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   111ce:	00 00 
   111d0:	44 8b 7c 24 1c       	mov    0x1c(%rsp),%r15d
	return __first;
   111d5:	49 89 fc             	mov    %rdi,%r12
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   111d8:	41 be 08 00 00 00    	mov    $0x8,%r14d
   111de:	4d 89 f8             	mov    %r15,%r8
   111e1:	e9 84 fe ff ff       	jmp    1106a <_ZN4rtvc8Instance11_initializeEv+0xca>
	if (__p)
   111e6:	49 89 c4             	mov    %rax,%r12
   111e9:	e9 89 6d ff ff       	jmp    7f77 <_ZN4rtvc8Instance11_initializeEv.cold+0xd>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   111ee:	49 89 c4             	mov    %rax,%r12
   111f1:	e9 86 6d ff ff       	jmp    7f7c <_ZN4rtvc8Instance11_initializeEv.cold+0x12>
   111f6:	49 89 c4             	mov    %rax,%r12
   111f9:	e9 6c 6d ff ff       	jmp    7f6a <_ZN4rtvc8Instance11_initializeEv.cold>
   111fe:	66 90                	xchg   %ax,%ax

0000000000011200 <_ZL21stbi__mad3sizes_validiiii>:
   if (a < 0 || b < 0) return 0;
   11200:	89 f8                	mov    %edi,%eax
   11202:	45 31 c9             	xor    %r9d,%r9d
{
   11205:	41 89 d0             	mov    %edx,%r8d
   if (a < 0 || b < 0) return 0;
   11208:	09 f0                	or     %esi,%eax
   1120a:	78 29                	js     11235 <_ZL21stbi__mad3sizes_validiiii+0x35>
   if (b == 0) return 1; // mul-by-0 is always safe
   1120c:	85 f6                	test   %esi,%esi
   1120e:	74 30                	je     11240 <_ZL21stbi__mad3sizes_validiiii+0x40>
   return a <= INT_MAX/b;
   11210:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   11215:	31 d2                	xor    %edx,%edx
   11217:	f7 fe                	idiv   %esi
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   11219:	39 c7                	cmp    %eax,%edi
   1121b:	7f 18                	jg     11235 <_ZL21stbi__mad3sizes_validiiii+0x35>
   if (a < 0 || b < 0) return 0;
   1121d:	45 85 c0             	test   %r8d,%r8d
   11220:	78 13                	js     11235 <_ZL21stbi__mad3sizes_validiiii+0x35>
   if (b == 0) return 1; // mul-by-0 is always safe
   11222:	74 4c                	je     11270 <_ZL21stbi__mad3sizes_validiiii+0x70>
   return a <= INT_MAX/b;
   11224:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   11229:	0f af f7             	imul   %edi,%esi
   return a <= INT_MAX/b;
   1122c:	31 d2                	xor    %edx,%edx
   1122e:	41 f7 f8             	idiv   %r8d
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   11231:	39 c6                	cmp    %eax,%esi
   11233:	7e 2b                	jle    11260 <_ZL21stbi__mad3sizes_validiiii+0x60>
}
   11235:	44 89 c8             	mov    %r9d,%eax
   11238:	c3                   	ret
   11239:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   if (a < 0 || b < 0) return 0;
   11240:	85 d2                	test   %edx,%edx
   11242:	78 f1                	js     11235 <_ZL21stbi__mad3sizes_validiiii+0x35>
   return a <= INT_MAX - b;
   11244:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   11249:	45 31 c9             	xor    %r9d,%r9d
   1124c:	29 c8                	sub    %ecx,%eax
   1124e:	39 f0                	cmp    %esi,%eax
   11250:	41 0f 9d c1          	setge  %r9b
}
   11254:	44 89 c8             	mov    %r9d,%eax
   11257:	c3                   	ret
   11258:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1125f:	00 
      stbi__addsizes_valid(a*b*c, add);
   11260:	41 0f af f0          	imul   %r8d,%esi
   11264:	eb de                	jmp    11244 <_ZL21stbi__mad3sizes_validiiii+0x44>
   11266:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1126d:	00 00 00 
   11270:	31 f6                	xor    %esi,%esi
   11272:	eb d0                	jmp    11244 <_ZL21stbi__mad3sizes_validiiii+0x44>
   11274:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   1127b:	00 00 00 00 
   1127f:	90                   	nop

0000000000011280 <_ZL19stbi__refill_bufferP13stbi__context>:
{
   11280:	55                   	push   %rbp
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   11281:	48 8d 6f 38          	lea    0x38(%rdi),%rbp
{
   11285:	53                   	push   %rbx
   11286:	48 89 fb             	mov    %rdi,%rbx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   11289:	48 89 ee             	mov    %rbp,%rsi
{
   1128c:	48 83 ec 08          	sub    $0x8,%rsp
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   11290:	8b 57 34             	mov    0x34(%rdi),%edx
   11293:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   11297:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1129a:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   112a1:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   112a8:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   112ae:	85 c0                	test   %eax,%eax
   112b0:	75 2e                	jne    112e0 <_ZL19stbi__refill_bufferP13stbi__context+0x60>
      s->read_from_callbacks = 0;
   112b2:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   112b9:	48 8d 43 39          	lea    0x39(%rbx),%rax
      *s->img_buffer = 0;
   112bd:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   112c1:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
   112c8:	48 89 ab c0 00 00 00 	mov    %rbp,0xc0(%rbx)
}
   112cf:	48 83 c4 08          	add    $0x8,%rsp
   112d3:	5b                   	pop    %rbx
   112d4:	5d                   	pop    %rbp
   112d5:	c3                   	ret
   112d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   112dd:	00 00 00 
      s->img_buffer_end = s->buffer_start + n;
   112e0:	48 98                	cltq
   112e2:	48 01 e8             	add    %rbp,%rax
   112e5:	eb da                	jmp    112c1 <_ZL19stbi__refill_bufferP13stbi__context+0x41>
   112e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   112ee:	00 00 

00000000000112f0 <_ZL14resample_row_1PhS_S_ii>:
{
   112f0:	48 89 f0             	mov    %rsi,%rax
}
   112f3:	c3                   	ret
   112f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   112fb:	00 00 00 00 
   112ff:	90                   	nop

0000000000011300 <_ZL22stbi__resample_row_v_2PhS_S_ii>:
{
   11300:	49 89 d0             	mov    %rdx,%r8
   11303:	89 c8                	mov    %ecx,%eax
   for (i=0; i < w; ++i)
   11305:	85 c9                	test   %ecx,%ecx
   11307:	0f 8e 8c 02 00 00    	jle    11599 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x299>
   1130d:	8d 51 ff             	lea    -0x1(%rcx),%edx
   11310:	41 89 c9             	mov    %ecx,%r9d
   11313:	83 fa 06             	cmp    $0x6,%edx
   11316:	0f 86 84 02 00 00    	jbe    115a0 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x2a0>
   1131c:	4c 8d 56 01          	lea    0x1(%rsi),%r10
   11320:	48 89 f9             	mov    %rdi,%rcx
   11323:	4c 29 d1             	sub    %r10,%rcx
   11326:	48 83 f9 0e          	cmp    $0xe,%rcx
   1132a:	0f 86 70 02 00 00    	jbe    115a0 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x2a0>
   11330:	4d 8d 50 01          	lea    0x1(%r8),%r10
   11334:	48 89 f9             	mov    %rdi,%rcx
   11337:	4c 29 d1             	sub    %r10,%rcx
   1133a:	48 83 f9 0e          	cmp    $0xe,%rcx
   1133e:	0f 86 5c 02 00 00    	jbe    115a0 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x2a0>
   11344:	83 fa 0e             	cmp    $0xe,%edx
   11347:	0f 86 80 02 00 00    	jbe    115cd <_ZL22stbi__resample_row_v_2PhS_S_ii+0x2cd>
   1134d:	89 c1                	mov    %eax,%ecx
   1134f:	66 0f 6f 2d a9 74 02 	movdqa 0x274a9(%rip),%xmm5        # 38800 <_ZL11stbi__bmask+0x80>
   11356:	00 
   11357:	31 d2                	xor    %edx,%edx
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   11359:	66 0f ef d2          	pxor   %xmm2,%xmm2
   1135d:	c1 e9 04             	shr    $0x4,%ecx
   11360:	66 0f 6f 25 a8 74 02 	movdqa 0x274a8(%rip),%xmm4        # 38810 <_ZL11stbi__bmask+0x90>
   11367:	00 
   11368:	66 0f 6f 1d b0 74 02 	movdqa 0x274b0(%rip),%xmm3        # 38820 <_ZL11stbi__bmask+0xa0>
   1136f:	00 
   11370:	48 c1 e1 04          	shl    $0x4,%rcx
   11374:	0f 1f 40 00          	nopl   0x0(%rax)
   11378:	f3 0f 6f 04 16       	movdqu (%rsi,%rdx,1),%xmm0
   1137d:	f3 41 0f 6f 34 10    	movdqu (%r8,%rdx,1),%xmm6
   11383:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   11387:	66 0f 68 c2          	punpckhbw %xmm2,%xmm0
   1138b:	66 0f 6f fe          	movdqa %xmm6,%xmm7
   1138f:	66 0f 60 ca          	punpcklbw %xmm2,%xmm1
   11393:	66 0f d5 c3          	pmullw %xmm3,%xmm0
   11397:	66 0f 60 fa          	punpcklbw %xmm2,%xmm7
   1139b:	66 0f d5 cb          	pmullw %xmm3,%xmm1
   1139f:	66 0f 68 f2          	punpckhbw %xmm2,%xmm6
   113a3:	66 0f fd c6          	paddw  %xmm6,%xmm0
   113a7:	66 0f fd cf          	paddw  %xmm7,%xmm1
   113ab:	66 0f fd c5          	paddw  %xmm5,%xmm0
   113af:	66 0f fd cd          	paddw  %xmm5,%xmm1
   113b3:	66 0f 71 d0 02       	psrlw  $0x2,%xmm0
   113b8:	66 0f 71 d1 02       	psrlw  $0x2,%xmm1
   113bd:	66 0f db c4          	pand   %xmm4,%xmm0
   113c1:	66 0f db cc          	pand   %xmm4,%xmm1
   113c5:	66 0f 67 c8          	packuswb %xmm0,%xmm1
   113c9:	0f 11 0c 17          	movups %xmm1,(%rdi,%rdx,1)
   for (i=0; i < w; ++i)
   113cd:	48 83 c2 10          	add    $0x10,%rdx
   113d1:	48 39 d1             	cmp    %rdx,%rcx
   113d4:	75 a2                	jne    11378 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x78>
   113d6:	89 c2                	mov    %eax,%edx
   113d8:	83 e2 f0             	and    $0xfffffff0,%edx
   113db:	89 d1                	mov    %edx,%ecx
   113dd:	39 d0                	cmp    %edx,%eax
   113df:	0f 84 b4 01 00 00    	je     11599 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x299>
   113e5:	41 89 c1             	mov    %eax,%r9d
   113e8:	41 29 d1             	sub    %edx,%r9d
   113eb:	45 8d 51 ff          	lea    -0x1(%r9),%r10d
   113ef:	41 83 fa 06          	cmp    $0x6,%r10d
   113f3:	0f 86 9d 00 00 00    	jbe    11496 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x196>
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   113f9:	f3 0f 7e 14 0e       	movq   (%rsi,%rcx,1),%xmm2
   113fe:	66 0f ef db          	pxor   %xmm3,%xmm3
   11402:	f3 41 0f 7e 24 08    	movq   (%r8,%rcx,1),%xmm4
   11408:	f3 0f 7e 0d f0 73 02 	movq   0x273f0(%rip),%xmm1        # 38800 <_ZL11stbi__bmask+0x80>
   1140f:	00 
   11410:	66 0f 6f f2          	movdqa %xmm2,%xmm6
   11414:	66 0f 60 d3          	punpcklbw %xmm3,%xmm2
   11418:	66 0f 6f c4          	movdqa %xmm4,%xmm0
   1141c:	66 0f 60 f3          	punpcklbw %xmm3,%xmm6
   11420:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   11425:	66 0f 60 c3          	punpcklbw %xmm3,%xmm0
   11429:	66 0f 60 e3          	punpcklbw %xmm3,%xmm4
   1142d:	66 0f 6f ee          	movdqa %xmm6,%xmm5
   11431:	66 0f 6f da          	movdqa %xmm2,%xmm3
   11435:	66 0f 71 f5 01       	psllw  $0x1,%xmm5
   1143a:	66 0f 70 e4 4e       	pshufd $0x4e,%xmm4,%xmm4
   1143f:	66 0f fd c1          	paddw  %xmm1,%xmm0
   11443:	66 0f 71 f3 01       	psllw  $0x1,%xmm3
   11448:	66 0f fd ee          	paddw  %xmm6,%xmm5
   1144c:	66 0f fd cc          	paddw  %xmm4,%xmm1
   11450:	66 0f fd d3          	paddw  %xmm3,%xmm2
   11454:	66 0f fd c5          	paddw  %xmm5,%xmm0
   11458:	66 0f fd ca          	paddw  %xmm2,%xmm1
   1145c:	f3 0f 7e 15 ac 73 02 	movq   0x273ac(%rip),%xmm2        # 38810 <_ZL11stbi__bmask+0x90>
   11463:	00 
   11464:	66 0f 71 d0 02       	psrlw  $0x2,%xmm0
   11469:	66 0f 71 d1 02       	psrlw  $0x2,%xmm1
   1146e:	66 0f db c2          	pand   %xmm2,%xmm0
   11472:	66 0f db d1          	pand   %xmm1,%xmm2
   11476:	66 0f 67 c2          	packuswb %xmm2,%xmm0
   1147a:	66 0f 70 c0 08       	pshufd $0x8,%xmm0,%xmm0
   1147f:	66 0f d6 04 0f       	movq   %xmm0,(%rdi,%rcx,1)
   for (i=0; i < w; ++i)
   11484:	44 89 c9             	mov    %r9d,%ecx
   11487:	83 e1 f8             	and    $0xfffffff8,%ecx
   1148a:	01 ca                	add    %ecx,%edx
   1148c:	41 83 e1 07          	and    $0x7,%r9d
   11490:	0f 84 03 01 00 00    	je     11599 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x299>
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   11496:	48 63 ca             	movslq %edx,%rcx
   11499:	44 0f b6 0c 0e       	movzbl (%rsi,%rcx,1),%r9d
   1149e:	47 8d 14 49          	lea    (%r9,%r9,2),%r10d
   114a2:	45 0f b6 0c 08       	movzbl (%r8,%rcx,1),%r9d
   114a7:	47 8d 4c 0a 02       	lea    0x2(%r10,%r9,1),%r9d
   114ac:	41 c1 f9 02          	sar    $0x2,%r9d
   114b0:	44 88 0c 0f          	mov    %r9b,(%rdi,%rcx,1)
   for (i=0; i < w; ++i)
   114b4:	8d 4a 01             	lea    0x1(%rdx),%ecx
   114b7:	39 c8                	cmp    %ecx,%eax
   114b9:	0f 8e da 00 00 00    	jle    11599 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x299>
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   114bf:	48 63 c9             	movslq %ecx,%rcx
   114c2:	44 0f b6 0c 0e       	movzbl (%rsi,%rcx,1),%r9d
   114c7:	47 8d 14 49          	lea    (%r9,%r9,2),%r10d
   114cb:	45 0f b6 0c 08       	movzbl (%r8,%rcx,1),%r9d
   114d0:	47 8d 4c 0a 02       	lea    0x2(%r10,%r9,1),%r9d
   114d5:	41 c1 f9 02          	sar    $0x2,%r9d
   114d9:	44 88 0c 0f          	mov    %r9b,(%rdi,%rcx,1)
   for (i=0; i < w; ++i)
   114dd:	8d 4a 02             	lea    0x2(%rdx),%ecx
   114e0:	39 c8                	cmp    %ecx,%eax
   114e2:	0f 8e b1 00 00 00    	jle    11599 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x299>
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   114e8:	48 63 c9             	movslq %ecx,%rcx
   114eb:	44 0f b6 0c 0e       	movzbl (%rsi,%rcx,1),%r9d
   114f0:	47 8d 14 49          	lea    (%r9,%r9,2),%r10d
   114f4:	45 0f b6 0c 08       	movzbl (%r8,%rcx,1),%r9d
   114f9:	47 8d 4c 0a 02       	lea    0x2(%r10,%r9,1),%r9d
   114fe:	41 c1 f9 02          	sar    $0x2,%r9d
   11502:	44 88 0c 0f          	mov    %r9b,(%rdi,%rcx,1)
   for (i=0; i < w; ++i)
   11506:	8d 4a 03             	lea    0x3(%rdx),%ecx
   11509:	39 c8                	cmp    %ecx,%eax
   1150b:	0f 8e 88 00 00 00    	jle    11599 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x299>
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   11511:	48 63 c9             	movslq %ecx,%rcx
   11514:	44 0f b6 0c 0e       	movzbl (%rsi,%rcx,1),%r9d
   11519:	47 8d 14 49          	lea    (%r9,%r9,2),%r10d
   1151d:	45 0f b6 0c 08       	movzbl (%r8,%rcx,1),%r9d
   11522:	47 8d 4c 0a 02       	lea    0x2(%r10,%r9,1),%r9d
   11527:	41 c1 f9 02          	sar    $0x2,%r9d
   1152b:	44 88 0c 0f          	mov    %r9b,(%rdi,%rcx,1)
   for (i=0; i < w; ++i)
   1152f:	8d 4a 04             	lea    0x4(%rdx),%ecx
   11532:	39 c8                	cmp    %ecx,%eax
   11534:	7e 63                	jle    11599 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x299>
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   11536:	48 63 c9             	movslq %ecx,%rcx
   11539:	44 0f b6 0c 0e       	movzbl (%rsi,%rcx,1),%r9d
   1153e:	47 8d 14 49          	lea    (%r9,%r9,2),%r10d
   11542:	45 0f b6 0c 08       	movzbl (%r8,%rcx,1),%r9d
   11547:	47 8d 4c 0a 02       	lea    0x2(%r10,%r9,1),%r9d
   1154c:	41 c1 f9 02          	sar    $0x2,%r9d
   11550:	44 88 0c 0f          	mov    %r9b,(%rdi,%rcx,1)
   for (i=0; i < w; ++i)
   11554:	8d 4a 05             	lea    0x5(%rdx),%ecx
   11557:	39 c8                	cmp    %ecx,%eax
   11559:	7e 3e                	jle    11599 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x299>
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   1155b:	48 63 c9             	movslq %ecx,%rcx
   for (i=0; i < w; ++i)
   1155e:	83 c2 06             	add    $0x6,%edx
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   11561:	44 0f b6 0c 0e       	movzbl (%rsi,%rcx,1),%r9d
   11566:	47 8d 14 49          	lea    (%r9,%r9,2),%r10d
   1156a:	45 0f b6 0c 08       	movzbl (%r8,%rcx,1),%r9d
   1156f:	47 8d 4c 0a 02       	lea    0x2(%r10,%r9,1),%r9d
   11574:	41 c1 f9 02          	sar    $0x2,%r9d
   11578:	44 88 0c 0f          	mov    %r9b,(%rdi,%rcx,1)
   for (i=0; i < w; ++i)
   1157c:	39 d0                	cmp    %edx,%eax
   1157e:	7e 19                	jle    11599 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x299>
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   11580:	48 63 d2             	movslq %edx,%rdx
   11583:	0f b6 04 16          	movzbl (%rsi,%rdx,1),%eax
   11587:	8d 0c 40             	lea    (%rax,%rax,2),%ecx
   1158a:	41 0f b6 04 10       	movzbl (%r8,%rdx,1),%eax
   1158f:	8d 44 01 02          	lea    0x2(%rcx,%rax,1),%eax
   11593:	c1 f8 02             	sar    $0x2,%eax
   11596:	88 04 17             	mov    %al,(%rdi,%rdx,1)
}
   11599:	48 89 f8             	mov    %rdi,%rax
   1159c:	c3                   	ret
   1159d:	0f 1f 00             	nopl   (%rax)
   115a0:	48 63 c8             	movslq %eax,%rcx
   for (i=0; i < w; ++i)
   115a3:	31 c0                	xor    %eax,%eax
   115a5:	0f 1f 00             	nopl   (%rax)
      out[i] = stbi__div4(3*in_near[i] + in_far[i] + 2);
   115a8:	0f b6 14 06          	movzbl (%rsi,%rax,1),%edx
   115ac:	44 8d 0c 52          	lea    (%rdx,%rdx,2),%r9d
   115b0:	41 0f b6 14 00       	movzbl (%r8,%rax,1),%edx
   115b5:	41 8d 54 11 02       	lea    0x2(%r9,%rdx,1),%edx
   115ba:	c1 fa 02             	sar    $0x2,%edx
   115bd:	88 14 07             	mov    %dl,(%rdi,%rax,1)
   for (i=0; i < w; ++i)
   115c0:	48 83 c0 01          	add    $0x1,%rax
   115c4:	48 39 c1             	cmp    %rax,%rcx
   115c7:	75 df                	jne    115a8 <_ZL22stbi__resample_row_v_2PhS_S_ii+0x2a8>
}
   115c9:	48 89 f8             	mov    %rdi,%rax
   115cc:	c3                   	ret
   for (i=0; i < w; ++i)
   115cd:	31 c9                	xor    %ecx,%ecx
   115cf:	31 d2                	xor    %edx,%edx
   115d1:	e9 23 fe ff ff       	jmp    113f9 <_ZL22stbi__resample_row_v_2PhS_S_ii+0xf9>
   115d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   115dd:	00 00 00 

00000000000115e0 <_ZL26stbi__resample_row_genericPhS_S_ii>:
{
   115e0:	49 89 f9             	mov    %rdi,%r9
   for (i=0; i < w; ++i)
   115e3:	85 c9                	test   %ecx,%ecx
   115e5:	0f 8e 03 02 00 00    	jle    117ee <_ZL26stbi__resample_row_genericPhS_S_ii+0x20e>
   115eb:	45 85 c0             	test   %r8d,%r8d
   115ee:	0f 8e fa 01 00 00    	jle    117ee <_ZL26stbi__resample_row_genericPhS_S_ii+0x20e>
{
   115f4:	41 57                	push   %r15
   115f6:	48 63 c9             	movslq %ecx,%rcx
   115f9:	44 89 c2             	mov    %r8d,%edx
   115fc:	48 89 f0             	mov    %rsi,%rax
   115ff:	41 56                	push   %r14
   11601:	4c 8d 3c 0e          	lea    (%rsi,%rcx,1),%r15
   11605:	44 89 c1             	mov    %r8d,%ecx
   11608:	c1 ea 04             	shr    $0x4,%edx
   1160b:	41 55                	push   %r13
   1160d:	83 e1 0f             	and    $0xf,%ecx
   11610:	44 89 c6             	mov    %r8d,%esi
   11613:	48 c1 e2 04          	shl    $0x4,%rdx
   11617:	41 54                	push   %r12
   11619:	83 e6 f0             	and    $0xfffffff0,%esi
   1161c:	45 8d 68 ff          	lea    -0x1(%r8),%r13d
   11620:	55                   	push   %rbp
   11621:	53                   	push   %rbx
   11622:	49 63 d8             	movslq %r8d,%rbx
   11625:	4c 8d 34 1f          	lea    (%rdi,%rbx,1),%r14
   11629:	89 4c 24 f0          	mov    %ecx,-0x10(%rsp)
   1162d:	83 e9 01             	sub    $0x1,%ecx
   11630:	89 4c 24 f4          	mov    %ecx,-0xc(%rsp)
   11634:	48 89 54 24 e8       	mov    %rdx,-0x18(%rsp)
   for (i=0; i < w; ++i)
   11639:	4c 89 f2             	mov    %r14,%rdx
   1163c:	89 74 24 e4          	mov    %esi,-0x1c(%rsp)
   11640:	31 f6                	xor    %esi,%esi
   11642:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      for (j=0; j < hs; ++j)
   11648:	41 83 fd 06          	cmp    $0x6,%r13d
   1164c:	0f 86 7e 01 00 00    	jbe    117d0 <_ZL26stbi__resample_row_genericPhS_S_ii+0x1f0>
   11652:	49 89 d3             	mov    %rdx,%r11
   11655:	4c 8d 50 01          	lea    0x1(%rax),%r10
   11659:	4d 29 f3             	sub    %r14,%r11
   1165c:	4c 39 d7             	cmp    %r10,%rdi
   1165f:	73 3f                	jae    116a0 <_ZL26stbi__resample_row_genericPhS_S_ii+0xc0>
   11661:	48 8d 0c 3b          	lea    (%rbx,%rdi,1),%rcx
   11665:	48 39 c8             	cmp    %rcx,%rax
   11668:	73 36                	jae    116a0 <_ZL26stbi__resample_row_genericPhS_S_ii+0xc0>
   for (i=0; i < w; ++i)
   1166a:	48 89 f9             	mov    %rdi,%rcx
   1166d:	0f 1f 00             	nopl   (%rax)
         out[i*hs+j] = in_near[i];
   11670:	44 0f b6 18          	movzbl (%rax),%r11d
      for (j=0; j < hs; ++j)
   11674:	48 83 c1 01          	add    $0x1,%rcx
         out[i*hs+j] = in_near[i];
   11678:	44 88 59 ff          	mov    %r11b,-0x1(%rcx)
      for (j=0; j < hs; ++j)
   1167c:	48 39 d1             	cmp    %rdx,%rcx
   1167f:	75 ef                	jne    11670 <_ZL26stbi__resample_row_genericPhS_S_ii+0x90>
   for (i=0; i < w; ++i)
   11681:	48 01 df             	add    %rbx,%rdi
   11684:	44 01 c6             	add    %r8d,%esi
   11687:	4c 89 d0             	mov    %r10,%rax
   1168a:	48 01 da             	add    %rbx,%rdx
   1168d:	4d 39 fa             	cmp    %r15,%r10
   11690:	75 b6                	jne    11648 <_ZL26stbi__resample_row_genericPhS_S_ii+0x68>
}
   11692:	5b                   	pop    %rbx
   11693:	4c 89 c8             	mov    %r9,%rax
   11696:	5d                   	pop    %rbp
   11697:	41 5c                	pop    %r12
   11699:	41 5d                	pop    %r13
   1169b:	41 5e                	pop    %r14
   1169d:	41 5f                	pop    %r15
   1169f:	c3                   	ret
   116a0:	41 83 fd 0e          	cmp    $0xe,%r13d
   116a4:	0f 86 32 01 00 00    	jbe    117dc <_ZL26stbi__resample_row_genericPhS_S_ii+0x1fc>
   116aa:	0f b6 08             	movzbl (%rax),%ecx
   116ad:	66 0f 6e c1          	movd   %ecx,%xmm0
   116b1:	48 8b 4c 24 e8       	mov    -0x18(%rsp),%rcx
   116b6:	66 0f 60 c0          	punpcklbw %xmm0,%xmm0
   116ba:	66 0f 61 c0          	punpcklwd %xmm0,%xmm0
   116be:	48 8d 2c 39          	lea    (%rcx,%rdi,1),%rbp
{
   116c2:	48 89 f9             	mov    %rdi,%rcx
   116c5:	66 0f 70 c0 00       	pshufd $0x0,%xmm0,%xmm0
   116ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         out[i*hs+j] = in_near[i];
   116d0:	0f 11 01             	movups %xmm0,(%rcx)
      for (j=0; j < hs; ++j)
   116d3:	48 83 c1 10          	add    $0x10,%rcx
   116d7:	48 39 e9             	cmp    %rbp,%rcx
   116da:	75 f4                	jne    116d0 <_ZL26stbi__resample_row_genericPhS_S_ii+0xf0>
   116dc:	8b 4c 24 e4          	mov    -0x1c(%rsp),%ecx
   116e0:	44 39 c1             	cmp    %r8d,%ecx
   116e3:	74 9c                	je     11681 <_ZL26stbi__resample_row_genericPhS_S_ii+0xa1>
   116e5:	83 7c 24 f4 06       	cmpl   $0x6,-0xc(%rsp)
   116ea:	44 8b 64 24 f0       	mov    -0x10(%rsp),%r12d
   116ef:	76 35                	jbe    11726 <_ZL26stbi__resample_row_genericPhS_S_ii+0x146>
   116f1:	89 4c 24 e0          	mov    %ecx,-0x20(%rsp)
         out[i*hs+j] = in_near[i];
   116f5:	89 cd                	mov    %ecx,%ebp
   116f7:	0f b6 08             	movzbl (%rax),%ecx
   116fa:	4d 01 cb             	add    %r9,%r11
   116fd:	88 cd                	mov    %cl,%ch
   116ff:	66 0f 6e c9          	movd   %ecx,%xmm1
   11703:	44 89 e1             	mov    %r12d,%ecx
   11706:	f2 0f 70 c1 00       	pshuflw $0x0,%xmm1,%xmm0
   1170b:	83 e1 f8             	and    $0xfffffff8,%ecx
   1170e:	66 41 0f d6 04 2b    	movq   %xmm0,(%r11,%rbp,1)
      for (j=0; j < hs; ++j)
   11714:	44 8b 5c 24 e0       	mov    -0x20(%rsp),%r11d
   11719:	44 01 d9             	add    %r11d,%ecx
   1171c:	41 83 e4 07          	and    $0x7,%r12d
   11720:	0f 84 5b ff ff ff    	je     11681 <_ZL26stbi__resample_row_genericPhS_S_ii+0xa1>
         out[i*hs+j] = in_near[i];
   11726:	0f b6 28             	movzbl (%rax),%ebp
   11729:	44 8d 1c 0e          	lea    (%rsi,%rcx,1),%r11d
   1172d:	4d 63 db             	movslq %r11d,%r11
   11730:	43 88 2c 19          	mov    %bpl,(%r9,%r11,1)
      for (j=0; j < hs; ++j)
   11734:	44 8d 59 01          	lea    0x1(%rcx),%r11d
   11738:	45 39 d8             	cmp    %r11d,%r8d
   1173b:	0f 8e 40 ff ff ff    	jle    11681 <_ZL26stbi__resample_row_genericPhS_S_ii+0xa1>
         out[i*hs+j] = in_near[i];
   11741:	41 01 f3             	add    %esi,%r11d
   11744:	4d 63 db             	movslq %r11d,%r11
   11747:	43 88 2c 19          	mov    %bpl,(%r9,%r11,1)
      for (j=0; j < hs; ++j)
   1174b:	44 8d 59 02          	lea    0x2(%rcx),%r11d
   1174f:	45 39 d8             	cmp    %r11d,%r8d
   11752:	0f 8e 29 ff ff ff    	jle    11681 <_ZL26stbi__resample_row_genericPhS_S_ii+0xa1>
         out[i*hs+j] = in_near[i];
   11758:	0f b6 28             	movzbl (%rax),%ebp
   1175b:	41 01 f3             	add    %esi,%r11d
   1175e:	4d 63 db             	movslq %r11d,%r11
   11761:	43 88 2c 19          	mov    %bpl,(%r9,%r11,1)
      for (j=0; j < hs; ++j)
   11765:	44 8d 59 03          	lea    0x3(%rcx),%r11d
   11769:	45 39 d8             	cmp    %r11d,%r8d
   1176c:	0f 8e 0f ff ff ff    	jle    11681 <_ZL26stbi__resample_row_genericPhS_S_ii+0xa1>
         out[i*hs+j] = in_near[i];
   11772:	41 01 f3             	add    %esi,%r11d
   11775:	4d 63 db             	movslq %r11d,%r11
   11778:	43 88 2c 19          	mov    %bpl,(%r9,%r11,1)
      for (j=0; j < hs; ++j)
   1177c:	44 8d 59 04          	lea    0x4(%rcx),%r11d
   11780:	45 39 d8             	cmp    %r11d,%r8d
   11783:	0f 8e f8 fe ff ff    	jle    11681 <_ZL26stbi__resample_row_genericPhS_S_ii+0xa1>
         out[i*hs+j] = in_near[i];
   11789:	0f b6 28             	movzbl (%rax),%ebp
   1178c:	41 01 f3             	add    %esi,%r11d
   1178f:	4d 63 db             	movslq %r11d,%r11
   11792:	43 88 2c 19          	mov    %bpl,(%r9,%r11,1)
      for (j=0; j < hs; ++j)
   11796:	44 8d 59 05          	lea    0x5(%rcx),%r11d
   1179a:	45 39 d8             	cmp    %r11d,%r8d
   1179d:	0f 8e de fe ff ff    	jle    11681 <_ZL26stbi__resample_row_genericPhS_S_ii+0xa1>
         out[i*hs+j] = in_near[i];
   117a3:	41 01 f3             	add    %esi,%r11d
      for (j=0; j < hs; ++j)
   117a6:	83 c1 06             	add    $0x6,%ecx
         out[i*hs+j] = in_near[i];
   117a9:	4d 63 db             	movslq %r11d,%r11
   117ac:	43 88 2c 19          	mov    %bpl,(%r9,%r11,1)
      for (j=0; j < hs; ++j)
   117b0:	41 39 c8             	cmp    %ecx,%r8d
   117b3:	0f 8e c8 fe ff ff    	jle    11681 <_ZL26stbi__resample_row_genericPhS_S_ii+0xa1>
         out[i*hs+j] = in_near[i];
   117b9:	0f b6 00             	movzbl (%rax),%eax
   117bc:	01 f1                	add    %esi,%ecx
   117be:	48 63 c9             	movslq %ecx,%rcx
   117c1:	41 88 04 09          	mov    %al,(%r9,%rcx,1)
      for (j=0; j < hs; ++j)
   117c5:	e9 b7 fe ff ff       	jmp    11681 <_ZL26stbi__resample_row_genericPhS_S_ii+0xa1>
   117ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   for (i=0; i < w; ++i)
   117d0:	48 89 f9             	mov    %rdi,%rcx
   117d3:	4c 8d 50 01          	lea    0x1(%rax),%r10
   117d7:	e9 94 fe ff ff       	jmp    11670 <_ZL26stbi__resample_row_genericPhS_S_ii+0x90>
      for (j=0; j < hs; ++j)
   117dc:	c7 44 24 e0 00 00 00 	movl   $0x0,-0x20(%rsp)
   117e3:	00 
   117e4:	45 89 c4             	mov    %r8d,%r12d
   117e7:	31 ed                	xor    %ebp,%ebp
   117e9:	e9 09 ff ff ff       	jmp    116f7 <_ZL26stbi__resample_row_genericPhS_S_ii+0x117>
}
   117ee:	4c 89 c8             	mov    %r9,%rax
   117f1:	c3                   	ret
   117f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   117f9:	00 00 00 00 
   117fd:	0f 1f 00             	nopl   (%rax)

0000000000011800 <_ZL18stbi__out_gif_codeP9stbi__gift>:
{
   11800:	55                   	push   %rbp
   if (g->codes[code].prefix >= 0)
   11801:	0f b7 ee             	movzwl %si,%ebp
{
   11804:	53                   	push   %rbx
   11805:	48 89 fb             	mov    %rdi,%rbx
   11808:	48 83 ec 08          	sub    $0x8,%rsp
   if (g->codes[code].prefix >= 0)
   1180c:	0f bf b4 af 34 08 00 	movswl 0x834(%rdi,%rbp,4),%esi
   11813:	00 
   11814:	66 85 f6             	test   %si,%si
   11817:	78 05                	js     1181e <_ZL18stbi__out_gif_codeP9stbi__gift+0x1e>
      stbi__out_gif_code(g, g->codes[code].prefix);
   11819:	e8 e2 ff ff ff       	call   11800 <_ZL18stbi__out_gif_codeP9stbi__gift>
   if (g->cur_y >= g->max_y) return;
   1181e:	8b 93 60 88 00 00    	mov    0x8860(%rbx),%edx
   11824:	3b 93 58 88 00 00    	cmp    0x8858(%rbx),%edx
   1182a:	0f 8d d5 00 00 00    	jge    11905 <_ZL18stbi__out_gif_codeP9stbi__gift+0x105>
   idx = g->cur_x + g->cur_y;
   11830:	03 93 5c 88 00 00    	add    0x885c(%rbx),%edx
   g->history[idx / 4] = 1;
   11836:	48 8b 73 18          	mov    0x18(%rbx),%rsi
   1183a:	8d 42 03             	lea    0x3(%rdx),%eax
   p = &g->out[idx];
   1183d:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
   g->history[idx / 4] = 1;
   11841:	0f 49 c2             	cmovns %edx,%eax
   11844:	c1 f8 02             	sar    $0x2,%eax
   11847:	48 98                	cltq
   11849:	c6 04 06 01          	movb   $0x1,(%rsi,%rax,1)
   c = &g->color_table[g->codes[code].suffix * 4];
   1184d:	0f b6 84 ab 37 08 00 	movzbl 0x837(%rbx,%rbp,4),%eax
   11854:	00 
   11855:	c1 e0 02             	shl    $0x2,%eax
   11858:	48 98                	cltq
   1185a:	48 03 83 38 88 00 00 	add    0x8838(%rbx),%rax
   if (c[3] > 128) { // don't render transparent pixels;
   11861:	80 78 03 80          	cmpb   $0x80,0x3(%rax)
   11865:	76 20                	jbe    11887 <_ZL18stbi__out_gif_codeP9stbi__gift+0x87>
   p = &g->out[idx];
   11867:	48 63 d2             	movslq %edx,%rdx
   1186a:	48 01 ca             	add    %rcx,%rdx
      p[0] = c[2];
   1186d:	0f b6 48 02          	movzbl 0x2(%rax),%ecx
   11871:	88 0a                	mov    %cl,(%rdx)
      p[1] = c[1];
   11873:	0f b6 48 01          	movzbl 0x1(%rax),%ecx
   11877:	88 4a 01             	mov    %cl,0x1(%rdx)
      p[2] = c[0];
   1187a:	0f b6 08             	movzbl (%rax),%ecx
   1187d:	88 4a 02             	mov    %cl,0x2(%rdx)
      p[3] = c[3];
   11880:	0f b6 40 03          	movzbl 0x3(%rax),%eax
   11884:	88 42 03             	mov    %al,0x3(%rdx)
   g->cur_x += 4;
   11887:	8b 83 5c 88 00 00    	mov    0x885c(%rbx),%eax
   1188d:	83 c0 04             	add    $0x4,%eax
   11890:	89 83 5c 88 00 00    	mov    %eax,0x885c(%rbx)
   if (g->cur_x >= g->max_x) {
   11896:	3b 83 54 88 00 00    	cmp    0x8854(%rbx),%eax
   1189c:	7c 67                	jl     11905 <_ZL18stbi__out_gif_codeP9stbi__gift+0x105>
      g->cur_y += g->step;
   1189e:	8b 83 44 88 00 00    	mov    0x8844(%rbx),%eax
      g->cur_x = g->start_x;
   118a4:	66 0f 6e 83 4c 88 00 	movd   0x884c(%rbx),%xmm0
   118ab:	00 
      g->cur_y += g->step;
   118ac:	03 83 60 88 00 00    	add    0x8860(%rbx),%eax
      while (g->cur_y >= g->max_y && g->parse > 0) {
   118b2:	8b 93 58 88 00 00    	mov    0x8858(%rbx),%edx
      g->cur_x = g->start_x;
   118b8:	66 0f 6e c8          	movd   %eax,%xmm1
   118bc:	66 0f 62 c1          	punpckldq %xmm1,%xmm0
   118c0:	66 0f d6 83 5c 88 00 	movq   %xmm0,0x885c(%rbx)
   118c7:	00 
      while (g->cur_y >= g->max_y && g->parse > 0) {
   118c8:	39 d0                	cmp    %edx,%eax
   118ca:	7c 39                	jl     11905 <_ZL18stbi__out_gif_codeP9stbi__gift+0x105>
   118cc:	8b 8b 40 88 00 00    	mov    0x8840(%rbx),%ecx
   118d2:	eb 2d                	jmp    11901 <_ZL18stbi__out_gif_codeP9stbi__gift+0x101>
   118d4:	0f 1f 40 00          	nopl   0x0(%rax)
         g->step = (1 << g->parse) * g->line_size;
   118d8:	8b 83 64 88 00 00    	mov    0x8864(%rbx),%eax
   118de:	d3 e0                	shl    %cl,%eax
         --g->parse;
   118e0:	83 e9 01             	sub    $0x1,%ecx
         g->step = (1 << g->parse) * g->line_size;
   118e3:	89 83 44 88 00 00    	mov    %eax,0x8844(%rbx)
         g->cur_y = g->start_y + (g->step >> 1);
   118e9:	d1 f8                	sar    %eax
   118eb:	03 83 50 88 00 00    	add    0x8850(%rbx),%eax
   118f1:	89 83 60 88 00 00    	mov    %eax,0x8860(%rbx)
         --g->parse;
   118f7:	89 8b 40 88 00 00    	mov    %ecx,0x8840(%rbx)
      while (g->cur_y >= g->max_y && g->parse > 0) {
   118fd:	39 d0                	cmp    %edx,%eax
   118ff:	7c 04                	jl     11905 <_ZL18stbi__out_gif_codeP9stbi__gift+0x105>
   11901:	85 c9                	test   %ecx,%ecx
   11903:	7f d3                	jg     118d8 <_ZL18stbi__out_gif_codeP9stbi__gift+0xd8>
}
   11905:	48 83 c4 08          	add    $0x8,%rsp
   11909:	5b                   	pop    %rbx
   1190a:	5d                   	pop    %rbp
   1190b:	c3                   	ret
   1190c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000011910 <_ZL15stbi__stdio_eofPv>:
{
   11910:	53                   	push   %rbx
   11911:	48 89 fb             	mov    %rdi,%rbx
   return feof((FILE*) user) || ferror((FILE *) user);
   11914:	e8 a7 4f ff ff       	call   68c0 <feof@plt>
   11919:	89 c2                	mov    %eax,%edx
   1191b:	b8 01 00 00 00       	mov    $0x1,%eax
   11920:	85 d2                	test   %edx,%edx
   11922:	74 0c                	je     11930 <_ZL15stbi__stdio_eofPv+0x20>
}
   11924:	5b                   	pop    %rbx
   11925:	c3                   	ret
   11926:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1192d:	00 00 00 
   return feof((FILE*) user) || ferror((FILE *) user);
   11930:	48 89 df             	mov    %rbx,%rdi
   11933:	e8 c8 51 ff ff       	call   6b00 <ferror@plt>
}
   11938:	5b                   	pop    %rbx
   return feof((FILE*) user) || ferror((FILE *) user);
   11939:	85 c0                	test   %eax,%eax
   1193b:	0f 95 c0             	setne  %al
   1193e:	0f b6 c0             	movzbl %al,%eax
}
   11941:	c3                   	ret
   11942:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   11949:	00 00 00 00 
   1194d:	0f 1f 00             	nopl   (%rax)

0000000000011950 <_ZL16stbi__stdio_skipPvi>:
{
   11950:	53                   	push   %rbx
   fseek((FILE*) user, n, SEEK_CUR);
   11951:	48 63 f6             	movslq %esi,%rsi
{
   11954:	48 89 fb             	mov    %rdi,%rbx
   fseek((FILE*) user, n, SEEK_CUR);
   11957:	ba 01 00 00 00       	mov    $0x1,%edx
   1195c:	e8 af 4c ff ff       	call   6610 <fseek@plt>
   ch = fgetc((FILE*) user);  /* have to read a byte to reset feof()'s flag */
   11961:	48 89 df             	mov    %rbx,%rdi
   11964:	e8 a7 4f ff ff       	call   6910 <fgetc@plt>
   if (ch != EOF) {
   11969:	83 f8 ff             	cmp    $0xffffffff,%eax
   1196c:	75 02                	jne    11970 <_ZL16stbi__stdio_skipPvi+0x20>
}
   1196e:	5b                   	pop    %rbx
   1196f:	c3                   	ret
      ungetc(ch, (FILE *) user);  /* push byte back onto stream if valid. */
   11970:	48 89 de             	mov    %rbx,%rsi
   11973:	89 c7                	mov    %eax,%edi
}
   11975:	5b                   	pop    %rbx
      ungetc(ch, (FILE *) user);  /* push byte back onto stream if valid. */
   11976:	e9 05 47 ff ff       	jmp    6080 <ungetc@plt>
   1197b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000011980 <_ZL16stbi__stdio_readPvPci>:
{
   11980:	48 83 ec 08          	sub    $0x8,%rsp
   11984:	48 89 f9             	mov    %rdi,%rcx
   return (int) fread(data,1,size,(FILE*) user);
   11987:	48 63 d2             	movslq %edx,%rdx
{
   1198a:	48 89 f7             	mov    %rsi,%rdi
   return (int) fread(data,1,size,(FILE*) user);
   1198d:	be 01 00 00 00       	mov    $0x1,%esi
   11992:	e8 e9 4e ff ff       	call   6880 <fread@plt>
}
   11997:	48 83 c4 08          	add    $0x8,%rsp
   1199b:	c3                   	ret
   1199c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000119a0 <_ZL19stbi__build_huffmanP13stbi__huffmanPi>:
{
   119a0:	53                   	push   %rbx
   119a1:	49 89 f8             	mov    %rdi,%r8
   119a4:	41 ba 01 00 00 00    	mov    $0x1,%r10d
   int i,j,k=0;
   119aa:	31 c9                	xor    %ecx,%ecx
   119ac:	0f 1f 40 00          	nopl   0x0(%rax)
      for (j=0; j < count[i]; ++j)
   119b0:	8b 16                	mov    (%rsi),%edx
   119b2:	8d 41 01             	lea    0x1(%rcx),%eax
   119b5:	44 89 d7             	mov    %r10d,%edi
   119b8:	48 98                	cltq
   119ba:	85 d2                	test   %edx,%edx
   119bc:	7e 1f                	jle    119dd <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x3d>
   119be:	66 90                	xchg   %ax,%ax
         h->size[k++] = (stbi_uc) (i+1);
   119c0:	41 88 bc 00 ff 04 00 	mov    %dil,0x4ff(%r8,%rax,1)
   119c7:	00 
      for (j=0; j < count[i]; ++j)
   119c8:	49 89 c1             	mov    %rax,%r9
   119cb:	48 83 c0 01          	add    $0x1,%rax
   119cf:	89 c2                	mov    %eax,%edx
   119d1:	29 ca                	sub    %ecx,%edx
   119d3:	83 ea 01             	sub    $0x1,%edx
   119d6:	39 16                	cmp    %edx,(%rsi)
   119d8:	7f e6                	jg     119c0 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x20>
         h->size[k++] = (stbi_uc) (i+1);
   119da:	49 63 c9             	movslq %r9d,%rcx
   for (i=0; i < 16; ++i)
   119dd:	49 83 c2 01          	add    $0x1,%r10
   119e1:	48 83 c6 04          	add    $0x4,%rsi
   119e5:	49 83 fa 11          	cmp    $0x11,%r10
   119e9:	75 c5                	jne    119b0 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x10>
   h->size[k] = 0;
   119eb:	ba 01 00 00 00       	mov    $0x1,%edx
   code = 0;
   119f0:	31 c0                	xor    %eax,%eax
   k = 0;
   119f2:	31 f6                	xor    %esi,%esi
      h->maxcode[j] = code << (16-j);
   119f4:	41 bb 10 00 00 00    	mov    $0x10,%r11d
   h->size[k] = 0;
   119fa:	41 c6 84 08 00 05 00 	movb   $0x0,0x500(%r8,%rcx,1)
   11a01:	00 00 
   for(j=1; j <= 16; ++j) {
   11a03:	eb 21                	jmp    11a26 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x86>
   11a05:	0f 1f 00             	nopl   (%rax)
      h->maxcode[j] = code << (16-j);
   11a08:	44 89 d9             	mov    %r11d,%ecx
   11a0b:	89 c3                	mov    %eax,%ebx
      code <<= 1;
   11a0d:	01 c0                	add    %eax,%eax
      h->maxcode[j] = code << (16-j);
   11a0f:	44 29 d1             	sub    %r10d,%ecx
   11a12:	d3 e3                	shl    %cl,%ebx
   11a14:	41 89 9c 90 04 06 00 	mov    %ebx,0x604(%r8,%rdx,4)
   11a1b:	00 
   for(j=1; j <= 16; ++j) {
   11a1c:	48 83 c2 01          	add    $0x1,%rdx
   11a20:	48 83 fa 11          	cmp    $0x11,%rdx
   11a24:	74 6c                	je     11a92 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0xf2>
      h->delta[j] = k - code;
   11a26:	89 f1                	mov    %esi,%ecx
   11a28:	41 89 d2             	mov    %edx,%r10d
   11a2b:	41 89 d1             	mov    %edx,%r9d
   11a2e:	29 c1                	sub    %eax,%ecx
   11a30:	41 89 8c 90 4c 06 00 	mov    %ecx,0x64c(%r8,%rdx,4)
   11a37:	00 
      if (h->size[k] == j) {
   11a38:	48 63 ce             	movslq %esi,%rcx
   11a3b:	41 0f b6 8c 08 00 05 	movzbl 0x500(%r8,%rcx,1),%ecx
   11a42:	00 00 
   11a44:	39 ca                	cmp    %ecx,%edx
   11a46:	75 c0                	jne    11a08 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x68>
   11a48:	8d 4e 01             	lea    0x1(%rsi),%ecx
   11a4b:	48 63 c9             	movslq %ecx,%rcx
   11a4e:	66 90                	xchg   %ax,%ax
            h->code[k++] = (stbi__uint16) (code++);
   11a50:	89 c3                	mov    %eax,%ebx
   11a52:	83 c0 01             	add    $0x1,%eax
   11a55:	8d 70 ff             	lea    -0x1(%rax),%esi
   11a58:	66 41 89 b4 48 fe 01 	mov    %si,0x1fe(%r8,%rcx,2)
   11a5f:	00 00 
         while (h->size[k] == j)
   11a61:	48 89 ce             	mov    %rcx,%rsi
   11a64:	41 0f b6 bc 08 00 05 	movzbl 0x500(%r8,%rcx,1),%edi
   11a6b:	00 00 
   11a6d:	48 83 c1 01          	add    $0x1,%rcx
   11a71:	41 39 f9             	cmp    %edi,%r9d
   11a74:	74 da                	je     11a50 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0xb0>
         if (code-1 >= (1u << j)) return stbi__err("bad code lengths","Corrupt JPEG");
   11a76:	89 d1                	mov    %edx,%ecx
   11a78:	d3 eb                	shr    %cl,%ebx
   11a7a:	85 db                	test   %ebx,%ebx
   11a7c:	74 8a                	je     11a08 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x68>
   stbi__g_failure_reason = str;
   11a7e:	48 8d 05 93 5f 02 00 	lea    0x25f93(%rip),%rax        # 37a18 <_ZSt19piecewise_construct+0xd1>
   11a85:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   11a8c:	ff ff 
         if (code-1 >= (1u << j)) return stbi__err("bad code lengths","Corrupt JPEG");
   11a8e:	31 c0                	xor    %eax,%eax
}
   11a90:	5b                   	pop    %rbx
   11a91:	c3                   	ret
   memset(h->fast, 255, 1 << FAST_BITS);
   11a92:	49 8d 78 08          	lea    0x8(%r8),%rdi
   11a96:	4c 89 c1             	mov    %r8,%rcx
   11a99:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
   for (i=0; i < k; ++i) {
   11aa0:	31 d2                	xor    %edx,%edx
   memset(h->fast, 255, 1 << FAST_BITS);
   11aa2:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   11aa6:	4c 63 ce             	movslq %esi,%r9
   h->maxcode[j] = 0xffffffff;
   11aa9:	41 c7 80 48 06 00 00 	movl   $0xffffffff,0x648(%r8)
   11ab0:	ff ff ff ff 
         int c = h->code[i] << (FAST_BITS-s);
   11ab4:	bb 09 00 00 00       	mov    $0x9,%ebx
   memset(h->fast, 255, 1 << FAST_BITS);
   11ab9:	48 29 f9             	sub    %rdi,%rcx
   11abc:	49 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%r8)
         int m = 1 << (FAST_BITS-s);
   11ac3:	41 bb 01 00 00 00    	mov    $0x1,%r11d
            h->fast[c+j] = (stbi_uc) i;
   11ac9:	49 ba 01 01 01 01 01 	movabs $0x101010101010101,%r10
   11ad0:	01 01 01 
   memset(h->fast, 255, 1 << FAST_BITS);
   11ad3:	81 c1 00 02 00 00    	add    $0x200,%ecx
   11ad9:	49 c7 80 f8 01 00 00 	movq   $0xffffffffffffffff,0x1f8(%r8)
   11ae0:	ff ff ff ff 
   11ae4:	c1 e9 03             	shr    $0x3,%ecx
   11ae7:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   for (i=0; i < k; ++i) {
   11aea:	85 f6                	test   %esi,%esi
   11aec:	75 13                	jne    11b01 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x161>
   11aee:	e9 85 00 00 00       	jmp    11b78 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x1d8>
   11af3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   11af8:	48 83 c2 01          	add    $0x1,%rdx
   11afc:	49 39 d1             	cmp    %rdx,%r9
   11aff:	74 77                	je     11b78 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x1d8>
      int s = h->size[i];
   11b01:	41 0f b6 84 10 00 05 	movzbl 0x500(%r8,%rdx,1),%eax
   11b08:	00 00 
      if (s <= FAST_BITS) {
   11b0a:	83 f8 09             	cmp    $0x9,%eax
   11b0d:	7f e9                	jg     11af8 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x158>
         int c = h->code[i] << (FAST_BITS-s);
   11b0f:	89 d9                	mov    %ebx,%ecx
         int m = 1 << (FAST_BITS-s);
   11b11:	44 89 de             	mov    %r11d,%esi
         int c = h->code[i] << (FAST_BITS-s);
   11b14:	29 c1                	sub    %eax,%ecx
   11b16:	41 0f b7 84 50 00 02 	movzwl 0x200(%r8,%rdx,2),%eax
   11b1d:	00 00 
         int m = 1 << (FAST_BITS-s);
   11b1f:	d3 e6                	shl    %cl,%esi
         int c = h->code[i] << (FAST_BITS-s);
   11b21:	d3 e0                	shl    %cl,%eax
            h->fast[c+j] = (stbi_uc) i;
   11b23:	48 63 c8             	movslq %eax,%rcx
   11b26:	0f b6 c2             	movzbl %dl,%eax
   11b29:	49 0f af c2          	imul   %r10,%rax
   11b2d:	4c 01 c1             	add    %r8,%rcx
   11b30:	83 fe 08             	cmp    $0x8,%esi
   11b33:	73 1b                	jae    11b50 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x1b0>
   11b35:	40 f6 c6 04          	test   $0x4,%sil
   11b39:	75 44                	jne    11b7f <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x1df>
   11b3b:	85 f6                	test   %esi,%esi
   11b3d:	74 b9                	je     11af8 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x158>
   11b3f:	88 01                	mov    %al,(%rcx)
   11b41:	40 f6 c6 02          	test   $0x2,%sil
   11b45:	74 b1                	je     11af8 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x158>
   11b47:	66 89 44 31 fe       	mov    %ax,-0x2(%rcx,%rsi,1)
   11b4c:	eb aa                	jmp    11af8 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x158>
   11b4e:	66 90                	xchg   %ax,%ax
   11b50:	89 f7                	mov    %esi,%edi
   11b52:	48 89 01             	mov    %rax,(%rcx)
   for (i=0; i < k; ++i) {
   11b55:	48 83 c2 01          	add    $0x1,%rdx
            h->fast[c+j] = (stbi_uc) i;
   11b59:	48 89 44 39 f8       	mov    %rax,-0x8(%rcx,%rdi,1)
   11b5e:	48 8d 79 08          	lea    0x8(%rcx),%rdi
   11b62:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   11b66:	48 29 f9             	sub    %rdi,%rcx
   11b69:	01 ce                	add    %ecx,%esi
   11b6b:	c1 ee 03             	shr    $0x3,%esi
   11b6e:	89 f1                	mov    %esi,%ecx
   11b70:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   for (i=0; i < k; ++i) {
   11b73:	49 39 d1             	cmp    %rdx,%r9
   11b76:	75 89                	jne    11b01 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x161>
   return 1;
   11b78:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11b7d:	5b                   	pop    %rbx
   11b7e:	c3                   	ret
            h->fast[c+j] = (stbi_uc) i;
   11b7f:	89 01                	mov    %eax,(%rcx)
   11b81:	89 44 31 fc          	mov    %eax,-0x4(%rcx,%rsi,1)
   11b85:	e9 6e ff ff ff       	jmp    11af8 <_ZL19stbi__build_huffmanP13stbi__huffmanPi+0x158>
   11b8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000011b90 <_ZL10stbi__getnP13stbi__contextPhi>:
{
   11b90:	41 55                	push   %r13
   11b92:	41 54                	push   %r12
   11b94:	55                   	push   %rbp
   11b95:	48 89 fd             	mov    %rdi,%rbp
   11b98:	48 89 f7             	mov    %rsi,%rdi
   11b9b:	53                   	push   %rbx
   11b9c:	48 63 da             	movslq %edx,%rbx
   11b9f:	48 83 ec 08          	sub    $0x8,%rsp
   if (s->io.read) {
   11ba3:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   11ba8:	48 8b 85 c8 00 00 00 	mov    0xc8(%rbp),%rax
   11baf:	48 8b b5 c0 00 00 00 	mov    0xc0(%rbp),%rsi
   if (s->io.read) {
   11bb6:	74 0b                	je     11bc3 <_ZL10stbi__getnP13stbi__contextPhi+0x33>
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   11bb8:	49 89 c4             	mov    %rax,%r12
   11bbb:	49 29 f4             	sub    %rsi,%r12
      if (blen < n) {
   11bbe:	41 39 dc             	cmp    %ebx,%r12d
   11bc1:	7c 45                	jl     11c08 <_ZL10stbi__getnP13stbi__contextPhi+0x78>
   if (s->img_buffer+n <= s->img_buffer_end) {
   11bc3:	48 8d 0c 1e          	lea    (%rsi,%rbx,1),%rcx
      return 0;
   11bc7:	31 d2                	xor    %edx,%edx
   if (s->img_buffer+n <= s->img_buffer_end) {
   11bc9:	48 39 c8             	cmp    %rcx,%rax
   11bcc:	73 12                	jae    11be0 <_ZL10stbi__getnP13stbi__contextPhi+0x50>
}
   11bce:	48 83 c4 08          	add    $0x8,%rsp
   11bd2:	89 d0                	mov    %edx,%eax
   11bd4:	5b                   	pop    %rbx
   11bd5:	5d                   	pop    %rbp
   11bd6:	41 5c                	pop    %r12
   11bd8:	41 5d                	pop    %r13
   11bda:	c3                   	ret
   11bdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      memcpy(buffer, s->img_buffer, n);
   11be0:	48 89 da             	mov    %rbx,%rdx
   11be3:	e8 28 48 ff ff       	call   6410 <memcpy@plt>
      s->img_buffer += n;
   11be8:	48 01 9d c0 00 00 00 	add    %rbx,0xc0(%rbp)
      return 1;
   11bef:	ba 01 00 00 00       	mov    $0x1,%edx
}
   11bf4:	48 83 c4 08          	add    $0x8,%rsp
   11bf8:	5b                   	pop    %rbx
   11bf9:	89 d0                	mov    %edx,%eax
   11bfb:	5d                   	pop    %rbp
   11bfc:	41 5c                	pop    %r12
   11bfe:	41 5d                	pop    %r13
   11c00:	c3                   	ret
   11c01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
         memcpy(buffer, s->img_buffer, blen);
   11c08:	4d 63 ec             	movslq %r12d,%r13
         count = (s->io.read)(s->io_user_data, (char*) buffer + blen, n - blen);
   11c0b:	44 29 e3             	sub    %r12d,%ebx
         memcpy(buffer, s->img_buffer, blen);
   11c0e:	4c 89 ea             	mov    %r13,%rdx
   11c11:	e8 fa 47 ff ff       	call   6410 <memcpy@plt>
         count = (s->io.read)(s->io_user_data, (char*) buffer + blen, n - blen);
   11c16:	89 da                	mov    %ebx,%edx
   11c18:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   11c1c:	4a 8d 34 28          	lea    (%rax,%r13,1),%rsi
   11c20:	ff 55 10             	call   *0x10(%rbp)
         res = (count == (n-blen));
   11c23:	31 d2                	xor    %edx,%edx
   11c25:	39 c3                	cmp    %eax,%ebx
         s->img_buffer = s->img_buffer_end;
   11c27:	48 8b 85 c8 00 00 00 	mov    0xc8(%rbp),%rax
         res = (count == (n-blen));
   11c2e:	0f 94 c2             	sete   %dl
         s->img_buffer = s->img_buffer_end;
   11c31:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
}
   11c38:	48 83 c4 08          	add    $0x8,%rsp
   11c3c:	89 d0                	mov    %edx,%eax
   11c3e:	5b                   	pop    %rbx
   11c3f:	5d                   	pop    %rbp
   11c40:	41 5c                	pop    %r12
   11c42:	41 5d                	pop    %r13
   11c44:	c3                   	ret
   11c45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   11c4c:	00 00 00 00 

0000000000011c50 <_ZL19stbi__vertical_flipPviii>:
{
   11c50:	41 56                	push   %r14
   size_t bytes_per_row = (size_t)w * bytes_per_pixel;
   11c52:	48 63 c9             	movslq %ecx,%rcx
{
   11c55:	41 55                	push   %r13
   for (row = 0; row < (h>>1); row++) {
   11c57:	41 89 d5             	mov    %edx,%r13d
{
   11c5a:	41 54                	push   %r12
   for (row = 0; row < (h>>1); row++) {
   11c5c:	41 d1 fd             	sar    %r13d
{
   11c5f:	55                   	push   %rbp
   11c60:	53                   	push   %rbx
   size_t bytes_per_row = (size_t)w * bytes_per_pixel;
   11c61:	48 63 de             	movslq %esi,%rbx
   11c64:	48 0f af d9          	imul   %rcx,%rbx
{
   11c68:	48 81 ec 88 07 00 00 	sub    $0x788,%rsp
   for (row = 0; row < (h>>1); row++) {
   11c6f:	45 85 ed             	test   %r13d,%r13d
   11c72:	0f 8e 29 01 00 00    	jle    11da1 <_ZL19stbi__vertical_flipPviii+0x151>
   11c78:	48 85 db             	test   %rbx,%rbx
   11c7b:	0f 84 20 01 00 00    	je     11da1 <_ZL19stbi__vertical_flipPviii+0x151>
   11c81:	4c 63 da             	movslq %edx,%r11
   11c84:	48 89 fd             	mov    %rdi,%rbp
   11c87:	4c 8d 54 24 88       	lea    -0x78(%rsp),%r10
   11c8c:	45 31 e4             	xor    %r12d,%r12d
   11c8f:	49 83 eb 01          	sub    $0x1,%r11
   11c93:	4c 0f af db          	imul   %rbx,%r11
   11c97:	49 01 fb             	add    %rdi,%r11
   11c9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      stbi_uc *row0 = bytes + row*bytes_per_row;
   11ca0:	49 89 e8             	mov    %rbp,%r8
      stbi_uc *row1 = bytes + (h - row - 1)*bytes_per_row;
   11ca3:	4c 89 da             	mov    %r11,%rdx
      size_t bytes_left = bytes_per_row;
   11ca6:	49 89 d9             	mov    %rbx,%r9
   11ca9:	eb 2e                	jmp    11cd9 <_ZL19stbi__vertical_flipPviii+0x89>
   11cab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
         memcpy(row1, temp, bytes_copy);
   11cb0:	a8 04                	test   $0x4,%al
   11cb2:	0f 85 38 01 00 00    	jne    11df0 <_ZL19stbi__vertical_flipPviii+0x1a0>
   11cb8:	85 c0                	test   %eax,%eax
   11cba:	74 0e                	je     11cca <_ZL19stbi__vertical_flipPviii+0x7a>
   11cbc:	41 0f b6 0a          	movzbl (%r10),%ecx
   11cc0:	88 0a                	mov    %cl,(%rdx)
   11cc2:	a8 02                	test   $0x2,%al
   11cc4:	0f 85 56 01 00 00    	jne    11e20 <_ZL19stbi__vertical_flipPviii+0x1d0>
         row0 += bytes_copy;
   11cca:	49 01 c0             	add    %rax,%r8
         row1 += bytes_copy;
   11ccd:	48 01 c2             	add    %rax,%rdx
      while (bytes_left) {
   11cd0:	49 29 c1             	sub    %rax,%r9
   11cd3:	0f 84 b5 00 00 00    	je     11d8e <_ZL19stbi__vertical_flipPviii+0x13e>
         size_t bytes_copy = (bytes_left < sizeof(temp)) ? bytes_left : sizeof(temp);
   11cd9:	b8 00 08 00 00       	mov    $0x800,%eax
         memcpy(temp, row0, bytes_copy);
   11cde:	4c 89 d7             	mov    %r10,%rdi
   11ce1:	4c 89 c6             	mov    %r8,%rsi
         size_t bytes_copy = (bytes_left < sizeof(temp)) ? bytes_left : sizeof(temp);
   11ce4:	49 39 c1             	cmp    %rax,%r9
   11ce7:	49 0f 46 c1          	cmovbe %r9,%rax
         memcpy(temp, row0, bytes_copy);
   11ceb:	83 f8 08             	cmp    $0x8,%eax
   11cee:	72 08                	jb     11cf8 <_ZL19stbi__vertical_flipPviii+0xa8>
   11cf0:	89 c1                	mov    %eax,%ecx
   11cf2:	c1 e9 03             	shr    $0x3,%ecx
   11cf5:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   11cf8:	31 c9                	xor    %ecx,%ecx
   11cfa:	a8 04                	test   $0x4,%al
   11cfc:	74 09                	je     11d07 <_ZL19stbi__vertical_flipPviii+0xb7>
   11cfe:	8b 0e                	mov    (%rsi),%ecx
   11d00:	89 0f                	mov    %ecx,(%rdi)
   11d02:	b9 04 00 00 00       	mov    $0x4,%ecx
   11d07:	a8 02                	test   $0x2,%al
   11d09:	74 0e                	je     11d19 <_ZL19stbi__vertical_flipPviii+0xc9>
   11d0b:	44 0f b7 34 0e       	movzwl (%rsi,%rcx,1),%r14d
   11d10:	66 44 89 34 0f       	mov    %r14w,(%rdi,%rcx,1)
   11d15:	48 83 c1 02          	add    $0x2,%rcx
   11d19:	a8 01                	test   $0x1,%al
   11d1b:	74 08                	je     11d25 <_ZL19stbi__vertical_flipPviii+0xd5>
   11d1d:	0f b6 34 0e          	movzbl (%rsi,%rcx,1),%esi
   11d21:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
         memcpy(row0, row1, bytes_copy);
   11d25:	83 f8 08             	cmp    $0x8,%eax
   11d28:	0f 83 8a 00 00 00    	jae    11db8 <_ZL19stbi__vertical_flipPviii+0x168>
   11d2e:	a8 04                	test   $0x4,%al
   11d30:	0f 85 d2 00 00 00    	jne    11e08 <_ZL19stbi__vertical_flipPviii+0x1b8>
   11d36:	85 c0                	test   %eax,%eax
   11d38:	74 0e                	je     11d48 <_ZL19stbi__vertical_flipPviii+0xf8>
   11d3a:	0f b6 0a             	movzbl (%rdx),%ecx
   11d3d:	41 88 08             	mov    %cl,(%r8)
   11d40:	a8 02                	test   $0x2,%al
   11d42:	0f 85 f0 00 00 00    	jne    11e38 <_ZL19stbi__vertical_flipPviii+0x1e8>
         memcpy(row1, temp, bytes_copy);
   11d48:	83 f8 08             	cmp    $0x8,%eax
   11d4b:	0f 82 5f ff ff ff    	jb     11cb0 <_ZL19stbi__vertical_flipPviii+0x60>
   11d51:	49 8b 0a             	mov    (%r10),%rcx
   11d54:	48 8d 7a 08          	lea    0x8(%rdx),%rdi
         row0 += bytes_copy;
   11d58:	49 01 c0             	add    %rax,%r8
         memcpy(row1, temp, bytes_copy);
   11d5b:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   11d5f:	48 89 0a             	mov    %rcx,(%rdx)
   11d62:	89 c1                	mov    %eax,%ecx
   11d64:	49 8b 74 0a f8       	mov    -0x8(%r10,%rcx,1),%rsi
   11d69:	48 89 74 0a f8       	mov    %rsi,-0x8(%rdx,%rcx,1)
   11d6e:	48 89 d1             	mov    %rdx,%rcx
   11d71:	4c 89 d6             	mov    %r10,%rsi
         row1 += bytes_copy;
   11d74:	48 01 c2             	add    %rax,%rdx
         memcpy(row1, temp, bytes_copy);
   11d77:	48 29 f9             	sub    %rdi,%rcx
   11d7a:	48 29 ce             	sub    %rcx,%rsi
   11d7d:	01 c1                	add    %eax,%ecx
   11d7f:	c1 e9 03             	shr    $0x3,%ecx
   11d82:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      while (bytes_left) {
   11d85:	49 29 c1             	sub    %rax,%r9
   11d88:	0f 85 4b ff ff ff    	jne    11cd9 <_ZL19stbi__vertical_flipPviii+0x89>
   for (row = 0; row < (h>>1); row++) {
   11d8e:	41 83 c4 01          	add    $0x1,%r12d
   11d92:	48 01 dd             	add    %rbx,%rbp
   11d95:	49 29 db             	sub    %rbx,%r11
   11d98:	45 39 ec             	cmp    %r13d,%r12d
   11d9b:	0f 85 ff fe ff ff    	jne    11ca0 <_ZL19stbi__vertical_flipPviii+0x50>
}
   11da1:	48 81 c4 88 07 00 00 	add    $0x788,%rsp
   11da8:	5b                   	pop    %rbx
   11da9:	5d                   	pop    %rbp
   11daa:	41 5c                	pop    %r12
   11dac:	41 5d                	pop    %r13
   11dae:	41 5e                	pop    %r14
   11db0:	c3                   	ret
   11db1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
         memcpy(row0, row1, bytes_copy);
   11db8:	48 8b 0a             	mov    (%rdx),%rcx
   11dbb:	49 8d 78 08          	lea    0x8(%r8),%rdi
   11dbf:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   11dc3:	49 89 08             	mov    %rcx,(%r8)
   11dc6:	89 c1                	mov    %eax,%ecx
   11dc8:	48 8b 74 0a f8       	mov    -0x8(%rdx,%rcx,1),%rsi
   11dcd:	49 89 74 08 f8       	mov    %rsi,-0x8(%r8,%rcx,1)
   11dd2:	4c 89 c1             	mov    %r8,%rcx
   11dd5:	48 89 d6             	mov    %rdx,%rsi
   11dd8:	48 29 f9             	sub    %rdi,%rcx
   11ddb:	48 29 ce             	sub    %rcx,%rsi
   11dde:	01 c1                	add    %eax,%ecx
   11de0:	c1 e9 03             	shr    $0x3,%ecx
   11de3:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   11de6:	e9 5d ff ff ff       	jmp    11d48 <_ZL19stbi__vertical_flipPviii+0xf8>
   11deb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
         memcpy(row1, temp, bytes_copy);
   11df0:	41 8b 0a             	mov    (%r10),%ecx
   11df3:	89 0a                	mov    %ecx,(%rdx)
   11df5:	89 c1                	mov    %eax,%ecx
   11df7:	41 8b 74 0a fc       	mov    -0x4(%r10,%rcx,1),%esi
   11dfc:	89 74 0a fc          	mov    %esi,-0x4(%rdx,%rcx,1)
   11e00:	e9 c5 fe ff ff       	jmp    11cca <_ZL19stbi__vertical_flipPviii+0x7a>
   11e05:	0f 1f 00             	nopl   (%rax)
         memcpy(row0, row1, bytes_copy);
   11e08:	8b 0a                	mov    (%rdx),%ecx
   11e0a:	41 89 08             	mov    %ecx,(%r8)
   11e0d:	89 c1                	mov    %eax,%ecx
   11e0f:	8b 74 0a fc          	mov    -0x4(%rdx,%rcx,1),%esi
   11e13:	41 89 74 08 fc       	mov    %esi,-0x4(%r8,%rcx,1)
   11e18:	e9 2b ff ff ff       	jmp    11d48 <_ZL19stbi__vertical_flipPviii+0xf8>
   11e1d:	0f 1f 00             	nopl   (%rax)
         memcpy(row1, temp, bytes_copy);
   11e20:	89 c1                	mov    %eax,%ecx
   11e22:	41 0f b7 74 0a fe    	movzwl -0x2(%r10,%rcx,1),%esi
   11e28:	66 89 74 0a fe       	mov    %si,-0x2(%rdx,%rcx,1)
   11e2d:	e9 98 fe ff ff       	jmp    11cca <_ZL19stbi__vertical_flipPviii+0x7a>
   11e32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         memcpy(row0, row1, bytes_copy);
   11e38:	89 c1                	mov    %eax,%ecx
   11e3a:	0f b7 74 0a fe       	movzwl -0x2(%rdx,%rcx,1),%esi
   11e3f:	66 41 89 74 08 fe    	mov    %si,-0x2(%r8,%rcx,1)
   11e45:	e9 fe fe ff ff       	jmp    11d48 <_ZL19stbi__vertical_flipPviii+0xf8>
   11e4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000011e50 <_ZL28stbi__resample_row_hv_2_simdPhS_S_ii>:
      out[0] = out[1] = stbi__div4(3*in_near[0] + in_far[0] + 2);
   11e50:	0f b6 06             	movzbl (%rsi),%eax
{
   11e53:	41 89 ca             	mov    %ecx,%r10d
   11e56:	49 89 f8             	mov    %rdi,%r8
   11e59:	48 89 d7             	mov    %rdx,%rdi
      out[0] = out[1] = stbi__div4(3*in_near[0] + in_far[0] + 2);
   11e5c:	8d 0c 40             	lea    (%rax,%rax,2),%ecx
   11e5f:	0f b6 02             	movzbl (%rdx),%eax
   11e62:	01 c1                	add    %eax,%ecx
   if (w == 1) {
   11e64:	41 83 fa 01          	cmp    $0x1,%r10d
   11e68:	0f 84 7a 01 00 00    	je     11fe8 <_ZL28stbi__resample_row_hv_2_simdPhS_S_ii+0x198>
   for (; i < ((w-1) & ~7); i += 8) {
   11e6e:	45 8d 4a ff          	lea    -0x1(%r10),%r9d
   11e72:	41 83 e1 f8          	and    $0xfffffff8,%r9d
   11e76:	0f 8e 84 01 00 00    	jle    12000 <_ZL28stbi__resample_row_hv_2_simdPhS_S_ii+0x1b0>
   11e7c:	66 0f 6f 2d ac 69 02 	movdqa 0x269ac(%rip),%xmm5        # 38830 <_ZL11stbi__bmask+0xb0>
   11e83:	00 
   11e84:	31 c0                	xor    %eax,%eax
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_unpacklo_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   11e86:	66 0f ef e4          	pxor   %xmm4,%xmm4
   11e8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  return __extension__ (__m128i)(__v2di){ __q0, __q1 };
   11e90:	f3 0f 7e 14 06       	movq   (%rsi,%rax,1),%xmm2
   11e95:	f3 0f 7e 04 07       	movq   (%rdi,%rax,1),%xmm0
      __m128i next = _mm_insert_epi16(nxt0, 3*in_near[i+8] + in_far[i+8], 7);
   11e9a:	0f b6 54 06 08       	movzbl 0x8(%rsi,%rax,1),%edx
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   11e9f:	66 0f 60 d4          	punpcklbw %xmm4,%xmm2
   11ea3:	66 0f 60 c4          	punpcklbw %xmm4,%xmm0
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_epi16 (__m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_psllwi128 ((__v8hi)__A, __B);
   11ea7:	66 0f 6f f2          	movdqa %xmm2,%xmm6
   11eab:	8d 14 52             	lea    (%rdx,%rdx,2),%edx
   11eae:	66 0f 71 f6 02       	psllw  $0x2,%xmm6
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   11eb3:	66 0f fd f0          	paddw  %xmm0,%xmm6
   11eb7:	66 0f 6f de          	movdqa %xmm6,%xmm3
   11ebb:	66 0f f9 da          	psubw  %xmm2,%xmm3
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_slli_si128 (__m128i __A, const int __N)
{
  return (__m128i)__builtin_ia32_pslldqi128 (__A, __N * 8);
   11ebf:	66 0f f9 d6          	psubw  %xmm6,%xmm2
   11ec3:	66 0f 6f c3          	movdqa %xmm3,%xmm0
  return (__m128i)__builtin_ia32_psrldqi128 (__A, __N * 8);
   11ec7:	66 0f 6f cb          	movdqa %xmm3,%xmm1
  return (__m128i)__builtin_ia32_pslldqi128 (__A, __N * 8);
   11ecb:	66 0f 73 f8 02       	pslldq $0x2,%xmm0
  return (__m128i)__builtin_ia32_psllwi128 ((__v8hi)__A, __B);
   11ed0:	66 0f 71 f3 02       	psllw  $0x2,%xmm3
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_insert_epi16 (__m128i const __A, int const __D, int const __N)
{
  return (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)__A, __D, __N);
   11ed5:	66 0f c4 c1 00       	pinsrw $0x0,%ecx,%xmm0
   11eda:	0f b6 4c 07 08       	movzbl 0x8(%rdi,%rax,1),%ecx
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   11edf:	66 0f fd dd          	paddw  %xmm5,%xmm3
  return (__m128i)__builtin_ia32_psrldqi128 (__A, __N * 8);
   11ee3:	66 0f 73 d9 02       	psrldq $0x2,%xmm1
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   11ee8:	66 0f fd c3          	paddw  %xmm3,%xmm0
   11eec:	01 ca                	add    %ecx,%edx
   11eee:	66 0f fd c2          	paddw  %xmm2,%xmm0
  return (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)__A, __D, __N);
   11ef2:	66 0f c4 ca 07       	pinsrw $0x7,%edx,%xmm1
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   11ef7:	66 0f fd cb          	paddw  %xmm3,%xmm1
   11efb:	66 0f fd ca          	paddw  %xmm2,%xmm1
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   11eff:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   11f03:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   11f07:	66 0f 69 c1          	punpckhwd %xmm1,%xmm0
  return (__m128i)__builtin_ia32_psrlwi128 ((__v8hi)__A, __B);
   11f0b:	66 0f 71 d2 04       	psrlw  $0x4,%xmm2
   11f10:	66 0f 71 d0 04       	psrlw  $0x4,%xmm0
   11f15:	66 0f 6f ca          	movdqa %xmm2,%xmm1
  return (__m128i)__builtin_ia32_packuswb128 ((__v8hi)__A, (__v8hi)__B);
   11f19:	66 0f 67 c8          	packuswb %xmm0,%xmm1
  *__P = __B;
   11f1d:	41 0f 11 0c 40       	movups %xmm1,(%r8,%rax,2)
      t1 = 3*in_near[i+7] + in_far[i+7];
   11f22:	0f b6 54 06 07       	movzbl 0x7(%rsi,%rax,1),%edx
   11f27:	8d 0c 52             	lea    (%rdx,%rdx,2),%ecx
   11f2a:	0f b6 54 07 07       	movzbl 0x7(%rdi,%rax,1),%edx
   for (; i < ((w-1) & ~7); i += 8) {
   11f2f:	48 83 c0 08          	add    $0x8,%rax
      t1 = 3*in_near[i+7] + in_far[i+7];
   11f33:	01 d1                	add    %edx,%ecx
   for (; i < ((w-1) & ~7); i += 8) {
   11f35:	41 39 c1             	cmp    %eax,%r9d
   11f38:	0f 8f 52 ff ff ff    	jg     11e90 <_ZL28stbi__resample_row_hv_2_simdPhS_S_ii+0x40>
   11f3e:	41 83 e9 01          	sub    $0x1,%r9d
   11f42:	41 c1 e9 03          	shr    $0x3,%r9d
   11f46:	41 83 c1 01          	add    $0x1,%r9d
   11f4a:	42 8d 14 cd 00 00 00 	lea    0x0(,%r9,8),%edx
   11f51:	00 
   out[i*2] = stbi__div16(3*t1 + t0 + 8);
   11f52:	41 c1 e1 04          	shl    $0x4,%r9d
   t1 = 3*in_near[i] + in_far[i];
   11f56:	4c 63 da             	movslq %edx,%r11
   out[i*2] = stbi__div16(3*t1 + t0 + 8);
   11f59:	4d 63 c9             	movslq %r9d,%r9
   for (++i; i < w; ++i) {
   11f5c:	83 c2 01             	add    $0x1,%edx
   t1 = 3*in_near[i] + in_far[i];
   11f5f:	42 0f b6 04 1e       	movzbl (%rsi,%r11,1),%eax
   11f64:	46 0f b6 1c 1f       	movzbl (%rdi,%r11,1),%r11d
   out[i*2] = stbi__div16(3*t1 + t0 + 8);
   11f69:	4d 01 c1             	add    %r8,%r9
   t1 = 3*in_near[i] + in_far[i];
   11f6c:	8d 04 40             	lea    (%rax,%rax,2),%eax
   11f6f:	44 01 d8             	add    %r11d,%eax
   out[i*2] = stbi__div16(3*t1 + t0 + 8);
   11f72:	44 8d 1c 40          	lea    (%rax,%rax,2),%r11d
   11f76:	42 8d 4c 19 08       	lea    0x8(%rcx,%r11,1),%ecx
   11f7b:	c1 f9 04             	sar    $0x4,%ecx
   11f7e:	41 88 09             	mov    %cl,(%r9)
   for (++i; i < w; ++i) {
   11f81:	41 39 d2             	cmp    %edx,%r10d
   11f84:	7e 46                	jle    11fcc <_ZL28stbi__resample_row_hv_2_simdPhS_S_ii+0x17c>
   11f86:	48 63 d2             	movslq %edx,%rdx
   11f89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      t1 = 3*in_near[i]+in_far[i];
   11f90:	89 c1                	mov    %eax,%ecx
   11f92:	0f b6 04 16          	movzbl (%rsi,%rdx,1),%eax
   11f96:	44 0f b6 0c 17       	movzbl (%rdi,%rdx,1),%r9d
   11f9b:	8d 04 40             	lea    (%rax,%rax,2),%eax
   11f9e:	44 01 c8             	add    %r9d,%eax
      out[i*2-1] = stbi__div16(3*t0 + t1 + 8);
   11fa1:	44 8d 0c 49          	lea    (%rcx,%rcx,2),%r9d
   11fa5:	46 8d 4c 08 08       	lea    0x8(%rax,%r9,1),%r9d
   11faa:	41 c1 f9 04          	sar    $0x4,%r9d
   11fae:	45 88 4c 50 ff       	mov    %r9b,-0x1(%r8,%rdx,2)
      out[i*2  ] = stbi__div16(3*t1 + t0 + 8);
   11fb3:	44 8d 0c 40          	lea    (%rax,%rax,2),%r9d
   11fb7:	42 8d 4c 09 08       	lea    0x8(%rcx,%r9,1),%ecx
   11fbc:	c1 f9 04             	sar    $0x4,%ecx
   11fbf:	41 88 0c 50          	mov    %cl,(%r8,%rdx,2)
   for (++i; i < w; ++i) {
   11fc3:	48 83 c2 01          	add    $0x1,%rdx
   11fc7:	41 39 d2             	cmp    %edx,%r10d
   11fca:	7f c4                	jg     11f90 <_ZL28stbi__resample_row_hv_2_simdPhS_S_ii+0x140>
   out[w*2-1] = stbi__div4(t1+2);
   11fcc:	45 01 d2             	add    %r10d,%r10d
   11fcf:	83 c0 02             	add    $0x2,%eax
   11fd2:	c1 f8 02             	sar    $0x2,%eax
   11fd5:	4d 63 d2             	movslq %r10d,%r10
   11fd8:	43 88 44 10 ff       	mov    %al,-0x1(%r8,%r10,1)
}
   11fdd:	4c 89 c0             	mov    %r8,%rax
   11fe0:	c3                   	ret
   11fe1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      out[0] = out[1] = stbi__div4(3*in_near[0] + in_far[0] + 2);
   11fe8:	83 c1 02             	add    $0x2,%ecx
   11feb:	c1 f9 02             	sar    $0x2,%ecx
   11fee:	0f b6 c1             	movzbl %cl,%eax
   11ff1:	88 cc                	mov    %cl,%ah
   11ff3:	66 41 89 00          	mov    %ax,(%r8)
}
   11ff7:	4c 89 c0             	mov    %r8,%rax
   11ffa:	c3                   	ret
   11ffb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   for (; i < ((w-1) & ~7); i += 8) {
   12000:	4d 89 c1             	mov    %r8,%r9
   12003:	89 c8                	mov    %ecx,%eax
   12005:	ba 01 00 00 00       	mov    $0x1,%edx
   1200a:	e9 63 ff ff ff       	jmp    11f72 <_ZL28stbi__resample_row_hv_2_simdPhS_S_ii+0x122>
   1200f:	90                   	nop

0000000000012010 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii>:
{
   12010:	41 55                	push   %r13
   12012:	49 89 d2             	mov    %rdx,%r10
   12015:	49 89 cb             	mov    %rcx,%r11
   12018:	41 54                	push   %r12
   1201a:	55                   	push   %rbp
   1201b:	53                   	push   %rbx
   if (step == 4) {
   1201c:	41 83 f9 04          	cmp    $0x4,%r9d
   12020:	0f 84 ca 00 00 00    	je     120f0 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii+0xe0>
   int i = 0;
   12026:	31 c0                	xor    %eax,%eax
      out += step;
   12028:	4d 63 c9             	movslq %r9d,%r9
   1202b:	48 63 c8             	movslq %eax,%rcx
   for (; i < count; ++i) {
   1202e:	41 39 c0             	cmp    %eax,%r8d
   12031:	0f 8e aa 00 00 00    	jle    120e1 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii+0xd1>
   12037:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1203e:	00 00 
      int cr = pcr[i] - 128;
   12040:	45 0f b6 24 0b       	movzbl (%r11,%rcx,1),%r12d
      int cb = pcb[i] - 128;
   12045:	41 0f b6 14 0a       	movzbl (%r10,%rcx,1),%edx
      int y_fixed = (y[i] << 20) + (1<<19); // rounding
   1204a:	44 0f b6 2c 0e       	movzbl (%rsi,%rcx,1),%r13d
      int cb = pcb[i] - 128;
   1204f:	83 c2 80             	add    $0xffffff80,%edx
      int cr = pcr[i] - 128;
   12052:	41 83 c4 80          	add    $0xffffff80,%r12d
      r = y_fixed + cr* stbi__float2fixed(1.40200f);
   12056:	41 69 ec 00 6f 16 00 	imul   $0x166f00,%r12d,%ebp
      int y_fixed = (y[i] << 20) + (1<<19); // rounding
   1205d:	41 c1 e5 14          	shl    $0x14,%r13d
      g = y_fixed + cr*-stbi__float2fixed(0.71414f) + ((cb*-stbi__float2fixed(0.34414f)) & 0xffff0000);
   12061:	69 da 00 7e fa ff    	imul   $0xfffa7e00,%edx,%ebx
      int y_fixed = (y[i] << 20) + (1<<19); // rounding
   12067:	41 81 c5 00 00 08 00 	add    $0x80000,%r13d
      g = y_fixed + cr*-stbi__float2fixed(0.71414f) + ((cb*-stbi__float2fixed(0.34414f)) & 0xffff0000);
   1206e:	45 69 e4 00 93 f4 ff 	imul   $0xfff49300,%r12d,%r12d
      b = y_fixed                                   +   cb* stbi__float2fixed(1.77200f);
   12075:	69 c2 00 5a 1c 00    	imul   $0x1c5a00,%edx,%eax
      r = y_fixed + cr* stbi__float2fixed(1.40200f);
   1207b:	44 01 ed             	add    %r13d,%ebp
      g = y_fixed + cr*-stbi__float2fixed(0.71414f) + ((cb*-stbi__float2fixed(0.34414f)) & 0xffff0000);
   1207e:	66 31 db             	xor    %bx,%bx
   12081:	45 01 ec             	add    %r13d,%r12d
   12084:	44 01 e3             	add    %r12d,%ebx
      r >>= 20;
   12087:	41 89 ec             	mov    %ebp,%r12d
      b = y_fixed                                   +   cb* stbi__float2fixed(1.77200f);
   1208a:	44 01 e8             	add    %r13d,%eax
      g >>= 20;
   1208d:	c1 fb 14             	sar    $0x14,%ebx
      r >>= 20;
   12090:	41 c1 fc 14          	sar    $0x14,%r12d
      g >>= 20;
   12094:	89 da                	mov    %ebx,%edx
      b >>= 20;
   12096:	c1 f8 14             	sar    $0x14,%eax
      out[0] = (stbi_uc)r;
   12099:	44 89 e3             	mov    %r12d,%ebx
      if ((unsigned) r > 255) { if (r < 0) r = 0; else r = 255; }
   1209c:	81 fd ff ff ff 0f    	cmp    $0xfffffff,%ebp
   120a2:	76 08                	jbe    120ac <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii+0x9c>
   120a4:	44 89 e3             	mov    %r12d,%ebx
   120a7:	f7 d3                	not    %ebx
   120a9:	c1 fb 1f             	sar    $0x1f,%ebx
      if ((unsigned) g > 255) { if (g < 0) g = 0; else g = 255; }
   120ac:	81 fa ff 00 00 00    	cmp    $0xff,%edx
   120b2:	76 05                	jbe    120b9 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii+0xa9>
   120b4:	f7 d2                	not    %edx
   120b6:	c1 fa 1f             	sar    $0x1f,%edx
      if ((unsigned) b > 255) { if (b < 0) b = 0; else b = 255; }
   120b9:	3d ff 00 00 00       	cmp    $0xff,%eax
   120be:	76 05                	jbe    120c5 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii+0xb5>
   120c0:	f7 d0                	not    %eax
   120c2:	c1 f8 1f             	sar    $0x1f,%eax
   for (; i < count; ++i) {
   120c5:	48 83 c1 01          	add    $0x1,%rcx
      out[0] = (stbi_uc)r;
   120c9:	88 1f                	mov    %bl,(%rdi)
      out[1] = (stbi_uc)g;
   120cb:	88 57 01             	mov    %dl,0x1(%rdi)
      out[2] = (stbi_uc)b;
   120ce:	88 47 02             	mov    %al,0x2(%rdi)
      out[3] = 255;
   120d1:	c6 47 03 ff          	movb   $0xff,0x3(%rdi)
      out += step;
   120d5:	4c 01 cf             	add    %r9,%rdi
   for (; i < count; ++i) {
   120d8:	41 39 c8             	cmp    %ecx,%r8d
   120db:	0f 8f 5f ff ff ff    	jg     12040 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii+0x30>
}
   120e1:	5b                   	pop    %rbx
   120e2:	5d                   	pop    %rbp
   120e3:	41 5c                	pop    %r12
   120e5:	41 5d                	pop    %r13
   120e7:	c3                   	ret
   120e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   120ef:	00 
      for (; i+7 < count; i += 8) {
   120f0:	41 83 f8 07          	cmp    $0x7,%r8d
   120f4:	0f 8e 2c ff ff ff    	jle    12026 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii+0x16>
   120fa:	41 8d 40 f8          	lea    -0x8(%r8),%eax
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   120fe:	66 0f ef d2          	pxor   %xmm2,%xmm2
   12102:	66 44 0f 6f 0d 35 67 	movdqa 0x26735(%rip),%xmm9        # 38840 <_ZL11stbi__bmask+0xc0>
   12109:	02 00 
   1210b:	66 0f 6f 1d 2d 67 02 	movdqa 0x2672d(%rip),%xmm3        # 38840 <_ZL11stbi__bmask+0xc0>
   12112:	00 
   12113:	c1 e8 03             	shr    $0x3,%eax
   12116:	66 0f 6f 3d 42 67 02 	movdqa 0x26742(%rip),%xmm7        # 38860 <_ZL11stbi__bmask+0xe0>
   1211d:	00 
   1211e:	66 44 0f 6f 05 29 67 	movdqa 0x26729(%rip),%xmm8        # 38850 <_ZL11stbi__bmask+0xd0>
   12125:	02 00 
   12127:	8d 58 01             	lea    0x1(%rax),%ebx
   1212a:	66 0f 6f 35 3e 67 02 	movdqa 0x2673e(%rip),%xmm6        # 38870 <_ZL11stbi__bmask+0xf0>
   12131:	00 
   12132:	31 c0                	xor    %eax,%eax
   12134:	66 0f 6f 2d 44 67 02 	movdqa 0x26744(%rip),%xmm5        # 38880 <_ZL11stbi__bmask+0x100>
   1213b:	00 
   1213c:	66 0f 6f 25 cc 66 02 	movdqa 0x266cc(%rip),%xmm4        # 38810 <_ZL11stbi__bmask+0x90>
   12143:	00 
   12144:	48 89 da             	mov    %rbx,%rdx
   12147:	48 8d 0c dd 00 00 00 	lea    0x0(,%rbx,8),%rcx
   1214e:	00 
   1214f:	90                   	nop
  return __extension__ (__m128i)(__v2di){ __q0, __q1 };
   12150:	f3 0f 7e 04 06       	movq   (%rsi,%rax,1),%xmm0
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   12155:	66 45 0f 6f d9       	movdqa %xmm9,%xmm11
   1215a:	66 44 0f 6f e2       	movdqa %xmm2,%xmm12
   1215f:	66 44 0f 6f d2       	movdqa %xmm2,%xmm10
  return (__m128i)__builtin_ia32_pmulhw128 ((__v8hi)__A, (__v8hi)__B);
   12164:	66 41 0f 6f c8       	movdqa %xmm8,%xmm1
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   12169:	66 44 0f 60 d8       	punpcklbw %xmm0,%xmm11
  return __extension__ (__m128i)(__v2di){ __q0, __q1 };
   1216e:	f3 41 0f 7e 04 03    	movq   (%r11,%rax,1),%xmm0
  return (__m128i)__builtin_ia32_psrlwi128 ((__v8hi)__A, __B);
   12174:	66 41 0f 71 d3 04    	psrlw  $0x4,%xmm11
  return (__m128i) ((__v2du)__A ^ (__v2du)__B);
   1217a:	66 0f ef c3          	pxor   %xmm3,%xmm0
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   1217e:	66 44 0f 60 e0       	punpcklbw %xmm0,%xmm12
  return __extension__ (__m128i)(__v2di){ __q0, __q1 };
   12183:	f3 41 0f 7e 04 02    	movq   (%r10,%rax,1),%xmm0
  return (__m128i)__builtin_ia32_pmulhw128 ((__v8hi)__A, (__v8hi)__B);
   12189:	66 41 0f e5 cc       	pmulhw %xmm12,%xmm1
   1218e:	66 44 0f e5 e5       	pmulhw %xmm5,%xmm12
  return (__m128i) ((__v2du)__A ^ (__v2du)__B);
   12193:	66 0f ef c3          	pxor   %xmm3,%xmm0
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   12197:	66 44 0f 60 d0       	punpcklbw %xmm0,%xmm10
  return (__m128i)__builtin_ia32_pmulhw128 ((__v8hi)__A, (__v8hi)__B);
   1219c:	66 0f 6f c7          	movdqa %xmm7,%xmm0
   121a0:	66 41 0f e5 c2       	pmulhw %xmm10,%xmm0
   121a5:	66 44 0f e5 d6       	pmulhw %xmm6,%xmm10
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   121aa:	66 41 0f fd cb       	paddw  %xmm11,%xmm1
  return (__m128i)__builtin_ia32_psrawi128 ((__v8hi)__A, __B);
   121af:	66 0f 71 e1 04       	psraw  $0x4,%xmm1
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   121b4:	66 45 0f fd d3       	paddw  %xmm11,%xmm10
   121b9:	66 41 0f fd c3       	paddw  %xmm11,%xmm0
  return (__m128i)__builtin_ia32_psrawi128 ((__v8hi)__A, __B);
   121be:	66 41 0f 71 e2 04    	psraw  $0x4,%xmm10
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   121c4:	66 41 0f fd c4       	paddw  %xmm12,%xmm0
  return (__m128i)__builtin_ia32_packuswb128 ((__v8hi)__A, (__v8hi)__B);
   121c9:	66 41 0f 67 ca       	packuswb %xmm10,%xmm1
  return (__m128i)__builtin_ia32_psrawi128 ((__v8hi)__A, __B);
   121ce:	66 0f 71 e0 04       	psraw  $0x4,%xmm0
  return (__m128i)__builtin_ia32_packuswb128 ((__v8hi)__A, (__v8hi)__B);
   121d3:	66 0f 67 c4          	packuswb %xmm4,%xmm0
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   121d7:	66 44 0f 6f d1       	movdqa %xmm1,%xmm10
   121dc:	66 44 0f 60 d0       	punpcklbw %xmm0,%xmm10
  return (__m128i)__builtin_ia32_punpckhbw128 ((__v16qi)__A, (__v16qi)__B);
   121e1:	66 0f 68 c8          	punpckhbw %xmm0,%xmm1
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   121e5:	66 41 0f 6f c2       	movdqa %xmm10,%xmm0
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   121ea:	66 44 0f 69 d1       	punpckhwd %xmm1,%xmm10
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   121ef:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
  *__P = __B;
   121f3:	44 0f 11 54 87 10    	movups %xmm10,0x10(%rdi,%rax,4)
   121f9:	0f 11 04 87          	movups %xmm0,(%rdi,%rax,4)
   121fd:	48 83 c0 08          	add    $0x8,%rax
   12201:	48 39 c1             	cmp    %rax,%rcx
   12204:	0f 85 46 ff ff ff    	jne    12150 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii+0x140>
         out += 32;
   1220a:	48 c1 e3 05          	shl    $0x5,%rbx
      for (; i+7 < count; i += 8) {
   1220e:	8d 04 d5 00 00 00 00 	lea    0x0(,%rdx,8),%eax
         out += 32;
   12215:	48 01 df             	add    %rbx,%rdi
   12218:	e9 0b fe ff ff       	jmp    12028 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii+0x18>
   1221d:	0f 1f 00             	nopl   (%rax)

0000000000012220 <_ZL15stbi__idct_simdPhiPs>:
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12220:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   12225:	66 0f 6f 1a          	movdqa (%rdx),%xmm3
      _mm_storel_epi64((__m128i *) out, p0); out += out_stride;
   12229:	48 63 f6             	movslq %esi,%rsi
  return *__P;
   1222c:	66 44 0f 6f 6a 50    	movdqa 0x50(%rdx),%xmm13
   12232:	66 44 0f 6f 42 70    	movdqa 0x70(%rdx),%xmm8
   12238:	48 8d 04 37          	lea    (%rdi,%rsi,1),%rax
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1223c:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   12240:	66 0f 61 4a 60       	punpcklwd 0x60(%rdx),%xmm1
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12245:	66 0f 69 42 60       	punpckhwd 0x60(%rdx),%xmm0
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   1224a:	66 0f 6f d3          	movdqa %xmm3,%xmm2
  return *__P;
   1224e:	66 0f 6f 7a 10       	movdqa 0x10(%rdx),%xmm7
   12253:	66 44 0f 6f 4a 30    	movdqa 0x30(%rdx),%xmm9
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12259:	66 45 0f 6f d0       	movdqa %xmm8,%xmm10
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   1225e:	66 44 0f 6f f9       	movdqa %xmm1,%xmm15
   12263:	66 0f 6f f1          	movdqa %xmm1,%xmm6
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   12267:	66 0f 6f 4a 40       	movdqa 0x40(%rdx),%xmm1
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   1226c:	66 0f 6f e8          	movdqa %xmm0,%xmm5
   12270:	66 44 0f f5 3d 17 66 	pmaddwd 0x26617(%rip),%xmm15        # 38890 <_ZL11stbi__bmask+0x110>
   12277:	02 00 
   12279:	66 0f f5 35 1f 66 02 	pmaddwd 0x2661f(%rip),%xmm6        # 388a0 <_ZL11stbi__bmask+0x120>
   12280:	00 
   12281:	66 0f 6f e0          	movdqa %xmm0,%xmm4
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12285:	66 0f ef c0          	pxor   %xmm0,%xmm0
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   12289:	66 0f fd d1          	paddw  %xmm1,%xmm2
  return (__m128i) ((__v8hu)__A - (__v8hu)__B);
   1228d:	66 0f f9 d9          	psubw  %xmm1,%xmm3
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12291:	44 0f 29 7c 24 d8    	movaps %xmm15,-0x28(%rsp)
   12297:	66 44 0f 6f fe       	movdqa %xmm6,%xmm15
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1229c:	66 0f 6f f0          	movdqa %xmm0,%xmm6
   122a0:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   122a4:	66 0f f5 2d e4 65 02 	pmaddwd 0x265e4(%rip),%xmm5        # 38890 <_ZL11stbi__bmask+0x110>
   122ab:	00 
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   122ac:	66 0f 61 f2          	punpcklwd %xmm2,%xmm6
   122b0:	66 0f 61 cb          	punpcklwd %xmm3,%xmm1
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   122b4:	66 44 0f 6f e0       	movdqa %xmm0,%xmm12
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   122b9:	66 0f 72 e6 04       	psrad  $0x4,%xmm6
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   122be:	66 45 0f 69 d1       	punpckhwd %xmm9,%xmm10
   122c3:	66 44 0f 69 e2       	punpckhwd %xmm2,%xmm12
   122c8:	66 0f 6f d0          	movdqa %xmm0,%xmm2
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   122cc:	0f 29 6c 24 88       	movaps %xmm5,-0x78(%rsp)
   122d1:	66 0f f5 25 c7 65 02 	pmaddwd 0x265c7(%rip),%xmm4        # 388a0 <_ZL11stbi__bmask+0x120>
   122d8:	00 
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   122d9:	0f 29 74 24 a8       	movaps %xmm6,-0x58(%rsp)
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   122de:	66 0f 69 d3          	punpckhwd %xmm3,%xmm2
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   122e2:	66 41 0f 6f ed       	movdqa %xmm13,%xmm5
   122e7:	66 41 0f 6f d8       	movdqa %xmm8,%xmm3
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   122ec:	66 41 0f 6f f5       	movdqa %xmm13,%xmm6
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   122f1:	66 41 0f 61 d9       	punpcklwd %xmm9,%xmm3
   122f6:	66 0f 61 ef          	punpcklwd %xmm7,%xmm5
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   122fa:	0f 29 64 24 98       	movaps %xmm4,-0x68(%rsp)
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   122ff:	66 0f 69 f7          	punpckhwd %xmm7,%xmm6
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   12303:	66 41 0f fd f8       	paddw  %xmm8,%xmm7
   12308:	66 45 0f fd cd       	paddw  %xmm13,%xmm9
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   1230d:	66 41 0f 6f e2       	movdqa %xmm10,%xmm4
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12312:	66 45 0f 6f f4       	movdqa %xmm12,%xmm14
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12317:	66 44 0f 6f d3       	movdqa %xmm3,%xmm10
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1231c:	66 44 0f 6f c7       	movdqa %xmm7,%xmm8
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12321:	66 41 0f 72 e6 04    	psrad  $0x4,%xmm14
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12327:	66 41 0f 69 f9       	punpckhwd %xmm9,%xmm7
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1232c:	66 45 0f 61 c1       	punpcklwd %xmm9,%xmm8
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12331:	66 44 0f 6f dd       	movdqa %xmm5,%xmm11
   12336:	66 44 0f 6f e6       	movdqa %xmm6,%xmm12
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   1233b:	44 0f 29 74 24 b8    	movaps %xmm14,-0x48(%rsp)
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12341:	66 45 0f 6f e8       	movdqa %xmm8,%xmm13
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12346:	66 0f 72 e1 04       	psrad  $0x4,%xmm1
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   1234b:	66 44 0f 6f cf       	movdqa %xmm7,%xmm9
   12350:	66 44 0f f5 15 57 65 	pmaddwd 0x26557(%rip),%xmm10        # 388b0 <_ZL11stbi__bmask+0x130>
   12357:	02 00 
   12359:	66 0f f5 1d 5f 65 02 	pmaddwd 0x2655f(%rip),%xmm3        # 388c0 <_ZL11stbi__bmask+0x140>
   12360:	00 
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12361:	66 0f 72 e2 04       	psrad  $0x4,%xmm2
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12366:	66 44 0f f5 1d 61 65 	pmaddwd 0x26561(%rip),%xmm11        # 388d0 <_ZL11stbi__bmask+0x150>
   1236d:	02 00 
   1236f:	66 45 0f 6f f2       	movdqa %xmm10,%xmm14
   12374:	66 44 0f 6f d4       	movdqa %xmm4,%xmm10
   12379:	66 0f f5 25 3f 65 02 	pmaddwd 0x2653f(%rip),%xmm4        # 388c0 <_ZL11stbi__bmask+0x140>
   12380:	00 
   12381:	66 44 0f f5 15 26 65 	pmaddwd 0x26526(%rip),%xmm10        # 388b0 <_ZL11stbi__bmask+0x130>
   12388:	02 00 
   1238a:	66 44 0f f5 25 3d 65 	pmaddwd 0x2653d(%rip),%xmm12        # 388d0 <_ZL11stbi__bmask+0x150>
   12391:	02 00 
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12393:	44 0f 29 7c 24 e8    	movaps %xmm15,-0x18(%rsp)
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12399:	66 0f f5 35 3f 65 02 	pmaddwd 0x2653f(%rip),%xmm6        # 388e0 <_ZL11stbi__bmask+0x160>
   123a0:	00 
   123a1:	66 0f f5 3d 57 65 02 	pmaddwd 0x26557(%rip),%xmm7        # 38900 <_ZL11stbi__bmask+0x180>
   123a8:	00 
   123a9:	66 44 0f f5 2d 3e 65 	pmaddwd 0x2653e(%rip),%xmm13        # 388f0 <_ZL11stbi__bmask+0x170>
   123b0:	02 00 
   123b2:	66 0f f5 2d 26 65 02 	pmaddwd 0x26526(%rip),%xmm5        # 388e0 <_ZL11stbi__bmask+0x160>
   123b9:	00 
   123ba:	66 44 0f f5 0d 2d 65 	pmaddwd 0x2652d(%rip),%xmm9        # 388f0 <_ZL11stbi__bmask+0x170>
   123c1:	02 00 
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   123c3:	66 44 0f fe e7       	paddd  %xmm7,%xmm12
   123c8:	66 45 0f fe f5       	paddd  %xmm13,%xmm14
   123cd:	66 0f fe e7          	paddd  %xmm7,%xmm4
   123d1:	66 0f 6f 3d 37 65 02 	movdqa 0x26537(%rip),%xmm7        # 38910 <_ZL11stbi__bmask+0x190>
   123d8:	00 
   123d9:	66 45 0f fe d1       	paddd  %xmm9,%xmm10
   123de:	66 41 0f fe f1       	paddd  %xmm9,%xmm6
   123e3:	66 44 0f 6f 4c 24 a8 	movdqa -0x58(%rsp),%xmm9
   123ea:	44 0f 29 74 24 c8    	movaps %xmm14,-0x38(%rsp)
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   123f0:	66 44 0f f5 05 07 65 	pmaddwd 0x26507(%rip),%xmm8        # 38900 <_ZL11stbi__bmask+0x180>
   123f7:	02 00 
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   123f9:	66 44 0f 6f 74 24 b8 	movdqa -0x48(%rsp),%xmm14
   12400:	66 41 0f fe ed       	paddd  %xmm13,%xmm5
   12405:	66 44 0f fe 74 24 98 	paddd  -0x68(%rsp),%xmm14
   1240c:	66 45 0f fe cf       	paddd  %xmm15,%xmm9
   12411:	66 45 0f fe d8       	paddd  %xmm8,%xmm11
   12416:	66 41 0f fe d8       	paddd  %xmm8,%xmm3
   1241b:	66 44 0f fe cf       	paddd  %xmm7,%xmm9
   12420:	66 45 0f 6f c6       	movdqa %xmm14,%xmm8
   12425:	66 44 0f fe c7       	paddd  %xmm7,%xmm8
   1242a:	66 45 0f 6f f1       	movdqa %xmm9,%xmm14
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   1242f:	66 44 0f fa cd       	psubd  %xmm5,%xmm9
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12434:	66 45 0f 6f e8       	movdqa %xmm8,%xmm13
   12439:	66 44 0f fe f5       	paddd  %xmm5,%xmm14
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   1243e:	66 44 0f fa c6       	psubd  %xmm6,%xmm8
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12443:	66 44 0f fe ee       	paddd  %xmm6,%xmm13
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12448:	66 41 0f 72 e6 0a    	psrad  $0xa,%xmm14
   1244e:	66 41 0f 72 e5 0a    	psrad  $0xa,%xmm13
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   12454:	66 45 0f 6f fe       	movdqa %xmm14,%xmm15
   12459:	66 45 0f 6b fd       	packssdw %xmm13,%xmm15
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   1245e:	66 41 0f 72 e1 0a    	psrad  $0xa,%xmm9
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   12464:	66 45 0f 6f f7       	movdqa %xmm15,%xmm14
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12469:	66 41 0f 72 e0 0a    	psrad  $0xa,%xmm8
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   1246f:	66 44 0f 6f 7c 24 d8 	movdqa -0x28(%rsp),%xmm15
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   12476:	66 41 0f 6f f1       	movdqa %xmm9,%xmm6
   1247b:	66 41 0f 6b f0       	packssdw %xmm8,%xmm6
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12480:	66 44 0f 6f 44 24 88 	movdqa -0x78(%rsp),%xmm8
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   12487:	66 44 0f 6f ee       	movdqa %xmm6,%xmm13
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   1248c:	66 41 0f 6f f7       	movdqa %xmm15,%xmm6
   12491:	66 0f fe f1          	paddd  %xmm1,%xmm6
   12495:	66 44 0f fe c2       	paddd  %xmm2,%xmm8
   1249a:	66 0f fe f7          	paddd  %xmm7,%xmm6
   1249e:	66 0f fe d7          	paddd  %xmm7,%xmm2
   124a2:	66 0f fa 54 24 88    	psubd  -0x78(%rsp),%xmm2
   124a8:	66 0f 6f ee          	movdqa %xmm6,%xmm5
   124ac:	66 44 0f fe c7       	paddd  %xmm7,%xmm8
   124b1:	66 0f fe eb          	paddd  %xmm3,%xmm5
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   124b5:	66 0f fa f3          	psubd  %xmm3,%xmm6
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   124b9:	66 45 0f 6f c8       	movdqa %xmm8,%xmm9
   124be:	66 0f fe cf          	paddd  %xmm7,%xmm1
   124c2:	66 0f 6f da          	movdqa %xmm2,%xmm3
   124c6:	66 44 0f fe cc       	paddd  %xmm4,%xmm9
   124cb:	66 41 0f fa cf       	psubd  %xmm15,%xmm1
   124d0:	66 41 0f fe dc       	paddd  %xmm12,%xmm3
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   124d5:	66 0f 72 e6 0a       	psrad  $0xa,%xmm6
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   124da:	66 44 0f fa c4       	psubd  %xmm4,%xmm8
   124df:	66 41 0f fa d4       	psubd  %xmm12,%xmm2
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   124e4:	66 0f 6f e3          	movdqa %xmm3,%xmm4
   124e8:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   124ec:	66 41 0f fa cb       	psubd  %xmm11,%xmm1
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   124f1:	66 44 0f 6f f8       	movdqa %xmm0,%xmm15
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   124f6:	66 0f 72 e2 0a       	psrad  $0xa,%xmm2
   124fb:	66 0f 72 e1 0a       	psrad  $0xa,%xmm1
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12500:	66 41 0f fe db       	paddd  %xmm11,%xmm3
   12505:	66 44 0f 6f 5c 24 c8 	movdqa -0x38(%rsp),%xmm11
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   1250c:	66 0f 72 e4 0a       	psrad  $0xa,%xmm4
   12511:	66 0f 72 e3 0a       	psrad  $0xa,%xmm3
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   12516:	66 0f 6b ca          	packssdw %xmm2,%xmm1
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   1251a:	66 0f 6f 54 24 a8    	movdqa -0x58(%rsp),%xmm2
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12520:	66 41 0f 72 e0 0a    	psrad  $0xa,%xmm8
   12526:	66 41 0f 72 e1 0a    	psrad  $0xa,%xmm9
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   1252c:	66 0f 6b dc          	packssdw %xmm4,%xmm3
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12530:	66 0f fe d7          	paddd  %xmm7,%xmm2
   12534:	66 0f fe 7c 24 b8    	paddd  -0x48(%rsp),%xmm7
   1253a:	66 41 0f 6f e3       	movdqa %xmm11,%xmm4
   1253f:	66 0f fa 54 24 e8    	psubd  -0x18(%rsp),%xmm2
   12545:	66 0f fa 7c 24 98    	psubd  -0x68(%rsp),%xmm7
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   1254b:	66 41 0f 6b f0       	packssdw %xmm8,%xmm6
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12550:	66 0f 72 e5 0a       	psrad  $0xa,%xmm5
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12555:	66 44 0f 6f c7       	movdqa %xmm7,%xmm8
   1255a:	66 0f fe e2          	paddd  %xmm2,%xmm4
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   1255e:	66 41 0f fa fa       	psubd  %xmm10,%xmm7
   12563:	66 41 0f fa d3       	psubd  %xmm11,%xmm2
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12568:	66 45 0f fe c2       	paddd  %xmm10,%xmm8
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   1256d:	66 0f 72 e7 0a       	psrad  $0xa,%xmm7
   12572:	66 0f 72 e2 0a       	psrad  $0xa,%xmm2
   12577:	66 41 0f 72 e0 0a    	psrad  $0xa,%xmm8
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   1257d:	66 41 0f 6b e9       	packssdw %xmm9,%xmm5
   12582:	66 0f 6b d7          	packssdw %xmm7,%xmm2
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12586:	66 0f 72 e4 0a       	psrad  $0xa,%xmm4
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1258b:	66 41 0f 6f fe       	movdqa %xmm14,%xmm7
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   12590:	66 41 0f 6b e0       	packssdw %xmm8,%xmm4
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12595:	66 44 0f 61 f2       	punpcklwd %xmm2,%xmm14
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   1259a:	66 0f 69 fa          	punpckhwd %xmm2,%xmm7
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1259e:	66 44 0f 6f c3       	movdqa %xmm3,%xmm8
   125a3:	66 0f 6f d5          	movdqa %xmm5,%xmm2
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   125a7:	66 44 0f 6f cf       	movdqa %xmm7,%xmm9
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   125ac:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
   125b0:	66 44 0f 61 c6       	punpcklwd %xmm6,%xmm8
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   125b5:	66 0f 69 e9          	punpckhwd %xmm1,%xmm5
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   125b9:	66 0f 6f fc          	movdqa %xmm4,%xmm7
   125bd:	66 41 0f 6f ce       	movdqa %xmm14,%xmm1
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   125c2:	66 0f 69 de          	punpckhwd %xmm6,%xmm3
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   125c6:	66 41 0f 61 fd       	punpcklwd %xmm13,%xmm7
   125cb:	66 41 0f 61 c8       	punpcklwd %xmm8,%xmm1
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   125d0:	66 45 0f 69 f0       	punpckhwd %xmm8,%xmm14
   125d5:	66 0f 6f f2          	movdqa %xmm2,%xmm6
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   125d9:	66 44 0f 6f c2       	movdqa %xmm2,%xmm8
   125de:	66 41 0f 6f d1       	movdqa %xmm9,%xmm2
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   125e3:	66 41 0f 69 e5       	punpckhwd %xmm13,%xmm4
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   125e8:	66 44 0f 61 c7       	punpcklwd %xmm7,%xmm8
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   125ed:	66 0f 69 f7          	punpckhwd %xmm7,%xmm6
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   125f1:	66 0f 61 d3          	punpcklwd %xmm3,%xmm2
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   125f5:	66 44 0f 69 cb       	punpckhwd %xmm3,%xmm9
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   125fa:	66 0f 6f fd          	movdqa %xmm5,%xmm7
   125fe:	66 41 0f 6f de       	movdqa %xmm14,%xmm3
   12603:	66 0f 61 fc          	punpcklwd %xmm4,%xmm7
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12607:	66 44 0f 69 f6       	punpckhwd %xmm6,%xmm14
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1260c:	66 0f 61 de          	punpcklwd %xmm6,%xmm3
   12610:	66 0f 6f f2          	movdqa %xmm2,%xmm6
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12614:	66 0f 69 ec          	punpckhwd %xmm4,%xmm5
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12618:	66 0f 61 f7          	punpcklwd %xmm7,%xmm6
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   1261c:	66 0f 69 d7          	punpckhwd %xmm7,%xmm2
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12620:	66 41 0f 6f f9       	movdqa %xmm9,%xmm7
   12625:	66 0f 61 fd          	punpcklwd %xmm5,%xmm7
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12629:	66 44 0f 69 cd       	punpckhwd %xmm5,%xmm9
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1262e:	66 0f 6f e1          	movdqa %xmm1,%xmm4
   12632:	66 0f 6f eb          	movdqa %xmm3,%xmm5
   12636:	66 41 0f 61 e0       	punpcklwd %xmm8,%xmm4
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   1263b:	66 0f 69 df          	punpckhwd %xmm7,%xmm3
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1263f:	66 0f 61 ef          	punpcklwd %xmm7,%xmm5
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12643:	66 41 0f 69 c8       	punpckhwd %xmm8,%xmm1
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12648:	66 45 0f 6f c1       	movdqa %xmm9,%xmm8
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   1264d:	66 0f 6f fd          	movdqa %xmm5,%xmm7
   12651:	66 44 0f 6f dd       	movdqa %xmm5,%xmm11
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   12656:	66 0f 6f ec          	movdqa %xmm4,%xmm5
   1265a:	66 0f fd ee          	paddw  %xmm6,%xmm5
  return (__m128i) ((__v8hu)__A - (__v8hu)__B);
   1265e:	66 0f f9 e6          	psubw  %xmm6,%xmm4
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12662:	66 41 0f 6f f1       	movdqa %xmm9,%xmm6
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12667:	66 45 0f 61 c6       	punpcklwd %xmm14,%xmm8
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   1266c:	66 41 0f 69 f6       	punpckhwd %xmm14,%xmm6
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12671:	66 44 0f 6f d3       	movdqa %xmm3,%xmm10
   12676:	66 0f f5 3d 12 62 02 	pmaddwd 0x26212(%rip),%xmm7        # 38890 <_ZL11stbi__bmask+0x110>
   1267d:	00 
   1267e:	66 44 0f 6f e3       	movdqa %xmm3,%xmm12
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12683:	66 0f 6f d8          	movdqa %xmm0,%xmm3
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12687:	66 44 0f 69 fd       	punpckhwd %xmm5,%xmm15
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1268c:	66 0f 61 dd          	punpcklwd %xmm5,%xmm3
  return (__m128i) ((__v8hu)__A - (__v8hu)__B);
   12690:	66 0f 6f ec          	movdqa %xmm4,%xmm5
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12694:	0f 29 7c 24 88       	movaps %xmm7,-0x78(%rsp)
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   12699:	66 0f 6f fe          	movdqa %xmm6,%xmm7
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   1269d:	66 41 0f 6f f0       	movdqa %xmm8,%xmm6
   126a2:	66 44 0f f5 15 e5 61 	pmaddwd 0x261e5(%rip),%xmm10        # 38890 <_ZL11stbi__bmask+0x110>
   126a9:	02 00 
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   126ab:	66 0f 6f e0          	movdqa %xmm0,%xmm4
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   126af:	66 45 0f 6f ef       	movdqa %xmm15,%xmm13
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   126b4:	66 0f 69 c5          	punpckhwd %xmm5,%xmm0
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   126b8:	44 0f 29 54 24 98    	movaps %xmm10,-0x68(%rsp)
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   126be:	66 0f 61 e5          	punpcklwd %xmm5,%xmm4
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   126c2:	66 0f f5 35 e6 61 02 	pmaddwd 0x261e6(%rip),%xmm6        # 388b0 <_ZL11stbi__bmask+0x130>
   126c9:	00 
   126ca:	66 44 0f f5 1d cd 61 	pmaddwd 0x261cd(%rip),%xmm11        # 388a0 <_ZL11stbi__bmask+0x120>
   126d1:	02 00 
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   126d3:	66 41 0f 72 e5 04    	psrad  $0x4,%xmm13
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   126d9:	66 0f 6f ea          	movdqa %xmm2,%xmm5
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   126dd:	66 44 0f f5 25 ba 61 	pmaddwd 0x261ba(%rip),%xmm12        # 388a0 <_ZL11stbi__bmask+0x120>
   126e4:	02 00 
   126e6:	66 44 0f 6f d6       	movdqa %xmm6,%xmm10
   126eb:	66 0f 6f f7          	movdqa %xmm7,%xmm6
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   126ef:	66 0f 69 e9          	punpckhwd %xmm1,%xmm5
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   126f3:	44 0f 29 5c 24 a8    	movaps %xmm11,-0x58(%rsp)
   126f9:	44 0f 29 64 24 b8    	movaps %xmm12,-0x48(%rsp)
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   126ff:	66 0f 72 e3 04       	psrad  $0x4,%xmm3
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12704:	66 0f f5 35 a4 61 02 	pmaddwd 0x261a4(%rip),%xmm6        # 388b0 <_ZL11stbi__bmask+0x130>
   1270b:	00 
   1270c:	66 44 0f f5 05 ab 61 	pmaddwd 0x261ab(%rip),%xmm8        # 388c0 <_ZL11stbi__bmask+0x140>
   12713:	02 00 
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12715:	44 0f 29 6c 24 c8    	movaps %xmm13,-0x38(%rsp)
   1271b:	66 0f 72 e4 04       	psrad  $0x4,%xmm4
   12720:	66 0f 72 e0 04       	psrad  $0x4,%xmm0
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12725:	66 44 0f 6f 2d a2 61 	movdqa 0x261a2(%rip),%xmm13        # 388d0 <_ZL11stbi__bmask+0x150>
   1272c:	02 00 
   1272e:	66 44 0f 6f de       	movdqa %xmm6,%xmm11
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12733:	66 0f 6f f2          	movdqa %xmm2,%xmm6
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   12737:	66 41 0f fd d6       	paddw  %xmm14,%xmm2
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1273c:	66 0f 61 f1          	punpcklwd %xmm1,%xmm6
  return (__m128i) ((__v8hu)__A + (__v8hu)__B);
   12740:	66 41 0f fd c9       	paddw  %xmm9,%xmm1
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12745:	66 44 0f f5 ed       	pmaddwd %xmm5,%xmm13
   1274a:	66 44 0f 6f fe       	movdqa %xmm6,%xmm15
   1274f:	66 0f f5 2d 89 61 02 	pmaddwd 0x26189(%rip),%xmm5        # 388e0 <_ZL11stbi__bmask+0x160>
   12756:	00 
   12757:	66 44 0f f5 3d 70 61 	pmaddwd 0x26170(%rip),%xmm15        # 388d0 <_ZL11stbi__bmask+0x150>
   1275e:	02 00 
   12760:	66 0f f5 35 78 61 02 	pmaddwd 0x26178(%rip),%xmm6        # 388e0 <_ZL11stbi__bmask+0x160>
   12767:	00 
   12768:	66 0f f5 3d 50 61 02 	pmaddwd 0x26150(%rip),%xmm7        # 388c0 <_ZL11stbi__bmask+0x140>
   1276f:	00 
   12770:	66 45 0f 6f e7       	movdqa %xmm15,%xmm12
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   12775:	66 44 0f 6f f9       	movdqa %xmm1,%xmm15
  return (__m128i)__builtin_ia32_punpckhwd128 ((__v8hi)__A, (__v8hi)__B);
   1277a:	66 0f 69 ca          	punpckhwd %xmm2,%xmm1
  return (__m128i)__builtin_ia32_punpcklwd128 ((__v8hi)__A, (__v8hi)__B);
   1277e:	66 44 0f 61 fa       	punpcklwd %xmm2,%xmm15
  return (__m128i)__builtin_ia32_pmaddwd128 ((__v8hi)__A, (__v8hi)__B);
   12783:	66 45 0f 6f f7       	movdqa %xmm15,%xmm14
   12788:	66 41 0f 6f d7       	movdqa %xmm15,%xmm2
   1278d:	66 44 0f f5 35 5a 61 	pmaddwd 0x2615a(%rip),%xmm14        # 388f0 <_ZL11stbi__bmask+0x170>
   12794:	02 00 
   12796:	66 0f f5 15 62 61 02 	pmaddwd 0x26162(%rip),%xmm2        # 38900 <_ZL11stbi__bmask+0x180>
   1279d:	00 
   1279e:	66 45 0f 6f ce       	movdqa %xmm14,%xmm9
   127a3:	66 44 0f 6f f1       	movdqa %xmm1,%xmm14
   127a8:	66 44 0f f5 35 3f 61 	pmaddwd 0x2613f(%rip),%xmm14        # 388f0 <_ZL11stbi__bmask+0x170>
   127af:	02 00 
   127b1:	66 0f f5 0d 47 61 02 	pmaddwd 0x26147(%rip),%xmm1        # 38900 <_ZL11stbi__bmask+0x180>
   127b8:	00 
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   127b9:	66 44 0f fe c2       	paddd  %xmm2,%xmm8
   127be:	66 45 0f fe de       	paddd  %xmm14,%xmm11
   127c3:	66 44 0f fe f5       	paddd  %xmm5,%xmm14
   127c8:	66 0f 6f 6c 24 a8    	movdqa -0x58(%rsp),%xmm5
   127ce:	66 45 0f fe d1       	paddd  %xmm9,%xmm10
   127d3:	66 44 0f fe e2       	paddd  %xmm2,%xmm12
   127d8:	66 0f 6f 54 24 c8    	movdqa -0x38(%rsp),%xmm2
   127de:	66 44 0f fe ce       	paddd  %xmm6,%xmm9
   127e3:	66 0f 6f 35 35 61 02 	movdqa 0x26135(%rip),%xmm6        # 38920 <_ZL11stbi__bmask+0x1a0>
   127ea:	00 
   127eb:	66 0f fe 54 24 b8    	paddd  -0x48(%rsp),%xmm2
   127f1:	66 0f fe eb          	paddd  %xmm3,%xmm5
   127f5:	66 0f fe f9          	paddd  %xmm1,%xmm7
   127f9:	66 0f fe ee          	paddd  %xmm6,%xmm5
   127fd:	66 0f fe d6          	paddd  %xmm6,%xmm2
   12801:	66 44 0f fe e9       	paddd  %xmm1,%xmm13
   12806:	66 44 0f 6f fa       	movdqa %xmm2,%xmm15
   1280b:	66 0f 6f cd          	movdqa %xmm5,%xmm1
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   1280f:	66 41 0f fa d6       	psubd  %xmm14,%xmm2
   12814:	66 41 0f fa e9       	psubd  %xmm9,%xmm5
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12819:	66 0f 72 e2 11       	psrad  $0x11,%xmm2
   1281e:	66 0f 72 e5 11       	psrad  $0x11,%xmm5
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12823:	66 41 0f fe c9       	paddd  %xmm9,%xmm1
   12828:	66 44 0f 6f 4c 24 98 	movdqa -0x68(%rsp),%xmm9
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   1282f:	66 0f 6b ea          	packssdw %xmm2,%xmm5
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12833:	66 0f 6f 54 24 88    	movdqa -0x78(%rsp),%xmm2
   12839:	66 45 0f fe fe       	paddd  %xmm14,%xmm15
   1283e:	66 0f fe de          	paddd  %xmm6,%xmm3
   12842:	66 44 0f fe c8       	paddd  %xmm0,%xmm9
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12847:	66 41 0f 72 e7 11    	psrad  $0x11,%xmm15
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   1284d:	66 0f fe c6          	paddd  %xmm6,%xmm0
   12851:	66 0f fe d4          	paddd  %xmm4,%xmm2
   12855:	66 44 0f fe ce       	paddd  %xmm6,%xmm9
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   1285a:	66 0f 72 e1 11       	psrad  $0x11,%xmm1
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   1285f:	66 0f fe d6          	paddd  %xmm6,%xmm2
   12863:	66 0f fa 44 24 98    	psubd  -0x68(%rsp),%xmm0
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   12869:	66 41 0f 6b cf       	packssdw %xmm15,%xmm1
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   1286e:	66 0f fe e6          	paddd  %xmm6,%xmm4
   12872:	66 45 0f 6f f9       	movdqa %xmm9,%xmm15
   12877:	66 0f fa 64 24 88    	psubd  -0x78(%rsp),%xmm4
   1287d:	66 44 0f 6f f2       	movdqa %xmm2,%xmm14
   12882:	66 44 0f fe ff       	paddd  %xmm7,%xmm15
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   12887:	66 44 0f fa cf       	psubd  %xmm7,%xmm9
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   1288c:	66 45 0f fe f0       	paddd  %xmm8,%xmm14
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   12891:	66 41 0f fa d0       	psubd  %xmm8,%xmm2
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12896:	66 0f 6f fc          	movdqa %xmm4,%xmm7
   1289a:	66 44 0f 6f c0       	movdqa %xmm0,%xmm8
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   1289f:	66 41 0f fa e4       	psubd  %xmm12,%xmm4
   128a4:	66 41 0f fa c5       	psubd  %xmm13,%xmm0
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   128a9:	66 0f 72 e0 11       	psrad  $0x11,%xmm0
   128ae:	66 0f 72 e4 11       	psrad  $0x11,%xmm4
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   128b3:	66 0f fa 5c 24 a8    	psubd  -0x58(%rsp),%xmm3
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   128b9:	66 0f 6b e0          	packssdw %xmm0,%xmm4
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   128bd:	66 45 0f fe c5       	paddd  %xmm13,%xmm8
   128c2:	66 0f 6f 44 24 c8    	movdqa -0x38(%rsp),%xmm0
   128c8:	66 41 0f fe fc       	paddd  %xmm12,%xmm7
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   128cd:	66 41 0f 72 e0 11    	psrad  $0x11,%xmm8
   128d3:	66 0f 72 e7 11       	psrad  $0x11,%xmm7
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   128d8:	66 0f fe c6          	paddd  %xmm6,%xmm0
   128dc:	66 0f fa 44 24 b8    	psubd  -0x48(%rsp),%xmm0
   128e2:	66 0f 6f f3          	movdqa %xmm3,%xmm6
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   128e6:	66 41 0f 6b f8       	packssdw %xmm8,%xmm7
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   128eb:	66 41 0f 72 e7 11    	psrad  $0x11,%xmm15
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   128f1:	66 41 0f fe f2       	paddd  %xmm10,%xmm6
   128f6:	66 44 0f 6f c0       	movdqa %xmm0,%xmm8
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   128fb:	66 41 0f 72 e6 11    	psrad  $0x11,%xmm14
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   12901:	66 41 0f fa c3       	psubd  %xmm11,%xmm0
  return (__m128i) ((__v4su)__A + (__v4su)__B);
   12906:	66 45 0f fe c3       	paddd  %xmm11,%xmm8
  return (__m128i) ((__v4su)__A - (__v4su)__B);
   1290b:	66 41 0f fa da       	psubd  %xmm10,%xmm3
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12910:	66 0f 72 e0 11       	psrad  $0x11,%xmm0
   12915:	66 41 0f 72 e0 11    	psrad  $0x11,%xmm8
   1291b:	66 0f 72 e6 11       	psrad  $0x11,%xmm6
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   12920:	66 45 0f 6b f7       	packssdw %xmm15,%xmm14
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12925:	66 0f 72 e3 11       	psrad  $0x11,%xmm3
  return (__m128i)__builtin_ia32_packuswb128 ((__v8hi)__A, (__v8hi)__B);
   1292a:	66 41 0f 67 ce       	packuswb %xmm14,%xmm1
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   1292f:	66 41 0f 6b f0       	packssdw %xmm8,%xmm6
   12934:	66 0f 6b d8          	packssdw %xmm0,%xmm3
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12938:	66 41 0f 72 e1 11    	psrad  $0x11,%xmm9
  return (__m128i)__builtin_ia32_packuswb128 ((__v8hi)__A, (__v8hi)__B);
   1293e:	66 0f 67 fe          	packuswb %xmm6,%xmm7
  return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);
   12942:	66 0f 72 e2 11       	psrad  $0x11,%xmm2
  return (__m128i)__builtin_ia32_packuswb128 ((__v8hi)__A, (__v8hi)__B);
   12947:	66 0f 67 dc          	packuswb %xmm4,%xmm3
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   1294b:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  return (__m128i)__builtin_ia32_packssdw128 ((__v4si)__A, (__v4si)__B);
   1294f:	66 41 0f 6b d1       	packssdw %xmm9,%xmm2
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   12954:	66 0f 60 c3          	punpcklbw %xmm3,%xmm0
  return (__m128i)__builtin_ia32_punpckhbw128 ((__v16qi)__A, (__v16qi)__B);
   12958:	66 0f 68 cb          	punpckhbw %xmm3,%xmm1
  return (__m128i)__builtin_ia32_packuswb128 ((__v8hi)__A, (__v8hi)__B);
   1295c:	66 0f 67 d5          	packuswb %xmm5,%xmm2
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   12960:	66 0f 6f df          	movdqa %xmm7,%xmm3
   12964:	66 0f 60 da          	punpcklbw %xmm2,%xmm3
  return (__m128i)__builtin_ia32_punpckhbw128 ((__v16qi)__A, (__v16qi)__B);
   12968:	66 0f 68 fa          	punpckhbw %xmm2,%xmm7
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   1296c:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   12970:	66 0f 60 d3          	punpcklbw %xmm3,%xmm2
  return (__m128i)__builtin_ia32_punpckhbw128 ((__v16qi)__A, (__v16qi)__B);
   12974:	66 0f 68 c3          	punpckhbw %xmm3,%xmm0
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   12978:	66 0f 6f d9          	movdqa %xmm1,%xmm3
   1297c:	66 0f 60 df          	punpcklbw %xmm7,%xmm3
   12980:	66 0f 6f e2          	movdqa %xmm2,%xmm4
  return (__m128i)__builtin_ia32_punpckhbw128 ((__v16qi)__A, (__v16qi)__B);
   12984:	66 0f 68 cf          	punpckhbw %xmm7,%xmm1
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   12988:	66 0f 60 e3          	punpcklbw %xmm3,%xmm4
  return (__m128i)__builtin_ia32_punpckhbw128 ((__v16qi)__A, (__v16qi)__B);
   1298c:	66 0f 68 d3          	punpckhbw %xmm3,%xmm2
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   12990:	66 0f 6f d8          	movdqa %xmm0,%xmm3
  *(__m64_u *)__P = (__m64) ((__v2di)__B)[0];
   12994:	66 0f d6 27          	movq   %xmm4,(%rdi)
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm_shuffle_epi32 (__m128i __A, const int __mask)
{
  return (__m128i)__builtin_ia32_pshufd ((__v4si)__A, __mask);
   12998:	66 0f 70 e4 4e       	pshufd $0x4e,%xmm4,%xmm4
  return (__m128i)__builtin_ia32_punpcklbw128 ((__v16qi)__A, (__v16qi)__B);
   1299d:	66 0f 60 d9          	punpcklbw %xmm1,%xmm3
  return (__m128i)__builtin_ia32_punpckhbw128 ((__v16qi)__A, (__v16qi)__B);
   129a1:	66 0f 68 c1          	punpckhbw %xmm1,%xmm0
  *(__m64_u *)__P = (__m64) ((__v2di)__B)[0];
   129a5:	66 0f d6 20          	movq   %xmm4,(%rax)
      _mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p0, 0x4e)); out += out_stride;
   129a9:	48 01 f0             	add    %rsi,%rax
   129ac:	66 0f d6 10          	movq   %xmm2,(%rax)
      _mm_storel_epi64((__m128i *) out, p2); out += out_stride;
   129b0:	48 01 f0             	add    %rsi,%rax
  return (__m128i)__builtin_ia32_pshufd ((__v4si)__A, __mask);
   129b3:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
  *(__m64_u *)__P = (__m64) ((__v2di)__B)[0];
   129b8:	66 0f d6 10          	movq   %xmm2,(%rax)
      _mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p2, 0x4e)); out += out_stride;
   129bc:	48 01 f0             	add    %rsi,%rax
   129bf:	66 0f d6 18          	movq   %xmm3,(%rax)
      _mm_storel_epi64((__m128i *) out, p1); out += out_stride;
   129c3:	48 01 f0             	add    %rsi,%rax
  return (__m128i)__builtin_ia32_pshufd ((__v4si)__A, __mask);
   129c6:	66 0f 70 db 4e       	pshufd $0x4e,%xmm3,%xmm3
  *(__m64_u *)__P = (__m64) ((__v2di)__B)[0];
   129cb:	66 0f d6 18          	movq   %xmm3,(%rax)
      _mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p1, 0x4e)); out += out_stride;
   129cf:	48 01 f0             	add    %rsi,%rax
   129d2:	66 0f d6 00          	movq   %xmm0,(%rax)
  return (__m128i)__builtin_ia32_pshufd ((__v4si)__A, __mask);
   129d6:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
  *(__m64_u *)__P = (__m64) ((__v2di)__B)[0];
   129db:	66 0f d6 04 30       	movq   %xmm0,(%rax,%rsi,1)
}
   129e0:	c3                   	ret
   129e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   129e8:	00 00 00 00 
   129ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000129f0 <_ZL17stbi__hdr_convertPfPhi>:
{
   129f0:	41 54                	push   %r12
   129f2:	49 89 fc             	mov    %rdi,%r12
   if ( input[3] != 0 ) {
   129f5:	0f b6 7e 03          	movzbl 0x3(%rsi),%edi
{
   129f9:	55                   	push   %rbp
   129fa:	53                   	push   %rbx
   129fb:	89 d3                	mov    %edx,%ebx
   if ( input[3] != 0 ) {
   129fd:	40 84 ff             	test   %dil,%dil
   12a00:	75 56                	jne    12a58 <_ZL17stbi__hdr_convertPfPhi+0x68>
      switch (req_comp) {
   12a02:	83 fa 03             	cmp    $0x3,%edx
   12a05:	74 37                	je     12a3e <_ZL17stbi__hdr_convertPfPhi+0x4e>
   12a07:	7f 27                	jg     12a30 <_ZL17stbi__hdr_convertPfPhi+0x40>
   12a09:	83 fa 01             	cmp    $0x1,%edx
   12a0c:	74 0e                	je     12a1c <_ZL17stbi__hdr_convertPfPhi+0x2c>
   12a0e:	83 fa 02             	cmp    $0x2,%edx
   12a11:	75 11                	jne    12a24 <_ZL17stbi__hdr_convertPfPhi+0x34>
         case 2: output[1] = 1; /* fallthrough */
   12a13:	41 c7 44 24 04 00 00 	movl   $0x3f800000,0x4(%r12)
   12a1a:	80 3f 
         case 1: output[0] = 0;
   12a1c:	41 c7 04 24 00 00 00 	movl   $0x0,(%r12)
   12a23:	00 
}
   12a24:	5b                   	pop    %rbx
   12a25:	5d                   	pop    %rbp
   12a26:	41 5c                	pop    %r12
   12a28:	c3                   	ret
   12a29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      switch (req_comp) {
   12a30:	83 fa 04             	cmp    $0x4,%edx
   12a33:	75 ef                	jne    12a24 <_ZL17stbi__hdr_convertPfPhi+0x34>
         case 4: output[3] = 1; /* fallthrough */
   12a35:	41 c7 44 24 0c 00 00 	movl   $0x3f800000,0xc(%r12)
   12a3c:	80 3f 
         case 3: output[0] = output[1] = output[2] = 0;
   12a3e:	41 c7 44 24 08 00 00 	movl   $0x0,0x8(%r12)
   12a45:	00 00 
   12a47:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
   12a4e:	00 
}
   12a4f:	5b                   	pop    %rbx
   12a50:	5d                   	pop    %rbp
   12a51:	41 5c                	pop    %r12
   12a53:	c3                   	ret
   12a54:	0f 1f 40 00          	nopl   0x0(%rax)
  using ::ldexp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }
   12a58:	f3 0f 10 05 48 60 02 	movss  0x26048(%rip),%xmm0        # 38aa8 <_ZL11stbi__bmask+0x328>
   12a5f:	00 
   12a60:	48 89 f5             	mov    %rsi,%rbp
      f1 = (float) ldexp(1.0f, input[3] - (int)(128 + 8));
   12a63:	81 ef 88 00 00 00    	sub    $0x88,%edi
   12a69:	e8 42 3d ff ff       	call   67b0 <ldexpf@plt>
         output[0] = (input[0] + input[1] + input[2]) * f1 / 3;
   12a6e:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
      if (req_comp <= 2)
   12a72:	83 fb 02             	cmp    $0x2,%ebx
   12a75:	7f 39                	jg     12ab0 <_ZL17stbi__hdr_convertPfPhi+0xc0>
         output[0] = (input[0] + input[1] + input[2]) * f1 / 3;
   12a77:	0f b6 55 01          	movzbl 0x1(%rbp),%edx
   12a7b:	66 0f ef c9          	pxor   %xmm1,%xmm1
   12a7f:	01 d0                	add    %edx,%eax
   12a81:	0f b6 55 02          	movzbl 0x2(%rbp),%edx
   12a85:	01 d0                	add    %edx,%eax
   12a87:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
   12a8b:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
   12a8f:	f3 0f 5e 0d 19 60 02 	divss  0x26019(%rip),%xmm1        # 38ab0 <_ZL11stbi__bmask+0x330>
   12a96:	00 
   12a97:	f3 41 0f 11 0c 24    	movss  %xmm1,(%r12)
      if (req_comp == 2) output[1] = 1;
   12a9d:	83 fb 02             	cmp    $0x2,%ebx
   12aa0:	75 82                	jne    12a24 <_ZL17stbi__hdr_convertPfPhi+0x34>
   12aa2:	41 c7 44 24 04 00 00 	movl   $0x3f800000,0x4(%r12)
   12aa9:	80 3f 
}
   12aab:	5b                   	pop    %rbx
   12aac:	5d                   	pop    %rbp
   12aad:	41 5c                	pop    %r12
   12aaf:	c3                   	ret
         output[0] = input[0] * f1;
   12ab0:	66 0f ef c9          	pxor   %xmm1,%xmm1
   12ab4:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
   12ab8:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
   12abc:	f3 41 0f 11 0c 24    	movss  %xmm1,(%r12)
         output[1] = input[1] * f1;
   12ac2:	0f b6 45 01          	movzbl 0x1(%rbp),%eax
   12ac6:	66 0f ef c9          	pxor   %xmm1,%xmm1
   12aca:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
   12ace:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
   12ad2:	f3 41 0f 11 4c 24 04 	movss  %xmm1,0x4(%r12)
         output[2] = input[2] * f1;
   12ad9:	0f b6 45 02          	movzbl 0x2(%rbp),%eax
   12add:	66 0f ef c9          	pxor   %xmm1,%xmm1
   12ae1:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
   12ae5:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
   12ae9:	f3 41 0f 11 4c 24 08 	movss  %xmm1,0x8(%r12)
      if (req_comp == 4) output[3] = 1;
   12af0:	83 fb 04             	cmp    $0x4,%ebx
   12af3:	0f 85 2b ff ff ff    	jne    12a24 <_ZL17stbi__hdr_convertPfPhi+0x34>
   12af9:	41 c7 44 24 0c 00 00 	movl   $0x3f800000,0xc(%r12)
   12b00:	80 3f 
   12b02:	e9 1d ff ff ff       	jmp    12a24 <_ZL17stbi__hdr_convertPfPhi+0x34>
   12b07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   12b0e:	00 00 

0000000000012b10 <_ZL10stbi__skipP13stbi__contexti.part.0>:
   if (s->io.read) {
   12b10:	48 83 7f 10 00       	cmpq   $0x0,0x10(%rdi)
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   12b15:	48 8b 87 c0 00 00 00 	mov    0xc0(%rdi),%rax
   if (s->io.read) {
   12b1c:	74 11                	je     12b2f <_ZL10stbi__skipP13stbi__contexti.part.0+0x1f>
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   12b1e:	48 8b 8f c8 00 00 00 	mov    0xc8(%rdi),%rcx
   12b25:	48 89 ca             	mov    %rcx,%rdx
   12b28:	48 29 c2             	sub    %rax,%rdx
      if (blen < n) {
   12b2b:	39 f2                	cmp    %esi,%edx
   12b2d:	7c 11                	jl     12b40 <_ZL10stbi__skipP13stbi__contexti.part.0+0x30>
   s->img_buffer += n;
   12b2f:	48 63 f6             	movslq %esi,%rsi
   12b32:	48 01 f0             	add    %rsi,%rax
   12b35:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
}
   12b3c:	c3                   	ret
   12b3d:	0f 1f 00             	nopl   (%rax)
         (s->io.skip)(s->io_user_data, n - blen);
   12b40:	29 d6                	sub    %edx,%esi
   12b42:	48 8b 57 28          	mov    0x28(%rdi),%rdx
         s->img_buffer = s->img_buffer_end;
   12b46:	48 89 8f c0 00 00 00 	mov    %rcx,0xc0(%rdi)
         (s->io.skip)(s->io_user_data, n - blen);
   12b4d:	48 8b 47 18          	mov    0x18(%rdi),%rax
   12b51:	48 89 d7             	mov    %rdx,%rdi
   12b54:	ff e0                	jmp    *%rax
   12b56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   12b5d:	00 00 00 

0000000000012b60 <_ZL22stbi__resample_row_h_2PhS_S_ii>:
      out[0] = out[1] = input[0];
   12b60:	0f b6 06             	movzbl (%rsi),%eax
   if (w == 1) {
   12b63:	83 f9 01             	cmp    $0x1,%ecx
   12b66:	0f 84 84 04 00 00    	je     12ff0 <_ZL22stbi__resample_row_h_2PhS_S_ii+0x490>
{
   12b6c:	41 54                	push   %r12
   12b6e:	41 89 c8             	mov    %ecx,%r8d
   out[1] = stbi__div4(input[0]*3 + input[1] + 2);
   12b71:	8d 0c 40             	lea    (%rax,%rax,2),%ecx
   12b74:	48 89 f2             	mov    %rsi,%rdx
{
   12b77:	55                   	push   %rbp
   for (i=1; i < w-1; ++i) {
   12b78:	45 8d 48 ff          	lea    -0x1(%r8),%r9d
{
   12b7c:	53                   	push   %rbx
   out[0] = input[0];
   12b7d:	88 07                	mov    %al,(%rdi)
   out[1] = stbi__div4(input[0]*3 + input[1] + 2);
   12b7f:	0f b6 46 01          	movzbl 0x1(%rsi),%eax
   12b83:	8d 44 01 02          	lea    0x2(%rcx,%rax,1),%eax
   12b87:	c1 f8 02             	sar    $0x2,%eax
   12b8a:	88 47 01             	mov    %al,0x1(%rdi)
   for (i=1; i < w-1; ++i) {
   12b8d:	41 83 f8 02          	cmp    $0x2,%r8d
   12b91:	0f 8e 69 04 00 00    	jle    13000 <_ZL22stbi__resample_row_h_2PhS_S_ii+0x4a0>
   12b97:	41 8d 70 fd          	lea    -0x3(%r8),%esi
   12b9b:	83 fe 06             	cmp    $0x6,%esi
   12b9e:	76 1f                	jbe    12bbf <_ZL22stbi__resample_row_h_2PhS_S_ii+0x5f>
   12ba0:	44 89 c8             	mov    %r9d,%eax
   12ba3:	48 8d 4f 02          	lea    0x2(%rdi),%rcx
   12ba7:	48 8d 04 47          	lea    (%rdi,%rax,2),%rax
   12bab:	48 39 c2             	cmp    %rax,%rdx
   12bae:	0f 83 84 00 00 00    	jae    12c38 <_ZL22stbi__resample_row_h_2PhS_S_ii+0xd8>
   12bb4:	44 89 c0             	mov    %r8d,%eax
   12bb7:	48 01 d0             	add    %rdx,%rax
   12bba:	48 39 c1             	cmp    %rax,%rcx
   12bbd:	73 79                	jae    12c38 <_ZL22stbi__resample_row_h_2PhS_S_ii+0xd8>
   12bbf:	45 89 ca             	mov    %r9d,%r10d
   12bc2:	b8 01 00 00 00       	mov    $0x1,%eax
   12bc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   12bce:	00 00 
      int n = 3*input[i]+2;
   12bd0:	0f b6 0c 02          	movzbl (%rdx,%rax,1),%ecx
   12bd4:	8d 74 49 02          	lea    0x2(%rcx,%rcx,2),%esi
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12bd8:	0f b6 4c 02 ff       	movzbl -0x1(%rdx,%rax,1),%ecx
   12bdd:	01 f1                	add    %esi,%ecx
   12bdf:	c1 f9 02             	sar    $0x2,%ecx
   12be2:	88 0c 47             	mov    %cl,(%rdi,%rax,2)
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12be5:	0f b6 4c 02 01       	movzbl 0x1(%rdx,%rax,1),%ecx
   12bea:	01 f1                	add    %esi,%ecx
   12bec:	c1 f9 02             	sar    $0x2,%ecx
   12bef:	88 4c 47 01          	mov    %cl,0x1(%rdi,%rax,2)
   for (i=1; i < w-1; ++i) {
   12bf3:	48 83 c0 01          	add    $0x1,%rax
   12bf7:	49 39 c2             	cmp    %rax,%r10
   12bfa:	75 d4                	jne    12bd0 <_ZL22stbi__resample_row_h_2PhS_S_ii+0x70>
   out[i*2+0] = stbi__div4(input[w-2]*3 + input[w-1] + 2);
   12bfc:	45 01 c9             	add    %r9d,%r9d
   12bff:	4d 63 c9             	movslq %r9d,%r9
   out[i*2+1] = input[w-1];
   12c02:	49 8d 71 01          	lea    0x1(%r9),%rsi
   out[i*2+0] = stbi__div4(input[w-2]*3 + input[w-1] + 2);
   12c06:	4d 63 c0             	movslq %r8d,%r8
}
   12c09:	5b                   	pop    %rbx
   12c0a:	5d                   	pop    %rbp
   out[i*2+0] = stbi__div4(input[w-2]*3 + input[w-1] + 2);
   12c0b:	42 0f b6 44 02 fe    	movzbl -0x2(%rdx,%r8,1),%eax
   12c11:	4a 8d 4c 02 ff       	lea    -0x1(%rdx,%r8,1),%rcx
}
   12c16:	41 5c                	pop    %r12
   out[i*2+0] = stbi__div4(input[w-2]*3 + input[w-1] + 2);
   12c18:	8d 14 40             	lea    (%rax,%rax,2),%edx
   12c1b:	0f b6 01             	movzbl (%rcx),%eax
   12c1e:	8d 44 02 02          	lea    0x2(%rdx,%rax,1),%eax
   12c22:	c1 f8 02             	sar    $0x2,%eax
   12c25:	42 88 04 0f          	mov    %al,(%rdi,%r9,1)
   out[i*2+1] = input[w-1];
   12c29:	0f b6 01             	movzbl (%rcx),%eax
   12c2c:	88 04 37             	mov    %al,(%rdi,%rsi,1)
}
   12c2f:	48 89 f8             	mov    %rdi,%rax
   12c32:	c3                   	ret
   12c33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   12c38:	83 fe 0e             	cmp    $0xe,%esi
   12c3b:	0f 86 cf 03 00 00    	jbe    13010 <_ZL22stbi__resample_row_h_2PhS_S_ii+0x4b0>
   12c41:	45 8d 58 fe          	lea    -0x2(%r8),%r11d
   for (i=1; i < w-1; ++i) {
   12c45:	48 89 d0             	mov    %rdx,%rax
      int n = 3*input[i]+2;
   12c48:	66 0f ef e4          	pxor   %xmm4,%xmm4
   12c4c:	66 0f 6f 3d ac 5b 02 	movdqa 0x25bac(%rip),%xmm7        # 38800 <_ZL11stbi__bmask+0x80>
   12c53:	00 
   12c54:	44 89 de             	mov    %r11d,%esi
   12c57:	66 0f 6f 2d b1 5b 02 	movdqa 0x25bb1(%rip),%xmm5        # 38810 <_ZL11stbi__bmask+0x90>
   12c5e:	00 
   12c5f:	66 0f 6f 35 b9 5b 02 	movdqa 0x25bb9(%rip),%xmm6        # 38820 <_ZL11stbi__bmask+0xa0>
   12c66:	00 
   12c67:	c1 ee 04             	shr    $0x4,%esi
   12c6a:	48 c1 e6 04          	shl    $0x4,%rsi
   12c6e:	48 01 d6             	add    %rdx,%rsi
   12c71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   12c78:	f3 0f 6f 50 01       	movdqu 0x1(%rax),%xmm2
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12c7d:	f3 0f 6f 18          	movdqu (%rax),%xmm3
   for (i=1; i < w-1; ++i) {
   12c81:	48 83 c0 10          	add    $0x10,%rax
   12c85:	48 83 c1 20          	add    $0x20,%rcx
      int n = 3*input[i]+2;
   12c89:	66 0f 6f ca          	movdqa %xmm2,%xmm1
   12c8d:	66 0f 68 d4          	punpckhbw %xmm4,%xmm2
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12c91:	66 0f 6f c3          	movdqa %xmm3,%xmm0
      int n = 3*input[i]+2;
   12c95:	66 0f 60 cc          	punpcklbw %xmm4,%xmm1
   12c99:	66 0f d5 d6          	pmullw %xmm6,%xmm2
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12c9d:	66 0f 60 c4          	punpcklbw %xmm4,%xmm0
      int n = 3*input[i]+2;
   12ca1:	66 0f d5 ce          	pmullw %xmm6,%xmm1
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12ca5:	66 0f 68 dc          	punpckhbw %xmm4,%xmm3
      int n = 3*input[i]+2;
   12ca9:	66 0f fd d7          	paddw  %xmm7,%xmm2
   12cad:	66 0f fd cf          	paddw  %xmm7,%xmm1
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12cb1:	66 0f fd da          	paddw  %xmm2,%xmm3
   12cb5:	66 0f fd c1          	paddw  %xmm1,%xmm0
   12cb9:	66 0f 71 d3 02       	psrlw  $0x2,%xmm3
   12cbe:	66 0f 71 d0 02       	psrlw  $0x2,%xmm0
   12cc3:	66 0f db dd          	pand   %xmm5,%xmm3
   12cc7:	66 0f db c5          	pand   %xmm5,%xmm0
   12ccb:	66 0f 67 c3          	packuswb %xmm3,%xmm0
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12ccf:	f3 0f 6f 58 f2       	movdqu -0xe(%rax),%xmm3
   12cd4:	66 44 0f 6f c3       	movdqa %xmm3,%xmm8
   12cd9:	66 0f 68 dc          	punpckhbw %xmm4,%xmm3
   12cdd:	66 44 0f 60 c4       	punpcklbw %xmm4,%xmm8
   12ce2:	66 0f fd d3          	paddw  %xmm3,%xmm2
   12ce6:	66 41 0f fd c8       	paddw  %xmm8,%xmm1
   12ceb:	66 0f 71 d2 02       	psrlw  $0x2,%xmm2
   12cf0:	66 0f 71 d1 02       	psrlw  $0x2,%xmm1
   12cf5:	66 0f db d5          	pand   %xmm5,%xmm2
   12cf9:	66 0f db cd          	pand   %xmm5,%xmm1
   12cfd:	66 0f 67 ca          	packuswb %xmm2,%xmm1
   12d01:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   12d05:	66 0f 60 d1          	punpcklbw %xmm1,%xmm2
   12d09:	66 0f 68 c1          	punpckhbw %xmm1,%xmm0
   12d0d:	0f 11 51 e0          	movups %xmm2,-0x20(%rcx)
   12d11:	0f 11 41 f0          	movups %xmm0,-0x10(%rcx)
   for (i=1; i < w-1; ++i) {
   12d15:	48 39 f0             	cmp    %rsi,%rax
   12d18:	0f 85 5a ff ff ff    	jne    12c78 <_ZL22stbi__resample_row_h_2PhS_S_ii+0x118>
   12d1e:	45 89 da             	mov    %r11d,%r10d
   12d21:	41 83 e2 f0          	and    $0xfffffff0,%r10d
   12d25:	41 83 e3 0f          	and    $0xf,%r11d
   12d29:	41 8d 42 01          	lea    0x1(%r10),%eax
   12d2d:	0f 84 c9 fe ff ff    	je     12bfc <_ZL22stbi__resample_row_h_2PhS_S_ii+0x9c>
   12d33:	44 89 c1             	mov    %r8d,%ecx
   12d36:	44 29 d1             	sub    %r10d,%ecx
   12d39:	8d 71 fe             	lea    -0x2(%rcx),%esi
   12d3c:	83 e9 03             	sub    $0x3,%ecx
   12d3f:	83 f9 06             	cmp    $0x6,%ecx
   12d42:	0f 86 f2 00 00 00    	jbe    12e3a <_ZL22stbi__resample_row_h_2PhS_S_ii+0x2da>
      int n = 3*input[i]+2;
   12d48:	f3 42 0f 7e 4c 12 01 	movq   0x1(%rdx,%r10,1),%xmm1
   12d4f:	66 0f ef ed          	pxor   %xmm5,%xmm5
   12d53:	f3 0f 7e 1d a5 5a 02 	movq   0x25aa5(%rip),%xmm3        # 38800 <_ZL11stbi__bmask+0x80>
   12d5a:	00 
   12d5b:	4a 8d 4c 57 02       	lea    0x2(%rdi,%r10,2),%rcx
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12d60:	f3 0f 7e 25 a8 5a 02 	movq   0x25aa8(%rip),%xmm4        # 38810 <_ZL11stbi__bmask+0x90>
   12d67:	00 
      int n = 3*input[i]+2;
   12d68:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   12d6c:	66 0f 60 cd          	punpcklbw %xmm5,%xmm1
   12d70:	66 0f 60 d5          	punpcklbw %xmm5,%xmm2
   12d74:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   12d79:	66 0f 6f c2          	movdqa %xmm2,%xmm0
   12d7d:	66 0f 71 f0 01       	psllw  $0x1,%xmm0
   12d82:	66 0f fd c2          	paddw  %xmm2,%xmm0
   12d86:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   12d8a:	66 0f 71 f2 01       	psllw  $0x1,%xmm2
   12d8f:	66 0f fd d1          	paddw  %xmm1,%xmm2
   12d93:	66 0f fd c3          	paddw  %xmm3,%xmm0
   12d97:	66 0f fd d3          	paddw  %xmm3,%xmm2
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12d9b:	f3 42 0f 7e 1c 12    	movq   (%rdx,%r10,1),%xmm3
   12da1:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   12da5:	66 0f 60 dd          	punpcklbw %xmm5,%xmm3
   12da9:	66 0f 60 cd          	punpcklbw %xmm5,%xmm1
   12dad:	66 0f 70 db 4e       	pshufd $0x4e,%xmm3,%xmm3
   12db2:	66 0f fd c8          	paddw  %xmm0,%xmm1
   12db6:	66 0f fd da          	paddw  %xmm2,%xmm3
   12dba:	66 0f 71 d1 02       	psrlw  $0x2,%xmm1
   12dbf:	66 0f 71 d3 02       	psrlw  $0x2,%xmm3
   12dc4:	66 0f db dc          	pand   %xmm4,%xmm3
   12dc8:	66 0f db cc          	pand   %xmm4,%xmm1
   12dcc:	66 0f 67 cb          	packuswb %xmm3,%xmm1
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12dd0:	f3 42 0f 7e 5c 12 02 	movq   0x2(%rdx,%r10,1),%xmm3
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12dd7:	66 0f 70 c9 08       	pshufd $0x8,%xmm1,%xmm1
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12ddc:	66 0f 6f f3          	movdqa %xmm3,%xmm6
   12de0:	66 0f 60 dd          	punpcklbw %xmm5,%xmm3
   12de4:	66 0f 60 f5          	punpcklbw %xmm5,%xmm6
   12de8:	66 0f 70 db 4e       	pshufd $0x4e,%xmm3,%xmm3
   12ded:	66 0f fd c6          	paddw  %xmm6,%xmm0
   12df1:	66 0f fd d3          	paddw  %xmm3,%xmm2
   12df5:	66 0f 71 d0 02       	psrlw  $0x2,%xmm0
   12dfa:	66 0f 71 d2 02       	psrlw  $0x2,%xmm2
   12dff:	66 0f db c4          	pand   %xmm4,%xmm0
   12e03:	66 0f db e2          	pand   %xmm2,%xmm4
   12e07:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   12e0b:	66 0f 67 c4          	packuswb %xmm4,%xmm0
   12e0f:	66 0f 70 c0 08       	pshufd $0x8,%xmm0,%xmm0
   12e14:	66 0f 60 c8          	punpcklbw %xmm0,%xmm1
   12e18:	66 0f 60 d0          	punpcklbw %xmm0,%xmm2
   12e1c:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   12e21:	66 0f d6 11          	movq   %xmm2,(%rcx)
   12e25:	66 0f d6 49 08       	movq   %xmm1,0x8(%rcx)
   for (i=1; i < w-1; ++i) {
   12e2a:	89 f1                	mov    %esi,%ecx
   12e2c:	83 e1 f8             	and    $0xfffffff8,%ecx
   12e2f:	01 c8                	add    %ecx,%eax
   12e31:	83 e6 07             	and    $0x7,%esi
   12e34:	0f 84 c2 fd ff ff    	je     12bfc <_ZL22stbi__resample_row_h_2PhS_S_ii+0x9c>
      int n = 3*input[i]+2;
   12e3a:	4c 63 d0             	movslq %eax,%r10
   12e3d:	4a 8d 1c 12          	lea    (%rdx,%r10,1),%rbx
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12e41:	42 0f b6 74 12 ff    	movzbl -0x1(%rdx,%r10,1),%esi
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12e47:	4a 8d 6c 12 01       	lea    0x1(%rdx,%r10,1),%rbp
      int n = 3*input[i]+2;
   12e4c:	0f b6 0b             	movzbl (%rbx),%ecx
   12e4f:	44 8d 64 49 02       	lea    0x2(%rcx,%rcx,2),%r12d
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12e54:	8d 0c 00             	lea    (%rax,%rax,1),%ecx
   12e57:	44 01 e6             	add    %r12d,%esi
   12e5a:	4c 63 d9             	movslq %ecx,%r11
   12e5d:	c1 fe 02             	sar    $0x2,%esi
   12e60:	42 88 34 1f          	mov    %sil,(%rdi,%r11,1)
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12e64:	0f b6 75 00          	movzbl 0x0(%rbp),%esi
   12e68:	44 01 e6             	add    %r12d,%esi
   12e6b:	c1 fe 02             	sar    $0x2,%esi
   12e6e:	42 88 74 1f 01       	mov    %sil,0x1(%rdi,%r11,1)
   for (i=1; i < w-1; ++i) {
   12e73:	8d 70 01             	lea    0x1(%rax),%esi
   12e76:	41 39 f1             	cmp    %esi,%r9d
   12e79:	0f 8e 7d fd ff ff    	jle    12bfc <_ZL22stbi__resample_row_h_2PhS_S_ii+0x9c>
      int n = 3*input[i]+2;
   12e7f:	0f b6 75 00          	movzbl 0x0(%rbp),%esi
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12e83:	44 8d 59 02          	lea    0x2(%rcx),%r11d
   12e87:	4d 63 db             	movslq %r11d,%r11
      int n = 3*input[i]+2;
   12e8a:	44 8d 64 76 02       	lea    0x2(%rsi,%rsi,2),%r12d
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12e8f:	0f b6 33             	movzbl (%rbx),%esi
   12e92:	44 01 e6             	add    %r12d,%esi
   12e95:	c1 fe 02             	sar    $0x2,%esi
   12e98:	42 88 34 1f          	mov    %sil,(%rdi,%r11,1)
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12e9c:	42 0f b6 74 12 02    	movzbl 0x2(%rdx,%r10,1),%esi
   12ea2:	44 01 e6             	add    %r12d,%esi
   12ea5:	c1 fe 02             	sar    $0x2,%esi
   12ea8:	42 88 74 1f 01       	mov    %sil,0x1(%rdi,%r11,1)
   for (i=1; i < w-1; ++i) {
   12ead:	8d 70 02             	lea    0x2(%rax),%esi
   12eb0:	41 39 f1             	cmp    %esi,%r9d
   12eb3:	0f 8e 43 fd ff ff    	jle    12bfc <_ZL22stbi__resample_row_h_2PhS_S_ii+0x9c>
      int n = 3*input[i]+2;
   12eb9:	48 63 f6             	movslq %esi,%rsi
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12ebc:	44 8d 59 04          	lea    0x4(%rcx),%r11d
      int n = 3*input[i]+2;
   12ec0:	44 0f b6 14 32       	movzbl (%rdx,%rsi,1),%r10d
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12ec5:	4d 63 db             	movslq %r11d,%r11
      int n = 3*input[i]+2;
   12ec8:	43 8d 5c 52 02       	lea    0x2(%r10,%r10,2),%ebx
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12ecd:	44 0f b6 55 00       	movzbl 0x0(%rbp),%r10d
   12ed2:	41 01 da             	add    %ebx,%r10d
   12ed5:	41 c1 fa 02          	sar    $0x2,%r10d
   12ed9:	46 88 14 1f          	mov    %r10b,(%rdi,%r11,1)
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12edd:	0f b6 74 32 01       	movzbl 0x1(%rdx,%rsi,1),%esi
   12ee2:	01 de                	add    %ebx,%esi
   12ee4:	c1 fe 02             	sar    $0x2,%esi
   12ee7:	42 88 74 1f 01       	mov    %sil,0x1(%rdi,%r11,1)
   for (i=1; i < w-1; ++i) {
   12eec:	8d 70 03             	lea    0x3(%rax),%esi
   12eef:	41 39 f1             	cmp    %esi,%r9d
   12ef2:	0f 8e 04 fd ff ff    	jle    12bfc <_ZL22stbi__resample_row_h_2PhS_S_ii+0x9c>
      int n = 3*input[i]+2;
   12ef8:	48 63 f6             	movslq %esi,%rsi
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12efb:	44 8d 59 06          	lea    0x6(%rcx),%r11d
      int n = 3*input[i]+2;
   12eff:	44 0f b6 14 32       	movzbl (%rdx,%rsi,1),%r10d
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12f04:	4d 63 db             	movslq %r11d,%r11
      int n = 3*input[i]+2;
   12f07:	43 8d 5c 52 02       	lea    0x2(%r10,%r10,2),%ebx
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12f0c:	44 0f b6 54 32 ff    	movzbl -0x1(%rdx,%rsi,1),%r10d
   12f12:	41 01 da             	add    %ebx,%r10d
   12f15:	41 c1 fa 02          	sar    $0x2,%r10d
   12f19:	46 88 14 1f          	mov    %r10b,(%rdi,%r11,1)
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12f1d:	0f b6 74 32 01       	movzbl 0x1(%rdx,%rsi,1),%esi
   12f22:	01 de                	add    %ebx,%esi
   12f24:	c1 fe 02             	sar    $0x2,%esi
   12f27:	42 88 74 1f 01       	mov    %sil,0x1(%rdi,%r11,1)
   for (i=1; i < w-1; ++i) {
   12f2c:	8d 70 04             	lea    0x4(%rax),%esi
   12f2f:	41 39 f1             	cmp    %esi,%r9d
   12f32:	0f 8e c4 fc ff ff    	jle    12bfc <_ZL22stbi__resample_row_h_2PhS_S_ii+0x9c>
      int n = 3*input[i]+2;
   12f38:	48 63 f6             	movslq %esi,%rsi
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12f3b:	44 8d 59 08          	lea    0x8(%rcx),%r11d
      int n = 3*input[i]+2;
   12f3f:	44 0f b6 14 32       	movzbl (%rdx,%rsi,1),%r10d
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12f44:	4d 63 db             	movslq %r11d,%r11
      int n = 3*input[i]+2;
   12f47:	43 8d 5c 52 02       	lea    0x2(%r10,%r10,2),%ebx
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12f4c:	44 0f b6 54 32 ff    	movzbl -0x1(%rdx,%rsi,1),%r10d
   12f52:	41 01 da             	add    %ebx,%r10d
   12f55:	41 c1 fa 02          	sar    $0x2,%r10d
   12f59:	46 88 14 1f          	mov    %r10b,(%rdi,%r11,1)
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12f5d:	0f b6 74 32 01       	movzbl 0x1(%rdx,%rsi,1),%esi
   12f62:	01 de                	add    %ebx,%esi
   12f64:	c1 fe 02             	sar    $0x2,%esi
   12f67:	42 88 74 1f 01       	mov    %sil,0x1(%rdi,%r11,1)
   for (i=1; i < w-1; ++i) {
   12f6c:	8d 70 05             	lea    0x5(%rax),%esi
   12f6f:	41 39 f1             	cmp    %esi,%r9d
   12f72:	0f 8e 84 fc ff ff    	jle    12bfc <_ZL22stbi__resample_row_h_2PhS_S_ii+0x9c>
      int n = 3*input[i]+2;
   12f78:	48 63 f6             	movslq %esi,%rsi
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12f7b:	44 8d 59 0a          	lea    0xa(%rcx),%r11d
   for (i=1; i < w-1; ++i) {
   12f7f:	83 c0 06             	add    $0x6,%eax
      int n = 3*input[i]+2;
   12f82:	44 0f b6 14 32       	movzbl (%rdx,%rsi,1),%r10d
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12f87:	4d 63 db             	movslq %r11d,%r11
      int n = 3*input[i]+2;
   12f8a:	43 8d 5c 52 02       	lea    0x2(%r10,%r10,2),%ebx
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12f8f:	44 0f b6 54 32 ff    	movzbl -0x1(%rdx,%rsi,1),%r10d
   12f95:	41 01 da             	add    %ebx,%r10d
   12f98:	41 c1 fa 02          	sar    $0x2,%r10d
   12f9c:	46 88 14 1f          	mov    %r10b,(%rdi,%r11,1)
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12fa0:	0f b6 74 32 01       	movzbl 0x1(%rdx,%rsi,1),%esi
   12fa5:	01 de                	add    %ebx,%esi
   12fa7:	c1 fe 02             	sar    $0x2,%esi
   12faa:	42 88 74 1f 01       	mov    %sil,0x1(%rdi,%r11,1)
   for (i=1; i < w-1; ++i) {
   12faf:	41 39 c1             	cmp    %eax,%r9d
   12fb2:	0f 8e 44 fc ff ff    	jle    12bfc <_ZL22stbi__resample_row_h_2PhS_S_ii+0x9c>
      int n = 3*input[i]+2;
   12fb8:	48 98                	cltq
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12fba:	83 c1 0c             	add    $0xc,%ecx
      int n = 3*input[i]+2;
   12fbd:	0f b6 34 02          	movzbl (%rdx,%rax,1),%esi
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12fc1:	48 63 c9             	movslq %ecx,%rcx
      int n = 3*input[i]+2;
   12fc4:	44 8d 54 76 02       	lea    0x2(%rsi,%rsi,2),%r10d
      out[i*2+0] = stbi__div4(n+input[i-1]);
   12fc9:	0f b6 74 02 ff       	movzbl -0x1(%rdx,%rax,1),%esi
   12fce:	44 01 d6             	add    %r10d,%esi
   12fd1:	c1 fe 02             	sar    $0x2,%esi
   12fd4:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
      out[i*2+1] = stbi__div4(n+input[i+1]);
   12fd8:	0f b6 44 02 01       	movzbl 0x1(%rdx,%rax,1),%eax
   12fdd:	44 01 d0             	add    %r10d,%eax
   12fe0:	c1 f8 02             	sar    $0x2,%eax
   12fe3:	88 44 0f 01          	mov    %al,0x1(%rdi,%rcx,1)
   for (i=1; i < w-1; ++i) {
   12fe7:	e9 10 fc ff ff       	jmp    12bfc <_ZL22stbi__resample_row_h_2PhS_S_ii+0x9c>
   12fec:	0f 1f 40 00          	nopl   0x0(%rax)
      out[0] = out[1] = input[0];
   12ff0:	0f b6 d0             	movzbl %al,%edx
   12ff3:	88 c6                	mov    %al,%dh
}
   12ff5:	48 89 f8             	mov    %rdi,%rax
      out[0] = out[1] = input[0];
   12ff8:	66 89 17             	mov    %dx,(%rdi)
}
   12ffb:	c3                   	ret
   12ffc:	0f 1f 40 00          	nopl   0x0(%rax)
   for (i=1; i < w-1; ++i) {
   13000:	be 03 00 00 00       	mov    $0x3,%esi
   13005:	41 b9 02 00 00 00    	mov    $0x2,%r9d
   1300b:	e9 f6 fb ff ff       	jmp    12c06 <_ZL22stbi__resample_row_h_2PhS_S_ii+0xa6>
   13010:	41 8d 70 fe          	lea    -0x2(%r8),%esi
   13014:	45 31 d2             	xor    %r10d,%r10d
   13017:	b8 01 00 00 00       	mov    $0x1,%eax
   1301c:	e9 27 fd ff ff       	jmp    12d48 <_ZL22stbi__resample_row_h_2PhS_S_ii+0x1e8>
   13021:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   13028:	00 00 00 00 
   1302c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000013030 <_ZL22stbi__convert_format16Ptiijj.part.0>:
static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)
   13030:	89 c8                	mov    %ecx,%eax
   13032:	41 57                	push   %r15
   good = (stbi__uint16 *) stbi__malloc(req_comp * x * y * 2);
   13034:	41 0f af c0          	imul   %r8d,%eax
static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)
   13038:	41 56                	push   %r14
   1303a:	45 89 c6             	mov    %r8d,%r14d
   1303d:	41 55                	push   %r13
   1303f:	41 54                	push   %r12
   13041:	55                   	push   %rbp
   good = (stbi__uint16 *) stbi__malloc(req_comp * x * y * 2);
   13042:	0f af c2             	imul   %edx,%eax
static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)
   13045:	89 d5                	mov    %edx,%ebp
   13047:	53                   	push   %rbx
   13048:	89 f3                	mov    %esi,%ebx
   1304a:	48 83 ec 78          	sub    $0x78,%rsp
   1304e:	48 89 3c 24          	mov    %rdi,(%rsp)
   good = (stbi__uint16 *) stbi__malloc(req_comp * x * y * 2);
   13052:	8d 3c 00             	lea    (%rax,%rax,1),%edi
static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)
   13055:	89 4c 24 14          	mov    %ecx,0x14(%rsp)
   13059:	44 89 44 24 10       	mov    %r8d,0x10(%rsp)
    return STBI_MALLOC(size);
   1305e:	e8 fd 36 ff ff       	call   6760 <malloc@plt>
   if (good == NULL) {
   13063:	48 85 c0             	test   %rax,%rax
   13066:	0f 84 34 19 00 00    	je     149a0 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1970>
   1306c:	49 89 c7             	mov    %rax,%r15
   for (j=0; j < (int) y; ++j) {
   1306f:	45 85 f6             	test   %r14d,%r14d
   13072:	0f 8e da 00 00 00    	jle    13152 <_ZL22stbi__convert_format16Ptiijj.part.0+0x122>
   13078:	8b 44 24 14          	mov    0x14(%rsp),%eax
   1307c:	8d 54 dd f6          	lea    -0xa(%rbp,%rbx,8),%edx
      switch (STBI__COMBO(img_n, req_comp)) {
   13080:	4c 89 7c 24 18       	mov    %r15,0x18(%rsp)
   for (j=0; j < (int) y; ++j) {
   13085:	45 31 f6             	xor    %r14d,%r14d
      stbi__uint16 *src  = data + j * x * img_n   ;
   13088:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
   1308f:	00 
      switch (STBI__COMBO(img_n, req_comp)) {
   13090:	49 89 d1             	mov    %rdx,%r9
   13093:	89 c7                	mov    %eax,%edi
   13095:	0f af c5             	imul   %ebp,%eax
   13098:	0f af fb             	imul   %ebx,%edi
   1309b:	89 d3                	mov    %edx,%ebx
   1309d:	89 44 24 0c          	mov    %eax,0xc(%rsp)
      stbi__uint16 *src  = data + j * x * img_n   ;
   130a1:	31 c0                	xor    %eax,%eax
   130a3:	89 7c 24 30          	mov    %edi,0x30(%rsp)
      switch (STBI__COMBO(img_n, req_comp)) {
   130a7:	41 89 c7             	mov    %eax,%r15d
      stbi__uint16 *src  = data + j * x * img_n   ;
   130aa:	48 8b 04 24          	mov    (%rsp),%rax
      stbi__uint16 *dest = good + j * x * req_comp;
   130ae:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
      stbi__uint16 *src  = data + j * x * img_n   ;
   130b3:	44 89 fd             	mov    %r15d,%ebp
   130b6:	4c 8d 14 68          	lea    (%rax,%rbp,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   130ba:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   130bf:	4b 8d 0c 24          	lea    (%r12,%r12,1),%rcx
   130c3:	4c 8d 1c 08          	lea    (%rax,%rcx,1),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   130c7:	83 fb 19             	cmp    $0x19,%ebx
   130ca:	77 14                	ja     130e0 <_ZL22stbi__convert_format16Ptiijj.part.0+0xb0>
   130cc:	48 8d 3d 8d 4e 02 00 	lea    0x24e8d(%rip),%rdi        # 37f60 <_ZSt19piecewise_construct+0x619>
   130d3:	4a 63 04 8f          	movslq (%rdi,%r9,4),%rax
   130d7:	48 01 f8             	add    %rdi,%rax
   130da:	ff e0                	jmp    *%rax
   130dc:	0f 1f 40 00          	nopl   0x0(%rax)
         default: STBI_ASSERT(0); STBI_FREE(data); STBI_FREE(good); return (stbi__uint16*) stbi__errpuc("unsupported", "Unsupported format conversion");
   130e0:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
   130e5:	48 8b 3c 24          	mov    (%rsp),%rdi
   130e9:	e8 b2 35 ff ff       	call   66a0 <free@plt>
   130ee:	4c 89 ff             	mov    %r15,%rdi
   130f1:	e8 aa 35 ff ff       	call   66a0 <free@plt>
   130f6:	48 8d 05 2c 49 02 00 	lea    0x2492c(%rip),%rax        # 37a29 <_ZSt19piecewise_construct+0xe2>
   stbi__g_failure_reason = str;
   130fd:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   13104:	ff ff 
      return (stbi__uint16 *) stbi__errpuc("outofmem", "Out of memory");
   13106:	45 31 ff             	xor    %r15d,%r15d
}
   13109:	48 83 c4 78          	add    $0x78,%rsp
   1310d:	4c 89 f8             	mov    %r15,%rax
   13110:	5b                   	pop    %rbx
   13111:	5d                   	pop    %rbp
   13112:	41 5c                	pop    %r12
   13114:	41 5d                	pop    %r13
   13116:	41 5e                	pop    %r14
   13118:	41 5f                	pop    %r15
   1311a:	c3                   	ret
   1311b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   13120:	89 7c 24 08          	mov    %edi,0x8(%rsp)
   13124:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
   13128:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
   for (j=0; j < (int) y; ++j) {
   1312d:	8b 44 24 30          	mov    0x30(%rsp),%eax
   13131:	41 83 c6 01          	add    $0x1,%r14d
   13135:	8b 7c 24 0c          	mov    0xc(%rsp),%edi
   13139:	01 7c 24 08          	add    %edi,0x8(%rsp)
   1313d:	41 01 c7             	add    %eax,%r15d
   13140:	8b 44 24 10          	mov    0x10(%rsp),%eax
   13144:	41 39 c6             	cmp    %eax,%r14d
   13147:	0f 85 5d ff ff ff    	jne    130aa <_ZL22stbi__convert_format16Ptiijj.part.0+0x7a>
   1314d:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
   STBI_FREE(data);
   13152:	48 8b 3c 24          	mov    (%rsp),%rdi
   13156:	e8 45 35 ff ff       	call   66a0 <free@plt>
   return good;
   1315b:	eb ac                	jmp    13109 <_ZL22stbi__convert_format16Ptiijj.part.0+0xd9>
   1315d:	8b 44 24 14          	mov    0x14(%rsp),%eax
   13161:	8b 7c 24 08          	mov    0x8(%rsp),%edi
   13165:	89 5c 24 20          	mov    %ebx,0x20(%rsp)
   13169:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1316f:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
   13174:	66 0f 6f 3d b4 57 02 	movdqa 0x257b4(%rip),%xmm7        # 38930 <_ZL11stbi__bmask+0x1b0>
   1317b:	00 
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1317c:	66 45 0f ef c0       	pxor   %xmm8,%xmm8
   13181:	8d 50 fe             	lea    -0x2(%rax),%edx
   13184:	48 8b 1c 24          	mov    (%rsp),%rbx
   13188:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
   1318d:	8d 70 ff             	lea    -0x1(%rax),%esi
   13190:	89 54 24 08          	mov    %edx,0x8(%rsp)
   13194:	66 0f 6f 35 a4 57 02 	movdqa 0x257a4(%rip),%xmm6        # 38940 <_ZL11stbi__bmask+0x1c0>
   1319b:	00 
   1319c:	66 0f 6f 2d ac 57 02 	movdqa 0x257ac(%rip),%xmm5        # 38950 <_ZL11stbi__bmask+0x1d0>
   131a3:	00 
   131a4:	0f 1f 40 00          	nopl   0x0(%rax)
   131a8:	89 f2                	mov    %esi,%edx
   131aa:	85 f6                	test   %esi,%esi
   131ac:	0f 88 6e ff ff ff    	js     13120 <_ZL22stbi__convert_format16Ptiijj.part.0+0xf0>
   131b2:	8b 4c 24 14          	mov    0x14(%rsp),%ecx
   131b6:	83 7c 24 08 ff       	cmpl   $0xffffffff,0x8(%rsp)
   131bb:	41 0f 4c c8          	cmovl  %r8d,%ecx
   131bf:	83 fe 06             	cmp    $0x6,%esi
   131c2:	0f 86 78 17 00 00    	jbe    14940 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1910>
   131c8:	41 89 cd             	mov    %ecx,%r13d
   131cb:	4c 89 d0             	mov    %r10,%rax
   131ce:	4c 89 da             	mov    %r11,%rdx
   131d1:	41 c1 ed 03          	shr    $0x3,%r13d
   131d5:	49 c1 e5 06          	shl    $0x6,%r13
   131d9:	4d 01 d5             	add    %r10,%r13
   131dc:	0f 1f 40 00          	nopl   0x0(%rax)
   131e0:	f3 44 0f 6f 08       	movdqu (%rax),%xmm9
   131e5:	f3 0f 6f 58 10       	movdqu 0x10(%rax),%xmm3
   131ea:	48 83 c0 40          	add    $0x40,%rax
   131ee:	48 83 c2 20          	add    $0x20,%rdx
   131f2:	f3 0f 6f 40 e0       	movdqu -0x20(%rax),%xmm0
   131f7:	f3 0f 6f 60 f0       	movdqu -0x10(%rax),%xmm4
   131fc:	66 41 0f 6f d1       	movdqa %xmm9,%xmm2
   13201:	66 41 0f 6f c9       	movdqa %xmm9,%xmm1
   13206:	66 44 0f 61 cb       	punpcklwd %xmm3,%xmm9
   1320b:	66 0f 61 d3          	punpcklwd %xmm3,%xmm2
   1320f:	66 0f 69 cb          	punpckhwd %xmm3,%xmm1
   13213:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   13217:	66 44 0f 6f d2       	movdqa %xmm2,%xmm10
   1321c:	66 44 0f 61 c9       	punpcklwd %xmm1,%xmm9
   13221:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
   13225:	66 44 0f 69 d1       	punpckhwd %xmm1,%xmm10
   1322a:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   1322e:	66 0f 69 dc          	punpckhwd %xmm4,%xmm3
   13232:	66 0f 61 cc          	punpcklwd %xmm4,%xmm1
   13236:	66 41 0f 61 d2       	punpcklwd %xmm10,%xmm2
   1323b:	66 45 0f 69 ca       	punpckhwd %xmm10,%xmm9
   13240:	66 44 0f 6f d1       	movdqa %xmm1,%xmm10
   13245:	66 0f 61 cb          	punpcklwd %xmm3,%xmm1
   13249:	66 0f 61 c4          	punpcklwd %xmm4,%xmm0
   1324d:	66 44 0f 69 d3       	punpckhwd %xmm3,%xmm10
   13252:	66 0f 6f e2          	movdqa %xmm2,%xmm4
   13256:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   1325a:	66 41 0f 61 ca       	punpcklwd %xmm10,%xmm1
   1325f:	66 0f 6f da          	movdqa %xmm2,%xmm3
   13263:	66 41 0f 69 c2       	punpckhwd %xmm10,%xmm0
   13268:	66 0f 61 e1          	punpcklwd %xmm1,%xmm4
   1326c:	66 0f 69 d9          	punpckhwd %xmm1,%xmm3
   13270:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
   13274:	66 44 0f 6f d4       	movdqa %xmm4,%xmm10
   13279:	66 0f 61 d3          	punpcklwd %xmm3,%xmm2
   1327d:	66 0f 61 e3          	punpcklwd %xmm3,%xmm4
   13281:	66 44 0f 69 d3       	punpckhwd %xmm3,%xmm10
   13286:	66 41 0f 6f d9       	movdqa %xmm9,%xmm3
   1328b:	66 41 0f 6f c9       	movdqa %xmm9,%xmm1
   13290:	66 0f 61 d8          	punpcklwd %xmm0,%xmm3
   13294:	66 0f 69 c8          	punpckhwd %xmm0,%xmm1
   13298:	66 41 0f 61 e2       	punpcklwd %xmm10,%xmm4
   1329d:	66 41 0f 69 d2       	punpckhwd %xmm10,%xmm2
   132a2:	66 44 0f 6f d3       	movdqa %xmm3,%xmm10
   132a7:	66 44 0f 61 c8       	punpcklwd %xmm0,%xmm9
   132ac:	66 44 0f 69 d1       	punpckhwd %xmm1,%xmm10
   132b1:	66 0f 61 d9          	punpcklwd %xmm1,%xmm3
   132b5:	66 44 0f 61 c9       	punpcklwd %xmm1,%xmm9
   132ba:	66 41 0f 61 da       	punpcklwd %xmm10,%xmm3
   132bf:	66 45 0f 69 ca       	punpckhwd %xmm10,%xmm9
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   132c4:	66 44 0f 6f d4       	movdqa %xmm4,%xmm10
   132c9:	66 44 0f d5 d7       	pmullw %xmm7,%xmm10
   132ce:	66 0f e4 e7          	pmulhuw %xmm7,%xmm4
   132d2:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   132d6:	66 0f d5 ce          	pmullw %xmm6,%xmm1
   132da:	66 0f e4 de          	pmulhuw %xmm6,%xmm3
   132de:	66 45 0f 6f da       	movdqa %xmm10,%xmm11
   132e3:	66 44 0f 69 d4       	punpckhwd %xmm4,%xmm10
   132e8:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   132ec:	66 44 0f 61 dc       	punpcklwd %xmm4,%xmm11
   132f1:	66 0f 69 cb          	punpckhwd %xmm3,%xmm1
   132f5:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   132f9:	66 41 0f fe ca       	paddd  %xmm10,%xmm1
   132fe:	66 41 0f fe c3       	paddd  %xmm11,%xmm0
   13303:	66 44 0f 6f da       	movdqa %xmm2,%xmm11
   13308:	66 44 0f d5 dd       	pmullw %xmm5,%xmm11
   1330d:	66 0f e4 d5          	pmulhuw %xmm5,%xmm2
   13311:	66 45 0f 6f e3       	movdqa %xmm11,%xmm12
   13316:	66 44 0f 69 da       	punpckhwd %xmm2,%xmm11
   1331b:	66 44 0f 61 e2       	punpcklwd %xmm2,%xmm12
   13320:	66 41 0f fe cb       	paddd  %xmm11,%xmm1
   13325:	66 41 0f fe c4       	paddd  %xmm12,%xmm0
   1332a:	66 0f 72 e1 08       	psrad  $0x8,%xmm1
   1332f:	66 0f 72 e0 08       	psrad  $0x8,%xmm0
   13334:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   13338:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
   1333c:	66 0f 69 d1          	punpckhwd %xmm1,%xmm2
   13340:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   13344:	66 0f 69 ca          	punpckhwd %xmm2,%xmm1
   13348:	66 0f 61 c2          	punpcklwd %xmm2,%xmm0
   1334c:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   13350:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   13354:	66 41 0f 69 c1       	punpckhwd %xmm9,%xmm0
   13359:	66 41 0f 61 c9       	punpcklwd %xmm9,%xmm1
   1335e:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
   13362:	0f 11 4a e0          	movups %xmm1,-0x20(%rdx)
   13366:	49 39 c5             	cmp    %rax,%r13
   13369:	0f 85 71 fe ff ff    	jne    131e0 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1b0>
   1336f:	89 c8                	mov    %ecx,%eax
   13371:	83 e0 f8             	and    $0xfffffff8,%eax
   13374:	89 c2                	mov    %eax,%edx
   13376:	4d 8d 14 d2          	lea    (%r10,%rdx,8),%r10
   1337a:	4d 8d 1c 93          	lea    (%r11,%rdx,4),%r11
   1337e:	89 f2                	mov    %esi,%edx
   13380:	29 c2                	sub    %eax,%edx
   13382:	f6 c1 07             	test   $0x7,%cl
   13385:	0f 84 d7 02 00 00    	je     13662 <_ZL22stbi__convert_format16Ptiijj.part.0+0x632>
   1338b:	29 c1                	sub    %eax,%ecx
   1338d:	44 8d 69 ff          	lea    -0x1(%rcx),%r13d
   13391:	41 83 fd 02          	cmp    $0x2,%r13d
   13395:	0f 86 29 02 00 00    	jbe    135c4 <_ZL22stbi__convert_format16Ptiijj.part.0+0x594>
   1339b:	48 8d 6c 85 00       	lea    0x0(%rbp,%rax,4),%rbp
   133a0:	49 8d 04 44          	lea    (%r12,%rax,2),%rax
   133a4:	48 8d 2c 6b          	lea    (%rbx,%rbp,2),%rbp
   133a8:	49 8d 04 41          	lea    (%r9,%rax,2),%rax
   133ac:	f3 0f 7e 55 00       	movq   0x0(%rbp),%xmm2
   133b1:	f3 0f 7e 4d 08       	movq   0x8(%rbp),%xmm1
   133b6:	f3 0f 7e 45 10       	movq   0x10(%rbp),%xmm0
   133bb:	f3 0f 7e 65 18       	movq   0x18(%rbp),%xmm4
   133c0:	66 44 0f 6f ca       	movdqa %xmm2,%xmm9
   133c5:	66 0f 6f da          	movdqa %xmm2,%xmm3
   133c9:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
   133cd:	66 44 0f 61 c9       	punpcklwd %xmm1,%xmm9
   133d2:	66 0f 61 d9          	punpcklwd %xmm1,%xmm3
   133d6:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   133da:	66 45 0f 70 c9 4e    	pshufd $0x4e,%xmm9,%xmm9
   133e0:	66 0f 61 cc          	punpcklwd %xmm4,%xmm1
   133e4:	66 41 0f 61 d9       	punpcklwd %xmm9,%xmm3
   133e9:	66 41 0f 61 d1       	punpcklwd %xmm9,%xmm2
   133ee:	66 44 0f 6f c8       	movdqa %xmm0,%xmm9
   133f3:	66 44 0f 61 cc       	punpcklwd %xmm4,%xmm9
   133f8:	66 0f 61 c4          	punpcklwd %xmm4,%xmm0
   133fc:	66 0f 6f e3          	movdqa %xmm3,%xmm4
   13400:	66 45 0f 70 c9 4e    	pshufd $0x4e,%xmm9,%xmm9
   13406:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   1340b:	66 41 0f 61 c9       	punpcklwd %xmm9,%xmm1
   13410:	66 41 0f 61 c1       	punpcklwd %xmm9,%xmm0
   13415:	66 44 0f 6f cb       	movdqa %xmm3,%xmm9
   1341a:	66 0f 61 e1          	punpcklwd %xmm1,%xmm4
   1341e:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   13423:	66 44 0f 61 c9       	punpcklwd %xmm1,%xmm9
   13428:	66 0f 70 e4 4e       	pshufd $0x4e,%xmm4,%xmm4
   1342d:	66 0f 61 d9          	punpcklwd %xmm1,%xmm3
   13431:	66 0f 6f ca          	movdqa %xmm2,%xmm1
   13435:	66 44 0f 61 cc       	punpcklwd %xmm4,%xmm9
   1343a:	66 0f 61 dc          	punpcklwd %xmm4,%xmm3
   1343e:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
   13442:	66 0f 6f e2          	movdqa %xmm2,%xmm4
   13446:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   1344b:	66 45 0f 6f d9       	movdqa %xmm9,%xmm11
   13450:	66 0f 61 e0          	punpcklwd %xmm0,%xmm4
   13454:	66 45 0f 61 d8       	punpcklwd %xmm8,%xmm11
   13459:	66 0f 61 d0          	punpcklwd %xmm0,%xmm2
   1345d:	66 0f 61 e1          	punpcklwd %xmm1,%xmm4
   13461:	66 0f 70 db 4e       	pshufd $0x4e,%xmm3,%xmm3
   13466:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
   1346a:	66 44 0f 6f e4       	movdqa %xmm4,%xmm12
   1346f:	66 41 0f 61 e0       	punpcklwd %xmm8,%xmm4
   13474:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   13478:	66 0f 70 e4 4e       	pshufd $0x4e,%xmm4,%xmm4
   1347d:	66 45 0f 61 e0       	punpcklwd %xmm8,%xmm12
   13482:	66 41 0f 61 c8       	punpcklwd %xmm8,%xmm1
   13487:	66 0f 6f c4          	movdqa %xmm4,%xmm0
   1348b:	66 0f 72 f4 02       	pslld  $0x2,%xmm4
   13490:	66 45 0f 6f d4       	movdqa %xmm12,%xmm10
   13495:	66 0f fe e0          	paddd  %xmm0,%xmm4
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13499:	66 41 0f 6f c3       	movdqa %xmm11,%xmm0
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1349e:	66 45 0f 61 c8       	punpcklwd %xmm8,%xmm9
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   134a3:	66 0f 72 f0 02       	pslld  $0x2,%xmm0
   134a8:	66 41 0f 72 f2 02    	pslld  $0x2,%xmm10
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   134ae:	66 45 0f 70 c9 4e    	pshufd $0x4e,%xmm9,%xmm9
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   134b4:	66 41 0f fe c3       	paddd  %xmm11,%xmm0
   134b9:	66 45 0f fe d4       	paddd  %xmm12,%xmm10
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   134be:	66 41 0f 61 d8       	punpcklwd %xmm8,%xmm3
   134c3:	66 0f 70 db 4e       	pshufd $0x4e,%xmm3,%xmm3
   134c8:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   134cd:	66 0f 72 f0 02       	pslld  $0x2,%xmm0
   134d2:	66 41 0f fa c3       	psubd  %xmm11,%xmm0
   134d7:	66 0f 72 f0 02       	pslld  $0x2,%xmm0
   134dc:	66 41 0f fe c3       	paddd  %xmm11,%xmm0
   134e1:	66 45 0f 6f da       	movdqa %xmm10,%xmm11
   134e6:	66 41 0f 72 f3 04    	pslld  $0x4,%xmm11
   134ec:	66 45 0f fa da       	psubd  %xmm10,%xmm11
   134f1:	66 44 0f 6f d1       	movdqa %xmm1,%xmm10
   134f6:	66 41 0f 72 f2 03    	pslld  $0x3,%xmm10
   134fc:	66 44 0f fa d1       	psubd  %xmm1,%xmm10
   13501:	66 41 0f 72 f3 01    	pslld  $0x1,%xmm11
   13507:	66 41 0f fe c3       	paddd  %xmm11,%xmm0
   1350c:	66 41 0f 72 f2 02    	pslld  $0x2,%xmm10
   13512:	66 41 0f fe ca       	paddd  %xmm10,%xmm1
   13517:	66 0f fe c1          	paddd  %xmm1,%xmm0
   1351b:	66 41 0f 6f c9       	movdqa %xmm9,%xmm1
   13520:	66 0f 72 f1 02       	pslld  $0x2,%xmm1
   13525:	66 41 0f fe c9       	paddd  %xmm9,%xmm1
   1352a:	66 0f 72 e0 08       	psrad  $0x8,%xmm0
   1352f:	66 0f 72 f1 02       	pslld  $0x2,%xmm1
   13534:	66 41 0f fa c9       	psubd  %xmm9,%xmm1
   13539:	66 0f 72 f1 02       	pslld  $0x2,%xmm1
   1353e:	66 41 0f fe c9       	paddd  %xmm9,%xmm1
   13543:	66 44 0f 6f cc       	movdqa %xmm4,%xmm9
   13548:	66 41 0f 72 f1 04    	pslld  $0x4,%xmm9
   1354e:	66 44 0f fa cc       	psubd  %xmm4,%xmm9
   13553:	66 0f 6f e3          	movdqa %xmm3,%xmm4
   13557:	66 0f 72 f4 03       	pslld  $0x3,%xmm4
   1355c:	66 0f fa e3          	psubd  %xmm3,%xmm4
   13560:	66 41 0f 72 f1 01    	pslld  $0x1,%xmm9
   13566:	66 41 0f fe c9       	paddd  %xmm9,%xmm1
   1356b:	66 0f 72 f4 02       	pslld  $0x2,%xmm4
   13570:	66 0f fe dc          	paddd  %xmm4,%xmm3
   13574:	66 0f fe cb          	paddd  %xmm3,%xmm1
   13578:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   1357c:	66 0f 72 e1 08       	psrad  $0x8,%xmm1
   13581:	66 0f 61 d9          	punpcklwd %xmm1,%xmm3
   13585:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
   13589:	66 0f 70 db 4e       	pshufd $0x4e,%xmm3,%xmm3
   1358e:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   13592:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   13596:	66 0f 61 c2          	punpcklwd %xmm2,%xmm0
   1359a:	66 0f 61 ca          	punpcklwd %xmm2,%xmm1
   1359e:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   135a3:	66 0f d6 08          	movq   %xmm1,(%rax)
   135a7:	66 0f d6 40 08       	movq   %xmm0,0x8(%rax)
   135ac:	f6 c1 03             	test   $0x3,%cl
   135af:	0f 84 ad 00 00 00    	je     13662 <_ZL22stbi__convert_format16Ptiijj.part.0+0x632>
   135b5:	83 e1 fc             	and    $0xfffffffc,%ecx
   135b8:	89 c8                	mov    %ecx,%eax
   135ba:	29 ca                	sub    %ecx,%edx
   135bc:	4d 8d 14 c2          	lea    (%r10,%rax,8),%r10
   135c0:	4d 8d 1c 83          	lea    (%r11,%rax,4),%r11
   135c4:	41 0f b7 02          	movzwl (%r10),%eax
   135c8:	41 0f b7 4a 02       	movzwl 0x2(%r10),%ecx
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   135cd:	6b c0 4d             	imul   $0x4d,%eax,%eax
   135d0:	69 c9 96 00 00 00    	imul   $0x96,%ecx,%ecx
   135d6:	01 c8                	add    %ecx,%eax
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   135d8:	41 0f b7 4a 04       	movzwl 0x4(%r10),%ecx
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   135dd:	6b c9 1d             	imul   $0x1d,%ecx,%ecx
   135e0:	01 c8                	add    %ecx,%eax
   135e2:	c1 f8 08             	sar    $0x8,%eax
   135e5:	66 41 89 03          	mov    %ax,(%r11)
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   135e9:	41 0f b7 42 06       	movzwl 0x6(%r10),%eax
   135ee:	66 41 89 43 02       	mov    %ax,0x2(%r11)
   135f3:	85 d2                	test   %edx,%edx
   135f5:	74 6b                	je     13662 <_ZL22stbi__convert_format16Ptiijj.part.0+0x632>
   135f7:	41 0f b7 42 0a       	movzwl 0xa(%r10),%eax
   135fc:	41 0f b7 4a 08       	movzwl 0x8(%r10),%ecx
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13601:	69 c0 96 00 00 00    	imul   $0x96,%eax,%eax
   13607:	6b c9 4d             	imul   $0x4d,%ecx,%ecx
   1360a:	01 c8                	add    %ecx,%eax
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1360c:	41 0f b7 4a 0c       	movzwl 0xc(%r10),%ecx
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13611:	6b c9 1d             	imul   $0x1d,%ecx,%ecx
   13614:	01 c8                	add    %ecx,%eax
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   13616:	41 0f b7 4a 0e       	movzwl 0xe(%r10),%ecx
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   1361b:	c1 f8 08             	sar    $0x8,%eax
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1361e:	0f b7 c0             	movzwl %ax,%eax
   13621:	c1 e1 10             	shl    $0x10,%ecx
   13624:	09 c1                	or     %eax,%ecx
   13626:	41 89 4b 04          	mov    %ecx,0x4(%r11)
   1362a:	83 fa 01             	cmp    $0x1,%edx
   1362d:	74 33                	je     13662 <_ZL22stbi__convert_format16Ptiijj.part.0+0x632>
   1362f:	41 0f b7 42 10       	movzwl 0x10(%r10),%eax
   13634:	41 0f b7 52 12       	movzwl 0x12(%r10),%edx
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13639:	6b c0 4d             	imul   $0x4d,%eax,%eax
   1363c:	69 d2 96 00 00 00    	imul   $0x96,%edx,%edx
   13642:	01 d0                	add    %edx,%eax
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   13644:	41 0f b7 52 14       	movzwl 0x14(%r10),%edx
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13649:	6b d2 1d             	imul   $0x1d,%edx,%edx
   1364c:	01 d0                	add    %edx,%eax
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1364e:	41 0f b7 52 16       	movzwl 0x16(%r10),%edx
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13653:	c1 f8 08             	sar    $0x8,%eax
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   13656:	0f b7 c0             	movzwl %ax,%eax
   13659:	c1 e2 10             	shl    $0x10,%edx
   1365c:	09 c2                	or     %eax,%edx
   1365e:	41 89 53 08          	mov    %edx,0x8(%r11)
   for (j=0; j < (int) y; ++j) {
   13662:	8b 44 24 30          	mov    0x30(%rsp),%eax
   13666:	41 83 c6 01          	add    $0x1,%r14d
   1366a:	41 01 c7             	add    %eax,%r15d
   1366d:	8b 44 24 0c          	mov    0xc(%rsp),%eax
   13671:	01 c7                	add    %eax,%edi
   13673:	44 39 74 24 10       	cmp    %r14d,0x10(%rsp)
   13678:	0f 84 ca 11 00 00    	je     14848 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1818>
      stbi__uint16 *src  = data + j * x * img_n   ;
   1367e:	44 89 fd             	mov    %r15d,%ebp
      stbi__uint16 *dest = good + j * x * req_comp;
   13681:	41 89 fc             	mov    %edi,%r12d
      stbi__uint16 *src  = data + j * x * img_n   ;
   13684:	4c 8d 14 6b          	lea    (%rbx,%rbp,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   13688:	4f 8d 1c 61          	lea    (%r9,%r12,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   1368c:	e9 17 fb ff ff       	jmp    131a8 <_ZL22stbi__convert_format16Ptiijj.part.0+0x178>
   13691:	8b 44 24 14          	mov    0x14(%rsp),%eax
   13695:	44 89 74 24 28       	mov    %r14d,0x28(%rsp)
   1369a:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
   1369f:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
   136a4:	8d 78 ff             	lea    -0x1(%rax),%edi
   136a7:	83 e8 02             	sub    $0x2,%eax
   136aa:	44 89 7c 24 34       	mov    %r15d,0x34(%rsp)
   136af:	89 44 24 60          	mov    %eax,0x60(%rsp)
   136b3:	4c 89 4c 24 68       	mov    %r9,0x68(%rsp)
   136b8:	89 5c 24 64          	mov    %ebx,0x64(%rsp)
   136bc:	89 fb                	mov    %edi,%ebx
   136be:	66 90                	xchg   %ax,%ax
         STBI__CASE(3,4) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];dest[3]=0xffff;        } break;
   136c0:	89 df                	mov    %ebx,%edi
   136c2:	85 db                	test   %ebx,%ebx
   136c4:	0f 88 50 12 00 00    	js     1491a <_ZL22stbi__convert_format16Ptiijj.part.0+0x18ea>
   136ca:	83 7c 24 60 ff       	cmpl   $0xffffffff,0x60(%rsp)
   136cf:	41 b9 01 00 00 00    	mov    $0x1,%r9d
   136d5:	44 0f 4d 4c 24 14    	cmovge 0x14(%rsp),%r9d
   136db:	83 fb 06             	cmp    $0x6,%ebx
   136de:	0f 86 4e 12 00 00    	jbe    14932 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1902>
   136e4:	45 89 c8             	mov    %r9d,%r8d
   136e7:	4c 89 5c 24 38       	mov    %r11,0x38(%rsp)
   136ec:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
   136f1:	4c 89 d8             	mov    %r11,%rax
   136f4:	41 c1 e8 03          	shr    $0x3,%r8d
   136f8:	4c 89 64 24 40       	mov    %r12,0x40(%rsp)
   136fd:	49 8d 4c 0d 06       	lea    0x6(%r13,%rcx,1),%rcx
   13702:	48 89 6c 24 48       	mov    %rbp,0x48(%rsp)
   13707:	49 c1 e0 06          	shl    $0x6,%r8
   1370b:	44 89 4c 24 58       	mov    %r9d,0x58(%rsp)
   13710:	4d 01 d8             	add    %r11,%r8
   13713:	4c 89 6c 24 50       	mov    %r13,0x50(%rsp)
   13718:	89 5c 24 5c          	mov    %ebx,0x5c(%rsp)
   1371c:	0f 1f 40 00          	nopl   0x0(%rax)
   13720:	0f b7 72 20          	movzwl 0x20(%rdx),%esi
   13724:	0f b7 7a 1e          	movzwl 0x1e(%rdx),%edi
   13728:	48 83 c0 40          	add    $0x40,%rax
   1372c:	48 83 c2 30          	add    $0x30,%rdx
   13730:	44 0f b7 72 da       	movzwl -0x26(%rdx),%r14d
   13735:	44 0f b7 7a d4       	movzwl -0x2c(%rdx),%r15d
   1373a:	48 83 c1 40          	add    $0x40,%rcx
   1373e:	44 0f b7 62 e6       	movzwl -0x1a(%rdx),%r12d
   13743:	44 0f b7 6a e0       	movzwl -0x20(%rdx),%r13d
   13748:	c1 e6 10             	shl    $0x10,%esi
   1374b:	44 0f b7 4a fe       	movzwl -0x2(%rdx),%r9d
   13750:	44 0f b7 52 f8       	movzwl -0x8(%rdx),%r10d
   13755:	09 fe                	or     %edi,%esi
   13757:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   1375c:	66 0f 6e 6a d6       	movd   -0x2a(%rdx),%xmm5
   13761:	66 0f 6e 62 dc       	movd   -0x24(%rdx),%xmm4
   13766:	0f b7 6a ec          	movzwl -0x14(%rdx),%ebp
   1376a:	66 0f 6e 52 e8       	movd   -0x18(%rdx),%xmm2
   1376f:	66 0f 6e 5a e2       	movd   -0x1e(%rdx),%xmm3
   13774:	66 0f 6e 42 fa       	movd   -0x6(%rdx),%xmm0
   13779:	66 0f 6e 4a f4       	movd   -0xc(%rdx),%xmm1
   1377e:	44 0f b7 5a f2       	movzwl -0xe(%rdx),%r11d
   13783:	8b 5a d0             	mov    -0x30(%rdx),%ebx
   13786:	66 44 89 78 c4       	mov    %r15w,-0x3c(%rax)
   1378b:	41 bf ff ff ff ff    	mov    $0xffffffff,%r15d
   13791:	66 44 89 70 cc       	mov    %r14w,-0x34(%rax)
   13796:	41 be ff ff ff ff    	mov    $0xffffffff,%r14d
   1379c:	66 44 89 68 d4       	mov    %r13w,-0x2c(%rax)
   137a1:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
   137a7:	66 44 89 60 dc       	mov    %r12w,-0x24(%rax)
   137ac:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
   137b2:	89 70 e8             	mov    %esi,-0x18(%rax)
   137b5:	be ff ff ff ff       	mov    $0xffffffff,%esi
   137ba:	66 44 89 50 f4       	mov    %r10w,-0xc(%rax)
   137bf:	41 ba ff ff ff ff    	mov    $0xffffffff,%r10d
   137c5:	89 58 c0             	mov    %ebx,-0x40(%rax)
   137c8:	66 0f 7e 68 c8       	movd   %xmm5,-0x38(%rax)
   137cd:	66 0f 7e 60 d0       	movd   %xmm4,-0x30(%rax)
   137d2:	66 0f 7e 58 d8       	movd   %xmm3,-0x28(%rax)
   137d7:	66 0f 7e 50 e0       	movd   %xmm2,-0x20(%rax)
   137dc:	66 89 68 e4          	mov    %bp,-0x1c(%rax)
   137e0:	66 44 89 58 ec       	mov    %r11w,-0x14(%rax)
   137e5:	66 0f 7e 48 f0       	movd   %xmm1,-0x10(%rax)
   137ea:	66 0f 7e 40 f8       	movd   %xmm0,-0x8(%rax)
   137ef:	66 44 89 48 fc       	mov    %r9w,-0x4(%rax)
   137f4:	41 b9 ff ff ff ff    	mov    $0xffffffff,%r9d
   137fa:	66 44 89 61 c0       	mov    %r12w,-0x40(%rcx)
   137ff:	66 44 89 69 c8       	mov    %r13w,-0x38(%rcx)
   13804:	66 44 89 71 d0       	mov    %r14w,-0x30(%rcx)
   13809:	66 44 89 79 d8       	mov    %r15w,-0x28(%rcx)
   1380e:	66 89 71 e0          	mov    %si,-0x20(%rcx)
   13812:	66 89 79 e8          	mov    %di,-0x18(%rcx)
   13816:	66 44 89 49 f0       	mov    %r9w,-0x10(%rcx)
   1381b:	66 44 89 51 f8       	mov    %r10w,-0x8(%rcx)
   13820:	4c 39 c0             	cmp    %r8,%rax
   13823:	0f 85 f7 fe ff ff    	jne    13720 <_ZL22stbi__convert_format16Ptiijj.part.0+0x6f0>
   13829:	44 8b 4c 24 58       	mov    0x58(%rsp),%r9d
   1382e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   13833:	8b 5c 24 5c          	mov    0x5c(%rsp),%ebx
   13837:	4c 8b 5c 24 38       	mov    0x38(%rsp),%r11
   1383c:	44 89 c8             	mov    %r9d,%eax
   1383f:	4c 8b 64 24 40       	mov    0x40(%rsp),%r12
   13844:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
   13849:	83 e0 f8             	and    $0xfffffff8,%eax
   1384c:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
   13851:	89 c2                	mov    %eax,%edx
   13853:	48 8d 0c 52          	lea    (%rdx,%rdx,2),%rcx
   13857:	4d 8d 1c d3          	lea    (%r11,%rdx,8),%r11
   1385b:	48 8d 3c 4f          	lea    (%rdi,%rcx,2),%rdi
   1385f:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
   13864:	89 df                	mov    %ebx,%edi
   13866:	29 c7                	sub    %eax,%edi
   13868:	41 f6 c1 07          	test   $0x7,%r9b
   1386c:	0f 84 27 01 00 00    	je     13999 <_ZL22stbi__convert_format16Ptiijj.part.0+0x969>
   13872:	44 89 c9             	mov    %r9d,%ecx
   13875:	29 c1                	sub    %eax,%ecx
   13877:	8d 51 ff             	lea    -0x1(%rcx),%edx
   1387a:	83 fa 02             	cmp    $0x2,%edx
   1387d:	0f 86 b1 00 00 00    	jbe    13934 <_ZL22stbi__convert_format16Ptiijj.part.0+0x904>
   13883:	48 8b 34 24          	mov    (%rsp),%rsi
   13887:	48 8d 14 40          	lea    (%rax,%rax,2),%rdx
   1388b:	48 01 ea             	add    %rbp,%rdx
   1388e:	48 8d 14 56          	lea    (%rsi,%rdx,2),%rdx
   13892:	49 8d 34 84          	lea    (%r12,%rax,4),%rsi
   13896:	44 0f b7 42 16       	movzwl 0x16(%rdx),%r8d
   1389b:	44 8b 4a 12          	mov    0x12(%rdx),%r9d
   1389f:	48 01 f6             	add    %rsi,%rsi
   138a2:	44 0f b7 52 10       	movzwl 0x10(%rdx),%r10d
   138a7:	8b 6a 0c             	mov    0xc(%rdx),%ebp
   138aa:	49 8d 44 35 00       	lea    0x0(%r13,%rsi,1),%rax
   138af:	49 8d 74 35 06       	lea    0x6(%r13,%rsi,1),%rsi
   138b4:	44 0f b7 7a 04       	movzwl 0x4(%rdx),%r15d
   138b9:	44 0f b7 62 0a       	movzwl 0xa(%rdx),%r12d
   138be:	44 8b 72 06          	mov    0x6(%rdx),%r14d
   138c2:	8b 12                	mov    (%rdx),%edx
   138c4:	89 68 10             	mov    %ebp,0x10(%rax)
   138c7:	bd ff ff ff ff       	mov    $0xffffffff,%ebp
   138cc:	66 44 89 50 14       	mov    %r10w,0x14(%rax)
   138d1:	41 ba ff ff ff ff    	mov    $0xffffffff,%r10d
   138d7:	44 89 48 18          	mov    %r9d,0x18(%rax)
   138db:	41 b9 ff ff ff ff    	mov    $0xffffffff,%r9d
   138e1:	66 44 89 40 1c       	mov    %r8w,0x1c(%rax)
   138e6:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
   138ec:	89 10                	mov    %edx,(%rax)
   138ee:	66 44 89 78 04       	mov    %r15w,0x4(%rax)
   138f3:	44 89 70 08          	mov    %r14d,0x8(%rax)
   138f7:	66 44 89 60 0c       	mov    %r12w,0xc(%rax)
   138fc:	66 44 89 06          	mov    %r8w,(%rsi)
   13900:	66 44 89 4e 08       	mov    %r9w,0x8(%rsi)
   13905:	66 44 89 56 10       	mov    %r10w,0x10(%rsi)
   1390a:	66 89 6e 18          	mov    %bp,0x18(%rsi)
   1390e:	f6 c1 03             	test   $0x3,%cl
   13911:	0f 84 82 00 00 00    	je     13999 <_ZL22stbi__convert_format16Ptiijj.part.0+0x969>
   13917:	83 e1 fc             	and    $0xfffffffc,%ecx
   1391a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   1391f:	89 c8                	mov    %ecx,%eax
   13921:	29 cf                	sub    %ecx,%edi
   13923:	48 8d 14 40          	lea    (%rax,%rax,2),%rdx
   13927:	4d 8d 1c c3          	lea    (%r11,%rax,8),%r11
   1392b:	48 8d 14 56          	lea    (%rsi,%rdx,2),%rdx
   1392f:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
   13934:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
   13939:	be ff ff ff ff       	mov    $0xffffffff,%esi
   1393e:	0f b7 02             	movzwl (%rdx),%eax
   13941:	66 41 89 03          	mov    %ax,(%r11)
   13945:	0f b7 42 02          	movzwl 0x2(%rdx),%eax
   13949:	66 41 89 43 02       	mov    %ax,0x2(%r11)
   1394e:	0f b7 42 04          	movzwl 0x4(%rdx),%eax
   13952:	66 41 89 73 06       	mov    %si,0x6(%r11)
   13957:	66 41 89 43 04       	mov    %ax,0x4(%r11)
   1395c:	85 ff                	test   %edi,%edi
   1395e:	74 39                	je     13999 <_ZL22stbi__convert_format16Ptiijj.part.0+0x969>
   13960:	8b 42 06             	mov    0x6(%rdx),%eax
   13963:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   13968:	41 89 43 08          	mov    %eax,0x8(%r11)
   1396c:	0f b7 42 0a          	movzwl 0xa(%rdx),%eax
   13970:	66 41 89 4b 0e       	mov    %cx,0xe(%r11)
   13975:	66 41 89 43 0c       	mov    %ax,0xc(%r11)
   1397a:	83 ff 01             	cmp    $0x1,%edi
   1397d:	74 1a                	je     13999 <_ZL22stbi__convert_format16Ptiijj.part.0+0x969>
   1397f:	8b 42 0c             	mov    0xc(%rdx),%eax
   13982:	41 89 43 10          	mov    %eax,0x10(%r11)
   13986:	0f b7 42 10          	movzwl 0x10(%rdx),%eax
   1398a:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   1398f:	66 41 89 53 16       	mov    %dx,0x16(%r11)
   13994:	66 41 89 43 14       	mov    %ax,0x14(%r11)
   for (j=0; j < (int) y; ++j) {
   13999:	83 44 24 28 01       	addl   $0x1,0x28(%rsp)
   1399e:	8b 54 24 30          	mov    0x30(%rsp),%edx
   139a2:	8b 74 24 0c          	mov    0xc(%rsp),%esi
   139a6:	01 54 24 34          	add    %edx,0x34(%rsp)
   139aa:	01 74 24 08          	add    %esi,0x8(%rsp)
   139ae:	8b 44 24 28          	mov    0x28(%rsp),%eax
   139b2:	39 44 24 10          	cmp    %eax,0x10(%rsp)
   139b6:	0f 84 d4 0f 00 00    	je     14990 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1960>
      stbi__uint16 *src  = data + j * x * img_n   ;
   139bc:	8b 6c 24 34          	mov    0x34(%rsp),%ebp
   139c0:	48 8b 04 24          	mov    (%rsp),%rax
      stbi__uint16 *dest = good + j * x * req_comp;
   139c4:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
      stbi__uint16 *src  = data + j * x * img_n   ;
   139c9:	48 8d 04 68          	lea    (%rax,%rbp,2),%rax
      stbi__uint16 *dest = good + j * x * req_comp;
   139cd:	4b 8d 0c 24          	lea    (%r12,%r12,1),%rcx
      stbi__uint16 *src  = data + j * x * img_n   ;
   139d1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      stbi__uint16 *dest = good + j * x * req_comp;
   139d6:	4d 8d 5c 0d 00       	lea    0x0(%r13,%rcx,1),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   139db:	e9 e0 fc ff ff       	jmp    136c0 <_ZL22stbi__convert_format16Ptiijj.part.0+0x690>
   139e0:	8b 6c 24 14          	mov    0x14(%rsp),%ebp
   139e4:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
   139e9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   139ef:	89 5c 24 20          	mov    %ebx,0x20(%rsp)
   139f3:	44 8b 6c 24 30       	mov    0x30(%rsp),%r13d
   139f8:	8b 5c 24 08          	mov    0x8(%rsp),%ebx
   139fc:	44 8d 65 ff          	lea    -0x1(%rbp),%r12d
   13a00:	8d 55 fe             	lea    -0x2(%rbp),%edx
   13a03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
         STBI__CASE(2,3) { dest[0]=dest[1]=dest[2]=src[0];                                     } break;
   13a08:	45 85 e4             	test   %r12d,%r12d
   13a0b:	0f 88 da 0e 00 00    	js     148eb <_ZL22stbi__convert_format16Ptiijj.part.0+0x18bb>
   13a11:	83 fa ff             	cmp    $0xffffffff,%edx
   13a14:	45 89 c1             	mov    %r8d,%r9d
   13a17:	44 0f 4d cd          	cmovge %ebp,%r9d
   13a1b:	83 fd 01             	cmp    $0x1,%ebp
   13a1e:	74 60                	je     13a80 <_ZL22stbi__convert_format16Ptiijj.part.0+0xa50>
   13a20:	44 89 ce             	mov    %r9d,%esi
   13a23:	4c 89 d1             	mov    %r10,%rcx
   13a26:	4c 89 d8             	mov    %r11,%rax
   13a29:	d1 ee                	shr    %esi
   13a2b:	49 8d 3c f2          	lea    (%r10,%rsi,8),%rdi
   13a2f:	90                   	nop
   13a30:	0f b7 31             	movzwl (%rcx),%esi
   13a33:	48 83 c1 08          	add    $0x8,%rcx
   13a37:	48 83 c0 0c          	add    $0xc,%rax
   13a3b:	66 0f 6e c6          	movd   %esi,%xmm0
   13a3f:	0f b7 71 fc          	movzwl -0x4(%rcx),%esi
   13a43:	f2 0f 70 c8 e0       	pshuflw $0xe0,%xmm0,%xmm1
   13a48:	66 0f 6e ee          	movd   %esi,%xmm5
   13a4c:	66 0f c4 c6 01       	pinsrw $0x1,%esi,%xmm0
   13a51:	66 0f 7e 48 f4       	movd   %xmm1,-0xc(%rax)
   13a56:	66 0f 7e 40 f8       	movd   %xmm0,-0x8(%rax)
   13a5b:	f2 0f 70 c5 00       	pshuflw $0x0,%xmm5,%xmm0
   13a60:	66 0f 7e 40 fc       	movd   %xmm0,-0x4(%rax)
   13a65:	48 39 f9             	cmp    %rdi,%rcx
   13a68:	75 c6                	jne    13a30 <_ZL22stbi__convert_format16Ptiijj.part.0+0xa00>
   13a6a:	41 f6 c1 01          	test   $0x1,%r9b
   13a6e:	74 27                	je     13a97 <_ZL22stbi__convert_format16Ptiijj.part.0+0xa67>
   13a70:	41 83 e1 fe          	and    $0xfffffffe,%r9d
   13a74:	4b 8d 04 49          	lea    (%r9,%r9,2),%rax
   13a78:	4f 8d 14 8a          	lea    (%r10,%r9,4),%r10
   13a7c:	4d 8d 1c 43          	lea    (%r11,%rax,2),%r11
   13a80:	41 0f b7 02          	movzwl (%r10),%eax
   13a84:	66 0f 6e f0          	movd   %eax,%xmm6
   13a88:	66 41 89 43 04       	mov    %ax,0x4(%r11)
   13a8d:	f2 0f 70 c6 00       	pshuflw $0x0,%xmm6,%xmm0
   13a92:	66 41 0f 7e 03       	movd   %xmm0,(%r11)
   for (j=0; j < (int) y; ++j) {
   13a97:	8b 44 24 0c          	mov    0xc(%rsp),%eax
   13a9b:	41 83 c6 01          	add    $0x1,%r14d
   13a9f:	45 01 ef             	add    %r13d,%r15d
   13aa2:	01 c3                	add    %eax,%ebx
   13aa4:	44 39 74 24 10       	cmp    %r14d,0x10(%rsp)
   13aa9:	0f 84 9e f6 ff ff    	je     1314d <_ZL22stbi__convert_format16Ptiijj.part.0+0x11d>
      stbi__uint16 *src  = data + j * x * img_n   ;
   13aaf:	48 8b 3c 24          	mov    (%rsp),%rdi
   13ab3:	44 89 f8             	mov    %r15d,%eax
   13ab6:	4c 8d 14 47          	lea    (%rdi,%rax,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   13aba:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   13abf:	89 d8                	mov    %ebx,%eax
   13ac1:	4c 8d 1c 47          	lea    (%rdi,%rax,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   13ac5:	e9 3e ff ff ff       	jmp    13a08 <_ZL22stbi__convert_format16Ptiijj.part.0+0x9d8>
   13aca:	8b 44 24 14          	mov    0x14(%rsp),%eax
   13ace:	89 da                	mov    %ebx,%edx
   13ad0:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
   13ad5:	8b 74 24 08          	mov    0x8(%rsp),%esi
   13ad9:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
   13ade:	4c 8b 2c 24          	mov    (%rsp),%r13
   13ae2:	8b 6c 24 10          	mov    0x10(%rsp),%ebp
   13ae6:	8d 78 ff             	lea    -0x1(%rax),%edi
   13ae9:	8b 5c 24 30          	mov    0x30(%rsp),%ebx
   13aed:	0f 1f 00             	nopl   (%rax)
         STBI__CASE(3,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   13af0:	89 f9                	mov    %edi,%ecx
   13af2:	85 ff                	test   %edi,%edi
   13af4:	0f 88 1e 0d 00 00    	js     14818 <_ZL22stbi__convert_format16Ptiijj.part.0+0x17e8>
   13afa:	44 89 74 24 08       	mov    %r14d,0x8(%rsp)
   13aff:	90                   	nop
   13b00:	41 0f b7 02          	movzwl (%r10),%eax
   13b04:	45 0f b7 72 02       	movzwl 0x2(%r10),%r14d
   13b09:	83 e9 01             	sub    $0x1,%ecx
   13b0c:	49 83 c2 06          	add    $0x6,%r10
   13b10:	49 83 c3 02          	add    $0x2,%r11
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13b14:	45 69 f6 96 00 00 00 	imul   $0x96,%r14d,%r14d
   13b1b:	6b c0 4d             	imul   $0x4d,%eax,%eax
   13b1e:	44 01 f0             	add    %r14d,%eax
         STBI__CASE(3,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   13b21:	45 0f b7 72 fe       	movzwl -0x2(%r10),%r14d
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13b26:	45 6b f6 1d          	imul   $0x1d,%r14d,%r14d
   13b2a:	44 01 f0             	add    %r14d,%eax
   13b2d:	c1 f8 08             	sar    $0x8,%eax
   13b30:	66 41 89 43 fe       	mov    %ax,-0x2(%r11)
         STBI__CASE(3,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   13b35:	83 f9 ff             	cmp    $0xffffffff,%ecx
   13b38:	75 c6                	jne    13b00 <_ZL22stbi__convert_format16Ptiijj.part.0+0xad0>
   13b3a:	44 8b 74 24 08       	mov    0x8(%rsp),%r14d
   for (j=0; j < (int) y; ++j) {
   13b3f:	41 01 df             	add    %ebx,%r15d
   13b42:	44 01 c6             	add    %r8d,%esi
   13b45:	41 83 c6 01          	add    $0x1,%r14d
   13b49:	44 39 f5             	cmp    %r14d,%ebp
   13b4c:	0f 84 7e 0d 00 00    	je     148d0 <_ZL22stbi__convert_format16Ptiijj.part.0+0x18a0>
      stbi__uint16 *src  = data + j * x * img_n   ;
   13b52:	44 89 f8             	mov    %r15d,%eax
   13b55:	4d 8d 54 45 00       	lea    0x0(%r13,%rax,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   13b5a:	89 f0                	mov    %esi,%eax
   13b5c:	4d 8d 1c 44          	lea    (%r12,%rax,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   13b60:	eb 8e                	jmp    13af0 <_ZL22stbi__convert_format16Ptiijj.part.0+0xac0>
   13b62:	8b 44 24 14          	mov    0x14(%rsp),%eax
   13b66:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
   13b6b:	ba 01 00 00 00       	mov    $0x1,%edx
   13b70:	44 8b 64 24 30       	mov    0x30(%rsp),%r12d
   13b75:	44 8b 6c 24 10       	mov    0x10(%rsp),%r13d
   13b7a:	89 5c 24 20          	mov    %ebx,0x20(%rsp)
   13b7e:	44 8b 4c 24 08       	mov    0x8(%rsp),%r9d
   13b83:	8d 68 ff             	lea    -0x1(%rax),%ebp
   13b86:	44 8d 40 fe          	lea    -0x2(%rax),%r8d
   13b8a:	89 c3                	mov    %eax,%ebx
   13b8c:	0f 1f 40 00          	nopl   0x0(%rax)
         STBI__CASE(1,3) { dest[0]=dest[1]=dest[2]=src[0];                                     } break;
   13b90:	85 ed                	test   %ebp,%ebp
   13b92:	0f 88 65 0d 00 00    	js     148fd <_ZL22stbi__convert_format16Ptiijj.part.0+0x18cd>
   13b98:	41 83 f8 ff          	cmp    $0xffffffff,%r8d
   13b9c:	89 d7                	mov    %edx,%edi
   13b9e:	0f 4d fb             	cmovge %ebx,%edi
   13ba1:	83 fb 01             	cmp    $0x1,%ebx
   13ba4:	74 5c                	je     13c02 <_ZL22stbi__convert_format16Ptiijj.part.0+0xbd2>
   13ba6:	89 fe                	mov    %edi,%esi
   13ba8:	4c 89 d1             	mov    %r10,%rcx
   13bab:	4c 89 d8             	mov    %r11,%rax
   13bae:	d1 ee                	shr    %esi
   13bb0:	49 8d 34 b2          	lea    (%r10,%rsi,4),%rsi
   13bb4:	0f 1f 40 00          	nopl   0x0(%rax)
   13bb8:	66 0f 6e 01          	movd   (%rcx),%xmm0
   13bbc:	48 83 c1 04          	add    $0x4,%rcx
   13bc0:	48 83 c0 0c          	add    $0xc,%rax
   13bc4:	f2 0f 70 c8 e0       	pshuflw $0xe0,%xmm0,%xmm1
   13bc9:	66 0f 7e 40 f8       	movd   %xmm0,-0x8(%rax)
   13bce:	66 0f 7e 48 f4       	movd   %xmm1,-0xc(%rax)
   13bd3:	f2 0f 70 c8 e1       	pshuflw $0xe1,%xmm0,%xmm1
   13bd8:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
   13bdc:	f2 0f 70 c9 ec       	pshuflw $0xec,%xmm1,%xmm1
   13be1:	66 0f 7e 48 fc       	movd   %xmm1,-0x4(%rax)
   13be6:	48 39 ce             	cmp    %rcx,%rsi
   13be9:	75 cd                	jne    13bb8 <_ZL22stbi__convert_format16Ptiijj.part.0+0xb88>
   13beb:	40 f6 c7 01          	test   $0x1,%dil
   13bef:	74 28                	je     13c19 <_ZL22stbi__convert_format16Ptiijj.part.0+0xbe9>
   13bf1:	83 e7 fe             	and    $0xfffffffe,%edi
   13bf4:	48 8d 04 3f          	lea    (%rdi,%rdi,1),%rax
   13bf8:	49 01 c2             	add    %rax,%r10
   13bfb:	48 01 f8             	add    %rdi,%rax
   13bfe:	4d 8d 1c 43          	lea    (%r11,%rax,2),%r11
   13c02:	41 0f b7 02          	movzwl (%r10),%eax
   13c06:	66 0f 6e f0          	movd   %eax,%xmm6
   13c0a:	66 41 89 43 04       	mov    %ax,0x4(%r11)
   13c0f:	f2 0f 70 c6 00       	pshuflw $0x0,%xmm6,%xmm0
   13c14:	66 41 0f 7e 03       	movd   %xmm0,(%r11)
   for (j=0; j < (int) y; ++j) {
   13c19:	8b 44 24 0c          	mov    0xc(%rsp),%eax
   13c1d:	41 83 c6 01          	add    $0x1,%r14d
   13c21:	45 01 e7             	add    %r12d,%r15d
   13c24:	41 01 c1             	add    %eax,%r9d
   13c27:	45 39 ee             	cmp    %r13d,%r14d
   13c2a:	0f 84 1d f5 ff ff    	je     1314d <_ZL22stbi__convert_format16Ptiijj.part.0+0x11d>
      stbi__uint16 *src  = data + j * x * img_n   ;
   13c30:	48 8b 3c 24          	mov    (%rsp),%rdi
   13c34:	44 89 f8             	mov    %r15d,%eax
   13c37:	4c 8d 14 47          	lea    (%rdi,%rax,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   13c3b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   13c40:	44 89 c8             	mov    %r9d,%eax
   13c43:	4c 8d 1c 47          	lea    (%rdi,%rax,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   13c47:	e9 44 ff ff ff       	jmp    13b90 <_ZL22stbi__convert_format16Ptiijj.part.0+0xb60>
   13c4c:	8b 44 24 14          	mov    0x14(%rsp),%eax
   13c50:	89 da                	mov    %ebx,%edx
   13c52:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
   13c57:	8b 74 24 08          	mov    0x8(%rsp),%esi
   13c5b:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
   13c60:	4c 8b 2c 24          	mov    (%rsp),%r13
   13c64:	8b 6c 24 10          	mov    0x10(%rsp),%ebp
   13c68:	8d 78 ff             	lea    -0x1(%rax),%edi
   13c6b:	8b 5c 24 30          	mov    0x30(%rsp),%ebx
   13c6f:	90                   	nop
         STBI__CASE(3,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = 0xffff; } break;
   13c70:	89 f9                	mov    %edi,%ecx
   13c72:	85 ff                	test   %edi,%edi
   13c74:	0f 88 9e 0b 00 00    	js     14818 <_ZL22stbi__convert_format16Ptiijj.part.0+0x17e8>
   13c7a:	44 89 74 24 08       	mov    %r14d,0x8(%rsp)
   13c7f:	90                   	nop
   13c80:	41 0f b7 02          	movzwl (%r10),%eax
   13c84:	45 0f b7 72 02       	movzwl 0x2(%r10),%r14d
   13c89:	83 e9 01             	sub    $0x1,%ecx
   13c8c:	49 83 c2 06          	add    $0x6,%r10
   13c90:	49 83 c3 04          	add    $0x4,%r11
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13c94:	45 69 f6 96 00 00 00 	imul   $0x96,%r14d,%r14d
   13c9b:	6b c0 4d             	imul   $0x4d,%eax,%eax
   13c9e:	44 01 f0             	add    %r14d,%eax
         STBI__CASE(3,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = 0xffff; } break;
   13ca1:	45 0f b7 72 fe       	movzwl -0x2(%r10),%r14d
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   13ca6:	45 6b f6 1d          	imul   $0x1d,%r14d,%r14d
   13caa:	44 01 f0             	add    %r14d,%eax
   13cad:	c1 f8 08             	sar    $0x8,%eax
   13cb0:	66 41 89 43 fc       	mov    %ax,-0x4(%r11)
         STBI__CASE(3,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = 0xffff; } break;
   13cb5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13cba:	66 41 89 43 fe       	mov    %ax,-0x2(%r11)
   13cbf:	83 f9 ff             	cmp    $0xffffffff,%ecx
   13cc2:	75 bc                	jne    13c80 <_ZL22stbi__convert_format16Ptiijj.part.0+0xc50>
   13cc4:	44 8b 74 24 08       	mov    0x8(%rsp),%r14d
   for (j=0; j < (int) y; ++j) {
   13cc9:	41 01 df             	add    %ebx,%r15d
   13ccc:	44 01 c6             	add    %r8d,%esi
   13ccf:	41 83 c6 01          	add    $0x1,%r14d
   13cd3:	44 39 f5             	cmp    %r14d,%ebp
   13cd6:	0f 84 f4 0b 00 00    	je     148d0 <_ZL22stbi__convert_format16Ptiijj.part.0+0x18a0>
      stbi__uint16 *src  = data + j * x * img_n   ;
   13cdc:	44 89 f8             	mov    %r15d,%eax
   13cdf:	4d 8d 54 45 00       	lea    0x0(%r13,%rax,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   13ce4:	89 f0                	mov    %esi,%eax
   13ce6:	4d 8d 1c 44          	lea    (%r12,%rax,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   13cea:	eb 84                	jmp    13c70 <_ZL22stbi__convert_format16Ptiijj.part.0+0xc40>
   13cec:	8b 44 24 14          	mov    0x14(%rsp),%eax
   13cf0:	8b 7c 24 08          	mov    0x8(%rsp),%edi
   13cf4:	89 5c 24 20          	mov    %ebx,0x20(%rsp)
   13cf8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   13cfe:	4c 8b 2c 24          	mov    (%rsp),%r13
   13d02:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
   13d07:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
   13d0c:	8d 50 fe             	lea    -0x2(%rax),%edx
   13d0f:	8d 70 ff             	lea    -0x1(%rax),%esi
   13d12:	89 54 24 08          	mov    %edx,0x8(%rsp)
   13d16:	41 89 f1             	mov    %esi,%r9d
   13d19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
         STBI__CASE(2,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=src[1];                     } break;
   13d20:	45 85 c9             	test   %r9d,%r9d
   13d23:	0f 88 f7 f3 ff ff    	js     13120 <_ZL22stbi__convert_format16Ptiijj.part.0+0xf0>
   13d29:	8b 74 24 14          	mov    0x14(%rsp),%esi
   13d2d:	83 7c 24 08 ff       	cmpl   $0xffffffff,0x8(%rsp)
   13d32:	41 0f 4c f0          	cmovl  %r8d,%esi
   13d36:	41 83 f9 06          	cmp    $0x6,%r9d
   13d3a:	0f 86 f9 0b 00 00    	jbe    14939 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1909>
   13d40:	89 f1                	mov    %esi,%ecx
   13d42:	4c 89 d2             	mov    %r10,%rdx
   13d45:	4c 89 d8             	mov    %r11,%rax
   13d48:	c1 e9 03             	shr    $0x3,%ecx
   13d4b:	48 c1 e1 05          	shl    $0x5,%rcx
   13d4f:	4c 01 d1             	add    %r10,%rcx
   13d52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   13d58:	f3 0f 6f 0a          	movdqu (%rdx),%xmm1
   13d5c:	f3 0f 6f 5a 10       	movdqu 0x10(%rdx),%xmm3
   13d61:	48 83 c2 20          	add    $0x20,%rdx
   13d65:	48 83 c0 40          	add    $0x40,%rax
   13d69:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   13d6d:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   13d71:	66 0f 61 cb          	punpcklwd %xmm3,%xmm1
   13d75:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   13d79:	66 0f 69 d3          	punpckhwd %xmm3,%xmm2
   13d7d:	66 0f 6f e0          	movdqa %xmm0,%xmm4
   13d81:	66 0f 61 c2          	punpcklwd %xmm2,%xmm0
   13d85:	66 0f 61 ca          	punpcklwd %xmm2,%xmm1
   13d89:	66 0f 69 e2          	punpckhwd %xmm2,%xmm4
   13d8d:	66 0f 61 c4          	punpcklwd %xmm4,%xmm0
   13d91:	66 0f 69 cc          	punpckhwd %xmm4,%xmm1
   13d95:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   13d99:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   13d9d:	66 0f 6f e0          	movdqa %xmm0,%xmm4
   13da1:	66 0f 61 d8          	punpcklwd %xmm0,%xmm3
   13da5:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
   13da9:	66 0f 61 e1          	punpcklwd %xmm1,%xmm4
   13dad:	66 0f 69 c1          	punpckhwd %xmm1,%xmm0
   13db1:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   13db5:	66 0f 69 dc          	punpckhwd %xmm4,%xmm3
   13db9:	66 0f 61 cc          	punpcklwd %xmm4,%xmm1
   13dbd:	0f 11 58 d0          	movups %xmm3,-0x30(%rax)
   13dc1:	0f 11 48 c0          	movups %xmm1,-0x40(%rax)
   13dc5:	66 0f 6f ca          	movdqa %xmm2,%xmm1
   13dc9:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
   13dcd:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
   13dd1:	0f 11 50 f0          	movups %xmm2,-0x10(%rax)
   13dd5:	0f 11 48 e0          	movups %xmm1,-0x20(%rax)
   13dd9:	48 39 d1             	cmp    %rdx,%rcx
   13ddc:	0f 85 76 ff ff ff    	jne    13d58 <_ZL22stbi__convert_format16Ptiijj.part.0+0xd28>
   13de2:	89 f2                	mov    %esi,%edx
   13de4:	83 e2 f8             	and    $0xfffffff8,%edx
   13de7:	89 d0                	mov    %edx,%eax
   13de9:	4d 8d 14 82          	lea    (%r10,%rax,4),%r10
   13ded:	4d 8d 1c c3          	lea    (%r11,%rax,8),%r11
   13df1:	40 f6 c6 07          	test   $0x7,%sil
   13df5:	0f 84 b5 00 00 00    	je     13eb0 <_ZL22stbi__convert_format16Ptiijj.part.0+0xe80>
   13dfb:	29 d6                	sub    %edx,%esi
   13dfd:	83 fe 01             	cmp    $0x1,%esi
   13e00:	0f 84 8e 00 00 00    	je     13e94 <_ZL22stbi__convert_format16Ptiijj.part.0+0xe64>
   13e06:	48 8d 4c 55 00       	lea    0x0(%rbp,%rdx,2),%rcx
   13e0b:	49 8d 14 94          	lea    (%r12,%rdx,4),%rdx
   13e0f:	49 8d 4c 4d 00       	lea    0x0(%r13,%rcx,2),%rcx
   13e14:	48 8d 14 53          	lea    (%rbx,%rdx,2),%rdx
   13e18:	f3 0f 7e 01          	movq   (%rcx),%xmm0
   13e1c:	8d 46 ff             	lea    -0x1(%rsi),%eax
   13e1f:	f2 0f 70 c0 40       	pshuflw $0x40,%xmm0,%xmm0
   13e24:	66 0f d6 02          	movq   %xmm0,(%rdx)
   13e28:	83 fe 02             	cmp    $0x2,%esi
   13e2b:	74 5f                	je     13e8c <_ZL22stbi__convert_format16Ptiijj.part.0+0xe5c>
   13e2d:	f3 0f 7e 41 04       	movq   0x4(%rcx),%xmm0
   13e32:	f2 0f 70 c0 40       	pshuflw $0x40,%xmm0,%xmm0
   13e37:	66 0f d6 42 08       	movq   %xmm0,0x8(%rdx)
   13e3c:	83 f8 02             	cmp    $0x2,%eax
   13e3f:	74 4b                	je     13e8c <_ZL22stbi__convert_format16Ptiijj.part.0+0xe5c>
   13e41:	f3 0f 7e 41 08       	movq   0x8(%rcx),%xmm0
   13e46:	f2 0f 70 c0 40       	pshuflw $0x40,%xmm0,%xmm0
   13e4b:	66 0f d6 42 10       	movq   %xmm0,0x10(%rdx)
   13e50:	83 f8 03             	cmp    $0x3,%eax
   13e53:	74 37                	je     13e8c <_ZL22stbi__convert_format16Ptiijj.part.0+0xe5c>
   13e55:	f3 0f 7e 41 0c       	movq   0xc(%rcx),%xmm0
   13e5a:	f2 0f 70 c0 40       	pshuflw $0x40,%xmm0,%xmm0
   13e5f:	66 0f d6 42 18       	movq   %xmm0,0x18(%rdx)
   13e64:	83 f8 04             	cmp    $0x4,%eax
   13e67:	74 23                	je     13e8c <_ZL22stbi__convert_format16Ptiijj.part.0+0xe5c>
   13e69:	f3 0f 7e 41 10       	movq   0x10(%rcx),%xmm0
   13e6e:	f2 0f 70 c0 40       	pshuflw $0x40,%xmm0,%xmm0
   13e73:	66 0f d6 42 20       	movq   %xmm0,0x20(%rdx)
   13e78:	83 f8 05             	cmp    $0x5,%eax
   13e7b:	74 0f                	je     13e8c <_ZL22stbi__convert_format16Ptiijj.part.0+0xe5c>
   13e7d:	f3 0f 7e 41 14       	movq   0x14(%rcx),%xmm0
   13e82:	f2 0f 70 c0 40       	pshuflw $0x40,%xmm0,%xmm0
   13e87:	66 0f d6 42 28       	movq   %xmm0,0x28(%rdx)
   13e8c:	4d 8d 14 82          	lea    (%r10,%rax,4),%r10
   13e90:	4d 8d 1c c3          	lea    (%r11,%rax,8),%r11
   13e94:	41 0f b7 02          	movzwl (%r10),%eax
   13e98:	66 41 89 43 04       	mov    %ax,0x4(%r11)
   13e9d:	66 41 89 43 02       	mov    %ax,0x2(%r11)
   13ea2:	66 41 89 03          	mov    %ax,(%r11)
   13ea6:	41 0f b7 42 02       	movzwl 0x2(%r10),%eax
   13eab:	66 41 89 43 06       	mov    %ax,0x6(%r11)
   for (j=0; j < (int) y; ++j) {
   13eb0:	8b 44 24 30          	mov    0x30(%rsp),%eax
   13eb4:	41 83 c6 01          	add    $0x1,%r14d
   13eb8:	41 01 c7             	add    %eax,%r15d
   13ebb:	8b 44 24 0c          	mov    0xc(%rsp),%eax
   13ebf:	01 c7                	add    %eax,%edi
   13ec1:	44 39 74 24 10       	cmp    %r14d,0x10(%rsp)
   13ec6:	0f 84 cc 0a 00 00    	je     14998 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1968>
      stbi__uint16 *src  = data + j * x * img_n   ;
   13ecc:	44 89 fd             	mov    %r15d,%ebp
      stbi__uint16 *dest = good + j * x * req_comp;
   13ecf:	41 89 fc             	mov    %edi,%r12d
      stbi__uint16 *src  = data + j * x * img_n   ;
   13ed2:	4d 8d 54 6d 00       	lea    0x0(%r13,%rbp,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   13ed7:	4e 8d 1c 63          	lea    (%rbx,%r12,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   13edb:	e9 40 fe ff ff       	jmp    13d20 <_ZL22stbi__convert_format16Ptiijj.part.0+0xcf0>
   13ee0:	8b 44 24 14          	mov    0x14(%rsp),%eax
   13ee4:	8b 7c 24 0c          	mov    0xc(%rsp),%edi
   13ee8:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   13eed:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
   13ef1:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
   13ef6:	4c 8b 2c 24          	mov    (%rsp),%r13
   13efa:	8d 70 ff             	lea    -0x1(%rax),%esi
   13efd:	8b 6c 24 10          	mov    0x10(%rsp),%ebp
   13f01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
         STBI__CASE(1,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=0xffff;                     } break;
   13f08:	89 f2                	mov    %esi,%edx
   13f0a:	85 f6                	test   %esi,%esi
   13f0c:	0f 88 c6 09 00 00    	js     148d8 <_ZL22stbi__convert_format16Ptiijj.part.0+0x18a8>
   13f12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   13f18:	41 0f b7 02          	movzwl (%r10),%eax
   13f1c:	83 ea 01             	sub    $0x1,%edx
   13f1f:	49 83 c2 02          	add    $0x2,%r10
   13f23:	49 83 c3 08          	add    $0x8,%r11
   13f27:	66 0f 6e f8          	movd   %eax,%xmm7
   13f2b:	66 41 89 43 fc       	mov    %ax,-0x4(%r11)
   13f30:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13f35:	f2 0f 70 c7 00       	pshuflw $0x0,%xmm7,%xmm0
   13f3a:	66 41 89 43 fe       	mov    %ax,-0x2(%r11)
   13f3f:	66 41 0f 7e 43 f8    	movd   %xmm0,-0x8(%r11)
   13f45:	83 fa ff             	cmp    $0xffffffff,%edx
   13f48:	75 ce                	jne    13f18 <_ZL22stbi__convert_format16Ptiijj.part.0+0xee8>
   for (j=0; j < (int) y; ++j) {
   13f4a:	41 83 c6 01          	add    $0x1,%r14d
   13f4e:	45 01 c7             	add    %r8d,%r15d
   13f51:	01 f9                	add    %edi,%ecx
   13f53:	44 39 f5             	cmp    %r14d,%ebp
   13f56:	0f 84 74 09 00 00    	je     148d0 <_ZL22stbi__convert_format16Ptiijj.part.0+0x18a0>
      stbi__uint16 *src  = data + j * x * img_n   ;
   13f5c:	44 89 f8             	mov    %r15d,%eax
   13f5f:	4d 8d 54 45 00       	lea    0x0(%r13,%rax,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   13f64:	89 c8                	mov    %ecx,%eax
   13f66:	4d 8d 1c 44          	lea    (%r12,%rax,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   13f6a:	eb 9c                	jmp    13f08 <_ZL22stbi__convert_format16Ptiijj.part.0+0xed8>
   13f6c:	8b 44 24 14          	mov    0x14(%rsp),%eax
         STBI__CASE(1,2) { dest[0]=src[0]; dest[1]=0xffff;                                     } break;
   13f70:	8b 7c 24 08          	mov    0x8(%rsp),%edi
   13f74:	89 5c 24 20          	mov    %ebx,0x20(%rsp)
   13f78:	66 0f 76 c9          	pcmpeqd %xmm1,%xmm1
   13f7c:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
   13f81:	48 8b 1c 24          	mov    (%rsp),%rbx
   13f85:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   13f8b:	8d 50 fe             	lea    -0x2(%rax),%edx
   13f8e:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
   13f93:	8d 70 ff             	lea    -0x1(%rax),%esi
   13f96:	f3 0f 7e 1d 22 4b 02 	movq   0x24b22(%rip),%xmm3        # 38ac0 <_ZL11stbi__bmask+0x340>
   13f9d:	00 
   13f9e:	89 54 24 08          	mov    %edx,0x8(%rsp)
   13fa2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   13fa8:	89 f1                	mov    %esi,%ecx
   13faa:	85 f6                	test   %esi,%esi
   13fac:	0f 88 6e f1 ff ff    	js     13120 <_ZL22stbi__convert_format16Ptiijj.part.0+0xf0>
   13fb2:	8b 54 24 14          	mov    0x14(%rsp),%edx
   13fb6:	83 7c 24 08 ff       	cmpl   $0xffffffff,0x8(%rsp)
   13fbb:	41 0f 4c d0          	cmovl  %r8d,%edx
   13fbf:	83 fe 06             	cmp    $0x6,%esi
   13fc2:	0f 86 7f 09 00 00    	jbe    14947 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1917>
   13fc8:	89 d1                	mov    %edx,%ecx
   13fca:	31 c0                	xor    %eax,%eax
   13fcc:	c1 e9 03             	shr    $0x3,%ecx
   13fcf:	48 c1 e1 04          	shl    $0x4,%rcx
   13fd3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   13fd8:	f3 41 0f 6f 04 02    	movdqu (%r10,%rax,1),%xmm0
   13fde:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   13fe2:	66 0f 69 c1          	punpckhwd %xmm1,%xmm0
   13fe6:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
   13fea:	41 0f 11 44 43 10    	movups %xmm0,0x10(%r11,%rax,2)
   13ff0:	41 0f 11 14 43       	movups %xmm2,(%r11,%rax,2)
   13ff5:	48 83 c0 10          	add    $0x10,%rax
   13ff9:	48 39 c1             	cmp    %rax,%rcx
   13ffc:	75 da                	jne    13fd8 <_ZL22stbi__convert_format16Ptiijj.part.0+0xfa8>
   13ffe:	89 d0                	mov    %edx,%eax
   14000:	83 e0 f8             	and    $0xfffffff8,%eax
   14003:	89 c1                	mov    %eax,%ecx
   14005:	4d 8d 14 4a          	lea    (%r10,%rcx,2),%r10
   14009:	4d 8d 1c 8b          	lea    (%r11,%rcx,4),%r11
   1400d:	89 f1                	mov    %esi,%ecx
   1400f:	29 c1                	sub    %eax,%ecx
   14011:	f6 c2 07             	test   $0x7,%dl
   14014:	0f 84 91 00 00 00    	je     140ab <_ZL22stbi__convert_format16Ptiijj.part.0+0x107b>
   1401a:	29 c2                	sub    %eax,%edx
   1401c:	44 8d 6a ff          	lea    -0x1(%rdx),%r13d
   14020:	41 83 fd 02          	cmp    $0x2,%r13d
   14024:	76 42                	jbe    14068 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1038>
   14026:	4d 8d 24 44          	lea    (%r12,%rax,2),%r12
   1402a:	48 01 e8             	add    %rbp,%rax
   1402d:	f3 0f 7e 04 43       	movq   (%rbx,%rax,2),%xmm0
   14032:	4f 8d 24 61          	lea    (%r9,%r12,2),%r12
   14036:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   1403a:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   1403e:	66 0f 61 d3          	punpcklwd %xmm3,%xmm2
   14042:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   14047:	66 41 0f d6 14 24    	movq   %xmm2,(%r12)
   1404d:	66 41 0f d6 44 24 08 	movq   %xmm0,0x8(%r12)
   14054:	f6 c2 03             	test   $0x3,%dl
   14057:	74 52                	je     140ab <_ZL22stbi__convert_format16Ptiijj.part.0+0x107b>
   14059:	83 e2 fc             	and    $0xfffffffc,%edx
   1405c:	89 d0                	mov    %edx,%eax
   1405e:	29 d1                	sub    %edx,%ecx
   14060:	4d 8d 14 42          	lea    (%r10,%rax,2),%r10
   14064:	4d 8d 1c 83          	lea    (%r11,%rax,4),%r11
   14068:	41 0f b7 02          	movzwl (%r10),%eax
   1406c:	66 41 89 03          	mov    %ax,(%r11)
   14070:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14075:	66 41 89 43 02       	mov    %ax,0x2(%r11)
   1407a:	85 c9                	test   %ecx,%ecx
   1407c:	74 2d                	je     140ab <_ZL22stbi__convert_format16Ptiijj.part.0+0x107b>
   1407e:	41 0f b7 42 02       	movzwl 0x2(%r10),%eax
   14083:	66 41 89 43 04       	mov    %ax,0x4(%r11)
   14088:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1408d:	66 41 89 43 06       	mov    %ax,0x6(%r11)
   14092:	83 f9 01             	cmp    $0x1,%ecx
   14095:	74 14                	je     140ab <_ZL22stbi__convert_format16Ptiijj.part.0+0x107b>
   14097:	41 0f b7 42 04       	movzwl 0x4(%r10),%eax
   1409c:	66 41 89 43 08       	mov    %ax,0x8(%r11)
   140a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   140a6:	66 41 89 43 0a       	mov    %ax,0xa(%r11)
   for (j=0; j < (int) y; ++j) {
   140ab:	8b 44 24 30          	mov    0x30(%rsp),%eax
   140af:	41 83 c6 01          	add    $0x1,%r14d
   140b3:	41 01 c7             	add    %eax,%r15d
   140b6:	8b 44 24 0c          	mov    0xc(%rsp),%eax
   140ba:	01 c7                	add    %eax,%edi
   140bc:	8b 44 24 10          	mov    0x10(%rsp),%eax
   140c0:	41 39 c6             	cmp    %eax,%r14d
   140c3:	0f 84 7f 07 00 00    	je     14848 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1818>
      stbi__uint16 *src  = data + j * x * img_n   ;
   140c9:	44 89 fd             	mov    %r15d,%ebp
      stbi__uint16 *dest = good + j * x * req_comp;
   140cc:	41 89 fc             	mov    %edi,%r12d
      stbi__uint16 *src  = data + j * x * img_n   ;
   140cf:	4c 8d 14 6b          	lea    (%rbx,%rbp,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   140d3:	4f 8d 1c 61          	lea    (%r9,%r12,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   140d7:	e9 cc fe ff ff       	jmp    13fa8 <_ZL22stbi__convert_format16Ptiijj.part.0+0xf78>
   140dc:	8b 44 24 14          	mov    0x14(%rsp),%eax
   140e0:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
   140e5:	bf 01 00 00 00       	mov    $0x1,%edi
   140ea:	8d 68 ff             	lea    -0x1(%rax),%ebp
   140ed:	44 8d 40 fe          	lea    -0x2(%rax),%r8d
   140f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
         STBI__CASE(4,3) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];                       } break;
   140f8:	89 e8                	mov    %ebp,%eax
   140fa:	85 ed                	test   %ebp,%ebp
   140fc:	0f 88 df 07 00 00    	js     148e1 <_ZL22stbi__convert_format16Ptiijj.part.0+0x18b1>
   14102:	8b 74 24 14          	mov    0x14(%rsp),%esi
   14106:	41 83 f8 ff          	cmp    $0xffffffff,%r8d
   1410a:	0f 4c f7             	cmovl  %edi,%esi
   1410d:	83 fd 01             	cmp    $0x1,%ebp
   14110:	76 6d                	jbe    1417f <_ZL22stbi__convert_format16Ptiijj.part.0+0x114f>
   14112:	83 ee 01             	sub    $0x1,%esi
   14115:	4c 89 d0             	mov    %r10,%rax
   14118:	4c 89 da             	mov    %r11,%rdx
   1411b:	89 f1                	mov    %esi,%ecx
   1411d:	d1 e9                	shr    %ecx
   1411f:	48 c1 e1 04          	shl    $0x4,%rcx
   14123:	4c 01 d1             	add    %r10,%rcx
   14126:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1412d:	00 00 00 
   14130:	66 0f 6e 40 08       	movd   0x8(%rax),%xmm0
   14135:	44 8b 28             	mov    (%rax),%r13d
   14138:	48 83 c0 10          	add    $0x10,%rax
   1413c:	48 83 c2 0c          	add    $0xc,%rdx
   14140:	66 0f 6e 48 f4       	movd   -0xc(%rax),%xmm1
   14145:	66 0f 6e 50 fc       	movd   -0x4(%rax),%xmm2
   1414a:	44 89 6a f4          	mov    %r13d,-0xc(%rdx)
   1414e:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
   14152:	66 0f 61 c2          	punpcklwd %xmm2,%xmm0
   14156:	f2 0f 70 c0 e6       	pshuflw $0xe6,%xmm0,%xmm0
   1415b:	66 0f 7e 4a f8       	movd   %xmm1,-0x8(%rdx)
   14160:	66 0f 7e 42 fc       	movd   %xmm0,-0x4(%rdx)
   14165:	48 39 c1             	cmp    %rax,%rcx
   14168:	75 c6                	jne    14130 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1100>
   1416a:	83 e6 fe             	and    $0xfffffffe,%esi
   1416d:	89 f0                	mov    %esi,%eax
   1416f:	4d 8d 14 c2          	lea    (%r10,%rax,8),%r10
   14173:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
   14177:	4d 8d 1c 43          	lea    (%r11,%rax,2),%r11
   1417b:	89 e8                	mov    %ebp,%eax
   1417d:	29 f0                	sub    %esi,%eax
   1417f:	41 0f b7 12          	movzwl (%r10),%edx
   14183:	66 41 89 13          	mov    %dx,(%r11)
   14187:	41 0f b7 52 02       	movzwl 0x2(%r10),%edx
   1418c:	66 41 89 53 02       	mov    %dx,0x2(%r11)
   14191:	41 0f b7 52 04       	movzwl 0x4(%r10),%edx
   14196:	66 41 89 53 04       	mov    %dx,0x4(%r11)
   1419b:	85 c0                	test   %eax,%eax
   1419d:	74 12                	je     141b1 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1181>
   1419f:	41 8b 42 08          	mov    0x8(%r10),%eax
   141a3:	41 89 43 06          	mov    %eax,0x6(%r11)
   141a7:	41 0f b7 42 0c       	movzwl 0xc(%r10),%eax
   141ac:	66 41 89 43 0a       	mov    %ax,0xa(%r11)
   for (j=0; j < (int) y; ++j) {
   141b1:	8b 44 24 30          	mov    0x30(%rsp),%eax
   141b5:	41 83 c6 01          	add    $0x1,%r14d
   141b9:	41 01 c7             	add    %eax,%r15d
   141bc:	8b 44 24 0c          	mov    0xc(%rsp),%eax
   141c0:	41 01 c4             	add    %eax,%r12d
   141c3:	44 39 74 24 10       	cmp    %r14d,0x10(%rsp)
   141c8:	0f 84 7f ef ff ff    	je     1314d <_ZL22stbi__convert_format16Ptiijj.part.0+0x11d>
      stbi__uint16 *src  = data + j * x * img_n   ;
   141ce:	48 8b 14 24          	mov    (%rsp),%rdx
   141d2:	44 89 f8             	mov    %r15d,%eax
      stbi__uint16 *dest = good + j * x * req_comp;
   141d5:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
      stbi__uint16 *src  = data + j * x * img_n   ;
   141da:	4c 8d 14 42          	lea    (%rdx,%rax,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   141de:	44 89 e0             	mov    %r12d,%eax
   141e1:	4c 8d 1c 46          	lea    (%rsi,%rax,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   141e5:	e9 0e ff ff ff       	jmp    140f8 <_ZL22stbi__convert_format16Ptiijj.part.0+0x10c8>
   141ea:	8b 44 24 14          	mov    0x14(%rsp),%eax
   141ee:	89 5c 24 20          	mov    %ebx,0x20(%rsp)
   141f2:	41 b8 01 00 00 00    	mov    $0x1,%r8d
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   141f8:	66 45 0f ef c0       	pxor   %xmm8,%xmm8
   141fd:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
   14202:	48 8b 1c 24          	mov    (%rsp),%rbx
   14206:	66 44 0f 6f 3d 21 47 	movdqa 0x24721(%rip),%xmm15        # 38930 <_ZL11stbi__bmask+0x1b0>
   1420d:	02 00 
   1420f:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
   14214:	44 8d 68 ff          	lea    -0x1(%rax),%r13d
   14218:	8d 50 fe             	lea    -0x2(%rax),%edx
   1421b:	66 44 0f 6f 35 1c 47 	movdqa 0x2471c(%rip),%xmm14        # 38940 <_ZL11stbi__bmask+0x1c0>
   14222:	02 00 
   14224:	66 44 0f 6f 2d 23 47 	movdqa 0x24723(%rip),%xmm13        # 38950 <_ZL11stbi__bmask+0x1d0>
   1422b:	02 00 
   1422d:	0f 1f 00             	nopl   (%rax)
   14230:	44 89 e9             	mov    %r13d,%ecx
   14233:	45 85 ed             	test   %r13d,%r13d
   14236:	0f 88 e8 ee ff ff    	js     13124 <_ZL22stbi__convert_format16Ptiijj.part.0+0xf4>
   1423c:	8b 74 24 14          	mov    0x14(%rsp),%esi
   14240:	83 fa ff             	cmp    $0xffffffff,%edx
   14243:	41 0f 4c f0          	cmovl  %r8d,%esi
   14247:	41 83 fd 07          	cmp    $0x7,%r13d
   1424b:	0f 86 07 07 00 00    	jbe    14958 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1928>
   14251:	83 ee 01             	sub    $0x1,%esi
   14254:	4c 89 d0             	mov    %r10,%rax
   14257:	4c 89 d9             	mov    %r11,%rcx
   1425a:	89 f7                	mov    %esi,%edi
   1425c:	c1 ef 03             	shr    $0x3,%edi
   1425f:	48 c1 e7 06          	shl    $0x6,%rdi
   14263:	4c 01 d7             	add    %r10,%rdi
   14266:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1426d:	00 00 00 
   14270:	f3 0f 6f 00          	movdqu (%rax),%xmm0
   14274:	f3 0f 6f 58 20       	movdqu 0x20(%rax),%xmm3
   14279:	48 83 c0 40          	add    $0x40,%rax
   1427d:	48 83 c1 10          	add    $0x10,%rcx
   14281:	f3 0f 6f 68 d0       	movdqu -0x30(%rax),%xmm5
   14286:	f3 0f 6f 70 f0       	movdqu -0x10(%rax),%xmm6
   1428b:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   1428f:	66 0f 6f f8          	movdqa %xmm0,%xmm7
   14293:	66 0f 6f e3          	movdqa %xmm3,%xmm4
   14297:	66 0f 61 cd          	punpcklwd %xmm5,%xmm1
   1429b:	66 0f 69 fd          	punpckhwd %xmm5,%xmm7
   1429f:	66 0f 61 e6          	punpcklwd %xmm6,%xmm4
   142a3:	66 44 0f 6f d9       	movdqa %xmm1,%xmm11
   142a8:	66 0f 6f eb          	movdqa %xmm3,%xmm5
   142ac:	66 0f 61 cf          	punpcklwd %xmm7,%xmm1
   142b0:	66 0f 69 ee          	punpckhwd %xmm6,%xmm5
   142b4:	66 44 0f 69 df       	punpckhwd %xmm7,%xmm11
   142b9:	66 44 0f 6f d4       	movdqa %xmm4,%xmm10
   142be:	66 41 0f 61 cb       	punpcklwd %xmm11,%xmm1
   142c3:	66 44 0f 69 d5       	punpckhwd %xmm5,%xmm10
   142c8:	66 0f 61 e5          	punpcklwd %xmm5,%xmm4
   142cc:	66 41 0f 61 e2       	punpcklwd %xmm10,%xmm4
   142d1:	66 44 0f 6f c9       	movdqa %xmm1,%xmm9
   142d6:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   142da:	66 44 0f 69 cc       	punpckhwd %xmm4,%xmm9
   142df:	66 0f 61 d4          	punpcklwd %xmm4,%xmm2
   142e3:	66 0f 61 cc          	punpcklwd %xmm4,%xmm1
   142e7:	f3 0f 6f 60 d0       	movdqu -0x30(%rax),%xmm4
   142ec:	66 0f 61 de          	punpcklwd %xmm6,%xmm3
   142f0:	66 44 0f 6f e2       	movdqa %xmm2,%xmm12
   142f5:	66 41 0f 61 d1       	punpcklwd %xmm9,%xmm2
   142fa:	66 0f 61 c4          	punpcklwd %xmm4,%xmm0
   142fe:	66 0f 61 dd          	punpcklwd %xmm5,%xmm3
   14302:	66 45 0f 69 e1       	punpckhwd %xmm9,%xmm12
   14307:	66 0f 61 c7          	punpcklwd %xmm7,%xmm0
   1430b:	66 41 0f 69 da       	punpckhwd %xmm10,%xmm3
   14310:	66 41 0f 61 d4       	punpcklwd %xmm12,%xmm2
   14315:	66 41 0f 69 c3       	punpckhwd %xmm11,%xmm0
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   1431a:	66 0f 6f ea          	movdqa %xmm2,%xmm5
   1431e:	66 0f 6f f2          	movdqa %xmm2,%xmm6
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   14322:	66 0f 6f e0          	movdqa %xmm0,%xmm4
   14326:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   1432a:	66 41 0f 61 c9       	punpcklwd %xmm9,%xmm1
   1432f:	66 0f 69 e3          	punpckhwd %xmm3,%xmm4
   14333:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   14337:	66 41 0f 69 cc       	punpckhwd %xmm12,%xmm1
   1433c:	66 0f 69 dc          	punpckhwd %xmm4,%xmm3
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   14340:	66 41 0f d5 ef       	pmullw %xmm15,%xmm5
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   14345:	66 0f 61 c4          	punpcklwd %xmm4,%xmm0
   14349:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   1434d:	66 41 0f e4 f7       	pmulhuw %xmm15,%xmm6
   14352:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   14356:	66 41 0f e4 c6       	pmulhuw %xmm14,%xmm0
   1435b:	66 41 0f d5 d6       	pmullw %xmm14,%xmm2
   14360:	66 0f 6f e5          	movdqa %xmm5,%xmm4
   14364:	66 0f 61 e6          	punpcklwd %xmm6,%xmm4
   14368:	66 0f 69 ee          	punpckhwd %xmm6,%xmm5
   1436c:	66 0f 6f da          	movdqa %xmm2,%xmm3
   14370:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
   14374:	66 0f 61 d8          	punpcklwd %xmm0,%xmm3
   14378:	66 0f 6f c2          	movdqa %xmm2,%xmm0
   1437c:	66 0f fe dc          	paddd  %xmm4,%xmm3
   14380:	66 0f 6f e1          	movdqa %xmm1,%xmm4
   14384:	66 0f fe c5          	paddd  %xmm5,%xmm0
   14388:	66 41 0f d5 e5       	pmullw %xmm13,%xmm4
   1438d:	66 41 0f e4 cd       	pmulhuw %xmm13,%xmm1
   14392:	66 0f 6f fc          	movdqa %xmm4,%xmm7
   14396:	66 0f 69 e1          	punpckhwd %xmm1,%xmm4
   1439a:	66 0f 61 f9          	punpcklwd %xmm1,%xmm7
   1439e:	66 0f fe c4          	paddd  %xmm4,%xmm0
   143a2:	66 0f fe df          	paddd  %xmm7,%xmm3
   143a6:	66 0f 72 e0 08       	psrad  $0x8,%xmm0
   143ab:	66 0f 72 e3 08       	psrad  $0x8,%xmm3
   143b0:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   143b4:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   143b8:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
   143bc:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
   143c0:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   143c4:	66 0f 61 ca          	punpcklwd %xmm2,%xmm1
   143c8:	66 0f 69 c2          	punpckhwd %xmm2,%xmm0
   143cc:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   143d0:	0f 11 49 f0          	movups %xmm1,-0x10(%rcx)
   143d4:	48 39 f8             	cmp    %rdi,%rax
   143d7:	0f 85 93 fe ff ff    	jne    14270 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1240>
   143dd:	89 f0                	mov    %esi,%eax
   143df:	83 e0 f8             	and    $0xfffffff8,%eax
   143e2:	89 c1                	mov    %eax,%ecx
   143e4:	4d 8d 14 ca          	lea    (%r10,%rcx,8),%r10
   143e8:	4d 8d 1c 4b          	lea    (%r11,%rcx,2),%r11
   143ec:	44 89 e9             	mov    %r13d,%ecx
   143ef:	29 c1                	sub    %eax,%ecx
   143f1:	29 c6                	sub    %eax,%esi
   143f3:	83 fe 03             	cmp    $0x3,%esi
   143f6:	0f 86 d5 01 00 00    	jbe    145d1 <_ZL22stbi__convert_format16Ptiijj.part.0+0x15a1>
   143fc:	48 8d 7c 85 00       	lea    0x0(%rbp,%rax,4),%rdi
   14401:	83 e6 fc             	and    $0xfffffffc,%esi
   14404:	4c 01 e0             	add    %r12,%rax
   14407:	48 8d 3c 7b          	lea    (%rbx,%rdi,2),%rdi
   1440b:	29 f1                	sub    %esi,%ecx
   1440d:	f3 0f 7e 0f          	movq   (%rdi),%xmm1
   14411:	f3 0f 7e 6f 08       	movq   0x8(%rdi),%xmm5
   14416:	f3 0f 7e 47 10       	movq   0x10(%rdi),%xmm0
   1441b:	f3 0f 7e 77 18       	movq   0x18(%rdi),%xmm6
   14420:	66 44 0f 6f c9       	movdqa %xmm1,%xmm9
   14425:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   14429:	66 0f 61 cd          	punpcklwd %xmm5,%xmm1
   1442d:	66 44 0f 61 cd       	punpcklwd %xmm5,%xmm9
   14432:	66 0f 6f f8          	movdqa %xmm0,%xmm7
   14436:	66 0f 61 d5          	punpcklwd %xmm5,%xmm2
   1443a:	66 45 0f 70 c9 4e    	pshufd $0x4e,%xmm9,%xmm9
   14440:	66 0f 61 fe          	punpcklwd %xmm6,%xmm7
   14444:	66 0f 6f e0          	movdqa %xmm0,%xmm4
   14448:	66 41 0f 61 d1       	punpcklwd %xmm9,%xmm2
   1444d:	66 0f 70 ff 4e       	pshufd $0x4e,%xmm7,%xmm7
   14452:	66 0f 61 e6          	punpcklwd %xmm6,%xmm4
   14456:	66 0f 61 c6          	punpcklwd %xmm6,%xmm0
   1445a:	66 41 0f 61 c9       	punpcklwd %xmm9,%xmm1
   1445f:	66 0f 61 e7          	punpcklwd %xmm7,%xmm4
   14463:	66 44 0f 6f d2       	movdqa %xmm2,%xmm10
   14468:	66 0f 6f da          	movdqa %xmm2,%xmm3
   1446c:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   14471:	66 0f 61 c7          	punpcklwd %xmm7,%xmm0
   14475:	66 44 0f 61 d4       	punpcklwd %xmm4,%xmm10
   1447a:	66 0f 61 dc          	punpcklwd %xmm4,%xmm3
   1447e:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   14483:	66 0f 61 d4          	punpcklwd %xmm4,%xmm2
   14487:	66 0f 6f e1          	movdqa %xmm1,%xmm4
   1448b:	66 0f 61 e0          	punpcklwd %xmm0,%xmm4
   1448f:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
   14493:	66 45 0f 70 d2 4e    	pshufd $0x4e,%xmm10,%xmm10
   14499:	66 0f 70 e4 4e       	pshufd $0x4e,%xmm4,%xmm4
   1449e:	66 41 0f 61 da       	punpcklwd %xmm10,%xmm3
   144a3:	66 41 0f 61 d2       	punpcklwd %xmm10,%xmm2
   144a8:	66 0f 61 cc          	punpcklwd %xmm4,%xmm1
   144ac:	66 0f 6f fb          	movdqa %xmm3,%xmm7
   144b0:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   144b5:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   144b9:	66 41 0f 61 f8       	punpcklwd %xmm8,%xmm7
   144be:	66 41 0f 61 c8       	punpcklwd %xmm8,%xmm1
   144c3:	66 41 0f 61 c0       	punpcklwd %xmm8,%xmm0
   144c8:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   144cd:	66 0f 6f ea          	movdqa %xmm2,%xmm5
   144d1:	66 0f 6f f0          	movdqa %xmm0,%xmm6
   144d5:	66 0f 6f e1          	movdqa %xmm1,%xmm4
   144d9:	66 41 0f 61 e8       	punpcklwd %xmm8,%xmm5
   144de:	66 0f 72 f6 02       	pslld  $0x2,%xmm6
   144e3:	66 0f 72 f4 02       	pslld  $0x2,%xmm4
   144e8:	66 41 0f 61 d8       	punpcklwd %xmm8,%xmm3
   144ed:	66 0f fe f0          	paddd  %xmm0,%xmm6
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   144f1:	66 0f 6f c7          	movdqa %xmm7,%xmm0
   144f5:	66 0f fe e1          	paddd  %xmm1,%xmm4
   144f9:	66 0f 72 f0 02       	pslld  $0x2,%xmm0
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   144fe:	66 0f 70 db 4e       	pshufd $0x4e,%xmm3,%xmm3
   14503:	66 41 0f 61 d0       	punpcklwd %xmm8,%xmm2
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   14508:	66 0f fe c7          	paddd  %xmm7,%xmm0
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   1450c:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   14511:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   14515:	66 0f 72 f1 04       	pslld  $0x4,%xmm1
   1451a:	66 0f 72 f0 02       	pslld  $0x2,%xmm0
   1451f:	66 0f fa ce          	psubd  %xmm6,%xmm1
   14523:	66 0f fa c7          	psubd  %xmm7,%xmm0
   14527:	66 0f 72 f1 01       	pslld  $0x1,%xmm1
   1452c:	66 0f 72 f0 02       	pslld  $0x2,%xmm0
   14531:	66 0f fe c7          	paddd  %xmm7,%xmm0
   14535:	66 0f fe c1          	paddd  %xmm1,%xmm0
   14539:	66 0f 6f cd          	movdqa %xmm5,%xmm1
   1453d:	66 0f 72 f1 03       	pslld  $0x3,%xmm1
   14542:	66 0f fa cd          	psubd  %xmm5,%xmm1
   14546:	66 0f 72 f1 02       	pslld  $0x2,%xmm1
   1454b:	66 0f fe cd          	paddd  %xmm5,%xmm1
   1454f:	66 0f fe c1          	paddd  %xmm1,%xmm0
   14553:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   14557:	66 0f 72 f1 02       	pslld  $0x2,%xmm1
   1455c:	66 0f fe cb          	paddd  %xmm3,%xmm1
   14560:	66 0f 72 e0 08       	psrad  $0x8,%xmm0
   14565:	66 0f 72 f1 02       	pslld  $0x2,%xmm1
   1456a:	66 0f fa cb          	psubd  %xmm3,%xmm1
   1456e:	66 0f 72 f1 02       	pslld  $0x2,%xmm1
   14573:	66 0f fe cb          	paddd  %xmm3,%xmm1
   14577:	66 0f 6f dc          	movdqa %xmm4,%xmm3
   1457b:	66 0f 72 f3 04       	pslld  $0x4,%xmm3
   14580:	66 0f fa dc          	psubd  %xmm4,%xmm3
   14584:	66 0f 72 f3 01       	pslld  $0x1,%xmm3
   14589:	66 0f fe cb          	paddd  %xmm3,%xmm1
   1458d:	66 0f 6f da          	movdqa %xmm2,%xmm3
   14591:	66 0f 72 f3 03       	pslld  $0x3,%xmm3
   14596:	66 0f fa da          	psubd  %xmm2,%xmm3
   1459a:	66 0f 72 f3 02       	pslld  $0x2,%xmm3
   1459f:	66 0f fe d3          	paddd  %xmm3,%xmm2
   145a3:	66 0f fe ca          	paddd  %xmm2,%xmm1
   145a7:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   145ab:	66 0f 72 e1 08       	psrad  $0x8,%xmm1
   145b0:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
   145b4:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
   145b8:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   145bd:	66 0f 61 c2          	punpcklwd %xmm2,%xmm0
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   145c1:	66 41 0f d6 04 41    	movq   %xmm0,(%r9,%rax,2)
   145c7:	89 f0                	mov    %esi,%eax
   145c9:	4d 8d 14 c2          	lea    (%r10,%rax,8),%r10
   145cd:	4d 8d 1c 43          	lea    (%r11,%rax,2),%r11
   145d1:	41 0f b7 42 02       	movzwl 0x2(%r10),%eax
   145d6:	41 0f b7 32          	movzwl (%r10),%esi
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   145da:	69 c0 96 00 00 00    	imul   $0x96,%eax,%eax
   145e0:	6b f6 4d             	imul   $0x4d,%esi,%esi
   145e3:	01 f0                	add    %esi,%eax
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   145e5:	41 0f b7 72 04       	movzwl 0x4(%r10),%esi
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   145ea:	6b f6 1d             	imul   $0x1d,%esi,%esi
   145ed:	01 f0                	add    %esi,%eax
   145ef:	c1 f8 08             	sar    $0x8,%eax
   145f2:	66 41 89 03          	mov    %ax,(%r11)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   145f6:	85 c9                	test   %ecx,%ecx
   145f8:	0f 84 62 02 00 00    	je     14860 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1830>
   145fe:	41 0f b7 42 0a       	movzwl 0xa(%r10),%eax
   14603:	41 0f b7 72 08       	movzwl 0x8(%r10),%esi
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   14608:	69 c0 96 00 00 00    	imul   $0x96,%eax,%eax
   1460e:	6b f6 4d             	imul   $0x4d,%esi,%esi
   14611:	01 f0                	add    %esi,%eax
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   14613:	41 0f b7 72 0c       	movzwl 0xc(%r10),%esi
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   14618:	6b f6 1d             	imul   $0x1d,%esi,%esi
   1461b:	01 f0                	add    %esi,%eax
   1461d:	c1 f8 08             	sar    $0x8,%eax
   14620:	66 41 89 43 02       	mov    %ax,0x2(%r11)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   14625:	83 f9 01             	cmp    $0x1,%ecx
   14628:	0f 84 32 02 00 00    	je     14860 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1830>
   1462e:	41 0f b7 42 10       	movzwl 0x10(%r10),%eax
   14633:	41 0f b7 72 12       	movzwl 0x12(%r10),%esi
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   14638:	6b c0 4d             	imul   $0x4d,%eax,%eax
   1463b:	69 f6 96 00 00 00    	imul   $0x96,%esi,%esi
   14641:	01 f0                	add    %esi,%eax
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   14643:	41 0f b7 72 14       	movzwl 0x14(%r10),%esi
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   14648:	6b f6 1d             	imul   $0x1d,%esi,%esi
   1464b:	01 f0                	add    %esi,%eax
   1464d:	c1 f8 08             	sar    $0x8,%eax
   14650:	66 41 89 43 04       	mov    %ax,0x4(%r11)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   14655:	83 f9 02             	cmp    $0x2,%ecx
   14658:	0f 84 04 03 00 00    	je     14962 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1932>
   1465e:	41 0f b7 42 18       	movzwl 0x18(%r10),%eax
   14663:	41 0f b7 4a 1a       	movzwl 0x1a(%r10),%ecx
   for (j=0; j < (int) y; ++j) {
   14668:	41 83 c6 01          	add    $0x1,%r14d
   1466c:	8b 7c 24 0c          	mov    0xc(%rsp),%edi
   14670:	01 7c 24 08          	add    %edi,0x8(%rsp)
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   14674:	69 c9 96 00 00 00    	imul   $0x96,%ecx,%ecx
   1467a:	6b c0 4d             	imul   $0x4d,%eax,%eax
   1467d:	01 c8                	add    %ecx,%eax
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   1467f:	41 0f b7 4a 1c       	movzwl 0x1c(%r10),%ecx
   return (stbi__uint16) (((r*77) + (g*150) +  (29*b)) >> 8);
   14684:	6b c9 1d             	imul   $0x1d,%ecx,%ecx
   14687:	01 c8                	add    %ecx,%eax
   14689:	c1 f8 08             	sar    $0x8,%eax
   1468c:	66 41 89 43 06       	mov    %ax,0x6(%r11)
   for (j=0; j < (int) y; ++j) {
   14691:	8b 44 24 30          	mov    0x30(%rsp),%eax
   14695:	41 01 c7             	add    %eax,%r15d
   14698:	44 39 74 24 10       	cmp    %r14d,0x10(%rsp)
   1469d:	0f 84 a5 01 00 00    	je     14848 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1818>
      stbi__uint16 *dest = good + j * x * req_comp;
   146a3:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
      stbi__uint16 *src  = data + j * x * img_n   ;
   146a8:	44 89 fd             	mov    %r15d,%ebp
   146ab:	4c 8d 14 6b          	lea    (%rbx,%rbp,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   146af:	4f 8d 1c 61          	lea    (%r9,%r12,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   146b3:	e9 78 fb ff ff       	jmp    14230 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1200>
   146b8:	8b 44 24 14          	mov    0x14(%rsp),%eax
   146bc:	48 8b 3c 24          	mov    (%rsp),%rdi
   146c0:	4c 89 4c 24 20       	mov    %r9,0x20(%rsp)
   146c5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   146cb:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
   146d0:	8d 70 ff             	lea    -0x1(%rax),%esi
   146d3:	8d 50 fe             	lea    -0x2(%rax),%edx
   146d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   146dd:	00 00 00 
         STBI__CASE(2,1) { dest[0]=src[0];                                                     } break;
   146e0:	41 89 f5             	mov    %esi,%r13d
   146e3:	85 f6                	test   %esi,%esi
   146e5:	0f 88 25 02 00 00    	js     14910 <_ZL22stbi__convert_format16Ptiijj.part.0+0x18e0>
   146eb:	8b 4c 24 14          	mov    0x14(%rsp),%ecx
   146ef:	83 fa ff             	cmp    $0xffffffff,%edx
   146f2:	41 0f 4c c8          	cmovl  %r8d,%ecx
   146f6:	83 fe 07             	cmp    $0x7,%esi
   146f9:	0f 86 4f 02 00 00    	jbe    1494e <_ZL22stbi__convert_format16Ptiijj.part.0+0x191e>
   146ff:	83 e9 01             	sub    $0x1,%ecx
   14702:	31 c0                	xor    %eax,%eax
   14704:	41 89 cd             	mov    %ecx,%r13d
   14707:	41 c1 ed 03          	shr    $0x3,%r13d
   1470b:	49 c1 e5 04          	shl    $0x4,%r13
   1470f:	90                   	nop
   14710:	f3 41 0f 6f 04 42    	movdqu (%r10,%rax,2),%xmm0
   14716:	f3 41 0f 6f 74 42 10 	movdqu 0x10(%r10,%rax,2),%xmm6
   1471d:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   14721:	66 0f 61 c6          	punpcklwd %xmm6,%xmm0
   14725:	66 0f 69 ce          	punpckhwd %xmm6,%xmm1
   14729:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   1472d:	66 0f 69 d1          	punpckhwd %xmm1,%xmm2
   14731:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
   14735:	66 0f 61 c2          	punpcklwd %xmm2,%xmm0
   14739:	41 0f 11 04 03       	movups %xmm0,(%r11,%rax,1)
   1473e:	48 83 c0 10          	add    $0x10,%rax
   14742:	49 39 c5             	cmp    %rax,%r13
   14745:	75 c9                	jne    14710 <_ZL22stbi__convert_format16Ptiijj.part.0+0x16e0>
   14747:	89 c8                	mov    %ecx,%eax
   14749:	83 e0 f8             	and    $0xfffffff8,%eax
   1474c:	41 89 c5             	mov    %eax,%r13d
   1474f:	4f 8d 14 aa          	lea    (%r10,%r13,4),%r10
   14753:	4f 8d 1c 6b          	lea    (%r11,%r13,2),%r11
   14757:	41 89 f5             	mov    %esi,%r13d
   1475a:	41 29 c5             	sub    %eax,%r13d
   1475d:	29 c1                	sub    %eax,%ecx
   1475f:	83 f9 03             	cmp    $0x3,%ecx
   14762:	76 41                	jbe    147a5 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1775>
   14764:	48 8d 6c 45 00       	lea    0x0(%rbp,%rax,2),%rbp
   14769:	83 e1 fc             	and    $0xfffffffc,%ecx
   1476c:	4c 01 e0             	add    %r12,%rax
   1476f:	48 8d 2c 6f          	lea    (%rdi,%rbp,2),%rbp
   14773:	41 29 cd             	sub    %ecx,%r13d
   14776:	f3 0f 7e 45 00       	movq   0x0(%rbp),%xmm0
   1477b:	f3 0f 7e 4d 08       	movq   0x8(%rbp),%xmm1
   14780:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   14784:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
   14788:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
   1478c:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   14791:	66 0f 61 c2          	punpcklwd %xmm2,%xmm0
   14795:	66 41 0f d6 04 41    	movq   %xmm0,(%r9,%rax,2)
   1479b:	89 c8                	mov    %ecx,%eax
   1479d:	4d 8d 14 82          	lea    (%r10,%rax,4),%r10
   147a1:	4d 8d 1c 43          	lea    (%r11,%rax,2),%r11
   147a5:	41 0f b7 02          	movzwl (%r10),%eax
   147a9:	66 41 89 03          	mov    %ax,(%r11)
   147ad:	45 85 ed             	test   %r13d,%r13d
   147b0:	0f 84 e2 00 00 00    	je     14898 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1868>
   147b6:	41 0f b7 42 04       	movzwl 0x4(%r10),%eax
   147bb:	66 41 89 43 02       	mov    %ax,0x2(%r11)
   147c0:	41 83 fd 01          	cmp    $0x1,%r13d
   147c4:	74 5d                	je     14823 <_ZL22stbi__convert_format16Ptiijj.part.0+0x17f3>
   147c6:	41 0f b7 42 08       	movzwl 0x8(%r10),%eax
   147cb:	66 41 89 43 04       	mov    %ax,0x4(%r11)
   147d0:	41 83 fd 02          	cmp    $0x2,%r13d
   147d4:	0f 84 be 00 00 00    	je     14898 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1868>
   147da:	41 0f b7 42 0c       	movzwl 0xc(%r10),%eax
   for (j=0; j < (int) y; ++j) {
   147df:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
   147e3:	41 83 c6 01          	add    $0x1,%r14d
   147e7:	01 4c 24 08          	add    %ecx,0x8(%rsp)
         STBI__CASE(2,1) { dest[0]=src[0];                                                     } break;
   147eb:	66 41 89 43 06       	mov    %ax,0x6(%r11)
   for (j=0; j < (int) y; ++j) {
   147f0:	8b 44 24 30          	mov    0x30(%rsp),%eax
   147f4:	41 01 c7             	add    %eax,%r15d
   147f7:	44 39 74 24 10       	cmp    %r14d,0x10(%rsp)
   147fc:	74 4a                	je     14848 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1818>
      stbi__uint16 *dest = good + j * x * req_comp;
   147fe:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
      stbi__uint16 *src  = data + j * x * img_n   ;
   14803:	44 89 fd             	mov    %r15d,%ebp
   14806:	4c 8d 14 6f          	lea    (%rdi,%rbp,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   1480a:	4f 8d 1c 61          	lea    (%r9,%r12,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   1480e:	e9 cd fe ff ff       	jmp    146e0 <_ZL22stbi__convert_format16Ptiijj.part.0+0x16b0>
   14813:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   14818:	89 74 24 08          	mov    %esi,0x8(%rsp)
   1481c:	89 d3                	mov    %edx,%ebx
   1481e:	e9 0a e9 ff ff       	jmp    1312d <_ZL22stbi__convert_format16Ptiijj.part.0+0xfd>
   for (j=0; j < (int) y; ++j) {
   14823:	8b 44 24 30          	mov    0x30(%rsp),%eax
   14827:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
   1482b:	41 83 c6 01          	add    $0x1,%r14d
   1482f:	01 4c 24 08          	add    %ecx,0x8(%rsp)
   14833:	8b 4c 24 10          	mov    0x10(%rsp),%ecx
   14837:	41 01 c7             	add    %eax,%r15d
   1483a:	8b 44 24 08          	mov    0x8(%rsp),%eax
   1483e:	41 39 ce             	cmp    %ecx,%r14d
   14841:	75 73                	jne    148b6 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1886>
   14843:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   STBI_FREE(data);
   14848:	48 8b 3c 24          	mov    (%rsp),%rdi
   1484c:	4d 89 cf             	mov    %r9,%r15
   1484f:	e8 4c 1e ff ff       	call   66a0 <free@plt>
   return good;
   14854:	e9 b0 e8 ff ff       	jmp    13109 <_ZL22stbi__convert_format16Ptiijj.part.0+0xd9>
   14859:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   for (j=0; j < (int) y; ++j) {
   14860:	8b 44 24 30          	mov    0x30(%rsp),%eax
   14864:	8b 7c 24 0c          	mov    0xc(%rsp),%edi
   14868:	41 83 c6 01          	add    $0x1,%r14d
   1486c:	01 7c 24 08          	add    %edi,0x8(%rsp)
   14870:	41 01 c7             	add    %eax,%r15d
   14873:	8b 44 24 08          	mov    0x8(%rsp),%eax
   14877:	44 39 74 24 10       	cmp    %r14d,0x10(%rsp)
   1487c:	74 ca                	je     14848 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1818>
      stbi__uint16 *src  = data + j * x * img_n   ;
   1487e:	44 89 fd             	mov    %r15d,%ebp
      stbi__uint16 *dest = good + j * x * req_comp;
   14881:	41 89 c4             	mov    %eax,%r12d
      stbi__uint16 *src  = data + j * x * img_n   ;
   14884:	4c 8d 14 6b          	lea    (%rbx,%rbp,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   14888:	4f 8d 1c 61          	lea    (%r9,%r12,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   1488c:	e9 9f f9 ff ff       	jmp    14230 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1200>
   14891:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   for (j=0; j < (int) y; ++j) {
   14898:	8b 44 24 30          	mov    0x30(%rsp),%eax
   1489c:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
   148a0:	41 83 c6 01          	add    $0x1,%r14d
   148a4:	01 4c 24 08          	add    %ecx,0x8(%rsp)
   148a8:	41 01 c7             	add    %eax,%r15d
   148ab:	8b 44 24 08          	mov    0x8(%rsp),%eax
   148af:	44 39 74 24 10       	cmp    %r14d,0x10(%rsp)
   148b4:	74 92                	je     14848 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1818>
      stbi__uint16 *src  = data + j * x * img_n   ;
   148b6:	44 89 fd             	mov    %r15d,%ebp
      stbi__uint16 *dest = good + j * x * req_comp;
   148b9:	41 89 c4             	mov    %eax,%r12d
      stbi__uint16 *src  = data + j * x * img_n   ;
   148bc:	4c 8d 14 6f          	lea    (%rdi,%rbp,2),%r10
      stbi__uint16 *dest = good + j * x * req_comp;
   148c0:	4f 8d 1c 61          	lea    (%r9,%r12,2),%r11
      switch (STBI__COMBO(img_n, req_comp)) {
   148c4:	e9 17 fe ff ff       	jmp    146e0 <_ZL22stbi__convert_format16Ptiijj.part.0+0x16b0>
   148c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   148d0:	4d 89 e7             	mov    %r12,%r15
   148d3:	e9 7a e8 ff ff       	jmp    13152 <_ZL22stbi__convert_format16Ptiijj.part.0+0x122>
   148d8:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
   148dc:	e9 4c e8 ff ff       	jmp    1312d <_ZL22stbi__convert_format16Ptiijj.part.0+0xfd>
   148e1:	44 89 64 24 08       	mov    %r12d,0x8(%rsp)
   148e6:	e9 42 e8 ff ff       	jmp    1312d <_ZL22stbi__convert_format16Ptiijj.part.0+0xfd>
   148eb:	89 5c 24 08          	mov    %ebx,0x8(%rsp)
   148ef:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
   148f4:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
   148f8:	e9 30 e8 ff ff       	jmp    1312d <_ZL22stbi__convert_format16Ptiijj.part.0+0xfd>
   148fd:	44 89 4c 24 08       	mov    %r9d,0x8(%rsp)
   14902:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
   14906:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
   1490b:	e9 1d e8 ff ff       	jmp    1312d <_ZL22stbi__convert_format16Ptiijj.part.0+0xfd>
   14910:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
   14915:	e9 13 e8 ff ff       	jmp    1312d <_ZL22stbi__convert_format16Ptiijj.part.0+0xfd>
   1491a:	44 8b 74 24 28       	mov    0x28(%rsp),%r14d
   1491f:	44 8b 7c 24 34       	mov    0x34(%rsp),%r15d
   14924:	8b 5c 24 64          	mov    0x64(%rsp),%ebx
   14928:	4c 8b 4c 24 68       	mov    0x68(%rsp),%r9
   1492d:	e9 fb e7 ff ff       	jmp    1312d <_ZL22stbi__convert_format16Ptiijj.part.0+0xfd>
         STBI__CASE(3,4) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];dest[3]=0xffff;        } break;
   14932:	31 c0                	xor    %eax,%eax
   14934:	e9 39 ef ff ff       	jmp    13872 <_ZL22stbi__convert_format16Ptiijj.part.0+0x842>
         STBI__CASE(2,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=src[1];                     } break;
   14939:	31 d2                	xor    %edx,%edx
   1493b:	e9 bb f4 ff ff       	jmp    13dfb <_ZL22stbi__convert_format16Ptiijj.part.0+0xdcb>
         STBI__CASE(4,2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   14940:	31 c0                	xor    %eax,%eax
   14942:	e9 44 ea ff ff       	jmp    1338b <_ZL22stbi__convert_format16Ptiijj.part.0+0x35b>
         STBI__CASE(1,2) { dest[0]=src[0]; dest[1]=0xffff;                                     } break;
   14947:	31 c0                	xor    %eax,%eax
   14949:	e9 cc f6 ff ff       	jmp    1401a <_ZL22stbi__convert_format16Ptiijj.part.0+0xfea>
         STBI__CASE(2,1) { dest[0]=src[0];                                                     } break;
   1494e:	31 c0                	xor    %eax,%eax
   14950:	83 e9 01             	sub    $0x1,%ecx
   14953:	e9 05 fe ff ff       	jmp    1475d <_ZL22stbi__convert_format16Ptiijj.part.0+0x172d>
         STBI__CASE(4,1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]);                   } break;
   14958:	31 c0                	xor    %eax,%eax
   1495a:	83 ee 01             	sub    $0x1,%esi
   1495d:	e9 8f fa ff ff       	jmp    143f1 <_ZL22stbi__convert_format16Ptiijj.part.0+0x13c1>
   for (j=0; j < (int) y; ++j) {
   14962:	8b 44 24 30          	mov    0x30(%rsp),%eax
   14966:	8b 7c 24 0c          	mov    0xc(%rsp),%edi
   1496a:	41 83 c6 01          	add    $0x1,%r14d
   1496e:	01 7c 24 08          	add    %edi,0x8(%rsp)
   14972:	8b 7c 24 10          	mov    0x10(%rsp),%edi
   14976:	41 01 c7             	add    %eax,%r15d
   14979:	8b 44 24 08          	mov    0x8(%rsp),%eax
   1497d:	41 39 fe             	cmp    %edi,%r14d
   14980:	0f 85 f8 fe ff ff    	jne    1487e <_ZL22stbi__convert_format16Ptiijj.part.0+0x184e>
   14986:	e9 bd fe ff ff       	jmp    14848 <_ZL22stbi__convert_format16Ptiijj.part.0+0x1818>
   1498b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   14990:	4d 89 ef             	mov    %r13,%r15
   14993:	e9 ba e7 ff ff       	jmp    13152 <_ZL22stbi__convert_format16Ptiijj.part.0+0x122>
   14998:	49 89 df             	mov    %rbx,%r15
   1499b:	e9 b2 e7 ff ff       	jmp    13152 <_ZL22stbi__convert_format16Ptiijj.part.0+0x122>
      STBI_FREE(data);
   149a0:	48 8b 3c 24          	mov    (%rsp),%rdi
   149a4:	e8 f7 1c ff ff       	call   66a0 <free@plt>
      return (stbi__uint16 *) stbi__errpuc("outofmem", "Out of memory");
   149a9:	48 8d 05 85 30 02 00 	lea    0x23085(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   149b0:	e9 48 e7 ff ff       	jmp    130fd <_ZL22stbi__convert_format16Ptiijj.part.0+0xcd>
   149b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   149bc:	00 00 00 00 

00000000000149c0 <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0>:
   for (i=0; i < ncomp; ++i) {
   149c0:	85 f6                	test   %esi,%esi
   149c2:	0f 8e 88 00 00 00    	jle    14a50 <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0+0x90>
static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)
   149c8:	55                   	push   %rbp
   149c9:	48 63 f6             	movslq %esi,%rsi
   149cc:	53                   	push   %rbx
   149cd:	48 8d 2c 76          	lea    (%rsi,%rsi,2),%rbp
   149d1:	48 89 fb             	mov    %rdi,%rbx
   149d4:	48 c1 e5 05          	shl    $0x5,%rbp
   149d8:	48 01 fd             	add    %rdi,%rbp
   149db:	48 83 ec 08          	sub    $0x8,%rsp
      if (z->img_comp[i].raw_data) {
   149df:	48 8b bb d8 46 00 00 	mov    0x46d8(%rbx),%rdi
   149e6:	48 85 ff             	test   %rdi,%rdi
   149e9:	74 10                	je     149fb <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0+0x3b>
         STBI_FREE(z->img_comp[i].raw_data);
   149eb:	e8 b0 1c ff ff       	call   66a0 <free@plt>
         z->img_comp[i].data = NULL;
   149f0:	66 0f ef c0          	pxor   %xmm0,%xmm0
   149f4:	0f 11 83 d0 46 00 00 	movups %xmm0,0x46d0(%rbx)
      if (z->img_comp[i].raw_coeff) {
   149fb:	48 8b bb e0 46 00 00 	mov    0x46e0(%rbx),%rdi
   14a02:	48 85 ff             	test   %rdi,%rdi
   14a05:	74 1b                	je     14a22 <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0+0x62>
         STBI_FREE(z->img_comp[i].raw_coeff);
   14a07:	e8 94 1c ff ff       	call   66a0 <free@plt>
         z->img_comp[i].raw_coeff = 0;
   14a0c:	48 c7 83 e0 46 00 00 	movq   $0x0,0x46e0(%rbx)
   14a13:	00 00 00 00 
         z->img_comp[i].coeff = 0;
   14a17:	48 c7 83 f0 46 00 00 	movq   $0x0,0x46f0(%rbx)
   14a1e:	00 00 00 00 
      if (z->img_comp[i].linebuf) {
   14a22:	48 8b bb e8 46 00 00 	mov    0x46e8(%rbx),%rdi
   14a29:	48 85 ff             	test   %rdi,%rdi
   14a2c:	74 10                	je     14a3e <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0+0x7e>
         STBI_FREE(z->img_comp[i].linebuf);
   14a2e:	e8 6d 1c ff ff       	call   66a0 <free@plt>
         z->img_comp[i].linebuf = NULL;
   14a33:	48 c7 83 e8 46 00 00 	movq   $0x0,0x46e8(%rbx)
   14a3a:	00 00 00 00 
   for (i=0; i < ncomp; ++i) {
   14a3e:	48 83 c3 60          	add    $0x60,%rbx
   14a42:	48 39 eb             	cmp    %rbp,%rbx
   14a45:	75 98                	jne    149df <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0+0x1f>
}
   14a47:	48 83 c4 08          	add    $0x8,%rsp
   14a4b:	31 c0                	xor    %eax,%eax
   14a4d:	5b                   	pop    %rbx
   14a4e:	5d                   	pop    %rbp
   14a4f:	c3                   	ret
   14a50:	31 c0                	xor    %eax,%eax
   14a52:	c3                   	ret
   14a53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   14a5a:	00 00 00 00 
   14a5e:	66 90                	xchg   %ax,%ax

0000000000014a60 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi>:
{
   14a60:	41 57                	push   %r15
   memset(sizes, 0, sizeof(sizes));
   14a62:	66 0f ef c0          	pxor   %xmm0,%xmm0
{
   14a66:	49 89 f8             	mov    %rdi,%r8
   memset(z->fast, 0, sizeof(z->fast));
   14a69:	48 8d 7f 08          	lea    0x8(%rdi),%rdi
{
   14a6d:	41 56                	push   %r14
   memset(z->fast, 0, sizeof(z->fast));
   14a6f:	4c 89 c1             	mov    %r8,%rcx
   14a72:	31 c0                	xor    %eax,%eax
{
   14a74:	41 55                	push   %r13
   14a76:	41 54                	push   %r12
   14a78:	55                   	push   %rbp
   14a79:	53                   	push   %rbx
   14a7a:	48 83 ec 40          	sub    $0x40,%rsp
   memset(sizes, 0, sizeof(sizes));
   14a7e:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
   14a85:	00 
   14a86:	0f 29 44 24 e8       	movaps %xmm0,-0x18(%rsp)
   14a8b:	0f 29 44 24 f8       	movaps %xmm0,-0x8(%rsp)
   14a90:	0f 29 44 24 08       	movaps %xmm0,0x8(%rsp)
   14a95:	0f 29 44 24 18       	movaps %xmm0,0x18(%rsp)
   memset(z->fast, 0, sizeof(z->fast));
   14a9a:	48 c7 47 f8 00 00 00 	movq   $0x0,-0x8(%rdi)
   14aa1:	00 
   14aa2:	48 c7 87 f0 03 00 00 	movq   $0x0,0x3f0(%rdi)
   14aa9:	00 00 00 00 
   14aad:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   14ab1:	48 29 f9             	sub    %rdi,%rcx
   14ab4:	81 c1 00 04 00 00    	add    $0x400,%ecx
   14aba:	c1 e9 03             	shr    $0x3,%ecx
   14abd:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   for (i=0; i < num; ++i)
   14ac0:	48 63 fa             	movslq %edx,%rdi
   14ac3:	48 89 f0             	mov    %rsi,%rax
   14ac6:	48 8d 0c 37          	lea    (%rdi,%rsi,1),%rcx
   14aca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      ++sizes[sizelist[i]];
   14ad0:	0f b6 10             	movzbl (%rax),%edx
   for (i=0; i < num; ++i)
   14ad3:	48 83 c0 01          	add    $0x1,%rax
      ++sizes[sizelist[i]];
   14ad7:	83 44 94 e8 01       	addl   $0x1,-0x18(%rsp,%rdx,4)
   for (i=0; i < num; ++i)
   14adc:	48 39 c1             	cmp    %rax,%rcx
   14adf:	75 ef                	jne    14ad0 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x70>
      if (sizes[i] > (1 << i))
   14ae1:	8b 4c 24 ec          	mov    -0x14(%rsp),%ecx
   sizes[0] = 0;
   14ae5:	c7 44 24 e8 00 00 00 	movl   $0x0,-0x18(%rsp)
   14aec:	00 
      if (sizes[i] > (1 << i))
   14aed:	83 f9 02             	cmp    $0x2,%ecx
   14af0:	0f 8f 32 05 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14af6:	8b 54 24 f0          	mov    -0x10(%rsp),%edx
   14afa:	83 fa 04             	cmp    $0x4,%edx
   14afd:	0f 8f 25 05 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b03:	44 8b 4c 24 f4       	mov    -0xc(%rsp),%r9d
   14b08:	41 83 f9 08          	cmp    $0x8,%r9d
   14b0c:	0f 8f 16 05 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b12:	44 8b 54 24 f8       	mov    -0x8(%rsp),%r10d
   14b17:	41 83 fa 10          	cmp    $0x10,%r10d
   14b1b:	0f 8f 07 05 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b21:	44 8b 5c 24 fc       	mov    -0x4(%rsp),%r11d
   14b26:	41 83 fb 20          	cmp    $0x20,%r11d
   14b2a:	0f 8f f8 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b30:	8b 1c 24             	mov    (%rsp),%ebx
   14b33:	83 fb 40             	cmp    $0x40,%ebx
   14b36:	0f 8f ec 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b3c:	8b 6c 24 04          	mov    0x4(%rsp),%ebp
   14b40:	81 fd 80 00 00 00    	cmp    $0x80,%ebp
   14b46:	0f 8f dc 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b4c:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
   14b51:	41 81 fc 00 01 00 00 	cmp    $0x100,%r12d
   14b58:	0f 8f ca 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b5e:	44 8b 6c 24 0c       	mov    0xc(%rsp),%r13d
   14b63:	41 81 fd 00 02 00 00 	cmp    $0x200,%r13d
   14b6a:	0f 8f b8 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b70:	44 8b 74 24 10       	mov    0x10(%rsp),%r14d
   14b75:	41 81 fe 00 04 00 00 	cmp    $0x400,%r14d
   14b7c:	0f 8f a6 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b82:	8b 44 24 14          	mov    0x14(%rsp),%eax
   14b86:	89 44 24 94          	mov    %eax,-0x6c(%rsp)
   14b8a:	3d 00 08 00 00       	cmp    $0x800,%eax
   14b8f:	0f 8f 93 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14b95:	8b 44 24 18          	mov    0x18(%rsp),%eax
   14b99:	89 44 24 98          	mov    %eax,-0x68(%rsp)
   14b9d:	3d 00 10 00 00       	cmp    $0x1000,%eax
   14ba2:	0f 8f 80 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14ba8:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
   14bac:	89 44 24 9c          	mov    %eax,-0x64(%rsp)
   14bb0:	3d 00 20 00 00       	cmp    $0x2000,%eax
   14bb5:	0f 8f 6d 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14bbb:	8b 44 24 20          	mov    0x20(%rsp),%eax
   14bbf:	89 44 24 a0          	mov    %eax,-0x60(%rsp)
   14bc3:	3d 00 40 00 00       	cmp    $0x4000,%eax
   14bc8:	0f 8f 5a 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
   14bce:	8b 44 24 24          	mov    0x24(%rsp),%eax
   14bd2:	89 44 24 a4          	mov    %eax,-0x5c(%rsp)
   14bd6:	3d 00 80 00 00       	cmp    $0x8000,%eax
   14bdb:	0f 8f 47 04 00 00    	jg     15028 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5c8>
      z->firstcode[i] = (stbi__uint16) code;
   14be1:	31 c0                	xor    %eax,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   14be3:	45 31 ff             	xor    %r15d,%r15d
      next_code[i] = code;
   14be6:	c7 44 24 ac 00 00 00 	movl   $0x0,-0x54(%rsp)
   14bed:	00 
      z->firstcode[i] = (stbi__uint16) code;
   14bee:	66 41 89 80 02 04 00 	mov    %ax,0x402(%r8)
   14bf5:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14bf6:	89 c8                	mov    %ecx,%eax
   14bf8:	c1 e0 0f             	shl    $0xf,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   14bfb:	66 45 89 b8 66 04 00 	mov    %r15w,0x466(%r8)
   14c02:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14c03:	41 89 80 24 04 00 00 	mov    %eax,0x424(%r8)
      code <<= 1;
   14c0a:	8d 04 09             	lea    (%rcx,%rcx,1),%eax
      next_code[i] = code;
   14c0d:	89 44 24 b0          	mov    %eax,-0x50(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14c11:	66 41 89 80 04 04 00 	mov    %ax,0x404(%r8)
   14c18:	00 
      code = (code + sizes[i]);
   14c19:	01 d0                	add    %edx,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   14c1b:	66 41 89 88 68 04 00 	mov    %cx,0x468(%r8)
   14c22:	00 
      if (sizes[i])
   14c23:	85 d2                	test   %edx,%edx
   14c25:	74 09                	je     14c30 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x1d0>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14c27:	83 f8 04             	cmp    $0x4,%eax
   14c2a:	0f 8f 48 04 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14c30:	41 89 c7             	mov    %eax,%r15d
      k += sizes[i];
   14c33:	01 ca                	add    %ecx,%edx
      code <<= 1;
   14c35:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14c37:	41 c1 e7 0e          	shl    $0xe,%r15d
      next_code[i] = code;
   14c3b:	89 44 24 b4          	mov    %eax,-0x4c(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14c3f:	66 41 89 80 06 04 00 	mov    %ax,0x406(%r8)
   14c46:	00 
      code = (code + sizes[i]);
   14c47:	44 01 c8             	add    %r9d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14c4a:	45 89 b8 28 04 00 00 	mov    %r15d,0x428(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14c51:	66 41 89 90 6a 04 00 	mov    %dx,0x46a(%r8)
   14c58:	00 
      if (sizes[i])
   14c59:	45 85 c9             	test   %r9d,%r9d
   14c5c:	74 09                	je     14c67 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x207>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14c5e:	83 f8 08             	cmp    $0x8,%eax
   14c61:	0f 8f 11 04 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14c67:	89 c1                	mov    %eax,%ecx
      k += sizes[i];
   14c69:	44 01 ca             	add    %r9d,%edx
      code <<= 1;
   14c6c:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14c6e:	c1 e1 0d             	shl    $0xd,%ecx
      next_code[i] = code;
   14c71:	89 44 24 b8          	mov    %eax,-0x48(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14c75:	66 41 89 80 08 04 00 	mov    %ax,0x408(%r8)
   14c7c:	00 
      code = (code + sizes[i]);
   14c7d:	44 01 d0             	add    %r10d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14c80:	41 89 88 2c 04 00 00 	mov    %ecx,0x42c(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14c87:	66 41 89 90 6c 04 00 	mov    %dx,0x46c(%r8)
   14c8e:	00 
      if (sizes[i])
   14c8f:	45 85 d2             	test   %r10d,%r10d
   14c92:	74 09                	je     14c9d <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x23d>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14c94:	83 f8 10             	cmp    $0x10,%eax
   14c97:	0f 8f db 03 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14c9d:	89 c1                	mov    %eax,%ecx
      k += sizes[i];
   14c9f:	44 01 d2             	add    %r10d,%edx
      code <<= 1;
   14ca2:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14ca4:	c1 e1 0c             	shl    $0xc,%ecx
      next_code[i] = code;
   14ca7:	89 44 24 bc          	mov    %eax,-0x44(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14cab:	66 41 89 80 0a 04 00 	mov    %ax,0x40a(%r8)
   14cb2:	00 
      code = (code + sizes[i]);
   14cb3:	44 01 d8             	add    %r11d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14cb6:	41 89 88 30 04 00 00 	mov    %ecx,0x430(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14cbd:	66 41 89 90 6e 04 00 	mov    %dx,0x46e(%r8)
   14cc4:	00 
      if (sizes[i])
   14cc5:	45 85 db             	test   %r11d,%r11d
   14cc8:	74 09                	je     14cd3 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x273>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14cca:	83 f8 20             	cmp    $0x20,%eax
   14ccd:	0f 8f a5 03 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14cd3:	89 c1                	mov    %eax,%ecx
      k += sizes[i];
   14cd5:	44 01 da             	add    %r11d,%edx
      code <<= 1;
   14cd8:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14cda:	c1 e1 0b             	shl    $0xb,%ecx
      next_code[i] = code;
   14cdd:	89 44 24 c0          	mov    %eax,-0x40(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14ce1:	66 41 89 80 0c 04 00 	mov    %ax,0x40c(%r8)
   14ce8:	00 
      code = (code + sizes[i]);
   14ce9:	01 d8                	add    %ebx,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14ceb:	41 89 88 34 04 00 00 	mov    %ecx,0x434(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14cf2:	66 41 89 90 70 04 00 	mov    %dx,0x470(%r8)
   14cf9:	00 
      if (sizes[i])
   14cfa:	85 db                	test   %ebx,%ebx
   14cfc:	74 09                	je     14d07 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x2a7>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14cfe:	83 f8 40             	cmp    $0x40,%eax
   14d01:	0f 8f 71 03 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14d07:	89 c1                	mov    %eax,%ecx
      k += sizes[i];
   14d09:	01 da                	add    %ebx,%edx
      code <<= 1;
   14d0b:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14d0d:	c1 e1 0a             	shl    $0xa,%ecx
      next_code[i] = code;
   14d10:	89 44 24 c4          	mov    %eax,-0x3c(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14d14:	66 41 89 80 0e 04 00 	mov    %ax,0x40e(%r8)
   14d1b:	00 
      code = (code + sizes[i]);
   14d1c:	01 e8                	add    %ebp,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14d1e:	41 89 88 38 04 00 00 	mov    %ecx,0x438(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14d25:	66 41 89 90 72 04 00 	mov    %dx,0x472(%r8)
   14d2c:	00 
      if (sizes[i])
   14d2d:	85 ed                	test   %ebp,%ebp
   14d2f:	74 0b                	je     14d3c <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x2dc>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14d31:	3d 80 00 00 00       	cmp    $0x80,%eax
   14d36:	0f 8f 3c 03 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14d3c:	89 c1                	mov    %eax,%ecx
      k += sizes[i];
   14d3e:	01 ea                	add    %ebp,%edx
      code <<= 1;
   14d40:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14d42:	c1 e1 09             	shl    $0x9,%ecx
      next_code[i] = code;
   14d45:	89 44 24 c8          	mov    %eax,-0x38(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14d49:	66 41 89 80 10 04 00 	mov    %ax,0x410(%r8)
   14d50:	00 
      code = (code + sizes[i]);
   14d51:	44 01 e0             	add    %r12d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14d54:	41 89 88 3c 04 00 00 	mov    %ecx,0x43c(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14d5b:	66 41 89 90 74 04 00 	mov    %dx,0x474(%r8)
   14d62:	00 
      if (sizes[i])
   14d63:	45 85 e4             	test   %r12d,%r12d
   14d66:	74 0b                	je     14d73 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x313>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14d68:	3d 00 01 00 00       	cmp    $0x100,%eax
   14d6d:	0f 8f 05 03 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14d73:	89 c1                	mov    %eax,%ecx
      k += sizes[i];
   14d75:	44 01 e2             	add    %r12d,%edx
      code <<= 1;
   14d78:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14d7a:	c1 e1 08             	shl    $0x8,%ecx
      next_code[i] = code;
   14d7d:	89 44 24 cc          	mov    %eax,-0x34(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14d81:	66 41 89 80 12 04 00 	mov    %ax,0x412(%r8)
   14d88:	00 
      code = (code + sizes[i]);
   14d89:	44 01 e8             	add    %r13d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14d8c:	41 89 88 40 04 00 00 	mov    %ecx,0x440(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14d93:	66 41 89 90 76 04 00 	mov    %dx,0x476(%r8)
   14d9a:	00 
      if (sizes[i])
   14d9b:	45 85 ed             	test   %r13d,%r13d
   14d9e:	74 0b                	je     14dab <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x34b>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14da0:	3d 00 02 00 00       	cmp    $0x200,%eax
   14da5:	0f 8f cd 02 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14dab:	89 c1                	mov    %eax,%ecx
      k += sizes[i];
   14dad:	44 01 ea             	add    %r13d,%edx
      code <<= 1;
   14db0:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14db2:	c1 e1 07             	shl    $0x7,%ecx
      next_code[i] = code;
   14db5:	89 44 24 d0          	mov    %eax,-0x30(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14db9:	66 41 89 80 14 04 00 	mov    %ax,0x414(%r8)
   14dc0:	00 
      code = (code + sizes[i]);
   14dc1:	44 01 f0             	add    %r14d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14dc4:	41 89 88 44 04 00 00 	mov    %ecx,0x444(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14dcb:	66 41 89 90 78 04 00 	mov    %dx,0x478(%r8)
   14dd2:	00 
      if (sizes[i])
   14dd3:	45 85 f6             	test   %r14d,%r14d
   14dd6:	74 0b                	je     14de3 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x383>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14dd8:	3d 00 04 00 00       	cmp    $0x400,%eax
   14ddd:	0f 8f 95 02 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14de3:	89 c1                	mov    %eax,%ecx
      code = (code + sizes[i]);
   14de5:	8b 5c 24 94          	mov    -0x6c(%rsp),%ebx
      code <<= 1;
   14de9:	01 c0                	add    %eax,%eax
      k += sizes[i];
   14deb:	44 01 f2             	add    %r14d,%edx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14dee:	c1 e1 06             	shl    $0x6,%ecx
      next_code[i] = code;
   14df1:	89 44 24 d4          	mov    %eax,-0x2c(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   14df5:	66 41 89 80 16 04 00 	mov    %ax,0x416(%r8)
   14dfc:	00 
      code = (code + sizes[i]);
   14dfd:	01 d8                	add    %ebx,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14dff:	41 89 88 48 04 00 00 	mov    %ecx,0x448(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14e06:	66 41 89 90 7a 04 00 	mov    %dx,0x47a(%r8)
   14e0d:	00 
      if (sizes[i])
   14e0e:	85 db                	test   %ebx,%ebx
   14e10:	74 0b                	je     14e1d <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x3bd>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14e12:	3d 00 08 00 00       	cmp    $0x800,%eax
   14e17:	0f 8f 5b 02 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      k += sizes[i];
   14e1d:	8b 5c 24 94          	mov    -0x6c(%rsp),%ebx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14e21:	89 c1                	mov    %eax,%ecx
      code <<= 1;
   14e23:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14e25:	c1 e1 05             	shl    $0x5,%ecx
      next_code[i] = code;
   14e28:	89 44 24 d8          	mov    %eax,-0x28(%rsp)
      k += sizes[i];
   14e2c:	01 da                	add    %ebx,%edx
      code = (code + sizes[i]);
   14e2e:	8b 5c 24 98          	mov    -0x68(%rsp),%ebx
      z->firstcode[i] = (stbi__uint16) code;
   14e32:	66 41 89 80 18 04 00 	mov    %ax,0x418(%r8)
   14e39:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14e3a:	41 89 88 4c 04 00 00 	mov    %ecx,0x44c(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14e41:	66 41 89 90 7c 04 00 	mov    %dx,0x47c(%r8)
   14e48:	00 
      code = (code + sizes[i]);
   14e49:	01 d8                	add    %ebx,%eax
      if (sizes[i])
   14e4b:	85 db                	test   %ebx,%ebx
   14e4d:	74 0b                	je     14e5a <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x3fa>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14e4f:	3d 00 10 00 00       	cmp    $0x1000,%eax
   14e54:	0f 8f 1e 02 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      k += sizes[i];
   14e5a:	8b 5c 24 98          	mov    -0x68(%rsp),%ebx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14e5e:	89 c1                	mov    %eax,%ecx
      code <<= 1;
   14e60:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14e62:	c1 e1 04             	shl    $0x4,%ecx
      next_code[i] = code;
   14e65:	89 44 24 dc          	mov    %eax,-0x24(%rsp)
      k += sizes[i];
   14e69:	01 da                	add    %ebx,%edx
      code = (code + sizes[i]);
   14e6b:	8b 5c 24 9c          	mov    -0x64(%rsp),%ebx
      z->firstcode[i] = (stbi__uint16) code;
   14e6f:	66 41 89 80 1a 04 00 	mov    %ax,0x41a(%r8)
   14e76:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14e77:	41 89 88 50 04 00 00 	mov    %ecx,0x450(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14e7e:	66 41 89 90 7e 04 00 	mov    %dx,0x47e(%r8)
   14e85:	00 
      code = (code + sizes[i]);
   14e86:	01 d8                	add    %ebx,%eax
      if (sizes[i])
   14e88:	85 db                	test   %ebx,%ebx
   14e8a:	74 0b                	je     14e97 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x437>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14e8c:	3d 00 20 00 00       	cmp    $0x2000,%eax
   14e91:	0f 8f e1 01 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      k += sizes[i];
   14e97:	8b 5c 24 9c          	mov    -0x64(%rsp),%ebx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14e9b:	8d 0c c5 00 00 00 00 	lea    0x0(,%rax,8),%ecx
      code <<= 1;
   14ea2:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   14ea4:	89 44 24 e0          	mov    %eax,-0x20(%rsp)
      k += sizes[i];
   14ea8:	01 da                	add    %ebx,%edx
      code = (code + sizes[i]);
   14eaa:	8b 5c 24 a0          	mov    -0x60(%rsp),%ebx
      z->firstcode[i] = (stbi__uint16) code;
   14eae:	66 41 89 80 1c 04 00 	mov    %ax,0x41c(%r8)
   14eb5:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14eb6:	41 89 88 54 04 00 00 	mov    %ecx,0x454(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14ebd:	66 41 89 90 80 04 00 	mov    %dx,0x480(%r8)
   14ec4:	00 
      code = (code + sizes[i]);
   14ec5:	01 d8                	add    %ebx,%eax
      if (sizes[i])
   14ec7:	85 db                	test   %ebx,%ebx
   14ec9:	74 0b                	je     14ed6 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x476>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   14ecb:	3d 00 40 00 00       	cmp    $0x4000,%eax
   14ed0:	0f 8f a2 01 00 00    	jg     15078 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x618>
      k += sizes[i];
   14ed6:	8b 5c 24 a0          	mov    -0x60(%rsp),%ebx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14eda:	8d 0c 85 00 00 00 00 	lea    0x0(,%rax,4),%ecx
      code <<= 1;
   14ee1:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   14ee3:	89 44 24 e4          	mov    %eax,-0x1c(%rsp)
      k += sizes[i];
   14ee7:	01 da                	add    %ebx,%edx
      code = (code + sizes[i]);
   14ee9:	8b 5c 24 a4          	mov    -0x5c(%rsp),%ebx
      z->firstcode[i] = (stbi__uint16) code;
   14eed:	66 41 89 80 1e 04 00 	mov    %ax,0x41e(%r8)
   14ef4:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14ef5:	41 89 88 58 04 00 00 	mov    %ecx,0x458(%r8)
      z->firstsymbol[i] = (stbi__uint16) k;
   14efc:	66 41 89 90 82 04 00 	mov    %dx,0x482(%r8)
   14f03:	00 
      code = (code + sizes[i]);
   14f04:	01 d8                	add    %ebx,%eax
      if (sizes[i])
   14f06:	85 db                	test   %ebx,%ebx
   14f08:	0f 85 5a 01 00 00    	jne    15068 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x608>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14f0e:	01 c0                	add    %eax,%eax
   z->maxcode[16] = 0x10000; // sentinel
   14f10:	31 d2                	xor    %edx,%edx
               j += (1 << s);
   14f12:	bd 01 00 00 00       	mov    $0x1,%ebp
   return stbi__bitreverse16(v) >> (16-bits);
   14f17:	bb 10 00 00 00       	mov    $0x10,%ebx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   14f1c:	41 89 80 5c 04 00 00 	mov    %eax,0x45c(%r8)
   z->maxcode[16] = 0x10000; // sentinel
   14f23:	41 c7 80 60 04 00 00 	movl   $0x10000,0x460(%r8)
   14f2a:	00 00 01 00 
   for (i=0; i < num; ++i) {
   14f2e:	eb 16                	jmp    14f46 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x4e6>
         ++next_code[s];
   14f30:	41 83 c1 01          	add    $0x1,%r9d
   14f34:	46 89 4c 94 a8       	mov    %r9d,-0x58(%rsp,%r10,4)
   for (i=0; i < num; ++i) {
   14f39:	48 83 c2 01          	add    $0x1,%rdx
   14f3d:	48 39 d7             	cmp    %rdx,%rdi
   14f40:	0f 84 0a 01 00 00    	je     15050 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5f0>
      int s = sizelist[i];
   14f46:	44 0f b6 2c 16       	movzbl (%rsi,%rdx,1),%r13d
   14f4b:	44 89 e9             	mov    %r13d,%ecx
      if (s) {
   14f4e:	45 85 ed             	test   %r13d,%r13d
   14f51:	74 e6                	je     14f39 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x4d9>
         int c = next_code[s] - z->firstcode[s] + z->firstsymbol[s];
   14f53:	4d 63 d5             	movslq %r13d,%r10
   14f56:	47 0f b7 9c 50 00 04 	movzwl 0x400(%r8,%r10,2),%r11d
   14f5d:	00 00 
   14f5f:	46 8b 4c 94 a8       	mov    -0x58(%rsp,%r10,4),%r9d
   14f64:	44 89 c8             	mov    %r9d,%eax
   14f67:	44 29 d8             	sub    %r11d,%eax
   14f6a:	47 0f b7 9c 50 64 04 	movzwl 0x464(%r8,%r10,2),%r11d
   14f71:	00 00 
   14f73:	44 01 d8             	add    %r11d,%eax
         z->size [c] = (stbi_uc     ) s;
   14f76:	48 98                	cltq
   14f78:	45 88 ac 00 84 04 00 	mov    %r13b,0x484(%r8,%rax,1)
   14f7f:	00 
         z->value[c] = (stbi__uint16) i;
   14f80:	66 41 89 94 40 a4 05 	mov    %dx,0x5a4(%r8,%rax,2)
   14f87:	00 00 
         if (s <= STBI__ZFAST_BITS) {
   14f89:	41 83 fd 09          	cmp    $0x9,%r13d
   14f8d:	7f a1                	jg     14f30 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x4d0>
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   14f8f:	45 89 cb             	mov    %r9d,%r11d
   14f92:	43 8d 04 09          	lea    (%r9,%r9,1),%eax
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   14f96:	45 89 ec             	mov    %r13d,%r12d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   14f99:	41 d1 fb             	sar    %r11d
   14f9c:	25 aa aa 00 00       	and    $0xaaaa,%eax
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   14fa1:	41 c1 e4 09          	shl    $0x9,%r12d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   14fa5:	41 81 e3 55 55 00 00 	and    $0x5555,%r11d
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   14fac:	41 09 d4             	or     %edx,%r12d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   14faf:	41 09 c3             	or     %eax,%r11d
  n = ((n & 0xCCCC) >>  2) | ((n & 0x3333) << 2);
   14fb2:	44 89 d8             	mov    %r11d,%eax
   14fb5:	41 c1 e3 02          	shl    $0x2,%r11d
   14fb9:	c1 f8 02             	sar    $0x2,%eax
   14fbc:	41 81 e3 cc cc 00 00 	and    $0xcccc,%r11d
   14fc3:	25 33 33 00 00       	and    $0x3333,%eax
   14fc8:	44 09 d8             	or     %r11d,%eax
  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);
   14fcb:	41 89 c3             	mov    %eax,%r11d
   14fce:	c1 e0 04             	shl    $0x4,%eax
   14fd1:	41 c1 fb 04          	sar    $0x4,%r11d
   14fd5:	25 f0 f0 00 00       	and    $0xf0f0,%eax
   14fda:	41 81 e3 0f 0f 00 00 	and    $0xf0f,%r11d
   14fe1:	41 09 c3             	or     %eax,%r11d
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   14fe4:	44 89 d8             	mov    %r11d,%eax
   14fe7:	41 c1 e3 08          	shl    $0x8,%r11d
   14feb:	45 0f b7 f3          	movzwl %r11w,%r14d
               j += (1 << s);
   14fef:	41 89 eb             	mov    %ebp,%r11d
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   14ff2:	c1 f8 08             	sar    $0x8,%eax
               j += (1 << s);
   14ff5:	41 d3 e3             	shl    %cl,%r11d
   return stbi__bitreverse16(v) >> (16-bits);
   14ff8:	89 d9                	mov    %ebx,%ecx
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   14ffa:	44 09 f0             	or     %r14d,%eax
   return stbi__bitreverse16(v) >> (16-bits);
   14ffd:	44 29 e9             	sub    %r13d,%ecx
   15000:	4d 63 db             	movslq %r11d,%r11
   15003:	d3 f8                	sar    %cl,%eax
   15005:	48 98                	cltq
   15007:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1500e:	00 00 
               z->fast[j] = fastv;
   15010:	66 45 89 24 40       	mov    %r12w,(%r8,%rax,2)
            while (j < (1 << STBI__ZFAST_BITS)) {
   15015:	4c 01 d8             	add    %r11,%rax
   15018:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1501d:	7e f1                	jle    15010 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5b0>
   1501f:	e9 0c ff ff ff       	jmp    14f30 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x4d0>
   15024:	0f 1f 40 00          	nopl   0x0(%rax)
   15028:	48 8d 05 1f 2a 02 00 	lea    0x22a1f(%rip),%rax        # 37a4e <_ZSt19piecewise_construct+0x107>
   stbi__g_failure_reason = str;
   1502f:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   15036:	ff ff 
}
   15038:	48 83 c4 40          	add    $0x40,%rsp
         return stbi__err("bad sizes", "Corrupt PNG");
   1503c:	31 c0                	xor    %eax,%eax
}
   1503e:	5b                   	pop    %rbx
   1503f:	5d                   	pop    %rbp
   15040:	41 5c                	pop    %r12
   15042:	41 5d                	pop    %r13
   15044:	41 5e                	pop    %r14
   15046:	41 5f                	pop    %r15
   15048:	c3                   	ret
   15049:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   15050:	48 83 c4 40          	add    $0x40,%rsp
   return 1;
   15054:	b8 01 00 00 00       	mov    $0x1,%eax
}
   15059:	5b                   	pop    %rbx
   1505a:	5d                   	pop    %rbp
   1505b:	41 5c                	pop    %r12
   1505d:	41 5d                	pop    %r13
   1505f:	41 5e                	pop    %r14
   15061:	41 5f                	pop    %r15
   15063:	c3                   	ret
   15064:	0f 1f 40 00          	nopl   0x0(%rax)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   15068:	3d 00 80 00 00       	cmp    $0x8000,%eax
   1506d:	0f 8e 9b fe ff ff    	jle    14f0e <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x4ae>
   15073:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   15078:	48 8d 05 bf 29 02 00 	lea    0x229bf(%rip),%rax        # 37a3e <_ZSt19piecewise_construct+0xf7>
   1507f:	eb ae                	jmp    1502f <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi+0x5cf>
   15081:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   15088:	00 00 00 00 
   1508c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000015090 <_ZL17stbi__malloc_mad3iiii>:
   if (a < 0 || b < 0) return 0;
   15090:	89 f8                	mov    %edi,%eax
{
   15092:	41 89 d0             	mov    %edx,%r8d
   if (a < 0 || b < 0) return 0;
   15095:	09 f0                	or     %esi,%eax
   15097:	78 29                	js     150c2 <_ZL17stbi__malloc_mad3iiii+0x32>
   if (b == 0) return 1; // mul-by-0 is always safe
   15099:	85 f6                	test   %esi,%esi
   1509b:	74 2b                	je     150c8 <_ZL17stbi__malloc_mad3iiii+0x38>
   return a <= INT_MAX/b;
   1509d:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   150a2:	31 d2                	xor    %edx,%edx
   150a4:	f7 fe                	idiv   %esi
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   150a6:	39 c7                	cmp    %eax,%edi
   150a8:	7f 18                	jg     150c2 <_ZL17stbi__malloc_mad3iiii+0x32>
   if (a < 0 || b < 0) return 0;
   150aa:	45 85 c0             	test   %r8d,%r8d
   150ad:	78 13                	js     150c2 <_ZL17stbi__malloc_mad3iiii+0x32>
   if (b == 0) return 1; // mul-by-0 is always safe
   150af:	74 47                	je     150f8 <_ZL17stbi__malloc_mad3iiii+0x68>
   return a <= INT_MAX/b;
   150b1:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   150b6:	0f af f7             	imul   %edi,%esi
   return a <= INT_MAX/b;
   150b9:	31 d2                	xor    %edx,%edx
   150bb:	41 f7 f8             	idiv   %r8d
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   150be:	39 c6                	cmp    %eax,%esi
   150c0:	7e 1e                	jle    150e0 <_ZL17stbi__malloc_mad3iiii+0x50>
}
   150c2:	31 c0                	xor    %eax,%eax
   150c4:	c3                   	ret
   150c5:	0f 1f 00             	nopl   (%rax)
   if (a < 0 || b < 0) return 0;
   150c8:	85 d2                	test   %edx,%edx
   150ca:	78 f6                	js     150c2 <_ZL17stbi__malloc_mad3iiii+0x32>
   return stbi__malloc(a*b*c + add);
   150cc:	01 f1                	add    %esi,%ecx
   150ce:	48 63 f9             	movslq %ecx,%rdi
    return STBI_MALLOC(size);
   150d1:	e9 8a 16 ff ff       	jmp    6760 <malloc@plt>
   150d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   150dd:	00 00 00 
      stbi__addsizes_valid(a*b*c, add);
   150e0:	41 0f af f0          	imul   %r8d,%esi
   return a <= INT_MAX - b;
   150e4:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   150e9:	29 c8                	sub    %ecx,%eax
   if (!stbi__mad3sizes_valid(a, b, c, add)) return NULL;
   150eb:	39 c6                	cmp    %eax,%esi
   150ed:	7e dd                	jle    150cc <_ZL17stbi__malloc_mad3iiii+0x3c>
   150ef:	eb d1                	jmp    150c2 <_ZL17stbi__malloc_mad3iiii+0x32>
   150f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   150f8:	31 f6                	xor    %esi,%esi
   150fa:	eb d0                	jmp    150cc <_ZL17stbi__malloc_mad3iiii+0x3c>
   150fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000015100 <_ZL20stbi__convert_formatPhiijj.part.0>:
static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)
   15100:	41 57                	push   %r15
   15102:	41 56                	push   %r14
   15104:	41 55                	push   %r13
   15106:	41 54                	push   %r12
   15108:	55                   	push   %rbp
   15109:	53                   	push   %rbx
   1510a:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
   15111:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
   15116:	89 8c 24 84 00 00 00 	mov    %ecx,0x84(%rsp)
   1511d:	44 89 44 24 48       	mov    %r8d,0x48(%rsp)
   if (a < 0 || b < 0) return 0;
   15122:	85 d2                	test   %edx,%edx
   15124:	78 4a                	js     15170 <_ZL20stbi__convert_formatPhiijj.part.0+0x70>
   15126:	85 c9                	test   %ecx,%ecx
   15128:	78 46                	js     15170 <_ZL20stbi__convert_formatPhiijj.part.0+0x70>
   1512a:	89 f5                	mov    %esi,%ebp
   1512c:	89 d3                	mov    %edx,%ebx
   if (b == 0) return 1; // mul-by-0 is always safe
   1512e:	0f 84 7c 00 00 00    	je     151b0 <_ZL20stbi__convert_formatPhiijj.part.0+0xb0>
   return a <= INT_MAX/b;
   15134:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   15139:	31 d2                	xor    %edx,%edx
   1513b:	f7 bc 24 84 00 00 00 	idivl  0x84(%rsp)
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   15142:	39 c3                	cmp    %eax,%ebx
   15144:	7f 2a                	jg     15170 <_ZL20stbi__convert_formatPhiijj.part.0+0x70>
   if (a < 0 || b < 0) return 0;
   15146:	44 8b 64 24 48       	mov    0x48(%rsp),%r12d
   1514b:	45 85 e4             	test   %r12d,%r12d
   1514e:	78 20                	js     15170 <_ZL20stbi__convert_formatPhiijj.part.0+0x70>
   if (b == 0) return 1; // mul-by-0 is always safe
   15150:	0f 84 94 1e 00 00    	je     16fea <_ZL20stbi__convert_formatPhiijj.part.0+0x1eea>
   return a <= INT_MAX/b;
   15156:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   1515b:	0f af cb             	imul   %ebx,%ecx
   return a <= INT_MAX/b;
   1515e:	31 d2                	xor    %edx,%edx
   15160:	f7 7c 24 48          	idivl  0x48(%rsp)
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   15164:	39 c1                	cmp    %eax,%ecx
   15166:	0f 8e 57 16 00 00    	jle    167c3 <_ZL20stbi__convert_formatPhiijj.part.0+0x16c3>
   1516c:	0f 1f 40 00          	nopl   0x0(%rax)
      STBI_FREE(data);
   15170:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   15175:	e8 26 15 ff ff       	call   66a0 <free@plt>
      return stbi__errpuc("outofmem", "Out of memory");
   1517a:	48 8d 05 b4 28 02 00 	lea    0x228b4(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   stbi__g_failure_reason = str;
   15181:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   15188:	ff ff 
      return stbi__errpuc("outofmem", "Out of memory");
   1518a:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
   15191:	00 00 
}
   15193:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   15198:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
   1519f:	5b                   	pop    %rbx
   151a0:	5d                   	pop    %rbp
   151a1:	41 5c                	pop    %r12
   151a3:	41 5d                	pop    %r13
   151a5:	41 5e                	pop    %r14
   151a7:	41 5f                	pop    %r15
   151a9:	c3                   	ret
   151aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (a < 0 || b < 0) return 0;
   151b0:	45 85 c0             	test   %r8d,%r8d
   151b3:	78 bb                	js     15170 <_ZL20stbi__convert_formatPhiijj.part.0+0x70>
    return STBI_MALLOC(size);
   151b5:	31 ff                	xor    %edi,%edi
   151b7:	e8 a4 15 ff ff       	call   6760 <malloc@plt>
   151bc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   if (good == NULL) {
   151c1:	48 85 c0             	test   %rax,%rax
   151c4:	74 aa                	je     15170 <_ZL20stbi__convert_formatPhiijj.part.0+0x70>
   for (j=0; j < (int) y; ++j) {
   151c6:	44 8b 5c 24 48       	mov    0x48(%rsp),%r11d
   151cb:	45 85 db             	test   %r11d,%r11d
   151ce:	0f 84 ec 00 00 00    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
   151d4:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
      unsigned char *dest = good + j * x * req_comp;
   151db:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
   151e2:	00 
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   151e3:	66 0f ef ed          	pxor   %xmm5,%xmm5
      unsigned char *dest = good + j * x * req_comp;
   151e7:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
   151ee:	00 
   151ef:	89 c7                	mov    %eax,%edi
   151f1:	0f af c3             	imul   %ebx,%eax
   for (j=0; j < (int) y; ++j) {
   151f4:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
   151fb:	00 
   151fc:	8d 5c eb f6          	lea    -0xa(%rbx,%rbp,8),%ebx
   15200:	0f af fd             	imul   %ebp,%edi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   15203:	41 89 dd             	mov    %ebx,%r13d
   15206:	49 89 dc             	mov    %rbx,%r12
   15209:	89 44 24 74          	mov    %eax,0x74(%rsp)
   1520d:	89 bc 24 80 00 00 00 	mov    %edi,0x80(%rsp)
      unsigned char *src  = data + j * x * img_n   ;
   15214:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
   15218:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
      unsigned char *dest = good + j * x * req_comp;
   1521d:	44 8b 44 24 18       	mov    0x18(%rsp),%r8d
   15222:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
      unsigned char *src  = data + j * x * img_n   ;
   15227:	48 01 d8             	add    %rbx,%rax
      unsigned char *dest = good + j * x * req_comp;
   1522a:	4a 8d 14 07          	lea    (%rdi,%r8,1),%rdx
      unsigned char *src  = data + j * x * img_n   ;
   1522e:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
      unsigned char *dest = good + j * x * req_comp;
   15233:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
      switch (STBI__COMBO(img_n, req_comp)) {
   15238:	41 83 fd 19          	cmp    $0x19,%r13d
   1523c:	77 12                	ja     15250 <_ZL20stbi__convert_formatPhiijj.part.0+0x150>
   1523e:	48 8d 3d 83 2d 02 00 	lea    0x22d83(%rip),%rdi        # 37fc8 <_ZSt19piecewise_construct+0x681>
   15245:	4a 63 0c a7          	movslq (%rdi,%r12,4),%rcx
   15249:	48 01 f9             	add    %rdi,%rcx
   1524c:	ff e1                	jmp    *%rcx
   1524e:	66 90                	xchg   %ax,%ax
         default: STBI_ASSERT(0); STBI_FREE(data); STBI_FREE(good); return stbi__errpuc("unsupported", "Unsupported format conversion");
   15250:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   15255:	e8 46 14 ff ff       	call   66a0 <free@plt>
   1525a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
   1525f:	e8 3c 14 ff ff       	call   66a0 <free@plt>
   15264:	48 8d 05 be 27 02 00 	lea    0x227be(%rip),%rax        # 37a29 <_ZSt19piecewise_construct+0xe2>
   1526b:	e9 11 ff ff ff       	jmp    15181 <_ZL20stbi__convert_formatPhiijj.part.0+0x81>
   15270:	44 89 4c 24 18       	mov    %r9d,0x18(%rsp)
   15275:	44 8b 6c 24 30       	mov    0x30(%rsp),%r13d
   1527a:	4d 89 fc             	mov    %r15,%r12
   1527d:	44 89 54 24 20       	mov    %r10d,0x20(%rsp)
   15282:	44 89 44 24 28       	mov    %r8d,0x28(%rsp)
   15287:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1528e:	00 00 
   for (j=0; j < (int) y; ++j) {
   15290:	8b bc 24 80 00 00 00 	mov    0x80(%rsp),%edi
   15297:	83 44 24 28 01       	addl   $0x1,0x28(%rsp)
   1529c:	01 7c 24 20          	add    %edi,0x20(%rsp)
   152a0:	8b 44 24 28          	mov    0x28(%rsp),%eax
   152a4:	8b 7c 24 74          	mov    0x74(%rsp),%edi
   152a8:	01 7c 24 18          	add    %edi,0x18(%rsp)
   152ac:	39 44 24 48          	cmp    %eax,0x48(%rsp)
   152b0:	0f 85 5e ff ff ff    	jne    15214 <_ZL20stbi__convert_formatPhiijj.part.0+0x114>
   152b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   152bd:	00 00 00 
   STBI_FREE(data);
   152c0:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   152c5:	e8 d6 13 ff ff       	call   66a0 <free@plt>
   return good;
   152ca:	e9 c4 fe ff ff       	jmp    15193 <_ZL20stbi__convert_formatPhiijj.part.0+0x93>
   152cf:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
   152d6:	44 8b 44 24 18       	mov    0x18(%rsp),%r8d
   152db:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   152e0:	8b 7c 24 28          	mov    0x28(%rsp),%edi
   152e4:	83 e8 01             	sub    $0x1,%eax
   152e7:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
   152ec:	8b 6c 24 48          	mov    0x48(%rsp),%ebp
   152f0:	49 89 c2             	mov    %rax,%r10
   152f3:	48 8d 14 85 04 00 00 	lea    0x4(,%rax,4),%rdx
   152fa:	00 
   152fb:	44 8b 5c 24 74       	mov    0x74(%rsp),%r11d
   15300:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
   15305:	8b 9c 24 80 00 00 00 	mov    0x80(%rsp),%ebx
   1530c:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
   15311:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
   15316:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1531d:	00 00 00 
         STBI__CASE(4,3) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];                    } break;
   15320:	41 83 fa ff          	cmp    $0xffffffff,%r10d
   15324:	0f 84 82 1c 00 00    	je     16fac <_ZL20stbi__convert_formatPhiijj.part.0+0x1eac>
   1532a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
   1532f:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   15333:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   15338:	0f b7 10             	movzwl (%rax),%edx
   1533b:	48 83 c0 04          	add    $0x4,%rax
   1533f:	48 83 c1 03          	add    $0x3,%rcx
   15343:	66 89 51 fd          	mov    %dx,-0x3(%rcx)
   15347:	0f b6 50 fe          	movzbl -0x2(%rax),%edx
   1534b:	88 51 ff             	mov    %dl,-0x1(%rcx)
   1534e:	48 39 f0             	cmp    %rsi,%rax
   15351:	75 e5                	jne    15338 <_ZL20stbi__convert_formatPhiijj.part.0+0x238>
   for (j=0; j < (int) y; ++j) {
   15353:	83 c7 01             	add    $0x1,%edi
   15356:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   1535b:	41 01 d9             	add    %ebx,%r9d
   1535e:	45 01 d8             	add    %r11d,%r8d
   15361:	39 fd                	cmp    %edi,%ebp
   15363:	0f 84 57 ff ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   15369:	44 89 c8             	mov    %r9d,%eax
      unsigned char *dest = good + j * x * req_comp;
   1536c:	44 89 c1             	mov    %r8d,%ecx
      unsigned char *src  = data + j * x * img_n   ;
   1536f:	4c 01 f8             	add    %r15,%rax
      unsigned char *dest = good + j * x * req_comp;
   15372:	4c 01 f1             	add    %r14,%rcx
      switch (STBI__COMBO(img_n, req_comp)) {
   15375:	eb a9                	jmp    15320 <_ZL20stbi__convert_formatPhiijj.part.0+0x220>
   15377:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
   1537e:	4c 89 64 24 40       	mov    %r12,0x40(%rsp)
         STBI__CASE(1,2) { dest[0]=src[0]; dest[1]=255;                                     } break;
   15383:	66 0f 76 c9          	pcmpeqd %xmm1,%xmm1
   15387:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
   1538c:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
   15391:	44 89 6c 24 38       	mov    %r13d,0x38(%rsp)
   15396:	89 fd                	mov    %edi,%ebp
   15398:	44 8d 7f ff          	lea    -0x1(%rdi),%r15d
   1539c:	89 fe                	mov    %edi,%esi
   1539e:	83 e7 0f             	and    $0xf,%edi
   153a1:	83 e5 f0             	and    $0xfffffff0,%ebp
   153a4:	89 7c 24 30          	mov    %edi,0x30(%rsp)
   153a8:	c1 ee 04             	shr    $0x4,%esi
   153ab:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
   153b0:	89 eb                	mov    %ebp,%ebx
   153b2:	44 8b 64 24 18       	mov    0x18(%rsp),%r12d
   153b7:	44 8b 6c 24 20       	mov    0x20(%rsp),%r13d
   153bc:	48 c1 e6 04          	shl    $0x4,%rsi
   153c0:	4c 8d 1c 1b          	lea    (%rbx,%rbx,1),%r11
   153c4:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
   153c9:	8b 5c 24 28          	mov    0x28(%rsp),%ebx
   153cd:	f3 0f 7e 1d eb 36 02 	movq   0x236eb(%rip),%xmm3        # 38ac0 <_ZL11stbi__bmask+0x340>
   153d4:	00 
   153d5:	4c 89 5c 24 28       	mov    %r11,0x28(%rsp)
   153da:	45 89 fb             	mov    %r15d,%r11d
   153dd:	0f 1f 00             	nopl   (%rax)
   153e0:	44 89 df             	mov    %r11d,%edi
   153e3:	41 83 fb ff          	cmp    $0xffffffff,%r11d
   153e7:	0f 84 69 1b 00 00    	je     16f56 <_ZL20stbi__convert_formatPhiijj.part.0+0x1e56>
   153ed:	41 83 fb 0e          	cmp    $0xe,%r11d
   153f1:	0f 86 e4 1b 00 00    	jbe    16fdb <_ZL20stbi__convert_formatPhiijj.part.0+0x1edb>
   153f7:	31 c9                	xor    %ecx,%ecx
   153f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   15400:	f3 0f 6f 04 08       	movdqu (%rax,%rcx,1),%xmm0
   15405:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   15409:	66 0f 68 c1          	punpckhbw %xmm1,%xmm0
   1540d:	66 0f 60 d1          	punpcklbw %xmm1,%xmm2
   15411:	0f 11 44 4a 10       	movups %xmm0,0x10(%rdx,%rcx,2)
   15416:	0f 11 14 4a          	movups %xmm2,(%rdx,%rcx,2)
   1541a:	48 83 c1 10          	add    $0x10,%rcx
   1541e:	48 39 ce             	cmp    %rcx,%rsi
   15421:	75 dd                	jne    15400 <_ZL20stbi__convert_formatPhiijj.part.0+0x300>
   15423:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   15428:	44 8b 54 24 30       	mov    0x30(%rsp),%r10d
   1542d:	41 89 e9             	mov    %ebp,%r9d
   15430:	48 8d 0c 38          	lea    (%rax,%rdi,1),%rcx
   15434:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
   15439:	48 01 fa             	add    %rdi,%rdx
   1543c:	44 89 df             	mov    %r11d,%edi
   1543f:	29 ef                	sub    %ebp,%edi
   15441:	45 85 d2             	test   %r10d,%r10d
   15444:	0f 84 be 00 00 00    	je     15508 <_ZL20stbi__convert_formatPhiijj.part.0+0x408>
   1544a:	44 8b 94 24 84 00 00 	mov    0x84(%rsp),%r10d
   15451:	00 
   15452:	45 29 ca             	sub    %r9d,%r10d
   15455:	45 8d 7a ff          	lea    -0x1(%r10),%r15d
   15459:	41 83 ff 06          	cmp    $0x6,%r15d
   1545d:	76 41                	jbe    154a0 <_ZL20stbi__convert_formatPhiijj.part.0+0x3a0>
   1545f:	f3 42 0f 7e 04 08    	movq   (%rax,%r9,1),%xmm0
   15465:	4f 8d 04 48          	lea    (%r8,%r9,2),%r8
   15469:	44 89 d0             	mov    %r10d,%eax
   1546c:	4d 01 f0             	add    %r14,%r8
   1546f:	83 e0 f8             	and    $0xfffffff8,%eax
   15472:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   15476:	66 0f 60 c3          	punpcklbw %xmm3,%xmm0
   1547a:	29 c7                	sub    %eax,%edi
   1547c:	66 0f 60 d3          	punpcklbw %xmm3,%xmm2
   15480:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   15485:	66 41 0f d6 10       	movq   %xmm2,(%r8)
   1548a:	66 41 0f d6 40 08    	movq   %xmm0,0x8(%r8)
   15490:	41 89 c0             	mov    %eax,%r8d
   15493:	4c 01 c1             	add    %r8,%rcx
   15496:	41 83 e2 07          	and    $0x7,%r10d
   1549a:	4a 8d 14 42          	lea    (%rdx,%r8,2),%rdx
   1549e:	74 68                	je     15508 <_ZL20stbi__convert_formatPhiijj.part.0+0x408>
   154a0:	0f b6 01             	movzbl (%rcx),%eax
   154a3:	c6 42 01 ff          	movb   $0xff,0x1(%rdx)
   154a7:	88 02                	mov    %al,(%rdx)
   154a9:	85 ff                	test   %edi,%edi
   154ab:	74 5b                	je     15508 <_ZL20stbi__convert_formatPhiijj.part.0+0x408>
   154ad:	0f b6 41 01          	movzbl 0x1(%rcx),%eax
   154b1:	c6 42 03 ff          	movb   $0xff,0x3(%rdx)
   154b5:	88 42 02             	mov    %al,0x2(%rdx)
   154b8:	83 ff 01             	cmp    $0x1,%edi
   154bb:	74 4b                	je     15508 <_ZL20stbi__convert_formatPhiijj.part.0+0x408>
   154bd:	0f b6 41 02          	movzbl 0x2(%rcx),%eax
   154c1:	c6 42 05 ff          	movb   $0xff,0x5(%rdx)
   154c5:	88 42 04             	mov    %al,0x4(%rdx)
   154c8:	83 ff 02             	cmp    $0x2,%edi
   154cb:	74 3b                	je     15508 <_ZL20stbi__convert_formatPhiijj.part.0+0x408>
   154cd:	0f b6 41 03          	movzbl 0x3(%rcx),%eax
   154d1:	c6 42 07 ff          	movb   $0xff,0x7(%rdx)
   154d5:	88 42 06             	mov    %al,0x6(%rdx)
   154d8:	83 ff 03             	cmp    $0x3,%edi
   154db:	74 2b                	je     15508 <_ZL20stbi__convert_formatPhiijj.part.0+0x408>
   154dd:	0f b6 41 04          	movzbl 0x4(%rcx),%eax
   154e1:	c6 42 09 ff          	movb   $0xff,0x9(%rdx)
   154e5:	88 42 08             	mov    %al,0x8(%rdx)
   154e8:	83 ff 04             	cmp    $0x4,%edi
   154eb:	74 1b                	je     15508 <_ZL20stbi__convert_formatPhiijj.part.0+0x408>
   154ed:	0f b6 41 05          	movzbl 0x5(%rcx),%eax
   154f1:	c6 42 0b ff          	movb   $0xff,0xb(%rdx)
   154f5:	88 42 0a             	mov    %al,0xa(%rdx)
   154f8:	83 ff 05             	cmp    $0x5,%edi
   154fb:	74 0b                	je     15508 <_ZL20stbi__convert_formatPhiijj.part.0+0x408>
   154fd:	0f b6 41 06          	movzbl 0x6(%rcx),%eax
   15501:	c6 42 0d ff          	movb   $0xff,0xd(%rdx)
   15505:	88 42 0c             	mov    %al,0xc(%rdx)
   for (j=0; j < (int) y; ++j) {
   15508:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
   1550f:	83 c3 01             	add    $0x1,%ebx
   15512:	41 01 c5             	add    %eax,%r13d
   15515:	8b 44 24 74          	mov    0x74(%rsp),%eax
   15519:	41 01 c4             	add    %eax,%r12d
   1551c:	39 5c 24 48          	cmp    %ebx,0x48(%rsp)
   15520:	0f 84 9a fd ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   15526:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   1552b:	44 89 e8             	mov    %r13d,%eax
      unsigned char *dest = good + j * x * req_comp;
   1552e:	45 89 e0             	mov    %r12d,%r8d
   15531:	4b 8d 14 06          	lea    (%r14,%r8,1),%rdx
      unsigned char *src  = data + j * x * img_n   ;
   15535:	48 01 f8             	add    %rdi,%rax
   15538:	48 89 c1             	mov    %rax,%rcx
      switch (STBI__COMBO(img_n, req_comp)) {
   1553b:	e9 a0 fe ff ff       	jmp    153e0 <_ZL20stbi__convert_formatPhiijj.part.0+0x2e0>
   15540:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
   15547:	44 89 6c 24 30       	mov    %r13d,0x30(%rsp)
   1554c:	4d 89 e7             	mov    %r12,%r15
   1554f:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
   15554:	44 8b 54 24 20       	mov    0x20(%rsp),%r10d
   15559:	83 e8 01             	sub    $0x1,%eax
   1555c:	44 8b 44 24 28       	mov    0x28(%rsp),%r8d
   15561:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
   15566:	49 89 c3             	mov    %rax,%r11
   15569:	48 8d 54 40 03       	lea    0x3(%rax,%rax,2),%rdx
   1556e:	8b 5c 24 74          	mov    0x74(%rsp),%ebx
   15572:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
   15577:	8b ac 24 80 00 00 00 	mov    0x80(%rsp),%ebp
   1557e:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
   15583:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
   15588:	44 8b 64 24 48       	mov    0x48(%rsp),%r12d
   1558d:	0f 1f 00             	nopl   (%rax)
         STBI__CASE(1,3) { dest[0]=dest[1]=dest[2]=src[0];                                  } break;
   15590:	41 83 fb ff          	cmp    $0xffffffff,%r11d
   15594:	0f 84 d6 fc ff ff    	je     15270 <_ZL20stbi__convert_formatPhiijj.part.0+0x170>
   1559a:	44 89 4c 24 18       	mov    %r9d,0x18(%rsp)
   1559f:	48 8d 3c 10          	lea    (%rax,%rdx,1),%rdi
   155a3:	49 89 d1             	mov    %rdx,%r9
   155a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   155ad:	00 00 00 
   155b0:	0f b6 16             	movzbl (%rsi),%edx
   155b3:	48 83 c0 03          	add    $0x3,%rax
   155b7:	48 83 c6 01          	add    $0x1,%rsi
   155bb:	0f b6 ca             	movzbl %dl,%ecx
   155be:	88 50 ff             	mov    %dl,-0x1(%rax)
   155c1:	88 d5                	mov    %dl,%ch
   155c3:	66 89 48 fd          	mov    %cx,-0x3(%rax)
   155c7:	48 39 f8             	cmp    %rdi,%rax
   155ca:	75 e4                	jne    155b0 <_ZL20stbi__convert_formatPhiijj.part.0+0x4b0>
   155cc:	4c 89 ca             	mov    %r9,%rdx
   155cf:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
   for (j=0; j < (int) y; ++j) {
   155d4:	41 83 c0 01          	add    $0x1,%r8d
   155d8:	41 01 ea             	add    %ebp,%r10d
   155db:	41 01 d9             	add    %ebx,%r9d
   155de:	45 39 c4             	cmp    %r8d,%r12d
   155e1:	0f 84 d9 fc ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   155e7:	44 89 d6             	mov    %r10d,%esi
      unsigned char *dest = good + j * x * req_comp;
   155ea:	44 89 c8             	mov    %r9d,%eax
      unsigned char *src  = data + j * x * img_n   ;
   155ed:	4c 01 f6             	add    %r14,%rsi
      unsigned char *dest = good + j * x * req_comp;
   155f0:	4c 01 e8             	add    %r13,%rax
      switch (STBI__COMBO(img_n, req_comp)) {
   155f3:	eb 9b                	jmp    15590 <_ZL20stbi__convert_formatPhiijj.part.0+0x490>
   155f5:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
   155fc:	44 89 6c 24 30       	mov    %r13d,0x30(%rsp)
   15601:	4d 89 e7             	mov    %r12,%r15
   15604:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
   15609:	44 8b 54 24 20       	mov    0x20(%rsp),%r10d
   1560e:	83 e8 01             	sub    $0x1,%eax
   15611:	44 8b 44 24 28       	mov    0x28(%rsp),%r8d
   15616:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
   1561b:	49 89 c3             	mov    %rax,%r11
   1561e:	8b 5c 24 74          	mov    0x74(%rsp),%ebx
   15622:	48 8d 14 85 04 00 00 	lea    0x4(,%rax,4),%rdx
   15629:	00 
   1562a:	8b ac 24 80 00 00 00 	mov    0x80(%rsp),%ebp
   15631:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
   15636:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
   1563b:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
   15640:	44 8b 64 24 48       	mov    0x48(%rsp),%r12d
   15645:	0f 1f 00             	nopl   (%rax)
         STBI__CASE(1,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=255;                     } break;
   15648:	41 83 fb ff          	cmp    $0xffffffff,%r11d
   1564c:	0f 84 1e fc ff ff    	je     15270 <_ZL20stbi__convert_formatPhiijj.part.0+0x170>
   15652:	44 89 4c 24 18       	mov    %r9d,0x18(%rsp)
   15657:	48 8d 3c 10          	lea    (%rax,%rdx,1),%rdi
   1565b:	49 89 d1             	mov    %rdx,%r9
   1565e:	66 90                	xchg   %ax,%ax
   15660:	0f b6 16             	movzbl (%rsi),%edx
   15663:	c6 40 03 ff          	movb   $0xff,0x3(%rax)
   15667:	48 83 c0 04          	add    $0x4,%rax
   1566b:	48 83 c6 01          	add    $0x1,%rsi
   1566f:	0f b6 ca             	movzbl %dl,%ecx
   15672:	88 50 fe             	mov    %dl,-0x2(%rax)
   15675:	88 d5                	mov    %dl,%ch
   15677:	66 89 48 fc          	mov    %cx,-0x4(%rax)
   1567b:	48 39 f8             	cmp    %rdi,%rax
   1567e:	75 e0                	jne    15660 <_ZL20stbi__convert_formatPhiijj.part.0+0x560>
   15680:	4c 89 ca             	mov    %r9,%rdx
   15683:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
   for (j=0; j < (int) y; ++j) {
   15688:	41 83 c0 01          	add    $0x1,%r8d
   1568c:	41 01 ea             	add    %ebp,%r10d
   1568f:	41 01 d9             	add    %ebx,%r9d
   15692:	45 39 c4             	cmp    %r8d,%r12d
   15695:	0f 84 25 fc ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   1569b:	44 89 d6             	mov    %r10d,%esi
      unsigned char *dest = good + j * x * req_comp;
   1569e:	44 89 c8             	mov    %r9d,%eax
      unsigned char *src  = data + j * x * img_n   ;
   156a1:	4c 01 f6             	add    %r14,%rsi
      unsigned char *dest = good + j * x * req_comp;
   156a4:	4c 01 e8             	add    %r13,%rax
      switch (STBI__COMBO(img_n, req_comp)) {
   156a7:	eb 9f                	jmp    15648 <_ZL20stbi__convert_formatPhiijj.part.0+0x548>
   156a9:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
   156b0:	44 89 6c 24 30       	mov    %r13d,0x30(%rsp)
   156b5:	4d 89 e7             	mov    %r12,%r15
   156b8:	44 8b 44 24 18       	mov    0x18(%rsp),%r8d
   156bd:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   156c2:	83 e8 01             	sub    $0x1,%eax
   156c5:	8b 7c 24 28          	mov    0x28(%rsp),%edi
   156c9:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
   156ce:	49 89 c2             	mov    %rax,%r10
   156d1:	48 8d 54 00 02       	lea    0x2(%rax,%rax,1),%rdx
   156d6:	44 8b 5c 24 74       	mov    0x74(%rsp),%r11d
   156db:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
   156e0:	8b ac 24 80 00 00 00 	mov    0x80(%rsp),%ebp
   156e7:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
   156ec:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
   156f1:	44 8b 64 24 48       	mov    0x48(%rsp),%r12d
   156f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   156fd:	00 00 00 
         STBI__CASE(2,3) { dest[0]=dest[1]=dest[2]=src[0];                                  } break;
   15700:	41 83 fa ff          	cmp    $0xffffffff,%r10d
   15704:	0f 84 ec 17 00 00    	je     16ef6 <_ZL20stbi__convert_formatPhiijj.part.0+0x1df6>
   1570a:	44 89 44 24 18       	mov    %r8d,0x18(%rsp)
   1570f:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   15713:	49 89 d0             	mov    %rdx,%r8
   15716:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1571d:	00 00 00 
   15720:	0f b6 10             	movzbl (%rax),%edx
   15723:	48 83 c0 02          	add    $0x2,%rax
   15727:	48 83 c1 03          	add    $0x3,%rcx
   1572b:	0f b6 da             	movzbl %dl,%ebx
   1572e:	88 51 ff             	mov    %dl,-0x1(%rcx)
   15731:	88 d7                	mov    %dl,%bh
   15733:	66 89 59 fd          	mov    %bx,-0x3(%rcx)
   15737:	48 39 f0             	cmp    %rsi,%rax
   1573a:	75 e4                	jne    15720 <_ZL20stbi__convert_formatPhiijj.part.0+0x620>
   1573c:	4c 89 c2             	mov    %r8,%rdx
   1573f:	44 8b 44 24 18       	mov    0x18(%rsp),%r8d
   for (j=0; j < (int) y; ++j) {
   15744:	83 c7 01             	add    $0x1,%edi
   15747:	41 01 e9             	add    %ebp,%r9d
   1574a:	45 01 d8             	add    %r11d,%r8d
   1574d:	41 39 fc             	cmp    %edi,%r12d
   15750:	0f 84 6a fb ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   15756:	44 89 c8             	mov    %r9d,%eax
      unsigned char *dest = good + j * x * req_comp;
   15759:	44 89 c1             	mov    %r8d,%ecx
      unsigned char *src  = data + j * x * img_n   ;
   1575c:	4c 01 f0             	add    %r14,%rax
      unsigned char *dest = good + j * x * req_comp;
   1575f:	4c 01 e9             	add    %r13,%rcx
      switch (STBI__COMBO(img_n, req_comp)) {
   15762:	eb 9c                	jmp    15700 <_ZL20stbi__convert_formatPhiijj.part.0+0x600>
   15764:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
   1576b:	44 89 6c 24 38       	mov    %r13d,0x38(%rsp)
   15770:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
   15775:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
   1577a:	4c 89 64 24 40       	mov    %r12,0x40(%rsp)
   1577f:	89 f8                	mov    %edi,%eax
   15781:	8d 77 ff             	lea    -0x1(%rdi),%esi
   15784:	83 e7 f0             	and    $0xfffffff0,%edi
   15787:	66 0f 6f 25 81 30 02 	movdqa 0x23081(%rip),%xmm4        # 38810 <_ZL11stbi__bmask+0x90>
   1578e:	00 
   1578f:	c1 e8 04             	shr    $0x4,%eax
   15792:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
   15797:	44 8b 64 24 20       	mov    0x20(%rsp),%r12d
   1579c:	48 c1 e0 05          	shl    $0x5,%rax
   157a0:	8b 6c 24 18          	mov    0x18(%rsp),%ebp
         STBI__CASE(2,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=src[1];                  } break;
   157a4:	f3 0f 7e 35 64 30 02 	movq   0x23064(%rip),%xmm6        # 38810 <_ZL11stbi__bmask+0x90>
   157ab:	00 
   157ac:	49 89 c2             	mov    %rax,%r10
   157af:	89 f8                	mov    %edi,%eax
   157b1:	4c 8d 1c 00          	lea    (%rax,%rax,1),%r11
   157b5:	4c 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%r9
   157bc:	00 
   157bd:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
   157c2:	4c 89 54 24 18       	mov    %r10,0x18(%rsp)
   157c7:	4c 89 5c 24 30       	mov    %r11,0x30(%rsp)
   157cc:	44 8b 5c 24 28       	mov    0x28(%rsp),%r11d
   157d1:	41 89 f2             	mov    %esi,%r10d
   157d4:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
   157d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   157e0:	44 89 d1             	mov    %r10d,%ecx
   157e3:	41 83 fa ff          	cmp    $0xffffffff,%r10d
   157e7:	0f 84 ec 16 00 00    	je     16ed9 <_ZL20stbi__convert_formatPhiijj.part.0+0x1dd9>
   157ed:	41 83 fa 0e          	cmp    $0xe,%r10d
   157f1:	0f 86 dd 17 00 00    	jbe    16fd4 <_ZL20stbi__convert_formatPhiijj.part.0+0x1ed4>
   157f7:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
   157fc:	48 89 c6             	mov    %rax,%rsi
   157ff:	48 89 d1             	mov    %rdx,%rcx
   15802:	4d 8d 0c 07          	lea    (%r15,%rax,1),%r9
   15806:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1580d:	00 00 00 
   15810:	f3 0f 6f 06          	movdqu (%rsi),%xmm0
   15814:	f3 0f 6f 4e 10       	movdqu 0x10(%rsi),%xmm1
   15819:	48 83 c6 20          	add    $0x20,%rsi
   1581d:	48 83 c1 40          	add    $0x40,%rcx
   15821:	f3 0f 6f 56 f0       	movdqu -0x10(%rsi),%xmm2
   15826:	66 0f db cc          	pand   %xmm4,%xmm1
   1582a:	66 0f db c4          	pand   %xmm4,%xmm0
   1582e:	66 0f 67 c1          	packuswb %xmm1,%xmm0
   15832:	f3 0f 6f 4e e0       	movdqu -0x20(%rsi),%xmm1
   15837:	66 0f 71 d2 08       	psrlw  $0x8,%xmm2
   1583c:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   15840:	66 0f 6f f8          	movdqa %xmm0,%xmm7
   15844:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   15849:	66 0f 60 d8          	punpcklbw %xmm0,%xmm3
   1584d:	66 0f 67 ca          	packuswb %xmm2,%xmm1
   15851:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   15855:	66 0f 68 d0          	punpckhbw %xmm0,%xmm2
   15859:	66 0f 60 f9          	punpcklbw %xmm1,%xmm7
   1585d:	66 0f 68 c1          	punpckhbw %xmm1,%xmm0
   15861:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   15865:	66 0f 68 df          	punpckhbw %xmm7,%xmm3
   15869:	66 0f 60 cf          	punpcklbw %xmm7,%xmm1
   1586d:	0f 11 59 d0          	movups %xmm3,-0x30(%rcx)
   15871:	0f 11 49 c0          	movups %xmm1,-0x40(%rcx)
   15875:	66 0f 6f ca          	movdqa %xmm2,%xmm1
   15879:	66 0f 68 d0          	punpckhbw %xmm0,%xmm2
   1587d:	66 0f 60 c8          	punpcklbw %xmm0,%xmm1
   15881:	0f 11 51 f0          	movups %xmm2,-0x10(%rcx)
   15885:	0f 11 49 e0          	movups %xmm1,-0x20(%rcx)
   15889:	49 39 f1             	cmp    %rsi,%r9
   1588c:	75 82                	jne    15810 <_ZL20stbi__convert_formatPhiijj.part.0+0x710>
   1588e:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
   15893:	89 fe                	mov    %edi,%esi
   15895:	48 01 c8             	add    %rcx,%rax
   15898:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
   1589d:	48 01 ca             	add    %rcx,%rdx
   158a0:	44 89 d1             	mov    %r10d,%ecx
   158a3:	29 f9                	sub    %edi,%ecx
   158a5:	f6 84 24 84 00 00 00 	testb  $0xf,0x84(%rsp)
   158ac:	0f 
   158ad:	0f 84 c3 01 00 00    	je     15a76 <_ZL20stbi__convert_formatPhiijj.part.0+0x976>
   158b3:	44 8b 8c 24 84 00 00 	mov    0x84(%rsp),%r9d
   158ba:	00 
   158bb:	41 29 f1             	sub    %esi,%r9d
   158be:	45 8d 79 ff          	lea    -0x1(%r9),%r15d
   158c2:	41 83 ff 06          	cmp    $0x6,%r15d
   158c6:	0f 86 bb 00 00 00    	jbe    15987 <_ZL20stbi__convert_formatPhiijj.part.0+0x887>
   158cc:	48 8d 1c 73          	lea    (%rbx,%rsi,2),%rbx
   158d0:	66 0f 6f c6          	movdqa %xmm6,%xmm0
   158d4:	66 0f 6f de          	movdqa %xmm6,%xmm3
   158d8:	4c 01 f3             	add    %r14,%rbx
   158db:	49 8d 34 b0          	lea    (%r8,%rsi,4),%rsi
   158df:	f3 0f 7e 0b          	movq   (%rbx),%xmm1
   158e3:	f3 0f 7e 53 08       	movq   0x8(%rbx),%xmm2
   158e8:	4c 01 ee             	add    %r13,%rsi
   158eb:	66 0f db da          	pand   %xmm2,%xmm3
   158ef:	66 0f 71 d2 08       	psrlw  $0x8,%xmm2
   158f4:	66 0f db c1          	pand   %xmm1,%xmm0
   158f8:	66 0f 67 c3          	packuswb %xmm3,%xmm0
   158fc:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   15901:	66 0f 70 c0 08       	pshufd $0x8,%xmm0,%xmm0
   15906:	66 0f 67 ca          	packuswb %xmm2,%xmm1
   1590a:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   1590e:	66 0f 70 c9 08       	pshufd $0x8,%xmm1,%xmm1
   15913:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   15917:	66 0f 60 d8          	punpcklbw %xmm0,%xmm3
   1591b:	66 0f 6f f8          	movdqa %xmm0,%xmm7
   1591f:	66 0f 60 d0          	punpcklbw %xmm0,%xmm2
   15923:	66 0f 60 f9          	punpcklbw %xmm1,%xmm7
   15927:	66 0f 60 c1          	punpcklbw %xmm1,%xmm0
   1592b:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   1592f:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   15934:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   15939:	66 0f 60 cf          	punpcklbw %xmm7,%xmm1
   1593d:	66 0f d6 0e          	movq   %xmm1,(%rsi)
   15941:	66 0f 60 df          	punpcklbw %xmm7,%xmm3
   15945:	66 0f 6f ca          	movdqa %xmm2,%xmm1
   15949:	66 0f 60 d0          	punpcklbw %xmm0,%xmm2
   1594d:	66 0f 70 db 4e       	pshufd $0x4e,%xmm3,%xmm3
   15952:	66 0f 60 c8          	punpcklbw %xmm0,%xmm1
   15956:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   1595b:	66 0f d6 5e 08       	movq   %xmm3,0x8(%rsi)
   15960:	66 0f d6 4e 10       	movq   %xmm1,0x10(%rsi)
   15965:	66 0f d6 56 18       	movq   %xmm2,0x18(%rsi)
   1596a:	44 89 ce             	mov    %r9d,%esi
   1596d:	83 e6 f8             	and    $0xfffffff8,%esi
   15970:	41 89 f0             	mov    %esi,%r8d
   15973:	29 f1                	sub    %esi,%ecx
   15975:	41 83 e1 07          	and    $0x7,%r9d
   15979:	4a 8d 04 40          	lea    (%rax,%r8,2),%rax
   1597d:	4a 8d 14 82          	lea    (%rdx,%r8,4),%rdx
   15981:	0f 84 ef 00 00 00    	je     15a76 <_ZL20stbi__convert_formatPhiijj.part.0+0x976>
   15987:	0f b6 30             	movzbl (%rax),%esi
   1598a:	40 88 72 02          	mov    %sil,0x2(%rdx)
   1598e:	40 88 72 01          	mov    %sil,0x1(%rdx)
   15992:	40 88 32             	mov    %sil,(%rdx)
   15995:	0f b6 70 01          	movzbl 0x1(%rax),%esi
   15999:	40 88 72 03          	mov    %sil,0x3(%rdx)
   1599d:	85 c9                	test   %ecx,%ecx
   1599f:	0f 84 d1 00 00 00    	je     15a76 <_ZL20stbi__convert_formatPhiijj.part.0+0x976>
   159a5:	0f b6 70 03          	movzbl 0x3(%rax),%esi
   159a9:	44 0f b6 40 02       	movzbl 0x2(%rax),%r8d
   159ae:	c1 e6 08             	shl    $0x8,%esi
   159b1:	44 09 c6             	or     %r8d,%esi
   159b4:	c1 e6 08             	shl    $0x8,%esi
   159b7:	44 09 c6             	or     %r8d,%esi
   159ba:	c1 e6 08             	shl    $0x8,%esi
   159bd:	44 09 c6             	or     %r8d,%esi
   159c0:	89 72 04             	mov    %esi,0x4(%rdx)
   159c3:	83 f9 01             	cmp    $0x1,%ecx
   159c6:	0f 84 aa 00 00 00    	je     15a76 <_ZL20stbi__convert_formatPhiijj.part.0+0x976>
   159cc:	0f b6 70 05          	movzbl 0x5(%rax),%esi
   159d0:	44 0f b6 40 04       	movzbl 0x4(%rax),%r8d
   159d5:	c1 e6 08             	shl    $0x8,%esi
   159d8:	44 09 c6             	or     %r8d,%esi
   159db:	c1 e6 08             	shl    $0x8,%esi
   159de:	44 09 c6             	or     %r8d,%esi
   159e1:	c1 e6 08             	shl    $0x8,%esi
   159e4:	44 09 c6             	or     %r8d,%esi
   159e7:	89 72 08             	mov    %esi,0x8(%rdx)
   159ea:	83 f9 02             	cmp    $0x2,%ecx
   159ed:	0f 84 83 00 00 00    	je     15a76 <_ZL20stbi__convert_formatPhiijj.part.0+0x976>
   159f3:	0f b6 70 07          	movzbl 0x7(%rax),%esi
   159f7:	44 0f b6 40 06       	movzbl 0x6(%rax),%r8d
   159fc:	c1 e6 08             	shl    $0x8,%esi
   159ff:	44 09 c6             	or     %r8d,%esi
   15a02:	c1 e6 08             	shl    $0x8,%esi
   15a05:	44 09 c6             	or     %r8d,%esi
   15a08:	c1 e6 08             	shl    $0x8,%esi
   15a0b:	44 09 c6             	or     %r8d,%esi
   15a0e:	89 72 0c             	mov    %esi,0xc(%rdx)
   15a11:	83 f9 03             	cmp    $0x3,%ecx
   15a14:	74 60                	je     15a76 <_ZL20stbi__convert_formatPhiijj.part.0+0x976>
   15a16:	0f b6 70 09          	movzbl 0x9(%rax),%esi
   15a1a:	44 0f b6 40 08       	movzbl 0x8(%rax),%r8d
   15a1f:	c1 e6 08             	shl    $0x8,%esi
   15a22:	44 09 c6             	or     %r8d,%esi
   15a25:	c1 e6 08             	shl    $0x8,%esi
   15a28:	44 09 c6             	or     %r8d,%esi
   15a2b:	c1 e6 08             	shl    $0x8,%esi
   15a2e:	44 09 c6             	or     %r8d,%esi
   15a31:	89 72 10             	mov    %esi,0x10(%rdx)
   15a34:	83 f9 04             	cmp    $0x4,%ecx
   15a37:	74 3d                	je     15a76 <_ZL20stbi__convert_formatPhiijj.part.0+0x976>
   15a39:	0f b6 70 0b          	movzbl 0xb(%rax),%esi
   15a3d:	44 0f b6 40 0a       	movzbl 0xa(%rax),%r8d
   15a42:	c1 e6 08             	shl    $0x8,%esi
   15a45:	44 09 c6             	or     %r8d,%esi
   15a48:	c1 e6 08             	shl    $0x8,%esi
   15a4b:	44 09 c6             	or     %r8d,%esi
   15a4e:	c1 e6 08             	shl    $0x8,%esi
   15a51:	44 09 c6             	or     %r8d,%esi
   15a54:	89 72 14             	mov    %esi,0x14(%rdx)
   15a57:	83 f9 05             	cmp    $0x5,%ecx
   15a5a:	74 1a                	je     15a76 <_ZL20stbi__convert_formatPhiijj.part.0+0x976>
   15a5c:	0f b6 48 0d          	movzbl 0xd(%rax),%ecx
   15a60:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
   15a64:	c1 e1 08             	shl    $0x8,%ecx
   15a67:	09 c1                	or     %eax,%ecx
   15a69:	c1 e1 08             	shl    $0x8,%ecx
   15a6c:	09 c1                	or     %eax,%ecx
   15a6e:	c1 e1 08             	shl    $0x8,%ecx
   15a71:	09 c1                	or     %eax,%ecx
   15a73:	89 4a 18             	mov    %ecx,0x18(%rdx)
   for (j=0; j < (int) y; ++j) {
   15a76:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
   15a7d:	41 83 c3 01          	add    $0x1,%r11d
   15a81:	41 01 c4             	add    %eax,%r12d
   15a84:	8b 44 24 74          	mov    0x74(%rsp),%eax
   15a88:	01 c5                	add    %eax,%ebp
   15a8a:	44 39 5c 24 48       	cmp    %r11d,0x48(%rsp)
   15a8f:	0f 84 2b f8 ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   15a95:	44 89 e3             	mov    %r12d,%ebx
      unsigned char *dest = good + j * x * req_comp;
   15a98:	41 89 e8             	mov    %ebp,%r8d
      unsigned char *src  = data + j * x * img_n   ;
   15a9b:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
      unsigned char *dest = good + j * x * req_comp;
   15a9f:	4b 8d 54 05 00       	lea    0x0(%r13,%r8,1),%rdx
      switch (STBI__COMBO(img_n, req_comp)) {
   15aa4:	e9 37 fd ff ff       	jmp    157e0 <_ZL20stbi__convert_formatPhiijj.part.0+0x6e0>
   15aa9:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
   15ab0:	4c 89 64 24 30       	mov    %r12,0x30(%rsp)
   15ab5:	44 89 e9             	mov    %r13d,%ecx
   15ab8:	44 8b 54 24 18       	mov    0x18(%rsp),%r10d
   15abd:	44 8b 5c 24 20       	mov    0x20(%rsp),%r11d
   15ac2:	83 e8 01             	sub    $0x1,%eax
   15ac5:	44 8b 4c 24 28       	mov    0x28(%rsp),%r9d
   15aca:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
   15acf:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
   15ad4:	8b 6c 24 74          	mov    0x74(%rsp),%ebp
   15ad8:	48 89 c3             	mov    %rax,%rbx
   15adb:	48 8d 74 40 03       	lea    0x3(%rax,%rax,2),%rsi
   15ae0:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
   15ae5:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
   15aea:	44 8b 6c 24 48       	mov    0x48(%rsp),%r13d
   15aef:	44 8b a4 24 80 00 00 	mov    0x80(%rsp),%r12d
   15af6:	00 
   15af7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   15afe:	00 00 
         STBI__CASE(3,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   15b00:	83 fb ff             	cmp    $0xffffffff,%ebx
   15b03:	0f 84 1d 14 00 00    	je     16f26 <_ZL20stbi__convert_formatPhiijj.part.0+0x1e26>
   15b09:	44 89 54 24 18       	mov    %r10d,0x18(%rsp)
   15b0e:	4c 8d 04 32          	lea    (%rdx,%rsi,1),%r8
   15b12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   15b18:	0f b6 02             	movzbl (%rdx),%eax
   15b1b:	44 0f b6 52 01       	movzbl 0x1(%rdx),%r10d
   15b20:	48 83 c2 03          	add    $0x3,%rdx
   15b24:	48 83 c7 01          	add    $0x1,%rdi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   15b28:	45 69 d2 96 00 00 00 	imul   $0x96,%r10d,%r10d
   15b2f:	6b c0 4d             	imul   $0x4d,%eax,%eax
   15b32:	44 01 d0             	add    %r10d,%eax
         STBI__CASE(3,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   15b35:	44 0f b6 52 ff       	movzbl -0x1(%rdx),%r10d
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   15b3a:	45 6b d2 1d          	imul   $0x1d,%r10d,%r10d
   15b3e:	44 01 d0             	add    %r10d,%eax
   15b41:	88 67 ff             	mov    %ah,-0x1(%rdi)
         STBI__CASE(3,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   15b44:	4c 39 c2             	cmp    %r8,%rdx
   15b47:	75 cf                	jne    15b18 <_ZL20stbi__convert_formatPhiijj.part.0+0xa18>
   15b49:	44 8b 54 24 18       	mov    0x18(%rsp),%r10d
   for (j=0; j < (int) y; ++j) {
   15b4e:	41 83 c1 01          	add    $0x1,%r9d
   15b52:	45 01 e3             	add    %r12d,%r11d
   15b55:	41 01 ea             	add    %ebp,%r10d
   15b58:	45 39 cd             	cmp    %r9d,%r13d
   15b5b:	0f 84 5f f7 ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   15b61:	44 89 da             	mov    %r11d,%edx
      unsigned char *dest = good + j * x * req_comp;
   15b64:	44 89 d7             	mov    %r10d,%edi
      unsigned char *src  = data + j * x * img_n   ;
   15b67:	4c 01 fa             	add    %r15,%rdx
      unsigned char *dest = good + j * x * req_comp;
   15b6a:	4c 01 f7             	add    %r14,%rdi
      switch (STBI__COMBO(img_n, req_comp)) {
   15b6d:	eb 91                	jmp    15b00 <_ZL20stbi__convert_formatPhiijj.part.0+0xa00>
   15b6f:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
   15b76:	4c 89 64 24 30       	mov    %r12,0x30(%rsp)
   15b7b:	44 89 ef             	mov    %r13d,%edi
   15b7e:	44 8b 54 24 18       	mov    0x18(%rsp),%r10d
   15b83:	44 8b 5c 24 20       	mov    0x20(%rsp),%r11d
   15b88:	83 e8 01             	sub    $0x1,%eax
   15b8b:	44 8b 4c 24 28       	mov    0x28(%rsp),%r9d
   15b90:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
   15b95:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
   15b9a:	8b 6c 24 74          	mov    0x74(%rsp),%ebp
   15b9e:	48 89 c3             	mov    %rax,%rbx
   15ba1:	48 8d 74 40 03       	lea    0x3(%rax,%rax,2),%rsi
   15ba6:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
   15bab:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
   15bb0:	44 8b 6c 24 48       	mov    0x48(%rsp),%r13d
   15bb5:	44 8b a4 24 80 00 00 	mov    0x80(%rsp),%r12d
   15bbc:	00 
   15bbd:	0f 1f 00             	nopl   (%rax)
         STBI__CASE(3,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = 255;    } break;
   15bc0:	83 fb ff             	cmp    $0xffffffff,%ebx
   15bc3:	0f 84 c7 13 00 00    	je     16f90 <_ZL20stbi__convert_formatPhiijj.part.0+0x1e90>
   15bc9:	44 89 54 24 18       	mov    %r10d,0x18(%rsp)
   15bce:	4c 8d 04 32          	lea    (%rdx,%rsi,1),%r8
   15bd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   15bd8:	0f b6 02             	movzbl (%rdx),%eax
   15bdb:	44 0f b6 52 01       	movzbl 0x1(%rdx),%r10d
   15be0:	48 83 c2 03          	add    $0x3,%rdx
   15be4:	c6 41 01 ff          	movb   $0xff,0x1(%rcx)
   15be8:	48 83 c1 02          	add    $0x2,%rcx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   15bec:	45 69 d2 96 00 00 00 	imul   $0x96,%r10d,%r10d
   15bf3:	6b c0 4d             	imul   $0x4d,%eax,%eax
   15bf6:	44 01 d0             	add    %r10d,%eax
         STBI__CASE(3,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = 255;    } break;
   15bf9:	44 0f b6 52 ff       	movzbl -0x1(%rdx),%r10d
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   15bfe:	45 6b d2 1d          	imul   $0x1d,%r10d,%r10d
   15c02:	44 01 d0             	add    %r10d,%eax
   15c05:	88 61 fe             	mov    %ah,-0x2(%rcx)
         STBI__CASE(3,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = 255;    } break;
   15c08:	4c 39 c2             	cmp    %r8,%rdx
   15c0b:	75 cb                	jne    15bd8 <_ZL20stbi__convert_formatPhiijj.part.0+0xad8>
   15c0d:	44 8b 54 24 18       	mov    0x18(%rsp),%r10d
   for (j=0; j < (int) y; ++j) {
   15c12:	41 83 c1 01          	add    $0x1,%r9d
   15c16:	45 01 e3             	add    %r12d,%r11d
   15c19:	41 01 ea             	add    %ebp,%r10d
   15c1c:	45 39 cd             	cmp    %r9d,%r13d
   15c1f:	0f 84 9b f6 ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   15c25:	44 89 da             	mov    %r11d,%edx
      unsigned char *dest = good + j * x * req_comp;
   15c28:	44 89 d1             	mov    %r10d,%ecx
      unsigned char *src  = data + j * x * img_n   ;
   15c2b:	4c 01 fa             	add    %r15,%rdx
      unsigned char *dest = good + j * x * req_comp;
   15c2e:	4c 01 f1             	add    %r14,%rcx
      switch (STBI__COMBO(img_n, req_comp)) {
   15c31:	eb 8d                	jmp    15bc0 <_ZL20stbi__convert_formatPhiijj.part.0+0xac0>
   15c33:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
   15c3a:	44 89 ac 24 c4 00 00 	mov    %r13d,0xc4(%rsp)
   15c41:	00 
   15c42:	48 89 da             	mov    %rbx,%rdx
   15c45:	4c 89 a4 24 c8 00 00 	mov    %r12,0xc8(%rsp)
   15c4c:	00 
   15c4d:	8d 47 ff             	lea    -0x1(%rdi),%eax
   15c50:	89 84 24 a8 00 00 00 	mov    %eax,0xa8(%rsp)
   15c57:	89 f8                	mov    %edi,%eax
   15c59:	c1 e8 04             	shr    $0x4,%eax
   15c5c:	48 c1 e0 06          	shl    $0x6,%rax
   15c60:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   15c67:	00 
   15c68:	89 f8                	mov    %edi,%eax
   15c6a:	83 e7 0f             	and    $0xf,%edi
   15c6d:	83 e0 f0             	and    $0xfffffff0,%eax
   15c70:	89 bc 24 c0 00 00 00 	mov    %edi,0xc0(%rsp)
   15c77:	48 8d 34 40          	lea    (%rax,%rax,2),%rsi
   15c7b:	89 84 24 ac 00 00 00 	mov    %eax,0xac(%rsp)
   15c82:	48 c1 e0 02          	shl    $0x2,%rax
   15c86:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
   15c8d:	00 
   15c8e:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
   15c95:	00 
   15c96:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15c9d:	00 00 00 
         STBI__CASE(3,4) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];dest[3]=255;        } break;
   15ca0:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
   15ca7:	41 89 c2             	mov    %eax,%r10d
   15caa:	83 f8 ff             	cmp    $0xffffffff,%eax
   15cad:	0f 84 5e 12 00 00    	je     16f11 <_ZL20stbi__convert_formatPhiijj.part.0+0x1e11>
   15cb3:	83 f8 0e             	cmp    $0xe,%eax
   15cb6:	0f 86 11 13 00 00    	jbe    16fcd <_ZL20stbi__convert_formatPhiijj.part.0+0x1ecd>
   15cbc:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
   15cc1:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
   15cc6:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
   15ccd:	00 
   15cce:	4c 89 84 24 98 00 00 	mov    %r8,0x98(%rsp)
   15cd5:	00 
   15cd6:	4c 8b 54 24 78       	mov    0x78(%rsp),%r10
   15cdb:	4e 8d 4c 03 03       	lea    0x3(%rbx,%r8,1),%r9
   15ce0:	48 8b 9c 24 a0 00 00 	mov    0xa0(%rsp),%rbx
   15ce7:	00 
   15ce8:	48 89 c1             	mov    %rax,%rcx
   15ceb:	48 01 d8             	add    %rbx,%rax
   15cee:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
   15cf5:	00 
   15cf6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15cfd:	00 00 00 
   15d00:	41 0f b7 5a 03       	movzwl 0x3(%r10),%ebx
   15d05:	41 0f b6 7a 0f       	movzbl 0xf(%r10),%edi
   15d0a:	48 83 c1 40          	add    $0x40,%rcx
   15d0e:	49 83 c2 30          	add    $0x30,%r10
   15d12:	41 0f b6 72 de       	movzbl -0x22(%r10),%esi
   15d17:	41 0f b7 52 dc       	movzwl -0x24(%r10),%edx
   15d1c:	49 83 c1 40          	add    $0x40,%r9
   15d20:	41 0f b6 6a ed       	movzbl -0x13(%r10),%ebp
   15d25:	41 0f b6 42 d5       	movzbl -0x2b(%r10),%eax
   15d2a:	66 89 5c 24 58       	mov    %bx,0x58(%rsp)
   15d2f:	45 0f b6 5a db       	movzbl -0x25(%r10),%r11d
   15d34:	45 0f b7 42 ee       	movzwl -0x12(%r10),%r8d
   15d39:	40 88 7c 24 4f       	mov    %dil,0x4f(%rsp)
   15d3e:	41 0f b7 5a eb       	movzwl -0x15(%r10),%ebx
   15d43:	41 0f b6 7a ea       	movzbl -0x16(%r10),%edi
   15d48:	40 88 74 24 40       	mov    %sil,0x40(%rsp)
   15d4d:	41 0f b7 72 e8       	movzwl -0x18(%r10),%esi
   15d52:	45 0f b6 7a d2       	movzbl -0x2e(%r10),%r15d
   15d57:	66 89 54 24 5a       	mov    %dx,0x5a(%rsp)
   15d5c:	41 0f b6 52 e7       	movzbl -0x19(%r10),%edx
   15d61:	45 0f b7 62 d9       	movzwl -0x27(%r10),%r12d
   15d66:	40 88 6c 24 54       	mov    %bpl,0x54(%rsp)
   15d6b:	41 0f b7 6a e5       	movzwl -0x1b(%r10),%ebp
   15d70:	45 0f b6 6a d8       	movzbl -0x28(%r10),%r13d
   15d75:	88 44 24 30          	mov    %al,0x30(%rsp)
   15d79:	45 0f b7 72 d6       	movzwl -0x2a(%r10),%r14d
   15d7e:	44 88 5c 24 38       	mov    %r11b,0x38(%rsp)
   15d83:	66 44 89 44 24 62    	mov    %r8w,0x62(%rsp)
   15d89:	45 0f b7 5a e2       	movzwl -0x1e(%r10),%r11d
   15d8e:	45 0f b6 42 e4       	movzbl -0x1c(%r10),%r8d
   15d93:	40 88 7c 24 53       	mov    %dil,0x53(%rsp)
   15d98:	66 89 74 24 5e       	mov    %si,0x5e(%rsp)
   15d9d:	88 54 24 52          	mov    %dl,0x52(%rsp)
   15da1:	66 89 6c 24 5c       	mov    %bp,0x5c(%rsp)
   15da6:	66 89 5c 24 60       	mov    %bx,0x60(%rsp)
   15dab:	41 0f b6 5a e1       	movzbl -0x1f(%r10),%ebx
   15db0:	41 0f b6 7a e0       	movzbl -0x20(%r10),%edi
   15db5:	41 0f b7 42 fa       	movzwl -0x6(%r10),%eax
   15dba:	41 0f b7 52 fd       	movzwl -0x3(%r10),%edx
   15dbf:	41 0f b7 72 f1       	movzwl -0xf(%r10),%esi
   15dc4:	40 88 7c 24 50       	mov    %dil,0x50(%rsp)
   15dc9:	41 0f b6 7a fc       	movzbl -0x4(%r10),%edi
   15dce:	66 89 44 24 70       	mov    %ax,0x70(%rsp)
   15dd3:	41 0f b6 42 f3       	movzbl -0xd(%r10),%eax
   15dd8:	40 88 7c 24 57       	mov    %dil,0x57(%rsp)
   15ddd:	41 0f b7 7a f7       	movzwl -0x9(%r10),%edi
   15de2:	66 89 54 24 72       	mov    %dx,0x72(%rsp)
   15de7:	41 0f b6 52 f9       	movzbl -0x7(%r10),%edx
   15dec:	66 89 7c 24 66       	mov    %di,0x66(%rsp)
   15df1:	41 0f b7 7a f4       	movzwl -0xc(%r10),%edi
   15df6:	88 44 24 07          	mov    %al,0x7(%rsp)
   15dfa:	41 0f b7 42 d0       	movzwl -0x30(%r10),%eax
   15dff:	41 0f b6 6a ff       	movzbl -0x1(%r10),%ebp
   15e04:	88 54 24 56          	mov    %dl,0x56(%rsp)
   15e08:	66 89 7c 24 64       	mov    %di,0x64(%rsp)
   15e0d:	41 0f b6 52 f6       	movzbl -0xa(%r10),%edx
   15e12:	41 0f b6 7a f0       	movzbl -0x10(%r10),%edi
   15e17:	66 89 41 c0          	mov    %ax,-0x40(%rcx)
   15e1b:	44 88 79 c2          	mov    %r15b,-0x3e(%rcx)
   15e1f:	0f b6 44 24 30       	movzbl 0x30(%rsp),%eax
   15e24:	44 0f b7 7c 24 58    	movzwl 0x58(%rsp),%r15d
   15e2a:	66 44 89 71 c8       	mov    %r14w,-0x38(%rcx)
   15e2f:	88 41 c6             	mov    %al,-0x3a(%rcx)
   15e32:	66 44 89 79 c4       	mov    %r15w,-0x3c(%rcx)
   15e37:	66 44 89 61 cc       	mov    %r12w,-0x34(%rcx)
   15e3c:	88 54 24 55          	mov    %dl,0x55(%rsp)
   15e40:	44 88 69 ca          	mov    %r13b,-0x36(%rcx)
   15e44:	44 0f b6 6c 24 38    	movzbl 0x38(%rsp),%r13d
   15e4a:	44 0f b6 64 24 4f    	movzbl 0x4f(%rsp),%r12d
   15e50:	0f b7 54 24 50       	movzwl 0x50(%rsp),%edx
   15e55:	88 59 d6             	mov    %bl,-0x2a(%rcx)
   15e58:	44 0f b7 74 24 5a    	movzwl 0x5a(%rsp),%r14d
   15e5e:	44 0f b6 7c 24 40    	movzbl 0x40(%rsp),%r15d
   15e64:	44 88 69 ce          	mov    %r13b,-0x32(%rcx)
   15e68:	44 89 e0             	mov    %r12d,%eax
   15e6b:	0f b7 5c 24 60       	movzwl 0x60(%rsp),%ebx
   15e70:	66 44 89 59 d8       	mov    %r11w,-0x28(%rcx)
   15e75:	88 d4                	mov    %dl,%ah
   15e77:	66 44 89 71 d0       	mov    %r14w,-0x30(%rcx)
   15e7c:	44 0f b7 6c 24 5c    	movzwl 0x5c(%rsp),%r13d
   15e82:	44 0f b6 74 24 52    	movzbl 0x52(%rsp),%r14d
   15e88:	44 0f b7 5c 24 5e    	movzwl 0x5e(%rsp),%r11d
   15e8e:	66 89 41 d4          	mov    %ax,-0x2c(%rcx)
   15e92:	0f b6 44 24 54       	movzbl 0x54(%rsp),%eax
   15e97:	44 88 79 d2          	mov    %r15b,-0x2e(%rcx)
   15e9b:	44 88 41 da          	mov    %r8b,-0x26(%rcx)
   15e9f:	44 0f b6 7c 24 53    	movzbl 0x53(%rsp),%r15d
   15ea5:	88 41 e6             	mov    %al,-0x1a(%rcx)
   15ea8:	0f b6 44 24 07       	movzbl 0x7(%rsp),%eax
   15ead:	44 0f b7 44 24 62    	movzwl 0x62(%rsp),%r8d
   15eb3:	66 89 59 e4          	mov    %bx,-0x1c(%rcx)
   15eb7:	88 41 ee             	mov    %al,-0x12(%rcx)
   15eba:	0f b7 44 24 64       	movzwl 0x64(%rsp),%eax
   15ebf:	40 88 79 ea          	mov    %dil,-0x16(%rcx)
   15ec3:	66 89 71 ec          	mov    %si,-0x14(%rcx)
   15ec7:	66 89 41 f0          	mov    %ax,-0x10(%rcx)
   15ecb:	66 44 89 69 dc       	mov    %r13w,-0x24(%rcx)
   15ed0:	44 88 71 de          	mov    %r14b,-0x22(%rcx)
   15ed4:	66 44 89 59 e0       	mov    %r11w,-0x20(%rcx)
   15ed9:	44 88 79 e2          	mov    %r15b,-0x1e(%rcx)
   15edd:	66 44 89 41 e8       	mov    %r8w,-0x18(%rcx)
   15ee2:	44 0f b6 7c 24 55    	movzbl 0x55(%rsp),%r15d
   15ee8:	0f b7 74 24 66       	movzwl 0x66(%rsp),%esi
   15eed:	0f b6 5c 24 56       	movzbl 0x56(%rsp),%ebx
   15ef2:	40 88 69 fe          	mov    %bpl,-0x2(%rcx)
   15ef6:	0f b7 44 24 70       	movzwl 0x70(%rsp),%eax
   15efb:	0f b6 7c 24 57       	movzbl 0x57(%rsp),%edi
   15f00:	44 88 79 f2          	mov    %r15b,-0xe(%rcx)
   15f04:	0f b7 54 24 72       	movzwl 0x72(%rsp),%edx
   15f09:	66 89 71 f4          	mov    %si,-0xc(%rcx)
   15f0d:	88 59 f6             	mov    %bl,-0xa(%rcx)
   15f10:	66 89 41 f8          	mov    %ax,-0x8(%rcx)
   15f14:	40 88 79 fa          	mov    %dil,-0x6(%rcx)
   15f18:	66 89 51 fc          	mov    %dx,-0x4(%rcx)
   15f1c:	41 c6 41 c0 ff       	movb   $0xff,-0x40(%r9)
   15f21:	41 c6 41 c4 ff       	movb   $0xff,-0x3c(%r9)
   15f26:	41 c6 41 c8 ff       	movb   $0xff,-0x38(%r9)
   15f2b:	41 c6 41 cc ff       	movb   $0xff,-0x34(%r9)
   15f30:	41 c6 41 d0 ff       	movb   $0xff,-0x30(%r9)
   15f35:	41 c6 41 d4 ff       	movb   $0xff,-0x2c(%r9)
   15f3a:	41 c6 41 d8 ff       	movb   $0xff,-0x28(%r9)
   15f3f:	41 c6 41 dc ff       	movb   $0xff,-0x24(%r9)
   15f44:	41 c6 41 e0 ff       	movb   $0xff,-0x20(%r9)
   15f49:	41 c6 41 e4 ff       	movb   $0xff,-0x1c(%r9)
   15f4e:	41 c6 41 e8 ff       	movb   $0xff,-0x18(%r9)
   15f53:	41 c6 41 ec ff       	movb   $0xff,-0x14(%r9)
   15f58:	41 c6 41 f0 ff       	movb   $0xff,-0x10(%r9)
   15f5d:	41 c6 41 f4 ff       	movb   $0xff,-0xc(%r9)
   15f62:	41 c6 41 f8 ff       	movb   $0xff,-0x8(%r9)
   15f67:	41 c6 41 fc ff       	movb   $0xff,-0x4(%r9)
   15f6c:	48 39 8c 24 88 00 00 	cmp    %rcx,0x88(%rsp)
   15f73:	00 
   15f74:	0f 85 86 fd ff ff    	jne    15d00 <_ZL20stbi__convert_formatPhiijj.part.0+0xc00>
   15f7a:	8b 9c 24 ac 00 00 00 	mov    0xac(%rsp),%ebx
   15f81:	44 8b 94 24 a8 00 00 	mov    0xa8(%rsp),%r10d
   15f88:	00 
   15f89:	8b 84 24 c0 00 00 00 	mov    0xc0(%rsp),%eax
   15f90:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   15f97:	00 
   15f98:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
   15f9f:	00 
   15fa0:	48 01 7c 24 78       	add    %rdi,0x78(%rsp)
   15fa5:	89 d9                	mov    %ebx,%ecx
   15fa7:	41 29 da             	sub    %ebx,%r10d
   15faa:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
   15fb1:	00 
   15fb2:	4c 8b 84 24 98 00 00 	mov    0x98(%rsp),%r8
   15fb9:	00 
   15fba:	48 01 7c 24 68       	add    %rdi,0x68(%rsp)
   15fbf:	85 c0                	test   %eax,%eax
   15fc1:	0f 84 fc 01 00 00    	je     161c3 <_ZL20stbi__convert_formatPhiijj.part.0+0x10c3>
   15fc7:	44 8b 9c 24 84 00 00 	mov    0x84(%rsp),%r11d
   15fce:	00 
   15fcf:	41 29 cb             	sub    %ecx,%r11d
   15fd2:	41 8d 43 ff          	lea    -0x1(%r11),%eax
   15fd6:	83 f8 06             	cmp    $0x6,%eax
   15fd9:	0f 86 2a 01 00 00    	jbe    16109 <_ZL20stbi__convert_formatPhiijj.part.0+0x1009>
   15fdf:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
   15fe4:	48 8d 04 49          	lea    (%rcx,%rcx,2),%rax
   15fe8:	49 8d 0c 88          	lea    (%r8,%rcx,4),%rcx
   15fec:	48 01 d0             	add    %rdx,%rax
   15fef:	48 01 d8             	add    %rbx,%rax
   15ff2:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
   15ff7:	0f b7 78 0c          	movzwl 0xc(%rax),%edi
   15ffb:	0f b6 70 0b          	movzbl 0xb(%rax),%esi
   15fff:	48 8d 14 0b          	lea    (%rbx,%rcx,1),%rdx
   16003:	44 0f b6 48 17       	movzbl 0x17(%rax),%r9d
   16008:	44 0f b7 40 15       	movzwl 0x15(%rax),%r8d
   1600d:	48 8d 4c 0b 03       	lea    0x3(%rbx,%rcx,1),%rcx
   16012:	44 0f b6 78 02       	movzbl 0x2(%rax),%r15d
   16017:	0f b6 58 0e          	movzbl 0xe(%rax),%ebx
   1601b:	40 88 74 24 40       	mov    %sil,0x40(%rsp)
   16020:	44 0f b6 68 05       	movzbl 0x5(%rax),%r13d
   16025:	0f b6 70 14          	movzbl 0x14(%rax),%esi
   16029:	66 89 7c 24 30       	mov    %di,0x30(%rsp)
   1602e:	44 0f b7 70 03       	movzwl 0x3(%rax),%r14d
   16033:	0f b7 78 12          	movzwl 0x12(%rax),%edi
   16037:	88 5c 24 4f          	mov    %bl,0x4f(%rsp)
   1603b:	0f b6 68 08          	movzbl 0x8(%rax),%ebp
   1603f:	0f b7 58 09          	movzwl 0x9(%rax),%ebx
   16043:	44 88 4c 24 50       	mov    %r9b,0x50(%rsp)
   16048:	44 0f b7 60 06       	movzwl 0x6(%rax),%r12d
   1604d:	44 0f b7 48 0f       	movzwl 0xf(%rax),%r9d
   16052:	66 44 89 44 24 38    	mov    %r8w,0x38(%rsp)
   16058:	44 0f b6 40 11       	movzbl 0x11(%rax),%r8d
   1605d:	0f b7 00             	movzwl (%rax),%eax
   16060:	44 88 7a 02          	mov    %r15b,0x2(%rdx)
   16064:	44 0f b6 7c 24 40    	movzbl 0x40(%rsp),%r15d
   1606a:	66 89 5a 0c          	mov    %bx,0xc(%rdx)
   1606e:	66 89 02             	mov    %ax,(%rdx)
   16071:	66 44 89 72 04       	mov    %r14w,0x4(%rdx)
   16076:	44 88 6a 06          	mov    %r13b,0x6(%rdx)
   1607a:	66 44 89 62 08       	mov    %r12w,0x8(%rdx)
   1607f:	40 88 6a 0a          	mov    %bpl,0xa(%rdx)
   16083:	44 88 7a 0e          	mov    %r15b,0xe(%rdx)
   16087:	0f b7 44 24 30       	movzwl 0x30(%rsp),%eax
   1608c:	66 44 89 4a 14       	mov    %r9w,0x14(%rdx)
   16091:	0f b6 5c 24 4f       	movzbl 0x4f(%rsp),%ebx
   16096:	44 88 42 16          	mov    %r8b,0x16(%rdx)
   1609a:	44 0f b6 4c 24 50    	movzbl 0x50(%rsp),%r9d
   160a0:	44 0f b7 44 24 38    	movzwl 0x38(%rsp),%r8d
   160a6:	66 89 42 10          	mov    %ax,0x10(%rdx)
   160aa:	88 5a 12             	mov    %bl,0x12(%rdx)
   160ad:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
   160b2:	66 89 7a 18          	mov    %di,0x18(%rdx)
   160b6:	40 88 72 1a          	mov    %sil,0x1a(%rdx)
   160ba:	66 44 89 42 1c       	mov    %r8w,0x1c(%rdx)
   160bf:	44 88 4a 1e          	mov    %r9b,0x1e(%rdx)
   160c3:	44 89 da             	mov    %r11d,%edx
   160c6:	83 e2 f8             	and    $0xfffffff8,%edx
   160c9:	c6 01 ff             	movb   $0xff,(%rcx)
   160cc:	89 d0                	mov    %edx,%eax
   160ce:	c6 41 04 ff          	movb   $0xff,0x4(%rcx)
   160d2:	41 29 d2             	sub    %edx,%r10d
   160d5:	c6 41 08 ff          	movb   $0xff,0x8(%rcx)
   160d9:	c6 41 0c ff          	movb   $0xff,0xc(%rcx)
   160dd:	c6 41 10 ff          	movb   $0xff,0x10(%rcx)
   160e1:	c6 41 14 ff          	movb   $0xff,0x14(%rcx)
   160e5:	c6 41 18 ff          	movb   $0xff,0x18(%rcx)
   160e9:	c6 41 1c ff          	movb   $0xff,0x1c(%rcx)
   160ed:	48 8d 0c 40          	lea    (%rax,%rax,2),%rcx
   160f1:	48 8d 04 83          	lea    (%rbx,%rax,4),%rax
   160f5:	48 01 4c 24 78       	add    %rcx,0x78(%rsp)
   160fa:	41 83 e3 07          	and    $0x7,%r11d
   160fe:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
   16103:	0f 84 ba 00 00 00    	je     161c3 <_ZL20stbi__convert_formatPhiijj.part.0+0x10c3>
   16109:	48 8b 5c 24 78       	mov    0x78(%rsp),%rbx
   1610e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
   16113:	0f b6 03             	movzbl (%rbx),%eax
   16116:	88 07                	mov    %al,(%rdi)
   16118:	0f b6 43 01          	movzbl 0x1(%rbx),%eax
   1611c:	88 47 01             	mov    %al,0x1(%rdi)
   1611f:	0f b6 43 02          	movzbl 0x2(%rbx),%eax
   16123:	c6 47 03 ff          	movb   $0xff,0x3(%rdi)
   16127:	88 47 02             	mov    %al,0x2(%rdi)
   1612a:	45 85 d2             	test   %r10d,%r10d
   1612d:	0f 84 90 00 00 00    	je     161c3 <_ZL20stbi__convert_formatPhiijj.part.0+0x10c3>
   16133:	0f b7 43 03          	movzwl 0x3(%rbx),%eax
   16137:	66 89 47 04          	mov    %ax,0x4(%rdi)
   1613b:	0f b6 43 05          	movzbl 0x5(%rbx),%eax
   1613f:	c6 47 07 ff          	movb   $0xff,0x7(%rdi)
   16143:	88 47 06             	mov    %al,0x6(%rdi)
   16146:	41 83 fa 01          	cmp    $0x1,%r10d
   1614a:	74 77                	je     161c3 <_ZL20stbi__convert_formatPhiijj.part.0+0x10c3>
   1614c:	0f b7 43 06          	movzwl 0x6(%rbx),%eax
   16150:	66 89 47 08          	mov    %ax,0x8(%rdi)
   16154:	0f b6 43 08          	movzbl 0x8(%rbx),%eax
   16158:	c6 47 0b ff          	movb   $0xff,0xb(%rdi)
   1615c:	88 47 0a             	mov    %al,0xa(%rdi)
   1615f:	41 83 fa 02          	cmp    $0x2,%r10d
   16163:	74 5e                	je     161c3 <_ZL20stbi__convert_formatPhiijj.part.0+0x10c3>
   16165:	0f b7 43 09          	movzwl 0x9(%rbx),%eax
   16169:	66 89 47 0c          	mov    %ax,0xc(%rdi)
   1616d:	0f b6 43 0b          	movzbl 0xb(%rbx),%eax
   16171:	c6 47 0f ff          	movb   $0xff,0xf(%rdi)
   16175:	88 47 0e             	mov    %al,0xe(%rdi)
   16178:	41 83 fa 03          	cmp    $0x3,%r10d
   1617c:	74 45                	je     161c3 <_ZL20stbi__convert_formatPhiijj.part.0+0x10c3>
   1617e:	0f b7 43 0c          	movzwl 0xc(%rbx),%eax
   16182:	66 89 47 10          	mov    %ax,0x10(%rdi)
   16186:	0f b6 43 0e          	movzbl 0xe(%rbx),%eax
   1618a:	c6 47 13 ff          	movb   $0xff,0x13(%rdi)
   1618e:	88 47 12             	mov    %al,0x12(%rdi)
   16191:	41 83 fa 04          	cmp    $0x4,%r10d
   16195:	74 2c                	je     161c3 <_ZL20stbi__convert_formatPhiijj.part.0+0x10c3>
   16197:	0f b7 43 0f          	movzwl 0xf(%rbx),%eax
   1619b:	66 89 47 14          	mov    %ax,0x14(%rdi)
   1619f:	0f b6 43 11          	movzbl 0x11(%rbx),%eax
   161a3:	c6 47 17 ff          	movb   $0xff,0x17(%rdi)
   161a7:	88 47 16             	mov    %al,0x16(%rdi)
   161aa:	41 83 fa 05          	cmp    $0x5,%r10d
   161ae:	74 13                	je     161c3 <_ZL20stbi__convert_formatPhiijj.part.0+0x10c3>
   161b0:	0f b7 43 12          	movzwl 0x12(%rbx),%eax
   161b4:	66 89 47 18          	mov    %ax,0x18(%rdi)
   161b8:	0f b6 43 14          	movzbl 0x14(%rbx),%eax
   161bc:	c6 47 1b ff          	movb   $0xff,0x1b(%rdi)
   161c0:	88 47 1a             	mov    %al,0x1a(%rdi)
   for (j=0; j < (int) y; ++j) {
   161c3:	8b bc 24 80 00 00 00 	mov    0x80(%rsp),%edi
   161ca:	83 44 24 28 01       	addl   $0x1,0x28(%rsp)
   161cf:	01 7c 24 20          	add    %edi,0x20(%rsp)
   161d3:	8b 44 24 28          	mov    0x28(%rsp),%eax
   161d7:	8b 7c 24 74          	mov    0x74(%rsp),%edi
   161db:	01 7c 24 18          	add    %edi,0x18(%rsp)
   161df:	39 44 24 48          	cmp    %eax,0x48(%rsp)
   161e3:	0f 84 d7 f0 ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   161e9:	8b 54 24 20          	mov    0x20(%rsp),%edx
   161ed:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
      unsigned char *dest = good + j * x * req_comp;
   161f2:	44 8b 44 24 18       	mov    0x18(%rsp),%r8d
      unsigned char *src  = data + j * x * img_n   ;
   161f7:	48 01 d0             	add    %rdx,%rax
   161fa:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
      unsigned char *dest = good + j * x * req_comp;
   161ff:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   16204:	4c 01 c0             	add    %r8,%rax
   16207:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
      switch (STBI__COMBO(img_n, req_comp)) {
   1620c:	e9 8f fa ff ff       	jmp    15ca0 <_ZL20stbi__convert_formatPhiijj.part.0+0xba0>
   16211:	44 89 6c 24 30       	mov    %r13d,0x30(%rsp)
   16216:	8b 6c 24 18          	mov    0x18(%rsp),%ebp
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   1621a:	66 0f ef e4          	pxor   %xmm4,%xmm4
   1621e:	44 8b 94 24 84 00 00 	mov    0x84(%rsp),%r10d
   16225:	00 
   16226:	4c 89 64 24 38       	mov    %r12,0x38(%rsp)
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1622b:	f3 0f 7e 35 dd 25 02 	movq   0x225dd(%rip),%xmm6        # 38810 <_ZL11stbi__bmask+0x90>
   16232:	00 
   16233:	44 8b 5c 24 28       	mov    0x28(%rsp),%r11d
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16238:	f3 44 0f 7e 15 ef 26 	movq   0x226ef(%rip),%xmm10        # 38930 <_ZL11stbi__bmask+0x1b0>
   1623f:	02 00 
   16241:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
   16246:	45 8d 4a ff          	lea    -0x1(%r10),%r9d
   1624a:	66 0f 6f 1d be 25 02 	movdqa 0x225be(%rip),%xmm3        # 38810 <_ZL11stbi__bmask+0x90>
   16251:	00 
   16252:	66 0f 6f 3d f6 26 02 	movdqa 0x226f6(%rip),%xmm7        # 38950 <_ZL11stbi__bmask+0x1d0>
   16259:	00 
   1625a:	66 44 0f 6f 0d cd 26 	movdqa 0x226cd(%rip),%xmm9        # 38930 <_ZL11stbi__bmask+0x1b0>
   16261:	02 00 
   16263:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
   16268:	66 44 0f 6f 05 cf 26 	movdqa 0x226cf(%rip),%xmm8        # 38940 <_ZL11stbi__bmask+0x1c0>
   1626f:	02 00 
   16271:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
   16276:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
   1627b:	44 8b 64 24 20       	mov    0x20(%rsp),%r12d
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   16280:	44 89 ce             	mov    %r9d,%esi
   16283:	41 83 f9 ff          	cmp    $0xffffffff,%r9d
   16287:	0f 84 e6 0c 00 00    	je     16f73 <_ZL20stbi__convert_formatPhiijj.part.0+0x1e73>
   1628d:	41 83 f9 0e          	cmp    $0xe,%r9d
   16291:	0f 86 28 0d 00 00    	jbe    16fbf <_ZL20stbi__convert_formatPhiijj.part.0+0x1ebf>
   16297:	44 89 d7             	mov    %r10d,%edi
   1629a:	48 89 c1             	mov    %rax,%rcx
   1629d:	48 89 d6             	mov    %rdx,%rsi
   162a0:	c1 ef 04             	shr    $0x4,%edi
   162a3:	48 c1 e7 06          	shl    $0x6,%rdi
   162a7:	48 01 c7             	add    %rax,%rdi
   162aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   162b0:	f3 44 0f 6f 19       	movdqu (%rcx),%xmm11
   162b5:	f3 0f 6f 41 10       	movdqu 0x10(%rcx),%xmm0
   162ba:	66 44 0f 6f eb       	movdqa %xmm3,%xmm13
   162bf:	48 83 c1 40          	add    $0x40,%rcx
   162c3:	f3 0f 6f 51 c0       	movdqu -0x40(%rcx),%xmm2
   162c8:	f3 44 0f 6f 61 e0    	movdqu -0x20(%rcx),%xmm12
   162ce:	48 83 c6 20          	add    $0x20,%rsi
   162d2:	66 0f db c3          	pand   %xmm3,%xmm0
   162d6:	66 44 0f db db       	pand   %xmm3,%xmm11
   162db:	f3 0f 6f 49 f0       	movdqu -0x10(%rcx),%xmm1
   162e0:	66 44 0f 67 d8       	packuswb %xmm0,%xmm11
   162e5:	f3 0f 6f 41 d0       	movdqu -0x30(%rcx),%xmm0
   162ea:	66 0f 71 d2 08       	psrlw  $0x8,%xmm2
   162ef:	66 44 0f db e3       	pand   %xmm3,%xmm12
   162f4:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   162f9:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   162fe:	66 0f 67 d0          	packuswb %xmm0,%xmm2
   16302:	f3 0f 6f 41 f0       	movdqu -0x10(%rcx),%xmm0
   16307:	66 0f db c3          	pand   %xmm3,%xmm0
   1630b:	66 44 0f 67 e0       	packuswb %xmm0,%xmm12
   16310:	f3 0f 6f 41 e0       	movdqu -0x20(%rcx),%xmm0
   16315:	66 45 0f db ec       	pand   %xmm12,%xmm13
   1631a:	66 41 0f 71 d4 08    	psrlw  $0x8,%xmm12
   16320:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   16325:	66 0f 67 c1          	packuswb %xmm1,%xmm0
   16329:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   1632d:	66 41 0f db cb       	pand   %xmm11,%xmm1
   16332:	66 41 0f 71 d3 08    	psrlw  $0x8,%xmm11
   16338:	66 41 0f 67 cd       	packuswb %xmm13,%xmm1
   1633d:	66 45 0f 67 dc       	packuswb %xmm12,%xmm11
   16342:	66 44 0f 6f eb       	movdqa %xmm3,%xmm13
   16347:	66 44 0f 6f e3       	movdqa %xmm3,%xmm12
   1634c:	66 44 0f db e8       	pand   %xmm0,%xmm13
   16351:	66 44 0f db e2       	pand   %xmm2,%xmm12
   16356:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   1635b:	66 45 0f 67 e5       	packuswb %xmm13,%xmm12
   16360:	66 0f 71 d2 08       	psrlw  $0x8,%xmm2
   16365:	66 0f 67 d0          	packuswb %xmm0,%xmm2
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16369:	66 45 0f 6f ec       	movdqa %xmm12,%xmm13
   1636e:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   16372:	66 0f 60 c4          	punpcklbw %xmm4,%xmm0
   16376:	66 44 0f 60 ec       	punpcklbw %xmm4,%xmm13
   1637b:	66 0f 68 cc          	punpckhbw %xmm4,%xmm1
   1637f:	66 45 0f d5 e8       	pmullw %xmm8,%xmm13
   16384:	66 41 0f d5 c1       	pmullw %xmm9,%xmm0
   16389:	66 44 0f 68 e4       	punpckhbw %xmm4,%xmm12
   1638e:	66 41 0f d5 c9       	pmullw %xmm9,%xmm1
   16393:	66 45 0f d5 e0       	pmullw %xmm8,%xmm12
   16398:	66 41 0f fd c5       	paddw  %xmm13,%xmm0
   1639d:	66 45 0f 6f eb       	movdqa %xmm11,%xmm13
   163a2:	66 44 0f 68 dc       	punpckhbw %xmm4,%xmm11
   163a7:	66 44 0f 60 ec       	punpcklbw %xmm4,%xmm13
   163ac:	66 44 0f d5 df       	pmullw %xmm7,%xmm11
   163b1:	66 41 0f fd cc       	paddw  %xmm12,%xmm1
   163b6:	66 44 0f d5 ef       	pmullw %xmm7,%xmm13
   163bb:	66 41 0f fd cb       	paddw  %xmm11,%xmm1
   163c0:	66 41 0f fd c5       	paddw  %xmm13,%xmm0
   163c5:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   163ca:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   163cf:	66 0f db cb          	pand   %xmm3,%xmm1
   163d3:	66 0f db c3          	pand   %xmm3,%xmm0
   163d7:	66 0f 67 c1          	packuswb %xmm1,%xmm0
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   163db:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   163df:	66 0f 68 c2          	punpckhbw %xmm2,%xmm0
   163e3:	66 0f 60 ca          	punpcklbw %xmm2,%xmm1
   163e7:	0f 11 46 f0          	movups %xmm0,-0x10(%rsi)
   163eb:	0f 11 4e e0          	movups %xmm1,-0x20(%rsi)
   163ef:	48 39 cf             	cmp    %rcx,%rdi
   163f2:	0f 85 b8 fe ff ff    	jne    162b0 <_ZL20stbi__convert_formatPhiijj.part.0+0x11b0>
   163f8:	44 89 d1             	mov    %r10d,%ecx
   163fb:	83 e1 f0             	and    $0xfffffff0,%ecx
   163fe:	89 ce                	mov    %ecx,%esi
   16400:	48 8d 04 b0          	lea    (%rax,%rsi,4),%rax
   16404:	48 8d 14 72          	lea    (%rdx,%rsi,2),%rdx
   16408:	44 89 ce             	mov    %r9d,%esi
   1640b:	29 ce                	sub    %ecx,%esi
   1640d:	41 f6 c2 0f          	test   $0xf,%r10b
   16411:	0f 84 79 03 00 00    	je     16790 <_ZL20stbi__convert_formatPhiijj.part.0+0x1690>
   16417:	44 89 d7             	mov    %r10d,%edi
   1641a:	29 cf                	sub    %ecx,%edi
   1641c:	44 8d 7f ff          	lea    -0x1(%rdi),%r15d
   16420:	41 83 ff 06          	cmp    $0x6,%r15d
   16424:	0f 86 19 02 00 00    	jbe    16643 <_ZL20stbi__convert_formatPhiijj.part.0+0x1543>
   1642a:	48 8d 1c 8b          	lea    (%rbx,%rcx,4),%rbx
   1642e:	66 44 0f 6f de       	movdqa %xmm6,%xmm11
   16433:	66 44 0f 6f ee       	movdqa %xmm6,%xmm13
   16438:	4c 01 f3             	add    %r14,%rbx
   1643b:	49 8d 0c 48          	lea    (%r8,%rcx,2),%rcx
   1643f:	f3 0f 7e 13          	movq   (%rbx),%xmm2
   16443:	f3 44 0f 7e 63 08    	movq   0x8(%rbx),%xmm12
   16449:	4c 01 e9             	add    %r13,%rcx
   1644c:	f3 0f 7e 4b 10       	movq   0x10(%rbx),%xmm1
   16451:	f3 0f 7e 43 18       	movq   0x18(%rbx),%xmm0
   16456:	66 45 0f db ec       	pand   %xmm12,%xmm13
   1645b:	66 41 0f 71 d4 08    	psrlw  $0x8,%xmm12
   16461:	66 44 0f db da       	pand   %xmm2,%xmm11
   16466:	66 0f 71 d2 08       	psrlw  $0x8,%xmm2
   1646b:	66 45 0f 67 dd       	packuswb %xmm13,%xmm11
   16470:	66 44 0f 6f ee       	movdqa %xmm6,%xmm13
   16475:	66 41 0f 67 d4       	packuswb %xmm12,%xmm2
   1647a:	66 44 0f 6f e6       	movdqa %xmm6,%xmm12
   1647f:	66 44 0f db e8       	pand   %xmm0,%xmm13
   16484:	66 44 0f db e1       	pand   %xmm1,%xmm12
   16489:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   1648e:	66 45 0f 70 db 08    	pshufd $0x8,%xmm11,%xmm11
   16494:	66 45 0f 67 e5       	packuswb %xmm13,%xmm12
   16499:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   1649e:	66 44 0f 6f ee       	movdqa %xmm6,%xmm13
   164a3:	66 45 0f 70 e4 08    	pshufd $0x8,%xmm12,%xmm12
   164a9:	66 0f 67 c8          	packuswb %xmm0,%xmm1
   164ad:	66 0f 6f c6          	movdqa %xmm6,%xmm0
   164b1:	66 45 0f db ec       	pand   %xmm12,%xmm13
   164b6:	66 41 0f db c3       	pand   %xmm11,%xmm0
   164bb:	66 0f 70 d2 08       	pshufd $0x8,%xmm2,%xmm2
   164c0:	66 41 0f 71 d4 08    	psrlw  $0x8,%xmm12
   164c6:	66 41 0f 71 d3 08    	psrlw  $0x8,%xmm11
   164cc:	66 0f 70 c9 08       	pshufd $0x8,%xmm1,%xmm1
   164d1:	66 41 0f 67 c5       	packuswb %xmm13,%xmm0
   164d6:	66 45 0f 67 dc       	packuswb %xmm12,%xmm11
   164db:	66 44 0f 6f ee       	movdqa %xmm6,%xmm13
   164e0:	66 44 0f 6f e6       	movdqa %xmm6,%xmm12
   164e5:	66 44 0f db e9       	pand   %xmm1,%xmm13
   164ea:	66 0f 70 c0 08       	pshufd $0x8,%xmm0,%xmm0
   164ef:	66 44 0f db e2       	pand   %xmm2,%xmm12
   164f4:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   164f9:	66 45 0f 70 db 08    	pshufd $0x8,%xmm11,%xmm11
   164ff:	66 45 0f 67 e5       	packuswb %xmm13,%xmm12
   16504:	66 0f 71 d2 08       	psrlw  $0x8,%xmm2
   16509:	66 45 0f 70 e4 08    	pshufd $0x8,%xmm12,%xmm12
   1650f:	66 0f 67 d1          	packuswb %xmm1,%xmm2
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16513:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   16517:	66 45 0f 6f ec       	movdqa %xmm12,%xmm13
   1651c:	66 0f 60 cd          	punpcklbw %xmm5,%xmm1
   16520:	66 44 0f 60 e5       	punpcklbw %xmm5,%xmm12
   16525:	66 44 0f 60 ed       	punpcklbw %xmm5,%xmm13
   1652a:	66 45 0f 70 e4 4e    	pshufd $0x4e,%xmm12,%xmm12
   16530:	66 0f 60 c5          	punpcklbw %xmm5,%xmm0
   16534:	66 45 0f 6f f5       	movdqa %xmm13,%xmm14
   16539:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1653e:	66 0f 70 d2 08       	pshufd $0x8,%xmm2,%xmm2
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16543:	66 41 0f d5 ca       	pmullw %xmm10,%xmm1
   16548:	66 41 0f 71 f6 02    	psllw  $0x2,%xmm14
   1654e:	66 45 0f fd f5       	paddw  %xmm13,%xmm14
   16553:	66 41 0f d5 c2       	pmullw %xmm10,%xmm0
   16558:	66 45 0f 6f ee       	movdqa %xmm14,%xmm13
   1655d:	66 41 0f 71 f5 04    	psllw  $0x4,%xmm13
   16563:	66 45 0f f9 ee       	psubw  %xmm14,%xmm13
   16568:	66 45 0f 6f f3       	movdqa %xmm11,%xmm14
   1656d:	66 44 0f 60 dd       	punpcklbw %xmm5,%xmm11
   16572:	66 44 0f 60 f5       	punpcklbw %xmm5,%xmm14
   16577:	66 45 0f 70 db 4e    	pshufd $0x4e,%xmm11,%xmm11
   1657d:	66 41 0f 71 f5 01    	psllw  $0x1,%xmm13
   16583:	66 41 0f fd cd       	paddw  %xmm13,%xmm1
   16588:	66 45 0f 6f ee       	movdqa %xmm14,%xmm13
   1658d:	66 41 0f 71 f5 03    	psllw  $0x3,%xmm13
   16593:	66 45 0f f9 ee       	psubw  %xmm14,%xmm13
   16598:	66 41 0f 71 f5 02    	psllw  $0x2,%xmm13
   1659e:	66 45 0f fd ee       	paddw  %xmm14,%xmm13
   165a3:	66 41 0f fd cd       	paddw  %xmm13,%xmm1
   165a8:	66 45 0f 6f ec       	movdqa %xmm12,%xmm13
   165ad:	66 41 0f 71 f5 02    	psllw  $0x2,%xmm13
   165b3:	66 45 0f fd ec       	paddw  %xmm12,%xmm13
   165b8:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   165bd:	66 0f db ce          	pand   %xmm6,%xmm1
   165c1:	66 45 0f 6f e5       	movdqa %xmm13,%xmm12
   165c6:	66 41 0f 71 f4 04    	psllw  $0x4,%xmm12
   165cc:	66 45 0f f9 e5       	psubw  %xmm13,%xmm12
   165d1:	66 41 0f 71 f4 01    	psllw  $0x1,%xmm12
   165d7:	66 41 0f fd c4       	paddw  %xmm12,%xmm0
   165dc:	66 45 0f 6f e3       	movdqa %xmm11,%xmm12
   165e1:	66 41 0f 71 f3 03    	psllw  $0x3,%xmm11
   165e7:	66 45 0f f9 dc       	psubw  %xmm12,%xmm11
   165ec:	66 41 0f 71 f3 02    	psllw  $0x2,%xmm11
   165f2:	66 45 0f fd dc       	paddw  %xmm12,%xmm11
   165f7:	66 41 0f fd c3       	paddw  %xmm11,%xmm0
   165fc:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   16601:	66 0f db c6          	pand   %xmm6,%xmm0
   16605:	66 0f 67 c8          	packuswb %xmm0,%xmm1
   16609:	66 0f 70 c9 08       	pshufd $0x8,%xmm1,%xmm1
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1660e:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   16612:	66 0f 60 ca          	punpcklbw %xmm2,%xmm1
   16616:	66 0f 60 c2          	punpcklbw %xmm2,%xmm0
   1661a:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   1661f:	66 0f d6 01          	movq   %xmm0,(%rcx)
   16623:	66 0f d6 49 08       	movq   %xmm1,0x8(%rcx)
   16628:	89 f9                	mov    %edi,%ecx
   1662a:	83 e1 f8             	and    $0xfffffff8,%ecx
   1662d:	41 89 c8             	mov    %ecx,%r8d
   16630:	29 ce                	sub    %ecx,%esi
   16632:	83 e7 07             	and    $0x7,%edi
   16635:	4a 8d 04 80          	lea    (%rax,%r8,4),%rax
   16639:	4a 8d 14 42          	lea    (%rdx,%r8,2),%rdx
   1663d:	0f 84 4d 01 00 00    	je     16790 <_ZL20stbi__convert_formatPhiijj.part.0+0x1690>
   16643:	0f b6 48 01          	movzbl 0x1(%rax),%ecx
   16647:	0f b6 38             	movzbl (%rax),%edi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   1664a:	69 c9 96 00 00 00    	imul   $0x96,%ecx,%ecx
   16650:	6b ff 4d             	imul   $0x4d,%edi,%edi
   16653:	01 f9                	add    %edi,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   16655:	0f b6 78 02          	movzbl 0x2(%rax),%edi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16659:	6b ff 1d             	imul   $0x1d,%edi,%edi
   1665c:	01 f9                	add    %edi,%ecx
   1665e:	88 2a                	mov    %ch,(%rdx)
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   16660:	0f b6 48 03          	movzbl 0x3(%rax),%ecx
   16664:	88 4a 01             	mov    %cl,0x1(%rdx)
   16667:	85 f6                	test   %esi,%esi
   16669:	0f 84 21 01 00 00    	je     16790 <_ZL20stbi__convert_formatPhiijj.part.0+0x1690>
   1666f:	0f b6 48 04          	movzbl 0x4(%rax),%ecx
   16673:	0f b6 78 05          	movzbl 0x5(%rax),%edi
   16677:	31 db                	xor    %ebx,%ebx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16679:	69 ff 96 00 00 00    	imul   $0x96,%edi,%edi
   1667f:	6b c9 4d             	imul   $0x4d,%ecx,%ecx
   16682:	01 f9                	add    %edi,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   16684:	0f b6 78 06          	movzbl 0x6(%rax),%edi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16688:	6b ff 1d             	imul   $0x1d,%edi,%edi
   1668b:	01 f9                	add    %edi,%ecx
   1668d:	c1 f9 08             	sar    $0x8,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   16690:	88 cb                	mov    %cl,%bl
   16692:	8a 78 07             	mov    0x7(%rax),%bh
   16695:	66 89 5a 02          	mov    %bx,0x2(%rdx)
   16699:	83 fe 01             	cmp    $0x1,%esi
   1669c:	0f 84 ee 00 00 00    	je     16790 <_ZL20stbi__convert_formatPhiijj.part.0+0x1690>
   166a2:	0f b6 48 08          	movzbl 0x8(%rax),%ecx
   166a6:	0f b6 78 09          	movzbl 0x9(%rax),%edi
   166aa:	31 db                	xor    %ebx,%ebx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   166ac:	69 ff 96 00 00 00    	imul   $0x96,%edi,%edi
   166b2:	6b c9 4d             	imul   $0x4d,%ecx,%ecx
   166b5:	01 f9                	add    %edi,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   166b7:	0f b6 78 0a          	movzbl 0xa(%rax),%edi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   166bb:	6b ff 1d             	imul   $0x1d,%edi,%edi
   166be:	01 f9                	add    %edi,%ecx
   166c0:	c1 f9 08             	sar    $0x8,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   166c3:	88 cb                	mov    %cl,%bl
   166c5:	8a 78 0b             	mov    0xb(%rax),%bh
   166c8:	66 89 5a 04          	mov    %bx,0x4(%rdx)
   166cc:	83 fe 02             	cmp    $0x2,%esi
   166cf:	0f 84 bb 00 00 00    	je     16790 <_ZL20stbi__convert_formatPhiijj.part.0+0x1690>
   166d5:	0f b6 48 0c          	movzbl 0xc(%rax),%ecx
   166d9:	0f b6 78 0d          	movzbl 0xd(%rax),%edi
   166dd:	31 db                	xor    %ebx,%ebx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   166df:	69 ff 96 00 00 00    	imul   $0x96,%edi,%edi
   166e5:	6b c9 4d             	imul   $0x4d,%ecx,%ecx
   166e8:	01 f9                	add    %edi,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   166ea:	0f b6 78 0e          	movzbl 0xe(%rax),%edi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   166ee:	6b ff 1d             	imul   $0x1d,%edi,%edi
   166f1:	01 f9                	add    %edi,%ecx
   166f3:	c1 f9 08             	sar    $0x8,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   166f6:	88 cb                	mov    %cl,%bl
   166f8:	8a 78 0f             	mov    0xf(%rax),%bh
   166fb:	66 89 5a 06          	mov    %bx,0x6(%rdx)
   166ff:	83 fe 03             	cmp    $0x3,%esi
   16702:	0f 84 88 00 00 00    	je     16790 <_ZL20stbi__convert_formatPhiijj.part.0+0x1690>
   16708:	0f b6 48 10          	movzbl 0x10(%rax),%ecx
   1670c:	0f b6 78 11          	movzbl 0x11(%rax),%edi
   16710:	31 db                	xor    %ebx,%ebx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16712:	69 ff 96 00 00 00    	imul   $0x96,%edi,%edi
   16718:	6b c9 4d             	imul   $0x4d,%ecx,%ecx
   1671b:	01 f9                	add    %edi,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1671d:	0f b6 78 12          	movzbl 0x12(%rax),%edi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16721:	6b ff 1d             	imul   $0x1d,%edi,%edi
   16724:	01 f9                	add    %edi,%ecx
   16726:	c1 f9 08             	sar    $0x8,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   16729:	88 cb                	mov    %cl,%bl
   1672b:	8a 78 13             	mov    0x13(%rax),%bh
   1672e:	66 89 5a 08          	mov    %bx,0x8(%rdx)
   16732:	83 fe 04             	cmp    $0x4,%esi
   16735:	74 59                	je     16790 <_ZL20stbi__convert_formatPhiijj.part.0+0x1690>
   16737:	0f b6 48 14          	movzbl 0x14(%rax),%ecx
   1673b:	0f b6 78 15          	movzbl 0x15(%rax),%edi
   1673f:	31 db                	xor    %ebx,%ebx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16741:	69 ff 96 00 00 00    	imul   $0x96,%edi,%edi
   16747:	6b c9 4d             	imul   $0x4d,%ecx,%ecx
   1674a:	01 f9                	add    %edi,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1674c:	0f b6 78 16          	movzbl 0x16(%rax),%edi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16750:	6b ff 1d             	imul   $0x1d,%edi,%edi
   16753:	01 f9                	add    %edi,%ecx
   16755:	c1 f9 08             	sar    $0x8,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   16758:	88 cb                	mov    %cl,%bl
   1675a:	8a 78 17             	mov    0x17(%rax),%bh
   1675d:	66 89 5a 0a          	mov    %bx,0xa(%rdx)
   16761:	83 fe 05             	cmp    $0x5,%esi
   16764:	74 2a                	je     16790 <_ZL20stbi__convert_formatPhiijj.part.0+0x1690>
   16766:	0f b6 48 18          	movzbl 0x18(%rax),%ecx
   1676a:	0f b6 70 19          	movzbl 0x19(%rax),%esi
   1676e:	31 db                	xor    %ebx,%ebx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16770:	69 f6 96 00 00 00    	imul   $0x96,%esi,%esi
   16776:	6b c9 4d             	imul   $0x4d,%ecx,%ecx
   16779:	01 f1                	add    %esi,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   1677b:	0f b6 70 1a          	movzbl 0x1a(%rax),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   1677f:	6b f6 1d             	imul   $0x1d,%esi,%esi
   16782:	01 f1                	add    %esi,%ecx
   16784:	c1 f9 08             	sar    $0x8,%ecx
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   16787:	88 cb                	mov    %cl,%bl
   16789:	8a 78 1b             	mov    0x1b(%rax),%bh
   1678c:	66 89 5a 0c          	mov    %bx,0xc(%rdx)
   for (j=0; j < (int) y; ++j) {
   16790:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
   16797:	41 83 c3 01          	add    $0x1,%r11d
   1679b:	41 01 c4             	add    %eax,%r12d
   1679e:	8b 44 24 74          	mov    0x74(%rsp),%eax
   167a2:	01 c5                	add    %eax,%ebp
   167a4:	44 39 5c 24 48       	cmp    %r11d,0x48(%rsp)
   167a9:	0f 84 11 eb ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *src  = data + j * x * img_n   ;
   167af:	44 89 e3             	mov    %r12d,%ebx
      unsigned char *dest = good + j * x * req_comp;
   167b2:	41 89 e8             	mov    %ebp,%r8d
      unsigned char *src  = data + j * x * img_n   ;
   167b5:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
      unsigned char *dest = good + j * x * req_comp;
   167b9:	4b 8d 54 05 00       	lea    0x0(%r13,%r8,1),%rdx
      switch (STBI__COMBO(img_n, req_comp)) {
   167be:	e9 bd fa ff ff       	jmp    16280 <_ZL20stbi__convert_formatPhiijj.part.0+0x1180>
   return stbi__malloc(a*b*c + add);
   167c3:	41 0f af c8          	imul   %r8d,%ecx
   167c7:	48 63 f9             	movslq %ecx,%rdi
    return STBI_MALLOC(size);
   167ca:	e8 91 ff fe ff       	call   6760 <malloc@plt>
   167cf:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   if (good == NULL) {
   167d4:	48 85 c0             	test   %rax,%rax
   167d7:	0f 85 f7 e9 ff ff    	jne    151d4 <_ZL20stbi__convert_formatPhiijj.part.0+0xd4>
   167dd:	e9 8e e9 ff ff       	jmp    15170 <_ZL20stbi__convert_formatPhiijj.part.0+0x70>
   167e2:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
   167e9:	66 0f 6f 15 1f 20 02 	movdqa 0x2201f(%rip),%xmm2        # 38810 <_ZL11stbi__bmask+0x90>
   167f0:	00 
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   167f1:	66 0f ef db          	pxor   %xmm3,%xmm3
   167f5:	66 44 0f 6f 05 32 21 	movdqa 0x22132(%rip),%xmm8        # 38930 <_ZL11stbi__bmask+0x1b0>
   167fc:	02 00 
   167fe:	44 8b 54 24 18       	mov    0x18(%rsp),%r10d
   16803:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
   16807:	44 8b 5c 24 20       	mov    0x20(%rsp),%r11d
   1680c:	66 0f 6f 3d 2c 21 02 	movdqa 0x2212c(%rip),%xmm7        # 38940 <_ZL11stbi__bmask+0x1c0>
   16813:	00 
   16814:	66 0f 6f 35 34 21 02 	movdqa 0x22134(%rip),%xmm6        # 38950 <_ZL11stbi__bmask+0x1d0>
   1681b:	00 
   1681c:	44 8b 4c 24 28       	mov    0x28(%rsp),%r9d
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16821:	f3 0f 7e 25 e7 1f 02 	movq   0x21fe7(%rip),%xmm4        # 38810 <_ZL11stbi__bmask+0x90>
   16828:	00 
   16829:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   1682e:	f3 44 0f 7e 0d f9 20 	movq   0x220f9(%rip),%xmm9        # 38930 <_ZL11stbi__bmask+0x1b0>
   16835:	02 00 
   16837:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
   1683c:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
   16841:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16848:	44 89 c7             	mov    %r8d,%edi
   1684b:	41 83 f8 ff          	cmp    $0xffffffff,%r8d
   1684f:	0f 84 ed 06 00 00    	je     16f42 <_ZL20stbi__convert_formatPhiijj.part.0+0x1e42>
   16855:	41 83 f8 0f          	cmp    $0xf,%r8d
   16859:	0f 86 67 07 00 00    	jbe    16fc6 <_ZL20stbi__convert_formatPhiijj.part.0+0x1ec6>
   1685f:	c1 ef 04             	shr    $0x4,%edi
   16862:	48 89 c8             	mov    %rcx,%rax
   16865:	48 89 d6             	mov    %rdx,%rsi
   16868:	48 c1 e7 06          	shl    $0x6,%rdi
   1686c:	48 01 cf             	add    %rcx,%rdi
   1686f:	90                   	nop
   16870:	f3 44 0f 6f 18       	movdqu (%rax),%xmm11
   16875:	f3 0f 6f 40 10       	movdqu 0x10(%rax),%xmm0
   1687a:	66 44 0f 6f d2       	movdqa %xmm2,%xmm10
   1687f:	48 83 c0 40          	add    $0x40,%rax
   16883:	f3 0f 6f 48 f0       	movdqu -0x10(%rax),%xmm1
   16888:	f3 44 0f 6f 60 f0    	movdqu -0x10(%rax),%xmm12
   1688e:	48 83 c6 10          	add    $0x10,%rsi
   16892:	66 0f db c2          	pand   %xmm2,%xmm0
   16896:	66 44 0f db da       	pand   %xmm2,%xmm11
   1689b:	66 44 0f 67 d8       	packuswb %xmm0,%xmm11
   168a0:	f3 0f 6f 40 e0       	movdqu -0x20(%rax),%xmm0
   168a5:	66 0f db ca          	pand   %xmm2,%xmm1
   168a9:	66 41 0f 71 d4 08    	psrlw  $0x8,%xmm12
   168af:	66 0f db c2          	pand   %xmm2,%xmm0
   168b3:	66 0f 67 c1          	packuswb %xmm1,%xmm0
   168b7:	66 0f 6f ca          	movdqa %xmm2,%xmm1
   168bb:	66 44 0f db d0       	pand   %xmm0,%xmm10
   168c0:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   168c5:	66 41 0f db cb       	pand   %xmm11,%xmm1
   168ca:	66 41 0f 71 d3 08    	psrlw  $0x8,%xmm11
   168d0:	66 41 0f 67 ca       	packuswb %xmm10,%xmm1
   168d5:	f3 44 0f 6f 50 d0    	movdqu -0x30(%rax),%xmm10
   168db:	66 44 0f 67 d8       	packuswb %xmm0,%xmm11
   168e0:	f3 0f 6f 40 c0       	movdqu -0x40(%rax),%xmm0
   168e5:	66 41 0f 71 d2 08    	psrlw  $0x8,%xmm10
   168eb:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   168f0:	66 41 0f 67 c2       	packuswb %xmm10,%xmm0
   168f5:	f3 44 0f 6f 50 e0    	movdqu -0x20(%rax),%xmm10
   168fb:	66 0f db c2          	pand   %xmm2,%xmm0
   168ff:	66 41 0f 71 d2 08    	psrlw  $0x8,%xmm10
   16905:	66 45 0f 67 d4       	packuswb %xmm12,%xmm10
   1690a:	66 44 0f db d2       	pand   %xmm2,%xmm10
   1690f:	66 41 0f 67 c2       	packuswb %xmm10,%xmm0
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16914:	66 44 0f 6f d1       	movdqa %xmm1,%xmm10
   16919:	66 0f 68 cb          	punpckhbw %xmm3,%xmm1
   1691d:	66 44 0f 6f e0       	movdqa %xmm0,%xmm12
   16922:	66 44 0f 60 d3       	punpcklbw %xmm3,%xmm10
   16927:	66 0f 68 c3          	punpckhbw %xmm3,%xmm0
   1692b:	66 45 0f d5 d0       	pmullw %xmm8,%xmm10
   16930:	66 41 0f d5 c8       	pmullw %xmm8,%xmm1
   16935:	66 44 0f 60 e3       	punpcklbw %xmm3,%xmm12
   1693a:	66 44 0f d5 e7       	pmullw %xmm7,%xmm12
   1693f:	66 0f d5 c7          	pmullw %xmm7,%xmm0
   16943:	66 45 0f fd d4       	paddw  %xmm12,%xmm10
   16948:	66 45 0f 6f e3       	movdqa %xmm11,%xmm12
   1694d:	66 44 0f 68 db       	punpckhbw %xmm3,%xmm11
   16952:	66 44 0f 60 e3       	punpcklbw %xmm3,%xmm12
   16957:	66 44 0f d5 de       	pmullw %xmm6,%xmm11
   1695c:	66 0f fd c1          	paddw  %xmm1,%xmm0
   16960:	66 44 0f d5 e6       	pmullw %xmm6,%xmm12
   16965:	66 41 0f fd c3       	paddw  %xmm11,%xmm0
   1696a:	66 45 0f fd d4       	paddw  %xmm12,%xmm10
   1696f:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   16974:	66 41 0f 71 d2 08    	psrlw  $0x8,%xmm10
   1697a:	66 0f db c2          	pand   %xmm2,%xmm0
   1697e:	66 44 0f db d2       	pand   %xmm2,%xmm10
   16983:	66 44 0f 67 d0       	packuswb %xmm0,%xmm10
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16988:	44 0f 11 56 f0       	movups %xmm10,-0x10(%rsi)
   1698d:	48 39 c7             	cmp    %rax,%rdi
   16990:	0f 85 da fe ff ff    	jne    16870 <_ZL20stbi__convert_formatPhiijj.part.0+0x1770>
   16996:	44 89 c6             	mov    %r8d,%esi
   16999:	44 89 c7             	mov    %r8d,%edi
   1699c:	83 e6 f0             	and    $0xfffffff0,%esi
   1699f:	89 f0                	mov    %esi,%eax
   169a1:	29 f7                	sub    %esi,%edi
   169a3:	48 8d 0c 81          	lea    (%rcx,%rax,4),%rcx
   169a7:	48 01 d0             	add    %rdx,%rax
   169aa:	45 89 c6             	mov    %r8d,%r14d
   169ad:	41 29 f6             	sub    %esi,%r14d
   169b0:	41 83 fe 07          	cmp    $0x7,%r14d
   169b4:	0f 86 dd 01 00 00    	jbe    16b97 <_ZL20stbi__convert_formatPhiijj.part.0+0x1a97>
   169ba:	48 8d 1c b3          	lea    (%rbx,%rsi,4),%rbx
   169be:	66 44 0f 6f d4       	movdqa %xmm4,%xmm10
   169c3:	66 0f 6f c4          	movdqa %xmm4,%xmm0
   169c7:	41 83 e6 f8          	and    $0xfffffff8,%r14d
   169cb:	48 01 eb             	add    %rbp,%rbx
   169ce:	66 44 0f 6f e4       	movdqa %xmm4,%xmm12
   169d3:	66 44 0f 6f fc       	movdqa %xmm4,%xmm15
   169d8:	44 29 f7             	sub    %r14d,%edi
   169db:	f3 0f 7e 0b          	movq   (%rbx),%xmm1
   169df:	f3 44 0f 7e 73 08    	movq   0x8(%rbx),%xmm14
   169e5:	f3 44 0f 7e 5b 10    	movq   0x10(%rbx),%xmm11
   169eb:	f3 44 0f 7e 6b 18    	movq   0x18(%rbx),%xmm13
   169f1:	66 41 0f db c6       	pand   %xmm14,%xmm0
   169f6:	66 41 0f 71 d6 08    	psrlw  $0x8,%xmm14
   169fc:	66 44 0f db d1       	pand   %xmm1,%xmm10
   16a01:	66 44 0f 67 d0       	packuswb %xmm0,%xmm10
   16a06:	66 0f 6f c4          	movdqa %xmm4,%xmm0
   16a0a:	66 45 0f db e3       	pand   %xmm11,%xmm12
   16a0f:	66 41 0f db c5       	pand   %xmm13,%xmm0
   16a14:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   16a19:	66 45 0f 70 d2 08    	pshufd $0x8,%xmm10,%xmm10
   16a1f:	66 41 0f 71 d5 08    	psrlw  $0x8,%xmm13
   16a25:	66 41 0f 71 d3 08    	psrlw  $0x8,%xmm11
   16a2b:	66 41 0f 67 ce       	packuswb %xmm14,%xmm1
   16a30:	66 45 0f 67 dd       	packuswb %xmm13,%xmm11
   16a35:	66 0f 70 c9 08       	pshufd $0x8,%xmm1,%xmm1
   16a3a:	66 44 0f 67 e0       	packuswb %xmm0,%xmm12
   16a3f:	66 45 0f 70 db 08    	pshufd $0x8,%xmm11,%xmm11
   16a45:	66 0f db cc          	pand   %xmm4,%xmm1
   16a49:	66 45 0f 70 e4 08    	pshufd $0x8,%xmm12,%xmm12
   16a4f:	66 44 0f db dc       	pand   %xmm4,%xmm11
   16a54:	66 0f 6f c4          	movdqa %xmm4,%xmm0
   16a58:	66 45 0f db fc       	pand   %xmm12,%xmm15
   16a5d:	66 41 0f 67 cb       	packuswb %xmm11,%xmm1
   16a62:	66 41 0f 71 d4 08    	psrlw  $0x8,%xmm12
   16a68:	66 41 0f db c2       	pand   %xmm10,%xmm0
   16a6d:	66 0f 70 c9 08       	pshufd $0x8,%xmm1,%xmm1
   16a72:	66 41 0f 71 d2 08    	psrlw  $0x8,%xmm10
   16a78:	66 41 0f 67 c7       	packuswb %xmm15,%xmm0
   16a7d:	66 45 0f 67 d4       	packuswb %xmm12,%xmm10
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16a82:	66 44 0f 6f e1       	movdqa %xmm1,%xmm12
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16a87:	66 0f 70 c0 08       	pshufd $0x8,%xmm0,%xmm0
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16a8c:	66 44 0f 60 e5       	punpcklbw %xmm5,%xmm12
   16a91:	66 44 0f 6f d8       	movdqa %xmm0,%xmm11
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16a96:	66 45 0f 70 d2 08    	pshufd $0x8,%xmm10,%xmm10
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16a9c:	66 45 0f 6f ec       	movdqa %xmm12,%xmm13
   16aa1:	66 44 0f 60 dd       	punpcklbw %xmm5,%xmm11
   16aa6:	66 0f 60 cd          	punpcklbw %xmm5,%xmm1
   16aaa:	66 41 0f 71 f5 02    	psllw  $0x2,%xmm13
   16ab0:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   16ab5:	66 0f 60 c5          	punpcklbw %xmm5,%xmm0
   16ab9:	66 45 0f fd ec       	paddw  %xmm12,%xmm13
   16abe:	66 45 0f d5 d9       	pmullw %xmm9,%xmm11
   16ac3:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   16ac8:	66 41 0f d5 c1       	pmullw %xmm9,%xmm0
   16acd:	66 45 0f 6f e5       	movdqa %xmm13,%xmm12
   16ad2:	66 41 0f 71 f4 04    	psllw  $0x4,%xmm12
   16ad8:	66 45 0f f9 e5       	psubw  %xmm13,%xmm12
   16add:	66 45 0f 6f ea       	movdqa %xmm10,%xmm13
   16ae2:	66 44 0f 60 ed       	punpcklbw %xmm5,%xmm13
   16ae7:	66 41 0f 71 f4 01    	psllw  $0x1,%xmm12
   16aed:	66 45 0f fd dc       	paddw  %xmm12,%xmm11
   16af2:	66 45 0f 6f e5       	movdqa %xmm13,%xmm12
   16af7:	66 41 0f 71 f4 03    	psllw  $0x3,%xmm12
   16afd:	66 45 0f f9 e5       	psubw  %xmm13,%xmm12
   16b02:	66 41 0f 71 f4 02    	psllw  $0x2,%xmm12
   16b08:	66 45 0f fd e5       	paddw  %xmm13,%xmm12
   16b0d:	66 45 0f fd dc       	paddw  %xmm12,%xmm11
   16b12:	66 44 0f 6f e1       	movdqa %xmm1,%xmm12
   16b17:	66 41 0f 71 f4 02    	psllw  $0x2,%xmm12
   16b1d:	66 44 0f fd e1       	paddw  %xmm1,%xmm12
   16b22:	66 41 0f 71 d3 08    	psrlw  $0x8,%xmm11
   16b28:	66 44 0f db dc       	pand   %xmm4,%xmm11
   16b2d:	66 41 0f 6f cc       	movdqa %xmm12,%xmm1
   16b32:	66 0f 71 f1 04       	psllw  $0x4,%xmm1
   16b37:	66 41 0f f9 cc       	psubw  %xmm12,%xmm1
   16b3c:	66 0f 71 f1 01       	psllw  $0x1,%xmm1
   16b41:	66 0f fd c1          	paddw  %xmm1,%xmm0
   16b45:	66 41 0f 6f ca       	movdqa %xmm10,%xmm1
   16b4a:	66 0f 60 cd          	punpcklbw %xmm5,%xmm1
   16b4e:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   16b53:	66 44 0f 6f d1       	movdqa %xmm1,%xmm10
   16b58:	66 41 0f 71 f2 03    	psllw  $0x3,%xmm10
   16b5e:	66 44 0f f9 d1       	psubw  %xmm1,%xmm10
   16b63:	66 41 0f 71 f2 02    	psllw  $0x2,%xmm10
   16b69:	66 44 0f fd d1       	paddw  %xmm1,%xmm10
   16b6e:	66 41 0f fd c2       	paddw  %xmm10,%xmm0
   16b73:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   16b78:	66 0f db c4          	pand   %xmm4,%xmm0
   16b7c:	66 44 0f 67 d8       	packuswb %xmm0,%xmm11
   16b81:	66 45 0f 70 db 08    	pshufd $0x8,%xmm11,%xmm11
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16b87:	66 44 0f d6 1c 32    	movq   %xmm11,(%rdx,%rsi,1)
   16b8d:	44 89 f2             	mov    %r14d,%edx
   16b90:	48 8d 0c 91          	lea    (%rcx,%rdx,4),%rcx
   16b94:	48 01 d0             	add    %rdx,%rax
   16b97:	0f b6 11             	movzbl (%rcx),%edx
   16b9a:	0f b6 71 01          	movzbl 0x1(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16b9e:	6b d2 4d             	imul   $0x4d,%edx,%edx
   16ba1:	69 f6 96 00 00 00    	imul   $0x96,%esi,%esi
   16ba7:	01 f2                	add    %esi,%edx
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16ba9:	0f b6 71 02          	movzbl 0x2(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16bad:	6b f6 1d             	imul   $0x1d,%esi,%esi
   16bb0:	01 f2                	add    %esi,%edx
   16bb2:	88 30                	mov    %dh,(%rax)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16bb4:	85 ff                	test   %edi,%edi
   16bb6:	0f 84 03 01 00 00    	je     16cbf <_ZL20stbi__convert_formatPhiijj.part.0+0x1bbf>
   16bbc:	0f b6 51 05          	movzbl 0x5(%rcx),%edx
   16bc0:	0f b6 71 04          	movzbl 0x4(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16bc4:	69 d2 96 00 00 00    	imul   $0x96,%edx,%edx
   16bca:	6b f6 4d             	imul   $0x4d,%esi,%esi
   16bcd:	01 f2                	add    %esi,%edx
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16bcf:	0f b6 71 06          	movzbl 0x6(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16bd3:	6b f6 1d             	imul   $0x1d,%esi,%esi
   16bd6:	01 f2                	add    %esi,%edx
   16bd8:	88 70 01             	mov    %dh,0x1(%rax)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16bdb:	83 ff 01             	cmp    $0x1,%edi
   16bde:	0f 84 db 00 00 00    	je     16cbf <_ZL20stbi__convert_formatPhiijj.part.0+0x1bbf>
   16be4:	0f b6 51 08          	movzbl 0x8(%rcx),%edx
   16be8:	0f b6 71 09          	movzbl 0x9(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16bec:	6b d2 4d             	imul   $0x4d,%edx,%edx
   16bef:	69 f6 96 00 00 00    	imul   $0x96,%esi,%esi
   16bf5:	01 f2                	add    %esi,%edx
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16bf7:	0f b6 71 0a          	movzbl 0xa(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16bfb:	6b f6 1d             	imul   $0x1d,%esi,%esi
   16bfe:	01 f2                	add    %esi,%edx
   16c00:	88 70 02             	mov    %dh,0x2(%rax)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16c03:	83 ff 02             	cmp    $0x2,%edi
   16c06:	0f 84 b3 00 00 00    	je     16cbf <_ZL20stbi__convert_formatPhiijj.part.0+0x1bbf>
   16c0c:	0f b6 51 0d          	movzbl 0xd(%rcx),%edx
   16c10:	0f b6 71 0c          	movzbl 0xc(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16c14:	69 d2 96 00 00 00    	imul   $0x96,%edx,%edx
   16c1a:	6b f6 4d             	imul   $0x4d,%esi,%esi
   16c1d:	01 f2                	add    %esi,%edx
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16c1f:	0f b6 71 0e          	movzbl 0xe(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16c23:	6b f6 1d             	imul   $0x1d,%esi,%esi
   16c26:	01 f2                	add    %esi,%edx
   16c28:	88 70 03             	mov    %dh,0x3(%rax)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16c2b:	83 ff 03             	cmp    $0x3,%edi
   16c2e:	0f 84 8b 00 00 00    	je     16cbf <_ZL20stbi__convert_formatPhiijj.part.0+0x1bbf>
   16c34:	0f b6 51 11          	movzbl 0x11(%rcx),%edx
   16c38:	0f b6 71 10          	movzbl 0x10(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16c3c:	69 d2 96 00 00 00    	imul   $0x96,%edx,%edx
   16c42:	6b f6 4d             	imul   $0x4d,%esi,%esi
   16c45:	01 f2                	add    %esi,%edx
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16c47:	0f b6 71 12          	movzbl 0x12(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16c4b:	6b f6 1d             	imul   $0x1d,%esi,%esi
   16c4e:	01 f2                	add    %esi,%edx
   16c50:	88 70 04             	mov    %dh,0x4(%rax)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16c53:	83 ff 04             	cmp    $0x4,%edi
   16c56:	74 67                	je     16cbf <_ZL20stbi__convert_formatPhiijj.part.0+0x1bbf>
   16c58:	0f b6 51 15          	movzbl 0x15(%rcx),%edx
   16c5c:	0f b6 71 14          	movzbl 0x14(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16c60:	69 d2 96 00 00 00    	imul   $0x96,%edx,%edx
   16c66:	6b f6 4d             	imul   $0x4d,%esi,%esi
   16c69:	01 f2                	add    %esi,%edx
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16c6b:	0f b6 71 16          	movzbl 0x16(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16c6f:	6b f6 1d             	imul   $0x1d,%esi,%esi
   16c72:	01 f2                	add    %esi,%edx
   16c74:	88 70 05             	mov    %dh,0x5(%rax)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16c77:	83 ff 05             	cmp    $0x5,%edi
   16c7a:	74 43                	je     16cbf <_ZL20stbi__convert_formatPhiijj.part.0+0x1bbf>
   16c7c:	0f b6 51 19          	movzbl 0x19(%rcx),%edx
   16c80:	0f b6 71 18          	movzbl 0x18(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16c84:	69 d2 96 00 00 00    	imul   $0x96,%edx,%edx
   16c8a:	6b f6 4d             	imul   $0x4d,%esi,%esi
   16c8d:	01 f2                	add    %esi,%edx
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16c8f:	0f b6 71 1a          	movzbl 0x1a(%rcx),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16c93:	6b f6 1d             	imul   $0x1d,%esi,%esi
   16c96:	01 f2                	add    %esi,%edx
   16c98:	88 70 06             	mov    %dh,0x6(%rax)
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16c9b:	83 ff 06             	cmp    $0x6,%edi
   16c9e:	74 1f                	je     16cbf <_ZL20stbi__convert_formatPhiijj.part.0+0x1bbf>
   16ca0:	0f b6 51 1c          	movzbl 0x1c(%rcx),%edx
   16ca4:	0f b6 71 1d          	movzbl 0x1d(%rcx),%esi
   16ca8:	0f b6 49 1e          	movzbl 0x1e(%rcx),%ecx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   16cac:	6b d2 4d             	imul   $0x4d,%edx,%edx
   16caf:	69 f6 96 00 00 00    	imul   $0x96,%esi,%esi
   16cb5:	6b c9 1d             	imul   $0x1d,%ecx,%ecx
   16cb8:	01 f2                	add    %esi,%edx
   16cba:	01 ca                	add    %ecx,%edx
   16cbc:	88 70 07             	mov    %dh,0x7(%rax)
   for (j=0; j < (int) y; ++j) {
   16cbf:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
   16cc6:	41 83 c1 01          	add    $0x1,%r9d
   16cca:	41 01 c3             	add    %eax,%r11d
   16ccd:	8b 44 24 74          	mov    0x74(%rsp),%eax
   16cd1:	41 01 c2             	add    %eax,%r10d
   16cd4:	44 39 4c 24 48       	cmp    %r9d,0x48(%rsp)
   16cd9:	0f 84 e1 e5 ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *dest = good + j * x * req_comp;
   16cdf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   16ce4:	44 89 d2             	mov    %r10d,%edx
      unsigned char *src  = data + j * x * img_n   ;
   16ce7:	44 89 db             	mov    %r11d,%ebx
   16cea:	48 8d 4c 1d 00       	lea    0x0(%rbp,%rbx,1),%rcx
      unsigned char *dest = good + j * x * req_comp;
   16cef:	48 01 c2             	add    %rax,%rdx
   16cf2:	48 89 d0             	mov    %rdx,%rax
      switch (STBI__COMBO(img_n, req_comp)) {
   16cf5:	e9 4e fb ff ff       	jmp    16848 <_ZL20stbi__convert_formatPhiijj.part.0+0x1748>
   16cfa:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
   16d01:	4c 89 64 24 30       	mov    %r12,0x30(%rsp)
   16d06:	66 0f 6f 15 02 1b 02 	movdqa 0x21b02(%rip),%xmm2        # 38810 <_ZL11stbi__bmask+0x90>
   16d0d:	00 
   16d0e:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
   16d13:	83 e8 01             	sub    $0x1,%eax
   16d16:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
   16d1b:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
   16d20:	41 89 c3             	mov    %eax,%r11d
   16d23:	89 c7                	mov    %eax,%edi
   16d25:	41 89 c6             	mov    %eax,%r14d
         STBI__CASE(2,1) { dest[0]=src[0];                                                  } break;
   16d28:	f3 0f 7e 1d e0 1a 02 	movq   0x21ae0(%rip),%xmm3        # 38810 <_ZL11stbi__bmask+0x90>
   16d2f:	00 
   16d30:	41 83 e3 f0          	and    $0xfffffff0,%r11d
   16d34:	c1 ef 04             	shr    $0x4,%edi
   16d37:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
   16d3c:	45 89 da             	mov    %r11d,%r10d
   16d3f:	48 c1 e7 04          	shl    $0x4,%rdi
   16d43:	4f 8d 0c 12          	lea    (%r10,%r10,1),%r9
   16d47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   16d4e:	00 00 
   16d50:	44 89 f6             	mov    %r14d,%esi
   16d53:	41 83 fe ff          	cmp    $0xffffffff,%r14d
   16d57:	0f 84 6d 01 00 00    	je     16eca <_ZL20stbi__convert_formatPhiijj.part.0+0x1dca>
   16d5d:	41 83 fe 0f          	cmp    $0xf,%r14d
   16d61:	0f 86 7c 02 00 00    	jbe    16fe3 <_ZL20stbi__convert_formatPhiijj.part.0+0x1ee3>
   16d67:	31 c9                	xor    %ecx,%ecx
   16d69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   16d70:	f3 0f 6f 04 48       	movdqu (%rax,%rcx,2),%xmm0
   16d75:	f3 0f 6f 4c 48 10    	movdqu 0x10(%rax,%rcx,2),%xmm1
   16d7b:	66 0f db c2          	pand   %xmm2,%xmm0
   16d7f:	66 0f db ca          	pand   %xmm2,%xmm1
   16d83:	66 0f 67 c1          	packuswb %xmm1,%xmm0
   16d87:	0f 11 04 0a          	movups %xmm0,(%rdx,%rcx,1)
   16d8b:	48 83 c1 10          	add    $0x10,%rcx
   16d8f:	48 39 cf             	cmp    %rcx,%rdi
   16d92:	75 dc                	jne    16d70 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c70>
   16d94:	44 89 f6             	mov    %r14d,%esi
   16d97:	44 89 dd             	mov    %r11d,%ebp
   16d9a:	4a 8d 0c 12          	lea    (%rdx,%r10,1),%rcx
   16d9e:	4c 01 c8             	add    %r9,%rax
   16da1:	44 29 de             	sub    %r11d,%esi
   16da4:	45 89 f0             	mov    %r14d,%r8d
   16da7:	41 29 e8             	sub    %ebp,%r8d
   16daa:	41 83 f8 07          	cmp    $0x7,%r8d
   16dae:	76 37                	jbe    16de7 <_ZL20stbi__convert_formatPhiijj.part.0+0x1ce7>
   16db0:	48 8d 1c 6b          	lea    (%rbx,%rbp,2),%rbx
   16db4:	41 83 e0 f8          	and    $0xfffffff8,%r8d
   16db8:	4c 01 fb             	add    %r15,%rbx
   16dbb:	44 29 c6             	sub    %r8d,%esi
   16dbe:	f3 0f 7e 03          	movq   (%rbx),%xmm0
   16dc2:	f3 0f 7e 4b 08       	movq   0x8(%rbx),%xmm1
   16dc7:	66 0f db c3          	pand   %xmm3,%xmm0
   16dcb:	66 0f db cb          	pand   %xmm3,%xmm1
   16dcf:	66 0f 67 c1          	packuswb %xmm1,%xmm0
   16dd3:	66 0f 70 c0 08       	pshufd $0x8,%xmm0,%xmm0
   16dd8:	66 0f d6 04 2a       	movq   %xmm0,(%rdx,%rbp,1)
   16ddd:	44 89 c2             	mov    %r8d,%edx
   16de0:	48 8d 04 50          	lea    (%rax,%rdx,2),%rax
   16de4:	48 01 d1             	add    %rdx,%rcx
   16de7:	0f b6 10             	movzbl (%rax),%edx
   16dea:	88 11                	mov    %dl,(%rcx)
   16dec:	85 f6                	test   %esi,%esi
   16dee:	0f 84 94 00 00 00    	je     16e88 <_ZL20stbi__convert_formatPhiijj.part.0+0x1d88>
   16df4:	0f b6 50 02          	movzbl 0x2(%rax),%edx
   16df8:	88 51 01             	mov    %dl,0x1(%rcx)
   16dfb:	83 fe 01             	cmp    $0x1,%esi
   16dfe:	0f 84 84 00 00 00    	je     16e88 <_ZL20stbi__convert_formatPhiijj.part.0+0x1d88>
   16e04:	0f b6 50 04          	movzbl 0x4(%rax),%edx
   16e08:	88 51 02             	mov    %dl,0x2(%rcx)
   16e0b:	83 fe 02             	cmp    $0x2,%esi
   16e0e:	74 78                	je     16e88 <_ZL20stbi__convert_formatPhiijj.part.0+0x1d88>
   16e10:	0f b6 50 06          	movzbl 0x6(%rax),%edx
   16e14:	88 51 03             	mov    %dl,0x3(%rcx)
   16e17:	83 fe 03             	cmp    $0x3,%esi
   16e1a:	74 6c                	je     16e88 <_ZL20stbi__convert_formatPhiijj.part.0+0x1d88>
   16e1c:	0f b6 50 08          	movzbl 0x8(%rax),%edx
   16e20:	88 51 04             	mov    %dl,0x4(%rcx)
   16e23:	83 fe 04             	cmp    $0x4,%esi
   16e26:	74 60                	je     16e88 <_ZL20stbi__convert_formatPhiijj.part.0+0x1d88>
   16e28:	0f b6 50 0a          	movzbl 0xa(%rax),%edx
   16e2c:	88 51 05             	mov    %dl,0x5(%rcx)
   16e2f:	83 fe 05             	cmp    $0x5,%esi
   16e32:	74 54                	je     16e88 <_ZL20stbi__convert_formatPhiijj.part.0+0x1d88>
   16e34:	0f b6 50 0c          	movzbl 0xc(%rax),%edx
   16e38:	88 51 06             	mov    %dl,0x6(%rcx)
   16e3b:	83 fe 06             	cmp    $0x6,%esi
   16e3e:	74 48                	je     16e88 <_ZL20stbi__convert_formatPhiijj.part.0+0x1d88>
   16e40:	0f b6 40 0e          	movzbl 0xe(%rax),%eax
   for (j=0; j < (int) y; ++j) {
   16e44:	8b 9c 24 80 00 00 00 	mov    0x80(%rsp),%ebx
   16e4b:	41 83 c4 01          	add    $0x1,%r12d
   16e4f:	01 5c 24 20          	add    %ebx,0x20(%rsp)
   16e53:	8b 5c 24 74          	mov    0x74(%rsp),%ebx
         STBI__CASE(2,1) { dest[0]=src[0];                                                  } break;
   16e57:	88 41 07             	mov    %al,0x7(%rcx)
   for (j=0; j < (int) y; ++j) {
   16e5a:	01 5c 24 18          	add    %ebx,0x18(%rsp)
   16e5e:	44 39 64 24 48       	cmp    %r12d,0x48(%rsp)
   16e63:	0f 84 57 e4 ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *dest = good + j * x * req_comp;
   16e69:	8b 54 24 18          	mov    0x18(%rsp),%edx
   16e6d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
      unsigned char *src  = data + j * x * img_n   ;
   16e72:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
      unsigned char *dest = good + j * x * req_comp;
   16e76:	48 01 f2             	add    %rsi,%rdx
      unsigned char *src  = data + j * x * img_n   ;
   16e79:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
      unsigned char *dest = good + j * x * req_comp;
   16e7d:	48 89 d1             	mov    %rdx,%rcx
      switch (STBI__COMBO(img_n, req_comp)) {
   16e80:	e9 cb fe ff ff       	jmp    16d50 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c50>
   16e85:	0f 1f 00             	nopl   (%rax)
   for (j=0; j < (int) y; ++j) {
   16e88:	8b 9c 24 80 00 00 00 	mov    0x80(%rsp),%ebx
   16e8f:	41 83 c4 01          	add    $0x1,%r12d
   16e93:	01 5c 24 20          	add    %ebx,0x20(%rsp)
   16e97:	8b 5c 24 74          	mov    0x74(%rsp),%ebx
   16e9b:	8b 44 24 20          	mov    0x20(%rsp),%eax
   16e9f:	01 5c 24 18          	add    %ebx,0x18(%rsp)
   16ea3:	8b 74 24 18          	mov    0x18(%rsp),%esi
   16ea7:	44 39 64 24 48       	cmp    %r12d,0x48(%rsp)
   16eac:	0f 84 0e e4 ff ff    	je     152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
      unsigned char *dest = good + j * x * req_comp;
   16eb2:	89 f2                	mov    %esi,%edx
   16eb4:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
      unsigned char *src  = data + j * x * img_n   ;
   16eb9:	89 c3                	mov    %eax,%ebx
   16ebb:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
      unsigned char *dest = good + j * x * req_comp;
   16ebf:	48 01 f2             	add    %rsi,%rdx
   16ec2:	48 89 d1             	mov    %rdx,%rcx
      switch (STBI__COMBO(img_n, req_comp)) {
   16ec5:	e9 86 fe ff ff       	jmp    16d50 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c50>
   16eca:	44 89 64 24 28       	mov    %r12d,0x28(%rsp)
   16ecf:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
   16ed4:	e9 b7 e3 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
   16ed9:	44 89 64 24 20       	mov    %r12d,0x20(%rsp)
   16ede:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
   16ee3:	89 6c 24 18          	mov    %ebp,0x18(%rsp)
   16ee7:	4c 8b 64 24 40       	mov    0x40(%rsp),%r12
   16eec:	44 89 5c 24 28       	mov    %r11d,0x28(%rsp)
   16ef1:	e9 9a e3 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
   16ef6:	44 89 44 24 18       	mov    %r8d,0x18(%rsp)
   16efb:	44 8b 6c 24 30       	mov    0x30(%rsp),%r13d
   16f00:	4d 89 fc             	mov    %r15,%r12
   16f03:	44 89 4c 24 20       	mov    %r9d,0x20(%rsp)
   16f08:	89 7c 24 28          	mov    %edi,0x28(%rsp)
   16f0c:	e9 7f e3 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
   16f11:	44 8b ac 24 c4 00 00 	mov    0xc4(%rsp),%r13d
   16f18:	00 
   16f19:	4c 8b a4 24 c8 00 00 	mov    0xc8(%rsp),%r12
   16f20:	00 
   16f21:	e9 6a e3 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
   16f26:	44 89 54 24 18       	mov    %r10d,0x18(%rsp)
   16f2b:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
   16f30:	41 89 cd             	mov    %ecx,%r13d
   16f33:	44 89 5c 24 20       	mov    %r11d,0x20(%rsp)
   16f38:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
   16f3d:	e9 4e e3 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
   16f42:	44 89 54 24 18       	mov    %r10d,0x18(%rsp)
   16f47:	44 89 5c 24 20       	mov    %r11d,0x20(%rsp)
   16f4c:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
   16f51:	e9 3a e3 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
   16f56:	44 89 64 24 18       	mov    %r12d,0x18(%rsp)
   16f5b:	4c 8b 64 24 40       	mov    0x40(%rsp),%r12
   16f60:	44 89 6c 24 20       	mov    %r13d,0x20(%rsp)
   16f65:	44 8b 6c 24 38       	mov    0x38(%rsp),%r13d
   16f6a:	89 5c 24 28          	mov    %ebx,0x28(%rsp)
   16f6e:	e9 1d e3 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
   16f73:	44 89 64 24 20       	mov    %r12d,0x20(%rsp)
   16f78:	44 8b 6c 24 30       	mov    0x30(%rsp),%r13d
   16f7d:	89 6c 24 18          	mov    %ebp,0x18(%rsp)
   16f81:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
   16f86:	44 89 5c 24 28       	mov    %r11d,0x28(%rsp)
   16f8b:	e9 00 e3 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
   16f90:	44 89 54 24 18       	mov    %r10d,0x18(%rsp)
   16f95:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
   16f9a:	41 89 fd             	mov    %edi,%r13d
   16f9d:	44 89 5c 24 20       	mov    %r11d,0x20(%rsp)
   16fa2:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
   16fa7:	e9 e4 e2 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
   16fac:	44 89 44 24 18       	mov    %r8d,0x18(%rsp)
   16fb1:	44 89 4c 24 20       	mov    %r9d,0x20(%rsp)
   16fb6:	89 7c 24 28          	mov    %edi,0x28(%rsp)
   16fba:	e9 d1 e2 ff ff       	jmp    15290 <_ZL20stbi__convert_formatPhiijj.part.0+0x190>
         STBI__CASE(4,2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
   16fbf:	31 c9                	xor    %ecx,%ecx
   16fc1:	e9 51 f4 ff ff       	jmp    16417 <_ZL20stbi__convert_formatPhiijj.part.0+0x1317>
         STBI__CASE(4,1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]);                   } break;
   16fc6:	31 f6                	xor    %esi,%esi
   16fc8:	e9 dd f9 ff ff       	jmp    169aa <_ZL20stbi__convert_formatPhiijj.part.0+0x18aa>
         STBI__CASE(3,4) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];dest[3]=255;        } break;
   16fcd:	31 c9                	xor    %ecx,%ecx
   16fcf:	e9 f3 ef ff ff       	jmp    15fc7 <_ZL20stbi__convert_formatPhiijj.part.0+0xec7>
         STBI__CASE(2,4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=src[1];                  } break;
   16fd4:	31 f6                	xor    %esi,%esi
   16fd6:	e9 d8 e8 ff ff       	jmp    158b3 <_ZL20stbi__convert_formatPhiijj.part.0+0x7b3>
         STBI__CASE(1,2) { dest[0]=src[0]; dest[1]=255;                                     } break;
   16fdb:	45 31 c9             	xor    %r9d,%r9d
   16fde:	e9 67 e4 ff ff       	jmp    1544a <_ZL20stbi__convert_formatPhiijj.part.0+0x34a>
         STBI__CASE(2,1) { dest[0]=src[0];                                                  } break;
   16fe3:	31 ed                	xor    %ebp,%ebp
   16fe5:	e9 ba fd ff ff       	jmp    16da4 <_ZL20stbi__convert_formatPhiijj.part.0+0x1ca4>
    return STBI_MALLOC(size);
   16fea:	31 ff                	xor    %edi,%edi
   16fec:	e8 6f f7 fe ff       	call   6760 <malloc@plt>
   16ff1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   if (good == NULL) {
   16ff6:	48 85 c0             	test   %rax,%rax
   16ff9:	0f 85 c1 e2 ff ff    	jne    152c0 <_ZL20stbi__convert_formatPhiijj.part.0+0x1c0>
   16fff:	e9 6c e1 ff ff       	jmp    15170 <_ZL20stbi__convert_formatPhiijj.part.0+0x70>
   17004:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   1700b:	00 00 00 00 
   1700f:	90                   	nop

0000000000017010 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii>:
{
   17010:	41 57                	push   %r15
   17012:	41 56                	push   %r14
   17014:	41 89 ce             	mov    %ecx,%r14d
   17017:	41 55                	push   %r13
   17019:	4c 63 ea             	movslq %edx,%r13
   1701c:	41 54                	push   %r12
   1701e:	49 89 f4             	mov    %rsi,%r12
   17021:	55                   	push   %rbp
   17022:	31 ed                	xor    %ebp,%ebp
   17024:	53                   	push   %rbx
   17025:	48 89 fb             	mov    %rdi,%rbx
   17028:	48 83 ec 18          	sub    $0x18,%rsp
   1702c:	eb 7f                	jmp    170ad <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x9d>
   1702e:	66 90                	xchg   %ax,%ax
      return *s->img_buffer++;
   17030:	48 8d 50 01          	lea    0x1(%rax),%rdx
   17034:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1703b:	44 0f b6 38          	movzbl (%rax),%r15d
      pal[i][2] = stbi__get8(s);
   1703f:	45 88 7c ac 02       	mov    %r15b,0x2(%r12,%rbp,4)
   if (s->img_buffer < s->img_buffer_end)
   17044:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1704b:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   17052:	0f 83 48 01 00 00    	jae    171a0 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x190>
      return *s->img_buffer++;
   17058:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1705c:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   17063:	44 0f b6 38          	movzbl (%rax),%r15d
      pal[i][1] = stbi__get8(s);
   17067:	45 88 7c ac 01       	mov    %r15b,0x1(%r12,%rbp,4)
   if (s->img_buffer < s->img_buffer_end)
   1706c:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   17073:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1707a:	0f 83 b0 00 00 00    	jae    17130 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x120>
      return *s->img_buffer++;
   17080:	48 8d 50 01          	lea    0x1(%rax),%rdx
   17084:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1708b:	44 0f b6 38          	movzbl (%rax),%r15d
      pal[i][3] = transp == i ? 0 : 255;
   1708f:	41 39 ee             	cmp    %ebp,%r14d
      pal[i][0] = stbi__get8(s);
   17092:	45 88 3c ac          	mov    %r15b,(%r12,%rbp,4)
      pal[i][3] = transp == i ? 0 : 255;
   17096:	0f 95 c0             	setne  %al
   17099:	f7 d8                	neg    %eax
   1709b:	41 88 44 ac 03       	mov    %al,0x3(%r12,%rbp,4)
   for (i=0; i < num_entries; ++i) {
   170a0:	48 83 c5 01          	add    $0x1,%rbp
   170a4:	49 39 ed             	cmp    %rbp,%r13
   170a7:	0f 84 63 01 00 00    	je     17210 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x200>
   if (s->img_buffer < s->img_buffer_end)
   170ad:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   170b4:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   170bb:	0f 82 6f ff ff ff    	jb     17030 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x20>
   if (s->read_from_callbacks) {
   170c1:	8b 4b 30             	mov    0x30(%rbx),%ecx
   return 0;
   170c4:	45 31 ff             	xor    %r15d,%r15d
   if (s->read_from_callbacks) {
   170c7:	85 c9                	test   %ecx,%ecx
   170c9:	0f 84 70 ff ff ff    	je     1703f <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x2f>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   170cf:	48 8d 4b 38          	lea    0x38(%rbx),%rcx
   170d3:	8b 53 34             	mov    0x34(%rbx),%edx
   170d6:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   170da:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   170df:	48 89 ce             	mov    %rcx,%rsi
   170e2:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   170e5:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   if (n == 0) {
   170ec:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   170f1:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   170f8:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   170fe:	85 c0                	test   %eax,%eax
      s->img_buffer_end = s->buffer_start+1;
   17100:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   17104:	0f 85 26 01 00 00    	jne    17230 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x220>
      s->read_from_callbacks = 0;
   1710a:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   17111:	48 89 d1             	mov    %rdx,%rcx
      *s->img_buffer = 0;
   17114:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   17118:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   1711f:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   17126:	e9 14 ff ff ff       	jmp    1703f <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x2f>
   1712b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   17130:	8b 43 30             	mov    0x30(%rbx),%eax
   return 0;
   17133:	45 31 ff             	xor    %r15d,%r15d
   if (s->read_from_callbacks) {
   17136:	85 c0                	test   %eax,%eax
   17138:	0f 84 51 ff ff ff    	je     1708f <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x7f>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1713e:	48 8d 4b 38          	lea    0x38(%rbx),%rcx
   17142:	8b 53 34             	mov    0x34(%rbx),%edx
   17145:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   17149:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1714e:	48 89 ce             	mov    %rcx,%rsi
   17151:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   17154:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   if (n == 0) {
   1715b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   17160:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   17167:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   1716d:	85 c0                	test   %eax,%eax
      s->img_buffer_end = s->buffer_start+1;
   1716f:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   17173:	0f 85 c7 00 00 00    	jne    17240 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x230>
      s->read_from_callbacks = 0;
   17179:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   17180:	48 89 d1             	mov    %rdx,%rcx
      *s->img_buffer = 0;
   17183:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   17187:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   1718e:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   17195:	e9 f5 fe ff ff       	jmp    1708f <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x7f>
   1719a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   171a0:	8b 53 30             	mov    0x30(%rbx),%edx
   return 0;
   171a3:	45 31 ff             	xor    %r15d,%r15d
   if (s->read_from_callbacks) {
   171a6:	85 d2                	test   %edx,%edx
   171a8:	0f 84 b9 fe ff ff    	je     17067 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x57>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   171ae:	48 8d 4b 38          	lea    0x38(%rbx),%rcx
   171b2:	8b 53 34             	mov    0x34(%rbx),%edx
   171b5:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   171b9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   171be:	48 89 ce             	mov    %rcx,%rsi
   171c1:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   171c4:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   if (n == 0) {
   171cb:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   171d0:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   171d7:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   171dd:	85 c0                	test   %eax,%eax
      s->img_buffer_end = s->buffer_start+1;
   171df:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   171e3:	75 3b                	jne    17220 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x210>
      s->read_from_callbacks = 0;
   171e5:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   171ec:	48 89 d1             	mov    %rdx,%rcx
      *s->img_buffer = 0;
   171ef:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   171f3:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   171fa:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   17201:	e9 61 fe ff ff       	jmp    17067 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x57>
   17206:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1720d:	00 00 00 
}
   17210:	48 83 c4 18          	add    $0x18,%rsp
   17214:	5b                   	pop    %rbx
   17215:	5d                   	pop    %rbp
   17216:	41 5c                	pop    %r12
   17218:	41 5d                	pop    %r13
   1721a:	41 5e                	pop    %r14
   1721c:	41 5f                	pop    %r15
   1721e:	c3                   	ret
   1721f:	90                   	nop
      s->img_buffer_end = s->buffer_start + n;
   17220:	48 98                	cltq
      return *s->img_buffer++;
   17222:	44 0f b6 7b 38       	movzbl 0x38(%rbx),%r15d
      s->img_buffer_end = s->buffer_start + n;
   17227:	48 01 c1             	add    %rax,%rcx
   1722a:	eb c7                	jmp    171f3 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x1e3>
   1722c:	0f 1f 40 00          	nopl   0x0(%rax)
   17230:	48 98                	cltq
      return *s->img_buffer++;
   17232:	44 0f b6 7b 38       	movzbl 0x38(%rbx),%r15d
      s->img_buffer_end = s->buffer_start + n;
   17237:	48 01 c1             	add    %rax,%rcx
   1723a:	e9 d9 fe ff ff       	jmp    17118 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x108>
   1723f:	90                   	nop
   17240:	48 98                	cltq
      return *s->img_buffer++;
   17242:	44 0f b6 7b 38       	movzbl 0x38(%rbx),%r15d
      s->img_buffer_end = s->buffer_start + n;
   17247:	48 01 c1             	add    %rax,%rcx
   1724a:	e9 38 ff ff ff       	jmp    17187 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii+0x177>
   1724f:	90                   	nop

0000000000017250 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc>:
{
   17250:	41 56                	push   %r14
   17252:	41 55                	push   %r13
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   17254:	4c 8d 6f 38          	lea    0x38(%rdi),%r13
{
   17258:	41 54                	push   %r12
      s->img_buffer_end = s->buffer_start+1;
   1725a:	4c 8d 67 39          	lea    0x39(%rdi),%r12
{
   1725e:	55                   	push   %rbp
   1725f:	48 89 f5             	mov    %rsi,%rbp
   17262:	53                   	push   %rbx
   17263:	48 89 fb             	mov    %rdi,%rbx
   17266:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1726d:	00 00 00 
   if (s->io.read) {
   17270:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   17275:	0f 84 9b 01 00 00    	je     17416 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1c6>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   1727b:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1727f:	ff 53 20             	call   *0x20(%rbx)
   17282:	85 c0                	test   %eax,%eax
   17284:	0f 84 b6 01 00 00    	je     17440 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1f0>
      if (s->read_from_callbacks == 0) return 1;
   1728a:	8b 7b 30             	mov    0x30(%rbx),%edi
   1728d:	85 ff                	test   %edi,%edi
   1728f:	74 36                	je     172c7 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x77>
   return s->img_buffer >= s->img_buffer_end;
   17291:	48 8b 8b c0 00 00 00 	mov    0xc0(%rbx),%rcx
   17298:	48 89 ca             	mov    %rcx,%rdx
      while (!stbi__at_eof(s) && stbi__pnm_isspace(*c))
   1729b:	48 3b 8b c8 00 00 00 	cmp    0xc8(%rbx),%rcx
   172a2:	0f 83 38 02 00 00    	jae    174e0 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x290>
   172a8:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
   return c == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';
   172ac:	3c 20                	cmp    $0x20,%al
   172ae:	0f 84 44 01 00 00    	je     173f8 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1a8>
   172b4:	3c 09                	cmp    $0x9,%al
   172b6:	0f 84 3c 01 00 00    	je     173f8 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1a8>
   172bc:	83 e8 0a             	sub    $0xa,%eax
   172bf:	3c 03                	cmp    $0x3,%al
   172c1:	0f 86 29 01 00 00    	jbe    173f0 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1a0>
   if (s->io.read) {
   172c7:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   172cc:	74 16                	je     172e4 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x94>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   172ce:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   172d2:	ff 53 20             	call   *0x20(%rbx)
   172d5:	85 c0                	test   %eax,%eax
   172d7:	74 1f                	je     172f8 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0xa8>
      if (s->read_from_callbacks == 0) return 1;
   172d9:	8b 4b 30             	mov    0x30(%rbx),%ecx
   172dc:	85 c9                	test   %ecx,%ecx
   172de:	0f 84 49 01 00 00    	je     1742d <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1dd>
      if (stbi__at_eof(s) || *c != '#')
   172e4:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   172eb:	48 39 83 c0 00 00 00 	cmp    %rax,0xc0(%rbx)
   172f2:	0f 83 35 01 00 00    	jae    1742d <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1dd>
   172f8:	80 7d 00 23          	cmpb   $0x23,0x0(%rbp)
   172fc:	0f 85 2b 01 00 00    	jne    1742d <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1dd>
   if (s->io.read) {
   17302:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   17307:	74 16                	je     1731f <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0xcf>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   17309:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1730d:	ff 53 20             	call   *0x20(%rbx)
   17310:	85 c0                	test   %eax,%eax
   17312:	74 5a                	je     1736e <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x11e>
      if (s->read_from_callbacks == 0) return 1;
   17314:	8b 53 30             	mov    0x30(%rbx),%edx
   17317:	85 d2                	test   %edx,%edx
   17319:	0f 84 51 ff ff ff    	je     17270 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x20>
   return s->img_buffer >= s->img_buffer_end;
   1731f:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
      while (!stbi__at_eof(s) && *c != '\n' && *c != '\r' )
   17326:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1732d:	0f 83 3d ff ff ff    	jae    17270 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x20>
   17333:	0f b6 55 00          	movzbl 0x0(%rbp),%edx
   17337:	80 fa 0a             	cmp    $0xa,%dl
   1733a:	0f 84 30 ff ff ff    	je     17270 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x20>
   17340:	80 fa 0d             	cmp    $0xd,%dl
   17343:	0f 84 27 ff ff ff    	je     17270 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x20>
      return *s->img_buffer++;
   17349:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1734d:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
         *c = (char) stbi__get8(s);
   17354:	44 0f b6 30          	movzbl (%rax),%r14d
   17358:	44 88 75 00          	mov    %r14b,0x0(%rbp)
   if (s->io.read) {
   1735c:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   17361:	74 bc                	je     1731f <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0xcf>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   17363:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   17367:	ff 53 20             	call   *0x20(%rbx)
   1736a:	85 c0                	test   %eax,%eax
   1736c:	75 a6                	jne    17314 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0xc4>
      while (!stbi__at_eof(s) && *c != '\n' && *c != '\r' )
   1736e:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
   17372:	3c 0d                	cmp    $0xd,%al
   17374:	0f 84 f6 fe ff ff    	je     17270 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x20>
   1737a:	3c 0a                	cmp    $0xa,%al
   1737c:	0f 84 ee fe ff ff    	je     17270 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x20>
   if (s->img_buffer < s->img_buffer_end)
   17382:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   17389:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   17390:	72 b7                	jb     17349 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0xf9>
   if (s->read_from_callbacks) {
   17392:	8b 43 30             	mov    0x30(%rbx),%eax
   17395:	45 31 f6             	xor    %r14d,%r14d
   17398:	85 c0                	test   %eax,%eax
   1739a:	74 bc                	je     17358 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x108>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1739c:	8b 53 34             	mov    0x34(%rbx),%edx
   1739f:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   173a3:	4c 89 ee             	mov    %r13,%rsi
   173a6:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   173a9:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   173b0:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   173b7:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   173bd:	85 c0                	test   %eax,%eax
   173bf:	0f 85 fb 00 00 00    	jne    174c0 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x270>
      s->read_from_callbacks = 0;
   173c5:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   173cc:	4c 89 e0             	mov    %r12,%rax
      *s->img_buffer = 0;
   173cf:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   173d3:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   173da:	4c 89 a3 c0 00 00 00 	mov    %r12,0xc0(%rbx)
   173e1:	e9 72 ff ff ff       	jmp    17358 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x108>
   173e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   173ed:	00 00 00 
   if (s->img_buffer < s->img_buffer_end)
   173f0:	48 89 ca             	mov    %rcx,%rdx
   173f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   173f8:	48 8d 42 01          	lea    0x1(%rdx),%rax
   173fc:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
         *c = (char) stbi__get8(s);
   17403:	44 0f b6 32          	movzbl (%rdx),%r14d
   17407:	44 88 75 00          	mov    %r14b,0x0(%rbp)
   if (s->io.read) {
   1740b:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   17410:	0f 85 65 fe ff ff    	jne    1727b <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x2b>
   return s->img_buffer >= s->img_buffer_end;
   17416:	48 8b 8b c0 00 00 00 	mov    0xc0(%rbx),%rcx
   1741d:	48 89 ca             	mov    %rcx,%rdx
      while (!stbi__at_eof(s) && stbi__pnm_isspace(*c))
   17420:	48 3b 8b c8 00 00 00 	cmp    0xc8(%rbx),%rcx
   17427:	0f 82 7b fe ff ff    	jb     172a8 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x58>
}
   1742d:	5b                   	pop    %rbx
   1742e:	5d                   	pop    %rbp
   1742f:	41 5c                	pop    %r12
   17431:	41 5d                	pop    %r13
   17433:	41 5e                	pop    %r14
   17435:	c3                   	ret
   17436:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1743d:	00 00 00 
      while (!stbi__at_eof(s) && stbi__pnm_isspace(*c))
   17440:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
   return c == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';
   17444:	3c 20                	cmp    $0x20,%al
   17446:	74 0f                	je     17457 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x207>
   17448:	3c 09                	cmp    $0x9,%al
   1744a:	74 0b                	je     17457 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x207>
   1744c:	83 e8 0a             	sub    $0xa,%eax
   1744f:	3c 03                	cmp    $0x3,%al
   17451:	0f 87 70 fe ff ff    	ja     172c7 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x77>
   if (s->img_buffer < s->img_buffer_end)
   17457:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1745e:	48 3b 93 c8 00 00 00 	cmp    0xc8(%rbx),%rdx
   17465:	72 91                	jb     173f8 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1a8>
   if (s->read_from_callbacks) {
   17467:	8b 73 30             	mov    0x30(%rbx),%esi
   1746a:	45 31 f6             	xor    %r14d,%r14d
   1746d:	85 f6                	test   %esi,%esi
   1746f:	74 96                	je     17407 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1b7>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   17471:	8b 53 34             	mov    0x34(%rbx),%edx
   17474:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   17478:	4c 89 ee             	mov    %r13,%rsi
   1747b:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1747e:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   17485:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1748c:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   17492:	85 c0                	test   %eax,%eax
   17494:	75 3a                	jne    174d0 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x280>
      s->read_from_callbacks = 0;
   17496:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1749d:	4c 89 e0             	mov    %r12,%rax
      *s->img_buffer = 0;
   174a0:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   174a4:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   174ab:	4c 89 a3 c0 00 00 00 	mov    %r12,0xc0(%rbx)
   174b2:	e9 50 ff ff ff       	jmp    17407 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1b7>
   174b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   174be:	00 00 
      s->img_buffer_end = s->buffer_start + n;
   174c0:	48 98                	cltq
         *c = (char) stbi__get8(s);
   174c2:	44 0f b6 73 38       	movzbl 0x38(%rbx),%r14d
      s->img_buffer_end = s->buffer_start + n;
   174c7:	4c 01 e8             	add    %r13,%rax
   174ca:	e9 04 ff ff ff       	jmp    173d3 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x183>
   174cf:	90                   	nop
   174d0:	48 98                	cltq
         *c = (char) stbi__get8(s);
   174d2:	44 0f b6 73 38       	movzbl 0x38(%rbx),%r14d
      s->img_buffer_end = s->buffer_start + n;
   174d7:	4c 01 e8             	add    %r13,%rax
   174da:	eb c8                	jmp    174a4 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x254>
   174dc:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->io.read) {
   174e0:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   174e5:	0f 85 e3 fd ff ff    	jne    172ce <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x7e>
   174eb:	e9 3d ff ff ff       	jmp    1742d <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc+0x1dd>

00000000000174f0 <_ZL20stbi__pnm_getintegerP13stbi__contextPc>:
{
   174f0:	41 56                	push   %r14
   174f2:	41 55                	push   %r13
   174f4:	41 54                	push   %r12
   174f6:	49 89 f4             	mov    %rsi,%r12
   174f9:	55                   	push   %rbp
   int value = 0;
   174fa:	31 ed                	xor    %ebp,%ebp
{
   174fc:	53                   	push   %rbx
   174fd:	48 89 fb             	mov    %rdi,%rbx
   if (s->io.read) {
   17500:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   17505:	74 16                	je     1751d <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x2d>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   17507:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1750b:	ff 53 20             	call   *0x20(%rbx)
   1750e:	85 c0                	test   %eax,%eax
   17510:	74 5d                	je     1756f <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x7f>
      if (s->read_from_callbacks == 0) return 1;
   17512:	8b 53 30             	mov    0x30(%rbx),%edx
   17515:	85 d2                	test   %edx,%edx
   17517:	0f 84 d3 00 00 00    	je     175f0 <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x100>
   return s->img_buffer >= s->img_buffer_end;
   1751d:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   while (!stbi__at_eof(s) && stbi__pnm_isdigit(*c)) {
   17524:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1752b:	0f 83 bf 00 00 00    	jae    175f0 <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x100>
   17531:	41 0f be 14 24       	movsbl (%r12),%edx
   return c >= '0' && c <= '9';
   17536:	8d 4a d0             	lea    -0x30(%rdx),%ecx
   while (!stbi__at_eof(s) && stbi__pnm_isdigit(*c)) {
   17539:	80 f9 09             	cmp    $0x9,%cl
   1753c:	0f 87 ae 00 00 00    	ja     175f0 <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x100>
      value = value*10 + (*c - '0');
   17542:	8d 4c ad 00          	lea    0x0(%rbp,%rbp,4),%ecx
   17546:	8d 6c 4a d0          	lea    -0x30(%rdx,%rcx,2),%ebp
      return *s->img_buffer++;
   1754a:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1754e:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      *c = (char) stbi__get8(s);
   17555:	44 0f b6 28          	movzbl (%rax),%r13d
   17559:	45 88 2c 24          	mov    %r13b,(%r12)
   if (s->io.read) {
   1755d:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   17562:	74 b9                	je     1751d <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x2d>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   17564:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   17568:	ff 53 20             	call   *0x20(%rbx)
   1756b:	85 c0                	test   %eax,%eax
   1756d:	75 a3                	jne    17512 <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x22>
   while (!stbi__at_eof(s) && stbi__pnm_isdigit(*c)) {
   1756f:	41 0f be 14 24       	movsbl (%r12),%edx
   17574:	89 d0                	mov    %edx,%eax
   return c >= '0' && c <= '9';
   17576:	83 e8 30             	sub    $0x30,%eax
   while (!stbi__at_eof(s) && stbi__pnm_isdigit(*c)) {
   17579:	3c 09                	cmp    $0x9,%al
   1757b:	77 73                	ja     175f0 <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x100>
      value = value*10 + (*c - '0');
   1757d:	8d 44 ad 00          	lea    0x0(%rbp,%rbp,4),%eax
   17581:	8d 6c 42 d0          	lea    -0x30(%rdx,%rax,2),%ebp
   if (s->img_buffer < s->img_buffer_end)
   17585:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1758c:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   17593:	72 b5                	jb     1754a <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x5a>
   if (s->read_from_callbacks) {
   17595:	8b 43 30             	mov    0x30(%rbx),%eax
   17598:	45 31 ed             	xor    %r13d,%r13d
   1759b:	85 c0                	test   %eax,%eax
   1759d:	74 ba                	je     17559 <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x69>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1759f:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   175a3:	8b 53 34             	mov    0x34(%rbx),%edx
   175a6:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   175aa:	4c 89 f6             	mov    %r14,%rsi
   175ad:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   175b0:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   175b7:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   175be:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   175c4:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   175c8:	85 c0                	test   %eax,%eax
   175ca:	74 34                	je     17600 <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x110>
      s->img_buffer_end = s->buffer_start + n;
   175cc:	48 98                	cltq
      *c = (char) stbi__get8(s);
   175ce:	44 0f b6 6b 38       	movzbl 0x38(%rbx),%r13d
      s->img_buffer_end = s->buffer_start + n;
   175d3:	49 01 c6             	add    %rax,%r14
   175d6:	4c 89 b3 c8 00 00 00 	mov    %r14,0xc8(%rbx)
      return *s->img_buffer++;
   175dd:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   175e4:	e9 70 ff ff ff       	jmp    17559 <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0x69>
   175e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
   175f0:	5b                   	pop    %rbx
   175f1:	89 e8                	mov    %ebp,%eax
   175f3:	5d                   	pop    %rbp
   175f4:	41 5c                	pop    %r12
   175f6:	41 5d                	pop    %r13
   175f8:	41 5e                	pop    %r14
   175fa:	c3                   	ret
   175fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->read_from_callbacks = 0;
   17600:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   17607:	49 89 d6             	mov    %rdx,%r14
      *s->img_buffer = 0;
   1760a:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1760e:	eb c6                	jmp    175d6 <_ZL20stbi__pnm_getintegerP13stbi__contextPc+0xe6>

0000000000017610 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii>:
{
   17610:	41 57                	push   %r15
   int output_bytes = out_n*bytes;
   17612:	89 c8                	mov    %ecx,%eax
{
   17614:	41 56                	push   %r14
   17616:	41 55                	push   %r13
   17618:	41 54                	push   %r12
   1761a:	55                   	push   %rbp
   1761b:	53                   	push   %rbx
   1761c:	89 d3                	mov    %edx,%ebx
   1761e:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
   int bytes = (depth == 16? 2 : 1);
   17625:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   1762c:	10 
{
   1762d:	48 89 bc 24 80 00 00 	mov    %rdi,0x80(%rsp)
   17634:	00 
   17635:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
   1763a:	89 8c 24 a4 00 00 00 	mov    %ecx,0xa4(%rsp)
   17641:	44 89 84 24 90 00 00 	mov    %r8d,0x90(%rsp)
   17648:	00 
   17649:	44 89 8c 24 a0 00 00 	mov    %r9d,0xa0(%rsp)
   17650:	00 
   int bytes = (depth == 16? 2 : 1);
   17651:	0f 84 c1 02 00 00    	je     17918 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x308>
   17657:	41 89 ce             	mov    %ecx,%r14d
   1765a:	41 bc 01 00 00 00    	mov    $0x1,%r12d
   17660:	48 89 f8             	mov    %rdi,%rax
   17663:	44 89 c6             	mov    %r8d,%esi
   17666:	41 bf 01 00 00 00    	mov    $0x1,%r15d
   int img_n = s->img_n; // copy it into a local for later
   1766c:	48 8b 00             	mov    (%rax),%rax
   if (a < 0 || b < 0) return 0;
   1766f:	89 f7                	mov    %esi,%edi
   int img_n = s->img_n; // copy it into a local for later
   17671:	8b 40 08             	mov    0x8(%rax),%eax
   17674:	89 84 24 a8 00 00 00 	mov    %eax,0xa8(%rsp)
   if (a < 0 || b < 0) return 0;
   1767b:	8b 84 24 a0 00 00 00 	mov    0xa0(%rsp),%eax
   17682:	09 c7                	or     %eax,%edi
   17684:	78 3a                	js     176c0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xb0>
   int width = x;
   17686:	89 b4 24 ac 00 00 00 	mov    %esi,0xac(%rsp)
   a->out = (stbi_uc *) stbi__malloc_mad3(x, y, output_bytes, 0); // extra bytes to write off the end into
   1768d:	89 c7                	mov    %eax,%edi
   if (b == 0) return 1; // mul-by-0 is always safe
   1768f:	85 c0                	test   %eax,%eax
   17691:	74 4d                	je     176e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xd0>
   return a <= INT_MAX/b;
   17693:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   17698:	31 d2                	xor    %edx,%edx
   1769a:	f7 ff                	idiv   %edi
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   1769c:	39 c6                	cmp    %eax,%esi
   1769e:	7f 20                	jg     176c0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xb0>
   if (a < 0 || b < 0) return 0;
   176a0:	45 85 f6             	test   %r14d,%r14d
   176a3:	78 1b                	js     176c0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xb0>
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   176a5:	0f af fe             	imul   %esi,%edi
   if (b == 0) return 1; // mul-by-0 is always safe
   176a8:	45 85 f6             	test   %r14d,%r14d
   176ab:	74 38                	je     176e5 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xd5>
   return a <= INT_MAX/b;
   176ad:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   176b2:	31 d2                	xor    %edx,%edx
   176b4:	41 f7 fe             	idiv   %r14d
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   176b7:	39 c7                	cmp    %eax,%edi
   176b9:	7e 2a                	jle    176e5 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xd5>
   176bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   a->out = (stbi_uc *) stbi__malloc_mad3(x, y, output_bytes, 0); // extra bytes to write off the end into
   176c0:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
   176c7:	00 
   176c8:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   176cf:	00 
   if (!a->out) return stbi__err("outofmem", "Out of memory");
   176d0:	48 8d 15 5e 03 02 00 	lea    0x2035e(%rip),%rdx        # 37a35 <_ZSt19piecewise_construct+0xee>
   176d7:	e9 1b 02 00 00       	jmp    178f7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e7>
   176dc:	0f 1f 40 00          	nopl   0x0(%rax)
   if (a < 0 || b < 0) return 0;
   176e0:	45 85 f6             	test   %r14d,%r14d
   176e3:	78 db                	js     176c0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xb0>
   return stbi__malloc(a*b*c + add);
   176e5:	41 0f af fe          	imul   %r14d,%edi
   176e9:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   176ec:	e8 6f f0 fe ff       	call   6760 <malloc@plt>
   176f1:	48 89 c7             	mov    %rax,%rdi
   a->out = (stbi_uc *) stbi__malloc_mad3(x, y, output_bytes, 0); // extra bytes to write off the end into
   176f4:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
   176fb:	00 
   176fc:	48 89 78 18          	mov    %rdi,0x18(%rax)
   if (!a->out) return stbi__err("outofmem", "Out of memory");
   17700:	48 85 ff             	test   %rdi,%rdi
   17703:	74 cb                	je     176d0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xc0>
   if (a < 0 || b < 0) return 0;
   17705:	8b b4 24 a8 00 00 00 	mov    0xa8(%rsp),%esi
   1770c:	85 f6                	test   %esi,%esi
   1770e:	0f 88 dc 01 00 00    	js     178f0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e0>
   if (b == 0) return 1; // mul-by-0 is always safe
   17714:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   1771b:	85 c0                	test   %eax,%eax
   1771d:	0f 84 bc 01 00 00    	je     178df <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2cf>
   return a <= INT_MAX/b;
   17723:	89 c1                	mov    %eax,%ecx
   17725:	31 d2                	xor    %edx,%edx
   17727:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1772c:	f7 f9                	idiv   %ecx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   1772e:	39 c6                	cmp    %eax,%esi
   17730:	0f 8f ba 01 00 00    	jg     178f0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e0>
   if (a < 0 || b < 0) return 0;
   17736:	8b 84 24 f0 01 00 00 	mov    0x1f0(%rsp),%eax
   1773d:	85 c0                	test   %eax,%eax
   1773f:	0f 88 ab 01 00 00    	js     178f0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e0>
   if (b == 0) return 1; // mul-by-0 is always safe
   17745:	74 3d                	je     17784 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x174>
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   17747:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   1774e:	89 f1                	mov    %esi,%ecx
   return a <= INT_MAX/b;
   17750:	31 d2                	xor    %edx,%edx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   17752:	0f af c8             	imul   %eax,%ecx
   return a <= INT_MAX/b;
   17755:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1775a:	f7 bc 24 f0 01 00 00 	idivl  0x1f0(%rsp)
   17761:	48 8d 15 f0 02 02 00 	lea    0x202f0(%rip),%rdx        # 37a58 <_ZSt19piecewise_construct+0x111>
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   17768:	39 c1                	cmp    %eax,%ecx
   1776a:	0f 8f 87 01 00 00    	jg     178f7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e7>
      stbi__addsizes_valid(a*b*c, add);
   17770:	0f af 8c 24 f0 01 00 	imul   0x1f0(%rsp),%ecx
   17777:	00 
   if (!stbi__mad3sizes_valid(img_n, x, depth, 7)) return stbi__err("too large", "Corrupt PNG");
   17778:	81 f9 f8 ff ff 7f    	cmp    $0x7ffffff8,%ecx
   1777e:	0f 8f 73 01 00 00    	jg     178f7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e7>
   img_width_bytes = (((img_n * x * depth) + 7) >> 3);
   17784:	8b b4 24 90 00 00 00 	mov    0x90(%rsp),%esi
   1778b:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
   17792:	0f af c6             	imul   %esi,%eax
   img_len = (img_width_bytes + 1) * y;
   17795:	8b b4 24 a0 00 00 00 	mov    0xa0(%rsp),%esi
   img_width_bytes = (((img_n * x * depth) + 7) >> 3);
   1779c:	89 84 24 a0 01 00 00 	mov    %eax,0x1a0(%rsp)
   177a3:	0f af 84 24 f0 01 00 	imul   0x1f0(%rsp),%eax
   177aa:	00 
   177ab:	83 c0 07             	add    $0x7,%eax
   177ae:	c1 e8 03             	shr    $0x3,%eax
   177b1:	89 84 24 c8 00 00 00 	mov    %eax,0xc8(%rsp)
   img_len = (img_width_bytes + 1) * y;
   177b8:	83 c0 01             	add    $0x1,%eax
   177bb:	0f af c6             	imul   %esi,%eax
   if (raw_len < img_len) return stbi__err("not enough pixels","Corrupt PNG");
   177be:	39 c3                	cmp    %eax,%ebx
   177c0:	0f 82 6a 05 00 00    	jb     17d30 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x720>
   for (j=0; j < y; ++j) {
   177c6:	85 f6                	test   %esi,%esi
   177c8:	0f 84 a6 31 00 00    	je     1a974 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3364>
   stbi__uint32 i,j,stride = x*out_n*bytes;
   177ce:	8b 84 24 a4 00 00 00 	mov    0xa4(%rsp),%eax
   177d5:	8b b4 24 90 00 00 00 	mov    0x90(%rsp),%esi
      if (depth < 8 || img_n == out_n) {
   177dc:	c7 84 24 9c 00 00 00 	movl   $0x0,0x9c(%rsp)
   177e3:	00 00 00 00 
         switch (filter) {
   177e7:	48 8d 2d 42 08 02 00 	lea    0x20842(%rip),%rbp        # 38030 <_ZSt19piecewise_construct+0x6e9>
   for (j=0; j < y; ++j) {
   177ee:	c7 44 24 5c 00 00 00 	movl   $0x0,0x5c(%rsp)
   177f5:	00 
   stbi__uint32 i,j,stride = x*out_n*bytes;
   177f6:	89 c3                	mov    %eax,%ebx
   177f8:	0f af de             	imul   %esi,%ebx
   177fb:	44 0f af e3          	imul   %ebx,%r12d
   177ff:	89 9c 24 cc 00 00 00 	mov    %ebx,0xcc(%rsp)
   int filter_bytes = img_n*bytes;
   17806:	8b 9c 24 a8 00 00 00 	mov    0xa8(%rsp),%ebx
   1780d:	44 0f af fb          	imul   %ebx,%r15d
      if (depth < 8 || img_n == out_n) {
   17811:	83 bc 24 f0 01 00 00 	cmpl   $0x7,0x1f0(%rsp)
   17818:	07 
   17819:	0f 9e c2             	setle  %dl
   1781c:	39 d8                	cmp    %ebx,%eax
   stbi__uint32 i,j,stride = x*out_n*bytes;
   1781e:	44 89 a4 24 98 00 00 	mov    %r12d,0x98(%rsp)
   17825:	00 
      if (depth < 8 || img_n == out_n) {
   17826:	0f 94 c0             	sete   %al
   17829:	09 c2                	or     %eax,%edx
   int filter_bytes = img_n*bytes;
   1782b:	44 89 7c 24 58       	mov    %r15d,0x58(%rsp)
      if (depth < 8 || img_n == out_n) {
   17830:	88 94 24 c0 00 00 00 	mov    %dl,0xc0(%rsp)
   17837:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1783e:	00 00 
      int filter = *raw++;
   17840:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
      stbi_uc *cur = a->out + stride*j;
   17845:	44 8b bc 24 9c 00 00 	mov    0x9c(%rsp),%r15d
   1784c:	00 
      int filter = *raw++;
   1784d:	0f b6 10             	movzbl (%rax),%edx
      stbi_uc *cur = a->out + stride*j;
   17850:	4c 01 ff             	add    %r15,%rdi
      int filter = *raw++;
   17853:	4c 8d 58 01          	lea    0x1(%rax),%r11
      if (filter > 4)
   17857:	83 fa 04             	cmp    $0x4,%edx
   1785a:	0f 8f 1e 31 00 00    	jg     1a97e <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x336e>
      if (depth < 8) {
   17860:	83 bc 24 f0 01 00 00 	cmpl   $0x7,0x1f0(%rsp)
   17867:	07 
   17868:	0f 8f 7a 01 00 00    	jg     179e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3d8>
         if (img_width_bytes > x) return stbi__err("invalid width","Corrupt PNG");
   1786e:	8b 9c 24 c8 00 00 00 	mov    0xc8(%rsp),%ebx
   17875:	39 9c 24 90 00 00 00 	cmp    %ebx,0x90(%rsp)
   1787c:	0f 82 dc 34 00 00    	jb     1ad5e <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x374e>
         cur += x*out_n - img_width_bytes; // store output to the rightmost img_len bytes, so we can decode in place
   17882:	8b 84 24 cc 00 00 00 	mov    0xcc(%rsp),%eax
      prior = cur - stride; // bugfix: need to compute this after 'cur +=' computation above
   17889:	8b 8c 24 98 00 00 00 	mov    0x98(%rsp),%ecx
         width = img_width_bytes;
   17890:	89 9c 24 ac 00 00 00 	mov    %ebx,0xac(%rsp)
      if (j == 0) filter = first_row_filter[filter];
   17897:	44 8b 6c 24 5c       	mov    0x5c(%rsp),%r13d
         filter_bytes = 1;
   1789c:	c7 44 24 58 01 00 00 	movl   $0x1,0x58(%rsp)
   178a3:	00 
         cur += x*out_n - img_width_bytes; // store output to the rightmost img_len bytes, so we can decode in place
   178a4:	29 d8                	sub    %ebx,%eax
   178a6:	48 01 c7             	add    %rax,%rdi
      prior = cur - stride; // bugfix: need to compute this after 'cur +=' computation above
   178a9:	48 89 f8             	mov    %rdi,%rax
   178ac:	48 29 c8             	sub    %rcx,%rax
      if (j == 0) filter = first_row_filter[filter];
   178af:	45 85 ed             	test   %r13d,%r13d
   178b2:	75 0b                	jne    178bf <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2af>
   178b4:	48 8d 1d 96 0a 02 00 	lea    0x20a96(%rip),%rbx        # 38351 <_ZL16first_row_filter>
   178bb:	0f b6 14 13          	movzbl (%rbx,%rdx,1),%edx
         switch (filter) {
   178bf:	8b 5c 24 58          	mov    0x58(%rsp),%ebx
   178c3:	4d 89 d9             	mov    %r11,%r9
   178c6:	49 89 f8             	mov    %rdi,%r8
         filter_bytes = 1;
   178c9:	31 f6                	xor    %esi,%esi
         switch (filter) {
   178cb:	41 89 d2             	mov    %edx,%r10d
   178ce:	66 90                	xchg   %ax,%ax
   178d0:	83 fa 06             	cmp    $0x6,%edx
   178d3:	77 6a                	ja     1793f <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x32f>
   178d5:	4a 63 4c 95 00       	movslq 0x0(%rbp,%r10,4),%rcx
   178da:	48 01 e9             	add    %rbp,%rcx
   178dd:	ff e1                	jmp    *%rcx
   if (a < 0 || b < 0) return 0;
   178df:	8b 84 24 f0 01 00 00 	mov    0x1f0(%rsp),%eax
   178e6:	85 c0                	test   %eax,%eax
   178e8:	0f 89 96 fe ff ff    	jns    17784 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x174>
   178ee:	66 90                	xchg   %ax,%ax
   178f0:	48 8d 15 61 01 02 00 	lea    0x20161(%rip),%rdx        # 37a58 <_ZSt19piecewise_construct+0x111>
   stbi__g_failure_reason = str;
   178f7:	64 48 89 14 25 f8 ff 	mov    %rdx,%fs:0xfffffffffffffff8
   178fe:	ff ff 
   if (!a->out) return stbi__err("outofmem", "Out of memory");
   17900:	31 c0                	xor    %eax,%eax
}
   17902:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
   17909:	5b                   	pop    %rbx
   1790a:	5d                   	pop    %rbp
   1790b:	41 5c                	pop    %r12
   1790d:	41 5d                	pop    %r13
   1790f:	41 5e                	pop    %r14
   17911:	41 5f                	pop    %r15
   17913:	c3                   	ret
   17914:	0f 1f 40 00          	nopl   0x0(%rax)
   int output_bytes = out_n*bytes;
   17918:	01 c0                	add    %eax,%eax
   1791a:	41 bc 02 00 00 00    	mov    $0x2,%r12d
   int bytes = (depth == 16? 2 : 1);
   17920:	41 bf 02 00 00 00    	mov    $0x2,%r15d
   17926:	44 89 c6             	mov    %r8d,%esi
   int output_bytes = out_n*bytes;
   17929:	41 89 c6             	mov    %eax,%r14d
   1792c:	48 89 f8             	mov    %rdi,%rax
   1792f:	e9 38 fd ff ff       	jmp    1766c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x5c>
   17934:	0f 1f 40 00          	nopl   0x0(%rax)
            case STBI__F_paeth_first: cur[k] = raw[k]; break;
   17938:	41 0f b6 09          	movzbl (%r9),%ecx
   1793c:	41 88 08             	mov    %cl,(%r8)
      for (k=0; k < filter_bytes; ++k) {
   1793f:	48 83 c6 01          	add    $0x1,%rsi
   17943:	49 83 c1 01          	add    $0x1,%r9
   17947:	49 83 c0 01          	add    $0x1,%r8
   1794b:	39 f3                	cmp    %esi,%ebx
   1794d:	7f 81                	jg     178d0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2c0>
      if (depth == 8) {
   1794f:	83 bc 24 f0 01 00 00 	cmpl   $0x8,0x1f0(%rsp)
   17956:	08 
   17957:	0f 84 cb 00 00 00    	je     17a28 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x418>
      } else if (depth == 16) {
   1795d:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   17964:	10 
   17965:	0f 84 8d 03 00 00    	je     17cf8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x6e8>
         raw += 1;
   1796b:	48 83 44 24 50 02    	addq   $0x2,0x50(%rsp)
         cur += 1;
   17971:	48 83 c7 01          	add    $0x1,%rdi
         prior += 1;
   17975:	48 83 c0 01          	add    $0x1,%rax
      if (depth < 8 || img_n == out_n) {
   17979:	80 bc 24 c0 00 00 00 	cmpb   $0x0,0xc0(%rsp)
   17980:	00 
   17981:	0f 84 db 00 00 00    	je     17a62 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x452>
         int nk = (width - 1)*filter_bytes;
   17987:	8b 9c 24 ac 00 00 00 	mov    0xac(%rsp),%ebx
   1798e:	44 8b 7c 24 58       	mov    0x58(%rsp),%r15d
   17993:	8d 4b ff             	lea    -0x1(%rbx),%ecx
   17996:	44 0f af f9          	imul   %ecx,%r15d
            case STBI__F_none:         memcpy(cur, raw, nk); break;
   1799a:	4d 63 ef             	movslq %r15d,%r13
         switch (filter) {
   1799d:	83 fa 06             	cmp    $0x6,%edx
   179a0:	0f 87 ea 00 00 00    	ja     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   179a6:	48 8d 0d 9f 06 02 00 	lea    0x2069f(%rip),%rcx        # 3804c <_ZSt19piecewise_construct+0x705>
   179ad:	89 d2                	mov    %edx,%edx
   179af:	48 63 14 91          	movslq (%rcx,%rdx,4),%rdx
   179b3:	48 01 ca             	add    %rcx,%rdx
   179b6:	ff e2                	jmp    *%rdx
   179b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   179bf:	00 
            case STBI__F_paeth      : cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(0,prior[k],0)); break;
   179c0:	0f b6 0c 30          	movzbl (%rax,%rsi,1),%ecx
   179c4:	41 02 09             	add    (%r9),%cl
   179c7:	41 88 08             	mov    %cl,(%r8)
   179ca:	e9 70 ff ff ff       	jmp    1793f <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x32f>
   179cf:	90                   	nop
            case STBI__F_avg        : cur[k] = STBI__BYTECAST(raw[k] + (prior[k]>>1)); break;
   179d0:	0f b6 0c 30          	movzbl (%rax,%rsi,1),%ecx
   179d4:	d0 e9                	shr    %cl
   179d6:	41 02 09             	add    (%r9),%cl
   179d9:	41 88 08             	mov    %cl,(%r8)
   179dc:	e9 5e ff ff ff       	jmp    1793f <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x32f>
   179e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      prior = cur - stride; // bugfix: need to compute this after 'cur +=' computation above
   179e8:	8b 8c 24 98 00 00 00 	mov    0x98(%rsp),%ecx
      if (j == 0) filter = first_row_filter[filter];
   179ef:	44 8b 64 24 5c       	mov    0x5c(%rsp),%r12d
      prior = cur - stride; // bugfix: need to compute this after 'cur +=' computation above
   179f4:	48 89 f8             	mov    %rdi,%rax
   179f7:	48 29 c8             	sub    %rcx,%rax
      if (j == 0) filter = first_row_filter[filter];
   179fa:	45 85 e4             	test   %r12d,%r12d
   179fd:	75 0b                	jne    17a0a <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3fa>
   179ff:	48 8d 1d 4b 09 02 00 	lea    0x2094b(%rip),%rbx        # 38351 <_ZL16first_row_filter>
   17a06:	0f b6 14 13          	movzbl (%rbx,%rdx,1),%edx
      for (k=0; k < filter_bytes; ++k) {
   17a0a:	8b 5c 24 58          	mov    0x58(%rsp),%ebx
   17a0e:	85 db                	test   %ebx,%ebx
   17a10:	0f 8f a9 fe ff ff    	jg     178bf <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2af>
      if (depth == 8) {
   17a16:	83 bc 24 f0 01 00 00 	cmpl   $0x8,0x1f0(%rsp)
   17a1d:	08 
   17a1e:	0f 85 39 ff ff ff    	jne    1795d <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34d>
   17a24:	0f 1f 40 00          	nopl   0x0(%rax)
            cur[img_n] = 255; // first pixel
   17a28:	48 63 8c 24 a8 00 00 	movslq 0xa8(%rsp),%rcx
   17a2f:	00 
         if (img_n != out_n)
   17a30:	39 8c 24 a4 00 00 00 	cmp    %ecx,0xa4(%rsp)
   17a37:	74 04                	je     17a3d <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x42d>
            cur[img_n] = 255; // first pixel
   17a39:	c6 04 0f ff          	movb   $0xff,(%rdi,%rcx,1)
         raw += img_n;
   17a3d:	49 8d 1c 0b          	lea    (%r11,%rcx,1),%rbx
         cur += out_n;
   17a41:	48 63 8c 24 a4 00 00 	movslq 0xa4(%rsp),%rcx
   17a48:	00 
         raw += img_n;
   17a49:	48 89 5c 24 50       	mov    %rbx,0x50(%rsp)
         cur += out_n;
   17a4e:	48 01 cf             	add    %rcx,%rdi
         prior += out_n;
   17a51:	48 01 c8             	add    %rcx,%rax
      if (depth < 8 || img_n == out_n) {
   17a54:	80 bc 24 c0 00 00 00 	cmpb   $0x0,0xc0(%rsp)
   17a5b:	00 
   17a5c:	0f 85 25 ff ff ff    	jne    17987 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x377>
         switch (filter) {
   17a62:	83 fa 06             	cmp    $0x6,%edx
   17a65:	0f 87 31 02 00 00    	ja     17c9c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x68c>
   17a6b:	48 8d 35 f6 05 02 00 	lea    0x205f6(%rip),%rsi        # 38068 <_ZSt19piecewise_construct+0x721>
   17a72:	89 d1                	mov    %edx,%ecx
   17a74:	48 63 0c 8e          	movslq (%rsi,%rcx,4),%rcx
   17a78:	48 01 f1             	add    %rsi,%rcx
   17a7b:	ff e1                	jmp    *%rcx
            case STBI__F_none:         memcpy(cur, raw, nk); break;
   17a7d:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   17a82:	4c 89 ea             	mov    %r13,%rdx
   17a85:	e8 86 e9 fe ff       	call   6410 <memcpy@plt>
   17a8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         raw += nk;
   17a90:	4c 01 6c 24 50       	add    %r13,0x50(%rsp)
   for (j=0; j < y; ++j) {
   17a95:	8b 44 24 5c          	mov    0x5c(%rsp),%eax
   17a99:	8b bc 24 98 00 00 00 	mov    0x98(%rsp),%edi
   17aa0:	01 bc 24 9c 00 00 00 	add    %edi,0x9c(%rsp)
   17aa7:	83 c0 01             	add    $0x1,%eax
   17aaa:	39 84 24 a0 00 00 00 	cmp    %eax,0xa0(%rsp)
   17ab1:	0f 84 ca 2d 00 00    	je     1a881 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3271>
      stbi_uc *cur = a->out;
   17ab7:	48 8b 9c 24 80 00 00 	mov    0x80(%rsp),%rbx
   17abe:	00 
   for (j=0; j < y; ++j) {
   17abf:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
      stbi_uc *cur = a->out;
   17ac3:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
   17ac7:	e9 74 fd ff ff       	jmp    17840 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x230>
            STBI__CASE(STBI__F_up)           { cur[k] = STBI__BYTECAST(raw[k] + prior[k]); } break;
   17acc:	8b 9c 24 90 00 00 00 	mov    0x90(%rsp),%ebx
   17ad3:	83 eb 01             	sub    $0x1,%ebx
   17ad6:	89 9c 24 c4 00 00 00 	mov    %ebx,0xc4(%rsp)
   17add:	41 89 d8             	mov    %ebx,%r8d
   17ae0:	0f 84 7c 2d 00 00    	je     1a862 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3252>
            cur[filter_bytes]   = 255; // first pixel top byte
   17ae6:	48 63 4c 24 58       	movslq 0x58(%rsp),%rcx
         cur += output_bytes;
   17aeb:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
   17af0:	4c 89 7c 24 20       	mov    %r15,0x20(%rsp)
   17af5:	4d 63 d6             	movslq %r14d,%r10
   17af8:	89 cb                	mov    %ecx,%ebx
   17afa:	41 89 c9             	mov    %ecx,%r9d
   17afd:	41 89 cd             	mov    %ecx,%r13d
            cur[filter_bytes]   = 255; // first pixel top byte
   17b00:	49 89 cb             	mov    %rcx,%r11
   17b03:	83 e3 0f             	and    $0xf,%ebx
   17b06:	41 c1 e9 04          	shr    $0x4,%r9d
   17b0a:	44 8d 61 ff          	lea    -0x1(%rcx),%r12d
   17b0e:	41 83 e5 f0          	and    $0xfffffff0,%r13d
   17b12:	89 1c 24             	mov    %ebx,(%rsp)
   17b15:	83 eb 01             	sub    $0x1,%ebx
   17b18:	49 c1 e1 04          	shl    $0x4,%r9
   17b1c:	89 5c 24 10          	mov    %ebx,0x10(%rsp)
            STBI__CASE(STBI__F_up)           { cur[k] = STBI__BYTECAST(raw[k] + prior[k]); } break;
   17b20:	45 85 db             	test   %r11d,%r11d
   17b23:	0f 8e 47 01 00 00    	jle    17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   17b29:	41 83 fc 06          	cmp    $0x6,%r12d
   17b2d:	0f 86 25 29 00 00    	jbe    1a458 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e48>
   17b33:	48 8d 5a 01          	lea    0x1(%rdx),%rbx
   17b37:	48 89 fe             	mov    %rdi,%rsi
   17b3a:	48 29 de             	sub    %rbx,%rsi
   17b3d:	48 83 fe 0e          	cmp    $0xe,%rsi
   17b41:	0f 86 11 29 00 00    	jbe    1a458 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e48>
   17b47:	48 8d 58 01          	lea    0x1(%rax),%rbx
   17b4b:	48 89 fe             	mov    %rdi,%rsi
   17b4e:	48 29 de             	sub    %rbx,%rsi
   17b51:	48 83 fe 0e          	cmp    $0xe,%rsi
   17b55:	0f 86 fd 28 00 00    	jbe    1a458 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e48>
   17b5b:	41 83 fc 0e          	cmp    $0xe,%r12d
   17b5f:	0f 86 32 2e 00 00    	jbe    1a997 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3387>
   17b65:	31 f6                	xor    %esi,%esi
   17b67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   17b6e:	00 00 
   17b70:	f3 0f 6f 04 32       	movdqu (%rdx,%rsi,1),%xmm0
   17b75:	f3 0f 6f 2c 30       	movdqu (%rax,%rsi,1),%xmm5
   17b7a:	66 0f fc c5          	paddb  %xmm5,%xmm0
   17b7e:	0f 11 04 37          	movups %xmm0,(%rdi,%rsi,1)
   17b82:	48 83 c6 10          	add    $0x10,%rsi
   17b86:	49 39 f1             	cmp    %rsi,%r9
   17b89:	75 e5                	jne    17b70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x560>
   17b8b:	45 39 eb             	cmp    %r13d,%r11d
   17b8e:	0f 84 dc 00 00 00    	je     17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   17b94:	83 7c 24 10 06       	cmpl   $0x6,0x10(%rsp)
   17b99:	8b 1c 24             	mov    (%rsp),%ebx
   17b9c:	0f 86 b4 31 00 00    	jbe    1ad56 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3746>
   17ba2:	44 89 ee             	mov    %r13d,%esi
   17ba5:	45 89 ef             	mov    %r13d,%r15d
   17ba8:	f3 0f 7e 04 32       	movq   (%rdx,%rsi,1),%xmm0
   17bad:	f3 0f 7e 0c 30       	movq   (%rax,%rsi,1),%xmm1
   17bb2:	66 0f fc c1          	paddb  %xmm1,%xmm0
   17bb6:	66 0f d6 04 37       	movq   %xmm0,(%rdi,%rsi,1)
   17bbb:	89 de                	mov    %ebx,%esi
   17bbd:	83 e6 f8             	and    $0xfffffff8,%esi
   17bc0:	44 01 fe             	add    %r15d,%esi
   17bc3:	83 e3 07             	and    $0x7,%ebx
   17bc6:	0f 84 a4 00 00 00    	je     17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   17bcc:	48 63 de             	movslq %esi,%rbx
   17bcf:	44 0f b6 3c 18       	movzbl (%rax,%rbx,1),%r15d
   17bd4:	44 02 3c 1a          	add    (%rdx,%rbx,1),%r15b
   17bd8:	44 88 3c 1f          	mov    %r15b,(%rdi,%rbx,1)
   17bdc:	8d 5e 01             	lea    0x1(%rsi),%ebx
   17bdf:	41 39 db             	cmp    %ebx,%r11d
   17be2:	0f 8e 88 00 00 00    	jle    17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   17be8:	48 63 db             	movslq %ebx,%rbx
   17beb:	44 0f b6 3c 18       	movzbl (%rax,%rbx,1),%r15d
   17bf0:	44 02 3c 1a          	add    (%rdx,%rbx,1),%r15b
   17bf4:	44 88 3c 1f          	mov    %r15b,(%rdi,%rbx,1)
   17bf8:	8d 5e 02             	lea    0x2(%rsi),%ebx
   17bfb:	41 39 db             	cmp    %ebx,%r11d
   17bfe:	7e 70                	jle    17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   17c00:	48 63 db             	movslq %ebx,%rbx
   17c03:	44 0f b6 3c 18       	movzbl (%rax,%rbx,1),%r15d
   17c08:	44 02 3c 1a          	add    (%rdx,%rbx,1),%r15b
   17c0c:	44 88 3c 1f          	mov    %r15b,(%rdi,%rbx,1)
   17c10:	8d 5e 03             	lea    0x3(%rsi),%ebx
   17c13:	41 39 db             	cmp    %ebx,%r11d
   17c16:	7e 58                	jle    17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   17c18:	48 63 db             	movslq %ebx,%rbx
   17c1b:	44 0f b6 3c 18       	movzbl (%rax,%rbx,1),%r15d
   17c20:	44 02 3c 1a          	add    (%rdx,%rbx,1),%r15b
   17c24:	44 88 3c 1f          	mov    %r15b,(%rdi,%rbx,1)
   17c28:	8d 5e 04             	lea    0x4(%rsi),%ebx
   17c2b:	41 39 db             	cmp    %ebx,%r11d
   17c2e:	7e 40                	jle    17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   17c30:	48 63 db             	movslq %ebx,%rbx
   17c33:	44 0f b6 3c 18       	movzbl (%rax,%rbx,1),%r15d
   17c38:	44 02 3c 1a          	add    (%rdx,%rbx,1),%r15b
   17c3c:	44 88 3c 1f          	mov    %r15b,(%rdi,%rbx,1)
   17c40:	8d 5e 05             	lea    0x5(%rsi),%ebx
   17c43:	41 39 db             	cmp    %ebx,%r11d
   17c46:	7e 28                	jle    17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   17c48:	48 63 db             	movslq %ebx,%rbx
   17c4b:	83 c6 06             	add    $0x6,%esi
   17c4e:	44 0f b6 3c 18       	movzbl (%rax,%rbx,1),%r15d
   17c53:	44 02 3c 1a          	add    (%rdx,%rbx,1),%r15b
   17c57:	44 88 3c 1f          	mov    %r15b,(%rdi,%rbx,1)
   17c5b:	41 39 f3             	cmp    %esi,%r11d
   17c5e:	7e 10                	jle    17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   17c60:	48 63 f6             	movslq %esi,%rsi
   17c63:	0f b6 1c 30          	movzbl (%rax,%rsi,1),%ebx
   17c67:	02 1c 32             	add    (%rdx,%rsi,1),%bl
   17c6a:	88 1c 37             	mov    %bl,(%rdi,%rsi,1)
   17c6d:	0f 1f 00             	nopl   (%rax)
   17c70:	c6 04 0f ff          	movb   $0xff,(%rdi,%rcx,1)
   17c74:	48 01 ca             	add    %rcx,%rdx
   17c77:	4c 01 d7             	add    %r10,%rdi
   17c7a:	4c 01 d0             	add    %r10,%rax
   17c7d:	41 83 e8 01          	sub    $0x1,%r8d
   17c81:	0f 85 99 fe ff ff    	jne    17b20 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x510>
   17c87:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
   17c8c:	8b 84 24 c4 00 00 00 	mov    0xc4(%rsp),%eax
   17c93:	48 0f af c1          	imul   %rcx,%rax
   17c97:	48 01 44 24 50       	add    %rax,0x50(%rsp)
         if (depth == 16) {
   17c9c:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   17ca3:	10 
   17ca4:	0f 85 eb fd ff ff    	jne    17a95 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x485>
            cur = a->out + stride*j; // start at the beginning of the row again
   17caa:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
   17cb1:	00 
            for (i=0; i < x; ++i,cur+=output_bytes) {
   17cb2:	44 8b 8c 24 90 00 00 	mov    0x90(%rsp),%r9d
   17cb9:	00 
            cur = a->out + stride*j; // start at the beginning of the row again
   17cba:	4c 03 78 18          	add    0x18(%rax),%r15
            for (i=0; i < x; ++i,cur+=output_bytes) {
   17cbe:	45 85 c9             	test   %r9d,%r9d
   17cc1:	0f 84 ce fd ff ff    	je     17a95 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x485>
            cur[filter_bytes]   = 255; // first pixel top byte
   17cc7:	48 63 44 24 58       	movslq 0x58(%rsp),%rax
            for (i=0; i < x; ++i,cur+=output_bytes) {
   17ccc:	8b b4 24 90 00 00 00 	mov    0x90(%rsp),%esi
         cur += output_bytes;
   17cd3:	49 63 d6             	movslq %r14d,%rdx
   17cd6:	49 8d 4c 07 01       	lea    0x1(%r15,%rax,1),%rcx
            for (i=0; i < x; ++i,cur+=output_bytes) {
   17cdb:	31 c0                	xor    %eax,%eax
   17cdd:	0f 1f 00             	nopl   (%rax)
   17ce0:	83 c0 01             	add    $0x1,%eax
               cur[filter_bytes+1] = 255;
   17ce3:	c6 01 ff             	movb   $0xff,(%rcx)
            for (i=0; i < x; ++i,cur+=output_bytes) {
   17ce6:	48 01 d1             	add    %rdx,%rcx
   17ce9:	39 f0                	cmp    %esi,%eax
   17ceb:	72 f3                	jb     17ce0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x6d0>
   17ced:	e9 a3 fd ff ff       	jmp    17a95 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x485>
   17cf2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            cur[filter_bytes]   = 255; // first pixel top byte
   17cf8:	48 63 4c 24 58       	movslq 0x58(%rsp),%rcx
         if (img_n != out_n) {
   17cfd:	8b b4 24 a8 00 00 00 	mov    0xa8(%rsp),%esi
   17d04:	39 b4 24 a4 00 00 00 	cmp    %esi,0xa4(%rsp)
   17d0b:	74 0b                	je     17d18 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x708>
            cur[filter_bytes]   = 255; // first pixel top byte
   17d0d:	0f b7 1d ac 0d 02 00 	movzwl 0x20dac(%rip),%ebx        # 38ac0 <_ZL11stbi__bmask+0x340>
   17d14:	66 89 1c 0f          	mov    %bx,(%rdi,%rcx,1)
         raw += filter_bytes;
   17d18:	49 8d 1c 0b          	lea    (%r11,%rcx,1),%rbx
         cur += output_bytes;
   17d1c:	49 63 ce             	movslq %r14d,%rcx
         raw += filter_bytes;
   17d1f:	48 89 5c 24 50       	mov    %rbx,0x50(%rsp)
         cur += output_bytes;
   17d24:	48 01 cf             	add    %rcx,%rdi
         prior += output_bytes;
   17d27:	48 01 c8             	add    %rcx,%rax
   17d2a:	e9 4a fc ff ff       	jmp    17979 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x369>
   17d2f:	90                   	nop
   17d30:	48 8d 15 2b fd 01 00 	lea    0x1fd2b(%rip),%rdx        # 37a62 <_ZSt19piecewise_construct+0x11b>
   17d37:	e9 bb fb ff ff       	jmp    178f7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e7>
            STBI__CASE(STBI__F_avg_first)    { cur[k] = STBI__BYTECAST(raw[k] + (cur[k- output_bytes] >> 1)); } break;
   17d3c:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   17d43:	83 e8 01             	sub    $0x1,%eax
   17d46:	89 84 24 c4 00 00 00 	mov    %eax,0xc4(%rsp)
   17d4d:	41 89 c1             	mov    %eax,%r9d
   17d50:	0f 84 0c 2b 00 00    	je     1a862 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3252>
            cur[filter_bytes]   = 255; // first pixel top byte
   17d56:	4c 63 44 24 58       	movslq 0x58(%rsp),%r8
   17d5b:	44 89 f0             	mov    %r14d,%eax
         cur += output_bytes;
   17d5e:	4d 63 e6             	movslq %r14d,%r12
   17d61:	f7 d8                	neg    %eax
   17d63:	45 89 c3             	mov    %r8d,%r11d
   17d66:	48 63 d0             	movslq %eax,%rdx
   17d69:	45 8d 68 ff          	lea    -0x1(%r8),%r13d
   17d6d:	45 89 c2             	mov    %r8d,%r10d
   17d70:	41 83 e3 f0          	and    $0xfffffff0,%r11d
   17d74:	48 01 d7             	add    %rdx,%rdi
   17d77:	48 f7 d2             	not    %rdx
   17d7a:	41 c1 ea 04          	shr    $0x4,%r10d
            STBI__CASE(STBI__F_avg_first)    { cur[k] = STBI__BYTECAST(raw[k] + (cur[k- output_bytes] >> 1)); } break;
   17d7e:	44 89 d8             	mov    %r11d,%eax
   17d81:	49 c1 e2 04          	shl    $0x4,%r10
   17d85:	49 63 db             	movslq %r11d,%rbx
   17d88:	44 29 f0             	sub    %r14d,%eax
   17d8b:	48 98                	cltq
   17d8d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   17d92:	41 8d 43 01          	lea    0x1(%r11),%eax
   17d96:	48 63 c8             	movslq %eax,%rcx
   17d99:	89 44 24 20          	mov    %eax,0x20(%rsp)
   17d9d:	44 29 f0             	sub    %r14d,%eax
   17da0:	48 98                	cltq
   17da2:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
   17da7:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
   17dac:	41 8d 43 02          	lea    0x2(%r11),%eax
   17db0:	48 63 c8             	movslq %eax,%rcx
   17db3:	89 44 24 40          	mov    %eax,0x40(%rsp)
   17db7:	44 29 f0             	sub    %r14d,%eax
   17dba:	48 98                	cltq
   17dbc:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
   17dc3:	00 
   17dc4:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
   17dcb:	00 
   17dcc:	41 8d 43 03          	lea    0x3(%r11),%eax
   17dd0:	48 63 c8             	movslq %eax,%rcx
   17dd3:	89 84 24 b0 00 00 00 	mov    %eax,0xb0(%rsp)
   17dda:	44 29 f0             	sub    %r14d,%eax
   17ddd:	48 98                	cltq
   17ddf:	48 89 8c 24 e0 00 00 	mov    %rcx,0xe0(%rsp)
   17de6:	00 
   17de7:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
   17dee:	00 
   17def:	41 8d 43 04          	lea    0x4(%r11),%eax
   17df3:	48 63 c8             	movslq %eax,%rcx
   17df6:	89 84 24 d8 00 00 00 	mov    %eax,0xd8(%rsp)
   17dfd:	44 29 f0             	sub    %r14d,%eax
   17e00:	48 98                	cltq
   17e02:	48 89 8c 24 f8 00 00 	mov    %rcx,0xf8(%rsp)
   17e09:	00 
   17e0a:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
   17e11:	00 
   17e12:	41 8d 43 05          	lea    0x5(%r11),%eax
   17e16:	48 63 c8             	movslq %eax,%rcx
   17e19:	89 84 24 f0 00 00 00 	mov    %eax,0xf0(%rsp)
   17e20:	44 29 f0             	sub    %r14d,%eax
   17e23:	48 98                	cltq
   17e25:	48 89 8c 24 10 01 00 	mov    %rcx,0x110(%rsp)
   17e2c:	00 
   17e2d:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
   17e34:	00 
   17e35:	41 8d 43 06          	lea    0x6(%r11),%eax
   17e39:	48 63 c8             	movslq %eax,%rcx
   17e3c:	89 84 24 08 01 00 00 	mov    %eax,0x108(%rsp)
   17e43:	44 29 f0             	sub    %r14d,%eax
   17e46:	48 98                	cltq
   17e48:	48 89 8c 24 28 01 00 	mov    %rcx,0x128(%rsp)
   17e4f:	00 
   17e50:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
   17e57:	00 
   17e58:	41 8d 43 07          	lea    0x7(%r11),%eax
   17e5c:	48 63 c8             	movslq %eax,%rcx
   17e5f:	89 84 24 20 01 00 00 	mov    %eax,0x120(%rsp)
   17e66:	44 29 f0             	sub    %r14d,%eax
   17e69:	48 98                	cltq
   17e6b:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
   17e72:	00 
   17e73:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
   17e7a:	00 
   17e7b:	41 8d 43 08          	lea    0x8(%r11),%eax
   17e7f:	48 63 c8             	movslq %eax,%rcx
   17e82:	89 84 24 38 01 00 00 	mov    %eax,0x138(%rsp)
   17e89:	44 29 f0             	sub    %r14d,%eax
   17e8c:	48 98                	cltq
   17e8e:	48 89 8c 24 58 01 00 	mov    %rcx,0x158(%rsp)
   17e95:	00 
   17e96:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
   17e9d:	00 
   17e9e:	41 8d 43 09          	lea    0x9(%r11),%eax
   17ea2:	48 63 c8             	movslq %eax,%rcx
   17ea5:	89 84 24 50 01 00 00 	mov    %eax,0x150(%rsp)
   17eac:	44 29 f0             	sub    %r14d,%eax
   17eaf:	48 98                	cltq
   17eb1:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
   17eb8:	00 
   17eb9:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
   17ec0:	00 
   17ec1:	41 8d 43 0a          	lea    0xa(%r11),%eax
   17ec5:	48 63 c8             	movslq %eax,%rcx
   17ec8:	89 84 24 68 01 00 00 	mov    %eax,0x168(%rsp)
   17ecf:	44 29 f0             	sub    %r14d,%eax
   17ed2:	48 98                	cltq
   17ed4:	48 89 8c 24 80 01 00 	mov    %rcx,0x180(%rsp)
   17edb:	00 
   17edc:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
   17ee3:	00 
   17ee4:	41 8d 43 0b          	lea    0xb(%r11),%eax
   17ee8:	89 84 24 90 01 00 00 	mov    %eax,0x190(%rsp)
   17eef:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
   17ef4:	48 89 14 24          	mov    %rdx,(%rsp)
   17ef8:	66 0f 6f 0d 70 0a 02 	movdqa 0x20a70(%rip),%xmm1        # 38970 <_ZL11stbi__bmask+0x1f0>
   17eff:	00 
   17f00:	4c 89 bc 24 98 01 00 	mov    %r15,0x198(%rsp)
   17f07:	00 
   17f08:	45 89 c7             	mov    %r8d,%r15d
   17f0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17f10:	48 89 fe             	mov    %rdi,%rsi
   17f13:	4c 01 e7             	add    %r12,%rdi
   17f16:	45 85 ff             	test   %r15d,%r15d
   17f19:	0f 8e c1 02 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   17f1f:	41 83 fd 0e          	cmp    $0xe,%r13d
   17f23:	0f 86 2f 26 00 00    	jbe    1a558 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f48>
   17f29:	48 83 3c 24 0e       	cmpq   $0xe,(%rsp)
   17f2e:	0f 86 24 26 00 00    	jbe    1a558 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f48>
   17f34:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   17f38:	48 89 f8             	mov    %rdi,%rax
   17f3b:	48 29 d0             	sub    %rdx,%rax
   17f3e:	48 83 f8 0e          	cmp    $0xe,%rax
   17f42:	0f 86 10 26 00 00    	jbe    1a558 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f48>
   17f48:	48 83 c6 00          	add    $0x0,%rsi
   17f4c:	31 c0                	xor    %eax,%eax
   17f4e:	66 90                	xchg   %ax,%ax
   17f50:	f3 0f 6f 04 06       	movdqu (%rsi,%rax,1),%xmm0
   17f55:	f3 0f 6f 2c 01       	movdqu (%rcx,%rax,1),%xmm5
   17f5a:	66 0f 71 d0 01       	psrlw  $0x1,%xmm0
   17f5f:	66 0f db c1          	pand   %xmm1,%xmm0
   17f63:	66 0f fc c5          	paddb  %xmm5,%xmm0
   17f67:	0f 11 04 07          	movups %xmm0,(%rdi,%rax,1)
   17f6b:	48 83 c0 10          	add    $0x10,%rax
   17f6f:	4c 39 d0             	cmp    %r10,%rax
   17f72:	75 dc                	jne    17f50 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x940>
   17f74:	45 39 df             	cmp    %r11d,%r15d
   17f77:	0f 84 63 02 00 00    	je     181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   17f7d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
   17f82:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   17f86:	88 44 24 10          	mov    %al,0x10(%rsp)
   17f8a:	d0 e8                	shr    %al
   17f8c:	02 04 19             	add    (%rcx,%rbx,1),%al
   17f8f:	88 04 1f             	mov    %al,(%rdi,%rbx,1)
   17f92:	8b 44 24 20          	mov    0x20(%rsp),%eax
   17f96:	41 39 c7             	cmp    %eax,%r15d
   17f99:	0f 8e 41 02 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   17f9f:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
   17fa4:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
   17fa9:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   17fad:	88 44 24 10          	mov    %al,0x10(%rsp)
   17fb1:	d0 e8                	shr    %al
   17fb3:	02 04 31             	add    (%rcx,%rsi,1),%al
   17fb6:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   17fb9:	8b 44 24 40          	mov    0x40(%rsp),%eax
   17fbd:	41 39 c7             	cmp    %eax,%r15d
   17fc0:	0f 8e 1a 02 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   17fc6:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
   17fcd:	00 
   17fce:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   17fd5:	00 
   17fd6:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   17fda:	88 44 24 10          	mov    %al,0x10(%rsp)
   17fde:	d0 e8                	shr    %al
   17fe0:	02 04 31             	add    (%rcx,%rsi,1),%al
   17fe3:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   17fe6:	8b 84 24 b0 00 00 00 	mov    0xb0(%rsp),%eax
   17fed:	41 39 c7             	cmp    %eax,%r15d
   17ff0:	0f 8e ea 01 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   17ff6:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
   17ffd:	00 
   17ffe:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
   18005:	00 
   18006:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1800a:	88 44 24 10          	mov    %al,0x10(%rsp)
   1800e:	d0 e8                	shr    %al
   18010:	02 04 31             	add    (%rcx,%rsi,1),%al
   18013:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   18016:	8b 84 24 d8 00 00 00 	mov    0xd8(%rsp),%eax
   1801d:	41 39 c7             	cmp    %eax,%r15d
   18020:	0f 8e ba 01 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   18026:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
   1802d:	00 
   1802e:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
   18035:	00 
   18036:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1803a:	88 44 24 10          	mov    %al,0x10(%rsp)
   1803e:	d0 e8                	shr    %al
   18040:	02 04 31             	add    (%rcx,%rsi,1),%al
   18043:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   18046:	8b 84 24 f0 00 00 00 	mov    0xf0(%rsp),%eax
   1804d:	41 39 c7             	cmp    %eax,%r15d
   18050:	0f 8e 8a 01 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   18056:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
   1805d:	00 
   1805e:	48 8b b4 24 10 01 00 	mov    0x110(%rsp),%rsi
   18065:	00 
   18066:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1806a:	88 44 24 10          	mov    %al,0x10(%rsp)
   1806e:	d0 e8                	shr    %al
   18070:	02 04 31             	add    (%rcx,%rsi,1),%al
   18073:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   18076:	8b 84 24 08 01 00 00 	mov    0x108(%rsp),%eax
   1807d:	41 39 c7             	cmp    %eax,%r15d
   18080:	0f 8e 5a 01 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   18086:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
   1808d:	00 
   1808e:	48 8b b4 24 28 01 00 	mov    0x128(%rsp),%rsi
   18095:	00 
   18096:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1809a:	88 44 24 10          	mov    %al,0x10(%rsp)
   1809e:	d0 e8                	shr    %al
   180a0:	02 04 31             	add    (%rcx,%rsi,1),%al
   180a3:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   180a6:	8b 84 24 20 01 00 00 	mov    0x120(%rsp),%eax
   180ad:	41 39 c7             	cmp    %eax,%r15d
   180b0:	0f 8e 2a 01 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   180b6:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
   180bd:	00 
   180be:	48 8b b4 24 40 01 00 	mov    0x140(%rsp),%rsi
   180c5:	00 
   180c6:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   180ca:	88 44 24 10          	mov    %al,0x10(%rsp)
   180ce:	d0 e8                	shr    %al
   180d0:	02 04 31             	add    (%rcx,%rsi,1),%al
   180d3:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   180d6:	8b 84 24 38 01 00 00 	mov    0x138(%rsp),%eax
   180dd:	41 39 c7             	cmp    %eax,%r15d
   180e0:	0f 8e fa 00 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   180e6:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
   180ed:	00 
   180ee:	48 8b b4 24 58 01 00 	mov    0x158(%rsp),%rsi
   180f5:	00 
   180f6:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   180fa:	88 44 24 10          	mov    %al,0x10(%rsp)
   180fe:	d0 e8                	shr    %al
   18100:	02 04 31             	add    (%rcx,%rsi,1),%al
   18103:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   18106:	8b 84 24 50 01 00 00 	mov    0x150(%rsp),%eax
   1810d:	41 39 c7             	cmp    %eax,%r15d
   18110:	0f 8e ca 00 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   18116:	48 8b 84 24 78 01 00 	mov    0x178(%rsp),%rax
   1811d:	00 
   1811e:	48 8b b4 24 70 01 00 	mov    0x170(%rsp),%rsi
   18125:	00 
   18126:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1812a:	88 44 24 10          	mov    %al,0x10(%rsp)
   1812e:	d0 e8                	shr    %al
   18130:	02 04 31             	add    (%rcx,%rsi,1),%al
   18133:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   18136:	8b 84 24 68 01 00 00 	mov    0x168(%rsp),%eax
   1813d:	41 39 c7             	cmp    %eax,%r15d
   18140:	0f 8e 9a 00 00 00    	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   18146:	48 8b 84 24 88 01 00 	mov    0x188(%rsp),%rax
   1814d:	00 
   1814e:	48 8b b4 24 80 01 00 	mov    0x180(%rsp),%rsi
   18155:	00 
   18156:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1815a:	88 44 24 10          	mov    %al,0x10(%rsp)
   1815e:	d0 e8                	shr    %al
   18160:	02 04 31             	add    (%rcx,%rsi,1),%al
   18163:	88 04 37             	mov    %al,(%rdi,%rsi,1)
   18166:	8b 84 24 90 01 00 00 	mov    0x190(%rsp),%eax
   1816d:	41 39 c7             	cmp    %eax,%r15d
   18170:	7e 6e                	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   18172:	48 63 d0             	movslq %eax,%rdx
   18175:	44 29 f0             	sub    %r14d,%eax
   18178:	48 98                	cltq
   1817a:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1817e:	d0 e8                	shr    %al
   18180:	02 04 11             	add    (%rcx,%rdx,1),%al
   18183:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   18186:	41 8d 43 0c          	lea    0xc(%r11),%eax
   1818a:	41 39 c7             	cmp    %eax,%r15d
   1818d:	7e 51                	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   1818f:	48 63 d0             	movslq %eax,%rdx
   18192:	44 29 f0             	sub    %r14d,%eax
   18195:	48 98                	cltq
   18197:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1819b:	d0 e8                	shr    %al
   1819d:	02 04 11             	add    (%rcx,%rdx,1),%al
   181a0:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   181a3:	41 8d 43 0d          	lea    0xd(%r11),%eax
   181a7:	41 39 c7             	cmp    %eax,%r15d
   181aa:	7e 34                	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   181ac:	48 63 d0             	movslq %eax,%rdx
   181af:	44 29 f0             	sub    %r14d,%eax
   181b2:	48 98                	cltq
   181b4:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   181b8:	d0 e8                	shr    %al
   181ba:	02 04 11             	add    (%rcx,%rdx,1),%al
   181bd:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   181c0:	41 8d 43 0e          	lea    0xe(%r11),%eax
   181c4:	41 39 c7             	cmp    %eax,%r15d
   181c7:	7e 17                	jle    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   181c9:	48 63 d0             	movslq %eax,%rdx
   181cc:	44 29 f0             	sub    %r14d,%eax
   181cf:	48 98                	cltq
   181d1:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   181d5:	d0 e8                	shr    %al
   181d7:	02 04 11             	add    (%rcx,%rdx,1),%al
   181da:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   181dd:	0f 1f 00             	nopl   (%rax)
   181e0:	42 c6 04 07 ff       	movb   $0xff,(%rdi,%r8,1)
   181e5:	4c 01 c1             	add    %r8,%rcx
   181e8:	41 83 e9 01          	sub    $0x1,%r9d
   181ec:	0f 85 1e fd ff ff    	jne    17f10 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x900>
   181f2:	8b 84 24 c4 00 00 00 	mov    0xc4(%rsp),%eax
   181f9:	4c 8b bc 24 98 01 00 	mov    0x198(%rsp),%r15
   18200:	00 
   18201:	49 0f af c0          	imul   %r8,%rax
   18205:	48 01 44 24 50       	add    %rax,0x50(%rsp)
         if (depth == 16) {
   1820a:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   18211:	10 
   18212:	0f 85 7d f8 ff ff    	jne    17a95 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x485>
   18218:	e9 8d fa ff ff       	jmp    17caa <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x69a>
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   1821d:	8b 9c 24 90 00 00 00 	mov    0x90(%rsp),%ebx
   18224:	83 eb 01             	sub    $0x1,%ebx
   18227:	89 9c 24 c4 00 00 00 	mov    %ebx,0xc4(%rsp)
   1822e:	41 89 dc             	mov    %ebx,%r12d
   18231:	0f 84 2b 26 00 00    	je     1a862 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3252>
            cur[filter_bytes]   = 255; // first pixel top byte
   18237:	48 63 5c 24 58       	movslq 0x58(%rsp),%rbx
   1823c:	44 89 f2             	mov    %r14d,%edx
         cur += output_bytes;
   1823f:	4d 63 c6             	movslq %r14d,%r8
   18242:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
   18247:	f7 da                	neg    %edx
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   18249:	66 45 0f ef f6       	pxor   %xmm14,%xmm14
   if (pb <= pc) return b;
   1824e:	66 45 0f ef ed       	pxor   %xmm13,%xmm13
   18253:	4c 89 bc 24 00 01 00 	mov    %r15,0x100(%rsp)
   1825a:	00 
            cur[filter_bytes]   = 255; // first pixel top byte
   1825b:	48 89 de             	mov    %rbx,%rsi
   1825e:	48 89 5c 24 60       	mov    %rbx,0x60(%rsp)
   18263:	48 63 da             	movslq %edx,%rbx
   18266:	8d 4e ff             	lea    -0x1(%rsi),%ecx
   18269:	4c 8d 0c 18          	lea    (%rax,%rbx,1),%r9
   1826d:	48 89 9c 24 e8 00 00 	mov    %rbx,0xe8(%rsp)
   18274:	00 
   18275:	89 8c 24 d0 00 00 00 	mov    %ecx,0xd0(%rsp)
   1827c:	89 f1                	mov    %esi,%ecx
   1827e:	83 e6 f0             	and    $0xfffffff0,%esi
   18281:	4c 8d 14 1f          	lea    (%rdi,%rbx,1),%r10
   18285:	89 b4 24 d8 00 00 00 	mov    %esi,0xd8(%rsp)
   1828c:	c1 e9 04             	shr    $0x4,%ecx
   1828f:	48 63 f6             	movslq %esi,%rsi
   18292:	4c 89 ca             	mov    %r9,%rdx
   18295:	48 c1 e1 04          	shl    $0x4,%rcx
   18299:	48 89 b4 24 f8 00 00 	mov    %rsi,0xf8(%rsp)
   182a0:	00 
   182a1:	48 89 de             	mov    %rbx,%rsi
   182a4:	49 89 cb             	mov    %rcx,%r11
   182a7:	48 f7 d6             	not    %rsi
   182aa:	4c 89 c1             	mov    %r8,%rcx
   182ad:	4c 89 4c 24 70       	mov    %r9,0x70(%rsp)
   182b2:	4c 89 94 24 b8 00 00 	mov    %r10,0xb8(%rsp)
   182b9:	00 
         cur += output_bytes;
   182ba:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
   182bf:	4c 89 8c 24 b0 00 00 	mov    %r9,0xb0(%rsp)
   182c6:	00 
   182c7:	48 89 b4 24 e0 00 00 	mov    %rsi,0xe0(%rsp)
   182ce:	00 
   182cf:	44 89 b4 24 08 01 00 	mov    %r14d,0x108(%rsp)
   182d6:	00 
   182d7:	4c 89 9c 24 f0 00 00 	mov    %r11,0xf0(%rsp)
   182de:	00 
   182df:	90                   	nop
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   182e0:	44 8b 54 24 58       	mov    0x58(%rsp),%r10d
   182e5:	45 85 d2             	test   %r10d,%r10d
   182e8:	0f 8e bf 05 00 00    	jle    188ad <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x129d>
   182ee:	83 bc 24 d0 00 00 00 	cmpl   $0xe,0xd0(%rsp)
   182f5:	0e 
   182f6:	0f 86 b4 21 00 00    	jbe    1a4b0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2ea0>
   182fc:	4c 8d 42 01          	lea    0x1(%rdx),%r8
   18300:	48 89 fe             	mov    %rdi,%rsi
   18303:	4d 8d 4d 01          	lea    0x1(%r13),%r9
   18307:	4c 29 c6             	sub    %r8,%rsi
   1830a:	48 83 fe 0e          	cmp    $0xe,%rsi
   1830e:	40 0f 97 c6          	seta   %sil
   18312:	48 83 bc 24 e0 00 00 	cmpq   $0xe,0xe0(%rsp)
   18319:	00 0e 
   1831b:	41 0f 97 c0          	seta   %r8b
   1831f:	44 21 c6             	and    %r8d,%esi
   18322:	49 89 f8             	mov    %rdi,%r8
   18325:	4d 29 c8             	sub    %r9,%r8
   18328:	49 83 f8 0e          	cmp    $0xe,%r8
   1832c:	41 0f 97 c0          	seta   %r8b
   18330:	44 84 c6             	test   %r8b,%sil
   18333:	0f 84 77 21 00 00    	je     1a4b0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2ea0>
   18339:	4c 8d 40 01          	lea    0x1(%rax),%r8
   1833d:	48 89 fe             	mov    %rdi,%rsi
   18340:	4c 29 c6             	sub    %r8,%rsi
   18343:	48 83 fe 0e          	cmp    $0xe,%rsi
   18347:	0f 86 63 21 00 00    	jbe    1a4b0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2ea0>
   1834d:	48 8b 9c 24 e8 00 00 	mov    0xe8(%rsp),%rbx
   18354:	00 
   18355:	4c 8b 94 24 f0 00 00 	mov    0xf0(%rsp),%r10
   1835c:	00 
   1835d:	31 f6                	xor    %esi,%esi
   1835f:	4c 8d 04 1f          	lea    (%rdi,%rbx,1),%r8
   18363:	f3 0f 6f 04 32       	movdqu (%rdx,%rsi,1),%xmm0
   18368:	66 0f ef ff          	pxor   %xmm7,%xmm7
   1836c:	f3 0f 6f 0c 32       	movdqu (%rdx,%rsi,1),%xmm1
   18371:	f3 0f 6f 24 30       	movdqu (%rax,%rsi,1),%xmm4
   18376:	66 0f 6f f7          	movdqa %xmm7,%xmm6
   1837a:	66 0f 68 c7          	punpckhbw %xmm7,%xmm0
   1837e:	66 0f 60 cf          	punpcklbw %xmm7,%xmm1
   18382:	66 0f 6f de          	movdqa %xmm6,%xmm3
   18386:	66 0f 6f e8          	movdqa %xmm0,%xmm5
   1838a:	66 0f 68 e7          	punpckhbw %xmm7,%xmm4
   1838e:	66 44 0f 6f c9       	movdqa %xmm1,%xmm9
   18393:	66 41 0f 69 ee       	punpckhwd %xmm14,%xmm5
   18398:	66 45 0f 61 ce       	punpcklwd %xmm14,%xmm9
   1839d:	66 44 0f 6f c0       	movdqa %xmm0,%xmm8
   183a2:	0f 29 6c 24 20       	movaps %xmm5,0x20(%rsp)
   183a7:	f3 0f 6f 2c 30       	movdqu (%rax,%rsi,1),%xmm5
   183ac:	66 45 0f 61 c6       	punpcklwd %xmm14,%xmm8
   183b1:	66 41 0f 69 ce       	punpckhwd %xmm14,%xmm1
   int p = a + b - c;
   183b6:	44 0f 29 44 24 10    	movaps %xmm8,0x10(%rsp)
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   183bc:	66 44 0f 6f d4       	movdqa %xmm4,%xmm10
   183c1:	66 41 0f 69 e6       	punpckhwd %xmm14,%xmm4
   183c6:	66 0f 60 ef          	punpcklbw %xmm7,%xmm5
   183ca:	f3 41 0f 6f 3c 30    	movdqu (%r8,%rsi,1),%xmm7
   int p = a + b - c;
   183d0:	0f 29 0c 24          	movaps %xmm1,(%rsp)
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   183d4:	66 45 0f 61 d6       	punpcklwd %xmm14,%xmm10
   183d9:	66 44 0f 6f dd       	movdqa %xmm5,%xmm11
   183de:	66 41 0f 69 ee       	punpckhwd %xmm14,%xmm5
   183e3:	66 0f 60 fe          	punpcklbw %xmm6,%xmm7
   183e7:	f3 41 0f 6f 34 30    	movdqu (%r8,%rsi,1),%xmm6
   183ed:	66 45 0f 61 de       	punpcklwd %xmm14,%xmm11
   183f2:	66 44 0f 6f ff       	movdqa %xmm7,%xmm15
   183f7:	66 41 0f 69 fe       	punpckhwd %xmm14,%xmm7
   183fc:	66 45 0f 61 fe       	punpcklwd %xmm14,%xmm15
   18401:	66 0f 68 f3          	punpckhbw %xmm3,%xmm6
   int p = a + b - c;
   18405:	66 0f 6f d7          	movdqa %xmm7,%xmm2
   18409:	66 41 0f 6f df       	movdqa %xmm15,%xmm3
   1840e:	66 0f fe d5          	paddd  %xmm5,%xmm2
   18412:	66 0f fa 14 24       	psubd  (%rsp),%xmm2
   18417:	66 41 0f fe db       	paddd  %xmm11,%xmm3
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   1841c:	66 44 0f 6f e6       	movdqa %xmm6,%xmm12
   18421:	66 41 0f 69 f6       	punpckhwd %xmm14,%xmm6
   int p = a + b - c;
   18426:	66 41 0f fa d9       	psubd  %xmm9,%xmm3
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   1842b:	66 45 0f 61 e6       	punpcklwd %xmm14,%xmm12
   int p = a + b - c;
   18430:	66 0f 6f c6          	movdqa %xmm6,%xmm0
   int pa = abs(p-a);
   18434:	66 44 0f 6f c3       	movdqa %xmm3,%xmm8
   int p = a + b - c;
   18439:	66 41 0f 6f cc       	movdqa %xmm12,%xmm1
   1843e:	66 0f fe c4          	paddd  %xmm4,%xmm0
   int pa = abs(p-a);
   18442:	66 45 0f fa c7       	psubd  %xmm15,%xmm8
   int p = a + b - c;
   18447:	66 41 0f fe ca       	paddd  %xmm10,%xmm1
   int pa = abs(p-a);
   1844c:	66 45 0f 6f f8       	movdqa %xmm8,%xmm15
   int p = a + b - c;
   18451:	66 0f fa 4c 24 10    	psubd  0x10(%rsp),%xmm1
   18457:	66 0f fa 44 24 20    	psubd  0x20(%rsp),%xmm0
   int pa = abs(p-a);
   1845d:	66 41 0f 72 e7 1f    	psrad  $0x1f,%xmm15
   18463:	66 45 0f ef c7       	pxor   %xmm15,%xmm8
   18468:	66 45 0f fa c7       	psubd  %xmm15,%xmm8
   1846d:	66 44 0f 6f fa       	movdqa %xmm2,%xmm15
   18472:	66 44 0f fa ff       	psubd  %xmm7,%xmm15
   18477:	44 0f 29 44 24 40    	movaps %xmm8,0x40(%rsp)
   1847d:	66 41 0f 6f ff       	movdqa %xmm15,%xmm7
   18482:	66 45 0f 6f c7       	movdqa %xmm15,%xmm8
   18487:	66 0f 72 e7 1f       	psrad  $0x1f,%xmm7
   1848c:	66 44 0f ef c7       	pxor   %xmm7,%xmm8
   18491:	66 45 0f 6f f8       	movdqa %xmm8,%xmm15
   18496:	66 44 0f fa ff       	psubd  %xmm7,%xmm15
   1849b:	66 0f 6f f9          	movdqa %xmm1,%xmm7
   1849f:	66 41 0f fa fc       	psubd  %xmm12,%xmm7
   184a4:	66 44 0f 6f e7       	movdqa %xmm7,%xmm12
   184a9:	66 41 0f 72 e4 1f    	psrad  $0x1f,%xmm12
   184af:	66 41 0f ef fc       	pxor   %xmm12,%xmm7
   184b4:	66 41 0f fa fc       	psubd  %xmm12,%xmm7
   184b9:	66 44 0f 6f e7       	movdqa %xmm7,%xmm12
   184be:	66 0f 6f f8          	movdqa %xmm0,%xmm7
   184c2:	66 0f fa fe          	psubd  %xmm6,%xmm7
   184c6:	66 0f 6f f7          	movdqa %xmm7,%xmm6
   184ca:	66 0f 72 e6 1f       	psrad  $0x1f,%xmm6
   184cf:	66 0f ef fe          	pxor   %xmm6,%xmm7
   184d3:	66 0f fa fe          	psubd  %xmm6,%xmm7
   int pb = abs(p-b);
   184d7:	66 0f 6f f3          	movdqa %xmm3,%xmm6
   int pc = abs(p-c);
   184db:	66 41 0f fa d9       	psubd  %xmm9,%xmm3
   int pb = abs(p-b);
   184e0:	66 41 0f fa f3       	psubd  %xmm11,%xmm6
   184e5:	66 44 0f 6f de       	movdqa %xmm6,%xmm11
   184ea:	66 41 0f 72 e3 1f    	psrad  $0x1f,%xmm11
   184f0:	66 41 0f ef f3       	pxor   %xmm11,%xmm6
   184f5:	66 41 0f fa f3       	psubd  %xmm11,%xmm6
   184fa:	66 44 0f 6f da       	movdqa %xmm2,%xmm11
   int pc = abs(p-c);
   184ff:	66 0f fa 14 24       	psubd  (%rsp),%xmm2
   int pb = abs(p-b);
   18504:	66 44 0f fa dd       	psubd  %xmm5,%xmm11
   18509:	66 41 0f 6f eb       	movdqa %xmm11,%xmm5
   1850e:	66 45 0f 6f c3       	movdqa %xmm11,%xmm8
   18513:	66 0f 72 e5 1f       	psrad  $0x1f,%xmm5
   18518:	66 44 0f ef c5       	pxor   %xmm5,%xmm8
   1851d:	66 44 0f fa c5       	psubd  %xmm5,%xmm8
   18522:	66 0f 6f e9          	movdqa %xmm1,%xmm5
   int pc = abs(p-c);
   18526:	66 0f fa 4c 24 10    	psubd  0x10(%rsp),%xmm1
   int pb = abs(p-b);
   1852c:	66 41 0f fa ea       	psubd  %xmm10,%xmm5
   18531:	66 44 0f 6f d5       	movdqa %xmm5,%xmm10
   18536:	66 41 0f 72 e2 1f    	psrad  $0x1f,%xmm10
   1853c:	66 41 0f ef ea       	pxor   %xmm10,%xmm5
   18541:	66 41 0f fa ea       	psubd  %xmm10,%xmm5
   18546:	66 44 0f 6f d0       	movdqa %xmm0,%xmm10
   int pc = abs(p-c);
   1854b:	66 0f fa 44 24 20    	psubd  0x20(%rsp),%xmm0
   int pb = abs(p-b);
   18551:	66 44 0f fa d4       	psubd  %xmm4,%xmm10
   18556:	66 41 0f 6f e2       	movdqa %xmm10,%xmm4
   1855b:	66 0f 72 e4 1f       	psrad  $0x1f,%xmm4
   18560:	66 44 0f ef d4       	pxor   %xmm4,%xmm10
   18565:	66 44 0f fa d4       	psubd  %xmm4,%xmm10
   int pc = abs(p-c);
   1856a:	66 0f 6f e3          	movdqa %xmm3,%xmm4
   1856e:	66 0f 72 e4 1f       	psrad  $0x1f,%xmm4
   18573:	66 0f ef dc          	pxor   %xmm4,%xmm3
   18577:	66 0f fa dc          	psubd  %xmm4,%xmm3
   1857b:	66 0f 6f e2          	movdqa %xmm2,%xmm4
   1857f:	66 0f 72 e4 1f       	psrad  $0x1f,%xmm4
   18584:	66 0f ef d4          	pxor   %xmm4,%xmm2
   18588:	66 0f fa d4          	psubd  %xmm4,%xmm2
   1858c:	66 0f 6f e1          	movdqa %xmm1,%xmm4
   18590:	66 0f 72 e4 1f       	psrad  $0x1f,%xmm4
   18595:	66 0f ef cc          	pxor   %xmm4,%xmm1
   18599:	66 0f fa cc          	psubd  %xmm4,%xmm1
   1859d:	66 0f 6f e0          	movdqa %xmm0,%xmm4
   185a1:	66 0f 72 e4 1f       	psrad  $0x1f,%xmm4
   185a6:	66 0f ef c4          	pxor   %xmm4,%xmm0
   185aa:	66 0f fa c4          	psubd  %xmm4,%xmm0
   if (pa <= pb && pa <= pc) return a;
   185ae:	66 0f 6f e6          	movdqa %xmm6,%xmm4
   185b2:	66 0f 66 e3          	pcmpgtd %xmm3,%xmm4
   185b6:	66 44 0f 6f cc       	movdqa %xmm4,%xmm9
   185bb:	66 0f db dc          	pand   %xmm4,%xmm3
   185bf:	66 44 0f df ce       	pandn  %xmm6,%xmm9
   185c4:	66 41 0f eb d9       	por    %xmm9,%xmm3
   185c9:	66 45 0f 6f c8       	movdqa %xmm8,%xmm9
   185ce:	66 44 0f 66 ca       	pcmpgtd %xmm2,%xmm9
   185d3:	66 41 0f 6f f1       	movdqa %xmm9,%xmm6
   185d8:	66 41 0f db d1       	pand   %xmm9,%xmm2
   185dd:	66 41 0f df f0       	pandn  %xmm8,%xmm6
   185e2:	66 0f eb d6          	por    %xmm6,%xmm2
   185e6:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   185ea:	66 0f 66 f1          	pcmpgtd %xmm1,%xmm6
   185ee:	66 44 0f 6f de       	movdqa %xmm6,%xmm11
   185f3:	66 0f db ce          	pand   %xmm6,%xmm1
   185f7:	66 44 0f df dd       	pandn  %xmm5,%xmm11
   185fc:	66 41 0f 6f ea       	movdqa %xmm10,%xmm5
   18601:	66 0f 66 e8          	pcmpgtd %xmm0,%xmm5
   18605:	66 41 0f eb cb       	por    %xmm11,%xmm1
   1860a:	66 44 0f 6f dd       	movdqa %xmm5,%xmm11
   1860f:	66 0f db c5          	pand   %xmm5,%xmm0
   18613:	66 45 0f df da       	pandn  %xmm10,%xmm11
   if (pb <= pc) return b;
   18618:	66 44 0f 6f d5       	movdqa %xmm5,%xmm10
   1861d:	66 45 0f 6f c3       	movdqa %xmm11,%xmm8
   18622:	66 45 0f 76 d5       	pcmpeqd %xmm13,%xmm10
   18627:	66 45 0f 6f d9       	movdqa %xmm9,%xmm11
   1862c:	66 44 0f eb c0       	por    %xmm0,%xmm8
   if (pa <= pb && pa <= pc) return a;
   18631:	66 0f 6f 44 24 40    	movdqa 0x40(%rsp),%xmm0
   if (pb <= pc) return b;
   18637:	66 45 0f 76 dd       	pcmpeqd %xmm13,%xmm11
   if (pa <= pb && pa <= pc) return a;
   1863c:	66 41 0f 66 f8       	pcmpgtd %xmm8,%xmm7
   if (pb <= pc) return b;
   18641:	66 44 0f 6f c6       	movdqa %xmm6,%xmm8
   if (pa <= pb && pa <= pc) return a;
   18646:	66 0f 66 c3          	pcmpgtd %xmm3,%xmm0
   if (pb <= pc) return b;
   1864a:	66 45 0f 76 c5       	pcmpeqd %xmm13,%xmm8
   if (pa <= pb && pa <= pc) return a;
   1864f:	66 41 0f 6f df       	movdqa %xmm15,%xmm3
   18654:	66 0f 66 da          	pcmpgtd %xmm2,%xmm3
   18658:	66 41 0f 6f d4       	movdqa %xmm12,%xmm2
   1865d:	66 0f 66 d1          	pcmpgtd %xmm1,%xmm2
   if (pb <= pc) return b;
   18661:	66 0f 6f cc          	movdqa %xmm4,%xmm1
   18665:	66 44 0f db d7       	pand   %xmm7,%xmm10
   1866a:	66 41 0f 76 cd       	pcmpeqd %xmm13,%xmm1
   1866f:	66 0f db e0          	pand   %xmm0,%xmm4
   18673:	66 0f db ef          	pand   %xmm7,%xmm5
   18677:	66 44 0f db db       	pand   %xmm3,%xmm11
   if (pa <= pb && pa <= pc) return a;
   1867c:	66 41 0f 76 fd       	pcmpeqd %xmm13,%xmm7
   18681:	66 44 0f db cb       	pand   %xmm3,%xmm9
   18686:	66 41 0f 76 dd       	pcmpeqd %xmm13,%xmm3
   1868b:	66 44 0f db c2       	pand   %xmm2,%xmm8
   18690:	66 0f db f2          	pand   %xmm2,%xmm6
   18694:	66 0f db c8          	pand   %xmm0,%xmm1
   18698:	66 41 0f 76 c5       	pcmpeqd %xmm13,%xmm0
   1869d:	66 41 0f 76 d5       	pcmpeqd %xmm13,%xmm2
   186a2:	66 44 0f 6f e0       	movdqa %xmm0,%xmm12
   186a7:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   186ab:	66 44 0f 69 e3       	punpckhwd %xmm3,%xmm12
   186b0:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   186b4:	66 41 0f 69 dc       	punpckhwd %xmm12,%xmm3
   186b9:	66 41 0f 61 c4       	punpcklwd %xmm12,%xmm0
   186be:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   186c2:	66 0f 6f da          	movdqa %xmm2,%xmm3
   186c6:	66 0f 61 d7          	punpcklwd %xmm7,%xmm2
   186ca:	66 0f 69 df          	punpckhwd %xmm7,%xmm3
   186ce:	66 0f 6f fa          	movdqa %xmm2,%xmm7
   186d2:	66 0f db 05 36 01 02 	pand   0x20136(%rip),%xmm0        # 38810 <_ZL11stbi__bmask+0x90>
   186d9:	00 
   186da:	66 0f 69 fb          	punpckhwd %xmm3,%xmm7
   186de:	66 0f 61 d3          	punpcklwd %xmm3,%xmm2
   186e2:	f3 0f 6f 1c 32       	movdqu (%rdx,%rsi,1),%xmm3
   186e7:	66 0f 61 d7          	punpcklwd %xmm7,%xmm2
   186eb:	66 0f db 15 1d 01 02 	pand   0x2011d(%rip),%xmm2        # 38810 <_ZL11stbi__bmask+0x90>
   186f2:	00 
   186f3:	66 0f 67 c2          	packuswb %xmm2,%xmm0
   186f7:	f3 41 0f 6f 14 30    	movdqu (%r8,%rsi,1),%xmm2
   186fd:	66 0f db d0          	pand   %xmm0,%xmm2
   18701:	66 0f df c3          	pandn  %xmm3,%xmm0
   18705:	66 0f eb c2          	por    %xmm2,%xmm0
   18709:	66 0f 6f d4          	movdqa %xmm4,%xmm2
   1870d:	66 41 0f 61 e1       	punpcklwd %xmm9,%xmm4
   18712:	66 41 0f 69 d1       	punpckhwd %xmm9,%xmm2
   18717:	66 0f 6f dc          	movdqa %xmm4,%xmm3
   1871b:	66 0f 69 da          	punpckhwd %xmm2,%xmm3
   1871f:	66 0f 61 e2          	punpcklwd %xmm2,%xmm4
   18723:	66 0f 6f d6          	movdqa %xmm6,%xmm2
   18727:	66 0f 61 f5          	punpcklwd %xmm5,%xmm6
   1872b:	66 0f 69 d5          	punpckhwd %xmm5,%xmm2
   1872f:	66 0f 61 e3          	punpcklwd %xmm3,%xmm4
   18733:	66 0f 6f de          	movdqa %xmm6,%xmm3
   18737:	66 0f 61 f2          	punpcklwd %xmm2,%xmm6
   1873b:	66 0f db 25 cd 00 02 	pand   0x200cd(%rip),%xmm4        # 38810 <_ZL11stbi__bmask+0x90>
   18742:	00 
   18743:	66 0f 69 da          	punpckhwd %xmm2,%xmm3
   18747:	f3 0f 6f 14 32       	movdqu (%rdx,%rsi,1),%xmm2
   1874c:	66 0f 61 f3          	punpcklwd %xmm3,%xmm6
   18750:	66 0f db 35 b8 00 02 	pand   0x200b8(%rip),%xmm6        # 38810 <_ZL11stbi__bmask+0x90>
   18757:	00 
   18758:	66 0f 67 e6          	packuswb %xmm6,%xmm4
   1875c:	66 0f db d4          	pand   %xmm4,%xmm2
   18760:	66 0f df e0          	pandn  %xmm0,%xmm4
   18764:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   18768:	66 41 0f 61 cb       	punpcklwd %xmm11,%xmm1
   1876d:	66 41 0f 69 c3       	punpckhwd %xmm11,%xmm0
   18772:	66 0f eb e2          	por    %xmm2,%xmm4
   18776:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1877a:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
   1877e:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
   18782:	66 41 0f 6f c0       	movdqa %xmm8,%xmm0
   18787:	66 45 0f 61 c2       	punpcklwd %xmm10,%xmm8
   1878c:	66 41 0f 69 c2       	punpckhwd %xmm10,%xmm0
   18791:	66 0f 61 ca          	punpcklwd %xmm2,%xmm1
   18795:	66 41 0f 6f d0       	movdqa %xmm8,%xmm2
   1879a:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
   1879e:	66 44 0f 61 c0       	punpcklwd %xmm0,%xmm8
   187a3:	66 0f db 0d 65 00 02 	pand   0x20065(%rip),%xmm1        # 38810 <_ZL11stbi__bmask+0x90>
   187aa:	00 
   187ab:	f3 0f 6f 04 30       	movdqu (%rax,%rsi,1),%xmm0
   187b0:	66 44 0f 61 c2       	punpcklwd %xmm2,%xmm8
   187b5:	66 44 0f db 05 52 00 	pand   0x20052(%rip),%xmm8        # 38810 <_ZL11stbi__bmask+0x90>
   187bc:	02 00 
   187be:	66 41 0f 67 c8       	packuswb %xmm8,%xmm1
   187c3:	66 0f db c1          	pand   %xmm1,%xmm0
   187c7:	66 0f df cc          	pandn  %xmm4,%xmm1
   187cb:	66 0f eb c8          	por    %xmm0,%xmm1
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   187cf:	f3 41 0f 6f 44 35 00 	movdqu 0x0(%r13,%rsi,1),%xmm0
   187d6:	66 0f fc c1          	paddb  %xmm1,%xmm0
   187da:	0f 11 04 37          	movups %xmm0,(%rdi,%rsi,1)
   187de:	48 83 c6 10          	add    $0x10,%rsi
   187e2:	4c 39 d6             	cmp    %r10,%rsi
   187e5:	0f 85 78 fb ff ff    	jne    18363 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xd53>
   187eb:	8b b4 24 d8 00 00 00 	mov    0xd8(%rsp),%esi
   187f2:	39 74 24 58          	cmp    %esi,0x58(%rsp)
   187f6:	0f 84 b1 00 00 00    	je     188ad <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x129d>
   187fc:	48 89 14 24          	mov    %rdx,(%rsp)
   18800:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
   18807:	00 
   18808:	44 89 64 24 10       	mov    %r12d,0x10(%rsp)
   1880d:	4c 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%r15
   18814:	00 
   18815:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   1881a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   18820:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
   18825:	44 0f b6 0c 30       	movzbl (%rax,%rsi,1),%r9d
   1882a:	45 0f b6 04 37       	movzbl (%r15,%rsi,1),%r8d
   1882f:	45 0f b6 74 35 00    	movzbl 0x0(%r13,%rsi,1),%r14d
   18835:	44 0f b6 1c 31       	movzbl (%rcx,%rsi,1),%r11d
   1883a:	45 89 cc             	mov    %r9d,%r12d
   1883d:	44 89 c3             	mov    %r8d,%ebx
   int p = a + b - c;
   18840:	43 8d 14 19          	lea    (%r9,%r11,1),%edx
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   18844:	44 89 d9             	mov    %r11d,%ecx
   int p = a + b - c;
   18847:	44 29 c2             	sub    %r8d,%edx
   int pb = abs(p-b);
   1884a:	41 89 d2             	mov    %edx,%r10d
   1884d:	45 29 ca             	sub    %r9d,%r10d
   18850:	45 89 d1             	mov    %r10d,%r9d
   18853:	41 f7 d9             	neg    %r9d
   18856:	45 0f 48 ca          	cmovs  %r10d,%r9d
   int pc = abs(p-c);
   1885a:	41 89 d2             	mov    %edx,%r10d
   1885d:	45 29 c2             	sub    %r8d,%r10d
   18860:	45 89 d0             	mov    %r10d,%r8d
   18863:	41 f7 d8             	neg    %r8d
   18866:	45 0f 48 c2          	cmovs  %r10d,%r8d
   int pa = abs(p-a);
   1886a:	44 29 da             	sub    %r11d,%edx
   1886d:	41 89 d2             	mov    %edx,%r10d
   18870:	41 f7 da             	neg    %r10d
   18873:	41 0f 49 d2          	cmovns %r10d,%edx
   if (pa <= pb && pa <= pc) return a;
   18877:	45 39 c1             	cmp    %r8d,%r9d
   1887a:	45 89 c2             	mov    %r8d,%r10d
   1887d:	45 0f 4e d1          	cmovle %r9d,%r10d
   18881:	44 39 d2             	cmp    %r10d,%edx
   18884:	7e 09                	jle    1888f <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x127f>
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   18886:	45 39 c1             	cmp    %r8d,%r9d
   18889:	41 0f 4e dc          	cmovle %r12d,%ebx
   1888d:	89 d9                	mov    %ebx,%ecx
   1888f:	44 01 f1             	add    %r14d,%ecx
   18892:	88 0c 37             	mov    %cl,(%rdi,%rsi,1)
   18895:	48 83 c6 01          	add    $0x1,%rsi
   18899:	39 74 24 58          	cmp    %esi,0x58(%rsp)
   1889d:	7f 81                	jg     18820 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1210>
   1889f:	48 8b 14 24          	mov    (%rsp),%rdx
   188a3:	44 8b 64 24 10       	mov    0x10(%rsp),%r12d
   188a8:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
   188ad:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
   188b2:	48 01 4c 24 70       	add    %rcx,0x70(%rsp)
   188b7:	48 01 c8             	add    %rcx,%rax
   188ba:	48 01 ca             	add    %rcx,%rdx
   188bd:	48 01 8c 24 b8 00 00 	add    %rcx,0xb8(%rsp)
   188c4:	00 
   188c5:	c6 04 1f ff          	movb   $0xff,(%rdi,%rbx,1)
   188c9:	49 01 dd             	add    %rbx,%r13
   188cc:	48 01 cf             	add    %rcx,%rdi
   188cf:	48 01 8c 24 b0 00 00 	add    %rcx,0xb0(%rsp)
   188d6:	00 
   188d7:	48 01 4c 24 30       	add    %rcx,0x30(%rsp)
   188dc:	41 83 ec 01          	sub    $0x1,%r12d
   188e0:	0f 85 fa f9 ff ff    	jne    182e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xcd0>
   188e6:	8b 84 24 c4 00 00 00 	mov    0xc4(%rsp),%eax
   188ed:	4c 8b bc 24 00 01 00 	mov    0x100(%rsp),%r15
   188f4:	00 
   188f5:	44 8b b4 24 08 01 00 	mov    0x108(%rsp),%r14d
   188fc:	00 
   188fd:	48 0f af c3          	imul   %rbx,%rax
   18901:	48 01 44 24 50       	add    %rax,0x50(%rsp)
         if (depth == 16) {
   18906:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   1890d:	10 
   1890e:	0f 85 81 f1 ff ff    	jne    17a95 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x485>
   18914:	e9 91 f3 ff ff       	jmp    17caa <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x69a>
            STBI__CASE(STBI__F_avg)          { cur[k] = STBI__BYTECAST(raw[k] + ((prior[k] + cur[k- output_bytes])>>1)); } break;
   18919:	8b 9c 24 90 00 00 00 	mov    0x90(%rsp),%ebx
   18920:	83 eb 01             	sub    $0x1,%ebx
   18923:	89 9c 24 c4 00 00 00 	mov    %ebx,0xc4(%rsp)
   1892a:	0f 84 32 1f 00 00    	je     1a862 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3252>
            cur[filter_bytes]   = 255; // first pixel top byte
   18930:	4c 63 54 24 58       	movslq 0x58(%rsp),%r10
   18935:	44 89 f2             	mov    %r14d,%edx
         cur += output_bytes;
   18938:	4d 63 ee             	movslq %r14d,%r13
   1893b:	f7 da                	neg    %edx
   1893d:	45 89 d3             	mov    %r10d,%r11d
   18940:	48 63 ca             	movslq %edx,%rcx
   18943:	41 8d 72 ff          	lea    -0x1(%r10),%esi
   18947:	45 89 d4             	mov    %r10d,%r12d
   1894a:	41 83 e3 f0          	and    $0xfffffff0,%r11d
   1894e:	89 34 24             	mov    %esi,(%rsp)
   18951:	48 01 cf             	add    %rcx,%rdi
   18954:	48 f7 d1             	not    %rcx
            STBI__CASE(STBI__F_avg)          { cur[k] = STBI__BYTECAST(raw[k] + ((prior[k] + cur[k- output_bytes])>>1)); } break;
   18957:	44 89 da             	mov    %r11d,%edx
   1895a:	4d 63 c3             	movslq %r11d,%r8
   1895d:	41 c1 ec 04          	shr    $0x4,%r12d
   18961:	44 29 f2             	sub    %r14d,%edx
   18964:	49 c1 e4 04          	shl    $0x4,%r12
   18968:	48 63 f2             	movslq %edx,%rsi
   1896b:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
   18970:	41 8d 73 01          	lea    0x1(%r11),%esi
   18974:	48 63 d6             	movslq %esi,%rdx
   18977:	89 74 24 40          	mov    %esi,0x40(%rsp)
   1897b:	44 29 f6             	sub    %r14d,%esi
   1897e:	48 63 f6             	movslq %esi,%rsi
   18981:	48 89 94 24 88 01 00 	mov    %rdx,0x188(%rsp)
   18988:	00 
   18989:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
   18990:	00 
   18991:	41 8d 73 02          	lea    0x2(%r11),%esi
   18995:	48 63 d6             	movslq %esi,%rdx
   18998:	89 74 24 70          	mov    %esi,0x70(%rsp)
   1899c:	44 29 f6             	sub    %r14d,%esi
   1899f:	48 63 f6             	movslq %esi,%rsi
   189a2:	48 89 94 24 d0 00 00 	mov    %rdx,0xd0(%rsp)
   189a9:	00 
   189aa:	48 89 b4 24 d8 00 00 	mov    %rsi,0xd8(%rsp)
   189b1:	00 
   189b2:	41 8d 73 03          	lea    0x3(%r11),%esi
   189b6:	48 63 d6             	movslq %esi,%rdx
   189b9:	89 b4 24 b8 00 00 00 	mov    %esi,0xb8(%rsp)
   189c0:	44 29 f6             	sub    %r14d,%esi
   189c3:	48 63 f6             	movslq %esi,%rsi
   189c6:	48 89 94 24 e8 00 00 	mov    %rdx,0xe8(%rsp)
   189cd:	00 
   189ce:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
   189d5:	00 
   189d6:	41 8d 73 04          	lea    0x4(%r11),%esi
   189da:	48 63 d6             	movslq %esi,%rdx
   189dd:	89 b4 24 e0 00 00 00 	mov    %esi,0xe0(%rsp)
   189e4:	44 29 f6             	sub    %r14d,%esi
   189e7:	48 63 f6             	movslq %esi,%rsi
   189ea:	48 89 94 24 00 01 00 	mov    %rdx,0x100(%rsp)
   189f1:	00 
   189f2:	48 89 b4 24 08 01 00 	mov    %rsi,0x108(%rsp)
   189f9:	00 
   189fa:	41 8d 73 05          	lea    0x5(%r11),%esi
   189fe:	48 63 d6             	movslq %esi,%rdx
   18a01:	89 b4 24 f8 00 00 00 	mov    %esi,0xf8(%rsp)
   18a08:	44 29 f6             	sub    %r14d,%esi
   18a0b:	48 63 f6             	movslq %esi,%rsi
   18a0e:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
   18a15:	00 
   18a16:	48 89 b4 24 20 01 00 	mov    %rsi,0x120(%rsp)
   18a1d:	00 
   18a1e:	41 8d 73 06          	lea    0x6(%r11),%esi
   18a22:	48 63 d6             	movslq %esi,%rdx
   18a25:	89 b4 24 10 01 00 00 	mov    %esi,0x110(%rsp)
   18a2c:	44 29 f6             	sub    %r14d,%esi
   18a2f:	48 63 f6             	movslq %esi,%rsi
   18a32:	48 89 94 24 30 01 00 	mov    %rdx,0x130(%rsp)
   18a39:	00 
   18a3a:	48 89 b4 24 38 01 00 	mov    %rsi,0x138(%rsp)
   18a41:	00 
   18a42:	41 8d 73 07          	lea    0x7(%r11),%esi
   18a46:	48 63 d6             	movslq %esi,%rdx
   18a49:	89 b4 24 28 01 00 00 	mov    %esi,0x128(%rsp)
   18a50:	44 29 f6             	sub    %r14d,%esi
   18a53:	48 63 f6             	movslq %esi,%rsi
   18a56:	48 89 94 24 48 01 00 	mov    %rdx,0x148(%rsp)
   18a5d:	00 
   18a5e:	48 89 b4 24 50 01 00 	mov    %rsi,0x150(%rsp)
   18a65:	00 
   18a66:	41 8d 73 08          	lea    0x8(%r11),%esi
   18a6a:	48 63 d6             	movslq %esi,%rdx
   18a6d:	89 b4 24 40 01 00 00 	mov    %esi,0x140(%rsp)
   18a74:	44 29 f6             	sub    %r14d,%esi
   18a77:	48 63 f6             	movslq %esi,%rsi
   18a7a:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
   18a81:	00 
   18a82:	48 89 b4 24 68 01 00 	mov    %rsi,0x168(%rsp)
   18a89:	00 
   18a8a:	41 8d 73 09          	lea    0x9(%r11),%esi
   18a8e:	48 63 d6             	movslq %esi,%rdx
   18a91:	89 b4 24 58 01 00 00 	mov    %esi,0x158(%rsp)
   18a98:	44 29 f6             	sub    %r14d,%esi
   18a9b:	48 63 f6             	movslq %esi,%rsi
   18a9e:	48 89 94 24 78 01 00 	mov    %rdx,0x178(%rsp)
   18aa5:	00 
   18aa6:	48 89 b4 24 80 01 00 	mov    %rsi,0x180(%rsp)
   18aad:	00 
   18aae:	41 8d 73 0a          	lea    0xa(%r11),%esi
   18ab2:	89 b4 24 70 01 00 00 	mov    %esi,0x170(%rsp)
   18ab9:	48 63 d6             	movslq %esi,%rdx
   18abc:	44 29 f6             	sub    %r14d,%esi
   18abf:	48 63 f6             	movslq %esi,%rsi
   18ac2:	48 89 94 24 90 01 00 	mov    %rdx,0x190(%rsp)
   18ac9:	00 
   18aca:	48 89 b4 24 98 01 00 	mov    %rsi,0x198(%rsp)
   18ad1:	00 
   18ad2:	41 8d 73 0b          	lea    0xb(%r11),%esi
   18ad6:	66 0f 6f 25 82 fe 01 	movdqa 0x1fe82(%rip),%xmm4        # 38960 <_ZL11stbi__bmask+0x1e0>
   18add:	00 
   18ade:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   18ae3:	66 0f 6f 1d 85 fe 01 	movdqa 0x1fe85(%rip),%xmm3        # 38970 <_ZL11stbi__bmask+0x1f0>
   18aea:	00 
   18aeb:	89 b4 24 a4 01 00 00 	mov    %esi,0x1a4(%rsp)
   18af2:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   18af7:	44 89 5c 24 20       	mov    %r11d,0x20(%rsp)
   18afc:	4c 8b 9c 24 88 01 00 	mov    0x188(%rsp),%r11
   18b03:	00 
   18b04:	4c 89 bc 24 a8 01 00 	mov    %r15,0x1a8(%rsp)
   18b0b:	00 
   18b0c:	4d 89 c7             	mov    %r8,%r15
   18b0f:	44 89 74 24 30       	mov    %r14d,0x30(%rsp)
   18b14:	45 89 d6             	mov    %r10d,%r14d
   18b17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   18b1e:	00 00 
   18b20:	49 89 f9             	mov    %rdi,%r9
   18b23:	4c 01 ef             	add    %r13,%rdi
   18b26:	45 85 f6             	test   %r14d,%r14d
   18b29:	0f 8e 81 03 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18b2f:	83 3c 24 0e          	cmpl   $0xe,(%rsp)
   18b33:	0f 86 47 19 00 00    	jbe    1a480 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e70>
   18b39:	48 83 7c 24 10 0e    	cmpq   $0xe,0x10(%rsp)
   18b3f:	4c 8d 40 01          	lea    0x1(%rax),%r8
   18b43:	48 89 f9             	mov    %rdi,%rcx
   18b46:	0f 97 c2             	seta   %dl
   18b49:	4c 29 c1             	sub    %r8,%rcx
   18b4c:	48 83 f9 0e          	cmp    $0xe,%rcx
   18b50:	0f 97 c1             	seta   %cl
   18b53:	84 ca                	test   %cl,%dl
   18b55:	0f 84 25 19 00 00    	je     1a480 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e70>
   18b5b:	48 8d 4e 01          	lea    0x1(%rsi),%rcx
   18b5f:	48 89 fa             	mov    %rdi,%rdx
   18b62:	48 29 ca             	sub    %rcx,%rdx
   18b65:	48 83 fa 0e          	cmp    $0xe,%rdx
   18b69:	0f 86 11 19 00 00    	jbe    1a480 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e70>
   18b6f:	49 83 c1 00          	add    $0x0,%r9
   18b73:	31 d2                	xor    %edx,%edx
   18b75:	0f 1f 00             	nopl   (%rax)
   18b78:	f3 0f 6f 04 10       	movdqu (%rax,%rdx,1),%xmm0
   18b7d:	f3 41 0f 6f 2c 11    	movdqu (%r9,%rdx,1),%xmm5
   18b83:	f3 0f 6f 0c 16       	movdqu (%rsi,%rdx,1),%xmm1
   18b88:	f3 41 0f 6f 14 11    	movdqu (%r9,%rdx,1),%xmm2
   18b8e:	66 0f db c5          	pand   %xmm5,%xmm0
   18b92:	66 0f db c4          	pand   %xmm4,%xmm0
   18b96:	66 0f 71 d2 01       	psrlw  $0x1,%xmm2
   18b9b:	66 0f fc c8          	paddb  %xmm0,%xmm1
   18b9f:	f3 0f 6f 04 10       	movdqu (%rax,%rdx,1),%xmm0
   18ba4:	66 0f db d3          	pand   %xmm3,%xmm2
   18ba8:	66 0f 71 d0 01       	psrlw  $0x1,%xmm0
   18bad:	66 0f db c3          	pand   %xmm3,%xmm0
   18bb1:	66 0f fc c2          	paddb  %xmm2,%xmm0
   18bb5:	66 0f fc c1          	paddb  %xmm1,%xmm0
   18bb9:	0f 11 04 17          	movups %xmm0,(%rdi,%rdx,1)
   18bbd:	48 83 c2 10          	add    $0x10,%rdx
   18bc1:	49 39 d4             	cmp    %rdx,%r12
   18bc4:	75 b2                	jne    18b78 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1568>
   18bc6:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   18bcb:	45 39 ce             	cmp    %r9d,%r14d
   18bce:	0f 84 dc 02 00 00    	je     18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18bd4:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
   18bd9:	42 0f b6 14 38       	movzbl (%rax,%r15,1),%edx
   18bde:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18be2:	01 ca                	add    %ecx,%edx
   18be4:	d1 fa                	sar    %edx
   18be6:	42 02 14 3e          	add    (%rsi,%r15,1),%dl
   18bea:	42 88 14 3f          	mov    %dl,(%rdi,%r15,1)
   18bee:	8b 54 24 40          	mov    0x40(%rsp),%edx
   18bf2:	41 39 d6             	cmp    %edx,%r14d
   18bf5:	0f 8e b5 02 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18bfb:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
   18c02:	00 
   18c03:	42 0f b6 14 18       	movzbl (%rax,%r11,1),%edx
   18c08:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18c0c:	01 ca                	add    %ecx,%edx
   18c0e:	d1 fa                	sar    %edx
   18c10:	42 02 14 1e          	add    (%rsi,%r11,1),%dl
   18c14:	42 88 14 1f          	mov    %dl,(%rdi,%r11,1)
   18c18:	8b 54 24 70          	mov    0x70(%rsp),%edx
   18c1c:	41 39 d6             	cmp    %edx,%r14d
   18c1f:	0f 8e 8b 02 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18c25:	4c 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%r9
   18c2c:	00 
   18c2d:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
   18c34:	00 
   18c35:	42 0f b6 14 08       	movzbl (%rax,%r9,1),%edx
   18c3a:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18c3e:	01 ca                	add    %ecx,%edx
   18c40:	d1 fa                	sar    %edx
   18c42:	42 02 14 0e          	add    (%rsi,%r9,1),%dl
   18c46:	42 88 14 0f          	mov    %dl,(%rdi,%r9,1)
   18c4a:	8b 94 24 b8 00 00 00 	mov    0xb8(%rsp),%edx
   18c51:	41 39 d6             	cmp    %edx,%r14d
   18c54:	0f 8e 56 02 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18c5a:	4c 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%r8
   18c61:	00 
   18c62:	48 8b 8c 24 f0 00 00 	mov    0xf0(%rsp),%rcx
   18c69:	00 
   18c6a:	42 0f b6 14 00       	movzbl (%rax,%r8,1),%edx
   18c6f:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18c73:	01 ca                	add    %ecx,%edx
   18c75:	d1 fa                	sar    %edx
   18c77:	42 02 14 06          	add    (%rsi,%r8,1),%dl
   18c7b:	42 88 14 07          	mov    %dl,(%rdi,%r8,1)
   18c7f:	8b 94 24 e0 00 00 00 	mov    0xe0(%rsp),%edx
   18c86:	41 39 d6             	cmp    %edx,%r14d
   18c89:	0f 8e 21 02 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18c8f:	4c 8b 84 24 00 01 00 	mov    0x100(%rsp),%r8
   18c96:	00 
   18c97:	48 8b 8c 24 08 01 00 	mov    0x108(%rsp),%rcx
   18c9e:	00 
   18c9f:	42 0f b6 14 00       	movzbl (%rax,%r8,1),%edx
   18ca4:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18ca8:	01 ca                	add    %ecx,%edx
   18caa:	d1 fa                	sar    %edx
   18cac:	42 02 14 06          	add    (%rsi,%r8,1),%dl
   18cb0:	42 88 14 07          	mov    %dl,(%rdi,%r8,1)
   18cb4:	8b 94 24 f8 00 00 00 	mov    0xf8(%rsp),%edx
   18cbb:	41 39 d6             	cmp    %edx,%r14d
   18cbe:	0f 8e ec 01 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18cc4:	4c 8b 84 24 18 01 00 	mov    0x118(%rsp),%r8
   18ccb:	00 
   18ccc:	48 8b 8c 24 20 01 00 	mov    0x120(%rsp),%rcx
   18cd3:	00 
   18cd4:	42 0f b6 14 00       	movzbl (%rax,%r8,1),%edx
   18cd9:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18cdd:	01 ca                	add    %ecx,%edx
   18cdf:	d1 fa                	sar    %edx
   18ce1:	42 02 14 06          	add    (%rsi,%r8,1),%dl
   18ce5:	42 88 14 07          	mov    %dl,(%rdi,%r8,1)
   18ce9:	8b 94 24 10 01 00 00 	mov    0x110(%rsp),%edx
   18cf0:	41 39 d6             	cmp    %edx,%r14d
   18cf3:	0f 8e b7 01 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18cf9:	4c 8b 84 24 30 01 00 	mov    0x130(%rsp),%r8
   18d00:	00 
   18d01:	48 8b 8c 24 38 01 00 	mov    0x138(%rsp),%rcx
   18d08:	00 
   18d09:	42 0f b6 14 00       	movzbl (%rax,%r8,1),%edx
   18d0e:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18d12:	01 ca                	add    %ecx,%edx
   18d14:	d1 fa                	sar    %edx
   18d16:	42 02 14 06          	add    (%rsi,%r8,1),%dl
   18d1a:	42 88 14 07          	mov    %dl,(%rdi,%r8,1)
   18d1e:	8b 94 24 28 01 00 00 	mov    0x128(%rsp),%edx
   18d25:	41 39 d6             	cmp    %edx,%r14d
   18d28:	0f 8e 82 01 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18d2e:	4c 8b 84 24 48 01 00 	mov    0x148(%rsp),%r8
   18d35:	00 
   18d36:	48 8b 8c 24 50 01 00 	mov    0x150(%rsp),%rcx
   18d3d:	00 
   18d3e:	42 0f b6 14 00       	movzbl (%rax,%r8,1),%edx
   18d43:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18d47:	01 ca                	add    %ecx,%edx
   18d49:	d1 fa                	sar    %edx
   18d4b:	42 02 14 06          	add    (%rsi,%r8,1),%dl
   18d4f:	42 88 14 07          	mov    %dl,(%rdi,%r8,1)
   18d53:	8b 94 24 40 01 00 00 	mov    0x140(%rsp),%edx
   18d5a:	41 39 d6             	cmp    %edx,%r14d
   18d5d:	0f 8e 4d 01 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18d63:	4c 8b 84 24 60 01 00 	mov    0x160(%rsp),%r8
   18d6a:	00 
   18d6b:	48 8b 8c 24 68 01 00 	mov    0x168(%rsp),%rcx
   18d72:	00 
   18d73:	42 0f b6 14 00       	movzbl (%rax,%r8,1),%edx
   18d78:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18d7c:	01 ca                	add    %ecx,%edx
   18d7e:	d1 fa                	sar    %edx
   18d80:	42 02 14 06          	add    (%rsi,%r8,1),%dl
   18d84:	42 88 14 07          	mov    %dl,(%rdi,%r8,1)
   18d88:	8b 94 24 58 01 00 00 	mov    0x158(%rsp),%edx
   18d8f:	41 39 d6             	cmp    %edx,%r14d
   18d92:	0f 8e 18 01 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18d98:	4c 8b 84 24 78 01 00 	mov    0x178(%rsp),%r8
   18d9f:	00 
   18da0:	48 8b 8c 24 80 01 00 	mov    0x180(%rsp),%rcx
   18da7:	00 
   18da8:	42 0f b6 14 00       	movzbl (%rax,%r8,1),%edx
   18dad:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18db1:	01 ca                	add    %ecx,%edx
   18db3:	d1 fa                	sar    %edx
   18db5:	42 02 14 06          	add    (%rsi,%r8,1),%dl
   18db9:	42 88 14 07          	mov    %dl,(%rdi,%r8,1)
   18dbd:	8b 94 24 70 01 00 00 	mov    0x170(%rsp),%edx
   18dc4:	41 39 d6             	cmp    %edx,%r14d
   18dc7:	0f 8e e3 00 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18dcd:	4c 8b 84 24 90 01 00 	mov    0x190(%rsp),%r8
   18dd4:	00 
   18dd5:	48 8b 8c 24 98 01 00 	mov    0x198(%rsp),%rcx
   18ddc:	00 
   18ddd:	42 0f b6 14 00       	movzbl (%rax,%r8,1),%edx
   18de2:	0f b6 0c 0f          	movzbl (%rdi,%rcx,1),%ecx
   18de6:	01 ca                	add    %ecx,%edx
   18de8:	d1 fa                	sar    %edx
   18dea:	42 02 14 06          	add    (%rsi,%r8,1),%dl
   18dee:	42 88 14 07          	mov    %dl,(%rdi,%r8,1)
   18df2:	8b 94 24 a4 01 00 00 	mov    0x1a4(%rsp),%edx
   18df9:	41 39 d6             	cmp    %edx,%r14d
   18dfc:	0f 8e ae 00 00 00    	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18e02:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   18e07:	48 63 ca             	movslq %edx,%rcx
   18e0a:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   18e0f:	44 29 c2             	sub    %r8d,%edx
   18e12:	44 0f b6 04 08       	movzbl (%rax,%rcx,1),%r8d
   18e17:	48 63 d2             	movslq %edx,%rdx
   18e1a:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   18e1e:	44 01 c2             	add    %r8d,%edx
   18e21:	d1 fa                	sar    %edx
   18e23:	02 14 0e             	add    (%rsi,%rcx,1),%dl
   18e26:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   18e29:	41 8d 51 0c          	lea    0xc(%r9),%edx
   18e2d:	41 39 d6             	cmp    %edx,%r14d
   18e30:	7e 7e                	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18e32:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   18e37:	48 63 ca             	movslq %edx,%rcx
   18e3a:	44 29 c2             	sub    %r8d,%edx
   18e3d:	44 0f b6 04 08       	movzbl (%rax,%rcx,1),%r8d
   18e42:	48 63 d2             	movslq %edx,%rdx
   18e45:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   18e49:	44 01 c2             	add    %r8d,%edx
   18e4c:	d1 fa                	sar    %edx
   18e4e:	02 14 0e             	add    (%rsi,%rcx,1),%dl
   18e51:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   18e54:	41 8d 51 0d          	lea    0xd(%r9),%edx
   18e58:	41 39 d6             	cmp    %edx,%r14d
   18e5b:	7e 53                	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18e5d:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   18e62:	48 63 ca             	movslq %edx,%rcx
   18e65:	44 29 c2             	sub    %r8d,%edx
   18e68:	44 0f b6 04 08       	movzbl (%rax,%rcx,1),%r8d
   18e6d:	48 63 d2             	movslq %edx,%rdx
   18e70:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   18e74:	44 01 c2             	add    %r8d,%edx
   18e77:	d1 fa                	sar    %edx
   18e79:	02 14 0e             	add    (%rsi,%rcx,1),%dl
   18e7c:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   18e7f:	41 8d 51 0e          	lea    0xe(%r9),%edx
   18e83:	41 39 d6             	cmp    %edx,%r14d
   18e86:	7e 28                	jle    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   18e88:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
   18e8d:	48 63 ca             	movslq %edx,%rcx
   18e90:	44 29 c2             	sub    %r8d,%edx
   18e93:	44 0f b6 04 08       	movzbl (%rax,%rcx,1),%r8d
   18e98:	48 63 d2             	movslq %edx,%rdx
   18e9b:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   18e9f:	44 01 c2             	add    %r8d,%edx
   18ea2:	d1 fa                	sar    %edx
   18ea4:	02 14 0e             	add    (%rsi,%rcx,1),%dl
   18ea7:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   18eaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   18eb0:	42 c6 04 17 ff       	movb   $0xff,(%rdi,%r10,1)
   18eb5:	4c 01 d6             	add    %r10,%rsi
   18eb8:	4c 01 e8             	add    %r13,%rax
   18ebb:	83 eb 01             	sub    $0x1,%ebx
   18ebe:	0f 85 5c fc ff ff    	jne    18b20 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1510>
   18ec4:	8b 84 24 c4 00 00 00 	mov    0xc4(%rsp),%eax
   18ecb:	4c 8b bc 24 a8 01 00 	mov    0x1a8(%rsp),%r15
   18ed2:	00 
   18ed3:	44 8b 74 24 30       	mov    0x30(%rsp),%r14d
   18ed8:	49 0f af c2          	imul   %r10,%rax
   18edc:	48 01 44 24 50       	add    %rax,0x50(%rsp)
         if (depth == 16) {
   18ee1:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   18ee8:	10 
   18ee9:	0f 85 a6 eb ff ff    	jne    17a95 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x485>
   18eef:	e9 b6 ed ff ff       	jmp    17caa <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x69a>
            STBI__CASE(STBI__F_sub)          { cur[k] = STBI__BYTECAST(raw[k] + cur[k- output_bytes]); } break;
   18ef4:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   18efb:	83 e8 01             	sub    $0x1,%eax
   18efe:	89 84 24 c4 00 00 00 	mov    %eax,0xc4(%rsp)
   18f05:	89 c6                	mov    %eax,%esi
   18f07:	0f 84 55 19 00 00    	je     1a862 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3252>
   18f0d:	45 89 f4             	mov    %r14d,%r12d
            cur[filter_bytes]   = 255; // first pixel top byte
   18f10:	48 63 54 24 58       	movslq 0x58(%rsp),%rdx
   18f15:	4c 89 7c 24 60       	mov    %r15,0x60(%rsp)
         cur += output_bytes;
   18f1a:	4d 63 ee             	movslq %r14d,%r13
   18f1d:	41 f7 dc             	neg    %r12d
   18f20:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
   18f25:	4d 63 e4             	movslq %r12d,%r12
   18f28:	41 89 d0             	mov    %edx,%r8d
   18f2b:	89 d3                	mov    %edx,%ebx
            cur[filter_bytes]   = 255; // first pixel top byte
   18f2d:	49 89 d1             	mov    %rdx,%r9
   18f30:	4c 89 e1             	mov    %r12,%rcx
   18f33:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
   18f38:	41 c1 e8 04          	shr    $0x4,%r8d
   18f3c:	4c 01 e7             	add    %r12,%rdi
   18f3f:	48 f7 d1             	not    %rcx
   18f42:	44 8d 52 ff          	lea    -0x1(%rdx),%r10d
   18f46:	49 c1 e0 04          	shl    $0x4,%r8
   18f4a:	83 e3 f0             	and    $0xfffffff0,%ebx
   18f4d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   18f52:	89 d1                	mov    %edx,%ecx
   18f54:	83 e1 0f             	and    $0xf,%ecx
   18f57:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
   18f5b:	83 e9 01             	sub    $0x1,%ecx
   18f5e:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
   18f62:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   18f68:	49 89 fc             	mov    %rdi,%r12
   18f6b:	4c 01 ef             	add    %r13,%rdi
            STBI__CASE(STBI__F_sub)          { cur[k] = STBI__BYTECAST(raw[k] + cur[k- output_bytes]); } break;
   18f6e:	45 85 c9             	test   %r9d,%r9d
   18f71:	0f 8e 89 01 00 00    	jle    19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   18f77:	41 83 fa 06          	cmp    $0x6,%r10d
   18f7b:	0f 86 ff 15 00 00    	jbe    1a580 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f70>
   18f81:	48 83 7c 24 10 0e    	cmpq   $0xe,0x10(%rsp)
   18f87:	0f 86 f3 15 00 00    	jbe    1a580 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f70>
   18f8d:	4c 8d 58 01          	lea    0x1(%rax),%r11
   18f91:	48 89 f9             	mov    %rdi,%rcx
   18f94:	4c 29 d9             	sub    %r11,%rcx
   18f97:	48 83 f9 0e          	cmp    $0xe,%rcx
   18f9b:	0f 86 df 15 00 00    	jbe    1a580 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f70>
   18fa1:	41 83 fa 0e          	cmp    $0xe,%r10d
   18fa5:	0f 86 07 1a 00 00    	jbe    1a9b2 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x33a2>
   18fab:	49 83 c4 00          	add    $0x0,%r12
   18faf:	31 c9                	xor    %ecx,%ecx
   18fb1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   18fb8:	f3 0f 6f 04 08       	movdqu (%rax,%rcx,1),%xmm0
   18fbd:	f3 41 0f 6f 2c 0c    	movdqu (%r12,%rcx,1),%xmm5
   18fc3:	66 0f fc c5          	paddb  %xmm5,%xmm0
   18fc7:	0f 11 04 0f          	movups %xmm0,(%rdi,%rcx,1)
   18fcb:	48 83 c1 10          	add    $0x10,%rcx
   18fcf:	4c 39 c1             	cmp    %r8,%rcx
   18fd2:	75 e4                	jne    18fb8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x19a8>
   18fd4:	41 39 d9             	cmp    %ebx,%r9d
   18fd7:	0f 84 23 01 00 00    	je     19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   18fdd:	83 7c 24 40 06       	cmpl   $0x6,0x40(%rsp)
   18fe2:	44 8b 5c 24 30       	mov    0x30(%rsp),%r11d
   18fe7:	0f 86 62 1d 00 00    	jbe    1ad4f <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x373f>
   18fed:	89 1c 24             	mov    %ebx,(%rsp)
   18ff0:	89 d9                	mov    %ebx,%ecx
   18ff2:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
   18ff7:	4c 8d 24 0f          	lea    (%rdi,%rcx,1),%r12
   18ffb:	f3 0f 7e 0c 08       	movq   (%rax,%rcx,1),%xmm1
   19000:	f3 43 0f 7e 04 3c    	movq   (%r12,%r15,1),%xmm0
   19006:	44 8b 3c 24          	mov    (%rsp),%r15d
   1900a:	66 0f fc c1          	paddb  %xmm1,%xmm0
   1900e:	66 0f d6 04 0f       	movq   %xmm0,(%rdi,%rcx,1)
   19013:	44 89 d9             	mov    %r11d,%ecx
   19016:	83 e1 f8             	and    $0xfffffff8,%ecx
   19019:	44 01 f9             	add    %r15d,%ecx
   1901c:	41 83 e3 07          	and    $0x7,%r11d
   19020:	0f 84 da 00 00 00    	je     19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   19026:	41 89 cb             	mov    %ecx,%r11d
   19029:	4c 63 e1             	movslq %ecx,%r12
   1902c:	45 29 f3             	sub    %r14d,%r11d
   1902f:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   19034:	4d 63 db             	movslq %r11d,%r11
   19037:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   1903b:	44 8d 59 01          	lea    0x1(%rcx),%r11d
   1903f:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   19043:	45 39 d9             	cmp    %r11d,%r9d
   19046:	0f 8e b4 00 00 00    	jle    19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   1904c:	4d 63 e3             	movslq %r11d,%r12
   1904f:	45 29 f3             	sub    %r14d,%r11d
   19052:	4d 63 db             	movslq %r11d,%r11
   19055:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   1905a:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   1905e:	44 8d 59 02          	lea    0x2(%rcx),%r11d
   19062:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   19066:	45 39 d9             	cmp    %r11d,%r9d
   19069:	0f 8e 91 00 00 00    	jle    19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   1906f:	4d 63 e3             	movslq %r11d,%r12
   19072:	45 29 f3             	sub    %r14d,%r11d
   19075:	4d 63 db             	movslq %r11d,%r11
   19078:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   1907d:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   19081:	44 8d 59 03          	lea    0x3(%rcx),%r11d
   19085:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   19089:	45 39 d9             	cmp    %r11d,%r9d
   1908c:	7e 72                	jle    19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   1908e:	4d 63 e3             	movslq %r11d,%r12
   19091:	45 29 f3             	sub    %r14d,%r11d
   19094:	4d 63 db             	movslq %r11d,%r11
   19097:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   1909c:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   190a0:	44 8d 59 04          	lea    0x4(%rcx),%r11d
   190a4:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   190a8:	45 39 d9             	cmp    %r11d,%r9d
   190ab:	7e 53                	jle    19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   190ad:	4d 63 e3             	movslq %r11d,%r12
   190b0:	45 29 f3             	sub    %r14d,%r11d
   190b3:	4d 63 db             	movslq %r11d,%r11
   190b6:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   190bb:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   190bf:	44 8d 59 05          	lea    0x5(%rcx),%r11d
   190c3:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   190c7:	45 39 d9             	cmp    %r11d,%r9d
   190ca:	7e 34                	jle    19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   190cc:	4d 63 e3             	movslq %r11d,%r12
   190cf:	45 29 f3             	sub    %r14d,%r11d
   190d2:	83 c1 06             	add    $0x6,%ecx
   190d5:	4d 63 db             	movslq %r11d,%r11
   190d8:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   190dd:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   190e1:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   190e5:	41 39 c9             	cmp    %ecx,%r9d
   190e8:	7e 16                	jle    19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   190ea:	4c 63 d9             	movslq %ecx,%r11
   190ed:	44 29 f1             	sub    %r14d,%ecx
   190f0:	48 63 c9             	movslq %ecx,%rcx
   190f3:	46 0f b6 24 18       	movzbl (%rax,%r11,1),%r12d
   190f8:	44 02 24 0f          	add    (%rdi,%rcx,1),%r12b
   190fc:	46 88 24 1f          	mov    %r12b,(%rdi,%r11,1)
   19100:	c6 04 17 ff          	movb   $0xff,(%rdi,%rdx,1)
   19104:	48 01 d0             	add    %rdx,%rax
   19107:	83 ee 01             	sub    $0x1,%esi
   1910a:	0f 85 58 fe ff ff    	jne    18f68 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1958>
   19110:	8b 84 24 c4 00 00 00 	mov    0xc4(%rsp),%eax
   19117:	4c 8b 7c 24 60       	mov    0x60(%rsp),%r15
   1911c:	48 0f af c2          	imul   %rdx,%rax
   19120:	48 01 44 24 50       	add    %rax,0x50(%rsp)
         if (depth == 16) {
   19125:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   1912c:	10 
   1912d:	0f 85 62 e9 ff ff    	jne    17a95 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x485>
   19133:	e9 72 eb ff ff       	jmp    17caa <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x69a>
            STBI__CASE(STBI__F_none)         { cur[k] = raw[k]; } break;
   19138:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   1913f:	83 e8 01             	sub    $0x1,%eax
   19142:	89 84 24 c4 00 00 00 	mov    %eax,0xc4(%rsp)
   19149:	41 89 c0             	mov    %eax,%r8d
   1914c:	0f 84 10 17 00 00    	je     1a862 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3252>
            cur[filter_bytes]   = 255; // first pixel top byte
   19152:	48 63 4c 24 58       	movslq 0x58(%rsp),%rcx
         cur += output_bytes;
   19157:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
   1915c:	89 54 24 20          	mov    %edx,0x20(%rsp)
   19160:	4d 63 e6             	movslq %r14d,%r12
   19163:	89 cb                	mov    %ecx,%ebx
   19165:	41 89 c9             	mov    %ecx,%r9d
   19168:	41 89 cd             	mov    %ecx,%r13d
            cur[filter_bytes]   = 255; // first pixel top byte
   1916b:	48 89 ce             	mov    %rcx,%rsi
   1916e:	83 e3 0f             	and    $0xf,%ebx
   19171:	41 c1 e9 04          	shr    $0x4,%r9d
   19175:	44 8d 59 ff          	lea    -0x1(%rcx),%r11d
   19179:	41 83 e5 f0          	and    $0xfffffff0,%r13d
   1917d:	89 1c 24             	mov    %ebx,(%rsp)
   19180:	83 eb 01             	sub    $0x1,%ebx
   19183:	49 c1 e1 04          	shl    $0x4,%r9
   19187:	89 5c 24 10          	mov    %ebx,0x10(%rsp)
   1918b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            STBI__CASE(STBI__F_none)         { cur[k] = raw[k]; } break;
   19190:	85 f6                	test   %esi,%esi
   19192:	7e 36                	jle    191ca <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1bba>
   19194:	41 83 fb 06          	cmp    $0x6,%r11d
   19198:	0f 86 22 15 00 00    	jbe    1a6c0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x30b0>
   1919e:	48 8d 50 01          	lea    0x1(%rax),%rdx
   191a2:	49 89 fa             	mov    %rdi,%r10
   191a5:	49 29 d2             	sub    %rdx,%r10
   191a8:	31 d2                	xor    %edx,%edx
   191aa:	49 83 fa 0e          	cmp    $0xe,%r10
   191ae:	0f 87 f4 13 00 00    	ja     1a5a8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f98>
   191b4:	0f 1f 40 00          	nopl   0x0(%rax)
   191b8:	44 0f b6 14 10       	movzbl (%rax,%rdx,1),%r10d
   191bd:	44 88 14 17          	mov    %r10b,(%rdi,%rdx,1)
   191c1:	48 83 c2 01          	add    $0x1,%rdx
   191c5:	48 39 d1             	cmp    %rdx,%rcx
   191c8:	75 ee                	jne    191b8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1ba8>
   191ca:	c6 04 0f ff          	movb   $0xff,(%rdi,%rcx,1)
   191ce:	48 01 c8             	add    %rcx,%rax
   191d1:	4c 01 e7             	add    %r12,%rdi
   191d4:	41 83 e8 01          	sub    $0x1,%r8d
   191d8:	75 b6                	jne    19190 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1b80>
   191da:	e9 ad ea ff ff       	jmp    17c8c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x67c>
            STBI__CASE(STBI__F_paeth_first)  { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],0,0)); } break;
   191df:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   191e6:	83 e8 01             	sub    $0x1,%eax
   191e9:	89 84 24 c4 00 00 00 	mov    %eax,0xc4(%rsp)
   191f0:	89 c6                	mov    %eax,%esi
   191f2:	0f 84 6a 16 00 00    	je     1a862 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3252>
   191f8:	45 89 f4             	mov    %r14d,%r12d
            cur[filter_bytes]   = 255; // first pixel top byte
   191fb:	48 63 54 24 58       	movslq 0x58(%rsp),%rdx
   19200:	4c 89 7c 24 40       	mov    %r15,0x40(%rsp)
         cur += output_bytes;
   19205:	4d 63 ee             	movslq %r14d,%r13
   19208:	41 f7 dc             	neg    %r12d
   1920b:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
   19210:	4d 63 e4             	movslq %r12d,%r12
   19213:	41 89 d0             	mov    %edx,%r8d
   19216:	89 d3                	mov    %edx,%ebx
            cur[filter_bytes]   = 255; // first pixel top byte
   19218:	49 89 d1             	mov    %rdx,%r9
   1921b:	4c 89 e1             	mov    %r12,%rcx
   1921e:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
   19223:	41 c1 e8 04          	shr    $0x4,%r8d
   19227:	4c 01 e7             	add    %r12,%rdi
   1922a:	48 f7 d1             	not    %rcx
   1922d:	44 8d 52 ff          	lea    -0x1(%rdx),%r10d
   19231:	49 c1 e0 04          	shl    $0x4,%r8
   19235:	83 e3 f0             	and    $0xfffffff0,%ebx
   19238:	48 89 0c 24          	mov    %rcx,(%rsp)
   1923c:	89 d1                	mov    %edx,%ecx
   1923e:	83 e1 0f             	and    $0xf,%ecx
   19241:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
   19245:	83 e9 01             	sub    $0x1,%ecx
   19248:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
   1924c:	0f 1f 40 00          	nopl   0x0(%rax)
   19250:	49 89 fc             	mov    %rdi,%r12
   19253:	4c 01 ef             	add    %r13,%rdi
            STBI__CASE(STBI__F_paeth_first)  { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],0,0)); } break;
   19256:	45 85 c9             	test   %r9d,%r9d
   19259:	0f 8e 89 01 00 00    	jle    193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   1925f:	41 83 fa 06          	cmp    $0x6,%r10d
   19263:	0f 86 c7 11 00 00    	jbe    1a430 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e20>
   19269:	48 83 3c 24 0e       	cmpq   $0xe,(%rsp)
   1926e:	0f 86 bc 11 00 00    	jbe    1a430 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e20>
   19274:	4c 8d 58 01          	lea    0x1(%rax),%r11
   19278:	48 89 f9             	mov    %rdi,%rcx
   1927b:	4c 29 d9             	sub    %r11,%rcx
   1927e:	48 83 f9 0e          	cmp    $0xe,%rcx
   19282:	0f 86 a8 11 00 00    	jbe    1a430 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e20>
   19288:	41 83 fa 0e          	cmp    $0xe,%r10d
   1928c:	0f 86 f8 16 00 00    	jbe    1a98a <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x337a>
   19292:	49 83 c4 00          	add    $0x0,%r12
   19296:	31 c9                	xor    %ecx,%ecx
   19298:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1929f:	00 
   192a0:	f3 0f 6f 04 08       	movdqu (%rax,%rcx,1),%xmm0
   192a5:	f3 41 0f 6f 2c 0c    	movdqu (%r12,%rcx,1),%xmm5
   192ab:	66 0f fc c5          	paddb  %xmm5,%xmm0
   192af:	0f 11 04 0f          	movups %xmm0,(%rdi,%rcx,1)
   192b3:	48 83 c1 10          	add    $0x10,%rcx
   192b7:	4c 39 c1             	cmp    %r8,%rcx
   192ba:	75 e4                	jne    192a0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1c90>
   192bc:	41 39 d9             	cmp    %ebx,%r9d
   192bf:	0f 84 23 01 00 00    	je     193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   192c5:	83 7c 24 30 06       	cmpl   $0x6,0x30(%rsp)
   192ca:	44 8b 5c 24 20       	mov    0x20(%rsp),%r11d
   192cf:	0f 86 73 1a 00 00    	jbe    1ad48 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3738>
   192d5:	89 d9                	mov    %ebx,%ecx
   192d7:	41 89 df             	mov    %ebx,%r15d
   192da:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
   192df:	f3 0f 7e 0c 08       	movq   (%rax,%rcx,1),%xmm1
   192e4:	49 01 fc             	add    %rdi,%r12
   192e7:	f3 41 0f 7e 04 0c    	movq   (%r12,%rcx,1),%xmm0
   192ed:	66 0f fc c1          	paddb  %xmm1,%xmm0
   192f1:	66 0f d6 04 0f       	movq   %xmm0,(%rdi,%rcx,1)
   192f6:	44 89 d9             	mov    %r11d,%ecx
   192f9:	83 e1 f8             	and    $0xfffffff8,%ecx
   192fc:	44 01 f9             	add    %r15d,%ecx
   192ff:	41 83 e3 07          	and    $0x7,%r11d
   19303:	0f 84 df 00 00 00    	je     193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   19309:	41 89 cb             	mov    %ecx,%r11d
   1930c:	4c 63 e1             	movslq %ecx,%r12
   1930f:	45 29 f3             	sub    %r14d,%r11d
   19312:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   19317:	4d 63 db             	movslq %r11d,%r11
   1931a:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   1931e:	44 8d 59 01          	lea    0x1(%rcx),%r11d
   19322:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   19326:	45 39 d9             	cmp    %r11d,%r9d
   19329:	0f 8e b9 00 00 00    	jle    193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   1932f:	4d 63 e3             	movslq %r11d,%r12
   19332:	45 29 f3             	sub    %r14d,%r11d
   19335:	4d 63 db             	movslq %r11d,%r11
   19338:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   1933d:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   19341:	44 8d 59 02          	lea    0x2(%rcx),%r11d
   19345:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   19349:	45 39 d9             	cmp    %r11d,%r9d
   1934c:	0f 8e 96 00 00 00    	jle    193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   19352:	4d 63 e3             	movslq %r11d,%r12
   19355:	45 29 f3             	sub    %r14d,%r11d
   19358:	4d 63 db             	movslq %r11d,%r11
   1935b:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   19360:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   19364:	44 8d 59 03          	lea    0x3(%rcx),%r11d
   19368:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   1936c:	45 39 d9             	cmp    %r11d,%r9d
   1936f:	7e 77                	jle    193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   19371:	4d 63 e3             	movslq %r11d,%r12
   19374:	45 29 f3             	sub    %r14d,%r11d
   19377:	4d 63 db             	movslq %r11d,%r11
   1937a:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   1937f:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   19383:	44 8d 59 04          	lea    0x4(%rcx),%r11d
   19387:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   1938b:	45 39 d9             	cmp    %r11d,%r9d
   1938e:	7e 58                	jle    193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   19390:	4d 63 e3             	movslq %r11d,%r12
   19393:	45 29 f3             	sub    %r14d,%r11d
   19396:	4d 63 db             	movslq %r11d,%r11
   19399:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   1939e:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   193a2:	44 8d 59 05          	lea    0x5(%rcx),%r11d
   193a6:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   193aa:	45 39 d9             	cmp    %r11d,%r9d
   193ad:	7e 39                	jle    193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   193af:	4d 63 e3             	movslq %r11d,%r12
   193b2:	45 29 f3             	sub    %r14d,%r11d
   193b5:	83 c1 06             	add    $0x6,%ecx
   193b8:	4d 63 db             	movslq %r11d,%r11
   193bb:	46 0f b6 3c 20       	movzbl (%rax,%r12,1),%r15d
   193c0:	46 02 3c 1f          	add    (%rdi,%r11,1),%r15b
   193c4:	46 88 3c 27          	mov    %r15b,(%rdi,%r12,1)
   193c8:	41 39 c9             	cmp    %ecx,%r9d
   193cb:	7e 1b                	jle    193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   193cd:	4c 63 d9             	movslq %ecx,%r11
   193d0:	44 29 f1             	sub    %r14d,%ecx
   193d3:	48 63 c9             	movslq %ecx,%rcx
   193d6:	46 0f b6 24 18       	movzbl (%rax,%r11,1),%r12d
   193db:	44 02 24 0f          	add    (%rdi,%rcx,1),%r12b
   193df:	46 88 24 1f          	mov    %r12b,(%rdi,%r11,1)
   193e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   193e8:	c6 04 17 ff          	movb   $0xff,(%rdi,%rdx,1)
   193ec:	48 01 d0             	add    %rdx,%rax
   193ef:	83 ee 01             	sub    $0x1,%esi
   193f2:	0f 85 58 fe ff ff    	jne    19250 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1c40>
   193f8:	8b 84 24 c4 00 00 00 	mov    0xc4(%rsp),%eax
   193ff:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   19404:	48 0f af c2          	imul   %rdx,%rax
   19408:	48 01 44 24 50       	add    %rax,0x50(%rsp)
         if (depth == 16) {
   1940d:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   19414:	10 
   19415:	0f 85 7a e6 ff ff    	jne    17a95 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x485>
   1941b:	e9 8a e8 ff ff       	jmp    17caa <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x69a>
            STBI__CASE(STBI__F_avg_first)    { cur[k] = STBI__BYTECAST(raw[k] + (cur[k-filter_bytes] >> 1)); } break;
   19420:	45 85 ff             	test   %r15d,%r15d
   19423:	0f 8e 67 e6 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19429:	41 8d 47 ff          	lea    -0x1(%r15),%eax
   1942d:	83 f8 0e             	cmp    $0xe,%eax
   19430:	0f 86 fa 13 00 00    	jbe    1a830 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3220>
   19436:	8b 54 24 58          	mov    0x58(%rsp),%edx
   1943a:	f7 da                	neg    %edx
   1943c:	48 63 d2             	movslq %edx,%rdx
   1943f:	48 89 d0             	mov    %rdx,%rax
   19442:	48 f7 d0             	not    %rax
   19445:	48 83 f8 0e          	cmp    $0xe,%rax
   19449:	0f 86 e1 13 00 00    	jbe    1a830 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3220>
   1944f:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   19454:	48 89 f8             	mov    %rdi,%rax
   19457:	48 8d 4e 01          	lea    0x1(%rsi),%rcx
   1945b:	48 29 c8             	sub    %rcx,%rax
   1945e:	48 83 f8 0e          	cmp    $0xe,%rax
   19462:	0f 86 c8 13 00 00    	jbe    1a830 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3220>
   19468:	44 89 f9             	mov    %r15d,%ecx
   1946b:	66 0f 6f 1d fd f4 01 	movdqa 0x1f4fd(%rip),%xmm3        # 38970 <_ZL11stbi__bmask+0x1f0>
   19472:	00 
   19473:	48 01 fa             	add    %rdi,%rdx
   19476:	31 c0                	xor    %eax,%eax
   19478:	c1 e9 04             	shr    $0x4,%ecx
   1947b:	48 c1 e1 04          	shl    $0x4,%rcx
   1947f:	90                   	nop
   19480:	f3 0f 6f 04 02       	movdqu (%rdx,%rax,1),%xmm0
   19485:	f3 0f 6f 2c 06       	movdqu (%rsi,%rax,1),%xmm5
   1948a:	66 0f 71 d0 01       	psrlw  $0x1,%xmm0
   1948f:	66 0f db c3          	pand   %xmm3,%xmm0
   19493:	66 0f fc c5          	paddb  %xmm5,%xmm0
   19497:	0f 11 04 07          	movups %xmm0,(%rdi,%rax,1)
   1949b:	48 83 c0 10          	add    $0x10,%rax
   1949f:	48 39 c1             	cmp    %rax,%rcx
   194a2:	75 dc                	jne    19480 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1e70>
   194a4:	44 89 f9             	mov    %r15d,%ecx
   194a7:	83 e1 f0             	and    $0xfffffff0,%ecx
   194aa:	41 f6 c7 0f          	test   $0xf,%r15b
   194ae:	0f 84 dc e5 ff ff    	je     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   194b4:	8b 5c 24 58          	mov    0x58(%rsp),%ebx
   194b8:	89 c8                	mov    %ecx,%eax
   194ba:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   194bf:	89 ca                	mov    %ecx,%edx
   194c1:	29 d8                	sub    %ebx,%eax
   194c3:	48 98                	cltq
   194c5:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   194c9:	d0 e8                	shr    %al
   194cb:	02 04 16             	add    (%rsi,%rdx,1),%al
   194ce:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   194d1:	8d 41 01             	lea    0x1(%rcx),%eax
   194d4:	41 39 c7             	cmp    %eax,%r15d
   194d7:	0f 8e b3 e5 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   194dd:	48 63 d0             	movslq %eax,%rdx
   194e0:	29 d8                	sub    %ebx,%eax
   194e2:	48 98                	cltq
   194e4:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   194e8:	d0 e8                	shr    %al
   194ea:	02 04 16             	add    (%rsi,%rdx,1),%al
   194ed:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   194f0:	8d 41 02             	lea    0x2(%rcx),%eax
   194f3:	41 39 c7             	cmp    %eax,%r15d
   194f6:	0f 8e 94 e5 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   194fc:	48 63 d0             	movslq %eax,%rdx
   194ff:	29 d8                	sub    %ebx,%eax
   19501:	48 98                	cltq
   19503:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   19507:	d0 e8                	shr    %al
   19509:	02 04 16             	add    (%rsi,%rdx,1),%al
   1950c:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   1950f:	8d 41 03             	lea    0x3(%rcx),%eax
   19512:	41 39 c7             	cmp    %eax,%r15d
   19515:	0f 8e 75 e5 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1951b:	48 63 d0             	movslq %eax,%rdx
   1951e:	29 d8                	sub    %ebx,%eax
   19520:	48 98                	cltq
   19522:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   19526:	d0 e8                	shr    %al
   19528:	02 04 16             	add    (%rsi,%rdx,1),%al
   1952b:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   1952e:	8d 41 04             	lea    0x4(%rcx),%eax
   19531:	41 39 c7             	cmp    %eax,%r15d
   19534:	0f 8e 56 e5 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1953a:	48 63 d0             	movslq %eax,%rdx
   1953d:	29 d8                	sub    %ebx,%eax
   1953f:	48 98                	cltq
   19541:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   19545:	d0 e8                	shr    %al
   19547:	02 04 16             	add    (%rsi,%rdx,1),%al
   1954a:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   1954d:	8d 41 05             	lea    0x5(%rcx),%eax
   19550:	41 39 c7             	cmp    %eax,%r15d
   19553:	0f 8e 37 e5 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19559:	48 63 d0             	movslq %eax,%rdx
   1955c:	29 d8                	sub    %ebx,%eax
   1955e:	48 98                	cltq
   19560:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   19564:	d0 e8                	shr    %al
   19566:	02 04 16             	add    (%rsi,%rdx,1),%al
   19569:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   1956c:	8d 41 06             	lea    0x6(%rcx),%eax
   1956f:	44 39 f8             	cmp    %r15d,%eax
   19572:	0f 8d 18 e5 ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19578:	48 63 d0             	movslq %eax,%rdx
   1957b:	29 d8                	sub    %ebx,%eax
   1957d:	48 98                	cltq
   1957f:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   19583:	d0 e8                	shr    %al
   19585:	02 04 16             	add    (%rsi,%rdx,1),%al
   19588:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   1958b:	8d 41 07             	lea    0x7(%rcx),%eax
   1958e:	41 39 c7             	cmp    %eax,%r15d
   19591:	0f 8e f9 e4 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19597:	48 63 d0             	movslq %eax,%rdx
   1959a:	29 d8                	sub    %ebx,%eax
   1959c:	48 98                	cltq
   1959e:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   195a2:	d0 e8                	shr    %al
   195a4:	02 04 16             	add    (%rsi,%rdx,1),%al
   195a7:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   195aa:	8d 41 08             	lea    0x8(%rcx),%eax
   195ad:	41 39 c7             	cmp    %eax,%r15d
   195b0:	0f 8e da e4 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   195b6:	48 63 d0             	movslq %eax,%rdx
   195b9:	29 d8                	sub    %ebx,%eax
   195bb:	48 98                	cltq
   195bd:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   195c1:	d0 e8                	shr    %al
   195c3:	02 04 16             	add    (%rsi,%rdx,1),%al
   195c6:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   195c9:	8d 41 09             	lea    0x9(%rcx),%eax
   195cc:	41 39 c7             	cmp    %eax,%r15d
   195cf:	0f 8e bb e4 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   195d5:	48 63 d0             	movslq %eax,%rdx
   195d8:	29 d8                	sub    %ebx,%eax
   195da:	48 98                	cltq
   195dc:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   195e0:	d0 e8                	shr    %al
   195e2:	02 04 16             	add    (%rsi,%rdx,1),%al
   195e5:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   195e8:	8d 41 0a             	lea    0xa(%rcx),%eax
   195eb:	41 39 c7             	cmp    %eax,%r15d
   195ee:	0f 8e 9c e4 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   195f4:	48 63 d0             	movslq %eax,%rdx
   195f7:	29 d8                	sub    %ebx,%eax
   195f9:	48 98                	cltq
   195fb:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   195ff:	d0 e8                	shr    %al
   19601:	02 04 16             	add    (%rsi,%rdx,1),%al
   19604:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   19607:	8d 41 0b             	lea    0xb(%rcx),%eax
   1960a:	41 39 c7             	cmp    %eax,%r15d
   1960d:	0f 8e 7d e4 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19613:	48 63 d0             	movslq %eax,%rdx
   19616:	29 d8                	sub    %ebx,%eax
   19618:	48 98                	cltq
   1961a:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1961e:	d0 e8                	shr    %al
   19620:	02 04 16             	add    (%rsi,%rdx,1),%al
   19623:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   19626:	8d 41 0c             	lea    0xc(%rcx),%eax
   19629:	41 39 c7             	cmp    %eax,%r15d
   1962c:	0f 8e 5e e4 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19632:	48 63 d0             	movslq %eax,%rdx
   19635:	29 d8                	sub    %ebx,%eax
   19637:	48 98                	cltq
   19639:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1963d:	d0 e8                	shr    %al
   1963f:	02 04 16             	add    (%rsi,%rdx,1),%al
   19642:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   19645:	8d 41 0d             	lea    0xd(%rcx),%eax
   19648:	41 39 c7             	cmp    %eax,%r15d
   1964b:	0f 8e 3f e4 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19651:	48 63 d0             	movslq %eax,%rdx
   19654:	29 d8                	sub    %ebx,%eax
   19656:	48 98                	cltq
   19658:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1965c:	d0 e8                	shr    %al
   1965e:	02 04 16             	add    (%rsi,%rdx,1),%al
   19661:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   19664:	8d 41 0e             	lea    0xe(%rcx),%eax
   19667:	41 39 c7             	cmp    %eax,%r15d
   1966a:	0f 8e 20 e4 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19670:	48 63 d0             	movslq %eax,%rdx
   19673:	29 d8                	sub    %ebx,%eax
   19675:	48 98                	cltq
   19677:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
   1967b:	d0 e8                	shr    %al
   1967d:	02 04 16             	add    (%rsi,%rdx,1),%al
   19680:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   19683:	e9 08 e4 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1968f:	00 
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19690:	45 85 ff             	test   %r15d,%r15d
   19693:	0f 8e f7 e3 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19699:	41 8d 57 ff          	lea    -0x1(%r15),%edx
   1969d:	83 fa 0e             	cmp    $0xe,%edx
   196a0:	0f 86 da 10 00 00    	jbe    1a780 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3170>
   196a6:	8b 54 24 58          	mov    0x58(%rsp),%edx
   196aa:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
   196af:	48 89 fe             	mov    %rdi,%rsi
   196b2:	f7 da                	neg    %edx
   196b4:	4c 8d 4b 01          	lea    0x1(%rbx),%r9
   196b8:	48 63 d2             	movslq %edx,%rdx
   196bb:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   196bf:	4c 8d 04 08          	lea    (%rax,%rcx,1),%r8
   196c3:	4c 29 c6             	sub    %r8,%rsi
   196c6:	49 89 f8             	mov    %rdi,%r8
   196c9:	48 83 fe 0e          	cmp    $0xe,%rsi
   196cd:	40 0f 97 c6          	seta   %sil
   196d1:	4d 29 c8             	sub    %r9,%r8
   196d4:	49 83 f8 0e          	cmp    $0xe,%r8
   196d8:	41 0f 97 c0          	seta   %r8b
   196dc:	48 f7 d9             	neg    %rcx
   196df:	41 21 f0             	and    %esi,%r8d
   196e2:	48 83 f9 0e          	cmp    $0xe,%rcx
   196e6:	0f 97 c1             	seta   %cl
   196e9:	41 84 c8             	test   %cl,%r8b
   196ec:	0f 84 8e 10 00 00    	je     1a780 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3170>
   196f2:	48 8d 70 01          	lea    0x1(%rax),%rsi
   196f6:	48 89 f9             	mov    %rdi,%rcx
   196f9:	48 29 f1             	sub    %rsi,%rcx
   196fc:	48 83 f9 0e          	cmp    $0xe,%rcx
   19700:	0f 86 7a 10 00 00    	jbe    1a780 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3170>
   19706:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   1970a:	4c 8d 04 17          	lea    (%rdi,%rdx,1),%r8
   1970e:	44 89 fa             	mov    %r15d,%edx
   if (pb <= pc) return b;
   19711:	49 89 d9             	mov    %rbx,%r9
   19714:	c1 ea 04             	shr    $0x4,%edx
   19717:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
   1971c:	4d 89 c3             	mov    %r8,%r11
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   1971f:	66 45 0f ef f6       	pxor   %xmm14,%xmm14
   19724:	48 c1 e2 04          	shl    $0x4,%rdx
   19728:	66 0f 6f 25 e0 f0 01 	movdqa 0x1f0e0(%rip),%xmm4        # 38810 <_ZL11stbi__bmask+0x90>
   1972f:	00 
   if (pb <= pc) return b;
   19730:	66 45 0f ef ed       	pxor   %xmm13,%xmm13
   19735:	48 89 d1             	mov    %rdx,%rcx
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19738:	31 d2                	xor    %edx,%edx
   1973a:	f3 0f 6f 04 16       	movdqu (%rsi,%rdx,1),%xmm0
   1973f:	66 0f ef ed          	pxor   %xmm5,%xmm5
   19743:	f3 0f 6f 0c 16       	movdqu (%rsi,%rdx,1),%xmm1
   19748:	f3 45 0f 6f 04 10    	movdqu (%r8,%rdx,1),%xmm8
   1974e:	66 0f 6f dd          	movdqa %xmm5,%xmm3
   19752:	f3 41 0f 6f 3c 10    	movdqu (%r8,%rdx,1),%xmm7
   19758:	66 0f 68 c5          	punpckhbw %xmm5,%xmm0
   1975c:	66 0f 60 cd          	punpcklbw %xmm5,%xmm1
   19760:	66 0f 6f f0          	movdqa %xmm0,%xmm6
   19764:	66 44 0f 60 c3       	punpcklbw %xmm3,%xmm8
   19769:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1976d:	66 41 0f 69 f6       	punpckhwd %xmm14,%xmm6
   19772:	66 45 0f 6f f8       	movdqa %xmm8,%xmm15
   19777:	66 0f 68 fb          	punpckhbw %xmm3,%xmm7
   1977b:	0f 29 74 24 30       	movaps %xmm6,0x30(%rsp)
   19780:	f3 0f 6f 34 10       	movdqu (%rax,%rdx,1),%xmm6
   19785:	66 45 0f 61 fe       	punpcklwd %xmm14,%xmm15
   1978a:	66 41 0f 61 d6       	punpcklwd %xmm14,%xmm2
   int p = a + b - c;
   1978f:	0f 29 14 24          	movaps %xmm2,(%rsp)
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19793:	66 44 0f 6f c8       	movdqa %xmm0,%xmm9
   19798:	66 45 0f 69 c6       	punpckhwd %xmm14,%xmm8
   1979d:	66 41 0f 69 ce       	punpckhwd %xmm14,%xmm1
   197a2:	66 0f 60 f5          	punpcklbw %xmm5,%xmm6
   197a6:	f3 0f 6f 2c 10       	movdqu (%rax,%rdx,1),%xmm5
   197ab:	66 45 0f 61 ce       	punpcklwd %xmm14,%xmm9
   int p = a + b - c;
   197b0:	66 41 0f 6f d0       	movdqa %xmm8,%xmm2
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   197b5:	66 44 0f 6f de       	movdqa %xmm6,%xmm11
   int p = a + b - c;
   197ba:	44 0f 29 4c 24 20    	movaps %xmm9,0x20(%rsp)
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   197c0:	66 41 0f 69 f6       	punpckhwd %xmm14,%xmm6
   197c5:	66 44 0f 6f e7       	movdqa %xmm7,%xmm12
   197ca:	66 0f 68 eb          	punpckhbw %xmm3,%xmm5
   197ce:	66 45 0f 61 de       	punpcklwd %xmm14,%xmm11
   int p = a + b - c;
   197d3:	66 41 0f 6f df       	movdqa %xmm15,%xmm3
   197d8:	0f 29 4c 24 10       	movaps %xmm1,0x10(%rsp)
   197dd:	66 41 0f fe db       	paddd  %xmm11,%xmm3
   197e2:	66 0f fa 1c 24       	psubd  (%rsp),%xmm3
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   197e7:	66 45 0f 61 e6       	punpcklwd %xmm14,%xmm12
   int p = a + b - c;
   197ec:	66 0f fe d6          	paddd  %xmm6,%xmm2
   197f0:	66 0f fa 54 24 10    	psubd  0x10(%rsp),%xmm2
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   197f6:	66 44 0f 6f d5       	movdqa %xmm5,%xmm10
   int pa = abs(p-a);
   197fb:	66 44 0f 6f cb       	movdqa %xmm3,%xmm9
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19800:	66 45 0f 61 d6       	punpcklwd %xmm14,%xmm10
   int p = a + b - c;
   19805:	66 41 0f 6f cc       	movdqa %xmm12,%xmm1
   int pa = abs(p-a);
   1980a:	66 45 0f fa cf       	psubd  %xmm15,%xmm9
   int p = a + b - c;
   1980f:	66 41 0f fe ca       	paddd  %xmm10,%xmm1
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19814:	66 41 0f 69 fe       	punpckhwd %xmm14,%xmm7
   int pa = abs(p-a);
   19819:	66 45 0f 6f f9       	movdqa %xmm9,%xmm15
   int p = a + b - c;
   1981e:	66 0f fa 4c 24 20    	psubd  0x20(%rsp),%xmm1
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19824:	66 41 0f 69 ee       	punpckhwd %xmm14,%xmm5
   int pa = abs(p-a);
   19829:	66 41 0f 72 e7 1f    	psrad  $0x1f,%xmm15
   int p = a + b - c;
   1982f:	66 0f 6f c7          	movdqa %xmm7,%xmm0
   int pa = abs(p-a);
   19833:	66 45 0f ef cf       	pxor   %xmm15,%xmm9
   int p = a + b - c;
   19838:	66 0f fe c5          	paddd  %xmm5,%xmm0
   1983c:	66 0f fa 44 24 30    	psubd  0x30(%rsp),%xmm0
   int pa = abs(p-a);
   19842:	66 45 0f fa cf       	psubd  %xmm15,%xmm9
   19847:	66 44 0f 6f fa       	movdqa %xmm2,%xmm15
   1984c:	66 45 0f fa f8       	psubd  %xmm8,%xmm15
   19851:	44 0f 29 4c 24 60    	movaps %xmm9,0x60(%rsp)
   19857:	66 45 0f 6f c7       	movdqa %xmm15,%xmm8
   1985c:	66 45 0f 6f cf       	movdqa %xmm15,%xmm9
   19861:	66 41 0f 72 e0 1f    	psrad  $0x1f,%xmm8
   19867:	66 45 0f ef c8       	pxor   %xmm8,%xmm9
   1986c:	66 45 0f 6f f9       	movdqa %xmm9,%xmm15
   19871:	66 45 0f fa f8       	psubd  %xmm8,%xmm15
   19876:	66 44 0f 6f c1       	movdqa %xmm1,%xmm8
   1987b:	66 45 0f fa c4       	psubd  %xmm12,%xmm8
   19880:	44 0f 29 7c 24 70    	movaps %xmm15,0x70(%rsp)
   19886:	66 45 0f 6f e0       	movdqa %xmm8,%xmm12
   1988b:	66 41 0f 72 e4 1f    	psrad  $0x1f,%xmm12
   19891:	66 45 0f ef c4       	pxor   %xmm12,%xmm8
   19896:	66 45 0f 6f cc       	movdqa %xmm12,%xmm9
   1989b:	66 45 0f 6f e0       	movdqa %xmm8,%xmm12
   198a0:	66 44 0f 6f c0       	movdqa %xmm0,%xmm8
   198a5:	66 44 0f fa c7       	psubd  %xmm7,%xmm8
   198aa:	66 45 0f fa e1       	psubd  %xmm9,%xmm12
   198af:	66 41 0f 6f f8       	movdqa %xmm8,%xmm7
   198b4:	66 0f 72 e7 1f       	psrad  $0x1f,%xmm7
   198b9:	66 44 0f ef c7       	pxor   %xmm7,%xmm8
   198be:	66 44 0f fa c7       	psubd  %xmm7,%xmm8
   int pb = abs(p-b);
   198c3:	66 0f 6f fb          	movdqa %xmm3,%xmm7
   int pc = abs(p-c);
   198c7:	66 0f fa 1c 24       	psubd  (%rsp),%xmm3
   int pb = abs(p-b);
   198cc:	66 41 0f fa fb       	psubd  %xmm11,%xmm7
   int pa = abs(p-a);
   198d1:	66 45 0f 6f f8       	movdqa %xmm8,%xmm15
   int pb = abs(p-b);
   198d6:	66 44 0f 6f c7       	movdqa %xmm7,%xmm8
   198db:	66 41 0f 72 e0 1f    	psrad  $0x1f,%xmm8
   198e1:	66 41 0f ef f8       	pxor   %xmm8,%xmm7
   198e6:	66 41 0f fa f8       	psubd  %xmm8,%xmm7
   198eb:	66 44 0f 6f c2       	movdqa %xmm2,%xmm8
   int pc = abs(p-c);
   198f0:	66 0f fa 54 24 10    	psubd  0x10(%rsp),%xmm2
   int pb = abs(p-b);
   198f6:	66 44 0f fa c6       	psubd  %xmm6,%xmm8
   198fb:	66 41 0f 6f f0       	movdqa %xmm8,%xmm6
   19900:	66 0f 72 e6 1f       	psrad  $0x1f,%xmm6
   19905:	66 44 0f ef c6       	pxor   %xmm6,%xmm8
   1990a:	66 44 0f fa c6       	psubd  %xmm6,%xmm8
   1990f:	66 0f 6f f1          	movdqa %xmm1,%xmm6
   int pc = abs(p-c);
   19913:	66 0f fa 4c 24 20    	psubd  0x20(%rsp),%xmm1
   int pb = abs(p-b);
   19919:	66 41 0f fa f2       	psubd  %xmm10,%xmm6
   1991e:	66 44 0f 6f de       	movdqa %xmm6,%xmm11
   19923:	66 41 0f 72 e3 1f    	psrad  $0x1f,%xmm11
   19929:	66 41 0f ef f3       	pxor   %xmm11,%xmm6
   1992e:	66 41 0f fa f3       	psubd  %xmm11,%xmm6
   19933:	66 44 0f 6f d8       	movdqa %xmm0,%xmm11
   int pc = abs(p-c);
   19938:	66 0f fa 44 24 30    	psubd  0x30(%rsp),%xmm0
   int pb = abs(p-b);
   1993e:	66 44 0f fa dd       	psubd  %xmm5,%xmm11
   19943:	66 41 0f 6f eb       	movdqa %xmm11,%xmm5
   19948:	66 45 0f 6f cb       	movdqa %xmm11,%xmm9
   1994d:	66 0f 72 e5 1f       	psrad  $0x1f,%xmm5
   19952:	66 44 0f ef cd       	pxor   %xmm5,%xmm9
   19957:	66 44 0f fa cd       	psubd  %xmm5,%xmm9
   int pc = abs(p-c);
   1995c:	66 0f 6f eb          	movdqa %xmm3,%xmm5
   19960:	66 0f 72 e5 1f       	psrad  $0x1f,%xmm5
   19965:	66 0f ef dd          	pxor   %xmm5,%xmm3
   19969:	66 0f fa dd          	psubd  %xmm5,%xmm3
   1996d:	66 0f 6f ea          	movdqa %xmm2,%xmm5
   19971:	66 0f 72 e5 1f       	psrad  $0x1f,%xmm5
   19976:	66 0f ef d5          	pxor   %xmm5,%xmm2
   1997a:	66 0f fa d5          	psubd  %xmm5,%xmm2
   1997e:	66 0f 6f e9          	movdqa %xmm1,%xmm5
   19982:	66 0f 72 e5 1f       	psrad  $0x1f,%xmm5
   19987:	66 0f ef cd          	pxor   %xmm5,%xmm1
   1998b:	66 0f fa cd          	psubd  %xmm5,%xmm1
   1998f:	66 0f 6f e8          	movdqa %xmm0,%xmm5
   19993:	66 0f 72 e5 1f       	psrad  $0x1f,%xmm5
   19998:	66 0f ef c5          	pxor   %xmm5,%xmm0
   1999c:	66 0f fa c5          	psubd  %xmm5,%xmm0
   if (pa <= pb && pa <= pc) return a;
   199a0:	66 0f 6f ef          	movdqa %xmm7,%xmm5
   199a4:	66 0f 66 eb          	pcmpgtd %xmm3,%xmm5
   199a8:	66 44 0f 6f d5       	movdqa %xmm5,%xmm10
   199ad:	66 0f db dd          	pand   %xmm5,%xmm3
   199b1:	66 44 0f df d7       	pandn  %xmm7,%xmm10
   199b6:	66 41 0f eb da       	por    %xmm10,%xmm3
   199bb:	66 45 0f 6f d0       	movdqa %xmm8,%xmm10
   199c0:	66 44 0f 66 d2       	pcmpgtd %xmm2,%xmm10
   199c5:	66 41 0f 6f fa       	movdqa %xmm10,%xmm7
   199ca:	66 41 0f db d2       	pand   %xmm10,%xmm2
   199cf:	66 41 0f df f8       	pandn  %xmm8,%xmm7
   199d4:	66 0f eb d7          	por    %xmm7,%xmm2
   199d8:	66 0f 6f fe          	movdqa %xmm6,%xmm7
   199dc:	66 0f 66 f9          	pcmpgtd %xmm1,%xmm7
   199e0:	66 44 0f 6f c7       	movdqa %xmm7,%xmm8
   199e5:	66 0f db cf          	pand   %xmm7,%xmm1
   199e9:	66 44 0f df c6       	pandn  %xmm6,%xmm8
   199ee:	66 41 0f 6f f1       	movdqa %xmm9,%xmm6
   199f3:	66 0f 66 f0          	pcmpgtd %xmm0,%xmm6
   199f7:	66 41 0f eb c8       	por    %xmm8,%xmm1
   199fc:	66 44 0f 6f c6       	movdqa %xmm6,%xmm8
   19a01:	66 0f db c6          	pand   %xmm6,%xmm0
   if (pb <= pc) return b;
   19a05:	66 44 0f 6f de       	movdqa %xmm6,%xmm11
   19a0a:	66 45 0f df c1       	pandn  %xmm9,%xmm8
   19a0f:	66 45 0f 76 dd       	pcmpeqd %xmm13,%xmm11
   19a14:	66 44 0f eb c0       	por    %xmm0,%xmm8
   if (pa <= pb && pa <= pc) return a;
   19a19:	66 0f 6f 44 24 60    	movdqa 0x60(%rsp),%xmm0
   19a1f:	66 45 0f 66 f8       	pcmpgtd %xmm8,%xmm15
   if (pb <= pc) return b;
   19a24:	66 44 0f 6f c7       	movdqa %xmm7,%xmm8
   if (pa <= pb && pa <= pc) return a;
   19a29:	66 0f 66 c3          	pcmpgtd %xmm3,%xmm0
   19a2d:	66 0f 6f 5c 24 70    	movdqa 0x70(%rsp),%xmm3
   if (pb <= pc) return b;
   19a33:	66 45 0f 76 c5       	pcmpeqd %xmm13,%xmm8
   if (pa <= pb && pa <= pc) return a;
   19a38:	66 0f 66 da          	pcmpgtd %xmm2,%xmm3
   19a3c:	66 41 0f 6f d4       	movdqa %xmm12,%xmm2
   if (pb <= pc) return b;
   19a41:	66 45 0f 6f e2       	movdqa %xmm10,%xmm12
   if (pa <= pb && pa <= pc) return a;
   19a46:	66 0f 66 d1          	pcmpgtd %xmm1,%xmm2
   if (pb <= pc) return b;
   19a4a:	66 0f 6f cd          	movdqa %xmm5,%xmm1
   19a4e:	66 0f db e8          	pand   %xmm0,%xmm5
   19a52:	66 41 0f 76 cd       	pcmpeqd %xmm13,%xmm1
   19a57:	66 45 0f 76 e5       	pcmpeqd %xmm13,%xmm12
   if (pa <= pb && pa <= pc) return a;
   19a5c:	66 45 0f 6f cf       	movdqa %xmm15,%xmm9
   19a61:	66 44 0f db d3       	pand   %xmm3,%xmm10
   19a66:	66 45 0f 76 cd       	pcmpeqd %xmm13,%xmm9
   19a6b:	66 45 0f db df       	pand   %xmm15,%xmm11
   19a70:	66 44 0f db c2       	pand   %xmm2,%xmm8
   19a75:	66 0f db fa          	pand   %xmm2,%xmm7
   19a79:	66 41 0f db f7       	pand   %xmm15,%xmm6
   19a7e:	66 0f db c8          	pand   %xmm0,%xmm1
   19a82:	66 41 0f 76 c5       	pcmpeqd %xmm13,%xmm0
   19a87:	66 44 0f db e3       	pand   %xmm3,%xmm12
   19a8c:	66 41 0f 76 dd       	pcmpeqd %xmm13,%xmm3
   19a91:	66 41 0f 76 d5       	pcmpeqd %xmm13,%xmm2
   19a96:	66 44 0f 6f f8       	movdqa %xmm0,%xmm15
   19a9b:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   19a9f:	66 44 0f 69 fb       	punpckhwd %xmm3,%xmm15
   19aa4:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   19aa8:	66 41 0f 61 c7       	punpcklwd %xmm15,%xmm0
   19aad:	66 41 0f 69 df       	punpckhwd %xmm15,%xmm3
   19ab2:	66 0f 61 c3          	punpcklwd %xmm3,%xmm0
   19ab6:	66 0f 6f da          	movdqa %xmm2,%xmm3
   19aba:	66 41 0f 61 d1       	punpcklwd %xmm9,%xmm2
   19abf:	66 41 0f 69 d9       	punpckhwd %xmm9,%xmm3
   19ac4:	66 44 0f 6f ca       	movdqa %xmm2,%xmm9
   19ac9:	66 0f db c4          	pand   %xmm4,%xmm0
   19acd:	66 44 0f 69 cb       	punpckhwd %xmm3,%xmm9
   19ad2:	66 0f 61 d3          	punpcklwd %xmm3,%xmm2
   19ad6:	f3 0f 6f 1c 16       	movdqu (%rsi,%rdx,1),%xmm3
   19adb:	66 41 0f 61 d1       	punpcklwd %xmm9,%xmm2
   19ae0:	66 0f db d4          	pand   %xmm4,%xmm2
   19ae4:	66 0f 67 c2          	packuswb %xmm2,%xmm0
   19ae8:	f3 41 0f 6f 14 10    	movdqu (%r8,%rdx,1),%xmm2
   19aee:	66 0f db d0          	pand   %xmm0,%xmm2
   19af2:	66 0f df c3          	pandn  %xmm3,%xmm0
   19af6:	66 0f eb c2          	por    %xmm2,%xmm0
   19afa:	66 0f 6f d5          	movdqa %xmm5,%xmm2
   19afe:	66 41 0f 61 ea       	punpcklwd %xmm10,%xmm5
   19b03:	66 41 0f 69 d2       	punpckhwd %xmm10,%xmm2
   19b08:	66 0f 6f dd          	movdqa %xmm5,%xmm3
   19b0c:	66 0f 69 da          	punpckhwd %xmm2,%xmm3
   19b10:	66 0f 61 ea          	punpcklwd %xmm2,%xmm5
   19b14:	66 0f 6f d7          	movdqa %xmm7,%xmm2
   19b18:	66 0f 61 fe          	punpcklwd %xmm6,%xmm7
   19b1c:	66 0f 69 d6          	punpckhwd %xmm6,%xmm2
   19b20:	66 0f 61 eb          	punpcklwd %xmm3,%xmm5
   19b24:	66 0f 6f df          	movdqa %xmm7,%xmm3
   19b28:	66 0f 61 fa          	punpcklwd %xmm2,%xmm7
   19b2c:	66 0f db ec          	pand   %xmm4,%xmm5
   19b30:	66 0f 69 da          	punpckhwd %xmm2,%xmm3
   19b34:	f3 0f 6f 14 16       	movdqu (%rsi,%rdx,1),%xmm2
   19b39:	66 0f 61 fb          	punpcklwd %xmm3,%xmm7
   19b3d:	66 0f db fc          	pand   %xmm4,%xmm7
   19b41:	66 0f 67 ef          	packuswb %xmm7,%xmm5
   19b45:	66 0f db d5          	pand   %xmm5,%xmm2
   19b49:	66 0f df e8          	pandn  %xmm0,%xmm5
   19b4d:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   19b51:	66 41 0f 61 cc       	punpcklwd %xmm12,%xmm1
   19b56:	66 41 0f 69 c4       	punpckhwd %xmm12,%xmm0
   19b5b:	66 0f eb ea          	por    %xmm2,%xmm5
   19b5f:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   19b63:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
   19b67:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
   19b6b:	66 41 0f 6f c0       	movdqa %xmm8,%xmm0
   19b70:	66 45 0f 61 c3       	punpcklwd %xmm11,%xmm8
   19b75:	66 41 0f 69 c3       	punpckhwd %xmm11,%xmm0
   19b7a:	66 0f 61 ca          	punpcklwd %xmm2,%xmm1
   19b7e:	66 41 0f 6f d0       	movdqa %xmm8,%xmm2
   19b83:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
   19b87:	66 44 0f 61 c0       	punpcklwd %xmm0,%xmm8
   19b8c:	66 0f db cc          	pand   %xmm4,%xmm1
   19b90:	f3 0f 6f 04 10       	movdqu (%rax,%rdx,1),%xmm0
   19b95:	66 44 0f 61 c2       	punpcklwd %xmm2,%xmm8
   19b9a:	66 44 0f db c4       	pand   %xmm4,%xmm8
   19b9f:	66 41 0f 67 c8       	packuswb %xmm8,%xmm1
   19ba4:	66 0f db c1          	pand   %xmm1,%xmm0
   19ba8:	66 0f df cd          	pandn  %xmm5,%xmm1
   19bac:	66 0f eb c8          	por    %xmm0,%xmm1
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19bb0:	f3 41 0f 6f 04 11    	movdqu (%r9,%rdx,1),%xmm0
   19bb6:	66 0f fc c1          	paddb  %xmm1,%xmm0
   19bba:	0f 11 04 17          	movups %xmm0,(%rdi,%rdx,1)
   19bbe:	48 83 c2 10          	add    $0x10,%rdx
   19bc2:	48 39 d1             	cmp    %rdx,%rcx
   19bc5:	0f 85 6f fb ff ff    	jne    1973a <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x212a>
   19bcb:	44 89 f9             	mov    %r15d,%ecx
   19bce:	83 e1 f0             	and    $0xfffffff0,%ecx
   19bd1:	41 f6 c7 0f          	test   $0xf,%r15b
   19bd5:	0f 84 b5 de ff ff    	je     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19bdb:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
   19be0:	44 89 34 24          	mov    %r14d,(%rsp)
   19be4:	4d 89 de             	mov    %r11,%r14
   19be7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   19bee:	00 00 
   19bf0:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
   19bf5:	44 0f b6 0c 08       	movzbl (%rax,%rcx,1),%r9d
   19bfa:	45 0f b6 1c 0e       	movzbl (%r14,%rcx,1),%r11d
   19bff:	44 0f b6 2c 0b       	movzbl (%rbx,%rcx,1),%r13d
   19c04:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
   19c09:	45 89 cc             	mov    %r9d,%r12d
   int p = a + b - c;
   19c0c:	43 8d 14 19          	lea    (%r9,%r11,1),%edx
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19c10:	44 89 de             	mov    %r11d,%esi
   19c13:	44 0f b6 04 0b       	movzbl (%rbx,%rcx,1),%r8d
   int p = a + b - c;
   19c18:	44 29 c2             	sub    %r8d,%edx
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19c1b:	44 89 c3             	mov    %r8d,%ebx
   int pb = abs(p-b);
   19c1e:	41 89 d2             	mov    %edx,%r10d
   19c21:	45 29 ca             	sub    %r9d,%r10d
   19c24:	45 89 d1             	mov    %r10d,%r9d
   19c27:	41 f7 d9             	neg    %r9d
   19c2a:	45 0f 48 ca          	cmovs  %r10d,%r9d
   int pc = abs(p-c);
   19c2e:	41 89 d2             	mov    %edx,%r10d
   19c31:	45 29 c2             	sub    %r8d,%r10d
   19c34:	45 89 d0             	mov    %r10d,%r8d
   19c37:	41 f7 d8             	neg    %r8d
   19c3a:	45 0f 48 c2          	cmovs  %r10d,%r8d
   int pa = abs(p-a);
   19c3e:	44 29 da             	sub    %r11d,%edx
   19c41:	41 89 d2             	mov    %edx,%r10d
   19c44:	41 f7 da             	neg    %r10d
   19c47:	41 0f 49 d2          	cmovns %r10d,%edx
   if (pa <= pb && pa <= pc) return a;
   19c4b:	45 39 c1             	cmp    %r8d,%r9d
   19c4e:	45 89 c2             	mov    %r8d,%r10d
   19c51:	45 0f 4e d1          	cmovle %r9d,%r10d
   19c55:	44 39 d2             	cmp    %r10d,%edx
   19c58:	7e 09                	jle    19c63 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2653>
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   19c5a:	45 39 c1             	cmp    %r8d,%r9d
   19c5d:	41 0f 4e dc          	cmovle %r12d,%ebx
   19c61:	89 de                	mov    %ebx,%esi
   19c63:	44 01 ee             	add    %r13d,%esi
   19c66:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
   19c6a:	48 83 c1 01          	add    $0x1,%rcx
   19c6e:	41 39 cf             	cmp    %ecx,%r15d
   19c71:	0f 8f 79 ff ff ff    	jg     19bf0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x25e0>
   19c77:	44 8b 34 24          	mov    (%rsp),%r14d
   19c7b:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
   19c80:	e9 0b de ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
            STBI__CASE(STBI__F_avg)          { cur[k] = STBI__BYTECAST(raw[k] + ((prior[k] + cur[k-filter_bytes])>>1)); } break;
   19c85:	45 85 ff             	test   %r15d,%r15d
   19c88:	0f 8e 02 de ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19c8e:	41 8d 57 ff          	lea    -0x1(%r15),%edx
   19c92:	83 fa 0e             	cmp    $0xe,%edx
   19c95:	0f 86 7d 0a 00 00    	jbe    1a718 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3108>
   19c9b:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
   19ca0:	8b 54 24 58          	mov    0x58(%rsp),%edx
   19ca4:	48 89 f9             	mov    %rdi,%rcx
   19ca7:	4c 8d 40 01          	lea    0x1(%rax),%r8
   19cab:	48 8d 73 01          	lea    0x1(%rbx),%rsi
   19caf:	f7 da                	neg    %edx
   19cb1:	48 29 f1             	sub    %rsi,%rcx
   19cb4:	48 89 fe             	mov    %rdi,%rsi
   19cb7:	48 63 d2             	movslq %edx,%rdx
   19cba:	48 83 f9 0e          	cmp    $0xe,%rcx
   19cbe:	0f 97 c1             	seta   %cl
   19cc1:	4c 29 c6             	sub    %r8,%rsi
   19cc4:	48 83 fe 0e          	cmp    $0xe,%rsi
   19cc8:	40 0f 97 c6          	seta   %sil
   19ccc:	40 84 f1             	test   %sil,%cl
   19ccf:	0f 84 43 0a 00 00    	je     1a718 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3108>
   19cd5:	48 89 d1             	mov    %rdx,%rcx
   19cd8:	48 f7 d1             	not    %rcx
   19cdb:	48 83 f9 0e          	cmp    $0xe,%rcx
   19cdf:	0f 86 33 0a 00 00    	jbe    1a718 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3108>
   19ce5:	44 89 fe             	mov    %r15d,%esi
   19ce8:	66 0f 6f 25 70 ec 01 	movdqa 0x1ec70(%rip),%xmm4        # 38960 <_ZL11stbi__bmask+0x1e0>
   19cef:	00 
   19cf0:	48 01 fa             	add    %rdi,%rdx
   19cf3:	31 c9                	xor    %ecx,%ecx
   19cf5:	c1 ee 04             	shr    $0x4,%esi
   19cf8:	66 0f 6f 1d 70 ec 01 	movdqa 0x1ec70(%rip),%xmm3        # 38970 <_ZL11stbi__bmask+0x1f0>
   19cff:	00 
   19d00:	49 89 d8             	mov    %rbx,%r8
   19d03:	48 c1 e6 04          	shl    $0x4,%rsi
   19d07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   19d0e:	00 00 
   19d10:	f3 0f 6f 04 08       	movdqu (%rax,%rcx,1),%xmm0
   19d15:	f3 0f 6f 2c 0a       	movdqu (%rdx,%rcx,1),%xmm5
   19d1a:	f3 41 0f 6f 0c 08    	movdqu (%r8,%rcx,1),%xmm1
   19d20:	f3 0f 6f 14 0a       	movdqu (%rdx,%rcx,1),%xmm2
   19d25:	66 0f db c5          	pand   %xmm5,%xmm0
   19d29:	66 0f db c4          	pand   %xmm4,%xmm0
   19d2d:	66 0f 71 d2 01       	psrlw  $0x1,%xmm2
   19d32:	66 0f fc c8          	paddb  %xmm0,%xmm1
   19d36:	f3 0f 6f 04 08       	movdqu (%rax,%rcx,1),%xmm0
   19d3b:	66 0f db d3          	pand   %xmm3,%xmm2
   19d3f:	66 0f 71 d0 01       	psrlw  $0x1,%xmm0
   19d44:	66 0f db c3          	pand   %xmm3,%xmm0
   19d48:	66 0f fc c2          	paddb  %xmm2,%xmm0
   19d4c:	66 0f fc c1          	paddb  %xmm1,%xmm0
   19d50:	0f 11 04 0f          	movups %xmm0,(%rdi,%rcx,1)
   19d54:	48 83 c1 10          	add    $0x10,%rcx
   19d58:	48 39 ce             	cmp    %rcx,%rsi
   19d5b:	75 b3                	jne    19d10 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2700>
   19d5d:	45 89 f8             	mov    %r15d,%r8d
   19d60:	41 83 e0 f0          	and    $0xfffffff0,%r8d
   19d64:	41 f6 c7 0f          	test   $0xf,%r15b
   19d68:	0f 84 22 dd ff ff    	je     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19d6e:	8b 5c 24 58          	mov    0x58(%rsp),%ebx
   19d72:	44 89 c2             	mov    %r8d,%edx
   19d75:	44 89 c1             	mov    %r8d,%ecx
   19d78:	4c 8b 5c 24 50       	mov    0x50(%rsp),%r11
   19d7d:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19d81:	29 da                	sub    %ebx,%edx
   19d83:	48 63 d2             	movslq %edx,%rdx
   19d86:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19d8a:	01 f2                	add    %esi,%edx
   19d8c:	d1 fa                	sar    %edx
   19d8e:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19d92:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19d95:	41 8d 50 01          	lea    0x1(%r8),%edx
   19d99:	41 39 d7             	cmp    %edx,%r15d
   19d9c:	0f 8e ee dc ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19da2:	48 63 ca             	movslq %edx,%rcx
   19da5:	29 da                	sub    %ebx,%edx
   19da7:	48 63 d2             	movslq %edx,%rdx
   19daa:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19dae:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19db2:	01 f2                	add    %esi,%edx
   19db4:	d1 fa                	sar    %edx
   19db6:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19dba:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19dbd:	41 8d 50 02          	lea    0x2(%r8),%edx
   19dc1:	41 39 d7             	cmp    %edx,%r15d
   19dc4:	0f 8e c6 dc ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19dca:	48 63 ca             	movslq %edx,%rcx
   19dcd:	29 da                	sub    %ebx,%edx
   19dcf:	48 63 d2             	movslq %edx,%rdx
   19dd2:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19dd6:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19dda:	01 f2                	add    %esi,%edx
   19ddc:	d1 fa                	sar    %edx
   19dde:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19de2:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19de5:	41 8d 50 03          	lea    0x3(%r8),%edx
   19de9:	41 39 d7             	cmp    %edx,%r15d
   19dec:	0f 8e 9e dc ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19df2:	48 63 ca             	movslq %edx,%rcx
   19df5:	29 da                	sub    %ebx,%edx
   19df7:	48 63 d2             	movslq %edx,%rdx
   19dfa:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19dfe:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19e02:	01 f2                	add    %esi,%edx
   19e04:	d1 fa                	sar    %edx
   19e06:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19e0a:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19e0d:	41 8d 50 04          	lea    0x4(%r8),%edx
   19e11:	41 39 d7             	cmp    %edx,%r15d
   19e14:	0f 8e 76 dc ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19e1a:	48 63 ca             	movslq %edx,%rcx
   19e1d:	29 da                	sub    %ebx,%edx
   19e1f:	48 63 d2             	movslq %edx,%rdx
   19e22:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19e26:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19e2a:	01 f2                	add    %esi,%edx
   19e2c:	d1 fa                	sar    %edx
   19e2e:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19e32:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19e35:	41 8d 50 05          	lea    0x5(%r8),%edx
   19e39:	41 39 d7             	cmp    %edx,%r15d
   19e3c:	0f 8e 4e dc ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19e42:	48 63 ca             	movslq %edx,%rcx
   19e45:	29 da                	sub    %ebx,%edx
   19e47:	48 63 d2             	movslq %edx,%rdx
   19e4a:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19e4e:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19e52:	01 f2                	add    %esi,%edx
   19e54:	d1 fa                	sar    %edx
   19e56:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19e5a:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19e5d:	41 8d 50 06          	lea    0x6(%r8),%edx
   19e61:	41 39 d7             	cmp    %edx,%r15d
   19e64:	0f 8e 26 dc ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19e6a:	48 63 ca             	movslq %edx,%rcx
   19e6d:	29 da                	sub    %ebx,%edx
   19e6f:	48 63 d2             	movslq %edx,%rdx
   19e72:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19e76:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19e7a:	01 f2                	add    %esi,%edx
   19e7c:	d1 fa                	sar    %edx
   19e7e:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19e82:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19e85:	41 8d 50 07          	lea    0x7(%r8),%edx
   19e89:	44 39 fa             	cmp    %r15d,%edx
   19e8c:	0f 8d fe db ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19e92:	48 63 ca             	movslq %edx,%rcx
   19e95:	29 da                	sub    %ebx,%edx
   19e97:	48 63 d2             	movslq %edx,%rdx
   19e9a:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19e9e:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19ea2:	01 f2                	add    %esi,%edx
   19ea4:	d1 fa                	sar    %edx
   19ea6:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19eaa:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19ead:	41 8d 50 08          	lea    0x8(%r8),%edx
   19eb1:	44 39 fa             	cmp    %r15d,%edx
   19eb4:	0f 8d d6 db ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19eba:	48 63 ca             	movslq %edx,%rcx
   19ebd:	29 da                	sub    %ebx,%edx
   19ebf:	48 63 d2             	movslq %edx,%rdx
   19ec2:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19ec6:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19eca:	01 f2                	add    %esi,%edx
   19ecc:	d1 fa                	sar    %edx
   19ece:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19ed2:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19ed5:	41 8d 50 09          	lea    0x9(%r8),%edx
   19ed9:	41 39 d7             	cmp    %edx,%r15d
   19edc:	0f 8e ae db ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19ee2:	48 63 ca             	movslq %edx,%rcx
   19ee5:	29 da                	sub    %ebx,%edx
   19ee7:	48 63 d2             	movslq %edx,%rdx
   19eea:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19eee:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19ef2:	01 f2                	add    %esi,%edx
   19ef4:	d1 fa                	sar    %edx
   19ef6:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19efa:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19efd:	41 8d 50 0a          	lea    0xa(%r8),%edx
   19f01:	44 39 fa             	cmp    %r15d,%edx
   19f04:	0f 8d 86 db ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19f0a:	48 63 ca             	movslq %edx,%rcx
   19f0d:	29 da                	sub    %ebx,%edx
   19f0f:	48 63 d2             	movslq %edx,%rdx
   19f12:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19f16:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19f1a:	01 f2                	add    %esi,%edx
   19f1c:	d1 fa                	sar    %edx
   19f1e:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19f22:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19f25:	41 8d 50 0b          	lea    0xb(%r8),%edx
   19f29:	41 39 d7             	cmp    %edx,%r15d
   19f2c:	0f 8e 5e db ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19f32:	48 63 ca             	movslq %edx,%rcx
   19f35:	29 da                	sub    %ebx,%edx
   19f37:	48 63 d2             	movslq %edx,%rdx
   19f3a:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19f3e:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19f42:	01 f2                	add    %esi,%edx
   19f44:	d1 fa                	sar    %edx
   19f46:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19f4a:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19f4d:	41 8d 50 0c          	lea    0xc(%r8),%edx
   19f51:	41 39 d7             	cmp    %edx,%r15d
   19f54:	0f 8e 36 db ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19f5a:	48 63 ca             	movslq %edx,%rcx
   19f5d:	29 da                	sub    %ebx,%edx
   19f5f:	48 63 d2             	movslq %edx,%rdx
   19f62:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19f66:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19f6a:	01 f2                	add    %esi,%edx
   19f6c:	d1 fa                	sar    %edx
   19f6e:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19f72:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19f75:	41 8d 50 0d          	lea    0xd(%r8),%edx
   19f79:	41 39 d7             	cmp    %edx,%r15d
   19f7c:	0f 8e 0e db ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19f82:	48 63 ca             	movslq %edx,%rcx
   19f85:	29 da                	sub    %ebx,%edx
   19f87:	48 63 d2             	movslq %edx,%rdx
   19f8a:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   19f8e:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19f92:	01 f2                	add    %esi,%edx
   19f94:	d1 fa                	sar    %edx
   19f96:	41 02 14 0b          	add    (%r11,%rcx,1),%dl
   19f9a:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   19f9d:	41 8d 50 0e          	lea    0xe(%r8),%edx
   19fa1:	41 39 d7             	cmp    %edx,%r15d
   19fa4:	0f 8e e6 da ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19faa:	48 63 ca             	movslq %edx,%rcx
   19fad:	29 da                	sub    %ebx,%edx
   19faf:	48 63 d2             	movslq %edx,%rdx
   19fb2:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
   19fb6:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
   19fba:	01 d0                	add    %edx,%eax
   19fbc:	d1 f8                	sar    %eax
   19fbe:	41 02 04 0b          	add    (%r11,%rcx,1),%al
   19fc2:	88 04 0f             	mov    %al,(%rdi,%rcx,1)
   19fc5:	e9 c6 da ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19fca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            STBI__CASE(STBI__F_up)           { cur[k] = STBI__BYTECAST(raw[k] + prior[k]); } break;
   19fd0:	45 85 ff             	test   %r15d,%r15d
   19fd3:	0f 8e b7 da ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   19fd9:	41 8d 57 ff          	lea    -0x1(%r15),%edx
   19fdd:	44 89 fe             	mov    %r15d,%esi
   19fe0:	83 fa 06             	cmp    $0x6,%edx
   19fe3:	0f 86 de 06 00 00    	jbe    1a6c7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x30b7>
   19fe9:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
   19fee:	48 89 f9             	mov    %rdi,%rcx
   19ff1:	4c 8d 43 01          	lea    0x1(%rbx),%r8
   19ff5:	4c 29 c1             	sub    %r8,%rcx
   19ff8:	48 83 f9 0e          	cmp    $0xe,%rcx
   19ffc:	0f 86 c5 06 00 00    	jbe    1a6c7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x30b7>
   1a002:	4c 8d 40 01          	lea    0x1(%rax),%r8
   1a006:	48 89 f9             	mov    %rdi,%rcx
   1a009:	4c 29 c1             	sub    %r8,%rcx
   1a00c:	48 83 f9 0e          	cmp    $0xe,%rcx
   1a010:	0f 86 b1 06 00 00    	jbe    1a6c7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x30b7>
   1a016:	83 fa 0e             	cmp    $0xe,%edx
   1a019:	0f 86 62 18 00 00    	jbe    1b881 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x4271>
   1a01f:	44 89 f9             	mov    %r15d,%ecx
   1a022:	31 d2                	xor    %edx,%edx
   1a024:	48 89 de             	mov    %rbx,%rsi
   1a027:	c1 e9 04             	shr    $0x4,%ecx
   1a02a:	48 c1 e1 04          	shl    $0x4,%rcx
   1a02e:	66 90                	xchg   %ax,%ax
   1a030:	f3 0f 6f 04 16       	movdqu (%rsi,%rdx,1),%xmm0
   1a035:	f3 0f 6f 2c 10       	movdqu (%rax,%rdx,1),%xmm5
   1a03a:	66 0f fc c5          	paddb  %xmm5,%xmm0
   1a03e:	0f 11 04 17          	movups %xmm0,(%rdi,%rdx,1)
   1a042:	48 83 c2 10          	add    $0x10,%rdx
   1a046:	48 39 d1             	cmp    %rdx,%rcx
   1a049:	75 e5                	jne    1a030 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2a20>
   1a04b:	44 89 fa             	mov    %r15d,%edx
   1a04e:	83 e2 f0             	and    $0xfffffff0,%edx
   1a051:	89 d1                	mov    %edx,%ecx
   1a053:	41 39 d7             	cmp    %edx,%r15d
   1a056:	0f 84 34 da ff ff    	je     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a05c:	44 89 fe             	mov    %r15d,%esi
   1a05f:	29 d6                	sub    %edx,%esi
   1a061:	44 8d 46 ff          	lea    -0x1(%rsi),%r8d
   1a065:	41 83 f8 06          	cmp    $0x6,%r8d
   1a069:	76 28                	jbe    1a093 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2a83>
   1a06b:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
   1a070:	f3 0f 7e 0c 08       	movq   (%rax,%rcx,1),%xmm1
   1a075:	f3 0f 7e 04 0b       	movq   (%rbx,%rcx,1),%xmm0
   1a07a:	66 0f fc c1          	paddb  %xmm1,%xmm0
   1a07e:	66 0f d6 04 0f       	movq   %xmm0,(%rdi,%rcx,1)
   1a083:	89 f1                	mov    %esi,%ecx
   1a085:	83 e1 f8             	and    $0xfffffff8,%ecx
   1a088:	01 ca                	add    %ecx,%edx
   1a08a:	83 e6 07             	and    $0x7,%esi
   1a08d:	0f 84 fd d9 ff ff    	je     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a093:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
   1a098:	48 63 ca             	movslq %edx,%rcx
   1a09b:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   1a09f:	40 02 34 0b          	add    (%rbx,%rcx,1),%sil
   1a0a3:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
   1a0a7:	8d 4a 01             	lea    0x1(%rdx),%ecx
   1a0aa:	41 39 cf             	cmp    %ecx,%r15d
   1a0ad:	0f 8e dd d9 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a0b3:	48 63 c9             	movslq %ecx,%rcx
   1a0b6:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   1a0ba:	40 02 34 0b          	add    (%rbx,%rcx,1),%sil
   1a0be:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
   1a0c2:	8d 4a 02             	lea    0x2(%rdx),%ecx
   1a0c5:	44 39 f9             	cmp    %r15d,%ecx
   1a0c8:	0f 8d c2 d9 ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a0ce:	48 63 c9             	movslq %ecx,%rcx
   1a0d1:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   1a0d5:	40 02 34 0b          	add    (%rbx,%rcx,1),%sil
   1a0d9:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
   1a0dd:	8d 4a 03             	lea    0x3(%rdx),%ecx
   1a0e0:	41 39 cf             	cmp    %ecx,%r15d
   1a0e3:	0f 8e a7 d9 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a0e9:	48 63 c9             	movslq %ecx,%rcx
   1a0ec:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   1a0f0:	40 02 34 0b          	add    (%rbx,%rcx,1),%sil
   1a0f4:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
   1a0f8:	8d 4a 04             	lea    0x4(%rdx),%ecx
   1a0fb:	44 39 f9             	cmp    %r15d,%ecx
   1a0fe:	0f 8d 8c d9 ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a104:	48 63 c9             	movslq %ecx,%rcx
   1a107:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   1a10b:	40 02 34 0b          	add    (%rbx,%rcx,1),%sil
   1a10f:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
   1a113:	8d 4a 05             	lea    0x5(%rdx),%ecx
   1a116:	44 39 f9             	cmp    %r15d,%ecx
   1a119:	0f 8d 71 d9 ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a11f:	48 63 c9             	movslq %ecx,%rcx
   1a122:	83 c2 06             	add    $0x6,%edx
   1a125:	0f b6 34 0b          	movzbl (%rbx,%rcx,1),%esi
   1a129:	40 02 34 08          	add    (%rax,%rcx,1),%sil
   1a12d:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
   1a131:	41 39 d7             	cmp    %edx,%r15d
   1a134:	0f 8e 56 d9 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a13a:	48 63 d2             	movslq %edx,%rdx
   1a13d:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
   1a141:	02 04 13             	add    (%rbx,%rdx,1),%al
   1a144:	88 04 17             	mov    %al,(%rdi,%rdx,1)
   1a147:	e9 44 d9 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
            STBI__CASE(STBI__F_sub)          { cur[k] = STBI__BYTECAST(raw[k] + cur[k-filter_bytes]); } break;
   1a14c:	45 85 ff             	test   %r15d,%r15d
   1a14f:	0f 8e 3b d9 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a155:	41 8d 4f ff          	lea    -0x1(%r15),%ecx
   1a159:	44 89 fa             	mov    %r15d,%edx
   1a15c:	83 f9 06             	cmp    $0x6,%ecx
   1a15f:	0f 86 ed 05 00 00    	jbe    1a752 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3142>
   1a165:	8b 44 24 58          	mov    0x58(%rsp),%eax
   1a169:	f7 d8                	neg    %eax
   1a16b:	48 98                	cltq
   1a16d:	48 89 c6             	mov    %rax,%rsi
   1a170:	48 f7 d6             	not    %rsi
   1a173:	48 83 fe 0e          	cmp    $0xe,%rsi
   1a177:	0f 86 d5 05 00 00    	jbe    1a752 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3142>
   1a17d:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
   1a182:	48 89 fe             	mov    %rdi,%rsi
   1a185:	4c 8d 43 01          	lea    0x1(%rbx),%r8
   1a189:	4c 29 c6             	sub    %r8,%rsi
   1a18c:	48 83 fe 0e          	cmp    $0xe,%rsi
   1a190:	0f 86 bc 05 00 00    	jbe    1a752 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3142>
   1a196:	83 f9 0e             	cmp    $0xe,%ecx
   1a199:	0f 86 d5 16 00 00    	jbe    1b874 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x4264>
   1a19f:	44 89 f9             	mov    %r15d,%ecx
   1a1a2:	48 01 f8             	add    %rdi,%rax
   1a1a5:	31 d2                	xor    %edx,%edx
   1a1a7:	48 89 de             	mov    %rbx,%rsi
   1a1aa:	c1 e9 04             	shr    $0x4,%ecx
   1a1ad:	48 c1 e1 04          	shl    $0x4,%rcx
   1a1b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a1b8:	f3 0f 6f 04 16       	movdqu (%rsi,%rdx,1),%xmm0
   1a1bd:	f3 0f 6f 2c 10       	movdqu (%rax,%rdx,1),%xmm5
   1a1c2:	66 0f fc c5          	paddb  %xmm5,%xmm0
   1a1c6:	0f 11 04 17          	movups %xmm0,(%rdi,%rdx,1)
   1a1ca:	48 83 c2 10          	add    $0x10,%rdx
   1a1ce:	48 39 d1             	cmp    %rdx,%rcx
   1a1d1:	75 e5                	jne    1a1b8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2ba8>
   1a1d3:	45 89 f8             	mov    %r15d,%r8d
   1a1d6:	41 83 e0 f0          	and    $0xfffffff0,%r8d
   1a1da:	44 89 c1             	mov    %r8d,%ecx
   1a1dd:	45 39 c7             	cmp    %r8d,%r15d
   1a1e0:	0f 84 aa d8 ff ff    	je     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a1e6:	44 89 fa             	mov    %r15d,%edx
   1a1e9:	44 29 c2             	sub    %r8d,%edx
   1a1ec:	8d 72 ff             	lea    -0x1(%rdx),%esi
   1a1ef:	83 fe 06             	cmp    $0x6,%esi
   1a1f2:	76 29                	jbe    1a21d <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2c0d>
   1a1f4:	f3 0f 7e 04 08       	movq   (%rax,%rcx,1),%xmm0
   1a1f9:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
   1a1fe:	f3 0f 7e 0c 08       	movq   (%rax,%rcx,1),%xmm1
   1a203:	89 d0                	mov    %edx,%eax
   1a205:	83 e0 f8             	and    $0xfffffff8,%eax
   1a208:	66 0f fc c1          	paddb  %xmm1,%xmm0
   1a20c:	41 01 c0             	add    %eax,%r8d
   1a20f:	83 e2 07             	and    $0x7,%edx
   1a212:	66 0f d6 04 0f       	movq   %xmm0,(%rdi,%rcx,1)
   1a217:	0f 84 73 d8 ff ff    	je     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a21d:	8b 5c 24 58          	mov    0x58(%rsp),%ebx
   1a221:	44 89 c0             	mov    %r8d,%eax
   1a224:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   1a229:	49 63 d0             	movslq %r8d,%rdx
   1a22c:	29 d8                	sub    %ebx,%eax
   1a22e:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a232:	48 98                	cltq
   1a234:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a237:	41 8d 40 01          	lea    0x1(%r8),%eax
   1a23b:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a23e:	44 39 f8             	cmp    %r15d,%eax
   1a241:	0f 8d 49 d8 ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a247:	48 63 d0             	movslq %eax,%rdx
   1a24a:	29 d8                	sub    %ebx,%eax
   1a24c:	48 98                	cltq
   1a24e:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a252:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a255:	41 8d 40 02          	lea    0x2(%r8),%eax
   1a259:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a25c:	44 39 f8             	cmp    %r15d,%eax
   1a25f:	0f 8d 2b d8 ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a265:	48 63 d0             	movslq %eax,%rdx
   1a268:	29 d8                	sub    %ebx,%eax
   1a26a:	48 98                	cltq
   1a26c:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a270:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a273:	41 8d 40 03          	lea    0x3(%r8),%eax
   1a277:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a27a:	44 39 f8             	cmp    %r15d,%eax
   1a27d:	0f 8d 0d d8 ff ff    	jge    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
            STBI__CASE(STBI__F_paeth_first)  { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],0,0)); } break;
   1a283:	48 63 d0             	movslq %eax,%rdx
   1a286:	29 d8                	sub    %ebx,%eax
   1a288:	48 98                	cltq
   1a28a:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a28e:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a291:	41 8d 40 04          	lea    0x4(%r8),%eax
   1a295:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a298:	41 39 c7             	cmp    %eax,%r15d
   1a29b:	0f 8e ef d7 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a2a1:	48 63 d0             	movslq %eax,%rdx
   1a2a4:	29 d8                	sub    %ebx,%eax
   1a2a6:	48 98                	cltq
   1a2a8:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a2ac:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a2af:	41 8d 40 05          	lea    0x5(%r8),%eax
   1a2b3:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a2b6:	41 39 c7             	cmp    %eax,%r15d
   1a2b9:	0f 8e d1 d7 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a2bf:	48 63 d0             	movslq %eax,%rdx
   1a2c2:	29 d8                	sub    %ebx,%eax
   1a2c4:	48 98                	cltq
   1a2c6:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a2ca:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a2cd:	41 8d 40 06          	lea    0x6(%r8),%eax
   1a2d1:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a2d4:	41 39 c7             	cmp    %eax,%r15d
   1a2d7:	0f 8e b3 d7 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a2dd:	48 63 d0             	movslq %eax,%rdx
   1a2e0:	29 d8                	sub    %ebx,%eax
   1a2e2:	48 98                	cltq
   1a2e4:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a2e8:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a2eb:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a2ee:	e9 9d d7 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a2f3:	45 85 ff             	test   %r15d,%r15d
   1a2f6:	0f 8e 94 d7 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a2fc:	41 8d 4f ff          	lea    -0x1(%r15),%ecx
   1a300:	44 89 fa             	mov    %r15d,%edx
   1a303:	83 f9 06             	cmp    $0x6,%ecx
   1a306:	0f 86 dc 03 00 00    	jbe    1a6e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x30d8>
   1a30c:	8b 44 24 58          	mov    0x58(%rsp),%eax
   1a310:	f7 d8                	neg    %eax
   1a312:	48 98                	cltq
   1a314:	48 89 c6             	mov    %rax,%rsi
   1a317:	48 f7 d6             	not    %rsi
   1a31a:	48 83 fe 0e          	cmp    $0xe,%rsi
   1a31e:	0f 86 c4 03 00 00    	jbe    1a6e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x30d8>
   1a324:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
   1a329:	48 89 fe             	mov    %rdi,%rsi
   1a32c:	4c 8d 43 01          	lea    0x1(%rbx),%r8
   1a330:	4c 29 c6             	sub    %r8,%rsi
   1a333:	48 83 fe 0e          	cmp    $0xe,%rsi
   1a337:	0f 86 ab 03 00 00    	jbe    1a6e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x30d8>
   1a33d:	83 f9 0e             	cmp    $0xe,%ecx
   1a340:	0f 86 21 15 00 00    	jbe    1b867 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x4257>
   1a346:	44 89 f9             	mov    %r15d,%ecx
   1a349:	48 01 f8             	add    %rdi,%rax
   1a34c:	31 d2                	xor    %edx,%edx
   1a34e:	48 89 de             	mov    %rbx,%rsi
   1a351:	c1 e9 04             	shr    $0x4,%ecx
   1a354:	48 c1 e1 04          	shl    $0x4,%rcx
   1a358:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a35f:	00 
   1a360:	f3 0f 6f 04 16       	movdqu (%rsi,%rdx,1),%xmm0
   1a365:	f3 0f 6f 2c 10       	movdqu (%rax,%rdx,1),%xmm5
   1a36a:	66 0f fc c5          	paddb  %xmm5,%xmm0
   1a36e:	0f 11 04 17          	movups %xmm0,(%rdi,%rdx,1)
   1a372:	48 83 c2 10          	add    $0x10,%rdx
   1a376:	48 39 ca             	cmp    %rcx,%rdx
   1a379:	75 e5                	jne    1a360 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2d50>
   1a37b:	45 89 f8             	mov    %r15d,%r8d
   1a37e:	41 83 e0 f0          	and    $0xfffffff0,%r8d
   1a382:	44 89 c1             	mov    %r8d,%ecx
   1a385:	45 39 c7             	cmp    %r8d,%r15d
   1a388:	0f 84 02 d7 ff ff    	je     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a38e:	44 89 fa             	mov    %r15d,%edx
   1a391:	44 29 c2             	sub    %r8d,%edx
   1a394:	8d 72 ff             	lea    -0x1(%rdx),%esi
   1a397:	83 fe 06             	cmp    $0x6,%esi
   1a39a:	76 29                	jbe    1a3c5 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2db5>
   1a39c:	f3 0f 7e 04 08       	movq   (%rax,%rcx,1),%xmm0
   1a3a1:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
   1a3a6:	f3 0f 7e 0c 08       	movq   (%rax,%rcx,1),%xmm1
   1a3ab:	89 d0                	mov    %edx,%eax
   1a3ad:	83 e0 f8             	and    $0xfffffff8,%eax
   1a3b0:	66 0f fc c1          	paddb  %xmm1,%xmm0
   1a3b4:	41 01 c0             	add    %eax,%r8d
   1a3b7:	83 e2 07             	and    $0x7,%edx
   1a3ba:	66 0f d6 04 0f       	movq   %xmm0,(%rdi,%rcx,1)
   1a3bf:	0f 84 cb d6 ff ff    	je     17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a3c5:	8b 5c 24 58          	mov    0x58(%rsp),%ebx
   1a3c9:	44 89 c0             	mov    %r8d,%eax
   1a3cc:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   1a3d1:	49 63 d0             	movslq %r8d,%rdx
   1a3d4:	29 d8                	sub    %ebx,%eax
   1a3d6:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a3da:	48 98                	cltq
   1a3dc:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a3df:	41 8d 40 01          	lea    0x1(%r8),%eax
   1a3e3:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a3e6:	41 39 c7             	cmp    %eax,%r15d
   1a3e9:	0f 8e a1 d6 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a3ef:	48 63 d0             	movslq %eax,%rdx
   1a3f2:	29 d8                	sub    %ebx,%eax
   1a3f4:	48 98                	cltq
   1a3f6:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a3fa:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a3fd:	41 8d 40 02          	lea    0x2(%r8),%eax
   1a401:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a404:	41 39 c7             	cmp    %eax,%r15d
   1a407:	0f 8e 83 d6 ff ff    	jle    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a40d:	48 63 d0             	movslq %eax,%rdx
   1a410:	29 d8                	sub    %ebx,%eax
   1a412:	48 98                	cltq
   1a414:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   1a418:	02 0c 07             	add    (%rdi,%rax,1),%cl
   1a41b:	41 8d 40 03          	lea    0x3(%r8),%eax
   1a41f:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a422:	41 39 c7             	cmp    %eax,%r15d
   1a425:	0f 8f 58 fe ff ff    	jg     1a283 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2c73>
   1a42b:	e9 60 d6 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
            STBI__CASE(STBI__F_paeth_first)  { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],0,0)); } break;
   1a430:	31 c9                	xor    %ecx,%ecx
   1a432:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1a438:	45 0f b6 1c 0c       	movzbl (%r12,%rcx,1),%r11d
   1a43d:	44 02 1c 08          	add    (%rax,%rcx,1),%r11b
   1a441:	44 88 1c 0f          	mov    %r11b,(%rdi,%rcx,1)
   1a445:	48 83 c1 01          	add    $0x1,%rcx
   1a449:	48 39 ca             	cmp    %rcx,%rdx
   1a44c:	75 ea                	jne    1a438 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e28>
   1a44e:	e9 95 ef ff ff       	jmp    193e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1dd8>
   1a453:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            STBI__CASE(STBI__F_up)           { cur[k] = STBI__BYTECAST(raw[k] + prior[k]); } break;
   1a458:	31 f6                	xor    %esi,%esi
   1a45a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1a460:	0f b6 1c 30          	movzbl (%rax,%rsi,1),%ebx
   1a464:	02 1c 32             	add    (%rdx,%rsi,1),%bl
   1a467:	88 1c 37             	mov    %bl,(%rdi,%rsi,1)
   1a46a:	48 83 c6 01          	add    $0x1,%rsi
   1a46e:	48 39 f1             	cmp    %rsi,%rcx
   1a471:	75 ed                	jne    1a460 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e50>
   1a473:	e9 f8 d7 ff ff       	jmp    17c70 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x660>
   1a478:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a47f:	00 
            STBI__CASE(STBI__F_avg)          { cur[k] = STBI__BYTECAST(raw[k] + ((prior[k] + cur[k- output_bytes])>>1)); } break;
   1a480:	31 c9                	xor    %ecx,%ecx
   1a482:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1a488:	0f b6 14 08          	movzbl (%rax,%rcx,1),%edx
   1a48c:	45 0f b6 04 09       	movzbl (%r9,%rcx,1),%r8d
   1a491:	44 01 c2             	add    %r8d,%edx
   1a494:	d1 fa                	sar    %edx
   1a496:	02 14 0e             	add    (%rsi,%rcx,1),%dl
   1a499:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   1a49c:	48 83 c1 01          	add    $0x1,%rcx
   1a4a0:	49 39 ca             	cmp    %rcx,%r10
   1a4a3:	75 e3                	jne    1a488 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e78>
   1a4a5:	e9 06 ea ff ff       	jmp    18eb0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x18a0>
   1a4aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   1a4b0:	48 89 14 24          	mov    %rdx,(%rsp)
   1a4b4:	4c 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%r15
   1a4bb:	00 
   1a4bc:	31 f6                	xor    %esi,%esi
   1a4be:	44 89 64 24 10       	mov    %r12d,0x10(%rsp)
   1a4c3:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   1a4c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a4cf:	00 
   1a4d0:	48 8b 5c 24 70       	mov    0x70(%rsp),%rbx
   1a4d5:	44 0f b6 04 30       	movzbl (%rax,%rsi,1),%r8d
   1a4da:	45 0f b6 14 37       	movzbl (%r15,%rsi,1),%r10d
   1a4df:	45 0f b6 64 35 00    	movzbl 0x0(%r13,%rsi,1),%r12d
   1a4e5:	44 0f b6 0c 33       	movzbl (%rbx,%rsi,1),%r9d
   1a4ea:	44 89 c3             	mov    %r8d,%ebx
   int p = a + b - c;
   1a4ed:	43 8d 14 02          	lea    (%r10,%r8,1),%edx
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   1a4f1:	44 89 d1             	mov    %r10d,%ecx
   int p = a + b - c;
   1a4f4:	44 29 ca             	sub    %r9d,%edx
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   1a4f7:	45 89 cb             	mov    %r9d,%r11d
   int pb = abs(p-b);
   1a4fa:	41 89 d6             	mov    %edx,%r14d
   1a4fd:	45 29 c6             	sub    %r8d,%r14d
   1a500:	45 89 f0             	mov    %r14d,%r8d
   1a503:	41 f7 d8             	neg    %r8d
   1a506:	45 0f 48 c6          	cmovs  %r14d,%r8d
   int pc = abs(p-c);
   1a50a:	41 89 d6             	mov    %edx,%r14d
   1a50d:	45 29 ce             	sub    %r9d,%r14d
   1a510:	45 89 f1             	mov    %r14d,%r9d
   1a513:	41 f7 d9             	neg    %r9d
   1a516:	45 0f 48 ce          	cmovs  %r14d,%r9d
   if (pa <= pb && pa <= pc) return a;
   1a51a:	45 89 c6             	mov    %r8d,%r14d
   1a51d:	45 39 c1             	cmp    %r8d,%r9d
   1a520:	45 0f 4e f1          	cmovle %r9d,%r14d
   int pa = abs(p-a);
   1a524:	44 29 d2             	sub    %r10d,%edx
   1a527:	41 89 d2             	mov    %edx,%r10d
   1a52a:	41 f7 da             	neg    %r10d
   1a52d:	44 0f 48 d2          	cmovs  %edx,%r10d
   if (pa <= pb && pa <= pc) return a;
   1a531:	45 39 d6             	cmp    %r10d,%r14d
   1a534:	7d 09                	jge    1a53f <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f2f>
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])); } break;
   1a536:	45 39 c1             	cmp    %r8d,%r9d
   1a539:	44 89 d9             	mov    %r11d,%ecx
   1a53c:	0f 4d cb             	cmovge %ebx,%ecx
   1a53f:	44 01 e1             	add    %r12d,%ecx
   1a542:	88 0c 37             	mov    %cl,(%rdi,%rsi,1)
   1a545:	48 83 c6 01          	add    $0x1,%rsi
   1a549:	48 39 74 24 60       	cmp    %rsi,0x60(%rsp)
   1a54e:	75 80                	jne    1a4d0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2ec0>
   1a550:	e9 4a e3 ff ff       	jmp    1889f <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x128f>
   1a555:	0f 1f 00             	nopl   (%rax)
            STBI__CASE(STBI__F_avg_first)    { cur[k] = STBI__BYTECAST(raw[k] + (cur[k- output_bytes] >> 1)); } break;
   1a558:	31 c0                	xor    %eax,%eax
   1a55a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1a560:	0f b6 14 06          	movzbl (%rsi,%rax,1),%edx
   1a564:	d0 ea                	shr    %dl
   1a566:	02 14 01             	add    (%rcx,%rax,1),%dl
   1a569:	88 14 07             	mov    %dl,(%rdi,%rax,1)
   1a56c:	48 83 c0 01          	add    $0x1,%rax
   1a570:	4c 39 c0             	cmp    %r8,%rax
   1a573:	75 eb                	jne    1a560 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f50>
   1a575:	e9 66 dc ff ff       	jmp    181e0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0xbd0>
   1a57a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            STBI__CASE(STBI__F_sub)          { cur[k] = STBI__BYTECAST(raw[k] + cur[k- output_bytes]); } break;
   1a580:	31 c9                	xor    %ecx,%ecx
   1a582:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1a588:	45 0f b6 1c 0c       	movzbl (%r12,%rcx,1),%r11d
   1a58d:	44 02 1c 08          	add    (%rax,%rcx,1),%r11b
   1a591:	44 88 1c 0f          	mov    %r11b,(%rdi,%rcx,1)
   1a595:	48 83 c1 01          	add    $0x1,%rcx
   1a599:	48 39 ca             	cmp    %rcx,%rdx
   1a59c:	75 ea                	jne    1a588 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f78>
   1a59e:	e9 5d eb ff ff       	jmp    19100 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1af0>
   1a5a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a5a8:	41 83 fb 0e          	cmp    $0xe,%r11d
   1a5ac:	0f 86 f2 03 00 00    	jbe    1a9a4 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3394>
   1a5b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            STBI__CASE(STBI__F_none)         { cur[k] = raw[k]; } break;
   1a5b8:	f3 0f 6f 2c 10       	movdqu (%rax,%rdx,1),%xmm5
   1a5bd:	0f 11 2c 17          	movups %xmm5,(%rdi,%rdx,1)
   1a5c1:	48 83 c2 10          	add    $0x10,%rdx
   1a5c5:	49 39 d1             	cmp    %rdx,%r9
   1a5c8:	75 ee                	jne    1a5b8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2fa8>
   1a5ca:	44 39 ee             	cmp    %r13d,%esi
   1a5cd:	0f 84 f7 eb ff ff    	je     191ca <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1bba>
   1a5d3:	83 7c 24 10 06       	cmpl   $0x6,0x10(%rsp)
   1a5d8:	44 8b 14 24          	mov    (%rsp),%r10d
   1a5dc:	0f 86 5e 07 00 00    	jbe    1ad40 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3730>
   1a5e2:	44 89 ea             	mov    %r13d,%edx
   1a5e5:	44 89 eb             	mov    %r13d,%ebx
   1a5e8:	f3 0f 7e 04 10       	movq   (%rax,%rdx,1),%xmm0
   1a5ed:	66 0f d6 04 17       	movq   %xmm0,(%rdi,%rdx,1)
   1a5f2:	44 89 d2             	mov    %r10d,%edx
   1a5f5:	83 e2 f8             	and    $0xfffffff8,%edx
   1a5f8:	01 da                	add    %ebx,%edx
   1a5fa:	41 83 e2 07          	and    $0x7,%r10d
   1a5fe:	0f 84 c6 eb ff ff    	je     191ca <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1bba>
   1a604:	4c 63 d2             	movslq %edx,%r10
   1a607:	42 0f b6 1c 10       	movzbl (%rax,%r10,1),%ebx
   1a60c:	42 88 1c 17          	mov    %bl,(%rdi,%r10,1)
   1a610:	44 8d 52 01          	lea    0x1(%rdx),%r10d
   1a614:	44 39 d6             	cmp    %r10d,%esi
   1a617:	0f 8e ad eb ff ff    	jle    191ca <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1bba>
   1a61d:	4d 63 d2             	movslq %r10d,%r10
   1a620:	42 0f b6 1c 10       	movzbl (%rax,%r10,1),%ebx
   1a625:	42 88 1c 17          	mov    %bl,(%rdi,%r10,1)
   1a629:	44 8d 52 02          	lea    0x2(%rdx),%r10d
   1a62d:	44 39 d6             	cmp    %r10d,%esi
   1a630:	0f 8e 94 eb ff ff    	jle    191ca <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1bba>
   1a636:	4d 63 d2             	movslq %r10d,%r10
   1a639:	42 0f b6 1c 10       	movzbl (%rax,%r10,1),%ebx
   1a63e:	42 88 1c 17          	mov    %bl,(%rdi,%r10,1)
   1a642:	44 8d 52 03          	lea    0x3(%rdx),%r10d
   1a646:	44 39 d6             	cmp    %r10d,%esi
   1a649:	0f 8e 7b eb ff ff    	jle    191ca <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1bba>
   1a64f:	4d 63 d2             	movslq %r10d,%r10
   1a652:	42 0f b6 1c 10       	movzbl (%rax,%r10,1),%ebx
   1a657:	42 88 1c 17          	mov    %bl,(%rdi,%r10,1)
   1a65b:	44 8d 52 04          	lea    0x4(%rdx),%r10d
   1a65f:	44 39 d6             	cmp    %r10d,%esi
   1a662:	0f 8e 62 eb ff ff    	jle    191ca <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1bba>
   1a668:	4d 63 d2             	movslq %r10d,%r10
   1a66b:	42 0f b6 1c 10       	movzbl (%rax,%r10,1),%ebx
   1a670:	42 88 1c 17          	mov    %bl,(%rdi,%r10,1)
   1a674:	44 8d 52 05          	lea    0x5(%rdx),%r10d
   1a678:	44 39 d6             	cmp    %r10d,%esi
   1a67b:	0f 8e 49 eb ff ff    	jle    191ca <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1bba>
   1a681:	4d 63 d2             	movslq %r10d,%r10
   1a684:	83 c2 06             	add    $0x6,%edx
   1a687:	42 0f b6 1c 10       	movzbl (%rax,%r10,1),%ebx
   1a68c:	42 88 1c 17          	mov    %bl,(%rdi,%r10,1)
   1a690:	39 d6                	cmp    %edx,%esi
   1a692:	0f 8e 32 eb ff ff    	jle    191ca <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1bba>
   1a698:	48 63 d2             	movslq %edx,%rdx
   1a69b:	44 0f b6 14 10       	movzbl (%rax,%rdx,1),%r10d
   1a6a0:	48 01 c8             	add    %rcx,%rax
   1a6a3:	44 88 14 17          	mov    %r10b,(%rdi,%rdx,1)
   1a6a7:	c6 04 0f ff          	movb   $0xff,(%rdi,%rcx,1)
   1a6ab:	4c 01 e7             	add    %r12,%rdi
   1a6ae:	41 83 e8 01          	sub    $0x1,%r8d
   1a6b2:	0f 85 d8 ea ff ff    	jne    19190 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1b80>
   1a6b8:	e9 cf d5 ff ff       	jmp    17c8c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x67c>
   1a6bd:	0f 1f 00             	nopl   (%rax)
   1a6c0:	31 d2                	xor    %edx,%edx
   1a6c2:	e9 f1 ea ff ff       	jmp    191b8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1ba8>
            STBI__CASE(STBI__F_up)           { cur[k] = STBI__BYTECAST(raw[k] + prior[k]); } break;
   1a6c7:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   1a6cc:	31 d2                	xor    %edx,%edx
   1a6ce:	66 90                	xchg   %ax,%ax
   1a6d0:	0f b6 0c 10          	movzbl (%rax,%rdx,1),%ecx
   1a6d4:	02 0c 16             	add    (%rsi,%rdx,1),%cl
   1a6d7:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   1a6da:	48 83 c2 01          	add    $0x1,%rdx
   1a6de:	49 39 d5             	cmp    %rdx,%r13
   1a6e1:	75 ed                	jne    1a6d0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x30c0>
   1a6e3:	e9 a8 d3 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
            STBI__CASE(STBI__F_paeth_first)  { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],0,0)); } break;
   1a6e8:	8b 4c 24 58          	mov    0x58(%rsp),%ecx
   1a6ec:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   1a6f1:	31 c0                	xor    %eax,%eax
   1a6f3:	f7 d9                	neg    %ecx
   1a6f5:	48 63 c9             	movslq %ecx,%rcx
   1a6f8:	48 01 f9             	add    %rdi,%rcx
   1a6fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a700:	0f b6 14 06          	movzbl (%rsi,%rax,1),%edx
   1a704:	02 14 01             	add    (%rcx,%rax,1),%dl
   1a707:	88 14 07             	mov    %dl,(%rdi,%rax,1)
   1a70a:	48 83 c0 01          	add    $0x1,%rax
   1a70e:	49 39 c5             	cmp    %rax,%r13
   1a711:	75 ed                	jne    1a700 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x30f0>
   1a713:	e9 78 d3 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
            STBI__CASE(STBI__F_avg)          { cur[k] = STBI__BYTECAST(raw[k] + ((prior[k] + cur[k-filter_bytes])>>1)); } break;
   1a718:	44 8b 44 24 58       	mov    0x58(%rsp),%r8d
   1a71d:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
   1a722:	31 c9                	xor    %ecx,%ecx
   1a724:	41 f7 d8             	neg    %r8d
   1a727:	4d 63 c0             	movslq %r8d,%r8
   1a72a:	49 01 f8             	add    %rdi,%r8
   1a72d:	0f 1f 00             	nopl   (%rax)
   1a730:	41 0f b6 14 08       	movzbl (%r8,%rcx,1),%edx
   1a735:	0f b6 34 08          	movzbl (%rax,%rcx,1),%esi
   1a739:	01 f2                	add    %esi,%edx
   1a73b:	d1 fa                	sar    %edx
   1a73d:	41 02 14 09          	add    (%r9,%rcx,1),%dl
   1a741:	88 14 0f             	mov    %dl,(%rdi,%rcx,1)
   1a744:	48 83 c1 01          	add    $0x1,%rcx
   1a748:	4c 39 e9             	cmp    %r13,%rcx
   1a74b:	75 e3                	jne    1a730 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3120>
   1a74d:	e9 3e d3 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
            STBI__CASE(STBI__F_sub)          { cur[k] = STBI__BYTECAST(raw[k] + cur[k-filter_bytes]); } break;
   1a752:	8b 4c 24 58          	mov    0x58(%rsp),%ecx
   1a756:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   1a75b:	31 c0                	xor    %eax,%eax
   1a75d:	f7 d9                	neg    %ecx
   1a75f:	48 63 c9             	movslq %ecx,%rcx
   1a762:	48 01 f9             	add    %rdi,%rcx
   1a765:	0f 1f 00             	nopl   (%rax)
   1a768:	0f b6 14 06          	movzbl (%rsi,%rax,1),%edx
   1a76c:	02 14 01             	add    (%rcx,%rax,1),%dl
   1a76f:	88 14 07             	mov    %dl,(%rdi,%rax,1)
   1a772:	48 83 c0 01          	add    $0x1,%rax
   1a776:	49 39 c5             	cmp    %rax,%r13
   1a779:	75 ed                	jne    1a768 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3158>
   1a77b:	e9 10 d3 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
   1a780:	44 8b 64 24 58       	mov    0x58(%rsp),%r12d
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   1a785:	44 89 74 24 10       	mov    %r14d,0x10(%rsp)
   1a78a:	31 c9                	xor    %ecx,%ecx
   1a78c:	41 f7 dc             	neg    %r12d
   1a78f:	4d 63 e4             	movslq %r12d,%r12
   1a792:	4a 8d 1c 27          	lea    (%rdi,%r12,1),%rbx
   1a796:	4e 8d 3c 20          	lea    (%rax,%r12,1),%r15
   1a79a:	48 89 1c 24          	mov    %rbx,(%rsp)
   1a79e:	66 90                	xchg   %ax,%ax
   1a7a0:	48 8b 34 24          	mov    (%rsp),%rsi
   1a7a4:	44 0f b6 04 08       	movzbl (%rax,%rcx,1),%r8d
   1a7a9:	45 0f b6 0c 0f       	movzbl (%r15,%rcx,1),%r9d
   1a7ae:	48 8b 5c 24 50       	mov    0x50(%rsp),%rbx
   1a7b3:	44 0f b6 14 0e       	movzbl (%rsi,%rcx,1),%r10d
   1a7b8:	44 0f b6 24 0b       	movzbl (%rbx,%rcx,1),%r12d
   1a7bd:	44 89 c3             	mov    %r8d,%ebx
   1a7c0:	45 89 cb             	mov    %r9d,%r11d
   int p = a + b - c;
   1a7c3:	43 8d 14 02          	lea    (%r10,%r8,1),%edx
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   1a7c7:	44 89 d6             	mov    %r10d,%esi
   int p = a + b - c;
   1a7ca:	44 29 ca             	sub    %r9d,%edx
   int pb = abs(p-b);
   1a7cd:	41 89 d6             	mov    %edx,%r14d
   1a7d0:	45 29 c6             	sub    %r8d,%r14d
   1a7d3:	45 89 f0             	mov    %r14d,%r8d
   1a7d6:	41 f7 d8             	neg    %r8d
   1a7d9:	45 0f 48 c6          	cmovs  %r14d,%r8d
   int pc = abs(p-c);
   1a7dd:	41 89 d6             	mov    %edx,%r14d
   1a7e0:	45 29 ce             	sub    %r9d,%r14d
   1a7e3:	45 89 f1             	mov    %r14d,%r9d
   1a7e6:	41 f7 d9             	neg    %r9d
   1a7e9:	45 0f 48 ce          	cmovs  %r14d,%r9d
   if (pa <= pb && pa <= pc) return a;
   1a7ed:	45 89 c6             	mov    %r8d,%r14d
   1a7f0:	45 39 c1             	cmp    %r8d,%r9d
   1a7f3:	45 0f 4e f1          	cmovle %r9d,%r14d
   int pa = abs(p-a);
   1a7f7:	44 29 d2             	sub    %r10d,%edx
   1a7fa:	41 89 d2             	mov    %edx,%r10d
   1a7fd:	41 f7 da             	neg    %r10d
   1a800:	44 0f 48 d2          	cmovs  %edx,%r10d
   if (pa <= pb && pa <= pc) return a;
   1a804:	45 39 d6             	cmp    %r10d,%r14d
   1a807:	7d 09                	jge    1a812 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3202>
            STBI__CASE(STBI__F_paeth)        { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])); } break;
   1a809:	45 39 c1             	cmp    %r8d,%r9d
   1a80c:	44 89 de             	mov    %r11d,%esi
   1a80f:	0f 4d f3             	cmovge %ebx,%esi
   1a812:	44 01 e6             	add    %r12d,%esi
   1a815:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
   1a819:	48 83 c1 01          	add    $0x1,%rcx
   1a81d:	49 39 cd             	cmp    %rcx,%r13
   1a820:	0f 85 7a ff ff ff    	jne    1a7a0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3190>
   1a826:	44 8b 74 24 10       	mov    0x10(%rsp),%r14d
   1a82b:	e9 60 d2 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
            STBI__CASE(STBI__F_avg_first)    { cur[k] = STBI__BYTECAST(raw[k] + (cur[k-filter_bytes] >> 1)); } break;
   1a830:	8b 4c 24 58          	mov    0x58(%rsp),%ecx
   1a834:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   1a839:	31 c0                	xor    %eax,%eax
   1a83b:	f7 d9                	neg    %ecx
   1a83d:	48 63 c9             	movslq %ecx,%rcx
   1a840:	48 01 f9             	add    %rdi,%rcx
   1a843:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a848:	0f b6 14 01          	movzbl (%rcx,%rax,1),%edx
   1a84c:	d0 ea                	shr    %dl
   1a84e:	02 14 06             	add    (%rsi,%rax,1),%dl
   1a851:	88 14 07             	mov    %dl,(%rdi,%rax,1)
   1a854:	48 83 c0 01          	add    $0x1,%rax
   1a858:	49 39 c5             	cmp    %rax,%r13
   1a85b:	75 eb                	jne    1a848 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3238>
   1a85d:	e9 2e d2 ff ff       	jmp    17a90 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x480>
         if (depth == 16) {
   1a862:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   1a869:	10 
   1a86a:	0f 85 25 d2 ff ff    	jne    17a95 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x485>
            cur = a->out + stride*j; // start at the beginning of the row again
   1a870:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
   1a877:	00 
   1a878:	4c 03 78 18          	add    0x18(%rax),%r15
            for (i=0; i < x; ++i,cur+=output_bytes) {
   1a87c:	e9 46 d4 ff ff       	jmp    17cc7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x6b7>
   if (depth < 8) {
   1a881:	83 bc 24 f0 01 00 00 	cmpl   $0x7,0x1f0(%rsp)
   1a888:	07 
   1a889:	0f 8e 34 01 00 00    	jle    1a9c3 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x33b3>
   } else if (depth == 16) {
   1a88f:	83 bc 24 f0 01 00 00 	cmpl   $0x10,0x1f0(%rsp)
   1a896:	10 
   1a897:	0f 85 d7 00 00 00    	jne    1a974 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3364>
      stbi_uc *cur = a->out;
   1a89d:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
   1a8a4:	00 
      for(i=0; i < x*y*out_n; ++i,cur16++,cur+=2) {
   1a8a5:	8b bc 24 a0 00 00 00 	mov    0xa0(%rsp),%edi
      stbi_uc *cur = a->out;
   1a8ac:	48 8b 70 18          	mov    0x18(%rax),%rsi
      for(i=0; i < x*y*out_n; ++i,cur16++,cur+=2) {
   1a8b0:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   1a8b7:	0f af c7             	imul   %edi,%eax
   1a8ba:	8b bc 24 a4 00 00 00 	mov    0xa4(%rsp),%edi
   1a8c1:	0f af c7             	imul   %edi,%eax
   1a8c4:	85 c0                	test   %eax,%eax
   1a8c6:	0f 84 a8 00 00 00    	je     1a974 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3364>
   1a8cc:	8d 50 ff             	lea    -0x1(%rax),%edx
   1a8cf:	83 fa 06             	cmp    $0x6,%edx
   1a8d2:	0f 86 ba 0f 00 00    	jbe    1b892 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x4282>
   1a8d8:	89 c1                	mov    %eax,%ecx
   1a8da:	48 89 f2             	mov    %rsi,%rdx
   1a8dd:	c1 e9 03             	shr    $0x3,%ecx
   1a8e0:	48 c1 e1 04          	shl    $0x4,%rcx
   1a8e4:	48 01 f1             	add    %rsi,%rcx
         *cur16 = (cur[0] << 8) | cur[1];
   1a8e7:	f3 0f 6f 02          	movdqu (%rdx),%xmm0
   1a8eb:	48 83 c2 10          	add    $0x10,%rdx
   1a8ef:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   1a8f3:	66 0f 71 f0 08       	psllw  $0x8,%xmm0
   1a8f8:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   1a8fd:	66 0f eb c1          	por    %xmm1,%xmm0
   1a901:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
      for(i=0; i < x*y*out_n; ++i,cur16++,cur+=2) {
   1a905:	48 39 ca             	cmp    %rcx,%rdx
   1a908:	75 dd                	jne    1a8e7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x32d7>
   1a90a:	89 c2                	mov    %eax,%edx
   1a90c:	83 e2 f8             	and    $0xfffffff8,%edx
   1a90f:	89 d1                	mov    %edx,%ecx
   1a911:	48 8d 0c 4e          	lea    (%rsi,%rcx,2),%rcx
   1a915:	a8 07                	test   $0x7,%al
   1a917:	74 5b                	je     1a974 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3364>
   1a919:	89 c7                	mov    %eax,%edi
   1a91b:	29 d7                	sub    %edx,%edi
   1a91d:	44 8d 47 ff          	lea    -0x1(%rdi),%r8d
   1a921:	41 83 f8 02          	cmp    $0x2,%r8d
   1a925:	76 31                	jbe    1a958 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3348>
   1a927:	41 89 d0             	mov    %edx,%r8d
   1a92a:	4a 8d 34 46          	lea    (%rsi,%r8,2),%rsi
         *cur16 = (cur[0] << 8) | cur[1];
   1a92e:	f3 0f 7e 06          	movq   (%rsi),%xmm0
   1a932:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   1a936:	66 0f 71 f0 08       	psllw  $0x8,%xmm0
   1a93b:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   1a940:	66 0f eb c1          	por    %xmm1,%xmm0
   1a944:	66 0f d6 06          	movq   %xmm0,(%rsi)
      for(i=0; i < x*y*out_n; ++i,cur16++,cur+=2) {
   1a948:	89 fe                	mov    %edi,%esi
   1a94a:	83 e6 fc             	and    $0xfffffffc,%esi
   1a94d:	01 f2                	add    %esi,%edx
   1a94f:	83 e7 03             	and    $0x3,%edi
   1a952:	48 8d 0c 71          	lea    (%rcx,%rsi,2),%rcx
   1a956:	74 1c                	je     1a974 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3364>
   1a958:	8d 72 01             	lea    0x1(%rdx),%esi
         *cur16 = (cur[0] << 8) | cur[1];
   1a95b:	66 c1 01 08          	rolw   $0x8,(%rcx)
      for(i=0; i < x*y*out_n; ++i,cur16++,cur+=2) {
   1a95f:	39 c6                	cmp    %eax,%esi
   1a961:	73 11                	jae    1a974 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3364>
   1a963:	83 c2 02             	add    $0x2,%edx
         *cur16 = (cur[0] << 8) | cur[1];
   1a966:	66 c1 41 02 08       	rolw   $0x8,0x2(%rcx)
      for(i=0; i < x*y*out_n; ++i,cur16++,cur+=2) {
   1a96b:	39 c2                	cmp    %eax,%edx
   1a96d:	73 05                	jae    1a974 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3364>
         *cur16 = (cur[0] << 8) | cur[1];
   1a96f:	66 c1 41 04 08       	rolw   $0x8,0x4(%rcx)
   return 1;
   1a974:	b8 01 00 00 00       	mov    $0x1,%eax
   1a979:	e9 84 cf ff ff       	jmp    17902 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2f2>
   1a97e:	48 8d 15 ef d0 01 00 	lea    0x1d0ef(%rip),%rdx        # 37a74 <_ZSt19piecewise_construct+0x12d>
   1a985:	e9 6d cf ff ff       	jmp    178f7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e7>
            STBI__CASE(STBI__F_paeth_first)  { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],0,0)); } break;
   1a98a:	45 89 cb             	mov    %r9d,%r11d
   1a98d:	31 c9                	xor    %ecx,%ecx
   1a98f:	45 31 ff             	xor    %r15d,%r15d
   1a992:	e9 43 e9 ff ff       	jmp    192da <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1cca>
            STBI__CASE(STBI__F_up)           { cur[k] = STBI__BYTECAST(raw[k] + prior[k]); } break;
   1a997:	44 89 db             	mov    %r11d,%ebx
   1a99a:	31 f6                	xor    %esi,%esi
   1a99c:	45 31 ff             	xor    %r15d,%r15d
   1a99f:	e9 04 d2 ff ff       	jmp    17ba8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x598>
            STBI__CASE(STBI__F_none)         { cur[k] = raw[k]; } break;
   1a9a4:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
   1a9a8:	41 89 f2             	mov    %esi,%r10d
   1a9ab:	31 d2                	xor    %edx,%edx
   1a9ad:	e9 36 fc ff ff       	jmp    1a5e8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2fd8>
            STBI__CASE(STBI__F_sub)          { cur[k] = STBI__BYTECAST(raw[k] + cur[k- output_bytes]); } break;
   1a9b2:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
   1a9b9:	45 89 cb             	mov    %r9d,%r11d
   1a9bc:	31 c9                	xor    %ecx,%ecx
   1a9be:	e9 2f e6 ff ff       	jmp    18ff2 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x19e2>
   1a9c3:	8b b4 24 a0 01 00 00 	mov    0x1a0(%rsp),%esi
         stbi_uc *in  = a->out + stride*j + x*out_n - img_width_bytes;
   1a9ca:	8b 84 24 c8 00 00 00 	mov    0xc8(%rsp),%eax
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1a9d1:	45 31 c9             	xor    %r9d,%r9d
         stbi_uc *in  = a->out + stride*j + x*out_n - img_width_bytes;
   1a9d4:	8b 94 24 cc 00 00 00 	mov    0xcc(%rsp),%edx
               for (q=x-1; q >= 0; --q) {
   1a9db:	8b 9c 24 90 00 00 00 	mov    0x90(%rsp),%ebx
   1a9e2:	8d 7e fc             	lea    -0x4(%rsi),%edi
         stbi_uc scale = (color == 0) ? stbi__depth_scale_table[depth] : 1; // scale grayscale values to 0..255 range
   1a9e5:	4c 63 bc 24 f0 01 00 	movslq 0x1f0(%rsp),%r15
   1a9ec:	00 
   1a9ed:	48 8b ac 24 80 00 00 	mov    0x80(%rsp),%rbp
   1a9f4:	00 
   1a9f5:	48 29 c2             	sub    %rax,%rdx
   1a9f8:	89 f8                	mov    %edi,%eax
   1a9fa:	89 bc 24 c0 00 00 00 	mov    %edi,0xc0(%rsp)
               for (q=x-1; q >= 0; --q) {
   1aa01:	44 8d 5b ff          	lea    -0x1(%rbx),%r11d
   1aa05:	c1 e8 02             	shr    $0x2,%eax
   1aa08:	49 89 d6             	mov    %rdx,%r14
   1aa0b:	4c 89 3c 24          	mov    %r15,(%rsp)
   1aa0f:	44 8b 94 24 f0 01 00 	mov    0x1f0(%rsp),%r10d
   1aa16:	00 
   1aa17:	8d 50 01             	lea    0x1(%rax),%edx
            for (k=x*img_n; k >= 4; k-=4, ++in) {
   1aa1a:	f7 d8                	neg    %eax
   1aa1c:	44 89 5c 24 58       	mov    %r11d,0x58(%rsp)
   1aa21:	8d 04 87             	lea    (%rdi,%rax,4),%eax
   1aa24:	8d 7e fe             	lea    -0x2(%rsi),%edi
   1aa27:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
   1aa2c:	89 84 24 9c 00 00 00 	mov    %eax,0x9c(%rsp)
   1aa33:	89 f8                	mov    %edi,%eax
   1aa35:	d1 e8                	shr    %eax
   1aa37:	89 94 24 ac 00 00 00 	mov    %edx,0xac(%rsp)
   1aa3e:	48 c1 e2 02          	shl    $0x2,%rdx
   1aa42:	44 8d 60 01          	lea    0x1(%rax),%r12d
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1aa46:	f7 d8                	neg    %eax
   1aa48:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
   1aa4d:	44 89 da             	mov    %r11d,%edx
   1aa50:	8d 04 47             	lea    (%rdi,%rax,2),%eax
   1aa53:	4b 8d 34 24          	lea    (%r12,%r12,1),%rsi
   1aa57:	44 89 64 24 70       	mov    %r12d,0x70(%rsp)
   1aa5c:	89 84 24 a0 00 00 00 	mov    %eax,0xa0(%rsp)
   1aa63:	42 8d 04 9d 00 00 00 	lea    0x0(,%r11,4),%eax
   1aa6a:	00 
   1aa6b:	48 98                	cltq
   1aa6d:	89 bc 24 b0 00 00 00 	mov    %edi,0xb0(%rsp)
   1aa74:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   1aa79:	8d 44 5b fd          	lea    -0x3(%rbx,%rbx,2),%eax
      for (j=0; j < y; ++j) {
   1aa7d:	31 db                	xor    %ebx,%ebx
   1aa7f:	48 98                	cltq
   1aa81:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
   1aa86:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   1aa8b:	49 63 c3             	movslq %r11d,%rax
   1aa8e:	44 8b 9c 24 a8 00 00 	mov    0xa8(%rsp),%r11d
   1aa95:	00 
   1aa96:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   1aa9d:	00 
   1aa9e:	48 29 d0             	sub    %rdx,%rax
   1aaa1:	4c 8d 2c 85 fc ff ff 	lea    -0x4(,%rax,4),%r13
   1aaa8:	ff 
   1aaa9:	4c 89 6c 24 50       	mov    %r13,0x50(%rsp)
   1aaae:	66 90                	xchg   %ax,%ax
         stbi_uc *cur = a->out + stride*j;
   1aab0:	48 8b 75 18          	mov    0x18(%rbp),%rsi
   1aab4:	44 89 c9             	mov    %r9d,%ecx
         stbi_uc scale = (color == 0) ? stbi__depth_scale_table[depth] : 1; // scale grayscale values to 0..255 range
   1aab7:	ba 01 00 00 00       	mov    $0x1,%edx
   1aabc:	44 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%r8d
   1aac3:	00 
         stbi_uc *in  = a->out + stride*j + x*out_n - img_width_bytes;
   1aac4:	4a 8d 04 31          	lea    (%rcx,%r14,1),%rax
         stbi_uc *cur = a->out + stride*j;
   1aac8:	48 8d 3c 0e          	lea    (%rsi,%rcx,1),%rdi
         stbi_uc *in  = a->out + stride*j + x*out_n - img_width_bytes;
   1aacc:	48 01 c6             	add    %rax,%rsi
         stbi_uc scale = (color == 0) ? stbi__depth_scale_table[depth] : 1; // scale grayscale values to 0..255 range
   1aacf:	45 85 c0             	test   %r8d,%r8d
   1aad2:	75 10                	jne    1aae4 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34d4>
   1aad4:	4c 8b 3c 24          	mov    (%rsp),%r15
   1aad8:	48 8d 15 69 d8 01 00 	lea    0x1d869(%rip),%rdx        # 38348 <_ZL23stbi__depth_scale_table>
   1aadf:	42 0f b6 14 3a       	movzbl (%rdx,%r15,1),%edx
         if (depth == 4) {
   1aae4:	41 83 fa 04          	cmp    $0x4,%r10d
   1aae8:	0f 84 c9 00 00 00    	je     1abb7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x35a7>
         } else if (depth == 2) {
   1aaee:	41 83 fa 02          	cmp    $0x2,%r10d
   1aaf2:	0f 84 53 01 00 00    	je     1ac4b <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x363b>
         } else if (depth == 1) {
   1aaf8:	41 83 fa 01          	cmp    $0x1,%r10d
   1aafc:	0f 84 68 02 00 00    	je     1ad6a <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x375a>
         if (img_n != out_n) {
   1ab02:	44 39 9c 24 a4 00 00 	cmp    %r11d,0xa4(%rsp)
   1ab09:	00 
   1ab0a:	74 5d                	je     1ab69 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3559>
            cur = a->out + stride*j;
   1ab0c:	48 03 4d 18          	add    0x18(%rbp),%rcx
            if (img_n == 1) {
   1ab10:	41 83 fb 01          	cmp    $0x1,%r11d
   1ab14:	74 73                	je     1ab89 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3579>
               for (q=x-1; q >= 0; --q) {
   1ab16:	83 7c 24 58 ff       	cmpl   $0xffffffff,0x58(%rsp)
   1ab1b:	74 4c                	je     1ab69 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3559>
   1ab1d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   1ab22:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   1ab27:	48 8d 14 39          	lea    (%rcx,%rdi,1),%rdx
   1ab2b:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
   1ab30:	48 01 c8             	add    %rcx,%rax
   1ab33:	48 01 f9             	add    %rdi,%rcx
   1ab36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ab3d:	00 00 00 
                  cur[q*4+3] = 255;
   1ab40:	c6 40 03 ff          	movb   $0xff,0x3(%rax)
                  cur[q*4+2] = cur[q*3+2];
   1ab44:	0f b6 72 02          	movzbl 0x2(%rdx),%esi
               for (q=x-1; q >= 0; --q) {
   1ab48:	48 83 e8 04          	sub    $0x4,%rax
   1ab4c:	48 83 ea 03          	sub    $0x3,%rdx
                  cur[q*4+2] = cur[q*3+2];
   1ab50:	40 88 70 06          	mov    %sil,0x6(%rax)
                  cur[q*4+1] = cur[q*3+1];
   1ab54:	0f b6 72 04          	movzbl 0x4(%rdx),%esi
   1ab58:	40 88 70 05          	mov    %sil,0x5(%rax)
                  cur[q*4+0] = cur[q*3+0];
   1ab5c:	0f b6 72 03          	movzbl 0x3(%rdx),%esi
   1ab60:	40 88 70 04          	mov    %sil,0x4(%rax)
               for (q=x-1; q >= 0; --q) {
   1ab64:	48 39 c1             	cmp    %rax,%rcx
   1ab67:	75 d7                	jne    1ab40 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3530>
      for (j=0; j < y; ++j) {
   1ab69:	8b bc 24 98 00 00 00 	mov    0x98(%rsp),%edi
   1ab70:	8d 43 01             	lea    0x1(%rbx),%eax
   1ab73:	41 01 f9             	add    %edi,%r9d
   1ab76:	8b 7c 24 5c          	mov    0x5c(%rsp),%edi
   1ab7a:	39 fb                	cmp    %edi,%ebx
   1ab7c:	0f 84 f2 fd ff ff    	je     1a974 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3364>
   1ab82:	89 c3                	mov    %eax,%ebx
   1ab84:	e9 27 ff ff ff       	jmp    1aab0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34a0>
               for (q=x-1; q >= 0; --q) {
   1ab89:	83 7c 24 58 ff       	cmpl   $0xffffffff,0x58(%rsp)
   1ab8e:	74 d9                	je     1ab69 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3559>
   1ab90:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
   1ab97:	00 
   1ab98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1ab9f:	00 
                  cur[q*2+1] = 255;
   1aba0:	c6 44 41 01 ff       	movb   $0xff,0x1(%rcx,%rax,2)
                  cur[q*2+0] = cur[q];
   1aba5:	0f b6 14 01          	movzbl (%rcx,%rax,1),%edx
   1aba9:	88 14 41             	mov    %dl,(%rcx,%rax,2)
               for (q=x-1; q >= 0; --q) {
   1abac:	48 83 e8 01          	sub    $0x1,%rax
   1abb0:	83 f8 ff             	cmp    $0xffffffff,%eax
   1abb3:	75 eb                	jne    1aba0 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3590>
   1abb5:	eb b2                	jmp    1ab69 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3559>
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1abb7:	83 bc 24 a0 01 00 00 	cmpl   $0x1,0x1a0(%rsp)
   1abbe:	01 
   1abbf:	0f 8e 89 0c 00 00    	jle    1b84e <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x423e>
   1abc5:	83 bc 24 b0 00 00 00 	cmpl   $0x1d,0xb0(%rsp)
   1abcc:	1d 
   1abcd:	76 1e                	jbe    1abed <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x35dd>
   1abcf:	4c 8b 7c 24 60       	mov    0x60(%rsp),%r15
   1abd4:	4e 8d 04 39          	lea    (%rcx,%r15,1),%r8
   1abd8:	4c 39 c0             	cmp    %r8,%rax
   1abdb:	0f 8d 57 03 00 00    	jge    1af38 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3928>
   1abe1:	4c 01 e0             	add    %r12,%rax
   1abe4:	48 39 c1             	cmp    %rax,%rcx
   1abe7:	0f 8d 4b 03 00 00    	jge    1af38 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3928>
   1abed:	4e 8d 2c 26          	lea    (%rsi,%r12,1),%r13
         stbi_uc *cur = a->out + stride*j;
   1abf1:	49 89 f8             	mov    %rdi,%r8
   1abf4:	0f 1f 40 00          	nopl   0x0(%rax)
               *cur++ = scale * ((*in >> 4)       );
   1abf8:	0f b6 06             	movzbl (%rsi),%eax
               *cur++ = scale * ((*in     ) & 0x0f);
   1abfb:	49 83 c0 02          	add    $0x2,%r8
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1abff:	48 83 c6 01          	add    $0x1,%rsi
               *cur++ = scale * ((*in >> 4)       );
   1ac03:	c0 e8 04             	shr    $0x4,%al
   1ac06:	0f af c2             	imul   %edx,%eax
   1ac09:	41 88 40 fe          	mov    %al,-0x2(%r8)
               *cur++ = scale * ((*in     ) & 0x0f);
   1ac0d:	0f b6 46 ff          	movzbl -0x1(%rsi),%eax
   1ac11:	83 e0 0f             	and    $0xf,%eax
   1ac14:	0f af c2             	imul   %edx,%eax
   1ac17:	41 88 40 ff          	mov    %al,-0x1(%r8)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1ac1b:	4c 39 ee             	cmp    %r13,%rsi
   1ac1e:	75 d8                	jne    1abf8 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x35e8>
               *cur++ = scale * ((*in     ) & 0x0f);
   1ac20:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1ac25:	4c 89 ee             	mov    %r13,%rsi
               *cur++ = scale * ((*in     ) & 0x0f);
   1ac28:	48 01 c7             	add    %rax,%rdi
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1ac2b:	8b 84 24 a0 00 00 00 	mov    0xa0(%rsp),%eax
            if (k > 0) *cur++ = scale * ((*in >> 4)       );
   1ac32:	83 f8 01             	cmp    $0x1,%eax
   1ac35:	0f 85 c7 fe ff ff    	jne    1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1ac3b:	0f b6 06             	movzbl (%rsi),%eax
   1ac3e:	c0 e8 04             	shr    $0x4,%al
   1ac41:	0f af c2             	imul   %edx,%eax
   1ac44:	88 07                	mov    %al,(%rdi)
   1ac46:	e9 b7 fe ff ff       	jmp    1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
            for (k=x*img_n; k >= 4; k-=4, ++in) {
   1ac4b:	83 bc 24 a0 01 00 00 	cmpl   $0x3,0x1a0(%rsp)
   1ac52:	03 
   1ac53:	0f 8e 01 0c 00 00    	jle    1b85a <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x424a>
   1ac59:	83 bc 24 c0 00 00 00 	cmpl   $0x3b,0xc0(%rsp)
   1ac60:	3b 
   1ac61:	76 23                	jbe    1ac86 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3676>
   1ac63:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
   1ac68:	4e 8d 04 39          	lea    (%rcx,%r15,1),%r8
   1ac6c:	4c 39 c0             	cmp    %r8,%rax
   1ac6f:	0f 8d f0 05 00 00    	jge    1b265 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c55>
   1ac75:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   1ac7a:	4c 01 f8             	add    %r15,%rax
   1ac7d:	48 39 c1             	cmp    %rax,%rcx
   1ac80:	0f 8d df 05 00 00    	jge    1b265 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c55>
   1ac86:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
         stbi_uc *cur = a->out + stride*j;
   1ac8b:	49 89 f8             	mov    %rdi,%r8
   1ac8e:	4c 8d 2c 06          	lea    (%rsi,%rax,1),%r13
   1ac92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
               *cur++ = scale * ((*in >> 6)       );
   1ac98:	0f b6 06             	movzbl (%rsi),%eax
               *cur++ = scale * ((*in     ) & 0x03);
   1ac9b:	49 83 c0 04          	add    $0x4,%r8
            for (k=x*img_n; k >= 4; k-=4, ++in) {
   1ac9f:	48 83 c6 01          	add    $0x1,%rsi
               *cur++ = scale * ((*in >> 6)       );
   1aca3:	c0 e8 06             	shr    $0x6,%al
   1aca6:	0f af c2             	imul   %edx,%eax
   1aca9:	41 88 40 fc          	mov    %al,-0x4(%r8)
               *cur++ = scale * ((*in >> 4) & 0x03);
   1acad:	0f b6 46 ff          	movzbl -0x1(%rsi),%eax
   1acb1:	c0 e8 04             	shr    $0x4,%al
   1acb4:	83 e0 03             	and    $0x3,%eax
   1acb7:	0f af c2             	imul   %edx,%eax
   1acba:	41 88 40 fd          	mov    %al,-0x3(%r8)
               *cur++ = scale * ((*in >> 2) & 0x03);
   1acbe:	0f b6 46 ff          	movzbl -0x1(%rsi),%eax
   1acc2:	c0 e8 02             	shr    $0x2,%al
   1acc5:	83 e0 03             	and    $0x3,%eax
   1acc8:	0f af c2             	imul   %edx,%eax
   1accb:	41 88 40 fe          	mov    %al,-0x2(%r8)
               *cur++ = scale * ((*in     ) & 0x03);
   1accf:	0f b6 46 ff          	movzbl -0x1(%rsi),%eax
   1acd3:	83 e0 03             	and    $0x3,%eax
   1acd6:	0f af c2             	imul   %edx,%eax
   1acd9:	41 88 40 ff          	mov    %al,-0x1(%r8)
            for (k=x*img_n; k >= 4; k-=4, ++in) {
   1acdd:	4c 39 ee             	cmp    %r13,%rsi
   1ace0:	75 b6                	jne    1ac98 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3688>
               *cur++ = scale * ((*in     ) & 0x03);
   1ace2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            for (k=x*img_n; k >= 4; k-=4, ++in) {
   1ace7:	44 8b 84 24 9c 00 00 	mov    0x9c(%rsp),%r8d
   1acee:	00 
   1acef:	4c 89 ee             	mov    %r13,%rsi
               *cur++ = scale * ((*in     ) & 0x03);
   1acf2:	48 01 c7             	add    %rax,%rdi
            if (k > 0) *cur++ = scale * ((*in >> 6)       );
   1acf5:	45 85 c0             	test   %r8d,%r8d
   1acf8:	0f 8e 04 fe ff ff    	jle    1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1acfe:	0f b6 06             	movzbl (%rsi),%eax
   1ad01:	c0 e8 06             	shr    $0x6,%al
   1ad04:	0f af c2             	imul   %edx,%eax
   1ad07:	88 07                	mov    %al,(%rdi)
            if (k > 1) *cur++ = scale * ((*in >> 4) & 0x03);
   1ad09:	41 83 f8 01          	cmp    $0x1,%r8d
   1ad0d:	0f 84 ef fd ff ff    	je     1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1ad13:	0f b6 06             	movzbl (%rsi),%eax
   1ad16:	c0 e8 04             	shr    $0x4,%al
   1ad19:	83 e0 03             	and    $0x3,%eax
   1ad1c:	0f af c2             	imul   %edx,%eax
   1ad1f:	88 47 01             	mov    %al,0x1(%rdi)
            if (k > 2) *cur++ = scale * ((*in >> 2) & 0x03);
   1ad22:	41 83 f8 03          	cmp    $0x3,%r8d
   1ad26:	0f 85 d6 fd ff ff    	jne    1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1ad2c:	0f b6 06             	movzbl (%rsi),%eax
   1ad2f:	c0 e8 02             	shr    $0x2,%al
   1ad32:	83 e0 03             	and    $0x3,%eax
   1ad35:	0f af c2             	imul   %edx,%eax
   1ad38:	88 47 02             	mov    %al,0x2(%rdi)
   1ad3b:	e9 c2 fd ff ff       	jmp    1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
            STBI__CASE(STBI__F_none)         { cur[k] = raw[k]; } break;
   1ad40:	44 89 ea             	mov    %r13d,%edx
   1ad43:	e9 bc f8 ff ff       	jmp    1a604 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2ff4>
            STBI__CASE(STBI__F_paeth_first)  { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],0,0)); } break;
   1ad48:	89 d9                	mov    %ebx,%ecx
   1ad4a:	e9 ba e5 ff ff       	jmp    19309 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1cf9>
            STBI__CASE(STBI__F_sub)          { cur[k] = STBI__BYTECAST(raw[k] + cur[k- output_bytes]); } break;
   1ad4f:	89 d9                	mov    %ebx,%ecx
   1ad51:	e9 d0 e2 ff ff       	jmp    19026 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x1a16>
            STBI__CASE(STBI__F_up)           { cur[k] = STBI__BYTECAST(raw[k] + prior[k]); } break;
   1ad56:	44 89 ee             	mov    %r13d,%esi
   1ad59:	e9 6e ce ff ff       	jmp    17bcc <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x5bc>
   1ad5e:	48 8d 15 1e cd 01 00 	lea    0x1cd1e(%rip),%rdx        # 37a83 <_ZSt19piecewise_construct+0x13c>
   1ad65:	e9 8d cb ff ff       	jmp    178f7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2e7>
            for (k=x*img_n; k >= 8; k-=8, ++in) {
   1ad6a:	44 8b bc 24 a0 01 00 	mov    0x1a0(%rsp),%r15d
   1ad71:	00 
   1ad72:	41 83 ff 07          	cmp    $0x7,%r15d
   1ad76:	0f 8e 0e 0b 00 00    	jle    1b88a <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x427a>
   1ad7c:	41 83 ef 08          	sub    $0x8,%r15d
   1ad80:	44 89 bc 24 a8 00 00 	mov    %r15d,0xa8(%rsp)
   1ad87:	00 
   1ad88:	41 83 ff 77          	cmp    $0x77,%r15d
   1ad8c:	76 27                	jbe    1adb5 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x37a5>
   1ad8e:	41 c1 ef 03          	shr    $0x3,%r15d
   1ad92:	45 89 f8             	mov    %r15d,%r8d
   1ad95:	41 83 c0 01          	add    $0x1,%r8d
   1ad99:	4e 8d 2c c1          	lea    (%rcx,%r8,8),%r13
   1ad9d:	4d 89 c7             	mov    %r8,%r15
   1ada0:	4c 39 e8             	cmp    %r13,%rax
   1ada3:	0f 8d bb 06 00 00    	jge    1b464 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3e54>
   1ada9:	4c 01 c0             	add    %r8,%rax
   1adac:	48 39 c1             	cmp    %rax,%rcx
   1adaf:	0f 8d af 06 00 00    	jge    1b464 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3e54>
   1adb5:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
         stbi_uc *in  = a->out + stride*j + x*out_n - img_width_bytes;
   1adbc:	49 89 f0             	mov    %rsi,%r8
         stbi_uc *cur = a->out + stride*j;
   1adbf:	49 89 fd             	mov    %rdi,%r13
   1adc2:	c1 e8 03             	shr    $0x3,%eax
   1adc5:	83 c0 01             	add    $0x1,%eax
   1adc8:	4c 8d 3c 06          	lea    (%rsi,%rax,1),%r15
               *cur++ = scale * ((*in >> 7)       );
   1adcc:	41 0f b6 00          	movzbl (%r8),%eax
               *cur++ = scale * ((*in     ) & 0x01);
   1add0:	49 83 c5 08          	add    $0x8,%r13
            for (k=x*img_n; k >= 8; k-=8, ++in) {
   1add4:	49 83 c0 01          	add    $0x1,%r8
               *cur++ = scale * ((*in >> 7)       );
   1add8:	c0 e8 07             	shr    $0x7,%al
   1addb:	0f af c2             	imul   %edx,%eax
   1adde:	41 88 45 f8          	mov    %al,-0x8(%r13)
               *cur++ = scale * ((*in >> 6) & 0x01);
   1ade2:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1ade7:	c0 e8 06             	shr    $0x6,%al
   1adea:	83 e0 01             	and    $0x1,%eax
   1aded:	0f af c2             	imul   %edx,%eax
   1adf0:	41 88 45 f9          	mov    %al,-0x7(%r13)
               *cur++ = scale * ((*in >> 5) & 0x01);
   1adf4:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1adf9:	c0 e8 05             	shr    $0x5,%al
   1adfc:	83 e0 01             	and    $0x1,%eax
   1adff:	0f af c2             	imul   %edx,%eax
   1ae02:	41 88 45 fa          	mov    %al,-0x6(%r13)
               *cur++ = scale * ((*in >> 4) & 0x01);
   1ae06:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1ae0b:	c0 e8 04             	shr    $0x4,%al
   1ae0e:	83 e0 01             	and    $0x1,%eax
   1ae11:	0f af c2             	imul   %edx,%eax
   1ae14:	41 88 45 fb          	mov    %al,-0x5(%r13)
               *cur++ = scale * ((*in >> 3) & 0x01);
   1ae18:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1ae1d:	c0 e8 03             	shr    $0x3,%al
   1ae20:	83 e0 01             	and    $0x1,%eax
   1ae23:	0f af c2             	imul   %edx,%eax
   1ae26:	41 88 45 fc          	mov    %al,-0x4(%r13)
               *cur++ = scale * ((*in >> 2) & 0x01);
   1ae2a:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1ae2f:	c0 e8 02             	shr    $0x2,%al
   1ae32:	83 e0 01             	and    $0x1,%eax
   1ae35:	0f af c2             	imul   %edx,%eax
   1ae38:	41 88 45 fd          	mov    %al,-0x3(%r13)
               *cur++ = scale * ((*in >> 1) & 0x01);
   1ae3c:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1ae41:	d0 e8                	shr    %al
   1ae43:	83 e0 01             	and    $0x1,%eax
   1ae46:	0f af c2             	imul   %edx,%eax
   1ae49:	41 88 45 fe          	mov    %al,-0x2(%r13)
               *cur++ = scale * ((*in     ) & 0x01);
   1ae4d:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1ae52:	83 e0 01             	and    $0x1,%eax
   1ae55:	0f af c2             	imul   %edx,%eax
   1ae58:	41 88 45 ff          	mov    %al,-0x1(%r13)
            for (k=x*img_n; k >= 8; k-=8, ++in) {
   1ae5c:	4d 39 f8             	cmp    %r15,%r8
   1ae5f:	0f 85 67 ff ff ff    	jne    1adcc <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x37bc>
   1ae65:	44 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%r15d
   1ae6c:	00 
   1ae6d:	45 89 f8             	mov    %r15d,%r8d
   1ae70:	41 c1 e8 03          	shr    $0x3,%r8d
   1ae74:	41 8d 40 01          	lea    0x1(%r8),%eax
   1ae78:	41 f7 d8             	neg    %r8d
               *cur++ = scale * ((*in     ) & 0x01);
   1ae7b:	48 8d 3c c7          	lea    (%rdi,%rax,8),%rdi
            for (k=x*img_n; k >= 8; k-=8, ++in) {
   1ae7f:	47 8d 04 c7          	lea    (%r15,%r8,8),%r8d
   1ae83:	48 01 c6             	add    %rax,%rsi
            if (k > 0) *cur++ = scale * ((*in >> 7)       );
   1ae86:	45 85 c0             	test   %r8d,%r8d
   1ae89:	0f 8e 73 fc ff ff    	jle    1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1ae8f:	0f b6 06             	movzbl (%rsi),%eax
   1ae92:	c0 e8 07             	shr    $0x7,%al
   1ae95:	0f af c2             	imul   %edx,%eax
   1ae98:	88 07                	mov    %al,(%rdi)
            if (k > 1) *cur++ = scale * ((*in >> 6) & 0x01);
   1ae9a:	41 83 f8 01          	cmp    $0x1,%r8d
   1ae9e:	0f 84 5e fc ff ff    	je     1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1aea4:	0f b6 06             	movzbl (%rsi),%eax
   1aea7:	c0 e8 06             	shr    $0x6,%al
   1aeaa:	83 e0 01             	and    $0x1,%eax
   1aead:	0f af c2             	imul   %edx,%eax
   1aeb0:	88 47 01             	mov    %al,0x1(%rdi)
            if (k > 2) *cur++ = scale * ((*in >> 5) & 0x01);
   1aeb3:	41 83 f8 02          	cmp    $0x2,%r8d
   1aeb7:	0f 84 45 fc ff ff    	je     1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1aebd:	0f b6 06             	movzbl (%rsi),%eax
   1aec0:	c0 e8 05             	shr    $0x5,%al
   1aec3:	83 e0 01             	and    $0x1,%eax
   1aec6:	0f af c2             	imul   %edx,%eax
   1aec9:	88 47 02             	mov    %al,0x2(%rdi)
            if (k > 3) *cur++ = scale * ((*in >> 4) & 0x01);
   1aecc:	41 83 f8 03          	cmp    $0x3,%r8d
   1aed0:	0f 84 2c fc ff ff    	je     1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1aed6:	0f b6 06             	movzbl (%rsi),%eax
   1aed9:	c0 e8 04             	shr    $0x4,%al
   1aedc:	83 e0 01             	and    $0x1,%eax
   1aedf:	0f af c2             	imul   %edx,%eax
   1aee2:	88 47 03             	mov    %al,0x3(%rdi)
            if (k > 4) *cur++ = scale * ((*in >> 3) & 0x01);
   1aee5:	41 83 f8 04          	cmp    $0x4,%r8d
   1aee9:	0f 84 13 fc ff ff    	je     1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1aeef:	0f b6 06             	movzbl (%rsi),%eax
   1aef2:	c0 e8 03             	shr    $0x3,%al
   1aef5:	83 e0 01             	and    $0x1,%eax
   1aef8:	0f af c2             	imul   %edx,%eax
   1aefb:	88 47 04             	mov    %al,0x4(%rdi)
            if (k > 5) *cur++ = scale * ((*in >> 2) & 0x01);
   1aefe:	41 83 f8 05          	cmp    $0x5,%r8d
   1af02:	0f 84 fa fb ff ff    	je     1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1af08:	0f b6 06             	movzbl (%rsi),%eax
   1af0b:	c0 e8 02             	shr    $0x2,%al
   1af0e:	83 e0 01             	and    $0x1,%eax
   1af11:	0f af c2             	imul   %edx,%eax
   1af14:	88 47 05             	mov    %al,0x5(%rdi)
            if (k > 6) *cur++ = scale * ((*in >> 1) & 0x01);
   1af17:	41 83 f8 07          	cmp    $0x7,%r8d
   1af1b:	0f 85 e1 fb ff ff    	jne    1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1af21:	0f b6 06             	movzbl (%rsi),%eax
   1af24:	d0 e8                	shr    %al
   1af26:	83 e0 01             	and    $0x1,%eax
   1af29:	0f af c2             	imul   %edx,%eax
   1af2c:	88 47 06             	mov    %al,0x6(%rdi)
   1af2f:	e9 ce fb ff ff       	jmp    1ab02 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x34f2>
   1af34:	0f 1f 40 00          	nopl   0x0(%rax)
   1af38:	66 44 0f 6f 2d 3f da 	movdqa 0x1da3f(%rip),%xmm13        # 38980 <_ZL11stbi__bmask+0x200>
   1af3f:	01 00 
   1af41:	66 0f 6e c2          	movd   %edx,%xmm0
   1af45:	8b 44 24 70          	mov    0x70(%rsp),%eax
   1af49:	66 0f 60 c0          	punpcklbw %xmm0,%xmm0
   1af4d:	66 0f 6f e0          	movdqa %xmm0,%xmm4
   1af51:	c1 e8 04             	shr    $0x4,%eax
   1af54:	66 0f 61 e0          	punpcklwd %xmm0,%xmm4
   1af58:	48 c1 e0 04          	shl    $0x4,%rax
   1af5c:	66 0f 6f 05 ac d8 01 	movdqa 0x1d8ac(%rip),%xmm0        # 38810 <_ZL11stbi__bmask+0x90>
   1af63:	00 
   1af64:	66 0f 70 e4 00       	pshufd $0x0,%xmm4,%xmm4
   1af69:	49 89 c0             	mov    %rax,%r8
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1af6c:	31 c0                	xor    %eax,%eax
   1af6e:	66 0f 6f ec          	movdqa %xmm4,%xmm5
   1af72:	66 0f 60 ec          	punpcklbw %xmm4,%xmm5
   1af76:	66 0f 68 e4          	punpckhbw %xmm4,%xmm4
               *cur++ = scale * ((*in >> 4)       );
   1af7a:	f3 0f 6f 0c 06       	movdqu (%rsi,%rax,1),%xmm1
   1af7f:	66 0f 6f d1          	movdqa %xmm1,%xmm2
               *cur++ = scale * ((*in     ) & 0x0f);
   1af83:	66 41 0f db cd       	pand   %xmm13,%xmm1
               *cur++ = scale * ((*in >> 4)       );
   1af88:	66 0f 71 d2 04       	psrlw  $0x4,%xmm2
   1af8d:	66 41 0f db d5       	pand   %xmm13,%xmm2
   1af92:	66 0f 6f da          	movdqa %xmm2,%xmm3
   1af96:	66 0f 60 da          	punpcklbw %xmm2,%xmm3
   1af9a:	66 0f 68 d2          	punpckhbw %xmm2,%xmm2
   1af9e:	66 0f d5 dd          	pmullw %xmm5,%xmm3
   1afa2:	66 0f d5 d4          	pmullw %xmm4,%xmm2
   1afa6:	66 0f db d8          	pand   %xmm0,%xmm3
   1afaa:	66 0f db d0          	pand   %xmm0,%xmm2
   1afae:	66 0f 67 da          	packuswb %xmm2,%xmm3
               *cur++ = scale * ((*in     ) & 0x0f);
   1afb2:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1afb6:	66 0f 60 d1          	punpcklbw %xmm1,%xmm2
   1afba:	66 0f 68 c9          	punpckhbw %xmm1,%xmm1
   1afbe:	66 0f d5 d5          	pmullw %xmm5,%xmm2
   1afc2:	66 0f d5 cc          	pmullw %xmm4,%xmm1
   1afc6:	66 0f db d0          	pand   %xmm0,%xmm2
   1afca:	66 0f db c8          	pand   %xmm0,%xmm1
   1afce:	66 0f 67 d1          	packuswb %xmm1,%xmm2
   1afd2:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   1afd6:	66 0f 60 ca          	punpcklbw %xmm2,%xmm1
   1afda:	66 0f 68 da          	punpckhbw %xmm2,%xmm3
   1afde:	0f 11 0c 47          	movups %xmm1,(%rdi,%rax,2)
   1afe2:	0f 11 5c 47 10       	movups %xmm3,0x10(%rdi,%rax,2)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1afe7:	48 83 c0 10          	add    $0x10,%rax
   1afeb:	49 39 c0             	cmp    %rax,%r8
   1afee:	75 8a                	jne    1af7a <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x396a>
   1aff0:	8b 44 24 70          	mov    0x70(%rsp),%eax
   1aff4:	44 8b bc 24 a0 01 00 	mov    0x1a0(%rsp),%r15d
   1affb:	00 
   1affc:	83 e0 f0             	and    $0xfffffff0,%eax
   1afff:	41 89 c0             	mov    %eax,%r8d
   1b002:	4c 8d 2c 47          	lea    (%rdi,%rax,2),%r13
   1b006:	41 f7 d8             	neg    %r8d
   1b009:	47 8d 3c 47          	lea    (%r15,%r8,2),%r15d
   1b00d:	4c 8d 04 06          	lea    (%rsi,%rax,1),%r8
   1b011:	f6 44 24 70 0f       	testb  $0xf,0x70(%rsp)
   1b016:	0f 84 40 02 00 00    	je     1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b01c:	41 0f b6 00          	movzbl (%r8),%eax
   1b020:	c0 e8 04             	shr    $0x4,%al
   1b023:	0f af c2             	imul   %edx,%eax
   1b026:	41 88 45 00          	mov    %al,0x0(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b02a:	41 0f b6 00          	movzbl (%r8),%eax
   1b02e:	83 e0 0f             	and    $0xf,%eax
   1b031:	0f af c2             	imul   %edx,%eax
   1b034:	41 88 45 01          	mov    %al,0x1(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b038:	41 83 ff 03          	cmp    $0x3,%r15d
   1b03c:	0f 8e 1a 02 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b042:	41 0f b6 40 01       	movzbl 0x1(%r8),%eax
   1b047:	c0 e8 04             	shr    $0x4,%al
   1b04a:	0f af c2             	imul   %edx,%eax
   1b04d:	41 88 45 02          	mov    %al,0x2(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b051:	41 0f b6 40 01       	movzbl 0x1(%r8),%eax
   1b056:	83 e0 0f             	and    $0xf,%eax
   1b059:	0f af c2             	imul   %edx,%eax
   1b05c:	41 88 45 03          	mov    %al,0x3(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b060:	41 83 ff 05          	cmp    $0x5,%r15d
   1b064:	0f 8e f2 01 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b06a:	41 0f b6 40 02       	movzbl 0x2(%r8),%eax
   1b06f:	c0 e8 04             	shr    $0x4,%al
   1b072:	0f af c2             	imul   %edx,%eax
   1b075:	41 88 45 04          	mov    %al,0x4(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b079:	41 0f b6 40 02       	movzbl 0x2(%r8),%eax
   1b07e:	83 e0 0f             	and    $0xf,%eax
   1b081:	0f af c2             	imul   %edx,%eax
   1b084:	41 88 45 05          	mov    %al,0x5(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b088:	41 83 ff 07          	cmp    $0x7,%r15d
   1b08c:	0f 8e ca 01 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b092:	41 0f b6 40 03       	movzbl 0x3(%r8),%eax
   1b097:	c0 e8 04             	shr    $0x4,%al
   1b09a:	0f af c2             	imul   %edx,%eax
   1b09d:	41 88 45 06          	mov    %al,0x6(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b0a1:	41 0f b6 40 03       	movzbl 0x3(%r8),%eax
   1b0a6:	83 e0 0f             	and    $0xf,%eax
   1b0a9:	0f af c2             	imul   %edx,%eax
   1b0ac:	41 88 45 07          	mov    %al,0x7(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b0b0:	41 83 ff 09          	cmp    $0x9,%r15d
   1b0b4:	0f 8e a2 01 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b0ba:	41 0f b6 40 04       	movzbl 0x4(%r8),%eax
   1b0bf:	c0 e8 04             	shr    $0x4,%al
   1b0c2:	0f af c2             	imul   %edx,%eax
   1b0c5:	41 88 45 08          	mov    %al,0x8(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b0c9:	41 0f b6 40 04       	movzbl 0x4(%r8),%eax
   1b0ce:	83 e0 0f             	and    $0xf,%eax
   1b0d1:	0f af c2             	imul   %edx,%eax
   1b0d4:	41 88 45 09          	mov    %al,0x9(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b0d8:	41 83 ff 0b          	cmp    $0xb,%r15d
   1b0dc:	0f 8e 7a 01 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b0e2:	41 0f b6 40 05       	movzbl 0x5(%r8),%eax
   1b0e7:	c0 e8 04             	shr    $0x4,%al
   1b0ea:	0f af c2             	imul   %edx,%eax
   1b0ed:	41 88 45 0a          	mov    %al,0xa(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b0f1:	41 0f b6 40 05       	movzbl 0x5(%r8),%eax
   1b0f6:	83 e0 0f             	and    $0xf,%eax
   1b0f9:	0f af c2             	imul   %edx,%eax
   1b0fc:	41 88 45 0b          	mov    %al,0xb(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b100:	41 83 ff 0d          	cmp    $0xd,%r15d
   1b104:	0f 8e 52 01 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b10a:	41 0f b6 40 06       	movzbl 0x6(%r8),%eax
   1b10f:	c0 e8 04             	shr    $0x4,%al
   1b112:	0f af c2             	imul   %edx,%eax
   1b115:	41 88 45 0c          	mov    %al,0xc(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b119:	41 0f b6 40 06       	movzbl 0x6(%r8),%eax
   1b11e:	83 e0 0f             	and    $0xf,%eax
   1b121:	0f af c2             	imul   %edx,%eax
   1b124:	41 88 45 0d          	mov    %al,0xd(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b128:	41 83 ff 0f          	cmp    $0xf,%r15d
   1b12c:	0f 8e 2a 01 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b132:	41 0f b6 40 07       	movzbl 0x7(%r8),%eax
   1b137:	c0 e8 04             	shr    $0x4,%al
   1b13a:	0f af c2             	imul   %edx,%eax
   1b13d:	41 88 45 0e          	mov    %al,0xe(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b141:	41 0f b6 40 07       	movzbl 0x7(%r8),%eax
   1b146:	83 e0 0f             	and    $0xf,%eax
   1b149:	0f af c2             	imul   %edx,%eax
   1b14c:	41 88 45 0f          	mov    %al,0xf(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b150:	41 83 ff 11          	cmp    $0x11,%r15d
   1b154:	0f 8e 02 01 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b15a:	41 0f b6 40 08       	movzbl 0x8(%r8),%eax
   1b15f:	c0 e8 04             	shr    $0x4,%al
   1b162:	0f af c2             	imul   %edx,%eax
   1b165:	41 88 45 10          	mov    %al,0x10(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b169:	41 0f b6 40 08       	movzbl 0x8(%r8),%eax
   1b16e:	83 e0 0f             	and    $0xf,%eax
   1b171:	0f af c2             	imul   %edx,%eax
   1b174:	41 88 45 11          	mov    %al,0x11(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b178:	41 83 ff 13          	cmp    $0x13,%r15d
   1b17c:	0f 8e da 00 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b182:	41 0f b6 40 09       	movzbl 0x9(%r8),%eax
   1b187:	c0 e8 04             	shr    $0x4,%al
   1b18a:	0f af c2             	imul   %edx,%eax
   1b18d:	41 88 45 12          	mov    %al,0x12(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b191:	41 0f b6 40 09       	movzbl 0x9(%r8),%eax
   1b196:	83 e0 0f             	and    $0xf,%eax
   1b199:	0f af c2             	imul   %edx,%eax
   1b19c:	41 88 45 13          	mov    %al,0x13(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b1a0:	41 83 ff 15          	cmp    $0x15,%r15d
   1b1a4:	0f 8e b2 00 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b1aa:	41 0f b6 40 0a       	movzbl 0xa(%r8),%eax
   1b1af:	c0 e8 04             	shr    $0x4,%al
   1b1b2:	0f af c2             	imul   %edx,%eax
   1b1b5:	41 88 45 14          	mov    %al,0x14(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b1b9:	41 0f b6 40 0a       	movzbl 0xa(%r8),%eax
   1b1be:	83 e0 0f             	and    $0xf,%eax
   1b1c1:	0f af c2             	imul   %edx,%eax
   1b1c4:	41 88 45 15          	mov    %al,0x15(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b1c8:	41 83 ff 17          	cmp    $0x17,%r15d
   1b1cc:	0f 8e 8a 00 00 00    	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b1d2:	41 0f b6 40 0b       	movzbl 0xb(%r8),%eax
   1b1d7:	c0 e8 04             	shr    $0x4,%al
   1b1da:	0f af c2             	imul   %edx,%eax
   1b1dd:	41 88 45 16          	mov    %al,0x16(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b1e1:	41 0f b6 40 0b       	movzbl 0xb(%r8),%eax
   1b1e6:	83 e0 0f             	and    $0xf,%eax
   1b1e9:	0f af c2             	imul   %edx,%eax
   1b1ec:	41 88 45 17          	mov    %al,0x17(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b1f0:	41 83 ff 19          	cmp    $0x19,%r15d
   1b1f4:	7e 66                	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b1f6:	41 0f b6 40 0c       	movzbl 0xc(%r8),%eax
   1b1fb:	c0 e8 04             	shr    $0x4,%al
   1b1fe:	0f af c2             	imul   %edx,%eax
   1b201:	41 88 45 18          	mov    %al,0x18(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b205:	41 0f b6 40 0c       	movzbl 0xc(%r8),%eax
   1b20a:	83 e0 0f             	and    $0xf,%eax
   1b20d:	0f af c2             	imul   %edx,%eax
   1b210:	41 88 45 19          	mov    %al,0x19(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b214:	41 83 ff 1b          	cmp    $0x1b,%r15d
   1b218:	7e 42                	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b21a:	41 0f b6 40 0d       	movzbl 0xd(%r8),%eax
   1b21f:	c0 e8 04             	shr    $0x4,%al
   1b222:	0f af c2             	imul   %edx,%eax
   1b225:	41 88 45 1a          	mov    %al,0x1a(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b229:	41 0f b6 40 0d       	movzbl 0xd(%r8),%eax
   1b22e:	83 e0 0f             	and    $0xf,%eax
   1b231:	0f af c2             	imul   %edx,%eax
   1b234:	41 88 45 1b          	mov    %al,0x1b(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b238:	41 83 ff 1d          	cmp    $0x1d,%r15d
   1b23c:	7e 1e                	jle    1b25c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3c4c>
               *cur++ = scale * ((*in >> 4)       );
   1b23e:	41 0f b6 40 0e       	movzbl 0xe(%r8),%eax
   1b243:	c0 e8 04             	shr    $0x4,%al
   1b246:	0f af c2             	imul   %edx,%eax
   1b249:	41 88 45 1c          	mov    %al,0x1c(%r13)
               *cur++ = scale * ((*in     ) & 0x0f);
   1b24d:	41 0f b6 40 0e       	movzbl 0xe(%r8),%eax
   1b252:	83 e0 0f             	and    $0xf,%eax
   1b255:	0f af c2             	imul   %edx,%eax
   1b258:	41 88 45 1d          	mov    %al,0x1d(%r13)
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b25c:	4e 8d 2c 26          	lea    (%rsi,%r12,1),%r13
   1b260:	e9 bb f9 ff ff       	jmp    1ac20 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3610>
   1b265:	66 0f 6e c2          	movd   %edx,%xmm0
   1b269:	48 89 f8             	mov    %rdi,%rax
   1b26c:	49 89 f0             	mov    %rsi,%r8
   1b26f:	44 8b ac 24 ac 00 00 	mov    0xac(%rsp),%r13d
   1b276:	00 
   1b277:	66 44 0f 6f 2d 00 d7 	movdqa 0x1d700(%rip),%xmm13        # 38980 <_ZL11stbi__bmask+0x200>
   1b27e:	01 00 
   1b280:	66 0f 60 c0          	punpcklbw %xmm0,%xmm0
   1b284:	66 44 0f 6f 25 63 d5 	movdqa 0x1d563(%rip),%xmm12        # 387f0 <_ZL11stbi__bmask+0x70>
   1b28b:	01 00 
   1b28d:	66 0f 6f e8          	movdqa %xmm0,%xmm5
   1b291:	41 c1 ed 04          	shr    $0x4,%r13d
   1b295:	66 44 0f 6f 35 f2 d6 	movdqa 0x1d6f2(%rip),%xmm14        # 38990 <_ZL11stbi__bmask+0x210>
   1b29c:	01 00 
   1b29e:	66 0f 61 e8          	punpcklwd %xmm0,%xmm5
   1b2a2:	49 c1 e5 06          	shl    $0x6,%r13
   1b2a6:	66 0f 6f 05 62 d5 01 	movdqa 0x1d562(%rip),%xmm0        # 38810 <_ZL11stbi__bmask+0x90>
   1b2ad:	00 
   1b2ae:	66 0f 70 ed 00       	pshufd $0x0,%xmm5,%xmm5
   1b2b3:	49 01 fd             	add    %rdi,%r13
   1b2b6:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   1b2ba:	66 0f 60 f5          	punpcklbw %xmm5,%xmm6
   1b2be:	66 0f 68 ed          	punpckhbw %xmm5,%xmm5
               *cur++ = scale * ((*in >> 6)       );
   1b2c2:	f3 41 0f 6f 08       	movdqu (%r8),%xmm1
   1b2c7:	48 83 c0 40          	add    $0x40,%rax
   1b2cb:	49 83 c0 10          	add    $0x10,%r8
   1b2cf:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1b2d3:	66 0f 71 d2 06       	psrlw  $0x6,%xmm2
   1b2d8:	66 41 0f db d4       	pand   %xmm12,%xmm2
   1b2dd:	66 0f 6f da          	movdqa %xmm2,%xmm3
   1b2e1:	66 0f 60 da          	punpcklbw %xmm2,%xmm3
   1b2e5:	66 0f 68 d2          	punpckhbw %xmm2,%xmm2
   1b2e9:	66 0f d5 de          	pmullw %xmm6,%xmm3
   1b2ed:	66 0f d5 d5          	pmullw %xmm5,%xmm2
   1b2f1:	66 0f db d8          	pand   %xmm0,%xmm3
   1b2f5:	66 0f db d0          	pand   %xmm0,%xmm2
   1b2f9:	66 0f 67 da          	packuswb %xmm2,%xmm3
               *cur++ = scale * ((*in >> 4) & 0x03);
   1b2fd:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1b301:	66 0f 71 d2 04       	psrlw  $0x4,%xmm2
   1b306:	66 41 0f db d5       	pand   %xmm13,%xmm2
   1b30b:	66 41 0f db d4       	pand   %xmm12,%xmm2
   1b310:	66 0f 6f e2          	movdqa %xmm2,%xmm4
   1b314:	66 0f 60 e2          	punpcklbw %xmm2,%xmm4
   1b318:	66 0f 68 d2          	punpckhbw %xmm2,%xmm2
   1b31c:	66 0f d5 e6          	pmullw %xmm6,%xmm4
   1b320:	66 0f d5 d5          	pmullw %xmm5,%xmm2
   1b324:	66 0f db e0          	pand   %xmm0,%xmm4
   1b328:	66 0f db d0          	pand   %xmm0,%xmm2
   1b32c:	66 0f 67 e2          	packuswb %xmm2,%xmm4
               *cur++ = scale * ((*in >> 2) & 0x03);
   1b330:	66 0f 6f d1          	movdqa %xmm1,%xmm2
               *cur++ = scale * ((*in     ) & 0x03);
   1b334:	66 41 0f db cc       	pand   %xmm12,%xmm1
               *cur++ = scale * ((*in >> 2) & 0x03);
   1b339:	66 0f 71 d2 02       	psrlw  $0x2,%xmm2
   1b33e:	66 41 0f db d6       	pand   %xmm14,%xmm2
   1b343:	66 41 0f db d4       	pand   %xmm12,%xmm2
   1b348:	66 0f 6f fa          	movdqa %xmm2,%xmm7
   1b34c:	66 0f 60 fa          	punpcklbw %xmm2,%xmm7
   1b350:	66 0f 68 d2          	punpckhbw %xmm2,%xmm2
   1b354:	66 0f d5 fe          	pmullw %xmm6,%xmm7
   1b358:	66 0f d5 d5          	pmullw %xmm5,%xmm2
   1b35c:	66 0f db f8          	pand   %xmm0,%xmm7
   1b360:	66 0f db d0          	pand   %xmm0,%xmm2
   1b364:	66 0f 67 fa          	packuswb %xmm2,%xmm7
               *cur++ = scale * ((*in     ) & 0x03);
   1b368:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1b36c:	66 0f 60 d1          	punpcklbw %xmm1,%xmm2
   1b370:	66 0f 68 c9          	punpckhbw %xmm1,%xmm1
   1b374:	66 0f d5 d6          	pmullw %xmm6,%xmm2
   1b378:	66 0f d5 cd          	pmullw %xmm5,%xmm1
   1b37c:	66 0f db d0          	pand   %xmm0,%xmm2
   1b380:	66 0f db c8          	pand   %xmm0,%xmm1
   1b384:	66 0f 67 d1          	packuswb %xmm1,%xmm2
   1b388:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   1b38c:	66 0f 68 df          	punpckhbw %xmm7,%xmm3
   1b390:	66 0f 60 cf          	punpcklbw %xmm7,%xmm1
   1b394:	66 0f 6f fc          	movdqa %xmm4,%xmm7
   1b398:	66 0f 68 e2          	punpckhbw %xmm2,%xmm4
   1b39c:	66 0f 60 fa          	punpcklbw %xmm2,%xmm7
   1b3a0:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1b3a4:	66 0f 68 cf          	punpckhbw %xmm7,%xmm1
   1b3a8:	66 0f 60 d7          	punpcklbw %xmm7,%xmm2
   1b3ac:	0f 11 48 d0          	movups %xmm1,-0x30(%rax)
   1b3b0:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   1b3b4:	66 0f 68 dc          	punpckhbw %xmm4,%xmm3
   1b3b8:	66 0f 60 cc          	punpcklbw %xmm4,%xmm1
   1b3bc:	0f 11 50 c0          	movups %xmm2,-0x40(%rax)
   1b3c0:	0f 11 48 e0          	movups %xmm1,-0x20(%rax)
   1b3c4:	0f 11 58 f0          	movups %xmm3,-0x10(%rax)
            for (k=x*img_n; k >= 4; k-=4, ++in) {
   1b3c8:	49 39 c5             	cmp    %rax,%r13
   1b3cb:	0f 85 f1 fe ff ff    	jne    1b2c2 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3cb2>
   1b3d1:	44 8b ac 24 ac 00 00 	mov    0xac(%rsp),%r13d
   1b3d8:	00 
   1b3d9:	44 8b bc 24 a0 01 00 	mov    0x1a0(%rsp),%r15d
   1b3e0:	00 
   1b3e1:	45 89 e8             	mov    %r13d,%r8d
   1b3e4:	41 83 e0 f0          	and    $0xfffffff0,%r8d
   1b3e8:	44 89 c0             	mov    %r8d,%eax
   1b3eb:	f7 d8                	neg    %eax
   1b3ed:	41 8d 04 87          	lea    (%r15,%rax,4),%eax
   1b3f1:	4e 8d 3c 87          	lea    (%rdi,%r8,4),%r15
   1b3f5:	49 01 f0             	add    %rsi,%r8
   1b3f8:	41 83 e5 0f          	and    $0xf,%r13d
   1b3fc:	46 8d 2c 38          	lea    (%rax,%r15,1),%r13d
   1b400:	74 54                	je     1b456 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3e46>
               *cur++ = scale * ((*in >> 6)       );
   1b402:	41 0f b6 00          	movzbl (%r8),%eax
               *cur++ = scale * ((*in     ) & 0x03);
   1b406:	49 83 c7 04          	add    $0x4,%r15
            for (k=x*img_n; k >= 4; k-=4, ++in) {
   1b40a:	49 83 c0 01          	add    $0x1,%r8
               *cur++ = scale * ((*in >> 6)       );
   1b40e:	c0 e8 06             	shr    $0x6,%al
   1b411:	0f af c2             	imul   %edx,%eax
   1b414:	41 88 47 fc          	mov    %al,-0x4(%r15)
               *cur++ = scale * ((*in >> 4) & 0x03);
   1b418:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1b41d:	c0 e8 04             	shr    $0x4,%al
   1b420:	83 e0 03             	and    $0x3,%eax
   1b423:	0f af c2             	imul   %edx,%eax
   1b426:	41 88 47 fd          	mov    %al,-0x3(%r15)
               *cur++ = scale * ((*in >> 2) & 0x03);
   1b42a:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1b42f:	c0 e8 02             	shr    $0x2,%al
   1b432:	83 e0 03             	and    $0x3,%eax
   1b435:	0f af c2             	imul   %edx,%eax
   1b438:	41 88 47 fe          	mov    %al,-0x2(%r15)
               *cur++ = scale * ((*in     ) & 0x03);
   1b43c:	41 0f b6 40 ff       	movzbl -0x1(%r8),%eax
   1b441:	83 e0 03             	and    $0x3,%eax
   1b444:	0f af c2             	imul   %edx,%eax
   1b447:	41 88 47 ff          	mov    %al,-0x1(%r15)
            for (k=x*img_n; k >= 4; k-=4, ++in) {
   1b44b:	44 89 e8             	mov    %r13d,%eax
   1b44e:	44 29 f8             	sub    %r15d,%eax
   1b451:	83 f8 03             	cmp    $0x3,%eax
   1b454:	7f ac                	jg     1b402 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3df2>
   1b456:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
   1b45b:	4c 8d 2c 06          	lea    (%rsi,%rax,1),%r13
   1b45f:	e9 7e f8 ff ff       	jmp    1ace2 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x36d2>
   1b464:	66 0f 6e c2          	movd   %edx,%xmm0
   1b468:	45 89 fd             	mov    %r15d,%r13d
   1b46b:	49 89 f0             	mov    %rsi,%r8
   1b46e:	48 89 f8             	mov    %rdi,%rax
   1b471:	66 0f 60 c0          	punpcklbw %xmm0,%xmm0
   1b475:	41 c1 ed 04          	shr    $0x4,%r13d
   1b479:	66 0f 6f 2d ef d4 01 	movdqa 0x1d4ef(%rip),%xmm5        # 38970 <_ZL11stbi__bmask+0x1f0>
   1b480:	00 
   1b481:	66 44 0f 6f 1d d6 d4 	movdqa 0x1d4d6(%rip),%xmm11        # 38960 <_ZL11stbi__bmask+0x1e0>
   1b488:	01 00 
   1b48a:	66 0f 6f f0          	movdqa %xmm0,%xmm6
   1b48e:	49 c1 e5 04          	shl    $0x4,%r13
   1b492:	66 44 0f 6f 2d e5 d4 	movdqa 0x1d4e5(%rip),%xmm13        # 38980 <_ZL11stbi__bmask+0x200>
   1b499:	01 00 
   1b49b:	66 44 0f 6f 25 4c d3 	movdqa 0x1d34c(%rip),%xmm12        # 387f0 <_ZL11stbi__bmask+0x70>
   1b4a2:	01 00 
   1b4a4:	66 0f 61 f0          	punpcklwd %xmm0,%xmm6
   1b4a8:	66 0f 6f 05 60 d3 01 	movdqa 0x1d360(%rip),%xmm0        # 38810 <_ZL11stbi__bmask+0x90>
   1b4af:	00 
   1b4b0:	66 44 0f 6f 35 d7 d4 	movdqa 0x1d4d7(%rip),%xmm14        # 38990 <_ZL11stbi__bmask+0x210>
   1b4b7:	01 00 
   1b4b9:	49 01 f5             	add    %rsi,%r13
   1b4bc:	66 0f 70 f6 00       	pshufd $0x0,%xmm6,%xmm6
   1b4c1:	0f 29 ac 24 80 00 00 	movaps %xmm5,0x80(%rsp)
   1b4c8:	00 
   1b4c9:	66 44 0f 6f d6       	movdqa %xmm6,%xmm10
   1b4ce:	66 44 0f 60 d6       	punpcklbw %xmm6,%xmm10
   1b4d3:	66 0f 68 f6          	punpckhbw %xmm6,%xmm6
               *cur++ = scale * ((*in >> 7)       );
   1b4d7:	f3 41 0f 6f 08       	movdqu (%r8),%xmm1
   1b4dc:	49 83 c0 10          	add    $0x10,%r8
   1b4e0:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
   1b4e4:	66 0f 6f d1          	movdqa %xmm1,%xmm2
               *cur++ = scale * ((*in >> 1) & 0x01);
   1b4e8:	66 44 0f 6f f9       	movdqa %xmm1,%xmm15
               *cur++ = scale * ((*in >> 7)       );
   1b4ed:	66 0f 71 d2 07       	psrlw  $0x7,%xmm2
               *cur++ = scale * ((*in >> 1) & 0x01);
   1b4f2:	66 41 0f 71 d7 01    	psrlw  $0x1,%xmm15
   1b4f8:	66 44 0f db bc 24 80 	pand   0x80(%rsp),%xmm15
   1b4ff:	00 00 00 
               *cur++ = scale * ((*in >> 7)       );
   1b502:	66 41 0f db d3       	pand   %xmm11,%xmm2
   1b507:	66 0f 6f e2          	movdqa %xmm2,%xmm4
   1b50b:	66 0f 6f da          	movdqa %xmm2,%xmm3
               *cur++ = scale * ((*in >> 1) & 0x01);
   1b50f:	66 45 0f db fb       	pand   %xmm11,%xmm15
               *cur++ = scale * ((*in >> 7)       );
   1b514:	66 0f 60 e2          	punpcklbw %xmm2,%xmm4
   1b518:	66 0f 68 da          	punpckhbw %xmm2,%xmm3
   1b51c:	66 0f 6f d4          	movdqa %xmm4,%xmm2
   1b520:	66 0f d5 de          	pmullw %xmm6,%xmm3
   1b524:	66 41 0f d5 d2       	pmullw %xmm10,%xmm2
   1b529:	66 0f db d8          	pand   %xmm0,%xmm3
   1b52d:	66 0f db d0          	pand   %xmm0,%xmm2
   1b531:	66 0f 67 d3          	packuswb %xmm3,%xmm2
               *cur++ = scale * ((*in >> 6) & 0x01);
   1b535:	66 0f 6f d9          	movdqa %xmm1,%xmm3
   1b539:	66 0f 71 d3 06       	psrlw  $0x6,%xmm3
   1b53e:	66 41 0f db dc       	pand   %xmm12,%xmm3
   1b543:	66 41 0f db db       	pand   %xmm11,%xmm3
   1b548:	66 0f 6f eb          	movdqa %xmm3,%xmm5
   1b54c:	66 0f 6f e3          	movdqa %xmm3,%xmm4
   1b550:	66 0f 60 eb          	punpcklbw %xmm3,%xmm5
   1b554:	66 0f 68 e3          	punpckhbw %xmm3,%xmm4
   1b558:	66 0f 6f dd          	movdqa %xmm5,%xmm3
   1b55c:	66 0f d5 e6          	pmullw %xmm6,%xmm4
   1b560:	66 41 0f d5 da       	pmullw %xmm10,%xmm3
   1b565:	66 0f db e0          	pand   %xmm0,%xmm4
   1b569:	66 0f db d8          	pand   %xmm0,%xmm3
   1b56d:	66 0f 67 dc          	packuswb %xmm4,%xmm3
               *cur++ = scale * ((*in >> 5) & 0x01);
   1b571:	66 0f 6f e1          	movdqa %xmm1,%xmm4
   1b575:	66 0f 71 d4 05       	psrlw  $0x5,%xmm4
   1b57a:	66 0f db 25 1e d4 01 	pand   0x1d41e(%rip),%xmm4        # 389a0 <_ZL11stbi__bmask+0x220>
   1b581:	00 
   1b582:	66 41 0f db e3       	pand   %xmm11,%xmm4
   1b587:	66 0f 6f ec          	movdqa %xmm4,%xmm5
   1b58b:	66 0f 60 ec          	punpcklbw %xmm4,%xmm5
   1b58f:	66 0f 68 e4          	punpckhbw %xmm4,%xmm4
   1b593:	66 41 0f d5 ea       	pmullw %xmm10,%xmm5
   1b598:	66 0f d5 e6          	pmullw %xmm6,%xmm4
   1b59c:	66 0f db e8          	pand   %xmm0,%xmm5
   1b5a0:	66 0f db e0          	pand   %xmm0,%xmm4
   1b5a4:	66 0f 67 ec          	packuswb %xmm4,%xmm5
               *cur++ = scale * ((*in >> 4) & 0x01);
   1b5a8:	66 0f 6f e1          	movdqa %xmm1,%xmm4
   1b5ac:	66 0f 71 d4 04       	psrlw  $0x4,%xmm4
   1b5b1:	66 41 0f db e5       	pand   %xmm13,%xmm4
   1b5b6:	66 41 0f db e3       	pand   %xmm11,%xmm4
   1b5bb:	66 44 0f 6f c4       	movdqa %xmm4,%xmm8
   1b5c0:	66 44 0f 60 c4       	punpcklbw %xmm4,%xmm8
   1b5c5:	66 0f 68 e4          	punpckhbw %xmm4,%xmm4
   1b5c9:	66 0f 6f fc          	movdqa %xmm4,%xmm7
   1b5cd:	66 41 0f 6f e0       	movdqa %xmm8,%xmm4
   1b5d2:	66 41 0f d5 e2       	pmullw %xmm10,%xmm4
   1b5d7:	66 0f d5 fe          	pmullw %xmm6,%xmm7
   1b5db:	66 0f db e0          	pand   %xmm0,%xmm4
   1b5df:	66 0f db f8          	pand   %xmm0,%xmm7
   1b5e3:	66 0f 67 e7          	packuswb %xmm7,%xmm4
               *cur++ = scale * ((*in >> 3) & 0x01);
   1b5e7:	66 0f 6f f9          	movdqa %xmm1,%xmm7
   1b5eb:	66 0f 71 d7 03       	psrlw  $0x3,%xmm7
   1b5f0:	66 0f db 3d b8 d3 01 	pand   0x1d3b8(%rip),%xmm7        # 389b0 <_ZL11stbi__bmask+0x230>
   1b5f7:	00 
   1b5f8:	66 41 0f db fb       	pand   %xmm11,%xmm7
   1b5fd:	66 44 0f 6f cf       	movdqa %xmm7,%xmm9
   1b602:	66 44 0f 60 cf       	punpcklbw %xmm7,%xmm9
   1b607:	66 0f 68 ff          	punpckhbw %xmm7,%xmm7
   1b60b:	66 45 0f d5 ca       	pmullw %xmm10,%xmm9
   1b610:	66 0f d5 fe          	pmullw %xmm6,%xmm7
   1b614:	66 44 0f db c8       	pand   %xmm0,%xmm9
   1b619:	66 0f db f8          	pand   %xmm0,%xmm7
   1b61d:	66 44 0f 67 cf       	packuswb %xmm7,%xmm9
               *cur++ = scale * ((*in >> 2) & 0x01);
   1b622:	66 0f 6f f9          	movdqa %xmm1,%xmm7
               *cur++ = scale * ((*in     ) & 0x01);
   1b626:	66 41 0f db cb       	pand   %xmm11,%xmm1
               *cur++ = scale * ((*in >> 2) & 0x01);
   1b62b:	66 0f 71 d7 02       	psrlw  $0x2,%xmm7
   1b630:	66 41 0f db fe       	pand   %xmm14,%xmm7
   1b635:	66 41 0f db fb       	pand   %xmm11,%xmm7
   1b63a:	66 44 0f 6f c7       	movdqa %xmm7,%xmm8
   1b63f:	66 44 0f 60 c7       	punpcklbw %xmm7,%xmm8
   1b644:	66 0f 68 ff          	punpckhbw %xmm7,%xmm7
   1b648:	66 45 0f d5 c2       	pmullw %xmm10,%xmm8
   1b64d:	66 0f d5 fe          	pmullw %xmm6,%xmm7
   1b651:	66 44 0f db c0       	pand   %xmm0,%xmm8
   1b656:	66 0f db f8          	pand   %xmm0,%xmm7
   1b65a:	66 44 0f 67 c7       	packuswb %xmm7,%xmm8
               *cur++ = scale * ((*in >> 1) & 0x01);
   1b65f:	66 41 0f 6f ff       	movdqa %xmm15,%xmm7
   1b664:	66 41 0f 60 ff       	punpcklbw %xmm15,%xmm7
   1b669:	66 45 0f 68 ff       	punpckhbw %xmm15,%xmm15
   1b66e:	66 41 0f d5 fa       	pmullw %xmm10,%xmm7
   1b673:	66 44 0f d5 fe       	pmullw %xmm6,%xmm15
   1b678:	66 0f db f8          	pand   %xmm0,%xmm7
   1b67c:	66 44 0f db f8       	pand   %xmm0,%xmm15
   1b681:	66 41 0f 67 ff       	packuswb %xmm15,%xmm7
               *cur++ = scale * ((*in     ) & 0x01);
   1b686:	66 44 0f 6f f9       	movdqa %xmm1,%xmm15
   1b68b:	66 44 0f 60 f9       	punpcklbw %xmm1,%xmm15
   1b690:	66 0f 68 c9          	punpckhbw %xmm1,%xmm1
   1b694:	66 45 0f d5 fa       	pmullw %xmm10,%xmm15
   1b699:	66 0f d5 ce          	pmullw %xmm6,%xmm1
   1b69d:	66 44 0f db f8       	pand   %xmm0,%xmm15
   1b6a2:	66 0f db c8          	pand   %xmm0,%xmm1
   1b6a6:	66 44 0f 67 f9       	packuswb %xmm1,%xmm15
   1b6ab:	66 0f 6f ca          	movdqa %xmm2,%xmm1
   1b6af:	66 41 0f 68 d1       	punpckhbw %xmm9,%xmm2
   1b6b4:	66 41 0f 60 c9       	punpcklbw %xmm9,%xmm1
   1b6b9:	66 44 0f 6f cb       	movdqa %xmm3,%xmm9
   1b6be:	66 41 0f 68 d8       	punpckhbw %xmm8,%xmm3
   1b6c3:	66 45 0f 60 c8       	punpcklbw %xmm8,%xmm9
   1b6c8:	66 44 0f 6f c5       	movdqa %xmm5,%xmm8
   1b6cd:	66 0f 68 ef          	punpckhbw %xmm7,%xmm5
   1b6d1:	66 44 0f 60 c7       	punpcklbw %xmm7,%xmm8
   1b6d6:	66 0f 6f fc          	movdqa %xmm4,%xmm7
   1b6da:	66 41 0f 68 e7       	punpckhbw %xmm15,%xmm4
   1b6df:	66 41 0f 60 ff       	punpcklbw %xmm15,%xmm7
   1b6e4:	66 44 0f 6f f9       	movdqa %xmm1,%xmm15
   1b6e9:	66 41 0f 68 c8       	punpckhbw %xmm8,%xmm1
   1b6ee:	66 45 0f 60 f8       	punpcklbw %xmm8,%xmm15
   1b6f3:	66 44 0f 6f c2       	movdqa %xmm2,%xmm8
   1b6f8:	66 0f 68 d5          	punpckhbw %xmm5,%xmm2
   1b6fc:	66 44 0f 60 c5       	punpcklbw %xmm5,%xmm8
   1b701:	66 41 0f 6f e9       	movdqa %xmm9,%xmm5
   1b706:	66 44 0f 68 cf       	punpckhbw %xmm7,%xmm9
   1b70b:	66 0f 60 ef          	punpcklbw %xmm7,%xmm5
   1b70f:	66 0f 6f fb          	movdqa %xmm3,%xmm7
   1b713:	66 0f 68 dc          	punpckhbw %xmm4,%xmm3
   1b717:	66 0f 60 fc          	punpcklbw %xmm4,%xmm7
   1b71b:	66 41 0f 6f e7       	movdqa %xmm15,%xmm4
   1b720:	66 44 0f 68 fd       	punpckhbw %xmm5,%xmm15
   1b725:	66 0f 60 e5          	punpcklbw %xmm5,%xmm4
   1b729:	44 0f 11 78 90       	movups %xmm15,-0x70(%rax)
   1b72e:	0f 11 60 80          	movups %xmm4,-0x80(%rax)
   1b732:	66 0f 6f e1          	movdqa %xmm1,%xmm4
   1b736:	66 41 0f 68 c9       	punpckhbw %xmm9,%xmm1
   1b73b:	0f 11 48 b0          	movups %xmm1,-0x50(%rax)
   1b73f:	66 41 0f 6f c8       	movdqa %xmm8,%xmm1
   1b744:	66 41 0f 60 e1       	punpcklbw %xmm9,%xmm4
   1b749:	66 44 0f 68 c7       	punpckhbw %xmm7,%xmm8
   1b74e:	66 0f 60 cf          	punpcklbw %xmm7,%xmm1
   1b752:	0f 11 60 a0          	movups %xmm4,-0x60(%rax)
   1b756:	0f 11 48 c0          	movups %xmm1,-0x40(%rax)
   1b75a:	66 0f 6f ca          	movdqa %xmm2,%xmm1
   1b75e:	66 0f 68 d3          	punpckhbw %xmm3,%xmm2
   1b762:	66 0f 60 cb          	punpcklbw %xmm3,%xmm1
   1b766:	44 0f 11 40 d0       	movups %xmm8,-0x30(%rax)
   1b76b:	0f 11 48 e0          	movups %xmm1,-0x20(%rax)
   1b76f:	0f 11 50 f0          	movups %xmm2,-0x10(%rax)
            for (k=x*img_n; k >= 8; k-=8, ++in) {
   1b773:	4d 39 e8             	cmp    %r13,%r8
   1b776:	0f 85 5b fd ff ff    	jne    1b4d7 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3ec7>
   1b77c:	45 89 fd             	mov    %r15d,%r13d
   1b77f:	44 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%r8d
   1b786:	00 
   1b787:	41 83 e5 f0          	and    $0xfffffff0,%r13d
   1b78b:	44 89 e8             	mov    %r13d,%eax
   1b78e:	f7 d8                	neg    %eax
   1b790:	41 8d 04 c0          	lea    (%r8,%rax,8),%eax
   1b794:	4e 8d 04 ef          	lea    (%rdi,%r13,8),%r8
   1b798:	49 01 f5             	add    %rsi,%r13
   1b79b:	41 83 e7 0f          	and    $0xf,%r15d
   1b79f:	0f 84 c0 f6 ff ff    	je     1ae65 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3855>
   1b7a5:	46 8d 3c 00          	lea    (%rax,%r8,1),%r15d
               *cur++ = scale * ((*in >> 7)       );
   1b7a9:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
               *cur++ = scale * ((*in     ) & 0x01);
   1b7ae:	49 83 c0 08          	add    $0x8,%r8
            for (k=x*img_n; k >= 8; k-=8, ++in) {
   1b7b2:	49 83 c5 01          	add    $0x1,%r13
               *cur++ = scale * ((*in >> 7)       );
   1b7b6:	c0 e8 07             	shr    $0x7,%al
   1b7b9:	0f af c2             	imul   %edx,%eax
   1b7bc:	41 88 40 f8          	mov    %al,-0x8(%r8)
               *cur++ = scale * ((*in >> 6) & 0x01);
   1b7c0:	41 0f b6 45 ff       	movzbl -0x1(%r13),%eax
   1b7c5:	c0 e8 06             	shr    $0x6,%al
   1b7c8:	83 e0 01             	and    $0x1,%eax
   1b7cb:	0f af c2             	imul   %edx,%eax
   1b7ce:	41 88 40 f9          	mov    %al,-0x7(%r8)
               *cur++ = scale * ((*in >> 5) & 0x01);
   1b7d2:	41 0f b6 45 ff       	movzbl -0x1(%r13),%eax
   1b7d7:	c0 e8 05             	shr    $0x5,%al
   1b7da:	83 e0 01             	and    $0x1,%eax
   1b7dd:	0f af c2             	imul   %edx,%eax
   1b7e0:	41 88 40 fa          	mov    %al,-0x6(%r8)
               *cur++ = scale * ((*in >> 4) & 0x01);
   1b7e4:	41 0f b6 45 ff       	movzbl -0x1(%r13),%eax
   1b7e9:	c0 e8 04             	shr    $0x4,%al
   1b7ec:	83 e0 01             	and    $0x1,%eax
   1b7ef:	0f af c2             	imul   %edx,%eax
   1b7f2:	41 88 40 fb          	mov    %al,-0x5(%r8)
               *cur++ = scale * ((*in >> 3) & 0x01);
   1b7f6:	41 0f b6 45 ff       	movzbl -0x1(%r13),%eax
   1b7fb:	c0 e8 03             	shr    $0x3,%al
   1b7fe:	83 e0 01             	and    $0x1,%eax
   1b801:	0f af c2             	imul   %edx,%eax
   1b804:	41 88 40 fc          	mov    %al,-0x4(%r8)
               *cur++ = scale * ((*in >> 2) & 0x01);
   1b808:	41 0f b6 45 ff       	movzbl -0x1(%r13),%eax
   1b80d:	c0 e8 02             	shr    $0x2,%al
   1b810:	83 e0 01             	and    $0x1,%eax
   1b813:	0f af c2             	imul   %edx,%eax
   1b816:	41 88 40 fd          	mov    %al,-0x3(%r8)
               *cur++ = scale * ((*in >> 1) & 0x01);
   1b81a:	41 0f b6 45 ff       	movzbl -0x1(%r13),%eax
   1b81f:	d0 e8                	shr    %al
   1b821:	83 e0 01             	and    $0x1,%eax
   1b824:	0f af c2             	imul   %edx,%eax
   1b827:	41 88 40 fe          	mov    %al,-0x2(%r8)
               *cur++ = scale * ((*in     ) & 0x01);
   1b82b:	41 0f b6 45 ff       	movzbl -0x1(%r13),%eax
   1b830:	83 e0 01             	and    $0x1,%eax
   1b833:	0f af c2             	imul   %edx,%eax
   1b836:	41 88 40 ff          	mov    %al,-0x1(%r8)
            for (k=x*img_n; k >= 8; k-=8, ++in) {
   1b83a:	44 89 f8             	mov    %r15d,%eax
   1b83d:	44 29 c0             	sub    %r8d,%eax
   1b840:	83 f8 07             	cmp    $0x7,%eax
   1b843:	0f 8f 60 ff ff ff    	jg     1b7a9 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x4199>
   1b849:	e9 17 f6 ff ff       	jmp    1ae65 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3855>
            for (k=x*img_n; k >= 2; k-=2, ++in) {
   1b84e:	8b 84 24 a0 01 00 00 	mov    0x1a0(%rsp),%eax
   1b855:	e9 d8 f3 ff ff       	jmp    1ac32 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3622>
            for (k=x*img_n; k >= 4; k-=4, ++in) {
   1b85a:	44 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%r8d
   1b861:	00 
   1b862:	e9 8e f4 ff ff       	jmp    1acf5 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x36e5>
            STBI__CASE(STBI__F_paeth_first)  { cur[k] = STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],0,0)); } break;
   1b867:	31 c9                	xor    %ecx,%ecx
   1b869:	45 31 c0             	xor    %r8d,%r8d
   1b86c:	48 01 f8             	add    %rdi,%rax
   1b86f:	e9 28 eb ff ff       	jmp    1a39c <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2d8c>
            STBI__CASE(STBI__F_sub)          { cur[k] = STBI__BYTECAST(raw[k] + cur[k-filter_bytes]); } break;
   1b874:	31 c9                	xor    %ecx,%ecx
   1b876:	45 31 c0             	xor    %r8d,%r8d
   1b879:	48 01 f8             	add    %rdi,%rax
   1b87c:	e9 73 e9 ff ff       	jmp    1a1f4 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2be4>
            STBI__CASE(STBI__F_up)           { cur[k] = STBI__BYTECAST(raw[k] + prior[k]); } break;
   1b881:	31 c9                	xor    %ecx,%ecx
   1b883:	31 d2                	xor    %edx,%edx
   1b885:	e9 e1 e7 ff ff       	jmp    1a06b <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x2a5b>
   1b88a:	45 89 f8             	mov    %r15d,%r8d
   1b88d:	e9 f4 f5 ff ff       	jmp    1ae86 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3876>
      stbi_uc *cur = a->out;
   1b892:	48 89 f1             	mov    %rsi,%rcx
      for(i=0; i < x*y*out_n; ++i,cur16++,cur+=2) {
   1b895:	31 d2                	xor    %edx,%edx
   1b897:	e9 7d f0 ff ff       	jmp    1a919 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii+0x3309>
   1b89c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001b8a0 <_ZL14stbi__hdr_testP13stbi__context>:
{
   1b8a0:	41 55                	push   %r13
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1b8a2:	4c 8d 6f 38          	lea    0x38(%rdi),%r13
{
   1b8a6:	41 54                	push   %r12
   1b8a8:	4c 8d 25 e3 c1 01 00 	lea    0x1c1e3(%rip),%r12        # 37a92 <_ZSt19piecewise_construct+0x14b>
   1b8af:	55                   	push   %rbp
   for (i=0; signature[i]; ++i)
   1b8b0:	bd 23 00 00 00       	mov    $0x23,%ebp
{
   1b8b5:	53                   	push   %rbx
   1b8b6:	48 89 fb             	mov    %rdi,%rbx
   1b8b9:	48 83 ec 08          	sub    $0x8,%rsp
   if (s->img_buffer < s->img_buffer_end)
   1b8bd:	48 8b 97 c0 00 00 00 	mov    0xc0(%rdi),%rdx
   1b8c4:	48 8b 87 c8 00 00 00 	mov    0xc8(%rdi),%rax
   1b8cb:	eb 2a                	jmp    1b8f7 <_ZL14stbi__hdr_testP13stbi__context+0x57>
   1b8cd:	0f 1f 00             	nopl   (%rax)
      return *s->img_buffer++;
   1b8d0:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   1b8d4:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
      if (stbi__get8(s) != signature[i])
   1b8db:	0f b6 32             	movzbl (%rdx),%esi
      return *s->img_buffer++;
   1b8de:	48 89 ca             	mov    %rcx,%rdx
      if (stbi__get8(s) != signature[i])
   1b8e1:	39 f5                	cmp    %esi,%ebp
   1b8e3:	75 22                	jne    1b907 <_ZL14stbi__hdr_testP13stbi__context+0x67>
   for (i=0; signature[i]; ++i)
   1b8e5:	41 0f be 2c 24       	movsbl (%r12),%ebp
   1b8ea:	49 83 c4 01          	add    $0x1,%r12
   1b8ee:	40 84 ed             	test   %bpl,%bpl
   1b8f1:	0f 84 19 01 00 00    	je     1ba10 <_ZL14stbi__hdr_testP13stbi__context+0x170>
   if (s->img_buffer < s->img_buffer_end)
   1b8f7:	48 39 c2             	cmp    %rax,%rdx
   1b8fa:	72 d4                	jb     1b8d0 <_ZL14stbi__hdr_testP13stbi__context+0x30>
   if (s->read_from_callbacks) {
   1b8fc:	8b 53 30             	mov    0x30(%rbx),%edx
   1b8ff:	85 d2                	test   %edx,%edx
   1b901:	0f 85 a1 00 00 00    	jne    1b9a8 <_ZL14stbi__hdr_testP13stbi__context+0x108>
   s->img_buffer = s->img_buffer_original;
   1b907:	f3 0f 6f 83 d0 00 00 	movdqu 0xd0(%rbx),%xmm0
   1b90e:	00 
   1b90f:	48 8b 93 d8 00 00 00 	mov    0xd8(%rbx),%rdx
   1b916:	4c 8d 25 81 c1 01 00 	lea    0x1c181(%rip),%r12        # 37a9e <_ZSt19piecewise_construct+0x157>
   for (i=0; signature[i]; ++i)
   1b91d:	bd 23 00 00 00       	mov    $0x23,%ebp
   1b922:	48 8b 83 d0 00 00 00 	mov    0xd0(%rbx),%rax
   s->img_buffer = s->img_buffer_original;
   1b929:	0f 11 83 c0 00 00 00 	movups %xmm0,0xc0(%rbx)
   for (i=0; signature[i]; ++i)
   1b930:	eb 38                	jmp    1b96a <_ZL14stbi__hdr_testP13stbi__context+0xca>
   1b932:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   1b938:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1b93c:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      if (stbi__get8(s) != signature[i])
   1b943:	0f b6 10             	movzbl (%rax),%edx
   1b946:	39 d5                	cmp    %edx,%ebp
   1b948:	75 30                	jne    1b97a <_ZL14stbi__hdr_testP13stbi__context+0xda>
   for (i=0; signature[i]; ++i)
   1b94a:	41 0f be 2c 24       	movsbl (%r12),%ebp
   1b94f:	49 83 c4 01          	add    $0x1,%r12
   1b953:	40 84 ed             	test   %bpl,%bpl
   1b956:	0f 84 34 01 00 00    	je     1ba90 <_ZL14stbi__hdr_testP13stbi__context+0x1f0>
   if (s->img_buffer < s->img_buffer_end)
   1b95c:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1b963:	48 8b 93 c8 00 00 00 	mov    0xc8(%rbx),%rdx
   1b96a:	48 39 d0             	cmp    %rdx,%rax
   1b96d:	72 c9                	jb     1b938 <_ZL14stbi__hdr_testP13stbi__context+0x98>
   if (s->read_from_callbacks) {
   1b96f:	8b 43 30             	mov    0x30(%rbx),%eax
   1b972:	85 c0                	test   %eax,%eax
   1b974:	0f 85 b6 00 00 00    	jne    1ba30 <_ZL14stbi__hdr_testP13stbi__context+0x190>
          return 0;
   1b97a:	31 c0                	xor    %eax,%eax
   s->img_buffer = s->img_buffer_original;
   1b97c:	48 8b 93 d0 00 00 00 	mov    0xd0(%rbx),%rdx
   1b983:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   s->img_buffer_end = s->img_buffer_original_end;
   1b98a:	48 8b 93 d8 00 00 00 	mov    0xd8(%rbx),%rdx
   1b991:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
}
   1b998:	48 83 c4 08          	add    $0x8,%rsp
   1b99c:	5b                   	pop    %rbx
   1b99d:	5d                   	pop    %rbp
   1b99e:	41 5c                	pop    %r12
   1b9a0:	41 5d                	pop    %r13
   1b9a2:	c3                   	ret
   1b9a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1b9a8:	8b 53 34             	mov    0x34(%rbx),%edx
   1b9ab:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1b9af:	4c 89 ee             	mov    %r13,%rsi
   1b9b2:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1b9b5:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1b9bc:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1b9c3:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1b9c9:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1b9cd:	85 c0                	test   %eax,%eax
   1b9cf:	75 1f                	jne    1b9f0 <_ZL14stbi__hdr_testP13stbi__context+0x150>
      s->read_from_callbacks = 0;
   1b9d1:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1b9d8:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1b9dc:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   1b9e3:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1b9ea:	e9 18 ff ff ff       	jmp    1b907 <_ZL14stbi__hdr_testP13stbi__context+0x67>
   1b9ef:	90                   	nop
      s->img_buffer_end = s->buffer_start + n;
   1b9f0:	48 98                	cltq
      return *s->img_buffer++;
   1b9f2:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      if (stbi__get8(s) != signature[i])
   1b9f9:	0f b6 73 38          	movzbl 0x38(%rbx),%esi
      s->img_buffer_end = s->buffer_start + n;
   1b9fd:	4c 01 e8             	add    %r13,%rax
   1ba00:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   1ba07:	e9 d5 fe ff ff       	jmp    1b8e1 <_ZL14stbi__hdr_testP13stbi__context+0x41>
   1ba0c:	0f 1f 40 00          	nopl   0x0(%rax)
   s->img_buffer = s->img_buffer_original;
   1ba10:	48 8b 83 d0 00 00 00 	mov    0xd0(%rbx),%rax
   s->img_buffer_end = s->img_buffer_original_end;
   1ba17:	48 8b 93 d8 00 00 00 	mov    0xd8(%rbx),%rdx
   s->img_buffer = s->img_buffer_original;
   1ba1e:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   s->img_buffer_end = s->img_buffer_original_end;
   1ba25:	b8 01 00 00 00       	mov    $0x1,%eax
   1ba2a:	e9 62 ff ff ff       	jmp    1b991 <_ZL14stbi__hdr_testP13stbi__context+0xf1>
   1ba2f:	90                   	nop
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1ba30:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   1ba34:	8b 53 34             	mov    0x34(%rbx),%edx
   1ba37:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1ba3b:	4c 89 ee             	mov    %r13,%rsi
   1ba3e:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ba41:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1ba48:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1ba4f:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   1ba55:	85 c0                	test   %eax,%eax
   1ba57:	75 17                	jne    1ba70 <_ZL14stbi__hdr_testP13stbi__context+0x1d0>
      s->read_from_callbacks = 0;
   1ba59:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1ba60:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
      return *s->img_buffer++;
   1ba64:	e9 11 ff ff ff       	jmp    1b97a <_ZL14stbi__hdr_testP13stbi__context+0xda>
   1ba69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   1ba70:	48 98                	cltq
      if (stbi__get8(s) != signature[i])
   1ba72:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   1ba76:	49 01 c5             	add    %rax,%r13
      s->img_buffer_end = s->buffer_start+1;
   1ba79:	48 8d 43 39          	lea    0x39(%rbx),%rax
      s->img_buffer_end = s->buffer_start + n;
   1ba7d:	4c 89 ab c8 00 00 00 	mov    %r13,0xc8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1ba84:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   1ba8b:	e9 b6 fe ff ff       	jmp    1b946 <_ZL14stbi__hdr_testP13stbi__context+0xa6>
   1ba90:	b8 01 00 00 00       	mov    $0x1,%eax
   1ba95:	e9 e2 fe ff ff       	jmp    1b97c <_ZL14stbi__hdr_testP13stbi__context+0xdc>
   1ba9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001baa0 <_ZL10stbi__get8P13stbi__context>:
{
   1baa0:	41 54                	push   %r12
   1baa2:	55                   	push   %rbp
   1baa3:	53                   	push   %rbx
   1baa4:	48 89 fb             	mov    %rdi,%rbx
   if (s->img_buffer < s->img_buffer_end)
   1baa7:	48 8b 87 c0 00 00 00 	mov    0xc0(%rdi),%rax
   1baae:	48 3b 87 c8 00 00 00 	cmp    0xc8(%rdi),%rax
   1bab5:	73 19                	jae    1bad0 <_ZL10stbi__get8P13stbi__context+0x30>
      return *s->img_buffer++;
   1bab7:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1babb:	48 89 97 c0 00 00 00 	mov    %rdx,0xc0(%rdi)
   1bac2:	0f b6 28             	movzbl (%rax),%ebp
}
   1bac5:	89 e8                	mov    %ebp,%eax
   1bac7:	5b                   	pop    %rbx
   1bac8:	5d                   	pop    %rbp
   1bac9:	41 5c                	pop    %r12
   1bacb:	c3                   	ret
   1bacc:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   1bad0:	8b 47 30             	mov    0x30(%rdi),%eax
   return 0;
   1bad3:	31 ed                	xor    %ebp,%ebp
   if (s->read_from_callbacks) {
   1bad5:	85 c0                	test   %eax,%eax
   1bad7:	74 ec                	je     1bac5 <_ZL10stbi__get8P13stbi__context+0x25>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1bad9:	4c 8d 67 38          	lea    0x38(%rdi),%r12
   1badd:	8b 57 34             	mov    0x34(%rdi),%edx
   1bae0:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   1bae4:	4c 89 e6             	mov    %r12,%rsi
   1bae7:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1baea:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1baf1:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1baf8:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1bafe:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1bb02:	85 c0                	test   %eax,%eax
   1bb04:	75 2a                	jne    1bb30 <_ZL10stbi__get8P13stbi__context+0x90>
      s->read_from_callbacks = 0;
   1bb06:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1bb0d:	49 89 d4             	mov    %rdx,%r12
      *s->img_buffer = 0;
   1bb10:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1bb14:	4c 89 a3 c8 00 00 00 	mov    %r12,0xc8(%rbx)
}
   1bb1b:	89 e8                	mov    %ebp,%eax
      return *s->img_buffer++;
   1bb1d:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
}
   1bb24:	5b                   	pop    %rbx
   1bb25:	5d                   	pop    %rbp
   1bb26:	41 5c                	pop    %r12
   1bb28:	c3                   	ret
   1bb29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   1bb30:	48 98                	cltq
      return *s->img_buffer++;
   1bb32:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
      s->img_buffer_end = s->buffer_start + n;
   1bb36:	49 01 c4             	add    %rax,%r12
   1bb39:	eb d9                	jmp    1bb14 <_ZL10stbi__get8P13stbi__context+0x74>
   1bb3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001bb40 <_ZL13stbi__readvalP13stbi__contextiPh>:
{
   1bb40:	41 57                	push   %r15
   1bb42:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
   1bb46:	41 89 f7             	mov    %esi,%r15d
   1bb49:	41 56                	push   %r14
   1bb4b:	41 55                	push   %r13
   1bb4d:	49 89 d5             	mov    %rdx,%r13
   1bb50:	41 54                	push   %r12
   int mask=0x80, i;
   1bb52:	41 bc 80 00 00 00    	mov    $0x80,%r12d
{
   1bb58:	55                   	push   %rbp
   1bb59:	48 89 d5             	mov    %rdx,%rbp
   1bb5c:	53                   	push   %rbx
   1bb5d:	48 89 fb             	mov    %rdi,%rbx
   1bb60:	48 83 ec 18          	sub    $0x18,%rsp
      if (channel & mask) {
   1bb64:	45 85 e7             	test   %r12d,%r15d
   1bb67:	74 4c                	je     1bbb5 <_ZL13stbi__readvalP13stbi__contextiPh+0x75>
   if (s->io.read) {
   1bb69:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   1bb6e:	74 1e                	je     1bb8e <_ZL13stbi__readvalP13stbi__contextiPh+0x4e>
   1bb70:	48 89 0c 24          	mov    %rcx,(%rsp)
      if (!(s->io.eof)(s->io_user_data)) return 0;
   1bb74:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1bb78:	ff 53 20             	call   *0x20(%rbx)
   1bb7b:	48 8b 0c 24          	mov    (%rsp),%rcx
   1bb7f:	85 c0                	test   %eax,%eax
   1bb81:	74 55                	je     1bbd8 <_ZL13stbi__readvalP13stbi__contextiPh+0x98>
      if (s->read_from_callbacks == 0) return 1;
   1bb83:	8b 53 30             	mov    0x30(%rbx),%edx
   1bb86:	85 d2                	test   %edx,%edx
   1bb88:	0f 84 c2 00 00 00    	je     1bc50 <_ZL13stbi__readvalP13stbi__contextiPh+0x110>
   return s->img_buffer >= s->img_buffer_end;
   1bb8e:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
         if (stbi__at_eof(s)) return stbi__errpuc("bad file","PIC file too short");
   1bb95:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1bb9c:	0f 83 ae 00 00 00    	jae    1bc50 <_ZL13stbi__readvalP13stbi__contextiPh+0x110>
      return *s->img_buffer++;
   1bba2:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1bba6:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1bbad:	44 0f b6 30          	movzbl (%rax),%r14d
         dest[i]=stbi__get8(s);
   1bbb1:	44 88 75 00          	mov    %r14b,0x0(%rbp)
   for (i=0; i<4; ++i, mask>>=1) {
   1bbb5:	48 83 c5 01          	add    $0x1,%rbp
   1bbb9:	41 d1 fc             	sar    %r12d
   1bbbc:	48 39 cd             	cmp    %rcx,%rbp
   1bbbf:	75 a3                	jne    1bb64 <_ZL13stbi__readvalP13stbi__contextiPh+0x24>
}
   1bbc1:	48 83 c4 18          	add    $0x18,%rsp
   1bbc5:	4c 89 e8             	mov    %r13,%rax
   1bbc8:	5b                   	pop    %rbx
   1bbc9:	5d                   	pop    %rbp
   1bbca:	41 5c                	pop    %r12
   1bbcc:	41 5d                	pop    %r13
   1bbce:	41 5e                	pop    %r14
   1bbd0:	41 5f                	pop    %r15
   1bbd2:	c3                   	ret
   1bbd3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (s->img_buffer < s->img_buffer_end)
   1bbd8:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1bbdf:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1bbe6:	72 ba                	jb     1bba2 <_ZL13stbi__readvalP13stbi__contextiPh+0x62>
   if (s->read_from_callbacks) {
   1bbe8:	8b 43 30             	mov    0x30(%rbx),%eax
   return 0;
   1bbeb:	45 31 f6             	xor    %r14d,%r14d
   if (s->read_from_callbacks) {
   1bbee:	85 c0                	test   %eax,%eax
   1bbf0:	74 bf                	je     1bbb1 <_ZL13stbi__readvalP13stbi__contextiPh+0x71>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1bbf2:	48 8d 73 38          	lea    0x38(%rbx),%rsi
   1bbf6:	8b 53 34             	mov    0x34(%rbx),%edx
   1bbf9:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1bbfd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1bc02:	48 89 34 24          	mov    %rsi,(%rsp)
   1bc06:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1bc09:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1bc10:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1bc17:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   1bc1d:	85 c0                	test   %eax,%eax
   1bc1f:	48 8b 34 24          	mov    (%rsp),%rsi
      s->img_buffer_end = s->buffer_start+1;
   1bc23:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1bc27:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   1bc2c:	75 42                	jne    1bc70 <_ZL13stbi__readvalP13stbi__contextiPh+0x130>
      s->read_from_callbacks = 0;
   1bc2e:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1bc35:	48 89 d6             	mov    %rdx,%rsi
      *s->img_buffer = 0;
   1bc38:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1bc3c:	48 89 b3 c8 00 00 00 	mov    %rsi,0xc8(%rbx)
      return *s->img_buffer++;
   1bc43:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1bc4a:	e9 62 ff ff ff       	jmp    1bbb1 <_ZL13stbi__readvalP13stbi__contextiPh+0x71>
   1bc4f:	90                   	nop
   stbi__g_failure_reason = str;
   1bc50:	48 8d 05 4e be 01 00 	lea    0x1be4e(%rip),%rax        # 37aa5 <_ZSt19piecewise_construct+0x15e>
         if (stbi__at_eof(s)) return stbi__errpuc("bad file","PIC file too short");
   1bc57:	45 31 ed             	xor    %r13d,%r13d
   stbi__g_failure_reason = str;
   1bc5a:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1bc61:	ff ff 
         if (stbi__at_eof(s)) return stbi__errpuc("bad file","PIC file too short");
   1bc63:	e9 59 ff ff ff       	jmp    1bbc1 <_ZL13stbi__readvalP13stbi__contextiPh+0x81>
   1bc68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1bc6f:	00 
      s->img_buffer_end = s->buffer_start + n;
   1bc70:	48 98                	cltq
      return *s->img_buffer++;
   1bc72:	44 0f b6 73 38       	movzbl 0x38(%rbx),%r14d
      s->img_buffer_end = s->buffer_start + n;
   1bc77:	48 01 c6             	add    %rax,%rsi
   1bc7a:	eb c0                	jmp    1bc3c <_ZL13stbi__readvalP13stbi__contextiPh+0xfc>
   1bc7c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001bc80 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf>:
{
   1bc80:	41 57                	push   %r15
   1bc82:	41 56                	push   %r14
   1bc84:	41 55                	push   %r13
   1bc86:	41 54                	push   %r12
   1bc88:	55                   	push   %rbp
   1bc89:	53                   	push   %rbx
   1bc8a:	48 89 fb             	mov    %rdi,%rbx
   1bc8d:	48 81 ec 48 0a 00 00 	sub    $0xa48,%rsp
   if (z->num_bits < n) stbi__fill_bits(z);
   1bc94:	8b 4f 10             	mov    0x10(%rdi),%ecx
      if (z->code_buffer >= (1U << z->num_bits)) {
   1bc97:	44 8b 47 14          	mov    0x14(%rdi),%r8d
   if (z->num_bits < n) stbi__fill_bits(z);
   1bc9b:	83 f9 04             	cmp    $0x4,%ecx
   1bc9e:	0f 8e bc 0a 00 00    	jle    1c760 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xae0>
   z->code_buffer >>= n;
   1bca4:	44 89 c6             	mov    %r8d,%esi
   z->num_bits -= n;
   1bca7:	83 e9 05             	sub    $0x5,%ecx
   z->code_buffer >>= n;
   1bcaa:	c1 ee 05             	shr    $0x5,%esi
   z->num_bits -= n;
   1bcad:	89 4b 10             	mov    %ecx,0x10(%rbx)
   z->code_buffer >>= n;
   1bcb0:	89 73 14             	mov    %esi,0x14(%rbx)
   if (z->num_bits < n) stbi__fill_bits(z);
   1bcb3:	83 f9 04             	cmp    $0x4,%ecx
   1bcb6:	0f 8e 54 0a 00 00    	jle    1c710 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xa90>
   z->code_buffer >>= n;
   1bcbc:	41 89 f3             	mov    %esi,%r11d
   z->num_bits -= n;
   1bcbf:	83 e9 05             	sub    $0x5,%ecx
   z->code_buffer >>= n;
   1bcc2:	41 c1 eb 05          	shr    $0x5,%r11d
   z->num_bits -= n;
   1bcc6:	89 4b 10             	mov    %ecx,0x10(%rbx)
   z->code_buffer >>= n;
   1bcc9:	44 89 5b 14          	mov    %r11d,0x14(%rbx)
   if (z->num_bits < n) stbi__fill_bits(z);
   1bccd:	83 f9 03             	cmp    $0x3,%ecx
   1bcd0:	0f 8e f2 09 00 00    	jle    1c6c8 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xa48>
   z->code_buffer >>= n;
   1bcd6:	44 89 d8             	mov    %r11d,%eax
   z->num_bits -= n;
   1bcd9:	83 e9 04             	sub    $0x4,%ecx
   k = z->code_buffer & ((1 << n) - 1);
   1bcdc:	41 83 e3 0f          	and    $0xf,%r11d
   memset(codelength_sizes, 0, sizeof(codelength_sizes));
   1bce0:	45 31 c9             	xor    %r9d,%r9d
   z->code_buffer >>= n;
   1bce3:	c1 e8 04             	shr    $0x4,%eax
   memset(codelength_sizes, 0, sizeof(codelength_sizes));
   1bce6:	66 0f ef c0          	pxor   %xmm0,%xmm0
   z->num_bits -= n;
   1bcea:	89 4b 10             	mov    %ecx,0x10(%rbx)
   int hclen = stbi__zreceive(a,4) + 4;
   1bced:	41 83 c3 04          	add    $0x4,%r11d
   memset(codelength_sizes, 0, sizeof(codelength_sizes));
   1bcf1:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
   1bcf6:	48 8d 2d a3 c7 01 00 	lea    0x1c7a3(%rip),%rbp        # 384a0 <_ZZL27stbi__compute_huffman_codesP10stbi__zbufE15length_dezigzag>
   z->code_buffer >>= n;
   1bcfd:	89 43 14             	mov    %eax,0x14(%rbx)
   memset(codelength_sizes, 0, sizeof(codelength_sizes));
   1bd00:	c7 44 24 2f 00 00 00 	movl   $0x0,0x2f(%rsp)
   1bd07:	00 
   for (i=0; i < hclen; ++i) {
   1bd08:	eb 2b                	jmp    1bd35 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xb5>
   1bd0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      codelength_sizes[length_dezigzag[i]] = (stbi_uc) s;
   1bd10:	42 0f b6 54 0d 00    	movzbl 0x0(%rbp,%r9,1),%edx
   k = z->code_buffer & ((1 << n) - 1);
   1bd16:	89 c7                	mov    %eax,%edi
   z->num_bits -= n;
   1bd18:	83 e9 03             	sub    $0x3,%ecx
   z->code_buffer >>= n;
   1bd1b:	c1 e8 03             	shr    $0x3,%eax
   k = z->code_buffer & ((1 << n) - 1);
   1bd1e:	83 e7 07             	and    $0x7,%edi
   for (i=0; i < hclen; ++i) {
   1bd21:	49 83 c1 01          	add    $0x1,%r9
   z->code_buffer >>= n;
   1bd25:	89 43 14             	mov    %eax,0x14(%rbx)
   z->num_bits -= n;
   1bd28:	89 4b 10             	mov    %ecx,0x10(%rbx)
      codelength_sizes[length_dezigzag[i]] = (stbi_uc) s;
   1bd2b:	40 88 7c 14 20       	mov    %dil,0x20(%rsp,%rdx,1)
   for (i=0; i < hclen; ++i) {
   1bd30:	45 39 cb             	cmp    %r9d,%r11d
   1bd33:	7e 43                	jle    1bd78 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xf8>
   if (z->num_bits < n) stbi__fill_bits(z);
   1bd35:	83 f9 02             	cmp    $0x2,%ecx
   1bd38:	7f d6                	jg     1bd10 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x90>
   return (z->zbuffer >= z->zbuffer_end);
   1bd3a:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
   1bd3e:	eb 24                	jmp    1bd64 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xe4>
   1bd40:	48 8b 13             	mov    (%rbx),%rdx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1bd43:	48 39 fa             	cmp    %rdi,%rdx
   1bd46:	73 0e                	jae    1bd56 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xd6>
   1bd48:	4c 8d 52 01          	lea    0x1(%rdx),%r10
   1bd4c:	4c 89 13             	mov    %r10,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1bd4f:	0f b6 12             	movzbl (%rdx),%edx
   1bd52:	d3 e2                	shl    %cl,%edx
   1bd54:	09 d0                	or     %edx,%eax
      z->num_bits += 8;
   1bd56:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1bd59:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1bd5c:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1bd5f:	83 f9 18             	cmp    $0x18,%ecx
   1bd62:	7f ac                	jg     1bd10 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x90>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1bd64:	89 c2                	mov    %eax,%edx
   1bd66:	d3 ea                	shr    %cl,%edx
   1bd68:	85 d2                	test   %edx,%edx
   1bd6a:	74 d4                	je     1bd40 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc0>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1bd6c:	48 89 3b             	mov    %rdi,(%rbx)
        return;
   1bd6f:	eb 9f                	jmp    1bd10 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x90>
   1bd71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   memset(z->fast, 0, sizeof(z->fast));
   1bd78:	31 c0                	xor    %eax,%eax
   memset(sizes, 0, sizeof(sizes));
   1bd7a:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
   memset(z->fast, 0, sizeof(z->fast));
   1bd7e:	b9 80 00 00 00       	mov    $0x80,%ecx
   memset(sizes, 0, sizeof(sizes));
   1bd83:	66 0f ef c0          	pxor   %xmm0,%xmm0
   memset(z->fast, 0, sizeof(z->fast));
   1bd87:	4c 8d 8c 24 50 02 00 	lea    0x250(%rsp),%r9
   1bd8e:	00 
   memset(sizes, 0, sizeof(sizes));
   1bd8f:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
   1bd96:	00 
   1bd97:	4c 8d 54 24 33       	lea    0x33(%rsp),%r10
   memset(z->fast, 0, sizeof(z->fast));
   1bd9c:	4c 89 cf             	mov    %r9,%rdi
   memset(sizes, 0, sizeof(sizes));
   1bd9f:	0f 29 84 24 90 00 00 	movaps %xmm0,0x90(%rsp)
   1bda6:	00 
   memset(z->fast, 0, sizeof(z->fast));
   1bda7:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1bdaa:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
   memset(sizes, 0, sizeof(sizes));
   1bdaf:	c7 84 24 c0 00 00 00 	movl   $0x0,0xc0(%rsp)
   1bdb6:	00 00 00 00 
   1bdba:	0f 29 84 24 a0 00 00 	movaps %xmm0,0xa0(%rsp)
   1bdc1:	00 
   1bdc2:	48 89 f8             	mov    %rdi,%rax
   1bdc5:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
   1bdcc:	00 
   1bdcd:	0f 1f 00             	nopl   (%rax)
      ++sizes[sizelist[i]];
   1bdd0:	0f b6 10             	movzbl (%rax),%edx
   for (i=0; i < num; ++i)
   1bdd3:	48 83 c0 01          	add    $0x1,%rax
      ++sizes[sizelist[i]];
   1bdd7:	83 84 94 80 00 00 00 	addl   $0x1,0x80(%rsp,%rdx,4)
   1bdde:	01 
   for (i=0; i < num; ++i)
   1bddf:	49 39 c2             	cmp    %rax,%r10
   1bde2:	75 ec                	jne    1bdd0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x150>
      if (sizes[i] > (1 << i))
   1bde4:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
   sizes[0] = 0;
   1bdeb:	c7 84 24 80 00 00 00 	movl   $0x0,0x80(%rsp)
   1bdf2:	00 00 00 00 
      if (sizes[i] > (1 << i))
   1bdf6:	83 f9 02             	cmp    $0x2,%ecx
   1bdf9:	0f 8f 99 05 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1bdff:	44 8b 94 24 88 00 00 	mov    0x88(%rsp),%r10d
   1be06:	00 
   1be07:	41 83 fa 04          	cmp    $0x4,%r10d
   1be0b:	0f 8f 87 05 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1be11:	44 8b 9c 24 8c 00 00 	mov    0x8c(%rsp),%r11d
   1be18:	00 
   1be19:	41 83 fb 08          	cmp    $0x8,%r11d
   1be1d:	0f 8f 75 05 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1be23:	8b ac 24 90 00 00 00 	mov    0x90(%rsp),%ebp
   1be2a:	83 fd 10             	cmp    $0x10,%ebp
   1be2d:	0f 8f 65 05 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1be33:	44 8b a4 24 94 00 00 	mov    0x94(%rsp),%r12d
   1be3a:	00 
   1be3b:	41 83 fc 20          	cmp    $0x20,%r12d
   1be3f:	0f 8f 53 05 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1be45:	44 8b ac 24 98 00 00 	mov    0x98(%rsp),%r13d
   1be4c:	00 
   1be4d:	41 83 fd 40          	cmp    $0x40,%r13d
   1be51:	0f 8f 41 05 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1be57:	44 8b b4 24 9c 00 00 	mov    0x9c(%rsp),%r14d
   1be5e:	00 
   1be5f:	41 81 fe 80 00 00 00 	cmp    $0x80,%r14d
   1be66:	0f 8f 2c 05 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1be6c:	44 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%r15d
   1be73:	00 
   1be74:	41 81 ff 00 01 00 00 	cmp    $0x100,%r15d
   1be7b:	0f 8f 17 05 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1be81:	8b 84 24 a4 00 00 00 	mov    0xa4(%rsp),%eax
   1be88:	89 04 24             	mov    %eax,(%rsp)
   1be8b:	3d 00 02 00 00       	cmp    $0x200,%eax
   1be90:	0f 8f 02 05 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1be96:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
   1be9d:	89 44 24 04          	mov    %eax,0x4(%rsp)
   1bea1:	3d 00 04 00 00       	cmp    $0x400,%eax
   1bea6:	0f 8f ec 04 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1beac:	8b 84 24 ac 00 00 00 	mov    0xac(%rsp),%eax
   1beb3:	89 44 24 0c          	mov    %eax,0xc(%rsp)
   1beb7:	3d 00 08 00 00       	cmp    $0x800,%eax
   1bebc:	0f 8f d6 04 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1bec2:	8b 84 24 b0 00 00 00 	mov    0xb0(%rsp),%eax
   1bec9:	89 44 24 10          	mov    %eax,0x10(%rsp)
   1becd:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1bed2:	0f 8f c0 04 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1bed8:	8b 84 24 b4 00 00 00 	mov    0xb4(%rsp),%eax
   1bedf:	89 44 24 14          	mov    %eax,0x14(%rsp)
   1bee3:	3d 00 20 00 00       	cmp    $0x2000,%eax
   1bee8:	0f 8f aa 04 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1beee:	8b 84 24 b8 00 00 00 	mov    0xb8(%rsp),%eax
   1bef5:	89 44 24 18          	mov    %eax,0x18(%rsp)
   1bef9:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1befe:	0f 8f 94 04 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
   1bf04:	8b 84 24 bc 00 00 00 	mov    0xbc(%rsp),%eax
   1bf0b:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
   1bf0f:	3d 00 80 00 00       	cmp    $0x8000,%eax
   1bf14:	0f 8f 7e 04 00 00    	jg     1c398 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x718>
      z->firstcode[i] = (stbi__uint16) code;
   1bf1a:	31 c0                	xor    %eax,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1bf1c:	31 d2                	xor    %edx,%edx
      next_code[i] = code;
   1bf1e:	c7 44 24 44 00 00 00 	movl   $0x0,0x44(%rsp)
   1bf25:	00 
      z->firstcode[i] = (stbi__uint16) code;
   1bf26:	66 89 84 24 52 06 00 	mov    %ax,0x652(%rsp)
   1bf2d:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bf2e:	89 c8                	mov    %ecx,%eax
   1bf30:	c1 e0 0f             	shl    $0xf,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1bf33:	66 89 94 24 b6 06 00 	mov    %dx,0x6b6(%rsp)
   1bf3a:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bf3b:	89 84 24 74 06 00 00 	mov    %eax,0x674(%rsp)
      code <<= 1;
   1bf42:	8d 04 09             	lea    (%rcx,%rcx,1),%eax
      next_code[i] = code;
   1bf45:	89 44 24 48          	mov    %eax,0x48(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1bf49:	66 89 84 24 54 06 00 	mov    %ax,0x654(%rsp)
   1bf50:	00 
      code = (code + sizes[i]);
   1bf51:	44 01 d0             	add    %r10d,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1bf54:	66 89 8c 24 b8 06 00 	mov    %cx,0x6b8(%rsp)
   1bf5b:	00 
      if (sizes[i])
   1bf5c:	45 85 d2             	test   %r10d,%r10d
   1bf5f:	74 09                	je     1bf6a <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x2ea>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1bf61:	83 f8 04             	cmp    $0x4,%eax
   1bf64:	0f 8f e1 04 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bf6a:	89 c2                	mov    %eax,%edx
      k += sizes[i];
   1bf6c:	44 01 d1             	add    %r10d,%ecx
      code <<= 1;
   1bf6f:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bf71:	c1 e2 0e             	shl    $0xe,%edx
      next_code[i] = code;
   1bf74:	89 44 24 4c          	mov    %eax,0x4c(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1bf78:	66 89 84 24 56 06 00 	mov    %ax,0x656(%rsp)
   1bf7f:	00 
      code = (code + sizes[i]);
   1bf80:	44 01 d8             	add    %r11d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bf83:	89 94 24 78 06 00 00 	mov    %edx,0x678(%rsp)
      z->firstsymbol[i] = (stbi__uint16) k;
   1bf8a:	66 89 8c 24 ba 06 00 	mov    %cx,0x6ba(%rsp)
   1bf91:	00 
      if (sizes[i])
   1bf92:	45 85 db             	test   %r11d,%r11d
   1bf95:	74 09                	je     1bfa0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x320>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1bf97:	83 f8 08             	cmp    $0x8,%eax
   1bf9a:	0f 8f ab 04 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bfa0:	41 89 c2             	mov    %eax,%r10d
      k += sizes[i];
   1bfa3:	44 01 d9             	add    %r11d,%ecx
      code <<= 1;
   1bfa6:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bfa8:	41 c1 e2 0d          	shl    $0xd,%r10d
      next_code[i] = code;
   1bfac:	89 44 24 50          	mov    %eax,0x50(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1bfb0:	66 89 84 24 58 06 00 	mov    %ax,0x658(%rsp)
   1bfb7:	00 
      code = (code + sizes[i]);
   1bfb8:	01 e8                	add    %ebp,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bfba:	44 89 94 24 7c 06 00 	mov    %r10d,0x67c(%rsp)
   1bfc1:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1bfc2:	66 89 8c 24 bc 06 00 	mov    %cx,0x6bc(%rsp)
   1bfc9:	00 
      if (sizes[i])
   1bfca:	85 ed                	test   %ebp,%ebp
   1bfcc:	74 09                	je     1bfd7 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x357>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1bfce:	83 f8 10             	cmp    $0x10,%eax
   1bfd1:	0f 8f 74 04 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bfd7:	41 89 c2             	mov    %eax,%r10d
      k += sizes[i];
   1bfda:	01 e9                	add    %ebp,%ecx
      code <<= 1;
   1bfdc:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bfde:	41 c1 e2 0c          	shl    $0xc,%r10d
      next_code[i] = code;
   1bfe2:	89 44 24 54          	mov    %eax,0x54(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1bfe6:	66 89 84 24 5a 06 00 	mov    %ax,0x65a(%rsp)
   1bfed:	00 
      code = (code + sizes[i]);
   1bfee:	44 01 e0             	add    %r12d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1bff1:	44 89 94 24 80 06 00 	mov    %r10d,0x680(%rsp)
   1bff8:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1bff9:	66 89 8c 24 be 06 00 	mov    %cx,0x6be(%rsp)
   1c000:	00 
      if (sizes[i])
   1c001:	45 85 e4             	test   %r12d,%r12d
   1c004:	74 09                	je     1c00f <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x38f>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c006:	83 f8 20             	cmp    $0x20,%eax
   1c009:	0f 8f 3c 04 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c00f:	41 89 c2             	mov    %eax,%r10d
      k += sizes[i];
   1c012:	44 01 e1             	add    %r12d,%ecx
      code <<= 1;
   1c015:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c017:	41 c1 e2 0b          	shl    $0xb,%r10d
      next_code[i] = code;
   1c01b:	89 44 24 58          	mov    %eax,0x58(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1c01f:	66 89 84 24 5c 06 00 	mov    %ax,0x65c(%rsp)
   1c026:	00 
      code = (code + sizes[i]);
   1c027:	44 01 e8             	add    %r13d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c02a:	44 89 94 24 84 06 00 	mov    %r10d,0x684(%rsp)
   1c031:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1c032:	66 89 8c 24 c0 06 00 	mov    %cx,0x6c0(%rsp)
   1c039:	00 
      if (sizes[i])
   1c03a:	45 85 ed             	test   %r13d,%r13d
   1c03d:	74 09                	je     1c048 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x3c8>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c03f:	83 f8 40             	cmp    $0x40,%eax
   1c042:	0f 8f 03 04 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c048:	41 89 c2             	mov    %eax,%r10d
      k += sizes[i];
   1c04b:	44 01 e9             	add    %r13d,%ecx
      code <<= 1;
   1c04e:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c050:	41 c1 e2 0a          	shl    $0xa,%r10d
      next_code[i] = code;
   1c054:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1c058:	66 89 84 24 5e 06 00 	mov    %ax,0x65e(%rsp)
   1c05f:	00 
      code = (code + sizes[i]);
   1c060:	44 01 f0             	add    %r14d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c063:	44 89 94 24 88 06 00 	mov    %r10d,0x688(%rsp)
   1c06a:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1c06b:	66 89 8c 24 c2 06 00 	mov    %cx,0x6c2(%rsp)
   1c072:	00 
      if (sizes[i])
   1c073:	45 85 f6             	test   %r14d,%r14d
   1c076:	74 0b                	je     1c083 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x403>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c078:	3d 80 00 00 00       	cmp    $0x80,%eax
   1c07d:	0f 8f c8 03 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c083:	41 89 c2             	mov    %eax,%r10d
      k += sizes[i];
   1c086:	44 01 f1             	add    %r14d,%ecx
      code <<= 1;
   1c089:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c08b:	41 c1 e2 09          	shl    $0x9,%r10d
      next_code[i] = code;
   1c08f:	89 44 24 60          	mov    %eax,0x60(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1c093:	66 89 84 24 60 06 00 	mov    %ax,0x660(%rsp)
   1c09a:	00 
      code = (code + sizes[i]);
   1c09b:	44 01 f8             	add    %r15d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c09e:	44 89 94 24 8c 06 00 	mov    %r10d,0x68c(%rsp)
   1c0a5:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1c0a6:	66 89 8c 24 c4 06 00 	mov    %cx,0x6c4(%rsp)
   1c0ad:	00 
      if (sizes[i])
   1c0ae:	45 85 ff             	test   %r15d,%r15d
   1c0b1:	74 0b                	je     1c0be <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x43e>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c0b3:	3d 00 01 00 00       	cmp    $0x100,%eax
   1c0b8:	0f 8f 8d 03 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c0be:	41 89 c2             	mov    %eax,%r10d
      code = (code + sizes[i]);
   1c0c1:	8b 14 24             	mov    (%rsp),%edx
      code <<= 1;
   1c0c4:	01 c0                	add    %eax,%eax
      k += sizes[i];
   1c0c6:	44 01 f9             	add    %r15d,%ecx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c0c9:	41 c1 e2 08          	shl    $0x8,%r10d
      next_code[i] = code;
   1c0cd:	89 44 24 64          	mov    %eax,0x64(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1c0d1:	66 89 84 24 62 06 00 	mov    %ax,0x662(%rsp)
   1c0d8:	00 
      code = (code + sizes[i]);
   1c0d9:	01 d0                	add    %edx,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c0db:	44 89 94 24 90 06 00 	mov    %r10d,0x690(%rsp)
   1c0e2:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1c0e3:	66 89 8c 24 c6 06 00 	mov    %cx,0x6c6(%rsp)
   1c0ea:	00 
      if (sizes[i])
   1c0eb:	85 d2                	test   %edx,%edx
   1c0ed:	74 0b                	je     1c0fa <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x47a>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c0ef:	3d 00 02 00 00       	cmp    $0x200,%eax
   1c0f4:	0f 8f 51 03 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      k += sizes[i];
   1c0fa:	8b 14 24             	mov    (%rsp),%edx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c0fd:	41 89 c2             	mov    %eax,%r10d
      code <<= 1;
   1c100:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c102:	41 c1 e2 07          	shl    $0x7,%r10d
      next_code[i] = code;
   1c106:	89 44 24 68          	mov    %eax,0x68(%rsp)
      k += sizes[i];
   1c10a:	01 d1                	add    %edx,%ecx
      code = (code + sizes[i]);
   1c10c:	8b 54 24 04          	mov    0x4(%rsp),%edx
      z->firstcode[i] = (stbi__uint16) code;
   1c110:	66 89 84 24 64 06 00 	mov    %ax,0x664(%rsp)
   1c117:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c118:	44 89 94 24 94 06 00 	mov    %r10d,0x694(%rsp)
   1c11f:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1c120:	66 89 8c 24 c8 06 00 	mov    %cx,0x6c8(%rsp)
   1c127:	00 
      code = (code + sizes[i]);
   1c128:	01 d0                	add    %edx,%eax
      if (sizes[i])
   1c12a:	85 d2                	test   %edx,%edx
   1c12c:	74 0b                	je     1c139 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x4b9>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c12e:	3d 00 04 00 00       	cmp    $0x400,%eax
   1c133:	0f 8f 12 03 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      k += sizes[i];
   1c139:	8b 54 24 04          	mov    0x4(%rsp),%edx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c13d:	41 89 c3             	mov    %eax,%r11d
      code <<= 1;
   1c140:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c142:	41 c1 e3 06          	shl    $0x6,%r11d
      next_code[i] = code;
   1c146:	89 44 24 6c          	mov    %eax,0x6c(%rsp)
      k += sizes[i];
   1c14a:	01 d1                	add    %edx,%ecx
      code = (code + sizes[i]);
   1c14c:	8b 54 24 0c          	mov    0xc(%rsp),%edx
      z->firstcode[i] = (stbi__uint16) code;
   1c150:	66 89 84 24 66 06 00 	mov    %ax,0x666(%rsp)
   1c157:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c158:	44 89 9c 24 98 06 00 	mov    %r11d,0x698(%rsp)
   1c15f:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1c160:	66 89 8c 24 ca 06 00 	mov    %cx,0x6ca(%rsp)
   1c167:	00 
      code = (code + sizes[i]);
   1c168:	01 d0                	add    %edx,%eax
      if (sizes[i])
   1c16a:	85 d2                	test   %edx,%edx
   1c16c:	74 0b                	je     1c179 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x4f9>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c16e:	3d 00 08 00 00       	cmp    $0x800,%eax
   1c173:	0f 8f d2 02 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      k += sizes[i];
   1c179:	8b 54 24 0c          	mov    0xc(%rsp),%edx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c17d:	41 89 c4             	mov    %eax,%r12d
      code <<= 1;
   1c180:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c182:	41 c1 e4 05          	shl    $0x5,%r12d
      next_code[i] = code;
   1c186:	89 44 24 70          	mov    %eax,0x70(%rsp)
      k += sizes[i];
   1c18a:	01 d1                	add    %edx,%ecx
      code = (code + sizes[i]);
   1c18c:	8b 54 24 10          	mov    0x10(%rsp),%edx
      z->firstcode[i] = (stbi__uint16) code;
   1c190:	66 89 84 24 68 06 00 	mov    %ax,0x668(%rsp)
   1c197:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c198:	44 89 a4 24 9c 06 00 	mov    %r12d,0x69c(%rsp)
   1c19f:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1c1a0:	66 89 8c 24 cc 06 00 	mov    %cx,0x6cc(%rsp)
   1c1a7:	00 
      code = (code + sizes[i]);
   1c1a8:	01 d0                	add    %edx,%eax
      if (sizes[i])
   1c1aa:	85 d2                	test   %edx,%edx
   1c1ac:	74 0b                	je     1c1b9 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x539>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c1ae:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1c1b3:	0f 8f 92 02 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c1b9:	89 c2                	mov    %eax,%edx
      code <<= 1;
   1c1bb:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c1bd:	c1 e2 04             	shl    $0x4,%edx
      next_code[i] = code;
   1c1c0:	89 44 24 74          	mov    %eax,0x74(%rsp)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c1c4:	89 14 24             	mov    %edx,(%rsp)
   1c1c7:	89 94 24 a0 06 00 00 	mov    %edx,0x6a0(%rsp)
      k += sizes[i];
   1c1ce:	8b 54 24 10          	mov    0x10(%rsp),%edx
      z->firstcode[i] = (stbi__uint16) code;
   1c1d2:	66 89 84 24 6a 06 00 	mov    %ax,0x66a(%rsp)
   1c1d9:	00 
      k += sizes[i];
   1c1da:	01 d1                	add    %edx,%ecx
      code = (code + sizes[i]);
   1c1dc:	8b 54 24 14          	mov    0x14(%rsp),%edx
      z->firstsymbol[i] = (stbi__uint16) k;
   1c1e0:	66 89 8c 24 ce 06 00 	mov    %cx,0x6ce(%rsp)
   1c1e7:	00 
      code = (code + sizes[i]);
   1c1e8:	01 d0                	add    %edx,%eax
      if (sizes[i])
   1c1ea:	85 d2                	test   %edx,%edx
   1c1ec:	74 0b                	je     1c1f9 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x579>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c1ee:	3d 00 20 00 00       	cmp    $0x2000,%eax
   1c1f3:	0f 8f 52 02 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      k += sizes[i];
   1c1f9:	8b 54 24 14          	mov    0x14(%rsp),%edx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c1fd:	44 8d 2c c5 00 00 00 	lea    0x0(,%rax,8),%r13d
   1c204:	00 
      code <<= 1;
   1c205:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   1c207:	89 44 24 78          	mov    %eax,0x78(%rsp)
      k += sizes[i];
   1c20b:	01 d1                	add    %edx,%ecx
      code = (code + sizes[i]);
   1c20d:	8b 54 24 18          	mov    0x18(%rsp),%edx
      z->firstcode[i] = (stbi__uint16) code;
   1c211:	66 89 84 24 6c 06 00 	mov    %ax,0x66c(%rsp)
   1c218:	00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c219:	44 89 ac 24 a4 06 00 	mov    %r13d,0x6a4(%rsp)
   1c220:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1c221:	66 89 8c 24 d0 06 00 	mov    %cx,0x6d0(%rsp)
   1c228:	00 
      code = (code + sizes[i]);
   1c229:	01 d0                	add    %edx,%eax
      if (sizes[i])
   1c22b:	85 d2                	test   %edx,%edx
   1c22d:	74 0b                	je     1c23a <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x5ba>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c22f:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1c234:	0f 8f 11 02 00 00    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c23a:	8d 14 85 00 00 00 00 	lea    0x0(,%rax,4),%edx
      code <<= 1;
   1c241:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c243:	89 54 24 04          	mov    %edx,0x4(%rsp)
   1c247:	89 94 24 a8 06 00 00 	mov    %edx,0x6a8(%rsp)
      k += sizes[i];
   1c24e:	8b 54 24 18          	mov    0x18(%rsp),%edx
      next_code[i] = code;
   1c252:	89 44 24 7c          	mov    %eax,0x7c(%rsp)
      k += sizes[i];
   1c256:	01 d1                	add    %edx,%ecx
      code = (code + sizes[i]);
   1c258:	8b 54 24 1c          	mov    0x1c(%rsp),%edx
      z->firstcode[i] = (stbi__uint16) code;
   1c25c:	66 89 84 24 6e 06 00 	mov    %ax,0x66e(%rsp)
   1c263:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1c264:	66 89 8c 24 d2 06 00 	mov    %cx,0x6d2(%rsp)
   1c26b:	00 
      code = (code + sizes[i]);
   1c26c:	01 d0                	add    %edx,%eax
      if (sizes[i])
   1c26e:	85 d2                	test   %edx,%edx
   1c270:	0f 85 51 06 00 00    	jne    1c8c7 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc47>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c276:	01 c0                	add    %eax,%eax
   return stbi__bitreverse16(v) >> (16-bits);
   1c278:	44 89 64 24 10       	mov    %r12d,0x10(%rsp)
   z->maxcode[16] = 0x10000; // sentinel
   1c27d:	45 31 d2             	xor    %r10d,%r10d
   return stbi__bitreverse16(v) >> (16-bits);
   1c280:	41 bf 10 00 00 00    	mov    $0x10,%r15d
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1c286:	89 44 24 0c          	mov    %eax,0xc(%rsp)
   1c28a:	89 84 24 ac 06 00 00 	mov    %eax,0x6ac(%rsp)
   z->maxcode[16] = 0x10000; // sentinel
   1c291:	c7 84 24 b0 06 00 00 	movl   $0x10000,0x6b0(%rsp)
   1c298:	00 00 01 00 
   return stbi__bitreverse16(v) >> (16-bits);
   1c29c:	44 89 44 24 14       	mov    %r8d,0x14(%rsp)
   1c2a1:	89 74 24 18          	mov    %esi,0x18(%rsp)
   1c2a5:	eb 20                	jmp    1c2c7 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x647>
   1c2a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1c2ae:	00 00 
         ++next_code[s];
   1c2b0:	41 83 c0 01          	add    $0x1,%r8d
   1c2b4:	44 89 44 ac 40       	mov    %r8d,0x40(%rsp,%rbp,4)
   for (i=0; i < num; ++i) {
   1c2b9:	49 83 c2 01          	add    $0x1,%r10
   1c2bd:	49 83 fa 13          	cmp    $0x13,%r10
   1c2c1:	0f 84 99 01 00 00    	je     1c460 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7e0>
      int s = sizelist[i];
   1c2c7:	42 0f b6 34 17       	movzbl (%rdi,%r10,1),%esi
   1c2cc:	89 f1                	mov    %esi,%ecx
      if (s) {
   1c2ce:	85 f6                	test   %esi,%esi
   1c2d0:	74 e7                	je     1c2b9 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x639>
         int c = next_code[s] - z->firstcode[s] + z->firstsymbol[s];
   1c2d2:	48 63 ee             	movslq %esi,%rbp
   1c2d5:	44 8b 44 ac 40       	mov    0x40(%rsp,%rbp,4),%r8d
   1c2da:	0f b7 94 6c 50 06 00 	movzwl 0x650(%rsp,%rbp,2),%edx
   1c2e1:	00 
   1c2e2:	44 89 c0             	mov    %r8d,%eax
   1c2e5:	29 d0                	sub    %edx,%eax
   1c2e7:	0f b7 94 6c b4 06 00 	movzwl 0x6b4(%rsp,%rbp,2),%edx
   1c2ee:	00 
   1c2ef:	01 d0                	add    %edx,%eax
         z->size [c] = (stbi_uc     ) s;
   1c2f1:	48 98                	cltq
   1c2f3:	40 88 b4 04 d4 06 00 	mov    %sil,0x6d4(%rsp,%rax,1)
   1c2fa:	00 
         z->value[c] = (stbi__uint16) i;
   1c2fb:	66 44 89 94 44 f4 07 	mov    %r10w,0x7f4(%rsp,%rax,2)
   1c302:	00 00 
         if (s <= STBI__ZFAST_BITS) {
   1c304:	83 fe 09             	cmp    $0x9,%esi
   1c307:	7f a7                	jg     1c2b0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x630>
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1c309:	44 89 c2             	mov    %r8d,%edx
   1c30c:	43 8d 04 00          	lea    (%r8,%r8,1),%eax
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   1c310:	41 89 f6             	mov    %esi,%r14d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1c313:	d1 fa                	sar    %edx
   1c315:	25 aa aa 00 00       	and    $0xaaaa,%eax
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   1c31a:	41 c1 e6 09          	shl    $0x9,%r14d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1c31e:	81 e2 55 55 00 00    	and    $0x5555,%edx
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   1c324:	45 09 d6             	or     %r10d,%r14d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1c327:	09 d0                	or     %edx,%eax
  n = ((n & 0xCCCC) >>  2) | ((n & 0x3333) << 2);
   1c329:	41 89 c4             	mov    %eax,%r12d
   1c32c:	8d 14 85 00 00 00 00 	lea    0x0(,%rax,4),%edx
   1c333:	41 c1 fc 02          	sar    $0x2,%r12d
   1c337:	81 e2 cc cc 00 00    	and    $0xcccc,%edx
   1c33d:	41 81 e4 33 33 00 00 	and    $0x3333,%r12d
   1c344:	44 09 e2             	or     %r12d,%edx
               j += (1 << s);
   1c347:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);
   1c34d:	89 d0                	mov    %edx,%eax
   1c34f:	c1 e2 04             	shl    $0x4,%edx
   1c352:	c1 f8 04             	sar    $0x4,%eax
   1c355:	81 e2 f0 f0 00 00    	and    $0xf0f0,%edx
               j += (1 << s);
   1c35b:	41 d3 e4             	shl    %cl,%r12d
   return stbi__bitreverse16(v) >> (16-bits);
   1c35e:	44 89 f9             	mov    %r15d,%ecx
  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);
   1c361:	25 0f 0f 00 00       	and    $0xf0f,%eax
   return stbi__bitreverse16(v) >> (16-bits);
   1c366:	29 f1                	sub    %esi,%ecx
   1c368:	4d 63 e4             	movslq %r12d,%r12
  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);
   1c36b:	09 c2                	or     %eax,%edx
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1c36d:	89 d0                	mov    %edx,%eax
   1c36f:	c1 e2 08             	shl    $0x8,%edx
   1c372:	c1 f8 08             	sar    $0x8,%eax
   1c375:	0f b7 d2             	movzwl %dx,%edx
   1c378:	09 d0                	or     %edx,%eax
   return stbi__bitreverse16(v) >> (16-bits);
   1c37a:	d3 f8                	sar    %cl,%eax
   1c37c:	48 98                	cltq
   1c37e:	66 90                	xchg   %ax,%ax
               z->fast[j] = fastv;
   1c380:	66 45 89 34 41       	mov    %r14w,(%r9,%rax,2)
            while (j < (1 << STBI__ZFAST_BITS)) {
   1c385:	4c 01 e0             	add    %r12,%rax
   1c388:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1c38d:	7e f1                	jle    1c380 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x700>
   1c38f:	e9 1c ff ff ff       	jmp    1c2b0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x630>
   1c394:	0f 1f 40 00          	nopl   0x0(%rax)
   stbi__g_failure_reason = str;
   1c398:	48 8d 05 af b6 01 00 	lea    0x1b6af(%rip),%rax        # 37a4e <_ZSt19piecewise_construct+0x107>
   1c39f:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1c3a6:	ff ff 
   if (!stbi__zbuild_huffman(&z_codelength, codelength_sizes, 19)) return 0;
   1c3a8:	31 c0                	xor    %eax,%eax
}
   1c3aa:	48 81 c4 48 0a 00 00 	add    $0xa48,%rsp
   1c3b1:	5b                   	pop    %rbx
   1c3b2:	5d                   	pop    %rbp
   1c3b3:	41 5c                	pop    %r12
   1c3b5:	41 5d                	pop    %r13
   1c3b7:	41 5e                	pop    %r14
   1c3b9:	41 5f                	pop    %r15
   1c3bb:	c3                   	ret
   1c3bc:	0f 1f 40 00          	nopl   0x0(%rax)
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1c3c0:	89 d1                	mov    %edx,%ecx
   1c3c2:	8d 3c 12             	lea    (%rdx,%rdx,1),%edi
   1c3c5:	d1 f9                	sar    %ecx
   1c3c7:	81 e7 aa aa 00 00    	and    $0xaaaa,%edi
   1c3cd:	81 e1 55 55 00 00    	and    $0x5555,%ecx
   1c3d3:	09 cf                	or     %ecx,%edi
  n = ((n & 0xCCCC) >>  2) | ((n & 0x3333) << 2);
   1c3d5:	89 f9                	mov    %edi,%ecx
   1c3d7:	c1 e7 02             	shl    $0x2,%edi
   1c3da:	c1 f9 02             	sar    $0x2,%ecx
   1c3dd:	81 e7 cc cc 00 00    	and    $0xcccc,%edi
   1c3e3:	81 e1 33 33 00 00    	and    $0x3333,%ecx
   1c3e9:	09 cf                	or     %ecx,%edi
  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);
   1c3eb:	89 f9                	mov    %edi,%ecx
   1c3ed:	c1 e7 04             	shl    $0x4,%edi
   1c3f0:	c1 f9 04             	sar    $0x4,%ecx
   1c3f3:	81 e7 f0 f0 00 00    	and    $0xf0f0,%edi
   1c3f9:	81 e1 0f 0f 00 00    	and    $0xf0f,%ecx
   1c3ff:	09 cf                	or     %ecx,%edi
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1c401:	89 f9                	mov    %edi,%ecx
   1c403:	c1 e7 08             	shl    $0x8,%edi
   1c406:	c1 f9 08             	sar    $0x8,%ecx
   1c409:	0f b7 ff             	movzwl %di,%edi
   1c40c:	09 f9                	or     %edi,%ecx
   1c40e:	41 89 ce             	mov    %ecx,%r14d
      if (k < z->maxcode[s])
   1c411:	44 39 d9             	cmp    %r11d,%ecx
   1c414:	0f 8c e6 03 00 00    	jl     1c800 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xb80>
   1c41a:	41 39 cc             	cmp    %ecx,%r12d
   1c41d:	0f 8f 4d 04 00 00    	jg     1c870 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xbf0>
   1c423:	39 0c 24             	cmp    %ecx,(%rsp)
   1c426:	0f 8f 94 04 00 00    	jg     1c8c0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc40>
   1c42c:	44 39 e9             	cmp    %r13d,%ecx
   1c42f:	0f 8c b2 04 00 00    	jl     1c8e7 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc67>
   1c435:	8b 7c 24 04          	mov    0x4(%rsp),%edi
   1c439:	39 f9                	cmp    %edi,%ecx
   1c43b:	0f 8c ad 04 00 00    	jl     1c8ee <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc6e>
   1c441:	39 4c 24 0c          	cmp    %ecx,0xc(%rsp)
   1c445:	0f 8f 95 04 00 00    	jg     1c8e0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc60>
   stbi__g_failure_reason = str;
   1c44b:	48 8d 05 ec b5 01 00 	lea    0x1b5ec(%rip),%rax        # 37a3e <_ZSt19piecewise_construct+0xf7>
   1c452:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1c459:	ff ff 
      if (c < 0 || c >= 19) return stbi__err("bad codelengths", "Corrupt PNG");
   1c45b:	e9 48 ff ff ff       	jmp    1c3a8 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x728>
   k = z->code_buffer & ((1 << n) - 1);
   1c460:	44 8b 44 24 14       	mov    0x14(%rsp),%r8d
   1c465:	8b 74 24 18          	mov    0x18(%rsp),%esi
   b = (k >> (16-s)) - z->firstcode[s] + z->firstsymbol[s];
   1c469:	bd 10 00 00 00       	mov    $0x10,%ebp
         memset(lencodes+n, fill, c);
   1c46e:	4c 8d 94 24 80 00 00 	lea    0x80(%rsp),%r10
   1c475:	00 
   1c476:	8b 44 24 08          	mov    0x8(%rsp),%eax
   k = z->code_buffer & ((1 << n) - 1);
   1c47a:	44 8b 64 24 10       	mov    0x10(%rsp),%r12d
         memset(lencodes+n, fill, c);
   1c47f:	49 b9 01 01 01 01 01 	movabs $0x101010101010101,%r9
   1c486:	01 01 01 
   k = z->code_buffer & ((1 << n) - 1);
   1c489:	41 83 e0 1f          	and    $0x1f,%r8d
   1c48d:	83 e6 1f             	and    $0x1f,%esi
   int hdist = stbi__zreceive(a,5) + 1;
   1c490:	44 8d 7e 01          	lea    0x1(%rsi),%r15d
   int hlit  = stbi__zreceive(a,5) + 257;
   1c494:	45 8d b0 01 01 00 00 	lea    0x101(%r8),%r14d
   n = 0;
   1c49b:	31 f6                	xor    %esi,%esi
         memset(lencodes+n, fill, c);
   1c49d:	44 89 74 24 10       	mov    %r14d,0x10(%rsp)
   int ntot  = hlit + hdist;
   1c4a2:	47 8d 04 3e          	lea    (%r14,%r15,1),%r8d
         memset(lencodes+n, fill, c);
   1c4a6:	44 89 7c 24 14       	mov    %r15d,0x14(%rsp)
   if (a->num_bits < 16) {
   1c4ab:	83 f8 0f             	cmp    $0xf,%eax
   1c4ae:	0f 8f af 00 00 00    	jg     1c563 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x8e3>
   1c4b4:	0f 1f 40 00          	nopl   0x0(%rax)
   return (z->zbuffer >= z->zbuffer_end);
   1c4b8:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
      if (stbi__zeof(a)) {
   1c4bc:	48 39 3b             	cmp    %rdi,(%rbx)
   1c4bf:	73 8a                	jae    1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c4c1:	8b 53 14             	mov    0x14(%rbx),%edx
   1c4c4:	89 c1                	mov    %eax,%ecx
   1c4c6:	eb 30                	jmp    1c4f8 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x878>
   1c4c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1c4cf:	00 
   return (z->zbuffer >= z->zbuffer_end);
   1c4d0:	48 8b 03             	mov    (%rbx),%rax
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1c4d3:	48 39 f8             	cmp    %rdi,%rax
   1c4d6:	73 0e                	jae    1c4e6 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x866>
   1c4d8:	4c 8d 70 01          	lea    0x1(%rax),%r14
   1c4dc:	4c 89 33             	mov    %r14,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c4df:	0f b6 00             	movzbl (%rax),%eax
   1c4e2:	d3 e0                	shl    %cl,%eax
   1c4e4:	09 c2                	or     %eax,%edx
      z->num_bits += 8;
   1c4e6:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c4e9:	89 53 14             	mov    %edx,0x14(%rbx)
      z->num_bits += 8;
   1c4ec:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1c4ef:	83 f9 18             	cmp    $0x18,%ecx
   1c4f2:	0f 8f 40 01 00 00    	jg     1c638 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x9b8>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c4f8:	89 d0                	mov    %edx,%eax
   1c4fa:	d3 e8                	shr    %cl,%eax
   1c4fc:	85 c0                	test   %eax,%eax
   1c4fe:	74 d0                	je     1c4d0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x850>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1c500:	48 89 3b             	mov    %rdi,(%rbx)
   1c503:	89 c8                	mov    %ecx,%eax
   b = z->fast[a->code_buffer & STBI__ZFAST_MASK];
   1c505:	89 d1                	mov    %edx,%ecx
   1c507:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
   1c50d:	0f b7 8c 4c 50 02 00 	movzwl 0x250(%rsp,%rcx,2),%ecx
   1c514:	00 
   1c515:	89 cf                	mov    %ecx,%edi
   if (b) {
   1c517:	85 c9                	test   %ecx,%ecx
   1c519:	0f 84 a1 fe ff ff    	je     1c3c0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x740>
      s = b >> 9;
   1c51f:	c1 f9 09             	sar    $0x9,%ecx
      return b & 511;
   1c522:	81 e7 ff 01 00 00    	and    $0x1ff,%edi
      a->code_buffer >>= s;
   1c528:	d3 ea                	shr    %cl,%edx
      a->num_bits -= s;
   1c52a:	29 c8                	sub    %ecx,%eax
      a->code_buffer >>= s;
   1c52c:	89 53 14             	mov    %edx,0x14(%rbx)
      a->num_bits -= s;
   1c52f:	89 43 10             	mov    %eax,0x10(%rbx)
      if (c < 0 || c >= 19) return stbi__err("bad codelengths", "Corrupt PNG");
   1c532:	83 ff 12             	cmp    $0x12,%edi
   1c535:	0f 8f 10 ff ff ff    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
      if (c < 16)
   1c53b:	83 ff 0f             	cmp    $0xf,%edi
   1c53e:	7f 30                	jg     1c570 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x8f0>
         lencodes[n++] = (stbi_uc) c;
   1c540:	48 63 c6             	movslq %esi,%rax
   1c543:	83 c6 01             	add    $0x1,%esi
   1c546:	40 88 bc 04 80 00 00 	mov    %dil,0x80(%rsp,%rax,1)
   1c54d:	00 
   while (n < ntot) {
   1c54e:	41 39 f0             	cmp    %esi,%r8d
   1c551:	0f 8e 8f 00 00 00    	jle    1c5e6 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x966>
   if (a->num_bits < 16) {
   1c557:	8b 43 10             	mov    0x10(%rbx),%eax
   1c55a:	83 f8 0f             	cmp    $0xf,%eax
   1c55d:	0f 8e 55 ff ff ff    	jle    1c4b8 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x838>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c563:	8b 53 14             	mov    0x14(%rbx),%edx
   1c566:	eb 9d                	jmp    1c505 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x885>
   1c568:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1c56f:	00 
   if (z->num_bits < n) stbi__fill_bits(z);
   1c570:	8b 4b 10             	mov    0x10(%rbx),%ecx
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c573:	8b 43 14             	mov    0x14(%rbx),%eax
         if (c == 16) {
   1c576:	83 ff 10             	cmp    $0x10,%edi
   1c579:	0f 84 e9 00 00 00    	je     1c668 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x9e8>
         } else if (c == 17) {
   1c57f:	83 ff 11             	cmp    $0x11,%edi
   1c582:	0f 84 18 01 00 00    	je     1c6a0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xa20>
   if (z->num_bits < n) stbi__fill_bits(z);
   1c588:	83 f9 06             	cmp    $0x6,%ecx
   1c58b:	0f 8e 1f 02 00 00    	jle    1c7b0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xb30>
   z->num_bits -= n;
   1c591:	83 e9 07             	sub    $0x7,%ecx
   z->code_buffer >>= n;
   1c594:	89 c2                	mov    %eax,%edx
   k = z->code_buffer & ((1 << n) - 1);
   1c596:	83 e0 7f             	and    $0x7f,%eax
   z->num_bits -= n;
   1c599:	89 4b 10             	mov    %ecx,0x10(%rbx)
   z->code_buffer >>= n;
   1c59c:	c1 ea 07             	shr    $0x7,%edx
   1c59f:	89 53 14             	mov    %edx,0x14(%rbx)
            c = stbi__zreceive(a,7)+11;
   1c5a2:	8d 50 0b             	lea    0xb(%rax),%edx
         stbi_uc fill = 0;
   1c5a5:	31 c0                	xor    %eax,%eax
         if (ntot - n < c) return stbi__err("bad codelengths", "Corrupt PNG");
   1c5a7:	44 89 c1             	mov    %r8d,%ecx
   1c5aa:	29 f1                	sub    %esi,%ecx
   1c5ac:	39 d1                	cmp    %edx,%ecx
   1c5ae:	0f 8c 97 fe ff ff    	jl     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
         memset(lencodes+n, fill, c);
   1c5b4:	48 63 ce             	movslq %esi,%rcx
   1c5b7:	49 0f af c1          	imul   %r9,%rax
   1c5bb:	4c 01 d1             	add    %r10,%rcx
   1c5be:	83 fa 08             	cmp    $0x8,%edx
   1c5c1:	73 7d                	jae    1c640 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x9c0>
   1c5c3:	f6 c2 04             	test   $0x4,%dl
   1c5c6:	0f 85 6c 03 00 00    	jne    1c938 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xcb8>
   1c5cc:	85 d2                	test   %edx,%edx
   1c5ce:	74 0b                	je     1c5db <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x95b>
   1c5d0:	88 01                	mov    %al,(%rcx)
   1c5d2:	f6 c2 02             	test   $0x2,%dl
   1c5d5:	0f 85 6c 03 00 00    	jne    1c947 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xcc7>
         n += c;
   1c5db:	01 d6                	add    %edx,%esi
   while (n < ntot) {
   1c5dd:	41 39 f0             	cmp    %esi,%r8d
   1c5e0:	0f 8f 71 ff ff ff    	jg     1c557 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x8d7>
   if (n != ntot) return stbi__err("bad codelengths","Corrupt PNG");
   1c5e6:	44 8b 74 24 10       	mov    0x10(%rsp),%r14d
   1c5eb:	44 8b 7c 24 14       	mov    0x14(%rsp),%r15d
   1c5f0:	0f 85 55 fe ff ff    	jne    1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
   if (!stbi__zbuild_huffman(&a->z_length, lencodes, hlit)) return 0;
   1c5f6:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
   1c5fd:	00 
   1c5fe:	48 8d 7b 34          	lea    0x34(%rbx),%rdi
   1c602:	44 89 f2             	mov    %r14d,%edx
   1c605:	e8 56 84 ff ff       	call   14a60 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi>
   1c60a:	85 c0                	test   %eax,%eax
   1c60c:	0f 84 96 fd ff ff    	je     1c3a8 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x728>
   if (!stbi__zbuild_huffman(&a->z_distance, lencodes+hlit, hdist)) return 0;
   1c612:	4c 01 f6             	add    %r14,%rsi
   1c615:	48 8d bb 18 08 00 00 	lea    0x818(%rbx),%rdi
   1c61c:	44 89 fa             	mov    %r15d,%edx
   1c61f:	e8 3c 84 ff ff       	call   14a60 <_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi>
   1c624:	85 c0                	test   %eax,%eax
   1c626:	0f 95 c0             	setne  %al
   1c629:	0f b6 c0             	movzbl %al,%eax
   1c62c:	e9 79 fd ff ff       	jmp    1c3aa <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x72a>
   1c631:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1c638:	89 c8                	mov    %ecx,%eax
   1c63a:	e9 c6 fe ff ff       	jmp    1c505 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x885>
   1c63f:	90                   	nop
         memset(lencodes+n, fill, c);
   1c640:	89 d7                	mov    %edx,%edi
   1c642:	48 89 01             	mov    %rax,(%rcx)
         n += c;
   1c645:	01 d6                	add    %edx,%esi
         memset(lencodes+n, fill, c);
   1c647:	48 89 44 39 f8       	mov    %rax,-0x8(%rcx,%rdi,1)
   1c64c:	48 8d 79 08          	lea    0x8(%rcx),%rdi
   1c650:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1c654:	48 29 f9             	sub    %rdi,%rcx
   1c657:	01 d1                	add    %edx,%ecx
   1c659:	c1 e9 03             	shr    $0x3,%ecx
   1c65c:	f3 48 ab             	rep stos %rax,%es:(%rdi)
         n += c;
   1c65f:	e9 79 ff ff ff       	jmp    1c5dd <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x95d>
   1c664:	0f 1f 40 00          	nopl   0x0(%rax)
   if (z->num_bits < n) stbi__fill_bits(z);
   1c668:	83 f9 01             	cmp    $0x1,%ecx
   1c66b:	0f 8e 0a 02 00 00    	jle    1c87b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xbfb>
   z->code_buffer >>= n;
   1c671:	89 c2                	mov    %eax,%edx
   z->num_bits -= n;
   1c673:	83 e9 02             	sub    $0x2,%ecx
   k = z->code_buffer & ((1 << n) - 1);
   1c676:	83 e0 03             	and    $0x3,%eax
   z->code_buffer >>= n;
   1c679:	c1 ea 02             	shr    $0x2,%edx
   z->num_bits -= n;
   1c67c:	89 4b 10             	mov    %ecx,0x10(%rbx)
   z->code_buffer >>= n;
   1c67f:	89 53 14             	mov    %edx,0x14(%rbx)
            c = stbi__zreceive(a,2)+3;
   1c682:	8d 50 03             	lea    0x3(%rax),%edx
            if (n == 0) return stbi__err("bad codelengths", "Corrupt PNG");
   1c685:	85 f6                	test   %esi,%esi
   1c687:	0f 84 be fd ff ff    	je     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
            fill = lencodes[n-1];
   1c68d:	8d 46 ff             	lea    -0x1(%rsi),%eax
   1c690:	48 98                	cltq
   1c692:	0f b6 84 04 80 00 00 	movzbl 0x80(%rsp,%rax,1),%eax
   1c699:	00 
   1c69a:	e9 08 ff ff ff       	jmp    1c5a7 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x927>
   1c69f:	90                   	nop
   if (z->num_bits < n) stbi__fill_bits(z);
   1c6a0:	83 f9 02             	cmp    $0x2,%ecx
   1c6a3:	0f 8e 4c 02 00 00    	jle    1c8f5 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc75>
   z->code_buffer >>= n;
   1c6a9:	89 c2                	mov    %eax,%edx
   z->num_bits -= n;
   1c6ab:	83 e9 03             	sub    $0x3,%ecx
   k = z->code_buffer & ((1 << n) - 1);
   1c6ae:	83 e0 07             	and    $0x7,%eax
   z->code_buffer >>= n;
   1c6b1:	c1 ea 03             	shr    $0x3,%edx
   z->num_bits -= n;
   1c6b4:	89 4b 10             	mov    %ecx,0x10(%rbx)
   z->code_buffer >>= n;
   1c6b7:	89 53 14             	mov    %edx,0x14(%rbx)
            c = stbi__zreceive(a,3)+3;
   1c6ba:	8d 50 03             	lea    0x3(%rax),%edx
         stbi_uc fill = 0;
   1c6bd:	31 c0                	xor    %eax,%eax
   1c6bf:	e9 e3 fe ff ff       	jmp    1c5a7 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x927>
   1c6c4:	0f 1f 40 00          	nopl   0x0(%rax)
   return (z->zbuffer >= z->zbuffer_end);
   1c6c8:	48 8b 53 08          	mov    0x8(%rbx),%rdx
   1c6cc:	eb 2c                	jmp    1c6fa <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xa7a>
   1c6ce:	66 90                	xchg   %ax,%ax
   1c6d0:	48 8b 03             	mov    (%rbx),%rax
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1c6d3:	48 39 d0             	cmp    %rdx,%rax
   1c6d6:	73 0f                	jae    1c6e7 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xa67>
   1c6d8:	48 8d 78 01          	lea    0x1(%rax),%rdi
   1c6dc:	48 89 3b             	mov    %rdi,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c6df:	0f b6 00             	movzbl (%rax),%eax
   1c6e2:	d3 e0                	shl    %cl,%eax
   1c6e4:	41 09 c3             	or     %eax,%r11d
      z->num_bits += 8;
   1c6e7:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c6ea:	44 89 5b 14          	mov    %r11d,0x14(%rbx)
      z->num_bits += 8;
   1c6ee:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1c6f1:	83 f9 18             	cmp    $0x18,%ecx
   1c6f4:	0f 8f dc f5 ff ff    	jg     1bcd6 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x56>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c6fa:	44 89 d8             	mov    %r11d,%eax
   1c6fd:	d3 e8                	shr    %cl,%eax
   1c6ff:	85 c0                	test   %eax,%eax
   1c701:	74 cd                	je     1c6d0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xa50>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1c703:	48 89 13             	mov    %rdx,(%rbx)
        return;
   1c706:	e9 cb f5 ff ff       	jmp    1bcd6 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x56>
   1c70b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   return (z->zbuffer >= z->zbuffer_end);
   1c710:	48 8b 53 08          	mov    0x8(%rbx),%rdx
   1c714:	eb 32                	jmp    1c748 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xac8>
   1c716:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c71d:	00 00 00 
   1c720:	48 8b 03             	mov    (%rbx),%rax
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1c723:	48 39 d0             	cmp    %rdx,%rax
   1c726:	73 0e                	jae    1c736 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xab6>
   1c728:	48 8d 78 01          	lea    0x1(%rax),%rdi
   1c72c:	48 89 3b             	mov    %rdi,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c72f:	0f b6 00             	movzbl (%rax),%eax
   1c732:	d3 e0                	shl    %cl,%eax
   1c734:	09 c6                	or     %eax,%esi
      z->num_bits += 8;
   1c736:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c739:	89 73 14             	mov    %esi,0x14(%rbx)
      z->num_bits += 8;
   1c73c:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1c73f:	83 f9 18             	cmp    $0x18,%ecx
   1c742:	0f 8f 74 f5 ff ff    	jg     1bcbc <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x3c>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c748:	89 f0                	mov    %esi,%eax
   1c74a:	d3 e8                	shr    %cl,%eax
   1c74c:	85 c0                	test   %eax,%eax
   1c74e:	74 d0                	je     1c720 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xaa0>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1c750:	48 89 13             	mov    %rdx,(%rbx)
        return;
   1c753:	e9 64 f5 ff ff       	jmp    1bcbc <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x3c>
   1c758:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1c75f:	00 
   return (z->zbuffer >= z->zbuffer_end);
   1c760:	48 8b 57 08          	mov    0x8(%rdi),%rdx
   1c764:	eb 34                	jmp    1c79a <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xb1a>
   1c766:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c76d:	00 00 00 
   1c770:	48 8b 03             	mov    (%rbx),%rax
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1c773:	48 39 d0             	cmp    %rdx,%rax
   1c776:	73 0f                	jae    1c787 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xb07>
   1c778:	48 8d 70 01          	lea    0x1(%rax),%rsi
   1c77c:	48 89 33             	mov    %rsi,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c77f:	0f b6 00             	movzbl (%rax),%eax
   1c782:	d3 e0                	shl    %cl,%eax
   1c784:	41 09 c0             	or     %eax,%r8d
      z->num_bits += 8;
   1c787:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c78a:	44 89 43 14          	mov    %r8d,0x14(%rbx)
      z->num_bits += 8;
   1c78e:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1c791:	83 f9 18             	cmp    $0x18,%ecx
   1c794:	0f 8f 0a f5 ff ff    	jg     1bca4 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x24>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c79a:	44 89 c0             	mov    %r8d,%eax
   1c79d:	d3 e8                	shr    %cl,%eax
   1c79f:	85 c0                	test   %eax,%eax
   1c7a1:	74 cd                	je     1c770 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xaf0>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1c7a3:	48 89 13             	mov    %rdx,(%rbx)
        return;
   1c7a6:	e9 f9 f4 ff ff       	jmp    1bca4 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x24>
   1c7ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   return (z->zbuffer >= z->zbuffer_end);
   1c7b0:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
   1c7b4:	eb 32                	jmp    1c7e8 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xb68>
   1c7b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c7bd:	00 00 00 
   1c7c0:	48 8b 13             	mov    (%rbx),%rdx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1c7c3:	48 39 fa             	cmp    %rdi,%rdx
   1c7c6:	73 0e                	jae    1c7d6 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xb56>
   1c7c8:	4c 8d 72 01          	lea    0x1(%rdx),%r14
   1c7cc:	4c 89 33             	mov    %r14,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c7cf:	0f b6 12             	movzbl (%rdx),%edx
   1c7d2:	d3 e2                	shl    %cl,%edx
   1c7d4:	09 d0                	or     %edx,%eax
      z->num_bits += 8;
   1c7d6:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c7d9:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1c7dc:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1c7df:	83 f9 18             	cmp    $0x18,%ecx
   1c7e2:	0f 8f a9 fd ff ff    	jg     1c591 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x911>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c7e8:	89 c2                	mov    %eax,%edx
   1c7ea:	d3 ea                	shr    %cl,%edx
   1c7ec:	85 d2                	test   %edx,%edx
   1c7ee:	74 d0                	je     1c7c0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xb40>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1c7f0:	48 89 3b             	mov    %rdi,(%rbx)
        return;
   1c7f3:	e9 99 fd ff ff       	jmp    1c591 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x911>
   1c7f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1c7ff:	00 
      if (k < z->maxcode[s])
   1c800:	b9 06 00 00 00       	mov    $0x6,%ecx
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1c805:	bf 0a 00 00 00       	mov    $0xa,%edi
   1c80a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   b = (k >> (16-s)) - z->firstcode[s] + z->firstsymbol[s];
   1c810:	41 d3 fe             	sar    %cl,%r14d
   1c813:	44 89 f1             	mov    %r14d,%ecx
   1c816:	4c 63 f7             	movslq %edi,%r14
   1c819:	46 0f b7 bc 74 50 06 	movzwl 0x650(%rsp,%r14,2),%r15d
   1c820:	00 00 
   1c822:	46 0f b7 b4 74 b4 06 	movzwl 0x6b4(%rsp,%r14,2),%r14d
   1c829:	00 00 
   1c82b:	44 29 f9             	sub    %r15d,%ecx
   1c82e:	44 01 f1             	add    %r14d,%ecx
   if (b >= STBI__ZNSYMS) return -1; // some data was corrupt somewhere!
   1c831:	81 f9 1f 01 00 00    	cmp    $0x11f,%ecx
   1c837:	0f 8f 0e fc ff ff    	jg     1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
   if (z->size[b] != s) return -1;  // was originally an assert, but report failure instead.
   1c83d:	4c 63 f1             	movslq %ecx,%r14
   1c840:	42 0f b6 8c 34 d4 06 	movzbl 0x6d4(%rsp,%r14,1),%ecx
   1c847:	00 00 
   1c849:	39 cf                	cmp    %ecx,%edi
   1c84b:	0f 85 fa fb ff ff    	jne    1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
   a->code_buffer >>= s;
   1c851:	89 f9                	mov    %edi,%ecx
   a->num_bits -= s;
   1c853:	29 f8                	sub    %edi,%eax
   return z->value[b];
   1c855:	42 0f b7 bc 74 f4 07 	movzwl 0x7f4(%rsp,%r14,2),%edi
   1c85c:	00 00 
   a->code_buffer >>= s;
   1c85e:	d3 ea                	shr    %cl,%edx
   a->num_bits -= s;
   1c860:	89 43 10             	mov    %eax,0x10(%rbx)
   a->code_buffer >>= s;
   1c863:	89 53 14             	mov    %edx,0x14(%rbx)
   return z->value[b];
   1c866:	e9 c7 fc ff ff       	jmp    1c532 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x8b2>
   1c86b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1c870:	bf 0b 00 00 00       	mov    $0xb,%edi
   b = (k >> (16-s)) - z->firstcode[s] + z->firstsymbol[s];
   1c875:	89 e9                	mov    %ebp,%ecx
   1c877:	29 f9                	sub    %edi,%ecx
   1c879:	eb 95                	jmp    1c810 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xb90>
   return (z->zbuffer >= z->zbuffer_end);
   1c87b:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
   1c87f:	eb 2f                	jmp    1c8b0 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc30>
   1c881:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1c888:	48 8b 13             	mov    (%rbx),%rdx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1c88b:	48 39 fa             	cmp    %rdi,%rdx
   1c88e:	73 0e                	jae    1c89e <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc1e>
   1c890:	4c 8d 72 01          	lea    0x1(%rdx),%r14
   1c894:	4c 89 33             	mov    %r14,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c897:	0f b6 12             	movzbl (%rdx),%edx
   1c89a:	d3 e2                	shl    %cl,%edx
   1c89c:	09 d0                	or     %edx,%eax
      z->num_bits += 8;
   1c89e:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c8a1:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1c8a4:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1c8a7:	83 f9 18             	cmp    $0x18,%ecx
   1c8aa:	0f 8f c1 fd ff ff    	jg     1c671 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x9f1>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c8b0:	89 c2                	mov    %eax,%edx
   1c8b2:	d3 ea                	shr    %cl,%edx
   1c8b4:	85 d2                	test   %edx,%edx
   1c8b6:	74 d0                	je     1c888 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc08>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1c8b8:	48 89 3b             	mov    %rdi,(%rbx)
        return;
   1c8bb:	e9 b1 fd ff ff       	jmp    1c671 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x9f1>
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1c8c0:	bf 0c 00 00 00       	mov    $0xc,%edi
   1c8c5:	eb ae                	jmp    1c875 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xbf5>
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1c8c7:	3d 00 80 00 00       	cmp    $0x8000,%eax
   1c8cc:	0f 8e a4 f9 ff ff    	jle    1c276 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x5f6>
   1c8d2:	e9 74 fb ff ff       	jmp    1c44b <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x7cb>
   1c8d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1c8de:	00 00 
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1c8e0:	bf 0f 00 00 00       	mov    $0xf,%edi
   1c8e5:	eb 8e                	jmp    1c875 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xbf5>
   1c8e7:	bf 0d 00 00 00       	mov    $0xd,%edi
   1c8ec:	eb 87                	jmp    1c875 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xbf5>
   1c8ee:	bf 0e 00 00 00       	mov    $0xe,%edi
   1c8f3:	eb 80                	jmp    1c875 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xbf5>
   return (z->zbuffer >= z->zbuffer_end);
   1c8f5:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
   1c8f9:	eb 2d                	jmp    1c928 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xca8>
   1c8fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1c900:	48 8b 13             	mov    (%rbx),%rdx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1c903:	48 39 fa             	cmp    %rdi,%rdx
   1c906:	73 0e                	jae    1c916 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc96>
   1c908:	4c 8d 72 01          	lea    0x1(%rdx),%r14
   1c90c:	4c 89 33             	mov    %r14,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c90f:	0f b6 12             	movzbl (%rdx),%edx
   1c912:	d3 e2                	shl    %cl,%edx
   1c914:	09 d0                	or     %edx,%eax
      z->num_bits += 8;
   1c916:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1c919:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1c91c:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1c91f:	83 f9 18             	cmp    $0x18,%ecx
   1c922:	0f 8f 81 fd ff ff    	jg     1c6a9 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xa29>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1c928:	89 c2                	mov    %eax,%edx
   1c92a:	d3 ea                	shr    %cl,%edx
   1c92c:	85 d2                	test   %edx,%edx
   1c92e:	74 d0                	je     1c900 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xc80>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1c930:	48 89 3b             	mov    %rdi,(%rbx)
        return;
   1c933:	e9 71 fd ff ff       	jmp    1c6a9 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0xa29>
         memset(lencodes+n, fill, c);
   1c938:	89 d7                	mov    %edx,%edi
   1c93a:	89 01                	mov    %eax,(%rcx)
         n += c;
   1c93c:	01 d6                	add    %edx,%esi
         memset(lencodes+n, fill, c);
   1c93e:	89 44 39 fc          	mov    %eax,-0x4(%rcx,%rdi,1)
         n += c;
   1c942:	e9 96 fc ff ff       	jmp    1c5dd <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x95d>
         memset(lencodes+n, fill, c);
   1c947:	89 d7                	mov    %edx,%edi
         n += c;
   1c949:	01 d6                	add    %edx,%esi
         memset(lencodes+n, fill, c);
   1c94b:	66 89 44 39 fe       	mov    %ax,-0x2(%rcx,%rdi,1)
         n += c;
   1c950:	e9 88 fc ff ff       	jmp    1c5dd <_ZL27stbi__compute_huffman_codesP10stbi__zbuf+0x95d>
   1c955:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   1c95c:	00 00 00 00 

000000000001c960 <_ZL16stbi__parse_zlibP10stbi__zbufi>:
{
   1c960:	41 57                	push   %r15
   1c962:	41 56                	push   %r14
   1c964:	41 55                	push   %r13
   1c966:	41 54                	push   %r12
   1c968:	55                   	push   %rbp
   1c969:	53                   	push   %rbx
   1c96a:	48 89 fb             	mov    %rdi,%rbx
   1c96d:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
   if (parse_header)
   1c974:	85 f6                	test   %esi,%esi
   1c976:	0f 85 7a 18 00 00    	jne    1e1f6 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1896>
   a->num_bits = 0;
   1c97c:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
   1c983:	00 
   1c984:	31 c0                	xor    %eax,%eax
   1c986:	31 c9                	xor    %ecx,%ecx
         len = stbi__zlength_base[z];
   1c988:	48 8d 2d b1 bc 01 00 	lea    0x1bcb1(%rip),%rbp        # 38640 <_ZL18stbi__zlength_base>
         if (stbi__zlength_extra[z]) len += stbi__zreceive(a, stbi__zlength_extra[z]);
   1c98f:	4c 8d 1d 2a bc 01 00 	lea    0x1bc2a(%rip),%r11        # 385c0 <_ZL19stbi__zlength_extra>
   1c996:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c99d:	00 00 00 
   if (z->num_bits < n) stbi__fill_bits(z);
   1c9a0:	85 c9                	test   %ecx,%ecx
   1c9a2:	0f 8e c0 09 00 00    	jle    1d368 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xa08>
   k = z->code_buffer & ((1 << n) - 1);
   1c9a8:	41 89 c4             	mov    %eax,%r12d
   z->num_bits -= n;
   1c9ab:	83 e9 01             	sub    $0x1,%ecx
   z->code_buffer >>= n;
   1c9ae:	d1 e8                	shr    %eax
   1c9b0:	89 43 14             	mov    %eax,0x14(%rbx)
   k = z->code_buffer & ((1 << n) - 1);
   1c9b3:	41 83 e4 01          	and    $0x1,%r12d
   z->num_bits -= n;
   1c9b7:	89 4b 10             	mov    %ecx,0x10(%rbx)
   if (z->num_bits < n) stbi__fill_bits(z);
   1c9ba:	83 f9 01             	cmp    $0x1,%ecx
   1c9bd:	0f 8e 63 09 00 00    	jle    1d326 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x9c6>
   z->code_buffer >>= n;
   1c9c3:	89 c6                	mov    %eax,%esi
   z->num_bits -= n;
   1c9c5:	8d 51 fe             	lea    -0x2(%rcx),%edx
   z->code_buffer >>= n;
   1c9c8:	c1 ee 02             	shr    $0x2,%esi
   z->num_bits -= n;
   1c9cb:	89 53 10             	mov    %edx,0x10(%rbx)
   z->code_buffer >>= n;
   1c9ce:	89 73 14             	mov    %esi,0x14(%rbx)
      if (type == 0) {
   1c9d1:	83 e0 03             	and    $0x3,%eax
   1c9d4:	0f 84 57 08 00 00    	je     1d231 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x8d1>
      } else if (type == 3) {
   1c9da:	83 f8 03             	cmp    $0x3,%eax
   1c9dd:	0f 84 43 03 00 00    	je     1cd26 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3c6>
         if (type == 1) {
   1c9e3:	83 f8 01             	cmp    $0x1,%eax
   1c9e6:	0f 84 d2 09 00 00    	je     1d3be <_ZL16stbi__parse_zlibP10stbi__zbufi+0xa5e>
            if (!stbi__compute_huffman_codes(a)) return 0;
   1c9ec:	48 89 df             	mov    %rbx,%rdi
   1c9ef:	e8 8c f2 ff ff       	call   1bc80 <_ZL27stbi__compute_huffman_codesP10stbi__zbuf>
   1c9f4:	85 c0                	test   %eax,%eax
   1c9f6:	0f 84 2a 03 00 00    	je     1cd26 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3c6>
   if (a->num_bits < 16) {
   1c9fc:	8b 53 10             	mov    0x10(%rbx),%edx
   1c9ff:	4c 8d 1d ba bb 01 00 	lea    0x1bbba(%rip),%r11        # 385c0 <_ZL19stbi__zlength_extra>
   char *zout = a->zout;
   1ca06:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
         if (stbi__zdist_extra[z]) dist += stbi__zreceive(a, stbi__zdist_extra[z]);
   1ca0a:	4c 8d 2d af ba 01 00 	lea    0x1baaf(%rip),%r13        # 384c0 <_ZL17stbi__zdist_extra>
   if (a->num_bits < 16) {
   1ca11:	83 fa 0f             	cmp    $0xf,%edx
   1ca14:	0f 8f aa 00 00 00    	jg     1cac4 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x164>
   1ca1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   return (z->zbuffer >= z->zbuffer_end);
   1ca20:	4c 8b 43 08          	mov    0x8(%rbx),%r8
      if (stbi__zeof(a)) {
   1ca24:	4c 39 03             	cmp    %r8,(%rbx)
   1ca27:	0f 83 e9 02 00 00    	jae    1cd16 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3b6>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1ca2d:	8b 43 14             	mov    0x14(%rbx),%eax
   1ca30:	eb 2c                	jmp    1ca5e <_ZL16stbi__parse_zlibP10stbi__zbufi+0xfe>
   1ca32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   return (z->zbuffer >= z->zbuffer_end);
   1ca38:	48 8b 0b             	mov    (%rbx),%rcx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1ca3b:	4c 39 c1             	cmp    %r8,%rcx
   1ca3e:	73 10                	jae    1ca50 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xf0>
   1ca40:	48 8d 71 01          	lea    0x1(%rcx),%rsi
   1ca44:	48 89 33             	mov    %rsi,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1ca47:	0f b6 31             	movzbl (%rcx),%esi
   1ca4a:	89 d1                	mov    %edx,%ecx
   1ca4c:	d3 e6                	shl    %cl,%esi
   1ca4e:	09 f0                	or     %esi,%eax
      z->num_bits += 8;
   1ca50:	83 c2 08             	add    $0x8,%edx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1ca53:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1ca56:	89 53 10             	mov    %edx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1ca59:	83 fa 18             	cmp    $0x18,%edx
   1ca5c:	7f 0d                	jg     1ca6b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x10b>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1ca5e:	89 c6                	mov    %eax,%esi
   1ca60:	89 d1                	mov    %edx,%ecx
   1ca62:	d3 ee                	shr    %cl,%esi
   1ca64:	85 f6                	test   %esi,%esi
   1ca66:	74 d0                	je     1ca38 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xd8>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1ca68:	4c 89 03             	mov    %r8,(%rbx)
   b = z->fast[a->code_buffer & STBI__ZFAST_MASK];
   1ca6b:	89 c1                	mov    %eax,%ecx
   1ca6d:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
   1ca73:	0f b7 4c 4b 34       	movzwl 0x34(%rbx,%rcx,2),%ecx
   1ca78:	89 ce                	mov    %ecx,%esi
   if (b) {
   1ca7a:	85 c9                	test   %ecx,%ecx
   1ca7c:	0f 84 fe 01 00 00    	je     1cc80 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x320>
      s = b >> 9;
   1ca82:	c1 f9 09             	sar    $0x9,%ecx
      return b & 511;
   1ca85:	41 89 f6             	mov    %esi,%r14d
      a->code_buffer >>= s;
   1ca88:	d3 e8                	shr    %cl,%eax
      a->num_bits -= s;
   1ca8a:	29 ca                	sub    %ecx,%edx
      return b & 511;
   1ca8c:	41 81 e6 ff 01 00 00 	and    $0x1ff,%r14d
      a->code_buffer >>= s;
   1ca93:	89 43 14             	mov    %eax,0x14(%rbx)
      a->num_bits -= s;
   1ca96:	89 53 10             	mov    %edx,0x10(%rbx)
      if (z < 256) {
   1ca99:	66 f7 c6 00 01       	test   $0x100,%si
   1ca9e:	0f 85 9b 00 00 00    	jne    1cb3f <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1df>
         if (zout >= a->zout_end) {
   1caa4:	48 8b 43 28          	mov    0x28(%rbx),%rax
   1caa8:	48 39 c7             	cmp    %rax,%rdi
   1caab:	0f 83 c7 03 00 00    	jae    1ce78 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x518>
         *zout++ = (char) z;
   1cab1:	44 88 37             	mov    %r14b,(%rdi)
   1cab4:	48 83 c7 01          	add    $0x1,%rdi
   if (a->num_bits < 16) {
   1cab8:	8b 53 10             	mov    0x10(%rbx),%edx
   1cabb:	83 fa 0f             	cmp    $0xf,%edx
   1cabe:	0f 8e 5c ff ff ff    	jle    1ca20 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xc0>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1cac4:	8b 43 14             	mov    0x14(%rbx),%eax
   1cac7:	eb a2                	jmp    1ca6b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x10b>
   1cac9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      if (k < z->maxcode[s])
   1cad0:	b9 06 00 00 00       	mov    $0x6,%ecx
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1cad5:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
   1cadb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   b = (k >> (16-s)) - z->firstcode[s] + z->firstsymbol[s];
   1cae0:	d3 fe                	sar    %cl,%esi
   1cae2:	49 63 c8             	movslq %r8d,%rcx
   1cae5:	44 0f b7 8c 4b 34 04 	movzwl 0x434(%rbx,%rcx,2),%r9d
   1caec:	00 00 
   1caee:	0f b7 8c 4b 98 04 00 	movzwl 0x498(%rbx,%rcx,2),%ecx
   1caf5:	00 
   1caf6:	44 29 ce             	sub    %r9d,%esi
   1caf9:	01 ce                	add    %ecx,%esi
   if (b >= STBI__ZNSYMS) return -1; // some data was corrupt somewhere!
   1cafb:	81 fe 1f 01 00 00    	cmp    $0x11f,%esi
   1cb01:	0f 8f 0f 02 00 00    	jg     1cd16 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3b6>
   if (z->size[b] != s) return -1;  // was originally an assert, but report failure instead.
   1cb07:	48 63 f6             	movslq %esi,%rsi
   1cb0a:	0f b6 8c 33 b8 04 00 	movzbl 0x4b8(%rbx,%rsi,1),%ecx
   1cb11:	00 
   1cb12:	41 39 c8             	cmp    %ecx,%r8d
   1cb15:	0f 85 fb 01 00 00    	jne    1cd16 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3b6>
   return z->value[b];
   1cb1b:	44 0f b7 b4 73 d8 05 	movzwl 0x5d8(%rbx,%rsi,2),%r14d
   1cb22:	00 00 
   a->code_buffer >>= s;
   1cb24:	44 89 c1             	mov    %r8d,%ecx
   a->num_bits -= s;
   1cb27:	44 29 c2             	sub    %r8d,%edx
   a->code_buffer >>= s;
   1cb2a:	d3 e8                	shr    %cl,%eax
   a->num_bits -= s;
   1cb2c:	89 53 10             	mov    %edx,0x10(%rbx)
   a->code_buffer >>= s;
   1cb2f:	89 43 14             	mov    %eax,0x14(%rbx)
      if (z < 256) {
   1cb32:	41 81 fe ff 00 00 00 	cmp    $0xff,%r14d
   1cb39:	0f 8e 65 ff ff ff    	jle    1caa4 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x144>
         if (z == 256) {
   1cb3f:	41 81 fe 00 01 00 00 	cmp    $0x100,%r14d
   1cb46:	0f 84 23 14 00 00    	je     1df6f <_ZL16stbi__parse_zlibP10stbi__zbufi+0x160f>
         z -= 257;
   1cb4c:	41 81 ee 01 01 00 00 	sub    $0x101,%r14d
         len = stbi__zlength_base[z];
   1cb53:	4d 63 f6             	movslq %r14d,%r14
         if (stbi__zlength_extra[z]) len += stbi__zreceive(a, stbi__zlength_extra[z]);
   1cb56:	43 8b 34 b3          	mov    (%r11,%r14,4),%esi
         len = stbi__zlength_base[z];
   1cb5a:	46 8b 7c b5 00       	mov    0x0(%rbp,%r14,4),%r15d
         if (stbi__zlength_extra[z]) len += stbi__zreceive(a, stbi__zlength_extra[z]);
   1cb5f:	85 f6                	test   %esi,%esi
   1cb61:	0f 85 d9 02 00 00    	jne    1ce40 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x4e0>
   if (a->num_bits < 16) {
   1cb67:	83 fa 0f             	cmp    $0xf,%edx
   1cb6a:	0f 8f c0 01 00 00    	jg     1cd30 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3d0>
   return (z->zbuffer >= z->zbuffer_end);
   1cb70:	4c 8b 43 08          	mov    0x8(%rbx),%r8
      if (stbi__zeof(a)) {
   1cb74:	4c 39 03             	cmp    %r8,(%rbx)
   1cb77:	0f 83 99 01 00 00    	jae    1cd16 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3b6>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1cb7d:	8b 43 14             	mov    0x14(%rbx),%eax
   1cb80:	eb 2c                	jmp    1cbae <_ZL16stbi__parse_zlibP10stbi__zbufi+0x24e>
   1cb82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   return (z->zbuffer >= z->zbuffer_end);
   1cb88:	48 8b 0b             	mov    (%rbx),%rcx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1cb8b:	4c 39 c1             	cmp    %r8,%rcx
   1cb8e:	73 10                	jae    1cba0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x240>
   1cb90:	48 8d 71 01          	lea    0x1(%rcx),%rsi
   1cb94:	48 89 33             	mov    %rsi,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1cb97:	0f b6 31             	movzbl (%rcx),%esi
   1cb9a:	89 d1                	mov    %edx,%ecx
   1cb9c:	d3 e6                	shl    %cl,%esi
   1cb9e:	09 f0                	or     %esi,%eax
      z->num_bits += 8;
   1cba0:	83 c2 08             	add    $0x8,%edx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1cba3:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1cba6:	89 53 10             	mov    %edx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1cba9:	83 fa 18             	cmp    $0x18,%edx
   1cbac:	7f 0d                	jg     1cbbb <_ZL16stbi__parse_zlibP10stbi__zbufi+0x25b>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1cbae:	89 c6                	mov    %eax,%esi
   1cbb0:	89 d1                	mov    %edx,%ecx
   1cbb2:	d3 ee                	shr    %cl,%esi
   1cbb4:	85 f6                	test   %esi,%esi
   1cbb6:	74 d0                	je     1cb88 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x228>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1cbb8:	4c 89 03             	mov    %r8,(%rbx)
   b = z->fast[a->code_buffer & STBI__ZFAST_MASK];
   1cbbb:	89 c1                	mov    %eax,%ecx
   1cbbd:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
   1cbc3:	0f b7 8c 4b 18 08 00 	movzwl 0x818(%rbx,%rcx,2),%ecx
   1cbca:	00 
   1cbcb:	89 ce                	mov    %ecx,%esi
   if (b) {
   1cbcd:	85 c9                	test   %ecx,%ecx
   1cbcf:	0f 84 6b 01 00 00    	je     1cd40 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3e0>
      s = b >> 9;
   1cbd5:	c1 f9 09             	sar    $0x9,%ecx
      return b & 511;
   1cbd8:	81 e6 ff 01 00 00    	and    $0x1ff,%esi
      a->code_buffer >>= s;
   1cbde:	d3 e8                	shr    %cl,%eax
      a->num_bits -= s;
   1cbe0:	29 ca                	sub    %ecx,%edx
      a->code_buffer >>= s;
   1cbe2:	89 43 14             	mov    %eax,0x14(%rbx)
      a->num_bits -= s;
   1cbe5:	89 53 10             	mov    %edx,0x10(%rbx)
         dist = stbi__zdist_base[z];
   1cbe8:	48 63 ce             	movslq %esi,%rcx
   1cbeb:	48 8d 35 4e b9 01 00 	lea    0x1b94e(%rip),%rsi        # 38540 <_ZL16stbi__zdist_base>
   1cbf2:	44 8b 34 8e          	mov    (%rsi,%rcx,4),%r14d
         if (stbi__zdist_extra[z]) dist += stbi__zreceive(a, stbi__zdist_extra[z]);
   1cbf6:	41 8b 74 8d 00       	mov    0x0(%r13,%rcx,4),%esi
   1cbfb:	85 f6                	test   %esi,%esi
   1cbfd:	0f 85 4d 03 00 00    	jne    1cf50 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x5f0>
         if (zout - a->zout_start < dist) return stbi__err("bad dist","Corrupt PNG");
   1cc03:	4c 8b 43 20          	mov    0x20(%rbx),%r8
   1cc07:	48 89 f9             	mov    %rdi,%rcx
   1cc0a:	49 63 d6             	movslq %r14d,%rdx
   1cc0d:	4c 29 c1             	sub    %r8,%rcx
   1cc10:	48 39 d1             	cmp    %rdx,%rcx
   1cc13:	0f 8c 6e 13 00 00    	jl     1df87 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1627>
         if (zout + len > a->zout_end) {
   1cc19:	49 63 c7             	movslq %r15d,%rax
   1cc1c:	48 8b 73 28          	mov    0x28(%rbx),%rsi
   1cc20:	48 01 f8             	add    %rdi,%rax
   1cc23:	48 39 c6             	cmp    %rax,%rsi
   1cc26:	0f 82 54 03 00 00    	jb     1cf80 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x620>
         p = (stbi_uc *) (zout - dist);
   1cc2c:	48 89 f9             	mov    %rdi,%rcx
   1cc2f:	48 29 d1             	sub    %rdx,%rcx
         if (dist == 1) { // run of one byte; common in images.
   1cc32:	41 83 fe 01          	cmp    $0x1,%r14d
   1cc36:	0f 84 c4 02 00 00    	je     1cf00 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x5a0>
            if (len) { do *zout++ = *p++; while (--len); }
   1cc3c:	45 85 ff             	test   %r15d,%r15d
   1cc3f:	0f 84 73 fe ff ff    	je     1cab8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x158>
   1cc45:	41 8d 47 ff          	lea    -0x1(%r15),%eax
   1cc49:	83 f8 06             	cmp    $0x6,%eax
   1cc4c:	76 0e                	jbe    1cc5c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x2fc>
   1cc4e:	48 8d 72 ff          	lea    -0x1(%rdx),%rsi
   1cc52:	48 83 fe 0e          	cmp    $0xe,%rsi
   1cc56:	0f 87 9d 04 00 00    	ja     1d0f9 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x799>
   1cc5c:	44 89 fe             	mov    %r15d,%esi
   1cc5f:	31 c0                	xor    %eax,%eax
   1cc61:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1cc68:	0f b6 14 01          	movzbl (%rcx,%rax,1),%edx
   1cc6c:	88 14 07             	mov    %dl,(%rdi,%rax,1)
   1cc6f:	48 83 c0 01          	add    $0x1,%rax
   1cc73:	48 39 c6             	cmp    %rax,%rsi
   1cc76:	75 f0                	jne    1cc68 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x308>
   1cc78:	48 01 f7             	add    %rsi,%rdi
   1cc7b:	e9 38 fe ff ff       	jmp    1cab8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x158>
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1cc80:	89 c1                	mov    %eax,%ecx
   1cc82:	8d 34 00             	lea    (%rax,%rax,1),%esi
   1cc85:	d1 f9                	sar    %ecx
   1cc87:	81 e6 aa aa 00 00    	and    $0xaaaa,%esi
   1cc8d:	81 e1 55 55 00 00    	and    $0x5555,%ecx
   1cc93:	09 f1                	or     %esi,%ecx
  n = ((n & 0xCCCC) >>  2) | ((n & 0x3333) << 2);
   1cc95:	89 ce                	mov    %ecx,%esi
   1cc97:	c1 e1 02             	shl    $0x2,%ecx
   1cc9a:	c1 fe 02             	sar    $0x2,%esi
   1cc9d:	81 e1 cc cc 00 00    	and    $0xcccc,%ecx
   1cca3:	81 e6 33 33 00 00    	and    $0x3333,%esi
   1cca9:	09 ce                	or     %ecx,%esi
  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);
   1ccab:	89 f1                	mov    %esi,%ecx
   1ccad:	c1 e6 04             	shl    $0x4,%esi
   1ccb0:	c1 f9 04             	sar    $0x4,%ecx
   1ccb3:	81 e6 f0 f0 00 00    	and    $0xf0f0,%esi
   1ccb9:	81 e1 0f 0f 00 00    	and    $0xf0f,%ecx
   1ccbf:	09 f1                	or     %esi,%ecx
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1ccc1:	89 ce                	mov    %ecx,%esi
   1ccc3:	c1 e1 08             	shl    $0x8,%ecx
   1ccc6:	c1 fe 08             	sar    $0x8,%esi
   1ccc9:	0f b7 c9             	movzwl %cx,%ecx
   1cccc:	09 ce                	or     %ecx,%esi
      if (k < z->maxcode[s])
   1ccce:	3b b3 7c 04 00 00    	cmp    0x47c(%rbx),%esi
   1ccd4:	0f 8c f6 fd ff ff    	jl     1cad0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x170>
   1ccda:	3b b3 80 04 00 00    	cmp    0x480(%rbx),%esi
   1cce0:	0f 8c 3a 03 00 00    	jl     1d020 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6c0>
   1cce6:	3b b3 84 04 00 00    	cmp    0x484(%rbx),%esi
   1ccec:	0f 8c e6 03 00 00    	jl     1d0d8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x778>
   1ccf2:	3b b3 88 04 00 00    	cmp    0x488(%rbx),%esi
   1ccf8:	0f 8c e5 03 00 00    	jl     1d0e3 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x783>
   1ccfe:	3b b3 8c 04 00 00    	cmp    0x48c(%rbx),%esi
   1cd04:	0f 8c e4 03 00 00    	jl     1d0ee <_ZL16stbi__parse_zlibP10stbi__zbufi+0x78e>
   1cd0a:	3b b3 90 04 00 00    	cmp    0x490(%rbx),%esi
   1cd10:	0f 8c fa 04 00 00    	jl     1d210 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x8b0>
   stbi__g_failure_reason = str;
   1cd16:	48 8d 05 f2 ad 01 00 	lea    0x1adf2(%rip),%rax        # 37b0f <_ZSt19piecewise_construct+0x1c8>
   1cd1d:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1cd24:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1cd26:	31 c0                	xor    %eax,%eax
   1cd28:	e9 6e 14 00 00       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
   1cd2d:	0f 1f 00             	nopl   (%rax)
      if (z->code_buffer >= (1U << z->num_bits)) {
   1cd30:	8b 43 14             	mov    0x14(%rbx),%eax
   1cd33:	e9 83 fe ff ff       	jmp    1cbbb <_ZL16stbi__parse_zlibP10stbi__zbufi+0x25b>
   1cd38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1cd3f:	00 
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1cd40:	89 c1                	mov    %eax,%ecx
   1cd42:	8d 34 00             	lea    (%rax,%rax,1),%esi
   1cd45:	d1 f9                	sar    %ecx
   1cd47:	81 e6 aa aa 00 00    	and    $0xaaaa,%esi
   1cd4d:	81 e1 55 55 00 00    	and    $0x5555,%ecx
   1cd53:	09 f1                	or     %esi,%ecx
  n = ((n & 0xCCCC) >>  2) | ((n & 0x3333) << 2);
   1cd55:	89 ce                	mov    %ecx,%esi
   1cd57:	c1 e1 02             	shl    $0x2,%ecx
   1cd5a:	c1 fe 02             	sar    $0x2,%esi
   1cd5d:	81 e1 cc cc 00 00    	and    $0xcccc,%ecx
   1cd63:	81 e6 33 33 00 00    	and    $0x3333,%esi
   1cd69:	09 ce                	or     %ecx,%esi
  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);
   1cd6b:	89 f1                	mov    %esi,%ecx
   1cd6d:	c1 e6 04             	shl    $0x4,%esi
   1cd70:	c1 f9 04             	sar    $0x4,%ecx
   1cd73:	81 e6 f0 f0 00 00    	and    $0xf0f0,%esi
   1cd79:	81 e1 0f 0f 00 00    	and    $0xf0f,%ecx
   1cd7f:	09 f1                	or     %esi,%ecx
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1cd81:	89 ce                	mov    %ecx,%esi
   1cd83:	c1 e1 08             	shl    $0x8,%ecx
   1cd86:	c1 fe 08             	sar    $0x8,%esi
   1cd89:	0f b7 c9             	movzwl %cx,%ecx
   1cd8c:	09 ce                	or     %ecx,%esi
      if (k < z->maxcode[s])
   1cd8e:	3b b3 60 0c 00 00    	cmp    0xc60(%rbx),%esi
   1cd94:	0f 8c 66 04 00 00    	jl     1d200 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x8a0>
   1cd9a:	3b b3 64 0c 00 00    	cmp    0xc64(%rbx),%esi
   1cda0:	0f 8c 75 04 00 00    	jl     1d21b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x8bb>
   1cda6:	3b b3 68 0c 00 00    	cmp    0xc68(%rbx),%esi
   1cdac:	0f 8c 74 04 00 00    	jl     1d226 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x8c6>
   1cdb2:	3b b3 6c 0c 00 00    	cmp    0xc6c(%rbx),%esi
   1cdb8:	0f 8c ea 05 00 00    	jl     1d3a8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xa48>
   1cdbe:	3b b3 70 0c 00 00    	cmp    0xc70(%rbx),%esi
   1cdc4:	0f 8c e9 05 00 00    	jl     1d3b3 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xa53>
   1cdca:	3b b3 74 0c 00 00    	cmp    0xc74(%rbx),%esi
   1cdd0:	0f 8d 40 ff ff ff    	jge    1cd16 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3b6>
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1cdd6:	41 b8 0f 00 00 00    	mov    $0xf,%r8d
   1cddc:	0f 1f 40 00          	nopl   0x0(%rax)
   b = (k >> (16-s)) - z->firstcode[s] + z->firstsymbol[s];
   1cde0:	b9 10 00 00 00       	mov    $0x10,%ecx
   1cde5:	44 29 c1             	sub    %r8d,%ecx
   1cde8:	d3 fe                	sar    %cl,%esi
   1cdea:	49 63 c8             	movslq %r8d,%rcx
   1cded:	44 0f b7 8c 4b 18 0c 	movzwl 0xc18(%rbx,%rcx,2),%r9d
   1cdf4:	00 00 
   1cdf6:	0f b7 8c 4b 7c 0c 00 	movzwl 0xc7c(%rbx,%rcx,2),%ecx
   1cdfd:	00 
   1cdfe:	44 29 ce             	sub    %r9d,%esi
   1ce01:	01 f1                	add    %esi,%ecx
   if (b >= STBI__ZNSYMS) return -1; // some data was corrupt somewhere!
   1ce03:	81 f9 1f 01 00 00    	cmp    $0x11f,%ecx
   1ce09:	0f 8f 07 ff ff ff    	jg     1cd16 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3b6>
   if (z->size[b] != s) return -1;  // was originally an assert, but report failure instead.
   1ce0f:	48 63 f1             	movslq %ecx,%rsi
   1ce12:	0f b6 8c 33 9c 0c 00 	movzbl 0xc9c(%rbx,%rsi,1),%ecx
   1ce19:	00 
   1ce1a:	44 39 c1             	cmp    %r8d,%ecx
   1ce1d:	0f 85 f3 fe ff ff    	jne    1cd16 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x3b6>
   a->code_buffer >>= s;
   1ce23:	44 89 c1             	mov    %r8d,%ecx
   a->num_bits -= s;
   1ce26:	44 29 c2             	sub    %r8d,%edx
   return z->value[b];
   1ce29:	0f b7 b4 73 bc 0d 00 	movzwl 0xdbc(%rbx,%rsi,2),%esi
   1ce30:	00 
   a->code_buffer >>= s;
   1ce31:	d3 e8                	shr    %cl,%eax
   a->num_bits -= s;
   1ce33:	89 53 10             	mov    %edx,0x10(%rbx)
   a->code_buffer >>= s;
   1ce36:	89 43 14             	mov    %eax,0x14(%rbx)
         if (z < 0) return stbi__err("bad huffman code","Corrupt PNG");
   1ce39:	e9 aa fd ff ff       	jmp    1cbe8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x288>
   1ce3e:	66 90                	xchg   %ax,%ax
      if (z->code_buffer >= (1U << z->num_bits)) {
   1ce40:	8b 43 14             	mov    0x14(%rbx),%eax
   if (z->num_bits < n) stbi__fill_bits(z);
   1ce43:	39 d6                	cmp    %edx,%esi
   1ce45:	0f 8f ed 01 00 00    	jg     1d038 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6d8>
   z->code_buffer >>= n;
   1ce4b:	89 f1                	mov    %esi,%ecx
   k = z->code_buffer & ((1 << n) - 1);
   1ce4d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   z->code_buffer >>= n;
   1ce53:	41 89 c2             	mov    %eax,%r10d
   z->num_bits -= n;
   1ce56:	29 f2                	sub    %esi,%edx
   k = z->code_buffer & ((1 << n) - 1);
   1ce58:	41 d3 e0             	shl    %cl,%r8d
   z->code_buffer >>= n;
   1ce5b:	41 d3 ea             	shr    %cl,%r10d
   z->num_bits -= n;
   1ce5e:	89 53 10             	mov    %edx,0x10(%rbx)
   k = z->code_buffer & ((1 << n) - 1);
   1ce61:	41 83 e8 01          	sub    $0x1,%r8d
   z->code_buffer >>= n;
   1ce65:	44 89 53 14          	mov    %r10d,0x14(%rbx)
   k = z->code_buffer & ((1 << n) - 1);
   1ce69:	41 21 c0             	and    %eax,%r8d
         if (stbi__zlength_extra[z]) len += stbi__zreceive(a, stbi__zlength_extra[z]);
   1ce6c:	45 01 c7             	add    %r8d,%r15d
   1ce6f:	e9 f3 fc ff ff       	jmp    1cb67 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x207>
   1ce74:	0f 1f 40 00          	nopl   0x0(%rax)
   if (!z->z_expandable) return stbi__err("output buffer limit","Corrupt PNG");
   1ce78:	8b 53 30             	mov    0x30(%rbx),%edx
   z->zout = zout;
   1ce7b:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
   if (!z->z_expandable) return stbi__err("output buffer limit","Corrupt PNG");
   1ce7f:	85 d2                	test   %edx,%edx
   1ce81:	0f 84 a9 00 00 00    	je     1cf30 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x5d0>
   cur   = (unsigned int) (z->zout - z->zout_start);
   1ce87:	4c 8b 43 20          	mov    0x20(%rbx),%r8
   1ce8b:	4c 29 c7             	sub    %r8,%rdi
   1ce8e:	48 89 f9             	mov    %rdi,%rcx
   if (UINT_MAX - cur < (unsigned) n) return stbi__err("outofmem", "Out of memory");
   1ce91:	83 ff ff             	cmp    $0xffffffff,%edi
   1ce94:	0f 84 66 01 00 00    	je     1d000 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6a0>
   limit = old_limit = (unsigned) (z->zout_end - z->zout_start);
   1ce9a:	4c 29 c0             	sub    %r8,%rax
   while (cur + n > limit) {
   1ce9d:	8d 77 01             	lea    0x1(%rdi),%esi
   1cea0:	39 f0                	cmp    %esi,%eax
   1cea2:	73 1a                	jae    1cebe <_ZL16stbi__parse_zlibP10stbi__zbufi+0x55e>
      if(limit > UINT_MAX / 2) return stbi__err("outofmem", "Out of memory");
   1cea4:	85 c0                	test   %eax,%eax
   1cea6:	79 10                	jns    1ceb8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x558>
   1cea8:	e9 53 01 00 00       	jmp    1d000 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6a0>
   1cead:	0f 1f 00             	nopl   (%rax)
   1ceb0:	85 c0                	test   %eax,%eax
   1ceb2:	0f 88 48 01 00 00    	js     1d000 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6a0>
      limit *= 2;
   1ceb8:	01 c0                	add    %eax,%eax
   while (cur + n > limit) {
   1ceba:	39 f0                	cmp    %esi,%eax
   1cebc:	72 f2                	jb     1ceb0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x550>
   q = (char *) STBI_REALLOC_SIZED(z->zout_start, old_limit, limit);
   1cebe:	41 89 c7             	mov    %eax,%r15d
   1cec1:	4c 89 c7             	mov    %r8,%rdi
   1cec4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1cec9:	4c 89 fe             	mov    %r15,%rsi
   1cecc:	e8 df 9a fe ff       	call   69b0 <realloc@plt>
   if (q == NULL) return stbi__err("outofmem", "Out of memory");
   1ced1:	48 85 c0             	test   %rax,%rax
   1ced4:	0f 84 26 01 00 00    	je     1d000 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6a0>
   z->zout       = q + cur;
   1ceda:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   z->zout_start = q;
   1cedf:	48 89 43 20          	mov    %rax,0x20(%rbx)
   z->zout_end   = q + limit;
   1cee3:	4c 8d 1d d6 b6 01 00 	lea    0x1b6d6(%rip),%r11        # 385c0 <_ZL19stbi__zlength_extra>
   z->zout       = q + cur;
   1ceea:	89 cf                	mov    %ecx,%edi
   1ceec:	48 01 c7             	add    %rax,%rdi
   z->zout_end   = q + limit;
   1ceef:	4c 01 f8             	add    %r15,%rax
   z->zout       = q + cur;
   1cef2:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
   z->zout_end   = q + limit;
   1cef6:	48 89 43 28          	mov    %rax,0x28(%rbx)
   1cefa:	e9 b2 fb ff ff       	jmp    1cab1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x151>
   1ceff:	90                   	nop
            if (len) { do *zout++ = v; while (--len); }
   1cf00:	45 85 ff             	test   %r15d,%r15d
   1cf03:	0f 84 af fb ff ff    	je     1cab8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x158>
   1cf09:	45 89 ff             	mov    %r15d,%r15d
   1cf0c:	0f be 31             	movsbl (%rcx),%esi
   1cf0f:	4c 89 fa             	mov    %r15,%rdx
   1cf12:	e8 89 93 fe ff       	call   62a0 <memset@plt>
   1cf17:	4c 8d 1d a2 b6 01 00 	lea    0x1b6a2(%rip),%r11        # 385c0 <_ZL19stbi__zlength_extra>
   1cf1e:	48 89 c7             	mov    %rax,%rdi
   1cf21:	4c 01 ff             	add    %r15,%rdi
   1cf24:	e9 8f fb ff ff       	jmp    1cab8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x158>
   1cf29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   stbi__g_failure_reason = str;
   1cf30:	48 8d 05 77 ab 01 00 	lea    0x1ab77(%rip),%rax        # 37aae <_ZSt19piecewise_construct+0x167>
   1cf37:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1cf3e:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1cf40:	31 c0                	xor    %eax,%eax
   1cf42:	e9 54 12 00 00       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
   1cf47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1cf4e:	00 00 
   if (z->num_bits < n) stbi__fill_bits(z);
   1cf50:	39 d6                	cmp    %edx,%esi
   1cf52:	0f 8f 30 01 00 00    	jg     1d088 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x728>
   z->num_bits -= n;
   1cf58:	29 f2                	sub    %esi,%edx
   z->code_buffer >>= n;
   1cf5a:	89 f1                	mov    %esi,%ecx
   1cf5c:	41 89 c2             	mov    %eax,%r10d
   z->num_bits -= n;
   1cf5f:	89 53 10             	mov    %edx,0x10(%rbx)
   k = z->code_buffer & ((1 << n) - 1);
   1cf62:	ba 01 00 00 00       	mov    $0x1,%edx
   z->code_buffer >>= n;
   1cf67:	41 d3 ea             	shr    %cl,%r10d
   k = z->code_buffer & ((1 << n) - 1);
   1cf6a:	d3 e2                	shl    %cl,%edx
   z->code_buffer >>= n;
   1cf6c:	44 89 53 14          	mov    %r10d,0x14(%rbx)
   k = z->code_buffer & ((1 << n) - 1);
   1cf70:	83 ea 01             	sub    $0x1,%edx
   1cf73:	21 c2                	and    %eax,%edx
         if (stbi__zdist_extra[z]) dist += stbi__zreceive(a, stbi__zdist_extra[z]);
   1cf75:	41 01 d6             	add    %edx,%r14d
   1cf78:	e9 86 fc ff ff       	jmp    1cc03 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x2a3>
   1cf7d:	0f 1f 00             	nopl   (%rax)
   if (!z->z_expandable) return stbi__err("output buffer limit","Corrupt PNG");
   1cf80:	8b 43 30             	mov    0x30(%rbx),%eax
   z->zout = zout;
   1cf83:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
   if (!z->z_expandable) return stbi__err("output buffer limit","Corrupt PNG");
   1cf87:	85 c0                	test   %eax,%eax
   1cf89:	74 a5                	je     1cf30 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x5d0>
   if (UINT_MAX - cur < (unsigned) n) return stbi__err("outofmem", "Out of memory");
   1cf8b:	44 89 f8             	mov    %r15d,%eax
   1cf8e:	01 c8                	add    %ecx,%eax
   1cf90:	72 6e                	jb     1d000 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6a0>
   limit = old_limit = (unsigned) (z->zout_end - z->zout_start);
   1cf92:	4c 29 c6             	sub    %r8,%rsi
   while (cur + n > limit) {
   1cf95:	41 8d 3c 0f          	lea    (%r15,%rcx,1),%edi
   limit = old_limit = (unsigned) (z->zout_end - z->zout_start);
   1cf99:	89 f0                	mov    %esi,%eax
   while (cur + n > limit) {
   1cf9b:	39 fe                	cmp    %edi,%esi
   1cf9d:	73 13                	jae    1cfb2 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x652>
      if(limit > UINT_MAX / 2) return stbi__err("outofmem", "Out of memory");
   1cf9f:	85 f6                	test   %esi,%esi
   1cfa1:	79 09                	jns    1cfac <_ZL16stbi__parse_zlibP10stbi__zbufi+0x64c>
   1cfa3:	eb 5b                	jmp    1d000 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6a0>
   1cfa5:	0f 1f 00             	nopl   (%rax)
   1cfa8:	85 c0                	test   %eax,%eax
   1cfaa:	78 54                	js     1d000 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6a0>
      limit *= 2;
   1cfac:	01 c0                	add    %eax,%eax
   while (cur + n > limit) {
   1cfae:	39 f8                	cmp    %edi,%eax
   1cfb0:	72 f6                	jb     1cfa8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x648>
   q = (char *) STBI_REALLOC_SIZED(z->zout_start, old_limit, limit);
   1cfb2:	89 c6                	mov    %eax,%esi
   1cfb4:	4c 89 c7             	mov    %r8,%rdi
   1cfb7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
   1cfbc:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   1cfc1:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
   1cfc6:	e8 e5 99 fe ff       	call   69b0 <realloc@plt>
   if (q == NULL) return stbi__err("outofmem", "Out of memory");
   1cfcb:	48 85 c0             	test   %rax,%rax
   1cfce:	74 30                	je     1d000 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6a0>
   z->zout       = q + cur;
   1cfd0:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   z->zout_end   = q + limit;
   1cfd5:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
   z->zout_start = q;
   1cfda:	48 89 43 20          	mov    %rax,0x20(%rbx)
   z->zout_end   = q + limit;
   1cfde:	4c 8d 1d db b5 01 00 	lea    0x1b5db(%rip),%r11        # 385c0 <_ZL19stbi__zlength_extra>
   1cfe5:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   z->zout       = q + cur;
   1cfea:	89 c9                	mov    %ecx,%ecx
   1cfec:	48 8d 3c 08          	lea    (%rax,%rcx,1),%rdi
   z->zout_end   = q + limit;
   1cff0:	48 01 f0             	add    %rsi,%rax
   z->zout       = q + cur;
   1cff3:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
   z->zout_end   = q + limit;
   1cff7:	48 89 43 28          	mov    %rax,0x28(%rbx)
   1cffb:	e9 2c fc ff ff       	jmp    1cc2c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x2cc>
   stbi__g_failure_reason = str;
   1d000:	48 8d 05 2e aa 01 00 	lea    0x1aa2e(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   1d007:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1d00e:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1d010:	31 c0                	xor    %eax,%eax
   1d012:	e9 84 11 00 00       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
   1d017:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1d01e:	00 00 
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1d020:	41 b8 0b 00 00 00    	mov    $0xb,%r8d
   b = (k >> (16-s)) - z->firstcode[s] + z->firstsymbol[s];
   1d026:	b9 10 00 00 00       	mov    $0x10,%ecx
   1d02b:	44 29 c1             	sub    %r8d,%ecx
   1d02e:	e9 ad fa ff ff       	jmp    1cae0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x180>
   1d033:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   return (z->zbuffer >= z->zbuffer_end);
   1d038:	4c 8b 4b 08          	mov    0x8(%rbx),%r9
   1d03c:	eb 2f                	jmp    1d06d <_ZL16stbi__parse_zlibP10stbi__zbufi+0x70d>
   1d03e:	66 90                	xchg   %ax,%ax
   1d040:	48 8b 0b             	mov    (%rbx),%rcx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1d043:	4c 39 c9             	cmp    %r9,%rcx
   1d046:	73 13                	jae    1d05b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6fb>
   1d048:	4c 8d 41 01          	lea    0x1(%rcx),%r8
   1d04c:	4c 89 03             	mov    %r8,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1d04f:	44 0f b6 01          	movzbl (%rcx),%r8d
   1d053:	89 d1                	mov    %edx,%ecx
   1d055:	41 d3 e0             	shl    %cl,%r8d
   1d058:	44 09 c0             	or     %r8d,%eax
      z->num_bits += 8;
   1d05b:	83 c2 08             	add    $0x8,%edx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1d05e:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1d061:	89 53 10             	mov    %edx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1d064:	83 fa 18             	cmp    $0x18,%edx
   1d067:	0f 8f de fd ff ff    	jg     1ce4b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x4eb>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1d06d:	41 89 c2             	mov    %eax,%r10d
   1d070:	89 d1                	mov    %edx,%ecx
   1d072:	41 d3 ea             	shr    %cl,%r10d
   1d075:	45 85 d2             	test   %r10d,%r10d
   1d078:	74 c6                	je     1d040 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6e0>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1d07a:	4c 89 0b             	mov    %r9,(%rbx)
        return;
   1d07d:	e9 c9 fd ff ff       	jmp    1ce4b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x4eb>
   1d082:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   return (z->zbuffer >= z->zbuffer_end);
   1d088:	4c 8b 43 08          	mov    0x8(%rbx),%r8
   1d08c:	eb 2f                	jmp    1d0bd <_ZL16stbi__parse_zlibP10stbi__zbufi+0x75d>
   1d08e:	66 90                	xchg   %ax,%ax
   1d090:	48 8b 0b             	mov    (%rbx),%rcx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1d093:	4c 39 c1             	cmp    %r8,%rcx
   1d096:	73 13                	jae    1d0ab <_ZL16stbi__parse_zlibP10stbi__zbufi+0x74b>
   1d098:	4c 8d 49 01          	lea    0x1(%rcx),%r9
   1d09c:	4c 89 0b             	mov    %r9,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1d09f:	44 0f b6 09          	movzbl (%rcx),%r9d
   1d0a3:	89 d1                	mov    %edx,%ecx
   1d0a5:	41 d3 e1             	shl    %cl,%r9d
   1d0a8:	44 09 c8             	or     %r9d,%eax
      z->num_bits += 8;
   1d0ab:	83 c2 08             	add    $0x8,%edx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1d0ae:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1d0b1:	89 53 10             	mov    %edx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1d0b4:	83 fa 18             	cmp    $0x18,%edx
   1d0b7:	0f 8f 9b fe ff ff    	jg     1cf58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x5f8>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1d0bd:	41 89 c2             	mov    %eax,%r10d
   1d0c0:	89 d1                	mov    %edx,%ecx
   1d0c2:	41 d3 ea             	shr    %cl,%r10d
   1d0c5:	45 85 d2             	test   %r10d,%r10d
   1d0c8:	74 c6                	je     1d090 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x730>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1d0ca:	4c 89 03             	mov    %r8,(%rbx)
        return;
   1d0cd:	e9 86 fe ff ff       	jmp    1cf58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x5f8>
   1d0d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1d0d8:	41 b8 0c 00 00 00    	mov    $0xc,%r8d
   1d0de:	e9 43 ff ff ff       	jmp    1d026 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6c6>
   1d0e3:	41 b8 0d 00 00 00    	mov    $0xd,%r8d
   1d0e9:	e9 38 ff ff ff       	jmp    1d026 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6c6>
   1d0ee:	41 b8 0e 00 00 00    	mov    $0xe,%r8d
   1d0f4:	e9 2d ff ff ff       	jmp    1d026 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6c6>
   1d0f9:	45 89 fa             	mov    %r15d,%r10d
   1d0fc:	83 f8 0e             	cmp    $0xe,%eax
   1d0ff:	0f 86 d5 0f 00 00    	jbe    1e0da <_ZL16stbi__parse_zlibP10stbi__zbufi+0x177a>
   1d105:	44 89 fe             	mov    %r15d,%esi
            if (len) { do *zout++ = *p++; while (--len); }
   1d108:	31 c0                	xor    %eax,%eax
   1d10a:	c1 ee 04             	shr    $0x4,%esi
   1d10d:	48 c1 e6 04          	shl    $0x4,%rsi
   1d111:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1d118:	f3 0f 6f 0c 01       	movdqu (%rcx,%rax,1),%xmm1
   1d11d:	0f 11 0c 07          	movups %xmm1,(%rdi,%rax,1)
   1d121:	48 83 c0 10          	add    $0x10,%rax
   1d125:	48 39 c6             	cmp    %rax,%rsi
   1d128:	75 ee                	jne    1d118 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x7b8>
   1d12a:	44 89 f8             	mov    %r15d,%eax
   1d12d:	45 89 f8             	mov    %r15d,%r8d
   1d130:	83 e0 f0             	and    $0xfffffff0,%eax
   1d133:	89 c6                	mov    %eax,%esi
   1d135:	41 29 c0             	sub    %eax,%r8d
   1d138:	4c 8d 0c 37          	lea    (%rdi,%rsi,1),%r9
   1d13c:	48 01 f1             	add    %rsi,%rcx
   1d13f:	44 89 fe             	mov    %r15d,%esi
   1d142:	44 39 f8             	cmp    %r15d,%eax
   1d145:	0f 84 2d fb ff ff    	je     1cc78 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x318>
   1d14b:	41 8d 70 ff          	lea    -0x1(%r8),%esi
   1d14f:	45 89 c2             	mov    %r8d,%r10d
   1d152:	83 fe 06             	cmp    $0x6,%esi
   1d155:	76 2c                	jbe    1d183 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x823>
   1d157:	48 89 c6             	mov    %rax,%rsi
   1d15a:	48 29 d6             	sub    %rdx,%rsi
   1d15d:	48 8b 14 37          	mov    (%rdi,%rsi,1),%rdx
   1d161:	44 89 fe             	mov    %r15d,%esi
   1d164:	48 89 14 07          	mov    %rdx,(%rdi,%rax,1)
   1d168:	44 89 d0             	mov    %r10d,%eax
   1d16b:	83 e0 f8             	and    $0xfffffff8,%eax
   1d16e:	89 c2                	mov    %eax,%edx
   1d170:	41 29 c0             	sub    %eax,%r8d
   1d173:	49 01 d1             	add    %rdx,%r9
   1d176:	48 01 d1             	add    %rdx,%rcx
   1d179:	41 83 e2 07          	and    $0x7,%r10d
   1d17d:	0f 84 f5 fa ff ff    	je     1cc78 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x318>
   1d183:	0f b6 01             	movzbl (%rcx),%eax
   1d186:	44 89 fe             	mov    %r15d,%esi
   1d189:	41 88 01             	mov    %al,(%r9)
   1d18c:	41 83 f8 01          	cmp    $0x1,%r8d
   1d190:	0f 84 e2 fa ff ff    	je     1cc78 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x318>
   1d196:	0f b6 41 01          	movzbl 0x1(%rcx),%eax
   1d19a:	41 88 41 01          	mov    %al,0x1(%r9)
   1d19e:	41 83 f8 02          	cmp    $0x2,%r8d
   1d1a2:	0f 84 d0 fa ff ff    	je     1cc78 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x318>
   1d1a8:	0f b6 41 02          	movzbl 0x2(%rcx),%eax
   1d1ac:	41 88 41 02          	mov    %al,0x2(%r9)
   1d1b0:	41 83 f8 03          	cmp    $0x3,%r8d
   1d1b4:	0f 84 be fa ff ff    	je     1cc78 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x318>
   1d1ba:	0f b6 41 03          	movzbl 0x3(%rcx),%eax
   1d1be:	41 88 41 03          	mov    %al,0x3(%r9)
   1d1c2:	41 83 f8 04          	cmp    $0x4,%r8d
   1d1c6:	0f 84 ac fa ff ff    	je     1cc78 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x318>
   1d1cc:	0f b6 41 04          	movzbl 0x4(%rcx),%eax
   1d1d0:	41 88 41 04          	mov    %al,0x4(%r9)
   1d1d4:	41 83 f8 05          	cmp    $0x5,%r8d
   1d1d8:	0f 84 9a fa ff ff    	je     1cc78 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x318>
   1d1de:	0f b6 41 05          	movzbl 0x5(%rcx),%eax
   1d1e2:	41 88 41 05          	mov    %al,0x5(%r9)
   1d1e6:	41 83 f8 06          	cmp    $0x6,%r8d
   1d1ea:	0f 84 88 fa ff ff    	je     1cc78 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x318>
   1d1f0:	0f b6 41 06          	movzbl 0x6(%rcx),%eax
   1d1f4:	48 01 f7             	add    %rsi,%rdi
   1d1f7:	41 88 41 06          	mov    %al,0x6(%r9)
   1d1fb:	e9 b8 f8 ff ff       	jmp    1cab8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x158>
      if (k < z->maxcode[s])
   1d200:	b9 06 00 00 00       	mov    $0x6,%ecx
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1d205:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
   1d20b:	e9 d8 fb ff ff       	jmp    1cde8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x488>
   1d210:	41 b8 0f 00 00 00    	mov    $0xf,%r8d
   1d216:	e9 0b fe ff ff       	jmp    1d026 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x6c6>
   1d21b:	41 b8 0b 00 00 00    	mov    $0xb,%r8d
   1d221:	e9 ba fb ff ff       	jmp    1cde0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x480>
   1d226:	41 b8 0c 00 00 00    	mov    $0xc,%r8d
   1d22c:	e9 af fb ff ff       	jmp    1cde0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x480>
   if (a->num_bits & 7)
   1d231:	41 89 d0             	mov    %edx,%r8d
   1d234:	41 83 e0 07          	and    $0x7,%r8d
   1d238:	0f 85 a2 0d 00 00    	jne    1dfe0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1680>
   while (a->num_bits > 0) {
   1d23e:	85 d2                	test   %edx,%edx
   1d240:	0f 8e b9 0d 00 00    	jle    1dfff <_ZL16stbi__parse_zlibP10stbi__zbufi+0x169f>
      a->code_buffer >>= 8;
   1d246:	89 f1                	mov    %esi,%ecx
      a->num_bits -= 8;
   1d248:	8d 7a f8             	lea    -0x8(%rdx),%edi
      header[k++] = (stbi_uc) (a->code_buffer & 255); // suppress MSVC run-time check
   1d24b:	40 88 74 24 70       	mov    %sil,0x70(%rsp)
      a->code_buffer >>= 8;
   1d250:	c1 e9 08             	shr    $0x8,%ecx
   while (a->num_bits > 0) {
   1d253:	85 ff                	test   %edi,%edi
   1d255:	0f 8e 05 0e 00 00    	jle    1e060 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1700>
      header[k++] = (stbi_uc) (a->code_buffer & 255); // suppress MSVC run-time check
   1d25b:	88 4c 24 71          	mov    %cl,0x71(%rsp)
      a->code_buffer >>= 8;
   1d25f:	89 f1                	mov    %esi,%ecx
   1d261:	c1 e9 10             	shr    $0x10,%ecx
   while (a->num_bits > 0) {
   1d264:	83 fa 10             	cmp    $0x10,%edx
   1d267:	0f 8e f3 0d 00 00    	jle    1e060 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1700>
      header[k++] = (stbi_uc) (a->code_buffer & 255); // suppress MSVC run-time check
   1d26d:	88 4c 24 72          	mov    %cl,0x72(%rsp)
      a->code_buffer >>= 8;
   1d271:	c1 ee 18             	shr    $0x18,%esi
   while (a->num_bits > 0) {
   1d274:	83 fa 18             	cmp    $0x18,%edx
   1d277:	0f 8e 72 0f 00 00    	jle    1e1ef <_ZL16stbi__parse_zlibP10stbi__zbufi+0x188f>
      header[k++] = (stbi_uc) (a->code_buffer & 255); // suppress MSVC run-time check
   1d27d:	40 88 74 24 73       	mov    %sil,0x73(%rsp)
   while (a->num_bits > 0) {
   1d282:	8d 4a ff             	lea    -0x1(%rdx),%ecx
   1d285:	89 43 14             	mov    %eax,0x14(%rbx)
   1d288:	c1 e9 03             	shr    $0x3,%ecx
      a->num_bits -= 8;
   1d28b:	89 ca                	mov    %ecx,%edx
   1d28d:	f7 da                	neg    %edx
   1d28f:	8d 14 d7             	lea    (%rdi,%rdx,8),%edx
   1d292:	89 53 10             	mov    %edx,0x10(%rbx)
   if (a->num_bits < 0) return stbi__err("zlib corrupt","Corrupt PNG");
   1d295:	85 d2                	test   %edx,%edx
   1d297:	75 76                	jne    1d30f <_ZL16stbi__parse_zlibP10stbi__zbufi+0x9af>
      header[k++] = (stbi_uc) (a->code_buffer & 255); // suppress MSVC run-time check
   1d299:	8d 51 01             	lea    0x1(%rcx),%edx
   while (k < 4)
   1d29c:	83 f9 03             	cmp    $0x3,%ecx
   1d29f:	74 40                	je     1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
   return (z->zbuffer >= z->zbuffer_end);
   1d2a1:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
   1d2a5:	48 8b 03             	mov    (%rbx),%rax
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1d2a8:	48 39 f8             	cmp    %rdi,%rax
   1d2ab:	0f 82 ed 0c 00 00    	jb     1df9e <_ZL16stbi__parse_zlibP10stbi__zbufi+0x163e>
      header[k++] = stbi__zget8(a);
   1d2b1:	48 63 d2             	movslq %edx,%rdx
   1d2b4:	8d 41 02             	lea    0x2(%rcx),%eax
   1d2b7:	c6 44 14 70 00       	movb   $0x0,0x70(%rsp,%rdx,1)
   while (k < 4)
   1d2bc:	83 f9 02             	cmp    $0x2,%ecx
   1d2bf:	74 20                	je     1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
      header[k++] = stbi__zget8(a);
   1d2c1:	48 63 c8             	movslq %eax,%rcx
   1d2c4:	ba 04 00 00 00       	mov    $0x4,%edx
   1d2c9:	48 8d 74 0c 70       	lea    0x70(%rsp,%rcx,1),%rsi
   1d2ce:	29 c2                	sub    %eax,%edx
   1d2d0:	74 0f                	je     1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
   1d2d2:	31 c0                	xor    %eax,%eax
   1d2d4:	89 c1                	mov    %eax,%ecx
   1d2d6:	83 c0 01             	add    $0x1,%eax
   1d2d9:	c6 04 0e 00          	movb   $0x0,(%rsi,%rcx,1)
   1d2dd:	39 d0                	cmp    %edx,%eax
   1d2df:	72 f3                	jb     1d2d4 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x974>
   len  = header[1] * 256 + header[0];
   1d2e1:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
   1d2e6:	0f b6 54 24 70       	movzbl 0x70(%rsp),%edx
   nlen = header[3] * 256 + header[2];
   1d2eb:	0f b6 4c 24 72       	movzbl 0x72(%rsp),%ecx
   len  = header[1] * 256 + header[0];
   1d2f0:	c1 e0 08             	shl    $0x8,%eax
   1d2f3:	01 d0                	add    %edx,%eax
   nlen = header[3] * 256 + header[2];
   1d2f5:	0f b6 54 24 73       	movzbl 0x73(%rsp),%edx
   1d2fa:	c1 e2 08             	shl    $0x8,%edx
   1d2fd:	01 ca                	add    %ecx,%edx
   if (nlen != (len ^ 0xffff)) return stbi__err("zlib corrupt","Corrupt PNG");
   1d2ff:	89 c1                	mov    %eax,%ecx
   1d301:	81 f1 ff ff 00 00    	xor    $0xffff,%ecx
   1d307:	39 ca                	cmp    %ecx,%edx
   1d309:	0f 84 a4 0d 00 00    	je     1e0b3 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1753>
   stbi__g_failure_reason = str;
   1d30f:	48 8d 05 db a7 01 00 	lea    0x1a7db(%rip),%rax        # 37af1 <_ZSt19piecewise_construct+0x1aa>
   1d316:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1d31d:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1d31f:	31 c0                	xor    %eax,%eax
   1d321:	e9 75 0e 00 00       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1d326:	48 8b 73 08          	mov    0x8(%rbx),%rsi
   1d32a:	eb 2c                	jmp    1d358 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x9f8>
   1d32c:	0f 1f 40 00          	nopl   0x0(%rax)
   return (z->zbuffer >= z->zbuffer_end);
   1d330:	48 8b 13             	mov    (%rbx),%rdx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1d333:	48 39 f2             	cmp    %rsi,%rdx
   1d336:	73 0e                	jae    1d346 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x9e6>
   1d338:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
   1d33c:	48 89 3b             	mov    %rdi,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1d33f:	0f b6 12             	movzbl (%rdx),%edx
   1d342:	d3 e2                	shl    %cl,%edx
   1d344:	09 d0                	or     %edx,%eax
      z->num_bits += 8;
   1d346:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1d349:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1d34c:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1d34f:	83 f9 18             	cmp    $0x18,%ecx
   1d352:	0f 8f 6b f6 ff ff    	jg     1c9c3 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x63>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1d358:	89 c2                	mov    %eax,%edx
   1d35a:	d3 ea                	shr    %cl,%edx
   1d35c:	85 d2                	test   %edx,%edx
   1d35e:	74 d0                	je     1d330 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x9d0>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1d360:	48 89 33             	mov    %rsi,(%rbx)
        return;
   1d363:	e9 5b f6 ff ff       	jmp    1c9c3 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x63>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1d368:	48 8b 73 08          	mov    0x8(%rbx),%rsi
   1d36c:	eb 2a                	jmp    1d398 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xa38>
   1d36e:	66 90                	xchg   %ax,%ax
   return (z->zbuffer >= z->zbuffer_end);
   1d370:	48 8b 13             	mov    (%rbx),%rdx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1d373:	48 39 f2             	cmp    %rsi,%rdx
   1d376:	73 0e                	jae    1d386 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xa26>
   1d378:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
   1d37c:	48 89 3b             	mov    %rdi,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1d37f:	0f b6 12             	movzbl (%rdx),%edx
   1d382:	d3 e2                	shl    %cl,%edx
   1d384:	09 d0                	or     %edx,%eax
      z->num_bits += 8;
   1d386:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1d389:	89 43 14             	mov    %eax,0x14(%rbx)
      z->num_bits += 8;
   1d38c:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1d38f:	83 f9 18             	cmp    $0x18,%ecx
   1d392:	0f 8f 10 f6 ff ff    	jg     1c9a8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x48>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1d398:	89 c2                	mov    %eax,%edx
   1d39a:	d3 ea                	shr    %cl,%edx
   1d39c:	85 d2                	test   %edx,%edx
   1d39e:	74 d0                	je     1d370 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xa10>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1d3a0:	48 89 33             	mov    %rsi,(%rbx)
        return;
   1d3a3:	e9 00 f6 ff ff       	jmp    1c9a8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x48>
   for (s=STBI__ZFAST_BITS+1; ; ++s)
   1d3a8:	41 b8 0d 00 00 00    	mov    $0xd,%r8d
   1d3ae:	e9 2d fa ff ff       	jmp    1cde0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x480>
   1d3b3:	41 b8 0e 00 00 00    	mov    $0xe,%r8d
   1d3b9:	e9 22 fa ff ff       	jmp    1cde0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x480>
   memset(z->fast, 0, sizeof(z->fast));
   1d3be:	48 8d 7b 3c          	lea    0x3c(%rbx),%rdi
   1d3c2:	89 d8                	mov    %ebx,%eax
   memset(sizes, 0, sizeof(sizes));
   1d3c4:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1d3c8:	c7 84 24 b0 00 00 00 	movl   $0x0,0xb0(%rsp)
   1d3cf:	00 00 00 00 
   memset(z->fast, 0, sizeof(z->fast));
   1d3d3:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   memset(sizes, 0, sizeof(sizes));
   1d3d7:	0f 29 84 24 90 00 00 	movaps %xmm0,0x90(%rsp)
   1d3de:	00 
   memset(z->fast, 0, sizeof(z->fast));
   1d3df:	29 f8                	sub    %edi,%eax
   memset(sizes, 0, sizeof(sizes));
   1d3e1:	0f 29 44 24 70       	movaps %xmm0,0x70(%rsp)
   memset(z->fast, 0, sizeof(z->fast));
   1d3e6:	8d 88 34 04 00 00    	lea    0x434(%rax),%ecx
   1d3ec:	31 c0                	xor    %eax,%eax
   memset(sizes, 0, sizeof(sizes));
   1d3ee:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
   1d3f5:	00 
   memset(z->fast, 0, sizeof(z->fast));
   1d3f6:	c1 e9 03             	shr    $0x3,%ecx
   memset(sizes, 0, sizeof(sizes));
   1d3f9:	0f 29 84 24 a0 00 00 	movaps %xmm0,0xa0(%rsp)
   1d400:	00 
   memset(z->fast, 0, sizeof(z->fast));
   1d401:	48 c7 43 34 00 00 00 	movq   $0x0,0x34(%rbx)
   1d408:	00 
   1d409:	48 c7 83 2c 04 00 00 	movq   $0x0,0x42c(%rbx)
   1d410:	00 00 00 00 
   1d414:	f3 48 ab             	rep stos %rax,%es:(%rdi)
      ++sizes[sizelist[i]];
   1d417:	48 8d 05 63 af 01 00 	lea    0x1af63(%rip),%rax        # 38381 <_ZL21stbi__zdefault_length+0x1>
   1d41e:	c7 84 24 90 00 00 00 	movl   $0x1,0x90(%rsp)
   1d425:	01 00 00 00 
   for (i=0; i < num; ++i)
   1d429:	48 8d b0 1f 01 00 00 	lea    0x11f(%rax),%rsi
      ++sizes[sizelist[i]];
   1d430:	0f b6 08             	movzbl (%rax),%ecx
   for (i=0; i < num; ++i)
   1d433:	48 83 c0 01          	add    $0x1,%rax
      ++sizes[sizelist[i]];
   1d437:	83 44 8c 70 01       	addl   $0x1,0x70(%rsp,%rcx,4)
   for (i=0; i < num; ++i)
   1d43c:	48 39 c6             	cmp    %rax,%rsi
   1d43f:	75 ef                	jne    1d430 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xad0>
      if (sizes[i] > (1 << i))
   1d441:	8b 74 24 74          	mov    0x74(%rsp),%esi
   sizes[0] = 0;
   1d445:	c7 44 24 70 00 00 00 	movl   $0x0,0x70(%rsp)
   1d44c:	00 
      if (sizes[i] > (1 << i))
   1d44d:	83 fe 02             	cmp    $0x2,%esi
   1d450:	0f 8f 02 0b 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d456:	44 8b 4c 24 78       	mov    0x78(%rsp),%r9d
   1d45b:	41 83 f9 04          	cmp    $0x4,%r9d
   1d45f:	0f 8f f3 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d465:	44 8b 44 24 7c       	mov    0x7c(%rsp),%r8d
   1d46a:	41 83 f8 08          	cmp    $0x8,%r8d
   1d46e:	0f 8f e4 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d474:	8b bc 24 80 00 00 00 	mov    0x80(%rsp),%edi
   1d47b:	83 ff 10             	cmp    $0x10,%edi
   1d47e:	0f 8f d4 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d484:	44 8b b4 24 84 00 00 	mov    0x84(%rsp),%r14d
   1d48b:	00 
   1d48c:	41 83 fe 20          	cmp    $0x20,%r14d
   1d490:	0f 8f c2 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d496:	44 8b ac 24 88 00 00 	mov    0x88(%rsp),%r13d
   1d49d:	00 
   1d49e:	41 83 fd 40          	cmp    $0x40,%r13d
   1d4a2:	0f 8f b0 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d4a8:	44 8b 94 24 8c 00 00 	mov    0x8c(%rsp),%r10d
   1d4af:	00 
   1d4b0:	41 81 fa 80 00 00 00 	cmp    $0x80,%r10d
   1d4b7:	0f 8f 9b 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d4bd:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   1d4c4:	89 44 24 08          	mov    %eax,0x8(%rsp)
   1d4c8:	3d 00 01 00 00       	cmp    $0x100,%eax
   1d4cd:	0f 8f 85 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d4d3:	8b 84 24 94 00 00 00 	mov    0x94(%rsp),%eax
   1d4da:	89 44 24 10          	mov    %eax,0x10(%rsp)
   1d4de:	3d 00 02 00 00       	cmp    $0x200,%eax
   1d4e3:	0f 8f 6f 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d4e9:	8b 84 24 98 00 00 00 	mov    0x98(%rsp),%eax
   1d4f0:	89 44 24 18          	mov    %eax,0x18(%rsp)
   1d4f4:	3d 00 04 00 00       	cmp    $0x400,%eax
   1d4f9:	0f 8f 59 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d4ff:	8b 84 24 9c 00 00 00 	mov    0x9c(%rsp),%eax
   1d506:	89 44 24 20          	mov    %eax,0x20(%rsp)
   1d50a:	3d 00 08 00 00       	cmp    $0x800,%eax
   1d50f:	0f 8f 43 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d515:	44 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%r15d
   1d51c:	00 
   1d51d:	41 81 ff 00 10 00 00 	cmp    $0x1000,%r15d
   1d524:	0f 8f 2e 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d52a:	8b 84 24 a4 00 00 00 	mov    0xa4(%rsp),%eax
   1d531:	89 44 24 24          	mov    %eax,0x24(%rsp)
   1d535:	3d 00 20 00 00       	cmp    $0x2000,%eax
   1d53a:	0f 8f 18 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d540:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
   1d547:	89 44 24 28          	mov    %eax,0x28(%rsp)
   1d54b:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1d550:	0f 8f 02 0a 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1d556:	8b 84 24 ac 00 00 00 	mov    0xac(%rsp),%eax
   1d55d:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
   1d561:	3d 00 80 00 00       	cmp    $0x8000,%eax
   1d566:	0f 8f ec 09 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
      z->firstcode[i] = (stbi__uint16) code;
   1d56c:	31 c0                	xor    %eax,%eax
      next_code[i] = code;
   1d56e:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%rsp)
   1d575:	00 
      z->firstcode[i] = (stbi__uint16) code;
   1d576:	66 89 83 36 04 00 00 	mov    %ax,0x436(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d57d:	31 c0                	xor    %eax,%eax
   1d57f:	66 89 83 9a 04 00 00 	mov    %ax,0x49a(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d586:	89 f0                	mov    %esi,%eax
   1d588:	c1 e0 0f             	shl    $0xf,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1d58b:	66 89 b3 9c 04 00 00 	mov    %si,0x49c(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d592:	89 83 58 04 00 00    	mov    %eax,0x458(%rbx)
      code <<= 1;
   1d598:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
      next_code[i] = code;
   1d59b:	89 44 24 38          	mov    %eax,0x38(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1d59f:	66 89 83 38 04 00 00 	mov    %ax,0x438(%rbx)
      code = (code + sizes[i]);
   1d5a6:	44 01 c8             	add    %r9d,%eax
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d5a9:	83 f8 04             	cmp    $0x4,%eax
   1d5ac:	7e 09                	jle    1d5b7 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xc57>
   1d5ae:	45 85 c9             	test   %r9d,%r9d
   1d5b1:	0f 85 e5 0a 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d5b7:	89 c1                	mov    %eax,%ecx
      k += sizes[i];
   1d5b9:	41 01 f1             	add    %esi,%r9d
      code <<= 1;
   1d5bc:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d5be:	c1 e1 0e             	shl    $0xe,%ecx
      next_code[i] = code;
   1d5c1:	89 44 24 3c          	mov    %eax,0x3c(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1d5c5:	66 89 83 3a 04 00 00 	mov    %ax,0x43a(%rbx)
      code = (code + sizes[i]);
   1d5cc:	44 01 c0             	add    %r8d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d5cf:	89 8b 5c 04 00 00    	mov    %ecx,0x45c(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d5d5:	66 44 89 8b 9e 04 00 	mov    %r9w,0x49e(%rbx)
   1d5dc:	00 
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d5dd:	45 85 c0             	test   %r8d,%r8d
   1d5e0:	74 09                	je     1d5eb <_ZL16stbi__parse_zlibP10stbi__zbufi+0xc8b>
   1d5e2:	83 f8 08             	cmp    $0x8,%eax
   1d5e5:	0f 8f b1 0a 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d5eb:	89 c6                	mov    %eax,%esi
      k += sizes[i];
   1d5ed:	45 01 c8             	add    %r9d,%r8d
      code <<= 1;
   1d5f0:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d5f2:	c1 e6 0d             	shl    $0xd,%esi
      next_code[i] = code;
   1d5f5:	89 44 24 40          	mov    %eax,0x40(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1d5f9:	66 89 83 3c 04 00 00 	mov    %ax,0x43c(%rbx)
      code = (code + sizes[i]);
   1d600:	01 f8                	add    %edi,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d602:	89 b3 60 04 00 00    	mov    %esi,0x460(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d608:	66 44 89 83 a0 04 00 	mov    %r8w,0x4a0(%rbx)
   1d60f:	00 
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d610:	85 ff                	test   %edi,%edi
   1d612:	74 09                	je     1d61d <_ZL16stbi__parse_zlibP10stbi__zbufi+0xcbd>
   1d614:	83 f8 10             	cmp    $0x10,%eax
   1d617:	0f 8f 7f 0a 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d61d:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1d61f:	01 c0                	add    %eax,%eax
      k += sizes[i];
   1d621:	44 01 c7             	add    %r8d,%edi
      next_code[i] = code;
   1d624:	89 44 24 44          	mov    %eax,0x44(%rsp)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d628:	c1 e6 0c             	shl    $0xc,%esi
      z->firstcode[i] = (stbi__uint16) code;
   1d62b:	66 89 83 3e 04 00 00 	mov    %ax,0x43e(%rbx)
      code = (code + sizes[i]);
   1d632:	44 01 f0             	add    %r14d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d635:	89 b3 64 04 00 00    	mov    %esi,0x464(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d63b:	66 89 bb a2 04 00 00 	mov    %di,0x4a2(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d642:	83 f8 20             	cmp    $0x20,%eax
   1d645:	7e 09                	jle    1d650 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xcf0>
   1d647:	45 85 f6             	test   %r14d,%r14d
   1d64a:	0f 85 4c 0a 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d650:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1d652:	01 c0                	add    %eax,%eax
      k += sizes[i];
   1d654:	44 01 f7             	add    %r14d,%edi
      next_code[i] = code;
   1d657:	89 44 24 48          	mov    %eax,0x48(%rsp)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d65b:	c1 e6 0b             	shl    $0xb,%esi
      z->firstcode[i] = (stbi__uint16) code;
   1d65e:	66 89 83 40 04 00 00 	mov    %ax,0x440(%rbx)
      code = (code + sizes[i]);
   1d665:	44 01 e8             	add    %r13d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d668:	89 b3 68 04 00 00    	mov    %esi,0x468(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d66e:	66 89 bb a4 04 00 00 	mov    %di,0x4a4(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d675:	83 f8 40             	cmp    $0x40,%eax
   1d678:	7e 09                	jle    1d683 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xd23>
   1d67a:	45 85 ed             	test   %r13d,%r13d
   1d67d:	0f 85 19 0a 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d683:	89 c6                	mov    %eax,%esi
      k += sizes[i];
   1d685:	44 01 ef             	add    %r13d,%edi
      code <<= 1;
   1d688:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d68a:	c1 e6 0a             	shl    $0xa,%esi
      next_code[i] = code;
   1d68d:	89 44 24 4c          	mov    %eax,0x4c(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1d691:	66 89 83 42 04 00 00 	mov    %ax,0x442(%rbx)
      code = (code + sizes[i]);
   1d698:	44 01 d0             	add    %r10d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d69b:	89 b3 6c 04 00 00    	mov    %esi,0x46c(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d6a1:	66 89 bb a6 04 00 00 	mov    %di,0x4a6(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d6a8:	45 85 d2             	test   %r10d,%r10d
   1d6ab:	74 0b                	je     1d6b8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xd58>
   1d6ad:	3d 80 00 00 00       	cmp    $0x80,%eax
   1d6b2:	0f 8f e4 09 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d6b8:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1d6ba:	01 c0                	add    %eax,%eax
      k += sizes[i];
   1d6bc:	44 01 d7             	add    %r10d,%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d6bf:	c1 e6 09             	shl    $0x9,%esi
      next_code[i] = code;
   1d6c2:	89 44 24 50          	mov    %eax,0x50(%rsp)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d6c6:	89 b3 70 04 00 00    	mov    %esi,0x470(%rbx)
      code = (code + sizes[i]);
   1d6cc:	8b 74 24 08          	mov    0x8(%rsp),%esi
      z->firstcode[i] = (stbi__uint16) code;
   1d6d0:	66 89 83 44 04 00 00 	mov    %ax,0x444(%rbx)
      code = (code + sizes[i]);
   1d6d7:	01 f0                	add    %esi,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1d6d9:	66 89 bb a8 04 00 00 	mov    %di,0x4a8(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d6e0:	3d 00 01 00 00       	cmp    $0x100,%eax
   1d6e5:	7e 08                	jle    1d6ef <_ZL16stbi__parse_zlibP10stbi__zbufi+0xd8f>
   1d6e7:	85 f6                	test   %esi,%esi
   1d6e9:	0f 85 ad 09 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1d6ef:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d6f3:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1d6f5:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d6f7:	c1 e6 08             	shl    $0x8,%esi
      next_code[i] = code;
   1d6fa:	89 44 24 54          	mov    %eax,0x54(%rsp)
      k += sizes[i];
   1d6fe:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1d700:	8b 7c 24 10          	mov    0x10(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1d704:	66 89 83 46 04 00 00 	mov    %ax,0x446(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d70b:	89 b3 74 04 00 00    	mov    %esi,0x474(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d711:	66 89 8b aa 04 00 00 	mov    %cx,0x4aa(%rbx)
      code = (code + sizes[i]);
   1d718:	01 f8                	add    %edi,%eax
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d71a:	85 ff                	test   %edi,%edi
   1d71c:	74 0b                	je     1d729 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xdc9>
   1d71e:	3d 00 02 00 00       	cmp    $0x200,%eax
   1d723:	0f 8f 73 09 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1d729:	8b 7c 24 10          	mov    0x10(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d72d:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1d72f:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   1d731:	89 44 24 58          	mov    %eax,0x58(%rsp)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d735:	c1 e6 07             	shl    $0x7,%esi
      k += sizes[i];
   1d738:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1d73a:	8b 7c 24 18          	mov    0x18(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1d73e:	66 89 83 48 04 00 00 	mov    %ax,0x448(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d745:	89 b3 78 04 00 00    	mov    %esi,0x478(%rbx)
      code = (code + sizes[i]);
   1d74b:	01 f8                	add    %edi,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1d74d:	66 89 8b ac 04 00 00 	mov    %cx,0x4ac(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d754:	3d 00 04 00 00       	cmp    $0x400,%eax
   1d759:	7e 08                	jle    1d763 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xe03>
   1d75b:	85 ff                	test   %edi,%edi
   1d75d:	0f 85 39 09 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1d763:	8b 7c 24 18          	mov    0x18(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d767:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1d769:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   1d76b:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d76f:	c1 e6 06             	shl    $0x6,%esi
      k += sizes[i];
   1d772:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1d774:	8b 7c 24 20          	mov    0x20(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1d778:	66 89 83 4a 04 00 00 	mov    %ax,0x44a(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d77f:	89 b3 7c 04 00 00    	mov    %esi,0x47c(%rbx)
      code = (code + sizes[i]);
   1d785:	01 f8                	add    %edi,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1d787:	66 89 8b ae 04 00 00 	mov    %cx,0x4ae(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d78e:	3d 00 08 00 00       	cmp    $0x800,%eax
   1d793:	7e 08                	jle    1d79d <_ZL16stbi__parse_zlibP10stbi__zbufi+0xe3d>
   1d795:	85 ff                	test   %edi,%edi
   1d797:	0f 85 ff 08 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1d79d:	8b 7c 24 20          	mov    0x20(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d7a1:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1d7a3:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d7a5:	c1 e6 05             	shl    $0x5,%esi
      next_code[i] = code;
   1d7a8:	89 44 24 60          	mov    %eax,0x60(%rsp)
      k += sizes[i];
   1d7ac:	01 f9                	add    %edi,%ecx
      z->firstcode[i] = (stbi__uint16) code;
   1d7ae:	66 89 83 4c 04 00 00 	mov    %ax,0x44c(%rbx)
      code = (code + sizes[i]);
   1d7b5:	44 01 f8             	add    %r15d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d7b8:	89 b3 80 04 00 00    	mov    %esi,0x480(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d7be:	66 89 8b b0 04 00 00 	mov    %cx,0x4b0(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d7c5:	45 85 ff             	test   %r15d,%r15d
   1d7c8:	74 0b                	je     1d7d5 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xe75>
   1d7ca:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1d7cf:	0f 8f c7 08 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d7d5:	89 c6                	mov    %eax,%esi
      code = (code + sizes[i]);
   1d7d7:	8b 7c 24 24          	mov    0x24(%rsp),%edi
      code <<= 1;
   1d7db:	01 c0                	add    %eax,%eax
      k += sizes[i];
   1d7dd:	44 01 f9             	add    %r15d,%ecx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d7e0:	c1 e6 04             	shl    $0x4,%esi
      next_code[i] = code;
   1d7e3:	89 44 24 64          	mov    %eax,0x64(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1d7e7:	66 89 83 4e 04 00 00 	mov    %ax,0x44e(%rbx)
      code = (code + sizes[i]);
   1d7ee:	01 f8                	add    %edi,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d7f0:	89 b3 84 04 00 00    	mov    %esi,0x484(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d7f6:	66 89 8b b2 04 00 00 	mov    %cx,0x4b2(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d7fd:	85 ff                	test   %edi,%edi
   1d7ff:	74 0b                	je     1d80c <_ZL16stbi__parse_zlibP10stbi__zbufi+0xeac>
   1d801:	3d 00 20 00 00       	cmp    $0x2000,%eax
   1d806:	0f 8f 90 08 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1d80c:	8b 7c 24 24          	mov    0x24(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d810:	8d 34 c5 00 00 00 00 	lea    0x0(,%rax,8),%esi
      code <<= 1;
   1d817:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   1d819:	89 44 24 68          	mov    %eax,0x68(%rsp)
      k += sizes[i];
   1d81d:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1d81f:	8b 7c 24 28          	mov    0x28(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1d823:	66 89 83 50 04 00 00 	mov    %ax,0x450(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d82a:	89 b3 88 04 00 00    	mov    %esi,0x488(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d830:	66 89 8b b4 04 00 00 	mov    %cx,0x4b4(%rbx)
      code = (code + sizes[i]);
   1d837:	01 f8                	add    %edi,%eax
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d839:	85 ff                	test   %edi,%edi
   1d83b:	74 0b                	je     1d848 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xee8>
   1d83d:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1d842:	0f 8f 54 08 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1d848:	8b 7c 24 28          	mov    0x28(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d84c:	8d 34 85 00 00 00 00 	lea    0x0(,%rax,4),%esi
      code <<= 1;
   1d853:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   1d855:	89 44 24 6c          	mov    %eax,0x6c(%rsp)
      k += sizes[i];
   1d859:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1d85b:	8b 7c 24 2c          	mov    0x2c(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1d85f:	66 89 83 52 04 00 00 	mov    %ax,0x452(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d866:	89 b3 8c 04 00 00    	mov    %esi,0x48c(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1d86c:	66 89 8b b6 04 00 00 	mov    %cx,0x4b6(%rbx)
      code = (code + sizes[i]);
   1d873:	01 f8                	add    %edi,%eax
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1d875:	85 ff                	test   %edi,%edi
   1d877:	74 0b                	je     1d884 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xf24>
   1d879:	3d 00 80 00 00       	cmp    $0x8000,%eax
   1d87e:	0f 8f 18 08 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d884:	01 c0                	add    %eax,%eax
   z->maxcode[16] = 0x10000; // sentinel
   1d886:	31 f6                	xor    %esi,%esi
   1d888:	4c 8d 3d f1 aa 01 00 	lea    0x1aaf1(%rip),%r15        # 38380 <_ZL21stbi__zdefault_length>
   1d88f:	c7 83 94 04 00 00 00 	movl   $0x10000,0x494(%rbx)
   1d896:	00 01 00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1d899:	89 83 90 04 00 00    	mov    %eax,0x490(%rbx)
   for (i=0; i < num; ++i) {
   1d89f:	eb 19                	jmp    1d8ba <_ZL16stbi__parse_zlibP10stbi__zbufi+0xf5a>
         ++next_code[s];
   1d8a1:	83 c7 01             	add    $0x1,%edi
   1d8a4:	42 89 7c 84 30       	mov    %edi,0x30(%rsp,%r8,4)
   for (i=0; i < num; ++i) {
   1d8a9:	48 83 c6 01          	add    $0x1,%rsi
   1d8ad:	48 81 fe 20 01 00 00 	cmp    $0x120,%rsi
   1d8b4:	0f 84 db 00 00 00    	je     1d995 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1035>
      int s = sizelist[i];
   1d8ba:	45 0f b6 2c 37       	movzbl (%r15,%rsi,1),%r13d
   1d8bf:	44 89 e9             	mov    %r13d,%ecx
      if (s) {
   1d8c2:	45 85 ed             	test   %r13d,%r13d
   1d8c5:	74 e2                	je     1d8a9 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xf49>
         int c = next_code[s] - z->firstcode[s] + z->firstsymbol[s];
   1d8c7:	4d 63 c5             	movslq %r13d,%r8
   1d8ca:	46 0f b7 8c 43 34 04 	movzwl 0x434(%rbx,%r8,2),%r9d
   1d8d1:	00 00 
   1d8d3:	42 8b 7c 84 30       	mov    0x30(%rsp,%r8,4),%edi
   1d8d8:	89 f8                	mov    %edi,%eax
   1d8da:	44 29 c8             	sub    %r9d,%eax
   1d8dd:	46 0f b7 8c 43 98 04 	movzwl 0x498(%rbx,%r8,2),%r9d
   1d8e4:	00 00 
   1d8e6:	44 01 c8             	add    %r9d,%eax
         z->size [c] = (stbi_uc     ) s;
   1d8e9:	48 98                	cltq
   1d8eb:	44 88 ac 03 b8 04 00 	mov    %r13b,0x4b8(%rbx,%rax,1)
   1d8f2:	00 
         z->value[c] = (stbi__uint16) i;
   1d8f3:	66 89 b4 43 d8 05 00 	mov    %si,0x5d8(%rbx,%rax,2)
   1d8fa:	00 
         if (s <= STBI__ZFAST_BITS) {
   1d8fb:	41 83 fd 09          	cmp    $0x9,%r13d
   1d8ff:	7f a0                	jg     1d8a1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xf41>
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1d901:	41 89 f9             	mov    %edi,%r9d
   1d904:	8d 04 3f             	lea    (%rdi,%rdi,1),%eax
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   1d907:	45 89 ea             	mov    %r13d,%r10d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1d90a:	41 d1 f9             	sar    %r9d
   1d90d:	25 aa aa 00 00       	and    $0xaaaa,%eax
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   1d912:	41 c1 e2 09          	shl    $0x9,%r10d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1d916:	41 81 e1 55 55 00 00 	and    $0x5555,%r9d
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   1d91d:	41 09 f2             	or     %esi,%r10d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1d920:	41 09 c1             	or     %eax,%r9d
  n = ((n & 0xCCCC) >>  2) | ((n & 0x3333) << 2);
   1d923:	44 89 c8             	mov    %r9d,%eax
   1d926:	41 c1 e1 02          	shl    $0x2,%r9d
   1d92a:	c1 f8 02             	sar    $0x2,%eax
   1d92d:	41 81 e1 cc cc 00 00 	and    $0xcccc,%r9d
   1d934:	25 33 33 00 00       	and    $0x3333,%eax
   1d939:	44 09 c8             	or     %r9d,%eax
  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);
   1d93c:	41 89 c1             	mov    %eax,%r9d
   1d93f:	c1 e0 04             	shl    $0x4,%eax
   1d942:	41 c1 f9 04          	sar    $0x4,%r9d
   1d946:	25 f0 f0 00 00       	and    $0xf0f0,%eax
   1d94b:	41 81 e1 0f 0f 00 00 	and    $0xf0f,%r9d
   1d952:	41 09 c1             	or     %eax,%r9d
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1d955:	44 89 c8             	mov    %r9d,%eax
   1d958:	41 c1 e1 08          	shl    $0x8,%r9d
   1d95c:	45 0f b7 f1          	movzwl %r9w,%r14d
               j += (1 << s);
   1d960:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1d966:	c1 f8 08             	sar    $0x8,%eax
               j += (1 << s);
   1d969:	41 d3 e1             	shl    %cl,%r9d
   return stbi__bitreverse16(v) >> (16-bits);
   1d96c:	b9 10 00 00 00       	mov    $0x10,%ecx
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1d971:	44 09 f0             	or     %r14d,%eax
   return stbi__bitreverse16(v) >> (16-bits);
   1d974:	44 29 e9             	sub    %r13d,%ecx
   1d977:	4d 63 c9             	movslq %r9d,%r9
   1d97a:	d3 f8                	sar    %cl,%eax
   1d97c:	48 98                	cltq
   1d97e:	66 90                	xchg   %ax,%ax
               z->fast[j] = fastv;
   1d980:	66 44 89 54 43 34    	mov    %r10w,0x34(%rbx,%rax,2)
            while (j < (1 << STBI__ZFAST_BITS)) {
   1d986:	4c 01 c8             	add    %r9,%rax
   1d989:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1d98e:	7e f0                	jle    1d980 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1020>
   1d990:	e9 0c ff ff ff       	jmp    1d8a1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xf41>
   memset(sizes, 0, sizeof(sizes));
   1d995:	66 0f ef c0          	pxor   %xmm0,%xmm0
   memset(z->fast, 0, sizeof(z->fast));
   1d999:	48 8d b3 18 08 00 00 	lea    0x818(%rbx),%rsi
   1d9a0:	31 c0                	xor    %eax,%eax
   1d9a2:	b9 80 00 00 00       	mov    $0x80,%ecx
   1d9a7:	48 89 f7             	mov    %rsi,%rdi
   memset(sizes, 0, sizeof(sizes));
   1d9aa:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
   1d9b1:	00 
   memset(z->fast, 0, sizeof(z->fast));
   1d9b2:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1d9b5:	48 8d 05 a5 a9 01 00 	lea    0x1a9a5(%rip),%rax        # 38361 <_ZL23stbi__zdefault_distance+0x1>
   memset(sizes, 0, sizeof(sizes));
   1d9bc:	c7 84 24 b0 00 00 00 	movl   $0x0,0xb0(%rsp)
   1d9c3:	00 00 00 00 
      ++sizes[sizelist[i]];
   1d9c7:	c7 84 24 84 00 00 00 	movl   $0x1,0x84(%rsp)
   1d9ce:	01 00 00 00 
   for (i=0; i < num; ++i)
   1d9d2:	48 8d 70 1f          	lea    0x1f(%rax),%rsi
   memset(sizes, 0, sizeof(sizes));
   1d9d6:	0f 29 44 24 70       	movaps %xmm0,0x70(%rsp)
   1d9db:	0f 29 84 24 90 00 00 	movaps %xmm0,0x90(%rsp)
   1d9e2:	00 
   1d9e3:	0f 29 84 24 a0 00 00 	movaps %xmm0,0xa0(%rsp)
   1d9ea:	00 
   1d9eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      ++sizes[sizelist[i]];
   1d9f0:	0f b6 08             	movzbl (%rax),%ecx
   for (i=0; i < num; ++i)
   1d9f3:	48 83 c0 01          	add    $0x1,%rax
      ++sizes[sizelist[i]];
   1d9f7:	83 44 8c 70 01       	addl   $0x1,0x70(%rsp,%rcx,4)
   for (i=0; i < num; ++i)
   1d9fc:	48 39 c6             	cmp    %rax,%rsi
   1d9ff:	75 ef                	jne    1d9f0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1090>
      if (sizes[i] > (1 << i))
   1da01:	8b 74 24 74          	mov    0x74(%rsp),%esi
   sizes[0] = 0;
   1da05:	c7 44 24 70 00 00 00 	movl   $0x0,0x70(%rsp)
   1da0c:	00 
      if (sizes[i] > (1 << i))
   1da0d:	83 fe 02             	cmp    $0x2,%esi
   1da10:	0f 8f 42 05 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1da16:	44 8b 44 24 78       	mov    0x78(%rsp),%r8d
   1da1b:	41 83 f8 04          	cmp    $0x4,%r8d
   1da1f:	0f 8f 33 05 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1da25:	8b 7c 24 7c          	mov    0x7c(%rsp),%edi
   1da29:	83 ff 08             	cmp    $0x8,%edi
   1da2c:	0f 8f 26 05 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1da32:	44 8b b4 24 80 00 00 	mov    0x80(%rsp),%r14d
   1da39:	00 
   1da3a:	41 83 fe 10          	cmp    $0x10,%r14d
   1da3e:	0f 8f 14 05 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1da44:	44 8b ac 24 84 00 00 	mov    0x84(%rsp),%r13d
   1da4b:	00 
   1da4c:	41 83 fd 20          	cmp    $0x20,%r13d
   1da50:	0f 8f 02 05 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1da56:	44 8b 94 24 88 00 00 	mov    0x88(%rsp),%r10d
   1da5d:	00 
   1da5e:	41 83 fa 40          	cmp    $0x40,%r10d
   1da62:	0f 8f f0 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1da68:	44 8b 8c 24 8c 00 00 	mov    0x8c(%rsp),%r9d
   1da6f:	00 
   1da70:	41 81 f9 80 00 00 00 	cmp    $0x80,%r9d
   1da77:	0f 8f db 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1da7d:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   1da84:	89 44 24 08          	mov    %eax,0x8(%rsp)
   1da88:	3d 00 01 00 00       	cmp    $0x100,%eax
   1da8d:	0f 8f c5 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1da93:	8b 84 24 94 00 00 00 	mov    0x94(%rsp),%eax
   1da9a:	89 44 24 10          	mov    %eax,0x10(%rsp)
   1da9e:	3d 00 02 00 00       	cmp    $0x200,%eax
   1daa3:	0f 8f af 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1daa9:	8b 84 24 98 00 00 00 	mov    0x98(%rsp),%eax
   1dab0:	89 44 24 18          	mov    %eax,0x18(%rsp)
   1dab4:	3d 00 04 00 00       	cmp    $0x400,%eax
   1dab9:	0f 8f 99 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1dabf:	44 8b bc 24 9c 00 00 	mov    0x9c(%rsp),%r15d
   1dac6:	00 
   1dac7:	41 81 ff 00 08 00 00 	cmp    $0x800,%r15d
   1dace:	0f 8f 84 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1dad4:	8b 84 24 a0 00 00 00 	mov    0xa0(%rsp),%eax
   1dadb:	89 44 24 20          	mov    %eax,0x20(%rsp)
   1dadf:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1dae4:	0f 8f 6e 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1daea:	8b 84 24 a4 00 00 00 	mov    0xa4(%rsp),%eax
   1daf1:	89 44 24 24          	mov    %eax,0x24(%rsp)
   1daf5:	3d 00 20 00 00       	cmp    $0x2000,%eax
   1dafa:	0f 8f 58 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1db00:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
   1db07:	89 44 24 28          	mov    %eax,0x28(%rsp)
   1db0b:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1db10:	0f 8f 42 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
   1db16:	8b 84 24 ac 00 00 00 	mov    0xac(%rsp),%eax
   1db1d:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
   1db21:	3d 00 80 00 00       	cmp    $0x8000,%eax
   1db26:	0f 8f 2c 04 00 00    	jg     1df58 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15f8>
      z->firstsymbol[i] = (stbi__uint16) k;
   1db2c:	31 c0                	xor    %eax,%eax
      z->firstcode[i] = (stbi__uint16) code;
   1db2e:	31 c9                	xor    %ecx,%ecx
      next_code[i] = code;
   1db30:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%rsp)
   1db37:	00 
      z->firstsymbol[i] = (stbi__uint16) k;
   1db38:	66 89 83 7e 0c 00 00 	mov    %ax,0xc7e(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1db3f:	89 f0                	mov    %esi,%eax
   1db41:	c1 e0 0f             	shl    $0xf,%eax
      z->firstcode[i] = (stbi__uint16) code;
   1db44:	66 89 8b 1a 0c 00 00 	mov    %cx,0xc1a(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1db4b:	89 83 3c 0c 00 00    	mov    %eax,0xc3c(%rbx)
      code <<= 1;
   1db51:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
      next_code[i] = code;
   1db54:	89 44 24 38          	mov    %eax,0x38(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1db58:	66 89 83 1c 0c 00 00 	mov    %ax,0xc1c(%rbx)
      code = (code + sizes[i]);
   1db5f:	44 01 c0             	add    %r8d,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1db62:	66 89 b3 80 0c 00 00 	mov    %si,0xc80(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1db69:	45 85 c0             	test   %r8d,%r8d
   1db6c:	74 09                	je     1db77 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1217>
   1db6e:	83 f8 04             	cmp    $0x4,%eax
   1db71:	0f 8f 25 05 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1db77:	89 c1                	mov    %eax,%ecx
      k += sizes[i];
   1db79:	41 01 f0             	add    %esi,%r8d
      code <<= 1;
   1db7c:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1db7e:	c1 e1 0e             	shl    $0xe,%ecx
      next_code[i] = code;
   1db81:	89 44 24 3c          	mov    %eax,0x3c(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1db85:	66 89 83 1e 0c 00 00 	mov    %ax,0xc1e(%rbx)
      code = (code + sizes[i]);
   1db8c:	01 f8                	add    %edi,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1db8e:	89 8b 40 0c 00 00    	mov    %ecx,0xc40(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1db94:	66 44 89 83 82 0c 00 	mov    %r8w,0xc82(%rbx)
   1db9b:	00 
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1db9c:	85 ff                	test   %edi,%edi
   1db9e:	74 09                	je     1dba9 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1249>
   1dba0:	83 f8 08             	cmp    $0x8,%eax
   1dba3:	0f 8f f3 04 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dba9:	89 c6                	mov    %eax,%esi
      k += sizes[i];
   1dbab:	44 01 c7             	add    %r8d,%edi
      code <<= 1;
   1dbae:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dbb0:	c1 e6 0d             	shl    $0xd,%esi
      next_code[i] = code;
   1dbb3:	89 44 24 40          	mov    %eax,0x40(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1dbb7:	66 89 83 20 0c 00 00 	mov    %ax,0xc20(%rbx)
      code = (code + sizes[i]);
   1dbbe:	44 01 f0             	add    %r14d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dbc1:	89 b3 44 0c 00 00    	mov    %esi,0xc44(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1dbc7:	66 89 bb 84 0c 00 00 	mov    %di,0xc84(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1dbce:	45 85 f6             	test   %r14d,%r14d
   1dbd1:	74 09                	je     1dbdc <_ZL16stbi__parse_zlibP10stbi__zbufi+0x127c>
   1dbd3:	83 f8 10             	cmp    $0x10,%eax
   1dbd6:	0f 8f c0 04 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dbdc:	89 c6                	mov    %eax,%esi
      k += sizes[i];
   1dbde:	44 01 f7             	add    %r14d,%edi
      code <<= 1;
   1dbe1:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dbe3:	c1 e6 0c             	shl    $0xc,%esi
      next_code[i] = code;
   1dbe6:	89 44 24 44          	mov    %eax,0x44(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1dbea:	66 89 83 22 0c 00 00 	mov    %ax,0xc22(%rbx)
      code = (code + sizes[i]);
   1dbf1:	44 01 e8             	add    %r13d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dbf4:	89 b3 48 0c 00 00    	mov    %esi,0xc48(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1dbfa:	66 89 bb 86 0c 00 00 	mov    %di,0xc86(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1dc01:	45 85 ed             	test   %r13d,%r13d
   1dc04:	74 09                	je     1dc0f <_ZL16stbi__parse_zlibP10stbi__zbufi+0x12af>
   1dc06:	83 f8 20             	cmp    $0x20,%eax
   1dc09:	0f 8f 8d 04 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dc0f:	89 c6                	mov    %eax,%esi
      k += sizes[i];
   1dc11:	44 01 ef             	add    %r13d,%edi
      code <<= 1;
   1dc14:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dc16:	c1 e6 0b             	shl    $0xb,%esi
      next_code[i] = code;
   1dc19:	89 44 24 48          	mov    %eax,0x48(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1dc1d:	66 89 83 24 0c 00 00 	mov    %ax,0xc24(%rbx)
      code = (code + sizes[i]);
   1dc24:	44 01 d0             	add    %r10d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dc27:	89 b3 4c 0c 00 00    	mov    %esi,0xc4c(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1dc2d:	66 89 bb 88 0c 00 00 	mov    %di,0xc88(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1dc34:	45 85 d2             	test   %r10d,%r10d
   1dc37:	74 09                	je     1dc42 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x12e2>
   1dc39:	83 f8 40             	cmp    $0x40,%eax
   1dc3c:	0f 8f 5a 04 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dc42:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1dc44:	01 c0                	add    %eax,%eax
      k += sizes[i];
   1dc46:	44 01 d7             	add    %r10d,%edi
      next_code[i] = code;
   1dc49:	89 44 24 4c          	mov    %eax,0x4c(%rsp)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dc4d:	c1 e6 0a             	shl    $0xa,%esi
      z->firstcode[i] = (stbi__uint16) code;
   1dc50:	66 89 83 26 0c 00 00 	mov    %ax,0xc26(%rbx)
      code = (code + sizes[i]);
   1dc57:	44 01 c8             	add    %r9d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dc5a:	89 b3 50 0c 00 00    	mov    %esi,0xc50(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1dc60:	66 89 bb 8a 0c 00 00 	mov    %di,0xc8a(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1dc67:	3d 80 00 00 00       	cmp    $0x80,%eax
   1dc6c:	7e 09                	jle    1dc77 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1317>
   1dc6e:	45 85 c9             	test   %r9d,%r9d
   1dc71:	0f 85 25 04 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dc77:	89 c6                	mov    %eax,%esi
      k += sizes[i];
   1dc79:	44 01 cf             	add    %r9d,%edi
      code <<= 1;
   1dc7c:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dc7e:	c1 e6 09             	shl    $0x9,%esi
      next_code[i] = code;
   1dc81:	89 44 24 50          	mov    %eax,0x50(%rsp)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dc85:	89 b3 54 0c 00 00    	mov    %esi,0xc54(%rbx)
      code = (code + sizes[i]);
   1dc8b:	8b 74 24 08          	mov    0x8(%rsp),%esi
      z->firstcode[i] = (stbi__uint16) code;
   1dc8f:	66 89 83 28 0c 00 00 	mov    %ax,0xc28(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1dc96:	66 89 bb 8c 0c 00 00 	mov    %di,0xc8c(%rbx)
      code = (code + sizes[i]);
   1dc9d:	01 f0                	add    %esi,%eax
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1dc9f:	85 f6                	test   %esi,%esi
   1dca1:	74 0b                	je     1dcae <_ZL16stbi__parse_zlibP10stbi__zbufi+0x134e>
   1dca3:	3d 00 01 00 00       	cmp    $0x100,%eax
   1dca8:	0f 8f ee 03 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1dcae:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dcb2:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1dcb4:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dcb6:	c1 e6 08             	shl    $0x8,%esi
      next_code[i] = code;
   1dcb9:	89 44 24 54          	mov    %eax,0x54(%rsp)
      k += sizes[i];
   1dcbd:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1dcbf:	8b 7c 24 10          	mov    0x10(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1dcc3:	66 89 83 2a 0c 00 00 	mov    %ax,0xc2a(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dcca:	89 b3 58 0c 00 00    	mov    %esi,0xc58(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1dcd0:	66 89 8b 8e 0c 00 00 	mov    %cx,0xc8e(%rbx)
      code = (code + sizes[i]);
   1dcd7:	01 f8                	add    %edi,%eax
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1dcd9:	85 ff                	test   %edi,%edi
   1dcdb:	74 0b                	je     1dce8 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1388>
   1dcdd:	3d 00 02 00 00       	cmp    $0x200,%eax
   1dce2:	0f 8f b4 03 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1dce8:	8b 7c 24 10          	mov    0x10(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dcec:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1dcee:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dcf0:	c1 e6 07             	shl    $0x7,%esi
      next_code[i] = code;
   1dcf3:	89 44 24 58          	mov    %eax,0x58(%rsp)
      k += sizes[i];
   1dcf7:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1dcf9:	8b 7c 24 18          	mov    0x18(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1dcfd:	66 89 83 2c 0c 00 00 	mov    %ax,0xc2c(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dd04:	89 b3 5c 0c 00 00    	mov    %esi,0xc5c(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1dd0a:	66 89 8b 90 0c 00 00 	mov    %cx,0xc90(%rbx)
      code = (code + sizes[i]);
   1dd11:	01 f8                	add    %edi,%eax
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1dd13:	85 ff                	test   %edi,%edi
   1dd15:	74 0b                	je     1dd22 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x13c2>
   1dd17:	3d 00 04 00 00       	cmp    $0x400,%eax
   1dd1c:	0f 8f 7a 03 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1dd22:	8b 7c 24 18          	mov    0x18(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dd26:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1dd28:	01 c0                	add    %eax,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dd2a:	c1 e6 06             	shl    $0x6,%esi
      next_code[i] = code;
   1dd2d:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
      k += sizes[i];
   1dd31:	01 f9                	add    %edi,%ecx
      z->firstcode[i] = (stbi__uint16) code;
   1dd33:	66 89 83 2e 0c 00 00 	mov    %ax,0xc2e(%rbx)
      code = (code + sizes[i]);
   1dd3a:	44 01 f8             	add    %r15d,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dd3d:	89 b3 60 0c 00 00    	mov    %esi,0xc60(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1dd43:	66 89 8b 92 0c 00 00 	mov    %cx,0xc92(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1dd4a:	45 85 ff             	test   %r15d,%r15d
   1dd4d:	74 0b                	je     1dd5a <_ZL16stbi__parse_zlibP10stbi__zbufi+0x13fa>
   1dd4f:	3d 00 08 00 00       	cmp    $0x800,%eax
   1dd54:	0f 8f 42 03 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dd5a:	89 c6                	mov    %eax,%esi
      code = (code + sizes[i]);
   1dd5c:	8b 7c 24 20          	mov    0x20(%rsp),%edi
      code <<= 1;
   1dd60:	01 c0                	add    %eax,%eax
      k += sizes[i];
   1dd62:	44 01 f9             	add    %r15d,%ecx
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dd65:	c1 e6 05             	shl    $0x5,%esi
      next_code[i] = code;
   1dd68:	89 44 24 60          	mov    %eax,0x60(%rsp)
      z->firstcode[i] = (stbi__uint16) code;
   1dd6c:	66 89 83 30 0c 00 00 	mov    %ax,0xc30(%rbx)
      code = (code + sizes[i]);
   1dd73:	01 f8                	add    %edi,%eax
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dd75:	89 b3 64 0c 00 00    	mov    %esi,0xc64(%rbx)
      z->firstsymbol[i] = (stbi__uint16) k;
   1dd7b:	66 89 8b 94 0c 00 00 	mov    %cx,0xc94(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1dd82:	85 ff                	test   %edi,%edi
   1dd84:	74 0b                	je     1dd91 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1431>
   1dd86:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1dd8b:	0f 8f 0b 03 00 00    	jg     1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1dd91:	8b 7c 24 20          	mov    0x20(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dd95:	89 c6                	mov    %eax,%esi
      code <<= 1;
   1dd97:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   1dd99:	89 44 24 64          	mov    %eax,0x64(%rsp)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dd9d:	c1 e6 04             	shl    $0x4,%esi
      k += sizes[i];
   1dda0:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1dda2:	8b 7c 24 24          	mov    0x24(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1dda6:	66 89 83 32 0c 00 00 	mov    %ax,0xc32(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1ddad:	89 b3 68 0c 00 00    	mov    %esi,0xc68(%rbx)
      code = (code + sizes[i]);
   1ddb3:	01 f8                	add    %edi,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1ddb5:	66 89 8b 96 0c 00 00 	mov    %cx,0xc96(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1ddbc:	3d 00 20 00 00       	cmp    $0x2000,%eax
   1ddc1:	7e 08                	jle    1ddcb <_ZL16stbi__parse_zlibP10stbi__zbufi+0x146b>
   1ddc3:	85 ff                	test   %edi,%edi
   1ddc5:	0f 85 d1 02 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1ddcb:	8b 7c 24 24          	mov    0x24(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1ddcf:	8d 34 c5 00 00 00 00 	lea    0x0(,%rax,8),%esi
      code <<= 1;
   1ddd6:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   1ddd8:	89 44 24 68          	mov    %eax,0x68(%rsp)
      k += sizes[i];
   1dddc:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1ddde:	8b 7c 24 28          	mov    0x28(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1dde2:	66 89 83 34 0c 00 00 	mov    %ax,0xc34(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1dde9:	89 b3 6c 0c 00 00    	mov    %esi,0xc6c(%rbx)
      code = (code + sizes[i]);
   1ddef:	01 f8                	add    %edi,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1ddf1:	66 89 8b 98 0c 00 00 	mov    %cx,0xc98(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1ddf8:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1ddfd:	7e 08                	jle    1de07 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x14a7>
   1ddff:	85 ff                	test   %edi,%edi
   1de01:	0f 85 95 02 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      k += sizes[i];
   1de07:	8b 7c 24 28          	mov    0x28(%rsp),%edi
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1de0b:	8d 34 85 00 00 00 00 	lea    0x0(,%rax,4),%esi
      code <<= 1;
   1de12:	01 c0                	add    %eax,%eax
      next_code[i] = code;
   1de14:	89 44 24 6c          	mov    %eax,0x6c(%rsp)
      k += sizes[i];
   1de18:	01 f9                	add    %edi,%ecx
      code = (code + sizes[i]);
   1de1a:	8b 7c 24 2c          	mov    0x2c(%rsp),%edi
      z->firstcode[i] = (stbi__uint16) code;
   1de1e:	66 89 83 36 0c 00 00 	mov    %ax,0xc36(%rbx)
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1de25:	89 b3 70 0c 00 00    	mov    %esi,0xc70(%rbx)
      code = (code + sizes[i]);
   1de2b:	01 f8                	add    %edi,%eax
      z->firstsymbol[i] = (stbi__uint16) k;
   1de2d:	66 89 8b 9a 0c 00 00 	mov    %cx,0xc9a(%rbx)
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths","Corrupt PNG");
   1de34:	3d 00 80 00 00       	cmp    $0x8000,%eax
   1de39:	7e 08                	jle    1de43 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x14e3>
   1de3b:	85 ff                	test   %edi,%edi
   1de3d:	0f 85 59 02 00 00    	jne    1e09c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x173c>
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1de43:	01 c0                	add    %eax,%eax
   z->maxcode[16] = 0x10000; // sentinel
   1de45:	31 f6                	xor    %esi,%esi
   1de47:	4c 8d 3d 12 a5 01 00 	lea    0x1a512(%rip),%r15        # 38360 <_ZL23stbi__zdefault_distance>
   1de4e:	c7 83 78 0c 00 00 00 	movl   $0x10000,0xc78(%rbx)
   1de55:	00 01 00 
      z->maxcode[i] = code << (16-i); // preshift for inner loop
   1de58:	89 83 74 0c 00 00    	mov    %eax,0xc74(%rbx)
   for (i=0; i < num; ++i) {
   1de5e:	eb 16                	jmp    1de76 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1516>
         ++next_code[s];
   1de60:	83 c7 01             	add    $0x1,%edi
   1de63:	42 89 7c 84 30       	mov    %edi,0x30(%rsp,%r8,4)
   for (i=0; i < num; ++i) {
   1de68:	48 83 c6 01          	add    $0x1,%rsi
   1de6c:	48 83 fe 20          	cmp    $0x20,%rsi
   1de70:	0f 84 90 eb ff ff    	je     1ca06 <_ZL16stbi__parse_zlibP10stbi__zbufi+0xa6>
      int s = sizelist[i];
   1de76:	45 0f b6 2c 37       	movzbl (%r15,%rsi,1),%r13d
   1de7b:	44 89 e9             	mov    %r13d,%ecx
      if (s) {
   1de7e:	45 85 ed             	test   %r13d,%r13d
   1de81:	74 e5                	je     1de68 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1508>
         int c = next_code[s] - z->firstcode[s] + z->firstsymbol[s];
   1de83:	4d 63 c5             	movslq %r13d,%r8
   1de86:	46 0f b7 8c 43 18 0c 	movzwl 0xc18(%rbx,%r8,2),%r9d
   1de8d:	00 00 
   1de8f:	42 8b 7c 84 30       	mov    0x30(%rsp,%r8,4),%edi
   1de94:	89 f8                	mov    %edi,%eax
   1de96:	44 29 c8             	sub    %r9d,%eax
   1de99:	46 0f b7 8c 43 7c 0c 	movzwl 0xc7c(%rbx,%r8,2),%r9d
   1dea0:	00 00 
   1dea2:	44 01 c8             	add    %r9d,%eax
         z->size [c] = (stbi_uc     ) s;
   1dea5:	48 98                	cltq
   1dea7:	44 88 ac 03 9c 0c 00 	mov    %r13b,0xc9c(%rbx,%rax,1)
   1deae:	00 
         z->value[c] = (stbi__uint16) i;
   1deaf:	66 89 b4 43 bc 0d 00 	mov    %si,0xdbc(%rbx,%rax,2)
   1deb6:	00 
         if (s <= STBI__ZFAST_BITS) {
   1deb7:	41 83 fd 09          	cmp    $0x9,%r13d
   1debb:	7f a3                	jg     1de60 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1500>
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1debd:	41 89 f9             	mov    %edi,%r9d
   1dec0:	8d 04 3f             	lea    (%rdi,%rdi,1),%eax
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   1dec3:	45 89 ea             	mov    %r13d,%r10d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1dec6:	41 d1 f9             	sar    %r9d
   1dec9:	25 aa aa 00 00       	and    $0xaaaa,%eax
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   1dece:	41 c1 e2 09          	shl    $0x9,%r10d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1ded2:	41 81 e1 55 55 00 00 	and    $0x5555,%r9d
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
   1ded9:	41 09 f2             	or     %esi,%r10d
  n = ((n & 0xAAAA) >>  1) | ((n & 0x5555) << 1);
   1dedc:	41 09 c1             	or     %eax,%r9d
  n = ((n & 0xCCCC) >>  2) | ((n & 0x3333) << 2);
   1dedf:	44 89 c8             	mov    %r9d,%eax
   1dee2:	41 c1 e1 02          	shl    $0x2,%r9d
   1dee6:	c1 f8 02             	sar    $0x2,%eax
   1dee9:	41 81 e1 cc cc 00 00 	and    $0xcccc,%r9d
   1def0:	25 33 33 00 00       	and    $0x3333,%eax
   1def5:	44 09 c8             	or     %r9d,%eax
  n = ((n & 0xF0F0) >>  4) | ((n & 0x0F0F) << 4);
   1def8:	41 89 c1             	mov    %eax,%r9d
   1defb:	c1 e0 04             	shl    $0x4,%eax
   1defe:	41 c1 f9 04          	sar    $0x4,%r9d
   1df02:	25 f0 f0 00 00       	and    $0xf0f0,%eax
   1df07:	41 81 e1 0f 0f 00 00 	and    $0xf0f,%r9d
   1df0e:	41 09 c1             	or     %eax,%r9d
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1df11:	44 89 c8             	mov    %r9d,%eax
   1df14:	41 c1 e1 08          	shl    $0x8,%r9d
   1df18:	45 0f b7 f1          	movzwl %r9w,%r14d
               j += (1 << s);
   1df1c:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1df22:	c1 f8 08             	sar    $0x8,%eax
               j += (1 << s);
   1df25:	41 d3 e1             	shl    %cl,%r9d
   return stbi__bitreverse16(v) >> (16-bits);
   1df28:	b9 10 00 00 00       	mov    $0x10,%ecx
  n = ((n & 0xFF00) >>  8) | ((n & 0x00FF) << 8);
   1df2d:	44 09 f0             	or     %r14d,%eax
   return stbi__bitreverse16(v) >> (16-bits);
   1df30:	44 29 e9             	sub    %r13d,%ecx
   1df33:	4d 63 c9             	movslq %r9d,%r9
   1df36:	d3 f8                	sar    %cl,%eax
   1df38:	48 98                	cltq
   1df3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
               z->fast[j] = fastv;
   1df40:	66 44 89 94 43 18 08 	mov    %r10w,0x818(%rbx,%rax,2)
   1df47:	00 00 
            while (j < (1 << STBI__ZFAST_BITS)) {
   1df49:	4c 01 c8             	add    %r9,%rax
   1df4c:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1df51:	7e ed                	jle    1df40 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x15e0>
   1df53:	e9 08 ff ff ff       	jmp    1de60 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1500>
   stbi__g_failure_reason = str;
   1df58:	48 8d 05 ef 9a 01 00 	lea    0x19aef(%rip),%rax        # 37a4e <_ZSt19piecewise_construct+0x107>
   1df5f:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1df66:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1df68:	31 c0                	xor    %eax,%eax
   1df6a:	e9 2c 02 00 00       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
            a->zout = zout;
   1df6f:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
   } while (!final);
   1df73:	45 85 e4             	test   %r12d,%r12d
   1df76:	0f 85 1a 02 00 00    	jne    1e196 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1836>
   if (z->num_bits < n) stbi__fill_bits(z);
   1df7c:	8b 4b 10             	mov    0x10(%rbx),%ecx
      if (z->code_buffer >= (1U << z->num_bits)) {
   1df7f:	8b 43 14             	mov    0x14(%rbx),%eax
   1df82:	e9 19 ea ff ff       	jmp    1c9a0 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x40>
   stbi__g_failure_reason = str;
   1df87:	48 8d 05 92 9b 01 00 	lea    0x19b92(%rip),%rax        # 37b20 <_ZSt19piecewise_construct+0x1d9>
   1df8e:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1df95:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1df97:	31 c0                	xor    %eax,%eax
   1df99:	e9 fd 01 00 00       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1df9e:	48 8d 70 01          	lea    0x1(%rax),%rsi
      header[k++] = stbi__zget8(a);
   1dfa2:	4c 63 c2             	movslq %edx,%r8
   1dfa5:	8d 4a 01             	lea    0x1(%rdx),%ecx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1dfa8:	48 89 33             	mov    %rsi,(%rbx)
   1dfab:	44 0f b6 08          	movzbl (%rax),%r9d
      header[k++] = stbi__zget8(a);
   1dfaf:	46 88 4c 04 70       	mov    %r9b,0x70(%rsp,%r8,1)
   while (k < 4)
   1dfb4:	83 fa 03             	cmp    $0x3,%edx
   1dfb7:	0f 84 24 f3 ff ff    	je     1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1dfbd:	48 39 fe             	cmp    %rdi,%rsi
   1dfc0:	72 5e                	jb     1e020 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x16c0>
      header[k++] = stbi__zget8(a);
   1dfc2:	48 63 c9             	movslq %ecx,%rcx
   1dfc5:	8d 42 02             	lea    0x2(%rdx),%eax
   1dfc8:	c6 44 0c 70 00       	movb   $0x0,0x70(%rsp,%rcx,1)
   while (k < 4)
   1dfcd:	83 fa 02             	cmp    $0x2,%edx
   1dfd0:	0f 85 eb f2 ff ff    	jne    1d2c1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x961>
   1dfd6:	e9 06 f3 ff ff       	jmp    1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
   1dfdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (z->num_bits < n) stbi__fill_bits(z);
   1dfe0:	44 39 c2             	cmp    %r8d,%edx
   1dfe3:	0f 8c c4 01 00 00    	jl     1e1ad <_ZL16stbi__parse_zlibP10stbi__zbufi+0x184d>
   z->code_buffer >>= n;
   1dfe9:	44 89 c1             	mov    %r8d,%ecx
   z->num_bits -= n;
   1dfec:	44 29 c2             	sub    %r8d,%edx
   z->code_buffer >>= n;
   1dfef:	d3 ee                	shr    %cl,%esi
   z->num_bits -= n;
   1dff1:	89 53 10             	mov    %edx,0x10(%rbx)
   z->code_buffer >>= n;
   1dff4:	89 73 14             	mov    %esi,0x14(%rbx)
   while (a->num_bits > 0) {
   1dff7:	85 d2                	test   %edx,%edx
   1dff9:	0f 8f 47 f2 ff ff    	jg     1d246 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x8e6>
   if (a->num_bits < 0) return stbi__err("zlib corrupt","Corrupt PNG");
   1dfff:	0f 85 0a f3 ff ff    	jne    1d30f <_ZL16stbi__parse_zlibP10stbi__zbufi+0x9af>
   return (z->zbuffer >= z->zbuffer_end);
   1e005:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
   1e009:	48 8b 03             	mov    (%rbx),%rax
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1e00c:	48 39 f8             	cmp    %rdi,%rax
   1e00f:	72 8d                	jb     1df9e <_ZL16stbi__parse_zlibP10stbi__zbufi+0x163e>
      header[k++] = stbi__zget8(a);
   1e011:	c6 44 24 70 00       	movb   $0x0,0x70(%rsp)
   1e016:	b8 01 00 00 00       	mov    $0x1,%eax
   1e01b:	e9 a1 f2 ff ff       	jmp    1d2c1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x961>
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1e020:	4c 8d 40 02          	lea    0x2(%rax),%r8
      header[k++] = stbi__zget8(a);
   1e024:	48 63 c9             	movslq %ecx,%rcx
   1e027:	8d 72 02             	lea    0x2(%rdx),%esi
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1e02a:	4c 89 03             	mov    %r8,(%rbx)
   1e02d:	44 0f b6 48 01       	movzbl 0x1(%rax),%r9d
      header[k++] = stbi__zget8(a);
   1e032:	44 88 4c 0c 70       	mov    %r9b,0x70(%rsp,%rcx,1)
   while (k < 4)
   1e037:	83 fa 02             	cmp    $0x2,%edx
   1e03a:	0f 84 a1 f2 ff ff    	je     1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1e040:	49 39 f8             	cmp    %rdi,%r8
   1e043:	72 22                	jb     1e067 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1707>
      header[k++] = stbi__zget8(a);
   1e045:	48 63 f6             	movslq %esi,%rsi
   1e048:	b8 03 00 00 00       	mov    $0x3,%eax
   1e04d:	c6 44 34 70 00       	movb   $0x0,0x70(%rsp,%rsi,1)
   while (k < 4)
   1e052:	83 fa 01             	cmp    $0x1,%edx
   1e055:	0f 85 66 f2 ff ff    	jne    1d2c1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x961>
   1e05b:	e9 81 f2 ff ff       	jmp    1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
      a->code_buffer >>= 8;
   1e060:	89 c8                	mov    %ecx,%eax
   1e062:	e9 1b f2 ff ff       	jmp    1d282 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x922>
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1e067:	48 8d 48 03          	lea    0x3(%rax),%rcx
      header[k++] = stbi__zget8(a);
   1e06b:	48 63 f6             	movslq %esi,%rsi
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1e06e:	48 89 0b             	mov    %rcx,(%rbx)
   1e071:	44 0f b6 40 02       	movzbl 0x2(%rax),%r8d
      header[k++] = stbi__zget8(a);
   1e076:	44 88 44 34 70       	mov    %r8b,0x70(%rsp,%rsi,1)
   while (k < 4)
   1e07b:	85 d2                	test   %edx,%edx
   1e07d:	0f 85 5e f2 ff ff    	jne    1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1e083:	48 39 f9             	cmp    %rdi,%rcx
   1e086:	73 5f                	jae    1e0e7 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1787>
   1e088:	48 8d 50 04          	lea    0x4(%rax),%rdx
   1e08c:	48 89 13             	mov    %rdx,(%rbx)
   1e08f:	0f b6 40 03          	movzbl 0x3(%rax),%eax
      header[k++] = stbi__zget8(a);
   1e093:	88 44 24 73          	mov    %al,0x73(%rsp)
   while (k < 4)
   1e097:	e9 45 f2 ff ff       	jmp    1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
   stbi__g_failure_reason = str;
   1e09c:	48 8d 05 9b 99 01 00 	lea    0x1999b(%rip),%rax        # 37a3e <_ZSt19piecewise_construct+0xf7>
   1e0a3:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1e0aa:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1e0ac:	31 c0                	xor    %eax,%eax
   1e0ae:	e9 e8 00 00 00       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
   if (a->zbuffer + len > a->zbuffer_end) return stbi__err("read past buffer","Corrupt PNG");
   1e0b3:	48 8b 33             	mov    (%rbx),%rsi
   1e0b6:	4c 63 e8             	movslq %eax,%r13
   1e0b9:	4a 8d 14 2e          	lea    (%rsi,%r13,1),%rdx
   1e0bd:	48 39 53 08          	cmp    %rdx,0x8(%rbx)
   1e0c1:	73 2e                	jae    1e0f1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1791>
   stbi__g_failure_reason = str;
   1e0c3:	48 8d 05 34 9a 01 00 	lea    0x19a34(%rip),%rax        # 37afe <_ZSt19piecewise_construct+0x1b7>
   1e0ca:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1e0d1:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1e0d3:	31 c0                	xor    %eax,%eax
   1e0d5:	e9 c1 00 00 00       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
            if (len) { do *zout++ = *p++; while (--len); }
   1e0da:	49 89 f9             	mov    %rdi,%r9
   1e0dd:	45 89 f8             	mov    %r15d,%r8d
   1e0e0:	31 c0                	xor    %eax,%eax
   1e0e2:	e9 70 f0 ff ff       	jmp    1d157 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x7f7>
      header[k++] = stbi__zget8(a);
   1e0e7:	c6 44 24 73 00       	movb   $0x0,0x73(%rsp)
   while (k < 4)
   1e0ec:	e9 f0 f1 ff ff       	jmp    1d2e1 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x981>
   if (a->zout + len > a->zout_end)
   1e0f1:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
   1e0f5:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
   1e0f9:	4a 8d 14 2f          	lea    (%rdi,%r13,1),%rdx
   1e0fd:	48 39 d1             	cmp    %rdx,%rcx
   1e100:	73 75                	jae    1e177 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1817>
   if (!z->z_expandable) return stbi__err("output buffer limit","Corrupt PNG");
   1e102:	8b 53 30             	mov    0x30(%rbx),%edx
   1e105:	85 d2                	test   %edx,%edx
   1e107:	0f 84 76 01 00 00    	je     1e283 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1923>
   cur   = (unsigned int) (z->zout - z->zout_start);
   1e10d:	4c 8b 43 20          	mov    0x20(%rbx),%r8
   1e111:	4c 29 c7             	sub    %r8,%rdi
   1e114:	49 89 ff             	mov    %rdi,%r15
   if (UINT_MAX - cur < (unsigned) n) return stbi__err("outofmem", "Out of memory");
   1e117:	89 c7                	mov    %eax,%edi
   1e119:	44 01 ff             	add    %r15d,%edi
   1e11c:	72 10                	jb     1e12e <_ZL16stbi__parse_zlibP10stbi__zbufi+0x17ce>
   limit = old_limit = (unsigned) (z->zout_end - z->zout_start);
   1e11e:	4c 29 c1             	sub    %r8,%rcx
   while (cur + n > limit) {
   1e121:	44 01 f8             	add    %r15d,%eax
   limit = old_limit = (unsigned) (z->zout_end - z->zout_start);
   1e124:	89 ca                	mov    %ecx,%edx
   while (cur + n > limit) {
   1e126:	39 c1                	cmp    %eax,%ecx
   1e128:	73 22                	jae    1e14c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x17ec>
      if(limit > UINT_MAX / 2) return stbi__err("outofmem", "Out of memory");
   1e12a:	85 c9                	test   %ecx,%ecx
   1e12c:	79 18                	jns    1e146 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x17e6>
      header[k++] = stbi__zget8(a);
   1e12e:	48 8d 05 00 99 01 00 	lea    0x19900(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   stbi__g_failure_reason = str;
   1e135:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1e13c:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1e13e:	31 c0                	xor    %eax,%eax
   1e140:	eb 59                	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
      if(limit > UINT_MAX / 2) return stbi__err("outofmem", "Out of memory");
   1e142:	85 d2                	test   %edx,%edx
   1e144:	78 e8                	js     1e12e <_ZL16stbi__parse_zlibP10stbi__zbufi+0x17ce>
      limit *= 2;
   1e146:	01 d2                	add    %edx,%edx
   while (cur + n > limit) {
   1e148:	39 c2                	cmp    %eax,%edx
   1e14a:	72 f6                	jb     1e142 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x17e2>
   q = (char *) STBI_REALLOC_SIZED(z->zout_start, old_limit, limit);
   1e14c:	41 89 d6             	mov    %edx,%r14d
   1e14f:	4c 89 c7             	mov    %r8,%rdi
   1e152:	4c 89 f6             	mov    %r14,%rsi
   1e155:	e8 56 88 fe ff       	call   69b0 <realloc@plt>
   if (q == NULL) return stbi__err("outofmem", "Out of memory");
   1e15a:	48 85 c0             	test   %rax,%rax
   1e15d:	74 cf                	je     1e12e <_ZL16stbi__parse_zlibP10stbi__zbufi+0x17ce>
   z->zout       = q + cur;
   1e15f:	44 89 ff             	mov    %r15d,%edi
   z->zout_start = q;
   1e162:	48 89 43 20          	mov    %rax,0x20(%rbx)
   memcpy(a->zout, a->zbuffer, len);
   1e166:	48 8b 33             	mov    (%rbx),%rsi
   z->zout       = q + cur;
   1e169:	48 01 c7             	add    %rax,%rdi
   z->zout_end   = q + limit;
   1e16c:	4c 01 f0             	add    %r14,%rax
   z->zout       = q + cur;
   1e16f:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
   z->zout_end   = q + limit;
   1e173:	48 89 43 28          	mov    %rax,0x28(%rbx)
   memcpy(a->zout, a->zbuffer, len);
   1e177:	4c 89 ea             	mov    %r13,%rdx
   1e17a:	e8 91 82 fe ff       	call   6410 <memcpy@plt>
   a->zbuffer += len;
   1e17f:	4c 01 2b             	add    %r13,(%rbx)
   a->zout += len;
   1e182:	4c 8d 1d 37 a4 01 00 	lea    0x1a437(%rip),%r11        # 385c0 <_ZL19stbi__zlength_extra>
   1e189:	4c 01 6b 18          	add    %r13,0x18(%rbx)
   } while (!final);
   1e18d:	45 85 e4             	test   %r12d,%r12d
   1e190:	0f 84 e6 fd ff ff    	je     1df7c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x161c>
   return 1;
   1e196:	b8 01 00 00 00       	mov    $0x1,%eax
}
   1e19b:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
   1e1a2:	5b                   	pop    %rbx
   1e1a3:	5d                   	pop    %rbp
   1e1a4:	41 5c                	pop    %r12
   1e1a6:	41 5d                	pop    %r13
   1e1a8:	41 5e                	pop    %r14
   1e1aa:	41 5f                	pop    %r15
   1e1ac:	c3                   	ret
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1e1ad:	4c 8b 4b 08          	mov    0x8(%rbx),%r9
   1e1b1:	89 d1                	mov    %edx,%ecx
   1e1b3:	eb 28                	jmp    1e1dd <_ZL16stbi__parse_zlibP10stbi__zbufi+0x187d>
   return (z->zbuffer >= z->zbuffer_end);
   1e1b5:	48 8b 13             	mov    (%rbx),%rdx
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1e1b8:	4c 39 ca             	cmp    %r9,%rdx
   1e1bb:	73 0e                	jae    1e1cb <_ZL16stbi__parse_zlibP10stbi__zbufi+0x186b>
   1e1bd:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
   1e1c1:	48 89 3b             	mov    %rdi,(%rbx)
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1e1c4:	0f b6 12             	movzbl (%rdx),%edx
   1e1c7:	d3 e2                	shl    %cl,%edx
   1e1c9:	09 d6                	or     %edx,%esi
      z->num_bits += 8;
   1e1cb:	83 c1 08             	add    $0x8,%ecx
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
   1e1ce:	89 73 14             	mov    %esi,0x14(%rbx)
      z->num_bits += 8;
   1e1d1:	89 4b 10             	mov    %ecx,0x10(%rbx)
   } while (z->num_bits <= 24);
   1e1d4:	83 f9 18             	cmp    $0x18,%ecx
   1e1d7:	0f 8f 91 00 00 00    	jg     1e26e <_ZL16stbi__parse_zlibP10stbi__zbufi+0x190e>
      if (z->code_buffer >= (1U << z->num_bits)) {
   1e1dd:	89 f2                	mov    %esi,%edx
   1e1df:	d3 ea                	shr    %cl,%edx
   1e1e1:	85 d2                	test   %edx,%edx
   1e1e3:	74 d0                	je     1e1b5 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1855>
        z->zbuffer = z->zbuffer_end;  /* treat this as EOF so we fail. */
   1e1e5:	4c 89 0b             	mov    %r9,(%rbx)
   1e1e8:	89 ca                	mov    %ecx,%edx
        return;
   1e1ea:	e9 fa fd ff ff       	jmp    1dfe9 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1689>
      a->code_buffer >>= 8;
   1e1ef:	89 f0                	mov    %esi,%eax
   1e1f1:	e9 8c f0 ff ff       	jmp    1d282 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x922>
   return (z->zbuffer >= z->zbuffer_end);
   1e1f6:	48 8b 17             	mov    (%rdi),%rdx
   1e1f9:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   return stbi__zeof(z) ? 0 : *z->zbuffer++;
   1e1fd:	48 39 f2             	cmp    %rsi,%rdx
   1e200:	73 55                	jae    1e257 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x18f7>
   1e202:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
   1e206:	48 89 3b             	mov    %rdi,(%rbx)
   1e209:	0f b6 02             	movzbl (%rdx),%eax
   1e20c:	89 c1                	mov    %eax,%ecx
   1e20e:	48 39 f7             	cmp    %rsi,%rdi
   1e211:	73 44                	jae    1e257 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x18f7>
   1e213:	48 8d 7a 02          	lea    0x2(%rdx),%rdi
   1e217:	48 89 3b             	mov    %rdi,(%rbx)
   1e21a:	44 0f b6 42 01       	movzbl 0x1(%rdx),%r8d
   1e21f:	44 89 c2             	mov    %r8d,%edx
   if (stbi__zeof(a)) return stbi__err("bad zlib header","Corrupt PNG"); // zlib spec
   1e222:	48 39 f7             	cmp    %rsi,%rdi
   1e225:	73 30                	jae    1e257 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x18f7>
   if ((cmf*256+flg) % 31 != 0) return stbi__err("bad zlib header","Corrupt PNG"); // zlib spec
   1e227:	c1 e0 08             	shl    $0x8,%eax
   1e22a:	44 01 c0             	add    %r8d,%eax
   stbi__g_failure_reason = str;
   1e22d:	69 c0 df 7b ef bd    	imul   $0xbdef7bdf,%eax,%eax
   if ((cmf*256+flg) % 31 != 0) return stbi__err("bad zlib header","Corrupt PNG"); // zlib spec
   1e233:	3d 84 10 42 08       	cmp    $0x8421084,%eax
   1e238:	77 1d                	ja     1e257 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x18f7>
   if (flg & 32) return stbi__err("no preset dict","Corrupt PNG"); // preset dictionary not allowed in png
   1e23a:	83 e2 20             	and    $0x20,%edx
   1e23d:	75 50                	jne    1e28f <_ZL16stbi__parse_zlibP10stbi__zbufi+0x192f>
   if (cm != 8) return stbi__err("bad compression","Corrupt PNG"); // DEFLATE required for png
   1e23f:	83 e1 0f             	and    $0xf,%ecx
   1e242:	80 f9 08             	cmp    $0x8,%cl
   1e245:	0f 84 31 e7 ff ff    	je     1c97c <_ZL16stbi__parse_zlibP10stbi__zbufi+0x1c>
   stbi__g_failure_reason = str;
   1e24b:	48 8d 05 8f 98 01 00 	lea    0x1988f(%rip),%rax        # 37ae1 <_ZSt19piecewise_construct+0x19a>
   1e252:	e9 de fe ff ff       	jmp    1e135 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x17d5>
   1e257:	48 8d 05 64 98 01 00 	lea    0x19864(%rip),%rax        # 37ac2 <_ZSt19piecewise_construct+0x17b>
   1e25e:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1e265:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1e267:	31 c0                	xor    %eax,%eax
   1e269:	e9 2d ff ff ff       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
   z->code_buffer >>= n;
   1e26e:	89 ca                	mov    %ecx,%edx
   1e270:	44 89 c1             	mov    %r8d,%ecx
   1e273:	d3 ee                	shr    %cl,%esi
   z->num_bits -= n;
   1e275:	44 29 c2             	sub    %r8d,%edx
   z->code_buffer >>= n;
   1e278:	89 73 14             	mov    %esi,0x14(%rbx)
   z->num_bits -= n;
   1e27b:	89 53 10             	mov    %edx,0x10(%rbx)
   while (a->num_bits > 0) {
   1e27e:	e9 c3 ef ff ff       	jmp    1d246 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x8e6>
   1e283:	48 8d 05 24 98 01 00 	lea    0x19824(%rip),%rax        # 37aae <_ZSt19piecewise_construct+0x167>
   1e28a:	e9 a6 fe ff ff       	jmp    1e135 <_ZL16stbi__parse_zlibP10stbi__zbufi+0x17d5>
   stbi__g_failure_reason = str;
   1e28f:	48 8d 05 3c 98 01 00 	lea    0x1983c(%rip),%rax        # 37ad2 <_ZSt19piecewise_construct+0x18b>
   1e296:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1e29d:	ff ff 
      if (!stbi__parse_zlib_header(a)) return 0;
   1e29f:	31 c0                	xor    %eax,%eax
   1e2a1:	e9 f5 fe ff ff       	jmp    1e19b <_ZL16stbi__parse_zlibP10stbi__zbufi+0x183b>
   1e2a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e2ad:	00 00 00 

000000000001e2b0 <_ZL13stbi__get16beP13stbi__context>:
{
   1e2b0:	41 54                	push   %r12
   1e2b2:	55                   	push   %rbp
   1e2b3:	53                   	push   %rbx
   if (s->img_buffer < s->img_buffer_end)
   1e2b4:	48 8b 97 c0 00 00 00 	mov    0xc0(%rdi),%rdx
{
   1e2bb:	48 89 fb             	mov    %rdi,%rbx
   if (s->img_buffer < s->img_buffer_end)
   1e2be:	48 8b 87 c8 00 00 00 	mov    0xc8(%rdi),%rax
   1e2c5:	48 39 c2             	cmp    %rax,%rdx
   1e2c8:	73 36                	jae    1e300 <_ZL13stbi__get16beP13stbi__context+0x50>
      return *s->img_buffer++;
   1e2ca:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   1e2ce:	48 89 8f c0 00 00 00 	mov    %rcx,0xc0(%rdi)
   int z = stbi__get8(s);
   1e2d5:	0f b6 2a             	movzbl (%rdx),%ebp
   return (z << 8) + stbi__get8(s);
   1e2d8:	c1 e5 08             	shl    $0x8,%ebp
   if (s->img_buffer < s->img_buffer_end)
   1e2db:	48 39 c1             	cmp    %rax,%rcx
   1e2de:	73 70                	jae    1e350 <_ZL13stbi__get16beP13stbi__context+0xa0>
      return *s->img_buffer++;
   1e2e0:	48 8d 41 01          	lea    0x1(%rcx),%rax
   1e2e4:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   return (z << 8) + stbi__get8(s);
   1e2eb:	0f b6 01             	movzbl (%rcx),%eax
   1e2ee:	01 c5                	add    %eax,%ebp
}
   1e2f0:	89 e8                	mov    %ebp,%eax
   1e2f2:	5b                   	pop    %rbx
   1e2f3:	5d                   	pop    %rbp
   1e2f4:	41 5c                	pop    %r12
   1e2f6:	c3                   	ret
   1e2f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e2fe:	00 00 
   if (s->read_from_callbacks) {
   1e300:	8b 6f 30             	mov    0x30(%rdi),%ebp
   1e303:	85 ed                	test   %ebp,%ebp
   1e305:	74 e9                	je     1e2f0 <_ZL13stbi__get16beP13stbi__context+0x40>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e307:	4c 8d 67 38          	lea    0x38(%rdi),%r12
   1e30b:	8b 57 34             	mov    0x34(%rdi),%edx
   1e30e:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   1e312:	4c 89 e6             	mov    %r12,%rsi
   1e315:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e318:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e31c:	48 63 e8             	movslq %eax,%rbp
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1e31f:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1e326:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   1e32d:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   1e333:	85 ed                	test   %ebp,%ebp
   1e335:	75 79                	jne    1e3b0 <_ZL13stbi__get16beP13stbi__context+0x100>
      s->read_from_callbacks = 0;
   1e337:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1e33e:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1e342:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   1e349:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   1e350:	8b 43 30             	mov    0x30(%rbx),%eax
   1e353:	85 c0                	test   %eax,%eax
   1e355:	74 99                	je     1e2f0 <_ZL13stbi__get16beP13stbi__context+0x40>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e357:	4c 8d 63 38          	lea    0x38(%rbx),%r12
   1e35b:	8b 53 34             	mov    0x34(%rbx),%edx
   1e35e:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1e362:	4c 89 e6             	mov    %r12,%rsi
   1e365:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1e368:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1e36f:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1e376:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e37c:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1e380:	85 c0                	test   %eax,%eax
   1e382:	75 4c                	jne    1e3d0 <_ZL13stbi__get16beP13stbi__context+0x120>
      s->read_from_callbacks = 0;
   1e384:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e38b:	49 89 d4             	mov    %rdx,%r12
      *s->img_buffer = 0;
   1e38e:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1e392:	4c 89 a3 c8 00 00 00 	mov    %r12,0xc8(%rbx)
}
   1e399:	89 e8                	mov    %ebp,%eax
      return *s->img_buffer++;
   1e39b:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
}
   1e3a2:	5b                   	pop    %rbx
   1e3a3:	5d                   	pop    %rbp
   1e3a4:	41 5c                	pop    %r12
   1e3a6:	c3                   	ret
   1e3a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e3ae:	00 00 
      s->img_buffer_end = s->buffer_start + n;
   1e3b0:	49 8d 04 2c          	lea    (%r12,%rbp,1),%rax
   int z = stbi__get8(s);
   1e3b4:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
      return *s->img_buffer++;
   1e3b8:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   1e3bf:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
   return (z << 8) + stbi__get8(s);
   1e3c6:	c1 e5 08             	shl    $0x8,%ebp
   1e3c9:	e9 0d ff ff ff       	jmp    1e2db <_ZL13stbi__get16beP13stbi__context+0x2b>
   1e3ce:	66 90                	xchg   %ax,%ax
      s->img_buffer_end = s->buffer_start + n;
   1e3d0:	48 98                	cltq
   1e3d2:	49 01 c4             	add    %rax,%r12
   return (z << 8) + stbi__get8(s);
   1e3d5:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   1e3d9:	01 c5                	add    %eax,%ebp
   1e3db:	eb b5                	jmp    1e392 <_ZL13stbi__get16beP13stbi__context+0xe2>
   1e3dd:	0f 1f 00             	nopl   (%rax)

000000000001e3e0 <_ZL13stbi__get16leP13stbi__context>:
{
   1e3e0:	41 54                	push   %r12
   1e3e2:	55                   	push   %rbp
   1e3e3:	53                   	push   %rbx
   if (s->img_buffer < s->img_buffer_end)
   1e3e4:	48 8b 97 c0 00 00 00 	mov    0xc0(%rdi),%rdx
{
   1e3eb:	48 89 fb             	mov    %rdi,%rbx
   if (s->img_buffer < s->img_buffer_end)
   1e3ee:	48 8b 87 c8 00 00 00 	mov    0xc8(%rdi),%rax
   1e3f5:	48 39 c2             	cmp    %rax,%rdx
   1e3f8:	73 36                	jae    1e430 <_ZL13stbi__get16leP13stbi__context+0x50>
      return *s->img_buffer++;
   1e3fa:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   1e3fe:	48 89 8f c0 00 00 00 	mov    %rcx,0xc0(%rdi)
   int z = stbi__get8(s);
   1e405:	44 0f b6 22          	movzbl (%rdx),%r12d
   if (s->img_buffer < s->img_buffer_end)
   1e409:	48 39 c1             	cmp    %rax,%rcx
   1e40c:	73 75                	jae    1e483 <_ZL13stbi__get16leP13stbi__context+0xa3>
      return *s->img_buffer++;
   1e40e:	48 8d 41 01          	lea    0x1(%rcx),%rax
   1e412:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   return z + (stbi__get8(s) << 8);
   1e419:	0f b6 01             	movzbl (%rcx),%eax
   1e41c:	c1 e0 08             	shl    $0x8,%eax
   1e41f:	41 01 c4             	add    %eax,%r12d
}
   1e422:	44 89 e0             	mov    %r12d,%eax
   1e425:	5b                   	pop    %rbx
   1e426:	5d                   	pop    %rbp
   1e427:	41 5c                	pop    %r12
   1e429:	c3                   	ret
   1e42a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   1e430:	44 8b 67 30          	mov    0x30(%rdi),%r12d
   1e434:	45 85 e4             	test   %r12d,%r12d
   1e437:	74 e9                	je     1e422 <_ZL13stbi__get16leP13stbi__context+0x42>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e439:	48 8d 6f 38          	lea    0x38(%rdi),%rbp
   1e43d:	8b 57 34             	mov    0x34(%rdi),%edx
   1e440:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   1e444:	48 89 ee             	mov    %rbp,%rsi
   1e447:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e44a:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e44e:	4c 63 e0             	movslq %eax,%r12
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1e451:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1e458:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   1e45f:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   1e465:	45 85 e4             	test   %r12d,%r12d
   1e468:	75 76                	jne    1e4e0 <_ZL13stbi__get16leP13stbi__context+0x100>
      s->read_from_callbacks = 0;
   1e46a:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1e471:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1e475:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   1e47c:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   1e483:	8b 43 30             	mov    0x30(%rbx),%eax
   1e486:	85 c0                	test   %eax,%eax
   1e488:	74 98                	je     1e422 <_ZL13stbi__get16leP13stbi__context+0x42>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e48a:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   1e48e:	8b 53 34             	mov    0x34(%rbx),%edx
   1e491:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1e495:	48 89 ee             	mov    %rbp,%rsi
   1e498:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1e49b:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1e4a2:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1e4a9:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e4af:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1e4b3:	85 c0                	test   %eax,%eax
   1e4b5:	75 49                	jne    1e500 <_ZL13stbi__get16leP13stbi__context+0x120>
      s->read_from_callbacks = 0;
   1e4b7:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e4be:	48 89 d5             	mov    %rdx,%rbp
      *s->img_buffer = 0;
   1e4c1:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1e4c5:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
}
   1e4cc:	44 89 e0             	mov    %r12d,%eax
      return *s->img_buffer++;
   1e4cf:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
}
   1e4d6:	5b                   	pop    %rbx
   1e4d7:	5d                   	pop    %rbp
   1e4d8:	41 5c                	pop    %r12
   1e4da:	c3                   	ret
   1e4db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   1e4e0:	4a 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%rax
      return *s->img_buffer++;
   1e4e5:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   int z = stbi__get8(s);
   1e4ec:	44 0f b6 63 38       	movzbl 0x38(%rbx),%r12d
   1e4f1:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   1e4f8:	e9 0c ff ff ff       	jmp    1e409 <_ZL13stbi__get16leP13stbi__context+0x29>
   1e4fd:	0f 1f 00             	nopl   (%rax)
      s->img_buffer_end = s->buffer_start + n;
   1e500:	48 98                	cltq
   1e502:	48 01 c5             	add    %rax,%rbp
   return z + (stbi__get8(s) << 8);
   1e505:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   1e509:	c1 e0 08             	shl    $0x8,%eax
   1e50c:	41 01 c4             	add    %eax,%r12d
   1e50f:	eb b4                	jmp    1e4c5 <_ZL13stbi__get16leP13stbi__context+0xe5>
   1e511:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   1e518:	00 00 00 00 
   1e51c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001e520 <_ZL18stbi__hdr_gettokenP13stbi__contextPc>:
{
   1e520:	41 56                	push   %r14
   1e522:	41 55                	push   %r13
   1e524:	49 89 f5             	mov    %rsi,%r13
   1e527:	41 54                	push   %r12
   1e529:	55                   	push   %rbp
   1e52a:	53                   	push   %rbx
   1e52b:	48 89 fb             	mov    %rdi,%rbx
   if (s->img_buffer < s->img_buffer_end)
   1e52e:	48 8b 87 c0 00 00 00 	mov    0xc0(%rdi),%rax
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e535:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
   if (s->img_buffer < s->img_buffer_end)
   1e539:	48 3b 87 c8 00 00 00 	cmp    0xc8(%rdi),%rax
   1e540:	0f 83 0a 01 00 00    	jae    1e650 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x130>
      return *s->img_buffer++;
   1e546:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1e54a:	48 89 97 c0 00 00 00 	mov    %rdx,0xc0(%rdi)
   c = (char) stbi__get8(z);
   1e551:	44 0f b6 20          	movzbl (%rax),%r12d
   while (!stbi__at_eof(z) && c != '\n') {
   1e555:	31 ed                	xor    %ebp,%ebp
   if (s->io.read) {
   1e557:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   1e55c:	41 89 ee             	mov    %ebp,%r14d
   1e55f:	74 16                	je     1e577 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x57>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   1e561:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1e565:	ff 53 20             	call   *0x20(%rbx)
   1e568:	85 c0                	test   %eax,%eax
   1e56a:	74 1f                	je     1e58b <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x6b>
      if (s->read_from_callbacks == 0) return 1;
   1e56c:	8b 43 30             	mov    0x30(%rbx),%eax
   1e56f:	85 c0                	test   %eax,%eax
   1e571:	0f 84 c1 00 00 00    	je     1e638 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x118>
   while (!stbi__at_eof(z) && c != '\n') {
   1e577:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   1e57e:	48 39 83 c0 00 00 00 	cmp    %rax,0xc0(%rbx)
   1e585:	0f 83 ad 00 00 00    	jae    1e638 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x118>
   1e58b:	41 80 fc 0a          	cmp    $0xa,%r12b
   1e58f:	0f 84 a6 00 00 00    	je     1e63b <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x11b>
      buffer[len++] = c;
   1e595:	45 88 64 2d 00       	mov    %r12b,0x0(%r13,%rbp,1)
      if (len == STBI__HDR_BUFLEN-1) {
   1e59a:	48 81 fd fe 03 00 00 	cmp    $0x3fe,%rbp
   1e5a1:	0f 84 4b 01 00 00    	je     1e6f2 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x1d2>
   if (s->img_buffer < s->img_buffer_end)
   1e5a7:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e5ae:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
   if (s->img_buffer < s->img_buffer_end)
   1e5b2:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1e5b9:	73 25                	jae    1e5e0 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0xc0>
      return *s->img_buffer++;
   1e5bb:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1e5bf:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      c = (char) stbi__get8(z);
   1e5c6:	44 0f b6 20          	movzbl (%rax),%r12d
   1e5ca:	48 83 c5 01          	add    $0x1,%rbp
   if (s->io.read) {
   1e5ce:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   1e5d3:	41 89 ee             	mov    %ebp,%r14d
   1e5d6:	75 89                	jne    1e561 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x41>
   1e5d8:	eb 9d                	jmp    1e577 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x57>
   1e5da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   1e5e0:	8b 53 30             	mov    0x30(%rbx),%edx
   1e5e3:	45 31 e4             	xor    %r12d,%r12d
   1e5e6:	85 d2                	test   %edx,%edx
   1e5e8:	74 e0                	je     1e5ca <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0xaa>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e5ea:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   1e5ee:	8b 53 34             	mov    0x34(%rbx),%edx
   1e5f1:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1e5f5:	4c 89 f6             	mov    %r14,%rsi
   1e5f8:	ff d1                	call   *%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1e5fa:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1e601:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1e608:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e60e:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1e612:	85 c0                	test   %eax,%eax
   1e614:	0f 84 96 00 00 00    	je     1e6b0 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x190>
      s->img_buffer_end = s->buffer_start + n;
   1e61a:	48 98                	cltq
      c = (char) stbi__get8(z);
   1e61c:	44 0f b6 63 38       	movzbl 0x38(%rbx),%r12d
      s->img_buffer_end = s->buffer_start + n;
   1e621:	49 01 c6             	add    %rax,%r14
   1e624:	4c 89 b3 c8 00 00 00 	mov    %r14,0xc8(%rbx)
      return *s->img_buffer++;
   1e62b:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1e632:	eb 96                	jmp    1e5ca <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0xaa>
   1e634:	0f 1f 40 00          	nopl   0x0(%rax)
      buffer[len++] = c;
   1e638:	49 63 ee             	movslq %r14d,%rbp
   buffer[len] = 0;
   1e63b:	41 c6 44 2d 00 00    	movb   $0x0,0x0(%r13,%rbp,1)
}
   1e641:	4c 89 e8             	mov    %r13,%rax
   1e644:	5b                   	pop    %rbx
   1e645:	5d                   	pop    %rbp
   1e646:	41 5c                	pop    %r12
   1e648:	41 5d                	pop    %r13
   1e64a:	41 5e                	pop    %r14
   1e64c:	c3                   	ret
   1e64d:	0f 1f 00             	nopl   (%rax)
   if (s->read_from_callbacks) {
   1e650:	8b 7f 30             	mov    0x30(%rdi),%edi
   1e653:	45 31 e4             	xor    %r12d,%r12d
   1e656:	85 ff                	test   %edi,%edi
   1e658:	0f 84 f7 fe ff ff    	je     1e555 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x35>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e65e:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   1e662:	8b 53 34             	mov    0x34(%rbx),%edx
   1e665:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1e669:	48 89 ee             	mov    %rbp,%rsi
   1e66c:	ff d1                	call   *%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1e66e:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1e675:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1e67c:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e682:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1e686:	85 c0                	test   %eax,%eax
   1e688:	0f 85 b2 00 00 00    	jne    1e740 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x220>
      s->read_from_callbacks = 0;
   1e68e:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e695:	48 89 d5             	mov    %rdx,%rbp
      *s->img_buffer = 0;
   1e698:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1e69c:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
      return *s->img_buffer++;
   1e6a3:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1e6aa:	e9 a6 fe ff ff       	jmp    1e555 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x35>
   1e6af:	90                   	nop
      s->read_from_callbacks = 0;
   1e6b0:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e6b7:	49 89 d6             	mov    %rdx,%r14
      *s->img_buffer = 0;
   1e6ba:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1e6be:	e9 61 ff ff ff       	jmp    1e624 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x104>
   1e6c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      if (!(s->io.eof)(s->io_user_data)) return 0;
   1e6c8:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1e6cc:	ff 53 20             	call   *0x20(%rbx)
   1e6cf:	85 c0                	test   %eax,%eax
   1e6d1:	75 2d                	jne    1e700 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x1e0>
   if (s->img_buffer < s->img_buffer_end)
   1e6d3:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1e6da:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1e6e1:	0f 82 a1 00 00 00    	jb     1e788 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x268>
   if (s->read_from_callbacks) {
   1e6e7:	8b 4b 30             	mov    0x30(%rbx),%ecx
   1e6ea:	85 c9                	test   %ecx,%ecx
   1e6ec:	0f 85 87 00 00 00    	jne    1e779 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x259>
   if (s->io.read) {
   1e6f2:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
   1e6f6:	48 85 ed             	test   %rbp,%rbp
   1e6f9:	75 cd                	jne    1e6c8 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x1a8>
   1e6fb:	eb 0a                	jmp    1e707 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x1e7>
   1e6fd:	0f 1f 00             	nopl   (%rax)
      if (s->read_from_callbacks == 0) return 1;
   1e700:	8b 73 30             	mov    0x30(%rbx),%esi
   1e703:	85 f6                	test   %esi,%esi
   1e705:	74 29                	je     1e730 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x210>
   return s->img_buffer >= s->img_buffer_end;
   1e707:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
         while (!stbi__at_eof(z) && stbi__get8(z) != '\n')
   1e70e:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1e715:	73 19                	jae    1e730 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x210>
      return *s->img_buffer++;
   1e717:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1e71b:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
         while (!stbi__at_eof(z) && stbi__get8(z) != '\n')
   1e722:	80 38 0a             	cmpb   $0xa,(%rax)
   1e725:	75 28                	jne    1e74f <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x22f>
   1e727:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e72e:	00 00 
   while (!stbi__at_eof(z) && c != '\n') {
   1e730:	bd ff 03 00 00       	mov    $0x3ff,%ebp
   1e735:	e9 01 ff ff ff       	jmp    1e63b <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x11b>
   1e73a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   1e740:	48 98                	cltq
   c = (char) stbi__get8(z);
   1e742:	44 0f b6 63 38       	movzbl 0x38(%rbx),%r12d
      s->img_buffer_end = s->buffer_start + n;
   1e747:	48 01 c5             	add    %rax,%rbp
   1e74a:	e9 4d ff ff ff       	jmp    1e69c <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x17c>
   1e74f:	48 85 ed             	test   %rbp,%rbp
   1e752:	75 9e                	jne    1e6f2 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x1d2>
   1e754:	48 8b 93 c8 00 00 00 	mov    0xc8(%rbx),%rdx
   return s->img_buffer >= s->img_buffer_end;
   1e75b:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
         while (!stbi__at_eof(z) && stbi__get8(z) != '\n')
   1e762:	48 39 d0             	cmp    %rdx,%rax
   1e765:	73 c9                	jae    1e730 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x210>
      return *s->img_buffer++;
   1e767:	48 8d 48 01          	lea    0x1(%rax),%rcx
   1e76b:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
         while (!stbi__at_eof(z) && stbi__get8(z) != '\n')
   1e772:	80 38 0a             	cmpb   $0xa,(%rax)
   1e775:	74 b9                	je     1e730 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x210>
   1e777:	eb e2                	jmp    1e75b <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x23b>
      stbi__refill_buffer(s);
   1e779:	48 89 df             	mov    %rbx,%rdi
   1e77c:	e8 ff 2a ff ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   1e781:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1e788:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1e78c:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
         while (!stbi__at_eof(z) && stbi__get8(z) != '\n')
   1e793:	80 38 0a             	cmpb   $0xa,(%rax)
   1e796:	74 98                	je     1e730 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x210>
   1e798:	e9 55 ff ff ff       	jmp    1e6f2 <_ZL18stbi__hdr_gettokenP13stbi__contextPc+0x1d2>
   1e79d:	0f 1f 00             	nopl   (%rax)

000000000001e7a0 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_>:
{
   1e7a0:	41 57                	push   %r15
   1e7a2:	49 89 f7             	mov    %rsi,%r15
   1e7a5:	41 56                	push   %r14
   1e7a7:	49 89 d6             	mov    %rdx,%r14
   1e7aa:	41 55                	push   %r13
   1e7ac:	4c 8d 2d 76 93 01 00 	lea    0x19376(%rip),%r13        # 37b29 <_ZSt19piecewise_construct+0x1e2>
   1e7b3:	41 54                	push   %r12
   1e7b5:	55                   	push   %rbp
   1e7b6:	48 89 fd             	mov    %rdi,%rbp
   1e7b9:	53                   	push   %rbx
   1e7ba:	48 81 ec 28 04 00 00 	sub    $0x428,%rsp
   if (!x) x = &dummy;
   1e7c1:	48 85 f6             	test   %rsi,%rsi
   1e7c4:	48 8d 44 24 14       	lea    0x14(%rsp),%rax
   1e7c9:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
   1e7ce:	4c 0f 44 f8          	cmove  %rax,%r15
   if (!y) y = &dummy;
   1e7d2:	48 85 d2             	test   %rdx,%rdx
   1e7d5:	4c 0f 44 f0          	cmove  %rax,%r14
   if (!comp) comp = &dummy;
   1e7d9:	48 85 c9             	test   %rcx,%rcx
   1e7dc:	48 0f 45 c1          	cmovne %rcx,%rax
   1e7e0:	31 db                	xor    %ebx,%ebx
   1e7e2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   if (stbi__hdr_test(s) == 0) {
   1e7e7:	e8 b4 d0 ff ff       	call   1b8a0 <_ZL14stbi__hdr_testP13stbi__context>
   1e7ec:	85 c0                	test   %eax,%eax
   1e7ee:	75 1a                	jne    1e80a <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x6a>
   1e7f0:	eb 34                	jmp    1e826 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x86>
   1e7f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if (strcmp(token, "FORMAT=32-bit_rle_rgbe") == 0) valid = 1;
   1e7f8:	4c 89 ee             	mov    %r13,%rsi
   1e7fb:	e8 00 80 fe ff       	call   6800 <strcmp@plt>
   1e800:	85 c0                	test   %eax,%eax
   1e802:	b8 01 00 00 00       	mov    $0x1,%eax
   1e807:	0f 44 d8             	cmove  %eax,%ebx
      token = stbi__hdr_gettoken(s,buffer);
   1e80a:	48 89 ef             	mov    %rbp,%rdi
   1e80d:	4c 89 e6             	mov    %r12,%rsi
   1e810:	e8 0b fd ff ff       	call   1e520 <_ZL18stbi__hdr_gettokenP13stbi__contextPc>
   1e815:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
      if (token[0] == 0) break;
   1e81a:	80 38 00             	cmpb   $0x0,(%rax)
      token = stbi__hdr_gettoken(s,buffer);
   1e81d:	48 89 c7             	mov    %rax,%rdi
      if (token[0] == 0) break;
   1e820:	75 d6                	jne    1e7f8 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x58>
   if (!valid) {
   1e822:	85 db                	test   %ebx,%ebx
   1e824:	75 2a                	jne    1e850 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0xb0>
   s->img_buffer = s->img_buffer_original;
   1e826:	f3 0f 6f 85 d0 00 00 	movdqu 0xd0(%rbp),%xmm0
   1e82d:	00 
       return 0;
   1e82e:	31 db                	xor    %ebx,%ebx
   s->img_buffer = s->img_buffer_original;
   1e830:	0f 11 85 c0 00 00 00 	movups %xmm0,0xc0(%rbp)
}
   1e837:	48 81 c4 28 04 00 00 	add    $0x428,%rsp
   1e83e:	89 d8                	mov    %ebx,%eax
   1e840:	5b                   	pop    %rbx
   1e841:	5d                   	pop    %rbp
   1e842:	41 5c                	pop    %r12
   1e844:	41 5d                	pop    %r13
   1e846:	41 5e                	pop    %r14
   1e848:	41 5f                	pop    %r15
   1e84a:	c3                   	ret
   1e84b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   token = stbi__hdr_gettoken(s,buffer);
   1e850:	4c 89 e6             	mov    %r12,%rsi
   1e853:	48 89 ef             	mov    %rbp,%rdi
   1e856:	e8 c5 fc ff ff       	call   1e520 <_ZL18stbi__hdr_gettokenP13stbi__contextPc>
   1e85b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   if (strncmp(token, "-Y ", 3)) {
   1e860:	80 38 2d             	cmpb   $0x2d,(%rax)
   1e863:	75 c1                	jne    1e826 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x86>
   1e865:	80 78 01 59          	cmpb   $0x59,0x1(%rax)
   1e869:	75 bb                	jne    1e826 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x86>
   1e86b:	80 78 02 20          	cmpb   $0x20,0x2(%rax)
   1e86f:	75 b5                	jne    1e826 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x86>
   token += 3;
   1e871:	48 8d 78 03          	lea    0x3(%rax),%rdi
   *y = (int) strtol(token, &token, 10);
   1e875:	ba 0a 00 00 00       	mov    $0xa,%edx
   1e87a:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
   token += 3;
   1e87f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
   *y = (int) strtol(token, &token, 10);
   1e884:	e8 87 7f fe ff       	call   6810 <strtol@plt>
   while (*token == ' ') ++token;
   1e889:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   *y = (int) strtol(token, &token, 10);
   1e88e:	41 89 06             	mov    %eax,(%r14)
   while (*token == ' ') ++token;
   1e891:	80 3a 20             	cmpb   $0x20,(%rdx)
   1e894:	75 1c                	jne    1e8b2 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x112>
   1e896:	48 8d 42 01          	lea    0x1(%rdx),%rax
   1e89a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1e8a0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   1e8a5:	48 89 c2             	mov    %rax,%rdx
   1e8a8:	48 83 c0 01          	add    $0x1,%rax
   1e8ac:	80 78 ff 20          	cmpb   $0x20,-0x1(%rax)
   1e8b0:	74 ee                	je     1e8a0 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x100>
   if (strncmp(token, "+X ", 3)) {
   1e8b2:	80 3a 2b             	cmpb   $0x2b,(%rdx)
   1e8b5:	0f 85 6b ff ff ff    	jne    1e826 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x86>
   1e8bb:	80 7a 01 58          	cmpb   $0x58,0x1(%rdx)
   1e8bf:	0f 85 61 ff ff ff    	jne    1e826 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x86>
   1e8c5:	80 7a 02 20          	cmpb   $0x20,0x2(%rdx)
   1e8c9:	0f 85 57 ff ff ff    	jne    1e826 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x86>
   token += 3;
   1e8cf:	48 8d 7a 03          	lea    0x3(%rdx),%rdi
   *x = (int) strtol(token, NULL, 10);
   1e8d3:	31 f6                	xor    %esi,%esi
   1e8d5:	ba 0a 00 00 00       	mov    $0xa,%edx
   token += 3;
   1e8da:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
   *x = (int) strtol(token, NULL, 10);
   1e8df:	e8 2c 7f fe ff       	call   6810 <strtol@plt>
   1e8e4:	41 89 07             	mov    %eax,(%r15)
   *comp = 3;
   1e8e7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   1e8ec:	c7 00 03 00 00 00    	movl   $0x3,(%rax)
   return 1;
   1e8f2:	e9 40 ff ff ff       	jmp    1e837 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_+0x97>
   1e8f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e8fe:	00 00 

000000000001e900 <_ZL13stbi__get32beP13stbi__context>:
{
   1e900:	41 55                	push   %r13
   1e902:	41 54                	push   %r12
   1e904:	55                   	push   %rbp
   1e905:	53                   	push   %rbx
   1e906:	48 89 fb             	mov    %rdi,%rbx
   1e909:	48 83 ec 08          	sub    $0x8,%rsp
   if (s->img_buffer < s->img_buffer_end)
   1e90d:	48 8b 87 c0 00 00 00 	mov    0xc0(%rdi),%rax
   1e914:	48 8b 97 c8 00 00 00 	mov    0xc8(%rdi),%rdx
   1e91b:	48 39 d0             	cmp    %rdx,%rax
   1e91e:	73 78                	jae    1e998 <_ZL13stbi__get32beP13stbi__context+0x98>
      return *s->img_buffer++;
   1e920:	48 8d 48 01          	lea    0x1(%rax),%rcx
   1e924:	48 89 8f c0 00 00 00 	mov    %rcx,0xc0(%rdi)
   int z = stbi__get8(s);
   1e92b:	0f b6 28             	movzbl (%rax),%ebp
   return (z << 8) + stbi__get8(s);
   1e92e:	c1 e5 08             	shl    $0x8,%ebp
   if (s->img_buffer < s->img_buffer_end)
   1e931:	48 39 d1             	cmp    %rdx,%rcx
   1e934:	0f 83 cb 00 00 00    	jae    1ea05 <_ZL13stbi__get32beP13stbi__context+0x105>
      return *s->img_buffer++;
   1e93a:	48 8d 71 01          	lea    0x1(%rcx),%rsi
   1e93e:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
   return (z << 8) + stbi__get8(s);
   1e945:	0f b6 01             	movzbl (%rcx),%eax
   1e948:	01 e8                	add    %ebp,%eax
   return (z << 16) + stbi__get16be(s);
   1e94a:	c1 e0 10             	shl    $0x10,%eax
   1e94d:	41 89 c4             	mov    %eax,%r12d
   if (s->img_buffer < s->img_buffer_end)
   1e950:	48 39 d6             	cmp    %rdx,%rsi
   1e953:	0f 83 07 01 00 00    	jae    1ea60 <_ZL13stbi__get32beP13stbi__context+0x160>
      return *s->img_buffer++;
   1e959:	48 8d 4e 01          	lea    0x1(%rsi),%rcx
   1e95d:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   int z = stbi__get8(s);
   1e964:	0f b6 2e             	movzbl (%rsi),%ebp
   return (z << 8) + stbi__get8(s);
   1e967:	c1 e5 08             	shl    $0x8,%ebp
   if (s->img_buffer < s->img_buffer_end)
   1e96a:	48 39 d1             	cmp    %rdx,%rcx
   1e96d:	0f 83 45 01 00 00    	jae    1eab8 <_ZL13stbi__get32beP13stbi__context+0x1b8>
      return *s->img_buffer++;
   1e973:	48 8d 41 01          	lea    0x1(%rcx),%rax
   1e977:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   return (z << 8) + stbi__get8(s);
   1e97e:	0f b6 01             	movzbl (%rcx),%eax
   1e981:	01 c5                	add    %eax,%ebp
}
   1e983:	48 83 c4 08          	add    $0x8,%rsp
   return (z << 16) + stbi__get16be(s);
   1e987:	42 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%eax
}
   1e98c:	5b                   	pop    %rbx
   1e98d:	5d                   	pop    %rbp
   1e98e:	41 5c                	pop    %r12
   1e990:	41 5d                	pop    %r13
   1e992:	c3                   	ret
   1e993:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   1e998:	8b 77 30             	mov    0x30(%rdi),%esi
   return (z << 16) + stbi__get16be(s);
   1e99b:	45 31 e4             	xor    %r12d,%r12d
   if (s->read_from_callbacks) {
   1e99e:	85 f6                	test   %esi,%esi
   1e9a0:	75 16                	jne    1e9b8 <_ZL13stbi__get32beP13stbi__context+0xb8>
      s->img_buffer_end = s->buffer_start+1;
   1e9a2:	31 ed                	xor    %ebp,%ebp
}
   1e9a4:	48 83 c4 08          	add    $0x8,%rsp
   return (z << 16) + stbi__get16be(s);
   1e9a8:	42 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%eax
}
   1e9ad:	5b                   	pop    %rbx
   1e9ae:	5d                   	pop    %rbp
   1e9af:	41 5c                	pop    %r12
   1e9b1:	41 5d                	pop    %r13
   1e9b3:	c3                   	ret
   1e9b4:	0f 1f 40 00          	nopl   0x0(%rax)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e9b8:	4c 8d 67 38          	lea    0x38(%rdi),%r12
   1e9bc:	8b 57 34             	mov    0x34(%rdi),%edx
   1e9bf:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   1e9c3:	4c 89 e6             	mov    %r12,%rsi
   1e9c6:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1e9c9:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1e9cd:	48 63 e8             	movslq %eax,%rbp
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1e9d0:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1e9d7:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   1e9de:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   1e9e4:	85 ed                	test   %ebp,%ebp
   1e9e6:	0f 85 54 01 00 00    	jne    1eb40 <_ZL13stbi__get32beP13stbi__context+0x240>
      s->read_from_callbacks = 0;
   1e9ec:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1e9f3:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1e9f7:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   1e9fe:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   1ea05:	8b 4b 30             	mov    0x30(%rbx),%ecx
   1ea08:	85 c9                	test   %ecx,%ecx
   1ea0a:	0f 84 80 01 00 00    	je     1eb90 <_ZL13stbi__get32beP13stbi__context+0x290>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1ea10:	4c 8d 63 38          	lea    0x38(%rbx),%r12
   1ea14:	8b 53 34             	mov    0x34(%rbx),%edx
   1ea17:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1ea1b:	4c 89 e6             	mov    %r12,%rsi
   1ea1e:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ea21:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   1ea28:	48 8d 73 39          	lea    0x39(%rbx),%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ea2c:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1ea33:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   1ea39:	85 c0                	test   %eax,%eax
   1ea3b:	0f 85 df 00 00 00    	jne    1eb20 <_ZL13stbi__get32beP13stbi__context+0x220>
      s->read_from_callbacks = 0;
   1ea41:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
   return (z << 16) + stbi__get16be(s);
   1ea48:	c1 e5 10             	shl    $0x10,%ebp
      *s->img_buffer = 0;
   1ea4b:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   return (z << 16) + stbi__get16be(s);
   1ea4f:	41 89 ec             	mov    %ebp,%r12d
   1ea52:	48 89 b3 c8 00 00 00 	mov    %rsi,0xc8(%rbx)
      return *s->img_buffer++;
   1ea59:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
   if (s->read_from_callbacks) {
   1ea60:	8b 53 30             	mov    0x30(%rbx),%edx
   1ea63:	85 d2                	test   %edx,%edx
   1ea65:	0f 84 37 ff ff ff    	je     1e9a2 <_ZL13stbi__get32beP13stbi__context+0xa2>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1ea6b:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   1ea6f:	8b 53 34             	mov    0x34(%rbx),%edx
   1ea72:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1ea76:	4c 89 ee             	mov    %r13,%rsi
   1ea79:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1ea7c:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1ea80:	48 63 e8             	movslq %eax,%rbp
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ea83:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1ea8a:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   1ea91:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   1ea97:	85 ed                	test   %ebp,%ebp
   1ea99:	0f 85 c1 00 00 00    	jne    1eb60 <_ZL13stbi__get32beP13stbi__context+0x260>
      s->read_from_callbacks = 0;
   1ea9f:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1eaa6:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1eaaa:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   1eab1:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   1eab8:	8b 43 30             	mov    0x30(%rbx),%eax
   1eabb:	85 c0                	test   %eax,%eax
   1eabd:	0f 84 c0 fe ff ff    	je     1e983 <_ZL13stbi__get32beP13stbi__context+0x83>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1eac3:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   1eac7:	8b 53 34             	mov    0x34(%rbx),%edx
   1eaca:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1eace:	4c 89 ee             	mov    %r13,%rsi
   1ead1:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ead4:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1eadb:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1eae2:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1eae8:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1eaec:	85 c0                	test   %eax,%eax
   1eaee:	0f 85 8c 00 00 00    	jne    1eb80 <_ZL13stbi__get32beP13stbi__context+0x280>
      s->read_from_callbacks = 0;
   1eaf4:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1eafb:	49 89 d5             	mov    %rdx,%r13
      *s->img_buffer = 0;
   1eafe:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1eb02:	4c 89 ab c8 00 00 00 	mov    %r13,0xc8(%rbx)
   return (z << 16) + stbi__get16be(s);
   1eb09:	42 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%eax
      return *s->img_buffer++;
   1eb0e:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
}
   1eb15:	48 83 c4 08          	add    $0x8,%rsp
   1eb19:	5b                   	pop    %rbx
   1eb1a:	5d                   	pop    %rbp
   1eb1b:	41 5c                	pop    %r12
   1eb1d:	41 5d                	pop    %r13
   1eb1f:	c3                   	ret
      s->img_buffer_end = s->buffer_start + n;
   1eb20:	48 98                	cltq
      return *s->img_buffer++;
   1eb22:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
      s->img_buffer_end = s->buffer_start + n;
   1eb29:	49 8d 14 04          	lea    (%r12,%rax,1),%rdx
   return (z << 8) + stbi__get8(s);
   1eb2d:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   1eb31:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
   1eb38:	01 e8                	add    %ebp,%eax
   1eb3a:	e9 0b fe ff ff       	jmp    1e94a <_ZL13stbi__get32beP13stbi__context+0x4a>
   1eb3f:	90                   	nop
      s->img_buffer_end = s->buffer_start + n;
   1eb40:	49 8d 14 2c          	lea    (%r12,%rbp,1),%rdx
   int z = stbi__get8(s);
   1eb44:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
      return *s->img_buffer++;
   1eb48:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   1eb4f:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
   return (z << 8) + stbi__get8(s);
   1eb56:	c1 e5 08             	shl    $0x8,%ebp
   1eb59:	e9 d3 fd ff ff       	jmp    1e931 <_ZL13stbi__get32beP13stbi__context+0x31>
   1eb5e:	66 90                	xchg   %ax,%ax
      s->img_buffer_end = s->buffer_start + n;
   1eb60:	49 8d 54 2d 00       	lea    0x0(%r13,%rbp,1),%rdx
   int z = stbi__get8(s);
   1eb65:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
      return *s->img_buffer++;
   1eb69:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   1eb70:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
   return (z << 8) + stbi__get8(s);
   1eb77:	c1 e5 08             	shl    $0x8,%ebp
   1eb7a:	e9 eb fd ff ff       	jmp    1e96a <_ZL13stbi__get32beP13stbi__context+0x6a>
   1eb7f:	90                   	nop
      s->img_buffer_end = s->buffer_start + n;
   1eb80:	48 98                	cltq
   1eb82:	49 01 c5             	add    %rax,%r13
   return (z << 8) + stbi__get8(s);
   1eb85:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   1eb89:	01 c5                	add    %eax,%ebp
   1eb8b:	e9 72 ff ff ff       	jmp    1eb02 <_ZL13stbi__get32beP13stbi__context+0x202>
   return (z << 16) + stbi__get16be(s);
   1eb90:	c1 e5 10             	shl    $0x10,%ebp
   1eb93:	41 89 ec             	mov    %ebp,%r12d
      s->img_buffer_end = s->buffer_start+1;
   1eb96:	31 ed                	xor    %ebp,%ebp
   1eb98:	e9 07 fe ff ff       	jmp    1e9a4 <_ZL13stbi__get32beP13stbi__context+0xa4>
   1eb9d:	0f 1f 00             	nopl   (%rax)

000000000001eba0 <_ZL13stbi__get32leP13stbi__context>:
{
   1eba0:	41 55                	push   %r13
   1eba2:	41 54                	push   %r12
   1eba4:	55                   	push   %rbp
   1eba5:	53                   	push   %rbx
   1eba6:	48 89 fb             	mov    %rdi,%rbx
   1eba9:	48 83 ec 08          	sub    $0x8,%rsp
   if (s->img_buffer < s->img_buffer_end)
   1ebad:	48 8b 97 c0 00 00 00 	mov    0xc0(%rdi),%rdx
   1ebb4:	48 8b 87 c8 00 00 00 	mov    0xc8(%rdi),%rax
   1ebbb:	48 39 c2             	cmp    %rax,%rdx
   1ebbe:	73 78                	jae    1ec38 <_ZL13stbi__get32leP13stbi__context+0x98>
      return *s->img_buffer++;
   1ebc0:	48 8d 72 01          	lea    0x1(%rdx),%rsi
   1ebc4:	48 89 b7 c0 00 00 00 	mov    %rsi,0xc0(%rdi)
   int z = stbi__get8(s);
   1ebcb:	44 0f b6 2a          	movzbl (%rdx),%r13d
   if (s->img_buffer < s->img_buffer_end)
   1ebcf:	48 39 c6             	cmp    %rax,%rsi
   1ebd2:	0f 83 c6 00 00 00    	jae    1ec9e <_ZL13stbi__get32leP13stbi__context+0xfe>
      return *s->img_buffer++;
   1ebd8:	48 8d 4e 01          	lea    0x1(%rsi),%rcx
   1ebdc:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   return z + (stbi__get8(s) << 8);
   1ebe3:	44 0f b6 26          	movzbl (%rsi),%r12d
   1ebe7:	41 c1 e4 08          	shl    $0x8,%r12d
   1ebeb:	45 01 ec             	add    %r13d,%r12d
   if (s->img_buffer < s->img_buffer_end)
   1ebee:	48 39 c1             	cmp    %rax,%rcx
   1ebf1:	0f 83 ff 00 00 00    	jae    1ecf6 <_ZL13stbi__get32leP13stbi__context+0x156>
      return *s->img_buffer++;
   1ebf7:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   1ebfb:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   int z = stbi__get8(s);
   1ec02:	0f b6 29             	movzbl (%rcx),%ebp
   if (s->img_buffer < s->img_buffer_end)
   1ec05:	48 39 c2             	cmp    %rax,%rdx
   1ec08:	0f 83 40 01 00 00    	jae    1ed4e <_ZL13stbi__get32leP13stbi__context+0x1ae>
      return *s->img_buffer++;
   1ec0e:	48 8d 42 01          	lea    0x1(%rdx),%rax
   1ec12:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   return z + (stbi__get8(s) << 8);
   1ec19:	0f b6 02             	movzbl (%rdx),%eax
   1ec1c:	c1 e0 08             	shl    $0x8,%eax
   1ec1f:	01 c5                	add    %eax,%ebp
}
   1ec21:	48 83 c4 08          	add    $0x8,%rsp
   z += (stbi__uint32)stbi__get16le(s) << 16;
   1ec25:	c1 e5 10             	shl    $0x10,%ebp
   1ec28:	42 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%eax
}
   1ec2d:	5b                   	pop    %rbx
   1ec2e:	5d                   	pop    %rbp
   1ec2f:	41 5c                	pop    %r12
   1ec31:	41 5d                	pop    %r13
   1ec33:	c3                   	ret
   1ec34:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   1ec38:	8b 77 30             	mov    0x30(%rdi),%esi
   stbi__uint32 z = stbi__get16le(s);
   1ec3b:	45 31 e4             	xor    %r12d,%r12d
   if (s->read_from_callbacks) {
   1ec3e:	85 f6                	test   %esi,%esi
   1ec40:	75 0e                	jne    1ec50 <_ZL13stbi__get32leP13stbi__context+0xb0>
      s->img_buffer_end = s->buffer_start+1;
   1ec42:	31 ed                	xor    %ebp,%ebp
   1ec44:	eb db                	jmp    1ec21 <_ZL13stbi__get32leP13stbi__context+0x81>
   1ec46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ec4d:	00 00 00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1ec50:	48 8d 6f 38          	lea    0x38(%rdi),%rbp
   1ec54:	8b 57 34             	mov    0x34(%rdi),%edx
   1ec57:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   1ec5b:	48 89 ee             	mov    %rbp,%rsi
   1ec5e:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1ec61:	48 8d 73 39          	lea    0x39(%rbx),%rsi
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1ec65:	4c 63 e8             	movslq %eax,%r13
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ec68:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1ec6f:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   1ec76:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   1ec7c:	45 85 ed             	test   %r13d,%r13d
   1ec7f:	0f 85 53 01 00 00    	jne    1edd8 <_ZL13stbi__get32leP13stbi__context+0x238>
      s->read_from_callbacks = 0;
   1ec85:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1ec8c:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1ec90:	48 89 b3 c8 00 00 00 	mov    %rsi,0xc8(%rbx)
      return *s->img_buffer++;
   1ec97:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
   if (s->read_from_callbacks) {
   1ec9e:	8b 4b 30             	mov    0x30(%rbx),%ecx
   1eca1:	85 c9                	test   %ecx,%ecx
   1eca3:	0f 84 87 01 00 00    	je     1ee30 <_ZL13stbi__get32leP13stbi__context+0x290>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1eca9:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   1ecad:	8b 53 34             	mov    0x34(%rbx),%edx
   1ecb0:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1ecb4:	48 89 ee             	mov    %rbp,%rsi
   1ecb7:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ecba:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   1ecc1:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ecc5:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1eccc:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   1ecd2:	85 c0                	test   %eax,%eax
   1ecd4:	0f 85 d6 00 00 00    	jne    1edb0 <_ZL13stbi__get32leP13stbi__context+0x210>
      s->read_from_callbacks = 0;
   1ecda:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
   stbi__uint32 z = stbi__get16le(s);
   1ece1:	45 89 ec             	mov    %r13d,%r12d
      *s->img_buffer = 0;
   1ece4:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1ece8:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   1ecef:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   1ecf6:	8b 53 30             	mov    0x30(%rbx),%edx
   1ecf9:	85 d2                	test   %edx,%edx
   1ecfb:	0f 84 41 ff ff ff    	je     1ec42 <_ZL13stbi__get32leP13stbi__context+0xa2>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1ed01:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   1ed05:	8b 53 34             	mov    0x34(%rbx),%edx
   1ed08:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1ed0c:	4c 89 ee             	mov    %r13,%rsi
   1ed0f:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1ed12:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1ed16:	48 63 e8             	movslq %eax,%rbp
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ed19:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1ed20:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   1ed27:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   1ed2d:	85 ed                	test   %ebp,%ebp
   1ed2f:	0f 85 c3 00 00 00    	jne    1edf8 <_ZL13stbi__get32leP13stbi__context+0x258>
      s->read_from_callbacks = 0;
   1ed35:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1ed3c:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1ed40:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   1ed47:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   1ed4e:	8b 43 30             	mov    0x30(%rbx),%eax
   1ed51:	85 c0                	test   %eax,%eax
   1ed53:	0f 84 c8 fe ff ff    	je     1ec21 <_ZL13stbi__get32leP13stbi__context+0x81>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1ed59:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   1ed5d:	8b 53 34             	mov    0x34(%rbx),%edx
   1ed60:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1ed64:	4c 89 ee             	mov    %r13,%rsi
   1ed67:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1ed6a:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1ed71:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1ed78:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1ed7e:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1ed82:	85 c0                	test   %eax,%eax
   1ed84:	0f 85 8e 00 00 00    	jne    1ee18 <_ZL13stbi__get32leP13stbi__context+0x278>
      s->read_from_callbacks = 0;
   1ed8a:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1ed91:	49 89 d5             	mov    %rdx,%r13
      *s->img_buffer = 0;
   1ed94:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1ed98:	4c 89 ab c8 00 00 00 	mov    %r13,0xc8(%rbx)
      return *s->img_buffer++;
   1ed9f:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1eda6:	e9 76 fe ff ff       	jmp    1ec21 <_ZL13stbi__get32leP13stbi__context+0x81>
   1edab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   return z + (stbi__get8(s) << 8);
   1edb0:	44 0f b6 63 38       	movzbl 0x38(%rbx),%r12d
      s->img_buffer_end = s->buffer_start + n;
   1edb5:	48 98                	cltq
      return *s->img_buffer++;
   1edb7:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
      s->img_buffer_end = s->buffer_start + n;
   1edbe:	48 01 e8             	add    %rbp,%rax
   return z + (stbi__get8(s) << 8);
   1edc1:	41 c1 e4 08          	shl    $0x8,%r12d
   1edc5:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
   1edcc:	45 01 ec             	add    %r13d,%r12d
   1edcf:	e9 1a fe ff ff       	jmp    1ebee <_ZL13stbi__get32leP13stbi__context+0x4e>
   1edd4:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   1edd8:	4a 8d 44 2d 00       	lea    0x0(%rbp,%r13,1),%rax
      return *s->img_buffer++;
   1eddd:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
   int z = stbi__get8(s);
   1ede4:	44 0f b6 6b 38       	movzbl 0x38(%rbx),%r13d
   1ede9:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   1edf0:	e9 da fd ff ff       	jmp    1ebcf <_ZL13stbi__get32leP13stbi__context+0x2f>
   1edf5:	0f 1f 00             	nopl   (%rax)
      s->img_buffer_end = s->buffer_start + n;
   1edf8:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
      return *s->img_buffer++;
   1edfd:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   int z = stbi__get8(s);
   1ee04:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
   1ee08:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   1ee0f:	e9 f1 fd ff ff       	jmp    1ec05 <_ZL13stbi__get32leP13stbi__context+0x65>
   1ee14:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   1ee18:	48 98                	cltq
   1ee1a:	49 01 c5             	add    %rax,%r13
   return z + (stbi__get8(s) << 8);
   1ee1d:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   1ee21:	c1 e0 08             	shl    $0x8,%eax
   1ee24:	01 c5                	add    %eax,%ebp
   1ee26:	e9 6d ff ff ff       	jmp    1ed98 <_ZL13stbi__get32leP13stbi__context+0x1f8>
   1ee2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   stbi__uint32 z = stbi__get16le(s);
   1ee30:	45 89 ec             	mov    %r13d,%r12d
      s->img_buffer_end = s->buffer_start+1;
   1ee33:	31 ed                	xor    %ebp,%ebp
   1ee35:	e9 e7 fd ff ff       	jmp    1ec21 <_ZL13stbi__get32leP13stbi__context+0x81>
   1ee3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001ee40 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0>:
static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
   1ee40:	41 57                	push   %r15
   1ee42:	49 89 d7             	mov    %rdx,%r15
   1ee45:	41 56                	push   %r14
   1ee47:	49 89 ce             	mov    %rcx,%r14
   1ee4a:	41 55                	push   %r13
   1ee4c:	49 89 fd             	mov    %rdi,%r13
   1ee4f:	41 54                	push   %r12
   1ee51:	45 89 c4             	mov    %r8d,%r12d
   1ee54:	55                   	push   %rbp
   1ee55:	53                   	push   %rbx
   1ee56:	48 81 ec 78 04 00 00 	sub    $0x478,%rsp
   headerToken = stbi__hdr_gettoken(s,buffer);
   1ee5d:	48 8d 5c 24 70       	lea    0x70(%rsp),%rbx
static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
   1ee62:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
   headerToken = stbi__hdr_gettoken(s,buffer);
   1ee67:	48 89 de             	mov    %rbx,%rsi
   1ee6a:	e8 b1 f6 ff ff       	call   1e520 <_ZL18stbi__hdr_gettokenP13stbi__contextPc>
   if (strcmp(headerToken, "#?RADIANCE") != 0 && strcmp(headerToken, "#?RGBE") != 0)
   1ee6f:	48 8d 35 fd 8c 01 00 	lea    0x18cfd(%rip),%rsi        # 37b73 <_ZSt19piecewise_construct+0x22c>
   1ee76:	48 89 c7             	mov    %rax,%rdi
   headerToken = stbi__hdr_gettoken(s,buffer);
   1ee79:	48 89 c5             	mov    %rax,%rbp
   if (strcmp(headerToken, "#?RADIANCE") != 0 && strcmp(headerToken, "#?RGBE") != 0)
   1ee7c:	e8 7f 79 fe ff       	call   6800 <strcmp@plt>
   1ee81:	85 c0                	test   %eax,%eax
   1ee83:	0f 84 17 02 00 00    	je     1f0a0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x260>
   1ee89:	48 8d 35 ee 8c 01 00 	lea    0x18cee(%rip),%rsi        # 37b7e <_ZSt19piecewise_construct+0x237>
   1ee90:	48 89 ef             	mov    %rbp,%rdi
   1ee93:	e8 68 79 fe ff       	call   6800 <strcmp@plt>
   1ee98:	41 89 c3             	mov    %eax,%r11d
   1ee9b:	85 c0                	test   %eax,%eax
   1ee9d:	0f 85 1d 02 00 00    	jne    1f0c0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x280>
      if (strcmp(token, "FORMAT=32-bit_rle_rgbe") == 0) valid = 1;
   1eea3:	4c 89 3c 24          	mov    %r15,(%rsp)
   1eea7:	48 8d 2d 7b 8c 01 00 	lea    0x18c7b(%rip),%rbp        # 37b29 <_ZSt19piecewise_construct+0x1e2>
   1eeae:	45 89 df             	mov    %r11d,%r15d
   1eeb1:	eb 18                	jmp    1eecb <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x8b>
   1eeb3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1eeb8:	48 89 ee             	mov    %rbp,%rsi
   1eebb:	e8 40 79 fe ff       	call   6800 <strcmp@plt>
   1eec0:	85 c0                	test   %eax,%eax
   1eec2:	b8 01 00 00 00       	mov    $0x1,%eax
   1eec7:	44 0f 44 f8          	cmove  %eax,%r15d
      token = stbi__hdr_gettoken(s,buffer);
   1eecb:	4c 89 ef             	mov    %r13,%rdi
   1eece:	48 89 de             	mov    %rbx,%rsi
   1eed1:	e8 4a f6 ff ff       	call   1e520 <_ZL18stbi__hdr_gettokenP13stbi__contextPc>
   1eed6:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
      if (token[0] == 0) break;
   1eedb:	80 38 00             	cmpb   $0x0,(%rax)
      token = stbi__hdr_gettoken(s,buffer);
   1eede:	48 89 c7             	mov    %rax,%rdi
      if (token[0] == 0) break;
   1eee1:	75 d5                	jne    1eeb8 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x78>
   if (!valid)    return stbi__errpf("unsupported format", "Unsupported HDR format");
   1eee3:	45 89 fb             	mov    %r15d,%r11d
   1eee6:	48 8d 05 53 8c 01 00 	lea    0x18c53(%rip),%rax        # 37b40 <_ZSt19piecewise_construct+0x1f9>
   1eeed:	4c 8b 3c 24          	mov    (%rsp),%r15
   1eef1:	45 85 db             	test   %r11d,%r11d
   1eef4:	0f 84 86 01 00 00    	je     1f080 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x240>
   token = stbi__hdr_gettoken(s,buffer);
   1eefa:	48 89 de             	mov    %rbx,%rsi
   1eefd:	4c 89 ef             	mov    %r13,%rdi
   1ef00:	44 89 1c 24          	mov    %r11d,(%rsp)
   1ef04:	e8 17 f6 ff ff       	call   1e520 <_ZL18stbi__hdr_gettokenP13stbi__contextPc>
   1ef09:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
   if (strncmp(token, "-Y ", 3))  return stbi__errpf("unsupported data layout", "Unsupported HDR format");
   1ef0e:	80 38 2d             	cmpb   $0x2d,(%rax)
   1ef11:	0f 85 99 01 00 00    	jne    1f0b0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x270>
   1ef17:	80 78 01 59          	cmpb   $0x59,0x1(%rax)
   1ef1b:	0f 85 8f 01 00 00    	jne    1f0b0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x270>
   1ef21:	80 78 02 20          	cmpb   $0x20,0x2(%rax)
   1ef25:	44 8b 1c 24          	mov    (%rsp),%r11d
   1ef29:	0f 85 81 01 00 00    	jne    1f0b0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x270>
   token += 3;
   1ef2f:	48 8d 78 03          	lea    0x3(%rax),%rdi
   height = (int) strtol(token, &token, 10);
   1ef33:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
   1ef38:	ba 0a 00 00 00       	mov    $0xa,%edx
   1ef3d:	44 89 1c 24          	mov    %r11d,(%rsp)
   token += 3;
   1ef41:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
   height = (int) strtol(token, &token, 10);
   1ef46:	e8 c5 78 fe ff       	call   6810 <strtol@plt>
   while (*token == ' ') ++token;
   1ef4b:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
   1ef50:	44 8b 1c 24          	mov    (%rsp),%r11d
   height = (int) strtol(token, &token, 10);
   1ef54:	49 89 c1             	mov    %rax,%r9
   while (*token == ' ') ++token;
   1ef57:	80 3f 20             	cmpb   $0x20,(%rdi)
   1ef5a:	75 16                	jne    1ef72 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x132>
   1ef5c:	48 8d 47 01          	lea    0x1(%rdi),%rax
   1ef60:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
   1ef65:	48 89 c7             	mov    %rax,%rdi
   1ef68:	48 83 c0 01          	add    $0x1,%rax
   1ef6c:	80 78 ff 20          	cmpb   $0x20,-0x1(%rax)
   1ef70:	74 ee                	je     1ef60 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x120>
   if (strncmp(token, "+X ", 3))  return stbi__errpf("unsupported data layout", "Unsupported HDR format");
   1ef72:	80 3f 2b             	cmpb   $0x2b,(%rdi)
   1ef75:	44 89 1c 24          	mov    %r11d,(%rsp)
   1ef79:	0f 85 31 01 00 00    	jne    1f0b0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x270>
   1ef7f:	80 7f 01 58          	cmpb   $0x58,0x1(%rdi)
   1ef83:	0f 85 27 01 00 00    	jne    1f0b0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x270>
   1ef89:	80 7f 02 20          	cmpb   $0x20,0x2(%rdi)
   1ef8d:	0f 85 1d 01 00 00    	jne    1f0b0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x270>
   token += 3;
   1ef93:	48 83 c7 03          	add    $0x3,%rdi
   width = (int) strtol(token, NULL, 10);
   1ef97:	31 f6                	xor    %esi,%esi
   1ef99:	ba 0a 00 00 00       	mov    $0xa,%edx
   height = (int) strtol(token, &token, 10);
   1ef9e:	44 89 4c 24 2c       	mov    %r9d,0x2c(%rsp)
   1efa3:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
   token += 3;
   1efa8:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
   width = (int) strtol(token, NULL, 10);
   1efad:	e8 5e 78 fe ff       	call   6810 <strtol@plt>
   if (height > STBI_MAX_DIMENSIONS) return stbi__errpf("too large","Very large image (corrupt?)");
   1efb2:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
   1efb7:	44 8b 1c 24          	mov    (%rsp),%r11d
   width = (int) strtol(token, NULL, 10);
   1efbb:	49 89 c2             	mov    %rax,%r10
   if (height > STBI_MAX_DIMENSIONS) return stbi__errpf("too large","Very large image (corrupt?)");
   1efbe:	41 81 f9 00 00 00 01 	cmp    $0x1000000,%r9d
   1efc5:	0f 8f 05 01 00 00    	jg     1f0d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x290>
   width = (int) strtol(token, NULL, 10);
   1efcb:	89 44 24 40          	mov    %eax,0x40(%rsp)
   if (width > STBI_MAX_DIMENSIONS) return stbi__errpf("too large","Very large image (corrupt?)");
   1efcf:	3d 00 00 00 01       	cmp    $0x1000000,%eax
   1efd4:	0f 8f f6 00 00 00    	jg     1f0d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x290>
   *x = width;
   1efda:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   1efdf:	44 89 10             	mov    %r10d,(%rax)
   *y = height;
   1efe2:	45 89 0f             	mov    %r9d,(%r15)
   if (comp) *comp = 3;
   1efe5:	4d 85 f6             	test   %r14,%r14
   1efe8:	74 07                	je     1eff1 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1b1>
   1efea:	41 c7 06 03 00 00 00 	movl   $0x3,(%r14)
   if (req_comp == 0) req_comp = 3;
   1eff1:	44 89 d0             	mov    %r10d,%eax
   1eff4:	44 09 c8             	or     %r9d,%eax
   1eff7:	45 85 e4             	test   %r12d,%r12d
   1effa:	0f 84 d9 00 00 00    	je     1f0d9 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x299>
   if (a < 0 || b < 0) return 0;
   1f000:	85 c0                	test   %eax,%eax
   1f002:	0f 88 c8 00 00 00    	js     1f0d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x290>
   if (b == 0) return 1; // mul-by-0 is always safe
   1f008:	45 85 c9             	test   %r9d,%r9d
   1f00b:	0f 84 b8 00 00 00    	je     1f0c9 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x289>
   return a <= INT_MAX/b;
   1f011:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1f016:	31 d2                	xor    %edx,%edx
   1f018:	f7 7c 24 2c          	idivl  0x2c(%rsp)
      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);
   1f01c:	41 39 c2             	cmp    %eax,%r10d
   1f01f:	0f 8f ab 00 00 00    	jg     1f0d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x290>
   if (a < 0 || b < 0) return 0;
   1f025:	45 85 e4             	test   %r12d,%r12d
   1f028:	0f 88 a2 00 00 00    	js     1f0d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x290>
   return a <= INT_MAX/b;
   1f02e:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1f033:	31 d2                	xor    %edx,%edx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   1f035:	44 89 d6             	mov    %r10d,%esi
   return a <= INT_MAX/b;
   1f038:	41 f7 fc             	idiv   %r12d
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   1f03b:	41 0f af f1          	imul   %r9d,%esi
   1f03f:	39 c6                	cmp    %eax,%esi
   1f041:	0f 8f 89 00 00 00    	jg     1f0d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x290>
      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);
   1f047:	41 0f af f4          	imul   %r12d,%esi
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   1f04b:	81 fe ff ff ff 1f    	cmp    $0x1fffffff,%esi
   1f051:	7f 7d                	jg     1f0d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x290>
   if (b == 0) return 1; // mul-by-0 is always safe
   1f053:	45 85 c9             	test   %r9d,%r9d
   1f056:	0f 84 b3 00 00 00    	je     1f10f <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x2cf>
   return a <= INT_MAX/b;
   1f05c:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1f061:	31 d2                	xor    %edx,%edx
   1f063:	f7 7c 24 2c          	idivl  0x2c(%rsp)
      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);
   1f067:	41 39 c2             	cmp    %eax,%r10d
   1f06a:	0f 8e 9f 00 00 00    	jle    1f10f <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x2cf>
               return stbi__errpf("outofmem", "Out of memory");
   1f070:	48 8d 05 be 89 01 00 	lea    0x189be(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   1f077:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1f07e:	00 00 
   stbi__g_failure_reason = str;
   1f080:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1f087:	ff ff 
      return stbi__errpf("not HDR", "Corrupt HDR image");
   1f089:	31 ed                	xor    %ebp,%ebp
}
   1f08b:	48 81 c4 78 04 00 00 	add    $0x478,%rsp
   1f092:	48 89 e8             	mov    %rbp,%rax
   1f095:	5b                   	pop    %rbx
   1f096:	5d                   	pop    %rbp
   1f097:	41 5c                	pop    %r12
   1f099:	41 5d                	pop    %r13
   1f09b:	41 5e                	pop    %r14
   1f09d:	41 5f                	pop    %r15
   1f09f:	c3                   	ret
   1f0a0:	41 89 c3             	mov    %eax,%r11d
   1f0a3:	e9 fb fd ff ff       	jmp    1eea3 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x63>
   1f0a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1f0af:	00 
   if (strncmp(token, "-Y ", 3))  return stbi__errpf("unsupported data layout", "Unsupported HDR format");
   1f0b0:	48 8d 05 a4 8a 01 00 	lea    0x18aa4(%rip),%rax        # 37b5b <_ZSt19piecewise_construct+0x214>
   1f0b7:	eb c7                	jmp    1f080 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x240>
   1f0b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1f0c0:	48 8d 05 8c 8a 01 00 	lea    0x18a8c(%rip),%rax        # 37b53 <_ZSt19piecewise_construct+0x20c>
   1f0c7:	eb b7                	jmp    1f080 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x240>
   if (a < 0 || b < 0) return 0;
   1f0c9:	45 85 e4             	test   %r12d,%r12d
   1f0cc:	79 41                	jns    1f10f <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x2cf>
   1f0ce:	66 90                	xchg   %ax,%ax
   if (height > STBI_MAX_DIMENSIONS) return stbi__errpf("too large","Very large image (corrupt?)");
   1f0d0:	48 8d 05 81 89 01 00 	lea    0x18981(%rip),%rax        # 37a58 <_ZSt19piecewise_construct+0x111>
   1f0d7:	eb a7                	jmp    1f080 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x240>
   if (a < 0 || b < 0) return 0;
   1f0d9:	85 c0                	test   %eax,%eax
   1f0db:	78 f3                	js     1f0d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x290>
   if (b == 0) return 1; // mul-by-0 is always safe
   1f0dd:	45 85 c9             	test   %r9d,%r9d
   1f0e0:	74 27                	je     1f109 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x2c9>
   return a <= INT_MAX/b;
   1f0e2:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1f0e7:	31 d2                	xor    %edx,%edx
   1f0e9:	f7 7c 24 2c          	idivl  0x2c(%rsp)
      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);
   1f0ed:	41 39 c2             	cmp    %eax,%r10d
   1f0f0:	7f de                	jg     1f0d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x290>
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   1f0f2:	44 89 d6             	mov    %r10d,%esi
   1f0f5:	b8 aa aa aa 2a       	mov    $0x2aaaaaaa,%eax
   if (req_comp == 0) req_comp = 3;
   1f0fa:	41 bc 03 00 00 00    	mov    $0x3,%r12d
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   1f100:	41 0f af f1          	imul   %r9d,%esi
   if (a < 0 || b < 0) return 0;
   1f104:	e9 36 ff ff ff       	jmp    1f03f <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1ff>
   if (req_comp == 0) req_comp = 3;
   1f109:	41 bc 03 00 00 00    	mov    $0x3,%r12d
   return stbi__malloc(a*b*c*d + add);
   1f10f:	44 89 d7             	mov    %r10d,%edi
   1f112:	44 89 5c 24 10       	mov    %r11d,0x10(%rsp)
   1f117:	41 0f af f9          	imul   %r9d,%edi
   1f11b:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
   1f120:	4c 89 0c 24          	mov    %r9,(%rsp)
   1f124:	41 0f af fc          	imul   %r12d,%edi
   1f128:	c1 e7 02             	shl    $0x2,%edi
   1f12b:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   1f12e:	e8 2d 76 fe ff       	call   6760 <malloc@plt>
   1f133:	48 89 c5             	mov    %rax,%rbp
   if (!hdr_data)
   1f136:	48 85 c0             	test   %rax,%rax
   1f139:	0f 84 31 ff ff ff    	je     1f070 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x230>
   if ( width < 8 || width >= 32768) {
   1f13f:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   1f144:	4c 8b 0c 24          	mov    (%rsp),%r9
   1f148:	41 8d 42 f8          	lea    -0x8(%r10),%eax
   1f14c:	3d f7 7f 00 00       	cmp    $0x7ff7,%eax
   1f151:	0f 87 1e 04 00 00    	ja     1f575 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x735>
      for (j = 0; j < height; ++j) {
   1f157:	45 85 c9             	test   %r9d,%r9d
   1f15a:	44 8b 5c 24 10       	mov    0x10(%rsp),%r11d
   1f15f:	0f 8e 26 ff ff ff    	jle    1f08b <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x24b>
   1f165:	44 89 e0             	mov    %r12d,%eax
      s->img_buffer_end = s->buffer_start+1;
   1f168:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
   1f16d:	4d 89 ee             	mov    %r13,%r14
   1f170:	41 0f af c2          	imul   %r10d,%eax
   1f174:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
      for (j = 0; j < height; ++j) {
   1f179:	c7 44 24 44 00 00 00 	movl   $0x0,0x44(%rsp)
   1f180:	00 
   1f181:	c7 44 24 54 00 00 00 	movl   $0x0,0x54(%rsp)
   1f188:	00 
      scanline = NULL;
   1f189:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
   1f190:	00 00 
      s->img_buffer_end = s->buffer_start+1;
   1f192:	44 89 5c 24 50       	mov    %r11d,0x50(%rsp)
   1f197:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
   1f19b:	49 8d 45 39          	lea    0x39(%r13),%rax
   1f19f:	45 89 e5             	mov    %r12d,%r13d
   1f1a2:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
   1f1a7:	48 89 c5             	mov    %rax,%rbp
         c1 = stbi__get8(s);
   1f1aa:	4c 89 f7             	mov    %r14,%rdi
   1f1ad:	e8 ee c8 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
         c2 = stbi__get8(s);
   1f1b2:	4c 89 f7             	mov    %r14,%rdi
         c1 = stbi__get8(s);
   1f1b5:	41 89 c4             	mov    %eax,%r12d
         c2 = stbi__get8(s);
   1f1b8:	e8 e3 c8 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
         len = stbi__get8(s);
   1f1bd:	4c 89 f7             	mov    %r14,%rdi
         c2 = stbi__get8(s);
   1f1c0:	89 c3                	mov    %eax,%ebx
         len = stbi__get8(s);
   1f1c2:	e8 d9 c8 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   1f1c7:	0f b6 d0             	movzbl %al,%edx
         if (c1 != 2 || c2 != 2 || (len & 0x80)) {
   1f1ca:	41 80 fc 02          	cmp    $0x2,%r12b
   1f1ce:	0f 85 9f 04 00 00    	jne    1f673 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x833>
   1f1d4:	80 fb 02             	cmp    $0x2,%bl
   1f1d7:	0f 85 96 04 00 00    	jne    1f673 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x833>
   1f1dd:	84 c0                	test   %al,%al
   1f1df:	0f 88 32 05 00 00    	js     1f717 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x8d7>
         len <<= 8;
   1f1e5:	c1 e2 08             	shl    $0x8,%edx
         len |= stbi__get8(s);
   1f1e8:	4c 89 f7             	mov    %r14,%rdi
         len <<= 8;
   1f1eb:	89 d3                	mov    %edx,%ebx
         len |= stbi__get8(s);
   1f1ed:	e8 ae c8 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   1f1f2:	0f b6 c0             	movzbl %al,%eax
   1f1f5:	09 d8                	or     %ebx,%eax
         if (len != width) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf("invalid decoded scanline length", "corrupt HDR"); }
   1f1f7:	39 44 24 40          	cmp    %eax,0x40(%rsp)
   1f1fb:	0f 85 f6 04 00 00    	jne    1f6f7 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x8b7>
         if (scanline == NULL) {
   1f201:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
   1f207:	0f 84 36 04 00 00    	je     1f643 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x803>
            while ((nleft = width - i) > 0) {
   1f20d:	8b 44 24 40          	mov    0x40(%rsp),%eax
                  for (z = 0; z < count; ++z)
   1f211:	31 c9                	xor    %ecx,%ecx
            while ((nleft = width - i) > 0) {
   1f213:	85 c0                	test   %eax,%eax
   1f215:	0f 84 66 01 00 00    	je     1f381 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x541>
   1f21b:	44 89 6c 24 58       	mov    %r13d,0x58(%rsp)
   1f220:	41 89 c5             	mov    %eax,%r13d
   1f223:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            i = 0;
   1f228:	45 31 c9             	xor    %r9d,%r9d
   if (s->img_buffer < s->img_buffer_end)
   1f22b:	49 8b 86 c0 00 00 00 	mov    0xc0(%r14),%rax
   1f232:	45 89 ec             	mov    %r13d,%r12d
   1f235:	45 89 cf             	mov    %r9d,%r15d
   1f238:	48 83 c2 04          	add    $0x4,%rdx
   1f23c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
   1f241:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1f248:	49 3b 86 c8 00 00 00 	cmp    0xc8(%r14),%rax
   1f24f:	0f 83 3b 01 00 00    	jae    1f390 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x550>
      return *s->img_buffer++;
   1f255:	48 8d 78 01          	lea    0x1(%rax),%rdi
   1f259:	49 89 be c0 00 00 00 	mov    %rdi,0xc0(%r14)
   1f260:	0f b6 18             	movzbl (%rax),%ebx
               if (count > 128) {
   1f263:	80 fb 80             	cmp    $0x80,%bl
   1f266:	0f 86 64 01 00 00    	jbe    1f3d0 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x590>
   if (s->img_buffer < s->img_buffer_end)
   1f26c:	49 3b be c8 00 00 00 	cmp    0xc8(%r14),%rdi
   1f273:	0f 83 7d 02 00 00    	jae    1f4f6 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x6b6>
      return *s->img_buffer++;
   1f279:	48 8d 47 01          	lea    0x1(%rdi),%rax
   1f27d:	49 89 86 c0 00 00 00 	mov    %rax,0xc0(%r14)
   1f284:	44 0f b6 17          	movzbl (%rdi),%r10d
                  count -= 128;
   1f288:	83 c3 80             	add    $0xffffff80,%ebx
                  if (count > nleft) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf("corrupt", "bad RLE data in HDR"); }
   1f28b:	0f b6 db             	movzbl %bl,%ebx
   1f28e:	44 39 e3             	cmp    %r12d,%ebx
   1f291:	0f 8f 03 03 00 00    	jg     1f59a <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x75a>
   1f297:	42 8d 14 bd 00 00 00 	lea    0x0(,%r15,4),%edx
   1f29e:	00 
   1f29f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
   1f2a4:	49 63 ff             	movslq %r15d,%rdi
   1f2a7:	48 63 d2             	movslq %edx,%rdx
   1f2aa:	48 01 ca             	add    %rcx,%rdx
   1f2ad:	48 01 f2             	add    %rsi,%rdx
   1f2b0:	8d 73 ff             	lea    -0x1(%rbx),%esi
   1f2b3:	48 01 fe             	add    %rdi,%rsi
   1f2b6:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   1f2bb:	48 01 cf             	add    %rcx,%rdi
   1f2be:	48 8d 34 b7          	lea    (%rdi,%rsi,4),%rsi
   1f2c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                     scanline[i++ * 4 + k] = value;
   1f2c8:	44 88 12             	mov    %r10b,(%rdx)
                  for (z = 0; z < count; ++z)
   1f2cb:	48 83 c2 04          	add    $0x4,%rdx
   1f2cf:	48 39 d6             	cmp    %rdx,%rsi
   1f2d2:	75 f4                	jne    1f2c8 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x488>
                     scanline[i++ * 4 + k] = value;
   1f2d4:	41 01 df             	add    %ebx,%r15d
            while ((nleft = width - i) > 0) {
   1f2d7:	45 89 ec             	mov    %r13d,%r12d
   1f2da:	45 29 fc             	sub    %r15d,%r12d
   1f2dd:	45 85 e4             	test   %r12d,%r12d
   1f2e0:	0f 8f 62 ff ff ff    	jg     1f248 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x408>
         for (k = 0; k < 4; ++k) {
   1f2e6:	48 83 c1 01          	add    $0x1,%rcx
   1f2ea:	48 83 f9 04          	cmp    $0x4,%rcx
   1f2ee:	0f 85 2f ff ff ff    	jne    1f223 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x3e3>
         for (i=0; i < width; ++i)
   1f2f4:	8b 44 24 40          	mov    0x40(%rsp),%eax
   1f2f8:	44 8b 6c 24 58       	mov    0x58(%rsp),%r13d
   1f2fd:	85 c0                	test   %eax,%eax
   1f2ff:	74 51                	je     1f352 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x512>
   1f301:	48 63 44 24 54       	movslq 0x54(%rsp),%rax
   1f306:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
   1f30b:	49 63 dd             	movslq %r13d,%rbx
   1f30e:	48 89 2c 24          	mov    %rbp,(%rsp)
   1f312:	48 8d 0c 9d 00 00 00 	lea    0x0(,%rbx,4),%rcx
   1f319:	00 
   1f31a:	48 8d 1c 82          	lea    (%rdx,%rax,4),%rbx
   1f31e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   1f323:	8b 54 24 38          	mov    0x38(%rsp),%edx
   1f327:	48 89 dd             	mov    %rbx,%rbp
   1f32a:	48 89 cb             	mov    %rcx,%rbx
   1f32d:	49 89 c4             	mov    %rax,%r12
   1f330:	4c 8d 3c 90          	lea    (%rax,%rdx,4),%r15
            stbi__hdr_convert(hdr_data+(j*width + i)*req_comp, scanline + i*4, req_comp);
   1f334:	4c 89 e6             	mov    %r12,%rsi
   1f337:	48 89 ef             	mov    %rbp,%rdi
   1f33a:	44 89 ea             	mov    %r13d,%edx
         for (i=0; i < width; ++i)
   1f33d:	49 83 c4 04          	add    $0x4,%r12
            stbi__hdr_convert(hdr_data+(j*width + i)*req_comp, scanline + i*4, req_comp);
   1f341:	e8 aa 36 ff ff       	call   129f0 <_ZL17stbi__hdr_convertPfPhi>
         for (i=0; i < width; ++i)
   1f346:	48 01 dd             	add    %rbx,%rbp
   1f349:	4d 39 e7             	cmp    %r12,%r15
   1f34c:	75 e6                	jne    1f334 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x4f4>
   1f34e:	48 8b 2c 24          	mov    (%rsp),%rbp
      for (j = 0; j < height; ++j) {
   1f352:	83 44 24 44 01       	addl   $0x1,0x44(%rsp)
   1f357:	8b 54 24 5c          	mov    0x5c(%rsp),%edx
   1f35b:	8b 44 24 44          	mov    0x44(%rsp),%eax
   1f35f:	01 54 24 54          	add    %edx,0x54(%rsp)
   1f363:	39 44 24 2c          	cmp    %eax,0x2c(%rsp)
   1f367:	0f 85 3d fe ff ff    	jne    1f1aa <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x36a>
         STBI_FREE(scanline);
   1f36d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
   1f372:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
   1f377:	e8 24 73 fe ff       	call   66a0 <free@plt>
   1f37c:	e9 0a fd ff ff       	jmp    1f08b <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x24b>
         for (k = 0; k < 4; ++k) {
   1f381:	48 83 c1 01          	add    $0x1,%rcx
   1f385:	48 83 f9 04          	cmp    $0x4,%rcx
   1f389:	75 f6                	jne    1f381 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x541>
   1f38b:	eb c5                	jmp    1f352 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x512>
   1f38d:	0f 1f 00             	nopl   (%rax)
   if (s->read_from_callbacks) {
   1f390:	41 8b 7e 30          	mov    0x30(%r14),%edi
   1f394:	85 ff                	test   %edi,%edi
   1f396:	0f 84 3b ff ff ff    	je     1f2d7 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x497>
      stbi__refill_buffer(s);
   1f39c:	4c 89 f7             	mov    %r14,%rdi
   1f39f:	48 89 0c 24          	mov    %rcx,(%rsp)
   1f3a3:	e8 d8 1e ff ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   1f3a8:	49 8b 86 c0 00 00 00 	mov    0xc0(%r14),%rax
   1f3af:	48 8b 0c 24          	mov    (%rsp),%rcx
   1f3b3:	48 8d 78 01          	lea    0x1(%rax),%rdi
   1f3b7:	49 89 be c0 00 00 00 	mov    %rdi,0xc0(%r14)
   1f3be:	0f b6 18             	movzbl (%rax),%ebx
   1f3c1:	e9 9d fe ff ff       	jmp    1f263 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x423>
   1f3c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f3cd:	00 00 00 
                  if (count > nleft) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf("corrupt", "bad RLE data in HDR"); }
   1f3d0:	0f b6 d3             	movzbl %bl,%edx
   1f3d3:	44 39 e2             	cmp    %r12d,%edx
   1f3d6:	0f 8f be 01 00 00    	jg     1f59a <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x75a>
                  for (z = 0; z < count; ++z)
   1f3dc:	48 89 f8             	mov    %rdi,%rax
   1f3df:	85 d2                	test   %edx,%edx
   1f3e1:	0f 84 f0 fe ff ff    	je     1f2d7 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x497>
   1f3e7:	42 8d 1c bd 00 00 00 	lea    0x0(,%r15,4),%ebx
   1f3ee:	00 
   1f3ef:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   1f3f4:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
   1f3f9:	4d 63 d7             	movslq %r15d,%r10
   1f3fc:	48 63 db             	movslq %ebx,%rbx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1f3ff:	89 54 24 28          	mov    %edx,0x28(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   1f403:	49 8b b6 c8 00 00 00 	mov    0xc8(%r14),%rsi
   1f40a:	48 01 cb             	add    %rcx,%rbx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1f40d:	44 89 6c 24 10       	mov    %r13d,0x10(%rsp)
   1f412:	49 89 ed             	mov    %rbp,%r13
   1f415:	4c 89 f5             	mov    %r14,%rbp
   1f418:	48 01 c3             	add    %rax,%rbx
   1f41b:	8d 42 ff             	lea    -0x1(%rdx),%eax
   1f41e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   1f423:	4c 01 d0             	add    %r10,%rax
   1f426:	4d 8d 14 09          	lea    (%r9,%rcx,1),%r10
   1f42a:	4d 8d 24 82          	lea    (%r10,%rax,4),%r12
   if (s->img_buffer < s->img_buffer_end)
   1f42e:	48 89 f8             	mov    %rdi,%rax
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1f431:	49 8d 7e 38          	lea    0x38(%r14),%rdi
   1f435:	48 89 3c 24          	mov    %rdi,(%rsp)
   1f439:	eb 23                	jmp    1f45e <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x61e>
   1f43b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   1f440:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f444:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
   1f44b:	44 0f b6 30          	movzbl (%rax),%r14d
   1f44f:	48 89 d0             	mov    %rdx,%rax
                     scanline[i++ * 4 + k] = stbi__get8(s);
   1f452:	44 88 33             	mov    %r14b,(%rbx)
                  for (z = 0; z < count; ++z)
   1f455:	48 83 c3 04          	add    $0x4,%rbx
   1f459:	4c 39 e3             	cmp    %r12,%rbx
   1f45c:	74 6a                	je     1f4c8 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x688>
   if (s->img_buffer < s->img_buffer_end)
   1f45e:	48 39 f0             	cmp    %rsi,%rax
   1f461:	72 dd                	jb     1f440 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x600>
   if (s->read_from_callbacks) {
   1f463:	8b 55 30             	mov    0x30(%rbp),%edx
   return 0;
   1f466:	45 31 f6             	xor    %r14d,%r14d
   if (s->read_from_callbacks) {
   1f469:	85 d2                	test   %edx,%edx
   1f46b:	74 e5                	je     1f452 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x612>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1f46d:	48 8b 34 24          	mov    (%rsp),%rsi
   1f471:	8b 55 34             	mov    0x34(%rbp),%edx
   1f474:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   1f478:	ff 55 10             	call   *0x10(%rbp)
   1f47b:	48 63 f0             	movslq %eax,%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1f47e:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
   1f485:	48 2b 85 d0 00 00 00 	sub    0xd0(%rbp),%rax
   1f48c:	01 85 b8 00 00 00    	add    %eax,0xb8(%rbp)
      s->img_buffer_end = s->buffer_start+1;
   1f492:	4c 89 e8             	mov    %r13,%rax
   if (n == 0) {
   1f495:	85 f6                	test   %esi,%esi
   1f497:	75 4f                	jne    1f4e8 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x6a8>
      s->read_from_callbacks = 0;
   1f499:	c7 45 30 00 00 00 00 	movl   $0x0,0x30(%rbp)
      s->img_buffer_end = s->buffer_start+1;
   1f4a0:	4c 89 ee             	mov    %r13,%rsi
      *s->img_buffer = 0;
   1f4a3:	c6 45 38 00          	movb   $0x0,0x38(%rbp)
                     scanline[i++ * 4 + k] = stbi__get8(s);
   1f4a7:	44 88 33             	mov    %r14b,(%rbx)
                  for (z = 0; z < count; ++z)
   1f4aa:	48 83 c3 04          	add    $0x4,%rbx
   1f4ae:	48 89 b5 c8 00 00 00 	mov    %rsi,0xc8(%rbp)
      return *s->img_buffer++;
   1f4b5:	4c 89 ad c0 00 00 00 	mov    %r13,0xc0(%rbp)
                  for (z = 0; z < count; ++z)
   1f4bc:	4c 39 e3             	cmp    %r12,%rbx
   1f4bf:	75 9d                	jne    1f45e <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x61e>
   1f4c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                     scanline[i++ * 4 + k] = stbi__get8(s);
   1f4c8:	8b 54 24 28          	mov    0x28(%rsp),%edx
   1f4cc:	49 89 ee             	mov    %rbp,%r14
   1f4cf:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
   1f4d4:	4c 89 ed             	mov    %r13,%rbp
   1f4d7:	44 8b 6c 24 10       	mov    0x10(%rsp),%r13d
   1f4dc:	41 01 d7             	add    %edx,%r15d
   1f4df:	e9 f3 fd ff ff       	jmp    1f2d7 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x497>
   1f4e4:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   1f4e8:	48 8b 0c 24          	mov    (%rsp),%rcx
      return *s->img_buffer++;
   1f4ec:	44 0f b6 75 38       	movzbl 0x38(%rbp),%r14d
      s->img_buffer_end = s->buffer_start + n;
   1f4f1:	48 01 ce             	add    %rcx,%rsi
   1f4f4:	eb b1                	jmp    1f4a7 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x667>
   if (s->read_from_callbacks) {
   1f4f6:	41 8b 76 30          	mov    0x30(%r14),%esi
   1f4fa:	48 89 f8             	mov    %rdi,%rax
   return 0;
   1f4fd:	45 31 d2             	xor    %r10d,%r10d
   if (s->read_from_callbacks) {
   1f500:	85 f6                	test   %esi,%esi
   1f502:	0f 84 80 fd ff ff    	je     1f288 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x448>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1f508:	49 8d 46 38          	lea    0x38(%r14),%rax
   1f50c:	41 8b 56 34          	mov    0x34(%r14),%edx
   1f510:	49 8b 7e 28          	mov    0x28(%r14),%rdi
   1f514:	48 89 0c 24          	mov    %rcx,(%rsp)
   1f518:	44 88 54 24 28       	mov    %r10b,0x28(%rsp)
   1f51d:	48 89 c6             	mov    %rax,%rsi
   1f520:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   1f525:	41 ff 56 10          	call   *0x10(%r14)
   if (n == 0) {
   1f529:	48 8b 0c 24          	mov    (%rsp),%rcx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1f52d:	48 63 d0             	movslq %eax,%rdx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1f530:	49 8b 86 c0 00 00 00 	mov    0xc0(%r14),%rax
   1f537:	49 2b 86 d0 00 00 00 	sub    0xd0(%r14),%rax
   1f53e:	41 01 86 b8 00 00 00 	add    %eax,0xb8(%r14)
   if (n == 0) {
   1f545:	85 d2                	test   %edx,%edx
      s->img_buffer_end = s->buffer_start+1;
   1f547:	48 89 e8             	mov    %rbp,%rax
   if (n == 0) {
   1f54a:	75 6e                	jne    1f5ba <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x77a>
      *s->img_buffer = 0;
   1f54c:	41 c6 46 38 00       	movb   $0x0,0x38(%r14)
   1f551:	44 0f b6 54 24 28    	movzbl 0x28(%rsp),%r10d
      s->img_buffer_end = s->buffer_start+1;
   1f557:	48 89 ea             	mov    %rbp,%rdx
      s->read_from_callbacks = 0;
   1f55a:	41 c7 46 30 00 00 00 	movl   $0x0,0x30(%r14)
   1f561:	00 
      *s->img_buffer = 0;
   1f562:	49 89 96 c8 00 00 00 	mov    %rdx,0xc8(%r14)
      return *s->img_buffer++;
   1f569:	49 89 ae c0 00 00 00 	mov    %rbp,0xc0(%r14)
   1f570:	e9 13 fd ff ff       	jmp    1f288 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x448>
      for (j=0; j < height; ++j) {
   1f575:	31 c9                	xor    %ecx,%ecx
   1f577:	41 39 c9             	cmp    %ecx,%r9d
   1f57a:	0f 8e 0b fb ff ff    	jle    1f08b <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x24b>
   1f580:	44 8d 59 01          	lea    0x1(%rcx),%r11d
         for (i=0; i < width; ++i) {
   1f584:	45 31 c0             	xor    %r8d,%r8d
   1f587:	45 39 c2             	cmp    %r8d,%r10d
   1f58a:	7f 40                	jg     1f5cc <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x78c>
      for (j=0; j < height; ++j) {
   1f58c:	44 89 d9             	mov    %r11d,%ecx
   1f58f:	41 39 c9             	cmp    %ecx,%r9d
   1f592:	0f 8e f3 fa ff ff    	jle    1f08b <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x24b>
   1f598:	eb e6                	jmp    1f580 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x740>
                  if (count > nleft) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf("corrupt", "bad RLE data in HDR"); }
   1f59a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
   1f59f:	e8 fc 70 fe ff       	call   66a0 <free@plt>
   1f5a4:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
   1f5a9:	e8 f2 70 fe ff       	call   66a0 <free@plt>
   1f5ae:	48 8d 05 41 85 01 00 	lea    0x18541(%rip),%rax        # 37af6 <_ZSt19piecewise_construct+0x1af>
   1f5b5:	e9 c6 fa ff ff       	jmp    1f080 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x240>
      s->img_buffer_end = s->buffer_start + n;
   1f5ba:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
      return *s->img_buffer++;
   1f5bf:	45 0f b6 56 38       	movzbl 0x38(%r14),%r10d
      s->img_buffer_end = s->buffer_start + n;
   1f5c4:	48 01 d6             	add    %rdx,%rsi
   1f5c7:	48 89 f2             	mov    %rsi,%rdx
   1f5ca:	eb 96                	jmp    1f562 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x722>
            stbi__hdr_convert(hdr_data + j * width * req_comp + i * req_comp, rgbe, req_comp);
   1f5cc:	41 89 ce             	mov    %ecx,%r14d
   1f5cf:	45 89 c7             	mov    %r8d,%r15d
         for (i=0; i < width; ++i) {
   1f5d2:	41 83 c0 01          	add    $0x1,%r8d
            stbi__hdr_convert(hdr_data + j * width * req_comp + i * req_comp, rgbe, req_comp);
   1f5d6:	45 0f af f2          	imul   %r10d,%r14d
   1f5da:	45 0f af fc          	imul   %r12d,%r15d
   1f5de:	45 0f af f4          	imul   %r12d,%r14d
   1f5e2:	49 63 de             	movslq %r14d,%rbx
   1f5e5:	4c 8d 74 24 64       	lea    0x64(%rsp),%r14
            stbi__getn(s, rgbe, 4);
   1f5ea:	ba 04 00 00 00       	mov    $0x4,%edx
   1f5ef:	4c 89 f6             	mov    %r14,%rsi
   1f5f2:	4c 89 ef             	mov    %r13,%rdi
   1f5f5:	44 89 5c 24 18       	mov    %r11d,0x18(%rsp)
   1f5fa:	44 89 44 24 28       	mov    %r8d,0x28(%rsp)
   1f5ff:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   1f603:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
   1f608:	4c 89 0c 24          	mov    %r9,(%rsp)
   1f60c:	e8 7f 25 ff ff       	call   11b90 <_ZL10stbi__getnP13stbi__contextPhi>
            stbi__hdr_convert(hdr_data + j * width * req_comp + i * req_comp, rgbe, req_comp);
   1f611:	49 63 c7             	movslq %r15d,%rax
   1f614:	44 89 e2             	mov    %r12d,%edx
   1f617:	4c 89 f6             	mov    %r14,%rsi
   1f61a:	48 01 d8             	add    %rbx,%rax
   1f61d:	48 8d 7c 85 00       	lea    0x0(%rbp,%rax,4),%rdi
   1f622:	e8 c9 33 ff ff       	call   129f0 <_ZL17stbi__hdr_convertPfPhi>
   1f627:	44 8b 5c 24 18       	mov    0x18(%rsp),%r11d
   1f62c:	44 8b 44 24 28       	mov    0x28(%rsp),%r8d
   1f631:	8b 4c 24 10          	mov    0x10(%rsp),%ecx
   1f635:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   1f63a:	4c 8b 0c 24          	mov    (%rsp),%r9
         for (i=0; i < width; ++i) {
   1f63e:	e9 44 ff ff ff       	jmp    1f587 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x747>
   return stbi__mul2sizes_valid(a, b) && stbi__addsizes_valid(a*b, add);
   1f643:	8b 44 24 40          	mov    0x40(%rsp),%eax
   1f647:	8d 3c 85 00 00 00 00 	lea    0x0(,%rax,4),%edi
   return stbi__malloc(a*b + add);
   1f64e:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   1f651:	e8 0a 71 fe ff       	call   6760 <malloc@plt>
   1f656:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
            if (!scanline) {
   1f65b:	48 85 c0             	test   %rax,%rax
   1f65e:	0f 85 a9 fb ff ff    	jne    1f20d <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x3cd>
               STBI_FREE(hdr_data);
   1f664:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
   1f669:	e8 32 70 fe ff       	call   66a0 <free@plt>
   1f66e:	e9 fd f9 ff ff       	jmp    1f070 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x230>
   1f673:	44 89 e9             	mov    %r13d,%ecx
   1f676:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
   1f67b:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
   1f680:	4d 89 f5             	mov    %r14,%r13
   1f683:	44 8b 5c 24 50       	mov    0x50(%rsp),%r11d
   1f688:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
   1f68d:	45 89 e6             	mov    %r12d,%r14d
   1f690:	41 89 cc             	mov    %ecx,%r12d
            rgbe[0] = (stbi_uc) c1;
   1f693:	44 88 74 24 64       	mov    %r14b,0x64(%rsp)
            rgbe[3] = (stbi_uc) stbi__get8(s);
   1f698:	4c 89 ef             	mov    %r13,%rdi
            stbi__hdr_convert(hdr_data, rgbe, req_comp);
   1f69b:	4c 8d 74 24 64       	lea    0x64(%rsp),%r14
   1f6a0:	45 89 e7             	mov    %r12d,%r15d
   1f6a3:	44 89 5c 24 28       	mov    %r11d,0x28(%rsp)
   1f6a8:	4c 89 54 24 10       	mov    %r10,0x10(%rsp)
   1f6ad:	4c 89 0c 24          	mov    %r9,(%rsp)
            rgbe[1] = (stbi_uc) c2;
   1f6b1:	88 5c 24 65          	mov    %bl,0x65(%rsp)
            rgbe[2] = (stbi_uc) len;
   1f6b5:	31 db                	xor    %ebx,%ebx
   1f6b7:	88 44 24 66          	mov    %al,0x66(%rsp)
            rgbe[3] = (stbi_uc) stbi__get8(s);
   1f6bb:	e8 e0 c3 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
            stbi__hdr_convert(hdr_data, rgbe, req_comp);
   1f6c0:	44 89 e2             	mov    %r12d,%edx
   1f6c3:	4c 89 f6             	mov    %r14,%rsi
   1f6c6:	48 89 ef             	mov    %rbp,%rdi
            rgbe[3] = (stbi_uc) stbi__get8(s);
   1f6c9:	88 44 24 67          	mov    %al,0x67(%rsp)
            stbi__hdr_convert(hdr_data, rgbe, req_comp);
   1f6cd:	e8 1e 33 ff ff       	call   129f0 <_ZL17stbi__hdr_convertPfPhi>
            STBI_FREE(scanline);
   1f6d2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
   1f6d7:	e8 c4 6f fe ff       	call   66a0 <free@plt>
            goto main_decode_loop; // yes, this makes no sense
   1f6dc:	4c 8b 0c 24          	mov    (%rsp),%r9
   1f6e0:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
            j = 0;
   1f6e5:	31 c9                	xor    %ecx,%ecx
   1f6e7:	44 8b 5c 24 28       	mov    0x28(%rsp),%r11d
   1f6ec:	41 b8 02 00 00 00    	mov    $0x2,%r8d
   1f6f2:	e9 f3 fe ff ff       	jmp    1f5ea <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x7aa>
         if (len != width) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf("invalid decoded scanline length", "corrupt HDR"); }
   1f6f7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
   1f6fc:	e8 9f 6f fe ff       	call   66a0 <free@plt>
   1f701:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
   1f706:	e8 95 6f fe ff       	call   66a0 <free@plt>
   1f70b:	48 8d 05 b6 90 01 00 	lea    0x190b6(%rip),%rax        # 387c8 <_ZL11stbi__bmask+0x48>
   1f712:	e9 69 f9 ff ff       	jmp    1f080 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x240>
         c2 = stbi__get8(s);
   1f717:	45 89 ec             	mov    %r13d,%r12d
   1f71a:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
   1f71f:	4d 89 f5             	mov    %r14,%r13
   1f722:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
   1f727:	44 8b 5c 24 50       	mov    0x50(%rsp),%r11d
   1f72c:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
         c1 = stbi__get8(s);
   1f731:	41 be 02 00 00 00    	mov    $0x2,%r14d
   1f737:	e9 57 ff ff ff       	jmp    1f693 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x853>
   1f73c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001f740 <_ZL16stbi__get_markerP10stbi__jpeg>:
{
   1f740:	41 55                	push   %r13
   1f742:	41 54                	push   %r12
   1f744:	55                   	push   %rbp
   1f745:	48 89 fd             	mov    %rdi,%rbp
   1f748:	53                   	push   %rbx
   1f749:	48 83 ec 08          	sub    $0x8,%rsp
   if (j->marker != STBI__MARKER_none) { x = j->marker; j->marker = STBI__MARKER_none; return x; }
   1f74d:	44 0f b6 a7 28 48 00 	movzbl 0x4828(%rdi),%r12d
   1f754:	00 
   1f755:	41 80 fc ff          	cmp    $0xff,%r12b
   1f759:	74 15                	je     1f770 <_ZL16stbi__get_markerP10stbi__jpeg+0x30>
   1f75b:	c6 87 28 48 00 00 ff 	movb   $0xff,0x4828(%rdi)
}
   1f762:	48 83 c4 08          	add    $0x8,%rsp
   1f766:	44 89 e0             	mov    %r12d,%eax
   1f769:	5b                   	pop    %rbx
   1f76a:	5d                   	pop    %rbp
   1f76b:	41 5c                	pop    %r12
   1f76d:	41 5d                	pop    %r13
   1f76f:	c3                   	ret
   x = stbi__get8(j->s);
   1f770:	48 8b 1f             	mov    (%rdi),%rbx
   if (s->img_buffer < s->img_buffer_end)
   1f773:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1f77a:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1f781:	73 4d                	jae    1f7d0 <_ZL16stbi__get_markerP10stbi__jpeg+0x90>
      return *s->img_buffer++;
   1f783:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f787:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1f78e:	0f b6 10             	movzbl (%rax),%edx
   if (x != 0xff) return STBI__MARKER_none;
   1f791:	80 fa ff             	cmp    $0xff,%dl
   1f794:	75 cc                	jne    1f762 <_ZL16stbi__get_markerP10stbi__jpeg+0x22>
   1f796:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f79d:	00 00 00 
      x = stbi__get8(j->s); // consume repeated 0xff fill bytes
   1f7a0:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
   if (s->img_buffer < s->img_buffer_end)
   1f7a4:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   1f7ab:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   1f7b2:	73 7c                	jae    1f830 <_ZL16stbi__get_markerP10stbi__jpeg+0xf0>
      return *s->img_buffer++;
   1f7b4:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f7b8:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1f7bf:	44 0f b6 20          	movzbl (%rax),%r12d
   while (x == 0xff)
   1f7c3:	41 80 fc ff          	cmp    $0xff,%r12b
   1f7c7:	74 d7                	je     1f7a0 <_ZL16stbi__get_markerP10stbi__jpeg+0x60>
   1f7c9:	eb 97                	jmp    1f762 <_ZL16stbi__get_markerP10stbi__jpeg+0x22>
   1f7cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   1f7d0:	8b 53 30             	mov    0x30(%rbx),%edx
   1f7d3:	85 d2                	test   %edx,%edx
   1f7d5:	74 8b                	je     1f762 <_ZL16stbi__get_markerP10stbi__jpeg+0x22>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1f7d7:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   1f7db:	8b 53 34             	mov    0x34(%rbx),%edx
   1f7de:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1f7e2:	4c 89 ee             	mov    %r13,%rsi
   1f7e5:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1f7e8:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   1f7ef:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1f7f3:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1f7fa:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   1f800:	85 c0                	test   %eax,%eax
   1f802:	0f 85 b8 00 00 00    	jne    1f8c0 <_ZL16stbi__get_markerP10stbi__jpeg+0x180>
      s->read_from_callbacks = 0;
   1f808:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1f80f:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1f813:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   1f81a:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   if (x != 0xff) return STBI__MARKER_none;
   1f821:	e9 3c ff ff ff       	jmp    1f762 <_ZL16stbi__get_markerP10stbi__jpeg+0x22>
   1f826:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f82d:	00 00 00 
   if (s->read_from_callbacks) {
   1f830:	8b 43 30             	mov    0x30(%rbx),%eax
   1f833:	85 c0                	test   %eax,%eax
   1f835:	75 19                	jne    1f850 <_ZL16stbi__get_markerP10stbi__jpeg+0x110>
}
   1f837:	48 83 c4 08          	add    $0x8,%rsp
   return 0;
   1f83b:	45 31 e4             	xor    %r12d,%r12d
}
   1f83e:	5b                   	pop    %rbx
   1f83f:	44 89 e0             	mov    %r12d,%eax
   1f842:	5d                   	pop    %rbp
   1f843:	41 5c                	pop    %r12
   1f845:	41 5d                	pop    %r13
   1f847:	c3                   	ret
   1f848:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1f84f:	00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1f850:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   1f854:	8b 53 34             	mov    0x34(%rbx),%edx
   1f857:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   1f85b:	4c 89 ee             	mov    %r13,%rsi
   1f85e:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1f861:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   1f868:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   1f86f:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   1f875:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   1f879:	85 c0                	test   %eax,%eax
   1f87b:	75 23                	jne    1f8a0 <_ZL16stbi__get_markerP10stbi__jpeg+0x160>
      s->read_from_callbacks = 0;
   1f87d:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   1f884:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   1f888:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   1f88f:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   while (x == 0xff)
   1f896:	eb 9f                	jmp    1f837 <_ZL16stbi__get_markerP10stbi__jpeg+0xf7>
   1f898:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1f89f:	00 
      s->img_buffer_end = s->buffer_start + n;
   1f8a0:	48 98                	cltq
      return *s->img_buffer++;
   1f8a2:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   1f8a9:	44 0f b6 63 38       	movzbl 0x38(%rbx),%r12d
      s->img_buffer_end = s->buffer_start + n;
   1f8ae:	49 01 c5             	add    %rax,%r13
   1f8b1:	4c 89 ab c8 00 00 00 	mov    %r13,0xc8(%rbx)
      return *s->img_buffer++;
   1f8b8:	e9 06 ff ff ff       	jmp    1f7c3 <_ZL16stbi__get_markerP10stbi__jpeg+0x83>
   1f8bd:	0f 1f 00             	nopl   (%rax)
      s->img_buffer_end = s->buffer_start + n;
   1f8c0:	48 98                	cltq
      return *s->img_buffer++;
   1f8c2:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   1f8c9:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   1f8cd:	49 01 c5             	add    %rax,%r13
   1f8d0:	4c 89 ab c8 00 00 00 	mov    %r13,0xc8(%rbx)
      return *s->img_buffer++;
   1f8d7:	e9 b5 fe ff ff       	jmp    1f791 <_ZL16stbi__get_markerP10stbi__jpeg+0x51>
   1f8dc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>:
{
   1f8e0:	41 56                	push   %r14
   1f8e2:	41 55                	push   %r13
      j->code_buffer |= b << (24 - j->code_bits);
   1f8e4:	41 bd 18 00 00 00    	mov    $0x18,%r13d
{
   1f8ea:	41 54                	push   %r12
   1f8ec:	55                   	push   %rbp
   1f8ed:	53                   	push   %rbx
   1f8ee:	48 89 fb             	mov    %rdi,%rbx
      unsigned int b = j->nomore ? 0 : stbi__get8(j->s);
   1f8f1:	8b 8b 2c 48 00 00    	mov    0x482c(%rbx),%ecx
   1f8f7:	85 c9                	test   %ecx,%ecx
   1f8f9:	74 35                	je     1f930 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x50>
      j->code_bits += 8;
   1f8fb:	8b 83 24 48 00 00    	mov    0x4824(%rbx),%eax
   1f901:	83 c0 08             	add    $0x8,%eax
   } while (j->code_bits <= 24);
   1f904:	83 f8 18             	cmp    $0x18,%eax
   1f907:	7f 0f                	jg     1f918 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x38>
   1f909:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      j->code_bits += 8;
   1f910:	83 c0 08             	add    $0x8,%eax
   } while (j->code_bits <= 24);
   1f913:	83 f8 18             	cmp    $0x18,%eax
   1f916:	7e f8                	jle    1f910 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x30>
   1f918:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
}
   1f91e:	5b                   	pop    %rbx
   1f91f:	5d                   	pop    %rbp
   1f920:	41 5c                	pop    %r12
   1f922:	41 5d                	pop    %r13
   1f924:	41 5e                	pop    %r14
   1f926:	c3                   	ret
   1f927:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1f92e:	00 00 
      unsigned int b = j->nomore ? 0 : stbi__get8(j->s);
   1f930:	48 8b 2b             	mov    (%rbx),%rbp
   if (s->img_buffer < s->img_buffer_end)
   1f933:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
   1f93a:	48 3b 85 c8 00 00 00 	cmp    0xc8(%rbp),%rax
   1f941:	0f 83 91 00 00 00    	jae    1f9d8 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0xf8>
      return *s->img_buffer++;
   1f947:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f94b:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
      unsigned int b = j->nomore ? 0 : stbi__get8(j->s);
   1f952:	44 0f b6 20          	movzbl (%rax),%r12d
      if (b == 0xff) {
   1f956:	41 81 fc ff 00 00 00 	cmp    $0xff,%r12d
   1f95d:	74 31                	je     1f990 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0xb0>
      j->code_buffer |= b << (24 - j->code_bits);
   1f95f:	8b 83 24 48 00 00    	mov    0x4824(%rbx),%eax
   1f965:	44 89 e9             	mov    %r13d,%ecx
   1f968:	29 c1                	sub    %eax,%ecx
      j->code_bits += 8;
   1f96a:	83 c0 08             	add    $0x8,%eax
      j->code_buffer |= b << (24 - j->code_bits);
   1f96d:	41 d3 e4             	shl    %cl,%r12d
      j->code_bits += 8;
   1f970:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
      j->code_buffer |= b << (24 - j->code_bits);
   1f976:	44 09 a3 20 48 00 00 	or     %r12d,0x4820(%rbx)
   } while (j->code_bits <= 24);
   1f97d:	83 f8 18             	cmp    $0x18,%eax
   1f980:	0f 8e 6b ff ff ff    	jle    1f8f1 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x11>
}
   1f986:	5b                   	pop    %rbx
   1f987:	5d                   	pop    %rbp
   1f988:	41 5c                	pop    %r12
   1f98a:	41 5d                	pop    %r13
   1f98c:	41 5e                	pop    %r14
   1f98e:	c3                   	ret
   1f98f:	90                   	nop
         while (c == 0xff) c = stbi__get8(j->s); // consume fill bytes
   1f990:	48 8b 2b             	mov    (%rbx),%rbp
   if (s->img_buffer < s->img_buffer_end)
   1f993:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
   1f99a:	48 3b 85 c8 00 00 00 	cmp    0xc8(%rbp),%rax
   1f9a1:	73 4d                	jae    1f9f0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x110>
      return *s->img_buffer++;
   1f9a3:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f9a7:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
   1f9ae:	0f b6 10             	movzbl (%rax),%edx
   1f9b1:	89 d1                	mov    %edx,%ecx
         while (c == 0xff) c = stbi__get8(j->s); // consume fill bytes
   1f9b3:	81 fa ff 00 00 00    	cmp    $0xff,%edx
   1f9b9:	74 d5                	je     1f990 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0xb0>
         if (c != 0) {
   1f9bb:	85 d2                	test   %edx,%edx
   1f9bd:	74 a0                	je     1f95f <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x7f>
            j->marker = (unsigned char) c;
   1f9bf:	88 8b 28 48 00 00    	mov    %cl,0x4828(%rbx)
            j->nomore = 1;
   1f9c5:	c7 83 2c 48 00 00 01 	movl   $0x1,0x482c(%rbx)
   1f9cc:	00 00 00 
            return;
   1f9cf:	e9 4a ff ff ff       	jmp    1f91e <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x3e>
   1f9d4:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   1f9d8:	8b 55 30             	mov    0x30(%rbp),%edx
   1f9db:	85 d2                	test   %edx,%edx
   1f9dd:	75 71                	jne    1fa50 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x170>
{
   1f9df:	45 31 e4             	xor    %r12d,%r12d
   1f9e2:	e9 78 ff ff ff       	jmp    1f95f <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x7f>
   1f9e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1f9ee:	00 00 
   if (s->read_from_callbacks) {
   1f9f0:	8b 45 30             	mov    0x30(%rbp),%eax
   1f9f3:	85 c0                	test   %eax,%eax
   1f9f5:	0f 84 64 ff ff ff    	je     1f95f <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x7f>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1f9fb:	4c 8d 75 38          	lea    0x38(%rbp),%r14
   1f9ff:	8b 55 34             	mov    0x34(%rbp),%edx
   1fa02:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   1fa06:	4c 89 f6             	mov    %r14,%rsi
   1fa09:	ff 55 10             	call   *0x10(%rbp)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1fa0c:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
      s->img_buffer_end = s->buffer_start+1;
   1fa13:	48 8d 75 39          	lea    0x39(%rbp),%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1fa17:	48 2b 95 d0 00 00 00 	sub    0xd0(%rbp),%rdx
   1fa1e:	01 95 b8 00 00 00    	add    %edx,0xb8(%rbp)
   if (n == 0) {
   1fa24:	85 c0                	test   %eax,%eax
   1fa26:	0f 85 94 00 00 00    	jne    1fac0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x1e0>
      s->read_from_callbacks = 0;
   1fa2c:	c7 45 30 00 00 00 00 	movl   $0x0,0x30(%rbp)
      *s->img_buffer = 0;
   1fa33:	c6 45 38 00          	movb   $0x0,0x38(%rbp)
   1fa37:	48 89 b5 c8 00 00 00 	mov    %rsi,0xc8(%rbp)
      return *s->img_buffer++;
   1fa3e:	48 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%rbp)
         if (c != 0) {
   1fa45:	e9 15 ff ff ff       	jmp    1f95f <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x7f>
   1fa4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   1fa50:	4c 8d 75 38          	lea    0x38(%rbp),%r14
   1fa54:	8b 55 34             	mov    0x34(%rbp),%edx
   1fa57:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   1fa5b:	4c 89 f6             	mov    %r14,%rsi
   1fa5e:	ff 55 10             	call   *0x10(%rbp)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   1fa61:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   1fa68:	48 2b 95 d0 00 00 00 	sub    0xd0(%rbp),%rdx
   1fa6f:	01 95 b8 00 00 00    	add    %edx,0xb8(%rbp)
      s->img_buffer_end = s->buffer_start+1;
   1fa75:	48 8d 55 39          	lea    0x39(%rbp),%rdx
   if (n == 0) {
   1fa79:	85 c0                	test   %eax,%eax
   1fa7b:	75 23                	jne    1faa0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x1c0>
      s->read_from_callbacks = 0;
   1fa7d:	c7 45 30 00 00 00 00 	movl   $0x0,0x30(%rbp)
      *s->img_buffer = 0;
   1fa84:	c6 45 38 00          	movb   $0x0,0x38(%rbp)
   1fa88:	48 89 95 c8 00 00 00 	mov    %rdx,0xc8(%rbp)
      return *s->img_buffer++;
   1fa8f:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
      if (b == 0xff) {
   1fa96:	e9 44 ff ff ff       	jmp    1f9df <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0xff>
   1fa9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   1faa0:	48 98                	cltq
      return *s->img_buffer++;
   1faa2:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
      unsigned int b = j->nomore ? 0 : stbi__get8(j->s);
   1faa9:	44 0f b6 65 38       	movzbl 0x38(%rbp),%r12d
      s->img_buffer_end = s->buffer_start + n;
   1faae:	49 01 c6             	add    %rax,%r14
   1fab1:	4c 89 b5 c8 00 00 00 	mov    %r14,0xc8(%rbp)
      return *s->img_buffer++;
   1fab8:	e9 99 fe ff ff       	jmp    1f956 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0x76>
   1fabd:	0f 1f 00             	nopl   (%rax)
   1fac0:	0f b6 55 38          	movzbl 0x38(%rbp),%edx
      s->img_buffer_end = s->buffer_start + n;
   1fac4:	48 98                	cltq
      return *s->img_buffer++;
   1fac6:	48 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%rbp)
      s->img_buffer_end = s->buffer_start + n;
   1facd:	49 01 c6             	add    %rax,%r14
   1fad0:	4c 89 b5 c8 00 00 00 	mov    %r14,0xc8(%rbp)
      return *s->img_buffer++;
   1fad7:	89 d1                	mov    %edx,%ecx
   1fad9:	e9 d5 fe ff ff       	jmp    1f9b3 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg+0xd3>
   1fade:	66 90                	xchg   %ax,%ax

000000000001fae0 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani>:
{
   1fae0:	41 55                	push   %r13
   1fae2:	41 54                	push   %r12
   1fae4:	55                   	push   %rbp
   1fae5:	53                   	push   %rbx
   1fae6:	48 83 ec 08          	sub    $0x8,%rsp
   if (j->spec_end != 0) return stbi__err("can't merge dc and ac", "Corrupt JPEG");
   1faea:	44 8b 87 38 48 00 00 	mov    0x4838(%rdi),%r8d
   1faf1:	45 85 c0             	test   %r8d,%r8d
   1faf4:	0f 85 d6 00 00 00    	jne    1fbd0 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0xf0>
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   1fafa:	83 bf 24 48 00 00 0f 	cmpl   $0xf,0x4824(%rdi)
   1fb01:	48 89 fb             	mov    %rdi,%rbx
   1fb04:	48 89 f5             	mov    %rsi,%rbp
   1fb07:	49 89 d5             	mov    %rdx,%r13
   1fb0a:	4c 63 e1             	movslq %ecx,%r12
   1fb0d:	0f 8e dd 00 00 00    	jle    1fbf0 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x110>
   if (j->succ_high == 0) {
   1fb13:	8b 83 3c 48 00 00    	mov    0x483c(%rbx),%eax
   1fb19:	85 c0                	test   %eax,%eax
   1fb1b:	0f 84 e2 00 00 00    	je     1fc03 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x123>
   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);
   1fb21:	8b 83 24 48 00 00    	mov    0x4824(%rbx),%eax
   1fb27:	85 c0                	test   %eax,%eax
   1fb29:	0f 8e b9 01 00 00    	jle    1fce8 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x208>
   k = j->code_buffer;
   1fb2f:	8b 93 20 48 00 00    	mov    0x4820(%rbx),%edx
   --j->code_bits;
   1fb35:	83 e8 01             	sub    $0x1,%eax
   1fb38:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
   j->code_buffer <<= 1;
   1fb3e:	8d 0c 12             	lea    (%rdx,%rdx,1),%ecx
   1fb41:	89 8b 20 48 00 00    	mov    %ecx,0x4820(%rbx)
      if (stbi__jpeg_get_bit(j))
   1fb47:	85 d2                	test   %edx,%edx
   1fb49:	0f 88 79 01 00 00    	js     1fcc8 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x1e8>
   return 1;
   1fb4f:	b8 01 00 00 00       	mov    $0x1,%eax
   1fb54:	e9 89 00 00 00       	jmp    1fbe2 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x102>
   1fb59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   temp = j->code_buffer >> 16;
   1fb60:	89 d1                	mov    %edx,%ecx
   1fb62:	c1 e9 10             	shr    $0x10,%ecx
      if (temp < h->maxcode[k])
   1fb65:	41 3b 8d 2c 06 00 00 	cmp    0x62c(%r13),%ecx
   1fb6c:	0f 82 a1 01 00 00    	jb     1fd13 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x233>
   1fb72:	41 3b 8d 30 06 00 00 	cmp    0x630(%r13),%ecx
   1fb79:	0f 82 4c 02 00 00    	jb     1fdcb <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x2eb>
   1fb7f:	41 3b 8d 34 06 00 00 	cmp    0x634(%r13),%ecx
   1fb86:	0f 82 49 02 00 00    	jb     1fdd5 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x2f5>
   1fb8c:	41 3b 8d 38 06 00 00 	cmp    0x638(%r13),%ecx
   1fb93:	0f 82 46 02 00 00    	jb     1fddf <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x2ff>
   1fb99:	41 3b 8d 3c 06 00 00 	cmp    0x63c(%r13),%ecx
   1fba0:	0f 82 43 02 00 00    	jb     1fde9 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x309>
   1fba6:	41 3b 8d 40 06 00 00 	cmp    0x640(%r13),%ecx
   1fbad:	0f 82 40 02 00 00    	jb     1fdf3 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x313>
   1fbb3:	41 3b 8d 44 06 00 00 	cmp    0x644(%r13),%ecx
   1fbba:	0f 82 3d 02 00 00    	jb     1fdfd <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x31d>
      j->code_bits -= 16;
   1fbc0:	83 e8 10             	sub    $0x10,%eax
   1fbc3:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
      if (t < 0 || t > 15) return stbi__err("can't merge dc and ac", "Corrupt JPEG");
   1fbc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   stbi__g_failure_reason = str;
   1fbd0:	48 8d 05 ae 7f 01 00 	lea    0x17fae(%rip),%rax        # 37b85 <_ZSt19piecewise_construct+0x23e>
   1fbd7:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1fbde:	ff ff 
   if (j->spec_end != 0) return stbi__err("can't merge dc and ac", "Corrupt JPEG");
   1fbe0:	31 c0                	xor    %eax,%eax
}
   1fbe2:	48 83 c4 08          	add    $0x8,%rsp
   1fbe6:	5b                   	pop    %rbx
   1fbe7:	5d                   	pop    %rbp
   1fbe8:	41 5c                	pop    %r12
   1fbea:	41 5d                	pop    %r13
   1fbec:	c3                   	ret
   1fbed:	0f 1f 00             	nopl   (%rax)
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   1fbf0:	e8 eb fc ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   if (j->succ_high == 0) {
   1fbf5:	8b 83 3c 48 00 00    	mov    0x483c(%rbx),%eax
   1fbfb:	85 c0                	test   %eax,%eax
   1fbfd:	0f 85 1e ff ff ff    	jne    1fb21 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x41>
      memset(data,0,64*sizeof(data[0])); // 0 all the ac values now
   1fc03:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
   1fc07:	48 89 e9             	mov    %rbp,%rcx
   1fc0a:	31 c0                	xor    %eax,%eax
   1fc0c:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
   1fc13:	00 
   1fc14:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1fc18:	48 c7 45 78 00 00 00 	movq   $0x0,0x78(%rbp)
   1fc1f:	00 
   1fc20:	48 29 f9             	sub    %rdi,%rcx
   1fc23:	83 e9 80             	sub    $0xffffff80,%ecx
   1fc26:	c1 e9 03             	shr    $0x3,%ecx
   1fc29:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   1fc2c:	8b 83 24 48 00 00    	mov    0x4824(%rbx),%eax
   1fc32:	83 f8 0f             	cmp    $0xf,%eax
   1fc35:	0f 8e c5 00 00 00    	jle    1fd00 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x220>
   c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   1fc3b:	8b 93 20 48 00 00    	mov    0x4820(%rbx),%edx
   1fc41:	89 d1                	mov    %edx,%ecx
   1fc43:	c1 e9 17             	shr    $0x17,%ecx
   k = h->fast[c];
   1fc46:	41 0f b6 4c 0d 00    	movzbl 0x0(%r13,%rcx,1),%ecx
   if (k < 255) {
   1fc4c:	81 f9 ff 00 00 00    	cmp    $0xff,%ecx
   1fc52:	0f 84 08 ff ff ff    	je     1fb60 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x80>
      int s = h->size[k];
   1fc58:	48 63 f1             	movslq %ecx,%rsi
   1fc5b:	41 0f b6 8c 35 00 05 	movzbl 0x500(%r13,%rsi,1),%ecx
   1fc62:	00 00 
      if (s > j->code_bits)
   1fc64:	39 c1                	cmp    %eax,%ecx
   1fc66:	0f 8f 64 ff ff ff    	jg     1fbd0 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0xf0>
      j->code_buffer <<= s;
   1fc6c:	d3 e2                	shl    %cl,%edx
      j->code_bits -= s;
   1fc6e:	29 c8                	sub    %ecx,%eax
      j->code_buffer <<= s;
   1fc70:	89 93 20 48 00 00    	mov    %edx,0x4820(%rbx)
      j->code_bits -= s;
   1fc76:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
      return h->values[k];
   1fc7c:	45 0f b6 ac 35 00 04 	movzbl 0x400(%r13,%rsi,1),%r13d
   1fc83:	00 00 
      if (t < 0 || t > 15) return stbi__err("can't merge dc and ac", "Corrupt JPEG");
   1fc85:	41 83 fd 0f          	cmp    $0xf,%r13d
   1fc89:	0f 8f 41 ff ff ff    	jg     1fbd0 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0xf0>
      diff = t ? stbi__extend_receive(j, t) : 0;
   1fc8f:	45 85 ed             	test   %r13d,%r13d
   1fc92:	0f 85 d0 00 00 00    	jne    1fd68 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x288>
      dc = j->img_comp[b].dc_pred + diff;
   1fc98:	4b 8d 04 64          	lea    (%r12,%r12,2),%rax
   1fc9c:	48 c1 e0 05          	shl    $0x5,%rax
   1fca0:	48 01 d8             	add    %rbx,%rax
   1fca3:	44 03 a8 b8 46 00 00 	add    0x46b8(%rax),%r13d
      j->img_comp[b].dc_pred = dc;
   1fcaa:	44 89 a8 b8 46 00 00 	mov    %r13d,0x46b8(%rax)
      data[0] = (short) (dc * (1 << j->succ_low));
   1fcb1:	8b 8b 40 48 00 00    	mov    0x4840(%rbx),%ecx
   1fcb7:	41 d3 e5             	shl    %cl,%r13d
   1fcba:	66 44 89 6d 00       	mov    %r13w,0x0(%rbp)
   1fcbf:	e9 8b fe ff ff       	jmp    1fb4f <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x6f>
   1fcc4:	0f 1f 40 00          	nopl   0x0(%rax)
         data[0] += (short) (1 << j->succ_low);
   1fcc8:	8b 8b 40 48 00 00    	mov    0x4840(%rbx),%ecx
   1fcce:	b8 01 00 00 00       	mov    $0x1,%eax
   1fcd3:	d3 e0                	shl    %cl,%eax
   1fcd5:	66 01 45 00          	add    %ax,0x0(%rbp)
   return 1;
   1fcd9:	b8 01 00 00 00       	mov    $0x1,%eax
   1fcde:	e9 ff fe ff ff       	jmp    1fbe2 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x102>
   1fce3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);
   1fce8:	48 89 df             	mov    %rbx,%rdi
   1fceb:	e8 f0 fb ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   --j->code_bits;
   1fcf0:	8b 83 24 48 00 00    	mov    0x4824(%rbx),%eax
   1fcf6:	e9 34 fe ff ff       	jmp    1fb2f <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x4f>
   1fcfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   1fd00:	48 89 df             	mov    %rbx,%rdi
   1fd03:	e8 d8 fb ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
      if (s > j->code_bits)
   1fd08:	8b 83 24 48 00 00    	mov    0x4824(%rbx),%eax
   1fd0e:	e9 28 ff ff ff       	jmp    1fc3b <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x15b>
   for (k=FAST_BITS+1 ; ; ++k)
   1fd13:	bf 0a 00 00 00       	mov    $0xa,%edi
   if (k > j->code_bits)
   1fd18:	39 c7                	cmp    %eax,%edi
   1fd1a:	0f 8f b0 fe ff ff    	jg     1fbd0 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0xf0>
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   1fd20:	b9 20 00 00 00       	mov    $0x20,%ecx
   1fd25:	89 d6                	mov    %edx,%esi
   1fd27:	4c 8d 05 52 8a 01 00 	lea    0x18a52(%rip),%r8        # 38780 <_ZL11stbi__bmask>
   j->code_bits -= k;
   1fd2e:	29 f8                	sub    %edi,%eax
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   1fd30:	29 f9                	sub    %edi,%ecx
   1fd32:	d3 ee                	shr    %cl,%esi
   1fd34:	48 63 cf             	movslq %edi,%rcx
   1fd37:	41 23 34 88          	and    (%r8,%rcx,4),%esi
   1fd3b:	41 03 b4 8d 4c 06 00 	add    0x64c(%r13,%rcx,4),%esi
   1fd42:	00 
   j->code_buffer <<= k;
   1fd43:	89 f9                	mov    %edi,%ecx
   j->code_bits -= k;
   1fd45:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
   j->code_buffer <<= k;
   1fd4b:	d3 e2                	shl    %cl,%edx
   return h->values[c];
   1fd4d:	48 63 f6             	movslq %esi,%rsi
   j->code_buffer <<= k;
   1fd50:	89 93 20 48 00 00    	mov    %edx,0x4820(%rbx)
   return h->values[c];
   1fd56:	45 0f b6 ac 35 00 04 	movzbl 0x400(%r13,%rsi,1),%r13d
   1fd5d:	00 00 
   1fd5f:	e9 21 ff ff ff       	jmp    1fc85 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x1a5>
   1fd64:	0f 1f 40 00          	nopl   0x0(%rax)
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   1fd68:	41 39 c5             	cmp    %eax,%r13d
   1fd6b:	7f 48                	jg     1fdb5 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x2d5>
   k = stbi_lrot(j->code_buffer, n);
   1fd6d:	44 89 e9             	mov    %r13d,%ecx
   1fd70:	89 d6                	mov    %edx,%esi
   j->code_buffer = k & ~stbi__bmask[n];
   1fd72:	4d 63 c5             	movslq %r13d,%r8
   j->code_bits -= n;
   1fd75:	44 29 e8             	sub    %r13d,%eax
   k = stbi_lrot(j->code_buffer, n);
   1fd78:	d3 c6                	rol    %cl,%esi
   j->code_bits -= n;
   1fd7a:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
   sgn = j->code_buffer >> 31; // sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)
   1fd80:	c1 ea 1f             	shr    $0x1f,%edx
   return k + (stbi__jbias[n] & (sgn - 1));
   1fd83:	48 8d 05 b6 89 01 00 	lea    0x189b6(%rip),%rax        # 38740 <_ZL11stbi__jbias>
   k = stbi_lrot(j->code_buffer, n);
   1fd8a:	89 f1                	mov    %esi,%ecx
   j->code_buffer = k & ~stbi__bmask[n];
   1fd8c:	48 8d 35 ed 89 01 00 	lea    0x189ed(%rip),%rsi        # 38780 <_ZL11stbi__bmask>
   return k + (stbi__jbias[n] & (sgn - 1));
   1fd93:	83 ea 01             	sub    $0x1,%edx
   1fd96:	42 23 14 80          	and    (%rax,%r8,4),%edx
   j->code_buffer = k & ~stbi__bmask[n];
   1fd9a:	42 8b 3c 86          	mov    (%rsi,%r8,4),%edi
   1fd9e:	89 fe                	mov    %edi,%esi
   1fda0:	f7 d6                	not    %esi
   1fda2:	21 ce                	and    %ecx,%esi
   k &= stbi__bmask[n];
   1fda4:	21 f9                	and    %edi,%ecx
   j->code_buffer = k & ~stbi__bmask[n];
   1fda6:	89 b3 20 48 00 00    	mov    %esi,0x4820(%rbx)
   return k + (stbi__jbias[n] & (sgn - 1));
   1fdac:	44 8d 2c 0a          	lea    (%rdx,%rcx,1),%r13d
   1fdb0:	e9 e3 fe ff ff       	jmp    1fc98 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x1b8>
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   1fdb5:	48 89 df             	mov    %rbx,%rdi
   1fdb8:	e8 23 fb ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   sgn = j->code_buffer >> 31; // sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)
   1fdbd:	8b 93 20 48 00 00    	mov    0x4820(%rbx),%edx
   j->code_bits -= n;
   1fdc3:	8b 83 24 48 00 00    	mov    0x4824(%rbx),%eax
   1fdc9:	eb a2                	jmp    1fd6d <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x28d>
   for (k=FAST_BITS+1 ; ; ++k)
   1fdcb:	bf 0b 00 00 00       	mov    $0xb,%edi
   1fdd0:	e9 43 ff ff ff       	jmp    1fd18 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x238>
   1fdd5:	bf 0c 00 00 00       	mov    $0xc,%edi
   1fdda:	e9 39 ff ff ff       	jmp    1fd18 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x238>
   1fddf:	bf 0d 00 00 00       	mov    $0xd,%edi
   1fde4:	e9 2f ff ff ff       	jmp    1fd18 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x238>
   1fde9:	bf 0e 00 00 00       	mov    $0xe,%edi
   1fdee:	e9 25 ff ff ff       	jmp    1fd18 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x238>
   1fdf3:	bf 0f 00 00 00       	mov    $0xf,%edi
   1fdf8:	e9 1b ff ff ff       	jmp    1fd18 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x238>
   1fdfd:	bf 10 00 00 00       	mov    $0x10,%edi
   1fe02:	e9 11 ff ff ff       	jmp    1fd18 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani+0x238>
   1fe07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1fe0e:	00 00 

000000000001fe10 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt>:
{
   1fe10:	41 57                	push   %r15
   1fe12:	49 89 d7             	mov    %rdx,%r15
   1fe15:	41 56                	push   %r14
   1fe17:	4d 63 f1             	movslq %r9d,%r14
   1fe1a:	41 55                	push   %r13
   1fe1c:	49 89 cd             	mov    %rcx,%r13
   1fe1f:	41 54                	push   %r12
   1fe21:	49 89 f4             	mov    %rsi,%r12
   1fe24:	55                   	push   %rbp
   1fe25:	4c 89 c5             	mov    %r8,%rbp
   1fe28:	53                   	push   %rbx
   1fe29:	48 89 fb             	mov    %rdi,%rbx
   1fe2c:	48 83 ec 18          	sub    $0x18,%rsp
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   1fe30:	8b 87 24 48 00 00    	mov    0x4824(%rdi),%eax
   1fe36:	83 f8 0f             	cmp    $0xf,%eax
   1fe39:	0f 8e e1 00 00 00    	jle    1ff20 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x110>
   c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   1fe3f:	8b 93 20 48 00 00    	mov    0x4820(%rbx),%edx
   1fe45:	89 d1                	mov    %edx,%ecx
   1fe47:	c1 e9 17             	shr    $0x17,%ecx
   k = h->fast[c];
   1fe4a:	41 0f b6 0c 0f       	movzbl (%r15,%rcx,1),%ecx
   if (k < 255) {
   1fe4f:	81 f9 ff 00 00 00    	cmp    $0xff,%ecx
   1fe55:	74 59                	je     1feb0 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0xa0>
      int s = h->size[k];
   1fe57:	48 63 f9             	movslq %ecx,%rdi
   1fe5a:	41 0f b6 8c 3f 00 05 	movzbl 0x500(%r15,%rdi,1),%ecx
   1fe61:	00 00 
      if (s > j->code_bits)
   1fe63:	39 c1                	cmp    %eax,%ecx
   1fe65:	7f 23                	jg     1fe8a <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x7a>
      j->code_buffer <<= s;
   1fe67:	d3 e2                	shl    %cl,%edx
      j->code_bits -= s;
   1fe69:	29 c8                	sub    %ecx,%eax
      j->code_buffer <<= s;
   1fe6b:	89 93 20 48 00 00    	mov    %edx,0x4820(%rbx)
      j->code_bits -= s;
   1fe71:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
      return h->values[k];
   1fe77:	45 0f b6 bc 3f 00 04 	movzbl 0x400(%r15,%rdi,1),%r15d
   1fe7e:	00 00 
   if (t < 0 || t > 15) return stbi__err("bad huffman code","Corrupt JPEG");
   1fe80:	41 83 ff 0f          	cmp    $0xf,%r15d
   1fe84:	0f 8e c6 00 00 00    	jle    1ff50 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x140>
   stbi__g_failure_reason = str;
   1fe8a:	48 8d 05 7e 7c 01 00 	lea    0x17c7e(%rip),%rax        # 37b0f <_ZSt19piecewise_construct+0x1c8>
   1fe91:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   1fe98:	ff ff 
}
   1fe9a:	48 83 c4 18          	add    $0x18,%rsp
   if (t < 0 || t > 15) return stbi__err("bad huffman code","Corrupt JPEG");
   1fe9e:	31 c0                	xor    %eax,%eax
}
   1fea0:	5b                   	pop    %rbx
   1fea1:	5d                   	pop    %rbp
   1fea2:	41 5c                	pop    %r12
   1fea4:	41 5d                	pop    %r13
   1fea6:	41 5e                	pop    %r14
   1fea8:	41 5f                	pop    %r15
   1feaa:	c3                   	ret
   1feab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   temp = j->code_buffer >> 16;
   1feb0:	89 d1                	mov    %edx,%ecx
   1feb2:	c1 e9 10             	shr    $0x10,%ecx
      if (temp < h->maxcode[k])
   1feb5:	41 3b 8f 2c 06 00 00 	cmp    0x62c(%r15),%ecx
   1febc:	0f 82 5a 04 00 00    	jb     2031c <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x50c>
   1fec2:	41 3b 8f 30 06 00 00 	cmp    0x630(%r15),%ecx
   1fec9:	0f 82 55 04 00 00    	jb     20324 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x514>
   1fecf:	41 3b 8f 34 06 00 00 	cmp    0x634(%r15),%ecx
   1fed6:	0f 82 6d 04 00 00    	jb     20349 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x539>
   1fedc:	41 3b 8f 38 06 00 00 	cmp    0x638(%r15),%ecx
   1fee3:	0f 82 c5 03 00 00    	jb     202ae <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x49e>
   1fee9:	41 3b 8f 3c 06 00 00 	cmp    0x63c(%r15),%ecx
   1fef0:	0f 82 5e 04 00 00    	jb     20354 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x544>
   1fef6:	41 3b 8f 40 06 00 00 	cmp    0x640(%r15),%ecx
   1fefd:	0f 82 5c 04 00 00    	jb     2035f <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x54f>
   1ff03:	41 3b 8f 44 06 00 00 	cmp    0x644(%r15),%ecx
   1ff0a:	0f 82 5a 04 00 00    	jb     2036a <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x55a>
      j->code_bits -= 16;
   1ff10:	83 e8 10             	sub    $0x10,%eax
   1ff13:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
   if (t < 0 || t > 15) return stbi__err("bad huffman code","Corrupt JPEG");
   1ff19:	e9 6c ff ff ff       	jmp    1fe8a <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x7a>
   1ff1e:	66 90                	xchg   %ax,%ax
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   1ff20:	e8 bb f9 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   1ff25:	8b 83 24 48 00 00    	mov    0x4824(%rbx),%eax
   1ff2b:	83 f8 0f             	cmp    $0xf,%eax
   1ff2e:	0f 8f 0b ff ff ff    	jg     1fe3f <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x2f>
   1ff34:	48 89 df             	mov    %rbx,%rdi
   1ff37:	e8 a4 f9 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
      if (s > j->code_bits)
   1ff3c:	8b 83 24 48 00 00    	mov    0x4824(%rbx),%eax
   1ff42:	e9 f8 fe ff ff       	jmp    1fe3f <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x2f>
   1ff47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1ff4e:	00 00 
   memset(data,0,64*sizeof(data[0]));
   1ff50:	b9 10 00 00 00       	mov    $0x10,%ecx
   1ff55:	31 c0                	xor    %eax,%eax
   1ff57:	4c 89 e7             	mov    %r12,%rdi
   1ff5a:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   1ff5d:	8b 93 24 48 00 00    	mov    0x4824(%rbx),%edx
   diff = t ? stbi__extend_receive(j, t) : 0;
   1ff63:	45 85 ff             	test   %r15d,%r15d
   1ff66:	0f 85 74 02 00 00    	jne    201e0 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x3d0>
   dc = j->img_comp[b].dc_pred + diff;
   1ff6c:	4b 8d 04 76          	lea    (%r14,%r14,2),%rax
            zig = stbi__jpeg_dezigzag[k++];
   1ff70:	4c 8d 35 69 87 01 00 	lea    0x18769(%rip),%r14        # 386e0 <_ZL19stbi__jpeg_dezigzag>
   dc = j->img_comp[b].dc_pred + diff;
   1ff77:	48 c1 e0 05          	shl    $0x5,%rax
   1ff7b:	48 01 d8             	add    %rbx,%rax
   1ff7e:	44 03 b8 b8 46 00 00 	add    0x46b8(%rax),%r15d
   j->img_comp[b].dc_pred = dc;
   1ff85:	44 89 b8 b8 46 00 00 	mov    %r15d,0x46b8(%rax)
   data[0] = (short) (dc * dequant[0]);
   1ff8c:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
   1ff91:	66 44 0f af 38       	imul   (%rax),%r15w
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   1ff96:	48 89 e8             	mov    %rbp,%rax
   1ff99:	48 89 dd             	mov    %rbx,%rbp
   1ff9c:	48 89 c3             	mov    %rax,%rbx
   data[0] = (short) (dc * dequant[0]);
   1ff9f:	66 45 89 3c 24       	mov    %r15w,(%r12)
   k = 1;
   1ffa4:	41 bf 01 00 00 00    	mov    $0x1,%r15d
   1ffaa:	eb 65                	jmp    20011 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x201>
   1ffac:	0f 1f 40 00          	nopl   0x0(%rax)
      c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   1ffb0:	8b 85 20 48 00 00    	mov    0x4820(%rbp),%eax
   1ffb6:	89 c6                	mov    %eax,%esi
   1ffb8:	c1 ee 17             	shr    $0x17,%esi
      r = fac[c];
   1ffbb:	89 f1                	mov    %esi,%ecx
   1ffbd:	0f bf 3c 4b          	movswl (%rbx,%rcx,2),%edi
   1ffc1:	89 f9                	mov    %edi,%ecx
      if (r) { // fast-AC path
   1ffc3:	85 ff                	test   %edi,%edi
   1ffc5:	0f 84 8e 00 00 00    	je     20059 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x249>
         k += (r >> 4) & 15; // run
   1ffcb:	89 fe                	mov    %edi,%esi
         s = r & 15; // combined length
   1ffcd:	83 e1 0f             	and    $0xf,%ecx
         data[zig] = (short) ((r >> 8) * dequant[zig]);
   1ffd0:	c1 ff 08             	sar    $0x8,%edi
         k += (r >> 4) & 15; // run
   1ffd3:	c1 fe 04             	sar    $0x4,%esi
         j->code_buffer <<= s;
   1ffd6:	d3 e0                	shl    %cl,%eax
         j->code_bits -= s;
   1ffd8:	29 ca                	sub    %ecx,%edx
         data[zig] = (short) ((r >> 8) * dequant[zig]);
   1ffda:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
         k += (r >> 4) & 15; // run
   1ffdf:	83 e6 0f             	and    $0xf,%esi
         j->code_buffer <<= s;
   1ffe2:	89 85 20 48 00 00    	mov    %eax,0x4820(%rbp)
         k += (r >> 4) & 15; // run
   1ffe8:	44 01 fe             	add    %r15d,%esi
         j->code_bits -= s;
   1ffeb:	89 95 24 48 00 00    	mov    %edx,0x4824(%rbp)
         zig = stbi__jpeg_dezigzag[k++];
   1fff1:	44 8d 7e 01          	lea    0x1(%rsi),%r15d
   1fff5:	48 63 f6             	movslq %esi,%rsi
         data[zig] = (short) ((r >> 8) * dequant[zig]);
   1fff8:	41 0f b6 04 36       	movzbl (%r14,%rsi,1),%eax
   1fffd:	66 0f af 3c 41       	imul   (%rcx,%rax,2),%di
   20002:	66 41 89 3c 44       	mov    %di,(%r12,%rax,2)
   } while (k < 64);
   20007:	41 83 ff 3f          	cmp    $0x3f,%r15d
   2000b:	0f 8f a7 00 00 00    	jg     200b8 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x2a8>
      if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   20011:	83 fa 0f             	cmp    $0xf,%edx
   20014:	7f 9a                	jg     1ffb0 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x1a0>
   20016:	48 89 ef             	mov    %rbp,%rdi
   20019:	e8 c2 f8 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
      c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   2001e:	8b 85 20 48 00 00    	mov    0x4820(%rbp),%eax
         j->code_bits -= s;
   20024:	8b 95 24 48 00 00    	mov    0x4824(%rbp),%edx
      c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   2002a:	89 c6                	mov    %eax,%esi
   2002c:	c1 ee 17             	shr    $0x17,%esi
      r = fac[c];
   2002f:	89 f1                	mov    %esi,%ecx
   20031:	0f bf 3c 4b          	movswl (%rbx,%rcx,2),%edi
   20035:	89 f9                	mov    %edi,%ecx
      if (r) { // fast-AC path
   20037:	85 ff                	test   %edi,%edi
   20039:	75 90                	jne    1ffcb <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x1bb>
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   2003b:	83 fa 0f             	cmp    $0xf,%edx
   2003e:	7f 19                	jg     20059 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x249>
   20040:	48 89 ef             	mov    %rbp,%rdi
   20043:	e8 98 f8 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   20048:	8b 85 20 48 00 00    	mov    0x4820(%rbp),%eax
      if (s > j->code_bits)
   2004e:	8b 95 24 48 00 00    	mov    0x4824(%rbp),%edx
   c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   20054:	89 c6                	mov    %eax,%esi
   20056:	c1 ee 17             	shr    $0x17,%esi
   k = h->fast[c];
   20059:	48 63 f6             	movslq %esi,%rsi
   2005c:	41 0f b6 4c 35 00    	movzbl 0x0(%r13,%rsi,1),%ecx
   if (k < 255) {
   20062:	81 f9 ff 00 00 00    	cmp    $0xff,%ecx
   20068:	74 66                	je     200d0 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x2c0>
      int s = h->size[k];
   2006a:	48 63 f1             	movslq %ecx,%rsi
   2006d:	41 0f b6 8c 35 00 05 	movzbl 0x500(%r13,%rsi,1),%ecx
   20074:	00 00 
      if (s > j->code_bits)
   20076:	39 d1                	cmp    %edx,%ecx
   20078:	0f 8f 0c fe ff ff    	jg     1fe8a <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x7a>
      j->code_buffer <<= s;
   2007e:	d3 e0                	shl    %cl,%eax
      j->code_bits -= s;
   20080:	29 ca                	sub    %ecx,%edx
      j->code_buffer <<= s;
   20082:	89 85 20 48 00 00    	mov    %eax,0x4820(%rbp)
      j->code_bits -= s;
   20088:	89 95 24 48 00 00    	mov    %edx,0x4824(%rbp)
      return h->values[k];
   2008e:	41 0f b6 b4 35 00 04 	movzbl 0x400(%r13,%rsi,1),%esi
   20095:	00 00 
         if (s == 0) {
   20097:	89 f1                	mov    %esi,%ecx
   20099:	83 e1 0f             	and    $0xf,%ecx
   2009c:	0f 85 9e 00 00 00    	jne    20140 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x330>
            if (rs != 0xf0) break; // end block
   200a2:	81 fe f0 00 00 00    	cmp    $0xf0,%esi
   200a8:	75 0e                	jne    200b8 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x2a8>
            k += 16;
   200aa:	41 83 c7 10          	add    $0x10,%r15d
   } while (k < 64);
   200ae:	41 83 ff 3f          	cmp    $0x3f,%r15d
   200b2:	0f 8e 59 ff ff ff    	jle    20011 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x201>
}
   200b8:	48 83 c4 18          	add    $0x18,%rsp
   return 1;
   200bc:	b8 01 00 00 00       	mov    $0x1,%eax
}
   200c1:	5b                   	pop    %rbx
   200c2:	5d                   	pop    %rbp
   200c3:	41 5c                	pop    %r12
   200c5:	41 5d                	pop    %r13
   200c7:	41 5e                	pop    %r14
   200c9:	41 5f                	pop    %r15
   200cb:	c3                   	ret
   200cc:	0f 1f 40 00          	nopl   0x0(%rax)
   temp = j->code_buffer >> 16;
   200d0:	89 c1                	mov    %eax,%ecx
   200d2:	c1 e9 10             	shr    $0x10,%ecx
      if (temp < h->maxcode[k])
   200d5:	41 3b 8d 2c 06 00 00 	cmp    0x62c(%r13),%ecx
   200dc:	0f 82 5e 01 00 00    	jb     20240 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x430>
   200e2:	41 3b 8d 30 06 00 00 	cmp    0x630(%r13),%ecx
   200e9:	0f 82 a9 01 00 00    	jb     20298 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x488>
   200ef:	41 3b 8d 34 06 00 00 	cmp    0x634(%r13),%ecx
   200f6:	0f 82 a4 01 00 00    	jb     202a0 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x490>
   200fc:	41 3b 8d 38 06 00 00 	cmp    0x638(%r13),%ecx
   20103:	0f 82 9e 01 00 00    	jb     202a7 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x497>
   20109:	41 3b 8d 3c 06 00 00 	cmp    0x63c(%r13),%ecx
   20110:	0f 82 f2 01 00 00    	jb     20308 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x4f8>
   20116:	41 3b 8d 40 06 00 00 	cmp    0x640(%r13),%ecx
   2011d:	0f 82 ef 01 00 00    	jb     20312 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x502>
   20123:	41 3b 8d 44 06 00 00 	cmp    0x644(%r13),%ecx
   2012a:	0f 82 fc 01 00 00    	jb     2032c <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x51c>
      j->code_bits -= 16;
   20130:	83 ea 10             	sub    $0x10,%edx
   20133:	89 95 24 48 00 00    	mov    %edx,0x4824(%rbp)
         if (rs < 0) return stbi__err("bad huffman code","Corrupt JPEG");
   20139:	e9 4c fd ff ff       	jmp    1fe8a <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x7a>
   2013e:	66 90                	xchg   %ax,%ax
         r = rs >> 4;
   20140:	c1 fe 04             	sar    $0x4,%esi
            k += r;
   20143:	44 01 fe             	add    %r15d,%esi
            zig = stbi__jpeg_dezigzag[k++];
   20146:	44 8d 7e 01          	lea    0x1(%rsi),%r15d
   2014a:	48 63 f6             	movslq %esi,%rsi
   2014d:	45 0f b6 0c 36       	movzbl (%r14,%rsi,1),%r9d
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   20152:	39 d1                	cmp    %edx,%ecx
   20154:	7f 5a                	jg     201b0 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x3a0>
   j->code_buffer = k & ~stbi__bmask[n];
   20156:	4c 63 d1             	movslq %ecx,%r10
   20159:	48 8d 3d 20 86 01 00 	lea    0x18620(%rip),%rdi        # 38780 <_ZL11stbi__bmask>
   k = stbi_lrot(j->code_buffer, n);
   20160:	89 c6                	mov    %eax,%esi
   sgn = j->code_buffer >> 31; // sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)
   20162:	c1 e8 1f             	shr    $0x1f,%eax
   j->code_buffer = k & ~stbi__bmask[n];
   20165:	42 8b 3c 97          	mov    (%rdi,%r10,4),%edi
   k = stbi_lrot(j->code_buffer, n);
   20169:	d3 c6                	rol    %cl,%esi
   j->code_bits -= n;
   2016b:	29 ca                	sub    %ecx,%edx
   return k + (stbi__jbias[n] & (sgn - 1));
   2016d:	83 e8 01             	sub    $0x1,%eax
            data[zig] = (short) (stbi__extend_receive(j,s) * dequant[zig]);
   20170:	41 0f b6 c9          	movzbl %r9b,%ecx
   j->code_bits -= n;
   20174:	89 95 24 48 00 00    	mov    %edx,0x4824(%rbp)
   j->code_buffer = k & ~stbi__bmask[n];
   2017a:	41 89 fb             	mov    %edi,%r11d
   2017d:	41 f7 d3             	not    %r11d
   20180:	41 21 f3             	and    %esi,%r11d
   k &= stbi__bmask[n];
   20183:	21 fe                	and    %edi,%esi
            data[zig] = (short) (stbi__extend_receive(j,s) * dequant[zig]);
   20185:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
   j->code_buffer = k & ~stbi__bmask[n];
   2018a:	44 89 9d 20 48 00 00 	mov    %r11d,0x4820(%rbp)
   return k + (stbi__jbias[n] & (sgn - 1));
   20191:	4c 8d 1d a8 85 01 00 	lea    0x185a8(%rip),%r11        # 38740 <_ZL11stbi__jbias>
   20198:	43 23 04 93          	and    (%r11,%r10,4),%eax
   2019c:	01 f0                	add    %esi,%eax
            data[zig] = (short) (stbi__extend_receive(j,s) * dequant[zig]);
   2019e:	66 0f af 04 4f       	imul   (%rdi,%rcx,2),%ax
   201a3:	66 41 89 04 4c       	mov    %ax,(%r12,%rcx,2)
   201a8:	e9 5a fe ff ff       	jmp    20007 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x1f7>
   201ad:	0f 1f 00             	nopl   (%rax)
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   201b0:	48 89 ef             	mov    %rbp,%rdi
   201b3:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
   201b7:	44 88 4c 24 0b       	mov    %r9b,0xb(%rsp)
   201bc:	e8 1f f7 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   sgn = j->code_buffer >> 31; // sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)
   201c1:	8b 85 20 48 00 00    	mov    0x4820(%rbp),%eax
   j->code_bits -= n;
   201c7:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
   201cb:	8b 95 24 48 00 00    	mov    0x4824(%rbp),%edx
   201d1:	44 0f b6 4c 24 0b    	movzbl 0xb(%rsp),%r9d
   201d7:	e9 7a ff ff ff       	jmp    20156 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x346>
   201dc:	0f 1f 40 00          	nopl   0x0(%rax)
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   201e0:	41 39 d7             	cmp    %edx,%r15d
   201e3:	0f 8f 4d 01 00 00    	jg     20336 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x526>
   sgn = j->code_buffer >> 31; // sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)
   201e9:	8b 83 20 48 00 00    	mov    0x4820(%rbx),%eax
   k = stbi_lrot(j->code_buffer, n);
   201ef:	44 89 f9             	mov    %r15d,%ecx
   j->code_buffer = k & ~stbi__bmask[n];
   201f2:	4d 63 cf             	movslq %r15d,%r9
   j->code_bits -= n;
   201f5:	44 29 fa             	sub    %r15d,%edx
   201f8:	89 93 24 48 00 00    	mov    %edx,0x4824(%rbx)
   k = stbi_lrot(j->code_buffer, n);
   201fe:	89 c7                	mov    %eax,%edi
   sgn = j->code_buffer >> 31; // sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)
   20200:	c1 e8 1f             	shr    $0x1f,%eax
   k = stbi_lrot(j->code_buffer, n);
   20203:	d3 c7                	rol    %cl,%edi
   return k + (stbi__jbias[n] & (sgn - 1));
   20205:	83 e8 01             	sub    $0x1,%eax
   k = stbi_lrot(j->code_buffer, n);
   20208:	89 f9                	mov    %edi,%ecx
   j->code_buffer = k & ~stbi__bmask[n];
   2020a:	48 8d 3d 6f 85 01 00 	lea    0x1856f(%rip),%rdi        # 38780 <_ZL11stbi__bmask>
   20211:	46 8b 04 8f          	mov    (%rdi,%r9,4),%r8d
   20215:	44 89 c7             	mov    %r8d,%edi
   20218:	f7 d7                	not    %edi
   2021a:	21 cf                	and    %ecx,%edi
   k &= stbi__bmask[n];
   2021c:	44 21 c1             	and    %r8d,%ecx
   j->code_buffer = k & ~stbi__bmask[n];
   2021f:	89 bb 20 48 00 00    	mov    %edi,0x4820(%rbx)
   return k + (stbi__jbias[n] & (sgn - 1));
   20225:	48 8d 3d 14 85 01 00 	lea    0x18514(%rip),%rdi        # 38740 <_ZL11stbi__jbias>
   2022c:	42 23 04 8f          	and    (%rdi,%r9,4),%eax
   20230:	44 8d 3c 08          	lea    (%rax,%rcx,1),%r15d
   20234:	e9 33 fd ff ff       	jmp    1ff6c <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x15c>
   20239:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   for (k=FAST_BITS+1 ; ; ++k)
   20240:	bf 0a 00 00 00       	mov    $0xa,%edi
   if (k > j->code_bits)
   20245:	39 d7                	cmp    %edx,%edi
   20247:	0f 8f 3d fc ff ff    	jg     1fe8a <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x7a>
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   2024d:	b9 20 00 00 00       	mov    $0x20,%ecx
   20252:	89 c6                	mov    %eax,%esi
   20254:	4c 8d 15 25 85 01 00 	lea    0x18525(%rip),%r10        # 38780 <_ZL11stbi__bmask>
   j->code_bits -= k;
   2025b:	29 fa                	sub    %edi,%edx
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   2025d:	29 f9                	sub    %edi,%ecx
   2025f:	d3 ee                	shr    %cl,%esi
   20261:	48 63 cf             	movslq %edi,%rcx
   20264:	41 23 34 8a          	and    (%r10,%rcx,4),%esi
   20268:	41 03 b4 8d 4c 06 00 	add    0x64c(%r13,%rcx,4),%esi
   2026f:	00 
   j->code_buffer <<= k;
   20270:	89 f9                	mov    %edi,%ecx
   j->code_bits -= k;
   20272:	89 95 24 48 00 00    	mov    %edx,0x4824(%rbp)
   j->code_buffer <<= k;
   20278:	d3 e0                	shl    %cl,%eax
   return h->values[c];
   2027a:	48 63 f6             	movslq %esi,%rsi
   j->code_buffer <<= k;
   2027d:	89 85 20 48 00 00    	mov    %eax,0x4820(%rbp)
   return h->values[c];
   20283:	41 0f b6 b4 35 00 04 	movzbl 0x400(%r13,%rsi,1),%esi
   2028a:	00 00 
         if (rs < 0) return stbi__err("bad huffman code","Corrupt JPEG");
   2028c:	e9 06 fe ff ff       	jmp    20097 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x287>
   20291:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   for (k=FAST_BITS+1 ; ; ++k)
   20298:	bf 0b 00 00 00       	mov    $0xb,%edi
   2029d:	eb a6                	jmp    20245 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x435>
   2029f:	90                   	nop
   202a0:	bf 0c 00 00 00       	mov    $0xc,%edi
   202a5:	eb 9e                	jmp    20245 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x435>
   202a7:	bf 0d 00 00 00       	mov    $0xd,%edi
   202ac:	eb 97                	jmp    20245 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x435>
   202ae:	41 b8 0d 00 00 00    	mov    $0xd,%r8d
   202b4:	0f 1f 40 00          	nopl   0x0(%rax)
   if (k > j->code_bits)
   202b8:	41 39 c0             	cmp    %eax,%r8d
   202bb:	0f 8f c9 fb ff ff    	jg     1fe8a <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x7a>
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   202c1:	b9 20 00 00 00       	mov    $0x20,%ecx
   202c6:	89 d7                	mov    %edx,%edi
   202c8:	4c 8d 0d b1 84 01 00 	lea    0x184b1(%rip),%r9        # 38780 <_ZL11stbi__bmask>
   j->code_bits -= k;
   202cf:	44 29 c0             	sub    %r8d,%eax
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   202d2:	44 29 c1             	sub    %r8d,%ecx
   202d5:	d3 ef                	shr    %cl,%edi
   202d7:	49 63 c8             	movslq %r8d,%rcx
   202da:	41 23 3c 89          	and    (%r9,%rcx,4),%edi
   202de:	41 03 bc 8f 4c 06 00 	add    0x64c(%r15,%rcx,4),%edi
   202e5:	00 
   j->code_buffer <<= k;
   202e6:	44 89 c1             	mov    %r8d,%ecx
   j->code_bits -= k;
   202e9:	89 83 24 48 00 00    	mov    %eax,0x4824(%rbx)
   j->code_buffer <<= k;
   202ef:	d3 e2                	shl    %cl,%edx
   return h->values[c];
   202f1:	48 63 ff             	movslq %edi,%rdi
   j->code_buffer <<= k;
   202f4:	89 93 20 48 00 00    	mov    %edx,0x4820(%rbx)
   return h->values[c];
   202fa:	45 0f b6 bc 3f 00 04 	movzbl 0x400(%r15,%rdi,1),%r15d
   20301:	00 00 
   20303:	e9 78 fb ff ff       	jmp    1fe80 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x70>
   for (k=FAST_BITS+1 ; ; ++k)
   20308:	bf 0e 00 00 00       	mov    $0xe,%edi
   2030d:	e9 33 ff ff ff       	jmp    20245 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x435>
   20312:	bf 0f 00 00 00       	mov    $0xf,%edi
   20317:	e9 29 ff ff ff       	jmp    20245 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x435>
   2031c:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
   20322:	eb 94                	jmp    202b8 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x4a8>
   20324:	41 b8 0b 00 00 00    	mov    $0xb,%r8d
   2032a:	eb 8c                	jmp    202b8 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x4a8>
   2032c:	bf 10 00 00 00       	mov    $0x10,%edi
   20331:	e9 0f ff ff ff       	jmp    20245 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x435>
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   20336:	48 89 df             	mov    %rbx,%rdi
   20339:	e8 a2 f5 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   j->code_bits -= n;
   2033e:	8b 93 24 48 00 00    	mov    0x4824(%rbx),%edx
   20344:	e9 a0 fe ff ff       	jmp    201e9 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x3d9>
   for (k=FAST_BITS+1 ; ; ++k)
   20349:	41 b8 0c 00 00 00    	mov    $0xc,%r8d
   2034f:	e9 64 ff ff ff       	jmp    202b8 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x4a8>
   20354:	41 b8 0e 00 00 00    	mov    $0xe,%r8d
   2035a:	e9 59 ff ff ff       	jmp    202b8 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x4a8>
   2035f:	41 b8 0f 00 00 00    	mov    $0xf,%r8d
   20365:	e9 4e ff ff ff       	jmp    202b8 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x4a8>
   2036a:	41 b8 10 00 00 00    	mov    $0x10,%r8d
   20370:	e9 43 ff ff ff       	jmp    202b8 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt+0x4a8>
   20375:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2037c:	00 00 00 00 

0000000000020380 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii>:
{
   20380:	41 56                	push   %r14
   20382:	49 89 f6             	mov    %rsi,%r14
   20385:	41 55                	push   %r13
   20387:	49 89 d5             	mov    %rdx,%r13
   2038a:	41 54                	push   %r12
   2038c:	41 89 cc             	mov    %ecx,%r12d
   2038f:	55                   	push   %rbp
   20390:	53                   	push   %rbx
   if (s->img_buffer < s->img_buffer_end)
   20391:	48 8b 87 c0 00 00 00 	mov    0xc0(%rdi),%rax
{
   20398:	48 89 fb             	mov    %rdi,%rbx
   if (s->img_buffer < s->img_buffer_end)
   2039b:	48 8b 97 c8 00 00 00 	mov    0xc8(%rdi),%rdx
   203a2:	48 39 d0             	cmp    %rdx,%rax
   203a5:	0f 83 95 01 00 00    	jae    20540 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x1c0>
      return *s->img_buffer++;
   203ab:	48 8d 48 01          	lea    0x1(%rax),%rcx
   203af:	48 89 8f c0 00 00 00 	mov    %rcx,0xc0(%rdi)
   203b6:	0f b6 00             	movzbl (%rax),%eax
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')
   203b9:	3c 47                	cmp    $0x47,%al
   203bb:	74 23                	je     203e0 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x60>
      return stbi__err("not GIF", "Corrupt GIF");
   203bd:	48 8d 05 d7 77 01 00 	lea    0x177d7(%rip),%rax        # 37b9b <_ZSt19piecewise_construct+0x254>
   stbi__g_failure_reason = str;
   203c4:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   203cb:	ff ff 
      return stbi__err("not GIF", "Corrupt GIF");
   203cd:	31 c0                	xor    %eax,%eax
}
   203cf:	5b                   	pop    %rbx
   203d0:	5d                   	pop    %rbp
   203d1:	41 5c                	pop    %r12
   203d3:	41 5d                	pop    %r13
   203d5:	41 5e                	pop    %r14
   203d7:	c3                   	ret
   203d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   203df:	00 
   if (s->img_buffer < s->img_buffer_end)
   203e0:	48 39 d1             	cmp    %rdx,%rcx
   203e3:	0f 83 b7 01 00 00    	jae    205a0 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x220>
      return *s->img_buffer++;
   203e9:	48 8d 41 01          	lea    0x1(%rcx),%rax
   203ed:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   203f4:	0f b6 11             	movzbl (%rcx),%edx
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')
   203f7:	80 fa 49             	cmp    $0x49,%dl
   203fa:	75 c1                	jne    203bd <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x3d>
   if (s->img_buffer < s->img_buffer_end)
   203fc:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   20403:	0f 82 e7 01 00 00    	jb     205f0 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x270>
   if (s->read_from_callbacks) {
   20409:	8b 43 30             	mov    0x30(%rbx),%eax
   2040c:	85 c0                	test   %eax,%eax
   2040e:	74 ad                	je     203bd <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x3d>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   20410:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   20414:	8b 53 34             	mov    0x34(%rbx),%edx
   20417:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   2041b:	48 89 ee             	mov    %rbp,%rsi
   2041e:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   20421:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   20428:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2042c:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   20433:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   20439:	85 c0                	test   %eax,%eax
   2043b:	0f 84 8f 01 00 00    	je     205d0 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x250>
      s->img_buffer_end = s->buffer_start + n;
   20441:	48 98                	cltq
      return *s->img_buffer++;
   20443:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   2044a:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   2044e:	48 01 c5             	add    %rax,%rbp
   20451:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
      return *s->img_buffer++;
   20458:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2045f:	00 
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')
   20460:	80 fa 46             	cmp    $0x46,%dl
   20463:	0f 85 54 ff ff ff    	jne    203bd <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x3d>
   20469:	48 89 df             	mov    %rbx,%rdi
   2046c:	e8 2f b6 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   20471:	3c 38                	cmp    $0x38,%al
   20473:	0f 85 44 ff ff ff    	jne    203bd <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x3d>
   version = stbi__get8(s);
   20479:	48 89 df             	mov    %rbx,%rdi
   2047c:	e8 1f b6 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   if (version != '7' && version != '9')    return stbi__err("not GIF", "Corrupt GIF");
   20481:	83 e8 37             	sub    $0x37,%eax
   20484:	a8 fd                	test   $0xfd,%al
   20486:	0f 85 31 ff ff ff    	jne    203bd <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x3d>
   if (stbi__get8(s) != 'a')                return stbi__err("not GIF", "Corrupt GIF");
   2048c:	48 89 df             	mov    %rbx,%rdi
   2048f:	e8 0c b6 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   20494:	3c 61                	cmp    $0x61,%al
   20496:	0f 85 21 ff ff ff    	jne    203bd <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x3d>
   stbi__g_failure_reason = "";
   2049c:	48 8d 05 76 8b 01 00 	lea    0x18b76(%rip),%rax        # 39019 <_ZL11stbi__bmask+0x899>
   g->w = stbi__get16le(s);
   204a3:	48 89 df             	mov    %rbx,%rdi
   stbi__g_failure_reason = "";
   204a6:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   204ad:	ff ff 
   g->w = stbi__get16le(s);
   204af:	e8 2c df ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   g->h = stbi__get16le(s);
   204b4:	48 89 df             	mov    %rbx,%rdi
   g->w = stbi__get16le(s);
   204b7:	41 89 06             	mov    %eax,(%r14)
   g->h = stbi__get16le(s);
   204ba:	e8 21 df ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   g->flags = stbi__get8(s);
   204bf:	48 89 df             	mov    %rbx,%rdi
   g->h = stbi__get16le(s);
   204c2:	41 89 46 04          	mov    %eax,0x4(%r14)
   g->flags = stbi__get8(s);
   204c6:	e8 d5 b5 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   g->bgindex = stbi__get8(s);
   204cb:	48 89 df             	mov    %rbx,%rdi
   g->flags = stbi__get8(s);
   204ce:	0f b6 c0             	movzbl %al,%eax
   204d1:	41 89 46 20          	mov    %eax,0x20(%r14)
   g->bgindex = stbi__get8(s);
   204d5:	e8 c6 b5 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   g->ratio = stbi__get8(s);
   204da:	48 89 df             	mov    %rbx,%rdi
   g->bgindex = stbi__get8(s);
   204dd:	0f b6 c0             	movzbl %al,%eax
   204e0:	41 89 46 24          	mov    %eax,0x24(%r14)
   g->ratio = stbi__get8(s);
   204e4:	e8 b7 b5 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   if (g->w > STBI_MAX_DIMENSIONS) return stbi__err("too large","Very large image (corrupt?)");
   204e9:	41 81 3e 00 00 00 01 	cmpl   $0x1000000,(%r14)
   g->transparent = -1;
   204f0:	41 c7 46 2c ff ff ff 	movl   $0xffffffff,0x2c(%r14)
   204f7:	ff 
   g->ratio = stbi__get8(s);
   204f8:	0f b6 c0             	movzbl %al,%eax
   204fb:	41 89 46 28          	mov    %eax,0x28(%r14)
   if (g->w > STBI_MAX_DIMENSIONS) return stbi__err("too large","Very large image (corrupt?)");
   204ff:	0f 8f fe 00 00 00    	jg     20603 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x283>
   if (g->h > STBI_MAX_DIMENSIONS) return stbi__err("too large","Very large image (corrupt?)");
   20505:	41 81 7e 04 00 00 00 	cmpl   $0x1000000,0x4(%r14)
   2050c:	01 
   2050d:	0f 8f f0 00 00 00    	jg     20603 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x283>
   if (comp != 0) *comp = 4;  // can't actually tell whether it's 3 or 4 until we parse the comments
   20513:	4d 85 ed             	test   %r13,%r13
   20516:	74 08                	je     20520 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x1a0>
   20518:	41 c7 45 00 04 00 00 	movl   $0x4,0x0(%r13)
   2051f:	00 
   if (is_info) return 1;
   20520:	45 85 e4             	test   %r12d,%r12d
   20523:	75 0c                	jne    20531 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x1b1>
   if (g->flags & 0x80)
   20525:	41 8b 46 20          	mov    0x20(%r14),%eax
   20529:	a8 80                	test   $0x80,%al
   2052b:	0f 85 de 00 00 00    	jne    2060f <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x28f>
   if (is_info) return 1;
   20531:	b8 01 00 00 00       	mov    $0x1,%eax
   20536:	e9 94 fe ff ff       	jmp    203cf <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x4f>
   2053b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   20540:	8b 4f 30             	mov    0x30(%rdi),%ecx
   20543:	85 c9                	test   %ecx,%ecx
   20545:	0f 84 72 fe ff ff    	je     203bd <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x3d>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2054b:	48 8d 6f 38          	lea    0x38(%rdi),%rbp
   2054f:	8b 57 34             	mov    0x34(%rdi),%edx
   20552:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   20556:	48 89 ee             	mov    %rbp,%rsi
   20559:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2055c:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   20563:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   20567:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   2056e:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   20574:	85 c0                	test   %eax,%eax
   20576:	74 58                	je     205d0 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x250>
      s->img_buffer_end = s->buffer_start + n;
   20578:	48 98                	cltq
      return *s->img_buffer++;
   2057a:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
      s->img_buffer_end = s->buffer_start + n;
   20581:	48 8d 54 05 00       	lea    0x0(%rbp,%rax,1),%rdx
      return *s->img_buffer++;
   20586:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   2058a:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
   20591:	e9 23 fe ff ff       	jmp    203b9 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x39>
   20596:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2059d:	00 00 00 
   if (s->read_from_callbacks) {
   205a0:	8b 53 30             	mov    0x30(%rbx),%edx
   205a3:	85 d2                	test   %edx,%edx
   205a5:	0f 84 12 fe ff ff    	je     203bd <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x3d>
      stbi__refill_buffer(s);
   205ab:	48 89 df             	mov    %rbx,%rdi
   205ae:	e8 cd 0c ff ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   205b3:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   205ba:	48 8d 42 01          	lea    0x1(%rdx),%rax
   205be:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   205c5:	0f b6 12             	movzbl (%rdx),%edx
   205c8:	e9 2a fe ff ff       	jmp    203f7 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x77>
   205cd:	0f 1f 00             	nopl   (%rax)
      s->read_from_callbacks = 0;
   205d0:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   205d7:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   205db:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   205e2:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   205e9:	e9 cf fd ff ff       	jmp    203bd <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x3d>
   205ee:	66 90                	xchg   %ax,%ax
      return *s->img_buffer++;
   205f0:	48 8d 50 01          	lea    0x1(%rax),%rdx
   205f4:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   205fb:	0f b6 10             	movzbl (%rax),%edx
   205fe:	e9 5d fe ff ff       	jmp    20460 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0xe0>
   20603:	48 8d 05 4e 74 01 00 	lea    0x1744e(%rip),%rax        # 37a58 <_ZSt19piecewise_construct+0x111>
   2060a:	e9 b5 fd ff ff       	jmp    203c4 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x44>
      stbi__gif_parse_colortable(s,g->pal, 2 << (g->flags & 7), -1);
   2060f:	83 e0 07             	and    $0x7,%eax
   20612:	ba 02 00 00 00       	mov    $0x2,%edx
   20617:	49 8d 76 34          	lea    0x34(%r14),%rsi
   2061b:	48 89 df             	mov    %rbx,%rdi
   2061e:	89 c1                	mov    %eax,%ecx
   20620:	d3 e2                	shl    %cl,%edx
   20622:	83 c9 ff             	or     $0xffffffff,%ecx
   20625:	e8 e6 69 ff ff       	call   17010 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii>
   2062a:	e9 02 ff ff ff       	jmp    20531 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii+0x1b1>
   2062f:	90                   	nop

0000000000020630 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0>:
static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)
   20630:	41 55                	push   %r13
   20632:	41 54                	push   %r12
   20634:	49 89 f4             	mov    %rsi,%r12
   20637:	55                   	push   %rbp
   20638:	53                   	push   %rbx
   20639:	48 89 fb             	mov    %rdi,%rbx
   2063c:	48 83 ec 08          	sub    $0x8,%rsp
   if (s->img_buffer < s->img_buffer_end)
   20640:	48 8b 87 c0 00 00 00 	mov    0xc0(%rdi),%rax
   20647:	48 8b 97 c8 00 00 00 	mov    0xc8(%rdi),%rdx
   2064e:	48 39 d0             	cmp    %rdx,%rax
   20651:	0f 83 d9 00 00 00    	jae    20730 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x100>
      return *s->img_buffer++;
   20657:	48 8d 48 01          	lea    0x1(%rax),%rcx
   2065b:	48 89 8f c0 00 00 00 	mov    %rcx,0xc0(%rdi)
   20662:	0f b6 00             	movzbl (%rax),%eax
   if (stbi__get8(s) != 'B' || stbi__get8(s) != 'M') return stbi__errpuc("not BMP", "Corrupt BMP");
   20665:	3c 42                	cmp    $0x42,%al
   20667:	0f 85 ca 00 00 00    	jne    20737 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x107>
   if (s->img_buffer < s->img_buffer_end)
   2066d:	48 39 d1             	cmp    %rdx,%rcx
   20670:	0f 82 e2 00 00 00    	jb     20758 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x128>
   if (s->read_from_callbacks) {
   20676:	8b 73 30             	mov    0x30(%rbx),%esi
   20679:	85 f6                	test   %esi,%esi
   2067b:	0f 84 b6 00 00 00    	je     20737 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x107>
      stbi__refill_buffer(s);
   20681:	48 89 df             	mov    %rbx,%rdi
   20684:	e8 f7 0b ff ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   20689:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   20690:	48 8d 50 01          	lea    0x1(%rax),%rdx
   20694:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   2069b:	0f b6 00             	movzbl (%rax),%eax
   if (stbi__get8(s) != 'B' || stbi__get8(s) != 'M') return stbi__errpuc("not BMP", "Corrupt BMP");
   2069e:	3c 4d                	cmp    $0x4d,%al
   206a0:	0f 85 91 00 00 00    	jne    20737 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x107>
   stbi__get32le(s); // discard filesize
   206a6:	48 89 df             	mov    %rbx,%rdi
   206a9:	e8 f2 e4 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   stbi__get16le(s); // discard reserved
   206ae:	48 89 df             	mov    %rbx,%rdi
   206b1:	e8 2a dd ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   stbi__get16le(s); // discard reserved
   206b6:	48 89 df             	mov    %rbx,%rdi
   206b9:	e8 22 dd ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   info->offset = stbi__get32le(s);
   206be:	48 89 df             	mov    %rbx,%rdi
   206c1:	e8 da e4 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   info->hsz = hsz = stbi__get32le(s);
   206c6:	48 89 df             	mov    %rbx,%rdi
   info->offset = stbi__get32le(s);
   206c9:	41 89 44 24 04       	mov    %eax,0x4(%r12)
   info->hsz = hsz = stbi__get32le(s);
   206ce:	e8 cd e4 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   if (info->offset < 0) return stbi__errpuc("bad BMP", "bad BMP");
   206d3:	41 8b 4c 24 04       	mov    0x4(%r12),%ecx
   info->mr = info->mg = info->mb = info->ma = 0;
   206d8:	66 0f ef c0          	pxor   %xmm0,%xmm0
   info->extra_read = 14;
   206dc:	41 c7 44 24 20 0e 00 	movl   $0xe,0x20(%r12)
   206e3:	00 00 
   info->hsz = hsz = stbi__get32le(s);
   206e5:	41 89 44 24 08       	mov    %eax,0x8(%r12)
   206ea:	89 c5                	mov    %eax,%ebp
   info->mr = info->mg = info->mb = info->ma = 0;
   206ec:	41 0f 11 44 24 0c    	movups %xmm0,0xc(%r12)
   if (info->offset < 0) return stbi__errpuc("bad BMP", "bad BMP");
   206f2:	85 c9                	test   %ecx,%ecx
   206f4:	0f 88 e8 00 00 00    	js     207e2 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x1b2>
   if (hsz != 12 && hsz != 40 && hsz != 56 && hsz != 108 && hsz != 124) return stbi__errpuc("unknown BMP", "BMP type not supported: unknown");
   206fa:	83 f8 0c             	cmp    $0xc,%eax
   206fd:	0f 84 bd 01 00 00    	je     208c0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x290>
   20703:	83 f8 28             	cmp    $0x28,%eax
   20706:	0f 84 a4 01 00 00    	je     208b0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x280>
   2070c:	83 e0 ef             	and    $0xffffffef,%eax
   2070f:	83 f8 6c             	cmp    $0x6c,%eax
   20712:	0f 84 a8 00 00 00    	je     207c0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x190>
   20718:	83 fd 38             	cmp    $0x38,%ebp
   2071b:	0f 84 9f 00 00 00    	je     207c0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x190>
   20721:	48 8d 05 a0 74 01 00 	lea    0x174a0(%rip),%rax        # 37bc8 <_ZSt19piecewise_construct+0x281>
   20728:	eb 14                	jmp    2073e <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x10e>
   2072a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   20730:	8b 7f 30             	mov    0x30(%rdi),%edi
   20733:	85 ff                	test   %edi,%edi
   20735:	75 39                	jne    20770 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x140>
   if (stbi__get8(s) != 'B' || stbi__get8(s) != 'M') return stbi__errpuc("not BMP", "Corrupt BMP");
   20737:	48 8d 05 82 74 01 00 	lea    0x17482(%rip),%rax        # 37bc0 <_ZSt19piecewise_construct+0x279>
   stbi__g_failure_reason = str;
   2073e:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   20745:	ff ff 
   if (stbi__get8(s) != 'B' || stbi__get8(s) != 'M') return stbi__errpuc("not BMP", "Corrupt BMP");
   20747:	31 c0                	xor    %eax,%eax
}
   20749:	48 83 c4 08          	add    $0x8,%rsp
   2074d:	5b                   	pop    %rbx
   2074e:	5d                   	pop    %rbp
   2074f:	41 5c                	pop    %r12
   20751:	41 5d                	pop    %r13
   20753:	c3                   	ret
   20754:	0f 1f 40 00          	nopl   0x0(%rax)
      return *s->img_buffer++;
   20758:	48 8d 41 01          	lea    0x1(%rcx),%rax
   2075c:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   20763:	0f b6 01             	movzbl (%rcx),%eax
   20766:	e9 33 ff ff ff       	jmp    2069e <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x6e>
   2076b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   20770:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   20774:	8b 53 34             	mov    0x34(%rbx),%edx
   20777:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   2077b:	48 89 ee             	mov    %rbp,%rsi
   2077e:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   20781:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   20788:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2078c:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   20793:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   20799:	85 c0                	test   %eax,%eax
   2079b:	75 53                	jne    207f0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x1c0>
      s->read_from_callbacks = 0;
   2079d:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   207a4:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   207a8:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   207af:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   207b6:	e9 7c ff ff ff       	jmp    20737 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x107>
   207bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->img_x = stbi__get32le(s);
   207c0:	48 89 df             	mov    %rbx,%rdi
   207c3:	e8 d8 e3 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
      s->img_y = stbi__get32le(s);
   207c8:	48 89 df             	mov    %rbx,%rdi
      s->img_x = stbi__get32le(s);
   207cb:	89 03                	mov    %eax,(%rbx)
      s->img_y = stbi__get32le(s);
   207cd:	e8 ce e3 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   if (stbi__get16le(s) != 1) return stbi__errpuc("bad BMP", "bad BMP");
   207d2:	48 89 df             	mov    %rbx,%rdi
      s->img_y = stbi__get32le(s);
   207d5:	89 43 04             	mov    %eax,0x4(%rbx)
   if (stbi__get16le(s) != 1) return stbi__errpuc("bad BMP", "bad BMP");
   207d8:	e8 03 dc ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   207dd:	83 f8 01             	cmp    $0x1,%eax
   207e0:	74 2e                	je     20810 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x1e0>
   if (info->offset < 0) return stbi__errpuc("bad BMP", "bad BMP");
   207e2:	48 8d 05 ba 73 01 00 	lea    0x173ba(%rip),%rax        # 37ba3 <_ZSt19piecewise_construct+0x25c>
   207e9:	e9 50 ff ff ff       	jmp    2073e <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x10e>
   207ee:	66 90                	xchg   %ax,%ax
      s->img_buffer_end = s->buffer_start + n;
   207f0:	48 98                	cltq
      return *s->img_buffer++;
   207f2:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
      s->img_buffer_end = s->buffer_start + n;
   207f9:	48 8d 54 05 00       	lea    0x0(%rbp,%rax,1),%rdx
      return *s->img_buffer++;
   207fe:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   20802:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
   20809:	e9 57 fe ff ff       	jmp    20665 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x35>
   2080e:	66 90                	xchg   %ax,%ax
   info->bpp = stbi__get16le(s);
   20810:	48 89 df             	mov    %rbx,%rdi
   20813:	e8 c8 db ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
      int compress = stbi__get32le(s);
   20818:	48 89 df             	mov    %rbx,%rdi
   info->bpp = stbi__get16le(s);
   2081b:	41 89 04 24          	mov    %eax,(%r12)
      int compress = stbi__get32le(s);
   2081f:	e8 7c e3 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   20824:	41 89 c5             	mov    %eax,%r13d
      if (compress == 1 || compress == 2) return stbi__errpuc("BMP RLE", "BMP type not supported: RLE");
   20827:	8d 40 ff             	lea    -0x1(%rax),%eax
   2082a:	83 f8 01             	cmp    $0x1,%eax
   2082d:	0f 86 65 01 00 00    	jbe    20998 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x368>
      if (compress >= 4) return stbi__errpuc("BMP JPEG/PNG", "BMP type not supported: unsupported compression"); // this includes PNG/JPEG modes
   20833:	41 83 fd 03          	cmp    $0x3,%r13d
   20837:	0f 8f 4f 01 00 00    	jg     2098c <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x35c>
      if (compress == 3 && info->bpp != 16 && info->bpp != 32) return stbi__errpuc("bad BMP", "bad BMP"); // bitfields requires 16 or 32 bits/pixel
   2083d:	75 0c                	jne    2084b <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x21b>
   2083f:	41 8b 04 24          	mov    (%r12),%eax
   20843:	83 e8 10             	sub    $0x10,%eax
   20846:	83 e0 ef             	and    $0xffffffef,%eax
   20849:	75 97                	jne    207e2 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x1b2>
      stbi__get32le(s); // discard sizeof
   2084b:	48 89 df             	mov    %rbx,%rdi
   2084e:	e8 4d e3 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
      stbi__get32le(s); // discard hres
   20853:	48 89 df             	mov    %rbx,%rdi
   20856:	e8 45 e3 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
      stbi__get32le(s); // discard vres
   2085b:	48 89 df             	mov    %rbx,%rdi
   2085e:	e8 3d e3 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
      stbi__get32le(s); // discard colorsused
   20863:	48 89 df             	mov    %rbx,%rdi
   20866:	e8 35 e3 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
      stbi__get32le(s); // discard max important
   2086b:	48 89 df             	mov    %rbx,%rdi
   2086e:	e8 2d e3 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
      if (hsz == 40 || hsz == 56) {
   20873:	89 e8                	mov    %ebp,%eax
   20875:	83 e0 ef             	and    $0xffffffef,%eax
   20878:	83 f8 28             	cmp    $0x28,%eax
   2087b:	75 77                	jne    208f4 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x2c4>
         if (hsz == 56) {
   2087d:	83 fd 38             	cmp    $0x38,%ebp
   20880:	0f 84 b9 01 00 00    	je     20a3f <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x40f>
         if (info->bpp == 16 || info->bpp == 32) {
   20886:	41 8b 04 24          	mov    (%r12),%eax
   2088a:	83 f8 10             	cmp    $0x10,%eax
   2088d:	0f 84 11 01 00 00    	je     209a4 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x374>
   20893:	83 f8 20             	cmp    $0x20,%eax
   20896:	0f 84 84 01 00 00    	je     20a20 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x3f0>
   2089c:	0f 1f 40 00          	nopl   0x0(%rax)
   return (void *) 1;
   208a0:	b8 01 00 00 00       	mov    $0x1,%eax
   208a5:	e9 9f fe ff ff       	jmp    20749 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x119>
   208aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (hsz == 12) {
   208b0:	83 f8 0c             	cmp    $0xc,%eax
   208b3:	0f 85 07 ff ff ff    	jne    207c0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x190>
   208b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      s->img_x = stbi__get16le(s);
   208c0:	48 89 df             	mov    %rbx,%rdi
   208c3:	e8 18 db ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
      s->img_y = stbi__get16le(s);
   208c8:	48 89 df             	mov    %rbx,%rdi
      s->img_x = stbi__get16le(s);
   208cb:	89 03                	mov    %eax,(%rbx)
      s->img_y = stbi__get16le(s);
   208cd:	e8 0e db ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   if (stbi__get16le(s) != 1) return stbi__errpuc("bad BMP", "bad BMP");
   208d2:	48 89 df             	mov    %rbx,%rdi
      s->img_y = stbi__get16le(s);
   208d5:	89 43 04             	mov    %eax,0x4(%rbx)
   if (stbi__get16le(s) != 1) return stbi__errpuc("bad BMP", "bad BMP");
   208d8:	e8 03 db ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   208dd:	83 f8 01             	cmp    $0x1,%eax
   208e0:	0f 85 fc fe ff ff    	jne    207e2 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x1b2>
   info->bpp = stbi__get16le(s);
   208e6:	48 89 df             	mov    %rbx,%rdi
   208e9:	e8 f2 da ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   208ee:	41 89 04 24          	mov    %eax,(%r12)
   if (hsz != 12) {
   208f2:	eb ac                	jmp    208a0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x270>
         if (hsz != 108 && hsz != 124)
   208f4:	83 f8 6c             	cmp    $0x6c,%eax
   208f7:	0f 85 e5 fe ff ff    	jne    207e2 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x1b2>
         info->mr = stbi__get32le(s);
   208fd:	48 89 df             	mov    %rbx,%rdi
   20900:	e8 9b e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
         info->mg = stbi__get32le(s);
   20905:	48 89 df             	mov    %rbx,%rdi
         info->mr = stbi__get32le(s);
   20908:	41 89 44 24 0c       	mov    %eax,0xc(%r12)
         info->mg = stbi__get32le(s);
   2090d:	e8 8e e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
         info->mb = stbi__get32le(s);
   20912:	48 89 df             	mov    %rbx,%rdi
         info->mg = stbi__get32le(s);
   20915:	41 89 44 24 10       	mov    %eax,0x10(%r12)
         info->mb = stbi__get32le(s);
   2091a:	e8 81 e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
         info->ma = stbi__get32le(s);
   2091f:	48 89 df             	mov    %rbx,%rdi
         info->mb = stbi__get32le(s);
   20922:	41 89 44 24 14       	mov    %eax,0x14(%r12)
         info->ma = stbi__get32le(s);
   20927:	e8 74 e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   2092c:	41 89 44 24 18       	mov    %eax,0x18(%r12)
   if (compress == 0) {
   20931:	45 85 ed             	test   %r13d,%r13d
   20934:	0f 84 2a 01 00 00    	je     20a64 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x434>
         stbi__get32le(s); // discard color space
   2093a:	48 89 df             	mov    %rbx,%rdi
   2093d:	41 bc 0c 00 00 00    	mov    $0xc,%r12d
   20943:	e8 58 e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
         for (i=0; i < 12; ++i)
   20948:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2094f:	00 
            stbi__get32le(s); // discard color space parameters
   20950:	48 89 df             	mov    %rbx,%rdi
   20953:	e8 48 e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
         for (i=0; i < 12; ++i)
   20958:	41 83 ec 01          	sub    $0x1,%r12d
   2095c:	75 f2                	jne    20950 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x320>
         if (hsz == 124) {
   2095e:	83 fd 7c             	cmp    $0x7c,%ebp
   20961:	0f 85 39 ff ff ff    	jne    208a0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x270>
            stbi__get32le(s); // discard rendering intent
   20967:	48 89 df             	mov    %rbx,%rdi
   2096a:	e8 31 e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
            stbi__get32le(s); // discard offset of profile data
   2096f:	48 89 df             	mov    %rbx,%rdi
   20972:	e8 29 e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
            stbi__get32le(s); // discard size of profile data
   20977:	48 89 df             	mov    %rbx,%rdi
   2097a:	e8 21 e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
            stbi__get32le(s); // discard reserved
   2097f:	48 89 df             	mov    %rbx,%rdi
   20982:	e8 19 e2 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   20987:	e9 14 ff ff ff       	jmp    208a0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x270>
   2098c:	48 8d 05 18 72 01 00 	lea    0x17218(%rip),%rax        # 37bab <_ZSt19piecewise_construct+0x264>
   20993:	e9 a6 fd ff ff       	jmp    2073e <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x10e>
   20998:	48 8d 05 19 72 01 00 	lea    0x17219(%rip),%rax        # 37bb8 <_ZSt19piecewise_construct+0x271>
   2099f:	e9 9a fd ff ff       	jmp    2073e <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x10e>
            if (compress == 0) {
   209a4:	45 85 ed             	test   %r13d,%r13d
   209a7:	75 1a                	jne    209c3 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x393>
         info->mb = 31u <<  0;
   209a9:	41 c7 44 24 14 1f 00 	movl   $0x1f,0x14(%r12)
   209b0:	00 00 
         info->mr = 31u << 10;
   209b2:	48 8b 05 0f 81 01 00 	mov    0x1810f(%rip),%rax        # 38ac8 <_ZL11stbi__bmask+0x348>
   209b9:	49 89 44 24 0c       	mov    %rax,0xc(%r12)
         info->mb = 31u <<  0;
   209be:	e9 dd fe ff ff       	jmp    208a0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x270>
            } else if (compress == 3) {
   209c3:	41 83 fd 03          	cmp    $0x3,%r13d
   209c7:	0f 85 15 fe ff ff    	jne    207e2 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x1b2>
               info->mr = stbi__get32le(s);
   209cd:	48 89 df             	mov    %rbx,%rdi
   209d0:	e8 cb e1 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
               info->mg = stbi__get32le(s);
   209d5:	48 89 df             	mov    %rbx,%rdi
               info->mr = stbi__get32le(s);
   209d8:	41 89 44 24 0c       	mov    %eax,0xc(%r12)
               info->mg = stbi__get32le(s);
   209dd:	e8 be e1 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
               info->mb = stbi__get32le(s);
   209e2:	48 89 df             	mov    %rbx,%rdi
               info->mg = stbi__get32le(s);
   209e5:	41 89 44 24 10       	mov    %eax,0x10(%r12)
               info->mb = stbi__get32le(s);
   209ea:	e8 b1 e1 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
               info->extra_read += 12;
   209ef:	41 83 44 24 20 0c    	addl   $0xc,0x20(%r12)
               if (info->mr == info->mg && info->mg == info->mb) {
   209f5:	41 8b 54 24 10       	mov    0x10(%r12),%edx
               info->mb = stbi__get32le(s);
   209fa:	41 89 44 24 14       	mov    %eax,0x14(%r12)
               if (info->mr == info->mg && info->mg == info->mb) {
   209ff:	41 39 54 24 0c       	cmp    %edx,0xc(%r12)
   20a04:	0f 85 96 fe ff ff    	jne    208a0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x270>
   20a0a:	39 d0                	cmp    %edx,%eax
   20a0c:	0f 85 8e fe ff ff    	jne    208a0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x270>
   20a12:	e9 cb fd ff ff       	jmp    207e2 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x1b2>
   20a17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   20a1e:	00 00 
            if (compress == 0) {
   20a20:	45 85 ed             	test   %r13d,%r13d
   20a23:	75 9e                	jne    209c3 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x393>
         info->mr = 0xffu << 16;
   20a25:	66 0f 6f 05 93 7f 01 	movdqa 0x17f93(%rip),%xmm0        # 389c0 <_ZL11stbi__bmask+0x240>
   20a2c:	00 
         info->all_a = 0; // if all_a is 0 at end, then we loaded alpha channel but it was all 0
   20a2d:	31 d2                	xor    %edx,%edx
   20a2f:	41 89 54 24 1c       	mov    %edx,0x1c(%r12)
         info->mr = 0xffu << 16;
   20a34:	41 0f 11 44 24 0c    	movups %xmm0,0xc(%r12)
         info->all_a = 0; // if all_a is 0 at end, then we loaded alpha channel but it was all 0
   20a3a:	e9 61 fe ff ff       	jmp    208a0 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x270>
            stbi__get32le(s);
   20a3f:	48 89 df             	mov    %rbx,%rdi
   20a42:	e8 59 e1 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
            stbi__get32le(s);
   20a47:	48 89 df             	mov    %rbx,%rdi
   20a4a:	e8 51 e1 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
            stbi__get32le(s);
   20a4f:	48 89 df             	mov    %rbx,%rdi
   20a52:	e8 49 e1 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
            stbi__get32le(s);
   20a57:	48 89 df             	mov    %rbx,%rdi
   20a5a:	e8 41 e1 ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   20a5f:	e9 22 fe ff ff       	jmp    20886 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x256>
      if (info->bpp == 16) {
   20a64:	41 8b 04 24          	mov    (%r12),%eax
   20a68:	83 f8 10             	cmp    $0x10,%eax
   20a6b:	74 14                	je     20a81 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x451>
      } else if (info->bpp == 32) {
   20a6d:	83 f8 20             	cmp    $0x20,%eax
   20a70:	74 29                	je     20a9b <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x46b>
         info->mr = info->mg = info->mb = info->ma = 0;
   20a72:	66 0f ef c0          	pxor   %xmm0,%xmm0
   20a76:	41 0f 11 44 24 0c    	movups %xmm0,0xc(%r12)
   20a7c:	e9 b9 fe ff ff       	jmp    2093a <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x30a>
         info->mb = 31u <<  0;
   20a81:	41 c7 44 24 14 1f 00 	movl   $0x1f,0x14(%r12)
   20a88:	00 00 
         info->mr = 31u << 10;
   20a8a:	48 8b 05 37 80 01 00 	mov    0x18037(%rip),%rax        # 38ac8 <_ZL11stbi__bmask+0x348>
   20a91:	49 89 44 24 0c       	mov    %rax,0xc(%r12)
         info->mb = 31u <<  0;
   20a96:	e9 9f fe ff ff       	jmp    2093a <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x30a>
         info->mr = 0xffu << 16;
   20a9b:	66 0f 6f 05 1d 7f 01 	movdqa 0x17f1d(%rip),%xmm0        # 389c0 <_ZL11stbi__bmask+0x240>
   20aa2:	00 
         info->all_a = 0; // if all_a is 0 at end, then we loaded alpha channel but it was all 0
   20aa3:	31 c0                	xor    %eax,%eax
   20aa5:	41 89 44 24 1c       	mov    %eax,0x1c(%r12)
         info->mr = 0xffu << 16;
   20aaa:	41 0f 11 44 24 0c    	movups %xmm0,0xc(%r12)
         info->all_a = 0; // if all_a is 0 at end, then we loaded alpha channel but it was all 0
   20ab0:	e9 85 fe ff ff       	jmp    2093a <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0+0x30a>
   20ab5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   20abc:	00 00 00 00 

0000000000020ac0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0>:
static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
   20ac0:	41 57                	push   %r15
   20ac2:	41 56                	push   %r14
   20ac4:	41 55                	push   %r13
   20ac6:	49 89 fd             	mov    %rdi,%r13
   20ac9:	41 54                	push   %r12
   20acb:	55                   	push   %rbp
   20acc:	53                   	push   %rbx
   20acd:	48 81 ec f8 04 00 00 	sub    $0x4f8,%rsp
   20ad4:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
   20adb:	00 
   if (stbi__bmp_parse_header(s, &info) == NULL)
   20adc:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
   20ae3:	00 
static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
   20ae4:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
   20aeb:	00 
   20aec:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
   20af3:	00 
   20af4:	44 89 44 24 7c       	mov    %r8d,0x7c(%rsp)
   info.all_a = 255;
   20af9:	c7 84 24 dc 00 00 00 	movl   $0xff,0xdc(%rsp)
   20b00:	ff 00 00 00 
   if (stbi__bmp_parse_header(s, &info) == NULL)
   20b04:	e8 27 fb ff ff       	call   20630 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0>
   20b09:	48 85 c0             	test   %rax,%rax
   20b0c:	0f 84 4e 01 00 00    	je     20c60 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1a0>
   flip_vertically = ((int) s->img_y) > 0;
   20b12:	45 8b 55 04          	mov    0x4(%r13),%r10d
   s->img_y = abs((int) s->img_y);
   20b16:	44 89 d1             	mov    %r10d,%ecx
   20b19:	f7 d9                	neg    %ecx
   20b1b:	41 0f 48 ca          	cmovs  %r10d,%ecx
   20b1f:	41 89 4d 04          	mov    %ecx,0x4(%r13)
   if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   20b23:	81 f9 00 00 00 01    	cmp    $0x1000000,%ecx
   20b29:	0f 8f 21 01 00 00    	jg     20c50 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x190>
   if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   20b2f:	41 8b 7d 00          	mov    0x0(%r13),%edi
   20b33:	81 ff 00 00 00 01    	cmp    $0x1000000,%edi
   20b39:	0f 87 11 01 00 00    	ja     20c50 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x190>
   mr = info.mr;
   20b3f:	8b 84 24 cc 00 00 00 	mov    0xcc(%rsp),%eax
   if (info.hsz == 12) {
   20b46:	44 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%r8d
   20b4d:	00 
         psize = (info.offset - info.extra_read - 24) / 3;
   20b4e:	44 8b bc 24 c4 00 00 	mov    0xc4(%rsp),%r15d
   20b55:	00 
   mr = info.mr;
   20b56:	89 44 24 30          	mov    %eax,0x30(%rsp)
   mg = info.mg;
   20b5a:	8b 84 24 d0 00 00 00 	mov    0xd0(%rsp),%eax
   20b61:	89 44 24 38          	mov    %eax,0x38(%rsp)
   mb = info.mb;
   20b65:	8b 84 24 d4 00 00 00 	mov    0xd4(%rsp),%eax
   20b6c:	89 44 24 3c          	mov    %eax,0x3c(%rsp)
   ma = info.ma;
   20b70:	8b 84 24 d8 00 00 00 	mov    0xd8(%rsp),%eax
   20b77:	89 44 24 20          	mov    %eax,0x20(%rsp)
   all_a = info.all_a;
   20b7b:	8b 84 24 dc 00 00 00 	mov    0xdc(%rsp),%eax
   20b82:	89 44 24 28          	mov    %eax,0x28(%rsp)
      if (info.bpp < 24)
   20b86:	8b 84 24 c0 00 00 00 	mov    0xc0(%rsp),%eax
   20b8d:	89 44 24 18          	mov    %eax,0x18(%rsp)
   if (info.hsz == 12) {
   20b91:	41 83 f8 0c          	cmp    $0xc,%r8d
   20b95:	0f 84 fd 00 00 00    	je     20c98 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1d8>
      if (info.bpp < 16)
   20b9b:	83 7c 24 18 0f       	cmpl   $0xf,0x18(%rsp)
   20ba0:	7f 2e                	jg     20bd0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x110>
         psize = (info.offset - info.extra_read - info.hsz) >> 2;
   20ba2:	44 89 fd             	mov    %r15d,%ebp
   20ba5:	2b ac 24 e0 00 00 00 	sub    0xe0(%rsp),%ebp
   20bac:	44 29 c5             	sub    %r8d,%ebp
   20baf:	c1 fd 02             	sar    $0x2,%ebp
   if (psize == 0) {
   20bb2:	85 ed                	test   %ebp,%ebp
   20bb4:	74 1a                	je     20bd0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x110>
   if (info.bpp == 24 && ma == 0xff000000)
   20bb6:	81 7c 24 20 00 00 00 	cmpl   $0xff000000,0x20(%rsp)
   20bbd:	ff 
   20bbe:	41 0f 94 c4          	sete   %r12b
   20bc2:	83 7c 24 18 18       	cmpl   $0x18,0x18(%rsp)
   20bc7:	0f 94 c3             	sete   %bl
   20bca:	eb 49                	jmp    20c15 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x155>
   20bcc:	0f 1f 40 00          	nopl   0x0(%rax)
      if (info.offset != s->callback_already_read + (s->img_buffer - s->img_buffer_original)) {
   20bd0:	49 63 85 b8 00 00 00 	movslq 0xb8(%r13),%rax
   20bd7:	49 8b b5 c0 00 00 00 	mov    0xc0(%r13),%rsi
   20bde:	49 63 d7             	movslq %r15d,%rdx
   20be1:	49 2b b5 d0 00 00 00 	sub    0xd0(%r13),%rsi
   20be8:	48 01 f0             	add    %rsi,%rax
   20beb:	48 39 c2             	cmp    %rax,%rdx
   20bee:	0f 85 8c 00 00 00    	jne    20c80 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1c0>
   if (info.bpp == 24 && ma == 0xff000000)
   20bf4:	81 7c 24 20 00 00 00 	cmpl   $0xff000000,0x20(%rsp)
   20bfb:	ff 
   20bfc:	41 0f 94 c4          	sete   %r12b
   20c00:	83 7c 24 18 18       	cmpl   $0x18,0x18(%rsp)
   20c05:	0f 94 c3             	sete   %bl
   20c08:	44 89 e0             	mov    %r12d,%eax
   20c0b:	20 d8                	and    %bl,%al
   20c0d:	0f 85 92 13 00 00    	jne    21fa5 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14e5>
   20c13:	31 ed                	xor    %ebp,%ebp
      s->img_n = ma ? 4 : 3;
   20c15:	83 7c 24 20 01       	cmpl   $0x1,0x20(%rsp)
   20c1a:	b8 03 00 00 00       	mov    $0x3,%eax
   20c1f:	83 d8 ff             	sbb    $0xffffffff,%eax
   20c22:	41 89 c1             	mov    %eax,%r9d
   if (req_comp && req_comp >= 3) // we can directly decode 3 or 4
   20c25:	83 7c 24 7c 02       	cmpl   $0x2,0x7c(%rsp)
      s->img_n = ma ? 4 : 3;
   20c2a:	45 89 4d 08          	mov    %r9d,0x8(%r13)
   if (req_comp && req_comp >= 3) // we can directly decode 3 or 4
   20c2e:	0f 8e ec 08 00 00    	jle    21520 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xa60>
   if (b == 0) return 1; // mul-by-0 is always safe
   20c34:	85 ff                	test   %edi,%edi
   20c36:	0f 84 94 00 00 00    	je     20cd0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x210>
   return a <= INT_MAX/b;
   20c3c:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   20c41:	31 d2                	xor    %edx,%edx
   20c43:	f7 ff                	idiv   %edi
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   20c45:	39 44 24 7c          	cmp    %eax,0x7c(%rsp)
   20c49:	0f 8e fc 08 00 00    	jle    2154b <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xa8b>
   20c4f:	90                   	nop
   stbi__g_failure_reason = str;
   20c50:	48 8d 05 01 6e 01 00 	lea    0x16e01(%rip),%rax        # 37a58 <_ZSt19piecewise_construct+0x111>
   20c57:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   20c5e:	ff ff 
      return NULL; // error code already set
   20c60:	45 31 f6             	xor    %r14d,%r14d
}
   20c63:	48 81 c4 f8 04 00 00 	add    $0x4f8,%rsp
   20c6a:	4c 89 f0             	mov    %r14,%rax
   20c6d:	5b                   	pop    %rbx
   20c6e:	5d                   	pop    %rbp
   20c6f:	41 5c                	pop    %r12
   20c71:	41 5d                	pop    %r13
   20c73:	41 5e                	pop    %r14
   20c75:	41 5f                	pop    %r15
   20c77:	c3                   	ret
   20c78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   20c7f:	00 
   stbi__g_failure_reason = str;
   20c80:	48 8d 05 4d 6f 01 00 	lea    0x16f4d(%rip),%rax        # 37bd4 <_ZSt19piecewise_construct+0x28d>
   20c87:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   20c8e:	ff ff 
        return stbi__errpuc("bad offset", "Corrupt BMP");
   20c90:	eb ce                	jmp    20c60 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1a0>
   20c92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if (info.bpp < 24)
   20c98:	83 f8 17             	cmp    $0x17,%eax
   20c9b:	0f 8f 2f ff ff ff    	jg     20bd0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x110>
         psize = (info.offset - info.extra_read - 24) / 3;
   20ca1:	44 89 f8             	mov    %r15d,%eax
   20ca4:	2b 84 24 e0 00 00 00 	sub    0xe0(%rsp),%eax
   20cab:	83 e8 18             	sub    $0x18,%eax
   20cae:	48 63 e8             	movslq %eax,%rbp
   20cb1:	c1 f8 1f             	sar    $0x1f,%eax
   20cb4:	48 69 ed 56 55 55 55 	imul   $0x55555556,%rbp,%rbp
   20cbb:	48 c1 ed 20          	shr    $0x20,%rbp
   20cbf:	29 c5                	sub    %eax,%ebp
   20cc1:	e9 ec fe ff ff       	jmp    20bb2 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xf2>
   20cc6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   20ccd:	00 00 00 
      target = req_comp;
   20cd0:	44 8b 4c 24 7c       	mov    0x7c(%rsp),%r9d
   20cd5:	31 ff                	xor    %edi,%edi
   return stbi__malloc(a*b*c + add);
   20cd7:	0f af f9             	imul   %ecx,%edi
   20cda:	44 89 4c 24 58       	mov    %r9d,0x58(%rsp)
   20cdf:	44 89 44 24 10       	mov    %r8d,0x10(%rsp)
   20ce4:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
   20ce9:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   20cec:	e8 6f 5a fe ff       	call   6760 <malloc@plt>
   if (!out) return stbi__errpuc("outofmem", "Out of memory");
   20cf1:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
   20cf6:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
   20cfb:	48 85 c0             	test   %rax,%rax
   20cfe:	44 8b 4c 24 58       	mov    0x58(%rsp),%r9d
    return STBI_MALLOC(size);
   20d03:	49 89 c6             	mov    %rax,%r14
   if (!out) return stbi__errpuc("outofmem", "Out of memory");
   20d06:	0f 84 05 14 00 00    	je     22111 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1651>
   if (info.bpp < 16) {
   20d0c:	83 7c 24 18 0f       	cmpl   $0xf,0x18(%rsp)
   20d11:	0f 8f 09 02 00 00    	jg     20f20 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x460>
      if (psize == 0 || psize > 256) { STBI_FREE(out); return stbi__errpuc("invalid", "Corrupt BMP"); }
   20d17:	85 ed                	test   %ebp,%ebp
   20d19:	0f 84 52 13 00 00    	je     22071 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x15b1>
   20d1f:	81 fd 00 01 00 00    	cmp    $0x100,%ebp
   20d25:	0f 8f 46 13 00 00    	jg     22071 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x15b1>
      for (i=0; i < psize; ++i) {
   20d2b:	85 ed                	test   %ebp,%ebp
   20d2d:	0f 8e 2e 05 00 00    	jle    21261 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x7a1>
   20d33:	4c 8d a4 24 f0 00 00 	lea    0xf0(%rsp),%r12
   20d3a:	00 
   20d3b:	48 63 d5             	movslq %ebp,%rdx
   20d3e:	89 6c 24 20          	mov    %ebp,0x20(%rsp)
      if (info.offset != s->callback_already_read + (s->img_buffer - s->img_buffer_original)) {
   20d42:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   20d49:	49 8d 1c 94          	lea    (%r12,%rdx,4),%rbx
   20d4d:	4c 89 e5             	mov    %r12,%rbp
   20d50:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
   20d55:	49 89 dc             	mov    %rbx,%r12
   20d58:	44 89 4c 24 10       	mov    %r9d,0x10(%rsp)
   20d5d:	44 89 c3             	mov    %r8d,%ebx
   20d60:	eb 71                	jmp    20dd3 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x313>
   20d62:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   20d68:	48 8d 78 01          	lea    0x1(%rax),%rdi
   20d6c:	49 89 bd c0 00 00 00 	mov    %rdi,0xc0(%r13)
   20d73:	0f b6 00             	movzbl (%rax),%eax
         pal[i][2] = stbi__get8(s);
   20d76:	88 45 02             	mov    %al,0x2(%rbp)
   if (s->img_buffer < s->img_buffer_end)
   20d79:	48 39 d7             	cmp    %rdx,%rdi
   20d7c:	0f 83 1e 01 00 00    	jae    20ea0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x3e0>
      return *s->img_buffer++;
   20d82:	48 8d 77 01          	lea    0x1(%rdi),%rsi
   20d86:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
   20d8d:	0f b6 07             	movzbl (%rdi),%eax
         pal[i][1] = stbi__get8(s);
   20d90:	88 45 01             	mov    %al,0x1(%rbp)
   if (s->img_buffer < s->img_buffer_end)
   20d93:	48 39 d6             	cmp    %rdx,%rsi
   20d96:	0f 83 14 01 00 00    	jae    20eb0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x3f0>
      return *s->img_buffer++;
   20d9c:	48 8d 46 01          	lea    0x1(%rsi),%rax
   20da0:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   20da7:	0f b6 16             	movzbl (%rsi),%edx
         pal[i][0] = stbi__get8(s);
   20daa:	88 55 00             	mov    %dl,0x0(%rbp)
         if (info.hsz != 12) stbi__get8(s);
   20dad:	83 fb 0c             	cmp    $0xc,%ebx
   20db0:	74 14                	je     20dc6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x306>
   if (s->img_buffer < s->img_buffer_end)
   20db2:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   20db9:	73 75                	jae    20e30 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x370>
      return *s->img_buffer++;
   20dbb:	48 83 c0 01          	add    $0x1,%rax
   20dbf:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
      for (i=0; i < psize; ++i) {
   20dc6:	48 83 c5 04          	add    $0x4,%rbp
   20dca:	49 39 ec             	cmp    %rbp,%r12
   20dcd:	0f 84 7d 04 00 00    	je     21250 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x790>
   if (s->img_buffer < s->img_buffer_end)
   20dd3:	49 8b 95 c8 00 00 00 	mov    0xc8(%r13),%rdx
   20dda:	48 39 d0             	cmp    %rdx,%rax
   20ddd:	72 89                	jb     20d68 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x2a8>
   if (s->read_from_callbacks) {
   20ddf:	41 8b 7d 30          	mov    0x30(%r13),%edi
   20de3:	85 ff                	test   %edi,%edi
   20de5:	0f 85 05 01 00 00    	jne    20ef0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x430>
         pal[i][2] = stbi__get8(s);
   20deb:	c6 45 02 00          	movb   $0x0,0x2(%rbp)
   if (s->read_from_callbacks) {
   20def:	41 8b 75 30          	mov    0x30(%r13),%esi
   20df3:	85 f6                	test   %esi,%esi
   20df5:	0f 85 c5 00 00 00    	jne    20ec0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x400>
         pal[i][1] = stbi__get8(s);
   20dfb:	c6 45 01 00          	movb   $0x0,0x1(%rbp)
   if (s->read_from_callbacks) {
   20dff:	41 8b 4d 30          	mov    0x30(%r13),%ecx
   return 0;
   20e03:	31 d2                	xor    %edx,%edx
   if (s->read_from_callbacks) {
   20e05:	85 c9                	test   %ecx,%ecx
   20e07:	74 a1                	je     20daa <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x2ea>
      stbi__refill_buffer(s);
   20e09:	4c 89 ef             	mov    %r13,%rdi
   20e0c:	e8 6f 04 ff ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   20e11:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   20e18:	48 8d 42 01          	lea    0x1(%rdx),%rax
   20e1c:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   20e23:	0f b6 12             	movzbl (%rdx),%edx
   20e26:	eb 82                	jmp    20daa <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x2ea>
   20e28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   20e2f:	00 
   if (s->read_from_callbacks) {
   20e30:	41 8b 55 30          	mov    0x30(%r13),%edx
   20e34:	85 d2                	test   %edx,%edx
   20e36:	74 8e                	je     20dc6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x306>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   20e38:	49 8d 75 38          	lea    0x38(%r13),%rsi
   20e3c:	41 8b 55 34          	mov    0x34(%r13),%edx
   20e40:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   20e44:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
   20e49:	41 ff 55 10          	call   *0x10(%r13)
   if (n == 0) {
   20e4d:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   20e52:	48 63 d0             	movslq %eax,%rdx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   20e55:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   20e5c:	49 2b 85 d0 00 00 00 	sub    0xd0(%r13),%rax
   20e63:	41 01 85 b8 00 00 00 	add    %eax,0xb8(%r13)
   if (n == 0) {
   20e6a:	85 d2                	test   %edx,%edx
      s->img_buffer_end = s->buffer_start+1;
   20e6c:	49 8d 45 39          	lea    0x39(%r13),%rax
   if (n == 0) {
   20e70:	0f 85 a9 11 00 00    	jne    2201f <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x155f>
      s->read_from_callbacks = 0;
   20e76:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   20e7d:	00 
      s->img_buffer_end = s->buffer_start+1;
   20e7e:	48 89 c6             	mov    %rax,%rsi
      *s->img_buffer = 0;
   20e81:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   20e86:	49 89 b5 c8 00 00 00 	mov    %rsi,0xc8(%r13)
      return *s->img_buffer++;
   20e8d:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   20e94:	e9 2d ff ff ff       	jmp    20dc6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x306>
   20e99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   20ea0:	48 89 f8             	mov    %rdi,%rax
   20ea3:	e9 47 ff ff ff       	jmp    20def <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x32f>
   20ea8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   20eaf:	00 
   20eb0:	48 89 f0             	mov    %rsi,%rax
   20eb3:	e9 47 ff ff ff       	jmp    20dff <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x33f>
   20eb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   20ebf:	00 
      stbi__refill_buffer(s);
   20ec0:	4c 89 ef             	mov    %r13,%rdi
   20ec3:	e8 b8 03 ff ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   20ec8:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   if (s->img_buffer < s->img_buffer_end)
   20ecf:	49 8b 95 c8 00 00 00 	mov    0xc8(%r13),%rdx
      return *s->img_buffer++;
   20ed6:	48 8d 70 01          	lea    0x1(%rax),%rsi
   20eda:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
   20ee1:	0f b6 00             	movzbl (%rax),%eax
   20ee4:	e9 a7 fe ff ff       	jmp    20d90 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x2d0>
   20ee9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      stbi__refill_buffer(s);
   20ef0:	4c 89 ef             	mov    %r13,%rdi
   20ef3:	e8 88 03 ff ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   20ef8:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   if (s->img_buffer < s->img_buffer_end)
   20eff:	49 8b 95 c8 00 00 00 	mov    0xc8(%r13),%rdx
      return *s->img_buffer++;
   20f06:	48 8d 78 01          	lea    0x1(%rax),%rdi
   20f0a:	49 89 bd c0 00 00 00 	mov    %rdi,0xc0(%r13)
   20f11:	0f b6 00             	movzbl (%rax),%eax
   20f14:	e9 5d fe ff ff       	jmp    20d76 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x2b6>
   20f19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      stbi__skip(s, info.offset - info.extra_read - info.hsz);
   20f20:	44 89 f8             	mov    %r15d,%eax
   20f23:	2b 84 24 e0 00 00 00 	sub    0xe0(%rsp),%eax
   if (n == 0) return;  // already there!
   20f2a:	44 29 c0             	sub    %r8d,%eax
   20f2d:	89 c6                	mov    %eax,%esi
   20f2f:	74 22                	je     20f53 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x493>
   if (n < 0) {
   20f31:	0f 88 14 0a 00 00    	js     2194b <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xe8b>
   20f37:	4c 89 ef             	mov    %r13,%rdi
   20f3a:	44 89 4c 24 10       	mov    %r9d,0x10(%rsp)
   20f3f:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
   20f44:	e8 c7 1b ff ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   20f49:	44 8b 4c 24 10       	mov    0x10(%rsp),%r9d
   20f4e:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
      if (info.bpp == 24) width = 3 * s->img_x;
   20f53:	84 db                	test   %bl,%bl
   20f55:	0f 85 79 10 00 00    	jne    21fd4 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1514>
      else if (info.bpp == 16) width = 2*s->img_x;
   20f5b:	83 7c 24 18 10       	cmpl   $0x10,0x18(%rsp)
   20f60:	0f 84 db 06 00 00    	je     21641 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xb81>
      pad = (-width) & 3;
   20f66:	c7 84 24 a8 00 00 00 	movl   $0x0,0xa8(%rsp)
   20f6d:	00 00 00 00 
      } else if (info.bpp == 32) {
   20f71:	83 7c 24 18 20       	cmpl   $0x20,0x18(%rsp)
   20f76:	0f 85 d7 06 00 00    	jne    21653 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xb93>
         if (mb == 0xff && mg == 0xff00 && mr == 0x00ff0000 && ma == 0xff000000)
   20f7c:	81 7c 24 3c ff 00 00 	cmpl   $0xff,0x3c(%rsp)
   20f83:	00 
   20f84:	0f 85 2c 11 00 00    	jne    220b6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x15f6>
   20f8a:	81 7c 24 38 00 ff 00 	cmpl   $0xff00,0x38(%rsp)
   20f91:	00 
   20f92:	0f 85 1e 11 00 00    	jne    220b6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x15f6>
   20f98:	81 7c 24 30 00 00 ff 	cmpl   $0xff0000,0x30(%rsp)
   20f9f:	00 
   20fa0:	0f 85 3d 11 00 00    	jne    220e3 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1623>
   20fa6:	45 84 e4             	test   %r12b,%r12b
   20fa9:	0f 84 34 11 00 00    	je     220e3 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1623>
      if (info.bpp == 24) width = 3 * s->img_x;
   20faf:	41 8b 45 00          	mov    0x0(%r13),%eax
            easy = 2;
   20fb3:	c7 44 24 5c 02 00 00 	movl   $0x2,0x5c(%rsp)
   20fba:	00 
      if (info.bpp == 24) width = 3 * s->img_x;
   20fbb:	89 c1                	mov    %eax,%ecx
      int rshift=0,gshift=0,bshift=0,ashift=0,rcount=0,gcount=0,bcount=0,acount=0;
   20fbd:	c7 84 24 9c 00 00 00 	movl   $0x0,0x9c(%rsp)
   20fc4:	00 00 00 00 
   20fc8:	c7 84 24 b4 00 00 00 	movl   $0x0,0xb4(%rsp)
   20fcf:	00 00 00 00 
   20fd3:	c7 84 24 b0 00 00 00 	movl   $0x0,0xb0(%rsp)
   20fda:	00 00 00 00 
   20fde:	c7 84 24 ac 00 00 00 	movl   $0x0,0xac(%rsp)
   20fe5:	00 00 00 00 
   20fe9:	c7 84 24 a0 00 00 00 	movl   $0x0,0xa0(%rsp)
   20ff0:	00 00 00 00 
   20ff4:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   20ffb:	00 00 00 00 
   20fff:	c7 44 24 64 00 00 00 	movl   $0x0,0x64(%rsp)
   21006:	00 
   21007:	c7 44 24 60 00 00 00 	movl   $0x0,0x60(%rsp)
   2100e:	00 
      for (j=0; j < (int) s->img_y; ++j) {
   2100f:	45 8b 45 04          	mov    0x4(%r13),%r8d
   21013:	45 85 c0             	test   %r8d,%r8d
   21016:	0f 8e 05 04 00 00    	jle    21421 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x961>
   v >>= (8-bits);
   2101c:	8b b4 24 9c 00 00 00 	mov    0x9c(%rsp),%esi
   21023:	bb 08 00 00 00       	mov    $0x8,%ebx
   21028:	44 89 4c 24 10       	mov    %r9d,0x10(%rsp)
      int z = 0;
   2102d:	31 ed                	xor    %ebp,%ebp
   v >>= (8-bits);
   2102f:	44 89 94 24 bc 00 00 	mov    %r10d,0xbc(%rsp)
   21036:	00 
   21037:	4c 8d 25 e2 72 01 00 	lea    0x172e2(%rip),%r12        # 38320 <_ZZL17stbi__shiftsignedjiiE9mul_table>
      for (j=0; j < (int) s->img_y; ++j) {
   2103e:	c7 84 24 98 00 00 00 	movl   $0x0,0x98(%rsp)
   21045:	00 00 00 00 
   v >>= (8-bits);
   21049:	29 f3                	sub    %esi,%ebx
   2104b:	89 9c 24 a4 00 00 00 	mov    %ebx,0xa4(%rsp)
   21052:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         if (easy) {
   21058:	44 8b 5c 24 5c       	mov    0x5c(%rsp),%r11d
   2105d:	45 85 db             	test   %r11d,%r11d
   21060:	0f 85 f2 0a 00 00    	jne    21b58 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1098>
            for (i=0; i < (int) s->img_x; ++i) {
   21066:	85 c0                	test   %eax,%eax
   21068:	0f 8e 07 0a 00 00    	jle    21a75 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xfb5>
   v >>= (8-bits);
   2106e:	4c 63 8c 24 ac 00 00 	movslq 0xac(%rsp),%r9
   21075:	00 
   21076:	b8 08 00 00 00       	mov    $0x8,%eax
            for (i=0; i < (int) s->img_x; ++i) {
   2107b:	31 d2                	xor    %edx,%edx
      v <<= -shift;
   2107d:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
   v >>= (8-bits);
   21082:	4c 63 84 24 b0 00 00 	movslq 0xb0(%rsp),%r8
   21089:	00 
   2108a:	89 6c 24 58          	mov    %ebp,0x58(%rsp)
      v <<= -shift;
   2108e:	41 89 d5             	mov    %edx,%r13d
   21091:	4c 8d 3d 48 72 01 00 	lea    0x17248(%rip),%r15        # 382e0 <_ZZL17stbi__shiftsignedjiiE11shift_table>
   v >>= (8-bits);
   21098:	44 29 c8             	sub    %r9d,%eax
   2109b:	8b bc 24 b4 00 00 00 	mov    0xb4(%rsp),%edi
   210a2:	89 44 24 68          	mov    %eax,0x68(%rsp)
   210a6:	b8 08 00 00 00       	mov    $0x8,%eax
   210ab:	44 29 c0             	sub    %r8d,%eax
   210ae:	48 63 df             	movslq %edi,%rbx
   210b1:	89 44 24 6c          	mov    %eax,0x6c(%rsp)
   210b5:	b8 08 00 00 00       	mov    $0x8,%eax
      v <<= -shift;
   210ba:	49 89 da             	mov    %rbx,%r10
   210bd:	8b 9c 24 b8 00 00 00 	mov    0xb8(%rsp),%ebx
   v >>= (8-bits);
   210c4:	29 f8                	sub    %edi,%eax
   210c6:	89 44 24 70          	mov    %eax,0x70(%rsp)
      v <<= -shift;
   210ca:	8b 44 24 60          	mov    0x60(%rsp),%eax
   210ce:	f7 d8                	neg    %eax
   210d0:	89 44 24 74          	mov    %eax,0x74(%rsp)
   210d4:	8b 44 24 64          	mov    0x64(%rsp),%eax
   210d8:	f7 d8                	neg    %eax
   210da:	89 44 24 78          	mov    %eax,0x78(%rsp)
   210de:	e9 31 01 00 00       	jmp    21214 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x754>
   210e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
               stbi__uint32 v = (bpp == 16 ? (stbi__uint32) stbi__get16le(s) : stbi__get32le(s));
   210e8:	e8 b3 da ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   210ed:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
   210f2:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
   210f7:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   210fc:	89 c6                	mov    %eax,%esi
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mr, rshift, rcount));
   210fe:	8b 44 24 30          	mov    0x30(%rsp),%eax
      v <<= -shift;
   21102:	8b 54 24 60          	mov    0x60(%rsp),%edx
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mr, rshift, rcount));
   21106:	44 8d 5d 01          	lea    0x1(%rbp),%r11d
      v <<= -shift;
   2110a:	0f b6 4c 24 74       	movzbl 0x74(%rsp),%ecx
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mg, gshift, gcount));
   2110f:	4d 63 db             	movslq %r11d,%r11
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mr, rshift, rcount));
   21112:	21 f0                	and    %esi,%eax
      v <<= -shift;
   21114:	89 c7                	mov    %eax,%edi
   21116:	d3 e7                	shl    %cl,%edi
   21118:	89 d1                	mov    %edx,%ecx
   2111a:	d3 e8                	shr    %cl,%eax
   2111c:	85 d2                	test   %edx,%edx
   v >>= (8-bits);
   2111e:	0f b6 4c 24 68       	movzbl 0x68(%rsp),%ecx
      v <<= -shift;
   21123:	8b 54 24 64          	mov    0x64(%rsp),%edx
   21127:	0f 48 c7             	cmovs  %edi,%eax
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mr, rshift, rcount));
   2112a:	48 63 fd             	movslq %ebp,%rdi
   v >>= (8-bits);
   2112d:	d3 e8                	shr    %cl,%eax
   return (int) ((unsigned) v * mul_table[bits]) >> shift_table[bits];
   2112f:	43 0f af 04 8c       	imul   (%r12,%r9,4),%eax
   21134:	43 8b 0c 8f          	mov    (%r15,%r9,4),%ecx
   21138:	d3 f8                	sar    %cl,%eax
      v <<= -shift;
   2113a:	0f b6 4c 24 78       	movzbl 0x78(%rsp),%ecx
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mr, rshift, rcount));
   2113f:	41 88 04 3e          	mov    %al,(%r14,%rdi,1)
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mg, gshift, gcount));
   21143:	8b 44 24 38          	mov    0x38(%rsp),%eax
   21147:	21 f0                	and    %esi,%eax
      v <<= -shift;
   21149:	89 c7                	mov    %eax,%edi
   2114b:	d3 e7                	shl    %cl,%edi
   2114d:	89 d1                	mov    %edx,%ecx
   2114f:	d3 e8                	shr    %cl,%eax
   21151:	85 d2                	test   %edx,%edx
   v >>= (8-bits);
   21153:	0f b6 4c 24 6c       	movzbl 0x6c(%rsp),%ecx
      v <<= -shift;
   21158:	0f 48 c7             	cmovs  %edi,%eax
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mg, gshift, gcount));
   2115b:	8d 7d 02             	lea    0x2(%rbp),%edi
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mb, bshift, bcount));
   2115e:	48 63 ff             	movslq %edi,%rdi
   v >>= (8-bits);
   21161:	d3 e8                	shr    %cl,%eax
   return (int) ((unsigned) v * mul_table[bits]) >> shift_table[bits];
   21163:	43 0f af 04 84       	imul   (%r12,%r8,4),%eax
   21168:	43 8b 0c 87          	mov    (%r15,%r8,4),%ecx
   2116c:	d3 f8                	sar    %cl,%eax
      v <<= -shift;
   2116e:	89 d9                	mov    %ebx,%ecx
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mg, gshift, gcount));
   21170:	43 88 04 1e          	mov    %al,(%r14,%r11,1)
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mb, bshift, bcount));
   21174:	8b 44 24 3c          	mov    0x3c(%rsp),%eax
      v <<= -shift;
   21178:	f7 d9                	neg    %ecx
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mb, bshift, bcount));
   2117a:	21 f0                	and    %esi,%eax
      v <<= -shift;
   2117c:	41 89 c3             	mov    %eax,%r11d
   2117f:	41 d3 e3             	shl    %cl,%r11d
   21182:	89 d9                	mov    %ebx,%ecx
   21184:	d3 e8                	shr    %cl,%eax
   21186:	85 db                	test   %ebx,%ebx
   v >>= (8-bits);
   21188:	0f b6 4c 24 70       	movzbl 0x70(%rsp),%ecx
      v <<= -shift;
   2118d:	41 0f 48 c3          	cmovs  %r11d,%eax
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mb, bshift, bcount));
   21191:	83 c5 03             	add    $0x3,%ebp
   v >>= (8-bits);
   21194:	d3 e8                	shr    %cl,%eax
   return (int) ((unsigned) v * mul_table[bits]) >> shift_table[bits];
   21196:	43 0f af 04 94       	imul   (%r12,%r10,4),%eax
   2119b:	43 8b 0c 97          	mov    (%r15,%r10,4),%ecx
   2119f:	d3 f8                	sar    %cl,%eax
               out[z++] = STBI__BYTECAST(stbi__shiftsigned(v & mb, bshift, bcount));
   211a1:	41 88 04 3e          	mov    %al,(%r14,%rdi,1)
               a = (ma ? stbi__shiftsigned(v & ma, ashift, acount) : 255);
   211a5:	8b 7c 24 20          	mov    0x20(%rsp),%edi
   211a9:	b8 ff 00 00 00       	mov    $0xff,%eax
   211ae:	85 ff                	test   %edi,%edi
   211b0:	74 39                	je     211eb <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x72b>
   211b2:	89 f8                	mov    %edi,%eax
      v <<= -shift;
   211b4:	8b bc 24 a0 00 00 00 	mov    0xa0(%rsp),%edi
               a = (ma ? stbi__shiftsigned(v & ma, ashift, acount) : 255);
   211bb:	21 f0                	and    %esi,%eax
      v <<= -shift;
   211bd:	89 f9                	mov    %edi,%ecx
   211bf:	89 c6                	mov    %eax,%esi
   211c1:	f7 d9                	neg    %ecx
   211c3:	d3 e6                	shl    %cl,%esi
   211c5:	89 f9                	mov    %edi,%ecx
   211c7:	d3 e8                	shr    %cl,%eax
   211c9:	85 ff                	test   %edi,%edi
   v >>= (8-bits);
   211cb:	0f b6 8c 24 a4 00 00 	movzbl 0xa4(%rsp),%ecx
   211d2:	00 
      v <<= -shift;
   211d3:	0f 48 c6             	cmovs  %esi,%eax
   v >>= (8-bits);
   211d6:	d3 e8                	shr    %cl,%eax
   return (int) ((unsigned) v * mul_table[bits]) >> shift_table[bits];
   211d8:	48 63 8c 24 9c 00 00 	movslq 0x9c(%rsp),%rcx
   211df:	00 
   211e0:	41 0f af 04 8c       	imul   (%r12,%rcx,4),%eax
   211e5:	41 8b 0c 8f          	mov    (%r15,%rcx,4),%ecx
   211e9:	d3 f8                	sar    %cl,%eax
               all_a |= a;
   211eb:	09 44 24 28          	or     %eax,0x28(%rsp)
               if (target == 4) out[z++] = STBI__BYTECAST(a);
   211ef:	83 7c 24 10 04       	cmpl   $0x4,0x10(%rsp)
   211f4:	0f 84 16 08 00 00    	je     21a10 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xf50>
            for (i=0; i < (int) s->img_x; ++i) {
   211fa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   211ff:	41 83 c5 01          	add    $0x1,%r13d
   21203:	8b 00                	mov    (%rax),%eax
   21205:	89 c1                	mov    %eax,%ecx
   21207:	41 39 c5             	cmp    %eax,%r13d
   2120a:	0f 8d 60 08 00 00    	jge    21a70 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xfb0>
               if (target == 4) out[z++] = a;
   21210:	89 6c 24 58          	mov    %ebp,0x58(%rsp)
               stbi__uint32 v = (bpp == 16 ? (stbi__uint32) stbi__get16le(s) : stbi__get32le(s));
   21214:	83 7c 24 18 10       	cmpl   $0x10,0x18(%rsp)
   21219:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
   2121e:	4c 89 54 24 50       	mov    %r10,0x50(%rsp)
   21223:	4c 89 44 24 48       	mov    %r8,0x48(%rsp)
   21228:	4c 89 4c 24 40       	mov    %r9,0x40(%rsp)
   2122d:	0f 85 b5 fe ff ff    	jne    210e8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x628>
   21233:	e8 a8 d1 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   21238:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   2123d:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
   21242:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
   21247:	89 c6                	mov    %eax,%esi
   21249:	e9 b0 fe ff ff       	jmp    210fe <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x63e>
   2124e:	66 90                	xchg   %ax,%ax
   21250:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
   21255:	44 8b 4c 24 10       	mov    0x10(%rsp),%r9d
   2125a:	41 89 d8             	mov    %ebx,%r8d
   2125d:	8b 6c 24 20          	mov    0x20(%rsp),%ebp
      stbi__skip(s, info.offset - info.extra_read - info.hsz - psize * (info.hsz == 12 ? 3 : 4));
   21261:	44 2b bc 24 e0 00 00 	sub    0xe0(%rsp),%r15d
   21268:	00 
   21269:	31 c0                	xor    %eax,%eax
   2126b:	45 89 fc             	mov    %r15d,%r12d
   2126e:	45 29 c4             	sub    %r8d,%r12d
   21271:	41 83 f8 0c          	cmp    $0xc,%r8d
   21275:	0f 95 c0             	setne  %al
   21278:	83 c0 03             	add    $0x3,%eax
   2127b:	0f af c5             	imul   %ebp,%eax
   if (n == 0) return;  // already there!
   2127e:	41 29 c4             	sub    %eax,%r12d
   21281:	74 25                	je     212a8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x7e8>
   if (n < 0) {
   21283:	0f 88 1a 0e 00 00    	js     220a3 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x15e3>
   21289:	44 89 e6             	mov    %r12d,%esi
   2128c:	4c 89 ef             	mov    %r13,%rdi
   2128f:	44 89 4c 24 10       	mov    %r9d,0x10(%rsp)
   21294:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
   21299:	e8 72 18 ff ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   2129e:	44 8b 4c 24 10       	mov    0x10(%rsp),%r9d
   212a3:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
      if (info.bpp == 1) width = (s->img_x + 7) >> 3;
   212a8:	83 7c 24 18 01       	cmpl   $0x1,0x18(%rsp)
   212ad:	0f 84 9f 02 00 00    	je     21552 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xa92>
      else if (info.bpp == 4) width = (s->img_x + 1) >> 1;
   212b3:	83 7c 24 18 04       	cmpl   $0x4,0x18(%rsp)
   212b8:	0f 84 69 0d 00 00    	je     22027 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1567>
      else if (info.bpp == 8) width = s->img_x;
   212be:	83 7c 24 18 08       	cmpl   $0x8,0x18(%rsp)
   212c3:	0f 85 fd 0d 00 00    	jne    220c6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1606>
   212c9:	41 8b 45 00          	mov    0x0(%r13),%eax
      pad = (-width)&3;
   212cd:	89 c2                	mov    %eax,%edx
      else if (info.bpp == 8) width = s->img_x;
   212cf:	89 c1                	mov    %eax,%ecx
      pad = (-width)&3;
   212d1:	f7 da                	neg    %edx
   212d3:	83 e2 03             	and    $0x3,%edx
   212d6:	89 54 24 38          	mov    %edx,0x38(%rsp)
         for (j=0; j < (int) s->img_y; ++j) {
   212da:	45 8b 45 04          	mov    0x4(%r13),%r8d
      s->img_buffer_end = s->buffer_start+1;
   212de:	49 8d 5d 39          	lea    0x39(%r13),%rbx
         for (j=0; j < (int) s->img_y; ++j) {
   212e2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
   212e9:	00 
      int z=0;
   212ea:	31 ed                	xor    %ebp,%ebp
      s->img_buffer_end = s->buffer_start+1;
   212ec:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
         for (j=0; j < (int) s->img_y; ++j) {
   212f1:	45 85 c0             	test   %r8d,%r8d
   212f4:	0f 8e 27 01 00 00    	jle    21421 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x961>
   212fa:	44 89 54 24 3c       	mov    %r10d,0x3c(%rsp)
   212ff:	44 8b 7c 24 18       	mov    0x18(%rsp),%r15d
   21304:	45 89 cc             	mov    %r9d,%r12d
   21307:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2130e:	00 00 
            for (i=0; i < (int) s->img_x; i += 2) {
   21310:	45 31 c0             	xor    %r8d,%r8d
   21313:	48 8d 9c 24 f0 00 00 	lea    0xf0(%rsp),%rbx
   2131a:	00 
   2131b:	85 c0                	test   %eax,%eax
   2131d:	0f 8e ca 00 00 00    	jle    213ed <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x92d>
   21323:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (s->img_buffer < s->img_buffer_end)
   21328:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2132f:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   21336:	0f 83 24 06 00 00    	jae    21960 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xea0>
      return *s->img_buffer++;
   2133c:	48 8d 50 01          	lea    0x1(%rax),%rdx
   21340:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   21347:	0f b6 00             	movzbl (%rax),%eax
   2134a:	89 c1                	mov    %eax,%ecx
               int v=stbi__get8(s),v2=0;
   2134c:	31 f6                	xor    %esi,%esi
               if (info.bpp == 4) {
   2134e:	41 83 ff 04          	cmp    $0x4,%r15d
   21352:	75 08                	jne    2135c <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x89c>
                  v2 = v & 15;
   21354:	89 ce                	mov    %ecx,%esi
                  v >>= 4;
   21356:	c1 f8 04             	sar    $0x4,%eax
                  v2 = v & 15;
   21359:	83 e6 0f             	and    $0xf,%esi
               out[z++] = pal[v][0];
   2135c:	48 98                	cltq
   2135e:	48 63 d5             	movslq %ebp,%rdx
   21361:	0f b7 0c 83          	movzwl (%rbx,%rax,4),%ecx
               out[z++] = pal[v][2];
   21365:	0f b6 84 84 f2 00 00 	movzbl 0xf2(%rsp,%rax,4),%eax
   2136c:	00 
               out[z++] = pal[v][0];
   2136d:	66 41 89 0c 16       	mov    %cx,(%r14,%rdx,1)
               out[z++] = pal[v][1];
   21372:	8d 4d 02             	lea    0x2(%rbp),%ecx
               out[z++] = pal[v][2];
   21375:	8d 55 03             	lea    0x3(%rbp),%edx
   21378:	48 63 c9             	movslq %ecx,%rcx
   2137b:	41 88 04 0e          	mov    %al,(%r14,%rcx,1)
               if (target == 4) out[z++] = 255;
   2137f:	41 83 fc 04          	cmp    $0x4,%r12d
   21383:	75 0b                	jne    21390 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x8d0>
   21385:	48 63 d2             	movslq %edx,%rdx
   21388:	41 c6 04 16 ff       	movb   $0xff,(%r14,%rdx,1)
   2138d:	8d 55 04             	lea    0x4(%rbp),%edx
               if (i+1 == (int) s->img_x) break;
   21390:	41 8b 45 00          	mov    0x0(%r13),%eax
   21394:	41 8d 78 01          	lea    0x1(%r8),%edi
   21398:	89 c1                	mov    %eax,%ecx
   2139a:	39 f8                	cmp    %edi,%eax
   2139c:	0f 84 9e 0a 00 00    	je     21e40 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1380>
               v = (info.bpp == 8) ? stbi__get8(s) : v2;
   213a2:	41 83 ff 08          	cmp    $0x8,%r15d
   213a6:	0f 84 94 06 00 00    	je     21a40 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xf80>
               out[z++] = pal[v][0];
   213ac:	48 63 c6             	movslq %esi,%rax
   213af:	48 63 ca             	movslq %edx,%rcx
               out[z++] = pal[v][2];
   213b2:	8d 6a 03             	lea    0x3(%rdx),%ebp
               out[z++] = pal[v][0];
   213b5:	0f b7 34 83          	movzwl (%rbx,%rax,4),%esi
               out[z++] = pal[v][2];
   213b9:	0f b6 84 84 f2 00 00 	movzbl 0xf2(%rsp,%rax,4),%eax
   213c0:	00 
               out[z++] = pal[v][0];
   213c1:	66 41 89 34 0e       	mov    %si,(%r14,%rcx,1)
               out[z++] = pal[v][1];
   213c6:	8d 4a 02             	lea    0x2(%rdx),%ecx
               out[z++] = pal[v][2];
   213c9:	48 63 c9             	movslq %ecx,%rcx
   213cc:	41 88 04 0e          	mov    %al,(%r14,%rcx,1)
               if (target == 4) out[z++] = 255;
   213d0:	41 83 fc 04          	cmp    $0x4,%r12d
   213d4:	0f 84 0e 06 00 00    	je     219e8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xf28>
            for (i=0; i < (int) s->img_x; i += 2) {
   213da:	41 8b 45 00          	mov    0x0(%r13),%eax
   213de:	41 83 c0 02          	add    $0x2,%r8d
   213e2:	89 c1                	mov    %eax,%ecx
   213e4:	41 39 c0             	cmp    %eax,%r8d
   213e7:	0f 8c 3b ff ff ff    	jl     21328 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x868>
   if (n == 0) return;  // already there!
   213ed:	8b 74 24 38          	mov    0x38(%rsp),%esi
   213f1:	85 f6                	test   %esi,%esi
   213f3:	74 0e                	je     21403 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x943>
   if (n < 0) {
   213f5:	4c 89 ef             	mov    %r13,%rdi
   213f8:	e8 13 17 ff ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
      for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)
   213fd:	41 8b 45 00          	mov    0x0(%r13),%eax
   21401:	89 c1                	mov    %eax,%ecx
         for (j=0; j < (int) s->img_y; ++j) {
   21403:	83 44 24 08 01       	addl   $0x1,0x8(%rsp)
   21408:	45 8b 45 04          	mov    0x4(%r13),%r8d
   2140c:	8b 5c 24 08          	mov    0x8(%rsp),%ebx
   21410:	44 39 c3             	cmp    %r8d,%ebx
   21413:	0f 8c f7 fe ff ff    	jl     21310 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x850>
   21419:	44 8b 54 24 3c       	mov    0x3c(%rsp),%r10d
   2141e:	45 89 e1             	mov    %r12d,%r9d
   if (target == 4 && all_a == 0)
   21421:	41 83 f9 04          	cmp    $0x4,%r9d
   21425:	75 28                	jne    2144f <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x98f>
   21427:	8b 54 24 28          	mov    0x28(%rsp),%edx
   2142b:	85 d2                	test   %edx,%edx
   2142d:	75 20                	jne    2144f <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x98f>
      for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)
   2142f:	89 c2                	mov    %eax,%edx
   21431:	41 0f af d0          	imul   %r8d,%edx
   21435:	8d 14 95 ff ff ff ff 	lea    -0x1(,%rdx,4),%edx
   2143c:	85 d2                	test   %edx,%edx
   2143e:	78 0f                	js     2144f <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x98f>
         out[i] = 255;
   21440:	41 c6 04 16 ff       	movb   $0xff,(%r14,%rdx,1)
      for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)
   21445:	48 83 ea 04          	sub    $0x4,%rdx
   21449:	85 d2                	test   %edx,%edx
   2144b:	79 f3                	jns    21440 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x980>
      out = stbi__convert_format(out, target, req_comp, s->img_x, s->img_y);
   2144d:	89 c1                	mov    %eax,%ecx
   if (flip_vertically) {
   2144f:	45 85 d2             	test   %r10d,%r10d
   21452:	7e 68                	jle    214bc <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x9fc>
      for (j=0; j < (int) s->img_y>>1; ++j) {
   21454:	41 83 f8 01          	cmp    $0x1,%r8d
   21458:	7e 62                	jle    214bc <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x9fc>
   2145a:	45 31 db             	xor    %r11d,%r11d
   2145d:	0f 1f 00             	nopl   (%rax)
         stbi_uc *p1 = out +      j     *s->img_x*target;
   21460:	89 c8                	mov    %ecx,%eax
         stbi_uc *p2 = out + (s->img_y-1-j)*s->img_x*target;
   21462:	41 8d 50 ff          	lea    -0x1(%r8),%edx
   21466:	41 0f af c1          	imul   %r9d,%eax
   2146a:	44 29 da             	sub    %r11d,%edx
         stbi_uc *p1 = out +      j     *s->img_x*target;
   2146d:	89 c6                	mov    %eax,%esi
         stbi_uc *p2 = out + (s->img_y-1-j)*s->img_x*target;
   2146f:	0f af d0             	imul   %eax,%edx
         stbi_uc *p1 = out +      j     *s->img_x*target;
   21472:	41 0f af f3          	imul   %r11d,%esi
         for (i=0; i < (int) s->img_x*target; ++i) {
   21476:	85 c0                	test   %eax,%eax
   21478:	7e 42                	jle    214bc <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x9fc>
   2147a:	41 8b 4d 00          	mov    0x0(%r13),%ecx
   2147e:	31 c0                	xor    %eax,%eax
   21480:	4c 01 f6             	add    %r14,%rsi
   21483:	4c 01 f2             	add    %r14,%rdx
   21486:	41 89 ca             	mov    %ecx,%r10d
   21489:	45 0f af d1          	imul   %r9d,%r10d
   2148d:	0f 1f 00             	nopl   (%rax)
            t = p1[i]; p1[i] = p2[i]; p2[i] = t;
   21490:	0f b6 3c 06          	movzbl (%rsi,%rax,1),%edi
   21494:	44 0f b6 04 02       	movzbl (%rdx,%rax,1),%r8d
   21499:	44 88 04 06          	mov    %r8b,(%rsi,%rax,1)
   2149d:	40 88 3c 02          	mov    %dil,(%rdx,%rax,1)
         for (i=0; i < (int) s->img_x*target; ++i) {
   214a1:	48 83 c0 01          	add    $0x1,%rax
   214a5:	41 39 c2             	cmp    %eax,%r10d
   214a8:	7f e6                	jg     21490 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x9d0>
      for (j=0; j < (int) s->img_y>>1; ++j) {
   214aa:	45 8b 45 04          	mov    0x4(%r13),%r8d
   214ae:	41 83 c3 01          	add    $0x1,%r11d
   214b2:	44 89 c0             	mov    %r8d,%eax
   214b5:	d1 f8                	sar    %eax
   214b7:	41 39 c3             	cmp    %eax,%r11d
   214ba:	7c a4                	jl     21460 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x9a0>
   if (req_comp && req_comp != target) {
   214bc:	8b 44 24 7c          	mov    0x7c(%rsp),%eax
   214c0:	85 c0                	test   %eax,%eax
   214c2:	74 22                	je     214e6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xa26>
   214c4:	44 39 c8             	cmp    %r9d,%eax
   214c7:	74 1d                	je     214e6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xa26>
   if (req_comp == img_n) return data;
   214c9:	4c 89 f7             	mov    %r14,%rdi
   214cc:	89 c2                	mov    %eax,%edx
   214ce:	44 89 ce             	mov    %r9d,%esi
   214d1:	e8 2a 3c ff ff       	call   15100 <_ZL20stbi__convert_formatPhiijj.part.0>
   214d6:	49 89 c6             	mov    %rax,%r14
      if (out == NULL) return out; // stbi__convert_format frees input on failure
   214d9:	48 85 c0             	test   %rax,%rax
   214dc:	0f 84 7e f7 ff ff    	je     20c60 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1a0>
   *x = s->img_x;
   214e2:	41 8b 4d 00          	mov    0x0(%r13),%ecx
   214e6:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
   214ed:	00 
   *y = s->img_y;
   214ee:	48 8b 9c 24 88 00 00 	mov    0x88(%rsp),%rbx
   214f5:	00 
   *x = s->img_x;
   214f6:	89 08                	mov    %ecx,(%rax)
   *y = s->img_y;
   214f8:	41 8b 45 04          	mov    0x4(%r13),%eax
   214fc:	89 03                	mov    %eax,(%rbx)
   if (comp) *comp = s->img_n;
   214fe:	48 8b 9c 24 90 00 00 	mov    0x90(%rsp),%rbx
   21505:	00 
   21506:	48 85 db             	test   %rbx,%rbx
   21509:	0f 84 54 f7 ff ff    	je     20c63 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1a3>
   2150f:	41 8b 45 08          	mov    0x8(%r13),%eax
   21513:	89 03                	mov    %eax,(%rbx)
   21515:	e9 49 f7 ff ff       	jmp    20c63 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1a3>
   2151a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (b == 0) return 1; // mul-by-0 is always safe
   21520:	85 ff                	test   %edi,%edi
   21522:	0f 84 ad f7 ff ff    	je     20cd5 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x215>
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   21528:	41 0f af f9          	imul   %r9d,%edi
   if (b == 0) return 1; // mul-by-0 is always safe
   2152c:	45 85 d2             	test   %r10d,%r10d
   2152f:	0f 84 a2 f7 ff ff    	je     20cd7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x217>
   return a <= INT_MAX/b;
   21535:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2153a:	31 d2                	xor    %edx,%edx
   2153c:	f7 f9                	idiv   %ecx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2153e:	39 f8                	cmp    %edi,%eax
   21540:	0f 8c 0a f7 ff ff    	jl     20c50 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x190>
   21546:	e9 8c f7 ff ff       	jmp    20cd7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x217>
      target = req_comp;
   2154b:	44 8b 4c 24 7c       	mov    0x7c(%rsp),%r9d
   21550:	eb d6                	jmp    21528 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xa68>
      if (info.bpp == 1) width = (s->img_x + 7) >> 3;
   21552:	41 8b 45 00          	mov    0x0(%r13),%eax
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   21556:	49 8d 75 38          	lea    0x38(%r13),%rsi
         for (j=0; j < (int) s->img_y; ++j) {
   2155a:	45 8b 45 04          	mov    0x4(%r13),%r8d
      int z=0;
   2155e:	31 db                	xor    %ebx,%ebx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   21560:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
      s->img_buffer_end = s->buffer_start+1;
   21565:	49 8d 75 39          	lea    0x39(%r13),%rsi
         for (j=0; j < (int) s->img_y; ++j) {
   21569:	31 ed                	xor    %ebp,%ebp
      if (info.bpp == 1) width = (s->img_x + 7) >> 3;
   2156b:	8d 50 07             	lea    0x7(%rax),%edx
      s->img_buffer_end = s->buffer_start+1;
   2156e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
      if (info.bpp == 1) width = (s->img_x + 7) >> 3;
   21573:	89 c1                	mov    %eax,%ecx
   21575:	c1 ea 03             	shr    $0x3,%edx
      pad = (-width)&3;
   21578:	f7 da                	neg    %edx
   2157a:	83 e2 03             	and    $0x3,%edx
   2157d:	89 54 24 10          	mov    %edx,0x10(%rsp)
         for (j=0; j < (int) s->img_y; ++j) {
   21581:	45 85 c0             	test   %r8d,%r8d
   21584:	0f 8e 97 fe ff ff    	jle    21421 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x961>
   2158a:	44 89 54 24 30       	mov    %r10d,0x30(%rsp)
   2158f:	45 89 cf             	mov    %r9d,%r15d
   21592:	4d 89 eb             	mov    %r13,%r11
   21595:	0f 1f 00             	nopl   (%rax)
   if (s->img_buffer < s->img_buffer_end)
   21598:	49 8b 83 c0 00 00 00 	mov    0xc0(%r11),%rax
   2159f:	49 3b 83 c8 00 00 00 	cmp    0xc8(%r11),%rax
   215a6:	0f 83 54 09 00 00    	jae    21f00 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1440>
      return *s->img_buffer++;
   215ac:	48 8d 50 01          	lea    0x1(%rax),%rdx
   215b0:	49 89 93 c0 00 00 00 	mov    %rdx,0xc0(%r11)
            int bit_offset = 7, v = stbi__get8(s);
   215b7:	0f b6 30             	movzbl (%rax),%esi
            for (i=0; i < (int) s->img_x; ++i) {
   215ba:	41 8b 03             	mov    (%r11),%eax
   215bd:	85 c0                	test   %eax,%eax
   215bf:	0f 8e b3 07 00 00    	jle    21d78 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x12b8>
   215c5:	45 31 e4             	xor    %r12d,%r12d
            int bit_offset = 7, v = stbi__get8(s);
   215c8:	b9 07 00 00 00       	mov    $0x7,%ecx
   215cd:	4c 8d ac 24 f0 00 00 	lea    0xf0(%rsp),%r13
   215d4:	00 
   215d5:	eb 2d                	jmp    21604 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xb44>
   215d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   215de:	00 00 
               out[z++] = pal[color][2];
   215e0:	89 fb                	mov    %edi,%ebx
               if (i+1 == (int) s->img_x) break;
   215e2:	41 8b 03             	mov    (%r11),%eax
   215e5:	41 83 c4 01          	add    $0x1,%r12d
   215e9:	41 39 c4             	cmp    %eax,%r12d
   215ec:	0f 84 86 07 00 00    	je     21d78 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x12b8>
               if((--bit_offset) < 0) {
   215f2:	83 e9 01             	sub    $0x1,%ecx
   215f5:	0f 82 cd 04 00 00    	jb     21ac8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1008>
            for (i=0; i < (int) s->img_x; ++i) {
   215fb:	41 39 c4             	cmp    %eax,%r12d
   215fe:	0f 8d 74 07 00 00    	jge    21d78 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x12b8>
               int color = (v>>bit_offset)&0x1;
   21604:	89 f0                	mov    %esi,%eax
               out[z++] = pal[color][0];
   21606:	48 63 d3             	movslq %ebx,%rdx
               int color = (v>>bit_offset)&0x1;
   21609:	d3 f8                	sar    %cl,%eax
               out[z++] = pal[color][0];
   2160b:	83 e0 01             	and    $0x1,%eax
   2160e:	41 0f b7 7c 85 00    	movzwl 0x0(%r13,%rax,4),%edi
               out[z++] = pal[color][2];
   21614:	0f b6 84 84 f2 00 00 	movzbl 0xf2(%rsp,%rax,4),%eax
   2161b:	00 
               out[z++] = pal[color][0];
   2161c:	66 41 89 3c 16       	mov    %di,(%r14,%rdx,1)
               out[z++] = pal[color][1];
   21621:	8d 53 02             	lea    0x2(%rbx),%edx
               out[z++] = pal[color][2];
   21624:	8d 7b 03             	lea    0x3(%rbx),%edi
   21627:	48 63 d2             	movslq %edx,%rdx
   2162a:	41 88 04 16          	mov    %al,(%r14,%rdx,1)
               if (target == 4) out[z++] = 255;
   2162e:	41 83 ff 04          	cmp    $0x4,%r15d
   21632:	75 ac                	jne    215e0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xb20>
   21634:	48 63 ff             	movslq %edi,%rdi
   21637:	83 c3 04             	add    $0x4,%ebx
   2163a:	41 c6 04 3e ff       	movb   $0xff,(%r14,%rdi,1)
   2163f:	eb a1                	jmp    215e2 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xb22>
      else if (info.bpp == 16) width = 2*s->img_x;
   21641:	41 8b 45 00          	mov    0x0(%r13),%eax
   21645:	01 c0                	add    %eax,%eax
      pad = (-width) & 3;
   21647:	f7 d8                	neg    %eax
   21649:	83 e0 03             	and    $0x3,%eax
   2164c:	89 84 24 a8 00 00 00 	mov    %eax,0xa8(%rsp)
         if (!mr || !mg || !mb) { STBI_FREE(out); return stbi__errpuc("bad masks", "Corrupt BMP"); }
   21653:	8b 6c 24 30          	mov    0x30(%rsp),%ebp
   21657:	44 8b 64 24 38       	mov    0x38(%rsp),%r12d
   2165c:	85 ed                	test   %ebp,%ebp
   2165e:	0f 94 c0             	sete   %al
   21661:	45 85 e4             	test   %r12d,%r12d
   21664:	0f 94 c2             	sete   %dl
   21667:	08 d0                	or     %dl,%al
   21669:	0f 85 48 09 00 00    	jne    21fb7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14f7>
   2166f:	8b 5c 24 3c          	mov    0x3c(%rsp),%ebx
   21673:	85 db                	test   %ebx,%ebx
   21675:	0f 84 3c 09 00 00    	je     21fb7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14f7>
   if (z >= 0x10000) { n += 16; z >>= 16; }
   2167b:	8b 44 24 30          	mov    0x30(%rsp),%eax
   2167f:	3d ff ff 00 00       	cmp    $0xffff,%eax
   21684:	0f 86 b6 09 00 00    	jbe    22040 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1580>
   2168a:	c1 e8 10             	shr    $0x10,%eax
   2168d:	ba 18 00 00 00       	mov    $0x18,%edx
   21692:	bf 10 00 00 00       	mov    $0x10,%edi
   if (z >= 0x00100) { n +=  8; z >>=  8; }
   21697:	3d ff 00 00 00       	cmp    $0xff,%eax
   2169c:	76 05                	jbe    216a3 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xbe3>
   2169e:	c1 e8 08             	shr    $0x8,%eax
   216a1:	89 d7                	mov    %edx,%edi
   if (z >= 0x00010) { n +=  4; z >>=  4; }
   216a3:	83 f8 0f             	cmp    $0xf,%eax
   216a6:	76 06                	jbe    216ae <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xbee>
   216a8:	83 c7 04             	add    $0x4,%edi
   216ab:	c1 e8 04             	shr    $0x4,%eax
   if (z >= 0x00004) { n +=  2; z >>=  2; }
   216ae:	83 f8 03             	cmp    $0x3,%eax
   216b1:	76 06                	jbe    216b9 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xbf9>
   216b3:	83 c7 02             	add    $0x2,%edi
   216b6:	c1 e8 02             	shr    $0x2,%eax
   if (z >= 0x00002) { n +=  1;/* >>=  1;*/ }
   216b9:	83 f8 01             	cmp    $0x1,%eax
   a = (a & 0x55555555) + ((a >>  1) & 0x55555555); // max 2
   216bc:	8b 5c 24 30          	mov    0x30(%rsp),%ebx
   if (z >= 0x00002) { n +=  1;/* >>=  1;*/ }
   216c0:	0f 95 c0             	setne  %al
   216c3:	0f b6 c0             	movzbl %al,%eax
   216c6:	01 c7                	add    %eax,%edi
   a = (a & 0x55555555) + ((a >>  1) & 0x55555555); // max 2
   216c8:	89 d8                	mov    %ebx,%eax
   216ca:	81 e3 55 55 55 55    	and    $0x55555555,%ebx
   216d0:	d1 e8                	shr    %eax
   216d2:	25 55 55 55 55       	and    $0x55555555,%eax
   216d7:	01 d8                	add    %ebx,%eax
   a = (a & 0x33333333) + ((a >>  2) & 0x33333333); // max 4
   216d9:	89 c2                	mov    %eax,%edx
   216db:	c1 e8 02             	shr    $0x2,%eax
   216de:	25 33 33 33 33       	and    $0x33333333,%eax
   216e3:	81 e2 33 33 33 33    	and    $0x33333333,%edx
   216e9:	01 c2                	add    %eax,%edx
   a = (a + (a >> 4)) & 0x0f0f0f0f; // max 8 per 4, now 8 bits
   216eb:	89 d0                	mov    %edx,%eax
   216ed:	c1 e8 04             	shr    $0x4,%eax
   216f0:	01 d0                	add    %edx,%eax
   216f2:	25 0f 0f 0f 0f       	and    $0xf0f0f0f,%eax
   a = (a + (a >> 8)); // max 16 per 8 bits
   216f7:	89 c2                	mov    %eax,%edx
   216f9:	c1 ea 08             	shr    $0x8,%edx
   216fc:	01 d0                	add    %edx,%eax
   a = (a + (a >> 16)); // max 32 per 8 bits
   216fe:	89 c2                	mov    %eax,%edx
   21700:	c1 ea 10             	shr    $0x10,%edx
   21703:	01 d0                	add    %edx,%eax
   return a & 0xff;
   21705:	0f b6 c0             	movzbl %al,%eax
   21708:	89 84 24 ac 00 00 00 	mov    %eax,0xac(%rsp)
   if (z == 0) return -1;
   2170f:	8b 44 24 38          	mov    0x38(%rsp),%eax
   21713:	85 c0                	test   %eax,%eax
   21715:	0f 84 ee 09 00 00    	je     22109 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1649>
   if (z >= 0x10000) { n += 16; z >>= 16; }
   2171b:	3d ff ff 00 00       	cmp    $0xffff,%eax
   21720:	0f 86 33 09 00 00    	jbe    22059 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1599>
   21726:	c1 e8 10             	shr    $0x10,%eax
   21729:	ba 18 00 00 00       	mov    $0x18,%edx
   2172e:	b9 10 00 00 00       	mov    $0x10,%ecx
   if (z >= 0x00100) { n +=  8; z >>=  8; }
   21733:	3d ff 00 00 00       	cmp    $0xff,%eax
   21738:	76 05                	jbe    2173f <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xc7f>
   2173a:	c1 e8 08             	shr    $0x8,%eax
   2173d:	89 d1                	mov    %edx,%ecx
   if (z >= 0x00010) { n +=  4; z >>=  4; }
   2173f:	83 f8 0f             	cmp    $0xf,%eax
   21742:	76 06                	jbe    2174a <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xc8a>
   21744:	83 c1 04             	add    $0x4,%ecx
   21747:	c1 e8 04             	shr    $0x4,%eax
   if (z >= 0x00004) { n +=  2; z >>=  2; }
   2174a:	83 f8 03             	cmp    $0x3,%eax
   2174d:	76 06                	jbe    21755 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xc95>
   2174f:	83 c1 02             	add    $0x2,%ecx
   21752:	c1 e8 02             	shr    $0x2,%eax
   if (z >= 0x00002) { n +=  1;/* >>=  1;*/ }
   21755:	83 f8 01             	cmp    $0x1,%eax
   21758:	0f 95 c0             	setne  %al
   2175b:	0f b6 c0             	movzbl %al,%eax
   2175e:	01 c1                	add    %eax,%ecx
   a = (a & 0x55555555) + ((a >>  1) & 0x55555555); // max 2
   21760:	8b 5c 24 38          	mov    0x38(%rsp),%ebx
   21764:	89 d8                	mov    %ebx,%eax
   21766:	81 e3 55 55 55 55    	and    $0x55555555,%ebx
   2176c:	d1 e8                	shr    %eax
   2176e:	25 55 55 55 55       	and    $0x55555555,%eax
   21773:	01 d8                	add    %ebx,%eax
   a = (a & 0x33333333) + ((a >>  2) & 0x33333333); // max 4
   21775:	89 c2                	mov    %eax,%edx
   21777:	c1 e8 02             	shr    $0x2,%eax
   2177a:	25 33 33 33 33       	and    $0x33333333,%eax
   2177f:	81 e2 33 33 33 33    	and    $0x33333333,%edx
   21785:	01 c2                	add    %eax,%edx
   a = (a + (a >> 4)) & 0x0f0f0f0f; // max 8 per 4, now 8 bits
   21787:	89 d0                	mov    %edx,%eax
   21789:	c1 e8 04             	shr    $0x4,%eax
   2178c:	01 d0                	add    %edx,%eax
   2178e:	25 0f 0f 0f 0f       	and    $0xf0f0f0f,%eax
   a = (a + (a >> 8)); // max 16 per 8 bits
   21793:	89 c2                	mov    %eax,%edx
   21795:	c1 ea 08             	shr    $0x8,%edx
   21798:	01 d0                	add    %edx,%eax
   a = (a + (a >> 16)); // max 32 per 8 bits
   2179a:	89 c2                	mov    %eax,%edx
   2179c:	c1 ea 10             	shr    $0x10,%edx
   2179f:	01 d0                	add    %edx,%eax
   return a & 0xff;
   217a1:	0f b6 c0             	movzbl %al,%eax
   217a4:	89 84 24 b0 00 00 00 	mov    %eax,0xb0(%rsp)
   if (z >= 0x10000) { n += 16; z >>= 16; }
   217ab:	8b 44 24 3c          	mov    0x3c(%rsp),%eax
   217af:	3d ff ff 00 00       	cmp    $0xffff,%eax
   217b4:	0f 86 92 08 00 00    	jbe    2204c <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x158c>
   217ba:	c1 e8 10             	shr    $0x10,%eax
   217bd:	ba 18 00 00 00       	mov    $0x18,%edx
   217c2:	41 b8 10 00 00 00    	mov    $0x10,%r8d
   if (z >= 0x00100) { n +=  8; z >>=  8; }
   217c8:	3d ff 00 00 00       	cmp    $0xff,%eax
   217cd:	76 06                	jbe    217d5 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xd15>
   217cf:	c1 e8 08             	shr    $0x8,%eax
   217d2:	41 89 d0             	mov    %edx,%r8d
   if (z >= 0x00010) { n +=  4; z >>=  4; }
   217d5:	83 f8 0f             	cmp    $0xf,%eax
   217d8:	76 07                	jbe    217e1 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xd21>
   217da:	41 83 c0 04          	add    $0x4,%r8d
   217de:	c1 e8 04             	shr    $0x4,%eax
   if (z >= 0x00004) { n +=  2; z >>=  2; }
   217e1:	83 f8 03             	cmp    $0x3,%eax
   217e4:	76 07                	jbe    217ed <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xd2d>
   217e6:	41 83 c0 02          	add    $0x2,%r8d
   217ea:	c1 e8 02             	shr    $0x2,%eax
   if (z >= 0x00002) { n +=  1;/* >>=  1;*/ }
   217ed:	83 f8 01             	cmp    $0x1,%eax
   217f0:	0f 95 c0             	setne  %al
   217f3:	0f b6 c0             	movzbl %al,%eax
   217f6:	41 01 c0             	add    %eax,%r8d
   a = (a & 0x55555555) + ((a >>  1) & 0x55555555); // max 2
   217f9:	8b 44 24 3c          	mov    0x3c(%rsp),%eax
   217fd:	89 c2                	mov    %eax,%edx
   217ff:	25 55 55 55 55       	and    $0x55555555,%eax
   21804:	d1 ea                	shr    %edx
   21806:	81 e2 55 55 55 55    	and    $0x55555555,%edx
   2180c:	01 d0                	add    %edx,%eax
   a = (a & 0x33333333) + ((a >>  2) & 0x33333333); // max 4
   2180e:	89 c2                	mov    %eax,%edx
   21810:	c1 e8 02             	shr    $0x2,%eax
   21813:	81 e2 33 33 33 33    	and    $0x33333333,%edx
   21819:	25 33 33 33 33       	and    $0x33333333,%eax
   2181e:	01 d0                	add    %edx,%eax
   a = (a + (a >> 4)) & 0x0f0f0f0f; // max 8 per 4, now 8 bits
   21820:	89 c2                	mov    %eax,%edx
   21822:	c1 ea 04             	shr    $0x4,%edx
   21825:	01 c2                	add    %eax,%edx
   21827:	81 e2 0f 0f 0f 0f    	and    $0xf0f0f0f,%edx
   a = (a + (a >> 8)); // max 16 per 8 bits
   2182d:	89 d0                	mov    %edx,%eax
   2182f:	c1 e8 08             	shr    $0x8,%eax
   21832:	01 d0                	add    %edx,%eax
   a = (a + (a >> 16)); // max 32 per 8 bits
   21834:	89 c2                	mov    %eax,%edx
   21836:	c1 ea 10             	shr    $0x10,%edx
   21839:	01 d0                	add    %edx,%eax
   return a & 0xff;
   2183b:	0f b6 c0             	movzbl %al,%eax
   2183e:	89 84 24 b4 00 00 00 	mov    %eax,0xb4(%rsp)
   if (z == 0) return -1;
   21845:	8b 44 24 20          	mov    0x20(%rsp),%eax
   21849:	85 c0                	test   %eax,%eax
   2184b:	0f 84 b0 08 00 00    	je     22101 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1641>
   if (z >= 0x10000) { n += 16; z >>= 16; }
   21851:	3d ff ff 00 00       	cmp    $0xffff,%eax
   21856:	0f 86 09 08 00 00    	jbe    22065 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x15a5>
   2185c:	c1 e8 10             	shr    $0x10,%eax
   2185f:	be 18 00 00 00       	mov    $0x18,%esi
   21864:	ba 10 00 00 00       	mov    $0x10,%edx
   if (z >= 0x00100) { n +=  8; z >>=  8; }
   21869:	3d ff 00 00 00       	cmp    $0xff,%eax
   2186e:	76 05                	jbe    21875 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xdb5>
   21870:	c1 e8 08             	shr    $0x8,%eax
   21873:	89 f2                	mov    %esi,%edx
   if (z >= 0x00010) { n +=  4; z >>=  4; }
   21875:	83 f8 0f             	cmp    $0xf,%eax
   21878:	76 06                	jbe    21880 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xdc0>
   2187a:	83 c2 04             	add    $0x4,%edx
   2187d:	c1 e8 04             	shr    $0x4,%eax
   if (z >= 0x00004) { n +=  2; z >>=  2; }
   21880:	83 f8 03             	cmp    $0x3,%eax
   21883:	76 06                	jbe    2188b <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xdcb>
   21885:	83 c2 02             	add    $0x2,%edx
   21888:	c1 e8 02             	shr    $0x2,%eax
   if (z >= 0x00002) { n +=  1;/* >>=  1;*/ }
   2188b:	83 f8 01             	cmp    $0x1,%eax
   2188e:	0f 95 c0             	setne  %al
   21891:	0f b6 c0             	movzbl %al,%eax
   21894:	01 c2                	add    %eax,%edx
   a = (a & 0x55555555) + ((a >>  1) & 0x55555555); // max 2
   21896:	8b 44 24 20          	mov    0x20(%rsp),%eax
   2189a:	89 c6                	mov    %eax,%esi
   2189c:	25 55 55 55 55       	and    $0x55555555,%eax
   218a1:	d1 ee                	shr    %esi
   218a3:	81 e6 55 55 55 55    	and    $0x55555555,%esi
   218a9:	01 f0                	add    %esi,%eax
   a = (a & 0x33333333) + ((a >>  2) & 0x33333333); // max 4
   218ab:	89 c6                	mov    %eax,%esi
   218ad:	c1 e8 02             	shr    $0x2,%eax
   218b0:	81 e6 33 33 33 33    	and    $0x33333333,%esi
   218b6:	25 33 33 33 33       	and    $0x33333333,%eax
   218bb:	01 f0                	add    %esi,%eax
   a = (a + (a >> 4)) & 0x0f0f0f0f; // max 8 per 4, now 8 bits
   218bd:	89 c6                	mov    %eax,%esi
   218bf:	c1 ee 04             	shr    $0x4,%esi
   218c2:	01 c6                	add    %eax,%esi
   218c4:	81 e6 0f 0f 0f 0f    	and    $0xf0f0f0f,%esi
   a = (a + (a >> 8)); // max 16 per 8 bits
   218ca:	89 f0                	mov    %esi,%eax
   218cc:	c1 e8 08             	shr    $0x8,%eax
   218cf:	01 f0                	add    %esi,%eax
   a = (a + (a >> 16)); // max 32 per 8 bits
   218d1:	89 c6                	mov    %eax,%esi
   218d3:	c1 ee 10             	shr    $0x10,%esi
   218d6:	01 f0                	add    %esi,%eax
         if (rcount > 8 || gcount > 8 || bcount > 8 || acount > 8) { STBI_FREE(out); return stbi__errpuc("bad masks", "Corrupt BMP"); }
   218d8:	83 bc 24 ac 00 00 00 	cmpl   $0x8,0xac(%rsp)
   218df:	08 
   return a & 0xff;
   218e0:	0f b6 c0             	movzbl %al,%eax
   218e3:	89 84 24 9c 00 00 00 	mov    %eax,0x9c(%rsp)
         if (rcount > 8 || gcount > 8 || bcount > 8 || acount > 8) { STBI_FREE(out); return stbi__errpuc("bad masks", "Corrupt BMP"); }
   218ea:	0f 8f c7 06 00 00    	jg     21fb7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14f7>
   218f0:	83 bc 24 b0 00 00 00 	cmpl   $0x8,0xb0(%rsp)
   218f7:	08 
   218f8:	0f 8f b9 06 00 00    	jg     21fb7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14f7>
   218fe:	83 bc 24 b4 00 00 00 	cmpl   $0x8,0xb4(%rsp)
   21905:	08 
   21906:	0f 8f ab 06 00 00    	jg     21fb7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14f7>
   2190c:	83 f8 08             	cmp    $0x8,%eax
   2190f:	0f 8f a2 06 00 00    	jg     21fb7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14f7>
         rshift = stbi__high_bit(mr)-7; rcount = stbi__bitcount(mr);
   21915:	8d 47 f9             	lea    -0x7(%rdi),%eax
      if (info.bpp == 24) width = 3 * s->img_x;
   21918:	c7 44 24 5c 00 00 00 	movl   $0x0,0x5c(%rsp)
   2191f:	00 
         rshift = stbi__high_bit(mr)-7; rcount = stbi__bitcount(mr);
   21920:	89 44 24 60          	mov    %eax,0x60(%rsp)
         gshift = stbi__high_bit(mg)-7; gcount = stbi__bitcount(mg);
   21924:	8d 41 f9             	lea    -0x7(%rcx),%eax
   21927:	89 44 24 64          	mov    %eax,0x64(%rsp)
         bshift = stbi__high_bit(mb)-7; bcount = stbi__bitcount(mb);
   2192b:	41 8d 40 f9          	lea    -0x7(%r8),%eax
   2192f:	89 84 24 b8 00 00 00 	mov    %eax,0xb8(%rsp)
         ashift = stbi__high_bit(ma)-7; acount = stbi__bitcount(ma);
   21936:	8d 42 f9             	lea    -0x7(%rdx),%eax
   21939:	89 84 24 a0 00 00 00 	mov    %eax,0xa0(%rsp)
      if (info.bpp == 24) width = 3 * s->img_x;
   21940:	41 8b 45 00          	mov    0x0(%r13),%eax
   21944:	89 c1                	mov    %eax,%ecx
   21946:	e9 c4 f6 ff ff       	jmp    2100f <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x54f>
      s->img_buffer = s->img_buffer_end;
   2194b:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   21952:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
      return;
   21959:	e9 f5 f5 ff ff       	jmp    20f53 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x493>
   2195e:	66 90                	xchg   %ax,%ax
   if (s->read_from_callbacks) {
   21960:	41 8b 45 30          	mov    0x30(%r13),%eax
   return 0;
   21964:	31 c9                	xor    %ecx,%ecx
   if (s->read_from_callbacks) {
   21966:	85 c0                	test   %eax,%eax
   21968:	0f 84 de f9 ff ff    	je     2134c <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x88c>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2196e:	49 8d 75 38          	lea    0x38(%r13),%rsi
   21972:	41 8b 55 34          	mov    0x34(%r13),%edx
   21976:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2197a:	88 4c 24 30          	mov    %cl,0x30(%rsp)
   2197e:	44 89 44 24 18       	mov    %r8d,0x18(%rsp)
   21983:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
   21988:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2198c:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   21993:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2199a:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   219a1:	85 c0                	test   %eax,%eax
   219a3:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
   219a8:	44 8b 44 24 18       	mov    0x18(%rsp),%r8d
   219ad:	0f 85 8d 01 00 00    	jne    21b40 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1080>
      s->img_buffer_end = s->buffer_start+1;
   219b3:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   219b8:	0f b6 4c 24 30       	movzbl 0x30(%rsp),%ecx
      *s->img_buffer = 0;
   219bd:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
      s->read_from_callbacks = 0;
   219c2:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   219c9:	00 
      *s->img_buffer = 0;
   219ca:	49 89 b5 c8 00 00 00 	mov    %rsi,0xc8(%r13)
      return *s->img_buffer++;
   219d1:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   219d6:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
   219dd:	e9 6a f9 ff ff       	jmp    2134c <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x88c>
   219e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
               if (target == 4) out[z++] = 255;
   219e8:	48 63 ed             	movslq %ebp,%rbp
   219eb:	83 c2 04             	add    $0x4,%edx
            for (i=0; i < (int) s->img_x; i += 2) {
   219ee:	41 83 c0 02          	add    $0x2,%r8d
               if (target == 4) out[z++] = 255;
   219f2:	41 c6 04 2e ff       	movb   $0xff,(%r14,%rbp,1)
            for (i=0; i < (int) s->img_x; i += 2) {
   219f7:	41 8b 45 00          	mov    0x0(%r13),%eax
               if (target == 4) out[z++] = 255;
   219fb:	89 d5                	mov    %edx,%ebp
            for (i=0; i < (int) s->img_x; i += 2) {
   219fd:	89 c1                	mov    %eax,%ecx
   219ff:	44 39 c0             	cmp    %r8d,%eax
   21a02:	0f 8f 20 f9 ff ff    	jg     21328 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x868>
   21a08:	e9 e0 f9 ff ff       	jmp    213ed <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x92d>
   21a0d:	0f 1f 00             	nopl   (%rax)
               if (target == 4) out[z++] = STBI__BYTECAST(a);
   21a10:	48 63 ed             	movslq %ebp,%rbp
   21a13:	8b 74 24 58          	mov    0x58(%rsp),%esi
            for (i=0; i < (int) s->img_x; ++i) {
   21a17:	41 83 c5 01          	add    $0x1,%r13d
               if (target == 4) out[z++] = STBI__BYTECAST(a);
   21a1b:	41 88 04 2e          	mov    %al,(%r14,%rbp,1)
            for (i=0; i < (int) s->img_x; ++i) {
   21a1f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
               if (target == 4) out[z++] = STBI__BYTECAST(a);
   21a24:	83 c6 04             	add    $0x4,%esi
            for (i=0; i < (int) s->img_x; ++i) {
   21a27:	8b 00                	mov    (%rax),%eax
   21a29:	89 c1                	mov    %eax,%ecx
   21a2b:	44 39 e8             	cmp    %r13d,%eax
   21a2e:	0f 8e 4c 05 00 00    	jle    21f80 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14c0>
               if (target == 4) out[z++] = STBI__BYTECAST(a);
   21a34:	89 f5                	mov    %esi,%ebp
   21a36:	e9 d5 f7 ff ff       	jmp    21210 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x750>
   21a3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (s->img_buffer < s->img_buffer_end)
   21a40:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   21a47:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   21a4e:	0f 83 a4 00 00 00    	jae    21af8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1038>
      return *s->img_buffer++;
   21a54:	48 8d 48 01          	lea    0x1(%rax),%rcx
   21a58:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
               v = (info.bpp == 8) ? stbi__get8(s) : v2;
   21a5f:	0f b6 30             	movzbl (%rax),%esi
      return *s->img_buffer++;
   21a62:	e9 45 f9 ff ff       	jmp    213ac <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x8ec>
   21a67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   21a6e:	00 00 
   21a70:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
   if (n == 0) return;  // already there!
   21a75:	8b 9c 24 a8 00 00 00 	mov    0xa8(%rsp),%ebx
   21a7c:	85 db                	test   %ebx,%ebx
   21a7e:	0f 84 44 04 00 00    	je     21ec8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1408>
   if (n < 0) {
   21a84:	89 de                	mov    %ebx,%esi
   21a86:	4c 89 ef             	mov    %r13,%rdi
   21a89:	e8 82 10 ff ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
      for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)
   21a8e:	41 8b 45 00          	mov    0x0(%r13),%eax
      for (j=0; j < (int) s->img_y; ++j) {
   21a92:	45 8b 45 04          	mov    0x4(%r13),%r8d
   21a96:	83 84 24 98 00 00 00 	addl   $0x1,0x98(%rsp)
   21a9d:	01 
   21a9e:	8b 9c 24 98 00 00 00 	mov    0x98(%rsp),%ebx
      for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)
   21aa5:	89 c1                	mov    %eax,%ecx
      for (j=0; j < (int) s->img_y; ++j) {
   21aa7:	41 39 d8             	cmp    %ebx,%r8d
   21aaa:	0f 8f a8 f5 ff ff    	jg     21058 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x598>
   21ab0:	44 8b 94 24 bc 00 00 	mov    0xbc(%rsp),%r10d
   21ab7:	00 
   21ab8:	44 8b 4c 24 10       	mov    0x10(%rsp),%r9d
   21abd:	e9 5f f9 ff ff       	jmp    21421 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x961>
   21ac2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (s->img_buffer < s->img_buffer_end)
   21ac8:	49 8b 93 c0 00 00 00 	mov    0xc0(%r11),%rdx
   21acf:	49 3b 93 c8 00 00 00 	cmp    0xc8(%r11),%rdx
   21ad6:	0f 83 74 03 00 00    	jae    21e50 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1390>
      return *s->img_buffer++;
   21adc:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   21ae0:	49 89 8b c0 00 00 00 	mov    %rcx,0xc0(%r11)
                  v = stbi__get8(s);
   21ae7:	0f b6 32             	movzbl (%rdx),%esi
                  bit_offset = 7;
   21aea:	b9 07 00 00 00       	mov    $0x7,%ecx
   21aef:	e9 07 fb ff ff       	jmp    215fb <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xb3b>
   21af4:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   21af8:	41 8b 75 30          	mov    0x30(%r13),%esi
   21afc:	85 f6                	test   %esi,%esi
   21afe:	0f 84 a8 f8 ff ff    	je     213ac <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x8ec>
      stbi__refill_buffer(s);
   21b04:	4c 89 ef             	mov    %r13,%rdi
   21b07:	89 54 24 18          	mov    %edx,0x18(%rsp)
   21b0b:	44 89 44 24 10       	mov    %r8d,0x10(%rsp)
   21b10:	e8 6b f7 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   21b15:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
               v = (info.bpp == 8) ? stbi__get8(s) : v2;
   21b1c:	8b 54 24 18          	mov    0x18(%rsp),%edx
   21b20:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
      return *s->img_buffer++;
   21b25:	48 8d 48 01          	lea    0x1(%rax),%rcx
   21b29:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
               v = (info.bpp == 8) ? stbi__get8(s) : v2;
   21b30:	0f b6 30             	movzbl (%rax),%esi
   21b33:	e9 74 f8 ff ff       	jmp    213ac <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x8ec>
   21b38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   21b3f:	00 
      s->img_buffer_end = s->buffer_start + n;
   21b40:	48 98                	cltq
   21b42:	48 01 c6             	add    %rax,%rsi
      return *s->img_buffer++;
   21b45:	41 0f b6 45 38       	movzbl 0x38(%r13),%eax
   21b4a:	89 c1                	mov    %eax,%ecx
   21b4c:	e9 79 fe ff ff       	jmp    219ca <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xf0a>
   21b51:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            for (i=0; i < (int) s->img_x; ++i) {
   21b58:	85 c0                	test   %eax,%eax
   21b5a:	0f 8e 15 ff ff ff    	jle    21a75 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xfb5>
   21b60:	45 31 ff             	xor    %r15d,%r15d
   21b63:	4d 89 f0             	mov    %r14,%r8
   21b66:	41 89 ee             	mov    %ebp,%r14d
   21b69:	44 89 fd             	mov    %r15d,%ebp
   21b6c:	44 8b 7c 24 28       	mov    0x28(%rsp),%r15d
   21b71:	e9 a1 00 00 00       	jmp    21c17 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1157>
   21b76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21b7d:	00 00 00 
      return *s->img_buffer++;
   21b80:	48 8d 48 01          	lea    0x1(%rax),%rcx
   21b84:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   21b8b:	0f b6 00             	movzbl (%rax),%eax
               out[z+2] = stbi__get8(s);
   21b8e:	88 02                	mov    %al,(%rdx)
               out[z+1] = stbi__get8(s);
   21b90:	49 8d 54 18 01       	lea    0x1(%r8,%rbx,1),%rdx
   if (s->img_buffer < s->img_buffer_end)
   21b95:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   21b9c:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   21ba3:	0f 83 87 01 00 00    	jae    21d30 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1270>
      return *s->img_buffer++;
   21ba9:	48 8d 48 01          	lea    0x1(%rax),%rcx
   21bad:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   21bb4:	0f b6 00             	movzbl (%rax),%eax
               out[z+1] = stbi__get8(s);
   21bb7:	88 02                	mov    %al,(%rdx)
               out[z+0] = stbi__get8(s);
   21bb9:	4c 01 c3             	add    %r8,%rbx
   if (s->img_buffer < s->img_buffer_end)
   21bbc:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   21bc3:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   21bca:	0f 83 b0 00 00 00    	jae    21c80 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x11c0>
      return *s->img_buffer++;
   21bd0:	48 8d 50 01          	lea    0x1(%rax),%rdx
   21bd4:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   21bdb:	0f b6 00             	movzbl (%rax),%eax
               a = (easy == 2 ? stbi__get8(s) : 255);
   21bde:	83 7c 24 5c 02       	cmpl   $0x2,0x5c(%rsp)
               out[z+0] = stbi__get8(s);
   21be3:	88 03                	mov    %al,(%rbx)
               z += 3;
   21be5:	41 8d 5e 03          	lea    0x3(%r14),%ebx
               a = (easy == 2 ? stbi__get8(s) : 255);
   21be9:	0f 84 e1 00 00 00    	je     21cd0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1210>
               all_a |= a;
   21bef:	41 80 cf ff          	or     $0xff,%r15b
               a = (easy == 2 ? stbi__get8(s) : 255);
   21bf3:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
               if (target == 4) out[z++] = a;
   21bf8:	83 7c 24 10 04       	cmpl   $0x4,0x10(%rsp)
   21bfd:	0f 84 05 01 00 00    	je     21d08 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1248>
            for (i=0; i < (int) s->img_x; ++i) {
   21c03:	41 8b 45 00          	mov    0x0(%r13),%eax
   21c07:	83 c5 01             	add    $0x1,%ebp
   21c0a:	89 c1                	mov    %eax,%ecx
   21c0c:	39 c5                	cmp    %eax,%ebp
   21c0e:	0f 8d dc 02 00 00    	jge    21ef0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1430>
      for (j=0; j < (int) s->img_y; ++j) {
   21c14:	41 89 de             	mov    %ebx,%r14d
               out[z+2] = stbi__get8(s);
   21c17:	49 63 de             	movslq %r14d,%rbx
   if (s->img_buffer < s->img_buffer_end)
   21c1a:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
               out[z+2] = stbi__get8(s);
   21c21:	49 8d 54 18 02       	lea    0x2(%r8,%rbx,1),%rdx
   if (s->img_buffer < s->img_buffer_end)
   21c26:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   21c2d:	0f 82 4d ff ff ff    	jb     21b80 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x10c0>
   if (s->read_from_callbacks) {
   21c33:	45 8b 55 30          	mov    0x30(%r13),%r10d
   return 0;
   21c37:	31 c0                	xor    %eax,%eax
   if (s->read_from_callbacks) {
   21c39:	45 85 d2             	test   %r10d,%r10d
   21c3c:	0f 84 4c ff ff ff    	je     21b8e <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x10ce>
      stbi__refill_buffer(s);
   21c42:	4c 89 ef             	mov    %r13,%rdi
   21c45:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
   21c4a:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   21c4f:	e8 2c f6 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   21c54:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
   21c59:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   21c5e:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   21c65:	48 8d 48 01          	lea    0x1(%rax),%rcx
   21c69:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   21c70:	0f b6 00             	movzbl (%rax),%eax
   21c73:	e9 16 ff ff ff       	jmp    21b8e <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x10ce>
   21c78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   21c7f:	00 
   if (s->read_from_callbacks) {
   21c80:	41 8b 7d 30          	mov    0x30(%r13),%edi
   return 0;
   21c84:	31 c0                	xor    %eax,%eax
   if (s->read_from_callbacks) {
   21c86:	85 ff                	test   %edi,%edi
   21c88:	0f 84 50 ff ff ff    	je     21bde <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x111e>
      stbi__refill_buffer(s);
   21c8e:	4c 89 ef             	mov    %r13,%rdi
   21c91:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
   21c96:	e8 e5 f5 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
               a = (easy == 2 ? stbi__get8(s) : 255);
   21c9b:	83 7c 24 5c 02       	cmpl   $0x2,0x5c(%rsp)
      return *s->img_buffer++;
   21ca0:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
   21ca5:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   21cac:	48 8d 50 01          	lea    0x1(%rax),%rdx
   21cb0:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   21cb7:	0f b6 00             	movzbl (%rax),%eax
               out[z+0] = stbi__get8(s);
   21cba:	88 03                	mov    %al,(%rbx)
               z += 3;
   21cbc:	41 8d 5e 03          	lea    0x3(%r14),%ebx
               a = (easy == 2 ? stbi__get8(s) : 255);
   21cc0:	0f 85 29 ff ff ff    	jne    21bef <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x112f>
   21cc6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21ccd:	00 00 00 
   if (s->img_buffer < s->img_buffer_end)
   21cd0:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   21cd7:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   21cde:	0f 83 dc 00 00 00    	jae    21dc0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1300>
      return *s->img_buffer++;
   21ce4:	48 8d 50 01          	lea    0x1(%rax),%rdx
   21ce8:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   21cef:	0f b6 00             	movzbl (%rax),%eax
               all_a |= a;
   21cf2:	41 09 c7             	or     %eax,%r15d
               if (target == 4) out[z++] = a;
   21cf5:	83 7c 24 10 04       	cmpl   $0x4,0x10(%rsp)
      return *s->img_buffer++;
   21cfa:	89 c1                	mov    %eax,%ecx
               if (target == 4) out[z++] = a;
   21cfc:	0f 85 01 ff ff ff    	jne    21c03 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1143>
   21d02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   21d08:	48 63 db             	movslq %ebx,%rbx
            for (i=0; i < (int) s->img_x; ++i) {
   21d0b:	83 c5 01             	add    $0x1,%ebp
               if (target == 4) out[z++] = a;
   21d0e:	41 83 c6 04          	add    $0x4,%r14d
   21d12:	41 88 0c 18          	mov    %cl,(%r8,%rbx,1)
            for (i=0; i < (int) s->img_x; ++i) {
   21d16:	41 8b 45 00          	mov    0x0(%r13),%eax
   21d1a:	89 c1                	mov    %eax,%ecx
   21d1c:	39 c5                	cmp    %eax,%ebp
   21d1e:	0f 8d 4c 02 00 00    	jge    21f70 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14b0>
               if (target == 4) out[z++] = a;
   21d24:	44 89 f3             	mov    %r14d,%ebx
   21d27:	e9 e8 fe ff ff       	jmp    21c14 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1154>
   21d2c:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   21d30:	45 8b 4d 30          	mov    0x30(%r13),%r9d
   return 0;
   21d34:	31 c0                	xor    %eax,%eax
   if (s->read_from_callbacks) {
   21d36:	45 85 c9             	test   %r9d,%r9d
   21d39:	0f 84 78 fe ff ff    	je     21bb7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x10f7>
      stbi__refill_buffer(s);
   21d3f:	4c 89 ef             	mov    %r13,%rdi
   21d42:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
   21d47:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   21d4c:	e8 2f f5 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   21d51:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
   21d56:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   21d5b:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   21d62:	48 8d 48 01          	lea    0x1(%rax),%rcx
   21d66:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   21d6d:	0f b6 00             	movzbl (%rax),%eax
   21d70:	e9 42 fe ff ff       	jmp    21bb7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x10f7>
   21d75:	0f 1f 00             	nopl   (%rax)
   if (n == 0) return;  // already there!
   21d78:	8b 74 24 10          	mov    0x10(%rsp),%esi
   21d7c:	85 f6                	test   %esi,%esi
   21d7e:	0f 84 0c 02 00 00    	je     21f90 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14d0>
   if (n < 0) {
   21d84:	4c 89 df             	mov    %r11,%rdi
   21d87:	4c 89 5c 24 08       	mov    %r11,0x8(%rsp)
         for (j=0; j < (int) s->img_y; ++j) {
   21d8c:	83 c5 01             	add    $0x1,%ebp
   21d8f:	e8 7c 0d ff ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   21d94:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
   21d99:	45 8b 43 04          	mov    0x4(%r11),%r8d
   21d9d:	44 39 c5             	cmp    %r8d,%ebp
   21da0:	0f 8c f2 f7 ff ff    	jl     21598 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xad8>
      for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)
   21da6:	41 8b 03             	mov    (%r11),%eax
   21da9:	44 8b 54 24 30       	mov    0x30(%rsp),%r10d
   21dae:	45 89 f9             	mov    %r15d,%r9d
   21db1:	4d 89 dd             	mov    %r11,%r13
   21db4:	89 c1                	mov    %eax,%ecx
   21db6:	e9 66 f6 ff ff       	jmp    21421 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x961>
   21dbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   21dc0:	41 8b 75 30          	mov    0x30(%r13),%esi
   return 0;
   21dc4:	31 c9                	xor    %ecx,%ecx
   if (s->read_from_callbacks) {
   21dc6:	85 f6                	test   %esi,%esi
   21dc8:	0f 84 2a fe ff ff    	je     21bf8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1138>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   21dce:	49 8d 75 38          	lea    0x38(%r13),%rsi
   21dd2:	41 8b 55 34          	mov    0x34(%r13),%edx
   21dd6:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   21dda:	88 4c 24 58          	mov    %cl,0x58(%rsp)
   21dde:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
   21de3:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
   21de8:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   21dec:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   21df3:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   21dfa:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   21e01:	85 c0                	test   %eax,%eax
   21e03:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
      s->img_buffer_end = s->buffer_start+1;
   21e08:	49 8d 55 39          	lea    0x39(%r13),%rdx
   if (n == 0) {
   21e0c:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
   21e11:	0f 85 df 01 00 00    	jne    21ff6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1536>
      s->read_from_callbacks = 0;
   21e17:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   21e1e:	00 
      *s->img_buffer = 0;
   21e1f:	0f b6 4c 24 58       	movzbl 0x58(%rsp),%ecx
      s->img_buffer_end = s->buffer_start+1;
   21e24:	48 89 d6             	mov    %rdx,%rsi
      *s->img_buffer = 0;
   21e27:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   21e2c:	49 89 b5 c8 00 00 00 	mov    %rsi,0xc8(%r13)
      return *s->img_buffer++;
   21e33:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   21e3a:	e9 b9 fd ff ff       	jmp    21bf8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1138>
   21e3f:	90                   	nop
   21e40:	89 d5                	mov    %edx,%ebp
   21e42:	e9 a6 f5 ff ff       	jmp    213ed <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x92d>
   21e47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   21e4e:	00 00 
   if (s->read_from_callbacks) {
   21e50:	41 8b 73 30          	mov    0x30(%r11),%esi
   21e54:	85 f6                	test   %esi,%esi
   21e56:	0f 84 8e fc ff ff    	je     21aea <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x102a>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   21e5c:	41 8b 53 34          	mov    0x34(%r11),%edx
   21e60:	49 8b 7b 28          	mov    0x28(%r11),%rdi
   21e64:	4c 89 5c 24 08       	mov    %r11,0x8(%rsp)
   21e69:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
   21e6e:	41 ff 53 10          	call   *0x10(%r11)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   21e72:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   21e77:	89 c6                	mov    %eax,%esi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   21e79:	49 8b 83 c0 00 00 00 	mov    0xc0(%r11),%rax
   21e80:	49 2b 83 d0 00 00 00 	sub    0xd0(%r11),%rax
   21e87:	41 01 83 b8 00 00 00 	add    %eax,0xb8(%r11)
   if (n == 0) {
   21e8e:	85 f6                	test   %esi,%esi
   21e90:	0f 85 74 01 00 00    	jne    2200a <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x154a>
      s->read_from_callbacks = 0;
   21e96:	41 c7 43 30 00 00 00 	movl   $0x0,0x30(%r11)
   21e9d:	00 
      s->img_buffer_end = s->buffer_start+1;
   21e9e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
      *s->img_buffer = 0;
   21ea3:	41 c6 43 38 00       	movb   $0x0,0x38(%r11)
   21ea8:	49 89 83 c8 00 00 00 	mov    %rax,0xc8(%r11)
      return *s->img_buffer++;
   21eaf:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   21eb4:	49 89 83 c0 00 00 00 	mov    %rax,0xc0(%r11)
            for (i=0; i < (int) s->img_x; ++i) {
   21ebb:	41 8b 03             	mov    (%r11),%eax
   21ebe:	e9 27 fc ff ff       	jmp    21aea <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x102a>
   21ec3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      for (j=0; j < (int) s->img_y; ++j) {
   21ec8:	83 84 24 98 00 00 00 	addl   $0x1,0x98(%rsp)
   21ecf:	01 
   21ed0:	45 8b 45 04          	mov    0x4(%r13),%r8d
   21ed4:	8b 9c 24 98 00 00 00 	mov    0x98(%rsp),%ebx
   21edb:	44 39 c3             	cmp    %r8d,%ebx
   21ede:	0f 8c 74 f1 ff ff    	jl     21058 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x598>
   21ee4:	e9 c7 fb ff ff       	jmp    21ab0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xff0>
   21ee9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   21ef0:	44 89 7c 24 28       	mov    %r15d,0x28(%rsp)
   21ef5:	4d 89 c6             	mov    %r8,%r14
               z += 3;
   21ef8:	89 dd                	mov    %ebx,%ebp
   21efa:	e9 76 fb ff ff       	jmp    21a75 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xfb5>
   21eff:	90                   	nop
   if (s->read_from_callbacks) {
   21f00:	41 8b 73 30          	mov    0x30(%r11),%esi
   21f04:	85 f6                	test   %esi,%esi
   21f06:	0f 84 ae f6 ff ff    	je     215ba <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xafa>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   21f0c:	41 8b 53 34          	mov    0x34(%r11),%edx
   21f10:	49 8b 7b 28          	mov    0x28(%r11),%rdi
   21f14:	4c 89 5c 24 08       	mov    %r11,0x8(%rsp)
   21f19:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
   21f1e:	41 ff 53 10          	call   *0x10(%r11)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   21f22:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   21f27:	89 c6                	mov    %eax,%esi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   21f29:	49 8b 83 c0 00 00 00 	mov    0xc0(%r11),%rax
   21f30:	49 2b 83 d0 00 00 00 	sub    0xd0(%r11),%rax
   21f37:	41 01 83 b8 00 00 00 	add    %eax,0xb8(%r11)
   if (n == 0) {
   21f3e:	85 f6                	test   %esi,%esi
   21f40:	0f 85 48 01 00 00    	jne    2208e <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x15ce>
      s->read_from_callbacks = 0;
   21f46:	41 c7 43 30 00 00 00 	movl   $0x0,0x30(%r11)
   21f4d:	00 
      s->img_buffer_end = s->buffer_start+1;
   21f4e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
      *s->img_buffer = 0;
   21f53:	41 c6 43 38 00       	movb   $0x0,0x38(%r11)
   21f58:	49 89 83 c8 00 00 00 	mov    %rax,0xc8(%r11)
      return *s->img_buffer++;
   21f5f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   21f64:	49 89 83 c0 00 00 00 	mov    %rax,0xc0(%r11)
   21f6b:	e9 4a f6 ff ff       	jmp    215ba <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xafa>
   21f70:	44 89 f5             	mov    %r14d,%ebp
   21f73:	44 89 7c 24 28       	mov    %r15d,0x28(%rsp)
   21f78:	4d 89 c6             	mov    %r8,%r14
   21f7b:	e9 f5 fa ff ff       	jmp    21a75 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xfb5>
               if (target == 4) out[z++] = STBI__BYTECAST(a);
   21f80:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
   21f85:	89 f5                	mov    %esi,%ebp
   21f87:	e9 e9 fa ff ff       	jmp    21a75 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xfb5>
   21f8c:	0f 1f 40 00          	nopl   0x0(%rax)
         for (j=0; j < (int) s->img_y; ++j) {
   21f90:	45 8b 43 04          	mov    0x4(%r11),%r8d
   21f94:	83 c5 01             	add    $0x1,%ebp
   21f97:	44 39 c5             	cmp    %r8d,%ebp
   21f9a:	0f 8c f8 f5 ff ff    	jl     21598 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xad8>
   21fa0:	e9 01 fe ff ff       	jmp    21da6 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x12e6>
   if (info.bpp == 24 && ma == 0xff000000)
   21fa5:	89 c3                	mov    %eax,%ebx
   21fa7:	41 89 c4             	mov    %eax,%r12d
   21faa:	41 b9 03 00 00 00    	mov    $0x3,%r9d
   21fb0:	31 ed                	xor    %ebp,%ebp
   21fb2:	e9 6e ec ff ff       	jmp    20c25 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x165>
         if (rcount > 8 || gcount > 8 || bcount > 8 || acount > 8) { STBI_FREE(out); return stbi__errpuc("bad masks", "Corrupt BMP"); }
   21fb7:	4c 89 f7             	mov    %r14,%rdi
   21fba:	e8 e1 46 fe ff       	call   66a0 <free@plt>
   stbi__g_failure_reason = str;
   21fbf:	48 8d 05 29 5c 01 00 	lea    0x15c29(%rip),%rax        # 37bef <_ZSt19piecewise_construct+0x2a8>
   21fc6:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   21fcd:	ff ff 
         if (rcount > 8 || gcount > 8 || bcount > 8 || acount > 8) { STBI_FREE(out); return stbi__errpuc("bad masks", "Corrupt BMP"); }
   21fcf:	e9 8c ec ff ff       	jmp    20c60 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1a0>
      if (info.bpp == 24) width = 3 * s->img_x;
   21fd4:	41 8b 45 00          	mov    0x0(%r13),%eax
         easy = 1;
   21fd8:	c7 44 24 5c 01 00 00 	movl   $0x1,0x5c(%rsp)
   21fdf:	00 
      if (info.bpp == 24) width = 3 * s->img_x;
   21fe0:	8d 14 40             	lea    (%rax,%rax,2),%edx
   21fe3:	89 c1                	mov    %eax,%ecx
      pad = (-width) & 3;
   21fe5:	f7 da                	neg    %edx
   21fe7:	83 e2 03             	and    $0x3,%edx
   21fea:	89 94 24 a8 00 00 00 	mov    %edx,0xa8(%rsp)
      if (info.bpp == 24) {
   21ff1:	e9 c7 ef ff ff       	jmp    20fbd <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x4fd>
      s->img_buffer_end = s->buffer_start + n;
   21ff6:	48 98                	cltq
   21ff8:	48 01 c6             	add    %rax,%rsi
      return *s->img_buffer++;
   21ffb:	41 0f b6 45 38       	movzbl 0x38(%r13),%eax
   22000:	89 c1                	mov    %eax,%ecx
               all_a |= a;
   22002:	41 09 c7             	or     %eax,%r15d
   22005:	e9 22 fe ff ff       	jmp    21e2c <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x136c>
      s->img_buffer_end = s->buffer_start + n;
   2200a:	48 63 c6             	movslq %esi,%rax
   2200d:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
   22012:	48 01 f0             	add    %rsi,%rax
                  v = stbi__get8(s);
   22015:	41 0f b6 73 38       	movzbl 0x38(%r11),%esi
   2201a:	e9 89 fe ff ff       	jmp    21ea8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x13e8>
      s->img_buffer_end = s->buffer_start + n;
   2201f:	48 01 d6             	add    %rdx,%rsi
   22022:	e9 5f ee ff ff       	jmp    20e86 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x3c6>
      else if (info.bpp == 4) width = (s->img_x + 1) >> 1;
   22027:	41 8b 45 00          	mov    0x0(%r13),%eax
   2202b:	8d 50 01             	lea    0x1(%rax),%edx
   2202e:	89 c1                	mov    %eax,%ecx
   22030:	d1 ea                	shr    %edx
      pad = (-width)&3;
   22032:	f7 da                	neg    %edx
   22034:	83 e2 03             	and    $0x3,%edx
   22037:	89 54 24 38          	mov    %edx,0x38(%rsp)
      if (info.bpp == 1) {
   2203b:	e9 9a f2 ff ff       	jmp    212da <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x81a>
   22040:	ba 08 00 00 00       	mov    $0x8,%edx
   int n=0;
   22045:	31 ff                	xor    %edi,%edi
   22047:	e9 4b f6 ff ff       	jmp    21697 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xbd7>
   2204c:	ba 08 00 00 00       	mov    $0x8,%edx
   22051:	45 31 c0             	xor    %r8d,%r8d
   22054:	e9 6f f7 ff ff       	jmp    217c8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xd08>
   22059:	ba 08 00 00 00       	mov    $0x8,%edx
   2205e:	31 c9                	xor    %ecx,%ecx
   22060:	e9 ce f6 ff ff       	jmp    21733 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xc73>
   22065:	be 08 00 00 00       	mov    $0x8,%esi
   2206a:	31 d2                	xor    %edx,%edx
   2206c:	e9 f8 f7 ff ff       	jmp    21869 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xda9>
      if (psize == 0 || psize > 256) { STBI_FREE(out); return stbi__errpuc("invalid", "Corrupt BMP"); }
   22071:	4c 89 f7             	mov    %r14,%rdi
   22074:	e8 27 46 fe ff       	call   66a0 <free@plt>
   stbi__g_failure_reason = str;
   22079:	48 8d 05 5f 5b 01 00 	lea    0x15b5f(%rip),%rax        # 37bdf <_ZSt19piecewise_construct+0x298>
   22080:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   22087:	ff ff 
      if (psize == 0 || psize > 256) { STBI_FREE(out); return stbi__errpuc("invalid", "Corrupt BMP"); }
   22089:	e9 d2 eb ff ff       	jmp    20c60 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1a0>
      s->img_buffer_end = s->buffer_start + n;
   2208e:	48 63 c6             	movslq %esi,%rax
   22091:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
   22096:	48 01 f0             	add    %rsi,%rax
            int bit_offset = 7, v = stbi__get8(s);
   22099:	41 0f b6 73 38       	movzbl 0x38(%r11),%esi
   2209e:	e9 b5 fe ff ff       	jmp    21f58 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1498>
      s->img_buffer = s->img_buffer_end;
   220a3:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   220aa:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
      return;
   220b1:	e9 f2 f1 ff ff       	jmp    212a8 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x7e8>
      pad = (-width) & 3;
   220b6:	c7 84 24 a8 00 00 00 	movl   $0x0,0xa8(%rsp)
   220bd:	00 00 00 00 
   220c1:	e9 8d f5 ff ff       	jmp    21653 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xb93>
      else { STBI_FREE(out); return stbi__errpuc("bad bpp", "Corrupt BMP"); }
   220c6:	4c 89 f7             	mov    %r14,%rdi
   220c9:	e8 d2 45 fe ff       	call   66a0 <free@plt>
   stbi__g_failure_reason = str;
   220ce:	48 8d 05 12 5b 01 00 	lea    0x15b12(%rip),%rax        # 37be7 <_ZSt19piecewise_construct+0x2a0>
   220d5:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   220dc:	ff ff 
      else { STBI_FREE(out); return stbi__errpuc("bad bpp", "Corrupt BMP"); }
   220de:	e9 7d eb ff ff       	jmp    20c60 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1a0>
         if (!mr || !mg || !mb) { STBI_FREE(out); return stbi__errpuc("bad masks", "Corrupt BMP"); }
   220e3:	44 8b 7c 24 30       	mov    0x30(%rsp),%r15d
   220e8:	45 85 ff             	test   %r15d,%r15d
   220eb:	0f 84 c6 fe ff ff    	je     21fb7 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x14f7>
      pad = (-width) & 3;
   220f1:	c7 84 24 a8 00 00 00 	movl   $0x0,0xa8(%rsp)
   220f8:	00 00 00 00 
   220fc:	e9 7a f5 ff ff       	jmp    2167b <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xbbb>
   if (z == 0) return -1;
   22101:	83 ca ff             	or     $0xffffffff,%edx
   22104:	e9 8d f7 ff ff       	jmp    21896 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xdd6>
   22109:	83 c9 ff             	or     $0xffffffff,%ecx
   2210c:	e9 4f f6 ff ff       	jmp    21760 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xca0>
   stbi__g_failure_reason = str;
   22111:	48 8d 05 1d 59 01 00 	lea    0x1591d(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   22118:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2211f:	ff ff 
   if (!out) return stbi__errpuc("outofmem", "Out of memory");
   22121:	e9 3a eb ff ff       	jmp    20c60 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x1a0>
   22126:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2212d:	00 00 00 

0000000000022130 <_ZL18stbi__gif_test_rawP13stbi__context>:
{
   22130:	55                   	push   %rbp
   22131:	53                   	push   %rbx
   22132:	48 89 fb             	mov    %rdi,%rbx
   22135:	48 83 ec 08          	sub    $0x8,%rsp
   if (s->img_buffer < s->img_buffer_end)
   22139:	48 8b 97 c0 00 00 00 	mov    0xc0(%rdi),%rdx
   22140:	48 8b 87 c8 00 00 00 	mov    0xc8(%rdi),%rax
   22147:	48 39 c2             	cmp    %rax,%rdx
   2214a:	73 54                	jae    221a0 <_ZL18stbi__gif_test_rawP13stbi__context+0x70>
      return *s->img_buffer++;
   2214c:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   22150:	48 89 8f c0 00 00 00 	mov    %rcx,0xc0(%rdi)
   22157:	0f b6 12             	movzbl (%rdx),%edx
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8') return 0;
   2215a:	80 fa 47             	cmp    $0x47,%dl
   2215d:	75 31                	jne    22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   if (s->img_buffer < s->img_buffer_end)
   2215f:	48 39 c1             	cmp    %rax,%rcx
   22162:	0f 83 88 00 00 00    	jae    221f0 <_ZL18stbi__gif_test_rawP13stbi__context+0xc0>
      return *s->img_buffer++;
   22168:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   2216c:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   22173:	0f b6 09             	movzbl (%rcx),%ecx
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8') return 0;
   22176:	80 f9 49             	cmp    $0x49,%cl
   22179:	75 15                	jne    22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   if (s->img_buffer < s->img_buffer_end)
   2217b:	48 39 c2             	cmp    %rax,%rdx
   2217e:	0f 82 fb 00 00 00    	jb     2227f <_ZL18stbi__gif_test_rawP13stbi__context+0x14f>
   if (s->read_from_callbacks) {
   22184:	8b 53 30             	mov    0x30(%rbx),%edx
   22187:	85 d2                	test   %edx,%edx
   22189:	0f 85 e1 00 00 00    	jne    22270 <_ZL18stbi__gif_test_rawP13stbi__context+0x140>
   2218f:	90                   	nop
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8') return 0;
   22190:	31 c0                	xor    %eax,%eax
}
   22192:	48 83 c4 08          	add    $0x8,%rsp
   22196:	5b                   	pop    %rbx
   22197:	5d                   	pop    %rbp
   22198:	c3                   	ret
   22199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   221a0:	8b 77 30             	mov    0x30(%rdi),%esi
   221a3:	85 f6                	test   %esi,%esi
   221a5:	74 e9                	je     22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   221a7:	48 8d 6f 38          	lea    0x38(%rdi),%rbp
   221ab:	8b 57 34             	mov    0x34(%rdi),%edx
   221ae:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   221b2:	48 89 ee             	mov    %rbp,%rsi
   221b5:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   221b8:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   221bf:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   221c3:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   221ca:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   221d0:	85 c0                	test   %eax,%eax
   221d2:	74 7c                	je     22250 <_ZL18stbi__gif_test_rawP13stbi__context+0x120>
      s->img_buffer_end = s->buffer_start + n;
   221d4:	48 98                	cltq
      return *s->img_buffer++;
   221d6:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   221dd:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   221e1:	48 01 e8             	add    %rbp,%rax
   221e4:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   221eb:	e9 6a ff ff ff       	jmp    2215a <_ZL18stbi__gif_test_rawP13stbi__context+0x2a>
   if (s->read_from_callbacks) {
   221f0:	8b 4b 30             	mov    0x30(%rbx),%ecx
   221f3:	85 c9                	test   %ecx,%ecx
   221f5:	74 99                	je     22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   221f7:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   221fb:	8b 53 34             	mov    0x34(%rbx),%edx
   221fe:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   22202:	48 89 ee             	mov    %rbp,%rsi
   22205:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22208:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   2220f:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   22216:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   2221c:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   22220:	85 c0                	test   %eax,%eax
   22222:	0f 85 b8 00 00 00    	jne    222e0 <_ZL18stbi__gif_test_rawP13stbi__context+0x1b0>
      s->read_from_callbacks = 0;
   22228:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   2222f:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   22233:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   2223a:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   22241:	e9 4a ff ff ff       	jmp    22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   22246:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2224d:	00 00 00 
      s->read_from_callbacks = 0;
   22250:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   22257:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   2225b:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   22262:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   22269:	e9 22 ff ff ff       	jmp    22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   2226e:	66 90                	xchg   %ax,%ax
      stbi__refill_buffer(s);
   22270:	48 89 df             	mov    %rbx,%rdi
   22273:	e8 08 f0 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   22278:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   2227f:	48 8d 42 01          	lea    0x1(%rdx),%rax
   22283:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   2228a:	0f b6 12             	movzbl (%rdx),%edx
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8') return 0;
   2228d:	80 fa 46             	cmp    $0x46,%dl
   22290:	0f 85 fa fe ff ff    	jne    22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   if (s->img_buffer < s->img_buffer_end)
   22296:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   2229d:	73 61                	jae    22300 <_ZL18stbi__gif_test_rawP13stbi__context+0x1d0>
      return *s->img_buffer++;
   2229f:	48 8d 50 01          	lea    0x1(%rax),%rdx
   222a3:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   222aa:	0f b6 10             	movzbl (%rax),%edx
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8') return 0;
   222ad:	80 fa 38             	cmp    $0x38,%dl
   222b0:	0f 85 da fe ff ff    	jne    22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   sz = stbi__get8(s);
   222b6:	48 89 df             	mov    %rbx,%rdi
   222b9:	e8 e2 97 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   if (sz != '9' && sz != '7') return 0;
   222be:	83 e8 37             	sub    $0x37,%eax
   222c1:	a8 fd                	test   $0xfd,%al
   222c3:	0f 85 c7 fe ff ff    	jne    22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   if (stbi__get8(s) != 'a') return 0;
   222c9:	48 89 df             	mov    %rbx,%rdi
   222cc:	e8 cf 97 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   222d1:	3c 61                	cmp    $0x61,%al
   222d3:	0f 94 c0             	sete   %al
   222d6:	0f b6 c0             	movzbl %al,%eax
   222d9:	e9 b4 fe ff ff       	jmp    22192 <_ZL18stbi__gif_test_rawP13stbi__context+0x62>
   222de:	66 90                	xchg   %ax,%ax
      s->img_buffer_end = s->buffer_start + n;
   222e0:	48 98                	cltq
      return *s->img_buffer++;
   222e2:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   222e9:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   222ed:	48 01 e8             	add    %rbp,%rax
   222f0:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   222f7:	e9 7a fe ff ff       	jmp    22176 <_ZL18stbi__gif_test_rawP13stbi__context+0x46>
   222fc:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   22300:	8b 43 30             	mov    0x30(%rbx),%eax
   22303:	85 c0                	test   %eax,%eax
   22305:	0f 84 85 fe ff ff    	je     22190 <_ZL18stbi__gif_test_rawP13stbi__context+0x60>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2230b:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   2230f:	8b 53 34             	mov    0x34(%rbx),%edx
   22312:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   22316:	48 89 ee             	mov    %rbp,%rsi
   22319:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2231c:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   22323:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22327:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   2232e:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   22334:	85 c0                	test   %eax,%eax
   22336:	0f 84 14 ff ff ff    	je     22250 <_ZL18stbi__gif_test_rawP13stbi__context+0x120>
      s->img_buffer_end = s->buffer_start + n;
   2233c:	48 98                	cltq
      return *s->img_buffer++;
   2233e:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   22345:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   22349:	48 01 c5             	add    %rax,%rbp
   2234c:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
      return *s->img_buffer++;
   22353:	e9 55 ff ff ff       	jmp    222ad <_ZL18stbi__gif_test_rawP13stbi__context+0x17d>
   22358:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2235f:	00 

0000000000022360 <_ZL20stbi__process_markerP10stbi__jpegi>:
{
   22360:	41 57                	push   %r15
   22362:	41 56                	push   %r14
   22364:	41 55                	push   %r13
   22366:	49 89 fd             	mov    %rdi,%r13
   22369:	41 54                	push   %r12
   2236b:	55                   	push   %rbp
   2236c:	53                   	push   %rbx
   2236d:	48 83 ec 78          	sub    $0x78,%rsp
   switch (m) {
   22371:	81 fe dd 00 00 00    	cmp    $0xdd,%esi
   22377:	0f 84 66 01 00 00    	je     224e3 <_ZL20stbi__process_markerP10stbi__jpegi+0x183>
   2237d:	89 f3                	mov    %esi,%ebx
   2237f:	0f 8f 35 01 00 00    	jg     224ba <_ZL20stbi__process_markerP10stbi__jpegi+0x15a>
   22385:	81 fe c4 00 00 00    	cmp    $0xc4,%esi
   2238b:	0f 84 a2 01 00 00    	je     22533 <_ZL20stbi__process_markerP10stbi__jpegi+0x1d3>
   22391:	81 fe db 00 00 00    	cmp    $0xdb,%esi
   22397:	0f 85 84 01 00 00    	jne    22521 <_ZL20stbi__process_markerP10stbi__jpegi+0x1c1>
         L = stbi__get16be(z->s)-2;
   2239d:	48 8b 3f             	mov    (%rdi),%rdi
   223a0:	e8 0b bf ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   223a5:	83 e8 02             	sub    $0x2,%eax
   223a8:	89 44 24 08          	mov    %eax,0x8(%rsp)
         while (L > 0) {
   223ac:	85 c0                	test   %eax,%eax
   223ae:	0f 8e de 04 00 00    	jle    22892 <_ZL20stbi__process_markerP10stbi__jpegi+0x532>
   223b4:	4c 8d 15 65 63 01 00 	lea    0x16365(%rip),%r10        # 38720 <_ZL19stbi__jpeg_dezigzag+0x40>
   223bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            int q = stbi__get8(z->s);
   223c0:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   if (s->img_buffer < s->img_buffer_end)
   223c4:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   223cb:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
   223d2:	48 39 ca             	cmp    %rcx,%rdx
   223d5:	0f 83 ed 07 00 00    	jae    22bc8 <_ZL20stbi__process_markerP10stbi__jpegi+0x868>
      return *s->img_buffer++;
   223db:	48 8d 42 01          	lea    0x1(%rdx),%rax
   223df:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   223e6:	44 0f b6 0a          	movzbl (%rdx),%r9d
   223ea:	44 89 c8             	mov    %r9d,%eax
            int p = q >> 4, sixteen = (p != 0);
   223ed:	41 c1 f9 04          	sar    $0x4,%r9d
            int t = q & 15,i;
   223f1:	41 89 c7             	mov    %eax,%r15d
   223f4:	41 83 e7 0f          	and    $0xf,%r15d
            if (p != 0 && p != 1) return stbi__err("bad DQT type","Corrupt JPEG");
   223f8:	41 83 f9 01          	cmp    $0x1,%r9d
   223fc:	0f 8f 9f 08 00 00    	jg     22ca1 <_ZL20stbi__process_markerP10stbi__jpegi+0x941>
            if (t > 3) return stbi__err("bad DQT table","Corrupt JPEG");
   22402:	a8 0c                	test   $0xc,%al
   22404:	0f 85 82 08 00 00    	jne    22c8c <_ZL20stbi__process_markerP10stbi__jpegi+0x92c>
               z->dequant[t][stbi__jpeg_dezigzag[i]] = (stbi__uint16)(sixteen ? stbi__get16be(z->s) : stbi__get8(z->s));
   2240a:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   if (s->img_buffer < s->img_buffer_end)
   2240e:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   22415:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
            for (i=0; i < 64; ++i)
   2241c:	4c 8d 25 bd 62 01 00 	lea    0x162bd(%rip),%r12        # 386e0 <_ZL19stbi__jpeg_dezigzag>
   22423:	4d 63 ff             	movslq %r15d,%r15
   22426:	eb 74                	jmp    2249c <_ZL20stbi__process_markerP10stbi__jpegi+0x13c>
   22428:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2242f:	00 
   if (s->img_buffer < s->img_buffer_end)
   22430:	48 39 ca             	cmp    %rcx,%rdx
   22433:	0f 83 67 06 00 00    	jae    22aa0 <_ZL20stbi__process_markerP10stbi__jpegi+0x740>
      return *s->img_buffer++;
   22439:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2243d:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   int z = stbi__get8(s);
   22444:	0f b6 2a             	movzbl (%rdx),%ebp
   return (z << 8) + stbi__get8(s);
   22447:	c1 e5 08             	shl    $0x8,%ebp
   if (s->img_buffer < s->img_buffer_end)
   2244a:	48 39 c8             	cmp    %rcx,%rax
   2244d:	0f 83 b6 06 00 00    	jae    22b09 <_ZL20stbi__process_markerP10stbi__jpegi+0x7a9>
      return *s->img_buffer++;
   22453:	48 8d 50 01          	lea    0x1(%rax),%rdx
   22457:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   return (z << 8) + stbi__get8(s);
   2245e:	0f b6 00             	movzbl (%rax),%eax
   22461:	01 c5                	add    %eax,%ebp
               z->dequant[t][stbi__jpeg_dezigzag[i]] = (stbi__uint16)(sixteen ? stbi__get16be(z->s) : stbi__get8(z->s));
   22463:	41 0f b6 14 24       	movzbl (%r12),%edx
   22468:	4c 89 f8             	mov    %r15,%rax
            for (i=0; i < 64; ++i)
   2246b:	49 83 c4 01          	add    $0x1,%r12
               z->dequant[t][stbi__jpeg_dezigzag[i]] = (stbi__uint16)(sixteen ? stbi__get16be(z->s) : stbi__get8(z->s));
   2246f:	48 c1 e0 06          	shl    $0x6,%rax
   22473:	48 8d 84 02 40 1a 00 	lea    0x1a40(%rdx,%rax,1),%rax
   2247a:	00 
   2247b:	66 41 89 6c 45 08    	mov    %bp,0x8(%r13,%rax,2)
            for (i=0; i < 64; ++i)
   22481:	4d 39 e2             	cmp    %r12,%r10
   22484:	0f 84 16 07 00 00    	je     22ba0 <_ZL20stbi__process_markerP10stbi__jpegi+0x840>
            int q = stbi__get8(z->s);
   2248a:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   if (s->img_buffer < s->img_buffer_end)
   2248e:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   22495:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
               z->dequant[t][stbi__jpeg_dezigzag[i]] = (stbi__uint16)(sixteen ? stbi__get16be(z->s) : stbi__get8(z->s));
   2249c:	45 85 c9             	test   %r9d,%r9d
   2249f:	75 8f                	jne    22430 <_ZL20stbi__process_markerP10stbi__jpegi+0xd0>
   if (s->img_buffer < s->img_buffer_end)
   224a1:	48 39 ca             	cmp    %rcx,%rdx
   224a4:	0f 83 86 05 00 00    	jae    22a30 <_ZL20stbi__process_markerP10stbi__jpegi+0x6d0>
      return *s->img_buffer++;
   224aa:	48 8d 42 01          	lea    0x1(%rdx),%rax
   224ae:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
               z->dequant[t][stbi__jpeg_dezigzag[i]] = (stbi__uint16)(sixteen ? stbi__get16be(z->s) : stbi__get8(z->s));
   224b5:	0f b6 2a             	movzbl (%rdx),%ebp
      return *s->img_buffer++;
   224b8:	eb a9                	jmp    22463 <_ZL20stbi__process_markerP10stbi__jpegi+0x103>
   switch (m) {
   224ba:	81 fe ff 00 00 00    	cmp    $0xff,%esi
   224c0:	75 44                	jne    22506 <_ZL20stbi__process_markerP10stbi__jpegi+0x1a6>
   stbi__g_failure_reason = str;
   224c2:	48 8d 05 30 57 01 00 	lea    0x15730(%rip),%rax        # 37bf9 <_ZSt19piecewise_construct+0x2b2>
   224c9:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   224d0:	ff ff 
         return stbi__err("expected marker","Corrupt JPEG");
   224d2:	31 c0                	xor    %eax,%eax
}
   224d4:	48 83 c4 78          	add    $0x78,%rsp
   224d8:	5b                   	pop    %rbx
   224d9:	5d                   	pop    %rbp
   224da:	41 5c                	pop    %r12
   224dc:	41 5d                	pop    %r13
   224de:	41 5e                	pop    %r14
   224e0:	41 5f                	pop    %r15
   224e2:	c3                   	ret
         if (stbi__get16be(z->s) != 4) return stbi__err("bad DRI len","Corrupt JPEG");
   224e3:	48 8b 3f             	mov    (%rdi),%rdi
   224e6:	e8 c5 bd ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   224eb:	83 f8 04             	cmp    $0x4,%eax
   224ee:	0f 84 c2 07 00 00    	je     22cb6 <_ZL20stbi__process_markerP10stbi__jpegi+0x956>
   stbi__g_failure_reason = str;
   224f4:	48 8d 05 0e 57 01 00 	lea    0x1570e(%rip),%rax        # 37c09 <_ZSt19piecewise_construct+0x2c2>
   224fb:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   22502:	ff ff 
         if (stbi__get16be(z->s) != 4) return stbi__err("bad DRI len","Corrupt JPEG");
   22504:	eb cc                	jmp    224d2 <_ZL20stbi__process_markerP10stbi__jpegi+0x172>
   if ((m >= 0xE0 && m <= 0xEF) || m == 0xFE) {
   22506:	8d 86 20 ff ff ff    	lea    -0xe0(%rsi),%eax
   2250c:	83 f8 0f             	cmp    $0xf,%eax
   2250f:	0f 86 d7 04 00 00    	jbe    229ec <_ZL20stbi__process_markerP10stbi__jpegi+0x68c>
   22515:	81 fe fe 00 00 00    	cmp    $0xfe,%esi
   2251b:	0f 84 cb 04 00 00    	je     229ec <_ZL20stbi__process_markerP10stbi__jpegi+0x68c>
   stbi__g_failure_reason = str;
   22521:	48 8d 05 2f 57 01 00 	lea    0x1572f(%rip),%rax        # 37c57 <_ZSt19piecewise_construct+0x310>
   22528:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2252f:	ff ff 
   return stbi__err("unknown marker","Corrupt JPEG");
   22531:	eb 9f                	jmp    224d2 <_ZL20stbi__process_markerP10stbi__jpegi+0x172>
         L = stbi__get16be(z->s)-2;
   22533:	48 8b 3f             	mov    (%rdi),%rdi
   22536:	e8 75 bd ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2253b:	83 e8 02             	sub    $0x2,%eax
   2253e:	89 44 24 08          	mov    %eax,0x8(%rsp)
         while (L > 0) {
   22542:	85 c0                	test   %eax,%eax
   22544:	0f 8e 48 03 00 00    	jle    22892 <_ZL20stbi__process_markerP10stbi__jpegi+0x532>
   2254a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            int q = stbi__get8(z->s);
   22550:	4d 8b 7d 00          	mov    0x0(%r13),%r15
   if (s->img_buffer < s->img_buffer_end)
   22554:	49 8b 87 c0 00 00 00 	mov    0xc0(%r15),%rax
   2255b:	49 8b 97 c8 00 00 00 	mov    0xc8(%r15),%rdx
   22562:	48 39 d0             	cmp    %rdx,%rax
   22565:	0f 83 75 03 00 00    	jae    228e0 <_ZL20stbi__process_markerP10stbi__jpegi+0x580>
      return *s->img_buffer++;
   2256b:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2256f:	49 89 97 c0 00 00 00 	mov    %rdx,0xc0(%r15)
   22576:	0f b6 00             	movzbl (%rax),%eax
            int tc = q >> 4;
   22579:	89 c6                	mov    %eax,%esi
   2257b:	41 89 c4             	mov    %eax,%r12d
   2257e:	c1 fe 04             	sar    $0x4,%esi
   22581:	41 83 e4 0f          	and    $0xf,%r12d
   22585:	89 74 24 20          	mov    %esi,0x20(%rsp)
            int th = q & 15;
   22589:	89 c6                	mov    %eax,%esi
   2258b:	83 e6 0f             	and    $0xf,%esi
            if (tc > 1 || th > 3) return stbi__err("bad DHT header","Corrupt JPEG");
   2258e:	83 f8 1f             	cmp    $0x1f,%eax
   22591:	0f 97 c0             	seta   %al
            int th = q & 15;
   22594:	89 74 24 18          	mov    %esi,0x18(%rsp)
            if (tc > 1 || th > 3) return stbi__err("bad DHT header","Corrupt JPEG");
   22598:	83 fe 03             	cmp    $0x3,%esi
   2259b:	0f 9f c2             	setg   %dl
   2259e:	09 d0                	or     %edx,%eax
   225a0:	84 c0                	test   %al,%al
   225a2:	0f 85 cf 06 00 00    	jne    22c77 <_ZL20stbi__process_markerP10stbi__jpegi+0x917>
               if (!stbi__build_huffman(z->huff_dc+th, sizes)) return 0;
   225a8:	45 0f b6 e4          	movzbl %r12b,%r12d
               sizes[i] = stbi__get8(z->s);
   225ac:	4d 8b 7d 00          	mov    0x0(%r13),%r15
               if (!stbi__build_huffman(z->huff_dc+th, sizes)) return 0;
   225b0:	49 69 c4 90 06 00 00 	imul   $0x690,%r12,%rax
   if (s->img_buffer < s->img_buffer_end)
   225b7:	49 8b 97 c8 00 00 00 	mov    0xc8(%r15),%rdx
               if (!stbi__build_huffman(z->huff_dc+th, sizes)) return 0;
   225be:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   225c3:	49 8b 87 c0 00 00 00 	mov    0xc0(%r15),%rax
            for (i=0; i < 16; ++i) {
   225ca:	48 8d 5c 24 30       	lea    0x30(%rsp),%rbx
   225cf:	4c 8d 64 24 70       	lea    0x70(%rsp),%r12
            int sizes[16],i,n=0;
   225d4:	31 ed                	xor    %ebp,%ebp
   225d6:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
   225db:	eb 34                	jmp    22611 <_ZL20stbi__process_markerP10stbi__jpegi+0x2b1>
   225dd:	0f 1f 00             	nopl   (%rax)
      return *s->img_buffer++;
   225e0:	48 8d 50 01          	lea    0x1(%rax),%rdx
   225e4:	49 89 97 c0 00 00 00 	mov    %rdx,0xc0(%r15)
               sizes[i] = stbi__get8(z->s);
   225eb:	0f b6 00             	movzbl (%rax),%eax
               n += sizes[i];
   225ee:	01 c5                	add    %eax,%ebp
               sizes[i] = stbi__get8(z->s);
   225f0:	89 03                	mov    %eax,(%rbx)
            for (i=0; i < 16; ++i) {
   225f2:	48 83 c3 04          	add    $0x4,%rbx
   225f6:	49 39 dc             	cmp    %rbx,%r12
   225f9:	0f 84 81 00 00 00    	je     22680 <_ZL20stbi__process_markerP10stbi__jpegi+0x320>
               sizes[i] = stbi__get8(z->s);
   225ff:	4d 8b 7d 00          	mov    0x0(%r13),%r15
   if (s->img_buffer < s->img_buffer_end)
   22603:	49 8b 87 c0 00 00 00 	mov    0xc0(%r15),%rax
   2260a:	49 8b 97 c8 00 00 00 	mov    0xc8(%r15),%rdx
   22611:	48 39 d0             	cmp    %rdx,%rax
   22614:	72 ca                	jb     225e0 <_ZL20stbi__process_markerP10stbi__jpegi+0x280>
   if (s->read_from_callbacks) {
   22616:	41 8b 47 30          	mov    0x30(%r15),%eax
   2261a:	85 c0                	test   %eax,%eax
   2261c:	74 d2                	je     225f0 <_ZL20stbi__process_markerP10stbi__jpegi+0x290>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2261e:	4d 8d 77 38          	lea    0x38(%r15),%r14
   22622:	41 8b 57 34          	mov    0x34(%r15),%edx
   22626:	49 8b 7f 28          	mov    0x28(%r15),%rdi
   2262a:	4c 89 f6             	mov    %r14,%rsi
   2262d:	41 ff 57 10          	call   *0x10(%r15)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22631:	49 8b 97 c0 00 00 00 	mov    0xc0(%r15),%rdx
   22638:	49 2b 97 d0 00 00 00 	sub    0xd0(%r15),%rdx
   2263f:	41 01 97 b8 00 00 00 	add    %edx,0xb8(%r15)
      s->img_buffer_end = s->buffer_start+1;
   22646:	49 8d 57 39          	lea    0x39(%r15),%rdx
   if (n == 0) {
   2264a:	85 c0                	test   %eax,%eax
   2264c:	0f 85 5e 02 00 00    	jne    228b0 <_ZL20stbi__process_markerP10stbi__jpegi+0x550>
      s->read_from_callbacks = 0;
   22652:	41 c7 47 30 00 00 00 	movl   $0x0,0x30(%r15)
   22659:	00 
      s->img_buffer_end = s->buffer_start+1;
   2265a:	48 89 d6             	mov    %rdx,%rsi
      *s->img_buffer = 0;
   2265d:	41 c6 47 38 00       	movb   $0x0,0x38(%r15)
               sizes[i] = stbi__get8(z->s);
   22662:	89 03                	mov    %eax,(%rbx)
            for (i=0; i < 16; ++i) {
   22664:	48 83 c3 04          	add    $0x4,%rbx
   22668:	49 89 b7 c8 00 00 00 	mov    %rsi,0xc8(%r15)
      return *s->img_buffer++;
   2266f:	49 89 97 c0 00 00 00 	mov    %rdx,0xc0(%r15)
            for (i=0; i < 16; ++i) {
   22676:	49 39 dc             	cmp    %rbx,%r12
   22679:	75 84                	jne    225ff <_ZL20stbi__process_markerP10stbi__jpegi+0x29f>
   2267b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            L -= 17;
   22680:	8b 44 24 08          	mov    0x8(%rsp),%eax
            if (tc == 0) {
   22684:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
            L -= 17;
   22688:	83 e8 11             	sub    $0x11,%eax
   2268b:	89 44 24 24          	mov    %eax,0x24(%rsp)
               if (!stbi__build_huffman(z->huff_dc+th, sizes)) return 0;
   2268f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            if (tc == 0) {
   22694:	85 db                	test   %ebx,%ebx
   22696:	0f 85 c4 02 00 00    	jne    22960 <_ZL20stbi__process_markerP10stbi__jpegi+0x600>
               if (!stbi__build_huffman(z->huff_dc+th, sizes)) return 0;
   2269c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
   226a1:	49 8d 7c 05 08       	lea    0x8(%r13,%rax,1),%rdi
   226a6:	e8 f5 f2 fe ff       	call   119a0 <_ZL19stbi__build_huffmanP13stbi__huffmanPi>
   226ab:	85 c0                	test   %eax,%eax
   226ad:	0f 84 1f fe ff ff    	je     224d2 <_ZL20stbi__process_markerP10stbi__jpegi+0x172>
               v = z->huff_dc[th].values;
   226b3:	48 63 44 24 18       	movslq 0x18(%rsp),%rax
   226b8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   226bd:	48 69 c0 90 06 00 00 	imul   $0x690,%rax,%rax
   226c4:	49 8d 9c 05 08 04 00 	lea    0x408(%r13,%rax,1),%rbx
   226cb:	00 
            for (i=0; i < n; ++i)
   226cc:	85 ed                	test   %ebp,%ebp
   226ce:	0f 84 ac 01 00 00    	je     22880 <_ZL20stbi__process_markerP10stbi__jpegi+0x520>
      s->img_buffer_end = s->buffer_start+1;
   226d4:	45 31 ff             	xor    %r15d,%r15d
   226d7:	eb 27                	jmp    22700 <_ZL20stbi__process_markerP10stbi__jpegi+0x3a0>
   226d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      return *s->img_buffer++;
   226e0:	48 8d 50 01          	lea    0x1(%rax),%rdx
   226e4:	49 89 96 c0 00 00 00 	mov    %rdx,0xc0(%r14)
   226eb:	44 0f b6 20          	movzbl (%rax),%r12d
               v[i] = stbi__get8(z->s);
   226ef:	46 88 24 3b          	mov    %r12b,(%rbx,%r15,1)
            for (i=0; i < n; ++i)
   226f3:	49 83 c7 01          	add    $0x1,%r15
   226f7:	44 39 fd             	cmp    %r15d,%ebp
   226fa:	0f 8e 90 00 00 00    	jle    22790 <_ZL20stbi__process_markerP10stbi__jpegi+0x430>
               v[i] = stbi__get8(z->s);
   22700:	4d 8b 75 00          	mov    0x0(%r13),%r14
   if (s->img_buffer < s->img_buffer_end)
   22704:	49 8b 86 c0 00 00 00 	mov    0xc0(%r14),%rax
   2270b:	49 3b 86 c8 00 00 00 	cmp    0xc8(%r14),%rax
   22712:	72 cc                	jb     226e0 <_ZL20stbi__process_markerP10stbi__jpegi+0x380>
   if (s->read_from_callbacks) {
   22714:	45 8b 5e 30          	mov    0x30(%r14),%r11d
   return 0;
   22718:	45 31 e4             	xor    %r12d,%r12d
   if (s->read_from_callbacks) {
   2271b:	45 85 db             	test   %r11d,%r11d
   2271e:	74 cf                	je     226ef <_ZL20stbi__process_markerP10stbi__jpegi+0x38f>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22720:	49 8d 76 38          	lea    0x38(%r14),%rsi
   22724:	41 8b 56 34          	mov    0x34(%r14),%edx
   22728:	49 8b 7e 28          	mov    0x28(%r14),%rdi
   2272c:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
   22731:	41 ff 56 10          	call   *0x10(%r14)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22735:	49 8b 96 c0 00 00 00 	mov    0xc0(%r14),%rdx
   if (n == 0) {
   2273c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22741:	49 2b 96 d0 00 00 00 	sub    0xd0(%r14),%rdx
   22748:	41 01 96 b8 00 00 00 	add    %edx,0xb8(%r14)
   if (n == 0) {
   2274f:	85 c0                	test   %eax,%eax
      s->img_buffer_end = s->buffer_start+1;
   22751:	49 8d 56 39          	lea    0x39(%r14),%rdx
   if (n == 0) {
   22755:	0f 85 6d 01 00 00    	jne    228c8 <_ZL20stbi__process_markerP10stbi__jpegi+0x568>
      s->read_from_callbacks = 0;
   2275b:	41 c7 46 30 00 00 00 	movl   $0x0,0x30(%r14)
   22762:	00 
      s->img_buffer_end = s->buffer_start+1;
   22763:	48 89 d6             	mov    %rdx,%rsi
      *s->img_buffer = 0;
   22766:	41 c6 46 38 00       	movb   $0x0,0x38(%r14)
   2276b:	49 89 b6 c8 00 00 00 	mov    %rsi,0xc8(%r14)
      return *s->img_buffer++;
   22772:	49 89 96 c0 00 00 00 	mov    %rdx,0xc0(%r14)
               v[i] = stbi__get8(z->s);
   22779:	46 88 24 3b          	mov    %r12b,(%rbx,%r15,1)
            for (i=0; i < n; ++i)
   2277d:	49 83 c7 01          	add    $0x1,%r15
   22781:	44 39 fd             	cmp    %r15d,%ebp
   22784:	0f 8f 76 ff ff ff    	jg     22700 <_ZL20stbi__process_markerP10stbi__jpegi+0x3a0>
   2278a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            if (tc != 0)
   22790:	44 8b 54 24 20       	mov    0x20(%rsp),%r10d
   22795:	45 85 d2             	test   %r10d,%r10d
   22798:	0f 84 e2 00 00 00    	je     22880 <_ZL20stbi__process_markerP10stbi__jpegi+0x520>
               stbi__build_fast_ac(z->fast_ac[th], z->huff_ac + th);
   2279e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   227a3:	4d 8d b4 05 48 1a 00 	lea    0x1a48(%r13,%rax,1),%r14
   227aa:	00 
   227ab:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
   227b0:	31 c0                	xor    %eax,%eax
            int m = 1 << (magbits - 1);
   227b2:	41 b8 01 00 00 00    	mov    $0x1,%r8d
            if (k < m) k += (~0U << magbits) + 1;
   227b8:	41 bf ff ff ff ff    	mov    $0xffffffff,%r15d
               stbi__build_fast_ac(z->fast_ac[th], z->huff_ac + th);
   227be:	48 c1 e3 0a          	shl    $0xa,%rbx
   227c2:	49 8d 9c 1d 88 36 00 	lea    0x3688(%r13,%rbx,1),%rbx
   227c9:	00 
   for (i=0; i < (1 << FAST_BITS); ++i) {
   227ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      stbi_uc fast = h->fast[i];
   227d0:	41 0f b6 14 06       	movzbl (%r14,%rax,1),%edx
      fast_ac[i] = 0;
   227d5:	45 31 c9             	xor    %r9d,%r9d
   227d8:	66 44 89 0c 43       	mov    %r9w,(%rbx,%rax,2)
      if (fast < 255) {
   227dd:	80 fa ff             	cmp    $0xff,%dl
   227e0:	0f 84 8a 00 00 00    	je     22870 <_ZL20stbi__process_markerP10stbi__jpegi+0x510>
         int rs = h->values[fast];
   227e6:	0f b6 ca             	movzbl %dl,%ecx
   227e9:	41 0f b6 94 0e 00 04 	movzbl 0x400(%r14,%rcx,1),%edx
   227f0:	00 00 
         if (magbits && len + magbits <= FAST_BITS) {
   227f2:	89 d7                	mov    %edx,%edi
   227f4:	83 e7 0f             	and    $0xf,%edi
   227f7:	74 77                	je     22870 <_ZL20stbi__process_markerP10stbi__jpegi+0x510>
         int len = h->size[fast];
   227f9:	41 0f b6 8c 0e 00 05 	movzbl 0x500(%r14,%rcx,1),%ecx
   22800:	00 00 
         int magbits = rs & 15;
   22802:	44 0f b6 d7          	movzbl %dil,%r10d
         int len = h->size[fast];
   22806:	41 89 cb             	mov    %ecx,%r11d
         if (magbits && len + magbits <= FAST_BITS) {
   22809:	44 01 d1             	add    %r10d,%ecx
   2280c:	83 f9 09             	cmp    $0x9,%ecx
   2280f:	7f 5f                	jg     22870 <_ZL20stbi__process_markerP10stbi__jpegi+0x510>
            int k = ((i << len) & ((1 << FAST_BITS) - 1)) >> (FAST_BITS - magbits);
   22811:	44 89 d9             	mov    %r11d,%ecx
   22814:	89 c6                	mov    %eax,%esi
            int m = 1 << (magbits - 1);
   22816:	45 89 c1             	mov    %r8d,%r9d
            int k = ((i << len) & ((1 << FAST_BITS) - 1)) >> (FAST_BITS - magbits);
   22819:	d3 e6                	shl    %cl,%esi
   2281b:	b9 09 00 00 00       	mov    $0x9,%ecx
   22820:	44 29 d1             	sub    %r10d,%ecx
   22823:	81 e6 ff 01 00 00    	and    $0x1ff,%esi
   22829:	d3 fe                	sar    %cl,%esi
            int m = 1 << (magbits - 1);
   2282b:	41 8d 4a ff          	lea    -0x1(%r10),%ecx
   2282f:	41 d3 e1             	shl    %cl,%r9d
            if (k < m) k += (~0U << magbits) + 1;
   22832:	41 89 f4             	mov    %esi,%r12d
   22835:	44 39 ce             	cmp    %r9d,%esi
   22838:	7d 10                	jge    2284a <_ZL20stbi__process_markerP10stbi__jpegi+0x4ea>
   2283a:	45 89 f9             	mov    %r15d,%r9d
   2283d:	89 f9                	mov    %edi,%ecx
   2283f:	41 d3 e1             	shl    %cl,%r9d
   22842:	46 8d 64 0e 01       	lea    0x1(%rsi,%r9,1),%r12d
   22847:	44 89 e6             	mov    %r12d,%esi
            if (k >= -128 && k <= 127)
   2284a:	41 83 ec 80          	sub    $0xffffff80,%r12d
   2284e:	41 81 fc ff 00 00 00 	cmp    $0xff,%r12d
   22855:	77 19                	ja     22870 <_ZL20stbi__process_markerP10stbi__jpegi+0x510>
         int run = (rs >> 4) & 15;
   22857:	c1 fa 04             	sar    $0x4,%edx
               fast_ac[i] = (stbi__int16) ((k * 256) + (run * 16) + (len + magbits));
   2285a:	c1 e6 04             	shl    $0x4,%esi
   2285d:	40 0f b6 ff          	movzbl %dil,%edi
   22861:	01 f2                	add    %esi,%edx
   22863:	41 01 fb             	add    %edi,%r11d
   22866:	c1 e2 04             	shl    $0x4,%edx
   22869:	44 01 da             	add    %r11d,%edx
   2286c:	66 89 14 43          	mov    %dx,(%rbx,%rax,2)
   for (i=0; i < (1 << FAST_BITS); ++i) {
   22870:	48 83 c0 01          	add    $0x1,%rax
   22874:	48 3d 00 02 00 00    	cmp    $0x200,%rax
   2287a:	0f 85 50 ff ff ff    	jne    227d0 <_ZL20stbi__process_markerP10stbi__jpegi+0x470>
            L -= n;
   22880:	8b 44 24 24          	mov    0x24(%rsp),%eax
   22884:	29 e8                	sub    %ebp,%eax
   22886:	89 44 24 08          	mov    %eax,0x8(%rsp)
         while (L > 0) {
   2288a:	85 c0                	test   %eax,%eax
   2288c:	0f 8f be fc ff ff    	jg     22550 <_ZL20stbi__process_markerP10stbi__jpegi+0x1f0>
         return L==0;
   22892:	8b 7c 24 08          	mov    0x8(%rsp),%edi
   22896:	31 c0                	xor    %eax,%eax
   22898:	85 ff                	test   %edi,%edi
   2289a:	0f 94 c0             	sete   %al
}
   2289d:	48 83 c4 78          	add    $0x78,%rsp
   228a1:	5b                   	pop    %rbx
   228a2:	5d                   	pop    %rbp
   228a3:	41 5c                	pop    %r12
   228a5:	41 5d                	pop    %r13
   228a7:	41 5e                	pop    %r14
   228a9:	41 5f                	pop    %r15
   228ab:	c3                   	ret
   228ac:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   228b0:	48 98                	cltq
   228b2:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
               sizes[i] = stbi__get8(z->s);
   228b6:	41 0f b6 47 38       	movzbl 0x38(%r15),%eax
               n += sizes[i];
   228bb:	01 c5                	add    %eax,%ebp
   228bd:	e9 a0 fd ff ff       	jmp    22662 <_ZL20stbi__process_markerP10stbi__jpegi+0x302>
   228c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   228c8:	48 98                	cltq
      return *s->img_buffer++;
   228ca:	45 0f b6 66 38       	movzbl 0x38(%r14),%r12d
      s->img_buffer_end = s->buffer_start + n;
   228cf:	48 01 c6             	add    %rax,%rsi
   228d2:	e9 94 fe ff ff       	jmp    2276b <_ZL20stbi__process_markerP10stbi__jpegi+0x40b>
   228d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   228de:	00 00 
   if (s->read_from_callbacks) {
   228e0:	41 8b 77 30          	mov    0x30(%r15),%esi
            int th = q & 15;
   228e4:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
   228eb:	00 
   228ec:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
   228f3:	00 00 
   if (s->read_from_callbacks) {
   228f5:	89 74 24 20          	mov    %esi,0x20(%rsp)
   228f9:	85 f6                	test   %esi,%esi
   228fb:	0f 84 c9 fc ff ff    	je     225ca <_ZL20stbi__process_markerP10stbi__jpegi+0x26a>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22901:	4d 8d 67 38          	lea    0x38(%r15),%r12
   22905:	49 8b 7f 28          	mov    0x28(%r15),%rdi
   22909:	41 8b 57 34          	mov    0x34(%r15),%edx
   2290d:	4c 89 e6             	mov    %r12,%rsi
   22910:	41 ff 57 10          	call   *0x10(%r15)
      s->img_buffer_end = s->buffer_start+1;
   22914:	49 8d 77 39          	lea    0x39(%r15),%rsi
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22918:	89 c7                	mov    %eax,%edi
   2291a:	89 44 24 20          	mov    %eax,0x20(%rsp)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2291e:	49 8b 87 c0 00 00 00 	mov    0xc0(%r15),%rax
   22925:	49 2b 87 d0 00 00 00 	sub    0xd0(%r15),%rax
   2292c:	41 01 87 b8 00 00 00 	add    %eax,0xb8(%r15)
   if (n == 0) {
   22933:	85 ff                	test   %edi,%edi
   22935:	75 6c                	jne    229a3 <_ZL20stbi__process_markerP10stbi__jpegi+0x643>
      s->read_from_callbacks = 0;
   22937:	41 c7 47 30 00 00 00 	movl   $0x0,0x30(%r15)
   2293e:	00 
      return *s->img_buffer++;
   2293f:	45 31 e4             	xor    %r12d,%r12d
      *s->img_buffer = 0;
   22942:	41 c6 47 38 00       	movb   $0x0,0x38(%r15)
   22947:	49 89 b7 c8 00 00 00 	mov    %rsi,0xc8(%r15)
      return *s->img_buffer++;
   2294e:	49 89 b7 c0 00 00 00 	mov    %rsi,0xc0(%r15)
            if (tc > 1 || th > 3) return stbi__err("bad DHT header","Corrupt JPEG");
   22955:	e9 4e fc ff ff       	jmp    225a8 <_ZL20stbi__process_markerP10stbi__jpegi+0x248>
   2295a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
               if (!stbi__build_huffman(z->huff_ac+th, sizes)) return 0;
   22960:	4d 8d b4 05 48 1a 00 	lea    0x1a48(%r13,%rax,1),%r14
   22967:	00 
   22968:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
   2296d:	4c 89 f7             	mov    %r14,%rdi
   22970:	e8 2b f0 fe ff       	call   119a0 <_ZL19stbi__build_huffmanP13stbi__huffmanPi>
   22975:	85 c0                	test   %eax,%eax
   22977:	0f 84 55 fb ff ff    	je     224d2 <_ZL20stbi__process_markerP10stbi__jpegi+0x172>
               v = z->huff_ac[th].values;
   2297d:	48 63 44 24 18       	movslq 0x18(%rsp),%rax
   22982:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   22987:	48 69 c0 90 06 00 00 	imul   $0x690,%rax,%rax
   2298e:	49 8d 9c 05 48 1e 00 	lea    0x1e48(%r13,%rax,1),%rbx
   22995:	00 
            for (i=0; i < n; ++i)
   22996:	85 ed                	test   %ebp,%ebp
   22998:	0f 85 36 fd ff ff    	jne    226d4 <_ZL20stbi__process_markerP10stbi__jpegi+0x374>
   2299e:	e9 08 fe ff ff       	jmp    227ab <_ZL20stbi__process_markerP10stbi__jpegi+0x44b>
      s->img_buffer_end = s->buffer_start + n;
   229a3:	48 63 44 24 20       	movslq 0x20(%rsp),%rax
      return *s->img_buffer++;
   229a8:	49 89 b7 c0 00 00 00 	mov    %rsi,0xc0(%r15)
      s->img_buffer_end = s->buffer_start + n;
   229af:	49 8d 14 04          	lea    (%r12,%rax,1),%rdx
      return *s->img_buffer++;
   229b3:	41 0f b6 47 38       	movzbl 0x38(%r15),%eax
   229b8:	49 89 97 c8 00 00 00 	mov    %rdx,0xc8(%r15)
            int tc = q >> 4;
   229bf:	89 c7                	mov    %eax,%edi
   229c1:	41 89 c4             	mov    %eax,%r12d
   229c4:	c1 ff 04             	sar    $0x4,%edi
   229c7:	41 83 e4 0f          	and    $0xf,%r12d
   229cb:	89 7c 24 20          	mov    %edi,0x20(%rsp)
            int th = q & 15;
   229cf:	89 c7                	mov    %eax,%edi
   229d1:	83 e7 0f             	and    $0xf,%edi
            if (tc > 1 || th > 3) return stbi__err("bad DHT header","Corrupt JPEG");
   229d4:	83 f8 1f             	cmp    $0x1f,%eax
   229d7:	0f 97 c0             	seta   %al
   229da:	83 ff 03             	cmp    $0x3,%edi
            int th = q & 15;
   229dd:	89 7c 24 18          	mov    %edi,0x18(%rsp)
            if (tc > 1 || th > 3) return stbi__err("bad DHT header","Corrupt JPEG");
   229e1:	40 0f 9f c7          	setg   %dil
   229e5:	09 f8                	or     %edi,%eax
   229e7:	e9 b4 fb ff ff       	jmp    225a0 <_ZL20stbi__process_markerP10stbi__jpegi+0x240>
      L = stbi__get16be(z->s);
   229ec:	49 8b 7d 00          	mov    0x0(%r13),%rdi
   229f0:	e8 bb b8 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   229f5:	41 89 c4             	mov    %eax,%r12d
      if (L < 2) {
   229f8:	83 f8 01             	cmp    $0x1,%eax
   229fb:	0f 8f cf 02 00 00    	jg     22cd0 <_ZL20stbi__process_markerP10stbi__jpegi+0x970>
   stbi__g_failure_reason = str;
   22a01:	81 fb fe 00 00 00    	cmp    $0xfe,%ebx
   22a07:	48 8d 05 31 52 01 00 	lea    0x15231(%rip),%rax        # 37c3f <_ZSt19piecewise_construct+0x2f8>
   22a0e:	48 8d 15 36 52 01 00 	lea    0x15236(%rip),%rdx        # 37c4b <_ZSt19piecewise_construct+0x304>
   22a15:	48 0f 45 c2          	cmovne %rdx,%rax
   22a19:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   22a20:	ff ff 
   22a22:	e9 ab fa ff ff       	jmp    224d2 <_ZL20stbi__process_markerP10stbi__jpegi+0x172>
   22a27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   22a2e:	00 00 
   if (s->read_from_callbacks) {
   22a30:	44 8b 73 30          	mov    0x30(%rbx),%r14d
   22a34:	31 ed                	xor    %ebp,%ebp
   22a36:	45 85 f6             	test   %r14d,%r14d
   22a39:	0f 84 24 fa ff ff    	je     22463 <_ZL20stbi__process_markerP10stbi__jpegi+0x103>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22a3f:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   22a43:	8b 53 34             	mov    0x34(%rbx),%edx
   22a46:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   22a4a:	44 89 4c 24 20       	mov    %r9d,0x20(%rsp)
   22a4f:	4c 89 f6             	mov    %r14,%rsi
   22a52:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22a55:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   if (n == 0) {
   22a5c:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   22a61:	4c 8d 15 b8 5c 01 00 	lea    0x15cb8(%rip),%r10        # 38720 <_ZL19stbi__jpeg_dezigzag+0x40>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22a68:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   22a6f:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   22a75:	85 c0                	test   %eax,%eax
      s->img_buffer_end = s->buffer_start+1;
   22a77:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   22a7b:	0f 84 e7 00 00 00    	je     22b68 <_ZL20stbi__process_markerP10stbi__jpegi+0x808>
      s->img_buffer_end = s->buffer_start + n;
   22a81:	48 98                	cltq
               z->dequant[t][stbi__jpeg_dezigzag[i]] = (stbi__uint16)(sixteen ? stbi__get16be(z->s) : stbi__get8(z->s));
   22a83:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
      s->img_buffer_end = s->buffer_start + n;
   22a87:	49 01 c6             	add    %rax,%r14
   22a8a:	4c 89 b3 c8 00 00 00 	mov    %r14,0xc8(%rbx)
      return *s->img_buffer++;
   22a91:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   22a98:	e9 c6 f9 ff ff       	jmp    22463 <_ZL20stbi__process_markerP10stbi__jpegi+0x103>
   22a9d:	0f 1f 00             	nopl   (%rax)
   if (s->read_from_callbacks) {
   22aa0:	8b 6b 30             	mov    0x30(%rbx),%ebp
   22aa3:	85 ed                	test   %ebp,%ebp
   22aa5:	0f 84 b8 f9 ff ff    	je     22463 <_ZL20stbi__process_markerP10stbi__jpegi+0x103>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22aab:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   22aaf:	8b 53 34             	mov    0x34(%rbx),%edx
   22ab2:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   22ab6:	44 89 4c 24 20       	mov    %r9d,0x20(%rsp)
   22abb:	4c 89 f6             	mov    %r14,%rsi
   22abe:	ff 53 10             	call   *0x10(%rbx)
   if (n == 0) {
   22ac1:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   22ac6:	4c 8d 15 53 5c 01 00 	lea    0x15c53(%rip),%r10        # 38720 <_ZL19stbi__jpeg_dezigzag+0x40>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22acd:	48 63 e8             	movslq %eax,%rbp
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22ad0:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22ad7:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   22ade:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   22ae4:	85 ed                	test   %ebp,%ebp
      s->img_buffer_end = s->buffer_start+1;
   22ae6:	48 8d 43 39          	lea    0x39(%rbx),%rax
   if (n == 0) {
   22aea:	0f 85 90 00 00 00    	jne    22b80 <_ZL20stbi__process_markerP10stbi__jpegi+0x820>
      s->read_from_callbacks = 0;
   22af0:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   22af7:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   22afb:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   22b02:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   if (s->read_from_callbacks) {
   22b09:	8b 43 30             	mov    0x30(%rbx),%eax
   22b0c:	85 c0                	test   %eax,%eax
   22b0e:	0f 84 4f f9 ff ff    	je     22463 <_ZL20stbi__process_markerP10stbi__jpegi+0x103>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22b14:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   22b18:	8b 53 34             	mov    0x34(%rbx),%edx
   22b1b:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   22b1f:	44 89 4c 24 20       	mov    %r9d,0x20(%rsp)
   22b24:	4c 89 f6             	mov    %r14,%rsi
   22b27:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22b2a:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   if (n == 0) {
   22b31:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   22b36:	4c 8d 15 e3 5b 01 00 	lea    0x15be3(%rip),%r10        # 38720 <_ZL19stbi__jpeg_dezigzag+0x40>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22b3d:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   22b44:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   22b4a:	85 c0                	test   %eax,%eax
      s->img_buffer_end = s->buffer_start+1;
   22b4c:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   22b50:	74 16                	je     22b68 <_ZL20stbi__process_markerP10stbi__jpegi+0x808>
      s->img_buffer_end = s->buffer_start + n;
   22b52:	48 98                	cltq
   22b54:	49 01 c6             	add    %rax,%r14
   return (z << 8) + stbi__get8(s);
   22b57:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   22b5b:	01 c5                	add    %eax,%ebp
   22b5d:	e9 28 ff ff ff       	jmp    22a8a <_ZL20stbi__process_markerP10stbi__jpegi+0x72a>
   22b62:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      s->read_from_callbacks = 0;
   22b68:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   22b6f:	49 89 d6             	mov    %rdx,%r14
      *s->img_buffer = 0;
   22b72:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   22b76:	e9 0f ff ff ff       	jmp    22a8a <_ZL20stbi__process_markerP10stbi__jpegi+0x72a>
   22b7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   22b80:	49 8d 0c 2e          	lea    (%r14,%rbp,1),%rcx
   int z = stbi__get8(s);
   22b84:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
      return *s->img_buffer++;
   22b88:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   22b8f:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
   return (z << 8) + stbi__get8(s);
   22b96:	c1 e5 08             	shl    $0x8,%ebp
   22b99:	e9 ac f8 ff ff       	jmp    2244a <_ZL20stbi__process_markerP10stbi__jpegi+0xea>
   22b9e:	66 90                	xchg   %ax,%ax
            L -= (sixteen ? 129 : 65);
   22ba0:	45 85 c9             	test   %r9d,%r9d
   22ba3:	0f 84 8f 00 00 00    	je     22c38 <_ZL20stbi__process_markerP10stbi__jpegi+0x8d8>
   22ba9:	81 6c 24 08 81 00 00 	subl   $0x81,0x8(%rsp)
   22bb0:	00 
   22bb1:	8b 44 24 08          	mov    0x8(%rsp),%eax
         while (L > 0) {
   22bb5:	85 c0                	test   %eax,%eax
   22bb7:	0f 8f 03 f8 ff ff    	jg     223c0 <_ZL20stbi__process_markerP10stbi__jpegi+0x60>
   22bbd:	e9 d0 fc ff ff       	jmp    22892 <_ZL20stbi__process_markerP10stbi__jpegi+0x532>
   22bc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   22bc8:	44 8b 7b 30          	mov    0x30(%rbx),%r15d
            int p = q >> 4, sixteen = (p != 0);
   22bcc:	45 31 c9             	xor    %r9d,%r9d
   if (s->read_from_callbacks) {
   22bcf:	45 85 ff             	test   %r15d,%r15d
   22bd2:	0f 84 44 f8 ff ff    	je     2241c <_ZL20stbi__process_markerP10stbi__jpegi+0xbc>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22bd8:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   22bdc:	8b 53 34             	mov    0x34(%rbx),%edx
   22bdf:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   22be3:	44 89 4c 24 20       	mov    %r9d,0x20(%rsp)
   22be8:	48 89 ee             	mov    %rbp,%rsi
   22beb:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   22bee:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   22bf2:	4c 8d 15 27 5b 01 00 	lea    0x15b27(%rip),%r10        # 38720 <_ZL19stbi__jpeg_dezigzag+0x40>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22bf9:	4c 63 f8             	movslq %eax,%r15
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22bfc:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22c03:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   22c0a:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   22c10:	45 85 ff             	test   %r15d,%r15d
   22c13:	75 39                	jne    22c4e <_ZL20stbi__process_markerP10stbi__jpegi+0x8ee>
      s->read_from_callbacks = 0;
   22c15:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   22c1c:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
   22c21:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   22c25:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   22c2c:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
            if (t > 3) return stbi__err("bad DQT table","Corrupt JPEG");
   22c33:	e9 d2 f7 ff ff       	jmp    2240a <_ZL20stbi__process_markerP10stbi__jpegi+0xaa>
            L -= (sixteen ? 129 : 65);
   22c38:	83 6c 24 08 41       	subl   $0x41,0x8(%rsp)
   22c3d:	8b 44 24 08          	mov    0x8(%rsp),%eax
         while (L > 0) {
   22c41:	85 c0                	test   %eax,%eax
   22c43:	0f 8f 77 f7 ff ff    	jg     223c0 <_ZL20stbi__process_markerP10stbi__jpegi+0x60>
   22c49:	e9 44 fc ff ff       	jmp    22892 <_ZL20stbi__process_markerP10stbi__jpegi+0x532>
      return *s->img_buffer++;
   22c4e:	44 0f b6 4b 38       	movzbl 0x38(%rbx),%r9d
      s->img_buffer_end = s->buffer_start + n;
   22c53:	4c 01 fd             	add    %r15,%rbp
      return *s->img_buffer++;
   22c56:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   22c5d:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
   22c64:	44 89 c8             	mov    %r9d,%eax
            int p = q >> 4, sixteen = (p != 0);
   22c67:	41 c1 f9 04          	sar    $0x4,%r9d
            int t = q & 15,i;
   22c6b:	41 89 c7             	mov    %eax,%r15d
   22c6e:	41 83 e7 0f          	and    $0xf,%r15d
   22c72:	e9 81 f7 ff ff       	jmp    223f8 <_ZL20stbi__process_markerP10stbi__jpegi+0x98>
   stbi__g_failure_reason = str;
   22c77:	48 8d 05 b2 4f 01 00 	lea    0x14fb2(%rip),%rax        # 37c30 <_ZSt19piecewise_construct+0x2e9>
   22c7e:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   22c85:	ff ff 
            if (tc > 1 || th > 3) return stbi__err("bad DHT header","Corrupt JPEG");
   22c87:	e9 46 f8 ff ff       	jmp    224d2 <_ZL20stbi__process_markerP10stbi__jpegi+0x172>
   stbi__g_failure_reason = str;
   22c8c:	48 8d 05 8f 4f 01 00 	lea    0x14f8f(%rip),%rax        # 37c22 <_ZSt19piecewise_construct+0x2db>
   22c93:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   22c9a:	ff ff 
            if (t > 3) return stbi__err("bad DQT table","Corrupt JPEG");
   22c9c:	e9 31 f8 ff ff       	jmp    224d2 <_ZL20stbi__process_markerP10stbi__jpegi+0x172>
   stbi__g_failure_reason = str;
   22ca1:	48 8d 05 6d 4f 01 00 	lea    0x14f6d(%rip),%rax        # 37c15 <_ZSt19piecewise_construct+0x2ce>
   22ca8:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   22caf:	ff ff 
            if (p != 0 && p != 1) return stbi__err("bad DQT type","Corrupt JPEG");
   22cb1:	e9 1c f8 ff ff       	jmp    224d2 <_ZL20stbi__process_markerP10stbi__jpegi+0x172>
         z->restart_interval = stbi__get16be(z->s);
   22cb6:	49 8b 7d 00          	mov    0x0(%r13),%rdi
   22cba:	e8 f1 b5 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   22cbf:	41 89 85 68 48 00 00 	mov    %eax,0x4868(%r13)
         return 1;
   22cc6:	b8 01 00 00 00       	mov    $0x1,%eax
   22ccb:	e9 04 f8 ff ff       	jmp    224d4 <_ZL20stbi__process_markerP10stbi__jpegi+0x174>
      L -= 2;
   22cd0:	8d 70 fe             	lea    -0x2(%rax),%esi
      if (m == 0xE0 && L >= 5) { // JFIF APP0 segment
   22cd3:	81 fb e0 00 00 00    	cmp    $0xe0,%ebx
   22cd9:	0f 85 11 02 00 00    	jne    22ef0 <_ZL20stbi__process_markerP10stbi__jpegi+0xb90>
   22cdf:	83 fe 04             	cmp    $0x4,%esi
   22ce2:	0f 8e 08 02 00 00    	jle    22ef0 <_ZL20stbi__process_markerP10stbi__jpegi+0xb90>
         z->restart_interval = stbi__get16be(z->s);
   22ce8:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   if (s->img_buffer < s->img_buffer_end)
   22cec:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22cf3:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   22cfa:	0f 82 62 01 00 00    	jb     22e62 <_ZL20stbi__process_markerP10stbi__jpegi+0xb02>
   if (s->read_from_callbacks) {
   22d00:	8b 6b 30             	mov    0x30(%rbx),%ebp
   22d03:	85 ed                	test   %ebp,%ebp
   22d05:	0f 85 04 03 00 00    	jne    2300f <_ZL20stbi__process_markerP10stbi__jpegi+0xcaf>
   if (s->img_buffer < s->img_buffer_end)
   22d0b:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   22d12:	0f 82 c0 00 00 00    	jb     22dd8 <_ZL20stbi__process_markerP10stbi__jpegi+0xa78>
   22d18:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22d1f:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   22d26:	0f 83 ba 02 00 00    	jae    22fe6 <_ZL20stbi__process_markerP10stbi__jpegi+0xc86>
               ok = 0;
   22d2c:	45 31 ff             	xor    %r15d,%r15d
      return *s->img_buffer++;
   22d2f:	48 8d 50 01          	lea    0x1(%rax),%rdx
   22d33:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   22d3a:	0f b6 10             	movzbl (%rax),%edx
            if (stbi__get8(z->s) != tag[i])
   22d3d:	31 ed                	xor    %ebp,%ebp
   22d3f:	80 fa 49             	cmp    $0x49,%dl
   22d42:	41 0f 44 ef          	cmove  %r15d,%ebp
   if (s->img_buffer < s->img_buffer_end)
   22d46:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22d4d:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   22d54:	72 25                	jb     22d7b <_ZL20stbi__process_markerP10stbi__jpegi+0xa1b>
   if (s->read_from_callbacks) {
   22d56:	8b 53 30             	mov    0x30(%rbx),%edx
   22d59:	85 d2                	test   %edx,%edx
   22d5b:	0f 85 33 02 00 00    	jne    22f94 <_ZL20stbi__process_markerP10stbi__jpegi+0xc34>
         L -= 5;
   22d61:	41 8d 74 24 f9       	lea    -0x7(%r12),%esi
   if (n == 0) return;  // already there!
   22d66:	85 f6                	test   %esi,%esi
   22d68:	0f 84 58 ff ff ff    	je     22cc6 <_ZL20stbi__process_markerP10stbi__jpegi+0x966>
   22d6e:	48 89 df             	mov    %rbx,%rdi
   22d71:	e8 9a fd fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   22d76:	e9 4b ff ff ff       	jmp    22cc6 <_ZL20stbi__process_markerP10stbi__jpegi+0x966>
      return *s->img_buffer++;
   22d7b:	48 8d 50 01          	lea    0x1(%rax),%rdx
   22d7f:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   22d86:	0f b6 10             	movzbl (%rax),%edx
            if (stbi__get8(z->s) != tag[i])
   22d89:	31 c0                	xor    %eax,%eax
   22d8b:	80 fa 46             	cmp    $0x46,%dl
   22d8e:	0f 44 c5             	cmove  %ebp,%eax
   22d91:	41 89 c7             	mov    %eax,%r15d
   if (s->img_buffer < s->img_buffer_end)
   22d94:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22d9b:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   22da2:	0f 83 b6 02 00 00    	jae    2305e <_ZL20stbi__process_markerP10stbi__jpegi+0xcfe>
      return *s->img_buffer++;
   22da8:	48 8d 50 01          	lea    0x1(%rax),%rdx
   22dac:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   22db3:	0f b6 08             	movzbl (%rax),%ecx
            if (stbi__get8(z->s) != tag[i])
   22db6:	84 c9                	test   %cl,%cl
   22db8:	75 a7                	jne    22d61 <_ZL20stbi__process_markerP10stbi__jpegi+0xa01>
         L -= 5;
   22dba:	41 8d 74 24 f9       	lea    -0x7(%r12),%esi
         if (ok)
   22dbf:	45 85 ff             	test   %r15d,%r15d
   22dc2:	74 a2                	je     22d66 <_ZL20stbi__process_markerP10stbi__jpegi+0xa06>
            z->jfif = 1;
   22dc4:	41 c7 85 48 48 00 00 	movl   $0x1,0x4848(%r13)
   22dcb:	01 00 00 00 
   if (n == 0) return;  // already there!
   22dcf:	85 f6                	test   %esi,%esi
   22dd1:	75 9b                	jne    22d6e <_ZL20stbi__process_markerP10stbi__jpegi+0xa0e>
   22dd3:	e9 ee fe ff ff       	jmp    22cc6 <_ZL20stbi__process_markerP10stbi__jpegi+0x966>
      return *s->img_buffer++;
   22dd8:	48 8d 50 01          	lea    0x1(%rax),%rdx
   22ddc:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   22de3:	0f b6 10             	movzbl (%rax),%edx
            if (stbi__get8(z->s) != tag[i])
   22de6:	31 c0                	xor    %eax,%eax
   22de8:	80 fa 46             	cmp    $0x46,%dl
   22deb:	0f 44 c5             	cmove  %ebp,%eax
   22dee:	41 89 c7             	mov    %eax,%r15d
   if (s->img_buffer < s->img_buffer_end)
   22df1:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22df8:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   22dff:	0f 82 2a ff ff ff    	jb     22d2f <_ZL20stbi__process_markerP10stbi__jpegi+0x9cf>
   if (s->read_from_callbacks) {
   22e05:	8b 4b 30             	mov    0x30(%rbx),%ecx
   22e08:	85 c9                	test   %ecx,%ecx
   22e0a:	0f 84 d6 01 00 00    	je     22fe6 <_ZL20stbi__process_markerP10stbi__jpegi+0xc86>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22e10:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   22e14:	8b 53 34             	mov    0x34(%rbx),%edx
   22e17:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   22e1b:	4c 89 f6             	mov    %r14,%rsi
   22e1e:	ff 53 10             	call   *0x10(%rbx)
   22e21:	48 63 e8             	movslq %eax,%rbp
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22e24:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22e2b:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   22e32:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   22e38:	48 8d 43 39          	lea    0x39(%rbx),%rax
   if (n == 0) {
   22e3c:	85 ed                	test   %ebp,%ebp
   22e3e:	0f 84 b6 02 00 00    	je     230fa <_ZL20stbi__process_markerP10stbi__jpegi+0xd9a>
      s->img_buffer_end = s->buffer_start + n;
   22e44:	49 01 ee             	add    %rbp,%r14
      return *s->img_buffer++;
   22e47:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   22e4e:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   22e52:	4c 89 b3 c8 00 00 00 	mov    %r14,0xc8(%rbx)
      stbi__skip(z->s, L);
   22e59:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   22e5d:	e9 db fe ff ff       	jmp    22d3d <_ZL20stbi__process_markerP10stbi__jpegi+0x9dd>
      return *s->img_buffer++;
   22e62:	48 8d 50 01          	lea    0x1(%rax),%rdx
   22e66:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   22e6d:	0f b6 10             	movzbl (%rax),%edx
            if (stbi__get8(z->s) != tag[i])
   22e70:	31 ed                	xor    %ebp,%ebp
   22e72:	80 fa 4a             	cmp    $0x4a,%dl
   22e75:	40 0f 94 c5          	sete   %bpl
   if (s->img_buffer < s->img_buffer_end)
   22e79:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22e80:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   22e87:	0f 82 4b ff ff ff    	jb     22dd8 <_ZL20stbi__process_markerP10stbi__jpegi+0xa78>
   if (s->read_from_callbacks) {
   22e8d:	8b 73 30             	mov    0x30(%rbx),%esi
   22e90:	85 f6                	test   %esi,%esi
   22e92:	0f 84 80 fe ff ff    	je     22d18 <_ZL20stbi__process_markerP10stbi__jpegi+0x9b8>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22e98:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   22e9c:	8b 53 34             	mov    0x34(%rbx),%edx
   22e9f:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   22ea3:	4c 89 f6             	mov    %r14,%rsi
   22ea6:	ff 53 10             	call   *0x10(%rbx)
   22ea9:	41 89 c7             	mov    %eax,%r15d
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22eac:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22eb3:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   22eba:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   22ec0:	48 8d 43 39          	lea    0x39(%rbx),%rax
   if (n == 0) {
   22ec4:	45 85 ff             	test   %r15d,%r15d
   22ec7:	0f 84 4f 02 00 00    	je     2311c <_ZL20stbi__process_markerP10stbi__jpegi+0xdbc>
      s->img_buffer_end = s->buffer_start + n;
   22ecd:	49 63 cf             	movslq %r15d,%rcx
      return *s->img_buffer++;
   22ed0:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   22ed7:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   22edb:	49 01 ce             	add    %rcx,%r14
   22ede:	4c 89 b3 c8 00 00 00 	mov    %r14,0xc8(%rbx)
      stbi__skip(z->s, L);
   22ee5:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   22ee9:	e9 f8 fe ff ff       	jmp    22de6 <_ZL20stbi__process_markerP10stbi__jpegi+0xa86>
   22eee:	66 90                	xchg   %ax,%ax
      } else if (m == 0xEE && L >= 12) { // Adobe APP14 segment
   22ef0:	81 fb ee 00 00 00    	cmp    $0xee,%ebx
   22ef6:	75 5e                	jne    22f56 <_ZL20stbi__process_markerP10stbi__jpegi+0xbf6>
   22ef8:	48 8d 1d c0 57 01 00 	lea    0x157c0(%rip),%rbx        # 386bf <_ZZL20stbi__process_markerP10stbi__jpegiE3tag_0>
         int ok = 1;
   22eff:	bd 01 00 00 00       	mov    $0x1,%ebp
               ok = 0;
   22f04:	45 31 ff             	xor    %r15d,%r15d
   22f07:	4c 8d 73 06          	lea    0x6(%rbx),%r14
      } else if (m == 0xEE && L >= 12) { // Adobe APP14 segment
   22f0b:	83 fe 0b             	cmp    $0xb,%esi
   22f0e:	7e 46                	jle    22f56 <_ZL20stbi__process_markerP10stbi__jpegi+0xbf6>
            if (stbi__get8(z->s) != tag[i])
   22f10:	49 8b 7d 00          	mov    0x0(%r13),%rdi
   22f14:	e8 87 8b ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
               ok = 0;
   22f19:	38 03                	cmp    %al,(%rbx)
   22f1b:	41 0f 45 ef          	cmovne %r15d,%ebp
         for (i=0; i < 6; ++i)
   22f1f:	48 83 c3 01          	add    $0x1,%rbx
   22f23:	4c 39 f3             	cmp    %r14,%rbx
   22f26:	75 e8                	jne    22f10 <_ZL20stbi__process_markerP10stbi__jpegi+0xbb0>
         L -= 6;
   22f28:	41 8d 74 24 f8       	lea    -0x8(%r12),%esi
         if (ok) {
   22f2d:	85 ed                	test   %ebp,%ebp
   22f2f:	75 2e                	jne    22f5f <_ZL20stbi__process_markerP10stbi__jpegi+0xbff>
      stbi__skip(z->s, L);
   22f31:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   if (n == 0) return;  // already there!
   22f35:	85 f6                	test   %esi,%esi
   22f37:	0f 84 89 fd ff ff    	je     22cc6 <_ZL20stbi__process_markerP10stbi__jpegi+0x966>
   if (n < 0) {
   22f3d:	0f 89 2b fe ff ff    	jns    22d6e <_ZL20stbi__process_markerP10stbi__jpegi+0xa0e>
      s->img_buffer = s->img_buffer_end;
   22f43:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   22f4a:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      return;
   22f51:	e9 70 fd ff ff       	jmp    22cc6 <_ZL20stbi__process_markerP10stbi__jpegi+0x966>
      stbi__skip(z->s, L);
   22f56:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   22f5a:	e9 07 fe ff ff       	jmp    22d66 <_ZL20stbi__process_markerP10stbi__jpegi+0xa06>
            stbi__get8(z->s); // version
   22f5f:	49 8b 7d 00          	mov    0x0(%r13),%rdi
   22f63:	e8 38 8b ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
            stbi__get16be(z->s); // flags0
   22f68:	49 8b 7d 00          	mov    0x0(%r13),%rdi
   22f6c:	e8 3f b3 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
            stbi__get16be(z->s); // flags1
   22f71:	49 8b 7d 00          	mov    0x0(%r13),%rdi
   22f75:	e8 36 b3 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
            z->app14_color_transform = stbi__get8(z->s); // color transform
   22f7a:	49 8b 7d 00          	mov    0x0(%r13),%rdi
   22f7e:	e8 1d 8b ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
            L -= 6;
   22f83:	41 8d 74 24 f2       	lea    -0xe(%r12),%esi
            z->app14_color_transform = stbi__get8(z->s); // color transform
   22f88:	0f b6 c0             	movzbl %al,%eax
   22f8b:	41 89 85 4c 48 00 00 	mov    %eax,0x484c(%r13)
            L -= 6;
   22f92:	eb 9d                	jmp    22f31 <_ZL20stbi__process_markerP10stbi__jpegi+0xbd1>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   22f94:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   22f98:	8b 53 34             	mov    0x34(%rbx),%edx
   22f9b:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   22f9f:	4c 89 f6             	mov    %r14,%rsi
   22fa2:	ff 53 10             	call   *0x10(%rbx)
   22fa5:	41 89 c7             	mov    %eax,%r15d
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   22fa8:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   22faf:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   22fb6:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   22fbc:	48 8d 43 39          	lea    0x39(%rbx),%rax
   if (n == 0) {
   22fc0:	45 85 ff             	test   %r15d,%r15d
   22fc3:	74 28                	je     22fed <_ZL20stbi__process_markerP10stbi__jpegi+0xc8d>
      s->img_buffer_end = s->buffer_start + n;
   22fc5:	49 63 cf             	movslq %r15d,%rcx
      return *s->img_buffer++;
   22fc8:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   22fcf:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   22fd3:	49 01 ce             	add    %rcx,%r14
   22fd6:	4c 89 b3 c8 00 00 00 	mov    %r14,0xc8(%rbx)
      stbi__skip(z->s, L);
   22fdd:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   22fe1:	e9 a3 fd ff ff       	jmp    22d89 <_ZL20stbi__process_markerP10stbi__jpegi+0xa29>
               ok = 0;
   22fe6:	31 ed                	xor    %ebp,%ebp
   22fe8:	e9 59 fd ff ff       	jmp    22d46 <_ZL20stbi__process_markerP10stbi__jpegi+0x9e6>
      s->read_from_callbacks = 0;
   22fed:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   22ff4:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   22ff8:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   22fff:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      stbi__skip(z->s, L);
   23006:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   2300a:	e9 85 fd ff ff       	jmp    22d94 <_ZL20stbi__process_markerP10stbi__jpegi+0xa34>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2300f:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   23013:	8b 53 34             	mov    0x34(%rbx),%edx
   23016:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   2301a:	4c 89 f6             	mov    %r14,%rsi
   2301d:	ff 53 10             	call   *0x10(%rbx)
   23020:	48 63 e8             	movslq %eax,%rbp
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   23023:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   2302a:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   23031:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   23037:	48 8d 43 39          	lea    0x39(%rbx),%rax
   if (n == 0) {
   2303b:	85 ed                	test   %ebp,%ebp
   2303d:	74 79                	je     230b8 <_ZL20stbi__process_markerP10stbi__jpegi+0xd58>
      s->img_buffer_end = s->buffer_start + n;
   2303f:	49 8d 0c 2e          	lea    (%r14,%rbp,1),%rcx
      return *s->img_buffer++;
   23043:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   2304a:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   2304e:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      stbi__skip(z->s, L);
   23055:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   23059:	e9 12 fe ff ff       	jmp    22e70 <_ZL20stbi__process_markerP10stbi__jpegi+0xb10>
   if (s->read_from_callbacks) {
   2305e:	8b 43 30             	mov    0x30(%rbx),%eax
   23061:	85 c0                	test   %eax,%eax
   23063:	0f 84 51 fd ff ff    	je     22dba <_ZL20stbi__process_markerP10stbi__jpegi+0xa5a>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   23069:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   2306d:	8b 53 34             	mov    0x34(%rbx),%edx
   23070:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   23074:	48 89 ee             	mov    %rbp,%rsi
   23077:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2307a:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   23081:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   23088:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   2308e:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   23092:	85 c0                	test   %eax,%eax
   23094:	75 44                	jne    230da <_ZL20stbi__process_markerP10stbi__jpegi+0xd7a>
      s->read_from_callbacks = 0;
   23096:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   2309d:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   230a1:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   230a8:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      stbi__skip(z->s, L);
   230af:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   230b3:	e9 02 fd ff ff       	jmp    22dba <_ZL20stbi__process_markerP10stbi__jpegi+0xa5a>
      s->read_from_callbacks = 0;
   230b8:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   230bf:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   230c3:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   230ca:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      stbi__skip(z->s, L);
   230d1:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   230d5:	e9 9f fd ff ff       	jmp    22e79 <_ZL20stbi__process_markerP10stbi__jpegi+0xb19>
      s->img_buffer_end = s->buffer_start + n;
   230da:	48 98                	cltq
      return *s->img_buffer++;
   230dc:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   230e3:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   230e7:	48 01 c5             	add    %rax,%rbp
   230ea:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
      stbi__skip(z->s, L);
   230f1:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   230f5:	e9 bc fc ff ff       	jmp    22db6 <_ZL20stbi__process_markerP10stbi__jpegi+0xa56>
      s->read_from_callbacks = 0;
   230fa:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   23101:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   23105:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   2310c:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      stbi__skip(z->s, L);
   23113:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   23117:	e9 2a fc ff ff       	jmp    22d46 <_ZL20stbi__process_markerP10stbi__jpegi+0x9e6>
      s->read_from_callbacks = 0;
   2311c:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   23123:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   23127:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   2312e:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      stbi__skip(z->s, L);
   23135:	49 8b 5d 00          	mov    0x0(%r13),%rbx
   23139:	e9 b3 fc ff ff       	jmp    22df1 <_ZL20stbi__process_markerP10stbi__jpegi+0xa91>
   2313e:	66 90                	xchg   %ax,%ax

0000000000023140 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0>:
static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stbi_uc *two_back)
   23140:	41 57                	push   %r15
   23142:	41 56                	push   %r14
   23144:	41 55                	push   %r13
   23146:	41 54                	push   %r12
   23148:	55                   	push   %rbp
   23149:	48 89 f5             	mov    %rsi,%rbp
   2314c:	53                   	push   %rbx
   2314d:	48 89 fb             	mov    %rdi,%rbx
   23150:	48 83 ec 58          	sub    $0x58,%rsp
   if (g->out == 0) {
   23154:	48 8b 76 08          	mov    0x8(%rsi),%rsi
   23158:	48 85 f6             	test   %rsi,%rsi
   2315b:	0f 84 77 0d 00 00    	je     23ed8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xd98>
      dispose = (g->eflags & 0x1C) >> 2;
   23161:	8b 45 30             	mov    0x30(%rbp),%eax
      pcount = g->w * g->h;
   23164:	8b 55 00             	mov    0x0(%rbp),%edx
   23167:	0f af 55 04          	imul   0x4(%rbp),%edx
      dispose = (g->eflags & 0x1C) >> 2;
   2316b:	c1 f8 02             	sar    $0x2,%eax
   2316e:	83 e0 07             	and    $0x7,%eax
      if ((dispose == 3) && (two_back == 0)) {
   23171:	83 f8 03             	cmp    $0x3,%eax
   23174:	0f 85 0e 01 00 00    	jne    23288 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x148>
   2317a:	48 85 c9             	test   %rcx,%rcx
   2317d:	0f 85 b5 00 00 00    	jne    23238 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xf8>
         for (pi = 0; pi < pcount; ++pi) {
   23183:	48 63 ca             	movslq %edx,%rcx
   23186:	31 c0                	xor    %eax,%eax
   23188:	85 d2                	test   %edx,%edx
   2318a:	7e 36                	jle    231c2 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x82>
   2318c:	0f 1f 40 00          	nopl   0x0(%rax)
            if (g->history[pi]) {
   23190:	48 8b 55 18          	mov    0x18(%rbp),%rdx
   23194:	80 3c 02 00          	cmpb   $0x0,(%rdx,%rax,1)
   23198:	74 18                	je     231b2 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x72>
               memcpy( &g->out[pi * 4], &g->background[pi * 4], 4 );
   2319a:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
   2319e:	8d 14 85 00 00 00 00 	lea    0x0(,%rax,4),%edx
   231a5:	48 63 d2             	movslq %edx,%rdx
   231a8:	8b 3c 17             	mov    (%rdi,%rdx,1),%edi
   231ab:	89 3c 16             	mov    %edi,(%rsi,%rdx,1)
      memcpy( g->background, g->out, 4 * g->w * g->h );
   231ae:	48 8b 75 08          	mov    0x8(%rbp),%rsi
         for (pi = 0; pi < pcount; ++pi) {
   231b2:	48 83 c0 01          	add    $0x1,%rax
   231b6:	48 39 c8             	cmp    %rcx,%rax
   231b9:	75 d5                	jne    23190 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x50>
      memcpy( g->background, g->out, 4 * g->w * g->h );
   231bb:	8b 55 00             	mov    0x0(%rbp),%edx
   231be:	0f af 55 04          	imul   0x4(%rbp),%edx
   231c2:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
   231c6:	c1 e2 02             	shl    $0x2,%edx
   231c9:	48 63 d2             	movslq %edx,%rdx
   231cc:	e8 3f 32 fe ff       	call   6410 <memcpy@plt>
   memset( g->history, 0x00, g->w * g->h );        // pixels that were affected previous frame
   231d1:	8b 55 04             	mov    0x4(%rbp),%edx
   231d4:	0f af 55 00          	imul   0x0(%rbp),%edx
   first_frame = 0;
   231d8:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
   231df:	00 
   memset( g->history, 0x00, g->w * g->h );        // pixels that were affected previous frame
   231e0:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
   231e4:	48 63 d2             	movslq %edx,%rdx
   231e7:	31 f6                	xor    %esi,%esi
   231e9:	e8 b2 30 fe ff       	call   62a0 <memset@plt>
   if (s->img_buffer < s->img_buffer_end)
   231ee:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   231f5:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
   231fc:	48 39 c8             	cmp    %rcx,%rax
   231ff:	0f 83 bb 00 00 00    	jae    232c0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x180>
      return *s->img_buffer++;
   23205:	48 8d 50 01          	lea    0x1(%rax),%rdx
   23209:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   23210:	0f b6 00             	movzbl (%rax),%eax
      switch (tag) {
   23213:	3c 2c                	cmp    $0x2c,%al
   23215:	0f 84 fd 00 00 00    	je     23318 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1d8>
   2321b:	3c 3b                	cmp    $0x3b,%al
   2321d:	0f 85 7d 00 00 00    	jne    232a0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x160>
   23223:	48 89 d8             	mov    %rbx,%rax
}
   23226:	48 83 c4 58          	add    $0x58,%rsp
   2322a:	5b                   	pop    %rbx
   2322b:	5d                   	pop    %rbp
   2322c:	41 5c                	pop    %r12
   2322e:	41 5d                	pop    %r13
   23230:	41 5e                	pop    %r14
   23232:	41 5f                	pop    %r15
   23234:	c3                   	ret
   23235:	0f 1f 00             	nopl   (%rax)
      if (dispose == 3) { // use previous graphic
   23238:	83 f8 03             	cmp    $0x3,%eax
   2323b:	75 4b                	jne    23288 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x148>
         for (pi = 0; pi < pcount; ++pi) {
   2323d:	85 d2                	test   %edx,%edx
   2323f:	7e 81                	jle    231c2 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x82>
   23241:	48 63 d2             	movslq %edx,%rdx
   23244:	31 c0                	xor    %eax,%eax
   23246:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2324d:	00 00 00 
            if (g->history[pi]) {
   23250:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
   23254:	80 3c 07 00          	cmpb   $0x0,(%rdi,%rax,1)
   23258:	74 16                	je     23270 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x130>
               memcpy( &g->out[pi * 4], &two_back[pi * 4], 4 );
   2325a:	8d 3c 85 00 00 00 00 	lea    0x0(,%rax,4),%edi
   23261:	48 63 ff             	movslq %edi,%rdi
   23264:	44 8b 04 39          	mov    (%rcx,%rdi,1),%r8d
   23268:	44 89 04 3e          	mov    %r8d,(%rsi,%rdi,1)
      memcpy( g->background, g->out, 4 * g->w * g->h );
   2326c:	48 8b 75 08          	mov    0x8(%rbp),%rsi
         for (pi = 0; pi < pcount; ++pi) {
   23270:	48 83 c0 01          	add    $0x1,%rax
   23274:	48 39 d0             	cmp    %rdx,%rax
   23277:	75 d7                	jne    23250 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x110>
      memcpy( g->background, g->out, 4 * g->w * g->h );
   23279:	8b 55 04             	mov    0x4(%rbp),%edx
   2327c:	0f af 55 00          	imul   0x0(%rbp),%edx
   23280:	e9 3d ff ff ff       	jmp    231c2 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x82>
   23285:	0f 1f 00             	nopl   (%rax)
      } else if (dispose == 2) {
   23288:	83 f8 02             	cmp    $0x2,%eax
   2328b:	0f 85 31 ff ff ff    	jne    231c2 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x82>
   23291:	e9 ed fe ff ff       	jmp    23183 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x43>
   23296:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2329d:	00 00 00 
      switch (tag) {
   232a0:	3c 21                	cmp    $0x21,%al
   232a2:	0f 84 38 09 00 00    	je     23be0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xaa0>
   stbi__g_failure_reason = str;
   232a8:	48 8d 05 14 4a 01 00 	lea    0x14a14(%rip),%rax        # 37cc3 <_ZSt19piecewise_construct+0x37c>
   232af:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   232b6:	ff ff 
      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header
   232b8:	31 c0                	xor    %eax,%eax
   232ba:	e9 67 ff ff ff       	jmp    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
   232bf:	90                   	nop
   if (s->read_from_callbacks) {
   232c0:	44 8b 43 30          	mov    0x30(%rbx),%r8d
   232c4:	45 85 c0             	test   %r8d,%r8d
   232c7:	74 df                	je     232a8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x168>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   232c9:	4c 8d 63 38          	lea    0x38(%rbx),%r12
   232cd:	8b 53 34             	mov    0x34(%rbx),%edx
   232d0:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   232d4:	4c 89 e6             	mov    %r12,%rsi
   232d7:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   232da:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   232e1:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   232e8:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   232ee:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   232f2:	85 c0                	test   %eax,%eax
   232f4:	0f 85 66 0d 00 00    	jne    24060 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xf20>
      s->read_from_callbacks = 0;
   232fa:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   23301:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   23305:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   2330c:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      switch (tag) {
   23313:	eb 93                	jmp    232a8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x168>
   23315:	0f 1f 00             	nopl   (%rax)
            x = stbi__get16le(s);
   23318:	48 89 df             	mov    %rbx,%rdi
   2331b:	e8 c0 b0 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
            y = stbi__get16le(s);
   23320:	48 89 df             	mov    %rbx,%rdi
            x = stbi__get16le(s);
   23323:	41 89 c6             	mov    %eax,%r14d
            y = stbi__get16le(s);
   23326:	e8 b5 b0 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
            w = stbi__get16le(s);
   2332b:	48 89 df             	mov    %rbx,%rdi
            y = stbi__get16le(s);
   2332e:	41 89 c5             	mov    %eax,%r13d
            w = stbi__get16le(s);
   23331:	e8 aa b0 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
            h = stbi__get16le(s);
   23336:	48 89 df             	mov    %rbx,%rdi
            w = stbi__get16le(s);
   23339:	41 89 c4             	mov    %eax,%r12d
            h = stbi__get16le(s);
   2333c:	e8 9f b0 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
            if (((x + w) > (g->w)) || ((y + h) > (g->h)))
   23341:	8b 75 00             	mov    0x0(%rbp),%esi
   23344:	43 8d 3c 26          	lea    (%r14,%r12,1),%edi
   23348:	39 f7                	cmp    %esi,%edi
   2334a:	0f 8f b0 09 00 00    	jg     23d00 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xbc0>
   23350:	41 8d 54 05 00       	lea    0x0(%r13,%rax,1),%edx
   23355:	3b 55 04             	cmp    0x4(%rbp),%edx
   23358:	0f 8f a2 09 00 00    	jg     23d00 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xbc0>
            g->line_size = g->w * 4;
   2335e:	c1 e6 02             	shl    $0x2,%esi
            g->start_y = y * g->line_size;
   23361:	44 89 ea             	mov    %r13d,%edx
            g->start_x = x * 4;
   23364:	42 8d 0c b5 00 00 00 	lea    0x0(,%r14,4),%ecx
   2336b:	00 
            g->start_y = y * g->line_size;
   2336c:	0f af d6             	imul   %esi,%edx
            g->max_x   = g->start_x + w * 4;
   2336f:	42 8d 3c a1          	lea    (%rcx,%r12,4),%edi
            g->start_x = x * 4;
   23373:	66 0f 6e c1          	movd   %ecx,%xmm0
            g->line_size = g->w * 4;
   23377:	89 b5 64 88 00 00    	mov    %esi,0x8864(%rbp)
            g->max_y   = g->start_y + h * g->line_size;
   2337d:	0f af c6             	imul   %esi,%eax
            g->max_x   = g->start_x + w * 4;
   23380:	66 0f 6e cf          	movd   %edi,%xmm1
            g->cur_x   = g->start_x;
   23384:	89 8d 5c 88 00 00    	mov    %ecx,0x885c(%rbp)
            g->start_x = x * 4;
   2338a:	66 0f 6e e2          	movd   %edx,%xmm4
            g->max_y   = g->start_y + h * g->line_size;
   2338e:	01 d0                	add    %edx,%eax
               g->cur_y = g->max_y;
   23390:	45 85 e4             	test   %r12d,%r12d
            g->start_x = x * 4;
   23393:	66 0f 62 c4          	punpckldq %xmm4,%xmm0
   23397:	66 0f 6e f8          	movd   %eax,%xmm7
               g->cur_y = g->max_y;
   2339b:	0f 44 d0             	cmove  %eax,%edx
            g->start_x = x * 4;
   2339e:	66 0f 62 cf          	punpckldq %xmm7,%xmm1
   233a2:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
   233a6:	89 95 60 88 00 00    	mov    %edx,0x8860(%rbp)
   if (s->img_buffer < s->img_buffer_end)
   233ac:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
            g->start_x = x * 4;
   233b3:	0f 11 85 4c 88 00 00 	movups %xmm0,0x884c(%rbp)
   if (s->img_buffer < s->img_buffer_end)
   233ba:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   233c1:	0f 83 b9 0c 00 00    	jae    24080 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xf40>
      return *s->img_buffer++;
   233c7:	48 8d 50 01          	lea    0x1(%rax),%rdx
   233cb:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   233d2:	0f b6 00             	movzbl (%rax),%eax
   233d5:	89 c7                	mov    %eax,%edi
   233d7:	89 c1                	mov    %eax,%ecx
   233d9:	89 c2                	mov    %eax,%edx
   233db:	83 e7 40             	and    $0x40,%edi
            g->lflags = stbi__get8(s);
   233de:	89 85 48 88 00 00    	mov    %eax,0x8848(%rbp)
            if (g->lflags & 0x40) {
   233e4:	40 84 ff             	test   %dil,%dil
   233e7:	0f 84 38 0f 00 00    	je     24325 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x11e5>
               g->step = 8 * g->line_size; // first interlaced spacing
   233ed:	c1 e6 03             	shl    $0x3,%esi
               g->parse = 3;
   233f0:	b8 03 00 00 00       	mov    $0x3,%eax
   233f5:	89 85 40 88 00 00    	mov    %eax,0x8840(%rbp)
   233fb:	89 b5 44 88 00 00    	mov    %esi,0x8844(%rbp)
            if (g->lflags & 0x80) {
   23401:	84 d2                	test   %dl,%dl
   23403:	0f 89 9c 0c 00 00    	jns    240a5 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xf65>
               stbi__gif_parse_colortable(s,g->lpal, 2 << (g->lflags & 7), g->eflags & 0x01 ? g->transparent : -1);
   23409:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2340e:	f6 45 30 01          	testb  $0x1,0x30(%rbp)
   23412:	0f 85 48 0d 00 00    	jne    24160 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1020>
   23418:	83 e1 07             	and    $0x7,%ecx
   2341b:	4c 8d a5 34 04 00 00 	lea    0x434(%rbp),%r12
   23422:	ba 02 00 00 00       	mov    $0x2,%edx
   23427:	48 89 df             	mov    %rbx,%rdi
   2342a:	d3 e2                	shl    %cl,%edx
   2342c:	4c 89 e6             	mov    %r12,%rsi
   2342f:	89 c1                	mov    %eax,%ecx
   23431:	e8 da 3b ff ff       	call   17010 <_ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii>
               g->color_table = (stbi_uc *) g->lpal;
   23436:	4c 89 a5 38 88 00 00 	mov    %r12,0x8838(%rbp)
   if (s->img_buffer < s->img_buffer_end)
   2343d:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   23444:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   2344b:	0f 83 7f 0c 00 00    	jae    240d0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xf90>
      return *s->img_buffer++;
   23451:	48 8d 50 01          	lea    0x1(%rax),%rdx
   23455:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   2345c:	0f b6 08             	movzbl (%rax),%ecx
   if (lzw_cs > 12) return NULL;
   2345f:	80 f9 0c             	cmp    $0xc,%cl
   23462:	0f 87 50 fe ff ff    	ja     232b8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x178>
   clear = 1 << lzw_cs;
   23468:	0f b6 d1             	movzbl %cl,%edx
   2346b:	b8 01 00 00 00       	mov    $0x1,%eax
   codesize = lzw_cs + 1;
   23470:	8d 7a 01             	lea    0x1(%rdx),%edi
   clear = 1 << lzw_cs;
   23473:	89 c6                	mov    %eax,%esi
   23475:	d3 e6                	shl    %cl,%esi
   codemask = (1 << codesize) - 1;
   23477:	89 f9                	mov    %edi,%ecx
   codesize = lzw_cs + 1;
   23479:	89 7c 24 20          	mov    %edi,0x20(%rsp)
   codemask = (1 << codesize) - 1;
   2347d:	d3 e0                	shl    %cl,%eax
   clear = 1 << lzw_cs;
   2347f:	89 74 24 08          	mov    %esi,0x8(%rsp)
   codemask = (1 << codesize) - 1;
   23483:	89 f7                	mov    %esi,%edi
   23485:	83 e8 01             	sub    $0x1,%eax
   23488:	89 44 24 24          	mov    %eax,0x24(%rsp)
   avail = clear+2;
   2348c:	8d 46 02             	lea    0x2(%rsi),%eax
   2348f:	89 44 24 30          	mov    %eax,0x30(%rsp)
   23493:	8d 46 ff             	lea    -0x1(%rsi),%eax
   23496:	83 f8 0e             	cmp    $0xe,%eax
   23499:	0f 86 84 0f 00 00    	jbe    24423 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x12e3>
   2349f:	c1 ef 04             	shr    $0x4,%edi
   234a2:	48 89 e8             	mov    %rbp,%rax
   234a5:	66 0f 6f 25 23 55 01 	movdqa 0x15523(%rip),%xmm4        # 389d0 <_ZL11stbi__bmask+0x250>
   234ac:	00 
   234ad:	66 44 0f 6f 25 2a 55 	movdqa 0x1552a(%rip),%xmm12        # 389e0 <_ZL11stbi__bmask+0x260>
   234b4:	01 00 
   234b6:	89 fa                	mov    %edi,%edx
   234b8:	66 44 0f 6f 1d 2f 55 	movdqa 0x1552f(%rip),%xmm11        # 389f0 <_ZL11stbi__bmask+0x270>
   234bf:	01 00 
   234c1:	66 44 0f 6f 15 36 55 	movdqa 0x15536(%rip),%xmm10        # 38a00 <_ZL11stbi__bmask+0x280>
   234c8:	01 00 
   234ca:	48 c1 e2 06          	shl    $0x6,%rdx
   234ce:	66 44 0f 6f 0d 39 55 	movdqa 0x15539(%rip),%xmm9        # 38a10 <_ZL11stbi__bmask+0x290>
   234d5:	01 00 
   234d7:	66 0f 6f 1d 31 53 01 	movdqa 0x15331(%rip),%xmm3        # 38810 <_ZL11stbi__bmask+0x90>
   234de:	00 
   234df:	66 44 0f 6f 05 38 55 	movdqa 0x15538(%rip),%xmm8        # 38a20 <_ZL11stbi__bmask+0x2a0>
   234e6:	01 00 
   234e8:	66 0f 6f 3d 40 55 01 	movdqa 0x15540(%rip),%xmm7        # 38a30 <_ZL11stbi__bmask+0x2b0>
   234ef:	00 
   234f0:	48 01 ea             	add    %rbp,%rdx
   234f3:	66 0f 6f 35 45 55 01 	movdqa 0x15545(%rip),%xmm6        # 38a40 <_ZL11stbi__bmask+0x2c0>
   234fa:	00 
   234fb:	66 0f 6f 2d 4d 55 01 	movdqa 0x1554d(%rip),%xmm5        # 38a50 <_ZL11stbi__bmask+0x2d0>
   23502:	00 
   23503:	66 0f 6f cc          	movdqa %xmm4,%xmm1
      g->codes[init_code].prefix = -1;
   23507:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   2350c:	48 83 c0 40          	add    $0x40,%rax
   23510:	41 bb ff ff ff ff    	mov    $0xffffffff,%r11d
      g->codes[init_code].first = (stbi_uc) init_code;
   23516:	66 44 0f 6f e9       	movdqa %xmm1,%xmm13
   2351b:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   2351f:	66 0f 6f c1          	movdqa %xmm1,%xmm0
      g->codes[init_code].prefix = -1;
   23523:	66 89 88 08 08 00 00 	mov    %cx,0x808(%rax)
      g->codes[init_code].first = (stbi_uc) init_code;
   2352a:	66 45 0f fe eb       	paddd  %xmm11,%xmm13
      g->codes[init_code].prefix = -1;
   2352f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   23534:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
   2353a:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
      g->codes[init_code].first = (stbi_uc) init_code;
   23540:	66 41 0f 61 d5       	punpcklwd %xmm13,%xmm2
   23545:	66 41 0f 69 c5       	punpckhwd %xmm13,%xmm0
      g->codes[init_code].prefix = -1;
   2354a:	66 89 88 30 08 00 00 	mov    %cx,0x830(%rax)
   23551:	41 be ff ff ff ff    	mov    $0xffffffff,%r14d
      g->codes[init_code].first = (stbi_uc) init_code;
   23557:	66 44 0f 6f ea       	movdqa %xmm2,%xmm13
   2355c:	66 0f 61 d0          	punpcklwd %xmm0,%xmm2
      g->codes[init_code].prefix = -1;
   23560:	41 bf ff ff ff ff    	mov    $0xffffffff,%r15d
   23566:	66 44 89 98 f4 07 00 	mov    %r11w,0x7f4(%rax)
   2356d:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   2356e:	66 44 0f 69 e8       	punpckhwd %xmm0,%xmm13
   23573:	66 0f 6f c1          	movdqa %xmm1,%xmm0
      g->codes[init_code].prefix = -1;
   23577:	66 44 89 a0 f8 07 00 	mov    %r12w,0x7f8(%rax)
   2357e:	00 
   2357f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
      g->codes[init_code].first = (stbi_uc) init_code;
   23584:	66 41 0f 61 d5       	punpcklwd %xmm13,%xmm2
   23589:	66 44 0f 6f e9       	movdqa %xmm1,%xmm13
   2358e:	66 41 0f fe c2       	paddd  %xmm10,%xmm0
      g->codes[init_code].prefix = -1;
   23593:	66 44 89 a8 fc 07 00 	mov    %r13w,0x7fc(%rax)
   2359a:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   2359b:	66 45 0f fe e9       	paddd  %xmm9,%xmm13
   235a0:	66 44 0f 6f f0       	movdqa %xmm0,%xmm14
   235a5:	66 0f db d3          	pand   %xmm3,%xmm2
      g->codes[init_code].prefix = -1;
   235a9:	66 44 89 b0 00 08 00 	mov    %r14w,0x800(%rax)
   235b0:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   235b1:	66 41 0f 61 c5       	punpcklwd %xmm13,%xmm0
   235b6:	66 45 0f 69 f5       	punpckhwd %xmm13,%xmm14
      g->codes[init_code].prefix = -1;
   235bb:	66 44 89 b8 04 08 00 	mov    %r15w,0x804(%rax)
   235c2:	00 
   235c3:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
      g->codes[init_code].first = (stbi_uc) init_code;
   235c9:	66 44 0f 6f e8       	movdqa %xmm0,%xmm13
   235ce:	66 41 0f 61 c6       	punpcklwd %xmm14,%xmm0
      g->codes[init_code].prefix = -1;
   235d3:	41 b9 ff ff ff ff    	mov    $0xffffffff,%r9d
   235d9:	41 ba ff ff ff ff    	mov    $0xffffffff,%r10d
      g->codes[init_code].first = (stbi_uc) init_code;
   235df:	66 45 0f 69 ee       	punpckhwd %xmm14,%xmm13
      g->codes[init_code].prefix = -1;
   235e4:	41 bb ff ff ff ff    	mov    $0xffffffff,%r11d
   235ea:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
   235f0:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
      g->codes[init_code].first = (stbi_uc) init_code;
   235f6:	66 41 0f 61 c5       	punpcklwd %xmm13,%xmm0
   235fb:	66 44 0f 6f e9       	movdqa %xmm1,%xmm13
      g->codes[init_code].prefix = -1;
   23600:	41 be ff ff ff ff    	mov    $0xffffffff,%r14d
   23606:	41 bf ff ff ff ff    	mov    $0xffffffff,%r15d
      g->codes[init_code].first = (stbi_uc) init_code;
   2360c:	66 0f db c3          	pand   %xmm3,%xmm0
   23610:	66 44 0f fe ef       	paddd  %xmm7,%xmm13
      g->codes[init_code].prefix = -1;
   23615:	66 89 b8 0c 08 00 00 	mov    %di,0x80c(%rax)
   2361c:	66 41 0f fe e4       	paddd  %xmm12,%xmm4
      g->codes[init_code].first = (stbi_uc) init_code;
   23621:	66 0f 67 d0          	packuswb %xmm0,%xmm2
   23625:	66 0f 6f c1          	movdqa %xmm1,%xmm0
      g->codes[init_code].prefix = -1;
   23629:	66 44 89 80 10 08 00 	mov    %r8w,0x810(%rax)
   23630:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   23631:	66 41 0f fe c0       	paddd  %xmm8,%xmm0
   23636:	66 0f c5 ca 00       	pextrw $0x0,%xmm2,%ecx
      g->codes[init_code].prefix = -1;
   2363b:	66 44 89 88 14 08 00 	mov    %r9w,0x814(%rax)
   23642:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   23643:	66 44 0f 6f f0       	movdqa %xmm0,%xmm14
   23648:	66 41 0f 61 c5       	punpcklwd %xmm13,%xmm0
   2364d:	66 89 88 f6 07 00 00 	mov    %cx,0x7f6(%rax)
   23654:	66 0f c5 ca 01       	pextrw $0x1,%xmm2,%ecx
   23659:	66 45 0f 69 f5       	punpckhwd %xmm13,%xmm14
   2365e:	66 44 0f 6f e8       	movdqa %xmm0,%xmm13
   23663:	66 89 88 fa 07 00 00 	mov    %cx,0x7fa(%rax)
   2366a:	66 0f c5 ca 02       	pextrw $0x2,%xmm2,%ecx
   2366f:	66 45 0f 69 ee       	punpckhwd %xmm14,%xmm13
   23674:	66 41 0f 61 c6       	punpcklwd %xmm14,%xmm0
   23679:	66 89 88 fe 07 00 00 	mov    %cx,0x7fe(%rax)
   23680:	66 0f c5 ca 03       	pextrw $0x3,%xmm2,%ecx
   23685:	66 41 0f 61 c5       	punpcklwd %xmm13,%xmm0
   2368a:	66 44 0f 6f e9       	movdqa %xmm1,%xmm13
   2368f:	66 0f fe cd          	paddd  %xmm5,%xmm1
   23693:	66 89 88 02 08 00 00 	mov    %cx,0x802(%rax)
   2369a:	66 44 0f fe ee       	paddd  %xmm6,%xmm13
   2369f:	66 0f c5 ca 04       	pextrw $0x4,%xmm2,%ecx
   236a4:	66 0f db c3          	pand   %xmm3,%xmm0
      g->codes[init_code].prefix = -1;
   236a8:	66 44 89 90 18 08 00 	mov    %r10w,0x818(%rax)
   236af:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   236b0:	66 45 0f 6f f5       	movdqa %xmm13,%xmm14
   236b5:	66 44 0f 61 e9       	punpcklwd %xmm1,%xmm13
   236ba:	66 89 88 06 08 00 00 	mov    %cx,0x806(%rax)
   236c1:	66 0f c5 ca 05       	pextrw $0x5,%xmm2,%ecx
   236c6:	66 44 0f 69 f1       	punpckhwd %xmm1,%xmm14
   236cb:	66 41 0f 6f cd       	movdqa %xmm13,%xmm1
   236d0:	66 89 88 0a 08 00 00 	mov    %cx,0x80a(%rax)
   236d7:	66 0f c5 ca 06       	pextrw $0x6,%xmm2,%ecx
   236dc:	66 41 0f 69 ce       	punpckhwd %xmm14,%xmm1
   236e1:	66 45 0f 61 ee       	punpcklwd %xmm14,%xmm13
   236e6:	66 89 88 0e 08 00 00 	mov    %cx,0x80e(%rax)
   236ed:	66 0f c5 ca 07       	pextrw $0x7,%xmm2,%ecx
   236f2:	66 44 0f 61 e9       	punpcklwd %xmm1,%xmm13
   236f7:	66 89 88 12 08 00 00 	mov    %cx,0x812(%rax)
   236fe:	66 41 0f 6f cd       	movdqa %xmm13,%xmm1
      g->codes[init_code].prefix = -1;
   23703:	66 44 89 98 1c 08 00 	mov    %r11w,0x81c(%rax)
   2370a:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   2370b:	66 0f db cb          	pand   %xmm3,%xmm1
      g->codes[init_code].prefix = -1;
   2370f:	66 44 89 a0 20 08 00 	mov    %r12w,0x820(%rax)
   23716:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   23717:	66 0f 67 c1          	packuswb %xmm1,%xmm0
      g->codes[init_code].prefix = -1;
   2371b:	66 44 89 a8 24 08 00 	mov    %r13w,0x824(%rax)
   23722:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   23723:	66 0f c5 c8 00       	pextrw $0x0,%xmm0,%ecx
      g->codes[init_code].prefix = -1;
   23728:	66 44 89 b0 28 08 00 	mov    %r14w,0x828(%rax)
   2372f:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   23730:	66 89 88 16 08 00 00 	mov    %cx,0x816(%rax)
   23737:	66 0f c5 c8 01       	pextrw $0x1,%xmm0,%ecx
   2373c:	66 89 88 1a 08 00 00 	mov    %cx,0x81a(%rax)
   23743:	66 0f c5 c8 02       	pextrw $0x2,%xmm0,%ecx
   23748:	66 89 88 1e 08 00 00 	mov    %cx,0x81e(%rax)
   2374f:	66 0f c5 c8 03       	pextrw $0x3,%xmm0,%ecx
   23754:	66 89 88 22 08 00 00 	mov    %cx,0x822(%rax)
   2375b:	66 0f c5 c8 04       	pextrw $0x4,%xmm0,%ecx
   23760:	66 89 88 26 08 00 00 	mov    %cx,0x826(%rax)
   23767:	66 0f c5 c8 05       	pextrw $0x5,%xmm0,%ecx
   2376c:	66 89 88 2a 08 00 00 	mov    %cx,0x82a(%rax)
   23773:	66 0f c5 c8 06       	pextrw $0x6,%xmm0,%ecx
   23778:	66 89 88 2e 08 00 00 	mov    %cx,0x82e(%rax)
   2377f:	66 0f c5 c8 07       	pextrw $0x7,%xmm0,%ecx
      g->codes[init_code].prefix = -1;
   23784:	66 44 89 b8 2c 08 00 	mov    %r15w,0x82c(%rax)
   2378b:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   2378c:	66 89 88 32 08 00 00 	mov    %cx,0x832(%rax)
   for (init_code = 0; init_code < clear; init_code++) {
   23793:	48 39 d0             	cmp    %rdx,%rax
   23796:	0f 85 67 fd ff ff    	jne    23503 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x3c3>
   2379c:	8b 7c 24 08          	mov    0x8(%rsp),%edi
   237a0:	89 f8                	mov    %edi,%eax
   237a2:	83 e0 f0             	and    $0xfffffff0,%eax
   237a5:	89 c1                	mov    %eax,%ecx
   237a7:	39 c7                	cmp    %eax,%edi
   237a9:	0f 84 d1 02 00 00    	je     23a80 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x940>
   237af:	29 ce                	sub    %ecx,%esi
   237b1:	8d 56 ff             	lea    -0x1(%rsi),%edx
   237b4:	83 fa 06             	cmp    $0x6,%edx
   237b7:	0f 86 9d 01 00 00    	jbe    2395a <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x81a>
   237bd:	8d 78 01             	lea    0x1(%rax),%edi
      g->codes[init_code].first = (stbi_uc) init_code;
   237c0:	66 0f 6e f8          	movd   %eax,%xmm7
   237c4:	44 8d 48 07          	lea    0x7(%rax),%r9d
   237c8:	48 c1 e1 02          	shl    $0x2,%rcx
   237cc:	66 0f 6e f7          	movd   %edi,%xmm6
   237d0:	8d 78 02             	lea    0x2(%rax),%edi
   237d3:	66 0f 70 d7 e0       	pshufd $0xe0,%xmm7,%xmm2
      g->codes[init_code].prefix = -1;
   237d8:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
   237de:	66 0f 6e cf          	movd   %edi,%xmm1
   237e2:	8d 78 03             	lea    0x3(%rax),%edi
      g->codes[init_code].first = (stbi_uc) init_code;
   237e5:	66 0f 70 f6 e0       	pshufd $0xe0,%xmm6,%xmm6
      g->codes[init_code].prefix = -1;
   237ea:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
   237f0:	66 0f 6e df          	movd   %edi,%xmm3
      g->codes[init_code].first = (stbi_uc) init_code;
   237f4:	66 0f 6f fa          	movdqa %xmm2,%xmm7
   237f8:	66 0f 70 c9 e0       	pshufd $0xe0,%xmm1,%xmm1
      g->codes[init_code].prefix = -1;
   237fd:	41 be ff ff ff ff    	mov    $0xffffffff,%r14d
      g->codes[init_code].first = (stbi_uc) init_code;
   23803:	66 0f 70 db e0       	pshufd $0xe0,%xmm3,%xmm3
   23808:	66 0f 61 fe          	punpcklwd %xmm6,%xmm7
   2380c:	8d 78 04             	lea    0x4(%rax),%edi
      g->codes[init_code].prefix = -1;
   2380f:	41 bf ff ff ff ff    	mov    $0xffffffff,%r15d
      g->codes[init_code].first = (stbi_uc) init_code;
   23815:	66 0f 61 d6          	punpcklwd %xmm6,%xmm2
   23819:	66 0f 6f f1          	movdqa %xmm1,%xmm6
   2381d:	66 0f 70 ff 4e       	pshufd $0x4e,%xmm7,%xmm7
      g->codes[init_code].prefix = -1;
   23822:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
      g->codes[init_code].first = (stbi_uc) init_code;
   23828:	66 0f 61 f3          	punpcklwd %xmm3,%xmm6
   2382c:	66 0f 61 cb          	punpcklwd %xmm3,%xmm1
   23830:	66 0f 6e c7          	movd   %edi,%xmm0
   23834:	f3 0f 7e 1d d4 4f 01 	movq   0x14fd4(%rip),%xmm3        # 38810 <_ZL11stbi__bmask+0x90>
   2383b:	00 
   2383c:	66 0f 70 f6 4e       	pshufd $0x4e,%xmm6,%xmm6
   23841:	8d 78 05             	lea    0x5(%rax),%edi
   23844:	66 0f 61 d7          	punpcklwd %xmm7,%xmm2
      g->codes[init_code].prefix = -1;
   23848:	41 ba ff ff ff ff    	mov    $0xffffffff,%r10d
      g->codes[init_code].first = (stbi_uc) init_code;
   2384e:	66 0f 61 ce          	punpcklwd %xmm6,%xmm1
   23852:	66 0f 6e ef          	movd   %edi,%xmm5
   23856:	66 0f db d3          	pand   %xmm3,%xmm2
   2385a:	66 0f db cb          	pand   %xmm3,%xmm1
   2385e:	66 0f 70 c0 e0       	pshufd $0xe0,%xmm0,%xmm0
   23863:	66 0f 70 ed e0       	pshufd $0xe0,%xmm5,%xmm5
   23868:	66 0f 67 d1          	packuswb %xmm1,%xmm2
   2386c:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   23870:	8d 78 06             	lea    0x6(%rax),%edi
   23873:	66 0f 61 cd          	punpcklwd %xmm5,%xmm1
   23877:	66 0f 61 c5          	punpcklwd %xmm5,%xmm0
   2387b:	66 0f 6e ff          	movd   %edi,%xmm7
      g->codes[init_code].prefix = -1;
   2387f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
      g->codes[init_code].first = (stbi_uc) init_code;
   23884:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   23889:	66 41 0f 6e e1       	movd   %r9d,%xmm4
   2388e:	66 0f 70 d2 08       	pshufd $0x8,%xmm2,%xmm2
      g->codes[init_code].prefix = -1;
   23893:	41 b9 ff ff ff ff    	mov    $0xffffffff,%r9d
      g->codes[init_code].first = (stbi_uc) init_code;
   23899:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
   2389d:	66 0f 70 cf e0       	pshufd $0xe0,%xmm7,%xmm1
   238a2:	66 0f 70 e4 e0       	pshufd $0xe0,%xmm4,%xmm4
   238a7:	66 0f 6f e9          	movdqa %xmm1,%xmm5
   238ab:	48 8d 94 0d 36 08 00 	lea    0x836(%rbp,%rcx,1),%rdx
   238b2:	00 
   238b3:	66 0f 61 cc          	punpcklwd %xmm4,%xmm1
   238b7:	66 0f 61 ec          	punpcklwd %xmm4,%xmm5
   238bb:	48 8d 8c 0d 34 08 00 	lea    0x834(%rbp,%rcx,1),%rcx
   238c2:	00 
   238c3:	66 0f db c3          	pand   %xmm3,%xmm0
   238c7:	66 0f 70 ed 4e       	pshufd $0x4e,%xmm5,%xmm5
      g->codes[init_code].prefix = -1;
   238cc:	66 44 89 21          	mov    %r12w,(%rcx)
   238d0:	66 44 89 69 04       	mov    %r13w,0x4(%rcx)
      g->codes[init_code].first = (stbi_uc) init_code;
   238d5:	66 0f 61 cd          	punpcklwd %xmm5,%xmm1
      g->codes[init_code].prefix = -1;
   238d9:	66 44 89 71 08       	mov    %r14w,0x8(%rcx)
      g->codes[init_code].first = (stbi_uc) init_code;
   238de:	66 0f db d9          	pand   %xmm1,%xmm3
      g->codes[init_code].prefix = -1;
   238e2:	66 44 89 79 0c       	mov    %r15w,0xc(%rcx)
      g->codes[init_code].first = (stbi_uc) init_code;
   238e7:	66 0f 67 c3          	packuswb %xmm3,%xmm0
      g->codes[init_code].prefix = -1;
   238eb:	66 89 79 10          	mov    %di,0x10(%rcx)
      g->codes[init_code].first = (stbi_uc) init_code;
   238ef:	66 0f 70 c0 08       	pshufd $0x8,%xmm0,%xmm0
      g->codes[init_code].prefix = -1;
   238f4:	66 44 89 41 14       	mov    %r8w,0x14(%rcx)
   238f9:	66 44 89 49 18       	mov    %r9w,0x18(%rcx)
   238fe:	66 44 89 51 1c       	mov    %r10w,0x1c(%rcx)
      g->codes[init_code].first = (stbi_uc) init_code;
   23903:	66 0f c5 ca 00       	pextrw $0x0,%xmm2,%ecx
   23908:	66 89 0a             	mov    %cx,(%rdx)
   2390b:	66 0f c5 ca 01       	pextrw $0x1,%xmm2,%ecx
   23910:	66 89 4a 04          	mov    %cx,0x4(%rdx)
   23914:	66 0f c5 ca 02       	pextrw $0x2,%xmm2,%ecx
   23919:	66 89 4a 08          	mov    %cx,0x8(%rdx)
   2391d:	66 0f c5 ca 03       	pextrw $0x3,%xmm2,%ecx
   23922:	66 89 4a 0c          	mov    %cx,0xc(%rdx)
   23926:	66 0f c5 c8 00       	pextrw $0x0,%xmm0,%ecx
   2392b:	66 89 4a 10          	mov    %cx,0x10(%rdx)
   2392f:	66 0f c5 c8 01       	pextrw $0x1,%xmm0,%ecx
   23934:	66 89 4a 14          	mov    %cx,0x14(%rdx)
   23938:	66 0f c5 c8 02       	pextrw $0x2,%xmm0,%ecx
   2393d:	66 89 4a 18          	mov    %cx,0x18(%rdx)
   23941:	66 0f c5 c8 03       	pextrw $0x3,%xmm0,%ecx
   23946:	66 89 4a 1c          	mov    %cx,0x1c(%rdx)
   for (init_code = 0; init_code < clear; init_code++) {
   2394a:	89 f2                	mov    %esi,%edx
   2394c:	83 e2 f8             	and    $0xfffffff8,%edx
   2394f:	01 d0                	add    %edx,%eax
   23951:	83 e6 07             	and    $0x7,%esi
   23954:	0f 84 26 01 00 00    	je     23a80 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x940>
      g->codes[init_code].prefix = -1;
   2395a:	48 63 f0             	movslq %eax,%rsi
      g->codes[init_code].first = (stbi_uc) init_code;
   2395d:	0f b6 d0             	movzbl %al,%edx
      g->codes[init_code].prefix = -1;
   23960:	41 bb ff ff ff ff    	mov    $0xffffffff,%r11d
   for (init_code = 0; init_code < clear; init_code++) {
   23966:	44 8b 4c 24 08       	mov    0x8(%rsp),%r9d
      g->codes[init_code].first = (stbi_uc) init_code;
   2396b:	88 c6                	mov    %al,%dh
   2396d:	4c 8d 7c b5 00       	lea    0x0(%rbp,%rsi,4),%r15
      g->codes[init_code].prefix = -1;
   23972:	66 45 89 9f 34 08 00 	mov    %r11w,0x834(%r15)
   23979:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   2397a:	66 89 94 b5 36 08 00 	mov    %dx,0x836(%rbp,%rsi,4)
   23981:	00 
   for (init_code = 0; init_code < clear; init_code++) {
   23982:	8d 50 01             	lea    0x1(%rax),%edx
   23985:	44 39 ca             	cmp    %r9d,%edx
   23988:	0f 8d f2 00 00 00    	jge    23a80 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x940>
      g->codes[init_code].first = (stbi_uc) init_code;
   2398e:	0f b6 f2             	movzbl %dl,%esi
   23991:	48 63 fa             	movslq %edx,%rdi
      g->codes[init_code].prefix = -1;
   23994:	41 ba ff ff ff ff    	mov    $0xffffffff,%r10d
      g->codes[init_code].first = (stbi_uc) init_code;
   2399a:	89 f1                	mov    %esi,%ecx
      g->codes[init_code].prefix = -1;
   2399c:	66 45 89 97 38 08 00 	mov    %r10w,0x838(%r15)
   239a3:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   239a4:	88 d5                	mov    %dl,%ch
   for (init_code = 0; init_code < clear; init_code++) {
   239a6:	8d 50 02             	lea    0x2(%rax),%edx
      g->codes[init_code].first = (stbi_uc) init_code;
   239a9:	66 89 8c bd 36 08 00 	mov    %cx,0x836(%rbp,%rdi,4)
   239b0:	00 
   for (init_code = 0; init_code < clear; init_code++) {
   239b1:	44 39 ca             	cmp    %r9d,%edx
   239b4:	0f 8d c6 00 00 00    	jge    23a80 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x940>
      g->codes[init_code].first = (stbi_uc) init_code;
   239ba:	0f b6 f2             	movzbl %dl,%esi
   239bd:	48 63 fa             	movslq %edx,%rdi
      g->codes[init_code].prefix = -1;
   239c0:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
      g->codes[init_code].first = (stbi_uc) init_code;
   239c6:	89 f1                	mov    %esi,%ecx
      g->codes[init_code].prefix = -1;
   239c8:	66 45 89 87 3c 08 00 	mov    %r8w,0x83c(%r15)
   239cf:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   239d0:	88 d5                	mov    %dl,%ch
   for (init_code = 0; init_code < clear; init_code++) {
   239d2:	8d 50 03             	lea    0x3(%rax),%edx
      g->codes[init_code].first = (stbi_uc) init_code;
   239d5:	66 89 8c bd 36 08 00 	mov    %cx,0x836(%rbp,%rdi,4)
   239dc:	00 
   for (init_code = 0; init_code < clear; init_code++) {
   239dd:	44 39 ca             	cmp    %r9d,%edx
   239e0:	0f 8d 9a 00 00 00    	jge    23a80 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x940>
      g->codes[init_code].first = (stbi_uc) init_code;
   239e6:	0f b6 f2             	movzbl %dl,%esi
      g->codes[init_code].prefix = -1;
   239e9:	bf ff ff ff ff       	mov    $0xffffffff,%edi
      g->codes[init_code].first = (stbi_uc) init_code;
   239ee:	89 f1                	mov    %esi,%ecx
      g->codes[init_code].prefix = -1;
   239f0:	66 41 89 bf 40 08 00 	mov    %di,0x840(%r15)
   239f7:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   239f8:	48 63 fa             	movslq %edx,%rdi
   239fb:	88 d5                	mov    %dl,%ch
   for (init_code = 0; init_code < clear; init_code++) {
   239fd:	8d 50 04             	lea    0x4(%rax),%edx
      g->codes[init_code].first = (stbi_uc) init_code;
   23a00:	66 89 8c bd 36 08 00 	mov    %cx,0x836(%rbp,%rdi,4)
   23a07:	00 
   for (init_code = 0; init_code < clear; init_code++) {
   23a08:	44 39 ca             	cmp    %r9d,%edx
   23a0b:	7d 73                	jge    23a80 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x940>
      g->codes[init_code].prefix = -1;
   23a0d:	be ff ff ff ff       	mov    $0xffffffff,%esi
      g->codes[init_code].first = (stbi_uc) init_code;
   23a12:	48 63 fa             	movslq %edx,%rdi
      g->codes[init_code].prefix = -1;
   23a15:	66 41 89 b7 44 08 00 	mov    %si,0x844(%r15)
   23a1c:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   23a1d:	0f b6 f2             	movzbl %dl,%esi
   23a20:	89 f1                	mov    %esi,%ecx
   23a22:	88 d5                	mov    %dl,%ch
   for (init_code = 0; init_code < clear; init_code++) {
   23a24:	8d 50 05             	lea    0x5(%rax),%edx
      g->codes[init_code].first = (stbi_uc) init_code;
   23a27:	66 89 8c bd 36 08 00 	mov    %cx,0x836(%rbp,%rdi,4)
   23a2e:	00 
   for (init_code = 0; init_code < clear; init_code++) {
   23a2f:	44 39 ca             	cmp    %r9d,%edx
   23a32:	7d 4c                	jge    23a80 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x940>
      g->codes[init_code].prefix = -1;
   23a34:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
      g->codes[init_code].first = (stbi_uc) init_code;
   23a39:	0f b6 f2             	movzbl %dl,%esi
   23a3c:	48 63 fa             	movslq %edx,%rdi
   for (init_code = 0; init_code < clear; init_code++) {
   23a3f:	83 c0 06             	add    $0x6,%eax
      g->codes[init_code].prefix = -1;
   23a42:	66 41 89 8f 48 08 00 	mov    %cx,0x848(%r15)
   23a49:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   23a4a:	89 f1                	mov    %esi,%ecx
   23a4c:	88 d5                	mov    %dl,%ch
   23a4e:	66 89 8c bd 36 08 00 	mov    %cx,0x836(%rbp,%rdi,4)
   23a55:	00 
   for (init_code = 0; init_code < clear; init_code++) {
   23a56:	44 39 c8             	cmp    %r9d,%eax
   23a59:	7d 25                	jge    23a80 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x940>
      g->codes[init_code].prefix = -1;
   23a5b:	ba ff ff ff ff       	mov    $0xffffffff,%edx
      g->codes[init_code].first = (stbi_uc) init_code;
   23a60:	48 63 c8             	movslq %eax,%rcx
      g->codes[init_code].prefix = -1;
   23a63:	66 41 89 97 4c 08 00 	mov    %dx,0x84c(%r15)
   23a6a:	00 
      g->codes[init_code].first = (stbi_uc) init_code;
   23a6b:	0f b6 d0             	movzbl %al,%edx
   23a6e:	88 c6                	mov    %al,%dh
   23a70:	66 89 94 8d 36 08 00 	mov    %dx,0x836(%rbp,%rcx,4)
   23a77:	00 
   for (init_code = 0; init_code < clear; init_code++) {
   23a78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   23a7f:	00 
         } else if (code == clear + 1) { // end of stream code
   23a80:	8b 44 24 08          	mov    0x8(%rsp),%eax
   23a84:	44 8b 4c 24 30       	mov    0x30(%rsp),%r9d
   valid_bits = 0;
   23a89:	45 31 e4             	xor    %r12d,%r12d
   bits = 0;
   23a8c:	45 31 ff             	xor    %r15d,%r15d
   first = 1;
   23a8f:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%rsp)
   23a96:	00 
   23a97:	44 8b 5c 24 24       	mov    0x24(%rsp),%r11d
   len = 0;
   23a9c:	45 31 f6             	xor    %r14d,%r14d
   oldcode = -1;
   23a9f:	49 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%r10
         } else if (code == clear + 1) { // end of stream code
   23aa6:	83 c0 01             	add    $0x1,%eax
   23aa9:	44 8b 6c 24 20       	mov    0x20(%rsp),%r13d
   23aae:	89 44 24 18          	mov    %eax,0x18(%rsp)
      s->img_buffer_end = s->buffer_start+1;
   23ab2:	48 8d 43 39          	lea    0x39(%rbx),%rax
   23ab6:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   23abb:	48 89 e8             	mov    %rbp,%rax
   23abe:	49 63 e9             	movslq %r9d,%rbp
   23ac1:	49 89 c1             	mov    %rax,%r9
   23ac4:	0f 1f 40 00          	nopl   0x0(%rax)
      if (valid_bits < codesize) {
   23ac8:	45 39 e5             	cmp    %r12d,%r13d
   23acb:	7e 67                	jle    23b34 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x9f4>
   if (s->img_buffer < s->img_buffer_end)
   23acd:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   23ad4:	48 8b 93 c8 00 00 00 	mov    0xc8(%rbx),%rdx
         if (len == 0) {
   23adb:	45 85 f6             	test   %r14d,%r14d
   23ade:	75 24                	jne    23b04 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x9c4>
   if (s->img_buffer < s->img_buffer_end)
   23ae0:	48 39 d0             	cmp    %rdx,%rax
   23ae3:	0f 83 17 03 00 00    	jae    23e00 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xcc0>
      return *s->img_buffer++;
   23ae9:	48 8d 50 01          	lea    0x1(%rax),%rdx
   23aed:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   23af4:	44 0f b6 30          	movzbl (%rax),%r14d
   23af8:	48 89 d0             	mov    %rdx,%rax
            if (len == 0)
   23afb:	45 85 f6             	test   %r14d,%r14d
   23afe:	0f 84 07 03 00 00    	je     23e0b <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xccb>
         --len;
   23b04:	41 83 ee 01          	sub    $0x1,%r14d
   if (s->img_buffer < s->img_buffer_end)
   23b08:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   23b0f:	0f 83 0b 02 00 00    	jae    23d20 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xbe0>
      return *s->img_buffer++;
   23b15:	48 8d 50 01          	lea    0x1(%rax),%rdx
         bits |= (stbi__int32) stbi__get8(s) << valid_bits;
   23b19:	44 89 e1             	mov    %r12d,%ecx
      return *s->img_buffer++;
   23b1c:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
         bits |= (stbi__int32) stbi__get8(s) << valid_bits;
   23b23:	0f b6 00             	movzbl (%rax),%eax
   23b26:	d3 e0                	shl    %cl,%eax
   23b28:	41 09 c7             	or     %eax,%r15d
         valid_bits += 8;
   23b2b:	41 83 c4 08          	add    $0x8,%r12d
      if (valid_bits < codesize) {
   23b2f:	45 39 e5             	cmp    %r12d,%r13d
   23b32:	7f 99                	jg     23acd <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x98d>
         stbi__int32 code = bits & codemask;
   23b34:	45 89 f8             	mov    %r15d,%r8d
         bits >>= codesize;
   23b37:	44 89 e9             	mov    %r13d,%ecx
         valid_bits -= codesize;
   23b3a:	45 29 ec             	sub    %r13d,%r12d
         stbi__int32 code = bits & codemask;
   23b3d:	45 21 d8             	and    %r11d,%r8d
         bits >>= codesize;
   23b40:	41 d3 ff             	sar    %cl,%r15d
         if (code == clear) {  // clear code
   23b43:	44 39 44 24 08       	cmp    %r8d,0x8(%rsp)
   23b48:	0f 84 62 02 00 00    	je     23db0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xc70>
         } else if (code == clear + 1) { // end of stream code
   23b4e:	8b 44 24 18          	mov    0x18(%rsp),%eax
   23b52:	41 39 c0             	cmp    %eax,%r8d
   23b55:	0f 84 1b 07 00 00    	je     24276 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1136>
         } else if (code <= avail) {
   23b5b:	41 39 e8             	cmp    %ebp,%r8d
   23b5e:	0f 8f 7d 02 00 00    	jg     23de1 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xca1>
            if (first) {
   23b64:	8b 44 24 14          	mov    0x14(%rsp),%eax
   23b68:	85 c0                	test   %eax,%eax
   23b6a:	0f 85 9e 07 00 00    	jne    2430e <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x11ce>
            if (oldcode >= 0) {
   23b70:	45 85 d2             	test   %r10d,%r10d
   23b73:	0f 88 5f 02 00 00    	js     23dd8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xc98>
               p = &g->codes[avail++];
   23b79:	8d 55 01             	lea    0x1(%rbp),%edx
               if (avail > 8192) {
   23b7c:	81 fa 00 20 00 00    	cmp    $0x2000,%edx
   23b82:	0f 8f c0 07 00 00    	jg     24348 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1208>
               p->prefix = (stbi__int16) oldcode;
   23b88:	49 8d 04 a9          	lea    (%r9,%rbp,4),%rax
   23b8c:	48 63 ea             	movslq %edx,%rbp
   23b8f:	66 44 89 90 34 08 00 	mov    %r10w,0x834(%rax)
   23b96:	00 
               p->first = g->codes[oldcode].first;
   23b97:	43 0f b6 8c 91 36 08 	movzbl 0x836(%r9,%r10,4),%ecx
   23b9e:	00 00 
   23ba0:	88 88 36 08 00 00    	mov    %cl,0x836(%rax)
               p->suffix = (code == avail) ? p->first : g->codes[code].first;
   23ba6:	49 63 c8             	movslq %r8d,%rcx
   23ba9:	41 0f b6 8c 89 36 08 	movzbl 0x836(%r9,%rcx,4),%ecx
   23bb0:	00 00 
   23bb2:	88 88 37 08 00 00    	mov    %cl,0x837(%rax)
            stbi__out_gif_code(g, (stbi__uint16) code);
   23bb8:	41 0f b7 f0          	movzwl %r8w,%esi
   23bbc:	4c 89 cf             	mov    %r9,%rdi
   23bbf:	e8 3c dc fe ff       	call   11800 <_ZL18stbi__out_gif_codeP9stbi__gift>
            if ((avail & codemask) == 0 && avail <= 0x0FFF) {
   23bc4:	41 85 eb             	test   %ebp,%r11d
   23bc7:	75 0c                	jne    23bd5 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xa95>
   23bc9:	81 fd ff 0f 00 00    	cmp    $0xfff,%ebp
   23bcf:	0f 8e e3 02 00 00    	jle    23eb8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xd78>
   23bd5:	4d 63 d0             	movslq %r8d,%r10
   23bd8:	e9 eb fe ff ff       	jmp    23ac8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x988>
   23bdd:	0f 1f 00             	nopl   (%rax)
   if (s->img_buffer < s->img_buffer_end)
   23be0:	48 39 ca             	cmp    %rcx,%rdx
   23be3:	0f 82 b7 00 00 00    	jb     23ca0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xb60>
   if (s->read_from_callbacks) {
   23be9:	8b 7b 30             	mov    0x30(%rbx),%edi
   23bec:	85 ff                	test   %edi,%edi
   23bee:	0f 85 ec 05 00 00    	jne    241e0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x10a0>
   23bf4:	48 89 d0             	mov    %rdx,%rax
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   23bf7:	4c 8d 63 38          	lea    0x38(%rbx),%r12
   if (s->img_buffer < s->img_buffer_end)
   23bfb:	48 39 c8             	cmp    %rcx,%rax
   23bfe:	73 3e                	jae    23c3e <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xafe>
      return *s->img_buffer++;
   23c00:	48 8d 78 01          	lea    0x1(%rax),%rdi
   23c04:	48 89 bb c0 00 00 00 	mov    %rdi,0xc0(%rbx)
   23c0b:	0f b6 10             	movzbl (%rax),%edx
            while ((len = stbi__get8(s)) != 0) {
   23c0e:	0f b6 f2             	movzbl %dl,%esi
   23c11:	85 f6                	test   %esi,%esi
   23c13:	0f 84 d3 07 00 00    	je     243ec <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x12ac>
   if (s->io.read) {
   23c19:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   23c1e:	74 0e                	je     23c2e <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xaee>
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   23c20:	48 89 c8             	mov    %rcx,%rax
   23c23:	48 29 f8             	sub    %rdi,%rax
      if (blen < n) {
   23c26:	39 f0                	cmp    %esi,%eax
   23c28:	0f 8c 62 02 00 00    	jl     23e90 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xd50>
   s->img_buffer += n;
   23c2e:	48 8d 04 17          	lea    (%rdi,%rdx,1),%rax
   23c32:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   if (s->img_buffer < s->img_buffer_end)
   23c39:	48 39 c8             	cmp    %rcx,%rax
   23c3c:	72 c2                	jb     23c00 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xac0>
   if (s->read_from_callbacks) {
   23c3e:	8b 53 30             	mov    0x30(%rbx),%edx
   23c41:	85 d2                	test   %edx,%edx
   23c43:	0f 84 b3 f5 ff ff    	je     231fc <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xbc>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   23c49:	8b 53 34             	mov    0x34(%rbx),%edx
   23c4c:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   23c50:	4c 89 e6             	mov    %r12,%rsi
   23c53:	ff 53 10             	call   *0x10(%rbx)
   23c56:	48 63 c8             	movslq %eax,%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   23c59:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   23c60:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   23c67:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   23c6d:	48 8d 43 39          	lea    0x39(%rbx),%rax
   if (n == 0) {
   23c71:	85 c9                	test   %ecx,%ecx
   23c73:	0f 85 c7 03 00 00    	jne    24040 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xf00>
      s->read_from_callbacks = 0;
   23c79:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   23c80:	48 89 c1             	mov    %rax,%rcx
      *s->img_buffer = 0;
   23c83:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   23c87:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   23c8e:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   23c95:	e9 62 f5 ff ff       	jmp    231fc <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xbc>
   23c9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   23ca0:	48 8d 42 01          	lea    0x1(%rdx),%rax
   23ca4:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   23cab:	0f b6 12             	movzbl (%rdx),%edx
            if (ext == 0xF9) { // Graphic Control Extension.
   23cae:	80 fa f9             	cmp    $0xf9,%dl
   23cb1:	0f 85 59 05 00 00    	jne    24210 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x10d0>
   if (s->img_buffer < s->img_buffer_end)
   23cb7:	48 39 c8             	cmp    %rcx,%rax
   23cba:	0f 83 40 04 00 00    	jae    24100 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xfc0>
      return *s->img_buffer++;
   23cc0:	48 8d 50 01          	lea    0x1(%rax),%rdx
   23cc4:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
               len = stbi__get8(s);
   23ccb:	0f b6 30             	movzbl (%rax),%esi
               if (len == 4) {
   23cce:	83 fe 04             	cmp    $0x4,%esi
   23cd1:	0f 84 bb 06 00 00    	je     24392 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1252>
   if (n == 0) return;  // already there!
   23cd7:	85 f6                	test   %esi,%esi
   23cd9:	0f 84 3c 07 00 00    	je     2441b <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x12db>
   if (n < 0) {
   23cdf:	48 89 df             	mov    %rbx,%rdi
   23ce2:	e8 29 ee fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   if (s->img_buffer < s->img_buffer_end)
   23ce7:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   23cee:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
   23cf5:	e9 02 f5 ff ff       	jmp    231fc <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xbc>
   23cfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   stbi__g_failure_reason = str;
   23d00:	48 8d 05 5f 3f 01 00 	lea    0x13f5f(%rip),%rax        # 37c66 <_ZSt19piecewise_construct+0x31f>
   23d07:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   23d0e:	ff ff 
      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header
   23d10:	31 c0                	xor    %eax,%eax
   23d12:	e9 0f f5 ff ff       	jmp    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
   23d17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   23d1e:	00 00 
   if (s->read_from_callbacks) {
   23d20:	8b 43 30             	mov    0x30(%rbx),%eax
   23d23:	85 c0                	test   %eax,%eax
   23d25:	0f 84 00 fe ff ff    	je     23b2b <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x9eb>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   23d2b:	48 8d 4b 38          	lea    0x38(%rbx),%rcx
   23d2f:	8b 53 34             	mov    0x34(%rbx),%edx
   23d32:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   23d36:	4c 89 4c 24 40       	mov    %r9,0x40(%rsp)
   23d3b:	44 89 54 24 38       	mov    %r10d,0x38(%rsp)
   23d40:	48 89 ce             	mov    %rcx,%rsi
   23d43:	44 89 5c 24 34       	mov    %r11d,0x34(%rsp)
   23d48:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
   23d4d:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   23d50:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   23d57:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   23d5e:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   23d64:	85 c0                	test   %eax,%eax
   23d66:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
   23d6b:	44 8b 5c 24 34       	mov    0x34(%rsp),%r11d
   23d70:	4c 63 54 24 38       	movslq 0x38(%rsp),%r10
   23d75:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   23d7a:	0f 85 a8 02 00 00    	jne    24028 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xee8>
      s->read_from_callbacks = 0;
   23d80:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   23d87:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
      *s->img_buffer = 0;
   23d8c:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   23d90:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   23d97:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
   23d9c:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   23da3:	e9 83 fd ff ff       	jmp    23b2b <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x9eb>
   23da8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   23daf:	00 
            first = 0;
   23db0:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
   23db7:	00 
   23db8:	48 63 6c 24 30       	movslq 0x30(%rsp),%rbp
            oldcode = -1;
   23dbd:	49 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%r10
   23dc4:	44 8b 5c 24 24       	mov    0x24(%rsp),%r11d
   23dc9:	44 8b 6c 24 20       	mov    0x20(%rsp),%r13d
   23dce:	e9 f5 fc ff ff       	jmp    23ac8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x988>
   23dd3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            } else if (code == avail)
   23dd8:	41 39 e8             	cmp    %ebp,%r8d
   23ddb:	0f 85 d7 fd ff ff    	jne    23bb8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xa78>
   stbi__g_failure_reason = str;
   23de1:	48 8d 05 c4 3e 01 00 	lea    0x13ec4(%rip),%rax        # 37cac <_ZSt19piecewise_construct+0x365>
   23de8:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   23def:	ff ff 
      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header
   23df1:	31 c0                	xor    %eax,%eax
   23df3:	e9 2e f4 ff ff       	jmp    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
   23df8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   23dff:	00 
   if (s->read_from_callbacks) {
   23e00:	8b 43 30             	mov    0x30(%rbx),%eax
   23e03:	85 c0                	test   %eax,%eax
   23e05:	0f 85 d5 01 00 00    	jne    23fe0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xea0>
               return g->out;
   23e0b:	49 8b 41 08          	mov    0x8(%r9),%rax
   23e0f:	4c 89 cd             	mov    %r9,%rbp
            if (!o) return NULL;
   23e12:	48 85 c0             	test   %rax,%rax
   23e15:	0f 84 9d f4 ff ff    	je     232b8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x178>
            if (first_frame && (g->bgindex > 0)) {
   23e1b:	44 8b 4c 24 1c       	mov    0x1c(%rsp),%r9d
   23e20:	45 85 c9             	test   %r9d,%r9d
   23e23:	0f 84 fd f3 ff ff    	je     23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
   23e29:	44 8b 45 24          	mov    0x24(%rbp),%r8d
   23e2d:	45 85 c0             	test   %r8d,%r8d
   23e30:	0f 8e f0 f3 ff ff    	jle    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
            pcount = g->w * g->h;
   23e36:	8b 75 00             	mov    0x0(%rbp),%esi
   23e39:	0f af 75 04          	imul   0x4(%rbp),%esi
               for (pi = 0; pi < pcount; ++pi) {
   23e3d:	85 f6                	test   %esi,%esi
   23e3f:	0f 8e e1 f3 ff ff    	jle    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
   23e45:	48 63 f6             	movslq %esi,%rsi
   23e48:	31 d2                	xor    %edx,%edx
   23e4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                  if (g->history[pi] == 0) {
   23e50:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
   23e54:	80 3c 11 00          	cmpb   $0x0,(%rcx,%rdx,1)
   23e58:	75 20                	jne    23e7a <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xd3a>
                     g->pal[g->bgindex][3] = 255; // just in case it was made transparent, undo that; It will be reset next frame if need be;
   23e5a:	48 63 4d 24          	movslq 0x24(%rbp),%rcx
   23e5e:	c6 44 8d 37 ff       	movb   $0xff,0x37(%rbp,%rcx,4)
                     memcpy( &g->out[pi * 4], &g->pal[g->bgindex], 4 );
   23e63:	44 8b 44 8d 34       	mov    0x34(%rbp,%rcx,4),%r8d
   23e68:	8d 0c 95 00 00 00 00 	lea    0x0(,%rdx,4),%ecx
   23e6f:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
   23e73:	48 63 c9             	movslq %ecx,%rcx
   23e76:	44 89 04 0f          	mov    %r8d,(%rdi,%rcx,1)
               for (pi = 0; pi < pcount; ++pi) {
   23e7a:	48 83 c2 01          	add    $0x1,%rdx
   23e7e:	48 39 f2             	cmp    %rsi,%rdx
   23e81:	75 cd                	jne    23e50 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xd10>
   23e83:	e9 9e f3 ff ff       	jmp    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
   23e88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   23e8f:	00 
         s->img_buffer = s->img_buffer_end;
   23e90:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
         (s->io.skip)(s->io_user_data, n - blen);
   23e97:	29 c6                	sub    %eax,%esi
   23e99:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   23e9d:	ff 53 18             	call   *0x18(%rbx)
   if (s->img_buffer < s->img_buffer_end)
   23ea0:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   23ea7:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
         return;
   23eae:	e9 48 fd ff ff       	jmp    23bfb <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xabb>
   23eb3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
               codesize++;
   23eb8:	41 83 c5 01          	add    $0x1,%r13d
               codemask = (1 << codesize) - 1;
   23ebc:	41 bb 01 00 00 00    	mov    $0x1,%r11d
   23ec2:	4d 63 d0             	movslq %r8d,%r10
   23ec5:	44 89 e9             	mov    %r13d,%ecx
   23ec8:	41 d3 e3             	shl    %cl,%r11d
   23ecb:	41 83 eb 01          	sub    $0x1,%r11d
   23ecf:	e9 f4 fb ff ff       	jmp    23ac8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x988>
   23ed4:	0f 1f 40 00          	nopl   0x0(%rax)
      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header
   23ed8:	31 c9                	xor    %ecx,%ecx
   23eda:	48 89 ee             	mov    %rbp,%rsi
   23edd:	e8 9e c4 ff ff       	call   20380 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii>
   23ee2:	85 c0                	test   %eax,%eax
   23ee4:	0f 84 ce f3 ff ff    	je     232b8 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x178>
      if (!stbi__mad3sizes_valid(4, g->w, g->h, 0))
   23eea:	8b 75 00             	mov    0x0(%rbp),%esi
   23eed:	8b 4d 04             	mov    0x4(%rbp),%ecx
   if (a < 0 || b < 0) return 0;
   23ef0:	85 f6                	test   %esi,%esi
   23ef2:	0f 88 c8 00 00 00    	js     23fc0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe80>
   if (b == 0) return 1; // mul-by-0 is always safe
   23ef8:	0f 84 b8 00 00 00    	je     23fb6 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe76>
   return a <= INT_MAX/b;
   23efe:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   23f03:	31 d2                	xor    %edx,%edx
   23f05:	f7 fe                	idiv   %esi
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   23f07:	83 f8 03             	cmp    $0x3,%eax
   23f0a:	0f 8e b0 00 00 00    	jle    23fc0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe80>
   if (a < 0 || b < 0) return 0;
   23f10:	85 c9                	test   %ecx,%ecx
   23f12:	0f 88 a8 00 00 00    	js     23fc0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe80>
   if (b == 0) return 1; // mul-by-0 is always safe
   23f18:	74 18                	je     23f32 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xdf2>
   return a <= INT_MAX/b;
   23f1a:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   23f1f:	31 d2                	xor    %edx,%edx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   23f21:	8d 3c b5 00 00 00 00 	lea    0x0(,%rsi,4),%edi
   return a <= INT_MAX/b;
   23f28:	f7 f9                	idiv   %ecx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   23f2a:	39 c7                	cmp    %eax,%edi
   23f2c:	0f 8f 8e 00 00 00    	jg     23fc0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe80>
      pcount = g->w * g->h;
   23f32:	0f af ce             	imul   %esi,%ecx
    return STBI_MALLOC(size);
   23f35:	be 01 00 00 00       	mov    $0x1,%esi
      g->out = (stbi_uc *) stbi__malloc(4 * pcount);
   23f3a:	44 8d 34 8d 00 00 00 	lea    0x0(,%rcx,4),%r14d
   23f41:	00 
      pcount = g->w * g->h;
   23f42:	41 89 cc             	mov    %ecx,%r12d
      g->out = (stbi_uc *) stbi__malloc(4 * pcount);
   23f45:	4d 63 f6             	movslq %r14d,%r14
    return STBI_MALLOC(size);
   23f48:	4c 89 f7             	mov    %r14,%rdi
   23f4b:	e8 f0 23 fe ff       	call   6340 <calloc@plt>
   23f50:	4c 89 f7             	mov    %r14,%rdi
   23f53:	be 01 00 00 00       	mov    $0x1,%esi
      g->out = (stbi_uc *) stbi__malloc(4 * pcount);
   23f58:	48 89 45 08          	mov    %rax,0x8(%rbp)
    return STBI_MALLOC(size);
   23f5c:	49 89 c5             	mov    %rax,%r13
   23f5f:	e8 dc 23 fe ff       	call   6340 <calloc@plt>
      g->history = (stbi_uc *) stbi__malloc(pcount);
   23f64:	49 63 d4             	movslq %r12d,%rdx
    return STBI_MALLOC(size);
   23f67:	be 01 00 00 00       	mov    $0x1,%esi
      g->background = (stbi_uc *) stbi__malloc(4 * pcount);
   23f6c:	48 89 45 10          	mov    %rax,0x10(%rbp)
    return STBI_MALLOC(size);
   23f70:	49 89 c6             	mov    %rax,%r14
   23f73:	48 89 d7             	mov    %rdx,%rdi
   23f76:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   23f7b:	e8 c0 23 fe ff       	call   6340 <calloc@plt>
      if (!g->out || !g->background || !g->history)
   23f80:	4d 85 f6             	test   %r14,%r14
      g->history = (stbi_uc *) stbi__malloc(pcount);
   23f83:	48 89 45 18          	mov    %rax,0x18(%rbp)
    return STBI_MALLOC(size);
   23f87:	48 89 c7             	mov    %rax,%rdi
      if (!g->out || !g->background || !g->history)
   23f8a:	0f 94 c0             	sete   %al
   23f8d:	4d 85 ed             	test   %r13,%r13
   23f90:	0f 94 c1             	sete   %cl
   23f93:	08 c8                	or     %cl,%al
   23f95:	0f 85 91 04 00 00    	jne    2442c <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x12ec>
   23f9b:	48 85 ff             	test   %rdi,%rdi
   23f9e:	0f 84 88 04 00 00    	je     2442c <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x12ec>
      first_frame = 1;
   23fa4:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%rsp)
   23fab:	00 
   23fac:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   23fb1:	e9 31 f2 ff ff       	jmp    231e7 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xa7>
   if (a < 0 || b < 0) return 0;
   23fb6:	85 c9                	test   %ecx,%ecx
   23fb8:	0f 89 74 ff ff ff    	jns    23f32 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xdf2>
   23fbe:	66 90                	xchg   %ax,%ax
   stbi__g_failure_reason = str;
   23fc0:	48 8d 05 91 3a 01 00 	lea    0x13a91(%rip),%rax        # 37a58 <_ZSt19piecewise_construct+0x111>
   23fc7:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   23fce:	ff ff 
      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header
   23fd0:	31 c0                	xor    %eax,%eax
   23fd2:	e9 4f f2 ff ff       	jmp    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
   23fd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   23fde:	00 00 
      stbi__refill_buffer(s);
   23fe0:	48 89 df             	mov    %rbx,%rdi
   23fe3:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
   23fe8:	44 89 54 24 34       	mov    %r10d,0x34(%rsp)
   23fed:	44 89 5c 24 28       	mov    %r11d,0x28(%rsp)
   23ff2:	e8 89 d2 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   23ff7:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
   23ffc:	4c 63 54 24 34       	movslq 0x34(%rsp),%r10
   24001:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   24008:	44 8b 5c 24 28       	mov    0x28(%rsp),%r11d
   2400d:	48 8d 42 01          	lea    0x1(%rdx),%rax
   24011:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   24018:	44 0f b6 32          	movzbl (%rdx),%r14d
   2401c:	e9 da fa ff ff       	jmp    23afb <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x9bb>
   24021:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
         bits |= (stbi__int32) stbi__get8(s) << valid_bits;
   24028:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   2402c:	48 98                	cltq
   2402e:	48 01 c8             	add    %rcx,%rax
         bits |= (stbi__int32) stbi__get8(s) << valid_bits;
   24031:	44 89 e1             	mov    %r12d,%ecx
   24034:	d3 e2                	shl    %cl,%edx
   24036:	41 09 d7             	or     %edx,%r15d
   24039:	e9 52 fd ff ff       	jmp    23d90 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xc50>
   2403e:	66 90                	xchg   %ax,%ax
      return *s->img_buffer++;
   24040:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   24044:	4c 01 e1             	add    %r12,%rcx
      return *s->img_buffer++;
   24047:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   2404e:	48 89 c7             	mov    %rax,%rdi
   24051:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
            while ((len = stbi__get8(s)) != 0) {
   24058:	0f b6 f2             	movzbl %dl,%esi
   2405b:	e9 b1 fb ff ff       	jmp    23c11 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xad1>
      s->img_buffer_end = s->buffer_start + n;
   24060:	48 98                	cltq
      return *s->img_buffer++;
   24062:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      s->img_buffer_end = s->buffer_start + n;
   24069:	49 8d 0c 04          	lea    (%r12,%rax,1),%rcx
      return *s->img_buffer++;
   2406d:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   24071:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
   24078:	e9 96 f1 ff ff       	jmp    23213 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xd3>
   2407d:	0f 1f 00             	nopl   (%rax)
   if (s->read_from_callbacks) {
   24080:	8b 7b 30             	mov    0x30(%rbx),%edi
   24083:	85 ff                	test   %edi,%edi
   24085:	0f 85 8d 01 00 00    	jne    24218 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x10d8>
            g->lflags = stbi__get8(s);
   2408b:	c7 85 48 88 00 00 00 	movl   $0x0,0x8848(%rbp)
   24092:	00 00 00 
               g->parse = 0;
   24095:	c7 85 40 88 00 00 00 	movl   $0x0,0x8840(%rbp)
   2409c:	00 00 00 
   2409f:	89 b5 44 88 00 00    	mov    %esi,0x8844(%rbp)
               g->color_table = (stbi_uc *) g->pal;
   240a5:	4c 8d 65 34          	lea    0x34(%rbp),%r12
            } else if (g->flags & 0x80) {
   240a9:	f6 45 20 80          	testb  $0x80,0x20(%rbp)
   240ad:	0f 85 83 f3 ff ff    	jne    23436 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x2f6>
   stbi__g_failure_reason = str;
   240b3:	48 8d 05 c1 3b 01 00 	lea    0x13bc1(%rip),%rax        # 37c7b <_ZSt19piecewise_construct+0x334>
   240ba:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   240c1:	ff ff 
      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header
   240c3:	31 c0                	xor    %eax,%eax
   240c5:	e9 5c f1 ff ff       	jmp    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
   240ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   240d0:	8b 43 30             	mov    0x30(%rbx),%eax
   240d3:	85 c0                	test   %eax,%eax
   240d5:	0f 85 8d 00 00 00    	jne    24168 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1028>
   240db:	c7 44 24 30 03 00 00 	movl   $0x3,0x30(%rsp)
   240e2:	00 
   clear = 1 << lzw_cs;
   240e3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%rsp)
   240ea:	00 
   codemask = (1 << codesize) - 1;
   240eb:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%rsp)
   240f2:	00 
   codesize = lzw_cs + 1;
   240f3:	c7 44 24 20 01 00 00 	movl   $0x1,0x20(%rsp)
   240fa:	00 
   240fb:	e9 5a f8 ff ff       	jmp    2395a <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x81a>
   if (s->read_from_callbacks) {
   24100:	8b 73 30             	mov    0x30(%rbx),%esi
   24103:	85 f6                	test   %esi,%esi
   24105:	0f 84 f1 f0 ff ff    	je     231fc <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xbc>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2410b:	4c 8d 63 38          	lea    0x38(%rbx),%r12
   2410f:	8b 53 34             	mov    0x34(%rbx),%edx
   24112:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   24116:	4c 89 e6             	mov    %r12,%rsi
   24119:	ff 53 10             	call   *0x10(%rbx)
   2411c:	48 63 d0             	movslq %eax,%rdx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2411f:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   24126:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   2412d:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   24133:	48 8d 43 39          	lea    0x39(%rbx),%rax
   if (n == 0) {
   24137:	85 d2                	test   %edx,%edx
   24139:	0f 84 3a fb ff ff    	je     23c79 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xb39>
      s->img_buffer_end = s->buffer_start + n;
   2413f:	49 8d 0c 14          	lea    (%r12,%rdx,1),%rcx
      return *s->img_buffer++;
   24143:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
               len = stbi__get8(s);
   2414a:	0f b6 73 38          	movzbl 0x38(%rbx),%esi
      return *s->img_buffer++;
   2414e:	48 89 c2             	mov    %rax,%rdx
   24151:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
   24158:	e9 71 fb ff ff       	jmp    23cce <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xb8e>
   2415d:	0f 1f 00             	nopl   (%rax)
               stbi__gif_parse_colortable(s,g->lpal, 2 << (g->lflags & 7), g->eflags & 0x01 ? g->transparent : -1);
   24160:	8b 45 2c             	mov    0x2c(%rbp),%eax
   24163:	e9 b0 f2 ff ff       	jmp    23418 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x2d8>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24168:	4c 8d 63 38          	lea    0x38(%rbx),%r12
   2416c:	8b 53 34             	mov    0x34(%rbx),%edx
   2416f:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   24173:	4c 89 e6             	mov    %r12,%rsi
   24176:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24179:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   24180:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   24187:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   2418d:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   24191:	85 c0                	test   %eax,%eax
   24193:	0f 85 dd 01 00 00    	jne    24376 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1236>
      s->read_from_callbacks = 0;
   24199:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      return *s->img_buffer++;
   241a0:	be 01 00 00 00       	mov    $0x1,%esi
   241a5:	31 c9                	xor    %ecx,%ecx
      *s->img_buffer = 0;
   241a7:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   241ab:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   241b2:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   avail = clear+2;
   241b9:	c7 44 24 30 03 00 00 	movl   $0x3,0x30(%rsp)
   241c0:	00 
   clear = 1 << lzw_cs;
   241c1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%rsp)
   241c8:	00 
   codemask = (1 << codesize) - 1;
   241c9:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%rsp)
   241d0:	00 
   codesize = lzw_cs + 1;
   241d1:	c7 44 24 20 01 00 00 	movl   $0x1,0x20(%rsp)
   241d8:	00 
   241d9:	e9 d1 f5 ff ff       	jmp    237af <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x66f>
   241de:	66 90                	xchg   %ax,%ax
      stbi__refill_buffer(s);
   241e0:	48 89 df             	mov    %rbx,%rdi
   241e3:	e8 98 d0 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   241e8:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   if (s->img_buffer < s->img_buffer_end)
   241ef:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
      return *s->img_buffer++;
   241f6:	48 8d 42 01          	lea    0x1(%rdx),%rax
   241fa:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   24201:	0f b6 12             	movzbl (%rdx),%edx
   24204:	e9 a5 fa ff ff       	jmp    23cae <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xb6e>
   24209:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   24210:	48 89 c2             	mov    %rax,%rdx
   24213:	e9 dc f9 ff ff       	jmp    23bf4 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xab4>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24218:	4c 8d 63 38          	lea    0x38(%rbx),%r12
   2421c:	8b 53 34             	mov    0x34(%rbx),%edx
   2421f:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   24223:	4c 89 e6             	mov    %r12,%rsi
   24226:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24229:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   24230:	48 8d 73 39          	lea    0x39(%rbx),%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24234:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   2423b:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   24241:	85 c0                	test   %eax,%eax
   24243:	0f 85 16 01 00 00    	jne    2435f <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x121f>
      s->read_from_callbacks = 0;
   24249:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   24250:	49 89 f4             	mov    %rsi,%r12
   24253:	31 d2                	xor    %edx,%edx
   24255:	31 ff                	xor    %edi,%edi
      *s->img_buffer = 0;
   24257:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   2425b:	31 c9                	xor    %ecx,%ecx
      return *s->img_buffer++;
   2425d:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
               g->step = 8 * g->line_size; // first interlaced spacing
   24264:	8b b5 64 88 00 00    	mov    0x8864(%rbp),%esi
   2426a:	4c 89 a3 c8 00 00 00 	mov    %r12,0xc8(%rbx)
      return *s->img_buffer++;
   24271:	e9 68 f1 ff ff       	jmp    233de <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x29e>
   if (n == 0) return;  // already there!
   24276:	4c 89 cd             	mov    %r9,%rbp
   24279:	45 85 f6             	test   %r14d,%r14d
   2427c:	74 0b                	je     24289 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1149>
   if (n < 0) {
   2427e:	44 89 f6             	mov    %r14d,%esi
   24281:	48 89 df             	mov    %rbx,%rdi
   24284:	e8 87 e8 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24289:	4c 8d 63 38          	lea    0x38(%rbx),%r12
   2428d:	eb 1b                	jmp    242aa <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x116a>
   2428f:	90                   	nop
      return *s->img_buffer++;
   24290:	48 8d 50 01          	lea    0x1(%rax),%rdx
   24294:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
            while ((len = stbi__get8(s)) > 0)
   2429b:	0f b6 30             	movzbl (%rax),%esi
   2429e:	85 f6                	test   %esi,%esi
   242a0:	74 1f                	je     242c1 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1181>
   if (n < 0) {
   242a2:	48 89 df             	mov    %rbx,%rdi
   242a5:	e8 66 e8 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   if (s->img_buffer < s->img_buffer_end)
   242aa:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   242b1:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   242b8:	72 d6                	jb     24290 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1150>
   if (s->read_from_callbacks) {
   242ba:	8b 43 30             	mov    0x30(%rbx),%eax
   242bd:	85 c0                	test   %eax,%eax
   242bf:	75 09                	jne    242ca <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x118a>
            return g->out;
   242c1:	48 8b 45 08          	mov    0x8(%rbp),%rax
   242c5:	e9 48 fb ff ff       	jmp    23e12 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xcd2>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   242ca:	8b 53 34             	mov    0x34(%rbx),%edx
   242cd:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   242d1:	4c 89 e6             	mov    %r12,%rsi
   242d4:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   242d7:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   242de:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   242e5:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   242eb:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   242ef:	85 c0                	test   %eax,%eax
   242f1:	75 39                	jne    2432c <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x11ec>
      s->read_from_callbacks = 0;
   242f3:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   242fa:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   242fe:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   24305:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   2430c:	eb b3                	jmp    242c1 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1181>
   stbi__g_failure_reason = str;
   2430e:	48 8d 05 7a 39 01 00 	lea    0x1397a(%rip),%rax        # 37c8f <_ZSt19piecewise_construct+0x348>
   24315:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2431c:	ff ff 
      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header
   2431e:	31 c0                	xor    %eax,%eax
   24320:	e9 01 ef ff ff       	jmp    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
               g->parse = 0;
   24325:	31 c0                	xor    %eax,%eax
   24327:	e9 c9 f0 ff ff       	jmp    233f5 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x2b5>
      s->img_buffer_end = s->buffer_start + n;
   2432c:	48 98                	cltq
      return *s->img_buffer++;
   2432e:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
            while ((len = stbi__get8(s)) > 0)
   24335:	0f b6 73 38          	movzbl 0x38(%rbx),%esi
      s->img_buffer_end = s->buffer_start + n;
   24339:	4c 01 e0             	add    %r12,%rax
   2433c:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   24343:	e9 56 ff ff ff       	jmp    2429e <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x115e>
   stbi__g_failure_reason = str;
   24348:	48 8d 05 4e 39 01 00 	lea    0x1394e(%rip),%rax        # 37c9d <_ZSt19piecewise_construct+0x356>
   2434f:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   24356:	ff ff 
      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header
   24358:	31 c0                	xor    %eax,%eax
   2435a:	e9 c7 ee ff ff       	jmp    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
      s->img_buffer_end = s->buffer_start + n;
   2435f:	48 98                	cltq
   24361:	49 01 c4             	add    %rax,%r12
      return *s->img_buffer++;
   24364:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   24368:	89 c7                	mov    %eax,%edi
   2436a:	89 c1                	mov    %eax,%ecx
   2436c:	89 c2                	mov    %eax,%edx
   2436e:	83 e7 40             	and    $0x40,%edi
   24371:	e9 e7 fe ff ff       	jmp    2425d <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x111d>
      s->img_buffer_end = s->buffer_start + n;
   24376:	48 98                	cltq
      return *s->img_buffer++;
   24378:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   2437f:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   24383:	49 01 c4             	add    %rax,%r12
   24386:	4c 89 a3 c8 00 00 00 	mov    %r12,0xc8(%rbx)
      return *s->img_buffer++;
   2438d:	e9 cd f0 ff ff       	jmp    2345f <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x31f>
                  g->eflags = stbi__get8(s);
   24392:	48 89 df             	mov    %rbx,%rdi
   24395:	e8 06 77 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
                  g->delay = 10 * stbi__get16le(s); // delay - 1/100th of a second, saving as 1/1000ths.
   2439a:	48 89 df             	mov    %rbx,%rdi
                  g->eflags = stbi__get8(s);
   2439d:	0f b6 c0             	movzbl %al,%eax
   243a0:	89 45 30             	mov    %eax,0x30(%rbp)
                  g->delay = 10 * stbi__get16le(s); // delay - 1/100th of a second, saving as 1/1000ths.
   243a3:	e8 38 a0 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   243a8:	8d 04 80             	lea    (%rax,%rax,4),%eax
   243ab:	01 c0                	add    %eax,%eax
   243ad:	89 85 68 88 00 00    	mov    %eax,0x8868(%rbp)
                  if (g->transparent >= 0) {
   243b3:	48 63 45 2c          	movslq 0x2c(%rbp),%rax
   243b7:	85 c0                	test   %eax,%eax
   243b9:	78 05                	js     243c0 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x1280>
                     g->pal[g->transparent][3] = 255;
   243bb:	c6 44 85 37 ff       	movb   $0xff,0x37(%rbp,%rax,4)
                  if (g->eflags & 0x01) {
   243c0:	f6 45 30 01          	testb  $0x1,0x30(%rbp)
   243c4:	74 2e                	je     243f4 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x12b4>
                     g->transparent = stbi__get8(s);
   243c6:	48 89 df             	mov    %rbx,%rdi
   243c9:	e8 d2 76 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   243ce:	0f b6 c0             	movzbl %al,%eax
   243d1:	89 45 2c             	mov    %eax,0x2c(%rbp)
                        g->pal[g->transparent][3] = 0;
   243d4:	c6 44 85 37 00       	movb   $0x0,0x37(%rbp,%rax,4)
   if (s->img_buffer < s->img_buffer_end)
   243d9:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   243e0:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
   243e7:	e9 08 f8 ff ff       	jmp    23bf4 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xab4>
   243ec:	48 89 f8             	mov    %rdi,%rax
   243ef:	e9 08 ee ff ff       	jmp    231fc <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xbc>
   if (n < 0) {
   243f4:	be 01 00 00 00       	mov    $0x1,%esi
   243f9:	48 89 df             	mov    %rbx,%rdi
   243fc:	e8 0f e7 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
                     g->transparent = -1;
   24401:	c7 45 2c ff ff ff ff 	movl   $0xffffffff,0x2c(%rbp)
   if (s->img_buffer < s->img_buffer_end)
   24408:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   2440f:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
   24416:	e9 d9 f7 ff ff       	jmp    23bf4 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xab4>
   2441b:	48 89 d0             	mov    %rdx,%rax
   2441e:	e9 d9 ed ff ff       	jmp    231fc <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xbc>
   avail = clear+2;
   24423:	31 c9                	xor    %ecx,%ecx
   for (init_code = 0; init_code < clear; init_code++) {
   24425:	31 c0                	xor    %eax,%eax
   24427:	e9 83 f3 ff ff       	jmp    237af <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0x66f>
   stbi__g_failure_reason = str;
   2442c:	48 8d 05 02 36 01 00 	lea    0x13602(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   24433:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2443a:	ff ff 
      if (!stbi__gif_header(s, g, comp,0)) return 0; // stbi__g_failure_reason set by stbi__gif_header
   2443c:	31 c0                	xor    %eax,%eax
   2443e:	e9 e3 ed ff ff       	jmp    23226 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0+0xe6>
   24443:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2444a:	00 00 00 00 
   2444e:	66 90                	xchg   %ax,%ax

0000000000024450 <_ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0>:
static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
   24450:	41 56                	push   %r14
   24452:	49 89 f6             	mov    %rsi,%r14
   memset(&g, 0, sizeof(g));
   24455:	31 f6                	xor    %esi,%esi
static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
   24457:	41 55                	push   %r13
   24459:	49 89 d5             	mov    %rdx,%r13
   memset(&g, 0, sizeof(g));
   2445c:	ba 70 88 00 00       	mov    $0x8870,%edx
static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
   24461:	41 54                	push   %r12
   24463:	45 89 c4             	mov    %r8d,%r12d
   24466:	55                   	push   %rbp
   24467:	48 89 fd             	mov    %rdi,%rbp
   2446a:	53                   	push   %rbx
   2446b:	48 89 cb             	mov    %rcx,%rbx
   2446e:	48 81 ec 70 88 00 00 	sub    $0x8870,%rsp
   memset(&g, 0, sizeof(g));
   24475:	48 89 e7             	mov    %rsp,%rdi
   24478:	e8 23 1e fe ff       	call   62a0 <memset@plt>
   u = stbi__gif_load_next(s, &g, comp, req_comp, 0);
   2447d:	31 c9                	xor    %ecx,%ecx
   2447f:	48 89 da             	mov    %rbx,%rdx
   24482:	48 89 ef             	mov    %rbp,%rdi
   24485:	48 89 c6             	mov    %rax,%rsi
   24488:	e8 b3 ec ff ff       	call   23140 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0>
   if (u) {
   2448d:	48 39 c5             	cmp    %rax,%rbp
   24490:	74 66                	je     244f8 <_ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xa8>
   24492:	48 89 c3             	mov    %rax,%rbx
   24495:	48 85 c0             	test   %rax,%rax
   24498:	74 5e                	je     244f8 <_ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xa8>
      *x = g.w;
   2449a:	8b 0c 24             	mov    (%rsp),%ecx
      *y = g.h;
   2449d:	44 8b 44 24 04       	mov    0x4(%rsp),%r8d
      *x = g.w;
   244a2:	41 89 0e             	mov    %ecx,(%r14)
      *y = g.h;
   244a5:	45 89 45 00          	mov    %r8d,0x0(%r13)
      if (req_comp && req_comp != 4)
   244a9:	41 f7 c4 fb ff ff ff 	test   $0xfffffffb,%r12d
   244b0:	75 2e                	jne    244e0 <_ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x90>
   STBI_FREE(g.history);
   244b2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   244b7:	e8 e4 21 fe ff       	call   66a0 <free@plt>
   STBI_FREE(g.background);
   244bc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   244c1:	e8 da 21 fe ff       	call   66a0 <free@plt>
}
   244c6:	48 81 c4 70 88 00 00 	add    $0x8870,%rsp
   244cd:	48 89 d8             	mov    %rbx,%rax
   244d0:	5b                   	pop    %rbx
   244d1:	5d                   	pop    %rbp
   244d2:	41 5c                	pop    %r12
   244d4:	41 5d                	pop    %r13
   244d6:	41 5e                	pop    %r14
   244d8:	c3                   	ret
   244d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   if (req_comp == img_n) return data;
   244e0:	44 89 e2             	mov    %r12d,%edx
   244e3:	be 04 00 00 00       	mov    $0x4,%esi
   244e8:	48 89 c7             	mov    %rax,%rdi
   244eb:	e8 10 0c ff ff       	call   15100 <_ZL20stbi__convert_formatPhiijj.part.0>
   244f0:	48 89 c3             	mov    %rax,%rbx
   244f3:	eb bd                	jmp    244b2 <_ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x62>
   244f5:	0f 1f 00             	nopl   (%rax)
   } else if (g.out) {
   244f8:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
   244fd:	48 85 ff             	test   %rdi,%rdi
   24500:	74 05                	je     24507 <_ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0xb7>
      STBI_FREE(g.out);
   24502:	e8 99 21 fe ff       	call   66a0 <free@plt>
static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
   24507:	31 db                	xor    %ebx,%ebx
   24509:	eb a7                	jmp    244b2 <_ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0+0x62>
   2450b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000024510 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0>:
static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp)
   24510:	41 57                	push   %r15
   24512:	4d 89 c7             	mov    %r8,%r15
   24515:	41 56                	push   %r14
   24517:	49 89 f6             	mov    %rsi,%r14
   2451a:	41 55                	push   %r13
   2451c:	41 54                	push   %r12
   2451e:	55                   	push   %rbp
   2451f:	53                   	push   %rbx
   24520:	48 89 fb             	mov    %rdi,%rbx
   24523:	48 81 ec c8 88 00 00 	sub    $0x88c8,%rsp
   2452a:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
   2452f:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
   24534:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
   int r = stbi__gif_test_raw(s);
   24539:	e8 f2 db ff ff       	call   22130 <_ZL18stbi__gif_test_rawP13stbi__context>
   s->img_buffer = s->img_buffer_original;
   2453e:	f3 0f 6f 83 d0 00 00 	movdqu 0xd0(%rbx),%xmm0
   24545:	00 
   24546:	0f 11 83 c0 00 00 00 	movups %xmm0,0xc0(%rbx)
   if (stbi__gif_test(s)) {
   2454d:	85 c0                	test   %eax,%eax
   2454f:	0f 84 3b 02 00 00    	je     24790 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x280>
      memset(&g, 0, sizeof(g));
   24555:	4c 8d 4c 24 50       	lea    0x50(%rsp),%r9
   2455a:	ba 70 88 00 00       	mov    $0x8870,%edx
   2455f:	31 f6                	xor    %esi,%esi
   24561:	4c 89 cf             	mov    %r9,%rdi
   24564:	e8 37 1d fe ff       	call   62a0 <memset@plt>
   24569:	49 89 c1             	mov    %rax,%r9
      if (delays) {
   2456c:	4d 85 f6             	test   %r14,%r14
   2456f:	74 07                	je     24578 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x68>
         *delays = 0;
   24571:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
            if (layers >= 2) {
   24578:	48 c7 44 24 10 04 00 	movq   $0x4,0x10(%rsp)
   2457f:	00 00 
   24581:	45 31 e4             	xor    %r12d,%r12d
   24584:	45 31 ed             	xor    %r13d,%r13d
   24587:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
   2458e:	00 
   2458f:	48 89 5c 24 18       	mov    %rbx,0x18(%rsp)
   24594:	4c 89 7c 24 48       	mov    %r15,0x48(%rsp)
   24599:	4c 89 4c 24 20       	mov    %r9,0x20(%rsp)
   2459e:	66 90                	xchg   %ax,%ax
         u = stbi__gif_load_next(s, &g, comp, req_comp, two_back);
   245a0:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
   245a5:	48 8b 0c 24          	mov    (%rsp),%rcx
   245a9:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   245ae:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   245b3:	48 89 df             	mov    %rbx,%rdi
   245b6:	e8 85 eb ff ff       	call   23140 <_ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh.constprop.0>
   245bb:	49 89 c7             	mov    %rax,%r15
         if (u) {
   245be:	48 85 c0             	test   %rax,%rax
   245c1:	0f 84 79 01 00 00    	je     24740 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x230>
   245c7:	48 39 c3             	cmp    %rax,%rbx
   245ca:	0f 84 70 01 00 00    	je     24740 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x230>
            *x = g.w;
   245d0:	8b 54 24 50          	mov    0x50(%rsp),%edx
   245d4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            ++layers;
   245d9:	41 83 c5 01          	add    $0x1,%r13d
               void *tmp = (stbi_uc*) STBI_REALLOC_SIZED( out, out_size, layers * stride );
   245dd:	44 89 ed             	mov    %r13d,%ebp
            *y = g.h;
   245e0:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
            *x = g.w;
   245e5:	89 10                	mov    %edx,(%rax)
            *y = g.h;
   245e7:	8b 44 24 54          	mov    0x54(%rsp),%eax
            stride = g.w * g.h * 4;
   245eb:	0f af d0             	imul   %eax,%edx
            *y = g.h;
   245ee:	89 06                	mov    %eax,(%rsi)
            stride = g.w * g.h * 4;
   245f0:	8d 1c 95 00 00 00 00 	lea    0x0(,%rdx,4),%ebx
   245f7:	89 54 24 2c          	mov    %edx,0x2c(%rsp)
               void *tmp = (stbi_uc*) STBI_REALLOC_SIZED( out, out_size, layers * stride );
   245fb:	0f af eb             	imul   %ebx,%ebp
   245fe:	48 63 f5             	movslq %ebp,%rsi
            if (out) {
   24601:	4d 85 e4             	test   %r12,%r12
   24604:	0f 84 c6 00 00 00    	je     246d0 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x1c0>
               void *tmp = (stbi_uc*) STBI_REALLOC_SIZED( out, out_size, layers * stride );
   2460a:	4c 89 e7             	mov    %r12,%rdi
   2460d:	e8 9e 23 fe ff       	call   69b0 <realloc@plt>
   24612:	48 89 c1             	mov    %rax,%rcx
               if (!tmp)
   24615:	48 85 c0             	test   %rax,%rax
   24618:	0f 84 ad 01 00 00    	je     247cb <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x2bb>
               if (delays) {
   2461e:	4d 85 f6             	test   %r14,%r14
   24621:	0f 84 7c 00 00 00    	je     246a3 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x193>
                  int *new_delays = (int*) STBI_REALLOC_SIZED( *delays, delays_size, sizeof(int) * layers );
   24627:	49 8b 3e             	mov    (%r14),%rdi
   2462a:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
   2462f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   24634:	e8 77 23 fe ff       	call   69b0 <realloc@plt>
                  if (!new_delays)
   24639:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
   2463e:	48 85 c0             	test   %rax,%rax
   24641:	0f 84 f9 01 00 00    	je     24840 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x330>
                  *delays = new_delays;
   24647:	49 89 06             	mov    %rax,(%r14)
               void *tmp = (stbi_uc*) STBI_REALLOC_SIZED( out, out_size, layers * stride );
   2464a:	49 89 cc             	mov    %rcx,%r12
            memcpy( out + ((layers - 1) * stride), u, stride );
   2464d:	29 dd                	sub    %ebx,%ebp
   2464f:	48 63 d3             	movslq %ebx,%rdx
   24652:	4c 89 fe             	mov    %r15,%rsi
   24655:	48 63 fd             	movslq %ebp,%rdi
   24658:	4c 01 e7             	add    %r12,%rdi
   2465b:	e8 b0 1d fe ff       	call   6410 <memcpy@plt>
            if (layers >= 2) {
   24660:	41 83 fd 01          	cmp    $0x1,%r13d
   24664:	74 18                	je     2467e <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x16e>
               two_back = out - 2 * stride;
   24666:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
   2466a:	4c 89 e1             	mov    %r12,%rcx
   2466d:	c1 e0 03             	shl    $0x3,%eax
   24670:	48 98                	cltq
   24672:	48 29 c1             	sub    %rax,%rcx
   24675:	48 89 0c 24          	mov    %rcx,(%rsp)
            if (delays) {
   24679:	4d 85 f6             	test   %r14,%r14
   2467c:	74 13                	je     24691 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x181>
               (*delays)[layers - 1U] = g.delay;
   2467e:	49 8b 06             	mov    (%r14),%rax
   24681:	8b 94 24 b8 88 00 00 	mov    0x88b8(%rsp),%edx
   24688:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
   2468d:	89 54 30 fc          	mov    %edx,-0x4(%rax,%rsi,1)
   24691:	48 83 44 24 10 04    	addq   $0x4,0x10(%rsp)
   24697:	e9 04 ff ff ff       	jmp    245a0 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x90>
   2469c:	0f 1f 40 00          	nopl   0x0(%rax)
    return STBI_MALLOC(size);
   246a0:	48 89 c1             	mov    %rax,%rcx
            memcpy( out + ((layers - 1) * stride), u, stride );
   246a3:	29 dd                	sub    %ebx,%ebp
   246a5:	48 63 d3             	movslq %ebx,%rdx
   246a8:	4c 89 fe             	mov    %r15,%rsi
   246ab:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
   246b0:	48 63 fd             	movslq %ebp,%rdi
   246b3:	48 01 cf             	add    %rcx,%rdi
   246b6:	e8 55 1d fe ff       	call   6410 <memcpy@plt>
            if (layers >= 2) {
   246bb:	4c 8b 64 24 40       	mov    0x40(%rsp),%r12
   246c0:	41 83 fd 01          	cmp    $0x1,%r13d
   246c4:	75 a0                	jne    24666 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x156>
   246c6:	eb c9                	jmp    24691 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x181>
   246c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   246cf:	00 
    return STBI_MALLOC(size);
   246d0:	48 89 f7             	mov    %rsi,%rdi
   246d3:	e8 88 20 fe ff       	call   6760 <malloc@plt>
   246d8:	49 89 c4             	mov    %rax,%r12
               if (!out)
   246db:	48 85 c0             	test   %rax,%rax
   246de:	0f 84 37 01 00 00    	je     2481b <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x30b>
               if (delays) {
   246e4:	4d 85 f6             	test   %r14,%r14
   246e7:	74 b7                	je     246a0 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x190>
    return STBI_MALLOC(size);
   246e9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   246ee:	e8 6d 20 fe ff       	call   6760 <malloc@plt>
                  *delays = (int*) stbi__malloc( layers * sizeof(int) );
   246f3:	49 89 06             	mov    %rax,(%r14)
                  if (!*delays)
   246f6:	48 85 c0             	test   %rax,%rax
   246f9:	0f 85 4e ff ff ff    	jne    2464d <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x13d>
   STBI_FREE(g->out);
   246ff:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   24704:	e8 97 1f fe ff       	call   66a0 <free@plt>
   STBI_FREE(g->history);
   24709:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
   2470e:	e8 8d 1f fe ff       	call   66a0 <free@plt>
   STBI_FREE(g->background);
   24713:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
   24718:	e8 83 1f fe ff       	call   66a0 <free@plt>
   if (out) STBI_FREE(out);
   2471d:	4c 89 e7             	mov    %r12,%rdi
   24720:	e8 7b 1f fe ff       	call   66a0 <free@plt>
   if (delays && *delays) STBI_FREE(*delays);
   24725:	49 8b 3e             	mov    (%r14),%rdi
   24728:	48 85 ff             	test   %rdi,%rdi
   2472b:	0f 85 cd 00 00 00    	jne    247fe <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x2ee>
   24731:	e9 cd 00 00 00       	jmp    24803 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x2f3>
   24736:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2473d:	00 00 00 
      STBI_FREE(g.out);
   24740:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   24745:	4c 8b 7c 24 48       	mov    0x48(%rsp),%r15
   2474a:	e8 51 1f fe ff       	call   66a0 <free@plt>
      STBI_FREE(g.history);
   2474f:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
   24754:	e8 47 1f fe ff       	call   66a0 <free@plt>
      STBI_FREE(g.background);
   24759:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
   2475e:	e8 3d 1f fe ff       	call   66a0 <free@plt>
      if (req_comp && req_comp != 4)
   24763:	f7 84 24 00 89 00 00 	testl  $0xfffffffb,0x8900(%rsp)
   2476a:	fb ff ff ff 
   2476e:	75 35                	jne    247a5 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x295>
      *z = layers;
   24770:	45 89 2f             	mov    %r13d,(%r15)
}
   24773:	48 81 c4 c8 88 00 00 	add    $0x88c8,%rsp
   2477a:	4c 89 e0             	mov    %r12,%rax
   2477d:	5b                   	pop    %rbx
   2477e:	5d                   	pop    %rbp
   2477f:	41 5c                	pop    %r12
   24781:	41 5d                	pop    %r13
   24783:	41 5e                	pop    %r14
   24785:	41 5f                	pop    %r15
   24787:	c3                   	ret
   24788:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2478f:	00 
   stbi__g_failure_reason = str;
   24790:	48 8d 05 04 34 01 00 	lea    0x13404(%rip),%rax        # 37b9b <_ZSt19piecewise_construct+0x254>
      return stbi__errpuc("not GIF", "Image was not as a gif type.");
   24797:	45 31 e4             	xor    %r12d,%r12d
   stbi__g_failure_reason = str;
   2479a:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   247a1:	ff ff 
      return stbi__errpuc("not GIF", "Image was not as a gif type.");
   247a3:	eb ce                	jmp    24773 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x263>
         out = stbi__convert_format(out, 4, req_comp, layers * g.w, g.h);
   247a5:	8b 4c 24 50          	mov    0x50(%rsp),%ecx
   247a9:	44 8b 44 24 54       	mov    0x54(%rsp),%r8d
   247ae:	4c 89 e7             	mov    %r12,%rdi
   247b1:	be 04 00 00 00       	mov    $0x4,%esi
   247b6:	8b 94 24 00 89 00 00 	mov    0x8900(%rsp),%edx
   247bd:	41 0f af cd          	imul   %r13d,%ecx
   247c1:	e8 3a 09 ff ff       	call   15100 <_ZL20stbi__convert_formatPhiijj.part.0>
   247c6:	49 89 c4             	mov    %rax,%r12
   247c9:	eb a5                	jmp    24770 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x260>
   STBI_FREE(g->out);
   247cb:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   247d0:	e8 cb 1e fe ff       	call   66a0 <free@plt>
   STBI_FREE(g->history);
   247d5:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
   247da:	e8 c1 1e fe ff       	call   66a0 <free@plt>
   STBI_FREE(g->background);
   247df:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
   247e4:	e8 b7 1e fe ff       	call   66a0 <free@plt>
   if (out) STBI_FREE(out);
   247e9:	4c 89 e7             	mov    %r12,%rdi
   247ec:	e8 af 1e fe ff       	call   66a0 <free@plt>
   if (delays && *delays) STBI_FREE(*delays);
   247f1:	4d 85 f6             	test   %r14,%r14
   247f4:	74 0d                	je     24803 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x2f3>
   247f6:	49 8b 3e             	mov    (%r14),%rdi
   247f9:	48 85 ff             	test   %rdi,%rdi
   247fc:	74 05                	je     24803 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x2f3>
   247fe:	e8 9d 1e fe ff       	call   66a0 <free@plt>
   stbi__g_failure_reason = str;
   24803:	48 8d 05 2b 32 01 00 	lea    0x1322b(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
                  return stbi__load_gif_main_outofmem(&g, out, delays);
   2480a:	45 31 e4             	xor    %r12d,%r12d
   stbi__g_failure_reason = str;
   2480d:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   24814:	ff ff 
                  return stbi__load_gif_main_outofmem(&g, out, delays);
   24816:	e9 58 ff ff ff       	jmp    24773 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x263>
   STBI_FREE(g->out);
   2481b:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   24820:	e8 7b 1e fe ff       	call   66a0 <free@plt>
   STBI_FREE(g->history);
   24825:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
   2482a:	e8 71 1e fe ff       	call   66a0 <free@plt>
   STBI_FREE(g->background);
   2482f:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
   24834:	e8 67 1e fe ff       	call   66a0 <free@plt>
   if (delays && *delays) STBI_FREE(*delays);
   24839:	4d 85 f6             	test   %r14,%r14
   2483c:	75 b8                	jne    247f6 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x2e6>
   2483e:	eb c3                	jmp    24803 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x2f3>
   STBI_FREE(g->out);
   24840:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   24845:	48 89 0c 24          	mov    %rcx,(%rsp)
   24849:	e8 52 1e fe ff       	call   66a0 <free@plt>
   STBI_FREE(g->history);
   2484e:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
   24853:	e8 48 1e fe ff       	call   66a0 <free@plt>
   STBI_FREE(g->background);
   24858:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
   2485d:	e8 3e 1e fe ff       	call   66a0 <free@plt>
   if (out) STBI_FREE(out);
   24862:	48 8b 3c 24          	mov    (%rsp),%rdi
   24866:	e8 35 1e fe ff       	call   66a0 <free@plt>
   if (delays && *delays) STBI_FREE(*delays);
   2486b:	49 8b 3e             	mov    (%r14),%rdi
   2486e:	48 85 ff             	test   %rdi,%rdi
   24871:	75 8b                	jne    247fe <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x2ee>
   24873:	eb 8e                	jmp    24803 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0+0x2f3>
   24875:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2487c:	00 00 00 00 

0000000000024880 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_>:
{
   24880:	41 57                	push   %r15
   24882:	41 56                	push   %r14
   24884:	41 55                	push   %r13
   24886:	49 89 cd             	mov    %rcx,%r13
   24889:	41 54                	push   %r12
   2488b:	49 89 f4             	mov    %rsi,%r12
   2488e:	55                   	push   %rbp
   2488f:	48 89 d5             	mov    %rdx,%rbp
   24892:	53                   	push   %rbx
   24893:	48 89 fb             	mov    %rdi,%rbx
   24896:	48 83 ec 18          	sub    $0x18,%rsp
   if (!x) x = &dummy;
   2489a:	48 85 f6             	test   %rsi,%rsi
   s->img_buffer = s->img_buffer_original;
   2489d:	f3 0f 6f 87 d0 00 00 	movdqu 0xd0(%rdi),%xmm0
   248a4:	00 
   if (!x) x = &dummy;
   248a5:	48 8d 44 24 0c       	lea    0xc(%rsp),%rax
   248aa:	4c 0f 44 e0          	cmove  %rax,%r12
   if (!y) y = &dummy;
   248ae:	48 85 d2             	test   %rdx,%rdx
   248b1:	0f 12 c8             	movhlps %xmm0,%xmm1
   s->img_buffer = s->img_buffer_original;
   248b4:	0f 11 87 c0 00 00 00 	movups %xmm0,0xc0(%rdi)
   if (!y) y = &dummy;
   248bb:	48 0f 44 e8          	cmove  %rax,%rbp
   if (!comp) comp = &dummy;
   248bf:	66 48 0f 7e c2       	movq   %xmm0,%rdx
   248c4:	48 85 c9             	test   %rcx,%rcx
   248c7:	4c 0f 44 e8          	cmove  %rax,%r13
   if (s->img_buffer < s->img_buffer_end)
   248cb:	66 48 0f 7e c8       	movq   %xmm1,%rax
   248d0:	48 39 c2             	cmp    %rax,%rdx
   248d3:	0f 83 f7 00 00 00    	jae    249d0 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x150>
      return *s->img_buffer++;
   248d9:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   248dd:	48 89 8f c0 00 00 00 	mov    %rcx,0xc0(%rdi)
   248e4:	44 0f b6 3a          	movzbl (%rdx),%r15d
   if (s->img_buffer < s->img_buffer_end)
   248e8:	48 39 c1             	cmp    %rax,%rcx
   248eb:	0f 83 37 01 00 00    	jae    24a28 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x1a8>
      return *s->img_buffer++;
   248f1:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   248f5:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   248fc:	0f b6 09             	movzbl (%rcx),%ecx
   if (p != 'P' || (t != '5' && t != '6')) {
   248ff:	41 80 ff 50          	cmp    $0x50,%r15b
   24903:	74 23                	je     24928 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0xa8>
   24905:	f3 0f 6f 83 d0 00 00 	movdqu 0xd0(%rbx),%xmm0
   2490c:	00 
   s->img_buffer = s->img_buffer_original;
   2490d:	0f 11 83 c0 00 00 00 	movups %xmm0,0xc0(%rbx)
}
   24914:	48 83 c4 18          	add    $0x18,%rsp
       return 0;
   24918:	31 c0                	xor    %eax,%eax
}
   2491a:	5b                   	pop    %rbx
   2491b:	5d                   	pop    %rbp
   2491c:	41 5c                	pop    %r12
   2491e:	41 5d                	pop    %r13
   24920:	41 5e                	pop    %r14
   24922:	41 5f                	pop    %r15
   24924:	c3                   	ret
   24925:	0f 1f 00             	nopl   (%rax)
   if (p != 'P' || (t != '5' && t != '6')) {
   24928:	8d 71 cb             	lea    -0x35(%rcx),%esi
   2492b:	40 80 fe 01          	cmp    $0x1,%sil
   2492f:	77 d4                	ja     24905 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x85>
   *comp = (t == '6') ? 3 : 1;  // '5' is 1-component .pgm; '6' is 3-component .ppm
   24931:	80 f9 36             	cmp    $0x36,%cl
   24934:	0f 94 c1             	sete   %cl
   24937:	0f b6 c9             	movzbl %cl,%ecx
   2493a:	8d 4c 09 01          	lea    0x1(%rcx,%rcx,1),%ecx
   2493e:	41 89 4d 00          	mov    %ecx,0x0(%r13)
   if (s->img_buffer < s->img_buffer_end)
   24942:	48 39 c2             	cmp    %rax,%rdx
   24945:	0f 82 4d 01 00 00    	jb     24a98 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x218>
   if (s->read_from_callbacks) {
   2494b:	8b 43 30             	mov    0x30(%rbx),%eax
   2494e:	45 31 ed             	xor    %r13d,%r13d
   24951:	85 c0                	test   %eax,%eax
   24953:	0f 85 b7 01 00 00    	jne    24b10 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x290>
   c = (char) stbi__get8(s);
   24959:	44 88 6c 24 0b       	mov    %r13b,0xb(%rsp)
   stbi__pnm_skip_whitespace(s, &c);
   2495e:	4c 8d 6c 24 0b       	lea    0xb(%rsp),%r13
   24963:	48 89 df             	mov    %rbx,%rdi
   24966:	4c 89 ee             	mov    %r13,%rsi
   24969:	e8 e2 28 ff ff       	call   17250 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc>
   *x = stbi__pnm_getinteger(s, &c); // read width
   2496e:	4c 89 ee             	mov    %r13,%rsi
   24971:	48 89 df             	mov    %rbx,%rdi
   24974:	e8 77 2b ff ff       	call   174f0 <_ZL20stbi__pnm_getintegerP13stbi__contextPc>
   stbi__pnm_skip_whitespace(s, &c);
   24979:	4c 89 ee             	mov    %r13,%rsi
   2497c:	48 89 df             	mov    %rbx,%rdi
   *x = stbi__pnm_getinteger(s, &c); // read width
   2497f:	41 89 04 24          	mov    %eax,(%r12)
   stbi__pnm_skip_whitespace(s, &c);
   24983:	e8 c8 28 ff ff       	call   17250 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc>
   *y = stbi__pnm_getinteger(s, &c); // read height
   24988:	4c 89 ee             	mov    %r13,%rsi
   2498b:	48 89 df             	mov    %rbx,%rdi
   2498e:	e8 5d 2b ff ff       	call   174f0 <_ZL20stbi__pnm_getintegerP13stbi__contextPc>
   stbi__pnm_skip_whitespace(s, &c);
   24993:	4c 89 ee             	mov    %r13,%rsi
   24996:	48 89 df             	mov    %rbx,%rdi
   *y = stbi__pnm_getinteger(s, &c); // read height
   24999:	89 45 00             	mov    %eax,0x0(%rbp)
   stbi__pnm_skip_whitespace(s, &c);
   2499c:	e8 af 28 ff ff       	call   17250 <_ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc>
   maxv = stbi__pnm_getinteger(s, &c);  // read max value
   249a1:	4c 89 ee             	mov    %r13,%rsi
   249a4:	48 89 df             	mov    %rbx,%rdi
   249a7:	e8 44 2b ff ff       	call   174f0 <_ZL20stbi__pnm_getintegerP13stbi__contextPc>
   if (maxv > 65535)
   249ac:	3d ff ff 00 00       	cmp    $0xffff,%eax
   249b1:	0f 8e f9 00 00 00    	jle    24ab0 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x230>
   stbi__g_failure_reason = str;
   249b7:	48 8d 05 12 33 01 00 	lea    0x13312(%rip),%rax        # 37cd0 <_ZSt19piecewise_construct+0x389>
   249be:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   249c5:	ff ff 
      return stbi__err("max value > 65535", "PPM image supports only 8-bit and 16-bit images");
   249c7:	e9 48 ff ff ff       	jmp    24914 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x94>
   249cc:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   249d0:	8b 4f 30             	mov    0x30(%rdi),%ecx
   249d3:	85 c9                	test   %ecx,%ecx
   249d5:	0f 84 32 ff ff ff    	je     2490d <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x8d>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   249db:	4c 8d 77 38          	lea    0x38(%rdi),%r14
   249df:	8b 57 34             	mov    0x34(%rdi),%edx
   249e2:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   249e6:	4c 89 f6             	mov    %r14,%rsi
   249e9:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   249ec:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   249f3:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   249f7:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   249fe:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   24a04:	85 c0                	test   %eax,%eax
   24a06:	0f 85 cc 00 00 00    	jne    24ad8 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x258>
      s->read_from_callbacks = 0;
   24a0c:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      return *s->img_buffer++;
   24a13:	45 31 ff             	xor    %r15d,%r15d
      *s->img_buffer = 0;
   24a16:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   24a1a:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   24a21:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   24a28:	8b 53 30             	mov    0x30(%rbx),%edx
   24a2b:	85 d2                	test   %edx,%edx
   24a2d:	0f 84 d2 fe ff ff    	je     24905 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x85>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24a33:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   24a37:	8b 53 34             	mov    0x34(%rbx),%edx
   24a3a:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   24a3e:	4c 89 f6             	mov    %r14,%rsi
   24a41:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24a44:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   24a4b:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   24a52:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   24a58:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   24a5c:	85 c0                	test   %eax,%eax
   24a5e:	0f 85 94 00 00 00    	jne    24af8 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x278>
      s->read_from_callbacks = 0;
   24a64:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   24a6b:	48 89 d0             	mov    %rdx,%rax
   24a6e:	31 c9                	xor    %ecx,%ecx
      *s->img_buffer = 0;
   24a70:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   24a74:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   24a7b:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   if (p != 'P' || (t != '5' && t != '6')) {
   24a82:	41 80 ff 50          	cmp    $0x50,%r15b
   24a86:	0f 84 9c fe ff ff    	je     24928 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0xa8>
   24a8c:	e9 74 fe ff ff       	jmp    24905 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x85>
   24a91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      return *s->img_buffer++;
   24a98:	48 8d 42 01          	lea    0x1(%rdx),%rax
   24a9c:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   c = (char) stbi__get8(s);
   24aa3:	44 0f b6 2a          	movzbl (%rdx),%r13d
      return *s->img_buffer++;
   24aa7:	e9 ad fe ff ff       	jmp    24959 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0xd9>
   24aac:	0f 1f 40 00          	nopl   0x0(%rax)
      return 16;
   24ab0:	3d 00 01 00 00       	cmp    $0x100,%eax
   24ab5:	0f 9d c0             	setge  %al
}
   24ab8:	48 83 c4 18          	add    $0x18,%rsp
      return 16;
   24abc:	0f b6 c0             	movzbl %al,%eax
}
   24abf:	5b                   	pop    %rbx
   24ac0:	5d                   	pop    %rbp
      return 16;
   24ac1:	8d 04 c5 08 00 00 00 	lea    0x8(,%rax,8),%eax
}
   24ac8:	41 5c                	pop    %r12
   24aca:	41 5d                	pop    %r13
   24acc:	41 5e                	pop    %r14
   24ace:	41 5f                	pop    %r15
   24ad0:	c3                   	ret
   24ad1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   24ad8:	48 98                	cltq
      return *s->img_buffer++;
   24ada:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   24ae1:	44 0f b6 7b 38       	movzbl 0x38(%rbx),%r15d
      s->img_buffer_end = s->buffer_start + n;
   24ae6:	4c 01 f0             	add    %r14,%rax
   24ae9:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   24af0:	e9 f3 fd ff ff       	jmp    248e8 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x68>
   24af5:	0f 1f 00             	nopl   (%rax)
      s->img_buffer_end = s->buffer_start + n;
   24af8:	48 98                	cltq
      return *s->img_buffer++;
   24afa:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   24afe:	4c 01 f0             	add    %r14,%rax
   24b01:	e9 6e ff ff ff       	jmp    24a74 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x1f4>
   24b06:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   24b0d:	00 00 00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24b10:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   24b14:	8b 53 34             	mov    0x34(%rbx),%edx
   24b17:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   24b1b:	4c 89 f6             	mov    %r14,%rsi
   24b1e:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24b21:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   24b28:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   24b2f:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   24b35:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   24b39:	85 c0                	test   %eax,%eax
   24b3b:	75 23                	jne    24b60 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x2e0>
      s->read_from_callbacks = 0;
   24b3d:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   24b44:	49 89 d6             	mov    %rdx,%r14
      *s->img_buffer = 0;
   24b47:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   24b4b:	4c 89 b3 c8 00 00 00 	mov    %r14,0xc8(%rbx)
      return *s->img_buffer++;
   24b52:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   24b59:	e9 fb fd ff ff       	jmp    24959 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0xd9>
   24b5e:	66 90                	xchg   %ax,%ax
      s->img_buffer_end = s->buffer_start + n;
   24b60:	48 98                	cltq
   c = (char) stbi__get8(s);
   24b62:	44 0f b6 6b 38       	movzbl 0x38(%rbx),%r13d
      s->img_buffer_end = s->buffer_start + n;
   24b67:	49 01 c6             	add    %rax,%r14
   24b6a:	eb df                	jmp    24b4b <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_+0x2cb>
   24b6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000024b70 <_ZL20stbi__parse_png_fileP9stbi__pngii>:
{
   24b70:	41 57                	push   %r15
   z->idata = NULL;
   24b72:	66 0f ef c0          	pxor   %xmm0,%xmm0
{
   24b76:	49 89 ff             	mov    %rdi,%r15
   24b79:	41 56                	push   %r14
   24b7b:	41 55                	push   %r13
   24b7d:	41 54                	push   %r12
   24b7f:	55                   	push   %rbp
   24b80:	53                   	push   %rbx
   stbi_uc has_trans=0, tc[3]={0};
   24b81:	31 db                	xor    %ebx,%ebx
{
   24b83:	48 81 ec d8 17 00 00 	sub    $0x17d8,%rsp
   z->out = NULL;
   24b8a:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
   24b91:	00 
{
   24b92:	89 74 24 08          	mov    %esi,0x8(%rsp)
   stbi__context *s = z->s;
   24b96:	48 8b 37             	mov    (%rdi),%rsi
   z->idata = NULL;
   24b99:	0f 11 47 08          	movups %xmm0,0x8(%rdi)
   if (s->img_buffer < s->img_buffer_end)
   24b9d:	48 8b 8e c0 00 00 00 	mov    0xc0(%rsi),%rcx
   24ba4:	48 8b 86 c8 00 00 00 	mov    0xc8(%rsi),%rax
{
   24bab:	89 54 24 30          	mov    %edx,0x30(%rsp)
   stbi_uc has_trans=0, tc[3]={0};
   24baf:	66 89 9c 24 67 03 00 	mov    %bx,0x367(%rsp)
   24bb6:	00 
   24bb7:	c6 84 24 69 03 00 00 	movb   $0x0,0x369(%rsp)
   24bbe:	00 
   stbi__context *s = z->s;
   24bbf:	48 89 34 24          	mov    %rsi,(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   24bc3:	48 39 c1             	cmp    %rax,%rcx
   24bc6:	72 38                	jb     24c00 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x90>
   if (s->read_from_callbacks) {
   24bc8:	44 8b 5e 30          	mov    0x30(%rsi),%r11d
   24bcc:	45 85 db             	test   %r11d,%r11d
   24bcf:	0f 85 ab 0b 00 00    	jne    25780 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xc10>
   stbi__g_failure_reason = str;
   24bd5:	48 8d 05 06 31 01 00 	lea    0x13106(%rip),%rax        # 37ce2 <_ZSt19piecewise_construct+0x39b>
   24bdc:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   24be3:	ff ff 
   return 0;
   24be5:	0f 1f 00             	nopl   (%rax)
   if (!stbi__check_png_header(s)) return 0;
   24be8:	31 c0                	xor    %eax,%eax
}
   24bea:	48 81 c4 d8 17 00 00 	add    $0x17d8,%rsp
   24bf1:	5b                   	pop    %rbx
   24bf2:	5d                   	pop    %rbp
   24bf3:	41 5c                	pop    %r12
   24bf5:	41 5d                	pop    %r13
   24bf7:	41 5e                	pop    %r14
   24bf9:	41 5f                	pop    %r15
   24bfb:	c3                   	ret
   24bfc:	0f 1f 40 00          	nopl   0x0(%rax)
      return *s->img_buffer++;
   24c00:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   24c04:	48 89 96 c0 00 00 00 	mov    %rdx,0xc0(%rsi)
   24c0b:	0f b6 09             	movzbl (%rcx),%ecx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   24c0e:	80 f9 89             	cmp    $0x89,%cl
   24c11:	75 c2                	jne    24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   if (s->img_buffer < s->img_buffer_end)
   24c13:	48 39 c2             	cmp    %rax,%rdx
   24c16:	72 60                	jb     24c78 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x108>
   if (s->read_from_callbacks) {
   24c18:	48 8b 04 24          	mov    (%rsp),%rax
   24c1c:	44 8b 50 30          	mov    0x30(%rax),%r10d
   24c20:	45 85 d2             	test   %r10d,%r10d
   24c23:	74 b0                	je     24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24c25:	48 8d 68 38          	lea    0x38(%rax),%rbp
   24c29:	48 89 c3             	mov    %rax,%rbx
   24c2c:	8b 50 34             	mov    0x34(%rax),%edx
   24c2f:	48 8b 78 28          	mov    0x28(%rax),%rdi
   24c33:	48 89 ee             	mov    %rbp,%rsi
   24c36:	ff 50 10             	call   *0x10(%rax)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24c39:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   24c40:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24c44:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   24c4b:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   24c51:	85 c0                	test   %eax,%eax
   24c53:	0f 84 37 0c 00 00    	je     25890 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xd20>
      s->img_buffer_end = s->buffer_start + n;
   24c59:	48 98                	cltq
      return *s->img_buffer++;
   24c5b:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   24c62:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   24c66:	48 01 e8             	add    %rbp,%rax
   24c69:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   24c70:	eb 18                	jmp    24c8a <_ZL20stbi__parse_png_fileP9stbi__pngii+0x11a>
   24c72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   24c78:	48 8b 34 24          	mov    (%rsp),%rsi
   24c7c:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   24c80:	48 89 8e c0 00 00 00 	mov    %rcx,0xc0(%rsi)
   24c87:	0f b6 12             	movzbl (%rdx),%edx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   24c8a:	80 fa 50             	cmp    $0x50,%dl
   24c8d:	0f 85 42 ff ff ff    	jne    24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   if (s->img_buffer < s->img_buffer_end)
   24c93:	48 39 c1             	cmp    %rax,%rcx
   24c96:	72 68                	jb     24d00 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x190>
   if (s->read_from_callbacks) {
   24c98:	48 8b 04 24          	mov    (%rsp),%rax
   24c9c:	44 8b 48 30          	mov    0x30(%rax),%r9d
   24ca0:	45 85 c9             	test   %r9d,%r9d
   24ca3:	0f 84 2c ff ff ff    	je     24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24ca9:	48 8d 68 38          	lea    0x38(%rax),%rbp
   24cad:	48 89 c3             	mov    %rax,%rbx
   24cb0:	8b 50 34             	mov    0x34(%rax),%edx
   24cb3:	48 8b 78 28          	mov    0x28(%rax),%rdi
   24cb7:	48 89 ee             	mov    %rbp,%rsi
   24cba:	ff 50 10             	call   *0x10(%rax)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24cbd:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   24cc4:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   24ccb:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   24cd1:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   24cd5:	85 c0                	test   %eax,%eax
   24cd7:	0f 84 7b 0b 00 00    	je     25858 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xce8>
      s->img_buffer_end = s->buffer_start + n;
   24cdd:	48 98                	cltq
      return *s->img_buffer++;
   24cdf:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   24ce6:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   24cea:	48 01 e8             	add    %rbp,%rax
   24ced:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   24cf4:	eb 1c                	jmp    24d12 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1a2>
   24cf6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   24cfd:	00 00 00 
      return *s->img_buffer++;
   24d00:	48 8b 3c 24          	mov    (%rsp),%rdi
   24d04:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   24d08:	48 89 97 c0 00 00 00 	mov    %rdx,0xc0(%rdi)
   24d0f:	0f b6 09             	movzbl (%rcx),%ecx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   24d12:	80 f9 4e             	cmp    $0x4e,%cl
   24d15:	0f 85 ba fe ff ff    	jne    24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   if (s->img_buffer < s->img_buffer_end)
   24d1b:	48 39 c2             	cmp    %rax,%rdx
   24d1e:	72 60                	jb     24d80 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x210>
   if (s->read_from_callbacks) {
   24d20:	48 8b 04 24          	mov    (%rsp),%rax
   24d24:	44 8b 40 30          	mov    0x30(%rax),%r8d
   24d28:	45 85 c0             	test   %r8d,%r8d
   24d2b:	0f 84 a4 fe ff ff    	je     24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24d31:	48 8d 68 38          	lea    0x38(%rax),%rbp
   24d35:	48 89 c3             	mov    %rax,%rbx
   24d38:	8b 50 34             	mov    0x34(%rax),%edx
   24d3b:	48 8b 78 28          	mov    0x28(%rax),%rdi
   24d3f:	48 89 ee             	mov    %rbp,%rsi
   24d42:	ff 50 10             	call   *0x10(%rax)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24d45:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   24d4c:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24d50:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   24d57:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   24d5d:	85 c0                	test   %eax,%eax
   24d5f:	0f 84 2b 0b 00 00    	je     25890 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xd20>
      s->img_buffer_end = s->buffer_start + n;
   24d65:	48 98                	cltq
      return *s->img_buffer++;
   24d67:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   24d6e:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   24d72:	48 01 e8             	add    %rbp,%rax
   24d75:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   24d7c:	eb 14                	jmp    24d92 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x222>
   24d7e:	66 90                	xchg   %ax,%ax
      return *s->img_buffer++;
   24d80:	48 8b 34 24          	mov    (%rsp),%rsi
   24d84:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   24d88:	48 89 8e c0 00 00 00 	mov    %rcx,0xc0(%rsi)
   24d8f:	0f b6 12             	movzbl (%rdx),%edx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   24d92:	80 fa 47             	cmp    $0x47,%dl
   24d95:	0f 85 3a fe ff ff    	jne    24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   if (s->img_buffer < s->img_buffer_end)
   24d9b:	48 39 c1             	cmp    %rax,%rcx
   24d9e:	72 60                	jb     24e00 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x290>
   if (s->read_from_callbacks) {
   24da0:	48 8b 04 24          	mov    (%rsp),%rax
   24da4:	8b 78 30             	mov    0x30(%rax),%edi
   24da7:	85 ff                	test   %edi,%edi
   24da9:	0f 84 26 fe ff ff    	je     24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24daf:	48 8d 68 38          	lea    0x38(%rax),%rbp
   24db3:	48 89 c3             	mov    %rax,%rbx
   24db6:	8b 50 34             	mov    0x34(%rax),%edx
   24db9:	48 8b 78 28          	mov    0x28(%rax),%rdi
   24dbd:	48 89 ee             	mov    %rbp,%rsi
   24dc0:	ff 50 10             	call   *0x10(%rax)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24dc3:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   24dca:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   24dd1:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   24dd7:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   24ddb:	85 c0                	test   %eax,%eax
   24ddd:	0f 84 75 0a 00 00    	je     25858 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xce8>
      s->img_buffer_end = s->buffer_start + n;
   24de3:	48 98                	cltq
      return *s->img_buffer++;
   24de5:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   24dec:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   24df0:	48 01 e8             	add    %rbp,%rax
   24df3:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   24dfa:	eb 16                	jmp    24e12 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x2a2>
   24dfc:	0f 1f 40 00          	nopl   0x0(%rax)
      return *s->img_buffer++;
   24e00:	48 8b 3c 24          	mov    (%rsp),%rdi
   24e04:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   24e08:	48 89 97 c0 00 00 00 	mov    %rdx,0xc0(%rdi)
   24e0f:	0f b6 09             	movzbl (%rcx),%ecx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   24e12:	80 f9 0d             	cmp    $0xd,%cl
   24e15:	0f 85 ba fd ff ff    	jne    24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   if (s->img_buffer < s->img_buffer_end)
   24e1b:	48 39 c2             	cmp    %rax,%rdx
   24e1e:	72 60                	jb     24e80 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x310>
   if (s->read_from_callbacks) {
   24e20:	48 8b 04 24          	mov    (%rsp),%rax
   24e24:	8b 70 30             	mov    0x30(%rax),%esi
   24e27:	85 f6                	test   %esi,%esi
   24e29:	0f 84 a6 fd ff ff    	je     24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24e2f:	48 8d 68 38          	lea    0x38(%rax),%rbp
   24e33:	48 89 c3             	mov    %rax,%rbx
   24e36:	8b 50 34             	mov    0x34(%rax),%edx
   24e39:	48 8b 78 28          	mov    0x28(%rax),%rdi
   24e3d:	48 89 ee             	mov    %rbp,%rsi
   24e40:	ff 50 10             	call   *0x10(%rax)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24e43:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   24e4a:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24e4e:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   24e55:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   24e5b:	85 c0                	test   %eax,%eax
   24e5d:	0f 84 2d 0a 00 00    	je     25890 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xd20>
      s->img_buffer_end = s->buffer_start + n;
   24e63:	48 98                	cltq
      return *s->img_buffer++;
   24e65:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   24e6c:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   24e70:	48 01 e8             	add    %rbp,%rax
   24e73:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   24e7a:	eb 16                	jmp    24e92 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x322>
   24e7c:	0f 1f 40 00          	nopl   0x0(%rax)
      return *s->img_buffer++;
   24e80:	48 8b 34 24          	mov    (%rsp),%rsi
   24e84:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   24e88:	48 89 8e c0 00 00 00 	mov    %rcx,0xc0(%rsi)
   24e8f:	0f b6 12             	movzbl (%rdx),%edx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   24e92:	80 fa 0a             	cmp    $0xa,%dl
   24e95:	0f 85 3a fd ff ff    	jne    24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   if (s->img_buffer < s->img_buffer_end)
   24e9b:	48 39 c1             	cmp    %rax,%rcx
   24e9e:	72 60                	jb     24f00 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x390>
   if (s->read_from_callbacks) {
   24ea0:	48 8b 04 24          	mov    (%rsp),%rax
   24ea4:	8b 48 30             	mov    0x30(%rax),%ecx
   24ea7:	85 c9                	test   %ecx,%ecx
   24ea9:	0f 84 26 fd ff ff    	je     24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   24eaf:	48 8d 68 38          	lea    0x38(%rax),%rbp
   24eb3:	48 89 c3             	mov    %rax,%rbx
   24eb6:	8b 50 34             	mov    0x34(%rax),%edx
   24eb9:	48 8b 78 28          	mov    0x28(%rax),%rdi
   24ebd:	48 89 ee             	mov    %rbp,%rsi
   24ec0:	ff 50 10             	call   *0x10(%rax)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   24ec3:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   24eca:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   24ed1:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   24ed7:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   24edb:	85 c0                	test   %eax,%eax
   24edd:	0f 84 75 09 00 00    	je     25858 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xce8>
      s->img_buffer_end = s->buffer_start + n;
   24ee3:	48 98                	cltq
      return *s->img_buffer++;
   24ee5:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   24eec:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   24ef0:	48 01 e8             	add    %rbp,%rax
   24ef3:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   24efa:	eb 16                	jmp    24f12 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x3a2>
   24efc:	0f 1f 40 00          	nopl   0x0(%rax)
      return *s->img_buffer++;
   24f00:	48 8b 3c 24          	mov    (%rsp),%rdi
   24f04:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   24f08:	48 89 97 c0 00 00 00 	mov    %rdx,0xc0(%rdi)
   24f0f:	0f b6 09             	movzbl (%rcx),%ecx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   24f12:	80 f9 1a             	cmp    $0x1a,%cl
   24f15:	0f 85 ba fc ff ff    	jne    24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   if (s->img_buffer < s->img_buffer_end)
   24f1b:	48 39 c2             	cmp    %rax,%rdx
   24f1e:	0f 83 2c 07 00 00    	jae    25650 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xae0>
      return *s->img_buffer++;
   24f24:	48 8b 0c 24          	mov    (%rsp),%rcx
   24f28:	48 8d 42 01          	lea    0x1(%rdx),%rax
   24f2c:	48 89 81 c0 00 00 00 	mov    %rax,0xc0(%rcx)
   24f33:	0f b6 12             	movzbl (%rdx),%edx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   24f36:	80 fa 0a             	cmp    $0xa,%dl
   24f39:	0f 85 96 fc ff ff    	jne    24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   int first=1,k,interlace=0, color=0, is_iphone=0;
   24f3f:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%rsp)
   24f46:	00 
            pal_len = c.length / 3;
   24f47:	48 8b 1c 24          	mov    (%rsp),%rbx
   stbi__uint32 ioff=0, idata_limit=0, i, pal_len=0;
   24f4b:	45 31 e4             	xor    %r12d,%r12d
   int first=1,k,interlace=0, color=0, is_iphone=0;
   24f4e:	41 be 01 00 00 00    	mov    $0x1,%r14d
   24f54:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%rsp)
   24f5b:	00 
   24f5c:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
   24f63:	00 
   stbi__uint32 ioff=0, idata_limit=0, i, pal_len=0;
   24f64:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
   24f6b:	00 
   24f6c:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
   24f73:	00 
   stbi_uc has_trans=0, tc[3]={0};
   24f74:	c6 44 24 40 00       	movb   $0x0,0x40(%rsp)
   stbi_uc palette[1024], pal_img_n=0;
   24f79:	c6 44 24 14 00       	movb   $0x0,0x14(%rsp)
   24f7e:	66 90                	xchg   %ax,%ax
   stbi__uint32 z = stbi__get16be(s);
   24f80:	48 89 df             	mov    %rbx,%rdi
   24f83:	e8 28 93 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   return (z << 16) + stbi__get16be(s);
   24f88:	48 89 df             	mov    %rbx,%rdi
   stbi__uint32 z = stbi__get16be(s);
   24f8b:	41 89 c5             	mov    %eax,%r13d
   return (z << 16) + stbi__get16be(s);
   24f8e:	e8 1d 93 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   24f93:	41 c1 e5 10          	shl    $0x10,%r13d
   stbi__uint32 z = stbi__get16be(s);
   24f97:	48 89 df             	mov    %rbx,%rdi
   return (z << 16) + stbi__get16be(s);
   24f9a:	41 8d 6c 05 00       	lea    0x0(%r13,%rax,1),%ebp
   stbi__uint32 z = stbi__get16be(s);
   24f9f:	e8 0c 93 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   return (z << 16) + stbi__get16be(s);
   24fa4:	48 89 df             	mov    %rbx,%rdi
   stbi__uint32 z = stbi__get16be(s);
   24fa7:	41 89 c5             	mov    %eax,%r13d
   return (z << 16) + stbi__get16be(s);
   24faa:	e8 01 93 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   24faf:	41 c1 e5 10          	shl    $0x10,%r13d
   24fb3:	44 01 e8             	add    %r13d,%eax
      switch (c.type) {
   24fb6:	3d 52 44 48 49       	cmp    $0x49484452,%eax
   24fbb:	0f 84 0f 03 00 00    	je     252d0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x760>
   24fc1:	0f 87 19 02 00 00    	ja     251e0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x670>
   24fc7:	3d 54 41 44 49       	cmp    $0x49444154,%eax
   24fcc:	0f 84 36 04 00 00    	je     25408 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x898>
   24fd2:	3d 44 4e 45 49       	cmp    $0x49454e44,%eax
   24fd7:	0f 85 b3 02 00 00    	jne    25290 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x720>
            if (first) return stbi__err("first not IHDR", "Corrupt PNG");
   24fdd:	45 85 f6             	test   %r14d,%r14d
   24fe0:	0f 85 d2 06 00 00    	jne    256b8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb48>
            if (scan != STBI__SCAN_load) return 1;
   24fe6:	44 8b 4c 24 08       	mov    0x8(%rsp),%r9d
   24feb:	45 85 c9             	test   %r9d,%r9d
   24fee:	0f 85 a0 0c 00 00    	jne    25c94 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1124>
            if (z->idata == NULL) return stbi__err("no IDAT","Corrupt PNG");
   24ff4:	4d 8b 6f 08          	mov    0x8(%r15),%r13
   24ff8:	4d 85 ed             	test   %r13,%r13
   24ffb:	0f 84 b7 0a 00 00    	je     25ab8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xf48>
            raw_len = bpl * s->img_y * s->img_n /* pixels */ + s->img_y /* filter mode per row */;
   25001:	48 8b 0c 24          	mov    (%rsp),%rcx
   25005:	8b 6c 24 34          	mov    0x34(%rsp),%ebp
   25009:	8b 41 04             	mov    0x4(%rcx),%eax
            bpl = (s->img_x * z->depth + 7) / 8; // bytes per line, per component
   2500c:	44 8b 21             	mov    (%rcx),%r12d
   2500f:	83 f5 01             	xor    $0x1,%ebp
   25012:	45 0f af 67 20       	imul   0x20(%r15),%r12d
            raw_len = bpl * s->img_y * s->img_n /* pixels */ + s->img_y /* filter mode per row */;
   25017:	8b 51 08             	mov    0x8(%rcx),%edx
   2501a:	0f af d0             	imul   %eax,%edx
            bpl = (s->img_x * z->depth + 7) / 8; // bytes per line, per component
   2501d:	41 83 c4 07          	add    $0x7,%r12d
   25021:	41 c1 ec 03          	shr    $0x3,%r12d
            raw_len = bpl * s->img_y * s->img_n /* pixels */ + s->img_y /* filter mode per row */;
   25025:	44 0f af e2          	imul   %edx,%r12d
   25029:	41 01 c4             	add    %eax,%r12d
   char *p = (char *) stbi__malloc(initial_size);
   2502c:	4d 63 e4             	movslq %r12d,%r12
    return STBI_MALLOC(size);
   2502f:	4c 89 e7             	mov    %r12,%rdi
   25032:	e8 29 17 fe ff       	call   6760 <malloc@plt>
   25037:	66 48 0f 6e c8       	movq   %rax,%xmm1
   2503c:	66 0f 6c c9          	punpcklqdq %xmm1,%xmm1
   if (p == NULL) return NULL;
   25040:	48 85 c0             	test   %rax,%rax
   25043:	0f 84 69 14 00 00    	je     264b2 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1942>
   a.zbuffer_end = (stbi_uc *) buffer + len;
   25049:	48 63 54 24 18       	movslq 0x18(%rsp),%rdx
   a->zout_end   = obuf + olen;
   2504e:	4c 01 e0             	add    %r12,%rax
   a.zbuffer = (stbi_uc *) buffer;
   25051:	66 49 0f 6e c5       	movq   %r13,%xmm0
   return stbi__parse_zlib(a, parse_header);
   25056:	89 ee                	mov    %ebp,%esi
   a->zout_end   = obuf + olen;
   25058:	48 89 84 24 f8 07 00 	mov    %rax,0x7f8(%rsp)
   2505f:	00 
   return stbi__parse_zlib(a, parse_header);
   25060:	48 8d 84 24 d0 07 00 	lea    0x7d0(%rsp),%rax
   25067:	00 
   a.zbuffer_end = (stbi_uc *) buffer + len;
   25068:	4c 01 ea             	add    %r13,%rdx
   return stbi__parse_zlib(a, parse_header);
   2506b:	48 89 c7             	mov    %rax,%rdi
   a->z_expandable = exp;
   2506e:	c7 84 24 00 08 00 00 	movl   $0x1,0x800(%rsp)
   25075:	01 00 00 00 
   a.zbuffer = (stbi_uc *) buffer;
   25079:	66 48 0f 6e da       	movq   %rdx,%xmm3
   return stbi__parse_zlib(a, parse_header);
   2507e:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
   a.zbuffer = (stbi_uc *) buffer;
   25083:	66 0f 6c c3          	punpcklqdq %xmm3,%xmm0
   a->zout       = obuf;
   25087:	0f 11 8c 24 e8 07 00 	movups %xmm1,0x7e8(%rsp)
   2508e:	00 
   a.zbuffer = (stbi_uc *) buffer;
   2508f:	0f 29 84 24 d0 07 00 	movaps %xmm0,0x7d0(%rsp)
   25096:	00 
   return stbi__parse_zlib(a, parse_header);
   25097:	e8 c4 78 ff ff       	call   1c960 <_ZL16stbi__parse_zlibP10stbi__zbufi>
   if (stbi__do_zlib(&a, p, initial_size, 1, parse_header)) {
   2509c:	85 c0                	test   %eax,%eax
   2509e:	0f 84 01 14 00 00    	je     264a5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1935>
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
   250a4:	48 8b 84 24 f0 07 00 	mov    0x7f0(%rsp),%rax
   250ab:	00 
   250ac:	8b 8c 24 e8 07 00 00 	mov    0x7e8(%rsp),%ecx
   250b3:	29 c1                	sub    %eax,%ecx
            z->expanded = (stbi_uc *) stbi_zlib_decode_malloc_guesssize_headerflag((char *) z->idata, ioff, raw_len, (int *) &raw_len, !is_iphone);
   250b5:	49 89 47 10          	mov    %rax,0x10(%r15)
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
   250b9:	89 8c 24 8c 00 00 00 	mov    %ecx,0x8c(%rsp)
            if (z->expanded == NULL) return 0; // zlib should set error
   250c0:	48 85 c0             	test   %rax,%rax
   250c3:	0f 84 1f fb ff ff    	je     24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
            STBI_FREE(z->idata); z->idata = NULL;
   250c9:	49 8b 7f 08          	mov    0x8(%r15),%rdi
   250cd:	e8 ce 15 fe ff       	call   66a0 <free@plt>
            if ((req_comp == s->img_n+1 && req_comp != 3 && !pal_img_n) || has_trans)
   250d2:	48 8b 04 24          	mov    (%rsp),%rax
   250d6:	8b 4c 24 30          	mov    0x30(%rsp),%ecx
            STBI_FREE(z->idata); z->idata = NULL;
   250da:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
   250e1:	00 
            if ((req_comp == s->img_n+1 && req_comp != 3 && !pal_img_n) || has_trans)
   250e2:	8b 40 08             	mov    0x8(%rax),%eax
   250e5:	89 84 24 80 00 00 00 	mov    %eax,0x80(%rsp)
   250ec:	83 c0 01             	add    $0x1,%eax
   250ef:	39 c8                	cmp    %ecx,%eax
   250f1:	0f 84 28 0c 00 00    	je     25d1f <_ZL20stbi__parse_png_fileP9stbi__pngii+0x11af>
               s->img_out_n = s->img_n+1;
   250f7:	80 7c 24 40 00       	cmpb   $0x0,0x40(%rsp)
   250fc:	0f 44 84 24 80 00 00 	cmove  0x80(%rsp),%eax
   25103:	00 
   25104:	89 84 24 80 00 00 00 	mov    %eax,0x80(%rsp)
   2510b:	89 c1                	mov    %eax,%ecx
   2510d:	48 8b 04 24          	mov    (%rsp),%rax
      return stbi__create_png_image_raw(a, image_data, image_data_len, out_n, a->s->img_x, a->s->img_y, depth, color);
   25111:	4d 8b 2f             	mov    (%r15),%r13
            if (!stbi__create_png_image(z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace)) return 0;
   25114:	49 8b 77 10          	mov    0x10(%r15),%rsi
   if (!interlaced)
   25118:	44 8b 44 24 28       	mov    0x28(%rsp),%r8d
   2511d:	89 48 0c             	mov    %ecx,0xc(%rax)
            if (!stbi__create_png_image(z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace)) return 0;
   25120:	41 8b 7f 20          	mov    0x20(%r15),%edi
   int out_bytes = out_n * bytes;
   25124:	8d 04 09             	lea    (%rcx,%rcx,1),%eax
      return stbi__create_png_image_raw(a, image_data, image_data_len, out_n, a->s->img_x, a->s->img_y, depth, color);
   25127:	45 8b 4d 04          	mov    0x4(%r13),%r9d
   2512b:	41 8b 6d 00          	mov    0x0(%r13),%ebp
            if (!stbi__create_png_image(z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace)) return 0;
   2512f:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
   25136:	00 
   int out_bytes = out_n * bytes;
   25137:	83 ff 10             	cmp    $0x10,%edi
            if (!stbi__create_png_image(z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace)) return 0;
   2513a:	89 bc 24 98 00 00 00 	mov    %edi,0x98(%rsp)
   int out_bytes = out_n * bytes;
   25141:	0f 45 c1             	cmovne %ecx,%eax
   25144:	41 89 c6             	mov    %eax,%r14d
   if (!interlaced)
   25147:	45 85 c0             	test   %r8d,%r8d
   2514a:	0f 85 f7 0b 00 00    	jne    25d47 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x11d7>
      return stbi__create_png_image_raw(a, image_data, image_data_len, out_n, a->s->img_x, a->s->img_y, depth, color);
   25150:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
   25154:	41 89 e8             	mov    %ebp,%r8d
   25157:	50                   	push   %rax
   25158:	57                   	push   %rdi
   25159:	8b 94 24 9c 00 00 00 	mov    0x9c(%rsp),%edx
   25160:	4c 89 ff             	mov    %r15,%rdi
   25163:	e8 a8 24 ff ff       	call   17610 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii>
            if (!stbi__create_png_image(z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace)) return 0;
   25168:	5e                   	pop    %rsi
   25169:	5f                   	pop    %rdi
   2516a:	85 c0                	test   %eax,%eax
   2516c:	0f 84 76 fa ff ff    	je     24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
            if (has_trans) {
   25172:	80 7c 24 40 00       	cmpb   $0x0,0x40(%rsp)
   25177:	0f 85 04 0f 00 00    	jne    26081 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1511>
            if (is_iphone && stbi__de_iphone_flag && s->img_out_n > 2)
   2517d:	8b 5c 24 34          	mov    0x34(%rsp),%ebx
   25181:	85 db                	test   %ebx,%ebx
   25183:	0f 85 bf 12 00 00    	jne    26448 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x18d8>
            if (pal_img_n) {
   25189:	80 7c 24 14 00       	cmpb   $0x0,0x14(%rsp)
   2518e:	0f 84 e6 0a 00 00    	je     25c7a <_ZL20stbi__parse_png_fileP9stbi__pngii+0x110a>
               if (req_comp >= 3) s->img_out_n = req_comp;
   25194:	8b 4c 24 30          	mov    0x30(%rsp),%ecx
               s->img_n = pal_img_n; // record the actual colors we had
   25198:	48 8b 04 24          	mov    (%rsp),%rax
   2519c:	44 0f b6 74 24 14    	movzbl 0x14(%rsp),%r14d
               if (req_comp >= 3) s->img_out_n = req_comp;
   251a2:	83 f9 03             	cmp    $0x3,%ecx
               s->img_n = pal_img_n; // record the actual colors we had
   251a5:	44 89 70 08          	mov    %r14d,0x8(%rax)
               if (req_comp >= 3) s->img_out_n = req_comp;
   251a9:	44 0f 4d f1          	cmovge %ecx,%r14d
   251ad:	44 89 70 0c          	mov    %r14d,0xc(%rax)
   stbi__uint32 i, pixel_count = a->s->img_x * a->s->img_y;
   251b1:	49 8b 07             	mov    (%r15),%rax
   stbi_uc *p, *temp_out, *orig = a->out;
   251b4:	49 8b 6f 18          	mov    0x18(%r15),%rbp
   stbi__uint32 i, pixel_count = a->s->img_x * a->s->img_y;
   251b8:	44 8b 28             	mov    (%rax),%r13d
   251bb:	44 0f af 68 04       	imul   0x4(%rax),%r13d
   if (a < 0 || b < 0) return 0;
   251c0:	45 85 ed             	test   %r13d,%r13d
   251c3:	0f 89 d7 13 00 00    	jns    265a0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1a30>
   stbi__g_failure_reason = str;
   251c9:	48 8d 05 65 28 01 00 	lea    0x12865(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   251d0:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   251d7:	ff ff 
               p = (stbi_uc *) STBI_REALLOC_SIZED(z->idata, idata_limit_old, idata_limit); if (p == NULL) return stbi__err("outofmem", "Out of memory");
   251d9:	e9 0a fa ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   251de:	66 90                	xchg   %ax,%ax
      switch (c.type) {
   251e0:	3d 45 54 4c 50       	cmp    $0x504c5445,%eax
   251e5:	0f 84 ed 02 00 00    	je     254d8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x968>
   251eb:	3d 53 4e 52 74       	cmp    $0x74524e53,%eax
   251f0:	0f 85 aa 02 00 00    	jne    254a0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x930>
            if (first) return stbi__err("first not IHDR", "Corrupt PNG");
   251f6:	45 85 f6             	test   %r14d,%r14d
   251f9:	0f 85 b9 04 00 00    	jne    256b8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb48>
            if (z->idata) return stbi__err("tRNS after IDAT","Corrupt PNG");
   251ff:	49 83 7f 08 00       	cmpq   $0x0,0x8(%r15)
   25204:	0f 85 b5 12 00 00    	jne    264bf <_ZL20stbi__parse_png_fileP9stbi__pngii+0x194f>
            if (pal_img_n) {
   2520a:	80 7c 24 14 00       	cmpb   $0x0,0x14(%rsp)
   2520f:	0f 85 6b 07 00 00    	jne    25980 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xe10>
               if (!(s->img_n & 1)) return stbi__err("tRNS with alpha","Corrupt PNG");
   25215:	8b 43 08             	mov    0x8(%rbx),%eax
   25218:	a8 01                	test   $0x1,%al
   2521a:	0f 84 6b 13 00 00    	je     2658b <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1a1b>
               if (c.length != (stbi__uint32) s->img_n*2) return stbi__err("bad tRNS len","Corrupt PNG");
   25220:	8d 14 00             	lea    (%rax,%rax,1),%edx
   25223:	39 ea                	cmp    %ebp,%edx
   25225:	0f 85 16 13 00 00    	jne    26541 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x19d1>
               if (z->depth == 16) {
   2522b:	41 83 7f 20 10       	cmpl   $0x10,0x20(%r15)
   25230:	0f 84 9a 05 00 00    	je     257d0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xc60>
                  for (k = 0; k < s->img_n; ++k) tc[k] = (stbi_uc)(stbi__get16be(s) & 255) * stbi__depth_scale_table[z->depth]; // non 8-bit images will be larger
   25236:	31 ed                	xor    %ebp,%ebp
   25238:	48 8d 94 24 67 03 00 	lea    0x367(%rsp),%rdx
   2523f:	00 
   25240:	4c 8d 2d 01 31 01 00 	lea    0x13101(%rip),%r13        # 38348 <_ZL23stbi__depth_scale_table>
   25247:	85 c0                	test   %eax,%eax
   25249:	7e 38                	jle    25283 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x713>
   2524b:	44 89 64 24 40       	mov    %r12d,0x40(%rsp)
   25250:	49 89 dc             	mov    %rbx,%r12
   25253:	48 89 d3             	mov    %rdx,%rbx
   25256:	4c 89 e7             	mov    %r12,%rdi
   25259:	e8 52 90 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2525e:	49 63 77 20          	movslq 0x20(%r15),%rsi
   25262:	89 c2                	mov    %eax,%edx
   25264:	41 0f b6 44 35 00    	movzbl 0x0(%r13,%rsi,1),%eax
   2526a:	0f af c2             	imul   %edx,%eax
   2526d:	88 04 2b             	mov    %al,(%rbx,%rbp,1)
   25270:	48 83 c5 01          	add    $0x1,%rbp
   25274:	41 39 6c 24 08       	cmp    %ebp,0x8(%r12)
   25279:	7f db                	jg     25256 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x6e6>
   2527b:	4c 89 e3             	mov    %r12,%rbx
   2527e:	44 8b 64 24 40       	mov    0x40(%rsp),%r12d
               has_trans = 1;
   25283:	c6 44 24 40 01       	movb   $0x1,0x40(%rsp)
   25288:	eb 36                	jmp    252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   2528a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      switch (c.type) {
   25290:	3d 49 42 67 43       	cmp    $0x43674249,%eax
   25295:	0f 85 05 02 00 00    	jne    254a0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x930>
   if (n == 0) return;  // already there!
   2529b:	85 ed                	test   %ebp,%ebp
   2529d:	74 10                	je     252af <_ZL20stbi__parse_png_fileP9stbi__pngii+0x73f>
   if (n < 0) {
   2529f:	0f 88 cb 07 00 00    	js     25a70 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xf00>
   252a5:	89 ee                	mov    %ebp,%esi
   252a7:	48 89 df             	mov    %rbx,%rdi
   252aa:	e8 61 d8 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
            is_iphone = 1;
   252af:	c7 44 24 34 01 00 00 	movl   $0x1,0x34(%rsp)
   252b6:	00 
   252b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   252be:	00 00 
      stbi__get32be(s);
   252c0:	48 89 df             	mov    %rbx,%rdi
   252c3:	e8 38 96 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   252c8:	e9 b3 fc ff ff       	jmp    24f80 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x410>
   252cd:	0f 1f 00             	nopl   (%rax)
            if (!first) return stbi__err("multiple IHDR","Corrupt PNG");
   252d0:	45 85 f6             	test   %r14d,%r14d
   252d3:	0f 84 fb 11 00 00    	je     264d4 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1964>
            if (c.length != 13) return stbi__err("bad IHDR len","Corrupt PNG");
   252d9:	83 fd 0d             	cmp    $0xd,%ebp
   252dc:	0f 85 07 12 00 00    	jne    264e9 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1979>
            s->img_x = stbi__get32be(s);
   252e2:	48 89 df             	mov    %rbx,%rdi
   252e5:	e8 16 96 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
            s->img_y = stbi__get32be(s);
   252ea:	48 89 df             	mov    %rbx,%rdi
            s->img_x = stbi__get32be(s);
   252ed:	89 03                	mov    %eax,(%rbx)
            s->img_y = stbi__get32be(s);
   252ef:	e8 0c 96 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   252f4:	89 43 04             	mov    %eax,0x4(%rbx)
            if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__err("too large","Very large image (corrupt?)");
   252f7:	3d 00 00 00 01       	cmp    $0x1000000,%eax
   252fc:	0f 87 26 06 00 00    	ja     25928 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xdb8>
            if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__err("too large","Very large image (corrupt?)");
   25302:	81 3b 00 00 00 01    	cmpl   $0x1000000,(%rbx)
   25308:	0f 87 1a 06 00 00    	ja     25928 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xdb8>
   if (s->img_buffer < s->img_buffer_end)
   2530e:	48 8b 8b c0 00 00 00 	mov    0xc0(%rbx),%rcx
   25315:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   2531c:	48 39 c1             	cmp    %rax,%rcx
   2531f:	0f 83 ab 03 00 00    	jae    256d0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb60>
      return *s->img_buffer++;
   25325:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   25329:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   25330:	0f b6 31             	movzbl (%rcx),%esi
   25333:	89 f1                	mov    %esi,%ecx
            z->depth = stbi__get8(s);  if (z->depth != 1 && z->depth != 2 && z->depth != 4 && z->depth != 8 && z->depth != 16)  return stbi__err("1/2/4/8/16-bit only","PNG not supported: 1/2/4/8/16-bit only");
   25335:	8d 7e ff             	lea    -0x1(%rsi),%edi
   25338:	41 89 77 20          	mov    %esi,0x20(%r15)
   2533c:	83 ff 01             	cmp    $0x1,%edi
   2533f:	76 2f                	jbe    25370 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x800>
   25341:	80 f9 10             	cmp    $0x10,%cl
   25344:	77 0b                	ja     25351 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x7e1>
   25346:	be 10 01 01 00       	mov    $0x10110,%esi
   2534b:	48 0f a3 ce          	bt     %rcx,%rsi
   2534f:	72 1f                	jb     25370 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x800>
   stbi__g_failure_reason = str;
   25351:	48 8d 05 b1 29 01 00 	lea    0x129b1(%rip),%rax        # 37d09 <_ZSt19piecewise_construct+0x3c2>
   25358:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2535f:	ff ff 
            z->depth = stbi__get8(s);  if (z->depth != 1 && z->depth != 2 && z->depth != 4 && z->depth != 8 && z->depth != 16)  return stbi__err("1/2/4/8/16-bit only","PNG not supported: 1/2/4/8/16-bit only");
   25361:	e9 82 f8 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   25366:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2536d:	00 00 00 
   if (s->img_buffer < s->img_buffer_end)
   25370:	48 39 c2             	cmp    %rax,%rdx
   25373:	0f 83 77 03 00 00    	jae    256f0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb80>
      return *s->img_buffer++;
   25379:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   2537d:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   25384:	0f b6 32             	movzbl (%rdx),%esi
            color = stbi__get8(s);  if (color > 6)         return stbi__err("bad ctype","Corrupt PNG");
   25387:	89 74 24 2c          	mov    %esi,0x2c(%rsp)
      return *s->img_buffer++;
   2538b:	41 89 f5             	mov    %esi,%r13d
            color = stbi__get8(s);  if (color > 6)         return stbi__err("bad ctype","Corrupt PNG");
   2538e:	83 7c 24 2c 06       	cmpl   $0x6,0x2c(%rsp)
   25393:	0f 8f 9a 10 00 00    	jg     26433 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x18c3>
            if (color == 3 && z->depth == 16)                  return stbi__err("bad ctype","Corrupt PNG");
   25399:	83 7c 24 2c 03       	cmpl   $0x3,0x2c(%rsp)
   2539e:	0f 84 9c 05 00 00    	je     25940 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xdd0>
            if (color == 3) pal_img_n = 3; else if (color & 1) return stbi__err("bad ctype","Corrupt PNG");
   253a4:	41 f6 c5 01          	test   $0x1,%r13b
   253a8:	0f 85 85 10 00 00    	jne    26433 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x18c3>
   if (s->img_buffer < s->img_buffer_end)
   253ae:	48 39 c1             	cmp    %rax,%rcx
   253b1:	0f 83 69 07 00 00    	jae    25b20 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xfb0>
      return *s->img_buffer++;
   253b7:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   253bb:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   253c2:	0f b6 09             	movzbl (%rcx),%ecx
            comp  = stbi__get8(s);  if (comp) return stbi__err("bad comp method","Corrupt PNG");
   253c5:	84 c9                	test   %cl,%cl
   253c7:	0f 85 a9 11 00 00    	jne    26576 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1a06>
   if (s->img_buffer < s->img_buffer_end)
   253cd:	48 39 c2             	cmp    %rax,%rdx
   253d0:	0f 83 9f 07 00 00    	jae    25b75 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1005>
      return *s->img_buffer++;
   253d6:	48 8d 42 01          	lea    0x1(%rdx),%rax
   253da:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   253e1:	0f b6 12             	movzbl (%rdx),%edx
            filter= stbi__get8(s);  if (filter) return stbi__err("bad filter method","Corrupt PNG");
   253e4:	84 d2                	test   %dl,%dl
   253e6:	0f 84 16 03 00 00    	je     25702 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb92>
   stbi__g_failure_reason = str;
   253ec:	48 8d 05 44 29 01 00 	lea    0x12944(%rip),%rax        # 37d37 <_ZSt19piecewise_construct+0x3f0>
   253f3:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   253fa:	ff ff 
            filter= stbi__get8(s);  if (filter) return stbi__err("bad filter method","Corrupt PNG");
   253fc:	e9 e7 f7 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   25401:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            if (first) return stbi__err("first not IHDR", "Corrupt PNG");
   25408:	45 85 f6             	test   %r14d,%r14d
   2540b:	0f 85 a7 02 00 00    	jne    256b8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb48>
            if (pal_img_n && !pal_len) return stbi__err("no PLTE","Corrupt PNG");
   25411:	80 7c 24 14 00       	cmpb   $0x0,0x14(%rsp)
   25416:	74 09                	je     25421 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x8b1>
   25418:	45 85 e4             	test   %r12d,%r12d
   2541b:	0f 84 fa 10 00 00    	je     2651b <_ZL20stbi__parse_png_fileP9stbi__pngii+0x19ab>
            if (scan == STBI__SCAN_header) { s->img_n = pal_img_n; return 1; }
   25421:	83 7c 24 08 02       	cmpl   $0x2,0x8(%rsp)
   25426:	0f 84 04 11 00 00    	je     26530 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x19c0>
            if ((int)(ioff + c.length) < (int)ioff) return 0;
   2542c:	8b 44 24 18          	mov    0x18(%rsp),%eax
   25430:	44 8d 2c 28          	lea    (%rax,%rbp,1),%r13d
   25434:	41 39 c5             	cmp    %eax,%r13d
   25437:	0f 8c ab f7 ff ff    	jl     24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
            if (ioff + c.length > idata_limit) {
   2543d:	8b 44 24 20          	mov    0x20(%rsp),%eax
            if (z->idata) return stbi__err("tRNS after IDAT","Corrupt PNG");
   25441:	49 8b 7f 08          	mov    0x8(%r15),%rdi
            if (ioff + c.length > idata_limit) {
   25445:	44 39 e8             	cmp    %r13d,%eax
   25448:	0f 82 7a 04 00 00    	jb     258c8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xd58>
            if (!stbi__getn(s, z->idata+ioff,c.length)) return stbi__err("outofdata","Corrupt PNG");
   2544e:	8b 44 24 18          	mov    0x18(%rsp),%eax
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   25452:	48 8b b3 c0 00 00 00 	mov    0xc0(%rbx),%rsi
            if (!stbi__getn(s, z->idata+ioff,c.length)) return stbi__err("outofdata","Corrupt PNG");
   25459:	48 01 c7             	add    %rax,%rdi
   if (s->io.read) {
   2545c:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   25461:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   if (s->io.read) {
   25468:	74 0f                	je     25479 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x909>
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   2546a:	49 89 c0             	mov    %rax,%r8
   2546d:	49 29 f0             	sub    %rsi,%r8
      if (blen < n) {
   25470:	44 39 c5             	cmp    %r8d,%ebp
   25473:	0f 8f 56 07 00 00    	jg     25bcf <_ZL20stbi__parse_png_fileP9stbi__pngii+0x105f>
   if (s->img_buffer+n <= s->img_buffer_end) {
   25479:	48 63 ed             	movslq %ebp,%rbp
   2547c:	48 8d 14 2e          	lea    (%rsi,%rbp,1),%rdx
   25480:	48 39 d0             	cmp    %rdx,%rax
   25483:	0f 83 d7 04 00 00    	jae    25960 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xdf0>
   stbi__g_failure_reason = str;
   25489:	48 8d 05 3e 29 01 00 	lea    0x1293e(%rip),%rax        # 37dce <_ZSt19piecewise_construct+0x487>
   25490:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   25497:	ff ff 
            if (!stbi__getn(s, z->idata+ioff,c.length)) return stbi__err("outofdata","Corrupt PNG");
   25499:	e9 4a f7 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   2549e:	66 90                	xchg   %ax,%ax
            if (first) return stbi__err("first not IHDR", "Corrupt PNG");
   254a0:	45 85 f6             	test   %r14d,%r14d
   254a3:	0f 85 0f 02 00 00    	jne    256b8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb48>
            if ((c.type & (1 << 29)) == 0) {
   254a9:	a9 00 00 00 20       	test   $0x20000000,%eax
   254ae:	0f 84 4a 10 00 00    	je     264fe <_ZL20stbi__parse_png_fileP9stbi__pngii+0x198e>
   if (n == 0) return;  // already there!
   254b4:	85 ed                	test   %ebp,%ebp
   254b6:	0f 84 04 fe ff ff    	je     252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   if (n < 0) {
   254bc:	0f 88 ce 05 00 00    	js     25a90 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xf20>
   254c2:	89 ee                	mov    %ebp,%esi
   254c4:	48 89 df             	mov    %rbx,%rdi
   254c7:	e8 44 d6 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   254cc:	e9 ef fd ff ff       	jmp    252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   254d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            if (first) return stbi__err("first not IHDR", "Corrupt PNG");
   254d8:	45 85 f6             	test   %r14d,%r14d
   254db:	0f 85 d7 01 00 00    	jne    256b8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb48>
            if (c.length > 256*3) return stbi__err("invalid PLTE","Corrupt PNG");
   254e1:	81 fd 00 03 00 00    	cmp    $0x300,%ebp
   254e7:	0f 87 31 0f 00 00    	ja     2641e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x18ae>
            pal_len = c.length / 3;
   254ed:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
   254f2:	41 89 ec             	mov    %ebp,%r12d
   254f5:	4c 0f af e0          	imul   %rax,%r12
   254f9:	49 c1 ec 21          	shr    $0x21,%r12
            if (pal_len * 3 != c.length) return stbi__err("invalid PLTE","Corrupt PNG");
   254fd:	43 8d 04 64          	lea    (%r12,%r12,2),%eax
   25501:	39 e8                	cmp    %ebp,%eax
   25503:	0f 85 15 0f 00 00    	jne    2641e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x18ae>
            for (i=0; i < pal_len; ++i) {
   25509:	83 f8 02             	cmp    $0x2,%eax
   2550c:	0f 86 2d 08 00 00    	jbe    25d3f <_ZL20stbi__parse_png_fileP9stbi__pngii+0x11cf>
   if (s->img_buffer < s->img_buffer_end)
   25512:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   25519:	45 31 ed             	xor    %r13d,%r13d
   2551c:	48 8d ac 24 d0 03 00 	lea    0x3d0(%rsp),%rbp
   25523:	00 
   25524:	eb 64                	jmp    2558a <_ZL20stbi__parse_png_fileP9stbi__pngii+0xa1a>
   25526:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2552d:	00 00 00 
      return *s->img_buffer++;
   25530:	48 8d 72 01          	lea    0x1(%rdx),%rsi
   25534:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
   2553b:	0f b6 12             	movzbl (%rdx),%edx
               palette[i*4+0] = stbi__get8(s);
   2553e:	42 88 54 ad 00       	mov    %dl,0x0(%rbp,%r13,4)
   if (s->img_buffer < s->img_buffer_end)
   25543:	48 39 c6             	cmp    %rax,%rsi
   25546:	0f 83 9c 00 00 00    	jae    255e8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xa78>
      return *s->img_buffer++;
   2554c:	48 8d 4e 01          	lea    0x1(%rsi),%rcx
   25550:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   25557:	0f b6 16             	movzbl (%rsi),%edx
               palette[i*4+1] = stbi__get8(s);
   2555a:	42 88 54 ad 01       	mov    %dl,0x1(%rbp,%r13,4)
   if (s->img_buffer < s->img_buffer_end)
   2555f:	48 39 c1             	cmp    %rax,%rcx
   25562:	73 7c                	jae    255e0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xa70>
      return *s->img_buffer++;
   25564:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   25568:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   2556f:	0f b6 01             	movzbl (%rcx),%eax
               palette[i*4+2] = stbi__get8(s);
   25572:	42 88 44 ad 02       	mov    %al,0x2(%rbp,%r13,4)
               palette[i*4+3] = 255;
   25577:	42 c6 44 ad 03 ff    	movb   $0xff,0x3(%rbp,%r13,4)
            for (i=0; i < pal_len; ++i) {
   2557d:	49 83 c5 01          	add    $0x1,%r13
   25581:	45 39 e5             	cmp    %r12d,%r13d
   25584:	0f 83 36 fd ff ff    	jae    252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   if (s->img_buffer < s->img_buffer_end)
   2558a:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   25591:	48 39 c2             	cmp    %rax,%rdx
   25594:	72 9a                	jb     25530 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x9c0>
   if (s->read_from_callbacks) {
   25596:	8b 43 30             	mov    0x30(%rbx),%eax
   25599:	85 c0                	test   %eax,%eax
   2559b:	0f 85 7f 00 00 00    	jne    25620 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xab0>
   255a1:	8b 43 30             	mov    0x30(%rbx),%eax
               palette[i*4+0] = stbi__get8(s);
   255a4:	42 c6 44 ad 00 00    	movb   $0x0,0x0(%rbp,%r13,4)
   if (s->read_from_callbacks) {
   255aa:	85 c0                	test   %eax,%eax
   255ac:	75 44                	jne    255f2 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xa82>
               palette[i*4+1] = stbi__get8(s);
   255ae:	42 c6 44 ad 01 00    	movb   $0x0,0x1(%rbp,%r13,4)
   if (s->read_from_callbacks) {
   255b4:	44 8b 5b 30          	mov    0x30(%rbx),%r11d
   return 0;
   255b8:	31 c0                	xor    %eax,%eax
   if (s->read_from_callbacks) {
   255ba:	45 85 db             	test   %r11d,%r11d
   255bd:	74 b3                	je     25572 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xa02>
      stbi__refill_buffer(s);
   255bf:	48 89 df             	mov    %rbx,%rdi
   255c2:	e8 b9 bc fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   255c7:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   255ce:	48 8d 50 01          	lea    0x1(%rax),%rdx
   255d2:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   255d9:	0f b6 00             	movzbl (%rax),%eax
   255dc:	eb 94                	jmp    25572 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xa02>
   255de:	66 90                	xchg   %ax,%ax
   255e0:	48 89 ca             	mov    %rcx,%rdx
   255e3:	eb cf                	jmp    255b4 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xa44>
   255e5:	0f 1f 00             	nopl   (%rax)
   if (s->read_from_callbacks) {
   255e8:	8b 43 30             	mov    0x30(%rbx),%eax
   255eb:	48 89 f2             	mov    %rsi,%rdx
   255ee:	85 c0                	test   %eax,%eax
   255f0:	74 bc                	je     255ae <_ZL20stbi__parse_png_fileP9stbi__pngii+0xa3e>
      stbi__refill_buffer(s);
   255f2:	48 89 df             	mov    %rbx,%rdi
   255f5:	e8 86 bc fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   255fa:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   25601:	48 8d 48 01          	lea    0x1(%rax),%rcx
   25605:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   2560c:	0f b6 10             	movzbl (%rax),%edx
   if (s->img_buffer < s->img_buffer_end)
   2560f:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   25616:	e9 3f ff ff ff       	jmp    2555a <_ZL20stbi__parse_png_fileP9stbi__pngii+0x9ea>
   2561b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      stbi__refill_buffer(s);
   25620:	48 89 df             	mov    %rbx,%rdi
   25623:	e8 58 bc fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   25628:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   2562f:	48 8d 70 01          	lea    0x1(%rax),%rsi
   25633:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
   2563a:	0f b6 10             	movzbl (%rax),%edx
   if (s->img_buffer < s->img_buffer_end)
   2563d:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   25644:	e9 f5 fe ff ff       	jmp    2553e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x9ce>
   25649:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   25650:	48 8b 04 24          	mov    (%rsp),%rax
   25654:	8b 50 30             	mov    0x30(%rax),%edx
   25657:	85 d2                	test   %edx,%edx
   25659:	0f 84 76 f5 ff ff    	je     24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2565f:	48 8d 68 38          	lea    0x38(%rax),%rbp
   25663:	48 89 c3             	mov    %rax,%rbx
   25666:	8b 50 34             	mov    0x34(%rax),%edx
   25669:	48 8b 78 28          	mov    0x28(%rax),%rdi
   2566d:	48 89 ee             	mov    %rbp,%rsi
   25670:	ff 50 10             	call   *0x10(%rax)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   25673:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   2567a:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2567e:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   25685:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   2568b:	85 c0                	test   %eax,%eax
   2568d:	0f 85 8d 05 00 00    	jne    25c20 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x10b0>
      s->read_from_callbacks = 0;
   25693:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   2569a:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   2569e:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   256a5:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   256ac:	e9 24 f5 ff ff       	jmp    24bd5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x65>
   256b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   stbi__g_failure_reason = str;
   256b8:	48 8d 05 ad 26 01 00 	lea    0x126ad(%rip),%rax        # 37d6c <_ZSt19piecewise_construct+0x425>
   256bf:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   256c6:	ff ff 
            if (first) return stbi__err("first not IHDR", "Corrupt PNG");
   256c8:	e9 1b f5 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   256cd:	0f 1f 00             	nopl   (%rax)
   if (s->read_from_callbacks) {
   256d0:	8b 43 30             	mov    0x30(%rbx),%eax
   256d3:	85 c0                	test   %eax,%eax
   256d5:	0f 85 25 01 00 00    	jne    25800 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xc90>
            z->depth = stbi__get8(s);  if (z->depth != 1 && z->depth != 2 && z->depth != 4 && z->depth != 8 && z->depth != 16)  return stbi__err("1/2/4/8/16-bit only","PNG not supported: 1/2/4/8/16-bit only");
   256db:	41 c7 47 20 00 00 00 	movl   $0x0,0x20(%r15)
   256e2:	00 
   256e3:	e9 69 fc ff ff       	jmp    25351 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x7e1>
   256e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   256ef:	00 
   if (s->read_from_callbacks) {
   256f0:	8b 43 30             	mov    0x30(%rbx),%eax
   256f3:	45 31 ed             	xor    %r13d,%r13d
   256f6:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
   256fa:	85 c0                	test   %eax,%eax
   256fc:	0f 85 ce 03 00 00    	jne    25ad0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xf60>
            interlace = stbi__get8(s); if (interlace>1) return stbi__err("bad interlace method","Corrupt PNG");
   25702:	48 89 df             	mov    %rbx,%rdi
   25705:	e8 96 63 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   2570a:	0f b6 c0             	movzbl %al,%eax
   2570d:	89 44 24 28          	mov    %eax,0x28(%rsp)
   25711:	83 f8 01             	cmp    $0x1,%eax
   25714:	0f 8f 47 0e 00 00    	jg     26561 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x19f1>
            if (!s->img_x || !s->img_y) return stbi__err("0-pixel image","Corrupt PNG");
   2571a:	8b 0b                	mov    (%rbx),%ecx
   2571c:	85 c9                	test   %ecx,%ecx
   2571e:	0f 84 6c 0d 00 00    	je     26490 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1920>
   25724:	8b 73 04             	mov    0x4(%rbx),%esi
   25727:	85 f6                	test   %esi,%esi
   25729:	0f 84 61 0d 00 00    	je     26490 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1920>
            if (!pal_img_n) {
   2572f:	80 7c 24 14 00       	cmpb   $0x0,0x14(%rsp)
   25734:	0f 85 d6 01 00 00    	jne    25910 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xda0>
               s->img_n = (color & 2 ? 3 : 1) + (color & 4 ? 1 : 0);
   2573a:	41 83 e5 02          	and    $0x2,%r13d
   2573e:	b8 03 00 00 00       	mov    $0x3,%eax
   25743:	8b 7c 24 2c          	mov    0x2c(%rsp),%edi
   25747:	44 0f 45 f0          	cmovne %eax,%r14d
               if ((1 << 30) / s->img_x / s->img_n < s->img_y) return stbi__err("too large", "Image too large to decode");
   2574b:	b8 00 00 00 40       	mov    $0x40000000,%eax
   25750:	31 d2                	xor    %edx,%edx
               s->img_n = (color & 2 ? 3 : 1) + (color & 4 ? 1 : 0);
   25752:	c1 ff 02             	sar    $0x2,%edi
               if ((1 << 30) / s->img_x / s->img_n < s->img_y) return stbi__err("too large", "Image too large to decode");
   25755:	f7 f1                	div    %ecx
               s->img_n = (color & 2 ? 3 : 1) + (color & 4 ? 1 : 0);
   25757:	44 01 f7             	add    %r14d,%edi
               if ((1 << 30) / s->img_x / s->img_n < s->img_y) return stbi__err("too large", "Image too large to decode");
   2575a:	31 d2                	xor    %edx,%edx
               s->img_n = (color & 2 ? 3 : 1) + (color & 4 ? 1 : 0);
   2575c:	89 7b 08             	mov    %edi,0x8(%rbx)
               if ((1 << 30) / s->img_x / s->img_n < s->img_y) return stbi__err("too large", "Image too large to decode");
   2575f:	f7 f7                	div    %edi
   25761:	39 f0                	cmp    %esi,%eax
   25763:	0f 82 bf 01 00 00    	jb     25928 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xdb8>
               if (scan == STBI__SCAN_header) return 1;
   25769:	83 7c 24 08 02       	cmpl   $0x2,0x8(%rsp)
   2576e:	0f 84 20 05 00 00    	je     25c94 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1124>
            first = 0;
   25774:	45 31 f6             	xor    %r14d,%r14d
   25777:	e9 44 fb ff ff       	jmp    252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   2577c:	0f 1f 40 00          	nopl   0x0(%rax)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   25780:	48 89 f3             	mov    %rsi,%rbx
   25783:	48 8d 6e 38          	lea    0x38(%rsi),%rbp
   25787:	8b 56 34             	mov    0x34(%rsi),%edx
   2578a:	48 8b 7e 28          	mov    0x28(%rsi),%rdi
   2578e:	48 89 ee             	mov    %rbp,%rsi
   25791:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   25794:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   2579b:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   257a2:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   257a8:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   257ac:	85 c0                	test   %eax,%eax
   257ae:	0f 84 a4 00 00 00    	je     25858 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xce8>
      s->img_buffer_end = s->buffer_start + n;
   257b4:	48 98                	cltq
      return *s->img_buffer++;
   257b6:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   257bd:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   257c1:	48 01 e8             	add    %rbp,%rax
   257c4:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   257cb:	e9 3e f4 ff ff       	jmp    24c0e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x9e>
                  for (k = 0; k < s->img_n; ++k) tc16[k] = (stbi__uint16)stbi__get16be(s); // copy the values as-is
   257d0:	85 c0                	test   %eax,%eax
   257d2:	0f 8e ab fa ff ff    	jle    25283 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x713>
   257d8:	31 ed                	xor    %ebp,%ebp
   257da:	4c 8d ac 24 6a 03 00 	lea    0x36a(%rsp),%r13
   257e1:	00 
   257e2:	48 89 df             	mov    %rbx,%rdi
   257e5:	e8 c6 8a ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   257ea:	66 41 89 44 6d 00    	mov    %ax,0x0(%r13,%rbp,2)
   257f0:	48 83 c5 01          	add    $0x1,%rbp
   257f4:	39 6b 08             	cmp    %ebp,0x8(%rbx)
   257f7:	7f e9                	jg     257e2 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xc72>
   257f9:	e9 85 fa ff ff       	jmp    25283 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x713>
   257fe:	66 90                	xchg   %ax,%ax
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   25800:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   25804:	8b 53 34             	mov    0x34(%rbx),%edx
   25807:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   2580b:	4c 89 ee             	mov    %r13,%rsi
   2580e:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   25811:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   25818:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   2581f:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   25825:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   25829:	85 c0                	test   %eax,%eax
   2582b:	0f 85 6d 04 00 00    	jne    25c9e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x112e>
      s->read_from_callbacks = 0;
   25831:	48 8b 04 24          	mov    (%rsp),%rax
   25835:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
      *s->img_buffer = 0;
   2583c:	c6 40 38 00          	movb   $0x0,0x38(%rax)
   25840:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)
      return *s->img_buffer++;
   25847:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
   2584e:	e9 88 fe ff ff       	jmp    256db <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb6b>
   25853:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->read_from_callbacks = 0;
   25858:	48 8b 04 24          	mov    (%rsp),%rax
   2585c:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
      *s->img_buffer = 0;
   25863:	c6 40 38 00          	movb   $0x0,0x38(%rax)
   25867:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)
      return *s->img_buffer++;
   2586e:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
   stbi__g_failure_reason = str;
   25875:	48 8d 05 66 24 01 00 	lea    0x12466(%rip),%rax        # 37ce2 <_ZSt19piecewise_construct+0x39b>
   2587c:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   25883:	ff ff 
   return 0;
   25885:	e9 5e f3 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   2588a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      s->read_from_callbacks = 0;
   25890:	48 8b 04 24          	mov    (%rsp),%rax
   25894:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
      *s->img_buffer = 0;
   2589b:	c6 40 38 00          	movb   $0x0,0x38(%rax)
   2589f:	48 89 88 c8 00 00 00 	mov    %rcx,0xc8(%rax)
      return *s->img_buffer++;
   258a6:	48 89 88 c0 00 00 00 	mov    %rcx,0xc0(%rax)
   stbi__g_failure_reason = str;
   258ad:	48 8d 05 2e 24 01 00 	lea    0x1242e(%rip),%rax        # 37ce2 <_ZSt19piecewise_construct+0x39b>
   258b4:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   258bb:	ff ff 
   return 0;
   258bd:	e9 26 f3 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   258c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
               if (idata_limit == 0) idata_limit = c.length > 4096 ? c.length : 4096;
   258c8:	85 c0                	test   %eax,%eax
   258ca:	75 14                	jne    258e0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xd70>
   258cc:	b8 00 10 00 00       	mov    $0x1000,%eax
   258d1:	39 c5                	cmp    %eax,%ebp
   258d3:	0f 43 c5             	cmovae %ebp,%eax
   258d6:	89 44 24 20          	mov    %eax,0x20(%rsp)
               while (ioff + c.length > idata_limit)
   258da:	44 39 e8             	cmp    %r13d,%eax
   258dd:	73 0c                	jae    258eb <_ZL20stbi__parse_png_fileP9stbi__pngii+0xd7b>
   258df:	90                   	nop
                  idata_limit *= 2;
   258e0:	01 c0                	add    %eax,%eax
               while (ioff + c.length > idata_limit)
   258e2:	44 39 e8             	cmp    %r13d,%eax
   258e5:	72 f9                	jb     258e0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xd70>
   258e7:	89 44 24 20          	mov    %eax,0x20(%rsp)
               p = (stbi_uc *) STBI_REALLOC_SIZED(z->idata, idata_limit_old, idata_limit); if (p == NULL) return stbi__err("outofmem", "Out of memory");
   258eb:	8b 74 24 20          	mov    0x20(%rsp),%esi
   258ef:	e8 bc 10 fe ff       	call   69b0 <realloc@plt>
   258f4:	48 89 c7             	mov    %rax,%rdi
   258f7:	48 85 c0             	test   %rax,%rax
   258fa:	0f 84 c9 f8 ff ff    	je     251c9 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x659>
               z->idata = p;
   25900:	49 89 47 08          	mov    %rax,0x8(%r15)
   25904:	e9 45 fb ff ff       	jmp    2544e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x8de>
   25909:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
               if ((1 << 30) / s->img_x / 4 < s->img_y) return stbi__err("too large","Corrupt PNG");
   25910:	b8 00 00 00 10       	mov    $0x10000000,%eax
   25915:	31 d2                	xor    %edx,%edx
               s->img_n = 1;
   25917:	c7 43 08 01 00 00 00 	movl   $0x1,0x8(%rbx)
               if ((1 << 30) / s->img_x / 4 < s->img_y) return stbi__err("too large","Corrupt PNG");
   2591e:	f7 f1                	div    %ecx
   25920:	39 f0                	cmp    %esi,%eax
   25922:	0f 83 4c fe ff ff    	jae    25774 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xc04>
   stbi__g_failure_reason = str;
   25928:	48 8d 05 29 21 01 00 	lea    0x12129(%rip),%rax        # 37a58 <_ZSt19piecewise_construct+0x111>
   2592f:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   25936:	ff ff 
            if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__err("too large","Very large image (corrupt?)");
   25938:	e9 ab f2 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   2593d:	0f 1f 00             	nopl   (%rax)
            if (color == 3 && z->depth == 16)                  return stbi__err("bad ctype","Corrupt PNG");
   25940:	41 83 7f 20 10       	cmpl   $0x10,0x20(%r15)
   25945:	0f 84 e8 0a 00 00    	je     26433 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x18c3>
            if (color == 3) pal_img_n = 3; else if (color & 1) return stbi__err("bad ctype","Corrupt PNG");
   2594b:	c6 44 24 14 03       	movb   $0x3,0x14(%rsp)
   25950:	41 bd 03 00 00 00    	mov    $0x3,%r13d
   25956:	e9 53 fa ff ff       	jmp    253ae <_ZL20stbi__parse_png_fileP9stbi__pngii+0x83e>
   2595b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      memcpy(buffer, s->img_buffer, n);
   25960:	48 89 ea             	mov    %rbp,%rdx
   25963:	e8 a8 0a fe ff       	call   6410 <memcpy@plt>
      s->img_buffer += n;
   25968:	48 01 ab c0 00 00 00 	add    %rbp,0xc0(%rbx)
            if ((int)(ioff + c.length) < (int)ioff) return 0;
   2596f:	44 89 6c 24 18       	mov    %r13d,0x18(%rsp)
   25974:	e9 47 f9 ff ff       	jmp    252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   25979:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
               if (scan == STBI__SCAN_header) { s->img_n = 4; return 1; }
   25980:	83 7c 24 08 02       	cmpl   $0x2,0x8(%rsp)
   25985:	0f 84 7c 11 00 00    	je     26b07 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1f97>
               if (pal_len == 0) return stbi__err("tRNS before PLTE","Corrupt PNG");
   2598b:	45 85 e4             	test   %r12d,%r12d
   2598e:	0f 84 83 11 00 00    	je     26b17 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1fa7>
               if (c.length > pal_len) return stbi__err("bad tRNS len","Corrupt PNG");
   25994:	41 39 ec             	cmp    %ebp,%r12d
   25997:	0f 82 a4 0b 00 00    	jb     26541 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x19d1>
               for (i=0; i < c.length; ++i)
   2599d:	85 ed                	test   %ebp,%ebp
   2599f:	0f 84 bd 00 00 00    	je     25a62 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xef2>
   259a5:	4c 8d ac 24 d0 03 00 	lea    0x3d0(%rsp),%r13
   259ac:	00 
   259ad:	89 e9                	mov    %ebp,%ecx
   259af:	44 89 64 24 14       	mov    %r12d,0x14(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   259b4:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   259bb:	49 8d 4c 8d 00       	lea    0x0(%r13,%rcx,4),%rcx
   259c0:	44 89 74 24 38       	mov    %r14d,0x38(%rsp)
      s->img_buffer = s->img_buffer_end;
   259c5:	48 8b 93 c8 00 00 00 	mov    0xc8(%rbx),%rdx
   259cc:	49 89 cc             	mov    %rcx,%r12
   259cf:	eb 25                	jmp    259f6 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xe86>
   259d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      return *s->img_buffer++;
   259d8:	48 8d 70 01          	lea    0x1(%rax),%rsi
   259dc:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
   259e3:	0f b6 28             	movzbl (%rax),%ebp
   259e6:	48 89 f0             	mov    %rsi,%rax
                  palette[i*4+3] = stbi__get8(s);
   259e9:	41 88 6d 03          	mov    %bpl,0x3(%r13)
               for (i=0; i < c.length; ++i)
   259ed:	49 83 c5 04          	add    $0x4,%r13
   259f1:	4d 39 ec             	cmp    %r13,%r12
   259f4:	74 62                	je     25a58 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xee8>
   if (s->img_buffer < s->img_buffer_end)
   259f6:	48 39 d0             	cmp    %rdx,%rax
   259f9:	72 dd                	jb     259d8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xe68>
   if (s->read_from_callbacks) {
   259fb:	44 8b 53 30          	mov    0x30(%rbx),%r10d
   return 0;
   259ff:	31 ed                	xor    %ebp,%ebp
   if (s->read_from_callbacks) {
   25a01:	45 85 d2             	test   %r10d,%r10d
   25a04:	74 e3                	je     259e9 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xe79>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   25a06:	4c 8d 73 38          	lea    0x38(%rbx),%r14
   25a0a:	8b 53 34             	mov    0x34(%rbx),%edx
   25a0d:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   25a11:	4c 89 f6             	mov    %r14,%rsi
   25a14:	ff 53 10             	call   *0x10(%rbx)
   25a17:	48 63 d0             	movslq %eax,%rdx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   25a1a:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   25a21:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   25a28:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   25a2e:	48 8d 43 39          	lea    0x39(%rbx),%rax
   if (n == 0) {
   25a32:	85 d2                	test   %edx,%edx
   25a34:	75 72                	jne    25aa8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xf38>
      s->read_from_callbacks = 0;
   25a36:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   25a3d:	48 89 c2             	mov    %rax,%rdx
      *s->img_buffer = 0;
   25a40:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   25a44:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   25a4b:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   25a52:	eb 95                	jmp    259e9 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xe79>
   25a54:	0f 1f 40 00          	nopl   0x0(%rax)
   25a58:	44 8b 64 24 14       	mov    0x14(%rsp),%r12d
   25a5d:	44 8b 74 24 38       	mov    0x38(%rsp),%r14d
               pal_img_n = 4;
   25a62:	c6 44 24 14 04       	movb   $0x4,0x14(%rsp)
   25a67:	e9 54 f8 ff ff       	jmp    252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   25a6c:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer = s->img_buffer_end;
   25a70:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
            is_iphone = 1;
   25a77:	c7 44 24 34 01 00 00 	movl   $0x1,0x34(%rsp)
   25a7e:	00 
      s->img_buffer = s->img_buffer_end;
   25a7f:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      return;
   25a86:	e9 35 f8 ff ff       	jmp    252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   25a8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->img_buffer = s->img_buffer_end;
   25a90:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   25a97:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      return;
   25a9e:	e9 1d f8 ff ff       	jmp    252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   25aa3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   25aa8:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
      s->img_buffer_end = s->buffer_start + n;
   25aac:	4c 01 f2             	add    %r14,%rdx
   25aaf:	eb 93                	jmp    25a44 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xed4>
   25ab1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   stbi__g_failure_reason = str;
   25ab8:	48 8d 05 19 23 01 00 	lea    0x12319(%rip),%rax        # 37dd8 <_ZSt19piecewise_construct+0x491>
   25abf:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   25ac6:	ff ff 
            if (z->idata == NULL) return stbi__err("no IDAT","Corrupt PNG");
   25ac8:	e9 1b f1 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   25acd:	0f 1f 00             	nopl   (%rax)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   25ad0:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   25ad4:	8b 53 34             	mov    0x34(%rbx),%edx
   25ad7:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   25adb:	48 89 ee             	mov    %rbp,%rsi
   25ade:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   25ae1:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   25ae5:	89 c6                	mov    %eax,%esi
   25ae7:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   25aeb:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   25af2:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   25af9:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   25aff:	85 f6                	test   %esi,%esi
   25b01:	0f 85 b8 01 00 00    	jne    25cbf <_ZL20stbi__parse_png_fileP9stbi__pngii+0x114f>
      s->read_from_callbacks = 0;
   25b07:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   25b0e:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   25b12:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   25b19:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   25b20:	8b 43 30             	mov    0x30(%rbx),%eax
   25b23:	85 c0                	test   %eax,%eax
   25b25:	0f 84 d7 fb ff ff    	je     25702 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb92>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   25b2b:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   25b2f:	8b 53 34             	mov    0x34(%rbx),%edx
   25b32:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   25b36:	48 89 ee             	mov    %rbp,%rsi
   25b39:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   25b3c:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   25b43:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   25b4a:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   25b50:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   25b54:	85 c0                	test   %eax,%eax
   25b56:	0f 85 89 01 00 00    	jne    25ce5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1175>
      s->read_from_callbacks = 0;
   25b5c:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   25b63:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   25b67:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   25b6e:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   25b75:	8b 43 30             	mov    0x30(%rbx),%eax
   25b78:	85 c0                	test   %eax,%eax
   25b7a:	0f 84 82 fb ff ff    	je     25702 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb92>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   25b80:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   25b84:	8b 53 34             	mov    0x34(%rbx),%edx
   25b87:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   25b8b:	48 89 ee             	mov    %rbp,%rsi
   25b8e:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   25b91:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   25b98:	48 8d 73 39          	lea    0x39(%rbx),%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   25b9c:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   25ba3:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   25ba9:	85 c0                	test   %eax,%eax
   25bab:	0f 85 50 01 00 00    	jne    25d01 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1191>
      s->read_from_callbacks = 0;
   25bb1:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   25bb8:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   25bbc:	48 89 b3 c8 00 00 00 	mov    %rsi,0xc8(%rbx)
      return *s->img_buffer++;
   25bc3:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
            filter= stbi__get8(s);  if (filter) return stbi__err("bad filter method","Corrupt PNG");
   25bca:	e9 33 fb ff ff       	jmp    25702 <_ZL20stbi__parse_png_fileP9stbi__pngii+0xb92>
         memcpy(buffer, s->img_buffer, blen);
   25bcf:	49 63 d0             	movslq %r8d,%rdx
   25bd2:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
   25bd7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
   25bdc:	e8 2f 08 fe ff       	call   6410 <memcpy@plt>
         count = (s->io.read)(s->io_user_data, (char*) buffer + blen, n - blen);
   25be1:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
   25be6:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   25beb:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   25bef:	44 29 c5             	sub    %r8d,%ebp
   25bf2:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25bf6:	89 ea                	mov    %ebp,%edx
   25bf8:	ff 53 10             	call   *0x10(%rbx)
         s->img_buffer = s->img_buffer_end;
   25bfb:	48 8b 93 c8 00 00 00 	mov    0xc8(%rbx),%rdx
   25c02:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
            if (!stbi__getn(s, z->idata+ioff,c.length)) return stbi__err("outofdata","Corrupt PNG");
   25c09:	39 c5                	cmp    %eax,%ebp
   25c0b:	0f 84 5e fd ff ff    	je     2596f <_ZL20stbi__parse_png_fileP9stbi__pngii+0xdff>
   25c11:	e9 73 f8 ff ff       	jmp    25489 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x919>
   25c16:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   25c1d:	00 00 00 
      return *s->img_buffer++;
   25c20:	48 8b 3c 24          	mov    (%rsp),%rdi
      s->img_buffer_end = s->buffer_start + n;
   25c24:	48 98                	cltq
   25c26:	48 01 c5             	add    %rax,%rbp
   25c29:	48 89 af c8 00 00 00 	mov    %rbp,0xc8(%rdi)
      return *s->img_buffer++;
   25c30:	0f b6 57 38          	movzbl 0x38(%rdi),%edx
   25c34:	48 89 8f c0 00 00 00 	mov    %rcx,0xc0(%rdi)
   25c3b:	e9 f6 f2 ff ff       	jmp    24f36 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x3c6>
      for (i=0; i < pixel_count; ++i) {
   25c40:	44 89 e9             	mov    %r13d,%ecx
   25c43:	31 d2                	xor    %edx,%edx
   25c45:	45 85 ed             	test   %r13d,%r13d
   25c48:	74 24                	je     25c6e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x10fe>
   25c4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         int n = orig[i]*4;
   25c50:	0f b6 44 15 00       	movzbl 0x0(%rbp,%rdx,1),%eax
   25c55:	c1 e0 02             	shl    $0x2,%eax
         p[0] = palette[n  ];
   25c58:	48 98                	cltq
   25c5a:	8b 84 04 d0 03 00 00 	mov    0x3d0(%rsp,%rax,1),%eax
   25c61:	41 89 04 94          	mov    %eax,(%r12,%rdx,4)
      for (i=0; i < pixel_count; ++i) {
   25c65:	48 83 c2 01          	add    $0x1,%rdx
   25c69:	48 39 ca             	cmp    %rcx,%rdx
   25c6c:	75 e2                	jne    25c50 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x10e0>
   STBI_FREE(a->out);
   25c6e:	48 89 ef             	mov    %rbp,%rdi
   25c71:	e8 2a 0a fe ff       	call   66a0 <free@plt>
   a->out = temp_out;
   25c76:	4d 89 67 18          	mov    %r12,0x18(%r15)
            STBI_FREE(z->expanded); z->expanded = NULL;
   25c7a:	49 8b 7f 10          	mov    0x10(%r15),%rdi
   25c7e:	e8 1d 0a fe ff       	call   66a0 <free@plt>
   25c83:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
   25c8a:	00 
            stbi__get32be(s);
   25c8b:	48 8b 3c 24          	mov    (%rsp),%rdi
   25c8f:	e8 6c 8c ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   if (scan == STBI__SCAN_type) return 1;
   25c94:	b8 01 00 00 00       	mov    $0x1,%eax
   25c99:	e9 4c ef ff ff       	jmp    24bea <_ZL20stbi__parse_png_fileP9stbi__pngii+0x7a>
      return *s->img_buffer++;
   25c9e:	0f b6 73 38          	movzbl 0x38(%rbx),%esi
      s->img_buffer_end = s->buffer_start + n;
   25ca2:	48 98                	cltq
      return *s->img_buffer++;
   25ca4:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      s->img_buffer_end = s->buffer_start + n;
   25cab:	4c 01 e8             	add    %r13,%rax
   25cae:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   25cb5:	89 f1                	mov    %esi,%ecx
            z->depth = stbi__get8(s);  if (z->depth != 1 && z->depth != 2 && z->depth != 4 && z->depth != 8 && z->depth != 16)  return stbi__err("1/2/4/8/16-bit only","PNG not supported: 1/2/4/8/16-bit only");
   25cb7:	8d 7e ff             	lea    -0x1(%rsi),%edi
   25cba:	e9 79 f6 ff ff       	jmp    25338 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x7c8>
      s->img_buffer_end = s->buffer_start + n;
   25cbf:	48 63 44 24 2c       	movslq 0x2c(%rsp),%rax
      return *s->img_buffer++;
   25cc4:	0f b6 73 38          	movzbl 0x38(%rbx),%esi
   25cc8:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
      s->img_buffer_end = s->buffer_start + n;
   25ccf:	48 01 e8             	add    %rbp,%rax
            color = stbi__get8(s);  if (color > 6)         return stbi__err("bad ctype","Corrupt PNG");
   25cd2:	89 74 24 2c          	mov    %esi,0x2c(%rsp)
      return *s->img_buffer++;
   25cd6:	41 89 f5             	mov    %esi,%r13d
   25cd9:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
   25ce0:	e9 a9 f6 ff ff       	jmp    2538e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x81e>
      s->img_buffer_end = s->buffer_start + n;
   25ce5:	48 98                	cltq
      return *s->img_buffer++;
   25ce7:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   25cee:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   25cf2:	48 01 e8             	add    %rbp,%rax
   25cf5:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   25cfc:	e9 c4 f6 ff ff       	jmp    253c5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x855>
      s->img_buffer_end = s->buffer_start + n;
   25d01:	48 98                	cltq
      return *s->img_buffer++;
   25d03:	48 89 b3 c0 00 00 00 	mov    %rsi,0xc0(%rbx)
   25d0a:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   25d0e:	48 8d 4c 05 00       	lea    0x0(%rbp,%rax,1),%rcx
   25d13:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   25d1a:	e9 c5 f6 ff ff       	jmp    253e4 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x874>
            if ((req_comp == s->img_n+1 && req_comp != 3 && !pal_img_n) || has_trans)
   25d1f:	83 f9 03             	cmp    $0x3,%ecx
   25d22:	0f 84 cf f3 ff ff    	je     250f7 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x587>
   25d28:	80 7c 24 14 00       	cmpb   $0x0,0x14(%rsp)
   25d2d:	0f 85 c4 f3 ff ff    	jne    250f7 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x587>
               s->img_out_n = s->img_n+1;
   25d33:	89 8c 24 80 00 00 00 	mov    %ecx,0x80(%rsp)
   25d3a:	e9 ce f3 ff ff       	jmp    2510d <_ZL20stbi__parse_png_fileP9stbi__pngii+0x59d>
            for (i=0; i < pal_len; ++i) {
   25d3f:	45 31 e4             	xor    %r12d,%r12d
   25d42:	e9 79 f5 ff ff       	jmp    252c0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x750>
   final = (stbi_uc *) stbi__malloc_mad3(a->s->img_x, a->s->img_y, out_bytes, 0);
   25d47:	31 c9                	xor    %ecx,%ecx
   25d49:	89 c2                	mov    %eax,%edx
   25d4b:	44 89 ce             	mov    %r9d,%esi
   25d4e:	89 ef                	mov    %ebp,%edi
   25d50:	44 89 4c 24 08       	mov    %r9d,0x8(%rsp)
   25d55:	e8 36 f3 fe ff       	call   15090 <_ZL17stbi__malloc_mad3iiii>
   25d5a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   if (!final) return stbi__err("outofmem", "Out of memory");
   25d5f:	48 85 c0             	test   %rax,%rax
   25d62:	0f 84 61 f4 ff ff    	je     251c9 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x659>
   25d68:	45 31 d2             	xor    %r10d,%r10d
   25d6b:	4c 89 e9             	mov    %r13,%rcx
   25d6e:	4c 89 7c 24 38       	mov    %r15,0x38(%rsp)
   25d73:	44 8b 4c 24 08       	mov    0x8(%rsp),%r9d
   25d78:	48 8d 84 24 70 03 00 	lea    0x370(%rsp),%rax
   25d7f:	00 
   25d80:	4d 89 d5             	mov    %r10,%r13
   25d83:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
   25d88:	48 8d 84 24 b0 03 00 	lea    0x3b0(%rsp),%rax
   25d8f:	00 
   25d90:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
   25d95:	48 8d 84 24 90 03 00 	lea    0x390(%rsp),%rax
   25d9c:	00 
   25d9d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
   25da2:	eb 20                	jmp    25dc4 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1254>
   25da4:	0f 1f 40 00          	nopl   0x0(%rax)
   for (p=0; p < 7; ++p) {
   25da8:	49 83 c5 04          	add    $0x4,%r13
   25dac:	49 83 fd 1c          	cmp    $0x1c,%r13
   25db0:	0f 84 b8 02 00 00    	je     2606e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x14fe>
      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];
   25db6:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
   25dbb:	48 8b 08             	mov    (%rax),%rcx
      y = (a->s->img_y - yorig[p] + yspc[p]-1) / yspc[p];
   25dbe:	44 8b 49 04          	mov    0x4(%rcx),%r9d
      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];
   25dc2:	8b 29                	mov    (%rcx),%ebp
      int xorig[] = { 0,4,0,2,0,1,0 };
   25dc4:	48 8b 05 9d 1b 01 00 	mov    0x11b9d(%rip),%rax        # 37968 <_ZSt19piecewise_construct+0x21>
   25dcb:	66 0f 6f 2d 8d 2c 01 	movdqa 0x12c8d(%rip),%xmm5        # 38a60 <_ZL11stbi__bmask+0x2e0>
   25dd2:	00 
   25dd3:	c7 84 24 88 03 00 00 	movl   $0x0,0x388(%rsp)
   25dda:	00 00 00 00 
      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];
   25dde:	31 d2                	xor    %edx,%edx
      int xspc[]  = { 8,8,4,4,2,2,1 };
   25de0:	66 0f 6f 3d 98 2c 01 	movdqa 0x12c98(%rip),%xmm7        # 38a80 <_ZL11stbi__bmask+0x300>
   25de7:	00 
   25de8:	c7 84 24 c8 03 00 00 	movl   $0x1,0x3c8(%rsp)
   25def:	01 00 00 00 
      int xorig[] = { 0,4,0,2,0,1,0 };
   25df3:	48 89 84 24 80 03 00 	mov    %rax,0x380(%rsp)
   25dfa:	00 
      int yorig[] = { 0,0,4,0,2,0,1 };
   25dfb:	48 8b 05 ce 2c 01 00 	mov    0x12cce(%rip),%rax        # 38ad0 <_ZL11stbi__bmask+0x350>
      int xorig[] = { 0,4,0,2,0,1,0 };
   25e02:	0f 29 ac 24 70 03 00 	movaps %xmm5,0x370(%rsp)
   25e09:	00 
      int yorig[] = { 0,0,4,0,2,0,1 };
   25e0a:	66 0f 6f 35 5e 2c 01 	movdqa 0x12c5e(%rip),%xmm6        # 38a70 <_ZL11stbi__bmask+0x2f0>
   25e11:	00 
      int yspc[]  = { 8,8,8,4,4,2,2 };
   25e12:	66 0f 6f 25 76 2c 01 	movdqa 0x12c76(%rip),%xmm4        # 38a90 <_ZL11stbi__bmask+0x310>
   25e19:	00 
      int yorig[] = { 0,0,4,0,2,0,1 };
   25e1a:	48 89 84 24 a0 03 00 	mov    %rax,0x3a0(%rsp)
   25e21:	00 
      int xspc[]  = { 8,8,4,4,2,2,1 };
   25e22:	48 8b 05 c7 2b 01 00 	mov    0x12bc7(%rip),%rax        # 389f0 <_ZL11stbi__bmask+0x270>
   25e29:	0f 29 bc 24 b0 03 00 	movaps %xmm7,0x3b0(%rsp)
   25e30:	00 
   25e31:	48 89 84 24 c0 03 00 	mov    %rax,0x3c0(%rsp)
   25e38:	00 
      int yspc[]  = { 8,8,8,4,4,2,2 };
   25e39:	48 8b 05 98 2c 01 00 	mov    0x12c98(%rip),%rax        # 38ad8 <_ZL11stbi__bmask+0x358>
      int yorig[] = { 0,0,4,0,2,0,1 };
   25e40:	c7 84 24 a8 03 00 00 	movl   $0x1,0x3a8(%rsp)
   25e47:	01 00 00 00 
      int yspc[]  = { 8,8,8,4,4,2,2 };
   25e4b:	48 89 84 24 e0 07 00 	mov    %rax,0x7e0(%rsp)
   25e52:	00 
      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];
   25e53:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
      int yorig[] = { 0,0,4,0,2,0,1 };
   25e58:	0f 29 b4 24 90 03 00 	movaps %xmm6,0x390(%rsp)
   25e5f:	00 
      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];
   25e60:	46 8b 3c 28          	mov    (%rax,%r13,1),%r15d
   25e64:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
      int yspc[]  = { 8,8,8,4,4,2,2 };
   25e69:	c7 84 24 e8 07 00 00 	movl   $0x2,0x7e8(%rsp)
   25e70:	02 00 00 00 
   25e74:	0f 29 a4 24 d0 07 00 	movaps %xmm4,0x7d0(%rsp)
   25e7b:	00 
      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];
   25e7c:	42 8b 1c 28          	mov    (%rax,%r13,1),%ebx
   25e80:	8d 44 1d ff          	lea    -0x1(%rbp,%rbx,1),%eax
   25e84:	44 29 f8             	sub    %r15d,%eax
   25e87:	f7 f3                	div    %ebx
      y = (a->s->img_y - yorig[p] + yspc[p]-1) / yspc[p];
   25e89:	31 d2                	xor    %edx,%edx
      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];
   25e8b:	41 89 c0             	mov    %eax,%r8d
      y = (a->s->img_y - yorig[p] + yspc[p]-1) / yspc[p];
   25e8e:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
   25e93:	46 8b 24 28          	mov    (%rax,%r13,1),%r12d
   25e97:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
   25e9c:	46 8b 14 28          	mov    (%rax,%r13,1),%r10d
   25ea0:	43 8d 44 11 ff       	lea    -0x1(%r9,%r10,1),%eax
   25ea5:	44 29 e0             	sub    %r12d,%eax
   25ea8:	41 f7 f2             	div    %r10d
   25eab:	41 89 c3             	mov    %eax,%r11d
      if (x && y) {
   25eae:	45 85 c0             	test   %r8d,%r8d
   25eb1:	0f 84 f1 fe ff ff    	je     25da8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1238>
   25eb7:	85 c0                	test   %eax,%eax
   25eb9:	0f 84 e9 fe ff ff    	je     25da8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1238>
         stbi__uint32 img_len = ((((a->s->img_n * x * depth) + 7) >> 3) + 1) * y;
   25ebf:	8b 41 08             	mov    0x8(%rcx),%eax
   25ec2:	8b 8c 24 98 00 00 00 	mov    0x98(%rsp),%ecx
   25ec9:	44 89 54 24 28       	mov    %r10d,0x28(%rsp)
         if (!stbi__create_png_image_raw(a, image_data, image_data_len, out_n, x, y, depth, color)) {
   25ece:	45 89 d9             	mov    %r11d,%r9d
         stbi__uint32 img_len = ((((a->s->img_n * x * depth) + 7) >> 3) + 1) * y;
   25ed1:	41 0f af c0          	imul   %r8d,%eax
   25ed5:	0f af c1             	imul   %ecx,%eax
   25ed8:	83 c0 07             	add    $0x7,%eax
   25edb:	c1 f8 03             	sar    $0x3,%eax
   25ede:	83 c0 01             	add    $0x1,%eax
   25ee1:	41 0f af c3          	imul   %r11d,%eax
   25ee5:	89 84 24 9c 00 00 00 	mov    %eax,0x9c(%rsp)
         if (!stbi__create_png_image_raw(a, image_data, image_data_len, out_n, x, y, depth, color)) {
   25eec:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
   25ef0:	50                   	push   %rax
   25ef1:	51                   	push   %rcx
   25ef2:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
   25ef7:	8b 8c 24 90 00 00 00 	mov    0x90(%rsp),%ecx
   25efe:	8b 94 24 9c 00 00 00 	mov    0x9c(%rsp),%edx
   25f05:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
   25f0c:	00 
   25f0d:	48 89 ef             	mov    %rbp,%rdi
   25f10:	44 89 5c 24 18       	mov    %r11d,0x18(%rsp)
   25f15:	44 89 44 24 30       	mov    %r8d,0x30(%rsp)
   25f1a:	e8 f1 16 ff ff       	call   17610 <_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii>
   25f1f:	5a                   	pop    %rdx
   25f20:	59                   	pop    %rcx
   25f21:	85 c0                	test   %eax,%eax
   25f23:	0f 84 c6 0d 00 00    	je     26cef <_ZL20stbi__parse_png_fileP9stbi__pngii+0x217f>
         for (j=0; j < y; ++j) {
   25f29:	44 8b 5c 24 08       	mov    0x8(%rsp),%r11d
         STBI_FREE(a->out);
   25f2e:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
         for (j=0; j < y; ++j) {
   25f32:	45 85 db             	test   %r11d,%r11d
   25f35:	0f 8e 13 01 00 00    	jle    2604e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x14de>
   25f3b:	44 8b 44 24 20       	mov    0x20(%rsp),%r8d
   25f40:	45 85 c0             	test   %r8d,%r8d
   25f43:	0f 8e 05 01 00 00    	jle    2604e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x14de>
   25f49:	44 89 f0             	mov    %r14d,%eax
   25f4c:	41 0f af de          	imul   %r14d,%ebx
   25f50:	44 8b 54 24 28       	mov    0x28(%rsp),%r10d
   25f55:	49 89 f9             	mov    %rdi,%r9
   25f58:	41 0f af c0          	imul   %r8d,%eax
   25f5c:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
   25f63:	00 
   25f64:	44 89 94 24 84 00 00 	mov    %r10d,0x84(%rsp)
   25f6b:	00 
   25f6c:	4c 89 ac 24 a8 00 00 	mov    %r13,0xa8(%rsp)
   25f73:	00 
   25f74:	48 98                	cltq
   25f76:	44 89 44 24 28       	mov    %r8d,0x28(%rsp)
   25f7b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
   25f80:	48 63 c3             	movslq %ebx,%rax
   25f83:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   25f88:	44 89 f8             	mov    %r15d,%eax
   25f8b:	4d 63 fe             	movslq %r14d,%r15
   25f8e:	41 0f af c6          	imul   %r14d,%eax
   25f92:	44 89 9c 24 88 00 00 	mov    %r11d,0x88(%rsp)
   25f99:	00 
   25f9a:	48 98                	cltq
   25f9c:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
   25fa1:	31 c0                	xor    %eax,%eax
   25fa3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
               memcpy(final + out_y*a->s->img_x*out_bytes + out_x*out_bytes,
   25fa8:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
   25fad:	4c 8b 6c 24 58       	mov    0x58(%rsp),%r13
            for (i=0; i < x; ++i) {
   25fb2:	31 ed                	xor    %ebp,%ebp
   25fb4:	89 44 24 44          	mov    %eax,0x44(%rsp)
   25fb8:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
               memcpy(final + out_y*a->s->img_x*out_bytes + out_x*out_bytes,
   25fbd:	4c 89 cb             	mov    %r9,%rbx
   25fc0:	48 8b 09             	mov    (%rcx),%rcx
   25fc3:	4c 89 e8             	mov    %r13,%rax
   25fc6:	41 89 ed             	mov    %ebp,%r13d
   25fc9:	48 89 c5             	mov    %rax,%rbp
   25fcc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   25fd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   25fd8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
   25fdd:	48 89 de             	mov    %rbx,%rsi
   25fe0:	4c 89 fa             	mov    %r15,%rdx
            for (i=0; i < x; ++i) {
   25fe3:	41 83 c5 01          	add    $0x1,%r13d
   25fe7:	4c 01 fb             	add    %r15,%rbx
               memcpy(final + out_y*a->s->img_x*out_bytes + out_x*out_bytes,
   25fea:	8b 38                	mov    (%rax),%edi
   25fec:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   25ff1:	41 0f af fe          	imul   %r14d,%edi
   25ff5:	41 0f af fc          	imul   %r12d,%edi
   25ff9:	48 01 ef             	add    %rbp,%rdi
   25ffc:	48 01 c7             	add    %rax,%rdi
   25fff:	e8 0c 04 fe ff       	call   6410 <memcpy@plt>
            for (i=0; i < x; ++i) {
   26004:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   26009:	48 01 c5             	add    %rax,%rbp
   2600c:	44 39 6c 24 28       	cmp    %r13d,0x28(%rsp)
   26011:	75 c5                	jne    25fd8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1468>
         for (j=0; j < y; ++j) {
   26013:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
   26018:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
   2601d:	8b 44 24 44          	mov    0x44(%rsp),%eax
   26021:	49 01 c9             	add    %rcx,%r9
   26024:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
   2602b:	83 c0 01             	add    $0x1,%eax
   2602e:	41 01 cc             	add    %ecx,%r12d
   26031:	39 84 24 88 00 00 00 	cmp    %eax,0x88(%rsp)
   26038:	0f 85 6a ff ff ff    	jne    25fa8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1438>
   2603e:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
   26045:	00 
   26046:	4c 8b ac 24 a8 00 00 	mov    0xa8(%rsp),%r13
   2604d:	00 
         STBI_FREE(a->out);
   2604e:	e8 4d 06 fe ff       	call   66a0 <free@plt>
         image_data += img_len;
   26053:	8b 84 24 9c 00 00 00 	mov    0x9c(%rsp),%eax
   2605a:	48 01 84 24 90 00 00 	add    %rax,0x90(%rsp)
   26061:	00 
         image_data_len -= img_len;
   26062:	29 84 24 8c 00 00 00 	sub    %eax,0x8c(%rsp)
   26069:	e9 3a fd ff ff       	jmp    25da8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1238>
   a->out = final;
   2606e:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
   26073:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   26078:	49 89 47 18          	mov    %rax,0x18(%r15)
   return 1;
   2607c:	e9 f1 f0 ff ff       	jmp    25172 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x602>
               if (z->depth == 16) {
   26081:	49 8b 17             	mov    (%r15),%rdx
                  if (!stbi__compute_transparency16(z, tc16, s->img_out_n)) return 0;
   26084:	48 8b 04 24          	mov    (%rsp),%rax
   stbi__uint32 i, pixel_count = s->img_x * s->img_y;
   26088:	8b 0a                	mov    (%rdx),%ecx
   2608a:	0f af 4a 04          	imul   0x4(%rdx),%ecx
               if (z->depth == 16) {
   2608e:	41 83 7f 20 10       	cmpl   $0x10,0x20(%r15)
                  if (!stbi__compute_transparency16(z, tc16, s->img_out_n)) return 0;
   26093:	8b 70 0c             	mov    0xc(%rax),%esi
   26096:	49 8b 47 18          	mov    0x18(%r15),%rax
               if (z->depth == 16) {
   2609a:	0f 84 7e 05 00 00    	je     2661e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1aae>
   if (out_n == 2) {
   260a0:	83 fe 02             	cmp    $0x2,%esi
   260a3:	74 4b                	je     260f0 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1580>
      for (i=0; i < pixel_count; ++i) {
   260a5:	85 c9                	test   %ecx,%ecx
   260a7:	0f 84 4f 03 00 00    	je     263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])
   260ad:	0f b6 b4 24 67 03 00 	movzbl 0x367(%rsp),%esi
   260b4:	00 
   260b5:	0f b6 bc 24 68 03 00 	movzbl 0x368(%rsp),%edi
   260bc:	00 
   260bd:	48 8d 14 88          	lea    (%rax,%rcx,4),%rdx
   260c1:	44 0f b6 84 24 69 03 	movzbl 0x369(%rsp),%r8d
   260c8:	00 00 
   260ca:	eb 0d                	jmp    260d9 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1569>
         p += 4;
   260cc:	48 83 c0 04          	add    $0x4,%rax
      for (i=0; i < pixel_count; ++i) {
   260d0:	48 39 d0             	cmp    %rdx,%rax
   260d3:	0f 84 23 03 00 00    	je     263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])
   260d9:	40 38 30             	cmp    %sil,(%rax)
   260dc:	75 ee                	jne    260cc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x155c>
   260de:	40 38 78 01          	cmp    %dil,0x1(%rax)
   260e2:	75 e8                	jne    260cc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x155c>
   260e4:	44 38 40 02          	cmp    %r8b,0x2(%rax)
   260e8:	75 e2                	jne    260cc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x155c>
            p[3] = 0;
   260ea:	c6 40 03 00          	movb   $0x0,0x3(%rax)
   260ee:	eb dc                	jmp    260cc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x155c>
      for (i=0; i < pixel_count; ++i) {
   260f0:	85 c9                	test   %ecx,%ecx
   260f2:	0f 84 04 03 00 00    	je     263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
   260f8:	44 8d 41 ff          	lea    -0x1(%rcx),%r8d
         p[1] = (p[0] == tc[0] ? 0 : 255);
   260fc:	0f b6 b4 24 67 03 00 	movzbl 0x367(%rsp),%esi
   26103:	00 
   26104:	41 83 f8 0f          	cmp    $0xf,%r8d
   26108:	0f 86 1c 0c 00 00    	jbe    26d2a <_ZL20stbi__parse_png_fileP9stbi__pngii+0x21ba>
   2610e:	66 0f 6e c6          	movd   %esi,%xmm0
   26112:	44 89 c7             	mov    %r8d,%edi
   26115:	66 0f ef e4          	pxor   %xmm4,%xmm4
   26119:	48 89 c2             	mov    %rax,%rdx
   2611c:	66 0f 60 c0          	punpcklbw %xmm0,%xmm0
   26120:	c1 ef 04             	shr    $0x4,%edi
   26123:	66 0f 6f 1d e5 26 01 	movdqa 0x126e5(%rip),%xmm3        # 38810 <_ZL11stbi__bmask+0x90>
   2612a:	00 
   2612b:	66 0f 61 c0          	punpcklwd %xmm0,%xmm0
   2612f:	48 c1 e7 05          	shl    $0x5,%rdi
   26133:	66 0f 70 c8 00       	pshufd $0x0,%xmm0,%xmm1
   26138:	48 01 c7             	add    %rax,%rdi
   2613b:	f3 0f 6f 02          	movdqu (%rdx),%xmm0
   2613f:	f3 0f 6f 52 10       	movdqu 0x10(%rdx),%xmm2
   26144:	48 83 c2 20          	add    $0x20,%rdx
   26148:	66 0f db c3          	pand   %xmm3,%xmm0
   2614c:	66 0f db d3          	pand   %xmm3,%xmm2
   26150:	66 0f 67 c2          	packuswb %xmm2,%xmm0
   26154:	66 0f 74 c1          	pcmpeqb %xmm1,%xmm0
   26158:	66 0f 74 c4          	pcmpeqb %xmm4,%xmm0
   2615c:	66 41 0f 7e c1       	movd   %xmm0,%r9d
   26161:	44 88 4a e1          	mov    %r9b,-0x1f(%rdx)
   26165:	0f 29 84 24 50 03 00 	movaps %xmm0,0x350(%rsp)
   2616c:	00 
   2616d:	44 0f b6 8c 24 51 03 	movzbl 0x351(%rsp),%r9d
   26174:	00 00 
   26176:	44 88 4a e3          	mov    %r9b,-0x1d(%rdx)
   2617a:	0f 29 84 24 40 03 00 	movaps %xmm0,0x340(%rsp)
   26181:	00 
   26182:	44 0f b6 8c 24 42 03 	movzbl 0x342(%rsp),%r9d
   26189:	00 00 
   2618b:	44 88 4a e5          	mov    %r9b,-0x1b(%rdx)
   2618f:	0f 29 84 24 30 03 00 	movaps %xmm0,0x330(%rsp)
   26196:	00 
   26197:	44 0f b6 8c 24 33 03 	movzbl 0x333(%rsp),%r9d
   2619e:	00 00 
   261a0:	44 88 4a e7          	mov    %r9b,-0x19(%rdx)
   261a4:	0f 29 84 24 20 03 00 	movaps %xmm0,0x320(%rsp)
   261ab:	00 
   261ac:	44 0f b6 8c 24 24 03 	movzbl 0x324(%rsp),%r9d
   261b3:	00 00 
   261b5:	44 88 4a e9          	mov    %r9b,-0x17(%rdx)
   261b9:	0f 29 84 24 10 03 00 	movaps %xmm0,0x310(%rsp)
   261c0:	00 
   261c1:	44 0f b6 8c 24 15 03 	movzbl 0x315(%rsp),%r9d
   261c8:	00 00 
   261ca:	44 88 4a eb          	mov    %r9b,-0x15(%rdx)
   261ce:	0f 29 84 24 00 03 00 	movaps %xmm0,0x300(%rsp)
   261d5:	00 
   261d6:	44 0f b6 8c 24 06 03 	movzbl 0x306(%rsp),%r9d
   261dd:	00 00 
   261df:	44 88 4a ed          	mov    %r9b,-0x13(%rdx)
   261e3:	0f 29 84 24 f0 02 00 	movaps %xmm0,0x2f0(%rsp)
   261ea:	00 
   261eb:	44 0f b6 8c 24 f7 02 	movzbl 0x2f7(%rsp),%r9d
   261f2:	00 00 
   261f4:	44 88 4a ef          	mov    %r9b,-0x11(%rdx)
   261f8:	0f 29 84 24 e0 02 00 	movaps %xmm0,0x2e0(%rsp)
   261ff:	00 
   26200:	44 0f b6 8c 24 e8 02 	movzbl 0x2e8(%rsp),%r9d
   26207:	00 00 
   26209:	44 88 4a f1          	mov    %r9b,-0xf(%rdx)
   2620d:	0f 29 84 24 d0 02 00 	movaps %xmm0,0x2d0(%rsp)
   26214:	00 
   26215:	44 0f b6 8c 24 d9 02 	movzbl 0x2d9(%rsp),%r9d
   2621c:	00 00 
   2621e:	44 88 4a f3          	mov    %r9b,-0xd(%rdx)
   26222:	0f 29 84 24 c0 02 00 	movaps %xmm0,0x2c0(%rsp)
   26229:	00 
   2622a:	44 0f b6 8c 24 ca 02 	movzbl 0x2ca(%rsp),%r9d
   26231:	00 00 
   26233:	44 88 4a f5          	mov    %r9b,-0xb(%rdx)
   26237:	0f 29 84 24 b0 02 00 	movaps %xmm0,0x2b0(%rsp)
   2623e:	00 
   2623f:	44 0f b6 8c 24 bb 02 	movzbl 0x2bb(%rsp),%r9d
   26246:	00 00 
   26248:	44 88 4a f7          	mov    %r9b,-0x9(%rdx)
   2624c:	0f 29 84 24 a0 02 00 	movaps %xmm0,0x2a0(%rsp)
   26253:	00 
   26254:	44 0f b6 8c 24 ac 02 	movzbl 0x2ac(%rsp),%r9d
   2625b:	00 00 
   2625d:	44 88 4a f9          	mov    %r9b,-0x7(%rdx)
   26261:	0f 29 84 24 90 02 00 	movaps %xmm0,0x290(%rsp)
   26268:	00 
   26269:	44 0f b6 8c 24 9d 02 	movzbl 0x29d(%rsp),%r9d
   26270:	00 00 
   26272:	44 88 4a fb          	mov    %r9b,-0x5(%rdx)
   26276:	0f 29 84 24 80 02 00 	movaps %xmm0,0x280(%rsp)
   2627d:	00 
   2627e:	44 0f b6 8c 24 8e 02 	movzbl 0x28e(%rsp),%r9d
   26285:	00 00 
   26287:	44 88 4a fd          	mov    %r9b,-0x3(%rdx)
   2628b:	0f 29 84 24 70 02 00 	movaps %xmm0,0x270(%rsp)
   26292:	00 
   26293:	44 0f b6 8c 24 7f 02 	movzbl 0x27f(%rsp),%r9d
   2629a:	00 00 
   2629c:	44 88 4a ff          	mov    %r9b,-0x1(%rdx)
      for (i=0; i < pixel_count; ++i) {
   262a0:	48 39 d7             	cmp    %rdx,%rdi
   262a3:	0f 85 92 fe ff ff    	jne    2613b <_ZL20stbi__parse_png_fileP9stbi__pngii+0x15cb>
   262a9:	44 89 c7             	mov    %r8d,%edi
   262ac:	83 e7 f0             	and    $0xfffffff0,%edi
   262af:	89 fa                	mov    %edi,%edx
   262b1:	48 8d 14 50          	lea    (%rax,%rdx,2),%rdx
   262b5:	41 29 f8             	sub    %edi,%r8d
   262b8:	41 83 f8 07          	cmp    $0x7,%r8d
   262bc:	0f 86 aa 00 00 00    	jbe    2636c <_ZL20stbi__parse_png_fileP9stbi__pngii+0x17fc>
         p[1] = (p[0] == tc[0] ? 0 : 255);
   262c2:	f3 0f 7e 0d 46 25 01 	movq   0x12546(%rip),%xmm1        # 38810 <_ZL11stbi__bmask+0x90>
   262c9:	00 
   262ca:	41 89 f9             	mov    %edi,%r9d
   262cd:	41 83 e0 f8          	and    $0xfffffff8,%r8d
   262d1:	4d 01 c9             	add    %r9,%r9
   262d4:	44 01 c7             	add    %r8d,%edi
   262d7:	4e 8d 14 08          	lea    (%rax,%r9,1),%r10
   262db:	4e 8d 4c 08 01       	lea    0x1(%rax,%r9,1),%r9
   262e0:	40 0f b6 c6          	movzbl %sil,%eax
   262e4:	f3 41 0f 7e 52 08    	movq   0x8(%r10),%xmm2
   262ea:	f3 41 0f 7e 02       	movq   (%r10),%xmm0
   262ef:	88 c4                	mov    %al,%ah
   262f1:	66 0f db c1          	pand   %xmm1,%xmm0
   262f5:	66 0f db ca          	pand   %xmm2,%xmm1
   262f9:	66 0f 6e d0          	movd   %eax,%xmm2
   262fd:	66 0f 67 c1          	packuswb %xmm1,%xmm0
   26301:	f2 0f 70 ca 00       	pshuflw $0x0,%xmm2,%xmm1
   26306:	66 0f 70 c0 08       	pshufd $0x8,%xmm0,%xmm0
   2630b:	66 0f 74 c1          	pcmpeqb %xmm1,%xmm0
   2630f:	66 0f ef c9          	pxor   %xmm1,%xmm1
   26313:	66 0f 74 c1          	pcmpeqb %xmm1,%xmm0
   26317:	66 48 0f 7e c0       	movq   %xmm0,%rax
   2631c:	49 89 c2             	mov    %rax,%r10
   2631f:	0f b6 dc             	movzbl %ah,%ebx
   26322:	41 88 01             	mov    %al,(%r9)
   26325:	49 c1 ea 10          	shr    $0x10,%r10
   26329:	41 88 59 02          	mov    %bl,0x2(%r9)
   2632d:	45 88 51 04          	mov    %r10b,0x4(%r9)
   26331:	49 89 c2             	mov    %rax,%r10
   26334:	49 c1 ea 18          	shr    $0x18,%r10
   26338:	45 88 51 06          	mov    %r10b,0x6(%r9)
   2633c:	49 89 c2             	mov    %rax,%r10
   2633f:	49 c1 ea 20          	shr    $0x20,%r10
   26343:	45 88 51 08          	mov    %r10b,0x8(%r9)
   26347:	49 89 c2             	mov    %rax,%r10
   2634a:	49 c1 ea 28          	shr    $0x28,%r10
   2634e:	45 88 51 0a          	mov    %r10b,0xa(%r9)
   26352:	49 89 c2             	mov    %rax,%r10
   26355:	48 c1 e8 38          	shr    $0x38,%rax
   26359:	49 c1 ea 30          	shr    $0x30,%r10
   2635d:	41 88 41 0e          	mov    %al,0xe(%r9)
      for (i=0; i < pixel_count; ++i) {
   26361:	44 89 c0             	mov    %r8d,%eax
         p[1] = (p[0] == tc[0] ? 0 : 255);
   26364:	45 88 51 0c          	mov    %r10b,0xc(%r9)
   26368:	48 8d 14 42          	lea    (%rdx,%rax,2),%rdx
   2636c:	40 38 32             	cmp    %sil,(%rdx)
   2636f:	0f 95 c0             	setne  %al
   26372:	f7 d8                	neg    %eax
   26374:	88 42 01             	mov    %al,0x1(%rdx)
      for (i=0; i < pixel_count; ++i) {
   26377:	8d 47 01             	lea    0x1(%rdi),%eax
   2637a:	39 c8                	cmp    %ecx,%eax
   2637c:	73 7e                	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 255);
   2637e:	40 38 72 02          	cmp    %sil,0x2(%rdx)
   26382:	0f 95 c0             	setne  %al
   26385:	f7 d8                	neg    %eax
   26387:	88 42 03             	mov    %al,0x3(%rdx)
      for (i=0; i < pixel_count; ++i) {
   2638a:	8d 47 02             	lea    0x2(%rdi),%eax
   2638d:	39 c8                	cmp    %ecx,%eax
   2638f:	73 6b                	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 255);
   26391:	40 38 72 04          	cmp    %sil,0x4(%rdx)
   26395:	0f 95 c0             	setne  %al
   26398:	f7 d8                	neg    %eax
   2639a:	88 42 05             	mov    %al,0x5(%rdx)
      for (i=0; i < pixel_count; ++i) {
   2639d:	8d 47 03             	lea    0x3(%rdi),%eax
   263a0:	39 c8                	cmp    %ecx,%eax
   263a2:	73 58                	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 255);
   263a4:	40 38 72 06          	cmp    %sil,0x6(%rdx)
   263a8:	0f 95 c0             	setne  %al
   263ab:	f7 d8                	neg    %eax
   263ad:	88 42 07             	mov    %al,0x7(%rdx)
      for (i=0; i < pixel_count; ++i) {
   263b0:	8d 47 04             	lea    0x4(%rdi),%eax
   263b3:	39 c8                	cmp    %ecx,%eax
   263b5:	73 45                	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 255);
   263b7:	40 38 72 08          	cmp    %sil,0x8(%rdx)
   263bb:	0f 95 c0             	setne  %al
   263be:	f7 d8                	neg    %eax
   263c0:	88 42 09             	mov    %al,0x9(%rdx)
      for (i=0; i < pixel_count; ++i) {
   263c3:	8d 47 05             	lea    0x5(%rdi),%eax
   263c6:	39 c8                	cmp    %ecx,%eax
   263c8:	73 32                	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 255);
   263ca:	40 38 72 0a          	cmp    %sil,0xa(%rdx)
   263ce:	0f 95 c0             	setne  %al
   263d1:	f7 d8                	neg    %eax
   263d3:	88 42 0b             	mov    %al,0xb(%rdx)
      for (i=0; i < pixel_count; ++i) {
   263d6:	8d 47 06             	lea    0x6(%rdi),%eax
   263d9:	39 c8                	cmp    %ecx,%eax
   263db:	73 1f                	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 255);
   263dd:	40 38 72 0c          	cmp    %sil,0xc(%rdx)
   263e1:	0f 95 c0             	setne  %al
   263e4:	f7 d8                	neg    %eax
   263e6:	88 42 0d             	mov    %al,0xd(%rdx)
      for (i=0; i < pixel_count; ++i) {
   263e9:	8d 47 07             	lea    0x7(%rdi),%eax
   263ec:	39 c8                	cmp    %ecx,%eax
   263ee:	73 0c                	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 255);
   263f0:	40 38 72 0e          	cmp    %sil,0xe(%rdx)
   263f4:	0f 95 c0             	setne  %al
   263f7:	f7 d8                	neg    %eax
   263f9:	88 42 0f             	mov    %al,0xf(%rdx)
            if (is_iphone && stbi__de_iphone_flag && s->img_out_n > 2)
   263fc:	44 8b 54 24 34       	mov    0x34(%rsp),%r10d
   26401:	45 85 d2             	test   %r10d,%r10d
   26404:	75 42                	jne    26448 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x18d8>
            if (pal_img_n) {
   26406:	80 7c 24 14 00       	cmpb   $0x0,0x14(%rsp)
   2640b:	0f 85 83 ed ff ff    	jne    25194 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x624>
               ++s->img_n;
   26411:	48 8b 04 24          	mov    (%rsp),%rax
   26415:	83 40 08 01          	addl   $0x1,0x8(%rax)
   26419:	e9 5c f8 ff ff       	jmp    25c7a <_ZL20stbi__parse_png_fileP9stbi__pngii+0x110a>
   stbi__g_failure_reason = str;
   2641e:	48 8d 05 56 19 01 00 	lea    0x11956(%rip),%rax        # 37d7b <_ZSt19piecewise_construct+0x434>
   26425:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2642c:	ff ff 
            if (c.length > 256*3) return stbi__err("invalid PLTE","Corrupt PNG");
   2642e:	e9 b5 e7 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   stbi__g_failure_reason = str;
   26433:	48 8d 05 e3 18 01 00 	lea    0x118e3(%rip),%rax        # 37d1d <_ZSt19piecewise_construct+0x3d6>
   2643a:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   26441:	ff ff 
            color = stbi__get8(s);  if (color > 6)         return stbi__err("bad ctype","Corrupt PNG");
   26443:	e9 a0 e7 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
            if (is_iphone && stbi__de_iphone_flag && s->img_out_n > 2)
   26448:	64 44 8b 1c 25 e0 ff 	mov    %fs:0xffffffffffffffe0,%r11d
   2644f:	ff ff 
   26451:	45 85 db             	test   %r11d,%r11d
   26454:	0f 84 fc 00 00 00    	je     26556 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x19e6>
   2645a:	64 8b 04 25 e4 ff ff 	mov    %fs:0xffffffffffffffe4,%eax
   26461:	ff 
   26462:	85 c0                	test   %eax,%eax
   26464:	74 0e                	je     26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
   26466:	48 8b 04 24          	mov    (%rsp),%rax
   2646a:	83 78 0c 02          	cmpl   $0x2,0xc(%rax)
   2646e:	0f 8f 03 02 00 00    	jg     26677 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1b07>
            if (pal_img_n) {
   26474:	80 7c 24 14 00       	cmpb   $0x0,0x14(%rsp)
   26479:	0f 85 15 ed ff ff    	jne    25194 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x624>
            } else if (has_trans) {
   2647f:	80 7c 24 40 00       	cmpb   $0x0,0x40(%rsp)
   26484:	75 8b                	jne    26411 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x18a1>
   26486:	e9 ef f7 ff ff       	jmp    25c7a <_ZL20stbi__parse_png_fileP9stbi__pngii+0x110a>
   2648b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   stbi__g_failure_reason = str;
   26490:	48 8d 05 c7 18 01 00 	lea    0x118c7(%rip),%rax        # 37d5e <_ZSt19piecewise_construct+0x417>
   26497:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2649e:	ff ff 
            if (!s->img_x || !s->img_y) return stbi__err("0-pixel image","Corrupt PNG");
   264a0:	e9 43 e7 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
      STBI_FREE(a.zout_start);
   264a5:	48 8b bc 24 f0 07 00 	mov    0x7f0(%rsp),%rdi
   264ac:	00 
   264ad:	e8 ee 01 fe ff       	call   66a0 <free@plt>
            z->expanded = (stbi_uc *) stbi_zlib_decode_malloc_guesssize_headerflag((char *) z->idata, ioff, raw_len, (int *) &raw_len, !is_iphone);
   264b2:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
   264b9:	00 
            if (z->expanded == NULL) return 0; // zlib should set error
   264ba:	e9 29 e7 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   stbi__g_failure_reason = str;
   264bf:	48 8d 05 c2 18 01 00 	lea    0x118c2(%rip),%rax        # 37d88 <_ZSt19piecewise_construct+0x441>
   264c6:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   264cd:	ff ff 
            if (z->idata) return stbi__err("tRNS after IDAT","Corrupt PNG");
   264cf:	e9 14 e7 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   stbi__g_failure_reason = str;
   264d4:	48 8d 05 13 18 01 00 	lea    0x11813(%rip),%rax        # 37cee <_ZSt19piecewise_construct+0x3a7>
   264db:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   264e2:	ff ff 
            if (!first) return stbi__err("multiple IHDR","Corrupt PNG");
   264e4:	e9 ff e6 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   stbi__g_failure_reason = str;
   264e9:	48 8d 05 0c 18 01 00 	lea    0x1180c(%rip),%rax        # 37cfc <_ZSt19piecewise_construct+0x3b5>
   264f0:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   264f7:	ff ff 
            if (c.length != 13) return stbi__err("bad IHDR len","Corrupt PNG");
   264f9:	e9 ea e6 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
               invalid_chunk[3] = STBI__BYTECAST(c.type >>  0);
   264fe:	0f c8                	bswap  %eax
               invalid_chunk[0] = STBI__BYTECAST(c.type >> 24);
   26500:	89 05 9a b0 01 00    	mov    %eax,0x1b09a(%rip)        # 415a0 <_ZZL20stbi__parse_png_fileP9stbi__pngiiE13invalid_chunk>
   stbi__g_failure_reason = str;
   26506:	48 8d 05 93 b0 01 00 	lea    0x1b093(%rip),%rax        # 415a0 <_ZZL20stbi__parse_png_fileP9stbi__pngiiE13invalid_chunk>
   2650d:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   26514:	ff ff 
               return stbi__err(invalid_chunk, "PNG not supported: unknown PNG chunk type");
   26516:	e9 cd e6 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   stbi__g_failure_reason = str;
   2651b:	48 8d 05 a4 18 01 00 	lea    0x118a4(%rip),%rax        # 37dc6 <_ZSt19piecewise_construct+0x47f>
   26522:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   26529:	ff ff 
            if (pal_img_n && !pal_len) return stbi__err("no PLTE","Corrupt PNG");
   2652b:	e9 b8 e6 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
            if (scan == STBI__SCAN_header) { s->img_n = pal_img_n; return 1; }
   26530:	0f b6 44 24 14       	movzbl 0x14(%rsp),%eax
   26535:	48 8b 0c 24          	mov    (%rsp),%rcx
   26539:	89 41 08             	mov    %eax,0x8(%rcx)
   2653c:	e9 53 f7 ff ff       	jmp    25c94 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1124>
   stbi__g_failure_reason = str;
   26541:	48 8d 05 61 18 01 00 	lea    0x11861(%rip),%rax        # 37da9 <_ZSt19piecewise_construct+0x462>
   26548:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2654f:	ff ff 
               if (c.length > pal_len) return stbi__err("bad tRNS len","Corrupt PNG");
   26551:	e9 92 e6 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
            if (is_iphone && stbi__de_iphone_flag && s->img_out_n > 2)
   26556:	8b 05 a4 b2 01 00    	mov    0x1b2a4(%rip),%eax        # 41800 <_ZL27stbi__de_iphone_flag_global>
   2655c:	e9 01 ff ff ff       	jmp    26462 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x18f2>
   stbi__g_failure_reason = str;
   26561:	48 8d 05 e1 17 01 00 	lea    0x117e1(%rip),%rax        # 37d49 <_ZSt19piecewise_construct+0x402>
   26568:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2656f:	ff ff 
            interlace = stbi__get8(s); if (interlace>1) return stbi__err("bad interlace method","Corrupt PNG");
   26571:	e9 72 e6 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   stbi__g_failure_reason = str;
   26576:	48 8d 05 aa 17 01 00 	lea    0x117aa(%rip),%rax        # 37d27 <_ZSt19piecewise_construct+0x3e0>
   2657d:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   26584:	ff ff 
            comp  = stbi__get8(s);  if (comp) return stbi__err("bad comp method","Corrupt PNG");
   26586:	e9 5d e6 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   stbi__g_failure_reason = str;
   2658b:	48 8d 05 24 18 01 00 	lea    0x11824(%rip),%rax        # 37db6 <_ZSt19piecewise_construct+0x46f>
   26592:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   26599:	ff ff 
               if (!(s->img_n & 1)) return stbi__err("tRNS with alpha","Corrupt PNG");
   2659b:	e9 48 e6 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
   return a <= INT_MAX/b;
   265a0:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   265a5:	31 d2                	xor    %edx,%edx
   265a7:	41 f7 fe             	idiv   %r14d
   return stbi__mul2sizes_valid(a, b) && stbi__addsizes_valid(a*b, add);
   265aa:	44 39 e8             	cmp    %r13d,%eax
   265ad:	0f 8c 16 ec ff ff    	jl     251c9 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x659>
   265b3:	44 89 ef             	mov    %r13d,%edi
   265b6:	41 0f af fe          	imul   %r14d,%edi
   return stbi__malloc(a*b + add);
   265ba:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   265bd:	e8 9e 01 fe ff       	call   6760 <malloc@plt>
   265c2:	49 89 c4             	mov    %rax,%r12
   if (p == NULL) return stbi__err("outofmem", "Out of memory");
   265c5:	48 85 c0             	test   %rax,%rax
   265c8:	0f 84 fb eb ff ff    	je     251c9 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x659>
   if (pal_img_n == 3) {
   265ce:	41 83 fe 03          	cmp    $0x3,%r14d
   265d2:	0f 85 68 f6 ff ff    	jne    25c40 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x10d0>
      for (i=0; i < pixel_count; ++i) {
   265d8:	45 85 ed             	test   %r13d,%r13d
   265db:	0f 84 8d f6 ff ff    	je     25c6e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x10fe>
   265e1:	44 89 ee             	mov    %r13d,%esi
   265e4:	48 89 e9             	mov    %rbp,%rcx
   265e7:	48 89 c2             	mov    %rax,%rdx
   265ea:	48 01 ee             	add    %rbp,%rsi
         int n = orig[i]*4;
   265ed:	0f b6 01             	movzbl (%rcx),%eax
      for (i=0; i < pixel_count; ++i) {
   265f0:	48 83 c1 01          	add    $0x1,%rcx
         p += 3;
   265f4:	48 83 c2 03          	add    $0x3,%rdx
         int n = orig[i]*4;
   265f8:	c1 e0 02             	shl    $0x2,%eax
         p[0] = palette[n  ];
   265fb:	48 98                	cltq
   265fd:	0f b7 bc 04 d0 03 00 	movzwl 0x3d0(%rsp,%rax,1),%edi
   26604:	00 
         p[2] = palette[n+2];
   26605:	0f b6 84 04 d2 03 00 	movzbl 0x3d2(%rsp,%rax,1),%eax
   2660c:	00 
         p[0] = palette[n  ];
   2660d:	66 89 7a fd          	mov    %di,-0x3(%rdx)
         p[2] = palette[n+2];
   26611:	88 42 ff             	mov    %al,-0x1(%rdx)
      for (i=0; i < pixel_count; ++i) {
   26614:	48 39 f1             	cmp    %rsi,%rcx
   26617:	75 d4                	jne    265ed <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1a7d>
   26619:	e9 50 f6 ff ff       	jmp    25c6e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x10fe>
   if (out_n == 2) {
   2661e:	83 fe 02             	cmp    $0x2,%esi
   26621:	0f 84 05 05 00 00    	je     26b2c <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1fbc>
      for (i = 0; i < pixel_count; ++i) {
   26627:	85 c9                	test   %ecx,%ecx
   26629:	0f 84 cd fd ff ff    	je     263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])
   2662f:	0f b7 b4 24 6a 03 00 	movzwl 0x36a(%rsp),%esi
   26636:	00 
   26637:	0f b7 bc 24 6e 03 00 	movzwl 0x36e(%rsp),%edi
   2663e:	00 
   2663f:	48 8d 14 c8          	lea    (%rax,%rcx,8),%rdx
   26643:	44 0f b7 84 24 6c 03 	movzwl 0x36c(%rsp),%r8d
   2664a:	00 00 
   2664c:	eb 0d                	jmp    2665b <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1aeb>
         p += 4;
   2664e:	48 83 c0 08          	add    $0x8,%rax
      for (i = 0; i < pixel_count; ++i) {
   26652:	48 39 c2             	cmp    %rax,%rdx
   26655:	0f 84 a1 fd ff ff    	je     263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])
   2665b:	66 39 30             	cmp    %si,(%rax)
   2665e:	75 ee                	jne    2664e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1ade>
   26660:	66 44 39 40 02       	cmp    %r8w,0x2(%rax)
   26665:	75 e7                	jne    2664e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1ade>
   26667:	66 39 78 04          	cmp    %di,0x4(%rax)
   2666b:	75 e1                	jne    2664e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1ade>
            p[3] = 0;
   2666d:	45 31 c9             	xor    %r9d,%r9d
   26670:	66 44 89 48 06       	mov    %r9w,0x6(%rax)
   26675:	eb d7                	jmp    2664e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1ade>
               stbi__de_iphone(z);
   26677:	49 8b 07             	mov    (%r15),%rax
   2667a:	49 8b 7f 18          	mov    0x18(%r15),%rdi
   stbi__uint32 i, pixel_count = s->img_x * s->img_y;
   2667e:	8b 10                	mov    (%rax),%edx
   26680:	0f af 50 04          	imul   0x4(%rax),%edx
   if (s->img_out_n == 3) {  // convert bgr to rgb
   26684:	83 78 0c 03          	cmpl   $0x3,0xc(%rax)
   26688:	0f 84 70 06 00 00    	je     26cfe <_ZL20stbi__parse_png_fileP9stbi__pngii+0x218e>
      if (stbi__unpremultiply_on_load) {
   2668e:	64 8b 0c 25 e8 ff ff 	mov    %fs:0xffffffffffffffe8,%ecx
   26695:	ff 
   26696:	8b 05 68 b1 01 00    	mov    0x1b168(%rip),%eax        # 41804 <_ZL34stbi__unpremultiply_on_load_global>
   2669c:	85 c9                	test   %ecx,%ecx
   2669e:	74 08                	je     266a8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1b38>
   266a0:	64 8b 04 25 ec ff ff 	mov    %fs:0xffffffffffffffec,%eax
   266a7:	ff 
   266a8:	85 c0                	test   %eax,%eax
   266aa:	0f 85 84 06 00 00    	jne    26d34 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x21c4>
         for (i=0; i < pixel_count; ++i) {
   266b0:	85 d2                	test   %edx,%edx
   266b2:	0f 84 bc fd ff ff    	je     26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
   266b8:	8d 72 ff             	lea    -0x1(%rdx),%esi
   266bb:	48 89 f8             	mov    %rdi,%rax
   266be:	83 fe 0f             	cmp    $0xf,%esi
   266c1:	0f 86 fa 06 00 00    	jbe    26dc1 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x2251>
   266c7:	89 f1                	mov    %esi,%ecx
   266c9:	c1 e9 04             	shr    $0x4,%ecx
   266cc:	48 c1 e1 06          	shl    $0x6,%rcx
   266d0:	48 01 f9             	add    %rdi,%rcx
            stbi_uc t = p[0];
   266d3:	f3 0f 6f 18          	movdqu (%rax),%xmm3
   266d7:	f3 0f 6f 50 10       	movdqu 0x10(%rax),%xmm2
   266dc:	48 83 c0 40          	add    $0x40,%rax
   266e0:	f3 0f 6f 40 f0       	movdqu -0x10(%rax),%xmm0
   266e5:	f3 0f 6f 48 e0       	movdqu -0x20(%rax),%xmm1
            p[0] = p[2];
   266ea:	0f 29 9c 24 60 02 00 	movaps %xmm3,0x260(%rsp)
   266f1:	00 
   266f2:	44 0f b6 84 24 62 02 	movzbl 0x262(%rsp),%r8d
   266f9:	00 00 
   266fb:	44 88 40 c0          	mov    %r8b,-0x40(%rax)
   266ff:	0f 29 9c 24 50 02 00 	movaps %xmm3,0x250(%rsp)
   26706:	00 
   26707:	44 0f b6 84 24 56 02 	movzbl 0x256(%rsp),%r8d
   2670e:	00 00 
   26710:	44 88 40 c4          	mov    %r8b,-0x3c(%rax)
   26714:	0f 29 9c 24 40 02 00 	movaps %xmm3,0x240(%rsp)
   2671b:	00 
   2671c:	44 0f b6 84 24 4a 02 	movzbl 0x24a(%rsp),%r8d
   26723:	00 00 
   26725:	44 88 40 c8          	mov    %r8b,-0x38(%rax)
   26729:	0f 29 9c 24 30 02 00 	movaps %xmm3,0x230(%rsp)
   26730:	00 
   26731:	44 0f b6 84 24 3e 02 	movzbl 0x23e(%rsp),%r8d
   26738:	00 00 
   2673a:	44 88 40 cc          	mov    %r8b,-0x34(%rax)
   2673e:	0f 29 94 24 20 02 00 	movaps %xmm2,0x220(%rsp)
   26745:	00 
   26746:	44 0f b6 84 24 22 02 	movzbl 0x222(%rsp),%r8d
   2674d:	00 00 
   2674f:	44 88 40 d0          	mov    %r8b,-0x30(%rax)
   26753:	0f 29 94 24 10 02 00 	movaps %xmm2,0x210(%rsp)
   2675a:	00 
   2675b:	44 0f b6 84 24 16 02 	movzbl 0x216(%rsp),%r8d
   26762:	00 00 
   26764:	44 88 40 d4          	mov    %r8b,-0x2c(%rax)
   26768:	0f 29 94 24 00 02 00 	movaps %xmm2,0x200(%rsp)
   2676f:	00 
   26770:	44 0f b6 84 24 0a 02 	movzbl 0x20a(%rsp),%r8d
   26777:	00 00 
   26779:	44 88 40 d8          	mov    %r8b,-0x28(%rax)
   2677d:	0f 29 94 24 f0 01 00 	movaps %xmm2,0x1f0(%rsp)
   26784:	00 
   26785:	44 0f b6 84 24 fe 01 	movzbl 0x1fe(%rsp),%r8d
   2678c:	00 00 
   2678e:	44 88 40 dc          	mov    %r8b,-0x24(%rax)
   26792:	0f 29 8c 24 e0 01 00 	movaps %xmm1,0x1e0(%rsp)
   26799:	00 
   2679a:	44 0f b6 84 24 e2 01 	movzbl 0x1e2(%rsp),%r8d
   267a1:	00 00 
   267a3:	44 88 40 e0          	mov    %r8b,-0x20(%rax)
   267a7:	0f 29 8c 24 d0 01 00 	movaps %xmm1,0x1d0(%rsp)
   267ae:	00 
   267af:	44 0f b6 84 24 d6 01 	movzbl 0x1d6(%rsp),%r8d
   267b6:	00 00 
   267b8:	44 88 40 e4          	mov    %r8b,-0x1c(%rax)
   267bc:	0f 29 8c 24 c0 01 00 	movaps %xmm1,0x1c0(%rsp)
   267c3:	00 
   267c4:	44 0f b6 84 24 ca 01 	movzbl 0x1ca(%rsp),%r8d
   267cb:	00 00 
   267cd:	44 88 40 e8          	mov    %r8b,-0x18(%rax)
   267d1:	0f 29 8c 24 b0 01 00 	movaps %xmm1,0x1b0(%rsp)
   267d8:	00 
   267d9:	44 0f b6 84 24 be 01 	movzbl 0x1be(%rsp),%r8d
   267e0:	00 00 
   267e2:	44 88 40 ec          	mov    %r8b,-0x14(%rax)
   267e6:	0f 29 84 24 a0 01 00 	movaps %xmm0,0x1a0(%rsp)
   267ed:	00 
   267ee:	44 0f b6 84 24 a2 01 	movzbl 0x1a2(%rsp),%r8d
   267f5:	00 00 
   267f7:	44 88 40 f0          	mov    %r8b,-0x10(%rax)
   267fb:	0f 29 84 24 90 01 00 	movaps %xmm0,0x190(%rsp)
   26802:	00 
   26803:	44 0f b6 84 24 96 01 	movzbl 0x196(%rsp),%r8d
   2680a:	00 00 
   2680c:	44 88 40 f4          	mov    %r8b,-0xc(%rax)
   26810:	0f 29 84 24 80 01 00 	movaps %xmm0,0x180(%rsp)
   26817:	00 
   26818:	44 0f b6 84 24 8a 01 	movzbl 0x18a(%rsp),%r8d
   2681f:	00 00 
   26821:	44 88 40 f8          	mov    %r8b,-0x8(%rax)
   26825:	0f 29 84 24 70 01 00 	movaps %xmm0,0x170(%rsp)
   2682c:	00 
   2682d:	44 0f b6 84 24 7e 01 	movzbl 0x17e(%rsp),%r8d
   26834:	00 00 
   26836:	44 88 40 fc          	mov    %r8b,-0x4(%rax)
            p[2] = t;
   2683a:	66 41 0f 7e d8       	movd   %xmm3,%r8d
   2683f:	44 88 40 c2          	mov    %r8b,-0x3e(%rax)
   26843:	0f 29 9c 24 60 01 00 	movaps %xmm3,0x160(%rsp)
   2684a:	00 
   2684b:	44 0f b6 84 24 64 01 	movzbl 0x164(%rsp),%r8d
   26852:	00 00 
   26854:	44 88 40 c6          	mov    %r8b,-0x3a(%rax)
   26858:	0f 29 9c 24 50 01 00 	movaps %xmm3,0x150(%rsp)
   2685f:	00 
   26860:	44 0f b6 84 24 58 01 	movzbl 0x158(%rsp),%r8d
   26867:	00 00 
   26869:	44 88 40 ca          	mov    %r8b,-0x36(%rax)
   2686d:	0f 29 9c 24 40 01 00 	movaps %xmm3,0x140(%rsp)
   26874:	00 
   26875:	44 0f b6 84 24 4c 01 	movzbl 0x14c(%rsp),%r8d
   2687c:	00 00 
   2687e:	44 88 40 ce          	mov    %r8b,-0x32(%rax)
   26882:	66 41 0f 7e d0       	movd   %xmm2,%r8d
   26887:	44 88 40 d2          	mov    %r8b,-0x2e(%rax)
   2688b:	0f 29 94 24 30 01 00 	movaps %xmm2,0x130(%rsp)
   26892:	00 
   26893:	44 0f b6 84 24 34 01 	movzbl 0x134(%rsp),%r8d
   2689a:	00 00 
   2689c:	44 88 40 d6          	mov    %r8b,-0x2a(%rax)
   268a0:	0f 29 94 24 20 01 00 	movaps %xmm2,0x120(%rsp)
   268a7:	00 
   268a8:	44 0f b6 84 24 28 01 	movzbl 0x128(%rsp),%r8d
   268af:	00 00 
   268b1:	44 88 40 da          	mov    %r8b,-0x26(%rax)
   268b5:	0f 29 94 24 10 01 00 	movaps %xmm2,0x110(%rsp)
   268bc:	00 
   268bd:	44 0f b6 84 24 1c 01 	movzbl 0x11c(%rsp),%r8d
   268c4:	00 00 
   268c6:	44 88 40 de          	mov    %r8b,-0x22(%rax)
   268ca:	66 41 0f 7e c8       	movd   %xmm1,%r8d
   268cf:	44 88 40 e2          	mov    %r8b,-0x1e(%rax)
   268d3:	0f 29 8c 24 00 01 00 	movaps %xmm1,0x100(%rsp)
   268da:	00 
   268db:	44 0f b6 84 24 04 01 	movzbl 0x104(%rsp),%r8d
   268e2:	00 00 
   268e4:	44 88 40 e6          	mov    %r8b,-0x1a(%rax)
   268e8:	0f 29 8c 24 f0 00 00 	movaps %xmm1,0xf0(%rsp)
   268ef:	00 
   268f0:	44 0f b6 84 24 f8 00 	movzbl 0xf8(%rsp),%r8d
   268f7:	00 00 
   268f9:	44 88 40 ea          	mov    %r8b,-0x16(%rax)
   268fd:	0f 29 8c 24 e0 00 00 	movaps %xmm1,0xe0(%rsp)
   26904:	00 
   26905:	44 0f b6 84 24 ec 00 	movzbl 0xec(%rsp),%r8d
   2690c:	00 00 
   2690e:	44 88 40 ee          	mov    %r8b,-0x12(%rax)
   26912:	66 41 0f 7e c0       	movd   %xmm0,%r8d
   26917:	44 88 40 f2          	mov    %r8b,-0xe(%rax)
   2691b:	0f 29 84 24 d0 00 00 	movaps %xmm0,0xd0(%rsp)
   26922:	00 
   26923:	44 0f b6 84 24 d4 00 	movzbl 0xd4(%rsp),%r8d
   2692a:	00 00 
   2692c:	44 88 40 f6          	mov    %r8b,-0xa(%rax)
   26930:	0f 29 84 24 c0 00 00 	movaps %xmm0,0xc0(%rsp)
   26937:	00 
   26938:	44 0f b6 84 24 c8 00 	movzbl 0xc8(%rsp),%r8d
   2693f:	00 00 
   26941:	44 88 40 fa          	mov    %r8b,-0x6(%rax)
   26945:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
   2694c:	00 
   2694d:	44 0f b6 84 24 bc 00 	movzbl 0xbc(%rsp),%r8d
   26954:	00 00 
   26956:	44 88 40 fe          	mov    %r8b,-0x2(%rax)
         for (i=0; i < pixel_count; ++i) {
   2695a:	48 39 c8             	cmp    %rcx,%rax
   2695d:	0f 85 70 fd ff ff    	jne    266d3 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1b63>
   26963:	89 f1                	mov    %esi,%ecx
   26965:	83 e1 f0             	and    $0xfffffff0,%ecx
   26968:	89 c8                	mov    %ecx,%eax
   2696a:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
   2696e:	29 ce                	sub    %ecx,%esi
   26970:	41 89 f4             	mov    %esi,%r12d
   26973:	83 fe 07             	cmp    $0x7,%esi
   26976:	0f 86 bd 00 00 00    	jbe    26a39 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1ec9>
   2697c:	41 89 c8             	mov    %ecx,%r8d
   2697f:	41 83 e4 f8          	and    $0xfffffff8,%r12d
   26983:	49 c1 e0 02          	shl    $0x2,%r8
   26987:	44 01 e1             	add    %r12d,%ecx
   2698a:	4a 8d 34 07          	lea    (%rdi,%r8,1),%rsi
   2698e:	4a 8d 7c 07 02       	lea    0x2(%rdi,%r8,1),%rdi
            stbi_uc t = p[0];
   26993:	4c 8b 1e             	mov    (%rsi),%r11
   26996:	4c 8b 56 08          	mov    0x8(%rsi),%r10
   2699a:	4c 8b 4e 10          	mov    0x10(%rsi),%r9
   2699e:	4c 8b 46 18          	mov    0x18(%rsi),%r8
            p[0] = p[2];
   269a2:	4c 89 dd             	mov    %r11,%rbp
   269a5:	48 c1 ed 10          	shr    $0x10,%rbp
   269a9:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
   269ae:	40 88 2e             	mov    %bpl,(%rsi)
   269b1:	4c 89 dd             	mov    %r11,%rbp
   269b4:	48 c1 ed 30          	shr    $0x30,%rbp
   269b8:	40 88 6e 04          	mov    %bpl,0x4(%rsi)
   269bc:	4c 89 d5             	mov    %r10,%rbp
   269bf:	48 c1 ed 10          	shr    $0x10,%rbp
   269c3:	40 88 6e 08          	mov    %bpl,0x8(%rsi)
   269c7:	4c 89 d5             	mov    %r10,%rbp
   269ca:	48 c1 ed 30          	shr    $0x30,%rbp
   269ce:	40 88 6e 0c          	mov    %bpl,0xc(%rsi)
   269d2:	4c 89 cd             	mov    %r9,%rbp
   269d5:	48 c1 ed 10          	shr    $0x10,%rbp
   269d9:	40 88 6e 10          	mov    %bpl,0x10(%rsi)
   269dd:	4c 89 cd             	mov    %r9,%rbp
            p[2] = t;
   269e0:	49 c1 e9 20          	shr    $0x20,%r9
            p[0] = p[2];
   269e4:	48 c1 ed 30          	shr    $0x30,%rbp
   269e8:	40 88 6e 14          	mov    %bpl,0x14(%rsi)
   269ec:	4c 89 c5             	mov    %r8,%rbp
   269ef:	48 c1 ed 10          	shr    $0x10,%rbp
   269f3:	40 88 6e 18          	mov    %bpl,0x18(%rsi)
   269f7:	4c 89 c5             	mov    %r8,%rbp
   269fa:	48 c1 ed 30          	shr    $0x30,%rbp
   269fe:	40 88 6e 1c          	mov    %bpl,0x1c(%rsi)
            p[2] = t;
   26a02:	0f b6 74 24 08       	movzbl 0x8(%rsp),%esi
   26a07:	44 88 1f             	mov    %r11b,(%rdi)
   26a0a:	49 c1 eb 20          	shr    $0x20,%r11
   26a0e:	44 88 57 08          	mov    %r10b,0x8(%rdi)
   26a12:	49 c1 ea 20          	shr    $0x20,%r10
   26a16:	44 88 47 18          	mov    %r8b,0x18(%rdi)
   26a1a:	49 c1 e8 20          	shr    $0x20,%r8
   26a1e:	44 88 5f 04          	mov    %r11b,0x4(%rdi)
   26a22:	44 88 57 0c          	mov    %r10b,0xc(%rdi)
   26a26:	44 88 4f 14          	mov    %r9b,0x14(%rdi)
   26a2a:	44 88 47 1c          	mov    %r8b,0x1c(%rdi)
   26a2e:	40 88 77 10          	mov    %sil,0x10(%rdi)
   26a32:	44 89 e6             	mov    %r12d,%esi
   26a35:	48 8d 04 b0          	lea    (%rax,%rsi,4),%rax
            stbi_uc t = p[0];
   26a39:	0f b6 30             	movzbl (%rax),%esi
            p[0] = p[2];
   26a3c:	0f b6 78 02          	movzbl 0x2(%rax),%edi
            p[2] = t;
   26a40:	40 88 70 02          	mov    %sil,0x2(%rax)
         for (i=0; i < pixel_count; ++i) {
   26a44:	8d 71 01             	lea    0x1(%rcx),%esi
            p[0] = p[2];
   26a47:	40 88 38             	mov    %dil,(%rax)
         for (i=0; i < pixel_count; ++i) {
   26a4a:	39 d6                	cmp    %edx,%esi
   26a4c:	0f 83 22 fa ff ff    	jae    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
            stbi_uc t = p[0];
   26a52:	0f b6 70 04          	movzbl 0x4(%rax),%esi
            p[0] = p[2];
   26a56:	0f b6 78 06          	movzbl 0x6(%rax),%edi
            p[2] = t;
   26a5a:	40 88 70 06          	mov    %sil,0x6(%rax)
         for (i=0; i < pixel_count; ++i) {
   26a5e:	8d 71 02             	lea    0x2(%rcx),%esi
            p[0] = p[2];
   26a61:	40 88 78 04          	mov    %dil,0x4(%rax)
         for (i=0; i < pixel_count; ++i) {
   26a65:	39 d6                	cmp    %edx,%esi
   26a67:	0f 83 07 fa ff ff    	jae    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
            stbi_uc t = p[0];
   26a6d:	0f b6 70 08          	movzbl 0x8(%rax),%esi
            p[0] = p[2];
   26a71:	0f b6 78 0a          	movzbl 0xa(%rax),%edi
            p[2] = t;
   26a75:	40 88 70 0a          	mov    %sil,0xa(%rax)
         for (i=0; i < pixel_count; ++i) {
   26a79:	8d 71 03             	lea    0x3(%rcx),%esi
            p[0] = p[2];
   26a7c:	40 88 78 08          	mov    %dil,0x8(%rax)
         for (i=0; i < pixel_count; ++i) {
   26a80:	39 d6                	cmp    %edx,%esi
   26a82:	0f 83 ec f9 ff ff    	jae    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
            stbi_uc t = p[0];
   26a88:	0f b6 70 0c          	movzbl 0xc(%rax),%esi
            p[0] = p[2];
   26a8c:	0f b6 78 0e          	movzbl 0xe(%rax),%edi
            p[2] = t;
   26a90:	40 88 70 0e          	mov    %sil,0xe(%rax)
         for (i=0; i < pixel_count; ++i) {
   26a94:	8d 71 04             	lea    0x4(%rcx),%esi
            p[0] = p[2];
   26a97:	40 88 78 0c          	mov    %dil,0xc(%rax)
         for (i=0; i < pixel_count; ++i) {
   26a9b:	39 d6                	cmp    %edx,%esi
   26a9d:	0f 83 d1 f9 ff ff    	jae    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
            stbi_uc t = p[0];
   26aa3:	0f b6 70 10          	movzbl 0x10(%rax),%esi
            p[0] = p[2];
   26aa7:	0f b6 78 12          	movzbl 0x12(%rax),%edi
            p[2] = t;
   26aab:	40 88 70 12          	mov    %sil,0x12(%rax)
         for (i=0; i < pixel_count; ++i) {
   26aaf:	8d 71 05             	lea    0x5(%rcx),%esi
            p[0] = p[2];
   26ab2:	40 88 78 10          	mov    %dil,0x10(%rax)
         for (i=0; i < pixel_count; ++i) {
   26ab6:	39 d6                	cmp    %edx,%esi
   26ab8:	0f 83 b6 f9 ff ff    	jae    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
            stbi_uc t = p[0];
   26abe:	0f b6 70 14          	movzbl 0x14(%rax),%esi
            p[0] = p[2];
   26ac2:	0f b6 78 16          	movzbl 0x16(%rax),%edi
            p[2] = t;
   26ac6:	40 88 70 16          	mov    %sil,0x16(%rax)
         for (i=0; i < pixel_count; ++i) {
   26aca:	8d 71 06             	lea    0x6(%rcx),%esi
            p[0] = p[2];
   26acd:	40 88 78 14          	mov    %dil,0x14(%rax)
         for (i=0; i < pixel_count; ++i) {
   26ad1:	39 d6                	cmp    %edx,%esi
   26ad3:	0f 83 9b f9 ff ff    	jae    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
            stbi_uc t = p[0];
   26ad9:	0f b6 70 18          	movzbl 0x18(%rax),%esi
            p[0] = p[2];
   26add:	0f b6 78 1a          	movzbl 0x1a(%rax),%edi
         for (i=0; i < pixel_count; ++i) {
   26ae1:	83 c1 07             	add    $0x7,%ecx
            p[0] = p[2];
   26ae4:	40 88 78 18          	mov    %dil,0x18(%rax)
            p[2] = t;
   26ae8:	40 88 70 1a          	mov    %sil,0x1a(%rax)
         for (i=0; i < pixel_count; ++i) {
   26aec:	39 d1                	cmp    %edx,%ecx
   26aee:	0f 83 80 f9 ff ff    	jae    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
            stbi_uc t = p[0];
   26af4:	0f b6 50 1c          	movzbl 0x1c(%rax),%edx
            p[0] = p[2];
   26af8:	0f b6 48 1e          	movzbl 0x1e(%rax),%ecx
            p[2] = t;
   26afc:	88 50 1e             	mov    %dl,0x1e(%rax)
            p[0] = p[2];
   26aff:	88 48 1c             	mov    %cl,0x1c(%rax)
         for (i=0; i < pixel_count; ++i) {
   26b02:	e9 6d f9 ff ff       	jmp    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
               if (scan == STBI__SCAN_header) { s->img_n = 4; return 1; }
   26b07:	48 8b 04 24          	mov    (%rsp),%rax
   26b0b:	c7 40 08 04 00 00 00 	movl   $0x4,0x8(%rax)
   26b12:	e9 7d f1 ff ff       	jmp    25c94 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1124>
   stbi__g_failure_reason = str;
   26b17:	48 8d 05 7a 12 01 00 	lea    0x1127a(%rip),%rax        # 37d98 <_ZSt19piecewise_construct+0x451>
   26b1e:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   26b25:	ff ff 
               if (pal_len == 0) return stbi__err("tRNS before PLTE","Corrupt PNG");
   26b27:	e9 bc e0 ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
      for (i = 0; i < pixel_count; ++i) {
   26b2c:	85 c9                	test   %ecx,%ecx
   26b2e:	0f 84 c8 f8 ff ff    	je     263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 65535);
   26b34:	44 0f b7 84 24 6a 03 	movzwl 0x36a(%rsp),%r8d
   26b3b:	00 00 
   26b3d:	8d 79 ff             	lea    -0x1(%rcx),%edi
   26b40:	83 ff 07             	cmp    $0x7,%edi
   26b43:	0f 86 6e 02 00 00    	jbe    26db7 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x2247>
   26b49:	89 fe                	mov    %edi,%esi
   26b4b:	66 41 0f 6e c0       	movd   %r8d,%xmm0
   26b50:	66 0f ef db          	pxor   %xmm3,%xmm3
   26b54:	48 89 c2             	mov    %rax,%rdx
   26b57:	c1 ee 03             	shr    $0x3,%esi
   26b5a:	66 0f 61 c0          	punpcklwd %xmm0,%xmm0
   26b5e:	48 c1 e6 05          	shl    $0x5,%rsi
   26b62:	66 0f 70 c8 00       	pshufd $0x0,%xmm0,%xmm1
   26b67:	48 01 c6             	add    %rax,%rsi
   26b6a:	f3 0f 6f 02          	movdqu (%rdx),%xmm0
   26b6e:	f3 0f 6f 6a 10       	movdqu 0x10(%rdx),%xmm5
   26b73:	48 83 c2 20          	add    $0x20,%rdx
   26b77:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   26b7b:	66 0f 61 c5          	punpcklwd %xmm5,%xmm0
   26b7f:	66 0f 69 d5          	punpckhwd %xmm5,%xmm2
   26b83:	66 0f 6f e0          	movdqa %xmm0,%xmm4
   26b87:	66 0f 69 e2          	punpckhwd %xmm2,%xmm4
   26b8b:	66 0f 61 c2          	punpcklwd %xmm2,%xmm0
   26b8f:	66 0f 61 c4          	punpcklwd %xmm4,%xmm0
   26b93:	66 0f 75 c1          	pcmpeqw %xmm1,%xmm0
   26b97:	66 0f 75 c3          	pcmpeqw %xmm3,%xmm0
   26b9b:	66 44 0f c5 c8 00    	pextrw $0x0,%xmm0,%r9d
   26ba1:	66 44 89 4a e2       	mov    %r9w,-0x1e(%rdx)
   26ba6:	66 44 0f c5 c8 01    	pextrw $0x1,%xmm0,%r9d
   26bac:	66 44 89 4a e6       	mov    %r9w,-0x1a(%rdx)
   26bb1:	66 44 0f c5 c8 02    	pextrw $0x2,%xmm0,%r9d
   26bb7:	66 44 89 4a ea       	mov    %r9w,-0x16(%rdx)
   26bbc:	66 44 0f c5 c8 03    	pextrw $0x3,%xmm0,%r9d
   26bc2:	66 44 89 4a ee       	mov    %r9w,-0x12(%rdx)
   26bc7:	66 44 0f c5 c8 04    	pextrw $0x4,%xmm0,%r9d
   26bcd:	66 44 89 4a f2       	mov    %r9w,-0xe(%rdx)
   26bd2:	66 44 0f c5 c8 05    	pextrw $0x5,%xmm0,%r9d
   26bd8:	66 44 89 4a f6       	mov    %r9w,-0xa(%rdx)
   26bdd:	66 44 0f c5 c8 06    	pextrw $0x6,%xmm0,%r9d
   26be3:	66 44 89 4a fa       	mov    %r9w,-0x6(%rdx)
   26be8:	66 44 0f c5 c8 07    	pextrw $0x7,%xmm0,%r9d
   26bee:	66 44 89 4a fe       	mov    %r9w,-0x2(%rdx)
      for (i = 0; i < pixel_count; ++i) {
   26bf3:	48 39 f2             	cmp    %rsi,%rdx
   26bf6:	0f 85 6e ff ff ff    	jne    26b6a <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1ffa>
   26bfc:	89 fe                	mov    %edi,%esi
   26bfe:	83 e6 f8             	and    $0xfffffff8,%esi
   26c01:	89 f2                	mov    %esi,%edx
   26c03:	48 8d 14 90          	lea    (%rax,%rdx,4),%rdx
   26c07:	29 f7                	sub    %esi,%edi
   26c09:	83 ff 03             	cmp    $0x3,%edi
   26c0c:	76 7c                	jbe    26c8a <_ZL20stbi__parse_png_fileP9stbi__pngii+0x211a>
   26c0e:	41 89 f2             	mov    %esi,%r10d
   26c11:	83 e7 fc             	and    $0xfffffffc,%edi
   26c14:	49 c1 e2 02          	shl    $0x2,%r10
   26c18:	01 fe                	add    %edi,%esi
   26c1a:	4e 8d 0c 10          	lea    (%rax,%r10,1),%r9
   26c1e:	4a 8d 44 10 02       	lea    0x2(%rax,%r10,1),%rax
         p[1] = (p[0] == tc[0] ? 0 : 65535);
   26c23:	f3 41 0f 7e 01       	movq   (%r9),%xmm0
   26c28:	f3 41 0f 7e 49 08    	movq   0x8(%r9),%xmm1
   26c2e:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   26c32:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
   26c36:	66 0f 61 d1          	punpcklwd %xmm1,%xmm2
   26c3a:	66 0f 70 d2 4e       	pshufd $0x4e,%xmm2,%xmm2
   26c3f:	66 0f 61 c2          	punpcklwd %xmm2,%xmm0
   26c43:	66 41 0f 6e d0       	movd   %r8d,%xmm2
   26c48:	f2 0f 70 ca 00       	pshuflw $0x0,%xmm2,%xmm1
   26c4d:	66 0f 75 c1          	pcmpeqw %xmm1,%xmm0
   26c51:	66 0f ef c9          	pxor   %xmm1,%xmm1
   26c55:	66 0f 75 c1          	pcmpeqw %xmm1,%xmm0
   26c59:	66 44 0f c5 c8 00    	pextrw $0x0,%xmm0,%r9d
   26c5f:	66 44 89 08          	mov    %r9w,(%rax)
   26c63:	66 44 0f c5 c8 01    	pextrw $0x1,%xmm0,%r9d
   26c69:	66 44 89 48 04       	mov    %r9w,0x4(%rax)
   26c6e:	66 44 0f c5 c8 02    	pextrw $0x2,%xmm0,%r9d
   26c74:	66 44 89 48 08       	mov    %r9w,0x8(%rax)
   26c79:	66 44 0f c5 c8 03    	pextrw $0x3,%xmm0,%r9d
   26c7f:	66 44 89 48 0c       	mov    %r9w,0xc(%rax)
      for (i = 0; i < pixel_count; ++i) {
   26c84:	89 f8                	mov    %edi,%eax
   26c86:	48 8d 14 82          	lea    (%rdx,%rax,4),%rdx
         p[1] = (p[0] == tc[0] ? 0 : 65535);
   26c8a:	31 c0                	xor    %eax,%eax
   26c8c:	66 44 39 02          	cmp    %r8w,(%rdx)
   26c90:	0f 95 c0             	setne  %al
   26c93:	f7 d8                	neg    %eax
   26c95:	66 89 42 02          	mov    %ax,0x2(%rdx)
      for (i = 0; i < pixel_count; ++i) {
   26c99:	8d 46 01             	lea    0x1(%rsi),%eax
   26c9c:	39 c8                	cmp    %ecx,%eax
   26c9e:	0f 83 58 f7 ff ff    	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 65535);
   26ca4:	31 c0                	xor    %eax,%eax
   26ca6:	66 44 39 42 04       	cmp    %r8w,0x4(%rdx)
   26cab:	0f 95 c0             	setne  %al
   26cae:	f7 d8                	neg    %eax
   26cb0:	66 89 42 06          	mov    %ax,0x6(%rdx)
      for (i = 0; i < pixel_count; ++i) {
   26cb4:	8d 46 02             	lea    0x2(%rsi),%eax
   26cb7:	39 c8                	cmp    %ecx,%eax
   26cb9:	0f 83 3d f7 ff ff    	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 65535);
   26cbf:	31 c0                	xor    %eax,%eax
   26cc1:	66 44 39 42 08       	cmp    %r8w,0x8(%rdx)
   26cc6:	0f 95 c0             	setne  %al
      for (i = 0; i < pixel_count; ++i) {
   26cc9:	83 c6 03             	add    $0x3,%esi
         p[1] = (p[0] == tc[0] ? 0 : 65535);
   26ccc:	f7 d8                	neg    %eax
   26cce:	66 89 42 0a          	mov    %ax,0xa(%rdx)
      for (i = 0; i < pixel_count; ++i) {
   26cd2:	39 ce                	cmp    %ecx,%esi
   26cd4:	0f 83 22 f7 ff ff    	jae    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
         p[1] = (p[0] == tc[0] ? 0 : 65535);
   26cda:	31 c0                	xor    %eax,%eax
   26cdc:	66 44 39 42 0c       	cmp    %r8w,0xc(%rdx)
   26ce1:	0f 95 c0             	setne  %al
   26ce4:	f7 d8                	neg    %eax
   26ce6:	66 89 42 0e          	mov    %ax,0xe(%rdx)
      for (i = 0; i < pixel_count; ++i) {
   26cea:	e9 0d f7 ff ff       	jmp    263fc <_ZL20stbi__parse_png_fileP9stbi__pngii+0x188c>
            STBI_FREE(final);
   26cef:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   26cf4:	e8 a7 f9 fd ff       	call   66a0 <free@plt>
            return 0;
   26cf9:	e9 ea de ff ff       	jmp    24be8 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x78>
      for (i=0; i < pixel_count; ++i) {
   26cfe:	85 d2                	test   %edx,%edx
   26d00:	0f 84 6e f7 ff ff    	je     26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
   26d06:	89 d0                	mov    %edx,%eax
   26d08:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
   26d0c:	48 01 f8             	add    %rdi,%rax
         stbi_uc t = p[0];
   26d0f:	0f b6 17             	movzbl (%rdi),%edx
         p[0] = p[2];
   26d12:	0f b6 4f 02          	movzbl 0x2(%rdi),%ecx
         p += 3;
   26d16:	48 83 c7 03          	add    $0x3,%rdi
         p[0] = p[2];
   26d1a:	88 4f fd             	mov    %cl,-0x3(%rdi)
         p[2] = t;
   26d1d:	88 57 ff             	mov    %dl,-0x1(%rdi)
      for (i=0; i < pixel_count; ++i) {
   26d20:	48 39 f8             	cmp    %rdi,%rax
   26d23:	75 ea                	jne    26d0f <_ZL20stbi__parse_png_fileP9stbi__pngii+0x219f>
   26d25:	e9 4a f7 ff ff       	jmp    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
   stbi_uc *p = z->out;
   26d2a:	48 89 c2             	mov    %rax,%rdx
      for (i=0; i < pixel_count; ++i) {
   26d2d:	31 ff                	xor    %edi,%edi
   26d2f:	e9 81 f5 ff ff       	jmp    262b5 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1745>
         for (i=0; i < pixel_count; ++i) {
   26d34:	85 d2                	test   %edx,%edx
   26d36:	0f 84 38 f7 ff ff    	je     26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
   26d3c:	48 8d 34 97          	lea    (%rdi,%rdx,4),%rsi
            stbi_uc a = p[3];
   26d40:	0f b6 4f 03          	movzbl 0x3(%rdi),%ecx
            stbi_uc t = p[0];
   26d44:	44 0f b6 17          	movzbl (%rdi),%r10d
               p[0] = (p[2] * 255 + half) / a;
   26d48:	44 0f b6 4f 02       	movzbl 0x2(%rdi),%r9d
            if (a) {
   26d4d:	84 c9                	test   %cl,%cl
   26d4f:	74 50                	je     26da1 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x2231>
               p[1] = (p[1] * 255 + half) / a;
   26d51:	0f b6 57 01          	movzbl 0x1(%rdi),%edx
               stbi_uc half = a / 2;
   26d55:	41 89 c8             	mov    %ecx,%r8d
            p += 4;
   26d58:	48 83 c7 04          	add    $0x4,%rdi
               stbi_uc half = a / 2;
   26d5c:	41 d0 e8             	shr    %r8b
               p[1] = (p[1] * 255 + half) / a;
   26d5f:	89 d0                	mov    %edx,%eax
               p[0] = (p[2] * 255 + half) / a;
   26d61:	45 0f b6 c0          	movzbl %r8b,%r8d
               p[1] = (p[1] * 255 + half) / a;
   26d65:	c1 e0 08             	shl    $0x8,%eax
   26d68:	29 d0                	sub    %edx,%eax
   26d6a:	44 01 c0             	add    %r8d,%eax
   26d6d:	99                   	cltd
   26d6e:	f7 f9                	idiv   %ecx
   26d70:	88 47 fd             	mov    %al,-0x3(%rdi)
               p[2] = ( t   * 255 + half) / a;
   26d73:	44 89 d0             	mov    %r10d,%eax
   26d76:	c1 e0 08             	shl    $0x8,%eax
   26d79:	44 29 d0             	sub    %r10d,%eax
   26d7c:	44 01 c0             	add    %r8d,%eax
   26d7f:	99                   	cltd
   26d80:	f7 f9                	idiv   %ecx
   26d82:	88 47 fe             	mov    %al,-0x2(%rdi)
               p[0] = (p[2] * 255 + half) / a;
   26d85:	44 89 c8             	mov    %r9d,%eax
   26d88:	c1 e0 08             	shl    $0x8,%eax
   26d8b:	44 29 c8             	sub    %r9d,%eax
   26d8e:	44 01 c0             	add    %r8d,%eax
   26d91:	99                   	cltd
   26d92:	f7 f9                	idiv   %ecx
   26d94:	88 47 fc             	mov    %al,-0x4(%rdi)
         for (i=0; i < pixel_count; ++i) {
   26d97:	48 39 f7             	cmp    %rsi,%rdi
   26d9a:	75 a4                	jne    26d40 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x21d0>
   26d9c:	e9 d3 f6 ff ff       	jmp    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
   26da1:	44 88 57 02          	mov    %r10b,0x2(%rdi)
            p += 4;
   26da5:	48 83 c7 04          	add    $0x4,%rdi
   26da9:	44 88 4f fc          	mov    %r9b,-0x4(%rdi)
         for (i=0; i < pixel_count; ++i) {
   26dad:	48 39 f7             	cmp    %rsi,%rdi
   26db0:	75 8e                	jne    26d40 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x21d0>
   26db2:	e9 bd f6 ff ff       	jmp    26474 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1904>
   stbi__uint16 *p = (stbi__uint16*) z->out;
   26db7:	48 89 c2             	mov    %rax,%rdx
      for (i = 0; i < pixel_count; ++i) {
   26dba:	31 f6                	xor    %esi,%esi
   26dbc:	e9 46 fe ff ff       	jmp    26c07 <_ZL20stbi__parse_png_fileP9stbi__pngii+0x2097>
         for (i=0; i < pixel_count; ++i) {
   26dc1:	31 c9                	xor    %ecx,%ecx
   26dc3:	e9 a6 fb ff ff       	jmp    2696e <_ZL20stbi__parse_png_fileP9stbi__pngii+0x1dfe>
   26dc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   26dcf:	00 

0000000000026dd0 <_ZL16stbi__is_16_mainP13stbi__context>:
{
   26dd0:	55                   	push   %rbp
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   26dd1:	31 d2                	xor    %edx,%edx
   26dd3:	be 02 00 00 00       	mov    $0x2,%esi
{
   26dd8:	53                   	push   %rbx
   26dd9:	48 89 fb             	mov    %rdi,%rbx
   26ddc:	48 83 ec 38          	sub    $0x38,%rsp
   p.s = s;
   26de0:	48 89 3c 24          	mov    %rdi,(%rsp)
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   26de4:	48 89 e7             	mov    %rsp,%rdi
   26de7:	e8 84 dd ff ff       	call   24b70 <_ZL20stbi__parse_png_fileP9stbi__pngii>
   26dec:	85 c0                	test   %eax,%eax
   26dee:	0f 84 7c 00 00 00    	je     26e70 <_ZL16stbi__is_16_mainP13stbi__context+0xa0>
   if (p.depth != 16) {
   26df4:	83 7c 24 20 10       	cmpl   $0x10,0x20(%rsp)
   26df9:	0f 84 e9 00 00 00    	je     26ee8 <_ZL16stbi__is_16_mainP13stbi__context+0x118>
      stbi__rewind(p.s);
   26dff:	48 8b 04 24          	mov    (%rsp),%rax
   s->img_buffer = s->img_buffer_original;
   26e03:	f3 0f 6f 80 d0 00 00 	movdqu 0xd0(%rax),%xmm0
   26e0a:	00 
   26e0b:	0f 11 80 c0 00 00 00 	movups %xmm0,0xc0(%rax)
   stbi__uint32 z = stbi__get16be(s);
   26e12:	48 89 df             	mov    %rbx,%rdi
   26e15:	e8 96 74 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   return (z << 16) + stbi__get16be(s);
   26e1a:	48 89 df             	mov    %rbx,%rdi
   stbi__uint32 z = stbi__get16be(s);
   26e1d:	89 c5                	mov    %eax,%ebp
   return (z << 16) + stbi__get16be(s);
   26e1f:	e8 8c 74 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   26e24:	c1 e5 10             	shl    $0x10,%ebp
   26e27:	01 c5                	add    %eax,%ebp
   if (stbi__get32be(s) != 0x38425053) {
   26e29:	81 fd 53 50 42 38    	cmp    $0x38425053,%ebp
   26e2f:	74 57                	je     26e88 <_ZL16stbi__is_16_mainP13stbi__context+0xb8>
   s->img_buffer = s->img_buffer_original;
   26e31:	48 8b 83 d0 00 00 00 	mov    0xd0(%rbx),%rax
   if (stbi__pnm_info(s, NULL, NULL, NULL) == 16)
   26e38:	31 c9                	xor    %ecx,%ecx
   26e3a:	31 d2                	xor    %edx,%edx
   26e3c:	31 f6                	xor    %esi,%esi
   26e3e:	48 89 df             	mov    %rbx,%rdi
   s->img_buffer = s->img_buffer_original;
   26e41:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   s->img_buffer_end = s->img_buffer_original_end;
   26e48:	48 8b 83 d8 00 00 00 	mov    0xd8(%rbx),%rax
   26e4f:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
   if (stbi__pnm_info(s, NULL, NULL, NULL) == 16)
   26e56:	e8 25 da ff ff       	call   24880 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_>
   26e5b:	83 f8 10             	cmp    $0x10,%eax
   26e5e:	0f 94 c0             	sete   %al
   26e61:	0f b6 c0             	movzbl %al,%eax
}
   26e64:	48 83 c4 38          	add    $0x38,%rsp
   26e68:	5b                   	pop    %rbx
   26e69:	5d                   	pop    %rbp
   26e6a:	c3                   	ret
   26e6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   26e70:	48 8b 04 24          	mov    (%rsp),%rax
   s->img_buffer = s->img_buffer_original;
   26e74:	f3 0f 6f 88 d0 00 00 	movdqu 0xd0(%rax),%xmm1
   26e7b:	00 
   26e7c:	0f 11 88 c0 00 00 00 	movups %xmm1,0xc0(%rax)
      return 0;
   26e83:	eb 8d                	jmp    26e12 <_ZL16stbi__is_16_mainP13stbi__context+0x42>
   26e85:	0f 1f 00             	nopl   (%rax)
   if (stbi__get16be(s) != 1) {
   26e88:	48 89 df             	mov    %rbx,%rdi
   26e8b:	e8 20 74 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   26e90:	83 f8 01             	cmp    $0x1,%eax
   26e93:	75 9c                	jne    26e31 <_ZL16stbi__is_16_mainP13stbi__context+0x61>
   if (s->io.read) {
   26e95:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   26e9a:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   if (s->io.read) {
   26ea1:	74 12                	je     26eb5 <_ZL16stbi__is_16_mainP13stbi__context+0xe5>
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   26ea3:	48 8b 8b c8 00 00 00 	mov    0xc8(%rbx),%rcx
   26eaa:	48 89 ca             	mov    %rcx,%rdx
   26ead:	48 29 c2             	sub    %rax,%rdx
      if (blen < n) {
   26eb0:	83 fa 05             	cmp    $0x5,%edx
   26eb3:	7e 43                	jle    26ef8 <_ZL16stbi__is_16_mainP13stbi__context+0x128>
   s->img_buffer += n;
   26eb5:	48 83 c0 06          	add    $0x6,%rax
   26eb9:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   channelCount = stbi__get16be(s);
   26ec0:	48 89 df             	mov    %rbx,%rdi
   26ec3:	e8 e8 73 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   if (channelCount < 0 || channelCount > 16) {
   26ec8:	83 f8 10             	cmp    $0x10,%eax
   26ecb:	0f 87 60 ff ff ff    	ja     26e31 <_ZL16stbi__is_16_mainP13stbi__context+0x61>
   depth = stbi__get16be(s);
   26ed1:	48 89 df             	mov    %rbx,%rdi
   26ed4:	e8 d7 73 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   if (depth != 16) {
   26ed9:	83 f8 10             	cmp    $0x10,%eax
   26edc:	0f 85 4f ff ff ff    	jne    26e31 <_ZL16stbi__is_16_mainP13stbi__context+0x61>
   26ee2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (stbi__png_is16(s))  return 1;
   26ee8:	b8 01 00 00 00       	mov    $0x1,%eax
   26eed:	e9 72 ff ff ff       	jmp    26e64 <_ZL16stbi__is_16_mainP13stbi__context+0x94>
   26ef2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         (s->io.skip)(s->io_user_data, n - blen);
   26ef8:	be 06 00 00 00       	mov    $0x6,%esi
         s->img_buffer = s->img_buffer_end;
   26efd:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
         (s->io.skip)(s->io_user_data, n - blen);
   26f04:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   26f08:	29 d6                	sub    %edx,%esi
   26f0a:	ff 53 18             	call   *0x18(%rbx)
         return;
   26f0d:	eb b1                	jmp    26ec0 <_ZL16stbi__is_16_mainP13stbi__context+0xf0>
   26f0f:	90                   	nop

0000000000026f10 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi>:
{
   26f10:	41 57                	push   %r15
   26f12:	41 56                	push   %r14
   26f14:	41 55                	push   %r13
   26f16:	41 54                	push   %r12
   26f18:	55                   	push   %rbp
   26f19:	89 f5                	mov    %esi,%ebp
   26f1b:	53                   	push   %rbx
   26f1c:	48 89 fb             	mov    %rdi,%rbx
   26f1f:	48 83 ec 28          	sub    $0x28,%rsp
   z->jfif = 0;
   26f23:	48 8b 05 b6 1b 01 00 	mov    0x11bb6(%rip),%rax        # 38ae0 <_ZL11stbi__bmask+0x360>
   x = stbi__get8(j->s);
   26f2a:	4c 8b 27             	mov    (%rdi),%r12
   z->marker = STBI__MARKER_none; // initialize cached marker to empty
   26f2d:	c6 87 28 48 00 00 ff 	movb   $0xff,0x4828(%rdi)
   z->jfif = 0;
   26f34:	48 89 87 48 48 00 00 	mov    %rax,0x4848(%rdi)
   if (s->img_buffer < s->img_buffer_end)
   26f3b:	49 8b 84 24 c0 00 00 	mov    0xc0(%r12),%rax
   26f42:	00 
   26f43:	49 3b 84 24 c8 00 00 	cmp    0xc8(%r12),%rax
   26f4a:	00 
   26f4b:	0f 83 17 03 00 00    	jae    27268 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x358>
      return *s->img_buffer++;
   26f51:	48 8d 50 01          	lea    0x1(%rax),%rdx
   26f55:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   26f5c:	00 
   26f5d:	0f b6 10             	movzbl (%rax),%edx
   if (x != 0xff) return STBI__MARKER_none;
   26f60:	80 fa ff             	cmp    $0xff,%dl
   26f63:	0f 85 7c 01 00 00    	jne    270e5 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1d5>
   26f69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      x = stbi__get8(j->s); // consume repeated 0xff fill bytes
   26f70:	4c 8b 23             	mov    (%rbx),%r12
   if (s->img_buffer < s->img_buffer_end)
   26f73:	49 8b 84 24 c0 00 00 	mov    0xc0(%r12),%rax
   26f7a:	00 
   26f7b:	49 3b 84 24 c8 00 00 	cmp    0xc8(%r12),%rax
   26f82:	00 
   26f83:	0f 83 4f 01 00 00    	jae    270d8 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1c8>
      return *s->img_buffer++;
   26f89:	48 8d 50 01          	lea    0x1(%rax),%rdx
   26f8d:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   26f94:	00 
   26f95:	0f b6 10             	movzbl (%rax),%edx
   while (x == 0xff)
   26f98:	80 fa ff             	cmp    $0xff,%dl
   26f9b:	74 d3                	je     26f70 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x60>
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   26f9d:	80 fa d8             	cmp    $0xd8,%dl
   26fa0:	0f 85 3f 01 00 00    	jne    270e5 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1d5>
   if (scan == STBI__SCAN_type) return 1;
   26fa6:	83 fd 01             	cmp    $0x1,%ebp
   26fa9:	0f 84 91 03 00 00    	je     27340 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x430>
   m = stbi__get_marker(z);
   26faf:	48 89 df             	mov    %rbx,%rdi
   26fb2:	e8 89 87 ff ff       	call   1f740 <_ZL16stbi__get_markerP10stbi__jpeg>
   26fb7:	0f b6 f0             	movzbl %al,%esi
   while (!stbi__SOF(m)) {
   26fba:	8d 86 40 ff ff ff    	lea    -0xc0(%rsi),%eax
   26fc0:	83 f8 02             	cmp    $0x2,%eax
   26fc3:	0f 86 8a 00 00 00    	jbe    27053 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x143>
      if (!stbi__process_marker(z,m)) return 0;
   26fc9:	48 89 df             	mov    %rbx,%rdi
   26fcc:	e8 8f b3 ff ff       	call   22360 <_ZL20stbi__process_markerP10stbi__jpegi>
   26fd1:	85 c0                	test   %eax,%eax
   26fd3:	0f 84 f1 00 00 00    	je     270ca <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1ba>
      m = stbi__get_marker(z);
   26fd9:	48 89 df             	mov    %rbx,%rdi
   26fdc:	e8 5f 87 ff ff       	call   1f740 <_ZL16stbi__get_markerP10stbi__jpeg>
   26fe1:	0f b6 f0             	movzbl %al,%esi
      while (m == STBI__MARKER_none) {
   26fe4:	81 fe ff 00 00 00    	cmp    $0xff,%esi
   26fea:	0f 85 67 02 00 00    	jne    27257 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x347>
   26ff0:	4c 8b 23             	mov    (%rbx),%r12
   if (s->io.read) {
   26ff3:	49 83 7c 24 10 00    	cmpq   $0x0,0x10(%r12)
   26ff9:	74 1b                	je     27016 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x106>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   26ffb:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
   27000:	41 ff 54 24 20       	call   *0x20(%r12)
   27005:	85 c0                	test   %eax,%eax
   27007:	74 23                	je     2702c <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x11c>
      if (s->read_from_callbacks == 0) return 1;
   27009:	41 8b 44 24 30       	mov    0x30(%r12),%eax
   2700e:	85 c0                	test   %eax,%eax
   27010:	0f 84 2a 02 00 00    	je     27240 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x330>
         if (stbi__at_eof(z->s)) return stbi__err("no SOF", "Corrupt JPEG");
   27016:	49 8b 84 24 c8 00 00 	mov    0xc8(%r12),%rax
   2701d:	00 
   2701e:	49 39 84 24 c0 00 00 	cmp    %rax,0xc0(%r12)
   27025:	00 
   27026:	0f 83 14 02 00 00    	jae    27240 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x330>
   if (j->marker != STBI__MARKER_none) { x = j->marker; j->marker = STBI__MARKER_none; return x; }
   2702c:	0f b6 b3 28 48 00 00 	movzbl 0x4828(%rbx),%esi
   27033:	40 80 fe ff          	cmp    $0xff,%sil
   27037:	0f 84 c3 00 00 00    	je     27100 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1f0>
   2703d:	c6 83 28 48 00 00 ff 	movb   $0xff,0x4828(%rbx)
   while (!stbi__SOF(m)) {
   27044:	8d 86 40 ff ff ff    	lea    -0xc0(%rsi),%eax
   2704a:	83 f8 02             	cmp    $0x2,%eax
   2704d:	0f 87 76 ff ff ff    	ja     26fc9 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0xb9>
   stbi__context *s = z->s;
   27053:	4c 8b 23             	mov    (%rbx),%r12
   z->progressive = stbi__SOF_progressive(m);
   27056:	31 c0                	xor    %eax,%eax
   27058:	81 fe c2 00 00 00    	cmp    $0xc2,%esi
   2705e:	0f 94 c0             	sete   %al
   27061:	89 83 30 48 00 00    	mov    %eax,0x4830(%rbx)
   if (s->img_buffer < s->img_buffer_end)
   27067:	49 8b 8c 24 c0 00 00 	mov    0xc0(%r12),%rcx
   2706e:	00 
   2706f:	49 8b 84 24 c8 00 00 	mov    0xc8(%r12),%rax
   27076:	00 
   27077:	48 39 c1             	cmp    %rax,%rcx
   2707a:	0f 83 f8 02 00 00    	jae    27378 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x468>
      return *s->img_buffer++;
   27080:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   27084:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   2708b:	00 
   2708c:	44 0f b6 31          	movzbl (%rcx),%r14d
   return (z << 8) + stbi__get8(s);
   27090:	41 c1 e6 08          	shl    $0x8,%r14d
   if (s->img_buffer < s->img_buffer_end)
   27094:	48 39 c2             	cmp    %rax,%rdx
   27097:	0f 83 88 03 00 00    	jae    27425 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x515>
      return *s->img_buffer++;
   2709d:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   270a1:	49 89 8c 24 c0 00 00 	mov    %rcx,0xc0(%r12)
   270a8:	00 
   270a9:	44 0f b6 2a          	movzbl (%rdx),%r13d
   return (z << 8) + stbi__get8(s);
   270ad:	45 01 f5             	add    %r14d,%r13d
   Lf = stbi__get16be(s);         if (Lf < 11) return stbi__err("bad SOF len","Corrupt JPEG"); // JPEG
   270b0:	41 83 fd 0a          	cmp    $0xa,%r13d
   270b4:	0f 8f 34 03 00 00    	jg     273ee <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x4de>
   stbi__g_failure_reason = str;
   270ba:	48 8d 05 2d 0d 01 00 	lea    0x10d2d(%rip),%rax        # 37dee <_ZSt19piecewise_construct+0x4a7>
   270c1:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   270c8:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   270ca:	31 c0                	xor    %eax,%eax
   270cc:	e9 74 02 00 00       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   270d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   270d8:	41 8b 44 24 30       	mov    0x30(%r12),%eax
   270dd:	85 c0                	test   %eax,%eax
   270df:	0f 85 fb 00 00 00    	jne    271e0 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x2d0>
   stbi__g_failure_reason = str;
   270e5:	48 8d 05 f4 0c 01 00 	lea    0x10cf4(%rip),%rax        # 37de0 <_ZSt19piecewise_construct+0x499>
   270ec:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   270f3:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   270f5:	31 c0                	xor    %eax,%eax
   270f7:	e9 49 02 00 00       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   270fc:	0f 1f 40 00          	nopl   0x0(%rax)
   x = stbi__get8(j->s);
   27100:	4c 8b 23             	mov    (%rbx),%r12
   if (s->img_buffer < s->img_buffer_end)
   27103:	49 8b 84 24 c0 00 00 	mov    0xc0(%r12),%rax
   2710a:	00 
   2710b:	49 3b 84 24 c8 00 00 	cmp    0xc8(%r12),%rax
   27112:	00 
   27113:	0f 83 c7 01 00 00    	jae    272e0 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x3d0>
      return *s->img_buffer++;
   27119:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2711d:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   27124:	00 
   27125:	0f b6 00             	movzbl (%rax),%eax
   if (x != 0xff) return STBI__MARKER_none;
   27128:	3c ff                	cmp    $0xff,%al
   2712a:	0f 85 c3 fe ff ff    	jne    26ff3 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0xe3>
   if (s->img_buffer < s->img_buffer_end)
   27130:	49 8b 84 24 c0 00 00 	mov    0xc0(%r12),%rax
   27137:	00 
   27138:	49 3b 84 24 c8 00 00 	cmp    0xc8(%r12),%rax
   2713f:	00 
   27140:	73 1e                	jae    27160 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x250>
      return *s->img_buffer++;
   27142:	48 8d 50 01          	lea    0x1(%rax),%rdx
   27146:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   2714d:	00 
   2714e:	0f b6 30             	movzbl (%rax),%esi
   while (x == 0xff)
   27151:	40 80 fe ff          	cmp    $0xff,%sil
   27155:	0f 85 fc 00 00 00    	jne    27257 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x347>
   2715b:	4c 8b 23             	mov    (%rbx),%r12
   2715e:	eb d0                	jmp    27130 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x220>
   if (s->read_from_callbacks) {
   27160:	45 8b 7c 24 30       	mov    0x30(%r12),%r15d
   27165:	45 85 ff             	test   %r15d,%r15d
   27168:	75 0e                	jne    27178 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x268>
         m = stbi__get_marker(z);
   2716a:	31 f6                	xor    %esi,%esi
   2716c:	e9 58 fe ff ff       	jmp    26fc9 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0xb9>
   27171:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27178:	4d 8d 6c 24 38       	lea    0x38(%r12),%r13
   2717d:	41 8b 54 24 34       	mov    0x34(%r12),%edx
   27182:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
   27187:	4c 89 ee             	mov    %r13,%rsi
   2718a:	41 ff 54 24 10       	call   *0x10(%r12)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2718f:	49 8b 94 24 c0 00 00 	mov    0xc0(%r12),%rdx
   27196:	00 
   27197:	49 2b 94 24 d0 00 00 	sub    0xd0(%r12),%rdx
   2719e:	00 
   2719f:	41 01 94 24 b8 00 00 	add    %edx,0xb8(%r12)
   271a6:	00 
      s->img_buffer_end = s->buffer_start+1;
   271a7:	49 8d 54 24 39       	lea    0x39(%r12),%rdx
   if (n == 0) {
   271ac:	85 c0                	test   %eax,%eax
   271ae:	0f 85 64 01 00 00    	jne    27318 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x408>
      s->read_from_callbacks = 0;
   271b4:	41 c7 44 24 30 00 00 	movl   $0x0,0x30(%r12)
   271bb:	00 00 
         m = stbi__get_marker(z);
   271bd:	31 f6                	xor    %esi,%esi
      *s->img_buffer = 0;
   271bf:	41 c6 44 24 38 00    	movb   $0x0,0x38(%r12)
   271c5:	49 89 94 24 c8 00 00 	mov    %rdx,0xc8(%r12)
   271cc:	00 
      return *s->img_buffer++;
   271cd:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   271d4:	00 
   while (!stbi__SOF(m)) {
   271d5:	e9 ef fd ff ff       	jmp    26fc9 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0xb9>
   271da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   271e0:	4d 8d 6c 24 38       	lea    0x38(%r12),%r13
   271e5:	41 8b 54 24 34       	mov    0x34(%r12),%edx
   271ea:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
   271ef:	4c 89 ee             	mov    %r13,%rsi
   271f2:	41 ff 54 24 10       	call   *0x10(%r12)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   271f7:	49 8b 94 24 c0 00 00 	mov    0xc0(%r12),%rdx
   271fe:	00 
      s->img_buffer_end = s->buffer_start+1;
   271ff:	49 8d 4c 24 39       	lea    0x39(%r12),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27204:	49 2b 94 24 d0 00 00 	sub    0xd0(%r12),%rdx
   2720b:	00 
   2720c:	41 01 94 24 b8 00 00 	add    %edx,0xb8(%r12)
   27213:	00 
   if (n == 0) {
   27214:	85 c0                	test   %eax,%eax
   27216:	0f 84 9c 00 00 00    	je     272b8 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x3a8>
      s->img_buffer_end = s->buffer_start + n;
   2721c:	48 98                	cltq
      return *s->img_buffer++;
   2721e:	49 89 8c 24 c0 00 00 	mov    %rcx,0xc0(%r12)
   27225:	00 
   27226:	41 0f b6 54 24 38    	movzbl 0x38(%r12),%edx
      s->img_buffer_end = s->buffer_start + n;
   2722c:	49 01 c5             	add    %rax,%r13
   2722f:	4d 89 ac 24 c8 00 00 	mov    %r13,0xc8(%r12)
   27236:	00 
      return *s->img_buffer++;
   27237:	e9 5c fd ff ff       	jmp    26f98 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x88>
   2723c:	0f 1f 40 00          	nopl   0x0(%rax)
   stbi__g_failure_reason = str;
   27240:	48 8d 05 a0 0b 01 00 	lea    0x10ba0(%rip),%rax        # 37de7 <_ZSt19piecewise_construct+0x4a0>
   27247:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2724e:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   27250:	31 c0                	xor    %eax,%eax
   27252:	e9 ee 00 00 00       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   while (!stbi__SOF(m)) {
   27257:	8d 86 40 ff ff ff    	lea    -0xc0(%rsi),%eax
   2725d:	e9 e8 fd ff ff       	jmp    2704a <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x13a>
   27262:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   27268:	41 8b 44 24 30       	mov    0x30(%r12),%eax
   2726d:	85 c0                	test   %eax,%eax
   2726f:	0f 84 70 fe ff ff    	je     270e5 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1d5>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27275:	4d 8d 6c 24 38       	lea    0x38(%r12),%r13
   2727a:	41 8b 54 24 34       	mov    0x34(%r12),%edx
   2727f:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
   27284:	4c 89 ee             	mov    %r13,%rsi
   27287:	41 ff 54 24 10       	call   *0x10(%r12)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2728c:	49 8b 94 24 c0 00 00 	mov    0xc0(%r12),%rdx
   27293:	00 
      s->img_buffer_end = s->buffer_start+1;
   27294:	49 8d 4c 24 39       	lea    0x39(%r12),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27299:	49 2b 94 24 d0 00 00 	sub    0xd0(%r12),%rdx
   272a0:	00 
   272a1:	41 01 94 24 b8 00 00 	add    %edx,0xb8(%r12)
   272a8:	00 
   if (n == 0) {
   272a9:	85 c0                	test   %eax,%eax
   272ab:	0f 85 a7 00 00 00    	jne    27358 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x448>
   272b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      s->read_from_callbacks = 0;
   272b8:	41 c7 44 24 30 00 00 	movl   $0x0,0x30(%r12)
   272bf:	00 00 
      *s->img_buffer = 0;
   272c1:	41 c6 44 24 38 00    	movb   $0x0,0x38(%r12)
   272c7:	49 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%r12)
   272ce:	00 
      return *s->img_buffer++;
   272cf:	49 89 8c 24 c0 00 00 	mov    %rcx,0xc0(%r12)
   272d6:	00 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   272d7:	e9 09 fe ff ff       	jmp    270e5 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1d5>
   272dc:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   272e0:	41 8b 44 24 30       	mov    0x30(%r12),%eax
   272e5:	85 c0                	test   %eax,%eax
   272e7:	0f 84 06 fd ff ff    	je     26ff3 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0xe3>
      stbi__refill_buffer(s);
   272ed:	4c 89 e7             	mov    %r12,%rdi
   272f0:	e8 8b 9f fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   272f5:	49 8b 84 24 c0 00 00 	mov    0xc0(%r12),%rax
   272fc:	00 
   272fd:	48 8d 50 01          	lea    0x1(%rax),%rdx
   27301:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   27308:	00 
   27309:	4c 8b 23             	mov    (%rbx),%r12
   2730c:	0f b6 00             	movzbl (%rax),%eax
   2730f:	e9 14 fe ff ff       	jmp    27128 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x218>
   27314:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   27318:	48 98                	cltq
      return *s->img_buffer++;
   2731a:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   27321:	00 
   27322:	41 0f b6 74 24 38    	movzbl 0x38(%r12),%esi
      s->img_buffer_end = s->buffer_start + n;
   27328:	49 01 c5             	add    %rax,%r13
   2732b:	4d 89 ac 24 c8 00 00 	mov    %r13,0xc8(%r12)
   27332:	00 
      return *s->img_buffer++;
   27333:	e9 19 fe ff ff       	jmp    27151 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x241>
   27338:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2733f:	00 
   if (scan == STBI__SCAN_type) return 1;
   27340:	b8 01 00 00 00       	mov    $0x1,%eax
}
   27345:	48 83 c4 28          	add    $0x28,%rsp
   27349:	5b                   	pop    %rbx
   2734a:	5d                   	pop    %rbp
   2734b:	41 5c                	pop    %r12
   2734d:	41 5d                	pop    %r13
   2734f:	41 5e                	pop    %r14
   27351:	41 5f                	pop    %r15
   27353:	c3                   	ret
   27354:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   27358:	48 98                	cltq
      return *s->img_buffer++;
   2735a:	49 89 8c 24 c0 00 00 	mov    %rcx,0xc0(%r12)
   27361:	00 
   27362:	41 0f b6 54 24 38    	movzbl 0x38(%r12),%edx
      s->img_buffer_end = s->buffer_start + n;
   27368:	49 01 c5             	add    %rax,%r13
   2736b:	4d 89 ac 24 c8 00 00 	mov    %r13,0xc8(%r12)
   27372:	00 
      return *s->img_buffer++;
   27373:	e9 e8 fb ff ff       	jmp    26f60 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x50>
   if (s->read_from_callbacks) {
   27378:	45 8b 74 24 30       	mov    0x30(%r12),%r14d
   2737d:	45 85 f6             	test   %r14d,%r14d
   27380:	0f 84 34 fd ff ff    	je     270ba <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1aa>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27386:	4d 8d 6c 24 38       	lea    0x38(%r12),%r13
   2738b:	41 8b 54 24 34       	mov    0x34(%r12),%edx
   27390:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
   27395:	4c 89 ee             	mov    %r13,%rsi
   27398:	41 ff 54 24 10       	call   *0x10(%r12)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2739d:	49 8b 94 24 c0 00 00 	mov    0xc0(%r12),%rdx
   273a4:	00 
   273a5:	49 2b 94 24 d0 00 00 	sub    0xd0(%r12),%rdx
   273ac:	00 
   273ad:	41 01 94 24 b8 00 00 	add    %edx,0xb8(%r12)
   273b4:	00 
      s->img_buffer_end = s->buffer_start+1;
   273b5:	49 8d 54 24 39       	lea    0x39(%r12),%rdx
   if (n == 0) {
   273ba:	85 c0                	test   %eax,%eax
   273bc:	0f 85 dc 00 00 00    	jne    2749e <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x58e>
      s->read_from_callbacks = 0;
   273c2:	45 31 ed             	xor    %r13d,%r13d
      *s->img_buffer = 0;
   273c5:	41 c6 44 24 38 00    	movb   $0x0,0x38(%r12)
      s->img_buffer_end = s->buffer_start+1;
   273cb:	48 89 d0             	mov    %rdx,%rax
      s->read_from_callbacks = 0;
   273ce:	45 89 6c 24 30       	mov    %r13d,0x30(%r12)
      *s->img_buffer = 0;
   273d3:	49 89 84 24 c8 00 00 	mov    %rax,0xc8(%r12)
   273da:	00 
      return *s->img_buffer++;
   273db:	45 0f b6 74 24 38    	movzbl 0x38(%r12),%r14d
   273e1:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   273e8:	00 
   273e9:	e9 a2 fc ff ff       	jmp    27090 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x180>
   if (s->img_buffer < s->img_buffer_end)
   273ee:	48 39 c1             	cmp    %rax,%rcx
   273f1:	0f 83 b8 00 00 00    	jae    274af <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x59f>
      return *s->img_buffer++;
   273f7:	48 8d 41 01          	lea    0x1(%rcx),%rax
   273fb:	49 89 84 24 c0 00 00 	mov    %rax,0xc0(%r12)
   27402:	00 
   27403:	0f b6 01             	movzbl (%rcx),%eax
   p  = stbi__get8(s);            if (p != 8) return stbi__err("only 8-bit","JPEG format not supported: 8-bit only"); // JPEG baseline
   27406:	3c 08                	cmp    $0x8,%al
   27408:	0f 84 d1 00 00 00    	je     274df <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x5cf>
   stbi__g_failure_reason = str;
   2740e:	48 8d 05 e5 09 01 00 	lea    0x109e5(%rip),%rax        # 37dfa <_ZSt19piecewise_construct+0x4b3>
   27415:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2741c:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   2741e:	31 c0                	xor    %eax,%eax
   27420:	e9 20 ff ff ff       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   if (s->read_from_callbacks) {
   27425:	45 8b 5c 24 30       	mov    0x30(%r12),%r11d
   2742a:	45 85 db             	test   %r11d,%r11d
   2742d:	75 0b                	jne    2743a <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x52a>
   Lf = stbi__get16be(s);         if (Lf < 11) return stbi__err("bad SOF len","Corrupt JPEG"); // JPEG
   2742f:	41 83 fe 0a          	cmp    $0xa,%r14d
   27433:	7f d9                	jg     2740e <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x4fe>
   27435:	e9 80 fc ff ff       	jmp    270ba <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1aa>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2743a:	4d 8d 6c 24 38       	lea    0x38(%r12),%r13
   2743f:	41 8b 54 24 34       	mov    0x34(%r12),%edx
   27444:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
   27449:	4c 89 ee             	mov    %r13,%rsi
   2744c:	41 ff 54 24 10       	call   *0x10(%r12)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27451:	49 8b 94 24 c0 00 00 	mov    0xc0(%r12),%rdx
   27458:	00 
      s->img_buffer_end = s->buffer_start+1;
   27459:	49 8d 4c 24 39       	lea    0x39(%r12),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2745e:	49 2b 94 24 d0 00 00 	sub    0xd0(%r12),%rdx
   27465:	00 
   27466:	41 01 94 24 b8 00 00 	add    %edx,0xb8(%r12)
   2746d:	00 
   if (n == 0) {
   2746e:	85 c0                	test   %eax,%eax
   27470:	75 36                	jne    274a8 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x598>
      s->read_from_callbacks = 0;
   27472:	45 31 d2             	xor    %r10d,%r10d
      *s->img_buffer = 0;
   27475:	41 c6 44 24 38 00    	movb   $0x0,0x38(%r12)
      s->img_buffer_end = s->buffer_start+1;
   2747b:	48 89 c8             	mov    %rcx,%rax
      s->read_from_callbacks = 0;
   2747e:	45 89 54 24 30       	mov    %r10d,0x30(%r12)
      *s->img_buffer = 0;
   27483:	49 89 84 24 c8 00 00 	mov    %rax,0xc8(%r12)
   2748a:	00 
      return *s->img_buffer++;
   2748b:	45 0f b6 6c 24 38    	movzbl 0x38(%r12),%r13d
   27491:	49 89 8c 24 c0 00 00 	mov    %rcx,0xc0(%r12)
   27498:	00 
   27499:	e9 0f fc ff ff       	jmp    270ad <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x19d>
      s->img_buffer_end = s->buffer_start + n;
   2749e:	48 98                	cltq
   274a0:	4c 01 e8             	add    %r13,%rax
   274a3:	e9 2b ff ff ff       	jmp    273d3 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x4c3>
   274a8:	48 98                	cltq
   274aa:	4c 01 e8             	add    %r13,%rax
   274ad:	eb d4                	jmp    27483 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x573>
   if (s->read_from_callbacks) {
   274af:	41 83 7c 24 30 00    	cmpl   $0x0,0x30(%r12)
   274b5:	0f 84 53 ff ff ff    	je     2740e <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x4fe>
      stbi__refill_buffer(s);
   274bb:	4c 89 e7             	mov    %r12,%rdi
   274be:	e8 bd 9d fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   274c3:	49 8b 84 24 c0 00 00 	mov    0xc0(%r12),%rax
   274ca:	00 
   274cb:	48 8d 50 01          	lea    0x1(%rax),%rdx
   274cf:	49 89 94 24 c0 00 00 	mov    %rdx,0xc0(%r12)
   274d6:	00 
   274d7:	0f b6 00             	movzbl (%rax),%eax
   274da:	e9 27 ff ff ff       	jmp    27406 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x4f6>
   s->img_y = stbi__get16be(s);   if (s->img_y == 0) return stbi__err("no header height", "JPEG format not supported: delayed height"); // Legal, but we don't handle it--but neither does IJG
   274df:	4c 89 e7             	mov    %r12,%rdi
   274e2:	e8 c9 6d ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   274e7:	41 89 44 24 04       	mov    %eax,0x4(%r12)
   274ec:	85 c0                	test   %eax,%eax
   274ee:	75 17                	jne    27507 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x5f7>
   stbi__g_failure_reason = str;
   274f0:	48 8d 05 0e 09 01 00 	lea    0x1090e(%rip),%rax        # 37e05 <_ZSt19piecewise_construct+0x4be>
   274f7:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   274fe:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   27500:	31 c0                	xor    %eax,%eax
   27502:	e9 3e fe ff ff       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   s->img_x = stbi__get16be(s);   if (s->img_x == 0) return stbi__err("0 width","Corrupt JPEG"); // JPEG requires
   27507:	4c 89 e7             	mov    %r12,%rdi
   2750a:	e8 a1 6d ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2750f:	41 89 04 24          	mov    %eax,(%r12)
   27513:	85 c0                	test   %eax,%eax
   27515:	75 17                	jne    2752e <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x61e>
   stbi__g_failure_reason = str;
   27517:	48 8d 05 f8 08 01 00 	lea    0x108f8(%rip),%rax        # 37e16 <_ZSt19piecewise_construct+0x4cf>
   2751e:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   27525:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   27527:	31 c0                	xor    %eax,%eax
   27529:	e9 17 fe ff ff       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__err("too large","Very large image (corrupt?)");
   2752e:	41 81 7c 24 04 00 00 	cmpl   $0x1000000,0x4(%r12)
   27535:	00 01 
   27537:	77 07                	ja     27540 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x630>
   if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__err("too large","Very large image (corrupt?)");
   27539:	3d 00 00 00 01       	cmp    $0x1000000,%eax
   2753e:	76 17                	jbe    27557 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x647>
   stbi__g_failure_reason = str;
   27540:	48 8d 05 11 05 01 00 	lea    0x10511(%rip),%rax        # 37a58 <_ZSt19piecewise_construct+0x111>
   27547:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2754e:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   27550:	31 c0                	xor    %eax,%eax
   27552:	e9 ee fd ff ff       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   c = stbi__get8(s);
   27557:	4c 89 e7             	mov    %r12,%rdi
   2755a:	e8 41 45 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   2755f:	89 c2                	mov    %eax,%edx
   27561:	0f b6 c0             	movzbl %al,%eax
   if (c != 3 && c != 1 && c != 4) return stbi__err("bad component count","Corrupt JPEG");
   27564:	83 ea 03             	sub    $0x3,%edx
   27567:	80 fa 01             	cmp    $0x1,%dl
   2756a:	76 1c                	jbe    27588 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x678>
   2756c:	83 f8 01             	cmp    $0x1,%eax
   2756f:	74 17                	je     27588 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x678>
   stbi__g_failure_reason = str;
   27571:	48 8d 05 a6 08 01 00 	lea    0x108a6(%rip),%rax        # 37e1e <_ZSt19piecewise_construct+0x4d7>
   27578:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2757f:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   27581:	31 c0                	xor    %eax,%eax
   27583:	e9 bd fd ff ff       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   s->img_n = c;
   27588:	41 89 44 24 08       	mov    %eax,0x8(%r12)
   for (i=0; i < c; ++i) {
   2758d:	48 8d 93 d0 46 00 00 	lea    0x46d0(%rbx),%rdx
   27594:	31 c9                	xor    %ecx,%ecx
      z->img_comp[i].linebuf = NULL;
   27596:	45 31 c9             	xor    %r9d,%r9d
   for (i=0; i < c; ++i) {
   27599:	83 c1 01             	add    $0x1,%ecx
   2759c:	48 83 c2 60          	add    $0x60,%rdx
      z->img_comp[i].linebuf = NULL;
   275a0:	4c 89 4a a0          	mov    %r9,-0x60(%rdx)
   275a4:	4c 89 4a b8          	mov    %r9,-0x48(%rdx)
   for (i=0; i < c; ++i) {
   275a8:	39 c8                	cmp    %ecx,%eax
   275aa:	7f ea                	jg     27596 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x686>
   if (Lf != 8+3*s->img_n) return stbi__err("bad SOF len","Corrupt JPEG");
   275ac:	8d 04 40             	lea    (%rax,%rax,2),%eax
   275af:	83 c0 08             	add    $0x8,%eax
   275b2:	44 39 e8             	cmp    %r13d,%eax
   275b5:	0f 85 ff fa ff ff    	jne    270ba <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x1aa>
   z->rgb = 0;
   275bb:	45 31 c0             	xor    %r8d,%r8d
   275be:	4c 8d bb a0 46 00 00 	lea    0x46a0(%rbx),%r15
   for (i=0; i < s->img_n; ++i) {
   275c5:	45 31 ed             	xor    %r13d,%r13d
   z->rgb = 0;
   275c8:	44 89 83 50 48 00 00 	mov    %r8d,0x4850(%rbx)
      if (s->img_n == 3 && z->img_comp[i].id == rgb[i])
   275cf:	4c 8d 35 e6 10 01 00 	lea    0x110e6(%rip),%r14        # 386bc <_ZZL26stbi__process_frame_headerP10stbi__jpegiE3rgb>
   for (i=0; i < s->img_n; ++i) {
   275d6:	eb 58                	jmp    27630 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x720>
      q = stbi__get8(s);
   275d8:	4c 89 e7             	mov    %r12,%rdi
   275db:	e8 c0 44 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   275e0:	0f b6 d0             	movzbl %al,%edx
      z->img_comp[i].h = (q >> 4);  if (!z->img_comp[i].h || z->img_comp[i].h > 4) return stbi__err("bad H","Corrupt JPEG");
   275e3:	c1 fa 04             	sar    $0x4,%edx
   275e6:	41 89 57 04          	mov    %edx,0x4(%r15)
   275ea:	0f 84 ec 00 00 00    	je     276dc <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x7cc>
   275f0:	83 fa 04             	cmp    $0x4,%edx
   275f3:	0f 8f e3 00 00 00    	jg     276dc <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x7cc>
      z->img_comp[i].v = q & 15;    if (!z->img_comp[i].v || z->img_comp[i].v > 4) return stbi__err("bad V","Corrupt JPEG");
   275f9:	89 c2                	mov    %eax,%edx
   275fb:	83 e0 0f             	and    $0xf,%eax
   275fe:	83 e2 0f             	and    $0xf,%edx
   27601:	41 89 47 08          	mov    %eax,0x8(%r15)
   27605:	8d 42 ff             	lea    -0x1(%rdx),%eax
   27608:	3c 03                	cmp    $0x3,%al
   2760a:	0f 87 e3 00 00 00    	ja     276f3 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x7e3>
      z->img_comp[i].tq = stbi__get8(s);  if (z->img_comp[i].tq > 3) return stbi__err("bad TQ","Corrupt JPEG");
   27610:	4c 89 e7             	mov    %r12,%rdi
   27613:	49 83 c5 01          	add    $0x1,%r13
   27617:	49 83 c7 60          	add    $0x60,%r15
   2761b:	e8 80 44 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   27620:	0f b6 c0             	movzbl %al,%eax
   27623:	41 89 47 ac          	mov    %eax,-0x54(%r15)
   27627:	83 f8 03             	cmp    $0x3,%eax
   2762a:	0f 8f 95 00 00 00    	jg     276c5 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x7b5>
   for (i=0; i < s->img_n; ++i) {
   27630:	45 8b 54 24 08       	mov    0x8(%r12),%r10d
   27635:	45 39 ea             	cmp    %r13d,%r10d
   27638:	7e 2f                	jle    27669 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x759>
      z->img_comp[i].id = stbi__get8(s);
   2763a:	4c 89 e7             	mov    %r12,%rdi
   2763d:	e8 5e 44 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   27642:	0f b6 c0             	movzbl %al,%eax
   27645:	41 89 07             	mov    %eax,(%r15)
      if (s->img_n == 3 && z->img_comp[i].id == rgb[i])
   27648:	41 83 7c 24 08 03    	cmpl   $0x3,0x8(%r12)
   2764e:	75 88                	jne    275d8 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x6c8>
   27650:	43 0f b6 14 2e       	movzbl (%r14,%r13,1),%edx
   27655:	39 d0                	cmp    %edx,%eax
   27657:	0f 85 7b ff ff ff    	jne    275d8 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x6c8>
         ++z->rgb;
   2765d:	83 83 50 48 00 00 01 	addl   $0x1,0x4850(%rbx)
   27664:	e9 6f ff ff ff       	jmp    275d8 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x6c8>
   if (scan != STBI__SCAN_load) return 1;
   27669:	85 ed                	test   %ebp,%ebp
   2766b:	0f 85 cf fc ff ff    	jne    27340 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x430>
   if (!stbi__mad3sizes_valid(s->img_x, s->img_y, s->img_n, 0)) return stbi__err("too large", "Image too large to decode");
   27671:	41 8b 74 24 04       	mov    0x4(%r12),%esi
   27676:	41 8b 3c 24          	mov    (%r12),%edi
   2767a:	31 c9                	xor    %ecx,%ecx
   2767c:	44 89 d2             	mov    %r10d,%edx
   2767f:	e8 7c 9b fe ff       	call   11200 <_ZL21stbi__mad3sizes_validiiii>
   27684:	85 c0                	test   %eax,%eax
   27686:	0f 84 b4 fe ff ff    	je     27540 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x630>
   2768c:	4c 8d ab a4 46 00 00 	lea    0x46a4(%rbx),%r13
   for (i=0; i < s->img_n; ++i) {
   27693:	31 d2                	xor    %edx,%edx
   int Lf,p,i,q, h_max=1,v_max=1,c;
   27695:	41 bf 01 00 00 00    	mov    $0x1,%r15d
   2769b:	41 be 01 00 00 00    	mov    $0x1,%r14d
   if (!stbi__mad3sizes_valid(s->img_x, s->img_y, s->img_n, 0)) return stbi__err("too large", "Image too large to decode");
   276a1:	4c 89 e8             	mov    %r13,%rax
   for (i=0; i < s->img_n; ++i) {
   276a4:	41 39 d2             	cmp    %edx,%r10d
   276a7:	7e 61                	jle    2770a <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x7fa>
      if (z->img_comp[i].h > h_max) h_max = z->img_comp[i].h;
   276a9:	8b 08                	mov    (%rax),%ecx
   276ab:	41 39 ce             	cmp    %ecx,%r14d
   276ae:	44 0f 4c f1          	cmovl  %ecx,%r14d
      if (z->img_comp[i].v > v_max) v_max = z->img_comp[i].v;
   276b2:	8b 48 04             	mov    0x4(%rax),%ecx
   276b5:	41 39 cf             	cmp    %ecx,%r15d
   276b8:	44 0f 4c f9          	cmovl  %ecx,%r15d
   for (i=0; i < s->img_n; ++i) {
   276bc:	83 c2 01             	add    $0x1,%edx
   276bf:	48 83 c0 60          	add    $0x60,%rax
   276c3:	eb df                	jmp    276a4 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x794>
   stbi__g_failure_reason = str;
   276c5:	48 8d 05 72 07 01 00 	lea    0x10772(%rip),%rax        # 37e3e <_ZSt19piecewise_construct+0x4f7>
   276cc:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   276d3:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   276d5:	31 c0                	xor    %eax,%eax
   276d7:	e9 69 fc ff ff       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   stbi__g_failure_reason = str;
   276dc:	48 8d 05 4f 07 01 00 	lea    0x1074f(%rip),%rax        # 37e32 <_ZSt19piecewise_construct+0x4eb>
   276e3:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   276ea:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   276ec:	31 c0                	xor    %eax,%eax
   276ee:	e9 52 fc ff ff       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   stbi__g_failure_reason = str;
   276f3:	48 8d 05 3e 07 01 00 	lea    0x1073e(%rip),%rax        # 37e38 <_ZSt19piecewise_construct+0x4f1>
   276fa:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   27701:	ff ff 
   if (!stbi__SOI(m)) return stbi__err("no SOI","Corrupt JPEG");
   27703:	31 c0                	xor    %eax,%eax
   27705:	e9 3b fc ff ff       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
   2770a:	4c 89 e9             	mov    %r13,%rcx
   for (i=0; i < s->img_n; ++i) {
   2770d:	31 f6                	xor    %esi,%esi
   2770f:	eb 1f                	jmp    27730 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x820>
      if (h_max % z->img_comp[i].h != 0) return stbi__err("bad H","Corrupt JPEG");
   27711:	44 89 f0             	mov    %r14d,%eax
   27714:	48 89 cf             	mov    %rcx,%rdi
   27717:	99                   	cltd
   27718:	f7 39                	idivl  (%rcx)
   2771a:	85 d2                	test   %edx,%edx
   2771c:	75 be                	jne    276dc <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x7cc>
      if (v_max % z->img_comp[i].v != 0) return stbi__err("bad V","Corrupt JPEG");
   2771e:	44 89 f8             	mov    %r15d,%eax
   27721:	48 83 c1 60          	add    $0x60,%rcx
   27725:	99                   	cltd
   27726:	f7 7f 04             	idivl  0x4(%rdi)
   27729:	85 d2                	test   %edx,%edx
   2772b:	75 c6                	jne    276f3 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x7e3>
   for (i=0; i < s->img_n; ++i) {
   2772d:	83 c6 01             	add    $0x1,%esi
   27730:	41 39 f2             	cmp    %esi,%r10d
   27733:	7f dc                	jg     27711 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x801>
   z->img_mcu_w = h_max * 8;
   27735:	42 8d 34 f5 00 00 00 	lea    0x0(,%r14,8),%esi
   2773c:	00 
   z->img_h_max = h_max;
   2773d:	44 89 b3 88 46 00 00 	mov    %r14d,0x4688(%rbx)
   z->img_mcu_x = (s->img_x + z->img_mcu_w-1) / z->img_mcu_w;
   27744:	31 d2                	xor    %edx,%edx
   z->img_mcu_h = v_max * 8;
   27746:	42 8d 0c fd 00 00 00 	lea    0x0(,%r15,8),%ecx
   2774d:	00 
   z->img_v_max = v_max;
   2774e:	44 89 bb 8c 46 00 00 	mov    %r15d,0x468c(%rbx)
   z->img_mcu_w = h_max * 8;
   27755:	89 b3 98 46 00 00    	mov    %esi,0x4698(%rbx)
   z->img_mcu_h = v_max * 8;
   2775b:	89 8b 9c 46 00 00    	mov    %ecx,0x469c(%rbx)
   z->img_mcu_x = (s->img_x + z->img_mcu_w-1) / z->img_mcu_w;
   27761:	41 8b 04 24          	mov    (%r12),%eax
   27765:	8d 44 06 ff          	lea    -0x1(%rsi,%rax,1),%eax
   27769:	f7 f6                	div    %esi
   z->img_mcu_y = (s->img_y + z->img_mcu_h-1) / z->img_mcu_h;
   2776b:	31 d2                	xor    %edx,%edx
   z->img_mcu_x = (s->img_x + z->img_mcu_w-1) / z->img_mcu_w;
   2776d:	89 44 24 04          	mov    %eax,0x4(%rsp)
   27771:	89 83 90 46 00 00    	mov    %eax,0x4690(%rbx)
   z->img_mcu_y = (s->img_y + z->img_mcu_h-1) / z->img_mcu_h;
   27777:	41 8b 44 24 04       	mov    0x4(%r12),%eax
   2777c:	8d 44 01 ff          	lea    -0x1(%rcx,%rax,1),%eax
   27780:	f7 f1                	div    %ecx
   27782:	89 44 24 08          	mov    %eax,0x8(%rsp)
   27786:	89 83 94 46 00 00    	mov    %eax,0x4694(%rbx)
      z->img_comp[i].x = (s->img_x * z->img_comp[i].h + h_max-1) / h_max;
   2778c:	41 8d 46 ff          	lea    -0x1(%r14),%eax
   27790:	89 44 24 0c          	mov    %eax,0xc(%rsp)
   for (i=0; i < s->img_n; ++i) {
   27794:	eb 78                	jmp    2780e <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x8fe>
   if (b == 0) return 1; // mul-by-0 is always safe
   27796:	85 c9                	test   %ecx,%ecx
   27798:	74 12                	je     277ac <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x89c>
   return a <= INT_MAX/b;
   2779a:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2779f:	31 d2                	xor    %edx,%edx
   277a1:	f7 fe                	idiv   %esi
   return stbi__mul2sizes_valid(a, b) && stbi__addsizes_valid(a*b, add);
   277a3:	41 39 c2             	cmp    %eax,%r10d
   277a6:	0f 8f e2 00 00 00    	jg     2788e <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x97e>
   277ac:	44 89 d7             	mov    %r10d,%edi
   277af:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
   277b3:	0f af fe             	imul   %esi,%edi
   277b6:	44 89 5c 24 18       	mov    %r11d,0x18(%rsp)
   277bb:	44 89 54 24 14       	mov    %r10d,0x14(%rsp)
   277c0:	89 74 24 10          	mov    %esi,0x10(%rsp)
   return stbi__malloc(a*b + add);
   277c4:	83 c7 0f             	add    $0xf,%edi
   277c7:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   277ca:	e8 91 ef fd ff       	call   6760 <malloc@plt>
      if (z->img_comp[i].raw_data == NULL)
   277cf:	8b 74 24 10          	mov    0x10(%rsp),%esi
   277d3:	44 8b 54 24 14       	mov    0x14(%rsp),%r10d
   277d8:	48 85 c0             	test   %rax,%rax
   277db:	44 8b 5c 24 18       	mov    0x18(%rsp),%r11d
   277e0:	8b 4c 24 1c          	mov    0x1c(%rsp),%ecx
      z->img_comp[i].raw_data = stbi__malloc_mad2(z->img_comp[i].w2, z->img_comp[i].h2, 15);
   277e4:	49 89 45 34          	mov    %rax,0x34(%r13)
      if (z->img_comp[i].raw_data == NULL)
   277e8:	0f 84 b1 00 00 00    	je     2789f <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x98f>
      z->img_comp[i].data = (stbi_uc*) (((size_t) z->img_comp[i].raw_data + 15) & ~15);
   277ee:	48 83 c0 0f          	add    $0xf,%rax
   277f2:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
      if (z->progressive) {
   277f6:	83 bb 30 48 00 00 00 	cmpl   $0x0,0x4830(%rbx)
      z->img_comp[i].data = (stbi_uc*) (((size_t) z->img_comp[i].raw_data + 15) & ~15);
   277fd:	49 89 45 2c          	mov    %rax,0x2c(%r13)
      if (z->progressive) {
   27801:	0f 85 c0 00 00 00    	jne    278c7 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x9b7>
   for (i=0; i < s->img_n; ++i) {
   27807:	83 c5 01             	add    $0x1,%ebp
   2780a:	49 83 c5 60          	add    $0x60,%r13
   2780e:	41 3b 6c 24 08       	cmp    0x8(%r12),%ebp
   27813:	0f 8d e2 00 00 00    	jge    278fb <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x9eb>
      z->img_comp[i].x = (s->img_x * z->img_comp[i].h + h_max-1) / h_max;
   27819:	41 8b 04 24          	mov    (%r12),%eax
   2781d:	45 8b 5d 00          	mov    0x0(%r13),%r11d
   27821:	31 d2                	xor    %edx,%edx
      z->img_comp[i].coeff = 0;
   27823:	31 ff                	xor    %edi,%edi
      z->img_comp[i].x = (s->img_x * z->img_comp[i].h + h_max-1) / h_max;
   27825:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
      z->img_comp[i].raw_coeff = 0;
   27829:	66 0f ef c0          	pxor   %xmm0,%xmm0
      z->img_comp[i].x = (s->img_x * z->img_comp[i].h + h_max-1) / h_max;
   2782d:	41 0f af c3          	imul   %r11d,%eax
   27831:	01 c8                	add    %ecx,%eax
      z->img_comp[i].y = (s->img_y * z->img_comp[i].v + v_max-1) / v_max;
   27833:	41 8b 4d 04          	mov    0x4(%r13),%ecx
      z->img_comp[i].x = (s->img_x * z->img_comp[i].h + h_max-1) / h_max;
   27837:	41 f7 f6             	div    %r14d
      z->img_comp[i].y = (s->img_y * z->img_comp[i].v + v_max-1) / v_max;
   2783a:	31 d2                	xor    %edx,%edx
      z->img_comp[i].x = (s->img_x * z->img_comp[i].h + h_max-1) / h_max;
   2783c:	41 89 45 18          	mov    %eax,0x18(%r13)
      z->img_comp[i].y = (s->img_y * z->img_comp[i].v + v_max-1) / v_max;
   27840:	41 8b 44 24 04       	mov    0x4(%r12),%eax
      z->img_comp[i].coeff = 0;
   27845:	49 89 7d 4c          	mov    %rdi,0x4c(%r13)
      z->img_comp[i].y = (s->img_y * z->img_comp[i].v + v_max-1) / v_max;
   27849:	0f af c1             	imul   %ecx,%eax
      z->img_comp[i].raw_coeff = 0;
   2784c:	41 0f 11 45 3c       	movups %xmm0,0x3c(%r13)
      z->img_comp[i].y = (s->img_y * z->img_comp[i].v + v_max-1) / v_max;
   27851:	41 8d 44 07 ff       	lea    -0x1(%r15,%rax,1),%eax
   27856:	41 f7 f7             	div    %r15d
   27859:	41 89 45 1c          	mov    %eax,0x1c(%r13)
      z->img_comp[i].w2 = z->img_mcu_x * z->img_comp[i].h * 8;
   2785d:	8b 44 24 04          	mov    0x4(%rsp),%eax
   27861:	44 0f af d8          	imul   %eax,%r11d
      z->img_comp[i].h2 = z->img_mcu_y * z->img_comp[i].v * 8;
   27865:	8b 44 24 08          	mov    0x8(%rsp),%eax
   27869:	0f af c8             	imul   %eax,%ecx
      z->img_comp[i].w2 = z->img_mcu_x * z->img_comp[i].h * 8;
   2786c:	46 8d 14 dd 00 00 00 	lea    0x0(,%r11,8),%r10d
   27873:	00 
   if (a < 0 || b < 0) return 0;
   27874:	44 89 d0             	mov    %r10d,%eax
      z->img_comp[i].w2 = z->img_mcu_x * z->img_comp[i].h * 8;
   27877:	45 89 55 20          	mov    %r10d,0x20(%r13)
      z->img_comp[i].h2 = z->img_mcu_y * z->img_comp[i].v * 8;
   2787b:	8d 34 cd 00 00 00 00 	lea    0x0(,%rcx,8),%esi
   if (a < 0 || b < 0) return 0;
   27882:	09 f0                	or     %esi,%eax
      z->img_comp[i].h2 = z->img_mcu_y * z->img_comp[i].v * 8;
   27884:	41 89 75 24          	mov    %esi,0x24(%r13)
   if (a < 0 || b < 0) return 0;
   27888:	0f 89 08 ff ff ff    	jns    27796 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x886>
      z->img_comp[i].raw_data = stbi__malloc_mad2(z->img_comp[i].w2, z->img_comp[i].h2, 15);
   2788e:	48 63 c5             	movslq %ebp,%rax
   27891:	31 d2                	xor    %edx,%edx
   27893:	48 6b c0 60          	imul   $0x60,%rax,%rax
   27897:	48 89 94 03 d8 46 00 	mov    %rdx,0x46d8(%rbx,%rax,1)
   2789e:	00 
   stbi__g_failure_reason = str;
   2789f:	48 8d 05 8f 01 01 00 	lea    0x1018f(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
            return stbi__free_jpeg_components(z, i+1, stbi__err("outofmem", "Out of memory"));
   278a6:	8d 75 01             	lea    0x1(%rbp),%esi
   278a9:	48 89 df             	mov    %rbx,%rdi
   stbi__g_failure_reason = str;
   278ac:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   278b3:	ff ff 
            return stbi__free_jpeg_components(z, i+1, stbi__err("outofmem", "Out of memory"));
   278b5:	e8 06 d1 fe ff       	call   149c0 <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0>
   if (!stbi__process_frame_header(z, scan)) return 0;
   278ba:	85 c0                	test   %eax,%eax
   278bc:	0f 95 c0             	setne  %al
   278bf:	0f b6 c0             	movzbl %al,%eax
   278c2:	e9 7e fa ff ff       	jmp    27345 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x435>
         z->img_comp[i].coeff_h = z->img_comp[i].h2 / 8;
   278c7:	41 89 4d 58          	mov    %ecx,0x58(%r13)
         z->img_comp[i].raw_coeff = stbi__malloc_mad3(z->img_comp[i].w2, z->img_comp[i].h2, sizeof(short), 15);
   278cb:	ba 02 00 00 00       	mov    $0x2,%edx
   278d0:	b9 0f 00 00 00       	mov    $0xf,%ecx
   278d5:	44 89 d7             	mov    %r10d,%edi
         z->img_comp[i].coeff_w = z->img_comp[i].w2 / 8;
   278d8:	45 89 5d 54          	mov    %r11d,0x54(%r13)
         z->img_comp[i].raw_coeff = stbi__malloc_mad3(z->img_comp[i].w2, z->img_comp[i].h2, sizeof(short), 15);
   278dc:	e8 af d7 fe ff       	call   15090 <_ZL17stbi__malloc_mad3iiii>
   278e1:	49 89 45 3c          	mov    %rax,0x3c(%r13)
         if (z->img_comp[i].raw_coeff == NULL)
   278e5:	48 85 c0             	test   %rax,%rax
   278e8:	74 b5                	je     2789f <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x98f>
         z->img_comp[i].coeff = (short*) (((size_t) z->img_comp[i].raw_coeff + 15) & ~15);
   278ea:	48 83 c0 0f          	add    $0xf,%rax
   278ee:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
   278f2:	49 89 45 4c          	mov    %rax,0x4c(%r13)
   278f6:	e9 0c ff ff ff       	jmp    27807 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x8f7>
   if (scan != STBI__SCAN_load) return 1;
   278fb:	b8 01 00 00 00       	mov    $0x1,%eax
   27900:	eb b8                	jmp    278ba <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi+0x9aa>
   27902:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   27909:	00 00 00 00 
   2790d:	0f 1f 00             	nopl   (%rax)

0000000000027910 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg>:
{
   27910:	41 57                	push   %r15
      j->img_comp[m].raw_data = NULL;
   27912:	66 0f ef c0          	pxor   %xmm0,%xmm0
   if (!stbi__decode_jpeg_header(j, STBI__SCAN_load)) return 0;
   27916:	31 f6                	xor    %esi,%esi
{
   27918:	41 56                	push   %r14
   2791a:	49 89 fe             	mov    %rdi,%r14
   2791d:	41 55                	push   %r13
   2791f:	41 54                	push   %r12
   27921:	55                   	push   %rbp
   27922:	53                   	push   %rbx
   27923:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
      j->img_comp[m].raw_data = NULL;
   2792a:	0f 11 87 d8 46 00 00 	movups %xmm0,0x46d8(%rdi)
   j->restart_interval = 0;
   27931:	c7 87 68 48 00 00 00 	movl   $0x0,0x4868(%rdi)
   27938:	00 00 00 
      j->img_comp[m].raw_data = NULL;
   2793b:	0f 11 87 38 47 00 00 	movups %xmm0,0x4738(%rdi)
   27942:	0f 11 87 98 47 00 00 	movups %xmm0,0x4798(%rdi)
   27949:	0f 11 87 f8 47 00 00 	movups %xmm0,0x47f8(%rdi)
   if (!stbi__decode_jpeg_header(j, STBI__SCAN_load)) return 0;
   27950:	e8 bb f5 ff ff       	call   26f10 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi>
   27955:	85 c0                	test   %eax,%eax
   27957:	75 14                	jne    2796d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x5d>
   27959:	31 c0                	xor    %eax,%eax
}
   2795b:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
   27962:	5b                   	pop    %rbx
   27963:	5d                   	pop    %rbp
   27964:	41 5c                	pop    %r12
   27966:	41 5d                	pop    %r13
   27968:	41 5e                	pop    %r14
   2796a:	41 5f                	pop    %r15
   2796c:	c3                   	ret
   m = stbi__get_marker(j);
   2796d:	4c 89 f7             	mov    %r14,%rdi
   27970:	e8 cb 7d ff ff       	call   1f740 <_ZL16stbi__get_markerP10stbi__jpeg>
   27975:	0f b6 f0             	movzbl %al,%esi
   while (!stbi__EOI(m)) {
   27978:	3c d9                	cmp    $0xd9,%al
   2797a:	0f 84 d0 04 00 00    	je     27e50 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x540>
                        if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
   27980:	49 8d 86 48 1a 00 00 	lea    0x1a48(%r14),%rax
   27987:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   2798c:	eb 16                	jmp    279a4 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x94>
   2798e:	66 90                	xchg   %ax,%ax
   if (j->marker != STBI__MARKER_none) { x = j->marker; j->marker = STBI__MARKER_none; return x; }
   27990:	41 c6 86 28 48 00 00 	movb   $0xff,0x4828(%r14)
   27997:	ff 
   while (!stbi__EOI(m)) {
   27998:	81 fe d9 00 00 00    	cmp    $0xd9,%esi
   2799e:	0f 84 ac 04 00 00    	je     27e50 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x540>
      if (stbi__SOS(m)) {
   279a4:	81 fe da 00 00 00    	cmp    $0xda,%esi
   279aa:	0f 84 8f 01 00 00    	je     27b3f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x22f>
      } else if (stbi__DNL(m)) {
   279b0:	81 fe dc 00 00 00    	cmp    $0xdc,%esi
   279b6:	0f 85 1b 01 00 00    	jne    27ad7 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c7>
         int Ld = stbi__get16be(j->s);
   279bc:	49 8b 1e             	mov    (%r14),%rbx
   if (s->img_buffer < s->img_buffer_end)
   279bf:	48 8b 8b c0 00 00 00 	mov    0xc0(%rbx),%rcx
   279c6:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   279cd:	48 39 c1             	cmp    %rax,%rcx
   279d0:	0f 83 24 02 00 00    	jae    27bfa <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x2ea>
      return *s->img_buffer++;
   279d6:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   279da:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   int z = stbi__get8(s);
   279e1:	44 0f b6 21          	movzbl (%rcx),%r12d
   return (z << 8) + stbi__get8(s);
   279e5:	41 c1 e4 08          	shl    $0x8,%r12d
   if (s->img_buffer < s->img_buffer_end)
   279e9:	48 39 c2             	cmp    %rax,%rdx
   279ec:	0f 83 c3 02 00 00    	jae    27cb5 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x3a5>
      return *s->img_buffer++;
   279f2:	48 8d 42 01          	lea    0x1(%rdx),%rax
   279f6:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   return (z << 8) + stbi__get8(s);
   279fd:	0f b6 02             	movzbl (%rdx),%eax
   27a00:	41 01 c4             	add    %eax,%r12d
         stbi__uint32 NL = stbi__get16be(j->s);
   27a03:	49 8b 1e             	mov    (%r14),%rbx
   if (s->img_buffer < s->img_buffer_end)
   27a06:	48 8b 8b c0 00 00 00 	mov    0xc0(%rbx),%rcx
   27a0d:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   27a14:	48 39 c1             	cmp    %rax,%rcx
   27a17:	0f 83 54 03 00 00    	jae    27d71 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x461>
      return *s->img_buffer++;
   27a1d:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   27a21:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   int z = stbi__get8(s);
   27a28:	0f b6 29             	movzbl (%rcx),%ebp
   return (z << 8) + stbi__get8(s);
   27a2b:	c1 e5 08             	shl    $0x8,%ebp
   if (s->img_buffer < s->img_buffer_end)
   27a2e:	48 39 c2             	cmp    %rax,%rdx
   27a31:	0f 83 dd 02 00 00    	jae    27d14 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x404>
      return *s->img_buffer++;
   27a37:	48 8d 42 01          	lea    0x1(%rdx),%rax
   27a3b:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   return (z << 8) + stbi__get8(s);
   27a42:	0f b6 02             	movzbl (%rdx),%eax
   27a45:	01 c5                	add    %eax,%ebp
         if (Ld != 4) return stbi__err("bad DNL len", "Corrupt JPEG");
   27a47:	41 83 fc 04          	cmp    $0x4,%r12d
   27a4b:	0f 85 b2 01 00 00    	jne    27c03 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x2f3>
         if (NL != j->s->img_y) return stbi__err("bad DNL height", "Corrupt JPEG");
   27a51:	49 8b 06             	mov    (%r14),%rax
   27a54:	39 68 04             	cmp    %ebp,0x4(%rax)
   27a57:	0f 85 f9 07 00 00    	jne    28256 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x946>
   if (j->marker != STBI__MARKER_none) { x = j->marker; j->marker = STBI__MARKER_none; return x; }
   27a5d:	41 0f b6 b6 28 48 00 	movzbl 0x4828(%r14),%esi
   27a64:	00 
   27a65:	40 80 fe ff          	cmp    $0xff,%sil
   27a69:	0f 85 21 ff ff ff    	jne    27990 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x80>
   x = stbi__get8(j->s);
   27a6f:	49 8b 1e             	mov    (%r14),%rbx
   if (s->img_buffer < s->img_buffer_end)
   27a72:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   27a79:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   27a80:	0f 83 1c 01 00 00    	jae    27ba2 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x292>
      return *s->img_buffer++;
   27a86:	48 8d 50 01          	lea    0x1(%rax),%rdx
   27a8a:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   27a91:	0f b6 10             	movzbl (%rax),%edx
   if (x != 0xff) return STBI__MARKER_none;
   27a94:	80 fa ff             	cmp    $0xff,%dl
   27a97:	0f 85 0c 01 00 00    	jne    27ba9 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x299>
   27a9d:	0f 1f 00             	nopl   (%rax)
      x = stbi__get8(j->s); // consume repeated 0xff fill bytes
   27aa0:	49 8b 1e             	mov    (%r14),%rbx
   if (s->img_buffer < s->img_buffer_end)
   27aa3:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   27aaa:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   27ab1:	73 1d                	jae    27ad0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c0>
      return *s->img_buffer++;
   27ab3:	48 8d 50 01          	lea    0x1(%rax),%rdx
   27ab7:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   27abe:	0f b6 00             	movzbl (%rax),%eax
   while (x == 0xff)
   27ac1:	3c ff                	cmp    $0xff,%al
   27ac3:	74 db                	je     27aa0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x190>
      m = stbi__get_marker(j);
   27ac5:	0f b6 f0             	movzbl %al,%esi
   27ac8:	e9 cb fe ff ff       	jmp    27998 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x88>
   27acd:	0f 1f 00             	nopl   (%rax)
   if (s->read_from_callbacks) {
   27ad0:	8b 73 30             	mov    0x30(%rbx),%esi
   27ad3:	85 f6                	test   %esi,%esi
   27ad5:	75 19                	jne    27af0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1e0>
         if (!stbi__process_marker(j, m)) return 0;
   27ad7:	4c 89 f7             	mov    %r14,%rdi
   27ada:	e8 81 a8 ff ff       	call   22360 <_ZL20stbi__process_markerP10stbi__jpegi>
   27adf:	85 c0                	test   %eax,%eax
   27ae1:	0f 85 76 ff ff ff    	jne    27a5d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x14d>
   27ae7:	e9 6d fe ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
   27aec:	0f 1f 40 00          	nopl   0x0(%rax)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27af0:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   27af4:	8b 53 34             	mov    0x34(%rbx),%edx
   27af7:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   27afb:	48 89 ee             	mov    %rbp,%rsi
   27afe:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   27b01:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27b05:	48 63 f0             	movslq %eax,%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27b08:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   27b0f:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   27b16:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   27b1c:	85 f6                	test   %esi,%esi
   27b1e:	0f 85 bc 00 00 00    	jne    27be0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x2d0>
      s->read_from_callbacks = 0;
   27b24:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   27b2b:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   27b2f:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   27b36:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      if (stbi__SOS(m)) {
   27b3d:	eb 98                	jmp    27ad7 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c7>
   int Ls = stbi__get16be(z->s);
   27b3f:	49 8b 3e             	mov    (%r14),%rdi
   27b42:	e8 69 67 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   z->scan_n = stbi__get8(z->s);
   27b47:	49 8b 1e             	mov    (%r14),%rbx
   int Ls = stbi__get16be(z->s);
   27b4a:	89 c5                	mov    %eax,%ebp
   if (s->img_buffer < s->img_buffer_end)
   27b4c:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   27b53:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   27b5a:	73 57                	jae    27bb3 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x2a3>
      return *s->img_buffer++;
   27b5c:	48 8d 50 01          	lea    0x1(%rax),%rdx
   27b60:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   z->scan_n = stbi__get8(z->s);
   27b67:	0f b6 00             	movzbl (%rax),%eax
   if (z->scan_n < 1 || z->scan_n > 4 || z->scan_n > (int) z->s->img_n) return stbi__err("bad SOS component count","Corrupt JPEG");
   27b6a:	8d 70 ff             	lea    -0x1(%rax),%esi
   z->scan_n = stbi__get8(z->s);
   27b6d:	41 89 86 54 48 00 00 	mov    %eax,0x4854(%r14)
   if (z->scan_n < 1 || z->scan_n > 4 || z->scan_n > (int) z->s->img_n) return stbi__err("bad SOS component count","Corrupt JPEG");
   27b74:	83 fe 03             	cmp    $0x3,%esi
   27b77:	77 52                	ja     27bcb <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x2bb>
   27b79:	49 8b 1e             	mov    (%r14),%rbx
   27b7c:	39 43 08             	cmp    %eax,0x8(%rbx)
   27b7f:	7c 4a                	jl     27bcb <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x2bb>
   if (Ls != 6+2*z->scan_n) return stbi__err("bad SOS len","Corrupt JPEG");
   27b81:	8d 44 00 06          	lea    0x6(%rax,%rax,1),%eax
   27b85:	39 c5                	cmp    %eax,%ebp
   27b87:	0f 84 d2 04 00 00    	je     2805f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x74f>
   stbi__g_failure_reason = str;
   27b8d:	48 8d 05 c9 02 01 00 	lea    0x102c9(%rip),%rax        # 37e5d <_ZSt19piecewise_construct+0x516>
   27b94:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   27b9b:	ff ff 
   return 0;
   27b9d:	e9 b7 fd ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
   if (s->read_from_callbacks) {
   27ba2:	8b 73 30             	mov    0x30(%rbx),%esi
   27ba5:	85 f6                	test   %esi,%esi
   27ba7:	75 6f                	jne    27c18 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x308>
      s->img_buffer_end = s->buffer_start+1;
   27ba9:	be ff 00 00 00       	mov    $0xff,%esi
   27bae:	e9 24 ff ff ff       	jmp    27ad7 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c7>
   if (s->read_from_callbacks) {
   27bb3:	44 8b 5b 30          	mov    0x30(%rbx),%r11d
   27bb7:	45 85 db             	test   %r11d,%r11d
   27bba:	0f 85 11 02 00 00    	jne    27dd1 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x4c1>
   z->scan_n = stbi__get8(z->s);
   27bc0:	41 c7 86 54 48 00 00 	movl   $0x0,0x4854(%r14)
   27bc7:	00 00 00 00 
   stbi__g_failure_reason = str;
   27bcb:	48 8d 05 73 02 01 00 	lea    0x10273(%rip),%rax        # 37e45 <_ZSt19piecewise_construct+0x4fe>
   27bd2:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   27bd9:	ff ff 
   return 0;
   27bdb:	e9 79 fd ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
      s->img_buffer_end = s->buffer_start + n;
   27be0:	48 01 f5             	add    %rsi,%rbp
      return *s->img_buffer++;
   27be3:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   27bea:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
      s->img_buffer_end = s->buffer_start + n;
   27bee:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
      return *s->img_buffer++;
   27bf5:	e9 c7 fe ff ff       	jmp    27ac1 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b1>
   if (s->read_from_callbacks) {
   27bfa:	44 8b 4b 30          	mov    0x30(%rbx),%r9d
   27bfe:	45 85 c9             	test   %r9d,%r9d
   27c01:	75 64                	jne    27c67 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x357>
   stbi__g_failure_reason = str;
   27c03:	48 8d 05 7f 02 01 00 	lea    0x1027f(%rip),%rax        # 37e89 <_ZSt19piecewise_construct+0x542>
   27c0a:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   27c11:	ff ff 
         if (Ld != 4) return stbi__err("bad DNL len", "Corrupt JPEG");
   27c13:	e9 41 fd ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27c18:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   27c1c:	8b 53 34             	mov    0x34(%rbx),%edx
   27c1f:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   27c23:	48 89 ee             	mov    %rbp,%rsi
   27c26:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27c29:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   27c30:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27c34:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   27c3b:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   27c41:	85 c0                	test   %eax,%eax
   27c43:	0f 85 da 01 00 00    	jne    27e23 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x513>
      s->read_from_callbacks = 0;
   27c49:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   27c50:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   27c54:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   27c5b:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   if (x != 0xff) return STBI__MARKER_none;
   27c62:	e9 42 ff ff ff       	jmp    27ba9 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x299>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27c67:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   27c6b:	8b 53 34             	mov    0x34(%rbx),%edx
   27c6e:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   27c72:	48 89 ee             	mov    %rbp,%rsi
   27c75:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   27c78:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27c7c:	4c 63 e0             	movslq %eax,%r12
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27c7f:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   27c86:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   27c8d:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   27c93:	45 85 e4             	test   %r12d,%r12d
   27c96:	0f 85 c9 01 00 00    	jne    27e65 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x555>
      s->read_from_callbacks = 0;
   27c9c:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   27ca3:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   27ca7:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   27cae:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   if (s->read_from_callbacks) {
   27cb5:	44 8b 43 30          	mov    0x30(%rbx),%r8d
   27cb9:	45 85 c0             	test   %r8d,%r8d
   27cbc:	0f 84 41 fd ff ff    	je     27a03 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xf3>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27cc2:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   27cc6:	8b 53 34             	mov    0x34(%rbx),%edx
   27cc9:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   27ccd:	48 89 ee             	mov    %rbp,%rsi
   27cd0:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27cd3:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   27cda:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   27ce1:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   27ce7:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   27ceb:	85 c0                	test   %eax,%eax
   27ced:	0f 85 93 01 00 00    	jne    27e86 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x576>
      s->read_from_callbacks = 0;
   27cf3:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   27cfa:	48 89 d5             	mov    %rdx,%rbp
      *s->img_buffer = 0;
   27cfd:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   27d01:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
      return *s->img_buffer++;
   27d08:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   27d0f:	e9 ef fc ff ff       	jmp    27a03 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xf3>
   if (s->read_from_callbacks) {
   27d14:	8b 7b 30             	mov    0x30(%rbx),%edi
   27d17:	85 ff                	test   %edi,%edi
   27d19:	0f 84 28 fd ff ff    	je     27a47 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x137>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27d1f:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   27d23:	8b 53 34             	mov    0x34(%rbx),%edx
   27d26:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   27d2a:	4c 89 ee             	mov    %r13,%rsi
   27d2d:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27d30:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   27d37:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   27d3e:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   27d44:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   27d48:	85 c0                	test   %eax,%eax
   27d4a:	0f 85 47 01 00 00    	jne    27e97 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x587>
      s->read_from_callbacks = 0;
   27d50:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   27d57:	49 89 d5             	mov    %rdx,%r13
      *s->img_buffer = 0;
   27d5a:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   27d5e:	4c 89 ab c8 00 00 00 	mov    %r13,0xc8(%rbx)
      return *s->img_buffer++;
   27d65:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   27d6c:	e9 d6 fc ff ff       	jmp    27a47 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x137>
   if (s->read_from_callbacks) {
   27d71:	8b 6b 30             	mov    0x30(%rbx),%ebp
   27d74:	85 ed                	test   %ebp,%ebp
   27d76:	0f 84 cb fc ff ff    	je     27a47 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x137>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27d7c:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   27d80:	8b 53 34             	mov    0x34(%rbx),%edx
   27d83:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   27d87:	4c 89 ee             	mov    %r13,%rsi
   27d8a:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   27d8d:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27d91:	48 63 e8             	movslq %eax,%rbp
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27d94:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   27d9b:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   27da2:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   27da8:	85 ed                	test   %ebp,%ebp
   27daa:	0f 85 8f 00 00 00    	jne    27e3f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x52f>
      s->read_from_callbacks = 0;
   27db0:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   27db7:	48 89 d0             	mov    %rdx,%rax
      *s->img_buffer = 0;
   27dba:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   27dbe:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
      return *s->img_buffer++;
   27dc5:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   27dcc:	e9 5d fc ff ff       	jmp    27a2e <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x11e>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27dd1:	4c 8d 63 38          	lea    0x38(%rbx),%r12
   27dd5:	8b 53 34             	mov    0x34(%rbx),%edx
   27dd8:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   27ddc:	4c 89 e6             	mov    %r12,%rsi
   27ddf:	ff 53 10             	call   *0x10(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   27de2:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   27de6:	48 63 d0             	movslq %eax,%rdx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   27de9:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   27df0:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   27df7:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
   if (n == 0) {
   27dfd:	85 d2                	test   %edx,%edx
   27dff:	0f 85 a2 00 00 00    	jne    27ea7 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x597>
      s->read_from_callbacks = 0;
   27e05:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   27e0c:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   27e10:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   27e17:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   27e1e:	e9 9d fd ff ff       	jmp    27bc0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x2b0>
      s->img_buffer_end = s->buffer_start + n;
   27e23:	48 98                	cltq
      return *s->img_buffer++;
   27e25:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   27e2c:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   27e30:	48 01 c5             	add    %rax,%rbp
   27e33:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
      return *s->img_buffer++;
   27e3a:	e9 55 fc ff ff       	jmp    27a94 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x184>
      s->img_buffer_end = s->buffer_start + n;
   27e3f:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
   int z = stbi__get8(s);
   27e44:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
   return (z << 8) + stbi__get8(s);
   27e48:	c1 e5 08             	shl    $0x8,%ebp
   27e4b:	e9 6e ff ff ff       	jmp    27dbe <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x4ae>
   if (j->progressive)
   27e50:	41 8b 9e 30 48 00 00 	mov    0x4830(%r14),%ebx
   27e57:	85 db                	test   %ebx,%ebx
   27e59:	75 69                	jne    27ec4 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x5b4>
   return 1;
   27e5b:	b8 01 00 00 00       	mov    $0x1,%eax
   27e60:	e9 f6 fa ff ff       	jmp    2795b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x4b>
      s->img_buffer_end = s->buffer_start + n;
   27e65:	4a 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%rax
   int z = stbi__get8(s);
   27e6a:	44 0f b6 63 38       	movzbl 0x38(%rbx),%r12d
      return *s->img_buffer++;
   27e6f:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   27e76:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
   return (z << 8) + stbi__get8(s);
   27e7d:	41 c1 e4 08          	shl    $0x8,%r12d
   27e81:	e9 63 fb ff ff       	jmp    279e9 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xd9>
      s->img_buffer_end = s->buffer_start + n;
   27e86:	48 98                	cltq
   27e88:	48 01 c5             	add    %rax,%rbp
   return (z << 8) + stbi__get8(s);
   27e8b:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   27e8f:	41 01 c4             	add    %eax,%r12d
   27e92:	e9 6a fe ff ff       	jmp    27d01 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x3f1>
      s->img_buffer_end = s->buffer_start + n;
   27e97:	48 98                	cltq
   27e99:	49 01 c5             	add    %rax,%r13
   return (z << 8) + stbi__get8(s);
   27e9c:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   27ea0:	01 c5                	add    %eax,%ebp
   27ea2:	e9 b7 fe ff ff       	jmp    27d5e <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x44e>
   z->scan_n = stbi__get8(z->s);
   27ea7:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
      s->img_buffer_end = s->buffer_start + n;
   27eab:	49 01 d4             	add    %rdx,%r12
      return *s->img_buffer++;
   27eae:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
      s->img_buffer_end = s->buffer_start + n;
   27eb5:	4c 89 a3 c8 00 00 00 	mov    %r12,0xc8(%rbx)
   if (z->scan_n < 1 || z->scan_n > 4 || z->scan_n > (int) z->s->img_n) return stbi__err("bad SOS component count","Corrupt JPEG");
   27ebc:	8d 70 ff             	lea    -0x1(%rax),%esi
   27ebf:	e9 a9 fc ff ff       	jmp    27b6d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x25d>
      for (n=0; n < z->s->img_n; ++n) {
   27ec4:	49 8b 16             	mov    (%r14),%rdx
   27ec7:	8b 42 08             	mov    0x8(%rdx),%eax
   27eca:	85 c0                	test   %eax,%eax
   27ecc:	7e 8d                	jle    27e5b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x54b>
   27ece:	4d 8d 86 ac 46 00 00 	lea    0x46ac(%r14),%r8
   27ed5:	45 31 e4             	xor    %r12d,%r12d
   27ed8:	4d 89 c7             	mov    %r8,%r15
         int h = (z->img_comp[n].y+7) >> 3;
   27edb:	41 8b 7f 14          	mov    0x14(%r15),%edi
         int w = (z->img_comp[n].x+7) >> 3;
   27edf:	41 8b 5f 10          	mov    0x10(%r15),%ebx
         int h = (z->img_comp[n].y+7) >> 3;
   27ee3:	8d 6f 07             	lea    0x7(%rdi),%ebp
         int w = (z->img_comp[n].x+7) >> 3;
   27ee6:	83 c3 07             	add    $0x7,%ebx
         int h = (z->img_comp[n].y+7) >> 3;
   27ee9:	c1 fd 03             	sar    $0x3,%ebp
         int w = (z->img_comp[n].x+7) >> 3;
   27eec:	c1 fb 03             	sar    $0x3,%ebx
         int h = (z->img_comp[n].y+7) >> 3;
   27eef:	89 6c 24 08          	mov    %ebp,0x8(%rsp)
         for (j=0; j < h; ++j) {
   27ef3:	85 ed                	test   %ebp,%ebp
   27ef5:	0f 8e 4e 01 00 00    	jle    28049 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x739>
   27efb:	85 db                	test   %ebx,%ebx
   27efd:	0f 8e 43 01 00 00    	jle    28046 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x736>
   27f03:	31 ed                	xor    %ebp,%ebp
   27f05:	48 63 db             	movslq %ebx,%rbx
      for (n=0; n < z->s->img_n; ++n) {
   27f08:	45 31 ed             	xor    %r13d,%r13d
   27f0b:	e9 b6 00 00 00       	jmp    27fc6 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x6b6>
      data[i] *= dequant[i];
   27f10:	f3 0f 6f 0e          	movdqu (%rsi),%xmm1
   27f14:	f3 0f 6f 00          	movdqu (%rax),%xmm0
   27f18:	f3 0f 6f 58 20       	movdqu 0x20(%rax),%xmm3
   27f1d:	f3 0f 6f 68 40       	movdqu 0x40(%rax),%xmm5
   27f22:	66 0f d5 c1          	pmullw %xmm1,%xmm0
   27f26:	f3 0f 6f 70 50       	movdqu 0x50(%rax),%xmm6
   27f2b:	f3 0f 6f 78 60       	movdqu 0x60(%rax),%xmm7
   27f30:	f3 0f 6f 48 70       	movdqu 0x70(%rax),%xmm1
   27f35:	0f 11 00             	movups %xmm0,(%rax)
   27f38:	f3 0f 6f 40 10       	movdqu 0x10(%rax),%xmm0
   27f3d:	f3 0f 6f 56 10       	movdqu 0x10(%rsi),%xmm2
   27f42:	66 0f d5 c2          	pmullw %xmm2,%xmm0
   27f46:	0f 11 40 10          	movups %xmm0,0x10(%rax)
   27f4a:	f3 0f 6f 46 20       	movdqu 0x20(%rsi),%xmm0
   27f4f:	66 0f d5 c3          	pmullw %xmm3,%xmm0
   27f53:	0f 11 40 20          	movups %xmm0,0x20(%rax)
   27f57:	f3 0f 6f 40 30       	movdqu 0x30(%rax),%xmm0
   27f5c:	f3 0f 6f 66 30       	movdqu 0x30(%rsi),%xmm4
   27f61:	66 0f d5 c4          	pmullw %xmm4,%xmm0
   27f65:	0f 11 40 30          	movups %xmm0,0x30(%rax)
   27f69:	f3 0f 6f 46 40       	movdqu 0x40(%rsi),%xmm0
   27f6e:	66 0f d5 c5          	pmullw %xmm5,%xmm0
   27f72:	0f 11 40 40          	movups %xmm0,0x40(%rax)
   27f76:	f3 0f 6f 46 50       	movdqu 0x50(%rsi),%xmm0
   27f7b:	66 0f d5 c6          	pmullw %xmm6,%xmm0
   27f7f:	0f 11 40 50          	movups %xmm0,0x50(%rax)
   27f83:	f3 0f 6f 46 60       	movdqu 0x60(%rsi),%xmm0
   27f88:	66 0f d5 c7          	pmullw %xmm7,%xmm0
   27f8c:	0f 11 40 60          	movups %xmm0,0x60(%rax)
   27f90:	f3 0f 6f 46 70       	movdqu 0x70(%rsi),%xmm0
   27f95:	66 0f d5 c1          	pmullw %xmm1,%xmm0
   27f99:	0f 11 40 70          	movups %xmm0,0x70(%rax)
               z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*j*8+i*8, z->img_comp[n].w2, data);
   27f9d:	41 8b 77 18          	mov    0x18(%r15),%esi
   27fa1:	48 89 ca             	mov    %rcx,%rdx
   27fa4:	89 f0                	mov    %esi,%eax
   27fa6:	0f af c5             	imul   %ebp,%eax
   27fa9:	c1 e0 03             	shl    $0x3,%eax
   27fac:	48 98                	cltq
   27fae:	4a 8d 3c e8          	lea    (%rax,%r13,8),%rdi
            for (i=0; i < w; ++i) {
   27fb2:	49 83 c5 01          	add    $0x1,%r13
               z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*j*8+i*8, z->img_comp[n].w2, data);
   27fb6:	49 03 7f 24          	add    0x24(%r15),%rdi
   27fba:	41 ff 96 70 48 00 00 	call   *0x4870(%r14)
            for (i=0; i < w; ++i) {
   27fc1:	49 39 dd             	cmp    %rbx,%r13
   27fc4:	74 70                	je     28036 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x726>
               short *data = z->img_comp[n].coeff + 64 * (i + j * z->img_comp[n].coeff_w);
   27fc6:	41 8b 57 4c          	mov    0x4c(%r15),%edx
   27fca:	49 63 3f             	movslq (%r15),%rdi
   27fcd:	49 8b 47 44          	mov    0x44(%r15),%rax
   27fd1:	0f af d5             	imul   %ebp,%edx
   27fd4:	48 83 c7 69          	add    $0x69,%rdi
   27fd8:	48 c1 e7 07          	shl    $0x7,%rdi
               stbi__jpeg_dequantize(data, z->dequant[z->img_comp[n].tq]);
   27fdc:	49 8d 74 3e 08       	lea    0x8(%r14,%rdi,1),%rsi
   27fe1:	49 8d 7c 3e 0a       	lea    0xa(%r14,%rdi,1),%rdi
               short *data = z->img_comp[n].coeff + 64 * (i + j * z->img_comp[n].coeff_w);
   27fe6:	42 8d 0c 2a          	lea    (%rdx,%r13,1),%ecx
   27fea:	48 63 d2             	movslq %edx,%rdx
   27fed:	c1 e1 06             	shl    $0x6,%ecx
   27ff0:	4c 01 ea             	add    %r13,%rdx
   27ff3:	48 c1 e2 07          	shl    $0x7,%rdx
   27ff7:	48 63 c9             	movslq %ecx,%rcx
   27ffa:	48 8d 0c 48          	lea    (%rax,%rcx,2),%rcx
   for (i=0; i < 64; ++i)
   27ffe:	48 01 d0             	add    %rdx,%rax
   28001:	48 89 c2             	mov    %rax,%rdx
   28004:	48 29 fa             	sub    %rdi,%rdx
   28007:	48 83 fa 0c          	cmp    $0xc,%rdx
   2800b:	0f 87 ff fe ff ff    	ja     27f10 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x600>
               stbi__jpeg_dequantize(data, z->dequant[z->img_comp[n].tq]);
   28011:	31 c0                	xor    %eax,%eax
   28013:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      data[i] *= dequant[i];
   28018:	0f b7 14 01          	movzwl (%rcx,%rax,1),%edx
   2801c:	66 0f af 14 06       	imul   (%rsi,%rax,1),%dx
   28021:	66 89 14 01          	mov    %dx,(%rcx,%rax,1)
   for (i=0; i < 64; ++i)
   28025:	48 83 c0 02          	add    $0x2,%rax
   28029:	48 3d 80 00 00 00    	cmp    $0x80,%rax
   2802f:	75 e7                	jne    28018 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x708>
   28031:	e9 67 ff ff ff       	jmp    27f9d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x68d>
         for (j=0; j < h; ++j) {
   28036:	83 c5 01             	add    $0x1,%ebp
   28039:	39 6c 24 08          	cmp    %ebp,0x8(%rsp)
   2803d:	0f 85 c5 fe ff ff    	jne    27f08 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x5f8>
   28043:	49 8b 16             	mov    (%r14),%rdx
      for (n=0; n < z->s->img_n; ++n) {
   28046:	8b 42 08             	mov    0x8(%rdx),%eax
   28049:	41 83 c4 01          	add    $0x1,%r12d
   2804d:	49 83 c7 60          	add    $0x60,%r15
   28051:	41 39 c4             	cmp    %eax,%r12d
   28054:	0f 8c 81 fe ff ff    	jl     27edb <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x5cb>
   2805a:	e9 fc fd ff ff       	jmp    27e5b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x54b>
   2805f:	45 31 e4             	xor    %r12d,%r12d
   28062:	e9 de 00 00 00       	jmp    28145 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x835>
      return *s->img_buffer++;
   28067:	48 8d 41 01          	lea    0x1(%rcx),%rax
   2806b:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      int id = stbi__get8(z->s), which;
   28072:	0f b6 29             	movzbl (%rcx),%ebp
   if (s->img_buffer < s->img_buffer_end)
   28075:	48 39 d0             	cmp    %rdx,%rax
   28078:	0f 83 58 01 00 00    	jae    281d6 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x8c6>
      return *s->img_buffer++;
   2807e:	48 8d 50 01          	lea    0x1(%rax),%rdx
   28082:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   28089:	0f b6 00             	movzbl (%rax),%eax
   2808c:	41 89 c5             	mov    %eax,%r13d
      for (which = 0; which < z->s->img_n; ++which)
   2808f:	8b 53 08             	mov    0x8(%rbx),%edx
   28092:	85 d2                	test   %edx,%edx
   28094:	0f 8e 9b 01 00 00    	jle    28235 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x925>
         if (z->img_comp[which].id == id)
   2809a:	41 3b ae a0 46 00 00 	cmp    0x46a0(%r14),%ebp
   280a1:	0f 84 e2 01 00 00    	je     28289 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x979>
      for (which = 0; which < z->s->img_n; ++which)
   280a7:	83 fa 01             	cmp    $0x1,%edx
   280aa:	0f 84 a9 f8 ff ff    	je     27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
         if (z->img_comp[which].id == id)
   280b0:	41 3b ae 00 47 00 00 	cmp    0x4700(%r14),%ebp
   280b7:	0f 84 c2 01 00 00    	je     2827f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x96f>
      for (which = 0; which < z->s->img_n; ++which)
   280bd:	83 fa 02             	cmp    $0x2,%edx
   280c0:	0f 84 93 f8 ff ff    	je     27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
         if (z->img_comp[which].id == id)
   280c6:	41 3b ae 60 47 00 00 	cmp    0x4760(%r14),%ebp
   280cd:	0f 84 a2 01 00 00    	je     28275 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x965>
      for (which = 0; which < z->s->img_n; ++which)
   280d3:	83 fa 03             	cmp    $0x3,%edx
   280d6:	0f 84 7d f8 ff ff    	je     27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
         if (z->img_comp[which].id == id)
   280dc:	41 39 ae c0 47 00 00 	cmp    %ebp,0x47c0(%r14)
   280e3:	0f 84 82 01 00 00    	je     2826b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x95b>
      for (which = 0; which < z->s->img_n; ++which)
   280e9:	b9 04 00 00 00       	mov    $0x4,%ecx
      if (which == z->s->img_n) return 0; // no match
   280ee:	39 ca                	cmp    %ecx,%edx
   280f0:	0f 84 63 f8 ff ff    	je     27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
      z->img_comp[which].hd = q >> 4;   if (z->img_comp[which].hd > 3) return stbi__err("bad DC huff","Corrupt JPEG");
   280f6:	48 63 d1             	movslq %ecx,%rdx
   280f9:	c1 f8 04             	sar    $0x4,%eax
   280fc:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
   28100:	48 c1 e2 05          	shl    $0x5,%rdx
   28104:	4c 01 f2             	add    %r14,%rdx
   28107:	89 82 b0 46 00 00    	mov    %eax,0x46b0(%rdx)
   2810d:	83 f8 03             	cmp    $0x3,%eax
   28110:	0f 8f 33 02 00 00    	jg     28349 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xa39>
      z->img_comp[which].ha = q & 15;   if (z->img_comp[which].ha > 3) return stbi__err("bad AC huff","Corrupt JPEG");
   28116:	44 89 e8             	mov    %r13d,%eax
   28119:	83 e0 0f             	and    $0xf,%eax
   2811c:	41 83 e5 0c          	and    $0xc,%r13d
   28120:	89 82 b4 46 00 00    	mov    %eax,0x46b4(%rdx)
   28126:	0f 85 08 02 00 00    	jne    28334 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xa24>
      z->order[i] = which;
   2812c:	43 89 8c a6 58 48 00 	mov    %ecx,0x4858(%r14,%r12,4)
   28133:	00 
   for (i=0; i < z->scan_n; ++i) {
   28134:	49 83 c4 01          	add    $0x1,%r12
   28138:	45 39 a6 54 48 00 00 	cmp    %r12d,0x4854(%r14)
   2813f:	0f 8e 4b 01 00 00    	jle    28290 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x980>
   if (s->img_buffer < s->img_buffer_end)
   28145:	48 8b 8b c0 00 00 00 	mov    0xc0(%rbx),%rcx
   2814c:	48 8b 93 c8 00 00 00 	mov    0xc8(%rbx),%rdx
   28153:	48 39 d1             	cmp    %rdx,%rcx
   28156:	0f 82 0b ff ff ff    	jb     28067 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x757>
   if (s->read_from_callbacks) {
   2815c:	8b 6b 30             	mov    0x30(%rbx),%ebp
   2815f:	31 c0                	xor    %eax,%eax
   return 0;
   28161:	45 31 ed             	xor    %r13d,%r13d
   if (s->read_from_callbacks) {
   28164:	85 ed                	test   %ebp,%ebp
   28166:	0f 84 23 ff ff ff    	je     2808f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x77f>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2816c:	4c 8d 6b 38          	lea    0x38(%rbx),%r13
   28170:	8b 53 34             	mov    0x34(%rbx),%edx
   28173:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   28177:	4c 89 ee             	mov    %r13,%rsi
   2817a:	ff 53 10             	call   *0x10(%rbx)
   2817d:	48 63 e8             	movslq %eax,%rbp
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   28180:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   28187:	48 2b 83 d0 00 00 00 	sub    0xd0(%rbx),%rax
   2818e:	01 83 b8 00 00 00    	add    %eax,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   28194:	48 8d 43 39          	lea    0x39(%rbx),%rax
   if (n == 0) {
   28198:	85 ed                	test   %ebp,%ebp
   2819a:	0f 85 9c 00 00 00    	jne    2823c <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x92c>
      s->read_from_callbacks = 0;
   281a0:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   281a7:	49 89 c5             	mov    %rax,%r13
      *s->img_buffer = 0;
   281aa:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   281ae:	4c 89 ab c8 00 00 00 	mov    %r13,0xc8(%rbx)
      return *s->img_buffer++;
   281b5:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
      int q = stbi__get8(z->s);
   281bc:	49 8b 1e             	mov    (%r14),%rbx
   if (s->img_buffer < s->img_buffer_end)
   281bf:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   281c6:	48 8b 93 c8 00 00 00 	mov    0xc8(%rbx),%rdx
   281cd:	48 39 d0             	cmp    %rdx,%rax
   281d0:	0f 82 a8 fe ff ff    	jb     2807e <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x76e>
   if (s->read_from_callbacks) {
   281d6:	8b 43 30             	mov    0x30(%rbx),%eax
   return 0;
   281d9:	45 31 ed             	xor    %r13d,%r13d
   if (s->read_from_callbacks) {
   281dc:	85 c0                	test   %eax,%eax
   281de:	0f 84 ab fe ff ff    	je     2808f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x77f>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   281e4:	4c 8d 7b 38          	lea    0x38(%rbx),%r15
   281e8:	8b 53 34             	mov    0x34(%rbx),%edx
   281eb:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   281ef:	4c 89 fe             	mov    %r15,%rsi
   281f2:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   281f5:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   281fc:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   28203:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   28209:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   2820d:	85 c0                	test   %eax,%eax
   2820f:	75 37                	jne    28248 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x938>
      s->read_from_callbacks = 0;
   28211:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   28218:	49 89 d7             	mov    %rdx,%r15
      *s->img_buffer = 0;
   2821b:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   2821f:	4c 89 bb c8 00 00 00 	mov    %r15,0xc8(%rbx)
      return *s->img_buffer++;
   28226:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
      for (which = 0; which < z->s->img_n; ++which)
   2822d:	49 8b 1e             	mov    (%r14),%rbx
   28230:	e9 5a fe ff ff       	jmp    2808f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x77f>
   28235:	31 c9                	xor    %ecx,%ecx
   28237:	e9 b2 fe ff ff       	jmp    280ee <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x7de>
      s->img_buffer_end = s->buffer_start + n;
   2823c:	49 01 ed             	add    %rbp,%r13
      int id = stbi__get8(z->s), which;
   2823f:	0f b6 6b 38          	movzbl 0x38(%rbx),%ebp
   28243:	e9 66 ff ff ff       	jmp    281ae <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x89e>
      s->img_buffer_end = s->buffer_start + n;
   28248:	48 98                	cltq
   2824a:	49 01 c7             	add    %rax,%r15
      return *s->img_buffer++;
   2824d:	0f b6 43 38          	movzbl 0x38(%rbx),%eax
   28251:	41 89 c5             	mov    %eax,%r13d
   28254:	eb c9                	jmp    2821f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x90f>
   stbi__g_failure_reason = str;
   28256:	48 8d 05 38 fc 00 00 	lea    0xfc38(%rip),%rax        # 37e95 <_ZSt19piecewise_construct+0x54e>
   2825d:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   28264:	ff ff 
         if (NL != j->s->img_y) return stbi__err("bad DNL height", "Corrupt JPEG");
   28266:	e9 ee f6 ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
      for (which = 0; which < z->s->img_n; ++which)
   2826b:	b9 03 00 00 00       	mov    $0x3,%ecx
   28270:	e9 81 fe ff ff       	jmp    280f6 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x7e6>
   28275:	b9 02 00 00 00       	mov    $0x2,%ecx
   2827a:	e9 77 fe ff ff       	jmp    280f6 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x7e6>
   2827f:	b9 01 00 00 00       	mov    $0x1,%ecx
   28284:	e9 6d fe ff ff       	jmp    280f6 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x7e6>
   28289:	31 c9                	xor    %ecx,%ecx
   2828b:	e9 66 fe ff ff       	jmp    280f6 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x7e6>
      z->spec_start = stbi__get8(z->s);
   28290:	48 89 df             	mov    %rbx,%rdi
   28293:	e8 08 38 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
      z->spec_end   = stbi__get8(z->s); // should be 63, but might be 0
   28298:	49 8b 3e             	mov    (%r14),%rdi
      z->spec_start = stbi__get8(z->s);
   2829b:	0f b6 c0             	movzbl %al,%eax
   2829e:	41 89 86 34 48 00 00 	mov    %eax,0x4834(%r14)
      z->spec_end   = stbi__get8(z->s); // should be 63, but might be 0
   282a5:	e8 f6 37 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
      aa = stbi__get8(z->s);
   282aa:	49 8b 3e             	mov    (%r14),%rdi
      z->spec_end   = stbi__get8(z->s); // should be 63, but might be 0
   282ad:	0f b6 c0             	movzbl %al,%eax
   282b0:	41 89 86 38 48 00 00 	mov    %eax,0x4838(%r14)
      aa = stbi__get8(z->s);
   282b7:	e8 e4 37 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
      if (z->progressive) {
   282bc:	45 8b 96 30 48 00 00 	mov    0x4830(%r14),%r10d
      aa = stbi__get8(z->s);
   282c3:	89 c2                	mov    %eax,%edx
   282c5:	0f b6 c0             	movzbl %al,%eax
      z->succ_high = (aa >> 4);
   282c8:	c1 f8 04             	sar    $0x4,%eax
   282cb:	89 d6                	mov    %edx,%esi
      z->succ_low  = (aa & 15);
   282cd:	83 e2 0f             	and    $0xf,%edx
      z->succ_high = (aa >> 4);
   282d0:	41 89 86 3c 48 00 00 	mov    %eax,0x483c(%r14)
   282d7:	89 c1                	mov    %eax,%ecx
   282d9:	83 e6 0f             	and    $0xf,%esi
      z->succ_low  = (aa & 15);
   282dc:	41 89 96 40 48 00 00 	mov    %edx,0x4840(%r14)
      if (z->progressive) {
   282e3:	45 85 d2             	test   %r10d,%r10d
   282e6:	74 76                	je     2835e <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xa4e>
         if (z->spec_start > 63 || z->spec_end > 63  || z->spec_start > z->spec_end || z->succ_high > 13 || z->succ_low > 13)
   282e8:	41 8b 86 34 48 00 00 	mov    0x4834(%r14),%eax
   282ef:	83 f8 3f             	cmp    $0x3f,%eax
   282f2:	7f 2b                	jg     2831f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xa0f>
   282f4:	41 8b be 38 48 00 00 	mov    0x4838(%r14),%edi
   282fb:	83 ff 3f             	cmp    $0x3f,%edi
   282fe:	0f 9f c2             	setg   %dl
   28301:	39 f8                	cmp    %edi,%eax
   28303:	40 0f 9f c7          	setg   %dil
   28307:	09 fa                	or     %edi,%edx
   28309:	40 80 fe 0d          	cmp    $0xd,%sil
   2830d:	40 0f 97 c6          	seta   %sil
   28311:	40 08 f2             	or     %sil,%dl
   28314:	75 09                	jne    2831f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xa0f>
   28316:	83 f9 0d             	cmp    $0xd,%ecx
   28319:	0f 8e b4 06 00 00    	jle    289d3 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x10c3>
   stbi__g_failure_reason = str;
   2831f:	48 8d 05 5b fb 00 00 	lea    0xfb5b(%rip),%rax        # 37e81 <_ZSt19piecewise_construct+0x53a>
   28326:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2832d:	ff ff 
   return 0;
   2832f:	e9 25 f6 ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
   stbi__g_failure_reason = str;
   28334:	48 8d 05 3a fb 00 00 	lea    0xfb3a(%rip),%rax        # 37e75 <_ZSt19piecewise_construct+0x52e>
   2833b:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   28342:	ff ff 
   return 0;
   28344:	e9 10 f6 ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
   stbi__g_failure_reason = str;
   28349:	48 8d 05 19 fb 00 00 	lea    0xfb19(%rip),%rax        # 37e69 <_ZSt19piecewise_construct+0x522>
   28350:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   28357:	ff ff 
   return 0;
   28359:	e9 fb f5 ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
         if (z->spec_start != 0) return stbi__err("bad SOS","Corrupt JPEG");
   2835e:	41 0b 8e 34 48 00 00 	or     0x4834(%r14),%ecx
   28365:	41 89 cd             	mov    %ecx,%r13d
   28368:	75 b5                	jne    2831f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xa0f>
         if (z->succ_high != 0 || z->succ_low != 0) return stbi__err("bad SOS","Corrupt JPEG");
   2836a:	40 84 f6             	test   %sil,%sil
   2836d:	75 b0                	jne    2831f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xa0f>
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   2836f:	41 8b 96 68 48 00 00 	mov    0x4868(%r14),%edx
   28376:	b9 ff ff ff 7f       	mov    $0x7fffffff,%ecx
         z->spec_end = 63;
   2837b:	41 c7 86 38 48 00 00 	movl   $0x3f,0x4838(%r14)
   28382:	3f 00 00 00 
   j->nomore = 0;
   28386:	41 c7 86 2c 48 00 00 	movl   $0x0,0x482c(%r14)
   2838d:	00 00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28391:	85 d2                	test   %edx,%edx
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   28393:	41 c7 86 d8 47 00 00 	movl   $0x0,0x47d8(%r14)
   2839a:	00 00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   2839e:	0f 44 d1             	cmove  %ecx,%edx
      if (z->scan_n == 1) {
   283a1:	41 83 be 54 48 00 00 	cmpl   $0x1,0x4854(%r14)
   283a8:	01 
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   283a9:	41 c7 86 78 47 00 00 	movl   $0x0,0x4778(%r14)
   283b0:	00 00 00 00 
   283b4:	41 c7 86 18 47 00 00 	movl   $0x0,0x4718(%r14)
   283bb:	00 00 00 00 
   283bf:	41 c7 86 b8 46 00 00 	movl   $0x0,0x46b8(%r14)
   283c6:	00 00 00 00 
   j->code_buffer = 0;
   283ca:	49 c7 86 20 48 00 00 	movq   $0x0,0x4820(%r14)
   283d1:	00 00 00 00 
   j->marker = STBI__MARKER_none;
   283d5:	41 c6 86 28 48 00 00 	movb   $0xff,0x4828(%r14)
   283dc:	ff 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   283dd:	41 89 96 6c 48 00 00 	mov    %edx,0x486c(%r14)
   j->eob_run = 0;
   283e4:	41 c7 86 44 48 00 00 	movl   $0x0,0x4844(%r14)
   283eb:	00 00 00 00 
      if (z->scan_n == 1) {
   283ef:	0f 84 fa 02 00 00    	je     286ef <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xddf>
         for (j=0; j < z->img_mcu_y; ++j) {
   283f5:	41 8b 96 94 46 00 00 	mov    0x4694(%r14),%edx
   283fc:	85 d2                	test   %edx,%edx
   283fe:	0f 8e 20 05 00 00    	jle    28924 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1014>
   28404:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
   2840b:	00 
            for (i=0; i < z->img_mcu_x; ++i) {
   2840c:	41 8b 86 90 46 00 00 	mov    0x4690(%r14),%eax
   28413:	4d 89 f7             	mov    %r14,%r15
   28416:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
   2841d:	00 
   2841e:	4d 89 fe             	mov    %r15,%r14
   28421:	85 c0                	test   %eax,%eax
   28423:	0f 8e c6 01 00 00    	jle    285ef <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcdf>
               for (k=0; k < z->scan_n; ++k) {
   28429:	41 8b 86 54 48 00 00 	mov    0x4854(%r14),%eax
   28430:	45 31 e4             	xor    %r12d,%r12d
   28433:	4d 89 e5             	mov    %r12,%r13
   28436:	4d 89 f4             	mov    %r14,%r12
   28439:	85 c0                	test   %eax,%eax
   2843b:	0f 8e 73 01 00 00    	jle    285b4 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xca4>
                  int n = z->order[k];
   28441:	4b 63 94 ac 58 48 00 	movslq 0x4858(%r12,%r13,4),%rdx
   28448:	00 
                  for (y=0; y < z->img_comp[n].v; ++y) {
   28449:	48 8d 1c 52          	lea    (%rdx,%rdx,2),%rbx
                  int n = z->order[k];
   2844d:	89 54 24 28          	mov    %edx,0x28(%rsp)
                  for (y=0; y < z->img_comp[n].v; ++y) {
   28451:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
   28456:	48 c1 e3 05          	shl    $0x5,%rbx
   2845a:	4d 8d 34 1c          	lea    (%r12,%rbx,1),%r14
   2845e:	41 8b 9e a8 46 00 00 	mov    0x46a8(%r14),%ebx
   28465:	85 db                	test   %ebx,%ebx
   28467:	0f 8e 37 01 00 00    	jle    285a4 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xc94>
   2846d:	4c 89 6c 24 38       	mov    %r13,0x38(%rsp)
                     for (x=0; x < z->img_comp[n].h; ++x) {
   28472:	41 8b ae a4 46 00 00 	mov    0x46a4(%r14),%ebp
                  for (y=0; y < z->img_comp[n].v; ++y) {
   28479:	45 31 c0             	xor    %r8d,%r8d
                     for (x=0; x < z->img_comp[n].h; ++x) {
   2847c:	85 ed                	test   %ebp,%ebp
   2847e:	0f 8e 13 01 00 00    	jle    28597 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xc87>
                        if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
   28484:	49 8d 44 24 08       	lea    0x8(%r12),%rax
   28489:	44 89 44 24 18       	mov    %r8d,0x18(%rsp)
                     for (x=0; x < z->img_comp[n].h; ++x) {
   2848e:	45 31 ed             	xor    %r13d,%r13d
   28491:	4c 8d 7c 24 70       	lea    0x70(%rsp),%r15
                        if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
   28496:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   2849b:	eb 4a                	jmp    284e7 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xbd7>
   2849d:	0f 1f 00             	nopl   (%rax)
                        z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data);
   284a0:	41 8b b6 c4 46 00 00 	mov    0x46c4(%r14),%esi
   284a7:	48 63 ed             	movslq %ebp,%rbp
   284aa:	4c 89 fa             	mov    %r15,%rdx
                     for (x=0; x < z->img_comp[n].h; ++x) {
   284ad:	41 83 c5 01          	add    $0x1,%r13d
                        z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data);
   284b1:	0f af de             	imul   %esi,%ebx
   284b4:	8d 3c dd 00 00 00 00 	lea    0x0(,%rbx,8),%edi
   284bb:	48 63 ff             	movslq %edi,%rdi
   284be:	48 01 ef             	add    %rbp,%rdi
   284c1:	49 03 be d0 46 00 00 	add    0x46d0(%r14),%rdi
   284c8:	41 ff 94 24 70 48 00 	call   *0x4870(%r12)
   284cf:	00 
                     for (x=0; x < z->img_comp[n].h; ++x) {
   284d0:	41 8b ae a4 46 00 00 	mov    0x46a4(%r14),%ebp
   284d7:	44 39 ed             	cmp    %r13d,%ebp
   284da:	0f 8e 94 00 00 00    	jle    28574 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xc64>
                  for (y=0; y < z->img_comp[n].v; ++y) {
   284e0:	41 8b 9e a8 46 00 00 	mov    0x46a8(%r14),%ebx
                        int x2 = (i*z->img_comp[n].h + x)*8;
   284e7:	8b 44 24 08          	mov    0x8(%rsp),%eax
                        if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
   284eb:	49 63 96 b0 46 00 00 	movslq 0x46b0(%r14),%rdx
   284f2:	48 83 ec 08          	sub    $0x8,%rsp
   284f6:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                        int x2 = (i*z->img_comp[n].h + x)*8;
   284fb:	0f af e8             	imul   %eax,%ebp
                        int y2 = (j*z->img_comp[n].v + y)*8;
   284fe:	8b 44 24 18          	mov    0x18(%rsp),%eax
                        if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
   28502:	48 69 d2 90 06 00 00 	imul   $0x690,%rdx,%rdx
                        int y2 = (j*z->img_comp[n].v + y)*8;
   28509:	0f af d8             	imul   %eax,%ebx
   2850c:	8b 44 24 20          	mov    0x20(%rsp),%eax
                        int x2 = (i*z->img_comp[n].h + x)*8;
   28510:	44 01 ed             	add    %r13d,%ebp
   28513:	c1 e5 03             	shl    $0x3,%ebp
                        int y2 = (j*z->img_comp[n].v + y)*8;
   28516:	01 c3                	add    %eax,%ebx
                        if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
   28518:	49 63 86 b4 46 00 00 	movslq 0x46b4(%r14),%rax
   2851f:	48 89 c6             	mov    %rax,%rsi
   28522:	48 69 c0 90 06 00 00 	imul   $0x690,%rax,%rax
   28529:	48 c1 e6 0a          	shl    $0xa,%rsi
   2852d:	4d 8d 84 34 88 36 00 	lea    0x3688(%r12,%rsi,1),%r8
   28534:	00 
   28535:	4c 89 fe             	mov    %r15,%rsi
   28538:	48 8d 0c 07          	lea    (%rdi,%rax,1),%rcx
   2853c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
   28541:	4c 89 e7             	mov    %r12,%rdi
   28544:	48 01 c2             	add    %rax,%rdx
   28547:	49 63 86 ac 46 00 00 	movslq 0x46ac(%r14),%rax
   2854e:	48 c1 e0 07          	shl    $0x7,%rax
   28552:	49 8d 84 04 88 34 00 	lea    0x3488(%r12,%rax,1),%rax
   28559:	00 
   2855a:	50                   	push   %rax
   2855b:	44 8b 4c 24 38       	mov    0x38(%rsp),%r9d
   28560:	e8 ab 78 ff ff       	call   1fe10 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt>
   28565:	5e                   	pop    %rsi
   28566:	5f                   	pop    %rdi
   28567:	85 c0                	test   %eax,%eax
   28569:	0f 85 31 ff ff ff    	jne    284a0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xb90>
   2856f:	e9 e5 f3 ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
                  for (y=0; y < z->img_comp[n].v; ++y) {
   28574:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
   28579:	44 8b 44 24 18       	mov    0x18(%rsp),%r8d
   2857e:	48 c1 e0 05          	shl    $0x5,%rax
   28582:	41 83 c0 01          	add    $0x1,%r8d
   28586:	41 8b 9c 04 a8 46 00 	mov    0x46a8(%r12,%rax,1),%ebx
   2858d:	00 
   2858e:	41 39 d8             	cmp    %ebx,%r8d
   28591:	0f 8c e5 fe ff ff    	jl     2847c <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xb6c>
   28597:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
               for (k=0; k < z->scan_n; ++k) {
   2859c:	41 8b 84 24 54 48 00 	mov    0x4854(%r12),%eax
   285a3:	00 
   285a4:	49 83 c5 01          	add    $0x1,%r13
   285a8:	44 39 e8             	cmp    %r13d,%eax
   285ab:	0f 8f 90 fe ff ff    	jg     28441 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xb31>
   285b1:	4d 89 e6             	mov    %r12,%r14
               if (--z->todo <= 0) {
   285b4:	41 8b 86 6c 48 00 00 	mov    0x486c(%r14),%eax
   285bb:	83 e8 01             	sub    $0x1,%eax
   285be:	41 89 86 6c 48 00 00 	mov    %eax,0x486c(%r14)
   285c5:	85 c0                	test   %eax,%eax
   285c7:	0f 8e 61 03 00 00    	jle    2892e <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x101e>
            for (i=0; i < z->img_mcu_x; ++i) {
   285cd:	83 44 24 08 01       	addl   $0x1,0x8(%rsp)
   285d2:	41 8b 86 90 46 00 00 	mov    0x4690(%r14),%eax
   285d9:	8b 5c 24 08          	mov    0x8(%rsp),%ebx
   285dd:	39 c3                	cmp    %eax,%ebx
   285df:	0f 8c 44 fe ff ff    	jl     28429 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xb19>
         for (j=0; j < z->img_mcu_y; ++j) {
   285e5:	41 8b 96 94 46 00 00 	mov    0x4694(%r14),%edx
   285ec:	4d 89 f7             	mov    %r14,%r15
   285ef:	83 44 24 10 01       	addl   $0x1,0x10(%rsp)
   285f4:	8b 5c 24 10          	mov    0x10(%rsp),%ebx
   285f8:	39 d3                	cmp    %edx,%ebx
   285fa:	0f 8c 16 fe ff ff    	jl     28416 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xb06>
   28600:	4d 89 fe             	mov    %r15,%r14
   28603:	41 0f b6 b6 28 48 00 	movzbl 0x4828(%r14),%esi
   2860a:	00 
         if (j->marker == STBI__MARKER_none ) {
   2860b:	40 80 fe ff          	cmp    $0xff,%sil
   2860f:	0f 85 7b f3 ff ff    	jne    27990 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x80>
            while (!stbi__at_eof(j->s)) {
   28615:	49 8b 1e             	mov    (%r14),%rbx
   if (s->io.read) {
   28618:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   2861d:	74 18                	je     28637 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xd27>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   2861f:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   28623:	ff 53 20             	call   *0x20(%rbx)
   28626:	85 c0                	test   %eax,%eax
   28628:	74 21                	je     2864b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xd3b>
      if (s->read_from_callbacks == 0) return 1;
   2862a:	44 8b 53 30          	mov    0x30(%rbx),%r10d
   2862e:	45 85 d2             	test   %r10d,%r10d
   28631:	0f 84 26 f4 ff ff    	je     27a5d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x14d>
            while (!stbi__at_eof(j->s)) {
   28637:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   2863e:	48 39 83 c0 00 00 00 	cmp    %rax,0xc0(%rbx)
   28645:	0f 83 12 f4 ff ff    	jae    27a5d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x14d>
               int x = stbi__get8(j->s);
   2864b:	49 8b 1e             	mov    (%r14),%rbx
   if (s->img_buffer < s->img_buffer_end)
   2864e:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   28655:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   2865c:	73 32                	jae    28690 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xd80>
      return *s->img_buffer++;
   2865e:	48 8d 50 01          	lea    0x1(%rax),%rdx
   28662:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   28669:	0f b6 08             	movzbl (%rax),%ecx
               if (x == 255) {
   2866c:	80 f9 ff             	cmp    $0xff,%cl
   2866f:	75 a7                	jne    28618 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xd08>
                  j->marker = stbi__get8(j->s);
   28671:	48 89 df             	mov    %rbx,%rdi
   28674:	e8 27 34 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   28679:	0f b6 f0             	movzbl %al,%esi
   2867c:	41 88 b6 28 48 00 00 	mov    %sil,0x4828(%r14)
                  break;
   28683:	e9 dd f3 ff ff       	jmp    27a65 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x155>
   28688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2868f:	00 
   if (s->read_from_callbacks) {
   28690:	44 8b 5b 30          	mov    0x30(%rbx),%r11d
   28694:	45 85 db             	test   %r11d,%r11d
   28697:	0f 84 7b ff ff ff    	je     28618 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xd08>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2869d:	48 8d 6b 38          	lea    0x38(%rbx),%rbp
   286a1:	8b 53 34             	mov    0x34(%rbx),%edx
   286a4:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   286a8:	48 89 ee             	mov    %rbp,%rsi
   286ab:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   286ae:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
   286b5:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   286bc:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
      s->img_buffer_end = s->buffer_start+1;
   286c2:	48 8d 53 39          	lea    0x39(%rbx),%rdx
   if (n == 0) {
   286c6:	85 c0                	test   %eax,%eax
   286c8:	0f 85 37 02 00 00    	jne    28905 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xff5>
      s->read_from_callbacks = 0;
   286ce:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   286d5:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   286d9:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
      return *s->img_buffer++;
   286e0:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
                  j->marker = stbi__get8(j->s);
   286e7:	49 8b 1e             	mov    (%r14),%rbx
               if (x == 255) {
   286ea:	e9 29 ff ff ff       	jmp    28618 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xd08>
         int n = z->order[0];
   286ef:	49 63 b6 58 48 00 00 	movslq 0x4858(%r14),%rsi
         int w = (z->img_comp[n].x+7) >> 3;
   286f6:	48 8d 14 76          	lea    (%rsi,%rsi,2),%rdx
         int n = z->order[0];
   286fa:	89 74 24 08          	mov    %esi,0x8(%rsp)
         int w = (z->img_comp[n].x+7) >> 3;
   286fe:	48 c1 e2 05          	shl    $0x5,%rdx
   28702:	4c 01 f2             	add    %r14,%rdx
   28705:	8b 82 bc 46 00 00    	mov    0x46bc(%rdx),%eax
         int h = (z->img_comp[n].y+7) >> 3;
   2870b:	8b 92 c0 46 00 00    	mov    0x46c0(%rdx),%edx
   28711:	83 c2 07             	add    $0x7,%edx
         int w = (z->img_comp[n].x+7) >> 3;
   28714:	8d 48 07             	lea    0x7(%rax),%ecx
         int h = (z->img_comp[n].y+7) >> 3;
   28717:	c1 fa 03             	sar    $0x3,%edx
         int w = (z->img_comp[n].x+7) >> 3;
   2871a:	c1 f9 03             	sar    $0x3,%ecx
         for (j=0; j < h; ++j) {
   2871d:	85 d2                	test   %edx,%edx
   2871f:	0f 8e ff 01 00 00    	jle    28924 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1014>
   28725:	48 63 f9             	movslq %ecx,%rdi
   28728:	48 8d 04 fd 00 00 00 	lea    0x0(,%rdi,8),%rax
   2872f:	00 
   28730:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            for (i=0; i < w; ++i) {
   28735:	85 c9                	test   %ecx,%ecx
   28737:	0f 8e 84 02 00 00    	jle    289c1 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x10b1>
               int ha = z->img_comp[n].ha;
   2873d:	4c 8d 14 76          	lea    (%rsi,%rsi,2),%r10
   28741:	4d 8d be 48 1a 00 00 	lea    0x1a48(%r14),%r15
   28748:	49 8d 46 08          	lea    0x8(%r14),%rax
   2874c:	48 8d 6c 24 70       	lea    0x70(%rsp),%rbp
   28751:	49 c1 e2 05          	shl    $0x5,%r10
   28755:	4c 89 fb             	mov    %r15,%rbx
   28758:	4f 8d 24 16          	lea    (%r14,%r10,1),%r12
   2875c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   28761:	48 89 e8             	mov    %rbp,%rax
   28764:	44 89 ed             	mov    %r13d,%ebp
   28767:	4d 89 e7             	mov    %r12,%r15
   2876a:	49 89 c5             	mov    %rax,%r13
   2876d:	49 89 dc             	mov    %rbx,%r12
                        if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
   28770:	4c 89 e0             	mov    %r12,%rax
   28773:	89 54 24 20          	mov    %edx,0x20(%rsp)
   28777:	41 89 ec             	mov    %ebp,%r12d
   2877a:	31 db                	xor    %ebx,%ebx
   2877c:	4c 89 f5             	mov    %r14,%rbp
   2877f:	49 89 c6             	mov    %rax,%r14
   28782:	eb 0f                	jmp    28793 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xe83>
            for (i=0; i < w; ++i) {
   28784:	48 83 c3 08          	add    $0x8,%rbx
   28788:	48 39 5c 24 10       	cmp    %rbx,0x10(%rsp)
   2878d:	0f 84 3a 01 00 00    	je     288cd <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xfbd>
               if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
   28793:	49 63 87 b4 46 00 00 	movslq 0x46b4(%r15),%rax
   2879a:	49 63 97 b0 46 00 00 	movslq 0x46b0(%r15),%rdx
   287a1:	48 83 ec 08          	sub    $0x8,%rsp
   287a5:	48 89 ef             	mov    %rbp,%rdi
   287a8:	48 89 c6             	mov    %rax,%rsi
   287ab:	48 69 c0 90 06 00 00 	imul   $0x690,%rax,%rax
   287b2:	48 69 d2 90 06 00 00 	imul   $0x690,%rdx,%rdx
   287b9:	48 c1 e6 0a          	shl    $0xa,%rsi
   287bd:	4c 8d 84 35 88 36 00 	lea    0x3688(%rbp,%rsi,1),%r8
   287c4:	00 
   287c5:	4c 89 ee             	mov    %r13,%rsi
   287c8:	49 8d 0c 06          	lea    (%r14,%rax,1),%rcx
   287cc:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   287d1:	48 01 c2             	add    %rax,%rdx
   287d4:	49 63 87 ac 46 00 00 	movslq 0x46ac(%r15),%rax
   287db:	48 c1 e0 07          	shl    $0x7,%rax
   287df:	48 8d 84 05 88 34 00 	lea    0x3488(%rbp,%rax,1),%rax
   287e6:	00 
   287e7:	50                   	push   %rax
   287e8:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
   287ed:	e8 1e 76 ff ff       	call   1fe10 <_ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt>
   287f2:	41 58                	pop    %r8
   287f4:	41 59                	pop    %r9
   287f6:	85 c0                	test   %eax,%eax
   287f8:	0f 84 5b f1 ff ff    	je     27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
               z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*j*8+i*8, z->img_comp[n].w2, data);
   287fe:	41 8b b7 c4 46 00 00 	mov    0x46c4(%r15),%esi
   28805:	4c 89 ea             	mov    %r13,%rdx
   28808:	89 f7                	mov    %esi,%edi
   2880a:	41 0f af fc          	imul   %r12d,%edi
   2880e:	c1 e7 03             	shl    $0x3,%edi
   28811:	48 63 ff             	movslq %edi,%rdi
   28814:	48 01 df             	add    %rbx,%rdi
   28817:	49 03 bf d0 46 00 00 	add    0x46d0(%r15),%rdi
   2881e:	ff 95 70 48 00 00    	call   *0x4870(%rbp)
               if (--z->todo <= 0) {
   28824:	8b 85 6c 48 00 00    	mov    0x486c(%rbp),%eax
   2882a:	83 e8 01             	sub    $0x1,%eax
   2882d:	89 85 6c 48 00 00    	mov    %eax,0x486c(%rbp)
   28833:	85 c0                	test   %eax,%eax
   28835:	0f 8f 49 ff ff ff    	jg     28784 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xe74>
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
   2883b:	83 bd 24 48 00 00 17 	cmpl   $0x17,0x4824(%rbp)
   28842:	0f 8e a8 00 00 00    	jle    288f0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xfe0>
                  if (!STBI__RESTART(z->marker)) return 1;
   28848:	0f b6 b5 28 48 00 00 	movzbl 0x4828(%rbp),%esi
   2884f:	8d 46 30             	lea    0x30(%rsi),%eax
   28852:	3c 07                	cmp    $0x7,%al
   28854:	0f 87 a3 00 00 00    	ja     288fd <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xfed>
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   2885a:	8b 85 68 48 00 00    	mov    0x4868(%rbp),%eax
   28860:	bf ff ff ff 7f       	mov    $0x7fffffff,%edi
   j->nomore = 0;
   28865:	c7 85 2c 48 00 00 00 	movl   $0x0,0x482c(%rbp)
   2886c:	00 00 00 
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   2886f:	c7 85 d8 47 00 00 00 	movl   $0x0,0x47d8(%rbp)
   28876:	00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28879:	85 c0                	test   %eax,%eax
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   2887b:	c7 85 78 47 00 00 00 	movl   $0x0,0x4778(%rbp)
   28882:	00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28885:	0f 44 c7             	cmove  %edi,%eax
            for (i=0; i < w; ++i) {
   28888:	48 83 c3 08          	add    $0x8,%rbx
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   2888c:	c7 85 18 47 00 00 00 	movl   $0x0,0x4718(%rbp)
   28893:	00 00 00 
   28896:	c7 85 b8 46 00 00 00 	movl   $0x0,0x46b8(%rbp)
   2889d:	00 00 00 
   j->code_buffer = 0;
   288a0:	48 c7 85 20 48 00 00 	movq   $0x0,0x4820(%rbp)
   288a7:	00 00 00 00 
   j->marker = STBI__MARKER_none;
   288ab:	c6 85 28 48 00 00 ff 	movb   $0xff,0x4828(%rbp)
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   288b2:	89 85 6c 48 00 00    	mov    %eax,0x486c(%rbp)
   j->eob_run = 0;
   288b8:	c7 85 44 48 00 00 00 	movl   $0x0,0x4844(%rbp)
   288bf:	00 00 00 
            for (i=0; i < w; ++i) {
   288c2:	48 39 5c 24 10       	cmp    %rbx,0x10(%rsp)
   288c7:	0f 85 c6 fe ff ff    	jne    28793 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xe83>
         for (j=0; j < h; ++j) {
   288cd:	4c 89 f0             	mov    %r14,%rax
   288d0:	8b 54 24 20          	mov    0x20(%rsp),%edx
   288d4:	49 89 ee             	mov    %rbp,%r14
   288d7:	44 89 e5             	mov    %r12d,%ebp
   288da:	83 c5 01             	add    $0x1,%ebp
   288dd:	49 89 c4             	mov    %rax,%r12
   288e0:	39 ea                	cmp    %ebp,%edx
   288e2:	0f 85 88 fe ff ff    	jne    28770 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xe60>
   288e8:	e9 16 fd ff ff       	jmp    28603 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcf3>
   288ed:	0f 1f 00             	nopl   (%rax)
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
   288f0:	48 89 ef             	mov    %rbp,%rdi
   288f3:	e8 e8 6f ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   288f8:	e9 4b ff ff ff       	jmp    28848 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xf38>
   288fd:	49 89 ee             	mov    %rbp,%r14
   28900:	e9 06 fd ff ff       	jmp    2860b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcfb>
      s->img_buffer_end = s->buffer_start + n;
   28905:	48 98                	cltq
      return *s->img_buffer++;
   28907:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   2890e:	0f b6 4b 38          	movzbl 0x38(%rbx),%ecx
      s->img_buffer_end = s->buffer_start + n;
   28912:	48 01 c5             	add    %rax,%rbp
   28915:	48 89 ab c8 00 00 00 	mov    %rbp,0xc8(%rbx)
                  j->marker = stbi__get8(j->s);
   2891c:	49 8b 1e             	mov    (%r14),%rbx
   2891f:	e9 48 fd ff ff       	jmp    2866c <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xd5c>
   28924:	be ff 00 00 00       	mov    $0xff,%esi
   28929:	e9 dd fc ff ff       	jmp    2860b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcfb>
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
   2892e:	41 83 be 24 48 00 00 	cmpl   $0x17,0x4824(%r14)
   28935:	17 
   28936:	0f 8e 5f 0d 00 00    	jle    2969b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1d8b>
                  if (!STBI__RESTART(z->marker)) return 1;
   2893c:	41 0f b6 b6 28 48 00 	movzbl 0x4828(%r14),%esi
   28943:	00 
   28944:	8d 46 30             	lea    0x30(%rsi),%eax
   28947:	3c 07                	cmp    $0x7,%al
   28949:	0f 87 bc fc ff ff    	ja     2860b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcfb>
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   2894f:	41 8b 86 68 48 00 00 	mov    0x4868(%r14),%eax
   28956:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   j->nomore = 0;
   2895b:	41 c7 86 2c 48 00 00 	movl   $0x0,0x482c(%r14)
   28962:	00 00 00 00 
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   28966:	41 c7 86 d8 47 00 00 	movl   $0x0,0x47d8(%r14)
   2896d:	00 00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28971:	85 c0                	test   %eax,%eax
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   28973:	41 c7 86 78 47 00 00 	movl   $0x0,0x4778(%r14)
   2897a:	00 00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   2897e:	0f 44 c2             	cmove  %edx,%eax
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   28981:	41 c7 86 18 47 00 00 	movl   $0x0,0x4718(%r14)
   28988:	00 00 00 00 
   2898c:	41 c7 86 b8 46 00 00 	movl   $0x0,0x46b8(%r14)
   28993:	00 00 00 00 
   j->code_buffer = 0;
   28997:	49 c7 86 20 48 00 00 	movq   $0x0,0x4820(%r14)
   2899e:	00 00 00 00 
   j->marker = STBI__MARKER_none;
   289a2:	41 c6 86 28 48 00 00 	movb   $0xff,0x4828(%r14)
   289a9:	ff 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   289aa:	41 89 86 6c 48 00 00 	mov    %eax,0x486c(%r14)
   j->eob_run = 0;
   289b1:	41 c7 86 44 48 00 00 	movl   $0x0,0x4844(%r14)
   289b8:	00 00 00 00 
}
   289bc:	e9 0c fc ff ff       	jmp    285cd <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcbd>
         for (j=0; j < h; ++j) {
   289c1:	41 83 c5 01          	add    $0x1,%r13d
   289c5:	44 39 ea             	cmp    %r13d,%edx
   289c8:	0f 85 67 fd ff ff    	jne    28735 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xe25>
   289ce:	e9 30 fc ff ff       	jmp    28603 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcf3>
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   289d3:	31 d2                	xor    %edx,%edx
   j->code_buffer = 0;
   289d5:	31 c9                	xor    %ecx,%ecx
   j->marker = STBI__MARKER_none;
   289d7:	41 c6 86 28 48 00 00 	movb   $0xff,0x4828(%r14)
   289de:	ff 
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   289df:	41 89 96 2c 48 00 00 	mov    %edx,0x482c(%r14)
   289e6:	41 89 96 d8 47 00 00 	mov    %edx,0x47d8(%r14)
   289ed:	41 89 96 78 47 00 00 	mov    %edx,0x4778(%r14)
   289f4:	41 89 96 18 47 00 00 	mov    %edx,0x4718(%r14)
   289fb:	41 89 96 b8 46 00 00 	mov    %edx,0x46b8(%r14)
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28a02:	41 8b 96 68 48 00 00 	mov    0x4868(%r14),%edx
   j->code_buffer = 0;
   28a09:	49 89 8e 20 48 00 00 	mov    %rcx,0x4820(%r14)
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28a10:	85 d2                	test   %edx,%edx
   28a12:	75 05                	jne    28a19 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1109>
   28a14:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
      if (z->scan_n == 1) {
   28a19:	41 83 be 54 48 00 00 	cmpl   $0x1,0x4854(%r14)
   28a20:	01 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28a21:	41 89 96 6c 48 00 00 	mov    %edx,0x486c(%r14)
   j->eob_run = 0;
   28a28:	41 c7 86 44 48 00 00 	movl   $0x0,0x4844(%r14)
   28a2f:	00 00 00 00 
      if (z->scan_n == 1) {
   28a33:	0f 84 4f 01 00 00    	je     28b88 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1278>
         for (j=0; j < z->img_mcu_y; ++j) {
   28a39:	41 8b 96 94 46 00 00 	mov    0x4694(%r14),%edx
   28a40:	85 d2                	test   %edx,%edx
   28a42:	0f 8e bb fb ff ff    	jle    28603 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcf3>
            for (i=0; i < z->img_mcu_x; ++i) {
   28a48:	41 8b 86 90 46 00 00 	mov    0x4690(%r14),%eax
         for (j=0; j < z->img_mcu_y; ++j) {
   28a4f:	31 db                	xor    %ebx,%ebx
   28a51:	4d 89 f7             	mov    %r14,%r15
            for (i=0; i < z->img_mcu_x; ++i) {
   28a54:	31 ed                	xor    %ebp,%ebp
   28a56:	85 c0                	test   %eax,%eax
   28a58:	0f 8e 14 01 00 00    	jle    28b72 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1262>
               for (k=0; k < z->scan_n; ++k) {
   28a5e:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
   28a65:	00 00 
   28a67:	41 8b 97 54 48 00 00 	mov    0x4854(%r15),%edx
   28a6e:	85 d2                	test   %edx,%edx
   28a70:	0f 8e ca 00 00 00    	jle    28b40 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1230>
                  int n = z->order[k];
   28a76:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   28a7b:	49 63 84 87 58 48 00 	movslq 0x4858(%r15,%rax,4),%rax
   28a82:	00 
                  for (y=0; y < z->img_comp[n].v; ++y) {
   28a83:	4c 8d 34 40          	lea    (%rax,%rax,2),%r14
                  int n = z->order[k];
   28a87:	89 44 24 08          	mov    %eax,0x8(%rsp)
                  for (y=0; y < z->img_comp[n].v; ++y) {
   28a8b:	49 c1 e6 05          	shl    $0x5,%r14
   28a8f:	4d 01 fe             	add    %r15,%r14
   28a92:	41 8b 86 a8 46 00 00 	mov    0x46a8(%r14),%eax
   28a99:	85 c0                	test   %eax,%eax
   28a9b:	0f 8e 8c 00 00 00    	jle    28b2d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x121d>
                     for (x=0; x < z->img_comp[n].h; ++x) {
   28aa1:	41 8b 8e a4 46 00 00 	mov    0x46a4(%r14),%ecx
                  for (y=0; y < z->img_comp[n].v; ++y) {
   28aa8:	45 31 e4             	xor    %r12d,%r12d
                     for (x=0; x < z->img_comp[n].h; ++x) {
   28aab:	85 c9                	test   %ecx,%ecx
   28aad:	7e 77                	jle    28b26 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1216>
   28aaf:	45 31 ed             	xor    %r13d,%r13d
   28ab2:	eb 1b                	jmp    28acf <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x11bf>
   28ab4:	0f 1f 40 00          	nopl   0x0(%rax)
   28ab8:	41 8b 8e a4 46 00 00 	mov    0x46a4(%r14),%ecx
   28abf:	41 83 c5 01          	add    $0x1,%r13d
                  for (y=0; y < z->img_comp[n].v; ++y) {
   28ac3:	41 8b 86 a8 46 00 00 	mov    0x46a8(%r14),%eax
                     for (x=0; x < z->img_comp[n].h; ++x) {
   28aca:	44 39 e9             	cmp    %r13d,%ecx
   28acd:	7e 4e                	jle    28b1d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x120d>
                        int y2 = (j*z->img_comp[n].v + y);
   28acf:	0f af c3             	imul   %ebx,%eax
                        if (!stbi__jpeg_decode_block_prog_dc(z, data, &z->huff_dc[z->img_comp[n].hd], n))
   28ad2:	49 63 96 b0 46 00 00 	movslq 0x46b0(%r14),%rdx
   28ad9:	4c 89 ff             	mov    %r15,%rdi
                        int x2 = (i*z->img_comp[n].h + x);
   28adc:	0f af cd             	imul   %ebp,%ecx
                        if (!stbi__jpeg_decode_block_prog_dc(z, data, &z->huff_dc[z->img_comp[n].hd], n))
   28adf:	48 69 d2 90 06 00 00 	imul   $0x690,%rdx,%rdx
                        int y2 = (j*z->img_comp[n].v + y);
   28ae6:	44 01 e0             	add    %r12d,%eax
                        short *data = z->img_comp[n].coeff + 64 * (x2 + y2 * z->img_comp[n].coeff_w);
   28ae9:	41 0f af 86 f8 46 00 	imul   0x46f8(%r14),%eax
   28af0:	00 
                        int x2 = (i*z->img_comp[n].h + x);
   28af1:	44 01 e9             	add    %r13d,%ecx
                        if (!stbi__jpeg_decode_block_prog_dc(z, data, &z->huff_dc[z->img_comp[n].hd], n))
   28af4:	49 8d 54 17 08       	lea    0x8(%r15,%rdx,1),%rdx
                        short *data = z->img_comp[n].coeff + 64 * (x2 + y2 * z->img_comp[n].coeff_w);
   28af9:	01 c8                	add    %ecx,%eax
   28afb:	49 8b 8e f0 46 00 00 	mov    0x46f0(%r14),%rcx
   28b02:	c1 e0 06             	shl    $0x6,%eax
   28b05:	48 98                	cltq
   28b07:	48 8d 34 41          	lea    (%rcx,%rax,2),%rsi
                        if (!stbi__jpeg_decode_block_prog_dc(z, data, &z->huff_dc[z->img_comp[n].hd], n))
   28b0b:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
   28b0f:	e8 cc 6f ff ff       	call   1fae0 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani>
   28b14:	85 c0                	test   %eax,%eax
   28b16:	75 a0                	jne    28ab8 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x11a8>
   28b18:	e9 3c ee ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
                  for (y=0; y < z->img_comp[n].v; ++y) {
   28b1d:	41 83 c4 01          	add    $0x1,%r12d
   28b21:	41 39 c4             	cmp    %eax,%r12d
   28b24:	7c 85                	jl     28aab <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x119b>
               for (k=0; k < z->scan_n; ++k) {
   28b26:	41 8b 97 54 48 00 00 	mov    0x4854(%r15),%edx
   28b2d:	48 83 44 24 10 01    	addq   $0x1,0x10(%rsp)
   28b33:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   28b38:	39 c2                	cmp    %eax,%edx
   28b3a:	0f 8f 36 ff ff ff    	jg     28a76 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1166>
               if (--z->todo <= 0) {
   28b40:	41 8b 87 6c 48 00 00 	mov    0x486c(%r15),%eax
   28b47:	83 e8 01             	sub    $0x1,%eax
   28b4a:	41 89 87 6c 48 00 00 	mov    %eax,0x486c(%r15)
   28b51:	85 c0                	test   %eax,%eax
   28b53:	0f 8e b3 0a 00 00    	jle    2960c <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1cfc>
            for (i=0; i < z->img_mcu_x; ++i) {
   28b59:	41 8b 87 90 46 00 00 	mov    0x4690(%r15),%eax
   28b60:	83 c5 01             	add    $0x1,%ebp
   28b63:	39 c5                	cmp    %eax,%ebp
   28b65:	0f 8c f3 fe ff ff    	jl     28a5e <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x114e>
         for (j=0; j < z->img_mcu_y; ++j) {
   28b6b:	41 8b 97 94 46 00 00 	mov    0x4694(%r15),%edx
   28b72:	83 c3 01             	add    $0x1,%ebx
   28b75:	39 d3                	cmp    %edx,%ebx
   28b77:	0f 8c d7 fe ff ff    	jl     28a54 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1144>
   28b7d:	e9 7e fa ff ff       	jmp    28600 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcf0>
   28b82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         int n = z->order[0];
   28b88:	49 63 96 58 48 00 00 	movslq 0x4858(%r14),%rdx
   28b8f:	89 54 24 54          	mov    %edx,0x54(%rsp)
         int w = (z->img_comp[n].x+7) >> 3;
   28b93:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
   28b97:	48 c1 e2 05          	shl    $0x5,%rdx
   28b9b:	4d 8d 3c 16          	lea    (%r14,%rdx,1),%r15
   28b9f:	41 8b 9f bc 46 00 00 	mov    0x46bc(%r15),%ebx
   28ba6:	8d 53 07             	lea    0x7(%rbx),%edx
         int h = (z->img_comp[n].y+7) >> 3;
   28ba9:	41 8b 9f c0 46 00 00 	mov    0x46c0(%r15),%ebx
         int w = (z->img_comp[n].x+7) >> 3;
   28bb0:	c1 fa 03             	sar    $0x3,%edx
   28bb3:	89 54 24 20          	mov    %edx,0x20(%rsp)
         int h = (z->img_comp[n].y+7) >> 3;
   28bb7:	8d 53 07             	lea    0x7(%rbx),%edx
   28bba:	c1 fa 03             	sar    $0x3,%edx
   28bbd:	89 d5                	mov    %edx,%ebp
         for (j=0; j < h; ++j) {
   28bbf:	85 d2                	test   %edx,%edx
   28bc1:	0f 8e 3c fa ff ff    	jle    28603 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcf3>
            for (i=0; i < w; ++i) {
   28bc7:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
         for (j=0; j < h; ++j) {
   28bcb:	31 ff                	xor    %edi,%edi
            for (i=0; i < w; ++i) {
   28bcd:	85 db                	test   %ebx,%ebx
   28bcf:	0f 8e 2e fa ff ff    	jle    28603 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcf3>
   28bd5:	4c 89 7c 24 60       	mov    %r15,0x60(%rsp)
   28bda:	4d 89 f5             	mov    %r14,%r13
   28bdd:	89 eb                	mov    %ebp,%ebx
   28bdf:	41 89 fe             	mov    %edi,%r14d
   28be2:	45 31 c0             	xor    %r8d,%r8d
   28be5:	89 5c 24 6c          	mov    %ebx,0x6c(%rsp)
   28be9:	48 8b 6c 24 60       	mov    0x60(%rsp),%rbp
   28bee:	45 89 c4             	mov    %r8d,%r12d
   28bf1:	eb 59                	jmp    28c4c <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x133c>
                  if (!stbi__jpeg_decode_block_prog_dc(z, data, &z->huff_dc[z->img_comp[n].hd], n))
   28bf3:	48 63 85 b0 46 00 00 	movslq 0x46b0(%rbp),%rax
   28bfa:	8b 4c 24 54          	mov    0x54(%rsp),%ecx
   28bfe:	4c 89 fe             	mov    %r15,%rsi
   28c01:	4c 89 ef             	mov    %r13,%rdi
   28c04:	48 69 c0 90 06 00 00 	imul   $0x690,%rax,%rax
   28c0b:	49 8d 54 05 08       	lea    0x8(%r13,%rax,1),%rdx
   28c10:	e8 cb 6e ff ff       	call   1fae0 <_ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani>
   28c15:	85 c0                	test   %eax,%eax
   28c17:	0f 84 3c ed ff ff    	je     27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
               if (--z->todo <= 0) {
   28c1d:	41 8b 85 6c 48 00 00 	mov    0x486c(%r13),%eax
   28c24:	83 e8 01             	sub    $0x1,%eax
   28c27:	41 89 85 6c 48 00 00 	mov    %eax,0x486c(%r13)
   28c2e:	85 c0                	test   %eax,%eax
   28c30:	0f 8e 01 02 00 00    	jle    28e37 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1527>
            for (i=0; i < w; ++i) {
   28c36:	41 83 c4 01          	add    $0x1,%r12d
   28c3a:	44 39 64 24 20       	cmp    %r12d,0x20(%rsp)
   28c3f:	0f 84 8f 02 00 00    	je     28ed4 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x15c4>
   28c45:	41 8b 85 34 48 00 00 	mov    0x4834(%r13),%eax
               short *data = z->img_comp[n].coeff + 64 * (i + j * z->img_comp[n].coeff_w);
   28c4c:	8b 95 f8 46 00 00    	mov    0x46f8(%rbp),%edx
   28c52:	48 8b 8d f0 46 00 00 	mov    0x46f0(%rbp),%rcx
               if (z->spec_start == 0) {
   28c59:	89 c3                	mov    %eax,%ebx
               short *data = z->img_comp[n].coeff + 64 * (i + j * z->img_comp[n].coeff_w);
   28c5b:	41 0f af d6          	imul   %r14d,%edx
   28c5f:	44 01 e2             	add    %r12d,%edx
   28c62:	c1 e2 06             	shl    $0x6,%edx
   28c65:	48 63 d2             	movslq %edx,%rdx
   28c68:	4c 8d 3c 51          	lea    (%rcx,%rdx,2),%r15
               if (z->spec_start == 0) {
   28c6c:	85 c0                	test   %eax,%eax
   28c6e:	74 83                	je     28bf3 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x12e3>
   if (j->succ_high == 0) {
   28c70:	41 8b 8d 3c 48 00 00 	mov    0x483c(%r13),%ecx
                  int ha = z->img_comp[n].ha;
   28c77:	8b bd b4 46 00 00    	mov    0x46b4(%rbp),%edi
      int shift = j->succ_low;
   28c7d:	41 8b 95 40 48 00 00 	mov    0x4840(%r13),%edx
      if (j->eob_run) {
   28c84:	41 8b b5 44 48 00 00 	mov    0x4844(%r13),%esi
   if (j->succ_high == 0) {
   28c8b:	85 c9                	test   %ecx,%ecx
   28c8d:	0f 85 57 03 00 00    	jne    28fea <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x16da>
      if (j->eob_run) {
   28c93:	85 f6                	test   %esi,%esi
   28c95:	0f 85 67 07 00 00    	jne    29402 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1af2>
                  if (!stbi__jpeg_decode_block_prog_ac(z, data, &z->huff_ac[ha], z->fast_ac[ha]))
   28c9b:	48 63 c7             	movslq %edi,%rax
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   28c9e:	44 89 64 24 10       	mov    %r12d,0x10(%rsp)
   28ca3:	41 89 d4             	mov    %edx,%r12d
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   28ca6:	45 8b 9d 24 48 00 00 	mov    0x4824(%r13),%r11d
   k = h->fast[c];
   28cad:	48 69 f8 90 06 00 00 	imul   $0x690,%rax,%rdi
                  if (!stbi__jpeg_decode_block_prog_ac(z, data, &z->huff_ac[ha], z->fast_ac[ha]))
   28cb4:	48 89 c1             	mov    %rax,%rcx
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   28cb7:	44 89 74 24 18       	mov    %r14d,0x18(%rsp)
   28cbc:	41 89 de             	mov    %ebx,%r14d
   28cbf:	48 69 c0 a4 01 00 00 	imul   $0x1a4,%rax,%rax
                  if (!stbi__jpeg_decode_block_prog_ac(z, data, &z->huff_ac[ha], z->fast_ac[ha]))
   28cc6:	48 c1 e1 0a          	shl    $0xa,%rcx
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   28cca:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
                  if (!stbi__jpeg_decode_block_prog_ac(z, data, &z->huff_ac[ha], z->fast_ac[ha]))
   28ccf:	49 8d b4 0d 88 36 00 	lea    0x3688(%r13,%rcx,1),%rsi
   28cd6:	00 
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   28cd7:	48 89 f5             	mov    %rsi,%rbp
   28cda:	48 89 fb             	mov    %rdi,%rbx
   28cdd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   28ce2:	eb 75                	jmp    28d59 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1449>
   28ce4:	0f 1f 40 00          	nopl   0x0(%rax)
         c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   28ce8:	41 8b 85 20 48 00 00 	mov    0x4820(%r13),%eax
   28cef:	41 89 c0             	mov    %eax,%r8d
   28cf2:	41 c1 e8 17          	shr    $0x17,%r8d
         r = fac[c];
   28cf6:	44 89 c1             	mov    %r8d,%ecx
   28cf9:	0f bf 7c 4d 00       	movswl 0x0(%rbp,%rcx,2),%edi
   28cfe:	89 f9                	mov    %edi,%ecx
         if (r) { // fast-AC path
   28d00:	85 ff                	test   %edi,%edi
   28d02:	0f 84 a9 00 00 00    	je     28db1 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x14a1>
            k += (r >> 4) & 15; // run
   28d08:	41 89 f8             	mov    %edi,%r8d
            s = r & 15; // combined length
   28d0b:	83 e1 0f             	and    $0xf,%ecx
            data[zig] = (short) ((r >> 8) * (1 << shift));
   28d0e:	c1 ff 08             	sar    $0x8,%edi
            k += (r >> 4) & 15; // run
   28d11:	41 c1 f8 04          	sar    $0x4,%r8d
            j->code_buffer <<= s;
   28d15:	d3 e0                	shl    %cl,%eax
            j->code_bits -= s;
   28d17:	41 29 cb             	sub    %ecx,%r11d
            data[zig] = (short) ((r >> 8) * (1 << shift));
   28d1a:	44 89 e1             	mov    %r12d,%ecx
            k += (r >> 4) & 15; // run
   28d1d:	41 83 e0 0f          	and    $0xf,%r8d
            j->code_buffer <<= s;
   28d21:	41 89 85 20 48 00 00 	mov    %eax,0x4820(%r13)
            data[zig] = (short) ((r >> 8) * (1 << shift));
   28d28:	d3 e7                	shl    %cl,%edi
   28d2a:	48 8d 05 af f9 00 00 	lea    0xf9af(%rip),%rax        # 386e0 <_ZL19stbi__jpeg_dezigzag>
            k += (r >> 4) & 15; // run
   28d31:	45 01 f0             	add    %r14d,%r8d
            j->code_bits -= s;
   28d34:	45 89 9d 24 48 00 00 	mov    %r11d,0x4824(%r13)
            zig = stbi__jpeg_dezigzag[k++];
   28d3b:	45 8d 70 01          	lea    0x1(%r8),%r14d
   28d3f:	4d 63 c0             	movslq %r8d,%r8
            data[zig] = (short) ((r >> 8) * (1 << shift));
   28d42:	42 0f b6 04 00       	movzbl (%rax,%r8,1),%eax
   28d47:	66 41 89 3c 47       	mov    %di,(%r15,%rax,2)
      } while (k <= j->spec_end);
   28d4c:	45 39 b5 38 48 00 00 	cmp    %r14d,0x4838(%r13)
   28d53:	0f 8c ca 00 00 00    	jl     28e23 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1513>
         if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   28d59:	41 83 fb 0f          	cmp    $0xf,%r11d
   28d5d:	7f 89                	jg     28ce8 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x13d8>
   28d5f:	4c 89 ef             	mov    %r13,%rdi
   28d62:	e8 79 6b ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
         c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   28d67:	41 8b 85 20 48 00 00 	mov    0x4820(%r13),%eax
            j->code_bits -= s;
   28d6e:	45 8b 9d 24 48 00 00 	mov    0x4824(%r13),%r11d
         c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   28d75:	41 89 c0             	mov    %eax,%r8d
   28d78:	41 c1 e8 17          	shr    $0x17,%r8d
         r = fac[c];
   28d7c:	44 89 c1             	mov    %r8d,%ecx
   28d7f:	0f bf 7c 4d 00       	movswl 0x0(%rbp,%rcx,2),%edi
   28d84:	89 f9                	mov    %edi,%ecx
         if (r) { // fast-AC path
   28d86:	85 ff                	test   %edi,%edi
   28d88:	0f 85 7a ff ff ff    	jne    28d08 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x13f8>
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   28d8e:	41 83 fb 0f          	cmp    $0xf,%r11d
   28d92:	7f 1d                	jg     28db1 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x14a1>
   28d94:	4c 89 ef             	mov    %r13,%rdi
   28d97:	e8 44 6b ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   28d9c:	41 8b 85 20 48 00 00 	mov    0x4820(%r13),%eax
      if (s > j->code_bits)
   28da3:	45 8b 9d 24 48 00 00 	mov    0x4824(%r13),%r11d
   c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   28daa:	41 89 c0             	mov    %eax,%r8d
   28dad:	41 c1 e8 17          	shr    $0x17,%r8d
   k = h->fast[c];
   28db1:	4d 63 c0             	movslq %r8d,%r8
   28db4:	49 8d 7c 1d 00       	lea    0x0(%r13,%rbx,1),%rdi
   28db9:	41 0f b6 8c 38 48 1a 	movzbl 0x1a48(%r8,%rdi,1),%ecx
   28dc0:	00 00 
   if (k < 255) {
   28dc2:	81 f9 ff 00 00 00    	cmp    $0xff,%ecx
   28dc8:	0f 84 23 01 00 00    	je     28ef1 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x15e1>
      int s = h->size[k];
   28dce:	48 01 cf             	add    %rcx,%rdi
   28dd1:	0f b6 8f 48 1f 00 00 	movzbl 0x1f48(%rdi),%ecx
      if (s > j->code_bits)
   28dd8:	44 39 d9             	cmp    %r11d,%ecx
   28ddb:	0f 8f 74 01 00 00    	jg     28f55 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1645>
      j->code_buffer <<= s;
   28de1:	d3 e0                	shl    %cl,%eax
      j->code_bits -= s;
   28de3:	41 29 cb             	sub    %ecx,%r11d
      j->code_buffer <<= s;
   28de6:	41 89 85 20 48 00 00 	mov    %eax,0x4820(%r13)
      j->code_bits -= s;
   28ded:	45 89 9d 24 48 00 00 	mov    %r11d,0x4824(%r13)
      return h->values[k];
   28df4:	0f b6 8f 48 1e 00 00 	movzbl 0x1e48(%rdi),%ecx
            r = rs >> 4;
   28dfb:	89 cf                	mov    %ecx,%edi
   28dfd:	c1 ff 04             	sar    $0x4,%edi
            if (s == 0) {
   28e00:	83 e1 0f             	and    $0xf,%ecx
   28e03:	0f 85 61 01 00 00    	jne    28f6a <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x165a>
               if (r < 15) {
   28e09:	83 ff 0f             	cmp    $0xf,%edi
   28e0c:	0f 85 51 07 00 00    	jne    29563 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c53>
               k += 16;
   28e12:	41 83 c6 10          	add    $0x10,%r14d
      } while (k <= j->spec_end);
   28e16:	45 39 b5 38 48 00 00 	cmp    %r14d,0x4838(%r13)
   28e1d:	0f 8d 36 ff ff ff    	jge    28d59 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1449>
   28e23:	44 8b 64 24 10       	mov    0x10(%rsp),%r12d
   28e28:	44 8b 74 24 18       	mov    0x18(%rsp),%r14d
   28e2d:	48 8b 6c 24 28       	mov    0x28(%rsp),%rbp
   28e32:	e9 e6 fd ff ff       	jmp    28c1d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x130d>
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
   28e37:	41 83 bd 24 48 00 00 	cmpl   $0x17,0x4824(%r13)
   28e3e:	17 
   28e3f:	0f 8e 98 01 00 00    	jle    28fdd <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x16cd>
                  if (!STBI__RESTART(z->marker)) return 1;
   28e45:	41 0f b6 b5 28 48 00 	movzbl 0x4828(%r13),%esi
   28e4c:	00 
   28e4d:	8d 46 30             	lea    0x30(%rsi),%eax
   28e50:	3c 07                	cmp    $0x7,%al
   28e52:	0f 87 ef 06 00 00    	ja     29547 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c37>
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28e58:	41 8b 85 68 48 00 00 	mov    0x4868(%r13),%eax
   28e5f:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   j->nomore = 0;
   28e64:	41 c7 85 2c 48 00 00 	movl   $0x0,0x482c(%r13)
   28e6b:	00 00 00 00 
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   28e6f:	41 c7 85 d8 47 00 00 	movl   $0x0,0x47d8(%r13)
   28e76:	00 00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28e7a:	85 c0                	test   %eax,%eax
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   28e7c:	41 c7 85 78 47 00 00 	movl   $0x0,0x4778(%r13)
   28e83:	00 00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28e87:	0f 44 c2             	cmove  %edx,%eax
            for (i=0; i < w; ++i) {
   28e8a:	41 83 c4 01          	add    $0x1,%r12d
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   28e8e:	41 c7 85 18 47 00 00 	movl   $0x0,0x4718(%r13)
   28e95:	00 00 00 00 
   28e99:	41 c7 85 b8 46 00 00 	movl   $0x0,0x46b8(%r13)
   28ea0:	00 00 00 00 
   j->code_buffer = 0;
   28ea4:	49 c7 85 20 48 00 00 	movq   $0x0,0x4820(%r13)
   28eab:	00 00 00 00 
   j->marker = STBI__MARKER_none;
   28eaf:	41 c6 85 28 48 00 00 	movb   $0xff,0x4828(%r13)
   28eb6:	ff 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   28eb7:	41 89 85 6c 48 00 00 	mov    %eax,0x486c(%r13)
   j->eob_run = 0;
   28ebe:	41 c7 85 44 48 00 00 	movl   $0x0,0x4844(%r13)
   28ec5:	00 00 00 00 
            for (i=0; i < w; ++i) {
   28ec9:	44 39 64 24 20       	cmp    %r12d,0x20(%rsp)
   28ece:	0f 85 71 fd ff ff    	jne    28c45 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1335>
         for (j=0; j < h; ++j) {
   28ed4:	8b 5c 24 6c          	mov    0x6c(%rsp),%ebx
   28ed8:	41 83 c6 01          	add    $0x1,%r14d
   28edc:	44 39 f3             	cmp    %r14d,%ebx
   28edf:	0f 84 f7 06 00 00    	je     295dc <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1ccc>
   28ee5:	41 8b 85 34 48 00 00 	mov    0x4834(%r13),%eax
   28eec:	e9 f1 fc ff ff       	jmp    28be2 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x12d2>
   temp = j->code_buffer >> 16;
   28ef1:	89 c1                	mov    %eax,%ecx
   28ef3:	c1 e9 10             	shr    $0x10,%ecx
      if (temp < h->maxcode[k])
   28ef6:	3b 8f 74 20 00 00    	cmp    0x2074(%rdi),%ecx
   28efc:	0f 82 e7 05 00 00    	jb     294e9 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1bd9>
   28f02:	3b 8f 78 20 00 00    	cmp    0x2078(%rdi),%ecx
   28f08:	0f 82 75 05 00 00    	jb     29483 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b73>
   28f0e:	3b 8f 7c 20 00 00    	cmp    0x207c(%rdi),%ecx
   28f14:	0f 82 23 06 00 00    	jb     2953d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c2d>
   28f1a:	3b 8f 80 20 00 00    	cmp    0x2080(%rdi),%ecx
   28f20:	0f 82 0d 06 00 00    	jb     29533 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c23>
   28f26:	3b 8f 84 20 00 00    	cmp    0x2084(%rdi),%ecx
   28f2c:	0f 82 f7 05 00 00    	jb     29529 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c19>
   28f32:	3b 8f 88 20 00 00    	cmp    0x2088(%rdi),%ecx
   28f38:	0f 82 e1 05 00 00    	jb     2951f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c0f>
   28f3e:	3b 8f 8c 20 00 00    	cmp    0x208c(%rdi),%ecx
   28f44:	0f 82 50 06 00 00    	jb     2959a <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c8a>
      j->code_bits -= 16;
   28f4a:	41 8d 43 f0          	lea    -0x10(%r11),%eax
   28f4e:	41 89 85 24 48 00 00 	mov    %eax,0x4824(%r13)
   stbi__g_failure_reason = str;
   28f55:	48 8d 05 b3 eb 00 00 	lea    0xebb3(%rip),%rax        # 37b0f <_ZSt19piecewise_construct+0x1c8>
   28f5c:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   28f63:	ff ff 
   return 0;
   28f65:	e9 ef e9 ff ff       	jmp    27959 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x49>
               k += r;
   28f6a:	44 01 f7             	add    %r14d,%edi
               zig = stbi__jpeg_dezigzag[k++];
   28f6d:	48 8d 35 6c f7 00 00 	lea    0xf76c(%rip),%rsi        # 386e0 <_ZL19stbi__jpeg_dezigzag>
   28f74:	44 8d 77 01          	lea    0x1(%rdi),%r14d
   28f78:	48 63 ff             	movslq %edi,%rdi
   28f7b:	0f b6 14 3e          	movzbl (%rsi,%rdi,1),%edx
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   28f7f:	44 39 d9             	cmp    %r11d,%ecx
   28f82:	0f 8f 4e 04 00 00    	jg     293d6 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1ac6>
   j->code_buffer = k & ~stbi__bmask[n];
   28f88:	4c 63 d1             	movslq %ecx,%r10
   28f8b:	48 8d 35 ee f7 00 00 	lea    0xf7ee(%rip),%rsi        # 38780 <_ZL11stbi__bmask>
   k = stbi_lrot(j->code_buffer, n);
   28f92:	89 c7                	mov    %eax,%edi
   j->code_bits -= n;
   28f94:	41 29 cb             	sub    %ecx,%r11d
   j->code_buffer = k & ~stbi__bmask[n];
   28f97:	46 8b 0c 96          	mov    (%rsi,%r10,4),%r9d
   k = stbi_lrot(j->code_buffer, n);
   28f9b:	d3 c7                	rol    %cl,%edi
   sgn = j->code_buffer >> 31; // sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)
   28f9d:	c1 e8 1f             	shr    $0x1f,%eax
   return k + (stbi__jbias[n] & (sgn - 1));
   28fa0:	48 8d 0d 99 f7 00 00 	lea    0xf799(%rip),%rcx        # 38740 <_ZL11stbi__jbias>
   28fa7:	83 e8 01             	sub    $0x1,%eax
   28faa:	42 23 04 91          	and    (%rcx,%r10,4),%eax
               data[zig] = (short) (stbi__extend_receive(j,s) * (1 << shift));
   28fae:	44 89 e1             	mov    %r12d,%ecx
   j->code_bits -= n;
   28fb1:	45 89 9d 24 48 00 00 	mov    %r11d,0x4824(%r13)
   j->code_buffer = k & ~stbi__bmask[n];
   28fb8:	45 89 c8             	mov    %r9d,%r8d
   28fbb:	41 f7 d0             	not    %r8d
   28fbe:	41 21 f8             	and    %edi,%r8d
   k &= stbi__bmask[n];
   28fc1:	44 21 cf             	and    %r9d,%edi
   return k + (stbi__jbias[n] & (sgn - 1));
   28fc4:	01 f8                	add    %edi,%eax
   j->code_buffer = k & ~stbi__bmask[n];
   28fc6:	45 89 85 20 48 00 00 	mov    %r8d,0x4820(%r13)
               data[zig] = (short) (stbi__extend_receive(j,s) * (1 << shift));
   28fcd:	44 0f b6 c2          	movzbl %dl,%r8d
   28fd1:	d3 e0                	shl    %cl,%eax
   28fd3:	66 43 89 04 47       	mov    %ax,(%r15,%r8,2)
   28fd8:	e9 6f fd ff ff       	jmp    28d4c <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x143c>
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
   28fdd:	4c 89 ef             	mov    %r13,%rdi
   28fe0:	e8 fb 68 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   28fe5:	e9 5b fe ff ff       	jmp    28e45 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1535>
      short bit = (short) (1 << j->succ_low);
   28fea:	41 b9 01 00 00 00    	mov    $0x1,%r9d
   28ff0:	89 d1                	mov    %edx,%ecx
   28ff2:	41 d3 e1             	shl    %cl,%r9d
   28ff5:	66 44 89 4c 24 08    	mov    %r9w,0x8(%rsp)
      if (j->eob_run) {
   28ffb:	85 f6                	test   %esi,%esi
   28ffd:	0f 85 bd 02 00 00    	jne    292c0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x19b0>
   29003:	48 63 c7             	movslq %edi,%rax
   29006:	44 89 64 24 38       	mov    %r12d,0x38(%rsp)
   k = h->fast[c];
   2900b:	4c 69 c0 90 06 00 00 	imul   $0x690,%rax,%r8
   29012:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   29017:	48 69 c0 a4 01 00 00 	imul   $0x1a4,%rax,%rax
   2901e:	44 89 74 24 40       	mov    %r14d,0x40(%rsp)
   29023:	48 89 6c 24 48       	mov    %rbp,0x48(%rsp)
   29028:	4c 89 fd             	mov    %r15,%rbp
   k = h->fast[c];
   2902b:	4d 01 e8             	add    %r13,%r8
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   2902e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
                  s = bit;
   29033:	41 0f bf c1          	movswl %r9w,%eax
   29037:	4d 89 c6             	mov    %r8,%r14
   2903a:	89 44 24 68          	mov    %eax,0x68(%rsp)
   2903e:	66 90                	xchg   %ax,%ax
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   29040:	41 8b 85 24 48 00 00 	mov    0x4824(%r13),%eax
   29047:	83 f8 0f             	cmp    $0xf,%eax
   2904a:	0f 8e 41 02 00 00    	jle    29291 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1981>
   c = (j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1);
   29050:	41 8b b5 20 48 00 00 	mov    0x4820(%r13),%esi
   29057:	89 f2                	mov    %esi,%edx
   29059:	c1 ea 17             	shr    $0x17,%edx
   k = h->fast[c];
   2905c:	42 0f b6 94 32 48 1a 	movzbl 0x1a48(%rdx,%r14,1),%edx
   29063:	00 00 
   if (k < 255) {
   29065:	81 fa ff 00 00 00    	cmp    $0xff,%edx
   2906b:	0f 84 ad 01 00 00    	je     2921e <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x190e>
      int s = h->size[k];
   29071:	4c 01 f2             	add    %r14,%rdx
   29074:	0f b6 8a 48 1f 00 00 	movzbl 0x1f48(%rdx),%ecx
      if (s > j->code_bits)
   2907b:	39 c1                	cmp    %eax,%ecx
   2907d:	0f 8f d2 fe ff ff    	jg     28f55 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1645>
      j->code_buffer <<= s;
   29083:	d3 e6                	shl    %cl,%esi
      j->code_bits -= s;
   29085:	29 c8                	sub    %ecx,%eax
      j->code_buffer <<= s;
   29087:	41 89 b5 20 48 00 00 	mov    %esi,0x4820(%r13)
      j->code_bits -= s;
   2908e:	41 89 85 24 48 00 00 	mov    %eax,0x4824(%r13)
      return h->values[k];
   29095:	44 0f b6 92 48 1e 00 	movzbl 0x1e48(%rdx),%r10d
   2909c:	00 
            r = rs >> 4;
   2909d:	45 89 d7             	mov    %r10d,%r15d
   290a0:	41 c1 ff 04          	sar    $0x4,%r15d
            if (s == 0) {
   290a4:	41 83 e2 0f          	and    $0xf,%r10d
   290a8:	0f 85 35 01 00 00    	jne    291e3 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x18d3>
               if (r < 15) {
   290ae:	41 83 ff 0f          	cmp    $0xf,%r15d
   290b2:	74 23                	je     290d7 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x17c7>
                  j->eob_run = (1 << r) - 1;
   290b4:	ba 01 00 00 00       	mov    $0x1,%edx
   290b9:	44 89 f9             	mov    %r15d,%ecx
   290bc:	d3 e2                	shl    %cl,%edx
   290be:	83 ea 01             	sub    $0x1,%edx
   290c1:	41 89 95 44 48 00 00 	mov    %edx,0x4844(%r13)
                  if (r)
   290c8:	45 85 ff             	test   %r15d,%r15d
   290cb:	0f 85 b7 02 00 00    	jne    29388 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1a78>
                  r = 64; // force end of block
   290d1:	41 bf 40 00 00 00    	mov    $0x40,%r15d
            while (k <= j->spec_end) {
   290d7:	41 8b bd 38 48 00 00 	mov    0x4838(%r13),%edi
   290de:	39 fb                	cmp    %edi,%ebx
   290e0:	0f 8f e9 00 00 00    	jg     291cf <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x18bf>
   290e6:	48 8d 05 f3 f5 00 00 	lea    0xf5f3(%rip),%rax        # 386e0 <_ZL19stbi__jpeg_dezigzag>
   290ed:	4c 63 e3             	movslq %ebx,%r12
   290f0:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
   290f5:	49 01 c4             	add    %rax,%r12
   290f8:	44 89 f8             	mov    %r15d,%eax
   290fb:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
   29100:	49 89 ef             	mov    %rbp,%r15
   29103:	89 c5                	mov    %eax,%ebp
   29105:	eb 40                	jmp    29147 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1837>
   29107:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2910e:	00 00 
   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);
   29110:	41 8b 85 24 48 00 00 	mov    0x4824(%r13),%eax
   29117:	85 c0                	test   %eax,%eax
   29119:	7e 7d                	jle    29198 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1888>
   k = j->code_buffer;
   2911b:	41 8b b5 20 48 00 00 	mov    0x4820(%r13),%esi
   --j->code_bits;
   29122:	83 e8 01             	sub    $0x1,%eax
   29125:	41 89 85 24 48 00 00 	mov    %eax,0x4824(%r13)
   j->code_buffer <<= 1;
   2912c:	44 8d 14 36          	lea    (%rsi,%rsi,1),%r10d
   29130:	45 89 95 20 48 00 00 	mov    %r10d,0x4820(%r13)
                  if (stbi__jpeg_get_bit(j))
   29137:	85 f6                	test   %esi,%esi
   29139:	78 2d                	js     29168 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1858>
            while (k <= j->spec_end) {
   2913b:	49 83 c4 01          	add    $0x1,%r12
   2913f:	39 fb                	cmp    %edi,%ebx
   29141:	0f 8f 88 00 00 00    	jg     291cf <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x18bf>
               short *p = &data[stbi__jpeg_dezigzag[k++]];
   29147:	41 0f b6 04 24       	movzbl (%r12),%eax
   2914c:	83 c3 01             	add    $0x1,%ebx
   2914f:	4d 8d 34 47          	lea    (%r15,%rax,2),%r14
               if (*p != 0) {
   29153:	66 41 83 3e 00       	cmpw   $0x0,(%r14)
   29158:	75 b6                	jne    29110 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1800>
                  if (r == 0) {
   2915a:	85 ed                	test   %ebp,%ebp
   2915c:	74 55                	je     291b3 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x18a3>
                  --r;
   2915e:	83 ed 01             	sub    $0x1,%ebp
   29161:	eb d8                	jmp    2913b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x182b>
   29163:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                     if ((*p & bit)==0) {
   29168:	41 0f b7 06          	movzwl (%r14),%eax
   2916c:	66 85 44 24 08       	test   %ax,0x8(%rsp)
   29171:	75 c8                	jne    2913b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x182b>
                           *p += bit;
   29173:	8b 74 24 28          	mov    0x28(%rsp),%esi
   29177:	41 89 c2             	mov    %eax,%r10d
   2917a:	41 29 f2             	sub    %esi,%r10d
   2917d:	89 f1                	mov    %esi,%ecx
   2917f:	66 85 c0             	test   %ax,%ax
   29182:	8d 34 08             	lea    (%rax,%rcx,1),%esi
   29185:	44 89 d0             	mov    %r10d,%eax
   29188:	0f 4f c6             	cmovg  %esi,%eax
   2918b:	66 41 89 06          	mov    %ax,(%r14)
   2918f:	eb aa                	jmp    2913b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x182b>
   29191:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);
   29198:	4c 89 ef             	mov    %r13,%rdi
   2919b:	e8 40 67 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   --j->code_bits;
   291a0:	41 8b 85 24 48 00 00 	mov    0x4824(%r13),%eax
   291a7:	41 8b bd 38 48 00 00 	mov    0x4838(%r13),%edi
   291ae:	e9 68 ff ff ff       	jmp    2911b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x180b>
                     *p = (short) s;
   291b3:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
   291b8:	4c 89 f2             	mov    %r14,%rdx
   291bb:	4c 89 fd             	mov    %r15,%rbp
   291be:	4c 8b 74 24 18       	mov    0x18(%rsp),%r14
   291c3:	66 44 89 12          	mov    %r10w,(%rdx)
         } while (k <= j->spec_end);
   291c7:	39 fb                	cmp    %edi,%ebx
   291c9:	0f 8e 71 fe ff ff    	jle    29040 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1730>
   291cf:	44 8b 64 24 38       	mov    0x38(%rsp),%r12d
   291d4:	44 8b 74 24 40       	mov    0x40(%rsp),%r14d
   291d9:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
   291de:	e9 3a fa ff ff       	jmp    28c1d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x130d>
               if (s != 1) return stbi__err("bad huffman code", "Corrupt JPEG");
   291e3:	41 83 fa 01          	cmp    $0x1,%r10d
   291e7:	0f 85 68 fd ff ff    	jne    28f55 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1645>
   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);
   291ed:	85 c0                	test   %eax,%eax
   291ef:	0f 84 b0 00 00 00    	je     292a5 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1995>
   --j->code_bits;
   291f5:	83 e8 01             	sub    $0x1,%eax
   j->code_buffer <<= 1;
   291f8:	8d 14 36             	lea    (%rsi,%rsi,1),%edx
   --j->code_bits;
   291fb:	41 89 85 24 48 00 00 	mov    %eax,0x4824(%r13)
                  s = -bit;
   29202:	8b 44 24 68          	mov    0x68(%rsp),%eax
   j->code_buffer <<= 1;
   29206:	41 89 95 20 48 00 00 	mov    %edx,0x4820(%r13)
                  s = -bit;
   2920d:	41 89 c2             	mov    %eax,%r10d
   29210:	41 f7 da             	neg    %r10d
   29213:	85 f6                	test   %esi,%esi
   29215:	44 0f 48 d0          	cmovs  %eax,%r10d
   29219:	e9 b9 fe ff ff       	jmp    290d7 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x17c7>
   temp = j->code_buffer >> 16;
   2921e:	89 f2                	mov    %esi,%edx
   29220:	c1 ea 10             	shr    $0x10,%edx
      if (temp < h->maxcode[k])
   29223:	41 3b 96 74 20 00 00 	cmp    0x2074(%r14),%edx
   2922a:	0f 82 3e 02 00 00    	jb     2946e <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b5e>
   29230:	41 3b 96 78 20 00 00 	cmp    0x2078(%r14),%edx
   29237:	0f 82 d4 01 00 00    	jb     29411 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b01>
   2923d:	41 3b 96 7c 20 00 00 	cmp    0x207c(%r14),%edx
   29244:	0f 82 cb 02 00 00    	jb     29515 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c05>
   2924a:	41 3b 96 80 20 00 00 	cmp    0x2080(%r14),%edx
   29251:	0f 82 1e 02 00 00    	jb     29475 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b65>
   29257:	41 3b 96 84 20 00 00 	cmp    0x2084(%r14),%edx
   2925e:	0f 82 18 02 00 00    	jb     2947c <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b6c>
   29264:	41 3b 96 88 20 00 00 	cmp    0x2088(%r14),%edx
   2926b:	0f 82 e8 02 00 00    	jb     29559 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c49>
   29271:	41 3b 96 8c 20 00 00 	cmp    0x208c(%r14),%edx
   29278:	0f 82 d1 02 00 00    	jb     2954f <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c3f>
      j->code_bits -= 16;
   2927e:	41 89 c2             	mov    %eax,%r10d
   29281:	41 83 ea 10          	sub    $0x10,%r10d
   29285:	45 89 95 24 48 00 00 	mov    %r10d,0x4824(%r13)
            if (rs < 0) return stbi__err("bad huffman code","Corrupt JPEG");
   2928c:	e9 c4 fc ff ff       	jmp    28f55 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1645>
   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   29291:	4c 89 ef             	mov    %r13,%rdi
   29294:	e8 47 66 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
      if (s > j->code_bits)
   29299:	41 8b 85 24 48 00 00 	mov    0x4824(%r13),%eax
   292a0:	e9 ab fd ff ff       	jmp    29050 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1740>
   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);
   292a5:	4c 89 ef             	mov    %r13,%rdi
   292a8:	e8 33 66 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   k = j->code_buffer;
   292ad:	41 8b b5 20 48 00 00 	mov    0x4820(%r13),%esi
   --j->code_bits;
   292b4:	41 8b 85 24 48 00 00 	mov    0x4824(%r13),%eax
   292bb:	e9 35 ff ff ff       	jmp    291f5 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x18e5>
         for (k = j->spec_start; k <= j->spec_end; ++k) {
   292c0:	41 8b 8d 38 48 00 00 	mov    0x4838(%r13),%ecx
         --j->eob_run;
   292c7:	83 ee 01             	sub    $0x1,%esi
   292ca:	41 89 b5 44 48 00 00 	mov    %esi,0x4844(%r13)
         for (k = j->spec_start; k <= j->spec_end; ++k) {
   292d1:	39 c8                	cmp    %ecx,%eax
   292d3:	0f 8f 44 f9 ff ff    	jg     28c1d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x130d>
   292d9:	44 89 74 24 10       	mov    %r14d,0x10(%rsp)
   292de:	48 63 d8             	movslq %eax,%rbx
   292e1:	45 89 e6             	mov    %r12d,%r14d
   292e4:	45 89 cc             	mov    %r9d,%r12d
   292e7:	48 89 6c 24 18       	mov    %rbp,0x18(%rsp)
   292ec:	eb 08                	jmp    292f6 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x19e6>
   292ee:	48 83 c3 01          	add    $0x1,%rbx
   292f2:	39 d9                	cmp    %ebx,%ecx
   292f4:	7c 68                	jl     2935e <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1a4e>
            short *p = &data[stbi__jpeg_dezigzag[k]];
   292f6:	48 8d 05 e3 f3 00 00 	lea    0xf3e3(%rip),%rax        # 386e0 <_ZL19stbi__jpeg_dezigzag>
   292fd:	0f b6 04 18          	movzbl (%rax,%rbx,1),%eax
   29301:	49 8d 2c 47          	lea    (%r15,%rax,2),%rbp
            if (*p != 0)
   29305:	66 83 7d 00 00       	cmpw   $0x0,0x0(%rbp)
   2930a:	74 e2                	je     292ee <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x19de>
   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);
   2930c:	41 8b 85 24 48 00 00 	mov    0x4824(%r13),%eax
   29313:	85 c0                	test   %eax,%eax
   29315:	7e 59                	jle    29370 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1a60>
   k = j->code_buffer;
   29317:	41 8b 95 20 48 00 00 	mov    0x4820(%r13),%edx
   --j->code_bits;
   2931e:	83 e8 01             	sub    $0x1,%eax
   29321:	41 89 85 24 48 00 00 	mov    %eax,0x4824(%r13)
   j->code_buffer <<= 1;
   29328:	8d 34 12             	lea    (%rdx,%rdx,1),%esi
   2932b:	41 89 b5 20 48 00 00 	mov    %esi,0x4820(%r13)
               if (stbi__jpeg_get_bit(j))
   29332:	85 d2                	test   %edx,%edx
   29334:	79 b8                	jns    292ee <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x19de>
                  if ((*p & bit)==0) {
   29336:	0f b7 45 00          	movzwl 0x0(%rbp),%eax
   2933a:	66 85 44 24 08       	test   %ax,0x8(%rsp)
   2933f:	75 ad                	jne    292ee <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x19de>
                        *p += bit;
   29341:	89 c6                	mov    %eax,%esi
   29343:	42 8d 14 20          	lea    (%rax,%r12,1),%edx
   29347:	44 29 e6             	sub    %r12d,%esi
   2934a:	66 85 c0             	test   %ax,%ax
   2934d:	89 f0                	mov    %esi,%eax
   2934f:	0f 4f c2             	cmovg  %edx,%eax
         for (k = j->spec_start; k <= j->spec_end; ++k) {
   29352:	48 83 c3 01          	add    $0x1,%rbx
                        *p += bit;
   29356:	66 89 45 00          	mov    %ax,0x0(%rbp)
         for (k = j->spec_start; k <= j->spec_end; ++k) {
   2935a:	39 d9                	cmp    %ebx,%ecx
   2935c:	7d 98                	jge    292f6 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x19e6>
   2935e:	45 89 f4             	mov    %r14d,%r12d
   29361:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
   29366:	44 8b 74 24 10       	mov    0x10(%rsp),%r14d
   2936b:	e9 ad f8 ff ff       	jmp    28c1d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x130d>
   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);
   29370:	4c 89 ef             	mov    %r13,%rdi
   29373:	e8 68 65 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   --j->code_bits;
   29378:	41 8b 85 24 48 00 00 	mov    0x4824(%r13),%eax
   2937f:	41 8b 8d 38 48 00 00 	mov    0x4838(%r13),%ecx
   29386:	eb 8f                	jmp    29317 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1a07>
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   29388:	41 39 c7             	cmp    %eax,%r15d
   2938b:	0f 8f 5f 01 00 00    	jg     294f0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1be0>
   k = stbi_lrot(j->code_buffer, n);
   29391:	45 8b 9d 20 48 00 00 	mov    0x4820(%r13),%r11d
   j->code_buffer = k & ~stbi__bmask[n];
   29398:	49 63 ff             	movslq %r15d,%rdi
   k = stbi_lrot(j->code_buffer, n);
   2939b:	44 89 f9             	mov    %r15d,%ecx
   j->code_bits -= n;
   2939e:	44 29 f8             	sub    %r15d,%eax
   j->code_buffer = k & ~stbi__bmask[n];
   293a1:	48 8d 35 d8 f3 00 00 	lea    0xf3d8(%rip),%rsi        # 38780 <_ZL11stbi__bmask>
   j->code_bits -= n;
   293a8:	41 89 85 24 48 00 00 	mov    %eax,0x4824(%r13)
   j->code_buffer = k & ~stbi__bmask[n];
   293af:	8b 3c be             	mov    (%rsi,%rdi,4),%edi
   k = stbi_lrot(j->code_buffer, n);
   293b2:	41 d3 c3             	rol    %cl,%r11d
   k &= stbi__bmask[n];
   293b5:	44 89 d8             	mov    %r11d,%eax
   j->code_buffer = k & ~stbi__bmask[n];
   293b8:	89 fe                	mov    %edi,%esi
   k &= stbi__bmask[n];
   293ba:	21 f8                	and    %edi,%eax
   j->code_buffer = k & ~stbi__bmask[n];
   293bc:	f7 d6                	not    %esi
                     j->eob_run += stbi__jpeg_get_bits(j, r);
   293be:	01 d0                	add    %edx,%eax
   j->code_buffer = k & ~stbi__bmask[n];
   293c0:	44 21 de             	and    %r11d,%esi
                     j->eob_run += stbi__jpeg_get_bits(j, r);
   293c3:	41 89 85 44 48 00 00 	mov    %eax,0x4844(%r13)
   j->code_buffer = k & ~stbi__bmask[n];
   293ca:	41 89 b5 20 48 00 00 	mov    %esi,0x4820(%r13)
   return k;
   293d1:	e9 fb fc ff ff       	jmp    290d1 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x17c1>
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   293d6:	4c 89 ef             	mov    %r13,%rdi
   293d9:	88 54 24 40          	mov    %dl,0x40(%rsp)
   293dd:	89 4c 24 38          	mov    %ecx,0x38(%rsp)
   293e1:	e8 fa 64 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   sgn = j->code_buffer >> 31; // sign bit always in MSB; 0 if MSB clear (positive), 1 if MSB set (negative)
   293e6:	41 8b 85 20 48 00 00 	mov    0x4820(%r13),%eax
   j->code_bits -= n;
   293ed:	45 8b 9d 24 48 00 00 	mov    0x4824(%r13),%r11d
   293f4:	0f b6 54 24 40       	movzbl 0x40(%rsp),%edx
   293f9:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
   293fd:	e9 86 fb ff ff       	jmp    28f88 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1678>
         --j->eob_run;
   29402:	83 ee 01             	sub    $0x1,%esi
   29405:	41 89 b5 44 48 00 00 	mov    %esi,0x4844(%r13)
         return 1;
   2940c:	e9 0c f8 ff ff       	jmp    28c1d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x130d>
   for (k=FAST_BITS+1 ; ; ++k)
   29411:	bf 0b 00 00 00       	mov    $0xb,%edi
   if (k > j->code_bits)
   29416:	39 c7                	cmp    %eax,%edi
   29418:	0f 8f 37 fb ff ff    	jg     28f55 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1645>
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   2941e:	b9 20 00 00 00       	mov    $0x20,%ecx
   29423:	89 f2                	mov    %esi,%edx
   29425:	4c 8d 0d 54 f3 00 00 	lea    0xf354(%rip),%r9        # 38780 <_ZL11stbi__bmask>
   j->code_bits -= k;
   2942c:	29 f8                	sub    %edi,%eax
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   2942e:	29 f9                	sub    %edi,%ecx
   29430:	d3 ea                	shr    %cl,%edx
   29432:	48 63 cf             	movslq %edi,%rcx
   29435:	41 23 14 89          	and    (%r9,%rcx,4),%edx
   29439:	4c 8b 4c 24 58       	mov    0x58(%rsp),%r9
   2943e:	4a 8d 8c 09 20 08 00 	lea    0x820(%rcx,%r9,1),%rcx
   29445:	00 
   29446:	41 03 54 8d 14       	add    0x14(%r13,%rcx,4),%edx
   j->code_buffer <<= k;
   2944b:	89 f9                	mov    %edi,%ecx
   j->code_bits -= k;
   2944d:	41 89 85 24 48 00 00 	mov    %eax,0x4824(%r13)
   j->code_buffer <<= k;
   29454:	d3 e6                	shl    %cl,%esi
   return h->values[c];
   29456:	48 63 d2             	movslq %edx,%rdx
   j->code_buffer <<= k;
   29459:	41 89 b5 20 48 00 00 	mov    %esi,0x4820(%r13)
   return h->values[c];
   29460:	45 0f b6 94 16 48 1e 	movzbl 0x1e48(%r14,%rdx,1),%r10d
   29467:	00 00 
            if (rs < 0) return stbi__err("bad huffman code","Corrupt JPEG");
   29469:	e9 2f fc ff ff       	jmp    2909d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x178d>
   for (k=FAST_BITS+1 ; ; ++k)
   2946e:	bf 0a 00 00 00       	mov    $0xa,%edi
   29473:	eb a1                	jmp    29416 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b06>
   29475:	bf 0d 00 00 00       	mov    $0xd,%edi
   2947a:	eb 9a                	jmp    29416 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b06>
   2947c:	bf 0e 00 00 00       	mov    $0xe,%edi
   29481:	eb 93                	jmp    29416 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b06>
   29483:	bf 0b 00 00 00       	mov    $0xb,%edi
   if (k > j->code_bits)
   29488:	44 39 df             	cmp    %r11d,%edi
   2948b:	0f 8f c4 fa ff ff    	jg     28f55 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1645>
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   29491:	b9 20 00 00 00       	mov    $0x20,%ecx
   29496:	41 89 c0             	mov    %eax,%r8d
   29499:	48 8d 35 e0 f2 00 00 	lea    0xf2e0(%rip),%rsi        # 38780 <_ZL11stbi__bmask>
   j->code_bits -= k;
   294a0:	41 29 fb             	sub    %edi,%r11d
   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   294a3:	29 f9                	sub    %edi,%ecx
   294a5:	41 d3 e8             	shr    %cl,%r8d
   294a8:	48 63 cf             	movslq %edi,%rcx
   294ab:	44 23 04 8e          	and    (%rsi,%rcx,4),%r8d
   294af:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
   294b4:	48 8d 8c 31 20 08 00 	lea    0x820(%rcx,%rsi,1),%rcx
   294bb:	00 
   294bc:	45 03 44 8d 14       	add    0x14(%r13,%rcx,4),%r8d
   j->code_buffer <<= k;
   294c1:	89 f9                	mov    %edi,%ecx
   j->code_bits -= k;
   294c3:	45 89 9d 24 48 00 00 	mov    %r11d,0x4824(%r13)
   j->code_buffer <<= k;
   294ca:	d3 e0                	shl    %cl,%eax
   return h->values[c];
   294cc:	4d 63 c0             	movslq %r8d,%r8
   294cf:	49 8d 4c 1d 00       	lea    0x0(%r13,%rbx,1),%rcx
   j->code_buffer <<= k;
   294d4:	41 89 85 20 48 00 00 	mov    %eax,0x4820(%r13)
   return h->values[c];
   294db:	41 0f b6 8c 08 48 1e 	movzbl 0x1e48(%r8,%rcx,1),%ecx
   294e2:	00 00 
            if (rs < 0) return stbi__err("bad huffman code","Corrupt JPEG");
   294e4:	e9 12 f9 ff ff       	jmp    28dfb <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x14eb>
   for (k=FAST_BITS+1 ; ; ++k)
   294e9:	bf 0a 00 00 00       	mov    $0xa,%edi
   294ee:	eb 98                	jmp    29488 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b78>
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   294f0:	4c 89 ef             	mov    %r13,%rdi
   294f3:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
   294f8:	e8 e3 63 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
                     j->eob_run += stbi__jpeg_get_bits(j, r);
   294fd:	41 8b 95 44 48 00 00 	mov    0x4844(%r13),%edx
   j->code_bits -= n;
   29504:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
   29509:	41 8b 85 24 48 00 00 	mov    0x4824(%r13),%eax
   29510:	e9 7c fe ff ff       	jmp    29391 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1a81>
   for (k=FAST_BITS+1 ; ; ++k)
   29515:	bf 0c 00 00 00       	mov    $0xc,%edi
   2951a:	e9 f7 fe ff ff       	jmp    29416 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b06>
   2951f:	bf 0f 00 00 00       	mov    $0xf,%edi
   29524:	e9 5f ff ff ff       	jmp    29488 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b78>
   29529:	bf 0e 00 00 00       	mov    $0xe,%edi
   2952e:	e9 55 ff ff ff       	jmp    29488 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b78>
   29533:	bf 0d 00 00 00       	mov    $0xd,%edi
   29538:	e9 4b ff ff ff       	jmp    29488 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b78>
   2953d:	bf 0c 00 00 00       	mov    $0xc,%edi
   29542:	e9 41 ff ff ff       	jmp    29488 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b78>
   29547:	4d 89 ee             	mov    %r13,%r14
   2954a:	e9 bc f0 ff ff       	jmp    2860b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcfb>
   2954f:	bf 10 00 00 00       	mov    $0x10,%edi
   29554:	e9 bd fe ff ff       	jmp    29416 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b06>
   29559:	bf 0f 00 00 00       	mov    $0xf,%edi
   2955e:	e9 b3 fe ff ff       	jmp    29416 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b06>
                  j->eob_run = (1 << r);
   29563:	89 f9                	mov    %edi,%ecx
   29565:	ba 01 00 00 00       	mov    $0x1,%edx
   2956a:	44 8b 64 24 10       	mov    0x10(%rsp),%r12d
   2956f:	44 8b 74 24 18       	mov    0x18(%rsp),%r14d
   29574:	d3 e2                	shl    %cl,%edx
   29576:	48 8b 6c 24 28       	mov    0x28(%rsp),%rbp
   2957b:	b8 01 00 00 00       	mov    $0x1,%eax
   29580:	41 89 95 44 48 00 00 	mov    %edx,0x4844(%r13)
                  if (r)
   29587:	85 ff                	test   %edi,%edi
   29589:	75 19                	jne    295a4 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c94>
                  --j->eob_run;
   2958b:	83 e8 01             	sub    $0x1,%eax
   2958e:	41 89 85 44 48 00 00 	mov    %eax,0x4844(%r13)
                  break;
   29595:	e9 83 f6 ff ff       	jmp    28c1d <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x130d>
   for (k=FAST_BITS+1 ; ; ++k)
   2959a:	bf 10 00 00 00       	mov    $0x10,%edi
   2959f:	e9 e4 fe ff ff       	jmp    29488 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1b78>
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   295a4:	44 39 df             	cmp    %r11d,%edi
   295a7:	7f 43                	jg     295ec <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1cdc>
   j->code_buffer = k & ~stbi__bmask[n];
   295a9:	48 8d 35 d0 f1 00 00 	lea    0xf1d0(%rip),%rsi        # 38780 <_ZL11stbi__bmask>
   295b0:	48 63 f9             	movslq %ecx,%rdi
   k = stbi_lrot(j->code_buffer, n);
   295b3:	41 8b 85 20 48 00 00 	mov    0x4820(%r13),%eax
   j->code_bits -= n;
   295ba:	41 29 cb             	sub    %ecx,%r11d
   j->code_buffer = k & ~stbi__bmask[n];
   295bd:	8b 3c be             	mov    (%rsi,%rdi,4),%edi
   j->code_bits -= n;
   295c0:	45 89 9d 24 48 00 00 	mov    %r11d,0x4824(%r13)
   k = stbi_lrot(j->code_buffer, n);
   295c7:	d3 c0                	rol    %cl,%eax
   j->code_buffer = k & ~stbi__bmask[n];
   295c9:	89 fe                	mov    %edi,%esi
   295cb:	f7 d6                	not    %esi
   295cd:	21 c6                	and    %eax,%esi
   k &= stbi__bmask[n];
   295cf:	21 f8                	and    %edi,%eax
   j->code_buffer = k & ~stbi__bmask[n];
   295d1:	41 89 b5 20 48 00 00 	mov    %esi,0x4820(%r13)
                     j->eob_run += stbi__jpeg_get_bits(j, r);
   295d8:	01 d0                	add    %edx,%eax
   295da:	eb af                	jmp    2958b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c7b>
   295dc:	41 0f b6 b5 28 48 00 	movzbl 0x4828(%r13),%esi
   295e3:	00 
   295e4:	4d 89 ee             	mov    %r13,%r14
   295e7:	e9 1f f0 ff ff       	jmp    2860b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcfb>
   295ec:	89 7c 24 08          	mov    %edi,0x8(%rsp)
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   295f0:	4c 89 ef             	mov    %r13,%rdi
   295f3:	e8 e8 62 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
                     j->eob_run += stbi__jpeg_get_bits(j, r);
   295f8:	41 8b 95 44 48 00 00 	mov    0x4844(%r13),%edx
   j->code_bits -= n;
   295ff:	45 8b 9d 24 48 00 00 	mov    0x4824(%r13),%r11d
   29606:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
   2960a:	eb 9d                	jmp    295a9 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1c99>
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
   2960c:	41 83 bf 24 48 00 00 	cmpl   $0x17,0x4824(%r15)
   29613:	17 
   29614:	0f 8e 96 00 00 00    	jle    296b0 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1da0>
                  if (!STBI__RESTART(z->marker)) return 1;
   2961a:	41 0f b6 b7 28 48 00 	movzbl 0x4828(%r15),%esi
   29621:	00 
   29622:	8d 46 30             	lea    0x30(%rsi),%eax
   29625:	3c 07                	cmp    $0x7,%al
   29627:	77 7f                	ja     296a8 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1d98>
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   29629:	41 8b 87 68 48 00 00 	mov    0x4868(%r15),%eax
   29630:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   j->nomore = 0;
   29635:	41 c7 87 2c 48 00 00 	movl   $0x0,0x482c(%r15)
   2963c:	00 00 00 00 
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   29640:	41 c7 87 d8 47 00 00 	movl   $0x0,0x47d8(%r15)
   29647:	00 00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   2964b:	85 c0                	test   %eax,%eax
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   2964d:	41 c7 87 78 47 00 00 	movl   $0x0,0x4778(%r15)
   29654:	00 00 00 00 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   29658:	0f 44 c2             	cmove  %edx,%eax
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   2965b:	41 c7 87 18 47 00 00 	movl   $0x0,0x4718(%r15)
   29662:	00 00 00 00 
   29666:	41 c7 87 b8 46 00 00 	movl   $0x0,0x46b8(%r15)
   2966d:	00 00 00 00 
   j->code_buffer = 0;
   29671:	49 c7 87 20 48 00 00 	movq   $0x0,0x4820(%r15)
   29678:	00 00 00 00 
   j->marker = STBI__MARKER_none;
   2967c:	41 c6 87 28 48 00 00 	movb   $0xff,0x4828(%r15)
   29683:	ff 
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   29684:	41 89 87 6c 48 00 00 	mov    %eax,0x486c(%r15)
   j->eob_run = 0;
   2968b:	41 c7 87 44 48 00 00 	movl   $0x0,0x4844(%r15)
   29692:	00 00 00 00 
}
   29696:	e9 be f4 ff ff       	jmp    28b59 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1249>
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
   2969b:	4c 89 f7             	mov    %r14,%rdi
   2969e:	e8 3d 62 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   296a3:	e9 94 f2 ff ff       	jmp    2893c <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x102c>
   296a8:	4d 89 fe             	mov    %r15,%r14
   296ab:	e9 5b ef ff ff       	jmp    2860b <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0xcfb>
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
   296b0:	4c 89 ff             	mov    %r15,%rdi
   296b3:	e8 28 62 ff ff       	call   1f8e0 <_ZL24stbi__grow_buffer_unsafeP10stbi__jpeg>
   296b8:	e9 5d ff ff ff       	jmp    2961a <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg+0x1d0a>
   296bd:	0f 1f 00             	nopl   (%rax)

00000000000296c0 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_>:
{
   296c0:	41 57                	push   %r15
   296c2:	41 56                	push   %r14
   296c4:	41 55                	push   %r13
   296c6:	49 89 cd             	mov    %rcx,%r13
   296c9:	41 54                	push   %r12
   296cb:	49 89 f4             	mov    %rsi,%r12
   296ce:	55                   	push   %rbp
   296cf:	48 89 d5             	mov    %rdx,%rbp
   296d2:	53                   	push   %rbx
   296d3:	48 89 fb             	mov    %rdi,%rbx
    return STBI_MALLOC(size);
   296d6:	bf 88 48 00 00       	mov    $0x4888,%edi
{
   296db:	48 83 ec 58          	sub    $0x58,%rsp
    return STBI_MALLOC(size);
   296df:	e8 7c d0 fd ff       	call   6760 <malloc@plt>
   if (!j) return stbi__err("outofmem", "Out of memory");
   296e4:	48 85 c0             	test   %rax,%rax
   296e7:	0f 84 87 08 00 00    	je     29f74 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x8b4>
   j->s = s;
   296ed:	48 89 18             	mov    %rbx,(%rax)
   if (!stbi__decode_jpeg_header(j, STBI__SCAN_header)) {
   296f0:	be 02 00 00 00       	mov    $0x2,%esi
   296f5:	48 89 c7             	mov    %rax,%rdi
   296f8:	49 89 c6             	mov    %rax,%r14
   296fb:	e8 10 d8 ff ff       	call   26f10 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi>
   29700:	85 c0                	test   %eax,%eax
   29702:	74 5c                	je     29760 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0xa0>
   if (x) *x = j->s->img_x;
   29704:	4d 85 e4             	test   %r12,%r12
   29707:	74 09                	je     29712 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x52>
   29709:	49 8b 06             	mov    (%r14),%rax
   2970c:	8b 00                	mov    (%rax),%eax
   2970e:	41 89 04 24          	mov    %eax,(%r12)
   if (y) *y = j->s->img_y;
   29712:	48 85 ed             	test   %rbp,%rbp
   29715:	74 09                	je     29720 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x60>
   29717:	49 8b 06             	mov    (%r14),%rax
   2971a:	8b 40 04             	mov    0x4(%rax),%eax
   2971d:	89 45 00             	mov    %eax,0x0(%rbp)
   if (comp) *comp = j->s->img_n >= 3 ? 3 : 1;
   29720:	4d 85 ed             	test   %r13,%r13
   29723:	0f 84 1f 01 00 00    	je     29848 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x188>
   29729:	49 8b 06             	mov    (%r14),%rax
   STBI_FREE(j);
   2972c:	4c 89 f7             	mov    %r14,%rdi
   if (comp) *comp = j->s->img_n >= 3 ? 3 : 1;
   2972f:	83 78 08 03          	cmpl   $0x3,0x8(%rax)
   29733:	0f 9d c0             	setge  %al
   29736:	0f b6 c0             	movzbl %al,%eax
   29739:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax
   2973d:	41 89 45 00          	mov    %eax,0x0(%r13)
   STBI_FREE(j);
   29741:	e8 5a cf fd ff       	call   66a0 <free@plt>
   if (stbi__jpeg_info(s, x, y, comp)) return 1;
   29746:	41 be 01 00 00 00    	mov    $0x1,%r14d
}
   2974c:	48 83 c4 58          	add    $0x58,%rsp
   29750:	44 89 f0             	mov    %r14d,%eax
   29753:	5b                   	pop    %rbx
   29754:	5d                   	pop    %rbp
   29755:	41 5c                	pop    %r12
   29757:	41 5d                	pop    %r13
   29759:	41 5e                	pop    %r14
   2975b:	41 5f                	pop    %r15
   2975d:	c3                   	ret
   2975e:	66 90                	xchg   %ax,%ax
      stbi__rewind( j->s );
   29760:	49 8b 06             	mov    (%r14),%rax
   STBI_FREE(j);
   29763:	4c 89 f7             	mov    %r14,%rdi
   s->img_buffer = s->img_buffer_original;
   29766:	f3 0f 6f 80 d0 00 00 	movdqu 0xd0(%rax),%xmm0
   2976d:	00 
   2976e:	0f 11 80 c0 00 00 00 	movups %xmm0,0xc0(%rax)
   STBI_FREE(j);
   29775:	e8 26 cf fd ff       	call   66a0 <free@plt>
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   2977a:	4c 8d 7c 24 20       	lea    0x20(%rsp),%r15
   2977f:	31 d2                	xor    %edx,%edx
   29781:	be 02 00 00 00       	mov    $0x2,%esi
   p.s = s;
   29786:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   2978b:	4c 89 ff             	mov    %r15,%rdi
   2978e:	e8 dd b3 ff ff       	call   24b70 <_ZL20stbi__parse_png_fileP9stbi__pngii>
   29793:	41 89 c6             	mov    %eax,%r14d
   29796:	85 c0                	test   %eax,%eax
   29798:	74 3e                	je     297d8 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x118>
   if (x) *x = p->s->img_x;
   2979a:	4d 85 e4             	test   %r12,%r12
   2979d:	74 0b                	je     297aa <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0xea>
   2979f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   297a4:	8b 00                	mov    (%rax),%eax
   297a6:	41 89 04 24          	mov    %eax,(%r12)
   if (y) *y = p->s->img_y;
   297aa:	48 85 ed             	test   %rbp,%rbp
   297ad:	74 0b                	je     297ba <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0xfa>
   297af:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   297b4:	8b 40 04             	mov    0x4(%rax),%eax
   297b7:	89 45 00             	mov    %eax,0x0(%rbp)
   if (comp) *comp = p->s->img_n;
   297ba:	4d 85 ed             	test   %r13,%r13
   297bd:	0f 84 83 ff ff ff    	je     29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   297c3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   297c8:	8b 40 08             	mov    0x8(%rax),%eax
   297cb:	41 89 45 00          	mov    %eax,0x0(%r13)
   297cf:	e9 72 ff ff ff       	jmp    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   297d4:	0f 1f 40 00          	nopl   0x0(%rax)
   297d8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    return STBI_MALLOC(size);
   297dd:	bf 70 88 00 00       	mov    $0x8870,%edi
   s->img_buffer = s->img_buffer_original;
   297e2:	f3 0f 6f 88 d0 00 00 	movdqu 0xd0(%rax),%xmm1
   297e9:	00 
   297ea:	0f 11 88 c0 00 00 00 	movups %xmm1,0xc0(%rax)
    return STBI_MALLOC(size);
   297f1:	e8 6a cf fd ff       	call   6760 <malloc@plt>
   297f6:	48 89 c6             	mov    %rax,%rsi
   if (!g) return stbi__err("outofmem", "Out of memory");
   297f9:	48 85 c0             	test   %rax,%rax
   297fc:	0f 84 a5 07 00 00    	je     29fa7 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x8e7>
   if (!stbi__gif_header(s, g, comp, 1)) {
   29802:	b9 01 00 00 00       	mov    $0x1,%ecx
   29807:	4c 89 ea             	mov    %r13,%rdx
   2980a:	48 89 df             	mov    %rbx,%rdi
   2980d:	48 89 04 24          	mov    %rax,(%rsp)
   29811:	e8 6a 6b ff ff       	call   20380 <_ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii>
   29816:	48 8b 34 24          	mov    (%rsp),%rsi
   2981a:	85 c0                	test   %eax,%eax
   2981c:	74 3a                	je     29858 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x198>
   if (x) *x = g->w;
   2981e:	4d 85 e4             	test   %r12,%r12
   29821:	74 06                	je     29829 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x169>
   29823:	8b 06                	mov    (%rsi),%eax
   29825:	41 89 04 24          	mov    %eax,(%r12)
   if (y) *y = g->h;
   29829:	48 85 ed             	test   %rbp,%rbp
   2982c:	74 06                	je     29834 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x174>
   2982e:	8b 46 04             	mov    0x4(%rsi),%eax
   29831:	89 45 00             	mov    %eax,0x0(%rbp)
   STBI_FREE(g);
   29834:	48 89 f7             	mov    %rsi,%rdi
   29837:	e8 64 ce fd ff       	call   66a0 <free@plt>
   return 1;
   2983c:	e9 05 ff ff ff       	jmp    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   29841:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   STBI_FREE(j);
   29848:	4c 89 f7             	mov    %r14,%rdi
   2984b:	e8 50 ce fd ff       	call   66a0 <free@plt>
   return result;
   29850:	e9 f1 fe ff ff       	jmp    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   29855:	0f 1f 00             	nopl   (%rax)
      STBI_FREE(g);
   29858:	48 89 f7             	mov    %rsi,%rdi
   2985b:	e8 40 ce fd ff       	call   66a0 <free@plt>
   s->img_buffer = s->img_buffer_original;
   29860:	f3 0f 6f 9b d0 00 00 	movdqu 0xd0(%rbx),%xmm3
   29867:	00 
   29868:	0f 11 9b c0 00 00 00 	movups %xmm3,0xc0(%rbx)
   p = stbi__bmp_parse_header(s, &info);
   2986f:	4c 89 fe             	mov    %r15,%rsi
   29872:	48 89 df             	mov    %rbx,%rdi
   info.all_a = 255;
   29875:	c7 44 24 3c ff 00 00 	movl   $0xff,0x3c(%rsp)
   2987c:	00 
   p = stbi__bmp_parse_header(s, &info);
   2987d:	e8 ae 6d ff ff       	call   20630 <_ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data.constprop.0>
   if (p == NULL) {
   29882:	48 85 c0             	test   %rax,%rax
   29885:	74 49                	je     298d0 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x210>
   if (x) *x = s->img_x;
   29887:	4d 85 e4             	test   %r12,%r12
   2988a:	74 06                	je     29892 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x1d2>
   2988c:	8b 03                	mov    (%rbx),%eax
   2988e:	41 89 04 24          	mov    %eax,(%r12)
   if (y) *y = s->img_y;
   29892:	48 85 ed             	test   %rbp,%rbp
   29895:	0f 84 9d 01 00 00    	je     29a38 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x378>
   2989b:	8b 43 04             	mov    0x4(%rbx),%eax
   2989e:	89 45 00             	mov    %eax,0x0(%rbp)
   if (comp) {
   298a1:	4d 85 ed             	test   %r13,%r13
   298a4:	0f 84 9c fe ff ff    	je     29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
      if (info.bpp == 24 && info.ma == 0xff000000)
   298aa:	83 7c 24 20 18       	cmpl   $0x18,0x20(%rsp)
   298af:	8b 44 24 38          	mov    0x38(%rsp),%eax
   298b3:	0f 84 97 01 00 00    	je     29a50 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x390>
         *comp = info.ma ? 4 : 3;
   298b9:	83 f8 01             	cmp    $0x1,%eax
   298bc:	b8 03 00 00 00       	mov    $0x3,%eax
   298c1:	83 d8 ff             	sbb    $0xffffffff,%eax
   298c4:	41 89 45 00          	mov    %eax,0x0(%r13)
   298c8:	e9 79 fe ff ff       	jmp    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   298cd:	0f 1f 00             	nopl   (%rax)
   if (!x) x = &dummy;
   298d0:	4d 85 e4             	test   %r12,%r12
   298d3:	4c 89 e0             	mov    %r12,%rax
   s->img_buffer = s->img_buffer_original;
   298d6:	f3 0f 6f 93 d0 00 00 	movdqu 0xd0(%rbx),%xmm2
   298dd:	00 
   if (stbi__get32be(s) != 0x38425053) {
   298de:	48 89 df             	mov    %rbx,%rdi
   if (!x) x = &dummy;
   298e1:	49 0f 44 c7          	cmove  %r15,%rax
   if (!y) y = &dummy;
   298e5:	48 85 ed             	test   %rbp,%rbp
   s->img_buffer = s->img_buffer_original;
   298e8:	0f 11 93 c0 00 00 00 	movups %xmm2,0xc0(%rbx)
   if (!x) x = &dummy;
   298ef:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   if (!y) y = &dummy;
   298f4:	4c 89 f8             	mov    %r15,%rax
   298f7:	48 0f 45 c5          	cmovne %rbp,%rax
   if (!comp) comp = &dummy;
   298fb:	4d 85 ed             	test   %r13,%r13
   if (!y) y = &dummy;
   298fe:	48 89 04 24          	mov    %rax,(%rsp)
   if (!comp) comp = &dummy;
   29902:	4c 89 f8             	mov    %r15,%rax
   29905:	49 0f 45 c5          	cmovne %r13,%rax
   29909:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   if (stbi__get32be(s) != 0x38425053) {
   2990e:	e8 ed 4f ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   29913:	3d 53 50 42 38       	cmp    $0x38425053,%eax
   29918:	0f 84 52 01 00 00    	je     29a70 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x3b0>
   if (!x) x = &dummy;
   2991e:	4d 85 e4             	test   %r12,%r12
   29921:	4c 89 f9             	mov    %r15,%rcx
   s->img_buffer = s->img_buffer_original;
   29924:	48 8b 83 d0 00 00 00 	mov    0xd0(%rbx),%rax
   s->img_buffer_end = s->img_buffer_original_end;
   2992b:	48 8b 93 d8 00 00 00 	mov    0xd8(%rbx),%rdx
   if (!x) x = &dummy;
   29932:	49 0f 45 cc          	cmovne %r12,%rcx
   if (!y) y = &dummy;
   29936:	48 85 ed             	test   %rbp,%rbp
   s->img_buffer = s->img_buffer_original;
   29939:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   if (!x) x = &dummy;
   29940:	48 89 0c 24          	mov    %rcx,(%rsp)
   if (!y) y = &dummy;
   29944:	4c 89 f9             	mov    %r15,%rcx
   29947:	48 0f 45 cd          	cmovne %rbp,%rcx
   if (!comp) comp = &dummy;
   2994b:	4d 85 ed             	test   %r13,%r13
   s->img_buffer_end = s->img_buffer_original_end;
   2994e:	48 89 93 c8 00 00 00 	mov    %rdx,0xc8(%rbx)
   if (!comp) comp = &dummy;
   29955:	4d 0f 45 fd          	cmovne %r13,%r15
   if (!y) y = &dummy;
   29959:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   if (!comp) comp = &dummy;
   2995e:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   29963:	48 39 d0             	cmp    %rdx,%rax
   29966:	0f 83 8c 01 00 00    	jae    29af8 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x438>
      return *s->img_buffer++;
   2996c:	48 8d 50 01          	lea    0x1(%rax),%rdx
   29970:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   29977:	0f b6 10             	movzbl (%rax),%edx
      if (stbi__get8(s) != (stbi_uc)str[i])
   2997a:	80 fa 53             	cmp    $0x53,%dl
   2997d:	75 1f                	jne    2999e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2de>
   if (s->img_buffer < s->img_buffer_end)
   2997f:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   29986:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   2998d:	0f 82 c5 01 00 00    	jb     29b58 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x498>
   if (s->read_from_callbacks) {
   29993:	8b 7b 30             	mov    0x30(%rbx),%edi
   29996:	85 ff                	test   %edi,%edi
   29998:	0f 85 38 04 00 00    	jne    29dd6 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x716>
   s->img_buffer = s->img_buffer_original;
   2999e:	f3 0f 6f a3 d0 00 00 	movdqu 0xd0(%rbx),%xmm4
   299a5:	00 
   299a6:	0f 11 a3 c0 00 00 00 	movups %xmm4,0xc0(%rbx)
   if (stbi__pnm_info(s, x, y, comp))  return 1;
   299ad:	4c 89 e9             	mov    %r13,%rcx
   299b0:	48 89 ea             	mov    %rbp,%rdx
   299b3:	4c 89 e6             	mov    %r12,%rsi
   299b6:	48 89 df             	mov    %rbx,%rdi
   299b9:	e8 c2 ae ff ff       	call   24880 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_>
   299be:	85 c0                	test   %eax,%eax
   299c0:	0f 85 80 fd ff ff    	jne    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   if (stbi__hdr_info(s, x, y, comp))  return 1;
   299c6:	4c 89 e9             	mov    %r13,%rcx
   299c9:	48 89 ea             	mov    %rbp,%rdx
   299cc:	4c 89 e6             	mov    %r12,%rsi
   299cf:	48 89 df             	mov    %rbx,%rdi
   299d2:	e8 c9 4d ff ff       	call   1e7a0 <_ZL14stbi__hdr_infoP13stbi__contextPiS1_S1_>
   299d7:	41 89 c6             	mov    %eax,%r14d
   299da:	85 c0                	test   %eax,%eax
   299dc:	0f 85 64 fd ff ff    	jne    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
    stbi__get8(s);                   // discard Offset
   299e2:	48 89 df             	mov    %rbx,%rdi
   299e5:	e8 b6 20 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
    tga_colormap_type = stbi__get8(s); // colormap type
   299ea:	48 89 df             	mov    %rbx,%rdi
   299ed:	e8 ae 20 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   299f2:	44 0f b6 f8          	movzbl %al,%r15d
    if( tga_colormap_type > 1 ) {
   299f6:	41 83 ff 01          	cmp    $0x1,%r15d
   299fa:	0f 8e 47 04 00 00    	jle    29e47 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x787>
   s->img_buffer = s->img_buffer_original;
   29a00:	48 8b 83 d0 00 00 00 	mov    0xd0(%rbx),%rax
   29a07:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
   s->img_buffer_end = s->img_buffer_original_end;
   29a0e:	48 8b 83 d8 00 00 00 	mov    0xd8(%rbx),%rax
   29a15:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
   stbi__g_failure_reason = str;
   29a1c:	48 8d 05 81 e4 00 00 	lea    0xe481(%rip),%rax        # 37ea4 <_ZSt19piecewise_construct+0x55d>
   29a23:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   29a2a:	ff ff 
   return stbi__err("unknown image type", "Image not of any known type, or corrupt");
   29a2c:	e9 1b fd ff ff       	jmp    2974c <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x8c>
   29a31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   if (comp) {
   29a38:	4d 85 ed             	test   %r13,%r13
   29a3b:	0f 85 69 fe ff ff    	jne    298aa <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x1ea>
   29a41:	e9 00 fd ff ff       	jmp    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   29a46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   29a4d:	00 00 00 
      if (info.bpp == 24 && info.ma == 0xff000000)
   29a50:	3d 00 00 00 ff       	cmp    $0xff000000,%eax
   29a55:	0f 85 5e fe ff ff    	jne    298b9 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x1f9>
         *comp = 3;
   29a5b:	41 c7 45 00 03 00 00 	movl   $0x3,0x0(%r13)
   29a62:	00 
   29a63:	e9 de fc ff ff       	jmp    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   29a68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   29a6f:	00 
   if (stbi__get16be(s) != 1) {
   29a70:	48 89 df             	mov    %rbx,%rdi
   29a73:	e8 38 48 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   29a78:	83 f8 01             	cmp    $0x1,%eax
   29a7b:	0f 85 9d fe ff ff    	jne    2991e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x25e>
   if (n < 0) {
   29a81:	48 89 df             	mov    %rbx,%rdi
   29a84:	be 06 00 00 00       	mov    $0x6,%esi
   29a89:	e8 82 90 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   channelCount = stbi__get16be(s);
   29a8e:	48 89 df             	mov    %rbx,%rdi
   29a91:	e8 1a 48 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   if (channelCount < 0 || channelCount > 16) {
   29a96:	83 f8 10             	cmp    $0x10,%eax
   29a99:	0f 87 7f fe ff ff    	ja     2991e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x25e>
   *y = stbi__get32be(s);
   29a9f:	48 89 df             	mov    %rbx,%rdi
   29aa2:	e8 59 4e ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   29aa7:	48 8b 0c 24          	mov    (%rsp),%rcx
   *x = stbi__get32be(s);
   29aab:	48 89 df             	mov    %rbx,%rdi
   *y = stbi__get32be(s);
   29aae:	89 01                	mov    %eax,(%rcx)
   *x = stbi__get32be(s);
   29ab0:	e8 4b 4e ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   29ab5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   depth = stbi__get16be(s);
   29aba:	48 89 df             	mov    %rbx,%rdi
   *x = stbi__get32be(s);
   29abd:	89 01                	mov    %eax,(%rcx)
   depth = stbi__get16be(s);
   29abf:	e8 ec 47 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   if (depth != 8 && depth != 16) {
   29ac4:	83 e8 08             	sub    $0x8,%eax
   29ac7:	83 e0 f7             	and    $0xfffffff7,%eax
   29aca:	0f 85 4e fe ff ff    	jne    2991e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x25e>
   if (stbi__get16be(s) != 3) {
   29ad0:	48 89 df             	mov    %rbx,%rdi
   29ad3:	e8 d8 47 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   29ad8:	83 f8 03             	cmp    $0x3,%eax
   29adb:	0f 85 3d fe ff ff    	jne    2991e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x25e>
   *comp = 4;
   29ae1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   29ae6:	c7 00 04 00 00 00    	movl   $0x4,(%rax)
   return 1;
   29aec:	e9 55 fc ff ff       	jmp    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   29af1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   29af8:	44 8b 43 30          	mov    0x30(%rbx),%r8d
   29afc:	45 85 c0             	test   %r8d,%r8d
   29aff:	0f 84 99 fe ff ff    	je     2999e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2de>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   29b05:	4c 8d 7b 38          	lea    0x38(%rbx),%r15
   29b09:	8b 53 34             	mov    0x34(%rbx),%edx
   29b0c:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   29b10:	4c 89 fe             	mov    %r15,%rsi
   29b13:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   29b16:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   29b1d:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   29b21:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   29b28:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   29b2e:	85 c0                	test   %eax,%eax
   29b30:	0f 84 6e 02 00 00    	je     29da4 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x6e4>
      s->img_buffer_end = s->buffer_start + n;
   29b36:	48 98                	cltq
      return *s->img_buffer++;
   29b38:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   29b3f:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   29b43:	49 01 c7             	add    %rax,%r15
   29b46:	4c 89 bb c8 00 00 00 	mov    %r15,0xc8(%rbx)
      return *s->img_buffer++;
   29b4d:	e9 28 fe ff ff       	jmp    2997a <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2ba>
   29b52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   29b58:	48 8d 50 01          	lea    0x1(%rax),%rdx
   29b5c:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   29b63:	0f b6 10             	movzbl (%rax),%edx
      if (stbi__get8(s) != (stbi_uc)str[i])
   29b66:	80 fa 80             	cmp    $0x80,%dl
   29b69:	0f 85 2f fe ff ff    	jne    2999e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2de>
   if (s->img_buffer < s->img_buffer_end)
   29b6f:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   29b76:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   29b7d:	0f 82 b5 01 00 00    	jb     29d38 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x678>
   if (s->read_from_callbacks) {
   29b83:	8b 73 30             	mov    0x30(%rbx),%esi
   29b86:	85 f6                	test   %esi,%esi
   29b88:	0f 84 10 fe ff ff    	je     2999e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2de>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   29b8e:	4c 8d 7b 38          	lea    0x38(%rbx),%r15
   29b92:	8b 53 34             	mov    0x34(%rbx),%edx
   29b95:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   29b99:	4c 89 fe             	mov    %r15,%rsi
   29b9c:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   29b9f:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   29ba6:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   29baa:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   29bb1:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   29bb7:	85 c0                	test   %eax,%eax
   29bb9:	0f 84 e5 01 00 00    	je     29da4 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x6e4>
      s->img_buffer_end = s->buffer_start + n;
   29bbf:	48 98                	cltq
      return *s->img_buffer++;
   29bc1:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   29bc8:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   29bcc:	49 01 c7             	add    %rax,%r15
   29bcf:	4c 89 bb c8 00 00 00 	mov    %r15,0xc8(%rbx)
      return *s->img_buffer++;
   29bd6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   29bdd:	00 00 00 
      if (stbi__get8(s) != (stbi_uc)str[i])
   29be0:	80 fa f6             	cmp    $0xf6,%dl
   29be3:	0f 85 b5 fd ff ff    	jne    2999e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2de>
   if (s->img_buffer < s->img_buffer_end)
   29be9:	48 8b 83 c0 00 00 00 	mov    0xc0(%rbx),%rax
   29bf0:	48 3b 83 c8 00 00 00 	cmp    0xc8(%rbx),%rax
   29bf7:	0f 83 53 01 00 00    	jae    29d50 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x690>
      return *s->img_buffer++;
   29bfd:	48 8d 50 01          	lea    0x1(%rax),%rdx
   29c01:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   29c08:	0f b6 10             	movzbl (%rax),%edx
      if (stbi__get8(s) != (stbi_uc)str[i])
   29c0b:	80 fa 34             	cmp    $0x34,%dl
   29c0e:	0f 85 8a fd ff ff    	jne    2999e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2de>
   if (n < 0) {
   29c14:	be 58 00 00 00       	mov    $0x58,%esi
   29c19:	48 89 df             	mov    %rbx,%rdi
   29c1c:	e8 ef 8e fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   *x = stbi__get16be(s);
   29c21:	48 89 df             	mov    %rbx,%rdi
   29c24:	e8 87 46 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   29c29:	48 8b 0c 24          	mov    (%rsp),%rcx
   *y = stbi__get16be(s);
   29c2d:	48 89 df             	mov    %rbx,%rdi
   *x = stbi__get16be(s);
   29c30:	89 01                	mov    %eax,(%rcx)
   *y = stbi__get16be(s);
   29c32:	e8 79 46 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   29c37:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   if (s->io.read) {
   29c3c:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   *y = stbi__get16be(s);
   29c41:	89 01                	mov    %eax,(%rcx)
   if (s->io.read) {
   29c43:	74 16                	je     29c5b <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x59b>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   29c45:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   29c49:	ff 53 20             	call   *0x20(%rbx)
   29c4c:	85 c0                	test   %eax,%eax
   29c4e:	74 1f                	je     29c6f <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x5af>
      if (s->read_from_callbacks == 0) return 1;
   29c50:	8b 53 30             	mov    0x30(%rbx),%edx
   29c53:	85 d2                	test   %edx,%edx
   29c55:	0f 84 67 01 00 00    	je     29dc2 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x702>
   if (stbi__at_eof(s)) {
   29c5b:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   29c62:	48 39 83 c0 00 00 00 	cmp    %rax,0xc0(%rbx)
   29c69:	0f 83 53 01 00 00    	jae    29dc2 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x702>
   if ( (*x) != 0 && (1 << 28) / (*x) < (*y)) {
   29c6f:	48 8b 04 24          	mov    (%rsp),%rax
   29c73:	8b 08                	mov    (%rax),%ecx
   29c75:	85 c9                	test   %ecx,%ecx
   29c77:	74 16                	je     29c8f <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x5cf>
   29c79:	b8 00 00 00 10       	mov    $0x10000000,%eax
   29c7e:	31 d2                	xor    %edx,%edx
   29c80:	f7 f9                	idiv   %ecx
   29c82:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   29c87:	3b 01                	cmp    (%rcx),%eax
   29c89:	0f 8c a4 01 00 00    	jl     29e33 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x773>
   if (n < 0) {
   29c8f:	be 08 00 00 00       	mov    $0x8,%esi
   29c94:	48 89 df             	mov    %rbx,%rdi
   29c97:	41 bf 0b 00 00 00    	mov    $0xb,%r15d
   29c9d:	e8 6e 8e fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
      if (num_packets==sizeof(packets)/sizeof(packets[0]))
   29ca2:	41 83 ef 01          	sub    $0x1,%r15d
   29ca6:	0f 84 01 fd ff ff    	je     299ad <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2ed>
      chained = stbi__get8(s);
   29cac:	48 89 df             	mov    %rbx,%rdi
   29caf:	e8 ec 1d ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
      packet->size    = stbi__get8(s);
   29cb4:	48 89 df             	mov    %rbx,%rdi
      chained = stbi__get8(s);
   29cb7:	88 44 24 08          	mov    %al,0x8(%rsp)
      packet->size    = stbi__get8(s);
   29cbb:	e8 e0 1d ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
      packet->type    = stbi__get8(s);
   29cc0:	48 89 df             	mov    %rbx,%rdi
      packet->size    = stbi__get8(s);
   29cc3:	88 04 24             	mov    %al,(%rsp)
      packet->type    = stbi__get8(s);
   29cc6:	e8 d5 1d ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
      packet->channel = stbi__get8(s);
   29ccb:	48 89 df             	mov    %rbx,%rdi
   29cce:	e8 cd 1d ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
      act_comp |= packet->channel;
   29cd3:	0f b6 c0             	movzbl %al,%eax
   29cd6:	41 09 c6             	or     %eax,%r14d
   if (s->io.read) {
   29cd9:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
   29cde:	74 16                	je     29cf6 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x636>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   29ce0:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   29ce4:	ff 53 20             	call   *0x20(%rbx)
   29ce7:	85 c0                	test   %eax,%eax
   29ce9:	74 1f                	je     29d0a <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x64a>
      if (s->read_from_callbacks == 0) return 1;
   29ceb:	8b 43 30             	mov    0x30(%rbx),%eax
   29cee:	85 c0                	test   %eax,%eax
   29cf0:	0f 84 29 01 00 00    	je     29e1f <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x75f>
      if (stbi__at_eof(s)) {
   29cf6:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
   29cfd:	48 39 83 c0 00 00 00 	cmp    %rax,0xc0(%rbx)
   29d04:	0f 83 15 01 00 00    	jae    29e1f <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x75f>
      if (packet->size != 8) {
   29d0a:	80 3c 24 08          	cmpb   $0x8,(%rsp)
   29d0e:	0f 85 1f 01 00 00    	jne    29e33 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x773>
   } while (chained);
   29d14:	80 7c 24 08 00       	cmpb   $0x0,0x8(%rsp)
   29d19:	75 87                	jne    29ca2 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x5e2>
   *comp = (act_comp & 0x10 ? 4 : 3);
   29d1b:	41 83 e6 10          	and    $0x10,%r14d
   29d1f:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   29d24:	41 83 fe 01          	cmp    $0x1,%r14d
   29d28:	19 c0                	sbb    %eax,%eax
   29d2a:	83 c0 04             	add    $0x4,%eax
   29d2d:	89 01                	mov    %eax,(%rcx)
   return 1;
   29d2f:	e9 12 fa ff ff       	jmp    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   29d34:	0f 1f 40 00          	nopl   0x0(%rax)
      return *s->img_buffer++;
   29d38:	48 8d 50 01          	lea    0x1(%rax),%rdx
   29d3c:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
   29d43:	0f b6 10             	movzbl (%rax),%edx
   29d46:	e9 95 fe ff ff       	jmp    29be0 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x520>
   29d4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   29d50:	8b 4b 30             	mov    0x30(%rbx),%ecx
   29d53:	85 c9                	test   %ecx,%ecx
   29d55:	0f 84 43 fc ff ff    	je     2999e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2de>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   29d5b:	4c 8d 7b 38          	lea    0x38(%rbx),%r15
   29d5f:	8b 53 34             	mov    0x34(%rbx),%edx
   29d62:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   29d66:	4c 89 fe             	mov    %r15,%rsi
   29d69:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   29d6c:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   29d73:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   29d77:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   29d7e:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   29d84:	85 c0                	test   %eax,%eax
   29d86:	74 1c                	je     29da4 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x6e4>
      s->img_buffer_end = s->buffer_start + n;
   29d88:	48 98                	cltq
      return *s->img_buffer++;
   29d8a:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   29d91:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   29d95:	49 01 c7             	add    %rax,%r15
   29d98:	4c 89 bb c8 00 00 00 	mov    %r15,0xc8(%rbx)
      return *s->img_buffer++;
   29d9f:	e9 67 fe ff ff       	jmp    29c0b <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x54b>
      s->read_from_callbacks = 0;
   29da4:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%rbx)
      *s->img_buffer = 0;
   29dab:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   29daf:	48 89 8b c8 00 00 00 	mov    %rcx,0xc8(%rbx)
      return *s->img_buffer++;
   29db6:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   29dbd:	e9 dc fb ff ff       	jmp    2999e <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2de>
   s->img_buffer = s->img_buffer_original;
   29dc2:	f3 0f 6f ab d0 00 00 	movdqu 0xd0(%rbx),%xmm5
   29dc9:	00 
   29dca:	0f 11 ab c0 00 00 00 	movups %xmm5,0xc0(%rbx)
      return 0;
   29dd1:	e9 d7 fb ff ff       	jmp    299ad <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2ed>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   29dd6:	4c 8d 7b 38          	lea    0x38(%rbx),%r15
   29dda:	8b 53 34             	mov    0x34(%rbx),%edx
   29ddd:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
   29de1:	4c 89 fe             	mov    %r15,%rsi
   29de4:	ff 53 10             	call   *0x10(%rbx)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   29de7:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
      s->img_buffer_end = s->buffer_start+1;
   29dee:	48 8d 4b 39          	lea    0x39(%rbx),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   29df2:	48 2b 93 d0 00 00 00 	sub    0xd0(%rbx),%rdx
   29df9:	01 93 b8 00 00 00    	add    %edx,0xb8(%rbx)
   if (n == 0) {
   29dff:	85 c0                	test   %eax,%eax
   29e01:	74 a1                	je     29da4 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x6e4>
      s->img_buffer_end = s->buffer_start + n;
   29e03:	48 98                	cltq
      return *s->img_buffer++;
   29e05:	48 89 8b c0 00 00 00 	mov    %rcx,0xc0(%rbx)
   29e0c:	0f b6 53 38          	movzbl 0x38(%rbx),%edx
      s->img_buffer_end = s->buffer_start + n;
   29e10:	49 01 c7             	add    %rax,%r15
   29e13:	4c 89 bb c8 00 00 00 	mov    %r15,0xc8(%rbx)
      return *s->img_buffer++;
   29e1a:	e9 47 fd ff ff       	jmp    29b66 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x4a6>
   s->img_buffer = s->img_buffer_original;
   29e1f:	f3 0f 6f b3 d0 00 00 	movdqu 0xd0(%rbx),%xmm6
   29e26:	00 
   29e27:	0f 11 b3 c0 00 00 00 	movups %xmm6,0xc0(%rbx)
          return 0;
   29e2e:	e9 7a fb ff ff       	jmp    299ad <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2ed>
   s->img_buffer = s->img_buffer_original;
   29e33:	f3 0f 6f bb d0 00 00 	movdqu 0xd0(%rbx),%xmm7
   29e3a:	00 
   29e3b:	0f 11 bb c0 00 00 00 	movups %xmm7,0xc0(%rbx)
          return 0;
   29e42:	e9 66 fb ff ff       	jmp    299ad <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x2ed>
    tga_image_type = stbi__get8(s); // image type
   29e47:	48 89 df             	mov    %rbx,%rdi
   29e4a:	e8 51 1c ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   29e4f:	88 04 24             	mov    %al,(%rsp)
    if ( tga_colormap_type == 1 ) { // colormapped (paletted) image
   29e52:	41 83 ff 01          	cmp    $0x1,%r15d
   29e56:	0f 84 c3 00 00 00    	je     29f1f <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x85f>
        if ( (tga_image_type != 2) && (tga_image_type != 3) && (tga_image_type != 10) && (tga_image_type != 11) ) {
   29e5c:	0f b6 04 24          	movzbl (%rsp),%eax
   29e60:	83 e0 f6             	and    $0xfffffff6,%eax
   29e63:	3c 02                	cmp    $0x2,%al
   29e65:	0f 85 95 fb ff ff    	jne    29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
   if (n < 0) {
   29e6b:	be 09 00 00 00       	mov    $0x9,%esi
   29e70:	48 89 df             	mov    %rbx,%rdi
        tga_colormap_bpp = 0;
   29e73:	45 31 ff             	xor    %r15d,%r15d
   29e76:	e8 95 8c fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
    tga_w = stbi__get16le(s);
   29e7b:	48 89 df             	mov    %rbx,%rdi
   29e7e:	e8 5d 45 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   29e83:	89 44 24 08          	mov    %eax,0x8(%rsp)
    if( tga_w < 1 ) {
   29e87:	85 c0                	test   %eax,%eax
   29e89:	0f 8e 71 fb ff ff    	jle    29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
    tga_h = stbi__get16le(s);
   29e8f:	48 89 df             	mov    %rbx,%rdi
   29e92:	e8 49 45 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
    if( tga_h < 1 ) {
   29e97:	85 c0                	test   %eax,%eax
   29e99:	0f 8e 61 fb ff ff    	jle    29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
    tga_bits_per_pixel = stbi__get8(s); // bits per pixel
   29e9f:	48 89 df             	mov    %rbx,%rdi
   29ea2:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
   29ea6:	e8 f5 1b ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
    stbi__get8(s); // ignore alpha bits
   29eab:	48 89 df             	mov    %rbx,%rdi
    tga_bits_per_pixel = stbi__get8(s); // bits per pixel
   29eae:	88 44 24 10          	mov    %al,0x10(%rsp)
    stbi__get8(s); // ignore alpha bits
   29eb2:	e8 e9 1b ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
    if (tga_colormap_bpp != 0) {
   29eb7:	45 85 ff             	test   %r15d,%r15d
   29eba:	0f b6 4c 24 10       	movzbl 0x10(%rsp),%ecx
   29ebf:	8b 74 24 1c          	mov    0x1c(%rsp),%esi
   29ec3:	0f 84 c0 00 00 00    	je     29f89 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x8c9>
        if((tga_bits_per_pixel != 8) && (tga_bits_per_pixel != 16)) {
   29ec9:	83 e9 08             	sub    $0x8,%ecx
   29ecc:	80 e1 f7             	and    $0xf7,%cl
   29ecf:	0f 85 2b fb ff ff    	jne    29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
   switch(bits_per_pixel) {
   29ed5:	41 83 ff 10          	cmp    $0x10,%r15d
   29ed9:	0f 8f dd 00 00 00    	jg     29fbc <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x8fc>
   29edf:	41 83 ff 0e          	cmp    $0xe,%r15d
   29ee3:	0f 8f f6 00 00 00    	jg     29fdf <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x91f>
      case 8:  return STBI_grey;
   29ee9:	b8 01 00 00 00       	mov    $0x1,%eax
   switch(bits_per_pixel) {
   29eee:	41 83 ff 08          	cmp    $0x8,%r15d
   29ef2:	0f 85 08 fb ff ff    	jne    29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
    if (x) *x = tga_w;
   29ef8:	4d 85 e4             	test   %r12,%r12
   29efb:	74 08                	je     29f05 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x845>
   29efd:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
   29f01:	41 89 0c 24          	mov    %ecx,(%r12)
    if (y) *y = tga_h;
   29f05:	48 85 ed             	test   %rbp,%rbp
   29f08:	74 03                	je     29f0d <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x84d>
   29f0a:	89 75 00             	mov    %esi,0x0(%rbp)
    if (comp) *comp = tga_comp;
   29f0d:	4d 85 ed             	test   %r13,%r13
   29f10:	0f 84 30 f8 ff ff    	je     29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
   29f16:	41 89 45 00          	mov    %eax,0x0(%r13)
   29f1a:	e9 27 f8 ff ff       	jmp    29746 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x86>
        if (tga_image_type != 1 && tga_image_type != 9) {
   29f1f:	83 e0 f7             	and    $0xfffffff7,%eax
   29f22:	2c 01                	sub    $0x1,%al
   29f24:	0f 85 d6 fa ff ff    	jne    29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
   if (n < 0) {
   29f2a:	be 04 00 00 00       	mov    $0x4,%esi
   29f2f:	48 89 df             	mov    %rbx,%rdi
   29f32:	e8 d9 8b fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
        sz = stbi__get8(s);    //   check bits per palette color entry
   29f37:	48 89 df             	mov    %rbx,%rdi
   29f3a:	e8 61 1b ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   29f3f:	89 c1                	mov    %eax,%ecx
        if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) {
   29f41:	3c 20                	cmp    $0x20,%al
   29f43:	0f 87 b7 fa ff ff    	ja     29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
        sz = stbi__get8(s);    //   check bits per palette color entry
   29f49:	44 0f b6 f8          	movzbl %al,%r15d
        if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) {
   29f4d:	48 b8 ff 7e fe fe fe 	movabs $0xfffffffefefe7eff,%rax
   29f54:	ff ff ff 
   29f57:	48 d3 f8             	sar    %cl,%rax
   29f5a:	a8 01                	test   $0x1,%al
   29f5c:	0f 85 9e fa ff ff    	jne    29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
   if (n < 0) {
   29f62:	be 04 00 00 00       	mov    $0x4,%esi
   29f67:	48 89 df             	mov    %rbx,%rdi
   29f6a:	e8 a1 8b fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
        tga_colormap_bpp = sz;
   29f6f:	e9 07 ff ff ff       	jmp    29e7b <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x7bb>
   stbi__g_failure_reason = str;
   29f74:	48 8d 05 ba da 00 00 	lea    0xdaba(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   29f7b:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   29f82:	ff ff 
   return 0;
   29f84:	e9 f1 f7 ff ff       	jmp    2977a <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0xba>
   switch(bits_per_pixel) {
   29f89:	8d 41 f8             	lea    -0x8(%rcx),%eax
   29f8c:	3c 18                	cmp    $0x18,%al
   29f8e:	0f 87 6c fa ff ff    	ja     29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
   29f94:	48 8d 3d e9 e0 00 00 	lea    0xe0e9(%rip),%rdi        # 38084 <_ZSt19piecewise_construct+0x73d>
   29f9b:	0f b6 c0             	movzbl %al,%eax
   29f9e:	48 63 04 87          	movslq (%rdi,%rax,4),%rax
   29fa2:	48 01 f8             	add    %rdi,%rax
   29fa5:	ff e0                	jmp    *%rax
   stbi__g_failure_reason = str;
   29fa7:	48 8d 05 87 da 00 00 	lea    0xda87(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   29fae:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   29fb5:	ff ff 
   return 0;
   29fb7:	e9 b3 f8 ff ff       	jmp    2986f <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x1af>
   switch(bits_per_pixel) {
   29fbc:	41 8d 47 e8          	lea    -0x18(%r15),%eax
   29fc0:	83 e0 f7             	and    $0xfffffff7,%eax
   29fc3:	0f 85 37 fa ff ff    	jne    29a00 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x340>
      case 32: return bits_per_pixel/8;
   29fc9:	44 89 f8             	mov    %r15d,%eax
   29fcc:	c1 f8 03             	sar    $0x3,%eax
   29fcf:	e9 24 ff ff ff       	jmp    29ef8 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x838>
    tga_bits_per_pixel = stbi__get8(s); // bits per pixel
   29fd4:	0f b6 c1             	movzbl %cl,%eax
      case 32: return bits_per_pixel/8;
   29fd7:	c1 f8 03             	sar    $0x3,%eax
   29fda:	e9 19 ff ff ff       	jmp    29ef8 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x838>
   switch(bits_per_pixel) {
   29fdf:	b8 03 00 00 00       	mov    $0x3,%eax
   29fe4:	e9 0f ff ff ff       	jmp    29ef8 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x838>
        tga_comp = stbi__tga_get_comp(tga_bits_per_pixel, (tga_image_type == 3) || (tga_image_type == 11), NULL);
   29fe9:	44 0f b6 34 24       	movzbl (%rsp),%r14d
   29fee:	31 d2                	xor    %edx,%edx
   29ff0:	b8 03 00 00 00       	mov    $0x3,%eax
   29ff5:	41 83 e6 f7          	and    $0xfffffff7,%r14d
   29ff9:	41 80 fe 03          	cmp    $0x3,%r14b
   29ffd:	0f 94 c2             	sete   %dl
   2a000:	29 d0                	sub    %edx,%eax
   2a002:	e9 f1 fe ff ff       	jmp    29ef8 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x838>
      case 8:  return STBI_grey;
   2a007:	b8 01 00 00 00       	mov    $0x1,%eax
   2a00c:	e9 e7 fe ff ff       	jmp    29ef8 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_+0x838>
   2a011:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2a018:	00 00 00 00 
   2a01c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000002a020 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi>:
{
   2a020:	41 57                	push   %r15
   2a022:	41 56                	push   %r14
   2a024:	41 55                	push   %r13
   2a026:	49 89 fd             	mov    %rdi,%r13
   2a029:	41 54                	push   %r12
   2a02b:	4d 89 cc             	mov    %r9,%r12
   2a02e:	55                   	push   %rbp
   2a02f:	53                   	push   %rbx
   2a030:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
   memset(ri, 0, sizeof(*ri)); // make sure it's initialized if we add new fields
   2a037:	49 c7 41 04 00 00 00 	movq   $0x0,0x4(%r9)
   2a03e:	00 
   if (s->img_buffer < s->img_buffer_end)
   2a03f:	48 8b 87 c8 00 00 00 	mov    0xc8(%rdi),%rax
{
   2a046:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   2a04b:	48 8b 8f c0 00 00 00 	mov    0xc0(%rdi),%rcx
{
   2a052:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
   2a057:	8b ac 24 c0 01 00 00 	mov    0x1c0(%rsp),%ebp
   2a05e:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
   2a063:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
   ri->bits_per_channel = 8; // default is 8 so most paths don't have to be changed
   2a068:	41 c7 01 08 00 00 00 	movl   $0x8,(%r9)
   if (s->img_buffer < s->img_buffer_end)
   2a06f:	48 39 c1             	cmp    %rax,%rcx
   2a072:	0f 82 00 03 00 00    	jb     2a378 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x358>
   if (s->read_from_callbacks) {
   2a078:	8b 47 30             	mov    0x30(%rdi),%eax
   2a07b:	85 c0                	test   %eax,%eax
   2a07d:	0f 85 8d 07 00 00    	jne    2a810 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7f0>
   2a083:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   stbi__g_failure_reason = str;
   2a088:	48 8d 05 53 dc 00 00 	lea    0xdc53(%rip),%rax        # 37ce2 <_ZSt19piecewise_construct+0x39b>
   2a08f:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2a096:	ff ff 
   s->img_buffer = s->img_buffer_original;
   2a098:	49 8b 95 d8 00 00 00 	mov    0xd8(%r13),%rdx
   2a09f:	f3 41 0f 6f b5 d0 00 	movdqu 0xd0(%r13),%xmm6
   2a0a6:	00 00 
   2a0a8:	49 8b 85 d0 00 00 00 	mov    0xd0(%r13),%rax
   2a0af:	41 0f 11 b5 c0 00 00 	movups %xmm6,0xc0(%r13)
   2a0b6:	00 
   if (s->img_buffer < s->img_buffer_end)
   2a0b7:	48 39 d0             	cmp    %rdx,%rax
   2a0ba:	0f 83 c0 00 00 00    	jae    2a180 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x160>
      return *s->img_buffer++;
   2a0c0:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a0c4:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a0cb:	0f b6 00             	movzbl (%rax),%eax
   if (stbi__get8(s) != 'B') return 0;
   2a0ce:	3c 42                	cmp    $0x42,%al
   2a0d0:	0f 85 aa 08 00 00    	jne    2a980 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x960>
   if (s->img_buffer < s->img_buffer_end)
   2a0d6:	49 3b 95 c8 00 00 00 	cmp    0xc8(%r13),%rdx
   2a0dd:	0f 83 fd 07 00 00    	jae    2a8e0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x8c0>
      return *s->img_buffer++;
   2a0e3:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2a0e7:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   2a0ee:	0f b6 12             	movzbl (%rdx),%edx
   if (stbi__get8(s) != 'M') return 0;
   2a0f1:	80 fa 4d             	cmp    $0x4d,%dl
   2a0f4:	0f 85 f2 07 00 00    	jne    2a8ec <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x8cc>
   stbi__get32le(s); // discard filesize
   2a0fa:	4c 89 ef             	mov    %r13,%rdi
   2a0fd:	e8 9e 4a ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   stbi__get16le(s); // discard reserved
   2a102:	4c 89 ef             	mov    %r13,%rdi
   2a105:	e8 d6 42 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   stbi__get16le(s); // discard reserved
   2a10a:	4c 89 ef             	mov    %r13,%rdi
   2a10d:	e8 ce 42 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   stbi__get32le(s); // discard data offset
   2a112:	4c 89 ef             	mov    %r13,%rdi
   2a115:	e8 86 4a ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   sz = stbi__get32le(s);
   2a11a:	4c 89 ef             	mov    %r13,%rdi
   2a11d:	e8 7e 4a ff ff       	call   1eba0 <_ZL13stbi__get32leP13stbi__context>
   r = (sz == 12 || sz == 40 || sz == 56 || sz == 108 || sz == 124);
   2a122:	89 c2                	mov    %eax,%edx
   2a124:	83 e2 ef             	and    $0xffffffef,%edx
   2a127:	83 f8 0c             	cmp    $0xc,%eax
   2a12a:	74 0e                	je     2a13a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11a>
   2a12c:	83 fa 28             	cmp    $0x28,%edx
   2a12f:	74 09                	je     2a13a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11a>
   2a131:	83 fa 6c             	cmp    $0x6c,%edx
   2a134:	0f 85 b2 07 00 00    	jne    2a8ec <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x8cc>
   if (stbi__bmp_test(s))  return stbi__bmp_load(s,x,y,comp,req_comp, ri);
   2a13a:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
   2a13f:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   2a144:	4c 89 ef             	mov    %r13,%rdi
   s->img_buffer = s->img_buffer_original;
   2a147:	f3 41 0f 6f 9d d0 00 	movdqu 0xd0(%r13),%xmm3
   2a14e:	00 00 
   if (stbi__bmp_test(s))  return stbi__bmp_load(s,x,y,comp,req_comp, ri);
   2a150:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
   2a155:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
   s->img_buffer = s->img_buffer_original;
   2a15a:	41 0f 11 9d c0 00 00 	movups %xmm3,0xc0(%r13)
   2a161:	00 
}
   2a162:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
   2a169:	5b                   	pop    %rbx
   2a16a:	5d                   	pop    %rbp
   2a16b:	41 5c                	pop    %r12
   2a16d:	41 5d                	pop    %r13
   2a16f:	41 5e                	pop    %r14
   2a171:	41 5f                	pop    %r15
   if (stbi__bmp_test(s))  return stbi__bmp_load(s,x,y,comp,req_comp, ri);
   2a173:	e9 48 69 ff ff       	jmp    20ac0 <_ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0>
   2a178:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2a17f:	00 
   if (s->read_from_callbacks) {
   2a180:	45 8b 45 30          	mov    0x30(%r13),%r8d
   2a184:	45 85 c0             	test   %r8d,%r8d
   2a187:	0f 85 3b 07 00 00    	jne    2a8c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x8a8>
   s->img_buffer = s->img_buffer_original;
   2a18d:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   s->img_buffer_end = s->img_buffer_original_end;
   2a194:	49 89 95 c8 00 00 00 	mov    %rdx,0xc8(%r13)
   int r = stbi__gif_test_raw(s);
   2a19b:	4c 89 ef             	mov    %r13,%rdi
   2a19e:	e8 8d 7f ff ff       	call   22130 <_ZL18stbi__gif_test_rawP13stbi__context>
   s->img_buffer = s->img_buffer_original;
   2a1a3:	f3 41 0f 6f a5 d0 00 	movdqu 0xd0(%r13),%xmm4
   2a1aa:	00 00 
   int r = stbi__gif_test_raw(s);
   2a1ac:	89 c3                	mov    %eax,%ebx
   s->img_buffer = s->img_buffer_original;
   2a1ae:	41 0f 11 a5 c0 00 00 	movups %xmm4,0xc0(%r13)
   2a1b5:	00 
   if (stbi__gif_test(s))  return stbi__gif_load(s,x,y,comp,req_comp, ri);
   2a1b6:	85 c0                	test   %eax,%eax
   2a1b8:	0f 85 a2 06 00 00    	jne    2a860 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x840>
   int r = (stbi__get32be(s) == 0x38425053);
   2a1be:	4c 89 ef             	mov    %r13,%rdi
   2a1c1:	e8 3a 47 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   2a1c6:	49 8b 95 d0 00 00 00 	mov    0xd0(%r13),%rdx
   s->img_buffer = s->img_buffer_original;
   2a1cd:	f3 41 0f 6f 9d d0 00 	movdqu 0xd0(%r13),%xmm3
   2a1d4:	00 00 
   int r = (stbi__get32be(s) == 0x38425053);
   2a1d6:	89 c1                	mov    %eax,%ecx
   s->img_buffer_end = s->img_buffer_original_end;
   2a1d8:	49 8b 85 d8 00 00 00 	mov    0xd8(%r13),%rax
   s->img_buffer = s->img_buffer_original;
   2a1df:	41 0f 11 9d c0 00 00 	movups %xmm3,0xc0(%r13)
   2a1e6:	00 
   if (stbi__psd_test(s))  return stbi__psd_load(s,x,y,comp,req_comp, ri, bpc);
   2a1e7:	81 f9 53 50 42 38    	cmp    $0x38425053,%ecx
   2a1ed:	0f 84 e5 0c 00 00    	je     2aed8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xeb8>
   if (s->img_buffer < s->img_buffer_end)
   2a1f3:	48 39 c2             	cmp    %rax,%rdx
   2a1f6:	0f 83 bc 07 00 00    	jae    2a9b8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x998>
      return *s->img_buffer++;
   2a1fc:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2a200:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   2a207:	0f b6 02             	movzbl (%rdx),%eax
      if (stbi__get8(s) != (stbi_uc)str[i])
   2a20a:	3c 53                	cmp    $0x53,%al
   2a20c:	0f 85 b6 07 00 00    	jne    2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
   if (s->img_buffer < s->img_buffer_end)
   2a212:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2a219:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2a220:	0f 82 bf 0f 00 00    	jb     2b1e5 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11c5>
   if (s->read_from_callbacks) {
   2a226:	41 8b 4d 30          	mov    0x30(%r13),%ecx
   2a22a:	85 c9                	test   %ecx,%ecx
   2a22c:	0f 84 96 07 00 00    	je     2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
      stbi__refill_buffer(s);
   2a232:	4c 89 ef             	mov    %r13,%rdi
   2a235:	e8 46 70 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2a23a:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2a241:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a245:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a24c:	0f b6 00             	movzbl (%rax),%eax
      if (stbi__get8(s) != (stbi_uc)str[i])
   2a24f:	3c 80                	cmp    $0x80,%al
   2a251:	0f 85 71 07 00 00    	jne    2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
   if (s->img_buffer < s->img_buffer_end)
   2a257:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2a25e:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2a265:	0f 82 8d 0f 00 00    	jb     2b1f8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11d8>
   if (s->read_from_callbacks) {
   2a26b:	41 8b 55 30          	mov    0x30(%r13),%edx
   2a26f:	85 d2                	test   %edx,%edx
   2a271:	0f 84 51 07 00 00    	je     2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
      stbi__refill_buffer(s);
   2a277:	4c 89 ef             	mov    %r13,%rdi
   2a27a:	e8 01 70 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2a27f:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2a286:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a28a:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a291:	0f b6 00             	movzbl (%rax),%eax
      if (stbi__get8(s) != (stbi_uc)str[i])
   2a294:	3c f6                	cmp    $0xf6,%al
   2a296:	0f 85 2c 07 00 00    	jne    2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
   if (s->img_buffer < s->img_buffer_end)
   2a29c:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2a2a3:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2a2aa:	72 1b                	jb     2a2c7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a7>
   if (s->read_from_callbacks) {
   2a2ac:	41 8b 45 30          	mov    0x30(%r13),%eax
   2a2b0:	85 c0                	test   %eax,%eax
   2a2b2:	0f 84 10 07 00 00    	je     2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
      stbi__refill_buffer(s);
   2a2b8:	4c 89 ef             	mov    %r13,%rdi
   2a2bb:	e8 c0 6f fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2a2c0:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2a2c7:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a2cb:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a2d2:	0f b6 00             	movzbl (%rax),%eax
      if (stbi__get8(s) != (stbi_uc)str[i])
   2a2d5:	3c 34                	cmp    $0x34,%al
   2a2d7:	0f 85 eb 06 00 00    	jne    2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
   if (s->img_buffer < s->img_buffer_end)
   2a2dd:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2a2e4:	49 8b 95 c8 00 00 00 	mov    0xc8(%r13),%rdx
   2a2eb:	41 be 54 00 00 00    	mov    $0x54,%r14d
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a2f1:	49 8d 6d 38          	lea    0x38(%r13),%rbp
   2a2f5:	48 89 c1             	mov    %rax,%rcx
   2a2f8:	eb 1b                	jmp    2a315 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f5>
   2a2fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   2a300:	48 83 c1 01          	add    $0x1,%rcx
   2a304:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   for(i=0;i<84;++i)
   2a30b:	41 83 ee 01          	sub    $0x1,%r14d
   2a30f:	0f 84 ef 09 00 00    	je     2ad04 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xce4>
   if (s->img_buffer < s->img_buffer_end)
   2a315:	48 39 d1             	cmp    %rdx,%rcx
   2a318:	72 e6                	jb     2a300 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2e0>
   if (s->read_from_callbacks) {
   2a31a:	45 8b 7d 30          	mov    0x30(%r13),%r15d
   2a31e:	45 85 ff             	test   %r15d,%r15d
   2a321:	74 e8                	je     2a30b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2eb>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a323:	41 8b 55 34          	mov    0x34(%r13),%edx
   2a327:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2a32b:	48 89 ee             	mov    %rbp,%rsi
   2a32e:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a332:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
      s->img_buffer_end = s->buffer_start+1;
   2a339:	49 8d 4d 39          	lea    0x39(%r13),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a33d:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2a344:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   2a34b:	85 c0                	test   %eax,%eax
   2a34d:	0f 85 a5 09 00 00    	jne    2acf8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xcd8>
      s->read_from_callbacks = 0;
   2a353:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2a35a:	00 
      s->img_buffer_end = s->buffer_start+1;
   2a35b:	48 89 ca             	mov    %rcx,%rdx
      *s->img_buffer = 0;
   2a35e:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   2a363:	49 89 95 c8 00 00 00 	mov    %rdx,0xc8(%r13)
      return *s->img_buffer++;
   2a36a:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2a371:	eb 98                	jmp    2a30b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2eb>
   2a373:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return *s->img_buffer++;
   2a378:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   2a37c:	48 89 97 c0 00 00 00 	mov    %rdx,0xc0(%rdi)
   2a383:	0f b6 09             	movzbl (%rcx),%ecx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   2a386:	80 f9 89             	cmp    $0x89,%cl
   2a389:	0f 85 f9 fc ff ff    	jne    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   if (s->img_buffer < s->img_buffer_end)
   2a38f:	48 39 c2             	cmp    %rax,%rdx
   2a392:	72 5c                	jb     2a3f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d0>
   if (s->read_from_callbacks) {
   2a394:	41 8b 45 30          	mov    0x30(%r13),%eax
   2a398:	85 c0                	test   %eax,%eax
   2a39a:	0f 84 e8 fc ff ff    	je     2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a3a0:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2a3a4:	41 8b 55 34          	mov    0x34(%r13),%edx
   2a3a8:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2a3ac:	48 89 de             	mov    %rbx,%rsi
   2a3af:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a3b3:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
      s->img_buffer_end = s->buffer_start+1;
   2a3ba:	49 8d 4d 39          	lea    0x39(%r13),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a3be:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2a3c5:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   2a3cc:	85 c0                	test   %eax,%eax
   2a3ce:	0f 84 8c 05 00 00    	je     2a960 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x940>
      s->img_buffer_end = s->buffer_start + n;
   2a3d4:	48 98                	cltq
      return *s->img_buffer++;
   2a3d6:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2a3dd:	41 0f b6 55 38       	movzbl 0x38(%r13),%edx
      s->img_buffer_end = s->buffer_start + n;
   2a3e2:	48 01 d8             	add    %rbx,%rax
   2a3e5:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
      return *s->img_buffer++;
   2a3ec:	eb 10                	jmp    2a3fe <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3de>
   2a3ee:	66 90                	xchg   %ax,%ax
      return *s->img_buffer++;
   2a3f0:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   2a3f4:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2a3fb:	0f b6 12             	movzbl (%rdx),%edx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   2a3fe:	80 fa 50             	cmp    $0x50,%dl
   2a401:	0f 85 81 fc ff ff    	jne    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   if (s->img_buffer < s->img_buffer_end)
   2a407:	48 39 c1             	cmp    %rax,%rcx
   2a40a:	72 64                	jb     2a470 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x450>
   if (s->read_from_callbacks) {
   2a40c:	45 8b 7d 30          	mov    0x30(%r13),%r15d
   2a410:	45 85 ff             	test   %r15d,%r15d
   2a413:	0f 84 6f fc ff ff    	je     2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a419:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2a41d:	41 8b 55 34          	mov    0x34(%r13),%edx
   2a421:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2a425:	48 89 de             	mov    %rbx,%rsi
   2a428:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a42c:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2a433:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2a43a:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2a441:	49 8d 55 39          	lea    0x39(%r13),%rdx
   if (n == 0) {
   2a445:	85 c0                	test   %eax,%eax
   2a447:	0f 84 f3 04 00 00    	je     2a940 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x920>
      s->img_buffer_end = s->buffer_start + n;
   2a44d:	48 98                	cltq
      return *s->img_buffer++;
   2a44f:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a456:	41 0f b6 4d 38       	movzbl 0x38(%r13),%ecx
      s->img_buffer_end = s->buffer_start + n;
   2a45b:	48 01 d8             	add    %rbx,%rax
   2a45e:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
      return *s->img_buffer++;
   2a465:	eb 17                	jmp    2a47e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x45e>
   2a467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2a46e:	00 00 
      return *s->img_buffer++;
   2a470:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   2a474:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a47b:	0f b6 09             	movzbl (%rcx),%ecx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   2a47e:	80 f9 4e             	cmp    $0x4e,%cl
   2a481:	0f 85 01 fc ff ff    	jne    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   if (s->img_buffer < s->img_buffer_end)
   2a487:	48 39 c2             	cmp    %rax,%rdx
   2a48a:	72 64                	jb     2a4f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4d0>
   if (s->read_from_callbacks) {
   2a48c:	45 8b 75 30          	mov    0x30(%r13),%r14d
   2a490:	45 85 f6             	test   %r14d,%r14d
   2a493:	0f 84 ef fb ff ff    	je     2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a499:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2a49d:	41 8b 55 34          	mov    0x34(%r13),%edx
   2a4a1:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2a4a5:	48 89 de             	mov    %rbx,%rsi
   2a4a8:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a4ac:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
      s->img_buffer_end = s->buffer_start+1;
   2a4b3:	49 8d 4d 39          	lea    0x39(%r13),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a4b7:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2a4be:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   2a4c5:	85 c0                	test   %eax,%eax
   2a4c7:	0f 84 93 04 00 00    	je     2a960 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x940>
      s->img_buffer_end = s->buffer_start + n;
   2a4cd:	48 98                	cltq
      return *s->img_buffer++;
   2a4cf:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2a4d6:	41 0f b6 55 38       	movzbl 0x38(%r13),%edx
      s->img_buffer_end = s->buffer_start + n;
   2a4db:	48 01 d8             	add    %rbx,%rax
   2a4de:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
      return *s->img_buffer++;
   2a4e5:	eb 17                	jmp    2a4fe <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4de>
   2a4e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2a4ee:	00 00 
      return *s->img_buffer++;
   2a4f0:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   2a4f4:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2a4fb:	0f b6 12             	movzbl (%rdx),%edx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   2a4fe:	80 fa 47             	cmp    $0x47,%dl
   2a501:	0f 85 81 fb ff ff    	jne    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   if (s->img_buffer < s->img_buffer_end)
   2a507:	48 39 c1             	cmp    %rax,%rcx
   2a50a:	72 64                	jb     2a570 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x550>
   if (s->read_from_callbacks) {
   2a50c:	41 8b 5d 30          	mov    0x30(%r13),%ebx
   2a510:	85 db                	test   %ebx,%ebx
   2a512:	0f 84 70 fb ff ff    	je     2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a518:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2a51c:	41 8b 55 34          	mov    0x34(%r13),%edx
   2a520:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2a524:	48 89 de             	mov    %rbx,%rsi
   2a527:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a52b:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2a532:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2a539:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2a540:	49 8d 55 39          	lea    0x39(%r13),%rdx
   if (n == 0) {
   2a544:	85 c0                	test   %eax,%eax
   2a546:	0f 84 f4 03 00 00    	je     2a940 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x920>
      s->img_buffer_end = s->buffer_start + n;
   2a54c:	48 98                	cltq
      return *s->img_buffer++;
   2a54e:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a555:	41 0f b6 4d 38       	movzbl 0x38(%r13),%ecx
      s->img_buffer_end = s->buffer_start + n;
   2a55a:	48 01 d8             	add    %rbx,%rax
   2a55d:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
      return *s->img_buffer++;
   2a564:	eb 18                	jmp    2a57e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x55e>
   2a566:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2a56d:	00 00 00 
      return *s->img_buffer++;
   2a570:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   2a574:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a57b:	0f b6 09             	movzbl (%rcx),%ecx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   2a57e:	80 f9 0d             	cmp    $0xd,%cl
   2a581:	0f 85 01 fb ff ff    	jne    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   if (s->img_buffer < s->img_buffer_end)
   2a587:	48 39 c2             	cmp    %rax,%rdx
   2a58a:	72 64                	jb     2a5f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x5d0>
   if (s->read_from_callbacks) {
   2a58c:	45 8b 5d 30          	mov    0x30(%r13),%r11d
   2a590:	45 85 db             	test   %r11d,%r11d
   2a593:	0f 84 ef fa ff ff    	je     2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a599:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2a59d:	41 8b 55 34          	mov    0x34(%r13),%edx
   2a5a1:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2a5a5:	48 89 de             	mov    %rbx,%rsi
   2a5a8:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a5ac:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
      s->img_buffer_end = s->buffer_start+1;
   2a5b3:	49 8d 4d 39          	lea    0x39(%r13),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a5b7:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2a5be:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   2a5c5:	85 c0                	test   %eax,%eax
   2a5c7:	0f 84 93 03 00 00    	je     2a960 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x940>
      s->img_buffer_end = s->buffer_start + n;
   2a5cd:	48 98                	cltq
      return *s->img_buffer++;
   2a5cf:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2a5d6:	41 0f b6 55 38       	movzbl 0x38(%r13),%edx
      s->img_buffer_end = s->buffer_start + n;
   2a5db:	48 01 d8             	add    %rbx,%rax
   2a5de:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
      return *s->img_buffer++;
   2a5e5:	eb 17                	jmp    2a5fe <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x5de>
   2a5e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2a5ee:	00 00 
      return *s->img_buffer++;
   2a5f0:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   2a5f4:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2a5fb:	0f b6 12             	movzbl (%rdx),%edx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   2a5fe:	80 fa 0a             	cmp    $0xa,%dl
   2a601:	0f 85 81 fa ff ff    	jne    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   if (s->img_buffer < s->img_buffer_end)
   2a607:	48 39 c1             	cmp    %rax,%rcx
   2a60a:	72 64                	jb     2a670 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x650>
   if (s->read_from_callbacks) {
   2a60c:	45 8b 55 30          	mov    0x30(%r13),%r10d
   2a610:	45 85 d2             	test   %r10d,%r10d
   2a613:	0f 84 6f fa ff ff    	je     2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a619:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2a61d:	41 8b 55 34          	mov    0x34(%r13),%edx
   2a621:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2a625:	48 89 de             	mov    %rbx,%rsi
   2a628:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a62c:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2a633:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2a63a:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2a641:	49 8d 55 39          	lea    0x39(%r13),%rdx
   if (n == 0) {
   2a645:	85 c0                	test   %eax,%eax
   2a647:	0f 84 f3 02 00 00    	je     2a940 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x920>
      s->img_buffer_end = s->buffer_start + n;
   2a64d:	48 98                	cltq
      return *s->img_buffer++;
   2a64f:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a656:	41 0f b6 4d 38       	movzbl 0x38(%r13),%ecx
      s->img_buffer_end = s->buffer_start + n;
   2a65b:	48 01 d8             	add    %rbx,%rax
   2a65e:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
      return *s->img_buffer++;
   2a665:	eb 17                	jmp    2a67e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x65e>
   2a667:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2a66e:	00 00 
      return *s->img_buffer++;
   2a670:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   2a674:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a67b:	0f b6 09             	movzbl (%rcx),%ecx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   2a67e:	80 f9 1a             	cmp    $0x1a,%cl
   2a681:	0f 85 01 fa ff ff    	jne    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   if (s->img_buffer < s->img_buffer_end)
   2a687:	48 39 c2             	cmp    %rax,%rdx
   2a68a:	0f 83 f0 00 00 00    	jae    2a780 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x760>
      return *s->img_buffer++;
   2a690:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2a694:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   2a69b:	0f b6 12             	movzbl (%rdx),%edx
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig","Not a PNG");
   2a69e:	80 fa 0a             	cmp    $0xa,%dl
   2a6a1:	0f 85 e1 f9 ff ff    	jne    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   s->img_buffer = s->img_buffer_original;
   2a6a7:	f3 41 0f 6f ad d0 00 	movdqu 0xd0(%r13),%xmm5
   2a6ae:	00 00 
   if (req_comp < 0 || req_comp > 4) return stbi__errpuc("bad req_comp", "Internal error");
   2a6b0:	83 7c 24 08 04       	cmpl   $0x4,0x8(%rsp)
   p.s = s;
   2a6b5:	4c 89 ac 24 c0 00 00 	mov    %r13,0xc0(%rsp)
   2a6bc:	00 
   s->img_buffer = s->img_buffer_original;
   2a6bd:	41 0f 11 ad c0 00 00 	movups %xmm5,0xc0(%r13)
   2a6c4:	00 
   if (req_comp < 0 || req_comp > 4) return stbi__errpuc("bad req_comp", "Internal error");
   2a6c5:	0f 87 15 01 00 00    	ja     2a7e0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7c0>
   if (stbi__parse_png_file(p, STBI__SCAN_load, req_comp)) {
   2a6cb:	8b 54 24 08          	mov    0x8(%rsp),%edx
   2a6cf:	31 f6                	xor    %esi,%esi
   2a6d1:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
   2a6d8:	00 
   2a6d9:	e8 92 a4 ff ff       	call   24b70 <_ZL20stbi__parse_png_fileP9stbi__pngii>
   2a6de:	85 c0                	test   %eax,%eax
   2a6e0:	0f 84 aa 01 00 00    	je     2a890 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x870>
      if (p->depth <= 8)
   2a6e6:	8b 94 24 e0 00 00 00 	mov    0xe0(%rsp),%edx
   2a6ed:	83 fa 08             	cmp    $0x8,%edx
   2a6f0:	0f 8e a2 02 00 00    	jle    2a998 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x978>
      else if (p->depth == 16)
   2a6f6:	83 fa 10             	cmp    $0x10,%edx
   2a6f9:	0f 85 d1 0a 00 00    	jne    2b1d0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11b0>
      result = p->out;
   2a6ff:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
   2a706:	00 
      if (req_comp && req_comp != p->s->img_out_n) {
   2a707:	8b 5c 24 08          	mov    0x8(%rsp),%ebx
         ri->bits_per_channel = 8;
   2a70b:	41 89 14 24          	mov    %edx,(%r12)
      p->out = NULL;
   2a70f:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
   2a716:	00 00 00 00 00 
      result = p->out;
   2a71b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      if (req_comp && req_comp != p->s->img_out_n) {
   2a720:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
   2a727:	00 
            result = stbi__convert_format((unsigned char *) result, p->s->img_out_n, req_comp, p->s->img_x, p->s->img_y);
   2a728:	8b 08                	mov    (%rax),%ecx
      if (req_comp && req_comp != p->s->img_out_n) {
   2a72a:	85 db                	test   %ebx,%ebx
   2a72c:	0f 84 de 01 00 00    	je     2a910 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x8f0>
   2a732:	8b 70 0c             	mov    0xc(%rax),%esi
   2a735:	39 f3                	cmp    %esi,%ebx
   2a737:	0f 84 d3 01 00 00    	je     2a910 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x8f0>
         if (ri->bits_per_channel == 8)
   2a73d:	83 fa 08             	cmp    $0x8,%edx
            result = stbi__convert_format((unsigned char *) result, p->s->img_out_n, req_comp, p->s->img_x, p->s->img_y);
   2a740:	44 8b 40 04          	mov    0x4(%rax),%r8d
   2a744:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2a749:	89 da                	mov    %ebx,%edx
         if (ri->bits_per_channel == 8)
   2a74b:	0f 84 e4 0d 00 00    	je     2b535 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1515>
   2a751:	e8 da 88 fe ff       	call   13030 <_ZL22stbi__convert_format16Ptiijj.part.0>
   2a756:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
         p->s->img_out_n = req_comp;
   2a75b:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
   2a762:	00 
   2a763:	8b 74 24 08          	mov    0x8(%rsp),%esi
         if (result == NULL) return result;
   2a767:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
         p->s->img_out_n = req_comp;
   2a76d:	89 70 0c             	mov    %esi,0xc(%rax)
         if (result == NULL) return result;
   2a770:	74 7e                	je     2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   STBI_FREE(p->out);      p->out      = NULL;
   2a772:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
   2a779:	00 
   2a77a:	e9 93 01 00 00       	jmp    2a912 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x8f2>
   2a77f:	90                   	nop
   if (s->read_from_callbacks) {
   2a780:	45 8b 4d 30          	mov    0x30(%r13),%r9d
   2a784:	45 85 c9             	test   %r9d,%r9d
   2a787:	0f 84 fb f8 ff ff    	je     2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a78d:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2a791:	41 8b 55 34          	mov    0x34(%r13),%edx
   2a795:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2a799:	48 89 de             	mov    %rbx,%rsi
   2a79c:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a7a0:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2a7a7:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2a7ae:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   2a7b5:	85 c0                	test   %eax,%eax
   2a7b7:	0f 85 e5 01 00 00    	jne    2a9a2 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x982>
      s->img_buffer_end = s->buffer_start+1;
   2a7bd:	49 8d 45 39          	lea    0x39(%r13),%rax
      s->read_from_callbacks = 0;
   2a7c1:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2a7c8:	00 
      *s->img_buffer = 0;
   2a7c9:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2a7ce:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
      return *s->img_buffer++;
   2a7d5:	e9 ae f8 ff ff       	jmp    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   2a7da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   stbi__g_failure_reason = str;
   2a7e0:	48 8d 05 e7 d6 00 00 	lea    0xd6e7(%rip),%rax        # 37ece <_ZSt19piecewise_construct+0x587>
   2a7e7:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2a7ee:	ff ff 
   return stbi__errpuc("unknown image type", "Image not of any known type, or corrupt");
   2a7f0:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
   2a7f7:	00 00 
}
   2a7f9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2a7fe:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
   2a805:	5b                   	pop    %rbx
   2a806:	5d                   	pop    %rbp
   2a807:	41 5c                	pop    %r12
   2a809:	41 5d                	pop    %r13
   2a80b:	41 5e                	pop    %r14
   2a80d:	41 5f                	pop    %r15
   2a80f:	c3                   	ret
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2a810:	48 8d 5f 38          	lea    0x38(%rdi),%rbx
   2a814:	8b 57 34             	mov    0x34(%rdi),%edx
   2a817:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
   2a81b:	48 89 de             	mov    %rbx,%rsi
   2a81e:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2a822:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2a829:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2a830:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2a837:	49 8d 55 39          	lea    0x39(%r13),%rdx
   if (n == 0) {
   2a83b:	85 c0                	test   %eax,%eax
   2a83d:	0f 84 fd 00 00 00    	je     2a940 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x920>
      s->img_buffer_end = s->buffer_start + n;
   2a843:	48 98                	cltq
      return *s->img_buffer++;
   2a845:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a84c:	41 0f b6 4d 38       	movzbl 0x38(%r13),%ecx
      s->img_buffer_end = s->buffer_start + n;
   2a851:	48 01 d8             	add    %rbx,%rax
   2a854:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
      return *s->img_buffer++;
   2a85b:	e9 26 fb ff ff       	jmp    2a386 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x366>
   if (stbi__gif_test(s))  return stbi__gif_load(s,x,y,comp,req_comp, ri);
   2a860:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
   2a865:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
   2a86a:	4c 89 ef             	mov    %r13,%rdi
   2a86d:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
   2a872:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
}
   2a877:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
   2a87e:	5b                   	pop    %rbx
   2a87f:	5d                   	pop    %rbp
   2a880:	41 5c                	pop    %r12
   2a882:	41 5d                	pop    %r13
   2a884:	41 5e                	pop    %r14
   2a886:	41 5f                	pop    %r15
   if (stbi__gif_test(s))  return stbi__gif_load(s,x,y,comp,req_comp, ri);
   2a888:	e9 c3 9b ff ff       	jmp    24450 <_ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0>
   2a88d:	0f 1f 00             	nopl   (%rax)
   void *result=NULL;
   2a890:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
   2a897:	00 00 
      result = p->out;
   2a899:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
   2a8a0:	00 
   STBI_FREE(p->out);      p->out      = NULL;
   2a8a1:	e8 fa bd fd ff       	call   66a0 <free@plt>
   STBI_FREE(p->expanded); p->expanded = NULL;
   2a8a6:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
   2a8ad:	00 
   2a8ae:	e8 ed bd fd ff       	call   66a0 <free@plt>
   STBI_FREE(p->idata);    p->idata    = NULL;
   2a8b3:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
   2a8ba:	00 
   2a8bb:	e8 e0 bd fd ff       	call   66a0 <free@plt>
   if (stbi__png_test(s))  return stbi__png_load(s,x,y,comp,req_comp, ri);
   2a8c0:	e9 34 ff ff ff       	jmp    2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   2a8c5:	0f 1f 00             	nopl   (%rax)
      stbi__refill_buffer(s);
   2a8c8:	4c 89 ef             	mov    %r13,%rdi
   2a8cb:	e8 b0 69 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2a8d0:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2a8d7:	e9 e4 f7 ff ff       	jmp    2a0c0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xa0>
   2a8dc:	0f 1f 40 00          	nopl   0x0(%rax)
   if (s->read_from_callbacks) {
   2a8e0:	41 8b 7d 30          	mov    0x30(%r13),%edi
   2a8e4:	85 ff                	test   %edi,%edi
   2a8e6:	0f 85 34 09 00 00    	jne    2b220 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1200>
   s->img_buffer = s->img_buffer_original;
   2a8ec:	49 8b 85 d0 00 00 00 	mov    0xd0(%r13),%rax
   s->img_buffer_end = s->img_buffer_original_end;
   2a8f3:	49 8b 95 d8 00 00 00 	mov    0xd8(%r13),%rdx
   s->img_buffer = s->img_buffer_original;
   2a8fa:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   return r;
   2a901:	e9 8e f8 ff ff       	jmp    2a194 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x174>
   2a906:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2a90d:	00 00 00 
   2a910:	31 ff                	xor    %edi,%edi
      *x = p->s->img_x;
   2a912:	8b 10                	mov    (%rax),%edx
   2a914:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
   2a919:	89 16                	mov    %edx,(%rsi)
      *y = p->s->img_y;
   2a91b:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
   2a920:	8b 50 04             	mov    0x4(%rax),%edx
   2a923:	89 16                	mov    %edx,(%rsi)
      if (n) *n = p->s->img_n;
   2a925:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
   2a92a:	48 85 f6             	test   %rsi,%rsi
   2a92d:	0f 84 6e ff ff ff    	je     2a8a1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x881>
   2a933:	8b 40 08             	mov    0x8(%rax),%eax
   2a936:	89 06                	mov    %eax,(%rsi)
   2a938:	e9 64 ff ff ff       	jmp    2a8a1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x881>
   2a93d:	0f 1f 00             	nopl   (%rax)
      s->read_from_callbacks = 0;
   2a940:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2a947:	00 
      *s->img_buffer = 0;
   2a948:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   2a94d:	49 89 95 c8 00 00 00 	mov    %rdx,0xc8(%r13)
      return *s->img_buffer++;
   2a954:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2a95b:	e9 28 f7 ff ff       	jmp    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
      s->read_from_callbacks = 0;
   2a960:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2a967:	00 
      *s->img_buffer = 0;
   2a968:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   2a96d:	49 89 8d c8 00 00 00 	mov    %rcx,0xc8(%r13)
      return *s->img_buffer++;
   2a974:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2a97b:	e9 08 f7 ff ff       	jmp    2a088 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x68>
   s->img_buffer_end = s->img_buffer_original_end;
   2a980:	49 8b 95 d8 00 00 00 	mov    0xd8(%r13),%rdx
   s->img_buffer = s->img_buffer_original;
   2a987:	49 8b 85 d0 00 00 00 	mov    0xd0(%r13),%rax
   2a98e:	e9 fa f7 ff ff       	jmp    2a18d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x16d>
   2a993:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   2a998:	ba 08 00 00 00       	mov    $0x8,%edx
   2a99d:	e9 5d fd ff ff       	jmp    2a6ff <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x6df>
      s->img_buffer_end = s->buffer_start + n;
   2a9a2:	48 98                	cltq
      return *s->img_buffer++;
   2a9a4:	41 0f b6 55 38       	movzbl 0x38(%r13),%edx
      s->img_buffer_end = s->buffer_start + n;
   2a9a9:	48 01 c3             	add    %rax,%rbx
   2a9ac:	49 89 9d c8 00 00 00 	mov    %rbx,0xc8(%r13)
      return *s->img_buffer++;
   2a9b3:	e9 e6 fc ff ff       	jmp    2a69e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x67e>
   if (s->read_from_callbacks) {
   2a9b8:	41 8b 75 30          	mov    0x30(%r13),%esi
   2a9bc:	85 f6                	test   %esi,%esi
   2a9be:	0f 85 65 0d 00 00    	jne    2b729 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1709>
   2a9c4:	0f 1f 40 00          	nopl   0x0(%rax)
   s->img_buffer = s->img_buffer_original;
   2a9c8:	49 8b 85 d0 00 00 00 	mov    0xd0(%r13),%rax
    return STBI_MALLOC(size);
   2a9cf:	bf 88 48 00 00       	mov    $0x4888,%edi
   s->img_buffer = s->img_buffer_original;
   2a9d4:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   s->img_buffer_end = s->img_buffer_original_end;
   2a9db:	49 8b 85 d8 00 00 00 	mov    0xd8(%r13),%rax
   2a9e2:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
    return STBI_MALLOC(size);
   2a9e9:	e8 72 bd fd ff       	call   6760 <malloc@plt>
   2a9ee:	49 89 c6             	mov    %rax,%r14
   if (!j) return stbi__err("outofmem", "Out of memory");
   2a9f1:	48 85 c0             	test   %rax,%rax
   2a9f4:	0f 84 32 0a 00 00    	je     2b42c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x140c>
   j->s = s;
   2a9fa:	48 8d 05 0f 76 fe ff 	lea    -0x189f1(%rip),%rax        # 12010 <_ZL23stbi__YCbCr_to_RGB_simdPhPKhS1_S1_ii>
   2aa01:	48 8d 15 18 78 fe ff 	lea    -0x187e8(%rip),%rdx        # 12220 <_ZL15stbi__idct_simdPhiPs>
   2aa08:	4d 89 2e             	mov    %r13,(%r14)
   r = stbi__decode_jpeg_header(j, STBI__SCAN_type);
   2aa0b:	4c 89 f7             	mov    %r14,%rdi
   2aa0e:	66 48 0f 6e e2       	movq   %rdx,%xmm4
   2aa13:	66 48 0f 6e f8       	movq   %rax,%xmm7
   2aa18:	be 01 00 00 00       	mov    $0x1,%esi
      j->resample_row_hv_2_kernel = stbi__resample_row_hv_2_simd;
   2aa1d:	48 8d 2d 2c 74 fe ff 	lea    -0x18bd4(%rip),%rbp        # 11e50 <_ZL28stbi__resample_row_hv_2_simdPhS_S_ii>
   2aa24:	66 0f 6c e7          	punpcklqdq %xmm7,%xmm4
   2aa28:	49 89 ae 80 48 00 00 	mov    %rbp,0x4880(%r14)
      j->idct_block_kernel = stbi__idct_simd;
   2aa2f:	41 0f 11 a6 70 48 00 	movups %xmm4,0x4870(%r14)
   2aa36:	00 
   2aa37:	0f 29 64 24 20       	movaps %xmm4,0x20(%rsp)
   r = stbi__decode_jpeg_header(j, STBI__SCAN_type);
   2aa3c:	e8 cf c4 ff ff       	call   26f10 <_ZL24stbi__decode_jpeg_headerP10stbi__jpegi>
   STBI_FREE(j);
   2aa41:	4c 89 f7             	mov    %r14,%rdi
   s->img_buffer = s->img_buffer_original;
   2aa44:	f3 41 0f 6f 95 d0 00 	movdqu 0xd0(%r13),%xmm2
   2aa4b:	00 00 
   r = stbi__decode_jpeg_header(j, STBI__SCAN_type);
   2aa4d:	41 89 c7             	mov    %eax,%r15d
   s->img_buffer = s->img_buffer_original;
   2aa50:	41 0f 11 95 c0 00 00 	movups %xmm2,0xc0(%r13)
   2aa57:	00 
   STBI_FREE(j);
   2aa58:	e8 43 bc fd ff       	call   66a0 <free@plt>
   if (stbi__jpeg_test(s)) return stbi__jpeg_load(s,x,y,comp,req_comp, ri);
   2aa5d:	45 85 ff             	test   %r15d,%r15d
   2aa60:	0f 84 d6 09 00 00    	je     2b43c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x141c>
    return STBI_MALLOC(size);
   2aa66:	bf 88 48 00 00       	mov    $0x4888,%edi
   2aa6b:	e8 f0 bc fd ff       	call   6760 <malloc@plt>
   2aa70:	49 89 c2             	mov    %rax,%r10
   if (!j) return stbi__errpuc("outofmem", "Out of memory");
   2aa73:	48 85 c0             	test   %rax,%rax
   2aa76:	0f 84 7b 30 00 00    	je     2daf7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ad7>
      j->idct_block_kernel = stbi__idct_simd;
   2aa7c:	66 0f 6f 64 24 20    	movdqa 0x20(%rsp),%xmm4
   j->s = s;
   2aa82:	4c 89 28             	mov    %r13,(%rax)
      j->resample_row_hv_2_kernel = stbi__resample_row_hv_2_simd;
   2aa85:	48 89 a8 80 48 00 00 	mov    %rbp,0x4880(%rax)
      j->idct_block_kernel = stbi__idct_simd;
   2aa8c:	0f 11 a0 70 48 00 00 	movups %xmm4,0x4870(%rax)
   if (req_comp < 0 || req_comp > 4) return stbi__errpuc("bad req_comp", "Internal error");
   2aa93:	8b 44 24 08          	mov    0x8(%rsp),%eax
   z->s->img_n = 0; // make stbi__cleanup_jpeg safe
   2aa97:	41 c7 45 08 00 00 00 	movl   $0x0,0x8(%r13)
   2aa9e:	00 
   if (req_comp < 0 || req_comp > 4) return stbi__errpuc("bad req_comp", "Internal error");
   2aa9f:	89 44 24 60          	mov    %eax,0x60(%rsp)
   2aaa3:	83 f8 04             	cmp    $0x4,%eax
   2aaa6:	0f 87 c0 0c 00 00    	ja     2b76c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x174c>
   if (!stbi__decode_jpeg_image(z)) { stbi__cleanup_jpeg(z); return NULL; }
   2aaac:	4c 89 d7             	mov    %r10,%rdi
   2aaaf:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
   2aab4:	e8 57 ce ff ff       	call   27910 <_ZL23stbi__decode_jpeg_imageP10stbi__jpeg>
   2aab9:	4c 8b 54 24 20       	mov    0x20(%rsp),%r10
   2aabe:	85 c0                	test   %eax,%eax
   2aac0:	0f 84 17 1b 00 00    	je     2c5dd <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x25bd>
   stbi__free_jpeg_components(j, j->s->img_n, 0);
   2aac6:	4d 8b 0a             	mov    (%r10),%r9
   n = req_comp ? req_comp : z->s->img_n >= 3 ? 3 : 1;
   2aac9:	44 8b 74 24 08       	mov    0x8(%rsp),%r14d
   stbi__free_jpeg_components(j, j->s->img_n, 0);
   2aace:	45 8b 59 08          	mov    0x8(%r9),%r11d
   n = req_comp ? req_comp : z->s->img_n >= 3 ? 3 : 1;
   2aad2:	45 85 f6             	test   %r14d,%r14d
   2aad5:	0f 85 2b 0e 00 00    	jne    2b906 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18e6>
   2aadb:	41 83 fb 02          	cmp    $0x2,%r11d
   2aadf:	0f 8e 49 10 00 00    	jle    2bb2e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1b0e>
   is_rgb = z->s->img_n == 3 && (z->rgb == 3 || (z->app14_color_transform == 0 && !z->jfif));
   2aae5:	41 83 fb 03          	cmp    $0x3,%r11d
   2aae9:	0f 84 b5 1a 00 00    	je     2c5a4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2584>
   2aaef:	c7 44 24 60 03 00 00 	movl   $0x3,0x60(%rsp)
   2aaf6:	00 
   2aaf7:	45 89 d8             	mov    %r11d,%r8d
   n = req_comp ? req_comp : z->s->img_n >= 3 ? 3 : 1;
   2aafa:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%rsp)
   2ab01:	00 
   is_rgb = z->s->img_n == 3 && (z->rgb == 3 || (z->app14_color_transform == 0 && !z->jfif));
   2ab02:	c6 44 24 68 00       	movb   $0x0,0x68(%rsp)
   2ab07:	48 8d 84 24 c0 00 00 	lea    0xc0(%rsp),%rax
   2ab0e:	00 
         z->img_comp[k].linebuf = (stbi_uc *) stbi__malloc(z->s->img_x + 3);
   2ab0f:	41 8b 29             	mov    (%r9),%ebp
   2ab12:	44 89 44 24 20       	mov    %r8d,0x20(%rsp)
      stbi_uc *coutput[4] = { NULL, NULL, NULL, NULL };
   2ab17:	66 0f ef c0          	pxor   %xmm0,%xmm0
   2ab1b:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
   2ab20:	4d 8d aa a4 46 00 00 	lea    0x46a4(%r10),%r13
         z->img_comp[k].linebuf = (stbi_uc *) stbi__malloc(z->s->img_x + 3);
   2ab27:	49 89 c4             	mov    %rax,%r12
   2ab2a:	4c 8d 3d bf 67 fe ff 	lea    -0x19841(%rip),%r15        # 112f0 <_ZL14resample_row_1PhS_S_ii>
   2ab31:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
   2ab36:	44 8d 75 03          	lea    0x3(%rbp),%r14d
   2ab3a:	44 89 5c 24 40       	mov    %r11d,0x40(%rsp)
   2ab3f:	4c 89 74 24 38       	mov    %r14,0x38(%rsp)
   2ab44:	4d 89 d6             	mov    %r10,%r14
      stbi_uc *coutput[4] = { NULL, NULL, NULL, NULL };
   2ab47:	0f 29 84 24 a0 00 00 	movaps %xmm0,0xa0(%rsp)
   2ab4e:	00 
   2ab4f:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
   2ab56:	00 
   2ab57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2ab5e:	00 00 
    return STBI_MALLOC(size);
   2ab60:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
   2ab65:	e8 f6 bb fd ff       	call   6760 <malloc@plt>
         z->img_comp[k].linebuf = (stbi_uc *) stbi__malloc(z->s->img_x + 3);
   2ab6a:	49 89 45 44          	mov    %rax,0x44(%r13)
         if (!z->img_comp[k].linebuf) { stbi__cleanup_jpeg(z); return stbi__errpuc("outofmem", "Out of memory"); }
   2ab6e:	48 85 c0             	test   %rax,%rax
   2ab71:	0f 84 95 2f 00 00    	je     2db0c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3aec>
         r->hs      = z->img_h_max / z->img_comp[k].h;
   2ab77:	41 8b 86 88 46 00 00 	mov    0x4688(%r14),%eax
         if      (r->hs == 1 && r->vs == 1) r->resample = resample_row_1;
   2ab7e:	48 be 01 00 00 00 01 	movabs $0x100000001,%rsi
   2ab85:	00 00 00 
         r->hs      = z->img_h_max / z->img_comp[k].h;
   2ab88:	99                   	cltd
   2ab89:	41 f7 7d 00          	idivl  0x0(%r13)
   2ab8d:	89 c1                	mov    %eax,%ecx
         r->vs      = z->img_v_max / z->img_comp[k].v;
   2ab8f:	41 8b 86 8c 46 00 00 	mov    0x468c(%r14),%eax
         r->hs      = z->img_h_max / z->img_comp[k].h;
   2ab96:	66 0f 6e c1          	movd   %ecx,%xmm0
         r->vs      = z->img_v_max / z->img_comp[k].v;
   2ab9a:	99                   	cltd
   2ab9b:	41 f7 7d 04          	idivl  0x4(%r13)
         r->ypos    = 0;
   2ab9f:	41 c7 44 24 28 00 00 	movl   $0x0,0x28(%r12)
   2aba6:	00 00 
         r->w_lores = (z->s->img_x + r->hs-1) / r->hs;
   2aba8:	31 d2                	xor    %edx,%edx
         r->vs      = z->img_v_max / z->img_comp[k].v;
   2abaa:	89 c7                	mov    %eax,%edi
         r->w_lores = (z->s->img_x + r->hs-1) / r->hs;
   2abac:	8d 44 0d ff          	lea    -0x1(%rbp,%rcx,1),%eax
   2abb0:	f7 f1                	div    %ecx
         r->ystep   = r->vs >> 1;
   2abb2:	89 fa                	mov    %edi,%edx
   2abb4:	d1 fa                	sar    %edx
         r->hs      = z->img_h_max / z->img_comp[k].h;
   2abb6:	66 0f 6e d2          	movd   %edx,%xmm2
   2abba:	66 0f 6e c8          	movd   %eax,%xmm1
         if      (r->hs == 1 && r->vs == 1) r->resample = resample_row_1;
   2abbe:	48 63 c3             	movslq %ebx,%rax
         r->hs      = z->img_h_max / z->img_comp[k].h;
   2abc1:	66 0f 62 ca          	punpckldq %xmm2,%xmm1
   2abc5:	66 0f 6e d7          	movd   %edi,%xmm2
         if      (r->hs == 1 && r->vs == 1) r->resample = resample_row_1;
   2abc9:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
         r->hs      = z->img_h_max / z->img_comp[k].h;
   2abcd:	66 0f 62 c2          	punpckldq %xmm2,%xmm0
         if      (r->hs == 1 && r->vs == 1) r->resample = resample_row_1;
   2abd1:	48 c1 e0 04          	shl    $0x4,%rax
         r->hs      = z->img_h_max / z->img_comp[k].h;
   2abd5:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
   2abd9:	41 0f 11 44 24 18    	movups %xmm0,0x18(%r12)
         r->line0   = r->line1 = z->img_comp[k].data;
   2abdf:	f3 41 0f 7e 45 2c    	movq   0x2c(%r13),%xmm0
   2abe5:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
   2abe9:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
         if      (r->hs == 1 && r->vs == 1) r->resample = resample_row_1;
   2abef:	48 8b 94 04 d8 00 00 	mov    0xd8(%rsp,%rax,1),%rdx
   2abf6:	00 
   2abf7:	4c 89 f8             	mov    %r15,%rax
   2abfa:	48 39 f2             	cmp    %rsi,%rdx
   2abfd:	74 51                	je     2ac50 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc30>
         else if (r->hs == 1 && r->vs == 2) r->resample = stbi__resample_row_v_2;
   2abff:	48 be 01 00 00 00 02 	movabs $0x200000001,%rsi
   2ac06:	00 00 00 
   2ac09:	48 8d 05 f0 66 fe ff 	lea    -0x19910(%rip),%rax        # 11300 <_ZL22stbi__resample_row_v_2PhS_S_ii>
   2ac10:	48 39 f2             	cmp    %rsi,%rdx
   2ac13:	74 3b                	je     2ac50 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc30>
         else if (r->hs == 2 && r->vs == 1) r->resample = stbi__resample_row_h_2;
   2ac15:	48 b9 02 00 00 00 01 	movabs $0x100000002,%rcx
   2ac1c:	00 00 00 
   2ac1f:	48 8d 05 3a 7f fe ff 	lea    -0x180c6(%rip),%rax        # 12b60 <_ZL22stbi__resample_row_h_2PhS_S_ii>
   2ac26:	48 39 ca             	cmp    %rcx,%rdx
   2ac29:	74 25                	je     2ac50 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc30>
         else if (r->hs == 2 && r->vs == 2) r->resample = z->resample_row_hv_2_kernel;
   2ac2b:	48 b9 02 00 00 00 02 	movabs $0x200000002,%rcx
   2ac32:	00 00 00 
   2ac35:	48 8d 05 a4 69 fe ff 	lea    -0x1965c(%rip),%rax        # 115e0 <_ZL26stbi__resample_row_genericPhS_S_ii>
   2ac3c:	48 39 ca             	cmp    %rcx,%rdx
   2ac3f:	75 0f                	jne    2ac50 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc30>
   2ac41:	49 8b 86 80 48 00 00 	mov    0x4880(%r14),%rax
   2ac48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2ac4f:	00 
         if      (r->hs == 1 && r->vs == 1) r->resample = resample_row_1;
   2ac50:	49 89 04 24          	mov    %rax,(%r12)
      for (k=0; k < decode_n; ++k) {
   2ac54:	83 c3 01             	add    $0x1,%ebx
   2ac57:	49 83 c5 60          	add    $0x60,%r13
   2ac5b:	49 83 c4 30          	add    $0x30,%r12
   2ac5f:	39 5c 24 20          	cmp    %ebx,0x20(%rsp)
   2ac63:	0f 85 f7 fe ff ff    	jne    2ab60 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xb40>
      output = (stbi_uc *) stbi__malloc_mad3(n, z->s->img_x, z->s->img_y, 1);
   2ac69:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
   2ac6e:	44 8b 5c 24 40       	mov    0x40(%rsp),%r11d
   2ac73:	4d 89 f2             	mov    %r14,%r10
   2ac76:	45 8b 61 04          	mov    0x4(%r9),%r12d
   if (a < 0 || b < 0) return 0;
   2ac7a:	85 ed                	test   %ebp,%ebp
   2ac7c:	78 3b                	js     2acb9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc99>
   if (b == 0) return 1; // mul-by-0 is always safe
   2ac7e:	0f 84 c8 0e 00 00    	je     2bb4c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1b2c>
   return a <= INT_MAX/b;
   2ac84:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2ac89:	31 d2                	xor    %edx,%edx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2ac8b:	8b 74 24 08          	mov    0x8(%rsp),%esi
   return a <= INT_MAX/b;
   2ac8f:	f7 fd                	idiv   %ebp
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2ac91:	39 f0                	cmp    %esi,%eax
   2ac93:	7c 24                	jl     2acb9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc99>
   if (a < 0 || b < 0) return 0;
   2ac95:	45 85 e4             	test   %r12d,%r12d
   2ac98:	78 1f                	js     2acb9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc99>
   if (b == 0) return 1; // mul-by-0 is always safe
   2ac9a:	0f 84 78 1c 00 00    	je     2c918 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x28f8>
   return a <= INT_MAX/b;
   2aca0:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2aca5:	31 d2                	xor    %edx,%edx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2aca7:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
   return a <= INT_MAX/b;
   2acab:	41 f7 fc             	idiv   %r12d
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2acae:	0f af cd             	imul   %ebp,%ecx
   2acb1:	39 c1                	cmp    %eax,%ecx
   2acb3:	0f 8e 77 35 00 00    	jle    2e230 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4210>
   stbi__free_jpeg_components(j, j->s->img_n, 0);
   2acb9:	4c 89 d7             	mov    %r10,%rdi
   2acbc:	44 89 de             	mov    %r11d,%esi
   2acbf:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
   2acc4:	e8 f7 9c fe ff       	call   149c0 <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0>
   stbi__g_failure_reason = str;
   2acc9:	48 8d 05 65 cd 00 00 	lea    0xcd65(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   stbi__free_jpeg_components(j, j->s->img_n, 0);
   2acd0:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   stbi__g_failure_reason = str;
   2acd5:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2acdc:	ff ff 
         if (!z->img_comp[k].linebuf) { stbi__cleanup_jpeg(z); return stbi__errpuc("outofmem", "Out of memory"); }
   2acde:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
   2ace5:	00 00 
   STBI_FREE(j);
   2ace7:	4c 89 d7             	mov    %r10,%rdi
   2acea:	e8 b1 b9 fd ff       	call   66a0 <free@plt>
   return result;
   2acef:	e9 05 fb ff ff       	jmp    2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   2acf4:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   2acf8:	48 98                	cltq
   2acfa:	48 8d 54 05 00       	lea    0x0(%rbp,%rax,1),%rdx
   2acff:	e9 5f f6 ff ff       	jmp    2a363 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x343>
   if (s->img_buffer < s->img_buffer_end)
   2ad04:	48 39 d1             	cmp    %rdx,%rcx
   2ad07:	0f 82 55 05 00 00    	jb     2b262 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1242>
   if (s->read_from_callbacks) {
   2ad0d:	45 8b 5d 30          	mov    0x30(%r13),%r11d
   2ad11:	45 85 db             	test   %r11d,%r11d
   2ad14:	0f 84 ae fc ff ff    	je     2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
      stbi__refill_buffer(s);
   2ad1a:	4c 89 ef             	mov    %r13,%rdi
   2ad1d:	e8 5e 65 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2ad22:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2ad29:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2ad2d:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2ad34:	0f b6 00             	movzbl (%rax),%eax
      if (stbi__get8(s) != (stbi_uc)str[i])
   2ad37:	3c 50                	cmp    $0x50,%al
   2ad39:	0f 85 89 fc ff ff    	jne    2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
   if (s->img_buffer < s->img_buffer_end)
   2ad3f:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2ad46:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2ad4d:	0f 82 37 05 00 00    	jb     2b28a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x126a>
   if (s->read_from_callbacks) {
   2ad53:	45 8b 55 30          	mov    0x30(%r13),%r10d
   2ad57:	45 85 d2             	test   %r10d,%r10d
   2ad5a:	0f 84 68 fc ff ff    	je     2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
      stbi__refill_buffer(s);
   2ad60:	4c 89 ef             	mov    %r13,%rdi
   2ad63:	e8 18 65 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2ad68:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2ad6f:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2ad73:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2ad7a:	0f b6 00             	movzbl (%rax),%eax
      if (stbi__get8(s) != (stbi_uc)str[i])
   2ad7d:	3c 49                	cmp    $0x49,%al
   2ad7f:	0f 85 43 fc ff ff    	jne    2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
   if (s->img_buffer < s->img_buffer_end)
   2ad85:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2ad8c:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2ad93:	0f 82 04 05 00 00    	jb     2b29d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x127d>
   if (s->read_from_callbacks) {
   2ad99:	45 8b 4d 30          	mov    0x30(%r13),%r9d
   2ad9d:	45 85 c9             	test   %r9d,%r9d
   2ada0:	0f 84 22 fc ff ff    	je     2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
      stbi__refill_buffer(s);
   2ada6:	4c 89 ef             	mov    %r13,%rdi
   2ada9:	e8 d2 64 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2adae:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2adb5:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2adb9:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2adc0:	0f b6 00             	movzbl (%rax),%eax
      if (stbi__get8(s) != (stbi_uc)str[i])
   2adc3:	3c 43                	cmp    $0x43,%al
   2adc5:	0f 85 fd fb ff ff    	jne    2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
   if (s->img_buffer < s->img_buffer_end)
   2adcb:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2add2:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2add9:	72 1c                	jb     2adf7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xdd7>
   if (s->read_from_callbacks) {
   2addb:	45 8b 45 30          	mov    0x30(%r13),%r8d
   2addf:	45 85 c0             	test   %r8d,%r8d
   2ade2:	0f 84 e0 fb ff ff    	je     2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
      stbi__refill_buffer(s);
   2ade8:	4c 89 ef             	mov    %r13,%rdi
   2adeb:	e8 90 64 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2adf0:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2adf7:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2adfb:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2ae02:	0f b6 00             	movzbl (%rax),%eax
      if (stbi__get8(s) != (stbi_uc)str[i])
   2ae05:	3c 54                	cmp    $0x54,%al
   2ae07:	0f 85 bb fb ff ff    	jne    2a9c8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x9a8>
   if (!comp) comp = &internal_comp;
   2ae0d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
   s->img_buffer = s->img_buffer_original;
   2ae12:	49 8b 85 d0 00 00 00 	mov    0xd0(%r13),%rax
   if (!comp) comp = &internal_comp;
   2ae19:	48 8d 8c 24 9c 00 00 	lea    0x9c(%rsp),%rcx
   2ae20:	00 
   2ae21:	bd 5c 00 00 00       	mov    $0x5c,%ebp
   s->img_buffer_end = s->img_buffer_original_end;
   2ae26:	49 8b 95 d8 00 00 00 	mov    0xd8(%r13),%rdx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2ae2d:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   if (!comp) comp = &internal_comp;
   2ae31:	48 85 f6             	test   %rsi,%rsi
   s->img_buffer = s->img_buffer_original;
   2ae34:	66 48 0f 6e c0       	movq   %rax,%xmm0
   if (!comp) comp = &internal_comp;
   2ae39:	48 0f 45 ce          	cmovne %rsi,%rcx
   s->img_buffer = s->img_buffer_original;
   2ae3d:	66 48 0f 6e fa       	movq   %rdx,%xmm7
   2ae42:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
   if (!comp) comp = &internal_comp;
   2ae46:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   2ae4b:	48 89 c1             	mov    %rax,%rcx
   s->img_buffer = s->img_buffer_original;
   2ae4e:	41 0f 11 85 c0 00 00 	movups %xmm0,0xc0(%r13)
   2ae55:	00 
   for (i=0; i<92; ++i)
   2ae56:	eb 1c                	jmp    2ae74 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xe54>
   2ae58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2ae5f:	00 
      return *s->img_buffer++;
   2ae60:	48 83 c1 01          	add    $0x1,%rcx
   2ae64:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   for (i=0; i<92; ++i)
   2ae6b:	83 ed 01             	sub    $0x1,%ebp
   2ae6e:	0f 84 05 01 00 00    	je     2af79 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xf59>
   if (s->img_buffer < s->img_buffer_end)
   2ae74:	48 39 d1             	cmp    %rdx,%rcx
   2ae77:	72 e7                	jb     2ae60 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xe40>
   if (s->read_from_callbacks) {
   2ae79:	41 8b 7d 30          	mov    0x30(%r13),%edi
   2ae7d:	85 ff                	test   %edi,%edi
   2ae7f:	74 ea                	je     2ae6b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xe4b>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2ae81:	41 8b 55 34          	mov    0x34(%r13),%edx
   2ae85:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2ae89:	48 89 de             	mov    %rbx,%rsi
   2ae8c:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2ae90:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
      s->img_buffer_end = s->buffer_start+1;
   2ae97:	49 8d 4d 39          	lea    0x39(%r13),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2ae9b:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2aea2:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   2aea9:	85 c0                	test   %eax,%eax
   2aeab:	75 23                	jne    2aed0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xeb0>
      s->read_from_callbacks = 0;
   2aead:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2aeb4:	00 
      s->img_buffer_end = s->buffer_start+1;
   2aeb5:	48 89 ca             	mov    %rcx,%rdx
      *s->img_buffer = 0;
   2aeb8:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   2aebd:	49 89 95 c8 00 00 00 	mov    %rdx,0xc8(%r13)
      return *s->img_buffer++;
   2aec4:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2aecb:	eb 9e                	jmp    2ae6b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xe4b>
   2aecd:	0f 1f 00             	nopl   (%rax)
      s->img_buffer_end = s->buffer_start + n;
   2aed0:	48 98                	cltq
   2aed2:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
   2aed6:	eb e5                	jmp    2aebd <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xe9d>
   if (s->img_buffer < s->img_buffer_end)
   2aed8:	48 39 c2             	cmp    %rax,%rdx
   2aedb:	0f 83 cf 03 00 00    	jae    2b2b0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1290>
      return *s->img_buffer++;
   2aee1:	48 8d 72 01          	lea    0x1(%rdx),%rsi
   2aee5:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
   int z = stbi__get8(s);
   2aeec:	0f b6 1a             	movzbl (%rdx),%ebx
   return (z << 8) + stbi__get8(s);
   2aeef:	c1 e3 08             	shl    $0x8,%ebx
   if (s->img_buffer < s->img_buffer_end)
   2aef2:	48 39 c6             	cmp    %rax,%rsi
   2aef5:	0f 83 0f 04 00 00    	jae    2b30a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x12ea>
      return *s->img_buffer++;
   2aefb:	48 8d 4e 01          	lea    0x1(%rsi),%rcx
   2aeff:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   return (z << 8) + stbi__get8(s);
   2af06:	0f b6 16             	movzbl (%rsi),%edx
   2af09:	01 d3                	add    %edx,%ebx
   return (z << 16) + stbi__get16be(s);
   2af0b:	c1 e3 10             	shl    $0x10,%ebx
   2af0e:	41 89 de             	mov    %ebx,%r14d
   if (s->img_buffer < s->img_buffer_end)
   2af11:	48 39 c1             	cmp    %rax,%rcx
   2af14:	0f 83 51 04 00 00    	jae    2b36b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x134b>
      return *s->img_buffer++;
   2af1a:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   2af1e:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   int z = stbi__get8(s);
   2af25:	0f b6 19             	movzbl (%rcx),%ebx
   return (z << 8) + stbi__get8(s);
   2af28:	c1 e3 08             	shl    $0x8,%ebx
   if (s->img_buffer < s->img_buffer_end)
   2af2b:	48 39 c2             	cmp    %rax,%rdx
   2af2e:	0f 83 95 04 00 00    	jae    2b3c9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x13a9>
      return *s->img_buffer++;
   2af34:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2af38:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   return (z << 8) + stbi__get8(s);
   2af3f:	0f b6 02             	movzbl (%rdx),%eax
   2af42:	01 c3                	add    %eax,%ebx
   return (z << 16) + stbi__get16be(s);
   2af44:	44 01 f3             	add    %r14d,%ebx
   if (stbi__get32be(s) != 0x38425053)   // "8BPS"
   2af47:	81 fb 53 50 42 38    	cmp    $0x38425053,%ebx
   2af4d:	0f 85 22 03 00 00    	jne    2b275 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1255>
   if (stbi__get16be(s) != 1)
   2af53:	4c 89 ef             	mov    %r13,%rdi
   2af56:	e8 55 33 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2af5b:	83 f8 01             	cmp    $0x1,%eax
   2af5e:	0f 84 c9 08 00 00    	je     2b82d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x180d>
   stbi__g_failure_reason = str;
   2af64:	48 8d 05 8d cf 00 00 	lea    0xcf8d(%rip),%rax        # 37ef8 <_ZSt19piecewise_construct+0x5b1>
   2af6b:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2af72:	ff ff 
      return stbi__errpuc("wrong version", "Unsupported version of PSD image");
   2af74:	e9 77 f8 ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   x = stbi__get16be(s);
   2af79:	4c 89 ef             	mov    %r13,%rdi
   2af7c:	e8 2f 33 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   y = stbi__get16be(s);
   2af81:	4c 89 ef             	mov    %r13,%rdi
   x = stbi__get16be(s);
   2af84:	89 44 24 38          	mov    %eax,0x38(%rsp)
   y = stbi__get16be(s);
   2af88:	e8 23 33 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2af8d:	89 c5                	mov    %eax,%ebp
   if (y > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2af8f:	3d 00 00 00 01       	cmp    $0x1000000,%eax
   2af94:	0f 8f 71 02 00 00    	jg     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
   if (x > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2af9a:	81 7c 24 38 00 00 00 	cmpl   $0x1000000,0x38(%rsp)
   2afa1:	01 
   2afa2:	0f 8f 63 02 00 00    	jg     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
   if (s->io.read) {
   2afa8:	49 83 7d 10 00       	cmpq   $0x0,0x10(%r13)
   2afad:	74 18                	je     2afc7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xfa7>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   2afaf:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2afb3:	41 ff 55 20          	call   *0x20(%r13)
   2afb7:	85 c0                	test   %eax,%eax
   2afb9:	74 20                	je     2afdb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xfbb>
      if (s->read_from_callbacks == 0) return 1;
   2afbb:	41 8b 75 30          	mov    0x30(%r13),%esi
   2afbf:	85 f6                	test   %esi,%esi
   2afc1:	0f 84 5a 08 00 00    	je     2b821 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1801>
   if (stbi__at_eof(s))  return stbi__errpuc("bad file","file too short (pic header)");
   2afc7:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   2afce:	49 39 85 c0 00 00 00 	cmp    %rax,0xc0(%r13)
   2afd5:	0f 83 46 08 00 00    	jae    2b821 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1801>
   if (a < 0 || b < 0) return 0;
   2afdb:	8b 74 24 38          	mov    0x38(%rsp),%esi
   2afdf:	89 f0                	mov    %esi,%eax
   2afe1:	09 e8                	or     %ebp,%eax
   2afe3:	0f 88 22 02 00 00    	js     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
   if (b == 0) return 1; // mul-by-0 is always safe
   2afe9:	85 ed                	test   %ebp,%ebp
   2afeb:	0f 84 ce 09 00 00    	je     2b9bf <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x199f>
   return a <= INT_MAX/b;
   2aff1:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2aff6:	31 d2                	xor    %edx,%edx
   2aff8:	f7 fd                	idiv   %ebp
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2affa:	39 c6                	cmp    %eax,%esi
   2affc:	0f 8f 09 02 00 00    	jg     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
   2b002:	0f af f5             	imul   %ebp,%esi
   2b005:	81 fe ff ff ff 1f    	cmp    $0x1fffffff,%esi
   2b00b:	0f 8f fa 01 00 00    	jg     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
      stbi__addsizes_valid(a*b*c, add);
   2b011:	8d 1c b5 00 00 00 00 	lea    0x0(,%rsi,4),%ebx
   stbi__get32be(s); //skip `ratio'
   2b018:	4c 89 ef             	mov    %r13,%rdi
   2b01b:	e8 e0 38 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   stbi__get16be(s); //skip `fields'
   2b020:	4c 89 ef             	mov    %r13,%rdi
   2b023:	e8 88 32 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   stbi__get16be(s); //skip `pad'
   2b028:	4c 89 ef             	mov    %r13,%rdi
   2b02b:	e8 80 32 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   result = (stbi_uc *) stbi__malloc_mad3(x, y, 4, 0);
   2b030:	8b 7c 24 38          	mov    0x38(%rsp),%edi
   2b034:	31 c9                	xor    %ecx,%ecx
   2b036:	ba 04 00 00 00       	mov    $0x4,%edx
   2b03b:	89 ee                	mov    %ebp,%esi
   2b03d:	e8 4e a0 fe ff       	call   15090 <_ZL17stbi__malloc_mad3iiii>
   2b042:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   2b047:	48 89 c7             	mov    %rax,%rdi
   if (!result) return stbi__errpuc("outofmem", "Out of memory");
   2b04a:	48 85 c0             	test   %rax,%rax
   2b04d:	0f 84 ec 27 00 00    	je     2d83f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x381f>
   memset(result, 0xff, x*y*4);
   2b053:	48 63 d3             	movslq %ebx,%rdx
   2b056:	be ff 00 00 00       	mov    $0xff,%esi
   2b05b:	4c 8d a4 24 c1 00 00 	lea    0xc1(%rsp),%r12
   2b062:	00 
   int act_comp=0,num_packets=0,y,chained;
   2b063:	45 31 f6             	xor    %r14d,%r14d
   memset(result, 0xff, x*y*4);
   2b066:	e8 35 b2 fd ff       	call   62a0 <memset@plt>
   int act_comp=0,num_packets=0,y,chained;
   2b06b:	c7 44 24 40 00 00 00 	movl   $0x0,0x40(%rsp)
   2b072:	00 
   2b073:	4c 89 e8             	mov    %r13,%rax
   2b076:	41 89 ed             	mov    %ebp,%r13d
   2b079:	48 89 c5             	mov    %rax,%rbp
   if (s->img_buffer < s->img_buffer_end)
   2b07c:	48 8b 85 c8 00 00 00 	mov    0xc8(%rbp),%rax
   2b083:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   2b08a:	44 89 74 24 48       	mov    %r14d,0x48(%rsp)
      packet = &packets[num_packets++];
   2b08f:	41 83 c6 01          	add    $0x1,%r14d
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b093:	4c 8b 45 10          	mov    0x10(%rbp),%r8
   if (s->img_buffer < s->img_buffer_end)
   2b097:	48 89 c6             	mov    %rax,%rsi
   2b09a:	48 39 c2             	cmp    %rax,%rdx
   2b09d:	0f 83 de 06 00 00    	jae    2b781 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1761>
      return *s->img_buffer++;
   2b0a3:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
   2b0a7:	48 89 bd c0 00 00 00 	mov    %rdi,0xc0(%rbp)
   2b0ae:	44 0f b6 3a          	movzbl (%rdx),%r15d
   if (s->img_buffer < s->img_buffer_end)
   2b0b2:	48 39 c7             	cmp    %rax,%rdi
   2b0b5:	0f 83 0b 09 00 00    	jae    2b9c6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x19a6>
      return *s->img_buffer++;
   2b0bb:	48 8d 77 01          	lea    0x1(%rdi),%rsi
   2b0bf:	48 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%rbp)
   2b0c6:	0f b6 1f             	movzbl (%rdi),%ebx
   if (s->img_buffer < s->img_buffer_end)
   2b0c9:	48 39 c6             	cmp    %rax,%rsi
   2b0cc:	0f 83 4f 09 00 00    	jae    2ba21 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1a01>
      return *s->img_buffer++;
   2b0d2:	48 8d 56 01          	lea    0x1(%rsi),%rdx
   2b0d6:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
   2b0dd:	0f b6 36             	movzbl (%rsi),%esi
      packet->type    = stbi__get8(s);
   2b0e0:	41 88 34 24          	mov    %sil,(%r12)
   if (s->img_buffer < s->img_buffer_end)
   2b0e4:	48 39 c2             	cmp    %rax,%rdx
   2b0e7:	0f 83 00 07 00 00    	jae    2b7ed <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x17cd>
      return *s->img_buffer++;
   2b0ed:	48 8d 72 01          	lea    0x1(%rdx),%rsi
   2b0f1:	48 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%rbp)
   2b0f8:	0f b6 3a             	movzbl (%rdx),%edi
      act_comp |= packet->channel;
   2b0fb:	09 7c 24 40          	or     %edi,0x40(%rsp)
      return *s->img_buffer++;
   2b0ff:	89 fa                	mov    %edi,%edx
   if (s->io.read) {
   2b101:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
      packet->channel = stbi__get8(s);
   2b106:	41 88 54 24 01       	mov    %dl,0x1(%r12)
   if (s->io.read) {
   2b10b:	74 24                	je     2b131 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1111>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   2b10d:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   2b111:	ff 55 20             	call   *0x20(%rbp)
   2b114:	85 c0                	test   %eax,%eax
   2b116:	74 22                	je     2b13a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x111a>
      if (s->read_from_callbacks == 0) return 1;
   2b118:	8b 45 30             	mov    0x30(%rbp),%eax
   2b11b:	85 c0                	test   %eax,%eax
   2b11d:	0f 84 e6 06 00 00    	je     2b809 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x17e9>
   return s->img_buffer >= s->img_buffer_end;
   2b123:	48 8b b5 c0 00 00 00 	mov    0xc0(%rbp),%rsi
   2b12a:	48 8b 85 c8 00 00 00 	mov    0xc8(%rbp),%rax
      if (stbi__at_eof(s))          return stbi__errpuc("bad file","file too short (reading packets)");
   2b131:	48 39 c6             	cmp    %rax,%rsi
   2b134:	0f 83 cf 06 00 00    	jae    2b809 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x17e9>
      if (packet->size != 8)  return stbi__errpuc("bad format","packet isn't 8bpp");
   2b13a:	80 fb 08             	cmp    $0x8,%bl
   2b13d:	75 17                	jne    2b156 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1136>
   } while (chained);
   2b13f:	49 83 c4 03          	add    $0x3,%r12
   2b143:	45 84 ff             	test   %r15b,%r15b
   2b146:	0f 84 cd 29 00 00    	je     2db19 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3af9>
      if (num_packets==sizeof(packets)/sizeof(packets[0]))
   2b14c:	41 83 fe 0a          	cmp    $0xa,%r14d
   2b150:	0f 85 26 ff ff ff    	jne    2b07c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x105c>
   stbi__g_failure_reason = str;
   2b156:	48 8d 05 5a cd 00 00 	lea    0xcd5a(%rip),%rax        # 37eb7 <_ZSt19piecewise_construct+0x570>
   2b15d:	44 89 ed             	mov    %r13d,%ebp
   2b160:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b167:	ff ff 
      STBI_FREE(result);
   2b169:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2b16e:	e8 2d b5 fd ff       	call   66a0 <free@plt>
      result=0;
   2b173:	31 c0                	xor    %eax,%eax
   2b175:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   *px = x;
   2b17a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   2b17f:	8b 5c 24 38          	mov    0x38(%rsp),%ebx
   if (req_comp == 0) req_comp = *comp;
   2b183:	44 8b 7c 24 08       	mov    0x8(%rsp),%r15d
   *px = x;
   2b188:	89 18                	mov    %ebx,(%rax)
   *py = y;
   2b18a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
   2b18f:	89 28                	mov    %ebp,(%rax)
   if (req_comp == 0) req_comp = *comp;
   2b191:	45 85 ff             	test   %r15d,%r15d
   2b194:	75 0b                	jne    2b1a1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1181>
   2b196:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   2b19b:	8b 00                	mov    (%rax),%eax
   2b19d:	89 44 24 08          	mov    %eax,0x8(%rsp)
   if (req_comp == img_n) return data;
   2b1a1:	8b 54 24 08          	mov    0x8(%rsp),%edx
   2b1a5:	83 fa 04             	cmp    $0x4,%edx
   2b1a8:	0f 84 4b f6 ff ff    	je     2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   2b1ae:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
   2b1b2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2b1b7:	41 89 e8             	mov    %ebp,%r8d
   2b1ba:	be 04 00 00 00       	mov    $0x4,%esi
   2b1bf:	e8 3c 9f fe ff       	call   15100 <_ZL20stbi__convert_formatPhiijj.part.0>
   2b1c4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   if (stbi__pic_test(s))  return stbi__pic_load(s,x,y,comp,req_comp, ri);
   2b1c9:	e9 2b f6 ff ff       	jmp    2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   2b1ce:	66 90                	xchg   %ax,%ax
   stbi__g_failure_reason = str;
   2b1d0:	48 8d 05 04 cd 00 00 	lea    0xcd04(%rip),%rax        # 37edb <_ZSt19piecewise_construct+0x594>
   2b1d7:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b1de:	ff ff 
         return stbi__errpuc("bad bits_per_channel", "PNG not supported: unsupported color depth");
   2b1e0:	e9 0b f6 ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
      return *s->img_buffer++;
   2b1e5:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2b1e9:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2b1f0:	0f b6 00             	movzbl (%rax),%eax
   2b1f3:	e9 57 f0 ff ff       	jmp    2a24f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x22f>
   2b1f8:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2b1fc:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2b203:	0f b6 00             	movzbl (%rax),%eax
   2b206:	e9 89 f0 ff ff       	jmp    2a294 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x274>
   if (tga_height > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2b20b:	48 8d 05 46 c8 00 00 	lea    0xc846(%rip),%rax        # 37a58 <_ZSt19piecewise_construct+0x111>
   stbi__g_failure_reason = str;
   2b212:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b219:	ff ff 
   return stbi__errpuc("unknown image type", "Image not of any known type, or corrupt");
   2b21b:	e9 d0 f5 ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b220:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2b224:	41 8b 55 34          	mov    0x34(%r13),%edx
   2b228:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2b22c:	48 89 de             	mov    %rbx,%rsi
   2b22f:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b233:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2b23a:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2b241:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   2b248:	85 c0                	test   %eax,%eax
   2b24a:	0f 85 fb 04 00 00    	jne    2b74b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x172b>
      s->read_from_callbacks = 0;
   2b250:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2b257:	00 
      *s->img_buffer = 0;
   2b258:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
      return *s->img_buffer++;
   2b25d:	e9 8a f6 ff ff       	jmp    2a8ec <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x8cc>
      return *s->img_buffer++;
   2b262:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   2b266:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2b26d:	0f b6 01             	movzbl (%rcx),%eax
   2b270:	e9 c2 fa ff ff       	jmp    2ad37 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xd17>
   stbi__g_failure_reason = str;
   2b275:	48 8d 05 74 cc 00 00 	lea    0xcc74(%rip),%rax        # 37ef0 <_ZSt19piecewise_construct+0x5a9>
   2b27c:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b283:	ff ff 
      return stbi__errpuc("not PSD", "Corrupt PSD image");
   2b285:	e9 66 f5 ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
      return *s->img_buffer++;
   2b28a:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2b28e:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2b295:	0f b6 00             	movzbl (%rax),%eax
   2b298:	e9 e0 fa ff ff       	jmp    2ad7d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xd5d>
   2b29d:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2b2a1:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2b2a8:	0f b6 00             	movzbl (%rax),%eax
   2b2ab:	e9 13 fb ff ff       	jmp    2adc3 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xda3>
   if (s->read_from_callbacks) {
   2b2b0:	41 8b 45 30          	mov    0x30(%r13),%eax
   2b2b4:	85 c0                	test   %eax,%eax
   2b2b6:	74 bd                	je     2b275 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1255>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b2b8:	4d 8d 75 38          	lea    0x38(%r13),%r14
   2b2bc:	41 8b 55 34          	mov    0x34(%r13),%edx
   2b2c0:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2b2c4:	4c 89 f6             	mov    %r14,%rsi
   2b2c7:	41 ff 55 10          	call   *0x10(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2b2cb:	49 8d 75 39          	lea    0x39(%r13),%rsi
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b2cf:	48 63 d8             	movslq %eax,%rbx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b2d2:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2b2d9:	49 2b 85 d0 00 00 00 	sub    0xd0(%r13),%rax
   2b2e0:	41 01 85 b8 00 00 00 	add    %eax,0xb8(%r13)
   if (n == 0) {
   2b2e7:	85 db                	test   %ebx,%ebx
   2b2e9:	0f 85 4c 06 00 00    	jne    2b93b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x191b>
      s->read_from_callbacks = 0;
   2b2ef:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2b2f6:	00 
      *s->img_buffer = 0;
   2b2f7:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   2b2fc:	49 89 b5 c8 00 00 00 	mov    %rsi,0xc8(%r13)
      return *s->img_buffer++;
   2b303:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
   if (s->read_from_callbacks) {
   2b30a:	41 8b 45 30          	mov    0x30(%r13),%eax
   2b30e:	85 c0                	test   %eax,%eax
   2b310:	0f 84 5f ff ff ff    	je     2b275 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1255>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b316:	4d 8d 75 38          	lea    0x38(%r13),%r14
   2b31a:	41 8b 55 34          	mov    0x34(%r13),%edx
   2b31e:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2b322:	4c 89 f6             	mov    %r14,%rsi
   2b325:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b329:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
      s->img_buffer_end = s->buffer_start+1;
   2b330:	49 8d 4d 39          	lea    0x39(%r13),%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b334:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2b33b:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
   if (n == 0) {
   2b342:	85 c0                	test   %eax,%eax
   2b344:	0f 85 10 06 00 00    	jne    2b95a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x193a>
      s->read_from_callbacks = 0;
   2b34a:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2b351:	00 
   return (z << 16) + stbi__get16be(s);
   2b352:	c1 e3 10             	shl    $0x10,%ebx
      *s->img_buffer = 0;
   2b355:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   return (z << 16) + stbi__get16be(s);
   2b35a:	41 89 de             	mov    %ebx,%r14d
   2b35d:	49 89 8d c8 00 00 00 	mov    %rcx,0xc8(%r13)
      return *s->img_buffer++;
   2b364:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   if (s->read_from_callbacks) {
   2b36b:	41 8b 45 30          	mov    0x30(%r13),%eax
   2b36f:	85 c0                	test   %eax,%eax
   2b371:	0f 84 fe fe ff ff    	je     2b275 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1255>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b377:	4d 8d 7d 38          	lea    0x38(%r13),%r15
   2b37b:	41 8b 55 34          	mov    0x34(%r13),%edx
   2b37f:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2b383:	4c 89 fe             	mov    %r15,%rsi
   2b386:	41 ff 55 10          	call   *0x10(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2b38a:	49 8d 55 39          	lea    0x39(%r13),%rdx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b38e:	48 63 d8             	movslq %eax,%rbx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b391:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2b398:	49 2b 85 d0 00 00 00 	sub    0xd0(%r13),%rax
   2b39f:	41 01 85 b8 00 00 00 	add    %eax,0xb8(%r13)
   if (n == 0) {
   2b3a6:	85 db                	test   %ebx,%ebx
   2b3a8:	0f 85 cb 05 00 00    	jne    2b979 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1959>
      s->read_from_callbacks = 0;
   2b3ae:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2b3b5:	00 
      *s->img_buffer = 0;
   2b3b6:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   2b3bb:	49 89 95 c8 00 00 00 	mov    %rdx,0xc8(%r13)
      return *s->img_buffer++;
   2b3c2:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   if (s->read_from_callbacks) {
   2b3c9:	41 8b 45 30          	mov    0x30(%r13),%eax
   2b3cd:	85 c0                	test   %eax,%eax
   2b3cf:	0f 84 6f fb ff ff    	je     2af44 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xf24>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b3d5:	4d 8d 7d 38          	lea    0x38(%r13),%r15
   2b3d9:	41 8b 55 34          	mov    0x34(%r13),%edx
   2b3dd:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2b3e1:	4c 89 fe             	mov    %r15,%rsi
   2b3e4:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b3e8:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2b3ef:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2b3f6:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2b3fd:	49 8d 55 39          	lea    0x39(%r13),%rdx
   if (n == 0) {
   2b401:	85 c0                	test   %eax,%eax
   2b403:	0f 85 8f 05 00 00    	jne    2b998 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1978>
      s->read_from_callbacks = 0;
   2b409:	41 c7 45 30 00 00 00 	movl   $0x0,0x30(%r13)
   2b410:	00 
      s->img_buffer_end = s->buffer_start+1;
   2b411:	48 89 d1             	mov    %rdx,%rcx
      *s->img_buffer = 0;
   2b414:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
   2b419:	49 89 8d c8 00 00 00 	mov    %rcx,0xc8(%r13)
      return *s->img_buffer++;
   2b420:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2b427:	e9 18 fb ff ff       	jmp    2af44 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xf24>
   stbi__g_failure_reason = str;
   2b42c:	48 8d 05 02 c6 00 00 	lea    0xc602(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   2b433:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b43a:	ff ff 
   p = (char) stbi__get8(s);
   2b43c:	4c 89 ef             	mov    %r13,%rdi
   2b43f:	e8 5c 06 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   t = (char) stbi__get8(s);
   2b444:	4c 89 ef             	mov    %r13,%rdi
   p = (char) stbi__get8(s);
   2b447:	89 c5                	mov    %eax,%ebp
   t = (char) stbi__get8(s);
   2b449:	e8 52 06 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   if (p != 'P' || (t != '5' && t != '6')) {
   2b44e:	40 80 fd 50          	cmp    $0x50,%bpl
   2b452:	0f 85 ec 00 00 00    	jne    2b544 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1524>
   2b458:	83 e8 35             	sub    $0x35,%eax
   2b45b:	3c 01                	cmp    $0x1,%al
   2b45d:	0f 87 e1 00 00 00    	ja     2b544 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1524>
   ri->bits_per_channel = stbi__pnm_info(s, (int *)&s->img_x, (int *)&s->img_y, (int *)&s->img_n);
   2b463:	49 8d 4d 08          	lea    0x8(%r13),%rcx
   2b467:	49 8d 55 04          	lea    0x4(%r13),%rdx
   2b46b:	4c 89 ee             	mov    %r13,%rsi
   2b46e:	4c 89 ef             	mov    %r13,%rdi
   2b471:	e8 0a 94 ff ff       	call   24880 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_>
   2b476:	41 89 04 24          	mov    %eax,(%r12)
   if (ri->bits_per_channel == 0)
   2b47a:	85 c0                	test   %eax,%eax
   2b47c:	0f 84 6e f3 ff ff    	je     2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2b482:	41 81 7d 04 00 00 00 	cmpl   $0x1000000,0x4(%r13)
   2b489:	01 
   2b48a:	0f 87 90 00 00 00    	ja     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2b490:	41 8b 45 00          	mov    0x0(%r13),%eax
   2b494:	3d 00 00 00 01       	cmp    $0x1000000,%eax
   2b499:	0f 87 81 00 00 00    	ja     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   *x = s->img_x;
   2b49f:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
   2b4a4:	89 03                	mov    %eax,(%rbx)
   *y = s->img_y;
   2b4a6:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
   2b4ab:	41 8b 45 04          	mov    0x4(%r13),%eax
   2b4af:	89 03                	mov    %eax,(%rbx)
   if (comp) *comp = s->img_n;
   2b4b1:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
   2b4b6:	48 85 db             	test   %rbx,%rbx
   2b4b9:	74 06                	je     2b4c1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x14a1>
   2b4bb:	41 8b 45 08          	mov    0x8(%r13),%eax
   2b4bf:	89 03                	mov    %eax,(%rbx)
   if (!stbi__mad4sizes_valid(s->img_n, s->img_x, s->img_y, ri->bits_per_channel / 8, 0))
   2b4c1:	45 8b 75 08          	mov    0x8(%r13),%r14d
   2b4c5:	41 8b 0c 24          	mov    (%r12),%ecx
   2b4c9:	41 8b 5d 04          	mov    0x4(%r13),%ebx
   2b4cd:	45 8b 65 00          	mov    0x0(%r13),%r12d
   if (a < 0 || b < 0) return 0;
   2b4d1:	45 85 f6             	test   %r14d,%r14d
   2b4d4:	78 4a                	js     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   2b4d6:	45 85 e4             	test   %r12d,%r12d
   2b4d9:	78 45                	js     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   if (!stbi__mad4sizes_valid(s->img_n, s->img_x, s->img_y, ri->bits_per_channel / 8, 0))
   2b4db:	85 c9                	test   %ecx,%ecx
   2b4dd:	8d 69 07             	lea    0x7(%rcx),%ebp
   2b4e0:	0f 49 e9             	cmovns %ecx,%ebp
   2b4e3:	c1 fd 03             	sar    $0x3,%ebp
   if (b == 0) return 1; // mul-by-0 is always safe
   2b4e6:	45 85 e4             	test   %r12d,%r12d
   2b4e9:	0f 84 1f 11 00 00    	je     2c60e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x25ee>
   return a <= INT_MAX/b;
   2b4ef:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2b4f4:	31 d2                	xor    %edx,%edx
   2b4f6:	41 f7 fc             	idiv   %r12d
      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);
   2b4f9:	41 39 c6             	cmp    %eax,%r14d
   2b4fc:	7f 22                	jg     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   if (a < 0 || b < 0) return 0;
   2b4fe:	85 db                	test   %ebx,%ebx
   2b500:	78 1e                	js     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   if (b == 0) return 1; // mul-by-0 is always safe
   2b502:	0f 84 0e 11 00 00    	je     2c616 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x25f6>
   return a <= INT_MAX/b;
   2b508:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2b50d:	31 d2                	xor    %edx,%edx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2b50f:	44 89 e6             	mov    %r12d,%esi
   return a <= INT_MAX/b;
   2b512:	f7 fb                	idiv   %ebx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2b514:	41 0f af f6          	imul   %r14d,%esi
   2b518:	39 c6                	cmp    %eax,%esi
   2b51a:	0f 8e 25 2d 00 00    	jle    2e245 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4225>
   stbi__g_failure_reason = str;
   2b520:	48 8d 05 31 c5 00 00 	lea    0xc531(%rip),%rax        # 37a58 <_ZSt19piecewise_construct+0x111>
   2b527:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b52e:	ff ff 
   if (h > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2b530:	e9 bb f2 ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   if (req_comp == img_n) return data;
   2b535:	e8 c6 9b fe ff       	call   15100 <_ZL20stbi__convert_formatPhiijj.part.0>
   2b53a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   2b53f:	e9 17 f2 ff ff       	jmp    2a75b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x73b>
   s->img_buffer = s->img_buffer_original;
   2b544:	f3 41 0f 6f 95 d0 00 	movdqu 0xd0(%r13),%xmm2
   2b54b:	00 00 
   if (stbi__hdr_test(s)) {
   2b54d:	4c 89 ef             	mov    %r13,%rdi
   s->img_buffer = s->img_buffer_original;
   2b550:	41 0f 11 95 c0 00 00 	movups %xmm2,0xc0(%r13)
   2b557:	00 
   if (stbi__hdr_test(s)) {
   2b558:	e8 43 03 ff ff       	call   1b8a0 <_ZL14stbi__hdr_testP13stbi__context>
   2b55d:	89 44 24 68          	mov    %eax,0x68(%rsp)
   2b561:	85 c0                	test   %eax,%eax
   2b563:	0f 84 57 03 00 00    	je     2b8c0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18a0>
      float *hdr = stbi__hdr_load(s, x,y,comp,req_comp, ri);
   2b569:	44 8b 7c 24 08       	mov    0x8(%rsp),%r15d
   2b56e:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
   2b573:	4c 89 ef             	mov    %r13,%rdi
   2b576:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
   2b57b:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
   2b580:	45 89 f8             	mov    %r15d,%r8d
   2b583:	4c 89 f1             	mov    %r14,%rcx
   2b586:	e8 b5 38 ff ff       	call   1ee40 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0>
   2b58b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
      return stbi__hdr_to_ldr(hdr, *x, *y, req_comp ? req_comp : *comp);
   2b590:	45 85 ff             	test   %r15d,%r15d
   2b593:	75 07                	jne    2b59c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x157c>
   2b595:	41 8b 06             	mov    (%r14),%eax
   2b598:	89 44 24 08          	mov    %eax,0x8(%rsp)
   2b59c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
   if (!data) return NULL;
   2b5a1:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
      return stbi__hdr_to_ldr(hdr, *x, *y, req_comp ? req_comp : *comp);
   2b5a7:	44 8b 20             	mov    (%rax),%r12d
   2b5aa:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   2b5af:	8b 28                	mov    (%rax),%ebp
   if (!data) return NULL;
   2b5b1:	0f 84 39 f2 ff ff    	je     2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   output = (stbi_uc *) stbi__malloc_mad3(x, y, comp, 0);
   2b5b7:	8b 54 24 08          	mov    0x8(%rsp),%edx
   2b5bb:	31 c9                	xor    %ecx,%ecx
   2b5bd:	44 89 e6             	mov    %r12d,%esi
   2b5c0:	89 ef                	mov    %ebp,%edi
   2b5c2:	e8 c9 9a fe ff       	call   15090 <_ZL17stbi__malloc_mad3iiii>
   2b5c7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   if (output == NULL) { STBI_FREE(data); return stbi__errpuc("outofmem", "Out of memory"); }
   2b5cc:	48 85 c0             	test   %rax,%rax
   2b5cf:	0f 84 18 25 00 00    	je     2daed <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3acd>
   if (comp & 1) n = comp; else n = comp-1;
   2b5d5:	8b 74 24 08          	mov    0x8(%rsp),%esi
   for (i=0; i < x*y; ++i) {
   2b5d9:	44 89 e7             	mov    %r12d,%edi
   if (comp & 1) n = comp; else n = comp-1;
   2b5dc:	89 f0                	mov    %esi,%eax
   2b5de:	83 e0 01             	and    $0x1,%eax
   2b5e1:	83 f8 01             	cmp    $0x1,%eax
   2b5e4:	83 de 00             	sbb    $0x0,%esi
   for (i=0; i < x*y; ++i) {
   2b5e7:	0f af fd             	imul   %ebp,%edi
   2b5ea:	85 ff                	test   %edi,%edi
   2b5ec:	0f 8e 1f 01 00 00    	jle    2b711 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x16f1>
   2b5f2:	31 c0                	xor    %eax,%eax
   2b5f4:	85 f6                	test   %esi,%esi
   2b5f6:	89 7c 24 40          	mov    %edi,0x40(%rsp)
   2b5fa:	41 89 de             	mov    %ebx,%r14d
   2b5fd:	0f 49 c6             	cmovns %esi,%eax
   2b600:	31 c9                	xor    %ecx,%ecx
   2b602:	41 89 cf             	mov    %ecx,%r15d
   2b605:	89 f1                	mov    %esi,%ecx
   2b607:	89 44 24 48          	mov    %eax,0x48(%rsp)
      for (k=0; k < n; ++k) {
   2b60b:	85 c9                	test   %ecx,%ecx
   2b60d:	0f 8e 98 00 00 00    	jle    2b6ab <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x168b>
   2b613:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
   2b618:	49 63 d7             	movslq %r15d,%rdx
         if (z < 0) z = 0;
   2b61b:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
   2b61f:	4c 63 e9             	movslq %ecx,%r13
         float z = (float) pow(data[i*comp+k]*stbi__h2l_scale_i, stbi__h2l_gamma_i) * 255 + 0.5f;
   2b622:	f3 0f 10 3d 92 5f 01 	movss  0x15f92(%rip),%xmm7        # 415bc <_ZL17stbi__h2l_scale_i>
   2b629:	00 
   2b62a:	f3 0f 10 0d 8e 5f 01 	movss  0x15f8e(%rip),%xmm1        # 415c0 <_ZL17stbi__h2l_gamma_i>
   2b631:	00 
   2b632:	31 db                	xor    %ebx,%ebx
   2b634:	4c 8d 24 90          	lea    (%rax,%rdx,4),%r12
   2b638:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2b63d:	f3 0f 11 7c 24 18    	movss  %xmm7,0x18(%rsp)
   2b643:	48 8d 2c 10          	lea    (%rax,%rdx,1),%rbp
   2b647:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2b64e:	00 00 
   2b650:	f3 0f 10 44 24 18    	movss  0x18(%rsp),%xmm0
   2b656:	f3 41 0f 59 04 9c    	mulss  (%r12,%rbx,4),%xmm0
  using ::pow;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }
   2b65c:	f3 0f 11 4c 24 10    	movss  %xmm1,0x10(%rsp)
   2b662:	e8 89 b2 fd ff       	call   68f0 <powf@plt>
   2b667:	f3 0f 59 05 31 d4 00 	mulss  0xd431(%rip),%xmm0        # 38aa0 <_ZL11stbi__bmask+0x320>
   2b66e:	00 
         if (z < 0) z = 0;
   2b66f:	66 0f ef ff          	pxor   %xmm7,%xmm7
   2b673:	31 d2                	xor    %edx,%edx
         float z = (float) pow(data[i*comp+k]*stbi__h2l_scale_i, stbi__h2l_gamma_i) * 255 + 0.5f;
   2b675:	f3 0f 58 05 3b d4 00 	addss  0xd43b(%rip),%xmm0        # 38ab8 <_ZL11stbi__bmask+0x338>
   2b67c:	00 
         if (z < 0) z = 0;
   2b67d:	f3 0f 10 4c 24 10    	movss  0x10(%rsp),%xmm1
   2b683:	0f 2f f8             	comiss %xmm0,%xmm7
   2b686:	77 12                	ja     2b69a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x167a>
         if (z > 255) z = 255;
   2b688:	0f 2f 05 11 d4 00 00 	comiss 0xd411(%rip),%xmm0        # 38aa0 <_ZL11stbi__bmask+0x320>
   2b68f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   2b694:	0f 86 86 00 00 00    	jbe    2b720 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1700>
         output[i*comp + k] = (stbi_uc) stbi__float2int(z);
   2b69a:	88 54 1d 00          	mov    %dl,0x0(%rbp,%rbx,1)
      for (k=0; k < n; ++k) {
   2b69e:	48 83 c3 01          	add    $0x1,%rbx
   2b6a2:	4c 39 eb             	cmp    %r13,%rbx
   2b6a5:	75 a9                	jne    2b650 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1630>
   2b6a7:	8b 4c 24 30          	mov    0x30(%rsp),%ecx
      if (k < comp) {
   2b6ab:	8b 44 24 48          	mov    0x48(%rsp),%eax
   2b6af:	39 44 24 08          	cmp    %eax,0x8(%rsp)
   2b6b3:	7e 44                	jle    2b6f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x16d9>
         float z = data[i*comp+k] * 255 + 0.5f;
   2b6b5:	44 01 f8             	add    %r15d,%eax
   2b6b8:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
         if (z < 0) z = 0;
   2b6bd:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2b6c1:	31 d2                	xor    %edx,%edx
         float z = data[i*comp+k] * 255 + 0.5f;
   2b6c3:	48 98                	cltq
   2b6c5:	f3 0f 10 05 d3 d3 00 	movss  0xd3d3(%rip),%xmm0        # 38aa0 <_ZL11stbi__bmask+0x320>
   2b6cc:	00 
   2b6cd:	f3 0f 59 04 83       	mulss  (%rbx,%rax,4),%xmm0
   2b6d2:	f3 0f 58 05 de d3 00 	addss  0xd3de(%rip),%xmm0        # 38ab8 <_ZL11stbi__bmask+0x338>
   2b6d9:	00 
         if (z < 0) z = 0;
   2b6da:	0f 2f c8             	comiss %xmm0,%xmm1
   2b6dd:	77 12                	ja     2b6f1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x16d1>
         if (z > 255) z = 255;
   2b6df:	0f 2f 05 ba d3 00 00 	comiss 0xd3ba(%rip),%xmm0        # 38aa0 <_ZL11stbi__bmask+0x320>
   2b6e6:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   2b6eb:	0f 86 52 04 00 00    	jbe    2bb43 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1b23>
         output[i*comp + k] = (stbi_uc) stbi__float2int(z);
   2b6f1:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
   2b6f6:	88 14 03             	mov    %dl,(%rbx,%rax,1)
   for (i=0; i < x*y; ++i) {
   2b6f9:	8b 44 24 08          	mov    0x8(%rsp),%eax
   2b6fd:	41 83 c6 01          	add    $0x1,%r14d
   2b701:	41 01 c7             	add    %eax,%r15d
   2b704:	8b 44 24 40          	mov    0x40(%rsp),%eax
   2b708:	41 39 c6             	cmp    %eax,%r14d
   2b70b:	0f 85 fa fe ff ff    	jne    2b60b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x15eb>
   STBI_FREE(data);
   2b711:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
   2b716:	e8 85 af fd ff       	call   66a0 <free@plt>
   return output;
   2b71b:	e9 d9 f0 ff ff       	jmp    2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
         output[i*comp + k] = (stbi_uc) stbi__float2int(z);
   2b720:	f3 0f 2c d0          	cvttss2si %xmm0,%edx
   2b724:	e9 71 ff ff ff       	jmp    2b69a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x167a>
      stbi__refill_buffer(s);
   2b729:	4c 89 ef             	mov    %r13,%rdi
   2b72c:	e8 4f 5b fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2b731:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2b738:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2b73c:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2b743:	0f b6 00             	movzbl (%rax),%eax
   2b746:	e9 bf ea ff ff       	jmp    2a20a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ea>
      s->img_buffer_end = s->buffer_start + n;
   2b74b:	48 98                	cltq
      return *s->img_buffer++;
   2b74d:	41 0f b6 55 38       	movzbl 0x38(%r13),%edx
      s->img_buffer_end = s->buffer_start + n;
   2b752:	48 01 c3             	add    %rax,%rbx
      s->img_buffer_end = s->buffer_start+1;
   2b755:	49 8d 45 39          	lea    0x39(%r13),%rax
      s->img_buffer_end = s->buffer_start + n;
   2b759:	49 89 9d c8 00 00 00 	mov    %rbx,0xc8(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2b760:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   2b767:	e9 85 e9 ff ff       	jmp    2a0f1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xd1>
   stbi__g_failure_reason = str;
   2b76c:	48 8d 05 5b c7 00 00 	lea    0xc75b(%rip),%rax        # 37ece <_ZSt19piecewise_construct+0x587>
   2b773:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b77a:	ff ff 
   if (req_comp < 0 || req_comp > 4) return stbi__errpuc("bad req_comp", "Internal error");
   2b77c:	e9 5d f5 ff ff       	jmp    2acde <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xcbe>
   if (s->read_from_callbacks) {
   2b781:	8b 4d 30             	mov    0x30(%rbp),%ecx
   return 0;
   2b784:	45 31 ff             	xor    %r15d,%r15d
   if (s->read_from_callbacks) {
   2b787:	85 c9                	test   %ecx,%ecx
   2b789:	75 0c                	jne    2b797 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1777>
   return 0;
   2b78b:	31 db                	xor    %ebx,%ebx
   if (s->img_buffer < s->img_buffer_end)
   2b78d:	48 89 f0             	mov    %rsi,%rax
   return 0;
   2b790:	31 f6                	xor    %esi,%esi
   2b792:	e9 49 f9 ff ff       	jmp    2b0e0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x10c0>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b797:	48 8d 5d 38          	lea    0x38(%rbp),%rbx
   2b79b:	8b 55 34             	mov    0x34(%rbp),%edx
   2b79e:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   2b7a2:	48 89 de             	mov    %rbx,%rsi
   2b7a5:	41 ff d0             	call   *%r8
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b7a8:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
      s->img_buffer_end = s->buffer_start+1;
   2b7af:	48 8d 7d 39          	lea    0x39(%rbp),%rdi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b7b3:	48 2b 95 d0 00 00 00 	sub    0xd0(%rbp),%rdx
   2b7ba:	01 95 b8 00 00 00    	add    %edx,0xb8(%rbp)
   if (n == 0) {
   2b7c0:	85 c0                	test   %eax,%eax
   2b7c2:	0f 85 d0 0e 00 00    	jne    2c698 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2678>
      s->read_from_callbacks = 0;
   2b7c8:	c7 45 30 00 00 00 00 	movl   $0x0,0x30(%rbp)
      s->img_buffer_end = s->buffer_start+1;
   2b7cf:	48 89 f8             	mov    %rdi,%rax
      *s->img_buffer = 0;
   2b7d2:	c6 45 38 00          	movb   $0x0,0x38(%rbp)
   2b7d6:	48 89 85 c8 00 00 00 	mov    %rax,0xc8(%rbp)
      return *s->img_buffer++;
   2b7dd:	4c 8b 45 10          	mov    0x10(%rbp),%r8
   2b7e1:	48 89 bd c0 00 00 00 	mov    %rdi,0xc0(%rbp)
   2b7e8:	e9 c5 f8 ff ff       	jmp    2b0b2 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1092>
   if (s->read_from_callbacks) {
   2b7ed:	8b 45 30             	mov    0x30(%rbp),%eax
   2b7f0:	85 c0                	test   %eax,%eax
   2b7f2:	0f 85 93 02 00 00    	jne    2ba8b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1a6b>
   if (s->io.read) {
   2b7f8:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
      packet->channel = stbi__get8(s);
   2b7fd:	41 c6 44 24 01 00    	movb   $0x0,0x1(%r12)
   if (s->io.read) {
   2b803:	0f 85 04 f9 ff ff    	jne    2b10d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x10ed>
   2b809:	44 89 ed             	mov    %r13d,%ebp
   stbi__g_failure_reason = str;
   2b80c:	48 8d 05 92 c2 00 00 	lea    0xc292(%rip),%rax        # 37aa5 <_ZSt19piecewise_construct+0x15e>
   2b813:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b81a:	ff ff 
                     if (stbi__at_eof(s))   return stbi__errpuc("bad file","file too short (pure read count)");
   2b81c:	e9 48 f9 ff ff       	jmp    2b169 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1149>
   if (stbi__at_eof(s))  return stbi__errpuc("bad file","file too short (pic header)");
   2b821:	48 8d 05 7d c2 00 00 	lea    0xc27d(%rip),%rax        # 37aa5 <_ZSt19piecewise_construct+0x15e>
   2b828:	e9 e5 f9 ff ff       	jmp    2b212 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11f2>
   if (n < 0) {
   2b82d:	be 06 00 00 00       	mov    $0x6,%esi
   2b832:	4c 89 ef             	mov    %r13,%rdi
   2b835:	e8 d6 72 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   channelCount = stbi__get16be(s);
   2b83a:	4c 89 ef             	mov    %r13,%rdi
   2b83d:	e8 6e 2a ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2b842:	89 c3                	mov    %eax,%ebx
   if (channelCount < 0 || channelCount > 16)
   2b844:	83 f8 10             	cmp    $0x10,%eax
   2b847:	0f 87 5d 01 00 00    	ja     2b9aa <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x198a>
   h = stbi__get32be(s);
   2b84d:	4c 89 ef             	mov    %r13,%rdi
   2b850:	e8 ab 30 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   w = stbi__get32be(s);
   2b855:	4c 89 ef             	mov    %r13,%rdi
   h = stbi__get32be(s);
   2b858:	89 44 24 38          	mov    %eax,0x38(%rsp)
   2b85c:	41 89 c6             	mov    %eax,%r14d
   w = stbi__get32be(s);
   2b85f:	e8 9c 30 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   2b864:	41 89 c7             	mov    %eax,%r15d
   if (h > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2b867:	41 81 fe 00 00 00 01 	cmp    $0x1000000,%r14d
   2b86e:	0f 8f ac fc ff ff    	jg     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   if (w > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2b874:	3d 00 00 00 01       	cmp    $0x1000000,%eax
   2b879:	0f 8f a1 fc ff ff    	jg     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   bitdepth = stbi__get16be(s);
   2b87f:	4c 89 ef             	mov    %r13,%rdi
   2b882:	e8 29 2a ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2b887:	89 44 24 48          	mov    %eax,0x48(%rsp)
   if (bitdepth != 8 && bitdepth != 16)
   2b88b:	83 e8 08             	sub    $0x8,%eax
   2b88e:	83 e0 f7             	and    $0xfffffff7,%eax
   2b891:	0f 85 46 10 00 00    	jne    2c8dd <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x28bd>
   if (stbi__get16be(s) != 3)
   2b897:	4c 89 ef             	mov    %r13,%rdi
   2b89a:	e8 11 2a ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2b89f:	83 f8 03             	cmp    $0x3,%eax
   2b8a2:	0f 84 ba 17 00 00    	je     2d062 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3042>
   stbi__g_failure_reason = str;
   2b8a8:	48 8d 05 81 c6 00 00 	lea    0xc681(%rip),%rax        # 37f30 <_ZSt19piecewise_construct+0x5e9>
   2b8af:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b8b6:	ff ff 
      return stbi__errpuc("wrong color format", "PSD is not in RGB color format");
   2b8b8:	e9 33 ef ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   2b8bd:	0f 1f 00             	nopl   (%rax)
   stbi__get8(s);      //   discard Offset
   2b8c0:	4c 89 ef             	mov    %r13,%rdi
   2b8c3:	e8 d8 01 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   tga_color_type = stbi__get8(s);   //   color type
   2b8c8:	4c 89 ef             	mov    %r13,%rdi
   2b8cb:	e8 d0 01 ff ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   2b8d0:	0f b6 e8             	movzbl %al,%ebp
   2b8d3:	89 eb                	mov    %ebp,%ebx
   if ( tga_color_type > 1 ) goto errorEnd;   //   only RGB or indexed allowed
   2b8d5:	83 fd 01             	cmp    $0x1,%ebp
   2b8d8:	0f 8e 5f 09 00 00    	jle    2c23d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x221d>
   s->img_buffer = s->img_buffer_original;
   2b8de:	49 8b 85 d0 00 00 00 	mov    0xd0(%r13),%rax
   2b8e5:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   s->img_buffer_end = s->img_buffer_original_end;
   2b8ec:	49 8b 85 d8 00 00 00 	mov    0xd8(%r13),%rax
   2b8f3:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
   stbi__g_failure_reason = str;
   2b8fa:	48 8d 05 a3 c5 00 00 	lea    0xc5a3(%rip),%rax        # 37ea4 <_ZSt19piecewise_construct+0x55d>
   2b901:	e9 0c f9 ff ff       	jmp    2b212 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11f2>
   is_rgb = z->s->img_n == 3 && (z->rgb == 3 || (z->app14_color_transform == 0 && !z->jfif));
   2b906:	41 83 fb 03          	cmp    $0x3,%r11d
   2b90a:	0f 84 d9 01 00 00    	je     2bae9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ac9>
   if (decode_n <= 0) { stbi__cleanup_jpeg(z); return NULL; }
   2b910:	c6 44 24 68 00       	movb   $0x0,0x68(%rsp)
   2b915:	45 89 d8             	mov    %r11d,%r8d
   2b918:	45 85 db             	test   %r11d,%r11d
   2b91b:	0f 8f e6 f1 ff ff    	jg     2ab07 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xae7>
   stbi__free_jpeg_components(j, j->s->img_n, 0);
   2b921:	4c 89 d7             	mov    %r10,%rdi
   2b924:	44 89 de             	mov    %r11d,%esi
   2b927:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
   2b92c:	e8 8f 90 fe ff       	call   149c0 <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0>
   if (decode_n <= 0) { stbi__cleanup_jpeg(z); return NULL; }
   2b931:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   2b936:	e9 a3 f3 ff ff       	jmp    2acde <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xcbe>
      s->img_buffer_end = s->buffer_start + n;
   2b93b:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
   int z = stbi__get8(s);
   2b93f:	41 0f b6 5d 38       	movzbl 0x38(%r13),%ebx
      return *s->img_buffer++;
   2b944:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
   2b94b:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
   return (z << 8) + stbi__get8(s);
   2b952:	c1 e3 08             	shl    $0x8,%ebx
   2b955:	e9 98 f5 ff ff       	jmp    2aef2 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xed2>
   2b95a:	41 0f b6 55 38       	movzbl 0x38(%r13),%edx
      s->img_buffer_end = s->buffer_start + n;
   2b95f:	48 98                	cltq
      return *s->img_buffer++;
   2b961:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
      s->img_buffer_end = s->buffer_start + n;
   2b968:	4c 01 f0             	add    %r14,%rax
   2b96b:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
   return (z << 8) + stbi__get8(s);
   2b972:	01 d3                	add    %edx,%ebx
   2b974:	e9 92 f5 ff ff       	jmp    2af0b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xeeb>
      s->img_buffer_end = s->buffer_start + n;
   2b979:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
   int z = stbi__get8(s);
   2b97d:	41 0f b6 5d 38       	movzbl 0x38(%r13),%ebx
      return *s->img_buffer++;
   2b982:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2b989:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
   return (z << 8) + stbi__get8(s);
   2b990:	c1 e3 08             	shl    $0x8,%ebx
   2b993:	e9 93 f5 ff ff       	jmp    2af2b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xf0b>
      s->img_buffer_end = s->buffer_start + n;
   2b998:	48 98                	cltq
   2b99a:	49 8d 0c 07          	lea    (%r15,%rax,1),%rcx
   return (z << 8) + stbi__get8(s);
   2b99e:	41 0f b6 45 38       	movzbl 0x38(%r13),%eax
   2b9a3:	01 c3                	add    %eax,%ebx
   2b9a5:	e9 6f fa ff ff       	jmp    2b419 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x13f9>
   stbi__g_failure_reason = str;
   2b9aa:	48 8d 05 55 c5 00 00 	lea    0xc555(%rip),%rax        # 37f06 <_ZSt19piecewise_construct+0x5bf>
   2b9b1:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2b9b8:	ff ff 
      return stbi__errpuc("wrong channel count", "Unsupported number of channels in PSD image");
   2b9ba:	e9 31 ee ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   2b9bf:	31 db                	xor    %ebx,%ebx
   2b9c1:	e9 52 f6 ff ff       	jmp    2b018 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xff8>
   if (s->read_from_callbacks) {
   2b9c6:	8b 55 30             	mov    0x30(%rbp),%edx
   2b9c9:	85 d2                	test   %edx,%edx
   2b9cb:	0f 84 34 0f 00 00    	je     2c905 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x28e5>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2b9d1:	48 8d 5d 38          	lea    0x38(%rbp),%rbx
   2b9d5:	8b 55 34             	mov    0x34(%rbp),%edx
   2b9d8:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   2b9dc:	48 89 de             	mov    %rbx,%rsi
   2b9df:	41 ff d0             	call   *%r8
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b9e2:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
      s->img_buffer_end = s->buffer_start+1;
   2b9e9:	48 8d 75 39          	lea    0x39(%rbp),%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2b9ed:	48 2b 95 d0 00 00 00 	sub    0xd0(%rbp),%rdx
   2b9f4:	01 95 b8 00 00 00    	add    %edx,0xb8(%rbp)
   if (n == 0) {
   2b9fa:	85 c0                	test   %eax,%eax
   2b9fc:	0f 85 a5 0c 00 00    	jne    2c6a7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2687>
      s->read_from_callbacks = 0;
   2ba02:	c7 45 30 00 00 00 00 	movl   $0x0,0x30(%rbp)
      *s->img_buffer = 0;
   2ba09:	4c 8b 45 10          	mov    0x10(%rbp),%r8
      return *s->img_buffer++;
   2ba0d:	31 db                	xor    %ebx,%ebx
      *s->img_buffer = 0;
   2ba0f:	c6 45 38 00          	movb   $0x0,0x38(%rbp)
   2ba13:	48 89 b5 c8 00 00 00 	mov    %rsi,0xc8(%rbp)
      return *s->img_buffer++;
   2ba1a:	48 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%rbp)
   if (s->read_from_callbacks) {
   2ba21:	8b 45 30             	mov    0x30(%rbp),%eax
   2ba24:	85 c0                	test   %eax,%eax
   2ba26:	0f 84 c6 0e 00 00    	je     2c8f2 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x28d2>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2ba2c:	48 8d 75 38          	lea    0x38(%rbp),%rsi
   2ba30:	8b 55 34             	mov    0x34(%rbp),%edx
   2ba33:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   2ba37:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
   2ba3c:	41 ff d0             	call   *%r8
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2ba3f:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   if (n == 0) {
   2ba46:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2ba4b:	48 2b 95 d0 00 00 00 	sub    0xd0(%rbp),%rdx
   2ba52:	01 95 b8 00 00 00    	add    %edx,0xb8(%rbp)
   if (n == 0) {
   2ba58:	85 c0                	test   %eax,%eax
      s->img_buffer_end = s->buffer_start+1;
   2ba5a:	48 8d 55 39          	lea    0x39(%rbp),%rdx
   if (n == 0) {
   2ba5e:	0f 85 e2 0c 00 00    	jne    2c746 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2726>
      s->read_from_callbacks = 0;
   2ba64:	c7 45 30 00 00 00 00 	movl   $0x0,0x30(%rbp)
      s->img_buffer_end = s->buffer_start+1;
   2ba6b:	48 89 d0             	mov    %rdx,%rax
   2ba6e:	31 f6                	xor    %esi,%esi
      *s->img_buffer = 0;
   2ba70:	c6 45 38 00          	movb   $0x0,0x38(%rbp)
   2ba74:	48 89 85 c8 00 00 00 	mov    %rax,0xc8(%rbp)
      return *s->img_buffer++;
   2ba7b:	4c 8b 45 10          	mov    0x10(%rbp),%r8
   2ba7f:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
   2ba86:	e9 55 f6 ff ff       	jmp    2b0e0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x10c0>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2ba8b:	4c 8d 4d 38          	lea    0x38(%rbp),%r9
   2ba8f:	8b 55 34             	mov    0x34(%rbp),%edx
   2ba92:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   2ba96:	4c 89 ce             	mov    %r9,%rsi
   2ba99:	4c 89 4c 24 50       	mov    %r9,0x50(%rsp)
   2ba9e:	41 ff d0             	call   *%r8
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2baa1:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   if (n == 0) {
   2baa8:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
      s->img_buffer_end = s->buffer_start+1;
   2baad:	48 8d 75 39          	lea    0x39(%rbp),%rsi
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2bab1:	48 2b 95 d0 00 00 00 	sub    0xd0(%rbp),%rdx
   2bab8:	01 95 b8 00 00 00    	add    %edx,0xb8(%rbp)
   if (n == 0) {
   2babe:	85 c0                	test   %eax,%eax
   2bac0:	0f 85 34 0b 00 00    	jne    2c5fa <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x25da>
      s->read_from_callbacks = 0;
   2bac6:	c7 45 30 00 00 00 00 	movl   $0x0,0x30(%rbp)
      s->img_buffer_end = s->buffer_start+1;
   2bacd:	48 89 f0             	mov    %rsi,%rax
   2bad0:	31 d2                	xor    %edx,%edx
      *s->img_buffer = 0;
   2bad2:	c6 45 38 00          	movb   $0x0,0x38(%rbp)
   2bad6:	48 89 85 c8 00 00 00 	mov    %rax,0xc8(%rbp)
      return *s->img_buffer++;
   2badd:	48 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%rbp)
   2bae4:	e9 18 f6 ff ff       	jmp    2b101 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x10e1>
   is_rgb = z->s->img_n == 3 && (z->rgb == 3 || (z->app14_color_transform == 0 && !z->jfif));
   2bae9:	45 8b 82 50 48 00 00 	mov    0x4850(%r10),%r8d
   2baf0:	c6 44 24 68 01       	movb   $0x1,0x68(%rsp)
   2baf5:	41 83 f8 03          	cmp    $0x3,%r8d
   2baf9:	0f 84 08 f0 ff ff    	je     2ab07 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xae7>
   2baff:	49 83 ba 48 48 00 00 	cmpq   $0x0,0x4848(%r10)
   2bb06:	00 
   2bb07:	41 b8 03 00 00 00    	mov    $0x3,%r8d
   2bb0d:	0f 84 f4 ef ff ff    	je     2ab07 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xae7>
   if (z->s->img_n == 3 && n < 3 && !is_rgb)
   2bb13:	45 31 c0             	xor    %r8d,%r8d
   2bb16:	83 7c 24 08 02       	cmpl   $0x2,0x8(%rsp)
   2bb1b:	c6 44 24 68 00       	movb   $0x0,0x68(%rsp)
   2bb20:	41 0f 9f c0          	setg   %r8b
   2bb24:	47 8d 44 00 01       	lea    0x1(%r8,%r8,1),%r8d
   2bb29:	e9 d9 ef ff ff       	jmp    2ab07 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xae7>
   2bb2e:	c7 44 24 60 01 00 00 	movl   $0x1,0x60(%rsp)
   2bb35:	00 
   n = req_comp ? req_comp : z->s->img_n >= 3 ? 3 : 1;
   2bb36:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%rsp)
   2bb3d:	00 
   2bb3e:	e9 cd fd ff ff       	jmp    2b910 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18f0>
         output[i*comp + k] = (stbi_uc) stbi__float2int(z);
   2bb43:	f3 0f 2c d0          	cvttss2si %xmm0,%edx
   2bb47:	e9 a5 fb ff ff       	jmp    2b6f1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x16d1>
   if (a < 0 || b < 0) return 0;
   2bb4c:	45 85 e4             	test   %r12d,%r12d
   2bb4f:	0f 88 64 f1 ff ff    	js     2acb9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc99>
   return stbi__malloc(a*b*c + add);
   2bb55:	44 8b 74 24 08       	mov    0x8(%rsp),%r14d
   2bb5a:	44 89 5c 24 48       	mov    %r11d,0x48(%rsp)
   2bb5f:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
   2bb64:	44 89 f7             	mov    %r14d,%edi
   2bb67:	4c 89 4c 24 40       	mov    %r9,0x40(%rsp)
   2bb6c:	0f af fd             	imul   %ebp,%edi
   2bb6f:	41 0f af fc          	imul   %r12d,%edi
   2bb73:	83 c7 01             	add    $0x1,%edi
   2bb76:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   2bb79:	e8 e2 ab fd ff       	call   6760 <malloc@plt>
      if (!output) { stbi__cleanup_jpeg(z); return stbi__errpuc("outofmem", "Out of memory"); }
   2bb7e:	4c 8b 54 24 38       	mov    0x38(%rsp),%r10
   2bb83:	44 8b 5c 24 48       	mov    0x48(%rsp),%r11d
   2bb88:	48 85 c0             	test   %rax,%rax
    return STBI_MALLOC(size);
   2bb8b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      if (!output) { stbi__cleanup_jpeg(z); return stbi__errpuc("outofmem", "Out of memory"); }
   2bb90:	0f 84 23 f1 ff ff    	je     2acb9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc99>
      for (j=0; j < z->s->img_y; ++j) {
   2bb96:	45 85 e4             	test   %r12d,%r12d
   2bb99:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
   2bb9e:	0f 84 e2 02 00 00    	je     2be86 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1e66>
   2bba4:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
   2bbab:	00 
   2bbac:	48 63 db             	movslq %ebx,%rbx
   2bbaf:	45 31 ff             	xor    %r15d,%r15d
   2bbb2:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
   2bbb7:	48 8d 04 d8          	lea    (%rax,%rbx,8),%rax
   2bbbb:	49 8d 9a c0 46 00 00 	lea    0x46c0(%r10),%rbx
   2bbc2:	45 89 fc             	mov    %r15d,%r12d
   2bbc5:	48 89 9c 24 80 00 00 	mov    %rbx,0x80(%rsp)
   2bbcc:	00 
                     out += n;
   2bbcd:	49 63 de             	movslq %r14d,%rbx
   2bbd0:	4d 89 d7             	mov    %r10,%r15
   2bbd3:	48 89 9c 24 88 00 00 	mov    %rbx,0x88(%rsp)
   2bbda:	00 
   2bbdb:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
      for (j=0; j < z->s->img_y; ++j) {
   2bbe0:	31 c0                	xor    %eax,%eax
   2bbe2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         stbi_uc *out = output + n * z->s->img_x * j;
   2bbe8:	41 0f af ec          	imul   %r12d,%ebp
   2bbec:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   2bbf1:	44 89 64 24 40       	mov    %r12d,0x40(%rsp)
   2bbf6:	4c 8b 6c 24 78       	mov    0x78(%rsp),%r13
   2bbfb:	48 8b 5c 24 70       	mov    0x70(%rsp),%rbx
   2bc00:	4c 89 7c 24 48       	mov    %r15,0x48(%rsp)
   2bc05:	4c 8b b4 24 80 00 00 	mov    0x80(%rsp),%r14
   2bc0c:	00 
   2bc0d:	89 44 24 58          	mov    %eax,0x58(%rsp)
   2bc11:	48 01 f5             	add    %rsi,%rbp
   2bc14:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
   2bc19:	4c 89 f5             	mov    %r14,%rbp
            int y_bot = r->ystep >= (r->vs >> 1);
   2bc1c:	44 8b 7b 1c          	mov    0x1c(%rbx),%r15d
            coutput[k] = r->resample(z->img_comp[k].linebuf,
   2bc20:	4c 8b 73 10          	mov    0x10(%rbx),%r14
            int y_bot = r->ystep >= (r->vs >> 1);
   2bc24:	44 8b 63 24          	mov    0x24(%rbx),%r12d
            coutput[k] = r->resample(z->img_comp[k].linebuf,
   2bc28:	48 8b 03             	mov    (%rbx),%rax
            int y_bot = r->ystep >= (r->vs >> 1);
   2bc2b:	44 89 ff             	mov    %r15d,%edi
            coutput[k] = r->resample(z->img_comp[k].linebuf,
   2bc2e:	44 8b 43 18          	mov    0x18(%rbx),%r8d
   2bc32:	8b 4b 20             	mov    0x20(%rbx),%ecx
   2bc35:	4c 89 f2             	mov    %r14,%rdx
            int y_bot = r->ystep >= (r->vs >> 1);
   2bc38:	d1 ff                	sar    %edi
            coutput[k] = r->resample(z->img_comp[k].linebuf,
   2bc3a:	48 8b 73 08          	mov    0x8(%rbx),%rsi
   2bc3e:	41 39 fc             	cmp    %edi,%r12d
   2bc41:	7c 06                	jl     2bc49 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1c29>
   2bc43:	48 89 f2             	mov    %rsi,%rdx
   2bc46:	4c 89 f6             	mov    %r14,%rsi
   2bc49:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
            if (++r->ystep >= r->vs) {
   2bc4d:	41 83 c4 01          	add    $0x1,%r12d
            coutput[k] = r->resample(z->img_comp[k].linebuf,
   2bc51:	ff d0                	call   *%rax
   2bc53:	49 89 45 00          	mov    %rax,0x0(%r13)
            if (++r->ystep >= r->vs) {
   2bc57:	45 39 e7             	cmp    %r12d,%r15d
   2bc5a:	0f 8e c8 00 00 00    	jle    2bd28 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1d08>
   2bc60:	44 89 63 24          	mov    %r12d,0x24(%rbx)
         for (k=0; k < decode_n; ++k) {
   2bc64:	48 83 c3 30          	add    $0x30,%rbx
   2bc68:	48 83 c5 60          	add    $0x60,%rbp
   2bc6c:	49 83 c5 08          	add    $0x8,%r13
   2bc70:	4c 39 6c 24 38       	cmp    %r13,0x38(%rsp)
   2bc75:	75 a5                	jne    2bc1c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1bfc>
            if (z->s->img_n == 3) {
   2bc77:	4c 8b 7c 24 48       	mov    0x48(%rsp),%r15
         if (n >= 3) {
   2bc7c:	83 7c 24 08 02       	cmpl   $0x2,0x8(%rsp)
            if (z->s->img_n == 3) {
   2bc81:	44 8b 64 24 40       	mov    0x40(%rsp),%r12d
   2bc86:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
   2bc8b:	4d 8b 0f             	mov    (%r15),%r9
   2bc8e:	8b 44 24 58          	mov    0x58(%rsp),%eax
                  for (i=0; i < z->s->img_x; ++i) {
   2bc92:	45 8b 01             	mov    (%r9),%r8d
         if (n >= 3) {
   2bc95:	0f 8e bb 00 00 00    	jle    2bd56 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1d36>
            if (z->s->img_n == 3) {
   2bc9b:	41 8b 51 08          	mov    0x8(%r9),%edx
            stbi_uc *y = coutput[0];
   2bc9f:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
   2bca6:	00 
            if (z->s->img_n == 3) {
   2bca7:	83 fa 03             	cmp    $0x3,%edx
   2bcaa:	0f 84 61 01 00 00    	je     2be11 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1df1>
            } else if (z->s->img_n == 4) {
   2bcb0:	83 fa 04             	cmp    $0x4,%edx
   2bcb3:	0f 85 92 01 00 00    	jne    2be4b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1e2b>
               if (z->app14_color_transform == 0) { // CMYK
   2bcb9:	41 8b 97 4c 48 00 00 	mov    0x484c(%r15),%edx
   2bcc0:	85 d2                	test   %edx,%edx
   2bcc2:	0f 84 66 03 00 00    	je     2c02e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x200e>
   2bcc8:	89 44 24 40          	mov    %eax,0x40(%rsp)
                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);
   2bccc:	4d 8b 9f 78 48 00 00 	mov    0x4878(%r15),%r11
                     out[1] = coutput[1][i];
   2bcd3:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
   2bcda:	00 
                     out[2] = coutput[2][i];
   2bcdb:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
   2bce2:	00 
               } else if (z->app14_color_transform == 2) { // YCCK
   2bce3:	83 fa 02             	cmp    $0x2,%edx
   2bce6:	0f 84 bf 04 00 00    	je     2c1ab <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x218b>
                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);
   2bcec:	44 8b 4c 24 08       	mov    0x8(%rsp),%r9d
   2bcf1:	48 89 fa             	mov    %rdi,%rdx
   2bcf4:	48 89 ef             	mov    %rbp,%rdi
   2bcf7:	41 ff d3             	call   *%r11
      for (j=0; j < z->s->img_y; ++j) {
   2bcfa:	4d 8b 0f             	mov    (%r15),%r9
   2bcfd:	8b 44 24 40          	mov    0x40(%rsp),%eax
   2bd01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   2bd08:	8b 74 24 60          	mov    0x60(%rsp),%esi
   2bd0c:	83 c0 01             	add    $0x1,%eax
   2bd0f:	41 01 f4             	add    %esi,%r12d
   2bd12:	41 3b 41 04          	cmp    0x4(%r9),%eax
   2bd16:	0f 83 67 01 00 00    	jae    2be83 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1e63>
         stbi_uc *out = output + n * z->s->img_x * j;
   2bd1c:	41 8b 29             	mov    (%r9),%ebp
   2bd1f:	e9 c4 fe ff ff       	jmp    2bbe8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1bc8>
   2bd24:	0f 1f 40 00          	nopl   0x0(%rax)
               if (++r->ypos < z->img_comp[k].y)
   2bd28:	8b 43 28             	mov    0x28(%rbx),%eax
               r->ystep = 0;
   2bd2b:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%rbx)
               r->line0 = r->line1;
   2bd32:	4c 89 73 08          	mov    %r14,0x8(%rbx)
               if (++r->ypos < z->img_comp[k].y)
   2bd36:	83 c0 01             	add    $0x1,%eax
   2bd39:	89 43 28             	mov    %eax,0x28(%rbx)
   2bd3c:	3b 45 00             	cmp    0x0(%rbp),%eax
   2bd3f:	0f 8d 1f ff ff ff    	jge    2bc64 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1c44>
                  r->line1 += z->img_comp[k].w2;
   2bd45:	48 63 45 04          	movslq 0x4(%rbp),%rax
   2bd49:	4d 8d 14 06          	lea    (%r14,%rax,1),%r10
   2bd4d:	4c 89 53 10          	mov    %r10,0x10(%rbx)
   2bd51:	e9 0e ff ff ff       	jmp    2bc64 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1c44>
            if (is_rgb) {
   2bd56:	80 7c 24 68 00       	cmpb   $0x0,0x68(%rsp)
   2bd5b:	74 6a                	je     2bdc7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1da7>
               if (n == 1)
   2bd5d:	83 7c 24 08 01       	cmpl   $0x1,0x8(%rsp)
   2bd62:	0f 84 4e 02 00 00    	je     2bfb6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1f96>
                  for (i=0; i < z->s->img_x; ++i, out += 2) {
   2bd68:	45 85 c0             	test   %r8d,%r8d
   2bd6b:	74 9b                	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
                     out[0] = stbi__compute_y(coutput[0][i], coutput[1][i], coutput[2][i]);
   2bd6d:	48 8b 9c 24 b0 00 00 	mov    0xb0(%rsp),%rbx
   2bd74:	00 
   2bd75:	4c 8b 9c 24 a8 00 00 	mov    0xa8(%rsp),%r11
   2bd7c:	00 
   2bd7d:	31 c9                	xor    %ecx,%ecx
   2bd7f:	4c 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%r8
   2bd86:	00 
   2bd87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2bd8e:	00 00 
   2bd90:	89 ce                	mov    %ecx,%esi
   2bd92:	41 0f b6 14 30       	movzbl (%r8,%rsi,1),%edx
   2bd97:	41 0f b6 3c 33       	movzbl (%r11,%rsi,1),%edi
   2bd9c:	0f b6 34 33          	movzbl (%rbx,%rsi,1),%esi
                     out[1] = 255;
   2bda0:	c6 44 4d 01 ff       	movb   $0xff,0x1(%rbp,%rcx,2)
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   2bda5:	6b d2 4d             	imul   $0x4d,%edx,%edx
   2bda8:	69 ff 96 00 00 00    	imul   $0x96,%edi,%edi
   2bdae:	6b f6 1d             	imul   $0x1d,%esi,%esi
   2bdb1:	01 fa                	add    %edi,%edx
   2bdb3:	01 f2                	add    %esi,%edx
   2bdb5:	88 74 4d 00          	mov    %dh,0x0(%rbp,%rcx,2)
                  for (i=0; i < z->s->img_x; ++i, out += 2) {
   2bdb9:	48 83 c1 01          	add    $0x1,%rcx
   2bdbd:	41 3b 09             	cmp    (%r9),%ecx
   2bdc0:	72 ce                	jb     2bd90 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1d70>
   2bdc2:	e9 41 ff ff ff       	jmp    2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
            } else if (z->s->img_n == 4 && z->app14_color_transform == 0) {
   2bdc7:	41 83 79 08 04       	cmpl   $0x4,0x8(%r9)
   2bdcc:	0f 84 78 01 00 00    	je     2bf4a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1f2a>
               if (n == 1)
   2bdd2:	83 7c 24 08 01       	cmpl   $0x1,0x8(%rsp)
               stbi_uc *y = coutput[0];
   2bdd7:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
   2bdde:	00 
               if (n == 1)
   2bddf:	0f 84 26 02 00 00    	je     2c00b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1feb>
                  for (i=0; i < z->s->img_x; ++i) { *out++ = y[i]; *out++ = 255; }
   2bde5:	31 d2                	xor    %edx,%edx
   2bde7:	45 85 c0             	test   %r8d,%r8d
   2bdea:	0f 84 18 ff ff ff    	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
   2bdf0:	89 d6                	mov    %edx,%esi
   2bdf2:	0f b6 34 31          	movzbl (%rcx,%rsi,1),%esi
   2bdf6:	c6 44 55 01 ff       	movb   $0xff,0x1(%rbp,%rdx,2)
   2bdfb:	40 88 74 55 00       	mov    %sil,0x0(%rbp,%rdx,2)
   2be00:	48 83 c2 01          	add    $0x1,%rdx
   2be04:	41 3b 11             	cmp    (%r9),%edx
   2be07:	72 e7                	jb     2bdf0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1dd0>
      for (j=0; j < z->s->img_y; ++j) {
   2be09:	4d 8b 0f             	mov    (%r15),%r9
   2be0c:	e9 f7 fe ff ff       	jmp    2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
               if (is_rgb) {
   2be11:	80 7c 24 68 00       	cmpb   $0x0,0x68(%rsp)
   2be16:	0f 85 9c 02 00 00    	jne    2c0b8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2098>
   2be1c:	89 44 24 40          	mov    %eax,0x40(%rsp)
                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);
   2be20:	44 8b 4c 24 08       	mov    0x8(%rsp),%r9d
   2be25:	48 89 ef             	mov    %rbp,%rdi
   2be28:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
   2be2f:	00 
   2be30:	48 8b 94 24 a8 00 00 	mov    0xa8(%rsp),%rdx
   2be37:	00 
   2be38:	41 ff 97 78 48 00 00 	call   *0x4878(%r15)
      for (j=0; j < z->s->img_y; ++j) {
   2be3f:	4d 8b 0f             	mov    (%r15),%r9
   2be42:	8b 44 24 40          	mov    0x40(%rsp),%eax
   2be46:	e9 bd fe ff ff       	jmp    2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
               for (i=0; i < z->s->img_x; ++i) {
   2be4b:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
   2be52:	00 
   2be53:	31 d2                	xor    %edx,%edx
   2be55:	45 85 c0             	test   %r8d,%r8d
   2be58:	0f 84 aa fe ff ff    	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
   2be5e:	66 90                	xchg   %ax,%ax
                  out[0] = out[1] = out[2] = y[i];
   2be60:	89 d1                	mov    %edx,%ecx
               for (i=0; i < z->s->img_x; ++i) {
   2be62:	83 c2 01             	add    $0x1,%edx
                  out[0] = out[1] = out[2] = y[i];
   2be65:	0f b6 1c 0e          	movzbl (%rsi,%rcx,1),%ebx
                  out[3] = 255; // not used if n==3
   2be69:	c6 45 03 ff          	movb   $0xff,0x3(%rbp)
                  out[0] = out[1] = out[2] = y[i];
   2be6d:	0f b6 cb             	movzbl %bl,%ecx
   2be70:	88 5d 02             	mov    %bl,0x2(%rbp)
   2be73:	88 dd                	mov    %bl,%ch
   2be75:	66 89 4d 00          	mov    %cx,0x0(%rbp)
                  out += n;
   2be79:	48 01 fd             	add    %rdi,%rbp
               for (i=0; i < z->s->img_x; ++i) {
   2be7c:	41 3b 11             	cmp    (%r9),%edx
   2be7f:	72 df                	jb     2be60 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1e40>
   2be81:	eb 86                	jmp    2be09 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1de9>
   2be83:	4d 89 fa             	mov    %r15,%r10
   stbi__free_jpeg_components(j, j->s->img_n, 0);
   2be86:	49 63 41 08          	movslq 0x8(%r9),%rax
   for (i=0; i < ncomp; ++i) {
   2be8a:	85 c0                	test   %eax,%eax
   2be8c:	0f 8e 80 00 00 00    	jle    2bf12 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ef2>
   2be92:	48 8d 1c 40          	lea    (%rax,%rax,2),%rbx
   2be96:	4c 89 d5             	mov    %r10,%rbp
         z->img_comp[i].data = NULL;
   2be99:	4d 89 d4             	mov    %r10,%r12
   2be9c:	48 c1 e3 05          	shl    $0x5,%rbx
   2bea0:	4c 01 d3             	add    %r10,%rbx
      if (z->img_comp[i].raw_data) {
   2bea3:	48 8b bd d8 46 00 00 	mov    0x46d8(%rbp),%rdi
   2beaa:	48 85 ff             	test   %rdi,%rdi
   2bead:	74 10                	je     2bebf <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1e9f>
         STBI_FREE(z->img_comp[i].raw_data);
   2beaf:	e8 ec a7 fd ff       	call   66a0 <free@plt>
         z->img_comp[i].data = NULL;
   2beb4:	66 0f ef ff          	pxor   %xmm7,%xmm7
   2beb8:	0f 11 bd d0 46 00 00 	movups %xmm7,0x46d0(%rbp)
      if (z->img_comp[i].raw_coeff) {
   2bebf:	48 8b bd e0 46 00 00 	mov    0x46e0(%rbp),%rdi
   2bec6:	48 85 ff             	test   %rdi,%rdi
   2bec9:	74 1b                	je     2bee6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ec6>
         STBI_FREE(z->img_comp[i].raw_coeff);
   2becb:	e8 d0 a7 fd ff       	call   66a0 <free@plt>
         z->img_comp[i].raw_coeff = 0;
   2bed0:	48 c7 85 e0 46 00 00 	movq   $0x0,0x46e0(%rbp)
   2bed7:	00 00 00 00 
         z->img_comp[i].coeff = 0;
   2bedb:	48 c7 85 f0 46 00 00 	movq   $0x0,0x46f0(%rbp)
   2bee2:	00 00 00 00 
      if (z->img_comp[i].linebuf) {
   2bee6:	48 8b bd e8 46 00 00 	mov    0x46e8(%rbp),%rdi
   2beed:	48 85 ff             	test   %rdi,%rdi
   2bef0:	74 10                	je     2bf02 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ee2>
         STBI_FREE(z->img_comp[i].linebuf);
   2bef2:	e8 a9 a7 fd ff       	call   66a0 <free@plt>
         z->img_comp[i].linebuf = NULL;
   2bef7:	48 c7 85 e8 46 00 00 	movq   $0x0,0x46e8(%rbp)
   2befe:	00 00 00 00 
   for (i=0; i < ncomp; ++i) {
   2bf02:	48 83 c5 60          	add    $0x60,%rbp
   2bf06:	48 39 eb             	cmp    %rbp,%rbx
   2bf09:	75 98                	jne    2bea3 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1e83>
      *out_x = z->s->img_x;
   2bf0b:	4d 8b 0c 24          	mov    (%r12),%r9
   2bf0f:	4d 89 e2             	mov    %r12,%r10
   2bf12:	41 8b 01             	mov    (%r9),%eax
   2bf15:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
   2bf1a:	89 03                	mov    %eax,(%rbx)
      *out_y = z->s->img_y;
   2bf1c:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
   2bf21:	41 8b 41 04          	mov    0x4(%r9),%eax
   2bf25:	89 03                	mov    %eax,(%rbx)
      if (comp) *comp = z->s->img_n >= 3 ? 3 : 1; // report original components, not output
   2bf27:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
   2bf2c:	48 85 db             	test   %rbx,%rbx
   2bf2f:	0f 84 b2 ed ff ff    	je     2ace7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xcc7>
   2bf35:	31 c0                	xor    %eax,%eax
   2bf37:	41 83 79 08 03       	cmpl   $0x3,0x8(%r9)
   2bf3c:	0f 9d c0             	setge  %al
   2bf3f:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax
   2bf43:	89 03                	mov    %eax,(%rbx)
   2bf45:	e9 9d ed ff ff       	jmp    2ace7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xcc7>
            } else if (z->s->img_n == 4 && z->app14_color_transform == 0) {
   2bf4a:	41 8b 97 4c 48 00 00 	mov    0x484c(%r15),%edx
   2bf51:	85 d2                	test   %edx,%edx
   2bf53:	0f 84 af 01 00 00    	je     2c108 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x20e8>
            } else if (z->s->img_n == 4 && z->app14_color_transform == 2) {
   2bf59:	83 fa 02             	cmp    $0x2,%edx
   2bf5c:	0f 85 70 fe ff ff    	jne    2bdd2 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1db2>
               for (i=0; i < z->s->img_x; ++i) {
   2bf62:	45 85 c0             	test   %r8d,%r8d
   2bf65:	0f 84 9d fd ff ff    	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
                  out[0] = stbi__blinn_8x8(255 - coutput[0][i], coutput[3][i]);
   2bf6b:	4c 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%r8
   2bf72:	00 
   2bf73:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
   2bf7a:	00 
               for (i=0; i < z->s->img_x; ++i) {
   2bf7b:	31 c9                	xor    %ecx,%ecx
                     out += n;
   2bf7d:	4c 63 5c 24 08       	movslq 0x8(%rsp),%r11
                  out[0] = stbi__blinn_8x8(255 - coutput[0][i], coutput[3][i]);
   2bf82:	89 cf                	mov    %ecx,%edi
               for (i=0; i < z->s->img_x; ++i) {
   2bf84:	83 c1 01             	add    $0x1,%ecx
                  out[0] = stbi__blinn_8x8(255 - coutput[0][i], coutput[3][i]);
   2bf87:	0f b6 14 3e          	movzbl (%rsi,%rdi,1),%edx
   2bf8b:	41 0f b6 3c 38       	movzbl (%r8,%rdi,1),%edi
                  out[1] = 255;
   2bf90:	c6 45 01 ff          	movb   $0xff,0x1(%rbp)
                  out[0] = stbi__blinn_8x8(255 - coutput[0][i], coutput[3][i]);
   2bf94:	f7 d2                	not    %edx
   2bf96:	0f b6 d2             	movzbl %dl,%edx
   unsigned int t = x*y + 128;
   2bf99:	0f af d7             	imul   %edi,%edx
   2bf9c:	83 ea 80             	sub    $0xffffff80,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2bf9f:	89 d7                	mov    %edx,%edi
   2bfa1:	c1 ef 08             	shr    $0x8,%edi
   2bfa4:	01 fa                	add    %edi,%edx
   2bfa6:	88 75 00             	mov    %dh,0x0(%rbp)
                  out += n;
   2bfa9:	4c 01 dd             	add    %r11,%rbp
               for (i=0; i < z->s->img_x; ++i) {
   2bfac:	41 3b 09             	cmp    (%r9),%ecx
   2bfaf:	72 d1                	jb     2bf82 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1f62>
   2bfb1:	e9 53 fe ff ff       	jmp    2be09 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1de9>
                  for (i=0; i < z->s->img_x; ++i)
   2bfb6:	45 85 c0             	test   %r8d,%r8d
   2bfb9:	0f 84 49 fd ff ff    	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
                     *out++ = stbi__compute_y(coutput[0][i], coutput[1][i], coutput[2][i]);
   2bfbf:	48 8b 9c 24 b0 00 00 	mov    0xb0(%rsp),%rbx
   2bfc6:	00 
   2bfc7:	4c 8b 9c 24 a8 00 00 	mov    0xa8(%rsp),%r11
   2bfce:	00 
   2bfcf:	31 c9                	xor    %ecx,%ecx
   2bfd1:	4c 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%r8
   2bfd8:	00 
   2bfd9:	89 ce                	mov    %ecx,%esi
   2bfdb:	41 0f b6 14 30       	movzbl (%r8,%rsi,1),%edx
   2bfe0:	41 0f b6 3c 33       	movzbl (%r11,%rsi,1),%edi
   2bfe5:	0f b6 34 33          	movzbl (%rbx,%rsi,1),%esi
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   2bfe9:	6b d2 4d             	imul   $0x4d,%edx,%edx
   2bfec:	69 ff 96 00 00 00    	imul   $0x96,%edi,%edi
   2bff2:	6b f6 1d             	imul   $0x1d,%esi,%esi
   2bff5:	01 fa                	add    %edi,%edx
   2bff7:	01 f2                	add    %esi,%edx
   2bff9:	88 74 0d 00          	mov    %dh,0x0(%rbp,%rcx,1)
                  for (i=0; i < z->s->img_x; ++i)
   2bffd:	48 83 c1 01          	add    $0x1,%rcx
   2c001:	41 3b 09             	cmp    (%r9),%ecx
   2c004:	72 d3                	jb     2bfd9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1fb9>
   2c006:	e9 fd fc ff ff       	jmp    2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
                  for (i=0; i < z->s->img_x; ++i) out[i] = y[i];
   2c00b:	45 85 c0             	test   %r8d,%r8d
   2c00e:	0f 84 f4 fc ff ff    	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
   2c014:	31 d2                	xor    %edx,%edx
   2c016:	89 d6                	mov    %edx,%esi
   2c018:	83 c2 01             	add    $0x1,%edx
   2c01b:	0f b6 3c 31          	movzbl (%rcx,%rsi,1),%edi
   2c01f:	40 88 7c 35 00       	mov    %dil,0x0(%rbp,%rsi,1)
   2c024:	41 3b 11             	cmp    (%r9),%edx
   2c027:	72 ed                	jb     2c016 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ff6>
   2c029:	e9 db fd ff ff       	jmp    2be09 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1de9>
                  for (i=0; i < z->s->img_x; ++i) {
   2c02e:	45 85 c0             	test   %r8d,%r8d
   2c031:	0f 84 d1 fc ff ff    	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
                     stbi_uc m = coutput[3][i];
   2c037:	48 8b 9c 24 b8 00 00 	mov    0xb8(%rsp),%rbx
   2c03e:	00 
                     out[1] = stbi__blinn_8x8(coutput[1][i], m);
   2c03f:	4c 8b ac 24 a8 00 00 	mov    0xa8(%rsp),%r13
   2c046:	00 
                  for (i=0; i < z->s->img_x; ++i) {
   2c047:	31 ff                	xor    %edi,%edi
                     out[2] = stbi__blinn_8x8(coutput[2][i], m);
   2c049:	4c 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%r14
   2c050:	00 
                     out += n;
   2c051:	4c 63 54 24 08       	movslq 0x8(%rsp),%r10
                     stbi_uc m = coutput[3][i];
   2c056:	41 89 f8             	mov    %edi,%r8d
                  for (i=0; i < z->s->img_x; ++i) {
   2c059:	83 c7 01             	add    $0x1,%edi
                     out[0] = stbi__blinn_8x8(coutput[0][i], m);
   2c05c:	42 0f b6 0c 03       	movzbl (%rbx,%r8,1),%ecx
   2c061:	42 0f b6 14 06       	movzbl (%rsi,%r8,1),%edx
   unsigned int t = x*y + 128;
   2c066:	0f af d1             	imul   %ecx,%edx
   2c069:	83 ea 80             	sub    $0xffffff80,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c06c:	41 89 d3             	mov    %edx,%r11d
   2c06f:	41 c1 eb 08          	shr    $0x8,%r11d
   2c073:	44 01 da             	add    %r11d,%edx
   2c076:	88 75 00             	mov    %dh,0x0(%rbp)
                     out[1] = stbi__blinn_8x8(coutput[1][i], m);
   2c079:	43 0f b6 54 05 00    	movzbl 0x0(%r13,%r8,1),%edx
   unsigned int t = x*y + 128;
   2c07f:	0f af d1             	imul   %ecx,%edx
   2c082:	83 ea 80             	sub    $0xffffff80,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c085:	41 89 d3             	mov    %edx,%r11d
   2c088:	41 c1 eb 08          	shr    $0x8,%r11d
   2c08c:	44 01 da             	add    %r11d,%edx
   2c08f:	88 75 01             	mov    %dh,0x1(%rbp)
                     out[2] = stbi__blinn_8x8(coutput[2][i], m);
   2c092:	43 0f b6 14 06       	movzbl (%r14,%r8,1),%edx
                     out[3] = 255;
   2c097:	c6 45 03 ff          	movb   $0xff,0x3(%rbp)
   unsigned int t = x*y + 128;
   2c09b:	0f af d1             	imul   %ecx,%edx
   2c09e:	83 ea 80             	sub    $0xffffff80,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c0a1:	89 d1                	mov    %edx,%ecx
   2c0a3:	c1 e9 08             	shr    $0x8,%ecx
   2c0a6:	01 ca                	add    %ecx,%edx
   2c0a8:	88 75 02             	mov    %dh,0x2(%rbp)
                     out += n;
   2c0ab:	4c 01 d5             	add    %r10,%rbp
                  for (i=0; i < z->s->img_x; ++i) {
   2c0ae:	41 3b 39             	cmp    (%r9),%edi
   2c0b1:	72 a3                	jb     2c056 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2036>
   2c0b3:	e9 51 fd ff ff       	jmp    2be09 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1de9>
                  for (i=0; i < z->s->img_x; ++i) {
   2c0b8:	45 85 c0             	test   %r8d,%r8d
   2c0bb:	0f 84 47 fc ff ff    	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
                     out[1] = coutput[1][i];
   2c0c1:	4c 8b 9c 24 a8 00 00 	mov    0xa8(%rsp),%r11
   2c0c8:	00 
                     out[2] = coutput[2][i];
   2c0c9:	4c 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%r8
   2c0d0:	00 
                  for (i=0; i < z->s->img_x; ++i) {
   2c0d1:	31 d2                	xor    %edx,%edx
                     out += n;
   2c0d3:	48 63 7c 24 08       	movslq 0x8(%rsp),%rdi
                     out[0] = y[i];
   2c0d8:	89 d1                	mov    %edx,%ecx
                  for (i=0; i < z->s->img_x; ++i) {
   2c0da:	83 c2 01             	add    $0x1,%edx
                     out[0] = y[i];
   2c0dd:	44 0f b6 14 0e       	movzbl (%rsi,%rcx,1),%r10d
   2c0e2:	44 88 55 00          	mov    %r10b,0x0(%rbp)
                     out[1] = coutput[1][i];
   2c0e6:	45 0f b6 14 0b       	movzbl (%r11,%rcx,1),%r10d
   2c0eb:	44 88 55 01          	mov    %r10b,0x1(%rbp)
                     out[2] = coutput[2][i];
   2c0ef:	41 0f b6 0c 08       	movzbl (%r8,%rcx,1),%ecx
                     out[3] = 255;
   2c0f4:	c6 45 03 ff          	movb   $0xff,0x3(%rbp)
                     out[2] = coutput[2][i];
   2c0f8:	88 4d 02             	mov    %cl,0x2(%rbp)
                     out += n;
   2c0fb:	48 01 fd             	add    %rdi,%rbp
                  for (i=0; i < z->s->img_x; ++i) {
   2c0fe:	41 3b 11             	cmp    (%r9),%edx
   2c101:	72 d5                	jb     2c0d8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x20b8>
   2c103:	e9 01 fd ff ff       	jmp    2be09 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1de9>
               for (i=0; i < z->s->img_x; ++i) {
   2c108:	45 85 c0             	test   %r8d,%r8d
   2c10b:	0f 84 f7 fb ff ff    	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
                  stbi_uc m = coutput[3][i];
   2c111:	48 8b 9c 24 b8 00 00 	mov    0xb8(%rsp),%rbx
   2c118:	00 
                     out += n;
   2c119:	4c 63 54 24 08       	movslq 0x8(%rsp),%r10
               for (i=0; i < z->s->img_x; ++i) {
   2c11e:	45 31 c0             	xor    %r8d,%r8d
                  stbi_uc r = stbi__blinn_8x8(coutput[0][i], m);
   2c121:	4c 8b ac 24 a0 00 00 	mov    0xa0(%rsp),%r13
   2c128:	00 
                  stbi_uc g = stbi__blinn_8x8(coutput[1][i], m);
   2c129:	4c 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%r14
   2c130:	00 
                  stbi_uc b = stbi__blinn_8x8(coutput[2][i], m);
   2c131:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
   2c138:	00 
                  stbi_uc m = coutput[3][i];
   2c139:	44 89 c1             	mov    %r8d,%ecx
               for (i=0; i < z->s->img_x; ++i) {
   2c13c:	41 83 c0 01          	add    $0x1,%r8d
                  stbi_uc r = stbi__blinn_8x8(coutput[0][i], m);
   2c140:	0f b6 3c 0b          	movzbl (%rbx,%rcx,1),%edi
   2c144:	41 0f b6 54 0d 00    	movzbl 0x0(%r13,%rcx,1),%edx
                  stbi_uc g = stbi__blinn_8x8(coutput[1][i], m);
   2c14a:	45 0f b6 1c 0e       	movzbl (%r14,%rcx,1),%r11d
                  stbi_uc b = stbi__blinn_8x8(coutput[2][i], m);
   2c14f:	0f b6 0c 0e          	movzbl (%rsi,%rcx,1),%ecx
                  out[1] = 255;
   2c153:	c6 45 01 ff          	movb   $0xff,0x1(%rbp)
   unsigned int t = x*y + 128;
   2c157:	0f af d7             	imul   %edi,%edx
   2c15a:	44 0f af df          	imul   %edi,%r11d
   2c15e:	0f af f9             	imul   %ecx,%edi
   2c161:	83 ea 80             	sub    $0xffffff80,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c164:	89 d1                	mov    %edx,%ecx
   unsigned int t = x*y + 128;
   2c166:	41 83 eb 80          	sub    $0xffffff80,%r11d
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c16a:	c1 e9 08             	shr    $0x8,%ecx
   unsigned int t = x*y + 128;
   2c16d:	83 ef 80             	sub    $0xffffff80,%edi
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c170:	01 ca                	add    %ecx,%edx
   2c172:	44 89 d9             	mov    %r11d,%ecx
   2c175:	c1 e9 08             	shr    $0x8,%ecx
   2c178:	c1 ea 08             	shr    $0x8,%edx
   2c17b:	44 01 d9             	add    %r11d,%ecx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   2c17e:	6b d2 4d             	imul   $0x4d,%edx,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c181:	c1 e9 08             	shr    $0x8,%ecx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   2c184:	69 c9 96 00 00 00    	imul   $0x96,%ecx,%ecx
   2c18a:	01 ca                	add    %ecx,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c18c:	89 f9                	mov    %edi,%ecx
   2c18e:	c1 e9 08             	shr    $0x8,%ecx
   2c191:	01 f9                	add    %edi,%ecx
   2c193:	c1 e9 08             	shr    $0x8,%ecx
   return (stbi_uc) (((r*77) + (g*150) +  (29*b)) >> 8);
   2c196:	6b c9 1d             	imul   $0x1d,%ecx,%ecx
   2c199:	01 ca                	add    %ecx,%edx
   2c19b:	88 75 00             	mov    %dh,0x0(%rbp)
                  out += n;
   2c19e:	4c 01 d5             	add    %r10,%rbp
               for (i=0; i < z->s->img_x; ++i) {
   2c1a1:	45 3b 01             	cmp    (%r9),%r8d
   2c1a4:	72 93                	jb     2c139 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2119>
   2c1a6:	e9 5e fc ff ff       	jmp    2be09 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1de9>
                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);
   2c1ab:	8b 5c 24 08          	mov    0x8(%rsp),%ebx
   2c1af:	48 89 fa             	mov    %rdi,%rdx
   2c1b2:	48 89 ef             	mov    %rbp,%rdi
   2c1b5:	41 89 d9             	mov    %ebx,%r9d
   2c1b8:	41 ff d3             	call   *%r11
                  for (i=0; i < z->s->img_x; ++i) {
   2c1bb:	4d 8b 0f             	mov    (%r15),%r9
   2c1be:	8b 44 24 40          	mov    0x40(%rsp),%eax
   2c1c2:	45 8b 29             	mov    (%r9),%r13d
   2c1c5:	45 85 ed             	test   %r13d,%r13d
   2c1c8:	0f 84 3a fb ff ff    	je     2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
                     stbi_uc m = coutput[3][i];
   2c1ce:	4c 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%r8
   2c1d5:	00 
                     out += n;
   2c1d6:	4c 63 db             	movslq %ebx,%r11
                  for (i=0; i < z->s->img_x; ++i) {
   2c1d9:	31 c9                	xor    %ecx,%ecx
                     stbi_uc m = coutput[3][i];
   2c1db:	89 ca                	mov    %ecx,%edx
                  for (i=0; i < z->s->img_x; ++i) {
   2c1dd:	83 c1 01             	add    $0x1,%ecx
                     out[0] = stbi__blinn_8x8(255 - out[0], m);
   2c1e0:	41 0f b6 34 10       	movzbl (%r8,%rdx,1),%esi
   2c1e5:	0f b6 55 00          	movzbl 0x0(%rbp),%edx
   2c1e9:	f7 d2                	not    %edx
   2c1eb:	0f b6 d2             	movzbl %dl,%edx
   unsigned int t = x*y + 128;
   2c1ee:	0f af d6             	imul   %esi,%edx
   2c1f1:	83 ea 80             	sub    $0xffffff80,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c1f4:	89 d7                	mov    %edx,%edi
   2c1f6:	c1 ef 08             	shr    $0x8,%edi
   2c1f9:	01 fa                	add    %edi,%edx
   2c1fb:	88 75 00             	mov    %dh,0x0(%rbp)
                     out[1] = stbi__blinn_8x8(255 - out[1], m);
   2c1fe:	0f b6 55 01          	movzbl 0x1(%rbp),%edx
   2c202:	f7 d2                	not    %edx
   2c204:	0f b6 d2             	movzbl %dl,%edx
   unsigned int t = x*y + 128;
   2c207:	0f af d6             	imul   %esi,%edx
   2c20a:	83 ea 80             	sub    $0xffffff80,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c20d:	89 d7                	mov    %edx,%edi
   2c20f:	c1 ef 08             	shr    $0x8,%edi
   2c212:	01 fa                	add    %edi,%edx
   2c214:	88 75 01             	mov    %dh,0x1(%rbp)
                     out[2] = stbi__blinn_8x8(255 - out[2], m);
   2c217:	0f b6 55 02          	movzbl 0x2(%rbp),%edx
   2c21b:	f7 d2                	not    %edx
   2c21d:	0f b6 d2             	movzbl %dl,%edx
   unsigned int t = x*y + 128;
   2c220:	0f af d6             	imul   %esi,%edx
   2c223:	83 ea 80             	sub    $0xffffff80,%edx
   return (stbi_uc) ((t + (t >>8)) >> 8);
   2c226:	89 d6                	mov    %edx,%esi
   2c228:	c1 ee 08             	shr    $0x8,%esi
   2c22b:	01 f2                	add    %esi,%edx
   2c22d:	88 75 02             	mov    %dh,0x2(%rbp)
                     out += n;
   2c230:	4c 01 dd             	add    %r11,%rbp
                  for (i=0; i < z->s->img_x; ++i) {
   2c233:	41 3b 09             	cmp    (%r9),%ecx
   2c236:	72 a3                	jb     2c1db <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x21bb>
   2c238:	e9 cb fa ff ff       	jmp    2bd08 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ce8>
   sz = stbi__get8(s);   //   image type
   2c23d:	4c 89 ef             	mov    %r13,%rdi
   2c240:	e8 5b f8 fe ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   if ( tga_color_type == 1 ) { // colormapped (paletted) image
   2c245:	83 fd 01             	cmp    $0x1,%ebp
   2c248:	0f 84 3e 06 00 00    	je     2c88c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x286c>
      if ( (sz != 2) && (sz != 3) && (sz != 10) && (sz != 11) ) goto errorEnd; // only RGB or grey allowed, +/- RLE
   2c24e:	83 e0 f6             	and    $0xfffffff6,%eax
   2c251:	3c 02                	cmp    $0x2,%al
   2c253:	0f 85 85 f6 ff ff    	jne    2b8de <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18be>
   if (n < 0) {
   2c259:	be 09 00 00 00       	mov    $0x9,%esi
   2c25e:	4c 89 ef             	mov    %r13,%rdi
   2c261:	e8 aa 68 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   if ( stbi__get16le(s) < 1 ) goto errorEnd;      //   test width
   2c266:	4c 89 ef             	mov    %r13,%rdi
   2c269:	e8 72 21 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   2c26e:	85 c0                	test   %eax,%eax
   2c270:	0f 8e 68 f6 ff ff    	jle    2b8de <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18be>
   if ( stbi__get16le(s) < 1 ) goto errorEnd;      //   test height
   2c276:	4c 89 ef             	mov    %r13,%rdi
   2c279:	e8 62 21 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   2c27e:	85 c0                	test   %eax,%eax
   2c280:	0f 8e 58 f6 ff ff    	jle    2b8de <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18be>
   sz = stbi__get8(s);   //   bits per pixel
   2c286:	4c 89 ef             	mov    %r13,%rdi
   2c289:	e8 12 f8 fe ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   if ( (tga_color_type == 1) && (sz != 8) && (sz != 16) ) goto errorEnd; // for colormapped images, bpp is size of an index
   2c28e:	3c 08                	cmp    $0x8,%al
   sz = stbi__get8(s);   //   bits per pixel
   2c290:	0f b6 c8             	movzbl %al,%ecx
   if ( (tga_color_type == 1) && (sz != 8) && (sz != 16) ) goto errorEnd; // for colormapped images, bpp is size of an index
   2c293:	40 0f 95 c6          	setne  %sil
   2c297:	80 e3 01             	and    $0x1,%bl
   2c29a:	0f 84 82 0d 00 00    	je     2d022 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3002>
   2c2a0:	40 84 f6             	test   %sil,%sil
   2c2a3:	0f 84 79 0d 00 00    	je     2d022 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3002>
   2c2a9:	83 f9 10             	cmp    $0x10,%ecx
   2c2ac:	0f 85 2c f6 ff ff    	jne    2b8de <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18be>
   2c2b2:	49 8b 95 d0 00 00 00 	mov    0xd0(%r13),%rdx
   s->img_buffer = s->img_buffer_original;
   2c2b9:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   s->img_buffer_end = s->img_buffer_original_end;
   2c2c0:	49 8b 85 d8 00 00 00 	mov    0xd8(%r13),%rax
   2c2c7:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
   if (s->img_buffer < s->img_buffer_end)
   2c2ce:	48 39 c2             	cmp    %rax,%rdx
   2c2d1:	0f 83 f0 03 00 00    	jae    2c6c7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x26a7>
      return *s->img_buffer++;
   2c2d7:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   2c2db:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2c2e2:	0f b6 1a             	movzbl (%rdx),%ebx
   2c2e5:	88 5c 24 58          	mov    %bl,0x58(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   2c2e9:	48 39 c1             	cmp    %rax,%rcx
   2c2ec:	0f 83 e7 03 00 00    	jae    2c6d9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x26b9>
      return *s->img_buffer++;
   2c2f2:	48 8d 51 01          	lea    0x1(%rcx),%rdx
   2c2f6:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2c2fd:	0f b6 09             	movzbl (%rcx),%ecx
   int tga_indexed = stbi__get8(s);
   2c300:	0f b6 f1             	movzbl %cl,%esi
   2c303:	89 74 24 38          	mov    %esi,0x38(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   2c307:	48 39 c2             	cmp    %rax,%rdx
   2c30a:	0f 83 17 05 00 00    	jae    2c827 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2807>
      return *s->img_buffer++;
   2c310:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2c314:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   2c31b:	44 0f b6 22          	movzbl (%rdx),%r12d
   int tga_palette_start = stbi__get16le(s);
   2c31f:	4c 89 ef             	mov    %r13,%rdi
   2c322:	e8 b9 20 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   int tga_palette_len = stbi__get16le(s);
   2c327:	4c 89 ef             	mov    %r13,%rdi
   int tga_palette_start = stbi__get16le(s);
   2c32a:	89 44 24 60          	mov    %eax,0x60(%rsp)
   int tga_palette_len = stbi__get16le(s);
   2c32e:	e8 ad 20 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   2c333:	89 44 24 40          	mov    %eax,0x40(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   2c337:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2c33e:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2c345:	0f 82 45 02 00 00    	jb     2c590 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2570>
   if (s->read_from_callbacks) {
   2c34b:	45 8b 5d 30          	mov    0x30(%r13),%r11d
   return 0;
   2c34f:	45 31 f6             	xor    %r14d,%r14d
   if (s->read_from_callbacks) {
   2c352:	45 85 db             	test   %r11d,%r11d
   2c355:	0f 85 26 02 00 00    	jne    2c581 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2561>
   int tga_x_origin = stbi__get16le(s);
   2c35b:	4c 89 ef             	mov    %r13,%rdi
   2c35e:	e8 7d 20 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   int tga_y_origin = stbi__get16le(s);
   2c363:	4c 89 ef             	mov    %r13,%rdi
   2c366:	e8 75 20 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   int tga_width = stbi__get16le(s);
   2c36b:	4c 89 ef             	mov    %r13,%rdi
   2c36e:	e8 6d 20 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   int tga_height = stbi__get16le(s);
   2c373:	4c 89 ef             	mov    %r13,%rdi
   int tga_width = stbi__get16le(s);
   2c376:	89 c5                	mov    %eax,%ebp
   int tga_height = stbi__get16le(s);
   2c378:	e8 63 20 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   if (s->img_buffer < s->img_buffer_end)
   2c37d:	49 8b 8d c0 00 00 00 	mov    0xc0(%r13),%rcx
   2c384:	49 8b 95 c8 00 00 00 	mov    0xc8(%r13),%rdx
   int tga_height = stbi__get16le(s);
   2c38b:	89 c3                	mov    %eax,%ebx
   if (s->img_buffer < s->img_buffer_end)
   2c38d:	48 39 d1             	cmp    %rdx,%rcx
   2c390:	0f 83 be 03 00 00    	jae    2c754 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2734>
      return *s->img_buffer++;
   2c396:	48 8d 41 01          	lea    0x1(%rcx),%rax
   2c39a:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   2c3a1:	44 0f b6 39          	movzbl (%rcx),%r15d
   int tga_bits_per_pixel = stbi__get8(s);
   2c3a5:	41 0f b6 f7          	movzbl %r15b,%esi
   2c3a9:	89 74 24 48          	mov    %esi,0x48(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   2c3ad:	48 39 d0             	cmp    %rdx,%rax
   2c3b0:	0f 83 0a 04 00 00    	jae    2c7c0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x27a0>
      return *s->img_buffer++;
   2c3b6:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2c3ba:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2c3c1:	0f b6 08             	movzbl (%rax),%ecx
   unsigned char raw_data[4] = {0};
   2c3c4:	c7 84 24 c0 00 00 00 	movl   $0x0,0xc0(%rsp)
   2c3cb:	00 00 00 00 
   if (tga_height > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2c3cf:	81 fb 00 00 00 01    	cmp    $0x1000000,%ebx
   2c3d5:	0f 8f 30 ee ff ff    	jg     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
   if (tga_width > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
   2c3db:	81 fd 00 00 00 01    	cmp    $0x1000000,%ebp
   2c3e1:	0f 8f 24 ee ff ff    	jg     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
   int tga_image_type = stbi__get8(s);
   2c3e7:	41 0f b6 c4          	movzbl %r12b,%eax
   int tga_is_RLE = 0;
   2c3eb:	c7 44 24 50 00 00 00 	movl   $0x0,0x50(%rsp)
   2c3f2:	00 
   if ( tga_image_type >= 8 )
   2c3f3:	83 f8 07             	cmp    $0x7,%eax
   2c3f6:	7e 0b                	jle    2c403 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x23e3>
      tga_is_RLE = 1;
   2c3f8:	c7 44 24 50 01 00 00 	movl   $0x1,0x50(%rsp)
   2c3ff:	00 
      tga_image_type -= 8;
   2c400:	83 e8 08             	sub    $0x8,%eax
   if ( tga_indexed ) tga_comp = stbi__tga_get_comp(tga_palette_bits, 0, &tga_rgb16);
   2c403:	44 8b 54 24 38       	mov    0x38(%rsp),%r10d
   2c408:	45 85 d2             	test   %r10d,%r10d
   2c40b:	0f 84 f4 03 00 00    	je     2c805 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x27e5>
   switch(bits_per_pixel) {
   2c411:	41 80 fe 10          	cmp    $0x10,%r14b
   2c415:	0f 87 c4 03 00 00    	ja     2c7df <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x27bf>
   2c41b:	41 80 fe 0e          	cmp    $0xe,%r14b
   2c41f:	0f 87 54 05 00 00    	ja     2c979 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2959>
   2c425:	41 80 fe 08          	cmp    $0x8,%r14b
   2c429:	0f 85 3e 05 00 00    	jne    2c96d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x294d>
   2c42f:	45 31 ff             	xor    %r15d,%r15d
   2c432:	41 be 01 00 00 00    	mov    $0x1,%r14d
   *x = tga_width;
   2c438:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   2c43d:	89 28                	mov    %ebp,(%rax)
   *y = tga_height;
   2c43f:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
   2c444:	89 18                	mov    %ebx,(%rax)
   if (comp) *comp = tga_comp;
   2c446:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   2c44b:	48 85 c0             	test   %rax,%rax
   2c44e:	74 03                	je     2c453 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2433>
   2c450:	44 89 30             	mov    %r14d,(%rax)
   if (a < 0 || b < 0) return 0;
   2c453:	89 e8                	mov    %ebp,%eax
   2c455:	09 d8                	or     %ebx,%eax
   2c457:	0f 88 ae ed ff ff    	js     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
   if (b == 0) return 1; // mul-by-0 is always safe
   2c45d:	85 db                	test   %ebx,%ebx
   2c45f:	74 28                	je     2c489 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2469>
   return a <= INT_MAX/b;
   2c461:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2c466:	31 d2                	xor    %edx,%edx
   2c468:	f7 fb                	idiv   %ebx
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2c46a:	39 c5                	cmp    %eax,%ebp
   2c46c:	0f 8f 99 ed ff ff    	jg     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
   return a <= INT_MAX/b;
   2c472:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2c477:	31 d2                	xor    %edx,%edx
   2c479:	41 f7 fe             	idiv   %r14d
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2c47c:	89 ea                	mov    %ebp,%edx
   2c47e:	0f af d3             	imul   %ebx,%edx
   2c481:	39 d0                	cmp    %edx,%eax
   2c483:	0f 8c 82 ed ff ff    	jl     2b20b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11eb>
   return stbi__malloc(a*b*c + add);
   2c489:	89 e8                	mov    %ebp,%eax
   2c48b:	88 4c 24 18          	mov    %cl,0x18(%rsp)
   2c48f:	0f af c3             	imul   %ebx,%eax
   2c492:	89 44 24 10          	mov    %eax,0x10(%rsp)
   2c496:	41 0f af c6          	imul   %r14d,%eax
   2c49a:	48 63 f8             	movslq %eax,%rdi
    return STBI_MALLOC(size);
   2c49d:	e8 be a2 fd ff       	call   6760 <malloc@plt>
   2c4a2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   if (!tga_data) return stbi__errpuc("outofmem", "Out of memory");
   2c4a7:	48 85 c0             	test   %rax,%rax
   2c4aa:	0f 84 8f 13 00 00    	je     2d83f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x381f>
   int tga_offset = stbi__get8(s);
   2c4b0:	0f b6 74 24 58       	movzbl 0x58(%rsp),%esi
   if (n == 0) return;  // already there!
   2c4b5:	0f b6 4c 24 18       	movzbl 0x18(%rsp),%ecx
   2c4ba:	85 f6                	test   %esi,%esi
   2c4bc:	74 0d                	je     2c4cb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x24ab>
   if (n < 0) {
   2c4be:	4c 89 ef             	mov    %r13,%rdi
   2c4c1:	e8 4a 66 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   2c4c6:	0f b6 4c 24 18       	movzbl 0x18(%rsp),%ecx
   2c4cb:	89 c8                	mov    %ecx,%eax
   if ( !tga_indexed && !tga_is_RLE && !tga_rgb16 ) {
   2c4cd:	8b 74 24 50          	mov    0x50(%rsp),%esi
   2c4d1:	83 e0 20             	and    $0x20,%eax
   2c4d4:	0b 74 24 38          	or     0x38(%rsp),%esi
   2c4d8:	88 44 24 18          	mov    %al,0x18(%rsp)
   2c4dc:	0f 85 69 13 00 00    	jne    2d84b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x382b>
   2c4e2:	45 85 ff             	test   %r15d,%r15d
   2c4e5:	0f 85 c3 06 00 00    	jne    2cbae <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2b8e>
      for (i=0; i < tga_height; ++i) {
   2c4eb:	85 db                	test   %ebx,%ebx
   2c4ed:	0f 8e 95 05 00 00    	jle    2ca88 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a68>
         stbi__getn(s, tga_row, tga_width * tga_comp);
   2c4f3:	89 ee                	mov    %ebp,%esi
   2c4f5:	41 0f af f6          	imul   %r14d,%esi
   2c4f9:	89 74 24 18          	mov    %esi,0x18(%rsp)
   if (s->img_buffer+n <= s->img_buffer_end) {
   2c4fd:	48 63 ce             	movslq %esi,%rcx
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   2c500:	49 8b b5 c0 00 00 00 	mov    0xc0(%r13),%rsi
   2c507:	84 c0                	test   %al,%al
   2c509:	0f 84 bd 05 00 00    	je     2cacc <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2aac>
      for (i=0; i < tga_height; ++i) {
   2c50f:	45 31 c9             	xor    %r9d,%r9d
   2c512:	89 6c 24 38          	mov    %ebp,0x38(%rsp)
   2c516:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
   2c51b:	48 89 cd             	mov    %rcx,%rbp
   2c51e:	44 89 4c 24 30       	mov    %r9d,0x30(%rsp)
   2c523:	eb 14                	jmp    2c539 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2519>
   2c525:	83 44 24 30 01       	addl   $0x1,0x30(%rsp)
   2c52a:	8b 44 24 30          	mov    0x30(%rsp),%eax
   2c52e:	49 01 ec             	add    %rbp,%r12
   2c531:	39 d8                	cmp    %ebx,%eax
   2c533:	0f 84 8a 16 00 00    	je     2dbc3 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ba3>
   if (s->io.read) {
   2c539:	49 83 7d 10 00       	cmpq   $0x0,0x10(%r13)
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   2c53e:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   if (s->io.read) {
   2c545:	74 13                	je     2c55a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x253a>
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   2c547:	49 89 c0             	mov    %rax,%r8
      if (blen < n) {
   2c54a:	8b 7c 24 18          	mov    0x18(%rsp),%edi
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   2c54e:	49 29 f0             	sub    %rsi,%r8
      if (blen < n) {
   2c551:	41 39 f8             	cmp    %edi,%r8d
   2c554:	0f 8c 2c 15 00 00    	jl     2da86 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3a66>
   if (s->img_buffer+n <= s->img_buffer_end) {
   2c55a:	48 8d 14 2e          	lea    (%rsi,%rbp,1),%rdx
   2c55e:	48 39 d0             	cmp    %rdx,%rax
   2c561:	72 c2                	jb     2c525 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2505>
      memcpy(buffer, s->img_buffer, n);
   2c563:	48 89 ea             	mov    %rbp,%rdx
   2c566:	4c 89 e7             	mov    %r12,%rdi
   2c569:	e8 a2 9e fd ff       	call   6410 <memcpy@plt>
      s->img_buffer += n;
   2c56e:	49 8b b5 c0 00 00 00 	mov    0xc0(%r13),%rsi
   2c575:	48 01 ee             	add    %rbp,%rsi
   2c578:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
      return 1;
   2c57f:	eb a4                	jmp    2c525 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2505>
      stbi__refill_buffer(s);
   2c581:	4c 89 ef             	mov    %r13,%rdi
   2c584:	e8 f7 4c fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2c589:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2c590:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2c594:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2c59b:	44 0f b6 30          	movzbl (%rax),%r14d
   2c59f:	e9 b7 fd ff ff       	jmp    2c35b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x233b>
   is_rgb = z->s->img_n == 3 && (z->rgb == 3 || (z->app14_color_transform == 0 && !z->jfif));
   2c5a4:	45 8b 82 50 48 00 00 	mov    0x4850(%r10),%r8d
   2c5ab:	41 83 f8 03          	cmp    $0x3,%r8d
   2c5af:	0f 84 9e 03 00 00    	je     2c953 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2933>
   2c5b5:	49 83 ba 48 48 00 00 	cmpq   $0x0,0x4848(%r10)
   2c5bc:	00 
   n = req_comp ? req_comp : z->s->img_n >= 3 ? 3 : 1;
   2c5bd:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%rsp)
   2c5c4:	00 
   is_rgb = z->s->img_n == 3 && (z->rgb == 3 || (z->app14_color_transform == 0 && !z->jfif));
   2c5c5:	41 b8 03 00 00 00    	mov    $0x3,%r8d
   2c5cb:	c7 44 24 60 03 00 00 	movl   $0x3,0x60(%rsp)
   2c5d2:	00 
   2c5d3:	0f 94 44 24 68       	sete   0x68(%rsp)
   2c5d8:	e9 2a e5 ff ff       	jmp    2ab07 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xae7>
   stbi__free_jpeg_components(j, j->s->img_n, 0);
   2c5dd:	49 8b 02             	mov    (%r10),%rax
   2c5e0:	4c 89 d7             	mov    %r10,%rdi
   2c5e3:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
   2c5e8:	8b 70 08             	mov    0x8(%rax),%esi
   2c5eb:	e8 d0 83 fe ff       	call   149c0 <_ZL26stbi__free_jpeg_componentsP10stbi__jpegii.constprop.0>
   2c5f0:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   if (!stbi__decode_jpeg_image(z)) { stbi__cleanup_jpeg(z); return NULL; }
   2c5f5:	e9 e4 e6 ff ff       	jmp    2acde <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xcbe>
      return *s->img_buffer++;
   2c5fa:	0f b6 7d 38          	movzbl 0x38(%rbp),%edi
      s->img_buffer_end = s->buffer_start + n;
   2c5fe:	48 98                	cltq
      act_comp |= packet->channel;
   2c600:	09 7c 24 40          	or     %edi,0x40(%rsp)
      s->img_buffer_end = s->buffer_start + n;
   2c604:	4c 01 c8             	add    %r9,%rax
      return *s->img_buffer++;
   2c607:	89 fa                	mov    %edi,%edx
   2c609:	e9 c8 f4 ff ff       	jmp    2bad6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1ab6>
   if (a < 0 || b < 0) return 0;
   2c60e:	85 db                	test   %ebx,%ebx
   2c610:	0f 88 0a ef ff ff    	js     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   2c616:	83 f9 f9             	cmp    $0xfffffff9,%ecx
   2c619:	0f 8c 01 ef ff ff    	jl     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   return stbi__malloc(a*b*c*d + add);
   2c61f:	44 89 e7             	mov    %r12d,%edi
   2c622:	41 0f af fe          	imul   %r14d,%edi
   2c626:	0f af fb             	imul   %ebx,%edi
   2c629:	0f af fd             	imul   %ebp,%edi
   2c62c:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   2c62f:	e8 2c a1 fd ff       	call   6760 <malloc@plt>
   2c634:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   2c639:	49 89 c7             	mov    %rax,%r15
   if (!out) return stbi__errpuc("outofmem", "Out of memory");
   2c63c:	48 85 c0             	test   %rax,%rax
   2c63f:	0f 84 b2 14 00 00    	je     2daf7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ad7>
   stbi__getn(s, out, s->img_n * s->img_x * s->img_y * (ri->bits_per_channel / 8));
   2c645:	41 0f af dc          	imul   %r12d,%ebx
   2c649:	48 89 c6             	mov    %rax,%rsi
   2c64c:	4c 89 ef             	mov    %r13,%rdi
   2c64f:	89 da                	mov    %ebx,%edx
   2c651:	41 0f af d6          	imul   %r14d,%edx
   2c655:	0f af d5             	imul   %ebp,%edx
   2c658:	e8 33 55 fe ff       	call   11b90 <_ZL10stbi__getnP13stbi__contextPhi>
   if (req_comp && req_comp != s->img_n) {
   2c65d:	8b 44 24 08          	mov    0x8(%rsp),%eax
   2c661:	85 c0                	test   %eax,%eax
   2c663:	0f 84 90 e1 ff ff    	je     2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   2c669:	41 8b 75 08          	mov    0x8(%r13),%esi
   2c66d:	39 f0                	cmp    %esi,%eax
   2c66f:	0f 84 84 e1 ff ff    	je     2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   if (req_comp == img_n) return data;
   2c675:	45 8b 45 04          	mov    0x4(%r13),%r8d
   2c679:	41 8b 4d 00          	mov    0x0(%r13),%ecx
   2c67d:	4c 89 ff             	mov    %r15,%rdi
   2c680:	89 c2                	mov    %eax,%edx
}
   2c682:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
   2c689:	5b                   	pop    %rbx
   2c68a:	5d                   	pop    %rbp
   2c68b:	41 5c                	pop    %r12
   2c68d:	41 5d                	pop    %r13
   2c68f:	41 5e                	pop    %r14
   2c691:	41 5f                	pop    %r15
   2c693:	e9 68 8a fe ff       	jmp    15100 <_ZL20stbi__convert_formatPhiijj.part.0>
      s->img_buffer_end = s->buffer_start + n;
   2c698:	48 98                	cltq
      return *s->img_buffer++;
   2c69a:	44 0f b6 7d 38       	movzbl 0x38(%rbp),%r15d
      s->img_buffer_end = s->buffer_start + n;
   2c69f:	48 01 d8             	add    %rbx,%rax
   2c6a2:	e9 2f f1 ff ff       	jmp    2b7d6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x17b6>
   2c6a7:	48 98                	cltq
      return *s->img_buffer++;
   2c6a9:	48 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%rbp)
   2c6b0:	4c 8b 45 10          	mov    0x10(%rbp),%r8
      s->img_buffer_end = s->buffer_start + n;
   2c6b4:	48 01 d8             	add    %rbx,%rax
      return *s->img_buffer++;
   2c6b7:	0f b6 5d 38          	movzbl 0x38(%rbp),%ebx
   2c6bb:	48 89 85 c8 00 00 00 	mov    %rax,0xc8(%rbp)
   2c6c2:	e9 02 ea ff ff       	jmp    2b0c9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x10a9>
   if (s->read_from_callbacks) {
   2c6c7:	45 8b 65 30          	mov    0x30(%r13),%r12d
   return 0;
   2c6cb:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
   if (s->read_from_callbacks) {
   2c6d0:	45 85 e4             	test   %r12d,%r12d
   2c6d3:	0f 85 ba 00 00 00    	jne    2c793 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2773>
   2c6d9:	41 8b 45 30          	mov    0x30(%r13),%eax
   return 0;
   2c6dd:	45 31 e4             	xor    %r12d,%r12d
   if (s->read_from_callbacks) {
   2c6e0:	89 44 24 38          	mov    %eax,0x38(%rsp)
   2c6e4:	85 c0                	test   %eax,%eax
   2c6e6:	0f 84 33 fc ff ff    	je     2c31f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x22ff>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2c6ec:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2c6f0:	41 8b 55 34          	mov    0x34(%r13),%edx
   2c6f4:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2c6f8:	48 89 de             	mov    %rbx,%rsi
   2c6fb:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2c6ff:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2c706:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2c70d:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2c714:	49 8d 55 39          	lea    0x39(%r13),%rdx
   if (n == 0) {
   2c718:	85 c0                	test   %eax,%eax
   2c71a:	0f 85 0b 11 00 00    	jne    2d82b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x380b>
      s->read_from_callbacks = 0;
   2c720:	31 ed                	xor    %ebp,%ebp
      *s->img_buffer = 0;
   2c722:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2c727:	48 89 d0             	mov    %rdx,%rax
      s->read_from_callbacks = 0;
   2c72a:	41 89 6d 30          	mov    %ebp,0x30(%r13)
      *s->img_buffer = 0;
   2c72e:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
      return *s->img_buffer++;
   2c735:	41 0f b6 4d 38       	movzbl 0x38(%r13),%ecx
   2c73a:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2c741:	e9 ba fb ff ff       	jmp    2c300 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x22e0>
      s->img_buffer_end = s->buffer_start + n;
   2c746:	48 98                	cltq
   2c748:	48 01 f0             	add    %rsi,%rax
      return *s->img_buffer++;
   2c74b:	0f b6 75 38          	movzbl 0x38(%rbp),%esi
   2c74f:	e9 20 f3 ff ff       	jmp    2ba74 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1a54>
   if (s->read_from_callbacks) {
   2c754:	41 8b 45 30          	mov    0x30(%r13),%eax
   return 0;
   2c758:	45 31 ff             	xor    %r15d,%r15d
   2c75b:	31 c9                	xor    %ecx,%ecx
   if (s->read_from_callbacks) {
   2c75d:	89 44 24 48          	mov    %eax,0x48(%rsp)
   2c761:	85 c0                	test   %eax,%eax
   2c763:	0f 84 5b fc ff ff    	je     2c3c4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x23a4>
      stbi__refill_buffer(s);
   2c769:	4c 89 ef             	mov    %r13,%rdi
   2c76c:	e8 0f 4b fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2c771:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2c778:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2c77c:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
   2c783:	44 0f b6 3a          	movzbl (%rdx),%r15d
   if (s->img_buffer < s->img_buffer_end)
   2c787:	49 8b 95 c8 00 00 00 	mov    0xc8(%r13),%rdx
   2c78e:	e9 12 fc ff ff       	jmp    2c3a5 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2385>
      stbi__refill_buffer(s);
   2c793:	4c 89 ef             	mov    %r13,%rdi
   2c796:	e8 e5 4a fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2c79b:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2c7a2:	48 8d 48 01          	lea    0x1(%rax),%rcx
   2c7a6:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2c7ad:	0f b6 00             	movzbl (%rax),%eax
   2c7b0:	88 44 24 58          	mov    %al,0x58(%rsp)
   if (s->img_buffer < s->img_buffer_end)
   2c7b4:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   2c7bb:	e9 29 fb ff ff       	jmp    2c2e9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x22c9>
   if (s->read_from_callbacks) {
   2c7c0:	41 83 7d 30 00       	cmpl   $0x0,0x30(%r13)
   2c7c5:	0f 84 50 08 00 00    	je     2d01b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ffb>
      stbi__refill_buffer(s);
   2c7cb:	4c 89 ef             	mov    %r13,%rdi
   2c7ce:	e8 ad 4a fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2c7d3:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2c7da:	e9 d7 fb ff ff       	jmp    2c3b6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2396>
   switch(bits_per_pixel) {
   2c7df:	41 8d 56 e8          	lea    -0x18(%r14),%edx
   2c7e3:	48 8d 05 cd b6 00 00 	lea    0xb6cd(%rip),%rax        # 37eb7 <_ZSt19piecewise_construct+0x570>
   2c7ea:	80 e2 f7             	and    $0xf7,%dl
   2c7ed:	0f 85 1f ea ff ff    	jne    2b212 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11f2>
   int tga_palette_bits = stbi__get8(s);
   2c7f3:	41 0f b6 c6          	movzbl %r14b,%eax
   2c7f7:	45 31 ff             	xor    %r15d,%r15d
      case 32: return bits_per_pixel/8;
   2c7fa:	c1 f8 03             	sar    $0x3,%eax
   2c7fd:	41 89 c6             	mov    %eax,%r14d
   2c800:	e9 33 fc ff ff       	jmp    2c438 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2418>
   switch(bits_per_pixel) {
   2c805:	45 8d 77 f8          	lea    -0x8(%r15),%r14d
   2c809:	41 80 fe 18          	cmp    $0x18,%r14b
   2c80d:	0f 87 5a 01 00 00    	ja     2c96d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x294d>
   2c813:	48 8d 35 ce b8 00 00 	lea    0xb8ce(%rip),%rsi        # 380e8 <_ZSt19piecewise_construct+0x7a1>
   2c81a:	45 0f b6 f6          	movzbl %r14b,%r14d
   2c81e:	4a 63 14 b6          	movslq (%rsi,%r14,4),%rdx
   2c822:	48 01 f2             	add    %rsi,%rdx
   2c825:	ff e2                	jmp    *%rdx
   if (s->read_from_callbacks) {
   2c827:	41 83 7d 30 00       	cmpl   $0x0,0x30(%r13)
   2c82c:	0f 84 4d 1a 00 00    	je     2e27f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x425f>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2c832:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2c836:	41 8b 55 34          	mov    0x34(%r13),%edx
   2c83a:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2c83e:	48 89 de             	mov    %rbx,%rsi
   2c841:	41 ff 55 10          	call   *0x10(%r13)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2c845:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2c84c:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2c853:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2c85a:	49 8d 55 39          	lea    0x39(%r13),%rdx
   if (n == 0) {
   2c85e:	85 c0                	test   %eax,%eax
   2c860:	0f 85 0f 1a 00 00    	jne    2e275 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4255>
      *s->img_buffer = 0;
   2c866:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
      s->read_from_callbacks = 0;
   2c86b:	31 db                	xor    %ebx,%ebx
   2c86d:	41 89 5d 30          	mov    %ebx,0x30(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2c871:	48 89 d3             	mov    %rdx,%rbx
   2c874:	49 89 9d c8 00 00 00 	mov    %rbx,0xc8(%r13)
      return *s->img_buffer++;
   2c87b:	45 0f b6 65 38       	movzbl 0x38(%r13),%r12d
   2c880:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2c887:	e9 93 fa ff ff       	jmp    2c31f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x22ff>
      if (sz != 1 && sz != 9) goto errorEnd; // colortype 1 demands image type 1 or 9
   2c88c:	83 e0 f7             	and    $0xfffffff7,%eax
   2c88f:	2c 01                	sub    $0x1,%al
   2c891:	0f 85 47 f0 ff ff    	jne    2b8de <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18be>
   if (n < 0) {
   2c897:	be 04 00 00 00       	mov    $0x4,%esi
   2c89c:	4c 89 ef             	mov    %r13,%rdi
   2c89f:	e8 6c 62 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
      sz = stbi__get8(s);    //   check bits per palette color entry
   2c8a4:	4c 89 ef             	mov    %r13,%rdi
   2c8a7:	e8 f4 f1 fe ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   2c8ac:	89 c1                	mov    %eax,%ecx
      if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) goto errorEnd;
   2c8ae:	3c 20                	cmp    $0x20,%al
   2c8b0:	0f 87 28 f0 ff ff    	ja     2b8de <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18be>
   2c8b6:	48 b8 ff 7e fe fe fe 	movabs $0xfffffffefefe7eff,%rax
   2c8bd:	ff ff ff 
   2c8c0:	48 d3 f8             	sar    %cl,%rax
   2c8c3:	a8 01                	test   $0x1,%al
   2c8c5:	0f 85 13 f0 ff ff    	jne    2b8de <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18be>
   if (n < 0) {
   2c8cb:	be 04 00 00 00       	mov    $0x4,%esi
   2c8d0:	4c 89 ef             	mov    %r13,%rdi
   2c8d3:	e8 38 62 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   2c8d8:	e9 89 f9 ff ff       	jmp    2c266 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2246>
   stbi__g_failure_reason = str;
   2c8dd:	48 8d 05 36 b6 00 00 	lea    0xb636(%rip),%rax        # 37f1a <_ZSt19piecewise_construct+0x5d3>
   2c8e4:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2c8eb:	ff ff 
      return stbi__errpuc("unsupported bit depth", "PSD bit depth is not 8 or 16 bit");
   2c8ed:	e9 fe de ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   2c8f2:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   2c8f9:	48 8b b5 c8 00 00 00 	mov    0xc8(%rbp),%rsi
   2c900:	e9 88 ee ff ff       	jmp    2b78d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x176d>
   2c905:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   2c90c:	48 8b b5 c8 00 00 00 	mov    0xc8(%rbp),%rsi
   2c913:	e9 73 ee ff ff       	jmp    2b78b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x176b>
    return STBI_MALLOC(size);
   2c918:	bf 01 00 00 00       	mov    $0x1,%edi
   2c91d:	44 89 5c 24 40       	mov    %r11d,0x40(%rsp)
   2c922:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
   2c927:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
   2c92c:	e8 2f 9e fd ff       	call   6760 <malloc@plt>
      if (!output) { stbi__cleanup_jpeg(z); return stbi__errpuc("outofmem", "Out of memory"); }
   2c931:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
   2c936:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
   2c93b:	48 85 c0             	test   %rax,%rax
    return STBI_MALLOC(size);
   2c93e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      if (!output) { stbi__cleanup_jpeg(z); return stbi__errpuc("outofmem", "Out of memory"); }
   2c943:	44 8b 5c 24 40       	mov    0x40(%rsp),%r11d
   2c948:	0f 85 38 f5 ff ff    	jne    2be86 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1e66>
   2c94e:	e9 66 e3 ff ff       	jmp    2acb9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc99>
   n = req_comp ? req_comp : z->s->img_n >= 3 ? 3 : 1;
   2c953:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%rsp)
   2c95a:	00 
   is_rgb = z->s->img_n == 3 && (z->rgb == 3 || (z->app14_color_transform == 0 && !z->jfif));
   2c95b:	c7 44 24 60 03 00 00 	movl   $0x3,0x60(%rsp)
   2c962:	00 
   2c963:	c6 44 24 68 01       	movb   $0x1,0x68(%rsp)
   2c968:	e9 9a e1 ff ff       	jmp    2ab07 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xae7>
   switch(bits_per_pixel) {
   2c96d:	48 8d 05 43 b5 00 00 	lea    0xb543(%rip),%rax        # 37eb7 <_ZSt19piecewise_construct+0x570>
   2c974:	e9 99 e8 ff ff       	jmp    2b212 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11f2>
      case 15: if(is_rgb16) *is_rgb16 = 1;
   2c979:	41 bf 01 00 00 00    	mov    $0x1,%r15d
               return STBI_rgb;
   2c97f:	41 be 03 00 00 00    	mov    $0x3,%r14d
   2c985:	e9 ae fa ff ff       	jmp    2c438 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2418>
      if ( tga_inverted )
   2c98a:	80 7c 24 18 00       	cmpb   $0x0,0x18(%rsp)
   2c98f:	8b ac 24 80 00 00 00 	mov    0x80(%rsp),%ebp
   2c996:	44 89 eb             	mov    %r13d,%ebx
   2c999:	0f 85 dc 00 00 00    	jne    2ca7b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a5b>
         for (j = 0; j*2 < tga_height; ++j)
   2c99f:	45 85 ed             	test   %r13d,%r13d
   2c9a2:	0f 8e d3 00 00 00    	jle    2ca7b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a5b>
            for (i = tga_width * tga_comp; i > 0; --i)
   2c9a8:	89 e9                	mov    %ebp,%ecx
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
   2c9aa:	45 8d 6d ff          	lea    -0x1(%r13),%r13d
            for (i = tga_width * tga_comp; i > 0; --i)
   2c9ae:	41 0f af ce          	imul   %r14d,%ecx
   2c9b2:	85 c9                	test   %ecx,%ecx
   2c9b4:	0f 84 c1 00 00 00    	je     2ca7b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a5b>
   2c9ba:	8d 41 ff             	lea    -0x1(%rcx),%eax
   2c9bd:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   2c9c2:	89 cf                	mov    %ecx,%edi
   2c9c4:	4c 89 64 24 58       	mov    %r12,0x58(%rsp)
   2c9c9:	89 44 24 30          	mov    %eax,0x30(%rsp)
   2c9cd:	89 c8                	mov    %ecx,%eax
   2c9cf:	83 e7 0f             	and    $0xf,%edi
         for (j = 0; j*2 < tga_height; ++j)
   2c9d2:	45 31 db             	xor    %r11d,%r11d
   2c9d5:	c1 e8 04             	shr    $0x4,%eax
   2c9d8:	89 7c 24 18          	mov    %edi,0x18(%rsp)
   2c9dc:	48 c1 e0 04          	shl    $0x4,%rax
   2c9e0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   2c9e5:	89 c8                	mov    %ecx,%eax
   2c9e7:	83 e0 f0             	and    $0xfffffff0,%eax
   2c9ea:	89 44 24 38          	mov    %eax,0x38(%rsp)
   2c9ee:	89 c8                	mov    %ecx,%eax
   2c9f0:	48 01 f0             	add    %rsi,%rax
   2c9f3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   2c9f8:	8d 47 ff             	lea    -0x1(%rdi),%eax
   2c9fb:	89 44 24 50          	mov    %eax,0x50(%rsp)
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
   2c9ff:	44 89 e8             	mov    %r13d,%eax
            int index1 = j * tga_width * tga_comp;
   2ca02:	89 ea                	mov    %ebp,%edx
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
   2ca04:	44 29 d8             	sub    %r11d,%eax
            int index1 = j * tga_width * tga_comp;
   2ca07:	41 0f af d3          	imul   %r11d,%edx
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
   2ca0b:	0f af c5             	imul   %ebp,%eax
            int index1 = j * tga_width * tga_comp;
   2ca0e:	41 0f af d6          	imul   %r14d,%edx
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
   2ca12:	41 0f af c6          	imul   %r14d,%eax
            for (i = tga_width * tga_comp; i > 0; --i)
   2ca16:	83 7c 24 30 06       	cmpl   $0x6,0x30(%rsp)
   2ca1b:	48 63 fa             	movslq %edx,%rdi
   2ca1e:	4c 63 c0             	movslq %eax,%r8
   2ca21:	76 1a                	jbe    2ca3d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a1d>
   2ca23:	4d 8d 48 10          	lea    0x10(%r8),%r9
   2ca27:	49 39 f9             	cmp    %rdi,%r9
   2ca2a:	0f 8e d9 02 00 00    	jle    2cd09 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ce9>
   2ca30:	4c 8d 4f 10          	lea    0x10(%rdi),%r9
   2ca34:	4d 39 c8             	cmp    %r9,%r8
   2ca37:	0f 8d cc 02 00 00    	jge    2cd09 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ce9>
   2ca3d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
   2ca42:	48 8d 04 3e          	lea    (%rsi,%rdi,1),%rax
   2ca46:	4c 8d 0c 3a          	lea    (%rdx,%rdi,1),%r9
               unsigned char temp = tga_data[index1];
   2ca4a:	48 89 c2             	mov    %rax,%rdx
   2ca4d:	44 0f b6 10          	movzbl (%rax),%r10d
            for (i = tga_width * tga_comp; i > 0; --i)
   2ca51:	48 83 c0 01          	add    $0x1,%rax
   2ca55:	48 29 fa             	sub    %rdi,%rdx
               tga_data[index1] = tga_data[index2];
   2ca58:	46 0f b6 24 02       	movzbl (%rdx,%r8,1),%r12d
   2ca5d:	44 88 60 ff          	mov    %r12b,-0x1(%rax)
               tga_data[index2] = temp;
   2ca61:	46 88 14 02          	mov    %r10b,(%rdx,%r8,1)
            for (i = tga_width * tga_comp; i > 0; --i)
   2ca65:	49 39 c1             	cmp    %rax,%r9
   2ca68:	75 e0                	jne    2ca4a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a2a>
         for (j = 0; j*2 < tga_height; ++j)
   2ca6a:	41 83 c3 01          	add    $0x1,%r11d
   2ca6e:	43 8d 04 1b          	lea    (%r11,%r11,1),%eax
   2ca72:	39 c3                	cmp    %eax,%ebx
   2ca74:	7f 89                	jg     2c9ff <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x29df>
   2ca76:	4c 8b 64 24 58       	mov    0x58(%rsp),%r12
      if ( tga_palette != NULL )
   2ca7b:	4d 85 e4             	test   %r12,%r12
   2ca7e:	74 08                	je     2ca88 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a68>
         STBI_FREE( tga_palette );
   2ca80:	4c 89 e7             	mov    %r12,%rdi
   2ca83:	e8 18 9c fd ff       	call   66a0 <free@plt>
   if (tga_comp >= 3 && !tga_rgb16)
   2ca88:	45 85 ff             	test   %r15d,%r15d
   2ca8b:	75 0a                	jne    2ca97 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a77>
   2ca8d:	41 83 fe 02          	cmp    $0x2,%r14d
   2ca91:	0f 8f a4 0f 00 00    	jg     2da3b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3a1b>
   if (req_comp && req_comp != tga_comp)
   2ca97:	8b 44 24 08          	mov    0x8(%rsp),%eax
   2ca9b:	85 c0                	test   %eax,%eax
   2ca9d:	0f 84 56 dd ff ff    	je     2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   2caa3:	44 39 f0             	cmp    %r14d,%eax
   2caa6:	0f 84 4d dd ff ff    	je     2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   if (req_comp == img_n) return data;
   2caac:	8b 54 24 08          	mov    0x8(%rsp),%edx
   2cab0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2cab5:	41 89 d8             	mov    %ebx,%r8d
   2cab8:	89 e9                	mov    %ebp,%ecx
   2caba:	44 89 f6             	mov    %r14d,%esi
   2cabd:	e8 3e 86 fe ff       	call   15100 <_ZL20stbi__convert_formatPhiijj.part.0>
   2cac2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      return stbi__tga_load(s,x,y,comp,req_comp, ri);
   2cac7:	e9 2d dd ff ff       	jmp    2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   2cacc:	8b 44 24 18          	mov    0x18(%rsp),%eax
   2cad0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      for (i=0; i < tga_height; ++i) {
   2cad5:	45 31 c0             	xor    %r8d,%r8d
   2cad8:	89 6c 24 40          	mov    %ebp,0x40(%rsp)
   2cadc:	44 89 44 24 30       	mov    %r8d,0x30(%rsp)
   2cae1:	f7 d8                	neg    %eax
   2cae3:	48 98                	cltq
   2cae5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
   2caea:	8b 44 24 10          	mov    0x10(%rsp),%eax
   2caee:	29 e8                	sub    %ebp,%eax
   2caf0:	89 dd                	mov    %ebx,%ebp
   2caf2:	48 89 cb             	mov    %rcx,%rbx
   2caf5:	41 0f af c6          	imul   %r14d,%eax
   2caf9:	48 98                	cltq
   2cafb:	4c 8d 24 07          	lea    (%rdi,%rax,1),%r12
   2caff:	eb 19                	jmp    2cb1a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2afa>
   2cb01:	83 44 24 30 01       	addl   $0x1,0x30(%rsp)
   2cb06:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
   2cb0b:	8b 44 24 30          	mov    0x30(%rsp),%eax
   2cb0f:	49 01 fc             	add    %rdi,%r12
   2cb12:	39 c5                	cmp    %eax,%ebp
   2cb14:	0f 84 89 00 00 00    	je     2cba3 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2b83>
   if (s->io.read) {
   2cb1a:	49 83 7d 10 00       	cmpq   $0x0,0x10(%r13)
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   2cb1f:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   if (s->io.read) {
   2cb26:	74 0d                	je     2cb35 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2b15>
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   2cb28:	49 89 c1             	mov    %rax,%r9
   2cb2b:	49 29 f1             	sub    %rsi,%r9
      if (blen < n) {
   2cb2e:	44 39 4c 24 18       	cmp    %r9d,0x18(%rsp)
   2cb33:	7f 27                	jg     2cb5c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2b3c>
   if (s->img_buffer+n <= s->img_buffer_end) {
   2cb35:	48 8d 14 1e          	lea    (%rsi,%rbx,1),%rdx
   2cb39:	48 39 d0             	cmp    %rdx,%rax
   2cb3c:	72 c3                	jb     2cb01 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ae1>
      memcpy(buffer, s->img_buffer, n);
   2cb3e:	48 89 da             	mov    %rbx,%rdx
   2cb41:	4c 89 e7             	mov    %r12,%rdi
   2cb44:	e8 c7 98 fd ff       	call   6410 <memcpy@plt>
      s->img_buffer += n;
   2cb49:	49 8b b5 c0 00 00 00 	mov    0xc0(%r13),%rsi
   2cb50:	48 01 de             	add    %rbx,%rsi
   2cb53:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
      return 1;
   2cb5a:	eb a5                	jmp    2cb01 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ae1>
         memcpy(buffer, s->img_buffer, blen);
   2cb5c:	49 63 d1             	movslq %r9d,%rdx
   2cb5f:	4c 89 e7             	mov    %r12,%rdi
   2cb62:	4c 89 4c 24 50       	mov    %r9,0x50(%rsp)
   2cb67:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
   2cb6c:	e8 9f 98 fd ff       	call   6410 <memcpy@plt>
         count = (s->io.read)(s->io_user_data, (char*) buffer + blen, n - blen);
   2cb71:	8b 44 24 18          	mov    0x18(%rsp),%eax
   2cb75:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
   2cb7a:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
   2cb7f:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2cb83:	44 29 c8             	sub    %r9d,%eax
   2cb86:	49 8d 34 14          	lea    (%r12,%rdx,1),%rsi
   2cb8a:	89 c2                	mov    %eax,%edx
   2cb8c:	41 ff 55 10          	call   *0x10(%r13)
         s->img_buffer = s->img_buffer_end;
   2cb90:	49 8b b5 c8 00 00 00 	mov    0xc8(%r13),%rsi
   2cb97:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
         return res;
   2cb9e:	e9 5e ff ff ff       	jmp    2cb01 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ae1>
   2cba3:	89 eb                	mov    %ebp,%ebx
   2cba5:	8b 6c 24 40          	mov    0x40(%rsp),%ebp
   2cba9:	e9 da fe ff ff       	jmp    2ca88 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a68>
   unsigned char *tga_palette = NULL;
   2cbae:	45 31 e4             	xor    %r12d,%r12d
      for (i=0; i < tga_width * tga_height; ++i)
   2cbb1:	83 7c 24 10 00       	cmpl   $0x0,0x10(%rsp)
   2cbb6:	0f 84 55 0e 00 00    	je     2da11 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x39f1>
   2cbbc:	49 63 c6             	movslq %r14d,%rax
   int RLE_repeating = 0;
   2cbbf:	31 ff                	xor    %edi,%edi
   2cbc1:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
   2cbc8:	00 
   2cbc9:	89 ac 24 80 00 00 00 	mov    %ebp,0x80(%rsp)
   2cbd0:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
   2cbd5:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2cbda:	4c 89 ed             	mov    %r13,%rbp
   2cbdd:	41 89 dd             	mov    %ebx,%r13d
   2cbe0:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
   2cbe5:	89 7c 24 58          	mov    %edi,0x58(%rsp)
   2cbe9:	89 7c 24 30          	mov    %edi,0x30(%rsp)
   int RLE_count = 0;
   2cbed:	31 ff                	xor    %edi,%edi
   2cbef:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
   2cbf4:	89 fb                	mov    %edi,%ebx
   int read_next_pixel = 1;
   2cbf6:	b8 01 00 00 00       	mov    $0x1,%eax
         if ( tga_is_RLE )
   2cbfb:	8b 74 24 50          	mov    0x50(%rsp),%esi
   2cbff:	85 f6                	test   %esi,%esi
   2cc01:	0f 84 94 00 00 00    	je     2cc9b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c7b>
            if ( RLE_count == 0 )
   2cc07:	85 db                	test   %ebx,%ebx
   2cc09:	74 5c                	je     2cc67 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c47>
            } else if ( !RLE_repeating )
   2cc0b:	8b 54 24 30          	mov    0x30(%rsp),%edx
   2cc0f:	85 d2                	test   %edx,%edx
   2cc11:	0f 84 84 00 00 00    	je     2cc9b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c7b>
         if ( read_next_pixel )
   2cc17:	85 c0                	test   %eax,%eax
   2cc19:	0f 85 85 03 00 00    	jne    2cfa4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f84>
           tga_data[i*tga_comp+j] = raw_data[j];
   2cc1f:	45 85 f6             	test   %r14d,%r14d
   2cc22:	74 1d                	je     2cc41 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c21>
   2cc24:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
   2cc29:	31 c0                	xor    %eax,%eax
   2cc2b:	89 c2                	mov    %eax,%edx
   2cc2d:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
   2cc32:	83 c0 01             	add    $0x1,%eax
   2cc35:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
   2cc39:	88 0c 17             	mov    %cl,(%rdi,%rdx,1)
   2cc3c:	44 39 f0             	cmp    %r14d,%eax
   2cc3f:	72 ea                	jb     2cc2b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c0b>
      for (i=0; i < tga_width * tga_height; ++i)
   2cc41:	83 44 24 58 01       	addl   $0x1,0x58(%rsp)
   2cc46:	8b 74 24 10          	mov    0x10(%rsp),%esi
         --RLE_count;
   2cc4a:	83 eb 01             	sub    $0x1,%ebx
      for (i=0; i < tga_width * tga_height; ++i)
   2cc4d:	8b 44 24 58          	mov    0x58(%rsp),%eax
   2cc51:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
   2cc56:	48 01 7c 24 60       	add    %rdi,0x60(%rsp)
   2cc5b:	39 f0                	cmp    %esi,%eax
   2cc5d:	0f 8d 27 fd ff ff    	jge    2c98a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x296a>
   2cc63:	31 c0                	xor    %eax,%eax
   2cc65:	eb 94                	jmp    2cbfb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2bdb>
   if (s->img_buffer < s->img_buffer_end)
   2cc67:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
   2cc6e:	48 3b 85 c8 00 00 00 	cmp    0xc8(%rbp),%rax
   2cc75:	0f 83 32 03 00 00    	jae    2cfad <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f8d>
      return *s->img_buffer++;
   2cc7b:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2cc7f:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
   2cc86:	0f b6 00             	movzbl (%rax),%eax
               RLE_count = 1 + (RLE_cmd & 127);
   2cc89:	89 c3                	mov    %eax,%ebx
               RLE_repeating = RLE_cmd >> 7;
   2cc8b:	c1 f8 07             	sar    $0x7,%eax
               RLE_count = 1 + (RLE_cmd & 127);
   2cc8e:	83 e3 7f             	and    $0x7f,%ebx
               RLE_repeating = RLE_cmd >> 7;
   2cc91:	89 44 24 30          	mov    %eax,0x30(%rsp)
               RLE_count = 1 + (RLE_cmd & 127);
   2cc95:	83 c3 01             	add    $0x1,%ebx
   2cc98:	0f b6 db             	movzbl %bl,%ebx
            if ( tga_indexed )
   2cc9b:	8b 44 24 38          	mov    0x38(%rsp),%eax
   2cc9f:	85 c0                	test   %eax,%eax
   2cca1:	0f 85 bf 02 00 00    	jne    2cf66 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f46>
            } else if(tga_rgb16) {
   2cca7:	45 85 ff             	test   %r15d,%r15d
   2ccaa:	0f 84 0c 02 00 00    	je     2cebc <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2e9c>
   stbi__uint16 px = (stbi__uint16)stbi__get16le(s);
   2ccb0:	48 89 ef             	mov    %rbp,%rdi
   2ccb3:	e8 28 17 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   out[0] = (stbi_uc)((r * 255)/31);
   2ccb8:	be 1f 00 00 00       	mov    $0x1f,%esi
   stbi__uint16 px = (stbi__uint16)stbi__get16le(s);
   2ccbd:	89 c1                	mov    %eax,%ecx
   int r = (px >> 10) & fiveBitMask;
   2ccbf:	66 c1 e8 0a          	shr    $0xa,%ax
   2ccc3:	83 e0 1f             	and    $0x1f,%eax
   out[0] = (stbi_uc)((r * 255)/31);
   2ccc6:	69 c0 ff 00 00 00    	imul   $0xff,%eax,%eax
   2cccc:	99                   	cltd
   2cccd:	f7 fe                	idiv   %esi
   2cccf:	88 84 24 c0 00 00 00 	mov    %al,0xc0(%rsp)
   int g = (px >> 5) & fiveBitMask;
   2ccd6:	89 c8                	mov    %ecx,%eax
   2ccd8:	66 c1 e8 05          	shr    $0x5,%ax
   2ccdc:	83 e0 1f             	and    $0x1f,%eax
   out[1] = (stbi_uc)((g * 255)/31);
   2ccdf:	69 c0 ff 00 00 00    	imul   $0xff,%eax,%eax
   2cce5:	99                   	cltd
   2cce6:	f7 fe                	idiv   %esi
   2cce8:	88 84 24 c1 00 00 00 	mov    %al,0xc1(%rsp)
   int b = px & fiveBitMask;
   2ccef:	89 c8                	mov    %ecx,%eax
   2ccf1:	83 e0 1f             	and    $0x1f,%eax
   out[2] = (stbi_uc)((b * 255)/31);
   2ccf4:	69 c0 ff 00 00 00    	imul   $0xff,%eax,%eax
   2ccfa:	99                   	cltd
   2ccfb:	f7 fe                	idiv   %esi
   2ccfd:	88 84 24 c2 00 00 00 	mov    %al,0xc2(%rsp)
         for (j = 0; j < tga_comp; ++j)
   2cd04:	e9 16 ff ff ff       	jmp    2cc1f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2bff>
   2cd09:	83 7c 24 30 0e       	cmpl   $0xe,0x30(%rsp)
   2cd0e:	0f 8e f9 02 00 00    	jle    2d00d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2fed>
   2cd14:	4c 8d 24 3e          	lea    (%rsi,%rdi,1),%r12
   2cd18:	4e 8d 14 06          	lea    (%rsi,%r8,1),%r10
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
   2cd1c:	45 31 c9             	xor    %r9d,%r9d
               unsigned char temp = tga_data[index1];
   2cd1f:	f3 43 0f 6f 04 0c    	movdqu (%r12,%r9,1),%xmm0
               tga_data[index1] = tga_data[index2];
   2cd25:	f3 43 0f 6f 1c 0a    	movdqu (%r10,%r9,1),%xmm3
   2cd2b:	43 0f 11 1c 0c       	movups %xmm3,(%r12,%r9,1)
               tga_data[index2] = temp;
   2cd30:	43 0f 11 04 0a       	movups %xmm0,(%r10,%r9,1)
            for (i = tga_width * tga_comp; i > 0; --i)
   2cd35:	49 83 c1 10          	add    $0x10,%r9
   2cd39:	4c 39 4c 24 40       	cmp    %r9,0x40(%rsp)
   2cd3e:	75 df                	jne    2cd1f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2cff>
   2cd40:	44 8b 4c 24 38       	mov    0x38(%rsp),%r9d
   2cd45:	44 01 ca             	add    %r9d,%edx
   2cd48:	44 01 c8             	add    %r9d,%eax
   2cd4b:	41 39 c9             	cmp    %ecx,%r9d
   2cd4e:	0f 84 16 fd ff ff    	je     2ca6a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a4a>
   2cd54:	44 8b 64 24 18       	mov    0x18(%rsp),%r12d
   2cd59:	83 7c 24 50 06       	cmpl   $0x6,0x50(%rsp)
   2cd5e:	45 89 e2             	mov    %r12d,%r10d
   2cd61:	0f 86 0c 0d 00 00    	jbe    2da73 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3a53>
   2cd67:	4c 01 cf             	add    %r9,%rdi
   2cd6a:	4d 01 c8             	add    %r9,%r8
   2cd6d:	48 01 f7             	add    %rsi,%rdi
   2cd70:	49 01 f0             	add    %rsi,%r8
               unsigned char temp = tga_data[index1];
   2cd73:	4c 8b 0f             	mov    (%rdi),%r9
               tga_data[index1] = tga_data[index2];
   2cd76:	f3 41 0f 7e 00       	movq   (%r8),%xmm0
   2cd7b:	66 0f d6 07          	movq   %xmm0,(%rdi)
               tga_data[index2] = temp;
   2cd7f:	44 89 e7             	mov    %r12d,%edi
   2cd82:	4d 89 08             	mov    %r9,(%r8)
            for (i = tga_width * tga_comp; i > 0; --i)
   2cd85:	45 89 d0             	mov    %r10d,%r8d
   2cd88:	41 83 e0 f8          	and    $0xfffffff8,%r8d
   2cd8c:	44 01 c2             	add    %r8d,%edx
   2cd8f:	44 01 c0             	add    %r8d,%eax
   2cd92:	44 29 c7             	sub    %r8d,%edi
   2cd95:	41 83 e2 07          	and    $0x7,%r10d
   2cd99:	0f 84 cb fc ff ff    	je     2ca6a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a4a>
               unsigned char temp = tga_data[index1];
   2cd9f:	4c 63 ca             	movslq %edx,%r9
               tga_data[index1] = tga_data[index2];
   2cda2:	4c 63 c0             	movslq %eax,%r8
               unsigned char temp = tga_data[index1];
   2cda5:	49 01 f1             	add    %rsi,%r9
               tga_data[index1] = tga_data[index2];
   2cda8:	49 01 f0             	add    %rsi,%r8
               unsigned char temp = tga_data[index1];
   2cdab:	45 0f b6 11          	movzbl (%r9),%r10d
               tga_data[index1] = tga_data[index2];
   2cdaf:	45 0f b6 20          	movzbl (%r8),%r12d
   2cdb3:	45 88 21             	mov    %r12b,(%r9)
               ++index1;
   2cdb6:	44 8d 4a 01          	lea    0x1(%rdx),%r9d
               tga_data[index2] = temp;
   2cdba:	45 88 10             	mov    %r10b,(%r8)
               ++index2;
   2cdbd:	44 8d 40 01          	lea    0x1(%rax),%r8d
            for (i = tga_width * tga_comp; i > 0; --i)
   2cdc1:	83 ff 01             	cmp    $0x1,%edi
   2cdc4:	0f 84 a0 fc ff ff    	je     2ca6a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a4a>
               unsigned char temp = tga_data[index1];
   2cdca:	4d 63 c9             	movslq %r9d,%r9
               tga_data[index1] = tga_data[index2];
   2cdcd:	4d 63 c0             	movslq %r8d,%r8
               unsigned char temp = tga_data[index1];
   2cdd0:	49 01 f1             	add    %rsi,%r9
               tga_data[index1] = tga_data[index2];
   2cdd3:	49 01 f0             	add    %rsi,%r8
               unsigned char temp = tga_data[index1];
   2cdd6:	45 0f b6 11          	movzbl (%r9),%r10d
               tga_data[index1] = tga_data[index2];
   2cdda:	45 0f b6 20          	movzbl (%r8),%r12d
   2cdde:	45 88 21             	mov    %r12b,(%r9)
               ++index1;
   2cde1:	44 8d 4a 02          	lea    0x2(%rdx),%r9d
               tga_data[index2] = temp;
   2cde5:	45 88 10             	mov    %r10b,(%r8)
               ++index2;
   2cde8:	44 8d 40 02          	lea    0x2(%rax),%r8d
            for (i = tga_width * tga_comp; i > 0; --i)
   2cdec:	83 ff 02             	cmp    $0x2,%edi
   2cdef:	0f 84 75 fc ff ff    	je     2ca6a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a4a>
               unsigned char temp = tga_data[index1];
   2cdf5:	4d 63 c9             	movslq %r9d,%r9
               tga_data[index1] = tga_data[index2];
   2cdf8:	4d 63 c0             	movslq %r8d,%r8
               unsigned char temp = tga_data[index1];
   2cdfb:	49 01 f1             	add    %rsi,%r9
               tga_data[index1] = tga_data[index2];
   2cdfe:	49 01 f0             	add    %rsi,%r8
               unsigned char temp = tga_data[index1];
   2ce01:	45 0f b6 11          	movzbl (%r9),%r10d
               tga_data[index1] = tga_data[index2];
   2ce05:	45 0f b6 20          	movzbl (%r8),%r12d
   2ce09:	45 88 21             	mov    %r12b,(%r9)
               ++index1;
   2ce0c:	44 8d 4a 03          	lea    0x3(%rdx),%r9d
               tga_data[index2] = temp;
   2ce10:	45 88 10             	mov    %r10b,(%r8)
               ++index2;
   2ce13:	44 8d 40 03          	lea    0x3(%rax),%r8d
            for (i = tga_width * tga_comp; i > 0; --i)
   2ce17:	83 ff 03             	cmp    $0x3,%edi
   2ce1a:	0f 84 4a fc ff ff    	je     2ca6a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a4a>
               unsigned char temp = tga_data[index1];
   2ce20:	4d 63 c9             	movslq %r9d,%r9
               tga_data[index1] = tga_data[index2];
   2ce23:	4d 63 c0             	movslq %r8d,%r8
               unsigned char temp = tga_data[index1];
   2ce26:	49 01 f1             	add    %rsi,%r9
               tga_data[index1] = tga_data[index2];
   2ce29:	49 01 f0             	add    %rsi,%r8
               unsigned char temp = tga_data[index1];
   2ce2c:	45 0f b6 11          	movzbl (%r9),%r10d
               tga_data[index1] = tga_data[index2];
   2ce30:	45 0f b6 20          	movzbl (%r8),%r12d
   2ce34:	45 88 21             	mov    %r12b,(%r9)
               ++index1;
   2ce37:	44 8d 4a 04          	lea    0x4(%rdx),%r9d
               tga_data[index2] = temp;
   2ce3b:	45 88 10             	mov    %r10b,(%r8)
               ++index2;
   2ce3e:	44 8d 40 04          	lea    0x4(%rax),%r8d
            for (i = tga_width * tga_comp; i > 0; --i)
   2ce42:	83 ff 04             	cmp    $0x4,%edi
   2ce45:	0f 84 1f fc ff ff    	je     2ca6a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a4a>
               unsigned char temp = tga_data[index1];
   2ce4b:	4d 63 c9             	movslq %r9d,%r9
               tga_data[index1] = tga_data[index2];
   2ce4e:	4d 63 c0             	movslq %r8d,%r8
               unsigned char temp = tga_data[index1];
   2ce51:	49 01 f1             	add    %rsi,%r9
               tga_data[index1] = tga_data[index2];
   2ce54:	49 01 f0             	add    %rsi,%r8
               unsigned char temp = tga_data[index1];
   2ce57:	45 0f b6 11          	movzbl (%r9),%r10d
               tga_data[index1] = tga_data[index2];
   2ce5b:	45 0f b6 20          	movzbl (%r8),%r12d
   2ce5f:	45 88 21             	mov    %r12b,(%r9)
               ++index1;
   2ce62:	44 8d 4a 05          	lea    0x5(%rdx),%r9d
               tga_data[index2] = temp;
   2ce66:	45 88 10             	mov    %r10b,(%r8)
               ++index2;
   2ce69:	44 8d 40 05          	lea    0x5(%rax),%r8d
            for (i = tga_width * tga_comp; i > 0; --i)
   2ce6d:	83 ff 05             	cmp    $0x5,%edi
   2ce70:	0f 84 f4 fb ff ff    	je     2ca6a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a4a>
               unsigned char temp = tga_data[index1];
   2ce76:	4d 63 c9             	movslq %r9d,%r9
               tga_data[index1] = tga_data[index2];
   2ce79:	4d 63 c0             	movslq %r8d,%r8
               ++index1;
   2ce7c:	83 c2 06             	add    $0x6,%edx
               ++index2;
   2ce7f:	83 c0 06             	add    $0x6,%eax
               unsigned char temp = tga_data[index1];
   2ce82:	49 01 f1             	add    %rsi,%r9
               tga_data[index1] = tga_data[index2];
   2ce85:	49 01 f0             	add    %rsi,%r8
               unsigned char temp = tga_data[index1];
   2ce88:	45 0f b6 11          	movzbl (%r9),%r10d
               tga_data[index1] = tga_data[index2];
   2ce8c:	45 0f b6 20          	movzbl (%r8),%r12d
   2ce90:	45 88 21             	mov    %r12b,(%r9)
               tga_data[index2] = temp;
   2ce93:	45 88 10             	mov    %r10b,(%r8)
            for (i = tga_width * tga_comp; i > 0; --i)
   2ce96:	83 ff 06             	cmp    $0x6,%edi
   2ce99:	0f 84 cb fb ff ff    	je     2ca6a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a4a>
               unsigned char temp = tga_data[index1];
   2ce9f:	48 63 d2             	movslq %edx,%rdx
               tga_data[index1] = tga_data[index2];
   2cea2:	48 98                	cltq
               unsigned char temp = tga_data[index1];
   2cea4:	48 01 f2             	add    %rsi,%rdx
               tga_data[index1] = tga_data[index2];
   2cea7:	48 01 f0             	add    %rsi,%rax
               unsigned char temp = tga_data[index1];
   2ceaa:	0f b6 3a             	movzbl (%rdx),%edi
               tga_data[index1] = tga_data[index2];
   2cead:	44 0f b6 00          	movzbl (%rax),%r8d
   2ceb1:	44 88 02             	mov    %r8b,(%rdx)
               tga_data[index2] = temp;
   2ceb4:	40 88 38             	mov    %dil,(%rax)
            for (i = tga_width * tga_comp; i > 0; --i)
   2ceb7:	e9 ae fb ff ff       	jmp    2ca6a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a4a>
   if (s->img_buffer < s->img_buffer_end)
   2cebc:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
   2cec3:	48 3b 85 c8 00 00 00 	cmp    0xc8(%rbp),%rax
   2ceca:	0f 82 45 09 00 00    	jb     2d815 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x37f5>
   return 0;
   2ced0:	31 d2                	xor    %edx,%edx
   if (s->read_from_callbacks) {
   2ced2:	83 7d 30 00          	cmpl   $0x0,0x30(%rbp)
   2ced6:	0f 85 17 09 00 00    	jne    2d7f3 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x37d3>
                  raw_data[j] = stbi__get8(s);
   2cedc:	88 94 24 c0 00 00 00 	mov    %dl,0xc0(%rsp)
               for (j = 0; j < tga_comp; ++j) {
   2cee3:	41 83 fe 01          	cmp    $0x1,%r14d
   2cee7:	0f 84 37 fd ff ff    	je     2cc24 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c04>
   if (s->img_buffer < s->img_buffer_end)
   2ceed:	48 3b 85 c8 00 00 00 	cmp    0xc8(%rbp),%rax
   2cef4:	0f 82 e3 08 00 00    	jb     2d7dd <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x37bd>
   return 0;
   2cefa:	31 d2                	xor    %edx,%edx
   if (s->read_from_callbacks) {
   2cefc:	83 7d 30 00          	cmpl   $0x0,0x30(%rbp)
   2cf00:	0f 85 b5 08 00 00    	jne    2d7bb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x379b>
                  raw_data[j] = stbi__get8(s);
   2cf06:	88 94 24 c1 00 00 00 	mov    %dl,0xc1(%rsp)
               for (j = 0; j < tga_comp; ++j) {
   2cf0d:	41 83 fe 02          	cmp    $0x2,%r14d
   2cf11:	0f 84 0d fd ff ff    	je     2cc24 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c04>
   if (s->img_buffer < s->img_buffer_end)
   2cf17:	48 3b 85 c8 00 00 00 	cmp    0xc8(%rbp),%rax
   2cf1e:	0f 82 81 08 00 00    	jb     2d7a5 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3785>
   return 0;
   2cf24:	31 d2                	xor    %edx,%edx
   if (s->read_from_callbacks) {
   2cf26:	83 7d 30 00          	cmpl   $0x0,0x30(%rbp)
   2cf2a:	0f 85 53 08 00 00    	jne    2d783 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3763>
                  raw_data[j] = stbi__get8(s);
   2cf30:	88 94 24 c2 00 00 00 	mov    %dl,0xc2(%rsp)
               for (j = 0; j < tga_comp; ++j) {
   2cf37:	41 83 fe 04          	cmp    $0x4,%r14d
   2cf3b:	0f 85 de fc ff ff    	jne    2cc1f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2bff>
   if (s->img_buffer < s->img_buffer_end)
   2cf41:	48 3b 85 c8 00 00 00 	cmp    0xc8(%rbp),%rax
   2cf48:	0f 82 22 08 00 00    	jb     2d770 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3750>
   return 0;
   2cf4e:	31 c0                	xor    %eax,%eax
   if (s->read_from_callbacks) {
   2cf50:	83 7d 30 00          	cmpl   $0x0,0x30(%rbp)
   2cf54:	0f 85 07 08 00 00    	jne    2d761 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3741>
                  raw_data[j] = stbi__get8(s);
   2cf5a:	88 84 24 c3 00 00 00 	mov    %al,0xc3(%rsp)
               for (j = 0; j < tga_comp; ++j) {
   2cf61:	e9 be fc ff ff       	jmp    2cc24 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c04>
               int pal_idx = (tga_bits_per_pixel == 8) ? stbi__get8(s) : stbi__get16le(s);
   2cf66:	83 7c 24 48 08       	cmpl   $0x8,0x48(%rsp)
   2cf6b:	48 89 ef             	mov    %rbp,%rdi
   2cf6e:	74 2a                	je     2cf9a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f7a>
   2cf70:	e8 6b 14 ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
   2cf75:	89 c2                	mov    %eax,%edx
               pal_idx *= tga_comp;
   2cf77:	31 c0                	xor    %eax,%eax
               if ( pal_idx >= tga_palette_len ) {
   2cf79:	39 54 24 40          	cmp    %edx,0x40(%rsp)
   2cf7d:	7e 06                	jle    2cf85 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f65>
               pal_idx *= tga_comp;
   2cf7f:	89 d0                	mov    %edx,%eax
   2cf81:	41 0f af c6          	imul   %r14d,%eax
                  raw_data[j] = tga_palette[pal_idx+j];
   2cf85:	48 98                	cltq
   2cf87:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
   2cf8c:	44 89 f1             	mov    %r14d,%ecx
   2cf8f:	49 8d 34 04          	lea    (%r12,%rax,1),%rsi
   2cf93:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
   2cf95:	e9 85 fc ff ff       	jmp    2cc1f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2bff>
               int pal_idx = (tga_bits_per_pixel == 8) ? stbi__get8(s) : stbi__get16le(s);
   2cf9a:	e8 01 eb fe ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   2cf9f:	0f b6 d0             	movzbl %al,%edx
   2cfa2:	eb d3                	jmp    2cf77 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f57>
   2cfa4:	89 44 24 30          	mov    %eax,0x30(%rsp)
   2cfa8:	e9 ee fc ff ff       	jmp    2cc9b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c7b>
   return 0;
   2cfad:	31 c0                	xor    %eax,%eax
   if (s->read_from_callbacks) {
   2cfaf:	83 7d 30 00          	cmpl   $0x0,0x30(%rbp)
   2cfb3:	0f 84 d0 fc ff ff    	je     2cc89 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c69>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2cfb9:	48 8d 5d 38          	lea    0x38(%rbp),%rbx
   2cfbd:	8b 55 34             	mov    0x34(%rbp),%edx
   2cfc0:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
   2cfc4:	48 89 de             	mov    %rbx,%rsi
   2cfc7:	ff 55 10             	call   *0x10(%rbp)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2cfca:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   2cfd1:	48 2b 95 d0 00 00 00 	sub    0xd0(%rbp),%rdx
   2cfd8:	01 95 b8 00 00 00    	add    %edx,0xb8(%rbp)
      s->img_buffer_end = s->buffer_start+1;
   2cfde:	48 8d 55 39          	lea    0x39(%rbp),%rdx
   if (n == 0) {
   2cfe2:	85 c0                	test   %eax,%eax
   2cfe4:	0f 85 92 0a 00 00    	jne    2da7c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3a5c>
      s->read_from_callbacks = 0;
   2cfea:	31 c9                	xor    %ecx,%ecx
      *s->img_buffer = 0;
   2cfec:	c6 45 38 00          	movb   $0x0,0x38(%rbp)
      s->img_buffer_end = s->buffer_start+1;
   2cff0:	48 89 d3             	mov    %rdx,%rbx
      s->read_from_callbacks = 0;
   2cff3:	89 4d 30             	mov    %ecx,0x30(%rbp)
      *s->img_buffer = 0;
   2cff6:	48 89 9d c8 00 00 00 	mov    %rbx,0xc8(%rbp)
      return *s->img_buffer++;
   2cffd:	0f b6 45 38          	movzbl 0x38(%rbp),%eax
   2d001:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
   2d008:	e9 7c fc ff ff       	jmp    2cc89 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2c69>
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
   2d00d:	41 89 cc             	mov    %ecx,%r12d
   2d010:	41 89 ca             	mov    %ecx,%r10d
   2d013:	45 31 c9             	xor    %r9d,%r9d
   2d016:	e9 4c fd ff ff       	jmp    2cd67 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2d47>
   return 0;
   2d01b:	31 c9                	xor    %ecx,%ecx
   2d01d:	e9 a2 f3 ff ff       	jmp    2c3c4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x23a4>
   s->img_buffer = s->img_buffer_original;
   2d022:	49 8b 95 d0 00 00 00 	mov    0xd0(%r13),%rdx
   if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) goto errorEnd;
   2d029:	83 f9 0f             	cmp    $0xf,%ecx
   2d02c:	0f 84 87 f2 ff ff    	je     2c2b9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2299>
   2d032:	40 84 f6             	test   %sil,%sil
   2d035:	0f 84 7e f2 ff ff    	je     2c2b9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2299>
   2d03b:	83 e0 f7             	and    $0xfffffff7,%eax
   2d03e:	3c 10                	cmp    $0x10,%al
   2d040:	0f 84 73 f2 ff ff    	je     2c2b9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2299>
   s->img_buffer = s->img_buffer_original;
   2d046:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   s->img_buffer_end = s->img_buffer_original_end;
   2d04d:	49 8b 85 d8 00 00 00 	mov    0xd8(%r13),%rax
   if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) goto errorEnd;
   2d054:	83 f9 20             	cmp    $0x20,%ecx
   2d057:	0f 85 96 e8 ff ff    	jne    2b8f3 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x18d3>
   2d05d:	e9 65 f2 ff ff       	jmp    2c2c7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x22a7>
   stbi__skip(s,stbi__get32be(s) );
   2d062:	4c 89 ef             	mov    %r13,%rdi
   2d065:	e8 96 18 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   2d06a:	89 c6                	mov    %eax,%esi
   if (n == 0) return;  // already there!
   2d06c:	85 c0                	test   %eax,%eax
   2d06e:	74 0e                	je     2d07e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x305e>
   if (n < 0) {
   2d070:	0f 88 11 12 00 00    	js     2e287 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4267>
   2d076:	4c 89 ef             	mov    %r13,%rdi
   2d079:	e8 92 5a fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   stbi__skip(s, stbi__get32be(s) );
   2d07e:	4c 89 ef             	mov    %r13,%rdi
   2d081:	e8 7a 18 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   2d086:	89 c6                	mov    %eax,%esi
   if (n == 0) return;  // already there!
   2d088:	85 c0                	test   %eax,%eax
   2d08a:	74 0e                	je     2d09a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x307a>
   if (n < 0) {
   2d08c:	0f 88 08 12 00 00    	js     2e29a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x427a>
   2d092:	4c 89 ef             	mov    %r13,%rdi
   2d095:	e8 76 5a fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   stbi__skip(s, stbi__get32be(s) );
   2d09a:	4c 89 ef             	mov    %r13,%rdi
   2d09d:	e8 5e 18 ff ff       	call   1e900 <_ZL13stbi__get32beP13stbi__context>
   2d0a2:	89 c6                	mov    %eax,%esi
   if (n == 0) return;  // already there!
   2d0a4:	85 c0                	test   %eax,%eax
   2d0a6:	74 0e                	je     2d0b6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3096>
   if (n < 0) {
   2d0a8:	0f 88 ff 11 00 00    	js     2e2ad <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x428d>
   2d0ae:	4c 89 ef             	mov    %r13,%rdi
   2d0b1:	e8 5a 5a fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   compression = stbi__get16be(s);
   2d0b6:	4c 89 ef             	mov    %r13,%rdi
   2d0b9:	e8 f2 11 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2d0be:	41 89 c6             	mov    %eax,%r14d
   if (compression > 1)
   2d0c1:	83 f8 01             	cmp    $0x1,%eax
   2d0c4:	0f 8f 3a 06 00 00    	jg     2d704 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x36e4>
   if (!stbi__mad3sizes_valid(4, w, h, 0))
   2d0ca:	8b 54 24 38          	mov    0x38(%rsp),%edx
   2d0ce:	31 c9                	xor    %ecx,%ecx
   2d0d0:	44 89 fe             	mov    %r15d,%esi
   2d0d3:	bf 04 00 00 00       	mov    $0x4,%edi
   2d0d8:	e8 23 41 fe ff       	call   11200 <_ZL21stbi__mad3sizes_validiiii>
   2d0dd:	85 c0                	test   %eax,%eax
   2d0df:	0f 84 3b e4 ff ff    	je     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   if (!compression && bitdepth == 16 && bpc == 16) {
   2d0e5:	83 7c 24 48 10       	cmpl   $0x10,0x48(%rsp)
   2d0ea:	0f 94 c2             	sete   %dl
   2d0ed:	83 fd 10             	cmp    $0x10,%ebp
   2d0f0:	0f 94 c0             	sete   %al
   2d0f3:	21 c2                	and    %eax,%edx
   2d0f5:	88 54 24 50          	mov    %dl,0x50(%rsp)
   2d0f9:	45 85 f6             	test   %r14d,%r14d
   2d0fc:	75 08                	jne    2d106 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x30e6>
   2d0fe:	84 d2                	test   %dl,%dl
   2d100:	0f 85 ce 01 00 00    	jne    2d2d4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x32b4>
      out = (stbi_uc *) stbi__malloc(4 * w*h);
   2d106:	8b 6c 24 38          	mov    0x38(%rsp),%ebp
   2d10a:	41 0f af ef          	imul   %r15d,%ebp
   2d10e:	8d 3c ad 00 00 00 00 	lea    0x0(,%rbp,4),%edi
   2d115:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   2d118:	e8 43 96 fd ff       	call   6760 <malloc@plt>
   2d11d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   if (!out) return stbi__errpuc("outofmem", "Out of memory");
   2d122:	48 85 c0             	test   %rax,%rax
   2d125:	0f 84 cc 09 00 00    	je     2daf7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ad7>
   if (compression) {
   2d12b:	45 85 f6             	test   %r14d,%r14d
   2d12e:	0f 84 d2 01 00 00    	je     2d306 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x32e6>
      stbi__skip(s, h * channelCount * 2 );
   2d134:	8b 44 24 38          	mov    0x38(%rsp),%eax
   2d138:	0f af c3             	imul   %ebx,%eax
   if (n == 0) return;  // already there!
   2d13b:	85 c0                	test   %eax,%eax
   2d13d:	74 12                	je     2d151 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3131>
   if (n < 0) {
   2d13f:	01 c0                	add    %eax,%eax
   2d141:	89 c6                	mov    %eax,%esi
   2d143:	0f 88 d0 05 00 00    	js     2d719 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x36f9>
   2d149:	4c 89 ef             	mov    %r13,%rdi
   2d14c:	e8 bf 59 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
      s->img_buffer_end = s->buffer_start+1;
   2d151:	31 c0                	xor    %eax,%eax
         len = 257 - len;
   2d153:	44 89 fa             	mov    %r15d,%edx
   2d156:	41 89 de             	mov    %ebx,%r14d
   2d159:	4c 89 e1             	mov    %r12,%rcx
   2d15c:	49 89 c7             	mov    %rax,%r15
         p = out+channel;
   2d15f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2d164:	45 89 f8             	mov    %r15d,%r8d
   2d167:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
         if (channel >= channelCount) {
   2d16b:	45 39 fe             	cmp    %r15d,%r14d
   2d16e:	0f 8e 75 05 00 00    	jle    2d6e9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x36c9>
   count = 0;
   2d174:	31 db                	xor    %ebx,%ebx
   2d176:	89 54 24 48          	mov    %edx,0x48(%rsp)
   2d17a:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
   2d17f:	89 d8                	mov    %ebx,%eax
   2d181:	4c 89 e3             	mov    %r12,%rbx
   2d184:	41 89 c4             	mov    %eax,%r12d
   while ((nleft = pixelCount - count) > 0) {
   2d187:	89 ef                	mov    %ebp,%edi
   2d189:	44 29 e7             	sub    %r12d,%edi
   2d18c:	85 ff                	test   %edi,%edi
   2d18e:	0f 8e 30 05 00 00    	jle    2d6c4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x36a4>
   2d194:	4c 89 7c 24 40       	mov    %r15,0x40(%rsp)
   2d199:	45 89 e7             	mov    %r12d,%r15d
   2d19c:	41 89 fc             	mov    %edi,%r12d
   if (s->img_buffer < s->img_buffer_end)
   2d19f:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2d1a6:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2d1ad:	0f 82 a2 00 00 00    	jb     2d255 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3235>
   if (s->read_from_callbacks) {
   2d1b3:	41 83 7d 30 00       	cmpl   $0x0,0x30(%r13)
   2d1b8:	0f 85 88 00 00 00    	jne    2d246 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3226>
         len++;
   2d1be:	45 89 fc             	mov    %r15d,%r12d
   2d1c1:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   2d1c6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   2d1cc:	ba 01 00 00 00       	mov    $0x1,%edx
         count += len;
   2d1d1:	45 01 c4             	add    %r8d,%r12d
   2d1d4:	4c 89 7c 24 58       	mov    %r15,0x58(%rsp)
   2d1d9:	49 89 df             	mov    %rbx,%r15
   2d1dc:	44 89 64 24 40       	mov    %r12d,0x40(%rsp)
   2d1e1:	41 89 ec             	mov    %ebp,%r12d
   2d1e4:	44 89 c5             	mov    %r8d,%ebp
   2d1e7:	eb 24                	jmp    2d20d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x31ed>
      return *s->img_buffer++;
   2d1e9:	48 8d 48 01          	lea    0x1(%rax),%rcx
   2d1ed:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2d1f4:	0f b6 00             	movzbl (%rax),%eax
            *p = stbi__get8(s);
   2d1f7:	88 03                	mov    %al,(%rbx)
            p += 4;
   2d1f9:	48 83 c3 04          	add    $0x4,%rbx
         while (len) {
   2d1fd:	83 ed 01             	sub    $0x1,%ebp
   2d200:	0f 84 62 01 00 00    	je     2d368 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3348>
   2d206:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   if (s->img_buffer < s->img_buffer_end)
   2d20d:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2d214:	72 d3                	jb     2d1e9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x31c9>
   return 0;
   2d216:	31 c0                	xor    %eax,%eax
   if (s->read_from_callbacks) {
   2d218:	41 83 7d 30 00       	cmpl   $0x0,0x30(%r13)
   2d21d:	74 d8                	je     2d1f7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x31d7>
      stbi__refill_buffer(s);
   2d21f:	4c 89 ef             	mov    %r13,%rdi
   2d222:	89 54 24 60          	mov    %edx,0x60(%rsp)
   2d226:	e8 55 40 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2d22b:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2d232:	8b 54 24 60          	mov    0x60(%rsp),%edx
   2d236:	48 8d 48 01          	lea    0x1(%rax),%rcx
   2d23a:	49 89 8d c0 00 00 00 	mov    %rcx,0xc0(%r13)
   2d241:	0f b6 00             	movzbl (%rax),%eax
   2d244:	eb b1                	jmp    2d1f7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x31d7>
      stbi__refill_buffer(s);
   2d246:	4c 89 ef             	mov    %r13,%rdi
   2d249:	e8 32 40 fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2d24e:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2d255:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2d259:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2d260:	0f b6 00             	movzbl (%rax),%eax
      len = stbi__get8(s);
   2d263:	0f b6 d0             	movzbl %al,%edx
      if (len == 128) {
   2d266:	3c 80                	cmp    $0x80,%al
   2d268:	0f 84 31 ff ff ff    	je     2d19f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x317f>
      } else if (len < 128) {
   2d26e:	44 89 e7             	mov    %r12d,%edi
   2d271:	45 89 fc             	mov    %r15d,%r12d
   2d274:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
   2d279:	83 fa 7f             	cmp    $0x7f,%edx
   2d27c:	0f 8e c9 04 00 00    	jle    2d74b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x372b>
         len = 257 - len;
   2d282:	41 b8 01 01 00 00    	mov    $0x101,%r8d
   2d288:	89 54 24 58          	mov    %edx,0x58(%rsp)
   2d28c:	41 29 d0             	sub    %edx,%r8d
         if (len > nleft) return 0; // corrupt data
   2d28f:	44 39 c7             	cmp    %r8d,%edi
   2d292:	44 89 44 24 40       	mov    %r8d,0x40(%rsp)
   2d297:	0f 8c 8f 04 00 00    	jl     2d72c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x370c>
         val = stbi__get8(s);
   2d29d:	4c 89 ef             	mov    %r13,%rdi
   2d2a0:	e8 fb e7 fe ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
         count += len;
   2d2a5:	44 8b 44 24 40       	mov    0x40(%rsp),%r8d
   2d2aa:	8b 54 24 58          	mov    0x58(%rsp),%edx
         val = stbi__get8(s);
   2d2ae:	89 c7                	mov    %eax,%edi
         count += len;
   2d2b0:	31 c0                	xor    %eax,%eax
   2d2b2:	45 01 c4             	add    %r8d,%r12d
            *p = val;
   2d2b5:	40 88 3c 83          	mov    %dil,(%rbx,%rax,4)
         while (len) {
   2d2b9:	48 83 c0 01          	add    $0x1,%rax
   2d2bd:	41 39 c0             	cmp    %eax,%r8d
   2d2c0:	75 f3                	jne    2d2b5 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3295>
            p += 4;
   2d2c2:	b8 01 01 00 00       	mov    $0x101,%eax
   2d2c7:	29 d0                	sub    %edx,%eax
   2d2c9:	48 98                	cltq
   2d2cb:	48 8d 1c 83          	lea    (%rbx,%rax,4),%rbx
   2d2cf:	e9 b3 fe ff ff       	jmp    2d187 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3167>
      out = (stbi_uc *) stbi__malloc_mad3(8, w, h, 0);
   2d2d4:	44 8b 74 24 38       	mov    0x38(%rsp),%r14d
   2d2d9:	44 89 fe             	mov    %r15d,%esi
   2d2dc:	bf 08 00 00 00       	mov    $0x8,%edi
   2d2e1:	44 89 f2             	mov    %r14d,%edx
   pixelCount = w*h;
   2d2e4:	45 0f af f7          	imul   %r15d,%r14d
      out = (stbi_uc *) stbi__malloc_mad3(8, w, h, 0);
   2d2e8:	e8 a3 7d fe ff       	call   15090 <_ZL17stbi__malloc_mad3iiii>
      ri->bits_per_channel = 16;
   2d2ed:	41 c7 04 24 10 00 00 	movl   $0x10,(%r12)
   2d2f4:	00 
      out = (stbi_uc *) stbi__malloc_mad3(8, w, h, 0);
   2d2f5:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   pixelCount = w*h;
   2d2fa:	44 89 f5             	mov    %r14d,%ebp
   if (!out) return stbi__errpuc("outofmem", "Out of memory");
   2d2fd:	48 85 c0             	test   %rax,%rax
   2d300:	0f 84 f1 07 00 00    	je     2daf7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ad7>
   count = 0;
   2d306:	31 c0                	xor    %eax,%eax
   2d308:	44 89 7c 24 40       	mov    %r15d,0x40(%rsp)
   2d30d:	41 89 ee             	mov    %ebp,%r14d
   2d310:	49 89 c7             	mov    %rax,%r15
         if (channel >= channelCount) {
   2d313:	44 39 fb             	cmp    %r15d,%ebx
   2d316:	0f 8f 9f 00 00 00    	jg     2d3bb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x339b>
               stbi__uint16 val = channel == 3 ? 65535 : 0;
   2d31c:	41 83 ff 03          	cmp    $0x3,%r15d
   2d320:	0f 94 c2             	sete   %dl
            if (bitdepth == 16 && bpc == 16) {
   2d323:	80 7c 24 50 00       	cmpb   $0x0,0x50(%rsp)
   2d328:	74 74                	je     2d39e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x337e>
               stbi__uint16 *q = ((stbi__uint16 *) out) + channel;
   2d32a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2d32f:	4b 8d 0c 3f          	lea    (%r15,%r15,1),%rcx
   2d333:	48 01 c1             	add    %rax,%rcx
               stbi__uint16 val = channel == 3 ? 65535 : 0;
   2d336:	0f b6 c2             	movzbl %dl,%eax
               for (i = 0; i < pixelCount; i++, q += 4)
   2d339:	31 d2                	xor    %edx,%edx
               stbi__uint16 val = channel == 3 ? 65535 : 0;
   2d33b:	f7 d8                	neg    %eax
               for (i = 0; i < pixelCount; i++, q += 4)
   2d33d:	eb 08                	jmp    2d347 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3327>
                  *q = val;
   2d33f:	66 89 04 d1          	mov    %ax,(%rcx,%rdx,8)
               for (i = 0; i < pixelCount; i++, q += 4)
   2d343:	48 83 c2 01          	add    $0x1,%rdx
   2d347:	41 39 d6             	cmp    %edx,%r14d
   2d34a:	7f f3                	jg     2d33f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x331f>
      for (channel = 0; channel < 4; channel++) {
   2d34c:	49 83 c7 01          	add    $0x1,%r15
   2d350:	49 83 ff 04          	cmp    $0x4,%r15
   2d354:	0f 84 01 01 00 00    	je     2d45b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x343b>
         if (channel >= channelCount) {
   2d35a:	44 39 fb             	cmp    %r15d,%ebx
   2d35d:	7f 5c                	jg     2d3bb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x339b>
               stbi__uint16 val = channel == 3 ? 65535 : 0;
   2d35f:	41 83 ff 03          	cmp    $0x3,%r15d
   2d363:	0f 94 c2             	sete   %dl
   2d366:	eb c2                	jmp    2d32a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x330a>
            p += 4;
   2d368:	4c 89 fb             	mov    %r15,%rbx
   2d36b:	48 63 d2             	movslq %edx,%rdx
   2d36e:	44 89 e5             	mov    %r12d,%ebp
   2d371:	4c 8b 7c 24 58       	mov    0x58(%rsp),%r15
   2d376:	44 8b 64 24 40       	mov    0x40(%rsp),%r12d
   2d37b:	48 8d 1c 93          	lea    (%rbx,%rdx,4),%rbx
   2d37f:	e9 03 fe ff ff       	jmp    2d187 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3167>
      for (channel = 0; channel < 4; channel++) {
   2d384:	49 83 c7 01          	add    $0x1,%r15
   2d388:	49 83 ff 04          	cmp    $0x4,%r15
   2d38c:	0f 84 c9 00 00 00    	je     2d45b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x343b>
         if (channel >= channelCount) {
   2d392:	44 39 fb             	cmp    %r15d,%ebx
   2d395:	7f 24                	jg     2d3bb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x339b>
               stbi__uint16 val = channel == 3 ? 65535 : 0;
   2d397:	41 83 ff 03          	cmp    $0x3,%r15d
   2d39b:	0f 94 c2             	sete   %dl
               stbi_uc *p = out+channel;
   2d39e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
               stbi_uc val = channel == 3 ? 255 : 0;
   2d3a3:	f7 da                	neg    %edx
               stbi_uc *p = out+channel;
   2d3a5:	4a 8d 0c 38          	lea    (%rax,%r15,1),%rcx
               for (i = 0; i < pixelCount; i++, p += 4)
   2d3a9:	31 c0                	xor    %eax,%eax
   2d3ab:	eb 07                	jmp    2d3b4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3394>
                  *p = val;
   2d3ad:	88 14 81             	mov    %dl,(%rcx,%rax,4)
               for (i = 0; i < pixelCount; i++, p += 4)
   2d3b0:	48 83 c0 01          	add    $0x1,%rax
   2d3b4:	41 39 c6             	cmp    %eax,%r14d
   2d3b7:	7f f4                	jg     2d3ad <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x338d>
   2d3b9:	eb c9                	jmp    2d384 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3364>
   2d3bb:	4c 89 e2             	mov    %r12,%rdx
   2d3be:	41 89 dc             	mov    %ebx,%r12d
            if (ri->bits_per_channel == 16) {    // output bpc
   2d3c1:	83 3a 10             	cmpl   $0x10,(%rdx)
   2d3c4:	0f 84 ab 02 00 00    	je     2d675 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3655>
               stbi_uc *p = out+channel;
   2d3ca:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
               if (bitdepth == 16) {  // input bpc
   2d3cf:	83 7c 24 48 10       	cmpl   $0x10,0x48(%rsp)
               stbi_uc *p = out+channel;
   2d3d4:	4a 8d 2c 38          	lea    (%rax,%r15,1),%rbp
               if (bitdepth == 16) {  // input bpc
   2d3d8:	74 41                	je     2d41b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x33fb>
   2d3da:	31 db                	xor    %ebx,%ebx
   2d3dc:	eb 1a                	jmp    2d3f8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x33d8>
                     *p = stbi__get8(s);
   2d3de:	4c 89 ef             	mov    %r13,%rdi
   2d3e1:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
   2d3e6:	e8 b5 e6 fe ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   2d3eb:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
   2d3f0:	88 44 9d 00          	mov    %al,0x0(%rbp,%rbx,4)
                  for (i = 0; i < pixelCount; i++, p += 4)
   2d3f4:	48 83 c3 01          	add    $0x1,%rbx
   2d3f8:	41 39 de             	cmp    %ebx,%r14d
   2d3fb:	7f e1                	jg     2d3de <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x33be>
      for (channel = 0; channel < 4; channel++) {
   2d3fd:	49 83 c7 01          	add    $0x1,%r15
   2d401:	49 83 ff 04          	cmp    $0x4,%r15
   2d405:	0f 84 a6 02 00 00    	je     2d6b1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3691>
         if (channel >= channelCount) {
   2d40b:	45 39 fc             	cmp    %r15d,%r12d
   2d40e:	7f b1                	jg     2d3c1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x33a1>
               stbi__uint16 val = channel == 3 ? 65535 : 0;
   2d410:	44 89 e3             	mov    %r12d,%ebx
   2d413:	49 89 d4             	mov    %rdx,%r12
   2d416:	e9 7c ff ff ff       	jmp    2d397 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3377>
   2d41b:	44 89 e3             	mov    %r12d,%ebx
   2d41e:	49 89 d4             	mov    %rdx,%r12
   2d421:	31 d2                	xor    %edx,%edx
   2d423:	4c 89 64 24 58       	mov    %r12,0x58(%rsp)
   2d428:	41 89 dc             	mov    %ebx,%r12d
   2d42b:	48 89 d3             	mov    %rdx,%rbx
   2d42e:	eb 10                	jmp    2d440 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3420>
                     *p = (stbi_uc) (stbi__get16be(s) >> 8);
   2d430:	4c 89 ef             	mov    %r13,%rdi
   2d433:	e8 78 0e ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2d438:	88 64 9d 00          	mov    %ah,0x0(%rbp,%rbx,4)
                  for (i = 0; i < pixelCount; i++, p += 4)
   2d43c:	48 83 c3 01          	add    $0x1,%rbx
   2d440:	41 39 de             	cmp    %ebx,%r14d
   2d443:	7f eb                	jg     2d430 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3410>
      for (channel = 0; channel < 4; channel++) {
   2d445:	49 83 c7 01          	add    $0x1,%r15
   2d449:	44 89 e3             	mov    %r12d,%ebx
   2d44c:	4c 8b 64 24 58       	mov    0x58(%rsp),%r12
   2d451:	49 83 ff 04          	cmp    $0x4,%r15
   2d455:	0f 85 b8 fe ff ff    	jne    2d313 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x32f3>
   2d45b:	44 8b 7c 24 40       	mov    0x40(%rsp),%r15d
   2d460:	44 89 f5             	mov    %r14d,%ebp
   if (channelCount >= 4) {
   2d463:	83 fb 03             	cmp    $0x3,%ebx
   2d466:	7f 69                	jg     2d4d1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x34b1>
   if (req_comp && req_comp != 4) {
   2d468:	f7 44 24 08 fb ff ff 	testl  $0xfffffffb,0x8(%rsp)
   2d46f:	ff 
   2d470:	74 37                	je     2d4a9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3489>
      if (ri->bits_per_channel == 16)
   2d472:	41 83 3c 24 10       	cmpl   $0x10,(%r12)
   2d477:	0f 84 d3 01 00 00    	je     2d650 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3630>
   if (req_comp == img_n) return data;
   2d47d:	44 8b 44 24 38       	mov    0x38(%rsp),%r8d
   2d482:	8b 54 24 08          	mov    0x8(%rsp),%edx
   2d486:	44 89 f9             	mov    %r15d,%ecx
   2d489:	be 04 00 00 00       	mov    $0x4,%esi
   2d48e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2d493:	e8 68 7c fe ff       	call   15100 <_ZL20stbi__convert_formatPhiijj.part.0>
   2d498:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      if (out == NULL) return out; // stbi__convert_format frees input on failure
   2d49d:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
   2d4a3:	0f 84 47 d3 ff ff    	je     2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   if (comp) *comp = 4;
   2d4a9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   2d4ae:	48 85 c0             	test   %rax,%rax
   2d4b1:	74 06                	je     2d4b9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3499>
   2d4b3:	c7 00 04 00 00 00    	movl   $0x4,(%rax)
   *y = h;
   2d4b9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
   2d4be:	8b 5c 24 38          	mov    0x38(%rsp),%ebx
   2d4c2:	89 18                	mov    %ebx,(%rax)
   *x = w;
   2d4c4:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   2d4c9:	44 89 38             	mov    %r15d,(%rax)
   return out;
   2d4cc:	e9 28 d3 ff ff       	jmp    2a7f9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d9>
   2d4d1:	31 c0                	xor    %eax,%eax
      if (ri->bits_per_channel == 16) {
   2d4d3:	41 83 3c 24 10       	cmpl   $0x10,(%r12)
   2d4d8:	0f 84 ba 00 00 00    	je     2d598 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3578>
               float a = pixel[3] / 255.0f;
   2d4de:	f3 0f 10 25 ba b5 00 	movss  0xb5ba(%rip),%xmm4        # 38aa0 <_ZL11stbi__bmask+0x320>
   2d4e5:	00 
               float ra = 1.0f / a;
   2d4e6:	f3 0f 10 1d ba b5 00 	movss  0xb5ba(%rip),%xmm3        # 38aa8 <_ZL11stbi__bmask+0x328>
   2d4ed:	00 
   2d4ee:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
   2d4f3:	e9 85 00 00 00       	jmp    2d57d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x355d>
            if (pixel[3] != 0 && pixel[3] != 255) {
   2d4f8:	0f b6 4c 82 03       	movzbl 0x3(%rdx,%rax,4),%ecx
   2d4fd:	8d 71 ff             	lea    -0x1(%rcx),%esi
   2d500:	40 80 fe fd          	cmp    $0xfd,%sil
   2d504:	77 73                	ja     2d579 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3559>
               float a = pixel[3] / 255.0f;
   2d506:	66 0f ef c0          	pxor   %xmm0,%xmm0
               float ra = 1.0f / a;
   2d50a:	0f 28 d3             	movaps %xmm3,%xmm2
               float inv_a = 255.0f * (1 - ra);
   2d50d:	0f 28 cb             	movaps %xmm3,%xmm1
               float a = pixel[3] / 255.0f;
   2d510:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
               pixel[0] = (unsigned char) (pixel[0]*ra + inv_a);
   2d514:	0f b6 0c 82          	movzbl (%rdx,%rax,4),%ecx
               float a = pixel[3] / 255.0f;
   2d518:	f3 0f 5e c4          	divss  %xmm4,%xmm0
               float ra = 1.0f / a;
   2d51c:	f3 0f 5e d0          	divss  %xmm0,%xmm2
               pixel[0] = (unsigned char) (pixel[0]*ra + inv_a);
   2d520:	66 0f ef c0          	pxor   %xmm0,%xmm0
   2d524:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
               float inv_a = 255.0f * (1 - ra);
   2d528:	f3 0f 5c ca          	subss  %xmm2,%xmm1
               pixel[0] = (unsigned char) (pixel[0]*ra + inv_a);
   2d52c:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
               float inv_a = 255.0f * (1 - ra);
   2d530:	f3 0f 59 cc          	mulss  %xmm4,%xmm1
               pixel[0] = (unsigned char) (pixel[0]*ra + inv_a);
   2d534:	f3 0f 58 c1          	addss  %xmm1,%xmm0
   2d538:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
               pixel[1] = (unsigned char) (pixel[1]*ra + inv_a);
   2d53c:	66 0f ef c0          	pxor   %xmm0,%xmm0
               pixel[0] = (unsigned char) (pixel[0]*ra + inv_a);
   2d540:	88 0c 82             	mov    %cl,(%rdx,%rax,4)
               pixel[1] = (unsigned char) (pixel[1]*ra + inv_a);
   2d543:	0f b6 4c 82 01       	movzbl 0x1(%rdx,%rax,4),%ecx
   2d548:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
   2d54c:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
   2d550:	f3 0f 58 c1          	addss  %xmm1,%xmm0
   2d554:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
               pixel[2] = (unsigned char) (pixel[2]*ra + inv_a);
   2d558:	66 0f ef c0          	pxor   %xmm0,%xmm0
               pixel[1] = (unsigned char) (pixel[1]*ra + inv_a);
   2d55c:	88 4c 82 01          	mov    %cl,0x1(%rdx,%rax,4)
               pixel[2] = (unsigned char) (pixel[2]*ra + inv_a);
   2d560:	0f b6 4c 82 02       	movzbl 0x2(%rdx,%rax,4),%ecx
   2d565:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
   2d569:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
   2d56d:	f3 0f 58 c1          	addss  %xmm1,%xmm0
   2d571:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
   2d575:	88 4c 82 02          	mov    %cl,0x2(%rdx,%rax,4)
         for (i=0; i < w*h; ++i) {
   2d579:	48 83 c0 01          	add    $0x1,%rax
   2d57d:	39 c5                	cmp    %eax,%ebp
   2d57f:	0f 8f 73 ff ff ff    	jg     2d4f8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x34d8>
   if (req_comp && req_comp != 4) {
   2d585:	f7 44 24 08 fb ff ff 	testl  $0xfffffffb,0x8(%rsp)
   2d58c:	ff 
   2d58d:	0f 85 ea fe ff ff    	jne    2d47d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x345d>
   2d593:	e9 11 ff ff ff       	jmp    2d4a9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3489>
               float a = pixel[3] / 65535.0f;
   2d598:	f3 0f 10 25 14 b5 00 	movss  0xb514(%rip),%xmm4        # 38ab4 <_ZL11stbi__bmask+0x334>
   2d59f:	00 
               float ra = 1.0f / a;
   2d5a0:	f3 0f 10 1d 00 b5 00 	movss  0xb500(%rip),%xmm3        # 38aa8 <_ZL11stbi__bmask+0x328>
   2d5a7:	00 
   2d5a8:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
   2d5ad:	e9 88 00 00 00       	jmp    2d63a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x361a>
            if (pixel[3] != 0 && pixel[3] != 65535) {
   2d5b2:	0f b7 4c c2 06       	movzwl 0x6(%rdx,%rax,8),%ecx
   2d5b7:	8d 71 ff             	lea    -0x1(%rcx),%esi
   2d5ba:	66 83 fe fd          	cmp    $0xfffd,%si
   2d5be:	77 76                	ja     2d636 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3616>
               float a = pixel[3] / 65535.0f;
   2d5c0:	66 0f ef c0          	pxor   %xmm0,%xmm0
               float ra = 1.0f / a;
   2d5c4:	0f 28 d3             	movaps %xmm3,%xmm2
               float inv_a = 65535.0f * (1 - ra);
   2d5c7:	0f 28 cb             	movaps %xmm3,%xmm1
               float a = pixel[3] / 65535.0f;
   2d5ca:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
               pixel[0] = (stbi__uint16) (pixel[0]*ra + inv_a);
   2d5ce:	0f b7 0c c2          	movzwl (%rdx,%rax,8),%ecx
               float a = pixel[3] / 65535.0f;
   2d5d2:	f3 0f 5e c4          	divss  %xmm4,%xmm0
               float ra = 1.0f / a;
   2d5d6:	f3 0f 5e d0          	divss  %xmm0,%xmm2
               pixel[0] = (stbi__uint16) (pixel[0]*ra + inv_a);
   2d5da:	66 0f ef c0          	pxor   %xmm0,%xmm0
   2d5de:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
               float inv_a = 65535.0f * (1 - ra);
   2d5e2:	f3 0f 5c ca          	subss  %xmm2,%xmm1
               pixel[0] = (stbi__uint16) (pixel[0]*ra + inv_a);
   2d5e6:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
               float inv_a = 65535.0f * (1 - ra);
   2d5ea:	f3 0f 59 cc          	mulss  %xmm4,%xmm1
               pixel[0] = (stbi__uint16) (pixel[0]*ra + inv_a);
   2d5ee:	f3 0f 58 c1          	addss  %xmm1,%xmm0
   2d5f2:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
               pixel[1] = (stbi__uint16) (pixel[1]*ra + inv_a);
   2d5f6:	66 0f ef c0          	pxor   %xmm0,%xmm0
               pixel[0] = (stbi__uint16) (pixel[0]*ra + inv_a);
   2d5fa:	66 89 0c c2          	mov    %cx,(%rdx,%rax,8)
               pixel[1] = (stbi__uint16) (pixel[1]*ra + inv_a);
   2d5fe:	0f b7 4c c2 02       	movzwl 0x2(%rdx,%rax,8),%ecx
   2d603:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
   2d607:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
   2d60b:	f3 0f 58 c1          	addss  %xmm1,%xmm0
   2d60f:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
               pixel[2] = (stbi__uint16) (pixel[2]*ra + inv_a);
   2d613:	66 0f ef c0          	pxor   %xmm0,%xmm0
               pixel[1] = (stbi__uint16) (pixel[1]*ra + inv_a);
   2d617:	66 89 4c c2 02       	mov    %cx,0x2(%rdx,%rax,8)
               pixel[2] = (stbi__uint16) (pixel[2]*ra + inv_a);
   2d61c:	0f b7 4c c2 04       	movzwl 0x4(%rdx,%rax,8),%ecx
   2d621:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
   2d625:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
   2d629:	f3 0f 58 c1          	addss  %xmm1,%xmm0
   2d62d:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
   2d631:	66 89 4c c2 04       	mov    %cx,0x4(%rdx,%rax,8)
         for (i=0; i < w*h; ++i) {
   2d636:	48 83 c0 01          	add    $0x1,%rax
   2d63a:	39 c5                	cmp    %eax,%ebp
   2d63c:	0f 8f 70 ff ff ff    	jg     2d5b2 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3592>
   if (req_comp && req_comp != 4) {
   2d642:	f7 44 24 08 fb ff ff 	testl  $0xfffffffb,0x8(%rsp)
   2d649:	ff 
   2d64a:	0f 84 59 fe ff ff    	je     2d4a9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3489>
   if (req_comp == img_n) return data;
   2d650:	44 8b 44 24 38       	mov    0x38(%rsp),%r8d
   2d655:	8b 54 24 08          	mov    0x8(%rsp),%edx
   2d659:	44 89 f9             	mov    %r15d,%ecx
   2d65c:	be 04 00 00 00       	mov    $0x4,%esi
   2d661:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2d666:	e8 c5 59 fe ff       	call   13030 <_ZL22stbi__convert_format16Ptiijj.part.0>
   2d66b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   2d670:	e9 28 fe ff ff       	jmp    2d49d <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x347d>
               stbi__uint16 *q = ((stbi__uint16 *) out) + channel;
   2d675:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2d67a:	44 89 e3             	mov    %r12d,%ebx
   2d67d:	4b 8d 2c 3f          	lea    (%r15,%r15,1),%rbp
   2d681:	49 89 d4             	mov    %rdx,%r12
               for (i = 0; i < pixelCount; i++, q += 4)
   2d684:	31 d2                	xor    %edx,%edx
   2d686:	4c 89 64 24 58       	mov    %r12,0x58(%rsp)
   2d68b:	41 89 dc             	mov    %ebx,%r12d
               stbi__uint16 *q = ((stbi__uint16 *) out) + channel;
   2d68e:	48 01 c5             	add    %rax,%rbp
               for (i = 0; i < pixelCount; i++, q += 4)
   2d691:	48 89 d3             	mov    %rdx,%rbx
   2d694:	eb 11                	jmp    2d6a7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3687>
                  *q = (stbi__uint16) stbi__get16be(s);
   2d696:	4c 89 ef             	mov    %r13,%rdi
   2d699:	e8 12 0c ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2d69e:	66 89 44 dd 00       	mov    %ax,0x0(%rbp,%rbx,8)
               for (i = 0; i < pixelCount; i++, q += 4)
   2d6a3:	48 83 c3 01          	add    $0x1,%rbx
   2d6a7:	41 39 de             	cmp    %ebx,%r14d
   2d6aa:	7f ea                	jg     2d696 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3676>
   2d6ac:	e9 94 fd ff ff       	jmp    2d445 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3425>
   2d6b1:	44 89 e3             	mov    %r12d,%ebx
   2d6b4:	44 8b 7c 24 40       	mov    0x40(%rsp),%r15d
   2d6b9:	44 89 f5             	mov    %r14d,%ebp
   2d6bc:	49 89 d4             	mov    %rdx,%r12
   2d6bf:	e9 9f fd ff ff       	jmp    2d463 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3443>
   2d6c4:	8b 54 24 48          	mov    0x48(%rsp),%edx
   2d6c8:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
      for (channel = 0; channel < 4; channel++) {
   2d6cd:	49 83 c7 01          	add    $0x1,%r15
   2d6d1:	49 83 ff 04          	cmp    $0x4,%r15
   2d6d5:	0f 85 84 fa ff ff    	jne    2d15f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x313f>
   2d6db:	44 89 f3             	mov    %r14d,%ebx
   2d6de:	41 89 d7             	mov    %edx,%r15d
   2d6e1:	49 89 cc             	mov    %rcx,%r12
   2d6e4:	e9 7a fd ff ff       	jmp    2d463 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3443>
   2d6e9:	31 f6                	xor    %esi,%esi
   2d6eb:	eb 11                	jmp    2d6fe <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x36de>
               *p = (channel == 3 ? 255 : 0);
   2d6ed:	41 83 f8 03          	cmp    $0x3,%r8d
   2d6f1:	0f 94 c0             	sete   %al
   2d6f4:	f7 d8                	neg    %eax
   2d6f6:	41 88 04 b4          	mov    %al,(%r12,%rsi,4)
            for (i = 0; i < pixelCount; i++, p += 4)
   2d6fa:	48 83 c6 01          	add    $0x1,%rsi
   2d6fe:	39 f5                	cmp    %esi,%ebp
   2d700:	7f eb                	jg     2d6ed <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x36cd>
   2d702:	eb c9                	jmp    2d6cd <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x36ad>
   stbi__g_failure_reason = str;
   2d704:	48 8d 05 d6 a3 00 00 	lea    0xa3d6(%rip),%rax        # 37ae1 <_ZSt19piecewise_construct+0x19a>
   2d70b:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2d712:	ff ff 
      return stbi__errpuc("bad compression", "PSD has an unknown compression format");
   2d714:	e9 d7 d0 ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
      s->img_buffer = s->img_buffer_end;
   2d719:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   2d720:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
      for (channel = 0; channel < 4; channel++) {
   2d727:	e9 25 fa ff ff       	jmp    2d151 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3131>
               STBI_FREE(out);
   2d72c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2d731:	e8 6a 8f fd ff       	call   66a0 <free@plt>
   stbi__g_failure_reason = str;
   2d736:	48 8d 05 b9 a3 00 00 	lea    0xa3b9(%rip),%rax        # 37af6 <_ZSt19piecewise_construct+0x1af>
   2d73d:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2d744:	ff ff 
               return stbi__errpuc("corrupt", "bad RLE data");
   2d746:	e9 a5 d0 ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
         len++;
   2d74b:	83 c2 01             	add    $0x1,%edx
   2d74e:	41 89 d0             	mov    %edx,%r8d
         if (len > nleft) return 0; // corrupt data
   2d751:	39 fa                	cmp    %edi,%edx
   2d753:	7f d7                	jg     2d72c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x370c>
   2d755:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   2d75c:	e9 70 fa ff ff       	jmp    2d1d1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x31b1>
      stbi__refill_buffer(s);
   2d761:	48 89 ef             	mov    %rbp,%rdi
   2d764:	e8 17 3b fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2d769:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
   2d770:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2d774:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
   2d77b:	0f b6 00             	movzbl (%rax),%eax
   2d77e:	e9 d7 f7 ff ff       	jmp    2cf5a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f3a>
      stbi__refill_buffer(s);
   2d783:	48 89 ef             	mov    %rbp,%rdi
   2d786:	e8 f5 3a fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2d78b:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   2d792:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2d796:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
   2d79d:	0f b6 12             	movzbl (%rdx),%edx
   2d7a0:	e9 8b f7 ff ff       	jmp    2cf30 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f10>
      return *s->img_buffer++;
   2d7a5:	48 8d 48 01          	lea    0x1(%rax),%rcx
   2d7a9:	48 89 8d c0 00 00 00 	mov    %rcx,0xc0(%rbp)
   2d7b0:	0f b6 10             	movzbl (%rax),%edx
   2d7b3:	48 89 c8             	mov    %rcx,%rax
   2d7b6:	e9 75 f7 ff ff       	jmp    2cf30 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2f10>
      stbi__refill_buffer(s);
   2d7bb:	48 89 ef             	mov    %rbp,%rdi
   2d7be:	e8 bd 3a fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2d7c3:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   2d7ca:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2d7ce:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
   2d7d5:	0f b6 12             	movzbl (%rdx),%edx
   2d7d8:	e9 29 f7 ff ff       	jmp    2cf06 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ee6>
      return *s->img_buffer++;
   2d7dd:	48 8d 48 01          	lea    0x1(%rax),%rcx
   2d7e1:	48 89 8d c0 00 00 00 	mov    %rcx,0xc0(%rbp)
   2d7e8:	0f b6 10             	movzbl (%rax),%edx
   2d7eb:	48 89 c8             	mov    %rcx,%rax
   2d7ee:	e9 13 f7 ff ff       	jmp    2cf06 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ee6>
      stbi__refill_buffer(s);
   2d7f3:	48 89 ef             	mov    %rbp,%rdi
   2d7f6:	e8 85 3a fe ff       	call   11280 <_ZL19stbi__refill_bufferP13stbi__context>
      return *s->img_buffer++;
   2d7fb:	48 8b 95 c0 00 00 00 	mov    0xc0(%rbp),%rdx
   2d802:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2d806:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
   2d80d:	0f b6 12             	movzbl (%rdx),%edx
   2d810:	e9 c7 f6 ff ff       	jmp    2cedc <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ebc>
      return *s->img_buffer++;
   2d815:	48 8d 48 01          	lea    0x1(%rax),%rcx
   2d819:	48 89 8d c0 00 00 00 	mov    %rcx,0xc0(%rbp)
   2d820:	0f b6 10             	movzbl (%rax),%edx
   2d823:	48 89 c8             	mov    %rcx,%rax
   2d826:	e9 b1 f6 ff ff       	jmp    2cedc <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2ebc>
      s->img_buffer_end = s->buffer_start + n;
   2d82b:	48 98                	cltq
   2d82d:	48 01 d8             	add    %rbx,%rax
   2d830:	e9 f9 ee ff ff       	jmp    2c72e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x270e>
            STBI_FREE(tga_data);
   2d835:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2d83a:	e8 61 8e fd ff       	call   66a0 <free@plt>
            return stbi__errpuc("outofmem", "Out of memory");
   2d83f:	48 8d 05 ef a1 00 00 	lea    0xa1ef(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   2d846:	e9 c7 d9 ff ff       	jmp    2b212 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11f2>
      if ( tga_indexed)
   2d84b:	83 7c 24 38 00       	cmpl   $0x0,0x38(%rsp)
   2d850:	0f 84 58 f3 ff ff    	je     2cbae <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2b8e>
         if (tga_palette_len == 0) {  /* you have to have at least one entry! */
   2d856:	83 7c 24 40 00       	cmpl   $0x0,0x40(%rsp)
   2d85b:	0f 84 6d 01 00 00    	je     2d9ce <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x39ae>
   if (n == 0) return;  // already there!
   2d861:	83 7c 24 60 00       	cmpl   $0x0,0x60(%rsp)
   2d866:	74 12                	je     2d87a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x385a>
   if (n < 0) {
   2d868:	0f 88 5f 02 00 00    	js     2dacd <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3aad>
   2d86e:	8b 74 24 60          	mov    0x60(%rsp),%esi
   2d872:	4c 89 ef             	mov    %r13,%rdi
   2d875:	e8 96 52 fe ff       	call   12b10 <_ZL10stbi__skipP13stbi__contexti.part.0>
   if (a < 0 || b < 0) return 0;
   2d87a:	83 7c 24 40 00       	cmpl   $0x0,0x40(%rsp)
   2d87f:	78 b4                	js     2d835 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3815>
   return a <= INT_MAX/b;
   2d881:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2d886:	31 d2                	xor    %edx,%edx
   return stbi__mul2sizes_valid(a, b) && stbi__addsizes_valid(a*b, add);
   2d888:	8b 74 24 40          	mov    0x40(%rsp),%esi
   return a <= INT_MAX/b;
   2d88c:	41 f7 fe             	idiv   %r14d
   return stbi__mul2sizes_valid(a, b) && stbi__addsizes_valid(a*b, add);
   2d88f:	39 c6                	cmp    %eax,%esi
   2d891:	7f a2                	jg     2d835 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3815>
   2d893:	41 0f af f6          	imul   %r14d,%esi
   2d897:	48 63 fe             	movslq %esi,%rdi
   return stbi__malloc(a*b + add);
   2d89a:	89 7c 24 30          	mov    %edi,0x30(%rsp)
    return STBI_MALLOC(size);
   2d89e:	e8 bd 8e fd ff       	call   6760 <malloc@plt>
   2d8a3:	49 89 c4             	mov    %rax,%r12
         if (!tga_palette) {
   2d8a6:	48 85 c0             	test   %rax,%rax
   2d8a9:	74 8a                	je     2d835 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3815>
         if (tga_rgb16) {
   2d8ab:	45 85 ff             	test   %r15d,%r15d
   2d8ae:	8b 54 24 30          	mov    0x30(%rsp),%edx
   2d8b2:	0f 84 2c 01 00 00    	je     2d9e4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x39c4>
   2d8b8:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
   2d8bd:	4d 63 c6             	movslq %r14d,%r8
            for (i=0; i < tga_palette_len; ++i) {
   2d8c0:	31 c9                	xor    %ecx,%ecx
   2d8c2:	4c 89 ee             	mov    %r13,%rsi
   2d8c5:	44 89 7c 24 30       	mov    %r15d,0x30(%rsp)
   2d8ca:	41 89 ed             	mov    %ebp,%r13d
   2d8cd:	45 89 f7             	mov    %r14d,%r15d
   2d8d0:	89 cd                	mov    %ecx,%ebp
   2d8d2:	41 89 de             	mov    %ebx,%r14d
   2d8d5:	4d 89 c4             	mov    %r8,%r12
   2d8d8:	48 89 c3             	mov    %rax,%rbx
   stbi__uint16 px = (stbi__uint16)stbi__get16le(s);
   2d8db:	48 89 f7             	mov    %rsi,%rdi
   2d8de:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
            for (i=0; i < tga_palette_len; ++i) {
   2d8e3:	83 c5 01             	add    $0x1,%ebp
   stbi__uint16 px = (stbi__uint16)stbi__get16le(s);
   2d8e6:	e8 f5 0a ff ff       	call   1e3e0 <_ZL13stbi__get16leP13stbi__context>
            for (i=0; i < tga_palette_len; ++i) {
   2d8eb:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
   int r = (px >> 10) & fiveBitMask;
   2d8f0:	41 89 c0             	mov    %eax,%r8d
   stbi__uint16 px = (stbi__uint16)stbi__get16le(s);
   2d8f3:	89 c7                	mov    %eax,%edi
   int r = (px >> 10) & fiveBitMask;
   2d8f5:	66 41 c1 e8 0a       	shr    $0xa,%r8w
   2d8fa:	41 83 e0 1f          	and    $0x1f,%r8d
   out[0] = (stbi_uc)((r * 255)/31);
   2d8fe:	44 89 c0             	mov    %r8d,%eax
   2d901:	c1 e0 08             	shl    $0x8,%eax
   2d904:	44 29 c0             	sub    %r8d,%eax
   2d907:	41 89 c0             	mov    %eax,%r8d
   2d90a:	4d 69 c0 85 10 42 08 	imul   $0x8421085,%r8,%r8
   2d911:	49 c1 e8 20          	shr    $0x20,%r8
   2d915:	44 29 c0             	sub    %r8d,%eax
   2d918:	d1 e8                	shr    %eax
   2d91a:	44 01 c0             	add    %r8d,%eax
   int g = (px >> 5) & fiveBitMask;
   2d91d:	41 89 f8             	mov    %edi,%r8d
   int b = px & fiveBitMask;
   2d920:	83 e7 1f             	and    $0x1f,%edi
   int g = (px >> 5) & fiveBitMask;
   2d923:	66 41 c1 e8 05       	shr    $0x5,%r8w
   out[0] = (stbi_uc)((r * 255)/31);
   2d928:	c1 e8 04             	shr    $0x4,%eax
   int g = (px >> 5) & fiveBitMask;
   2d92b:	41 83 e0 1f          	and    $0x1f,%r8d
   out[0] = (stbi_uc)((r * 255)/31);
   2d92f:	88 03                	mov    %al,(%rbx)
   out[1] = (stbi_uc)((g * 255)/31);
   2d931:	44 89 c0             	mov    %r8d,%eax
   2d934:	c1 e0 08             	shl    $0x8,%eax
   2d937:	44 29 c0             	sub    %r8d,%eax
   2d93a:	41 89 c0             	mov    %eax,%r8d
   2d93d:	4d 69 c0 85 10 42 08 	imul   $0x8421085,%r8,%r8
   2d944:	49 c1 e8 20          	shr    $0x20,%r8
   2d948:	44 29 c0             	sub    %r8d,%eax
   2d94b:	d1 e8                	shr    %eax
   2d94d:	44 01 c0             	add    %r8d,%eax
   2d950:	c1 e8 04             	shr    $0x4,%eax
   2d953:	88 43 01             	mov    %al,0x1(%rbx)
   out[2] = (stbi_uc)((b * 255)/31);
   2d956:	89 f8                	mov    %edi,%eax
   2d958:	c1 e0 08             	shl    $0x8,%eax
   2d95b:	29 f8                	sub    %edi,%eax
   2d95d:	89 c7                	mov    %eax,%edi
   2d95f:	48 69 ff 85 10 42 08 	imul   $0x8421085,%rdi,%rdi
   2d966:	48 c1 ef 20          	shr    $0x20,%rdi
   2d96a:	29 f8                	sub    %edi,%eax
   2d96c:	d1 e8                	shr    %eax
   2d96e:	01 f8                	add    %edi,%eax
   2d970:	c1 e8 04             	shr    $0x4,%eax
   2d973:	88 43 02             	mov    %al,0x2(%rbx)
               pal_entry += tga_comp;
   2d976:	4c 01 e3             	add    %r12,%rbx
            for (i=0; i < tga_palette_len; ++i) {
   2d979:	39 6c 24 40          	cmp    %ebp,0x40(%rsp)
   2d97d:	0f 85 58 ff ff ff    	jne    2d8db <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x38bb>
   2d983:	44 89 f3             	mov    %r14d,%ebx
   2d986:	4c 8b 64 24 58       	mov    0x58(%rsp),%r12
   2d98b:	45 89 fe             	mov    %r15d,%r14d
   2d98e:	44 8b 7c 24 30       	mov    0x30(%rsp),%r15d
   2d993:	44 89 ed             	mov    %r13d,%ebp
   2d996:	49 89 f5             	mov    %rsi,%r13
      for (i=0; i < tga_width * tga_height; ++i)
   2d999:	83 7c 24 10 00       	cmpl   $0x0,0x10(%rsp)
   2d99e:	0f 85 18 f2 ff ff    	jne    2cbbc <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2b9c>
      if ( tga_inverted )
   2d9a4:	80 7c 24 18 00       	cmpb   $0x0,0x18(%rsp)
   2d9a9:	0f 85 31 01 00 00    	jne    2dae0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ac0>
         for (j = 0; j*2 < tga_height; ++j)
   2d9af:	85 db                	test   %ebx,%ebx
   2d9b1:	0f 8e 29 01 00 00    	jle    2dae0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ac0>
            for (i = tga_width * tga_comp; i > 0; --i)
   2d9b7:	89 e9                	mov    %ebp,%ecx
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
   2d9b9:	44 8d 6b ff          	lea    -0x1(%rbx),%r13d
            for (i = tga_width * tga_comp; i > 0; --i)
   2d9bd:	41 0f af ce          	imul   %r14d,%ecx
   2d9c1:	85 c9                	test   %ecx,%ecx
   2d9c3:	0f 85 f1 ef ff ff    	jne    2c9ba <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x299a>
   2d9c9:	e9 b2 f0 ff ff       	jmp    2ca80 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a60>
            STBI_FREE(tga_data);
   2d9ce:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2d9d3:	e8 c8 8c fd ff       	call   66a0 <free@plt>
            return stbi__errpuc("bad palette", "Corrupt TGA");
   2d9d8:	48 8d 05 e3 a4 00 00 	lea    0xa4e3(%rip),%rax        # 37ec2 <_ZSt19piecewise_construct+0x57b>
   2d9df:	e9 2e d8 ff ff       	jmp    2b212 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11f2>
         } else if (!stbi__getn(s, tga_palette, tga_palette_len * tga_comp)) {
   2d9e4:	48 89 c6             	mov    %rax,%rsi
   2d9e7:	4c 89 ef             	mov    %r13,%rdi
   2d9ea:	e8 a1 41 fe ff       	call   11b90 <_ZL10stbi__getnP13stbi__contextPhi>
   2d9ef:	85 c0                	test   %eax,%eax
   2d9f1:	75 a6                	jne    2d999 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3979>
               STBI_FREE(tga_data);
   2d9f3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2d9f8:	e8 a3 8c fd ff       	call   66a0 <free@plt>
               STBI_FREE(tga_palette);
   2d9fd:	4c 89 e7             	mov    %r12,%rdi
   2da00:	e8 9b 8c fd ff       	call   66a0 <free@plt>
               return stbi__errpuc("bad palette", "Corrupt TGA");
   2da05:	48 8d 05 b6 a4 00 00 	lea    0xa4b6(%rip),%rax        # 37ec2 <_ZSt19piecewise_construct+0x57b>
   2da0c:	e9 01 d8 ff ff       	jmp    2b212 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x11f2>
      if ( tga_inverted )
   2da11:	80 7c 24 18 00       	cmpb   $0x0,0x18(%rsp)
   2da16:	0f 85 7b f0 ff ff    	jne    2ca97 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a77>
         for (j = 0; j*2 < tga_height; ++j)
   2da1c:	85 db                	test   %ebx,%ebx
   2da1e:	0f 8e 73 f0 ff ff    	jle    2ca97 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a77>
            for (i = tga_width * tga_comp; i > 0; --i)
   2da24:	89 e9                	mov    %ebp,%ecx
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
   2da26:	44 8d 6b ff          	lea    -0x1(%rbx),%r13d
            for (i = tga_width * tga_comp; i > 0; --i)
   2da2a:	41 0f af ce          	imul   %r14d,%ecx
   2da2e:	85 c9                	test   %ecx,%ecx
   2da30:	0f 85 84 ef ff ff    	jne    2c9ba <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x299a>
   2da36:	e9 5c f0 ff ff       	jmp    2ca97 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a77>
      for (i=0; i < tga_width * tga_height; ++i)
   2da3b:	83 7c 24 10 00       	cmpl   $0x0,0x10(%rsp)
   2da40:	0f 84 51 f0 ff ff    	je     2ca97 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a77>
               pal_entry += tga_comp;
   2da46:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2da4b:	8b 4c 24 68          	mov    0x68(%rsp),%ecx
   2da4f:	49 63 d6             	movslq %r14d,%rdx
         unsigned char temp = tga_pixel[0];
   2da52:	0f b6 30             	movzbl (%rax),%esi
         tga_pixel[0] = tga_pixel[2];
   2da55:	0f b6 78 02          	movzbl 0x2(%rax),%edi
      for (i=0; i < tga_width * tga_height; ++i)
   2da59:	83 c1 01             	add    $0x1,%ecx
         tga_pixel[2] = temp;
   2da5c:	40 88 70 02          	mov    %sil,0x2(%rax)
      for (i=0; i < tga_width * tga_height; ++i)
   2da60:	8b 74 24 10          	mov    0x10(%rsp),%esi
         tga_pixel[0] = tga_pixel[2];
   2da64:	40 88 38             	mov    %dil,(%rax)
         tga_pixel += tga_comp;
   2da67:	48 01 d0             	add    %rdx,%rax
      for (i=0; i < tga_width * tga_height; ++i)
   2da6a:	39 f1                	cmp    %esi,%ecx
   2da6c:	75 e4                	jne    2da52 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3a32>
   2da6e:	e9 24 f0 ff ff       	jmp    2ca97 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a77>
            for (i = tga_width * tga_comp; i > 0; --i)
   2da73:	8b 7c 24 18          	mov    0x18(%rsp),%edi
   2da77:	e9 23 f3 ff ff       	jmp    2cd9f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2d7f>
      s->img_buffer_end = s->buffer_start + n;
   2da7c:	48 98                	cltq
   2da7e:	48 01 c3             	add    %rax,%rbx
   2da81:	e9 70 f5 ff ff       	jmp    2cff6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2fd6>
         memcpy(buffer, s->img_buffer, blen);
   2da86:	49 63 d0             	movslq %r8d,%rdx
   2da89:	4c 89 e7             	mov    %r12,%rdi
   2da8c:	4c 89 44 24 48       	mov    %r8,0x48(%rsp)
   2da91:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
   2da96:	e8 75 89 fd ff       	call   6410 <memcpy@plt>
         count = (s->io.read)(s->io_user_data, (char*) buffer + blen, n - blen);
   2da9b:	8b 44 24 18          	mov    0x18(%rsp),%eax
   2da9f:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
   2daa4:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
   2daa9:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2daad:	44 29 c0             	sub    %r8d,%eax
   2dab0:	49 8d 34 14          	lea    (%r12,%rdx,1),%rsi
   2dab4:	89 c2                	mov    %eax,%edx
   2dab6:	41 ff 55 10          	call   *0x10(%r13)
         s->img_buffer = s->img_buffer_end;
   2daba:	49 8b b5 c8 00 00 00 	mov    0xc8(%r13),%rsi
   2dac1:	49 89 b5 c0 00 00 00 	mov    %rsi,0xc0(%r13)
         return res;
   2dac8:	e9 58 ea ff ff       	jmp    2c525 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2505>
      s->img_buffer = s->img_buffer_end;
   2dacd:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   2dad4:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
      return;
   2dadb:	e9 9a fd ff ff       	jmp    2d87a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x385a>
         STBI_FREE( tga_palette );
   2dae0:	4c 89 e7             	mov    %r12,%rdi
   2dae3:	e8 b8 8b fd ff       	call   66a0 <free@plt>
   if (tga_comp >= 3 && !tga_rgb16)
   2dae8:	e9 aa ef ff ff       	jmp    2ca97 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a77>
   if (output == NULL) { STBI_FREE(data); return stbi__errpuc("outofmem", "Out of memory"); }
   2daed:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
   2daf2:	e8 a9 8b fd ff       	call   66a0 <free@plt>
   stbi__g_failure_reason = str;
   2daf7:	48 8d 05 37 9f 00 00 	lea    0x9f37(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   2dafe:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2db05:	ff ff 
   if (output == NULL) { STBI_FREE(data); return stbi__errpuc("outofmem", "Out of memory"); }
   2db07:	e9 e4 cc ff ff       	jmp    2a7f0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x7d0>
   stbi__free_jpeg_components(j, j->s->img_n, 0);
   2db0c:	44 8b 5c 24 40       	mov    0x40(%rsp),%r11d
   2db11:	4d 89 f2             	mov    %r14,%r10
   2db14:	e9 a0 d1 ff ff       	jmp    2acb9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc99>
   *comp = (act_comp & 0x10 ? 4 : 3); // has alpha channel?
   2db19:	48 89 e8             	mov    %rbp,%rax
   2db1c:	44 89 ed             	mov    %r13d,%ebp
   2db1f:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
   2db24:	48 63 54 24 48       	movslq 0x48(%rsp),%rdx
   2db29:	49 89 c5             	mov    %rax,%r13
   2db2c:	8b 44 24 40          	mov    0x40(%rsp),%eax
   2db30:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
   2db34:	83 e0 10             	and    $0x10,%eax
   2db37:	83 f8 01             	cmp    $0x1,%eax
   2db3a:	19 c0                	sbb    %eax,%eax
   for(y=0; y<height; ++y) {
   2db3c:	45 31 f6             	xor    %r14d,%r14d
   *comp = (act_comp & 0x10 ? 4 : 3); // has alpha channel?
   2db3f:	83 c0 04             	add    $0x4,%eax
   2db42:	89 03                	mov    %eax,(%rbx)
   for(y=0; y<height; ++y) {
   2db44:	8b 44 24 38          	mov    0x38(%rsp),%eax
   2db48:	48 8d 9c 24 c0 00 00 	lea    0xc0(%rsp),%rbx
   2db4f:	00 
   2db50:	48 89 5c 24 50       	mov    %rbx,0x50(%rsp)
   2db55:	48 8d 9c 14 c3 00 00 	lea    0xc3(%rsp,%rdx,1),%rbx
   2db5c:	00 
   2db5d:	c1 e0 02             	shl    $0x2,%eax
   2db60:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
   2db65:	48 63 f0             	movslq %eax,%rsi
   2db68:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2db6d:	48 89 f3             	mov    %rsi,%rbx
   2db70:	44 39 f5             	cmp    %r14d,%ebp
   2db73:	0f 8e 01 d6 ff ff    	jle    2b17a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x115a>
         stbi_uc *dest = result+y*width*4;
   2db79:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
   2db7e:	89 6c 24 40          	mov    %ebp,0x40(%rsp)
   2db82:	44 89 74 24 60       	mov    %r14d,0x60(%rsp)
   2db87:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
   2db8c:	4d 89 fe             	mov    %r15,%r14
   2db8f:	48 89 c3             	mov    %rax,%rbx
   2db92:	4d 89 ef             	mov    %r13,%r15
         switch (packet->type) {
   2db95:	41 0f b6 46 01       	movzbl 0x1(%r14),%eax
   2db9a:	3c 01                	cmp    $0x1,%al
   2db9c:	0f 84 42 02 00 00    	je     2dde4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3dc4>
   2dba2:	3c 02                	cmp    $0x2,%al
   2dba4:	74 7f                	je     2dc25 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3c05>
   2dba6:	84 c0                	test   %al,%al
   2dba8:	74 46                	je     2dbf0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3bd0>
   stbi__g_failure_reason = str;
   2dbaa:	48 8d 05 06 a3 00 00 	lea    0xa306(%rip),%rax        # 37eb7 <_ZSt19piecewise_construct+0x570>
   2dbb1:	8b 6c 24 40          	mov    0x40(%rsp),%ebp
   2dbb5:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2dbbc:	ff ff 
   return 0;
   2dbbe:	e9 a6 d5 ff ff       	jmp    2b169 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1149>
   2dbc3:	8b 6c 24 38          	mov    0x38(%rsp),%ebp
   2dbc7:	e9 bc ee ff ff       	jmp    2ca88 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2a68>
      case 32: return bits_per_pixel/8;
   2dbcc:	44 8b 74 24 48       	mov    0x48(%rsp),%r14d
   2dbd1:	45 31 ff             	xor    %r15d,%r15d
   2dbd4:	41 c1 fe 03          	sar    $0x3,%r14d
   2dbd8:	e9 5b e8 ff ff       	jmp    2c438 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2418>
   if (is_rgb16) *is_rgb16 = 0;
   2dbdd:	45 31 ff             	xor    %r15d,%r15d
   2dbe0:	83 f8 03             	cmp    $0x3,%eax
   2dbe3:	41 0f 95 c7          	setne  %r15b
   2dbe7:	45 8d 77 02          	lea    0x2(%r15),%r14d
   2dbeb:	e9 48 e8 ff ff       	jmp    2c438 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2418>
         switch (packet->type) {
   2dbf0:	45 31 e4             	xor    %r12d,%r12d
   2dbf3:	48 89 dd             	mov    %rbx,%rbp
   2dbf6:	eb 21                	jmp    2dc19 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3bf9>
                  if (!stbi__readval(s,packet->channel,dest))
   2dbf8:	41 0f b6 76 02       	movzbl 0x2(%r14),%esi
   2dbfd:	48 89 ea             	mov    %rbp,%rdx
   2dc00:	4c 89 ff             	mov    %r15,%rdi
   2dc03:	e8 38 df fe ff       	call   1bb40 <_ZL13stbi__readvalP13stbi__contextiPh>
   2dc08:	48 85 c0             	test   %rax,%rax
   2dc0b:	0f 84 89 01 00 00    	je     2dd9a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d7a>
               for(x=0;x<width;++x, dest+=4)
   2dc11:	41 83 c4 01          	add    $0x1,%r12d
   2dc15:	48 83 c5 04          	add    $0x4,%rbp
   2dc19:	44 39 64 24 38       	cmp    %r12d,0x38(%rsp)
   2dc1e:	7f d8                	jg     2dbf8 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3bd8>
   2dc20:	e9 84 01 00 00       	jmp    2dda9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d89>
         switch (packet->type) {
   2dc25:	8b 6c 24 38          	mov    0x38(%rsp),%ebp
   2dc29:	4d 89 fd             	mov    %r15,%r13
   2dc2c:	49 89 dc             	mov    %rbx,%r12
   2dc2f:	49 89 df             	mov    %rbx,%r15
               while (left>0) {
   2dc32:	85 ed                	test   %ebp,%ebp
   2dc34:	0f 8e 69 01 00 00    	jle    2dda3 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d83>
                  int count = stbi__get8(s), i;
   2dc3a:	4c 89 ef             	mov    %r13,%rdi
   2dc3d:	e8 5e de fe ff       	call   1baa0 <_ZL10stbi__get8P13stbi__context>
   if (s->io.read) {
   2dc42:	49 83 7d 10 00       	cmpq   $0x0,0x10(%r13)
                  int count = stbi__get8(s), i;
   2dc47:	0f b6 f0             	movzbl %al,%esi
   2dc4a:	48 89 f2             	mov    %rsi,%rdx
   if (s->io.read) {
   2dc4d:	74 29                	je     2dc78 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3c58>
   2dc4f:	89 74 24 70          	mov    %esi,0x70(%rsp)
      if (!(s->io.eof)(s->io_user_data)) return 0;
   2dc53:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2dc57:	40 88 74 24 48       	mov    %sil,0x48(%rsp)
   2dc5c:	41 ff 55 20          	call   *0x20(%r13)
   2dc60:	0f b6 54 24 48       	movzbl 0x48(%rsp),%edx
   2dc65:	8b 74 24 70          	mov    0x70(%rsp),%esi
   2dc69:	85 c0                	test   %eax,%eax
   2dc6b:	74 1f                	je     2dc8c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3c6c>
      if (s->read_from_callbacks == 0) return 1;
   2dc6d:	41 83 7d 30 00       	cmpl   $0x0,0x30(%r13)
   2dc72:	0f 84 63 01 00 00    	je     2dddb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3dbb>
                  if (stbi__at_eof(s))  return stbi__errpuc("bad file","file too short (mixed read count)");
   2dc78:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   2dc7f:	49 39 85 c0 00 00 00 	cmp    %rax,0xc0(%r13)
   2dc86:	0f 83 4f 01 00 00    	jae    2dddb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3dbb>
                  if (count >= 128) { // Repeated
   2dc8c:	83 fe 7f             	cmp    $0x7f,%esi
   2dc8f:	0f 8e ca 00 00 00    	jle    2dd5f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d3f>
                        count -= 127;
   2dc95:	8d 5e 81             	lea    -0x7f(%rsi),%ebx
                     if (count==128)
   2dc98:	81 fe 80 00 00 00    	cmp    $0x80,%esi
   2dc9e:	0f 84 ac 00 00 00    	je     2dd50 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d30>
                     if (count > left)
   2dca4:	39 dd                	cmp    %ebx,%ebp
   2dca6:	0f 8c 2f 01 00 00    	jl     2dddb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3dbb>
                     if (!stbi__readval(s,packet->channel,value))
   2dcac:	41 0f b6 76 02       	movzbl 0x2(%r14),%esi
   2dcb1:	48 8d 94 24 a0 00 00 	lea    0xa0(%rsp),%rdx
   2dcb8:	00 
   2dcb9:	4c 89 ef             	mov    %r13,%rdi
   2dcbc:	40 88 74 24 48       	mov    %sil,0x48(%rsp)
   2dcc1:	e8 7a de fe ff       	call   1bb40 <_ZL13stbi__readvalP13stbi__contextiPh>
   2dcc6:	48 85 c0             	test   %rax,%rax
   2dcc9:	0f 84 cb 00 00 00    	je     2dd9a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d7a>
   2dccf:	44 0f b6 44 24 48    	movzbl 0x48(%rsp),%r8d
   2dcd5:	31 c0                	xor    %eax,%eax
   2dcd7:	44 89 c7             	mov    %r8d,%edi
   2dcda:	44 89 c6             	mov    %r8d,%esi
   2dcdd:	44 89 c2             	mov    %r8d,%edx
   2dce0:	83 e7 40             	and    $0x40,%edi
   2dce3:	83 e6 20             	and    $0x20,%esi
   2dce6:	83 e2 10             	and    $0x10,%edx
   2dce9:	eb 4a                	jmp    2dd35 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d15>
      if (channel&mask)
   2dceb:	45 84 c0             	test   %r8b,%r8b
   2dcee:	79 0c                	jns    2dcfc <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3cdc>
         dest[i]=src[i];
   2dcf0:	0f b6 8c 24 a0 00 00 	movzbl 0xa0(%rsp),%ecx
   2dcf7:	00 
   2dcf8:	41 88 0c 84          	mov    %cl,(%r12,%rax,4)
      if (channel&mask)
   2dcfc:	40 84 ff             	test   %dil,%dil
   2dcff:	74 0d                	je     2dd0e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3cee>
         dest[i]=src[i];
   2dd01:	0f b6 8c 24 a1 00 00 	movzbl 0xa1(%rsp),%ecx
   2dd08:	00 
   2dd09:	41 88 4c 84 01       	mov    %cl,0x1(%r12,%rax,4)
      if (channel&mask)
   2dd0e:	40 84 f6             	test   %sil,%sil
   2dd11:	74 0d                	je     2dd20 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d00>
         dest[i]=src[i];
   2dd13:	0f b6 8c 24 a2 00 00 	movzbl 0xa2(%rsp),%ecx
   2dd1a:	00 
   2dd1b:	41 88 4c 84 02       	mov    %cl,0x2(%r12,%rax,4)
      if (channel&mask)
   2dd20:	84 d2                	test   %dl,%dl
   2dd22:	74 0d                	je     2dd31 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d11>
         dest[i]=src[i];
   2dd24:	0f b6 8c 24 a3 00 00 	movzbl 0xa3(%rsp),%ecx
   2dd2b:	00 
   2dd2c:	41 88 4c 84 03       	mov    %cl,0x3(%r12,%rax,4)
                     for(i=0;i<count;++i, dest += 4)
   2dd31:	48 83 c0 01          	add    $0x1,%rax
   2dd35:	39 c3                	cmp    %eax,%ebx
   2dd37:	7f b2                	jg     2dceb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ccb>
   2dd39:	31 c0                	xor    %eax,%eax
   2dd3b:	85 db                	test   %ebx,%ebx
   2dd3d:	0f 49 c3             	cmovns %ebx,%eax
   2dd40:	48 98                	cltq
   2dd42:	4d 8d 04 84          	lea    (%r12,%rax,4),%r8
                  left-=count;
   2dd46:	29 dd                	sub    %ebx,%ebp
   2dd48:	4d 89 c4             	mov    %r8,%r12
   2dd4b:	e9 e2 fe ff ff       	jmp    2dc32 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3c12>
                        count = stbi__get16be(s);
   2dd50:	4c 89 ef             	mov    %r13,%rdi
   2dd53:	e8 58 05 ff ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   2dd58:	89 c3                	mov    %eax,%ebx
   2dd5a:	e9 45 ff ff ff       	jmp    2dca4 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3c84>
                     ++count;
   2dd5f:	8d 5e 01             	lea    0x1(%rsi),%ebx
                     if (count>left) return stbi__errpuc("bad file","scanline overrun");
   2dd62:	39 dd                	cmp    %ebx,%ebp
   2dd64:	7c 75                	jl     2dddb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3dbb>
   2dd66:	4d 8d 44 94 04       	lea    0x4(%r12,%rdx,4),%r8
   2dd6b:	4c 89 7c 24 48       	mov    %r15,0x48(%rsp)
   2dd70:	41 89 df             	mov    %ebx,%r15d
   2dd73:	4c 89 c3             	mov    %r8,%rbx
   2dd76:	eb 0d                	jmp    2dd85 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d65>
                     for(i=0;i<count;++i, dest+=4)
   2dd78:	49 83 c4 04          	add    $0x4,%r12
   2dd7c:	49 39 dc             	cmp    %rbx,%r12
   2dd7f:	0f 84 f5 03 00 00    	je     2e17a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x415a>
                        if (!stbi__readval(s,packet->channel,dest))
   2dd85:	41 0f b6 76 02       	movzbl 0x2(%r14),%esi
   2dd8a:	4c 89 e2             	mov    %r12,%rdx
   2dd8d:	4c 89 ef             	mov    %r13,%rdi
   2dd90:	e8 ab dd fe ff       	call   1bb40 <_ZL13stbi__readvalP13stbi__contextiPh>
   2dd95:	48 85 c0             	test   %rax,%rax
   2dd98:	75 de                	jne    2dd78 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d58>
   2dd9a:	8b 6c 24 40          	mov    0x40(%rsp),%ebp
   2dd9e:	e9 c6 d3 ff ff       	jmp    2b169 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1149>
   2dda3:	4c 89 fb             	mov    %r15,%rbx
   2dda6:	4d 89 ef             	mov    %r13,%r15
      for(packet_idx=0; packet_idx < num_packets; ++packet_idx) {
   2dda9:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
   2ddae:	49 83 c6 03          	add    $0x3,%r14
   2ddb2:	49 39 c6             	cmp    %rax,%r14
   2ddb5:	0f 85 da fd ff ff    	jne    2db95 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3b75>
   2ddbb:	48 89 d8             	mov    %rbx,%rax
   2ddbe:	44 8b 74 24 60       	mov    0x60(%rsp),%r14d
   2ddc3:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
   2ddc8:	4d 89 fd             	mov    %r15,%r13
   for(y=0; y<height; ++y) {
   2ddcb:	8b 6c 24 40          	mov    0x40(%rsp),%ebp
   2ddcf:	41 83 c6 01          	add    $0x1,%r14d
   2ddd3:	48 01 d8             	add    %rbx,%rax
   2ddd6:	e9 95 fd ff ff       	jmp    2db70 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3b50>
   2dddb:	8b 6c 24 40          	mov    0x40(%rsp),%ebp
   2dddf:	e9 28 da ff ff       	jmp    2b80c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x17ec>
                     if (!stbi__readval(s,packet->channel,value))  return 0;
   2dde4:	48 89 5c 24 70       	mov    %rbx,0x70(%rsp)
         switch (packet->type) {
   2dde9:	44 8b 64 24 38       	mov    0x38(%rsp),%r12d
   2ddee:	48 89 dd             	mov    %rbx,%rbp
                     if (!stbi__readval(s,packet->channel,value))  return 0;
   2ddf1:	4d 89 fd             	mov    %r15,%r13
   2ddf4:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
   2ddfb:	00 
   2ddfc:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
                  while (left>0) {
   2de01:	45 85 e4             	test   %r12d,%r12d
   2de04:	0f 8e d5 03 00 00    	jle    2e1df <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x41bf>
   if (s->img_buffer < s->img_buffer_end)
   2de0a:	49 8b 85 c0 00 00 00 	mov    0xc0(%r13),%rax
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2de11:	4d 8b 45 10          	mov    0x10(%r13),%r8
   if (s->img_buffer < s->img_buffer_end)
   2de15:	49 3b 85 c8 00 00 00 	cmp    0xc8(%r13),%rax
   2de1c:	0f 83 a9 01 00 00    	jae    2dfcb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3fab>
      return *s->img_buffer++;
   2de22:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2de26:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2de2d:	0f b6 18             	movzbl (%rax),%ebx
   if (s->io.read) {
   2de30:	49 83 7d 10 00       	cmpq   $0x0,0x10(%r13)
   2de35:	74 13                	je     2de4a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3e2a>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   2de37:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2de3b:	41 ff 55 20          	call   *0x20(%r13)
   2de3f:	85 c0                	test   %eax,%eax
   2de41:	74 17                	je     2de5a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3e3a>
      if (s->read_from_callbacks == 0) return 1;
   2de43:	41 83 7d 30 00       	cmpl   $0x0,0x30(%r13)
   2de48:	74 91                	je     2dddb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3dbb>
                     if (stbi__at_eof(s))   return stbi__errpuc("bad file","file too short (pure read count)");
   2de4a:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   2de51:	49 39 85 c0 00 00 00 	cmp    %rax,0xc0(%r13)
   2de58:	73 81                	jae    2dddb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3dbb>
                     if (count > left)
   2de5a:	0f b6 c3             	movzbl %bl,%eax
   2de5d:	44 39 e0             	cmp    %r12d,%eax
   2de60:	0f 8e 8b 01 00 00    	jle    2dff1 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3fd1>
                     if (!stbi__readval(s,packet->channel,value))  return 0;
   2de66:	41 0f b6 76 02       	movzbl 0x2(%r14),%esi
   2de6b:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
   2de70:	4c 89 ef             	mov    %r13,%rdi
                        count = (stbi_uc) left;
   2de73:	41 0f b6 dc          	movzbl %r12b,%ebx
                     if (!stbi__readval(s,packet->channel,value))  return 0;
   2de77:	41 89 f7             	mov    %esi,%r15d
   2de7a:	e8 c1 dc fe ff       	call   1bb40 <_ZL13stbi__readvalP13stbi__contextiPh>
   2de7f:	48 85 c0             	test   %rax,%rax
   2de82:	0f 84 12 ff ff ff    	je     2dd9a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d7a>
                     for(i=0; i<count; ++i,dest+=4)
   2de88:	44 89 e0             	mov    %r12d,%eax
   2de8b:	44 89 fa             	mov    %r15d,%edx
   2de8e:	44 89 fe             	mov    %r15d,%esi
   2de91:	44 89 ff             	mov    %r15d,%edi
   2de94:	83 e2 40             	and    $0x40,%edx
   2de97:	83 e6 20             	and    $0x20,%esi
   2de9a:	83 e7 10             	and    $0x10,%edi
   2de9d:	45 84 ff             	test   %r15b,%r15b
   2dea0:	0f 88 ed 00 00 00    	js     2df93 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3f73>
   2dea6:	40 84 ff             	test   %dil,%dil
   2dea9:	75 4b                	jne    2def6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ed6>
   2deab:	40 84 f6             	test   %sil,%sil
   2deae:	75 27                	jne    2ded7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eb7>
   2deb0:	84 d2                	test   %dl,%dl
   2deb2:	74 16                	je     2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
   2deb4:	31 d2                	xor    %edx,%edx
         dest[i]=src[i];
   2deb6:	0f b6 8c 24 a1 00 00 	movzbl 0xa1(%rsp),%ecx
   2debd:	00 
   2debe:	88 4c 95 01          	mov    %cl,0x1(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2dec2:	48 83 c2 01          	add    $0x1,%rdx
   2dec6:	39 d0                	cmp    %edx,%eax
   2dec8:	7f ec                	jg     2deb6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3e96>
   2deca:	48 8d 6c 9d 00       	lea    0x0(%rbp,%rbx,4),%rbp
                     left -= count;
   2decf:	41 29 c4             	sub    %eax,%r12d
   2ded2:	e9 2a ff ff ff       	jmp    2de01 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3de1>
   2ded7:	84 d2                	test   %dl,%dl
                     for(i=0; i<count; ++i,dest+=4)
   2ded9:	ba 00 00 00 00       	mov    $0x0,%edx
   2dede:	75 3a                	jne    2df1a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3efa>
         dest[i]=src[i];
   2dee0:	0f b6 8c 24 a2 00 00 	movzbl 0xa2(%rsp),%ecx
   2dee7:	00 
   2dee8:	88 4c 95 02          	mov    %cl,0x2(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2deec:	48 83 c2 01          	add    $0x1,%rdx
   2def0:	39 d0                	cmp    %edx,%eax
   2def2:	7f ec                	jg     2dee0 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ec0>
   2def4:	eb d4                	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
   2def6:	40 84 f6             	test   %sil,%sil
   2def9:	75 66                	jne    2df61 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3f41>
   2defb:	84 d2                	test   %dl,%dl
   2defd:	ba 00 00 00 00       	mov    $0x0,%edx
   2df02:	75 38                	jne    2df3c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3f1c>
         dest[i]=src[i];
   2df04:	0f b6 8c 24 a3 00 00 	movzbl 0xa3(%rsp),%ecx
   2df0b:	00 
   2df0c:	88 4c 95 03          	mov    %cl,0x3(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2df10:	48 83 c2 01          	add    $0x1,%rdx
   2df14:	39 d0                	cmp    %edx,%eax
   2df16:	7f ec                	jg     2df04 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ee4>
   2df18:	eb b0                	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
         dest[i]=src[i];
   2df1a:	0f b6 8c 24 a1 00 00 	movzbl 0xa1(%rsp),%ecx
   2df21:	00 
   2df22:	88 4c 95 01          	mov    %cl,0x1(%rbp,%rdx,4)
   2df26:	0f b6 8c 24 a2 00 00 	movzbl 0xa2(%rsp),%ecx
   2df2d:	00 
   2df2e:	88 4c 95 02          	mov    %cl,0x2(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2df32:	48 83 c2 01          	add    $0x1,%rdx
   2df36:	39 d0                	cmp    %edx,%eax
   2df38:	7f e0                	jg     2df1a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3efa>
   2df3a:	eb 8e                	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
         dest[i]=src[i];
   2df3c:	0f b6 8c 24 a1 00 00 	movzbl 0xa1(%rsp),%ecx
   2df43:	00 
   2df44:	88 4c 95 01          	mov    %cl,0x1(%rbp,%rdx,4)
   2df48:	0f b6 8c 24 a3 00 00 	movzbl 0xa3(%rsp),%ecx
   2df4f:	00 
   2df50:	88 4c 95 03          	mov    %cl,0x3(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2df54:	48 83 c2 01          	add    $0x1,%rdx
   2df58:	39 d0                	cmp    %edx,%eax
   2df5a:	7f e0                	jg     2df3c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3f1c>
   2df5c:	e9 69 ff ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
   2df61:	84 d2                	test   %dl,%dl
   2df63:	ba 00 00 00 00       	mov    $0x0,%edx
   2df68:	0f 85 b1 00 00 00    	jne    2e01f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3fff>
         dest[i]=src[i];
   2df6e:	0f b6 8c 24 a2 00 00 	movzbl 0xa2(%rsp),%ecx
   2df75:	00 
   2df76:	88 4c 95 02          	mov    %cl,0x2(%rbp,%rdx,4)
   2df7a:	0f b6 8c 24 a3 00 00 	movzbl 0xa3(%rsp),%ecx
   2df81:	00 
   2df82:	88 4c 95 03          	mov    %cl,0x3(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2df86:	48 83 c2 01          	add    $0x1,%rdx
   2df8a:	39 d0                	cmp    %edx,%eax
   2df8c:	7f e0                	jg     2df6e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3f4e>
   2df8e:	e9 37 ff ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
   2df93:	40 84 ff             	test   %dil,%dil
   2df96:	0f 85 07 01 00 00    	jne    2e0a3 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4083>
   2df9c:	40 84 f6             	test   %sil,%sil
   2df9f:	0f 85 d0 00 00 00    	jne    2e075 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4055>
   2dfa5:	84 d2                	test   %dl,%dl
   2dfa7:	ba 00 00 00 00       	mov    $0x0,%edx
   2dfac:	0f 85 9e 00 00 00    	jne    2e050 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4030>
         dest[i]=src[i];
   2dfb2:	0f b6 8c 24 a0 00 00 	movzbl 0xa0(%rsp),%ecx
   2dfb9:	00 
   2dfba:	88 4c 95 00          	mov    %cl,0x0(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2dfbe:	48 83 c2 01          	add    $0x1,%rdx
   2dfc2:	39 d0                	cmp    %edx,%eax
   2dfc4:	7f ec                	jg     2dfb2 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3f92>
   2dfc6:	e9 ff fe ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
   if (s->read_from_callbacks) {
   2dfcb:	41 83 7d 30 00       	cmpl   $0x0,0x30(%r13)
   2dfd0:	0f 85 b4 01 00 00    	jne    2e18a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x416a>
   if (s->io.read) {
   2dfd6:	4d 85 c0             	test   %r8,%r8
   2dfd9:	0f 84 fc fd ff ff    	je     2dddb <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3dbb>
      if (!(s->io.eof)(s->io_user_data)) return 0;
   2dfdf:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   return 0;
   2dfe3:	31 db                	xor    %ebx,%ebx
      if (!(s->io.eof)(s->io_user_data)) return 0;
   2dfe5:	41 ff 55 20          	call   *0x20(%r13)
   2dfe9:	85 c0                	test   %eax,%eax
   2dfeb:	0f 85 52 fe ff ff    	jne    2de43 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3e23>
                     if (!stbi__readval(s,packet->channel,value))  return 0;
   2dff1:	41 0f b6 76 02       	movzbl 0x2(%r14),%esi
   2dff6:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
   2dffb:	4c 89 ef             	mov    %r13,%rdi
   2dffe:	41 89 f7             	mov    %esi,%r15d
   2e001:	e8 3a db fe ff       	call   1bb40 <_ZL13stbi__readvalP13stbi__contextiPh>
   2e006:	48 85 c0             	test   %rax,%rax
   2e009:	0f 84 8b fd ff ff    	je     2dd9a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d7a>
                     for(i=0; i<count; ++i,dest+=4)
   2e00f:	0f b6 c3             	movzbl %bl,%eax
   2e012:	85 c0                	test   %eax,%eax
   2e014:	0f 85 71 fe ff ff    	jne    2de8b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3e6b>
   2e01a:	e9 b0 fe ff ff       	jmp    2decf <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaf>
         dest[i]=src[i];
   2e01f:	0f b6 8c 24 a1 00 00 	movzbl 0xa1(%rsp),%ecx
   2e026:	00 
   2e027:	88 4c 95 01          	mov    %cl,0x1(%rbp,%rdx,4)
   2e02b:	0f b6 8c 24 a2 00 00 	movzbl 0xa2(%rsp),%ecx
   2e032:	00 
   2e033:	88 4c 95 02          	mov    %cl,0x2(%rbp,%rdx,4)
   2e037:	0f b6 8c 24 a3 00 00 	movzbl 0xa3(%rsp),%ecx
   2e03e:	00 
   2e03f:	88 4c 95 03          	mov    %cl,0x3(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2e043:	48 83 c2 01          	add    $0x1,%rdx
   2e047:	39 d0                	cmp    %edx,%eax
   2e049:	7f d4                	jg     2e01f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3fff>
   2e04b:	e9 7a fe ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
         dest[i]=src[i];
   2e050:	0f b6 8c 24 a0 00 00 	movzbl 0xa0(%rsp),%ecx
   2e057:	00 
   2e058:	88 4c 95 00          	mov    %cl,0x0(%rbp,%rdx,4)
   2e05c:	0f b6 8c 24 a1 00 00 	movzbl 0xa1(%rsp),%ecx
   2e063:	00 
   2e064:	88 4c 95 01          	mov    %cl,0x1(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2e068:	48 83 c2 01          	add    $0x1,%rdx
   2e06c:	39 d0                	cmp    %edx,%eax
   2e06e:	7f e0                	jg     2e050 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4030>
   2e070:	e9 55 fe ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
   2e075:	84 d2                	test   %dl,%dl
   2e077:	ba 00 00 00 00       	mov    $0x0,%edx
   2e07c:	75 5c                	jne    2e0da <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x40ba>
         dest[i]=src[i];
   2e07e:	0f b6 8c 24 a0 00 00 	movzbl 0xa0(%rsp),%ecx
   2e085:	00 
   2e086:	88 4c 95 00          	mov    %cl,0x0(%rbp,%rdx,4)
   2e08a:	0f b6 8c 24 a2 00 00 	movzbl 0xa2(%rsp),%ecx
   2e091:	00 
   2e092:	88 4c 95 02          	mov    %cl,0x2(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2e096:	48 83 c2 01          	add    $0x1,%rdx
   2e09a:	39 d0                	cmp    %edx,%eax
   2e09c:	7f e0                	jg     2e07e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x405e>
   2e09e:	e9 27 fe ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
   2e0a3:	40 84 f6             	test   %sil,%sil
   2e0a6:	0f 85 90 00 00 00    	jne    2e13c <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x411c>
   2e0ac:	84 d2                	test   %dl,%dl
   2e0ae:	ba 00 00 00 00       	mov    $0x0,%edx
   2e0b3:	75 56                	jne    2e10b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x40eb>
         dest[i]=src[i];
   2e0b5:	0f b6 8c 24 a0 00 00 	movzbl 0xa0(%rsp),%ecx
   2e0bc:	00 
   2e0bd:	88 4c 95 00          	mov    %cl,0x0(%rbp,%rdx,4)
   2e0c1:	0f b6 8c 24 a3 00 00 	movzbl 0xa3(%rsp),%ecx
   2e0c8:	00 
   2e0c9:	88 4c 95 03          	mov    %cl,0x3(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2e0cd:	48 83 c2 01          	add    $0x1,%rdx
   2e0d1:	39 d0                	cmp    %edx,%eax
   2e0d3:	7f e0                	jg     2e0b5 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4095>
   2e0d5:	e9 f0 fd ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
         dest[i]=src[i];
   2e0da:	0f b6 8c 24 a0 00 00 	movzbl 0xa0(%rsp),%ecx
   2e0e1:	00 
   2e0e2:	88 4c 95 00          	mov    %cl,0x0(%rbp,%rdx,4)
   2e0e6:	0f b6 8c 24 a1 00 00 	movzbl 0xa1(%rsp),%ecx
   2e0ed:	00 
   2e0ee:	88 4c 95 01          	mov    %cl,0x1(%rbp,%rdx,4)
   2e0f2:	0f b6 8c 24 a2 00 00 	movzbl 0xa2(%rsp),%ecx
   2e0f9:	00 
   2e0fa:	88 4c 95 02          	mov    %cl,0x2(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2e0fe:	48 83 c2 01          	add    $0x1,%rdx
   2e102:	39 d0                	cmp    %edx,%eax
   2e104:	7f d4                	jg     2e0da <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x40ba>
   2e106:	e9 bf fd ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
         dest[i]=src[i];
   2e10b:	0f b6 8c 24 a0 00 00 	movzbl 0xa0(%rsp),%ecx
   2e112:	00 
   2e113:	88 4c 95 00          	mov    %cl,0x0(%rbp,%rdx,4)
   2e117:	0f b6 8c 24 a1 00 00 	movzbl 0xa1(%rsp),%ecx
   2e11e:	00 
   2e11f:	88 4c 95 01          	mov    %cl,0x1(%rbp,%rdx,4)
   2e123:	0f b6 8c 24 a3 00 00 	movzbl 0xa3(%rsp),%ecx
   2e12a:	00 
   2e12b:	88 4c 95 03          	mov    %cl,0x3(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2e12f:	48 83 c2 01          	add    $0x1,%rdx
   2e133:	39 d0                	cmp    %edx,%eax
   2e135:	7f d4                	jg     2e10b <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x40eb>
   2e137:	e9 8e fd ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
   2e13c:	84 d2                	test   %dl,%dl
   2e13e:	ba 00 00 00 00       	mov    $0x0,%edx
   2e143:	0f 85 a3 00 00 00    	jne    2e1ec <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x41cc>
         dest[i]=src[i];
   2e149:	0f b6 8c 24 a0 00 00 	movzbl 0xa0(%rsp),%ecx
   2e150:	00 
   2e151:	88 4c 95 00          	mov    %cl,0x0(%rbp,%rdx,4)
   2e155:	0f b6 8c 24 a2 00 00 	movzbl 0xa2(%rsp),%ecx
   2e15c:	00 
   2e15d:	88 4c 95 02          	mov    %cl,0x2(%rbp,%rdx,4)
   2e161:	0f b6 8c 24 a3 00 00 	movzbl 0xa3(%rsp),%ecx
   2e168:	00 
   2e169:	88 4c 95 03          	mov    %cl,0x3(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2e16d:	48 83 c2 01          	add    $0x1,%rdx
   2e171:	39 d0                	cmp    %edx,%eax
   2e173:	7f d4                	jg     2e149 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4129>
   2e175:	e9 50 fd ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
   2e17a:	49 89 d8             	mov    %rbx,%r8
   2e17d:	44 89 fb             	mov    %r15d,%ebx
   2e180:	4c 8b 7c 24 48       	mov    0x48(%rsp),%r15
   2e185:	e9 bc fb ff ff       	jmp    2dd46 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d26>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2e18a:	49 8d 5d 38          	lea    0x38(%r13),%rbx
   2e18e:	41 8b 55 34          	mov    0x34(%r13),%edx
   2e192:	49 8b 7d 28          	mov    0x28(%r13),%rdi
   2e196:	48 89 de             	mov    %rbx,%rsi
   2e199:	41 ff d0             	call   *%r8
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2e19c:	49 8b 95 c0 00 00 00 	mov    0xc0(%r13),%rdx
   2e1a3:	49 2b 95 d0 00 00 00 	sub    0xd0(%r13),%rdx
   2e1aa:	41 01 95 b8 00 00 00 	add    %edx,0xb8(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2e1b1:	49 8d 55 39          	lea    0x39(%r13),%rdx
   if (n == 0) {
   2e1b5:	85 c0                	test   %eax,%eax
   2e1b7:	75 70                	jne    2e229 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x4209>
      s->read_from_callbacks = 0;
   2e1b9:	31 c0                	xor    %eax,%eax
      *s->img_buffer = 0;
   2e1bb:	41 c6 45 38 00       	movb   $0x0,0x38(%r13)
      s->img_buffer_end = s->buffer_start+1;
   2e1c0:	48 89 d3             	mov    %rdx,%rbx
      s->read_from_callbacks = 0;
   2e1c3:	41 89 45 30          	mov    %eax,0x30(%r13)
      *s->img_buffer = 0;
   2e1c7:	49 89 9d c8 00 00 00 	mov    %rbx,0xc8(%r13)
      return *s->img_buffer++;
   2e1ce:	41 0f b6 5d 38       	movzbl 0x38(%r13),%ebx
   2e1d3:	49 89 95 c0 00 00 00 	mov    %rdx,0xc0(%r13)
   2e1da:	e9 51 fc ff ff       	jmp    2de30 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3e10>
   2e1df:	48 8b 5c 24 70       	mov    0x70(%rsp),%rbx
   2e1e4:	4d 89 ef             	mov    %r13,%r15
   2e1e7:	e9 bd fb ff ff       	jmp    2dda9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3d89>
         dest[i]=src[i];
   2e1ec:	0f b6 8c 24 a0 00 00 	movzbl 0xa0(%rsp),%ecx
   2e1f3:	00 
   2e1f4:	88 4c 95 00          	mov    %cl,0x0(%rbp,%rdx,4)
   2e1f8:	0f b6 8c 24 a1 00 00 	movzbl 0xa1(%rsp),%ecx
   2e1ff:	00 
   2e200:	88 4c 95 01          	mov    %cl,0x1(%rbp,%rdx,4)
   2e204:	0f b6 8c 24 a2 00 00 	movzbl 0xa2(%rsp),%ecx
   2e20b:	00 
   2e20c:	88 4c 95 02          	mov    %cl,0x2(%rbp,%rdx,4)
   2e210:	0f b6 8c 24 a3 00 00 	movzbl 0xa3(%rsp),%ecx
   2e217:	00 
   2e218:	88 4c 95 03          	mov    %cl,0x3(%rbp,%rdx,4)
                     for(i=0; i<count; ++i,dest+=4)
   2e21c:	48 83 c2 01          	add    $0x1,%rdx
   2e220:	39 d0                	cmp    %edx,%eax
   2e222:	7f c8                	jg     2e1ec <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x41cc>
   2e224:	e9 a1 fc ff ff       	jmp    2deca <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3eaa>
      s->img_buffer_end = s->buffer_start + n;
   2e229:	48 98                	cltq
   2e22b:	48 01 c3             	add    %rax,%rbx
   2e22e:	eb 97                	jmp    2e1c7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x41a7>
      stbi__addsizes_valid(a*b*c, add);
   2e230:	41 0f af cc          	imul   %r12d,%ecx
   if (!stbi__mad3sizes_valid(a, b, c, add)) return NULL;
   2e234:	81 f9 ff ff ff 7f    	cmp    $0x7fffffff,%ecx
   2e23a:	0f 85 15 d9 ff ff    	jne    2bb55 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1b35>
   2e240:	e9 74 ca ff ff       	jmp    2acb9 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0xc99>
      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);
   2e245:	0f af f3             	imul   %ebx,%esi
   if (a < 0 || b < 0) return 0;
   2e248:	83 f9 f9             	cmp    $0xfffffff9,%ecx
   2e24b:	0f 8c cf d2 ff ff    	jl     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   if (b == 0) return 1; // mul-by-0 is always safe
   2e251:	85 ed                	test   %ebp,%ebp
   2e253:	0f 84 c6 e3 ff ff    	je     2c61f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x25ff>
   return a <= INT_MAX/b;
   2e259:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2e25e:	31 d2                	xor    %edx,%edx
   2e260:	f7 fd                	idiv   %ebp
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2e262:	39 c6                	cmp    %eax,%esi
   2e264:	0f 8f b6 d2 ff ff    	jg     2b520 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x1500>
   2e26a:	0f 8f 87 f8 ff ff    	jg     2daf7 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3ad7>
   2e270:	e9 aa e3 ff ff       	jmp    2c61f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x25ff>
      s->img_buffer_end = s->buffer_start + n;
   2e275:	48 98                	cltq
   2e277:	48 01 c3             	add    %rax,%rbx
   2e27a:	e9 f5 e5 ff ff       	jmp    2c874 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x2854>
   return 0;
   2e27f:	45 31 e4             	xor    %r12d,%r12d
   2e282:	e9 98 e0 ff ff       	jmp    2c31f <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x22ff>
      s->img_buffer = s->img_buffer_end;
   2e287:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   2e28e:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
      return;
   2e295:	e9 e4 ed ff ff       	jmp    2d07e <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x305e>
      s->img_buffer = s->img_buffer_end;
   2e29a:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   2e2a1:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
      return;
   2e2a8:	e9 ed ed ff ff       	jmp    2d09a <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x307a>
      s->img_buffer = s->img_buffer_end;
   2e2ad:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
   2e2b4:	49 89 85 c0 00 00 00 	mov    %rax,0xc0(%r13)
      return;
   2e2bb:	e9 f6 ed ff ff       	jmp    2d0b6 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi+0x3096>

000000000002e2c0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i>:
{
   2e2c0:	41 57                	push   %r15
   2e2c2:	41 56                	push   %r14
   2e2c4:	49 89 ce             	mov    %rcx,%r14
   2e2c7:	41 55                	push   %r13
   2e2c9:	49 89 d5             	mov    %rdx,%r13
   2e2cc:	41 54                	push   %r12
   2e2ce:	49 89 f4             	mov    %rsi,%r12
   2e2d1:	55                   	push   %rbp
   2e2d2:	44 89 c5             	mov    %r8d,%ebp
   2e2d5:	53                   	push   %rbx
   2e2d6:	48 83 ec 30          	sub    $0x30,%rsp
   void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 8);
   2e2da:	6a 08                	push   $0x8
   2e2dc:	4c 8d 4c 24 24       	lea    0x24(%rsp),%r9
   2e2e1:	e8 3a bd ff ff       	call   2a020 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi>
   if (result == NULL)
   2e2e6:	59                   	pop    %rcx
   2e2e7:	5e                   	pop    %rsi
   void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 8);
   2e2e8:	48 89 c3             	mov    %rax,%rbx
   if (result == NULL)
   2e2eb:	48 85 c0             	test   %rax,%rax
   2e2ee:	0f 84 d0 00 00 00    	je     2e3c4 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x104>
   if (ri.bits_per_channel != 8) {
   2e2f4:	83 7c 24 14 08       	cmpl   $0x8,0x14(%rsp)
   2e2f9:	0f 84 8e 00 00 00    	je     2e38d <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xcd>
      result = stbi__convert_16_to_8((stbi__uint16 *) result, *x, *y, req_comp == 0 ? *comp : req_comp);
   2e2ff:	89 e8                	mov    %ebp,%eax
   2e301:	85 ed                	test   %ebp,%ebp
   2e303:	0f 84 d7 00 00 00    	je     2e3e0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x120>
   int img_len = w * h * channels;
   2e309:	41 8b 55 00          	mov    0x0(%r13),%edx
   2e30d:	41 0f af 14 24       	imul   (%r12),%edx
   2e312:	0f af d0             	imul   %eax,%edx
   reduced = (stbi_uc *) stbi__malloc(img_len);
   2e315:	48 63 ca             	movslq %edx,%rcx
   2e318:	89 54 24 0c          	mov    %edx,0xc(%rsp)
    return STBI_MALLOC(size);
   2e31c:	48 89 cf             	mov    %rcx,%rdi
   2e31f:	48 89 0c 24          	mov    %rcx,(%rsp)
   2e323:	e8 38 84 fd ff       	call   6760 <malloc@plt>
   2e328:	49 89 c7             	mov    %rax,%r15
   if (reduced == NULL) return stbi__errpuc("outofmem", "Out of memory");
   2e32b:	48 85 c0             	test   %rax,%rax
   2e32e:	0f 84 1c 02 00 00    	je     2e550 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x290>
   for (i = 0; i < img_len; ++i)
   2e334:	8b 54 24 0c          	mov    0xc(%rsp),%edx
   2e338:	48 8b 0c 24          	mov    (%rsp),%rcx
   2e33c:	85 d2                	test   %edx,%edx
   2e33e:	7e 42                	jle    2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
   2e340:	8d 7a ff             	lea    -0x1(%rdx),%edi
   2e343:	89 d6                	mov    %edx,%esi
   2e345:	83 ff 06             	cmp    $0x6,%edi
   2e348:	0f 86 f2 01 00 00    	jbe    2e540 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x280>
   2e34e:	48 8d 04 4b          	lea    (%rbx,%rcx,2),%rax
   2e352:	49 39 c7             	cmp    %rax,%r15
   2e355:	0f 83 95 00 00 00    	jae    2e3f0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x130>
   2e35b:	4d 8d 04 0f          	lea    (%r15,%rcx,1),%r8
   2e35f:	31 c0                	xor    %eax,%eax
   2e361:	4c 39 c3             	cmp    %r8,%rbx
   2e364:	0f 83 86 00 00 00    	jae    2e3f0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x130>
   2e36a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e370:	0f b6 54 43 01       	movzbl 0x1(%rbx,%rax,2),%edx
   2e375:	41 88 14 07          	mov    %dl,(%r15,%rax,1)
   for (i = 0; i < img_len; ++i)
   2e379:	48 83 c0 01          	add    $0x1,%rax
   2e37d:	48 39 c1             	cmp    %rax,%rcx
   2e380:	75 ee                	jne    2e370 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xb0>
   STBI_FREE(orig);
   2e382:	48 89 df             	mov    %rbx,%rdi
   return reduced;
   2e385:	4c 89 fb             	mov    %r15,%rbx
   STBI_FREE(orig);
   2e388:	e8 13 83 fd ff       	call   66a0 <free@plt>
   if (stbi__vertically_flip_on_load) {
   2e38d:	64 8b 14 25 f0 ff ff 	mov    %fs:0xfffffffffffffff0,%edx
   2e394:	ff 
   2e395:	8b 05 6d 34 01 00    	mov    0x1346d(%rip),%eax        # 41808 <_ZL36stbi__vertically_flip_on_load_global>
   2e39b:	85 d2                	test   %edx,%edx
   2e39d:	74 08                	je     2e3a7 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xe7>
   2e39f:	64 8b 04 25 f4 ff ff 	mov    %fs:0xfffffffffffffff4,%eax
   2e3a6:	ff 
   2e3a7:	85 c0                	test   %eax,%eax
   2e3a9:	74 19                	je     2e3c4 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x104>
      int channels = req_comp ? req_comp : *comp;
   2e3ab:	85 ed                	test   %ebp,%ebp
   2e3ad:	75 03                	jne    2e3b2 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xf2>
   2e3af:	41 8b 2e             	mov    (%r14),%ebp
      stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi_uc));
   2e3b2:	41 8b 55 00          	mov    0x0(%r13),%edx
   2e3b6:	41 8b 34 24          	mov    (%r12),%esi
   2e3ba:	89 e9                	mov    %ebp,%ecx
   2e3bc:	48 89 df             	mov    %rbx,%rdi
   2e3bf:	e8 8c 38 fe ff       	call   11c50 <_ZL19stbi__vertical_flipPviii>
}
   2e3c4:	48 83 c4 28          	add    $0x28,%rsp
   2e3c8:	48 89 d8             	mov    %rbx,%rax
   2e3cb:	5b                   	pop    %rbx
   2e3cc:	5d                   	pop    %rbp
   2e3cd:	41 5c                	pop    %r12
   2e3cf:	41 5d                	pop    %r13
   2e3d1:	41 5e                	pop    %r14
   2e3d3:	41 5f                	pop    %r15
   2e3d5:	c3                   	ret
   2e3d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2e3dd:	00 00 00 
      result = stbi__convert_16_to_8((stbi__uint16 *) result, *x, *y, req_comp == 0 ? *comp : req_comp);
   2e3e0:	41 8b 06             	mov    (%r14),%eax
   2e3e3:	e9 21 ff ff ff       	jmp    2e309 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x49>
   2e3e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2e3ef:	00 
   2e3f0:	83 ff 0e             	cmp    $0xe,%edi
   2e3f3:	0f 86 4e 01 00 00    	jbe    2e547 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x287>
   2e3f9:	89 d1                	mov    %edx,%ecx
   2e3fb:	66 0f 6f 15 0d a4 00 	movdqa 0xa40d(%rip),%xmm2        # 38810 <_ZL11stbi__bmask+0x90>
   2e402:	00 
   for (i = 0; i < img_len; ++i)
   2e403:	31 c0                	xor    %eax,%eax
   2e405:	c1 e9 04             	shr    $0x4,%ecx
   2e408:	48 c1 e1 04          	shl    $0x4,%rcx
   2e40c:	0f 1f 40 00          	nopl   0x0(%rax)
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e410:	f3 0f 6f 04 43       	movdqu (%rbx,%rax,2),%xmm0
   2e415:	f3 0f 6f 4c 43 10    	movdqu 0x10(%rbx,%rax,2),%xmm1
   2e41b:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   2e420:	66 0f 71 d1 08       	psrlw  $0x8,%xmm1
   2e425:	66 0f db c2          	pand   %xmm2,%xmm0
   2e429:	66 0f db ca          	pand   %xmm2,%xmm1
   2e42d:	66 0f 67 c1          	packuswb %xmm1,%xmm0
   2e431:	41 0f 11 04 07       	movups %xmm0,(%r15,%rax,1)
   for (i = 0; i < img_len; ++i)
   2e436:	48 83 c0 10          	add    $0x10,%rax
   2e43a:	48 39 c1             	cmp    %rax,%rcx
   2e43d:	75 d1                	jne    2e410 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x150>
   2e43f:	89 d0                	mov    %edx,%eax
   2e441:	83 e0 f0             	and    $0xfffffff0,%eax
   2e444:	89 c1                	mov    %eax,%ecx
   2e446:	39 c2                	cmp    %eax,%edx
   2e448:	0f 84 34 ff ff ff    	je     2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
   2e44e:	89 d6                	mov    %edx,%esi
   2e450:	29 c6                	sub    %eax,%esi
   2e452:	8d 7e ff             	lea    -0x1(%rsi),%edi
   2e455:	83 ff 06             	cmp    $0x6,%edi
   2e458:	76 46                	jbe    2e4a0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x1e0>
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e45a:	f3 0f 7e 0d ae a3 00 	movq   0xa3ae(%rip),%xmm1        # 38810 <_ZL11stbi__bmask+0x90>
   2e461:	00 
   2e462:	48 8d 3c 4b          	lea    (%rbx,%rcx,2),%rdi
   2e466:	f3 0f 7e 07          	movq   (%rdi),%xmm0
   2e46a:	f3 0f 7e 57 08       	movq   0x8(%rdi),%xmm2
   2e46f:	66 0f 71 d0 08       	psrlw  $0x8,%xmm0
   2e474:	66 0f 71 d2 08       	psrlw  $0x8,%xmm2
   2e479:	66 0f db c1          	pand   %xmm1,%xmm0
   2e47d:	66 0f db ca          	pand   %xmm2,%xmm1
   2e481:	66 0f 67 c1          	packuswb %xmm1,%xmm0
   2e485:	66 0f 70 c0 08       	pshufd $0x8,%xmm0,%xmm0
   2e48a:	66 41 0f d6 04 0f    	movq   %xmm0,(%r15,%rcx,1)
   for (i = 0; i < img_len; ++i)
   2e490:	89 f1                	mov    %esi,%ecx
   2e492:	83 e1 f8             	and    $0xfffffff8,%ecx
   2e495:	01 c8                	add    %ecx,%eax
   2e497:	83 e6 07             	and    $0x7,%esi
   2e49a:	0f 84 e2 fe ff ff    	je     2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e4a0:	48 63 f0             	movslq %eax,%rsi
   2e4a3:	0f b6 7c 73 01       	movzbl 0x1(%rbx,%rsi,2),%edi
   2e4a8:	48 8d 0c 36          	lea    (%rsi,%rsi,1),%rcx
   2e4ac:	41 88 3c 37          	mov    %dil,(%r15,%rsi,1)
   for (i = 0; i < img_len; ++i)
   2e4b0:	8d 70 01             	lea    0x1(%rax),%esi
   2e4b3:	39 f2                	cmp    %esi,%edx
   2e4b5:	0f 8e c7 fe ff ff    	jle    2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e4bb:	0f b6 7c 0b 03       	movzbl 0x3(%rbx,%rcx,1),%edi
   2e4c0:	48 63 f6             	movslq %esi,%rsi
   2e4c3:	41 88 3c 37          	mov    %dil,(%r15,%rsi,1)
   for (i = 0; i < img_len; ++i)
   2e4c7:	8d 70 02             	lea    0x2(%rax),%esi
   2e4ca:	39 f2                	cmp    %esi,%edx
   2e4cc:	0f 8e b0 fe ff ff    	jle    2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e4d2:	0f b6 7c 0b 05       	movzbl 0x5(%rbx,%rcx,1),%edi
   2e4d7:	48 63 f6             	movslq %esi,%rsi
   2e4da:	41 88 3c 37          	mov    %dil,(%r15,%rsi,1)
   for (i = 0; i < img_len; ++i)
   2e4de:	8d 70 03             	lea    0x3(%rax),%esi
   2e4e1:	39 f2                	cmp    %esi,%edx
   2e4e3:	0f 8e 99 fe ff ff    	jle    2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e4e9:	0f b6 7c 0b 07       	movzbl 0x7(%rbx,%rcx,1),%edi
   2e4ee:	48 63 f6             	movslq %esi,%rsi
   2e4f1:	41 88 3c 37          	mov    %dil,(%r15,%rsi,1)
   for (i = 0; i < img_len; ++i)
   2e4f5:	8d 70 04             	lea    0x4(%rax),%esi
   2e4f8:	39 f2                	cmp    %esi,%edx
   2e4fa:	0f 8e 82 fe ff ff    	jle    2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e500:	0f b6 7c 0b 09       	movzbl 0x9(%rbx,%rcx,1),%edi
   2e505:	48 63 f6             	movslq %esi,%rsi
   2e508:	41 88 3c 37          	mov    %dil,(%r15,%rsi,1)
   for (i = 0; i < img_len; ++i)
   2e50c:	8d 70 05             	lea    0x5(%rax),%esi
   2e50f:	39 f2                	cmp    %esi,%edx
   2e511:	0f 8e 6b fe ff ff    	jle    2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e517:	0f b6 7c 0b 0b       	movzbl 0xb(%rbx,%rcx,1),%edi
   2e51c:	48 63 f6             	movslq %esi,%rsi
   for (i = 0; i < img_len; ++i)
   2e51f:	83 c0 06             	add    $0x6,%eax
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e522:	41 88 3c 37          	mov    %dil,(%r15,%rsi,1)
   for (i = 0; i < img_len; ++i)
   2e526:	39 c2                	cmp    %eax,%edx
   2e528:	0f 8e 54 fe ff ff    	jle    2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF); // top half of each byte is sufficient approx of 16->8 bit scaling
   2e52e:	0f b6 54 0b 0d       	movzbl 0xd(%rbx,%rcx,1),%edx
   2e533:	48 98                	cltq
   2e535:	41 88 14 07          	mov    %dl,(%r15,%rax,1)
   for (i = 0; i < img_len; ++i)
   2e539:	e9 44 fe ff ff       	jmp    2e382 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xc2>
   2e53e:	66 90                	xchg   %ax,%ax
   2e540:	31 c0                	xor    %eax,%eax
   2e542:	e9 29 fe ff ff       	jmp    2e370 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xb0>
   2e547:	31 c9                	xor    %ecx,%ecx
   2e549:	31 c0                	xor    %eax,%eax
   2e54b:	e9 0a ff ff ff       	jmp    2e45a <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0x19a>
   stbi__g_failure_reason = str;
   2e550:	48 8d 05 de 94 00 00 	lea    0x94de(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   if (reduced == NULL) return stbi__errpuc("outofmem", "Out of memory");
   2e557:	31 db                	xor    %ebx,%ebx
   stbi__g_failure_reason = str;
   2e559:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2e560:	ff ff 
   if (reduced == NULL) return stbi__errpuc("outofmem", "Out of memory");
   2e562:	e9 26 fe ff ff       	jmp    2e38d <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i+0xcd>
   2e567:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2e56e:	00 00 

000000000002e570 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i>:
{
   2e570:	41 57                	push   %r15
   2e572:	41 56                	push   %r14
   2e574:	41 55                	push   %r13
   2e576:	49 89 fd             	mov    %rdi,%r13
   2e579:	41 54                	push   %r12
   2e57b:	49 89 cc             	mov    %rcx,%r12
   2e57e:	55                   	push   %rbp
   2e57f:	48 89 d5             	mov    %rdx,%rbp
   2e582:	53                   	push   %rbx
   2e583:	48 89 f3             	mov    %rsi,%rbx
   2e586:	48 83 ec 48          	sub    $0x48,%rsp
   2e58a:	44 89 44 24 2c       	mov    %r8d,0x2c(%rsp)
   if (stbi__hdr_test(s)) {
   2e58f:	e8 0c d3 fe ff       	call   1b8a0 <_ZL14stbi__hdr_testP13stbi__context>
   2e594:	89 44 24 30          	mov    %eax,0x30(%rsp)
   2e598:	85 c0                	test   %eax,%eax
   2e59a:	0f 85 c7 00 00 00    	jne    2e667 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xf7>
   data = stbi__load_and_postprocess_8bit(s, x, y, comp, req_comp);
   2e5a0:	44 8b 74 24 2c       	mov    0x2c(%rsp),%r14d
   2e5a5:	4c 89 e1             	mov    %r12,%rcx
   2e5a8:	48 89 ea             	mov    %rbp,%rdx
   2e5ab:	48 89 de             	mov    %rbx,%rsi
   2e5ae:	4c 89 ef             	mov    %r13,%rdi
   2e5b1:	45 89 f0             	mov    %r14d,%r8d
   2e5b4:	e8 07 fd ff ff       	call   2e2c0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i>
   2e5b9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   if (data)
   2e5be:	48 85 c0             	test   %rax,%rax
   2e5c1:	0f 84 a2 02 00 00    	je     2e869 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2f9>
      return stbi__ldr_to_hdr(data, *x, *y, req_comp ? req_comp : *comp);
   2e5c7:	45 85 f6             	test   %r14d,%r14d
   2e5ca:	75 08                	jne    2e5d4 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x64>
   2e5cc:	41 8b 04 24          	mov    (%r12),%eax
   2e5d0:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
   2e5d4:	8b 4d 00             	mov    0x0(%rbp),%ecx
   2e5d7:	8b 33                	mov    (%rbx),%esi
   if (a < 0 || b < 0) return 0;
   2e5d9:	89 c8                	mov    %ecx,%eax
   2e5db:	09 f0                	or     %esi,%eax
   2e5dd:	78 51                	js     2e630 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xc0>
   if (b == 0) return 1; // mul-by-0 is always safe
   2e5df:	85 c9                	test   %ecx,%ecx
   2e5e1:	0f 84 ea 00 00 00    	je     2e6d1 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x161>
   return a <= INT_MAX/b;
   2e5e7:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2e5ec:	31 d2                	xor    %edx,%edx
   2e5ee:	f7 f9                	idiv   %ecx
      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);
   2e5f0:	39 c6                	cmp    %eax,%esi
   2e5f2:	7f 3c                	jg     2e630 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xc0>
   if (a < 0 || b < 0) return 0;
   2e5f4:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
   2e5f8:	85 c0                	test   %eax,%eax
   2e5fa:	78 34                	js     2e630 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xc0>
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2e5fc:	89 cb                	mov    %ecx,%ebx
   2e5fe:	0f af de             	imul   %esi,%ebx
   2e601:	89 5c 24 28          	mov    %ebx,0x28(%rsp)
   if (b == 0) return 1; // mul-by-0 is always safe
   2e605:	85 c0                	test   %eax,%eax
   2e607:	0f 84 71 02 00 00    	je     2e87e <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x30e>
   return a <= INT_MAX/b;
   2e60d:	89 c7                	mov    %eax,%edi
   2e60f:	31 d2                	xor    %edx,%edx
   2e611:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   2e616:	f7 ff                	idiv   %edi
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2e618:	39 c3                	cmp    %eax,%ebx
   2e61a:	7f 14                	jg     2e630 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xc0>
      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);
   2e61c:	41 89 df             	mov    %ebx,%r15d
   2e61f:	44 0f af ff          	imul   %edi,%r15d
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
   2e623:	41 81 ff ff ff ff 1f 	cmp    $0x1fffffff,%r15d
   2e62a:	0f 8e ad 00 00 00    	jle    2e6dd <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x16d>
   if (output == NULL) { STBI_FREE(data); return stbi__errpf("outofmem", "Out of memory"); }
   2e630:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   2e635:	e8 66 80 fd ff       	call   66a0 <free@plt>
   stbi__g_failure_reason = str;
   2e63a:	48 8d 05 f4 93 00 00 	lea    0x93f4(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   2e641:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2e648:	ff ff 
   return stbi__errpf("unknown image type", "Image not of any known type, or corrupt");
   2e64a:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
   2e651:	00 00 
}
   2e653:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2e658:	48 83 c4 48          	add    $0x48,%rsp
   2e65c:	5b                   	pop    %rbx
   2e65d:	5d                   	pop    %rbp
   2e65e:	41 5c                	pop    %r12
   2e660:	41 5d                	pop    %r13
   2e662:	41 5e                	pop    %r14
   2e664:	41 5f                	pop    %r15
   2e666:	c3                   	ret
      float *hdr_data = stbi__hdr_load(s,x,y,comp,req_comp, &ri);
   2e667:	44 8b 44 24 2c       	mov    0x2c(%rsp),%r8d
   2e66c:	4c 89 e1             	mov    %r12,%rcx
   2e66f:	48 89 ea             	mov    %rbp,%rdx
   2e672:	48 89 de             	mov    %rbx,%rsi
   2e675:	4c 89 ef             	mov    %r13,%rdi
   2e678:	e8 c3 07 ff ff       	call   1ee40 <_ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info.constprop.0>
   2e67d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      if (hdr_data)
   2e682:	48 85 c0             	test   %rax,%rax
   2e685:	74 c3                	je     2e64a <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xda>
   if (stbi__vertically_flip_on_load && result != NULL) {
   2e687:	64 44 8b 0c 25 f0 ff 	mov    %fs:0xfffffffffffffff0,%r9d
   2e68e:	ff ff 
   2e690:	8b 05 72 31 01 00    	mov    0x13172(%rip),%eax        # 41808 <_ZL36stbi__vertically_flip_on_load_global>
   2e696:	45 85 c9             	test   %r9d,%r9d
   2e699:	74 08                	je     2e6a3 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x133>
   2e69b:	64 8b 04 25 f4 ff ff 	mov    %fs:0xfffffffffffffff4,%eax
   2e6a2:	ff 
   2e6a3:	85 c0                	test   %eax,%eax
   2e6a5:	74 ac                	je     2e653 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xe3>
      int channels = req_comp ? req_comp : *comp;
   2e6a7:	44 8b 44 24 2c       	mov    0x2c(%rsp),%r8d
   2e6ac:	45 85 c0             	test   %r8d,%r8d
   2e6af:	75 08                	jne    2e6b9 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x149>
   2e6b1:	41 8b 04 24          	mov    (%r12),%eax
   2e6b5:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
      stbi__vertical_flip(result, *x, *y, channels * sizeof(float));
   2e6b9:	8b 4c 24 2c          	mov    0x2c(%rsp),%ecx
   2e6bd:	8b 55 00             	mov    0x0(%rbp),%edx
   2e6c0:	8b 33                	mov    (%rbx),%esi
   2e6c2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2e6c7:	c1 e1 02             	shl    $0x2,%ecx
   2e6ca:	e8 81 35 fe ff       	call   11c50 <_ZL19stbi__vertical_flipPviii>
   2e6cf:	eb 82                	jmp    2e653 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xe3>
   if (a < 0 || b < 0) return 0;
   2e6d1:	8b 7c 24 2c          	mov    0x2c(%rsp),%edi
   2e6d5:	85 ff                	test   %edi,%edi
   2e6d7:	0f 88 53 ff ff ff    	js     2e630 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xc0>
   return stbi__malloc(a*b*c*d + add);
   2e6dd:	0f af ce             	imul   %esi,%ecx
   2e6e0:	8b 5c 24 2c          	mov    0x2c(%rsp),%ebx
   2e6e4:	89 df                	mov    %ebx,%edi
   2e6e6:	0f af f9             	imul   %ecx,%edi
   2e6e9:	89 4c 24 28          	mov    %ecx,0x28(%rsp)
   2e6ed:	41 89 ce             	mov    %ecx,%r14d
   2e6f0:	c1 e7 02             	shl    $0x2,%edi
   2e6f3:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   2e6f6:	e8 65 80 fd ff       	call   6760 <malloc@plt>
   2e6fb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   if (output == NULL) { STBI_FREE(data); return stbi__errpf("outofmem", "Out of memory"); }
   2e700:	48 85 c0             	test   %rax,%rax
   2e703:	0f 84 27 ff ff ff    	je     2e630 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xc0>
   if (comp & 1) n = comp; else n = comp-1;
   2e709:	89 d9                	mov    %ebx,%ecx
   2e70b:	83 e1 01             	and    $0x1,%ecx
   2e70e:	0f 85 3b 01 00 00    	jne    2e84f <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2df>
   2e714:	8d 43 ff             	lea    -0x1(%rbx),%eax
   2e717:	89 44 24 34          	mov    %eax,0x34(%rsp)
   for (i=0; i < x*y; ++i) {
   2e71b:	45 85 f6             	test   %r14d,%r14d
   2e71e:	0f 84 1c 01 00 00    	je     2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
   2e724:	85 c0                	test   %eax,%eax
   2e726:	0f 8e 8e 01 00 00    	jle    2e8ba <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x34a>
   2e72c:	48 63 44 24 34       	movslq 0x34(%rsp),%rax
   2e731:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
   2e736:	45 31 e4             	xor    %r12d,%r12d
   2e739:	31 ed                	xor    %ebp,%ebp
   2e73b:	f3 0f 10 25 5d a3 00 	movss  0xa35d(%rip),%xmm4        # 38aa0 <_ZL11stbi__bmask+0x320>
   2e742:	00 
   2e743:	4c 63 74 24 2c       	movslq 0x2c(%rsp),%r14
   2e748:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
   2e74d:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
   2e751:	f3 0f 11 64 24 14    	movss  %xmm4,0x14(%rsp)
   2e757:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2e75e:	00 00 
      for (k=0; k < n; ++k) {
   2e760:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
         output[i*comp + k] = (float) (pow(data[i*comp+k]/255.0f, stbi__l2h_gamma) * stbi__l2h_scale);
   2e765:	f3 0f 10 2d 57 2e 01 	movss  0x12e57(%rip),%xmm5        # 415c4 <_ZL15stbi__l2h_scale>
   2e76c:	00 
   2e76d:	f3 0f 10 0d 53 2e 01 	movss  0x12e53(%rip),%xmm1        # 415c8 <_ZL15stbi__l2h_gamma>
   2e774:	00 
   2e775:	4c 8d 3c 28          	lea    (%rax,%rbp,1),%r15
   2e779:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2e77e:	f3 0f 11 6c 24 10    	movss  %xmm5,0x10(%rsp)
   2e784:	4c 8d 2c a8          	lea    (%rax,%rbp,4),%r13
   2e788:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2e78f:	00 
   2e790:	41 0f b6 0f          	movzbl (%r15),%ecx
   2e794:	66 0f ef c0          	pxor   %xmm0,%xmm0
      for (k=0; k < n; ++k) {
   2e798:	49 83 c7 01          	add    $0x1,%r15
   2e79c:	49 83 c5 04          	add    $0x4,%r13
   2e7a0:	f3 0f 11 4c 24 0c    	movss  %xmm1,0xc(%rsp)
         output[i*comp + k] = (float) (pow(data[i*comp+k]/255.0f, stbi__l2h_gamma) * stbi__l2h_scale);
   2e7a6:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
   2e7aa:	f3 0f 5e 44 24 14    	divss  0x14(%rsp),%xmm0
   2e7b0:	e8 3b 81 fd ff       	call   68f0 <powf@plt>
   2e7b5:	f3 0f 59 44 24 10    	mulss  0x10(%rsp),%xmm0
      for (k=0; k < n; ++k) {
   2e7bb:	f3 0f 10 4c 24 0c    	movss  0xc(%rsp),%xmm1
         output[i*comp + k] = (float) (pow(data[i*comp+k]/255.0f, stbi__l2h_gamma) * stbi__l2h_scale);
   2e7c1:	f3 41 0f 11 45 fc    	movss  %xmm0,-0x4(%r13)
      for (k=0; k < n; ++k) {
   2e7c7:	49 39 df             	cmp    %rbx,%r15
   2e7ca:	75 c4                	jne    2e790 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x220>
   for (i=0; i < x*y; ++i) {
   2e7cc:	8b 44 24 28          	mov    0x28(%rsp),%eax
   2e7d0:	41 83 c4 01          	add    $0x1,%r12d
   2e7d4:	4b 8d 1c 37          	lea    (%r15,%r14,1),%rbx
   2e7d8:	4c 01 f5             	add    %r14,%rbp
   2e7db:	41 39 c4             	cmp    %eax,%r12d
   2e7de:	7c 80                	jl     2e760 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x1f0>
   if (n < comp) {
   2e7e0:	8b 54 24 34          	mov    0x34(%rsp),%edx
   2e7e4:	39 54 24 2c          	cmp    %edx,0x2c(%rsp)
   2e7e8:	7e 56                	jle    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
   2e7ea:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
   2e7ef:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   2e7f4:	4a 8d 34 b5 00 00 00 	lea    0x0(,%r14,4),%rsi
   2e7fb:	00 
   2e7fc:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   2e801:	48 01 c2             	add    %rax,%rdx
   2e804:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
   2e808:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2e80f:	00 
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2e810:	0f b6 0a             	movzbl (%rdx),%ecx
      for (i=0; i < x*y; ++i) {
   2e813:	83 44 24 30 01       	addl   $0x1,0x30(%rsp)
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2e818:	66 0f ef c0          	pxor   %xmm0,%xmm0
      for (i=0; i < x*y; ++i) {
   2e81c:	4c 01 f2             	add    %r14,%rdx
   2e81f:	8b 7c 24 30          	mov    0x30(%rsp),%edi
   2e823:	8b 5c 24 28          	mov    0x28(%rsp),%ebx
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2e827:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
   2e82b:	f3 0f 5e 44 24 14    	divss  0x14(%rsp),%xmm0
   2e831:	f3 0f 11 00          	movss  %xmm0,(%rax)
      for (i=0; i < x*y; ++i) {
   2e835:	48 01 f0             	add    %rsi,%rax
   2e838:	39 df                	cmp    %ebx,%edi
   2e83a:	7c d4                	jl     2e810 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2a0>
   2e83c:	0f 1f 40 00          	nopl   0x0(%rax)
   STBI_FREE(data);
   2e840:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   2e845:	e8 56 7e fd ff       	call   66a0 <free@plt>
   return output;
   2e84a:	e9 04 fe ff ff       	jmp    2e653 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xe3>
   for (i=0; i < x*y; ++i) {
   2e84f:	8b 54 24 28          	mov    0x28(%rsp),%edx
   2e853:	85 d2                	test   %edx,%edx
   2e855:	74 e9                	je     2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
   2e857:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
   2e85b:	89 44 24 34          	mov    %eax,0x34(%rsp)
   2e85f:	85 c0                	test   %eax,%eax
   2e861:	0f 8f c5 fe ff ff    	jg     2e72c <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x1bc>
   2e867:	eb d7                	jmp    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
   stbi__g_failure_reason = str;
   2e869:	48 8d 05 34 96 00 00 	lea    0x9634(%rip),%rax        # 37ea4 <_ZSt19piecewise_construct+0x55d>
   2e870:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2e877:	ff ff 
   return stbi__errpf("unknown image type", "Image not of any known type, or corrupt");
   2e879:	e9 cc fd ff ff       	jmp    2e64a <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xda>
    return STBI_MALLOC(size);
   2e87e:	31 ff                	xor    %edi,%edi
   2e880:	e8 db 7e fd ff       	call   6760 <malloc@plt>
   2e885:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   if (output == NULL) { STBI_FREE(data); return stbi__errpf("outofmem", "Out of memory"); }
   2e88a:	48 85 c0             	test   %rax,%rax
   2e88d:	0f 84 9d fd ff ff    	je     2e630 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0xc0>
   for (i=0; i < x*y; ++i) {
   2e893:	8b 44 24 28          	mov    0x28(%rsp),%eax
   2e897:	85 c0                	test   %eax,%eax
   2e899:	74 a5                	je     2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
   2e89b:	f3 0f 10 1d fd a1 00 	movss  0xa1fd(%rip),%xmm3        # 38aa0 <_ZL11stbi__bmask+0x320>
   2e8a2:	00 
   2e8a3:	45 31 f6             	xor    %r14d,%r14d
   2e8a6:	48 c7 44 24 38 ff ff 	movq   $0xffffffffffffffff,0x38(%rsp)
   2e8ad:	ff ff 
   2e8af:	f3 0f 11 5c 24 14    	movss  %xmm3,0x14(%rsp)
   2e8b5:	e9 30 ff ff ff       	jmp    2e7ea <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x27a>
   if (n < comp) {
   2e8ba:	83 7c 24 2c 01       	cmpl   $0x1,0x2c(%rsp)
   2e8bf:	0f 85 33 03 00 00    	jne    2ebf8 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x688>
   2e8c5:	83 7c 24 28 07       	cmpl   $0x7,0x28(%rsp)
   2e8ca:	0f 8e 12 03 00 00    	jle    2ebe2 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x672>
   2e8d0:	48 63 7c 24 28       	movslq 0x28(%rsp),%rdi
   2e8d5:	48 63 5c 24 34       	movslq 0x34(%rsp),%rbx
   2e8da:	41 b9 04 00 00 00    	mov    $0x4,%r9d
   2e8e0:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
   2e8e5:	4c 8b 74 24 18       	mov    0x18(%rsp),%r14
   2e8ea:	85 ff                	test   %edi,%edi
   2e8ec:	48 8d 34 bd 00 00 00 	lea    0x0(,%rdi,4),%rsi
   2e8f3:	00 
   2e8f4:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
   2e8f9:	4c 8d 04 9d 00 00 00 	lea    0x0(,%rbx,4),%r8
   2e900:	00 
   2e901:	49 0f 4e f1          	cmovle %r9,%rsi
   2e905:	49 8d 14 1e          	lea    (%r14,%rbx,1),%rdx
   2e909:	4b 8d 04 03          	lea    (%r11,%r8,1),%rax
   2e90d:	4c 01 c6             	add    %r8,%rsi
   2e910:	4c 01 de             	add    %r11,%rsi
   2e913:	48 39 f2             	cmp    %rsi,%rdx
   2e916:	73 66                	jae    2e97e <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x40e>
   2e918:	85 ff                	test   %edi,%edi
   2e91a:	be 01 00 00 00       	mov    $0x1,%esi
   2e91f:	48 0f 4f f7          	cmovg  %rdi,%rsi
   2e923:	48 01 de             	add    %rbx,%rsi
   2e926:	4c 01 f6             	add    %r14,%rsi
   2e929:	48 39 f0             	cmp    %rsi,%rax
   2e92c:	73 50                	jae    2e97e <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x40e>
   2e92e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   2e933:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
   2e938:	f3 0f 10 25 60 a1 00 	movss  0xa160(%rip),%xmm4        # 38aa0 <_ZL11stbi__bmask+0x320>
   2e93f:	00 
   2e940:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   2e945:	48 8d 34 90          	lea    (%rax,%rdx,4),%rsi
   for (i=0; i < x*y; ++i) {
   2e949:	31 c0                	xor    %eax,%eax
   2e94b:	f3 0f 11 64 24 14    	movss  %xmm4,0x14(%rsp)
   2e951:	48 8d 0c 17          	lea    (%rdi,%rdx,1),%rcx
   2e955:	0f 1f 00             	nopl   (%rax)
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2e958:	0f b6 14 01          	movzbl (%rcx,%rax,1),%edx
   2e95c:	66 0f ef c0          	pxor   %xmm0,%xmm0
   2e960:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   2e964:	f3 0f 5e 44 24 14    	divss  0x14(%rsp),%xmm0
   2e96a:	f3 0f 11 04 86       	movss  %xmm0,(%rsi,%rax,4)
      for (i=0; i < x*y; ++i) {
   2e96f:	48 83 c0 01          	add    $0x1,%rax
   2e973:	39 44 24 28          	cmp    %eax,0x28(%rsp)
   2e977:	7f df                	jg     2e958 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x3e8>
   2e979:	e9 c2 fe ff ff       	jmp    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
   2e97e:	8b 7c 24 28          	mov    0x28(%rsp),%edi
   2e982:	be 01 00 00 00       	mov    $0x1,%esi
   2e987:	85 ff                	test   %edi,%edi
   2e989:	0f 4f f7             	cmovg  %edi,%esi
   2e98c:	83 ff 0f             	cmp    $0xf,%edi
   2e98f:	0f 8e 5c 02 00 00    	jle    2ebf1 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x681>
   2e995:	89 f1                	mov    %esi,%ecx
   2e997:	f3 0f 10 25 01 a1 00 	movss  0xa101(%rip),%xmm4        # 38aa0 <_ZL11stbi__bmask+0x320>
   2e99e:	00 
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2e99f:	66 0f ef ed          	pxor   %xmm5,%xmm5
   2e9a3:	c1 e9 04             	shr    $0x4,%ecx
   2e9a6:	66 0f ef db          	pxor   %xmm3,%xmm3
   2e9aa:	48 c1 e1 04          	shl    $0x4,%rcx
   2e9ae:	0f c6 e4 00          	shufps $0x0,%xmm4,%xmm4
   2e9b2:	48 01 d1             	add    %rdx,%rcx
   2e9b5:	0f 1f 00             	nopl   (%rax)
   2e9b8:	f3 0f 6f 02          	movdqu (%rdx),%xmm0
   2e9bc:	48 83 c2 10          	add    $0x10,%rdx
   2e9c0:	48 83 c0 40          	add    $0x40,%rax
   2e9c4:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2e9c8:	66 0f 68 c5          	punpckhbw %xmm5,%xmm0
   2e9cc:	66 0f 60 cd          	punpcklbw %xmm5,%xmm1
   2e9d0:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   2e9d4:	66 0f 69 cb          	punpckhwd %xmm3,%xmm1
   2e9d8:	0f 5b c9             	cvtdq2ps %xmm1,%xmm1
   2e9db:	0f 5e cc             	divps  %xmm4,%xmm1
   2e9de:	66 0f 61 d3          	punpcklwd %xmm3,%xmm2
   2e9e2:	0f 5b d2             	cvtdq2ps %xmm2,%xmm2
   2e9e5:	0f 5e d4             	divps  %xmm4,%xmm2
   2e9e8:	0f 11 48 d0          	movups %xmm1,-0x30(%rax)
   2e9ec:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2e9f0:	66 0f 69 c3          	punpckhwd %xmm3,%xmm0
   2e9f4:	66 0f 61 cb          	punpcklwd %xmm3,%xmm1
   2e9f8:	0f 5b c0             	cvtdq2ps %xmm0,%xmm0
   2e9fb:	0f 5b c9             	cvtdq2ps %xmm1,%xmm1
   2e9fe:	0f 5e c4             	divps  %xmm4,%xmm0
   2ea01:	0f 11 50 c0          	movups %xmm2,-0x40(%rax)
   2ea05:	0f 5e cc             	divps  %xmm4,%xmm1
   2ea08:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
   2ea0c:	0f 11 48 e0          	movups %xmm1,-0x20(%rax)
   2ea10:	48 39 d1             	cmp    %rdx,%rcx
   2ea13:	75 a3                	jne    2e9b8 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x448>
   2ea15:	89 f2                	mov    %esi,%edx
   2ea17:	83 e2 f0             	and    $0xfffffff0,%edx
   2ea1a:	89 d1                	mov    %edx,%ecx
   2ea1c:	40 f6 c6 0f          	test   $0xf,%sil
   2ea20:	0f 84 1a fe ff ff    	je     2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
   2ea26:	89 f0                	mov    %esi,%eax
   2ea28:	29 d0                	sub    %edx,%eax
   2ea2a:	8d 70 ff             	lea    -0x1(%rax),%esi
   2ea2d:	83 fe 06             	cmp    $0x6,%esi
   2ea30:	0f 86 93 00 00 00    	jbe    2eac9 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x559>
   2ea36:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
   2ea3b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   2ea40:	66 0f ef d2          	pxor   %xmm2,%xmm2
   2ea44:	66 0f ef e4          	pxor   %xmm4,%xmm4
   2ea48:	0f 28 1d 51 a0 00 00 	movaps 0xa051(%rip),%xmm3        # 38aa0 <_ZL11stbi__bmask+0x320>
   2ea4f:	48 01 d6             	add    %rdx,%rsi
   2ea52:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
   2ea57:	f3 0f 7e 04 37       	movq   (%rdi,%rsi,1),%xmm0
   2ea5c:	48 8d 14 b2          	lea    (%rdx,%rsi,4),%rdx
   2ea60:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2ea64:	66 0f 60 c2          	punpcklbw %xmm2,%xmm0
   2ea68:	66 0f 60 ca          	punpcklbw %xmm2,%xmm1
   2ea6c:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   2ea71:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   2ea75:	66 0f 61 cc          	punpcklwd %xmm4,%xmm1
   2ea79:	66 0f 70 c9 4e       	pshufd $0x4e,%xmm1,%xmm1
   2ea7e:	66 0f 61 d4          	punpcklwd %xmm4,%xmm2
   2ea82:	0f 5b c9             	cvtdq2ps %xmm1,%xmm1
   2ea85:	0f 5e cb             	divps  %xmm3,%xmm1
   2ea88:	0f 5b d2             	cvtdq2ps %xmm2,%xmm2
   2ea8b:	0f 5e d3             	divps  %xmm3,%xmm2
   2ea8e:	0f 13 4a 08          	movlps %xmm1,0x8(%rdx)
   2ea92:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2ea96:	66 0f 61 c4          	punpcklwd %xmm4,%xmm0
   2ea9a:	66 0f 61 cc          	punpcklwd %xmm4,%xmm1
   2ea9e:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   2eaa3:	0f 5b c9             	cvtdq2ps %xmm1,%xmm1
   2eaa6:	0f 5b c0             	cvtdq2ps %xmm0,%xmm0
   2eaa9:	0f 5e cb             	divps  %xmm3,%xmm1
   2eaac:	0f 13 12             	movlps %xmm2,(%rdx)
   2eaaf:	0f 5e c3             	divps  %xmm3,%xmm0
   2eab2:	0f 13 4a 10          	movlps %xmm1,0x10(%rdx)
   2eab6:	0f 13 42 18          	movlps %xmm0,0x18(%rdx)
      for (i=0; i < x*y; ++i) {
   2eaba:	89 c2                	mov    %eax,%edx
   2eabc:	83 e2 f8             	and    $0xfffffff8,%edx
   2eabf:	01 d1                	add    %edx,%ecx
   2eac1:	a8 07                	test   $0x7,%al
   2eac3:	0f 84 77 fd ff ff    	je     2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2eac9:	8b 74 24 34          	mov    0x34(%rsp),%esi
   2eacd:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   2ead2:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2ead6:	f3 0f 10 05 c2 9f 00 	movss  0x9fc2(%rip),%xmm0        # 38aa0 <_ZL11stbi__bmask+0x320>
   2eadd:	00 
   2eade:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
   2eae3:	8d 04 0e             	lea    (%rsi,%rcx,1),%eax
      for (i=0; i < x*y; ++i) {
   2eae6:	44 8b 4c 24 28       	mov    0x28(%rsp),%r9d
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2eaeb:	48 98                	cltq
   2eaed:	0f b6 14 07          	movzbl (%rdi,%rax,1),%edx
   2eaf1:	f3 0f 2a ca          	cvtsi2ss %edx,%xmm1
   2eaf5:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   2eaf9:	f3 0f 11 0c 83       	movss  %xmm1,(%rbx,%rax,4)
      for (i=0; i < x*y; ++i) {
   2eafe:	8d 41 01             	lea    0x1(%rcx),%eax
   2eb01:	41 39 c1             	cmp    %eax,%r9d
   2eb04:	0f 8e 36 fd ff ff    	jle    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2eb0a:	01 f0                	add    %esi,%eax
   2eb0c:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2eb10:	48 98                	cltq
   2eb12:	0f b6 14 07          	movzbl (%rdi,%rax,1),%edx
   2eb16:	f3 0f 2a ca          	cvtsi2ss %edx,%xmm1
   2eb1a:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   2eb1e:	f3 0f 11 0c 83       	movss  %xmm1,(%rbx,%rax,4)
      for (i=0; i < x*y; ++i) {
   2eb23:	8d 41 02             	lea    0x2(%rcx),%eax
   2eb26:	41 39 c1             	cmp    %eax,%r9d
   2eb29:	0f 8e 11 fd ff ff    	jle    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2eb2f:	01 f0                	add    %esi,%eax
   2eb31:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2eb35:	48 98                	cltq
   2eb37:	0f b6 14 07          	movzbl (%rdi,%rax,1),%edx
   2eb3b:	f3 0f 2a ca          	cvtsi2ss %edx,%xmm1
   2eb3f:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   2eb43:	f3 0f 11 0c 83       	movss  %xmm1,(%rbx,%rax,4)
      for (i=0; i < x*y; ++i) {
   2eb48:	8d 41 03             	lea    0x3(%rcx),%eax
   2eb4b:	41 39 c1             	cmp    %eax,%r9d
   2eb4e:	0f 8e ec fc ff ff    	jle    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2eb54:	01 f0                	add    %esi,%eax
   2eb56:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2eb5a:	48 98                	cltq
   2eb5c:	0f b6 14 07          	movzbl (%rdi,%rax,1),%edx
   2eb60:	f3 0f 2a ca          	cvtsi2ss %edx,%xmm1
   2eb64:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   2eb68:	f3 0f 11 0c 83       	movss  %xmm1,(%rbx,%rax,4)
      for (i=0; i < x*y; ++i) {
   2eb6d:	8d 41 04             	lea    0x4(%rcx),%eax
   2eb70:	41 39 c1             	cmp    %eax,%r9d
   2eb73:	0f 8e c7 fc ff ff    	jle    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2eb79:	01 f0                	add    %esi,%eax
   2eb7b:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2eb7f:	48 98                	cltq
   2eb81:	0f b6 14 07          	movzbl (%rdi,%rax,1),%edx
   2eb85:	f3 0f 2a ca          	cvtsi2ss %edx,%xmm1
   2eb89:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   2eb8d:	f3 0f 11 0c 83       	movss  %xmm1,(%rbx,%rax,4)
      for (i=0; i < x*y; ++i) {
   2eb92:	8d 41 05             	lea    0x5(%rcx),%eax
   2eb95:	41 39 c1             	cmp    %eax,%r9d
   2eb98:	0f 8e a2 fc ff ff    	jle    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2eb9e:	01 f0                	add    %esi,%eax
   2eba0:	66 0f ef c9          	pxor   %xmm1,%xmm1
      for (i=0; i < x*y; ++i) {
   2eba4:	83 c1 06             	add    $0x6,%ecx
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2eba7:	48 98                	cltq
   2eba9:	0f b6 14 07          	movzbl (%rdi,%rax,1),%edx
   2ebad:	f3 0f 2a ca          	cvtsi2ss %edx,%xmm1
   2ebb1:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   2ebb5:	f3 0f 11 0c 83       	movss  %xmm1,(%rbx,%rax,4)
      for (i=0; i < x*y; ++i) {
   2ebba:	41 39 c9             	cmp    %ecx,%r9d
   2ebbd:	0f 8e 7d fc ff ff    	jle    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
         output[i*comp + n] = data[i*comp + n]/255.0f;
   2ebc3:	01 ce                	add    %ecx,%esi
   2ebc5:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2ebc9:	48 63 c6             	movslq %esi,%rax
   2ebcc:	0f b6 14 07          	movzbl (%rdi,%rax,1),%edx
   2ebd0:	f3 0f 2a ca          	cvtsi2ss %edx,%xmm1
   2ebd4:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   2ebd8:	f3 0f 11 0c 83       	movss  %xmm1,(%rbx,%rax,4)
      for (i=0; i < x*y; ++i) {
   2ebdd:	e9 5e fc ff ff       	jmp    2e840 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x2d0>
   2ebe2:	48 63 44 24 34       	movslq 0x34(%rsp),%rax
   2ebe7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
   2ebec:	e9 3d fd ff ff       	jmp    2e92e <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x3be>
   for (i=0; i < x*y; ++i) {
   2ebf1:	31 d2                	xor    %edx,%edx
   2ebf3:	e9 2e fe ff ff       	jmp    2ea26 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x4b6>
   2ebf8:	f3 0f 10 1d a0 9e 00 	movss  0x9ea0(%rip),%xmm3        # 38aa0 <_ZL11stbi__bmask+0x320>
   2ebff:	00 
   2ec00:	48 98                	cltq
   2ec02:	4c 63 74 24 2c       	movslq 0x2c(%rsp),%r14
   2ec07:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
   2ec0c:	f3 0f 11 5c 24 14    	movss  %xmm3,0x14(%rsp)
   2ec12:	e9 d3 fb ff ff       	jmp    2e7ea <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i+0x27a>
   2ec17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2ec1e:	00 00 

000000000002ec20 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i>:
{
   2ec20:	41 57                	push   %r15
   2ec22:	41 56                	push   %r14
   2ec24:	49 89 ce             	mov    %rcx,%r14
   2ec27:	41 55                	push   %r13
   2ec29:	49 89 d5             	mov    %rdx,%r13
   2ec2c:	41 54                	push   %r12
   2ec2e:	49 89 f4             	mov    %rsi,%r12
   2ec31:	55                   	push   %rbp
   2ec32:	44 89 c5             	mov    %r8d,%ebp
   2ec35:	53                   	push   %rbx
   2ec36:	48 83 ec 30          	sub    $0x30,%rsp
   void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 16);
   2ec3a:	6a 10                	push   $0x10
   2ec3c:	4c 8d 4c 24 24       	lea    0x24(%rsp),%r9
   2ec41:	e8 da b3 ff ff       	call   2a020 <_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi>
   if (result == NULL)
   2ec46:	59                   	pop    %rcx
   2ec47:	5e                   	pop    %rsi
   void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 16);
   2ec48:	48 89 c3             	mov    %rax,%rbx
   if (result == NULL)
   2ec4b:	48 85 c0             	test   %rax,%rax
   2ec4e:	0f 84 d1 00 00 00    	je     2ed25 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x105>
   if (ri.bits_per_channel != 16) {
   2ec54:	83 7c 24 14 10       	cmpl   $0x10,0x14(%rsp)
   2ec59:	0f 84 8d 00 00 00    	je     2ecec <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xcc>
      result = stbi__convert_8_to_16((stbi_uc *) result, *x, *y, req_comp == 0 ? *comp : req_comp);
   2ec5f:	89 e8                	mov    %ebp,%eax
   2ec61:	85 ed                	test   %ebp,%ebp
   2ec63:	0f 84 d7 00 00 00    	je     2ed40 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x120>
   int img_len = w * h * channels;
   2ec69:	41 8b 55 00          	mov    0x0(%r13),%edx
   2ec6d:	41 0f af 14 24       	imul   (%r12),%edx
   2ec72:	0f af d0             	imul   %eax,%edx
   enlarged = (stbi__uint16 *) stbi__malloc(img_len*2);
   2ec75:	8d 3c 12             	lea    (%rdx,%rdx,1),%edi
   2ec78:	89 54 24 0c          	mov    %edx,0xc(%rsp)
   2ec7c:	48 63 ff             	movslq %edi,%rdi
    return STBI_MALLOC(size);
   2ec7f:	e8 dc 7a fd ff       	call   6760 <malloc@plt>
   2ec84:	49 89 c7             	mov    %rax,%r15
   if (enlarged == NULL) return (stbi__uint16 *) stbi__errpuc("outofmem", "Out of memory");
   2ec87:	48 85 c0             	test   %rax,%rax
   2ec8a:	0f 84 6c 02 00 00    	je     2eefc <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x2dc>
   for (i = 0; i < img_len; ++i)
   2ec90:	8b 54 24 0c          	mov    0xc(%rsp),%edx
   2ec94:	85 d2                	test   %edx,%edx
   2ec96:	7e 49                	jle    2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
   2ec98:	8d 42 ff             	lea    -0x1(%rdx),%eax
   2ec9b:	89 d7                	mov    %edx,%edi
   2ec9d:	48 63 f2             	movslq %edx,%rsi
   2eca0:	83 f8 06             	cmp    $0x6,%eax
   2eca3:	76 1a                	jbe    2ecbf <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x9f>
   2eca5:	49 8d 0c 77          	lea    (%r15,%rsi,2),%rcx
   2eca9:	48 39 cb             	cmp    %rcx,%rbx
   2ecac:	0f 83 9e 00 00 00    	jae    2ed50 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x130>
   2ecb2:	48 8d 0c 33          	lea    (%rbx,%rsi,1),%rcx
   2ecb6:	49 39 cf             	cmp    %rcx,%r15
   2ecb9:	0f 83 91 00 00 00    	jae    2ed50 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x130>
   2ecbf:	31 c0                	xor    %eax,%eax
   2ecc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2ecc8:	0f b6 0c 03          	movzbl (%rbx,%rax,1),%ecx
   2eccc:	89 ca                	mov    %ecx,%edx
   2ecce:	c1 e2 08             	shl    $0x8,%edx
   2ecd1:	01 ca                	add    %ecx,%edx
   2ecd3:	66 41 89 14 47       	mov    %dx,(%r15,%rax,2)
   for (i = 0; i < img_len; ++i)
   2ecd8:	48 83 c0 01          	add    $0x1,%rax
   2ecdc:	48 39 c6             	cmp    %rax,%rsi
   2ecdf:	75 e7                	jne    2ecc8 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xa8>
   STBI_FREE(orig);
   2ece1:	48 89 df             	mov    %rbx,%rdi
   return enlarged;
   2ece4:	4c 89 fb             	mov    %r15,%rbx
   STBI_FREE(orig);
   2ece7:	e8 b4 79 fd ff       	call   66a0 <free@plt>
   if (stbi__vertically_flip_on_load) {
   2ecec:	64 8b 14 25 f0 ff ff 	mov    %fs:0xfffffffffffffff0,%edx
   2ecf3:	ff 
   2ecf4:	8b 05 0e 2b 01 00    	mov    0x12b0e(%rip),%eax        # 41808 <_ZL36stbi__vertically_flip_on_load_global>
   2ecfa:	85 d2                	test   %edx,%edx
   2ecfc:	74 08                	je     2ed06 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xe6>
   2ecfe:	64 8b 04 25 f4 ff ff 	mov    %fs:0xfffffffffffffff4,%eax
   2ed05:	ff 
   2ed06:	85 c0                	test   %eax,%eax
   2ed08:	74 1b                	je     2ed25 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x105>
      int channels = req_comp ? req_comp : *comp;
   2ed0a:	85 ed                	test   %ebp,%ebp
   2ed0c:	75 03                	jne    2ed11 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xf1>
   2ed0e:	41 8b 2e             	mov    (%r14),%ebp
      stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi__uint16));
   2ed11:	41 8b 55 00          	mov    0x0(%r13),%edx
   2ed15:	41 8b 34 24          	mov    (%r12),%esi
   2ed19:	8d 4c 2d 00          	lea    0x0(%rbp,%rbp,1),%ecx
   2ed1d:	48 89 df             	mov    %rbx,%rdi
   2ed20:	e8 2b 2f fe ff       	call   11c50 <_ZL19stbi__vertical_flipPviii>
}
   2ed25:	48 83 c4 28          	add    $0x28,%rsp
   2ed29:	48 89 d8             	mov    %rbx,%rax
   2ed2c:	5b                   	pop    %rbx
   2ed2d:	5d                   	pop    %rbp
   2ed2e:	41 5c                	pop    %r12
   2ed30:	41 5d                	pop    %r13
   2ed32:	41 5e                	pop    %r14
   2ed34:	41 5f                	pop    %r15
   2ed36:	c3                   	ret
   2ed37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2ed3e:	00 00 
      result = stbi__convert_8_to_16((stbi_uc *) result, *x, *y, req_comp == 0 ? *comp : req_comp);
   2ed40:	41 8b 06             	mov    (%r14),%eax
   2ed43:	e9 21 ff ff ff       	jmp    2ec69 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x49>
   2ed48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2ed4f:	00 
   2ed50:	83 f8 0e             	cmp    $0xe,%eax
   2ed53:	0f 86 9a 01 00 00    	jbe    2eef3 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x2d3>
   2ed59:	89 d1                	mov    %edx,%ecx
   for (i = 0; i < img_len; ++i)
   2ed5b:	31 c0                	xor    %eax,%eax
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2ed5d:	66 0f ef db          	pxor   %xmm3,%xmm3
   2ed61:	c1 e9 04             	shr    $0x4,%ecx
   2ed64:	48 c1 e1 04          	shl    $0x4,%rcx
   2ed68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2ed6f:	00 
   2ed70:	f3 0f 6f 04 03       	movdqu (%rbx,%rax,1),%xmm0
   2ed75:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   2ed79:	66 0f 68 c3          	punpckhbw %xmm3,%xmm0
   2ed7d:	66 0f 60 d3          	punpcklbw %xmm3,%xmm2
   2ed81:	66 0f 6f ca          	movdqa %xmm2,%xmm1
   2ed85:	66 0f 71 f1 08       	psllw  $0x8,%xmm1
   2ed8a:	66 0f fd ca          	paddw  %xmm2,%xmm1
   2ed8e:	41 0f 11 0c 47       	movups %xmm1,(%r15,%rax,2)
   2ed93:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2ed97:	66 0f 71 f1 08       	psllw  $0x8,%xmm1
   2ed9c:	66 0f fd c1          	paddw  %xmm1,%xmm0
   2eda0:	41 0f 11 44 47 10    	movups %xmm0,0x10(%r15,%rax,2)
   for (i = 0; i < img_len; ++i)
   2eda6:	48 83 c0 10          	add    $0x10,%rax
   2edaa:	48 39 c8             	cmp    %rcx,%rax
   2edad:	75 c1                	jne    2ed70 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x150>
   2edaf:	89 d0                	mov    %edx,%eax
   2edb1:	83 e0 f0             	and    $0xfffffff0,%eax
   2edb4:	89 c1                	mov    %eax,%ecx
   2edb6:	39 c2                	cmp    %eax,%edx
   2edb8:	0f 84 23 ff ff ff    	je     2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
   2edbe:	89 d7                	mov    %edx,%edi
   2edc0:	29 c7                	sub    %eax,%edi
   2edc2:	8d 77 ff             	lea    -0x1(%rdi),%esi
   2edc5:	83 fe 06             	cmp    $0x6,%esi
   2edc8:	76 51                	jbe    2ee1b <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x1fb>
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2edca:	f3 0f 7e 04 0b       	movq   (%rbx,%rcx,1),%xmm0
   2edcf:	66 0f ef d2          	pxor   %xmm2,%xmm2
   2edd3:	49 8d 34 4f          	lea    (%r15,%rcx,2),%rsi
   2edd7:	89 f9                	mov    %edi,%ecx
   2edd9:	83 e1 f8             	and    $0xfffffff8,%ecx
   2eddc:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   2ede0:	66 0f 60 c2          	punpcklbw %xmm2,%xmm0
   2ede4:	01 c8                	add    %ecx,%eax
   2ede6:	83 e7 07             	and    $0x7,%edi
   2ede9:	66 0f 60 da          	punpcklbw %xmm2,%xmm3
   2eded:	66 0f 70 c0 4e       	pshufd $0x4e,%xmm0,%xmm0
   2edf2:	66 0f 6f cb          	movdqa %xmm3,%xmm1
   2edf6:	66 0f 71 f1 08       	psllw  $0x8,%xmm1
   2edfb:	66 0f fd cb          	paddw  %xmm3,%xmm1
   2edff:	66 0f d6 0e          	movq   %xmm1,(%rsi)
   2ee03:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2ee07:	66 0f 71 f1 08       	psllw  $0x8,%xmm1
   2ee0c:	66 0f fd c1          	paddw  %xmm1,%xmm0
   2ee10:	66 0f d6 46 08       	movq   %xmm0,0x8(%rsi)
   for (i = 0; i < img_len; ++i)
   2ee15:	0f 84 c6 fe ff ff    	je     2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2ee1b:	48 63 f0             	movslq %eax,%rsi
   2ee1e:	44 0f b6 04 33       	movzbl (%rbx,%rsi,1),%r8d
   2ee23:	48 8d 0c 36          	lea    (%rsi,%rsi,1),%rcx
   2ee27:	44 89 c7             	mov    %r8d,%edi
   2ee2a:	c1 e7 08             	shl    $0x8,%edi
   2ee2d:	44 01 c7             	add    %r8d,%edi
   2ee30:	66 41 89 3c 77       	mov    %di,(%r15,%rsi,2)
   for (i = 0; i < img_len; ++i)
   2ee35:	8d 70 01             	lea    0x1(%rax),%esi
   2ee38:	39 f2                	cmp    %esi,%edx
   2ee3a:	0f 8e a1 fe ff ff    	jle    2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2ee40:	48 63 f6             	movslq %esi,%rsi
   2ee43:	0f b6 3c 33          	movzbl (%rbx,%rsi,1),%edi
   2ee47:	89 fe                	mov    %edi,%esi
   2ee49:	c1 e6 08             	shl    $0x8,%esi
   2ee4c:	01 fe                	add    %edi,%esi
   2ee4e:	66 41 89 74 0f 02    	mov    %si,0x2(%r15,%rcx,1)
   for (i = 0; i < img_len; ++i)
   2ee54:	8d 70 02             	lea    0x2(%rax),%esi
   2ee57:	39 d6                	cmp    %edx,%esi
   2ee59:	0f 8d 82 fe ff ff    	jge    2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2ee5f:	48 63 f6             	movslq %esi,%rsi
   2ee62:	0f b6 3c 33          	movzbl (%rbx,%rsi,1),%edi
   2ee66:	89 fe                	mov    %edi,%esi
   2ee68:	c1 e6 08             	shl    $0x8,%esi
   2ee6b:	01 fe                	add    %edi,%esi
   2ee6d:	66 41 89 74 0f 04    	mov    %si,0x4(%r15,%rcx,1)
   for (i = 0; i < img_len; ++i)
   2ee73:	8d 70 03             	lea    0x3(%rax),%esi
   2ee76:	39 f2                	cmp    %esi,%edx
   2ee78:	0f 8e 63 fe ff ff    	jle    2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2ee7e:	48 63 f6             	movslq %esi,%rsi
   2ee81:	0f b6 3c 33          	movzbl (%rbx,%rsi,1),%edi
   2ee85:	89 fe                	mov    %edi,%esi
   2ee87:	c1 e6 08             	shl    $0x8,%esi
   2ee8a:	01 fe                	add    %edi,%esi
   2ee8c:	66 41 89 74 0f 06    	mov    %si,0x6(%r15,%rcx,1)
   for (i = 0; i < img_len; ++i)
   2ee92:	8d 70 04             	lea    0x4(%rax),%esi
   2ee95:	39 f2                	cmp    %esi,%edx
   2ee97:	0f 8e 44 fe ff ff    	jle    2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2ee9d:	48 63 f6             	movslq %esi,%rsi
   2eea0:	0f b6 3c 33          	movzbl (%rbx,%rsi,1),%edi
   2eea4:	89 fe                	mov    %edi,%esi
   2eea6:	c1 e6 08             	shl    $0x8,%esi
   2eea9:	01 fe                	add    %edi,%esi
   2eeab:	66 41 89 74 0f 08    	mov    %si,0x8(%r15,%rcx,1)
   for (i = 0; i < img_len; ++i)
   2eeb1:	8d 70 05             	lea    0x5(%rax),%esi
   2eeb4:	39 f2                	cmp    %esi,%edx
   2eeb6:	0f 8e 25 fe ff ff    	jle    2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2eebc:	48 63 f6             	movslq %esi,%rsi
   for (i = 0; i < img_len; ++i)
   2eebf:	83 c0 06             	add    $0x6,%eax
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2eec2:	0f b6 3c 33          	movzbl (%rbx,%rsi,1),%edi
   2eec6:	89 fe                	mov    %edi,%esi
   2eec8:	c1 e6 08             	shl    $0x8,%esi
   2eecb:	01 fe                	add    %edi,%esi
   2eecd:	66 41 89 74 0f 0a    	mov    %si,0xa(%r15,%rcx,1)
   for (i = 0; i < img_len; ++i)
   2eed3:	39 c2                	cmp    %eax,%edx
   2eed5:	0f 8e 06 fe ff ff    	jle    2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]); // replicate to high and low byte, maps 0->0, 255->0xffff
   2eedb:	48 98                	cltq
   2eedd:	0f b6 14 03          	movzbl (%rbx,%rax,1),%edx
   2eee1:	89 d0                	mov    %edx,%eax
   2eee3:	c1 e0 08             	shl    $0x8,%eax
   2eee6:	01 d0                	add    %edx,%eax
   2eee8:	66 41 89 44 0f 0c    	mov    %ax,0xc(%r15,%rcx,1)
   for (i = 0; i < img_len; ++i)
   2eeee:	e9 ee fd ff ff       	jmp    2ece1 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xc1>
   2eef3:	31 c9                	xor    %ecx,%ecx
   2eef5:	31 c0                	xor    %eax,%eax
   2eef7:	e9 ce fe ff ff       	jmp    2edca <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0x1aa>
   stbi__g_failure_reason = str;
   2eefc:	48 8d 05 32 8b 00 00 	lea    0x8b32(%rip),%rax        # 37a35 <_ZSt19piecewise_construct+0xee>
   if (enlarged == NULL) return (stbi__uint16 *) stbi__errpuc("outofmem", "Out of memory");
   2ef03:	31 db                	xor    %ebx,%ebx
   stbi__g_failure_reason = str;
   2ef05:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2ef0c:	ff ff 
   if (enlarged == NULL) return (stbi__uint16 *) stbi__errpuc("outofmem", "Out of memory");
   2ef0e:	e9 d9 fd ff ff       	jmp    2ecec <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i+0xcc>
   2ef13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2ef1a:	00 00 00 00 
   2ef1e:	66 90                	xchg   %ax,%ax

000000000002ef20 <stbi_failure_reason>:
}
   2ef20:	64 48 8b 04 25 f8 ff 	mov    %fs:0xfffffffffffffff8,%rax
   2ef27:	ff ff 
   2ef29:	c3                   	ret
   2ef2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000002ef30 <stbi_image_free>:
   STBI_FREE(retval_from_stbi_load);
   2ef30:	e9 6b 77 fd ff       	jmp    66a0 <free@plt>
   2ef35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2ef3c:	00 00 00 00 

000000000002ef40 <stbi_set_flip_vertically_on_load>:
   stbi__vertically_flip_on_load_global = flag_true_if_should_flip;
   2ef40:	89 3d c2 28 01 00    	mov    %edi,0x128c2(%rip)        # 41808 <_ZL36stbi__vertically_flip_on_load_global>
}
   2ef46:	c3                   	ret
   2ef47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2ef4e:	00 00 

000000000002ef50 <stbi_set_flip_vertically_on_load_thread>:
   stbi__vertically_flip_on_load_local = flag_true_if_should_flip;
   2ef50:	64 89 3c 25 f4 ff ff 	mov    %edi,%fs:0xfffffffffffffff4
   2ef57:	ff 
   stbi__vertically_flip_on_load_set = 1;
   2ef58:	64 c7 04 25 f0 ff ff 	movl   $0x1,%fs:0xfffffffffffffff0
   2ef5f:	ff 01 00 00 00 
}
   2ef64:	c3                   	ret
   2ef65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2ef6c:	00 00 00 00 

000000000002ef70 <stbi_load>:
{
   2ef70:	41 57                	push   %r15
   2ef72:	41 56                	push   %r14
   2ef74:	45 89 c6             	mov    %r8d,%r14d
   2ef77:	41 55                	push   %r13
   2ef79:	49 89 cd             	mov    %rcx,%r13
   2ef7c:	41 54                	push   %r12
   2ef7e:	49 89 d4             	mov    %rdx,%r12
   2ef81:	55                   	push   %rbp
   2ef82:	48 89 f5             	mov    %rsi,%rbp
   f = fopen(filename, mode);
   2ef85:	48 8d 35 b7 8f 00 00 	lea    0x8fb7(%rip),%rsi        # 37f43 <_ZSt19piecewise_construct+0x5fc>
{
   2ef8c:	53                   	push   %rbx
   2ef8d:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   f = fopen(filename, mode);
   2ef94:	e8 d7 76 fd ff       	call   6670 <fopen@plt>
   if (!f) return stbi__errpuc("can't fopen", "Unable to open file");
   2ef99:	48 85 c0             	test   %rax,%rax
   2ef9c:	0f 84 05 01 00 00    	je     2f0a7 <stbi_load+0x137>
   2efa2:	48 89 c3             	mov    %rax,%rbx
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2efa5:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2efaa:	ba 80 00 00 00       	mov    $0x80,%edx
   s->io = *c;
   2efaf:	48 8b 05 4a 17 01 00 	mov    0x1174a(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   2efb6:	66 0f 6f 05 32 17 01 	movdqa 0x11732(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   2efbd:	00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2efbe:	4c 89 fe             	mov    %r15,%rsi
   2efc1:	48 89 df             	mov    %rbx,%rdi
   s->io_user_data = user;
   2efc4:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
   s->io = *c;
   2efc9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2efce:	48 8b 05 13 9b 00 00 	mov    0x9b13(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->callback_already_read = 0;
   2efd5:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2efdc:	00 00 00 00 
   s->read_from_callbacks = 1;
   2efe0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2efe5:	4c 89 bc 24 d0 00 00 	mov    %r15,0xd0(%rsp)
   2efec:	00 
   2efed:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2eff4:	00 
   s->io = *c;
   2eff5:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2effa:	e8 81 29 fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2efff:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2f006:	00 
   2f007:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2f00e:	00 
   2f00f:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2f016:	85 c0                	test   %eax,%eax
   2f018:	74 76                	je     2f090 <stbi_load+0x120>
      s->img_buffer_end = s->buffer_start + n;
   2f01a:	48 98                	cltq
   2f01c:	4c 01 f8             	add    %r15,%rax
   result = stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
   2f01f:	48 89 ee             	mov    %rbp,%rsi
   2f022:	48 89 e7             	mov    %rsp,%rdi
   2f025:	45 89 f0             	mov    %r14d,%r8d
   2f028:	4c 89 e9             	mov    %r13,%rcx
   2f02b:	4c 89 e2             	mov    %r12,%rdx
   2f02e:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2f035:	00 
   2f036:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2f03d:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2f03e:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2f045:	00 
   result = stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
   2f046:	e8 75 f2 ff ff       	call   2e2c0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i>
   2f04b:	48 89 c5             	mov    %rax,%rbp
   if (result) {
   2f04e:	48 85 c0             	test   %rax,%rax
   2f051:	74 1e                	je     2f071 <stbi_load+0x101>
      fseek(f, - (int) (s.img_buffer_end - s.img_buffer), SEEK_CUR);
   2f053:	8b b4 24 c0 00 00 00 	mov    0xc0(%rsp),%esi
   2f05a:	ba 01 00 00 00       	mov    $0x1,%edx
   2f05f:	48 89 df             	mov    %rbx,%rdi
   2f062:	2b b4 24 c8 00 00 00 	sub    0xc8(%rsp),%esi
   2f069:	48 63 f6             	movslq %esi,%rsi
   2f06c:	e8 9f 75 fd ff       	call   6610 <fseek@plt>
   fclose(f);
   2f071:	48 89 df             	mov    %rbx,%rdi
   2f074:	e8 b7 74 fd ff       	call   6530 <fclose@plt>
}
   2f079:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   2f080:	48 89 e8             	mov    %rbp,%rax
   2f083:	5b                   	pop    %rbx
   2f084:	5d                   	pop    %rbp
   2f085:	41 5c                	pop    %r12
   2f087:	41 5d                	pop    %r13
   2f089:	41 5e                	pop    %r14
   2f08b:	41 5f                	pop    %r15
   2f08d:	c3                   	ret
   2f08e:	66 90                	xchg   %ax,%ax
      s->read_from_callbacks = 0;
   2f090:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2f097:	00 
      s->img_buffer_end = s->buffer_start+1;
   2f098:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2f09d:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   2f0a2:	e9 78 ff ff ff       	jmp    2f01f <stbi_load+0xaf>
   stbi__g_failure_reason = str;
   2f0a7:	48 8d 05 98 8e 00 00 	lea    0x8e98(%rip),%rax        # 37f46 <_ZSt19piecewise_construct+0x5ff>
   if (!f) return stbi__errpuc("can't fopen", "Unable to open file");
   2f0ae:	31 ed                	xor    %ebp,%ebp
   stbi__g_failure_reason = str;
   2f0b0:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2f0b7:	ff ff 
   if (!f) return stbi__errpuc("can't fopen", "Unable to open file");
   2f0b9:	eb be                	jmp    2f079 <stbi_load+0x109>
   2f0bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002f0c0 <stbi_load_from_file>:
{
   2f0c0:	41 57                	push   %r15
   2f0c2:	41 56                	push   %r14
   2f0c4:	45 89 c6             	mov    %r8d,%r14d
   2f0c7:	41 55                	push   %r13
   2f0c9:	49 89 cd             	mov    %rcx,%r13
   2f0cc:	41 54                	push   %r12
   2f0ce:	49 89 d4             	mov    %rdx,%r12
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f0d1:	ba 80 00 00 00       	mov    $0x80,%edx
{
   2f0d6:	55                   	push   %rbp
   2f0d7:	48 89 f5             	mov    %rsi,%rbp
   2f0da:	53                   	push   %rbx
   2f0db:	48 89 fb             	mov    %rdi,%rbx
   2f0de:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   s->io = *c;
   2f0e5:	48 8b 05 14 16 01 00 	mov    0x11614(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   2f0ec:	66 0f 6f 05 fc 15 01 	movdqa 0x115fc(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   2f0f3:	00 
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f0f4:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
   s->io_user_data = user;
   2f0f9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
   s->io = *c;
   2f0fe:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2f103:	48 8b 05 de 99 00 00 	mov    0x99de(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f10a:	4c 89 fe             	mov    %r15,%rsi
   s->callback_already_read = 0;
   2f10d:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2f114:	00 00 00 00 
   s->read_from_callbacks = 1;
   2f118:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f11d:	4c 89 bc 24 d0 00 00 	mov    %r15,0xd0(%rsp)
   2f124:	00 
   2f125:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2f12c:	00 
   s->io = *c;
   2f12d:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f132:	e8 49 28 fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2f137:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2f13e:	00 
   2f13f:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2f146:	00 
   2f147:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2f14e:	85 c0                	test   %eax,%eax
   2f150:	75 7e                	jne    2f1d0 <stbi_load_from_file+0x110>
      s->read_from_callbacks = 0;
   2f152:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2f159:	00 
      s->img_buffer_end = s->buffer_start+1;
   2f15a:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2f15f:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   result = stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
   2f164:	48 89 ee             	mov    %rbp,%rsi
   2f167:	48 89 e7             	mov    %rsp,%rdi
   2f16a:	45 89 f0             	mov    %r14d,%r8d
   2f16d:	4c 89 e9             	mov    %r13,%rcx
   2f170:	4c 89 e2             	mov    %r12,%rdx
   2f173:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2f17a:	00 
   2f17b:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2f182:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2f183:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2f18a:	00 
   result = stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
   2f18b:	e8 30 f1 ff ff       	call   2e2c0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i>
   2f190:	48 89 c5             	mov    %rax,%rbp
   if (result) {
   2f193:	48 85 c0             	test   %rax,%rax
   2f196:	74 1e                	je     2f1b6 <stbi_load_from_file+0xf6>
      fseek(f, - (int) (s.img_buffer_end - s.img_buffer), SEEK_CUR);
   2f198:	8b b4 24 c0 00 00 00 	mov    0xc0(%rsp),%esi
   2f19f:	ba 01 00 00 00       	mov    $0x1,%edx
   2f1a4:	48 89 df             	mov    %rbx,%rdi
   2f1a7:	2b b4 24 c8 00 00 00 	sub    0xc8(%rsp),%esi
   2f1ae:	48 63 f6             	movslq %esi,%rsi
   2f1b1:	e8 5a 74 fd ff       	call   6610 <fseek@plt>
}
   2f1b6:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   2f1bd:	48 89 e8             	mov    %rbp,%rax
   2f1c0:	5b                   	pop    %rbx
   2f1c1:	5d                   	pop    %rbp
   2f1c2:	41 5c                	pop    %r12
   2f1c4:	41 5d                	pop    %r13
   2f1c6:	41 5e                	pop    %r14
   2f1c8:	41 5f                	pop    %r15
   2f1ca:	c3                   	ret
   2f1cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   2f1d0:	48 98                	cltq
   2f1d2:	4c 01 f8             	add    %r15,%rax
   2f1d5:	eb 8d                	jmp    2f164 <stbi_load_from_file+0xa4>
   2f1d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2f1de:	00 00 

000000000002f1e0 <stbi_load_from_file_16>:
{
   2f1e0:	41 57                	push   %r15
   2f1e2:	41 56                	push   %r14
   2f1e4:	45 89 c6             	mov    %r8d,%r14d
   2f1e7:	41 55                	push   %r13
   2f1e9:	49 89 cd             	mov    %rcx,%r13
   2f1ec:	41 54                	push   %r12
   2f1ee:	49 89 d4             	mov    %rdx,%r12
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f1f1:	ba 80 00 00 00       	mov    $0x80,%edx
{
   2f1f6:	55                   	push   %rbp
   2f1f7:	48 89 f5             	mov    %rsi,%rbp
   2f1fa:	53                   	push   %rbx
   2f1fb:	48 89 fb             	mov    %rdi,%rbx
   2f1fe:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   s->io = *c;
   2f205:	48 8b 05 f4 14 01 00 	mov    0x114f4(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   2f20c:	66 0f 6f 05 dc 14 01 	movdqa 0x114dc(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   2f213:	00 
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f214:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
   s->io_user_data = user;
   2f219:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
   s->io = *c;
   2f21e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2f223:	48 8b 05 be 98 00 00 	mov    0x98be(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f22a:	4c 89 fe             	mov    %r15,%rsi
   s->callback_already_read = 0;
   2f22d:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2f234:	00 00 00 00 
   s->read_from_callbacks = 1;
   2f238:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f23d:	4c 89 bc 24 d0 00 00 	mov    %r15,0xd0(%rsp)
   2f244:	00 
   2f245:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2f24c:	00 
   s->io = *c;
   2f24d:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f252:	e8 29 27 fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2f257:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2f25e:	00 
   2f25f:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2f266:	00 
   2f267:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2f26e:	85 c0                	test   %eax,%eax
   2f270:	75 7e                	jne    2f2f0 <stbi_load_from_file_16+0x110>
      s->read_from_callbacks = 0;
   2f272:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2f279:	00 
      s->img_buffer_end = s->buffer_start+1;
   2f27a:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2f27f:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   result = stbi__load_and_postprocess_16bit(&s,x,y,comp,req_comp);
   2f284:	48 89 ee             	mov    %rbp,%rsi
   2f287:	48 89 e7             	mov    %rsp,%rdi
   2f28a:	45 89 f0             	mov    %r14d,%r8d
   2f28d:	4c 89 e9             	mov    %r13,%rcx
   2f290:	4c 89 e2             	mov    %r12,%rdx
   2f293:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2f29a:	00 
   2f29b:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2f2a2:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2f2a3:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2f2aa:	00 
   result = stbi__load_and_postprocess_16bit(&s,x,y,comp,req_comp);
   2f2ab:	e8 70 f9 ff ff       	call   2ec20 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i>
   2f2b0:	48 89 c5             	mov    %rax,%rbp
   if (result) {
   2f2b3:	48 85 c0             	test   %rax,%rax
   2f2b6:	74 1e                	je     2f2d6 <stbi_load_from_file_16+0xf6>
      fseek(f, - (int) (s.img_buffer_end - s.img_buffer), SEEK_CUR);
   2f2b8:	8b b4 24 c0 00 00 00 	mov    0xc0(%rsp),%esi
   2f2bf:	ba 01 00 00 00       	mov    $0x1,%edx
   2f2c4:	48 89 df             	mov    %rbx,%rdi
   2f2c7:	2b b4 24 c8 00 00 00 	sub    0xc8(%rsp),%esi
   2f2ce:	48 63 f6             	movslq %esi,%rsi
   2f2d1:	e8 3a 73 fd ff       	call   6610 <fseek@plt>
}
   2f2d6:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   2f2dd:	48 89 e8             	mov    %rbp,%rax
   2f2e0:	5b                   	pop    %rbx
   2f2e1:	5d                   	pop    %rbp
   2f2e2:	41 5c                	pop    %r12
   2f2e4:	41 5d                	pop    %r13
   2f2e6:	41 5e                	pop    %r14
   2f2e8:	41 5f                	pop    %r15
   2f2ea:	c3                   	ret
   2f2eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   2f2f0:	48 98                	cltq
   2f2f2:	4c 01 f8             	add    %r15,%rax
   2f2f5:	eb 8d                	jmp    2f284 <stbi_load_from_file_16+0xa4>
   2f2f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2f2fe:	00 00 

000000000002f300 <stbi_load_16>:
{
   2f300:	41 57                	push   %r15
   2f302:	41 56                	push   %r14
   2f304:	45 89 c6             	mov    %r8d,%r14d
   2f307:	41 55                	push   %r13
   2f309:	49 89 cd             	mov    %rcx,%r13
   2f30c:	41 54                	push   %r12
   2f30e:	49 89 d4             	mov    %rdx,%r12
   2f311:	55                   	push   %rbp
   2f312:	48 89 f5             	mov    %rsi,%rbp
   f = fopen(filename, mode);
   2f315:	48 8d 35 27 8c 00 00 	lea    0x8c27(%rip),%rsi        # 37f43 <_ZSt19piecewise_construct+0x5fc>
{
   2f31c:	53                   	push   %rbx
   2f31d:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   f = fopen(filename, mode);
   2f324:	e8 47 73 fd ff       	call   6670 <fopen@plt>
   if (!f) return (stbi_us *) stbi__errpuc("can't fopen", "Unable to open file");
   2f329:	48 85 c0             	test   %rax,%rax
   2f32c:	0f 84 05 01 00 00    	je     2f437 <stbi_load_16+0x137>
   2f332:	48 89 c3             	mov    %rax,%rbx
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f335:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f33a:	ba 80 00 00 00       	mov    $0x80,%edx
   s->io = *c;
   2f33f:	48 8b 05 ba 13 01 00 	mov    0x113ba(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   2f346:	66 0f 6f 05 a2 13 01 	movdqa 0x113a2(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   2f34d:	00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f34e:	4c 89 fe             	mov    %r15,%rsi
   2f351:	48 89 df             	mov    %rbx,%rdi
   s->io_user_data = user;
   2f354:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
   s->io = *c;
   2f359:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2f35e:	48 8b 05 83 97 00 00 	mov    0x9783(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->callback_already_read = 0;
   2f365:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2f36c:	00 00 00 00 
   s->read_from_callbacks = 1;
   2f370:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f375:	4c 89 bc 24 d0 00 00 	mov    %r15,0xd0(%rsp)
   2f37c:	00 
   2f37d:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2f384:	00 
   s->io = *c;
   2f385:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f38a:	e8 f1 25 fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2f38f:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2f396:	00 
   2f397:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2f39e:	00 
   2f39f:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2f3a6:	85 c0                	test   %eax,%eax
   2f3a8:	74 76                	je     2f420 <stbi_load_16+0x120>
      s->img_buffer_end = s->buffer_start + n;
   2f3aa:	48 98                	cltq
   2f3ac:	4c 01 f8             	add    %r15,%rax
   result = stbi__load_and_postprocess_16bit(&s,x,y,comp,req_comp);
   2f3af:	48 89 ee             	mov    %rbp,%rsi
   2f3b2:	48 89 e7             	mov    %rsp,%rdi
   2f3b5:	45 89 f0             	mov    %r14d,%r8d
   2f3b8:	4c 89 e9             	mov    %r13,%rcx
   2f3bb:	4c 89 e2             	mov    %r12,%rdx
   2f3be:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2f3c5:	00 
   2f3c6:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2f3cd:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2f3ce:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2f3d5:	00 
   result = stbi__load_and_postprocess_16bit(&s,x,y,comp,req_comp);
   2f3d6:	e8 45 f8 ff ff       	call   2ec20 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i>
   2f3db:	48 89 c5             	mov    %rax,%rbp
   if (result) {
   2f3de:	48 85 c0             	test   %rax,%rax
   2f3e1:	74 1e                	je     2f401 <stbi_load_16+0x101>
      fseek(f, - (int) (s.img_buffer_end - s.img_buffer), SEEK_CUR);
   2f3e3:	8b b4 24 c0 00 00 00 	mov    0xc0(%rsp),%esi
   2f3ea:	ba 01 00 00 00       	mov    $0x1,%edx
   2f3ef:	48 89 df             	mov    %rbx,%rdi
   2f3f2:	2b b4 24 c8 00 00 00 	sub    0xc8(%rsp),%esi
   2f3f9:	48 63 f6             	movslq %esi,%rsi
   2f3fc:	e8 0f 72 fd ff       	call   6610 <fseek@plt>
   fclose(f);
   2f401:	48 89 df             	mov    %rbx,%rdi
   2f404:	e8 27 71 fd ff       	call   6530 <fclose@plt>
}
   2f409:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   2f410:	48 89 e8             	mov    %rbp,%rax
   2f413:	5b                   	pop    %rbx
   2f414:	5d                   	pop    %rbp
   2f415:	41 5c                	pop    %r12
   2f417:	41 5d                	pop    %r13
   2f419:	41 5e                	pop    %r14
   2f41b:	41 5f                	pop    %r15
   2f41d:	c3                   	ret
   2f41e:	66 90                	xchg   %ax,%ax
      s->read_from_callbacks = 0;
   2f420:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2f427:	00 
      s->img_buffer_end = s->buffer_start+1;
   2f428:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2f42d:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   2f432:	e9 78 ff ff ff       	jmp    2f3af <stbi_load_16+0xaf>
   stbi__g_failure_reason = str;
   2f437:	48 8d 05 08 8b 00 00 	lea    0x8b08(%rip),%rax        # 37f46 <_ZSt19piecewise_construct+0x5ff>
   if (!f) return (stbi_us *) stbi__errpuc("can't fopen", "Unable to open file");
   2f43e:	31 ed                	xor    %ebp,%ebp
   stbi__g_failure_reason = str;
   2f440:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2f447:	ff ff 
   if (!f) return (stbi_us *) stbi__errpuc("can't fopen", "Unable to open file");
   2f449:	eb be                	jmp    2f409 <stbi_load_16+0x109>
   2f44b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002f450 <stbi_load_16_from_memory>:
{
   2f450:	48 63 c6             	movslq %esi,%rax
   2f453:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   s->io.read = NULL;
   2f45a:	66 48 0f 6e c7       	movq   %rdi,%xmm0
{
   2f45f:	48 89 d6             	mov    %rdx,%rsi
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   2f462:	48 01 f8             	add    %rdi,%rax
{
   2f465:	48 89 ca             	mov    %rcx,%rdx
   return stbi__load_and_postprocess_16bit(&s,x,y,channels_in_file,desired_channels);
   2f468:	48 89 e7             	mov    %rsp,%rdi
{
   2f46b:	4c 89 c1             	mov    %r8,%rcx
   2f46e:	66 48 0f 6e c8       	movq   %rax,%xmm1
   2f473:	45 89 c8             	mov    %r9d,%r8d
   s->io.read = NULL;
   2f476:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
   2f47d:	00 00 
   s->read_from_callbacks = 0;
   2f47f:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
   2f483:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2f48a:	00 
   s->callback_already_read = 0;
   2f48b:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2f492:	00 00 00 00 
   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;
   2f496:	0f 29 84 24 c0 00 00 	movaps %xmm0,0xc0(%rsp)
   2f49d:	00 
   2f49e:	0f 29 84 24 d0 00 00 	movaps %xmm0,0xd0(%rsp)
   2f4a5:	00 
   return stbi__load_and_postprocess_16bit(&s,x,y,channels_in_file,desired_channels);
   2f4a6:	e8 75 f7 ff ff       	call   2ec20 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i>
}
   2f4ab:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   2f4b2:	c3                   	ret
   2f4b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2f4ba:	00 00 00 00 
   2f4be:	66 90                	xchg   %ax,%ax

000000000002f4c0 <stbi_load_16_from_callbacks>:
{
   2f4c0:	41 56                	push   %r14
   2f4c2:	48 89 f8             	mov    %rdi,%rax
   2f4c5:	48 89 f7             	mov    %rsi,%rdi
   2f4c8:	41 55                	push   %r13
   2f4ca:	45 89 cd             	mov    %r9d,%r13d
   2f4cd:	41 54                	push   %r12
   2f4cf:	4d 89 c4             	mov    %r8,%r12
   2f4d2:	55                   	push   %rbp
   2f4d3:	48 89 cd             	mov    %rcx,%rbp
   2f4d6:	53                   	push   %rbx
   2f4d7:	48 89 d3             	mov    %rdx,%rbx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f4da:	ba 80 00 00 00       	mov    $0x80,%edx
{
   2f4df:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   s->io = *c;
   2f4e6:	f3 0f 6f 00          	movdqu (%rax),%xmm0
   2f4ea:	48 8b 08             	mov    (%rax),%rcx
   2f4ed:	48 8b 40 10          	mov    0x10(%rax),%rax
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f4f1:	4c 8d 74 24 38       	lea    0x38(%rsp),%r14
   s->io_user_data = user;
   2f4f6:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
   s->callback_already_read = 0;
   2f4fb:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2f502:	00 00 00 00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f506:	4c 89 f6             	mov    %r14,%rsi
   s->io = *c;
   2f509:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2f50e:	48 8b 05 d3 95 00 00 	mov    0x95d3(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f515:	4c 89 b4 24 d0 00 00 	mov    %r14,0xd0(%rsp)
   2f51c:	00 
   s->read_from_callbacks = 1;
   2f51d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f522:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
   2f529:	00 
   s->io = *c;
   2f52a:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f52f:	ff d1                	call   *%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2f531:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2f538:	00 
   2f539:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2f540:	00 
   2f541:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2f548:	85 c0                	test   %eax,%eax
   2f54a:	75 54                	jne    2f5a0 <stbi_load_16_from_callbacks+0xe0>
      s->read_from_callbacks = 0;
   2f54c:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2f553:	00 
      s->img_buffer_end = s->buffer_start+1;
   2f554:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2f559:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   2f55e:	48 89 e7             	mov    %rsp,%rdi
   return stbi__load_and_postprocess_16bit(&s,x,y,channels_in_file,desired_channels);
   2f561:	45 89 e8             	mov    %r13d,%r8d
   2f564:	4c 89 e1             	mov    %r12,%rcx
   2f567:	48 89 ea             	mov    %rbp,%rdx
   2f56a:	48 89 de             	mov    %rbx,%rsi
   2f56d:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
   2f574:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2f575:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2f57c:	00 
   2f57d:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2f584:	00 
   return stbi__load_and_postprocess_16bit(&s,x,y,channels_in_file,desired_channels);
   2f585:	e8 96 f6 ff ff       	call   2ec20 <_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i>
}
   2f58a:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   2f591:	5b                   	pop    %rbx
   2f592:	5d                   	pop    %rbp
   2f593:	41 5c                	pop    %r12
   2f595:	41 5d                	pop    %r13
   2f597:	41 5e                	pop    %r14
   2f599:	c3                   	ret
   2f59a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   2f5a0:	48 98                	cltq
   2f5a2:	4c 01 f0             	add    %r14,%rax
   2f5a5:	eb b7                	jmp    2f55e <stbi_load_16_from_callbacks+0x9e>
   2f5a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2f5ae:	00 00 

000000000002f5b0 <stbi_load_from_memory>:
{
   2f5b0:	48 63 c6             	movslq %esi,%rax
   2f5b3:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   s->io.read = NULL;
   2f5ba:	66 48 0f 6e c7       	movq   %rdi,%xmm0
{
   2f5bf:	48 89 d6             	mov    %rdx,%rsi
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   2f5c2:	48 01 f8             	add    %rdi,%rax
{
   2f5c5:	48 89 ca             	mov    %rcx,%rdx
   return stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
   2f5c8:	48 89 e7             	mov    %rsp,%rdi
{
   2f5cb:	4c 89 c1             	mov    %r8,%rcx
   2f5ce:	66 48 0f 6e c8       	movq   %rax,%xmm1
   2f5d3:	45 89 c8             	mov    %r9d,%r8d
   s->io.read = NULL;
   2f5d6:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
   2f5dd:	00 00 
   s->read_from_callbacks = 0;
   2f5df:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
   2f5e3:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2f5ea:	00 
   s->callback_already_read = 0;
   2f5eb:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2f5f2:	00 00 00 00 
   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;
   2f5f6:	0f 29 84 24 c0 00 00 	movaps %xmm0,0xc0(%rsp)
   2f5fd:	00 
   2f5fe:	0f 29 84 24 d0 00 00 	movaps %xmm0,0xd0(%rsp)
   2f605:	00 
   return stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
   2f606:	e8 b5 ec ff ff       	call   2e2c0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i>
}
   2f60b:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   2f612:	c3                   	ret
   2f613:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2f61a:	00 00 00 00 
   2f61e:	66 90                	xchg   %ax,%ax

000000000002f620 <stbi_load_from_callbacks>:
{
   2f620:	41 56                	push   %r14
   2f622:	48 89 f8             	mov    %rdi,%rax
   2f625:	48 89 f7             	mov    %rsi,%rdi
   2f628:	41 55                	push   %r13
   2f62a:	45 89 cd             	mov    %r9d,%r13d
   2f62d:	41 54                	push   %r12
   2f62f:	4d 89 c4             	mov    %r8,%r12
   2f632:	55                   	push   %rbp
   2f633:	48 89 cd             	mov    %rcx,%rbp
   2f636:	53                   	push   %rbx
   2f637:	48 89 d3             	mov    %rdx,%rbx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f63a:	ba 80 00 00 00       	mov    $0x80,%edx
{
   2f63f:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   s->io = *c;
   2f646:	f3 0f 6f 00          	movdqu (%rax),%xmm0
   2f64a:	48 8b 08             	mov    (%rax),%rcx
   2f64d:	48 8b 40 10          	mov    0x10(%rax),%rax
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f651:	4c 8d 74 24 38       	lea    0x38(%rsp),%r14
   s->io_user_data = user;
   2f656:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
   s->callback_already_read = 0;
   2f65b:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2f662:	00 00 00 00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f666:	4c 89 f6             	mov    %r14,%rsi
   s->io = *c;
   2f669:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2f66e:	48 8b 05 73 94 00 00 	mov    0x9473(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f675:	4c 89 b4 24 d0 00 00 	mov    %r14,0xd0(%rsp)
   2f67c:	00 
   s->read_from_callbacks = 1;
   2f67d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2f682:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
   2f689:	00 
   s->io = *c;
   2f68a:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2f68f:	ff d1                	call   *%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2f691:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2f698:	00 
   2f699:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2f6a0:	00 
   2f6a1:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2f6a8:	85 c0                	test   %eax,%eax
   2f6aa:	75 54                	jne    2f700 <stbi_load_from_callbacks+0xe0>
      s->read_from_callbacks = 0;
   2f6ac:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2f6b3:	00 
      s->img_buffer_end = s->buffer_start+1;
   2f6b4:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2f6b9:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   2f6be:	48 89 e7             	mov    %rsp,%rdi
   return stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
   2f6c1:	45 89 e8             	mov    %r13d,%r8d
   2f6c4:	4c 89 e1             	mov    %r12,%rcx
   2f6c7:	48 89 ea             	mov    %rbp,%rdx
   2f6ca:	48 89 de             	mov    %rbx,%rsi
   2f6cd:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
   2f6d4:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2f6d5:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2f6dc:	00 
   2f6dd:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2f6e4:	00 
   return stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
   2f6e5:	e8 d6 eb ff ff       	call   2e2c0 <_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i>
}
   2f6ea:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   2f6f1:	5b                   	pop    %rbx
   2f6f2:	5d                   	pop    %rbp
   2f6f3:	41 5c                	pop    %r12
   2f6f5:	41 5d                	pop    %r13
   2f6f7:	41 5e                	pop    %r14
   2f6f9:	c3                   	ret
   2f6fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   2f700:	48 98                	cltq
   2f702:	4c 01 f0             	add    %r14,%rax
   2f705:	eb b7                	jmp    2f6be <stbi_load_from_callbacks+0x9e>
   2f707:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2f70e:	00 00 

000000000002f710 <stbi_load_gif_from_memory>:
{
   2f710:	41 57                	push   %r15
   2f712:	48 63 c6             	movslq %esi,%rax
   2f715:	66 48 0f 6e c7       	movq   %rdi,%xmm0
   2f71a:	48 89 d6             	mov    %rdx,%rsi
   2f71d:	41 56                	push   %r14
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   2f71f:	48 01 f8             	add    %rdi,%rax
{
   2f722:	41 55                	push   %r13
   2f724:	66 48 0f 6e c8       	movq   %rax,%xmm1
   2f729:	41 54                	push   %r12
   2f72b:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
   2f72f:	4d 89 cc             	mov    %r9,%r12
   2f732:	55                   	push   %rbp
   2f733:	4c 89 c5             	mov    %r8,%rbp
   result = (unsigned char*) stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp);
   2f736:	4d 89 e0             	mov    %r12,%r8
{
   2f739:	53                   	push   %rbx
   2f73a:	48 89 cb             	mov    %rcx,%rbx
   result = (unsigned char*) stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp);
   2f73d:	48 89 e9             	mov    %rbp,%rcx
   2f740:	48 89 da             	mov    %rbx,%rdx
{
   2f743:	48 81 ec 08 09 00 00 	sub    $0x908,%rsp
   2f74a:	4c 8b ac 24 40 09 00 	mov    0x940(%rsp),%r13
   2f751:	00 
   result = (unsigned char*) stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp);
   2f752:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
   s->io.read = NULL;
   2f757:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
   2f75e:	00 00 
   result = (unsigned char*) stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp);
   2f760:	48 83 ec 08          	sub    $0x8,%rsp
   s->read_from_callbacks = 0;
   2f764:	c7 44 24 58 00 00 00 	movl   $0x0,0x58(%rsp)
   2f76b:	00 
   s->callback_already_read = 0;
   2f76c:	c7 84 24 e0 00 00 00 	movl   $0x0,0xe0(%rsp)
   2f773:	00 00 00 00 
   result = (unsigned char*) stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp);
   2f777:	4d 89 e9             	mov    %r13,%r9
   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;
   2f77a:	0f 29 84 24 e8 00 00 	movaps %xmm0,0xe8(%rsp)
   2f781:	00 
   2f782:	0f 29 84 24 f8 00 00 	movaps %xmm0,0xf8(%rsp)
   2f789:	00 
   result = (unsigned char*) stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp);
   2f78a:	8b 84 24 50 09 00 00 	mov    0x950(%rsp),%eax
   2f791:	50                   	push   %rax
   2f792:	e8 79 4d ff ff       	call   24510 <_ZL19stbi__load_gif_mainP13stbi__contextPPiS1_S1_S1_S1_i.constprop.0>
   if (stbi__vertically_flip_on_load) {
   2f797:	64 8b 34 25 f0 ff ff 	mov    %fs:0xfffffffffffffff0,%esi
   2f79e:	ff 
   2f79f:	5a                   	pop    %rdx
   2f7a0:	8b 15 62 20 01 00    	mov    0x12062(%rip),%edx        # 41808 <_ZL36stbi__vertically_flip_on_load_global>
   2f7a6:	59                   	pop    %rcx
   2f7a7:	85 f6                	test   %esi,%esi
   2f7a9:	74 08                	je     2f7b3 <stbi_load_gif_from_memory+0xa3>
   2f7ab:	64 8b 14 25 f4 ff ff 	mov    %fs:0xfffffffffffffff4,%edx
   2f7b2:	ff 
   2f7b3:	85 d2                	test   %edx,%edx
   2f7b5:	0f 84 ad 01 00 00    	je     2f968 <stbi_load_gif_from_memory+0x258>
      stbi__vertical_flip_slices( result, *x, *y, *z, *comp );
   2f7bb:	48 63 55 00          	movslq 0x0(%rbp),%rdx
   2f7bf:	48 63 33             	movslq (%rbx),%rsi
   2f7c2:	49 63 4d 00          	movslq 0x0(%r13),%rcx
   2f7c6:	45 8b 3c 24          	mov    (%r12),%r15d
   int slice_size = w * h * bytes_per_pixel;
   2f7ca:	89 d7                	mov    %edx,%edi
   2f7cc:	0f af fe             	imul   %esi,%edi
   2f7cf:	0f af f9             	imul   %ecx,%edi
   for (slice = 0; slice < z; ++slice) {
   2f7d2:	45 85 ff             	test   %r15d,%r15d
   2f7d5:	0f 8e 8d 01 00 00    	jle    2f968 <stbi_load_gif_from_memory+0x258>
   size_t bytes_per_row = (size_t)w * bytes_per_pixel;
   2f7db:	48 0f af f1          	imul   %rcx,%rsi
   for (row = 0; row < (h>>1); row++) {
   2f7df:	41 89 d5             	mov    %edx,%r13d
   2f7e2:	48 83 ea 01          	sub    $0x1,%rdx
      bytes += slice_size;
   2f7e6:	4c 63 f7             	movslq %edi,%r14
   for (row = 0; row < (h>>1); row++) {
   2f7e9:	41 d1 fd             	sar    %r13d
   for (slice = 0; slice < z; ++slice) {
   2f7ec:	45 31 c0             	xor    %r8d,%r8d
   2f7ef:	48 0f af d6          	imul   %rsi,%rdx
   size_t bytes_per_row = (size_t)w * bytes_per_pixel;
   2f7f3:	49 89 f4             	mov    %rsi,%r12
   2f7f6:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
   stbi_uc *bytes = (stbi_uc *)image;
   2f7fb:	48 89 c2             	mov    %rax,%rdx
   for (row = 0; row < (h>>1); row++) {
   2f7fe:	45 85 ed             	test   %r13d,%r13d
   2f801:	0f 8e 0b 02 00 00    	jle    2fa12 <stbi_load_gif_from_memory+0x302>
   2f807:	4d 85 e4             	test   %r12,%r12
   2f80a:	0f 84 02 02 00 00    	je     2fa12 <stbi_load_gif_from_memory+0x302>
   2f810:	44 89 7c 24 1c       	mov    %r15d,0x1c(%rsp)
   2f815:	4c 8d 94 24 00 01 00 	lea    0x100(%rsp),%r10
   2f81c:	00 
   2f81d:	0f 1f 00             	nopl   (%rax)
   2f820:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
   2f825:	44 89 44 24 18       	mov    %r8d,0x18(%rsp)
   2f82a:	4d 89 f7             	mov    %r14,%r15
   2f82d:	48 89 d5             	mov    %rdx,%rbp
   2f830:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   2f835:	45 31 db             	xor    %r11d,%r11d
   2f838:	49 89 c6             	mov    %rax,%r14
   2f83b:	48 01 d3             	add    %rdx,%rbx
   2f83e:	66 90                	xchg   %ax,%ax
      stbi_uc *row0 = bytes + row*bytes_per_row;
   2f840:	44 89 5c 24 04       	mov    %r11d,0x4(%rsp)
   2f845:	49 89 e8             	mov    %rbp,%r8
      stbi_uc *row1 = bytes + (h - row - 1)*bytes_per_row;
   2f848:	48 89 da             	mov    %rbx,%rdx
      size_t bytes_left = bytes_per_row;
   2f84b:	4d 89 e1             	mov    %r12,%r9
   2f84e:	eb 29                	jmp    2f879 <stbi_load_gif_from_memory+0x169>
         memcpy(row1, temp, bytes_copy);
   2f850:	a8 04                	test   $0x4,%al
   2f852:	0f 85 60 01 00 00    	jne    2f9b8 <stbi_load_gif_from_memory+0x2a8>
   2f858:	85 c0                	test   %eax,%eax
   2f85a:	74 0e                	je     2f86a <stbi_load_gif_from_memory+0x15a>
   2f85c:	41 0f b6 0a          	movzbl (%r10),%ecx
   2f860:	88 0a                	mov    %cl,(%rdx)
   2f862:	a8 02                	test   $0x2,%al
   2f864:	0f 85 7e 01 00 00    	jne    2f9e8 <stbi_load_gif_from_memory+0x2d8>
         row0 += bytes_copy;
   2f86a:	49 01 c0             	add    %rax,%r8
         row1 += bytes_copy;
   2f86d:	48 01 c2             	add    %rax,%rdx
      while (bytes_left) {
   2f870:	49 29 c1             	sub    %rax,%r9
   2f873:	0f 84 b5 00 00 00    	je     2f92e <stbi_load_gif_from_memory+0x21e>
         size_t bytes_copy = (bytes_left < sizeof(temp)) ? bytes_left : sizeof(temp);
   2f879:	b8 00 08 00 00       	mov    $0x800,%eax
         memcpy(temp, row0, bytes_copy);
   2f87e:	4c 89 d7             	mov    %r10,%rdi
   2f881:	4c 89 c6             	mov    %r8,%rsi
         size_t bytes_copy = (bytes_left < sizeof(temp)) ? bytes_left : sizeof(temp);
   2f884:	49 39 c1             	cmp    %rax,%r9
   2f887:	49 0f 46 c1          	cmovbe %r9,%rax
         memcpy(temp, row0, bytes_copy);
   2f88b:	83 f8 08             	cmp    $0x8,%eax
   2f88e:	72 08                	jb     2f898 <stbi_load_gif_from_memory+0x188>
   2f890:	89 c1                	mov    %eax,%ecx
   2f892:	c1 e9 03             	shr    $0x3,%ecx
   2f895:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   2f898:	31 c9                	xor    %ecx,%ecx
   2f89a:	a8 04                	test   $0x4,%al
   2f89c:	74 09                	je     2f8a7 <stbi_load_gif_from_memory+0x197>
   2f89e:	8b 0e                	mov    (%rsi),%ecx
   2f8a0:	89 0f                	mov    %ecx,(%rdi)
   2f8a2:	b9 04 00 00 00       	mov    $0x4,%ecx
   2f8a7:	a8 02                	test   $0x2,%al
   2f8a9:	74 0e                	je     2f8b9 <stbi_load_gif_from_memory+0x1a9>
   2f8ab:	44 0f b7 1c 0e       	movzwl (%rsi,%rcx,1),%r11d
   2f8b0:	66 44 89 1c 0f       	mov    %r11w,(%rdi,%rcx,1)
   2f8b5:	48 83 c1 02          	add    $0x2,%rcx
   2f8b9:	a8 01                	test   $0x1,%al
   2f8bb:	74 08                	je     2f8c5 <stbi_load_gif_from_memory+0x1b5>
   2f8bd:	0f b6 34 0e          	movzbl (%rsi,%rcx,1),%esi
   2f8c1:	40 88 34 0f          	mov    %sil,(%rdi,%rcx,1)
         memcpy(row0, row1, bytes_copy);
   2f8c5:	83 f8 08             	cmp    $0x8,%eax
   2f8c8:	0f 83 b2 00 00 00    	jae    2f980 <stbi_load_gif_from_memory+0x270>
   2f8ce:	a8 04                	test   $0x4,%al
   2f8d0:	0f 85 fa 00 00 00    	jne    2f9d0 <stbi_load_gif_from_memory+0x2c0>
   2f8d6:	85 c0                	test   %eax,%eax
   2f8d8:	74 0e                	je     2f8e8 <stbi_load_gif_from_memory+0x1d8>
   2f8da:	0f b6 0a             	movzbl (%rdx),%ecx
   2f8dd:	41 88 08             	mov    %cl,(%r8)
   2f8e0:	a8 02                	test   $0x2,%al
   2f8e2:	0f 85 18 01 00 00    	jne    2fa00 <stbi_load_gif_from_memory+0x2f0>
         memcpy(row1, temp, bytes_copy);
   2f8e8:	83 f8 08             	cmp    $0x8,%eax
   2f8eb:	0f 82 5f ff ff ff    	jb     2f850 <stbi_load_gif_from_memory+0x140>
   2f8f1:	49 8b 0a             	mov    (%r10),%rcx
   2f8f4:	48 8d 7a 08          	lea    0x8(%rdx),%rdi
         row0 += bytes_copy;
   2f8f8:	49 01 c0             	add    %rax,%r8
         memcpy(row1, temp, bytes_copy);
   2f8fb:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   2f8ff:	48 89 0a             	mov    %rcx,(%rdx)
   2f902:	89 c1                	mov    %eax,%ecx
   2f904:	49 8b 74 0a f8       	mov    -0x8(%r10,%rcx,1),%rsi
   2f909:	48 89 74 0a f8       	mov    %rsi,-0x8(%rdx,%rcx,1)
   2f90e:	48 89 d1             	mov    %rdx,%rcx
   2f911:	4c 89 d6             	mov    %r10,%rsi
         row1 += bytes_copy;
   2f914:	48 01 c2             	add    %rax,%rdx
         memcpy(row1, temp, bytes_copy);
   2f917:	48 29 f9             	sub    %rdi,%rcx
   2f91a:	48 29 ce             	sub    %rcx,%rsi
   2f91d:	01 c1                	add    %eax,%ecx
   2f91f:	c1 e9 03             	shr    $0x3,%ecx
   2f922:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      while (bytes_left) {
   2f925:	49 29 c1             	sub    %rax,%r9
   2f928:	0f 85 4b ff ff ff    	jne    2f879 <stbi_load_gif_from_memory+0x169>
   for (row = 0; row < (h>>1); row++) {
   2f92e:	44 8b 5c 24 04       	mov    0x4(%rsp),%r11d
   2f933:	4c 01 e5             	add    %r12,%rbp
   2f936:	4c 29 e3             	sub    %r12,%rbx
   2f939:	41 83 c3 01          	add    $0x1,%r11d
   2f93d:	45 39 eb             	cmp    %r13d,%r11d
   2f940:	0f 85 fa fe ff ff    	jne    2f840 <stbi_load_gif_from_memory+0x130>
   2f946:	44 8b 44 24 18       	mov    0x18(%rsp),%r8d
   2f94b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   2f950:	4c 89 f0             	mov    %r14,%rax
   2f953:	4d 89 fe             	mov    %r15,%r14
      bytes += slice_size;
   2f956:	4c 01 fa             	add    %r15,%rdx
   for (slice = 0; slice < z; ++slice) {
   2f959:	41 83 c0 01          	add    $0x1,%r8d
   2f95d:	44 39 44 24 1c       	cmp    %r8d,0x1c(%rsp)
   2f962:	0f 85 b8 fe ff ff    	jne    2f820 <stbi_load_gif_from_memory+0x110>
}
   2f968:	48 81 c4 08 09 00 00 	add    $0x908,%rsp
   2f96f:	5b                   	pop    %rbx
   2f970:	5d                   	pop    %rbp
   2f971:	41 5c                	pop    %r12
   2f973:	41 5d                	pop    %r13
   2f975:	41 5e                	pop    %r14
   2f977:	41 5f                	pop    %r15
   2f979:	c3                   	ret
   2f97a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         memcpy(row0, row1, bytes_copy);
   2f980:	48 8b 0a             	mov    (%rdx),%rcx
   2f983:	49 8d 78 08          	lea    0x8(%r8),%rdi
   2f987:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   2f98b:	49 89 08             	mov    %rcx,(%r8)
   2f98e:	89 c1                	mov    %eax,%ecx
   2f990:	48 8b 74 0a f8       	mov    -0x8(%rdx,%rcx,1),%rsi
   2f995:	49 89 74 08 f8       	mov    %rsi,-0x8(%r8,%rcx,1)
   2f99a:	4c 89 c1             	mov    %r8,%rcx
   2f99d:	48 89 d6             	mov    %rdx,%rsi
   2f9a0:	48 29 f9             	sub    %rdi,%rcx
   2f9a3:	48 29 ce             	sub    %rcx,%rsi
   2f9a6:	01 c1                	add    %eax,%ecx
   2f9a8:	c1 e9 03             	shr    $0x3,%ecx
   2f9ab:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   2f9ae:	e9 35 ff ff ff       	jmp    2f8e8 <stbi_load_gif_from_memory+0x1d8>
   2f9b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
         memcpy(row1, temp, bytes_copy);
   2f9b8:	41 8b 0a             	mov    (%r10),%ecx
   2f9bb:	89 0a                	mov    %ecx,(%rdx)
   2f9bd:	89 c1                	mov    %eax,%ecx
   2f9bf:	41 8b 74 0a fc       	mov    -0x4(%r10,%rcx,1),%esi
   2f9c4:	89 74 0a fc          	mov    %esi,-0x4(%rdx,%rcx,1)
   2f9c8:	e9 9d fe ff ff       	jmp    2f86a <stbi_load_gif_from_memory+0x15a>
   2f9cd:	0f 1f 00             	nopl   (%rax)
         memcpy(row0, row1, bytes_copy);
   2f9d0:	8b 0a                	mov    (%rdx),%ecx
   2f9d2:	41 89 08             	mov    %ecx,(%r8)
   2f9d5:	89 c1                	mov    %eax,%ecx
   2f9d7:	8b 74 0a fc          	mov    -0x4(%rdx,%rcx,1),%esi
   2f9db:	41 89 74 08 fc       	mov    %esi,-0x4(%r8,%rcx,1)
   2f9e0:	e9 03 ff ff ff       	jmp    2f8e8 <stbi_load_gif_from_memory+0x1d8>
   2f9e5:	0f 1f 00             	nopl   (%rax)
         memcpy(row1, temp, bytes_copy);
   2f9e8:	89 c1                	mov    %eax,%ecx
   2f9ea:	41 0f b7 74 0a fe    	movzwl -0x2(%r10,%rcx,1),%esi
   2f9f0:	66 89 74 0a fe       	mov    %si,-0x2(%rdx,%rcx,1)
   2f9f5:	e9 70 fe ff ff       	jmp    2f86a <stbi_load_gif_from_memory+0x15a>
   2f9fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         memcpy(row0, row1, bytes_copy);
   2fa00:	89 c1                	mov    %eax,%ecx
   2fa02:	0f b7 74 0a fe       	movzwl -0x2(%rdx,%rcx,1),%esi
   2fa07:	66 41 89 74 08 fe    	mov    %si,-0x2(%r8,%rcx,1)
   2fa0d:	e9 d6 fe ff ff       	jmp    2f8e8 <stbi_load_gif_from_memory+0x1d8>
   for (slice = 0; slice < z; ++slice) {
   2fa12:	41 83 c0 01          	add    $0x1,%r8d
      bytes += slice_size;
   2fa16:	4c 01 f2             	add    %r14,%rdx
   for (slice = 0; slice < z; ++slice) {
   2fa19:	45 39 c7             	cmp    %r8d,%r15d
   2fa1c:	0f 85 dc fd ff ff    	jne    2f7fe <stbi_load_gif_from_memory+0xee>
   2fa22:	e9 41 ff ff ff       	jmp    2f968 <stbi_load_gif_from_memory+0x258>
   2fa27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2fa2e:	00 00 

000000000002fa30 <stbi_loadf_from_memory>:
{
   2fa30:	48 63 c6             	movslq %esi,%rax
   2fa33:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   s->io.read = NULL;
   2fa3a:	66 48 0f 6e c7       	movq   %rdi,%xmm0
{
   2fa3f:	48 89 d6             	mov    %rdx,%rsi
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   2fa42:	48 01 f8             	add    %rdi,%rax
{
   2fa45:	48 89 ca             	mov    %rcx,%rdx
   return stbi__loadf_main(&s,x,y,comp,req_comp);
   2fa48:	48 89 e7             	mov    %rsp,%rdi
{
   2fa4b:	4c 89 c1             	mov    %r8,%rcx
   2fa4e:	66 48 0f 6e c8       	movq   %rax,%xmm1
   2fa53:	45 89 c8             	mov    %r9d,%r8d
   s->io.read = NULL;
   2fa56:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
   2fa5d:	00 00 
   s->read_from_callbacks = 0;
   2fa5f:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
   2fa63:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2fa6a:	00 
   s->callback_already_read = 0;
   2fa6b:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2fa72:	00 00 00 00 
   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;
   2fa76:	0f 29 84 24 c0 00 00 	movaps %xmm0,0xc0(%rsp)
   2fa7d:	00 
   2fa7e:	0f 29 84 24 d0 00 00 	movaps %xmm0,0xd0(%rsp)
   2fa85:	00 
   return stbi__loadf_main(&s,x,y,comp,req_comp);
   2fa86:	e8 e5 ea ff ff       	call   2e570 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i>
}
   2fa8b:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   2fa92:	c3                   	ret
   2fa93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2fa9a:	00 00 00 00 
   2fa9e:	66 90                	xchg   %ax,%ax

000000000002faa0 <stbi_loadf_from_callbacks>:
{
   2faa0:	41 56                	push   %r14
   2faa2:	48 89 f8             	mov    %rdi,%rax
   2faa5:	48 89 f7             	mov    %rsi,%rdi
   2faa8:	41 55                	push   %r13
   2faaa:	45 89 cd             	mov    %r9d,%r13d
   2faad:	41 54                	push   %r12
   2faaf:	4d 89 c4             	mov    %r8,%r12
   2fab2:	55                   	push   %rbp
   2fab3:	48 89 cd             	mov    %rcx,%rbp
   2fab6:	53                   	push   %rbx
   2fab7:	48 89 d3             	mov    %rdx,%rbx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2faba:	ba 80 00 00 00       	mov    $0x80,%edx
{
   2fabf:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   s->io = *c;
   2fac6:	f3 0f 6f 00          	movdqu (%rax),%xmm0
   2faca:	48 8b 08             	mov    (%rax),%rcx
   2facd:	48 8b 40 10          	mov    0x10(%rax),%rax
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2fad1:	4c 8d 74 24 38       	lea    0x38(%rsp),%r14
   s->io_user_data = user;
   2fad6:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
   s->callback_already_read = 0;
   2fadb:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2fae2:	00 00 00 00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fae6:	4c 89 f6             	mov    %r14,%rsi
   s->io = *c;
   2fae9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2faee:	48 8b 05 f3 8f 00 00 	mov    0x8ff3(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2faf5:	4c 89 b4 24 d0 00 00 	mov    %r14,0xd0(%rsp)
   2fafc:	00 
   s->read_from_callbacks = 1;
   2fafd:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2fb02:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
   2fb09:	00 
   s->io = *c;
   2fb0a:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fb0f:	ff d1                	call   *%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2fb11:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2fb18:	00 
   2fb19:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2fb20:	00 
   2fb21:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2fb28:	85 c0                	test   %eax,%eax
   2fb2a:	75 54                	jne    2fb80 <stbi_loadf_from_callbacks+0xe0>
      s->read_from_callbacks = 0;
   2fb2c:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2fb33:	00 
      s->img_buffer_end = s->buffer_start+1;
   2fb34:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2fb39:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   2fb3e:	48 89 e7             	mov    %rsp,%rdi
   return stbi__loadf_main(&s,x,y,comp,req_comp);
   2fb41:	45 89 e8             	mov    %r13d,%r8d
   2fb44:	4c 89 e1             	mov    %r12,%rcx
   2fb47:	48 89 ea             	mov    %rbp,%rdx
   2fb4a:	48 89 de             	mov    %rbx,%rsi
   2fb4d:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
   2fb54:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2fb55:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2fb5c:	00 
   2fb5d:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2fb64:	00 
   return stbi__loadf_main(&s,x,y,comp,req_comp);
   2fb65:	e8 06 ea ff ff       	call   2e570 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i>
}
   2fb6a:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   2fb71:	5b                   	pop    %rbx
   2fb72:	5d                   	pop    %rbp
   2fb73:	41 5c                	pop    %r12
   2fb75:	41 5d                	pop    %r13
   2fb77:	41 5e                	pop    %r14
   2fb79:	c3                   	ret
   2fb7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   2fb80:	48 98                	cltq
   2fb82:	4c 01 f0             	add    %r14,%rax
   2fb85:	eb b7                	jmp    2fb3e <stbi_loadf_from_callbacks+0x9e>
   2fb87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2fb8e:	00 00 

000000000002fb90 <stbi_loadf>:
{
   2fb90:	41 57                	push   %r15
   2fb92:	41 56                	push   %r14
   2fb94:	41 55                	push   %r13
   2fb96:	45 89 c5             	mov    %r8d,%r13d
   2fb99:	41 54                	push   %r12
   2fb9b:	49 89 cc             	mov    %rcx,%r12
   2fb9e:	55                   	push   %rbp
   2fb9f:	48 89 d5             	mov    %rdx,%rbp
   2fba2:	53                   	push   %rbx
   2fba3:	48 89 f3             	mov    %rsi,%rbx
   f = fopen(filename, mode);
   2fba6:	48 8d 35 96 83 00 00 	lea    0x8396(%rip),%rsi        # 37f43 <_ZSt19piecewise_construct+0x5fc>
{
   2fbad:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   f = fopen(filename, mode);
   2fbb4:	e8 b7 6a fd ff       	call   6670 <fopen@plt>
   if (!f) return stbi__errpf("can't fopen", "Unable to open file");
   2fbb9:	48 85 c0             	test   %rax,%rax
   2fbbc:	0f 84 e2 00 00 00    	je     2fca4 <stbi_loadf+0x114>
   2fbc2:	49 89 c6             	mov    %rax,%r14
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2fbc5:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fbca:	ba 80 00 00 00       	mov    $0x80,%edx
   s->io = *c;
   2fbcf:	48 8b 05 2a 0b 01 00 	mov    0x10b2a(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   2fbd6:	66 0f 6f 05 12 0b 01 	movdqa 0x10b12(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   2fbdd:	00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fbde:	4c 89 fe             	mov    %r15,%rsi
   2fbe1:	4c 89 f7             	mov    %r14,%rdi
   s->io_user_data = user;
   2fbe4:	4c 89 74 24 28       	mov    %r14,0x28(%rsp)
   s->io = *c;
   2fbe9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2fbee:	48 8b 05 f3 8e 00 00 	mov    0x8ef3(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->callback_already_read = 0;
   2fbf5:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2fbfc:	00 00 00 00 
   s->read_from_callbacks = 1;
   2fc00:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2fc05:	4c 89 bc 24 d0 00 00 	mov    %r15,0xd0(%rsp)
   2fc0c:	00 
   2fc0d:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2fc14:	00 
   s->io = *c;
   2fc15:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fc1a:	e8 61 1d fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2fc1f:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2fc26:	00 
   2fc27:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2fc2e:	00 
   2fc2f:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2fc36:	85 c0                	test   %eax,%eax
   2fc38:	74 56                	je     2fc90 <stbi_loadf+0x100>
      s->img_buffer_end = s->buffer_start + n;
   2fc3a:	48 98                	cltq
   2fc3c:	4c 01 f8             	add    %r15,%rax
   2fc3f:	48 89 e7             	mov    %rsp,%rdi
   return stbi__loadf_main(&s,x,y,comp,req_comp);
   2fc42:	48 89 de             	mov    %rbx,%rsi
   2fc45:	45 89 e8             	mov    %r13d,%r8d
   2fc48:	4c 89 e1             	mov    %r12,%rcx
   2fc4b:	48 89 ea             	mov    %rbp,%rdx
   2fc4e:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2fc55:	00 
   2fc56:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   2fc5d:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2fc5e:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2fc65:	00 
   return stbi__loadf_main(&s,x,y,comp,req_comp);
   2fc66:	e8 05 e9 ff ff       	call   2e570 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i>
   fclose(f);
   2fc6b:	4c 89 f7             	mov    %r14,%rdi
   return stbi__loadf_main(&s,x,y,comp,req_comp);
   2fc6e:	48 89 c3             	mov    %rax,%rbx
   fclose(f);
   2fc71:	e8 ba 68 fd ff       	call   6530 <fclose@plt>
}
   2fc76:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   2fc7d:	48 89 d8             	mov    %rbx,%rax
   2fc80:	5b                   	pop    %rbx
   2fc81:	5d                   	pop    %rbp
   2fc82:	41 5c                	pop    %r12
   2fc84:	41 5d                	pop    %r13
   2fc86:	41 5e                	pop    %r14
   2fc88:	41 5f                	pop    %r15
   2fc8a:	c3                   	ret
   2fc8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->read_from_callbacks = 0;
   2fc90:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2fc97:	00 
      s->img_buffer_end = s->buffer_start+1;
   2fc98:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2fc9d:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   2fca2:	eb 9b                	jmp    2fc3f <stbi_loadf+0xaf>
   stbi__g_failure_reason = str;
   2fca4:	48 8d 05 9b 82 00 00 	lea    0x829b(%rip),%rax        # 37f46 <_ZSt19piecewise_construct+0x5ff>
   if (!f) return stbi__errpf("can't fopen", "Unable to open file");
   2fcab:	31 db                	xor    %ebx,%ebx
   stbi__g_failure_reason = str;
   2fcad:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   2fcb4:	ff ff 
   if (!f) return stbi__errpf("can't fopen", "Unable to open file");
   2fcb6:	eb be                	jmp    2fc76 <stbi_loadf+0xe6>
   2fcb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2fcbf:	00 

000000000002fcc0 <stbi_loadf_from_file>:
{
   2fcc0:	41 56                	push   %r14
   2fcc2:	41 55                	push   %r13
   2fcc4:	45 89 c5             	mov    %r8d,%r13d
   2fcc7:	41 54                	push   %r12
   2fcc9:	49 89 cc             	mov    %rcx,%r12
   2fccc:	55                   	push   %rbp
   2fccd:	48 89 d5             	mov    %rdx,%rbp
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fcd0:	ba 80 00 00 00       	mov    $0x80,%edx
{
   2fcd5:	53                   	push   %rbx
   2fcd6:	48 89 f3             	mov    %rsi,%rbx
   2fcd9:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   s->io = *c;
   2fce0:	48 8b 05 19 0a 01 00 	mov    0x10a19(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   2fce7:	66 0f 6f 05 01 0a 01 	movdqa 0x10a01(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   2fcee:	00 
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2fcef:	4c 8d 74 24 38       	lea    0x38(%rsp),%r14
   s->io_user_data = user;
   2fcf4:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
   s->io = *c;
   2fcf9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2fcfe:	48 8b 05 e3 8d 00 00 	mov    0x8de3(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fd05:	4c 89 f6             	mov    %r14,%rsi
   s->callback_already_read = 0;
   2fd08:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2fd0f:	00 00 00 00 
   s->read_from_callbacks = 1;
   2fd13:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2fd18:	4c 89 b4 24 d0 00 00 	mov    %r14,0xd0(%rsp)
   2fd1f:	00 
   2fd20:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
   2fd27:	00 
   s->io = *c;
   2fd28:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fd2d:	e8 4e 1c fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2fd32:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2fd39:	00 
   2fd3a:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2fd41:	00 
   2fd42:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2fd49:	85 c0                	test   %eax,%eax
   2fd4b:	75 53                	jne    2fda0 <stbi_loadf_from_file+0xe0>
      s->read_from_callbacks = 0;
   2fd4d:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2fd54:	00 
      s->img_buffer_end = s->buffer_start+1;
   2fd55:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2fd5a:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   2fd5f:	48 89 e7             	mov    %rsp,%rdi
   return stbi__loadf_main(&s,x,y,comp,req_comp);
   2fd62:	45 89 e8             	mov    %r13d,%r8d
   2fd65:	4c 89 e1             	mov    %r12,%rcx
   2fd68:	48 89 ea             	mov    %rbp,%rdx
   2fd6b:	48 89 de             	mov    %rbx,%rsi
   2fd6e:	4c 89 b4 24 c0 00 00 	mov    %r14,0xc0(%rsp)
   2fd75:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2fd76:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2fd7d:	00 
   2fd7e:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2fd85:	00 
   return stbi__loadf_main(&s,x,y,comp,req_comp);
   2fd86:	e8 e5 e7 ff ff       	call   2e570 <_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i>
}
   2fd8b:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   2fd92:	5b                   	pop    %rbx
   2fd93:	5d                   	pop    %rbp
   2fd94:	41 5c                	pop    %r12
   2fd96:	41 5d                	pop    %r13
   2fd98:	41 5e                	pop    %r14
   2fd9a:	c3                   	ret
   2fd9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   2fda0:	48 98                	cltq
   2fda2:	4c 01 f0             	add    %r14,%rax
   2fda5:	eb b8                	jmp    2fd5f <stbi_loadf_from_file+0x9f>
   2fda7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2fdae:	00 00 

000000000002fdb0 <stbi_is_hdr_from_memory>:
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   2fdb0:	48 63 f6             	movslq %esi,%rsi
{
   2fdb3:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   s->io.read = NULL;
   2fdba:	66 48 0f 6e c7       	movq   %rdi,%xmm0
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   2fdbf:	48 8d 04 37          	lea    (%rdi,%rsi,1),%rax
   return stbi__hdr_test(&s);
   2fdc3:	48 89 e7             	mov    %rsp,%rdi
   s->io.read = NULL;
   2fdc6:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
   2fdcd:	00 00 
   s->read_from_callbacks = 0;
   2fdcf:	66 48 0f 6e c8       	movq   %rax,%xmm1
   2fdd4:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2fddb:	00 
   s->callback_already_read = 0;
   2fddc:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2fde3:	00 00 00 00 
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   2fde7:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;
   2fdeb:	0f 29 84 24 c0 00 00 	movaps %xmm0,0xc0(%rsp)
   2fdf2:	00 
   2fdf3:	0f 29 84 24 d0 00 00 	movaps %xmm0,0xd0(%rsp)
   2fdfa:	00 
   return stbi__hdr_test(&s);
   2fdfb:	e8 a0 ba fe ff       	call   1b8a0 <_ZL14stbi__hdr_testP13stbi__context>
}
   2fe00:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   2fe07:	c3                   	ret
   2fe08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2fe0f:	00 

000000000002fe10 <stbi_is_hdr>:
{
   2fe10:	41 54                	push   %r12
   f = fopen(filename, mode);
   2fe12:	48 8d 35 2a 81 00 00 	lea    0x812a(%rip),%rsi        # 37f43 <_ZSt19piecewise_construct+0x5fc>
{
   2fe19:	55                   	push   %rbp
   2fe1a:	53                   	push   %rbx
   2fe1b:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   f = fopen(filename, mode);
   2fe22:	e8 49 68 fd ff       	call   6670 <fopen@plt>
   if (f) {
   2fe27:	48 85 c0             	test   %rax,%rax
   2fe2a:	0f 84 e4 00 00 00    	je     2ff14 <stbi_is_hdr+0x104>
   long pos = ftell(f);
   2fe30:	48 89 c7             	mov    %rax,%rdi
   2fe33:	48 89 c3             	mov    %rax,%rbx
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2fe36:	4c 8d 64 24 38       	lea    0x38(%rsp),%r12
   long pos = ftell(f);
   2fe3b:	e8 f0 61 fd ff       	call   6030 <ftell@plt>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fe40:	ba 80 00 00 00       	mov    $0x80,%edx
   2fe45:	4c 89 e6             	mov    %r12,%rsi
   2fe48:	48 89 df             	mov    %rbx,%rdi
   long pos = ftell(f);
   2fe4b:	48 89 c5             	mov    %rax,%rbp
   s->io_user_data = user;
   2fe4e:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
   s->io = *c;
   2fe53:	48 8b 05 a6 08 01 00 	mov    0x108a6(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   2fe5a:	66 0f 6f 05 8e 08 01 	movdqa 0x1088e(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   2fe61:	00 
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2fe62:	4c 89 a4 24 d0 00 00 	mov    %r12,0xd0(%rsp)
   2fe69:	00 
   s->io = *c;
   2fe6a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2fe6f:	48 8b 05 72 8c 00 00 	mov    0x8c72(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->callback_already_read = 0;
   2fe76:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2fe7d:	00 00 00 00 
   s->read_from_callbacks = 1;
   2fe81:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2fe86:	4c 89 a4 24 c0 00 00 	mov    %r12,0xc0(%rsp)
   2fe8d:	00 
   s->io = *c;
   2fe8e:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2fe93:	e8 e8 1a fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2fe98:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2fe9f:	00 
   2fea0:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2fea7:	00 
   2fea8:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2feaf:	85 c0                	test   %eax,%eax
   2feb1:	74 4d                	je     2ff00 <stbi_is_hdr+0xf0>
      s->img_buffer_end = s->buffer_start + n;
   2feb3:	48 98                	cltq
   2feb5:	4c 01 e0             	add    %r12,%rax
   2feb8:	48 89 e7             	mov    %rsp,%rdi
   2febb:	4c 89 a4 24 c0 00 00 	mov    %r12,0xc0(%rsp)
   2fec2:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2fec3:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2feca:	00 
   2fecb:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2fed2:	00 
   res = stbi__hdr_test(&s);
   2fed3:	e8 c8 b9 fe ff       	call   1b8a0 <_ZL14stbi__hdr_testP13stbi__context>
   fseek(f, pos, SEEK_SET);
   2fed8:	48 89 df             	mov    %rbx,%rdi
   2fedb:	31 d2                	xor    %edx,%edx
   2fedd:	48 89 ee             	mov    %rbp,%rsi
   res = stbi__hdr_test(&s);
   2fee0:	41 89 c4             	mov    %eax,%r12d
   fseek(f, pos, SEEK_SET);
   2fee3:	e8 28 67 fd ff       	call   6610 <fseek@plt>
      fclose(f);
   2fee8:	48 89 df             	mov    %rbx,%rdi
   2feeb:	e8 40 66 fd ff       	call   6530 <fclose@plt>
}
   2fef0:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   2fef7:	44 89 e0             	mov    %r12d,%eax
   2fefa:	5b                   	pop    %rbx
   2fefb:	5d                   	pop    %rbp
   2fefc:	41 5c                	pop    %r12
   2fefe:	c3                   	ret
   2feff:	90                   	nop
      s->read_from_callbacks = 0;
   2ff00:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2ff07:	00 
      s->img_buffer_end = s->buffer_start+1;
   2ff08:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2ff0d:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   2ff12:	eb a4                	jmp    2feb8 <stbi_is_hdr+0xa8>
   int result=0;
   2ff14:	45 31 e4             	xor    %r12d,%r12d
   return result;
   2ff17:	eb d7                	jmp    2fef0 <stbi_is_hdr+0xe0>
   2ff19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000002ff20 <stbi_is_hdr_from_file>:
{
   2ff20:	41 54                	push   %r12
   2ff22:	55                   	push   %rbp
   2ff23:	53                   	push   %rbx
   2ff24:	48 89 fb             	mov    %rdi,%rbx
   2ff27:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   long pos = ftell(f);
   2ff2e:	e8 fd 60 fd ff       	call   6030 <ftell@plt>
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2ff33:	4c 8d 64 24 38       	lea    0x38(%rsp),%r12
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2ff38:	ba 80 00 00 00       	mov    $0x80,%edx
   2ff3d:	48 89 df             	mov    %rbx,%rdi
   long pos = ftell(f);
   2ff40:	48 89 c5             	mov    %rax,%rbp
   s->io = *c;
   2ff43:	48 8b 05 b6 07 01 00 	mov    0x107b6(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2ff4a:	4c 89 e6             	mov    %r12,%rsi
   s->io = *c;
   2ff4d:	66 0f 6f 05 9b 07 01 	movdqa 0x1079b(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   2ff54:	00 
   s->io_user_data = user;
   2ff55:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
   s->io = *c;
   2ff5a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   2ff5f:	48 8b 05 82 8b 00 00 	mov    0x8b82(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->callback_already_read = 0;
   2ff66:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   2ff6d:	00 00 00 00 
   s->read_from_callbacks = 1;
   2ff71:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   2ff76:	4c 89 a4 24 d0 00 00 	mov    %r12,0xd0(%rsp)
   2ff7d:	00 
   2ff7e:	4c 89 a4 24 c0 00 00 	mov    %r12,0xc0(%rsp)
   2ff85:	00 
   s->io = *c;
   2ff86:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   2ff8b:	e8 f0 19 fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   2ff90:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   2ff97:	00 
   2ff98:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   2ff9f:	00 
   2ffa0:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   2ffa7:	85 c0                	test   %eax,%eax
   2ffa9:	75 55                	jne    30000 <stbi_is_hdr_from_file+0xe0>
      s->read_from_callbacks = 0;
   2ffab:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   2ffb2:	00 
      s->img_buffer_end = s->buffer_start+1;
   2ffb3:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   2ffb8:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   2ffbd:	48 89 e7             	mov    %rsp,%rdi
   2ffc0:	4c 89 a4 24 c0 00 00 	mov    %r12,0xc0(%rsp)
   2ffc7:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   2ffc8:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   2ffcf:	00 
   2ffd0:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   2ffd7:	00 
   res = stbi__hdr_test(&s);
   2ffd8:	e8 c3 b8 fe ff       	call   1b8a0 <_ZL14stbi__hdr_testP13stbi__context>
   fseek(f, pos, SEEK_SET);
   2ffdd:	48 89 ee             	mov    %rbp,%rsi
   2ffe0:	48 89 df             	mov    %rbx,%rdi
   2ffe3:	31 d2                	xor    %edx,%edx
   res = stbi__hdr_test(&s);
   2ffe5:	41 89 c4             	mov    %eax,%r12d
   fseek(f, pos, SEEK_SET);
   2ffe8:	e8 23 66 fd ff       	call   6610 <fseek@plt>
}
   2ffed:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   2fff4:	44 89 e0             	mov    %r12d,%eax
   2fff7:	5b                   	pop    %rbx
   2fff8:	5d                   	pop    %rbp
   2fff9:	41 5c                	pop    %r12
   2fffb:	c3                   	ret
   2fffc:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   30000:	48 98                	cltq
   30002:	4c 01 e0             	add    %r12,%rax
   30005:	eb b6                	jmp    2ffbd <stbi_is_hdr_from_file+0x9d>
   30007:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3000e:	00 00 

0000000000030010 <stbi_is_hdr_from_callbacks>:
{
   30010:	53                   	push   %rbx
   30011:	48 89 f8             	mov    %rdi,%rax
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30014:	ba 80 00 00 00       	mov    $0x80,%edx
{
   30019:	48 89 f7             	mov    %rsi,%rdi
   3001c:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   s->io = *c;
   30023:	f3 0f 6f 00          	movdqu (%rax),%xmm0
   30027:	48 8b 08             	mov    (%rax),%rcx
   3002a:	48 8b 40 10          	mov    0x10(%rax),%rax
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   3002e:	48 8d 5c 24 38       	lea    0x38(%rsp),%rbx
   s->io_user_data = user;
   30033:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
   s->callback_already_read = 0;
   30038:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   3003f:	00 00 00 00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30043:	48 89 de             	mov    %rbx,%rsi
   s->io = *c;
   30046:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   3004b:	48 8b 05 96 8a 00 00 	mov    0x8a96(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30052:	48 89 9c 24 d0 00 00 	mov    %rbx,0xd0(%rsp)
   30059:	00 
   s->read_from_callbacks = 1;
   3005a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   3005f:	48 89 9c 24 c0 00 00 	mov    %rbx,0xc0(%rsp)
   30066:	00 
   s->io = *c;
   30067:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   3006c:	ff d1                	call   *%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   3006e:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   30075:	00 
   30076:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   3007d:	00 
   3007e:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   30085:	85 c0                	test   %eax,%eax
   30087:	75 3f                	jne    300c8 <stbi_is_hdr_from_callbacks+0xb8>
      s->read_from_callbacks = 0;
   30089:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   30090:	00 
      s->img_buffer_end = s->buffer_start+1;
   30091:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   30096:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   3009b:	48 89 e7             	mov    %rsp,%rdi
   3009e:	48 89 9c 24 c0 00 00 	mov    %rbx,0xc0(%rsp)
   300a5:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   300a6:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   300ad:	00 
   300ae:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   300b5:	00 
   return stbi__hdr_test(&s);
   300b6:	e8 e5 b7 fe ff       	call   1b8a0 <_ZL14stbi__hdr_testP13stbi__context>
}
   300bb:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   300c2:	5b                   	pop    %rbx
   300c3:	c3                   	ret
   300c4:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   300c8:	48 98                	cltq
   300ca:	48 01 d8             	add    %rbx,%rax
   300cd:	eb cc                	jmp    3009b <stbi_is_hdr_from_callbacks+0x8b>
   300cf:	90                   	nop

00000000000300d0 <stbi_ldr_to_hdr_gamma>:
STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }
   300d0:	f3 0f 11 05 f0 14 01 	movss  %xmm0,0x114f0(%rip)        # 415c8 <_ZL15stbi__l2h_gamma>
   300d7:	00 
   300d8:	c3                   	ret
   300d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000300e0 <stbi_ldr_to_hdr_scale>:
STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }
   300e0:	f3 0f 11 05 dc 14 01 	movss  %xmm0,0x114dc(%rip)        # 415c4 <_ZL15stbi__l2h_scale>
   300e7:	00 
   300e8:	c3                   	ret
   300e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000300f0 <stbi_hdr_to_ldr_gamma>:
STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1/gamma; }
   300f0:	0f 28 c8             	movaps %xmm0,%xmm1
   300f3:	f3 0f 10 05 ad 89 00 	movss  0x89ad(%rip),%xmm0        # 38aa8 <_ZL11stbi__bmask+0x328>
   300fa:	00 
   300fb:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   300ff:	f3 0f 11 05 b9 14 01 	movss  %xmm0,0x114b9(%rip)        # 415c0 <_ZL17stbi__h2l_gamma_i>
   30106:	00 
   30107:	c3                   	ret
   30108:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   3010f:	00 

0000000000030110 <stbi_hdr_to_ldr_scale>:
STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1/scale; }
   30110:	0f 28 c8             	movaps %xmm0,%xmm1
   30113:	f3 0f 10 05 8d 89 00 	movss  0x898d(%rip),%xmm0        # 38aa8 <_ZL11stbi__bmask+0x328>
   3011a:	00 
   3011b:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   3011f:	f3 0f 11 05 95 14 01 	movss  %xmm0,0x11495(%rip)        # 415bc <_ZL17stbi__h2l_scale_i>
   30126:	00 
   30127:	c3                   	ret
   30128:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   3012f:	00 

0000000000030130 <stbi_zlib_decode_malloc_guesssize>:
{
   30130:	41 55                	push   %r13
   char *p = (char *) stbi__malloc(initial_size);
   30132:	4c 63 ea             	movslq %edx,%r13
{
   30135:	41 54                	push   %r12
   30137:	4c 63 e6             	movslq %esi,%r12
   3013a:	55                   	push   %rbp
   3013b:	48 89 cd             	mov    %rcx,%rbp
   3013e:	53                   	push   %rbx
   3013f:	48 89 fb             	mov    %rdi,%rbx
    return STBI_MALLOC(size);
   30142:	4c 89 ef             	mov    %r13,%rdi
{
   30145:	48 81 ec 08 10 00 00 	sub    $0x1008,%rsp
    return STBI_MALLOC(size);
   3014c:	e8 0f 66 fd ff       	call   6760 <malloc@plt>
   if (p == NULL) return NULL;
   30151:	48 85 c0             	test   %rax,%rax
   30154:	74 6c                	je     301c2 <stbi_zlib_decode_malloc_guesssize+0x92>
   30156:	66 48 0f 6e c0       	movq   %rax,%xmm0
   a.zbuffer = (stbi_uc *) buffer;
   3015b:	48 89 1c 24          	mov    %rbx,(%rsp)
   a->zout_end   = obuf + olen;
   3015f:	4c 01 e8             	add    %r13,%rax
   a.zbuffer_end = (stbi_uc *) buffer + len;
   30162:	4c 01 e3             	add    %r12,%rbx
   30165:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
   return stbi__parse_zlib(a, parse_header);
   30169:	48 89 e7             	mov    %rsp,%rdi
   3016c:	be 01 00 00 00       	mov    $0x1,%esi
   a.zbuffer_end = (stbi_uc *) buffer + len;
   30171:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
   a->zout_end   = obuf + olen;
   30176:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
   a->z_expandable = exp;
   3017b:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
   30182:	00 
   a->zout       = obuf;
   30183:	0f 11 44 24 18       	movups %xmm0,0x18(%rsp)
   return stbi__parse_zlib(a, parse_header);
   30188:	e8 d3 c7 fe ff       	call   1c960 <_ZL16stbi__parse_zlibP10stbi__zbufi>
   if (stbi__do_zlib(&a, p, initial_size, 1, 1)) {
   3018d:	85 c0                	test   %eax,%eax
   3018f:	74 27                	je     301b8 <stbi_zlib_decode_malloc_guesssize+0x88>
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
   30191:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   30196:	48 85 ed             	test   %rbp,%rbp
   30199:	74 0b                	je     301a6 <stbi_zlib_decode_malloc_guesssize+0x76>
   3019b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   301a0:	48 29 c2             	sub    %rax,%rdx
   301a3:	89 55 00             	mov    %edx,0x0(%rbp)
}
   301a6:	48 81 c4 08 10 00 00 	add    $0x1008,%rsp
   301ad:	5b                   	pop    %rbx
   301ae:	5d                   	pop    %rbp
   301af:	41 5c                	pop    %r12
   301b1:	41 5d                	pop    %r13
   301b3:	c3                   	ret
   301b4:	0f 1f 40 00          	nopl   0x0(%rax)
      STBI_FREE(a.zout_start);
   301b8:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   301bd:	e8 de 64 fd ff       	call   66a0 <free@plt>
}
   301c2:	48 81 c4 08 10 00 00 	add    $0x1008,%rsp
   if (p == NULL) return NULL;
   301c9:	31 c0                	xor    %eax,%eax
}
   301cb:	5b                   	pop    %rbx
   301cc:	5d                   	pop    %rbp
   301cd:	41 5c                	pop    %r12
   301cf:	41 5d                	pop    %r13
   301d1:	c3                   	ret
   301d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   301d9:	00 00 00 00 
   301dd:	0f 1f 00             	nopl   (%rax)

00000000000301e0 <stbi_zlib_decode_malloc>:
{
   301e0:	48 89 d1             	mov    %rdx,%rcx
   return stbi_zlib_decode_malloc_guesssize(buffer, len, 16384, outlen);
   301e3:	ba 00 40 00 00       	mov    $0x4000,%edx
   301e8:	e9 43 ff ff ff       	jmp    30130 <stbi_zlib_decode_malloc_guesssize>
   301ed:	0f 1f 00             	nopl   (%rax)

00000000000301f0 <stbi_zlib_decode_malloc_guesssize_headerflag>:
{
   301f0:	41 56                	push   %r14
   char *p = (char *) stbi__malloc(initial_size);
   301f2:	4c 63 f2             	movslq %edx,%r14
{
   301f5:	41 55                	push   %r13
   301f7:	45 89 c5             	mov    %r8d,%r13d
   301fa:	41 54                	push   %r12
   301fc:	49 89 cc             	mov    %rcx,%r12
   301ff:	55                   	push   %rbp
   30200:	48 63 ee             	movslq %esi,%rbp
   30203:	53                   	push   %rbx
   30204:	48 89 fb             	mov    %rdi,%rbx
    return STBI_MALLOC(size);
   30207:	4c 89 f7             	mov    %r14,%rdi
{
   3020a:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    return STBI_MALLOC(size);
   30211:	e8 4a 65 fd ff       	call   6760 <malloc@plt>
   if (p == NULL) return NULL;
   30216:	48 85 c0             	test   %rax,%rax
   30219:	74 6f                	je     3028a <stbi_zlib_decode_malloc_guesssize_headerflag+0x9a>
   3021b:	66 48 0f 6e c0       	movq   %rax,%xmm0
   a.zbuffer = (stbi_uc *) buffer;
   30220:	48 89 1c 24          	mov    %rbx,(%rsp)
   a->zout_end   = obuf + olen;
   30224:	4c 01 f0             	add    %r14,%rax
   a.zbuffer_end = (stbi_uc *) buffer + len;
   30227:	48 01 eb             	add    %rbp,%rbx
   3022a:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
   return stbi__parse_zlib(a, parse_header);
   3022e:	48 89 e7             	mov    %rsp,%rdi
   30231:	44 89 ee             	mov    %r13d,%esi
   a.zbuffer_end = (stbi_uc *) buffer + len;
   30234:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
   a->zout_end   = obuf + olen;
   30239:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
   a->z_expandable = exp;
   3023e:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
   30245:	00 
   a->zout       = obuf;
   30246:	0f 11 44 24 18       	movups %xmm0,0x18(%rsp)
   return stbi__parse_zlib(a, parse_header);
   3024b:	e8 10 c7 fe ff       	call   1c960 <_ZL16stbi__parse_zlibP10stbi__zbufi>
   if (stbi__do_zlib(&a, p, initial_size, 1, parse_header)) {
   30250:	85 c0                	test   %eax,%eax
   30252:	74 2c                	je     30280 <stbi_zlib_decode_malloc_guesssize_headerflag+0x90>
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
   30254:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   30259:	4d 85 e4             	test   %r12,%r12
   3025c:	74 0c                	je     3026a <stbi_zlib_decode_malloc_guesssize_headerflag+0x7a>
   3025e:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   30263:	48 29 c2             	sub    %rax,%rdx
   30266:	41 89 14 24          	mov    %edx,(%r12)
}
   3026a:	48 81 c4 00 10 00 00 	add    $0x1000,%rsp
   30271:	5b                   	pop    %rbx
   30272:	5d                   	pop    %rbp
   30273:	41 5c                	pop    %r12
   30275:	41 5d                	pop    %r13
   30277:	41 5e                	pop    %r14
   30279:	c3                   	ret
   3027a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      STBI_FREE(a.zout_start);
   30280:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   30285:	e8 16 64 fd ff       	call   66a0 <free@plt>
}
   3028a:	48 81 c4 00 10 00 00 	add    $0x1000,%rsp
   if (p == NULL) return NULL;
   30291:	31 c0                	xor    %eax,%eax
}
   30293:	5b                   	pop    %rbx
   30294:	5d                   	pop    %rbp
   30295:	41 5c                	pop    %r12
   30297:	41 5d                	pop    %r13
   30299:	41 5e                	pop    %r14
   3029b:	c3                   	ret
   3029c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000302a0 <stbi_zlib_decode_buffer>:
   a->zout_end   = obuf + olen;
   302a0:	48 63 f6             	movslq %esi,%rsi
{
   302a3:	48 81 ec 08 10 00 00 	sub    $0x1008,%rsp
   a->zout       = obuf;
   302aa:	66 48 0f 6e c7       	movq   %rdi,%xmm0
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   302af:	48 63 c9             	movslq %ecx,%rcx
   a->zout_end   = obuf + olen;
   302b2:	48 01 f7             	add    %rsi,%rdi
   a.zbuffer = (stbi_uc *) ibuffer;
   302b5:	48 89 14 24          	mov    %rdx,(%rsp)
   a->zout       = obuf;
   302b9:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   302bd:	48 01 ca             	add    %rcx,%rdx
   a->zout_end   = obuf + olen;
   302c0:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
   return stbi__parse_zlib(a, parse_header);
   302c5:	be 01 00 00 00       	mov    $0x1,%esi
   302ca:	48 89 e7             	mov    %rsp,%rdi
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   302cd:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   a->z_expandable = exp;
   302d2:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   302d9:	00 
   a->zout       = obuf;
   302da:	0f 11 44 24 18       	movups %xmm0,0x18(%rsp)
   return stbi__parse_zlib(a, parse_header);
   302df:	e8 7c c6 fe ff       	call   1c960 <_ZL16stbi__parse_zlibP10stbi__zbufi>
   if (stbi__do_zlib(&a, obuffer, olen, 0, 1))
   302e4:	85 c0                	test   %eax,%eax
   302e6:	74 18                	je     30300 <stbi_zlib_decode_buffer+0x60>
      return (int) (a.zout - a.zout_start);
   302e8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   302ed:	2b 44 24 20          	sub    0x20(%rsp),%eax
}
   302f1:	48 81 c4 08 10 00 00 	add    $0x1008,%rsp
   302f8:	c3                   	ret
   302f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      return -1;
   30300:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   30305:	eb ea                	jmp    302f1 <stbi_zlib_decode_buffer+0x51>
   30307:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3030e:	00 00 

0000000000030310 <stbi_zlib_decode_noheader_malloc>:
{
   30310:	41 54                	push   %r12
   30312:	41 89 f4             	mov    %esi,%r12d
   30315:	55                   	push   %rbp
   30316:	48 89 d5             	mov    %rdx,%rbp
   30319:	53                   	push   %rbx
   3031a:	48 89 fb             	mov    %rdi,%rbx
    return STBI_MALLOC(size);
   3031d:	bf 00 40 00 00       	mov    $0x4000,%edi
{
   30322:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    return STBI_MALLOC(size);
   30329:	e8 32 64 fd ff       	call   6760 <malloc@plt>
   if (p == NULL) return NULL;
   3032e:	48 85 c0             	test   %rax,%rax
   30331:	74 6f                	je     303a2 <stbi_zlib_decode_noheader_malloc+0x92>
   30333:	66 48 0f 6e c0       	movq   %rax,%xmm0
   a.zbuffer_end = (stbi_uc *) buffer+len;
   30338:	49 63 f4             	movslq %r12d,%rsi
   a.zbuffer = (stbi_uc *) buffer;
   3033b:	48 89 1c 24          	mov    %rbx,(%rsp)
   return stbi__parse_zlib(a, parse_header);
   3033f:	48 89 e7             	mov    %rsp,%rdi
   a.zbuffer_end = (stbi_uc *) buffer+len;
   30342:	48 01 f3             	add    %rsi,%rbx
   a->zout_end   = obuf + olen;
   30345:	48 05 00 40 00 00    	add    $0x4000,%rax
   3034b:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
   return stbi__parse_zlib(a, parse_header);
   3034f:	31 f6                	xor    %esi,%esi
   a.zbuffer_end = (stbi_uc *) buffer+len;
   30351:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
   a->zout_end   = obuf + olen;
   30356:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
   a->z_expandable = exp;
   3035b:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
   30362:	00 
   a->zout       = obuf;
   30363:	0f 11 44 24 18       	movups %xmm0,0x18(%rsp)
   return stbi__parse_zlib(a, parse_header);
   30368:	e8 f3 c5 fe ff       	call   1c960 <_ZL16stbi__parse_zlibP10stbi__zbufi>
   if (stbi__do_zlib(&a, p, 16384, 1, 0)) {
   3036d:	85 c0                	test   %eax,%eax
   3036f:	74 27                	je     30398 <stbi_zlib_decode_noheader_malloc+0x88>
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
   30371:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   30376:	48 85 ed             	test   %rbp,%rbp
   30379:	74 0b                	je     30386 <stbi_zlib_decode_noheader_malloc+0x76>
   3037b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
   30380:	48 29 c2             	sub    %rax,%rdx
   30383:	89 55 00             	mov    %edx,0x0(%rbp)
}
   30386:	48 81 c4 00 10 00 00 	add    $0x1000,%rsp
   3038d:	5b                   	pop    %rbx
   3038e:	5d                   	pop    %rbp
   3038f:	41 5c                	pop    %r12
   30391:	c3                   	ret
   30392:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      STBI_FREE(a.zout_start);
   30398:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   3039d:	e8 fe 62 fd ff       	call   66a0 <free@plt>
}
   303a2:	48 81 c4 00 10 00 00 	add    $0x1000,%rsp
   if (p == NULL) return NULL;
   303a9:	31 c0                	xor    %eax,%eax
}
   303ab:	5b                   	pop    %rbx
   303ac:	5d                   	pop    %rbp
   303ad:	41 5c                	pop    %r12
   303af:	c3                   	ret

00000000000303b0 <stbi_zlib_decode_noheader_buffer>:
   a->zout_end   = obuf + olen;
   303b0:	48 63 f6             	movslq %esi,%rsi
{
   303b3:	48 81 ec 08 10 00 00 	sub    $0x1008,%rsp
   a->zout       = obuf;
   303ba:	66 48 0f 6e c7       	movq   %rdi,%xmm0
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   303bf:	48 63 c9             	movslq %ecx,%rcx
   a->zout_end   = obuf + olen;
   303c2:	48 01 f7             	add    %rsi,%rdi
   a.zbuffer = (stbi_uc *) ibuffer;
   303c5:	48 89 14 24          	mov    %rdx,(%rsp)
   a->zout       = obuf;
   303c9:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   303cd:	48 01 ca             	add    %rcx,%rdx
   a->zout_end   = obuf + olen;
   303d0:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
   return stbi__parse_zlib(a, parse_header);
   303d5:	31 f6                	xor    %esi,%esi
   303d7:	48 89 e7             	mov    %rsp,%rdi
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   303da:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   a->z_expandable = exp;
   303df:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   303e6:	00 
   a->zout       = obuf;
   303e7:	0f 11 44 24 18       	movups %xmm0,0x18(%rsp)
   return stbi__parse_zlib(a, parse_header);
   303ec:	e8 6f c5 fe ff       	call   1c960 <_ZL16stbi__parse_zlibP10stbi__zbufi>
   if (stbi__do_zlib(&a, obuffer, olen, 0, 0))
   303f1:	85 c0                	test   %eax,%eax
   303f3:	74 1b                	je     30410 <stbi_zlib_decode_noheader_buffer+0x60>
      return (int) (a.zout - a.zout_start);
   303f5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   303fa:	2b 44 24 20          	sub    0x20(%rsp),%eax
}
   303fe:	48 81 c4 08 10 00 00 	add    $0x1008,%rsp
   30405:	c3                   	ret
   30406:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   3040d:	00 00 00 
      return -1;
   30410:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   30415:	eb e7                	jmp    303fe <stbi_zlib_decode_noheader_buffer+0x4e>
   30417:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3041e:	00 00 

0000000000030420 <stbi_set_unpremultiply_on_load>:
   stbi__unpremultiply_on_load_global = flag_true_if_should_unpremultiply;
   30420:	89 3d de 13 01 00    	mov    %edi,0x113de(%rip)        # 41804 <_ZL34stbi__unpremultiply_on_load_global>
}
   30426:	c3                   	ret
   30427:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3042e:	00 00 

0000000000030430 <stbi_convert_iphone_png_to_rgb>:
   stbi__de_iphone_flag_global = flag_true_if_should_convert;
   30430:	89 3d ca 13 01 00    	mov    %edi,0x113ca(%rip)        # 41800 <_ZL27stbi__de_iphone_flag_global>
}
   30436:	c3                   	ret
   30437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3043e:	00 00 

0000000000030440 <_Z34stbi__unpremultiply_on_load_threadi>:
   stbi__unpremultiply_on_load_local = flag_true_if_should_unpremultiply;
   30440:	64 89 3c 25 ec ff ff 	mov    %edi,%fs:0xffffffffffffffec
   30447:	ff 
   stbi__unpremultiply_on_load_set = 1;
   30448:	64 c7 04 25 e8 ff ff 	movl   $0x1,%fs:0xffffffffffffffe8
   3044f:	ff 01 00 00 00 
}
   30454:	c3                   	ret
   30455:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   3045c:	00 00 00 00 

0000000000030460 <stbi_convert_iphone_png_to_rgb_thread>:
   stbi__de_iphone_flag_local = flag_true_if_should_convert;
   30460:	64 89 3c 25 e4 ff ff 	mov    %edi,%fs:0xffffffffffffffe4
   30467:	ff 
   stbi__de_iphone_flag_set = 1;
   30468:	64 c7 04 25 e0 ff ff 	movl   $0x1,%fs:0xffffffffffffffe0
   3046f:	ff 01 00 00 00 
}
   30474:	c3                   	ret
   30475:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   3047c:	00 00 00 00 

0000000000030480 <stbi_info>:
{
   30480:	41 57                	push   %r15
   30482:	41 56                	push   %r14
   30484:	41 55                	push   %r13
   30486:	49 89 cd             	mov    %rcx,%r13
   30489:	41 54                	push   %r12
   3048b:	49 89 d4             	mov    %rdx,%r12
   3048e:	55                   	push   %rbp
   3048f:	48 89 f5             	mov    %rsi,%rbp
   f = fopen(filename, mode);
   30492:	48 8d 35 aa 7a 00 00 	lea    0x7aaa(%rip),%rsi        # 37f43 <_ZSt19piecewise_construct+0x5fc>
{
   30499:	53                   	push   %rbx
   3049a:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   f = fopen(filename, mode);
   304a1:	e8 ca 61 fd ff       	call   6670 <fopen@plt>
    if (!f) return stbi__err("can't fopen", "Unable to open file");
   304a6:	48 85 c0             	test   %rax,%rax
   304a9:	0f 84 f5 00 00 00    	je     305a4 <stbi_info+0x124>
   long pos = ftell(f);
   304af:	48 89 c7             	mov    %rax,%rdi
   304b2:	48 89 c3             	mov    %rax,%rbx
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   304b5:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
   long pos = ftell(f);
   304ba:	e8 71 5b fd ff       	call   6030 <ftell@plt>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   304bf:	ba 80 00 00 00       	mov    $0x80,%edx
   304c4:	4c 89 fe             	mov    %r15,%rsi
   304c7:	48 89 df             	mov    %rbx,%rdi
   long pos = ftell(f);
   304ca:	49 89 c6             	mov    %rax,%r14
   s->io_user_data = user;
   304cd:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
   s->io = *c;
   304d2:	48 8b 05 27 02 01 00 	mov    0x10227(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   304d9:	66 0f 6f 05 0f 02 01 	movdqa 0x1020f(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   304e0:	00 
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   304e1:	4c 89 bc 24 d0 00 00 	mov    %r15,0xd0(%rsp)
   304e8:	00 
   s->io = *c;
   304e9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   304ee:	48 8b 05 f3 85 00 00 	mov    0x85f3(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->callback_already_read = 0;
   304f5:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   304fc:	00 00 00 00 
   s->read_from_callbacks = 1;
   30500:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30505:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   3050c:	00 
   s->io = *c;
   3050d:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30512:	e8 69 14 fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   30517:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   3051e:	00 
   3051f:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   30526:	00 
   30527:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   3052e:	85 c0                	test   %eax,%eax
   30530:	74 5e                	je     30590 <stbi_info+0x110>
      s->img_buffer_end = s->buffer_start + n;
   30532:	48 98                	cltq
   30534:	4c 01 f8             	add    %r15,%rax
   r = stbi__info_main(&s,x,y,comp);
   30537:	48 89 ee             	mov    %rbp,%rsi
   3053a:	48 89 e7             	mov    %rsp,%rdi
   3053d:	4c 89 e9             	mov    %r13,%rcx
   30540:	4c 89 e2             	mov    %r12,%rdx
   30543:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   3054a:	00 
   3054b:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   30552:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   30553:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   3055a:	00 
   r = stbi__info_main(&s,x,y,comp);
   3055b:	e8 60 91 ff ff       	call   296c0 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_>
   fseek(f,pos,SEEK_SET);
   30560:	48 89 df             	mov    %rbx,%rdi
   30563:	31 d2                	xor    %edx,%edx
   30565:	4c 89 f6             	mov    %r14,%rsi
   r = stbi__info_main(&s,x,y,comp);
   30568:	89 c5                	mov    %eax,%ebp
   fseek(f,pos,SEEK_SET);
   3056a:	e8 a1 60 fd ff       	call   6610 <fseek@plt>
    fclose(f);
   3056f:	48 89 df             	mov    %rbx,%rdi
   30572:	e8 b9 5f fd ff       	call   6530 <fclose@plt>
}
   30577:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   3057e:	89 e8                	mov    %ebp,%eax
   30580:	5b                   	pop    %rbx
   30581:	5d                   	pop    %rbp
   30582:	41 5c                	pop    %r12
   30584:	41 5d                	pop    %r13
   30586:	41 5e                	pop    %r14
   30588:	41 5f                	pop    %r15
   3058a:	c3                   	ret
   3058b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      s->read_from_callbacks = 0;
   30590:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   30597:	00 
      s->img_buffer_end = s->buffer_start+1;
   30598:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   3059d:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   305a2:	eb 93                	jmp    30537 <stbi_info+0xb7>
   stbi__g_failure_reason = str;
   305a4:	48 8d 05 9b 79 00 00 	lea    0x799b(%rip),%rax        # 37f46 <_ZSt19piecewise_construct+0x5ff>
    if (!f) return stbi__err("can't fopen", "Unable to open file");
   305ab:	31 ed                	xor    %ebp,%ebp
   stbi__g_failure_reason = str;
   305ad:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   305b4:	ff ff 
    if (!f) return stbi__err("can't fopen", "Unable to open file");
   305b6:	eb bf                	jmp    30577 <stbi_info+0xf7>
   305b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   305bf:	00 

00000000000305c0 <stbi_info_from_file>:
{
   305c0:	41 57                	push   %r15
   305c2:	41 56                	push   %r14
   305c4:	49 89 ce             	mov    %rcx,%r14
   305c7:	41 55                	push   %r13
   305c9:	49 89 d5             	mov    %rdx,%r13
   305cc:	41 54                	push   %r12
   305ce:	49 89 f4             	mov    %rsi,%r12
   305d1:	55                   	push   %rbp
   305d2:	53                   	push   %rbx
   305d3:	48 89 fb             	mov    %rdi,%rbx
   305d6:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   long pos = ftell(f);
   305dd:	e8 4e 5a fd ff       	call   6030 <ftell@plt>
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   305e2:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   305e7:	ba 80 00 00 00       	mov    $0x80,%edx
   305ec:	48 89 df             	mov    %rbx,%rdi
   long pos = ftell(f);
   305ef:	48 89 c5             	mov    %rax,%rbp
   s->io = *c;
   305f2:	48 8b 05 07 01 01 00 	mov    0x10107(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   305f9:	4c 89 fe             	mov    %r15,%rsi
   s->io = *c;
   305fc:	66 0f 6f 05 ec 00 01 	movdqa 0x100ec(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   30603:	00 
   s->io_user_data = user;
   30604:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
   s->io = *c;
   30609:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   3060e:	48 8b 05 d3 84 00 00 	mov    0x84d3(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->callback_already_read = 0;
   30615:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   3061c:	00 00 00 00 
   s->read_from_callbacks = 1;
   30620:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30625:	4c 89 bc 24 d0 00 00 	mov    %r15,0xd0(%rsp)
   3062c:	00 
   3062d:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   30634:	00 
   s->io = *c;
   30635:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   3063a:	e8 41 13 fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   3063f:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   30646:	00 
   30647:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   3064e:	00 
   3064f:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   30656:	85 c0                	test   %eax,%eax
   30658:	75 66                	jne    306c0 <stbi_info_from_file+0x100>
      s->read_from_callbacks = 0;
   3065a:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   30661:	00 
      s->img_buffer_end = s->buffer_start+1;
   30662:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   30667:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   3066c:	48 89 e7             	mov    %rsp,%rdi
   r = stbi__info_main(&s,x,y,comp);
   3066f:	4c 89 f1             	mov    %r14,%rcx
   30672:	4c 89 ea             	mov    %r13,%rdx
   30675:	4c 89 e6             	mov    %r12,%rsi
   30678:	4c 89 bc 24 c0 00 00 	mov    %r15,0xc0(%rsp)
   3067f:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   30680:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   30687:	00 
   30688:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   3068f:	00 
   r = stbi__info_main(&s,x,y,comp);
   30690:	e8 2b 90 ff ff       	call   296c0 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_>
   fseek(f,pos,SEEK_SET);
   30695:	48 89 ee             	mov    %rbp,%rsi
   30698:	48 89 df             	mov    %rbx,%rdi
   3069b:	31 d2                	xor    %edx,%edx
   r = stbi__info_main(&s,x,y,comp);
   3069d:	41 89 c4             	mov    %eax,%r12d
   fseek(f,pos,SEEK_SET);
   306a0:	e8 6b 5f fd ff       	call   6610 <fseek@plt>
}
   306a5:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   306ac:	44 89 e0             	mov    %r12d,%eax
   306af:	5b                   	pop    %rbx
   306b0:	5d                   	pop    %rbp
   306b1:	41 5c                	pop    %r12
   306b3:	41 5d                	pop    %r13
   306b5:	41 5e                	pop    %r14
   306b7:	41 5f                	pop    %r15
   306b9:	c3                   	ret
   306ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start + n;
   306c0:	48 98                	cltq
   306c2:	4c 01 f8             	add    %r15,%rax
   306c5:	eb a5                	jmp    3066c <stbi_info_from_file+0xac>
   306c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   306ce:	00 00 

00000000000306d0 <stbi_is_16_bit>:
{
   306d0:	41 54                	push   %r12
   f = fopen(filename, mode);
   306d2:	48 8d 35 6a 78 00 00 	lea    0x786a(%rip),%rsi        # 37f43 <_ZSt19piecewise_construct+0x5fc>
{
   306d9:	55                   	push   %rbp
   306da:	53                   	push   %rbx
   306db:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   f = fopen(filename, mode);
   306e2:	e8 89 5f fd ff       	call   6670 <fopen@plt>
    if (!f) return stbi__err("can't fopen", "Unable to open file");
   306e7:	48 85 c0             	test   %rax,%rax
   306ea:	0f 84 e4 00 00 00    	je     307d4 <stbi_is_16_bit+0x104>
   long pos = ftell(f);
   306f0:	48 89 c7             	mov    %rax,%rdi
   306f3:	48 89 c3             	mov    %rax,%rbx
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   306f6:	4c 8d 64 24 38       	lea    0x38(%rsp),%r12
   long pos = ftell(f);
   306fb:	e8 30 59 fd ff       	call   6030 <ftell@plt>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30700:	ba 80 00 00 00       	mov    $0x80,%edx
   30705:	4c 89 e6             	mov    %r12,%rsi
   30708:	48 89 df             	mov    %rbx,%rdi
   long pos = ftell(f);
   3070b:	48 89 c5             	mov    %rax,%rbp
   s->io_user_data = user;
   3070e:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
   s->io = *c;
   30713:	48 8b 05 e6 ff 00 00 	mov    0xffe6(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   3071a:	66 0f 6f 05 ce ff 00 	movdqa 0xffce(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   30721:	00 
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30722:	4c 89 a4 24 d0 00 00 	mov    %r12,0xd0(%rsp)
   30729:	00 
   s->io = *c;
   3072a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   3072f:	48 8b 05 b2 83 00 00 	mov    0x83b2(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->callback_already_read = 0;
   30736:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   3073d:	00 00 00 00 
   s->read_from_callbacks = 1;
   30741:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30746:	4c 89 a4 24 c0 00 00 	mov    %r12,0xc0(%rsp)
   3074d:	00 
   s->io = *c;
   3074e:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30753:	e8 28 12 fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   30758:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   3075f:	00 
   30760:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   30767:	00 
   30768:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   3076f:	85 c0                	test   %eax,%eax
   30771:	74 4d                	je     307c0 <stbi_is_16_bit+0xf0>
      s->img_buffer_end = s->buffer_start + n;
   30773:	48 98                	cltq
   30775:	4c 01 e0             	add    %r12,%rax
   30778:	48 89 e7             	mov    %rsp,%rdi
   3077b:	4c 89 a4 24 c0 00 00 	mov    %r12,0xc0(%rsp)
   30782:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   30783:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   3078a:	00 
   3078b:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   30792:	00 
   r = stbi__is_16_main(&s);
   30793:	e8 38 66 ff ff       	call   26dd0 <_ZL16stbi__is_16_mainP13stbi__context>
   fseek(f,pos,SEEK_SET);
   30798:	48 89 df             	mov    %rbx,%rdi
   3079b:	31 d2                	xor    %edx,%edx
   3079d:	48 89 ee             	mov    %rbp,%rsi
   r = stbi__is_16_main(&s);
   307a0:	41 89 c4             	mov    %eax,%r12d
   fseek(f,pos,SEEK_SET);
   307a3:	e8 68 5e fd ff       	call   6610 <fseek@plt>
    fclose(f);
   307a8:	48 89 df             	mov    %rbx,%rdi
   307ab:	e8 80 5d fd ff       	call   6530 <fclose@plt>
}
   307b0:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   307b7:	44 89 e0             	mov    %r12d,%eax
   307ba:	5b                   	pop    %rbx
   307bb:	5d                   	pop    %rbp
   307bc:	41 5c                	pop    %r12
   307be:	c3                   	ret
   307bf:	90                   	nop
      s->read_from_callbacks = 0;
   307c0:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   307c7:	00 
      s->img_buffer_end = s->buffer_start+1;
   307c8:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   307cd:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   307d2:	eb a4                	jmp    30778 <stbi_is_16_bit+0xa8>
   stbi__g_failure_reason = str;
   307d4:	48 8d 05 6b 77 00 00 	lea    0x776b(%rip),%rax        # 37f46 <_ZSt19piecewise_construct+0x5ff>
    if (!f) return stbi__err("can't fopen", "Unable to open file");
   307db:	45 31 e4             	xor    %r12d,%r12d
   stbi__g_failure_reason = str;
   307de:	64 48 89 04 25 f8 ff 	mov    %rax,%fs:0xfffffffffffffff8
   307e5:	ff ff 
    if (!f) return stbi__err("can't fopen", "Unable to open file");
   307e7:	eb c7                	jmp    307b0 <stbi_is_16_bit+0xe0>
   307e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000307f0 <stbi_is_16_bit_from_file>:
{
   307f0:	41 54                	push   %r12
   307f2:	55                   	push   %rbp
   307f3:	53                   	push   %rbx
   307f4:	48 89 fb             	mov    %rdi,%rbx
   307f7:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   long pos = ftell(f);
   307fe:	e8 2d 58 fd ff       	call   6030 <ftell@plt>
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30803:	4c 8d 64 24 38       	lea    0x38(%rsp),%r12
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30808:	ba 80 00 00 00       	mov    $0x80,%edx
   3080d:	48 89 df             	mov    %rbx,%rdi
   long pos = ftell(f);
   30810:	48 89 c5             	mov    %rax,%rbp
   s->io = *c;
   30813:	48 8b 05 e6 fe 00 00 	mov    0xfee6(%rip),%rax        # 40700 <_ZL21stbi__stdio_callbacks+0x10>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   3081a:	4c 89 e6             	mov    %r12,%rsi
   s->io = *c;
   3081d:	66 0f 6f 05 cb fe 00 	movdqa 0xfecb(%rip),%xmm0        # 406f0 <_ZL21stbi__stdio_callbacks>
   30824:	00 
   s->io_user_data = user;
   30825:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
   s->io = *c;
   3082a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   3082f:	48 8b 05 b2 82 00 00 	mov    0x82b2(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->callback_already_read = 0;
   30836:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   3083d:	00 00 00 00 
   s->read_from_callbacks = 1;
   30841:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30846:	4c 89 a4 24 d0 00 00 	mov    %r12,0xd0(%rsp)
   3084d:	00 
   3084e:	4c 89 a4 24 c0 00 00 	mov    %r12,0xc0(%rsp)
   30855:	00 
   s->io = *c;
   30856:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   3085b:	e8 20 11 fe ff       	call   11980 <_ZL16stbi__stdio_readPvPci>
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   30860:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   30867:	00 
   30868:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   3086f:	00 
   30870:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   30877:	85 c0                	test   %eax,%eax
   30879:	75 55                	jne    308d0 <stbi_is_16_bit_from_file+0xe0>
      s->read_from_callbacks = 0;
   3087b:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   30882:	00 
      s->img_buffer_end = s->buffer_start+1;
   30883:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   30888:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   3088d:	48 89 e7             	mov    %rsp,%rdi
   30890:	4c 89 a4 24 c0 00 00 	mov    %r12,0xc0(%rsp)
   30897:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   30898:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   3089f:	00 
   308a0:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   308a7:	00 
   r = stbi__is_16_main(&s);
   308a8:	e8 23 65 ff ff       	call   26dd0 <_ZL16stbi__is_16_mainP13stbi__context>
   fseek(f,pos,SEEK_SET);
   308ad:	48 89 ee             	mov    %rbp,%rsi
   308b0:	48 89 df             	mov    %rbx,%rdi
   308b3:	31 d2                	xor    %edx,%edx
   r = stbi__is_16_main(&s);
   308b5:	41 89 c4             	mov    %eax,%r12d
   fseek(f,pos,SEEK_SET);
   308b8:	e8 53 5d fd ff       	call   6610 <fseek@plt>
}
   308bd:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   308c4:	44 89 e0             	mov    %r12d,%eax
   308c7:	5b                   	pop    %rbx
   308c8:	5d                   	pop    %rbp
   308c9:	41 5c                	pop    %r12
   308cb:	c3                   	ret
   308cc:	0f 1f 40 00          	nopl   0x0(%rax)
      s->img_buffer_end = s->buffer_start + n;
   308d0:	48 98                	cltq
   308d2:	4c 01 e0             	add    %r12,%rax
   308d5:	eb b6                	jmp    3088d <stbi_is_16_bit_from_file+0x9d>
   308d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   308de:	00 00 

00000000000308e0 <stbi_info_from_memory>:
{
   308e0:	48 63 c6             	movslq %esi,%rax
   308e3:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   s->io.read = NULL;
   308ea:	66 48 0f 6e c7       	movq   %rdi,%xmm0
{
   308ef:	48 89 d6             	mov    %rdx,%rsi
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   308f2:	48 01 f8             	add    %rdi,%rax
{
   308f5:	48 89 ca             	mov    %rcx,%rdx
   return stbi__info_main(&s,x,y,comp);
   308f8:	48 89 e7             	mov    %rsp,%rdi
{
   308fb:	4c 89 c1             	mov    %r8,%rcx
   308fe:	66 48 0f 6e c8       	movq   %rax,%xmm1
   s->io.read = NULL;
   30903:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
   3090a:	00 00 
   s->read_from_callbacks = 0;
   3090c:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
   30910:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   30917:	00 
   s->callback_already_read = 0;
   30918:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   3091f:	00 00 00 00 
   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;
   30923:	0f 29 84 24 c0 00 00 	movaps %xmm0,0xc0(%rsp)
   3092a:	00 
   3092b:	0f 29 84 24 d0 00 00 	movaps %xmm0,0xd0(%rsp)
   30932:	00 
   return stbi__info_main(&s,x,y,comp);
   30933:	e8 88 8d ff ff       	call   296c0 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_>
}
   30938:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   3093f:	c3                   	ret

0000000000030940 <stbi_info_from_callbacks>:
{
   30940:	41 55                	push   %r13
   30942:	48 89 f8             	mov    %rdi,%rax
   30945:	48 89 f7             	mov    %rsi,%rdi
   30948:	41 54                	push   %r12
   3094a:	4d 89 c4             	mov    %r8,%r12
   3094d:	55                   	push   %rbp
   3094e:	48 89 cd             	mov    %rcx,%rbp
   30951:	53                   	push   %rbx
   30952:	48 89 d3             	mov    %rdx,%rbx
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30955:	ba 80 00 00 00       	mov    $0x80,%edx
{
   3095a:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
   s->io = *c;
   30961:	f3 0f 6f 00          	movdqu (%rax),%xmm0
   30965:	48 8b 08             	mov    (%rax),%rcx
   30968:	48 8b 40 10          	mov    0x10(%rax),%rax
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   3096c:	4c 8d 6c 24 38       	lea    0x38(%rsp),%r13
   s->io_user_data = user;
   30971:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
   s->callback_already_read = 0;
   30976:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
   3097d:	00 00 00 00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30981:	4c 89 ee             	mov    %r13,%rsi
   s->io = *c;
   30984:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   s->read_from_callbacks = 1;
   30989:	48 8b 05 58 81 00 00 	mov    0x8158(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30990:	4c 89 ac 24 d0 00 00 	mov    %r13,0xd0(%rsp)
   30997:	00 
   s->read_from_callbacks = 1;
   30998:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   3099d:	4c 89 ac 24 c0 00 00 	mov    %r13,0xc0(%rsp)
   309a4:	00 
   s->io = *c;
   309a5:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   309aa:	ff d1                	call   *%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   309ac:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   309b3:	00 
   309b4:	48 2b 94 24 d0 00 00 	sub    0xd0(%rsp),%rdx
   309bb:	00 
   309bc:	01 94 24 b8 00 00 00 	add    %edx,0xb8(%rsp)
   if (n == 0) {
   309c3:	85 c0                	test   %eax,%eax
   309c5:	75 49                	jne    30a10 <stbi_info_from_callbacks+0xd0>
      s->read_from_callbacks = 0;
   309c7:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
   309ce:	00 
      s->img_buffer_end = s->buffer_start+1;
   309cf:	48 8d 44 24 39       	lea    0x39(%rsp),%rax
      *s->img_buffer = 0;
   309d4:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
   309d9:	48 89 e7             	mov    %rsp,%rdi
   return stbi__info_main(&s,x,y,comp);
   309dc:	4c 89 e1             	mov    %r12,%rcx
   309df:	48 89 ea             	mov    %rbp,%rdx
   309e2:	48 89 de             	mov    %rbx,%rsi
   309e5:	4c 89 ac 24 c0 00 00 	mov    %r13,0xc0(%rsp)
   309ec:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   309ed:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
   309f4:	00 
   309f5:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   309fc:	00 
   return stbi__info_main(&s,x,y,comp);
   309fd:	e8 be 8c ff ff       	call   296c0 <_ZL15stbi__info_mainP13stbi__contextPiS1_S1_>
}
   30a02:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
   30a09:	5b                   	pop    %rbx
   30a0a:	5d                   	pop    %rbp
   30a0b:	41 5c                	pop    %r12
   30a0d:	41 5d                	pop    %r13
   30a0f:	c3                   	ret
      s->img_buffer_end = s->buffer_start + n;
   30a10:	48 98                	cltq
   30a12:	4c 01 e8             	add    %r13,%rax
   30a15:	eb c2                	jmp    309d9 <stbi_info_from_callbacks+0x99>
   30a17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   30a1e:	00 00 

0000000000030a20 <stbi_is_16_bit_from_memory>:
{
   30a20:	41 55                	push   %r13
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   30a22:	48 63 f6             	movslq %esi,%rsi
   30a25:	66 48 0f 6e c7       	movq   %rdi,%xmm0
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   30a2a:	31 d2                	xor    %edx,%edx
{
   30a2c:	41 54                	push   %r12
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
   30a2e:	48 8d 04 37          	lea    (%rdi,%rsi,1),%rax
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   30a32:	be 02 00 00 00       	mov    $0x2,%esi
{
   30a37:	55                   	push   %rbp
   30a38:	66 48 0f 6e c8       	movq   %rax,%xmm1
   30a3d:	53                   	push   %rbx
   30a3e:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
   30a42:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
   p.s = s;
   30a49:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   30a4e:	48 89 e7             	mov    %rsp,%rdi
   s->io.read = NULL;
   30a51:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
   30a58:	00 00 
   s->read_from_callbacks = 0;
   30a5a:	c7 44 24 60 00 00 00 	movl   $0x0,0x60(%rsp)
   30a61:	00 
   s->callback_already_read = 0;
   30a62:	c7 84 24 e8 00 00 00 	movl   $0x0,0xe8(%rsp)
   30a69:	00 00 00 00 
   p.s = s;
   30a6d:	48 89 2c 24          	mov    %rbp,(%rsp)
   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;
   30a71:	0f 29 84 24 f0 00 00 	movaps %xmm0,0xf0(%rsp)
   30a78:	00 
   30a79:	0f 29 84 24 00 01 00 	movaps %xmm0,0x100(%rsp)
   30a80:	00 
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   30a81:	e8 ea 40 ff ff       	call   24b70 <_ZL20stbi__parse_png_fileP9stbi__pngii>
   30a86:	85 c0                	test   %eax,%eax
   30a88:	0f 84 ca 00 00 00    	je     30b58 <stbi_is_16_bit_from_memory+0x138>
   if (p.depth != 16) {
   30a8e:	83 7c 24 20 10       	cmpl   $0x10,0x20(%rsp)
   30a93:	0f 84 b7 01 00 00    	je     30c50 <stbi_is_16_bit_from_memory+0x230>
      stbi__rewind(p.s);
   30a99:	48 8b 04 24          	mov    (%rsp),%rax
   s->img_buffer = s->img_buffer_original;
   30a9d:	f3 0f 6f 90 d0 00 00 	movdqu 0xd0(%rax),%xmm2
   30aa4:	00 
   30aa5:	0f 11 90 c0 00 00 00 	movups %xmm2,0xc0(%rax)
   stbi__uint32 z = stbi__get16be(s);
   30aac:	48 89 ef             	mov    %rbp,%rdi
   30aaf:	e8 fc d7 fe ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   if (s->img_buffer < s->img_buffer_end)
   30ab4:	48 8b 8c 24 f0 00 00 	mov    0xf0(%rsp),%rcx
   30abb:	00 
   30abc:	48 8b 94 24 f8 00 00 	mov    0xf8(%rsp),%rdx
   30ac3:	00 
   stbi__uint32 z = stbi__get16be(s);
   30ac4:	41 89 c5             	mov    %eax,%r13d
   if (s->img_buffer < s->img_buffer_end)
   30ac7:	48 39 d1             	cmp    %rdx,%rcx
   30aca:	0f 83 a0 00 00 00    	jae    30b70 <stbi_is_16_bit_from_memory+0x150>
      return *s->img_buffer++;
   30ad0:	48 8d 71 01          	lea    0x1(%rcx),%rsi
   30ad4:	48 89 b4 24 f0 00 00 	mov    %rsi,0xf0(%rsp)
   30adb:	00 
   int z = stbi__get8(s);
   30adc:	0f b6 19             	movzbl (%rcx),%ebx
   return (z << 8) + stbi__get8(s);
   30adf:	c1 e3 08             	shl    $0x8,%ebx
   if (s->img_buffer < s->img_buffer_end)
   30ae2:	48 39 d6             	cmp    %rdx,%rsi
   30ae5:	0f 83 75 01 00 00    	jae    30c60 <stbi_is_16_bit_from_memory+0x240>
      return *s->img_buffer++;
   30aeb:	48 8d 46 01          	lea    0x1(%rsi),%rax
   30aef:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
   30af6:	00 
   return (z << 8) + stbi__get8(s);
   30af7:	0f b6 06             	movzbl (%rsi),%eax
   30afa:	01 c3                	add    %eax,%ebx
   return (z << 16) + stbi__get16be(s);
   30afc:	44 89 e8             	mov    %r13d,%eax
   30aff:	c1 e0 10             	shl    $0x10,%eax
   30b02:	01 d8                	add    %ebx,%eax
   if (stbi__get32be(s) != 0x38425053) {
   30b04:	3d 53 50 42 38       	cmp    $0x38425053,%eax
   30b09:	0f 84 d1 00 00 00    	je     30be0 <stbi_is_16_bit_from_memory+0x1c0>
   s->img_buffer = s->img_buffer_original;
   30b0f:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
   30b16:	00 
   if (stbi__pnm_info(s, NULL, NULL, NULL) == 16)
   30b17:	31 c9                	xor    %ecx,%ecx
   30b19:	31 d2                	xor    %edx,%edx
   30b1b:	31 f6                	xor    %esi,%esi
   30b1d:	48 89 ef             	mov    %rbp,%rdi
   s->img_buffer = s->img_buffer_original;
   30b20:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
   30b27:	00 
   s->img_buffer_end = s->img_buffer_original_end;
   30b28:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
   30b2f:	00 
   30b30:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
   30b37:	00 
   if (stbi__pnm_info(s, NULL, NULL, NULL) == 16)
   30b38:	e8 43 3d ff ff       	call   24880 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_>
   30b3d:	83 f8 10             	cmp    $0x10,%eax
   30b40:	0f 94 c0             	sete   %al
   30b43:	0f b6 c0             	movzbl %al,%eax
}
   30b46:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
   30b4d:	5b                   	pop    %rbx
   30b4e:	5d                   	pop    %rbp
   30b4f:	41 5c                	pop    %r12
   30b51:	41 5d                	pop    %r13
   30b53:	c3                   	ret
   30b54:	0f 1f 40 00          	nopl   0x0(%rax)
   30b58:	48 8b 04 24          	mov    (%rsp),%rax
   s->img_buffer = s->img_buffer_original;
   30b5c:	f3 0f 6f 98 d0 00 00 	movdqu 0xd0(%rax),%xmm3
   30b63:	00 
   30b64:	0f 11 98 c0 00 00 00 	movups %xmm3,0xc0(%rax)
      return 0;
   30b6b:	e9 3c ff ff ff       	jmp    30aac <stbi_is_16_bit_from_memory+0x8c>
   if (s->read_from_callbacks) {
   30b70:	8b 54 24 60          	mov    0x60(%rsp),%edx
   30b74:	85 d2                	test   %edx,%edx
   30b76:	74 97                	je     30b0f <stbi_is_16_bit_from_memory+0xef>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30b78:	4c 8d 64 24 68       	lea    0x68(%rsp),%r12
   30b7d:	8b 54 24 64          	mov    0x64(%rsp),%edx
   30b81:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   30b86:	4c 89 e6             	mov    %r12,%rsi
   30b89:	ff 54 24 40          	call   *0x40(%rsp)
   30b8d:	48 63 d8             	movslq %eax,%rbx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   30b90:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
   30b97:	00 
   30b98:	48 2b 84 24 00 01 00 	sub    0x100(%rsp),%rax
   30b9f:	00 
   30ba0:	01 84 24 e8 00 00 00 	add    %eax,0xe8(%rsp)
   if (n == 0) {
   30ba7:	85 db                	test   %ebx,%ebx
   30ba9:	0f 84 31 01 00 00    	je     30ce0 <stbi_is_16_bit_from_memory+0x2c0>
      s->img_buffer_end = s->buffer_start + n;
   30baf:	49 8d 14 1c          	lea    (%r12,%rbx,1),%rdx
   int z = stbi__get8(s);
   30bb3:	0f b6 5c 24 68       	movzbl 0x68(%rsp),%ebx
   30bb8:	48 8d 44 24 69       	lea    0x69(%rsp),%rax
   return (z << 8) + stbi__get8(s);
   30bbd:	c1 e3 08             	shl    $0x8,%ebx
   30bc0:	48 89 94 24 f8 00 00 	mov    %rdx,0xf8(%rsp)
   30bc7:	00 
      return *s->img_buffer++;
   30bc8:	48 8d 74 24 69       	lea    0x69(%rsp),%rsi
   30bcd:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
   30bd4:	00 
   30bd5:	e9 08 ff ff ff       	jmp    30ae2 <stbi_is_16_bit_from_memory+0xc2>
   30bda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (stbi__get16be(s) != 1) {
   30be0:	48 89 ef             	mov    %rbp,%rdi
   30be3:	e8 c8 d6 fe ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   30be8:	83 f8 01             	cmp    $0x1,%eax
   30beb:	0f 85 1e ff ff ff    	jne    30b0f <stbi_is_16_bit_from_memory+0xef>
   if (s->io.read) {
   30bf1:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   30bf7:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
   30bfe:	00 
   if (s->io.read) {
   30bff:	74 17                	je     30c18 <stbi_is_16_bit_from_memory+0x1f8>
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   30c01:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
   30c08:	00 
   30c09:	48 89 ca             	mov    %rcx,%rdx
   30c0c:	48 29 c2             	sub    %rax,%rdx
      if (blen < n) {
   30c0f:	83 fa 05             	cmp    $0x5,%edx
   30c12:	0f 8e e8 00 00 00    	jle    30d00 <stbi_is_16_bit_from_memory+0x2e0>
   s->img_buffer += n;
   30c18:	48 83 c0 06          	add    $0x6,%rax
   30c1c:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
   30c23:	00 
   channelCount = stbi__get16be(s);
   30c24:	48 89 ef             	mov    %rbp,%rdi
   30c27:	e8 84 d6 fe ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   if (channelCount < 0 || channelCount > 16) {
   30c2c:	83 f8 10             	cmp    $0x10,%eax
   30c2f:	0f 87 da fe ff ff    	ja     30b0f <stbi_is_16_bit_from_memory+0xef>
   depth = stbi__get16be(s);
   30c35:	48 89 ef             	mov    %rbp,%rdi
   30c38:	e8 73 d6 fe ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   if (depth != 16) {
   30c3d:	83 f8 10             	cmp    $0x10,%eax
   30c40:	0f 85 c9 fe ff ff    	jne    30b0f <stbi_is_16_bit_from_memory+0xef>
   30c46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   30c4d:	00 00 00 
   if (stbi__png_is16(s))  return 1;
   30c50:	b8 01 00 00 00       	mov    $0x1,%eax
   30c55:	e9 ec fe ff ff       	jmp    30b46 <stbi_is_16_bit_from_memory+0x126>
   30c5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (s->read_from_callbacks) {
   30c60:	8b 44 24 60          	mov    0x60(%rsp),%eax
   30c64:	85 c0                	test   %eax,%eax
   30c66:	0f 84 90 fe ff ff    	je     30afc <stbi_is_16_bit_from_memory+0xdc>
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30c6c:	4c 8d 64 24 68       	lea    0x68(%rsp),%r12
   30c71:	8b 54 24 64          	mov    0x64(%rsp),%edx
   30c75:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   30c7a:	4c 89 e6             	mov    %r12,%rsi
   30c7d:	ff 54 24 40          	call   *0x40(%rsp)
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   30c81:	48 8b 94 24 f0 00 00 	mov    0xf0(%rsp),%rdx
   30c88:	00 
   30c89:	48 2b 94 24 00 01 00 	sub    0x100(%rsp),%rdx
   30c90:	00 
   30c91:	01 94 24 e8 00 00 00 	add    %edx,0xe8(%rsp)
   if (n == 0) {
   30c98:	85 c0                	test   %eax,%eax
   30c9a:	74 2c                	je     30cc8 <stbi_is_16_bit_from_memory+0x2a8>
      s->img_buffer_end = s->buffer_start + n;
   30c9c:	48 98                	cltq
   30c9e:	49 01 c4             	add    %rax,%r12
   return (z << 8) + stbi__get8(s);
   30ca1:	0f b6 44 24 68       	movzbl 0x68(%rsp),%eax
   30ca6:	01 c3                	add    %eax,%ebx
   30ca8:	48 8d 44 24 69       	lea    0x69(%rsp),%rax
   30cad:	4c 89 a4 24 f8 00 00 	mov    %r12,0xf8(%rsp)
   30cb4:	00 
      return *s->img_buffer++;
   30cb5:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
   30cbc:	00 
   30cbd:	e9 3a fe ff ff       	jmp    30afc <stbi_is_16_bit_from_memory+0xdc>
   30cc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      s->img_buffer_end = s->buffer_start+1;
   30cc8:	48 8d 44 24 69       	lea    0x69(%rsp),%rax
      s->read_from_callbacks = 0;
   30ccd:	c7 44 24 60 00 00 00 	movl   $0x0,0x60(%rsp)
   30cd4:	00 
      *s->img_buffer = 0;
   30cd5:	c6 44 24 68 00       	movb   $0x0,0x68(%rsp)
      s->img_buffer_end = s->buffer_start+1;
   30cda:	49 89 c4             	mov    %rax,%r12
   30cdd:	eb ce                	jmp    30cad <stbi_is_16_bit_from_memory+0x28d>
   30cdf:	90                   	nop
   30ce0:	48 8d 44 24 69       	lea    0x69(%rsp),%rax
      s->read_from_callbacks = 0;
   30ce5:	c7 44 24 60 00 00 00 	movl   $0x0,0x60(%rsp)
   30cec:	00 
      *s->img_buffer = 0;
   30ced:	c6 44 24 68 00       	movb   $0x0,0x68(%rsp)
      s->img_buffer_end = s->buffer_start+1;
   30cf2:	48 89 c2             	mov    %rax,%rdx
   30cf5:	e9 c6 fe ff ff       	jmp    30bc0 <stbi_is_16_bit_from_memory+0x1a0>
   30cfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         (s->io.skip)(s->io_user_data, n - blen);
   30d00:	be 06 00 00 00       	mov    $0x6,%esi
         s->img_buffer = s->img_buffer_end;
   30d05:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
   30d0c:	00 
         (s->io.skip)(s->io_user_data, n - blen);
   30d0d:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   30d12:	29 d6                	sub    %edx,%esi
   30d14:	ff 54 24 48          	call   *0x48(%rsp)
         return;
   30d18:	e9 07 ff ff ff       	jmp    30c24 <stbi_is_16_bit_from_memory+0x204>
   30d1d:	0f 1f 00             	nopl   (%rax)

0000000000030d20 <stbi_is_16_bit_from_callbacks>:
{
   30d20:	55                   	push   %rbp
   30d21:	48 89 f8             	mov    %rdi,%rax
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30d24:	ba 80 00 00 00       	mov    $0x80,%edx
{
   30d29:	48 89 f7             	mov    %rsi,%rdi
   30d2c:	53                   	push   %rbx
   30d2d:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
   s->io = *c;
   30d34:	f3 0f 6f 00          	movdqu (%rax),%xmm0
   30d38:	48 8b 08             	mov    (%rax),%rcx
   30d3b:	48 8b 40 10          	mov    0x10(%rax),%rax
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30d3f:	48 8d 5c 24 68       	lea    0x68(%rsp),%rbx
   s->io_user_data = user;
   30d44:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
   s->callback_already_read = 0;
   30d49:	c7 84 24 e8 00 00 00 	movl   $0x0,0xe8(%rsp)
   30d50:	00 00 00 00 
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30d54:	48 89 de             	mov    %rbx,%rsi
   s->io = *c;
   30d57:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
   s->read_from_callbacks = 1;
   30d5c:	48 8b 05 85 7d 00 00 	mov    0x7d85(%rip),%rax        # 38ae8 <_ZL11stbi__bmask+0x368>
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30d63:	48 89 9c 24 00 01 00 	mov    %rbx,0x100(%rsp)
   30d6a:	00 
   s->read_from_callbacks = 1;
   30d6b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
   s->img_buffer = s->img_buffer_original = s->buffer_start;
   30d70:	48 89 9c 24 f0 00 00 	mov    %rbx,0xf0(%rsp)
   30d77:	00 
   s->io = *c;
   30d78:	0f 29 44 24 40       	movaps %xmm0,0x40(%rsp)
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   30d7d:	ff d1                	call   *%rcx
   s->callback_already_read += (int) (s->img_buffer - s->img_buffer_original);
   30d7f:	48 8b 94 24 f0 00 00 	mov    0xf0(%rsp),%rdx
   30d86:	00 
   30d87:	48 2b 94 24 00 01 00 	sub    0x100(%rsp),%rdx
   30d8e:	00 
   30d8f:	01 94 24 e8 00 00 00 	add    %edx,0xe8(%rsp)
   if (n == 0) {
   30d96:	85 c0                	test   %eax,%eax
   30d98:	0f 85 d2 00 00 00    	jne    30e70 <stbi_is_16_bit_from_callbacks+0x150>
      s->read_from_callbacks = 0;
   30d9e:	c7 44 24 60 00 00 00 	movl   $0x0,0x60(%rsp)
   30da5:	00 
      s->img_buffer_end = s->buffer_start+1;
   30da6:	48 8d 44 24 69       	lea    0x69(%rsp),%rax
      *s->img_buffer = 0;
   30dab:	c6 44 24 68 00       	movb   $0x0,0x68(%rsp)
   30db0:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   30db5:	31 d2                	xor    %edx,%edx
   30db7:	48 89 e7             	mov    %rsp,%rdi
   30dba:	be 02 00 00 00       	mov    $0x2,%esi
   30dbf:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
   30dc6:	00 
   30dc7:	48 89 9c 24 f0 00 00 	mov    %rbx,0xf0(%rsp)
   30dce:	00 
   s->img_buffer_original_end = s->img_buffer_end;
   30dcf:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
   30dd6:	00 
   p.s = s;
   30dd7:	48 89 2c 24          	mov    %rbp,(%rsp)
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
   30ddb:	e8 90 3d ff ff       	call   24b70 <_ZL20stbi__parse_png_fileP9stbi__pngii>
   30de0:	85 c0                	test   %eax,%eax
   30de2:	0f 84 98 00 00 00    	je     30e80 <stbi_is_16_bit_from_callbacks+0x160>
   if (p.depth != 16) {
   30de8:	83 7c 24 20 10       	cmpl   $0x10,0x20(%rsp)
   30ded:	0f 84 15 01 00 00    	je     30f08 <stbi_is_16_bit_from_callbacks+0x1e8>
      stbi__rewind(p.s);
   30df3:	48 8b 04 24          	mov    (%rsp),%rax
   s->img_buffer = s->img_buffer_original;
   30df7:	f3 0f 6f 88 d0 00 00 	movdqu 0xd0(%rax),%xmm1
   30dfe:	00 
   30dff:	0f 11 88 c0 00 00 00 	movups %xmm1,0xc0(%rax)
   stbi__uint32 z = stbi__get16be(s);
   30e06:	48 89 ef             	mov    %rbp,%rdi
   30e09:	e8 a2 d4 fe ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   return (z << 16) + stbi__get16be(s);
   30e0e:	48 89 ef             	mov    %rbp,%rdi
   stbi__uint32 z = stbi__get16be(s);
   30e11:	89 c3                	mov    %eax,%ebx
   return (z << 16) + stbi__get16be(s);
   30e13:	e8 98 d4 fe ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   30e18:	c1 e3 10             	shl    $0x10,%ebx
   30e1b:	01 c3                	add    %eax,%ebx
   if (stbi__get32be(s) != 0x38425053) {
   30e1d:	81 fb 53 50 42 38    	cmp    $0x38425053,%ebx
   30e23:	74 7b                	je     30ea0 <stbi_is_16_bit_from_callbacks+0x180>
   s->img_buffer = s->img_buffer_original;
   30e25:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
   30e2c:	00 
   if (stbi__pnm_info(s, NULL, NULL, NULL) == 16)
   30e2d:	31 c9                	xor    %ecx,%ecx
   30e2f:	31 d2                	xor    %edx,%edx
   30e31:	31 f6                	xor    %esi,%esi
   30e33:	48 89 ef             	mov    %rbp,%rdi
   s->img_buffer = s->img_buffer_original;
   30e36:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
   30e3d:	00 
   s->img_buffer_end = s->img_buffer_original_end;
   30e3e:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
   30e45:	00 
   30e46:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
   30e4d:	00 
   if (stbi__pnm_info(s, NULL, NULL, NULL) == 16)
   30e4e:	e8 2d 3a ff ff       	call   24880 <_ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_>
   30e53:	83 f8 10             	cmp    $0x10,%eax
   30e56:	0f 94 c0             	sete   %al
   30e59:	0f b6 c0             	movzbl %al,%eax
}
   30e5c:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
   30e63:	5b                   	pop    %rbx
   30e64:	5d                   	pop    %rbp
   30e65:	c3                   	ret
   30e66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   30e6d:	00 00 00 
      s->img_buffer_end = s->buffer_start + n;
   30e70:	48 98                	cltq
   30e72:	48 01 d8             	add    %rbx,%rax
   30e75:	e9 36 ff ff ff       	jmp    30db0 <stbi_is_16_bit_from_callbacks+0x90>
   30e7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   30e80:	48 8b 04 24          	mov    (%rsp),%rax
   s->img_buffer = s->img_buffer_original;
   30e84:	f3 0f 6f 90 d0 00 00 	movdqu 0xd0(%rax),%xmm2
   30e8b:	00 
   30e8c:	0f 11 90 c0 00 00 00 	movups %xmm2,0xc0(%rax)
      return 0;
   30e93:	e9 6e ff ff ff       	jmp    30e06 <stbi_is_16_bit_from_callbacks+0xe6>
   30e98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   30e9f:	00 
   if (stbi__get16be(s) != 1) {
   30ea0:	48 89 ef             	mov    %rbp,%rdi
   30ea3:	e8 08 d4 fe ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   30ea8:	83 f8 01             	cmp    $0x1,%eax
   30eab:	0f 85 74 ff ff ff    	jne    30e25 <stbi_is_16_bit_from_callbacks+0x105>
   if (s->io.read) {
   30eb1:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   30eb7:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
   30ebe:	00 
   if (s->io.read) {
   30ebf:	74 13                	je     30ed4 <stbi_is_16_bit_from_callbacks+0x1b4>
      int blen = (int) (s->img_buffer_end - s->img_buffer);
   30ec1:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
   30ec8:	00 
   30ec9:	48 89 ca             	mov    %rcx,%rdx
   30ecc:	48 29 c2             	sub    %rax,%rdx
      if (blen < n) {
   30ecf:	83 fa 05             	cmp    $0x5,%edx
   30ed2:	7e 44                	jle    30f18 <stbi_is_16_bit_from_callbacks+0x1f8>
   s->img_buffer += n;
   30ed4:	48 83 c0 06          	add    $0x6,%rax
   30ed8:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
   30edf:	00 
   channelCount = stbi__get16be(s);
   30ee0:	48 89 ef             	mov    %rbp,%rdi
   30ee3:	e8 c8 d3 fe ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   if (channelCount < 0 || channelCount > 16) {
   30ee8:	83 f8 10             	cmp    $0x10,%eax
   30eeb:	0f 87 34 ff ff ff    	ja     30e25 <stbi_is_16_bit_from_callbacks+0x105>
   depth = stbi__get16be(s);
   30ef1:	48 89 ef             	mov    %rbp,%rdi
   30ef4:	e8 b7 d3 fe ff       	call   1e2b0 <_ZL13stbi__get16beP13stbi__context>
   if (depth != 16) {
   30ef9:	83 f8 10             	cmp    $0x10,%eax
   30efc:	0f 85 23 ff ff ff    	jne    30e25 <stbi_is_16_bit_from_callbacks+0x105>
   30f02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   if (stbi__png_is16(s))  return 1;
   30f08:	b8 01 00 00 00       	mov    $0x1,%eax
   30f0d:	e9 4a ff ff ff       	jmp    30e5c <stbi_is_16_bit_from_callbacks+0x13c>
   30f12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
         (s->io.skip)(s->io_user_data, n - blen);
   30f18:	be 06 00 00 00       	mov    $0x6,%esi
         s->img_buffer = s->img_buffer_end;
   30f1d:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
   30f24:	00 
         (s->io.skip)(s->io_user_data, n - blen);
   30f25:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   30f2a:	29 d6                	sub    %edx,%esi
   30f2c:	ff 54 24 48          	call   *0x48(%rsp)
         return;
   30f30:	eb ae                	jmp    30ee0 <stbi_is_16_bit_from_callbacks+0x1c0>
   30f32:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   30f39:	00 00 00 
   30f3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000030f40 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR>:
                            VkPresentModeKHR preferredPresentMode) {
   30f40:	41 57                	push   %r15
   30f42:	41 56                	push   %r14
   30f44:	41 55                	push   %r13
   30f46:	49 89 cd             	mov    %rcx,%r13
   30f49:	41 54                	push   %r12
   30f4b:	49 89 f4             	mov    %rsi,%r12
   30f4e:	55                   	push   %rbp
   30f4f:	48 89 fd             	mov    %rdi,%rbp
   30f52:	53                   	push   %rbx
   30f53:	44 89 c3             	mov    %r8d,%ebx
   30f56:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
   30f5d:	48 89 14 24          	mov    %rdx,(%rsp)
      vkh::getPhysicalDeviceSurfaceCapabilities(physicalDevice, surface);
   30f61:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
   30f66:	48 89 f2             	mov    %rsi,%rdx
   30f69:	48 89 ce             	mov    %rcx,%rsi
   30f6c:	e8 0f c4 fd ff       	call   d380 <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>
   30f71:	8b 44 24 6c          	mov    0x6c(%rsp),%eax
      vkh::getPhysicalDeviceSurfaceFormatList(physicalDevice, surface);
   30f75:	4c 89 e2             	mov    %r12,%rdx
   30f78:	4c 89 ee             	mov    %r13,%rsi
   30f7b:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
      vkh::getPhysicalDeviceSurfaceCapabilities(physicalDevice, surface);
   30f80:	44 8b 74 24 54       	mov    0x54(%rsp),%r14d
   30f85:	44 8b 7c 24 68       	mov    0x68(%rsp),%r15d
   30f8a:	89 44 24 0c          	mov    %eax,0xc(%rsp)
      vkh::getPhysicalDeviceSurfaceFormatList(physicalDevice, surface);
   30f8e:	e8 2d c4 fd ff       	call   d3c0 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>
      vkh::getPhysicalDeviceSurfacePresentModeList(physicalDevice, surface);
   30f93:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
   30f98:	4c 89 e2             	mov    %r12,%rdx
   30f9b:	4c 89 ee             	mov    %r13,%rsi
   30f9e:	e8 0d c5 fd ff       	call   d4b0 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>
  VkSwapchainCreateInfoKHR swapchainInfo{};
   30fa3:	31 c0                	xor    %eax,%eax
   30fa5:	44 89 f2             	mov    %r14d,%edx
   30fa8:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
   30faf:	00 
   30fb0:	b9 0c 00 00 00       	mov    $0xc,%ecx
   30fb5:	48 c7 84 24 94 00 00 	movq   $0x0,0x94(%rsp)
   30fbc:	00 00 00 00 00 
   30fc1:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
   30fc8:	00 00 00 00 00 
   30fcd:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  swapchainInfo.surface = surface;
   30fd0:	4c 89 a4 24 a8 00 00 	mov    %r12,0xa8(%rsp)
   30fd7:	00 
  swapchainInfo.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
   30fd8:	c7 84 24 90 00 00 00 	movl   $0x3b9acde8,0x90(%rsp)
   30fdf:	e8 cd 9a 3b 
  uint32_t minImageCount = surfaceCapabilities.minImageCount + 1;
   30fe3:	8b 44 24 50          	mov    0x50(%rsp),%eax
   30fe7:	83 c0 01             	add    $0x1,%eax
  if (surfaceCapabilities.maxImageCount > 0 &&
   30fea:	44 39 f0             	cmp    %r14d,%eax
   30fed:	0f 46 d0             	cmovbe %eax,%edx
   30ff0:	45 85 f6             	test   %r14d,%r14d
   30ff3:	0f 45 c2             	cmovne %edx,%eax
   30ff6:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  swapchainInfo.minImageCount = minImageCount;
   30ffb:	89 84 24 b0 00 00 00 	mov    %eax,0xb0(%rsp)
   31002:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  if (surfaceFormats.empty()) {
   31007:	48 39 c2             	cmp    %rax,%rdx
   3100a:	0f 84 d4 6f fd ff    	je     7fe4 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold>
  swapchainInfo.imageFormat = surfaceFormats[0].format;
   31010:	48 8b 08             	mov    (%rax),%rcx
   31013:	48 89 8c 24 b4 00 00 	mov    %rcx,0xb4(%rsp)
   3101a:	00 
  for (const auto &format : surfaceFormats) {
   3101b:	eb 0c                	jmp    31029 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0xe9>
   3101d:	0f 1f 00             	nopl   (%rax)
   31020:	48 83 c0 08          	add    $0x8,%rax
   31024:	48 39 c2             	cmp    %rax,%rdx
   31027:	74 1b                	je     31044 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x104>
    if (format.format == VK_FORMAT_R8G8B8A8_SRGB &&
   31029:	83 38 2b             	cmpl   $0x2b,(%rax)
   3102c:	75 f2                	jne    31020 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0xe0>
   3102e:	8b 48 04             	mov    0x4(%rax),%ecx
   31031:	85 c9                	test   %ecx,%ecx
   31033:	75 eb                	jne    31020 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0xe0>
      swapchainInfo.imageFormat = format.format;
   31035:	48 8b 05 3c 7b 00 00 	mov    0x7b3c(%rip),%rax        # 38b78 <_ZL11stbi__bmask+0x3f8>
   3103c:	48 89 84 24 b4 00 00 	mov    %rax,0xb4(%rsp)
   31043:	00 
  if (imageExtentHeight > surfaceCapabilities.maxImageExtent.height) {
   31044:	8b 44 24 5c          	mov    0x5c(%rsp),%eax
   31048:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  swapchainInfo.imageArrayLayers = 1;
   3104c:	c7 84 24 c4 00 00 00 	movl   $0x1,0xc4(%rsp)
   31053:	01 00 00 00 
  swapchainInfo.presentMode = VK_PRESENT_MODE_FIFO_KHR;
   31057:	c7 84 24 e8 00 00 00 	movl   $0x2,0xe8(%rsp)
   3105e:	02 00 00 00 
  swapchainInfo.imageExtent = {imageExtentWidth, imageExtentHeight};
   31062:	8b 54 24 58          	mov    0x58(%rsp),%edx
   31066:	39 c1                	cmp    %eax,%ecx
   31068:	0f 46 c1             	cmovbe %ecx,%eax
   3106b:	44 39 fa             	cmp    %r15d,%edx
   3106e:	41 0f 47 d7          	cmova  %r15d,%edx
   31072:	89 84 24 c0 00 00 00 	mov    %eax,0xc0(%rsp)
   31079:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
   3107e:	89 94 24 bc 00 00 00 	mov    %edx,0xbc(%rsp)
   31085:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  for (const auto &presentMode : surfacePresentModes) {
   3108a:	48 39 c2             	cmp    %rax,%rdx
   3108d:	75 12                	jne    310a1 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x161>
   3108f:	eb 1b                	jmp    310ac <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x16c>
   31091:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   31098:	48 83 c0 04          	add    $0x4,%rax
   3109c:	48 39 c2             	cmp    %rax,%rdx
   3109f:	74 0b                	je     310ac <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x16c>
    if (presentMode == preferredPresentMode) {
   310a1:	39 18                	cmp    %ebx,(%rax)
   310a3:	75 f3                	jne    31098 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x158>
      swapchainInfo.presentMode = preferredPresentMode;
   310a5:	89 9c 24 e8 00 00 00 	mov    %ebx,0xe8(%rsp)
  swapchainInfo.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
   310ac:	c7 84 24 c8 00 00 00 	movl   $0x10,0xc8(%rsp)
   310b3:	10 00 00 00 
  if (surfaceCapabilities.supportedTransforms &
   310b7:	f6 44 24 74 01       	testb  $0x1,0x74(%rsp)
   310bc:	0f 84 8d 6f fd ff    	je     804f <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold+0x6b>
    swapchainInfo.preTransform = VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;
   310c2:	c7 84 24 e0 00 00 00 	movl   $0x1,0xe0(%rsp)
   310c9:	01 00 00 00 
  if (surfaceCapabilities.supportedCompositeAlpha &
   310cd:	f6 44 24 7c 01       	testb  $0x1,0x7c(%rsp)
   310d2:	0f 84 9c 00 00 00    	je     31174 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x234>
  vkCreateSwapchainKHR(device, &swapchainInfo, nullptr, &_swapchain);
   310d8:	48 8b 3c 24          	mov    (%rsp),%rdi
   310dc:	48 8d 4d 08          	lea    0x8(%rbp),%rcx
   310e0:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
   310e7:	00 
   310e8:	31 d2                	xor    %edx,%edx
    swapchainInfo.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
   310ea:	c7 84 24 e4 00 00 00 	movl   $0x1,0xe4(%rsp)
   310f1:	01 00 00 00 
  swapchainInfo.clipped = VK_TRUE;
   310f5:	c7 84 24 ec 00 00 00 	movl   $0x1,0xec(%rsp)
   310fc:	01 00 00 00 
  vkCreateSwapchainKHR(device, &swapchainInfo, nullptr, &_swapchain);
   31100:	e8 7b 55 fd ff       	call   6680 <vkCreateSwapchainKHR@plt>
  _device = device;
   31105:	48 8b 04 24          	mov    (%rsp),%rax
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   31109:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  _isOwner = true;
   3110e:	c6 45 30 01          	movb   $0x1,0x30(%rbp)
  _device = device;
   31112:	48 89 45 20          	mov    %rax,0x20(%rbp)
  _format = swapchainInfo.imageFormat;
   31116:	8b 84 24 b4 00 00 00 	mov    0xb4(%rsp),%eax
   3111d:	89 45 10             	mov    %eax,0x10(%rbp)
  _extent = swapchainInfo.imageExtent;
   31120:	48 8b 84 24 bc 00 00 	mov    0xbc(%rsp),%rax
   31127:	00 
   31128:	48 89 45 14          	mov    %rax,0x14(%rbp)
	if (__p)
   3112c:	48 85 ff             	test   %rdi,%rdi
   3112f:	74 0d                	je     3113e <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x1fe>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   31131:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
   31136:	48 29 fe             	sub    %rdi,%rsi
   31139:	e8 22 54 fd ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   3113e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	if (__p)
   31143:	48 85 ff             	test   %rdi,%rdi
   31146:	74 0d                	je     31155 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR+0x215>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   31148:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
   3114d:	48 29 fe             	sub    %rdi,%rsi
   31150:	e8 0b 54 fd ff       	call   6560 <_ZdlPvm@plt>
}
   31155:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
   3115c:	5b                   	pop    %rbx
   3115d:	5d                   	pop    %rbp
   3115e:	41 5c                	pop    %r12
   31160:	41 5d                	pop    %r13
   31162:	41 5e                	pop    %r14
   31164:	41 5f                	pop    %r15
   31166:	c3                   	ret
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   31167:	48 89 c3             	mov    %rax,%rbx
   3116a:	e9 c1 6e fd ff       	jmp    8030 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold+0x4c>
   3116f:	e9 a2 6e fd ff       	jmp    8016 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold+0x32>
   31174:	e9 17 6f fd ff       	jmp    8090 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR.cold+0xac>
   31179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000031180 <_ZN4rtvc9VulkanApp25framebufferResizeCallbackEP10GLFWwindowii>:
                                          [[maybe_unused]] int height) {
   31180:	48 83 ec 08          	sub    $0x8,%rsp
  auto app = reinterpret_cast<VulkanApp *>(glfwGetWindowUserPointer(pWindow));
   31184:	e8 17 56 fd ff       	call   67a0 <glfwGetWindowUserPointer@plt>
  app->framebufferResized = true;
   31189:	c6 80 88 02 00 00 01 	movb   $0x1,0x288(%rax)
}
   31190:	48 83 c4 08          	add    $0x8,%rsp
   31194:	c3                   	ret
   31195:	90                   	nop
   31196:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   3119d:	00 00 00 

00000000000311a0 <_ZN4rtvc9VulkanApp17recreateSwapchainEv>:
void VulkanApp::recreateSwapchain() {
   311a0:	41 57                	push   %r15
   311a2:	41 56                	push   %r14
   311a4:	41 55                	push   %r13
   311a6:	41 54                	push   %r12
   311a8:	55                   	push   %rbp
   311a9:	53                   	push   %rbx
   311aa:	48 89 fb             	mov    %rdi,%rbx
   311ad:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    glfwGetFramebufferSize(_window, &width, &heigth);
   311b4:	48 8b bf 88 00 00 00 	mov    0x88(%rdi),%rdi
   311bb:	4c 8d a4 24 90 00 00 	lea    0x90(%rsp),%r12
   311c2:	00 
   311c3:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
    int width = 0, heigth = 0;
   311c8:	c7 44 24 60 00 00 00 	movl   $0x0,0x60(%rsp)
   311cf:	00 
    glfwGetFramebufferSize(_window, &width, &heigth);
   311d0:	4c 89 e2             	mov    %r12,%rdx
   311d3:	4c 89 ee             	mov    %r13,%rsi
    int width = 0, heigth = 0;
   311d6:	c7 84 24 90 00 00 00 	movl   $0x0,0x90(%rsp)
   311dd:	00 00 00 00 
    glfwGetFramebufferSize(_window, &width, &heigth);
   311e1:	e8 8a 57 fd ff       	call   6970 <glfwGetFramebufferSize@plt>
   311e6:	eb 1f                	jmp    31207 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x67>
   311e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   311ef:	00 
      glfwGetFramebufferSize(_window, &width, &heigth);
   311f0:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
   311f7:	4c 89 e2             	mov    %r12,%rdx
   311fa:	4c 89 ee             	mov    %r13,%rsi
   311fd:	e8 6e 57 fd ff       	call   6970 <glfwGetFramebufferSize@plt>
      glfwWaitEvents();
   31202:	e8 c9 50 fd ff       	call   62d0 <glfwWaitEvents@plt>
    while (width == 0 || heigth == 0) {
   31207:	8b 54 24 60          	mov    0x60(%rsp),%edx
   3120b:	85 d2                	test   %edx,%edx
   3120d:	74 e1                	je     311f0 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x50>
   3120f:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
   31216:	85 c0                	test   %eax,%eax
   31218:	74 d6                	je     311f0 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x50>
  void waitIdle() { vkDeviceWaitIdle(_device); }
   3121a:	48 8b bb 48 01 00 00 	mov    0x148(%rbx),%rdi
   31221:	e8 ca 4e fd ff       	call   60f0 <vkDeviceWaitIdle@plt>
  framebuffers = {};
   31226:	66 0f ef c0          	pxor   %xmm0,%xmm0
  using vkw::Framebuffers::Framebuffers;
   3122a:	48 8d 05 4f f6 00 00 	lea    0xf64f(%rip),%rax        # 40880 <_ZTVN4rtvc12FramebuffersE+0x10>
    if (_isOwner) {
   31231:	80 bb 80 02 00 00 00 	cmpb   $0x0,0x280(%rbx)
   31238:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
   3123f:	00 00 00 00 00 
	: _M_start(), _M_finish(), _M_end_of_storage()
   31244:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
   3124b:	00 00 00 00 00 
   31250:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
   31257:	00 00 00 00 00 
   3125c:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
   31263:	00 00 00 00 00 
   31268:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   3126f:	00 
   31270:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
   31277:	00 
   31278:	0f 85 02 07 00 00    	jne    31980 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x7e0>
   3127e:	4c 8b b3 58 02 00 00 	mov    0x258(%rbx),%r14
	  _M_start = __x._M_start;
   31285:	66 0f ef c0          	pxor   %xmm0,%xmm0
	  _M_end_of_storage = __x._M_end_of_storage;
   31289:	48 8b b3 68 02 00 00 	mov    0x268(%rbx),%rsi
   31290:	48 c7 83 68 02 00 00 	movq   $0x0,0x268(%rbx)
   31297:	00 00 00 00 
	  _M_start = __x._M_start;
   3129b:	0f 11 83 58 02 00 00 	movups %xmm0,0x258(%rbx)
	if (__p)
   312a2:	4d 85 f6             	test   %r14,%r14
   312a5:	74 0b                	je     312b2 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x112>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   312a7:	4c 29 f6             	sub    %r14,%rsi
   312aa:	4c 89 f7             	mov    %r14,%rdi
   312ad:	e8 ae 52 fd ff       	call   6560 <_ZdlPvm@plt>
    _device = rhs._device;
   312b2:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (_isOwner) {
   312b6:	80 bb 48 02 00 00 00 	cmpb   $0x0,0x248(%rbx)
   312bd:	0f 11 83 70 02 00 00 	movups %xmm0,0x270(%rbx)
   312c4:	0f 85 36 07 00 00    	jne    31a00 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x860>
    _graphicsPipeline = rhs._graphicsPipeline;
   312ca:	66 0f ef c0          	pxor   %xmm0,%xmm0
  using vkw::ImageViews::ImageViews;
   312ce:	4c 8d 35 8b f5 00 00 	lea    0xf58b(%rip),%r14        # 40860 <_ZTVN4rtvc19SwapchainImageViewsE+0x10>
    if (_isOwner) {
   312d5:	80 bb e0 01 00 00 00 	cmpb   $0x0,0x1e0(%rbx)
  imageViews = {};
   312dc:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
   312e3:	00 00 00 00 00 
   312e8:	0f 11 83 18 02 00 00 	movups %xmm0,0x218(%rbx)
   312ef:	48 8b bb b8 01 00 00 	mov    0x1b8(%rbx),%rdi
   312f6:	0f 11 83 28 02 00 00 	movups %xmm0,0x228(%rbx)
   312fd:	0f 11 83 38 02 00 00 	movups %xmm0,0x238(%rbx)
   31304:	66 0f ef c0          	pxor   %xmm0,%xmm0
	: _M_start(), _M_finish(), _M_end_of_storage()
   31308:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
   3130f:	00 00 00 00 00 
   31314:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
   3131b:	00 00 00 00 00 
   31320:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
   31327:	00 00 00 00 00 
   3132c:	4c 89 b4 24 90 00 00 	mov    %r14,0x90(%rsp)
   31333:	00 
   31334:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
   3133b:	00 
   3133c:	74 40                	je     3137e <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x1de>
   3133e:	4c 8b bb c0 01 00 00 	mov    0x1c0(%rbx),%r15
      for (auto &imageView : _imageViews) {
   31345:	4c 39 ff             	cmp    %r15,%rdi
   31348:	74 2d                	je     31377 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x1d7>
   3134a:	48 89 fd             	mov    %rdi,%rbp
   3134d:	0f 1f 00             	nopl   (%rax)
        vkDestroyImageView(_device, imageView, _pAllocator);
   31350:	48 8b 93 d8 01 00 00 	mov    0x1d8(%rbx),%rdx
   31357:	48 8b 75 00          	mov    0x0(%rbp),%rsi
   3135b:	48 8b bb d0 01 00 00 	mov    0x1d0(%rbx),%rdi
   31362:	e8 09 57 fd ff       	call   6a70 <vkDestroyImageView@plt>
      for (auto &imageView : _imageViews) {
   31367:	48 83 c5 08          	add    $0x8,%rbp
   3136b:	49 39 ef             	cmp    %rbp,%r15
   3136e:	75 e0                	jne    31350 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x1b0>
	  _M_start = __x._M_start;
   31370:	48 8b bb b8 01 00 00 	mov    0x1b8(%rbx),%rdi
      _isOwner = false;
   31377:	c6 83 e0 01 00 00 00 	movb   $0x0,0x1e0(%rbx)
    _imageViews = std::move(rhs._imageViews);
   3137e:	48 8d 83 b8 01 00 00 	lea    0x1b8(%rbx),%rax
   31385:	66 0f ef c0          	pxor   %xmm0,%xmm0
	  _M_end_of_storage = __x._M_end_of_storage;
   31389:	48 8b b3 c8 01 00 00 	mov    0x1c8(%rbx),%rsi
   31390:	48 c7 83 c8 01 00 00 	movq   $0x0,0x1c8(%rbx)
   31397:	00 00 00 00 
   3139b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
	  _M_start = __x._M_start;
   313a0:	0f 11 83 b8 01 00 00 	movups %xmm0,0x1b8(%rbx)
	if (__p)
   313a7:	48 85 ff             	test   %rdi,%rdi
   313aa:	74 08                	je     313b4 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x214>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   313ac:	48 29 fe             	sub    %rdi,%rsi
   313af:	e8 ac 51 fd ff       	call   6560 <_ZdlPvm@plt>
    _device = rhs._device;
   313b4:	66 0f ef c0          	pxor   %xmm0,%xmm0
#include "device.hpp"
#include "instance.hpp"

namespace rtvc {

class Swapchain : public vkw::Swapchain {
   313b8:	48 8d 83 78 01 00 00 	lea    0x178(%rbx),%rax
    if (_isOwner) {
   313bf:	80 bb a8 01 00 00 00 	cmpb   $0x0,0x1a8(%rbx)
   313c6:	0f 11 83 d0 01 00 00 	movups %xmm0,0x1d0(%rbx)
  swapchain = {};
   313cd:	66 0f ef c0          	pxor   %xmm0,%xmm0
   313d1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   313d6:	0f 11 84 24 98 00 00 	movups %xmm0,0x98(%rsp)
   313dd:	00 
   313de:	0f 11 84 24 a8 00 00 	movups %xmm0,0xa8(%rsp)
   313e5:	00 
   313e6:	0f 11 84 24 b8 00 00 	movups %xmm0,0xb8(%rsp)
   313ed:	00 
   313ee:	0f 85 6c 06 00 00    	jne    31a60 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x8c0>
    _extent = std::move(rhs._extent);
   313f4:	48 8b 84 24 a4 00 00 	mov    0xa4(%rsp),%rax
   313fb:	00 
    _device = rhs._device;
   313fc:	66 0f ef c0          	pxor   %xmm0,%xmm0
public:
  using vkw::Swapchain::Swapchain;

  Swapchain(const Surface &surface, const Device &device,
            VkPresentModeKHR preferredPresentMode = VK_PRESENT_MODE_FIFO_KHR) {
    _initialize(surface.ref(), device.ref(), device.physical(),
   31400:	44 8b 43 48          	mov    0x48(%rbx),%r8d
   31404:	4c 89 e7             	mov    %r12,%rdi
   31407:	48 8b 8b 50 01 00 00 	mov    0x150(%rbx),%rcx
   3140e:	48 8b 93 48 01 00 00 	mov    0x148(%rbx),%rdx
    _swapchain = rhs._swapchain;
   31415:	48 c7 83 80 01 00 00 	movq   $0x0,0x180(%rbx)
   3141c:	00 00 00 00 
    _extent = std::move(rhs._extent);
   31420:	48 89 83 8c 01 00 00 	mov    %rax,0x18c(%rbx)
   31427:	48 8b b3 18 01 00 00 	mov    0x118(%rbx),%rsi
  swapchain = {surface, device, preferredPresentMode};
   3142e:	48 8d 83 40 01 00 00 	lea    0x140(%rbx),%rax
    _format = std::move(rhs._format);
   31435:	c7 83 88 01 00 00 00 	movl   $0x0,0x188(%rbx)
   3143c:	00 00 00 
   3143f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
            VkPresentModeKHR preferredPresentMode = VK_PRESENT_MODE_FIFO_KHR) {
   31444:	48 8d 05 95 f3 00 00 	lea    0xf395(%rip),%rax        # 407e0 <_ZTVN4rtvc9SwapchainE+0x10>
    _device = rhs._device;
   3144b:	0f 11 83 98 01 00 00 	movups %xmm0,0x198(%rbx)
  Swapchain() = default;
   31452:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
   31459:	00 00 00 00 00 
   3145e:	c7 84 24 a0 00 00 00 	movl   $0x0,0xa0(%rsp)
   31465:	00 00 00 00 
   31469:	48 c7 84 24 a4 00 00 	movq   $0x0,0xa4(%rsp)
   31470:	00 00 00 00 00 
   31475:	c6 84 24 c0 00 00 00 	movb   $0x0,0xc0(%rsp)
   3147c:	00 
   3147d:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   31484:	00 
   31485:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
   3148c:	00 
    _initialize(surface.ref(), device.ref(), device.physical(),
   3148d:	e8 ae fa ff ff       	call   30f40 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR>
    if (_isOwner) {
   31492:	80 bb a8 01 00 00 00 	cmpb   $0x0,0x1a8(%rbx)
   31499:	0f 85 31 05 00 00    	jne    319d0 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x830>
    _swapchain = rhs._swapchain;
   3149f:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
   314a6:	00 
    _format = std::move(rhs._format);
   314a7:	8b 8c 24 a0 00 00 00 	mov    0xa0(%rsp),%ecx
    _extent = std::move(rhs._extent);
   314ae:	48 8b 84 24 a4 00 00 	mov    0xa4(%rsp),%rax
   314b5:	00 
    if (rhs._isOwner) {
   314b6:	80 bc 24 c0 00 00 00 	cmpb   $0x0,0xc0(%rsp)
   314bd:	00 
    _device = rhs._device;
   314be:	66 0f 6f 8c 24 b0 00 	movdqa 0xb0(%rsp),%xmm1
   314c5:	00 00 
    _swapchain = rhs._swapchain;
   314c7:	48 89 93 80 01 00 00 	mov    %rdx,0x180(%rbx)
    _format = std::move(rhs._format);
   314ce:	89 8b 88 01 00 00    	mov    %ecx,0x188(%rbx)
    _extent = std::move(rhs._extent);
   314d4:	48 89 83 8c 01 00 00 	mov    %rax,0x18c(%rbx)
    _device = rhs._device;
   314db:	0f 11 8b 98 01 00 00 	movups %xmm1,0x198(%rbx)
    if (rhs._isOwner) {
   314e2:	74 07                	je     314eb <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x34b>
      _isOwner = true;
   314e4:	c6 83 a8 01 00 00 01 	movb   $0x1,0x1a8(%rbx)
    _initialize(device.ref(), swapchain.ref(), swapchain.format());
   314eb:	48 8b b3 48 01 00 00 	mov    0x148(%rbx),%rsi
   314f2:	4c 89 e7             	mov    %r12,%rdi
	: _M_start(), _M_finish(), _M_end_of_storage()
   314f5:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
   314fc:	00 00 00 00 00 
   31501:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
   31508:	00 00 00 00 00 
   3150d:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
   31514:	00 00 00 00 00 
  ImageViews() = default;
   31519:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
   31520:	00 00 00 00 00 
   31525:	48 c7 84 24 b8 00 00 	movq   $0x0,0xb8(%rsp)
   3152c:	00 00 00 00 00 
   31531:	c6 84 24 c0 00 00 00 	movb   $0x0,0xc0(%rsp)
   31538:	00 
  SwapchainImageViews(const Device &device, const Swapchain &swapchain) {
   31539:	4c 89 b4 24 90 00 00 	mov    %r14,0x90(%rsp)
   31540:	00 
    _initialize(device.ref(), swapchain.ref(), swapchain.format());
   31541:	e8 4a f5 fd ff       	call   10a90 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat>
    if (_isOwner) {
   31546:	80 bb e0 01 00 00 00 	cmpb   $0x0,0x1e0(%rbx)
   3154d:	48 8b bb b8 01 00 00 	mov    0x1b8(%rbx),%rdi
   31554:	74 40                	je     31596 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x3f6>
   31556:	4c 8b bb c0 01 00 00 	mov    0x1c0(%rbx),%r15
      for (auto &imageView : _imageViews) {
   3155d:	4c 39 ff             	cmp    %r15,%rdi
   31560:	74 2d                	je     3158f <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x3ef>
   31562:	48 89 fd             	mov    %rdi,%rbp
   31565:	0f 1f 00             	nopl   (%rax)
        vkDestroyImageView(_device, imageView, _pAllocator);
   31568:	48 8b 93 d8 01 00 00 	mov    0x1d8(%rbx),%rdx
   3156f:	48 8b 75 00          	mov    0x0(%rbp),%rsi
   31573:	48 8b bb d0 01 00 00 	mov    0x1d0(%rbx),%rdi
   3157a:	e8 f1 54 fd ff       	call   6a70 <vkDestroyImageView@plt>
      for (auto &imageView : _imageViews) {
   3157f:	48 83 c5 08          	add    $0x8,%rbp
   31583:	49 39 ef             	cmp    %rbp,%r15
   31586:	75 e0                	jne    31568 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x3c8>
	  _M_start = __x._M_start;
   31588:	48 8b bb b8 01 00 00 	mov    0x1b8(%rbx),%rdi
      _isOwner = false;
   3158f:	c6 83 e0 01 00 00 00 	movb   $0x0,0x1e0(%rbx)
   31596:	f3 0f 6f 94 24 98 00 	movdqu 0x98(%rsp),%xmm2
   3159d:	00 00 
	  _M_end_of_storage = __x._M_end_of_storage;
   3159f:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
   315a6:	00 
	  _M_start = __x._M_start;
   315a7:	66 0f ef c0          	pxor   %xmm0,%xmm0
	  _M_end_of_storage = __x._M_end_of_storage;
   315ab:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
   315b2:	00 00 00 00 00 
   315b7:	48 8b b3 c8 01 00 00 	mov    0x1c8(%rbx),%rsi
	  _M_start = __x._M_start;
   315be:	0f 11 84 24 98 00 00 	movups %xmm0,0x98(%rsp)
   315c5:	00 
	  _M_end_of_storage = __x._M_end_of_storage;
   315c6:	48 89 83 c8 01 00 00 	mov    %rax,0x1c8(%rbx)
	  _M_start = __x._M_start;
   315cd:	0f 11 93 b8 01 00 00 	movups %xmm2,0x1b8(%rbx)
	if (__p)
   315d4:	48 85 ff             	test   %rdi,%rdi
   315d7:	74 10                	je     315e9 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x449>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   315d9:	48 29 fe             	sub    %rdi,%rsi
   315dc:	e8 7f 4f fd ff       	call   6560 <_ZdlPvm@plt>
   315e1:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
   315e8:	00 
    _device = rhs._device;
   315e9:	66 0f 6f 9c 24 b0 00 	movdqa 0xb0(%rsp),%xmm3
   315f0:	00 00 
    if (rhs._isOwner) {
   315f2:	80 bc 24 c0 00 00 00 	cmpb   $0x0,0xc0(%rsp)
   315f9:	00 
    _device = rhs._device;
   315fa:	0f 11 9b d0 01 00 00 	movups %xmm3,0x1d0(%rbx)
    if (rhs._isOwner) {
   31601:	74 0f                	je     31612 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x472>
      _isOwner = true;
   31603:	c6 83 e0 01 00 00 01 	movb   $0x1,0x1e0(%rbx)
      rhs._isOwner = false;
   3160a:	c6 84 24 c0 00 00 00 	movb   $0x0,0xc0(%rsp)
   31611:	00 
  virtual ~ImageViews() { _destroyVkData(); }
   31612:	48 8d 05 7f f0 00 00 	lea    0xf07f(%rip),%rax        # 40698 <_ZTVN3vkw10ImageViewsE+0x10>
   31619:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   31620:	00 
	if (__p)
   31621:	48 85 ff             	test   %rdi,%rdi
   31624:	74 10                	je     31636 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x496>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   31626:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   3162d:	00 
   3162e:	48 29 fe             	sub    %rdi,%rsi
   31631:	e8 2a 4f fd ff       	call   6560 <_ZdlPvm@plt>
                       "/build/shaders/triangle_frag.spv"}};
   31636:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	: allocator_type(__a), _M_p(__dat) { }
   3163b:	4c 8d 74 24 20       	lea    0x20(%rsp),%r14
	    _M_data(_M_create(__dnew, size_type(0)));
   31640:	31 d2                	xor    %edx,%edx
   31642:	4c 89 e6             	mov    %r12,%rsi
   31645:	4c 89 f7             	mov    %r14,%rdi
   31648:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
   3164d:	4c 8d 7c 24 40       	lea    0x40(%rsp),%r15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   31652:	48 c7 84 24 90 00 00 	movq   $0x20,0x90(%rsp)
   31659:	00 20 00 00 00 
   3165e:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
   31663:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   31668:	48 89 6c 24 20       	mov    %rbp,0x20(%rsp)
   3166d:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  graphicsPipeline = {{device, swapchain, descriptorSetLayout,
   31672:	48 8d 83 e8 01 00 00 	lea    0x1e8(%rbx),%rax
   31679:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
	    _M_data(_M_create(__dnew, size_type(0)));
   3167e:	e8 fd 53 fd ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
	    _M_capacity(__dnew);
   31683:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
   3168a:	00 
	    _M_data(_M_create(__dnew, size_type(0)));
   3168b:	4c 89 e6             	mov    %r12,%rsi
   3168e:	4c 89 ff             	mov    %r15,%rdi
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   31691:	66 0f 6f 05 b7 7a 00 	movdqa 0x7ab7(%rip),%xmm0        # 39150 <_ZTSN4rtvc12FramebuffersE+0x20>
   31698:	00 
      { _M_dataplus._M_p = __p; }
   31699:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      { _M_allocated_capacity = __capacity; }
   3169e:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
   316a3:	0f 11 00             	movups %xmm0,(%rax)
   316a6:	66 0f 6f 05 b2 7a 00 	movdqa 0x7ab2(%rip),%xmm0        # 39160 <_ZTSN4rtvc12FramebuffersE+0x30>
   316ad:	00 
      { _M_string_length = __length; }
   316ae:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
   316b3:	0f 11 40 10          	movups %xmm0,0x10(%rax)
	__c1 = __c2;
   316b7:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   316bc:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
   316c0:	31 d2                	xor    %edx,%edx
                       "/build/shaders/triangle_frag.spv"}};
   316c2:	4c 89 74 24 78       	mov    %r14,0x78(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
   316c7:	4c 8d 74 24 50       	lea    0x50(%rsp),%r14
   316cc:	4c 89 74 24 40       	mov    %r14,0x40(%rsp)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   316d1:	48 c7 84 24 90 00 00 	movq   $0x20,0x90(%rsp)
   316d8:	00 20 00 00 00 
	    _M_data(_M_create(__dnew, size_type(0)));
   316dd:	e8 9e 53 fd ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
	    _M_capacity(__dnew);
   316e2:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
   316e9:	00 
      { _M_dataplus._M_p = __p; }
   316ea:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
                   const DescriptorSetLayout &desSetLayout,
                   const std::string &vertPath, const std::string &fragPath) {
    _initialize({device, swapchain, desSetLayout, vertPath, fragPath});
  }

  GraphicsPipeline(const CustomArgs &args) { _initialize(args); }
   316ef:	4c 89 ee             	mov    %r13,%rsi
   316f2:	4c 89 e7             	mov    %r12,%rdi
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   316f5:	66 0f 6f 05 53 7a 00 	movdqa 0x7a53(%rip),%xmm0        # 39150 <_ZTSN4rtvc12FramebuffersE+0x20>
   316fc:	00 
      { _M_allocated_capacity = __capacity; }
   316fd:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
   31702:	0f 11 00             	movups %xmm0,(%rax)
   31705:	66 0f 6f 05 63 7a 00 	movdqa 0x7a63(%rip),%xmm0        # 39170 <_ZTSN4rtvc12FramebuffersE+0x40>
   3170c:	00 
      { _M_string_length = __length; }
   3170d:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
   31712:	0f 11 40 10          	movups %xmm0,0x10(%rax)
	__c1 = __c2;
   31716:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
   3171b:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
   3171f:	48 8d 05 da f0 00 00 	lea    0xf0da(%rip),%rax        # 40800 <_ZTVN4rtvc16GraphicsPipelineE+0x10>
   31726:	4c 89 bc 24 80 00 00 	mov    %r15,0x80(%rsp)
   3172d:	00 
  GraphicsPipeline() = default;
   3172e:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
   31735:	00 00 00 00 00 
   3173a:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
   31741:	00 00 00 00 00 
   31746:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
   3174d:	00 00 00 00 00 
   31752:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
   31759:	00 00 00 00 00 
   3175e:	48 c7 84 24 b8 00 00 	movq   $0x0,0xb8(%rsp)
   31765:	00 00 00 00 00 
   3176a:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
   31771:	00 00 00 00 00 
   31776:	c6 84 24 c8 00 00 00 	movb   $0x0,0xc8(%rsp)
   3177d:	00 
   3177e:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   31785:	00 
   31786:	e8 c5 e8 fd ff       	call   10050 <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE>
    if (_isOwner) {
   3178b:	80 bb 48 02 00 00 00 	cmpb   $0x0,0x248(%rbx)
   31792:	0f 85 f8 02 00 00    	jne    31a90 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x8f0>
    _graphicsPipeline = rhs._graphicsPipeline;
   31798:	f3 0f 6f a4 24 98 00 	movdqu 0x98(%rsp),%xmm4
   3179f:	00 00 
    if (rhs._isOwner) {
   317a1:	80 bc 24 c8 00 00 00 	cmpb   $0x0,0xc8(%rsp)
   317a8:	00 
    _graphicsPipeline = rhs._graphicsPipeline;
   317a9:	f3 0f 6f ac 24 a8 00 	movdqu 0xa8(%rsp),%xmm5
   317b0:	00 00 
   317b2:	f3 0f 6f b4 24 b8 00 	movdqu 0xb8(%rsp),%xmm6
   317b9:	00 00 
   317bb:	0f 11 a3 18 02 00 00 	movups %xmm4,0x218(%rbx)
   317c2:	0f 11 ab 28 02 00 00 	movups %xmm5,0x228(%rbx)
   317c9:	0f 11 b3 38 02 00 00 	movups %xmm6,0x238(%rbx)
    if (rhs._isOwner) {
   317d0:	74 07                	je     317d9 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x639>
      _isOwner = true;
   317d2:	c6 83 48 02 00 00 01 	movb   $0x1,0x248(%rbx)
      { return _M_dataplus._M_p; }
   317d9:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
   317de:	4c 39 f7             	cmp    %r14,%rdi
   317e1:	74 0e                	je     317f1 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x651>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   317e3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
   317e8:	48 8d 70 01          	lea    0x1(%rax),%rsi
   317ec:	e8 6f 4d fd ff       	call   6560 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
   317f1:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
   317f6:	48 39 ef             	cmp    %rbp,%rdi
   317f9:	74 0e                	je     31809 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x669>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   317fb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
   31800:	48 8d 70 01          	lea    0x1(%rax),%rsi
   31804:	e8 57 4d fd ff       	call   6560 <_ZdlPvm@plt>
    _initialize(device.ref(), swapchainImageViews.ref(),
   31809:	48 8b 8b 38 02 00 00 	mov    0x238(%rbx),%rcx
   31810:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
               const Swapchain &swapchain) {
   31815:	48 8d 05 64 f0 00 00 	lea    0xf064(%rip),%rax        # 40880 <_ZTVN4rtvc12FramebuffersE+0x10>
    _initialize(device.ref(), swapchainImageViews.ref(),
   3181c:	4c 8d 83 8c 01 00 00 	lea    0x18c(%rbx),%r8
   31823:	48 8b b3 48 01 00 00 	mov    0x148(%rbx),%rsi
   3182a:	4c 89 e7             	mov    %r12,%rdi
	: _M_start(), _M_finish(), _M_end_of_storage()
   3182d:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
   31834:	00 00 00 00 00 
   31839:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
   31840:	00 00 00 00 00 
   31845:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
   3184c:	00 00 00 00 00 
  Framebuffers() = default;
   31851:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
   31858:	00 00 00 00 00 
   3185d:	48 c7 84 24 b8 00 00 	movq   $0x0,0xb8(%rsp)
   31864:	00 00 00 00 00 
   31869:	c6 84 24 c0 00 00 00 	movb   $0x0,0xc0(%rsp)
   31870:	00 
               const Swapchain &swapchain) {
   31871:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   31878:	00 
    _initialize(device.ref(), swapchainImageViews.ref(),
   31879:	e8 92 e0 fd ff       	call   f910 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D>
    if (_isOwner) {
   3187e:	80 bb 80 02 00 00 00 	cmpb   $0x0,0x280(%rbx)
   31885:	48 8b bb 58 02 00 00 	mov    0x258(%rbx),%rdi
   3188c:	74 40                	je     318ce <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x72e>
   3188e:	4c 8b ab 60 02 00 00 	mov    0x260(%rbx),%r13
      for (auto &framebuffer : _framebuffers) {
   31895:	4c 39 ef             	cmp    %r13,%rdi
   31898:	74 2d                	je     318c7 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x727>
   3189a:	48 89 fd             	mov    %rdi,%rbp
   3189d:	0f 1f 00             	nopl   (%rax)
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
   318a0:	48 8b 93 78 02 00 00 	mov    0x278(%rbx),%rdx
   318a7:	48 8b 75 00          	mov    0x0(%rbp),%rsi
   318ab:	48 8b bb 70 02 00 00 	mov    0x270(%rbx),%rdi
   318b2:	e8 29 51 fd ff       	call   69e0 <vkDestroyFramebuffer@plt>
      for (auto &framebuffer : _framebuffers) {
   318b7:	48 83 c5 08          	add    $0x8,%rbp
   318bb:	49 39 ed             	cmp    %rbp,%r13
   318be:	75 e0                	jne    318a0 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x700>
	  _M_start = __x._M_start;
   318c0:	48 8b bb 58 02 00 00 	mov    0x258(%rbx),%rdi
      _isOwner = false;
   318c7:	c6 83 80 02 00 00 00 	movb   $0x0,0x280(%rbx)
   318ce:	f3 0f 6f bc 24 98 00 	movdqu 0x98(%rsp),%xmm7
   318d5:	00 00 
	  _M_end_of_storage = __x._M_end_of_storage;
   318d7:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
   318de:	00 
	  _M_start = __x._M_start;
   318df:	66 0f ef c0          	pxor   %xmm0,%xmm0
	  _M_end_of_storage = __x._M_end_of_storage;
   318e3:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
   318ea:	00 00 00 00 00 
   318ef:	48 8b b3 68 02 00 00 	mov    0x268(%rbx),%rsi
	  _M_start = __x._M_start;
   318f6:	0f 11 84 24 98 00 00 	movups %xmm0,0x98(%rsp)
   318fd:	00 
	  _M_end_of_storage = __x._M_end_of_storage;
   318fe:	48 89 83 68 02 00 00 	mov    %rax,0x268(%rbx)
	  _M_start = __x._M_start;
   31905:	0f 11 bb 58 02 00 00 	movups %xmm7,0x258(%rbx)
	if (__p)
   3190c:	48 85 ff             	test   %rdi,%rdi
   3190f:	74 10                	je     31921 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x781>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   31911:	48 29 fe             	sub    %rdi,%rsi
   31914:	e8 47 4c fd ff       	call   6560 <_ZdlPvm@plt>
   31919:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
   31920:	00 
    _device = rhs._device;
   31921:	66 0f 6f 8c 24 b0 00 	movdqa 0xb0(%rsp),%xmm1
   31928:	00 00 
    if (rhs._isOwner) {
   3192a:	80 bc 24 c0 00 00 00 	cmpb   $0x0,0xc0(%rsp)
   31931:	00 
    _device = rhs._device;
   31932:	0f 11 8b 70 02 00 00 	movups %xmm1,0x270(%rbx)
    if (rhs._isOwner) {
   31939:	74 0f                	je     3194a <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x7aa>
      _isOwner = true;
   3193b:	c6 83 80 02 00 00 01 	movb   $0x1,0x280(%rbx)
      rhs._isOwner = false;
   31942:	c6 84 24 c0 00 00 00 	movb   $0x0,0xc0(%rsp)
   31949:	00 
  virtual ~Framebuffers() { _destroyVkData(); }
   3194a:	48 8d 05 df eb 00 00 	lea    0xebdf(%rip),%rax        # 40530 <_ZTVN3vkw12FramebuffersE+0x10>
   31951:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   31958:	00 
	if (__p)
   31959:	48 85 ff             	test   %rdi,%rdi
   3195c:	74 10                	je     3196e <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x7ce>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   3195e:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   31965:	00 
   31966:	48 29 fe             	sub    %rdi,%rsi
   31969:	e8 f2 4b fd ff       	call   6560 <_ZdlPvm@plt>
}
   3196e:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
   31975:	5b                   	pop    %rbx
   31976:	5d                   	pop    %rbp
   31977:	41 5c                	pop    %r12
   31979:	41 5d                	pop    %r13
   3197b:	41 5e                	pop    %r14
   3197d:	41 5f                	pop    %r15
   3197f:	c3                   	ret
   31980:	48 8b ab 58 02 00 00 	mov    0x258(%rbx),%rbp
   31987:	4c 8b b3 60 02 00 00 	mov    0x260(%rbx),%r14
      for (auto &framebuffer : _framebuffers) {
   3198e:	4c 39 f5             	cmp    %r14,%rbp
   31991:	74 2c                	je     319bf <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x81f>
   31993:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        vkDestroyFramebuffer(_device, framebuffer, _pAllocator);
   31998:	48 8b 93 78 02 00 00 	mov    0x278(%rbx),%rdx
   3199f:	48 8b 75 00          	mov    0x0(%rbp),%rsi
   319a3:	48 8b bb 70 02 00 00 	mov    0x270(%rbx),%rdi
   319aa:	e8 31 50 fd ff       	call   69e0 <vkDestroyFramebuffer@plt>
      for (auto &framebuffer : _framebuffers) {
   319af:	48 83 c5 08          	add    $0x8,%rbp
   319b3:	49 39 ee             	cmp    %rbp,%r14
   319b6:	75 e0                	jne    31998 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x7f8>
	  _M_start = __x._M_start;
   319b8:	4c 8b b3 58 02 00 00 	mov    0x258(%rbx),%r14
      _isOwner = false;
   319bf:	c6 83 80 02 00 00 00 	movb   $0x0,0x280(%rbx)
      if constexpr (enableValidationLayers) {
        std::cout << "Framebuffers destructor" << '\n';
      }
    }
  }
   319c6:	e9 ba f8 ff ff       	jmp    31285 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0xe5>
   319cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      vkDestroySwapchainKHR(_device, _swapchain, _pAllocator);
   319d0:	48 8b 93 a0 01 00 00 	mov    0x1a0(%rbx),%rdx
   319d7:	48 8b b3 80 01 00 00 	mov    0x180(%rbx),%rsi
   319de:	48 8b bb 98 01 00 00 	mov    0x198(%rbx),%rdi
   319e5:	e8 46 47 fd ff       	call   6130 <vkDestroySwapchainKHR@plt>
      _isOwner = false;
   319ea:	c6 83 a8 01 00 00 00 	movb   $0x0,0x1a8(%rbx)
      if constexpr (enableValidationLayers) {
   319f1:	e9 a9 fa ff ff       	jmp    3149f <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x2ff>
   319f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   319fd:	00 00 00 
      vkDestroyPipeline(_device, _graphicsPipeline, _pAllocator);
   31a00:	48 8b 93 40 02 00 00 	mov    0x240(%rbx),%rdx
   31a07:	48 8b b3 18 02 00 00 	mov    0x218(%rbx),%rsi
   31a0e:	48 8b bb 20 02 00 00 	mov    0x220(%rbx),%rdi
   31a15:	e8 d6 4b fd ff       	call   65f0 <vkDestroyPipeline@plt>
      vkDestroyPipelineLayout(_device, _pipelineLayout, _pAllocator);
   31a1a:	48 8b 93 40 02 00 00 	mov    0x240(%rbx),%rdx
   31a21:	48 8b b3 30 02 00 00 	mov    0x230(%rbx),%rsi
   31a28:	48 8b bb 20 02 00 00 	mov    0x220(%rbx),%rdi
   31a2f:	e8 bc 4c fd ff       	call   66f0 <vkDestroyPipelineLayout@plt>
      vkDestroyRenderPass(_device, _renderPass, _pAllocator);
   31a34:	48 8b 93 40 02 00 00 	mov    0x240(%rbx),%rdx
   31a3b:	48 8b b3 38 02 00 00 	mov    0x238(%rbx),%rsi
   31a42:	48 8b bb 20 02 00 00 	mov    0x220(%rbx),%rdi
   31a49:	e8 b2 4a fd ff       	call   6500 <vkDestroyRenderPass@plt>
      _isOwner = false;
   31a4e:	c6 83 48 02 00 00 00 	movb   $0x0,0x248(%rbx)
      if constexpr (enableValidationLayers) {
   31a55:	e9 70 f8 ff ff       	jmp    312ca <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x12a>
   31a5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroySwapchainKHR(_device, _swapchain, _pAllocator);
   31a60:	48 8b 93 a0 01 00 00 	mov    0x1a0(%rbx),%rdx
   31a67:	48 8b b3 80 01 00 00 	mov    0x180(%rbx),%rsi
   31a6e:	48 8b bb 98 01 00 00 	mov    0x198(%rbx),%rdi
   31a75:	e8 b6 46 fd ff       	call   6130 <vkDestroySwapchainKHR@plt>
      _isOwner = false;
   31a7a:	c6 83 a8 01 00 00 00 	movb   $0x0,0x1a8(%rbx)
      if constexpr (enableValidationLayers) {
   31a81:	e9 6e f9 ff ff       	jmp    313f4 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x254>
   31a86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   31a8d:	00 00 00 
      vkDestroyPipeline(_device, _graphicsPipeline, _pAllocator);
   31a90:	48 8b 93 40 02 00 00 	mov    0x240(%rbx),%rdx
   31a97:	48 8b b3 18 02 00 00 	mov    0x218(%rbx),%rsi
   31a9e:	48 8b bb 20 02 00 00 	mov    0x220(%rbx),%rdi
   31aa5:	e8 46 4b fd ff       	call   65f0 <vkDestroyPipeline@plt>
      vkDestroyPipelineLayout(_device, _pipelineLayout, _pAllocator);
   31aaa:	48 8b 93 40 02 00 00 	mov    0x240(%rbx),%rdx
   31ab1:	48 8b b3 30 02 00 00 	mov    0x230(%rbx),%rsi
   31ab8:	48 8b bb 20 02 00 00 	mov    0x220(%rbx),%rdi
   31abf:	e8 2c 4c fd ff       	call   66f0 <vkDestroyPipelineLayout@plt>
      vkDestroyRenderPass(_device, _renderPass, _pAllocator);
   31ac4:	48 8b 93 40 02 00 00 	mov    0x240(%rbx),%rdx
   31acb:	48 8b b3 38 02 00 00 	mov    0x238(%rbx),%rsi
   31ad2:	48 8b bb 20 02 00 00 	mov    0x220(%rbx),%rdi
   31ad9:	e8 22 4a fd ff       	call   6500 <vkDestroyRenderPass@plt>
      _isOwner = false;
   31ade:	c6 83 48 02 00 00 00 	movb   $0x0,0x248(%rbx)
      if constexpr (enableValidationLayers) {
   31ae5:	e9 ae fc ff ff       	jmp    31798 <_ZN4rtvc9VulkanApp17recreateSwapchainEv+0x5f8>
class Framebuffers : public vkw::Framebuffers {
   31aea:	48 89 c3             	mov    %rax,%rbx
   31aed:	e9 da 66 fd ff       	jmp    81cc <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold>
class SwapchainImageViews : public vkw::ImageViews {
   31af2:	48 89 c3             	mov    %rax,%rbx
   31af5:	e9 f1 66 fd ff       	jmp    81eb <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x1f>
   31afa:	48 89 c3             	mov    %rax,%rbx
   31afd:	e9 01 67 fd ff       	jmp    8203 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x37>
  virtual ~Swapchain() { _destroyVkData(); }
   31b02:	48 89 c3             	mov    %rax,%rbx
   31b05:	e9 09 67 fd ff       	jmp    8213 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x47>
  virtual ~GraphicsPipeline() { _destroyVkData(); }
   31b0a:	48 89 c3             	mov    %rax,%rbx
   31b0d:	e9 2a 67 fd ff       	jmp    823c <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x70>
   31b12:	48 89 c3             	mov    %rax,%rbx
   31b15:	e9 7b 67 fd ff       	jmp    8295 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0xc9>
   31b1a:	48 89 c3             	mov    %rax,%rbx
   31b1d:	e9 9c 67 fd ff       	jmp    82be <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0xf2>
  }
   31b22:	48 89 c3             	mov    %rax,%rbx
   31b25:	e9 ba 67 fd ff       	jmp    82e4 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x118>
      { return _M_dataplus._M_p; }
   31b2a:	48 89 c3             	mov    %rax,%rbx
   31b2d:	e9 43 67 fd ff       	jmp    8275 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0xa9>
   31b32:	48 89 c3             	mov    %rax,%rbx
   31b35:	e9 ba 67 fd ff       	jmp    82f4 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x128>
  }
   31b3a:	48 89 c3             	mov    %rax,%rbx
   31b3d:	e9 c2 67 fd ff       	jmp    8304 <_ZN4rtvc9VulkanApp17recreateSwapchainEv.cold+0x138>
   31b42:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   31b49:	00 00 00 00 
   31b4d:	0f 1f 00             	nopl   (%rax)

0000000000031b50 <_ZN4rtvc9VulkanApp19recordCommandBufferEP17VkCommandBuffer_Tj>:
                                    uint32_t imageIndex) {
   31b50:	41 54                	push   %r12
  VkCommandBufferBeginInfo cmdBufferBeginInfo{};
   31b52:	66 0f ef c0          	pxor   %xmm0,%xmm0
                                    uint32_t imageIndex) {
   31b56:	41 89 d4             	mov    %edx,%r12d
   31b59:	55                   	push   %rbp
   31b5a:	48 89 fd             	mov    %rdi,%rbp
   31b5d:	53                   	push   %rbx
   31b5e:	48 89 f3             	mov    %rsi,%rbx
  vkh::beginCommandBuffer(cmdBuffer, &cmdBufferBeginInfo);
   31b61:	48 89 df             	mov    %rbx,%rdi
                                    uint32_t imageIndex) {
   31b64:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  vkh::beginCommandBuffer(cmdBuffer, &cmdBufferBeginInfo);
   31b68:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  VkCommandBufferBeginInfo cmdBufferBeginInfo{};
   31b6d:	0f 11 44 24 24       	movups %xmm0,0x24(%rsp)
  cmdBufferBeginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
   31b72:	c7 44 24 20 2a 00 00 	movl   $0x2a,0x20(%rsp)
   31b79:	00 
  VkCommandBufferBeginInfo cmdBufferBeginInfo{};
   31b7a:	0f 11 44 24 30       	movups %xmm0,0x30(%rsp)
  vkh::beginCommandBuffer(cmdBuffer, &cmdBufferBeginInfo);
   31b7f:	e8 7c a8 fd ff       	call   c400 <_ZN3vkh18beginCommandBufferEP17VkCommandBuffer_TPK24VkCommandBufferBeginInfo>
  VkRenderPassBeginInfo renderPassBeginInfo{};
   31b84:	66 0f ef c0          	pxor   %xmm0,%xmm0
  vkCmdBeginRenderPass(cmdBuffer, &renderPassBeginInfo,
   31b88:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
   31b8d:	31 d2                	xor    %edx,%edx
  VkRenderPassBeginInfo renderPassBeginInfo{};
   31b8f:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
  renderPassBeginInfo.framebuffer = framebuffers[imageIndex];
   31b94:	48 8b 85 58 02 00 00 	mov    0x258(%rbp),%rax
  vkCmdBeginRenderPass(cmdBuffer, &renderPassBeginInfo,
   31b9b:	48 89 df             	mov    %rbx,%rdi
  VkClearValue clearColor = {{{0.0f, 0.0f, 0.0f, 1.0f}}};
   31b9e:	0f 28 0d db 75 00 00 	movaps 0x75db(%rip),%xmm1        # 39180 <_ZTSN4rtvc12FramebuffersE+0x50>
  VkRenderPassBeginInfo renderPassBeginInfo{};
   31ba5:	0f 11 44 24 70       	movups %xmm0,0x70(%rsp)
   31baa:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
   31baf:	0f 11 44 24 54       	movups %xmm0,0x54(%rsp)
  renderPassBeginInfo.renderPass = graphicsPipeline.renderPass();
   31bb4:	f3 0f 7e 85 38 02 00 	movq   0x238(%rbp),%xmm0
   31bbb:	00 
  VkClearValue clearColor = {{{0.0f, 0.0f, 0.0f, 1.0f}}};
   31bbc:	0f 29 4c 24 10       	movaps %xmm1,0x10(%rsp)
  renderPassBeginInfo.renderPass = graphicsPipeline.renderPass();
   31bc1:	42 0f 16 04 e0       	movhps (%rax,%r12,8),%xmm0
  renderPassBeginInfo.renderArea.extent = swapchain.extent();
   31bc6:	48 8b 85 8c 01 00 00 	mov    0x18c(%rbp),%rax
  renderPassBeginInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
   31bcd:	c7 44 24 40 2b 00 00 	movl   $0x2b,0x40(%rsp)
   31bd4:	00 
  renderPassBeginInfo.renderPass = graphicsPipeline.renderPass();
   31bd5:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
  renderPassBeginInfo.renderArea.extent = swapchain.extent();
   31bda:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  renderPassBeginInfo.pClearValues = &clearColor;
   31bdf:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
   31be4:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  renderPassBeginInfo.clearValueCount = 1;
   31be9:	c7 44 24 70 01 00 00 	movl   $0x1,0x70(%rsp)
   31bf0:	00 
  vkCmdBeginRenderPass(cmdBuffer, &renderPassBeginInfo,
   31bf1:	e8 ea 4b fd ff       	call   67e0 <vkCmdBeginRenderPass@plt>
  vkCmdBindPipeline(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS,
   31bf6:	48 8b 95 18 02 00 00 	mov    0x218(%rbp),%rdx
   31bfd:	48 89 df             	mov    %rbx,%rdi
   31c00:	31 f6                	xor    %esi,%esi
   31c02:	e8 69 48 fd ff       	call   6470 <vkCmdBindPipeline@plt>
  vkCmdBindVertexBuffers(cmdBuffer, 0, 1, vertexBuffers, offsets);
   31c07:	48 89 e1             	mov    %rsp,%rcx
   31c0a:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
   31c0f:	48 89 df             	mov    %rbx,%rdi
  VkBuffer vertexBuffers[] = {vertexBuffer.ref()};
   31c12:	48 8b 85 20 03 00 00 	mov    0x320(%rbp),%rax
  vkCmdBindVertexBuffers(cmdBuffer, 0, 1, vertexBuffers, offsets);
   31c19:	ba 01 00 00 00       	mov    $0x1,%edx
   31c1e:	31 f6                	xor    %esi,%esi
  VkDeviceSize offsets[] = {0};
   31c20:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
   31c27:	00 00 
  VkBuffer vertexBuffers[] = {vertexBuffer.ref()};
   31c29:	48 89 04 24          	mov    %rax,(%rsp)
  vkCmdBindVertexBuffers(cmdBuffer, 0, 1, vertexBuffers, offsets);
   31c2d:	e8 0e 4c fd ff       	call   6840 <vkCmdBindVertexBuffers@plt>
  vkCmdBindDescriptorSets(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS,
   31c32:	48 8b 95 30 02 00 00 	mov    0x230(%rbp),%rdx
   31c39:	6a 00                	push   $0x0
   31c3b:	31 c9                	xor    %ecx,%ecx
   31c3d:	6a 00                	push   $0x0
   31c3f:	4c 8b 8d 60 04 00 00 	mov    0x460(%rbp),%r9
   31c46:	48 89 df             	mov    %rbx,%rdi
   31c49:	31 f6                	xor    %esi,%esi
   31c4b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   31c51:	e8 5a 46 fd ff       	call   62b0 <vkCmdBindDescriptorSets@plt>
  vkCmdBindIndexBuffer(cmdBuffer, indexBuffer.ref(), 0, VK_INDEX_TYPE_UINT16);
   31c56:	48 8b b5 60 03 00 00 	mov    0x360(%rbp),%rsi
   31c5d:	58                   	pop    %rax
   31c5e:	48 89 df             	mov    %rbx,%rdi
   31c61:	5a                   	pop    %rdx
   31c62:	31 c9                	xor    %ecx,%ecx
   31c64:	31 d2                	xor    %edx,%edx
   31c66:	e8 b5 4b fd ff       	call   6820 <vkCmdBindIndexBuffer@plt>
  vkCmdDrawIndexed(cmdBuffer,
   31c6b:	45 31 c9             	xor    %r9d,%r9d
   31c6e:	45 31 c0             	xor    %r8d,%r8d
   31c71:	31 c9                	xor    %ecx,%ecx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   31c73:	48 8b 35 ce fa 00 00 	mov    0xface(%rip),%rsi        # 41748 <_ZN6shader16triangle_indicesE+0x8>
   31c7a:	ba 01 00 00 00       	mov    $0x1,%edx
   31c7f:	48 89 df             	mov    %rbx,%rdi
   31c82:	48 2b 35 b7 fa 00 00 	sub    0xfab7(%rip),%rsi        # 41740 <_ZN6shader16triangle_indicesE>
   31c89:	48 d1 fe             	sar    %rsi
   31c8c:	e8 3f 45 fd ff       	call   61d0 <vkCmdDrawIndexed@plt>
  vkCmdEndRenderPass(cmdBuffer);
   31c91:	48 89 df             	mov    %rbx,%rdi
   31c94:	e8 d7 43 fd ff       	call   6070 <vkCmdEndRenderPass@plt>
  vkh::endCommandBuffer(cmdBuffer);
   31c99:	48 89 df             	mov    %rbx,%rdi
   31c9c:	e8 7f a7 fd ff       	call   c420 <_ZN3vkh16endCommandBufferEP17VkCommandBuffer_T>
}
   31ca1:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp
   31ca5:	5b                   	pop    %rbx
   31ca6:	5d                   	pop    %rbp
   31ca7:	41 5c                	pop    %r12
   31ca9:	c3                   	ret
   31caa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000031cb0 <_ZN4rtvc9VulkanApp14findMemoryTypeEjj>:
                                   VkMemoryPropertyFlags propFlags) {
   31cb0:	41 54                	push   %r12
   31cb2:	55                   	push   %rbp
   31cb3:	89 d5                	mov    %edx,%ebp
   31cb5:	53                   	push   %rbx
   31cb6:	89 f3                	mov    %esi,%ebx
   31cb8:	48 81 ec 10 02 00 00 	sub    $0x210,%rsp
  vkGetPhysicalDeviceMemoryProperties(device.physical(), &memoryProperties);
   31cbf:	48 8b bf 50 01 00 00 	mov    0x150(%rdi),%rdi
   31cc6:	49 89 e4             	mov    %rsp,%r12
   31cc9:	4c 89 e6             	mov    %r12,%rsi
   31ccc:	e8 8f 4c fd ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
  for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   31cd1:	8b 34 24             	mov    (%rsp),%esi
   31cd4:	85 f6                	test   %esi,%esi
   31cd6:	0f 84 38 66 fd ff    	je     8314 <_ZN4rtvc9VulkanApp14findMemoryTypeEjj.cold>
   31cdc:	31 c9                	xor    %ecx,%ecx
    if (typeFilter & (1 << i) &&
   31cde:	bf 01 00 00 00       	mov    $0x1,%edi
   31ce3:	eb 10                	jmp    31cf5 <_ZN4rtvc9VulkanApp14findMemoryTypeEjj+0x45>
   31ce5:	0f 1f 00             	nopl   (%rax)
  for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   31ce8:	48 83 c1 01          	add    $0x1,%rcx
   31cec:	48 39 f1             	cmp    %rsi,%rcx
   31cef:	0f 84 1f 66 fd ff    	je     8314 <_ZN4rtvc9VulkanApp14findMemoryTypeEjj.cold>
    if (typeFilter & (1 << i) &&
   31cf5:	89 f8                	mov    %edi,%eax
   31cf7:	d3 e0                	shl    %cl,%eax
   31cf9:	85 d8                	test   %ebx,%eax
   31cfb:	74 eb                	je     31ce8 <_ZN4rtvc9VulkanApp14findMemoryTypeEjj+0x38>
        (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
   31cfd:	41 8b 44 cc 04       	mov    0x4(%r12,%rcx,8),%eax
   31d02:	21 e8                	and    %ebp,%eax
    if (typeFilter & (1 << i) &&
   31d04:	39 e8                	cmp    %ebp,%eax
   31d06:	75 e0                	jne    31ce8 <_ZN4rtvc9VulkanApp14findMemoryTypeEjj+0x38>
}
   31d08:	48 81 c4 10 02 00 00 	add    $0x210,%rsp
   31d0f:	89 c8                	mov    %ecx,%eax
   31d11:	5b                   	pop    %rbx
   31d12:	5d                   	pop    %rbp
   31d13:	41 5c                	pop    %r12
   31d15:	c3                   	ret
   31d16:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   31d1d:	00 00 00 

0000000000031d20 <_ZN4rtvc9VulkanApp16makeVertexBufferEv>:
vkw::Buffer VulkanApp::makeVertexBuffer() {
   31d20:	41 57                	push   %r15
      : _device{device} {
   31d22:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   31d26:	31 d2                	xor    %edx,%edx
   31d28:	41 56                	push   %r14
   31d2a:	41 55                	push   %r13
   31d2c:	49 89 f5             	mov    %rsi,%r13
   31d2f:	41 54                	push   %r12
   31d31:	49 89 fc             	mov    %rdi,%r12
   31d34:	55                   	push   %rbp
   31d35:	53                   	push   %rbx
   31d36:	48 81 ec f8 02 00 00 	sub    $0x2f8,%rsp
                                VK_MEMORY_PROPERTY_HOST_COHERENT_BIT};
   31d3d:	48 8b 86 50 01 00 00 	mov    0x150(%rsi),%rax
   31d44:	48 8b ae 48 01 00 00 	mov    0x148(%rsi),%rbp
   31d4b:	4c 8b 35 d6 f9 00 00 	mov    0xf9d6(%rip),%r14        # 41728 <_ZN6shader19triangle_index_dataE+0x8>
      : _device{device} {
   31d52:	0f 11 84 24 c8 00 00 	movups %xmm0,0xc8(%rsp)
   31d59:	00 
    VkBufferCreateInfo bufferInfo{};
   31d5a:	66 0f ef c0          	pxor   %xmm0,%xmm0
   31d5e:	4c 2b 35 bb f9 00 00 	sub    0xf9bb(%rip),%r14        # 41720 <_ZN6shader19triangle_index_dataE>
   31d65:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
      : _device{device} {
   31d6a:	48 8d 05 bf e8 00 00 	lea    0xe8bf(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   31d71:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
   31d78:	00 
   31d79:	48 89 ef             	mov    %rbp,%rdi
      : _device{device} {
   31d7c:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   31d83:	00 
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   31d84:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
   31d89:	48 89 c6             	mov    %rax,%rsi
   31d8c:	48 89 04 24          	mov    %rax,(%rsp)
    VkBufferCreateInfo bufferInfo{};
   31d90:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
      : _device{device} {
   31d95:	48 89 ac 24 b0 00 00 	mov    %rbp,0xb0(%rsp)
   31d9c:	00 
   31d9d:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
   31da4:	00 00 00 00 00 
   31da9:	c6 84 24 d8 00 00 00 	movb   $0x0,0xd8(%rsp)
   31db0:	00 
    VkBufferCreateInfo bufferInfo{};
   31db1:	c7 84 24 94 00 00 00 	movl   $0x0,0x94(%rsp)
   31db8:	00 00 00 00 
    bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
   31dbc:	c7 44 24 60 0c 00 00 	movl   $0xc,0x60(%rsp)
   31dc3:	00 
    bufferInfo.size = size;
   31dc4:	4c 89 74 24 78       	mov    %r14,0x78(%rsp)
    bufferInfo.usage = usage;
   31dc9:	c7 84 24 80 00 00 00 	movl   $0x1,0x80(%rsp)
   31dd0:	01 00 00 00 
    VkBufferCreateInfo bufferInfo{};
   31dd4:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   31dd9:	0f 11 84 24 84 00 00 	movups %xmm0,0x84(%rsp)
   31de0:	00 
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   31de1:	e8 2a 47 fd ff       	call   6510 <vkCreateBuffer@plt>
   31de6:	85 c0                	test   %eax,%eax
   31de8:	0f 85 43 67 fd ff    	jne    8531 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x1d7>
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
   31dee:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   31df5:	00 
   31df6:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
   31dfb:	48 89 ef             	mov    %rbp,%rdi
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   31dfe:	48 8d 9c 24 e0 00 00 	lea    0xe0(%rsp),%rbx
   31e05:	00 
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
   31e06:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   31e0b:	e8 a0 42 fd ff       	call   60b0 <vkGetBufferMemoryRequirements@plt>
    allocInfo.allocationSize = memoryRequirements.size;
   31e10:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   31e15:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   31e1a:	48 89 de             	mov    %rbx,%rsi
    VkMemoryAllocateInfo allocInfo{};
   31e1d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
   31e21:	c7 44 24 40 05 00 00 	movl   $0x5,0x40(%rsp)
   31e28:	00 
    allocInfo.memoryTypeIndex = _findMemoryType(
   31e29:	44 8b 7c 24 30       	mov    0x30(%rsp),%r15d
    VkMemoryAllocateInfo allocInfo{};
   31e2e:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
   31e33:	0f 11 44 24 50       	movups %xmm0,0x50(%rsp)
    allocInfo.allocationSize = memoryRequirements.size;
   31e38:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   31e3d:	e8 1e 4b fd ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   31e42:	8b 94 24 e0 00 00 00 	mov    0xe0(%rsp),%edx
   31e49:	85 d2                	test   %edx,%edx
   31e4b:	0f 84 ae 66 fd ff    	je     84ff <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x1a5>
   31e51:	31 c9                	xor    %ecx,%ecx
      if (typeFilter & (1 << i) &&
   31e53:	be 01 00 00 00       	mov    $0x1,%esi
   31e58:	eb 13                	jmp    31e6d <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x14d>
   31e5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   31e60:	48 83 c1 01          	add    $0x1,%rcx
   31e64:	48 39 ca             	cmp    %rcx,%rdx
   31e67:	0f 84 92 66 fd ff    	je     84ff <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x1a5>
      if (typeFilter & (1 << i) &&
   31e6d:	89 f0                	mov    %esi,%eax
   31e6f:	d3 e0                	shl    %cl,%eax
   31e71:	44 85 f8             	test   %r15d,%eax
   31e74:	74 ea                	je     31e60 <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x140>
          (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
   31e76:	8b 44 cb 04          	mov    0x4(%rbx,%rcx,8),%eax
   31e7a:	83 e0 06             	and    $0x6,%eax
      if (typeFilter & (1 << i) &&
   31e7d:	83 f8 06             	cmp    $0x6,%eax
   31e80:	75 de                	jne    31e60 <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x140>
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   31e82:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
    allocInfo.memoryTypeIndex = _findMemoryType(
   31e87:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   31e8b:	31 d2                	xor    %edx,%edx
   31e8d:	48 89 ef             	mov    %rbp,%rdi
   31e90:	48 8d 8c 24 b8 00 00 	lea    0xb8(%rsp),%rcx
   31e97:	00 
   31e98:	48 89 c6             	mov    %rax,%rsi
   31e9b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   31ea0:	e8 2b 4b fd ff       	call   69d0 <vkAllocateMemory@plt>
   31ea5:	85 c0                	test   %eax,%eax
   31ea7:	0f 85 c0 03 00 00    	jne    3226d <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x54d>
    vkBindBufferMemory(device, _buffer, _deviceMemory, 0);
   31ead:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
   31eb4:	00 
   31eb5:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   31ebc:	00 
   31ebd:	48 89 ef             	mov    %rbp,%rdi
   31ec0:	31 c9                	xor    %ecx,%ecx
   31ec2:	e8 99 47 fd ff       	call   6660 <vkBindBufferMemory@plt>
    vkMapMemory(_device, _deviceMemory, _memoryOffset, size, flags, &data);
   31ec7:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
   31ecc:	45 31 c0             	xor    %r8d,%r8d
   31ecf:	4c 89 f1             	mov    %r14,%rcx
   31ed2:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   31ed9:	00 
   31eda:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   31ee1:	00 
    _isOwner = true;
   31ee2:	c6 84 24 d8 00 00 00 	movb   $0x1,0xd8(%rsp)
   31ee9:	01 
    vkMapMemory(_device, _deviceMemory, _memoryOffset, size, flags, &data);
   31eea:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   31ef1:	00 
      { return _M_data_ptr(this->_M_impl._M_start); }
   31ef2:	48 8b 2d 27 f8 00 00 	mov    0xf827(%rip),%rbp        # 41720 <_ZN6shader19triangle_index_dataE>
   31ef9:	e8 a2 45 fd ff       	call   64a0 <vkMapMemory@plt>
    std::memcpy(data, pHostData, size);
   31efe:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   31f03:	48 89 ee             	mov    %rbp,%rsi
   31f06:	4c 89 f2             	mov    %r14,%rdx
   31f09:	e8 02 45 fd ff       	call   6410 <memcpy@plt>
    vkUnmapMemory(_device, _deviceMemory);
   31f0e:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   31f15:	00 
   31f16:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   31f1d:	00 
   31f1e:	e8 dd 44 fd ff       	call   6400 <vkUnmapMemory@plt>
      : _device{device} {
   31f23:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   31f27:	48 8b 34 24          	mov    (%rsp),%rsi
   31f2b:	49 8d 4c 24 08       	lea    0x8(%r12),%rcx
   31f30:	31 d2                	xor    %edx,%edx
                        VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT};
   31f32:	49 8b 85 50 01 00 00 	mov    0x150(%r13),%rax
   31f39:	4d 8b bd 48 01 00 00 	mov    0x148(%r13),%r15
      : _device{device} {
   31f40:	49 c7 44 24 20 00 00 	movq   $0x0,0x20(%r12)
   31f47:	00 00 
   31f49:	41 c6 44 24 38 00    	movb   $0x0,0x38(%r12)
   31f4f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   31f54:	48 8d 05 d5 e6 00 00 	lea    0xe6d5(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   31f5b:	4c 89 ff             	mov    %r15,%rdi
      : _device{device} {
   31f5e:	49 89 04 24          	mov    %rax,(%r12)
   31f62:	4d 89 7c 24 10       	mov    %r15,0x10(%r12)
   31f67:	41 0f 11 44 24 28    	movups %xmm0,0x28(%r12)
    VkBufferCreateInfo bufferInfo{};
   31f6d:	66 0f ef c0          	pxor   %xmm0,%xmm0
   31f71:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
   31f76:	c7 84 24 94 00 00 00 	movl   $0x0,0x94(%rsp)
   31f7d:	00 00 00 00 
    bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
   31f81:	c7 44 24 60 0c 00 00 	movl   $0xc,0x60(%rsp)
   31f88:	00 
    bufferInfo.size = size;
   31f89:	4c 89 74 24 78       	mov    %r14,0x78(%rsp)
    bufferInfo.usage = usage;
   31f8e:	c7 84 24 80 00 00 00 	movl   $0x82,0x80(%rsp)
   31f95:	82 00 00 00 
    VkBufferCreateInfo bufferInfo{};
   31f99:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   31f9e:	0f 11 84 24 84 00 00 	movups %xmm0,0x84(%rsp)
   31fa5:	00 
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   31fa6:	e8 65 45 fd ff       	call   6510 <vkCreateBuffer@plt>
   31fab:	85 c0                	test   %eax,%eax
   31fad:	0f 85 cc 64 fd ff    	jne    847f <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x125>
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
   31fb3:	49 8b 74 24 08       	mov    0x8(%r12),%rsi
   31fb8:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   31fbd:	4c 89 ff             	mov    %r15,%rdi
   31fc0:	e8 eb 40 fd ff       	call   60b0 <vkGetBufferMemoryRequirements@plt>
    allocInfo.allocationSize = memoryRequirements.size;
   31fc5:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    VkMemoryAllocateInfo allocInfo{};
   31fca:	66 0f ef c0          	pxor   %xmm0,%xmm0
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   31fce:	48 89 de             	mov    %rbx,%rsi
    allocInfo.memoryTypeIndex = _findMemoryType(
   31fd1:	8b 6c 24 30          	mov    0x30(%rsp),%ebp
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   31fd5:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    VkMemoryAllocateInfo allocInfo{};
   31fda:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
    allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
   31fdf:	c7 44 24 40 05 00 00 	movl   $0x5,0x40(%rsp)
   31fe6:	00 
    VkMemoryAllocateInfo allocInfo{};
   31fe7:	0f 11 44 24 50       	movups %xmm0,0x50(%rsp)
    allocInfo.allocationSize = memoryRequirements.size;
   31fec:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   31ff1:	e8 6a 49 fd ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   31ff6:	8b 94 24 e0 00 00 00 	mov    0xe0(%rsp),%edx
   31ffd:	85 d2                	test   %edx,%edx
   31fff:	0f 84 48 64 fd ff    	je     844d <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0xf3>
   32005:	31 c9                	xor    %ecx,%ecx
      if (typeFilter & (1 << i) &&
   32007:	be 01 00 00 00       	mov    $0x1,%esi
   3200c:	eb 0f                	jmp    3201d <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x2fd>
   3200e:	66 90                	xchg   %ax,%ax
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   32010:	48 83 c1 01          	add    $0x1,%rcx
   32014:	48 39 ca             	cmp    %rcx,%rdx
   32017:	0f 84 30 64 fd ff    	je     844d <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0xf3>
      if (typeFilter & (1 << i) &&
   3201d:	89 f0                	mov    %esi,%eax
   3201f:	d3 e0                	shl    %cl,%eax
   32021:	85 e8                	test   %ebp,%eax
   32023:	74 eb                	je     32010 <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x2f0>
   32025:	f6 44 cb 04 01       	testb  $0x1,0x4(%rbx,%rcx,8)
   3202a:	74 e4                	je     32010 <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x2f0>
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   3202c:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    allocInfo.memoryTypeIndex = _findMemoryType(
   32031:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   32035:	31 d2                	xor    %edx,%edx
   32037:	49 8d 4c 24 18       	lea    0x18(%r12),%rcx
   3203c:	4c 89 ff             	mov    %r15,%rdi
   3203f:	e8 8c 49 fd ff       	call   69d0 <vkAllocateMemory@plt>
   32044:	85 c0                	test   %eax,%eax
   32046:	0f 85 17 02 00 00    	jne    32263 <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x543>
    vkBindBufferMemory(device, _buffer, _deviceMemory, 0);
   3204c:	49 8b 54 24 18       	mov    0x18(%r12),%rdx
   32051:	49 8b 74 24 08       	mov    0x8(%r12),%rsi
   32056:	31 c9                	xor    %ecx,%ecx
   32058:	4c 89 ff             	mov    %r15,%rdi
   3205b:	e8 00 46 fd ff       	call   6660 <vkBindBufferMemory@plt>
    _isOwner = true;
   32060:	49 8b 85 90 02 00 00 	mov    0x290(%r13),%rax
   32067:	41 c6 44 24 38 01    	movb   $0x1,0x38(%r12)
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   3206d:	48 89 de             	mov    %rbx,%rsi
   32070:	49 8b bd 98 02 00 00 	mov    0x298(%r13),%rdi
   32077:	48 8b 14 24          	mov    (%rsp),%rdx
    bufferInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
   3207b:	48 c7 84 24 e0 00 00 	movq   $0x28,0xe0(%rsp)
   32082:	00 28 00 00 00 
    bufferInfo.commandPool = _commandPool;
   32087:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
   3208e:	00 
    bufferInfo.level = level;
   3208f:	48 8b 05 d2 58 00 00 	mov    0x58d2(%rip),%rax        # 37968 <_ZSt19piecewise_construct+0x21>
    bufferInfo.pNext = pNext;
   32096:	48 c7 84 24 e8 00 00 	movq   $0x0,0xe8(%rsp)
   3209d:	00 00 00 00 00 
  buffer.copyDeviceData(commandPool, device.queue(), stagingBuffer, bufferSize);
   320a2:	49 8b ad 58 01 00 00 	mov    0x158(%r13),%rbp
    bufferInfo.level = level;
   320a9:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
   320b0:	00 
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   320b1:	e8 0a 44 fd ff       	call   64c0 <vkAllocateCommandBuffers@plt>
   320b6:	85 c0                	test   %eax,%eax
   320b8:	0f 85 9b 01 00 00    	jne    32259 <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x539>
    return commandBuffer;
   320be:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    VkCommandBufferBeginInfo commandBufferInfo{};
   320c3:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkBeginCommandBuffer(commandBuffer, &commandBufferInfo) != VK_SUCCESS) {
   320c7:	48 89 de             	mov    %rbx,%rsi
    VkCommandBufferBeginInfo commandBufferInfo{};
   320ca:	c7 84 24 f4 00 00 00 	movl   $0x0,0xf4(%rsp)
   320d1:	00 00 00 00 
   320d5:	0f 11 84 24 e4 00 00 	movups %xmm0,0xe4(%rsp)
   320dc:	00 
        commandPool.allocateBuffer(VK_COMMAND_BUFFER_LEVEL_PRIMARY);
   320dd:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
    commandBufferInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
   320e2:	c7 84 24 e0 00 00 00 	movl   $0x2a,0xe0(%rsp)
   320e9:	2a 00 00 00 
    commandBufferInfo.flags = flags;
   320ed:	c7 84 24 f0 00 00 00 	movl   $0x1,0xf0(%rsp)
   320f4:	01 00 00 00 
    commandBufferInfo.pInheritanceInfo = pInheritanceInfo;
   320f8:	48 c7 84 24 f8 00 00 	movq   $0x0,0xf8(%rsp)
   320ff:	00 00 00 00 00 
    if (vkBeginCommandBuffer(commandBuffer, &commandBufferInfo) != VK_SUCCESS) {
   32104:	e8 47 44 fd ff       	call   6550 <vkBeginCommandBuffer@plt>
   32109:	85 c0                	test   %eax,%eax
   3210b:	0f 85 43 01 00 00    	jne    32254 <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x534>
    vkCmdCopyBuffer(commandBuffer, src.ref(), _buffer, 1, &copyRegion);
   32111:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
   32116:	4c 8b 04 24          	mov    (%rsp),%r8
   3211a:	b9 01 00 00 00       	mov    $0x1,%ecx
    copyRegion.size = size;
   3211f:	4c 89 74 24 70       	mov    %r14,0x70(%rsp)
    copyRegion.srcOffset = src._memoryOffset;
   32124:	f3 0f 7e 84 24 c0 00 	movq   0xc0(%rsp),%xmm0
   3212b:	00 00 
    vkCmdCopyBuffer(commandBuffer, src.ref(), _buffer, 1, &copyRegion);
   3212d:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   32134:	00 
   32135:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
    copyRegion.srcOffset = src._memoryOffset;
   3213a:	41 0f 16 44 24 20    	movhps 0x20(%r12),%xmm0
   32140:	0f 29 44 24 60       	movaps %xmm0,0x60(%rsp)
    vkCmdCopyBuffer(commandBuffer, src.ref(), _buffer, 1, &copyRegion);
   32145:	e8 06 47 fd ff       	call   6850 <vkCmdCopyBuffer@plt>
    if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
   3214a:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
   3214f:	e8 cc 49 fd ff       	call   6b20 <vkEndCommandBuffer@plt>
   32154:	85 c0                	test   %eax,%eax
   32156:	0f 85 fe 61 fd ff    	jne    835a <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold>
    submitInfo.pCommandBuffers = &commandBuffer;
   3215c:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
    VkSubmitInfo submitInfo{};
   32161:	66 0f ef c0          	pxor   %xmm0,%xmm0
    vkQueueSubmit(queue, 1, pSubmit, fence);
   32165:	31 c9                	xor    %ecx,%ecx
   32167:	48 89 da             	mov    %rbx,%rdx
   3216a:	be 01 00 00 00       	mov    $0x1,%esi
   3216f:	48 89 ef             	mov    %rbp,%rdi
   32172:	0f 11 84 24 04 01 00 	movups %xmm0,0x104(%rsp)
   32179:	00 
   3217a:	0f 11 84 24 14 01 00 	movups %xmm0,0x114(%rsp)
   32181:	00 
   32182:	c7 84 24 24 01 00 00 	movl   $0x0,0x124(%rsp)
   32189:	00 00 00 00 
    submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
   3218d:	c7 84 24 e0 00 00 00 	movl   $0x4,0xe0(%rsp)
   32194:	04 00 00 00 
    submitInfo.commandBufferCount = 1;
   32198:	c7 84 24 08 01 00 00 	movl   $0x1,0x108(%rsp)
   3219f:	01 00 00 00 
    submitInfo.pCommandBuffers = &commandBuffer;
   321a3:	4c 89 b4 24 10 01 00 	mov    %r14,0x110(%rsp)
   321aa:	00 
    VkSubmitInfo submitInfo{};
   321ab:	0f 11 84 24 e4 00 00 	movups %xmm0,0xe4(%rsp)
   321b2:	00 
   321b3:	0f 11 84 24 f4 00 00 	movups %xmm0,0xf4(%rsp)
   321ba:	00 
   321bb:	e8 90 45 fd ff       	call   6750 <vkQueueSubmit@plt>
      vkQueueWaitIdle(queue);
   321c0:	48 89 ef             	mov    %rbp,%rdi
   321c3:	e8 78 48 fd ff       	call   6a40 <vkQueueWaitIdle@plt>
    vkFreeCommandBuffers(_device, _commandPool, 1, &commandBuffer);
   321c8:	49 8b b5 90 02 00 00 	mov    0x290(%r13),%rsi
   321cf:	49 8b bd 98 02 00 00 	mov    0x298(%r13),%rdi
   321d6:	4c 89 f1             	mov    %r14,%rcx
   321d9:	ba 01 00 00 00       	mov    $0x1,%edx
   321de:	e8 bd 41 fd ff       	call   63a0 <vkFreeCommandBuffers@plt>
  virtual ~Buffer() { _destroyVkData(); }
   321e3:	48 8d 05 46 e4 00 00 	lea    0xe446(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
   321ea:	80 bc 24 d8 00 00 00 	cmpb   $0x0,0xd8(%rsp)
   321f1:	00 
  virtual ~Buffer() { _destroyVkData(); }
   321f2:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   321f9:	00 
    if (_isOwner) {
   321fa:	75 1c                	jne    32218 <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x4f8>
}
   321fc:	48 81 c4 f8 02 00 00 	add    $0x2f8,%rsp
   32203:	4c 89 e0             	mov    %r12,%rax
   32206:	5b                   	pop    %rbx
   32207:	5d                   	pop    %rbp
   32208:	41 5c                	pop    %r12
   3220a:	41 5d                	pop    %r13
   3220c:	41 5e                	pop    %r14
   3220e:	41 5f                	pop    %r15
   32210:	c3                   	ret
   32211:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
   32218:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
   3221f:	00 
   32220:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   32227:	00 
   32228:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   3222f:	00 
   32230:	e8 2b 40 fd ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
   32235:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
   3223c:	00 
   3223d:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   32244:	00 
   32245:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   3224c:	00 
   3224d:	e8 5e 42 fd ff       	call   64b0 <vkFreeMemory@plt>
  return buffer;
   32252:	eb a8                	jmp    321fc <_ZN4rtvc9VulkanApp16makeVertexBufferEv+0x4dc>
   32254:	e9 33 61 fd ff       	jmp    838c <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x32>
   32259:	e9 60 61 fd ff       	jmp    83be <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x64>
   3225e:	e9 e3 61 fd ff       	jmp    8446 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0xec>
   32263:	e9 49 62 fd ff       	jmp    84b1 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x157>
   32268:	e9 88 62 fd ff       	jmp    84f5 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x19b>
   3226d:	e9 f1 62 fd ff       	jmp    8563 <_ZN4rtvc9VulkanApp16makeVertexBufferEv.cold+0x209>
   32272:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   32279:	00 00 00 00 
   3227d:	0f 1f 00             	nopl   (%rax)

0000000000032280 <_ZN4rtvc9VulkanApp15makeIndexBufferEv>:
vkw::Buffer VulkanApp::makeIndexBuffer() {
   32280:	41 57                	push   %r15
      : _device{device} {
   32282:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   32286:	31 d2                	xor    %edx,%edx
   32288:	41 56                	push   %r14
   3228a:	41 55                	push   %r13
   3228c:	49 89 f5             	mov    %rsi,%r13
   3228f:	41 54                	push   %r12
   32291:	49 89 fc             	mov    %rdi,%r12
   32294:	55                   	push   %rbp
   32295:	53                   	push   %rbx
   32296:	48 81 ec f8 02 00 00 	sub    $0x2f8,%rsp
                                   VK_MEMORY_PROPERTY_HOST_COHERENT_BIT};
   3229d:	48 8b 86 50 01 00 00 	mov    0x150(%rsi),%rax
   322a4:	48 8b ae 48 01 00 00 	mov    0x148(%rsi),%rbp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   322ab:	4c 8b 35 96 f4 00 00 	mov    0xf496(%rip),%r14        # 41748 <_ZN6shader16triangle_indicesE+0x8>
      : _device{device} {
   322b2:	0f 11 84 24 c8 00 00 	movups %xmm0,0xc8(%rsp)
   322b9:	00 
    VkBufferCreateInfo bufferInfo{};
   322ba:	66 0f ef c0          	pxor   %xmm0,%xmm0
   322be:	4c 2b 35 7b f4 00 00 	sub    0xf47b(%rip),%r14        # 41740 <_ZN6shader16triangle_indicesE>
   322c5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
      : _device{device} {
   322ca:	48 8d 05 5f e3 00 00 	lea    0xe35f(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   322d1:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
   322d8:	00 
   322d9:	48 89 ef             	mov    %rbp,%rdi
      : _device{device} {
   322dc:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   322e3:	00 
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   322e4:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
   322e9:	48 89 c6             	mov    %rax,%rsi
   322ec:	48 89 04 24          	mov    %rax,(%rsp)
    VkBufferCreateInfo bufferInfo{};
   322f0:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
      : _device{device} {
   322f5:	48 89 ac 24 b0 00 00 	mov    %rbp,0xb0(%rsp)
   322fc:	00 
   322fd:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
   32304:	00 00 00 00 00 
   32309:	c6 84 24 d8 00 00 00 	movb   $0x0,0xd8(%rsp)
   32310:	00 
    VkBufferCreateInfo bufferInfo{};
   32311:	c7 84 24 94 00 00 00 	movl   $0x0,0x94(%rsp)
   32318:	00 00 00 00 
    bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
   3231c:	c7 44 24 60 0c 00 00 	movl   $0xc,0x60(%rsp)
   32323:	00 
    bufferInfo.size = size;
   32324:	4c 89 74 24 78       	mov    %r14,0x78(%rsp)
    bufferInfo.usage = usage;
   32329:	c7 84 24 80 00 00 00 	movl   $0x1,0x80(%rsp)
   32330:	01 00 00 00 
    VkBufferCreateInfo bufferInfo{};
   32334:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   32339:	0f 11 84 24 84 00 00 	movups %xmm0,0x84(%rsp)
   32340:	00 
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   32341:	e8 ca 41 fd ff       	call   6510 <vkCreateBuffer@plt>
   32346:	85 c0                	test   %eax,%eax
   32348:	0f 85 57 64 fd ff    	jne    87a5 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x1d7>
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
   3234e:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   32355:	00 
   32356:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
   3235b:	48 89 ef             	mov    %rbp,%rdi
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   3235e:	48 8d 9c 24 e0 00 00 	lea    0xe0(%rsp),%rbx
   32365:	00 
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
   32366:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
   3236b:	e8 40 3d fd ff       	call   60b0 <vkGetBufferMemoryRequirements@plt>
    allocInfo.allocationSize = memoryRequirements.size;
   32370:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   32375:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   3237a:	48 89 de             	mov    %rbx,%rsi
    VkMemoryAllocateInfo allocInfo{};
   3237d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
   32381:	c7 44 24 40 05 00 00 	movl   $0x5,0x40(%rsp)
   32388:	00 
    allocInfo.memoryTypeIndex = _findMemoryType(
   32389:	44 8b 7c 24 30       	mov    0x30(%rsp),%r15d
    VkMemoryAllocateInfo allocInfo{};
   3238e:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
   32393:	0f 11 44 24 50       	movups %xmm0,0x50(%rsp)
    allocInfo.allocationSize = memoryRequirements.size;
   32398:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   3239d:	e8 be 45 fd ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   323a2:	8b 94 24 e0 00 00 00 	mov    0xe0(%rsp),%edx
   323a9:	85 d2                	test   %edx,%edx
   323ab:	0f 84 c2 63 fd ff    	je     8773 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x1a5>
   323b1:	31 c9                	xor    %ecx,%ecx
      if (typeFilter & (1 << i) &&
   323b3:	be 01 00 00 00       	mov    $0x1,%esi
   323b8:	eb 13                	jmp    323cd <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x14d>
   323ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   323c0:	48 83 c1 01          	add    $0x1,%rcx
   323c4:	48 39 ca             	cmp    %rcx,%rdx
   323c7:	0f 84 a6 63 fd ff    	je     8773 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x1a5>
      if (typeFilter & (1 << i) &&
   323cd:	89 f0                	mov    %esi,%eax
   323cf:	d3 e0                	shl    %cl,%eax
   323d1:	44 85 f8             	test   %r15d,%eax
   323d4:	74 ea                	je     323c0 <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x140>
          (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
   323d6:	8b 44 cb 04          	mov    0x4(%rbx,%rcx,8),%eax
   323da:	83 e0 06             	and    $0x6,%eax
      if (typeFilter & (1 << i) &&
   323dd:	83 f8 06             	cmp    $0x6,%eax
   323e0:	75 de                	jne    323c0 <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x140>
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   323e2:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
    allocInfo.memoryTypeIndex = _findMemoryType(
   323e7:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   323eb:	31 d2                	xor    %edx,%edx
   323ed:	48 89 ef             	mov    %rbp,%rdi
   323f0:	48 8d 8c 24 b8 00 00 	lea    0xb8(%rsp),%rcx
   323f7:	00 
   323f8:	48 89 c6             	mov    %rax,%rsi
   323fb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   32400:	e8 cb 45 fd ff       	call   69d0 <vkAllocateMemory@plt>
   32405:	85 c0                	test   %eax,%eax
   32407:	0f 85 c0 03 00 00    	jne    327cd <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x54d>
    vkBindBufferMemory(device, _buffer, _deviceMemory, 0);
   3240d:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
   32414:	00 
   32415:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   3241c:	00 
   3241d:	48 89 ef             	mov    %rbp,%rdi
   32420:	31 c9                	xor    %ecx,%ecx
   32422:	e8 39 42 fd ff       	call   6660 <vkBindBufferMemory@plt>
    vkMapMemory(_device, _deviceMemory, _memoryOffset, size, flags, &data);
   32427:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
   3242c:	45 31 c0             	xor    %r8d,%r8d
   3242f:	4c 89 f1             	mov    %r14,%rcx
   32432:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   32439:	00 
   3243a:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   32441:	00 
    _isOwner = true;
   32442:	c6 84 24 d8 00 00 00 	movb   $0x1,0xd8(%rsp)
   32449:	01 
    vkMapMemory(_device, _deviceMemory, _memoryOffset, size, flags, &data);
   3244a:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   32451:	00 
      { return _M_data_ptr(this->_M_impl._M_start); }
   32452:	48 8b 2d e7 f2 00 00 	mov    0xf2e7(%rip),%rbp        # 41740 <_ZN6shader16triangle_indicesE>
   32459:	e8 42 40 fd ff       	call   64a0 <vkMapMemory@plt>
    std::memcpy(data, pHostData, size);
   3245e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   32463:	48 89 ee             	mov    %rbp,%rsi
   32466:	4c 89 f2             	mov    %r14,%rdx
   32469:	e8 a2 3f fd ff       	call   6410 <memcpy@plt>
    vkUnmapMemory(_device, _deviceMemory);
   3246e:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   32475:	00 
   32476:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   3247d:	00 
   3247e:	e8 7d 3f fd ff       	call   6400 <vkUnmapMemory@plt>
      : _device{device} {
   32483:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   32487:	48 8b 34 24          	mov    (%rsp),%rsi
   3248b:	49 8d 4c 24 08       	lea    0x8(%r12),%rcx
   32490:	31 d2                	xor    %edx,%edx
                        VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT};
   32492:	49 8b 85 50 01 00 00 	mov    0x150(%r13),%rax
   32499:	4d 8b bd 48 01 00 00 	mov    0x148(%r13),%r15
      : _device{device} {
   324a0:	49 c7 44 24 20 00 00 	movq   $0x0,0x20(%r12)
   324a7:	00 00 
   324a9:	41 c6 44 24 38 00    	movb   $0x0,0x38(%r12)
   324af:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   324b4:	48 8d 05 75 e1 00 00 	lea    0xe175(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   324bb:	4c 89 ff             	mov    %r15,%rdi
      : _device{device} {
   324be:	49 89 04 24          	mov    %rax,(%r12)
   324c2:	4d 89 7c 24 10       	mov    %r15,0x10(%r12)
   324c7:	41 0f 11 44 24 28    	movups %xmm0,0x28(%r12)
    VkBufferCreateInfo bufferInfo{};
   324cd:	66 0f ef c0          	pxor   %xmm0,%xmm0
   324d1:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
   324d6:	c7 84 24 94 00 00 00 	movl   $0x0,0x94(%rsp)
   324dd:	00 00 00 00 
    bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
   324e1:	c7 44 24 60 0c 00 00 	movl   $0xc,0x60(%rsp)
   324e8:	00 
    bufferInfo.size = size;
   324e9:	4c 89 74 24 78       	mov    %r14,0x78(%rsp)
    bufferInfo.usage = usage;
   324ee:	c7 84 24 80 00 00 00 	movl   $0x42,0x80(%rsp)
   324f5:	42 00 00 00 
    VkBufferCreateInfo bufferInfo{};
   324f9:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   324fe:	0f 11 84 24 84 00 00 	movups %xmm0,0x84(%rsp)
   32505:	00 
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   32506:	e8 05 40 fd ff       	call   6510 <vkCreateBuffer@plt>
   3250b:	85 c0                	test   %eax,%eax
   3250d:	0f 85 e0 61 fd ff    	jne    86f3 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x125>
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
   32513:	49 8b 74 24 08       	mov    0x8(%r12),%rsi
   32518:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   3251d:	4c 89 ff             	mov    %r15,%rdi
   32520:	e8 8b 3b fd ff       	call   60b0 <vkGetBufferMemoryRequirements@plt>
    allocInfo.allocationSize = memoryRequirements.size;
   32525:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    VkMemoryAllocateInfo allocInfo{};
   3252a:	66 0f ef c0          	pxor   %xmm0,%xmm0
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   3252e:	48 89 de             	mov    %rbx,%rsi
    allocInfo.memoryTypeIndex = _findMemoryType(
   32531:	8b 6c 24 30          	mov    0x30(%rsp),%ebp
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   32535:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    VkMemoryAllocateInfo allocInfo{};
   3253a:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
    allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
   3253f:	c7 44 24 40 05 00 00 	movl   $0x5,0x40(%rsp)
   32546:	00 
    VkMemoryAllocateInfo allocInfo{};
   32547:	0f 11 44 24 50       	movups %xmm0,0x50(%rsp)
    allocInfo.allocationSize = memoryRequirements.size;
   3254c:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   32551:	e8 0a 44 fd ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   32556:	8b 94 24 e0 00 00 00 	mov    0xe0(%rsp),%edx
   3255d:	85 d2                	test   %edx,%edx
   3255f:	0f 84 5c 61 fd ff    	je     86c1 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0xf3>
   32565:	31 c9                	xor    %ecx,%ecx
      if (typeFilter & (1 << i) &&
   32567:	be 01 00 00 00       	mov    $0x1,%esi
   3256c:	eb 0f                	jmp    3257d <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x2fd>
   3256e:	66 90                	xchg   %ax,%ax
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   32570:	48 83 c1 01          	add    $0x1,%rcx
   32574:	48 39 ca             	cmp    %rcx,%rdx
   32577:	0f 84 44 61 fd ff    	je     86c1 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0xf3>
      if (typeFilter & (1 << i) &&
   3257d:	89 f0                	mov    %esi,%eax
   3257f:	d3 e0                	shl    %cl,%eax
   32581:	85 e8                	test   %ebp,%eax
   32583:	74 eb                	je     32570 <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x2f0>
   32585:	f6 44 cb 04 01       	testb  $0x1,0x4(%rbx,%rcx,8)
   3258a:	74 e4                	je     32570 <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x2f0>
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   3258c:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    allocInfo.memoryTypeIndex = _findMemoryType(
   32591:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   32595:	31 d2                	xor    %edx,%edx
   32597:	49 8d 4c 24 18       	lea    0x18(%r12),%rcx
   3259c:	4c 89 ff             	mov    %r15,%rdi
   3259f:	e8 2c 44 fd ff       	call   69d0 <vkAllocateMemory@plt>
   325a4:	85 c0                	test   %eax,%eax
   325a6:	0f 85 17 02 00 00    	jne    327c3 <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x543>
    vkBindBufferMemory(device, _buffer, _deviceMemory, 0);
   325ac:	49 8b 54 24 18       	mov    0x18(%r12),%rdx
   325b1:	49 8b 74 24 08       	mov    0x8(%r12),%rsi
   325b6:	31 c9                	xor    %ecx,%ecx
   325b8:	4c 89 ff             	mov    %r15,%rdi
   325bb:	e8 a0 40 fd ff       	call   6660 <vkBindBufferMemory@plt>
    _isOwner = true;
   325c0:	49 8b 85 90 02 00 00 	mov    0x290(%r13),%rax
   325c7:	41 c6 44 24 38 01    	movb   $0x1,0x38(%r12)
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   325cd:	48 89 de             	mov    %rbx,%rsi
   325d0:	49 8b bd 98 02 00 00 	mov    0x298(%r13),%rdi
   325d7:	48 8b 14 24          	mov    (%rsp),%rdx
    bufferInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
   325db:	48 c7 84 24 e0 00 00 	movq   $0x28,0xe0(%rsp)
   325e2:	00 28 00 00 00 
    bufferInfo.commandPool = _commandPool;
   325e7:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
   325ee:	00 
    bufferInfo.level = level;
   325ef:	48 8b 05 72 53 00 00 	mov    0x5372(%rip),%rax        # 37968 <_ZSt19piecewise_construct+0x21>
    bufferInfo.pNext = pNext;
   325f6:	48 c7 84 24 e8 00 00 	movq   $0x0,0xe8(%rsp)
   325fd:	00 00 00 00 00 
  buffer.copyDeviceData(commandPool, device.queue(), stagingBuffer, bufferSize);
   32602:	49 8b ad 58 01 00 00 	mov    0x158(%r13),%rbp
    bufferInfo.level = level;
   32609:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
   32610:	00 
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   32611:	e8 aa 3e fd ff       	call   64c0 <vkAllocateCommandBuffers@plt>
   32616:	85 c0                	test   %eax,%eax
   32618:	0f 85 9b 01 00 00    	jne    327b9 <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x539>
    return commandBuffer;
   3261e:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    VkCommandBufferBeginInfo commandBufferInfo{};
   32623:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkBeginCommandBuffer(commandBuffer, &commandBufferInfo) != VK_SUCCESS) {
   32627:	48 89 de             	mov    %rbx,%rsi
    VkCommandBufferBeginInfo commandBufferInfo{};
   3262a:	c7 84 24 f4 00 00 00 	movl   $0x0,0xf4(%rsp)
   32631:	00 00 00 00 
   32635:	0f 11 84 24 e4 00 00 	movups %xmm0,0xe4(%rsp)
   3263c:	00 
        commandPool.allocateBuffer(VK_COMMAND_BUFFER_LEVEL_PRIMARY);
   3263d:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
    commandBufferInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
   32642:	c7 84 24 e0 00 00 00 	movl   $0x2a,0xe0(%rsp)
   32649:	2a 00 00 00 
    commandBufferInfo.flags = flags;
   3264d:	c7 84 24 f0 00 00 00 	movl   $0x1,0xf0(%rsp)
   32654:	01 00 00 00 
    commandBufferInfo.pInheritanceInfo = pInheritanceInfo;
   32658:	48 c7 84 24 f8 00 00 	movq   $0x0,0xf8(%rsp)
   3265f:	00 00 00 00 00 
    if (vkBeginCommandBuffer(commandBuffer, &commandBufferInfo) != VK_SUCCESS) {
   32664:	e8 e7 3e fd ff       	call   6550 <vkBeginCommandBuffer@plt>
   32669:	85 c0                	test   %eax,%eax
   3266b:	0f 85 43 01 00 00    	jne    327b4 <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x534>
    vkCmdCopyBuffer(commandBuffer, src.ref(), _buffer, 1, &copyRegion);
   32671:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
   32676:	4c 8b 04 24          	mov    (%rsp),%r8
   3267a:	b9 01 00 00 00       	mov    $0x1,%ecx
    copyRegion.size = size;
   3267f:	4c 89 74 24 70       	mov    %r14,0x70(%rsp)
    copyRegion.srcOffset = src._memoryOffset;
   32684:	f3 0f 7e 84 24 c0 00 	movq   0xc0(%rsp),%xmm0
   3268b:	00 00 
    vkCmdCopyBuffer(commandBuffer, src.ref(), _buffer, 1, &copyRegion);
   3268d:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   32694:	00 
   32695:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
    copyRegion.srcOffset = src._memoryOffset;
   3269a:	41 0f 16 44 24 20    	movhps 0x20(%r12),%xmm0
   326a0:	0f 29 44 24 60       	movaps %xmm0,0x60(%rsp)
    vkCmdCopyBuffer(commandBuffer, src.ref(), _buffer, 1, &copyRegion);
   326a5:	e8 a6 41 fd ff       	call   6850 <vkCmdCopyBuffer@plt>
    if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
   326aa:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
   326af:	e8 6c 44 fd ff       	call   6b20 <vkEndCommandBuffer@plt>
   326b4:	85 c0                	test   %eax,%eax
   326b6:	0f 85 12 5f fd ff    	jne    85ce <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold>
    submitInfo.pCommandBuffers = &commandBuffer;
   326bc:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
    VkSubmitInfo submitInfo{};
   326c1:	66 0f ef c0          	pxor   %xmm0,%xmm0
    vkQueueSubmit(queue, 1, pSubmit, fence);
   326c5:	31 c9                	xor    %ecx,%ecx
   326c7:	48 89 da             	mov    %rbx,%rdx
   326ca:	be 01 00 00 00       	mov    $0x1,%esi
   326cf:	48 89 ef             	mov    %rbp,%rdi
   326d2:	0f 11 84 24 04 01 00 	movups %xmm0,0x104(%rsp)
   326d9:	00 
   326da:	0f 11 84 24 14 01 00 	movups %xmm0,0x114(%rsp)
   326e1:	00 
   326e2:	c7 84 24 24 01 00 00 	movl   $0x0,0x124(%rsp)
   326e9:	00 00 00 00 
    submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
   326ed:	c7 84 24 e0 00 00 00 	movl   $0x4,0xe0(%rsp)
   326f4:	04 00 00 00 
    submitInfo.commandBufferCount = 1;
   326f8:	c7 84 24 08 01 00 00 	movl   $0x1,0x108(%rsp)
   326ff:	01 00 00 00 
    submitInfo.pCommandBuffers = &commandBuffer;
   32703:	4c 89 b4 24 10 01 00 	mov    %r14,0x110(%rsp)
   3270a:	00 
    VkSubmitInfo submitInfo{};
   3270b:	0f 11 84 24 e4 00 00 	movups %xmm0,0xe4(%rsp)
   32712:	00 
   32713:	0f 11 84 24 f4 00 00 	movups %xmm0,0xf4(%rsp)
   3271a:	00 
   3271b:	e8 30 40 fd ff       	call   6750 <vkQueueSubmit@plt>
      vkQueueWaitIdle(queue);
   32720:	48 89 ef             	mov    %rbp,%rdi
   32723:	e8 18 43 fd ff       	call   6a40 <vkQueueWaitIdle@plt>
    vkFreeCommandBuffers(_device, _commandPool, 1, &commandBuffer);
   32728:	49 8b b5 90 02 00 00 	mov    0x290(%r13),%rsi
   3272f:	49 8b bd 98 02 00 00 	mov    0x298(%r13),%rdi
   32736:	4c 89 f1             	mov    %r14,%rcx
   32739:	ba 01 00 00 00       	mov    $0x1,%edx
   3273e:	e8 5d 3c fd ff       	call   63a0 <vkFreeCommandBuffers@plt>
  virtual ~Buffer() { _destroyVkData(); }
   32743:	48 8d 05 e6 de 00 00 	lea    0xdee6(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
   3274a:	80 bc 24 d8 00 00 00 	cmpb   $0x0,0xd8(%rsp)
   32751:	00 
  virtual ~Buffer() { _destroyVkData(); }
   32752:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   32759:	00 
    if (_isOwner) {
   3275a:	75 1c                	jne    32778 <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x4f8>
}
   3275c:	48 81 c4 f8 02 00 00 	add    $0x2f8,%rsp
   32763:	4c 89 e0             	mov    %r12,%rax
   32766:	5b                   	pop    %rbx
   32767:	5d                   	pop    %rbp
   32768:	41 5c                	pop    %r12
   3276a:	41 5d                	pop    %r13
   3276c:	41 5e                	pop    %r14
   3276e:	41 5f                	pop    %r15
   32770:	c3                   	ret
   32771:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
   32778:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
   3277f:	00 
   32780:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   32787:	00 
   32788:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   3278f:	00 
   32790:	e8 cb 3a fd ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
   32795:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
   3279c:	00 
   3279d:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   327a4:	00 
   327a5:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   327ac:	00 
   327ad:	e8 fe 3c fd ff       	call   64b0 <vkFreeMemory@plt>
  return buffer;
   327b2:	eb a8                	jmp    3275c <_ZN4rtvc9VulkanApp15makeIndexBufferEv+0x4dc>
   327b4:	e9 47 5e fd ff       	jmp    8600 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x32>
   327b9:	e9 74 5e fd ff       	jmp    8632 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x64>
   327be:	e9 f7 5e fd ff       	jmp    86ba <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0xec>
   327c3:	e9 5d 5f fd ff       	jmp    8725 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x157>
   327c8:	e9 9c 5f fd ff       	jmp    8769 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x19b>
   327cd:	e9 05 60 fd ff       	jmp    87d7 <_ZN4rtvc9VulkanApp15makeIndexBufferEv.cold+0x209>
   327d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   327d9:	00 00 00 00 
   327dd:	0f 1f 00             	nopl   (%rax)

00000000000327e0 <_ZN4rtvc9VulkanApp19updateUniformBufferEj>:
void VulkanApp::updateUniformBuffer(uint32_t currentImage) {
   327e0:	41 54                	push   %r12
   327e2:	55                   	push   %rbp
   327e3:	48 89 fd             	mov    %rdi,%rbp
   327e6:	53                   	push   %rbx
   327e7:	89 f3                	mov    %esi,%ebx
   327e9:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  static const auto startTime = std::chrono::high_resolution_clock::now();
   327f0:	0f b6 05 19 f0 00 00 	movzbl 0xf019(%rip),%eax        # 41810 <_ZGVZN4rtvc9VulkanApp19updateUniformBufferEjE9startTime>
   327f7:	84 c0                	test   %al,%al
   327f9:	0f 84 59 03 00 00    	je     32b58 <_ZN4rtvc9VulkanApp19updateUniformBufferEj+0x378>
  auto currentTime = std::chrono::high_resolution_clock::now();
   327ff:	e8 5c 38 fd ff       	call   6060 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
	  static constexpr _ToDur
	  __cast(const duration<_Rep, _Period>& __d)
	  {
	    typedef typename _ToDur::rep			__to_rep;
	    return _ToDur(static_cast<__to_rep>(
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   32804:	66 0f ef c0          	pxor   %xmm0,%xmm0
   32808:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
   3280d:	48 2b 05 04 f0 00 00 	sub    0xf004(%rip),%rax        # 41818 <_ZZN4rtvc9VulkanApp19updateUniformBufferEjE9startTime>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   32814:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
   32819:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
	return *(this->_M_impl._M_start + __n);
   3281e:	48 c1 e3 06          	shl    $0x6,%rbx
   32822:	f3 0f 5e 05 c6 69 00 	divss  0x69c6(%rip),%xmm0        # 391f0 <_ZTSN4rtvc12FramebuffersE+0xc0>
   32829:	00 
  ubo.model = glm::rotate(glm::mat4(1.0f), time * glm::radians(45.0f),
   3282a:	f3 0f 59 05 c2 69 00 	mulss  0x69c2(%rip),%xmm0        # 391f4 <_ZTSN4rtvc12FramebuffersE+0xc4>
   32831:	00 
   32832:	e8 c9 39 fd ff       	call   6200 <sincosf@plt>
   32837:	f3 0f 10 5c 24 08    	movss  0x8(%rsp),%xmm3
	}

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
   3283d:	66 0f ef d2          	pxor   %xmm2,%xmm2
		T const a = angle;
		T const c = cos(a);
		T const s = sin(a);

		vec<3, T, Q> axis(normalize(v));
		vec<3, T, Q> temp((T(1) - c) * axis);
   32841:	f3 0f 10 3d 43 69 00 	movss  0x6943(%rip),%xmm7        # 3918c <_ZTSN4rtvc12FramebuffersE+0x5c>
   32848:	00 
   32849:	f3 0f 10 64 24 0c    	movss  0xc(%rsp),%xmm4
    vkMapMemory(_device, _deviceMemory, _memoryOffset, size, flags, &data);
   3284f:	4c 8d 4c 24 10       	lea    0x10(%rsp),%r9
   32854:	45 31 c0             	xor    %r8d,%r8d
   32857:	b9 c0 00 00 00       	mov    $0xc0,%ecx
   3285c:	f3 0f 5c fb          	subss  %xmm3,%xmm7

		mat<4, 4, T, Q> Rotate;
		Rotate[0][0] = c + temp[0] * axis[0];
   32860:	44 0f 28 cb          	movaps %xmm3,%xmm9
                              static_cast<float>(swapchain.extent().width) /
   32864:	8b 85 8c 01 00 00    	mov    0x18c(%rbp),%eax
		Rotate[0][1] = temp[0] * axis[1] + s * axis[2];
		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];
   3286a:	44 0f 28 c4          	movaps %xmm4,%xmm8
		Rotate[0][1] = temp[0] * axis[1] + s * axis[2];
   3286e:	44 0f 28 f4          	movaps %xmm4,%xmm14
		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];
   32872:	f3 44 0f 59 c2       	mulss  %xmm2,%xmm8
   32877:	0f 28 c7             	movaps %xmm7,%xmm0
		Rotate[1][1] = c + temp[1] * axis[1];
		Rotate[1][2] = temp[1] * axis[2] + s * axis[0];

		Rotate[2][0] = temp[2] * axis[0] + s * axis[1];
		Rotate[2][1] = temp[2] * axis[1] - s * axis[0];
		Rotate[2][2] = c + temp[2] * axis[2];
   3287a:	f3 0f 58 df          	addss  %xmm7,%xmm3
   3287e:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
		Rotate[0][0] = c + temp[0] * axis[0];
   32882:	0f 28 c8             	movaps %xmm0,%xmm1
		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];
   32885:	0f 28 e8             	movaps %xmm0,%xmm5
		Rotate[1][2] = temp[1] * axis[2] + s * axis[0];
   32888:	f3 41 0f 58 c0       	addss  %xmm8,%xmm0
		Rotate[0][0] = c + temp[0] * axis[0];
   3288d:	f3 0f 59 ca          	mulss  %xmm2,%xmm1
		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];
   32891:	f3 41 0f 5c e8       	subss  %xmm8,%xmm5
	template<typename T, qualifier Q, bool Aligned>
	struct compute_vec4_mul
	{
		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
   32896:	0f 28 f8             	movaps %xmm0,%xmm7
   32899:	f3 0f 59 fa          	mulss  %xmm2,%xmm7
   3289d:	44 0f 28 d5          	movaps %xmm5,%xmm10
			return vec<4, T, Q>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
   328a1:	0f 28 f5             	movaps %xmm5,%xmm6
			return vec<4, T, Q>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
   328a4:	f3 44 0f 59 d2       	mulss  %xmm2,%xmm10
		Rotate[0][1] = temp[0] * axis[1] + s * axis[2];
   328a9:	f3 44 0f 58 f1       	addss  %xmm1,%xmm14
		Rotate[0][0] = c + temp[0] * axis[0];
   328ae:	f3 44 0f 58 c9       	addss  %xmm1,%xmm9
		Rotate[1][0] = temp[1] * axis[0] - s * axis[2];
   328b3:	f3 0f 5c cc          	subss  %xmm4,%xmm1
   328b7:	41 0f 28 e6          	movaps %xmm14,%xmm4
   328bb:	45 0f 28 e9          	movaps %xmm9,%xmm13
			return vec<4, T, Q>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
   328bf:	f3 0f 58 ef          	addss  %xmm7,%xmm5
			return vec<4, T, Q>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
   328c3:	f3 0f 59 e2          	mulss  %xmm2,%xmm4
   328c7:	44 0f 28 e1          	movaps %xmm1,%xmm12
			return vec<4, T, Q>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
   328cb:	45 0f 28 c2          	movaps %xmm10,%xmm8
			return vec<4, T, Q>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
   328cf:	f3 44 0f 59 ea       	mulss  %xmm2,%xmm13
			return vec<4, T, Q>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
   328d4:	f3 44 0f 58 c7       	addss  %xmm7,%xmm8
			return vec<4, T, Q>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
   328d9:	f3 44 0f 59 e2       	mulss  %xmm2,%xmm12
   328de:	f3 0f 59 d3          	mulss  %xmm3,%xmm2
			return vec<4, T, Q>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
   328e2:	f3 41 0f 58 d8       	addss  %xmm8,%xmm3
   328e7:	44 0f 28 fc          	movaps %xmm4,%xmm15
   328eb:	f3 41 0f 58 e1       	addss  %xmm9,%xmm4
   328f0:	f3 45 0f 58 fd       	addss  %xmm13,%xmm15
   328f5:	f3 45 0f 58 f5       	addss  %xmm13,%xmm14
   328fa:	45 0f 28 dd          	movaps %xmm13,%xmm11
   328fe:	f3 45 0f 58 dc       	addss  %xmm12,%xmm11
   32903:	f3 41 0f 58 cd       	addss  %xmm13,%xmm1
   32908:	f3 41 0f 58 e2       	addss  %xmm10,%xmm4
   3290d:	f3 0f 58 ea          	addss  %xmm2,%xmm5
   32911:	f3 45 0f 58 f2       	addss  %xmm10,%xmm14
   32916:	f3 41 0f 58 f7       	addss  %xmm15,%xmm6
   3291b:	f3 45 0f 58 fa       	addss  %xmm10,%xmm15
   32920:	f3 45 0f 58 cc       	addss  %xmm12,%xmm9
   32925:	f3 0f 58 cf          	addss  %xmm7,%xmm1
  ubo.model = glm::rotate(glm::mat4(1.0f), time * glm::radians(45.0f),
   32929:	41 0f 14 e6          	unpcklps %xmm14,%xmm4
   3292d:	41 0f 14 f7          	unpcklps %xmm15,%xmm6
   32931:	f3 44 0f 58 cf       	addss  %xmm7,%xmm9
   32936:	0f 16 e6             	movlhps %xmm6,%xmm4
		assert(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0));

		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);
   32939:	f3 0f 10 35 4b 68 00 	movss  0x684b(%rip),%xmm6        # 3918c <_ZTSN4rtvc12FramebuffersE+0x5c>
   32940:	00 
   32941:	0f 29 64 24 50       	movaps %xmm4,0x50(%rsp)
   32946:	0f 28 e0             	movaps %xmm0,%xmm4
   32949:	f3 41 0f 58 c2       	addss  %xmm10,%xmm0
   3294e:	f3 41 0f 58 e3       	addss  %xmm11,%xmm4
   32953:	f3 44 0f 58 df       	addss  %xmm7,%xmm11
   32958:	41 0f 14 c9          	unpcklps %xmm9,%xmm1
   3295c:	f3 0f 58 c2          	addss  %xmm2,%xmm0
   32960:	f3 41 0f 58 d0       	addss  %xmm8,%xmm2
   32965:	41 0f 14 e3          	unpcklps %xmm11,%xmm4
   32969:	0f 16 cc             	movlhps %xmm4,%xmm1
   3296c:	0f 14 da             	unpcklps %xmm2,%xmm3
   3296f:	0f 14 c5             	unpcklps %xmm5,%xmm0
   32972:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
  ubo.proj = glm::perspective(glm::radians(45.0f),
   32977:	66 0f ef c9          	pxor   %xmm1,%xmm1
  ubo.model = glm::rotate(glm::mat4(1.0f), time * glm::radians(45.0f),
   3297b:	0f 16 c3             	movlhps %xmm3,%xmm0
   3297e:	0f 29 44 24 70       	movaps %xmm0,0x70(%rsp)
   32983:	0f 28 05 f6 67 00 00 	movaps 0x67f6(%rip),%xmm0        # 39180 <_ZTSN4rtvc12FramebuffersE+0x50>
   3298a:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
   32991:	00 
   32992:	0f 28 05 f7 67 00 00 	movaps 0x67f7(%rip),%xmm0        # 39190 <_ZTSN4rtvc12FramebuffersE+0x60>
   32999:	0f 29 84 24 90 00 00 	movaps %xmm0,0x90(%rsp)
   329a0:	00 
   329a1:	0f 28 05 f8 67 00 00 	movaps 0x67f8(%rip),%xmm0        # 391a0 <_ZTSN4rtvc12FramebuffersE+0x70>
   329a8:	0f 29 84 24 a0 00 00 	movaps %xmm0,0xa0(%rsp)
   329af:	00 
   329b0:	0f 28 05 f9 67 00 00 	movaps 0x67f9(%rip),%xmm0        # 391b0 <_ZTSN4rtvc12FramebuffersE+0x80>
   329b7:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
   329be:	00 
   329bf:	0f 28 05 fa 67 00 00 	movaps 0x67fa(%rip),%xmm0        # 391c0 <_ZTSN4rtvc12FramebuffersE+0x90>
   329c6:	0f 29 84 24 c0 00 00 	movaps %xmm0,0xc0(%rsp)
   329cd:	00 
                              static_cast<float>(swapchain.extent().width) /
   329ce:	66 0f ef c0          	pxor   %xmm0,%xmm0
   329d2:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  ubo.proj = glm::perspective(glm::radians(45.0f),
   329d7:	8b 85 90 01 00 00    	mov    0x190(%rbp),%eax
   329dd:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
   329e2:	48 8b 05 17 68 00 00 	mov    0x6817(%rip),%rax        # 39200 <_ZTSN4rtvc12FramebuffersE+0xd0>
   329e9:	f3 0f 5e c1          	divss  %xmm1,%xmm0
		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
   329ed:	66 0f ef c9          	pxor   %xmm1,%xmm1
   329f1:	0f 11 4c 24 14       	movups %xmm1,0x14(%rsp)
   329f6:	0f 11 4c 24 24       	movups %xmm1,0x24(%rsp)
   329fb:	c7 44 24 24 79 82 1a 	movl   $0x401a8279,0x24(%rsp)
   32a02:	40 
   32a03:	66 0f 6f 6c 24 20    	movdqa 0x20(%rsp),%xmm5
   32a09:	0f 11 4c 24 34       	movups %xmm1,0x34(%rsp)
   32a0e:	0f 11 4c 24 40       	movups %xmm1,0x40(%rsp)
   32a13:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
   32a18:	c7 44 24 48 63 de 4e 	movl   $0xbe4ede63,0x48(%rsp)
   32a1f:	be 
		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);
   32a20:	f3 0f 59 05 d0 67 00 	mulss  0x67d0(%rip),%xmm0        # 391f8 <_ZTSN4rtvc12FramebuffersE+0xc8>
   32a27:	00 
   32a28:	f3 0f 5e f0          	divss  %xmm0,%xmm6
   32a2c:	f3 0f 11 74 24 10    	movss  %xmm6,0x10(%rsp)
   32a32:	66 0f 6f 5c 24 10    	movdqa 0x10(%rsp),%xmm3
   32a38:	0f 29 9c 24 d0 00 00 	movaps %xmm3,0xd0(%rsp)
   32a3f:	00 
   32a40:	0f 29 ac 24 e0 00 00 	movaps %xmm5,0xe0(%rsp)
   32a47:	00 
   32a48:	48 03 9d 98 03 00 00 	add    0x398(%rbp),%rbx
   32a4f:	66 0f 6f 74 24 30    	movdqa 0x30(%rsp),%xmm6
   32a55:	66 0f 6f 5c 24 40    	movdqa 0x40(%rsp),%xmm3
   32a5b:	48 8b 53 20          	mov    0x20(%rbx),%rdx
   32a5f:	48 8b 73 18          	mov    0x18(%rbx),%rsi
   32a63:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
   32a67:	0f 29 b4 24 f0 00 00 	movaps %xmm6,0xf0(%rsp)
   32a6e:	00 
  ubo.proj[1][1] *= -1;
   32a6f:	f3 0f 10 84 24 e4 00 	movss  0xe4(%rsp),%xmm0
   32a76:	00 00 
   32a78:	0f 57 05 51 67 00 00 	xorps  0x6751(%rip),%xmm0        # 391d0 <_ZTSN4rtvc12FramebuffersE+0xa0>
  ubo.proj = glm::perspective(glm::radians(45.0f),
   32a7f:	0f 29 9c 24 00 01 00 	movaps %xmm3,0x100(%rsp)
   32a86:	00 
  ubo.proj[1][1] *= -1;
   32a87:	f3 0f 11 84 24 e4 00 	movss  %xmm0,0xe4(%rsp)
   32a8e:	00 00 
   32a90:	e8 0b 3a fd ff       	call   64a0 <vkMapMemory@plt>
    std::memcpy(data, pHostData, size);
   32a95:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
   32a9a:	66 0f 6f 6c 24 50    	movdqa 0x50(%rsp),%xmm5
   32aa0:	66 0f 6f 74 24 60    	movdqa 0x60(%rsp),%xmm6
   32aa6:	66 0f 6f 5c 24 70    	movdqa 0x70(%rsp),%xmm3
   32aac:	66 0f 6f bc 24 90 00 	movdqa 0x90(%rsp),%xmm7
   32ab3:	00 00 
   32ab5:	0f 11 28             	movups %xmm5,(%rax)
   32ab8:	66 0f 6f 94 24 a0 00 	movdqa 0xa0(%rsp),%xmm2
   32abf:	00 00 
   32ac1:	66 0f 6f ac 24 80 00 	movdqa 0x80(%rsp),%xmm5
   32ac8:	00 00 
   32aca:	0f 11 70 10          	movups %xmm6,0x10(%rax)
   32ace:	66 0f 6f b4 24 b0 00 	movdqa 0xb0(%rsp),%xmm6
   32ad5:	00 00 
   32ad7:	0f 11 58 20          	movups %xmm3,0x20(%rax)
   32adb:	66 0f 6f 9c 24 c0 00 	movdqa 0xc0(%rsp),%xmm3
   32ae2:	00 00 
   32ae4:	0f 11 68 30          	movups %xmm5,0x30(%rax)
   32ae8:	66 0f 6f ac 24 d0 00 	movdqa 0xd0(%rsp),%xmm5
   32aef:	00 00 
   32af1:	0f 11 78 40          	movups %xmm7,0x40(%rax)
   32af5:	66 0f 6f bc 24 e0 00 	movdqa 0xe0(%rsp),%xmm7
   32afc:	00 00 
   32afe:	0f 11 50 50          	movups %xmm2,0x50(%rax)
   32b02:	66 0f 6f 94 24 f0 00 	movdqa 0xf0(%rsp),%xmm2
   32b09:	00 00 
   32b0b:	0f 11 70 60          	movups %xmm6,0x60(%rax)
   32b0f:	66 0f 6f b4 24 00 01 	movdqa 0x100(%rsp),%xmm6
   32b16:	00 00 
   32b18:	0f 11 58 70          	movups %xmm3,0x70(%rax)
   32b1c:	0f 11 a8 80 00 00 00 	movups %xmm5,0x80(%rax)
   32b23:	0f 11 b8 90 00 00 00 	movups %xmm7,0x90(%rax)
   32b2a:	0f 11 90 a0 00 00 00 	movups %xmm2,0xa0(%rax)
   32b31:	0f 11 b0 b0 00 00 00 	movups %xmm6,0xb0(%rax)
    vkUnmapMemory(_device, _deviceMemory);
   32b38:	48 8b 73 18          	mov    0x18(%rbx),%rsi
   32b3c:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
   32b40:	e8 bb 38 fd ff       	call   6400 <vkUnmapMemory@plt>
}
   32b45:	48 81 c4 10 01 00 00 	add    $0x110,%rsp
   32b4c:	5b                   	pop    %rbx
   32b4d:	5d                   	pop    %rbp
   32b4e:	41 5c                	pop    %r12
   32b50:	c3                   	ret
   32b51:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  static const auto startTime = std::chrono::high_resolution_clock::now();
   32b58:	4c 8d 25 b1 ec 00 00 	lea    0xecb1(%rip),%r12        # 41810 <_ZGVZN4rtvc9VulkanApp19updateUniformBufferEjE9startTime>
   32b5f:	4c 89 e7             	mov    %r12,%rdi
   32b62:	e8 39 3f fd ff       	call   6aa0 <__cxa_guard_acquire@plt>
   32b67:	85 c0                	test   %eax,%eax
   32b69:	0f 84 90 fc ff ff    	je     327ff <_ZN4rtvc9VulkanApp19updateUniformBufferEj+0x1f>
   32b6f:	e8 ec 34 fd ff       	call   6060 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
   32b74:	4c 89 e7             	mov    %r12,%rdi
   32b77:	48 89 05 9a ec 00 00 	mov    %rax,0xec9a(%rip)        # 41818 <_ZZN4rtvc9VulkanApp19updateUniformBufferEjE9startTime>
   32b7e:	e8 9d 37 fd ff       	call   6320 <__cxa_guard_release@plt>
   32b83:	e9 77 fc ff ff       	jmp    327ff <_ZN4rtvc9VulkanApp19updateUniformBufferEj+0x1f>
   32b88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   32b8f:	00 

0000000000032b90 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv>:
vkw::DescriptorSets VulkanApp::makeDescriptorSets() {
   32b90:	41 57                	push   %r15
   32b92:	41 56                	push   %r14
   32b94:	41 55                	push   %r13
   32b96:	41 54                	push   %r12
   32b98:	55                   	push   %rbp
   32b99:	53                   	push   %rbx
   32b9a:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  std::vector<VkDescriptorSetLayout> layouts{maxFramesInFlight,
   32ba1:	48 8b 46 50          	mov    0x50(%rsi),%rax
   32ba5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   32baa:	48 c1 e8 3c          	shr    $0x3c,%rax
   32bae:	0f 85 c6 03 00 00    	jne    32f7a <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x3ea>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   32bb4:	4c 8b 7c 24 28       	mov    0x28(%rsp),%r15
   32bb9:	49 89 fc             	mov    %rdi,%r12
   32bbc:	48 89 f3             	mov    %rsi,%rbx
   32bbf:	4d 85 ff             	test   %r15,%r15
   32bc2:	0f 84 08 03 00 00    	je     32ed0 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x340>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   32bc8:	49 c1 e7 03          	shl    $0x3,%r15
   32bcc:	4c 89 ff             	mov    %r15,%rdi
   32bcf:	4c 89 7c 24 28       	mov    %r15,0x28(%rsp)
   32bd4:	e8 67 39 fd ff       	call   6540 <_Znwm@plt>
   32bd9:	49 8d 4f f8          	lea    -0x8(%r15),%rcx
      const _Tp __tmp = __value;
   32bdd:	48 8b b3 f0 01 00 00 	mov    0x1f0(%rbx),%rsi
   32be4:	48 c1 e9 03          	shr    $0x3,%rcx
   32be8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      for (; __first != __last; ++__first)
   32bed:	48 83 c1 01          	add    $0x1,%rcx
   32bf1:	49 83 ff 08          	cmp    $0x8,%r15
   32bf5:	0f 84 4d 03 00 00    	je     32f48 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x3b8>
   32bfb:	48 89 ca             	mov    %rcx,%rdx
   32bfe:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   32c03:	66 48 0f 6e c6       	movq   %rsi,%xmm0
   32c08:	48 d1 ea             	shr    %rdx
   32c0b:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
   32c0f:	48 c1 e2 04          	shl    $0x4,%rdx
   32c13:	48 89 f8             	mov    %rdi,%rax
   32c16:	48 01 fa             	add    %rdi,%rdx
   32c19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	*__first = __tmp;
   32c20:	0f 11 00             	movups %xmm0,(%rax)
      for (; __first != __last; ++__first)
   32c23:	48 83 c0 10          	add    $0x10,%rax
   32c27:	48 39 d0             	cmp    %rdx,%rax
   32c2a:	75 f4                	jne    32c20 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x90>
   32c2c:	48 89 c8             	mov    %rcx,%rax
   32c2f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
   32c34:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
   32c38:	83 e1 01             	and    $0x1,%ecx
   32c3b:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
   32c3f:	74 03                	je     32c44 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0xb4>
	*__first = __tmp;
   32c41:	48 89 30             	mov    %rsi,(%rax)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   32c44:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
   32c49:	48 8b ab 40 04 00 00 	mov    0x440(%rbx),%rbp
   32c50:	4c 8b ab 48 04 00 00 	mov    0x448(%rbx),%r13
   32c57:	48 c1 f8 03          	sar    $0x3,%rax
   32c5b:	89 c2                	mov    %eax,%edx
    uint32_t setCount = static_cast<uint32_t>(setLayouts.size());
   32c5d:	89 c1                	mov    %eax,%ecx
      : _sets{pAllocateInfo->descriptorSetCount}, _device{device}, _pool{pool} {
   32c5f:	49 89 d7             	mov    %rdx,%r15
    if (setCount > 0) {
   32c62:	85 c0                	test   %eax,%eax
   32c64:	0f 84 09 03 00 00    	je     32f73 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x3e3>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   32c6a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    VkDescriptorSetAllocateInfo allocInfo{};
   32c6f:	66 0f ef c0          	pxor   %xmm0,%xmm0
    allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
   32c73:	c7 44 24 70 22 00 00 	movl   $0x22,0x70(%rsp)
   32c7a:	00 
    VkDescriptorSetAllocateInfo allocInfo{};
   32c7b:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
   32c80:	0f 11 84 24 80 00 00 	movups %xmm0,0x80(%rsp)
   32c87:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
   32c88:	66 0f ef c0          	pxor   %xmm0,%xmm0
    allocInfo.descriptorPool = _pool;
   32c8c:	48 89 ac 24 80 00 00 	mov    %rbp,0x80(%rsp)
   32c93:	00 
    allocInfo.descriptorSetCount = setCount;
   32c94:	89 8c 24 88 00 00 00 	mov    %ecx,0x88(%rsp)
    allocInfo.pSetLayouts = pSetLayouts;
   32c9b:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   32ca2:	00 
   32ca3:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
   32caa:	00 00 
   32cac:	41 0f 11 04 24       	movups %xmm0,(%r12)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   32cb1:	48 85 d2             	test   %rdx,%rdx
   32cb4:	0f 84 61 02 00 00    	je     32f1b <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x38b>
   32cba:	4e 8d 34 fd 00 00 00 	lea    0x0(,%r15,8),%r14
   32cc1:	00 
   32cc2:	4c 89 f7             	mov    %r14,%rdi
   32cc5:	e8 76 38 fd ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   32cca:	4e 8d 04 30          	lea    (%rax,%r14,1),%r8
	this->_M_impl._M_start = this->_M_allocate(__n);
   32cce:	49 89 04 24          	mov    %rax,(%r12)
   32cd2:	48 89 c1             	mov    %rax,%rcx
   32cd5:	48 8d 78 08          	lea    0x8(%rax),%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   32cd9:	4d 89 44 24 10       	mov    %r8,0x10(%r12)
   32cde:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      if (__n <= 0)
   32ce5:	49 83 ff 01          	cmp    $0x1,%r15
   32ce9:	0f 84 51 02 00 00    	je     32f40 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x3b0>
      for (; __first != __last; ++__first)
   32cef:	49 39 f8             	cmp    %rdi,%r8
   32cf2:	74 1d                	je     32d11 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x181>
	*__first = __tmp;
   32cf4:	49 8d 56 f8          	lea    -0x8(%r14),%rdx
   32cf8:	31 f6                	xor    %esi,%esi
   32cfa:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
   32cff:	48 89 04 24          	mov    %rax,(%rsp)
   32d03:	e8 98 35 fd ff       	call   62a0 <memset@plt>
   32d08:	48 8b 0c 24          	mov    (%rsp),%rcx
   32d0c:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
	this->_M_impl._M_finish =
   32d11:	4d 89 44 24 08       	mov    %r8,0x8(%r12)
    if (vkAllocateDescriptorSets(device, pAllocateInfo, _sets.data()) !=
   32d16:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
   32d1b:	48 89 ca             	mov    %rcx,%rdx
   32d1e:	4c 89 ef             	mov    %r13,%rdi
      : _sets{pAllocateInfo->descriptorSetCount}, _device{device}, _pool{pool} {
   32d21:	4d 89 6c 24 18       	mov    %r13,0x18(%r12)
    if (vkAllocateDescriptorSets(device, pAllocateInfo, _sets.data()) !=
   32d26:	48 89 c6             	mov    %rax,%rsi
      : _sets{pAllocateInfo->descriptorSetCount}, _device{device}, _pool{pool} {
   32d29:	49 89 6c 24 20       	mov    %rbp,0x20(%r12)
   32d2e:	41 c6 44 24 28 00    	movb   $0x0,0x28(%r12)
    if (vkAllocateDescriptorSets(device, pAllocateInfo, _sets.data()) !=
   32d34:	48 89 04 24          	mov    %rax,(%rsp)
   32d38:	e8 13 33 fd ff       	call   6050 <vkAllocateDescriptorSets@plt>
   32d3d:	85 c0                	test   %eax,%eax
   32d3f:	0f 85 36 5b fd ff    	jne    887b <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv.cold+0x39>
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   32d45:	48 83 7b 50 00       	cmpq   $0x0,0x50(%rbx)
    _isOwner = true;
   32d4a:	41 c6 44 24 28 01    	movb   $0x1,0x28(%r12)
   32d50:	0f 84 46 01 00 00    	je     32e9c <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x30c>
   32d56:	48 8d 44 24 7c       	lea    0x7c(%rsp),%rax
   32d5b:	4c 8b 35 2e 4c 00 00 	mov    0x4c2e(%rip),%r14        # 37990 <_ZSt19piecewise_construct+0x49>
   32d62:	31 ed                	xor    %ebp,%ebp
   32d64:	4c 8d 6c 24 74       	lea    0x74(%rsp),%r13
   32d69:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   32d6e:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
   32d73:	4c 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%r15
   32d7a:	00 
   32d7b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   32d80:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
   32d85:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   32d8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    std::array<VkWriteDescriptorSet, 2> writeSets{};
   32d90:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    bufferInfo.buffer = uniformBuffers[i].ref();
   32d95:	48 89 e8             	mov    %rbp,%rax
    VkDescriptorBufferInfo bufferInfo{};
   32d98:	66 0f ef c9          	pxor   %xmm1,%xmm1
    std::array<VkWriteDescriptorSet, 2> writeSets{};
   32d9c:	4c 89 e9             	mov    %r13,%rcx
    bufferInfo.buffer = uniformBuffers[i].ref();
   32d9f:	48 c1 e0 06          	shl    $0x6,%rax
    VkDescriptorBufferInfo bufferInfo{};
   32da3:	0f 29 4c 24 30       	movaps %xmm1,0x30(%rsp)
    bufferInfo.buffer = uniformBuffers[i].ref();
   32da8:	48 03 83 98 03 00 00 	add    0x398(%rbx),%rax
    vkUpdateDescriptorSets(device.ref(),
   32daf:	f3 0f 6f 83 18 04 00 	movdqu 0x418(%rbx),%xmm0
   32db6:	00 
    std::array<VkWriteDescriptorSet, 2> writeSets{};
   32db7:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    vkUpdateDescriptorSets(device.ref(),
   32dbb:	f3 0f 6f 93 f8 03 00 	movdqu 0x3f8(%rbx),%xmm2
   32dc2:	00 
    writeSets[0].pBufferInfo = &bufferInfo;
   32dc3:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
    VkDescriptorBufferInfo bufferInfo{};
   32dc8:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
   32dcf:	00 00 
    std::array<VkWriteDescriptorSet, 2> writeSets{};
   32dd1:	48 29 f9             	sub    %rdi,%rcx
    bufferInfo.buffer = uniformBuffers[i].ref();
   32dd4:	48 8b 40 08          	mov    0x8(%rax),%rax
    vkUpdateDescriptorSets(device.ref(),
   32dd8:	45 31 c0             	xor    %r8d,%r8d
   32ddb:	be 02 00 00 00       	mov    $0x2,%esi
    std::array<VkWriteDescriptorSet, 2> writeSets{};
   32de0:	83 c1 7c             	add    $0x7c,%ecx
    vkUpdateDescriptorSets(device.ref(),
   32de3:	66 0f c6 c2 01       	shufpd $0x1,%xmm2,%xmm0
    imageInfo.sampler = textureSampler.ref();
   32de8:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    bufferInfo.buffer = uniformBuffers[i].ref();
   32ded:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    std::array<VkWriteDescriptorSet, 2> writeSets{};
   32df2:	c1 e9 03             	shr    $0x3,%ecx
   32df5:	31 c0                	xor    %eax,%eax
    imageInfo.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
   32df7:	48 c7 44 24 60 05 00 	movq   $0x5,0x60(%rsp)
   32dfe:	00 00 
    bufferInfo.range = sizeof(vkw::UniformBufferObject);
   32e00:	48 c7 44 24 40 c0 00 	movq   $0xc0,0x40(%rsp)
   32e07:	00 00 
    std::array<VkWriteDescriptorSet, 2> writeSets{};
   32e09:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
   32e10:	00 
   32e11:	49 c7 47 f0 00 00 00 	movq   $0x0,-0x10(%r15)
   32e18:	00 
   32e19:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    writeSets[0].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
   32e1c:	c7 44 24 70 23 00 00 	movl   $0x23,0x70(%rsp)
   32e23:	00 
    writeSets[0].dstSet = sets[i];
   32e24:	49 8b 04 24          	mov    (%r12),%rax
    vkUpdateDescriptorSets(device.ref(),
   32e28:	48 8b bb 48 01 00 00 	mov    0x148(%rbx),%rdi
    writeSets[0].dstSet = sets[i];
   32e2f:	48 8b 04 e8          	mov    (%rax,%rbp,8),%rax
    writeSets[0].pBufferInfo = &bufferInfo;
   32e33:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
   32e3a:	00 
    vkUpdateDescriptorSets(device.ref(),
   32e3b:	48 8b 14 24          	mov    (%rsp),%rdx
    writeSets[0].descriptorCount = 1;
   32e3f:	4c 89 b4 24 90 00 00 	mov    %r14,0x90(%rsp)
   32e46:	00 
    writeSets[0].dstSet = sets[i];
   32e47:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
   32e4e:	00 
    writeSets[1].dstSet = sets[i];
   32e4f:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
   32e56:	00 
    writeSets[1].descriptorCount = 1;
   32e57:	48 8b 05 aa 63 00 00 	mov    0x63aa(%rip),%rax        # 39208 <_ZTSN4rtvc12FramebuffersE+0xd8>
    writeSets[1].sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
   32e5e:	c7 84 24 b0 00 00 00 	movl   $0x23,0xb0(%rsp)
   32e65:	23 00 00 00 
    writeSets[1].descriptorCount = 1;
   32e69:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
   32e70:	00 
    writeSets[1].pImageInfo = &imageInfo;
   32e71:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    writeSets[1].dstBinding = 1;
   32e76:	c7 84 24 c8 00 00 00 	movl   $0x1,0xc8(%rsp)
   32e7d:	01 00 00 00 
    writeSets[1].pImageInfo = &imageInfo;
   32e81:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
   32e88:	00 
    vkUpdateDescriptorSets(device.ref(),
   32e89:	e8 72 37 fd ff       	call   6600 <vkUpdateDescriptorSets@plt>
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   32e8e:	48 83 c5 01          	add    $0x1,%rbp
   32e92:	48 3b 6b 50          	cmp    0x50(%rbx),%rbp
   32e96:	0f 82 f4 fe ff ff    	jb     32d90 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x200>
	if (__p)
   32e9c:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
   32ea2:	74 0f                	je     32eb3 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x323>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   32ea4:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
   32ea9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   32eae:	e8 ad 36 fd ff       	call   6560 <_ZdlPvm@plt>
}
   32eb3:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
   32eba:	4c 89 e0             	mov    %r12,%rax
   32ebd:	5b                   	pop    %rbx
   32ebe:	5d                   	pop    %rbp
   32ebf:	41 5c                	pop    %r12
   32ec1:	41 5d                	pop    %r13
   32ec3:	41 5e                	pop    %r14
   32ec5:	41 5f                	pop    %r15
   32ec7:	c3                   	ret
   32ec8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   32ecf:	00 
  auto sets = descriptorPool.allocateSets(layouts);
   32ed0:	48 8b ae 40 04 00 00 	mov    0x440(%rsi),%rbp
    VkDescriptorSetAllocateInfo allocInfo{};
   32ed7:	66 0f ef c0          	pxor   %xmm0,%xmm0
    allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
   32edb:	c7 44 24 70 22 00 00 	movl   $0x22,0x70(%rsp)
   32ee2:	00 
    VkDescriptorSetAllocateInfo allocInfo{};
   32ee3:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
   32ee8:	4c 8b ae 48 04 00 00 	mov    0x448(%rsi),%r13
   32eef:	0f 11 84 24 80 00 00 	movups %xmm0,0x80(%rsp)
   32ef6:	00 
	: _M_start(), _M_finish(), _M_end_of_storage()
   32ef7:	66 0f ef c0          	pxor   %xmm0,%xmm0
    allocInfo.descriptorPool = _pool;
   32efb:	48 89 ac 24 80 00 00 	mov    %rbp,0x80(%rsp)
   32f02:	00 
    allocInfo.pSetLayouts = pSetLayouts;
   32f03:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
   32f0a:	00 00 00 00 00 
   32f0f:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
   32f16:	00 00 
   32f18:	0f 11 07             	movups %xmm0,(%rdi)
	this->_M_impl._M_start = this->_M_allocate(__n);
   32f1b:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
   32f22:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   32f23:	31 c9                	xor    %ecx,%ecx
   32f25:	45 31 c0             	xor    %r8d,%r8d
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   32f28:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
   32f2f:	00 00 
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   32f31:	e9 db fd ff ff       	jmp    32d11 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x181>
   32f36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   32f3d:	00 00 00 
	return __first;
   32f40:	49 89 f8             	mov    %rdi,%r8
   32f43:	e9 c9 fd ff ff       	jmp    32d11 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0x181>
	*__first = __tmp;
   32f48:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
   32f4d:	ba 01 00 00 00       	mov    $0x1,%edx
    uint32_t setCount = static_cast<uint32_t>(setLayouts.size());
   32f52:	b9 01 00 00 00       	mov    $0x1,%ecx
   32f57:	48 8b ab 40 04 00 00 	mov    0x440(%rbx),%rbp
   32f5e:	4c 8b ab 48 04 00 00 	mov    0x448(%rbx),%r13
      : _sets{pAllocateInfo->descriptorSetCount}, _device{device}, _pool{pool} {
   32f65:	41 bf 01 00 00 00    	mov    $0x1,%r15d
   32f6b:	48 89 30             	mov    %rsi,(%rax)
    if (setCount > 0) {
   32f6e:	e9 f7 fc ff ff       	jmp    32c6a <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0xda>
    const VkDescriptorSetLayout *pSetLayouts = nullptr;
   32f73:	31 c0                	xor    %eax,%eax
   32f75:	e9 f5 fc ff ff       	jmp    32c6f <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv+0xdf>
	  __throw_length_error(
   32f7a:	48 8d 3d 6f 46 00 00 	lea    0x466f(%rip),%rdi        # 375f0 <_ZTSN3vkw10ImageViewsE+0x220>
   32f81:	e8 fa 32 fd ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
   32f86:	e9 b8 58 fd ff       	jmp    8843 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv.cold+0x1>
   32f8b:	48 89 c3             	mov    %rax,%rbx
   32f8e:	e9 d1 58 fd ff       	jmp    8864 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv.cold+0x22>
}
   32f93:	48 89 c3             	mov    %rax,%rbx
   32f96:	e9 1f 59 fd ff       	jmp    88ba <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv.cold+0x78>
   32f9b:	90                   	nop
   32f9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000032fa0 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_>:
                                      VkImageLayout newLayout) {
   32fa0:	41 57                	push   %r15
   32fa2:	41 56                	push   %r14
   32fa4:	49 89 f6             	mov    %rsi,%r14
   32fa7:	41 55                	push   %r13
   32fa9:	41 54                	push   %r12
   32fab:	45 89 c4             	mov    %r8d,%r12d
   32fae:	55                   	push   %rbp
   32faf:	89 cd                	mov    %ecx,%ebp
   32fb1:	53                   	push   %rbx
   32fb2:	48 89 fb             	mov    %rdi,%rbx
   32fb5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
   32fbc:	48 8b 87 90 02 00 00 	mov    0x290(%rdi),%rax
   32fc3:	48 8b bf 98 02 00 00 	mov    0x298(%rdi),%rdi
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   32fca:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
   32fcf:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
    bufferInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
   32fd4:	48 c7 44 24 60 28 00 	movq   $0x28,0x60(%rsp)
   32fdb:	00 00 
    bufferInfo.commandPool = _commandPool;
   32fdd:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   32fe2:	4c 89 fa             	mov    %r15,%rdx
   32fe5:	4c 89 ee             	mov    %r13,%rsi
    bufferInfo.level = level;
   32fe8:	48 8b 05 79 49 00 00 	mov    0x4979(%rip),%rax        # 37968 <_ZSt19piecewise_construct+0x21>
    bufferInfo.pNext = pNext;
   32fef:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
   32ff6:	00 00 
    bufferInfo.level = level;
   32ff8:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   32ffd:	e8 be 34 fd ff       	call   64c0 <vkAllocateCommandBuffers@plt>
   33002:	85 c0                	test   %eax,%eax
   33004:	0f 85 ba 58 fd ff    	jne    88c4 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_.cold>
    return commandBuffer;
   3300a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    VkCommandBufferBeginInfo commandBufferInfo{};
   3300f:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkBeginCommandBuffer(commandBuffer, &commandBufferInfo) != VK_SUCCESS) {
   33013:	4c 89 ee             	mov    %r13,%rsi
    VkCommandBufferBeginInfo commandBufferInfo{};
   33016:	c7 44 24 74 00 00 00 	movl   $0x0,0x74(%rsp)
   3301d:	00 
   3301e:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
  auto commandBuffer = commandPool.allocateBuffer();
   33023:	48 89 3c 24          	mov    %rdi,(%rsp)
    commandBufferInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
   33027:	c7 44 24 60 2a 00 00 	movl   $0x2a,0x60(%rsp)
   3302e:	00 
    commandBufferInfo.flags = flags;
   3302f:	c7 44 24 70 01 00 00 	movl   $0x1,0x70(%rsp)
   33036:	00 
    commandBufferInfo.pInheritanceInfo = pInheritanceInfo;
   33037:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
   3303e:	00 00 
    if (vkBeginCommandBuffer(commandBuffer, &commandBufferInfo) != VK_SUCCESS) {
   33040:	e8 0b 35 fd ff       	call   6550 <vkBeginCommandBuffer@plt>
   33045:	66 0f ef c0          	pxor   %xmm0,%xmm0
   33049:	85 c0                	test   %eax,%eax
   3304b:	0f 85 7e 01 00 00    	jne    331cf <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_+0x22f>
  barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
   33051:	48 8b 05 68 5a 00 00 	mov    0x5a68(%rip),%rax        # 38ac0 <_ZL11stbi__bmask+0x340>
  VkImageMemoryBarrier barrier{};
   33058:	0f 11 44 24 24       	movups %xmm0,0x24(%rsp)
   3305d:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
   33062:	c7 44 24 54 00 00 00 	movl   $0x0,0x54(%rsp)
   33069:	00 
  barrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
   3306a:	c7 44 24 10 2d 00 00 	movl   $0x2d,0x10(%rsp)
   33071:	00 
  barrier.oldLayout = oldLayout;
   33072:	89 6c 24 28          	mov    %ebp,0x28(%rsp)
  barrier.newLayout = newLayout;
   33076:	44 89 64 24 2c       	mov    %r12d,0x2c(%rsp)
  barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
   3307b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  barrier.image = image;
   33080:	4c 89 74 24 38       	mov    %r14,0x38(%rsp)
  barrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
   33085:	c7 44 24 40 01 00 00 	movl   $0x1,0x40(%rsp)
   3308c:	00 
  barrier.subresourceRange.levelCount = 1;
   3308d:	c7 44 24 48 01 00 00 	movl   $0x1,0x48(%rsp)
   33094:	00 
  barrier.subresourceRange.layerCount = 1;
   33095:	c7 44 24 50 01 00 00 	movl   $0x1,0x50(%rsp)
   3309c:	00 
  VkImageMemoryBarrier barrier{};
   3309d:	0f 11 44 24 14       	movups %xmm0,0x14(%rsp)
  if (oldLayout == VK_IMAGE_LAYOUT_UNDEFINED &&
   330a2:	85 ed                	test   %ebp,%ebp
   330a4:	0f 85 f6 00 00 00    	jne    331a0 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_+0x200>
   330aa:	41 83 fc 07          	cmp    $0x7,%r12d
   330ae:	0f 85 ec 00 00 00    	jne    331a0 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_+0x200>
   330b4:	b8 00 10 00 00       	mov    $0x1000,%eax
    dstStage = VK_PIPELINE_STAGE_TRANSFER_BIT;
   330b9:	ba 00 10 00 00       	mov    $0x1000,%edx
    srcStage = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
   330be:	be 01 00 00 00       	mov    $0x1,%esi
    barrier.dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;
   330c3:	89 44 24 24          	mov    %eax,0x24(%rsp)
  vkCmdPipelineBarrier(commandBuffer, srcStage, dstStage, 0, 0, nullptr, 0,
   330c7:	45 31 c9             	xor    %r9d,%r9d
   330ca:	45 31 c0             	xor    %r8d,%r8d
   330cd:	31 c9                	xor    %ecx,%ecx
   330cf:	41 57                	push   %r15
   330d1:	6a 01                	push   $0x1
   330d3:	6a 00                	push   $0x0
   330d5:	6a 00                	push   $0x0
   330d7:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   330dc:	e8 6f 30 fd ff       	call   6150 <vkCmdPipelineBarrier@plt>
    if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
   330e1:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
   330e6:	48 83 c4 20          	add    $0x20,%rsp
   330ea:	e8 31 3a fd ff       	call   6b20 <vkEndCommandBuffer@plt>
   330ef:	85 c0                	test   %eax,%eax
   330f1:	0f 85 57 58 fd ff    	jne    894e <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_.cold+0x8a>
  commandPool.submitBuffer(device.queue(), commandBuffer);
   330f7:	48 8b ab 58 01 00 00 	mov    0x158(%rbx),%rbp
   330fe:	48 8b 04 24          	mov    (%rsp),%rax
    vkQueueSubmit(queue, 1, &submitInfo, fence);
   33102:	4c 89 ea             	mov    %r13,%rdx
   33105:	31 c9                	xor    %ecx,%ecx
    VkSubmitInfo submitInfo{};
   33107:	66 0f ef c0          	pxor   %xmm0,%xmm0
    vkQueueSubmit(queue, 1, &submitInfo, fence);
   3310b:	be 01 00 00 00       	mov    $0x1,%esi
    VkSubmitInfo submitInfo{};
   33110:	c7 84 24 a4 00 00 00 	movl   $0x0,0xa4(%rsp)
   33117:	00 00 00 00 
   3311b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    vkQueueSubmit(queue, 1, &submitInfo, fence);
   33120:	48 89 ef             	mov    %rbp,%rdi
    submitInfo.pCommandBuffers = &commandBuffer;
   33123:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
    VkSubmitInfo submitInfo{};
   33128:	0f 11 84 24 84 00 00 	movups %xmm0,0x84(%rsp)
   3312f:	00 
   33130:	0f 11 84 24 94 00 00 	movups %xmm0,0x94(%rsp)
   33137:	00 
   33138:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   3313d:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
    submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
   33142:	c7 44 24 60 04 00 00 	movl   $0x4,0x60(%rsp)
   33149:	00 
    submitInfo.commandBufferCount = 1;
   3314a:	c7 84 24 88 00 00 00 	movl   $0x1,0x88(%rsp)
   33151:	01 00 00 00 
    submitInfo.pCommandBuffers = &commandBuffer;
   33155:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   3315c:	00 
    vkQueueSubmit(queue, 1, &submitInfo, fence);
   3315d:	e8 ee 35 fd ff       	call   6750 <vkQueueSubmit@plt>
      vkQueueWaitIdle(queue);
   33162:	48 89 ef             	mov    %rbp,%rdi
   33165:	e8 d6 38 fd ff       	call   6a40 <vkQueueWaitIdle@plt>
    vkFreeCommandBuffers(_device, _commandPool, 1, &commandBuffer);
   3316a:	48 8b b3 90 02 00 00 	mov    0x290(%rbx),%rsi
   33171:	48 89 e1             	mov    %rsp,%rcx
   33174:	48 8b bb 98 02 00 00 	mov    0x298(%rbx),%rdi
   3317b:	ba 01 00 00 00       	mov    $0x1,%edx
   33180:	e8 1b 32 fd ff       	call   63a0 <vkFreeCommandBuffers@plt>
}
   33185:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
   3318c:	5b                   	pop    %rbx
   3318d:	5d                   	pop    %rbp
   3318e:	41 5c                	pop    %r12
   33190:	41 5d                	pop    %r13
   33192:	41 5e                	pop    %r14
   33194:	41 5f                	pop    %r15
   33196:	c3                   	ret
   33197:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3319e:	00 00 
  } else if (oldLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL &&
   331a0:	83 fd 07             	cmp    $0x7,%ebp
   331a3:	0f 85 4d 57 fd ff    	jne    88f6 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_.cold+0x32>
   331a9:	41 83 fc 05          	cmp    $0x5,%r12d
   331ad:	0f 85 43 57 fd ff    	jne    88f6 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_.cold+0x32>
    barrier.srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;
   331b3:	b8 20 00 00 00       	mov    $0x20,%eax
    dstStage = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
   331b8:	ba 80 00 00 00       	mov    $0x80,%edx
    srcStage = VK_PIPELINE_STAGE_TRANSFER_BIT;
   331bd:	be 00 10 00 00       	mov    $0x1000,%esi
    barrier.srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;
   331c2:	c7 44 24 20 00 10 00 	movl   $0x1000,0x20(%rsp)
   331c9:	00 
    dstStage = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
   331ca:	e9 f4 fe ff ff       	jmp    330c3 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_+0x123>
   331cf:	e9 bf 57 fd ff       	jmp    8993 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_.cold+0xcf>
   331d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   331db:	00 00 00 00 
   331df:	90                   	nop

00000000000331e0 <_ZN4rtvc9VulkanApp17copyBufferToImageEP10VkBuffer_TP9VkImage_Tjj>:
                                  uint32_t width, uint32_t height) {
   331e0:	41 57                	push   %r15
   331e2:	41 56                	push   %r14
   331e4:	41 89 ce             	mov    %ecx,%r14d
   331e7:	41 55                	push   %r13
   331e9:	45 89 c5             	mov    %r8d,%r13d
   331ec:	41 54                	push   %r12
   331ee:	49 89 fc             	mov    %rdi,%r12
   331f1:	55                   	push   %rbp
   331f2:	48 89 f5             	mov    %rsi,%rbp
   331f5:	53                   	push   %rbx
   331f6:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
   331fd:	48 8b 87 90 02 00 00 	mov    0x290(%rdi),%rax
   33204:	48 8b bf 98 02 00 00 	mov    0x298(%rdi),%rdi
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   3320b:	4c 8d 7c 24 20       	lea    0x20(%rsp),%r15
   33210:	48 8d 5c 24 60       	lea    0x60(%rsp),%rbx
   33215:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    bufferInfo.commandPool = _commandPool;
   3321a:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   3321f:	4c 89 fa             	mov    %r15,%rdx
   33222:	48 89 de             	mov    %rbx,%rsi
    bufferInfo.level = level;
   33225:	48 8b 05 3c 47 00 00 	mov    0x473c(%rip),%rax        # 37968 <_ZSt19piecewise_construct+0x21>
    bufferInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
   3322c:	48 c7 44 24 60 28 00 	movq   $0x28,0x60(%rsp)
   33233:	00 00 
    bufferInfo.pNext = pNext;
   33235:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
   3323c:	00 00 
    bufferInfo.level = level;
   3323e:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    if (vkAllocateCommandBuffers(_device, &bufferInfo, &commandBuffer) !=
   33243:	e8 78 32 fd ff       	call   64c0 <vkAllocateCommandBuffers@plt>
   33248:	85 c0                	test   %eax,%eax
   3324a:	0f 85 88 57 fd ff    	jne    89d8 <_ZN4rtvc9VulkanApp17copyBufferToImageEP10VkBuffer_TP9VkImage_Tjj.cold>
    return commandBuffer;
   33250:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    VkCommandBufferBeginInfo commandBufferInfo{};
   33255:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkBeginCommandBuffer(commandBuffer, &commandBufferInfo) != VK_SUCCESS) {
   33259:	48 89 de             	mov    %rbx,%rsi
    VkCommandBufferBeginInfo commandBufferInfo{};
   3325c:	c7 44 24 74 00 00 00 	movl   $0x0,0x74(%rsp)
   33263:	00 
   33264:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
  auto commandBuffer = commandPool.allocateBuffer();
   33269:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    commandBufferInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
   3326e:	c7 44 24 60 2a 00 00 	movl   $0x2a,0x60(%rsp)
   33275:	00 
    commandBufferInfo.flags = flags;
   33276:	c7 44 24 70 01 00 00 	movl   $0x1,0x70(%rsp)
   3327d:	00 
    commandBufferInfo.pInheritanceInfo = pInheritanceInfo;
   3327e:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
   33285:	00 00 
    if (vkBeginCommandBuffer(commandBuffer, &commandBufferInfo) != VK_SUCCESS) {
   33287:	e8 c4 32 fd ff       	call   6550 <vkBeginCommandBuffer@plt>
   3328c:	66 0f ef c0          	pxor   %xmm0,%xmm0
   33290:	85 c0                	test   %eax,%eax
   33292:	0f 85 0e 01 00 00    	jne    333a6 <_ZN4rtvc9VulkanApp17copyBufferToImageEP10VkBuffer_TP9VkImage_Tjj+0x1c6>
  vkCmdCopyBufferToImage(commandBuffer, buffer, image,
   33298:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   3329d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   332a2:	4d 89 f9             	mov    %r15,%r9
   332a5:	48 89 ee             	mov    %rbp,%rsi
   332a8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   332ae:	b9 07 00 00 00       	mov    $0x7,%ecx
  VkBufferImageCopy region{};
   332b3:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
   332b8:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
   332bd:	0f 11 44 24 3c       	movups %xmm0,0x3c(%rsp)
  region.imageSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
   332c2:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
   332c9:	00 
  region.imageSubresource.layerCount = 1;
   332ca:	c7 44 24 3c 01 00 00 	movl   $0x1,0x3c(%rsp)
   332d1:	00 
  region.imageExtent = {width, height, 1};
   332d2:	44 89 74 24 4c       	mov    %r14d,0x4c(%rsp)
   332d7:	44 89 6c 24 50       	mov    %r13d,0x50(%rsp)
   332dc:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%rsp)
   332e3:	00 
  vkCmdCopyBufferToImage(commandBuffer, buffer, image,
   332e4:	e8 d7 36 fd ff       	call   69c0 <vkCmdCopyBufferToImage@plt>
    if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
   332e9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
   332ee:	e8 2d 38 fd ff       	call   6b20 <vkEndCommandBuffer@plt>
   332f3:	66 0f ef c0          	pxor   %xmm0,%xmm0
   332f7:	85 c0                	test   %eax,%eax
   332f9:	0f 85 a2 00 00 00    	jne    333a1 <_ZN4rtvc9VulkanApp17copyBufferToImageEP10VkBuffer_TP9VkImage_Tjj+0x1c1>
  commandPool.submitBuffer(device.queue(), commandBuffer);
   332ff:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    vkQueueSubmit(queue, 1, &submitInfo, fence);
   33304:	48 89 da             	mov    %rbx,%rdx
   33307:	31 c9                	xor    %ecx,%ecx
   33309:	be 01 00 00 00       	mov    $0x1,%esi
   3330e:	49 8b ac 24 58 01 00 	mov    0x158(%r12),%rbp
   33315:	00 
    VkSubmitInfo submitInfo{};
   33316:	0f 11 84 24 84 00 00 	movups %xmm0,0x84(%rsp)
   3331d:	00 
   3331e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    submitInfo.pCommandBuffers = &commandBuffer;
   33323:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
    vkQueueSubmit(queue, 1, &submitInfo, fence);
   33328:	48 89 ef             	mov    %rbp,%rdi
    VkSubmitInfo submitInfo{};
   3332b:	0f 11 84 24 94 00 00 	movups %xmm0,0x94(%rsp)
   33332:	00 
   33333:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   33338:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
   3333d:	c7 84 24 a4 00 00 00 	movl   $0x0,0xa4(%rsp)
   33344:	00 00 00 00 
    submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
   33348:	c7 44 24 60 04 00 00 	movl   $0x4,0x60(%rsp)
   3334f:	00 
    submitInfo.commandBufferCount = 1;
   33350:	c7 84 24 88 00 00 00 	movl   $0x1,0x88(%rsp)
   33357:	01 00 00 00 
    submitInfo.pCommandBuffers = &commandBuffer;
   3335b:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
   33362:	00 
    vkQueueSubmit(queue, 1, &submitInfo, fence);
   33363:	e8 e8 33 fd ff       	call   6750 <vkQueueSubmit@plt>
      vkQueueWaitIdle(queue);
   33368:	48 89 ef             	mov    %rbp,%rdi
   3336b:	e8 d0 36 fd ff       	call   6a40 <vkQueueWaitIdle@plt>
    vkFreeCommandBuffers(_device, _commandPool, 1, &commandBuffer);
   33370:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
   33375:	ba 01 00 00 00       	mov    $0x1,%edx
   3337a:	49 8b b4 24 90 02 00 	mov    0x290(%r12),%rsi
   33381:	00 
   33382:	49 8b bc 24 98 02 00 	mov    0x298(%r12),%rdi
   33389:	00 
   3338a:	e8 11 30 fd ff       	call   63a0 <vkFreeCommandBuffers@plt>
}
   3338f:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
   33396:	5b                   	pop    %rbx
   33397:	5d                   	pop    %rbp
   33398:	41 5c                	pop    %r12
   3339a:	41 5d                	pop    %r13
   3339c:	41 5e                	pop    %r14
   3339e:	41 5f                	pop    %r15
   333a0:	c3                   	ret
   333a1:	e9 77 56 fd ff       	jmp    8a1d <_ZN4rtvc9VulkanApp17copyBufferToImageEP10VkBuffer_TP9VkImage_Tjj.cold+0x45>
   333a6:	e9 a4 56 fd ff       	jmp    8a4f <_ZN4rtvc9VulkanApp17copyBufferToImageEP10VkBuffer_TP9VkImage_Tjj.cold+0x77>
   333ab:	90                   	nop
   333ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000333b0 <_ZN4rtvc9VulkanApp16makeTextureImageEv>:
Image VulkanApp::makeTextureImage() {
   333b0:	41 57                	push   %r15
  stbi_uc *pixels = stbi_load(imagePath.c_str(), &imageWidth, &imageHeight,
   333b2:	41 b8 04 00 00 00    	mov    $0x4,%r8d
Image VulkanApp::makeTextureImage() {
   333b8:	41 56                	push   %r14
   333ba:	41 55                	push   %r13
   333bc:	41 54                	push   %r12
   333be:	49 89 f4             	mov    %rsi,%r12
   333c1:	55                   	push   %rbp
   333c2:	53                   	push   %rbx
   333c3:	48 89 fb             	mov    %rdi,%rbx
   333c6:	48 81 ec f8 02 00 00 	sub    $0x2f8,%rsp
  stbi_uc *pixels = stbi_load(imagePath.c_str(), &imageWidth, &imageHeight,
   333cd:	49 8b 7c 24 60       	mov    0x60(%r12),%rdi
   333d2:	48 8d 4c 24 1c       	lea    0x1c(%rsp),%rcx
   333d7:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
   333dc:	48 8d 74 24 14       	lea    0x14(%rsp),%rsi
   333e1:	e8 8a bb ff ff       	call   2ef70 <stbi_load>
  VkDeviceSize imageSize = imageWidth * imageHeight * 4;
   333e6:	44 8b 6c 24 14       	mov    0x14(%rsp),%r13d
   333eb:	44 0f af 6c 24 18    	imul   0x18(%rsp),%r13d
   333f1:	41 c1 e5 02          	shl    $0x2,%r13d
  if (!pixels) {
   333f5:	48 85 c0             	test   %rax,%rax
   333f8:	0f 84 c6 57 fd ff    	je     8bc4 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x11c>
                                   VK_MEMORY_PROPERTY_HOST_COHERENT_BIT};
   333fe:	4d 8b bc 24 48 01 00 	mov    0x148(%r12),%r15
   33405:	00 
   33406:	49 89 c6             	mov    %rax,%r14
   33409:	4d 63 ed             	movslq %r13d,%r13
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   3340c:	31 d2                	xor    %edx,%edx
   3340e:	49 8b 84 24 50 01 00 	mov    0x150(%r12),%rax
   33415:	00 
      : _device{device} {
   33416:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   3341a:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
   33421:	00 
   33422:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
      : _device{device} {
   33427:	0f 11 84 24 c8 00 00 	movups %xmm0,0xc8(%rsp)
   3342e:	00 
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   3342f:	4c 89 ff             	mov    %r15,%rdi
    VkBufferCreateInfo bufferInfo{};
   33432:	66 0f ef c0          	pxor   %xmm0,%xmm0
   33436:	48 89 04 24          	mov    %rax,(%rsp)
      : _device{device} {
   3343a:	48 8d 05 ef d1 00 00 	lea    0xd1ef(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    VkBufferCreateInfo bufferInfo{};
   33441:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
      : _device{device} {
   33446:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   3344d:	00 
   3344e:	4c 89 bc 24 b0 00 00 	mov    %r15,0xb0(%rsp)
   33455:	00 
   33456:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
   3345d:	00 00 00 00 00 
   33462:	c6 84 24 d8 00 00 00 	movb   $0x0,0xd8(%rsp)
   33469:	00 
    VkBufferCreateInfo bufferInfo{};
   3346a:	c7 84 24 94 00 00 00 	movl   $0x0,0x94(%rsp)
   33471:	00 00 00 00 
    bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
   33475:	c7 44 24 60 0c 00 00 	movl   $0xc,0x60(%rsp)
   3347c:	00 
    bufferInfo.size = size;
   3347d:	4c 89 6c 24 78       	mov    %r13,0x78(%rsp)
    bufferInfo.usage = usage;
   33482:	c7 84 24 80 00 00 00 	movl   $0x1,0x80(%rsp)
   33489:	01 00 00 00 
    VkBufferCreateInfo bufferInfo{};
   3348d:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   33492:	0f 11 84 24 84 00 00 	movups %xmm0,0x84(%rsp)
   33499:	00 
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   3349a:	e8 71 30 fd ff       	call   6510 <vkCreateBuffer@plt>
   3349f:	85 c0                	test   %eax,%eax
   334a1:	0f 85 eb 56 fd ff    	jne    8b92 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0xea>
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
   334a7:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   334ae:	00 
   334af:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
   334b4:	4c 89 ff             	mov    %r15,%rdi
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   334b7:	48 8d ac 24 e0 00 00 	lea    0xe0(%rsp),%rbp
   334be:	00 
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
   334bf:	e8 ec 2b fd ff       	call   60b0 <vkGetBufferMemoryRequirements@plt>
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   334c4:	48 8b 3c 24          	mov    (%rsp),%rdi
    VkMemoryAllocateInfo allocInfo{};
   334c8:	66 0f ef c0          	pxor   %xmm0,%xmm0
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   334cc:	48 89 ee             	mov    %rbp,%rsi
    allocInfo.allocationSize = memoryRequirements.size;
   334cf:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    allocInfo.memoryTypeIndex = _findMemoryType(
   334d4:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
    VkMemoryAllocateInfo allocInfo{};
   334d9:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
    allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
   334de:	c7 44 24 40 05 00 00 	movl   $0x5,0x40(%rsp)
   334e5:	00 
    VkMemoryAllocateInfo allocInfo{};
   334e6:	0f 11 44 24 50       	movups %xmm0,0x50(%rsp)
    allocInfo.memoryTypeIndex = _findMemoryType(
   334eb:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
    allocInfo.allocationSize = memoryRequirements.size;
   334f0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   334f5:	e8 66 34 fd ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   334fa:	8b 94 24 e0 00 00 00 	mov    0xe0(%rsp),%edx
   33501:	85 d2                	test   %edx,%edx
   33503:	0f 84 ff 55 fd ff    	je     8b08 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x60>
      if (typeFilter & (1 << i) &&
   33509:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   3350e:	31 c9                	xor    %ecx,%ecx
      if (typeFilter & (1 << i) &&
   33510:	be 01 00 00 00       	mov    $0x1,%esi
   33515:	eb 16                	jmp    3352d <_ZN4rtvc9VulkanApp16makeTextureImageEv+0x17d>
   33517:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3351e:	00 00 
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   33520:	48 83 c1 01          	add    $0x1,%rcx
   33524:	48 39 ca             	cmp    %rcx,%rdx
   33527:	0f 84 db 55 fd ff    	je     8b08 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x60>
      if (typeFilter & (1 << i) &&
   3352d:	89 f0                	mov    %esi,%eax
   3352f:	d3 e0                	shl    %cl,%eax
   33531:	44 85 c0             	test   %r8d,%eax
   33534:	74 ea                	je     33520 <_ZN4rtvc9VulkanApp16makeTextureImageEv+0x170>
          (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
   33536:	8b 44 cd 04          	mov    0x4(%rbp,%rcx,8),%eax
   3353a:	83 e0 06             	and    $0x6,%eax
      if (typeFilter & (1 << i) &&
   3353d:	83 f8 06             	cmp    $0x6,%eax
   33540:	75 de                	jne    33520 <_ZN4rtvc9VulkanApp16makeTextureImageEv+0x170>
    allocInfo.memoryTypeIndex = _findMemoryType(
   33542:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   33546:	31 d2                	xor    %edx,%edx
   33548:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
   3354d:	4c 89 ff             	mov    %r15,%rdi
   33550:	48 8d 8c 24 b8 00 00 	lea    0xb8(%rsp),%rcx
   33557:	00 
   33558:	e8 73 34 fd ff       	call   69d0 <vkAllocateMemory@plt>
   3355d:	85 c0                	test   %eax,%eax
   3355f:	0f 85 cf 01 00 00    	jne    33734 <_ZN4rtvc9VulkanApp16makeTextureImageEv+0x384>
    vkBindBufferMemory(device, _buffer, _deviceMemory, 0);
   33565:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
   3356c:	00 
   3356d:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   33574:	00 
   33575:	31 c9                	xor    %ecx,%ecx
   33577:	4c 89 ff             	mov    %r15,%rdi
   3357a:	e8 e1 30 fd ff       	call   6660 <vkBindBufferMemory@plt>
    vkMapMemory(_device, _deviceMemory, _memoryOffset, size, flags, &data);
   3357f:	49 89 e9             	mov    %rbp,%r9
   33582:	45 31 c0             	xor    %r8d,%r8d
   33585:	4c 89 e9             	mov    %r13,%rcx
   33588:	48 8b 94 24 c0 00 00 	mov    0xc0(%rsp),%rdx
   3358f:	00 
   33590:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   33597:	00 
    _isOwner = true;
   33598:	c6 84 24 d8 00 00 00 	movb   $0x1,0xd8(%rsp)
   3359f:	01 
    vkMapMemory(_device, _deviceMemory, _memoryOffset, size, flags, &data);
   335a0:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   335a7:	00 
   335a8:	e8 f3 2e fd ff       	call   64a0 <vkMapMemory@plt>
    std::memcpy(data, pHostData, size);
   335ad:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
   335b4:	00 
   335b5:	4c 89 f6             	mov    %r14,%rsi
   335b8:	4c 89 ea             	mov    %r13,%rdx
   335bb:	e8 50 2e fd ff       	call   6410 <memcpy@plt>
    vkUnmapMemory(_device, _deviceMemory);
   335c0:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   335c7:	00 
   335c8:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   335cf:	00 
   335d0:	e8 2b 2e fd ff       	call   6400 <vkUnmapMemory@plt>
  stbi_image_free(pixels);
   335d5:	4c 89 f7             	mov    %r14,%rdi
   335d8:	e8 53 b9 ff ff       	call   2ef30 <stbi_image_free>
      {static_cast<uint32_t>(imageWidth), static_cast<uint32_t>(imageHeight),
   335dd:	66 0f 6e 44 24 14    	movd   0x14(%rsp),%xmm0
   335e3:	66 0f 6e 4c 24 18    	movd   0x18(%rsp),%xmm1
  Image(const Device &device, const CustomArgs &args) {
   335e9:	48 8d 05 30 d2 00 00 	lea    0xd230(%rip),%rax        # 40820 <_ZTVN4rtvc5ImageE+0x10>
  Image() = default;
   335f0:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
   335f7:	00 
   335f8:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
   335ff:	00 
    _initialize(device.ref(), device.physical(), args);
   33600:	49 8b 94 24 50 01 00 	mov    0x150(%r12),%rdx
   33607:	00 
   33608:	48 89 e9             	mov    %rbp,%rcx
   3360b:	48 89 df             	mov    %rbx,%rdi
   3360e:	66 0f 62 c1          	punpckldq %xmm1,%xmm0
   33612:	c6 43 38 00          	movb   $0x0,0x38(%rbx)
   33616:	49 8b b4 24 48 01 00 	mov    0x148(%r12),%rsi
   3361d:	00 
       VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT}};
   3361e:	66 0f d6 84 24 e0 00 	movq   %xmm0,0xe0(%rsp)
   33625:	00 00 
   33627:	66 0f 6f 05 b1 5b 00 	movdqa 0x5bb1(%rip),%xmm0        # 391e0 <_ZTSN4rtvc12FramebuffersE+0xb0>
   3362e:	00 
   3362f:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
   33636:	00 
   33637:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
   3363e:	00 
  Image(const Device &device, const CustomArgs &args) {
   3363f:	48 89 03             	mov    %rax,(%rbx)
   33642:	0f 11 84 24 e8 00 00 	movups %xmm0,0xe8(%rsp)
   33649:	00 
   3364a:	66 0f ef c0          	pxor   %xmm0,%xmm0
   3364e:	0f 11 43 28          	movups %xmm0,0x28(%rbx)
    _initialize(device.ref(), device.physical(), args);
   33652:	e8 49 d2 fd ff       	call   108a0 <_ZN4rtvc5Image11_initializeEP10VkDevice_TP18VkPhysicalDevice_TRKNS0_10CustomArgsE>
  transitionImageLayout(texImage.ref(), VK_FORMAT_R8G8_SRGB,
   33657:	48 8b 73 08          	mov    0x8(%rbx),%rsi
   3365b:	41 b8 07 00 00 00    	mov    $0x7,%r8d
   33661:	31 c9                	xor    %ecx,%ecx
   33663:	4c 89 e7             	mov    %r12,%rdi
   33666:	ba 16 00 00 00       	mov    $0x16,%edx
   3366b:	e8 30 f9 ff ff       	call   32fa0 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_>
  copyBufferToImage(stagingBuffer.ref(), texImage.ref(),
   33670:	48 8b 53 08          	mov    0x8(%rbx),%rdx
   33674:	44 8b 44 24 18       	mov    0x18(%rsp),%r8d
   33679:	4c 89 e7             	mov    %r12,%rdi
   3367c:	8b 4c 24 14          	mov    0x14(%rsp),%ecx
   33680:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   33687:	00 
   33688:	e8 53 fb ff ff       	call   331e0 <_ZN4rtvc9VulkanApp17copyBufferToImageEP10VkBuffer_TP9VkImage_Tjj>
  transitionImageLayout(texImage.ref(), VK_FORMAT_R8G8B8A8_SRGB,
   3368d:	48 8b 73 08          	mov    0x8(%rbx),%rsi
   33691:	41 b8 05 00 00 00    	mov    $0x5,%r8d
   33697:	b9 07 00 00 00       	mov    $0x7,%ecx
   3369c:	4c 89 e7             	mov    %r12,%rdi
   3369f:	ba 2b 00 00 00       	mov    $0x2b,%edx
   336a4:	e8 f7 f8 ff ff       	call   32fa0 <_ZN4rtvc9VulkanApp21transitionImageLayoutEP9VkImage_T8VkFormat13VkImageLayoutS4_>
  virtual ~Buffer() { _destroyVkData(); }
   336a9:	48 8d 05 80 cf 00 00 	lea    0xcf80(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
    if (_isOwner) {
   336b0:	80 bc 24 d8 00 00 00 	cmpb   $0x0,0xd8(%rsp)
   336b7:	00 
  virtual ~Buffer() { _destroyVkData(); }
   336b8:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   336bf:	00 
    if (_isOwner) {
   336c0:	75 1e                	jne    336e0 <_ZN4rtvc9VulkanApp16makeTextureImageEv+0x330>
}
   336c2:	48 81 c4 f8 02 00 00 	add    $0x2f8,%rsp
   336c9:	48 89 d8             	mov    %rbx,%rax
   336cc:	5b                   	pop    %rbx
   336cd:	5d                   	pop    %rbp
   336ce:	41 5c                	pop    %r12
   336d0:	41 5d                	pop    %r13
   336d2:	41 5e                	pop    %r14
   336d4:	41 5f                	pop    %r15
   336d6:	c3                   	ret
   336d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   336de:	00 00 
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
   336e0:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
   336e7:	00 
   336e8:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   336ef:	00 
   336f0:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   336f7:	00 
   336f8:	e8 63 2b fd ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
   336fd:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
   33704:	00 
   33705:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
   3370c:	00 
   3370d:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
   33714:	00 
   33715:	e8 96 2d fd ff       	call   64b0 <vkFreeMemory@plt>
  return texImage;
   3371a:	eb a6                	jmp    336c2 <_ZN4rtvc9VulkanApp16makeTextureImageEv+0x312>
  virtual ~Image() { _destroyVkData(); }
   3371c:	48 89 c5             	mov    %rax,%rbp
   3371f:	e9 84 53 fd ff       	jmp    8aa8 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold>
   33724:	48 89 c5             	mov    %rax,%rbp
   33727:	e9 c2 53 fd ff       	jmp    8aee <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x46>
  virtual ~Buffer() { _destroyVkData(); }
   3372c:	48 89 c5             	mov    %rax,%rbp
   3372f:	e9 8c 53 fd ff       	jmp    8ac0 <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x18>
   33734:	e9 01 54 fd ff       	jmp    8b3a <_ZN4rtvc9VulkanApp16makeTextureImageEv.cold+0x92>
   33739:	90                   	nop
   3373a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000033740 <_ZN4rtvc9VulkanApp6renderEv>:
void VulkanApp::render() {
   33740:	41 57                	push   %r15
  vkWaitForFences(device.ref(), 1, &sync.inFlightFence[sync.currentFrame].ref(),
   33742:	b9 01 00 00 00       	mov    $0x1,%ecx
   33747:	be 01 00 00 00       	mov    $0x1,%esi
   3374c:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
void VulkanApp::render() {
   33753:	41 56                	push   %r14
   33755:	41 55                	push   %r13
   33757:	41 54                	push   %r12
   33759:	55                   	push   %rbp
   3375a:	53                   	push   %rbx
   3375b:	48 89 fb             	mov    %rdi,%rbx
   3375e:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
	return *(this->_M_impl._M_start + __n);
   33765:	48 8b 97 10 03 00 00 	mov    0x310(%rdi),%rdx
  VkResult result = vkAcquireNextImageKHR(
   3376c:	48 8d 6c 24 0c       	lea    0xc(%rsp),%rbp
   33771:	48 c1 e2 05          	shl    $0x5,%rdx
   33775:	48 03 97 f8 02 00 00 	add    0x2f8(%rdi),%rdx
  vkWaitForFences(device.ref(), 1, &sync.inFlightFence[sync.currentFrame].ref(),
   3377c:	48 8b bf 48 01 00 00 	mov    0x148(%rdi),%rdi
   33783:	e8 38 2b fd ff       	call   62c0 <vkWaitForFences@plt>
  VkResult result = vkAcquireNextImageKHR(
   33788:	48 8b 83 10 03 00 00 	mov    0x310(%rbx),%rax
   3378f:	45 31 c0             	xor    %r8d,%r8d
   33792:	49 89 e9             	mov    %rbp,%r9
   33795:	48 8b b3 80 01 00 00 	mov    0x180(%rbx),%rsi
   3379c:	48 8b bb 48 01 00 00 	mov    0x148(%rbx),%rdi
   337a3:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   337aa:	48 c1 e0 05          	shl    $0x5,%rax
   337ae:	48 03 83 c8 02 00 00 	add    0x2c8(%rbx),%rax
   337b5:	48 8b 08             	mov    (%rax),%rcx
   337b8:	e8 33 2a fd ff       	call   61f0 <vkAcquireNextImageKHR@plt>
  if (result == VK_SUBOPTIMAL_KHR || result == VK_ERROR_OUT_OF_DATE_KHR) {
   337bd:	3d eb cd 9a 3b       	cmp    $0x3b9acdeb,%eax
   337c2:	0f 84 50 02 00 00    	je     33a18 <_ZN4rtvc9VulkanApp6renderEv+0x2d8>
   337c8:	3d 14 32 65 c4       	cmp    $0xc4653214,%eax
   337cd:	0f 84 45 02 00 00    	je     33a18 <_ZN4rtvc9VulkanApp6renderEv+0x2d8>
  } else if (result != VK_SUCCESS) {
   337d3:	85 c0                	test   %eax,%eax
   337d5:	0f 85 73 54 fd ff    	jne    8c4e <_ZN4rtvc9VulkanApp6renderEv.cold+0x32>
   337db:	48 8b 93 10 03 00 00 	mov    0x310(%rbx),%rdx
  vkResetFences(device.ref(), 1, &sync.inFlightFence[sync.currentFrame].ref());
   337e2:	48 8b bb 48 01 00 00 	mov    0x148(%rbx),%rdi
   337e9:	be 01 00 00 00       	mov    $0x1,%esi
   337ee:	48 c1 e2 05          	shl    $0x5,%rdx
   337f2:	48 03 93 f8 02 00 00 	add    0x2f8(%rbx),%rdx
   337f9:	e8 d2 30 fd ff       	call   68d0 <vkResetFences@plt>
   337fe:	48 8b 93 10 03 00 00 	mov    0x310(%rbx),%rdx
  vkResetCommandBuffer(commandBuffers[sync.currentFrame], 0);
   33805:	48 8b 83 b0 02 00 00 	mov    0x2b0(%rbx),%rax
   3380c:	31 f6                	xor    %esi,%esi
   3380e:	48 8b 3c d0          	mov    (%rax,%rdx,8),%rdi
   33812:	e8 c9 2e fd ff       	call   66e0 <vkResetCommandBuffer@plt>
   33817:	48 8b 93 10 03 00 00 	mov    0x310(%rbx),%rdx
  recordCommandBuffer(commandBuffers[sync.currentFrame], imageIndex);
   3381e:	48 8b 83 b0 02 00 00 	mov    0x2b0(%rbx),%rax
   33825:	48 89 df             	mov    %rbx,%rdi
   33828:	48 8b 34 d0          	mov    (%rax,%rdx,8),%rsi
   3382c:	8b 54 24 0c          	mov    0xc(%rsp),%edx
   33830:	e8 1b e3 ff ff       	call   31b50 <_ZN4rtvc9VulkanApp19recordCommandBufferEP17VkCommandBuffer_Tj>
      sync.imageAvailableSemaphore[sync.currentFrame].ref()};
   33835:	48 8b 83 10 03 00 00 	mov    0x310(%rbx),%rax
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   3383c:	bf 08 00 00 00       	mov    $0x8,%edi
   33841:	48 c1 e0 05          	shl    $0x5,%rax
   33845:	48 03 83 c8 02 00 00 	add    0x2c8(%rbx),%rax
   3384c:	4c 8b 20             	mov    (%rax),%r12
   3384f:	e8 ec 2c fd ff       	call   6540 <_Znwm@plt>
   33854:	bf 04 00 00 00       	mov    $0x4,%edi
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   33859:	4c 89 20             	mov    %r12,(%rax)
   3385c:	49 89 c5             	mov    %rax,%r13
   3385f:	e8 dc 2c fd ff       	call   6540 <_Znwm@plt>
   33864:	c7 00 00 04 00 00    	movl   $0x400,(%rax)
   3386a:	49 89 c6             	mov    %rax,%r14
      sync.renderFinishedSemaphore[sync.currentFrame].ref()};
   3386d:	48 8b 83 10 03 00 00 	mov    0x310(%rbx),%rax
   33874:	bf 08 00 00 00       	mov    $0x8,%edi
   33879:	48 c1 e0 05          	shl    $0x5,%rax
   3387d:	48 03 83 e0 02 00 00 	add    0x2e0(%rbx),%rax
   33884:	4c 8b 38             	mov    (%rax),%r15
   33887:	e8 b4 2c fd ff       	call   6540 <_Znwm@plt>
   3388c:	4c 89 38             	mov    %r15,(%rax)
  updateUniformBuffer(static_cast<uint32_t>(sync.currentFrame));
   3388f:	8b b3 10 03 00 00    	mov    0x310(%rbx),%esi
   33895:	48 89 df             	mov    %rbx,%rdi
   33898:	49 89 c4             	mov    %rax,%r12
   3389b:	e8 40 ef ff ff       	call   327e0 <_ZN4rtvc9VulkanApp19updateUniformBufferEj>
  submitInfo.pCommandBuffers = &commandBuffers[sync.currentFrame];
   338a0:	48 8b 83 10 03 00 00 	mov    0x310(%rbx),%rax
  VkSubmitInfo submitInfo{};
   338a7:	66 0f ef c0          	pxor   %xmm0,%xmm0
   338ab:	48 8b 93 b0 02 00 00 	mov    0x2b0(%rbx),%rdx
  if (vkQueueSubmit(device.queue(), submitCount, &submitInfo,
   338b2:	be 01 00 00 00       	mov    $0x1,%esi
  VkSubmitInfo submitInfo{};
   338b7:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
  if (vkQueueSubmit(device.queue(), submitCount, &submitInfo,
   338bc:	48 8b bb 58 01 00 00 	mov    0x158(%rbx),%rdi
   338c3:	48 8d 14 c2          	lea    (%rdx,%rax,8),%rdx
   338c7:	48 c1 e0 05          	shl    $0x5,%rax
  VkSubmitInfo submitInfo{};
   338cb:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
  if (vkQueueSubmit(device.queue(), submitCount, &submitInfo,
   338d0:	48 03 83 f8 02 00 00 	add    0x2f8(%rbx),%rax
  VkSubmitInfo submitInfo{};
   338d7:	0f 11 84 24 80 00 00 	movups %xmm0,0x80(%rsp)
   338de:	00 
   338df:	0f 11 44 24 54       	movups %xmm0,0x54(%rsp)
  if (vkQueueSubmit(device.queue(), submitCount, &submitInfo,
   338e4:	48 8b 08             	mov    (%rax),%rcx
  submitInfo.pCommandBuffers = &commandBuffers[sync.currentFrame];
   338e7:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
   338ee:	00 
  if (vkQueueSubmit(device.queue(), submitCount, &submitInfo,
   338ef:	48 8d 54 24 50       	lea    0x50(%rsp),%rdx
  submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
   338f4:	c7 44 24 50 04 00 00 	movl   $0x4,0x50(%rsp)
   338fb:	00 
  submitInfo.waitSemaphoreCount = static_cast<uint32_t>(waitSemaphores.size());
   338fc:	c7 44 24 60 01 00 00 	movl   $0x1,0x60(%rsp)
   33903:	00 
  submitInfo.pWaitSemaphores = waitSemaphores.data();
   33904:	4c 89 6c 24 68       	mov    %r13,0x68(%rsp)
  submitInfo.pWaitDstStageMask = waitStages.data();
   33909:	4c 89 74 24 70       	mov    %r14,0x70(%rsp)
  submitInfo.commandBufferCount = 1;
   3390e:	c7 44 24 78 01 00 00 	movl   $0x1,0x78(%rsp)
   33915:	00 
  submitInfo.signalSemaphoreCount =
   33916:	c7 84 24 88 00 00 00 	movl   $0x1,0x88(%rsp)
   3391d:	01 00 00 00 
  submitInfo.pSignalSemaphores = signalSemaphores.data();
   33921:	4c 89 a4 24 90 00 00 	mov    %r12,0x90(%rsp)
   33928:	00 
  if (vkQueueSubmit(device.queue(), submitCount, &submitInfo,
   33929:	e8 22 2e fd ff       	call   6750 <vkQueueSubmit@plt>
   3392e:	85 c0                	test   %eax,%eax
   33930:	0f 85 9c 53 fd ff    	jne    8cd2 <_ZN4rtvc9VulkanApp6renderEv.cold+0xb6>
  presentInfo.swapchainCount = swapchainCount;
   33936:	8b 43 58             	mov    0x58(%rbx),%eax
  VkPresentInfoKHR presentInfo{};
   33939:	66 0f ef c0          	pxor   %xmm0,%xmm0
  result = vkQueuePresentKHR(device.queue(), &presentInfo);
   3393d:	48 8b bb 58 01 00 00 	mov    0x158(%rbx),%rdi
   33944:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  VkPresentInfoKHR presentInfo{};
   33949:	0f 11 44 24 24       	movups %xmm0,0x24(%rsp)
  presentInfo.swapchainCount = swapchainCount;
   3394e:	89 44 24 30          	mov    %eax,0x30(%rsp)
  const VkSwapchainKHR &ref() const noexcept { return _swapchain; }
   33952:	48 8d 83 80 01 00 00 	lea    0x180(%rbx),%rax
  VkPresentInfoKHR presentInfo{};
   33959:	0f 11 44 24 34       	movups %xmm0,0x34(%rsp)
   3395e:	0f 11 44 24 14       	movups %xmm0,0x14(%rsp)
   33963:	0f 11 44 24 40       	movups %xmm0,0x40(%rsp)
  presentInfo.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
   33968:	c7 44 24 10 e9 cd 9a 	movl   $0x3b9acde9,0x10(%rsp)
   3396f:	3b 
  presentInfo.waitSemaphoreCount =
   33970:	c7 44 24 20 01 00 00 	movl   $0x1,0x20(%rsp)
   33977:	00 
  presentInfo.pWaitSemaphores = signalSemaphores.data();
   33978:	4c 89 64 24 28       	mov    %r12,0x28(%rsp)
   3397d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  presentInfo.pImageIndices = &imageIndex;
   33982:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  result = vkQueuePresentKHR(device.queue(), &presentInfo);
   33987:	e8 c4 2f fd ff       	call   6950 <vkQueuePresentKHR@plt>
  if (result == VK_SUBOPTIMAL_KHR || result == VK_ERROR_OUT_OF_DATE_KHR ||
   3398c:	3d eb cd 9a 3b       	cmp    $0x3b9acdeb,%eax
   33991:	74 6d                	je     33a00 <_ZN4rtvc9VulkanApp6renderEv+0x2c0>
   33993:	3d 14 32 65 c4       	cmp    $0xc4653214,%eax
   33998:	74 66                	je     33a00 <_ZN4rtvc9VulkanApp6renderEv+0x2c0>
   3399a:	80 bb 88 02 00 00 00 	cmpb   $0x0,0x288(%rbx)
   339a1:	75 5d                	jne    33a00 <_ZN4rtvc9VulkanApp6renderEv+0x2c0>
  } else if (result != VK_SUCCESS) {
   339a3:	85 c0                	test   %eax,%eax
   339a5:	0f 85 71 52 fd ff    	jne    8c1c <_ZN4rtvc9VulkanApp6renderEv.cold>
  sync.currentFrame = (sync.currentFrame + 1) % maxFramesInFlight;
   339ab:	48 8b 83 10 03 00 00 	mov    0x310(%rbx),%rax
   339b2:	31 d2                	xor    %edx,%edx
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   339b4:	be 08 00 00 00       	mov    $0x8,%esi
   339b9:	4c 89 e7             	mov    %r12,%rdi
   339bc:	48 83 c0 01          	add    $0x1,%rax
   339c0:	48 f7 73 50          	divq   0x50(%rbx)
   339c4:	48 89 93 10 03 00 00 	mov    %rdx,0x310(%rbx)
   339cb:	e8 90 2b fd ff       	call   6560 <_ZdlPvm@plt>
   339d0:	be 04 00 00 00       	mov    $0x4,%esi
   339d5:	4c 89 f7             	mov    %r14,%rdi
   339d8:	e8 83 2b fd ff       	call   6560 <_ZdlPvm@plt>
   339dd:	be 08 00 00 00       	mov    $0x8,%esi
   339e2:	4c 89 ef             	mov    %r13,%rdi
   339e5:	e8 76 2b fd ff       	call   6560 <_ZdlPvm@plt>
}
   339ea:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
   339f1:	5b                   	pop    %rbx
   339f2:	5d                   	pop    %rbp
   339f3:	41 5c                	pop    %r12
   339f5:	41 5d                	pop    %r13
   339f7:	41 5e                	pop    %r14
   339f9:	41 5f                	pop    %r15
   339fb:	c3                   	ret
   339fc:	0f 1f 40 00          	nopl   0x0(%rax)
    framebufferResized = false;
   33a00:	c6 83 88 02 00 00 00 	movb   $0x0,0x288(%rbx)
    recreateSwapchain();
   33a07:	48 89 df             	mov    %rbx,%rdi
   33a0a:	e8 91 d7 ff ff       	call   311a0 <_ZN4rtvc9VulkanApp17recreateSwapchainEv>
   33a0f:	eb 9a                	jmp    339ab <_ZN4rtvc9VulkanApp6renderEv+0x26b>
   33a11:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    recreateSwapchain();
   33a18:	48 89 df             	mov    %rbx,%rdi
   33a1b:	e8 80 d7 ff ff       	call   311a0 <_ZN4rtvc9VulkanApp17recreateSwapchainEv>
    return;
   33a20:	eb c8                	jmp    339ea <_ZN4rtvc9VulkanApp6renderEv+0x2aa>
   33a22:	e9 59 52 fd ff       	jmp    8c80 <_ZN4rtvc9VulkanApp6renderEv.cold+0x64>
   33a27:	48 89 c3             	mov    %rax,%rbx
   33a2a:	e9 6e 52 fd ff       	jmp    8c9d <_ZN4rtvc9VulkanApp6renderEv.cold+0x81>
   33a2f:	48 89 c3             	mov    %rax,%rbx
   33a32:	e9 73 52 fd ff       	jmp    8caa <_ZN4rtvc9VulkanApp6renderEv.cold+0x8e>
   33a37:	90                   	nop
   33a38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   33a3f:	00 

0000000000033a40 <_ZN4rtvc9VulkanApp3runEv>:
void VulkanApp::run() {
   33a40:	53                   	push   %rbx
   33a41:	48 89 fb             	mov    %rdi,%rbx
  while (!glfwWindowShouldClose(window.ref())) {
   33a44:	eb 17                	jmp    33a5d <_ZN4rtvc9VulkanApp3runEv+0x1d>
   33a46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   33a4d:	00 00 00 
    glfwPollEvents();
   33a50:	e8 9b 2a fd ff       	call   64f0 <glfwPollEvents@plt>
    render();
   33a55:	48 89 df             	mov    %rbx,%rdi
   33a58:	e8 e3 fc ff ff       	call   33740 <_ZN4rtvc9VulkanApp6renderEv>
  while (!glfwWindowShouldClose(window.ref())) {
   33a5d:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
   33a64:	e8 67 30 fd ff       	call   6ad0 <glfwWindowShouldClose@plt>
   33a69:	85 c0                	test   %eax,%eax
   33a6b:	74 e3                	je     33a50 <_ZN4rtvc9VulkanApp3runEv+0x10>
   33a6d:	48 8b bb 48 01 00 00 	mov    0x148(%rbx),%rdi
}
   33a74:	5b                   	pop    %rbx
   33a75:	e9 76 26 fd ff       	jmp    60f0 <vkDeviceWaitIdle@plt>
   33a7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000033a80 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv>:
std::vector<vkw::Buffer> VulkanApp::makeUniformBuffers() {
   33a80:	41 57                	push   %r15
   33a82:	41 56                	push   %r14
   33a84:	41 55                	push   %r13
   33a86:	41 54                	push   %r12
   33a88:	55                   	push   %rbp
   33a89:	53                   	push   %rbx
   33a8a:	48 81 ec f8 02 00 00 	sub    $0x2f8,%rsp
  std::vector<vkw::Buffer> buffers{maxFramesInFlight};
   33a91:	4c 8b 76 50          	mov    0x50(%rsi),%r14
std::vector<vkw::Buffer> VulkanApp::makeUniformBuffers() {
   33a95:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   33a9a:	4c 89 f0             	mov    %r14,%rax
   33a9d:	48 c1 e8 39          	shr    $0x39,%rax
   33aa1:	0f 85 59 02 00 00    	jne    33d00 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv+0x280>
	: _M_start(), _M_finish(), _M_end_of_storage()
   33aa7:	66 0f ef c0          	pxor   %xmm0,%xmm0
   33aab:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
   33ab2:	00 
   33ab3:	0f 11 07             	movups %xmm0,(%rdi)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   33ab6:	4d 85 f6             	test   %r14,%r14
   33ab9:	0f 84 2a 02 00 00    	je     33ce9 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv+0x269>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   33abf:	49 c1 e6 06          	shl    $0x6,%r14
   33ac3:	49 89 f7             	mov    %rsi,%r15
   33ac6:	4c 89 f7             	mov    %r14,%rdi
   33ac9:	e8 72 2a fd ff       	call   6540 <_Znwm@plt>
   33ace:	66 0f ef c0          	pxor   %xmm0,%xmm0
   33ad2:	49 89 c4             	mov    %rax,%r12
	this->_M_impl._M_start = this->_M_allocate(__n);
   33ad5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   33ada:	4d 01 e6             	add    %r12,%r14
	this->_M_impl._M_start = this->_M_allocate(__n);
   33add:	4c 89 20             	mov    %r12,(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   33ae0:	4c 89 70 10          	mov    %r14,0x10(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   33ae4:	4c 89 e0             	mov    %r12,%rax
   33ae7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   33aee:	00 00 
  Buffer() = default;
   33af0:	48 8d 3d 39 cb 00 00 	lea    0xcb39(%rip),%rdi        # 40630 <_ZTVN3vkw6BufferE+0x10>
   33af7:	0f 11 00             	movups %xmm0,(%rax)
	      for (; __n > 0; --__n, (void) ++__cur)
   33afa:	48 83 c0 40          	add    $0x40,%rax
   33afe:	0f 11 40 d0          	movups %xmm0,-0x30(%rax)
   33b02:	0f 11 40 e0          	movups %xmm0,-0x20(%rax)
   33b06:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
   33b0a:	48 89 78 c0          	mov    %rdi,-0x40(%rax)
   33b0e:	4c 39 f0             	cmp    %r14,%rax
   33b11:	75 dd                	jne    33af0 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv+0x70>
	this->_M_impl._M_finish =
   33b13:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   33b18:	4c 89 70 08          	mov    %r14,0x8(%rax)
  for (auto &buffer : buffers) {
   33b1c:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
   33b23:	00 
   33b24:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   33b29:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
   33b2e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
   33b33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   33b38:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
   33b3d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    VkBufferCreateInfo bufferInfo{};
   33b42:	66 0f ef c0          	pxor   %xmm0,%xmm0
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   33b46:	31 d2                	xor    %edx,%edx
                  VK_MEMORY_PROPERTY_HOST_COHERENT_BIT};
   33b48:	4d 8b af 48 01 00 00 	mov    0x148(%r15),%r13
   33b4f:	49 8b 87 50 01 00 00 	mov    0x150(%r15),%rax
      : _device{device} {
   33b56:	66 0f ef c9          	pxor   %xmm1,%xmm1
    VkBufferCreateInfo bufferInfo{};
   33b5a:	0f 11 44 24 74       	movups %xmm0,0x74(%rsp)
      : _device{device} {
   33b5f:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
   33b66:	00 00 00 00 00 
   33b6b:	48 89 04 24          	mov    %rax,(%rsp)
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   33b6f:	4c 89 ef             	mov    %r13,%rdi
      : _device{device} {
   33b72:	48 8d 05 b7 ca 00 00 	lea    0xcab7(%rip),%rax        # 40630 <_ZTVN3vkw6BufferE+0x10>
   33b79:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   33b80:	00 
   33b81:	4c 89 ac 24 b0 00 00 	mov    %r13,0xb0(%rsp)
   33b88:	00 
   33b89:	c6 84 24 d8 00 00 00 	movb   $0x0,0xd8(%rsp)
   33b90:	00 
    VkBufferCreateInfo bufferInfo{};
   33b91:	c7 84 24 94 00 00 00 	movl   $0x0,0x94(%rsp)
   33b98:	00 00 00 00 
    bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
   33b9c:	c7 44 24 60 0c 00 00 	movl   $0xc,0x60(%rsp)
   33ba3:	00 
    bufferInfo.size = size;
   33ba4:	48 c7 44 24 78 c0 00 	movq   $0xc0,0x78(%rsp)
   33bab:	00 00 
    bufferInfo.usage = usage;
   33bad:	c7 84 24 80 00 00 00 	movl   $0x10,0x80(%rsp)
   33bb4:	10 00 00 00 
      : _device{device} {
   33bb8:	0f 11 8c 24 c8 00 00 	movups %xmm1,0xc8(%rsp)
   33bbf:	00 
    VkBufferCreateInfo bufferInfo{};
   33bc0:	0f 11 44 24 64       	movups %xmm0,0x64(%rsp)
   33bc5:	0f 11 84 24 84 00 00 	movups %xmm0,0x84(%rsp)
   33bcc:	00 
    if (vkCreateBuffer(device, &bufferInfo, nullptr, &_buffer) != VK_SUCCESS) {
   33bcd:	e8 3e 29 fd ff       	call   6510 <vkCreateBuffer@plt>
   33bd2:	85 c0                	test   %eax,%eax
   33bd4:	0f 85 99 51 fd ff    	jne    8d73 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv.cold+0x69>
    vkGetBufferMemoryRequirements(device, _buffer, &memoryRequirements);
   33bda:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   33be1:	00 
   33be2:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
   33be7:	4c 89 ef             	mov    %r13,%rdi
   33bea:	e8 c1 24 fd ff       	call   60b0 <vkGetBufferMemoryRequirements@plt>
    allocInfo.allocationSize = memoryRequirements.size;
   33bef:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   33bf4:	48 8d ac 24 e0 00 00 	lea    0xe0(%rsp),%rbp
   33bfb:	00 
   33bfc:	48 8b 3c 24          	mov    (%rsp),%rdi
    VkMemoryAllocateInfo allocInfo{};
   33c00:	66 0f ef c0          	pxor   %xmm0,%xmm0
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   33c04:	48 89 ee             	mov    %rbp,%rsi
    VkMemoryAllocateInfo allocInfo{};
   33c07:	0f 11 44 24 44       	movups %xmm0,0x44(%rsp)
    allocInfo.memoryTypeIndex = _findMemoryType(
   33c0c:	8b 5c 24 30          	mov    0x30(%rsp),%ebx
    VkMemoryAllocateInfo allocInfo{};
   33c10:	0f 11 44 24 50       	movups %xmm0,0x50(%rsp)
    allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
   33c15:	c7 44 24 40 05 00 00 	movl   $0x5,0x40(%rsp)
   33c1c:	00 
    allocInfo.allocationSize = memoryRequirements.size;
   33c1d:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   33c22:	e8 39 2d fd ff       	call   6960 <vkGetPhysicalDeviceMemoryProperties@plt>
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   33c27:	8b 94 24 e0 00 00 00 	mov    0xe0(%rsp),%edx
   33c2e:	85 d2                	test   %edx,%edx
   33c30:	0f 84 d4 50 fd ff    	je     8d0a <_ZN4rtvc9VulkanApp18makeUniformBuffersEv.cold>
   33c36:	31 c9                	xor    %ecx,%ecx
      if (typeFilter & (1 << i) &&
   33c38:	be 01 00 00 00       	mov    $0x1,%esi
   33c3d:	eb 0e                	jmp    33c4d <_ZN4rtvc9VulkanApp18makeUniformBuffersEv+0x1cd>
   33c3f:	90                   	nop
    for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   33c40:	48 83 c1 01          	add    $0x1,%rcx
   33c44:	48 39 ca             	cmp    %rcx,%rdx
   33c47:	0f 84 bd 50 fd ff    	je     8d0a <_ZN4rtvc9VulkanApp18makeUniformBuffersEv.cold>
      if (typeFilter & (1 << i) &&
   33c4d:	89 f0                	mov    %esi,%eax
   33c4f:	d3 e0                	shl    %cl,%eax
   33c51:	85 d8                	test   %ebx,%eax
   33c53:	74 eb                	je     33c40 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv+0x1c0>
          (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
   33c55:	8b 44 cd 04          	mov    0x4(%rbp,%rcx,8),%eax
   33c59:	83 e0 06             	and    $0x6,%eax
      if (typeFilter & (1 << i) &&
   33c5c:	83 f8 06             	cmp    $0x6,%eax
   33c5f:	75 df                	jne    33c40 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv+0x1c0>
    allocInfo.memoryTypeIndex = _findMemoryType(
   33c61:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    if (vkAllocateMemory(device, &allocInfo, nullptr, &_deviceMemory) !=
   33c65:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
   33c6a:	31 d2                	xor    %edx,%edx
   33c6c:	4c 89 ef             	mov    %r13,%rdi
   33c6f:	48 8d 8c 24 b8 00 00 	lea    0xb8(%rsp),%rcx
   33c76:	00 
   33c77:	e8 54 2d fd ff       	call   69d0 <vkAllocateMemory@plt>
   33c7c:	85 c0                	test   %eax,%eax
   33c7e:	0f 85 88 00 00 00    	jne    33d0c <_ZN4rtvc9VulkanApp18makeUniformBuffersEv+0x28c>
    vkBindBufferMemory(device, _buffer, _deviceMemory, 0);
   33c84:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
   33c8b:	00 
   33c8c:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
   33c93:	00 
   33c94:	31 c9                	xor    %ecx,%ecx
   33c96:	4c 89 ef             	mov    %r13,%rdi
   33c99:	e8 c2 29 fd ff       	call   6660 <vkBindBufferMemory@plt>
    _deviceMemory = rhs._deviceMemory;
   33c9e:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
   33ca5:	00 
      _isOwner = true;
   33ca6:	41 c6 44 24 38 01    	movb   $0x1,0x38(%r12)

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
   33cac:	49 83 c4 40          	add    $0x40,%r12
    _buffer = rhs._buffer;
   33cb0:	f3 0f 6f 94 24 a8 00 	movdqu 0xa8(%rsp),%xmm2
   33cb7:	00 00 
    _pBufferAllocator = rhs._pBufferAllocator;
   33cb9:	f3 0f 6f 9c 24 c8 00 	movdqu 0xc8(%rsp),%xmm3
   33cc0:	00 00 
    _deviceMemory = rhs._deviceMemory;
   33cc2:	49 89 44 24 d8       	mov    %rax,-0x28(%r12)
    _memoryOffset = rhs._memoryOffset;
   33cc7:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
   33cce:	00 
    _buffer = rhs._buffer;
   33ccf:	41 0f 11 54 24 c8    	movups %xmm2,-0x38(%r12)
    _memoryOffset = rhs._memoryOffset;
   33cd5:	49 89 44 24 e0       	mov    %rax,-0x20(%r12)
    _pBufferAllocator = rhs._pBufferAllocator;
   33cda:	41 0f 11 5c 24 e8    	movups %xmm3,-0x18(%r12)
  for (auto &buffer : buffers) {
   33ce0:	4d 39 f4             	cmp    %r14,%r12
   33ce3:	0f 85 4f fe ff ff    	jne    33b38 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv+0xb8>
}
   33ce9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   33cee:	48 81 c4 f8 02 00 00 	add    $0x2f8,%rsp
   33cf5:	5b                   	pop    %rbx
   33cf6:	5d                   	pop    %rbp
   33cf7:	41 5c                	pop    %r12
   33cf9:	41 5d                	pop    %r13
   33cfb:	41 5e                	pop    %r14
   33cfd:	41 5f                	pop    %r15
   33cff:	c3                   	ret
	  __throw_length_error(
   33d00:	48 8d 3d e9 38 00 00 	lea    0x38e9(%rip),%rdi        # 375f0 <_ZTSN3vkw10ImageViewsE+0x220>
   33d07:	e8 74 25 fd ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
   33d0c:	e9 2b 50 fd ff       	jmp    8d3c <_ZN4rtvc9VulkanApp18makeUniformBuffersEv.cold+0x32>
   33d11:	e9 58 50 fd ff       	jmp    8d6e <_ZN4rtvc9VulkanApp18makeUniformBuffersEv.cold+0x64>
   33d16:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   33d1d:	00 00 00 

0000000000033d20 <_ZN4rtvc9VulkanAppC1Ev>:
VulkanApp::VulkanApp() {
   33d20:	41 57                	push   %r15
	: _M_start(), _M_finish(), _M_end_of_storage()
   33d22:	66 0f ef c0          	pxor   %xmm0,%xmm0
   33d26:	41 56                	push   %r14
   33d28:	41 55                	push   %r13
   33d2a:	41 54                	push   %r12
   33d2c:	55                   	push   %rbp
   33d2d:	53                   	push   %rbx
   33d2e:	48 89 fb             	mov    %rdi,%rbx
   33d31:	48 81 ec 58 04 00 00 	sub    $0x458,%rsp
   33d38:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
   33d3f:	00 
   33d40:	0f 11 07             	movups %xmm0,(%rdi)
   33d43:	bf 08 00 00 00       	mov    $0x8,%edi
   33d48:	e8 f3 27 fd ff       	call   6540 <_Znwm@plt>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   33d4d:	48 8d 50 08          	lea    0x8(%rax),%rdx
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   33d51:	48 89 03             	mov    %rax,(%rbx)
	: _M_start(), _M_finish(), _M_end_of_storage()
   33d54:	66 0f ef c0          	pxor   %xmm0,%xmm0
   33d58:	bf 10 00 00 00       	mov    $0x10,%edi
   33d5d:	48 8d 0d 32 51 00 00 	lea    0x5132(%rip),%rcx        # 38e96 <_ZL11stbi__bmask+0x716>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   33d64:	48 89 53 10          	mov    %rdx,0x10(%rbx)
   33d68:	48 89 08             	mov    %rcx,(%rax)
	  this->_M_impl._M_finish =
   33d6b:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	: _M_start(), _M_finish(), _M_end_of_storage()
   33d6f:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
   33d76:	00 
   33d77:	0f 11 43 18          	movups %xmm0,0x18(%rbx)
   33d7b:	e8 c0 27 fd ff       	call   6540 <_Znwm@plt>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   33d80:	48 8d 50 10          	lea    0x10(%rax),%rdx
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   33d84:	48 89 43 18          	mov    %rax,0x18(%rbx)
	: _M_start(), _M_finish(), _M_end_of_storage()
   33d88:	66 0f ef c0          	pxor   %xmm0,%xmm0
   33d8c:	66 0f 6f 2d 8c c9 00 	movdqa 0xc98c(%rip),%xmm5        # 40720 <C.74.0>
   33d93:	00 
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   33d94:	48 89 53 28          	mov    %rdx,0x28(%rbx)
   33d98:	bf 10 00 00 00       	mov    $0x10,%edi
	  this->_M_impl._M_finish =
   33d9d:	48 89 53 20          	mov    %rdx,0x20(%rbx)
	: _M_start(), _M_finish(), _M_end_of_storage()
   33da1:	48 c7 43 40 00 00 00 	movq   $0x0,0x40(%rbx)
   33da8:	00 
   33da9:	0f 11 28             	movups %xmm5,(%rax)
   33dac:	0f 11 43 30          	movups %xmm0,0x30(%rbx)
   33db0:	e8 8b 27 fd ff       	call   6540 <_Znwm@plt>
   33db5:	66 0f 6f 35 53 c9 00 	movdqa 0xc953(%rip),%xmm6        # 40710 <C.75.1>
   33dbc:	00 
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   33dbd:	48 8d 50 10          	lea    0x10(%rax),%rdx
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   33dc1:	48 89 43 30          	mov    %rax,0x30(%rbx)
   33dc5:	4c 8d 63 60          	lea    0x60(%rbx),%r12
      { return _M_string_length; }
   33dc9:	48 8b 2d b8 d9 00 00 	mov    0xd9b8(%rip),%rbp        # 41788 <_ZN3vkh17absoluteDirectoryB5cxx11E+0x8>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   33dd0:	48 89 53 40          	mov    %rdx,0x40(%rbx)
   33dd4:	0f 11 30             	movups %xmm6,(%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33dd7:	48 8d 43 70          	lea    0x70(%rbx),%rax
      { return _M_dataplus._M_p; }
   33ddb:	4c 8b 2d 9e d9 00 00 	mov    0xd99e(%rip),%r13        # 41780 <_ZN3vkh17absoluteDirectoryB5cxx11E>
	  this->_M_impl._M_finish =
   33de2:	48 89 53 38          	mov    %rdx,0x38(%rbx)
   33de6:	c7 43 48 00 00 00 00 	movl   $0x0,0x48(%rbx)
   33ded:	48 c7 43 50 02 00 00 	movq   $0x2,0x50(%rbx)
   33df4:	00 
   33df5:	c7 43 58 01 00 00 00 	movl   $0x1,0x58(%rbx)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33dfc:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   33e01:	48 89 43 60          	mov    %rax,0x60(%rbx)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   33e05:	48 89 ac 24 10 01 00 	mov    %rbp,0x110(%rsp)
   33e0c:	00 
	if (__dnew > size_type(_S_local_capacity))
   33e0d:	48 83 fd 0f          	cmp    $0xf,%rbp
   33e11:	0f 87 79 0b 00 00    	ja     34990 <_ZN4rtvc9VulkanAppC1Ev+0xc70>
	if (__n == 1)
   33e17:	48 83 fd 01          	cmp    $0x1,%rbp
   33e1b:	0f 85 2f 0b 00 00    	jne    34950 <_ZN4rtvc9VulkanAppC1Ev+0xc30>
   33e21:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
   33e26:	88 43 70             	mov    %al,0x70(%rbx)
      { return _M_dataplus._M_p; }
   33e29:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
      { _M_string_length = __length; }
   33e2e:	48 89 6b 68          	mov    %rbp,0x68(%rbx)
   33e32:	c6 04 28 00          	movb   $0x0,(%rax,%rbp,1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   33e36:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
   33e3d:	ff ff 3f 
   33e40:	48 2b 43 68          	sub    0x68(%rbx),%rax
   33e44:	48 83 f8 1f          	cmp    $0x1f,%rax
   33e48:	0f 86 83 0b 00 00    	jbe    349d1 <_ZN4rtvc9VulkanAppC1Ev+0xcb1>
	return _M_append(__s, __n);
   33e4e:	ba 20 00 00 00       	mov    $0x20,%edx
   33e53:	48 8d 35 e6 4d 00 00 	lea    0x4de6(%rip),%rsi        # 38c40 <_ZL11stbi__bmask+0x4c0>
   33e5a:	4c 89 e7             	mov    %r12,%rdi
   33e5d:	e8 1e 23 fd ff       	call   6180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
  GLFW() { glfwInit(); }
   33e62:	48 8d 05 67 c7 00 00 	lea    0xc767(%rip),%rax        # 405d0 <_ZTVN3vkw4GLFWE+0x10>
   33e69:	48 89 83 80 00 00 00 	mov    %rax,0x80(%rbx)
   33e70:	e8 db 27 fd ff       	call   6650 <glfwInit@plt>
debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
              [[maybe_unused]] VkDebugUtilsMessageTypeFlagsEXT messageType,
              const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
              [[maybe_unused]] void *pUserData);

class GLFW : public vkw::GLFW {};
   33e75:	48 8d 05 c4 c8 00 00 	lea    0xc8c4(%rip),%rax        # 40740 <_ZTVN4rtvc4GLFWE+0x10>
  Window() {
   33e7c:	c6 83 90 00 00 00 00 	movb   $0x0,0x90(%rbx)
    glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
   33e83:	31 f6                	xor    %esi,%esi
   33e85:	bf 01 20 02 00       	mov    $0x22001,%edi
   33e8a:	48 89 83 80 00 00 00 	mov    %rax,0x80(%rbx)
  Window() {
   33e91:	48 c7 83 88 00 00 00 	movq   $0x0,0x88(%rbx)
   33e98:	00 00 00 00 
    glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
   33e9c:	e8 af 25 fd ff       	call   6450 <glfwWindowHint@plt>
        glfwCreateWindow(800, 600, "Vulkan Application", nullptr, nullptr);
   33ea1:	45 31 c0             	xor    %r8d,%r8d
   33ea4:	31 c9                	xor    %ecx,%ecx
   33ea6:	be 58 02 00 00       	mov    $0x258,%esi
   33eab:	bf 20 03 00 00       	mov    $0x320,%edi
   33eb0:	48 8d 15 3a 3b 00 00 	lea    0x3b3a(%rip),%rdx        # 379f1 <_ZSt19piecewise_construct+0xaa>
   33eb7:	e8 24 2a fd ff       	call   68e0 <glfwCreateWindow@plt>
    _window =
   33ebc:	48 89 83 88 00 00 00 	mov    %rax,0x88(%rbx)
  Instance() = default;
   33ec3:	66 0f ef c0          	pxor   %xmm0,%xmm0

class Instance : public vkw::Instance {
public:
  using vkw::Instance::Instance;

  Instance() { _initialize(); }
   33ec7:	48 8d 05 92 c8 00 00 	lea    0xc892(%rip),%rax        # 40760 <_ZTVN4rtvc8InstanceE+0x10>
   33ece:	48 8d ab 98 00 00 00 	lea    0x98(%rbx),%rbp
    _isOwner = true;
   33ed5:	c6 83 90 00 00 00 01 	movb   $0x1,0x90(%rbx)
   33edc:	48 89 ef             	mov    %rbp,%rdi
   33edf:	48 c7 83 a0 00 00 00 	movq   $0x0,0xa0(%rbx)
   33ee6:	00 00 00 00 
   33eea:	48 c7 83 a8 00 00 00 	movq   $0x0,0xa8(%rbx)
   33ef1:	00 00 00 00 
   33ef5:	c6 83 b0 00 00 00 00 	movb   $0x0,0xb0(%rbx)
   33efc:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
   33f03:	0f 11 83 b8 00 00 00 	movups %xmm0,0xb8(%rbx)
   33f0a:	0f 11 83 c8 00 00 00 	movups %xmm0,0xc8(%rbx)
   33f11:	0f 11 83 d8 00 00 00 	movups %xmm0,0xd8(%rbx)
   33f18:	e8 83 d0 fd ff       	call   10fa0 <_ZN4rtvc8Instance11_initializeEv>
class DebugMessenger : public vkw::DebugMessenger {
public:
  using vkw::DebugMessenger::DebugMessenger;

  DebugMessenger(const Instance &instance)
      : vkw::DebugMessenger{instance.ref(), &instance.debugInfo()} {}
   33f1d:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
    if (glfwCreateWindowSurface(instance, window, pAllocator, &_surface) !=
   33f24:	31 d2                	xor    %edx,%edx
   33f26:	48 8d 05 53 c8 00 00 	lea    0xc853(%rip),%rax        # 40780 <_ZTVN4rtvc14DebugMessengerE+0x10>
class Surface : public vkw::Surface {
public:
  using vkw::Surface::Surface;

  Surface(const Instance &instance, const vkw::Window &window)
      : vkw::Surface{instance.ref(), window.ref()} {}
   33f2d:	48 8b b3 88 00 00 00 	mov    0x88(%rbx),%rsi
      : vkw::DebugMessenger{instance.ref(), &instance.debugInfo()} {}
   33f34:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
      : _instance{instance}, _window{window}, _pAllocator{pAllocator} {
   33f3b:	48 8d 05 4e c6 00 00 	lea    0xc64e(%rip),%rax        # 40590 <_ZTVN3vkw7SurfaceE+0x10>
    if (glfwCreateWindowSurface(instance, window, pAllocator, &_surface) !=
   33f42:	48 8d 8b 18 01 00 00 	lea    0x118(%rbx),%rcx
      : _instance{instance}, _pAllocator{pAllocator} {
   33f49:	48 89 bb f8 00 00 00 	mov    %rdi,0xf8(%rbx)
      : vkw::Surface{instance.ref(), window.ref()} {}
   33f50:	4c 8d ab 10 01 00 00 	lea    0x110(%rbx),%r13
   33f57:	48 c7 83 f0 00 00 00 	movq   $0x0,0xf0(%rbx)
   33f5e:	00 00 00 00 
   33f62:	48 c7 83 00 01 00 00 	movq   $0x0,0x100(%rbx)
   33f69:	00 00 00 00 
   33f6d:	c6 83 08 01 00 00 00 	movb   $0x0,0x108(%rbx)
      : _instance{instance}, _window{window}, _pAllocator{pAllocator} {
   33f74:	48 89 83 10 01 00 00 	mov    %rax,0x110(%rbx)
   33f7b:	48 c7 83 18 01 00 00 	movq   $0x0,0x118(%rbx)
   33f82:	00 00 00 00 
   33f86:	48 89 bb 20 01 00 00 	mov    %rdi,0x120(%rbx)
   33f8d:	48 89 b3 28 01 00 00 	mov    %rsi,0x128(%rbx)
   33f94:	48 c7 83 30 01 00 00 	movq   $0x0,0x130(%rbx)
   33f9b:	00 00 00 00 
   33f9f:	c6 83 38 01 00 00 00 	movb   $0x0,0x138(%rbx)
    if (glfwCreateWindowSurface(instance, window, pAllocator, &_surface) !=
   33fa6:	e8 f5 28 fd ff       	call   68a0 <glfwCreateWindowSurface@plt>
   33fab:	85 c0                	test   %eax,%eax
   33fad:	0f 85 b9 50 fd ff    	jne    906c <_ZN4rtvc9VulkanAppC2Ev.cold+0x2a6>
   33fb3:	48 8d 05 e6 c7 00 00 	lea    0xc7e6(%rip),%rax        # 407a0 <_ZTVN4rtvc7SurfaceE+0x10>
    _isOwner = true;
   33fba:	c6 83 38 01 00 00 01 	movb   $0x1,0x138(%rbx)
   33fc1:	4c 89 ea             	mov    %r13,%rdx
   33fc4:	48 89 ee             	mov    %rbp,%rsi
   33fc7:	48 89 83 10 01 00 00 	mov    %rax,0x110(%rbx)
   33fce:	4c 8d a3 40 01 00 00 	lea    0x140(%rbx),%r12
   33fd5:	4c 89 e7             	mov    %r12,%rdi
   33fd8:	e8 43 b2 fd ff       	call   f220 <_ZN4rtvc6DeviceC1ERKNS_8InstanceERKN3vkw7SurfaceE>
            VkPresentModeKHR preferredPresentMode = VK_PRESENT_MODE_FIFO_KHR) {
   33fdd:	48 8d 05 fc c7 00 00 	lea    0xc7fc(%rip),%rax        # 407e0 <_ZTVN4rtvc9SwapchainE+0x10>
  Swapchain() = default;
   33fe4:	66 0f ef c0          	pxor   %xmm0,%xmm0
   33fe8:	48 c7 83 80 01 00 00 	movq   $0x0,0x180(%rbx)
   33fef:	00 00 00 00 
    _initialize(surface.ref(), device.ref(), device.physical(),
   33ff3:	48 8b 8b 50 01 00 00 	mov    0x150(%rbx),%rcx
   33ffa:	c7 83 88 01 00 00 00 	movl   $0x0,0x188(%rbx)
   34001:	00 00 00 
   34004:	48 8b 93 48 01 00 00 	mov    0x148(%rbx),%rdx
   3400b:	48 8d bb 78 01 00 00 	lea    0x178(%rbx),%rdi
   34012:	48 8b b3 18 01 00 00 	mov    0x118(%rbx),%rsi
   34019:	44 8b 43 48          	mov    0x48(%rbx),%r8d
   3401d:	48 c7 83 8c 01 00 00 	movq   $0x0,0x18c(%rbx)
   34024:	00 00 00 00 
   34028:	c6 83 a8 01 00 00 00 	movb   $0x0,0x1a8(%rbx)
            VkPresentModeKHR preferredPresentMode = VK_PRESENT_MODE_FIFO_KHR) {
   3402f:	48 89 83 78 01 00 00 	mov    %rax,0x178(%rbx)
   34036:	0f 11 83 98 01 00 00 	movups %xmm0,0x198(%rbx)
   3403d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    _initialize(surface.ref(), device.ref(), device.physical(),
   34042:	e8 f9 ce ff ff       	call   30f40 <_ZN4rtvc9Swapchain11_initializeEP14VkSurfaceKHR_TP10VkDevice_TP18VkPhysicalDevice_T16VkPresentModeKHR>
  SwapchainImageViews(const Device &device, const Swapchain &swapchain) {
   34047:	48 8d 05 12 c8 00 00 	lea    0xc812(%rip),%rax        # 40860 <_ZTVN4rtvc19SwapchainImageViewsE+0x10>
	: _M_start(), _M_finish(), _M_end_of_storage()
   3404e:	48 c7 83 b8 01 00 00 	movq   $0x0,0x1b8(%rbx)
   34055:	00 00 00 00 
    _initialize(device.ref(), swapchain.ref(), swapchain.format());
   34059:	8b 8b 88 01 00 00    	mov    0x188(%rbx),%ecx
   3405f:	48 8d bb b0 01 00 00 	lea    0x1b0(%rbx),%rdi
   34066:	48 c7 83 c0 01 00 00 	movq   $0x0,0x1c0(%rbx)
   3406d:	00 00 00 00 
   34071:	48 8b 93 80 01 00 00 	mov    0x180(%rbx),%rdx
  ImageViews() = default;
   34078:	c6 83 e0 01 00 00 00 	movb   $0x0,0x1e0(%rbx)
   3407f:	48 8b b3 48 01 00 00 	mov    0x148(%rbx),%rsi
   34086:	48 c7 83 c8 01 00 00 	movq   $0x0,0x1c8(%rbx)
   3408d:	00 00 00 00 
   34091:	48 c7 83 d0 01 00 00 	movq   $0x0,0x1d0(%rbx)
   34098:	00 00 00 00 
   3409c:	48 c7 83 d8 01 00 00 	movq   $0x0,0x1d8(%rbx)
   340a3:	00 00 00 00 
  SwapchainImageViews(const Device &device, const Swapchain &swapchain) {
   340a7:	48 89 83 b0 01 00 00 	mov    %rax,0x1b0(%rbx)
   340ae:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    _initialize(device.ref(), swapchain.ref(), swapchain.format());
   340b3:	e8 d8 c9 fd ff       	call   10a90 <_ZN4rtvc19SwapchainImageViews11_initializeEP10VkDevice_TP16VkSwapchainKHR_T8VkFormat>

class DescriptorSetLayout : public vkw::DescriptorSetLayout {
public:
  using vkw::DescriptorSetLayout::DescriptorSetLayout;

  DescriptorSetLayout(const Device &device) { _initialize(device.ref()); }
   340b8:	48 8d 05 01 c7 00 00 	lea    0xc701(%rip),%rax        # 407c0 <_ZTVN4rtvc19DescriptorSetLayoutE+0x10>
  DescriptorSetLayout() = default;
   340bf:	48 c7 83 f0 01 00 00 	movq   $0x0,0x1f0(%rbx)
   340c6:	00 00 00 00 
   340ca:	48 8d ab e8 01 00 00 	lea    0x1e8(%rbx),%rbp
   340d1:	48 8b b3 48 01 00 00 	mov    0x148(%rbx),%rsi
   340d8:	48 c7 83 f8 01 00 00 	movq   $0x0,0x1f8(%rbx)
   340df:	00 00 00 00 
   340e3:	48 89 ef             	mov    %rbp,%rdi
   340e6:	48 c7 83 00 02 00 00 	movq   $0x0,0x200(%rbx)
   340ed:	00 00 00 00 
   340f1:	c6 83 08 02 00 00 00 	movb   $0x0,0x208(%rbx)
   340f8:	48 89 83 e8 01 00 00 	mov    %rax,0x1e8(%rbx)
   340ff:	e8 8c 9d fd ff       	call   de90 <_ZN4rtvc19DescriptorSetLayout11_initializeEP10VkDevice_T>
   34104:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
	: allocator_type(__a), _M_p(__dat) { }
   34109:	4c 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%r15
   34110:	00 
	    _M_data(_M_create(__dnew, size_type(0)));
   34111:	4c 8d ac 24 10 01 00 	lea    0x110(%rsp),%r13
   34118:	00 
   34119:	48 89 ac 24 a0 00 00 	mov    %rbp,0xa0(%rsp)
   34120:	00 
   34121:	4c 8d b3 10 02 00 00 	lea    0x210(%rbx),%r14
   34128:	31 d2                	xor    %edx,%edx
   3412a:	4c 89 ee             	mov    %r13,%rsi
   3412d:	4c 89 ff             	mov    %r15,%rdi
   34130:	48 8d ac 24 d0 00 00 	lea    0xd0(%rsp),%rbp
   34137:	00 
   34138:	4c 89 74 24 28       	mov    %r14,0x28(%rsp)
   3413d:	4c 89 a4 24 90 00 00 	mov    %r12,0x90(%rsp)
   34144:	00 
   34145:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
   3414c:	00 
   3414d:	48 89 ac 24 c0 00 00 	mov    %rbp,0xc0(%rsp)
   34154:	00 
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   34155:	48 c7 84 24 10 01 00 	movq   $0x20,0x110(%rsp)
   3415c:	00 20 00 00 00 
	    _M_data(_M_create(__dnew, size_type(0)));
   34161:	e8 1a 29 fd ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
	    _M_capacity(__dnew);
   34166:	48 8b 94 24 10 01 00 	mov    0x110(%rsp),%rdx
   3416d:	00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   3416e:	66 0f 6f 05 da 4f 00 	movdqa 0x4fda(%rip),%xmm0        # 39150 <_ZTSN4rtvc12FramebuffersE+0x20>
   34175:	00 
	    _M_data(_M_create(__dnew, size_type(0)));
   34176:	4c 89 ef             	mov    %r13,%rdi
      { _M_dataplus._M_p = __p; }
   34179:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
   34180:	00 
	: allocator_type(__a), _M_p(__dat) { }
   34181:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
   34188:	00 
      { _M_allocated_capacity = __capacity; }
   34189:	48 89 94 24 d0 00 00 	mov    %rdx,0xd0(%rsp)
   34190:	00 
   34191:	0f 11 00             	movups %xmm0,(%rax)
   34194:	66 0f 6f 05 c4 4f 00 	movdqa 0x4fc4(%rip),%xmm0        # 39160 <_ZTSN4rtvc12FramebuffersE+0x30>
   3419b:	00 
   3419c:	0f 11 40 10          	movups %xmm0,0x10(%rax)
	__c1 = __c2;
   341a0:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
   341a7:	00 
      { _M_string_length = __length; }
   341a8:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
   341af:	00 
   341b0:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
   341b4:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
   341b9:	31 d2                	xor    %edx,%edx
   341bb:	48 89 c6             	mov    %rax,%rsi
   341be:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   341c3:	4c 89 bc 24 a8 00 00 	mov    %r15,0xa8(%rsp)
   341ca:	00 
	: allocator_type(__a), _M_p(__dat) { }
   341cb:	4c 89 a4 24 10 01 00 	mov    %r12,0x110(%rsp)
   341d2:	00 
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   341d3:	48 c7 44 24 70 20 00 	movq   $0x20,0x70(%rsp)
   341da:	00 00 
	    _M_data(_M_create(__dnew, size_type(0)));
   341dc:	e8 9f 28 fd ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
	    _M_capacity(__dnew);
   341e1:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   341e6:	66 0f 6f 05 62 4f 00 	movdqa 0x4f62(%rip),%xmm0        # 39150 <_ZTSN4rtvc12FramebuffersE+0x20>
   341ed:	00 
   341ee:	4c 89 f7             	mov    %r14,%rdi
      { _M_dataplus._M_p = __p; }
   341f1:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
   341f8:	00 
   341f9:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
   34200:	00 
      { _M_allocated_capacity = __capacity; }
   34201:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
   34208:	00 
   34209:	0f 11 00             	movups %xmm0,(%rax)
   3420c:	66 0f 6f 05 5c 4f 00 	movdqa 0x4f5c(%rip),%xmm0        # 39170 <_ZTSN4rtvc12FramebuffersE+0x40>
   34213:	00 
   34214:	0f 11 40 10          	movups %xmm0,0x10(%rax)
	__c1 = __c2;
   34218:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
   3421f:	00 
      { _M_string_length = __length; }
   34220:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
   34227:	00 
   34228:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
   3422c:	48 8d 05 cd c5 00 00 	lea    0xc5cd(%rip),%rax        # 40800 <_ZTVN4rtvc16GraphicsPipelineE+0x10>
  GraphicsPipeline() = default;
   34233:	48 c7 83 18 02 00 00 	movq   $0x0,0x218(%rbx)
   3423a:	00 00 00 00 
   3423e:	48 c7 83 20 02 00 00 	movq   $0x0,0x220(%rbx)
   34245:	00 00 00 00 
   34249:	48 c7 83 28 02 00 00 	movq   $0x0,0x228(%rbx)
   34250:	00 00 00 00 
   34254:	48 c7 83 30 02 00 00 	movq   $0x0,0x230(%rbx)
   3425b:	00 00 00 00 
   3425f:	48 c7 83 38 02 00 00 	movq   $0x0,0x238(%rbx)
   34266:	00 00 00 00 
   3426a:	48 c7 83 40 02 00 00 	movq   $0x0,0x240(%rbx)
   34271:	00 00 00 00 
   34275:	c6 83 48 02 00 00 00 	movb   $0x0,0x248(%rbx)
   3427c:	48 89 83 10 02 00 00 	mov    %rax,0x210(%rbx)
   34283:	4c 89 ac 24 b0 00 00 	mov    %r13,0xb0(%rsp)
   3428a:	00 
   3428b:	e8 c0 bd fd ff       	call   10050 <_ZN4rtvc16GraphicsPipeline11_initializeERKNS0_10CustomArgsE>
      { return _M_dataplus._M_p; }
   34290:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
   34297:	00 
	if (!_M_is_local())
   34298:	4c 39 e7             	cmp    %r12,%rdi
   3429b:	74 11                	je     342ae <_ZN4rtvc9VulkanAppC1Ev+0x58e>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   3429d:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
   342a4:	00 
   342a5:	48 8d 70 01          	lea    0x1(%rax),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   342a9:	e8 b2 22 fd ff       	call   6560 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
   342ae:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
   342b5:	00 
	if (!_M_is_local())
   342b6:	48 39 ef             	cmp    %rbp,%rdi
   342b9:	74 11                	je     342cc <_ZN4rtvc9VulkanAppC1Ev+0x5ac>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   342bb:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
   342c2:	00 
   342c3:	48 8d 70 01          	lea    0x1(%rax),%rsi
   342c7:	e8 94 22 fd ff       	call   6560 <_ZdlPvm@plt>
               const Swapchain &swapchain) {
   342cc:	48 8d 05 ad c5 00 00 	lea    0xc5ad(%rip),%rax        # 40880 <_ZTVN4rtvc12FramebuffersE+0x10>
   342d3:	48 c7 83 58 02 00 00 	movq   $0x0,0x258(%rbx)
   342da:	00 00 00 00 
    _initialize(device.ref(), swapchainImageViews.ref(),
   342de:	48 8b 8b 38 02 00 00 	mov    0x238(%rbx),%rcx
   342e5:	48 8d bb 50 02 00 00 	lea    0x250(%rbx),%rdi
   342ec:	48 c7 83 60 02 00 00 	movq   $0x0,0x260(%rbx)
   342f3:	00 00 00 00 
   342f7:	48 8b b3 48 01 00 00 	mov    0x148(%rbx),%rsi
  const std::vector<VkImageView> &ref() const noexcept { return _imageViews; }
   342fe:	48 8d 93 b8 01 00 00 	lea    0x1b8(%rbx),%rdx
   34305:	4c 8d 83 8c 01 00 00 	lea    0x18c(%rbx),%r8
   3430c:	48 c7 83 68 02 00 00 	movq   $0x0,0x268(%rbx)
   34313:	00 00 00 00 
  Framebuffers() = default;
   34317:	48 c7 83 70 02 00 00 	movq   $0x0,0x270(%rbx)
   3431e:	00 00 00 00 
   34322:	48 c7 83 78 02 00 00 	movq   $0x0,0x278(%rbx)
   34329:	00 00 00 00 
   3432d:	c6 83 80 02 00 00 00 	movb   $0x0,0x280(%rbx)
               const Swapchain &swapchain) {
   34334:	48 89 83 50 02 00 00 	mov    %rax,0x250(%rbx)
   3433b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
    _initialize(device.ref(), swapchainImageViews.ref(),
   34340:	e8 cb b5 fd ff       	call   f910 <_ZN4rtvc12Framebuffers11_initializeEP10VkDevice_TRKSt6vectorIP13VkImageView_TSaIS5_EEP14VkRenderPass_TRK10VkExtent2D>
   34345:	48 8b bb 48 01 00 00 	mov    0x148(%rbx),%rdi
   3434c:	c6 83 88 02 00 00 00 	movb   $0x0,0x288(%rbx)
    cmdPoolInfo.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
    /* All command buffers allocated from this command pool must be
    submitted on queues from the same queue family. */
    cmdPoolInfo.queueFamilyIndex = queueFamilyIndex;

    _commandPool = vkh::createCommandPool(device, &cmdPoolInfo);
   34353:	31 d2                	xor    %edx,%edx
   34355:	4c 89 fe             	mov    %r15,%rsi
      : _device{device}, _pAllocator{nullptr} {
   34358:	c6 83 a8 02 00 00 00 	movb   $0x0,0x2a8(%rbx)
    return static_cast<ReturnType>(_queue.familyIndex);
   3435f:	8b 83 60 01 00 00    	mov    0x160(%rbx),%eax
   34365:	48 89 bb 98 02 00 00 	mov    %rdi,0x298(%rbx)
   3436c:	48 c7 83 a0 02 00 00 	movq   $0x0,0x2a0(%rbx)
   34373:	00 00 00 00 
    VkCommandPoolCreateInfo cmdPoolInfo{};
   34377:	48 c7 84 24 c4 00 00 	movq   $0x0,0xc4(%rsp)
   3437e:	00 00 00 00 00 
   34383:	c7 84 24 cc 00 00 00 	movl   $0x0,0xcc(%rsp)
   3438a:	00 00 00 00 
    cmdPoolInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
   3438e:	c7 84 24 c0 00 00 00 	movl   $0x27,0xc0(%rsp)
   34395:	27 00 00 00 
    cmdPoolInfo.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
   34399:	c7 84 24 d0 00 00 00 	movl   $0x2,0xd0(%rsp)
   343a0:	02 00 00 00 
    cmdPoolInfo.queueFamilyIndex = queueFamilyIndex;
   343a4:	89 84 24 d4 00 00 00 	mov    %eax,0xd4(%rsp)
    _commandPool = vkh::createCommandPool(device, &cmdPoolInfo);
   343ab:	e8 c0 95 fd ff       	call   d970 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks>
   343b0:	48 8b 53 50          	mov    0x50(%rbx),%rdx
   343b4:	48 89 83 90 02 00 00 	mov    %rax,0x290(%rbx)
    return vkh::allocateCommandBuffers(_device, &bufferInfo);
   343bb:	48 8d bb b0 02 00 00 	lea    0x2b0(%rbx),%rdi
    _isOwner = true;
   343c2:	c6 83 a8 02 00 00 01 	movb   $0x1,0x2a8(%rbx)
    return vkh::allocateCommandBuffers(_device, &bufferInfo);
   343c9:	48 8b b3 98 02 00 00 	mov    0x298(%rbx),%rsi
    bufferInfo.commandBufferCount = static_cast<uint32_t>(count);
   343d0:	89 94 24 2c 01 00 00 	mov    %edx,0x12c(%rsp)
    return vkh::allocateCommandBuffers(_device, &bufferInfo);
   343d7:	4c 89 ea             	mov    %r13,%rdx
    bufferInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
   343da:	48 c7 84 24 10 01 00 	movq   $0x28,0x110(%rsp)
   343e1:	00 28 00 00 00 
    bufferInfo.pNext = pNext;
   343e6:	48 c7 84 24 18 01 00 	movq   $0x0,0x118(%rsp)
   343ed:	00 00 00 00 00 
    bufferInfo.commandPool = _commandPool;
   343f2:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
   343f9:	00 
    bufferInfo.level = level;
   343fa:	c7 84 24 28 01 00 00 	movl   $0x0,0x128(%rsp)
   34401:	00 00 00 00 
    return vkh::allocateCommandBuffers(_device, &bufferInfo);
   34405:	e8 26 7f fd ff       	call   c330 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo>
   3440a:	4c 8b 73 50          	mov    0x50(%rbx),%r14
   3440e:	48 8d 83 c8 02 00 00 	lea    0x2c8(%rbx),%rax
   34415:	48 8b ab 48 01 00 00 	mov    0x148(%rbx),%rbp
   3441c:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   34421:	4c 89 f0             	mov    %r14,%rax
   34424:	48 c1 e8 3a          	shr    $0x3a,%rax
   34428:	0f 85 af 05 00 00    	jne    349dd <_ZN4rtvc9VulkanAppC1Ev+0xcbd>
	: _M_start(), _M_finish(), _M_end_of_storage()
   3442e:	48 c7 83 d8 02 00 00 	movq   $0x0,0x2d8(%rbx)
   34435:	00 00 00 00 
   34439:	66 0f ef c0          	pxor   %xmm0,%xmm0
   3443d:	0f 11 83 c8 02 00 00 	movups %xmm0,0x2c8(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   34444:	4d 85 f6             	test   %r14,%r14
   34447:	0f 84 13 05 00 00    	je     34960 <_ZN4rtvc9VulkanAppC1Ev+0xc40>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   3444d:	49 c1 e6 05          	shl    $0x5,%r14
   34451:	4c 89 f7             	mov    %r14,%rdi
   34454:	e8 e7 20 fd ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   34459:	4a 8d 14 30          	lea    (%rax,%r14,1),%rdx
	this->_M_impl._M_start = this->_M_allocate(__n);
   3445d:	48 89 83 c8 02 00 00 	mov    %rax,0x2c8(%rbx)
   34464:	66 0f ef c0          	pxor   %xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   34468:	48 89 93 d8 02 00 00 	mov    %rdx,0x2d8(%rbx)
   3446f:	90                   	nop
   34470:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   34477:	00 
   34478:	48 83 c0 20          	add    $0x20,%rax
   3447c:	0f 11 40 e0          	movups %xmm0,-0x20(%rax)
   34480:	c6 40 f8 00          	movb   $0x0,-0x8(%rax)
   34484:	48 39 d0             	cmp    %rdx,%rax
   34487:	75 e7                	jne    34470 <_ZN4rtvc9VulkanAppC1Ev+0x750>
	this->_M_impl._M_finish =
   34489:	48 89 83 d0 02 00 00 	mov    %rax,0x2d0(%rbx)
   34490:	4c 89 f7             	mov    %r14,%rdi
	: _M_start(), _M_finish(), _M_end_of_storage()
   34493:	48 c7 83 f0 02 00 00 	movq   $0x0,0x2f0(%rbx)
   3449a:	00 00 00 00 
   3449e:	0f 11 83 e0 02 00 00 	movups %xmm0,0x2e0(%rbx)
   344a5:	e8 96 20 fd ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   344aa:	4a 8d 14 30          	lea    (%rax,%r14,1),%rdx
	this->_M_impl._M_start = this->_M_allocate(__n);
   344ae:	48 89 83 e0 02 00 00 	mov    %rax,0x2e0(%rbx)
   344b5:	66 0f ef c0          	pxor   %xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   344b9:	48 89 93 f0 02 00 00 	mov    %rdx,0x2f0(%rbx)
   344c0:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   344c7:	00 
   344c8:	48 83 c0 20          	add    $0x20,%rax
   344cc:	0f 11 40 e0          	movups %xmm0,-0x20(%rax)
   344d0:	c6 40 f8 00          	movb   $0x0,-0x8(%rax)
   344d4:	48 39 d0             	cmp    %rdx,%rax
   344d7:	75 e7                	jne    344c0 <_ZN4rtvc9VulkanAppC1Ev+0x7a0>
	this->_M_impl._M_finish =
   344d9:	48 89 83 e8 02 00 00 	mov    %rax,0x2e8(%rbx)
   344e0:	4c 89 f7             	mov    %r14,%rdi
	: _M_start(), _M_finish(), _M_end_of_storage()
   344e3:	48 c7 83 08 03 00 00 	movq   $0x0,0x308(%rbx)
   344ea:	00 00 00 00 
   344ee:	0f 11 83 f8 02 00 00 	movups %xmm0,0x2f8(%rbx)
   344f5:	e8 46 20 fd ff       	call   6540 <_Znwm@plt>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   344fa:	4a 8d 14 30          	lea    (%rax,%r14,1),%rdx
	this->_M_impl._M_start = this->_M_allocate(__n);
   344fe:	48 89 83 f8 02 00 00 	mov    %rax,0x2f8(%rbx)
   34505:	66 0f ef c0          	pxor   %xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   34509:	48 89 93 08 03 00 00 	mov    %rdx,0x308(%rbx)
   34510:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   34517:	00 
   34518:	48 83 c0 20          	add    $0x20,%rax
   3451c:	0f 11 40 e0          	movups %xmm0,-0x20(%rax)
   34520:	c6 40 f8 00          	movb   $0x0,-0x8(%rax)
   34524:	48 39 c2             	cmp    %rax,%rdx
   34527:	75 e7                	jne    34510 <_ZN4rtvc9VulkanAppC1Ev+0x7f0>
	this->_M_impl._M_finish =
   34529:	48 89 93 00 03 00 00 	mov    %rdx,0x300(%rbx)
          renderFinishedSemaphore{frameCount}, inFlightFence{frameCount} {
   34530:	45 31 e4             	xor    %r12d,%r12d
   34533:	48 c7 83 10 03 00 00 	movq   $0x0,0x310(%rbx)
   3453a:	00 00 00 00 
      for (size_t i = 0; i < frameCount; ++i) {
   3453e:	66 90                	xchg   %ax,%ax
    VkSemaphoreCreateInfo semaphoreInfo{};
   34540:	66 0f ef c9          	pxor   %xmm1,%xmm1
    vkCreateSemaphore(device, &semaphoreInfo, _pAllocator, &_semaphore);
   34544:	4c 89 e9             	mov    %r13,%rcx
   34547:	31 d2                	xor    %edx,%edx
   34549:	4c 89 fe             	mov    %r15,%rsi
   3454c:	48 89 ef             	mov    %rbp,%rdi
      : _device{device}, _pAllocator{pAllocator} {
   3454f:	48 89 ac 24 18 01 00 	mov    %rbp,0x118(%rsp)
   34556:	00 
   34557:	48 c7 84 24 20 01 00 	movq   $0x0,0x120(%rsp)
   3455e:	00 00 00 00 00 
   34563:	c6 84 24 28 01 00 00 	movb   $0x0,0x128(%rsp)
   3456a:	00 
    VkSemaphoreCreateInfo semaphoreInfo{};
   3456b:	c7 84 24 d4 00 00 00 	movl   $0x0,0xd4(%rsp)
   34572:	00 00 00 00 
    semaphoreInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
   34576:	c7 84 24 c0 00 00 00 	movl   $0x9,0xc0(%rsp)
   3457d:	09 00 00 00 
    VkSemaphoreCreateInfo semaphoreInfo{};
   34581:	0f 11 8c 24 c4 00 00 	movups %xmm1,0xc4(%rsp)
   34588:	00 
    vkCreateSemaphore(device, &semaphoreInfo, _pAllocator, &_semaphore);
   34589:	e8 42 22 fd ff       	call   67d0 <vkCreateSemaphore@plt>
   3458e:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    VkSemaphoreCreateInfo semaphoreInfo{};
   34593:	66 0f ef c9          	pxor   %xmm1,%xmm1
    vkCreateSemaphore(device, &semaphoreInfo, _pAllocator, &_semaphore);
   34597:	4c 89 e9             	mov    %r13,%rcx
   3459a:	48 89 ef             	mov    %rbp,%rdi
    _semaphore = rhs._semaphore;
   3459d:	66 0f 6f 94 24 10 01 	movdqa 0x110(%rsp),%xmm2
   345a4:	00 00 
	return *(this->_M_impl._M_start + __n);
   345a6:	48 8b 83 c8 02 00 00 	mov    0x2c8(%rbx),%rax
   345ad:	4c 01 e0             	add    %r12,%rax
   345b0:	0f 11 10             	movups %xmm2,(%rax)
    _pAllocator = rhs._pAllocator;
   345b3:	48 8b 94 24 20 01 00 	mov    0x120(%rsp),%rdx
   345ba:	00 
      _isOwner = true;
   345bb:	c6 40 18 01          	movb   $0x1,0x18(%rax)
    _pAllocator = rhs._pAllocator;
   345bf:	48 89 50 10          	mov    %rdx,0x10(%rax)
    vkCreateSemaphore(device, &semaphoreInfo, _pAllocator, &_semaphore);
   345c3:	31 d2                	xor    %edx,%edx
      : _device{device}, _pAllocator{pAllocator} {
   345c5:	48 89 ac 24 18 01 00 	mov    %rbp,0x118(%rsp)
   345cc:	00 
   345cd:	48 c7 84 24 20 01 00 	movq   $0x0,0x120(%rsp)
   345d4:	00 00 00 00 00 
   345d9:	c6 84 24 28 01 00 00 	movb   $0x0,0x128(%rsp)
   345e0:	00 
    VkSemaphoreCreateInfo semaphoreInfo{};
   345e1:	c7 84 24 84 00 00 00 	movl   $0x0,0x84(%rsp)
   345e8:	00 00 00 00 
    semaphoreInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
   345ec:	c7 44 24 70 09 00 00 	movl   $0x9,0x70(%rsp)
   345f3:	00 
    VkSemaphoreCreateInfo semaphoreInfo{};
   345f4:	0f 11 4c 24 74       	movups %xmm1,0x74(%rsp)
    vkCreateSemaphore(device, &semaphoreInfo, _pAllocator, &_semaphore);
   345f9:	e8 d2 21 fd ff       	call   67d0 <vkCreateSemaphore@plt>
    VkFenceCreateInfo fenceInfo{};
   345fe:	66 0f ef c9          	pxor   %xmm1,%xmm1
    vkCreateFence(device, &fenceInfo, _pAllocator, &_fence);
   34602:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
   34607:	4c 89 e9             	mov    %r13,%rcx
   3460a:	48 89 ef             	mov    %rbp,%rdi
    _semaphore = rhs._semaphore;
   3460d:	66 0f 6f 9c 24 10 01 	movdqa 0x110(%rsp),%xmm3
   34614:	00 00 
   34616:	48 8b 83 e0 02 00 00 	mov    0x2e0(%rbx),%rax
   3461d:	4c 01 e0             	add    %r12,%rax
   34620:	0f 11 18             	movups %xmm3,(%rax)
    _pAllocator = rhs._pAllocator;
   34623:	48 8b 94 24 20 01 00 	mov    0x120(%rsp),%rdx
   3462a:	00 
      _isOwner = true;
   3462b:	c6 40 18 01          	movb   $0x1,0x18(%rax)
    _pAllocator = rhs._pAllocator;
   3462f:	48 89 50 10          	mov    %rdx,0x10(%rax)
   34633:	31 d2                	xor    %edx,%edx
    VkFenceCreateInfo fenceInfo{};
   34635:	0f 11 4c 24 54       	movups %xmm1,0x54(%rsp)
      : _device{device}, _pAllocator{pAllocator} {
   3463a:	48 89 ac 24 18 01 00 	mov    %rbp,0x118(%rsp)
   34641:	00 
   34642:	48 c7 84 24 20 01 00 	movq   $0x0,0x120(%rsp)
   34649:	00 00 00 00 00 
   3464e:	c6 84 24 28 01 00 00 	movb   $0x0,0x128(%rsp)
   34655:	00 
    VkFenceCreateInfo fenceInfo{};
   34656:	c7 44 24 64 00 00 00 	movl   $0x0,0x64(%rsp)
   3465d:	00 
    fenceInfo.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
   3465e:	c7 44 24 50 08 00 00 	movl   $0x8,0x50(%rsp)
   34665:	00 
    fenceInfo.flags = flags;
   34666:	c7 44 24 60 01 00 00 	movl   $0x1,0x60(%rsp)
   3466d:	00 
    vkCreateFence(device, &fenceInfo, _pAllocator, &_fence);
   3466e:	e8 5d 20 fd ff       	call   66d0 <vkCreateFence@plt>
    _fence = rhs._fence;
   34673:	66 0f 6f a4 24 10 01 	movdqa 0x110(%rsp),%xmm4
   3467a:	00 00 
   3467c:	48 8b 83 f8 02 00 00 	mov    0x2f8(%rbx),%rax
   34683:	4c 01 e0             	add    %r12,%rax
   34686:	49 83 c4 20          	add    $0x20,%r12
   3468a:	0f 11 20             	movups %xmm4,(%rax)
    _pAllocator = rhs._pAllocator;
   3468d:	48 8b 94 24 20 01 00 	mov    0x120(%rsp),%rdx
   34694:	00 
      _isOwner = true;
   34695:	c6 40 18 01          	movb   $0x1,0x18(%rax)
    _pAllocator = rhs._pAllocator;
   34699:	48 89 50 10          	mov    %rdx,0x10(%rax)
   3469d:	4d 39 e6             	cmp    %r12,%r14
   346a0:	0f 85 9a fe ff ff    	jne    34540 <_ZN4rtvc9VulkanAppC1Ev+0x820>
   346a6:	48 8d 83 18 03 00 00 	lea    0x318(%rbx),%rax
   346ad:	48 89 de             	mov    %rbx,%rsi
   346b0:	48 89 c7             	mov    %rax,%rdi
   346b3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   346b8:	e8 63 d6 ff ff       	call   31d20 <_ZN4rtvc9VulkanApp16makeVertexBufferEv>
   346bd:	48 8d 83 58 03 00 00 	lea    0x358(%rbx),%rax
   346c4:	48 89 de             	mov    %rbx,%rsi
   346c7:	48 89 c7             	mov    %rax,%rdi
   346ca:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
   346cf:	e8 ac db ff ff       	call   32280 <_ZN4rtvc9VulkanApp15makeIndexBufferEv>
   346d4:	48 8d 83 98 03 00 00 	lea    0x398(%rbx),%rax
   346db:	48 89 de             	mov    %rbx,%rsi
   346de:	48 89 c7             	mov    %rax,%rdi
   346e1:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   346e6:	e8 95 f3 ff ff       	call   33a80 <_ZN4rtvc9VulkanApp18makeUniformBuffersEv>
   346eb:	4c 8d b3 b0 03 00 00 	lea    0x3b0(%rbx),%r14
   346f2:	48 89 de             	mov    %rbx,%rsi
   346f5:	4c 89 f7             	mov    %r14,%rdi
   346f8:	e8 b3 ec ff ff       	call   333b0 <_ZN4rtvc9VulkanApp16makeTextureImageEv>
  ImageView(const Device &device, const Image &image, VkFormat format) {
   346fd:	48 8d 05 3c c1 00 00 	lea    0xc13c(%rip),%rax        # 40840 <_ZTVN4rtvc9ImageViewE+0x10>
    _initialize(device.ref(), image.ref(), format);
   34704:	b9 2b 00 00 00       	mov    $0x2b,%ecx
  ImageView() = default;
   34709:	48 c7 83 f8 03 00 00 	movq   $0x0,0x3f8(%rbx)
   34710:	00 00 00 00 
   34714:	48 8b 93 b8 03 00 00 	mov    0x3b8(%rbx),%rdx
   3471b:	c6 83 10 04 00 00 00 	movb   $0x0,0x410(%rbx)
   34722:	48 8b b3 48 01 00 00 	mov    0x148(%rbx),%rsi
   34729:	48 8d bb f0 03 00 00 	lea    0x3f0(%rbx),%rdi
   34730:	48 c7 83 00 04 00 00 	movq   $0x0,0x400(%rbx)
   34737:	00 00 00 00 
   3473b:	48 c7 83 08 04 00 00 	movq   $0x0,0x408(%rbx)
   34742:	00 00 00 00 
  ImageView(const Device &device, const Image &image, VkFormat format) {
   34746:	48 89 83 f0 03 00 00 	mov    %rax,0x3f0(%rbx)
    _initialize(device.ref(), image.ref(), format);
   3474d:	e8 be c2 fd ff       	call   10a10 <_ZN4rtvc9ImageView11_initializeEP10VkDevice_TP9VkImage_T8VkFormat>
    VkPhysicalDeviceProperties properties{};
   34752:	4c 89 ef             	mov    %r13,%rdi
   34755:	b9 67 00 00 00       	mov    $0x67,%ecx
   3475a:	31 c0                	xor    %eax,%eax
   3475c:	48 8b ab 48 01 00 00 	mov    0x148(%rbx),%rbp
   34763:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  Sampler(VkDevice device, VkPhysicalDevice physicalDevice) : _device{device} {
   34766:	4c 8d 25 03 be 00 00 	lea    0xbe03(%rip),%r12        # 40570 <_ZTVN3vkw7SamplerE+0x10>
   3476d:	48 c7 83 20 04 00 00 	movq   $0x0,0x420(%rbx)
   34774:	00 00 00 00 
    vkGetPhysicalDeviceProperties(physicalDevice, &properties);
   34778:	4c 8d ac 24 10 01 00 	lea    0x110(%rsp),%r13
   3477f:	00 
  Sampler(VkDevice device, VkPhysicalDevice physicalDevice) : _device{device} {
   34780:	4c 89 a3 18 04 00 00 	mov    %r12,0x418(%rbx)
    vkGetPhysicalDeviceProperties(physicalDevice, &properties);
   34787:	48 8b bb 50 01 00 00 	mov    0x150(%rbx),%rdi
   3478e:	4c 89 ee             	mov    %r13,%rsi
  Sampler(VkDevice device, VkPhysicalDevice physicalDevice) : _device{device} {
   34791:	48 89 ab 28 04 00 00 	mov    %rbp,0x428(%rbx)
   34798:	48 c7 83 30 04 00 00 	movq   $0x0,0x430(%rbx)
   3479f:	00 00 00 00 
   347a3:	c6 83 38 04 00 00 00 	movb   $0x0,0x438(%rbx)
    vkGetPhysicalDeviceProperties(physicalDevice, &properties);
   347aa:	e8 11 1a fd ff       	call   61c0 <vkGetPhysicalDeviceProperties@plt>
    VkSamplerCreateInfo samplerInfo{};
   347af:	66 0f ef c0          	pxor   %xmm0,%xmm0
    samplerInfo.magFilter = VK_FILTER_LINEAR;
   347b3:	48 8b 05 4e 4a 00 00 	mov    0x4a4e(%rip),%rax        # 39208 <_ZTSN4rtvc12FramebuffersE+0xd8>
    if (vkCreateSampler(device, &samplerInfo, nullptr, &_sampler) !=
   347ba:	31 d2                	xor    %edx,%edx
   347bc:	4c 89 fe             	mov    %r15,%rsi
    VkSamplerCreateInfo samplerInfo{};
   347bf:	0f 11 84 24 f4 00 00 	movups %xmm0,0xf4(%rsp)
   347c6:	00 
    if (vkCreateSampler(device, &samplerInfo, nullptr, &_sampler) !=
   347c7:	48 8d 8b 20 04 00 00 	lea    0x420(%rbx),%rcx
   347ce:	48 89 ef             	mov    %rbp,%rdi
    VkSamplerCreateInfo samplerInfo{};
   347d1:	0f 11 84 24 d4 00 00 	movups %xmm0,0xd4(%rsp)
   347d8:	00 
   347d9:	0f 11 84 24 e4 00 00 	movups %xmm0,0xe4(%rsp)
   347e0:	00 
   347e1:	0f 11 84 24 00 01 00 	movups %xmm0,0x100(%rsp)
   347e8:	00 
   347e9:	0f 11 84 24 c4 00 00 	movups %xmm0,0xc4(%rsp)
   347f0:	00 
    samplerInfo.maxAnisotropy = properties.limits.maxSamplerAnisotropy;
   347f1:	f3 0f 10 84 24 48 03 	movss  0x348(%rsp),%xmm0
   347f8:	00 00 
    samplerInfo.sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
   347fa:	c7 84 24 c0 00 00 00 	movl   $0x1f,0xc0(%rsp)
   34801:	1f 00 00 00 
    samplerInfo.magFilter = VK_FILTER_LINEAR;
   34805:	48 89 84 24 d4 00 00 	mov    %rax,0xd4(%rsp)
   3480c:	00 
    samplerInfo.anisotropyEnable = VK_TRUE;
   3480d:	c7 84 24 f0 00 00 00 	movl   $0x1,0xf0(%rsp)
   34814:	01 00 00 00 
    samplerInfo.borderColor = VK_BORDER_COLOR_INT_OPAQUE_BLACK;
   34818:	c7 84 24 08 01 00 00 	movl   $0x3,0x108(%rsp)
   3481f:	03 00 00 00 
    samplerInfo.compareOp = VK_COMPARE_OP_ALWAYS;
   34823:	c7 84 24 fc 00 00 00 	movl   $0x7,0xfc(%rsp)
   3482a:	07 00 00 00 
    samplerInfo.mipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR;
   3482e:	c7 84 24 dc 00 00 00 	movl   $0x1,0xdc(%rsp)
   34835:	01 00 00 00 
    samplerInfo.maxAnisotropy = properties.limits.maxSamplerAnisotropy;
   34839:	f3 0f 11 84 24 f4 00 	movss  %xmm0,0xf4(%rsp)
   34840:	00 00 
    if (vkCreateSampler(device, &samplerInfo, nullptr, &_sampler) !=
   34842:	e8 19 19 fd ff       	call   6160 <vkCreateSampler@plt>
   34847:	85 c0                	test   %eax,%eax
   34849:	0f 85 16 4b fd ff    	jne    9365 <_ZN4rtvc9VulkanAppC2Ev.cold+0x59f>
   3484f:	48 8b bb 48 01 00 00 	mov    0x148(%rbx),%rdi
   34856:	48 8b 43 50          	mov    0x50(%rbx),%rax
    if (vkCreateDescriptorPool(device, &poolInfo, nullptr, &_pool) !=
   3485a:	31 d2                	xor    %edx,%edx
   3485c:	4c 89 ee             	mov    %r13,%rsi
    }
    _device = device;
   3485f:	48 89 ab 28 04 00 00 	mov    %rbp,0x428(%rbx)
    VkDescriptorPoolCreateInfo poolInfo{};
   34866:	66 0f ef c0          	pxor   %xmm0,%xmm0
   3486a:	48 8d 8b 40 04 00 00 	lea    0x440(%rbx),%rcx
    _isOwner = true;
   34871:	c6 83 38 04 00 00 01 	movb   $0x1,0x438(%rbx)
      : _device{device}, _pAllocator{nullptr} {
   34878:	48 89 bb 48 04 00 00 	mov    %rdi,0x448(%rbx)
   3487f:	48 c7 83 50 04 00 00 	movq   $0x0,0x450(%rbx)
   34886:	00 00 00 00 
   3488a:	c6 83 58 04 00 00 00 	movb   $0x0,0x458(%rbx)
    VkDescriptorPoolCreateInfo poolInfo{};
   34891:	0f 11 84 24 14 01 00 	movups %xmm0,0x114(%rsp)
   34898:	00 
    poolSizes[0].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
   34899:	c7 84 24 c0 00 00 00 	movl   $0x6,0xc0(%rsp)
   348a0:	06 00 00 00 
    VkDescriptorPoolCreateInfo poolInfo{};
   348a4:	0f 11 84 24 20 01 00 	movups %xmm0,0x120(%rsp)
   348ab:	00 
    poolSizes[0].descriptorCount = static_cast<uint32_t>(descriptorCount);
   348ac:	89 84 24 c4 00 00 00 	mov    %eax,0xc4(%rsp)
    poolSizes[1].type = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
   348b3:	c7 84 24 c8 00 00 00 	movl   $0x1,0xc8(%rsp)
   348ba:	01 00 00 00 
    poolSizes[1].descriptorCount = static_cast<uint32_t>(descriptorCount);
   348be:	89 84 24 cc 00 00 00 	mov    %eax,0xcc(%rsp)
    poolInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
   348c5:	c7 84 24 10 01 00 00 	movl   $0x21,0x110(%rsp)
   348cc:	21 00 00 00 
    poolInfo.poolSizeCount = static_cast<uint32_t>(poolSizes.size());
   348d0:	c7 84 24 28 01 00 00 	movl   $0x2,0x128(%rsp)
   348d7:	02 00 00 00 
    poolInfo.pPoolSizes = poolSizes.data();
   348db:	4c 89 bc 24 30 01 00 	mov    %r15,0x130(%rsp)
   348e2:	00 
    poolInfo.maxSets = static_cast<uint32_t>(descriptorCount);
   348e3:	89 84 24 24 01 00 00 	mov    %eax,0x124(%rsp)
    poolInfo.flags = requiredFlag;
   348ea:	c7 84 24 20 01 00 00 	movl   $0x1,0x120(%rsp)
   348f1:	01 00 00 00 
    if (vkCreateDescriptorPool(device, &poolInfo, nullptr, &_pool) !=
   348f5:	e8 16 18 fd ff       	call   6110 <vkCreateDescriptorPool@plt>
   348fa:	85 c0                	test   %eax,%eax
   348fc:	0f 85 17 01 00 00    	jne    34a19 <_ZN4rtvc9VulkanAppC1Ev+0xcf9>
    }
    _isOwner = true;
   34902:	c6 83 58 04 00 00 01 	movb   $0x1,0x458(%rbx)
   34909:	48 8d ab 60 04 00 00 	lea    0x460(%rbx),%rbp
   34910:	48 89 de             	mov    %rbx,%rsi
   34913:	48 89 ef             	mov    %rbp,%rdi
   34916:	e8 75 e2 ff ff       	call   32b90 <_ZN4rtvc9VulkanApp18makeDescriptorSetsEv>
  glfwSetWindowUserPointer(window.ref(), this);
   3491b:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
   34922:	48 89 de             	mov    %rbx,%rsi
   34925:	e8 46 19 fd ff       	call   6270 <glfwSetWindowUserPointer@plt>
  glfwSetFramebufferSizeCallback(window.ref(), framebufferResizeCallback);
   3492a:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
   34931:	48 8d 35 48 c8 ff ff 	lea    -0x37b8(%rip),%rsi        # 31180 <_ZN4rtvc9VulkanApp25framebufferResizeCallbackEP10GLFWwindowii>
   34938:	e8 33 1f fd ff       	call   6870 <glfwSetFramebufferSizeCallback@plt>
}
   3493d:	48 81 c4 58 04 00 00 	add    $0x458,%rsp
   34944:	5b                   	pop    %rbx
   34945:	5d                   	pop    %rbp
   34946:	41 5c                	pop    %r12
   34948:	41 5d                	pop    %r13
   3494a:	41 5e                	pop    %r14
   3494c:	41 5f                	pop    %r15
   3494e:	c3                   	ret
   3494f:	90                   	nop
	if (__n == 0)
   34950:	48 85 ed             	test   %rbp,%rbp
   34953:	0f 84 d0 f4 ff ff    	je     33e29 <_ZN4rtvc9VulkanAppC1Ev+0x109>
      { return _M_dataplus._M_p; }
   34959:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
   3495e:	eb 55                	jmp    349b5 <_ZN4rtvc9VulkanAppC1Ev+0xc95>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   34960:	48 c7 83 08 03 00 00 	movq   $0x0,0x308(%rbx)
   34967:	00 00 00 00 
          renderFinishedSemaphore{frameCount}, inFlightFence{frameCount} {
   3496b:	48 c7 83 10 03 00 00 	movq   $0x0,0x310(%rbx)
   34972:	00 00 00 00 
	this->_M_impl._M_start = this->_M_allocate(__n);
   34976:	0f 11 83 d8 02 00 00 	movups %xmm0,0x2d8(%rbx)
   3497d:	0f 11 83 e8 02 00 00 	movups %xmm0,0x2e8(%rbx)
   34984:	0f 11 83 f8 02 00 00 	movups %xmm0,0x2f8(%rbx)
      for (size_t i = 0; i < frameCount; ++i) {
   3498b:	e9 16 fd ff ff       	jmp    346a6 <_ZN4rtvc9VulkanAppC1Ev+0x986>
	    _M_data(_M_create(__dnew, size_type(0)));
   34990:	48 8d b4 24 10 01 00 	lea    0x110(%rsp),%rsi
   34997:	00 
   34998:	31 d2                	xor    %edx,%edx
   3499a:	4c 89 e7             	mov    %r12,%rdi
   3499d:	e8 de 20 fd ff       	call   6a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
   349a2:	48 89 43 60          	mov    %rax,0x60(%rbx)
   349a6:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
   349a9:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
   349b0:	00 
   349b1:	48 89 43 70          	mov    %rax,0x70(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   349b5:	48 89 ea             	mov    %rbp,%rdx
   349b8:	4c 89 ee             	mov    %r13,%rsi
   349bb:	e8 50 1a fd ff       	call   6410 <memcpy@plt>
	_M_set_length(__dnew);
   349c0:	48 8b ac 24 10 01 00 	mov    0x110(%rsp),%rbp
   349c7:	00 
      { return _M_dataplus._M_p; }
   349c8:	48 8b 43 60          	mov    0x60(%rbx),%rax
   349cc:	e9 5d f4 ff ff       	jmp    33e2e <_ZN4rtvc9VulkanAppC1Ev+0x10e>
	  __throw_length_error(__N(__s));
   349d1:	48 8d 3d 88 28 00 00 	lea    0x2888(%rip),%rdi        # 37260 <_IO_stdin_used+0x260>
   349d8:	e8 a3 18 fd ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
	  __throw_length_error(
   349dd:	48 8d 3d 0c 2c 00 00 	lea    0x2c0c(%rip),%rdi        # 375f0 <_ZTSN3vkw10ImageViewsE+0x220>
   349e4:	e8 97 18 fd ff       	call   6280 <_ZSt20__throw_length_errorPKc@plt>
      { return _M_dataplus._M_p; }
   349e9:	48 89 c5             	mov    %rax,%rbp
   349ec:	e9 d5 43 fd ff       	jmp    8dc6 <_ZN4rtvc9VulkanAppC2Ev.cold>
    }
   349f1:	49 89 c4             	mov    %rax,%r12
   349f4:	e9 5d 44 fd ff       	jmp    8e56 <_ZN4rtvc9VulkanAppC2Ev.cold+0x90>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   349f9:	48 89 c5             	mov    %rax,%rbp
   349fc:	e9 6e 44 fd ff       	jmp    8e6f <_ZN4rtvc9VulkanAppC2Ev.cold+0xa9>
   34a01:	48 89 c5             	mov    %rax,%rbp
   34a04:	e9 3f 46 fd ff       	jmp    9048 <_ZN4rtvc9VulkanAppC2Ev.cold+0x282>
  virtual ~GLFW() { glfwTerminate(); }
   34a09:	48 89 c5             	mov    %rax,%rbp
   34a0c:	e9 24 46 fd ff       	jmp    9035 <_ZN4rtvc9VulkanAppC2Ev.cold+0x26f>
  virtual ~Surface() { _destroyVkData(); }
   34a11:	48 89 c5             	mov    %rax,%rbp
   34a14:	e9 61 45 fd ff       	jmp    8f7a <_ZN4rtvc9VulkanAppC2Ev.cold+0x1b4>
   34a19:	e9 15 49 fd ff       	jmp    9333 <_ZN4rtvc9VulkanAppC2Ev.cold+0x56d>
  }
   34a1e:	48 89 c5             	mov    %rax,%rbp
   34a21:	e9 95 44 fd ff       	jmp    8ebb <_ZN4rtvc9VulkanAppC2Ev.cold+0xf5>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   34a26:	48 89 c5             	mov    %rax,%rbp
   34a29:	e9 b0 43 fd ff       	jmp    8dde <_ZN4rtvc9VulkanAppC2Ev.cold+0x18>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   34a2e:	48 89 c5             	mov    %rax,%rbp
   34a31:	e9 a8 43 fd ff       	jmp    8dde <_ZN4rtvc9VulkanAppC2Ev.cold+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   34a36:	48 89 c5             	mov    %rax,%rbp
   34a39:	e9 b5 43 fd ff       	jmp    8df3 <_ZN4rtvc9VulkanAppC2Ev.cold+0x2d>
   34a3e:	49 89 c4             	mov    %rax,%r12
   34a41:	e9 1c 44 fd ff       	jmp    8e62 <_ZN4rtvc9VulkanAppC2Ev.cold+0x9c>
  virtual ~Instance() { _destroyVkData(); }
   34a46:	48 89 c5             	mov    %rax,%rbp
   34a49:	e9 58 46 fd ff       	jmp    90a6 <_ZN4rtvc9VulkanAppC2Ev.cold+0x2e0>
   34a4e:	e9 4b 46 fd ff       	jmp    909e <_ZN4rtvc9VulkanAppC2Ev.cold+0x2d8>
   34a53:	48 89 c5             	mov    %rax,%rbp
   34a56:	e9 16 47 fd ff       	jmp    9171 <_ZN4rtvc9VulkanAppC2Ev.cold+0x3ab>
   34a5b:	48 89 c5             	mov    %rax,%rbp
   34a5e:	4c 8d 25 cb bb 00 00 	lea    0xbbcb(%rip),%r12        # 40630 <_ZTVN3vkw6BufferE+0x10>
   34a65:	e9 ed 46 fd ff       	jmp    9157 <_ZN4rtvc9VulkanAppC2Ev.cold+0x391>
   34a6a:	49 89 c5             	mov    %rax,%r13
   34a6d:	e9 0e 47 fd ff       	jmp    9180 <_ZN4rtvc9VulkanAppC2Ev.cold+0x3ba>
   34a72:	48 89 c5             	mov    %rax,%rbp
   34a75:	e9 bc 46 fd ff       	jmp    9136 <_ZN4rtvc9VulkanAppC2Ev.cold+0x370>
    if (_isOwner) {
   34a7a:	48 89 c5             	mov    %rax,%rbp
   34a7d:	e9 09 47 fd ff       	jmp    918b <_ZN4rtvc9VulkanAppC2Ev.cold+0x3c5>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   34a82:	49 89 c4             	mov    %rax,%r12
   34a85:	e9 9a 43 fd ff       	jmp    8e24 <_ZN4rtvc9VulkanAppC2Ev.cold+0x5e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   34a8a:	48 89 c5             	mov    %rax,%rbp
   34a8d:	e9 70 47 fd ff       	jmp    9202 <_ZN4rtvc9VulkanAppC2Ev.cold+0x43c>
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
   34a92:	48 89 c5             	mov    %rax,%rbp
   34a95:	e9 84 47 fd ff       	jmp    921e <_ZN4rtvc9VulkanAppC2Ev.cold+0x458>
   34a9a:	48 89 c5             	mov    %rax,%rbp
   34a9d:	e9 44 44 fd ff       	jmp    8ee6 <_ZN4rtvc9VulkanAppC2Ev.cold+0x120>
  virtual ~ImageView() { _destroyVkData(); }
   34aa2:	48 89 c5             	mov    %rax,%rbp
   34aa5:	e9 e8 47 fd ff       	jmp    9292 <_ZN4rtvc9VulkanAppC2Ev.cold+0x4cc>
  virtual ~Swapchain() { _destroyVkData(); }
   34aaa:	48 89 c5             	mov    %rax,%rbp
   34aad:	e9 b6 47 fd ff       	jmp    9268 <_ZN4rtvc9VulkanAppC2Ev.cold+0x4a2>
  }
   34ab2:	48 89 c5             	mov    %rax,%rbp
   34ab5:	e9 6b 44 fd ff       	jmp    8f25 <_ZN4rtvc9VulkanAppC2Ev.cold+0x15f>
   34aba:	49 89 c5             	mov    %rax,%r13
   34abd:	e9 3f 48 fd ff       	jmp    9301 <_ZN4rtvc9VulkanAppC2Ev.cold+0x53b>
  virtual ~GraphicsPipeline() { _destroyVkData(); }
   34ac2:	49 89 c5             	mov    %rax,%r13
   34ac5:	e9 02 48 fd ff       	jmp    92cc <_ZN4rtvc9VulkanAppC2Ev.cold+0x506>
    if (_isOwner) {
   34aca:	48 89 c5             	mov    %rax,%rbp
   34acd:	e9 b8 43 fd ff       	jmp    8e8a <_ZN4rtvc9VulkanAppC2Ev.cold+0xc4>
   34ad2:	48 89 c5             	mov    %rax,%rbp
   34ad5:	e9 52 46 fd ff       	jmp    912c <_ZN4rtvc9VulkanAppC2Ev.cold+0x366>
class Framebuffers : public vkw::Framebuffers {
   34ada:	48 89 c5             	mov    %rax,%rbp
   34add:	e9 cb 43 fd ff       	jmp    8ead <_ZN4rtvc9VulkanAppC2Ev.cold+0xe7>
   34ae2:	e9 c0 48 fd ff       	jmp    93a7 <_ZN4rtvc9VulkanAppC2Ev.cold+0x5e1>
   34ae7:	e9 ed 45 fd ff       	jmp    90d9 <_ZN4rtvc9VulkanAppC2Ev.cold+0x313>
   34aec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000034af0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void VulkanApp::writeInfo(std::string filePath) {
   34af0:	41 57                	push   %r15
   34af2:	41 56                	push   %r14
   34af4:	41 55                	push   %r13
   34af6:	41 54                	push   %r12
   34af8:	55                   	push   %rbp
   34af9:	48 89 f5             	mov    %rsi,%rbp
   34afc:	53                   	push   %rbx
   34afd:	48 81 ec 38 0e 00 00 	sub    $0xe38,%rsp
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
   34b04:	48 8d 84 24 b8 03 00 	lea    0x3b8(%rsp),%rax
   34b0b:	00 
   34b0c:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
   34b13:	00 
   34b14:	48 8d 9c 24 b0 02 00 	lea    0x2b0(%rsp),%rbx
   34b1b:	00 
   34b1c:	48 89 c7             	mov    %rax,%rdi
   34b1f:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
   34b24:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
   34b2b:	00 
   34b2c:	e8 0f 16 fd ff       	call   6140 <_ZNSt8ios_baseC2Ev@plt>
   34b31:	48 8d 05 78 bd 00 00 	lea    0xbd78(%rip),%rax        # 408b0 <_ZTVSt9basic_iosIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
   34b38:	31 ff                	xor    %edi,%edi
      { this->init(0); }
   34b3a:	31 f6                	xor    %esi,%esi
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
   34b3c:	48 89 84 24 b8 03 00 	mov    %rax,0x3b8(%rsp)
   34b43:	00 
      : _M_gcount(streamsize(0))
   34b44:	48 8b 05 85 be 00 00 	mov    0xbe85(%rip),%rax        # 409d0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
   34b4b:	66 0f ef c0          	pxor   %xmm0,%xmm0
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
   34b4f:	66 89 bc 24 98 04 00 	mov    %di,0x498(%rsp)
   34b56:	00 
   34b57:	48 8b 0d 7a be 00 00 	mov    0xbe7a(%rip),%rcx        # 409d8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
   34b5e:	0f 29 84 24 a0 04 00 	movaps %xmm0,0x4a0(%rsp)
   34b65:	00 
   34b66:	0f 29 84 24 b0 04 00 	movaps %xmm0,0x4b0(%rsp)
   34b6d:	00 
   34b6e:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
   34b75:	00 
   34b76:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
   34b7a:	48 c7 84 24 90 04 00 	movq   $0x0,0x490(%rsp)
   34b81:	00 00 00 00 00 
   34b86:	48 89 8c 04 b0 02 00 	mov    %rcx,0x2b0(%rsp,%rax,1)
   34b8d:	00 
      { this->init(0); }
   34b8e:	48 8b 05 3b be 00 00 	mov    0xbe3b(%rip),%rax        # 409d0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
      : _M_gcount(streamsize(0))
   34b95:	48 c7 84 24 b8 02 00 	movq   $0x0,0x2b8(%rsp)
   34b9c:	00 00 00 00 00 
      { this->init(0); }
   34ba1:	48 03 58 e8          	add    -0x18(%rax),%rbx
   34ba5:	48 89 df             	mov    %rbx,%rdi
   34ba8:	e8 d3 1b fd ff       	call   6780 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>
      { this->init(0); }
   34bad:	48 8b 05 2c be 00 00 	mov    0xbe2c(%rip),%rax        # 409e0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x20>
   34bb4:	48 8d 9c 24 c0 02 00 	lea    0x2c0(%rsp),%rbx
   34bbb:	00 
   34bbc:	31 f6                	xor    %esi,%esi
   34bbe:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
   34bc2:	48 89 84 24 c0 02 00 	mov    %rax,0x2c0(%rsp)
   34bc9:	00 
   34bca:	48 8b 05 17 be 00 00 	mov    0xbe17(%rip),%rax        # 409e8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x28>
   34bd1:	48 01 df             	add    %rbx,%rdi
   34bd4:	48 89 07             	mov    %rax,(%rdi)
   34bd7:	e8 a4 1b fd ff       	call   6780 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
   34bdc:	48 8b 05 e5 bd 00 00 	mov    0xbde5(%rip),%rax        # 409c8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x8>
   34be3:	48 8b 0d 06 be 00 00 	mov    0xbe06(%rip),%rcx        # 409f0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x30>
   34bea:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   34bee:	48 89 8c 04 b0 02 00 	mov    %rcx,0x2b0(%rsp,%rax,1)
   34bf5:	00 
      : __iostream_type(), _M_filebuf()
   34bf6:	48 8d 05 db bc 00 00 	lea    0xbcdb(%rip),%rax        # 408d8 <_ZTVSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
   34bfd:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
   34c04:	00 
   34c05:	48 83 c0 50          	add    $0x50,%rax
   34c09:	48 89 84 24 b8 03 00 	mov    %rax,0x3b8(%rsp)
   34c10:	00 
   34c11:	48 83 e8 28          	sub    $0x28,%rax
   34c15:	48 89 84 24 c0 02 00 	mov    %rax,0x2c0(%rsp)
   34c1c:	00 
   34c1d:	48 8d 84 24 c8 02 00 	lea    0x2c8(%rsp),%rax
   34c24:	00 
   34c25:	48 89 c7             	mov    %rax,%rdi
   34c28:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
   34c2f:	00 
   34c30:	e8 5b 19 fd ff       	call   6590 <_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev@plt>
      { this->init(&_M_filebuf); }
   34c35:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
   34c3c:	00 
   34c3d:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
   34c44:	00 
   34c45:	e8 36 1b fd ff       	call   6780 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>
      { return open(__s.c_str(), __mode); }
   34c4a:	48 8b 75 00          	mov    0x0(%rbp),%rsi
   34c4e:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
   34c55:	00 
   34c56:	ba 18 00 00 00       	mov    $0x18,%edx
   34c5b:	e8 30 18 fd ff       	call   6490 <_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode@plt>
      void
      open(const std::string& __s,
	   ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
	if (!_M_filebuf.open(__s, __mode))
	  this->setstate(ios_base::failbit);
   34c60:	48 8b 94 24 b0 02 00 	mov    0x2b0(%rsp),%rdx
   34c67:	00 
   34c68:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
   34c6d:	48 03 7a e8          	add    -0x18(%rdx),%rdi
	if (!_M_filebuf.open(__s, __mode))
   34c71:	48 85 c0             	test   %rax,%rax
   34c74:	0f 84 a8 0f 00 00    	je     35c22 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1132>
	else
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 409. Closing an fstream should clear error state
	  this->clear();
   34c7a:	31 f6                	xor    %esi,%esi
   34c7c:	e8 6f 1d fd ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
      { return _M_file.is_open(); }
   34c81:	48 8d 84 24 30 03 00 	lea    0x330(%rsp),%rax
   34c88:	00 
   34c89:	48 89 c7             	mov    %rax,%rdi
   34c8c:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
   34c93:	00 
   34c94:	e8 47 14 fd ff       	call   60e0 <_ZNKSt12__basic_fileIcE7is_openEv@plt>
  if (!fs.is_open()) {
   34c99:	84 c0                	test   %al,%al
   34c9b:	0f 84 6e 48 fd ff    	je     950f <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x14f>
	__ostream_insert(__out, __s,
   34ca1:	ba 18 00 00 00       	mov    $0x18,%edx
   34ca6:	48 8d 35 16 42 00 00 	lea    0x4216(%rip),%rsi        # 38ec3 <_ZL11stbi__bmask+0x743>
   34cad:	48 89 df             	mov    %rbx,%rdi
   34cb0:	e8 7b 19 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   34cb5:	ba 10 00 00 00       	mov    $0x10,%edx
   34cba:	48 8d 35 1b 42 00 00 	lea    0x421b(%rip),%rsi        # 38edc <_ZL11stbi__bmask+0x75c>
   34cc1:	48 89 df             	mov    %rbx,%rdi
   34cc4:	e8 67 19 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
  auto availableInstanceExtensions = vkh::getAvailableInstanceExtensionList();
   34cc9:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
   34cd0:	00 
   34cd1:	31 f6                	xor    %esi,%esi
   34cd3:	e8 88 7c fd ff       	call   c960 <_ZN3vkh33getAvailableInstanceExtensionListEPKc>
      : _M_current(__i) { }
   34cd8:	4c 8b ac 24 c8 00 00 	mov    0xc8(%rsp),%r13
   34cdf:	00 
  for (const auto &extension : availableInstanceExtensions) {
   34ce0:	48 8b ac 24 c0 00 00 	mov    0xc0(%rsp),%rbp
   34ce7:	00 
   34ce8:	4c 8d 25 28 43 00 00 	lea    0x4328(%rip),%r12        # 39017 <_ZL11stbi__bmask+0x897>
	return __ostream_insert(__out, &__c, 1);
   34cef:	4c 8d b4 24 b6 00 00 	lea    0xb6(%rsp),%r14
   34cf6:	00 
   34cf7:	4c 39 ed             	cmp    %r13,%rbp
   34cfa:	75 28                	jne    34d24 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x234>
   34cfc:	e9 8a 00 00 00       	jmp    34d8b <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x29b>
   34d01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   34d08:	ba 01 00 00 00       	mov    $0x1,%edx
   34d0d:	4c 89 f6             	mov    %r14,%rsi
   34d10:	48 89 df             	mov    %rbx,%rdi
   34d13:	e8 18 19 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   34d18:	48 81 c5 04 01 00 00 	add    $0x104,%rbp
   34d1f:	49 39 ed             	cmp    %rbp,%r13
   34d22:	74 67                	je     34d8b <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x29b>
	__ostream_insert(__out, __s,
   34d24:	ba 02 00 00 00       	mov    $0x2,%edx
   34d29:	4c 89 e6             	mov    %r12,%rsi
   34d2c:	48 89 df             	mov    %rbx,%rdi
   34d2f:	e8 fc 18 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (!__s)
   34d34:	48 85 ed             	test   %rbp,%rbp
   34d37:	0f 84 93 0b 00 00    	je     358d0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde0>
	return __builtin_strlen(__s);
   34d3d:	48 89 ef             	mov    %rbp,%rdi
   34d40:	e8 db 14 fd ff       	call   6220 <strlen@plt>
	__ostream_insert(__out, __s,
   34d45:	48 89 ee             	mov    %rbp,%rsi
   34d48:	48 89 df             	mov    %rbx,%rdi
   34d4b:	48 89 c2             	mov    %rax,%rdx
   34d4e:	e8 dd 18 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
   34d53:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   34d5a:	00 
   34d5b:	c6 84 24 b6 00 00 00 	movb   $0xa,0xb6(%rsp)
   34d62:	0a 
    { return _M_width; }
   34d63:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   34d67:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   34d6e:	00 00 
   34d70:	75 96                	jne    34d08 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>
      __out.put(__c);
   34d72:	be 0a 00 00 00       	mov    $0xa,%esi
   34d77:	48 89 df             	mov    %rbx,%rdi
   34d7a:	e8 c1 12 fd ff       	call   6040 <_ZNSo3putEc@plt>
   34d7f:	48 81 c5 04 01 00 00 	add    $0x104,%rbp
   34d86:	49 39 ed             	cmp    %rbp,%r13
   34d89:	75 99                	jne    34d24 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x234>
	__ostream_insert(__out, __s,
   34d8b:	ba 0f 00 00 00       	mov    $0xf,%edx
   34d90:	48 8d 35 56 41 00 00 	lea    0x4156(%rip),%rsi        # 38eed <_ZL11stbi__bmask+0x76d>
   34d97:	48 89 df             	mov    %rbx,%rdi
   34d9a:	e8 91 18 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   34d9f:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
   34da6:	00 
   34da7:	4c 8d 25 69 42 00 00 	lea    0x4269(%rip),%r12        # 39017 <_ZL11stbi__bmask+0x897>
	return __ostream_insert(__out, &__c, 1);
   34dae:	4c 8d b4 24 20 01 00 	lea    0x120(%rsp),%r14
   34db5:	00 
   34db6:	4c 8b 68 08          	mov    0x8(%rax),%r13
  for (const auto &extensionName : instanceExtensions) {
   34dba:	48 8b 28             	mov    (%rax),%rbp
   34dbd:	49 39 ed             	cmp    %rbp,%r13
   34dc0:	75 27                	jne    34de9 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f9>
   34dc2:	e9 8a 00 00 00       	jmp    34e51 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x361>
   34dc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   34dce:	00 00 
   34dd0:	ba 01 00 00 00       	mov    $0x1,%edx
   34dd5:	4c 89 f6             	mov    %r14,%rsi
   34dd8:	48 89 df             	mov    %rbx,%rdi
   34ddb:	e8 50 18 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   34de0:	48 83 c5 08          	add    $0x8,%rbp
   34de4:	49 39 ed             	cmp    %rbp,%r13
   34de7:	74 68                	je     34e51 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x361>
	__ostream_insert(__out, __s,
   34de9:	ba 02 00 00 00       	mov    $0x2,%edx
   34dee:	4c 89 e6             	mov    %r12,%rsi
   34df1:	48 89 df             	mov    %rbx,%rdi
   34df4:	e8 37 18 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    fs << "\t\t" << extensionName << '\n';
   34df9:	4c 8b 7d 00          	mov    0x0(%rbp),%r15
      if (!__s)
   34dfd:	4d 85 ff             	test   %r15,%r15
   34e00:	0f 84 ea 0a 00 00    	je     358f0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe00>
   34e06:	4c 89 ff             	mov    %r15,%rdi
   34e09:	e8 12 14 fd ff       	call   6220 <strlen@plt>
	__ostream_insert(__out, __s,
   34e0e:	4c 89 fe             	mov    %r15,%rsi
   34e11:	48 89 df             	mov    %rbx,%rdi
   34e14:	48 89 c2             	mov    %rax,%rdx
   34e17:	e8 14 18 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
   34e1c:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   34e23:	00 
   34e24:	c6 84 24 20 01 00 00 	movb   $0xa,0x120(%rsp)
   34e2b:	0a 
   34e2c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   34e30:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   34e37:	00 00 
   34e39:	75 95                	jne    34dd0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e0>
      __out.put(__c);
   34e3b:	be 0a 00 00 00       	mov    $0xa,%esi
   34e40:	48 89 df             	mov    %rbx,%rdi
   34e43:	e8 f8 11 fd ff       	call   6040 <_ZNSo3putEc@plt>
  for (const auto &extensionName : instanceExtensions) {
   34e48:	48 83 c5 08          	add    $0x8,%rbp
   34e4c:	49 39 ed             	cmp    %rbp,%r13
   34e4f:	75 98                	jne    34de9 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f9>
      if (__out.width() != 0)
   34e51:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   34e58:	00 
   34e59:	c6 84 24 40 01 00 00 	movb   $0xa,0x140(%rsp)
   34e60:	0a 
   34e61:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   34e65:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   34e6c:	00 00 
   34e6e:	0f 84 9c 0d 00 00    	je     35c10 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1120>
	return __ostream_insert(__out, &__c, 1);
   34e74:	48 8d b4 24 40 01 00 	lea    0x140(%rsp),%rsi
   34e7b:	00 
   34e7c:	ba 01 00 00 00       	mov    $0x1,%edx
   34e81:	48 89 df             	mov    %rbx,%rdi
   34e84:	e8 a7 17 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	__ostream_insert(__out, __s,
   34e89:	ba 14 00 00 00       	mov    $0x14,%edx
   34e8e:	48 8d 35 68 40 00 00 	lea    0x4068(%rip),%rsi        # 38efd <_ZL11stbi__bmask+0x77d>
   34e95:	48 89 df             	mov    %rbx,%rdi
   34e98:	e8 93 17 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   34e9d:	ba 10 00 00 00       	mov    $0x10,%edx
   34ea2:	48 8d 35 69 40 00 00 	lea    0x4069(%rip),%rsi        # 38f12 <_ZL11stbi__bmask+0x792>
   34ea9:	48 89 df             	mov    %rbx,%rdi
   34eac:	e8 7f 17 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
  auto availableInstanceLayers = vkh::getAvailableInstanceLayerList();
   34eb1:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
   34eb8:	00 
   34eb9:	e8 72 7e fd ff       	call   cd30 <_ZN3vkh29getAvailableInstanceLayerListEv>
   34ebe:	4c 8b ac 24 e8 00 00 	mov    0xe8(%rsp),%r13
   34ec5:	00 
  for (const auto &layer : availableInstanceLayers) {
   34ec6:	48 8b ac 24 e0 00 00 	mov    0xe0(%rsp),%rbp
   34ecd:	00 
   34ece:	4c 8d 25 42 41 00 00 	lea    0x4142(%rip),%r12        # 39017 <_ZL11stbi__bmask+0x897>
	return __ostream_insert(__out, &__c, 1);
   34ed5:	4c 8d b4 24 60 01 00 	lea    0x160(%rsp),%r14
   34edc:	00 
   34edd:	49 39 ed             	cmp    %rbp,%r13
   34ee0:	75 2a                	jne    34f0c <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x41c>
   34ee2:	e9 8c 00 00 00       	jmp    34f73 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x483>
   34ee7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   34eee:	00 00 
   34ef0:	ba 01 00 00 00       	mov    $0x1,%edx
   34ef5:	4c 89 f6             	mov    %r14,%rsi
   34ef8:	48 89 df             	mov    %rbx,%rdi
   34efb:	e8 30 17 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   34f00:	48 81 c5 08 02 00 00 	add    $0x208,%rbp
   34f07:	49 39 ed             	cmp    %rbp,%r13
   34f0a:	74 67                	je     34f73 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x483>
	__ostream_insert(__out, __s,
   34f0c:	ba 02 00 00 00       	mov    $0x2,%edx
   34f11:	4c 89 e6             	mov    %r12,%rsi
   34f14:	48 89 df             	mov    %rbx,%rdi
   34f17:	e8 14 17 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (!__s)
   34f1c:	48 85 ed             	test   %rbp,%rbp
   34f1f:	0f 84 eb 09 00 00    	je     35910 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe20>
   34f25:	48 89 ef             	mov    %rbp,%rdi
   34f28:	e8 f3 12 fd ff       	call   6220 <strlen@plt>
	__ostream_insert(__out, __s,
   34f2d:	48 89 ee             	mov    %rbp,%rsi
   34f30:	48 89 df             	mov    %rbx,%rdi
   34f33:	48 89 c2             	mov    %rax,%rdx
   34f36:	e8 f5 16 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
   34f3b:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   34f42:	00 
   34f43:	c6 84 24 60 01 00 00 	movb   $0xa,0x160(%rsp)
   34f4a:	0a 
   34f4b:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   34f4f:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   34f56:	00 00 
   34f58:	75 96                	jne    34ef0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x400>
      __out.put(__c);
   34f5a:	be 0a 00 00 00       	mov    $0xa,%esi
   34f5f:	48 89 df             	mov    %rbx,%rdi
   34f62:	e8 d9 10 fd ff       	call   6040 <_ZNSo3putEc@plt>
   34f67:	48 81 c5 08 02 00 00 	add    $0x208,%rbp
   34f6e:	49 39 ed             	cmp    %rbp,%r13
   34f71:	75 99                	jne    34f0c <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x41c>
	__ostream_insert(__out, __s,
   34f73:	ba 0f 00 00 00       	mov    $0xf,%edx
   34f78:	48 8d 35 a4 3f 00 00 	lea    0x3fa4(%rip),%rsi        # 38f23 <_ZL11stbi__bmask+0x7a3>
   34f7f:	48 89 df             	mov    %rbx,%rdi
   34f82:	e8 a9 16 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   34f87:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
   34f8e:	00 
   34f8f:	4c 8d 25 81 40 00 00 	lea    0x4081(%rip),%r12        # 39017 <_ZL11stbi__bmask+0x897>
	return __ostream_insert(__out, &__c, 1);
   34f96:	4c 8d b4 24 d0 01 00 	lea    0x1d0(%rsp),%r14
   34f9d:	00 
   34f9e:	4c 8b 68 20          	mov    0x20(%rax),%r13
  for (const auto &layer : instanceLayers) {
   34fa2:	48 8b 68 18          	mov    0x18(%rax),%rbp
   34fa6:	49 39 ed             	cmp    %rbp,%r13
   34fa9:	75 1e                	jne    34fc9 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d9>
   34fab:	e9 81 00 00 00       	jmp    35031 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x541>
   34fb0:	ba 01 00 00 00       	mov    $0x1,%edx
   34fb5:	4c 89 f6             	mov    %r14,%rsi
   34fb8:	48 89 df             	mov    %rbx,%rdi
   34fbb:	e8 70 16 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   34fc0:	48 83 c5 08          	add    $0x8,%rbp
   34fc4:	49 39 ed             	cmp    %rbp,%r13
   34fc7:	74 68                	je     35031 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x541>
	__ostream_insert(__out, __s,
   34fc9:	ba 02 00 00 00       	mov    $0x2,%edx
   34fce:	4c 89 e6             	mov    %r12,%rsi
   34fd1:	48 89 df             	mov    %rbx,%rdi
   34fd4:	e8 57 16 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    fs << "\t\t" << layer << '\n';
   34fd9:	4c 8b 7d 00          	mov    0x0(%rbp),%r15
      if (!__s)
   34fdd:	4d 85 ff             	test   %r15,%r15
   34fe0:	0f 84 4a 09 00 00    	je     35930 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe40>
   34fe6:	4c 89 ff             	mov    %r15,%rdi
   34fe9:	e8 32 12 fd ff       	call   6220 <strlen@plt>
	__ostream_insert(__out, __s,
   34fee:	4c 89 fe             	mov    %r15,%rsi
   34ff1:	48 89 df             	mov    %rbx,%rdi
   34ff4:	48 89 c2             	mov    %rax,%rdx
   34ff7:	e8 34 16 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
   34ffc:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   35003:	00 
   35004:	c6 84 24 d0 01 00 00 	movb   $0xa,0x1d0(%rsp)
   3500b:	0a 
   3500c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   35010:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   35017:	00 00 
   35019:	75 95                	jne    34fb0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c0>
      __out.put(__c);
   3501b:	be 0a 00 00 00       	mov    $0xa,%esi
   35020:	48 89 df             	mov    %rbx,%rdi
   35023:	e8 18 10 fd ff       	call   6040 <_ZNSo3putEc@plt>
  for (const auto &layer : instanceLayers) {
   35028:	48 83 c5 08          	add    $0x8,%rbp
   3502c:	49 39 ed             	cmp    %rbp,%r13
   3502f:	75 98                	jne    34fc9 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d9>
      if (__out.width() != 0)
   35031:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   35038:	00 
   35039:	c6 84 24 c0 04 00 00 	movb   $0xa,0x4c0(%rsp)
   35040:	0a 
   35041:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   35045:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   3504c:	00 00 
   3504e:	0f 84 aa 0b 00 00    	je     35bfe <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x110e>
	return __ostream_insert(__out, &__c, 1);
   35054:	48 8d 84 24 c0 04 00 	lea    0x4c0(%rsp),%rax
   3505b:	00 
   3505c:	ba 01 00 00 00       	mov    $0x1,%edx
   35061:	48 89 df             	mov    %rbx,%rdi
   35064:	48 89 c6             	mov    %rax,%rsi
   35067:	e8 c4 15 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	__ostream_insert(__out, __s,
   3506c:	ba 15 00 00 00       	mov    $0x15,%edx
   35071:	48 8d 35 bb 3e 00 00 	lea    0x3ebb(%rip),%rsi        # 38f33 <_ZL11stbi__bmask+0x7b3>
   35078:	48 89 df             	mov    %rbx,%rdi
   3507b:	e8 b0 15 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
  auto physicalDeviceList = vkh::getPhysicalDeviceList(instance.ref());
   35080:	4c 8b bc 24 90 00 00 	mov    0x90(%rsp),%r15
   35087:	00 
   35088:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
   3508f:	00 
   35090:	49 8b b7 a0 00 00 00 	mov    0xa0(%r15),%rsi
   35097:	e8 a4 7c fd ff       	call   cd40 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T>
      vkh::getPhysicalDevicePropertyList(device.physical());
   3509c:	49 8b b7 50 01 00 00 	mov    0x150(%r15),%rsi
   350a3:	48 8d bc 24 a0 07 00 	lea    0x7a0(%rsp),%rdi
   350aa:	00 
   350ab:	e8 70 7d fd ff       	call   ce20 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_T>
   350b0:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
   350b7:	00 
   350b8:	4c 8b ac 24 00 01 00 	mov    0x100(%rsp),%r13
   350bf:	00 
   350c0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  for (const auto &physDev : physicalDeviceList) {
   350c5:	4c 39 e8             	cmp    %r13,%rax
   350c8:	0f 84 60 06 00 00    	je     3572e <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc3e>
   350ce:	48 8d 84 24 e0 0a 00 	lea    0xae0(%rsp),%rax
   350d5:	00 
  size_t index = 1;
   350d6:	41 bf 01 00 00 00    	mov    $0x1,%r15d
  size_t selectedDeviceIndex = 0;
   350dc:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
   350e3:	00 00 
   350e5:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
   350ea:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
   350f1:	00 
   350f2:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
   350f7:	48 8d 84 24 d0 01 00 	lea    0x1d0(%rsp),%rax
   350fe:	00 
   350ff:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
   35104:	48 8d 84 24 c0 04 00 	lea    0x4c0(%rsp),%rax
   3510b:	00 
   3510c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
   35111:	48 8d 84 24 50 01 00 	lea    0x150(%rsp),%rax
   35118:	00 
   35119:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
   3511e:	48 8d 84 24 64 01 00 	lea    0x164(%rsp),%rax
   35125:	00 
   35126:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
   3512b:	48 8d 84 24 d8 01 00 	lea    0x1d8(%rsp),%rax
   35132:	00 
   35133:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
   35138:	48 8d 84 24 6c 01 00 	lea    0x16c(%rsp),%rax
   3513f:	00 
   35140:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
   35145:	48 8d 84 24 d4 01 00 	lea    0x1d4(%rsp),%rax
   3514c:	00 
   3514d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
   35152:	48 8d 84 24 dc 01 00 	lea    0x1dc(%rsp),%rax
   35159:	00 
   3515a:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
   35161:	00 
	return __ostream_insert(__out, &__c, 1);
   35162:	48 8d 84 24 bd 00 00 	lea    0xbd(%rsp),%rax
   35169:	00 
   3516a:	48 89 04 24          	mov    %rax,(%rsp)
   3516e:	66 90                	xchg   %ax,%ax
	: allocator_type(__a), _M_p(__dat) { }
   35170:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    VkPhysicalDeviceVulkan11Properties vk11Props{};
   35175:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
	__c1 = __c2;
   3517a:	c6 84 24 50 01 00 00 	movb   $0x0,0x150(%rsp)
   35181:	00 
      { _M_string_length = __length; }
   35182:	48 c7 84 24 48 01 00 	movq   $0x0,0x148(%rsp)
   35189:	00 00 00 00 00 
	: allocator_type(__a), _M_p(__dat) { }
   3518e:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
   35195:	00 
   35196:	31 c0                	xor    %eax,%eax
   35198:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
   3519f:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
   351a4:	48 c7 42 f0 00 00 00 	movq   $0x0,-0x10(%rdx)
   351ab:	00 
   351ac:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
   351b1:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   351b5:	48 29 f9             	sub    %rdi,%rcx
   351b8:	83 c1 6c             	add    $0x6c,%ecx
   351bb:	c1 e9 03             	shr    $0x3,%ecx
   351be:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    VkPhysicalDeviceVulkan12Properties vk12Props{};
   351c1:	b9 5c 00 00 00       	mov    $0x5c,%ecx
    vk11Props.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
   351c6:	c7 84 24 60 01 00 00 	movl   $0x32,0x160(%rsp)
   351cd:	32 00 00 00 
    VkPhysicalDeviceVulkan12Properties vk12Props{};
   351d1:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    VkPhysicalDeviceVulkan13Properties vk13Props{};
   351d6:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
    VkPhysicalDeviceVulkan12Properties vk12Props{};
   351db:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    vk12Props.pNext = &vk11Props;
   351de:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
    VkPhysicalDeviceVulkan13Properties vk13Props{};
   351e3:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
   351ea:	00 
    vk12Props.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
   351eb:	c7 84 24 c0 04 00 00 	movl   $0x34,0x4c0(%rsp)
   351f2:	34 00 00 00 
    vk12Props.pNext = &vk11Props;
   351f6:	48 89 8c 24 c8 04 00 	mov    %rcx,0x4c8(%rsp)
   351fd:	00 
    VkPhysicalDeviceVulkan13Properties vk13Props{};
   351fe:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
   35203:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   35207:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
   3520e:	48 29 f9             	sub    %rdi,%rcx
   35211:	81 c1 d4 00 00 00    	add    $0xd4,%ecx
   35217:	48 c7 42 f0 00 00 00 	movq   $0x0,-0x10(%rdx)
   3521e:	00 
        vkh::getPhysicalDevicePropertyList(physDev, &vk13Props);
   3521f:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
    VkPhysicalDeviceVulkan13Properties vk13Props{};
   35224:	c1 e9 03             	shr    $0x3,%ecx
   35227:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    vk13Props.pNext = &vk12Props;
   3522a:	48 8d 84 24 c0 04 00 	lea    0x4c0(%rsp),%rax
   35231:	00 
        vkh::getPhysicalDevicePropertyList(physDev, &vk13Props);
   35232:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    vk13Props.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES;
   35237:	c7 84 24 d0 01 00 00 	movl   $0x36,0x1d0(%rsp)
   3523e:	36 00 00 00 
    vk13Props.pNext = &vk12Props;
   35242:	48 89 84 24 d8 01 00 	mov    %rax,0x1d8(%rsp)
   35249:	00 
        vkh::getPhysicalDevicePropertyList(physDev, &vk13Props);
   3524a:	49 8b 75 00          	mov    0x0(%r13),%rsi
    vk13Props.pNext = &vk12Props;
   3524e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        vkh::getPhysicalDevicePropertyList(physDev, &vk13Props);
   35253:	e8 e8 7b fd ff       	call   ce40 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_TPv>
    if (deviceProperties.properties.deviceID ==
   35258:	8b 84 24 ac 07 00 00 	mov    0x7ac(%rsp),%eax
   3525f:	39 84 24 fc 0a 00 00 	cmp    %eax,0xafc(%rsp)
   35266:	0f 84 dc 07 00 00    	je     35a48 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf58>
    if (selectedDeviceIndex == index) {
   3526c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
   35271:	49 39 c7             	cmp    %rax,%r15
   35274:	0f 84 d3 07 00 00    	je     35a4d <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5d>
	__ostream_insert(__out, __s,
   3527a:	ba 03 00 00 00       	mov    $0x3,%edx
   3527f:	48 8d 35 d9 3c 00 00 	lea    0x3cd9(%rip),%rsi        # 38f5f <_ZL11stbi__bmask+0x7df>
   35286:	48 89 df             	mov    %rbx,%rdi
   35289:	e8 a2 13 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_insert(__n); }
   3528e:	4c 89 fe             	mov    %r15,%rsi
   35291:	48 89 df             	mov    %rbx,%rdi
   35294:	e8 b7 10 fd ff       	call   6350 <_ZNSo9_M_insertImEERSoT_@plt>
	__ostream_insert(__out, __s,
   35299:	ba 08 00 00 00       	mov    $0x8,%edx
   3529e:	48 8d 35 b0 3c 00 00 	lea    0x3cb0(%rip),%rsi        # 38f55 <_ZL11stbi__bmask+0x7d5>
   352a5:	48 89 c7             	mov    %rax,%rdi
      { return _M_insert(__n); }
   352a8:	48 89 c5             	mov    %rax,%rbp
	__ostream_insert(__out, __s,
   352ab:	e8 80 13 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_insert(__n); }
   352b0:	4c 89 fe             	mov    %r15,%rsi
   352b3:	48 89 ef             	mov    %rbp,%rdi
   352b6:	e8 95 10 fd ff       	call   6350 <_ZNSo9_M_insertImEERSoT_@plt>
    operator<<(basic_ostream<_CharT, _Traits>& __os,
	       const basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 586. string inserter not a formatted function
      return __ostream_insert(__os, __str.data(), __str.size());
   352bb:	48 8b 94 24 48 01 00 	mov    0x148(%rsp),%rdx
   352c2:	00 
   352c3:	48 8b b4 24 40 01 00 	mov    0x140(%rsp),%rsi
   352ca:	00 
   352cb:	48 89 c7             	mov    %rax,%rdi
   352ce:	e8 5d 13 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   352d3:	48 89 c7             	mov    %rax,%rdi
	__ostream_insert(__out, __s,
   352d6:	ba 02 00 00 00       	mov    $0x2,%edx
   352db:	48 8d 35 18 3c 00 00 	lea    0x3c18(%rip),%rsi        # 38efa <_ZL11stbi__bmask+0x77a>
   352e2:	e8 49 13 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   352e7:	ba 04 00 00 00       	mov    $0x4,%edx
   352ec:	48 8d 35 6b 3c 00 00 	lea    0x3c6b(%rip),%rsi        # 38f5e <_ZL11stbi__bmask+0x7de>
   352f3:	48 89 df             	mov    %rbx,%rdi
   352f6:	e8 35 13 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_insert(__n); }
   352fb:	4c 89 fe             	mov    %r15,%rsi
   352fe:	48 89 df             	mov    %rbx,%rdi
   35301:	e8 4a 10 fd ff       	call   6350 <_ZNSo9_M_insertImEERSoT_@plt>
   35306:	48 89 c7             	mov    %rax,%rdi
	__ostream_insert(__out, __s,
   35309:	ba 16 00 00 00       	mov    $0x16,%edx
   3530e:	48 8d 35 4e 3c 00 00 	lea    0x3c4e(%rip),%rsi        # 38f63 <_ZL11stbi__bmask+0x7e3>
   35315:	e8 16 13 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   3531a:	ba 0e 00 00 00       	mov    $0xe,%edx
   3531f:	48 8d 35 54 3c 00 00 	lea    0x3c54(%rip),%rsi        # 38f7a <_ZL11stbi__bmask+0x7fa>
   35326:	48 89 df             	mov    %rbx,%rdi
   35329:	e8 02 13 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	return _M_insert(static_cast<unsigned long>(__n));
   3532e:	8b b4 24 fc 0a 00 00 	mov    0xafc(%rsp),%esi
   35335:	48 89 df             	mov    %rbx,%rdi
   35338:	e8 13 10 fd ff       	call   6350 <_ZNSo9_M_insertImEERSoT_@plt>
   3533d:	48 89 c7             	mov    %rax,%rdi
      if (__out.width() != 0)
   35340:	48 8b 00             	mov    (%rax),%rax
   35343:	c6 84 24 b7 00 00 00 	movb   $0xa,0xb7(%rsp)
   3534a:	0a 
   3534b:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   3534f:	48 83 7c 07 10 00    	cmpq   $0x0,0x10(%rdi,%rax,1)
   35355:	0f 84 bd 06 00 00    	je     35a18 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf28>
	return __ostream_insert(__out, &__c, 1);
   3535b:	48 8d b4 24 b7 00 00 	lea    0xb7(%rsp),%rsi
   35362:	00 
   35363:	ba 01 00 00 00       	mov    $0x1,%edx
   35368:	e8 c3 12 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	__ostream_insert(__out, __s,
   3536d:	ba 10 00 00 00       	mov    $0x10,%edx
   35372:	48 8d 35 10 3c 00 00 	lea    0x3c10(%rip),%rsi        # 38f89 <_ZL11stbi__bmask+0x809>
   35379:	48 89 df             	mov    %rbx,%rdi
   3537c:	e8 af 12 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	return __builtin_strlen(__s);
   35381:	48 8d ac 24 04 0b 00 	lea    0xb04(%rsp),%rbp
   35388:	00 
   35389:	48 89 ef             	mov    %rbp,%rdi
   3538c:	e8 8f 0e fd ff       	call   6220 <strlen@plt>
   35391:	48 89 ee             	mov    %rbp,%rsi
   35394:	48 89 df             	mov    %rbx,%rdi
   35397:	48 89 c2             	mov    %rax,%rdx
   3539a:	e8 91 12 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
   3539f:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   353a6:	00 
   353a7:	c6 84 24 b8 00 00 00 	movb   $0xa,0xb8(%rsp)
   353ae:	0a 
   353af:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   353b3:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   353ba:	00 00 
   353bc:	0f 84 3e 06 00 00    	je     35a00 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf10>
	return __ostream_insert(__out, &__c, 1);
   353c2:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
   353c9:	00 
   353ca:	ba 01 00 00 00       	mov    $0x1,%edx
   353cf:	48 89 df             	mov    %rbx,%rdi
   353d2:	e8 59 12 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	__ostream_insert(__out, __s,
   353d7:	ba 10 00 00 00       	mov    $0x10,%edx
   353dc:	48 8d 35 b7 3b 00 00 	lea    0x3bb7(%rip),%rsi        # 38f9a <_ZL11stbi__bmask+0x81a>
   353e3:	48 89 df             	mov    %rbx,%rdi
   353e6:	e8 45 12 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    switch (deviceProperties.properties.deviceType) {
   353eb:	8b 84 24 00 0b 00 00 	mov    0xb00(%rsp),%eax
   353f2:	83 f8 03             	cmp    $0x3,%eax
   353f5:	0f 84 c5 06 00 00    	je     35ac0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfd0>
   353fb:	0f 87 6f 05 00 00    	ja     35970 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe80>
   35401:	83 f8 01             	cmp    $0x1,%eax
   35404:	0f 84 96 06 00 00    	je     35aa0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfb0>
   3540a:	83 f8 02             	cmp    $0x2,%eax
   3540d:	0f 85 6d 06 00 00    	jne    35a80 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf90>
   35413:	ba 0d 00 00 00       	mov    $0xd,%edx
   35418:	48 8d 35 9c 3b 00 00 	lea    0x3b9c(%rip),%rsi        # 38fbb <_ZL11stbi__bmask+0x83b>
   3541f:	48 89 df             	mov    %rbx,%rdi
   35422:	e8 09 12 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   35427:	ba 0e 00 00 00       	mov    $0xe,%edx
   3542c:	48 8d 35 af 3b 00 00 	lea    0x3baf(%rip),%rsi        # 38fe2 <_ZL11stbi__bmask+0x862>
   35433:	48 89 df             	mov    %rbx,%rdi
   35436:	e8 f5 11 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    fs << "\t\t\tDriver ID: " << vk12Props.driverID << '\n';
   3543b:	8b b4 24 d0 04 00 00 	mov    0x4d0(%rsp),%esi
   35442:	48 89 df             	mov    %rbx,%rdi
   35445:	e8 d6 15 fd ff       	call   6a20 <_ZNSolsEi@plt>
   3544a:	48 89 c7             	mov    %rax,%rdi
      if (__out.width() != 0)
   3544d:	48 8b 00             	mov    (%rax),%rax
   35450:	c6 84 24 b9 00 00 00 	movb   $0xa,0xb9(%rsp)
   35457:	0a 
   35458:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   3545c:	48 83 7c 07 10 00    	cmpq   $0x0,0x10(%rdi,%rax,1)
   35462:	0f 84 48 05 00 00    	je     359b0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xec0>
	return __ostream_insert(__out, &__c, 1);
   35468:	48 8d b4 24 b9 00 00 	lea    0xb9(%rsp),%rsi
   3546f:	00 
   35470:	ba 01 00 00 00       	mov    $0x1,%edx
   35475:	e8 b6 11 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	__ostream_insert(__out, __s,
   3547a:	ba 10 00 00 00       	mov    $0x10,%edx
   3547f:	48 8d 35 6b 3b 00 00 	lea    0x3b6b(%rip),%rsi        # 38ff1 <_ZL11stbi__bmask+0x871>
   35486:	48 89 df             	mov    %rbx,%rdi
   35489:	e8 a2 11 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   3548e:	48 8d ac 24 d4 04 00 	lea    0x4d4(%rsp),%rbp
   35495:	00 
   35496:	48 89 ef             	mov    %rbp,%rdi
   35499:	e8 82 0d fd ff       	call   6220 <strlen@plt>
   3549e:	48 89 ee             	mov    %rbp,%rsi
   354a1:	48 89 df             	mov    %rbx,%rdi
   354a4:	48 89 c2             	mov    %rax,%rdx
   354a7:	e8 84 11 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
   354ac:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   354b3:	00 
   354b4:	c6 84 24 ba 00 00 00 	movb   $0xa,0xba(%rsp)
   354bb:	0a 
   354bc:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   354c0:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   354c7:	00 00 
   354c9:	0f 84 19 05 00 00    	je     359e8 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xef8>
	return __ostream_insert(__out, &__c, 1);
   354cf:	48 8d b4 24 ba 00 00 	lea    0xba(%rsp),%rsi
   354d6:	00 
   354d7:	ba 01 00 00 00       	mov    $0x1,%edx
   354dc:	48 89 df             	mov    %rbx,%rdi
   354df:	e8 4c 11 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	__ostream_insert(__out, __s,
   354e4:	ba 13 00 00 00       	mov    $0x13,%edx
   354e9:	48 8d 35 12 3b 00 00 	lea    0x3b12(%rip),%rsi        # 39002 <_ZL11stbi__bmask+0x882>
   354f0:	48 89 df             	mov    %rbx,%rdi
   354f3:	e8 38 11 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   354f8:	48 8d ac 24 d4 05 00 	lea    0x5d4(%rsp),%rbp
   354ff:	00 
   35500:	48 89 ef             	mov    %rbp,%rdi
   35503:	e8 18 0d fd ff       	call   6220 <strlen@plt>
   35508:	48 89 ee             	mov    %rbp,%rsi
   3550b:	48 89 df             	mov    %rbx,%rdi
   3550e:	48 89 c2             	mov    %rax,%rdx
   35511:	e8 1a 11 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
   35516:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   3551d:	00 
   3551e:	c6 84 24 bb 00 00 00 	movb   $0xa,0xbb(%rsp)
   35525:	0a 
   35526:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   3552a:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   35531:	00 00 
   35533:	0f 84 97 04 00 00    	je     359d0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee0>
	return __ostream_insert(__out, &__c, 1);
   35539:	48 8d b4 24 bb 00 00 	lea    0xbb(%rsp),%rsi
   35540:	00 
   35541:	ba 01 00 00 00       	mov    $0x1,%edx
   35546:	48 89 df             	mov    %rbx,%rdi
   35549:	e8 e2 10 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	__ostream_insert(__out, __s,
   3554e:	ba 23 00 00 00       	mov    $0x23,%edx
   35553:	48 8d 35 36 37 00 00 	lea    0x3736(%rip),%rsi        # 38c90 <_ZL11stbi__bmask+0x510>
   3555a:	48 89 df             	mov    %rbx,%rdi
   3555d:	e8 ce 10 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_insert(__n); }
   35562:	48 8b b4 24 c8 01 00 	mov    0x1c8(%rsp),%rsi
   35569:	00 
   3556a:	48 89 df             	mov    %rbx,%rdi
   3556d:	e8 de 0d fd ff       	call   6350 <_ZNSo9_M_insertImEERSoT_@plt>
   35572:	48 89 c7             	mov    %rax,%rdi
      if (__out.width() != 0)
   35575:	48 8b 00             	mov    (%rax),%rax
   35578:	c6 84 24 bc 00 00 00 	movb   $0xa,0xbc(%rsp)
   3557f:	0a 
   35580:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   35584:	48 83 7c 07 10 00    	cmpq   $0x0,0x10(%rdi,%rax,1)
   3558a:	0f 84 30 04 00 00    	je     359c0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xed0>
	return __ostream_insert(__out, &__c, 1);
   35590:	48 8d b4 24 bc 00 00 	lea    0xbc(%rsp),%rsi
   35597:	00 
   35598:	ba 01 00 00 00       	mov    $0x1,%edx
   3559d:	e8 8e 10 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	__ostream_insert(__out, __s,
   355a2:	ba 04 00 00 00       	mov    $0x4,%edx
   355a7:	48 8d 35 b0 39 00 00 	lea    0x39b0(%rip),%rsi        # 38f5e <_ZL11stbi__bmask+0x7de>
   355ae:	48 89 df             	mov    %rbx,%rdi
   355b1:	e8 7a 10 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_insert(__n); }
   355b6:	4c 89 fe             	mov    %r15,%rsi
   355b9:	48 89 df             	mov    %rbx,%rdi
   355bc:	e8 8f 0d fd ff       	call   6350 <_ZNSo9_M_insertImEERSoT_@plt>
   355c1:	48 89 c7             	mov    %rax,%rdi
	__ostream_insert(__out, __s,
   355c4:	ba 20 00 00 00       	mov    $0x20,%edx
   355c9:	48 8d 35 e8 36 00 00 	lea    0x36e8(%rip),%rsi        # 38cb8 <_ZL11stbi__bmask+0x538>
   355d0:	e8 5b 10 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        vkh::getAvailableDeviceExtensionList(physDev);
   355d5:	49 8b 75 00          	mov    0x0(%r13),%rsi
   355d9:	48 8d bc 24 20 01 00 	lea    0x120(%rsp),%rdi
   355e0:	00 
   355e1:	31 d2                	xor    %edx,%edx
   355e3:	e8 b8 74 fd ff       	call   caa0 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc>
   355e8:	4c 8b b4 24 28 01 00 	mov    0x128(%rsp),%r14
   355ef:	00 
    for (const auto &extension : availableDeviceExtensions) {
   355f0:	4c 8b a4 24 20 01 00 	mov    0x120(%rsp),%r12
   355f7:	00 
   355f8:	48 8d 2d 17 3a 00 00 	lea    0x3a17(%rip),%rbp        # 39016 <_ZL11stbi__bmask+0x896>
   355ff:	4d 39 e6             	cmp    %r12,%r14
   35602:	75 29                	jne    3562d <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb3d>
   35604:	e9 8b 00 00 00       	jmp    35694 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xba4>
   35609:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __ostream_insert(__out, &__c, 1);
   35610:	48 8b 34 24          	mov    (%rsp),%rsi
   35614:	ba 01 00 00 00       	mov    $0x1,%edx
   35619:	48 89 df             	mov    %rbx,%rdi
   3561c:	e8 0f 10 fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   35621:	49 81 c4 04 01 00 00 	add    $0x104,%r12
   35628:	4d 39 e6             	cmp    %r12,%r14
   3562b:	74 67                	je     35694 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xba4>
	__ostream_insert(__out, __s,
   3562d:	ba 03 00 00 00       	mov    $0x3,%edx
   35632:	48 89 ee             	mov    %rbp,%rsi
   35635:	48 89 df             	mov    %rbx,%rdi
   35638:	e8 f3 0f fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (!__s)
   3563d:	4d 85 e4             	test   %r12,%r12
   35640:	0f 84 0a 03 00 00    	je     35950 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe60>
   35646:	4c 89 e7             	mov    %r12,%rdi
   35649:	e8 d2 0b fd ff       	call   6220 <strlen@plt>
	__ostream_insert(__out, __s,
   3564e:	4c 89 e6             	mov    %r12,%rsi
   35651:	48 89 df             	mov    %rbx,%rdi
   35654:	48 89 c2             	mov    %rax,%rdx
   35657:	e8 d4 0f fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
   3565c:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   35663:	00 
   35664:	c6 84 24 bd 00 00 00 	movb   $0xa,0xbd(%rsp)
   3566b:	0a 
   3566c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   35670:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   35677:	00 00 
   35679:	75 95                	jne    35610 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb20>
      __out.put(__c);
   3567b:	be 0a 00 00 00       	mov    $0xa,%esi
   35680:	48 89 df             	mov    %rbx,%rdi
   35683:	e8 b8 09 fd ff       	call   6040 <_ZNSo3putEc@plt>
   35688:	49 81 c4 04 01 00 00 	add    $0x104,%r12
   3568f:	4d 39 e6             	cmp    %r12,%r14
   35692:	75 99                	jne    3562d <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb3d>
    if (selectedDeviceIndex == index) {
   35694:	4c 39 7c 24 28       	cmp    %r15,0x28(%rsp)
   35699:	0f 84 41 04 00 00    	je     35ae0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xff0>
      if (__out.width() != 0)
   3569f:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   356a6:	00 
   356a7:	c6 84 24 bf 00 00 00 	movb   $0xa,0xbf(%rsp)
   356ae:	0a 
   356af:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   356b3:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   356ba:	00 00 
   356bc:	0f 84 d6 02 00 00    	je     35998 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea8>
	return __ostream_insert(__out, &__c, 1);
   356c2:	48 8d b4 24 bf 00 00 	lea    0xbf(%rsp),%rsi
   356c9:	00 
   356ca:	ba 01 00 00 00       	mov    $0x1,%edx
   356cf:	48 89 df             	mov    %rbx,%rdi
   356d2:	e8 59 0f fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   356d7:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
   356de:	00 
    ++index;
   356df:	49 83 c7 01          	add    $0x1,%r15
	if (__p)
   356e3:	48 85 ff             	test   %rdi,%rdi
   356e6:	74 10                	je     356f8 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc08>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   356e8:	48 8b b4 24 30 01 00 	mov    0x130(%rsp),%rsi
   356ef:	00 
   356f0:	48 29 fe             	sub    %rdi,%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   356f3:	e8 68 0e fd ff       	call   6560 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
   356f8:	48 8b bc 24 40 01 00 	mov    0x140(%rsp),%rdi
   356ff:	00 
	if (!_M_is_local())
   35700:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
   35705:	48 39 c7             	cmp    %rax,%rdi
   35708:	0f 84 22 03 00 00    	je     35a30 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf40>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   3570e:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
   35715:	00 
  for (const auto &physDev : physicalDeviceList) {
   35716:	49 83 c5 08          	add    $0x8,%r13
   3571a:	48 8d 70 01          	lea    0x1(%rax),%rsi
   3571e:	e8 3d 0e fd ff       	call   6560 <_ZdlPvm@plt>
   35723:	4c 39 6c 24 40       	cmp    %r13,0x40(%rsp)
   35728:	0f 85 42 fa ff ff    	jne    35170 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x680>
   3572e:	48 8d 05 3b b3 00 00 	lea    0xb33b(%rip),%rax        # 40a70 <_ZTVSt13basic_filebufIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
   35735:	c6 84 24 e0 0a 00 00 	movb   $0xa,0xae0(%rsp)
   3573c:	0a 
   3573d:	f3 0f 7e 0d 0b b6 00 	movq   0xb60b(%rip),%xmm1        # 40d50 <_ZTVSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x490>
   35744:	00 
   35745:	66 48 0f 6e d0       	movq   %rax,%xmm2
      if (__out.width() != 0)
   3574a:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   35751:	00 
   35752:	66 0f 6c ca          	punpcklqdq %xmm2,%xmm1
   35756:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   3575a:	0f 29 0c 24          	movaps %xmm1,(%rsp)
   3575e:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   35765:	00 00 
   35767:	0f 84 7f 04 00 00    	je     35bec <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10fc>
	return __ostream_insert(__out, &__c, 1);
   3576d:	48 8d b4 24 e0 0a 00 	lea    0xae0(%rsp),%rsi
   35774:	00 
   35775:	ba 01 00 00 00       	mov    $0x1,%edx
   3577a:	48 89 df             	mov    %rbx,%rdi
   3577d:	e8 ae 0e fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   35782:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
   35789:	00 
	if (__p)
   3578a:	48 85 ff             	test   %rdi,%rdi
   3578d:	74 10                	je     3579f <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcaf>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   3578f:	48 8b b4 24 10 01 00 	mov    0x110(%rsp),%rsi
   35796:	00 
   35797:	48 29 fe             	sub    %rdi,%rsi
   3579a:	e8 c1 0d fd ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   3579f:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
   357a6:	00 
	if (__p)
   357a7:	48 85 ff             	test   %rdi,%rdi
   357aa:	74 10                	je     357bc <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xccc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   357ac:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
   357b3:	00 
   357b4:	48 29 fe             	sub    %rdi,%rsi
   357b7:	e8 a4 0d fd ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   357bc:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
   357c3:	00 
	if (__p)
   357c4:	48 85 ff             	test   %rdi,%rdi
   357c7:	74 10                	je     357d9 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce9>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   357c9:	48 8b b4 24 d0 00 00 	mov    0xd0(%rsp),%rsi
   357d0:	00 
   357d1:	48 29 fe             	sub    %rdi,%rsi
   357d4:	e8 87 0d fd ff       	call   6560 <_ZdlPvm@plt>
      { }
   357d9:	48 8d 05 f8 b0 00 00 	lea    0xb0f8(%rip),%rax        # 408d8 <_ZTVSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
   357e0:	66 0f 6f 1c 24       	movdqa (%rsp),%xmm3
	  { this->close(); }
   357e5:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
   357ec:	00 
      { }
   357ed:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
   357f4:	00 
   357f5:	48 83 c0 50          	add    $0x50,%rax
   357f9:	48 89 84 24 b8 03 00 	mov    %rax,0x3b8(%rsp)
   35800:	00 
   35801:	0f 29 9c 24 c0 02 00 	movaps %xmm3,0x2c0(%rsp)
   35808:	00 
	  { this->close(); }
   35809:	e8 c2 08 fd ff       	call   60d0 <_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv@plt>
      }
   3580e:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
   35815:	00 
   35816:	e8 a5 12 fd ff       	call   6ac0 <_ZNSt12__basic_fileIcED1Ev@plt>
   3581b:	48 8d 05 26 b1 00 00 	lea    0xb126(%rip),%rax        # 40948 <_ZTVSt15basic_streambufIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
   35822:	48 8d bc 24 00 03 00 	lea    0x300(%rsp),%rdi
   35829:	00 
   3582a:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
   35831:	00 
   35832:	e8 f9 0f fd ff       	call   6830 <_ZNSt6localeD1Ev@plt>
      ~basic_iostream() { }
   35837:	48 8b 05 8a b1 00 00 	mov    0xb18a(%rip),%rax        # 409c8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x8>
   3583e:	48 8b 0d ab b1 00 00 	mov    0xb1ab(%rip),%rcx        # 409f0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x30>
      ~basic_ios() { }
   35845:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
   3584c:	00 
   3584d:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   35851:	48 89 8c 04 b0 02 00 	mov    %rcx,0x2b0(%rsp,%rax,1)
   35858:	00 
      ~basic_ostream() { }
   35859:	48 8b 05 80 b1 00 00 	mov    0xb180(%rip),%rax        # 409e0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x20>
   35860:	48 8b 0d 81 b1 00 00 	mov    0xb181(%rip),%rcx        # 409e8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x28>
   35867:	48 89 84 24 c0 02 00 	mov    %rax,0x2c0(%rsp)
   3586e:	00 
   3586f:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   35873:	48 89 8c 04 c0 02 00 	mov    %rcx,0x2c0(%rsp,%rax,1)
   3587a:	00 
      { _M_gcount = streamsize(0); }
   3587b:	48 8b 05 4e b1 00 00 	mov    0xb14e(%rip),%rax        # 409d0 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
   35882:	48 8b 0d 4f b1 00 00 	mov    0xb14f(%rip),%rcx        # 409d8 <_ZTTSt13basic_fstreamIcSt11char_traitsIcEE@GLIBCXX_3.4+0x18>
   35889:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
   35890:	00 
   35891:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   35895:	48 89 8c 04 b0 02 00 	mov    %rcx,0x2b0(%rsp,%rax,1)
   3589c:	00 
   3589d:	48 8d 05 0c b0 00 00 	lea    0xb00c(%rip),%rax        # 408b0 <_ZTVSt9basic_iosIcSt11char_traitsIcEE@GLIBCXX_3.4+0x10>
   358a4:	48 c7 84 24 b8 02 00 	movq   $0x0,0x2b8(%rsp)
   358ab:	00 00 00 00 00 
   358b0:	48 89 84 24 b8 03 00 	mov    %rax,0x3b8(%rsp)
   358b7:	00 
   358b8:	e8 e3 08 fd ff       	call   61a0 <_ZNSt8ios_baseD2Ev@plt>
}
   358bd:	48 81 c4 38 0e 00 00 	add    $0xe38,%rsp
   358c4:	5b                   	pop    %rbx
   358c5:	5d                   	pop    %rbp
   358c6:	41 5c                	pop    %r12
   358c8:	41 5d                	pop    %r13
   358ca:	41 5e                	pop    %r14
   358cc:	41 5f                	pop    %r15
   358ce:	c3                   	ret
   358cf:	90                   	nop
	__out.setstate(ios_base::badbit);
   358d0:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   358d7:	00 
   358d8:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
   358dc:	48 01 df             	add    %rbx,%rdi
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
   358df:	8b 77 20             	mov    0x20(%rdi),%esi
   358e2:	83 ce 01             	or     $0x1,%esi
      { this->clear(this->rdstate() | __state); }
   358e5:	e8 06 11 fd ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
   358ea:	e9 64 f4 ff ff       	jmp    34d53 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x263>
   358ef:	90                   	nop
   358f0:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   358f7:	00 
   358f8:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
   358fc:	48 01 df             	add    %rbx,%rdi
   358ff:	8b 77 20             	mov    0x20(%rdi),%esi
   35902:	83 ce 01             	or     $0x1,%esi
   35905:	e8 e6 10 fd ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
   3590a:	e9 0d f5 ff ff       	jmp    34e1c <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32c>
   3590f:	90                   	nop
   35910:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   35917:	00 
   35918:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
   3591c:	48 01 df             	add    %rbx,%rdi
   3591f:	8b 77 20             	mov    0x20(%rdi),%esi
   35922:	83 ce 01             	or     $0x1,%esi
   35925:	e8 c6 10 fd ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
   3592a:	e9 0c f6 ff ff       	jmp    34f3b <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44b>
   3592f:	90                   	nop
   35930:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   35937:	00 
   35938:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
   3593c:	48 01 df             	add    %rbx,%rdi
   3593f:	8b 77 20             	mov    0x20(%rdi),%esi
   35942:	83 ce 01             	or     $0x1,%esi
   35945:	e8 a6 10 fd ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
   3594a:	e9 ad f6 ff ff       	jmp    34ffc <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50c>
   3594f:	90                   	nop
   35950:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   35957:	00 
   35958:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
   3595c:	48 01 df             	add    %rbx,%rdi
   3595f:	8b 77 20             	mov    0x20(%rdi),%esi
   35962:	83 ce 01             	or     $0x1,%esi
   35965:	e8 86 10 fd ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
   3596a:	e9 ed fc ff ff       	jmp    3565c <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb6c>
   3596f:	90                   	nop
    switch (deviceProperties.properties.deviceType) {
   35970:	83 f8 04             	cmp    $0x4,%eax
   35973:	0f 85 07 01 00 00    	jne    35a80 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf90>
	__ostream_insert(__out, __s,
   35979:	ba 04 00 00 00       	mov    $0x4,%edx
   3597e:	48 8d 35 51 36 00 00 	lea    0x3651(%rip),%rsi        # 38fd6 <_ZL11stbi__bmask+0x856>
   35985:	48 89 df             	mov    %rbx,%rdi
   35988:	e8 a3 0c fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   3598d:	e9 95 fa ff ff       	jmp    35427 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x937>
   35992:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      __out.put(__c);
   35998:	be 0a 00 00 00       	mov    $0xa,%esi
   3599d:	48 89 df             	mov    %rbx,%rdi
   359a0:	e8 9b 06 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   359a5:	e9 2d fd ff ff       	jmp    356d7 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbe7>
   359aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      __out.put(__c);
   359b0:	be 0a 00 00 00       	mov    $0xa,%esi
   359b5:	e8 86 06 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   359ba:	e9 bb fa ff ff       	jmp    3547a <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98a>
   359bf:	90                   	nop
      __out.put(__c);
   359c0:	be 0a 00 00 00       	mov    $0xa,%esi
   359c5:	e8 76 06 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   359ca:	e9 d3 fb ff ff       	jmp    355a2 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xab2>
   359cf:	90                   	nop
      __out.put(__c);
   359d0:	be 0a 00 00 00       	mov    $0xa,%esi
   359d5:	48 89 df             	mov    %rbx,%rdi
   359d8:	e8 63 06 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   359dd:	e9 6c fb ff ff       	jmp    3554e <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa5e>
   359e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      __out.put(__c);
   359e8:	be 0a 00 00 00       	mov    $0xa,%esi
   359ed:	48 89 df             	mov    %rbx,%rdi
   359f0:	e8 4b 06 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   359f5:	e9 ea fa ff ff       	jmp    354e4 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9f4>
   359fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      __out.put(__c);
   35a00:	be 0a 00 00 00       	mov    $0xa,%esi
   35a05:	48 89 df             	mov    %rbx,%rdi
   35a08:	e8 33 06 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   35a0d:	e9 c5 f9 ff ff       	jmp    353d7 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e7>
   35a12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      __out.put(__c);
   35a18:	be 0a 00 00 00       	mov    $0xa,%esi
   35a1d:	e8 1e 06 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   35a22:	e9 46 f9 ff ff       	jmp    3536d <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x87d>
   35a27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   35a2e:	00 00 
  for (const auto &physDev : physicalDeviceList) {
   35a30:	49 83 c5 08          	add    $0x8,%r13
   35a34:	4c 39 6c 24 40       	cmp    %r13,0x40(%rsp)
   35a39:	0f 85 31 f7 ff ff    	jne    35170 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x680>
   35a3f:	e9 ea fc ff ff       	jmp    3572e <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc3e>
   35a44:	0f 1f 40 00          	nopl   0x0(%rax)
   35a48:	4c 89 7c 24 28       	mov    %r15,0x28(%rsp)
	return _M_replace(size_type(0), this->size(), __s,
   35a4d:	48 8b 94 24 48 01 00 	mov    0x148(%rsp),%rdx
   35a54:	00 
   35a55:	41 b8 0b 00 00 00    	mov    $0xb,%r8d
   35a5b:	48 8d 0d e7 34 00 00 	lea    0x34e7(%rip),%rcx        # 38f49 <_ZL11stbi__bmask+0x7c9>
   35a62:	31 f6                	xor    %esi,%esi
   35a64:	48 8d bc 24 40 01 00 	lea    0x140(%rsp),%rdi
   35a6b:	00 
   35a6c:	e8 3f 0e fd ff       	call   68b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
			  traits_type::length(__s));
   35a71:	e9 04 f8 ff ff       	jmp    3527a <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78a>
   35a76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   35a7d:	00 00 00 
	__ostream_insert(__out, __s,
   35a80:	ba 06 00 00 00       	mov    $0x6,%edx
   35a85:	48 8d 35 4f 35 00 00 	lea    0x354f(%rip),%rsi        # 38fdb <_ZL11stbi__bmask+0x85b>
   35a8c:	48 89 df             	mov    %rbx,%rdi
   35a8f:	e8 9c 0b fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   35a94:	e9 8e f9 ff ff       	jmp    35427 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x937>
   35a99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   35aa0:	ba 0f 00 00 00       	mov    $0xf,%edx
   35aa5:	48 8d 35 ff 34 00 00 	lea    0x34ff(%rip),%rsi        # 38fab <_ZL11stbi__bmask+0x82b>
   35aac:	48 89 df             	mov    %rbx,%rdi
   35aaf:	e8 7c 0b fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   35ab4:	e9 6e f9 ff ff       	jmp    35427 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x937>
   35ab9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   35ac0:	ba 0c 00 00 00       	mov    $0xc,%edx
   35ac5:	48 8d 35 fd 34 00 00 	lea    0x34fd(%rip),%rsi        # 38fc9 <_ZL11stbi__bmask+0x849>
   35acc:	48 89 df             	mov    %rbx,%rdi
   35acf:	e8 5c 0b fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   35ad4:	e9 4e f9 ff ff       	jmp    35427 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x937>
   35ad9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   35ae0:	ba 04 00 00 00       	mov    $0x4,%edx
   35ae5:	48 8d 35 72 34 00 00 	lea    0x3472(%rip),%rsi        # 38f5e <_ZL11stbi__bmask+0x7de>
   35aec:	48 89 df             	mov    %rbx,%rdi
   35aef:	e8 3c 0b fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      { return _M_insert(__n); }
   35af4:	4c 89 fe             	mov    %r15,%rsi
   35af7:	48 89 df             	mov    %rbx,%rdi
   35afa:	e8 51 08 fd ff       	call   6350 <_ZNSo9_M_insertImEERSoT_@plt>
   35aff:	48 89 c7             	mov    %rax,%rdi
	__ostream_insert(__out, __s,
   35b02:	ba 1f 00 00 00       	mov    $0x1f,%edx
   35b07:	48 8d 35 d2 31 00 00 	lea    0x31d2(%rip),%rsi        # 38ce0 <_ZL11stbi__bmask+0x560>
   35b0e:	e8 1d 0b fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   35b13:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
   35b1a:	00 
   35b1b:	4c 8b 60 30          	mov    0x30(%rax),%r12
   35b1f:	4c 8b 70 38          	mov    0x38(%rax),%r14
      for (const auto &extension : deviceExtensions) {
   35b23:	4d 39 e6             	cmp    %r12,%r14
   35b26:	0f 84 73 fb ff ff    	je     3569f <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbaf>
	return __ostream_insert(__out, &__c, 1);
   35b2c:	48 8d 84 24 be 00 00 	lea    0xbe(%rsp),%rax
   35b33:	00 
   35b34:	48 8d 2d db 34 00 00 	lea    0x34db(%rip),%rbp        # 39016 <_ZL11stbi__bmask+0x896>
   35b3b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
   35b42:	00 
   35b43:	eb 25                	jmp    35b6a <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x107a>
   35b45:	0f 1f 00             	nopl   (%rax)
   35b48:	48 8b b4 24 88 00 00 	mov    0x88(%rsp),%rsi
   35b4f:	00 
   35b50:	ba 01 00 00 00       	mov    $0x1,%edx
   35b55:	48 89 df             	mov    %rbx,%rdi
   35b58:	e8 d3 0a fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   35b5d:	49 83 c4 08          	add    $0x8,%r12
   35b61:	4d 39 e6             	cmp    %r12,%r14
   35b64:	0f 84 35 fb ff ff    	je     3569f <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbaf>
	__ostream_insert(__out, __s,
   35b6a:	ba 03 00 00 00       	mov    $0x3,%edx
   35b6f:	48 89 ee             	mov    %rbp,%rsi
   35b72:	48 89 df             	mov    %rbx,%rdi
   35b75:	e8 b6 0a fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
        fs << "\t\t\t" << extension << '\n';
   35b7a:	49 8b 34 24          	mov    (%r12),%rsi
      if (!__s)
   35b7e:	48 85 f6             	test   %rsi,%rsi
   35b81:	74 4d                	je     35bd0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e0>
   35b83:	48 89 f7             	mov    %rsi,%rdi
   35b86:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
   35b8b:	e8 90 06 fd ff       	call   6220 <strlen@plt>
	__ostream_insert(__out, __s,
   35b90:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
   35b95:	48 89 df             	mov    %rbx,%rdi
   35b98:	48 89 c2             	mov    %rax,%rdx
   35b9b:	e8 90 0a fd ff       	call   6630 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
   35ba0:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   35ba7:	00 
   35ba8:	c6 84 24 be 00 00 00 	movb   $0xa,0xbe(%rsp)
   35baf:	0a 
    { return _M_width; }
   35bb0:	48 8b 40 e8          	mov    -0x18(%rax),%rax
   35bb4:	48 83 bc 04 d0 02 00 	cmpq   $0x0,0x2d0(%rsp,%rax,1)
   35bbb:	00 00 
   35bbd:	75 89                	jne    35b48 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1058>
      __out.put(__c);
   35bbf:	be 0a 00 00 00       	mov    $0xa,%esi
   35bc4:	48 89 df             	mov    %rbx,%rdi
   35bc7:	e8 74 04 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   35bcc:	eb 8f                	jmp    35b5d <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x106d>
   35bce:	66 90                	xchg   %ax,%ax
	__out.setstate(ios_base::badbit);
   35bd0:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
   35bd7:	00 
   35bd8:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
   35bdc:	48 01 df             	add    %rbx,%rdi
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
   35bdf:	8b 77 20             	mov    0x20(%rdi),%esi
   35be2:	83 ce 01             	or     $0x1,%esi
   35be5:	e8 06 0e fd ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
   35bea:	eb b4                	jmp    35ba0 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10b0>
      __out.put(__c);
   35bec:	be 0a 00 00 00       	mov    $0xa,%esi
   35bf1:	48 89 df             	mov    %rbx,%rdi
   35bf4:	e8 47 04 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   35bf9:	e9 84 fb ff ff       	jmp    35782 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc92>
      __out.put(__c);
   35bfe:	be 0a 00 00 00       	mov    $0xa,%esi
   35c03:	48 89 df             	mov    %rbx,%rdi
   35c06:	e8 35 04 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   35c0b:	e9 5c f4 ff ff       	jmp    3506c <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x57c>
      __out.put(__c);
   35c10:	be 0a 00 00 00       	mov    $0xa,%esi
   35c15:	48 89 df             	mov    %rbx,%rdi
   35c18:	e8 23 04 fd ff       	call   6040 <_ZNSo3putEc@plt>
      return __out;
   35c1d:	e9 67 f2 ff ff       	jmp    34e89 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x399>
   35c22:	8b 77 20             	mov    0x20(%rdi),%esi
   35c25:	83 ce 04             	or     $0x4,%esi
   35c28:	e8 c3 0d fd ff       	call   69f0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>
   35c2d:	e9 4f f0 ff ff       	jmp    34c81 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x191>
   35c32:	e9 8a 37 fd ff       	jmp    93c1 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x1>
      { this->init(&_M_filebuf); }
   35c37:	48 89 c3             	mov    %rax,%rbx
   35c3a:	e9 97 37 fd ff       	jmp    93d6 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x16>
      ~basic_iostream() { }
   35c3f:	48 89 c3             	mov    %rax,%rbx
   35c42:	e9 9c 37 fd ff       	jmp    93e3 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x23>
      { _M_gcount = streamsize(0); }
   35c47:	48 89 c3             	mov    %rax,%rbx
   35c4a:	e9 2a 3a fd ff       	jmp    9679 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x2b9>
      ~basic_ios() { }
   35c4f:	48 89 c3             	mov    %rax,%rbx
   35c52:	e9 f4 37 fd ff       	jmp    944b <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x8b>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   35c57:	48 89 c3             	mov    %rax,%rbx
   35c5a:	e9 50 38 fd ff       	jmp    94af <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0xef>
   35c5f:	48 89 c3             	mov    %rax,%rbx
   35c62:	e9 65 38 fd ff       	jmp    94cc <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x10c>
   35c67:	48 89 c3             	mov    %rax,%rbx
   35c6a:	e9 7a 38 fd ff       	jmp    94e9 <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x129>
   35c6f:	48 89 c3             	mov    %rax,%rbx
   35c72:	e9 f8 37 fd ff       	jmp    946f <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0xaf>
	__catch(...)
   35c77:	48 89 c7             	mov    %rax,%rdi
   35c7a:	e9 2b 3a fd ff       	jmp    96aa <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x2ea>
      { return _M_dataplus._M_p; }
   35c7f:	48 89 c3             	mov    %rax,%rbx
   35c82:	e9 05 38 fd ff       	jmp    948c <_ZN4rtvc9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0xcc>
   35c87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   35c8e:	00 00 

0000000000035c90 <_ZN4rtvc4GLFWD1Ev>:
   35c90:	48 8d 05 39 a9 00 00 	lea    0xa939(%rip),%rax        # 405d0 <_ZTVN3vkw4GLFWE+0x10>
class GLFW : public vkw::GLFW {};
   35c97:	48 83 ec 08          	sub    $0x8,%rsp
   35c9b:	48 89 07             	mov    %rax,(%rdi)
   35c9e:	e8 dd 08 fd ff       	call   6580 <glfwTerminate@plt>
   35ca3:	48 83 c4 08          	add    $0x8,%rsp
   35ca7:	c3                   	ret
   35ca8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   35caf:	00 

0000000000035cb0 <_ZN4rtvc4GLFWD0Ev>:
   35cb0:	48 8d 05 19 a9 00 00 	lea    0xa919(%rip),%rax        # 405d0 <_ZTVN3vkw4GLFWE+0x10>
   35cb7:	53                   	push   %rbx
   35cb8:	48 89 fb             	mov    %rdi,%rbx
   35cbb:	48 89 07             	mov    %rax,(%rdi)
   35cbe:	e8 bd 08 fd ff       	call   6580 <glfwTerminate@plt>
   35cc3:	48 89 df             	mov    %rbx,%rdi
   35cc6:	be 08 00 00 00       	mov    $0x8,%esi
   35ccb:	5b                   	pop    %rbx
   35ccc:	e9 8f 08 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35cd1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   35cd8:	00 00 00 
   35cdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000035ce0 <_ZN4rtvc8InstanceD1Ev>:
   35ce0:	48 8d 05 69 a8 00 00 	lea    0xa869(%rip),%rax        # 40550 <_ZTVN3vkw8InstanceE+0x10>
    if (_isOwner) {
   35ce7:	80 7f 18 00          	cmpb   $0x0,0x18(%rdi)
  virtual ~Instance() { _destroyVkData(); }
   35ceb:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35cee:	75 08                	jne    35cf8 <_ZN4rtvc8InstanceD1Ev+0x18>
   35cf0:	c3                   	ret
   35cf1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
class Instance : public vkw::Instance {
   35cf8:	48 83 ec 08          	sub    $0x8,%rsp
      vkDestroyInstance(_instance, _pAllocator);
   35cfc:	48 8b 77 10          	mov    0x10(%rdi),%rsi
   35d00:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
   35d04:	e8 67 08 fd ff       	call   6570 <vkDestroyInstance@plt>
   35d09:	48 83 c4 08          	add    $0x8,%rsp
   35d0d:	c3                   	ret
   35d0e:	66 90                	xchg   %ax,%ax

0000000000035d10 <_ZN4rtvc8InstanceD0Ev>:
   35d10:	53                   	push   %rbx
  virtual ~Instance() { _destroyVkData(); }
   35d11:	48 8d 05 38 a8 00 00 	lea    0xa838(%rip),%rax        # 40550 <_ZTVN3vkw8InstanceE+0x10>
    if (_isOwner) {
   35d18:	80 7f 18 00          	cmpb   $0x0,0x18(%rdi)
   35d1c:	48 89 fb             	mov    %rdi,%rbx
  virtual ~Instance() { _destroyVkData(); }
   35d1f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35d22:	75 14                	jne    35d38 <_ZN4rtvc8InstanceD0Ev+0x28>
   35d24:	48 89 df             	mov    %rbx,%rdi
   35d27:	be 50 00 00 00       	mov    $0x50,%esi
   35d2c:	5b                   	pop    %rbx
   35d2d:	e9 2e 08 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35d32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyInstance(_instance, _pAllocator);
   35d38:	48 8b 77 10          	mov    0x10(%rdi),%rsi
   35d3c:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
   35d40:	e8 2b 08 fd ff       	call   6570 <vkDestroyInstance@plt>
   35d45:	48 89 df             	mov    %rbx,%rdi
   35d48:	be 50 00 00 00       	mov    $0x50,%esi
   35d4d:	5b                   	pop    %rbx
   35d4e:	e9 0d 08 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35d53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   35d5a:	00 00 00 
   35d5d:	0f 1f 00             	nopl   (%rax)

0000000000035d60 <_ZN4rtvc7SurfaceD1Ev>:
   35d60:	48 8d 05 29 a8 00 00 	lea    0xa829(%rip),%rax        # 40590 <_ZTVN3vkw7SurfaceE+0x10>
    if (_isOwner) {
   35d67:	80 7f 28 00          	cmpb   $0x0,0x28(%rdi)
  virtual ~Surface() { _destroyVkData(); }
   35d6b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35d6e:	75 08                	jne    35d78 <_ZN4rtvc7SurfaceD1Ev+0x18>
   35d70:	c3                   	ret
   35d71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
class Surface : public vkw::Surface {
   35d78:	48 83 ec 08          	sub    $0x8,%rsp
      vkh::destroySurface(_instance, _surface, _pAllocator);
   35d7c:	48 8b 57 20          	mov    0x20(%rdi),%rdx
   35d80:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   35d84:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   35d88:	e8 03 80 fd ff       	call   dd90 <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>
   35d8d:	48 83 c4 08          	add    $0x8,%rsp
   35d91:	c3                   	ret
   35d92:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   35d99:	00 00 00 
   35d9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000035da0 <_ZN4rtvc7SurfaceD0Ev>:
   35da0:	53                   	push   %rbx
  virtual ~Surface() { _destroyVkData(); }
   35da1:	48 8d 05 e8 a7 00 00 	lea    0xa7e8(%rip),%rax        # 40590 <_ZTVN3vkw7SurfaceE+0x10>
    if (_isOwner) {
   35da8:	80 7f 28 00          	cmpb   $0x0,0x28(%rdi)
   35dac:	48 89 fb             	mov    %rdi,%rbx
  virtual ~Surface() { _destroyVkData(); }
   35daf:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35db2:	75 14                	jne    35dc8 <_ZN4rtvc7SurfaceD0Ev+0x28>
   35db4:	48 89 df             	mov    %rbx,%rdi
   35db7:	be 30 00 00 00       	mov    $0x30,%esi
   35dbc:	5b                   	pop    %rbx
   35dbd:	e9 9e 07 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35dc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkh::destroySurface(_instance, _surface, _pAllocator);
   35dc8:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   35dcc:	48 8b 57 20          	mov    0x20(%rdi),%rdx
   35dd0:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   35dd4:	e8 b7 7f fd ff       	call   dd90 <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>
   35dd9:	48 89 df             	mov    %rbx,%rdi
   35ddc:	be 30 00 00 00       	mov    $0x30,%esi
   35de1:	5b                   	pop    %rbx
   35de2:	e9 79 07 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35de7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   35dee:	00 00 

0000000000035df0 <_ZN4rtvc19DescriptorSetLayoutD1Ev>:
   35df0:	48 8d 05 f9 a7 00 00 	lea    0xa7f9(%rip),%rax        # 405f0 <_ZTVN3vkw19DescriptorSetLayoutE+0x10>
    if (_isOwner) {
   35df7:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
   35dfb:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35dfe:	75 08                	jne    35e08 <_ZN4rtvc19DescriptorSetLayoutD1Ev+0x18>
   35e00:	c3                   	ret
   35e01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
class DescriptorSetLayout : public vkw::DescriptorSetLayout {
   35e08:	48 83 ec 08          	sub    $0x8,%rsp
      vkDestroyDescriptorSetLayout(_device, _setLayout, _pAllocator);
   35e0c:	48 8b 57 18          	mov    0x18(%rdi),%rdx
   35e10:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   35e14:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   35e18:	e8 23 0b fd ff       	call   6940 <vkDestroyDescriptorSetLayout@plt>
   35e1d:	48 83 c4 08          	add    $0x8,%rsp
   35e21:	c3                   	ret
   35e22:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   35e29:	00 00 00 
   35e2c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000035e30 <_ZN4rtvc9ImageViewD1Ev>:
   35e30:	48 8d 05 41 a8 00 00 	lea    0xa841(%rip),%rax        # 40678 <_ZTVN3vkw9ImageViewE+0x10>
    if (_isOwner) {
   35e37:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~ImageView() { _destroyVkData(); }
   35e3b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35e3e:	75 08                	jne    35e48 <_ZN4rtvc9ImageViewD1Ev+0x18>
   35e40:	c3                   	ret
   35e41:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
class ImageView : public vkw::ImageView {
   35e48:	48 83 ec 08          	sub    $0x8,%rsp
      vkDestroyImageView(_device, _imageView, _pAllocator);
   35e4c:	48 8b 57 18          	mov    0x18(%rdi),%rdx
   35e50:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   35e54:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   35e58:	e8 13 0c fd ff       	call   6a70 <vkDestroyImageView@plt>
   35e5d:	48 83 c4 08          	add    $0x8,%rsp
   35e61:	c3                   	ret
   35e62:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   35e69:	00 00 00 
   35e6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000035e70 <_ZN4rtvc19DescriptorSetLayoutD0Ev>:
   35e70:	53                   	push   %rbx
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
   35e71:	48 8d 05 78 a7 00 00 	lea    0xa778(%rip),%rax        # 405f0 <_ZTVN3vkw19DescriptorSetLayoutE+0x10>
    if (_isOwner) {
   35e78:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
   35e7c:	48 89 fb             	mov    %rdi,%rbx
  virtual ~DescriptorSetLayout() { _destroyVkData(); }
   35e7f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35e82:	75 14                	jne    35e98 <_ZN4rtvc19DescriptorSetLayoutD0Ev+0x28>
   35e84:	48 89 df             	mov    %rbx,%rdi
   35e87:	be 28 00 00 00       	mov    $0x28,%esi
   35e8c:	5b                   	pop    %rbx
   35e8d:	e9 ce 06 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35e92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyDescriptorSetLayout(_device, _setLayout, _pAllocator);
   35e98:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   35e9c:	48 8b 57 18          	mov    0x18(%rdi),%rdx
   35ea0:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   35ea4:	e8 97 0a fd ff       	call   6940 <vkDestroyDescriptorSetLayout@plt>
   35ea9:	48 89 df             	mov    %rbx,%rdi
   35eac:	be 28 00 00 00       	mov    $0x28,%esi
   35eb1:	5b                   	pop    %rbx
   35eb2:	e9 a9 06 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35eb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   35ebe:	00 00 

0000000000035ec0 <_ZN4rtvc9ImageViewD0Ev>:
   35ec0:	53                   	push   %rbx
  virtual ~ImageView() { _destroyVkData(); }
   35ec1:	48 8d 05 b0 a7 00 00 	lea    0xa7b0(%rip),%rax        # 40678 <_ZTVN3vkw9ImageViewE+0x10>
    if (_isOwner) {
   35ec8:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
   35ecc:	48 89 fb             	mov    %rdi,%rbx
  virtual ~ImageView() { _destroyVkData(); }
   35ecf:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35ed2:	75 14                	jne    35ee8 <_ZN4rtvc9ImageViewD0Ev+0x28>
   35ed4:	48 89 df             	mov    %rbx,%rdi
   35ed7:	be 28 00 00 00       	mov    $0x28,%esi
   35edc:	5b                   	pop    %rbx
   35edd:	e9 7e 06 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35ee2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyImageView(_device, _imageView, _pAllocator);
   35ee8:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   35eec:	48 8b 57 18          	mov    0x18(%rdi),%rdx
   35ef0:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   35ef4:	e8 77 0b fd ff       	call   6a70 <vkDestroyImageView@plt>
   35ef9:	48 89 df             	mov    %rbx,%rdi
   35efc:	be 28 00 00 00       	mov    $0x28,%esi
   35f01:	5b                   	pop    %rbx
   35f02:	e9 59 06 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35f07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   35f0e:	00 00 

0000000000035f10 <_ZN4rtvc14DebugMessengerD1Ev>:
  virtual ~DebugMessenger() { _destroyVkData(); }
   35f10:	48 8d 05 d9 a5 00 00 	lea    0xa5d9(%rip),%rax        # 404f0 <_ZTVN3vkw14DebugMessengerE+0x10>
    if (_isOwner) {
   35f17:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~DebugMessenger() { _destroyVkData(); }
   35f1b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35f1e:	75 08                	jne    35f28 <_ZN4rtvc14DebugMessengerD1Ev+0x18>
   35f20:	c3                   	ret
   35f21:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
class DebugMessenger : public vkw::DebugMessenger {
   35f28:	41 54                	push   %r12
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
   35f2a:	48 8d 35 77 11 00 00 	lea    0x1177(%rip),%rsi        # 370a8 <_IO_stdin_used+0xa8>
   35f31:	55                   	push   %rbp
   35f32:	53                   	push   %rbx
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
   35f33:	48 8b 5f 10          	mov    0x10(%rdi),%rbx
   35f37:	4c 8b 67 18          	mov    0x18(%rdi),%r12
   35f3b:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
   35f3f:	48 89 df             	mov    %rbx,%rdi
   35f42:	e8 99 05 fd ff       	call   64e0 <vkGetInstanceProcAddr@plt>
  if (func != nullptr) {
   35f47:	48 85 c0             	test   %rax,%rax
   35f4a:	74 0b                	je     35f57 <_ZN4rtvc14DebugMessengerD1Ev+0x47>
    func(instance, debugMessenger, pAllocator);
   35f4c:	4c 89 e2             	mov    %r12,%rdx
   35f4f:	48 89 ee             	mov    %rbp,%rsi
   35f52:	48 89 df             	mov    %rbx,%rdi
   35f55:	ff d0                	call   *%rax
   35f57:	5b                   	pop    %rbx
   35f58:	5d                   	pop    %rbp
   35f59:	41 5c                	pop    %r12
   35f5b:	c3                   	ret
   35f5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000035f60 <_ZN4rtvc14DebugMessengerD0Ev>:
   35f60:	41 55                	push   %r13
  virtual ~DebugMessenger() { _destroyVkData(); }
   35f62:	48 8d 05 87 a5 00 00 	lea    0xa587(%rip),%rax        # 404f0 <_ZTVN3vkw14DebugMessengerE+0x10>
   35f69:	41 54                	push   %r12
   35f6b:	55                   	push   %rbp
   35f6c:	53                   	push   %rbx
   35f6d:	48 89 fb             	mov    %rdi,%rbx
   35f70:	48 83 ec 08          	sub    $0x8,%rsp
    if (_isOwner) {
   35f74:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  virtual ~DebugMessenger() { _destroyVkData(); }
   35f78:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35f7b:	75 1b                	jne    35f98 <_ZN4rtvc14DebugMessengerD0Ev+0x38>
   35f7d:	48 83 c4 08          	add    $0x8,%rsp
   35f81:	48 89 df             	mov    %rbx,%rdi
   35f84:	be 28 00 00 00       	mov    $0x28,%esi
   35f89:	5b                   	pop    %rbx
   35f8a:	5d                   	pop    %rbp
   35f8b:	41 5c                	pop    %r12
   35f8d:	41 5d                	pop    %r13
   35f8f:	e9 cc 05 fd ff       	jmp    6560 <_ZdlPvm@plt>
   35f94:	0f 1f 40 00          	nopl   0x0(%rax)
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
   35f98:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
   35f9c:	4c 8b 6f 18          	mov    0x18(%rdi),%r13
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
   35fa0:	48 8d 35 01 11 00 00 	lea    0x1101(%rip),%rsi        # 370a8 <_IO_stdin_used+0xa8>
      destroyDebugMessenger(_instance, _debugMessenger, _pAllocator);
   35fa7:	4c 8b 67 08          	mov    0x8(%rdi),%r12
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
   35fab:	48 89 ef             	mov    %rbp,%rdi
   35fae:	e8 2d 05 fd ff       	call   64e0 <vkGetInstanceProcAddr@plt>
  if (func != nullptr) {
   35fb3:	48 85 c0             	test   %rax,%rax
   35fb6:	74 c5                	je     35f7d <_ZN4rtvc14DebugMessengerD0Ev+0x1d>
    func(instance, debugMessenger, pAllocator);
   35fb8:	4c 89 ea             	mov    %r13,%rdx
   35fbb:	4c 89 e6             	mov    %r12,%rsi
   35fbe:	48 89 ef             	mov    %rbp,%rdi
   35fc1:	ff d0                	call   *%rax
   35fc3:	eb b8                	jmp    35f7d <_ZN4rtvc14DebugMessengerD0Ev+0x1d>
   35fc5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   35fcc:	00 00 00 
   35fcf:	90                   	nop

0000000000035fd0 <_ZN4rtvc9SwapchainD1Ev>:
   35fd0:	48 8d 05 d9 a5 00 00 	lea    0xa5d9(%rip),%rax        # 405b0 <_ZTVN3vkw9SwapchainE+0x10>
    if (_isOwner) {
   35fd7:	80 7f 30 00          	cmpb   $0x0,0x30(%rdi)
  virtual ~Swapchain() { _destroyVkData(); }
   35fdb:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   35fde:	75 08                	jne    35fe8 <_ZN4rtvc9SwapchainD1Ev+0x18>
   35fe0:	c3                   	ret
   35fe1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
class Swapchain : public vkw::Swapchain {
   35fe8:	48 83 ec 08          	sub    $0x8,%rsp
      vkDestroySwapchainKHR(_device, _swapchain, _pAllocator);
   35fec:	48 8b 57 28          	mov    0x28(%rdi),%rdx
   35ff0:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   35ff4:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
   35ff8:	e8 33 01 fd ff       	call   6130 <vkDestroySwapchainKHR@plt>
   35ffd:	48 83 c4 08          	add    $0x8,%rsp
   36001:	c3                   	ret
   36002:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   36009:	00 00 00 
   3600c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000036010 <_ZN4rtvc9SwapchainD0Ev>:
   36010:	53                   	push   %rbx
  virtual ~Swapchain() { _destroyVkData(); }
   36011:	48 8d 05 98 a5 00 00 	lea    0xa598(%rip),%rax        # 405b0 <_ZTVN3vkw9SwapchainE+0x10>
    if (_isOwner) {
   36018:	80 7f 30 00          	cmpb   $0x0,0x30(%rdi)
   3601c:	48 89 fb             	mov    %rdi,%rbx
  virtual ~Swapchain() { _destroyVkData(); }
   3601f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   36022:	75 14                	jne    36038 <_ZN4rtvc9SwapchainD0Ev+0x28>
   36024:	48 89 df             	mov    %rbx,%rdi
   36027:	be 38 00 00 00       	mov    $0x38,%esi
   3602c:	5b                   	pop    %rbx
   3602d:	e9 2e 05 fd ff       	jmp    6560 <_ZdlPvm@plt>
   36032:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroySwapchainKHR(_device, _swapchain, _pAllocator);
   36038:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   3603c:	48 8b 57 28          	mov    0x28(%rdi),%rdx
   36040:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
   36044:	e8 e7 00 fd ff       	call   6130 <vkDestroySwapchainKHR@plt>
   36049:	48 89 df             	mov    %rbx,%rdi
   3604c:	be 38 00 00 00       	mov    $0x38,%esi
   36051:	5b                   	pop    %rbx
   36052:	e9 09 05 fd ff       	jmp    6560 <_ZdlPvm@plt>
   36057:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3605e:	00 00 

0000000000036060 <_ZN4rtvc5ImageD1Ev>:
   36060:	48 8d 05 f1 a5 00 00 	lea    0xa5f1(%rip),%rax        # 40658 <_ZTVN3vkw5ImageE+0x10>
    if (_isOwner) {
   36067:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  virtual ~Image() { _destroyVkData(); }
   3606b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   3606e:	75 08                	jne    36078 <_ZN4rtvc5ImageD1Ev+0x18>
   36070:	c3                   	ret
   36071:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
class Image : public vkw::Image {
   36078:	53                   	push   %rbx
   36079:	48 89 fb             	mov    %rdi,%rbx
      vkDestroyImage(_device, _image, _pImageAllocator);
   3607c:	48 8b 57 28          	mov    0x28(%rdi),%rdx
   36080:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   36084:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   36088:	e8 13 00 fd ff       	call   60a0 <vkDestroyImage@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
   3608d:	48 8b 53 30          	mov    0x30(%rbx),%rdx
   36091:	48 8b 73 18          	mov    0x18(%rbx),%rsi
   36095:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
   36099:	e8 12 04 fd ff       	call   64b0 <vkFreeMemory@plt>
   3609e:	5b                   	pop    %rbx
   3609f:	c3                   	ret

00000000000360a0 <_ZN4rtvc5ImageD0Ev>:
   360a0:	53                   	push   %rbx
  virtual ~Image() { _destroyVkData(); }
   360a1:	48 8d 05 b0 a5 00 00 	lea    0xa5b0(%rip),%rax        # 40658 <_ZTVN3vkw5ImageE+0x10>
    if (_isOwner) {
   360a8:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
   360ac:	48 89 fb             	mov    %rdi,%rbx
  virtual ~Image() { _destroyVkData(); }
   360af:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   360b2:	75 14                	jne    360c8 <_ZN4rtvc5ImageD0Ev+0x28>
   360b4:	48 89 df             	mov    %rbx,%rdi
   360b7:	be 40 00 00 00       	mov    $0x40,%esi
   360bc:	5b                   	pop    %rbx
   360bd:	e9 9e 04 fd ff       	jmp    6560 <_ZdlPvm@plt>
   360c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyImage(_device, _image, _pImageAllocator);
   360c8:	48 8b 57 28          	mov    0x28(%rdi),%rdx
   360cc:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   360d0:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   360d4:	e8 c7 ff fc ff       	call   60a0 <vkDestroyImage@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
   360d9:	48 8b 73 18          	mov    0x18(%rbx),%rsi
   360dd:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
   360e1:	48 8b 53 30          	mov    0x30(%rbx),%rdx
   360e5:	e8 c6 03 fd ff       	call   64b0 <vkFreeMemory@plt>
   360ea:	48 89 df             	mov    %rbx,%rdi
   360ed:	be 40 00 00 00       	mov    $0x40,%esi
   360f2:	5b                   	pop    %rbx
   360f3:	e9 68 04 fd ff       	jmp    6560 <_ZdlPvm@plt>
   360f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   360ff:	00 

0000000000036100 <_ZN4rtvc16GraphicsPipelineD1Ev>:
   36100:	48 8d 05 09 a5 00 00 	lea    0xa509(%rip),%rax        # 40610 <_ZTVN3vkw16GraphicsPipelineE+0x10>
    if (_isOwner) {
   36107:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
  virtual ~GraphicsPipeline() { _destroyVkData(); }
   3610b:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   3610e:	75 08                	jne    36118 <_ZN4rtvc16GraphicsPipelineD1Ev+0x18>
   36110:	c3                   	ret
   36111:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
class GraphicsPipeline : public vkw::GraphicsPipeline {
   36118:	53                   	push   %rbx
   36119:	48 89 fb             	mov    %rdi,%rbx
      vkDestroyPipeline(_device, _graphicsPipeline, _pAllocator);
   3611c:	48 8b 57 30          	mov    0x30(%rdi),%rdx
   36120:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   36124:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   36128:	e8 c3 04 fd ff       	call   65f0 <vkDestroyPipeline@plt>
      vkDestroyPipelineLayout(_device, _pipelineLayout, _pAllocator);
   3612d:	48 8b 53 30          	mov    0x30(%rbx),%rdx
   36131:	48 8b 73 20          	mov    0x20(%rbx),%rsi
   36135:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
   36139:	e8 b2 05 fd ff       	call   66f0 <vkDestroyPipelineLayout@plt>
      vkDestroyRenderPass(_device, _renderPass, _pAllocator);
   3613e:	48 8b 53 30          	mov    0x30(%rbx),%rdx
   36142:	48 8b 73 28          	mov    0x28(%rbx),%rsi
   36146:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
   3614a:	e8 b1 03 fd ff       	call   6500 <vkDestroyRenderPass@plt>
   3614f:	5b                   	pop    %rbx
   36150:	c3                   	ret
   36151:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   36158:	00 00 00 
   3615b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000036160 <_ZN4rtvc16GraphicsPipelineD0Ev>:
   36160:	53                   	push   %rbx
  virtual ~GraphicsPipeline() { _destroyVkData(); }
   36161:	48 8d 05 a8 a4 00 00 	lea    0xa4a8(%rip),%rax        # 40610 <_ZTVN3vkw16GraphicsPipelineE+0x10>
    if (_isOwner) {
   36168:	80 7f 38 00          	cmpb   $0x0,0x38(%rdi)
   3616c:	48 89 fb             	mov    %rdi,%rbx
  virtual ~GraphicsPipeline() { _destroyVkData(); }
   3616f:	48 89 07             	mov    %rax,(%rdi)
    if (_isOwner) {
   36172:	75 14                	jne    36188 <_ZN4rtvc16GraphicsPipelineD0Ev+0x28>
   36174:	48 89 df             	mov    %rbx,%rdi
   36177:	be 40 00 00 00       	mov    $0x40,%esi
   3617c:	5b                   	pop    %rbx
   3617d:	e9 de 03 fd ff       	jmp    6560 <_ZdlPvm@plt>
   36182:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      vkDestroyPipeline(_device, _graphicsPipeline, _pAllocator);
   36188:	48 8b 57 30          	mov    0x30(%rdi),%rdx
   3618c:	48 8b 77 08          	mov    0x8(%rdi),%rsi
   36190:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
   36194:	e8 57 04 fd ff       	call   65f0 <vkDestroyPipeline@plt>
      vkDestroyPipelineLayout(_device, _pipelineLayout, _pAllocator);
   36199:	48 8b 53 30          	mov    0x30(%rbx),%rdx
   3619d:	48 8b 73 20          	mov    0x20(%rbx),%rsi
   361a1:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
   361a5:	e8 46 05 fd ff       	call   66f0 <vkDestroyPipelineLayout@plt>
      vkDestroyRenderPass(_device, _renderPass, _pAllocator);
   361aa:	48 8b 73 28          	mov    0x28(%rbx),%rsi
   361ae:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
   361b2:	48 8b 53 30          	mov    0x30(%rbx),%rdx
   361b6:	e8 45 03 fd ff       	call   6500 <vkDestroyRenderPass@plt>
   361bb:	48 89 df             	mov    %rbx,%rdi
   361be:	be 40 00 00 00       	mov    $0x40,%esi
   361c3:	5b                   	pop    %rbx
   361c4:	e9 97 03 fd ff       	jmp    6560 <_ZdlPvm@plt>
   361c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000361d0 <_ZN3vkw14DescriptorSetsD1Ev>:
  ~DescriptorSets() { _destroyVkData(); }
   361d0:	53                   	push   %rbx
    if (_isOwner) {
   361d1:	80 7f 28 00          	cmpb   $0x0,0x28(%rdi)
  ~DescriptorSets() { _destroyVkData(); }
   361d5:	48 89 fb             	mov    %rdi,%rbx
    if (_isOwner) {
   361d8:	75 1e                	jne    361f8 <_ZN3vkw14DescriptorSetsD1Ev+0x28>
   361da:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
   361dd:	48 85 ff             	test   %rdi,%rdi
   361e0:	74 0e                	je     361f0 <_ZN3vkw14DescriptorSetsD1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   361e2:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  ~DescriptorSets() { _destroyVkData(); }
   361e6:	5b                   	pop    %rbx
   361e7:	48 29 fe             	sub    %rdi,%rsi
   361ea:	e9 71 03 fd ff       	jmp    6560 <_ZdlPvm@plt>
   361ef:	90                   	nop
   361f0:	5b                   	pop    %rbx
   361f1:	c3                   	ret
   361f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      { return _M_data_ptr(this->_M_impl._M_start); }
   361f8:	48 8b 0f             	mov    (%rdi),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   361fb:	48 8b 57 08          	mov    0x8(%rdi),%rdx
      vkFreeDescriptorSets(_device, _pool, static_cast<uint32_t>(_sets.size()),
   361ff:	48 8b 77 20          	mov    0x20(%rdi),%rsi
   36203:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
   36207:	48 29 ca             	sub    %rcx,%rdx
   3620a:	48 c1 fa 03          	sar    $0x3,%rdx
   3620e:	e8 ad 04 fd ff       	call   66c0 <vkFreeDescriptorSets@plt>
      _isOwner = false;
   36213:	c6 43 28 00          	movb   $0x0,0x28(%rbx)
  }
   36217:	eb c1                	jmp    361da <_ZN3vkw14DescriptorSetsD1Ev+0xa>
   36219:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000036220 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev>:
  struct SyncWrapper {
   36220:	41 54                	push   %r12
   36222:	55                   	push   %rbp
   36223:	48 89 fd             	mov    %rdi,%rbp
   36226:	53                   	push   %rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   36227:	4c 8b 67 38          	mov    0x38(%rdi),%r12
   3622b:	48 8b 5f 30          	mov    0x30(%rdi),%rbx
	  for (; __first != __last; ++__first)
   3622f:	49 39 dc             	cmp    %rbx,%r12
   36232:	74 1b                	je     3624f <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x2f>
   36234:	0f 1f 40 00          	nopl   0x0(%rax)
    if (_isOwner) {
   36238:	80 7b 18 00          	cmpb   $0x0,0x18(%rbx)
   3623c:	0f 85 be 00 00 00    	jne    36300 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0xe0>
   36242:	48 83 c3 20          	add    $0x20,%rbx
   36246:	49 39 dc             	cmp    %rbx,%r12
   36249:	75 ed                	jne    36238 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   3624b:	48 8b 5d 30          	mov    0x30(%rbp),%rbx
	if (__p)
   3624f:	48 85 db             	test   %rbx,%rbx
   36252:	74 0f                	je     36263 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x43>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   36254:	48 8b 75 40          	mov    0x40(%rbp),%rsi
   36258:	48 89 df             	mov    %rbx,%rdi
   3625b:	48 29 de             	sub    %rbx,%rsi
   3625e:	e8 fd 02 fd ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   36263:	4c 8b 65 20          	mov    0x20(%rbp),%r12
   36267:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
   3626b:	49 39 dc             	cmp    %rbx,%r12
   3626e:	74 17                	je     36287 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x67>
    if (_isOwner) {
   36270:	80 7b 18 00          	cmpb   $0x0,0x18(%rbx)
   36274:	0f 85 ae 00 00 00    	jne    36328 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x108>
   3627a:	48 83 c3 20          	add    $0x20,%rbx
   3627e:	49 39 dc             	cmp    %rbx,%r12
   36281:	75 ed                	jne    36270 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x50>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   36283:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
	if (__p)
   36287:	48 85 db             	test   %rbx,%rbx
   3628a:	74 0f                	je     3629b <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x7b>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   3628c:	48 8b 75 28          	mov    0x28(%rbp),%rsi
   36290:	48 89 df             	mov    %rbx,%rdi
   36293:	48 29 de             	sub    %rbx,%rsi
   36296:	e8 c5 02 fd ff       	call   6560 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   3629b:	4c 8b 65 08          	mov    0x8(%rbp),%r12
   3629f:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
   362a3:	49 39 dc             	cmp    %rbx,%r12
   362a6:	74 1b                	je     362c3 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0xa3>
   362a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   362af:	00 
   362b0:	80 7b 18 00          	cmpb   $0x0,0x18(%rbx)
   362b4:	75 2a                	jne    362e0 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0xc0>
   362b6:	48 83 c3 20          	add    $0x20,%rbx
   362ba:	49 39 dc             	cmp    %rbx,%r12
   362bd:	75 f1                	jne    362b0 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x90>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   362bf:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
	if (__p)
   362c3:	48 85 db             	test   %rbx,%rbx
   362c6:	0f 84 84 00 00 00    	je     36350 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x130>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   362cc:	48 8b 75 10          	mov    0x10(%rbp),%rsi
   362d0:	48 89 df             	mov    %rbx,%rdi
   362d3:	48 29 de             	sub    %rbx,%rsi
   362d6:	5b                   	pop    %rbx
   362d7:	5d                   	pop    %rbp
   362d8:	41 5c                	pop    %r12
   362da:	e9 81 02 fd ff       	jmp    6560 <_ZdlPvm@plt>
   362df:	90                   	nop
      vkDestroySemaphore(_device, _semaphore, _pAllocator);
   362e0:	48 8b 53 10          	mov    0x10(%rbx),%rdx
   362e4:	48 8b 33             	mov    (%rbx),%rsi
   362e7:	48 83 c3 20          	add    $0x20,%rbx
   362eb:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
   362ef:	e8 7c fe fc ff       	call   6170 <vkDestroySemaphore@plt>
   362f4:	49 39 dc             	cmp    %rbx,%r12
   362f7:	75 b7                	jne    362b0 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x90>
   362f9:	eb c4                	jmp    362bf <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x9f>
   362fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      vkDestroyFence(_device, _fence, _pAllocator);
   36300:	48 8b 53 10          	mov    0x10(%rbx),%rdx
   36304:	48 8b 33             	mov    (%rbx),%rsi
   36307:	48 83 c3 20          	add    $0x20,%rbx
   3630b:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
   3630f:	e8 cc 02 fd ff       	call   65e0 <vkDestroyFence@plt>
   36314:	49 39 dc             	cmp    %rbx,%r12
   36317:	0f 85 1b ff ff ff    	jne    36238 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x18>
   3631d:	e9 29 ff ff ff       	jmp    3624b <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x2b>
   36322:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   36328:	48 8b 53 10          	mov    0x10(%rbx),%rdx
   3632c:	48 8b 33             	mov    (%rbx),%rsi
   3632f:	48 83 c3 20          	add    $0x20,%rbx
   36333:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
   36337:	e8 34 fe fc ff       	call   6170 <vkDestroySemaphore@plt>
   3633c:	49 39 dc             	cmp    %rbx,%r12
   3633f:	0f 85 2b ff ff ff    	jne    36270 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x50>
   36345:	e9 39 ff ff ff       	jmp    36283 <_ZN4rtvc9VulkanApp11SyncWrapperD1Ev+0x63>
   3634a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   36350:	5b                   	pop    %rbx
   36351:	5d                   	pop    %rbp
   36352:	41 5c                	pop    %r12
   36354:	c3                   	ret
   36355:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   3635c:	00 00 00 
   3635f:	90                   	nop

0000000000036360 <_ZNSt6vectorIN3vkw9SemaphoreESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   36360:	41 54                	push   %r12
   36362:	49 89 fc             	mov    %rdi,%r12
   36365:	55                   	push   %rbp
   36366:	53                   	push   %rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   36367:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
   3636b:	48 8b 1f             	mov    (%rdi),%rbx
   3636e:	48 39 dd             	cmp    %rbx,%rbp
   36371:	74 18                	je     3638b <_ZNSt6vectorIN3vkw9SemaphoreESaIS1_EED1Ev+0x2b>
   36373:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    if (_isOwner) {
   36378:	80 7b 18 00          	cmpb   $0x0,0x18(%rbx)
   3637c:	75 2a                	jne    363a8 <_ZNSt6vectorIN3vkw9SemaphoreESaIS1_EED1Ev+0x48>
   3637e:	48 83 c3 20          	add    $0x20,%rbx
   36382:	48 39 dd             	cmp    %rbx,%rbp
   36385:	75 f1                	jne    36378 <_ZNSt6vectorIN3vkw9SemaphoreESaIS1_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   36387:	49 8b 1c 24          	mov    (%r12),%rbx
	if (__p)
   3638b:	48 85 db             	test   %rbx,%rbx
   3638e:	74 38                	je     363c8 <_ZNSt6vectorIN3vkw9SemaphoreESaIS1_EED1Ev+0x68>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   36390:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
   36395:	48 89 df             	mov    %rbx,%rdi
   36398:	48 29 de             	sub    %rbx,%rsi
      }
   3639b:	5b                   	pop    %rbx
   3639c:	5d                   	pop    %rbp
   3639d:	41 5c                	pop    %r12
   3639f:	e9 bc 01 fd ff       	jmp    6560 <_ZdlPvm@plt>
   363a4:	0f 1f 40 00          	nopl   0x0(%rax)
      vkDestroySemaphore(_device, _semaphore, _pAllocator);
   363a8:	48 8b 53 10          	mov    0x10(%rbx),%rdx
   363ac:	48 8b 33             	mov    (%rbx),%rsi
   363af:	48 83 c3 20          	add    $0x20,%rbx
   363b3:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
   363b7:	e8 b4 fd fc ff       	call   6170 <vkDestroySemaphore@plt>
   363bc:	48 39 dd             	cmp    %rbx,%rbp
   363bf:	75 b7                	jne    36378 <_ZNSt6vectorIN3vkw9SemaphoreESaIS1_EED1Ev+0x18>
   363c1:	eb c4                	jmp    36387 <_ZNSt6vectorIN3vkw9SemaphoreESaIS1_EED1Ev+0x27>
   363c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   363c8:	5b                   	pop    %rbx
   363c9:	5d                   	pop    %rbp
   363ca:	41 5c                	pop    %r12
   363cc:	c3                   	ret
   363cd:	0f 1f 00             	nopl   (%rax)

00000000000363d0 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   363d0:	41 56                	push   %r14
   363d2:	41 55                	push   %r13
   363d4:	49 89 fd             	mov    %rdi,%r13
   363d7:	41 54                	push   %r12
   363d9:	55                   	push   %rbp
   363da:	53                   	push   %rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   363db:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
   363df:	48 8b 1f             	mov    (%rdi),%rbx
   363e2:	48 39 dd             	cmp    %rbx,%rbp
   363e5:	74 65                	je     3644c <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev+0x7c>
   363e7:	4c 8d 35 82 52 fd ff 	lea    -0x2ad7e(%rip),%r14        # b670 <_ZN3vkw6BufferD1Ev>
  virtual ~Buffer() { _destroyVkData(); }
   363ee:	4c 8d 25 3b a2 00 00 	lea    0xa23b(%rip),%r12        # 40630 <_ZTVN3vkw6BufferE+0x10>
   363f5:	eb 12                	jmp    36409 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev+0x39>
   363f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   363fe:	00 00 
   36400:	48 83 c3 40          	add    $0x40,%rbx
   36404:	48 39 dd             	cmp    %rbx,%rbp
   36407:	74 3f                	je     36448 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev+0x78>
      __pointer->~_Tp();
   36409:	48 8b 03             	mov    (%rbx),%rax
   3640c:	48 8b 00             	mov    (%rax),%rax
   3640f:	4c 39 f0             	cmp    %r14,%rax
   36412:	75 5c                	jne    36470 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev+0xa0>
    if (_isOwner) {
   36414:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
  virtual ~Buffer() { _destroyVkData(); }
   36418:	4c 89 23             	mov    %r12,(%rbx)
    if (_isOwner) {
   3641b:	74 e3                	je     36400 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev+0x30>
      vkDestroyBuffer(_device, _buffer, _pBufferAllocator);
   3641d:	48 8b 53 28          	mov    0x28(%rbx),%rdx
   36421:	48 8b 73 08          	mov    0x8(%rbx),%rsi
	  for (; __first != __last; ++__first)
   36425:	48 83 c3 40          	add    $0x40,%rbx
   36429:	48 8b 7b d0          	mov    -0x30(%rbx),%rdi
   3642d:	e8 2e fe fc ff       	call   6260 <vkDestroyBuffer@plt>
      vkFreeMemory(_device, _deviceMemory, _pMemoryAllocator);
   36432:	48 8b 53 f0          	mov    -0x10(%rbx),%rdx
   36436:	48 8b 73 d8          	mov    -0x28(%rbx),%rsi
   3643a:	48 8b 7b d0          	mov    -0x30(%rbx),%rdi
   3643e:	e8 6d 00 fd ff       	call   64b0 <vkFreeMemory@plt>
   36443:	48 39 dd             	cmp    %rbx,%rbp
   36446:	75 c1                	jne    36409 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev+0x39>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   36448:	49 8b 5d 00          	mov    0x0(%r13),%rbx
	if (__p)
   3644c:	48 85 db             	test   %rbx,%rbx
   3644f:	74 2f                	je     36480 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev+0xb0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   36451:	49 8b 75 10          	mov    0x10(%r13),%rsi
   36455:	48 89 df             	mov    %rbx,%rdi
   36458:	48 29 de             	sub    %rbx,%rsi
      }
   3645b:	5b                   	pop    %rbx
   3645c:	5d                   	pop    %rbp
   3645d:	41 5c                	pop    %r12
   3645f:	41 5d                	pop    %r13
   36461:	41 5e                	pop    %r14
   36463:	e9 f8 00 fd ff       	jmp    6560 <_ZdlPvm@plt>
   36468:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   3646f:	00 
      __pointer->~_Tp();
   36470:	48 89 df             	mov    %rbx,%rdi
   36473:	ff d0                	call   *%rax
   36475:	eb 89                	jmp    36400 <_ZNSt6vectorIN3vkw6BufferESaIS1_EED1Ev+0x30>
   36477:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3647e:	00 00 
   36480:	5b                   	pop    %rbx
   36481:	5d                   	pop    %rbp
   36482:	41 5c                	pop    %r12
   36484:	41 5d                	pop    %r13
   36486:	41 5e                	pop    %r14
   36488:	c3                   	ret

Disassembly of section .fini:

000000000003648c <_fini>:
   3648c:	48 83 ec 08          	sub    $0x8,%rsp
   36490:	48 83 c4 08          	add    $0x8,%rsp
   36494:	c3                   	ret
