
build/Application:     file format elf64-x86-64


Disassembly of section .init:

0000000000003000 <_init>:
    3000:	48 83 ec 08          	sub    $0x8,%rsp
    3004:	48 8b 05 ad ef 01 00 	mov    0x1efad(%rip),%rax        # 21fb8 <__gmon_start__@Base>
    300b:	48 85 c0             	test   %rax,%rax
    300e:	74 02                	je     3012 <_init+0x12>
    3010:	ff d0                	call   *%rax
    3012:	48 83 c4 08          	add    $0x8,%rsp
    3016:	c3                   	ret

Disassembly of section .plt:

0000000000003020 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@plt-0x10>:
    3020:	ff 35 ca ef 01 00    	push   0x1efca(%rip)        # 21ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
    3026:	ff 25 cc ef 01 00    	jmp    *0x1efcc(%rip)        # 21ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
    302c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003030 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@plt>:
    3030:	ff 25 ca ef 01 00    	jmp    *0x1efca(%rip)        # 22000 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@GLIBCXX_3.4.21>
    3036:	68 00 00 00 00       	push   $0x0
    303b:	e9 e0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm@plt>:
    3040:	ff 25 c2 ef 01 00    	jmp    *0x1efc2(%rip)        # 22008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm@GLIBCXX_3.4.21>
    3046:	68 01 00 00 00       	push   $0x1
    304b:	e9 d0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003050 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>:
    3050:	ff 25 ba ef 01 00    	jmp    *0x1efba(%rip)        # 22010 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@GLIBCXX_3.4>
    3056:	68 02 00 00 00       	push   $0x2
    305b:	e9 c0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003060 <_ZNSaIcED2Ev@plt>:
    3060:	ff 25 b2 ef 01 00    	jmp    *0x1efb2(%rip)        # 22018 <_ZNSaIcED2Ev@GLIBCXX_3.4>
    3066:	68 03 00 00 00       	push   $0x3
    306b:	e9 b0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003070 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@plt>:
    3070:	ff 25 aa ef 01 00    	jmp    *0x1efaa(%rip)        # 22020 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@GLIBCXX_3.4>
    3076:	68 04 00 00 00       	push   $0x4
    307b:	e9 a0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003080 <_ZNSolsEm@plt>:
    3080:	ff 25 a2 ef 01 00    	jmp    *0x1efa2(%rip)        # 22028 <_ZNSolsEm@GLIBCXX_3.4>
    3086:	68 05 00 00 00       	push   $0x5
    308b:	e9 90 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003090 <vkDeviceWaitIdle@plt>:
    3090:	ff 25 9a ef 01 00    	jmp    *0x1ef9a(%rip)        # 22030 <vkDeviceWaitIdle@Base>
    3096:	68 06 00 00 00       	push   $0x6
    309b:	e9 80 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030a0 <vkDestroySwapchainKHR@plt>:
    30a0:	ff 25 92 ef 01 00    	jmp    *0x1ef92(%rip)        # 22038 <vkDestroySwapchainKHR@Base>
    30a6:	68 07 00 00 00       	push   $0x7
    30ab:	e9 70 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030b0 <glfwDestroyWindow@plt>:
    30b0:	ff 25 8a ef 01 00    	jmp    *0x1ef8a(%rip)        # 22040 <glfwDestroyWindow@Base>
    30b6:	68 08 00 00 00       	push   $0x8
    30bb:	e9 60 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030c0 <_ZSt17__throw_bad_allocv@plt>:
    30c0:	ff 25 82 ef 01 00    	jmp    *0x1ef82(%rip)        # 22048 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
    30c6:	68 09 00 00 00       	push   $0x9
    30cb:	e9 50 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv@plt>:
    30d0:	ff 25 7a ef 01 00    	jmp    *0x1ef7a(%rip)        # 22050 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv@GLIBCXX_3.4.21>
    30d6:	68 0a 00 00 00       	push   $0xa
    30db:	e9 40 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030e0 <_ZNSt13runtime_errorC1EPKc@plt>:
    30e0:	ff 25 72 ef 01 00    	jmp    *0x1ef72(%rip)        # 22058 <_ZNSt13runtime_errorC1EPKc@GLIBCXX_3.4.21>
    30e6:	68 0b 00 00 00       	push   $0xb
    30eb:	e9 30 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030f0 <vkGetPhysicalDeviceProperties@plt>:
    30f0:	ff 25 6a ef 01 00    	jmp    *0x1ef6a(%rip)        # 22060 <vkGetPhysicalDeviceProperties@Base>
    30f6:	68 0c 00 00 00       	push   $0xc
    30fb:	e9 20 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003100 <__cxa_begin_catch@plt>:
    3100:	ff 25 62 ef 01 00    	jmp    *0x1ef62(%rip)        # 22068 <__cxa_begin_catch@CXXABI_1.3>
    3106:	68 0d 00 00 00       	push   $0xd
    310b:	e9 10 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003110 <vkCreateCommandPool@plt>:
    3110:	ff 25 5a ef 01 00    	jmp    *0x1ef5a(%rip)        # 22070 <vkCreateCommandPool@Base>
    3116:	68 0e 00 00 00       	push   $0xe
    311b:	e9 00 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003120 <strlen@plt>:
    3120:	ff 25 52 ef 01 00    	jmp    *0x1ef52(%rip)        # 22078 <strlen@GLIBC_2.2.5>
    3126:	68 0f 00 00 00       	push   $0xf
    312b:	e9 f0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003130 <memcmp@plt>:
    3130:	ff 25 4a ef 01 00    	jmp    *0x1ef4a(%rip)        # 22080 <memcmp@GLIBC_2.2.5>
    3136:	68 10 00 00 00       	push   $0x10
    313b:	e9 e0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003140 <vkCreateGraphicsPipelines@plt>:
    3140:	ff 25 42 ef 01 00    	jmp    *0x1ef42(%rip)        # 22088 <vkCreateGraphicsPipelines@Base>
    3146:	68 11 00 00 00       	push   $0x11
    314b:	e9 d0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003150 <__cxa_allocate_exception@plt>:
    3150:	ff 25 3a ef 01 00    	jmp    *0x1ef3a(%rip)        # 22090 <__cxa_allocate_exception@CXXABI_1.3>
    3156:	68 12 00 00 00       	push   $0x12
    315b:	e9 c0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003160 <_ZSt20__throw_length_errorPKc@plt>:
    3160:	ff 25 32 ef 01 00    	jmp    *0x1ef32(%rip)        # 22098 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
    3166:	68 13 00 00 00       	push   $0x13
    316b:	e9 b0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003170 <vkEnumeratePhysicalDevices@plt>:
    3170:	ff 25 2a ef 01 00    	jmp    *0x1ef2a(%rip)        # 220a0 <vkEnumeratePhysicalDevices@Base>
    3176:	68 14 00 00 00       	push   $0x14
    317b:	e9 a0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003180 <_ZNSaIcEC1ERKS_@plt>:
    3180:	ff 25 22 ef 01 00    	jmp    *0x1ef22(%rip)        # 220a8 <_ZNSaIcEC1ERKS_@GLIBCXX_3.4>
    3186:	68 15 00 00 00       	push   $0x15
    318b:	e9 90 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003190 <vkGetSwapchainImagesKHR@plt>:
    3190:	ff 25 1a ef 01 00    	jmp    *0x1ef1a(%rip)        # 220b0 <vkGetSwapchainImagesKHR@Base>
    3196:	68 16 00 00 00       	push   $0x16
    319b:	e9 80 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@plt>:
    31a0:	ff 25 12 ef 01 00    	jmp    *0x1ef12(%rip)        # 220b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@GLIBCXX_3.4.21>
    31a6:	68 17 00 00 00       	push   $0x17
    31ab:	e9 70 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>:
    31b0:	ff 25 0a ef 01 00    	jmp    *0x1ef0a(%rip)        # 220c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    31b6:	68 18 00 00 00       	push   $0x18
    31bb:	e9 60 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@plt>:
    31c0:	ff 25 02 ef 01 00    	jmp    *0x1ef02(%rip)        # 220c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@GLIBCXX_3.4.21>
    31c6:	68 19 00 00 00       	push   $0x19
    31cb:	e9 50 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031d0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>:
    31d0:	ff 25 fa ee 01 00    	jmp    *0x1eefa(%rip)        # 220d0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    31d6:	68 1a 00 00 00       	push   $0x1a
    31db:	e9 40 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@plt>:
    31e0:	ff 25 f2 ee 01 00    	jmp    *0x1eef2(%rip)        # 220d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@GLIBCXX_3.4.21>
    31e6:	68 1b 00 00 00       	push   $0x1b
    31eb:	e9 30 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031f0 <_ZSt19__throw_logic_errorPKc@plt>:
    31f0:	ff 25 ea ee 01 00    	jmp    *0x1eeea(%rip)        # 220e0 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
    31f6:	68 1c 00 00 00       	push   $0x1c
    31fb:	e9 20 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003200 <__cxa_free_exception@plt>:
    3200:	ff 25 e2 ee 01 00    	jmp    *0x1eee2(%rip)        # 220e8 <__cxa_free_exception@CXXABI_1.3>
    3206:	68 1d 00 00 00       	push   $0x1d
    320b:	e9 10 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003210 <vkGetPhysicalDeviceQueueFamilyProperties@plt>:
    3210:	ff 25 da ee 01 00    	jmp    *0x1eeda(%rip)        # 220f0 <vkGetPhysicalDeviceQueueFamilyProperties@Base>
    3216:	68 1e 00 00 00       	push   $0x1e
    321b:	e9 00 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003220 <glfwGetRequiredInstanceExtensions@plt>:
    3220:	ff 25 d2 ee 01 00    	jmp    *0x1eed2(%rip)        # 220f8 <glfwGetRequiredInstanceExtensions@Base>
    3226:	68 1f 00 00 00       	push   $0x1f
    322b:	e9 f0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003230 <_ZSt28__throw_bad_array_new_lengthv@plt>:
    3230:	ff 25 ca ee 01 00    	jmp    *0x1eeca(%rip)        # 22100 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
    3236:	68 20 00 00 00       	push   $0x20
    323b:	e9 e0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@plt>:
    3240:	ff 25 c2 ee 01 00    	jmp    *0x1eec2(%rip)        # 22108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@GLIBCXX_3.4.21>
    3246:	68 21 00 00 00       	push   $0x21
    324b:	e9 d0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003250 <vkDestroyDevice@plt>:
    3250:	ff 25 ba ee 01 00    	jmp    *0x1eeba(%rip)        # 22110 <vkDestroyDevice@Base>
    3256:	68 22 00 00 00       	push   $0x22
    325b:	e9 c0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003260 <vkEnumerateInstanceExtensionProperties@plt>:
    3260:	ff 25 b2 ee 01 00    	jmp    *0x1eeb2(%rip)        # 22118 <vkEnumerateInstanceExtensionProperties@Base>
    3266:	68 23 00 00 00       	push   $0x23
    326b:	e9 b0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@plt>:
    3270:	ff 25 aa ee 01 00    	jmp    *0x1eeaa(%rip)        # 22120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@GLIBCXX_3.4.21>
    3276:	68 24 00 00 00       	push   $0x24
    327b:	e9 a0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003280 <glfwWindowHint@plt>:
    3280:	ff 25 a2 ee 01 00    	jmp    *0x1eea2(%rip)        # 22128 <glfwWindowHint@Base>
    3286:	68 25 00 00 00       	push   $0x25
    328b:	e9 90 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003290 <vkGetPhysicalDeviceSurfaceCapabilitiesKHR@plt>:
    3290:	ff 25 9a ee 01 00    	jmp    *0x1ee9a(%rip)        # 22130 <vkGetPhysicalDeviceSurfaceCapabilitiesKHR@Base>
    3296:	68 26 00 00 00       	push   $0x26
    329b:	e9 80 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032a0 <__cxa_atexit@plt>:
    32a0:	ff 25 92 ee 01 00    	jmp    *0x1ee92(%rip)        # 22138 <__cxa_atexit@GLIBC_2.2.5>
    32a6:	68 27 00 00 00       	push   $0x27
    32ab:	e9 70 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032b0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>:
    32b0:	ff 25 8a ee 01 00    	jmp    *0x1ee8a(%rip)        # 22140 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@GLIBCXX_3.4.21>
    32b6:	68 28 00 00 00       	push   $0x28
    32bb:	e9 60 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032c0 <vkAllocateCommandBuffers@plt>:
    32c0:	ff 25 82 ee 01 00    	jmp    *0x1ee82(%rip)        # 22148 <vkAllocateCommandBuffers@Base>
    32c6:	68 29 00 00 00       	push   $0x29
    32cb:	e9 50 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032d0 <vkGetPhysicalDeviceProperties2@plt>:
    32d0:	ff 25 7a ee 01 00    	jmp    *0x1ee7a(%rip)        # 22150 <vkGetPhysicalDeviceProperties2@Base>
    32d6:	68 2a 00 00 00       	push   $0x2a
    32db:	e9 40 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032e0 <vkGetInstanceProcAddr@plt>:
    32e0:	ff 25 72 ee 01 00    	jmp    *0x1ee72(%rip)        # 22158 <vkGetInstanceProcAddr@Base>
    32e6:	68 2b 00 00 00       	push   $0x2b
    32eb:	e9 30 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032f0 <glfwPollEvents@plt>:
    32f0:	ff 25 6a ee 01 00    	jmp    *0x1ee6a(%rip)        # 22160 <glfwPollEvents@Base>
    32f6:	68 2c 00 00 00       	push   $0x2c
    32fb:	e9 20 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
    3300:	ff 25 62 ee 01 00    	jmp    *0x1ee62(%rip)        # 22168 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
    3306:	68 2d 00 00 00       	push   $0x2d
    330b:	e9 10 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003310 <_Znwm@plt>:
    3310:	ff 25 5a ee 01 00    	jmp    *0x1ee5a(%rip)        # 22170 <_Znwm@GLIBCXX_3.4>
    3316:	68 2e 00 00 00       	push   $0x2e
    331b:	e9 00 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003320 <_ZdlPvm@plt>:
    3320:	ff 25 52 ee 01 00    	jmp    *0x1ee52(%rip)        # 22178 <_ZdlPvm@CXXABI_1.3.9>
    3326:	68 2f 00 00 00       	push   $0x2f
    332b:	e9 f0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003330 <vkDestroyInstance@plt>:
    3330:	ff 25 4a ee 01 00    	jmp    *0x1ee4a(%rip)        # 22180 <vkDestroyInstance@Base>
    3336:	68 30 00 00 00       	push   $0x30
    333b:	e9 e0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003340 <glfwTerminate@plt>:
    3340:	ff 25 42 ee 01 00    	jmp    *0x1ee42(%rip)        # 22188 <glfwTerminate@Base>
    3346:	68 31 00 00 00       	push   $0x31
    334b:	e9 d0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003350 <vkCreateImageView@plt>:
    3350:	ff 25 3a ee 01 00    	jmp    *0x1ee3a(%rip)        # 22190 <vkCreateImageView@Base>
    3356:	68 32 00 00 00       	push   $0x32
    335b:	e9 c0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003360 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>:
    3360:	ff 25 32 ee 01 00    	jmp    *0x1ee32(%rip)        # 22198 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    3366:	68 33 00 00 00       	push   $0x33
    336b:	e9 b0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003370 <_ZNSolsEPFRSoS_E@plt>:
    3370:	ff 25 2a ee 01 00    	jmp    *0x1ee2a(%rip)        # 221a0 <_ZNSolsEPFRSoS_E@GLIBCXX_3.4>
    3376:	68 34 00 00 00       	push   $0x34
    337b:	e9 a0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@plt>:
    3380:	ff 25 22 ee 01 00    	jmp    *0x1ee22(%rip)        # 221a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@GLIBCXX_3.4.21>
    3386:	68 35 00 00 00       	push   $0x35
    338b:	e9 90 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003390 <vkGetPhysicalDeviceSurfaceSupportKHR@plt>:
    3390:	ff 25 1a ee 01 00    	jmp    *0x1ee1a(%rip)        # 221b0 <vkGetPhysicalDeviceSurfaceSupportKHR@Base>
    3396:	68 36 00 00 00       	push   $0x36
    339b:	e9 80 fc ff ff       	jmp    3020 <_init+0x20>

00000000000033a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc@plt>:
    33a0:	ff 25 12 ee 01 00    	jmp    *0x1ee12(%rip)        # 221b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc@GLIBCXX_3.4.21>
    33a6:	68 37 00 00 00       	push   $0x37
    33ab:	e9 70 fc ff ff       	jmp    3020 <_init+0x20>

00000000000033b0 <_ZNSaIcED1Ev@plt>:
    33b0:	ff 25 0a ee 01 00    	jmp    *0x1ee0a(%rip)        # 221c0 <_ZNSaIcED1Ev@GLIBCXX_3.4>
    33b6:	68 38 00 00 00       	push   $0x38
    33bb:	e9 60 fc ff ff       	jmp    3020 <_init+0x20>

00000000000033c0 <vkDestroyPipeline@plt>:
    33c0:	ff 25 02 ee 01 00    	jmp    *0x1ee02(%rip)        # 221c8 <vkDestroyPipeline@Base>
    33c6:	68 39 00 00 00       	push   $0x39
    33cb:	e9 50 fc ff ff       	jmp    3020 <_init+0x20>

00000000000033d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@plt>:
    33d0:	ff 25 fa ed 01 00    	jmp    *0x1edfa(%rip)        # 221d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@GLIBCXX_3.4.21>
    33d6:	68 3a 00 00 00       	push   $0x3a
    33db:	e9 40 fc ff ff       	jmp    3020 <_init+0x20>

00000000000033e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@plt>:
    33e0:	ff 25 f2 ed 01 00    	jmp    *0x1edf2(%rip)        # 221d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@GLIBCXX_3.4.21>
    33e6:	68 3b 00 00 00       	push   $0x3b
    33eb:	e9 30 fc ff ff       	jmp    3020 <_init+0x20>

00000000000033f0 <vkEnumerateInstanceLayerProperties@plt>:
    33f0:	ff 25 ea ed 01 00    	jmp    *0x1edea(%rip)        # 221e0 <vkEnumerateInstanceLayerProperties@Base>
    33f6:	68 3c 00 00 00       	push   $0x3c
    33fb:	e9 20 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003400 <glfwInit@plt>:
    3400:	ff 25 e2 ed 01 00    	jmp    *0x1ede2(%rip)        # 221e8 <glfwInit@Base>
    3406:	68 3d 00 00 00       	push   $0x3d
    340b:	e9 10 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>:
    3410:	ff 25 da ed 01 00    	jmp    *0x1edda(%rip)        # 221f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@GLIBCXX_3.4>
    3416:	68 3e 00 00 00       	push   $0x3e
    341b:	e9 00 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003420 <vkCreateSwapchainKHR@plt>:
    3420:	ff 25 d2 ed 01 00    	jmp    *0x1edd2(%rip)        # 221f8 <vkCreateSwapchainKHR@Base>
    3426:	68 3f 00 00 00       	push   $0x3f
    342b:	e9 f0 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003430 <_ZNSt13basic_fstreamIcSt11char_traitsIcEEC1Ev@plt>:
    3430:	ff 25 ca ed 01 00    	jmp    *0x1edca(%rip)        # 22200 <_ZNSt13basic_fstreamIcSt11char_traitsIcEEC1Ev@GLIBCXX_3.4>
    3436:	68 40 00 00 00       	push   $0x40
    343b:	e9 e0 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003440 <vkCreateInstance@plt>:
    3440:	ff 25 c2 ed 01 00    	jmp    *0x1edc2(%rip)        # 22208 <vkCreateInstance@Base>
    3446:	68 41 00 00 00       	push   $0x41
    344b:	e9 d0 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@plt>:
    3450:	ff 25 ba ed 01 00    	jmp    *0x1edba(%rip)        # 22210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@GLIBCXX_3.4.21>
    3456:	68 42 00 00 00       	push   $0x42
    345b:	e9 c0 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003460 <vkGetPhysicalDeviceSurfaceFormatsKHR@plt>:
    3460:	ff 25 b2 ed 01 00    	jmp    *0x1edb2(%rip)        # 22218 <vkGetPhysicalDeviceSurfaceFormatsKHR@Base>
    3466:	68 43 00 00 00       	push   $0x43
    346b:	e9 b0 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003470 <vkGetPhysicalDeviceSurfacePresentModesKHR@plt>:
    3470:	ff 25 aa ed 01 00    	jmp    *0x1edaa(%rip)        # 22220 <vkGetPhysicalDeviceSurfacePresentModesKHR@Base>
    3476:	68 44 00 00 00       	push   $0x44
    347b:	e9 a0 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003480 <vkCreateComputePipelines@plt>:
    3480:	ff 25 a2 ed 01 00    	jmp    *0x1eda2(%rip)        # 22228 <vkCreateComputePipelines@Base>
    3486:	68 45 00 00 00       	push   $0x45
    348b:	e9 90 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003490 <_ZNSt6chrono3_V212steady_clock3nowEv@plt>:
    3490:	ff 25 9a ed 01 00    	jmp    *0x1ed9a(%rip)        # 22230 <_ZNSt6chrono3_V212steady_clock3nowEv@GLIBCXX_3.4.19>
    3496:	68 46 00 00 00       	push   $0x46
    349b:	e9 80 fb ff ff       	jmp    3020 <_init+0x20>

00000000000034a0 <vkGetDeviceQueue@plt>:
    34a0:	ff 25 92 ed 01 00    	jmp    *0x1ed92(%rip)        # 22238 <vkGetDeviceQueue@Base>
    34a6:	68 47 00 00 00       	push   $0x47
    34ab:	e9 70 fb ff ff       	jmp    3020 <_init+0x20>

00000000000034b0 <_ZNSolsEj@plt>:
    34b0:	ff 25 8a ed 01 00    	jmp    *0x1ed8a(%rip)        # 22240 <_ZNSolsEj@GLIBCXX_3.4>
    34b6:	68 48 00 00 00       	push   $0x48
    34bb:	e9 60 fb ff ff       	jmp    3020 <_init+0x20>

00000000000034c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>:
    34c0:	ff 25 82 ed 01 00    	jmp    *0x1ed82(%rip)        # 22248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@GLIBCXX_3.4.21>
    34c6:	68 49 00 00 00       	push   $0x49
    34cb:	e9 50 fb ff ff       	jmp    3020 <_init+0x20>

00000000000034d0 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>:
    34d0:	ff 25 7a ed 01 00    	jmp    *0x1ed7a(%rip)        # 22250 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@GLIBCXX_3.4.21>
    34d6:	68 4a 00 00 00       	push   $0x4a
    34db:	e9 40 fb ff ff       	jmp    3020 <_init+0x20>

00000000000034e0 <vkEnumerateDeviceExtensionProperties@plt>:
    34e0:	ff 25 72 ed 01 00    	jmp    *0x1ed72(%rip)        # 22258 <vkEnumerateDeviceExtensionProperties@Base>
    34e6:	68 4b 00 00 00       	push   $0x4b
    34eb:	e9 30 fb ff ff       	jmp    3020 <_init+0x20>

00000000000034f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@plt>:
    34f0:	ff 25 6a ed 01 00    	jmp    *0x1ed6a(%rip)        # 22260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@GLIBCXX_3.4.21>
    34f6:	68 4c 00 00 00       	push   $0x4c
    34fb:	e9 20 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003500 <vkDestroyCommandPool@plt>:
    3500:	ff 25 62 ed 01 00    	jmp    *0x1ed62(%rip)        # 22268 <vkDestroyCommandPool@Base>
    3506:	68 4d 00 00 00       	push   $0x4d
    350b:	e9 10 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003510 <__cxa_rethrow@plt>:
    3510:	ff 25 5a ed 01 00    	jmp    *0x1ed5a(%rip)        # 22270 <__cxa_rethrow@CXXABI_1.3>
    3516:	68 4e 00 00 00       	push   $0x4e
    351b:	e9 00 fb ff ff       	jmp    3020 <_init+0x20>

0000000000003520 <vkCreateDevice@plt>:
    3520:	ff 25 52 ed 01 00    	jmp    *0x1ed52(%rip)        # 22278 <vkCreateDevice@Base>
    3526:	68 4f 00 00 00       	push   $0x4f
    352b:	e9 f0 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003530 <_ZNSt8ios_base4InitC1Ev@plt>:
    3530:	ff 25 4a ed 01 00    	jmp    *0x1ed4a(%rip)        # 22280 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
    3536:	68 50 00 00 00       	push   $0x50
    353b:	e9 e0 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003540 <glfwCreateWindowSurface@plt>:
    3540:	ff 25 42 ed 01 00    	jmp    *0x1ed42(%rip)        # 22288 <glfwCreateWindowSurface@Base>
    3546:	68 51 00 00 00       	push   $0x51
    354b:	e9 d0 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003550 <glfwCreateWindow@plt>:
    3550:	ff 25 3a ed 01 00    	jmp    *0x1ed3a(%rip)        # 22290 <glfwCreateWindow@Base>
    3556:	68 52 00 00 00       	push   $0x52
    355b:	e9 c0 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>:
    3560:	ff 25 32 ed 01 00    	jmp    *0x1ed32(%rip)        # 22298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@GLIBCXX_3.4.21>
    3566:	68 53 00 00 00       	push   $0x53
    356b:	e9 b0 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003570 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
    3570:	ff 25 2a ed 01 00    	jmp    *0x1ed2a(%rip)        # 222a0 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
    3576:	68 54 00 00 00       	push   $0x54
    357b:	e9 a0 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003580 <memmove@plt>:
    3580:	ff 25 22 ed 01 00    	jmp    *0x1ed22(%rip)        # 222a8 <memmove@GLIBC_2.2.5>
    3586:	68 55 00 00 00       	push   $0x55
    358b:	e9 90 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003590 <__cxa_end_catch@plt>:
    3590:	ff 25 1a ed 01 00    	jmp    *0x1ed1a(%rip)        # 222b0 <__cxa_end_catch@CXXABI_1.3>
    3596:	68 56 00 00 00       	push   $0x56
    359b:	e9 80 fa ff ff       	jmp    3020 <_init+0x20>

00000000000035a0 <__cxa_throw@plt>:
    35a0:	ff 25 12 ed 01 00    	jmp    *0x1ed12(%rip)        # 222b8 <__cxa_throw@CXXABI_1.3>
    35a6:	68 57 00 00 00       	push   $0x57
    35ab:	e9 70 fa ff ff       	jmp    3020 <_init+0x20>

00000000000035b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_@plt>:
    35b0:	ff 25 0a ed 01 00    	jmp    *0x1ed0a(%rip)        # 222c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_@GLIBCXX_3.4.21>
    35b6:	68 58 00 00 00       	push   $0x58
    35bb:	e9 60 fa ff ff       	jmp    3020 <_init+0x20>

00000000000035c0 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE7is_openEv@plt>:
    35c0:	ff 25 02 ed 01 00    	jmp    *0x1ed02(%rip)        # 222c8 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE7is_openEv@GLIBCXX_3.4>
    35c6:	68 59 00 00 00       	push   $0x59
    35cb:	e9 50 fa ff ff       	jmp    3020 <_init+0x20>

00000000000035d0 <_ZNSolsEi@plt>:
    35d0:	ff 25 fa ec 01 00    	jmp    *0x1ecfa(%rip)        # 222d0 <_ZNSolsEi@GLIBCXX_3.4>
    35d6:	68 5a 00 00 00       	push   $0x5a
    35db:	e9 40 fa ff ff       	jmp    3020 <_init+0x20>

00000000000035e0 <vkDestroySurfaceKHR@plt>:
    35e0:	ff 25 f2 ec 01 00    	jmp    *0x1ecf2(%rip)        # 222d8 <vkDestroySurfaceKHR@Base>
    35e6:	68 5b 00 00 00       	push   $0x5b
    35eb:	e9 30 fa ff ff       	jmp    3020 <_init+0x20>

00000000000035f0 <_Unwind_Resume@plt>:
    35f0:	ff 25 ea ec 01 00    	jmp    *0x1ecea(%rip)        # 222e0 <_Unwind_Resume@GCC_3.0>
    35f6:	68 5c 00 00 00       	push   $0x5c
    35fb:	e9 20 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003600 <_ZNSaIcEC1Ev@plt>:
    3600:	ff 25 e2 ec 01 00    	jmp    *0x1ece2(%rip)        # 222e8 <_ZNSaIcEC1Ev@GLIBCXX_3.4>
    3606:	68 5d 00 00 00       	push   $0x5d
    360b:	e9 10 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003610 <vkDestroyImageView@plt>:
    3610:	ff 25 da ec 01 00    	jmp    *0x1ecda(%rip)        # 222f0 <vkDestroyImageView@Base>
    3616:	68 5e 00 00 00       	push   $0x5e
    361b:	e9 00 fa ff ff       	jmp    3020 <_init+0x20>

0000000000003620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
    3620:	ff 25 d2 ec 01 00    	jmp    *0x1ecd2(%rip)        # 222f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
    3626:	68 5f 00 00 00       	push   $0x5f
    362b:	e9 f0 f9 ff ff       	jmp    3020 <_init+0x20>

0000000000003630 <_ZNSt9exceptionD2Ev@plt>:
    3630:	ff 25 ca ec 01 00    	jmp    *0x1ecca(%rip)        # 22300 <_ZNSt9exceptionD2Ev@GLIBCXX_3.4>
    3636:	68 60 00 00 00       	push   $0x60
    363b:	e9 e0 f9 ff ff       	jmp    3020 <_init+0x20>

0000000000003640 <glfwWindowShouldClose@plt>:
    3640:	ff 25 c2 ec 01 00    	jmp    *0x1ecc2(%rip)        # 22308 <glfwWindowShouldClose@Base>
    3646:	68 61 00 00 00       	push   $0x61
    364b:	e9 d0 f9 ff ff       	jmp    3020 <_init+0x20>

0000000000003650 <_ZNSolsEd@plt>:
    3650:	ff 25 ba ec 01 00    	jmp    *0x1ecba(%rip)        # 22310 <_ZNSolsEd@GLIBCXX_3.4>
    3656:	68 62 00 00 00       	push   $0x62
    365b:	e9 c0 f9 ff ff       	jmp    3020 <_init+0x20>

0000000000003660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_@plt>:
    3660:	ff 25 b2 ec 01 00    	jmp    *0x1ecb2(%rip)        # 22318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_@GLIBCXX_3.4.21>
    3666:	68 63 00 00 00       	push   $0x63
    366b:	e9 b0 f9 ff ff       	jmp    3020 <_init+0x20>

0000000000003670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@plt>:
    3670:	ff 25 aa ec 01 00    	jmp    *0x1ecaa(%rip)        # 22320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@GLIBCXX_3.4.21>
    3676:	68 64 00 00 00       	push   $0x64
    367b:	e9 a0 f9 ff ff       	jmp    3020 <_init+0x20>

Disassembly of section .plt.got:

0000000000003680 <__cxa_finalize@plt>:
    3680:	ff 25 0a e9 01 00    	jmp    *0x1e90a(%rip)        # 21f90 <__cxa_finalize@GLIBC_2.2.5>
    3686:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000003690 <_start>:
    3690:	31 ed                	xor    %ebp,%ebp
    3692:	49 89 d1             	mov    %rdx,%r9
    3695:	5e                   	pop    %rsi
    3696:	48 89 e2             	mov    %rsp,%rdx
    3699:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    369d:	50                   	push   %rax
    369e:	54                   	push   %rsp
    369f:	45 31 c0             	xor    %r8d,%r8d
    36a2:	31 c9                	xor    %ecx,%ecx
    36a4:	48 8d 3d a9 01 00 00 	lea    0x1a9(%rip),%rdi        # 3854 <main>
    36ab:	ff 15 ef e8 01 00    	call   *0x1e8ef(%rip)        # 21fa0 <__libc_start_main@GLIBC_2.34>
    36b1:	f4                   	hlt
    36b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36b9:	00 00 00 
    36bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000036c0 <deregister_tm_clones>:
    36c0:	48 8d 3d 81 ec 01 00 	lea    0x1ec81(%rip),%rdi        # 22348 <__TMC_END__>
    36c7:	48 8d 05 7a ec 01 00 	lea    0x1ec7a(%rip),%rax        # 22348 <__TMC_END__>
    36ce:	48 39 f8             	cmp    %rdi,%rax
    36d1:	74 15                	je     36e8 <deregister_tm_clones+0x28>
    36d3:	48 8b 05 d6 e8 01 00 	mov    0x1e8d6(%rip),%rax        # 21fb0 <_ITM_deregisterTMCloneTable@Base>
    36da:	48 85 c0             	test   %rax,%rax
    36dd:	74 09                	je     36e8 <deregister_tm_clones+0x28>
    36df:	ff e0                	jmp    *%rax
    36e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    36e8:	c3                   	ret
    36e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000036f0 <register_tm_clones>:
    36f0:	48 8d 3d 51 ec 01 00 	lea    0x1ec51(%rip),%rdi        # 22348 <__TMC_END__>
    36f7:	48 8d 35 4a ec 01 00 	lea    0x1ec4a(%rip),%rsi        # 22348 <__TMC_END__>
    36fe:	48 29 fe             	sub    %rdi,%rsi
    3701:	48 89 f0             	mov    %rsi,%rax
    3704:	48 c1 ee 3f          	shr    $0x3f,%rsi
    3708:	48 c1 f8 03          	sar    $0x3,%rax
    370c:	48 01 c6             	add    %rax,%rsi
    370f:	48 d1 fe             	sar    %rsi
    3712:	74 14                	je     3728 <register_tm_clones+0x38>
    3714:	48 8b 05 a5 e8 01 00 	mov    0x1e8a5(%rip),%rax        # 21fc0 <_ITM_registerTMCloneTable@Base>
    371b:	48 85 c0             	test   %rax,%rax
    371e:	74 08                	je     3728 <register_tm_clones+0x38>
    3720:	ff e0                	jmp    *%rax
    3722:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    3728:	c3                   	ret
    3729:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003730 <__do_global_dtors_aux>:
    3730:	f3 0f 1e fa          	endbr64
    3734:	80 3d 75 ee 01 00 00 	cmpb   $0x0,0x1ee75(%rip)        # 225b0 <completed.0>
    373b:	75 2b                	jne    3768 <__do_global_dtors_aux+0x38>
    373d:	55                   	push   %rbp
    373e:	48 83 3d 4a e8 01 00 	cmpq   $0x0,0x1e84a(%rip)        # 21f90 <__cxa_finalize@GLIBC_2.2.5>
    3745:	00 
    3746:	48 89 e5             	mov    %rsp,%rbp
    3749:	74 0c                	je     3757 <__do_global_dtors_aux+0x27>
    374b:	48 8b 3d de eb 01 00 	mov    0x1ebde(%rip),%rdi        # 22330 <__dso_handle>
    3752:	e8 29 ff ff ff       	call   3680 <__cxa_finalize@plt>
    3757:	e8 64 ff ff ff       	call   36c0 <deregister_tm_clones>
    375c:	c6 05 4d ee 01 00 01 	movb   $0x1,0x1ee4d(%rip)        # 225b0 <completed.0>
    3763:	5d                   	pop    %rbp
    3764:	c3                   	ret
    3765:	0f 1f 00             	nopl   (%rax)
    3768:	c3                   	ret
    3769:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003770 <frame_dummy>:
    3770:	f3 0f 1e fa          	endbr64
    3774:	e9 77 ff ff ff       	jmp    36f0 <register_tm_clones>

0000000000003779 <_Z14protected_mainv>:
#include <vulkan_app.hpp>

#include <iostream>
#include <typeinfo>

int protected_main() {
    3779:	55                   	push   %rbp
    377a:	48 89 e5             	mov    %rsp,%rbp
    377d:	53                   	push   %rbx
    377e:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  VulkanApp app;
    3785:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    378c:	48 89 c7             	mov    %rax,%rdi
    378f:	e8 68 96 00 00       	call   cdfc <_ZN9VulkanAppC1Ev>
  app.run();
    3794:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    379b:	48 89 c7             	mov    %rax,%rdi
    379e:	e8 4b 9a 00 00       	call   d1ee <_ZN9VulkanApp3runEv>
  app.writeInfo("src/info.log");
    37a3:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    37a7:	48 89 c7             	mov    %rax,%rdi
    37aa:	e8 51 fe ff ff       	call   3600 <_ZNSaIcEC1Ev@plt>
    37af:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    37b3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37b7:	48 8d 0d 26 fe 00 00 	lea    0xfe26(%rip),%rcx        # 135e4 <_ZN6__pstl9execution2v1L5unseqE+0x1>
    37be:	48 89 ce             	mov    %rcx,%rsi
    37c1:	48 89 c7             	mov    %rax,%rdi
    37c4:	e8 77 02 00 00       	call   3a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    37c9:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    37cd:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    37d4:	48 89 d6             	mov    %rdx,%rsi
    37d7:	48 89 c7             	mov    %rax,%rdi
    37da:	e8 53 9b 00 00       	call   d332 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    37df:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37e3:	48 89 c7             	mov    %rax,%rdi
    37e6:	e8 c5 f9 ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    37eb:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    37ef:	48 89 c7             	mov    %rax,%rdi
    37f2:	e8 b9 fb ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
  return EXIT_SUCCESS;
    37f7:	bb 00 00 00 00       	mov    $0x0,%ebx
}
    37fc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3803:	48 89 c7             	mov    %rax,%rdi
    3806:	e8 3b 98 00 00       	call   d046 <_ZN9VulkanAppD1Ev>
  return EXIT_SUCCESS;
    380b:	89 d8                	mov    %ebx,%eax
    380d:	eb 3f                	jmp    384e <_Z14protected_mainv+0xd5>
  app.writeInfo("src/info.log");
    380f:	48 89 c3             	mov    %rax,%rbx
    3812:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3816:	48 89 c7             	mov    %rax,%rdi
    3819:	e8 92 f9 ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    381e:	eb 03                	jmp    3823 <_Z14protected_mainv+0xaa>
    3820:	48 89 c3             	mov    %rax,%rbx
    3823:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3827:	48 89 c7             	mov    %rax,%rdi
    382a:	e8 81 fb ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
    382f:	eb 03                	jmp    3834 <_Z14protected_mainv+0xbb>
}
    3831:	48 89 c3             	mov    %rax,%rbx
    3834:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    383b:	48 89 c7             	mov    %rax,%rdi
    383e:	e8 03 98 00 00       	call   d046 <_ZN9VulkanAppD1Ev>
    3843:	48 89 d8             	mov    %rbx,%rax
    3846:	48 89 c7             	mov    %rax,%rdi
    3849:	e8 a2 fd ff ff       	call   35f0 <_Unwind_Resume@plt>
    384e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    3852:	c9                   	leave
    3853:	c3                   	ret

0000000000003854 <main>:

int main() {
    3854:	55                   	push   %rbp
    3855:	48 89 e5             	mov    %rsp,%rbp
    3858:	53                   	push   %rbx
    3859:	48 83 ec 18          	sub    $0x18,%rsp
  try {
    return protected_main();
    385d:	e8 17 ff ff ff       	call   3779 <_Z14protected_mainv>
    3862:	e9 aa 00 00 00       	jmp    3911 <main+0xbd>
  } catch (const std::exception &e) {
    std::cerr << e.what() << '\n';
  } catch (...) {
    std::cerr << "Uncaught exception.\n";
  }
  return EXIT_FAILURE;
    3867:	b8 01 00 00 00       	mov    $0x1,%eax
    386c:	e9 a0 00 00 00       	jmp    3911 <main+0xbd>
  } catch (const std::exception &e) {
    3871:	48 83 fa 01          	cmp    $0x1,%rdx
    3875:	75 49                	jne    38c0 <main+0x6c>
    3877:	48 89 c7             	mov    %rax,%rdi
    387a:	e8 81 f8 ff ff       	call   3100 <__cxa_begin_catch@plt>
    387f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    std::cerr << e.what() << '\n';
    3883:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3887:	48 8b 00             	mov    (%rax),%rax
    388a:	48 83 c0 10          	add    $0x10,%rax
    388e:	48 8b 10             	mov    (%rax),%rdx
    3891:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3895:	48 89 c7             	mov    %rax,%rdi
    3898:	ff d2                	call   *%rdx
    389a:	48 89 c6             	mov    %rax,%rsi
    389d:	48 8d 05 fc eb 01 00 	lea    0x1ebfc(%rip),%rax        # 224a0 <_ZSt4cerr@GLIBCXX_3.4>
    38a4:	48 89 c7             	mov    %rax,%rdi
    38a7:	e8 54 fa ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    38ac:	be 0a 00 00 00       	mov    $0xa,%esi
    38b1:	48 89 c7             	mov    %rax,%rdi
    38b4:	e8 57 fb ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  } catch (...) {
    38b9:	e8 d2 fc ff ff       	call   3590 <__cxa_end_catch@plt>
    38be:	eb a7                	jmp    3867 <main+0x13>
    38c0:	48 89 c7             	mov    %rax,%rdi
    38c3:	e8 38 f8 ff ff       	call   3100 <__cxa_begin_catch@plt>
    std::cerr << "Uncaught exception.\n";
    38c8:	48 8d 05 22 fd 00 00 	lea    0xfd22(%rip),%rax        # 135f1 <_ZN6__pstl9execution2v1L5unseqE+0xe>
    38cf:	48 89 c6             	mov    %rax,%rsi
    38d2:	48 8d 05 c7 eb 01 00 	lea    0x1ebc7(%rip),%rax        # 224a0 <_ZSt4cerr@GLIBCXX_3.4>
    38d9:	48 89 c7             	mov    %rax,%rdi
    38dc:	e8 1f fa ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  }
    38e1:	e8 aa fc ff ff       	call   3590 <__cxa_end_catch@plt>
    38e6:	e9 7c ff ff ff       	jmp    3867 <main+0x13>
  } catch (...) {
    38eb:	48 89 c3             	mov    %rax,%rbx
    38ee:	e8 9d fc ff ff       	call   3590 <__cxa_end_catch@plt>
    38f3:	48 89 d8             	mov    %rbx,%rax
    38f6:	48 89 c7             	mov    %rax,%rdi
    38f9:	e8 f2 fc ff ff       	call   35f0 <_Unwind_Resume@plt>
  }
    38fe:	48 89 c3             	mov    %rax,%rbx
    3901:	e8 8a fc ff ff       	call   3590 <__cxa_end_catch@plt>
    3906:	48 89 d8             	mov    %rbx,%rax
    3909:	48 89 c7             	mov    %rax,%rdi
    390c:	e8 df fc ff ff       	call   35f0 <_Unwind_Resume@plt>
    3911:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    3915:	c9                   	leave
    3916:	c3                   	ret

0000000000003917 <_Z41__static_initialization_and_destruction_0ii>:
    3917:	55                   	push   %rbp
    3918:	48 89 e5             	mov    %rsp,%rbp
    391b:	48 83 ec 10          	sub    $0x10,%rsp
    391f:	89 7d fc             	mov    %edi,-0x4(%rbp)
    3922:	89 75 f8             	mov    %esi,-0x8(%rbp)
    3925:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    3929:	75 3b                	jne    3966 <_Z41__static_initialization_and_destruction_0ii+0x4f>
    392b:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    3932:	75 32                	jne    3966 <_Z41__static_initialization_and_destruction_0ii+0x4f>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    3934:	48 8d 05 76 ec 01 00 	lea    0x1ec76(%rip),%rax        # 225b1 <_ZStL8__ioinit>
    393b:	48 89 c7             	mov    %rax,%rdi
    393e:	e8 ed fb ff ff       	call   3530 <_ZNSt8ios_base4InitC1Ev@plt>
    3943:	48 8d 05 e6 e9 01 00 	lea    0x1e9e6(%rip),%rax        # 22330 <__dso_handle>
    394a:	48 89 c2             	mov    %rax,%rdx
    394d:	48 8d 05 5d ec 01 00 	lea    0x1ec5d(%rip),%rax        # 225b1 <_ZStL8__ioinit>
    3954:	48 89 c6             	mov    %rax,%rsi
    3957:	48 8b 05 6a e6 01 00 	mov    0x1e66a(%rip),%rax        # 21fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    395e:	48 89 c7             	mov    %rax,%rdi
    3961:	e8 3a f9 ff ff       	call   32a0 <__cxa_atexit@plt>
    3966:	90                   	nop
    3967:	c9                   	leave
    3968:	c3                   	ret

0000000000003969 <_GLOBAL__sub_I__Z14protected_mainv>:
    3969:	55                   	push   %rbp
    396a:	48 89 e5             	mov    %rsp,%rbp
    396d:	be ff ff 00 00       	mov    $0xffff,%esi
    3972:	bf 01 00 00 00       	mov    $0x1,%edi
    3977:	e8 9b ff ff ff       	call   3917 <_Z41__static_initialization_and_destruction_0ii>
    397c:	5d                   	pop    %rbp
    397d:	c3                   	ret

000000000000397e <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
    397e:	55                   	push   %rbp
    397f:	48 89 e5             	mov    %rsp,%rbp
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
    3982:	b8 00 00 00 00       	mov    $0x0,%eax
#else
    return false;
#endif
  }
    3987:	5d                   	pop    %rbp
    3988:	c3                   	ret

0000000000003989 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
    3989:	55                   	push   %rbp
    398a:	48 89 e5             	mov    %rsp,%rbp
    398d:	48 83 ec 10          	sub    $0x10,%rsp
    3991:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
    3995:	e8 e4 ff ff ff       	call   397e <_ZSt23__is_constant_evaluatedv>
    399a:	84 c0                	test   %al,%al
    399c:	74 0e                	je     39ac <_ZNSt11char_traitsIcE6lengthEPKc+0x23>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
    399e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    39a2:	48 89 c7             	mov    %rax,%rdi
    39a5:	e8 12 00 00 00       	call   39bc <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
    39aa:	eb 0d                	jmp    39b9 <_ZNSt11char_traitsIcE6lengthEPKc+0x30>
#endif
	return __builtin_strlen(__s);
    39ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    39b0:	48 89 c7             	mov    %rax,%rdi
    39b3:	e8 68 f7 ff ff       	call   3120 <strlen@plt>
    39b8:	90                   	nop
      }
    39b9:	c9                   	leave
    39ba:	c3                   	ret
    39bb:	90                   	nop

00000000000039bc <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
    39bc:	55                   	push   %rbp
    39bd:	48 89 e5             	mov    %rsp,%rbp
    39c0:	48 83 ec 20          	sub    $0x20,%rsp
    39c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      std::size_t __i = 0;
    39c8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    39cf:	00 
      while (!eq(__p[__i], char_type()))
    39d0:	eb 05                	jmp    39d7 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x1b>
        ++__i;
    39d2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
      while (!eq(__p[__i], char_type()))
    39d7:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
    39db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    39df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    39e3:	48 01 c2             	add    %rax,%rdx
    39e6:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
    39ea:	48 89 c6             	mov    %rax,%rsi
    39ed:	48 89 d7             	mov    %rdx,%rdi
    39f0:	e8 0d 00 00 00       	call   3a02 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
    39f5:	83 f0 01             	xor    $0x1,%eax
    39f8:	84 c0                	test   %al,%al
    39fa:	75 d6                	jne    39d2 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x16>
      return __i;
    39fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    3a00:	c9                   	leave
    3a01:	c3                   	ret

0000000000003a02 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
    3a02:	55                   	push   %rbp
    3a03:	48 89 e5             	mov    %rsp,%rbp
    3a06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3a0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
    3a0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a12:	0f b6 10             	movzbl (%rax),%edx
    3a15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3a19:	0f b6 00             	movzbl (%rax),%eax
    3a1c:	38 c2                	cmp    %al,%dl
    3a1e:	0f 94 c0             	sete   %al
    3a21:	5d                   	pop    %rbp
    3a22:	c3                   	ret
    3a23:	90                   	nop

0000000000003a24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      basic_string(__sv_wrapper __svw, const _Alloc& __a)
      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
#endif

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
    3a24:	55                   	push   %rbp
    3a25:	48 89 e5             	mov    %rsp,%rbp
    3a28:	48 83 ec 10          	sub    $0x10,%rsp
    3a2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3a30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a34:	48 89 c7             	mov    %rax,%rdi
    3a37:	e8 24 f6 ff ff       	call   3060 <_ZNSaIcED2Ev@plt>
    3a3c:	90                   	nop
    3a3d:	c9                   	leave
    3a3e:	c3                   	ret
    3a3f:	90                   	nop

0000000000003a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
    3a40:	55                   	push   %rbp
    3a41:	48 89 e5             	mov    %rsp,%rbp
    3a44:	53                   	push   %rbx
    3a45:	48 83 ec 38          	sub    $0x38,%rsp
    3a49:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3a4d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    3a51:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      : _M_dataplus(_M_local_data(), __a)
    3a55:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    3a59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3a5d:	48 89 c7             	mov    %rax,%rdi
    3a60:	e8 db f7 ff ff       	call   3240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@plt>
    3a65:	48 89 c1             	mov    %rax,%rcx
    3a68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3a6c:	48 89 c2             	mov    %rax,%rdx
    3a6f:	48 89 ce             	mov    %rcx,%rsi
    3a72:	48 89 df             	mov    %rbx,%rdi
    3a75:	e8 06 f9 ff ff       	call   3380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@plt>
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
    3a7a:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    3a7f:	75 0f                	jne    3a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>
	  std::__throw_logic_error(__N("basic_string: "
    3a81:	48 8d 05 80 fb 00 00 	lea    0xfb80(%rip),%rax        # 13608 <_ZN6__pstl9execution2v1L5unseqE+0x25>
    3a88:	48 89 c7             	mov    %rax,%rdi
    3a8b:	e8 60 f7 ff ff       	call   31f0 <_ZSt19__throw_logic_errorPKc@plt>
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
    3a90:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3a94:	48 89 c7             	mov    %rax,%rdi
    3a97:	e8 ed fe ff ff       	call   3989 <_ZNSt11char_traitsIcE6lengthEPKc>
    3a9c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    3aa0:	48 01 d0             	add    %rdx,%rax
    3aa3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_construct(__s, __end, forward_iterator_tag());
    3aa7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    3aab:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    3aaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ab3:	48 89 ce             	mov    %rcx,%rsi
    3ab6:	48 89 c7             	mov    %rax,%rdi
    3ab9:	e8 66 00 00 00       	call   3b24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
    3abe:	eb 1a                	jmp    3ada <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x9a>
    3ac0:	48 89 c3             	mov    %rax,%rbx
    3ac3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ac7:	48 89 c7             	mov    %rax,%rdi
    3aca:	e8 55 ff ff ff       	call   3a24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
    3acf:	48 89 d8             	mov    %rbx,%rax
    3ad2:	48 89 c7             	mov    %rax,%rdi
    3ad5:	e8 16 fb ff ff       	call   35f0 <_Unwind_Resume@plt>
    3ada:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    3ade:	c9                   	leave
    3adf:	c3                   	ret

0000000000003ae0 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
    3ae0:	55                   	push   %rbp
    3ae1:	48 89 e5             	mov    %rsp,%rbp
    3ae4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3ae8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3aec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3af0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    3af4:	48 89 10             	mov    %rdx,(%rax)
    3af7:	90                   	nop
    3af8:	5d                   	pop    %rbp
    3af9:	c3                   	ret

0000000000003afa <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
    3afa:	55                   	push   %rbp
    3afb:	48 89 e5             	mov    %rsp,%rbp
    3afe:	48 83 ec 10          	sub    $0x10,%rsp
    3b02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3b06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3b0a:	48 8b 00             	mov    (%rax),%rax
    3b0d:	48 85 c0             	test   %rax,%rax
    3b10:	74 0f                	je     3b21 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x27>
    3b12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3b16:	48 8b 00             	mov    (%rax),%rax
    3b19:	48 89 c7             	mov    %rax,%rdi
    3b1c:	e8 2f f9 ff ff       	call   3450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@plt>
    3b21:	90                   	nop
    3b22:	c9                   	leave
    3b23:	c3                   	ret

0000000000003b24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
    3b24:	55                   	push   %rbp
    3b25:	48 89 e5             	mov    %rsp,%rbp
    3b28:	48 83 ec 40          	sub    $0x40,%rsp
    3b2c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3b30:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    3b34:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    3b38:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    3b3c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3b40:	48 89 d6             	mov    %rdx,%rsi
    3b43:	48 89 c7             	mov    %rax,%rdi
    3b46:	e8 c0 00 00 00       	call   3c0b <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
    3b4b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (__dnew > size_type(_S_local_capacity))
    3b4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3b53:	48 83 f8 0f          	cmp    $0xf,%rax
    3b57:	76 3f                	jbe    3b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x74>
	    _M_data(_M_create(__dnew, size_type(0)));
    3b59:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
    3b5d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3b61:	ba 00 00 00 00       	mov    $0x0,%edx
    3b66:	48 89 ce             	mov    %rcx,%rsi
    3b69:	48 89 c7             	mov    %rax,%rdi
    3b6c:	e8 af fa ff ff       	call   3620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
    3b71:	48 89 c2             	mov    %rax,%rdx
    3b74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3b78:	48 89 d6             	mov    %rdx,%rsi
    3b7b:	48 89 c7             	mov    %rax,%rdi
    3b7e:	e8 ed f6 ff ff       	call   3270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@plt>
	    _M_capacity(__dnew);
    3b83:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    3b87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3b8b:	48 89 d6             	mov    %rdx,%rsi
    3b8e:	48 89 c7             	mov    %rax,%rdi
    3b91:	e8 da fa ff ff       	call   3670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@plt>
    3b96:	eb 15                	jmp    3bad <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x89>
    3b98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3b9c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return _M_local_data();
    3ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ba4:	48 89 c7             	mov    %rax,%rdi
    3ba7:	e8 94 f6 ff ff       	call   3240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@plt>
    3bac:	90                   	nop

	  basic_string* _M_guarded;
	} __guard(this);
    3bad:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    3bb1:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    3bb5:	48 89 d6             	mov    %rdx,%rsi
    3bb8:	48 89 c7             	mov    %rax,%rdi
    3bbb:	e8 20 ff ff ff       	call   3ae0 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
    3bc0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3bc4:	48 89 c7             	mov    %rax,%rdi
    3bc7:	e8 04 f8 ff ff       	call   33d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@plt>
    3bcc:	48 89 c1             	mov    %rax,%rcx
    3bcf:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    3bd3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3bd7:	48 89 c6             	mov    %rax,%rsi
    3bda:	48 89 cf             	mov    %rcx,%rdi
    3bdd:	e8 fe f7 ff ff       	call   33e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@plt>

	__guard._M_guarded = 0;
    3be2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    3be9:	00 

	_M_set_length(__dnew);
    3bea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    3bee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3bf2:	48 89 d6             	mov    %rdx,%rsi
    3bf5:	48 89 c7             	mov    %rax,%rdi
    3bf8:	e8 c3 f5 ff ff       	call   31c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@plt>
      }
    3bfd:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    3c01:	48 89 c7             	mov    %rax,%rdi
    3c04:	e8 f1 fe ff ff       	call   3afa <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
    3c09:	c9                   	leave
    3c0a:	c3                   	ret

0000000000003c0b <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    3c0b:	55                   	push   %rbp
    3c0c:	48 89 e5             	mov    %rsp,%rbp
    3c0f:	48 83 ec 10          	sub    $0x10,%rsp
    3c13:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3c17:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
    3c1b:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    3c1f:	48 89 c7             	mov    %rax,%rdi
    3c22:	e8 15 00 00 00       	call   3c3c <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
    3c27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3c2b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    3c2f:	48 89 d6             	mov    %rdx,%rsi
    3c32:	48 89 c7             	mov    %rax,%rdi
    3c35:	e8 0d 00 00 00       	call   3c47 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
    }
    3c3a:	c9                   	leave
    3c3b:	c3                   	ret

0000000000003c3c <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    3c3c:	55                   	push   %rbp
    3c3d:	48 89 e5             	mov    %rsp,%rbp
    3c40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    3c44:	90                   	nop
    3c45:	5d                   	pop    %rbp
    3c46:	c3                   	ret

0000000000003c47 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    3c47:	55                   	push   %rbp
    3c48:	48 89 e5             	mov    %rsp,%rbp
    3c4b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3c4f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
    3c53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3c57:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    }
    3c5b:	5d                   	pop    %rbp
    3c5c:	c3                   	ret

0000000000003c5d <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo>:

namespace vkh {

std::vector<VkCommandBuffer>
allocateCommandBuffers(VkDevice device,
                       const VkCommandBufferAllocateInfo *pAllocateInfo) {
    3c5d:	55                   	push   %rbp
    3c5e:	48 89 e5             	mov    %rsp,%rbp
    3c61:	41 54                	push   %r12
    3c63:	53                   	push   %rbx
    3c64:	48 83 ec 30          	sub    $0x30,%rsp
    3c68:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3c6c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    3c70:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  std::vector<VkCommandBuffer> commandBuffers{
      pAllocateInfo->commandBufferCount};
    3c74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3c78:	8b 40 1c             	mov    0x1c(%rax),%eax
    3c7b:	89 c3                	mov    %eax,%ebx
    3c7d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3c81:	48 89 c7             	mov    %rax,%rdi
    3c84:	e8 13 01 00 00       	call   3d9c <_ZNSaIP17VkCommandBuffer_TEC1Ev>
    3c89:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    3c8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3c91:	48 89 de             	mov    %rbx,%rsi
    3c94:	48 89 c7             	mov    %rax,%rdi
    3c97:	e8 38 01 00 00       	call   3dd4 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>
    3c9c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3ca0:	48 89 c7             	mov    %rax,%rdi
    3ca3:	e8 10 01 00 00       	call   3db8 <_ZNSaIP17VkCommandBuffer_TED1Ev>
  /* If the allocation of any of those command buffers fails, the implementation
  must free all successfully allocated command buffer objects from this
  command, set all entries of the pCommandBuffers array to NULL and return
  the error. */
  if (vkAllocateCommandBuffers(device, pAllocateInfo, commandBuffers.data()) !=
    3ca8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3cac:	48 89 c7             	mov    %rax,%rdi
    3caf:	e8 da 01 00 00       	call   3e8e <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE4dataEv>
    3cb4:	48 89 c2             	mov    %rax,%rdx
    3cb7:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    3cbb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3cbf:	48 89 ce             	mov    %rcx,%rsi
    3cc2:	48 89 c7             	mov    %rax,%rdi
    3cc5:	e8 f6 f5 ff ff       	call   32c0 <vkAllocateCommandBuffers@plt>
    3cca:	85 c0                	test   %eax,%eax
    3ccc:	0f 95 c0             	setne  %al
    3ccf:	84 c0                	test   %al,%al
    3cd1:	74 7f                	je     3d52 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0xf5>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to allocate command buffers.");
    3cd3:	bf 10 00 00 00       	mov    $0x10,%edi
    3cd8:	e8 73 f4 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    3cdd:	48 89 c3             	mov    %rax,%rbx
    3ce0:	48 8d 05 31 ff 00 00 	lea    0xff31(%rip),%rax        # 13c18 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x8>
    3ce7:	48 89 c6             	mov    %rax,%rsi
    3cea:	48 89 df             	mov    %rbx,%rdi
    3ced:	e8 ee f3 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    3cf2:	48 8b 05 af e2 01 00 	mov    0x1e2af(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    3cf9:	48 89 c2             	mov    %rax,%rdx
    3cfc:	48 8d 05 3d e0 01 00 	lea    0x1e03d(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    3d03:	48 89 c6             	mov    %rax,%rsi
    3d06:	48 89 df             	mov    %rbx,%rdi
    3d09:	e8 92 f8 ff ff       	call   35a0 <__cxa_throw@plt>
      pAllocateInfo->commandBufferCount};
    3d0e:	48 89 c3             	mov    %rax,%rbx
    3d11:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3d15:	48 89 c7             	mov    %rax,%rdi
    3d18:	e8 9b 00 00 00       	call   3db8 <_ZNSaIP17VkCommandBuffer_TED1Ev>
    3d1d:	48 89 d8             	mov    %rbx,%rax
    3d20:	48 89 c7             	mov    %rax,%rdi
    3d23:	e8 c8 f8 ff ff       	call   35f0 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to allocate command buffers.");
    3d28:	49 89 c4             	mov    %rax,%r12
    3d2b:	48 89 df             	mov    %rbx,%rdi
    3d2e:	e8 cd f4 ff ff       	call   3200 <__cxa_free_exception@plt>
    3d33:	4c 89 e3             	mov    %r12,%rbx
    3d36:	eb 03                	jmp    3d3b <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0xde>
  }
  return commandBuffers;
}
    3d38:	48 89 c3             	mov    %rax,%rbx
    3d3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3d3f:	48 89 c7             	mov    %rax,%rdi
    3d42:	e8 03 01 00 00       	call   3e4a <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>
    3d47:	48 89 d8             	mov    %rbx,%rax
    3d4a:	48 89 c7             	mov    %rax,%rdi
    3d4d:	e8 9e f8 ff ff       	call   35f0 <_Unwind_Resume@plt>
  return commandBuffers;
    3d52:	90                   	nop
}
    3d53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3d57:	48 83 c4 30          	add    $0x30,%rsp
    3d5b:	5b                   	pop    %rbx
    3d5c:	41 5c                	pop    %r12
    3d5e:	5d                   	pop    %rbp
    3d5f:	c3                   	ret

0000000000003d60 <_ZnwmPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
    3d60:	55                   	push   %rbp
    3d61:	48 89 e5             	mov    %rsp,%rbp
    3d64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3d68:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3d6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3d70:	5d                   	pop    %rbp
    3d71:	c3                   	ret

0000000000003d72 <_ZSt17__size_to_integerm>:
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR long
  __size_to_integer(long __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
    3d72:	55                   	push   %rbp
    3d73:	48 89 e5             	mov    %rsp,%rbp
    3d76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3d7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3d7e:	5d                   	pop    %rbp
    3d7f:	c3                   	ret

0000000000003d80 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
    3d80:	55                   	push   %rbp
    3d81:	48 89 e5             	mov    %rsp,%rbp
    3d84:	48 83 ec 10          	sub    $0x10,%rsp
    3d88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3d8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3d90:	48 89 c7             	mov    %rax,%rdi
    3d93:	e8 20 00 00 00       	call   3db8 <_ZNSaIP17VkCommandBuffer_TED1Ev>
    3d98:	90                   	nop
    3d99:	c9                   	leave
    3d9a:	c3                   	ret
    3d9b:	90                   	nop

0000000000003d9c <_ZNSaIP17VkCommandBuffer_TEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
    3d9c:	55                   	push   %rbp
    3d9d:	48 89 e5             	mov    %rsp,%rbp
    3da0:	48 83 ec 10          	sub    $0x10,%rsp
    3da4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3da8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3dac:	48 89 c7             	mov    %rax,%rdi
    3daf:	e8 4c 01 00 00       	call   3f00 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1Ev>
    3db4:	90                   	nop
    3db5:	c9                   	leave
    3db6:	c3                   	ret
    3db7:	90                   	nop

0000000000003db8 <_ZNSaIP17VkCommandBuffer_TED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
    3db8:	55                   	push   %rbp
    3db9:	48 89 e5             	mov    %rsp,%rbp
    3dbc:	48 83 ec 10          	sub    $0x10,%rsp
    3dc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3dc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3dc8:	48 89 c7             	mov    %rax,%rdi
    3dcb:	e8 3c 01 00 00       	call   3f0c <_ZNSt15__new_allocatorIP17VkCommandBuffer_TED1Ev>
    3dd0:	90                   	nop
    3dd1:	c9                   	leave
    3dd2:	c3                   	ret
    3dd3:	90                   	nop

0000000000003dd4 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>:
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      _GLIBCXX20_CONSTEXPR
      vector(size_type __n, const allocator_type& __a = allocator_type())
    3dd4:	55                   	push   %rbp
    3dd5:	48 89 e5             	mov    %rsp,%rbp
    3dd8:	53                   	push   %rbx
    3dd9:	48 83 ec 28          	sub    $0x28,%rsp
    3ddd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    3de1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    3de5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    3de9:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    3ded:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    3df1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3df5:	48 89 d6             	mov    %rdx,%rsi
    3df8:	48 89 c7             	mov    %rax,%rdi
    3dfb:	e8 17 01 00 00       	call   3f17 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE17_S_check_init_lenEmRKS2_>
    3e00:	48 89 c1             	mov    %rax,%rcx
    3e03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e07:	48 89 c2             	mov    %rax,%rdx
    3e0a:	48 89 ce             	mov    %rcx,%rsi
    3e0d:	48 89 df             	mov    %rbx,%rdi
    3e10:	e8 63 01 00 00       	call   3f78 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
    3e15:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    3e19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3e1d:	48 89 d6             	mov    %rdx,%rsi
    3e20:	48 89 c7             	mov    %rax,%rdi
    3e23:	e8 ae 01 00 00       	call   3fd6 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE21_M_default_initializeEm>
    3e28:	eb 1a                	jmp    3e44 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_+0x70>
    3e2a:	48 89 c3             	mov    %rax,%rbx
    3e2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3e31:	48 89 c7             	mov    %rax,%rdi
    3e34:	e8 79 00 00 00       	call   3eb2 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EED1Ev>
    3e39:	48 89 d8             	mov    %rbx,%rax
    3e3c:	48 89 c7             	mov    %rax,%rdi
    3e3f:	e8 ac f7 ff ff       	call   35f0 <_Unwind_Resume@plt>
    3e44:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    3e48:	c9                   	leave
    3e49:	c3                   	ret

0000000000003e4a <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
    3e4a:	55                   	push   %rbp
    3e4b:	48 89 e5             	mov    %rsp,%rbp
    3e4e:	48 83 ec 10          	sub    $0x10,%rsp
    3e52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
    3e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e5a:	48 89 c7             	mov    %rax,%rdi
    3e5d:	e8 b4 01 00 00       	call   4016 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
    3e62:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    3e65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e69:	48 8b 48 08          	mov    0x8(%rax),%rcx
    3e6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e71:	48 8b 00             	mov    (%rax),%rax
    3e74:	48 89 ce             	mov    %rcx,%rsi
    3e77:	48 89 c7             	mov    %rax,%rdi
    3e7a:	e8 a5 01 00 00       	call   4024 <_ZSt8_DestroyIPP17VkCommandBuffer_TS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
    3e7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e83:	48 89 c7             	mov    %rax,%rdi
    3e86:	e8 27 00 00 00       	call   3eb2 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EED1Ev>
    3e8b:	90                   	nop
    3e8c:	c9                   	leave
    3e8d:	c3                   	ret

0000000000003e8e <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE4dataEv>:
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      _Tp*
      data() _GLIBCXX_NOEXCEPT
    3e8e:	55                   	push   %rbp
    3e8f:	48 89 e5             	mov    %rsp,%rbp
    3e92:	48 83 ec 10          	sub    $0x10,%rsp
    3e96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    3e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e9e:	48 8b 10             	mov    (%rax),%rdx
    3ea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ea5:	48 89 d6             	mov    %rdx,%rsi
    3ea8:	48 89 c7             	mov    %rax,%rdi
    3eab:	e8 9e 01 00 00       	call   404e <_ZNKSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
    3eb0:	c9                   	leave
    3eb1:	c3                   	ret

0000000000003eb2 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    3eb2:	55                   	push   %rbp
    3eb3:	48 89 e5             	mov    %rsp,%rbp
    3eb6:	48 83 ec 10          	sub    $0x10,%rsp
    3eba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    3ebe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ec2:	48 8b 50 10          	mov    0x10(%rax),%rdx
    3ec6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3eca:	48 8b 00             	mov    (%rax),%rax
    3ecd:	48 29 c2             	sub    %rax,%rdx
    3ed0:	48 89 d0             	mov    %rdx,%rax
    3ed3:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    3ed7:	48 89 c2             	mov    %rax,%rdx
    3eda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ede:	48 8b 08             	mov    (%rax),%rcx
    3ee1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ee5:	48 89 ce             	mov    %rcx,%rsi
    3ee8:	48 89 c7             	mov    %rax,%rdi
    3eeb:	e8 96 01 00 00       	call   4086 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13_M_deallocateEPS1_m>
      }
    3ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ef4:	48 89 c7             	mov    %rax,%rdi
    3ef7:	e8 84 fe ff ff       	call   3d80 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implD1Ev>
    3efc:	90                   	nop
    3efd:	c9                   	leave
    3efe:	c3                   	ret
    3eff:	90                   	nop

0000000000003f00 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    3f00:	55                   	push   %rbp
    3f01:	48 89 e5             	mov    %rsp,%rbp
    3f04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3f08:	90                   	nop
    3f09:	5d                   	pop    %rbp
    3f0a:	c3                   	ret
    3f0b:	90                   	nop

0000000000003f0c <_ZNSt15__new_allocatorIP17VkCommandBuffer_TED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    3f0c:	55                   	push   %rbp
    3f0d:	48 89 e5             	mov    %rsp,%rbp
    3f10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3f14:	90                   	nop
    3f15:	5d                   	pop    %rbp
    3f16:	c3                   	ret

0000000000003f17 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
    3f17:	55                   	push   %rbp
    3f18:	48 89 e5             	mov    %rsp,%rbp
    3f1b:	53                   	push   %rbx
    3f1c:	48 83 ec 28          	sub    $0x28,%rsp
    3f20:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3f24:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    3f28:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    3f2c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3f30:	48 89 d6             	mov    %rdx,%rsi
    3f33:	48 89 c7             	mov    %rax,%rdi
    3f36:	e8 25 01 00 00       	call   4060 <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>
    3f3b:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3f3f:	48 89 c7             	mov    %rax,%rdi
    3f42:	e8 74 01 00 00       	call   40bb <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_S_max_sizeERKS2_>
    3f47:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    3f4b:	0f 92 c3             	setb   %bl
    3f4e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3f52:	48 89 c7             	mov    %rax,%rdi
    3f55:	e8 5e fe ff ff       	call   3db8 <_ZNSaIP17VkCommandBuffer_TED1Ev>
    3f5a:	84 db                	test   %bl,%bl
    3f5c:	74 0f                	je     3f6d <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
    3f5e:	48 8d 05 db fc 00 00 	lea    0xfcdb(%rip),%rax        # 13c40 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x30>
    3f65:	48 89 c7             	mov    %rax,%rdi
    3f68:	e8 f3 f1 ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
    3f6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    3f71:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    3f75:	c9                   	leave
    3f76:	c3                   	ret
    3f77:	90                   	nop

0000000000003f78 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    3f78:	55                   	push   %rbp
    3f79:	48 89 e5             	mov    %rsp,%rbp
    3f7c:	53                   	push   %rbx
    3f7d:	48 83 ec 28          	sub    $0x28,%rsp
    3f81:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    3f85:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    3f89:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    3f8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3f91:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    3f95:	48 89 d6             	mov    %rdx,%rsi
    3f98:	48 89 c7             	mov    %rax,%rdi
    3f9b:	e8 5e 01 00 00       	call   40fe <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
    3fa0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    3fa4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3fa8:	48 89 d6             	mov    %rdx,%rsi
    3fab:	48 89 c7             	mov    %rax,%rdi
    3fae:	e8 7d 01 00 00       	call   4130 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_M_create_storageEm>
    3fb3:	eb 1a                	jmp    3fcf <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_+0x57>
    3fb5:	48 89 c3             	mov    %rax,%rbx
    3fb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3fbc:	48 89 c7             	mov    %rax,%rdi
    3fbf:	e8 bc fd ff ff       	call   3d80 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implD1Ev>
    3fc4:	48 89 d8             	mov    %rbx,%rax
    3fc7:	48 89 c7             	mov    %rax,%rdi
    3fca:	e8 21 f6 ff ff       	call   35f0 <_Unwind_Resume@plt>
    3fcf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    3fd3:	c9                   	leave
    3fd4:	c3                   	ret
    3fd5:	90                   	nop

0000000000003fd6 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    3fd6:	55                   	push   %rbp
    3fd7:	48 89 e5             	mov    %rsp,%rbp
    3fda:	48 83 ec 10          	sub    $0x10,%rsp
    3fde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3fe2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    3fe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3fea:	48 89 c7             	mov    %rax,%rdi
    3fed:	e8 24 00 00 00       	call   4016 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
    3ff2:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    3ff5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ff9:	48 8b 00             	mov    (%rax),%rax
    3ffc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4000:	48 89 ce             	mov    %rcx,%rsi
    4003:	48 89 c7             	mov    %rax,%rdi
    4006:	e8 7b 01 00 00       	call   4186 <_ZSt27__uninitialized_default_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    400b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    400f:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    4013:	90                   	nop
    4014:	c9                   	leave
    4015:	c3                   	ret

0000000000004016 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    4016:	55                   	push   %rbp
    4017:	48 89 e5             	mov    %rsp,%rbp
    401a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    401e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4022:	5d                   	pop    %rbp
    4023:	c3                   	ret

0000000000004024 <_ZSt8_DestroyIPP17VkCommandBuffer_TS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    4024:	55                   	push   %rbp
    4025:	48 89 e5             	mov    %rsp,%rbp
    4028:	48 83 ec 20          	sub    $0x20,%rsp
    402c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4030:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4034:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    4038:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    403c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4040:	48 89 d6             	mov    %rdx,%rsi
    4043:	48 89 c7             	mov    %rax,%rdi
    4046:	e8 64 01 00 00       	call   41af <_ZSt8_DestroyIPP17VkCommandBuffer_TEvT_S3_>
    }
    404b:	90                   	nop
    404c:	c9                   	leave
    404d:	c3                   	ret

000000000000404e <_ZNKSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
#endif

      template<typename _Up>
	_GLIBCXX20_CONSTEXPR
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    404e:	55                   	push   %rbp
    404f:	48 89 e5             	mov    %rsp,%rbp
    4052:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4056:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    405a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    405e:	5d                   	pop    %rbp
    405f:	c3                   	ret

0000000000004060 <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    4060:	55                   	push   %rbp
    4061:	48 89 e5             	mov    %rsp,%rbp
    4064:	48 83 ec 10          	sub    $0x10,%rsp
    4068:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    406c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    4070:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4074:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4078:	48 89 d6             	mov    %rdx,%rsi
    407b:	48 89 c7             	mov    %rax,%rdi
    407e:	e8 53 01 00 00       	call   41d6 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1ERKS2_>
    4083:	90                   	nop
    4084:	c9                   	leave
    4085:	c3                   	ret

0000000000004086 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
    4086:	55                   	push   %rbp
    4087:	48 89 e5             	mov    %rsp,%rbp
    408a:	48 83 ec 20          	sub    $0x20,%rsp
    408e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4092:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4096:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    409a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    409f:	74 17                	je     40b8 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    40a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    40a5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    40a9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    40ad:	48 89 ce             	mov    %rcx,%rsi
    40b0:	48 89 c7             	mov    %rax,%rdi
    40b3:	e8 2d 01 00 00       	call   41e5 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE10deallocateERS2_PS1_m>
      }
    40b8:	90                   	nop
    40b9:	c9                   	leave
    40ba:	c3                   	ret

00000000000040bb <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    40bb:	55                   	push   %rbp
    40bc:	48 89 e5             	mov    %rsp,%rbp
    40bf:	48 83 ec 20          	sub    $0x20,%rsp
    40c3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    40c7:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    40ce:	ff ff 0f 
    40d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    40d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    40d9:	48 89 c7             	mov    %rax,%rdi
    40dc:	e8 32 01 00 00       	call   4213 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8max_sizeERKS2_>
    40e1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    40e5:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    40e9:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    40ed:	48 89 d6             	mov    %rdx,%rsi
    40f0:	48 89 c7             	mov    %rax,%rdi
    40f3:	e8 35 01 00 00       	call   422d <_ZSt3minImERKT_S2_S2_>
    40f8:	48 8b 00             	mov    (%rax),%rax
      }
    40fb:	c9                   	leave
    40fc:	c3                   	ret
    40fd:	90                   	nop

00000000000040fe <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    40fe:	55                   	push   %rbp
    40ff:	48 89 e5             	mov    %rsp,%rbp
    4102:	48 83 ec 10          	sub    $0x10,%rsp
    4106:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    410a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    410e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4112:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4116:	48 89 d6             	mov    %rdx,%rsi
    4119:	48 89 c7             	mov    %rax,%rdi
    411c:	e8 3f ff ff ff       	call   4060 <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>
    4121:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4125:	48 89 c7             	mov    %rax,%rdi
    4128:	e8 2b 01 00 00       	call   4258 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    412d:	90                   	nop
    412e:	c9                   	leave
    412f:	c3                   	ret

0000000000004130 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    4130:	55                   	push   %rbp
    4131:	48 89 e5             	mov    %rsp,%rbp
    4134:	48 83 ec 10          	sub    $0x10,%rsp
    4138:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    413c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    4140:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4144:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4148:	48 89 d6             	mov    %rdx,%rsi
    414b:	48 89 c7             	mov    %rax,%rdi
    414e:	e8 33 01 00 00       	call   4286 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm>
    4153:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4157:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    415a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    415e:	48 8b 10             	mov    (%rax),%rdx
    4161:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4165:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    4169:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    416d:	48 8b 00             	mov    (%rax),%rax
    4170:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4174:	48 c1 e2 03          	shl    $0x3,%rdx
    4178:	48 01 c2             	add    %rax,%rdx
    417b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    417f:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    4183:	90                   	nop
    4184:	c9                   	leave
    4185:	c3                   	ret

0000000000004186 <_ZSt27__uninitialized_default_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RSaIT1_E>:
  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    4186:	55                   	push   %rbp
    4187:	48 89 e5             	mov    %rsp,%rbp
    418a:	48 83 ec 20          	sub    $0x20,%rsp
    418e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4192:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4196:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
    419a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    419e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    41a2:	48 89 d6             	mov    %rdx,%rsi
    41a5:	48 89 c7             	mov    %rax,%rdi
    41a8:	e8 0c 01 00 00       	call   42b9 <_ZSt25__uninitialized_default_nIPP17VkCommandBuffer_TmET_S3_T0_>
    41ad:	c9                   	leave
    41ae:	c3                   	ret

00000000000041af <_ZSt8_DestroyIPP17VkCommandBuffer_TEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    41af:	55                   	push   %rbp
    41b0:	48 89 e5             	mov    %rsp,%rbp
    41b3:	48 83 ec 10          	sub    $0x10,%rsp
    41b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    41bb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
    41bf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    41c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    41c7:	48 89 d6             	mov    %rdx,%rsi
    41ca:	48 89 c7             	mov    %rax,%rdi
    41cd:	e8 10 01 00 00       	call   42e2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_>
    }
    41d2:	90                   	nop
    41d3:	c9                   	leave
    41d4:	c3                   	ret
    41d5:	90                   	nop

00000000000041d6 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    41d6:	55                   	push   %rbp
    41d7:	48 89 e5             	mov    %rsp,%rbp
    41da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    41de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    41e2:	90                   	nop
    41e3:	5d                   	pop    %rbp
    41e4:	c3                   	ret

00000000000041e5 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    41e5:	55                   	push   %rbp
    41e6:	48 89 e5             	mov    %rsp,%rbp
    41e9:	48 83 ec 20          	sub    $0x20,%rsp
    41ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    41f1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    41f5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    41f9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    41fd:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4201:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4205:	48 89 ce             	mov    %rcx,%rsi
    4208:	48 89 c7             	mov    %rax,%rdi
    420b:	e8 e2 00 00 00       	call   42f2 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE10deallocateEPS1_m>
    4210:	90                   	nop
    4211:	c9                   	leave
    4212:	c3                   	ret

0000000000004213 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    4213:	55                   	push   %rbp
    4214:	48 89 e5             	mov    %rsp,%rbp
    4217:	48 83 ec 10          	sub    $0x10,%rsp
    421b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    421f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4223:	48 89 c7             	mov    %rax,%rdi
    4226:	e8 f9 00 00 00       	call   4324 <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE8max_sizeEv>
      }
    422b:	c9                   	leave
    422c:	c3                   	ret

000000000000422d <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
    422d:	55                   	push   %rbp
    422e:	48 89 e5             	mov    %rsp,%rbp
    4231:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4235:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__b < __a)
    4239:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    423d:	48 8b 10             	mov    (%rax),%rdx
    4240:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4244:	48 8b 00             	mov    (%rax),%rax
    4247:	48 39 c2             	cmp    %rax,%rdx
    424a:	73 06                	jae    4252 <_ZSt3minImERKT_S2_S2_+0x25>
	return __b;
    424c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4250:	eb 04                	jmp    4256 <_ZSt3minImERKT_S2_S2_+0x29>
      return __a;
    4252:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    4256:	5d                   	pop    %rbp
    4257:	c3                   	ret

0000000000004258 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    4258:	55                   	push   %rbp
    4259:	48 89 e5             	mov    %rsp,%rbp
    425c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    4260:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4264:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    426b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    426f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    4276:	00 
    4277:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    427b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    4282:	00 
	{ }
    4283:	90                   	nop
    4284:	5d                   	pop    %rbp
    4285:	c3                   	ret

0000000000004286 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    4286:	55                   	push   %rbp
    4287:	48 89 e5             	mov    %rsp,%rbp
    428a:	48 83 ec 10          	sub    $0x10,%rsp
    428e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4292:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    4296:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    429b:	74 15                	je     42b2 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm+0x2c>
    429d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    42a1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    42a5:	48 89 d6             	mov    %rdx,%rsi
    42a8:	48 89 c7             	mov    %rax,%rdi
    42ab:	e8 8e 00 00 00       	call   433e <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m>
    42b0:	eb 05                	jmp    42b7 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm+0x31>
    42b2:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    42b7:	c9                   	leave
    42b8:	c3                   	ret

00000000000042b9 <_ZSt25__uninitialized_default_nIPP17VkCommandBuffer_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    42b9:	55                   	push   %rbp
    42ba:	48 89 e5             	mov    %rsp,%rbp
    42bd:	48 83 ec 20          	sub    $0x20,%rsp
    42c1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    42c5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    42c9:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    42cd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    42d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    42d5:	48 89 d6             	mov    %rdx,%rsi
    42d8:	48 89 c7             	mov    %rax,%rdi
    42db:	e8 88 00 00 00       	call   4368 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP17VkCommandBuffer_TmEET_S5_T0_>
    }
    42e0:	c9                   	leave
    42e1:	c3                   	ret

00000000000042e2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    42e2:	55                   	push   %rbp
    42e3:	48 89 e5             	mov    %rsp,%rbp
    42e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    42ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    42ee:	90                   	nop
    42ef:	5d                   	pop    %rbp
    42f0:	c3                   	ret
    42f1:	90                   	nop

00000000000042f2 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE10deallocateEPS1_m>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    42f2:	55                   	push   %rbp
    42f3:	48 89 e5             	mov    %rsp,%rbp
    42f6:	48 83 ec 20          	sub    $0x20,%rsp
    42fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    42fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4302:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    4306:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    430a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    4311:	00 
    4312:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4316:	48 89 d6             	mov    %rdx,%rsi
    4319:	48 89 c7             	mov    %rax,%rdi
    431c:	e8 ff ef ff ff       	call   3320 <_ZdlPvm@plt>
      }
    4321:	c9                   	leave
    4322:	c3                   	ret
    4323:	90                   	nop

0000000000004324 <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE8max_sizeEv>:
#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
    4324:	55                   	push   %rbp
    4325:	48 89 e5             	mov    %rsp,%rbp
    4328:	48 83 ec 10          	sub    $0x10,%rsp
    432c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    4330:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4334:	48 89 c7             	mov    %rax,%rdi
    4337:	e8 8a 00 00 00       	call   43c6 <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE11_M_max_sizeEv>
    433c:	c9                   	leave
    433d:	c3                   	ret

000000000000433e <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
    433e:	55                   	push   %rbp
    433f:	48 89 e5             	mov    %rsp,%rbp
    4342:	48 83 ec 10          	sub    $0x10,%rsp
    4346:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    434a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    434e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4352:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4356:	ba 00 00 00 00       	mov    $0x0,%edx
    435b:	48 89 ce             	mov    %rcx,%rsi
    435e:	48 89 c7             	mov    %rax,%rdi
    4361:	e8 74 00 00 00       	call   43da <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv>
    4366:	c9                   	leave
    4367:	c3                   	ret

0000000000004368 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP17VkCommandBuffer_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    4368:	55                   	push   %rbp
    4369:	48 89 e5             	mov    %rsp,%rbp
    436c:	48 83 ec 20          	sub    $0x20,%rsp
    4370:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4374:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    4378:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    437d:	74 40                	je     43bf <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP17VkCommandBuffer_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
    437f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4383:	48 89 c7             	mov    %rax,%rdi
    4386:	e8 b0 00 00 00       	call   443b <_ZSt11__addressofIP17VkCommandBuffer_TEPT_RS2_>
    438b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    438f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4393:	48 89 c7             	mov    %rax,%rdi
    4396:	e8 ae 00 00 00       	call   4449 <_ZSt10_ConstructIP17VkCommandBuffer_TJEEvPT_DpOT0_>
	      ++__first;
    439b:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    43a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    43a4:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    43a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    43ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    43b0:	48 89 ce             	mov    %rcx,%rsi
    43b3:	48 89 c7             	mov    %rax,%rdi
    43b6:	e8 b5 00 00 00       	call   4470 <_ZSt6fill_nIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_>
    43bb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    43bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    43c3:	c9                   	leave
    43c4:	c3                   	ret
    43c5:	90                   	nop

00000000000043c6 <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    43c6:	55                   	push   %rbp
    43c7:	48 89 e5             	mov    %rsp,%rbp
    43ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    43ce:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    43d5:	ff ff 0f 
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
    43d8:	5d                   	pop    %rbp
    43d9:	c3                   	ret

00000000000043da <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    43da:	55                   	push   %rbp
    43db:	48 89 e5             	mov    %rsp,%rbp
    43de:	48 83 ec 20          	sub    $0x20,%rsp
    43e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    43e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    43ea:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    43ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    43f2:	48 89 c7             	mov    %rax,%rdi
    43f5:	e8 cc ff ff ff       	call   43c6 <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE11_M_max_sizeEv>
    43fa:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    43fe:	0f 92 c0             	setb   %al
    4401:	0f b6 c0             	movzbl %al,%eax
    4404:	48 85 c0             	test   %rax,%rax
    4407:	0f 95 c0             	setne  %al
    440a:	84 c0                	test   %al,%al
    440c:	74 1a                	je     4428 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    440e:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    4415:	ff ff 1f 
    4418:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    441c:	73 05                	jae    4423 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    441e:	e8 0d ee ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    4423:	e8 98 ec ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    4428:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    442c:	48 c1 e0 03          	shl    $0x3,%rax
    4430:	48 89 c7             	mov    %rax,%rdi
    4433:	e8 d8 ee ff ff       	call   3310 <_Znwm@plt>
    4438:	90                   	nop
      }
    4439:	c9                   	leave
    443a:	c3                   	ret

000000000000443b <_ZSt11__addressofIP17VkCommandBuffer_TEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    443b:	55                   	push   %rbp
    443c:	48 89 e5             	mov    %rsp,%rbp
    443f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    4443:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4447:	5d                   	pop    %rbp
    4448:	c3                   	ret

0000000000004449 <_ZSt10_ConstructIP17VkCommandBuffer_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    4449:	55                   	push   %rbp
    444a:	48 89 e5             	mov    %rsp,%rbp
    444d:	48 83 ec 10          	sub    $0x10,%rsp
    4451:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    4455:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4459:	48 89 c6             	mov    %rax,%rsi
    445c:	bf 08 00 00 00       	mov    $0x8,%edi
    4461:	e8 fa f8 ff ff       	call   3d60 <_ZnwmPv>
    4466:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
    446d:	90                   	nop
    446e:	c9                   	leave
    446f:	c3                   	ret

0000000000004470 <_ZSt6fill_nIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    4470:	55                   	push   %rbp
    4471:	48 89 e5             	mov    %rsp,%rbp
    4474:	48 83 ec 20          	sub    $0x20,%rsp
    4478:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    447c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4480:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
			       std::__iterator_category(__first));
    4484:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    4488:	48 89 c7             	mov    %rax,%rdi
    448b:	e8 24 00 00 00       	call   44b4 <_ZSt19__iterator_categoryIPP17VkCommandBuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    4490:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4494:	48 89 c7             	mov    %rax,%rdi
    4497:	e8 d6 f8 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    449c:	48 89 c1             	mov    %rax,%rcx
    449f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    44a7:	48 89 ce             	mov    %rcx,%rsi
    44aa:	48 89 c7             	mov    %rax,%rdi
    44ad:	e8 0d 00 00 00       	call   44bf <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
    44b2:	c9                   	leave
    44b3:	c3                   	ret

00000000000044b4 <_ZSt19__iterator_categoryIPP17VkCommandBuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
    44b4:	55                   	push   %rbp
    44b5:	48 89 e5             	mov    %rsp,%rbp
    44b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    44bc:	90                   	nop
    44bd:	5d                   	pop    %rbp
    44be:	c3                   	ret

00000000000044bf <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    44bf:	55                   	push   %rbp
    44c0:	48 89 e5             	mov    %rsp,%rbp
    44c3:	48 83 ec 20          	sub    $0x20,%rsp
    44c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    44cb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    44cf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    44d3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    44d8:	75 06                	jne    44e0 <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    44da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44de:	eb 3a                	jmp    451a <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    44e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    44e4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    44eb:	00 
    44ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44f0:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    44f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    44f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44fc:	48 89 ce             	mov    %rcx,%rsi
    44ff:	48 89 c7             	mov    %rax,%rdi
    4502:	e8 15 00 00 00       	call   451c <_ZSt8__fill_aIPP17VkCommandBuffer_TS1_EvT_S3_RKT0_>
      return __first + __n;
    4507:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    450b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    4512:	00 
    4513:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4517:	48 01 d0             	add    %rdx,%rax
    }
    451a:	c9                   	leave
    451b:	c3                   	ret

000000000000451c <_ZSt8__fill_aIPP17VkCommandBuffer_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    451c:	55                   	push   %rbp
    451d:	48 89 e5             	mov    %rsp,%rbp
    4520:	48 83 ec 20          	sub    $0x20,%rsp
    4524:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4528:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    452c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    4530:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    4534:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4538:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    453c:	48 89 ce             	mov    %rcx,%rsi
    453f:	48 89 c7             	mov    %rax,%rdi
    4542:	e8 03 00 00 00       	call   454a <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
    4547:	90                   	nop
    4548:	c9                   	leave
    4549:	c3                   	ret

000000000000454a <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    454a:	55                   	push   %rbp
    454b:	48 89 e5             	mov    %rsp,%rbp
    454e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4552:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4556:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
    455a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    455e:	48 8b 00             	mov    (%rax),%rax
    4561:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
    4565:	eb 10                	jmp    4577 <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
    4567:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    456b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    456f:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    4572:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    4577:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    457b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    457f:	75 e6                	jne    4567 <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
    4581:	90                   	nop
    4582:	90                   	nop
    4583:	5d                   	pop    %rbp
    4584:	c3                   	ret

0000000000004585 <_ZN3vkh12createWindowEiiPKcP11GLFWmonitorP10GLFWwindow>:
#include "create_object.hpp"

namespace vkh {
GLFWwindow *createWindow(int width, int height, const char *title,
                         GLFWmonitor *monitor, GLFWwindow *share) {
    4585:	55                   	push   %rbp
    4586:	48 89 e5             	mov    %rsp,%rbp
    4589:	48 83 ec 20          	sub    $0x20,%rsp
    458d:	89 7d fc             	mov    %edi,-0x4(%rbp)
    4590:	89 75 f8             	mov    %esi,-0x8(%rbp)
    4593:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    4597:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    459b:	4c 89 45 e0          	mov    %r8,-0x20(%rbp)
  glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
    459f:	be 00 00 00 00       	mov    $0x0,%esi
    45a4:	bf 01 20 02 00       	mov    $0x22001,%edi
    45a9:	e8 d2 ec ff ff       	call   3280 <glfwWindowHint@plt>
  glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
    45ae:	be 00 00 00 00       	mov    $0x0,%esi
    45b3:	bf 03 00 02 00       	mov    $0x20003,%edi
    45b8:	e8 c3 ec ff ff       	call   3280 <glfwWindowHint@plt>
  return glfwCreateWindow(width, height, title, monitor, share);
    45bd:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    45c1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    45c5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    45c9:	8b 75 f8             	mov    -0x8(%rbp),%esi
    45cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
    45cf:	49 89 f8             	mov    %rdi,%r8
    45d2:	89 c7                	mov    %eax,%edi
    45d4:	e8 77 ef ff ff       	call   3550 <glfwCreateWindow@plt>
}
    45d9:	c9                   	leave
    45da:	c3                   	ret

00000000000045db <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks>:

VkInstance createInstance(const VkInstanceCreateInfo *pCreateInfo,
                          const VkAllocationCallbacks *pAllocator) {
    45db:	55                   	push   %rbp
    45dc:	48 89 e5             	mov    %rsp,%rbp
    45df:	41 54                	push   %r12
    45e1:	53                   	push   %rbx
    45e2:	48 83 ec 20          	sub    $0x20,%rsp
    45e6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    45ea:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  VkInstance instance;
  if (vkCreateInstance(pCreateInfo, pAllocator, &instance) != VK_SUCCESS) {
    45ee:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    45f2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    45f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    45fa:	48 89 ce             	mov    %rcx,%rsi
    45fd:	48 89 c7             	mov    %rax,%rdi
    4600:	e8 3b ee ff ff       	call   3440 <vkCreateInstance@plt>
    4605:	85 c0                	test   %eax,%eax
    4607:	0f 95 c0             	setne  %al
    460a:	84 c0                	test   %al,%al
    460c:	74 3b                	je     4649 <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks+0x6e>
    throw std::runtime_error("Failed to create an instance.");
    460e:	bf 10 00 00 00       	mov    $0x10,%edi
    4613:	e8 38 eb ff ff       	call   3150 <__cxa_allocate_exception@plt>
    4618:	48 89 c3             	mov    %rax,%rbx
    461b:	48 8d 05 2e fc 00 00 	lea    0xfc2e(%rip),%rax        # 14250 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x8>
    4622:	48 89 c6             	mov    %rax,%rsi
    4625:	48 89 df             	mov    %rbx,%rdi
    4628:	e8 b3 ea ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    462d:	48 8b 05 74 d9 01 00 	mov    0x1d974(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    4634:	48 89 c2             	mov    %rax,%rdx
    4637:	48 8d 05 02 d7 01 00 	lea    0x1d702(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    463e:	48 89 c6             	mov    %rax,%rsi
    4641:	48 89 df             	mov    %rbx,%rdi
    4644:	e8 57 ef ff ff       	call   35a0 <__cxa_throw@plt>
  }
  return instance;
    4649:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    464d:	eb 16                	jmp    4665 <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks+0x8a>
    throw std::runtime_error("Failed to create an instance.");
    464f:	49 89 c4             	mov    %rax,%r12
    4652:	48 89 df             	mov    %rbx,%rdi
    4655:	e8 a6 eb ff ff       	call   3200 <__cxa_free_exception@plt>
    465a:	4c 89 e0             	mov    %r12,%rax
    465d:	48 89 c7             	mov    %rax,%rdi
    4660:	e8 8b ef ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    4665:	48 83 c4 20          	add    $0x20,%rsp
    4669:	5b                   	pop    %rbx
    466a:	41 5c                	pop    %r12
    466c:	5d                   	pop    %rbp
    466d:	c3                   	ret

000000000000466e <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks>:

VkDevice createDevice(VkPhysicalDevice physicalDevice,
                      const VkDeviceCreateInfo *pCreateInfo,
                      const VkAllocationCallbacks *pAllocator) {
    466e:	55                   	push   %rbp
    466f:	48 89 e5             	mov    %rsp,%rbp
    4672:	41 54                	push   %r12
    4674:	53                   	push   %rbx
    4675:	48 83 ec 30          	sub    $0x30,%rsp
    4679:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    467d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4681:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkDevice device;
  if (vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, &device) !=
    4685:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    4689:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    468d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    4691:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4695:	48 89 c7             	mov    %rax,%rdi
    4698:	e8 83 ee ff ff       	call   3520 <vkCreateDevice@plt>
    469d:	85 c0                	test   %eax,%eax
    469f:	0f 95 c0             	setne  %al
    46a2:	84 c0                	test   %al,%al
    46a4:	74 3b                	je     46e1 <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks+0x73>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create logical device.");
    46a6:	bf 10 00 00 00       	mov    $0x10,%edi
    46ab:	e8 a0 ea ff ff       	call   3150 <__cxa_allocate_exception@plt>
    46b0:	48 89 c3             	mov    %rax,%rbx
    46b3:	48 8d 05 b6 fb 00 00 	lea    0xfbb6(%rip),%rax        # 14270 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x28>
    46ba:	48 89 c6             	mov    %rax,%rsi
    46bd:	48 89 df             	mov    %rbx,%rdi
    46c0:	e8 1b ea ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    46c5:	48 8b 05 dc d8 01 00 	mov    0x1d8dc(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    46cc:	48 89 c2             	mov    %rax,%rdx
    46cf:	48 8d 05 6a d6 01 00 	lea    0x1d66a(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    46d6:	48 89 c6             	mov    %rax,%rsi
    46d9:	48 89 df             	mov    %rbx,%rdi
    46dc:	e8 bf ee ff ff       	call   35a0 <__cxa_throw@plt>
  }
  return device;
    46e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    46e5:	eb 16                	jmp    46fd <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create logical device.");
    46e7:	49 89 c4             	mov    %rax,%r12
    46ea:	48 89 df             	mov    %rbx,%rdi
    46ed:	e8 0e eb ff ff       	call   3200 <__cxa_free_exception@plt>
    46f2:	4c 89 e0             	mov    %r12,%rax
    46f5:	48 89 c7             	mov    %rax,%rdi
    46f8:	e8 f3 ee ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    46fd:	48 83 c4 30          	add    $0x30,%rsp
    4701:	5b                   	pop    %rbx
    4702:	41 5c                	pop    %r12
    4704:	5d                   	pop    %rbp
    4705:	c3                   	ret

0000000000004706 <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks>:

VkSurfaceKHR createSurface(VkInstance instance, GLFWwindow *window,
                           const VkAllocationCallbacks *allocator) {
    4706:	55                   	push   %rbp
    4707:	48 89 e5             	mov    %rsp,%rbp
    470a:	41 54                	push   %r12
    470c:	53                   	push   %rbx
    470d:	48 83 ec 30          	sub    $0x30,%rsp
    4711:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4715:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4719:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkSurfaceKHR surface;
  if (glfwCreateWindowSurface(instance, window, allocator, &surface) !=
    471d:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    4721:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    4725:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    4729:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    472d:	48 89 c7             	mov    %rax,%rdi
    4730:	e8 0b ee ff ff       	call   3540 <glfwCreateWindowSurface@plt>
    4735:	85 c0                	test   %eax,%eax
    4737:	0f 95 c0             	setne  %al
    473a:	84 c0                	test   %al,%al
    473c:	74 3b                	je     4779 <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks+0x73>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create window surface.");
    473e:	bf 10 00 00 00       	mov    $0x10,%edi
    4743:	e8 08 ea ff ff       	call   3150 <__cxa_allocate_exception@plt>
    4748:	48 89 c3             	mov    %rax,%rbx
    474b:	48 8d 05 46 fb 00 00 	lea    0xfb46(%rip),%rax        # 14298 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x50>
    4752:	48 89 c6             	mov    %rax,%rsi
    4755:	48 89 df             	mov    %rbx,%rdi
    4758:	e8 83 e9 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    475d:	48 8b 05 44 d8 01 00 	mov    0x1d844(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    4764:	48 89 c2             	mov    %rax,%rdx
    4767:	48 8d 05 d2 d5 01 00 	lea    0x1d5d2(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    476e:	48 89 c6             	mov    %rax,%rsi
    4771:	48 89 df             	mov    %rbx,%rdi
    4774:	e8 27 ee ff ff       	call   35a0 <__cxa_throw@plt>
  }
  return surface;
    4779:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    477d:	eb 16                	jmp    4795 <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create window surface.");
    477f:	49 89 c4             	mov    %rax,%r12
    4782:	48 89 df             	mov    %rbx,%rdi
    4785:	e8 76 ea ff ff       	call   3200 <__cxa_free_exception@plt>
    478a:	4c 89 e0             	mov    %r12,%rax
    478d:	48 89 c7             	mov    %rax,%rdi
    4790:	e8 5b ee ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    4795:	48 83 c4 30          	add    $0x30,%rsp
    4799:	5b                   	pop    %rbx
    479a:	41 5c                	pop    %r12
    479c:	5d                   	pop    %rbp
    479d:	c3                   	ret

000000000000479e <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks>:

VkSwapchainKHR createSwapchain(VkDevice device,
                               const VkSwapchainCreateInfoKHR *pCreateInfo,
                               const VkAllocationCallbacks *pAllocator) {
    479e:	55                   	push   %rbp
    479f:	48 89 e5             	mov    %rsp,%rbp
    47a2:	41 54                	push   %r12
    47a4:	53                   	push   %rbx
    47a5:	48 83 ec 30          	sub    $0x30,%rsp
    47a9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    47ad:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    47b1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkSwapchainKHR swapchain{};
    47b5:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    47bc:	00 
  if (vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, &swapchain) !=
    47bd:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    47c1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    47c5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    47c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    47cd:	48 89 c7             	mov    %rax,%rdi
    47d0:	e8 4b ec ff ff       	call   3420 <vkCreateSwapchainKHR@plt>
    47d5:	85 c0                	test   %eax,%eax
    47d7:	0f 95 c0             	setne  %al
    47da:	84 c0                	test   %al,%al
    47dc:	74 3b                	je     4819 <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks+0x7b>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create a swapchain.");
    47de:	bf 10 00 00 00       	mov    $0x10,%edi
    47e3:	e8 68 e9 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    47e8:	48 89 c3             	mov    %rax,%rbx
    47eb:	48 8d 05 c7 fa 00 00 	lea    0xfac7(%rip),%rax        # 142b9 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x71>
    47f2:	48 89 c6             	mov    %rax,%rsi
    47f5:	48 89 df             	mov    %rbx,%rdi
    47f8:	e8 e3 e8 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    47fd:	48 8b 05 a4 d7 01 00 	mov    0x1d7a4(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    4804:	48 89 c2             	mov    %rax,%rdx
    4807:	48 8d 05 32 d5 01 00 	lea    0x1d532(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    480e:	48 89 c6             	mov    %rax,%rsi
    4811:	48 89 df             	mov    %rbx,%rdi
    4814:	e8 87 ed ff ff       	call   35a0 <__cxa_throw@plt>
  }
  return swapchain;
    4819:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    481d:	eb 16                	jmp    4835 <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks+0x97>
    throw std::runtime_error("Failed to create a swapchain.");
    481f:	49 89 c4             	mov    %rax,%r12
    4822:	48 89 df             	mov    %rbx,%rdi
    4825:	e8 d6 e9 ff ff       	call   3200 <__cxa_free_exception@plt>
    482a:	4c 89 e0             	mov    %r12,%rax
    482d:	48 89 c7             	mov    %rax,%rdi
    4830:	e8 bb ed ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    4835:	48 83 c4 30          	add    $0x30,%rsp
    4839:	5b                   	pop    %rbx
    483a:	41 5c                	pop    %r12
    483c:	5d                   	pop    %rbp
    483d:	c3                   	ret

000000000000483e <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks>:

VkImageView createImageView(VkDevice device,
                            const VkImageViewCreateInfo *pCreateInfo,
                            const VkAllocationCallbacks *pAllocator) {
    483e:	55                   	push   %rbp
    483f:	48 89 e5             	mov    %rsp,%rbp
    4842:	41 54                	push   %r12
    4844:	53                   	push   %rbx
    4845:	48 83 ec 30          	sub    $0x30,%rsp
    4849:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    484d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4851:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkImageView imageView;
  if (vkCreateImageView(device, pCreateInfo, pAllocator, &imageView) !=
    4855:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    4859:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    485d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    4861:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4865:	48 89 c7             	mov    %rax,%rdi
    4868:	e8 e3 ea ff ff       	call   3350 <vkCreateImageView@plt>
    486d:	85 c0                	test   %eax,%eax
    486f:	0f 95 c0             	setne  %al
    4872:	84 c0                	test   %al,%al
    4874:	74 3b                	je     48b1 <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks+0x73>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create an image view.");
    4876:	bf 10 00 00 00       	mov    $0x10,%edi
    487b:	e8 d0 e8 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    4880:	48 89 c3             	mov    %rax,%rbx
    4883:	48 8d 05 4e fa 00 00 	lea    0xfa4e(%rip),%rax        # 142d8 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x90>
    488a:	48 89 c6             	mov    %rax,%rsi
    488d:	48 89 df             	mov    %rbx,%rdi
    4890:	e8 4b e8 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    4895:	48 8b 05 0c d7 01 00 	mov    0x1d70c(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    489c:	48 89 c2             	mov    %rax,%rdx
    489f:	48 8d 05 9a d4 01 00 	lea    0x1d49a(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    48a6:	48 89 c6             	mov    %rax,%rsi
    48a9:	48 89 df             	mov    %rbx,%rdi
    48ac:	e8 ef ec ff ff       	call   35a0 <__cxa_throw@plt>
  }
  return imageView;
    48b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    48b5:	eb 16                	jmp    48cd <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create an image view.");
    48b7:	49 89 c4             	mov    %rax,%r12
    48ba:	48 89 df             	mov    %rbx,%rdi
    48bd:	e8 3e e9 ff ff       	call   3200 <__cxa_free_exception@plt>
    48c2:	4c 89 e0             	mov    %r12,%rax
    48c5:	48 89 c7             	mov    %rax,%rdi
    48c8:	e8 23 ed ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    48cd:	48 83 c4 30          	add    $0x30,%rsp
    48d1:	5b                   	pop    %rbx
    48d2:	41 5c                	pop    %r12
    48d4:	5d                   	pop    %rbp
    48d5:	c3                   	ret

00000000000048d6 <_ZN3vkh21createComputePipelineEP10VkDevice_TP17VkPipelineCache_TPK27VkComputePipelineCreateInfoPK21VkAllocationCallbacks>:

VkPipeline createComputePipeline(VkDevice device, VkPipelineCache pipelineCache,
                                 const VkComputePipelineCreateInfo *pCreateInfo,
                                 const VkAllocationCallbacks *pAllocator) {
    48d6:	55                   	push   %rbp
    48d7:	48 89 e5             	mov    %rsp,%rbp
    48da:	41 54                	push   %r12
    48dc:	53                   	push   %rbx
    48dd:	48 83 ec 30          	sub    $0x30,%rsp
    48e1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    48e5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    48e9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    48ed:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  VkPipeline computePipeline;
  if (vkCreateComputePipelines(device, pipelineCache, 1, pCreateInfo,
    48f1:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    48f5:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    48f9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    48fd:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    4901:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4905:	49 89 f9             	mov    %rdi,%r9
    4908:	49 89 c8             	mov    %rcx,%r8
    490b:	48 89 d1             	mov    %rdx,%rcx
    490e:	ba 01 00 00 00       	mov    $0x1,%edx
    4913:	48 89 c7             	mov    %rax,%rdi
    4916:	e8 65 eb ff ff       	call   3480 <vkCreateComputePipelines@plt>
                               pAllocator, &computePipeline) != VK_SUCCESS) {
    491b:	85 c0                	test   %eax,%eax
    491d:	0f 95 c0             	setne  %al
  if (vkCreateComputePipelines(device, pipelineCache, 1, pCreateInfo,
    4920:	84 c0                	test   %al,%al
    4922:	74 3b                	je     495f <_ZN3vkh21createComputePipelineEP10VkDevice_TP17VkPipelineCache_TPK27VkComputePipelineCreateInfoPK21VkAllocationCallbacks+0x89>
    throw std::runtime_error("Failed to create a compute pipeline.");
    4924:	bf 10 00 00 00       	mov    $0x10,%edi
    4929:	e8 22 e8 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    492e:	48 89 c3             	mov    %rax,%rbx
    4931:	48 8d 05 c0 f9 00 00 	lea    0xf9c0(%rip),%rax        # 142f8 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0xb0>
    4938:	48 89 c6             	mov    %rax,%rsi
    493b:	48 89 df             	mov    %rbx,%rdi
    493e:	e8 9d e7 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    4943:	48 8b 05 5e d6 01 00 	mov    0x1d65e(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    494a:	48 89 c2             	mov    %rax,%rdx
    494d:	48 8d 05 ec d3 01 00 	lea    0x1d3ec(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    4954:	48 89 c6             	mov    %rax,%rsi
    4957:	48 89 df             	mov    %rbx,%rdi
    495a:	e8 41 ec ff ff       	call   35a0 <__cxa_throw@plt>
  }
  return computePipeline;
    495f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4963:	eb 16                	jmp    497b <_ZN3vkh21createComputePipelineEP10VkDevice_TP17VkPipelineCache_TPK27VkComputePipelineCreateInfoPK21VkAllocationCallbacks+0xa5>
    throw std::runtime_error("Failed to create a compute pipeline.");
    4965:	49 89 c4             	mov    %rax,%r12
    4968:	48 89 df             	mov    %rbx,%rdi
    496b:	e8 90 e8 ff ff       	call   3200 <__cxa_free_exception@plt>
    4970:	4c 89 e0             	mov    %r12,%rax
    4973:	48 89 c7             	mov    %rax,%rdi
    4976:	e8 75 ec ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    497b:	48 83 c4 30          	add    $0x30,%rsp
    497f:	5b                   	pop    %rbx
    4980:	41 5c                	pop    %r12
    4982:	5d                   	pop    %rbp
    4983:	c3                   	ret

0000000000004984 <_ZN3vkh22createComputePipelinesEP10VkDevice_TP17VkPipelineCache_TSt6vectorI27VkComputePipelineCreateInfoSaIS5_EEPK21VkAllocationCallbacks>:

std::vector<VkPipeline>
createComputePipelines(VkDevice device, VkPipelineCache pipelineCache,
                       std::vector<VkComputePipelineCreateInfo> createInfos,
                       const VkAllocationCallbacks *pAllocator) {
    4984:	55                   	push   %rbp
    4985:	48 89 e5             	mov    %rsp,%rbp
    4988:	41 54                	push   %r12
    498a:	53                   	push   %rbx
    498b:	48 83 ec 40          	sub    $0x40,%rsp
    498f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4993:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4997:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    499b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    499f:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  size_t createInfoCount = createInfos.size();
    49a3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    49a7:	48 89 c7             	mov    %rax,%rdi
    49aa:	e8 ad 03 00 00       	call   4d5c <_ZNKSt6vectorI27VkComputePipelineCreateInfoSaIS0_EE4sizeEv>
    49af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  std::vector<VkPipeline> computePipelines{createInfoCount};
    49b3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    49b7:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    49bb:	48 89 c7             	mov    %rax,%rdi
    49be:	e8 c7 03 00 00       	call   4d8a <_ZNSaIP12VkPipeline_TEC1Ev>
    49c3:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
    49c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    49cb:	48 89 de             	mov    %rbx,%rsi
    49ce:	48 89 c7             	mov    %rax,%rdi
    49d1:	e8 ec 03 00 00       	call   4dc2 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EEC1EmRKS2_>
    49d6:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    49da:	48 89 c7             	mov    %rax,%rdi
    49dd:	e8 c4 03 00 00       	call   4da6 <_ZNSaIP12VkPipeline_TED1Ev>
  if (vkCreateComputePipelines(device, pipelineCache,
    49e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    49e6:	48 89 c7             	mov    %rax,%rdi
    49e9:	e8 b2 04 00 00       	call   4ea0 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE4dataEv>
    49ee:	48 89 c3             	mov    %rax,%rbx
                               static_cast<uint32_t>(createInfoCount),
                               createInfos.data(), pAllocator,
    49f1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    49f5:	48 89 c7             	mov    %rax,%rdi
    49f8:	e8 7f 04 00 00       	call   4e7c <_ZNSt6vectorI27VkComputePipelineCreateInfoSaIS0_EE4dataEv>
    49fd:	48 89 c2             	mov    %rax,%rdx
  if (vkCreateComputePipelines(device, pipelineCache,
    4a00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4a04:	89 c7                	mov    %eax,%edi
    4a06:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    4a0a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    4a0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4a12:	49 89 d9             	mov    %rbx,%r9
    4a15:	49 89 c8             	mov    %rcx,%r8
    4a18:	48 89 d1             	mov    %rdx,%rcx
    4a1b:	89 fa                	mov    %edi,%edx
    4a1d:	48 89 c7             	mov    %rax,%rdi
    4a20:	e8 5b ea ff ff       	call   3480 <vkCreateComputePipelines@plt>
                               computePipelines.data()) != VK_SUCCESS) {
    4a25:	85 c0                	test   %eax,%eax
    4a27:	0f 95 c0             	setne  %al
  if (vkCreateComputePipelines(device, pipelineCache,
    4a2a:	84 c0                	test   %al,%al
    4a2c:	74 7f                	je     4aad <_ZN3vkh22createComputePipelinesEP10VkDevice_TP17VkPipelineCache_TSt6vectorI27VkComputePipelineCreateInfoSaIS5_EEPK21VkAllocationCallbacks+0x129>
    throw std::runtime_error("Failed to create compute pipelines.");
    4a2e:	bf 10 00 00 00       	mov    $0x10,%edi
    4a33:	e8 18 e7 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    4a38:	48 89 c3             	mov    %rax,%rbx
    4a3b:	48 8d 05 de f8 00 00 	lea    0xf8de(%rip),%rax        # 14320 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0xd8>
    4a42:	48 89 c6             	mov    %rax,%rsi
    4a45:	48 89 df             	mov    %rbx,%rdi
    4a48:	e8 93 e6 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    4a4d:	48 8b 05 54 d5 01 00 	mov    0x1d554(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    4a54:	48 89 c2             	mov    %rax,%rdx
    4a57:	48 8d 05 e2 d2 01 00 	lea    0x1d2e2(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    4a5e:	48 89 c6             	mov    %rax,%rsi
    4a61:	48 89 df             	mov    %rbx,%rdi
    4a64:	e8 37 eb ff ff       	call   35a0 <__cxa_throw@plt>
  std::vector<VkPipeline> computePipelines{createInfoCount};
    4a69:	48 89 c3             	mov    %rax,%rbx
    4a6c:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    4a70:	48 89 c7             	mov    %rax,%rdi
    4a73:	e8 2e 03 00 00       	call   4da6 <_ZNSaIP12VkPipeline_TED1Ev>
    4a78:	48 89 d8             	mov    %rbx,%rax
    4a7b:	48 89 c7             	mov    %rax,%rdi
    4a7e:	e8 6d eb ff ff       	call   35f0 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to create compute pipelines.");
    4a83:	49 89 c4             	mov    %rax,%r12
    4a86:	48 89 df             	mov    %rbx,%rdi
    4a89:	e8 72 e7 ff ff       	call   3200 <__cxa_free_exception@plt>
    4a8e:	4c 89 e3             	mov    %r12,%rbx
    4a91:	eb 03                	jmp    4a96 <_ZN3vkh22createComputePipelinesEP10VkDevice_TP17VkPipelineCache_TSt6vectorI27VkComputePipelineCreateInfoSaIS5_EEPK21VkAllocationCallbacks+0x112>
  }
  return computePipelines;
}
    4a93:	48 89 c3             	mov    %rax,%rbx
    4a96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4a9a:	48 89 c7             	mov    %rax,%rdi
    4a9d:	e8 96 03 00 00       	call   4e38 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EED1Ev>
    4aa2:	48 89 d8             	mov    %rbx,%rax
    4aa5:	48 89 c7             	mov    %rax,%rdi
    4aa8:	e8 43 eb ff ff       	call   35f0 <_Unwind_Resume@plt>
  return computePipelines;
    4aad:	90                   	nop
}
    4aae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4ab2:	48 83 c4 40          	add    $0x40,%rsp
    4ab6:	5b                   	pop    %rbx
    4ab7:	41 5c                	pop    %r12
    4ab9:	5d                   	pop    %rbp
    4aba:	c3                   	ret

0000000000004abb <_ZN3vkh22createGraphicsPipelineEP10VkDevice_TP17VkPipelineCache_TPK28VkGraphicsPipelineCreateInfoPK21VkAllocationCallbacks>:

VkPipeline
createGraphicsPipeline(VkDevice device, VkPipelineCache pipelineCache,
                       const VkGraphicsPipelineCreateInfo *pCreateInfo,
                       const VkAllocationCallbacks *pAllocator) {
    4abb:	55                   	push   %rbp
    4abc:	48 89 e5             	mov    %rsp,%rbp
    4abf:	41 54                	push   %r12
    4ac1:	53                   	push   %rbx
    4ac2:	48 83 ec 30          	sub    $0x30,%rsp
    4ac6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4aca:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4ace:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    4ad2:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  VkPipeline graphicsPipeline;
  if (vkCreateGraphicsPipelines(device, pipelineCache, 1, pCreateInfo,
    4ad6:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    4ada:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    4ade:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    4ae2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    4ae6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4aea:	49 89 f9             	mov    %rdi,%r9
    4aed:	49 89 c8             	mov    %rcx,%r8
    4af0:	48 89 d1             	mov    %rdx,%rcx
    4af3:	ba 01 00 00 00       	mov    $0x1,%edx
    4af8:	48 89 c7             	mov    %rax,%rdi
    4afb:	e8 40 e6 ff ff       	call   3140 <vkCreateGraphicsPipelines@plt>
                                pAllocator, &graphicsPipeline) != VK_SUCCESS) {
    4b00:	85 c0                	test   %eax,%eax
    4b02:	0f 95 c0             	setne  %al
  if (vkCreateGraphicsPipelines(device, pipelineCache, 1, pCreateInfo,
    4b05:	84 c0                	test   %al,%al
    4b07:	74 3b                	je     4b44 <_ZN3vkh22createGraphicsPipelineEP10VkDevice_TP17VkPipelineCache_TPK28VkGraphicsPipelineCreateInfoPK21VkAllocationCallbacks+0x89>
    throw std::runtime_error("Failed to create a graphics pipeline.");
    4b09:	bf 10 00 00 00       	mov    $0x10,%edi
    4b0e:	e8 3d e6 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    4b13:	48 89 c3             	mov    %rax,%rbx
    4b16:	48 8d 05 2b f8 00 00 	lea    0xf82b(%rip),%rax        # 14348 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x100>
    4b1d:	48 89 c6             	mov    %rax,%rsi
    4b20:	48 89 df             	mov    %rbx,%rdi
    4b23:	e8 b8 e5 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    4b28:	48 8b 05 79 d4 01 00 	mov    0x1d479(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    4b2f:	48 89 c2             	mov    %rax,%rdx
    4b32:	48 8d 05 07 d2 01 00 	lea    0x1d207(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    4b39:	48 89 c6             	mov    %rax,%rsi
    4b3c:	48 89 df             	mov    %rbx,%rdi
    4b3f:	e8 5c ea ff ff       	call   35a0 <__cxa_throw@plt>
  }
  return graphicsPipeline;
    4b44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4b48:	eb 16                	jmp    4b60 <_ZN3vkh22createGraphicsPipelineEP10VkDevice_TP17VkPipelineCache_TPK28VkGraphicsPipelineCreateInfoPK21VkAllocationCallbacks+0xa5>
    throw std::runtime_error("Failed to create a graphics pipeline.");
    4b4a:	49 89 c4             	mov    %rax,%r12
    4b4d:	48 89 df             	mov    %rbx,%rdi
    4b50:	e8 ab e6 ff ff       	call   3200 <__cxa_free_exception@plt>
    4b55:	4c 89 e0             	mov    %r12,%rax
    4b58:	48 89 c7             	mov    %rax,%rdi
    4b5b:	e8 90 ea ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    4b60:	48 83 c4 30          	add    $0x30,%rsp
    4b64:	5b                   	pop    %rbx
    4b65:	41 5c                	pop    %r12
    4b67:	5d                   	pop    %rbp
    4b68:	c3                   	ret

0000000000004b69 <_ZN3vkh23createGraphicsPipelinesEP10VkDevice_TP17VkPipelineCache_TSt6vectorI28VkGraphicsPipelineCreateInfoSaIS5_EEPK21VkAllocationCallbacks>:

std::vector<VkPipeline>
createGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache,
                        std::vector<VkGraphicsPipelineCreateInfo> createInfos,
                        const VkAllocationCallbacks *pAllocator) {
    4b69:	55                   	push   %rbp
    4b6a:	48 89 e5             	mov    %rsp,%rbp
    4b6d:	41 54                	push   %r12
    4b6f:	53                   	push   %rbx
    4b70:	48 83 ec 40          	sub    $0x40,%rsp
    4b74:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4b78:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4b7c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    4b80:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    4b84:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  size_t createInfoCount = createInfos.size();
    4b88:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    4b8c:	48 89 c7             	mov    %rax,%rdi
    4b8f:	e8 7e 03 00 00       	call   4f12 <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE4sizeEv>
    4b94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  std::vector<VkPipeline> graphicsPipelines{createInfoCount};
    4b98:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    4b9c:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    4ba0:	48 89 c7             	mov    %rax,%rdi
    4ba3:	e8 e2 01 00 00       	call   4d8a <_ZNSaIP12VkPipeline_TEC1Ev>
    4ba8:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
    4bac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4bb0:	48 89 de             	mov    %rbx,%rsi
    4bb3:	48 89 c7             	mov    %rax,%rdi
    4bb6:	e8 07 02 00 00       	call   4dc2 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EEC1EmRKS2_>
    4bbb:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    4bbf:	48 89 c7             	mov    %rax,%rdi
    4bc2:	e8 df 01 00 00       	call   4da6 <_ZNSaIP12VkPipeline_TED1Ev>
  if (vkCreateGraphicsPipelines(device, pipelineCache,
    4bc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4bcb:	48 89 c7             	mov    %rax,%rdi
    4bce:	e8 cd 02 00 00       	call   4ea0 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE4dataEv>
    4bd3:	48 89 c3             	mov    %rax,%rbx
                                static_cast<uint32_t>(createInfoCount),
                                createInfos.data(), pAllocator,
    4bd6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    4bda:	48 89 c7             	mov    %rax,%rdi
    4bdd:	e8 5e 03 00 00       	call   4f40 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE4dataEv>
    4be2:	48 89 c2             	mov    %rax,%rdx
  if (vkCreateGraphicsPipelines(device, pipelineCache,
    4be5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4be9:	89 c7                	mov    %eax,%edi
    4beb:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    4bef:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    4bf3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4bf7:	49 89 d9             	mov    %rbx,%r9
    4bfa:	49 89 c8             	mov    %rcx,%r8
    4bfd:	48 89 d1             	mov    %rdx,%rcx
    4c00:	89 fa                	mov    %edi,%edx
    4c02:	48 89 c7             	mov    %rax,%rdi
    4c05:	e8 36 e5 ff ff       	call   3140 <vkCreateGraphicsPipelines@plt>
                                graphicsPipelines.data()) != VK_SUCCESS) {
    4c0a:	85 c0                	test   %eax,%eax
    4c0c:	0f 95 c0             	setne  %al
  if (vkCreateGraphicsPipelines(device, pipelineCache,
    4c0f:	84 c0                	test   %al,%al
    4c11:	74 7f                	je     4c92 <_ZN3vkh23createGraphicsPipelinesEP10VkDevice_TP17VkPipelineCache_TSt6vectorI28VkGraphicsPipelineCreateInfoSaIS5_EEPK21VkAllocationCallbacks+0x129>
    throw std::runtime_error("Failed to create graphics pipelines.");
    4c13:	bf 10 00 00 00       	mov    $0x10,%edi
    4c18:	e8 33 e5 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    4c1d:	48 89 c3             	mov    %rax,%rbx
    4c20:	48 8d 05 49 f7 00 00 	lea    0xf749(%rip),%rax        # 14370 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x128>
    4c27:	48 89 c6             	mov    %rax,%rsi
    4c2a:	48 89 df             	mov    %rbx,%rdi
    4c2d:	e8 ae e4 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    4c32:	48 8b 05 6f d3 01 00 	mov    0x1d36f(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    4c39:	48 89 c2             	mov    %rax,%rdx
    4c3c:	48 8d 05 fd d0 01 00 	lea    0x1d0fd(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    4c43:	48 89 c6             	mov    %rax,%rsi
    4c46:	48 89 df             	mov    %rbx,%rdi
    4c49:	e8 52 e9 ff ff       	call   35a0 <__cxa_throw@plt>
  std::vector<VkPipeline> graphicsPipelines{createInfoCount};
    4c4e:	48 89 c3             	mov    %rax,%rbx
    4c51:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    4c55:	48 89 c7             	mov    %rax,%rdi
    4c58:	e8 49 01 00 00       	call   4da6 <_ZNSaIP12VkPipeline_TED1Ev>
    4c5d:	48 89 d8             	mov    %rbx,%rax
    4c60:	48 89 c7             	mov    %rax,%rdi
    4c63:	e8 88 e9 ff ff       	call   35f0 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to create graphics pipelines.");
    4c68:	49 89 c4             	mov    %rax,%r12
    4c6b:	48 89 df             	mov    %rbx,%rdi
    4c6e:	e8 8d e5 ff ff       	call   3200 <__cxa_free_exception@plt>
    4c73:	4c 89 e3             	mov    %r12,%rbx
    4c76:	eb 03                	jmp    4c7b <_ZN3vkh23createGraphicsPipelinesEP10VkDevice_TP17VkPipelineCache_TSt6vectorI28VkGraphicsPipelineCreateInfoSaIS5_EEPK21VkAllocationCallbacks+0x112>
  }
  return graphicsPipelines;
}
    4c78:	48 89 c3             	mov    %rax,%rbx
    4c7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4c7f:	48 89 c7             	mov    %rax,%rdi
    4c82:	e8 b1 01 00 00       	call   4e38 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EED1Ev>
    4c87:	48 89 d8             	mov    %rbx,%rax
    4c8a:	48 89 c7             	mov    %rax,%rdi
    4c8d:	e8 5e e9 ff ff       	call   35f0 <_Unwind_Resume@plt>
  return graphicsPipelines;
    4c92:	90                   	nop
}
    4c93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4c97:	48 83 c4 40          	add    $0x40,%rsp
    4c9b:	5b                   	pop    %rbx
    4c9c:	41 5c                	pop    %r12
    4c9e:	5d                   	pop    %rbp
    4c9f:	c3                   	ret

0000000000004ca0 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks>:

VkCommandPool createCommandPool(VkDevice device,
                                const VkCommandPoolCreateInfo *pCreateInfo,
                                const VkAllocationCallbacks *pAllocator) {
    4ca0:	55                   	push   %rbp
    4ca1:	48 89 e5             	mov    %rsp,%rbp
    4ca4:	41 54                	push   %r12
    4ca6:	53                   	push   %rbx
    4ca7:	48 83 ec 30          	sub    $0x30,%rsp
    4cab:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4caf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4cb3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkCommandPool commandPool{};
    4cb7:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    4cbe:	00 
  if (vkCreateCommandPool(device, pCreateInfo, pAllocator, &commandPool) !=
    4cbf:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    4cc3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    4cc7:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    4ccb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4ccf:	48 89 c7             	mov    %rax,%rdi
    4cd2:	e8 39 e4 ff ff       	call   3110 <vkCreateCommandPool@plt>
    4cd7:	85 c0                	test   %eax,%eax
    4cd9:	0f 95 c0             	setne  %al
    4cdc:	84 c0                	test   %al,%al
    4cde:	74 3b                	je     4d1b <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks+0x7b>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create command pool.");
    4ce0:	bf 10 00 00 00       	mov    $0x10,%edi
    4ce5:	e8 66 e4 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    4cea:	48 89 c3             	mov    %rax,%rbx
    4ced:	48 8d 05 a4 f6 00 00 	lea    0xf6a4(%rip),%rax        # 14398 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x150>
    4cf4:	48 89 c6             	mov    %rax,%rsi
    4cf7:	48 89 df             	mov    %rbx,%rdi
    4cfa:	e8 e1 e3 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    4cff:	48 8b 05 a2 d2 01 00 	mov    0x1d2a2(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    4d06:	48 89 c2             	mov    %rax,%rdx
    4d09:	48 8d 05 30 d0 01 00 	lea    0x1d030(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    4d10:	48 89 c6             	mov    %rax,%rsi
    4d13:	48 89 df             	mov    %rbx,%rdi
    4d16:	e8 85 e8 ff ff       	call   35a0 <__cxa_throw@plt>
  }
  return commandPool;
    4d1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d1f:	eb 16                	jmp    4d37 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks+0x97>
    throw std::runtime_error("Failed to create command pool.");
    4d21:	49 89 c4             	mov    %rax,%r12
    4d24:	48 89 df             	mov    %rbx,%rdi
    4d27:	e8 d4 e4 ff ff       	call   3200 <__cxa_free_exception@plt>
    4d2c:	4c 89 e0             	mov    %r12,%rax
    4d2f:	48 89 c7             	mov    %rax,%rdi
    4d32:	e8 b9 e8 ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    4d37:	48 83 c4 30          	add    $0x30,%rsp
    4d3b:	5b                   	pop    %rbx
    4d3c:	41 5c                	pop    %r12
    4d3e:	5d                   	pop    %rbp
    4d3f:	c3                   	ret

0000000000004d40 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
    4d40:	55                   	push   %rbp
    4d41:	48 89 e5             	mov    %rsp,%rbp
    4d44:	48 83 ec 10          	sub    $0x10,%rsp
    4d48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4d4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4d50:	48 89 c7             	mov    %rax,%rdi
    4d53:	e8 4e 00 00 00       	call   4da6 <_ZNSaIP12VkPipeline_TED1Ev>
    4d58:	90                   	nop
    4d59:	c9                   	leave
    4d5a:	c3                   	ret
    4d5b:	90                   	nop

0000000000004d5c <_ZNKSt6vectorI27VkComputePipelineCreateInfoSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    4d5c:	55                   	push   %rbp
    4d5d:	48 89 e5             	mov    %rsp,%rbp
    4d60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    4d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4d68:	48 8b 50 08          	mov    0x8(%rax),%rdx
    4d6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4d70:	48 8b 00             	mov    (%rax),%rax
    4d73:	48 29 c2             	sub    %rax,%rdx
    4d76:	48 c1 fa 05          	sar    $0x5,%rdx
    4d7a:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    4d81:	aa aa aa 
    4d84:	48 0f af c2          	imul   %rdx,%rax
    4d88:	5d                   	pop    %rbp
    4d89:	c3                   	ret

0000000000004d8a <_ZNSaIP12VkPipeline_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    4d8a:	55                   	push   %rbp
    4d8b:	48 89 e5             	mov    %rsp,%rbp
    4d8e:	48 83 ec 10          	sub    $0x10,%rsp
    4d92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4d96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4d9a:	48 89 c7             	mov    %rax,%rdi
    4d9d:	e8 c2 01 00 00       	call   4f64 <_ZNSt15__new_allocatorIP12VkPipeline_TEC1Ev>
    4da2:	90                   	nop
    4da3:	c9                   	leave
    4da4:	c3                   	ret
    4da5:	90                   	nop

0000000000004da6 <_ZNSaIP12VkPipeline_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    4da6:	55                   	push   %rbp
    4da7:	48 89 e5             	mov    %rsp,%rbp
    4daa:	48 83 ec 10          	sub    $0x10,%rsp
    4dae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4db2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4db6:	48 89 c7             	mov    %rax,%rdi
    4db9:	e8 b2 01 00 00       	call   4f70 <_ZNSt15__new_allocatorIP12VkPipeline_TED1Ev>
    4dbe:	90                   	nop
    4dbf:	c9                   	leave
    4dc0:	c3                   	ret
    4dc1:	90                   	nop

0000000000004dc2 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    4dc2:	55                   	push   %rbp
    4dc3:	48 89 e5             	mov    %rsp,%rbp
    4dc6:	53                   	push   %rbx
    4dc7:	48 83 ec 28          	sub    $0x28,%rsp
    4dcb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4dcf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4dd3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    4dd7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    4ddb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    4ddf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4de3:	48 89 d6             	mov    %rdx,%rsi
    4de6:	48 89 c7             	mov    %rax,%rdi
    4de9:	e8 8d 01 00 00       	call   4f7b <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE17_S_check_init_lenEmRKS2_>
    4dee:	48 89 c1             	mov    %rax,%rcx
    4df1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4df5:	48 89 c2             	mov    %rax,%rdx
    4df8:	48 89 ce             	mov    %rcx,%rsi
    4dfb:	48 89 df             	mov    %rbx,%rdi
    4dfe:	e8 d9 01 00 00       	call   4fdc <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
    4e03:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4e07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4e0b:	48 89 d6             	mov    %rdx,%rsi
    4e0e:	48 89 c7             	mov    %rax,%rdi
    4e11:	e8 24 02 00 00       	call   503a <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE21_M_default_initializeEm>
    4e16:	eb 1a                	jmp    4e32 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EEC1EmRKS2_+0x70>
    4e18:	48 89 c3             	mov    %rax,%rbx
    4e1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4e1f:	48 89 c7             	mov    %rax,%rdi
    4e22:	e8 9d 00 00 00       	call   4ec4 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EED1Ev>
    4e27:	48 89 d8             	mov    %rbx,%rax
    4e2a:	48 89 c7             	mov    %rax,%rdi
    4e2d:	e8 be e7 ff ff       	call   35f0 <_Unwind_Resume@plt>
    4e32:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    4e36:	c9                   	leave
    4e37:	c3                   	ret

0000000000004e38 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    4e38:	55                   	push   %rbp
    4e39:	48 89 e5             	mov    %rsp,%rbp
    4e3c:	48 83 ec 10          	sub    $0x10,%rsp
    4e40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    4e44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4e48:	48 89 c7             	mov    %rax,%rdi
    4e4b:	e8 2a 02 00 00       	call   507a <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE19_M_get_Tp_allocatorEv>
    4e50:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    4e53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4e57:	48 8b 48 08          	mov    0x8(%rax),%rcx
    4e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4e5f:	48 8b 00             	mov    (%rax),%rax
    4e62:	48 89 ce             	mov    %rcx,%rsi
    4e65:	48 89 c7             	mov    %rax,%rdi
    4e68:	e8 1b 02 00 00       	call   5088 <_ZSt8_DestroyIPP12VkPipeline_TS1_EvT_S3_RSaIT0_E>
      }
    4e6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4e71:	48 89 c7             	mov    %rax,%rdi
    4e74:	e8 4b 00 00 00       	call   4ec4 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EED1Ev>
    4e79:	90                   	nop
    4e7a:	c9                   	leave
    4e7b:	c3                   	ret

0000000000004e7c <_ZNSt6vectorI27VkComputePipelineCreateInfoSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    4e7c:	55                   	push   %rbp
    4e7d:	48 89 e5             	mov    %rsp,%rbp
    4e80:	48 83 ec 10          	sub    $0x10,%rsp
    4e84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    4e88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4e8c:	48 8b 10             	mov    (%rax),%rdx
    4e8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4e93:	48 89 d6             	mov    %rdx,%rsi
    4e96:	48 89 c7             	mov    %rax,%rdi
    4e99:	e8 14 02 00 00       	call   50b2 <_ZNKSt6vectorI27VkComputePipelineCreateInfoSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    4e9e:	c9                   	leave
    4e9f:	c3                   	ret

0000000000004ea0 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    4ea0:	55                   	push   %rbp
    4ea1:	48 89 e5             	mov    %rsp,%rbp
    4ea4:	48 83 ec 10          	sub    $0x10,%rsp
    4ea8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    4eac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4eb0:	48 8b 10             	mov    (%rax),%rdx
    4eb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4eb7:	48 89 d6             	mov    %rdx,%rsi
    4eba:	48 89 c7             	mov    %rax,%rdi
    4ebd:	e8 02 02 00 00       	call   50c4 <_ZNKSt6vectorIP12VkPipeline_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
    4ec2:	c9                   	leave
    4ec3:	c3                   	ret

0000000000004ec4 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    4ec4:	55                   	push   %rbp
    4ec5:	48 89 e5             	mov    %rsp,%rbp
    4ec8:	48 83 ec 10          	sub    $0x10,%rsp
    4ecc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    4ed0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4ed4:	48 8b 50 10          	mov    0x10(%rax),%rdx
    4ed8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4edc:	48 8b 00             	mov    (%rax),%rax
    4edf:	48 29 c2             	sub    %rax,%rdx
    4ee2:	48 89 d0             	mov    %rdx,%rax
    4ee5:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    4ee9:	48 89 c2             	mov    %rax,%rdx
    4eec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4ef0:	48 8b 08             	mov    (%rax),%rcx
    4ef3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4ef7:	48 89 ce             	mov    %rcx,%rsi
    4efa:	48 89 c7             	mov    %rax,%rdi
    4efd:	e8 fa 01 00 00       	call   50fc <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE13_M_deallocateEPS1_m>
      }
    4f02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4f06:	48 89 c7             	mov    %rax,%rdi
    4f09:	e8 32 fe ff ff       	call   4d40 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implD1Ev>
    4f0e:	90                   	nop
    4f0f:	c9                   	leave
    4f10:	c3                   	ret
    4f11:	90                   	nop

0000000000004f12 <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    4f12:	55                   	push   %rbp
    4f13:	48 89 e5             	mov    %rsp,%rbp
    4f16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    4f1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4f1e:	48 8b 50 08          	mov    0x8(%rax),%rdx
    4f22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4f26:	48 8b 00             	mov    (%rax),%rax
    4f29:	48 29 c2             	sub    %rax,%rdx
    4f2c:	48 c1 fa 04          	sar    $0x4,%rdx
    4f30:	48 b8 39 8e e3 38 8e 	movabs $0x8e38e38e38e38e39,%rax
    4f37:	e3 38 8e 
    4f3a:	48 0f af c2          	imul   %rdx,%rax
    4f3e:	5d                   	pop    %rbp
    4f3f:	c3                   	ret

0000000000004f40 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    4f40:	55                   	push   %rbp
    4f41:	48 89 e5             	mov    %rsp,%rbp
    4f44:	48 83 ec 10          	sub    $0x10,%rsp
    4f48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    4f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4f50:	48 8b 10             	mov    (%rax),%rdx
    4f53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4f57:	48 89 d6             	mov    %rdx,%rsi
    4f5a:	48 89 c7             	mov    %rax,%rdi
    4f5d:	e8 d0 01 00 00       	call   5132 <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    4f62:	c9                   	leave
    4f63:	c3                   	ret

0000000000004f64 <_ZNSt15__new_allocatorIP12VkPipeline_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    4f64:	55                   	push   %rbp
    4f65:	48 89 e5             	mov    %rsp,%rbp
    4f68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4f6c:	90                   	nop
    4f6d:	5d                   	pop    %rbp
    4f6e:	c3                   	ret
    4f6f:	90                   	nop

0000000000004f70 <_ZNSt15__new_allocatorIP12VkPipeline_TED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    4f70:	55                   	push   %rbp
    4f71:	48 89 e5             	mov    %rsp,%rbp
    4f74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4f78:	90                   	nop
    4f79:	5d                   	pop    %rbp
    4f7a:	c3                   	ret

0000000000004f7b <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    4f7b:	55                   	push   %rbp
    4f7c:	48 89 e5             	mov    %rsp,%rbp
    4f7f:	53                   	push   %rbx
    4f80:	48 83 ec 28          	sub    $0x28,%rsp
    4f84:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4f88:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    4f8c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    4f90:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    4f94:	48 89 d6             	mov    %rdx,%rsi
    4f97:	48 89 c7             	mov    %rax,%rdi
    4f9a:	e8 37 01 00 00       	call   50d6 <_ZNSaIP12VkPipeline_TEC1ERKS1_>
    4f9f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    4fa3:	48 89 c7             	mov    %rax,%rdi
    4fa6:	e8 99 01 00 00       	call   5144 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE11_S_max_sizeERKS2_>
    4fab:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    4faf:	0f 92 c3             	setb   %bl
    4fb2:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    4fb6:	48 89 c7             	mov    %rax,%rdi
    4fb9:	e8 e8 fd ff ff       	call   4da6 <_ZNSaIP12VkPipeline_TED1Ev>
    4fbe:	84 db                	test   %bl,%bl
    4fc0:	74 0f                	je     4fd1 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
    4fc2:	48 8d 05 ef f3 00 00 	lea    0xf3ef(%rip),%rax        # 143b8 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x170>
    4fc9:	48 89 c7             	mov    %rax,%rdi
    4fcc:	e8 8f e1 ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    4fd1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    4fd5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    4fd9:	c9                   	leave
    4fda:	c3                   	ret
    4fdb:	90                   	nop

0000000000004fdc <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    4fdc:	55                   	push   %rbp
    4fdd:	48 89 e5             	mov    %rsp,%rbp
    4fe0:	53                   	push   %rbx
    4fe1:	48 83 ec 28          	sub    $0x28,%rsp
    4fe5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4fe9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4fed:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    4ff1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4ff5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    4ff9:	48 89 d6             	mov    %rdx,%rsi
    4ffc:	48 89 c7             	mov    %rax,%rdi
    4fff:	e8 82 01 00 00       	call   5186 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
    5004:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5008:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    500c:	48 89 d6             	mov    %rdx,%rsi
    500f:	48 89 c7             	mov    %rax,%rdi
    5012:	e8 a1 01 00 00       	call   51b8 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE17_M_create_storageEm>
    5017:	eb 1a                	jmp    5033 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EEC1EmRKS2_+0x57>
    5019:	48 89 c3             	mov    %rax,%rbx
    501c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5020:	48 89 c7             	mov    %rax,%rdi
    5023:	e8 18 fd ff ff       	call   4d40 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implD1Ev>
    5028:	48 89 d8             	mov    %rbx,%rax
    502b:	48 89 c7             	mov    %rax,%rdi
    502e:	e8 bd e5 ff ff       	call   35f0 <_Unwind_Resume@plt>
    5033:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5037:	c9                   	leave
    5038:	c3                   	ret
    5039:	90                   	nop

000000000000503a <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    503a:	55                   	push   %rbp
    503b:	48 89 e5             	mov    %rsp,%rbp
    503e:	48 83 ec 10          	sub    $0x10,%rsp
    5042:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5046:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    504a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    504e:	48 89 c7             	mov    %rax,%rdi
    5051:	e8 24 00 00 00       	call   507a <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE19_M_get_Tp_allocatorEv>
    5056:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    5059:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    505d:	48 8b 00             	mov    (%rax),%rax
    5060:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5064:	48 89 ce             	mov    %rcx,%rsi
    5067:	48 89 c7             	mov    %rax,%rdi
    506a:	e8 9f 01 00 00       	call   520e <_ZSt27__uninitialized_default_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    506f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5073:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    5077:	90                   	nop
    5078:	c9                   	leave
    5079:	c3                   	ret

000000000000507a <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    507a:	55                   	push   %rbp
    507b:	48 89 e5             	mov    %rsp,%rbp
    507e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    5082:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5086:	5d                   	pop    %rbp
    5087:	c3                   	ret

0000000000005088 <_ZSt8_DestroyIPP12VkPipeline_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    5088:	55                   	push   %rbp
    5089:	48 89 e5             	mov    %rsp,%rbp
    508c:	48 83 ec 20          	sub    $0x20,%rsp
    5090:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5094:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5098:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    509c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    50a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    50a4:	48 89 d6             	mov    %rdx,%rsi
    50a7:	48 89 c7             	mov    %rax,%rdi
    50aa:	e8 88 01 00 00       	call   5237 <_ZSt8_DestroyIPP12VkPipeline_TEvT_S3_>
    }
    50af:	90                   	nop
    50b0:	c9                   	leave
    50b1:	c3                   	ret

00000000000050b2 <_ZNKSt6vectorI27VkComputePipelineCreateInfoSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    50b2:	55                   	push   %rbp
    50b3:	48 89 e5             	mov    %rsp,%rbp
    50b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    50ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    50be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    50c2:	5d                   	pop    %rbp
    50c3:	c3                   	ret

00000000000050c4 <_ZNKSt6vectorIP12VkPipeline_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    50c4:	55                   	push   %rbp
    50c5:	48 89 e5             	mov    %rsp,%rbp
    50c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    50cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    50d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    50d4:	5d                   	pop    %rbp
    50d5:	c3                   	ret

00000000000050d6 <_ZNSaIP12VkPipeline_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    50d6:	55                   	push   %rbp
    50d7:	48 89 e5             	mov    %rsp,%rbp
    50da:	48 83 ec 10          	sub    $0x10,%rsp
    50de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    50e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    50e6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    50ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    50ee:	48 89 d6             	mov    %rdx,%rsi
    50f1:	48 89 c7             	mov    %rax,%rdi
    50f4:	e8 65 01 00 00       	call   525e <_ZNSt15__new_allocatorIP12VkPipeline_TEC1ERKS2_>
    50f9:	90                   	nop
    50fa:	c9                   	leave
    50fb:	c3                   	ret

00000000000050fc <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
    50fc:	55                   	push   %rbp
    50fd:	48 89 e5             	mov    %rsp,%rbp
    5100:	48 83 ec 20          	sub    $0x20,%rsp
    5104:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5108:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    510c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    5110:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    5115:	74 17                	je     512e <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    5117:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    511b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    511f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5123:	48 89 ce             	mov    %rcx,%rsi
    5126:	48 89 c7             	mov    %rax,%rdi
    5129:	e8 3f 01 00 00       	call   526d <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE10deallocateERS2_PS1_m>
      }
    512e:	90                   	nop
    512f:	c9                   	leave
    5130:	c3                   	ret
    5131:	90                   	nop

0000000000005132 <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    5132:	55                   	push   %rbp
    5133:	48 89 e5             	mov    %rsp,%rbp
    5136:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    513a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    513e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5142:	5d                   	pop    %rbp
    5143:	c3                   	ret

0000000000005144 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    5144:	55                   	push   %rbp
    5145:	48 89 e5             	mov    %rsp,%rbp
    5148:	48 83 ec 20          	sub    $0x20,%rsp
    514c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    5150:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    5157:	ff ff 0f 
    515a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    515e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5162:	48 89 c7             	mov    %rax,%rdi
    5165:	e8 31 01 00 00       	call   529b <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE8max_sizeERKS2_>
    516a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    516e:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    5172:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    5176:	48 89 d6             	mov    %rdx,%rsi
    5179:	48 89 c7             	mov    %rax,%rdi
    517c:	e8 ac f0 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    5181:	48 8b 00             	mov    (%rax),%rax
      }
    5184:	c9                   	leave
    5185:	c3                   	ret

0000000000005186 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    5186:	55                   	push   %rbp
    5187:	48 89 e5             	mov    %rsp,%rbp
    518a:	48 83 ec 10          	sub    $0x10,%rsp
    518e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5192:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    5196:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    519a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    519e:	48 89 d6             	mov    %rdx,%rsi
    51a1:	48 89 c7             	mov    %rax,%rdi
    51a4:	e8 2d ff ff ff       	call   50d6 <_ZNSaIP12VkPipeline_TEC1ERKS1_>
    51a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    51ad:	48 89 c7             	mov    %rax,%rdi
    51b0:	e8 01 01 00 00       	call   52b6 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    51b5:	90                   	nop
    51b6:	c9                   	leave
    51b7:	c3                   	ret

00000000000051b8 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    51b8:	55                   	push   %rbp
    51b9:	48 89 e5             	mov    %rsp,%rbp
    51bc:	48 83 ec 10          	sub    $0x10,%rsp
    51c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    51c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    51c8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    51cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    51d0:	48 89 d6             	mov    %rdx,%rsi
    51d3:	48 89 c7             	mov    %rax,%rdi
    51d6:	e8 09 01 00 00       	call   52e4 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE11_M_allocateEm>
    51db:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    51df:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    51e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    51e6:	48 8b 10             	mov    (%rax),%rdx
    51e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    51ed:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    51f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    51f5:	48 8b 00             	mov    (%rax),%rax
    51f8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    51fc:	48 c1 e2 03          	shl    $0x3,%rdx
    5200:	48 01 c2             	add    %rax,%rdx
    5203:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5207:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    520b:	90                   	nop
    520c:	c9                   	leave
    520d:	c3                   	ret

000000000000520e <_ZSt27__uninitialized_default_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    520e:	55                   	push   %rbp
    520f:	48 89 e5             	mov    %rsp,%rbp
    5212:	48 83 ec 20          	sub    $0x20,%rsp
    5216:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    521a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    521e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    5222:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5226:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    522a:	48 89 d6             	mov    %rdx,%rsi
    522d:	48 89 c7             	mov    %rax,%rdi
    5230:	e8 e2 00 00 00       	call   5317 <_ZSt25__uninitialized_default_nIPP12VkPipeline_TmET_S3_T0_>
    5235:	c9                   	leave
    5236:	c3                   	ret

0000000000005237 <_ZSt8_DestroyIPP12VkPipeline_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    5237:	55                   	push   %rbp
    5238:	48 89 e5             	mov    %rsp,%rbp
    523b:	48 83 ec 10          	sub    $0x10,%rsp
    523f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5243:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    5247:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    524b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    524f:	48 89 d6             	mov    %rdx,%rsi
    5252:	48 89 c7             	mov    %rax,%rdi
    5255:	e8 e6 00 00 00       	call   5340 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12VkPipeline_TEEvT_S5_>
    }
    525a:	90                   	nop
    525b:	c9                   	leave
    525c:	c3                   	ret
    525d:	90                   	nop

000000000000525e <_ZNSt15__new_allocatorIP12VkPipeline_TEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    525e:	55                   	push   %rbp
    525f:	48 89 e5             	mov    %rsp,%rbp
    5262:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5266:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    526a:	90                   	nop
    526b:	5d                   	pop    %rbp
    526c:	c3                   	ret

000000000000526d <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    526d:	55                   	push   %rbp
    526e:	48 89 e5             	mov    %rsp,%rbp
    5271:	48 83 ec 20          	sub    $0x20,%rsp
    5275:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5279:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    527d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    5281:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5285:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5289:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    528d:	48 89 ce             	mov    %rcx,%rsi
    5290:	48 89 c7             	mov    %rax,%rdi
    5293:	e8 b8 00 00 00       	call   5350 <_ZNSt15__new_allocatorIP12VkPipeline_TE10deallocateEPS1_m>
    5298:	90                   	nop
    5299:	c9                   	leave
    529a:	c3                   	ret

000000000000529b <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    529b:	55                   	push   %rbp
    529c:	48 89 e5             	mov    %rsp,%rbp
    529f:	48 83 ec 10          	sub    $0x10,%rsp
    52a3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    52a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52ab:	48 89 c7             	mov    %rax,%rdi
    52ae:	e8 cf 00 00 00       	call   5382 <_ZNKSt15__new_allocatorIP12VkPipeline_TE8max_sizeEv>
      }
    52b3:	c9                   	leave
    52b4:	c3                   	ret
    52b5:	90                   	nop

00000000000052b6 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    52b6:	55                   	push   %rbp
    52b7:	48 89 e5             	mov    %rsp,%rbp
    52ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    52be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52c2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    52c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52cd:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    52d4:	00 
    52d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52d9:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    52e0:	00 
	{ }
    52e1:	90                   	nop
    52e2:	5d                   	pop    %rbp
    52e3:	c3                   	ret

00000000000052e4 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    52e4:	55                   	push   %rbp
    52e5:	48 89 e5             	mov    %rsp,%rbp
    52e8:	48 83 ec 10          	sub    $0x10,%rsp
    52ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    52f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    52f4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    52f9:	74 15                	je     5310 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE11_M_allocateEm+0x2c>
    52fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52ff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5303:	48 89 d6             	mov    %rdx,%rsi
    5306:	48 89 c7             	mov    %rax,%rdi
    5309:	e8 8e 00 00 00       	call   539c <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE8allocateERS2_m>
    530e:	eb 05                	jmp    5315 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE11_M_allocateEm+0x31>
    5310:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    5315:	c9                   	leave
    5316:	c3                   	ret

0000000000005317 <_ZSt25__uninitialized_default_nIPP12VkPipeline_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    5317:	55                   	push   %rbp
    5318:	48 89 e5             	mov    %rsp,%rbp
    531b:	48 83 ec 20          	sub    $0x20,%rsp
    531f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5323:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    5327:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    532b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    532f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5333:	48 89 d6             	mov    %rdx,%rsi
    5336:	48 89 c7             	mov    %rax,%rdi
    5339:	e8 88 00 00 00       	call   53c6 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP12VkPipeline_TmEET_S5_T0_>
    }
    533e:	c9                   	leave
    533f:	c3                   	ret

0000000000005340 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12VkPipeline_TEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    5340:	55                   	push   %rbp
    5341:	48 89 e5             	mov    %rsp,%rbp
    5344:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5348:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    534c:	90                   	nop
    534d:	5d                   	pop    %rbp
    534e:	c3                   	ret
    534f:	90                   	nop

0000000000005350 <_ZNSt15__new_allocatorIP12VkPipeline_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    5350:	55                   	push   %rbp
    5351:	48 89 e5             	mov    %rsp,%rbp
    5354:	48 83 ec 20          	sub    $0x20,%rsp
    5358:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    535c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5360:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    5364:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5368:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    536f:	00 
    5370:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5374:	48 89 d6             	mov    %rdx,%rsi
    5377:	48 89 c7             	mov    %rax,%rdi
    537a:	e8 a1 df ff ff       	call   3320 <_ZdlPvm@plt>
      }
    537f:	c9                   	leave
    5380:	c3                   	ret
    5381:	90                   	nop

0000000000005382 <_ZNKSt15__new_allocatorIP12VkPipeline_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    5382:	55                   	push   %rbp
    5383:	48 89 e5             	mov    %rsp,%rbp
    5386:	48 83 ec 10          	sub    $0x10,%rsp
    538a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    538e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5392:	48 89 c7             	mov    %rax,%rdi
    5395:	e8 8a 00 00 00       	call   5424 <_ZNKSt15__new_allocatorIP12VkPipeline_TE11_M_max_sizeEv>
    539a:	c9                   	leave
    539b:	c3                   	ret

000000000000539c <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
    539c:	55                   	push   %rbp
    539d:	48 89 e5             	mov    %rsp,%rbp
    53a0:	48 83 ec 10          	sub    $0x10,%rsp
    53a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    53a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    53ac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    53b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    53b4:	ba 00 00 00 00       	mov    $0x0,%edx
    53b9:	48 89 ce             	mov    %rcx,%rsi
    53bc:	48 89 c7             	mov    %rax,%rdi
    53bf:	e8 74 00 00 00       	call   5438 <_ZNSt15__new_allocatorIP12VkPipeline_TE8allocateEmPKv>
    53c4:	c9                   	leave
    53c5:	c3                   	ret

00000000000053c6 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP12VkPipeline_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    53c6:	55                   	push   %rbp
    53c7:	48 89 e5             	mov    %rsp,%rbp
    53ca:	48 83 ec 20          	sub    $0x20,%rsp
    53ce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    53d2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    53d6:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    53db:	74 40                	je     541d <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP12VkPipeline_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
    53dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    53e1:	48 89 c7             	mov    %rax,%rdi
    53e4:	e8 b0 00 00 00       	call   5499 <_ZSt11__addressofIP12VkPipeline_TEPT_RS2_>
    53e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    53ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    53f1:	48 89 c7             	mov    %rax,%rdi
    53f4:	e8 ae 00 00 00       	call   54a7 <_ZSt10_ConstructIP12VkPipeline_TJEEvPT_DpOT0_>
	      ++__first;
    53f9:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    53fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5402:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    5406:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    540a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    540e:	48 89 ce             	mov    %rcx,%rsi
    5411:	48 89 c7             	mov    %rax,%rdi
    5414:	e8 b5 00 00 00       	call   54ce <_ZSt6fill_nIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_>
    5419:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    541d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    5421:	c9                   	leave
    5422:	c3                   	ret
    5423:	90                   	nop

0000000000005424 <_ZNKSt15__new_allocatorIP12VkPipeline_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    5424:	55                   	push   %rbp
    5425:	48 89 e5             	mov    %rsp,%rbp
    5428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    542c:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    5433:	ff ff 0f 
      }
    5436:	5d                   	pop    %rbp
    5437:	c3                   	ret

0000000000005438 <_ZNSt15__new_allocatorIP12VkPipeline_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    5438:	55                   	push   %rbp
    5439:	48 89 e5             	mov    %rsp,%rbp
    543c:	48 83 ec 20          	sub    $0x20,%rsp
    5440:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5444:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5448:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    544c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5450:	48 89 c7             	mov    %rax,%rdi
    5453:	e8 cc ff ff ff       	call   5424 <_ZNKSt15__new_allocatorIP12VkPipeline_TE11_M_max_sizeEv>
    5458:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    545c:	0f 92 c0             	setb   %al
    545f:	0f b6 c0             	movzbl %al,%eax
    5462:	48 85 c0             	test   %rax,%rax
    5465:	0f 95 c0             	setne  %al
    5468:	84 c0                	test   %al,%al
    546a:	74 1a                	je     5486 <_ZNSt15__new_allocatorIP12VkPipeline_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    546c:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    5473:	ff ff 1f 
    5476:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    547a:	73 05                	jae    5481 <_ZNSt15__new_allocatorIP12VkPipeline_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    547c:	e8 af dd ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    5481:	e8 3a dc ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    5486:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    548a:	48 c1 e0 03          	shl    $0x3,%rax
    548e:	48 89 c7             	mov    %rax,%rdi
    5491:	e8 7a de ff ff       	call   3310 <_Znwm@plt>
    5496:	90                   	nop
      }
    5497:	c9                   	leave
    5498:	c3                   	ret

0000000000005499 <_ZSt11__addressofIP12VkPipeline_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    5499:	55                   	push   %rbp
    549a:	48 89 e5             	mov    %rsp,%rbp
    549d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    54a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    54a5:	5d                   	pop    %rbp
    54a6:	c3                   	ret

00000000000054a7 <_ZSt10_ConstructIP12VkPipeline_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    54a7:	55                   	push   %rbp
    54a8:	48 89 e5             	mov    %rsp,%rbp
    54ab:	48 83 ec 10          	sub    $0x10,%rsp
    54af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    54b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    54b7:	48 89 c6             	mov    %rax,%rsi
    54ba:	bf 08 00 00 00       	mov    $0x8,%edi
    54bf:	e8 9c e8 ff ff       	call   3d60 <_ZnwmPv>
    54c4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
    54cb:	90                   	nop
    54cc:	c9                   	leave
    54cd:	c3                   	ret

00000000000054ce <_ZSt6fill_nIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    54ce:	55                   	push   %rbp
    54cf:	48 89 e5             	mov    %rsp,%rbp
    54d2:	48 83 ec 20          	sub    $0x20,%rsp
    54d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    54da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    54de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    54e2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    54e6:	48 89 c7             	mov    %rax,%rdi
    54e9:	e8 24 00 00 00       	call   5512 <_ZSt19__iterator_categoryIPP12VkPipeline_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    54ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    54f2:	48 89 c7             	mov    %rax,%rdi
    54f5:	e8 78 e8 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    54fa:	48 89 c1             	mov    %rax,%rcx
    54fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5501:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5505:	48 89 ce             	mov    %rcx,%rsi
    5508:	48 89 c7             	mov    %rax,%rdi
    550b:	e8 0d 00 00 00       	call   551d <_ZSt10__fill_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
    5510:	c9                   	leave
    5511:	c3                   	ret

0000000000005512 <_ZSt19__iterator_categoryIPP12VkPipeline_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
    5512:	55                   	push   %rbp
    5513:	48 89 e5             	mov    %rsp,%rbp
    5516:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    551a:	90                   	nop
    551b:	5d                   	pop    %rbp
    551c:	c3                   	ret

000000000000551d <_ZSt10__fill_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    551d:	55                   	push   %rbp
    551e:	48 89 e5             	mov    %rsp,%rbp
    5521:	48 83 ec 20          	sub    $0x20,%rsp
    5525:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5529:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    552d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    5531:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    5536:	75 06                	jne    553e <_ZSt10__fill_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    5538:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    553c:	eb 3a                	jmp    5578 <_ZSt10__fill_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    553e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5542:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5549:	00 
    554a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    554e:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    5552:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5556:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    555a:	48 89 ce             	mov    %rcx,%rsi
    555d:	48 89 c7             	mov    %rax,%rdi
    5560:	e8 15 00 00 00       	call   557a <_ZSt8__fill_aIPP12VkPipeline_TS1_EvT_S3_RKT0_>
      return __first + __n;
    5565:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5569:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5570:	00 
    5571:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5575:	48 01 d0             	add    %rdx,%rax
    }
    5578:	c9                   	leave
    5579:	c3                   	ret

000000000000557a <_ZSt8__fill_aIPP12VkPipeline_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    557a:	55                   	push   %rbp
    557b:	48 89 e5             	mov    %rsp,%rbp
    557e:	48 83 ec 20          	sub    $0x20,%rsp
    5582:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5586:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    558a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    558e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5592:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5596:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    559a:	48 89 ce             	mov    %rcx,%rsi
    559d:	48 89 c7             	mov    %rax,%rdi
    55a0:	e8 03 00 00 00       	call   55a8 <_ZSt9__fill_a1IPP12VkPipeline_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
    55a5:	90                   	nop
    55a6:	c9                   	leave
    55a7:	c3                   	ret

00000000000055a8 <_ZSt9__fill_a1IPP12VkPipeline_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    55a8:	55                   	push   %rbp
    55a9:	48 89 e5             	mov    %rsp,%rbp
    55ac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    55b0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    55b4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
    55b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    55bc:	48 8b 00             	mov    (%rax),%rax
    55bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
    55c3:	eb 10                	jmp    55d5 <_ZSt9__fill_a1IPP12VkPipeline_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
    55c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    55c9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    55cd:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    55d0:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    55d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    55d9:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    55dd:	75 e6                	jne    55c5 <_ZSt9__fill_a1IPP12VkPipeline_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
    55df:	90                   	nop
    55e0:	90                   	nop
    55e1:	5d                   	pop    %rbp
    55e2:	c3                   	ret

00000000000055e3 <_ZN3vkh13destroyWindowEP10GLFWwindow>:
#include "destroy_object.hpp"

namespace vkh {

void destroyWindow(GLFWwindow *window) { glfwDestroyWindow(window); }
    55e3:	55                   	push   %rbp
    55e4:	48 89 e5             	mov    %rsp,%rbp
    55e7:	48 83 ec 10          	sub    $0x10,%rsp
    55eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    55ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    55f3:	48 89 c7             	mov    %rax,%rdi
    55f6:	e8 b5 da ff ff       	call   30b0 <glfwDestroyWindow@plt>
    55fb:	90                   	nop
    55fc:	c9                   	leave
    55fd:	c3                   	ret

00000000000055fe <_ZN3vkh15destroyInstanceEP12VkInstance_TPK21VkAllocationCallbacks>:

void destroyInstance(VkInstance instance,
                     const VkAllocationCallbacks *pAllocator) {
    55fe:	55                   	push   %rbp
    55ff:	48 89 e5             	mov    %rsp,%rbp
    5602:	48 83 ec 10          	sub    $0x10,%rsp
    5606:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    560a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  vkDestroyInstance(instance, pAllocator);
    560e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5612:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5616:	48 89 d6             	mov    %rdx,%rsi
    5619:	48 89 c7             	mov    %rax,%rdi
    561c:	e8 0f dd ff ff       	call   3330 <vkDestroyInstance@plt>
}
    5621:	90                   	nop
    5622:	c9                   	leave
    5623:	c3                   	ret

0000000000005624 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>:

void destroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator) {
    5624:	55                   	push   %rbp
    5625:	48 89 e5             	mov    %rsp,%rbp
    5628:	48 83 ec 10          	sub    $0x10,%rsp
    562c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5630:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  vkDestroyDevice(device, pAllocator);
    5634:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5638:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    563c:	48 89 d6             	mov    %rdx,%rsi
    563f:	48 89 c7             	mov    %rax,%rdi
    5642:	e8 09 dc ff ff       	call   3250 <vkDestroyDevice@plt>
}
    5647:	90                   	nop
    5648:	c9                   	leave
    5649:	c3                   	ret

000000000000564a <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>:

void destroySurface(VkInstance instance, VkSurfaceKHR surface,
                    const VkAllocationCallbacks *pAllocator) {
    564a:	55                   	push   %rbp
    564b:	48 89 e5             	mov    %rsp,%rbp
    564e:	48 83 ec 20          	sub    $0x20,%rsp
    5652:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5656:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    565a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroySurfaceKHR(instance, surface, pAllocator);
    565e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5662:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    566a:	48 89 ce             	mov    %rcx,%rsi
    566d:	48 89 c7             	mov    %rax,%rdi
    5670:	e8 6b df ff ff       	call   35e0 <vkDestroySurfaceKHR@plt>
}
    5675:	90                   	nop
    5676:	c9                   	leave
    5677:	c3                   	ret

0000000000005678 <_ZN3vkh16destroySwapchainEP10VkDevice_TP16VkSwapchainKHR_TPK21VkAllocationCallbacks>:

void destroySwapchain(VkDevice device, VkSwapchainKHR swapchain,
                      const VkAllocationCallbacks *pAllocator) {
    5678:	55                   	push   %rbp
    5679:	48 89 e5             	mov    %rsp,%rbp
    567c:	48 83 ec 20          	sub    $0x20,%rsp
    5680:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5684:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5688:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroySwapchainKHR(device, swapchain, pAllocator);
    568c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5690:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5698:	48 89 ce             	mov    %rcx,%rsi
    569b:	48 89 c7             	mov    %rax,%rdi
    569e:	e8 fd d9 ff ff       	call   30a0 <vkDestroySwapchainKHR@plt>
}
    56a3:	90                   	nop
    56a4:	c9                   	leave
    56a5:	c3                   	ret

00000000000056a6 <_ZN3vkh16destroyImageViewEP10VkDevice_TP13VkImageView_TPK21VkAllocationCallbacks>:

void destroyImageView(VkDevice device, VkImageView imageView,
                      const VkAllocationCallbacks *pAllocator) {
    56a6:	55                   	push   %rbp
    56a7:	48 89 e5             	mov    %rsp,%rbp
    56aa:	48 83 ec 20          	sub    $0x20,%rsp
    56ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    56b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    56b6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyImageView(device, imageView, pAllocator);
    56ba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    56be:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    56c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    56c6:	48 89 ce             	mov    %rcx,%rsi
    56c9:	48 89 c7             	mov    %rax,%rdi
    56cc:	e8 3f df ff ff       	call   3610 <vkDestroyImageView@plt>
}
    56d1:	90                   	nop
    56d2:	c9                   	leave
    56d3:	c3                   	ret

00000000000056d4 <_ZN3vkh15destroyPipelineEP10VkDevice_TP12VkPipeline_TPK21VkAllocationCallbacks>:

void destroyPipeline(VkDevice device, VkPipeline pipeline,
                     const VkAllocationCallbacks *pAllocator) {
    56d4:	55                   	push   %rbp
    56d5:	48 89 e5             	mov    %rsp,%rbp
    56d8:	48 83 ec 20          	sub    $0x20,%rsp
    56dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    56e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    56e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyPipeline(device, pipeline, pAllocator);
    56e8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    56ec:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    56f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    56f4:	48 89 ce             	mov    %rcx,%rsi
    56f7:	48 89 c7             	mov    %rax,%rdi
    56fa:	e8 c1 dc ff ff       	call   33c0 <vkDestroyPipeline@plt>
}
    56ff:	90                   	nop
    5700:	c9                   	leave
    5701:	c3                   	ret

0000000000005702 <_ZN3vkh16destroyPipelinesEP10VkDevice_TSt6vectorIP12VkPipeline_TSaIS4_EEPK21VkAllocationCallbacks>:

void destroyPipelines(VkDevice device, std::vector<VkPipeline> pipelines,
                      const VkAllocationCallbacks *pAllocator) {
    5702:	55                   	push   %rbp
    5703:	48 89 e5             	mov    %rsp,%rbp
    5706:	48 83 ec 40          	sub    $0x40,%rsp
    570a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    570e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5712:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  for (auto &pipeline : pipelines) {
    5716:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    571a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    571e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5722:	48 89 c7             	mov    %rax,%rdi
    5725:	e8 96 00 00 00       	call   57c0 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE5beginEv>
    572a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    572e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5732:	48 89 c7             	mov    %rax,%rdi
    5735:	e8 ac 00 00 00       	call   57e6 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE3endEv>
    573a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    573e:	eb 36                	jmp    5776 <_ZN3vkh16destroyPipelinesEP10VkDevice_TSt6vectorIP12VkPipeline_TSaIS4_EEPK21VkAllocationCallbacks+0x74>
    5740:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    5744:	48 89 c7             	mov    %rax,%rdi
    5747:	e8 1e 01 00 00       	call   586a <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEdeEv>
    574c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    vkDestroyPipeline(device, pipeline, pAllocator);
    5750:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5754:	48 8b 08             	mov    (%rax),%rcx
    5757:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    575b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    575f:	48 89 ce             	mov    %rcx,%rsi
    5762:	48 89 c7             	mov    %rax,%rdi
    5765:	e8 56 dc ff ff       	call   33c0 <vkDestroyPipeline@plt>
  for (auto &pipeline : pipelines) {
    576a:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    576e:	48 89 c7             	mov    %rax,%rdi
    5771:	e8 d4 00 00 00       	call   584a <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEppEv>
    5776:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    577a:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    577e:	48 89 d6             	mov    %rdx,%rsi
    5781:	48 89 c7             	mov    %rax,%rdi
    5784:	e8 86 00 00 00       	call   580f <_ZN9__gnu_cxxneIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    5789:	84 c0                	test   %al,%al
    578b:	75 b3                	jne    5740 <_ZN3vkh16destroyPipelinesEP10VkDevice_TSt6vectorIP12VkPipeline_TSaIS4_EEPK21VkAllocationCallbacks+0x3e>
  }
}
    578d:	90                   	nop
    578e:	90                   	nop
    578f:	c9                   	leave
    5790:	c3                   	ret

0000000000005791 <_ZN3vkh18destroyCommandPoolEP10VkDevice_TP15VkCommandPool_TPK21VkAllocationCallbacks>:

void destroyCommandPool(VkDevice device, VkCommandPool commandPool,
                        const VkAllocationCallbacks *pAllocator) {
    5791:	55                   	push   %rbp
    5792:	48 89 e5             	mov    %rsp,%rbp
    5795:	48 83 ec 20          	sub    $0x20,%rsp
    5799:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    579d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    57a1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyCommandPool(device, commandPool, pAllocator);
    57a5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    57a9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    57ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    57b1:	48 89 ce             	mov    %rcx,%rsi
    57b4:	48 89 c7             	mov    %rax,%rdi
    57b7:	e8 44 dd ff ff       	call   3500 <vkDestroyCommandPool@plt>
}
    57bc:	90                   	nop
    57bd:	c9                   	leave
    57be:	c3                   	ret
    57bf:	90                   	nop

00000000000057c0 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    57c0:	55                   	push   %rbp
    57c1:	48 89 e5             	mov    %rsp,%rbp
    57c4:	48 83 ec 20          	sub    $0x20,%rsp
    57c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    57cc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    57d0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    57d4:	48 89 d6             	mov    %rdx,%rsi
    57d7:	48 89 c7             	mov    %rax,%rdi
    57da:	e8 9d 00 00 00       	call   587c <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    57df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    57e3:	c9                   	leave
    57e4:	c3                   	ret
    57e5:	90                   	nop

00000000000057e6 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    57e6:	55                   	push   %rbp
    57e7:	48 89 e5             	mov    %rsp,%rbp
    57ea:	48 83 ec 20          	sub    $0x20,%rsp
    57ee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    57f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    57f6:	48 8d 50 08          	lea    0x8(%rax),%rdx
    57fa:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    57fe:	48 89 d6             	mov    %rdx,%rsi
    5801:	48 89 c7             	mov    %rax,%rdi
    5804:	e8 73 00 00 00       	call   587c <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    5809:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    580d:	c9                   	leave
    580e:	c3                   	ret

000000000000580f <_ZN9__gnu_cxxneIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    580f:	55                   	push   %rbp
    5810:	48 89 e5             	mov    %rsp,%rbp
    5813:	53                   	push   %rbx
    5814:	48 83 ec 18          	sub    $0x18,%rsp
    5818:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    581c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
    5820:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5824:	48 89 c7             	mov    %rax,%rdi
    5827:	e8 6e 00 00 00       	call   589a <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEE4baseEv>
    582c:	48 8b 18             	mov    (%rax),%rbx
    582f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5833:	48 89 c7             	mov    %rax,%rdi
    5836:	e8 5f 00 00 00       	call   589a <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEE4baseEv>
    583b:	48 8b 00             	mov    (%rax),%rax
    583e:	48 39 c3             	cmp    %rax,%rbx
    5841:	0f 95 c0             	setne  %al
    5844:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5848:	c9                   	leave
    5849:	c3                   	ret

000000000000584a <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    584a:	55                   	push   %rbp
    584b:	48 89 e5             	mov    %rsp,%rbp
    584e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    5852:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5856:	48 8b 00             	mov    (%rax),%rax
    5859:	48 8d 50 08          	lea    0x8(%rax),%rdx
    585d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5861:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    5864:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    5868:	5d                   	pop    %rbp
    5869:	c3                   	ret

000000000000586a <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    586a:	55                   	push   %rbp
    586b:	48 89 e5             	mov    %rsp,%rbp
    586e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    5872:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5876:	48 8b 00             	mov    (%rax),%rax
    5879:	5d                   	pop    %rbp
    587a:	c3                   	ret
    587b:	90                   	nop

000000000000587c <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    587c:	55                   	push   %rbp
    587d:	48 89 e5             	mov    %rsp,%rbp
    5880:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5884:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    5888:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    588c:	48 8b 10             	mov    (%rax),%rdx
    588f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5893:	48 89 10             	mov    %rdx,(%rax)
    5896:	90                   	nop
    5897:	5d                   	pop    %rbp
    5898:	c3                   	ret
    5899:	90                   	nop

000000000000589a <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    589a:	55                   	push   %rbp
    589b:	48 89 e5             	mov    %rsp,%rbp
    589e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    58a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    58a6:	5d                   	pop    %rbp
    58a7:	c3                   	ret

00000000000058a8 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv>:
#include "get_list.hpp"

namespace vkh {

std::vector<VkLayerProperties> getAvailableInstanceLayerPropertyList() {
    58a8:	55                   	push   %rbp
    58a9:	48 89 e5             	mov    %rsp,%rbp
    58ac:	53                   	push   %rbx
    58ad:	48 83 ec 28          	sub    $0x28,%rsp
    58b1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  uint32_t layerCount;
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    58b5:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    58b9:	be 00 00 00 00       	mov    $0x0,%esi
    58be:	48 89 c7             	mov    %rax,%rdi
    58c1:	e8 2a db ff ff       	call   33f0 <vkEnumerateInstanceLayerProperties@plt>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    58c6:	8b 45 e8             	mov    -0x18(%rbp),%eax
    58c9:	89 c3                	mov    %eax,%ebx
    58cb:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    58cf:	48 89 c7             	mov    %rax,%rdi
    58d2:	e8 47 11 00 00       	call   6a1e <_ZNSaI17VkLayerPropertiesEC1Ev>
    58d7:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    58db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    58df:	48 89 de             	mov    %rbx,%rsi
    58e2:	48 89 c7             	mov    %rax,%rdi
    58e5:	e8 6c 11 00 00       	call   6a56 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>
    58ea:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    58ee:	48 89 c7             	mov    %rax,%rdi
    58f1:	e8 44 11 00 00       	call   6a3a <_ZNSaI17VkLayerPropertiesED1Ev>
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    58f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    58fa:	48 89 c7             	mov    %rax,%rdi
    58fd:	e8 0e 12 00 00       	call   6b10 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE4dataEv>
    5902:	48 89 c2             	mov    %rax,%rdx
    5905:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    5909:	48 89 d6             	mov    %rdx,%rsi
    590c:	48 89 c7             	mov    %rax,%rdi
    590f:	e8 dc da ff ff       	call   33f0 <vkEnumerateInstanceLayerProperties@plt>
  return availableLayers;
    5914:	eb 34                	jmp    594a <_ZN3vkh37getAvailableInstanceLayerPropertyListEv+0xa2>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    5916:	48 89 c3             	mov    %rax,%rbx
    5919:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    591d:	48 89 c7             	mov    %rax,%rdi
    5920:	e8 15 11 00 00       	call   6a3a <_ZNSaI17VkLayerPropertiesED1Ev>
    5925:	48 89 d8             	mov    %rbx,%rax
    5928:	48 89 c7             	mov    %rax,%rdi
    592b:	e8 c0 dc ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    5930:	48 89 c3             	mov    %rax,%rbx
    5933:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5937:	48 89 c7             	mov    %rax,%rdi
    593a:	e8 8d 11 00 00       	call   6acc <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    593f:	48 89 d8             	mov    %rbx,%rax
    5942:	48 89 c7             	mov    %rax,%rdi
    5945:	e8 a6 dc ff ff       	call   35f0 <_Unwind_Resume@plt>
    594a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    594e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5952:	c9                   	leave
    5953:	c3                   	ret

0000000000005954 <_ZN3vkh33getAvailableInstanceExtensionListEPKc>:

std::vector<VkExtensionProperties>
getAvailableInstanceExtensionList(const char *pLayerName) {
    5954:	55                   	push   %rbp
    5955:	48 89 e5             	mov    %rsp,%rbp
    5958:	41 54                	push   %r12
    595a:	53                   	push   %rbx
    595b:	48 83 ec 20          	sub    $0x20,%rsp
    595f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5963:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  uint32_t propertyCount;
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    5967:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    596b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    596f:	ba 00 00 00 00       	mov    $0x0,%edx
    5974:	48 89 ce             	mov    %rcx,%rsi
    5977:	48 89 c7             	mov    %rax,%rdi
    597a:	e8 e1 d8 ff ff       	call   3260 <vkEnumerateInstanceExtensionProperties@plt>
                                             nullptr) != VK_SUCCESS) {
    597f:	85 c0                	test   %eax,%eax
    5981:	0f 95 c0             	setne  %al
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    5984:	84 c0                	test   %al,%al
    5986:	74 3b                	je     59c3 <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0x6f>
    throw std::runtime_error("Failed to get instance extension list.");
    5988:	bf 10 00 00 00       	mov    $0x10,%edi
    598d:	e8 be d7 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    5992:	48 89 c3             	mov    %rax,%rbx
    5995:	48 8d 05 04 f6 00 00 	lea    0xf604(%rip),%rax        # 14fa0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x8>
    599c:	48 89 c6             	mov    %rax,%rsi
    599f:	48 89 df             	mov    %rbx,%rdi
    59a2:	e8 39 d7 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    59a7:	48 8b 05 fa c5 01 00 	mov    0x1c5fa(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    59ae:	48 89 c2             	mov    %rax,%rdx
    59b1:	48 8d 05 88 c3 01 00 	lea    0x1c388(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    59b8:	48 89 c6             	mov    %rax,%rsi
    59bb:	48 89 df             	mov    %rbx,%rdi
    59be:	e8 dd db ff ff       	call   35a0 <__cxa_throw@plt>
  }
  std::vector<VkExtensionProperties> instanceExtensions{propertyCount};
    59c3:	8b 45 e8             	mov    -0x18(%rbp),%eax
    59c6:	89 c3                	mov    %eax,%ebx
    59c8:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    59cc:	48 89 c7             	mov    %rax,%rdi
    59cf:	e8 b8 11 00 00       	call   6b8c <_ZNSaI21VkExtensionPropertiesEC1Ev>
    59d4:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    59d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    59dc:	48 89 de             	mov    %rbx,%rsi
    59df:	48 89 c7             	mov    %rax,%rdi
    59e2:	e8 dd 11 00 00       	call   6bc4 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>
    59e7:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    59eb:	48 89 c7             	mov    %rax,%rdi
    59ee:	e8 b5 11 00 00       	call   6ba8 <_ZNSaI21VkExtensionPropertiesED1Ev>
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    59f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    59f7:	48 89 c7             	mov    %rax,%rdi
    59fa:	e8 7f 12 00 00       	call   6c7e <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE4dataEv>
    59ff:	48 89 c2             	mov    %rax,%rdx
    5a02:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    5a06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5a0a:	48 89 ce             	mov    %rcx,%rsi
    5a0d:	48 89 c7             	mov    %rax,%rdi
    5a10:	e8 4b d8 ff ff       	call   3260 <vkEnumerateInstanceExtensionProperties@plt>
                                             instanceExtensions.data()) !=
    5a15:	85 c0                	test   %eax,%eax
    5a17:	0f 95 c0             	setne  %al
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    5a1a:	84 c0                	test   %al,%al
    5a1c:	0f 84 95 00 00 00    	je     5ab7 <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0x163>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to get instance extension list.");
    5a22:	bf 10 00 00 00       	mov    $0x10,%edi
    5a27:	e8 24 d7 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    5a2c:	48 89 c3             	mov    %rax,%rbx
    5a2f:	48 8d 05 6a f5 00 00 	lea    0xf56a(%rip),%rax        # 14fa0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x8>
    5a36:	48 89 c6             	mov    %rax,%rsi
    5a39:	48 89 df             	mov    %rbx,%rdi
    5a3c:	e8 9f d6 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    5a41:	48 8b 05 60 c5 01 00 	mov    0x1c560(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    5a48:	48 89 c2             	mov    %rax,%rdx
    5a4b:	48 8d 05 ee c2 01 00 	lea    0x1c2ee(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    5a52:	48 89 c6             	mov    %rax,%rsi
    5a55:	48 89 df             	mov    %rbx,%rdi
    5a58:	e8 43 db ff ff       	call   35a0 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get instance extension list.");
    5a5d:	49 89 c4             	mov    %rax,%r12
    5a60:	48 89 df             	mov    %rbx,%rdi
    5a63:	e8 98 d7 ff ff       	call   3200 <__cxa_free_exception@plt>
    5a68:	4c 89 e0             	mov    %r12,%rax
    5a6b:	48 89 c7             	mov    %rax,%rdi
    5a6e:	e8 7d db ff ff       	call   35f0 <_Unwind_Resume@plt>
  std::vector<VkExtensionProperties> instanceExtensions{propertyCount};
    5a73:	48 89 c3             	mov    %rax,%rbx
    5a76:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5a7a:	48 89 c7             	mov    %rax,%rdi
    5a7d:	e8 26 11 00 00       	call   6ba8 <_ZNSaI21VkExtensionPropertiesED1Ev>
    5a82:	48 89 d8             	mov    %rbx,%rax
    5a85:	48 89 c7             	mov    %rax,%rdi
    5a88:	e8 63 db ff ff       	call   35f0 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get instance extension list.");
    5a8d:	49 89 c4             	mov    %rax,%r12
    5a90:	48 89 df             	mov    %rbx,%rdi
    5a93:	e8 68 d7 ff ff       	call   3200 <__cxa_free_exception@plt>
    5a98:	4c 89 e3             	mov    %r12,%rbx
    5a9b:	eb 03                	jmp    5aa0 <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0x14c>
  }
  return instanceExtensions;
}
    5a9d:	48 89 c3             	mov    %rax,%rbx
    5aa0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5aa4:	48 89 c7             	mov    %rax,%rdi
    5aa7:	e8 8e 11 00 00       	call   6c3a <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    5aac:	48 89 d8             	mov    %rbx,%rax
    5aaf:	48 89 c7             	mov    %rax,%rdi
    5ab2:	e8 39 db ff ff       	call   35f0 <_Unwind_Resume@plt>
  return instanceExtensions;
    5ab7:	90                   	nop
}
    5ab8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5abc:	48 83 c4 20          	add    $0x20,%rsp
    5ac0:	5b                   	pop    %rbx
    5ac1:	41 5c                	pop    %r12
    5ac3:	5d                   	pop    %rbp
    5ac4:	c3                   	ret

0000000000005ac5 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc>:

std::vector<VkExtensionProperties>
getAvailableDeviceExtensionList(VkPhysicalDevice physicalDevice,
                                const char *pLayerName) {
    5ac5:	55                   	push   %rbp
    5ac6:	48 89 e5             	mov    %rsp,%rbp
    5ac9:	41 54                	push   %r12
    5acb:	53                   	push   %rbx
    5acc:	48 83 ec 30          	sub    $0x30,%rsp
    5ad0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5ad4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5ad8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  uint32_t propertyCount;
  if (vkEnumerateDeviceExtensionProperties(
    5adc:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    5ae0:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    5ae4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5ae8:	b9 00 00 00 00       	mov    $0x0,%ecx
    5aed:	48 89 c7             	mov    %rax,%rdi
    5af0:	e8 eb d9 ff ff       	call   34e0 <vkEnumerateDeviceExtensionProperties@plt>
          physicalDevice, pLayerName, &propertyCount, nullptr) != VK_SUCCESS) {
    5af5:	85 c0                	test   %eax,%eax
    5af7:	0f 95 c0             	setne  %al
  if (vkEnumerateDeviceExtensionProperties(
    5afa:	84 c0                	test   %al,%al
    5afc:	74 3b                	je     5b39 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0x74>
    throw std::runtime_error("Failed to get device extension list.");
    5afe:	bf 10 00 00 00       	mov    $0x10,%edi
    5b03:	e8 48 d6 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    5b08:	48 89 c3             	mov    %rax,%rbx
    5b0b:	48 8d 05 b6 f4 00 00 	lea    0xf4b6(%rip),%rax        # 14fc8 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x30>
    5b12:	48 89 c6             	mov    %rax,%rsi
    5b15:	48 89 df             	mov    %rbx,%rdi
    5b18:	e8 c3 d5 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    5b1d:	48 8b 05 84 c4 01 00 	mov    0x1c484(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    5b24:	48 89 c2             	mov    %rax,%rdx
    5b27:	48 8d 05 12 c2 01 00 	lea    0x1c212(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    5b2e:	48 89 c6             	mov    %rax,%rsi
    5b31:	48 89 df             	mov    %rbx,%rdi
    5b34:	e8 67 da ff ff       	call   35a0 <__cxa_throw@plt>
  }
  std::vector<VkExtensionProperties> deviceExtensions{propertyCount};
    5b39:	8b 45 e8             	mov    -0x18(%rbp),%eax
    5b3c:	89 c3                	mov    %eax,%ebx
    5b3e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5b42:	48 89 c7             	mov    %rax,%rdi
    5b45:	e8 42 10 00 00       	call   6b8c <_ZNSaI21VkExtensionPropertiesEC1Ev>
    5b4a:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    5b4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5b52:	48 89 de             	mov    %rbx,%rsi
    5b55:	48 89 c7             	mov    %rax,%rdi
    5b58:	e8 67 10 00 00       	call   6bc4 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>
    5b5d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5b61:	48 89 c7             	mov    %rax,%rdi
    5b64:	e8 3f 10 00 00       	call   6ba8 <_ZNSaI21VkExtensionPropertiesED1Ev>
  if (vkEnumerateDeviceExtensionProperties(
    5b69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5b6d:	48 89 c7             	mov    %rax,%rdi
    5b70:	e8 09 11 00 00       	call   6c7e <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE4dataEv>
    5b75:	48 89 c1             	mov    %rax,%rcx
    5b78:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    5b7c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    5b80:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5b84:	48 89 c7             	mov    %rax,%rdi
    5b87:	e8 54 d9 ff ff       	call   34e0 <vkEnumerateDeviceExtensionProperties@plt>
          physicalDevice, pLayerName, &propertyCount,
          deviceExtensions.data()) != VK_SUCCESS) {
    5b8c:	85 c0                	test   %eax,%eax
    5b8e:	0f 95 c0             	setne  %al
  if (vkEnumerateDeviceExtensionProperties(
    5b91:	84 c0                	test   %al,%al
    5b93:	0f 84 95 00 00 00    	je     5c2e <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0x169>
    throw std::runtime_error("Failed to get device extension list.");
    5b99:	bf 10 00 00 00       	mov    $0x10,%edi
    5b9e:	e8 ad d5 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    5ba3:	48 89 c3             	mov    %rax,%rbx
    5ba6:	48 8d 05 1b f4 00 00 	lea    0xf41b(%rip),%rax        # 14fc8 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x30>
    5bad:	48 89 c6             	mov    %rax,%rsi
    5bb0:	48 89 df             	mov    %rbx,%rdi
    5bb3:	e8 28 d5 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    5bb8:	48 8b 05 e9 c3 01 00 	mov    0x1c3e9(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    5bbf:	48 89 c2             	mov    %rax,%rdx
    5bc2:	48 8d 05 77 c1 01 00 	lea    0x1c177(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    5bc9:	48 89 c6             	mov    %rax,%rsi
    5bcc:	48 89 df             	mov    %rbx,%rdi
    5bcf:	e8 cc d9 ff ff       	call   35a0 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get device extension list.");
    5bd4:	49 89 c4             	mov    %rax,%r12
    5bd7:	48 89 df             	mov    %rbx,%rdi
    5bda:	e8 21 d6 ff ff       	call   3200 <__cxa_free_exception@plt>
    5bdf:	4c 89 e0             	mov    %r12,%rax
    5be2:	48 89 c7             	mov    %rax,%rdi
    5be5:	e8 06 da ff ff       	call   35f0 <_Unwind_Resume@plt>
  std::vector<VkExtensionProperties> deviceExtensions{propertyCount};
    5bea:	48 89 c3             	mov    %rax,%rbx
    5bed:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5bf1:	48 89 c7             	mov    %rax,%rdi
    5bf4:	e8 af 0f 00 00       	call   6ba8 <_ZNSaI21VkExtensionPropertiesED1Ev>
    5bf9:	48 89 d8             	mov    %rbx,%rax
    5bfc:	48 89 c7             	mov    %rax,%rdi
    5bff:	e8 ec d9 ff ff       	call   35f0 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get device extension list.");
    5c04:	49 89 c4             	mov    %rax,%r12
    5c07:	48 89 df             	mov    %rbx,%rdi
    5c0a:	e8 f1 d5 ff ff       	call   3200 <__cxa_free_exception@plt>
    5c0f:	4c 89 e3             	mov    %r12,%rbx
    5c12:	eb 03                	jmp    5c17 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0x152>
  }
  return deviceExtensions;
}
    5c14:	48 89 c3             	mov    %rax,%rbx
    5c17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5c1b:	48 89 c7             	mov    %rax,%rdi
    5c1e:	e8 17 10 00 00       	call   6c3a <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    5c23:	48 89 d8             	mov    %rbx,%rax
    5c26:	48 89 c7             	mov    %rax,%rdi
    5c29:	e8 c2 d9 ff ff       	call   35f0 <_Unwind_Resume@plt>
  return deviceExtensions;
    5c2e:	90                   	nop
}
    5c2f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5c33:	48 83 c4 30          	add    $0x30,%rsp
    5c37:	5b                   	pop    %rbx
    5c38:	41 5c                	pop    %r12
    5c3a:	5d                   	pop    %rbp
    5c3b:	c3                   	ret

0000000000005c3c <_ZN3vkh36getRequiredInstanceExtensionNameListEv>:

std::vector<const char *> getRequiredInstanceExtensionNameList() {
    5c3c:	55                   	push   %rbp
    5c3d:	48 89 e5             	mov    %rsp,%rbp
    5c40:	53                   	push   %rbx
    5c41:	48 83 ec 38          	sub    $0x38,%rsp
    5c45:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  uint32_t requiredExtensionCount;
  const char **ppRequiredExtensions =
      glfwGetRequiredInstanceExtensions(&requiredExtensionCount);
    5c49:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    5c4d:	48 89 c7             	mov    %rax,%rdi
    5c50:	e8 cb d5 ff ff       	call   3220 <glfwGetRequiredInstanceExtensions@plt>
    5c55:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  std::vector<const char *> requiredInstanceExtensions{requiredExtensionCount};
    5c59:	8b 45 d8             	mov    -0x28(%rbp),%eax
    5c5c:	89 c3                	mov    %eax,%ebx
    5c5e:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    5c62:	48 89 c7             	mov    %rax,%rdi
    5c65:	e8 90 10 00 00       	call   6cfa <_ZNSaIPKcEC1Ev>
    5c6a:	48 8d 55 df          	lea    -0x21(%rbp),%rdx
    5c6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5c72:	48 89 de             	mov    %rbx,%rsi
    5c75:	48 89 c7             	mov    %rax,%rdi
    5c78:	e8 b5 10 00 00       	call   6d32 <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>
    5c7d:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    5c81:	48 89 c7             	mov    %rax,%rdi
    5c84:	e8 8d 10 00 00       	call   6d16 <_ZNSaIPKcED1Ev>
  for (uint32_t i = 0; i < requiredExtensionCount; ++i) {
    5c89:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    5c90:	eb 2e                	jmp    5cc0 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0x84>
    requiredInstanceExtensions[i] = ppRequiredExtensions[i];
    5c92:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5c95:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5c9c:	00 
    5c9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5ca1:	48 01 d0             	add    %rdx,%rax
    5ca4:	48 8b 18             	mov    (%rax),%rbx
    5ca7:	8b 55 ec             	mov    -0x14(%rbp),%edx
    5caa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5cae:	48 89 d6             	mov    %rdx,%rsi
    5cb1:	48 89 c7             	mov    %rax,%rdi
    5cb4:	e8 ef 10 00 00       	call   6da8 <_ZNSt6vectorIPKcSaIS1_EEixEm>
    5cb9:	48 89 18             	mov    %rbx,(%rax)
  for (uint32_t i = 0; i < requiredExtensionCount; ++i) {
    5cbc:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    5cc0:	8b 45 d8             	mov    -0x28(%rbp),%eax
    5cc3:	39 45 ec             	cmp    %eax,-0x14(%rbp)
    5cc6:	72 ca                	jb     5c92 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0x56>
  }
  return requiredInstanceExtensions;
    5cc8:	eb 1a                	jmp    5ce4 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xa8>
  std::vector<const char *> requiredInstanceExtensions{requiredExtensionCount};
    5cca:	48 89 c3             	mov    %rax,%rbx
    5ccd:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    5cd1:	48 89 c7             	mov    %rax,%rdi
    5cd4:	e8 3d 10 00 00       	call   6d16 <_ZNSaIPKcED1Ev>
    5cd9:	48 89 d8             	mov    %rbx,%rax
    5cdc:	48 89 c7             	mov    %rax,%rdi
    5cdf:	e8 0c d9 ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    5ce4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5ce8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5cec:	c9                   	leave
    5ced:	c3                   	ret

0000000000005cee <_ZN3vkh29getAvailableInstanceLayerListEv>:

std::vector<VkLayerProperties> getAvailableInstanceLayerList() {
    5cee:	55                   	push   %rbp
    5cef:	48 89 e5             	mov    %rsp,%rbp
    5cf2:	53                   	push   %rbx
    5cf3:	48 83 ec 28          	sub    $0x28,%rsp
    5cf7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  uint32_t layerCount;
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    5cfb:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    5cff:	be 00 00 00 00       	mov    $0x0,%esi
    5d04:	48 89 c7             	mov    %rax,%rdi
    5d07:	e8 e4 d6 ff ff       	call   33f0 <vkEnumerateInstanceLayerProperties@plt>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    5d0c:	8b 45 e8             	mov    -0x18(%rbp),%eax
    5d0f:	89 c3                	mov    %eax,%ebx
    5d11:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5d15:	48 89 c7             	mov    %rax,%rdi
    5d18:	e8 01 0d 00 00       	call   6a1e <_ZNSaI17VkLayerPropertiesEC1Ev>
    5d1d:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    5d21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5d25:	48 89 de             	mov    %rbx,%rsi
    5d28:	48 89 c7             	mov    %rax,%rdi
    5d2b:	e8 26 0d 00 00       	call   6a56 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>
    5d30:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5d34:	48 89 c7             	mov    %rax,%rdi
    5d37:	e8 fe 0c 00 00       	call   6a3a <_ZNSaI17VkLayerPropertiesED1Ev>
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    5d3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5d40:	48 89 c7             	mov    %rax,%rdi
    5d43:	e8 c8 0d 00 00       	call   6b10 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE4dataEv>
    5d48:	48 89 c2             	mov    %rax,%rdx
    5d4b:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    5d4f:	48 89 d6             	mov    %rdx,%rsi
    5d52:	48 89 c7             	mov    %rax,%rdi
    5d55:	e8 96 d6 ff ff       	call   33f0 <vkEnumerateInstanceLayerProperties@plt>
  return availableLayers;
    5d5a:	eb 34                	jmp    5d90 <_ZN3vkh29getAvailableInstanceLayerListEv+0xa2>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    5d5c:	48 89 c3             	mov    %rax,%rbx
    5d5f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5d63:	48 89 c7             	mov    %rax,%rdi
    5d66:	e8 cf 0c 00 00       	call   6a3a <_ZNSaI17VkLayerPropertiesED1Ev>
    5d6b:	48 89 d8             	mov    %rbx,%rax
    5d6e:	48 89 c7             	mov    %rax,%rdi
    5d71:	e8 7a d8 ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    5d76:	48 89 c3             	mov    %rax,%rbx
    5d79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5d7d:	48 89 c7             	mov    %rax,%rdi
    5d80:	e8 47 0d 00 00       	call   6acc <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    5d85:	48 89 d8             	mov    %rbx,%rax
    5d88:	48 89 c7             	mov    %rax,%rdi
    5d8b:	e8 60 d8 ff ff       	call   35f0 <_Unwind_Resume@plt>
    5d90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5d94:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5d98:	c9                   	leave
    5d99:	c3                   	ret

0000000000005d9a <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T>:

std::vector<VkPhysicalDevice> getPhysicalDeviceList(VkInstance instance) {
    5d9a:	55                   	push   %rbp
    5d9b:	48 89 e5             	mov    %rsp,%rbp
    5d9e:	41 54                	push   %r12
    5da0:	53                   	push   %rbx
    5da1:	48 83 ec 20          	sub    $0x20,%rsp
    5da5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5da9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  uint32_t physicalDeviceCount;
  vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, nullptr);
    5dad:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    5db1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5db5:	ba 00 00 00 00       	mov    $0x0,%edx
    5dba:	48 89 ce             	mov    %rcx,%rsi
    5dbd:	48 89 c7             	mov    %rax,%rdi
    5dc0:	e8 ab d3 ff ff       	call   3170 <vkEnumeratePhysicalDevices@plt>
  if (physicalDeviceCount == 0) {
    5dc5:	8b 45 e8             	mov    -0x18(%rbp),%eax
    5dc8:	85 c0                	test   %eax,%eax
    5dca:	75 3b                	jne    5e07 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T+0x6d>
    throw std::runtime_error(
        "Failed to find any physical device with Vulkan support.");
    5dcc:	bf 10 00 00 00       	mov    $0x10,%edi
    5dd1:	e8 7a d3 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    5dd6:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    5dd9:	48 8d 05 10 f2 00 00 	lea    0xf210(%rip),%rax        # 14ff0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x58>
    5de0:	48 89 c6             	mov    %rax,%rsi
    5de3:	48 89 df             	mov    %rbx,%rdi
    5de6:	e8 f5 d2 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
        "Failed to find any physical device with Vulkan support.");
    5deb:	48 8b 05 b6 c1 01 00 	mov    0x1c1b6(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    5df2:	48 89 c2             	mov    %rax,%rdx
    5df5:	48 8d 05 44 bf 01 00 	lea    0x1bf44(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    5dfc:	48 89 c6             	mov    %rax,%rsi
    5dff:	48 89 df             	mov    %rbx,%rdi
    5e02:	e8 99 d7 ff ff       	call   35a0 <__cxa_throw@plt>
  }
  std::vector<VkPhysicalDevice> physicalDevices{physicalDeviceCount};
    5e07:	8b 45 e8             	mov    -0x18(%rbp),%eax
    5e0a:	89 c3                	mov    %eax,%ebx
    5e0c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5e10:	48 89 c7             	mov    %rax,%rdi
    5e13:	e8 fe 0f 00 00       	call   6e16 <_ZNSaIP18VkPhysicalDevice_TEC1Ev>
    5e18:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    5e1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5e20:	48 89 de             	mov    %rbx,%rsi
    5e23:	48 89 c7             	mov    %rax,%rdi
    5e26:	e8 23 10 00 00       	call   6e4e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_>
    5e2b:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5e2f:	48 89 c7             	mov    %rax,%rdi
    5e32:	e8 fb 0f 00 00       	call   6e32 <_ZNSaIP18VkPhysicalDevice_TED1Ev>
  if (vkEnumeratePhysicalDevices(instance, &physicalDeviceCount,
    5e37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5e3b:	48 89 c7             	mov    %rax,%rdi
    5e3e:	e8 c5 10 00 00       	call   6f08 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>
    5e43:	48 89 c2             	mov    %rax,%rdx
    5e46:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    5e4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5e4e:	48 89 ce             	mov    %rcx,%rsi
    5e51:	48 89 c7             	mov    %rax,%rdi
    5e54:	e8 17 d3 ff ff       	call   3170 <vkEnumeratePhysicalDevices@plt>
                                 physicalDevices.data()) != VK_SUCCESS) {
    5e59:	85 c0                	test   %eax,%eax
    5e5b:	0f 95 c0             	setne  %al
  if (vkEnumeratePhysicalDevices(instance, &physicalDeviceCount,
    5e5e:	84 c0                	test   %al,%al
    5e60:	0f 84 95 00 00 00    	je     5efb <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T+0x161>
    throw std::runtime_error("Failed to get physical devices list.");
    5e66:	bf 10 00 00 00       	mov    $0x10,%edi
    5e6b:	e8 e0 d2 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    5e70:	48 89 c3             	mov    %rax,%rbx
    5e73:	48 8d 05 ae f1 00 00 	lea    0xf1ae(%rip),%rax        # 15028 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x90>
    5e7a:	48 89 c6             	mov    %rax,%rsi
    5e7d:	48 89 df             	mov    %rbx,%rdi
    5e80:	e8 5b d2 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    5e85:	48 8b 05 1c c1 01 00 	mov    0x1c11c(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    5e8c:	48 89 c2             	mov    %rax,%rdx
    5e8f:	48 8d 05 aa be 01 00 	lea    0x1beaa(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    5e96:	48 89 c6             	mov    %rax,%rsi
    5e99:	48 89 df             	mov    %rbx,%rdi
    5e9c:	e8 ff d6 ff ff       	call   35a0 <__cxa_throw@plt>
        "Failed to find any physical device with Vulkan support.");
    5ea1:	49 89 c4             	mov    %rax,%r12
    5ea4:	48 89 df             	mov    %rbx,%rdi
    5ea7:	e8 54 d3 ff ff       	call   3200 <__cxa_free_exception@plt>
    5eac:	4c 89 e0             	mov    %r12,%rax
    5eaf:	48 89 c7             	mov    %rax,%rdi
    5eb2:	e8 39 d7 ff ff       	call   35f0 <_Unwind_Resume@plt>
  std::vector<VkPhysicalDevice> physicalDevices{physicalDeviceCount};
    5eb7:	48 89 c3             	mov    %rax,%rbx
    5eba:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5ebe:	48 89 c7             	mov    %rax,%rdi
    5ec1:	e8 6c 0f 00 00       	call   6e32 <_ZNSaIP18VkPhysicalDevice_TED1Ev>
    5ec6:	48 89 d8             	mov    %rbx,%rax
    5ec9:	48 89 c7             	mov    %rax,%rdi
    5ecc:	e8 1f d7 ff ff       	call   35f0 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get physical devices list.");
    5ed1:	49 89 c4             	mov    %rax,%r12
    5ed4:	48 89 df             	mov    %rbx,%rdi
    5ed7:	e8 24 d3 ff ff       	call   3200 <__cxa_free_exception@plt>
    5edc:	4c 89 e3             	mov    %r12,%rbx
    5edf:	eb 03                	jmp    5ee4 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T+0x14a>
  };
  return physicalDevices;
}
    5ee1:	48 89 c3             	mov    %rax,%rbx
    5ee4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5ee8:	48 89 c7             	mov    %rax,%rdi
    5eeb:	e8 d4 0f 00 00       	call   6ec4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    5ef0:	48 89 d8             	mov    %rbx,%rax
    5ef3:	48 89 c7             	mov    %rax,%rdi
    5ef6:	e8 f5 d6 ff ff       	call   35f0 <_Unwind_Resume@plt>
  return physicalDevices;
    5efb:	90                   	nop
}
    5efc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f00:	48 83 c4 20          	add    $0x20,%rsp
    5f04:	5b                   	pop    %rbx
    5f05:	41 5c                	pop    %r12
    5f07:	5d                   	pop    %rbp
    5f08:	c3                   	ret

0000000000005f09 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_T>:

VkPhysicalDeviceProperties
getPhysicalDevicePropertyList(VkPhysicalDevice physicalDevice) {
    5f09:	55                   	push   %rbp
    5f0a:	48 89 e5             	mov    %rsp,%rbp
    5f0d:	48 83 ec 10          	sub    $0x10,%rsp
    5f11:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5f15:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  VkPhysicalDeviceProperties properties;
  vkGetPhysicalDeviceProperties(physicalDevice, &properties);
    5f19:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5f1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5f21:	48 89 d6             	mov    %rdx,%rsi
    5f24:	48 89 c7             	mov    %rax,%rdi
    5f27:	e8 c4 d1 ff ff       	call   30f0 <vkGetPhysicalDeviceProperties@plt>
  return properties;
    5f2c:	90                   	nop
}
    5f2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5f31:	c9                   	leave
    5f32:	c3                   	ret

0000000000005f33 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_TPv>:

VkPhysicalDeviceProperties2
getPhysicalDevicePropertyList(VkPhysicalDevice physicalDevice,
                              void *pNextProperty) {
    5f33:	55                   	push   %rbp
    5f34:	48 89 e5             	mov    %rsp,%rbp
    5f37:	48 83 ec 20          	sub    $0x20,%rsp
    5f3b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5f3f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5f43:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  VkPhysicalDeviceProperties2 properties;
  properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    5f47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5f4b:	c7 00 79 b0 9b 3b    	movl   $0x3b9bb079,(%rax)
  properties.pNext = pNextProperty;
    5f51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5f55:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5f59:	48 89 50 08          	mov    %rdx,0x8(%rax)
  vkGetPhysicalDeviceProperties2(physicalDevice, &properties);
    5f5d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5f61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5f65:	48 89 d6             	mov    %rdx,%rsi
    5f68:	48 89 c7             	mov    %rax,%rdi
    5f6b:	e8 60 d3 ff ff       	call   32d0 <vkGetPhysicalDeviceProperties2@plt>
  return properties;
    5f70:	90                   	nop
}
    5f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5f75:	c9                   	leave
    5f76:	c3                   	ret

0000000000005f77 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>:

std::vector<VkQueueFamilyProperties>
getPhysicalDeviceQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    5f77:	55                   	push   %rbp
    5f78:	48 89 e5             	mov    %rsp,%rbp
    5f7b:	53                   	push   %rbx
    5f7c:	48 83 ec 28          	sub    $0x28,%rsp
    5f80:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5f84:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  uint32_t queueFamilyPropertyCount;
  vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,
    5f88:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    5f8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5f90:	ba 00 00 00 00       	mov    $0x0,%edx
    5f95:	48 89 ce             	mov    %rcx,%rsi
    5f98:	48 89 c7             	mov    %rax,%rdi
    5f9b:	e8 70 d2 ff ff       	call   3210 <vkGetPhysicalDeviceQueueFamilyProperties@plt>
                                           &queueFamilyPropertyCount, nullptr);
  std::vector<VkQueueFamilyProperties> queueFamilyProperties{
      queueFamilyPropertyCount};
    5fa0:	8b 45 e8             	mov    -0x18(%rbp),%eax
    5fa3:	89 c3                	mov    %eax,%ebx
    5fa5:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5fa9:	48 89 c7             	mov    %rax,%rdi
    5fac:	e8 c9 0f 00 00       	call   6f7a <_ZNSaI23VkQueueFamilyPropertiesEC1Ev>
    5fb1:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    5fb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5fb9:	48 89 de             	mov    %rbx,%rsi
    5fbc:	48 89 c7             	mov    %rax,%rdi
    5fbf:	e8 ee 0f 00 00       	call   6fb2 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_>
    5fc4:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5fc8:	48 89 c7             	mov    %rax,%rdi
    5fcb:	e8 c6 0f 00 00       	call   6f96 <_ZNSaI23VkQueueFamilyPropertiesED1Ev>
  vkGetPhysicalDeviceQueueFamilyProperties(
    5fd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5fd4:	48 89 c7             	mov    %rax,%rdi
    5fd7:	e8 90 10 00 00       	call   706c <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4dataEv>
    5fdc:	48 89 c2             	mov    %rax,%rdx
    5fdf:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    5fe3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5fe7:	48 89 ce             	mov    %rcx,%rsi
    5fea:	48 89 c7             	mov    %rax,%rdi
    5fed:	e8 1e d2 ff ff       	call   3210 <vkGetPhysicalDeviceQueueFamilyProperties@plt>
      physicalDevice, &queueFamilyPropertyCount, queueFamilyProperties.data());
  return queueFamilyProperties;
    5ff2:	eb 34                	jmp    6028 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xb1>
      queueFamilyPropertyCount};
    5ff4:	48 89 c3             	mov    %rax,%rbx
    5ff7:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5ffb:	48 89 c7             	mov    %rax,%rdi
    5ffe:	e8 93 0f 00 00       	call   6f96 <_ZNSaI23VkQueueFamilyPropertiesED1Ev>
    6003:	48 89 d8             	mov    %rbx,%rax
    6006:	48 89 c7             	mov    %rax,%rdi
    6009:	e8 e2 d5 ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    600e:	48 89 c3             	mov    %rax,%rbx
    6011:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6015:	48 89 c7             	mov    %rax,%rdi
    6018:	e8 0b 10 00 00       	call   7028 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    601d:	48 89 d8             	mov    %rbx,%rax
    6020:	48 89 c7             	mov    %rax,%rdi
    6023:	e8 c8 d5 ff ff       	call   35f0 <_Unwind_Resume@plt>
    6028:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    602c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6030:	c9                   	leave
    6031:	c3                   	ret

0000000000006032 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T>:

std::vector<std::optional<VkQueueFamilyProperties>>
getGraphicsQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    6032:	55                   	push   %rbp
    6033:	48 89 e5             	mov    %rsp,%rbp
    6036:	53                   	push   %rbx
    6037:	48 83 ec 68          	sub    $0x68,%rsp
    603b:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    603f:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  auto queueFamilyProps =
      getPhysicalDeviceQueueFamilyPropertyList(physicalDevice);
    6043:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6047:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    604b:	48 89 d6             	mov    %rdx,%rsi
    604e:	48 89 c7             	mov    %rax,%rdi
    6051:	e8 21 ff ff ff       	call   5f77 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  std::vector<std::optional<VkQueueFamilyProperties>> graphicsQueueFamilies{
      queueFamilyProps.size()};
    6056:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    605a:	48 89 c7             	mov    %rax,%rdi
    605d:	e8 86 10 00 00       	call   70e8 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4sizeEv>
    6062:	48 89 c3             	mov    %rax,%rbx
    6065:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6069:	48 89 c7             	mov    %rax,%rdi
    606c:	e8 a5 10 00 00       	call   7116 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>
    6071:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
    6075:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6079:	48 89 de             	mov    %rbx,%rsi
    607c:	48 89 c7             	mov    %rax,%rdi
    607f:	e8 ca 10 00 00       	call   714e <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>
    6084:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6088:	48 89 c7             	mov    %rax,%rdi
    608b:	e8 a2 10 00 00       	call   7132 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
  std::size_t index = 0;
    6090:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    6097:	00 
  for (const auto &queueFamilyProp : queueFamilyProps) {
    6098:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    609c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    60a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    60a4:	48 89 c7             	mov    %rax,%rdi
    60a7:	e8 5c 11 00 00       	call   7208 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE5beginEv>
    60ac:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    60b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    60b4:	48 89 c7             	mov    %rax,%rdi
    60b7:	e8 72 11 00 00       	call   722e <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE3endEv>
    60bc:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    60c0:	eb 4e                	jmp    6110 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xde>
    60c2:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    60c6:	48 89 c7             	mov    %rax,%rdi
    60c9:	e8 e4 11 00 00       	call   72b2 <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    60ce:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if (queueFamilyProp.queueFlags & VK_QUEUE_GRAPHICS_BIT) {
    60d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    60d6:	8b 00                	mov    (%rax),%eax
    60d8:	83 e0 01             	and    $0x1,%eax
    60db:	85 c0                	test   %eax,%eax
    60dd:	74 25                	je     6104 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xd2>
      graphicsQueueFamilies[index] = queueFamilyProp;
    60df:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    60e3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    60e7:	48 89 d6             	mov    %rdx,%rsi
    60ea:	48 89 c7             	mov    %rax,%rdi
    60ed:	e8 d2 11 00 00       	call   72c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    60f2:	48 89 c2             	mov    %rax,%rdx
    60f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    60f9:	48 89 c6             	mov    %rax,%rsi
    60fc:	48 89 d7             	mov    %rdx,%rdi
    60ff:	e8 ea 11 00 00       	call   72ee <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_>
  for (const auto &queueFamilyProp : queueFamilyProps) {
    6104:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    6108:	48 89 c7             	mov    %rax,%rdi
    610b:	e8 82 11 00 00       	call   7292 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    6110:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    6114:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    6118:	48 89 d6             	mov    %rdx,%rsi
    611b:	48 89 c7             	mov    %rax,%rdi
    611e:	e8 34 11 00 00       	call   7257 <_ZN9__gnu_cxxneIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    6123:	84 c0                	test   %al,%al
    6125:	75 9b                	jne    60c2 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x90>
    }
  }
  return graphicsQueueFamilies;
    6127:	90                   	nop
}
    6128:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    612c:	48 89 c7             	mov    %rax,%rdi
    612f:	e8 f4 0e 00 00       	call   7028 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
  return graphicsQueueFamilies;
    6134:	eb 26                	jmp    615c <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x12a>
      queueFamilyProps.size()};
    6136:	48 89 c3             	mov    %rax,%rbx
    6139:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    613d:	48 89 c7             	mov    %rax,%rdi
    6140:	e8 ed 0f 00 00       	call   7132 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
}
    6145:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6149:	48 89 c7             	mov    %rax,%rdi
    614c:	e8 d7 0e 00 00       	call   7028 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    6151:	48 89 d8             	mov    %rbx,%rax
    6154:	48 89 c7             	mov    %rax,%rdi
    6157:	e8 94 d4 ff ff       	call   35f0 <_Unwind_Resume@plt>
    615c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6160:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6164:	c9                   	leave
    6165:	c3                   	ret

0000000000006166 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T>:

std::vector<std::optional<VkQueueFamilyProperties>>
getComputeQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    6166:	55                   	push   %rbp
    6167:	48 89 e5             	mov    %rsp,%rbp
    616a:	53                   	push   %rbx
    616b:	48 83 ec 68          	sub    $0x68,%rsp
    616f:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    6173:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  auto queueFamilyProps =
      getPhysicalDeviceQueueFamilyPropertyList(physicalDevice);
    6177:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    617b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    617f:	48 89 d6             	mov    %rdx,%rsi
    6182:	48 89 c7             	mov    %rax,%rdi
    6185:	e8 ed fd ff ff       	call   5f77 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  std::vector<std::optional<VkQueueFamilyProperties>> computeQueueFamilies{
      queueFamilyProps.size()};
    618a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    618e:	48 89 c7             	mov    %rax,%rdi
    6191:	e8 52 0f 00 00       	call   70e8 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4sizeEv>
    6196:	48 89 c3             	mov    %rax,%rbx
    6199:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    619d:	48 89 c7             	mov    %rax,%rdi
    61a0:	e8 71 0f 00 00       	call   7116 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>
    61a5:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
    61a9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    61ad:	48 89 de             	mov    %rbx,%rsi
    61b0:	48 89 c7             	mov    %rax,%rdi
    61b3:	e8 96 0f 00 00       	call   714e <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>
    61b8:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    61bc:	48 89 c7             	mov    %rax,%rdi
    61bf:	e8 6e 0f 00 00       	call   7132 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
  std::size_t index = 0;
    61c4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    61cb:	00 
  for (const auto &queueFamilyProp : queueFamilyProps) {
    61cc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    61d0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    61d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    61d8:	48 89 c7             	mov    %rax,%rdi
    61db:	e8 28 10 00 00       	call   7208 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE5beginEv>
    61e0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    61e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    61e8:	48 89 c7             	mov    %rax,%rdi
    61eb:	e8 3e 10 00 00       	call   722e <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE3endEv>
    61f0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    61f4:	eb 53                	jmp    6249 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xe3>
    61f6:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    61fa:	48 89 c7             	mov    %rax,%rdi
    61fd:	e8 b0 10 00 00       	call   72b2 <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    6202:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if (queueFamilyProp.queueFlags & VK_QUEUE_COMPUTE_BIT) {
    6206:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    620a:	8b 00                	mov    (%rax),%eax
    620c:	83 e0 02             	and    $0x2,%eax
    620f:	85 c0                	test   %eax,%eax
    6211:	74 25                	je     6238 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xd2>
      computeQueueFamilies[index] = queueFamilyProp;
    6213:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6217:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    621b:	48 89 d6             	mov    %rdx,%rsi
    621e:	48 89 c7             	mov    %rax,%rdi
    6221:	e8 9e 10 00 00       	call   72c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    6226:	48 89 c2             	mov    %rax,%rdx
    6229:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    622d:	48 89 c6             	mov    %rax,%rsi
    6230:	48 89 d7             	mov    %rdx,%rdi
    6233:	e8 b6 10 00 00       	call   72ee <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_>
    }
    ++index;
    6238:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    623d:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    6241:	48 89 c7             	mov    %rax,%rdi
    6244:	e8 49 10 00 00       	call   7292 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    6249:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    624d:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    6251:	48 89 d6             	mov    %rdx,%rsi
    6254:	48 89 c7             	mov    %rax,%rdi
    6257:	e8 fb 0f 00 00       	call   7257 <_ZN9__gnu_cxxneIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    625c:	84 c0                	test   %al,%al
    625e:	75 96                	jne    61f6 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x90>
  }
  return computeQueueFamilies;
    6260:	90                   	nop
}
    6261:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6265:	48 89 c7             	mov    %rax,%rdi
    6268:	e8 bb 0d 00 00       	call   7028 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
  return computeQueueFamilies;
    626d:	eb 26                	jmp    6295 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x12f>
      queueFamilyProps.size()};
    626f:	48 89 c3             	mov    %rax,%rbx
    6272:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6276:	48 89 c7             	mov    %rax,%rdi
    6279:	e8 b4 0e 00 00       	call   7132 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
}
    627e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6282:	48 89 c7             	mov    %rax,%rdi
    6285:	e8 9e 0d 00 00       	call   7028 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    628a:	48 89 d8             	mov    %rbx,%rax
    628d:	48 89 c7             	mov    %rax,%rdi
    6290:	e8 5b d3 ff ff       	call   35f0 <_Unwind_Resume@plt>
    6295:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6299:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    629d:	c9                   	leave
    629e:	c3                   	ret

000000000000629f <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:

std::vector<std::optional<VkQueueFamilyProperties>>
getPresentQueueFamilyPropertyList(VkPhysicalDevice physicalDevice,
                                  VkSurfaceKHR surface) {
    629f:	55                   	push   %rbp
    62a0:	48 89 e5             	mov    %rsp,%rbp
    62a3:	53                   	push   %rbx
    62a4:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    62ab:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    62af:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    62b3:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  auto queueFamilyProps =
      getPhysicalDeviceQueueFamilyPropertyList(physicalDevice);
    62ba:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    62be:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    62c2:	48 89 d6             	mov    %rdx,%rsi
    62c5:	48 89 c7             	mov    %rax,%rdi
    62c8:	e8 aa fc ff ff       	call   5f77 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  std::vector<std::optional<VkQueueFamilyProperties>> presentQueueFamilies{
      queueFamilyProps.size()};
    62cd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    62d1:	48 89 c7             	mov    %rax,%rdi
    62d4:	e8 0f 0e 00 00       	call   70e8 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4sizeEv>
    62d9:	48 89 c3             	mov    %rax,%rbx
    62dc:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    62e0:	48 89 c7             	mov    %rax,%rdi
    62e3:	e8 2e 0e 00 00       	call   7116 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>
    62e8:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
    62ec:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    62f0:	48 89 de             	mov    %rbx,%rsi
    62f3:	48 89 c7             	mov    %rax,%rdi
    62f6:	e8 53 0e 00 00       	call   714e <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>
    62fb:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    62ff:	48 89 c7             	mov    %rax,%rdi
    6302:	e8 2b 0e 00 00       	call   7132 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
  uint32_t index = 0;
    6307:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    630e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6312:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    6316:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    631a:	48 89 c7             	mov    %rax,%rdi
    631d:	e8 e6 0e 00 00       	call   7208 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE5beginEv>
    6322:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    6326:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    632a:	48 89 c7             	mov    %rax,%rdi
    632d:	e8 fc 0e 00 00       	call   722e <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE3endEv>
    6332:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6336:	eb 6c                	jmp    63a4 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x105>
    6338:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    633c:	48 89 c7             	mov    %rax,%rdi
    633f:	e8 6e 0f 00 00       	call   72b2 <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    6344:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    VkBool32 presentSupported = false;
    6348:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, index, surface,
    634f:	48 8d 4d 9c          	lea    -0x64(%rbp),%rcx
    6353:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    635a:	8b 75 ec             	mov    -0x14(%rbp),%esi
    635d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    6361:	48 89 c7             	mov    %rax,%rdi
    6364:	e8 27 d0 ff ff       	call   3390 <vkGetPhysicalDeviceSurfaceSupportKHR@plt>
                                         &presentSupported);
    if (presentSupported) {
    6369:	8b 45 9c             	mov    -0x64(%rbp),%eax
    636c:	85 c0                	test   %eax,%eax
    636e:	74 24                	je     6394 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xf5>
      presentQueueFamilies[index] = queueFamilyProp;
    6370:	8b 55 ec             	mov    -0x14(%rbp),%edx
    6373:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6377:	48 89 d6             	mov    %rdx,%rsi
    637a:	48 89 c7             	mov    %rax,%rdi
    637d:	e8 42 0f 00 00       	call   72c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    6382:	48 89 c2             	mov    %rax,%rdx
    6385:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6389:	48 89 c6             	mov    %rax,%rsi
    638c:	48 89 d7             	mov    %rdx,%rdi
    638f:	e8 5a 0f 00 00       	call   72ee <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_>
    }
    ++index;
    6394:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    6398:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    639c:	48 89 c7             	mov    %rax,%rdi
    639f:	e8 ee 0e 00 00       	call   7292 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    63a4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    63a8:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    63ac:	48 89 d6             	mov    %rdx,%rsi
    63af:	48 89 c7             	mov    %rax,%rdi
    63b2:	e8 a0 0e 00 00       	call   7257 <_ZN9__gnu_cxxneIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    63b7:	84 c0                	test   %al,%al
    63b9:	0f 85 79 ff ff ff    	jne    6338 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x99>
  }
  return presentQueueFamilies;
    63bf:	90                   	nop
}
    63c0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    63c4:	48 89 c7             	mov    %rax,%rdi
    63c7:	e8 5c 0c 00 00       	call   7028 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
  return presentQueueFamilies;
    63cc:	eb 37                	jmp    6405 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x166>
      queueFamilyProps.size()};
    63ce:	48 89 c3             	mov    %rax,%rbx
    63d1:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    63d5:	48 89 c7             	mov    %rax,%rdi
    63d8:	e8 55 0d 00 00       	call   7132 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
    63dd:	eb 0f                	jmp    63ee <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x14f>
}
    63df:	48 89 c3             	mov    %rax,%rbx
    63e2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    63e6:	48 89 c7             	mov    %rax,%rdi
    63e9:	e8 d6 0d 00 00       	call   71c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    63ee:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    63f2:	48 89 c7             	mov    %rax,%rdi
    63f5:	e8 2e 0c 00 00       	call   7028 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    63fa:	48 89 d8             	mov    %rbx,%rax
    63fd:	48 89 c7             	mov    %rax,%rdi
    6400:	e8 eb d1 ff ff       	call   35f0 <_Unwind_Resume@plt>
    6405:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6409:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    640d:	c9                   	leave
    640e:	c3                   	ret

000000000000640f <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:

VkSurfaceCapabilitiesKHR
getPhysicalDeviceSurfaceCapabilities(VkPhysicalDevice physicalDevice,
                                     VkSurfaceKHR surface) {
    640f:	55                   	push   %rbp
    6410:	48 89 e5             	mov    %rsp,%rbp
    6413:	41 54                	push   %r12
    6415:	53                   	push   %rbx
    6416:	48 83 ec 20          	sub    $0x20,%rsp
    641a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    641e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6422:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  VkSurfaceCapabilitiesKHR surfaceCapabilities{};
    6426:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    642a:	66 0f ef c0          	pxor   %xmm0,%xmm0
    642e:	0f 11 00             	movups %xmm0,(%rax)
    6431:	0f 11 40 10          	movups %xmm0,0x10(%rax)
    6435:	0f 11 40 20          	movups %xmm0,0x20(%rax)
    6439:	66 0f 7e 40 30       	movd   %xmm0,0x30(%rax)
  if (vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    643e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6442:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    6446:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    644a:	48 89 ce             	mov    %rcx,%rsi
    644d:	48 89 c7             	mov    %rax,%rdi
    6450:	e8 3b ce ff ff       	call   3290 <vkGetPhysicalDeviceSurfaceCapabilitiesKHR@plt>
          physicalDevice, surface, &surfaceCapabilities) != VK_SUCCESS) {
    6455:	85 c0                	test   %eax,%eax
    6457:	0f 95 c0             	setne  %al
  if (vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    645a:	84 c0                	test   %al,%al
    645c:	74 51                	je     64af <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xa0>
    throw std::runtime_error("Failed to get surface capabilities.");
    645e:	bf 10 00 00 00       	mov    $0x10,%edi
    6463:	e8 e8 cc ff ff       	call   3150 <__cxa_allocate_exception@plt>
    6468:	48 89 c3             	mov    %rax,%rbx
    646b:	48 8d 05 de eb 00 00 	lea    0xebde(%rip),%rax        # 15050 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0xb8>
    6472:	48 89 c6             	mov    %rax,%rsi
    6475:	48 89 df             	mov    %rbx,%rdi
    6478:	e8 63 cc ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    647d:	48 8b 05 24 bb 01 00 	mov    0x1bb24(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6484:	48 89 c2             	mov    %rax,%rdx
    6487:	48 8d 05 b2 b8 01 00 	lea    0x1b8b2(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    648e:	48 89 c6             	mov    %rax,%rsi
    6491:	48 89 df             	mov    %rbx,%rdi
    6494:	e8 07 d1 ff ff       	call   35a0 <__cxa_throw@plt>
    6499:	49 89 c4             	mov    %rax,%r12
    649c:	48 89 df             	mov    %rbx,%rdi
    649f:	e8 5c cd ff ff       	call   3200 <__cxa_free_exception@plt>
    64a4:	4c 89 e0             	mov    %r12,%rax
    64a7:	48 89 c7             	mov    %rax,%rdi
    64aa:	e8 41 d1 ff ff       	call   35f0 <_Unwind_Resume@plt>
  }
  return surfaceCapabilities;
    64af:	90                   	nop
}
    64b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    64b4:	48 83 c4 20          	add    $0x20,%rsp
    64b8:	5b                   	pop    %rbx
    64b9:	41 5c                	pop    %r12
    64bb:	5d                   	pop    %rbp
    64bc:	c3                   	ret

00000000000064bd <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:

std::vector<VkSurfaceFormatKHR>
getPhysicalDeviceSurfaceFormatList(VkPhysicalDevice physicalDevice,
                                   VkSurfaceKHR surface) {
    64bd:	55                   	push   %rbp
    64be:	48 89 e5             	mov    %rsp,%rbp
    64c1:	41 54                	push   %r12
    64c3:	53                   	push   %rbx
    64c4:	48 83 ec 30          	sub    $0x30,%rsp
    64c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    64cc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    64d0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  uint32_t surfaceFormatCount;
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface,
    64d4:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    64d8:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    64dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    64e0:	b9 00 00 00 00       	mov    $0x0,%ecx
    64e5:	48 89 c7             	mov    %rax,%rdi
    64e8:	e8 73 cf ff ff       	call   3460 <vkGetPhysicalDeviceSurfaceFormatsKHR@plt>
                                           &surfaceFormatCount,
                                           nullptr) != VK_SUCCESS) {
    64ed:	85 c0                	test   %eax,%eax
    64ef:	0f 95 c0             	setne  %al
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface,
    64f2:	84 c0                	test   %al,%al
    64f4:	74 3b                	je     6531 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x74>
    throw std::runtime_error("Failed to get surface format list.");
    64f6:	bf 10 00 00 00       	mov    $0x10,%edi
    64fb:	e8 50 cc ff ff       	call   3150 <__cxa_allocate_exception@plt>
    6500:	48 89 c3             	mov    %rax,%rbx
    6503:	48 8d 05 6e eb 00 00 	lea    0xeb6e(%rip),%rax        # 15078 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0xe0>
    650a:	48 89 c6             	mov    %rax,%rsi
    650d:	48 89 df             	mov    %rbx,%rdi
    6510:	e8 cb cb ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    6515:	48 8b 05 8c ba 01 00 	mov    0x1ba8c(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    651c:	48 89 c2             	mov    %rax,%rdx
    651f:	48 8d 05 1a b8 01 00 	lea    0x1b81a(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6526:	48 89 c6             	mov    %rax,%rsi
    6529:	48 89 df             	mov    %rbx,%rdi
    652c:	e8 6f d0 ff ff       	call   35a0 <__cxa_throw@plt>
  }
  std::vector<VkSurfaceFormatKHR> surfaceFormats{surfaceFormatCount};
    6531:	8b 45 e8             	mov    -0x18(%rbp),%eax
    6534:	89 c3                	mov    %eax,%ebx
    6536:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    653a:	48 89 c7             	mov    %rax,%rdi
    653d:	e8 84 0e 00 00       	call   73c6 <_ZNSaI18VkSurfaceFormatKHREC1Ev>
    6542:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    6546:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    654a:	48 89 de             	mov    %rbx,%rsi
    654d:	48 89 c7             	mov    %rax,%rdi
    6550:	e8 a9 0e 00 00       	call   73fe <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_>
    6555:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    6559:	48 89 c7             	mov    %rax,%rdi
    655c:	e8 81 0e 00 00       	call   73e2 <_ZNSaI18VkSurfaceFormatKHRED1Ev>
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(
    6561:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6565:	48 89 c7             	mov    %rax,%rdi
    6568:	e8 4b 0f 00 00       	call   74b8 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE4dataEv>
    656d:	48 89 c1             	mov    %rax,%rcx
    6570:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    6574:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    6578:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    657c:	48 89 c7             	mov    %rax,%rdi
    657f:	e8 dc ce ff ff       	call   3460 <vkGetPhysicalDeviceSurfaceFormatsKHR@plt>
          physicalDevice, surface, &surfaceFormatCount,
          surfaceFormats.data()) != VK_SUCCESS) {
    6584:	85 c0                	test   %eax,%eax
    6586:	0f 95 c0             	setne  %al
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(
    6589:	84 c0                	test   %al,%al
    658b:	0f 84 95 00 00 00    	je     6626 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x169>
    throw std::runtime_error("Failed to get surface format list.");
    6591:	bf 10 00 00 00       	mov    $0x10,%edi
    6596:	e8 b5 cb ff ff       	call   3150 <__cxa_allocate_exception@plt>
    659b:	48 89 c3             	mov    %rax,%rbx
    659e:	48 8d 05 d3 ea 00 00 	lea    0xead3(%rip),%rax        # 15078 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0xe0>
    65a5:	48 89 c6             	mov    %rax,%rsi
    65a8:	48 89 df             	mov    %rbx,%rdi
    65ab:	e8 30 cb ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    65b0:	48 8b 05 f1 b9 01 00 	mov    0x1b9f1(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    65b7:	48 89 c2             	mov    %rax,%rdx
    65ba:	48 8d 05 7f b7 01 00 	lea    0x1b77f(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    65c1:	48 89 c6             	mov    %rax,%rsi
    65c4:	48 89 df             	mov    %rbx,%rdi
    65c7:	e8 d4 cf ff ff       	call   35a0 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get surface format list.");
    65cc:	49 89 c4             	mov    %rax,%r12
    65cf:	48 89 df             	mov    %rbx,%rdi
    65d2:	e8 29 cc ff ff       	call   3200 <__cxa_free_exception@plt>
    65d7:	4c 89 e0             	mov    %r12,%rax
    65da:	48 89 c7             	mov    %rax,%rdi
    65dd:	e8 0e d0 ff ff       	call   35f0 <_Unwind_Resume@plt>
  std::vector<VkSurfaceFormatKHR> surfaceFormats{surfaceFormatCount};
    65e2:	48 89 c3             	mov    %rax,%rbx
    65e5:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    65e9:	48 89 c7             	mov    %rax,%rdi
    65ec:	e8 f1 0d 00 00       	call   73e2 <_ZNSaI18VkSurfaceFormatKHRED1Ev>
    65f1:	48 89 d8             	mov    %rbx,%rax
    65f4:	48 89 c7             	mov    %rax,%rdi
    65f7:	e8 f4 cf ff ff       	call   35f0 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get surface format list.");
    65fc:	49 89 c4             	mov    %rax,%r12
    65ff:	48 89 df             	mov    %rbx,%rdi
    6602:	e8 f9 cb ff ff       	call   3200 <__cxa_free_exception@plt>
    6607:	4c 89 e3             	mov    %r12,%rbx
    660a:	eb 03                	jmp    660f <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x152>
  }
  return surfaceFormats;
}
    660c:	48 89 c3             	mov    %rax,%rbx
    660f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6613:	48 89 c7             	mov    %rax,%rdi
    6616:	e8 59 0e 00 00       	call   7474 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EED1Ev>
    661b:	48 89 d8             	mov    %rbx,%rax
    661e:	48 89 c7             	mov    %rax,%rdi
    6621:	e8 ca cf ff ff       	call   35f0 <_Unwind_Resume@plt>
  return surfaceFormats;
    6626:	90                   	nop
}
    6627:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    662b:	48 83 c4 30          	add    $0x30,%rsp
    662f:	5b                   	pop    %rbx
    6630:	41 5c                	pop    %r12
    6632:	5d                   	pop    %rbp
    6633:	c3                   	ret

0000000000006634 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:
std::vector<VkPresentModeKHR>
getPhysicalDeviceSurfacePresentModeList(VkPhysicalDevice physicalDevice,
                                        VkSurfaceKHR surface) {
    6634:	55                   	push   %rbp
    6635:	48 89 e5             	mov    %rsp,%rbp
    6638:	41 54                	push   %r12
    663a:	53                   	push   %rbx
    663b:	48 83 ec 30          	sub    $0x30,%rsp
    663f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    6643:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    6647:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  uint32_t presentModeCount;
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface,
    664b:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    664f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    6653:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6657:	b9 00 00 00 00       	mov    $0x0,%ecx
    665c:	48 89 c7             	mov    %rax,%rdi
    665f:	e8 0c ce ff ff       	call   3470 <vkGetPhysicalDeviceSurfacePresentModesKHR@plt>
    6664:	85 c0                	test   %eax,%eax
    6666:	0f 95 c0             	setne  %al
    6669:	84 c0                	test   %al,%al
    666b:	74 3b                	je     66a8 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x74>
                                                &presentModeCount, nullptr)) {
    throw std::runtime_error("Failed to get surface present mode list.");
    666d:	bf 10 00 00 00       	mov    $0x10,%edi
    6672:	e8 d9 ca ff ff       	call   3150 <__cxa_allocate_exception@plt>
    6677:	48 89 c3             	mov    %rax,%rbx
    667a:	48 8d 05 1f ea 00 00 	lea    0xea1f(%rip),%rax        # 150a0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x108>
    6681:	48 89 c6             	mov    %rax,%rsi
    6684:	48 89 df             	mov    %rbx,%rdi
    6687:	e8 54 ca ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    668c:	48 8b 05 15 b9 01 00 	mov    0x1b915(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6693:	48 89 c2             	mov    %rax,%rdx
    6696:	48 8d 05 a3 b6 01 00 	lea    0x1b6a3(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    669d:	48 89 c6             	mov    %rax,%rsi
    66a0:	48 89 df             	mov    %rbx,%rdi
    66a3:	e8 f8 ce ff ff       	call   35a0 <__cxa_throw@plt>
  }
  std::vector<VkPresentModeKHR> presentModes{presentModeCount};
    66a8:	8b 45 e8             	mov    -0x18(%rbp),%eax
    66ab:	89 c3                	mov    %eax,%ebx
    66ad:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    66b1:	48 89 c7             	mov    %rax,%rdi
    66b4:	e8 71 0e 00 00       	call   752a <_ZNSaI16VkPresentModeKHREC1Ev>
    66b9:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    66bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    66c1:	48 89 de             	mov    %rbx,%rsi
    66c4:	48 89 c7             	mov    %rax,%rdi
    66c7:	e8 96 0e 00 00       	call   7562 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EEC1EmRKS1_>
    66cc:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    66d0:	48 89 c7             	mov    %rax,%rdi
    66d3:	e8 6e 0e 00 00       	call   7546 <_ZNSaI16VkPresentModeKHRED1Ev>
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(
    66d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    66dc:	48 89 c7             	mov    %rax,%rdi
    66df:	e8 38 0f 00 00       	call   761c <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE4dataEv>
    66e4:	48 89 c1             	mov    %rax,%rcx
    66e7:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    66eb:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    66ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    66f3:	48 89 c7             	mov    %rax,%rdi
    66f6:	e8 75 cd ff ff       	call   3470 <vkGetPhysicalDeviceSurfacePresentModesKHR@plt>
    66fb:	85 c0                	test   %eax,%eax
    66fd:	0f 95 c0             	setne  %al
    6700:	84 c0                	test   %al,%al
    6702:	0f 84 95 00 00 00    	je     679d <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x169>
          physicalDevice, surface, &presentModeCount, presentModes.data())) {
    throw std::runtime_error("Failed to get surface present mode list.");
    6708:	bf 10 00 00 00       	mov    $0x10,%edi
    670d:	e8 3e ca ff ff       	call   3150 <__cxa_allocate_exception@plt>
    6712:	48 89 c3             	mov    %rax,%rbx
    6715:	48 8d 05 84 e9 00 00 	lea    0xe984(%rip),%rax        # 150a0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x108>
    671c:	48 89 c6             	mov    %rax,%rsi
    671f:	48 89 df             	mov    %rbx,%rdi
    6722:	e8 b9 c9 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    6727:	48 8b 05 7a b8 01 00 	mov    0x1b87a(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    672e:	48 89 c2             	mov    %rax,%rdx
    6731:	48 8d 05 08 b6 01 00 	lea    0x1b608(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6738:	48 89 c6             	mov    %rax,%rsi
    673b:	48 89 df             	mov    %rbx,%rdi
    673e:	e8 5d ce ff ff       	call   35a0 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get surface present mode list.");
    6743:	49 89 c4             	mov    %rax,%r12
    6746:	48 89 df             	mov    %rbx,%rdi
    6749:	e8 b2 ca ff ff       	call   3200 <__cxa_free_exception@plt>
    674e:	4c 89 e0             	mov    %r12,%rax
    6751:	48 89 c7             	mov    %rax,%rdi
    6754:	e8 97 ce ff ff       	call   35f0 <_Unwind_Resume@plt>
  std::vector<VkPresentModeKHR> presentModes{presentModeCount};
    6759:	48 89 c3             	mov    %rax,%rbx
    675c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    6760:	48 89 c7             	mov    %rax,%rdi
    6763:	e8 de 0d 00 00       	call   7546 <_ZNSaI16VkPresentModeKHRED1Ev>
    6768:	48 89 d8             	mov    %rbx,%rax
    676b:	48 89 c7             	mov    %rax,%rdi
    676e:	e8 7d ce ff ff       	call   35f0 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get surface present mode list.");
    6773:	49 89 c4             	mov    %rax,%r12
    6776:	48 89 df             	mov    %rbx,%rdi
    6779:	e8 82 ca ff ff       	call   3200 <__cxa_free_exception@plt>
    677e:	4c 89 e3             	mov    %r12,%rbx
    6781:	eb 03                	jmp    6786 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x152>
  }
  return presentModes;
}
    6783:	48 89 c3             	mov    %rax,%rbx
    6786:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    678a:	48 89 c7             	mov    %rax,%rdi
    678d:	e8 46 0e 00 00       	call   75d8 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EED1Ev>
    6792:	48 89 d8             	mov    %rbx,%rax
    6795:	48 89 c7             	mov    %rax,%rdi
    6798:	e8 53 ce ff ff       	call   35f0 <_Unwind_Resume@plt>
  return presentModes;
    679d:	90                   	nop
}
    679e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    67a2:	48 83 c4 30          	add    $0x30,%rsp
    67a6:	5b                   	pop    %rbx
    67a7:	41 5c                	pop    %r12
    67a9:	5d                   	pop    %rbp
    67aa:	c3                   	ret

00000000000067ab <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T>:

std::vector<VkImage> getSwapchainImages(VkDevice device,
                                        VkSwapchainKHR swapchain) {
    67ab:	55                   	push   %rbp
    67ac:	48 89 e5             	mov    %rsp,%rbp
    67af:	41 54                	push   %r12
    67b1:	53                   	push   %rbx
    67b2:	48 83 ec 30          	sub    $0x30,%rsp
    67b6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    67ba:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    67be:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  uint32_t swapchainImageCount;
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    67c2:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    67c6:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    67ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    67ce:	b9 00 00 00 00       	mov    $0x0,%ecx
    67d3:	48 89 c7             	mov    %rax,%rdi
    67d6:	e8 b5 c9 ff ff       	call   3190 <vkGetSwapchainImagesKHR@plt>
                              nullptr) != VK_SUCCESS) {
    67db:	85 c0                	test   %eax,%eax
    67dd:	0f 95 c0             	setne  %al
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    67e0:	84 c0                	test   %al,%al
    67e2:	74 3b                	je     681f <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0x74>
    throw std::runtime_error("Failed to get swapchain images");
    67e4:	bf 10 00 00 00       	mov    $0x10,%edi
    67e9:	e8 62 c9 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    67ee:	48 89 c3             	mov    %rax,%rbx
    67f1:	48 8d 05 d8 e8 00 00 	lea    0xe8d8(%rip),%rax        # 150d0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x138>
    67f8:	48 89 c6             	mov    %rax,%rsi
    67fb:	48 89 df             	mov    %rbx,%rdi
    67fe:	e8 dd c8 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    6803:	48 8b 05 9e b7 01 00 	mov    0x1b79e(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    680a:	48 89 c2             	mov    %rax,%rdx
    680d:	48 8d 05 2c b5 01 00 	lea    0x1b52c(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6814:	48 89 c6             	mov    %rax,%rsi
    6817:	48 89 df             	mov    %rbx,%rdi
    681a:	e8 81 cd ff ff       	call   35a0 <__cxa_throw@plt>
  }
  std::vector<VkImage> swapchainImages{swapchainImageCount};
    681f:	8b 45 e8             	mov    -0x18(%rbp),%eax
    6822:	89 c3                	mov    %eax,%ebx
    6824:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    6828:	48 89 c7             	mov    %rax,%rdi
    682b:	e8 5e 0e 00 00       	call   768e <_ZNSaIP9VkImage_TEC1Ev>
    6830:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    6834:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6838:	48 89 de             	mov    %rbx,%rsi
    683b:	48 89 c7             	mov    %rax,%rdi
    683e:	e8 83 0e 00 00       	call   76c6 <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1EmRKS2_>
    6843:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    6847:	48 89 c7             	mov    %rax,%rdi
    684a:	e8 5b 0e 00 00       	call   76aa <_ZNSaIP9VkImage_TED1Ev>
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    684f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6853:	48 89 c7             	mov    %rax,%rdi
    6856:	e8 25 0f 00 00       	call   7780 <_ZNSt6vectorIP9VkImage_TSaIS1_EE4dataEv>
    685b:	48 89 c1             	mov    %rax,%rcx
    685e:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    6862:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    6866:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    686a:	48 89 c7             	mov    %rax,%rdi
    686d:	e8 1e c9 ff ff       	call   3190 <vkGetSwapchainImagesKHR@plt>
                              swapchainImages.data()) != VK_SUCCESS) {
    6872:	85 c0                	test   %eax,%eax
    6874:	0f 95 c0             	setne  %al
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    6877:	84 c0                	test   %al,%al
    6879:	0f 84 95 00 00 00    	je     6914 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0x169>
    throw std::runtime_error("Failed to get swapchain images");
    687f:	bf 10 00 00 00       	mov    $0x10,%edi
    6884:	e8 c7 c8 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    6889:	48 89 c3             	mov    %rax,%rbx
    688c:	48 8d 05 3d e8 00 00 	lea    0xe83d(%rip),%rax        # 150d0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x138>
    6893:	48 89 c6             	mov    %rax,%rsi
    6896:	48 89 df             	mov    %rbx,%rdi
    6899:	e8 42 c8 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    689e:	48 8b 05 03 b7 01 00 	mov    0x1b703(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    68a5:	48 89 c2             	mov    %rax,%rdx
    68a8:	48 8d 05 91 b4 01 00 	lea    0x1b491(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    68af:	48 89 c6             	mov    %rax,%rsi
    68b2:	48 89 df             	mov    %rbx,%rdi
    68b5:	e8 e6 cc ff ff       	call   35a0 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get swapchain images");
    68ba:	49 89 c4             	mov    %rax,%r12
    68bd:	48 89 df             	mov    %rbx,%rdi
    68c0:	e8 3b c9 ff ff       	call   3200 <__cxa_free_exception@plt>
    68c5:	4c 89 e0             	mov    %r12,%rax
    68c8:	48 89 c7             	mov    %rax,%rdi
    68cb:	e8 20 cd ff ff       	call   35f0 <_Unwind_Resume@plt>
  std::vector<VkImage> swapchainImages{swapchainImageCount};
    68d0:	48 89 c3             	mov    %rax,%rbx
    68d3:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    68d7:	48 89 c7             	mov    %rax,%rdi
    68da:	e8 cb 0d 00 00       	call   76aa <_ZNSaIP9VkImage_TED1Ev>
    68df:	48 89 d8             	mov    %rbx,%rax
    68e2:	48 89 c7             	mov    %rax,%rdi
    68e5:	e8 06 cd ff ff       	call   35f0 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get swapchain images");
    68ea:	49 89 c4             	mov    %rax,%r12
    68ed:	48 89 df             	mov    %rbx,%rdi
    68f0:	e8 0b c9 ff ff       	call   3200 <__cxa_free_exception@plt>
    68f5:	4c 89 e3             	mov    %r12,%rbx
    68f8:	eb 03                	jmp    68fd <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0x152>
  }
  return swapchainImages;
}
    68fa:	48 89 c3             	mov    %rax,%rbx
    68fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6901:	48 89 c7             	mov    %rax,%rdi
    6904:	e8 33 0e 00 00       	call   773c <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
    6909:	48 89 d8             	mov    %rbx,%rax
    690c:	48 89 c7             	mov    %rax,%rdi
    690f:	e8 dc cc ff ff       	call   35f0 <_Unwind_Resume@plt>
  return swapchainImages;
    6914:	90                   	nop
}
    6915:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6919:	48 83 c4 30          	add    $0x30,%rsp
    691d:	5b                   	pop    %rbx
    691e:	41 5c                	pop    %r12
    6920:	5d                   	pop    %rbp
    6921:	c3                   	ret

0000000000006922 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
    6922:	55                   	push   %rbp
    6923:	48 89 e5             	mov    %rsp,%rbp
    6926:	48 83 ec 10          	sub    $0x10,%rsp
    692a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    692e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6932:	48 89 c7             	mov    %rax,%rdi
    6935:	e8 00 01 00 00       	call   6a3a <_ZNSaI17VkLayerPropertiesED1Ev>
    693a:	90                   	nop
    693b:	c9                   	leave
    693c:	c3                   	ret
    693d:	90                   	nop

000000000000693e <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implD1Ev>:
    693e:	55                   	push   %rbp
    693f:	48 89 e5             	mov    %rsp,%rbp
    6942:	48 83 ec 10          	sub    $0x10,%rsp
    6946:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    694a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    694e:	48 89 c7             	mov    %rax,%rdi
    6951:	e8 52 02 00 00       	call   6ba8 <_ZNSaI21VkExtensionPropertiesED1Ev>
    6956:	90                   	nop
    6957:	c9                   	leave
    6958:	c3                   	ret
    6959:	90                   	nop

000000000000695a <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>:
    695a:	55                   	push   %rbp
    695b:	48 89 e5             	mov    %rsp,%rbp
    695e:	48 83 ec 10          	sub    $0x10,%rsp
    6962:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6966:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    696a:	48 89 c7             	mov    %rax,%rdi
    696d:	e8 a4 03 00 00       	call   6d16 <_ZNSaIPKcED1Ev>
    6972:	90                   	nop
    6973:	c9                   	leave
    6974:	c3                   	ret
    6975:	90                   	nop

0000000000006976 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>:
    6976:	55                   	push   %rbp
    6977:	48 89 e5             	mov    %rsp,%rbp
    697a:	48 83 ec 10          	sub    $0x10,%rsp
    697e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6982:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6986:	48 89 c7             	mov    %rax,%rdi
    6989:	e8 a4 04 00 00       	call   6e32 <_ZNSaIP18VkPhysicalDevice_TED1Ev>
    698e:	90                   	nop
    698f:	c9                   	leave
    6990:	c3                   	ret
    6991:	90                   	nop

0000000000006992 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implD1Ev>:
    6992:	55                   	push   %rbp
    6993:	48 89 e5             	mov    %rsp,%rbp
    6996:	48 83 ec 10          	sub    $0x10,%rsp
    699a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    699e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    69a2:	48 89 c7             	mov    %rax,%rdi
    69a5:	e8 ec 05 00 00       	call   6f96 <_ZNSaI23VkQueueFamilyPropertiesED1Ev>
    69aa:	90                   	nop
    69ab:	c9                   	leave
    69ac:	c3                   	ret
    69ad:	90                   	nop

00000000000069ae <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implD1Ev>:
    69ae:	55                   	push   %rbp
    69af:	48 89 e5             	mov    %rsp,%rbp
    69b2:	48 83 ec 10          	sub    $0x10,%rsp
    69b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    69ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    69be:	48 89 c7             	mov    %rax,%rdi
    69c1:	e8 6c 07 00 00       	call   7132 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
    69c6:	90                   	nop
    69c7:	c9                   	leave
    69c8:	c3                   	ret
    69c9:	90                   	nop

00000000000069ca <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implD1Ev>:
    69ca:	55                   	push   %rbp
    69cb:	48 89 e5             	mov    %rsp,%rbp
    69ce:	48 83 ec 10          	sub    $0x10,%rsp
    69d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    69d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    69da:	48 89 c7             	mov    %rax,%rdi
    69dd:	e8 00 0a 00 00       	call   73e2 <_ZNSaI18VkSurfaceFormatKHRED1Ev>
    69e2:	90                   	nop
    69e3:	c9                   	leave
    69e4:	c3                   	ret
    69e5:	90                   	nop

00000000000069e6 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implD1Ev>:
    69e6:	55                   	push   %rbp
    69e7:	48 89 e5             	mov    %rsp,%rbp
    69ea:	48 83 ec 10          	sub    $0x10,%rsp
    69ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    69f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    69f6:	48 89 c7             	mov    %rax,%rdi
    69f9:	e8 48 0b 00 00       	call   7546 <_ZNSaI16VkPresentModeKHRED1Ev>
    69fe:	90                   	nop
    69ff:	c9                   	leave
    6a00:	c3                   	ret
    6a01:	90                   	nop

0000000000006a02 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implD1Ev>:
    6a02:	55                   	push   %rbp
    6a03:	48 89 e5             	mov    %rsp,%rbp
    6a06:	48 83 ec 10          	sub    $0x10,%rsp
    6a0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6a0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a12:	48 89 c7             	mov    %rax,%rdi
    6a15:	e8 90 0c 00 00       	call   76aa <_ZNSaIP9VkImage_TED1Ev>
    6a1a:	90                   	nop
    6a1b:	c9                   	leave
    6a1c:	c3                   	ret
    6a1d:	90                   	nop

0000000000006a1e <_ZNSaI17VkLayerPropertiesEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    6a1e:	55                   	push   %rbp
    6a1f:	48 89 e5             	mov    %rsp,%rbp
    6a22:	48 83 ec 10          	sub    $0x10,%rsp
    6a26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6a2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a2e:	48 89 c7             	mov    %rax,%rdi
    6a31:	e8 bc 0d 00 00       	call   77f2 <_ZNSt15__new_allocatorI17VkLayerPropertiesEC1Ev>
    6a36:	90                   	nop
    6a37:	c9                   	leave
    6a38:	c3                   	ret
    6a39:	90                   	nop

0000000000006a3a <_ZNSaI17VkLayerPropertiesED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    6a3a:	55                   	push   %rbp
    6a3b:	48 89 e5             	mov    %rsp,%rbp
    6a3e:	48 83 ec 10          	sub    $0x10,%rsp
    6a42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6a46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a4a:	48 89 c7             	mov    %rax,%rdi
    6a4d:	e8 ac 0d 00 00       	call   77fe <_ZNSt15__new_allocatorI17VkLayerPropertiesED1Ev>
    6a52:	90                   	nop
    6a53:	c9                   	leave
    6a54:	c3                   	ret
    6a55:	90                   	nop

0000000000006a56 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    6a56:	55                   	push   %rbp
    6a57:	48 89 e5             	mov    %rsp,%rbp
    6a5a:	53                   	push   %rbx
    6a5b:	48 83 ec 28          	sub    $0x28,%rsp
    6a5f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6a63:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6a67:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    6a6b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    6a6f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    6a73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6a77:	48 89 d6             	mov    %rdx,%rsi
    6a7a:	48 89 c7             	mov    %rax,%rdi
    6a7d:	e8 87 0d 00 00       	call   7809 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>
    6a82:	48 89 c1             	mov    %rax,%rcx
    6a85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6a89:	48 89 c2             	mov    %rax,%rdx
    6a8c:	48 89 ce             	mov    %rcx,%rsi
    6a8f:	48 89 df             	mov    %rbx,%rdi
    6a92:	e8 d3 0d 00 00       	call   786a <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    6a97:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6a9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6a9f:	48 89 d6             	mov    %rdx,%rsi
    6aa2:	48 89 c7             	mov    %rax,%rdi
    6aa5:	e8 1e 0e 00 00       	call   78c8 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE21_M_default_initializeEm>
    6aaa:	eb 1a                	jmp    6ac6 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_+0x70>
    6aac:	48 89 c3             	mov    %rax,%rbx
    6aaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6ab3:	48 89 c7             	mov    %rax,%rdi
    6ab6:	e8 79 00 00 00       	call   6b34 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EED1Ev>
    6abb:	48 89 d8             	mov    %rbx,%rax
    6abe:	48 89 c7             	mov    %rax,%rdi
    6ac1:	e8 2a cb ff ff       	call   35f0 <_Unwind_Resume@plt>
    6ac6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6aca:	c9                   	leave
    6acb:	c3                   	ret

0000000000006acc <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    6acc:	55                   	push   %rbp
    6acd:	48 89 e5             	mov    %rsp,%rbp
    6ad0:	48 83 ec 10          	sub    $0x10,%rsp
    6ad4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    6ad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6adc:	48 89 c7             	mov    %rax,%rdi
    6adf:	e8 24 0e 00 00       	call   7908 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    6ae4:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6ae7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6aeb:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6aef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6af3:	48 8b 00             	mov    (%rax),%rax
    6af6:	48 89 ce             	mov    %rcx,%rsi
    6af9:	48 89 c7             	mov    %rax,%rdi
    6afc:	e8 15 0e 00 00       	call   7916 <_ZSt8_DestroyIP17VkLayerPropertiesS0_EvT_S2_RSaIT0_E>
      }
    6b01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b05:	48 89 c7             	mov    %rax,%rdi
    6b08:	e8 27 00 00 00       	call   6b34 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EED1Ev>
    6b0d:	90                   	nop
    6b0e:	c9                   	leave
    6b0f:	c3                   	ret

0000000000006b10 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    6b10:	55                   	push   %rbp
    6b11:	48 89 e5             	mov    %rsp,%rbp
    6b14:	48 83 ec 10          	sub    $0x10,%rsp
    6b18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    6b1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b20:	48 8b 10             	mov    (%rax),%rdx
    6b23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b27:	48 89 d6             	mov    %rdx,%rsi
    6b2a:	48 89 c7             	mov    %rax,%rdi
    6b2d:	e8 0e 0e 00 00       	call   7940 <_ZNKSt6vectorI17VkLayerPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    6b32:	c9                   	leave
    6b33:	c3                   	ret

0000000000006b34 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    6b34:	55                   	push   %rbp
    6b35:	48 89 e5             	mov    %rsp,%rbp
    6b38:	48 83 ec 10          	sub    $0x10,%rsp
    6b3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6b40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b44:	48 8b 50 10          	mov    0x10(%rax),%rdx
    6b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b4c:	48 8b 00             	mov    (%rax),%rax
    6b4f:	48 29 c2             	sub    %rax,%rdx
    6b52:	48 c1 fa 03          	sar    $0x3,%rdx
    6b56:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
    6b5d:	fc c0 0f 
    6b60:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
    6b64:	48 89 c2             	mov    %rax,%rdx
    6b67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b6b:	48 8b 08             	mov    (%rax),%rcx
    6b6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b72:	48 89 ce             	mov    %rcx,%rsi
    6b75:	48 89 c7             	mov    %rax,%rdi
    6b78:	e8 fb 0d 00 00       	call   7978 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE13_M_deallocateEPS0_m>
      }
    6b7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b81:	48 89 c7             	mov    %rax,%rdi
    6b84:	e8 99 fd ff ff       	call   6922 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implD1Ev>
    6b89:	90                   	nop
    6b8a:	c9                   	leave
    6b8b:	c3                   	ret

0000000000006b8c <_ZNSaI21VkExtensionPropertiesEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    6b8c:	55                   	push   %rbp
    6b8d:	48 89 e5             	mov    %rsp,%rbp
    6b90:	48 83 ec 10          	sub    $0x10,%rsp
    6b94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b9c:	48 89 c7             	mov    %rax,%rdi
    6b9f:	e8 0a 0e 00 00       	call   79ae <_ZNSt15__new_allocatorI21VkExtensionPropertiesEC1Ev>
    6ba4:	90                   	nop
    6ba5:	c9                   	leave
    6ba6:	c3                   	ret
    6ba7:	90                   	nop

0000000000006ba8 <_ZNSaI21VkExtensionPropertiesED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    6ba8:	55                   	push   %rbp
    6ba9:	48 89 e5             	mov    %rsp,%rbp
    6bac:	48 83 ec 10          	sub    $0x10,%rsp
    6bb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6bb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6bb8:	48 89 c7             	mov    %rax,%rdi
    6bbb:	e8 fa 0d 00 00       	call   79ba <_ZNSt15__new_allocatorI21VkExtensionPropertiesED1Ev>
    6bc0:	90                   	nop
    6bc1:	c9                   	leave
    6bc2:	c3                   	ret
    6bc3:	90                   	nop

0000000000006bc4 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    6bc4:	55                   	push   %rbp
    6bc5:	48 89 e5             	mov    %rsp,%rbp
    6bc8:	53                   	push   %rbx
    6bc9:	48 83 ec 28          	sub    $0x28,%rsp
    6bcd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6bd1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6bd5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    6bd9:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    6bdd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    6be1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6be5:	48 89 d6             	mov    %rdx,%rsi
    6be8:	48 89 c7             	mov    %rax,%rdi
    6beb:	e8 d5 0d 00 00       	call   79c5 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>
    6bf0:	48 89 c1             	mov    %rax,%rcx
    6bf3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6bf7:	48 89 c2             	mov    %rax,%rdx
    6bfa:	48 89 ce             	mov    %rcx,%rsi
    6bfd:	48 89 df             	mov    %rbx,%rdi
    6c00:	e8 21 0e 00 00       	call   7a26 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    6c05:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6c09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6c0d:	48 89 d6             	mov    %rdx,%rsi
    6c10:	48 89 c7             	mov    %rax,%rdi
    6c13:	e8 6c 0e 00 00       	call   7a84 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE21_M_default_initializeEm>
    6c18:	eb 1a                	jmp    6c34 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_+0x70>
    6c1a:	48 89 c3             	mov    %rax,%rbx
    6c1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6c21:	48 89 c7             	mov    %rax,%rdi
    6c24:	e8 79 00 00 00       	call   6ca2 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EED1Ev>
    6c29:	48 89 d8             	mov    %rbx,%rax
    6c2c:	48 89 c7             	mov    %rax,%rdi
    6c2f:	e8 bc c9 ff ff       	call   35f0 <_Unwind_Resume@plt>
    6c34:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6c38:	c9                   	leave
    6c39:	c3                   	ret

0000000000006c3a <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    6c3a:	55                   	push   %rbp
    6c3b:	48 89 e5             	mov    %rsp,%rbp
    6c3e:	48 83 ec 10          	sub    $0x10,%rsp
    6c42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    6c46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c4a:	48 89 c7             	mov    %rax,%rdi
    6c4d:	e8 72 0e 00 00       	call   7ac4 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    6c52:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6c55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c59:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6c5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c61:	48 8b 00             	mov    (%rax),%rax
    6c64:	48 89 ce             	mov    %rcx,%rsi
    6c67:	48 89 c7             	mov    %rax,%rdi
    6c6a:	e8 63 0e 00 00       	call   7ad2 <_ZSt8_DestroyIP21VkExtensionPropertiesS0_EvT_S2_RSaIT0_E>
      }
    6c6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c73:	48 89 c7             	mov    %rax,%rdi
    6c76:	e8 27 00 00 00       	call   6ca2 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EED1Ev>
    6c7b:	90                   	nop
    6c7c:	c9                   	leave
    6c7d:	c3                   	ret

0000000000006c7e <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    6c7e:	55                   	push   %rbp
    6c7f:	48 89 e5             	mov    %rsp,%rbp
    6c82:	48 83 ec 10          	sub    $0x10,%rsp
    6c86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    6c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c8e:	48 8b 10             	mov    (%rax),%rdx
    6c91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c95:	48 89 d6             	mov    %rdx,%rsi
    6c98:	48 89 c7             	mov    %rax,%rdi
    6c9b:	e8 5c 0e 00 00       	call   7afc <_ZNKSt6vectorI21VkExtensionPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    6ca0:	c9                   	leave
    6ca1:	c3                   	ret

0000000000006ca2 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    6ca2:	55                   	push   %rbp
    6ca3:	48 89 e5             	mov    %rsp,%rbp
    6ca6:	48 83 ec 10          	sub    $0x10,%rsp
    6caa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6cae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6cb2:	48 8b 50 10          	mov    0x10(%rax),%rdx
    6cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6cba:	48 8b 00             	mov    (%rax),%rax
    6cbd:	48 29 c2             	sub    %rax,%rdx
    6cc0:	48 c1 fa 02          	sar    $0x2,%rdx
    6cc4:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
    6ccb:	fc c0 0f 
    6cce:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
    6cd2:	48 89 c2             	mov    %rax,%rdx
    6cd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6cd9:	48 8b 08             	mov    (%rax),%rcx
    6cdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6ce0:	48 89 ce             	mov    %rcx,%rsi
    6ce3:	48 89 c7             	mov    %rax,%rdi
    6ce6:	e8 49 0e 00 00       	call   7b34 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE13_M_deallocateEPS0_m>
      }
    6ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6cef:	48 89 c7             	mov    %rax,%rdi
    6cf2:	e8 47 fc ff ff       	call   693e <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implD1Ev>
    6cf7:	90                   	nop
    6cf8:	c9                   	leave
    6cf9:	c3                   	ret

0000000000006cfa <_ZNSaIPKcEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    6cfa:	55                   	push   %rbp
    6cfb:	48 89 e5             	mov    %rsp,%rbp
    6cfe:	48 83 ec 10          	sub    $0x10,%rsp
    6d02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6d0a:	48 89 c7             	mov    %rax,%rdi
    6d0d:	e8 58 0e 00 00       	call   7b6a <_ZNSt15__new_allocatorIPKcEC1Ev>
    6d12:	90                   	nop
    6d13:	c9                   	leave
    6d14:	c3                   	ret
    6d15:	90                   	nop

0000000000006d16 <_ZNSaIPKcED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    6d16:	55                   	push   %rbp
    6d17:	48 89 e5             	mov    %rsp,%rbp
    6d1a:	48 83 ec 10          	sub    $0x10,%rsp
    6d1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6d26:	48 89 c7             	mov    %rax,%rdi
    6d29:	e8 48 0e 00 00       	call   7b76 <_ZNSt15__new_allocatorIPKcED1Ev>
    6d2e:	90                   	nop
    6d2f:	c9                   	leave
    6d30:	c3                   	ret
    6d31:	90                   	nop

0000000000006d32 <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    6d32:	55                   	push   %rbp
    6d33:	48 89 e5             	mov    %rsp,%rbp
    6d36:	53                   	push   %rbx
    6d37:	48 83 ec 28          	sub    $0x28,%rsp
    6d3b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6d3f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6d43:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    6d47:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    6d4b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    6d4f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6d53:	48 89 d6             	mov    %rdx,%rsi
    6d56:	48 89 c7             	mov    %rax,%rdi
    6d59:	e8 23 0e 00 00       	call   7b81 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
    6d5e:	48 89 c1             	mov    %rax,%rcx
    6d61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6d65:	48 89 c2             	mov    %rax,%rdx
    6d68:	48 89 ce             	mov    %rcx,%rsi
    6d6b:	48 89 df             	mov    %rbx,%rdi
    6d6e:	e8 6f 0e 00 00       	call   7be2 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
    6d73:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6d77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6d7b:	48 89 d6             	mov    %rdx,%rsi
    6d7e:	48 89 c7             	mov    %rax,%rdi
    6d81:	e8 ba 0e 00 00       	call   7c40 <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>
    6d86:	eb 1a                	jmp    6da2 <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_+0x70>
    6d88:	48 89 c3             	mov    %rax,%rbx
    6d8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6d8f:	48 89 c7             	mov    %rax,%rdi
    6d92:	e8 31 00 00 00       	call   6dc8 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
    6d97:	48 89 d8             	mov    %rbx,%rax
    6d9a:	48 89 c7             	mov    %rax,%rdi
    6d9d:	e8 4e c8 ff ff       	call   35f0 <_Unwind_Resume@plt>
    6da2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6da6:	c9                   	leave
    6da7:	c3                   	ret

0000000000006da8 <_ZNSt6vectorIPKcSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    6da8:	55                   	push   %rbp
    6da9:	48 89 e5             	mov    %rsp,%rbp
    6dac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6db0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
    6db4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6db8:	48 8b 00             	mov    (%rax),%rax
    6dbb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6dbf:	48 c1 e2 03          	shl    $0x3,%rdx
    6dc3:	48 01 d0             	add    %rdx,%rax
      }
    6dc6:	5d                   	pop    %rbp
    6dc7:	c3                   	ret

0000000000006dc8 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    6dc8:	55                   	push   %rbp
    6dc9:	48 89 e5             	mov    %rsp,%rbp
    6dcc:	48 83 ec 10          	sub    $0x10,%rsp
    6dd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6dd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6dd8:	48 8b 50 10          	mov    0x10(%rax),%rdx
    6ddc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6de0:	48 8b 00             	mov    (%rax),%rax
    6de3:	48 29 c2             	sub    %rax,%rdx
    6de6:	48 89 d0             	mov    %rdx,%rax
    6de9:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    6ded:	48 89 c2             	mov    %rax,%rdx
    6df0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6df4:	48 8b 08             	mov    (%rax),%rcx
    6df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6dfb:	48 89 ce             	mov    %rcx,%rsi
    6dfe:	48 89 c7             	mov    %rax,%rdi
    6e01:	e8 ae 0e 00 00       	call   7cb4 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      }
    6e06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6e0a:	48 89 c7             	mov    %rax,%rdi
    6e0d:	e8 48 fb ff ff       	call   695a <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
    6e12:	90                   	nop
    6e13:	c9                   	leave
    6e14:	c3                   	ret
    6e15:	90                   	nop

0000000000006e16 <_ZNSaIP18VkPhysicalDevice_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    6e16:	55                   	push   %rbp
    6e17:	48 89 e5             	mov    %rsp,%rbp
    6e1a:	48 83 ec 10          	sub    $0x10,%rsp
    6e1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6e26:	48 89 c7             	mov    %rax,%rdi
    6e29:	e8 bc 0e 00 00       	call   7cea <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TEC1Ev>
    6e2e:	90                   	nop
    6e2f:	c9                   	leave
    6e30:	c3                   	ret
    6e31:	90                   	nop

0000000000006e32 <_ZNSaIP18VkPhysicalDevice_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    6e32:	55                   	push   %rbp
    6e33:	48 89 e5             	mov    %rsp,%rbp
    6e36:	48 83 ec 10          	sub    $0x10,%rsp
    6e3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6e3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6e42:	48 89 c7             	mov    %rax,%rdi
    6e45:	e8 ac 0e 00 00       	call   7cf6 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TED1Ev>
    6e4a:	90                   	nop
    6e4b:	c9                   	leave
    6e4c:	c3                   	ret
    6e4d:	90                   	nop

0000000000006e4e <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    6e4e:	55                   	push   %rbp
    6e4f:	48 89 e5             	mov    %rsp,%rbp
    6e52:	53                   	push   %rbx
    6e53:	48 83 ec 28          	sub    $0x28,%rsp
    6e57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6e5b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6e5f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    6e63:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    6e67:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    6e6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6e6f:	48 89 d6             	mov    %rdx,%rsi
    6e72:	48 89 c7             	mov    %rax,%rdi
    6e75:	e8 87 0e 00 00       	call   7d01 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_S_check_init_lenEmRKS2_>
    6e7a:	48 89 c1             	mov    %rax,%rcx
    6e7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6e81:	48 89 c2             	mov    %rax,%rdx
    6e84:	48 89 ce             	mov    %rcx,%rsi
    6e87:	48 89 df             	mov    %rbx,%rdi
    6e8a:	e8 d3 0e 00 00       	call   7d62 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
    6e8f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6e93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6e97:	48 89 d6             	mov    %rdx,%rsi
    6e9a:	48 89 c7             	mov    %rax,%rdi
    6e9d:	e8 1e 0f 00 00       	call   7dc0 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE21_M_default_initializeEm>
    6ea2:	eb 1a                	jmp    6ebe <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_+0x70>
    6ea4:	48 89 c3             	mov    %rax,%rbx
    6ea7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6eab:	48 89 c7             	mov    %rax,%rdi
    6eae:	e8 79 00 00 00       	call   6f2c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    6eb3:	48 89 d8             	mov    %rbx,%rax
    6eb6:	48 89 c7             	mov    %rax,%rdi
    6eb9:	e8 32 c7 ff ff       	call   35f0 <_Unwind_Resume@plt>
    6ebe:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6ec2:	c9                   	leave
    6ec3:	c3                   	ret

0000000000006ec4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    6ec4:	55                   	push   %rbp
    6ec5:	48 89 e5             	mov    %rsp,%rbp
    6ec8:	48 83 ec 10          	sub    $0x10,%rsp
    6ecc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    6ed0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6ed4:	48 89 c7             	mov    %rax,%rdi
    6ed7:	e8 24 0f 00 00       	call   7e00 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
    6edc:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6edf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6ee3:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6ee7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6eeb:	48 8b 00             	mov    (%rax),%rax
    6eee:	48 89 ce             	mov    %rcx,%rsi
    6ef1:	48 89 c7             	mov    %rax,%rdi
    6ef4:	e8 15 0f 00 00       	call   7e0e <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>
      }
    6ef9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6efd:	48 89 c7             	mov    %rax,%rdi
    6f00:	e8 27 00 00 00       	call   6f2c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    6f05:	90                   	nop
    6f06:	c9                   	leave
    6f07:	c3                   	ret

0000000000006f08 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    6f08:	55                   	push   %rbp
    6f09:	48 89 e5             	mov    %rsp,%rbp
    6f0c:	48 83 ec 10          	sub    $0x10,%rsp
    6f10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    6f14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f18:	48 8b 10             	mov    (%rax),%rdx
    6f1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f1f:	48 89 d6             	mov    %rdx,%rsi
    6f22:	48 89 c7             	mov    %rax,%rdi
    6f25:	e8 0e 0f 00 00       	call   7e38 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
    6f2a:	c9                   	leave
    6f2b:	c3                   	ret

0000000000006f2c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    6f2c:	55                   	push   %rbp
    6f2d:	48 89 e5             	mov    %rsp,%rbp
    6f30:	48 83 ec 10          	sub    $0x10,%rsp
    6f34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    6f38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f3c:	48 8b 50 10          	mov    0x10(%rax),%rdx
    6f40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f44:	48 8b 00             	mov    (%rax),%rax
    6f47:	48 29 c2             	sub    %rax,%rdx
    6f4a:	48 89 d0             	mov    %rdx,%rax
    6f4d:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    6f51:	48 89 c2             	mov    %rax,%rdx
    6f54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f58:	48 8b 08             	mov    (%rax),%rcx
    6f5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f5f:	48 89 ce             	mov    %rcx,%rsi
    6f62:	48 89 c7             	mov    %rax,%rdi
    6f65:	e8 06 0f 00 00       	call   7e70 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
      }
    6f6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f6e:	48 89 c7             	mov    %rax,%rdi
    6f71:	e8 00 fa ff ff       	call   6976 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>
    6f76:	90                   	nop
    6f77:	c9                   	leave
    6f78:	c3                   	ret
    6f79:	90                   	nop

0000000000006f7a <_ZNSaI23VkQueueFamilyPropertiesEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    6f7a:	55                   	push   %rbp
    6f7b:	48 89 e5             	mov    %rsp,%rbp
    6f7e:	48 83 ec 10          	sub    $0x10,%rsp
    6f82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6f86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f8a:	48 89 c7             	mov    %rax,%rdi
    6f8d:	e8 14 0f 00 00       	call   7ea6 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesEC1Ev>
    6f92:	90                   	nop
    6f93:	c9                   	leave
    6f94:	c3                   	ret
    6f95:	90                   	nop

0000000000006f96 <_ZNSaI23VkQueueFamilyPropertiesED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    6f96:	55                   	push   %rbp
    6f97:	48 89 e5             	mov    %rsp,%rbp
    6f9a:	48 83 ec 10          	sub    $0x10,%rsp
    6f9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6fa6:	48 89 c7             	mov    %rax,%rdi
    6fa9:	e8 04 0f 00 00       	call   7eb2 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesED1Ev>
    6fae:	90                   	nop
    6faf:	c9                   	leave
    6fb0:	c3                   	ret
    6fb1:	90                   	nop

0000000000006fb2 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    6fb2:	55                   	push   %rbp
    6fb3:	48 89 e5             	mov    %rsp,%rbp
    6fb6:	53                   	push   %rbx
    6fb7:	48 83 ec 28          	sub    $0x28,%rsp
    6fbb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6fbf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6fc3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    6fc7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    6fcb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    6fcf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6fd3:	48 89 d6             	mov    %rdx,%rsi
    6fd6:	48 89 c7             	mov    %rax,%rdi
    6fd9:	e8 df 0e 00 00       	call   7ebd <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>
    6fde:	48 89 c1             	mov    %rax,%rcx
    6fe1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6fe5:	48 89 c2             	mov    %rax,%rdx
    6fe8:	48 89 ce             	mov    %rcx,%rsi
    6feb:	48 89 df             	mov    %rbx,%rdi
    6fee:	e8 2b 0f 00 00       	call   7f1e <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    6ff3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6ff7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6ffb:	48 89 d6             	mov    %rdx,%rsi
    6ffe:	48 89 c7             	mov    %rax,%rdi
    7001:	e8 76 0f 00 00       	call   7f7c <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE21_M_default_initializeEm>
    7006:	eb 1a                	jmp    7022 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_+0x70>
    7008:	48 89 c3             	mov    %rax,%rbx
    700b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    700f:	48 89 c7             	mov    %rax,%rdi
    7012:	e8 79 00 00 00       	call   7090 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    7017:	48 89 d8             	mov    %rbx,%rax
    701a:	48 89 c7             	mov    %rax,%rdi
    701d:	e8 ce c5 ff ff       	call   35f0 <_Unwind_Resume@plt>
    7022:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7026:	c9                   	leave
    7027:	c3                   	ret

0000000000007028 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    7028:	55                   	push   %rbp
    7029:	48 89 e5             	mov    %rsp,%rbp
    702c:	48 83 ec 10          	sub    $0x10,%rsp
    7030:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    7034:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7038:	48 89 c7             	mov    %rax,%rdi
    703b:	e8 7c 0f 00 00       	call   7fbc <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    7040:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    7043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7047:	48 8b 48 08          	mov    0x8(%rax),%rcx
    704b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    704f:	48 8b 00             	mov    (%rax),%rax
    7052:	48 89 ce             	mov    %rcx,%rsi
    7055:	48 89 c7             	mov    %rax,%rdi
    7058:	e8 6d 0f 00 00       	call   7fca <_ZSt8_DestroyIP23VkQueueFamilyPropertiesS0_EvT_S2_RSaIT0_E>
      }
    705d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7061:	48 89 c7             	mov    %rax,%rdi
    7064:	e8 27 00 00 00       	call   7090 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    7069:	90                   	nop
    706a:	c9                   	leave
    706b:	c3                   	ret

000000000000706c <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    706c:	55                   	push   %rbp
    706d:	48 89 e5             	mov    %rsp,%rbp
    7070:	48 83 ec 10          	sub    $0x10,%rsp
    7074:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    7078:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    707c:	48 8b 10             	mov    (%rax),%rdx
    707f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7083:	48 89 d6             	mov    %rdx,%rsi
    7086:	48 89 c7             	mov    %rax,%rdi
    7089:	e8 66 0f 00 00       	call   7ff4 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    708e:	c9                   	leave
    708f:	c3                   	ret

0000000000007090 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    7090:	55                   	push   %rbp
    7091:	48 89 e5             	mov    %rsp,%rbp
    7094:	48 83 ec 10          	sub    $0x10,%rsp
    7098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    709c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    70a0:	48 8b 50 10          	mov    0x10(%rax),%rdx
    70a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    70a8:	48 8b 00             	mov    (%rax),%rax
    70ab:	48 29 c2             	sub    %rax,%rdx
    70ae:	48 c1 fa 03          	sar    $0x3,%rdx
    70b2:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    70b9:	aa aa aa 
    70bc:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
    70c0:	48 89 c2             	mov    %rax,%rdx
    70c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    70c7:	48 8b 08             	mov    (%rax),%rcx
    70ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    70ce:	48 89 ce             	mov    %rcx,%rsi
    70d1:	48 89 c7             	mov    %rax,%rdi
    70d4:	e8 53 0f 00 00       	call   802c <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE13_M_deallocateEPS0_m>
      }
    70d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    70dd:	48 89 c7             	mov    %rax,%rdi
    70e0:	e8 ad f8 ff ff       	call   6992 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implD1Ev>
    70e5:	90                   	nop
    70e6:	c9                   	leave
    70e7:	c3                   	ret

00000000000070e8 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    70e8:	55                   	push   %rbp
    70e9:	48 89 e5             	mov    %rsp,%rbp
    70ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    70f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    70f4:	48 8b 50 08          	mov    0x8(%rax),%rdx
    70f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    70fc:	48 8b 00             	mov    (%rax),%rax
    70ff:	48 29 c2             	sub    %rax,%rdx
    7102:	48 c1 fa 03          	sar    $0x3,%rdx
    7106:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    710d:	aa aa aa 
    7110:	48 0f af c2          	imul   %rdx,%rax
    7114:	5d                   	pop    %rbp
    7115:	c3                   	ret

0000000000007116 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    7116:	55                   	push   %rbp
    7117:	48 89 e5             	mov    %rsp,%rbp
    711a:	48 83 ec 10          	sub    $0x10,%rsp
    711e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7122:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7126:	48 89 c7             	mov    %rax,%rdi
    7129:	e8 34 0f 00 00       	call   8062 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>
    712e:	90                   	nop
    712f:	c9                   	leave
    7130:	c3                   	ret
    7131:	90                   	nop

0000000000007132 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    7132:	55                   	push   %rbp
    7133:	48 89 e5             	mov    %rsp,%rbp
    7136:	48 83 ec 10          	sub    $0x10,%rsp
    713a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    713e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7142:	48 89 c7             	mov    %rax,%rdi
    7145:	e8 24 0f 00 00       	call   806e <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
    714a:	90                   	nop
    714b:	c9                   	leave
    714c:	c3                   	ret
    714d:	90                   	nop

000000000000714e <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    714e:	55                   	push   %rbp
    714f:	48 89 e5             	mov    %rsp,%rbp
    7152:	53                   	push   %rbx
    7153:	48 83 ec 28          	sub    $0x28,%rsp
    7157:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    715b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    715f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    7163:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    7167:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    716b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    716f:	48 89 d6             	mov    %rdx,%rsi
    7172:	48 89 c7             	mov    %rax,%rdi
    7175:	e8 ff 0e 00 00       	call   8079 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_S_check_init_lenEmRKS3_>
    717a:	48 89 c1             	mov    %rax,%rcx
    717d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7181:	48 89 c2             	mov    %rax,%rdx
    7184:	48 89 ce             	mov    %rcx,%rsi
    7187:	48 89 df             	mov    %rbx,%rdi
    718a:	e8 4b 0f 00 00       	call   80da <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>
      { _M_default_initialize(__n); }
    718f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7197:	48 89 d6             	mov    %rdx,%rsi
    719a:	48 89 c7             	mov    %rax,%rdi
    719d:	e8 96 0f 00 00       	call   8138 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE21_M_default_initializeEm>
    71a2:	eb 1a                	jmp    71be <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_+0x70>
    71a4:	48 89 c3             	mov    %rax,%rbx
    71a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    71ab:	48 89 c7             	mov    %rax,%rdi
    71ae:	e8 bb 01 00 00       	call   736e <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    71b3:	48 89 d8             	mov    %rbx,%rax
    71b6:	48 89 c7             	mov    %rax,%rdi
    71b9:	e8 32 c4 ff ff       	call   35f0 <_Unwind_Resume@plt>
    71be:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    71c2:	c9                   	leave
    71c3:	c3                   	ret

00000000000071c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    71c4:	55                   	push   %rbp
    71c5:	48 89 e5             	mov    %rsp,%rbp
    71c8:	48 83 ec 10          	sub    $0x10,%rsp
    71cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    71d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    71d4:	48 89 c7             	mov    %rax,%rdi
    71d7:	e8 9c 0f 00 00       	call   8178 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE19_M_get_Tp_allocatorEv>
    71dc:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    71df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    71e3:	48 8b 48 08          	mov    0x8(%rax),%rcx
    71e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    71eb:	48 8b 00             	mov    (%rax),%rax
    71ee:	48 89 ce             	mov    %rcx,%rsi
    71f1:	48 89 c7             	mov    %rax,%rdi
    71f4:	e8 8d 0f 00 00       	call   8186 <_ZSt8_DestroyIPSt8optionalI23VkQueueFamilyPropertiesES2_EvT_S4_RSaIT0_E>
      }
    71f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    71fd:	48 89 c7             	mov    %rax,%rdi
    7200:	e8 69 01 00 00       	call   736e <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    7205:	90                   	nop
    7206:	c9                   	leave
    7207:	c3                   	ret

0000000000007208 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    7208:	55                   	push   %rbp
    7209:	48 89 e5             	mov    %rsp,%rbp
    720c:	48 83 ec 20          	sub    $0x20,%rsp
    7210:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    7214:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7218:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    721c:	48 89 d6             	mov    %rdx,%rsi
    721f:	48 89 c7             	mov    %rax,%rdi
    7222:	e8 89 0f 00 00       	call   81b0 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    7227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    722b:	c9                   	leave
    722c:	c3                   	ret
    722d:	90                   	nop

000000000000722e <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    722e:	55                   	push   %rbp
    722f:	48 89 e5             	mov    %rsp,%rbp
    7232:	48 83 ec 20          	sub    $0x20,%rsp
    7236:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    723a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    723e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    7242:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    7246:	48 89 d6             	mov    %rdx,%rsi
    7249:	48 89 c7             	mov    %rax,%rdi
    724c:	e8 5f 0f 00 00       	call   81b0 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    7251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7255:	c9                   	leave
    7256:	c3                   	ret

0000000000007257 <_ZN9__gnu_cxxneIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    7257:	55                   	push   %rbp
    7258:	48 89 e5             	mov    %rsp,%rbp
    725b:	53                   	push   %rbx
    725c:	48 83 ec 18          	sub    $0x18,%rsp
    7260:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7264:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    7268:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    726c:	48 89 c7             	mov    %rax,%rdi
    726f:	e8 5a 0f 00 00       	call   81ce <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    7274:	48 8b 18             	mov    (%rax),%rbx
    7277:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    727b:	48 89 c7             	mov    %rax,%rdi
    727e:	e8 4b 0f 00 00       	call   81ce <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    7283:	48 8b 00             	mov    (%rax),%rax
    7286:	48 39 c3             	cmp    %rax,%rbx
    7289:	0f 95 c0             	setne  %al
    728c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7290:	c9                   	leave
    7291:	c3                   	ret

0000000000007292 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    7292:	55                   	push   %rbp
    7293:	48 89 e5             	mov    %rsp,%rbp
    7296:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    729a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    729e:	48 8b 00             	mov    (%rax),%rax
    72a1:	48 8d 50 18          	lea    0x18(%rax),%rdx
    72a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    72a9:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    72ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    72b0:	5d                   	pop    %rbp
    72b1:	c3                   	ret

00000000000072b2 <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    72b2:	55                   	push   %rbp
    72b3:	48 89 e5             	mov    %rsp,%rbp
    72b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    72ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    72be:	48 8b 00             	mov    (%rax),%rax
    72c1:	5d                   	pop    %rbp
    72c2:	c3                   	ret
    72c3:	90                   	nop

00000000000072c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    72c4:	55                   	push   %rbp
    72c5:	48 89 e5             	mov    %rsp,%rbp
    72c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    72cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
    72d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    72d4:	48 8b 08             	mov    (%rax),%rcx
    72d7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    72db:	48 89 d0             	mov    %rdx,%rax
    72de:	48 c1 e0 03          	shl    $0x3,%rax
    72e2:	48 29 d0             	sub    %rdx,%rax
    72e5:	48 c1 e0 02          	shl    $0x2,%rax
    72e9:	48 01 c8             	add    %rcx,%rax
      }
    72ec:	5d                   	pop    %rbp
    72ed:	c3                   	ret

00000000000072ee <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_>:
			    __not_<__and_<is_scalar<_Tp>,
					  is_same<_Tp, decay_t<_Up>>>>,
			    is_constructible<_Tp, _Up>,
			    is_assignable<_Tp&, _Up>>,
		    optional&>
	operator=(_Up&& __u)
    72ee:	55                   	push   %rbp
    72ef:	48 89 e5             	mov    %rsp,%rbp
    72f2:	53                   	push   %rbx
    72f3:	48 83 ec 18          	sub    $0x18,%rsp
    72f7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    72fb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	noexcept(__and_v<is_nothrow_constructible<_Tp, _Up>,
			 is_nothrow_assignable<_Tp&, _Up>>)
	{
	  if (this->_M_is_engaged())
    72ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7303:	48 89 c7             	mov    %rax,%rdi
    7306:	e8 d1 0e 00 00       	call   81dc <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
    730b:	84 c0                	test   %al,%al
    730d:	74 36                	je     7345 <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_+0x57>
	    this->_M_get() = std::forward<_Up>(__u);
    730f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    7313:	48 89 c7             	mov    %rax,%rdi
    7316:	e8 17 0f 00 00       	call   8232 <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    731b:	48 89 c3             	mov    %rax,%rbx
    731e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7322:	48 89 c7             	mov    %rax,%rdi
    7325:	e8 c4 0e 00 00       	call   81ee <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
    732a:	48 89 c1             	mov    %rax,%rcx
    732d:	48 8b 03             	mov    (%rbx),%rax
    7330:	48 8b 53 08          	mov    0x8(%rbx),%rdx
    7334:	48 89 01             	mov    %rax,(%rcx)
    7337:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    733b:	48 8b 43 10          	mov    0x10(%rbx),%rax
    733f:	48 89 41 10          	mov    %rax,0x10(%rcx)
    7343:	eb 1e                	jmp    7363 <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_+0x75>
	  else
	    this->_M_construct(std::forward<_Up>(__u));
    7345:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    7349:	48 89 c7             	mov    %rax,%rdi
    734c:	e8 e1 0e 00 00       	call   8232 <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    7351:	48 89 c2             	mov    %rax,%rdx
    7354:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7358:	48 89 d6             	mov    %rdx,%rsi
    735b:	48 89 c7             	mov    %rax,%rdi
    735e:	e8 dd 0e 00 00       	call   8240 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE12_M_constructIJRKS0_EEEvDpOT_>

	  return *this;
    7363:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    7367:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    736b:	c9                   	leave
    736c:	c3                   	ret
    736d:	90                   	nop

000000000000736e <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    736e:	55                   	push   %rbp
    736f:	48 89 e5             	mov    %rsp,%rbp
    7372:	48 83 ec 10          	sub    $0x10,%rsp
    7376:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    737a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    737e:	48 8b 50 10          	mov    0x10(%rax),%rdx
    7382:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7386:	48 8b 00             	mov    (%rax),%rax
    7389:	48 29 c2             	sub    %rax,%rdx
    738c:	48 c1 fa 02          	sar    $0x2,%rdx
    7390:	48 b8 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rax
    7397:	db b6 6d 
    739a:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
    739e:	48 89 c2             	mov    %rax,%rdx
    73a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    73a5:	48 8b 08             	mov    (%rax),%rcx
    73a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    73ac:	48 89 ce             	mov    %rcx,%rsi
    73af:	48 89 c7             	mov    %rax,%rdi
    73b2:	e8 e3 0e 00 00       	call   829a <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE13_M_deallocateEPS2_m>
      }
    73b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    73bb:	48 89 c7             	mov    %rax,%rdi
    73be:	e8 eb f5 ff ff       	call   69ae <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implD1Ev>
    73c3:	90                   	nop
    73c4:	c9                   	leave
    73c5:	c3                   	ret

00000000000073c6 <_ZNSaI18VkSurfaceFormatKHREC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    73c6:	55                   	push   %rbp
    73c7:	48 89 e5             	mov    %rsp,%rbp
    73ca:	48 83 ec 10          	sub    $0x10,%rsp
    73ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    73d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    73d6:	48 89 c7             	mov    %rax,%rdi
    73d9:	e8 f2 0e 00 00       	call   82d0 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHREC1Ev>
    73de:	90                   	nop
    73df:	c9                   	leave
    73e0:	c3                   	ret
    73e1:	90                   	nop

00000000000073e2 <_ZNSaI18VkSurfaceFormatKHRED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    73e2:	55                   	push   %rbp
    73e3:	48 89 e5             	mov    %rsp,%rbp
    73e6:	48 83 ec 10          	sub    $0x10,%rsp
    73ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    73ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    73f2:	48 89 c7             	mov    %rax,%rdi
    73f5:	e8 e2 0e 00 00       	call   82dc <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRED1Ev>
    73fa:	90                   	nop
    73fb:	c9                   	leave
    73fc:	c3                   	ret
    73fd:	90                   	nop

00000000000073fe <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    73fe:	55                   	push   %rbp
    73ff:	48 89 e5             	mov    %rsp,%rbp
    7402:	53                   	push   %rbx
    7403:	48 83 ec 28          	sub    $0x28,%rsp
    7407:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    740b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    740f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    7413:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    7417:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    741b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    741f:	48 89 d6             	mov    %rdx,%rsi
    7422:	48 89 c7             	mov    %rax,%rdi
    7425:	e8 bd 0e 00 00       	call   82e7 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE17_S_check_init_lenEmRKS1_>
    742a:	48 89 c1             	mov    %rax,%rcx
    742d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7431:	48 89 c2             	mov    %rax,%rdx
    7434:	48 89 ce             	mov    %rcx,%rsi
    7437:	48 89 df             	mov    %rbx,%rdi
    743a:	e8 09 0f 00 00       	call   8348 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    743f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7443:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7447:	48 89 d6             	mov    %rdx,%rsi
    744a:	48 89 c7             	mov    %rax,%rdi
    744d:	e8 54 0f 00 00       	call   83a6 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE21_M_default_initializeEm>
    7452:	eb 1a                	jmp    746e <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_+0x70>
    7454:	48 89 c3             	mov    %rax,%rbx
    7457:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    745b:	48 89 c7             	mov    %rax,%rdi
    745e:	e8 79 00 00 00       	call   74dc <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EED1Ev>
    7463:	48 89 d8             	mov    %rbx,%rax
    7466:	48 89 c7             	mov    %rax,%rdi
    7469:	e8 82 c1 ff ff       	call   35f0 <_Unwind_Resume@plt>
    746e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7472:	c9                   	leave
    7473:	c3                   	ret

0000000000007474 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    7474:	55                   	push   %rbp
    7475:	48 89 e5             	mov    %rsp,%rbp
    7478:	48 83 ec 10          	sub    $0x10,%rsp
    747c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    7480:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7484:	48 89 c7             	mov    %rax,%rdi
    7487:	e8 5a 0f 00 00       	call   83e6 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE19_M_get_Tp_allocatorEv>
    748c:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    748f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7493:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7497:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    749b:	48 8b 00             	mov    (%rax),%rax
    749e:	48 89 ce             	mov    %rcx,%rsi
    74a1:	48 89 c7             	mov    %rax,%rdi
    74a4:	e8 4b 0f 00 00       	call   83f4 <_ZSt8_DestroyIP18VkSurfaceFormatKHRS0_EvT_S2_RSaIT0_E>
      }
    74a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    74ad:	48 89 c7             	mov    %rax,%rdi
    74b0:	e8 27 00 00 00       	call   74dc <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EED1Ev>
    74b5:	90                   	nop
    74b6:	c9                   	leave
    74b7:	c3                   	ret

00000000000074b8 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    74b8:	55                   	push   %rbp
    74b9:	48 89 e5             	mov    %rsp,%rbp
    74bc:	48 83 ec 10          	sub    $0x10,%rsp
    74c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    74c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    74c8:	48 8b 10             	mov    (%rax),%rdx
    74cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    74cf:	48 89 d6             	mov    %rdx,%rsi
    74d2:	48 89 c7             	mov    %rax,%rdi
    74d5:	e8 44 0f 00 00       	call   841e <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    74da:	c9                   	leave
    74db:	c3                   	ret

00000000000074dc <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    74dc:	55                   	push   %rbp
    74dd:	48 89 e5             	mov    %rsp,%rbp
    74e0:	48 83 ec 10          	sub    $0x10,%rsp
    74e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    74e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    74ec:	48 8b 50 10          	mov    0x10(%rax),%rdx
    74f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    74f4:	48 8b 00             	mov    (%rax),%rax
    74f7:	48 29 c2             	sub    %rax,%rdx
    74fa:	48 89 d0             	mov    %rdx,%rax
    74fd:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    7501:	48 89 c2             	mov    %rax,%rdx
    7504:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7508:	48 8b 08             	mov    (%rax),%rcx
    750b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    750f:	48 89 ce             	mov    %rcx,%rsi
    7512:	48 89 c7             	mov    %rax,%rdi
    7515:	e8 3c 0f 00 00       	call   8456 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE13_M_deallocateEPS0_m>
      }
    751a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    751e:	48 89 c7             	mov    %rax,%rdi
    7521:	e8 a4 f4 ff ff       	call   69ca <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implD1Ev>
    7526:	90                   	nop
    7527:	c9                   	leave
    7528:	c3                   	ret
    7529:	90                   	nop

000000000000752a <_ZNSaI16VkPresentModeKHREC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    752a:	55                   	push   %rbp
    752b:	48 89 e5             	mov    %rsp,%rbp
    752e:	48 83 ec 10          	sub    $0x10,%rsp
    7532:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    753a:	48 89 c7             	mov    %rax,%rdi
    753d:	e8 4a 0f 00 00       	call   848c <_ZNSt15__new_allocatorI16VkPresentModeKHREC1Ev>
    7542:	90                   	nop
    7543:	c9                   	leave
    7544:	c3                   	ret
    7545:	90                   	nop

0000000000007546 <_ZNSaI16VkPresentModeKHRED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    7546:	55                   	push   %rbp
    7547:	48 89 e5             	mov    %rsp,%rbp
    754a:	48 83 ec 10          	sub    $0x10,%rsp
    754e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7552:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7556:	48 89 c7             	mov    %rax,%rdi
    7559:	e8 3a 0f 00 00       	call   8498 <_ZNSt15__new_allocatorI16VkPresentModeKHRED1Ev>
    755e:	90                   	nop
    755f:	c9                   	leave
    7560:	c3                   	ret
    7561:	90                   	nop

0000000000007562 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    7562:	55                   	push   %rbp
    7563:	48 89 e5             	mov    %rsp,%rbp
    7566:	53                   	push   %rbx
    7567:	48 83 ec 28          	sub    $0x28,%rsp
    756b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    756f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    7573:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    7577:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    757b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    757f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    7583:	48 89 d6             	mov    %rdx,%rsi
    7586:	48 89 c7             	mov    %rax,%rdi
    7589:	e8 15 0f 00 00       	call   84a3 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE17_S_check_init_lenEmRKS1_>
    758e:	48 89 c1             	mov    %rax,%rcx
    7591:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7595:	48 89 c2             	mov    %rax,%rdx
    7598:	48 89 ce             	mov    %rcx,%rsi
    759b:	48 89 df             	mov    %rbx,%rdi
    759e:	e8 61 0f 00 00       	call   8504 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    75a3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    75a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    75ab:	48 89 d6             	mov    %rdx,%rsi
    75ae:	48 89 c7             	mov    %rax,%rdi
    75b1:	e8 ac 0f 00 00       	call   8562 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE21_M_default_initializeEm>
    75b6:	eb 1a                	jmp    75d2 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EEC1EmRKS1_+0x70>
    75b8:	48 89 c3             	mov    %rax,%rbx
    75bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    75bf:	48 89 c7             	mov    %rax,%rdi
    75c2:	e8 79 00 00 00       	call   7640 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EED1Ev>
    75c7:	48 89 d8             	mov    %rbx,%rax
    75ca:	48 89 c7             	mov    %rax,%rdi
    75cd:	e8 1e c0 ff ff       	call   35f0 <_Unwind_Resume@plt>
    75d2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    75d6:	c9                   	leave
    75d7:	c3                   	ret

00000000000075d8 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    75d8:	55                   	push   %rbp
    75d9:	48 89 e5             	mov    %rsp,%rbp
    75dc:	48 83 ec 10          	sub    $0x10,%rsp
    75e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    75e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    75e8:	48 89 c7             	mov    %rax,%rdi
    75eb:	e8 b2 0f 00 00       	call   85a2 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE19_M_get_Tp_allocatorEv>
    75f0:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    75f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    75f7:	48 8b 48 08          	mov    0x8(%rax),%rcx
    75fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    75ff:	48 8b 00             	mov    (%rax),%rax
    7602:	48 89 ce             	mov    %rcx,%rsi
    7605:	48 89 c7             	mov    %rax,%rdi
    7608:	e8 a3 0f 00 00       	call   85b0 <_ZSt8_DestroyIP16VkPresentModeKHRS0_EvT_S2_RSaIT0_E>
      }
    760d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7611:	48 89 c7             	mov    %rax,%rdi
    7614:	e8 27 00 00 00       	call   7640 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EED1Ev>
    7619:	90                   	nop
    761a:	c9                   	leave
    761b:	c3                   	ret

000000000000761c <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    761c:	55                   	push   %rbp
    761d:	48 89 e5             	mov    %rsp,%rbp
    7620:	48 83 ec 10          	sub    $0x10,%rsp
    7624:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    7628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    762c:	48 8b 10             	mov    (%rax),%rdx
    762f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7633:	48 89 d6             	mov    %rdx,%rsi
    7636:	48 89 c7             	mov    %rax,%rdi
    7639:	e8 9c 0f 00 00       	call   85da <_ZNKSt6vectorI16VkPresentModeKHRSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    763e:	c9                   	leave
    763f:	c3                   	ret

0000000000007640 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    7640:	55                   	push   %rbp
    7641:	48 89 e5             	mov    %rsp,%rbp
    7644:	48 83 ec 10          	sub    $0x10,%rsp
    7648:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    764c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7650:	48 8b 50 10          	mov    0x10(%rax),%rdx
    7654:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7658:	48 8b 00             	mov    (%rax),%rax
    765b:	48 29 c2             	sub    %rax,%rdx
    765e:	48 89 d0             	mov    %rdx,%rax
    7661:	48 c1 f8 02          	sar    $0x2,%rax
	_M_deallocate(_M_impl._M_start,
    7665:	48 89 c2             	mov    %rax,%rdx
    7668:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    766c:	48 8b 08             	mov    (%rax),%rcx
    766f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7673:	48 89 ce             	mov    %rcx,%rsi
    7676:	48 89 c7             	mov    %rax,%rdi
    7679:	e8 94 0f 00 00       	call   8612 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE13_M_deallocateEPS0_m>
      }
    767e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7682:	48 89 c7             	mov    %rax,%rdi
    7685:	e8 5c f3 ff ff       	call   69e6 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implD1Ev>
    768a:	90                   	nop
    768b:	c9                   	leave
    768c:	c3                   	ret
    768d:	90                   	nop

000000000000768e <_ZNSaIP9VkImage_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    768e:	55                   	push   %rbp
    768f:	48 89 e5             	mov    %rsp,%rbp
    7692:	48 83 ec 10          	sub    $0x10,%rsp
    7696:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    769a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    769e:	48 89 c7             	mov    %rax,%rdi
    76a1:	e8 a2 0f 00 00       	call   8648 <_ZNSt15__new_allocatorIP9VkImage_TEC1Ev>
    76a6:	90                   	nop
    76a7:	c9                   	leave
    76a8:	c3                   	ret
    76a9:	90                   	nop

00000000000076aa <_ZNSaIP9VkImage_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    76aa:	55                   	push   %rbp
    76ab:	48 89 e5             	mov    %rsp,%rbp
    76ae:	48 83 ec 10          	sub    $0x10,%rsp
    76b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    76b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    76ba:	48 89 c7             	mov    %rax,%rdi
    76bd:	e8 92 0f 00 00       	call   8654 <_ZNSt15__new_allocatorIP9VkImage_TED1Ev>
    76c2:	90                   	nop
    76c3:	c9                   	leave
    76c4:	c3                   	ret
    76c5:	90                   	nop

00000000000076c6 <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    76c6:	55                   	push   %rbp
    76c7:	48 89 e5             	mov    %rsp,%rbp
    76ca:	53                   	push   %rbx
    76cb:	48 83 ec 28          	sub    $0x28,%rsp
    76cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    76d3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    76d7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    76db:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    76df:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    76e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    76e7:	48 89 d6             	mov    %rdx,%rsi
    76ea:	48 89 c7             	mov    %rax,%rdi
    76ed:	e8 6d 0f 00 00       	call   865f <_ZNSt6vectorIP9VkImage_TSaIS1_EE17_S_check_init_lenEmRKS2_>
    76f2:	48 89 c1             	mov    %rax,%rcx
    76f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    76f9:	48 89 c2             	mov    %rax,%rdx
    76fc:	48 89 ce             	mov    %rcx,%rsi
    76ff:	48 89 df             	mov    %rbx,%rdi
    7702:	e8 b9 0f 00 00       	call   86c0 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
    7707:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    770b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    770f:	48 89 d6             	mov    %rdx,%rsi
    7712:	48 89 c7             	mov    %rax,%rdi
    7715:	e8 04 10 00 00       	call   871e <_ZNSt6vectorIP9VkImage_TSaIS1_EE21_M_default_initializeEm>
    771a:	eb 1a                	jmp    7736 <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1EmRKS2_+0x70>
    771c:	48 89 c3             	mov    %rax,%rbx
    771f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7723:	48 89 c7             	mov    %rax,%rdi
    7726:	e8 79 00 00 00       	call   77a4 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EED1Ev>
    772b:	48 89 d8             	mov    %rbx,%rax
    772e:	48 89 c7             	mov    %rax,%rdi
    7731:	e8 ba be ff ff       	call   35f0 <_Unwind_Resume@plt>
    7736:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    773a:	c9                   	leave
    773b:	c3                   	ret

000000000000773c <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    773c:	55                   	push   %rbp
    773d:	48 89 e5             	mov    %rsp,%rbp
    7740:	48 83 ec 10          	sub    $0x10,%rsp
    7744:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    7748:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    774c:	48 89 c7             	mov    %rax,%rdi
    774f:	e8 0a 10 00 00       	call   875e <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
    7754:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    7757:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    775b:	48 8b 48 08          	mov    0x8(%rax),%rcx
    775f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7763:	48 8b 00             	mov    (%rax),%rax
    7766:	48 89 ce             	mov    %rcx,%rsi
    7769:	48 89 c7             	mov    %rax,%rdi
    776c:	e8 fb 0f 00 00       	call   876c <_ZSt8_DestroyIPP9VkImage_TS1_EvT_S3_RSaIT0_E>
      }
    7771:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7775:	48 89 c7             	mov    %rax,%rdi
    7778:	e8 27 00 00 00       	call   77a4 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EED1Ev>
    777d:	90                   	nop
    777e:	c9                   	leave
    777f:	c3                   	ret

0000000000007780 <_ZNSt6vectorIP9VkImage_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    7780:	55                   	push   %rbp
    7781:	48 89 e5             	mov    %rsp,%rbp
    7784:	48 83 ec 10          	sub    $0x10,%rsp
    7788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    778c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7790:	48 8b 10             	mov    (%rax),%rdx
    7793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7797:	48 89 d6             	mov    %rdx,%rsi
    779a:	48 89 c7             	mov    %rax,%rdi
    779d:	e8 f4 0f 00 00       	call   8796 <_ZNKSt6vectorIP9VkImage_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
    77a2:	c9                   	leave
    77a3:	c3                   	ret

00000000000077a4 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    77a4:	55                   	push   %rbp
    77a5:	48 89 e5             	mov    %rsp,%rbp
    77a8:	48 83 ec 10          	sub    $0x10,%rsp
    77ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    77b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77b4:	48 8b 50 10          	mov    0x10(%rax),%rdx
    77b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77bc:	48 8b 00             	mov    (%rax),%rax
    77bf:	48 29 c2             	sub    %rax,%rdx
    77c2:	48 89 d0             	mov    %rdx,%rax
    77c5:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    77c9:	48 89 c2             	mov    %rax,%rdx
    77cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77d0:	48 8b 08             	mov    (%rax),%rcx
    77d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77d7:	48 89 ce             	mov    %rcx,%rsi
    77da:	48 89 c7             	mov    %rax,%rdi
    77dd:	e8 ec 0f 00 00       	call   87ce <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE13_M_deallocateEPS1_m>
      }
    77e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77e6:	48 89 c7             	mov    %rax,%rdi
    77e9:	e8 14 f2 ff ff       	call   6a02 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implD1Ev>
    77ee:	90                   	nop
    77ef:	c9                   	leave
    77f0:	c3                   	ret
    77f1:	90                   	nop

00000000000077f2 <_ZNSt15__new_allocatorI17VkLayerPropertiesEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    77f2:	55                   	push   %rbp
    77f3:	48 89 e5             	mov    %rsp,%rbp
    77f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77fa:	90                   	nop
    77fb:	5d                   	pop    %rbp
    77fc:	c3                   	ret
    77fd:	90                   	nop

00000000000077fe <_ZNSt15__new_allocatorI17VkLayerPropertiesED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    77fe:	55                   	push   %rbp
    77ff:	48 89 e5             	mov    %rsp,%rbp
    7802:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7806:	90                   	nop
    7807:	5d                   	pop    %rbp
    7808:	c3                   	ret

0000000000007809 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    7809:	55                   	push   %rbp
    780a:	48 89 e5             	mov    %rsp,%rbp
    780d:	53                   	push   %rbx
    780e:	48 83 ec 28          	sub    $0x28,%rsp
    7812:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7816:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    781a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    781e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7822:	48 89 d6             	mov    %rdx,%rsi
    7825:	48 89 c7             	mov    %rax,%rdi
    7828:	e8 25 01 00 00       	call   7952 <_ZNSaI17VkLayerPropertiesEC1ERKS0_>
    782d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7831:	48 89 c7             	mov    %rax,%rdi
    7834:	e8 ca 0f 00 00       	call   8803 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE11_S_max_sizeERKS1_>
    7839:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    783d:	0f 92 c3             	setb   %bl
    7840:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7844:	48 89 c7             	mov    %rax,%rdi
    7847:	e8 ee f1 ff ff       	call   6a3a <_ZNSaI17VkLayerPropertiesED1Ev>
    784c:	84 db                	test   %bl,%bl
    784e:	74 0f                	je     785f <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    7850:	48 8d 05 99 d8 00 00 	lea    0xd899(%rip),%rax        # 150f0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x158>
    7857:	48 89 c7             	mov    %rax,%rdi
    785a:	e8 01 b9 ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    785f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    7863:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7867:	c9                   	leave
    7868:	c3                   	ret
    7869:	90                   	nop

000000000000786a <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    786a:	55                   	push   %rbp
    786b:	48 89 e5             	mov    %rsp,%rbp
    786e:	53                   	push   %rbx
    786f:	48 83 ec 28          	sub    $0x28,%rsp
    7873:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7877:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    787b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    787f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7883:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7887:	48 89 d6             	mov    %rdx,%rsi
    788a:	48 89 c7             	mov    %rax,%rdi
    788d:	e8 b4 0f 00 00       	call   8846 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    7892:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7896:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    789a:	48 89 d6             	mov    %rdx,%rsi
    789d:	48 89 c7             	mov    %rax,%rdi
    78a0:	e8 d3 0f 00 00       	call   8878 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE17_M_create_storageEm>
    78a5:	eb 1a                	jmp    78c1 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EEC1EmRKS1_+0x57>
    78a7:	48 89 c3             	mov    %rax,%rbx
    78aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78ae:	48 89 c7             	mov    %rax,%rdi
    78b1:	e8 6c f0 ff ff       	call   6922 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implD1Ev>
    78b6:	48 89 d8             	mov    %rbx,%rax
    78b9:	48 89 c7             	mov    %rax,%rdi
    78bc:	e8 2f bd ff ff       	call   35f0 <_Unwind_Resume@plt>
    78c1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    78c5:	c9                   	leave
    78c6:	c3                   	ret
    78c7:	90                   	nop

00000000000078c8 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    78c8:	55                   	push   %rbp
    78c9:	48 89 e5             	mov    %rsp,%rbp
    78cc:	48 83 ec 10          	sub    $0x10,%rsp
    78d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    78d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    78d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    78dc:	48 89 c7             	mov    %rax,%rdi
    78df:	e8 24 00 00 00       	call   7908 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    78e4:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    78e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    78eb:	48 8b 00             	mov    (%rax),%rax
    78ee:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    78f2:	48 89 ce             	mov    %rcx,%rsi
    78f5:	48 89 c7             	mov    %rax,%rdi
    78f8:	e8 dc 0f 00 00       	call   88d9 <_ZSt27__uninitialized_default_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    78fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    7901:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    7905:	90                   	nop
    7906:	c9                   	leave
    7907:	c3                   	ret

0000000000007908 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    7908:	55                   	push   %rbp
    7909:	48 89 e5             	mov    %rsp,%rbp
    790c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    7910:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7914:	5d                   	pop    %rbp
    7915:	c3                   	ret

0000000000007916 <_ZSt8_DestroyIP17VkLayerPropertiesS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    7916:	55                   	push   %rbp
    7917:	48 89 e5             	mov    %rsp,%rbp
    791a:	48 83 ec 20          	sub    $0x20,%rsp
    791e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7922:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7926:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    792a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    792e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7932:	48 89 d6             	mov    %rdx,%rsi
    7935:	48 89 c7             	mov    %rax,%rdi
    7938:	e8 c5 0f 00 00       	call   8902 <_ZSt8_DestroyIP17VkLayerPropertiesEvT_S2_>
    }
    793d:	90                   	nop
    793e:	c9                   	leave
    793f:	c3                   	ret

0000000000007940 <_ZNKSt6vectorI17VkLayerPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    7940:	55                   	push   %rbp
    7941:	48 89 e5             	mov    %rsp,%rbp
    7944:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7948:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    794c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7950:	5d                   	pop    %rbp
    7951:	c3                   	ret

0000000000007952 <_ZNSaI17VkLayerPropertiesEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    7952:	55                   	push   %rbp
    7953:	48 89 e5             	mov    %rsp,%rbp
    7956:	48 83 ec 10          	sub    $0x10,%rsp
    795a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    795e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    7962:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7966:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    796a:	48 89 d6             	mov    %rdx,%rsi
    796d:	48 89 c7             	mov    %rax,%rdi
    7970:	e8 b3 0f 00 00       	call   8928 <_ZNSt15__new_allocatorI17VkLayerPropertiesEC1ERKS1_>
    7975:	90                   	nop
    7976:	c9                   	leave
    7977:	c3                   	ret

0000000000007978 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    7978:	55                   	push   %rbp
    7979:	48 89 e5             	mov    %rsp,%rbp
    797c:	48 83 ec 20          	sub    $0x20,%rsp
    7980:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7984:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7988:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    798c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    7991:	74 17                	je     79aa <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    7993:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7997:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    799b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    799f:	48 89 ce             	mov    %rcx,%rsi
    79a2:	48 89 c7             	mov    %rax,%rdi
    79a5:	e8 8d 0f 00 00       	call   8937 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE10deallocateERS1_PS0_m>
      }
    79aa:	90                   	nop
    79ab:	c9                   	leave
    79ac:	c3                   	ret
    79ad:	90                   	nop

00000000000079ae <_ZNSt15__new_allocatorI21VkExtensionPropertiesEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    79ae:	55                   	push   %rbp
    79af:	48 89 e5             	mov    %rsp,%rbp
    79b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    79b6:	90                   	nop
    79b7:	5d                   	pop    %rbp
    79b8:	c3                   	ret
    79b9:	90                   	nop

00000000000079ba <_ZNSt15__new_allocatorI21VkExtensionPropertiesED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    79ba:	55                   	push   %rbp
    79bb:	48 89 e5             	mov    %rsp,%rbp
    79be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    79c2:	90                   	nop
    79c3:	5d                   	pop    %rbp
    79c4:	c3                   	ret

00000000000079c5 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    79c5:	55                   	push   %rbp
    79c6:	48 89 e5             	mov    %rsp,%rbp
    79c9:	53                   	push   %rbx
    79ca:	48 83 ec 28          	sub    $0x28,%rsp
    79ce:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    79d2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    79d6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    79da:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    79de:	48 89 d6             	mov    %rdx,%rsi
    79e1:	48 89 c7             	mov    %rax,%rdi
    79e4:	e8 25 01 00 00       	call   7b0e <_ZNSaI21VkExtensionPropertiesEC1ERKS0_>
    79e9:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    79ed:	48 89 c7             	mov    %rax,%rdi
    79f0:	e8 70 0f 00 00       	call   8965 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE11_S_max_sizeERKS1_>
    79f5:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    79f9:	0f 92 c3             	setb   %bl
    79fc:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7a00:	48 89 c7             	mov    %rax,%rdi
    7a03:	e8 a0 f1 ff ff       	call   6ba8 <_ZNSaI21VkExtensionPropertiesED1Ev>
    7a08:	84 db                	test   %bl,%bl
    7a0a:	74 0f                	je     7a1b <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    7a0c:	48 8d 05 dd d6 00 00 	lea    0xd6dd(%rip),%rax        # 150f0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x158>
    7a13:	48 89 c7             	mov    %rax,%rdi
    7a16:	e8 45 b7 ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    7a1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    7a1f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7a23:	c9                   	leave
    7a24:	c3                   	ret
    7a25:	90                   	nop

0000000000007a26 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    7a26:	55                   	push   %rbp
    7a27:	48 89 e5             	mov    %rsp,%rbp
    7a2a:	53                   	push   %rbx
    7a2b:	48 83 ec 28          	sub    $0x28,%rsp
    7a2f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7a33:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    7a37:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    7a3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7a3f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7a43:	48 89 d6             	mov    %rdx,%rsi
    7a46:	48 89 c7             	mov    %rax,%rdi
    7a49:	e8 5a 0f 00 00       	call   89a8 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    7a4e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7a52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7a56:	48 89 d6             	mov    %rdx,%rsi
    7a59:	48 89 c7             	mov    %rax,%rdi
    7a5c:	e8 79 0f 00 00       	call   89da <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE17_M_create_storageEm>
    7a61:	eb 1a                	jmp    7a7d <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_+0x57>
    7a63:	48 89 c3             	mov    %rax,%rbx
    7a66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7a6a:	48 89 c7             	mov    %rax,%rdi
    7a6d:	e8 cc ee ff ff       	call   693e <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implD1Ev>
    7a72:	48 89 d8             	mov    %rbx,%rax
    7a75:	48 89 c7             	mov    %rax,%rdi
    7a78:	e8 73 bb ff ff       	call   35f0 <_Unwind_Resume@plt>
    7a7d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7a81:	c9                   	leave
    7a82:	c3                   	ret
    7a83:	90                   	nop

0000000000007a84 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    7a84:	55                   	push   %rbp
    7a85:	48 89 e5             	mov    %rsp,%rbp
    7a88:	48 83 ec 10          	sub    $0x10,%rsp
    7a8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7a90:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    7a94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7a98:	48 89 c7             	mov    %rax,%rdi
    7a9b:	e8 24 00 00 00       	call   7ac4 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    7aa0:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    7aa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7aa7:	48 8b 00             	mov    (%rax),%rax
    7aaa:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7aae:	48 89 ce             	mov    %rcx,%rsi
    7ab1:	48 89 c7             	mov    %rax,%rdi
    7ab4:	e8 82 0f 00 00       	call   8a3b <_ZSt27__uninitialized_default_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    7ab9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    7abd:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    7ac1:	90                   	nop
    7ac2:	c9                   	leave
    7ac3:	c3                   	ret

0000000000007ac4 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    7ac4:	55                   	push   %rbp
    7ac5:	48 89 e5             	mov    %rsp,%rbp
    7ac8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    7acc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7ad0:	5d                   	pop    %rbp
    7ad1:	c3                   	ret

0000000000007ad2 <_ZSt8_DestroyIP21VkExtensionPropertiesS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    7ad2:	55                   	push   %rbp
    7ad3:	48 89 e5             	mov    %rsp,%rbp
    7ad6:	48 83 ec 20          	sub    $0x20,%rsp
    7ada:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7ade:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7ae2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    7ae6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7aea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7aee:	48 89 d6             	mov    %rdx,%rsi
    7af1:	48 89 c7             	mov    %rax,%rdi
    7af4:	e8 6b 0f 00 00       	call   8a64 <_ZSt8_DestroyIP21VkExtensionPropertiesEvT_S2_>
    }
    7af9:	90                   	nop
    7afa:	c9                   	leave
    7afb:	c3                   	ret

0000000000007afc <_ZNKSt6vectorI21VkExtensionPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    7afc:	55                   	push   %rbp
    7afd:	48 89 e5             	mov    %rsp,%rbp
    7b00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7b04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    7b08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7b0c:	5d                   	pop    %rbp
    7b0d:	c3                   	ret

0000000000007b0e <_ZNSaI21VkExtensionPropertiesEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    7b0e:	55                   	push   %rbp
    7b0f:	48 89 e5             	mov    %rsp,%rbp
    7b12:	48 83 ec 10          	sub    $0x10,%rsp
    7b16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7b1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    7b1e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7b22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b26:	48 89 d6             	mov    %rdx,%rsi
    7b29:	48 89 c7             	mov    %rax,%rdi
    7b2c:	e8 59 0f 00 00       	call   8a8a <_ZNSt15__new_allocatorI21VkExtensionPropertiesEC1ERKS1_>
    7b31:	90                   	nop
    7b32:	c9                   	leave
    7b33:	c3                   	ret

0000000000007b34 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    7b34:	55                   	push   %rbp
    7b35:	48 89 e5             	mov    %rsp,%rbp
    7b38:	48 83 ec 20          	sub    $0x20,%rsp
    7b3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7b40:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7b44:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    7b48:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    7b4d:	74 17                	je     7b66 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    7b4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b53:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7b57:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7b5b:	48 89 ce             	mov    %rcx,%rsi
    7b5e:	48 89 c7             	mov    %rax,%rdi
    7b61:	e8 33 0f 00 00       	call   8a99 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE10deallocateERS1_PS0_m>
      }
    7b66:	90                   	nop
    7b67:	c9                   	leave
    7b68:	c3                   	ret
    7b69:	90                   	nop

0000000000007b6a <_ZNSt15__new_allocatorIPKcEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7b6a:	55                   	push   %rbp
    7b6b:	48 89 e5             	mov    %rsp,%rbp
    7b6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7b72:	90                   	nop
    7b73:	5d                   	pop    %rbp
    7b74:	c3                   	ret
    7b75:	90                   	nop

0000000000007b76 <_ZNSt15__new_allocatorIPKcED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7b76:	55                   	push   %rbp
    7b77:	48 89 e5             	mov    %rsp,%rbp
    7b7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7b7e:	90                   	nop
    7b7f:	5d                   	pop    %rbp
    7b80:	c3                   	ret

0000000000007b81 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    7b81:	55                   	push   %rbp
    7b82:	48 89 e5             	mov    %rsp,%rbp
    7b85:	53                   	push   %rbx
    7b86:	48 83 ec 28          	sub    $0x28,%rsp
    7b8a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7b8e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    7b92:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    7b96:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7b9a:	48 89 d6             	mov    %rdx,%rsi
    7b9d:	48 89 c7             	mov    %rax,%rdi
    7ba0:	e8 e9 00 00 00       	call   7c8e <_ZNSaIPKcEC1ERKS1_>
    7ba5:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7ba9:	48 89 c7             	mov    %rax,%rdi
    7bac:	e8 16 0f 00 00       	call   8ac7 <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
    7bb1:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    7bb5:	0f 92 c3             	setb   %bl
    7bb8:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7bbc:	48 89 c7             	mov    %rax,%rdi
    7bbf:	e8 52 f1 ff ff       	call   6d16 <_ZNSaIPKcED1Ev>
    7bc4:	84 db                	test   %bl,%bl
    7bc6:	74 0f                	je     7bd7 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
    7bc8:	48 8d 05 21 d5 00 00 	lea    0xd521(%rip),%rax        # 150f0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x158>
    7bcf:	48 89 c7             	mov    %rax,%rdi
    7bd2:	e8 89 b5 ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    7bd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    7bdb:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7bdf:	c9                   	leave
    7be0:	c3                   	ret
    7be1:	90                   	nop

0000000000007be2 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    7be2:	55                   	push   %rbp
    7be3:	48 89 e5             	mov    %rsp,%rbp
    7be6:	53                   	push   %rbx
    7be7:	48 83 ec 28          	sub    $0x28,%rsp
    7beb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7bef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    7bf3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    7bf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7bfb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7bff:	48 89 d6             	mov    %rdx,%rsi
    7c02:	48 89 c7             	mov    %rax,%rdi
    7c05:	e8 00 0f 00 00       	call   8b0a <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
    7c0a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7c0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7c12:	48 89 d6             	mov    %rdx,%rsi
    7c15:	48 89 c7             	mov    %rax,%rdi
    7c18:	e8 1f 0f 00 00       	call   8b3c <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>
    7c1d:	eb 1a                	jmp    7c39 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_+0x57>
    7c1f:	48 89 c3             	mov    %rax,%rbx
    7c22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7c26:	48 89 c7             	mov    %rax,%rdi
    7c29:	e8 2c ed ff ff       	call   695a <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
    7c2e:	48 89 d8             	mov    %rbx,%rax
    7c31:	48 89 c7             	mov    %rax,%rdi
    7c34:	e8 b7 b9 ff ff       	call   35f0 <_Unwind_Resume@plt>
    7c39:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7c3d:	c9                   	leave
    7c3e:	c3                   	ret
    7c3f:	90                   	nop

0000000000007c40 <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    7c40:	55                   	push   %rbp
    7c41:	48 89 e5             	mov    %rsp,%rbp
    7c44:	48 83 ec 10          	sub    $0x10,%rsp
    7c48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7c4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    7c50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7c54:	48 89 c7             	mov    %rax,%rdi
    7c57:	e8 24 00 00 00       	call   7c80 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
    7c5c:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    7c5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7c63:	48 8b 00             	mov    (%rax),%rax
    7c66:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7c6a:	48 89 ce             	mov    %rcx,%rsi
    7c6d:	48 89 c7             	mov    %rax,%rdi
    7c70:	e8 1d 0f 00 00       	call   8b92 <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    7c75:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    7c79:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    7c7d:	90                   	nop
    7c7e:	c9                   	leave
    7c7f:	c3                   	ret

0000000000007c80 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    7c80:	55                   	push   %rbp
    7c81:	48 89 e5             	mov    %rsp,%rbp
    7c84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    7c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7c8c:	5d                   	pop    %rbp
    7c8d:	c3                   	ret

0000000000007c8e <_ZNSaIPKcEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    7c8e:	55                   	push   %rbp
    7c8f:	48 89 e5             	mov    %rsp,%rbp
    7c92:	48 83 ec 10          	sub    $0x10,%rsp
    7c96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7c9a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    7c9e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7ca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7ca6:	48 89 d6             	mov    %rdx,%rsi
    7ca9:	48 89 c7             	mov    %rax,%rdi
    7cac:	e8 0b 0f 00 00       	call   8bbc <_ZNSt15__new_allocatorIPKcEC1ERKS2_>
    7cb1:	90                   	nop
    7cb2:	c9                   	leave
    7cb3:	c3                   	ret

0000000000007cb4 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
    7cb4:	55                   	push   %rbp
    7cb5:	48 89 e5             	mov    %rsp,%rbp
    7cb8:	48 83 ec 20          	sub    $0x20,%rsp
    7cbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7cc0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7cc4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    7cc8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    7ccd:	74 17                	je     7ce6 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    7ccf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7cd3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7cd7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7cdb:	48 89 ce             	mov    %rcx,%rsi
    7cde:	48 89 c7             	mov    %rax,%rdi
    7ce1:	e8 e5 0e 00 00       	call   8bcb <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>
      }
    7ce6:	90                   	nop
    7ce7:	c9                   	leave
    7ce8:	c3                   	ret
    7ce9:	90                   	nop

0000000000007cea <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7cea:	55                   	push   %rbp
    7ceb:	48 89 e5             	mov    %rsp,%rbp
    7cee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7cf2:	90                   	nop
    7cf3:	5d                   	pop    %rbp
    7cf4:	c3                   	ret
    7cf5:	90                   	nop

0000000000007cf6 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7cf6:	55                   	push   %rbp
    7cf7:	48 89 e5             	mov    %rsp,%rbp
    7cfa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7cfe:	90                   	nop
    7cff:	5d                   	pop    %rbp
    7d00:	c3                   	ret

0000000000007d01 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    7d01:	55                   	push   %rbp
    7d02:	48 89 e5             	mov    %rsp,%rbp
    7d05:	53                   	push   %rbx
    7d06:	48 83 ec 28          	sub    $0x28,%rsp
    7d0a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7d0e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    7d12:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    7d16:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7d1a:	48 89 d6             	mov    %rdx,%rsi
    7d1d:	48 89 c7             	mov    %rax,%rdi
    7d20:	e8 25 01 00 00       	call   7e4a <_ZNSaIP18VkPhysicalDevice_TEC1ERKS1_>
    7d25:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7d29:	48 89 c7             	mov    %rax,%rdi
    7d2c:	e8 c8 0e 00 00       	call   8bf9 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>
    7d31:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    7d35:	0f 92 c3             	setb   %bl
    7d38:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7d3c:	48 89 c7             	mov    %rax,%rdi
    7d3f:	e8 ee f0 ff ff       	call   6e32 <_ZNSaIP18VkPhysicalDevice_TED1Ev>
    7d44:	84 db                	test   %bl,%bl
    7d46:	74 0f                	je     7d57 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
    7d48:	48 8d 05 a1 d3 00 00 	lea    0xd3a1(%rip),%rax        # 150f0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x158>
    7d4f:	48 89 c7             	mov    %rax,%rdi
    7d52:	e8 09 b4 ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    7d57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    7d5b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7d5f:	c9                   	leave
    7d60:	c3                   	ret
    7d61:	90                   	nop

0000000000007d62 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    7d62:	55                   	push   %rbp
    7d63:	48 89 e5             	mov    %rsp,%rbp
    7d66:	53                   	push   %rbx
    7d67:	48 83 ec 28          	sub    $0x28,%rsp
    7d6b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7d6f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    7d73:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    7d77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7d7b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7d7f:	48 89 d6             	mov    %rdx,%rsi
    7d82:	48 89 c7             	mov    %rax,%rdi
    7d85:	e8 b2 0e 00 00       	call   8c3c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
    7d8a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7d8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7d92:	48 89 d6             	mov    %rdx,%rsi
    7d95:	48 89 c7             	mov    %rax,%rdi
    7d98:	e8 d1 0e 00 00       	call   8c6e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE17_M_create_storageEm>
    7d9d:	eb 1a                	jmp    7db9 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_+0x57>
    7d9f:	48 89 c3             	mov    %rax,%rbx
    7da2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7da6:	48 89 c7             	mov    %rax,%rdi
    7da9:	e8 c8 eb ff ff       	call   6976 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>
    7dae:	48 89 d8             	mov    %rbx,%rax
    7db1:	48 89 c7             	mov    %rax,%rdi
    7db4:	e8 37 b8 ff ff       	call   35f0 <_Unwind_Resume@plt>
    7db9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7dbd:	c9                   	leave
    7dbe:	c3                   	ret
    7dbf:	90                   	nop

0000000000007dc0 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    7dc0:	55                   	push   %rbp
    7dc1:	48 89 e5             	mov    %rsp,%rbp
    7dc4:	48 83 ec 10          	sub    $0x10,%rsp
    7dc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7dcc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    7dd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7dd4:	48 89 c7             	mov    %rax,%rdi
    7dd7:	e8 24 00 00 00       	call   7e00 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
    7ddc:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    7ddf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7de3:	48 8b 00             	mov    (%rax),%rax
    7de6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7dea:	48 89 ce             	mov    %rcx,%rsi
    7ded:	48 89 c7             	mov    %rax,%rdi
    7df0:	e8 cf 0e 00 00       	call   8cc4 <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    7df5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    7df9:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    7dfd:	90                   	nop
    7dfe:	c9                   	leave
    7dff:	c3                   	ret

0000000000007e00 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    7e00:	55                   	push   %rbp
    7e01:	48 89 e5             	mov    %rsp,%rbp
    7e04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    7e08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e0c:	5d                   	pop    %rbp
    7e0d:	c3                   	ret

0000000000007e0e <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    7e0e:	55                   	push   %rbp
    7e0f:	48 89 e5             	mov    %rsp,%rbp
    7e12:	48 83 ec 20          	sub    $0x20,%rsp
    7e16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7e1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7e1e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    7e22:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7e26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e2a:	48 89 d6             	mov    %rdx,%rsi
    7e2d:	48 89 c7             	mov    %rax,%rdi
    7e30:	e8 b8 0e 00 00       	call   8ced <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>
    }
    7e35:	90                   	nop
    7e36:	c9                   	leave
    7e37:	c3                   	ret

0000000000007e38 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    7e38:	55                   	push   %rbp
    7e39:	48 89 e5             	mov    %rsp,%rbp
    7e3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7e40:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    7e44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7e48:	5d                   	pop    %rbp
    7e49:	c3                   	ret

0000000000007e4a <_ZNSaIP18VkPhysicalDevice_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    7e4a:	55                   	push   %rbp
    7e4b:	48 89 e5             	mov    %rsp,%rbp
    7e4e:	48 83 ec 10          	sub    $0x10,%rsp
    7e52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7e56:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    7e5a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7e5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e62:	48 89 d6             	mov    %rdx,%rsi
    7e65:	48 89 c7             	mov    %rax,%rdi
    7e68:	e8 a7 0e 00 00       	call   8d14 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TEC1ERKS2_>
    7e6d:	90                   	nop
    7e6e:	c9                   	leave
    7e6f:	c3                   	ret

0000000000007e70 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
    7e70:	55                   	push   %rbp
    7e71:	48 89 e5             	mov    %rsp,%rbp
    7e74:	48 83 ec 20          	sub    $0x20,%rsp
    7e78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7e7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7e80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    7e84:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    7e89:	74 17                	je     7ea2 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    7e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e8f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7e93:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7e97:	48 89 ce             	mov    %rcx,%rsi
    7e9a:	48 89 c7             	mov    %rax,%rdi
    7e9d:	e8 81 0e 00 00       	call   8d23 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>
      }
    7ea2:	90                   	nop
    7ea3:	c9                   	leave
    7ea4:	c3                   	ret
    7ea5:	90                   	nop

0000000000007ea6 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7ea6:	55                   	push   %rbp
    7ea7:	48 89 e5             	mov    %rsp,%rbp
    7eaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7eae:	90                   	nop
    7eaf:	5d                   	pop    %rbp
    7eb0:	c3                   	ret
    7eb1:	90                   	nop

0000000000007eb2 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    7eb2:	55                   	push   %rbp
    7eb3:	48 89 e5             	mov    %rsp,%rbp
    7eb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7eba:	90                   	nop
    7ebb:	5d                   	pop    %rbp
    7ebc:	c3                   	ret

0000000000007ebd <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    7ebd:	55                   	push   %rbp
    7ebe:	48 89 e5             	mov    %rsp,%rbp
    7ec1:	53                   	push   %rbx
    7ec2:	48 83 ec 28          	sub    $0x28,%rsp
    7ec6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7eca:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    7ece:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    7ed2:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7ed6:	48 89 d6             	mov    %rdx,%rsi
    7ed9:	48 89 c7             	mov    %rax,%rdi
    7edc:	e8 25 01 00 00       	call   8006 <_ZNSaI23VkQueueFamilyPropertiesEC1ERKS0_>
    7ee1:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7ee5:	48 89 c7             	mov    %rax,%rdi
    7ee8:	e8 64 0e 00 00       	call   8d51 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE11_S_max_sizeERKS1_>
    7eed:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    7ef1:	0f 92 c3             	setb   %bl
    7ef4:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7ef8:	48 89 c7             	mov    %rax,%rdi
    7efb:	e8 96 f0 ff ff       	call   6f96 <_ZNSaI23VkQueueFamilyPropertiesED1Ev>
    7f00:	84 db                	test   %bl,%bl
    7f02:	74 0f                	je     7f13 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    7f04:	48 8d 05 e5 d1 00 00 	lea    0xd1e5(%rip),%rax        # 150f0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x158>
    7f0b:	48 89 c7             	mov    %rax,%rdi
    7f0e:	e8 4d b2 ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    7f13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    7f17:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7f1b:	c9                   	leave
    7f1c:	c3                   	ret
    7f1d:	90                   	nop

0000000000007f1e <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    7f1e:	55                   	push   %rbp
    7f1f:	48 89 e5             	mov    %rsp,%rbp
    7f22:	53                   	push   %rbx
    7f23:	48 83 ec 28          	sub    $0x28,%rsp
    7f27:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7f2b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    7f2f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    7f33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7f37:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7f3b:	48 89 d6             	mov    %rdx,%rsi
    7f3e:	48 89 c7             	mov    %rax,%rdi
    7f41:	e8 4e 0e 00 00       	call   8d94 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    7f46:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7f4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7f4e:	48 89 d6             	mov    %rdx,%rsi
    7f51:	48 89 c7             	mov    %rax,%rdi
    7f54:	e8 6d 0e 00 00       	call   8dc6 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE17_M_create_storageEm>
    7f59:	eb 1a                	jmp    7f75 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_+0x57>
    7f5b:	48 89 c3             	mov    %rax,%rbx
    7f5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7f62:	48 89 c7             	mov    %rax,%rdi
    7f65:	e8 28 ea ff ff       	call   6992 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implD1Ev>
    7f6a:	48 89 d8             	mov    %rbx,%rax
    7f6d:	48 89 c7             	mov    %rax,%rdi
    7f70:	e8 7b b6 ff ff       	call   35f0 <_Unwind_Resume@plt>
    7f75:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7f79:	c9                   	leave
    7f7a:	c3                   	ret
    7f7b:	90                   	nop

0000000000007f7c <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    7f7c:	55                   	push   %rbp
    7f7d:	48 89 e5             	mov    %rsp,%rbp
    7f80:	48 83 ec 10          	sub    $0x10,%rsp
    7f84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7f88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    7f8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7f90:	48 89 c7             	mov    %rax,%rdi
    7f93:	e8 24 00 00 00       	call   7fbc <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    7f98:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    7f9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7f9f:	48 8b 00             	mov    (%rax),%rax
    7fa2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7fa6:	48 89 ce             	mov    %rcx,%rsi
    7fa9:	48 89 c7             	mov    %rax,%rdi
    7fac:	e8 75 0e 00 00       	call   8e26 <_ZSt27__uninitialized_default_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    7fb1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    7fb5:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    7fb9:	90                   	nop
    7fba:	c9                   	leave
    7fbb:	c3                   	ret

0000000000007fbc <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    7fbc:	55                   	push   %rbp
    7fbd:	48 89 e5             	mov    %rsp,%rbp
    7fc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    7fc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7fc8:	5d                   	pop    %rbp
    7fc9:	c3                   	ret

0000000000007fca <_ZSt8_DestroyIP23VkQueueFamilyPropertiesS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    7fca:	55                   	push   %rbp
    7fcb:	48 89 e5             	mov    %rsp,%rbp
    7fce:	48 83 ec 20          	sub    $0x20,%rsp
    7fd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7fd6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7fda:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    7fde:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7fe6:	48 89 d6             	mov    %rdx,%rsi
    7fe9:	48 89 c7             	mov    %rax,%rdi
    7fec:	e8 5e 0e 00 00       	call   8e4f <_ZSt8_DestroyIP23VkQueueFamilyPropertiesEvT_S2_>
    }
    7ff1:	90                   	nop
    7ff2:	c9                   	leave
    7ff3:	c3                   	ret

0000000000007ff4 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    7ff4:	55                   	push   %rbp
    7ff5:	48 89 e5             	mov    %rsp,%rbp
    7ff8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7ffc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    8000:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8004:	5d                   	pop    %rbp
    8005:	c3                   	ret

0000000000008006 <_ZNSaI23VkQueueFamilyPropertiesEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    8006:	55                   	push   %rbp
    8007:	48 89 e5             	mov    %rsp,%rbp
    800a:	48 83 ec 10          	sub    $0x10,%rsp
    800e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8012:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    8016:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    801a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    801e:	48 89 d6             	mov    %rdx,%rsi
    8021:	48 89 c7             	mov    %rax,%rdi
    8024:	e8 4d 0e 00 00       	call   8e76 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesEC1ERKS1_>
    8029:	90                   	nop
    802a:	c9                   	leave
    802b:	c3                   	ret

000000000000802c <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    802c:	55                   	push   %rbp
    802d:	48 89 e5             	mov    %rsp,%rbp
    8030:	48 83 ec 20          	sub    $0x20,%rsp
    8034:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8038:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    803c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    8040:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    8045:	74 17                	je     805e <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    8047:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    804b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    804f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8053:	48 89 ce             	mov    %rcx,%rsi
    8056:	48 89 c7             	mov    %rax,%rdi
    8059:	e8 27 0e 00 00       	call   8e85 <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE10deallocateERS1_PS0_m>
      }
    805e:	90                   	nop
    805f:	c9                   	leave
    8060:	c3                   	ret
    8061:	90                   	nop

0000000000008062 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    8062:	55                   	push   %rbp
    8063:	48 89 e5             	mov    %rsp,%rbp
    8066:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    806a:	90                   	nop
    806b:	5d                   	pop    %rbp
    806c:	c3                   	ret
    806d:	90                   	nop

000000000000806e <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    806e:	55                   	push   %rbp
    806f:	48 89 e5             	mov    %rsp,%rbp
    8072:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8076:	90                   	nop
    8077:	5d                   	pop    %rbp
    8078:	c3                   	ret

0000000000008079 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_S_check_init_lenEmRKS3_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    8079:	55                   	push   %rbp
    807a:	48 89 e5             	mov    %rsp,%rbp
    807d:	53                   	push   %rbx
    807e:	48 83 ec 28          	sub    $0x28,%rsp
    8082:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    8086:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    808a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    808e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8092:	48 89 d6             	mov    %rdx,%rsi
    8095:	48 89 c7             	mov    %rax,%rdi
    8098:	e8 d7 01 00 00       	call   8274 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS2_>
    809d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    80a1:	48 89 c7             	mov    %rax,%rdi
    80a4:	e8 0a 0e 00 00       	call   8eb3 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_S_max_sizeERKS3_>
    80a9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    80ad:	0f 92 c3             	setb   %bl
    80b0:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    80b4:	48 89 c7             	mov    %rax,%rdi
    80b7:	e8 76 f0 ff ff       	call   7132 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
    80bc:	84 db                	test   %bl,%bl
    80be:	74 0f                	je     80cf <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_S_check_init_lenEmRKS3_+0x56>
	  __throw_length_error(
    80c0:	48 8d 05 29 d0 00 00 	lea    0xd029(%rip),%rax        # 150f0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x158>
    80c7:	48 89 c7             	mov    %rax,%rdi
    80ca:	e8 91 b0 ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    80cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    80d3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    80d7:	c9                   	leave
    80d8:	c3                   	ret
    80d9:	90                   	nop

00000000000080da <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    80da:	55                   	push   %rbp
    80db:	48 89 e5             	mov    %rsp,%rbp
    80de:	53                   	push   %rbx
    80df:	48 83 ec 28          	sub    $0x28,%rsp
    80e3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    80e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    80eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    80ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    80f3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    80f7:	48 89 d6             	mov    %rdx,%rsi
    80fa:	48 89 c7             	mov    %rax,%rdi
    80fd:	e8 f4 0d 00 00       	call   8ef6 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implC1ERKS3_>
      { _M_create_storage(__n); }
    8102:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    8106:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    810a:	48 89 d6             	mov    %rdx,%rsi
    810d:	48 89 c7             	mov    %rax,%rdi
    8110:	e8 13 0e 00 00       	call   8f28 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_M_create_storageEm>
    8115:	eb 1a                	jmp    8131 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_+0x57>
    8117:	48 89 c3             	mov    %rax,%rbx
    811a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    811e:	48 89 c7             	mov    %rax,%rdi
    8121:	e8 88 e8 ff ff       	call   69ae <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implD1Ev>
    8126:	48 89 d8             	mov    %rbx,%rax
    8129:	48 89 c7             	mov    %rax,%rdi
    812c:	e8 bf b4 ff ff       	call   35f0 <_Unwind_Resume@plt>
    8131:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8135:	c9                   	leave
    8136:	c3                   	ret
    8137:	90                   	nop

0000000000008138 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    8138:	55                   	push   %rbp
    8139:	48 89 e5             	mov    %rsp,%rbp
    813c:	48 83 ec 10          	sub    $0x10,%rsp
    8140:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8144:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    8148:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    814c:	48 89 c7             	mov    %rax,%rdi
    814f:	e8 24 00 00 00       	call   8178 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE19_M_get_Tp_allocatorEv>
    8154:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    8157:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    815b:	48 8b 00             	mov    (%rax),%rax
    815e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8162:	48 89 ce             	mov    %rcx,%rsi
    8165:	48 89 c7             	mov    %rax,%rdi
    8168:	e8 1c 0e 00 00       	call   8f89 <_ZSt27__uninitialized_default_n_aIPSt8optionalI23VkQueueFamilyPropertiesEmS2_ET_S4_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    816d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8171:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    8175:	90                   	nop
    8176:	c9                   	leave
    8177:	c3                   	ret

0000000000008178 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    8178:	55                   	push   %rbp
    8179:	48 89 e5             	mov    %rsp,%rbp
    817c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    8180:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8184:	5d                   	pop    %rbp
    8185:	c3                   	ret

0000000000008186 <_ZSt8_DestroyIPSt8optionalI23VkQueueFamilyPropertiesES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    8186:	55                   	push   %rbp
    8187:	48 89 e5             	mov    %rsp,%rbp
    818a:	48 83 ec 20          	sub    $0x20,%rsp
    818e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8192:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8196:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    819a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    819e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    81a2:	48 89 d6             	mov    %rdx,%rsi
    81a5:	48 89 c7             	mov    %rax,%rdi
    81a8:	e8 05 0e 00 00       	call   8fb2 <_ZSt8_DestroyIPSt8optionalI23VkQueueFamilyPropertiesEEvT_S4_>
    }
    81ad:	90                   	nop
    81ae:	c9                   	leave
    81af:	c3                   	ret

00000000000081b0 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    81b0:	55                   	push   %rbp
    81b1:	48 89 e5             	mov    %rsp,%rbp
    81b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    81b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    81bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    81c0:	48 8b 10             	mov    (%rax),%rdx
    81c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    81c7:	48 89 10             	mov    %rdx,(%rax)
    81ca:	90                   	nop
    81cb:	5d                   	pop    %rbp
    81cc:	c3                   	ret
    81cd:	90                   	nop

00000000000081ce <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    81ce:	55                   	push   %rbp
    81cf:	48 89 e5             	mov    %rsp,%rbp
    81d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    81d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    81da:	5d                   	pop    %rbp
    81db:	c3                   	ret

00000000000081dc <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
    81dc:	55                   	push   %rbp
    81dd:	48 89 e5             	mov    %rsp,%rbp
    81e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
    81e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    81e8:	0f b6 40 18          	movzbl 0x18(%rax),%eax
    81ec:	5d                   	pop    %rbp
    81ed:	c3                   	ret

00000000000081ee <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
    81ee:	55                   	push   %rbp
    81ef:	48 89 e5             	mov    %rsp,%rbp
    81f2:	48 83 ec 10          	sub    $0x10,%rsp
    81f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(this->_M_is_engaged());
    81fa:	e8 7f b7 ff ff       	call   397e <_ZSt23__is_constant_evaluatedv>
    81ff:	84 c0                	test   %al,%al
    8201:	74 1a                	je     821d <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x2f>
    8203:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8207:	48 89 c7             	mov    %rax,%rdi
    820a:	e8 cd ff ff ff       	call   81dc <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
    820f:	83 f0 01             	xor    $0x1,%eax
    8212:	84 c0                	test   %al,%al
    8214:	74 07                	je     821d <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x2f>
    8216:	b8 01 00 00 00       	mov    $0x1,%eax
    821b:	eb 05                	jmp    8222 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x34>
    821d:	b8 00 00 00 00       	mov    $0x0,%eax
    8222:	84 c0                	test   %al,%al
	return static_cast<_Dp*>(this)->_M_payload._M_get();
    8224:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8228:	48 89 c7             	mov    %rax,%rdi
    822b:	e8 a8 0d 00 00       	call   8fd8 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE6_M_getEv>
      }
    8230:	c9                   	leave
    8231:	c3                   	ret

0000000000008232 <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    8232:	55                   	push   %rbp
    8233:	48 89 e5             	mov    %rsp,%rbp
    8236:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    823a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    823e:	5d                   	pop    %rbp
    823f:	c3                   	ret

0000000000008240 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE12_M_constructIJRKS0_EEEvDpOT_>:
	_M_construct(_Args&&... __args)
    8240:	55                   	push   %rbp
    8241:	48 89 e5             	mov    %rsp,%rbp
    8244:	53                   	push   %rbx
    8245:	48 83 ec 18          	sub    $0x18,%rsp
    8249:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    824d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  static_cast<_Dp*>(this)->_M_payload._M_construct(
    8251:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    8255:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8259:	48 89 c7             	mov    %rax,%rdi
    825c:	e8 d1 ff ff ff       	call   8232 <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    8261:	48 89 c6             	mov    %rax,%rsi
    8264:	48 89 df             	mov    %rbx,%rdi
    8267:	e8 7a 0d 00 00       	call   8fe6 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE12_M_constructIJRKS0_EEEvDpOT_>
	}
    826c:	90                   	nop
    826d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8271:	c9                   	leave
    8272:	c3                   	ret
    8273:	90                   	nop

0000000000008274 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    8274:	55                   	push   %rbp
    8275:	48 89 e5             	mov    %rsp,%rbp
    8278:	48 83 ec 10          	sub    $0x10,%rsp
    827c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8280:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    8284:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8288:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    828c:	48 89 d6             	mov    %rdx,%rsi
    828f:	48 89 c7             	mov    %rax,%rdi
    8292:	e8 95 0d 00 00       	call   902c <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS3_>
    8297:	90                   	nop
    8298:	c9                   	leave
    8299:	c3                   	ret

000000000000829a <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE13_M_deallocateEPS2_m>:
      _M_deallocate(pointer __p, size_t __n)
    829a:	55                   	push   %rbp
    829b:	48 89 e5             	mov    %rsp,%rbp
    829e:	48 83 ec 20          	sub    $0x20,%rsp
    82a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    82a6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    82aa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    82ae:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    82b3:	74 17                	je     82cc <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE13_M_deallocateEPS2_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    82b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    82b9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    82bd:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    82c1:	48 89 ce             	mov    %rcx,%rsi
    82c4:	48 89 c7             	mov    %rax,%rdi
    82c7:	e8 6f 0d 00 00       	call   903b <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE10deallocateERS3_PS2_m>
      }
    82cc:	90                   	nop
    82cd:	c9                   	leave
    82ce:	c3                   	ret
    82cf:	90                   	nop

00000000000082d0 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHREC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    82d0:	55                   	push   %rbp
    82d1:	48 89 e5             	mov    %rsp,%rbp
    82d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    82d8:	90                   	nop
    82d9:	5d                   	pop    %rbp
    82da:	c3                   	ret
    82db:	90                   	nop

00000000000082dc <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    82dc:	55                   	push   %rbp
    82dd:	48 89 e5             	mov    %rsp,%rbp
    82e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    82e4:	90                   	nop
    82e5:	5d                   	pop    %rbp
    82e6:	c3                   	ret

00000000000082e7 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    82e7:	55                   	push   %rbp
    82e8:	48 89 e5             	mov    %rsp,%rbp
    82eb:	53                   	push   %rbx
    82ec:	48 83 ec 28          	sub    $0x28,%rsp
    82f0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    82f4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    82f8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    82fc:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8300:	48 89 d6             	mov    %rdx,%rsi
    8303:	48 89 c7             	mov    %rax,%rdi
    8306:	e8 25 01 00 00       	call   8430 <_ZNSaI18VkSurfaceFormatKHREC1ERKS0_>
    830b:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    830f:	48 89 c7             	mov    %rax,%rdi
    8312:	e8 52 0d 00 00       	call   9069 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE11_S_max_sizeERKS1_>
    8317:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    831b:	0f 92 c3             	setb   %bl
    831e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8322:	48 89 c7             	mov    %rax,%rdi
    8325:	e8 b8 f0 ff ff       	call   73e2 <_ZNSaI18VkSurfaceFormatKHRED1Ev>
    832a:	84 db                	test   %bl,%bl
    832c:	74 0f                	je     833d <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    832e:	48 8d 05 bb cd 00 00 	lea    0xcdbb(%rip),%rax        # 150f0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x158>
    8335:	48 89 c7             	mov    %rax,%rdi
    8338:	e8 23 ae ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    833d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    8341:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8345:	c9                   	leave
    8346:	c3                   	ret
    8347:	90                   	nop

0000000000008348 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    8348:	55                   	push   %rbp
    8349:	48 89 e5             	mov    %rsp,%rbp
    834c:	53                   	push   %rbx
    834d:	48 83 ec 28          	sub    $0x28,%rsp
    8351:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8355:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    8359:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    835d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8361:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    8365:	48 89 d6             	mov    %rdx,%rsi
    8368:	48 89 c7             	mov    %rax,%rdi
    836b:	e8 3c 0d 00 00       	call   90ac <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    8370:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    8374:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8378:	48 89 d6             	mov    %rdx,%rsi
    837b:	48 89 c7             	mov    %rax,%rdi
    837e:	e8 5b 0d 00 00       	call   90de <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE17_M_create_storageEm>
    8383:	eb 1a                	jmp    839f <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_+0x57>
    8385:	48 89 c3             	mov    %rax,%rbx
    8388:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    838c:	48 89 c7             	mov    %rax,%rdi
    838f:	e8 36 e6 ff ff       	call   69ca <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implD1Ev>
    8394:	48 89 d8             	mov    %rbx,%rax
    8397:	48 89 c7             	mov    %rax,%rdi
    839a:	e8 51 b2 ff ff       	call   35f0 <_Unwind_Resume@plt>
    839f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    83a3:	c9                   	leave
    83a4:	c3                   	ret
    83a5:	90                   	nop

00000000000083a6 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    83a6:	55                   	push   %rbp
    83a7:	48 89 e5             	mov    %rsp,%rbp
    83aa:	48 83 ec 10          	sub    $0x10,%rsp
    83ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    83b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    83b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    83ba:	48 89 c7             	mov    %rax,%rdi
    83bd:	e8 24 00 00 00       	call   83e6 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE19_M_get_Tp_allocatorEv>
    83c2:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    83c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    83c9:	48 8b 00             	mov    (%rax),%rax
    83cc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    83d0:	48 89 ce             	mov    %rcx,%rsi
    83d3:	48 89 c7             	mov    %rax,%rdi
    83d6:	e8 59 0d 00 00       	call   9134 <_ZSt27__uninitialized_default_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    83db:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    83df:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    83e3:	90                   	nop
    83e4:	c9                   	leave
    83e5:	c3                   	ret

00000000000083e6 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    83e6:	55                   	push   %rbp
    83e7:	48 89 e5             	mov    %rsp,%rbp
    83ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    83ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    83f2:	5d                   	pop    %rbp
    83f3:	c3                   	ret

00000000000083f4 <_ZSt8_DestroyIP18VkSurfaceFormatKHRS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    83f4:	55                   	push   %rbp
    83f5:	48 89 e5             	mov    %rsp,%rbp
    83f8:	48 83 ec 20          	sub    $0x20,%rsp
    83fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8400:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8404:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    8408:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    840c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8410:	48 89 d6             	mov    %rdx,%rsi
    8413:	48 89 c7             	mov    %rax,%rdi
    8416:	e8 42 0d 00 00       	call   915d <_ZSt8_DestroyIP18VkSurfaceFormatKHREvT_S2_>
    }
    841b:	90                   	nop
    841c:	c9                   	leave
    841d:	c3                   	ret

000000000000841e <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    841e:	55                   	push   %rbp
    841f:	48 89 e5             	mov    %rsp,%rbp
    8422:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8426:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    842a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    842e:	5d                   	pop    %rbp
    842f:	c3                   	ret

0000000000008430 <_ZNSaI18VkSurfaceFormatKHREC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    8430:	55                   	push   %rbp
    8431:	48 89 e5             	mov    %rsp,%rbp
    8434:	48 83 ec 10          	sub    $0x10,%rsp
    8438:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    843c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    8440:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8444:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8448:	48 89 d6             	mov    %rdx,%rsi
    844b:	48 89 c7             	mov    %rax,%rdi
    844e:	e8 31 0d 00 00       	call   9184 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHREC1ERKS1_>
    8453:	90                   	nop
    8454:	c9                   	leave
    8455:	c3                   	ret

0000000000008456 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    8456:	55                   	push   %rbp
    8457:	48 89 e5             	mov    %rsp,%rbp
    845a:	48 83 ec 20          	sub    $0x20,%rsp
    845e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8462:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8466:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    846a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    846f:	74 17                	je     8488 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    8471:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8475:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8479:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    847d:	48 89 ce             	mov    %rcx,%rsi
    8480:	48 89 c7             	mov    %rax,%rdi
    8483:	e8 0b 0d 00 00       	call   9193 <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE10deallocateERS1_PS0_m>
      }
    8488:	90                   	nop
    8489:	c9                   	leave
    848a:	c3                   	ret
    848b:	90                   	nop

000000000000848c <_ZNSt15__new_allocatorI16VkPresentModeKHREC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    848c:	55                   	push   %rbp
    848d:	48 89 e5             	mov    %rsp,%rbp
    8490:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8494:	90                   	nop
    8495:	5d                   	pop    %rbp
    8496:	c3                   	ret
    8497:	90                   	nop

0000000000008498 <_ZNSt15__new_allocatorI16VkPresentModeKHRED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    8498:	55                   	push   %rbp
    8499:	48 89 e5             	mov    %rsp,%rbp
    849c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    84a0:	90                   	nop
    84a1:	5d                   	pop    %rbp
    84a2:	c3                   	ret

00000000000084a3 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    84a3:	55                   	push   %rbp
    84a4:	48 89 e5             	mov    %rsp,%rbp
    84a7:	53                   	push   %rbx
    84a8:	48 83 ec 28          	sub    $0x28,%rsp
    84ac:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    84b0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    84b4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    84b8:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    84bc:	48 89 d6             	mov    %rdx,%rsi
    84bf:	48 89 c7             	mov    %rax,%rdi
    84c2:	e8 25 01 00 00       	call   85ec <_ZNSaI16VkPresentModeKHREC1ERKS0_>
    84c7:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    84cb:	48 89 c7             	mov    %rax,%rdi
    84ce:	e8 ee 0c 00 00       	call   91c1 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE11_S_max_sizeERKS1_>
    84d3:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    84d7:	0f 92 c3             	setb   %bl
    84da:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    84de:	48 89 c7             	mov    %rax,%rdi
    84e1:	e8 60 f0 ff ff       	call   7546 <_ZNSaI16VkPresentModeKHRED1Ev>
    84e6:	84 db                	test   %bl,%bl
    84e8:	74 0f                	je     84f9 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    84ea:	48 8d 05 ff cb 00 00 	lea    0xcbff(%rip),%rax        # 150f0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x158>
    84f1:	48 89 c7             	mov    %rax,%rdi
    84f4:	e8 67 ac ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    84f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    84fd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8501:	c9                   	leave
    8502:	c3                   	ret
    8503:	90                   	nop

0000000000008504 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    8504:	55                   	push   %rbp
    8505:	48 89 e5             	mov    %rsp,%rbp
    8508:	53                   	push   %rbx
    8509:	48 83 ec 28          	sub    $0x28,%rsp
    850d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8511:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    8515:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    8519:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    851d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    8521:	48 89 d6             	mov    %rdx,%rsi
    8524:	48 89 c7             	mov    %rax,%rdi
    8527:	e8 d8 0c 00 00       	call   9204 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    852c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    8530:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8534:	48 89 d6             	mov    %rdx,%rsi
    8537:	48 89 c7             	mov    %rax,%rdi
    853a:	e8 f7 0c 00 00       	call   9236 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE17_M_create_storageEm>
    853f:	eb 1a                	jmp    855b <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EEC1EmRKS1_+0x57>
    8541:	48 89 c3             	mov    %rax,%rbx
    8544:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8548:	48 89 c7             	mov    %rax,%rdi
    854b:	e8 96 e4 ff ff       	call   69e6 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implD1Ev>
    8550:	48 89 d8             	mov    %rbx,%rax
    8553:	48 89 c7             	mov    %rax,%rdi
    8556:	e8 95 b0 ff ff       	call   35f0 <_Unwind_Resume@plt>
    855b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    855f:	c9                   	leave
    8560:	c3                   	ret
    8561:	90                   	nop

0000000000008562 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    8562:	55                   	push   %rbp
    8563:	48 89 e5             	mov    %rsp,%rbp
    8566:	48 83 ec 10          	sub    $0x10,%rsp
    856a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    856e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    8572:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8576:	48 89 c7             	mov    %rax,%rdi
    8579:	e8 24 00 00 00       	call   85a2 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE19_M_get_Tp_allocatorEv>
    857e:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    8581:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8585:	48 8b 00             	mov    (%rax),%rax
    8588:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    858c:	48 89 ce             	mov    %rcx,%rsi
    858f:	48 89 c7             	mov    %rax,%rdi
    8592:	e8 f5 0c 00 00       	call   928c <_ZSt27__uninitialized_default_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    8597:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    859b:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    859f:	90                   	nop
    85a0:	c9                   	leave
    85a1:	c3                   	ret

00000000000085a2 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    85a2:	55                   	push   %rbp
    85a3:	48 89 e5             	mov    %rsp,%rbp
    85a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    85aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    85ae:	5d                   	pop    %rbp
    85af:	c3                   	ret

00000000000085b0 <_ZSt8_DestroyIP16VkPresentModeKHRS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    85b0:	55                   	push   %rbp
    85b1:	48 89 e5             	mov    %rsp,%rbp
    85b4:	48 83 ec 20          	sub    $0x20,%rsp
    85b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    85bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    85c0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    85c4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    85c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    85cc:	48 89 d6             	mov    %rdx,%rsi
    85cf:	48 89 c7             	mov    %rax,%rdi
    85d2:	e8 de 0c 00 00       	call   92b5 <_ZSt8_DestroyIP16VkPresentModeKHREvT_S2_>
    }
    85d7:	90                   	nop
    85d8:	c9                   	leave
    85d9:	c3                   	ret

00000000000085da <_ZNKSt6vectorI16VkPresentModeKHRSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    85da:	55                   	push   %rbp
    85db:	48 89 e5             	mov    %rsp,%rbp
    85de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    85e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    85e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    85ea:	5d                   	pop    %rbp
    85eb:	c3                   	ret

00000000000085ec <_ZNSaI16VkPresentModeKHREC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    85ec:	55                   	push   %rbp
    85ed:	48 89 e5             	mov    %rsp,%rbp
    85f0:	48 83 ec 10          	sub    $0x10,%rsp
    85f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    85f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    85fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8604:	48 89 d6             	mov    %rdx,%rsi
    8607:	48 89 c7             	mov    %rax,%rdi
    860a:	e8 cd 0c 00 00       	call   92dc <_ZNSt15__new_allocatorI16VkPresentModeKHREC1ERKS1_>
    860f:	90                   	nop
    8610:	c9                   	leave
    8611:	c3                   	ret

0000000000008612 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    8612:	55                   	push   %rbp
    8613:	48 89 e5             	mov    %rsp,%rbp
    8616:	48 83 ec 20          	sub    $0x20,%rsp
    861a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    861e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8622:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    8626:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    862b:	74 17                	je     8644 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    862d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8631:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8635:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8639:	48 89 ce             	mov    %rcx,%rsi
    863c:	48 89 c7             	mov    %rax,%rdi
    863f:	e8 a7 0c 00 00       	call   92eb <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE10deallocateERS1_PS0_m>
      }
    8644:	90                   	nop
    8645:	c9                   	leave
    8646:	c3                   	ret
    8647:	90                   	nop

0000000000008648 <_ZNSt15__new_allocatorIP9VkImage_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    8648:	55                   	push   %rbp
    8649:	48 89 e5             	mov    %rsp,%rbp
    864c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8650:	90                   	nop
    8651:	5d                   	pop    %rbp
    8652:	c3                   	ret
    8653:	90                   	nop

0000000000008654 <_ZNSt15__new_allocatorIP9VkImage_TED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    8654:	55                   	push   %rbp
    8655:	48 89 e5             	mov    %rsp,%rbp
    8658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    865c:	90                   	nop
    865d:	5d                   	pop    %rbp
    865e:	c3                   	ret

000000000000865f <_ZNSt6vectorIP9VkImage_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    865f:	55                   	push   %rbp
    8660:	48 89 e5             	mov    %rsp,%rbp
    8663:	53                   	push   %rbx
    8664:	48 83 ec 28          	sub    $0x28,%rsp
    8668:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    866c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    8670:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    8674:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8678:	48 89 d6             	mov    %rdx,%rsi
    867b:	48 89 c7             	mov    %rax,%rdi
    867e:	e8 25 01 00 00       	call   87a8 <_ZNSaIP9VkImage_TEC1ERKS1_>
    8683:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8687:	48 89 c7             	mov    %rax,%rdi
    868a:	e8 8a 0c 00 00       	call   9319 <_ZNSt6vectorIP9VkImage_TSaIS1_EE11_S_max_sizeERKS2_>
    868f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    8693:	0f 92 c3             	setb   %bl
    8696:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    869a:	48 89 c7             	mov    %rax,%rdi
    869d:	e8 08 f0 ff ff       	call   76aa <_ZNSaIP9VkImage_TED1Ev>
    86a2:	84 db                	test   %bl,%bl
    86a4:	74 0f                	je     86b5 <_ZNSt6vectorIP9VkImage_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
    86a6:	48 8d 05 43 ca 00 00 	lea    0xca43(%rip),%rax        # 150f0 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x158>
    86ad:	48 89 c7             	mov    %rax,%rdi
    86b0:	e8 ab aa ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    86b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    86b9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    86bd:	c9                   	leave
    86be:	c3                   	ret
    86bf:	90                   	nop

00000000000086c0 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    86c0:	55                   	push   %rbp
    86c1:	48 89 e5             	mov    %rsp,%rbp
    86c4:	53                   	push   %rbx
    86c5:	48 83 ec 28          	sub    $0x28,%rsp
    86c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    86cd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    86d1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    86d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    86d9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    86dd:	48 89 d6             	mov    %rdx,%rsi
    86e0:	48 89 c7             	mov    %rax,%rdi
    86e3:	e8 74 0c 00 00       	call   935c <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
    86e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    86ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    86f0:	48 89 d6             	mov    %rdx,%rsi
    86f3:	48 89 c7             	mov    %rax,%rdi
    86f6:	e8 93 0c 00 00       	call   938e <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_M_create_storageEm>
    86fb:	eb 1a                	jmp    8717 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1EmRKS2_+0x57>
    86fd:	48 89 c3             	mov    %rax,%rbx
    8700:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8704:	48 89 c7             	mov    %rax,%rdi
    8707:	e8 f6 e2 ff ff       	call   6a02 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implD1Ev>
    870c:	48 89 d8             	mov    %rbx,%rax
    870f:	48 89 c7             	mov    %rax,%rdi
    8712:	e8 d9 ae ff ff       	call   35f0 <_Unwind_Resume@plt>
    8717:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    871b:	c9                   	leave
    871c:	c3                   	ret
    871d:	90                   	nop

000000000000871e <_ZNSt6vectorIP9VkImage_TSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    871e:	55                   	push   %rbp
    871f:	48 89 e5             	mov    %rsp,%rbp
    8722:	48 83 ec 10          	sub    $0x10,%rsp
    8726:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    872a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    872e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8732:	48 89 c7             	mov    %rax,%rdi
    8735:	e8 24 00 00 00       	call   875e <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
    873a:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    873d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8741:	48 8b 00             	mov    (%rax),%rax
    8744:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8748:	48 89 ce             	mov    %rcx,%rsi
    874b:	48 89 c7             	mov    %rax,%rdi
    874e:	e8 91 0c 00 00       	call   93e4 <_ZSt27__uninitialized_default_n_aIPP9VkImage_TmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    8753:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8757:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    875b:	90                   	nop
    875c:	c9                   	leave
    875d:	c3                   	ret

000000000000875e <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    875e:	55                   	push   %rbp
    875f:	48 89 e5             	mov    %rsp,%rbp
    8762:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    8766:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    876a:	5d                   	pop    %rbp
    876b:	c3                   	ret

000000000000876c <_ZSt8_DestroyIPP9VkImage_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    876c:	55                   	push   %rbp
    876d:	48 89 e5             	mov    %rsp,%rbp
    8770:	48 83 ec 20          	sub    $0x20,%rsp
    8774:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8778:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    877c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    8780:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8788:	48 89 d6             	mov    %rdx,%rsi
    878b:	48 89 c7             	mov    %rax,%rdi
    878e:	e8 7a 0c 00 00       	call   940d <_ZSt8_DestroyIPP9VkImage_TEvT_S3_>
    }
    8793:	90                   	nop
    8794:	c9                   	leave
    8795:	c3                   	ret

0000000000008796 <_ZNKSt6vectorIP9VkImage_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    8796:	55                   	push   %rbp
    8797:	48 89 e5             	mov    %rsp,%rbp
    879a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    879e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    87a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    87a6:	5d                   	pop    %rbp
    87a7:	c3                   	ret

00000000000087a8 <_ZNSaIP9VkImage_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    87a8:	55                   	push   %rbp
    87a9:	48 89 e5             	mov    %rsp,%rbp
    87ac:	48 83 ec 10          	sub    $0x10,%rsp
    87b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    87b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    87b8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    87bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    87c0:	48 89 d6             	mov    %rdx,%rsi
    87c3:	48 89 c7             	mov    %rax,%rdi
    87c6:	e8 69 0c 00 00       	call   9434 <_ZNSt15__new_allocatorIP9VkImage_TEC1ERKS2_>
    87cb:	90                   	nop
    87cc:	c9                   	leave
    87cd:	c3                   	ret

00000000000087ce <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
    87ce:	55                   	push   %rbp
    87cf:	48 89 e5             	mov    %rsp,%rbp
    87d2:	48 83 ec 20          	sub    $0x20,%rsp
    87d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    87da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    87de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    87e2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    87e7:	74 17                	je     8800 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    87e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    87ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    87f1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    87f5:	48 89 ce             	mov    %rcx,%rsi
    87f8:	48 89 c7             	mov    %rax,%rdi
    87fb:	e8 43 0c 00 00       	call   9443 <_ZNSt16allocator_traitsISaIP9VkImage_TEE10deallocateERS2_PS1_m>
      }
    8800:	90                   	nop
    8801:	c9                   	leave
    8802:	c3                   	ret

0000000000008803 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    8803:	55                   	push   %rbp
    8804:	48 89 e5             	mov    %rsp,%rbp
    8807:	48 83 ec 20          	sub    $0x20,%rsp
    880b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    880f:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
    8816:	03 3f 00 
    8819:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    881d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8821:	48 89 c7             	mov    %rax,%rdi
    8824:	e8 48 0c 00 00       	call   9471 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE8max_sizeERKS1_>
    8829:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    882d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    8831:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    8835:	48 89 d6             	mov    %rdx,%rsi
    8838:	48 89 c7             	mov    %rax,%rdi
    883b:	e8 ed b9 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    8840:	48 8b 00             	mov    (%rax),%rax
      }
    8843:	c9                   	leave
    8844:	c3                   	ret
    8845:	90                   	nop

0000000000008846 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    8846:	55                   	push   %rbp
    8847:	48 89 e5             	mov    %rsp,%rbp
    884a:	48 83 ec 10          	sub    $0x10,%rsp
    884e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8852:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    8856:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    885a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    885e:	48 89 d6             	mov    %rdx,%rsi
    8861:	48 89 c7             	mov    %rax,%rdi
    8864:	e8 e9 f0 ff ff       	call   7952 <_ZNSaI17VkLayerPropertiesEC1ERKS0_>
    8869:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    886d:	48 89 c7             	mov    %rax,%rdi
    8870:	e8 17 0c 00 00       	call   948c <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    8875:	90                   	nop
    8876:	c9                   	leave
    8877:	c3                   	ret

0000000000008878 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    8878:	55                   	push   %rbp
    8879:	48 89 e5             	mov    %rsp,%rbp
    887c:	48 83 ec 10          	sub    $0x10,%rsp
    8880:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8884:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    8888:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    888c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8890:	48 89 d6             	mov    %rdx,%rsi
    8893:	48 89 c7             	mov    %rax,%rdi
    8896:	e8 1f 0c 00 00       	call   94ba <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE11_M_allocateEm>
    889b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    889f:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    88a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    88a6:	48 8b 10             	mov    (%rax),%rdx
    88a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    88ad:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    88b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    88b5:	48 8b 08             	mov    (%rax),%rcx
    88b8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    88bc:	48 89 d0             	mov    %rdx,%rax
    88bf:	48 c1 e0 06          	shl    $0x6,%rax
    88c3:	48 01 d0             	add    %rdx,%rax
    88c6:	48 c1 e0 03          	shl    $0x3,%rax
    88ca:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    88ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    88d2:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    88d6:	90                   	nop
    88d7:	c9                   	leave
    88d8:	c3                   	ret

00000000000088d9 <_ZSt27__uninitialized_default_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    88d9:	55                   	push   %rbp
    88da:	48 89 e5             	mov    %rsp,%rbp
    88dd:	48 83 ec 20          	sub    $0x20,%rsp
    88e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    88e5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    88e9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    88ed:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    88f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    88f5:	48 89 d6             	mov    %rdx,%rsi
    88f8:	48 89 c7             	mov    %rax,%rdi
    88fb:	e8 ed 0b 00 00       	call   94ed <_ZSt25__uninitialized_default_nIP17VkLayerPropertiesmET_S2_T0_>
    8900:	c9                   	leave
    8901:	c3                   	ret

0000000000008902 <_ZSt8_DestroyIP17VkLayerPropertiesEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    8902:	55                   	push   %rbp
    8903:	48 89 e5             	mov    %rsp,%rbp
    8906:	48 83 ec 10          	sub    $0x10,%rsp
    890a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    890e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    8912:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8916:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    891a:	48 89 d6             	mov    %rdx,%rsi
    891d:	48 89 c7             	mov    %rax,%rdi
    8920:	e8 f1 0b 00 00       	call   9516 <_ZNSt12_Destroy_auxILb1EE9__destroyIP17VkLayerPropertiesEEvT_S4_>
    }
    8925:	90                   	nop
    8926:	c9                   	leave
    8927:	c3                   	ret

0000000000008928 <_ZNSt15__new_allocatorI17VkLayerPropertiesEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    8928:	55                   	push   %rbp
    8929:	48 89 e5             	mov    %rsp,%rbp
    892c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8930:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8934:	90                   	nop
    8935:	5d                   	pop    %rbp
    8936:	c3                   	ret

0000000000008937 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    8937:	55                   	push   %rbp
    8938:	48 89 e5             	mov    %rsp,%rbp
    893b:	48 83 ec 20          	sub    $0x20,%rsp
    893f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8943:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8947:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    894b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    894f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8953:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8957:	48 89 ce             	mov    %rcx,%rsi
    895a:	48 89 c7             	mov    %rax,%rdi
    895d:	e8 c4 0b 00 00       	call   9526 <_ZNSt15__new_allocatorI17VkLayerPropertiesE10deallocateEPS0_m>
    8962:	90                   	nop
    8963:	c9                   	leave
    8964:	c3                   	ret

0000000000008965 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    8965:	55                   	push   %rbp
    8966:	48 89 e5             	mov    %rsp,%rbp
    8969:	48 83 ec 20          	sub    $0x20,%rsp
    896d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    8971:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
    8978:	07 7e 00 
    897b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    897f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8983:	48 89 c7             	mov    %rax,%rdi
    8986:	e8 d5 0b 00 00       	call   9560 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE8max_sizeERKS1_>
    898b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    898f:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    8993:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    8997:	48 89 d6             	mov    %rdx,%rsi
    899a:	48 89 c7             	mov    %rax,%rdi
    899d:	e8 8b b8 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    89a2:	48 8b 00             	mov    (%rax),%rax
      }
    89a5:	c9                   	leave
    89a6:	c3                   	ret
    89a7:	90                   	nop

00000000000089a8 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    89a8:	55                   	push   %rbp
    89a9:	48 89 e5             	mov    %rsp,%rbp
    89ac:	48 83 ec 10          	sub    $0x10,%rsp
    89b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    89b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    89b8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    89bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    89c0:	48 89 d6             	mov    %rdx,%rsi
    89c3:	48 89 c7             	mov    %rax,%rdi
    89c6:	e8 43 f1 ff ff       	call   7b0e <_ZNSaI21VkExtensionPropertiesEC1ERKS0_>
    89cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    89cf:	48 89 c7             	mov    %rax,%rdi
    89d2:	e8 a3 0b 00 00       	call   957a <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    89d7:	90                   	nop
    89d8:	c9                   	leave
    89d9:	c3                   	ret

00000000000089da <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    89da:	55                   	push   %rbp
    89db:	48 89 e5             	mov    %rsp,%rbp
    89de:	48 83 ec 10          	sub    $0x10,%rsp
    89e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    89e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    89ea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    89ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    89f2:	48 89 d6             	mov    %rdx,%rsi
    89f5:	48 89 c7             	mov    %rax,%rdi
    89f8:	e8 ab 0b 00 00       	call   95a8 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE11_M_allocateEm>
    89fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8a01:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    8a04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8a08:	48 8b 10             	mov    (%rax),%rdx
    8a0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8a0f:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8a13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8a17:	48 8b 08             	mov    (%rax),%rcx
    8a1a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8a1e:	48 89 d0             	mov    %rdx,%rax
    8a21:	48 c1 e0 06          	shl    $0x6,%rax
    8a25:	48 01 d0             	add    %rdx,%rax
    8a28:	48 c1 e0 02          	shl    $0x2,%rax
    8a2c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    8a30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8a34:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    8a38:	90                   	nop
    8a39:	c9                   	leave
    8a3a:	c3                   	ret

0000000000008a3b <_ZSt27__uninitialized_default_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    8a3b:	55                   	push   %rbp
    8a3c:	48 89 e5             	mov    %rsp,%rbp
    8a3f:	48 83 ec 20          	sub    $0x20,%rsp
    8a43:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8a47:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8a4b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    8a4f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8a53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8a57:	48 89 d6             	mov    %rdx,%rsi
    8a5a:	48 89 c7             	mov    %rax,%rdi
    8a5d:	e8 79 0b 00 00       	call   95db <_ZSt25__uninitialized_default_nIP21VkExtensionPropertiesmET_S2_T0_>
    8a62:	c9                   	leave
    8a63:	c3                   	ret

0000000000008a64 <_ZSt8_DestroyIP21VkExtensionPropertiesEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    8a64:	55                   	push   %rbp
    8a65:	48 89 e5             	mov    %rsp,%rbp
    8a68:	48 83 ec 10          	sub    $0x10,%rsp
    8a6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8a70:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    8a74:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8a78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8a7c:	48 89 d6             	mov    %rdx,%rsi
    8a7f:	48 89 c7             	mov    %rax,%rdi
    8a82:	e8 7d 0b 00 00       	call   9604 <_ZNSt12_Destroy_auxILb1EE9__destroyIP21VkExtensionPropertiesEEvT_S4_>
    }
    8a87:	90                   	nop
    8a88:	c9                   	leave
    8a89:	c3                   	ret

0000000000008a8a <_ZNSt15__new_allocatorI21VkExtensionPropertiesEC1ERKS1_>:
    8a8a:	55                   	push   %rbp
    8a8b:	48 89 e5             	mov    %rsp,%rbp
    8a8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8a92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8a96:	90                   	nop
    8a97:	5d                   	pop    %rbp
    8a98:	c3                   	ret

0000000000008a99 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    8a99:	55                   	push   %rbp
    8a9a:	48 89 e5             	mov    %rsp,%rbp
    8a9d:	48 83 ec 20          	sub    $0x20,%rsp
    8aa1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8aa5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8aa9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    8aad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8ab1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8ab5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ab9:	48 89 ce             	mov    %rcx,%rsi
    8abc:	48 89 c7             	mov    %rax,%rdi
    8abf:	e8 50 0b 00 00       	call   9614 <_ZNSt15__new_allocatorI21VkExtensionPropertiesE10deallocateEPS0_m>
    8ac4:	90                   	nop
    8ac5:	c9                   	leave
    8ac6:	c3                   	ret

0000000000008ac7 <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    8ac7:	55                   	push   %rbp
    8ac8:	48 89 e5             	mov    %rsp,%rbp
    8acb:	48 83 ec 20          	sub    $0x20,%rsp
    8acf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    8ad3:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    8ada:	ff ff 0f 
    8add:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    8ae1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8ae5:	48 89 c7             	mov    %rax,%rdi
    8ae8:	e8 61 0b 00 00       	call   964e <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>
    8aed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    8af1:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    8af5:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    8af9:	48 89 d6             	mov    %rdx,%rsi
    8afc:	48 89 c7             	mov    %rax,%rdi
    8aff:	e8 29 b7 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    8b04:	48 8b 00             	mov    (%rax),%rax
      }
    8b07:	c9                   	leave
    8b08:	c3                   	ret
    8b09:	90                   	nop

0000000000008b0a <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    8b0a:	55                   	push   %rbp
    8b0b:	48 89 e5             	mov    %rsp,%rbp
    8b0e:	48 83 ec 10          	sub    $0x10,%rsp
    8b12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8b16:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    8b1a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8b1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8b22:	48 89 d6             	mov    %rdx,%rsi
    8b25:	48 89 c7             	mov    %rax,%rdi
    8b28:	e8 61 f1 ff ff       	call   7c8e <_ZNSaIPKcEC1ERKS1_>
    8b2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8b31:	48 89 c7             	mov    %rax,%rdi
    8b34:	e8 2f 0b 00 00       	call   9668 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    8b39:	90                   	nop
    8b3a:	c9                   	leave
    8b3b:	c3                   	ret

0000000000008b3c <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    8b3c:	55                   	push   %rbp
    8b3d:	48 89 e5             	mov    %rsp,%rbp
    8b40:	48 83 ec 10          	sub    $0x10,%rsp
    8b44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8b48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    8b4c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8b50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8b54:	48 89 d6             	mov    %rdx,%rsi
    8b57:	48 89 c7             	mov    %rax,%rdi
    8b5a:	e8 37 0b 00 00       	call   9696 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
    8b5f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8b63:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    8b66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8b6a:	48 8b 10             	mov    (%rax),%rdx
    8b6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8b71:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8b75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8b79:	48 8b 00             	mov    (%rax),%rax
    8b7c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8b80:	48 c1 e2 03          	shl    $0x3,%rdx
    8b84:	48 01 c2             	add    %rax,%rdx
    8b87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8b8b:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    8b8f:	90                   	nop
    8b90:	c9                   	leave
    8b91:	c3                   	ret

0000000000008b92 <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    8b92:	55                   	push   %rbp
    8b93:	48 89 e5             	mov    %rsp,%rbp
    8b96:	48 83 ec 20          	sub    $0x20,%rsp
    8b9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8b9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8ba2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    8ba6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8baa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8bae:	48 89 d6             	mov    %rdx,%rsi
    8bb1:	48 89 c7             	mov    %rax,%rdi
    8bb4:	e8 10 0b 00 00       	call   96c9 <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>
    8bb9:	c9                   	leave
    8bba:	c3                   	ret
    8bbb:	90                   	nop

0000000000008bbc <_ZNSt15__new_allocatorIPKcEC1ERKS2_>:
    8bbc:	55                   	push   %rbp
    8bbd:	48 89 e5             	mov    %rsp,%rbp
    8bc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8bc4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8bc8:	90                   	nop
    8bc9:	5d                   	pop    %rbp
    8bca:	c3                   	ret

0000000000008bcb <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    8bcb:	55                   	push   %rbp
    8bcc:	48 89 e5             	mov    %rsp,%rbp
    8bcf:	48 83 ec 20          	sub    $0x20,%rsp
    8bd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8bd7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8bdb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    8bdf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8be3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8be7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8beb:	48 89 ce             	mov    %rcx,%rsi
    8bee:	48 89 c7             	mov    %rax,%rdi
    8bf1:	e8 fc 0a 00 00       	call   96f2 <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>
    8bf6:	90                   	nop
    8bf7:	c9                   	leave
    8bf8:	c3                   	ret

0000000000008bf9 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    8bf9:	55                   	push   %rbp
    8bfa:	48 89 e5             	mov    %rsp,%rbp
    8bfd:	48 83 ec 20          	sub    $0x20,%rsp
    8c01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    8c05:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    8c0c:	ff ff 0f 
    8c0f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    8c13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8c17:	48 89 c7             	mov    %rax,%rdi
    8c1a:	e8 04 0b 00 00       	call   9723 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>
    8c1f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    8c23:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    8c27:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    8c2b:	48 89 d6             	mov    %rdx,%rsi
    8c2e:	48 89 c7             	mov    %rax,%rdi
    8c31:	e8 f7 b5 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    8c36:	48 8b 00             	mov    (%rax),%rax
      }
    8c39:	c9                   	leave
    8c3a:	c3                   	ret
    8c3b:	90                   	nop

0000000000008c3c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    8c3c:	55                   	push   %rbp
    8c3d:	48 89 e5             	mov    %rsp,%rbp
    8c40:	48 83 ec 10          	sub    $0x10,%rsp
    8c44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8c48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    8c4c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8c50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c54:	48 89 d6             	mov    %rdx,%rsi
    8c57:	48 89 c7             	mov    %rax,%rdi
    8c5a:	e8 eb f1 ff ff       	call   7e4a <_ZNSaIP18VkPhysicalDevice_TEC1ERKS1_>
    8c5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c63:	48 89 c7             	mov    %rax,%rdi
    8c66:	e8 d3 0a 00 00       	call   973e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    8c6b:	90                   	nop
    8c6c:	c9                   	leave
    8c6d:	c3                   	ret

0000000000008c6e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    8c6e:	55                   	push   %rbp
    8c6f:	48 89 e5             	mov    %rsp,%rbp
    8c72:	48 83 ec 10          	sub    $0x10,%rsp
    8c76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8c7a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    8c7e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c86:	48 89 d6             	mov    %rdx,%rsi
    8c89:	48 89 c7             	mov    %rax,%rdi
    8c8c:	e8 db 0a 00 00       	call   976c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>
    8c91:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8c95:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    8c98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c9c:	48 8b 10             	mov    (%rax),%rdx
    8c9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ca3:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8ca7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8cab:	48 8b 00             	mov    (%rax),%rax
    8cae:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8cb2:	48 c1 e2 03          	shl    $0x3,%rdx
    8cb6:	48 01 c2             	add    %rax,%rdx
    8cb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8cbd:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    8cc1:	90                   	nop
    8cc2:	c9                   	leave
    8cc3:	c3                   	ret

0000000000008cc4 <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    8cc4:	55                   	push   %rbp
    8cc5:	48 89 e5             	mov    %rsp,%rbp
    8cc8:	48 83 ec 20          	sub    $0x20,%rsp
    8ccc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8cd0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8cd4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    8cd8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8cdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ce0:	48 89 d6             	mov    %rdx,%rsi
    8ce3:	48 89 c7             	mov    %rax,%rdi
    8ce6:	e8 b4 0a 00 00       	call   979f <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>
    8ceb:	c9                   	leave
    8cec:	c3                   	ret

0000000000008ced <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    8ced:	55                   	push   %rbp
    8cee:	48 89 e5             	mov    %rsp,%rbp
    8cf1:	48 83 ec 10          	sub    $0x10,%rsp
    8cf5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8cf9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    8cfd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8d01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8d05:	48 89 d6             	mov    %rdx,%rsi
    8d08:	48 89 c7             	mov    %rax,%rdi
    8d0b:	e8 b8 0a 00 00       	call   97c8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>
    }
    8d10:	90                   	nop
    8d11:	c9                   	leave
    8d12:	c3                   	ret
    8d13:	90                   	nop

0000000000008d14 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TEC1ERKS2_>:
    8d14:	55                   	push   %rbp
    8d15:	48 89 e5             	mov    %rsp,%rbp
    8d18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8d1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8d20:	90                   	nop
    8d21:	5d                   	pop    %rbp
    8d22:	c3                   	ret

0000000000008d23 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    8d23:	55                   	push   %rbp
    8d24:	48 89 e5             	mov    %rsp,%rbp
    8d27:	48 83 ec 20          	sub    $0x20,%rsp
    8d2b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8d2f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8d33:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    8d37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8d3b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8d3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8d43:	48 89 ce             	mov    %rcx,%rsi
    8d46:	48 89 c7             	mov    %rax,%rdi
    8d49:	e8 8a 0a 00 00       	call   97d8 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>
    8d4e:	90                   	nop
    8d4f:	c9                   	leave
    8d50:	c3                   	ret

0000000000008d51 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    8d51:	55                   	push   %rbp
    8d52:	48 89 e5             	mov    %rsp,%rbp
    8d55:	48 83 ec 20          	sub    $0x20,%rsp
    8d59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    8d5d:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
    8d64:	55 55 05 
    8d67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    8d6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8d6f:	48 89 c7             	mov    %rax,%rdi
    8d72:	e8 92 0a 00 00       	call   9809 <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE8max_sizeERKS1_>
    8d77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    8d7b:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    8d7f:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    8d83:	48 89 d6             	mov    %rdx,%rsi
    8d86:	48 89 c7             	mov    %rax,%rdi
    8d89:	e8 9f b4 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    8d8e:	48 8b 00             	mov    (%rax),%rax
      }
    8d91:	c9                   	leave
    8d92:	c3                   	ret
    8d93:	90                   	nop

0000000000008d94 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    8d94:	55                   	push   %rbp
    8d95:	48 89 e5             	mov    %rsp,%rbp
    8d98:	48 83 ec 10          	sub    $0x10,%rsp
    8d9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8da0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    8da4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8da8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8dac:	48 89 d6             	mov    %rdx,%rsi
    8daf:	48 89 c7             	mov    %rax,%rdi
    8db2:	e8 4f f2 ff ff       	call   8006 <_ZNSaI23VkQueueFamilyPropertiesEC1ERKS0_>
    8db7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8dbb:	48 89 c7             	mov    %rax,%rdi
    8dbe:	e8 61 0a 00 00       	call   9824 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    8dc3:	90                   	nop
    8dc4:	c9                   	leave
    8dc5:	c3                   	ret

0000000000008dc6 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    8dc6:	55                   	push   %rbp
    8dc7:	48 89 e5             	mov    %rsp,%rbp
    8dca:	48 83 ec 10          	sub    $0x10,%rsp
    8dce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8dd2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    8dd6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8dde:	48 89 d6             	mov    %rdx,%rsi
    8de1:	48 89 c7             	mov    %rax,%rdi
    8de4:	e8 69 0a 00 00       	call   9852 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE11_M_allocateEm>
    8de9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8ded:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    8df0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8df4:	48 8b 10             	mov    (%rax),%rdx
    8df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8dfb:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8dff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8e03:	48 8b 08             	mov    (%rax),%rcx
    8e06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8e0a:	48 89 d0             	mov    %rdx,%rax
    8e0d:	48 01 c0             	add    %rax,%rax
    8e10:	48 01 d0             	add    %rdx,%rax
    8e13:	48 c1 e0 03          	shl    $0x3,%rax
    8e17:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    8e1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8e1f:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    8e23:	90                   	nop
    8e24:	c9                   	leave
    8e25:	c3                   	ret

0000000000008e26 <_ZSt27__uninitialized_default_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    8e26:	55                   	push   %rbp
    8e27:	48 89 e5             	mov    %rsp,%rbp
    8e2a:	48 83 ec 20          	sub    $0x20,%rsp
    8e2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8e32:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8e36:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    8e3a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8e3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8e42:	48 89 d6             	mov    %rdx,%rsi
    8e45:	48 89 c7             	mov    %rax,%rdi
    8e48:	e8 38 0a 00 00       	call   9885 <_ZSt25__uninitialized_default_nIP23VkQueueFamilyPropertiesmET_S2_T0_>
    8e4d:	c9                   	leave
    8e4e:	c3                   	ret

0000000000008e4f <_ZSt8_DestroyIP23VkQueueFamilyPropertiesEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    8e4f:	55                   	push   %rbp
    8e50:	48 89 e5             	mov    %rsp,%rbp
    8e53:	48 83 ec 10          	sub    $0x10,%rsp
    8e57:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8e5b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    8e5f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8e63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8e67:	48 89 d6             	mov    %rdx,%rsi
    8e6a:	48 89 c7             	mov    %rax,%rdi
    8e6d:	e8 3c 0a 00 00       	call   98ae <_ZNSt12_Destroy_auxILb1EE9__destroyIP23VkQueueFamilyPropertiesEEvT_S4_>
    }
    8e72:	90                   	nop
    8e73:	c9                   	leave
    8e74:	c3                   	ret
    8e75:	90                   	nop

0000000000008e76 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesEC1ERKS1_>:
    8e76:	55                   	push   %rbp
    8e77:	48 89 e5             	mov    %rsp,%rbp
    8e7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8e7e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8e82:	90                   	nop
    8e83:	5d                   	pop    %rbp
    8e84:	c3                   	ret

0000000000008e85 <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    8e85:	55                   	push   %rbp
    8e86:	48 89 e5             	mov    %rsp,%rbp
    8e89:	48 83 ec 20          	sub    $0x20,%rsp
    8e8d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8e91:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8e95:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    8e99:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8e9d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8ea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ea5:	48 89 ce             	mov    %rcx,%rsi
    8ea8:	48 89 c7             	mov    %rax,%rdi
    8eab:	e8 0e 0a 00 00       	call   98be <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE10deallocateEPS0_m>
    8eb0:	90                   	nop
    8eb1:	c9                   	leave
    8eb2:	c3                   	ret

0000000000008eb3 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    8eb3:	55                   	push   %rbp
    8eb4:	48 89 e5             	mov    %rsp,%rbp
    8eb7:	48 83 ec 20          	sub    $0x20,%rsp
    8ebb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    8ebf:	48 b8 92 24 49 92 24 	movabs $0x492492492492492,%rax
    8ec6:	49 92 04 
    8ec9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    8ecd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8ed1:	48 89 c7             	mov    %rax,%rdi
    8ed4:	e8 1e 0a 00 00       	call   98f7 <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE8max_sizeERKS3_>
    8ed9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    8edd:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    8ee1:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    8ee5:	48 89 d6             	mov    %rdx,%rsi
    8ee8:	48 89 c7             	mov    %rax,%rdi
    8eeb:	e8 3d b3 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    8ef0:	48 8b 00             	mov    (%rax),%rax
      }
    8ef3:	c9                   	leave
    8ef4:	c3                   	ret
    8ef5:	90                   	nop

0000000000008ef6 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    8ef6:	55                   	push   %rbp
    8ef7:	48 89 e5             	mov    %rsp,%rbp
    8efa:	48 83 ec 10          	sub    $0x10,%rsp
    8efe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8f02:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    8f06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8f0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f0e:	48 89 d6             	mov    %rdx,%rsi
    8f11:	48 89 c7             	mov    %rax,%rdi
    8f14:	e8 5b f3 ff ff       	call   8274 <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS2_>
    8f19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f1d:	48 89 c7             	mov    %rax,%rdi
    8f20:	e8 ed 09 00 00       	call   9912 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
    8f25:	90                   	nop
    8f26:	c9                   	leave
    8f27:	c3                   	ret

0000000000008f28 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    8f28:	55                   	push   %rbp
    8f29:	48 89 e5             	mov    %rsp,%rbp
    8f2c:	48 83 ec 10          	sub    $0x10,%rsp
    8f30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8f34:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    8f38:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8f3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f40:	48 89 d6             	mov    %rdx,%rsi
    8f43:	48 89 c7             	mov    %rax,%rdi
    8f46:	e8 f5 09 00 00       	call   9940 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_M_allocateEm>
    8f4b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8f4f:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    8f52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f56:	48 8b 10             	mov    (%rax),%rdx
    8f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f5d:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    8f61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f65:	48 8b 08             	mov    (%rax),%rcx
    8f68:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8f6c:	48 89 d0             	mov    %rdx,%rax
    8f6f:	48 c1 e0 03          	shl    $0x3,%rax
    8f73:	48 29 d0             	sub    %rdx,%rax
    8f76:	48 c1 e0 02          	shl    $0x2,%rax
    8f7a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    8f7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f82:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    8f86:	90                   	nop
    8f87:	c9                   	leave
    8f88:	c3                   	ret

0000000000008f89 <_ZSt27__uninitialized_default_n_aIPSt8optionalI23VkQueueFamilyPropertiesEmS2_ET_S4_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    8f89:	55                   	push   %rbp
    8f8a:	48 89 e5             	mov    %rsp,%rbp
    8f8d:	48 83 ec 20          	sub    $0x20,%rsp
    8f91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8f95:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8f99:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    8f9d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8fa1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fa5:	48 89 d6             	mov    %rdx,%rsi
    8fa8:	48 89 c7             	mov    %rax,%rdi
    8fab:	e8 c3 09 00 00       	call   9973 <_ZSt25__uninitialized_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmET_S4_T0_>
    8fb0:	c9                   	leave
    8fb1:	c3                   	ret

0000000000008fb2 <_ZSt8_DestroyIPSt8optionalI23VkQueueFamilyPropertiesEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    8fb2:	55                   	push   %rbp
    8fb3:	48 89 e5             	mov    %rsp,%rbp
    8fb6:	48 83 ec 10          	sub    $0x10,%rsp
    8fba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8fbe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    8fc2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8fc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fca:	48 89 d6             	mov    %rdx,%rsi
    8fcd:	48 89 c7             	mov    %rax,%rdi
    8fd0:	e8 c7 09 00 00       	call   999c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt8optionalI23VkQueueFamilyPropertiesEEEvT_S6_>
    }
    8fd5:	90                   	nop
    8fd6:	c9                   	leave
    8fd7:	c3                   	ret

0000000000008fd8 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE6_M_getEv>:
      _M_get() noexcept
    8fd8:	55                   	push   %rbp
    8fd9:	48 89 e5             	mov    %rsp,%rbp
    8fdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_payload._M_value; }
    8fe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fe4:	5d                   	pop    %rbp
    8fe5:	c3                   	ret

0000000000008fe6 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE12_M_constructIJRKS0_EEEvDpOT_>:
	_M_construct(_Args&&... __args)
    8fe6:	55                   	push   %rbp
    8fe7:	48 89 e5             	mov    %rsp,%rbp
    8fea:	53                   	push   %rbx
    8feb:	48 83 ec 18          	sub    $0x18,%rsp
    8fef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8ff3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  std::_Construct(std::__addressof(this->_M_payload._M_value),
    8ff7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8ffb:	48 89 c7             	mov    %rax,%rdi
    8ffe:	e8 2f f2 ff ff       	call   8232 <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    9003:	48 89 c3             	mov    %rax,%rbx
    9006:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    900a:	48 89 c7             	mov    %rax,%rdi
    900d:	e8 99 09 00 00       	call   99ab <_ZSt11__addressofI23VkQueueFamilyPropertiesEPT_RS1_>
    9012:	48 89 de             	mov    %rbx,%rsi
    9015:	48 89 c7             	mov    %rax,%rdi
    9018:	e8 9c 09 00 00       	call   99b9 <_ZSt10_ConstructI23VkQueueFamilyPropertiesJRKS0_EEvPT_DpOT0_>
	  this->_M_engaged = true;
    901d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9021:	c6 40 18 01          	movb   $0x1,0x18(%rax)
	}
    9025:	90                   	nop
    9026:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    902a:	c9                   	leave
    902b:	c3                   	ret

000000000000902c <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS3_>:
    902c:	55                   	push   %rbp
    902d:	48 89 e5             	mov    %rsp,%rbp
    9030:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9034:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9038:	90                   	nop
    9039:	5d                   	pop    %rbp
    903a:	c3                   	ret

000000000000903b <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE10deallocateERS3_PS2_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    903b:	55                   	push   %rbp
    903c:	48 89 e5             	mov    %rsp,%rbp
    903f:	48 83 ec 20          	sub    $0x20,%rsp
    9043:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9047:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    904b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    904f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9053:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9057:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    905b:	48 89 ce             	mov    %rcx,%rsi
    905e:	48 89 c7             	mov    %rax,%rdi
    9061:	e8 a4 09 00 00       	call   9a0a <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE10deallocateEPS2_m>
    9066:	90                   	nop
    9067:	c9                   	leave
    9068:	c3                   	ret

0000000000009069 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    9069:	55                   	push   %rbp
    906a:	48 89 e5             	mov    %rsp,%rbp
    906d:	48 83 ec 20          	sub    $0x20,%rsp
    9071:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    9075:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    907c:	ff ff 0f 
    907f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    9083:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9087:	48 89 c7             	mov    %rax,%rdi
    908a:	e8 b5 09 00 00       	call   9a44 <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE8max_sizeERKS1_>
    908f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    9093:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    9097:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    909b:	48 89 d6             	mov    %rdx,%rsi
    909e:	48 89 c7             	mov    %rax,%rdi
    90a1:	e8 87 b1 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    90a6:	48 8b 00             	mov    (%rax),%rax
      }
    90a9:	c9                   	leave
    90aa:	c3                   	ret
    90ab:	90                   	nop

00000000000090ac <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    90ac:	55                   	push   %rbp
    90ad:	48 89 e5             	mov    %rsp,%rbp
    90b0:	48 83 ec 10          	sub    $0x10,%rsp
    90b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    90b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    90bc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    90c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90c4:	48 89 d6             	mov    %rdx,%rsi
    90c7:	48 89 c7             	mov    %rax,%rdi
    90ca:	e8 61 f3 ff ff       	call   8430 <_ZNSaI18VkSurfaceFormatKHREC1ERKS0_>
    90cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90d3:	48 89 c7             	mov    %rax,%rdi
    90d6:	e8 83 09 00 00       	call   9a5e <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    90db:	90                   	nop
    90dc:	c9                   	leave
    90dd:	c3                   	ret

00000000000090de <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    90de:	55                   	push   %rbp
    90df:	48 89 e5             	mov    %rsp,%rbp
    90e2:	48 83 ec 10          	sub    $0x10,%rsp
    90e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    90ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    90ee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    90f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90f6:	48 89 d6             	mov    %rdx,%rsi
    90f9:	48 89 c7             	mov    %rax,%rdi
    90fc:	e8 8b 09 00 00       	call   9a8c <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE11_M_allocateEm>
    9101:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9105:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    9108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    910c:	48 8b 10             	mov    (%rax),%rdx
    910f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9113:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    9117:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    911b:	48 8b 00             	mov    (%rax),%rax
    911e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9122:	48 c1 e2 03          	shl    $0x3,%rdx
    9126:	48 01 c2             	add    %rax,%rdx
    9129:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    912d:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    9131:	90                   	nop
    9132:	c9                   	leave
    9133:	c3                   	ret

0000000000009134 <_ZSt27__uninitialized_default_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    9134:	55                   	push   %rbp
    9135:	48 89 e5             	mov    %rsp,%rbp
    9138:	48 83 ec 20          	sub    $0x20,%rsp
    913c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9140:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9144:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    9148:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    914c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9150:	48 89 d6             	mov    %rdx,%rsi
    9153:	48 89 c7             	mov    %rax,%rdi
    9156:	e8 64 09 00 00       	call   9abf <_ZSt25__uninitialized_default_nIP18VkSurfaceFormatKHRmET_S2_T0_>
    915b:	c9                   	leave
    915c:	c3                   	ret

000000000000915d <_ZSt8_DestroyIP18VkSurfaceFormatKHREvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    915d:	55                   	push   %rbp
    915e:	48 89 e5             	mov    %rsp,%rbp
    9161:	48 83 ec 10          	sub    $0x10,%rsp
    9165:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9169:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    916d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9171:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9175:	48 89 d6             	mov    %rdx,%rsi
    9178:	48 89 c7             	mov    %rax,%rdi
    917b:	e8 68 09 00 00       	call   9ae8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP18VkSurfaceFormatKHREEvT_S4_>
    }
    9180:	90                   	nop
    9181:	c9                   	leave
    9182:	c3                   	ret
    9183:	90                   	nop

0000000000009184 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHREC1ERKS1_>:
    9184:	55                   	push   %rbp
    9185:	48 89 e5             	mov    %rsp,%rbp
    9188:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    918c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9190:	90                   	nop
    9191:	5d                   	pop    %rbp
    9192:	c3                   	ret

0000000000009193 <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    9193:	55                   	push   %rbp
    9194:	48 89 e5             	mov    %rsp,%rbp
    9197:	48 83 ec 20          	sub    $0x20,%rsp
    919b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    919f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    91a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    91a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    91ab:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    91af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91b3:	48 89 ce             	mov    %rcx,%rsi
    91b6:	48 89 c7             	mov    %rax,%rdi
    91b9:	e8 3a 09 00 00       	call   9af8 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE10deallocateEPS0_m>
    91be:	90                   	nop
    91bf:	c9                   	leave
    91c0:	c3                   	ret

00000000000091c1 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    91c1:	55                   	push   %rbp
    91c2:	48 89 e5             	mov    %rsp,%rbp
    91c5:	48 83 ec 20          	sub    $0x20,%rsp
    91c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    91cd:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    91d4:	ff ff 1f 
    91d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    91db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    91df:	48 89 c7             	mov    %rax,%rdi
    91e2:	e8 42 09 00 00       	call   9b29 <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE8max_sizeERKS1_>
    91e7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    91eb:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    91ef:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    91f3:	48 89 d6             	mov    %rdx,%rsi
    91f6:	48 89 c7             	mov    %rax,%rdi
    91f9:	e8 2f b0 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    91fe:	48 8b 00             	mov    (%rax),%rax
      }
    9201:	c9                   	leave
    9202:	c3                   	ret
    9203:	90                   	nop

0000000000009204 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    9204:	55                   	push   %rbp
    9205:	48 89 e5             	mov    %rsp,%rbp
    9208:	48 83 ec 10          	sub    $0x10,%rsp
    920c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9210:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    9214:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9218:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    921c:	48 89 d6             	mov    %rdx,%rsi
    921f:	48 89 c7             	mov    %rax,%rdi
    9222:	e8 c5 f3 ff ff       	call   85ec <_ZNSaI16VkPresentModeKHREC1ERKS0_>
    9227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    922b:	48 89 c7             	mov    %rax,%rdi
    922e:	e8 11 09 00 00       	call   9b44 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    9233:	90                   	nop
    9234:	c9                   	leave
    9235:	c3                   	ret

0000000000009236 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    9236:	55                   	push   %rbp
    9237:	48 89 e5             	mov    %rsp,%rbp
    923a:	48 83 ec 10          	sub    $0x10,%rsp
    923e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9242:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    9246:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    924a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    924e:	48 89 d6             	mov    %rdx,%rsi
    9251:	48 89 c7             	mov    %rax,%rdi
    9254:	e8 19 09 00 00       	call   9b72 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE11_M_allocateEm>
    9259:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    925d:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    9260:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9264:	48 8b 10             	mov    (%rax),%rdx
    9267:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    926b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    926f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9273:	48 8b 00             	mov    (%rax),%rax
    9276:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    927a:	48 c1 e2 02          	shl    $0x2,%rdx
    927e:	48 01 c2             	add    %rax,%rdx
    9281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9285:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    9289:	90                   	nop
    928a:	c9                   	leave
    928b:	c3                   	ret

000000000000928c <_ZSt27__uninitialized_default_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    928c:	55                   	push   %rbp
    928d:	48 89 e5             	mov    %rsp,%rbp
    9290:	48 83 ec 20          	sub    $0x20,%rsp
    9294:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9298:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    929c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    92a0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    92a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    92a8:	48 89 d6             	mov    %rdx,%rsi
    92ab:	48 89 c7             	mov    %rax,%rdi
    92ae:	e8 f2 08 00 00       	call   9ba5 <_ZSt25__uninitialized_default_nIP16VkPresentModeKHRmET_S2_T0_>
    92b3:	c9                   	leave
    92b4:	c3                   	ret

00000000000092b5 <_ZSt8_DestroyIP16VkPresentModeKHREvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    92b5:	55                   	push   %rbp
    92b6:	48 89 e5             	mov    %rsp,%rbp
    92b9:	48 83 ec 10          	sub    $0x10,%rsp
    92bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    92c1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    92c5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    92c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    92cd:	48 89 d6             	mov    %rdx,%rsi
    92d0:	48 89 c7             	mov    %rax,%rdi
    92d3:	e8 f6 08 00 00       	call   9bce <_ZNSt12_Destroy_auxILb1EE9__destroyIP16VkPresentModeKHREEvT_S4_>
    }
    92d8:	90                   	nop
    92d9:	c9                   	leave
    92da:	c3                   	ret
    92db:	90                   	nop

00000000000092dc <_ZNSt15__new_allocatorI16VkPresentModeKHREC1ERKS1_>:
    92dc:	55                   	push   %rbp
    92dd:	48 89 e5             	mov    %rsp,%rbp
    92e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    92e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    92e8:	90                   	nop
    92e9:	5d                   	pop    %rbp
    92ea:	c3                   	ret

00000000000092eb <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    92eb:	55                   	push   %rbp
    92ec:	48 89 e5             	mov    %rsp,%rbp
    92ef:	48 83 ec 20          	sub    $0x20,%rsp
    92f3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    92f7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    92fb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    92ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9303:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9307:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    930b:	48 89 ce             	mov    %rcx,%rsi
    930e:	48 89 c7             	mov    %rax,%rdi
    9311:	e8 c8 08 00 00       	call   9bde <_ZNSt15__new_allocatorI16VkPresentModeKHRE10deallocateEPS0_m>
    9316:	90                   	nop
    9317:	c9                   	leave
    9318:	c3                   	ret

0000000000009319 <_ZNSt6vectorIP9VkImage_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    9319:	55                   	push   %rbp
    931a:	48 89 e5             	mov    %rsp,%rbp
    931d:	48 83 ec 20          	sub    $0x20,%rsp
    9321:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    9325:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    932c:	ff ff 0f 
    932f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    9333:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9337:	48 89 c7             	mov    %rax,%rdi
    933a:	e8 d0 08 00 00       	call   9c0f <_ZNSt16allocator_traitsISaIP9VkImage_TEE8max_sizeERKS2_>
    933f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    9343:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    9347:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    934b:	48 89 d6             	mov    %rdx,%rsi
    934e:	48 89 c7             	mov    %rax,%rdi
    9351:	e8 d7 ae ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    9356:	48 8b 00             	mov    (%rax),%rax
      }
    9359:	c9                   	leave
    935a:	c3                   	ret
    935b:	90                   	nop

000000000000935c <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    935c:	55                   	push   %rbp
    935d:	48 89 e5             	mov    %rsp,%rbp
    9360:	48 83 ec 10          	sub    $0x10,%rsp
    9364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9368:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    936c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9370:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9374:	48 89 d6             	mov    %rdx,%rsi
    9377:	48 89 c7             	mov    %rax,%rdi
    937a:	e8 29 f4 ff ff       	call   87a8 <_ZNSaIP9VkImage_TEC1ERKS1_>
    937f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9383:	48 89 c7             	mov    %rax,%rdi
    9386:	e8 9f 08 00 00       	call   9c2a <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    938b:	90                   	nop
    938c:	c9                   	leave
    938d:	c3                   	ret

000000000000938e <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    938e:	55                   	push   %rbp
    938f:	48 89 e5             	mov    %rsp,%rbp
    9392:	48 83 ec 10          	sub    $0x10,%rsp
    9396:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    939a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    939e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    93a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    93a6:	48 89 d6             	mov    %rdx,%rsi
    93a9:	48 89 c7             	mov    %rax,%rdi
    93ac:	e8 a7 08 00 00       	call   9c58 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE11_M_allocateEm>
    93b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    93b5:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    93b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    93bc:	48 8b 10             	mov    (%rax),%rdx
    93bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    93c3:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    93c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    93cb:	48 8b 00             	mov    (%rax),%rax
    93ce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    93d2:	48 c1 e2 03          	shl    $0x3,%rdx
    93d6:	48 01 c2             	add    %rax,%rdx
    93d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    93dd:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    93e1:	90                   	nop
    93e2:	c9                   	leave
    93e3:	c3                   	ret

00000000000093e4 <_ZSt27__uninitialized_default_n_aIPP9VkImage_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    93e4:	55                   	push   %rbp
    93e5:	48 89 e5             	mov    %rsp,%rbp
    93e8:	48 83 ec 20          	sub    $0x20,%rsp
    93ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    93f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    93f4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    93f8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    93fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9400:	48 89 d6             	mov    %rdx,%rsi
    9403:	48 89 c7             	mov    %rax,%rdi
    9406:	e8 80 08 00 00       	call   9c8b <_ZSt25__uninitialized_default_nIPP9VkImage_TmET_S3_T0_>
    940b:	c9                   	leave
    940c:	c3                   	ret

000000000000940d <_ZSt8_DestroyIPP9VkImage_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    940d:	55                   	push   %rbp
    940e:	48 89 e5             	mov    %rsp,%rbp
    9411:	48 83 ec 10          	sub    $0x10,%rsp
    9415:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9419:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    941d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9421:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9425:	48 89 d6             	mov    %rdx,%rsi
    9428:	48 89 c7             	mov    %rax,%rdi
    942b:	e8 84 08 00 00       	call   9cb4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9VkImage_TEEvT_S5_>
    }
    9430:	90                   	nop
    9431:	c9                   	leave
    9432:	c3                   	ret
    9433:	90                   	nop

0000000000009434 <_ZNSt15__new_allocatorIP9VkImage_TEC1ERKS2_>:
    9434:	55                   	push   %rbp
    9435:	48 89 e5             	mov    %rsp,%rbp
    9438:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    943c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9440:	90                   	nop
    9441:	5d                   	pop    %rbp
    9442:	c3                   	ret

0000000000009443 <_ZNSt16allocator_traitsISaIP9VkImage_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    9443:	55                   	push   %rbp
    9444:	48 89 e5             	mov    %rsp,%rbp
    9447:	48 83 ec 20          	sub    $0x20,%rsp
    944b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    944f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9453:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    9457:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    945b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    945f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9463:	48 89 ce             	mov    %rcx,%rsi
    9466:	48 89 c7             	mov    %rax,%rdi
    9469:	e8 56 08 00 00       	call   9cc4 <_ZNSt15__new_allocatorIP9VkImage_TE10deallocateEPS1_m>
    946e:	90                   	nop
    946f:	c9                   	leave
    9470:	c3                   	ret

0000000000009471 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    9471:	55                   	push   %rbp
    9472:	48 89 e5             	mov    %rsp,%rbp
    9475:	48 83 ec 10          	sub    $0x10,%rsp
    9479:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    947d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9481:	48 89 c7             	mov    %rax,%rdi
    9484:	e8 6d 08 00 00       	call   9cf6 <_ZNKSt15__new_allocatorI17VkLayerPropertiesE8max_sizeEv>
      }
    9489:	c9                   	leave
    948a:	c3                   	ret
    948b:	90                   	nop

000000000000948c <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    948c:	55                   	push   %rbp
    948d:	48 89 e5             	mov    %rsp,%rbp
    9490:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    9494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9498:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    949f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94a3:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    94aa:	00 
    94ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94af:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    94b6:	00 
	{ }
    94b7:	90                   	nop
    94b8:	5d                   	pop    %rbp
    94b9:	c3                   	ret

00000000000094ba <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    94ba:	55                   	push   %rbp
    94bb:	48 89 e5             	mov    %rsp,%rbp
    94be:	48 83 ec 10          	sub    $0x10,%rsp
    94c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    94c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    94ca:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    94cf:	74 15                	je     94e6 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE11_M_allocateEm+0x2c>
    94d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94d5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    94d9:	48 89 d6             	mov    %rdx,%rsi
    94dc:	48 89 c7             	mov    %rax,%rdi
    94df:	e8 2c 08 00 00       	call   9d10 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE8allocateERS1_m>
    94e4:	eb 05                	jmp    94eb <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE11_M_allocateEm+0x31>
    94e6:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    94eb:	c9                   	leave
    94ec:	c3                   	ret

00000000000094ed <_ZSt25__uninitialized_default_nIP17VkLayerPropertiesmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    94ed:	55                   	push   %rbp
    94ee:	48 89 e5             	mov    %rsp,%rbp
    94f1:	48 83 ec 20          	sub    $0x20,%rsp
    94f5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    94f9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    94fd:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    9501:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9505:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9509:	48 89 d6             	mov    %rdx,%rsi
    950c:	48 89 c7             	mov    %rax,%rdi
    950f:	e8 26 08 00 00       	call   9d3a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP17VkLayerPropertiesmEET_S4_T0_>
    }
    9514:	c9                   	leave
    9515:	c3                   	ret

0000000000009516 <_ZNSt12_Destroy_auxILb1EE9__destroyIP17VkLayerPropertiesEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    9516:	55                   	push   %rbp
    9517:	48 89 e5             	mov    %rsp,%rbp
    951a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    951e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9522:	90                   	nop
    9523:	5d                   	pop    %rbp
    9524:	c3                   	ret
    9525:	90                   	nop

0000000000009526 <_ZNSt15__new_allocatorI17VkLayerPropertiesE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    9526:	55                   	push   %rbp
    9527:	48 89 e5             	mov    %rsp,%rbp
    952a:	48 83 ec 20          	sub    $0x20,%rsp
    952e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9532:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9536:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    953a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    953e:	48 89 d0             	mov    %rdx,%rax
    9541:	48 c1 e0 06          	shl    $0x6,%rax
    9545:	48 01 d0             	add    %rdx,%rax
    9548:	48 c1 e0 03          	shl    $0x3,%rax
    954c:	48 89 c2             	mov    %rax,%rdx
    954f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9553:	48 89 d6             	mov    %rdx,%rsi
    9556:	48 89 c7             	mov    %rax,%rdi
    9559:	e8 c2 9d ff ff       	call   3320 <_ZdlPvm@plt>
      }
    955e:	c9                   	leave
    955f:	c3                   	ret

0000000000009560 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    9560:	55                   	push   %rbp
    9561:	48 89 e5             	mov    %rsp,%rbp
    9564:	48 83 ec 10          	sub    $0x10,%rsp
    9568:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    956c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9570:	48 89 c7             	mov    %rax,%rdi
    9573:	e8 22 08 00 00       	call   9d9a <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE8max_sizeEv>
      }
    9578:	c9                   	leave
    9579:	c3                   	ret

000000000000957a <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    957a:	55                   	push   %rbp
    957b:	48 89 e5             	mov    %rsp,%rbp
    957e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    9582:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9586:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    958d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9591:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9598:	00 
    9599:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    959d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    95a4:	00 
	{ }
    95a5:	90                   	nop
    95a6:	5d                   	pop    %rbp
    95a7:	c3                   	ret

00000000000095a8 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    95a8:	55                   	push   %rbp
    95a9:	48 89 e5             	mov    %rsp,%rbp
    95ac:	48 83 ec 10          	sub    $0x10,%rsp
    95b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    95b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    95b8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    95bd:	74 15                	je     95d4 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE11_M_allocateEm+0x2c>
    95bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    95c3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    95c7:	48 89 d6             	mov    %rdx,%rsi
    95ca:	48 89 c7             	mov    %rax,%rdi
    95cd:	e8 e2 07 00 00       	call   9db4 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE8allocateERS1_m>
    95d2:	eb 05                	jmp    95d9 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE11_M_allocateEm+0x31>
    95d4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    95d9:	c9                   	leave
    95da:	c3                   	ret

00000000000095db <_ZSt25__uninitialized_default_nIP21VkExtensionPropertiesmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    95db:	55                   	push   %rbp
    95dc:	48 89 e5             	mov    %rsp,%rbp
    95df:	48 83 ec 20          	sub    $0x20,%rsp
    95e3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    95e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    95eb:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    95ef:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    95f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    95f7:	48 89 d6             	mov    %rdx,%rsi
    95fa:	48 89 c7             	mov    %rax,%rdi
    95fd:	e8 dc 07 00 00       	call   9dde <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP21VkExtensionPropertiesmEET_S4_T0_>
    }
    9602:	c9                   	leave
    9603:	c3                   	ret

0000000000009604 <_ZNSt12_Destroy_auxILb1EE9__destroyIP21VkExtensionPropertiesEEvT_S4_>:
    9604:	55                   	push   %rbp
    9605:	48 89 e5             	mov    %rsp,%rbp
    9608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    960c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9610:	90                   	nop
    9611:	5d                   	pop    %rbp
    9612:	c3                   	ret
    9613:	90                   	nop

0000000000009614 <_ZNSt15__new_allocatorI21VkExtensionPropertiesE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    9614:	55                   	push   %rbp
    9615:	48 89 e5             	mov    %rsp,%rbp
    9618:	48 83 ec 20          	sub    $0x20,%rsp
    961c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9620:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9624:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    9628:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    962c:	48 89 d0             	mov    %rdx,%rax
    962f:	48 c1 e0 06          	shl    $0x6,%rax
    9633:	48 01 d0             	add    %rdx,%rax
    9636:	48 c1 e0 02          	shl    $0x2,%rax
    963a:	48 89 c2             	mov    %rax,%rdx
    963d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9641:	48 89 d6             	mov    %rdx,%rsi
    9644:	48 89 c7             	mov    %rax,%rdi
    9647:	e8 d4 9c ff ff       	call   3320 <_ZdlPvm@plt>
      }
    964c:	c9                   	leave
    964d:	c3                   	ret

000000000000964e <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    964e:	55                   	push   %rbp
    964f:	48 89 e5             	mov    %rsp,%rbp
    9652:	48 83 ec 10          	sub    $0x10,%rsp
    9656:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    965a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    965e:	48 89 c7             	mov    %rax,%rdi
    9661:	e8 d8 07 00 00       	call   9e3e <_ZNKSt15__new_allocatorIPKcE8max_sizeEv>
      }
    9666:	c9                   	leave
    9667:	c3                   	ret

0000000000009668 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    9668:	55                   	push   %rbp
    9669:	48 89 e5             	mov    %rsp,%rbp
    966c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    9670:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9674:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    967b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    967f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9686:	00 
    9687:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    968b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9692:	00 
	{ }
    9693:	90                   	nop
    9694:	5d                   	pop    %rbp
    9695:	c3                   	ret

0000000000009696 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    9696:	55                   	push   %rbp
    9697:	48 89 e5             	mov    %rsp,%rbp
    969a:	48 83 ec 10          	sub    $0x10,%rsp
    969e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    96a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    96a6:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    96ab:	74 15                	je     96c2 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x2c>
    96ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96b1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    96b5:	48 89 d6             	mov    %rdx,%rsi
    96b8:	48 89 c7             	mov    %rax,%rdi
    96bb:	e8 98 07 00 00       	call   9e58 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>
    96c0:	eb 05                	jmp    96c7 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x31>
    96c2:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    96c7:	c9                   	leave
    96c8:	c3                   	ret

00000000000096c9 <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    96c9:	55                   	push   %rbp
    96ca:	48 89 e5             	mov    %rsp,%rbp
    96cd:	48 83 ec 20          	sub    $0x20,%rsp
    96d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    96d5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    96d9:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    96dd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    96e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    96e5:	48 89 d6             	mov    %rdx,%rsi
    96e8:	48 89 c7             	mov    %rax,%rdi
    96eb:	e8 92 07 00 00       	call   9e82 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>
    }
    96f0:	c9                   	leave
    96f1:	c3                   	ret

00000000000096f2 <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    96f2:	55                   	push   %rbp
    96f3:	48 89 e5             	mov    %rsp,%rbp
    96f6:	48 83 ec 20          	sub    $0x20,%rsp
    96fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    96fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9702:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    9706:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    970a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    9711:	00 
    9712:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9716:	48 89 d6             	mov    %rdx,%rsi
    9719:	48 89 c7             	mov    %rax,%rdi
    971c:	e8 ff 9b ff ff       	call   3320 <_ZdlPvm@plt>
      }
    9721:	c9                   	leave
    9722:	c3                   	ret

0000000000009723 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    9723:	55                   	push   %rbp
    9724:	48 89 e5             	mov    %rsp,%rbp
    9727:	48 83 ec 10          	sub    $0x10,%rsp
    972b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    972f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9733:	48 89 c7             	mov    %rax,%rdi
    9736:	e8 a5 07 00 00       	call   9ee0 <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE8max_sizeEv>
      }
    973b:	c9                   	leave
    973c:	c3                   	ret
    973d:	90                   	nop

000000000000973e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    973e:	55                   	push   %rbp
    973f:	48 89 e5             	mov    %rsp,%rbp
    9742:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    9746:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    974a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    9751:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9755:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    975c:	00 
    975d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9761:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9768:	00 
	{ }
    9769:	90                   	nop
    976a:	5d                   	pop    %rbp
    976b:	c3                   	ret

000000000000976c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    976c:	55                   	push   %rbp
    976d:	48 89 e5             	mov    %rsp,%rbp
    9770:	48 83 ec 10          	sub    $0x10,%rsp
    9774:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9778:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    977c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    9781:	74 15                	je     9798 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x2c>
    9783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9787:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    978b:	48 89 d6             	mov    %rdx,%rsi
    978e:	48 89 c7             	mov    %rax,%rdi
    9791:	e8 64 07 00 00       	call   9efa <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>
    9796:	eb 05                	jmp    979d <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x31>
    9798:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    979d:	c9                   	leave
    979e:	c3                   	ret

000000000000979f <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    979f:	55                   	push   %rbp
    97a0:	48 89 e5             	mov    %rsp,%rbp
    97a3:	48 83 ec 20          	sub    $0x20,%rsp
    97a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    97ab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    97af:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    97b3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    97b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    97bb:	48 89 d6             	mov    %rdx,%rsi
    97be:	48 89 c7             	mov    %rax,%rdi
    97c1:	e8 5e 07 00 00       	call   9f24 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>
    }
    97c6:	c9                   	leave
    97c7:	c3                   	ret

00000000000097c8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>:
    97c8:	55                   	push   %rbp
    97c9:	48 89 e5             	mov    %rsp,%rbp
    97cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    97d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    97d4:	90                   	nop
    97d5:	5d                   	pop    %rbp
    97d6:	c3                   	ret
    97d7:	90                   	nop

00000000000097d8 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    97d8:	55                   	push   %rbp
    97d9:	48 89 e5             	mov    %rsp,%rbp
    97dc:	48 83 ec 20          	sub    $0x20,%rsp
    97e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    97e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    97e8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    97ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    97f0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    97f7:	00 
    97f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    97fc:	48 89 d6             	mov    %rdx,%rsi
    97ff:	48 89 c7             	mov    %rax,%rdi
    9802:	e8 19 9b ff ff       	call   3320 <_ZdlPvm@plt>
      }
    9807:	c9                   	leave
    9808:	c3                   	ret

0000000000009809 <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    9809:	55                   	push   %rbp
    980a:	48 89 e5             	mov    %rsp,%rbp
    980d:	48 83 ec 10          	sub    $0x10,%rsp
    9811:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    9815:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9819:	48 89 c7             	mov    %rax,%rdi
    981c:	e8 61 07 00 00       	call   9f82 <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE8max_sizeEv>
      }
    9821:	c9                   	leave
    9822:	c3                   	ret
    9823:	90                   	nop

0000000000009824 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    9824:	55                   	push   %rbp
    9825:	48 89 e5             	mov    %rsp,%rbp
    9828:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    982c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9830:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    9837:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    983b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9842:	00 
    9843:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9847:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    984e:	00 
	{ }
    984f:	90                   	nop
    9850:	5d                   	pop    %rbp
    9851:	c3                   	ret

0000000000009852 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    9852:	55                   	push   %rbp
    9853:	48 89 e5             	mov    %rsp,%rbp
    9856:	48 83 ec 10          	sub    $0x10,%rsp
    985a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    985e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    9862:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    9867:	74 15                	je     987e <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE11_M_allocateEm+0x2c>
    9869:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    986d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9871:	48 89 d6             	mov    %rdx,%rsi
    9874:	48 89 c7             	mov    %rax,%rdi
    9877:	e8 20 07 00 00       	call   9f9c <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE8allocateERS1_m>
    987c:	eb 05                	jmp    9883 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE11_M_allocateEm+0x31>
    987e:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    9883:	c9                   	leave
    9884:	c3                   	ret

0000000000009885 <_ZSt25__uninitialized_default_nIP23VkQueueFamilyPropertiesmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    9885:	55                   	push   %rbp
    9886:	48 89 e5             	mov    %rsp,%rbp
    9889:	48 83 ec 20          	sub    $0x20,%rsp
    988d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9891:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    9895:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    9899:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    989d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    98a1:	48 89 d6             	mov    %rdx,%rsi
    98a4:	48 89 c7             	mov    %rax,%rdi
    98a7:	e8 1a 07 00 00       	call   9fc6 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP23VkQueueFamilyPropertiesmEET_S4_T0_>
    }
    98ac:	c9                   	leave
    98ad:	c3                   	ret

00000000000098ae <_ZNSt12_Destroy_auxILb1EE9__destroyIP23VkQueueFamilyPropertiesEEvT_S4_>:
    98ae:	55                   	push   %rbp
    98af:	48 89 e5             	mov    %rsp,%rbp
    98b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    98b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    98ba:	90                   	nop
    98bb:	5d                   	pop    %rbp
    98bc:	c3                   	ret
    98bd:	90                   	nop

00000000000098be <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    98be:	55                   	push   %rbp
    98bf:	48 89 e5             	mov    %rsp,%rbp
    98c2:	48 83 ec 20          	sub    $0x20,%rsp
    98c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    98ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    98ce:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    98d2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    98d6:	48 89 d0             	mov    %rdx,%rax
    98d9:	48 01 c0             	add    %rax,%rax
    98dc:	48 01 d0             	add    %rdx,%rax
    98df:	48 c1 e0 03          	shl    $0x3,%rax
    98e3:	48 89 c2             	mov    %rax,%rdx
    98e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    98ea:	48 89 d6             	mov    %rdx,%rsi
    98ed:	48 89 c7             	mov    %rax,%rdi
    98f0:	e8 2b 9a ff ff       	call   3320 <_ZdlPvm@plt>
      }
    98f5:	c9                   	leave
    98f6:	c3                   	ret

00000000000098f7 <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    98f7:	55                   	push   %rbp
    98f8:	48 89 e5             	mov    %rsp,%rbp
    98fb:	48 83 ec 10          	sub    $0x10,%rsp
    98ff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    9903:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9907:	48 89 c7             	mov    %rax,%rdi
    990a:	e8 15 07 00 00       	call   a024 <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8max_sizeEv>
      }
    990f:	c9                   	leave
    9910:	c3                   	ret
    9911:	90                   	nop

0000000000009912 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    9912:	55                   	push   %rbp
    9913:	48 89 e5             	mov    %rsp,%rbp
    9916:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    991a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    991e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    9925:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9929:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9930:	00 
    9931:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9935:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    993c:	00 
	{ }
    993d:	90                   	nop
    993e:	5d                   	pop    %rbp
    993f:	c3                   	ret

0000000000009940 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    9940:	55                   	push   %rbp
    9941:	48 89 e5             	mov    %rsp,%rbp
    9944:	48 83 ec 10          	sub    $0x10,%rsp
    9948:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    994c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    9950:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    9955:	74 15                	je     996c <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_M_allocateEm+0x2c>
    9957:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    995b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    995f:	48 89 d6             	mov    %rdx,%rsi
    9962:	48 89 c7             	mov    %rax,%rdi
    9965:	e8 d4 06 00 00       	call   a03e <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE8allocateERS3_m>
    996a:	eb 05                	jmp    9971 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_M_allocateEm+0x31>
    996c:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    9971:	c9                   	leave
    9972:	c3                   	ret

0000000000009973 <_ZSt25__uninitialized_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmET_S4_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    9973:	55                   	push   %rbp
    9974:	48 89 e5             	mov    %rsp,%rbp
    9977:	48 83 ec 20          	sub    $0x20,%rsp
    997b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    997f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    9983:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    9987:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    998b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    998f:	48 89 d6             	mov    %rdx,%rsi
    9992:	48 89 c7             	mov    %rax,%rdi
    9995:	e8 ce 06 00 00       	call   a068 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmEET_S6_T0_>
    }
    999a:	c9                   	leave
    999b:	c3                   	ret

000000000000999c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt8optionalI23VkQueueFamilyPropertiesEEEvT_S6_>:
    999c:	55                   	push   %rbp
    999d:	48 89 e5             	mov    %rsp,%rbp
    99a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    99a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    99a8:	90                   	nop
    99a9:	5d                   	pop    %rbp
    99aa:	c3                   	ret

00000000000099ab <_ZSt11__addressofI23VkQueueFamilyPropertiesEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    99ab:	55                   	push   %rbp
    99ac:	48 89 e5             	mov    %rsp,%rbp
    99af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    99b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99b7:	5d                   	pop    %rbp
    99b8:	c3                   	ret

00000000000099b9 <_ZSt10_ConstructI23VkQueueFamilyPropertiesJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    99b9:	55                   	push   %rbp
    99ba:	48 89 e5             	mov    %rsp,%rbp
    99bd:	53                   	push   %rbx
    99be:	48 83 ec 18          	sub    $0x18,%rsp
    99c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    99c6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    99ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    99ce:	48 89 c6             	mov    %rax,%rsi
    99d1:	bf 18 00 00 00       	mov    $0x18,%edi
    99d6:	e8 85 a3 ff ff       	call   3d60 <_ZnwmPv>
    99db:	48 89 c3             	mov    %rax,%rbx
    99de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    99e2:	48 89 c7             	mov    %rax,%rdi
    99e5:	e8 48 e8 ff ff       	call   8232 <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    99ea:	48 89 c1             	mov    %rax,%rcx
    99ed:	48 8b 01             	mov    (%rcx),%rax
    99f0:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    99f4:	48 89 03             	mov    %rax,(%rbx)
    99f7:	48 89 53 08          	mov    %rdx,0x8(%rbx)
    99fb:	48 8b 41 10          	mov    0x10(%rcx),%rax
    99ff:	48 89 43 10          	mov    %rax,0x10(%rbx)
    }
    9a03:	90                   	nop
    9a04:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9a08:	c9                   	leave
    9a09:	c3                   	ret

0000000000009a0a <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE10deallocateEPS2_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    9a0a:	55                   	push   %rbp
    9a0b:	48 89 e5             	mov    %rsp,%rbp
    9a0e:	48 83 ec 20          	sub    $0x20,%rsp
    9a12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a16:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9a1a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    9a1e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9a22:	48 89 d0             	mov    %rdx,%rax
    9a25:	48 c1 e0 03          	shl    $0x3,%rax
    9a29:	48 29 d0             	sub    %rdx,%rax
    9a2c:	48 c1 e0 02          	shl    $0x2,%rax
    9a30:	48 89 c2             	mov    %rax,%rdx
    9a33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9a37:	48 89 d6             	mov    %rdx,%rsi
    9a3a:	48 89 c7             	mov    %rax,%rdi
    9a3d:	e8 de 98 ff ff       	call   3320 <_ZdlPvm@plt>
      }
    9a42:	c9                   	leave
    9a43:	c3                   	ret

0000000000009a44 <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    9a44:	55                   	push   %rbp
    9a45:	48 89 e5             	mov    %rsp,%rbp
    9a48:	48 83 ec 10          	sub    $0x10,%rsp
    9a4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    9a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a54:	48 89 c7             	mov    %rax,%rdi
    9a57:	e8 52 06 00 00       	call   a0ae <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE8max_sizeEv>
      }
    9a5c:	c9                   	leave
    9a5d:	c3                   	ret

0000000000009a5e <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    9a5e:	55                   	push   %rbp
    9a5f:	48 89 e5             	mov    %rsp,%rbp
    9a62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    9a66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a6a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    9a71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a75:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9a7c:	00 
    9a7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a81:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9a88:	00 
	{ }
    9a89:	90                   	nop
    9a8a:	5d                   	pop    %rbp
    9a8b:	c3                   	ret

0000000000009a8c <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    9a8c:	55                   	push   %rbp
    9a8d:	48 89 e5             	mov    %rsp,%rbp
    9a90:	48 83 ec 10          	sub    $0x10,%rsp
    9a94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    9a9c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    9aa1:	74 15                	je     9ab8 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE11_M_allocateEm+0x2c>
    9aa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9aa7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9aab:	48 89 d6             	mov    %rdx,%rsi
    9aae:	48 89 c7             	mov    %rax,%rdi
    9ab1:	e8 12 06 00 00       	call   a0c8 <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE8allocateERS1_m>
    9ab6:	eb 05                	jmp    9abd <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE11_M_allocateEm+0x31>
    9ab8:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    9abd:	c9                   	leave
    9abe:	c3                   	ret

0000000000009abf <_ZSt25__uninitialized_default_nIP18VkSurfaceFormatKHRmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    9abf:	55                   	push   %rbp
    9ac0:	48 89 e5             	mov    %rsp,%rbp
    9ac3:	48 83 ec 20          	sub    $0x20,%rsp
    9ac7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9acb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    9acf:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    9ad3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9ad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9adb:	48 89 d6             	mov    %rdx,%rsi
    9ade:	48 89 c7             	mov    %rax,%rdi
    9ae1:	e8 0c 06 00 00       	call   a0f2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP18VkSurfaceFormatKHRmEET_S4_T0_>
    }
    9ae6:	c9                   	leave
    9ae7:	c3                   	ret

0000000000009ae8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP18VkSurfaceFormatKHREEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    9ae8:	55                   	push   %rbp
    9ae9:	48 89 e5             	mov    %rsp,%rbp
    9aec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9af0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9af4:	90                   	nop
    9af5:	5d                   	pop    %rbp
    9af6:	c3                   	ret
    9af7:	90                   	nop

0000000000009af8 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    9af8:	55                   	push   %rbp
    9af9:	48 89 e5             	mov    %rsp,%rbp
    9afc:	48 83 ec 20          	sub    $0x20,%rsp
    9b00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9b04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9b08:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    9b0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b10:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    9b17:	00 
    9b18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9b1c:	48 89 d6             	mov    %rdx,%rsi
    9b1f:	48 89 c7             	mov    %rax,%rdi
    9b22:	e8 f9 97 ff ff       	call   3320 <_ZdlPvm@plt>
      }
    9b27:	c9                   	leave
    9b28:	c3                   	ret

0000000000009b29 <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    9b29:	55                   	push   %rbp
    9b2a:	48 89 e5             	mov    %rsp,%rbp
    9b2d:	48 83 ec 10          	sub    $0x10,%rsp
    9b31:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    9b35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b39:	48 89 c7             	mov    %rax,%rdi
    9b3c:	e8 0f 06 00 00       	call   a150 <_ZNKSt15__new_allocatorI16VkPresentModeKHRE8max_sizeEv>
      }
    9b41:	c9                   	leave
    9b42:	c3                   	ret
    9b43:	90                   	nop

0000000000009b44 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    9b44:	55                   	push   %rbp
    9b45:	48 89 e5             	mov    %rsp,%rbp
    9b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    9b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b50:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    9b57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b5b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9b62:	00 
    9b63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b67:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9b6e:	00 
	{ }
    9b6f:	90                   	nop
    9b70:	5d                   	pop    %rbp
    9b71:	c3                   	ret

0000000000009b72 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    9b72:	55                   	push   %rbp
    9b73:	48 89 e5             	mov    %rsp,%rbp
    9b76:	48 83 ec 10          	sub    $0x10,%rsp
    9b7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9b7e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    9b82:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    9b87:	74 15                	je     9b9e <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE11_M_allocateEm+0x2c>
    9b89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b8d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9b91:	48 89 d6             	mov    %rdx,%rsi
    9b94:	48 89 c7             	mov    %rax,%rdi
    9b97:	e8 ce 05 00 00       	call   a16a <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE8allocateERS1_m>
    9b9c:	eb 05                	jmp    9ba3 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE11_M_allocateEm+0x31>
    9b9e:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    9ba3:	c9                   	leave
    9ba4:	c3                   	ret

0000000000009ba5 <_ZSt25__uninitialized_default_nIP16VkPresentModeKHRmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    9ba5:	55                   	push   %rbp
    9ba6:	48 89 e5             	mov    %rsp,%rbp
    9ba9:	48 83 ec 20          	sub    $0x20,%rsp
    9bad:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9bb1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    9bb5:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    9bb9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bc1:	48 89 d6             	mov    %rdx,%rsi
    9bc4:	48 89 c7             	mov    %rax,%rdi
    9bc7:	e8 c8 05 00 00       	call   a194 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP16VkPresentModeKHRmEET_S4_T0_>
    }
    9bcc:	c9                   	leave
    9bcd:	c3                   	ret

0000000000009bce <_ZNSt12_Destroy_auxILb1EE9__destroyIP16VkPresentModeKHREEvT_S4_>:
    9bce:	55                   	push   %rbp
    9bcf:	48 89 e5             	mov    %rsp,%rbp
    9bd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9bd6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9bda:	90                   	nop
    9bdb:	5d                   	pop    %rbp
    9bdc:	c3                   	ret
    9bdd:	90                   	nop

0000000000009bde <_ZNSt15__new_allocatorI16VkPresentModeKHRE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    9bde:	55                   	push   %rbp
    9bdf:	48 89 e5             	mov    %rsp,%rbp
    9be2:	48 83 ec 20          	sub    $0x20,%rsp
    9be6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9bea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9bee:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    9bf2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bf6:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    9bfd:	00 
    9bfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9c02:	48 89 d6             	mov    %rdx,%rsi
    9c05:	48 89 c7             	mov    %rax,%rdi
    9c08:	e8 13 97 ff ff       	call   3320 <_ZdlPvm@plt>
      }
    9c0d:	c9                   	leave
    9c0e:	c3                   	ret

0000000000009c0f <_ZNSt16allocator_traitsISaIP9VkImage_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    9c0f:	55                   	push   %rbp
    9c10:	48 89 e5             	mov    %rsp,%rbp
    9c13:	48 83 ec 10          	sub    $0x10,%rsp
    9c17:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    9c1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c1f:	48 89 c7             	mov    %rax,%rdi
    9c22:	e8 cb 05 00 00       	call   a1f2 <_ZNKSt15__new_allocatorIP9VkImage_TE8max_sizeEv>
      }
    9c27:	c9                   	leave
    9c28:	c3                   	ret
    9c29:	90                   	nop

0000000000009c2a <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    9c2a:	55                   	push   %rbp
    9c2b:	48 89 e5             	mov    %rsp,%rbp
    9c2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    9c32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c36:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    9c3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c41:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9c48:	00 
    9c49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c4d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9c54:	00 
	{ }
    9c55:	90                   	nop
    9c56:	5d                   	pop    %rbp
    9c57:	c3                   	ret

0000000000009c58 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    9c58:	55                   	push   %rbp
    9c59:	48 89 e5             	mov    %rsp,%rbp
    9c5c:	48 83 ec 10          	sub    $0x10,%rsp
    9c60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9c64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    9c68:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    9c6d:	74 15                	je     9c84 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE11_M_allocateEm+0x2c>
    9c6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c73:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9c77:	48 89 d6             	mov    %rdx,%rsi
    9c7a:	48 89 c7             	mov    %rax,%rdi
    9c7d:	e8 8a 05 00 00       	call   a20c <_ZNSt16allocator_traitsISaIP9VkImage_TEE8allocateERS2_m>
    9c82:	eb 05                	jmp    9c89 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE11_M_allocateEm+0x31>
    9c84:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    9c89:	c9                   	leave
    9c8a:	c3                   	ret

0000000000009c8b <_ZSt25__uninitialized_default_nIPP9VkImage_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    9c8b:	55                   	push   %rbp
    9c8c:	48 89 e5             	mov    %rsp,%rbp
    9c8f:	48 83 ec 20          	sub    $0x20,%rsp
    9c93:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9c97:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    9c9b:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    9c9f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9ca3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ca7:	48 89 d6             	mov    %rdx,%rsi
    9caa:	48 89 c7             	mov    %rax,%rdi
    9cad:	e8 84 05 00 00       	call   a236 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP9VkImage_TmEET_S5_T0_>
    }
    9cb2:	c9                   	leave
    9cb3:	c3                   	ret

0000000000009cb4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9VkImage_TEEvT_S5_>:
    9cb4:	55                   	push   %rbp
    9cb5:	48 89 e5             	mov    %rsp,%rbp
    9cb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9cbc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9cc0:	90                   	nop
    9cc1:	5d                   	pop    %rbp
    9cc2:	c3                   	ret
    9cc3:	90                   	nop

0000000000009cc4 <_ZNSt15__new_allocatorIP9VkImage_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    9cc4:	55                   	push   %rbp
    9cc5:	48 89 e5             	mov    %rsp,%rbp
    9cc8:	48 83 ec 20          	sub    $0x20,%rsp
    9ccc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9cd0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9cd4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    9cd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9cdc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    9ce3:	00 
    9ce4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9ce8:	48 89 d6             	mov    %rdx,%rsi
    9ceb:	48 89 c7             	mov    %rax,%rdi
    9cee:	e8 2d 96 ff ff       	call   3320 <_ZdlPvm@plt>
      }
    9cf3:	c9                   	leave
    9cf4:	c3                   	ret
    9cf5:	90                   	nop

0000000000009cf6 <_ZNKSt15__new_allocatorI17VkLayerPropertiesE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    9cf6:	55                   	push   %rbp
    9cf7:	48 89 e5             	mov    %rsp,%rbp
    9cfa:	48 83 ec 10          	sub    $0x10,%rsp
    9cfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    9d02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d06:	48 89 c7             	mov    %rax,%rdi
    9d09:	e8 86 05 00 00       	call   a294 <_ZNKSt15__new_allocatorI17VkLayerPropertiesE11_M_max_sizeEv>
    9d0e:	c9                   	leave
    9d0f:	c3                   	ret

0000000000009d10 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    9d10:	55                   	push   %rbp
    9d11:	48 89 e5             	mov    %rsp,%rbp
    9d14:	48 83 ec 10          	sub    $0x10,%rsp
    9d18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9d1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    9d20:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9d24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d28:	ba 00 00 00 00       	mov    $0x0,%edx
    9d2d:	48 89 ce             	mov    %rcx,%rsi
    9d30:	48 89 c7             	mov    %rax,%rdi
    9d33:	e8 70 05 00 00       	call   a2a8 <_ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv>
    9d38:	c9                   	leave
    9d39:	c3                   	ret

0000000000009d3a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP17VkLayerPropertiesmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    9d3a:	55                   	push   %rbp
    9d3b:	48 89 e5             	mov    %rsp,%rbp
    9d3e:	48 83 ec 20          	sub    $0x20,%rsp
    9d42:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9d46:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    9d4a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    9d4f:	74 43                	je     9d94 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP17VkLayerPropertiesmEET_S4_T0_+0x5a>
		= std::__addressof(*__first);
    9d51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d55:	48 89 c7             	mov    %rax,%rdi
    9d58:	e8 b6 05 00 00       	call   a313 <_ZSt11__addressofI17VkLayerPropertiesEPT_RS1_>
    9d5d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    9d61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d65:	48 89 c7             	mov    %rax,%rdi
    9d68:	e8 b4 05 00 00       	call   a321 <_ZSt10_ConstructI17VkLayerPropertiesJEEvPT_DpOT0_>
	      ++__first;
    9d6d:	48 81 45 e8 08 02 00 	addq   $0x208,-0x18(%rbp)
    9d74:	00 
	      __first = std::fill_n(__first, __n - 1, *__val);
    9d75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9d79:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    9d7d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9d81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d85:	48 89 ce             	mov    %rcx,%rsi
    9d88:	48 89 c7             	mov    %rax,%rdi
    9d8b:	e8 eb 05 00 00       	call   a37b <_ZSt6fill_nIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_>
    9d90:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    9d94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    9d98:	c9                   	leave
    9d99:	c3                   	ret

0000000000009d9a <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    9d9a:	55                   	push   %rbp
    9d9b:	48 89 e5             	mov    %rsp,%rbp
    9d9e:	48 83 ec 10          	sub    $0x10,%rsp
    9da2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    9da6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9daa:	48 89 c7             	mov    %rax,%rdi
    9dad:	e8 0e 06 00 00       	call   a3c0 <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE11_M_max_sizeEv>
    9db2:	c9                   	leave
    9db3:	c3                   	ret

0000000000009db4 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    9db4:	55                   	push   %rbp
    9db5:	48 89 e5             	mov    %rsp,%rbp
    9db8:	48 83 ec 10          	sub    $0x10,%rsp
    9dbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9dc0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    9dc4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9dc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9dcc:	ba 00 00 00 00       	mov    $0x0,%edx
    9dd1:	48 89 ce             	mov    %rcx,%rsi
    9dd4:	48 89 c7             	mov    %rax,%rdi
    9dd7:	e8 f8 05 00 00       	call   a3d4 <_ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv>
    9ddc:	c9                   	leave
    9ddd:	c3                   	ret

0000000000009dde <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP21VkExtensionPropertiesmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    9dde:	55                   	push   %rbp
    9ddf:	48 89 e5             	mov    %rsp,%rbp
    9de2:	48 83 ec 20          	sub    $0x20,%rsp
    9de6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9dea:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    9dee:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    9df3:	74 43                	je     9e38 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP21VkExtensionPropertiesmEET_S4_T0_+0x5a>
		= std::__addressof(*__first);
    9df5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9df9:	48 89 c7             	mov    %rax,%rdi
    9dfc:	e8 3e 06 00 00       	call   a43f <_ZSt11__addressofI21VkExtensionPropertiesEPT_RS1_>
    9e01:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    9e05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e09:	48 89 c7             	mov    %rax,%rdi
    9e0c:	e8 3c 06 00 00       	call   a44d <_ZSt10_ConstructI21VkExtensionPropertiesJEEvPT_DpOT0_>
	      ++__first;
    9e11:	48 81 45 e8 04 01 00 	addq   $0x104,-0x18(%rbp)
    9e18:	00 
	      __first = std::fill_n(__first, __n - 1, *__val);
    9e19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9e1d:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    9e21:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9e25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e29:	48 89 ce             	mov    %rcx,%rsi
    9e2c:	48 89 c7             	mov    %rax,%rdi
    9e2f:	e8 73 06 00 00       	call   a4a7 <_ZSt6fill_nIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_>
    9e34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    9e38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    9e3c:	c9                   	leave
    9e3d:	c3                   	ret

0000000000009e3e <_ZNKSt15__new_allocatorIPKcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    9e3e:	55                   	push   %rbp
    9e3f:	48 89 e5             	mov    %rsp,%rbp
    9e42:	48 83 ec 10          	sub    $0x10,%rsp
    9e46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    9e4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e4e:	48 89 c7             	mov    %rax,%rdi
    9e51:	e8 96 06 00 00       	call   a4ec <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>
    9e56:	c9                   	leave
    9e57:	c3                   	ret

0000000000009e58 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
    9e58:	55                   	push   %rbp
    9e59:	48 89 e5             	mov    %rsp,%rbp
    9e5c:	48 83 ec 10          	sub    $0x10,%rsp
    9e60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9e64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    9e68:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9e6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e70:	ba 00 00 00 00       	mov    $0x0,%edx
    9e75:	48 89 ce             	mov    %rcx,%rsi
    9e78:	48 89 c7             	mov    %rax,%rdi
    9e7b:	e8 80 06 00 00       	call   a500 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>
    9e80:	c9                   	leave
    9e81:	c3                   	ret

0000000000009e82 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    9e82:	55                   	push   %rbp
    9e83:	48 89 e5             	mov    %rsp,%rbp
    9e86:	48 83 ec 20          	sub    $0x20,%rsp
    9e8a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9e8e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    9e92:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    9e97:	74 40                	je     9ed9 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
    9e99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e9d:	48 89 c7             	mov    %rax,%rdi
    9ea0:	e8 bc 06 00 00       	call   a561 <_ZSt11__addressofIPKcEPT_RS2_>
    9ea5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    9ea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ead:	48 89 c7             	mov    %rax,%rdi
    9eb0:	e8 ba 06 00 00       	call   a56f <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>
	      ++__first;
    9eb5:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    9eba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9ebe:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    9ec2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9ec6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9eca:	48 89 ce             	mov    %rcx,%rsi
    9ecd:	48 89 c7             	mov    %rax,%rdi
    9ed0:	e8 c1 06 00 00       	call   a596 <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>
    9ed5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    9ed9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    9edd:	c9                   	leave
    9ede:	c3                   	ret
    9edf:	90                   	nop

0000000000009ee0 <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    9ee0:	55                   	push   %rbp
    9ee1:	48 89 e5             	mov    %rsp,%rbp
    9ee4:	48 83 ec 10          	sub    $0x10,%rsp
    9ee8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    9eec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ef0:	48 89 c7             	mov    %rax,%rdi
    9ef3:	e8 e2 06 00 00       	call   a5da <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>
    9ef8:	c9                   	leave
    9ef9:	c3                   	ret

0000000000009efa <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
    9efa:	55                   	push   %rbp
    9efb:	48 89 e5             	mov    %rsp,%rbp
    9efe:	48 83 ec 10          	sub    $0x10,%rsp
    9f02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9f06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    9f0a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9f0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9f12:	ba 00 00 00 00       	mov    $0x0,%edx
    9f17:	48 89 ce             	mov    %rcx,%rsi
    9f1a:	48 89 c7             	mov    %rax,%rdi
    9f1d:	e8 cc 06 00 00       	call   a5ee <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>
    9f22:	c9                   	leave
    9f23:	c3                   	ret

0000000000009f24 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    9f24:	55                   	push   %rbp
    9f25:	48 89 e5             	mov    %rsp,%rbp
    9f28:	48 83 ec 20          	sub    $0x20,%rsp
    9f2c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9f30:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    9f34:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    9f39:	74 40                	je     9f7b <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
    9f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f3f:	48 89 c7             	mov    %rax,%rdi
    9f42:	e8 08 07 00 00       	call   a64f <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
    9f47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    9f4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9f4f:	48 89 c7             	mov    %rax,%rdi
    9f52:	e8 06 07 00 00       	call   a65d <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>
	      ++__first;
    9f57:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    9f5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f60:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    9f64:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9f68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f6c:	48 89 ce             	mov    %rcx,%rsi
    9f6f:	48 89 c7             	mov    %rax,%rdi
    9f72:	e8 0d 07 00 00       	call   a684 <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>
    9f77:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    9f7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    9f7f:	c9                   	leave
    9f80:	c3                   	ret
    9f81:	90                   	nop

0000000000009f82 <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    9f82:	55                   	push   %rbp
    9f83:	48 89 e5             	mov    %rsp,%rbp
    9f86:	48 83 ec 10          	sub    $0x10,%rsp
    9f8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    9f8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9f92:	48 89 c7             	mov    %rax,%rdi
    9f95:	e8 2e 07 00 00       	call   a6c8 <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE11_M_max_sizeEv>
    9f9a:	c9                   	leave
    9f9b:	c3                   	ret

0000000000009f9c <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    9f9c:	55                   	push   %rbp
    9f9d:	48 89 e5             	mov    %rsp,%rbp
    9fa0:	48 83 ec 10          	sub    $0x10,%rsp
    9fa4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9fa8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    9fac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9fb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9fb4:	ba 00 00 00 00       	mov    $0x0,%edx
    9fb9:	48 89 ce             	mov    %rcx,%rsi
    9fbc:	48 89 c7             	mov    %rax,%rdi
    9fbf:	e8 18 07 00 00       	call   a6dc <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv>
    9fc4:	c9                   	leave
    9fc5:	c3                   	ret

0000000000009fc6 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP23VkQueueFamilyPropertiesmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    9fc6:	55                   	push   %rbp
    9fc7:	48 89 e5             	mov    %rsp,%rbp
    9fca:	48 83 ec 20          	sub    $0x20,%rsp
    9fce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9fd2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    9fd6:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    9fdb:	74 40                	je     a01d <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP23VkQueueFamilyPropertiesmEET_S4_T0_+0x57>
		= std::__addressof(*__first);
    9fdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fe1:	48 89 c7             	mov    %rax,%rdi
    9fe4:	e8 c2 f9 ff ff       	call   99ab <_ZSt11__addressofI23VkQueueFamilyPropertiesEPT_RS1_>
    9fe9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    9fed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ff1:	48 89 c7             	mov    %rax,%rdi
    9ff4:	e8 4d 07 00 00       	call   a746 <_ZSt10_ConstructI23VkQueueFamilyPropertiesJEEvPT_DpOT0_>
	      ++__first;
    9ff9:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    9ffe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a002:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    a006:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a00a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a00e:	48 89 ce             	mov    %rcx,%rsi
    a011:	48 89 c7             	mov    %rax,%rdi
    a014:	e8 76 07 00 00       	call   a78f <_ZSt6fill_nIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_>
    a019:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    a01d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    a021:	c9                   	leave
    a022:	c3                   	ret
    a023:	90                   	nop

000000000000a024 <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    a024:	55                   	push   %rbp
    a025:	48 89 e5             	mov    %rsp,%rbp
    a028:	48 83 ec 10          	sub    $0x10,%rsp
    a02c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    a030:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a034:	48 89 c7             	mov    %rax,%rdi
    a037:	e8 98 07 00 00       	call   a7d4 <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE11_M_max_sizeEv>
    a03c:	c9                   	leave
    a03d:	c3                   	ret

000000000000a03e <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE8allocateERS3_m>:
      allocate(allocator_type& __a, size_type __n)
    a03e:	55                   	push   %rbp
    a03f:	48 89 e5             	mov    %rsp,%rbp
    a042:	48 83 ec 10          	sub    $0x10,%rsp
    a046:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a04a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    a04e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a052:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a056:	ba 00 00 00 00       	mov    $0x0,%edx
    a05b:	48 89 ce             	mov    %rcx,%rsi
    a05e:	48 89 c7             	mov    %rax,%rdi
    a061:	e8 82 07 00 00       	call   a7e8 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8allocateEmPKv>
    a066:	c9                   	leave
    a067:	c3                   	ret

000000000000a068 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmEET_S6_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    a068:	55                   	push   %rbp
    a069:	48 89 e5             	mov    %rsp,%rbp
    a06c:	48 83 ec 20          	sub    $0x20,%rsp
    a070:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a074:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
    a078:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a07c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
    a080:	eb 1e                	jmp    a0a0 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmEET_S6_T0_+0x38>
		std::_Construct(std::__addressof(*__cur));
    a082:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a086:	48 89 c7             	mov    %rax,%rdi
    a089:	e8 c5 07 00 00       	call   a853 <_ZSt11__addressofISt8optionalI23VkQueueFamilyPropertiesEEPT_RS3_>
    a08e:	48 89 c7             	mov    %rax,%rdi
    a091:	e8 cb 07 00 00       	call   a861 <_ZSt10_ConstructISt8optionalI23VkQueueFamilyPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
    a096:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
    a09b:	48 83 45 f8 1c       	addq   $0x1c,-0x8(%rbp)
    a0a0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    a0a5:	75 db                	jne    a082 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmEET_S6_T0_+0x1a>
	      return __cur;
    a0a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
    a0ab:	c9                   	leave
    a0ac:	c3                   	ret
    a0ad:	90                   	nop

000000000000a0ae <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    a0ae:	55                   	push   %rbp
    a0af:	48 89 e5             	mov    %rsp,%rbp
    a0b2:	48 83 ec 10          	sub    $0x10,%rsp
    a0b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    a0ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0be:	48 89 c7             	mov    %rax,%rdi
    a0c1:	e8 c4 07 00 00       	call   a88a <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE11_M_max_sizeEv>
    a0c6:	c9                   	leave
    a0c7:	c3                   	ret

000000000000a0c8 <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    a0c8:	55                   	push   %rbp
    a0c9:	48 89 e5             	mov    %rsp,%rbp
    a0cc:	48 83 ec 10          	sub    $0x10,%rsp
    a0d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a0d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    a0d8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a0dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0e0:	ba 00 00 00 00       	mov    $0x0,%edx
    a0e5:	48 89 ce             	mov    %rcx,%rsi
    a0e8:	48 89 c7             	mov    %rax,%rdi
    a0eb:	e8 ae 07 00 00       	call   a89e <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv>
    a0f0:	c9                   	leave
    a0f1:	c3                   	ret

000000000000a0f2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP18VkSurfaceFormatKHRmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    a0f2:	55                   	push   %rbp
    a0f3:	48 89 e5             	mov    %rsp,%rbp
    a0f6:	48 83 ec 20          	sub    $0x20,%rsp
    a0fa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a0fe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    a102:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    a107:	74 40                	je     a149 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP18VkSurfaceFormatKHRmEET_S4_T0_+0x57>
		= std::__addressof(*__first);
    a109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a10d:	48 89 c7             	mov    %rax,%rdi
    a110:	e8 ea 07 00 00       	call   a8ff <_ZSt11__addressofI18VkSurfaceFormatKHREPT_RS1_>
    a115:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    a119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a11d:	48 89 c7             	mov    %rax,%rdi
    a120:	e8 e8 07 00 00       	call   a90d <_ZSt10_ConstructI18VkSurfaceFormatKHRJEEvPT_DpOT0_>
	      ++__first;
    a125:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    a12a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a12e:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    a132:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a13a:	48 89 ce             	mov    %rcx,%rsi
    a13d:	48 89 c7             	mov    %rax,%rdi
    a140:	e8 f5 07 00 00       	call   a93a <_ZSt6fill_nIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_>
    a145:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    a149:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    a14d:	c9                   	leave
    a14e:	c3                   	ret
    a14f:	90                   	nop

000000000000a150 <_ZNKSt15__new_allocatorI16VkPresentModeKHRE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    a150:	55                   	push   %rbp
    a151:	48 89 e5             	mov    %rsp,%rbp
    a154:	48 83 ec 10          	sub    $0x10,%rsp
    a158:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    a15c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a160:	48 89 c7             	mov    %rax,%rdi
    a163:	e8 16 08 00 00       	call   a97e <_ZNKSt15__new_allocatorI16VkPresentModeKHRE11_M_max_sizeEv>
    a168:	c9                   	leave
    a169:	c3                   	ret

000000000000a16a <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    a16a:	55                   	push   %rbp
    a16b:	48 89 e5             	mov    %rsp,%rbp
    a16e:	48 83 ec 10          	sub    $0x10,%rsp
    a172:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a176:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    a17a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a17e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a182:	ba 00 00 00 00       	mov    $0x0,%edx
    a187:	48 89 ce             	mov    %rcx,%rsi
    a18a:	48 89 c7             	mov    %rax,%rdi
    a18d:	e8 00 08 00 00       	call   a992 <_ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv>
    a192:	c9                   	leave
    a193:	c3                   	ret

000000000000a194 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP16VkPresentModeKHRmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    a194:	55                   	push   %rbp
    a195:	48 89 e5             	mov    %rsp,%rbp
    a198:	48 83 ec 20          	sub    $0x20,%rsp
    a19c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a1a0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    a1a4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    a1a9:	74 40                	je     a1eb <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP16VkPresentModeKHRmEET_S4_T0_+0x57>
		= std::__addressof(*__first);
    a1ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1af:	48 89 c7             	mov    %rax,%rdi
    a1b2:	e8 3c 08 00 00       	call   a9f3 <_ZSt11__addressofI16VkPresentModeKHREPT_RS1_>
    a1b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    a1bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1bf:	48 89 c7             	mov    %rax,%rdi
    a1c2:	e8 3a 08 00 00       	call   aa01 <_ZSt10_ConstructI16VkPresentModeKHRJEEvPT_DpOT0_>
	      ++__first;
    a1c7:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    a1cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a1d0:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    a1d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a1d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1dc:	48 89 ce             	mov    %rcx,%rsi
    a1df:	48 89 c7             	mov    %rax,%rdi
    a1e2:	e8 40 08 00 00       	call   aa27 <_ZSt6fill_nIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_>
    a1e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    a1eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    a1ef:	c9                   	leave
    a1f0:	c3                   	ret
    a1f1:	90                   	nop

000000000000a1f2 <_ZNKSt15__new_allocatorIP9VkImage_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    a1f2:	55                   	push   %rbp
    a1f3:	48 89 e5             	mov    %rsp,%rbp
    a1f6:	48 83 ec 10          	sub    $0x10,%rsp
    a1fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    a1fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a202:	48 89 c7             	mov    %rax,%rdi
    a205:	e8 62 08 00 00       	call   aa6c <_ZNKSt15__new_allocatorIP9VkImage_TE11_M_max_sizeEv>
    a20a:	c9                   	leave
    a20b:	c3                   	ret

000000000000a20c <_ZNSt16allocator_traitsISaIP9VkImage_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
    a20c:	55                   	push   %rbp
    a20d:	48 89 e5             	mov    %rsp,%rbp
    a210:	48 83 ec 10          	sub    $0x10,%rsp
    a214:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a218:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    a21c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a220:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a224:	ba 00 00 00 00       	mov    $0x0,%edx
    a229:	48 89 ce             	mov    %rcx,%rsi
    a22c:	48 89 c7             	mov    %rax,%rdi
    a22f:	e8 4c 08 00 00       	call   aa80 <_ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv>
    a234:	c9                   	leave
    a235:	c3                   	ret

000000000000a236 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP9VkImage_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    a236:	55                   	push   %rbp
    a237:	48 89 e5             	mov    %rsp,%rbp
    a23a:	48 83 ec 20          	sub    $0x20,%rsp
    a23e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a242:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    a246:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    a24b:	74 40                	je     a28d <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP9VkImage_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
    a24d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a251:	48 89 c7             	mov    %rax,%rdi
    a254:	e8 88 08 00 00       	call   aae1 <_ZSt11__addressofIP9VkImage_TEPT_RS2_>
    a259:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    a25d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a261:	48 89 c7             	mov    %rax,%rdi
    a264:	e8 86 08 00 00       	call   aaef <_ZSt10_ConstructIP9VkImage_TJEEvPT_DpOT0_>
	      ++__first;
    a269:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    a26e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a272:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    a276:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a27a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a27e:	48 89 ce             	mov    %rcx,%rsi
    a281:	48 89 c7             	mov    %rax,%rdi
    a284:	e8 8d 08 00 00       	call   ab16 <_ZSt6fill_nIPP9VkImage_TmS1_ET_S3_T0_RKT1_>
    a289:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    a28d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    a291:	c9                   	leave
    a292:	c3                   	ret
    a293:	90                   	nop

000000000000a294 <_ZNKSt15__new_allocatorI17VkLayerPropertiesE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    a294:	55                   	push   %rbp
    a295:	48 89 e5             	mov    %rsp,%rbp
    a298:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    a29c:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
    a2a3:	03 3f 00 
      }
    a2a6:	5d                   	pop    %rbp
    a2a7:	c3                   	ret

000000000000a2a8 <_ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    a2a8:	55                   	push   %rbp
    a2a9:	48 89 e5             	mov    %rsp,%rbp
    a2ac:	48 83 ec 20          	sub    $0x20,%rsp
    a2b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a2b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a2b8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    a2bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a2c0:	48 89 c7             	mov    %rax,%rdi
    a2c3:	e8 cc ff ff ff       	call   a294 <_ZNKSt15__new_allocatorI17VkLayerPropertiesE11_M_max_sizeEv>
    a2c8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a2cc:	0f 92 c0             	setb   %al
    a2cf:	0f b6 c0             	movzbl %al,%eax
    a2d2:	48 85 c0             	test   %rax,%rax
    a2d5:	0f 95 c0             	setne  %al
    a2d8:	84 c0                	test   %al,%al
    a2da:	74 1a                	je     a2f6 <_ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    a2dc:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
    a2e3:	07 7e 00 
    a2e6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a2ea:	73 05                	jae    a2f1 <_ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    a2ec:	e8 3f 8f ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    a2f1:	e8 ca 8d ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    a2f6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a2fa:	48 89 d0             	mov    %rdx,%rax
    a2fd:	48 c1 e0 06          	shl    $0x6,%rax
    a301:	48 01 d0             	add    %rdx,%rax
    a304:	48 c1 e0 03          	shl    $0x3,%rax
    a308:	48 89 c7             	mov    %rax,%rdi
    a30b:	e8 00 90 ff ff       	call   3310 <_Znwm@plt>
    a310:	90                   	nop
      }
    a311:	c9                   	leave
    a312:	c3                   	ret

000000000000a313 <_ZSt11__addressofI17VkLayerPropertiesEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    a313:	55                   	push   %rbp
    a314:	48 89 e5             	mov    %rsp,%rbp
    a317:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    a31b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a31f:	5d                   	pop    %rbp
    a320:	c3                   	ret

000000000000a321 <_ZSt10_ConstructI17VkLayerPropertiesJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    a321:	55                   	push   %rbp
    a322:	48 89 e5             	mov    %rsp,%rbp
    a325:	48 83 ec 10          	sub    $0x10,%rsp
    a329:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    a32d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a331:	48 89 c6             	mov    %rax,%rsi
    a334:	bf 08 02 00 00       	mov    $0x208,%edi
    a339:	e8 22 9a ff ff       	call   3d60 <_ZnwmPv>
    a33e:	b9 08 02 00 00       	mov    $0x208,%ecx
    a343:	be 00 00 00 00       	mov    $0x0,%esi
    a348:	48 89 30             	mov    %rsi,(%rax)
    a34b:	89 ca                	mov    %ecx,%edx
    a34d:	48 01 c2             	add    %rax,%rdx
    a350:	48 83 c2 08          	add    $0x8,%rdx
    a354:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
    a358:	48 8d 50 08          	lea    0x8(%rax),%rdx
    a35c:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
    a360:	48 29 d0             	sub    %rdx,%rax
    a363:	01 c1                	add    %eax,%ecx
    a365:	83 e1 f8             	and    $0xfffffff8,%ecx
    a368:	89 c8                	mov    %ecx,%eax
    a36a:	c1 e8 03             	shr    $0x3,%eax
    a36d:	89 c1                	mov    %eax,%ecx
    a36f:	48 89 d7             	mov    %rdx,%rdi
    a372:	48 89 f0             	mov    %rsi,%rax
    a375:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    }
    a378:	90                   	nop
    a379:	c9                   	leave
    a37a:	c3                   	ret

000000000000a37b <_ZSt6fill_nIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    a37b:	55                   	push   %rbp
    a37c:	48 89 e5             	mov    %rsp,%rbp
    a37f:	48 83 ec 20          	sub    $0x20,%rsp
    a383:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a387:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a38b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    a38f:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    a393:	48 89 c7             	mov    %rax,%rdi
    a396:	e8 bf 07 00 00       	call   ab5a <_ZSt19__iterator_categoryIP17VkLayerPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    a39b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a39f:	48 89 c7             	mov    %rax,%rdi
    a3a2:	e8 cb 99 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    a3a7:	48 89 c1             	mov    %rax,%rcx
    a3aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3ae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a3b2:	48 89 ce             	mov    %rcx,%rsi
    a3b5:	48 89 c7             	mov    %rax,%rdi
    a3b8:	e8 a8 07 00 00       	call   ab65 <_ZSt10__fill_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    a3bd:	c9                   	leave
    a3be:	c3                   	ret
    a3bf:	90                   	nop

000000000000a3c0 <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    a3c0:	55                   	push   %rbp
    a3c1:	48 89 e5             	mov    %rsp,%rbp
    a3c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    a3c8:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
    a3cf:	07 7e 00 
      }
    a3d2:	5d                   	pop    %rbp
    a3d3:	c3                   	ret

000000000000a3d4 <_ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    a3d4:	55                   	push   %rbp
    a3d5:	48 89 e5             	mov    %rsp,%rbp
    a3d8:	48 83 ec 20          	sub    $0x20,%rsp
    a3dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a3e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a3e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    a3e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3ec:	48 89 c7             	mov    %rax,%rdi
    a3ef:	e8 cc ff ff ff       	call   a3c0 <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE11_M_max_sizeEv>
    a3f4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a3f8:	0f 92 c0             	setb   %al
    a3fb:	0f b6 c0             	movzbl %al,%eax
    a3fe:	48 85 c0             	test   %rax,%rax
    a401:	0f 95 c0             	setne  %al
    a404:	84 c0                	test   %al,%al
    a406:	74 1a                	je     a422 <_ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    a408:	48 b8 fc c0 0f fc c0 	movabs $0xfc0fc0fc0fc0fc,%rax
    a40f:	0f fc 00 
    a412:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a416:	73 05                	jae    a41d <_ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    a418:	e8 13 8e ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    a41d:	e8 9e 8c ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    a422:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a426:	48 89 d0             	mov    %rdx,%rax
    a429:	48 c1 e0 06          	shl    $0x6,%rax
    a42d:	48 01 d0             	add    %rdx,%rax
    a430:	48 c1 e0 02          	shl    $0x2,%rax
    a434:	48 89 c7             	mov    %rax,%rdi
    a437:	e8 d4 8e ff ff       	call   3310 <_Znwm@plt>
    a43c:	90                   	nop
      }
    a43d:	c9                   	leave
    a43e:	c3                   	ret

000000000000a43f <_ZSt11__addressofI21VkExtensionPropertiesEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    a43f:	55                   	push   %rbp
    a440:	48 89 e5             	mov    %rsp,%rbp
    a443:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    a447:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a44b:	5d                   	pop    %rbp
    a44c:	c3                   	ret

000000000000a44d <_ZSt10_ConstructI21VkExtensionPropertiesJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    a44d:	55                   	push   %rbp
    a44e:	48 89 e5             	mov    %rsp,%rbp
    a451:	48 83 ec 10          	sub    $0x10,%rsp
    a455:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    a459:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a45d:	48 89 c6             	mov    %rax,%rsi
    a460:	bf 04 01 00 00       	mov    $0x104,%edi
    a465:	e8 f6 98 ff ff       	call   3d60 <_ZnwmPv>
    a46a:	b9 04 01 00 00       	mov    $0x104,%ecx
    a46f:	be 00 00 00 00       	mov    $0x0,%esi
    a474:	48 89 30             	mov    %rsi,(%rax)
    a477:	89 ca                	mov    %ecx,%edx
    a479:	48 01 c2             	add    %rax,%rdx
    a47c:	48 83 c2 08          	add    $0x8,%rdx
    a480:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
    a484:	48 8d 50 08          	lea    0x8(%rax),%rdx
    a488:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
    a48c:	48 29 d0             	sub    %rdx,%rax
    a48f:	01 c1                	add    %eax,%ecx
    a491:	83 e1 f8             	and    $0xfffffff8,%ecx
    a494:	89 c8                	mov    %ecx,%eax
    a496:	c1 e8 03             	shr    $0x3,%eax
    a499:	89 c1                	mov    %eax,%ecx
    a49b:	48 89 d7             	mov    %rdx,%rdi
    a49e:	48 89 f0             	mov    %rsi,%rax
    a4a1:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    }
    a4a4:	90                   	nop
    a4a5:	c9                   	leave
    a4a6:	c3                   	ret

000000000000a4a7 <_ZSt6fill_nIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    a4a7:	55                   	push   %rbp
    a4a8:	48 89 e5             	mov    %rsp,%rbp
    a4ab:	48 83 ec 20          	sub    $0x20,%rsp
    a4af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a4b3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a4b7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    a4bb:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    a4bf:	48 89 c7             	mov    %rax,%rdi
    a4c2:	e8 0d 07 00 00       	call   abd4 <_ZSt19__iterator_categoryIP21VkExtensionPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    a4c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a4cb:	48 89 c7             	mov    %rax,%rdi
    a4ce:	e8 9f 98 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    a4d3:	48 89 c1             	mov    %rax,%rcx
    a4d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4da:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a4de:	48 89 ce             	mov    %rcx,%rsi
    a4e1:	48 89 c7             	mov    %rax,%rdi
    a4e4:	e8 f6 06 00 00       	call   abdf <_ZSt10__fill_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    a4e9:	c9                   	leave
    a4ea:	c3                   	ret
    a4eb:	90                   	nop

000000000000a4ec <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    a4ec:	55                   	push   %rbp
    a4ed:	48 89 e5             	mov    %rsp,%rbp
    a4f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    a4f4:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    a4fb:	ff ff 0f 
      }
    a4fe:	5d                   	pop    %rbp
    a4ff:	c3                   	ret

000000000000a500 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    a500:	55                   	push   %rbp
    a501:	48 89 e5             	mov    %rsp,%rbp
    a504:	48 83 ec 20          	sub    $0x20,%rsp
    a508:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a50c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a510:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    a514:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a518:	48 89 c7             	mov    %rax,%rdi
    a51b:	e8 cc ff ff ff       	call   a4ec <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>
    a520:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a524:	0f 92 c0             	setb   %al
    a527:	0f b6 c0             	movzbl %al,%eax
    a52a:	48 85 c0             	test   %rax,%rax
    a52d:	0f 95 c0             	setne  %al
    a530:	84 c0                	test   %al,%al
    a532:	74 1a                	je     a54e <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    a534:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    a53b:	ff ff 1f 
    a53e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a542:	73 05                	jae    a549 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    a544:	e8 e7 8c ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    a549:	e8 72 8b ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    a54e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a552:	48 c1 e0 03          	shl    $0x3,%rax
    a556:	48 89 c7             	mov    %rax,%rdi
    a559:	e8 b2 8d ff ff       	call   3310 <_Znwm@plt>
    a55e:	90                   	nop
      }
    a55f:	c9                   	leave
    a560:	c3                   	ret

000000000000a561 <_ZSt11__addressofIPKcEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    a561:	55                   	push   %rbp
    a562:	48 89 e5             	mov    %rsp,%rbp
    a565:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    a569:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a56d:	5d                   	pop    %rbp
    a56e:	c3                   	ret

000000000000a56f <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    a56f:	55                   	push   %rbp
    a570:	48 89 e5             	mov    %rsp,%rbp
    a573:	48 83 ec 10          	sub    $0x10,%rsp
    a577:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    a57b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a57f:	48 89 c6             	mov    %rax,%rsi
    a582:	bf 08 00 00 00       	mov    $0x8,%edi
    a587:	e8 d4 97 ff ff       	call   3d60 <_ZnwmPv>
    a58c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
    a593:	90                   	nop
    a594:	c9                   	leave
    a595:	c3                   	ret

000000000000a596 <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    a596:	55                   	push   %rbp
    a597:	48 89 e5             	mov    %rsp,%rbp
    a59a:	48 83 ec 20          	sub    $0x20,%rsp
    a59e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a5a6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    a5aa:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    a5ae:	48 89 c7             	mov    %rax,%rdi
    a5b1:	e8 98 06 00 00       	call   ac4e <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    a5b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a5ba:	48 89 c7             	mov    %rax,%rdi
    a5bd:	e8 b0 97 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    a5c2:	48 89 c1             	mov    %rax,%rcx
    a5c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a5c9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a5cd:	48 89 ce             	mov    %rcx,%rsi
    a5d0:	48 89 c7             	mov    %rax,%rdi
    a5d3:	e8 81 06 00 00       	call   ac59 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
    a5d8:	c9                   	leave
    a5d9:	c3                   	ret

000000000000a5da <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    a5da:	55                   	push   %rbp
    a5db:	48 89 e5             	mov    %rsp,%rbp
    a5de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    a5e2:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    a5e9:	ff ff 0f 
      }
    a5ec:	5d                   	pop    %rbp
    a5ed:	c3                   	ret

000000000000a5ee <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    a5ee:	55                   	push   %rbp
    a5ef:	48 89 e5             	mov    %rsp,%rbp
    a5f2:	48 83 ec 20          	sub    $0x20,%rsp
    a5f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5fa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a5fe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    a602:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a606:	48 89 c7             	mov    %rax,%rdi
    a609:	e8 cc ff ff ff       	call   a5da <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>
    a60e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a612:	0f 92 c0             	setb   %al
    a615:	0f b6 c0             	movzbl %al,%eax
    a618:	48 85 c0             	test   %rax,%rax
    a61b:	0f 95 c0             	setne  %al
    a61e:	84 c0                	test   %al,%al
    a620:	74 1a                	je     a63c <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    a622:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    a629:	ff ff 1f 
    a62c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a630:	73 05                	jae    a637 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    a632:	e8 f9 8b ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    a637:	e8 84 8a ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    a63c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a640:	48 c1 e0 03          	shl    $0x3,%rax
    a644:	48 89 c7             	mov    %rax,%rdi
    a647:	e8 c4 8c ff ff       	call   3310 <_Znwm@plt>
    a64c:	90                   	nop
      }
    a64d:	c9                   	leave
    a64e:	c3                   	ret

000000000000a64f <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    a64f:	55                   	push   %rbp
    a650:	48 89 e5             	mov    %rsp,%rbp
    a653:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    a657:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a65b:	5d                   	pop    %rbp
    a65c:	c3                   	ret

000000000000a65d <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    a65d:	55                   	push   %rbp
    a65e:	48 89 e5             	mov    %rsp,%rbp
    a661:	48 83 ec 10          	sub    $0x10,%rsp
    a665:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    a669:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a66d:	48 89 c6             	mov    %rax,%rsi
    a670:	bf 08 00 00 00       	mov    $0x8,%edi
    a675:	e8 e6 96 ff ff       	call   3d60 <_ZnwmPv>
    a67a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
    a681:	90                   	nop
    a682:	c9                   	leave
    a683:	c3                   	ret

000000000000a684 <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    a684:	55                   	push   %rbp
    a685:	48 89 e5             	mov    %rsp,%rbp
    a688:	48 83 ec 20          	sub    $0x20,%rsp
    a68c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a690:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a694:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    a698:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    a69c:	48 89 c7             	mov    %rax,%rdi
    a69f:	e8 12 06 00 00       	call   acb6 <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    a6a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6a8:	48 89 c7             	mov    %rax,%rdi
    a6ab:	e8 c2 96 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    a6b0:	48 89 c1             	mov    %rax,%rcx
    a6b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a6b7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a6bb:	48 89 ce             	mov    %rcx,%rsi
    a6be:	48 89 c7             	mov    %rax,%rdi
    a6c1:	e8 fb 05 00 00       	call   acc1 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
    a6c6:	c9                   	leave
    a6c7:	c3                   	ret

000000000000a6c8 <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    a6c8:	55                   	push   %rbp
    a6c9:	48 89 e5             	mov    %rsp,%rbp
    a6cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    a6d0:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
    a6d7:	55 55 05 
      }
    a6da:	5d                   	pop    %rbp
    a6db:	c3                   	ret

000000000000a6dc <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    a6dc:	55                   	push   %rbp
    a6dd:	48 89 e5             	mov    %rsp,%rbp
    a6e0:	48 83 ec 20          	sub    $0x20,%rsp
    a6e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a6e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a6ec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    a6f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a6f4:	48 89 c7             	mov    %rax,%rdi
    a6f7:	e8 cc ff ff ff       	call   a6c8 <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE11_M_max_sizeEv>
    a6fc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a700:	0f 92 c0             	setb   %al
    a703:	0f b6 c0             	movzbl %al,%eax
    a706:	48 85 c0             	test   %rax,%rax
    a709:	0f 95 c0             	setne  %al
    a70c:	84 c0                	test   %al,%al
    a70e:	74 1a                	je     a72a <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    a710:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
    a717:	aa aa 0a 
    a71a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a71e:	73 05                	jae    a725 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    a720:	e8 0b 8b ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    a725:	e8 96 89 ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    a72a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a72e:	48 89 d0             	mov    %rdx,%rax
    a731:	48 01 c0             	add    %rax,%rax
    a734:	48 01 d0             	add    %rdx,%rax
    a737:	48 c1 e0 03          	shl    $0x3,%rax
    a73b:	48 89 c7             	mov    %rax,%rdi
    a73e:	e8 cd 8b ff ff       	call   3310 <_Znwm@plt>
    a743:	90                   	nop
      }
    a744:	c9                   	leave
    a745:	c3                   	ret

000000000000a746 <_ZSt10_ConstructI23VkQueueFamilyPropertiesJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    a746:	55                   	push   %rbp
    a747:	48 89 e5             	mov    %rsp,%rbp
    a74a:	48 83 ec 10          	sub    $0x10,%rsp
    a74e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    a752:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a756:	48 89 c6             	mov    %rax,%rsi
    a759:	bf 18 00 00 00       	mov    $0x18,%edi
    a75e:	e8 fd 95 ff ff       	call   3d60 <_ZnwmPv>
    a763:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    a769:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    a770:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
    a777:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    a77e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
    a785:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
    }
    a78c:	90                   	nop
    a78d:	c9                   	leave
    a78e:	c3                   	ret

000000000000a78f <_ZSt6fill_nIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    a78f:	55                   	push   %rbp
    a790:	48 89 e5             	mov    %rsp,%rbp
    a793:	48 83 ec 20          	sub    $0x20,%rsp
    a797:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a79b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a79f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    a7a3:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    a7a7:	48 89 c7             	mov    %rax,%rdi
    a7aa:	e8 6f 05 00 00       	call   ad1e <_ZSt19__iterator_categoryIP23VkQueueFamilyPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    a7af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a7b3:	48 89 c7             	mov    %rax,%rdi
    a7b6:	e8 b7 95 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    a7bb:	48 89 c1             	mov    %rax,%rcx
    a7be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a7c6:	48 89 ce             	mov    %rcx,%rsi
    a7c9:	48 89 c7             	mov    %rax,%rdi
    a7cc:	e8 58 05 00 00       	call   ad29 <_ZSt10__fill_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    a7d1:	c9                   	leave
    a7d2:	c3                   	ret
    a7d3:	90                   	nop

000000000000a7d4 <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    a7d4:	55                   	push   %rbp
    a7d5:	48 89 e5             	mov    %rsp,%rbp
    a7d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    a7dc:	48 b8 92 24 49 92 24 	movabs $0x492492492492492,%rax
    a7e3:	49 92 04 
      }
    a7e6:	5d                   	pop    %rbp
    a7e7:	c3                   	ret

000000000000a7e8 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    a7e8:	55                   	push   %rbp
    a7e9:	48 89 e5             	mov    %rsp,%rbp
    a7ec:	48 83 ec 20          	sub    $0x20,%rsp
    a7f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a7f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a7f8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    a7fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a800:	48 89 c7             	mov    %rax,%rdi
    a803:	e8 cc ff ff ff       	call   a7d4 <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE11_M_max_sizeEv>
    a808:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a80c:	0f 92 c0             	setb   %al
    a80f:	0f b6 c0             	movzbl %al,%eax
    a812:	48 85 c0             	test   %rax,%rax
    a815:	0f 95 c0             	setne  %al
    a818:	84 c0                	test   %al,%al
    a81a:	74 1a                	je     a836 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    a81c:	48 b8 24 49 92 24 49 	movabs $0x924924924924924,%rax
    a823:	92 24 09 
    a826:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a82a:	73 05                	jae    a831 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    a82c:	e8 ff 89 ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    a831:	e8 8a 88 ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    a836:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a83a:	48 89 d0             	mov    %rdx,%rax
    a83d:	48 c1 e0 03          	shl    $0x3,%rax
    a841:	48 29 d0             	sub    %rdx,%rax
    a844:	48 c1 e0 02          	shl    $0x2,%rax
    a848:	48 89 c7             	mov    %rax,%rdi
    a84b:	e8 c0 8a ff ff       	call   3310 <_Znwm@plt>
    a850:	90                   	nop
      }
    a851:	c9                   	leave
    a852:	c3                   	ret

000000000000a853 <_ZSt11__addressofISt8optionalI23VkQueueFamilyPropertiesEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    a853:	55                   	push   %rbp
    a854:	48 89 e5             	mov    %rsp,%rbp
    a857:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    a85b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a85f:	5d                   	pop    %rbp
    a860:	c3                   	ret

000000000000a861 <_ZSt10_ConstructISt8optionalI23VkQueueFamilyPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    a861:	55                   	push   %rbp
    a862:	48 89 e5             	mov    %rsp,%rbp
    a865:	48 83 ec 10          	sub    $0x10,%rsp
    a869:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    a86d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a871:	48 89 c6             	mov    %rax,%rsi
    a874:	bf 1c 00 00 00       	mov    $0x1c,%edi
    a879:	e8 e2 94 ff ff       	call   3d60 <_ZnwmPv>
    a87e:	48 89 c7             	mov    %rax,%rdi
    a881:	e8 6c 05 00 00       	call   adf2 <_ZNSt8optionalI23VkQueueFamilyPropertiesEC1Ev>
    }
    a886:	90                   	nop
    a887:	c9                   	leave
    a888:	c3                   	ret
    a889:	90                   	nop

000000000000a88a <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    a88a:	55                   	push   %rbp
    a88b:	48 89 e5             	mov    %rsp,%rbp
    a88e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    a892:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    a899:	ff ff 0f 
      }
    a89c:	5d                   	pop    %rbp
    a89d:	c3                   	ret

000000000000a89e <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    a89e:	55                   	push   %rbp
    a89f:	48 89 e5             	mov    %rsp,%rbp
    a8a2:	48 83 ec 20          	sub    $0x20,%rsp
    a8a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a8aa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a8ae:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    a8b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8b6:	48 89 c7             	mov    %rax,%rdi
    a8b9:	e8 cc ff ff ff       	call   a88a <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE11_M_max_sizeEv>
    a8be:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a8c2:	0f 92 c0             	setb   %al
    a8c5:	0f b6 c0             	movzbl %al,%eax
    a8c8:	48 85 c0             	test   %rax,%rax
    a8cb:	0f 95 c0             	setne  %al
    a8ce:	84 c0                	test   %al,%al
    a8d0:	74 1a                	je     a8ec <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    a8d2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    a8d9:	ff ff 1f 
    a8dc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a8e0:	73 05                	jae    a8e7 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    a8e2:	e8 49 89 ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    a8e7:	e8 d4 87 ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    a8ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a8f0:	48 c1 e0 03          	shl    $0x3,%rax
    a8f4:	48 89 c7             	mov    %rax,%rdi
    a8f7:	e8 14 8a ff ff       	call   3310 <_Znwm@plt>
    a8fc:	90                   	nop
      }
    a8fd:	c9                   	leave
    a8fe:	c3                   	ret

000000000000a8ff <_ZSt11__addressofI18VkSurfaceFormatKHREPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    a8ff:	55                   	push   %rbp
    a900:	48 89 e5             	mov    %rsp,%rbp
    a903:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    a907:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a90b:	5d                   	pop    %rbp
    a90c:	c3                   	ret

000000000000a90d <_ZSt10_ConstructI18VkSurfaceFormatKHRJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    a90d:	55                   	push   %rbp
    a90e:	48 89 e5             	mov    %rsp,%rbp
    a911:	48 83 ec 10          	sub    $0x10,%rsp
    a915:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    a919:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a91d:	48 89 c6             	mov    %rax,%rsi
    a920:	bf 08 00 00 00       	mov    $0x8,%edi
    a925:	e8 36 94 ff ff       	call   3d60 <_ZnwmPv>
    a92a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    a930:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    }
    a937:	90                   	nop
    a938:	c9                   	leave
    a939:	c3                   	ret

000000000000a93a <_ZSt6fill_nIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    a93a:	55                   	push   %rbp
    a93b:	48 89 e5             	mov    %rsp,%rbp
    a93e:	48 83 ec 20          	sub    $0x20,%rsp
    a942:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a946:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a94a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    a94e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    a952:	48 89 c7             	mov    %rax,%rdi
    a955:	e8 b3 04 00 00       	call   ae0d <_ZSt19__iterator_categoryIP18VkSurfaceFormatKHRENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    a95a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a95e:	48 89 c7             	mov    %rax,%rdi
    a961:	e8 0c 94 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    a966:	48 89 c1             	mov    %rax,%rcx
    a969:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a96d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a971:	48 89 ce             	mov    %rcx,%rsi
    a974:	48 89 c7             	mov    %rax,%rdi
    a977:	e8 9c 04 00 00       	call   ae18 <_ZSt10__fill_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    a97c:	c9                   	leave
    a97d:	c3                   	ret

000000000000a97e <_ZNKSt15__new_allocatorI16VkPresentModeKHRE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    a97e:	55                   	push   %rbp
    a97f:	48 89 e5             	mov    %rsp,%rbp
    a982:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    a986:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    a98d:	ff ff 1f 
      }
    a990:	5d                   	pop    %rbp
    a991:	c3                   	ret

000000000000a992 <_ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    a992:	55                   	push   %rbp
    a993:	48 89 e5             	mov    %rsp,%rbp
    a996:	48 83 ec 20          	sub    $0x20,%rsp
    a99a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a99e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a9a2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    a9a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9aa:	48 89 c7             	mov    %rax,%rdi
    a9ad:	e8 cc ff ff ff       	call   a97e <_ZNKSt15__new_allocatorI16VkPresentModeKHRE11_M_max_sizeEv>
    a9b2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a9b6:	0f 92 c0             	setb   %al
    a9b9:	0f b6 c0             	movzbl %al,%eax
    a9bc:	48 85 c0             	test   %rax,%rax
    a9bf:	0f 95 c0             	setne  %al
    a9c2:	84 c0                	test   %al,%al
    a9c4:	74 1a                	je     a9e0 <_ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    a9c6:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    a9cd:	ff ff 3f 
    a9d0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a9d4:	73 05                	jae    a9db <_ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    a9d6:	e8 55 88 ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    a9db:	e8 e0 86 ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    a9e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a9e4:	48 c1 e0 02          	shl    $0x2,%rax
    a9e8:	48 89 c7             	mov    %rax,%rdi
    a9eb:	e8 20 89 ff ff       	call   3310 <_Znwm@plt>
    a9f0:	90                   	nop
      }
    a9f1:	c9                   	leave
    a9f2:	c3                   	ret

000000000000a9f3 <_ZSt11__addressofI16VkPresentModeKHREPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    a9f3:	55                   	push   %rbp
    a9f4:	48 89 e5             	mov    %rsp,%rbp
    a9f7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    a9fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9ff:	5d                   	pop    %rbp
    aa00:	c3                   	ret

000000000000aa01 <_ZSt10_ConstructI16VkPresentModeKHRJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    aa01:	55                   	push   %rbp
    aa02:	48 89 e5             	mov    %rsp,%rbp
    aa05:	48 83 ec 10          	sub    $0x10,%rsp
    aa09:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    aa0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa11:	48 89 c6             	mov    %rax,%rsi
    aa14:	bf 04 00 00 00       	mov    $0x4,%edi
    aa19:	e8 42 93 ff ff       	call   3d60 <_ZnwmPv>
    aa1e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    }
    aa24:	90                   	nop
    aa25:	c9                   	leave
    aa26:	c3                   	ret

000000000000aa27 <_ZSt6fill_nIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    aa27:	55                   	push   %rbp
    aa28:	48 89 e5             	mov    %rsp,%rbp
    aa2b:	48 83 ec 20          	sub    $0x20,%rsp
    aa2f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa33:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aa37:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    aa3b:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    aa3f:	48 89 c7             	mov    %rax,%rdi
    aa42:	e8 2e 04 00 00       	call   ae75 <_ZSt19__iterator_categoryIP16VkPresentModeKHRENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    aa47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aa4b:	48 89 c7             	mov    %rax,%rdi
    aa4e:	e8 1f 93 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    aa53:	48 89 c1             	mov    %rax,%rcx
    aa56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa5a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    aa5e:	48 89 ce             	mov    %rcx,%rsi
    aa61:	48 89 c7             	mov    %rax,%rdi
    aa64:	e8 17 04 00 00       	call   ae80 <_ZSt10__fill_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    aa69:	c9                   	leave
    aa6a:	c3                   	ret
    aa6b:	90                   	nop

000000000000aa6c <_ZNKSt15__new_allocatorIP9VkImage_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    aa6c:	55                   	push   %rbp
    aa6d:	48 89 e5             	mov    %rsp,%rbp
    aa70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    aa74:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    aa7b:	ff ff 0f 
      }
    aa7e:	5d                   	pop    %rbp
    aa7f:	c3                   	ret

000000000000aa80 <_ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    aa80:	55                   	push   %rbp
    aa81:	48 89 e5             	mov    %rsp,%rbp
    aa84:	48 83 ec 20          	sub    $0x20,%rsp
    aa88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aa90:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    aa94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa98:	48 89 c7             	mov    %rax,%rdi
    aa9b:	e8 cc ff ff ff       	call   aa6c <_ZNKSt15__new_allocatorIP9VkImage_TE11_M_max_sizeEv>
    aaa0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    aaa4:	0f 92 c0             	setb   %al
    aaa7:	0f b6 c0             	movzbl %al,%eax
    aaaa:	48 85 c0             	test   %rax,%rax
    aaad:	0f 95 c0             	setne  %al
    aab0:	84 c0                	test   %al,%al
    aab2:	74 1a                	je     aace <_ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    aab4:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    aabb:	ff ff 1f 
    aabe:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    aac2:	73 05                	jae    aac9 <_ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    aac4:	e8 67 87 ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    aac9:	e8 f2 85 ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    aace:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aad2:	48 c1 e0 03          	shl    $0x3,%rax
    aad6:	48 89 c7             	mov    %rax,%rdi
    aad9:	e8 32 88 ff ff       	call   3310 <_Znwm@plt>
    aade:	90                   	nop
      }
    aadf:	c9                   	leave
    aae0:	c3                   	ret

000000000000aae1 <_ZSt11__addressofIP9VkImage_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    aae1:	55                   	push   %rbp
    aae2:	48 89 e5             	mov    %rsp,%rbp
    aae5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    aae9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aaed:	5d                   	pop    %rbp
    aaee:	c3                   	ret

000000000000aaef <_ZSt10_ConstructIP9VkImage_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    aaef:	55                   	push   %rbp
    aaf0:	48 89 e5             	mov    %rsp,%rbp
    aaf3:	48 83 ec 10          	sub    $0x10,%rsp
    aaf7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    aafb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aaff:	48 89 c6             	mov    %rax,%rsi
    ab02:	bf 08 00 00 00       	mov    $0x8,%edi
    ab07:	e8 54 92 ff ff       	call   3d60 <_ZnwmPv>
    ab0c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
    ab13:	90                   	nop
    ab14:	c9                   	leave
    ab15:	c3                   	ret

000000000000ab16 <_ZSt6fill_nIPP9VkImage_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    ab16:	55                   	push   %rbp
    ab17:	48 89 e5             	mov    %rsp,%rbp
    ab1a:	48 83 ec 20          	sub    $0x20,%rsp
    ab1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ab22:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ab26:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    ab2a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    ab2e:	48 89 c7             	mov    %rax,%rdi
    ab31:	e8 a7 03 00 00       	call   aedd <_ZSt19__iterator_categoryIPP9VkImage_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    ab36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ab3a:	48 89 c7             	mov    %rax,%rdi
    ab3d:	e8 30 92 ff ff       	call   3d72 <_ZSt17__size_to_integerm>
    ab42:	48 89 c1             	mov    %rax,%rcx
    ab45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab49:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ab4d:	48 89 ce             	mov    %rcx,%rsi
    ab50:	48 89 c7             	mov    %rax,%rdi
    ab53:	e8 90 03 00 00       	call   aee8 <_ZSt10__fill_n_aIPP9VkImage_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
    ab58:	c9                   	leave
    ab59:	c3                   	ret

000000000000ab5a <_ZSt19__iterator_categoryIP17VkLayerPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    ab5a:	55                   	push   %rbp
    ab5b:	48 89 e5             	mov    %rsp,%rbp
    ab5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    ab62:	90                   	nop
    ab63:	5d                   	pop    %rbp
    ab64:	c3                   	ret

000000000000ab65 <_ZSt10__fill_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    ab65:	55                   	push   %rbp
    ab66:	48 89 e5             	mov    %rsp,%rbp
    ab69:	48 83 ec 20          	sub    $0x20,%rsp
    ab6d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ab71:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ab75:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    ab79:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    ab7e:	75 06                	jne    ab86 <_ZSt10__fill_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    ab80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab84:	eb 4c                	jmp    abd2 <_ZSt10__fill_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x6d>
      std::__fill_a(__first, __first + __n, __value);
    ab86:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ab8a:	48 89 d0             	mov    %rdx,%rax
    ab8d:	48 c1 e0 06          	shl    $0x6,%rax
    ab91:	48 01 d0             	add    %rdx,%rax
    ab94:	48 c1 e0 03          	shl    $0x3,%rax
    ab98:	48 89 c2             	mov    %rax,%rdx
    ab9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab9f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    aba3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    aba7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abab:	48 89 ce             	mov    %rcx,%rsi
    abae:	48 89 c7             	mov    %rax,%rdi
    abb1:	e8 8f 03 00 00       	call   af45 <_ZSt8__fill_aIP17VkLayerPropertiesS0_EvT_S2_RKT0_>
      return __first + __n;
    abb6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    abba:	48 89 d0             	mov    %rdx,%rax
    abbd:	48 c1 e0 06          	shl    $0x6,%rax
    abc1:	48 01 d0             	add    %rdx,%rax
    abc4:	48 c1 e0 03          	shl    $0x3,%rax
    abc8:	48 89 c2             	mov    %rax,%rdx
    abcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abcf:	48 01 d0             	add    %rdx,%rax
    }
    abd2:	c9                   	leave
    abd3:	c3                   	ret

000000000000abd4 <_ZSt19__iterator_categoryIP21VkExtensionPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    abd4:	55                   	push   %rbp
    abd5:	48 89 e5             	mov    %rsp,%rbp
    abd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    abdc:	90                   	nop
    abdd:	5d                   	pop    %rbp
    abde:	c3                   	ret

000000000000abdf <_ZSt10__fill_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    abdf:	55                   	push   %rbp
    abe0:	48 89 e5             	mov    %rsp,%rbp
    abe3:	48 83 ec 20          	sub    $0x20,%rsp
    abe7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    abeb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    abef:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    abf3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    abf8:	75 06                	jne    ac00 <_ZSt10__fill_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    abfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abfe:	eb 4c                	jmp    ac4c <_ZSt10__fill_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x6d>
      std::__fill_a(__first, __first + __n, __value);
    ac00:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ac04:	48 89 d0             	mov    %rdx,%rax
    ac07:	48 c1 e0 06          	shl    $0x6,%rax
    ac0b:	48 01 d0             	add    %rdx,%rax
    ac0e:	48 c1 e0 02          	shl    $0x2,%rax
    ac12:	48 89 c2             	mov    %rax,%rdx
    ac15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac19:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    ac1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ac21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac25:	48 89 ce             	mov    %rcx,%rsi
    ac28:	48 89 c7             	mov    %rax,%rdi
    ac2b:	e8 43 03 00 00       	call   af73 <_ZSt8__fill_aIP21VkExtensionPropertiesS0_EvT_S2_RKT0_>
      return __first + __n;
    ac30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ac34:	48 89 d0             	mov    %rdx,%rax
    ac37:	48 c1 e0 06          	shl    $0x6,%rax
    ac3b:	48 01 d0             	add    %rdx,%rax
    ac3e:	48 c1 e0 02          	shl    $0x2,%rax
    ac42:	48 89 c2             	mov    %rax,%rdx
    ac45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac49:	48 01 d0             	add    %rdx,%rax
    }
    ac4c:	c9                   	leave
    ac4d:	c3                   	ret

000000000000ac4e <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
    ac4e:	55                   	push   %rbp
    ac4f:	48 89 e5             	mov    %rsp,%rbp
    ac52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    ac56:	90                   	nop
    ac57:	5d                   	pop    %rbp
    ac58:	c3                   	ret

000000000000ac59 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    ac59:	55                   	push   %rbp
    ac5a:	48 89 e5             	mov    %rsp,%rbp
    ac5d:	48 83 ec 20          	sub    $0x20,%rsp
    ac61:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac65:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ac69:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    ac6d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    ac72:	75 06                	jne    ac7a <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    ac74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac78:	eb 3a                	jmp    acb4 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    ac7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ac7e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ac85:	00 
    ac86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac8a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    ac8e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ac92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac96:	48 89 ce             	mov    %rcx,%rsi
    ac99:	48 89 c7             	mov    %rax,%rdi
    ac9c:	e8 00 03 00 00       	call   afa1 <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>
      return __first + __n;
    aca1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aca5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    acac:	00 
    acad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acb1:	48 01 d0             	add    %rdx,%rax
    }
    acb4:	c9                   	leave
    acb5:	c3                   	ret

000000000000acb6 <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
    acb6:	55                   	push   %rbp
    acb7:	48 89 e5             	mov    %rsp,%rbp
    acba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    acbe:	90                   	nop
    acbf:	5d                   	pop    %rbp
    acc0:	c3                   	ret

000000000000acc1 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    acc1:	55                   	push   %rbp
    acc2:	48 89 e5             	mov    %rsp,%rbp
    acc5:	48 83 ec 20          	sub    $0x20,%rsp
    acc9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    accd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    acd1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    acd5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    acda:	75 06                	jne    ace2 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    acdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ace0:	eb 3a                	jmp    ad1c <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    ace2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ace6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    aced:	00 
    acee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acf2:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    acf6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    acfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acfe:	48 89 ce             	mov    %rcx,%rsi
    ad01:	48 89 c7             	mov    %rax,%rdi
    ad04:	e8 c6 02 00 00       	call   afcf <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>
      return __first + __n;
    ad09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ad0d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ad14:	00 
    ad15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad19:	48 01 d0             	add    %rdx,%rax
    }
    ad1c:	c9                   	leave
    ad1d:	c3                   	ret

000000000000ad1e <_ZSt19__iterator_categoryIP23VkQueueFamilyPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    ad1e:	55                   	push   %rbp
    ad1f:	48 89 e5             	mov    %rsp,%rbp
    ad22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    ad26:	90                   	nop
    ad27:	5d                   	pop    %rbp
    ad28:	c3                   	ret

000000000000ad29 <_ZSt10__fill_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    ad29:	55                   	push   %rbp
    ad2a:	48 89 e5             	mov    %rsp,%rbp
    ad2d:	48 83 ec 20          	sub    $0x20,%rsp
    ad31:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad35:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ad39:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    ad3d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    ad42:	75 06                	jne    ad4a <_ZSt10__fill_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    ad44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad48:	eb 4a                	jmp    ad94 <_ZSt10__fill_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x6b>
      std::__fill_a(__first, __first + __n, __value);
    ad4a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ad4e:	48 89 d0             	mov    %rdx,%rax
    ad51:	48 01 c0             	add    %rax,%rax
    ad54:	48 01 d0             	add    %rdx,%rax
    ad57:	48 c1 e0 03          	shl    $0x3,%rax
    ad5b:	48 89 c2             	mov    %rax,%rdx
    ad5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad62:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    ad66:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ad6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad6e:	48 89 ce             	mov    %rcx,%rsi
    ad71:	48 89 c7             	mov    %rax,%rdi
    ad74:	e8 84 02 00 00       	call   affd <_ZSt8__fill_aIP23VkQueueFamilyPropertiesS0_EvT_S2_RKT0_>
      return __first + __n;
    ad79:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ad7d:	48 89 d0             	mov    %rdx,%rax
    ad80:	48 01 c0             	add    %rax,%rax
    ad83:	48 01 d0             	add    %rdx,%rax
    ad86:	48 c1 e0 03          	shl    $0x3,%rax
    ad8a:	48 89 c2             	mov    %rax,%rdx
    ad8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad91:	48 01 d0             	add    %rdx,%rax
    }
    ad94:	c9                   	leave
    ad95:	c3                   	ret

000000000000ad96 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesEC1Ev>:
      _Optional_payload_base() = default;
    ad96:	55                   	push   %rbp
    ad97:	48 89 e5             	mov    %rsp,%rbp
    ad9a:	48 83 ec 10          	sub    $0x10,%rsp
    ad9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ada2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ada6:	48 89 c7             	mov    %rax,%rdi
    ada9:	e8 7e 02 00 00       	call   b02c <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE8_StorageIS0_Lb1EEC1Ev>
    adae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adb2:	c6 40 18 00          	movb   $0x0,0x18(%rax)
    adb6:	90                   	nop
    adb7:	c9                   	leave
    adb8:	c3                   	ret
    adb9:	90                   	nop

000000000000adba <_ZNSt17_Optional_payloadI23VkQueueFamilyPropertiesLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
    adba:	55                   	push   %rbp
    adbb:	48 89 e5             	mov    %rsp,%rbp
    adbe:	48 83 ec 10          	sub    $0x10,%rsp
    adc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    adc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adca:	48 89 c7             	mov    %rax,%rdi
    adcd:	e8 c4 ff ff ff       	call   ad96 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesEC1Ev>
    add2:	90                   	nop
    add3:	c9                   	leave
    add4:	c3                   	ret
    add5:	90                   	nop

000000000000add6 <_ZNSt14_Optional_baseI23VkQueueFamilyPropertiesLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
    add6:	55                   	push   %rbp
    add7:	48 89 e5             	mov    %rsp,%rbp
    adda:	48 83 ec 10          	sub    $0x10,%rsp
    adde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ade2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ade6:	48 89 c7             	mov    %rax,%rdi
    ade9:	e8 cc ff ff ff       	call   adba <_ZNSt17_Optional_payloadI23VkQueueFamilyPropertiesLb1ELb1ELb1EEC1Ev>
    adee:	90                   	nop
    adef:	c9                   	leave
    adf0:	c3                   	ret
    adf1:	90                   	nop

000000000000adf2 <_ZNSt8optionalI23VkQueueFamilyPropertiesEC1Ev>:
      constexpr optional() noexcept { }
    adf2:	55                   	push   %rbp
    adf3:	48 89 e5             	mov    %rsp,%rbp
    adf6:	48 83 ec 10          	sub    $0x10,%rsp
    adfa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    adfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae02:	48 89 c7             	mov    %rax,%rdi
    ae05:	e8 cc ff ff ff       	call   add6 <_ZNSt14_Optional_baseI23VkQueueFamilyPropertiesLb1ELb1EEC1Ev>
    ae0a:	90                   	nop
    ae0b:	c9                   	leave
    ae0c:	c3                   	ret

000000000000ae0d <_ZSt19__iterator_categoryIP18VkSurfaceFormatKHRENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    ae0d:	55                   	push   %rbp
    ae0e:	48 89 e5             	mov    %rsp,%rbp
    ae11:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    ae15:	90                   	nop
    ae16:	5d                   	pop    %rbp
    ae17:	c3                   	ret

000000000000ae18 <_ZSt10__fill_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    ae18:	55                   	push   %rbp
    ae19:	48 89 e5             	mov    %rsp,%rbp
    ae1c:	48 83 ec 20          	sub    $0x20,%rsp
    ae20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ae24:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ae28:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    ae2c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    ae31:	75 06                	jne    ae39 <_ZSt10__fill_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    ae33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae37:	eb 3a                	jmp    ae73 <_ZSt10__fill_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    ae39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ae3d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ae44:	00 
    ae45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae49:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    ae4d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ae51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae55:	48 89 ce             	mov    %rcx,%rsi
    ae58:	48 89 c7             	mov    %rax,%rdi
    ae5b:	e8 d7 01 00 00       	call   b037 <_ZSt8__fill_aIP18VkSurfaceFormatKHRS0_EvT_S2_RKT0_>
      return __first + __n;
    ae60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ae64:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ae6b:	00 
    ae6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae70:	48 01 d0             	add    %rdx,%rax
    }
    ae73:	c9                   	leave
    ae74:	c3                   	ret

000000000000ae75 <_ZSt19__iterator_categoryIP16VkPresentModeKHRENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    ae75:	55                   	push   %rbp
    ae76:	48 89 e5             	mov    %rsp,%rbp
    ae79:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    ae7d:	90                   	nop
    ae7e:	5d                   	pop    %rbp
    ae7f:	c3                   	ret

000000000000ae80 <_ZSt10__fill_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    ae80:	55                   	push   %rbp
    ae81:	48 89 e5             	mov    %rsp,%rbp
    ae84:	48 83 ec 20          	sub    $0x20,%rsp
    ae88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ae8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ae90:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    ae94:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    ae99:	75 06                	jne    aea1 <_ZSt10__fill_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    ae9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae9f:	eb 3a                	jmp    aedb <_ZSt10__fill_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    aea1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aea5:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    aeac:	00 
    aead:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aeb1:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    aeb5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    aeb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aebd:	48 89 ce             	mov    %rcx,%rsi
    aec0:	48 89 c7             	mov    %rax,%rdi
    aec3:	e8 9d 01 00 00       	call   b065 <_ZSt8__fill_aIP16VkPresentModeKHRS0_EvT_S2_RKT0_>
      return __first + __n;
    aec8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aecc:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    aed3:	00 
    aed4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aed8:	48 01 d0             	add    %rdx,%rax
    }
    aedb:	c9                   	leave
    aedc:	c3                   	ret

000000000000aedd <_ZSt19__iterator_categoryIPP9VkImage_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
    aedd:	55                   	push   %rbp
    aede:	48 89 e5             	mov    %rsp,%rbp
    aee1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    aee5:	90                   	nop
    aee6:	5d                   	pop    %rbp
    aee7:	c3                   	ret

000000000000aee8 <_ZSt10__fill_n_aIPP9VkImage_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    aee8:	55                   	push   %rbp
    aee9:	48 89 e5             	mov    %rsp,%rbp
    aeec:	48 83 ec 20          	sub    $0x20,%rsp
    aef0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aef4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aef8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    aefc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    af01:	75 06                	jne    af09 <_ZSt10__fill_n_aIPP9VkImage_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    af03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af07:	eb 3a                	jmp    af43 <_ZSt10__fill_n_aIPP9VkImage_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    af09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    af0d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    af14:	00 
    af15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af19:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    af1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    af21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af25:	48 89 ce             	mov    %rcx,%rsi
    af28:	48 89 c7             	mov    %rax,%rdi
    af2b:	e8 63 01 00 00       	call   b093 <_ZSt8__fill_aIPP9VkImage_TS1_EvT_S3_RKT0_>
      return __first + __n;
    af30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    af34:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    af3b:	00 
    af3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af40:	48 01 d0             	add    %rdx,%rax
    }
    af43:	c9                   	leave
    af44:	c3                   	ret

000000000000af45 <_ZSt8__fill_aIP17VkLayerPropertiesS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    af45:	55                   	push   %rbp
    af46:	48 89 e5             	mov    %rsp,%rbp
    af49:	48 83 ec 20          	sub    $0x20,%rsp
    af4d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af51:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    af55:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    af59:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    af5d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    af61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af65:	48 89 ce             	mov    %rcx,%rsi
    af68:	48 89 c7             	mov    %rax,%rdi
    af6b:	e8 51 01 00 00       	call   b0c1 <_ZSt9__fill_a1IP17VkLayerPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    af70:	90                   	nop
    af71:	c9                   	leave
    af72:	c3                   	ret

000000000000af73 <_ZSt8__fill_aIP21VkExtensionPropertiesS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    af73:	55                   	push   %rbp
    af74:	48 89 e5             	mov    %rsp,%rbp
    af77:	48 83 ec 20          	sub    $0x20,%rsp
    af7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af7f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    af83:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    af87:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    af8b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    af8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af93:	48 89 ce             	mov    %rcx,%rsi
    af96:	48 89 c7             	mov    %rax,%rdi
    af99:	e8 9b 01 00 00       	call   b139 <_ZSt9__fill_a1IP21VkExtensionPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    af9e:	90                   	nop
    af9f:	c9                   	leave
    afa0:	c3                   	ret

000000000000afa1 <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    afa1:	55                   	push   %rbp
    afa2:	48 89 e5             	mov    %rsp,%rbp
    afa5:	48 83 ec 20          	sub    $0x20,%rsp
    afa9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    afad:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    afb1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    afb5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    afb9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    afbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    afc1:	48 89 ce             	mov    %rcx,%rsi
    afc4:	48 89 c7             	mov    %rax,%rdi
    afc7:	e8 e5 01 00 00       	call   b1b1 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
    afcc:	90                   	nop
    afcd:	c9                   	leave
    afce:	c3                   	ret

000000000000afcf <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    afcf:	55                   	push   %rbp
    afd0:	48 89 e5             	mov    %rsp,%rbp
    afd3:	48 83 ec 20          	sub    $0x20,%rsp
    afd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    afdb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    afdf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    afe3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    afe7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    afeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    afef:	48 89 ce             	mov    %rcx,%rsi
    aff2:	48 89 c7             	mov    %rax,%rdi
    aff5:	e8 f2 01 00 00       	call   b1ec <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
    affa:	90                   	nop
    affb:	c9                   	leave
    affc:	c3                   	ret

000000000000affd <_ZSt8__fill_aIP23VkQueueFamilyPropertiesS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    affd:	55                   	push   %rbp
    affe:	48 89 e5             	mov    %rsp,%rbp
    b001:	48 83 ec 20          	sub    $0x20,%rsp
    b005:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b009:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b00d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    b011:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b015:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b019:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b01d:	48 89 ce             	mov    %rcx,%rsi
    b020:	48 89 c7             	mov    %rax,%rdi
    b023:	e8 ff 01 00 00       	call   b227 <_ZSt9__fill_a1IP23VkQueueFamilyPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    b028:	90                   	nop
    b029:	c9                   	leave
    b02a:	c3                   	ret
    b02b:	90                   	nop

000000000000b02c <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE8_StorageIS0_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
    b02c:	55                   	push   %rbp
    b02d:	48 89 e5             	mov    %rsp,%rbp
    b030:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b034:	90                   	nop
    b035:	5d                   	pop    %rbp
    b036:	c3                   	ret

000000000000b037 <_ZSt8__fill_aIP18VkSurfaceFormatKHRS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    b037:	55                   	push   %rbp
    b038:	48 89 e5             	mov    %rsp,%rbp
    b03b:	48 83 ec 20          	sub    $0x20,%rsp
    b03f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b043:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b047:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    b04b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b04f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b053:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b057:	48 89 ce             	mov    %rcx,%rsi
    b05a:	48 89 c7             	mov    %rax,%rdi
    b05d:	e8 08 02 00 00       	call   b26a <_ZSt9__fill_a1IP18VkSurfaceFormatKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    b062:	90                   	nop
    b063:	c9                   	leave
    b064:	c3                   	ret

000000000000b065 <_ZSt8__fill_aIP16VkPresentModeKHRS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    b065:	55                   	push   %rbp
    b066:	48 89 e5             	mov    %rsp,%rbp
    b069:	48 83 ec 20          	sub    $0x20,%rsp
    b06d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b071:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b075:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    b079:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b07d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b081:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b085:	48 89 ce             	mov    %rcx,%rsi
    b088:	48 89 c7             	mov    %rax,%rdi
    b08b:	e8 0d 02 00 00       	call   b29d <_ZSt9__fill_a1IP16VkPresentModeKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    b090:	90                   	nop
    b091:	c9                   	leave
    b092:	c3                   	ret

000000000000b093 <_ZSt8__fill_aIPP9VkImage_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    b093:	55                   	push   %rbp
    b094:	48 89 e5             	mov    %rsp,%rbp
    b097:	48 83 ec 20          	sub    $0x20,%rsp
    b09b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b09f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b0a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    b0a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b0ab:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b0af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b0b3:	48 89 ce             	mov    %rcx,%rsi
    b0b6:	48 89 c7             	mov    %rax,%rdi
    b0b9:	e8 10 02 00 00       	call   b2ce <_ZSt9__fill_a1IPP9VkImage_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
    b0be:	90                   	nop
    b0bf:	c9                   	leave
    b0c0:	c3                   	ret

000000000000b0c1 <_ZSt9__fill_a1IP17VkLayerPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    b0c1:	55                   	push   %rbp
    b0c2:	48 89 e5             	mov    %rsp,%rbp
    b0c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b0c9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b0cd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    b0d1:	eb 58                	jmp    b12b <_ZSt9__fill_a1IP17VkLayerPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x6a>
	*__first = __value;
    b0d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b0d7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b0db:	b9 08 02 00 00       	mov    $0x208,%ecx
    b0e0:	48 8b 32             	mov    (%rdx),%rsi
    b0e3:	48 89 30             	mov    %rsi,(%rax)
    b0e6:	89 ce                	mov    %ecx,%esi
    b0e8:	48 01 c6             	add    %rax,%rsi
    b0eb:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
    b0ef:	89 ce                	mov    %ecx,%esi
    b0f1:	48 01 d6             	add    %rdx,%rsi
    b0f4:	48 83 c6 08          	add    $0x8,%rsi
    b0f8:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
    b0fc:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
    b100:	48 8d 78 08          	lea    0x8(%rax),%rdi
    b104:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    b108:	48 29 f8             	sub    %rdi,%rax
    b10b:	48 29 c2             	sub    %rax,%rdx
    b10e:	01 c1                	add    %eax,%ecx
    b110:	83 e1 f8             	and    $0xfffffff8,%ecx
    b113:	89 c8                	mov    %ecx,%eax
    b115:	c1 e8 03             	shr    $0x3,%eax
    b118:	89 c0                	mov    %eax,%eax
    b11a:	48 89 d6             	mov    %rdx,%rsi
    b11d:	48 89 c1             	mov    %rax,%rcx
    b120:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      for (; __first != __last; ++__first)
    b123:	48 81 45 f8 08 02 00 	addq   $0x208,-0x8(%rbp)
    b12a:	00 
    b12b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b12f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b133:	75 9e                	jne    b0d3 <_ZSt9__fill_a1IP17VkLayerPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    b135:	90                   	nop
    b136:	90                   	nop
    b137:	5d                   	pop    %rbp
    b138:	c3                   	ret

000000000000b139 <_ZSt9__fill_a1IP21VkExtensionPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    b139:	55                   	push   %rbp
    b13a:	48 89 e5             	mov    %rsp,%rbp
    b13d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b141:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b145:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    b149:	eb 58                	jmp    b1a3 <_ZSt9__fill_a1IP21VkExtensionPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x6a>
	*__first = __value;
    b14b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b14f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b153:	b9 04 01 00 00       	mov    $0x104,%ecx
    b158:	48 8b 32             	mov    (%rdx),%rsi
    b15b:	48 89 30             	mov    %rsi,(%rax)
    b15e:	89 ce                	mov    %ecx,%esi
    b160:	48 01 c6             	add    %rax,%rsi
    b163:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
    b167:	89 ce                	mov    %ecx,%esi
    b169:	48 01 d6             	add    %rdx,%rsi
    b16c:	48 83 c6 08          	add    $0x8,%rsi
    b170:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
    b174:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
    b178:	48 8d 78 08          	lea    0x8(%rax),%rdi
    b17c:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    b180:	48 29 f8             	sub    %rdi,%rax
    b183:	48 29 c2             	sub    %rax,%rdx
    b186:	01 c1                	add    %eax,%ecx
    b188:	83 e1 f8             	and    $0xfffffff8,%ecx
    b18b:	89 c8                	mov    %ecx,%eax
    b18d:	c1 e8 03             	shr    $0x3,%eax
    b190:	89 c0                	mov    %eax,%eax
    b192:	48 89 d6             	mov    %rdx,%rsi
    b195:	48 89 c1             	mov    %rax,%rcx
    b198:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      for (; __first != __last; ++__first)
    b19b:	48 81 45 f8 04 01 00 	addq   $0x104,-0x8(%rbp)
    b1a2:	00 
    b1a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b1a7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b1ab:	75 9e                	jne    b14b <_ZSt9__fill_a1IP21VkExtensionPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    b1ad:	90                   	nop
    b1ae:	90                   	nop
    b1af:	5d                   	pop    %rbp
    b1b0:	c3                   	ret

000000000000b1b1 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    b1b1:	55                   	push   %rbp
    b1b2:	48 89 e5             	mov    %rsp,%rbp
    b1b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b1b9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b1bd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
    b1c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b1c5:	48 8b 00             	mov    (%rax),%rax
    b1c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
    b1cc:	eb 10                	jmp    b1de <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
    b1ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b1d2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b1d6:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    b1d9:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    b1de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b1e2:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    b1e6:	75 e6                	jne    b1ce <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
    b1e8:	90                   	nop
    b1e9:	90                   	nop
    b1ea:	5d                   	pop    %rbp
    b1eb:	c3                   	ret

000000000000b1ec <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    b1ec:	55                   	push   %rbp
    b1ed:	48 89 e5             	mov    %rsp,%rbp
    b1f0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b1f4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b1f8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
    b1fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b200:	48 8b 00             	mov    (%rax),%rax
    b203:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
    b207:	eb 10                	jmp    b219 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
    b209:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b20d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b211:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    b214:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    b219:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b21d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    b221:	75 e6                	jne    b209 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
    b223:	90                   	nop
    b224:	90                   	nop
    b225:	5d                   	pop    %rbp
    b226:	c3                   	ret

000000000000b227 <_ZSt9__fill_a1IP23VkQueueFamilyPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    b227:	55                   	push   %rbp
    b228:	48 89 e5             	mov    %rsp,%rbp
    b22b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b22f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b233:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    b237:	eb 23                	jmp    b25c <_ZSt9__fill_a1IP23VkQueueFamilyPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x35>
	*__first = __value;
    b239:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    b23d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    b241:	48 8b 06             	mov    (%rsi),%rax
    b244:	48 8b 56 08          	mov    0x8(%rsi),%rdx
    b248:	48 89 01             	mov    %rax,(%rcx)
    b24b:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    b24f:	48 8b 46 10          	mov    0x10(%rsi),%rax
    b253:	48 89 41 10          	mov    %rax,0x10(%rcx)
      for (; __first != __last; ++__first)
    b257:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
    b25c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b260:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b264:	75 d3                	jne    b239 <_ZSt9__fill_a1IP23VkQueueFamilyPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    b266:	90                   	nop
    b267:	90                   	nop
    b268:	5d                   	pop    %rbp
    b269:	c3                   	ret

000000000000b26a <_ZSt9__fill_a1IP18VkSurfaceFormatKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    b26a:	55                   	push   %rbp
    b26b:	48 89 e5             	mov    %rsp,%rbp
    b26e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b272:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b276:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    b27a:	eb 13                	jmp    b28f <_ZSt9__fill_a1IP18VkSurfaceFormatKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x25>
	*__first = __value;
    b27c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b280:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b284:	48 8b 12             	mov    (%rdx),%rdx
    b287:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    b28a:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
    b28f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b293:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b297:	75 e3                	jne    b27c <_ZSt9__fill_a1IP18VkSurfaceFormatKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    b299:	90                   	nop
    b29a:	90                   	nop
    b29b:	5d                   	pop    %rbp
    b29c:	c3                   	ret

000000000000b29d <_ZSt9__fill_a1IP16VkPresentModeKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    b29d:	55                   	push   %rbp
    b29e:	48 89 e5             	mov    %rsp,%rbp
    b2a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b2a5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b2a9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    b2ad:	eb 11                	jmp    b2c0 <_ZSt9__fill_a1IP16VkPresentModeKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x23>
	*__first = __value;
    b2af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b2b3:	8b 10                	mov    (%rax),%edx
    b2b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b2b9:	89 10                	mov    %edx,(%rax)
      for (; __first != __last; ++__first)
    b2bb:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
    b2c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b2c4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b2c8:	75 e5                	jne    b2af <_ZSt9__fill_a1IP16VkPresentModeKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    b2ca:	90                   	nop
    b2cb:	90                   	nop
    b2cc:	5d                   	pop    %rbp
    b2cd:	c3                   	ret

000000000000b2ce <_ZSt9__fill_a1IPP9VkImage_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    b2ce:	55                   	push   %rbp
    b2cf:	48 89 e5             	mov    %rsp,%rbp
    b2d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b2d6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b2da:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
    b2de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b2e2:	48 8b 00             	mov    (%rax),%rax
    b2e5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
    b2e9:	eb 10                	jmp    b2fb <_ZSt9__fill_a1IPP9VkImage_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
    b2eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b2ef:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b2f3:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    b2f6:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    b2fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b2ff:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    b303:	75 e6                	jne    b2eb <_ZSt9__fill_a1IPP9VkImage_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
    b305:	90                   	nop
    b306:	90                   	nop
    b307:	5d                   	pop    %rbp
    b308:	c3                   	ret

000000000000b309 <_ZN3vkh27checkValidationLayerSupportEv>:
#include "validation_layers.hpp"

namespace vkh {

bool checkValidationLayerSupport() {
    b309:	55                   	push   %rbp
    b30a:	48 89 e5             	mov    %rsp,%rbp
    b30d:	53                   	push   %rbx
    b30e:	48 83 ec 58          	sub    $0x58,%rsp
  uint32_t layerCount;
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    b312:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    b316:	be 00 00 00 00       	mov    $0x0,%esi
    b31b:	48 89 c7             	mov    %rax,%rdi
    b31e:	e8 cd 80 ff ff       	call   33f0 <vkEnumerateInstanceLayerProperties@plt>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    b323:	8b 45 c8             	mov    -0x38(%rbp),%eax
    b326:	89 c3                	mov    %eax,%ebx
    b328:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    b32c:	48 89 c7             	mov    %rax,%rdi
    b32f:	e8 ea b6 ff ff       	call   6a1e <_ZNSaI17VkLayerPropertiesEC1Ev>
    b334:	48 8d 55 cf          	lea    -0x31(%rbp),%rdx
    b338:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    b33c:	48 89 de             	mov    %rbx,%rsi
    b33f:	48 89 c7             	mov    %rax,%rdi
    b342:	e8 0f b7 ff ff       	call   6a56 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>
    b347:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    b34b:	48 89 c7             	mov    %rax,%rdi
    b34e:	e8 e7 b6 ff ff       	call   6a3a <_ZNSaI17VkLayerPropertiesED1Ev>
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    b353:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    b357:	48 89 c7             	mov    %rax,%rdi
    b35a:	e8 b1 b7 ff ff       	call   6b10 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE4dataEv>
    b35f:	48 89 c2             	mov    %rax,%rdx
    b362:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    b366:	48 89 d6             	mov    %rdx,%rsi
    b369:	48 89 c7             	mov    %rax,%rdi
    b36c:	e8 7f 80 ff ff       	call   33f0 <vkEnumerateInstanceLayerProperties@plt>

  for (const auto &layerProperties : availableLayers) {
    b371:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    b375:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b379:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b37d:	48 89 c7             	mov    %rax,%rdi
    b380:	e8 63 04 00 00       	call   b7e8 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE5beginEv>
    b385:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    b389:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b38d:	48 89 c7             	mov    %rax,%rdi
    b390:	e8 79 04 00 00       	call   b80e <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE3endEv>
    b395:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    b399:	eb 5b                	jmp    b3f6 <_ZN3vkh27checkValidationLayerSupportEv+0xed>
    b39b:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    b39f:	48 89 c7             	mov    %rax,%rdi
    b3a2:	e8 ef 04 00 00       	call   b896 <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    b3a7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (validationLayerName == layerProperties.layerName) {
    b3ab:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b3af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    b3b3:	48 89 d6             	mov    %rdx,%rsi
    b3b6:	48 89 c7             	mov    %rax,%rdi
    b3b9:	e8 f8 03 00 00       	call   b7b6 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
    b3be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b3c2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b3c6:	48 8b 3d d3 68 01 00 	mov    0x168d3(%rip),%rdi        # 21ca0 <_ZN3vkh19validationLayerNameE>
    b3cd:	48 8b 35 d4 68 01 00 	mov    0x168d4(%rip),%rsi        # 21ca8 <_ZN3vkh19validationLayerNameE+0x8>
    b3d4:	48 89 d1             	mov    %rdx,%rcx
    b3d7:	48 89 c2             	mov    %rax,%rdx
    b3da:	e8 da 04 00 00       	call   b8b9 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>
    b3df:	84 c0                	test   %al,%al
    b3e1:	74 07                	je     b3ea <_ZN3vkh27checkValidationLayerSupportEv+0xe1>
      return true;
    b3e3:	bb 01 00 00 00       	mov    $0x1,%ebx
    b3e8:	eb 28                	jmp    b412 <_ZN3vkh27checkValidationLayerSupportEv+0x109>
  for (const auto &layerProperties : availableLayers) {
    b3ea:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    b3ee:	48 89 c7             	mov    %rax,%rdi
    b3f1:	e8 7c 04 00 00       	call   b872 <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    b3f6:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    b3fa:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    b3fe:	48 89 d6             	mov    %rdx,%rsi
    b401:	48 89 c7             	mov    %rax,%rdi
    b404:	e8 2e 04 00 00       	call   b837 <_ZN9__gnu_cxxneIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    b409:	84 c0                	test   %al,%al
    b40b:	75 8e                	jne    b39b <_ZN3vkh27checkValidationLayerSupportEv+0x92>
    }
  }
  return false;
    b40d:	bb 00 00 00 00       	mov    $0x0,%ebx
}
    b412:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    b416:	48 89 c7             	mov    %rax,%rdi
    b419:	e8 ae b6 ff ff       	call   6acc <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    b41e:	89 d8                	mov    %ebx,%eax
    b420:	eb 34                	jmp    b456 <_ZN3vkh27checkValidationLayerSupportEv+0x14d>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    b422:	48 89 c3             	mov    %rax,%rbx
    b425:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    b429:	48 89 c7             	mov    %rax,%rdi
    b42c:	e8 09 b6 ff ff       	call   6a3a <_ZNSaI17VkLayerPropertiesED1Ev>
    b431:	48 89 d8             	mov    %rbx,%rax
    b434:	48 89 c7             	mov    %rax,%rdi
    b437:	e8 b4 81 ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    b43c:	48 89 c3             	mov    %rax,%rbx
    b43f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    b443:	48 89 c7             	mov    %rax,%rdi
    b446:	e8 81 b6 ff ff       	call   6acc <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    b44b:	48 89 d8             	mov    %rbx,%rax
    b44e:	48 89 c7             	mov    %rax,%rdi
    b451:	e8 9a 81 ff ff       	call   35f0 <_Unwind_Resume@plt>
    b456:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b45a:	c9                   	leave
    b45b:	c3                   	ret

000000000000b45c <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:

VKAPI_ATTR VkBool32 VKAPI_CALL
debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
              [[maybe_unused]] VkDebugUtilsMessageTypeFlagsEXT messageType,
              const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
              [[maybe_unused]] void *pUserData) {
    b45c:	55                   	push   %rbp
    b45d:	48 89 e5             	mov    %rsp,%rbp
    b460:	48 83 ec 20          	sub    $0x20,%rsp
    b464:	89 7d fc             	mov    %edi,-0x4(%rbp)
    b467:	89 75 f8             	mov    %esi,-0x8(%rbp)
    b46a:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    b46e:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  if (messageSeverity > VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT) {
    b472:	8b 45 fc             	mov    -0x4(%rbp),%eax
    b475:	83 f8 01             	cmp    $0x1,%eax
    b478:	7e 3c                	jle    b4b6 <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x5a>
    std::cerr << '\n' << pCallbackData->pMessage << std::endl;
    b47a:	be 0a 00 00 00       	mov    $0xa,%esi
    b47f:	48 8d 05 1a 70 01 00 	lea    0x1701a(%rip),%rax        # 224a0 <_ZSt4cerr@GLIBCXX_3.4>
    b486:	48 89 c7             	mov    %rax,%rdi
    b489:	e8 82 7f ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    b48e:	48 89 c2             	mov    %rax,%rdx
    b491:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b495:	48 8b 40 28          	mov    0x28(%rax),%rax
    b499:	48 89 c6             	mov    %rax,%rsi
    b49c:	48 89 d7             	mov    %rdx,%rdi
    b49f:	e8 5c 7e ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    b4a4:	48 8b 15 ed 6a 01 00 	mov    0x16aed(%rip),%rdx        # 21f98 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    b4ab:	48 89 d6             	mov    %rdx,%rsi
    b4ae:	48 89 c7             	mov    %rax,%rdi
    b4b1:	e8 ba 7e ff ff       	call   3370 <_ZNSolsEPFRSoS_E@plt>
  }
  return VK_FALSE;
    b4b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b4bb:	c9                   	leave
    b4bc:	c3                   	ret

000000000000b4bd <_ZN3vkh32populateDebugMessengerCreateInfoER34VkDebugUtilsMessengerCreateInfoEXT>:

void populateDebugMessengerCreateInfo(
    VkDebugUtilsMessengerCreateInfoEXT &createInfo) {
    b4bd:	55                   	push   %rbp
    b4be:	48 89 e5             	mov    %rsp,%rbp
    b4c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  createInfo = {};
    b4c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b4c9:	66 0f ef c0          	pxor   %xmm0,%xmm0
    b4cd:	0f 11 00             	movups %xmm0,(%rax)
    b4d0:	0f 11 40 10          	movups %xmm0,0x10(%rax)
    b4d4:	0f 11 40 20          	movups %xmm0,0x20(%rax)
  createInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    b4d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b4dc:	c7 00 04 be 9c 3b    	movl   $0x3b9cbe04,(%rax)
  createInfo.messageSeverity =
    b4e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b4e6:	c7 40 14 01 11 00 00 	movl   $0x1101,0x14(%rax)
      VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT |
      //  VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT |
      VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT |
      VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
  createInfo.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT |
    b4ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b4f1:	c7 40 18 07 00 00 00 	movl   $0x7,0x18(%rax)
                           VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT |
                           VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
  createInfo.pfnUserCallback = debugCallback;
    b4f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b4fc:	48 8d 15 59 ff ff ff 	lea    -0xa7(%rip),%rdx        # b45c <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>
    b503:	48 89 50 20          	mov    %rdx,0x20(%rax)
  createInfo.pUserData = nullptr;
    b507:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b50b:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    b512:	00 
}
    b513:	90                   	nop
    b514:	5d                   	pop    %rbp
    b515:	c3                   	ret

000000000000b516 <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T>:

VkResult createDebugUtilsMessengerEXT(
    VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkDebugUtilsMessengerEXT *pDebugMessenger) {
    b516:	55                   	push   %rbp
    b517:	48 89 e5             	mov    %rsp,%rbp
    b51a:	48 83 ec 30          	sub    $0x30,%rsp
    b51e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b522:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b526:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    b52a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  auto func = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    b52e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b532:	48 8d 15 e7 a1 00 00 	lea    0xa1e7(%rip),%rdx        # 15720 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x28>
    b539:	48 89 d6             	mov    %rdx,%rsi
    b53c:	48 89 c7             	mov    %rax,%rdi
    b53f:	e8 9c 7d ff ff       	call   32e0 <vkGetInstanceProcAddr@plt>
    b544:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      instance, "vkCreateDebugUtilsMessengerEXT");
  if (func == nullptr) {
    b548:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    b54d:	75 07                	jne    b556 <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T+0x40>
    return VK_ERROR_EXTENSION_NOT_PRESENT;
    b54f:	b8 f9 ff ff ff       	mov    $0xfffffff9,%eax
    b554:	eb 1b                	jmp    b571 <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T+0x5b>
  }
  return func(instance, pCreateInfo, pAllocator, pDebugMessenger);
    b556:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
    b55a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b55e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b562:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    b566:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b56a:	48 89 c7             	mov    %rax,%rdi
    b56d:	41 ff d0             	call   *%r8
    b570:	90                   	nop
}
    b571:	c9                   	leave
    b572:	c3                   	ret

000000000000b573 <_ZN3vkh20createDebugMessengerEP12VkInstance_T>:

VkDebugUtilsMessengerEXT createDebugMessenger(VkInstance instance) {
    b573:	55                   	push   %rbp
    b574:	48 89 e5             	mov    %rsp,%rbp
    b577:	41 54                	push   %r12
    b579:	53                   	push   %rbx
    b57a:	48 83 ec 50          	sub    $0x50,%rsp
    b57e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  VkDebugUtilsMessengerCreateInfoEXT createInfo;
  populateDebugMessengerCreateInfo(createInfo);
    b582:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    b586:	48 89 c7             	mov    %rax,%rdi
    b589:	e8 2f ff ff ff       	call   b4bd <_ZN3vkh32populateDebugMessengerCreateInfoER34VkDebugUtilsMessengerCreateInfoEXT>
  VkDebugUtilsMessengerEXT debugMessenger{};
    b58e:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    b595:	00 
  if (createDebugUtilsMessengerEXT(instance, &createInfo, nullptr,
    b596:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    b59a:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    b59e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b5a2:	48 89 d1             	mov    %rdx,%rcx
    b5a5:	ba 00 00 00 00       	mov    $0x0,%edx
    b5aa:	48 89 c7             	mov    %rax,%rdi
    b5ad:	e8 64 ff ff ff       	call   b516 <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T>
                                   &debugMessenger) != VK_SUCCESS) {
    b5b2:	85 c0                	test   %eax,%eax
    b5b4:	0f 95 c0             	setne  %al
  if (createDebugUtilsMessengerEXT(instance, &createInfo, nullptr,
    b5b7:	84 c0                	test   %al,%al
    b5b9:	74 3b                	je     b5f6 <_ZN3vkh20createDebugMessengerEP12VkInstance_T+0x83>
    throw std::runtime_error("Failed to set up debug message.");
    b5bb:	bf 10 00 00 00       	mov    $0x10,%edi
    b5c0:	e8 8b 7b ff ff       	call   3150 <__cxa_allocate_exception@plt>
    b5c5:	48 89 c3             	mov    %rax,%rbx
    b5c8:	48 8d 05 71 a1 00 00 	lea    0xa171(%rip),%rax        # 15740 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x48>
    b5cf:	48 89 c6             	mov    %rax,%rsi
    b5d2:	48 89 df             	mov    %rbx,%rdi
    b5d5:	e8 06 7b ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    b5da:	48 8b 05 c7 69 01 00 	mov    0x169c7(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    b5e1:	48 89 c2             	mov    %rax,%rdx
    b5e4:	48 8d 05 55 67 01 00 	lea    0x16755(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    b5eb:	48 89 c6             	mov    %rax,%rsi
    b5ee:	48 89 df             	mov    %rbx,%rdi
    b5f1:	e8 aa 7f ff ff       	call   35a0 <__cxa_throw@plt>
  }
  return debugMessenger;
    b5f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b5fa:	eb 16                	jmp    b612 <_ZN3vkh20createDebugMessengerEP12VkInstance_T+0x9f>
    throw std::runtime_error("Failed to set up debug message.");
    b5fc:	49 89 c4             	mov    %rax,%r12
    b5ff:	48 89 df             	mov    %rbx,%rdi
    b602:	e8 f9 7b ff ff       	call   3200 <__cxa_free_exception@plt>
    b607:	4c 89 e0             	mov    %r12,%rax
    b60a:	48 89 c7             	mov    %rax,%rdi
    b60d:	e8 de 7f ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    b612:	48 83 c4 50          	add    $0x50,%rsp
    b616:	5b                   	pop    %rbx
    b617:	41 5c                	pop    %r12
    b619:	5d                   	pop    %rbp
    b61a:	c3                   	ret

000000000000b61b <_ZN3vkh29destroyDebugUtilsMessengerEXTEP12VkInstance_TP26VkDebugUtilsMessengerEXT_TPK21VkAllocationCallbacks>:

void destroyDebugUtilsMessengerEXT(VkInstance instance,
                                   VkDebugUtilsMessengerEXT debugMessenger,
                                   const VkAllocationCallbacks *pAllocator) {
    b61b:	55                   	push   %rbp
    b61c:	48 89 e5             	mov    %rsp,%rbp
    b61f:	48 83 ec 30          	sub    $0x30,%rsp
    b623:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b627:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b62b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    b62f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b633:	48 8d 15 26 a1 00 00 	lea    0xa126(%rip),%rdx        # 15760 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x68>
    b63a:	48 89 d6             	mov    %rdx,%rsi
    b63d:	48 89 c7             	mov    %rax,%rdi
    b640:	e8 9b 7c ff ff       	call   32e0 <vkGetInstanceProcAddr@plt>
    b645:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      instance, "vkDestroyDebugUtilsMessengerEXT");
  if (func != nullptr) {
    b649:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    b64e:	74 19                	je     b669 <_ZN3vkh29destroyDebugUtilsMessengerEXTEP12VkInstance_TP26VkDebugUtilsMessengerEXT_TPK21VkAllocationCallbacks+0x4e>
    func(instance, debugMessenger, pAllocator);
    b650:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
    b654:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b658:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    b65c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b660:	48 89 ce             	mov    %rcx,%rsi
    b663:	48 89 c7             	mov    %rax,%rdi
    b666:	41 ff d0             	call   *%r8
  }
}
    b669:	90                   	nop
    b66a:	c9                   	leave
    b66b:	c3                   	ret

000000000000b66c <_Z41__static_initialization_and_destruction_0ii>:

    b66c:	55                   	push   %rbp
    b66d:	48 89 e5             	mov    %rsp,%rbp
    b670:	48 83 ec 10          	sub    $0x10,%rsp
    b674:	89 7d fc             	mov    %edi,-0x4(%rbp)
    b677:	89 75 f8             	mov    %esi,-0x8(%rbp)
    b67a:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    b67e:	75 3b                	jne    b6bb <_Z41__static_initialization_and_destruction_0ii+0x4f>
    b680:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    b687:	75 32                	jne    b6bb <_Z41__static_initialization_and_destruction_0ii+0x4f>
    b689:	48 8d 05 22 6f 01 00 	lea    0x16f22(%rip),%rax        # 225b2 <_ZStL8__ioinit>
    b690:	48 89 c7             	mov    %rax,%rdi
    b693:	e8 98 7e ff ff       	call   3530 <_ZNSt8ios_base4InitC1Ev@plt>
    b698:	48 8d 05 91 6c 01 00 	lea    0x16c91(%rip),%rax        # 22330 <__dso_handle>
    b69f:	48 89 c2             	mov    %rax,%rdx
    b6a2:	48 8d 05 09 6f 01 00 	lea    0x16f09(%rip),%rax        # 225b2 <_ZStL8__ioinit>
    b6a9:	48 89 c6             	mov    %rax,%rsi
    b6ac:	48 8b 05 15 69 01 00 	mov    0x16915(%rip),%rax        # 21fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    b6b3:	48 89 c7             	mov    %rax,%rdi
    b6b6:	e8 e5 7b ff ff       	call   32a0 <__cxa_atexit@plt>
    b6bb:	90                   	nop
    b6bc:	c9                   	leave
    b6bd:	c3                   	ret

000000000000b6be <_GLOBAL__sub_I__ZN3vkh27checkValidationLayerSupportEv>:
    b6be:	55                   	push   %rbp
    b6bf:	48 89 e5             	mov    %rsp,%rbp
    b6c2:	be ff ff 00 00       	mov    $0xffff,%esi
    b6c7:	bf 01 00 00 00       	mov    $0x1,%edi
    b6cc:	e8 9b ff ff ff       	call   b66c <_Z41__static_initialization_and_destruction_0ii>
    b6d1:	5d                   	pop    %rbp
    b6d2:	c3                   	ret

000000000000b6d3 <_ZNSt11char_traitsIcE2ltERKcS2_>:
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
    b6d3:	55                   	push   %rbp
    b6d4:	48 89 e5             	mov    %rsp,%rbp
    b6d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b6db:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return (static_cast<unsigned char>(__c1)
    b6df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6e3:	0f b6 00             	movzbl (%rax),%eax
    b6e6:	89 c2                	mov    %eax,%edx
		< static_cast<unsigned char>(__c2));
    b6e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b6ec:	0f b6 00             	movzbl (%rax),%eax
    b6ef:	38 c2                	cmp    %al,%dl
    b6f1:	0f 92 c0             	setb   %al
      }
    b6f4:	5d                   	pop    %rbp
    b6f5:	c3                   	ret

000000000000b6f6 <_ZNSt11char_traitsIcE7compareEPKcS2_m>:
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
    b6f6:	55                   	push   %rbp
    b6f7:	48 89 e5             	mov    %rsp,%rbp
    b6fa:	48 83 ec 30          	sub    $0x30,%rsp
    b6fe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b702:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b706:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (__n == 0)
    b70a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    b70f:	75 0a                	jne    b71b <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x25>
	  return 0;
    b711:	b8 00 00 00 00       	mov    $0x0,%eax
    b716:	e9 99 00 00 00       	jmp    b7b4 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	if (std::__is_constant_evaluated())
    b71b:	e8 5e 82 ff ff       	call   397e <_ZSt23__is_constant_evaluatedv>
    b720:	84 c0                	test   %al,%al
    b722:	74 78                	je     b79c <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xa6>
	    for (size_t __i = 0; __i < __n; ++__i)
    b724:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    b72b:	00 
    b72c:	eb 5d                	jmp    b78b <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x95>
	      if (lt(__s1[__i], __s2[__i]))
    b72e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b732:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b736:	48 01 c2             	add    %rax,%rdx
    b739:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b73d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b741:	48 01 c8             	add    %rcx,%rax
    b744:	48 89 d6             	mov    %rdx,%rsi
    b747:	48 89 c7             	mov    %rax,%rdi
    b74a:	e8 84 ff ff ff       	call   b6d3 <_ZNSt11char_traitsIcE2ltERKcS2_>
    b74f:	84 c0                	test   %al,%al
    b751:	74 07                	je     b75a <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x64>
		return -1;
    b753:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    b758:	eb 5a                	jmp    b7b4 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	      else if (lt(__s2[__i], __s1[__i]))
    b75a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b75e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b762:	48 01 c2             	add    %rax,%rdx
    b765:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    b769:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b76d:	48 01 c8             	add    %rcx,%rax
    b770:	48 89 d6             	mov    %rdx,%rsi
    b773:	48 89 c7             	mov    %rax,%rdi
    b776:	e8 58 ff ff ff       	call   b6d3 <_ZNSt11char_traitsIcE2ltERKcS2_>
    b77b:	84 c0                	test   %al,%al
    b77d:	74 07                	je     b786 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x90>
		return 1;
    b77f:	b8 01 00 00 00       	mov    $0x1,%eax
    b784:	eb 2e                	jmp    b7b4 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	    for (size_t __i = 0; __i < __n; ++__i)
    b786:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    b78b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b78f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    b793:	72 99                	jb     b72e <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x38>
	    return 0;
    b795:	b8 00 00 00 00       	mov    $0x0,%eax
    b79a:	eb 18                	jmp    b7b4 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	return __builtin_memcmp(__s1, __s2, __n);
    b79c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b7a0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    b7a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b7a8:	48 89 ce             	mov    %rcx,%rsi
    b7ab:	48 89 c7             	mov    %rax,%rdi
    b7ae:	e8 7d 79 ff ff       	call   3130 <memcmp@plt>
    b7b3:	90                   	nop
      }
    b7b4:	c9                   	leave
    b7b5:	c3                   	ret

000000000000b7b6 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:
      { }

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      __attribute__((__nonnull__)) constexpr
      basic_string_view(const _CharT* __str) noexcept
    b7b6:	55                   	push   %rbp
    b7b7:	48 89 e5             	mov    %rsp,%rbp
    b7ba:	48 83 ec 10          	sub    $0x10,%rsp
    b7be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b7c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_len{traits_type::length(__str)},
    b7c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b7ca:	48 89 c7             	mov    %rax,%rdi
    b7cd:	e8 b7 81 ff ff       	call   3989 <_ZNSt11char_traitsIcE6lengthEPKc>
    b7d2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b7d6:	48 89 02             	mov    %rax,(%rdx)
	_M_str{__str}
    b7d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b7e1:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
    b7e5:	90                   	nop
    b7e6:	c9                   	leave
    b7e7:	c3                   	ret

000000000000b7e8 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    b7e8:	55                   	push   %rbp
    b7e9:	48 89 e5             	mov    %rsp,%rbp
    b7ec:	48 83 ec 20          	sub    $0x20,%rsp
    b7f0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    b7f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b7f8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    b7fc:	48 89 d6             	mov    %rdx,%rsi
    b7ff:	48 89 c7             	mov    %rax,%rdi
    b802:	e8 27 01 00 00       	call   b92e <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    b807:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b80b:	c9                   	leave
    b80c:	c3                   	ret
    b80d:	90                   	nop

000000000000b80e <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    b80e:	55                   	push   %rbp
    b80f:	48 89 e5             	mov    %rsp,%rbp
    b812:	48 83 ec 20          	sub    $0x20,%rsp
    b816:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    b81a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b81e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    b822:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    b826:	48 89 d6             	mov    %rdx,%rsi
    b829:	48 89 c7             	mov    %rax,%rdi
    b82c:	e8 fd 00 00 00       	call   b92e <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    b831:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b835:	c9                   	leave
    b836:	c3                   	ret

000000000000b837 <_ZN9__gnu_cxxneIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    b837:	55                   	push   %rbp
    b838:	48 89 e5             	mov    %rsp,%rbp
    b83b:	53                   	push   %rbx
    b83c:	48 83 ec 18          	sub    $0x18,%rsp
    b840:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b844:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    b848:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b84c:	48 89 c7             	mov    %rax,%rdi
    b84f:	e8 f8 00 00 00       	call   b94c <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    b854:	48 8b 18             	mov    (%rax),%rbx
    b857:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b85b:	48 89 c7             	mov    %rax,%rdi
    b85e:	e8 e9 00 00 00       	call   b94c <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    b863:	48 8b 00             	mov    (%rax),%rax
    b866:	48 39 c3             	cmp    %rax,%rbx
    b869:	0f 95 c0             	setne  %al
    b86c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b870:	c9                   	leave
    b871:	c3                   	ret

000000000000b872 <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    b872:	55                   	push   %rbp
    b873:	48 89 e5             	mov    %rsp,%rbp
    b876:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    b87a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b87e:	48 8b 00             	mov    (%rax),%rax
    b881:	48 8d 90 08 02 00 00 	lea    0x208(%rax),%rdx
    b888:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b88c:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    b88f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    b893:	5d                   	pop    %rbp
    b894:	c3                   	ret
    b895:	90                   	nop

000000000000b896 <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    b896:	55                   	push   %rbp
    b897:	48 89 e5             	mov    %rsp,%rbp
    b89a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    b89e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8a2:	48 8b 00             	mov    (%rax),%rax
    b8a5:	5d                   	pop    %rbp
    b8a6:	c3                   	ret
    b8a7:	90                   	nop

000000000000b8a8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:
      { return const_reverse_iterator(this->begin()); }

      // [string.view.capacity], capacity

      constexpr size_type
      size() const noexcept
    b8a8:	55                   	push   %rbp
    b8a9:	48 89 e5             	mov    %rsp,%rbp
    b8ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len; }
    b8b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8b4:	48 8b 00             	mov    (%rax),%rax
    b8b7:	5d                   	pop    %rbp
    b8b8:	c3                   	ret

000000000000b8b9 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>:
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }

  template<typename _CharT, typename _Traits>
    constexpr bool
    operator==(basic_string_view<_CharT, _Traits> __x,
    b8b9:	55                   	push   %rbp
    b8ba:	48 89 e5             	mov    %rsp,%rbp
    b8bd:	53                   	push   %rbx
    b8be:	48 83 ec 28          	sub    $0x28,%rsp
    b8c2:	48 89 f0             	mov    %rsi,%rax
    b8c5:	49 89 f8             	mov    %rdi,%r8
    b8c8:	4c 89 c6             	mov    %r8,%rsi
    b8cb:	4c 89 cf             	mov    %r9,%rdi
    b8ce:	48 89 c7             	mov    %rax,%rdi
    b8d1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b8d5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b8d9:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
    b8dd:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }
    b8e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    b8e5:	48 89 c7             	mov    %rax,%rdi
    b8e8:	e8 bb ff ff ff       	call   b8a8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
    b8ed:	48 89 c3             	mov    %rax,%rbx
    b8f0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    b8f4:	48 89 c7             	mov    %rax,%rdi
    b8f7:	e8 ac ff ff ff       	call   b8a8 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
    b8fc:	48 39 c3             	cmp    %rax,%rbx
    b8ff:	75 22                	jne    b923 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
    b901:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b905:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b909:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    b90d:	48 89 ce             	mov    %rcx,%rsi
    b910:	48 89 c7             	mov    %rax,%rdi
    b913:	e8 42 00 00 00       	call   b95a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>
    b918:	85 c0                	test   %eax,%eax
    b91a:	75 07                	jne    b923 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
    b91c:	b8 01 00 00 00       	mov    $0x1,%eax
    b921:	eb 05                	jmp    b928 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6f>
    b923:	b8 00 00 00 00       	mov    $0x0,%eax
    b928:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b92c:	c9                   	leave
    b92d:	c3                   	ret

000000000000b92e <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    b92e:	55                   	push   %rbp
    b92f:	48 89 e5             	mov    %rsp,%rbp
    b932:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b936:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    b93a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b93e:	48 8b 10             	mov    (%rax),%rdx
    b941:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b945:	48 89 10             	mov    %rdx,(%rax)
    b948:	90                   	nop
    b949:	5d                   	pop    %rbp
    b94a:	c3                   	ret
    b94b:	90                   	nop

000000000000b94c <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    b94c:	55                   	push   %rbp
    b94d:	48 89 e5             	mov    %rsp,%rbp
    b950:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    b954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b958:	5d                   	pop    %rbp
    b959:	c3                   	ret

000000000000b95a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>:
      compare(basic_string_view __str) const noexcept
    b95a:	55                   	push   %rbp
    b95b:	48 89 e5             	mov    %rsp,%rbp
    b95e:	48 83 ec 30          	sub    $0x30,%rsp
    b962:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b966:	48 89 d1             	mov    %rdx,%rcx
    b969:	48 89 f0             	mov    %rsi,%rax
    b96c:	48 89 fa             	mov    %rdi,%rdx
    b96f:	48 89 ca             	mov    %rcx,%rdx
    b972:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b976:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const size_type __rlen = std::min(this->_M_len, __str._M_len);
    b97a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b97e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    b982:	48 89 d6             	mov    %rdx,%rsi
    b985:	48 89 c7             	mov    %rax,%rdi
    b988:	e8 a0 88 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
    b98d:	48 8b 00             	mov    (%rax),%rax
    b990:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);
    b994:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    b998:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b99c:	48 8b 40 08          	mov    0x8(%rax),%rax
    b9a0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b9a4:	48 89 ce             	mov    %rcx,%rsi
    b9a7:	48 89 c7             	mov    %rax,%rdi
    b9aa:	e8 47 fd ff ff       	call   b6f6 <_ZNSt11char_traitsIcE7compareEPKcS2_m>
    b9af:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (__ret == 0)
    b9b2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    b9b6:	75 19                	jne    b9d1 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_+0x77>
	  __ret = _S_compare(this->_M_len, __str._M_len);
    b9b8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b9bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b9c0:	48 8b 00             	mov    (%rax),%rax
    b9c3:	48 89 d6             	mov    %rdx,%rsi
    b9c6:	48 89 c7             	mov    %rax,%rdi
    b9c9:	e8 08 00 00 00       	call   b9d6 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>
    b9ce:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return __ret;
    b9d1:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
    b9d4:	c9                   	leave
    b9d5:	c3                   	ret

000000000000b9d6 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>:
      _S_compare(size_type __n1, size_type __n2) noexcept
    b9d6:	55                   	push   %rbp
    b9d7:	48 89 e5             	mov    %rsp,%rbp
    b9da:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b9de:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const difference_type __diff = __n1 - __n2;
    b9e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b9e6:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    b9ea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__diff > __limits::__max)
    b9ee:	b8 00 00 00 80       	mov    $0x80000000,%eax
    b9f3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    b9f7:	7c 07                	jl     ba00 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x2a>
	  return __limits::__max;
    b9f9:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
    b9fe:	eb 1b                	jmp    ba1b <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	if (__diff < __limits::__min)
    ba00:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
    ba07:	ff ff ff 
    ba0a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    ba0e:	7f 07                	jg     ba17 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x41>
	  return __limits::__min;
    ba10:	b8 00 00 00 80       	mov    $0x80000000,%eax
    ba15:	eb 04                	jmp    ba1b <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	return static_cast<int>(__diff);
    ba17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    ba1b:	5d                   	pop    %rbp
    ba1c:	c3                   	ret

000000000000ba1d <_Z41__static_initialization_and_destruction_0ii>:
 */
void destroyDebugUtilsMessengerEXT(VkInstance instance,
                                   VkDebugUtilsMessengerEXT debugMessenger,
                                   const VkAllocationCallbacks *pAllocator);

} /* namespace vkh */
    ba1d:	55                   	push   %rbp
    ba1e:	48 89 e5             	mov    %rsp,%rbp
    ba21:	48 83 ec 10          	sub    $0x10,%rsp
    ba25:	89 7d fc             	mov    %edi,-0x4(%rbp)
    ba28:	89 75 f8             	mov    %esi,-0x8(%rbp)
    ba2b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    ba2f:	75 3b                	jne    ba6c <_Z41__static_initialization_and_destruction_0ii+0x4f>
    ba31:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    ba38:	75 32                	jne    ba6c <_Z41__static_initialization_and_destruction_0ii+0x4f>
    ba3a:	48 8d 05 72 6b 01 00 	lea    0x16b72(%rip),%rax        # 225b3 <_ZStL8__ioinit>
    ba41:	48 89 c7             	mov    %rax,%rdi
    ba44:	e8 e7 7a ff ff       	call   3530 <_ZNSt8ios_base4InitC1Ev@plt>
    ba49:	48 8d 05 e0 68 01 00 	lea    0x168e0(%rip),%rax        # 22330 <__dso_handle>
    ba50:	48 89 c2             	mov    %rax,%rdx
    ba53:	48 8d 05 59 6b 01 00 	lea    0x16b59(%rip),%rax        # 225b3 <_ZStL8__ioinit>
    ba5a:	48 89 c6             	mov    %rax,%rsi
    ba5d:	48 8b 05 64 65 01 00 	mov    0x16564(%rip),%rax        # 21fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    ba64:	48 89 c7             	mov    %rax,%rdi
    ba67:	e8 34 78 ff ff       	call   32a0 <__cxa_atexit@plt>
    ba6c:	90                   	nop
    ba6d:	c9                   	leave
    ba6e:	c3                   	ret

000000000000ba6f <_GLOBAL__sub_I_vkh.cpp>:
    ba6f:	55                   	push   %rbp
    ba70:	48 89 e5             	mov    %rsp,%rbp
    ba73:	be ff ff 00 00       	mov    $0xffff,%esi
    ba78:	bf 01 00 00 00       	mov    $0x1,%edi
    ba7d:	e8 9b ff ff ff       	call   ba1d <_Z41__static_initialization_and_destruction_0ii>
    ba82:	5d                   	pop    %rbp
    ba83:	c3                   	ret

000000000000ba84 <_ZN9VulkanApp12createWindowEv>:
#include "vulkan_app.hpp"

void VulkanApp::createWindow() {
    ba84:	55                   	push   %rbp
    ba85:	48 89 e5             	mov    %rsp,%rbp
    ba88:	48 83 ec 10          	sub    $0x10,%rsp
    ba8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  glfwInit();
    ba90:	e8 6b 79 ff ff       	call   3400 <glfwInit@plt>
  window = vkh::createWindow(800, 600);
    ba95:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    ba9b:	b9 00 00 00 00       	mov    $0x0,%ecx
    baa0:	48 8d 05 e1 a8 00 00 	lea    0xa8e1(%rip),%rax        # 16388 <_ZN6__pstl9execution2v1L5unseqE+0x1>
    baa7:	48 89 c2             	mov    %rax,%rdx
    baaa:	be 58 02 00 00       	mov    $0x258,%esi
    baaf:	bf 20 03 00 00       	mov    $0x320,%edi
    bab4:	e8 cc 8a ff ff       	call   4585 <_ZN3vkh12createWindowEiiPKcP11GLFWmonitorP10GLFWwindow>
    bab9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    babd:	48 89 02             	mov    %rax,(%rdx)
}
    bac0:	90                   	nop
    bac1:	c9                   	leave
    bac2:	c3                   	ret
    bac3:	90                   	nop

000000000000bac4 <_ZN9VulkanApp14createInstanceEv>:

void VulkanApp::createInstance() {
    bac4:	55                   	push   %rbp
    bac5:	48 89 e5             	mov    %rsp,%rbp
    bac8:	53                   	push   %rbx
    bac9:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    bad0:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  VkApplicationInfo appInfo{};
    bad7:	66 0f ef c0          	pxor   %xmm0,%xmm0
    badb:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
    badf:	0f 29 45 c0          	movaps %xmm0,-0x40(%rbp)
    bae3:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
    bae7:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
  appInfo.pApplicationName = "Vulkan Application";
    baee:	48 8d 05 93 a8 00 00 	lea    0xa893(%rip),%rax        # 16388 <_ZN6__pstl9execution2v1L5unseqE+0x1>
    baf5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
    baf9:	c7 45 c8 00 00 40 00 	movl   $0x400000,-0x38(%rbp)
  appInfo.pEngineName = "No Engine";
    bb00:	48 8d 05 94 a8 00 00 	lea    0xa894(%rip),%rax        # 1639b <_ZN6__pstl9execution2v1L5unseqE+0x14>
    bb07:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
    bb0b:	c7 45 d8 00 00 40 00 	movl   $0x400000,-0x28(%rbp)
  appInfo.apiVersion = VK_API_VERSION_1_3;
    bb12:	c7 45 dc 00 30 40 00 	movl   $0x403000,-0x24(%rbp)

  auto requiredExtensions = vkh::getRequiredInstanceExtensionNameList();
    bb19:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    bb1d:	48 89 c7             	mov    %rax,%rdi
    bb20:	e8 17 a1 ff ff       	call   5c3c <_ZN3vkh36getRequiredInstanceExtensionNameListEv>
  for (auto &&extension : requiredExtensions) {
    bb25:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    bb29:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    bb2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bb31:	48 89 c7             	mov    %rax,%rdi
    bb34:	e8 a9 2a 00 00       	call   e5e2 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
    bb39:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    bb40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bb44:	48 89 c7             	mov    %rax,%rdi
    bb47:	e8 bc 2a 00 00       	call   e608 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
    bb4c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    bb53:	eb 3c                	jmp    bb91 <_ZN9VulkanApp14createInstanceEv+0xcd>
    bb55:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
    bb5c:	48 89 c7             	mov    %rax,%rdi
    bb5f:	e8 28 2b 00 00       	call   e68c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
    bb64:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    instanceExtensions.emplace_back(extension);
    bb68:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    bb6f:	48 8d 50 10          	lea    0x10(%rax),%rdx
    bb73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    bb77:	48 89 c6             	mov    %rax,%rsi
    bb7a:	48 89 d7             	mov    %rdx,%rdi
    bb7d:	e8 1c 2b 00 00       	call   e69e <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJRS1_EEES5_DpOT_>
  for (auto &&extension : requiredExtensions) {
    bb82:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
    bb89:	48 89 c7             	mov    %rax,%rdi
    bb8c:	e8 db 2a 00 00       	call   e66c <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>
    bb91:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
    bb98:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
    bb9f:	48 89 d6             	mov    %rdx,%rsi
    bba2:	48 89 c7             	mov    %rax,%rdi
    bba5:	e8 87 2a 00 00       	call   e631 <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    bbaa:	84 c0                	test   %al,%al
    bbac:	75 a7                	jne    bb55 <_ZN9VulkanApp14createInstanceEv+0x91>
  }

  auto debugCreateInfo = VkDebugUtilsMessengerCreateInfoEXT{};
    bbae:	66 0f ef c0          	pxor   %xmm0,%xmm0
    bbb2:	0f 29 85 60 ff ff ff 	movaps %xmm0,-0xa0(%rbp)
    bbb9:	0f 29 85 70 ff ff ff 	movaps %xmm0,-0x90(%rbp)
    bbc0:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  vkh::populateDebugMessengerCreateInfo(debugCreateInfo);
    bbc4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    bbcb:	48 89 c7             	mov    %rax,%rdi
    bbce:	e8 ea f8 ff ff       	call   b4bd <_ZN3vkh32populateDebugMessengerCreateInfoER34VkDebugUtilsMessengerCreateInfoEXT>

  VkInstanceCreateInfo instanceInfo;
  instanceInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    bbd3:	c7 85 20 ff ff ff 01 	movl   $0x1,-0xe0(%rbp)
    bbda:	00 00 00 
  instanceInfo.pNext = (VkDebugUtilsMessengerCreateInfoEXT *)&debugCreateInfo;
    bbdd:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    bbe4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  instanceInfo.pApplicationInfo = &appInfo;
    bbeb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    bbef:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  instanceInfo.enabledLayerCount = static_cast<uint32_t>(instanceLayers.size());
    bbf6:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    bbfd:	48 83 c0 28          	add    $0x28,%rax
    bc01:	48 89 c7             	mov    %rax,%rdi
    bc04:	e8 39 2b 00 00       	call   e742 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
    bc09:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
  instanceInfo.ppEnabledLayerNames = instanceLayers.data();
    bc0f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    bc16:	48 83 c0 28          	add    $0x28,%rax
    bc1a:	48 89 c7             	mov    %rax,%rdi
    bc1d:	e8 44 2b 00 00       	call   e766 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    bc22:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  instanceInfo.enabledExtensionCount =
      static_cast<uint32_t>(instanceExtensions.size());
    bc29:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    bc30:	48 83 c0 10          	add    $0x10,%rax
    bc34:	48 89 c7             	mov    %rax,%rdi
    bc37:	e8 06 2b 00 00       	call   e742 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  instanceInfo.enabledExtensionCount =
    bc3c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
  instanceInfo.ppEnabledExtensionNames = instanceExtensions.data();
    bc42:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    bc49:	48 83 c0 10          	add    $0x10,%rax
    bc4d:	48 89 c7             	mov    %rax,%rdi
    bc50:	e8 35 2b 00 00       	call   e78a <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
    bc55:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)

  instance = vkh::createInstance(&instanceInfo);
    bc5c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    bc63:	be 00 00 00 00       	mov    $0x0,%esi
    bc68:	48 89 c7             	mov    %rax,%rdi
    bc6b:	e8 6b 89 ff ff       	call   45db <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks>
    bc70:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    bc77:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
    bc7b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    bc7f:	48 89 c7             	mov    %rax,%rdi
    bc82:	e8 17 29 00 00       	call   e59e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    bc87:	eb 1a                	jmp    bca3 <_ZN9VulkanApp14createInstanceEv+0x1df>
    bc89:	48 89 c3             	mov    %rax,%rbx
    bc8c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    bc90:	48 89 c7             	mov    %rax,%rdi
    bc93:	e8 06 29 00 00       	call   e59e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    bc98:	48 89 d8             	mov    %rbx,%rax
    bc9b:	48 89 c7             	mov    %rax,%rdi
    bc9e:	e8 4d 79 ff ff       	call   35f0 <_Unwind_Resume@plt>
    bca3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    bca7:	c9                   	leave
    bca8:	c3                   	ret
    bca9:	90                   	nop

000000000000bcaa <_ZN9VulkanApp20createDebugMessengerEv>:

void VulkanApp::createDebugMessenger() {
    bcaa:	55                   	push   %rbp
    bcab:	48 89 e5             	mov    %rsp,%rbp
    bcae:	41 54                	push   %r12
    bcb0:	53                   	push   %rbx
    bcb1:	48 83 ec 10          	sub    $0x10,%rsp
    bcb5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  if (vkh::checkValidationLayerSupport() == false) {
    bcb9:	e8 4b f6 ff ff       	call   b309 <_ZN3vkh27checkValidationLayerSupportEv>
    bcbe:	0f b6 c0             	movzbl %al,%eax
    bcc1:	85 c0                	test   %eax,%eax
    bcc3:	0f 94 c0             	sete   %al
    bcc6:	84 c0                	test   %al,%al
    bcc8:	74 3b                	je     bd05 <_ZN9VulkanApp20createDebugMessengerEv+0x5b>
    throw std::runtime_error("Validation layers are not supported.");
    bcca:	bf 10 00 00 00       	mov    $0x10,%edi
    bccf:	e8 7c 74 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    bcd4:	48 89 c3             	mov    %rax,%rbx
    bcd7:	48 8d 05 ca a6 00 00 	lea    0xa6ca(%rip),%rax        # 163a8 <_ZN6__pstl9execution2v1L5unseqE+0x21>
    bcde:	48 89 c6             	mov    %rax,%rsi
    bce1:	48 89 df             	mov    %rbx,%rdi
    bce4:	e8 f7 73 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    bce9:	48 8b 05 b8 62 01 00 	mov    0x162b8(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    bcf0:	48 89 c2             	mov    %rax,%rdx
    bcf3:	48 8d 05 46 60 01 00 	lea    0x16046(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    bcfa:	48 89 c6             	mov    %rax,%rsi
    bcfd:	48 89 df             	mov    %rbx,%rdi
    bd00:	e8 9b 78 ff ff       	call   35a0 <__cxa_throw@plt>
  }
  debugMessenger = vkh::createDebugMessenger(instance);
    bd05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bd09:	48 8b 40 08          	mov    0x8(%rax),%rax
    bd0d:	48 89 c7             	mov    %rax,%rdi
    bd10:	e8 5e f8 ff ff       	call   b573 <_ZN3vkh20createDebugMessengerEP12VkInstance_T>
    bd15:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bd19:	48 89 42 40          	mov    %rax,0x40(%rdx)
}
    bd1d:	eb 16                	jmp    bd35 <_ZN9VulkanApp20createDebugMessengerEv+0x8b>
    throw std::runtime_error("Validation layers are not supported.");
    bd1f:	49 89 c4             	mov    %rax,%r12
    bd22:	48 89 df             	mov    %rbx,%rdi
    bd25:	e8 d6 74 ff ff       	call   3200 <__cxa_free_exception@plt>
    bd2a:	4c 89 e0             	mov    %r12,%rax
    bd2d:	48 89 c7             	mov    %rax,%rdi
    bd30:	e8 bb 78 ff ff       	call   35f0 <_Unwind_Resume@plt>
}
    bd35:	48 83 c4 10          	add    $0x10,%rsp
    bd39:	5b                   	pop    %rbx
    bd3a:	41 5c                	pop    %r12
    bd3c:	5d                   	pop    %rbp
    bd3d:	c3                   	ret

000000000000bd3e <_ZN9VulkanApp13createSurfaceEv>:

void VulkanApp::createSurface() {
    bd3e:	55                   	push   %rbp
    bd3f:	48 89 e5             	mov    %rsp,%rbp
    bd42:	48 83 ec 10          	sub    $0x10,%rsp
    bd46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  surface = vkh::createSurface(instance, window);
    bd4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd4e:	48 8b 08             	mov    (%rax),%rcx
    bd51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd55:	48 8b 40 08          	mov    0x8(%rax),%rax
    bd59:	ba 00 00 00 00       	mov    $0x0,%edx
    bd5e:	48 89 ce             	mov    %rcx,%rsi
    bd61:	48 89 c7             	mov    %rax,%rdi
    bd64:	e8 9d 89 ff ff       	call   4706 <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks>
    bd69:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    bd6d:	48 89 42 48          	mov    %rax,0x48(%rdx)
}
    bd71:	90                   	nop
    bd72:	c9                   	leave
    bd73:	c3                   	ret

000000000000bd74 <_ZN9VulkanApp21checkDevicePropertiesEP18VkPhysicalDevice_T>:

bool VulkanApp::checkDeviceProperties(VkPhysicalDevice physDev) {
    bd74:	55                   	push   %rbp
    bd75:	48 89 e5             	mov    %rsp,%rbp
    bd78:	48 81 ec 50 03 00 00 	sub    $0x350,%rsp
    bd7f:	48 89 bd b8 fc ff ff 	mov    %rdi,-0x348(%rbp)
    bd86:	48 89 b5 b0 fc ff ff 	mov    %rsi,-0x350(%rbp)
  auto physDevPropList = vkh::getPhysicalDevicePropertyList(physDev);
    bd8d:	48 8d 85 c0 fc ff ff 	lea    -0x340(%rbp),%rax
    bd94:	48 8b 95 b0 fc ff ff 	mov    -0x350(%rbp),%rdx
    bd9b:	48 89 d6             	mov    %rdx,%rsi
    bd9e:	48 89 c7             	mov    %rax,%rdi
    bda1:	e8 63 a1 ff ff       	call   5f09 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_T>
  return physDevPropList.deviceType == VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU;
    bda6:	8b 85 d0 fc ff ff    	mov    -0x330(%rbp),%eax
    bdac:	83 f8 02             	cmp    $0x2,%eax
    bdaf:	0f 94 c0             	sete   %al
}
    bdb2:	c9                   	leave
    bdb3:	c3                   	ret

000000000000bdb4 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T>:

std::optional<std::pair<uint32_t, VkQueueFamilyProperties>>
VulkanApp::selectQueueFamily(VkPhysicalDevice physDev) {
    bdb4:	55                   	push   %rbp
    bdb5:	48 89 e5             	mov    %rsp,%rbp
    bdb8:	53                   	push   %rbx
    bdb9:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    bdc0:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    bdc7:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    bdce:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  auto graphicsFamilies = vkh::getGraphicsQueueFamilyPropertyList(physDev);
    bdd5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    bdd9:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    bde0:	48 89 d6             	mov    %rdx,%rsi
    bde3:	48 89 c7             	mov    %rax,%rdi
    bde6:	e8 47 a2 ff ff       	call   6032 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  auto computeFamilies = vkh::getComputeQueueFamilyPropertyList(physDev);
    bdeb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    bdef:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    bdf6:	48 89 d6             	mov    %rdx,%rsi
    bdf9:	48 89 c7             	mov    %rax,%rdi
    bdfc:	e8 65 a3 ff ff       	call   6166 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  auto presentFamilies =
      vkh::getPresentQueueFamilyPropertyList(physDev, surface);
    be01:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    be08:	48 8b 50 48          	mov    0x48(%rax),%rdx
    be0c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    be13:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
    be1a:	48 89 ce             	mov    %rcx,%rsi
    be1d:	48 89 c7             	mov    %rax,%rdi
    be20:	e8 7a a4 ff ff       	call   629f <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>

  /* Find a queue that is capable of handling graphics, computing, and
  supporting presentation to the surface */
  for (size_t i = 0; i < graphicsFamilies.size(); ++i) {
    be25:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    be2c:	00 
    be2d:	e9 c5 00 00 00       	jmp    bef7 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x143>
    if ((graphicsFamilies[i].has_value() && computeFamilies[i].has_value()) &&
    be32:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    be36:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    be3a:	48 89 d6             	mov    %rdx,%rsi
    be3d:	48 89 c7             	mov    %rax,%rdi
    be40:	e8 7f b4 ff ff       	call   72c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    be45:	48 89 c7             	mov    %rax,%rdi
    be48:	e8 8f 29 00 00       	call   e7dc <_ZNKSt8optionalI23VkQueueFamilyPropertiesE9has_valueEv>
    be4d:	84 c0                	test   %al,%al
    be4f:	74 48                	je     be99 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0xe5>
    be51:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    be55:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    be59:	48 89 d6             	mov    %rdx,%rsi
    be5c:	48 89 c7             	mov    %rax,%rdi
    be5f:	e8 60 b4 ff ff       	call   72c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    be64:	48 89 c7             	mov    %rax,%rdi
    be67:	e8 70 29 00 00       	call   e7dc <_ZNKSt8optionalI23VkQueueFamilyPropertiesE9has_valueEv>
    be6c:	84 c0                	test   %al,%al
    be6e:	74 29                	je     be99 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0xe5>
        presentFamilies[i].has_value()) {
    be70:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    be74:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    be7b:	48 89 d6             	mov    %rdx,%rsi
    be7e:	48 89 c7             	mov    %rax,%rdi
    be81:	e8 3e b4 ff ff       	call   72c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    be86:	48 89 c7             	mov    %rax,%rdi
    be89:	e8 4e 29 00 00       	call   e7dc <_ZNKSt8optionalI23VkQueueFamilyPropertiesE9has_valueEv>
    if ((graphicsFamilies[i].has_value() && computeFamilies[i].has_value()) &&
    be8e:	84 c0                	test   %al,%al
    be90:	74 07                	je     be99 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0xe5>
    be92:	b8 01 00 00 00       	mov    $0x1,%eax
    be97:	eb 05                	jmp    be9e <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0xea>
    be99:	b8 00 00 00 00       	mov    $0x0,%eax
    be9e:	84 c0                	test   %al,%al
    bea0:	74 50                	je     bef2 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x13e>
      return {{static_cast<uint32_t>(i), graphicsFamilies[i].value()}};
    bea2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bea6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    bea9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bead:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    beb1:	48 89 d6             	mov    %rdx,%rsi
    beb4:	48 89 c7             	mov    %rax,%rdi
    beb7:	e8 08 b4 ff ff       	call   72c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    bebc:	48 89 c7             	mov    %rax,%rdi
    bebf:	e8 32 29 00 00       	call   e7f6 <_ZNRSt8optionalI23VkQueueFamilyPropertiesE5valueEv>
    bec4:	48 89 c2             	mov    %rax,%rdx
    bec7:	48 8d 4d e4          	lea    -0x1c(%rbp),%rcx
    becb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    becf:	48 89 ce             	mov    %rcx,%rsi
    bed2:	48 89 c7             	mov    %rax,%rdi
    bed5:	e8 4e 29 00 00       	call   e828 <_ZNSt4pairIj23VkQueueFamilyPropertiesEC1IjRS0_Lb1EEEOT_OT0_>
    beda:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    bede:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    bee5:	48 89 d6             	mov    %rdx,%rsi
    bee8:	48 89 c7             	mov    %rax,%rdi
    beeb:	e8 8e 29 00 00       	call   e87e <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEC1IS2_Lb1EEEOT_>
    bef0:	eb 2f                	jmp    bf21 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x16d>
  for (size_t i = 0; i < graphicsFamilies.size(); ++i) {
    bef2:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    bef7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    befb:	48 89 c7             	mov    %rax,%rdi
    befe:	e8 ab 28 00 00       	call   e7ae <_ZNKSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE4sizeEv>
    bf03:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    bf07:	0f 92 c0             	setb   %al
    bf0a:	84 c0                	test   %al,%al
    bf0c:	0f 85 20 ff ff ff    	jne    be32 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x7e>
    }
  }
  return {};
    bf12:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    bf19:	48 89 c7             	mov    %rax,%rdi
    bf1c:	e8 e9 23 00 00       	call   e30a <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEC1Ev>
}
    bf21:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    bf28:	48 89 c7             	mov    %rax,%rdi
    bf2b:	e8 94 b2 ff ff       	call   71c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    bf30:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    bf34:	48 89 c7             	mov    %rax,%rdi
    bf37:	e8 88 b2 ff ff       	call   71c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    bf3c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    bf40:	48 89 c7             	mov    %rax,%rdi
    bf43:	e8 7c b2 ff ff       	call   71c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    bf48:	eb 3f                	jmp    bf89 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x1d5>
    bf4a:	48 89 c3             	mov    %rax,%rbx
    bf4d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    bf54:	48 89 c7             	mov    %rax,%rdi
    bf57:	e8 68 b2 ff ff       	call   71c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    bf5c:	eb 03                	jmp    bf61 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x1ad>
    bf5e:	48 89 c3             	mov    %rax,%rbx
    bf61:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    bf65:	48 89 c7             	mov    %rax,%rdi
    bf68:	e8 57 b2 ff ff       	call   71c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    bf6d:	eb 03                	jmp    bf72 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x1be>
    bf6f:	48 89 c3             	mov    %rax,%rbx
    bf72:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    bf76:	48 89 c7             	mov    %rax,%rdi
    bf79:	e8 46 b2 ff ff       	call   71c4 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    bf7e:	48 89 d8             	mov    %rbx,%rax
    bf81:	48 89 c7             	mov    %rax,%rdi
    bf84:	e8 67 76 ff ff       	call   35f0 <_Unwind_Resume@plt>
    bf89:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    bf90:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    bf94:	c9                   	leave
    bf95:	c3                   	ret

000000000000bf96 <_ZN9VulkanApp12createDeviceEv>:

void VulkanApp::createDevice() {
    bf96:	55                   	push   %rbp
    bf97:	48 89 e5             	mov    %rsp,%rbp
    bf9a:	41 54                	push   %r12
    bf9c:	53                   	push   %rbx
    bf9d:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp
    bfa4:	48 89 bd f8 fd ff ff 	mov    %rdi,-0x208(%rbp)
  /* Select a suitable physical device and one of its queue families */
  auto physicalDeviceList = vkh::getPhysicalDeviceList(instance);
    bfab:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    bfb2:	48 8b 50 08          	mov    0x8(%rax),%rdx
    bfb6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    bfba:	48 89 d6             	mov    %rdx,%rsi
    bfbd:	48 89 c7             	mov    %rax,%rdi
    bfc0:	e8 d5 9d ff ff       	call   5d9a <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T>
  VkPhysicalDevice selectedPhysDev = VK_NULL_HANDLE;
    bfc5:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    bfcc:	00 
  std::optional<std::pair<uint32_t, VkQueueFamilyProperties>>
      selectedQueueFamily;
    bfcd:	66 0f ef c0          	pxor   %xmm0,%xmm0
    bfd1:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
    bfd5:	0f 29 45 a0          	movaps %xmm0,-0x60(%rbp)
  for (const auto &physDev : physicalDeviceList) {
    bfd9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    bfdd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    bfe1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    bfe5:	48 89 c7             	mov    %rax,%rdi
    bfe8:	e8 c5 28 00 00       	call   e8b2 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>
    bfed:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
    bff4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    bff8:	48 89 c7             	mov    %rax,%rdi
    bffb:	e8 d8 28 00 00       	call   e8d8 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>
    c000:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
    c007:	e9 dd 00 00 00       	jmp    c0e9 <_ZN9VulkanApp12createDeviceEv+0x153>
    c00c:	48 8d 85 28 fe ff ff 	lea    -0x1d8(%rbp),%rax
    c013:	48 89 c7             	mov    %rax,%rdi
    c016:	e8 41 29 00 00       	call   e95c <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>
    c01b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    graphics, computing, and presentation commands */
    /* When the application creates a swapchain, the selected physical device
    must support VK_KHR_swapchain */
    /* Also, the selected physical device must be compatible with the swapchain
     that will be created. */
    if (checkDeviceProperties(physDev) &&
    c01f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c023:	48 8b 10             	mov    (%rax),%rdx
    c026:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c02d:	48 89 d6             	mov    %rdx,%rsi
    c030:	48 89 c7             	mov    %rax,%rdi
    c033:	e8 3c fd ff ff       	call   bd74 <_ZN9VulkanApp21checkDevicePropertiesEP18VkPhysicalDevice_T>
        checkDeviceExtensionSupport(physDev) &&
    c038:	84 c0                	test   %al,%al
    c03a:	74 41                	je     c07d <_ZN9VulkanApp12createDeviceEv+0xe7>
    c03c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c040:	48 8b 10             	mov    (%rax),%rdx
    c043:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c04a:	48 89 d6             	mov    %rdx,%rsi
    c04d:	48 89 c7             	mov    %rax,%rdi
    c050:	e8 f9 02 00 00       	call   c34e <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T>
    if (checkDeviceProperties(physDev) &&
    c055:	84 c0                	test   %al,%al
    c057:	74 24                	je     c07d <_ZN9VulkanApp12createDeviceEv+0xe7>
        checkDeviceSwapchainSupport(physDev)) {
    c059:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c05d:	48 8b 10             	mov    (%rax),%rdx
    c060:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c067:	48 89 d6             	mov    %rdx,%rsi
    c06a:	48 89 c7             	mov    %rax,%rdi
    c06d:	e8 16 06 00 00       	call   c688 <_ZN9VulkanApp27checkDeviceSwapchainSupportEP18VkPhysicalDevice_T>
        checkDeviceExtensionSupport(physDev) &&
    c072:	84 c0                	test   %al,%al
    c074:	74 07                	je     c07d <_ZN9VulkanApp12createDeviceEv+0xe7>
    c076:	b8 01 00 00 00       	mov    $0x1,%eax
    c07b:	eb 05                	jmp    c082 <_ZN9VulkanApp12createDeviceEv+0xec>
    c07d:	b8 00 00 00 00       	mov    $0x0,%eax
    if (checkDeviceProperties(physDev) &&
    c082:	84 c0                	test   %al,%al
    c084:	74 54                	je     c0da <_ZN9VulkanApp12createDeviceEv+0x144>
      if (auto returnedQueueFamily = selectQueueFamily(physDev);
    c086:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c08a:	48 8b 10             	mov    (%rax),%rdx
    c08d:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    c094:	48 8b 8d f8 fd ff ff 	mov    -0x208(%rbp),%rcx
    c09b:	48 89 ce             	mov    %rcx,%rsi
    c09e:	48 89 c7             	mov    %rax,%rdi
    c0a1:	e8 0e fd ff ff       	call   bdb4 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T>
          returnedQueueFamily.has_value()) {
    c0a6:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    c0ad:	48 89 c7             	mov    %rax,%rdi
    c0b0:	e8 b9 28 00 00       	call   e96e <_ZNKSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE9has_valueEv>
      if (auto returnedQueueFamily = selectQueueFamily(physDev);
    c0b5:	84 c0                	test   %al,%al
    c0b7:	74 21                	je     c0da <_ZN9VulkanApp12createDeviceEv+0x144>
        selectedQueueFamily = returnedQueueFamily;
    c0b9:	48 8d 95 00 fe ff ff 	lea    -0x200(%rbp),%rdx
    c0c0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    c0c4:	48 89 d6             	mov    %rdx,%rsi
    c0c7:	48 89 c7             	mov    %rax,%rdi
    c0ca:	e8 8d 22 00 00       	call   e35c <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEaSERKS3_>
        selectedPhysDev = physDev;
    c0cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c0d3:	48 8b 00             	mov    (%rax),%rax
    c0d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  for (const auto &physDev : physicalDeviceList) {
    c0da:	48 8d 85 28 fe ff ff 	lea    -0x1d8(%rbp),%rax
    c0e1:	48 89 c7             	mov    %rax,%rdi
    c0e4:	e8 53 28 00 00       	call   e93c <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>
    c0e9:	48 8d 95 20 fe ff ff 	lea    -0x1e0(%rbp),%rdx
    c0f0:	48 8d 85 28 fe ff ff 	lea    -0x1d8(%rbp),%rax
    c0f7:	48 89 d6             	mov    %rdx,%rsi
    c0fa:	48 89 c7             	mov    %rax,%rdi
    c0fd:	e8 ff 27 00 00       	call   e901 <_ZN9__gnu_cxxneIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    c102:	84 c0                	test   %al,%al
    c104:	0f 85 02 ff ff ff    	jne    c00c <_ZN9VulkanApp12createDeviceEv+0x76>
      }
    }
  }
  if (selectedPhysDev == VK_NULL_HANDLE) {
    c10a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    c10f:	75 3b                	jne    c14c <_ZN9VulkanApp12createDeviceEv+0x1b6>
    throw std::runtime_error("Failed to select a physical device.");
    c111:	bf 10 00 00 00       	mov    $0x10,%edi
    c116:	e8 35 70 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    c11b:	48 89 c3             	mov    %rax,%rbx
    c11e:	48 8d 05 ab a2 00 00 	lea    0xa2ab(%rip),%rax        # 163d0 <_ZN6__pstl9execution2v1L5unseqE+0x49>
    c125:	48 89 c6             	mov    %rax,%rsi
    c128:	48 89 df             	mov    %rbx,%rdi
    c12b:	e8 b0 6f ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    c130:	48 8b 05 71 5e 01 00 	mov    0x15e71(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    c137:	48 89 c2             	mov    %rax,%rdx
    c13a:	48 8d 05 ff 5b 01 00 	lea    0x15bff(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    c141:	48 89 c6             	mov    %rax,%rsi
    c144:	48 89 df             	mov    %rbx,%rdi
    c147:	e8 54 74 ff ff       	call   35a0 <__cxa_throw@plt>
  }

  /* Set up the selected queue family's creation info */
  uint32_t selectedIndex = selectedQueueFamily.value().first;
    c14c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    c150:	48 89 c7             	mov    %rax,%rdi
    c153:	e8 2e 22 00 00       	call   e386 <_ZNRSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE5valueEv>
    c158:	8b 00                	mov    (%rax),%eax
    c15a:	89 45 dc             	mov    %eax,-0x24(%rbp)
  const float queuePriority = 1.0f;
    c15d:	f3 0f 10 05 1b a6 00 	movss  0xa61b(%rip),%xmm0        # 16780 <_ZN6__pstl9execution2v1L5unseqE+0x3f9>
    c164:	00 
    c165:	f3 0f 11 45 8c       	movss  %xmm0,-0x74(%rbp)

  VkDeviceQueueCreateInfo queueInfo{};
    c16a:	66 0f ef c0          	pxor   %xmm0,%xmm0
    c16e:	0f 29 85 60 ff ff ff 	movaps %xmm0,-0xa0(%rbp)
    c175:	0f 29 85 70 ff ff ff 	movaps %xmm0,-0x90(%rbp)
    c17c:	66 0f d6 45 80       	movq   %xmm0,-0x80(%rbp)
  queueInfo.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
    c181:	c7 85 60 ff ff ff 02 	movl   $0x2,-0xa0(%rbp)
    c188:	00 00 00 
  queueInfo.pNext = nullptr;
    c18b:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
    c192:	00 00 00 00 
  queueInfo.queueFamilyIndex = selectedIndex;
    c196:	8b 45 dc             	mov    -0x24(%rbp),%eax
    c199:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  queueInfo.queueCount = 1;
    c19f:	c7 85 78 ff ff ff 01 	movl   $0x1,-0x88(%rbp)
    c1a6:	00 00 00 
  queueInfo.pQueuePriorities = &queuePriority;
    c1a9:	48 8d 45 8c          	lea    -0x74(%rbp),%rax
    c1ad:	48 89 45 80          	mov    %rax,-0x80(%rbp)

  /* Create the logical device */
  VkPhysicalDeviceFeatures deviceFeatures{};
    c1b1:	48 8d 95 80 fe ff ff 	lea    -0x180(%rbp),%rdx
    c1b8:	b8 00 00 00 00       	mov    $0x0,%eax
    c1bd:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    c1c2:	48 89 d7             	mov    %rdx,%rdi
    c1c5:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    c1c8:	48 89 fa             	mov    %rdi,%rdx
    c1cb:	89 02                	mov    %eax,(%rdx)
    c1cd:	48 83 c2 04          	add    $0x4,%rdx

  VkDeviceCreateInfo deviceCreateInfo{};
    c1d1:	66 0f ef c0          	pxor   %xmm0,%xmm0
    c1d5:	0f 29 85 30 fe ff ff 	movaps %xmm0,-0x1d0(%rbp)
    c1dc:	0f 29 85 40 fe ff ff 	movaps %xmm0,-0x1c0(%rbp)
    c1e3:	0f 29 85 50 fe ff ff 	movaps %xmm0,-0x1b0(%rbp)
    c1ea:	0f 29 85 60 fe ff ff 	movaps %xmm0,-0x1a0(%rbp)
    c1f1:	66 0f d6 85 70 fe ff 	movq   %xmm0,-0x190(%rbp)
    c1f8:	ff 
  deviceCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
    c1f9:	c7 85 30 fe ff ff 03 	movl   $0x3,-0x1d0(%rbp)
    c200:	00 00 00 
  deviceCreateInfo.pNext = nullptr;
    c203:	48 c7 85 38 fe ff ff 	movq   $0x0,-0x1c8(%rbp)
    c20a:	00 00 00 00 
  deviceCreateInfo.queueCreateInfoCount = 1;
    c20e:	c7 85 44 fe ff ff 01 	movl   $0x1,-0x1bc(%rbp)
    c215:	00 00 00 
  deviceCreateInfo.pQueueCreateInfos = &queueInfo;
    c218:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    c21f:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
  deviceCreateInfo.enabledExtensionCount =
      static_cast<uint32_t>(deviceExtensions.size());
    c226:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c22d:	48 05 88 00 00 00    	add    $0x88,%rax
    c233:	48 89 c7             	mov    %rax,%rdi
    c236:	e8 07 25 00 00       	call   e742 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  deviceCreateInfo.enabledExtensionCount =
    c23b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
  deviceCreateInfo.ppEnabledExtensionNames = deviceExtensions.data();
    c241:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c248:	48 05 88 00 00 00    	add    $0x88,%rax
    c24e:	48 89 c7             	mov    %rax,%rdi
    c251:	e8 34 25 00 00       	call   e78a <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
    c256:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  deviceCreateInfo.pEnabledFeatures = &deviceFeatures;
    c25d:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    c264:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  deviceCreateInfo.enabledLayerCount =
      static_cast<uint32_t>(instanceLayers.size());
    c26b:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c272:	48 83 c0 28          	add    $0x28,%rax
    c276:	48 89 c7             	mov    %rax,%rdi
    c279:	e8 c4 24 00 00       	call   e742 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  deviceCreateInfo.enabledLayerCount =
    c27e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%rbp)
  deviceCreateInfo.ppEnabledLayerNames = instanceLayers.data();
    c284:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c28b:	48 83 c0 28          	add    $0x28,%rax
    c28f:	48 89 c7             	mov    %rax,%rdi
    c292:	e8 cf 24 00 00       	call   e766 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    c297:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)

  device = vkh::createDevice(selectedPhysDev, &deviceCreateInfo);
    c29e:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
    c2a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c2a9:	ba 00 00 00 00       	mov    $0x0,%edx
    c2ae:	48 89 ce             	mov    %rcx,%rsi
    c2b1:	48 89 c7             	mov    %rax,%rdi
    c2b4:	e8 b5 83 ff ff       	call   466e <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks>
    c2b9:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
    c2c0:	48 89 42 50          	mov    %rax,0x50(%rdx)

  /* Get a queue handle */
  vkGetDeviceQueue(device, selectedIndex, 0, &queue);
    c2c4:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c2cb:	48 8d 50 60          	lea    0x60(%rax),%rdx
    c2cf:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c2d6:	48 8b 40 50          	mov    0x50(%rax),%rax
    c2da:	8b 75 dc             	mov    -0x24(%rbp),%esi
    c2dd:	48 89 d1             	mov    %rdx,%rcx
    c2e0:	ba 00 00 00 00       	mov    $0x0,%edx
    c2e5:	48 89 c7             	mov    %rax,%rdi
    c2e8:	e8 b3 71 ff ff       	call   34a0 <vkGetDeviceQueue@plt>

  /* Store the selected device for later uses */
  physicalDevice = selectedPhysDev;
    c2ed:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c2f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c2f8:	48 89 50 58          	mov    %rdx,0x58(%rax)

  /* Store the index of the selected queue family */
  queueFamilyIndex = selectedIndex;
    c2fc:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    c303:	8b 55 dc             	mov    -0x24(%rbp),%edx
    c306:	89 50 68             	mov    %edx,0x68(%rax)
}
    c309:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    c30d:	48 89 c7             	mov    %rax,%rdi
    c310:	e8 af ab ff ff       	call   6ec4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    c315:	eb 2a                	jmp    c341 <_ZN9VulkanApp12createDeviceEv+0x3ab>
    throw std::runtime_error("Failed to select a physical device.");
    c317:	49 89 c4             	mov    %rax,%r12
    c31a:	48 89 df             	mov    %rbx,%rdi
    c31d:	e8 de 6e ff ff       	call   3200 <__cxa_free_exception@plt>
    c322:	4c 89 e3             	mov    %r12,%rbx
    c325:	eb 03                	jmp    c32a <_ZN9VulkanApp12createDeviceEv+0x394>
}
    c327:	48 89 c3             	mov    %rax,%rbx
    c32a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    c32e:	48 89 c7             	mov    %rax,%rdi
    c331:	e8 8e ab ff ff       	call   6ec4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    c336:	48 89 d8             	mov    %rbx,%rax
    c339:	48 89 c7             	mov    %rax,%rdi
    c33c:	e8 af 72 ff ff       	call   35f0 <_Unwind_Resume@plt>
    c341:	48 81 c4 00 02 00 00 	add    $0x200,%rsp
    c348:	5b                   	pop    %rbx
    c349:	41 5c                	pop    %r12
    c34b:	5d                   	pop    %rbp
    c34c:	c3                   	ret
    c34d:	90                   	nop

000000000000c34e <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T>:

bool VulkanApp::checkDeviceExtensionSupport(VkPhysicalDevice physDev) {
    c34e:	55                   	push   %rbp
    c34f:	48 89 e5             	mov    %rsp,%rbp
    c352:	53                   	push   %rbx
    c353:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    c35a:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    c361:	48 89 b5 c0 fe ff ff 	mov    %rsi,-0x140(%rbp)
  auto availableExtensionsList = vkh::getAvailableDeviceExtensionList(physDev);
    c368:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    c36f:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
    c376:	ba 00 00 00 00       	mov    $0x0,%edx
    c37b:	48 89 ce             	mov    %rcx,%rsi
    c37e:	48 89 c7             	mov    %rax,%rdi
    c381:	e8 3f 97 ff ff       	call   5ac5 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc>
  std::map<std::string, uint32_t> helper;
    c386:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    c38d:	48 89 c7             	mov    %rax,%rdi
    c390:	e8 6d 20 00 00       	call   e402 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>
  for (const auto &availableExtension : availableExtensionsList) {
    c395:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    c39c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c3a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c3a4:	48 89 c7             	mov    %rax,%rdi
    c3a7:	e8 d8 26 00 00       	call   ea84 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE5beginEv>
    c3ac:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    c3b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c3b7:	48 89 c7             	mov    %rax,%rdi
    c3ba:	e8 eb 26 00 00       	call   eaaa <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE3endEv>
    c3bf:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    c3c6:	e9 8c 00 00 00       	jmp    c457 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x109>
    c3cb:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    c3d2:	48 89 c7             	mov    %rax,%rdi
    c3d5:	e8 58 27 00 00       	call   eb32 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    c3da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    helper[availableExtension.extensionName]++;
    c3de:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    c3e5:	48 89 c7             	mov    %rax,%rdi
    c3e8:	e8 13 72 ff ff       	call   3600 <_ZNSaIcEC1Ev@plt>
    c3ed:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    c3f1:	48 8d 95 6f ff ff ff 	lea    -0x91(%rbp),%rdx
    c3f8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    c3ff:	48 89 ce             	mov    %rcx,%rsi
    c402:	48 89 c7             	mov    %rax,%rdi
    c405:	e8 36 76 ff ff       	call   3a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    c40a:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    c411:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    c418:	48 89 d6             	mov    %rdx,%rsi
    c41b:	48 89 c7             	mov    %rax,%rdi
    c41e:	e8 21 27 00 00       	call   eb44 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    c423:	8b 10                	mov    (%rax),%edx
    c425:	83 c2 01             	add    $0x1,%edx
    c428:	89 10                	mov    %edx,(%rax)
    c42a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    c431:	48 89 c7             	mov    %rax,%rdi
    c434:	e8 77 6d ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    c439:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    c440:	48 89 c7             	mov    %rax,%rdi
    c443:	e8 68 6f ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
  for (const auto &availableExtension : availableExtensionsList) {
    c448:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    c44f:	48 89 c7             	mov    %rax,%rdi
    c452:	e8 b7 26 00 00       	call   eb0e <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    c457:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    c45e:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    c465:	48 89 d6             	mov    %rdx,%rsi
    c468:	48 89 c7             	mov    %rax,%rdi
    c46b:	e8 63 26 00 00       	call   ead3 <_ZN9__gnu_cxxneIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    c470:	84 c0                	test   %al,%al
    c472:	0f 85 53 ff ff ff    	jne    c3cb <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x7d>
    // std::cout << availableExtension.extensionName << '\n';
  }
  for (const auto &deviceExtension : deviceExtensions) {
    c478:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    c47f:	48 05 88 00 00 00    	add    $0x88,%rax
    c485:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    c489:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c48d:	48 89 c7             	mov    %rax,%rdi
    c490:	e8 4d 21 00 00       	call   e5e2 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
    c495:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    c49c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c4a0:	48 89 c7             	mov    %rax,%rdi
    c4a3:	e8 60 21 00 00       	call   e608 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
    c4a8:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    c4af:	e9 ed 00 00 00       	jmp    c5a1 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x253>
    c4b4:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
    c4bb:	48 89 c7             	mov    %rax,%rdi
    c4be:	e8 c9 21 00 00       	call   e68c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
    c4c3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    helper[deviceExtension]++;
    c4c7:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
    c4cb:	48 89 c7             	mov    %rax,%rdi
    c4ce:	e8 2d 71 ff ff       	call   3600 <_ZNSaIcEC1Ev@plt>
    c4d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c4d7:	48 8b 08             	mov    (%rax),%rcx
    c4da:	48 8d 55 9f          	lea    -0x61(%rbp),%rdx
    c4de:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    c4e5:	48 89 ce             	mov    %rcx,%rsi
    c4e8:	48 89 c7             	mov    %rax,%rdi
    c4eb:	e8 50 75 ff ff       	call   3a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    c4f0:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    c4f7:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    c4fe:	48 89 d6             	mov    %rdx,%rsi
    c501:	48 89 c7             	mov    %rax,%rdi
    c504:	e8 3b 26 00 00       	call   eb44 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    c509:	8b 10                	mov    (%rax),%edx
    c50b:	83 c2 01             	add    $0x1,%edx
    c50e:	89 10                	mov    %edx,(%rax)
    c510:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    c517:	48 89 c7             	mov    %rax,%rdi
    c51a:	e8 91 6c ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    c51f:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
    c523:	48 89 c7             	mov    %rax,%rdi
    c526:	e8 85 6e ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
    if (helper[deviceExtension] < 2) {
    c52b:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    c52f:	48 89 c7             	mov    %rax,%rdi
    c532:	e8 c9 70 ff ff       	call   3600 <_ZNSaIcEC1Ev@plt>
    c537:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c53b:	48 8b 08             	mov    (%rax),%rcx
    c53e:	48 8d 55 cf          	lea    -0x31(%rbp),%rdx
    c542:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    c546:	48 89 ce             	mov    %rcx,%rsi
    c549:	48 89 c7             	mov    %rax,%rdi
    c54c:	e8 ef 74 ff ff       	call   3a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    c551:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    c555:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    c55c:	48 89 d6             	mov    %rdx,%rsi
    c55f:	48 89 c7             	mov    %rax,%rdi
    c562:	e8 dd 25 00 00       	call   eb44 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    c567:	8b 00                	mov    (%rax),%eax
    c569:	83 f8 01             	cmp    $0x1,%eax
    c56c:	0f 96 c3             	setbe  %bl
    c56f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    c573:	48 89 c7             	mov    %rax,%rdi
    c576:	e8 35 6c ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    c57b:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    c57f:	48 89 c7             	mov    %rax,%rdi
    c582:	e8 29 6e ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
    c587:	84 db                	test   %bl,%bl
    c589:	74 07                	je     c592 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x244>
      return false;
    c58b:	bb 00 00 00 00       	mov    $0x0,%ebx
    c590:	eb 35                	jmp    c5c7 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x279>
  for (const auto &deviceExtension : deviceExtensions) {
    c592:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
    c599:	48 89 c7             	mov    %rax,%rdi
    c59c:	e8 cb 20 00 00       	call   e66c <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>
    c5a1:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    c5a8:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
    c5af:	48 89 d6             	mov    %rdx,%rsi
    c5b2:	48 89 c7             	mov    %rax,%rdi
    c5b5:	e8 77 20 00 00       	call   e631 <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    c5ba:	84 c0                	test   %al,%al
    c5bc:	0f 85 f2 fe ff ff    	jne    c4b4 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x166>
    }
  }
  return true;
    c5c2:	bb 01 00 00 00       	mov    $0x1,%ebx
}
    c5c7:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    c5ce:	48 89 c7             	mov    %rax,%rdi
    c5d1:	e8 48 1e 00 00       	call   e41e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    c5d6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    c5dd:	48 89 c7             	mov    %rax,%rdi
    c5e0:	e8 55 a6 ff ff       	call   6c3a <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    c5e5:	89 d8                	mov    %ebx,%eax
    c5e7:	e9 96 00 00 00       	jmp    c682 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x334>
    helper[availableExtension.extensionName]++;
    c5ec:	48 89 c3             	mov    %rax,%rbx
    c5ef:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    c5f6:	48 89 c7             	mov    %rax,%rdi
    c5f9:	e8 b2 6b ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    c5fe:	eb 03                	jmp    c603 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x2b5>
    c600:	48 89 c3             	mov    %rax,%rbx
    c603:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    c60a:	48 89 c7             	mov    %rax,%rdi
    c60d:	e8 9e 6d ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
    c612:	eb 45                	jmp    c659 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x30b>
    helper[deviceExtension]++;
    c614:	48 89 c3             	mov    %rax,%rbx
    c617:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    c61e:	48 89 c7             	mov    %rax,%rdi
    c621:	e8 8a 6b ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    c626:	eb 03                	jmp    c62b <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x2dd>
    c628:	48 89 c3             	mov    %rax,%rbx
    c62b:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
    c62f:	48 89 c7             	mov    %rax,%rdi
    c632:	e8 79 6d ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
    c637:	eb 20                	jmp    c659 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x30b>
    if (helper[deviceExtension] < 2) {
    c639:	48 89 c3             	mov    %rax,%rbx
    c63c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    c640:	48 89 c7             	mov    %rax,%rdi
    c643:	e8 68 6b ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    c648:	eb 03                	jmp    c64d <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x2ff>
    c64a:	48 89 c3             	mov    %rax,%rbx
    c64d:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    c651:	48 89 c7             	mov    %rax,%rdi
    c654:	e8 57 6d ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
}
    c659:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    c660:	48 89 c7             	mov    %rax,%rdi
    c663:	e8 b6 1d 00 00       	call   e41e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    c668:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    c66f:	48 89 c7             	mov    %rax,%rdi
    c672:	e8 c3 a5 ff ff       	call   6c3a <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    c677:	48 89 d8             	mov    %rbx,%rax
    c67a:	48 89 c7             	mov    %rax,%rdi
    c67d:	e8 6e 6f ff ff       	call   35f0 <_Unwind_Resume@plt>
    c682:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    c686:	c9                   	leave
    c687:	c3                   	ret

000000000000c688 <_ZN9VulkanApp27checkDeviceSwapchainSupportEP18VkPhysicalDevice_T>:

bool VulkanApp::checkDeviceSwapchainSupport(
    [[maybe_unused]] VkPhysicalDevice physDev) {
    c688:	55                   	push   %rbp
    c689:	48 89 e5             	mov    %rsp,%rbp
    c68c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c690:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return true;
    c694:	b8 01 00 00 00       	mov    $0x1,%eax
}
    c699:	5d                   	pop    %rbp
    c69a:	c3                   	ret
    c69b:	90                   	nop

000000000000c69c <_ZN9VulkanApp27populateSwapchainCreateInfoEv>:

VkSwapchainCreateInfoKHR VulkanApp::populateSwapchainCreateInfo() {
    c69c:	55                   	push   %rbp
    c69d:	48 89 e5             	mov    %rsp,%rbp
    c6a0:	41 54                	push   %r12
    c6a2:	53                   	push   %rbx
    c6a3:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
    c6aa:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
    c6b1:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  /* Vulkan 1.3.231 - A Specification, pg 2235 */

  auto surfaceCapabilities =
      vkh::getPhysicalDeviceSurfaceCapabilities(physicalDevice, surface);
    c6b8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    c6bf:	48 8b 50 48          	mov    0x48(%rax),%rdx
    c6c3:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    c6ca:	48 8b 48 58          	mov    0x58(%rax),%rcx
    c6ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    c6d2:	48 89 ce             	mov    %rcx,%rsi
    c6d5:	48 89 c7             	mov    %rax,%rdi
    c6d8:	e8 32 9d ff ff       	call   640f <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>
  auto surfaceFormats =
      vkh::getPhysicalDeviceSurfaceFormatList(physicalDevice, surface);
    c6dd:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    c6e4:	48 8b 50 48          	mov    0x48(%rax),%rdx
    c6e8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    c6ef:	48 8b 48 58          	mov    0x58(%rax),%rcx
    c6f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    c6fa:	48 89 ce             	mov    %rcx,%rsi
    c6fd:	48 89 c7             	mov    %rax,%rdi
    c700:	e8 b8 9d ff ff       	call   64bd <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>
  auto surfacePresentModes =
      vkh::getPhysicalDeviceSurfacePresentModeList(physicalDevice, surface);
    c705:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    c70c:	48 8b 50 48          	mov    0x48(%rax),%rdx
    c710:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    c717:	48 8b 48 58          	mov    0x58(%rax),%rcx
    c71b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    c722:	48 89 ce             	mov    %rcx,%rsi
    c725:	48 89 c7             	mov    %rax,%rdi
    c728:	e8 07 9f ff ff       	call   6634 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>

  VkSwapchainCreateInfoKHR swapchainCreateInfo{};
    c72d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c734:	48 89 c6             	mov    %rax,%rsi
    c737:	b8 00 00 00 00       	mov    $0x0,%eax
    c73c:	ba 0d 00 00 00       	mov    $0xd,%edx
    c741:	48 89 f7             	mov    %rsi,%rdi
    c744:	48 89 d1             	mov    %rdx,%rcx
    c747:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  swapchainCreateInfo.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
    c74a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c751:	c7 00 e8 cd 9a 3b    	movl   $0x3b9acde8,(%rax)
  swapchainCreateInfo.pNext = nullptr;
    c757:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c75e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c765:	00 
  pNext chain must include a VkImageFormatListCreateInfo structure with a
  viewFormatCount greater than zero and pViewFormats must have an element
  equal to imageFormat */
  // swapchainCreateInfo.flags = VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR;

  swapchainCreateInfo.surface = surface;
    c766:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    c76d:	48 8b 50 48          	mov    0x48(%rax),%rdx
    c771:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c778:	48 89 50 18          	mov    %rdx,0x18(%rax)

  /* plus 1 to prevent waiting on the driver to complete internal operations
  before another image is accquired */
  uint32_t minImageCount = surfaceCapabilities.minImageCount + 1;
    c77c:	8b 45 80             	mov    -0x80(%rbp),%eax
    c77f:	83 c0 01             	add    $0x1,%eax
    c782:	89 45 ec             	mov    %eax,-0x14(%rbp)

  /* minImageCount <= surfaceCapabilities.maxImageCount, and
  surfaceCapabilities.maxImageCount might be less than
  surfaceCapabilities.minImageCount */
  if (surfaceCapabilities.maxImageCount > 0 &&
    c785:	8b 45 84             	mov    -0x7c(%rbp),%eax
    c788:	85 c0                	test   %eax,%eax
    c78a:	74 0e                	je     c79a <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0xfe>
      minImageCount > surfaceCapabilities.maxImageCount) {
    c78c:	8b 45 84             	mov    -0x7c(%rbp),%eax
  if (surfaceCapabilities.maxImageCount > 0 &&
    c78f:	3b 45 ec             	cmp    -0x14(%rbp),%eax
    c792:	73 06                	jae    c79a <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0xfe>
    minImageCount = surfaceCapabilities.maxImageCount;
    c794:	8b 45 84             	mov    -0x7c(%rbp),%eax
    c797:	89 45 ec             	mov    %eax,-0x14(%rbp)
  }
  swapchainCreateInfo.minImageCount = minImageCount;
    c79a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c7a1:	8b 55 ec             	mov    -0x14(%rbp),%edx
    c7a4:	89 50 20             	mov    %edx,0x20(%rax)

  /* imageFormat and imageColorSpace must match the surfaceFormats.format and
  surfaceFormats.colorSpace members, respectively */
  if (surfaceFormats.empty()) {
    c7a7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    c7ae:	48 89 c7             	mov    %rax,%rdi
    c7b1:	e8 92 24 00 00       	call   ec48 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5emptyEv>
    c7b6:	84 c0                	test   %al,%al
    c7b8:	74 3b                	je     c7f5 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x159>
    throw std::runtime_error("No surface format available.");
    c7ba:	bf 10 00 00 00       	mov    $0x10,%edi
    c7bf:	e8 8c 69 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    c7c4:	48 89 c3             	mov    %rax,%rbx
    c7c7:	48 8d 05 26 9c 00 00 	lea    0x9c26(%rip),%rax        # 163f4 <_ZN6__pstl9execution2v1L5unseqE+0x6d>
    c7ce:	48 89 c6             	mov    %rax,%rsi
    c7d1:	48 89 df             	mov    %rbx,%rdi
    c7d4:	e8 07 69 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
    c7d9:	48 8b 05 c8 57 01 00 	mov    0x157c8(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    c7e0:	48 89 c2             	mov    %rax,%rdx
    c7e3:	48 8d 05 56 55 01 00 	lea    0x15556(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    c7ea:	48 89 c6             	mov    %rax,%rsi
    c7ed:	48 89 df             	mov    %rbx,%rdi
    c7f0:	e8 ab 6d ff ff       	call   35a0 <__cxa_throw@plt>
  }
  swapchainCreateInfo.imageFormat = surfaceFormats[0].format;
    c7f5:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    c7fc:	be 00 00 00 00       	mov    $0x0,%esi
    c801:	48 89 c7             	mov    %rax,%rdi
    c804:	e8 81 24 00 00       	call   ec8a <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEixEm>
    c809:	8b 10                	mov    (%rax),%edx
    c80b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c812:	89 50 24             	mov    %edx,0x24(%rax)
  swapchainCreateInfo.imageColorSpace = surfaceFormats[0].colorSpace;
    c815:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    c81c:	be 00 00 00 00       	mov    $0x0,%esi
    c821:	48 89 c7             	mov    %rax,%rdi
    c824:	e8 61 24 00 00       	call   ec8a <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEixEm>
    c829:	8b 50 04             	mov    0x4(%rax),%edx
    c82c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c833:	89 50 28             	mov    %edx,0x28(%rax)
  for (const auto &format : surfaceFormats) {
    c836:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    c83d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    c841:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c845:	48 89 c7             	mov    %rax,%rdi
    c848:	e8 5d 24 00 00       	call   ecaa <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5beginEv>
    c84d:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    c854:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c858:	48 89 c7             	mov    %rax,%rdi
    c85b:	e8 70 24 00 00       	call   ecd0 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE3endEv>
    c860:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    c867:	eb 5b                	jmp    c8c4 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x228>
    c869:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
    c870:	48 89 c7             	mov    %rax,%rdi
    c873:	e8 dc 24 00 00       	call   ed54 <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEdeEv>
    c878:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if (format.format == VK_FORMAT_R8G8B8A8_SRGB &&
    c87c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c880:	8b 00                	mov    (%rax),%eax
    c882:	83 f8 2b             	cmp    $0x2b,%eax
    c885:	75 2e                	jne    c8b5 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x219>
        format.colorSpace == VK_COLOR_SPACE_SRGB_NONLINEAR_KHR) {
    c887:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c88b:	8b 40 04             	mov    0x4(%rax),%eax
    if (format.format == VK_FORMAT_R8G8B8A8_SRGB &&
    c88e:	85 c0                	test   %eax,%eax
    c890:	75 23                	jne    c8b5 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x219>
      swapchainCreateInfo.imageFormat = format.format;
    c892:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c896:	8b 10                	mov    (%rax),%edx
    c898:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c89f:	89 50 24             	mov    %edx,0x24(%rax)
      swapchainCreateInfo.imageColorSpace = format.colorSpace;
    c8a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c8a6:	8b 50 04             	mov    0x4(%rax),%edx
    c8a9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c8b0:	89 50 28             	mov    %edx,0x28(%rax)
      break;
    c8b3:	eb 2c                	jmp    c8e1 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x245>
  for (const auto &format : surfaceFormats) {
    c8b5:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
    c8bc:	48 89 c7             	mov    %rax,%rdi
    c8bf:	e8 70 24 00 00       	call   ed34 <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEppEv>
    c8c4:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    c8cb:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
    c8d2:	48 89 d6             	mov    %rdx,%rsi
    c8d5:	48 89 c7             	mov    %rax,%rdi
    c8d8:	e8 1c 24 00 00       	call   ecf9 <_ZN9__gnu_cxxneIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    c8dd:	84 c0                	test   %al,%al
    c8df:	75 88                	jne    c869 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x1cd>
    }
  }
  swapchain.format = swapchainCreateInfo.imageFormat;
    c8e1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c8e8:	8b 50 24             	mov    0x24(%rax),%edx
    c8eb:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    c8f2:	89 50 78             	mov    %edx,0x78(%rax)

  /* imageExtent is the size (in pixels) of the swapchain
  image(s). The behavior is platform-dependent if the image
  extent does not match the surface’s currentExtent as returned
  by vkGetPhysicalDeviceSurfaceCapabilitiesKHR. */
  uint32_t imageExtentWidth = surfaceCapabilities.currentExtent.width;
    c8f5:	8b 45 88             	mov    -0x78(%rbp),%eax
    c8f8:	89 45 e8             	mov    %eax,-0x18(%rbp)
  uint32_t imageExtentHeight = surfaceCapabilities.currentExtent.height;
    c8fb:	8b 45 8c             	mov    -0x74(%rbp),%eax
    c8fe:	89 45 e4             	mov    %eax,-0x1c(%rbp)

  /* {0, 0} <= minImageExtent <= imageExtent <= maxImageExtent */
  if (imageExtentWidth > surfaceCapabilities.maxImageExtent.width) {
    c901:	8b 45 98             	mov    -0x68(%rbp),%eax
    c904:	3b 45 e8             	cmp    -0x18(%rbp),%eax
    c907:	73 06                	jae    c90f <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x273>
    imageExtentWidth = surfaceCapabilities.maxImageExtent.width;
    c909:	8b 45 98             	mov    -0x68(%rbp),%eax
    c90c:	89 45 e8             	mov    %eax,-0x18(%rbp)
  }
  if (imageExtentHeight > surfaceCapabilities.maxImageExtent.height) {
    c90f:	8b 45 9c             	mov    -0x64(%rbp),%eax
    c912:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    c915:	73 06                	jae    c91d <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x281>
    imageExtentHeight = surfaceCapabilities.maxImageExtent.height;
    c917:	8b 45 9c             	mov    -0x64(%rbp),%eax
    c91a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  }
  swapchainCreateInfo.imageExtent = {imageExtentWidth, imageExtentHeight};
    c91d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c924:	8b 55 e8             	mov    -0x18(%rbp),%edx
    c927:	89 50 2c             	mov    %edx,0x2c(%rax)
    c92a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c931:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    c934:	89 50 30             	mov    %edx,0x30(%rax)
  swapchain.extent = swapchainCreateInfo.imageExtent;
    c937:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    c93e:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
    c945:	48 8b 52 2c          	mov    0x2c(%rdx),%rdx
    c949:	48 89 50 7c          	mov    %rdx,0x7c(%rax)

  /* imageArrayLayers is the number of views in a multiview/stereo surface. For
  non-stereoscopic-3D applications, this value is 1. */
  /* 0 < imageArrayLayers <= maxImageArrayLayers */
  swapchainCreateInfo.imageArrayLayers = 1;
    c94d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c954:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%rax)

  /* {presentMode} determines how incoming present requests will be processed
  and queued internally. */
  /* enum {VkPresentModeKHR}, pg 2219 */
  /* {VK_PRESENT_MODE_FIFO_KHR} is guaranteed to be available */
  swapchainCreateInfo.presentMode = VK_PRESENT_MODE_FIFO_KHR;
    c95b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c962:	c7 40 58 02 00 00 00 	movl   $0x2,0x58(%rax)
  auto preferredPresentMode = VK_PRESENT_MODE_IMMEDIATE_KHR;
    c969:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
  for (const auto &presentMode : surfacePresentModes) {
    c970:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    c977:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    c97b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c97f:	48 89 c7             	mov    %rax,%rdi
    c982:	e8 df 23 00 00       	call   ed66 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE5beginEv>
    c987:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    c98e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c992:	48 89 c7             	mov    %rax,%rdi
    c995:	e8 f2 23 00 00       	call   ed8c <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE3endEv>
    c99a:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    c9a1:	eb 3c                	jmp    c9df <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x343>
    c9a3:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
    c9aa:	48 89 c7             	mov    %rax,%rdi
    c9ad:	e8 5e 24 00 00       	call   ee10 <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEdeEv>
    c9b2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    if (presentMode == preferredPresentMode) {
    c9b6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    c9ba:	8b 00                	mov    (%rax),%eax
    c9bc:	39 45 cc             	cmp    %eax,-0x34(%rbp)
    c9bf:	75 0f                	jne    c9d0 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x334>
      swapchainCreateInfo.presentMode = preferredPresentMode;
    c9c1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    c9c8:	8b 55 cc             	mov    -0x34(%rbp),%edx
    c9cb:	89 50 58             	mov    %edx,0x58(%rax)
      break;
    c9ce:	eb 2c                	jmp    c9fc <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x360>
  for (const auto &presentMode : surfacePresentModes) {
    c9d0:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
    c9d7:	48 89 c7             	mov    %rax,%rdi
    c9da:	e8 11 24 00 00       	call   edf0 <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEppEv>
    c9df:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    c9e6:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
    c9ed:	48 89 d6             	mov    %rdx,%rsi
    c9f0:	48 89 c7             	mov    %rax,%rdi
    c9f3:	e8 bd 23 00 00       	call   edb5 <_ZN9__gnu_cxxneIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    c9f8:	84 c0                	test   %al,%al
    c9fa:	75 a7                	jne    c9a3 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x307>
  }

  /* {VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT} specifies that the image can be used
  to create a {VkImageView} suitable for use as a color or resolve attachment in
  a {VkFramebuffer}, pg 898 */
  swapchainCreateInfo.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
    c9fc:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    ca03:	c7 40 38 10 00 00 00 	movl   $0x10,0x38(%rax)

  /* {VK_SHARING_MODE_EXCLUSIVE} requires some works to be done with ownership
   */
  swapchainCreateInfo.imageSharingMode = VK_SHARING_MODE_EXCLUSIVE;
    ca0a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    ca11:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  swapchainCreateInfo.queueFamilyIndexCount = 0;
    ca18:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    ca1f:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)
  swapchainCreateInfo.pQueueFamilyIndices = nullptr;
    ca26:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    ca2d:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
    ca34:	00 

  /* image content is presented without being transformed */
  if (surfaceCapabilities.supportedTransforms &
    ca35:	8b 45 a4             	mov    -0x5c(%rbp),%eax
    ca38:	83 e0 01             	and    $0x1,%eax
    ca3b:	85 c0                	test   %eax,%eax
    ca3d:	74 1e                	je     ca5d <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x3c1>
      VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR) {
    swapchainCreateInfo.preTransform = VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;
    ca3f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    ca46:	c7 40 50 01 00 00 00 	movl   $0x1,0x50(%rax)
  } else {
    throw std::runtime_error(
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
  }

  if (surfaceCapabilities.supportedCompositeAlpha &
    ca4d:	8b 45 ac             	mov    -0x54(%rbp),%eax
    ca50:	83 e0 01             	and    $0x1,%eax
    ca53:	85 c0                	test   %eax,%eax
    ca55:	0f 84 9b 00 00 00    	je     caf6 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x45a>
    ca5b:	eb 3b                	jmp    ca98 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x3fc>
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
    ca5d:	bf 10 00 00 00       	mov    $0x10,%edi
    ca62:	e8 e9 66 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    ca67:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    ca6a:	48 8d 05 a7 99 00 00 	lea    0x99a7(%rip),%rax        # 16418 <_ZN6__pstl9execution2v1L5unseqE+0x91>
    ca71:	48 89 c6             	mov    %rax,%rsi
    ca74:	48 89 df             	mov    %rbx,%rdi
    ca77:	e8 64 66 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
    ca7c:	48 8b 05 25 55 01 00 	mov    0x15525(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    ca83:	48 89 c2             	mov    %rax,%rdx
    ca86:	48 8d 05 b3 52 01 00 	lea    0x152b3(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    ca8d:	48 89 c6             	mov    %rax,%rsi
    ca90:	48 89 df             	mov    %rbx,%rdi
    ca93:	e8 08 6b ff ff       	call   35a0 <__cxa_throw@plt>
      VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR) {
    swapchainCreateInfo.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
    ca98:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    ca9f:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%rax)
  } else {
    throw std::runtime_error(
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
  }

  swapchainCreateInfo.clipped = VK_TRUE;
    caa6:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    caad:	c7 40 5c 01 00 00 00 	movl   $0x1,0x5c(%rax)

  swapchainCreateInfo.pNext = nullptr;
    cab4:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    cabb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    cac2:	00 
  swapchainCreateInfo.oldSwapchain = VK_NULL_HANDLE;
    cac3:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    caca:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
    cad1:	00 

  return swapchainCreateInfo;
    cad2:	90                   	nop
}
    cad3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    cada:	48 89 c7             	mov    %rax,%rdi
    cadd:	e8 f6 aa ff ff       	call   75d8 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EED1Ev>
    cae2:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    cae9:	48 89 c7             	mov    %rax,%rdi
    caec:	e8 83 a9 ff ff       	call   7474 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EED1Ev>
  return swapchainCreateInfo;
    caf1:	e9 9c 00 00 00       	jmp    cb92 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x4f6>
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
    caf6:	bf 10 00 00 00       	mov    $0x10,%edi
    cafb:	e8 50 66 ff ff       	call   3150 <__cxa_allocate_exception@plt>
    cb00:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    cb03:	48 8d 05 46 99 00 00 	lea    0x9946(%rip),%rax        # 16450 <_ZN6__pstl9execution2v1L5unseqE+0xc9>
    cb0a:	48 89 c6             	mov    %rax,%rsi
    cb0d:	48 89 df             	mov    %rbx,%rdi
    cb10:	e8 cb 65 ff ff       	call   30e0 <_ZNSt13runtime_errorC1EPKc@plt>
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
    cb15:	48 8b 05 8c 54 01 00 	mov    0x1548c(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    cb1c:	48 89 c2             	mov    %rax,%rdx
    cb1f:	48 8d 05 1a 52 01 00 	lea    0x1521a(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    cb26:	48 89 c6             	mov    %rax,%rsi
    cb29:	48 89 df             	mov    %rbx,%rdi
    cb2c:	e8 6f 6a ff ff       	call   35a0 <__cxa_throw@plt>
    throw std::runtime_error("No surface format available.");
    cb31:	49 89 c4             	mov    %rax,%r12
    cb34:	48 89 df             	mov    %rbx,%rdi
    cb37:	e8 c4 66 ff ff       	call   3200 <__cxa_free_exception@plt>
    cb3c:	4c 89 e3             	mov    %r12,%rbx
    cb3f:	eb 23                	jmp    cb64 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x4c8>
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
    cb41:	49 89 c4             	mov    %rax,%r12
    cb44:	48 89 df             	mov    %rbx,%rdi
    cb47:	e8 b4 66 ff ff       	call   3200 <__cxa_free_exception@plt>
    cb4c:	4c 89 e3             	mov    %r12,%rbx
    cb4f:	eb 13                	jmp    cb64 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x4c8>
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
    cb51:	49 89 c4             	mov    %rax,%r12
    cb54:	48 89 df             	mov    %rbx,%rdi
    cb57:	e8 a4 66 ff ff       	call   3200 <__cxa_free_exception@plt>
    cb5c:	4c 89 e3             	mov    %r12,%rbx
    cb5f:	eb 03                	jmp    cb64 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x4c8>
}
    cb61:	48 89 c3             	mov    %rax,%rbx
    cb64:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    cb6b:	48 89 c7             	mov    %rax,%rdi
    cb6e:	e8 65 aa ff ff       	call   75d8 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EED1Ev>
    cb73:	eb 03                	jmp    cb78 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x4dc>
    cb75:	48 89 c3             	mov    %rax,%rbx
    cb78:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    cb7f:	48 89 c7             	mov    %rax,%rdi
    cb82:	e8 ed a8 ff ff       	call   7474 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EED1Ev>
    cb87:	48 89 d8             	mov    %rbx,%rax
    cb8a:	48 89 c7             	mov    %rax,%rdi
    cb8d:	e8 5e 6a ff ff       	call   35f0 <_Unwind_Resume@plt>
    cb92:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    cb99:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
    cba0:	5b                   	pop    %rbx
    cba1:	41 5c                	pop    %r12
    cba3:	5d                   	pop    %rbp
    cba4:	c3                   	ret
    cba5:	90                   	nop

000000000000cba6 <_ZN9VulkanApp15createSwapchainEv>:

void VulkanApp::createSwapchain() {
    cba6:	55                   	push   %rbp
    cba7:	48 89 e5             	mov    %rsp,%rbp
    cbaa:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
    cbae:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  auto swapchainCreateInfo = populateSwapchainCreateInfo();
    cbb2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    cbb6:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    cbba:	48 89 d6             	mov    %rdx,%rsi
    cbbd:	48 89 c7             	mov    %rax,%rdi
    cbc0:	e8 d7 fa ff ff       	call   c69c <_ZN9VulkanApp27populateSwapchainCreateInfoEv>
  swapchain.self = vkh::createSwapchain(device, &swapchainCreateInfo);
    cbc5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    cbc9:	48 8b 40 50          	mov    0x50(%rax),%rax
    cbcd:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
    cbd1:	ba 00 00 00 00       	mov    $0x0,%edx
    cbd6:	48 89 ce             	mov    %rcx,%rsi
    cbd9:	48 89 c7             	mov    %rax,%rdi
    cbdc:	e8 bd 7b ff ff       	call   479e <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks>
    cbe1:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    cbe5:	48 89 42 70          	mov    %rax,0x70(%rdx)
}
    cbe9:	90                   	nop
    cbea:	c9                   	leave
    cbeb:	c3                   	ret

000000000000cbec <_ZN9VulkanApp16createImageViewsEv>:

void VulkanApp::createImageViews() {
    cbec:	55                   	push   %rbp
    cbed:	48 89 e5             	mov    %rsp,%rbp
    cbf0:	53                   	push   %rbx
    cbf1:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    cbf8:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  images = vkh::getSwapchainImages(device, swapchain.self);
    cbff:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    cc06:	48 8b 50 70          	mov    0x70(%rax),%rdx
    cc0a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    cc11:	48 8b 48 50          	mov    0x50(%rax),%rcx
    cc15:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    cc19:	48 89 ce             	mov    %rcx,%rsi
    cc1c:	48 89 c7             	mov    %rax,%rdi
    cc1f:	e8 87 9b ff ff       	call   67ab <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T>
    cc24:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    cc2b:	48 8d 90 b8 00 00 00 	lea    0xb8(%rax),%rdx
    cc32:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    cc36:	48 89 c6             	mov    %rax,%rsi
    cc39:	48 89 d7             	mov    %rdx,%rdi
    cc3c:	e8 e1 21 00 00       	call   ee22 <_ZNSt6vectorIP9VkImage_TSaIS1_EEaSEOS3_>
    cc41:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    cc45:	48 89 c7             	mov    %rax,%rdi
    cc48:	e8 ef aa ff ff       	call   773c <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
  size_t imageCount = images.size();
    cc4d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    cc54:	48 05 b8 00 00 00    	add    $0xb8,%rax
    cc5a:	48 89 c7             	mov    %rax,%rdi
    cc5d:	e8 f8 21 00 00       	call   ee5a <_ZNKSt6vectorIP9VkImage_TSaIS1_EE4sizeEv>
    cc62:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  imageViews.resize(imageCount);
    cc66:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    cc6d:	48 8d 90 a0 00 00 00 	lea    0xa0(%rax),%rdx
    cc74:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cc78:	48 89 c6             	mov    %rax,%rsi
    cc7b:	48 89 d7             	mov    %rdx,%rdi
    cc7e:	e8 fb 21 00 00       	call   ee7e <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm>
  for (size_t i = 0; i < imageCount; ++i) {
    cc83:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    cc8a:	00 
    cc8b:	e9 f1 00 00 00       	jmp    cd81 <_ZN9VulkanApp16createImageViewsEv+0x195>
    VkImageViewCreateInfo imageViewInfo{};
    cc90:	66 0f ef c0          	pxor   %xmm0,%xmm0
    cc94:	0f 29 85 70 ff ff ff 	movaps %xmm0,-0x90(%rbp)
    cc9b:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
    cc9f:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
    cca3:	0f 29 45 a0          	movaps %xmm0,-0x60(%rbp)
    cca7:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
    imageViewInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
    ccab:	c7 85 70 ff ff ff 0f 	movl   $0xf,-0x90(%rbp)
    ccb2:	00 00 00 
    imageViewInfo.pNext = nullptr;
    ccb5:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
    ccbc:	00 00 00 00 
    // imageViewInfo.flags =
    imageViewInfo.image = images[i];
    ccc0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    ccc7:	48 8d 90 b8 00 00 00 	lea    0xb8(%rax),%rdx
    ccce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ccd2:	48 89 c6             	mov    %rax,%rsi
    ccd5:	48 89 d7             	mov    %rdx,%rdi
    ccd8:	e8 27 22 00 00       	call   ef04 <_ZNSt6vectorIP9VkImage_TSaIS1_EEixEm>
    ccdd:	48 8b 00             	mov    (%rax),%rax
    cce0:	48 89 45 88          	mov    %rax,-0x78(%rbp)

    /* treat images as 2D textures */
    imageViewInfo.viewType = VK_IMAGE_VIEW_TYPE_2D;
    cce4:	c7 45 90 01 00 00 00 	movl   $0x1,-0x70(%rbp)

    imageViewInfo.format = swapchain.format;
    cceb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    ccf2:	8b 40 78             	mov    0x78(%rax),%eax
    ccf5:	89 45 94             	mov    %eax,-0x6c(%rbp)

    /* default mapping */
    imageViewInfo.components.r = VK_COMPONENT_SWIZZLE_IDENTITY;
    ccf8:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%rbp)
    imageViewInfo.components.g = VK_COMPONENT_SWIZZLE_IDENTITY;
    ccff:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    imageViewInfo.components.b = VK_COMPONENT_SWIZZLE_IDENTITY;
    cd06:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%rbp)
    imageViewInfo.components.a = VK_COMPONENT_SWIZZLE_IDENTITY;
    cd0d:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%rbp)

    /* color aspect */
    imageViewInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
    cd14:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)

    /* In stereographic 3D applications, create a swapchain with multiple
    layers before creating multiple image views for each images representing
    the views for the left and right eyes by accessing different layers */
    imageViewInfo.subresourceRange.baseMipLevel = 0;
    cd1b:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
    imageViewInfo.subresourceRange.levelCount = 1;
    cd22:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
    imageViewInfo.subresourceRange.baseArrayLayer = 0;
    cd29:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
    imageViewInfo.subresourceRange.layerCount = 1;
    cd30:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%rbp)

    imageViews[i] = vkh::createImageView(device, &imageViewInfo);
    cd37:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    cd3e:	48 8b 40 50          	mov    0x50(%rax),%rax
    cd42:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    cd49:	ba 00 00 00 00       	mov    $0x0,%edx
    cd4e:	48 89 ce             	mov    %rcx,%rsi
    cd51:	48 89 c7             	mov    %rax,%rdi
    cd54:	e8 e5 7a ff ff       	call   483e <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks>
    cd59:	48 89 c3             	mov    %rax,%rbx
    cd5c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    cd63:	48 8d 90 a0 00 00 00 	lea    0xa0(%rax),%rdx
    cd6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cd6e:	48 89 c6             	mov    %rax,%rsi
    cd71:	48 89 d7             	mov    %rdx,%rdi
    cd74:	e8 ab 21 00 00       	call   ef24 <_ZNSt6vectorIP13VkImageView_TSaIS1_EEixEm>
    cd79:	48 89 18             	mov    %rbx,(%rax)
  for (size_t i = 0; i < imageCount; ++i) {
    cd7c:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    cd81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cd85:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    cd89:	0f 82 01 ff ff ff    	jb     cc90 <_ZN9VulkanApp16createImageViewsEv+0xa4>
  }
}
    cd8f:	90                   	nop
    cd90:	90                   	nop
    cd91:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    cd95:	c9                   	leave
    cd96:	c3                   	ret
    cd97:	90                   	nop

000000000000cd98 <_ZN9VulkanApp17createCommandPoolEv>:

void VulkanApp::createCommandPool() {
    cd98:	55                   	push   %rbp
    cd99:	48 89 e5             	mov    %rsp,%rbp
    cd9c:	48 83 ec 30          	sub    $0x30,%rsp
    cda0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  VkCommandPoolCreateInfo cmdPoolInfo{};
    cda4:	66 0f ef c0          	pxor   %xmm0,%xmm0
    cda8:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
    cdac:	66 0f d6 45 f0       	movq   %xmm0,-0x10(%rbp)
  cmdPoolInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
    cdb1:	c7 45 e0 27 00 00 00 	movl   $0x27,-0x20(%rbp)
  cmdPoolInfo.pNext = nullptr;
    cdb8:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    cdbf:	00 
  pool to be individually reset to the initial state; either by calling
  vkResetCommandBuffer, or via the implicit reset when calling
  vkBeginCommandBuffer. If this flag is not set on a pool, then
  vkResetCommandBuffer must not be called for any command buffer allocated
  from that pool. */
  cmdPoolInfo.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
    cdc0:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%rbp)
  /* All command buffers allocated from this command pool must be
  submitted on queues from the same queue family. */
  cmdPoolInfo.queueFamilyIndex = queueFamilyIndex;
    cdc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cdcb:	8b 40 68             	mov    0x68(%rax),%eax
    cdce:	89 45 f4             	mov    %eax,-0xc(%rbp)

  commandPool = vkh::createCommandPool(device, &cmdPoolInfo);
    cdd1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cdd5:	48 8b 40 50          	mov    0x50(%rax),%rax
    cdd9:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    cddd:	ba 00 00 00 00       	mov    $0x0,%edx
    cde2:	48 89 ce             	mov    %rcx,%rsi
    cde5:	48 89 c7             	mov    %rax,%rdi
    cde8:	e8 b3 7e ff ff       	call   4ca0 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks>
    cded:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    cdf1:	48 89 82 d8 00 00 00 	mov    %rax,0xd8(%rdx)
}
    cdf8:	90                   	nop
    cdf9:	c9                   	leave
    cdfa:	c3                   	ret
    cdfb:	90                   	nop

000000000000cdfc <_ZN9VulkanAppC1Ev>:

VulkanApp::VulkanApp() {
    cdfc:	55                   	push   %rbp
    cdfd:	48 89 e5             	mov    %rsp,%rbp
    ce00:	41 57                	push   %r15
    ce02:	41 56                	push   %r14
    ce04:	41 55                	push   %r13
    ce06:	41 54                	push   %r12
    ce08:	53                   	push   %rbx
    ce09:	48 83 ec 38          	sub    $0x38,%rsp
    ce0d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    ce11:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    ce15:	48 8d 58 10          	lea    0x10(%rax),%rbx
    ce19:	48 8d 05 61 96 00 00 	lea    0x9661(%rip),%rax        # 16481 <_ZN6__pstl9execution2v1L5unseqE+0xfa>
    ce20:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    ce24:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    ce28:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    ce2c:	48 c7 45 a8 01 00 00 	movq   $0x1,-0x58(%rbp)
    ce33:	00 
    ce34:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    ce38:	48 89 c7             	mov    %rax,%rdi
    ce3b:	e8 ba 9e ff ff       	call   6cfa <_ZNSaIPKcEC1Ev>
    ce40:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    ce44:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    ce48:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    ce4c:	49 89 f0             	mov    %rsi,%r8
    ce4f:	49 89 f9             	mov    %rdi,%r9
    ce52:	48 89 fa             	mov    %rdi,%rdx
    ce55:	48 89 c1             	mov    %rax,%rcx
    ce58:	4c 89 c6             	mov    %r8,%rsi
    ce5b:	48 89 df             	mov    %rbx,%rdi
    ce5e:	e8 b3 16 00 00       	call   e516 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    ce63:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    ce67:	48 89 c7             	mov    %rax,%rdi
    ce6a:	e8 a7 9e ff ff       	call   6d16 <_ZNSaIPKcED1Ev>
    ce6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    ce73:	48 8d 58 28          	lea    0x28(%rax),%rbx
    ce77:	4c 8d 35 62 4e 01 00 	lea    0x14e62(%rip),%r14        # 21ce0 <C.73.0>
    ce7e:	41 bf 02 00 00 00    	mov    $0x2,%r15d
    ce84:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    ce88:	48 89 c7             	mov    %rax,%rdi
    ce8b:	e8 6a 9e ff ff       	call   6cfa <_ZNSaIPKcEC1Ev>
    ce90:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    ce94:	4d 89 f0             	mov    %r14,%r8
    ce97:	4d 89 f9             	mov    %r15,%r9
    ce9a:	4c 89 f6             	mov    %r14,%rsi
    ce9d:	4c 89 ff             	mov    %r15,%rdi
    cea0:	48 89 fa             	mov    %rdi,%rdx
    cea3:	48 89 c1             	mov    %rax,%rcx
    cea6:	4c 89 c6             	mov    %r8,%rsi
    cea9:	48 89 df             	mov    %rbx,%rdi
    ceac:	e8 65 16 00 00       	call   e516 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    ceb1:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    ceb5:	48 89 c7             	mov    %rax,%rdi
    ceb8:	e8 59 9e ff ff       	call   6d16 <_ZNSaIPKcED1Ev>
    cebd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cec1:	48 8d 98 88 00 00 00 	lea    0x88(%rax),%rbx
    cec8:	4c 8d 25 21 4e 01 00 	lea    0x14e21(%rip),%r12        # 21cf0 <C.74.1>
    cecf:	41 bd 02 00 00 00    	mov    $0x2,%r13d
    ced5:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    ced9:	48 89 c7             	mov    %rax,%rdi
    cedc:	e8 19 9e ff ff       	call   6cfa <_ZNSaIPKcEC1Ev>
    cee1:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    cee5:	4d 89 e0             	mov    %r12,%r8
    cee8:	4d 89 e9             	mov    %r13,%r9
    ceeb:	4c 89 e6             	mov    %r12,%rsi
    ceee:	4c 89 ef             	mov    %r13,%rdi
    cef1:	48 89 fa             	mov    %rdi,%rdx
    cef4:	48 89 c1             	mov    %rax,%rcx
    cef7:	4c 89 c6             	mov    %r8,%rsi
    cefa:	48 89 df             	mov    %rbx,%rdi
    cefd:	e8 14 16 00 00       	call   e516 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    cf02:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    cf06:	48 89 c7             	mov    %rax,%rdi
    cf09:	e8 08 9e ff ff       	call   6d16 <_ZNSaIPKcED1Ev>
    cf0e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf12:	48 05 a0 00 00 00    	add    $0xa0,%rax
    cf18:	48 89 c7             	mov    %rax,%rdi
    cf1b:	e8 52 15 00 00       	call   e472 <_ZNSt6vectorIP13VkImageView_TSaIS1_EEC1Ev>
    cf20:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf24:	48 05 b8 00 00 00    	add    $0xb8,%rax
    cf2a:	48 89 c7             	mov    %rax,%rdi
    cf2d:	e8 78 15 00 00       	call   e4aa <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1Ev>
  createWindow();
    cf32:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf36:	48 89 c7             	mov    %rax,%rdi
    cf39:	e8 46 eb ff ff       	call   ba84 <_ZN9VulkanApp12createWindowEv>
  createInstance();
    cf3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf42:	48 89 c7             	mov    %rax,%rdi
    cf45:	e8 7a eb ff ff       	call   bac4 <_ZN9VulkanApp14createInstanceEv>
  createDebugMessenger();
    cf4a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf4e:	48 89 c7             	mov    %rax,%rdi
    cf51:	e8 54 ed ff ff       	call   bcaa <_ZN9VulkanApp20createDebugMessengerEv>
  createSurface();
    cf56:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf5a:	48 89 c7             	mov    %rax,%rdi
    cf5d:	e8 dc ed ff ff       	call   bd3e <_ZN9VulkanApp13createSurfaceEv>
  createDevice();
    cf62:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf66:	48 89 c7             	mov    %rax,%rdi
    cf69:	e8 28 f0 ff ff       	call   bf96 <_ZN9VulkanApp12createDeviceEv>
  createSwapchain();
    cf6e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf72:	48 89 c7             	mov    %rax,%rdi
    cf75:	e8 2c fc ff ff       	call   cba6 <_ZN9VulkanApp15createSwapchainEv>
  createImageViews();
    cf7a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf7e:	48 89 c7             	mov    %rax,%rdi
    cf81:	e8 66 fc ff ff       	call   cbec <_ZN9VulkanApp16createImageViewsEv>

  createCommandPool();
    cf86:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cf8a:	48 89 c7             	mov    %rax,%rdi
    cf8d:	e8 06 fe ff ff       	call   cd98 <_ZN9VulkanApp17createCommandPoolEv>
}
    cf92:	e9 a0 00 00 00       	jmp    d037 <_ZN9VulkanAppC1Ev+0x23b>
VulkanApp::VulkanApp() {
    cf97:	48 89 c3             	mov    %rax,%rbx
    cf9a:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    cf9e:	48 89 c7             	mov    %rax,%rdi
    cfa1:	e8 70 9d ff ff       	call   6d16 <_ZNSaIPKcED1Ev>
    cfa6:	48 89 d8             	mov    %rbx,%rax
    cfa9:	48 89 c7             	mov    %rax,%rdi
    cfac:	e8 3f 66 ff ff       	call   35f0 <_Unwind_Resume@plt>
    cfb1:	48 89 c3             	mov    %rax,%rbx
    cfb4:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    cfb8:	48 89 c7             	mov    %rax,%rdi
    cfbb:	e8 56 9d ff ff       	call   6d16 <_ZNSaIPKcED1Ev>
    cfc0:	eb 5a                	jmp    d01c <_ZN9VulkanAppC1Ev+0x220>
    cfc2:	48 89 c3             	mov    %rax,%rbx
    cfc5:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    cfc9:	48 89 c7             	mov    %rax,%rdi
    cfcc:	e8 45 9d ff ff       	call   6d16 <_ZNSaIPKcED1Ev>
    cfd1:	eb 39                	jmp    d00c <_ZN9VulkanAppC1Ev+0x210>
}
    cfd3:	48 89 c3             	mov    %rax,%rbx
    cfd6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cfda:	48 05 b8 00 00 00    	add    $0xb8,%rax
    cfe0:	48 89 c7             	mov    %rax,%rdi
    cfe3:	e8 54 a7 ff ff       	call   773c <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
    cfe8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cfec:	48 05 a0 00 00 00    	add    $0xa0,%rax
    cff2:	48 89 c7             	mov    %rax,%rdi
    cff5:	e8 dc 1f 00 00       	call   efd6 <_ZNSt6vectorIP13VkImageView_TSaIS1_EED1Ev>
    cffa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    cffe:	48 05 88 00 00 00    	add    $0x88,%rax
    d004:	48 89 c7             	mov    %rax,%rdi
    d007:	e8 92 15 00 00       	call   e59e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
VulkanApp::VulkanApp() {
    d00c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d010:	48 83 c0 28          	add    $0x28,%rax
}
    d014:	48 89 c7             	mov    %rax,%rdi
    d017:	e8 82 15 00 00       	call   e59e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    d01c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d020:	48 83 c0 10          	add    $0x10,%rax
    d024:	48 89 c7             	mov    %rax,%rdi
    d027:	e8 72 15 00 00       	call   e59e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    d02c:	48 89 d8             	mov    %rbx,%rax
    d02f:	48 89 c7             	mov    %rax,%rdi
    d032:	e8 b9 65 ff ff       	call   35f0 <_Unwind_Resume@plt>
    d037:	48 83 c4 38          	add    $0x38,%rsp
    d03b:	5b                   	pop    %rbx
    d03c:	41 5c                	pop    %r12
    d03e:	41 5d                	pop    %r13
    d040:	41 5e                	pop    %r14
    d042:	41 5f                	pop    %r15
    d044:	5d                   	pop    %rbp
    d045:	c3                   	ret

000000000000d046 <_ZN9VulkanAppD1Ev>:

VulkanApp::~VulkanApp() {
    d046:	55                   	push   %rbp
    d047:	48 89 e5             	mov    %rsp,%rbp
    d04a:	48 83 ec 30          	sub    $0x30,%rsp
    d04e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  vkh::destroyCommandPool(device, commandPool);
    d052:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d056:	48 8b 88 d8 00 00 00 	mov    0xd8(%rax),%rcx
    d05d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d061:	48 8b 40 50          	mov    0x50(%rax),%rax
    d065:	ba 00 00 00 00       	mov    $0x0,%edx
    d06a:	48 89 ce             	mov    %rcx,%rsi
    d06d:	48 89 c7             	mov    %rax,%rdi
    d070:	e8 1c 87 ff ff       	call   5791 <_ZN3vkh18destroyCommandPoolEP10VkDevice_TP15VkCommandPool_TPK21VkAllocationCallbacks>

  for (auto &imageView : imageViews) {
    d075:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d079:	48 05 a0 00 00 00    	add    $0xa0,%rax
    d07f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d083:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d087:	48 89 c7             	mov    %rax,%rdi
    d08a:	e8 b3 1f 00 00       	call   f042 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE5beginEv>
    d08f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d093:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d097:	48 89 c7             	mov    %rax,%rdi
    d09a:	e8 c9 1f 00 00       	call   f068 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE3endEv>
    d09f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    d0a3:	eb 3b                	jmp    d0e0 <_ZN9VulkanAppD1Ev+0x9a>
    d0a5:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    d0a9:	48 89 c7             	mov    %rax,%rdi
    d0ac:	e8 3b 20 00 00       	call   f0ec <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEdeEv>
    d0b1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    vkh::destroyImageView(device, imageView);
    d0b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d0b9:	48 8b 08             	mov    (%rax),%rcx
    d0bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d0c0:	48 8b 40 50          	mov    0x50(%rax),%rax
    d0c4:	ba 00 00 00 00       	mov    $0x0,%edx
    d0c9:	48 89 ce             	mov    %rcx,%rsi
    d0cc:	48 89 c7             	mov    %rax,%rdi
    d0cf:	e8 d2 85 ff ff       	call   56a6 <_ZN3vkh16destroyImageViewEP10VkDevice_TP13VkImageView_TPK21VkAllocationCallbacks>
  for (auto &imageView : imageViews) {
    d0d4:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    d0d8:	48 89 c7             	mov    %rax,%rdi
    d0db:	e8 ec 1f 00 00       	call   f0cc <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEppEv>
    d0e0:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    d0e4:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    d0e8:	48 89 d6             	mov    %rdx,%rsi
    d0eb:	48 89 c7             	mov    %rax,%rdi
    d0ee:	e8 9e 1f 00 00       	call   f091 <_ZN9__gnu_cxxneIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    d0f3:	84 c0                	test   %al,%al
    d0f5:	75 ae                	jne    d0a5 <_ZN9VulkanAppD1Ev+0x5f>
  }
  vkh::destroySwapchain(device, swapchain.self);
    d0f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d0fb:	48 8b 48 70          	mov    0x70(%rax),%rcx
    d0ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d103:	48 8b 40 50          	mov    0x50(%rax),%rax
    d107:	ba 00 00 00 00       	mov    $0x0,%edx
    d10c:	48 89 ce             	mov    %rcx,%rsi
    d10f:	48 89 c7             	mov    %rax,%rdi
    d112:	e8 61 85 ff ff       	call   5678 <_ZN3vkh16destroySwapchainEP10VkDevice_TP16VkSwapchainKHR_TPK21VkAllocationCallbacks>
  vkh::destroyDevice(device);
    d117:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d11b:	48 8b 40 50          	mov    0x50(%rax),%rax
    d11f:	be 00 00 00 00       	mov    $0x0,%esi
    d124:	48 89 c7             	mov    %rax,%rdi
    d127:	e8 f8 84 ff ff       	call   5624 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>
  vkh::destroyDebugUtilsMessengerEXT(instance, debugMessenger, nullptr);
    d12c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d130:	48 8b 48 40          	mov    0x40(%rax),%rcx
    d134:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d138:	48 8b 40 08          	mov    0x8(%rax),%rax
    d13c:	ba 00 00 00 00       	mov    $0x0,%edx
    d141:	48 89 ce             	mov    %rcx,%rsi
    d144:	48 89 c7             	mov    %rax,%rdi
    d147:	e8 cf e4 ff ff       	call   b61b <_ZN3vkh29destroyDebugUtilsMessengerEXTEP12VkInstance_TP26VkDebugUtilsMessengerEXT_TPK21VkAllocationCallbacks>
  vkh::destroySurface(instance, surface);
    d14c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d150:	48 8b 48 48          	mov    0x48(%rax),%rcx
    d154:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d158:	48 8b 40 08          	mov    0x8(%rax),%rax
    d15c:	ba 00 00 00 00       	mov    $0x0,%edx
    d161:	48 89 ce             	mov    %rcx,%rsi
    d164:	48 89 c7             	mov    %rax,%rdi
    d167:	e8 de 84 ff ff       	call   564a <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>
  vkh::destroyInstance(instance, nullptr);
    d16c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d170:	48 8b 40 08          	mov    0x8(%rax),%rax
    d174:	be 00 00 00 00       	mov    $0x0,%esi
    d179:	48 89 c7             	mov    %rax,%rdi
    d17c:	e8 7d 84 ff ff       	call   55fe <_ZN3vkh15destroyInstanceEP12VkInstance_TPK21VkAllocationCallbacks>
  vkh::destroyWindow(window);
    d181:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d185:	48 8b 00             	mov    (%rax),%rax
    d188:	48 89 c7             	mov    %rax,%rdi
    d18b:	e8 53 84 ff ff       	call   55e3 <_ZN3vkh13destroyWindowEP10GLFWwindow>
  glfwTerminate();
    d190:	e8 ab 61 ff ff       	call   3340 <glfwTerminate@plt>
}
    d195:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d199:	48 05 b8 00 00 00    	add    $0xb8,%rax
    d19f:	48 89 c7             	mov    %rax,%rdi
    d1a2:	e8 95 a5 ff ff       	call   773c <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
    d1a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d1ab:	48 05 a0 00 00 00    	add    $0xa0,%rax
    d1b1:	48 89 c7             	mov    %rax,%rdi
    d1b4:	e8 1d 1e 00 00       	call   efd6 <_ZNSt6vectorIP13VkImageView_TSaIS1_EED1Ev>
    d1b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d1bd:	48 05 88 00 00 00    	add    $0x88,%rax
    d1c3:	48 89 c7             	mov    %rax,%rdi
    d1c6:	e8 d3 13 00 00       	call   e59e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
VulkanApp::~VulkanApp() {
    d1cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d1cf:	48 83 c0 28          	add    $0x28,%rax
}
    d1d3:	48 89 c7             	mov    %rax,%rdi
    d1d6:	e8 c3 13 00 00       	call   e59e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    d1db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d1df:	48 83 c0 10          	add    $0x10,%rax
    d1e3:	48 89 c7             	mov    %rax,%rdi
    d1e6:	e8 b3 13 00 00       	call   e59e <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    d1eb:	90                   	nop
    d1ec:	c9                   	leave
    d1ed:	c3                   	ret

000000000000d1ee <_ZN9VulkanApp3runEv>:

void VulkanApp::run() {
    d1ee:	55                   	push   %rbp
    d1ef:	48 89 e5             	mov    %rsp,%rbp
    d1f2:	53                   	push   %rbx
    d1f3:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    d1fa:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  vkh::Timer time_total;
    d201:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    d205:	48 89 c7             	mov    %rax,%rdi
    d208:	e8 f1 1e 00 00       	call   f0fe <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EEC1Ev>
  const double sec_to_mics = 1'000'000.0;
    d20d:	f2 0f 10 05 73 95 00 	movsd  0x9573(%rip),%xmm0        # 16788 <_ZN6__pstl9execution2v1L5unseqE+0x401>
    d214:	00 
    d215:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
  while (!glfwWindowShouldClose(window)) {
    d21a:	e9 a1 00 00 00       	jmp    d2c0 <_ZN9VulkanApp3runEv+0xd2>
    vkh::Timer time_circle;
    d21f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    d223:	48 89 c7             	mov    %rax,%rdi
    d226:	e8 d3 1e 00 00       	call   f0fe <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EEC1Ev>
    glfwPollEvents();
    d22b:	e8 c0 60 ff ff       	call   32f0 <glfwPollEvents@plt>

    // for (int i = 0; i < 1'000'000; ++i) {
    // }

    double current = static_cast<double>(time_total.current());
    d230:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    d234:	48 89 c7             	mov    %rax,%rdi
    d237:	e8 8a 12 00 00       	call   e4c6 <_ZNK3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EE7currentEv>
    d23c:	66 0f ef c0          	pxor   %xmm0,%xmm0
    d240:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    d245:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
    if (current >= sec_to_mics) {
    d24a:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
    d24f:	66 0f 2f 05 31 95 00 	comisd 0x9531(%rip),%xmm0        # 16788 <_ZN6__pstl9execution2v1L5unseqE+0x401>
    d256:	00 
    d257:	72 5b                	jb     d2b4 <_ZN9VulkanApp3runEv+0xc6>
      std::cout << sec_to_mics / static_cast<double>(time_circle.current())
    d259:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    d25d:	48 89 c7             	mov    %rax,%rdi
    d260:	e8 61 12 00 00       	call   e4c6 <_ZNK3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EE7currentEv>
    d265:	66 0f ef c9          	pxor   %xmm1,%xmm1
    d269:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    d26e:	f2 0f 10 05 12 95 00 	movsd  0x9512(%rip),%xmm0        # 16788 <_ZN6__pstl9execution2v1L5unseqE+0x401>
    d275:	00 
    d276:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    d27a:	66 48 0f 7e c0       	movq   %xmm0,%rax
    d27f:	66 48 0f 6e c0       	movq   %rax,%xmm0
    d284:	48 8d 05 f5 50 01 00 	lea    0x150f5(%rip),%rax        # 22380 <_ZSt4cout@GLIBCXX_3.4>
    d28b:	48 89 c7             	mov    %rax,%rdi
    d28e:	e8 bd 63 ff ff       	call   3650 <_ZNSolsEd@plt>
    d293:	48 89 c2             	mov    %rax,%rdx
                << " FPS\n";
    d296:	48 8d 05 f7 91 00 00 	lea    0x91f7(%rip),%rax        # 16494 <_ZN6__pstl9execution2v1L5unseqE+0x10d>
    d29d:	48 89 c6             	mov    %rax,%rsi
    d2a0:	48 89 d7             	mov    %rdx,%rdi
    d2a3:	e8 58 60 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      time_total.reset();
    d2a8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    d2ac:	48 89 c7             	mov    %rax,%rdi
    d2af:	e8 5a 1f 00 00       	call   f20e <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EE5resetEv>
    }
  }
    d2b4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    d2b8:	48 89 c7             	mov    %rax,%rdi
    d2bb:	e8 b4 1e 00 00       	call   f174 <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EED1Ev>
  while (!glfwWindowShouldClose(window)) {
    d2c0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    d2c7:	48 8b 00             	mov    (%rax),%rax
    d2ca:	48 89 c7             	mov    %rax,%rdi
    d2cd:	e8 6e 63 ff ff       	call   3640 <glfwWindowShouldClose@plt>
    d2d2:	85 c0                	test   %eax,%eax
    d2d4:	0f 94 c0             	sete   %al
    d2d7:	84 c0                	test   %al,%al
    d2d9:	0f 85 40 ff ff ff    	jne    d21f <_ZN9VulkanApp3runEv+0x31>
  vkDeviceWaitIdle(device);
    d2df:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    d2e6:	48 8b 40 50          	mov    0x50(%rax),%rax
    d2ea:	48 89 c7             	mov    %rax,%rdi
    d2ed:	e8 9e 5d ff ff       	call   3090 <vkDeviceWaitIdle@plt>
}
    d2f2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    d2f6:	48 89 c7             	mov    %rax,%rdi
    d2f9:	e8 76 1e 00 00       	call   f174 <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EED1Ev>
    d2fe:	eb 2b                	jmp    d32b <_ZN9VulkanApp3runEv+0x13d>
  }
    d300:	48 89 c3             	mov    %rax,%rbx
    d303:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    d307:	48 89 c7             	mov    %rax,%rdi
    d30a:	e8 65 1e 00 00       	call   f174 <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EED1Ev>
    d30f:	eb 03                	jmp    d314 <_ZN9VulkanApp3runEv+0x126>
}
    d311:	48 89 c3             	mov    %rax,%rbx
    d314:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    d318:	48 89 c7             	mov    %rax,%rdi
    d31b:	e8 54 1e 00 00       	call   f174 <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EED1Ev>
    d320:	48 89 d8             	mov    %rbx,%rax
    d323:	48 89 c7             	mov    %rax,%rdi
    d326:	e8 c5 62 ff ff       	call   35f0 <_Unwind_Resume@plt>
    d32b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    d32f:	c9                   	leave
    d330:	c3                   	ret
    d331:	90                   	nop

000000000000d332 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void VulkanApp::writeInfo(std::string filePath) {
    d332:	55                   	push   %rbp
    d333:	48 89 e5             	mov    %rsp,%rbp
    d336:	41 54                	push   %r12
    d338:	53                   	push   %rbx
    d339:	48 81 ec c0 0e 00 00 	sub    $0xec0,%rsp
    d340:	48 89 bd 38 f1 ff ff 	mov    %rdi,-0xec8(%rbp)
    d347:	48 89 b5 30 f1 ff ff 	mov    %rsi,-0xed0(%rbp)
  std::fstream fs;
    d34e:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d355:	48 89 c7             	mov    %rax,%rdi
    d358:	e8 d3 60 ff ff       	call   3430 <_ZNSt13basic_fstreamIcSt11char_traitsIcEEC1Ev@plt>
  fs.open(filePath);
    d35d:	be 10 00 00 00       	mov    $0x10,%esi
    d362:	bf 08 00 00 00       	mov    $0x8,%edi
    d367:	e8 cd 0e 00 00       	call   e239 <_ZStorSt13_Ios_OpenmodeS_>
    d36c:	89 c2                	mov    %eax,%edx
    d36e:	48 8b 8d 30 f1 ff ff 	mov    -0xed0(%rbp),%rcx
    d375:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d37c:	48 89 ce             	mov    %rcx,%rsi
    d37f:	48 89 c7             	mov    %rax,%rdi
    d382:	e8 49 61 ff ff       	call   34d0 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>
  if (!fs.is_open()) {
    d387:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d38e:	48 89 c7             	mov    %rax,%rdi
    d391:	e8 2a 62 ff ff       	call   35c0 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE7is_openEv@plt>
    d396:	83 f0 01             	xor    $0x1,%eax
    d399:	84 c0                	test   %al,%al
    d39b:	0f 84 97 00 00 00    	je     d438 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x106>
    throw std::runtime_error("Failed to open " + filePath + '\n');
    d3a1:	bf 10 00 00 00       	mov    $0x10,%edi
    d3a6:	e8 a5 5d ff ff       	call   3150 <__cxa_allocate_exception@plt>
    d3ab:	48 89 c3             	mov    %rax,%rbx
    d3ae:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    d3b5:	48 8b 95 30 f1 ff ff 	mov    -0xed0(%rbp),%rdx
    d3bc:	48 8d 0d d7 90 00 00 	lea    0x90d7(%rip),%rcx        # 1649a <_ZN6__pstl9execution2v1L5unseqE+0x113>
    d3c3:	48 89 ce             	mov    %rcx,%rsi
    d3c6:	48 89 c7             	mov    %rax,%rdi
    d3c9:	e8 60 1e 00 00       	call   f22e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
    d3ce:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    d3d5:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    d3dc:	ba 0a 00 00 00       	mov    $0xa,%edx
    d3e1:	48 89 ce             	mov    %rcx,%rsi
    d3e4:	48 89 c7             	mov    %rax,%rdi
    d3e7:	e8 44 1f 00 00       	call   f330 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>
    d3ec:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    d3f3:	48 89 c6             	mov    %rax,%rsi
    d3f6:	48 89 df             	mov    %rbx,%rdi
    d3f9:	e8 72 61 ff ff       	call   3570 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
    d3fe:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    d405:	48 89 c7             	mov    %rax,%rdi
    d408:	e8 a3 5d ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    d40d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    d414:	48 89 c7             	mov    %rax,%rdi
    d417:	e8 94 5d ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    d41c:	48 8b 05 85 4b 01 00 	mov    0x14b85(%rip),%rax        # 21fa8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    d423:	48 89 c2             	mov    %rax,%rdx
    d426:	48 8d 05 13 49 01 00 	lea    0x14913(%rip),%rax        # 21d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    d42d:	48 89 c6             	mov    %rax,%rsi
    d430:	48 89 df             	mov    %rbx,%rdi
    d433:	e8 68 61 ff ff       	call   35a0 <__cxa_throw@plt>
  }

  fs << "1. Instance extensions:\n";
    d438:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d43f:	48 83 c0 10          	add    $0x10,%rax
    d443:	48 8d 15 60 90 00 00 	lea    0x9060(%rip),%rdx        # 164aa <_ZN6__pstl9execution2v1L5unseqE+0x123>
    d44a:	48 89 d6             	mov    %rdx,%rsi
    d44d:	48 89 c7             	mov    %rax,%rdi
    d450:	e8 ab 5e ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  fs << "\t1.1 Available:\n";
    d455:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d45c:	48 83 c0 10          	add    $0x10,%rax
    d460:	48 8d 15 5c 90 00 00 	lea    0x905c(%rip),%rdx        # 164c3 <_ZN6__pstl9execution2v1L5unseqE+0x13c>
    d467:	48 89 d6             	mov    %rdx,%rsi
    d46a:	48 89 c7             	mov    %rax,%rdi
    d46d:	e8 8e 5e ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  auto availableInstanceExtensions = vkh::getAvailableInstanceExtensionList();
    d472:	48 8d 85 f0 fc ff ff 	lea    -0x310(%rbp),%rax
    d479:	be 00 00 00 00       	mov    $0x0,%esi
    d47e:	48 89 c7             	mov    %rax,%rdi
    d481:	e8 ce 84 ff ff       	call   5954 <_ZN3vkh33getAvailableInstanceExtensionListEPKc>
  for (const auto &extension : availableInstanceExtensions) {
    d486:	48 8d 85 f0 fc ff ff 	lea    -0x310(%rbp),%rax
    d48d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    d491:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d495:	48 89 c7             	mov    %rax,%rdi
    d498:	e8 e7 15 00 00       	call   ea84 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE5beginEv>
    d49d:	48 89 85 68 f9 ff ff 	mov    %rax,-0x698(%rbp)
    d4a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d4a8:	48 89 c7             	mov    %rax,%rdi
    d4ab:	e8 fa 15 00 00       	call   eaaa <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE3endEv>
    d4b0:	48 89 85 60 f9 ff ff 	mov    %rax,-0x6a0(%rbp)
    d4b7:	eb 64                	jmp    d51d <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1eb>
    d4b9:	48 8d 85 68 f9 ff ff 	lea    -0x698(%rbp),%rax
    d4c0:	48 89 c7             	mov    %rax,%rdi
    d4c3:	e8 6a 16 00 00       	call   eb32 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    d4c8:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    fs << "\t\t" << extension.extensionName << '\n';
    d4cf:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d4d6:	48 83 c0 10          	add    $0x10,%rax
    d4da:	48 8d 15 f3 8f 00 00 	lea    0x8ff3(%rip),%rdx        # 164d4 <_ZN6__pstl9execution2v1L5unseqE+0x14d>
    d4e1:	48 89 d6             	mov    %rdx,%rsi
    d4e4:	48 89 c7             	mov    %rax,%rdi
    d4e7:	e8 14 5e ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    d4ec:	48 89 c2             	mov    %rax,%rdx
    d4ef:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    d4f6:	48 89 c6             	mov    %rax,%rsi
    d4f9:	48 89 d7             	mov    %rdx,%rdi
    d4fc:	e8 ff 5d ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    d501:	be 0a 00 00 00       	mov    $0xa,%esi
    d506:	48 89 c7             	mov    %rax,%rdi
    d509:	e8 02 5f ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  for (const auto &extension : availableInstanceExtensions) {
    d50e:	48 8d 85 68 f9 ff ff 	lea    -0x698(%rbp),%rax
    d515:	48 89 c7             	mov    %rax,%rdi
    d518:	e8 f1 15 00 00       	call   eb0e <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    d51d:	48 8d 95 60 f9 ff ff 	lea    -0x6a0(%rbp),%rdx
    d524:	48 8d 85 68 f9 ff ff 	lea    -0x698(%rbp),%rax
    d52b:	48 89 d6             	mov    %rdx,%rsi
    d52e:	48 89 c7             	mov    %rax,%rdi
    d531:	e8 9d 15 00 00       	call   ead3 <_ZN9__gnu_cxxneIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    d536:	84 c0                	test   %al,%al
    d538:	0f 85 7b ff ff ff    	jne    d4b9 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x187>
  }
  fs << "\t1.2 Required:\n";
    d53e:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d545:	48 83 c0 10          	add    $0x10,%rax
    d549:	48 8d 15 87 8f 00 00 	lea    0x8f87(%rip),%rdx        # 164d7 <_ZN6__pstl9execution2v1L5unseqE+0x150>
    d550:	48 89 d6             	mov    %rdx,%rsi
    d553:	48 89 c7             	mov    %rax,%rdi
    d556:	e8 a5 5d ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  for (const auto &extensionName : instanceExtensions) {
    d55b:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
    d562:	48 83 c0 10          	add    $0x10,%rax
    d566:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    d56a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d56e:	48 89 c7             	mov    %rax,%rdi
    d571:	e8 6c 10 00 00       	call   e5e2 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
    d576:	48 89 85 58 f9 ff ff 	mov    %rax,-0x6a8(%rbp)
    d57d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d581:	48 89 c7             	mov    %rax,%rdi
    d584:	e8 7f 10 00 00       	call   e608 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
    d589:	48 89 85 50 f9 ff ff 	mov    %rax,-0x6b0(%rbp)
    d590:	eb 67                	jmp    d5f9 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c7>
    d592:	48 8d 85 58 f9 ff ff 	lea    -0x6a8(%rbp),%rax
    d599:	48 89 c7             	mov    %rax,%rdi
    d59c:	e8 eb 10 00 00       	call   e68c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
    d5a1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    fs << "\t\t" << extensionName << '\n';
    d5a8:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d5af:	48 83 c0 10          	add    $0x10,%rax
    d5b3:	48 8d 15 1a 8f 00 00 	lea    0x8f1a(%rip),%rdx        # 164d4 <_ZN6__pstl9execution2v1L5unseqE+0x14d>
    d5ba:	48 89 d6             	mov    %rdx,%rsi
    d5bd:	48 89 c7             	mov    %rax,%rdi
    d5c0:	e8 3b 5d ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    d5c5:	48 89 c2             	mov    %rax,%rdx
    d5c8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    d5cf:	48 8b 00             	mov    (%rax),%rax
    d5d2:	48 89 c6             	mov    %rax,%rsi
    d5d5:	48 89 d7             	mov    %rdx,%rdi
    d5d8:	e8 23 5d ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    d5dd:	be 0a 00 00 00       	mov    $0xa,%esi
    d5e2:	48 89 c7             	mov    %rax,%rdi
    d5e5:	e8 26 5e ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  for (const auto &extensionName : instanceExtensions) {
    d5ea:	48 8d 85 58 f9 ff ff 	lea    -0x6a8(%rbp),%rax
    d5f1:	48 89 c7             	mov    %rax,%rdi
    d5f4:	e8 73 10 00 00       	call   e66c <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>
    d5f9:	48 8d 95 50 f9 ff ff 	lea    -0x6b0(%rbp),%rdx
    d600:	48 8d 85 58 f9 ff ff 	lea    -0x6a8(%rbp),%rax
    d607:	48 89 d6             	mov    %rdx,%rsi
    d60a:	48 89 c7             	mov    %rax,%rdi
    d60d:	e8 1f 10 00 00       	call   e631 <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    d612:	84 c0                	test   %al,%al
    d614:	0f 85 78 ff ff ff    	jne    d592 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x260>
  }
  fs << '\n';
    d61a:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d621:	48 83 c0 10          	add    $0x10,%rax
    d625:	be 0a 00 00 00       	mov    $0xa,%esi
    d62a:	48 89 c7             	mov    %rax,%rdi
    d62d:	e8 de 5d ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>

  fs << "2. Instance layers:\n";
    d632:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d639:	48 83 c0 10          	add    $0x10,%rax
    d63d:	48 8d 15 a3 8e 00 00 	lea    0x8ea3(%rip),%rdx        # 164e7 <_ZN6__pstl9execution2v1L5unseqE+0x160>
    d644:	48 89 d6             	mov    %rdx,%rsi
    d647:	48 89 c7             	mov    %rax,%rdi
    d64a:	e8 b1 5c ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  fs << "\t2.1 Available:\n";
    d64f:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d656:	48 83 c0 10          	add    $0x10,%rax
    d65a:	48 8d 15 9b 8e 00 00 	lea    0x8e9b(%rip),%rdx        # 164fc <_ZN6__pstl9execution2v1L5unseqE+0x175>
    d661:	48 89 d6             	mov    %rdx,%rsi
    d664:	48 89 c7             	mov    %rax,%rdi
    d667:	e8 94 5c ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  auto availableInstanceLayers = vkh::getAvailableInstanceLayerList();
    d66c:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    d673:	48 89 c7             	mov    %rax,%rdi
    d676:	e8 73 86 ff ff       	call   5cee <_ZN3vkh29getAvailableInstanceLayerListEv>
  for (const auto &layer : availableInstanceLayers) {
    d67b:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    d682:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    d686:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d68a:	48 89 c7             	mov    %rax,%rdi
    d68d:	e8 56 e1 ff ff       	call   b7e8 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE5beginEv>
    d692:	48 89 85 48 f9 ff ff 	mov    %rax,-0x6b8(%rbp)
    d699:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d69d:	48 89 c7             	mov    %rax,%rdi
    d6a0:	e8 69 e1 ff ff       	call   b80e <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE3endEv>
    d6a5:	48 89 85 40 f9 ff ff 	mov    %rax,-0x6c0(%rbp)
    d6ac:	eb 5e                	jmp    d70c <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3da>
    d6ae:	48 8d 85 48 f9 ff ff 	lea    -0x6b8(%rbp),%rax
    d6b5:	48 89 c7             	mov    %rax,%rdi
    d6b8:	e8 d9 e1 ff ff       	call   b896 <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    d6bd:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    fs << "\t\t" << layer.layerName << '\n';
    d6c1:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d6c8:	48 83 c0 10          	add    $0x10,%rax
    d6cc:	48 8d 15 01 8e 00 00 	lea    0x8e01(%rip),%rdx        # 164d4 <_ZN6__pstl9execution2v1L5unseqE+0x14d>
    d6d3:	48 89 d6             	mov    %rdx,%rsi
    d6d6:	48 89 c7             	mov    %rax,%rdi
    d6d9:	e8 22 5c ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    d6de:	48 89 c2             	mov    %rax,%rdx
    d6e1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    d6e5:	48 89 c6             	mov    %rax,%rsi
    d6e8:	48 89 d7             	mov    %rdx,%rdi
    d6eb:	e8 10 5c ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    d6f0:	be 0a 00 00 00       	mov    $0xa,%esi
    d6f5:	48 89 c7             	mov    %rax,%rdi
    d6f8:	e8 13 5d ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  for (const auto &layer : availableInstanceLayers) {
    d6fd:	48 8d 85 48 f9 ff ff 	lea    -0x6b8(%rbp),%rax
    d704:	48 89 c7             	mov    %rax,%rdi
    d707:	e8 66 e1 ff ff       	call   b872 <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    d70c:	48 8d 95 40 f9 ff ff 	lea    -0x6c0(%rbp),%rdx
    d713:	48 8d 85 48 f9 ff ff 	lea    -0x6b8(%rbp),%rax
    d71a:	48 89 d6             	mov    %rdx,%rsi
    d71d:	48 89 c7             	mov    %rax,%rdi
    d720:	e8 12 e1 ff ff       	call   b837 <_ZN9__gnu_cxxneIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    d725:	84 c0                	test   %al,%al
    d727:	75 85                	jne    d6ae <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x37c>
  }
  fs << "\t2.2 Required:\n";
    d729:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d730:	48 83 c0 10          	add    $0x10,%rax
    d734:	48 8d 15 d2 8d 00 00 	lea    0x8dd2(%rip),%rdx        # 1650d <_ZN6__pstl9execution2v1L5unseqE+0x186>
    d73b:	48 89 d6             	mov    %rdx,%rsi
    d73e:	48 89 c7             	mov    %rax,%rdi
    d741:	e8 ba 5b ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  for (const auto &layer : instanceLayers) {
    d746:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
    d74d:	48 83 c0 28          	add    $0x28,%rax
    d751:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    d755:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d759:	48 89 c7             	mov    %rax,%rdi
    d75c:	e8 19 1c 00 00       	call   f37a <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>
    d761:	48 89 85 38 f9 ff ff 	mov    %rax,-0x6c8(%rbp)
    d768:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d76c:	48 89 c7             	mov    %rax,%rdi
    d76f:	e8 2c 1c 00 00       	call   f3a0 <_ZNKSt6vectorIPKcSaIS1_EE3endEv>
    d774:	48 89 85 30 f9 ff ff 	mov    %rax,-0x6d0(%rbp)
    d77b:	eb 61                	jmp    d7de <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ac>
    d77d:	48 8d 85 38 f9 ff ff 	lea    -0x6c8(%rbp),%rax
    d784:	48 89 c7             	mov    %rax,%rdi
    d787:	e8 98 1c 00 00       	call   f424 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>
    d78c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    fs << "\t\t" << layer << '\n';
    d790:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d797:	48 83 c0 10          	add    $0x10,%rax
    d79b:	48 8d 15 32 8d 00 00 	lea    0x8d32(%rip),%rdx        # 164d4 <_ZN6__pstl9execution2v1L5unseqE+0x14d>
    d7a2:	48 89 d6             	mov    %rdx,%rsi
    d7a5:	48 89 c7             	mov    %rax,%rdi
    d7a8:	e8 53 5b ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    d7ad:	48 89 c2             	mov    %rax,%rdx
    d7b0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    d7b4:	48 8b 00             	mov    (%rax),%rax
    d7b7:	48 89 c6             	mov    %rax,%rsi
    d7ba:	48 89 d7             	mov    %rdx,%rdi
    d7bd:	e8 3e 5b ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    d7c2:	be 0a 00 00 00       	mov    $0xa,%esi
    d7c7:	48 89 c7             	mov    %rax,%rdi
    d7ca:	e8 41 5c ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  for (const auto &layer : instanceLayers) {
    d7cf:	48 8d 85 38 f9 ff ff 	lea    -0x6c8(%rbp),%rax
    d7d6:	48 89 c7             	mov    %rax,%rdi
    d7d9:	e8 26 1c 00 00       	call   f404 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>
    d7de:	48 8d 95 30 f9 ff ff 	lea    -0x6d0(%rbp),%rdx
    d7e5:	48 8d 85 38 f9 ff ff 	lea    -0x6c8(%rbp),%rax
    d7ec:	48 89 d6             	mov    %rdx,%rsi
    d7ef:	48 89 c7             	mov    %rax,%rdi
    d7f2:	e8 d2 1b 00 00       	call   f3c9 <_ZN9__gnu_cxxneIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    d7f7:	84 c0                	test   %al,%al
    d7f9:	75 82                	jne    d77d <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44b>
  }
  fs << '\n';
    d7fb:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d802:	48 83 c0 10          	add    $0x10,%rax
    d806:	be 0a 00 00 00       	mov    $0xa,%esi
    d80b:	48 89 c7             	mov    %rax,%rdi
    d80e:	e8 fd 5b ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>

  fs << "3. Physical devices:\n";
    d813:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d81a:	48 83 c0 10          	add    $0x10,%rax
    d81e:	48 8d 15 f8 8c 00 00 	lea    0x8cf8(%rip),%rdx        # 1651d <_ZN6__pstl9execution2v1L5unseqE+0x196>
    d825:	48 89 d6             	mov    %rdx,%rsi
    d828:	48 89 c7             	mov    %rax,%rdi
    d82b:	e8 d0 5a ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  auto physicalDeviceList = vkh::getPhysicalDeviceList(instance);
    d830:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
    d837:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d83b:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    d842:	48 89 d6             	mov    %rdx,%rsi
    d845:	48 89 c7             	mov    %rax,%rdi
    d848:	e8 4d 85 ff ff       	call   5d9a <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T>
  auto selectedDeviceProperties =
      vkh::getPhysicalDevicePropertyList(physicalDevice);
    d84d:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
    d854:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d858:	48 8d 85 70 f9 ff ff 	lea    -0x690(%rbp),%rax
    d85f:	48 89 d6             	mov    %rdx,%rsi
    d862:	48 89 c7             	mov    %rax,%rdi
    d865:	e8 9f 86 ff ff       	call   5f09 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_T>
  size_t index = 1;
    d86a:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    d871:	00 
  size_t selectedDeviceIndex = 0;
    d872:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    d879:	00 
  for (const auto &physDev : physicalDeviceList) {
    d87a:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    d881:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    d885:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d889:	48 89 c7             	mov    %rax,%rdi
    d88c:	e8 21 10 00 00       	call   e8b2 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>
    d891:	48 89 85 28 f9 ff ff 	mov    %rax,-0x6d8(%rbp)
    d898:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d89c:	48 89 c7             	mov    %rax,%rdi
    d89f:	e8 34 10 00 00       	call   e8d8 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>
    d8a4:	48 89 85 20 f9 ff ff 	mov    %rax,-0x6e0(%rbp)
    d8ab:	e9 c7 06 00 00       	jmp    df77 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc45>
    d8b0:	48 8d 85 28 f9 ff ff 	lea    -0x6d8(%rbp),%rax
    d8b7:	48 89 c7             	mov    %rax,%rdi
    d8ba:	e8 9d 10 00 00       	call   e95c <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>
    d8bf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    std::string selectStr = "";
    d8c3:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    d8ca:	48 89 c7             	mov    %rax,%rdi
    d8cd:	e8 2e 5d ff ff       	call   3600 <_ZNSaIcEC1Ev@plt>
    d8d2:	48 8d 95 6f ff ff ff 	lea    -0x91(%rbp),%rdx
    d8d9:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
    d8e0:	48 8d 0d 4c 8c 00 00 	lea    0x8c4c(%rip),%rcx        # 16533 <_ZN6__pstl9execution2v1L5unseqE+0x1ac>
    d8e7:	48 89 ce             	mov    %rcx,%rsi
    d8ea:	48 89 c7             	mov    %rax,%rdi
    d8ed:	e8 4e 61 ff ff       	call   3a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    d8f2:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    d8f9:	48 89 c7             	mov    %rax,%rdi
    d8fc:	e8 af 5a ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>

    VkPhysicalDeviceVulkan11Properties vk11Props{};
    d901:	48 8d 95 60 f1 ff ff 	lea    -0xea0(%rbp),%rdx
    d908:	b8 00 00 00 00       	mov    $0x0,%eax
    d90d:	b9 0e 00 00 00       	mov    $0xe,%ecx
    d912:	48 89 d7             	mov    %rdx,%rdi
    d915:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    vk11Props.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
    d918:	c7 85 60 f1 ff ff 32 	movl   $0x32,-0xea0(%rbp)
    d91f:	00 00 00 
    vk11Props.pNext = nullptr;
    d922:	48 c7 85 68 f1 ff ff 	movq   $0x0,-0xe98(%rbp)
    d929:	00 00 00 00 

    VkPhysicalDeviceVulkan12Properties vk12Props{};
    d92d:	48 8d 95 b0 f2 ff ff 	lea    -0xd50(%rbp),%rdx
    d934:	b8 00 00 00 00       	mov    $0x0,%eax
    d939:	b9 5c 00 00 00       	mov    $0x5c,%ecx
    d93e:	48 89 d7             	mov    %rdx,%rdi
    d941:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    vk12Props.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
    d944:	c7 85 b0 f2 ff ff 34 	movl   $0x34,-0xd50(%rbp)
    d94b:	00 00 00 
    vk12Props.pNext = &vk11Props;
    d94e:	48 8d 85 60 f1 ff ff 	lea    -0xea0(%rbp),%rax
    d955:	48 89 85 b8 f2 ff ff 	mov    %rax,-0xd48(%rbp)

    VkPhysicalDeviceVulkan13Properties vk13Props{};
    d95c:	48 8d 95 d0 f1 ff ff 	lea    -0xe30(%rbp),%rdx
    d963:	b8 00 00 00 00       	mov    $0x0,%eax
    d968:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    d96d:	48 89 d7             	mov    %rdx,%rdi
    d970:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    vk13Props.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES;
    d973:	c7 85 d0 f1 ff ff 36 	movl   $0x36,-0xe30(%rbp)
    d97a:	00 00 00 
    vk13Props.pNext = &vk12Props;
    d97d:	48 8d 85 b0 f2 ff ff 	lea    -0xd50(%rbp),%rax
    d984:	48 89 85 d8 f1 ff ff 	mov    %rax,-0xe28(%rbp)

    auto deviceProperties =
        vkh::getPhysicalDevicePropertyList(physDev, &vk13Props);
    d98b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d98f:	48 8b 08             	mov    (%rax),%rcx
    d992:	48 8d 85 90 f5 ff ff 	lea    -0xa70(%rbp),%rax
    d999:	48 8d 95 d0 f1 ff ff 	lea    -0xe30(%rbp),%rdx
    d9a0:	48 89 ce             	mov    %rcx,%rsi
    d9a3:	48 89 c7             	mov    %rax,%rdi
    d9a6:	e8 88 85 ff ff       	call   5f33 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_TPv>

    if (deviceProperties.properties.deviceID ==
    d9ab:	8b 95 ac f5 ff ff    	mov    -0xa54(%rbp),%edx
        selectedDeviceProperties.deviceID) {
    d9b1:	8b 85 7c f9 ff ff    	mov    -0x684(%rbp),%eax
    if (deviceProperties.properties.deviceID ==
    d9b7:	39 c2                	cmp    %eax,%edx
    d9b9:	75 08                	jne    d9c3 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x691>
      selectedDeviceIndex = index;
    d9bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d9bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    }
    if (selectedDeviceIndex == index) {
    d9c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d9c7:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    d9cb:	75 19                	jne    d9e6 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b4>
      selectStr = " (selected)";
    d9cd:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
    d9d4:	48 8d 15 59 8b 00 00 	lea    0x8b59(%rip),%rdx        # 16534 <_ZN6__pstl9execution2v1L5unseqE+0x1ad>
    d9db:	48 89 d6             	mov    %rdx,%rsi
    d9de:	48 89 c7             	mov    %rax,%rdi
    d9e1:	e8 da 5a ff ff       	call   34c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>
    }
    fs << "\t3." << index << " Device " << index << selectStr << ":\n";
    d9e6:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    d9ed:	48 83 c0 10          	add    $0x10,%rax
    d9f1:	48 8d 15 48 8b 00 00 	lea    0x8b48(%rip),%rdx        # 16540 <_ZN6__pstl9execution2v1L5unseqE+0x1b9>
    d9f8:	48 89 d6             	mov    %rdx,%rsi
    d9fb:	48 89 c7             	mov    %rax,%rdi
    d9fe:	e8 fd 58 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    da03:	48 89 c2             	mov    %rax,%rdx
    da06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    da0a:	48 89 c6             	mov    %rax,%rsi
    da0d:	48 89 d7             	mov    %rdx,%rdi
    da10:	e8 6b 56 ff ff       	call   3080 <_ZNSolsEm@plt>
    da15:	48 89 c2             	mov    %rax,%rdx
    da18:	48 8d 05 25 8b 00 00 	lea    0x8b25(%rip),%rax        # 16544 <_ZN6__pstl9execution2v1L5unseqE+0x1bd>
    da1f:	48 89 c6             	mov    %rax,%rsi
    da22:	48 89 d7             	mov    %rdx,%rdi
    da25:	e8 d6 58 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    da2a:	48 89 c2             	mov    %rax,%rdx
    da2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    da31:	48 89 c6             	mov    %rax,%rsi
    da34:	48 89 d7             	mov    %rdx,%rdi
    da37:	e8 44 56 ff ff       	call   3080 <_ZNSolsEm@plt>
    da3c:	48 89 c2             	mov    %rax,%rdx
    da3f:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
    da46:	48 89 c6             	mov    %rax,%rsi
    da49:	48 89 d7             	mov    %rdx,%rdi
    da4c:	e8 5f 58 ff ff       	call   32b0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>
    da51:	48 89 c2             	mov    %rax,%rdx
    da54:	48 8d 05 f2 8a 00 00 	lea    0x8af2(%rip),%rax        # 1654d <_ZN6__pstl9execution2v1L5unseqE+0x1c6>
    da5b:	48 89 c6             	mov    %rax,%rsi
    da5e:	48 89 d7             	mov    %rdx,%rdi
    da61:	e8 9a 58 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    fs << "\t\t3." << index << ".1 Device properties:\n";
    da66:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    da6d:	48 83 c0 10          	add    $0x10,%rax
    da71:	48 8d 15 d8 8a 00 00 	lea    0x8ad8(%rip),%rdx        # 16550 <_ZN6__pstl9execution2v1L5unseqE+0x1c9>
    da78:	48 89 d6             	mov    %rdx,%rsi
    da7b:	48 89 c7             	mov    %rax,%rdi
    da7e:	e8 7d 58 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    da83:	48 89 c2             	mov    %rax,%rdx
    da86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    da8a:	48 89 c6             	mov    %rax,%rsi
    da8d:	48 89 d7             	mov    %rdx,%rdi
    da90:	e8 eb 55 ff ff       	call   3080 <_ZNSolsEm@plt>
    da95:	48 89 c2             	mov    %rax,%rdx
    da98:	48 8d 05 b6 8a 00 00 	lea    0x8ab6(%rip),%rax        # 16555 <_ZN6__pstl9execution2v1L5unseqE+0x1ce>
    da9f:	48 89 c6             	mov    %rax,%rsi
    daa2:	48 89 d7             	mov    %rdx,%rdi
    daa5:	e8 56 58 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    fs << "\t\t\tDevice ID: " << deviceProperties.properties.deviceID << '\n';
    daaa:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dab1:	48 83 c0 10          	add    $0x10,%rax
    dab5:	48 8d 15 b0 8a 00 00 	lea    0x8ab0(%rip),%rdx        # 1656c <_ZN6__pstl9execution2v1L5unseqE+0x1e5>
    dabc:	48 89 d6             	mov    %rdx,%rsi
    dabf:	48 89 c7             	mov    %rax,%rdi
    dac2:	e8 39 58 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    dac7:	48 89 c2             	mov    %rax,%rdx
    daca:	8b 85 ac f5 ff ff    	mov    -0xa54(%rbp),%eax
    dad0:	89 c6                	mov    %eax,%esi
    dad2:	48 89 d7             	mov    %rdx,%rdi
    dad5:	e8 d6 59 ff ff       	call   34b0 <_ZNSolsEj@plt>
    dada:	be 0a 00 00 00       	mov    $0xa,%esi
    dadf:	48 89 c7             	mov    %rax,%rdi
    dae2:	e8 29 59 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t\tDevice name: " << deviceProperties.properties.deviceName
       << '\n';
    dae7:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    daee:	48 83 c0 10          	add    $0x10,%rax
    daf2:	48 8d 15 82 8a 00 00 	lea    0x8a82(%rip),%rdx        # 1657b <_ZN6__pstl9execution2v1L5unseqE+0x1f4>
    daf9:	48 89 d6             	mov    %rdx,%rsi
    dafc:	48 89 c7             	mov    %rax,%rdi
    daff:	e8 fc 57 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    db04:	48 89 c2             	mov    %rax,%rdx
    db07:	48 8d 85 90 f5 ff ff 	lea    -0xa70(%rbp),%rax
    db0e:	48 83 c0 24          	add    $0x24,%rax
    db12:	48 89 c6             	mov    %rax,%rsi
    db15:	48 89 d7             	mov    %rdx,%rdi
    db18:	e8 e3 57 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    db1d:	be 0a 00 00 00       	mov    $0xa,%esi
    db22:	48 89 c7             	mov    %rax,%rdi
    db25:	e8 e6 58 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t\tDevice type: ";
    db2a:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    db31:	48 83 c0 10          	add    $0x10,%rax
    db35:	48 8d 15 50 8a 00 00 	lea    0x8a50(%rip),%rdx        # 1658c <_ZN6__pstl9execution2v1L5unseqE+0x205>
    db3c:	48 89 d6             	mov    %rdx,%rsi
    db3f:	48 89 c7             	mov    %rax,%rdi
    db42:	e8 b9 57 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    switch (deviceProperties.properties.deviceType) {
    db47:	8b 85 b0 f5 ff ff    	mov    -0xa50(%rbp),%eax
    db4d:	83 f8 04             	cmp    $0x4,%eax
    db50:	0f 84 80 00 00 00    	je     dbd6 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a4>
    db56:	83 f8 04             	cmp    $0x4,%eax
    db59:	0f 8f 96 00 00 00    	jg     dbf5 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c3>
    db5f:	83 f8 03             	cmp    $0x3,%eax
    db62:	74 53                	je     dbb7 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x885>
    db64:	83 f8 03             	cmp    $0x3,%eax
    db67:	0f 8f 88 00 00 00    	jg     dbf5 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c3>
    db6d:	83 f8 01             	cmp    $0x1,%eax
    db70:	74 07                	je     db79 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x847>
    db72:	83 f8 02             	cmp    $0x2,%eax
    db75:	74 21                	je     db98 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x866>
    db77:	eb 7c                	jmp    dbf5 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c3>
    case 1:
      fs << "Integrated GPU\n";
    db79:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    db80:	48 83 c0 10          	add    $0x10,%rax
    db84:	48 8d 15 12 8a 00 00 	lea    0x8a12(%rip),%rdx        # 1659d <_ZN6__pstl9execution2v1L5unseqE+0x216>
    db8b:	48 89 d6             	mov    %rdx,%rsi
    db8e:	48 89 c7             	mov    %rax,%rdi
    db91:	e8 6a 57 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
    db96:	eb 7b                	jmp    dc13 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e1>
    case 2:
      fs << "Discrete GPU\n";
    db98:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    db9f:	48 83 c0 10          	add    $0x10,%rax
    dba3:	48 8d 15 03 8a 00 00 	lea    0x8a03(%rip),%rdx        # 165ad <_ZN6__pstl9execution2v1L5unseqE+0x226>
    dbaa:	48 89 d6             	mov    %rdx,%rsi
    dbad:	48 89 c7             	mov    %rax,%rdi
    dbb0:	e8 4b 57 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
    dbb5:	eb 5c                	jmp    dc13 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e1>
    case 3:
      fs << "Virtual GPU\n";
    dbb7:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dbbe:	48 83 c0 10          	add    $0x10,%rax
    dbc2:	48 8d 15 f2 89 00 00 	lea    0x89f2(%rip),%rdx        # 165bb <_ZN6__pstl9execution2v1L5unseqE+0x234>
    dbc9:	48 89 d6             	mov    %rdx,%rsi
    dbcc:	48 89 c7             	mov    %rax,%rdi
    dbcf:	e8 2c 57 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
    dbd4:	eb 3d                	jmp    dc13 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e1>
    case 4:
      fs << "CPU\n";
    dbd6:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dbdd:	48 83 c0 10          	add    $0x10,%rax
    dbe1:	48 8d 15 e0 89 00 00 	lea    0x89e0(%rip),%rdx        # 165c8 <_ZN6__pstl9execution2v1L5unseqE+0x241>
    dbe8:	48 89 d6             	mov    %rdx,%rsi
    dbeb:	48 89 c7             	mov    %rax,%rdi
    dbee:	e8 0d 57 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
    dbf3:	eb 1e                	jmp    dc13 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e1>
    default:
      fs << "Other\n";
    dbf5:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dbfc:	48 83 c0 10          	add    $0x10,%rax
    dc00:	48 8d 15 c6 89 00 00 	lea    0x89c6(%rip),%rdx        # 165cd <_ZN6__pstl9execution2v1L5unseqE+0x246>
    dc07:	48 89 d6             	mov    %rdx,%rsi
    dc0a:	48 89 c7             	mov    %rax,%rdi
    dc0d:	e8 ee 56 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
    dc12:	90                   	nop
    }
    fs << "\t\t\tDriver ID: " << vk12Props.driverID << '\n';
    dc13:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dc1a:	48 83 c0 10          	add    $0x10,%rax
    dc1e:	48 8d 15 af 89 00 00 	lea    0x89af(%rip),%rdx        # 165d4 <_ZN6__pstl9execution2v1L5unseqE+0x24d>
    dc25:	48 89 d6             	mov    %rdx,%rsi
    dc28:	48 89 c7             	mov    %rax,%rdi
    dc2b:	e8 d0 56 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    dc30:	8b 95 c0 f2 ff ff    	mov    -0xd40(%rbp),%edx
    dc36:	89 d6                	mov    %edx,%esi
    dc38:	48 89 c7             	mov    %rax,%rdi
    dc3b:	e8 90 59 ff ff       	call   35d0 <_ZNSolsEi@plt>
    dc40:	be 0a 00 00 00       	mov    $0xa,%esi
    dc45:	48 89 c7             	mov    %rax,%rdi
    dc48:	e8 c3 57 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t\tDriver name: " << vk12Props.driverName << '\n';
    dc4d:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dc54:	48 83 c0 10          	add    $0x10,%rax
    dc58:	48 8d 15 84 89 00 00 	lea    0x8984(%rip),%rdx        # 165e3 <_ZN6__pstl9execution2v1L5unseqE+0x25c>
    dc5f:	48 89 d6             	mov    %rdx,%rsi
    dc62:	48 89 c7             	mov    %rax,%rdi
    dc65:	e8 96 56 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    dc6a:	48 89 c2             	mov    %rax,%rdx
    dc6d:	48 8d 85 b0 f2 ff ff 	lea    -0xd50(%rbp),%rax
    dc74:	48 83 c0 14          	add    $0x14,%rax
    dc78:	48 89 c6             	mov    %rax,%rsi
    dc7b:	48 89 d7             	mov    %rdx,%rdi
    dc7e:	e8 7d 56 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    dc83:	be 0a 00 00 00       	mov    $0xa,%esi
    dc88:	48 89 c7             	mov    %rax,%rdi
    dc8b:	e8 80 57 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t\tDriver version: " << vk12Props.driverInfo << '\n';
    dc90:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dc97:	48 83 c0 10          	add    $0x10,%rax
    dc9b:	48 8d 15 52 89 00 00 	lea    0x8952(%rip),%rdx        # 165f4 <_ZN6__pstl9execution2v1L5unseqE+0x26d>
    dca2:	48 89 d6             	mov    %rdx,%rsi
    dca5:	48 89 c7             	mov    %rax,%rdi
    dca8:	e8 53 56 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    dcad:	48 89 c2             	mov    %rax,%rdx
    dcb0:	48 8d 85 b0 f2 ff ff 	lea    -0xd50(%rbp),%rax
    dcb7:	48 05 14 01 00 00    	add    $0x114,%rax
    dcbd:	48 89 c6             	mov    %rax,%rsi
    dcc0:	48 89 d7             	mov    %rdx,%rdi
    dcc3:	e8 38 56 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    dcc8:	be 0a 00 00 00       	mov    $0xa,%esi
    dccd:	48 89 c7             	mov    %rax,%rdi
    dcd0:	e8 3b 57 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    // fs << "\t\t\tDriver version: " << vk13Props. << '\n';
    fs << "\t\t\tMaximum memory allocation size: "
    dcd5:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dcdc:	48 83 c0 10          	add    $0x10,%rax
    dce0:	48 8d 15 21 89 00 00 	lea    0x8921(%rip),%rdx        # 16608 <_ZN6__pstl9execution2v1L5unseqE+0x281>
    dce7:	48 89 d6             	mov    %rdx,%rsi
    dcea:	48 89 c7             	mov    %rax,%rdi
    dced:	e8 0e 56 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    dcf2:	48 89 c2             	mov    %rax,%rdx
       << vk11Props.maxMemoryAllocationSize << '\n';
    dcf5:	48 8b 85 c8 f1 ff ff 	mov    -0xe38(%rbp),%rax
    dcfc:	48 89 c6             	mov    %rax,%rsi
    dcff:	48 89 d7             	mov    %rdx,%rdi
    dd02:	e8 79 53 ff ff       	call   3080 <_ZNSolsEm@plt>
    dd07:	be 0a 00 00 00       	mov    $0xa,%esi
    dd0c:	48 89 c7             	mov    %rax,%rdi
    dd0f:	e8 fc 56 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t3." << index << ".2 Available device extensions:\n";
    dd14:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dd1b:	48 83 c0 10          	add    $0x10,%rax
    dd1f:	48 8d 15 2a 88 00 00 	lea    0x882a(%rip),%rdx        # 16550 <_ZN6__pstl9execution2v1L5unseqE+0x1c9>
    dd26:	48 89 d6             	mov    %rdx,%rsi
    dd29:	48 89 c7             	mov    %rax,%rdi
    dd2c:	e8 cf 55 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    dd31:	48 89 c2             	mov    %rax,%rdx
    dd34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dd38:	48 89 c6             	mov    %rax,%rsi
    dd3b:	48 89 d7             	mov    %rdx,%rdi
    dd3e:	e8 3d 53 ff ff       	call   3080 <_ZNSolsEm@plt>
    dd43:	48 89 c2             	mov    %rax,%rdx
    dd46:	48 8d 05 e3 88 00 00 	lea    0x88e3(%rip),%rax        # 16630 <_ZN6__pstl9execution2v1L5unseqE+0x2a9>
    dd4d:	48 89 c6             	mov    %rax,%rsi
    dd50:	48 89 d7             	mov    %rdx,%rdi
    dd53:	e8 a8 55 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    auto availableDeviceExtensions =
        vkh::getAvailableDeviceExtensionList(physDev);
    dd58:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    dd5c:	48 8b 08             	mov    (%rax),%rcx
    dd5f:	48 8d 85 00 f9 ff ff 	lea    -0x700(%rbp),%rax
    dd66:	ba 00 00 00 00       	mov    $0x0,%edx
    dd6b:	48 89 ce             	mov    %rcx,%rsi
    dd6e:	48 89 c7             	mov    %rax,%rdi
    dd71:	e8 4f 7d ff ff       	call   5ac5 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc>
    for (const auto &extension : availableDeviceExtensions) {
    dd76:	48 8d 85 00 f9 ff ff 	lea    -0x700(%rbp),%rax
    dd7d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    dd81:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    dd85:	48 89 c7             	mov    %rax,%rdi
    dd88:	e8 f7 0c 00 00       	call   ea84 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE5beginEv>
    dd8d:	48 89 85 f8 f8 ff ff 	mov    %rax,-0x708(%rbp)
    dd94:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    dd98:	48 89 c7             	mov    %rax,%rdi
    dd9b:	e8 0a 0d 00 00       	call   eaaa <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE3endEv>
    dda0:	48 89 85 f0 f8 ff ff 	mov    %rax,-0x710(%rbp)
    dda7:	eb 5e                	jmp    de07 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xad5>
    dda9:	48 8d 85 f8 f8 ff ff 	lea    -0x708(%rbp),%rax
    ddb0:	48 89 c7             	mov    %rax,%rdi
    ddb3:	e8 7a 0d 00 00       	call   eb32 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    ddb8:	48 89 45 90          	mov    %rax,-0x70(%rbp)
      fs << "\t\t\t" << extension.extensionName << '\n';
    ddbc:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    ddc3:	48 83 c0 10          	add    $0x10,%rax
    ddc7:	48 8d 15 83 88 00 00 	lea    0x8883(%rip),%rdx        # 16651 <_ZN6__pstl9execution2v1L5unseqE+0x2ca>
    ddce:	48 89 d6             	mov    %rdx,%rsi
    ddd1:	48 89 c7             	mov    %rax,%rdi
    ddd4:	e8 27 55 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    ddd9:	48 89 c2             	mov    %rax,%rdx
    dddc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    dde0:	48 89 c6             	mov    %rax,%rsi
    dde3:	48 89 d7             	mov    %rdx,%rdi
    dde6:	e8 15 55 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    ddeb:	be 0a 00 00 00       	mov    $0xa,%esi
    ddf0:	48 89 c7             	mov    %rax,%rdi
    ddf3:	e8 18 56 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    for (const auto &extension : availableDeviceExtensions) {
    ddf8:	48 8d 85 f8 f8 ff ff 	lea    -0x708(%rbp),%rax
    ddff:	48 89 c7             	mov    %rax,%rdi
    de02:	e8 07 0d 00 00       	call   eb0e <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    de07:	48 8d 95 f0 f8 ff ff 	lea    -0x710(%rbp),%rdx
    de0e:	48 8d 85 f8 f8 ff ff 	lea    -0x708(%rbp),%rax
    de15:	48 89 d6             	mov    %rdx,%rsi
    de18:	48 89 c7             	mov    %rax,%rdi
    de1b:	e8 b3 0c 00 00       	call   ead3 <_ZN9__gnu_cxxneIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    de20:	84 c0                	test   %al,%al
    de22:	75 85                	jne    dda9 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa77>
    }
    if (selectedDeviceIndex == index) {
    de24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    de28:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    de2c:	0f 85 fb 00 00 00    	jne    df2d <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbfb>
      fs << "\t\t3." << index << ".3 Required device extensions:\n";
    de32:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    de39:	48 83 c0 10          	add    $0x10,%rax
    de3d:	48 8d 15 0c 87 00 00 	lea    0x870c(%rip),%rdx        # 16550 <_ZN6__pstl9execution2v1L5unseqE+0x1c9>
    de44:	48 89 d6             	mov    %rdx,%rsi
    de47:	48 89 c7             	mov    %rax,%rdi
    de4a:	e8 b1 54 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    de4f:	48 89 c2             	mov    %rax,%rdx
    de52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    de56:	48 89 c6             	mov    %rax,%rsi
    de59:	48 89 d7             	mov    %rdx,%rdi
    de5c:	e8 1f 52 ff ff       	call   3080 <_ZNSolsEm@plt>
    de61:	48 89 c2             	mov    %rax,%rdx
    de64:	48 8d 05 ed 87 00 00 	lea    0x87ed(%rip),%rax        # 16658 <_ZN6__pstl9execution2v1L5unseqE+0x2d1>
    de6b:	48 89 c6             	mov    %rax,%rsi
    de6e:	48 89 d7             	mov    %rdx,%rdi
    de71:	e8 8a 54 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      for (const auto &extension : deviceExtensions) {
    de76:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
    de7d:	48 05 88 00 00 00    	add    $0x88,%rax
    de83:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    de87:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    de8b:	48 89 c7             	mov    %rax,%rdi
    de8e:	e8 4f 07 00 00       	call   e5e2 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
    de93:	48 89 85 e8 f8 ff ff 	mov    %rax,-0x718(%rbp)
    de9a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    de9e:	48 89 c7             	mov    %rax,%rdi
    dea1:	e8 62 07 00 00       	call   e608 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
    dea6:	48 89 85 e0 f8 ff ff 	mov    %rax,-0x720(%rbp)
    dead:	eb 61                	jmp    df10 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbde>
    deaf:	48 8d 85 e8 f8 ff ff 	lea    -0x718(%rbp),%rax
    deb6:	48 89 c7             	mov    %rax,%rdi
    deb9:	e8 ce 07 00 00       	call   e68c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
    debe:	48 89 45 98          	mov    %rax,-0x68(%rbp)
        fs << "\t\t\t" << extension << '\n';
    dec2:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dec9:	48 83 c0 10          	add    $0x10,%rax
    decd:	48 8d 15 7d 87 00 00 	lea    0x877d(%rip),%rdx        # 16651 <_ZN6__pstl9execution2v1L5unseqE+0x2ca>
    ded4:	48 89 d6             	mov    %rdx,%rsi
    ded7:	48 89 c7             	mov    %rax,%rdi
    deda:	e8 21 54 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    dedf:	48 89 c2             	mov    %rax,%rdx
    dee2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    dee6:	48 8b 00             	mov    (%rax),%rax
    dee9:	48 89 c6             	mov    %rax,%rsi
    deec:	48 89 d7             	mov    %rdx,%rdi
    deef:	e8 0c 54 ff ff       	call   3300 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    def4:	be 0a 00 00 00       	mov    $0xa,%esi
    def9:	48 89 c7             	mov    %rax,%rdi
    defc:	e8 0f 55 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
      for (const auto &extension : deviceExtensions) {
    df01:	48 8d 85 e8 f8 ff ff 	lea    -0x718(%rbp),%rax
    df08:	48 89 c7             	mov    %rax,%rdi
    df0b:	e8 5c 07 00 00       	call   e66c <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>
    df10:	48 8d 95 e0 f8 ff ff 	lea    -0x720(%rbp),%rdx
    df17:	48 8d 85 e8 f8 ff ff 	lea    -0x718(%rbp),%rax
    df1e:	48 89 d6             	mov    %rdx,%rsi
    df21:	48 89 c7             	mov    %rax,%rdi
    df24:	e8 08 07 00 00       	call   e631 <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    df29:	84 c0                	test   %al,%al
    df2b:	75 82                	jne    deaf <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb7d>
      }
    }
    fs << '\n';
    df2d:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    df34:	48 83 c0 10          	add    $0x10,%rax
    df38:	be 0a 00 00 00       	mov    $0xa,%esi
    df3d:	48 89 c7             	mov    %rax,%rdi
    df40:	e8 cb 54 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    ++index;
    df45:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  }
    df4a:	48 8d 85 00 f9 ff ff 	lea    -0x700(%rbp),%rax
    df51:	48 89 c7             	mov    %rax,%rdi
    df54:	e8 e1 8c ff ff       	call   6c3a <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    df59:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
    df60:	48 89 c7             	mov    %rax,%rdi
    df63:	e8 48 52 ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  for (const auto &physDev : physicalDeviceList) {
    df68:	48 8d 85 28 f9 ff ff 	lea    -0x6d8(%rbp),%rax
    df6f:	48 89 c7             	mov    %rax,%rdi
    df72:	e8 c5 09 00 00       	call   e93c <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>
    df77:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    df7e:	48 8d 85 28 f9 ff ff 	lea    -0x6d8(%rbp),%rax
    df85:	48 89 d6             	mov    %rdx,%rsi
    df88:	48 89 c7             	mov    %rax,%rdi
    df8b:	e8 71 09 00 00       	call   e901 <_ZN9__gnu_cxxneIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    df90:	84 c0                	test   %al,%al
    df92:	0f 85 18 f9 ff ff    	jne    d8b0 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x57e>
  fs << '\n';
    df98:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    df9f:	48 83 c0 10          	add    $0x10,%rax
    dfa3:	be 0a 00 00 00       	mov    $0xa,%esi
    dfa8:	48 89 c7             	mov    %rax,%rdi
    dfab:	e8 60 54 ff ff       	call   3410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    dfb0:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    dfb7:	48 89 c7             	mov    %rax,%rdi
    dfba:	e8 05 8f ff ff       	call   6ec4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    dfbf:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    dfc6:	48 89 c7             	mov    %rax,%rdi
    dfc9:	e8 fe 8a ff ff       	call   6acc <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    dfce:	48 8d 85 f0 fc ff ff 	lea    -0x310(%rbp),%rax
    dfd5:	48 89 c7             	mov    %rax,%rdi
    dfd8:	e8 5d 8c ff ff       	call   6c3a <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    dfdd:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    dfe4:	48 89 c7             	mov    %rax,%rdi
    dfe7:	e8 84 50 ff ff       	call   3070 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@plt>
    dfec:	e9 cd 00 00 00       	jmp    e0be <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd8c>
    throw std::runtime_error("Failed to open " + filePath + '\n');
    dff1:	49 89 c4             	mov    %rax,%r12
    dff4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    dffb:	48 89 c7             	mov    %rax,%rdi
    dffe:	e8 ad 51 ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    e003:	eb 03                	jmp    e008 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcd6>
    e005:	49 89 c4             	mov    %rax,%r12
    e008:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    e00f:	48 89 c7             	mov    %rax,%rdi
    e012:	e8 99 51 ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    e017:	eb 03                	jmp    e01c <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcea>
    e019:	49 89 c4             	mov    %rax,%r12
    e01c:	48 89 df             	mov    %rbx,%rdi
    e01f:	e8 dc 51 ff ff       	call   3200 <__cxa_free_exception@plt>
    e024:	4c 89 e3             	mov    %r12,%rbx
    e027:	eb 7b                	jmp    e0a4 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd72>
    std::string selectStr = "";
    e029:	48 89 c3             	mov    %rax,%rbx
    e02c:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    e033:	48 89 c7             	mov    %rax,%rdi
    e036:	e8 75 53 ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
    e03b:	eb 2b                	jmp    e068 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd36>
  }
    e03d:	48 89 c3             	mov    %rax,%rbx
    e040:	48 8d 85 00 f9 ff ff 	lea    -0x700(%rbp),%rax
    e047:	48 89 c7             	mov    %rax,%rdi
    e04a:	e8 eb 8b ff ff       	call   6c3a <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    e04f:	eb 03                	jmp    e054 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd22>
    e051:	48 89 c3             	mov    %rax,%rbx
    e054:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
    e05b:	48 89 c7             	mov    %rax,%rdi
    e05e:	e8 4d 51 ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    e063:	eb 03                	jmp    e068 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd36>
    e065:	48 89 c3             	mov    %rax,%rbx
    e068:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    e06f:	48 89 c7             	mov    %rax,%rdi
    e072:	e8 4d 8e ff ff       	call   6ec4 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    e077:	eb 03                	jmp    e07c <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4a>
    e079:	48 89 c3             	mov    %rax,%rbx
    e07c:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    e083:	48 89 c7             	mov    %rax,%rdi
    e086:	e8 41 8a ff ff       	call   6acc <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    e08b:	eb 03                	jmp    e090 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd5e>
    e08d:	48 89 c3             	mov    %rax,%rbx
    e090:	48 8d 85 f0 fc ff ff 	lea    -0x310(%rbp),%rax
    e097:	48 89 c7             	mov    %rax,%rdi
    e09a:	e8 9b 8b ff ff       	call   6c3a <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    e09f:	eb 03                	jmp    e0a4 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd72>
    e0a1:	48 89 c3             	mov    %rax,%rbx
    e0a4:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    e0ab:	48 89 c7             	mov    %rax,%rdi
    e0ae:	e8 bd 4f ff ff       	call   3070 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@plt>
    e0b3:	48 89 d8             	mov    %rbx,%rax
    e0b6:	48 89 c7             	mov    %rax,%rdi
    e0b9:	e8 32 55 ff ff       	call   35f0 <_Unwind_Resume@plt>
    e0be:	48 81 c4 c0 0e 00 00 	add    $0xec0,%rsp
    e0c5:	5b                   	pop    %rbx
    e0c6:	41 5c                	pop    %r12
    e0c8:	5d                   	pop    %rbp
    e0c9:	c3                   	ret

000000000000e0ca <_Z41__static_initialization_and_destruction_0ii>:
    e0ca:	55                   	push   %rbp
    e0cb:	48 89 e5             	mov    %rsp,%rbp
    e0ce:	48 83 ec 10          	sub    $0x10,%rsp
    e0d2:	89 7d fc             	mov    %edi,-0x4(%rbp)
    e0d5:	89 75 f8             	mov    %esi,-0x8(%rbp)
    e0d8:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    e0dc:	75 3b                	jne    e119 <_Z41__static_initialization_and_destruction_0ii+0x4f>
    e0de:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    e0e5:	75 32                	jne    e119 <_Z41__static_initialization_and_destruction_0ii+0x4f>
    e0e7:	48 8d 05 c6 44 01 00 	lea    0x144c6(%rip),%rax        # 225b4 <_ZStL8__ioinit>
    e0ee:	48 89 c7             	mov    %rax,%rdi
    e0f1:	e8 3a 54 ff ff       	call   3530 <_ZNSt8ios_base4InitC1Ev@plt>
    e0f6:	48 8d 05 33 42 01 00 	lea    0x14233(%rip),%rax        # 22330 <__dso_handle>
    e0fd:	48 89 c2             	mov    %rax,%rdx
    e100:	48 8d 05 ad 44 01 00 	lea    0x144ad(%rip),%rax        # 225b4 <_ZStL8__ioinit>
    e107:	48 89 c6             	mov    %rax,%rsi
    e10a:	48 8b 05 b7 3e 01 00 	mov    0x13eb7(%rip),%rax        # 21fc8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    e111:	48 89 c7             	mov    %rax,%rdi
    e114:	e8 87 51 ff ff       	call   32a0 <__cxa_atexit@plt>
    e119:	90                   	nop
    e11a:	c9                   	leave
    e11b:	c3                   	ret

000000000000e11c <_GLOBAL__sub_I__ZN9VulkanApp12createWindowEv>:
    e11c:	55                   	push   %rbp
    e11d:	48 89 e5             	mov    %rsp,%rbp
    e120:	be ff ff 00 00       	mov    $0xffff,%esi
    e125:	bf 01 00 00 00       	mov    $0x1,%edi
    e12a:	e8 9b ff ff ff       	call   e0ca <_Z41__static_initialization_and_destruction_0ii>
    e12f:	5d                   	pop    %rbp
    e130:	c3                   	ret
    e131:	90                   	nop

000000000000e132 <_ZNSt9exceptionC1Ev>:
   *  throw non-class data (e.g., fundamental types).
   */
  class exception
  {
  public:
    exception() _GLIBCXX_NOTHROW { }
    e132:	55                   	push   %rbp
    e133:	48 89 e5             	mov    %rsp,%rbp
    e136:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e13a:	48 8d 15 cf 3b 01 00 	lea    0x13bcf(%rip),%rdx        # 21d10 <_ZTVSt9exception@GLIBCXX_3.4+0x10>
    e141:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e145:	48 89 10             	mov    %rdx,(%rax)
    e148:	90                   	nop
    e149:	5d                   	pop    %rbp
    e14a:	c3                   	ret

000000000000e14b <_ZdlPvS_>:
_GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
    e14b:	55                   	push   %rbp
    e14c:	48 89 e5             	mov    %rsp,%rbp
    e14f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e153:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e157:	90                   	nop
    e158:	5d                   	pop    %rbp
    e159:	c3                   	ret

000000000000e15a <_ZNKSt19bad_optional_access4whatEv>:
    const char* what() const noexcept override
    e15a:	55                   	push   %rbp
    e15b:	48 89 e5             	mov    %rsp,%rbp
    e15e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return "bad optional access"; }
    e162:	48 8d 05 07 82 00 00 	lea    0x8207(%rip),%rax        # 16370 <_ZL47VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM+0x8>
    e169:	5d                   	pop    %rbp
    e16a:	c3                   	ret
    e16b:	90                   	nop

000000000000e16c <_ZNSt19bad_optional_accessC1Ev>:
    bad_optional_access() = default;
    e16c:	55                   	push   %rbp
    e16d:	48 89 e5             	mov    %rsp,%rbp
    e170:	48 83 ec 10          	sub    $0x10,%rsp
    e174:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e178:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e17c:	48 89 c7             	mov    %rax,%rdi
    e17f:	e8 ae ff ff ff       	call   e132 <_ZNSt9exceptionC1Ev>
    e184:	48 8d 15 35 3b 01 00 	lea    0x13b35(%rip),%rdx        # 21cc0 <_ZTVSt19bad_optional_access+0x10>
    e18b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e18f:	48 89 10             	mov    %rdx,(%rax)
    e192:	90                   	nop
    e193:	c9                   	leave
    e194:	c3                   	ret

000000000000e195 <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
    e195:	55                   	push   %rbp
    e196:	48 89 e5             	mov    %rsp,%rbp
    e199:	53                   	push   %rbx
    e19a:	48 83 ec 08          	sub    $0x8,%rsp
    e19e:	bf 08 00 00 00       	mov    $0x8,%edi
    e1a3:	e8 a8 4f ff ff       	call   3150 <__cxa_allocate_exception@plt>
    e1a8:	48 89 c3             	mov    %rax,%rbx
    e1ab:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    e1b2:	48 89 df             	mov    %rbx,%rdi
    e1b5:	e8 b2 ff ff ff       	call   e16c <_ZNSt19bad_optional_accessC1Ev>
    e1ba:	48 8d 05 85 42 00 00 	lea    0x4285(%rip),%rax        # 12446 <_ZNSt19bad_optional_accessD1Ev>
    e1c1:	48 89 c2             	mov    %rax,%rdx
    e1c4:	48 8d 05 8d 3b 01 00 	lea    0x13b8d(%rip),%rax        # 21d58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    e1cb:	48 89 c6             	mov    %rax,%rsi
    e1ce:	48 89 df             	mov    %rbx,%rdi
    e1d1:	e8 ca 53 ff ff       	call   35a0 <__cxa_throw@plt>

000000000000e1d6 <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE4zeroEv>:
	    return *this;
	  }

	// 20.11.5.4 special values
	static constexpr duration
	zero() noexcept
    e1d6:	55                   	push   %rbp
    e1d7:	48 89 e5             	mov    %rsp,%rbp
    e1da:	48 83 ec 10          	sub    $0x10,%rsp
	{ return duration(duration_values<rep>::zero()); }
    e1de:	e8 3a 00 00 00       	call   e21d <_ZNSt6chrono15duration_valuesIlE4zeroEv>
    e1e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e1e7:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
    e1eb:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    e1ef:	48 89 d6             	mov    %rdx,%rsi
    e1f2:	48 89 c7             	mov    %rax,%rdi
    e1f5:	e8 06 00 00 00       	call   e200 <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_>
    e1fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e1fe:	c9                   	leave
    e1ff:	c3                   	ret

000000000000e200 <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
    e200:	55                   	push   %rbp
    e201:	48 89 e5             	mov    %rsp,%rbp
    e204:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e208:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  : __r(static_cast<rep>(__rep)) { }
    e20c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e210:	48 8b 10             	mov    (%rax),%rdx
    e213:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e217:	48 89 10             	mov    %rdx,(%rax)
    e21a:	90                   	nop
    e21b:	5d                   	pop    %rbp
    e21c:	c3                   	ret

000000000000e21d <_ZNSt6chrono15duration_valuesIlE4zeroEv>:
	zero() noexcept
    e21d:	55                   	push   %rbp
    e21e:	48 89 e5             	mov    %rsp,%rbp
	{ return _Rep(0); }
    e221:	b8 00 00 00 00       	mov    $0x0,%eax
    e226:	5d                   	pop    %rbp
    e227:	c3                   	ret

000000000000e228 <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>:
	count() const
    e228:	55                   	push   %rbp
    e229:	48 89 e5             	mov    %rsp,%rbp
    e22c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __r; }
    e230:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e234:	48 8b 00             	mov    (%rax),%rax
    e237:	5d                   	pop    %rbp
    e238:	c3                   	ret

000000000000e239 <_ZStorSt13_Ios_OpenmodeS_>:
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _GLIBCXX_CONSTEXPR _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
    e239:	55                   	push   %rbp
    e23a:	48 89 e5             	mov    %rsp,%rbp
    e23d:	89 7d fc             	mov    %edi,-0x4(%rbp)
    e240:	89 75 f8             	mov    %esi,-0x8(%rbp)
    e243:	8b 45 fc             	mov    -0x4(%rbp),%eax
    e246:	0b 45 f8             	or     -0x8(%rbp),%eax
    e249:	5d                   	pop    %rbp
    e24a:	c3                   	ret
    e24b:	90                   	nop

000000000000e24c <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
    e24c:	55                   	push   %rbp
    e24d:	48 89 e5             	mov    %rsp,%rbp
    e250:	48 83 ec 10          	sub    $0x10,%rsp
    e254:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_color = _S_red;
    e258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e25c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      _M_reset();
    e262:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e266:	48 89 c7             	mov    %rax,%rdi
    e269:	e8 04 00 00 00       	call   e272 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
    e26e:	90                   	nop
    e26f:	c9                   	leave
    e270:	c3                   	ret
    e271:	90                   	nop

000000000000e272 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
    e272:	55                   	push   %rbp
    e273:	48 89 e5             	mov    %rsp,%rbp
    e276:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_parent = 0;
    e27a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e27e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    e285:	00 
      _M_header._M_left = &_M_header;
    e286:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e28a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e28e:	48 89 50 10          	mov    %rdx,0x10(%rax)
      _M_header._M_right = &_M_header;
    e292:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e296:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e29a:	48 89 50 18          	mov    %rdx,0x18(%rax)
      _M_node_count = 0;
    e29e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2a2:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    e2a9:	00 
    }
    e2aa:	90                   	nop
    e2ab:	5d                   	pop    %rbp
    e2ac:	c3                   	ret
    e2ad:	90                   	nop

000000000000e2ae <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEEC1Ev>:
      _Optional_payload_base() = default;
    e2ae:	55                   	push   %rbp
    e2af:	48 89 e5             	mov    %rsp,%rbp
    e2b2:	48 83 ec 10          	sub    $0x10,%rsp
    e2b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e2ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2be:	48 89 c7             	mov    %rax,%rdi
    e2c1:	e8 60 00 00 00       	call   e326 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_StorageIS2_Lb1EEC1Ev>
    e2c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2ca:	c6 40 1c 00          	movb   $0x0,0x1c(%rax)
    e2ce:	90                   	nop
    e2cf:	c9                   	leave
    e2d0:	c3                   	ret
    e2d1:	90                   	nop

000000000000e2d2 <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EEC1Ev>:
      _Optional_payload() = default;
    e2d2:	55                   	push   %rbp
    e2d3:	48 89 e5             	mov    %rsp,%rbp
    e2d6:	48 83 ec 10          	sub    $0x10,%rsp
    e2da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e2de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2e2:	48 89 c7             	mov    %rax,%rdi
    e2e5:	e8 c4 ff ff ff       	call   e2ae <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEEC1Ev>
    e2ea:	90                   	nop
    e2eb:	c9                   	leave
    e2ec:	c3                   	ret
    e2ed:	90                   	nop

000000000000e2ee <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
    e2ee:	55                   	push   %rbp
    e2ef:	48 89 e5             	mov    %rsp,%rbp
    e2f2:	48 83 ec 10          	sub    $0x10,%rsp
    e2f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e2fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2fe:	48 89 c7             	mov    %rax,%rdi
    e301:	e8 cc ff ff ff       	call   e2d2 <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EEC1Ev>
    e306:	90                   	nop
    e307:	c9                   	leave
    e308:	c3                   	ret
    e309:	90                   	nop

000000000000e30a <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEC1Ev>:
      constexpr optional() noexcept { }
    e30a:	55                   	push   %rbp
    e30b:	48 89 e5             	mov    %rsp,%rbp
    e30e:	48 83 ec 10          	sub    $0x10,%rsp
    e312:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e316:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e31a:	48 89 c7             	mov    %rax,%rdi
    e31d:	e8 cc ff ff ff       	call   e2ee <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEC1Ev>
    e322:	90                   	nop
    e323:	c9                   	leave
    e324:	c3                   	ret
    e325:	90                   	nop

000000000000e326 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_StorageIS2_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
    e326:	55                   	push   %rbp
    e327:	48 89 e5             	mov    %rsp,%rbp
    e32a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e32e:	90                   	nop
    e32f:	5d                   	pop    %rbp
    e330:	c3                   	ret
    e331:	90                   	nop

000000000000e332 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEaSERKS3_>:
      _Optional_base& operator=(const _Optional_base&) = default;
    e332:	55                   	push   %rbp
    e333:	48 89 e5             	mov    %rsp,%rbp
    e336:	48 83 ec 10          	sub    $0x10,%rsp
    e33a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e33e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e342:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e346:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e34a:	48 89 d6             	mov    %rdx,%rsi
    e34d:	48 89 c7             	mov    %rax,%rdi
    e350:	e8 33 06 00 00       	call   e988 <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EEaSERKS3_>
    e355:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e359:	c9                   	leave
    e35a:	c3                   	ret
    e35b:	90                   	nop

000000000000e35c <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEaSERKS3_>:
    class optional
    e35c:	55                   	push   %rbp
    e35d:	48 89 e5             	mov    %rsp,%rbp
    e360:	48 83 ec 10          	sub    $0x10,%rsp
    e364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e368:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e36c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e370:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e374:	48 89 d6             	mov    %rdx,%rsi
    e377:	48 89 c7             	mov    %rax,%rdi
    e37a:	e8 b3 ff ff ff       	call   e332 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEaSERKS3_>
    e37f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e383:	c9                   	leave
    e384:	c3                   	ret
    e385:	90                   	nop

000000000000e386 <_ZNRSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
    e386:	55                   	push   %rbp
    e387:	48 89 e5             	mov    %rsp,%rbp
    e38a:	48 83 ec 10          	sub    $0x10,%rsp
    e38e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (this->_M_is_engaged())
    e392:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e396:	48 89 c7             	mov    %rax,%rdi
    e399:	e8 1a 00 00 00       	call   e3b8 <_ZNKSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE13_M_is_engagedEv>
    e39e:	84 c0                	test   %al,%al
    e3a0:	74 0e                	je     e3b0 <_ZNRSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE5valueEv+0x2a>
	  return this->_M_get();
    e3a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e3a6:	48 89 c7             	mov    %rax,%rdi
    e3a9:	e8 04 06 00 00       	call   e9b2 <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv>
    e3ae:	eb 05                	jmp    e3b5 <_ZNRSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE5valueEv+0x2f>
	__throw_bad_optional_access();
    e3b0:	e8 e0 fd ff ff       	call   e195 <_ZSt27__throw_bad_optional_accessv>
      }
    e3b5:	c9                   	leave
    e3b6:	c3                   	ret
    e3b7:	90                   	nop

000000000000e3b8 <_ZNKSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
    e3b8:	55                   	push   %rbp
    e3b9:	48 89 e5             	mov    %rsp,%rbp
    e3bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
    e3c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e3c4:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
    e3c8:	5d                   	pop    %rbp
    e3c9:	c3                   	ret

000000000000e3ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
    e3ca:	55                   	push   %rbp
    e3cb:	48 89 e5             	mov    %rsp,%rbp
    e3ce:	48 83 ec 10          	sub    $0x10,%rsp
    e3d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e3d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e3da:	48 89 c7             	mov    %rax,%rdi
    e3dd:	e8 4c 06 00 00       	call   ea2e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>
    e3e2:	90                   	nop
    e3e3:	c9                   	leave
    e3e4:	c3                   	ret
    e3e5:	90                   	nop

000000000000e3e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
    e3e6:	55                   	push   %rbp
    e3e7:	48 89 e5             	mov    %rsp,%rbp
    e3ea:	48 83 ec 10          	sub    $0x10,%rsp
    e3ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e3f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e3f6:	48 89 c7             	mov    %rax,%rdi
    e3f9:	e8 f8 05 00 00       	call   e9f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>
    e3fe:	90                   	nop
    e3ff:	c9                   	leave
    e400:	c3                   	ret
    e401:	90                   	nop

000000000000e402 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
    e402:	55                   	push   %rbp
    e403:	48 89 e5             	mov    %rsp,%rbp
    e406:	48 83 ec 10          	sub    $0x10,%rsp
    e40a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e40e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e412:	48 89 c7             	mov    %rax,%rdi
    e415:	e8 cc ff ff ff       	call   e3e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>
    e41a:	90                   	nop
    e41b:	c9                   	leave
    e41c:	c3                   	ret
    e41d:	90                   	nop

000000000000e41e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
    e41e:	55                   	push   %rbp
    e41f:	48 89 e5             	mov    %rsp,%rbp
    e422:	48 83 ec 10          	sub    $0x10,%rsp
    e426:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e42a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e42e:	48 89 c7             	mov    %rax,%rdi
    e431:	e8 14 06 00 00       	call   ea4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>
    e436:	90                   	nop
    e437:	c9                   	leave
    e438:	c3                   	ret
    e439:	90                   	nop

000000000000e43a <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
    e43a:	55                   	push   %rbp
    e43b:	48 89 e5             	mov    %rsp,%rbp
    e43e:	48 83 ec 10          	sub    $0x10,%rsp
    e442:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e446:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e44a:	48 89 c7             	mov    %rax,%rdi
    e44d:	e8 1a 0b 00 00       	call   ef6c <_ZNSaIP13VkImageView_TED1Ev>
    e452:	90                   	nop
    e453:	c9                   	leave
    e454:	c3                   	ret
    e455:	90                   	nop

000000000000e456 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
    e456:	55                   	push   %rbp
    e457:	48 89 e5             	mov    %rsp,%rbp
    e45a:	48 83 ec 10          	sub    $0x10,%rsp
    e45e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e466:	48 89 c7             	mov    %rax,%rdi
    e469:	e8 d6 0a 00 00       	call   ef44 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implC1Ev>
    e46e:	90                   	nop
    e46f:	c9                   	leave
    e470:	c3                   	ret
    e471:	90                   	nop

000000000000e472 <_ZNSt6vectorIP13VkImageView_TSaIS1_EEC1Ev>:
      vector() = default;
    e472:	55                   	push   %rbp
    e473:	48 89 e5             	mov    %rsp,%rbp
    e476:	48 83 ec 10          	sub    $0x10,%rsp
    e47a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e47e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e482:	48 89 c7             	mov    %rax,%rdi
    e485:	e8 cc ff ff ff       	call   e456 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EEC1Ev>
    e48a:	90                   	nop
    e48b:	c9                   	leave
    e48c:	c3                   	ret
    e48d:	90                   	nop

000000000000e48e <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
    e48e:	55                   	push   %rbp
    e48f:	48 89 e5             	mov    %rsp,%rbp
    e492:	48 83 ec 10          	sub    $0x10,%rsp
    e496:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e49a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e49e:	48 89 c7             	mov    %rax,%rdi
    e4a1:	e8 74 0b 00 00       	call   f01a <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1Ev>
    e4a6:	90                   	nop
    e4a7:	c9                   	leave
    e4a8:	c3                   	ret
    e4a9:	90                   	nop

000000000000e4aa <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1Ev>:
      vector() = default;
    e4aa:	55                   	push   %rbp
    e4ab:	48 89 e5             	mov    %rsp,%rbp
    e4ae:	48 83 ec 10          	sub    $0x10,%rsp
    e4b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e4b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e4ba:	48 89 c7             	mov    %rax,%rdi
    e4bd:	e8 cc ff ff ff       	call   e48e <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1Ev>
    e4c2:	90                   	nop
    e4c3:	c9                   	leave
    e4c4:	c3                   	ret
    e4c5:	90                   	nop

000000000000e4c6 <_ZNK3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EE7currentEv>:
          << "Time elapsed: "
          << std::chrono::duration_cast<DurationType>(stop - start).count()
          << ' ' << this->time_unit << "\n";
  }

  auto current() const {
    e4c6:	55                   	push   %rbp
    e4c7:	48 89 e5             	mov    %rsp,%rbp
    e4ca:	53                   	push   %rbx
    e4cb:	48 83 ec 38          	sub    $0x38,%rsp
    e4cf:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    return std::chrono::duration_cast<DurationType>(
               std::chrono::steady_clock::now() - start)
    e4d3:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    e4d7:	e8 b4 4f ff ff       	call   3490 <_ZNSt6chrono3_V212steady_clock3nowEv@plt>
    e4dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    e4e0:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    e4e4:	48 89 de             	mov    %rbx,%rsi
    e4e7:	48 89 c7             	mov    %rax,%rdi
    e4ea:	e8 ad 0c 00 00       	call   f19c <_ZNSt6chronomiINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIJT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE>
    e4ef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    return std::chrono::duration_cast<DurationType>(
    e4f3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    e4f7:	48 89 c7             	mov    %rax,%rdi
    e4fa:	e8 e2 0c 00 00       	call   f1e1 <_ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES8_E4typeERKNS1_IT0_T1_EE>
    e4ff:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        .count();
    e503:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    e507:	48 89 c7             	mov    %rax,%rdi
    e50a:	e8 ed 0c 00 00       	call   f1fc <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000EEE5countEv>
  }
    e50f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e513:	c9                   	leave
    e514:	c3                   	ret
    e515:	90                   	nop

000000000000e516 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
    e516:	55                   	push   %rbp
    e517:	48 89 e5             	mov    %rsp,%rbp
    e51a:	53                   	push   %rbx
    e51b:	48 83 ec 38          	sub    $0x38,%rsp
    e51f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    e523:	48 89 f0             	mov    %rsi,%rax
    e526:	48 89 d6             	mov    %rdx,%rsi
    e529:	48 89 f2             	mov    %rsi,%rdx
    e52c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    e530:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    e534:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      : _Base(__a)
    e538:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e53c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    e540:	48 89 d6             	mov    %rdx,%rsi
    e543:	48 89 c7             	mov    %rax,%rdi
    e546:	e8 f9 0e 00 00       	call   f444 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
    e54b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    e54f:	48 89 c7             	mov    %rax,%rdi
    e552:	e8 25 0f 00 00       	call   f47c <_ZNKSt16initializer_listIPKcE3endEv>
    e557:	48 89 c3             	mov    %rax,%rbx
    e55a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    e55e:	48 89 c7             	mov    %rax,%rdi
    e561:	e8 04 0f 00 00       	call   f46a <_ZNKSt16initializer_listIPKcE5beginEv>
    e566:	48 89 c1             	mov    %rax,%rcx
    e569:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e56d:	48 89 da             	mov    %rbx,%rdx
    e570:	48 89 ce             	mov    %rcx,%rsi
    e573:	48 89 c7             	mov    %rax,%rdi
    e576:	e8 67 0f 00 00       	call   f4e2 <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
    e57b:	eb 1a                	jmp    e597 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_+0x81>
    e57d:	48 89 c3             	mov    %rax,%rbx
    e580:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e584:	48 89 c7             	mov    %rax,%rdi
    e587:	e8 3c 88 ff ff       	call   6dc8 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
    e58c:	48 89 d8             	mov    %rbx,%rax
    e58f:	48 89 c7             	mov    %rax,%rdi
    e592:	e8 59 50 ff ff       	call   35f0 <_Unwind_Resume@plt>
    e597:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e59b:	c9                   	leave
    e59c:	c3                   	ret
    e59d:	90                   	nop

000000000000e59e <_ZNSt6vectorIPKcSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    e59e:	55                   	push   %rbp
    e59f:	48 89 e5             	mov    %rsp,%rbp
    e5a2:	48 83 ec 10          	sub    $0x10,%rsp
    e5a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    e5aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e5ae:	48 89 c7             	mov    %rax,%rdi
    e5b1:	e8 ca 96 ff ff       	call   7c80 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
    e5b6:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    e5b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e5bd:	48 8b 48 08          	mov    0x8(%rax),%rcx
    e5c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e5c5:	48 8b 00             	mov    (%rax),%rax
    e5c8:	48 89 ce             	mov    %rcx,%rsi
    e5cb:	48 89 c7             	mov    %rax,%rdi
    e5ce:	e8 be 0f 00 00       	call   f591 <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>
      }
    e5d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e5d7:	48 89 c7             	mov    %rax,%rdi
    e5da:	e8 e9 87 ff ff       	call   6dc8 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
    e5df:	90                   	nop
    e5e0:	c9                   	leave
    e5e1:	c3                   	ret

000000000000e5e2 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    e5e2:	55                   	push   %rbp
    e5e3:	48 89 e5             	mov    %rsp,%rbp
    e5e6:	48 83 ec 20          	sub    $0x20,%rsp
    e5ea:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    e5ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e5f2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    e5f6:	48 89 d6             	mov    %rdx,%rsi
    e5f9:	48 89 c7             	mov    %rax,%rdi
    e5fc:	e8 bb 0f 00 00       	call   f5bc <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    e601:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e605:	c9                   	leave
    e606:	c3                   	ret
    e607:	90                   	nop

000000000000e608 <_ZNSt6vectorIPKcSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    e608:	55                   	push   %rbp
    e609:	48 89 e5             	mov    %rsp,%rbp
    e60c:	48 83 ec 20          	sub    $0x20,%rsp
    e610:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    e614:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e618:	48 8d 50 08          	lea    0x8(%rax),%rdx
    e61c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    e620:	48 89 d6             	mov    %rdx,%rsi
    e623:	48 89 c7             	mov    %rax,%rdi
    e626:	e8 91 0f 00 00       	call   f5bc <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    e62b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e62f:	c9                   	leave
    e630:	c3                   	ret

000000000000e631 <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    e631:	55                   	push   %rbp
    e632:	48 89 e5             	mov    %rsp,%rbp
    e635:	53                   	push   %rbx
    e636:	48 83 ec 18          	sub    $0x18,%rsp
    e63a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e63e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    e642:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e646:	48 89 c7             	mov    %rax,%rdi
    e649:	e8 8c 0f 00 00       	call   f5da <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
    e64e:	48 8b 18             	mov    (%rax),%rbx
    e651:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e655:	48 89 c7             	mov    %rax,%rdi
    e658:	e8 7d 0f 00 00       	call   f5da <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
    e65d:	48 8b 00             	mov    (%rax),%rax
    e660:	48 39 c3             	cmp    %rax,%rbx
    e663:	0f 95 c0             	setne  %al
    e666:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e66a:	c9                   	leave
    e66b:	c3                   	ret

000000000000e66c <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    e66c:	55                   	push   %rbp
    e66d:	48 89 e5             	mov    %rsp,%rbp
    e670:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    e674:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e678:	48 8b 00             	mov    (%rax),%rax
    e67b:	48 8d 50 08          	lea    0x8(%rax),%rdx
    e67f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e683:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    e686:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    e68a:	5d                   	pop    %rbp
    e68b:	c3                   	ret

000000000000e68c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    e68c:	55                   	push   %rbp
    e68d:	48 89 e5             	mov    %rsp,%rbp
    e690:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    e694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e698:	48 8b 00             	mov    (%rax),%rax
    e69b:	5d                   	pop    %rbp
    e69c:	c3                   	ret
    e69d:	90                   	nop

000000000000e69e <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJRS1_EEES5_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
    e69e:	55                   	push   %rbp
    e69f:	48 89 e5             	mov    %rsp,%rbp
    e6a2:	53                   	push   %rbx
    e6a3:	48 83 ec 18          	sub    $0x18,%rsp
    e6a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e6ab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    e6af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6b3:	48 8b 50 08          	mov    0x8(%rax),%rdx
    e6b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6bb:	48 8b 40 10          	mov    0x10(%rax),%rax
    e6bf:	48 39 c2             	cmp    %rax,%rdx
    e6c2:	74 3c                	je     e700 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJRS1_EEES5_DpOT_+0x62>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    e6c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e6c8:	48 89 c7             	mov    %rax,%rdi
    e6cb:	e8 18 0f 00 00       	call   f5e8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
    e6d0:	48 89 c2             	mov    %rax,%rdx
    e6d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6d7:	48 8b 48 08          	mov    0x8(%rax),%rcx
    e6db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6df:	48 89 ce             	mov    %rcx,%rsi
    e6e2:	48 89 c7             	mov    %rax,%rdi
    e6e5:	e8 0c 0f 00 00       	call   f5f6 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
    e6ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6ee:	48 8b 40 08          	mov    0x8(%rax),%rax
    e6f2:	48 8d 50 08          	lea    0x8(%rax),%rdx
    e6f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6fa:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e6fe:	eb 30                	jmp    e730 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJRS1_EEES5_DpOT_+0x92>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    e700:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e704:	48 89 c7             	mov    %rax,%rdi
    e707:	e8 dc 0e 00 00       	call   f5e8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
    e70c:	48 89 c3             	mov    %rax,%rbx
    e70f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e713:	48 89 c7             	mov    %rax,%rdi
    e716:	e8 ed fe ff ff       	call   e608 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
    e71b:	48 89 c1             	mov    %rax,%rcx
    e71e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e722:	48 89 da             	mov    %rbx,%rdx
    e725:	48 89 ce             	mov    %rcx,%rsi
    e728:	48 89 c7             	mov    %rax,%rdi
    e72b:	e8 00 0f 00 00       	call   f630 <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJRS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
    e730:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e734:	48 89 c7             	mov    %rax,%rdi
    e737:	e8 86 10 00 00       	call   f7c2 <_ZNSt6vectorIPKcSaIS1_EE4backEv>
#endif
      }
    e73c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e740:	c9                   	leave
    e741:	c3                   	ret

000000000000e742 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    e742:	55                   	push   %rbp
    e743:	48 89 e5             	mov    %rsp,%rbp
    e746:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    e74a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e74e:	48 8b 50 08          	mov    0x8(%rax),%rdx
    e752:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e756:	48 8b 00             	mov    (%rax),%rax
    e759:	48 29 c2             	sub    %rax,%rdx
    e75c:	48 89 d0             	mov    %rdx,%rax
    e75f:	48 c1 f8 03          	sar    $0x3,%rax
    e763:	5d                   	pop    %rbp
    e764:	c3                   	ret
    e765:	90                   	nop

000000000000e766 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
    e766:	55                   	push   %rbp
    e767:	48 89 e5             	mov    %rsp,%rbp
    e76a:	48 83 ec 10          	sub    $0x10,%rsp
    e76e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    e772:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e776:	48 8b 10             	mov    (%rax),%rdx
    e779:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e77d:	48 89 d6             	mov    %rdx,%rsi
    e780:	48 89 c7             	mov    %rax,%rdi
    e783:	e8 7a 10 00 00       	call   f802 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
    e788:	c9                   	leave
    e789:	c3                   	ret

000000000000e78a <_ZNSt6vectorIPKcSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    e78a:	55                   	push   %rbp
    e78b:	48 89 e5             	mov    %rsp,%rbp
    e78e:	48 83 ec 10          	sub    $0x10,%rsp
    e792:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    e796:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e79a:	48 8b 10             	mov    (%rax),%rdx
    e79d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e7a1:	48 89 d6             	mov    %rdx,%rsi
    e7a4:	48 89 c7             	mov    %rax,%rdi
    e7a7:	e8 56 10 00 00       	call   f802 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
    e7ac:	c9                   	leave
    e7ad:	c3                   	ret

000000000000e7ae <_ZNKSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    e7ae:	55                   	push   %rbp
    e7af:	48 89 e5             	mov    %rsp,%rbp
    e7b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    e7b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e7ba:	48 8b 50 08          	mov    0x8(%rax),%rdx
    e7be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e7c2:	48 8b 00             	mov    (%rax),%rax
    e7c5:	48 29 c2             	sub    %rax,%rdx
    e7c8:	48 c1 fa 02          	sar    $0x2,%rdx
    e7cc:	48 b8 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rax
    e7d3:	db b6 6d 
    e7d6:	48 0f af c2          	imul   %rdx,%rax
    e7da:	5d                   	pop    %rbp
    e7db:	c3                   	ret

000000000000e7dc <_ZNKSt8optionalI23VkQueueFamilyPropertiesE9has_valueEv>:
      constexpr bool has_value() const noexcept
    e7dc:	55                   	push   %rbp
    e7dd:	48 89 e5             	mov    %rsp,%rbp
    e7e0:	48 83 ec 10          	sub    $0x10,%rsp
    e7e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_is_engaged(); }
    e7e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e7ec:	48 89 c7             	mov    %rax,%rdi
    e7ef:	e8 e8 99 ff ff       	call   81dc <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
    e7f4:	c9                   	leave
    e7f5:	c3                   	ret

000000000000e7f6 <_ZNRSt8optionalI23VkQueueFamilyPropertiesE5valueEv>:
      value()&
    e7f6:	55                   	push   %rbp
    e7f7:	48 89 e5             	mov    %rsp,%rbp
    e7fa:	48 83 ec 10          	sub    $0x10,%rsp
    e7fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (this->_M_is_engaged())
    e802:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e806:	48 89 c7             	mov    %rax,%rdi
    e809:	e8 ce 99 ff ff       	call   81dc <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
    e80e:	84 c0                	test   %al,%al
    e810:	74 0e                	je     e820 <_ZNRSt8optionalI23VkQueueFamilyPropertiesE5valueEv+0x2a>
	  return this->_M_get();
    e812:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e816:	48 89 c7             	mov    %rax,%rdi
    e819:	e8 d0 99 ff ff       	call   81ee <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
    e81e:	eb 05                	jmp    e825 <_ZNRSt8optionalI23VkQueueFamilyPropertiesE5valueEv+0x2f>
	__throw_bad_optional_access();
    e820:	e8 70 f9 ff ff       	call   e195 <_ZSt27__throw_bad_optional_accessv>
      }
    e825:	c9                   	leave
    e826:	c3                   	ret
    e827:	90                   	nop

000000000000e828 <_ZNSt4pairIj23VkQueueFamilyPropertiesEC1IjRS0_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
    e828:	55                   	push   %rbp
    e829:	48 89 e5             	mov    %rsp,%rbp
    e82c:	48 83 ec 20          	sub    $0x20,%rsp
    e830:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e834:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e838:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
    e83c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e840:	48 89 c7             	mov    %rax,%rdi
    e843:	e8 cc 0f 00 00       	call   f814 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
    e848:	8b 10                	mov    (%rax),%edx
    e84a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e84e:	89 10                	mov    %edx,(%rax)
    e850:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e854:	48 89 c7             	mov    %rax,%rdi
    e857:	e8 c6 0f 00 00       	call   f822 <_ZSt7forwardIR23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS2_E4typeE>
    e85c:	48 89 c1             	mov    %rax,%rcx
    e85f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    e863:	48 8b 01             	mov    (%rcx),%rax
    e866:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    e86a:	48 89 46 04          	mov    %rax,0x4(%rsi)
    e86e:	48 89 56 0c          	mov    %rdx,0xc(%rsi)
    e872:	48 8b 41 10          	mov    0x10(%rcx),%rax
    e876:	48 89 46 14          	mov    %rax,0x14(%rsi)
    e87a:	90                   	nop
    e87b:	c9                   	leave
    e87c:	c3                   	ret
    e87d:	90                   	nop

000000000000e87e <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEC1IS2_Lb1EEEOT_>:
	optional(_Up&& __t)
    e87e:	55                   	push   %rbp
    e87f:	48 89 e5             	mov    %rsp,%rbp
    e882:	53                   	push   %rbx
    e883:	48 83 ec 18          	sub    $0x18,%rsp
    e887:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e88b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
    e88f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    e893:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e897:	48 89 c7             	mov    %rax,%rdi
    e89a:	e8 91 0f 00 00       	call   f830 <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>
    e89f:	48 89 c6             	mov    %rax,%rsi
    e8a2:	48 89 df             	mov    %rbx,%rdi
    e8a5:	e8 ba 0f 00 00       	call   f864 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEC1IJS2_ELb0EEESt10in_place_tDpOT_>
    e8aa:	90                   	nop
    e8ab:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e8af:	c9                   	leave
    e8b0:	c3                   	ret
    e8b1:	90                   	nop

000000000000e8b2 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    e8b2:	55                   	push   %rbp
    e8b3:	48 89 e5             	mov    %rsp,%rbp
    e8b6:	48 83 ec 20          	sub    $0x20,%rsp
    e8ba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    e8be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e8c2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    e8c6:	48 89 d6             	mov    %rdx,%rsi
    e8c9:	48 89 c7             	mov    %rax,%rdi
    e8cc:	e8 c7 0f 00 00       	call   f898 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    e8d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e8d5:	c9                   	leave
    e8d6:	c3                   	ret
    e8d7:	90                   	nop

000000000000e8d8 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    e8d8:	55                   	push   %rbp
    e8d9:	48 89 e5             	mov    %rsp,%rbp
    e8dc:	48 83 ec 20          	sub    $0x20,%rsp
    e8e0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    e8e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e8e8:	48 8d 50 08          	lea    0x8(%rax),%rdx
    e8ec:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    e8f0:	48 89 d6             	mov    %rdx,%rsi
    e8f3:	48 89 c7             	mov    %rax,%rdi
    e8f6:	e8 9d 0f 00 00       	call   f898 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    e8fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e8ff:	c9                   	leave
    e900:	c3                   	ret

000000000000e901 <_ZN9__gnu_cxxneIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    e901:	55                   	push   %rbp
    e902:	48 89 e5             	mov    %rsp,%rbp
    e905:	53                   	push   %rbx
    e906:	48 83 ec 18          	sub    $0x18,%rsp
    e90a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e90e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    e912:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e916:	48 89 c7             	mov    %rax,%rdi
    e919:	e8 98 0f 00 00       	call   f8b6 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
    e91e:	48 8b 18             	mov    (%rax),%rbx
    e921:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e925:	48 89 c7             	mov    %rax,%rdi
    e928:	e8 89 0f 00 00       	call   f8b6 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
    e92d:	48 8b 00             	mov    (%rax),%rax
    e930:	48 39 c3             	cmp    %rax,%rbx
    e933:	0f 95 c0             	setne  %al
    e936:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e93a:	c9                   	leave
    e93b:	c3                   	ret

000000000000e93c <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    e93c:	55                   	push   %rbp
    e93d:	48 89 e5             	mov    %rsp,%rbp
    e940:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    e944:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e948:	48 8b 00             	mov    (%rax),%rax
    e94b:	48 8d 50 08          	lea    0x8(%rax),%rdx
    e94f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e953:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    e956:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    e95a:	5d                   	pop    %rbp
    e95b:	c3                   	ret

000000000000e95c <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    e95c:	55                   	push   %rbp
    e95d:	48 89 e5             	mov    %rsp,%rbp
    e960:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    e964:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e968:	48 8b 00             	mov    (%rax),%rax
    e96b:	5d                   	pop    %rbp
    e96c:	c3                   	ret
    e96d:	90                   	nop

000000000000e96e <_ZNKSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE9has_valueEv>:
      constexpr bool has_value() const noexcept
    e96e:	55                   	push   %rbp
    e96f:	48 89 e5             	mov    %rsp,%rbp
    e972:	48 83 ec 10          	sub    $0x10,%rsp
    e976:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_is_engaged(); }
    e97a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e97e:	48 89 c7             	mov    %rax,%rdi
    e981:	e8 32 fa ff ff       	call   e3b8 <_ZNKSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE13_M_is_engagedEv>
    e986:	c9                   	leave
    e987:	c3                   	ret

000000000000e988 <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EEaSERKS3_>:
      operator=(const _Optional_payload& __other)
    e988:	55                   	push   %rbp
    e989:	48 89 e5             	mov    %rsp,%rbp
    e98c:	48 83 ec 10          	sub    $0x10,%rsp
    e990:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e994:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_copy_assign(__other);
    e998:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e99c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e9a0:	48 89 d6             	mov    %rdx,%rsi
    e9a3:	48 89 c7             	mov    %rax,%rdi
    e9a6:	e8 19 0f 00 00       	call   f8c4 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_>
	return *this;
    e9ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    e9af:	c9                   	leave
    e9b0:	c3                   	ret
    e9b1:	90                   	nop

000000000000e9b2 <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
    e9b2:	55                   	push   %rbp
    e9b3:	48 89 e5             	mov    %rsp,%rbp
    e9b6:	48 83 ec 10          	sub    $0x10,%rsp
    e9ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(this->_M_is_engaged());
    e9be:	e8 bb 4f ff ff       	call   397e <_ZSt23__is_constant_evaluatedv>
    e9c3:	84 c0                	test   %al,%al
    e9c5:	74 1a                	je     e9e1 <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv+0x2f>
    e9c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e9cb:	48 89 c7             	mov    %rax,%rdi
    e9ce:	e8 e5 f9 ff ff       	call   e3b8 <_ZNKSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE13_M_is_engagedEv>
    e9d3:	83 f0 01             	xor    $0x1,%eax
    e9d6:	84 c0                	test   %al,%al
    e9d8:	74 07                	je     e9e1 <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv+0x2f>
    e9da:	b8 01 00 00 00       	mov    $0x1,%eax
    e9df:	eb 05                	jmp    e9e6 <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv+0x34>
    e9e1:	b8 00 00 00 00       	mov    $0x0,%eax
    e9e6:	84 c0                	test   %al,%al
	return static_cast<_Dp*>(this)->_M_payload._M_get();
    e9e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e9ec:	48 89 c7             	mov    %rax,%rdi
    e9ef:	e8 62 0f 00 00       	call   f956 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>
      }
    e9f4:	c9                   	leave
    e9f5:	c3                   	ret

000000000000e9f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>:
	  _Rb_tree_impl()
    e9f6:	55                   	push   %rbp
    e9f7:	48 89 e5             	mov    %rsp,%rbp
    e9fa:	48 83 ec 10          	sub    $0x10,%rsp
    e9fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  : _Node_allocator()
    ea02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ea06:	48 89 c7             	mov    %rax,%rdi
    ea09:	e8 56 0f 00 00       	call   f964 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
    ea0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ea12:	48 89 c7             	mov    %rax,%rdi
    ea15:	e8 66 0f 00 00       	call   f980 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
    ea1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ea1e:	48 83 c0 08          	add    $0x8,%rax
    ea22:	48 89 c7             	mov    %rax,%rdi
    ea25:	e8 22 f8 ff ff       	call   e24c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
    ea2a:	90                   	nop
    ea2b:	c9                   	leave
    ea2c:	c3                   	ret
    ea2d:	90                   	nop

000000000000ea2e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    ea2e:	55                   	push   %rbp
    ea2f:	48 89 e5             	mov    %rsp,%rbp
    ea32:	48 83 ec 10          	sub    $0x10,%rsp
    ea36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ea3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ea3e:	48 89 c7             	mov    %rax,%rdi
    ea41:	e8 46 0f 00 00       	call   f98c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>
    ea46:	90                   	nop
    ea47:	c9                   	leave
    ea48:	c3                   	ret
    ea49:	90                   	nop

000000000000ea4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
    ea4a:	55                   	push   %rbp
    ea4b:	48 89 e5             	mov    %rsp,%rbp
    ea4e:	48 83 ec 10          	sub    $0x10,%rsp
    ea52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_erase(_M_begin()); }
    ea56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ea5a:	48 89 c7             	mov    %rax,%rdi
    ea5d:	e8 9c 0f 00 00       	call   f9fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
    ea62:	48 89 c2             	mov    %rax,%rdx
    ea65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ea69:	48 89 d6             	mov    %rdx,%rsi
    ea6c:	48 89 c7             	mov    %rax,%rdi
    ea6f:	e8 24 0f 00 00       	call   f998 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
    ea74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ea78:	48 89 c7             	mov    %rax,%rdi
    ea7b:	e8 4a f9 ff ff       	call   e3ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
    ea80:	90                   	nop
    ea81:	c9                   	leave
    ea82:	c3                   	ret
    ea83:	90                   	nop

000000000000ea84 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    ea84:	55                   	push   %rbp
    ea85:	48 89 e5             	mov    %rsp,%rbp
    ea88:	48 83 ec 20          	sub    $0x20,%rsp
    ea8c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    ea90:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ea94:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    ea98:	48 89 d6             	mov    %rdx,%rsi
    ea9b:	48 89 c7             	mov    %rax,%rdi
    ea9e:	e8 75 0f 00 00       	call   fa18 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    eaa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eaa7:	c9                   	leave
    eaa8:	c3                   	ret
    eaa9:	90                   	nop

000000000000eaaa <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    eaaa:	55                   	push   %rbp
    eaab:	48 89 e5             	mov    %rsp,%rbp
    eaae:	48 83 ec 20          	sub    $0x20,%rsp
    eab2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    eab6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    eaba:	48 8d 50 08          	lea    0x8(%rax),%rdx
    eabe:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    eac2:	48 89 d6             	mov    %rdx,%rsi
    eac5:	48 89 c7             	mov    %rax,%rdi
    eac8:	e8 4b 0f 00 00       	call   fa18 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    eacd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ead1:	c9                   	leave
    ead2:	c3                   	ret

000000000000ead3 <_ZN9__gnu_cxxneIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    ead3:	55                   	push   %rbp
    ead4:	48 89 e5             	mov    %rsp,%rbp
    ead7:	53                   	push   %rbx
    ead8:	48 83 ec 18          	sub    $0x18,%rsp
    eadc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    eae0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    eae4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    eae8:	48 89 c7             	mov    %rax,%rdi
    eaeb:	e8 46 0f 00 00       	call   fa36 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    eaf0:	48 8b 18             	mov    (%rax),%rbx
    eaf3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    eaf7:	48 89 c7             	mov    %rax,%rdi
    eafa:	e8 37 0f 00 00       	call   fa36 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    eaff:	48 8b 00             	mov    (%rax),%rax
    eb02:	48 39 c3             	cmp    %rax,%rbx
    eb05:	0f 95 c0             	setne  %al
    eb08:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    eb0c:	c9                   	leave
    eb0d:	c3                   	ret

000000000000eb0e <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    eb0e:	55                   	push   %rbp
    eb0f:	48 89 e5             	mov    %rsp,%rbp
    eb12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    eb16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eb1a:	48 8b 00             	mov    (%rax),%rax
    eb1d:	48 8d 90 04 01 00 00 	lea    0x104(%rax),%rdx
    eb24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eb28:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    eb2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    eb2f:	5d                   	pop    %rbp
    eb30:	c3                   	ret
    eb31:	90                   	nop

000000000000eb32 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    eb32:	55                   	push   %rbp
    eb33:	48 89 e5             	mov    %rsp,%rbp
    eb36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    eb3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eb3e:	48 8b 00             	mov    (%rax),%rax
    eb41:	5d                   	pop    %rbp
    eb42:	c3                   	ret
    eb43:	90                   	nop

000000000000eb44 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
    eb44:	55                   	push   %rbp
    eb45:	48 89 e5             	mov    %rsp,%rbp
    eb48:	53                   	push   %rbx
    eb49:	48 83 ec 48          	sub    $0x48,%rsp
    eb4d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    eb51:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
    eb55:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    eb59:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    eb5d:	48 89 d6             	mov    %rdx,%rsi
    eb60:	48 89 c7             	mov    %rax,%rdi
    eb63:	e8 dc 0e 00 00       	call   fa44 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>
    eb68:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
    eb6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    eb70:	48 89 c7             	mov    %rax,%rdi
    eb73:	e8 f2 0e 00 00       	call   fa6a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>
    eb78:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    eb7c:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    eb80:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    eb84:	48 89 d6             	mov    %rdx,%rsi
    eb87:	48 89 c7             	mov    %rax,%rdi
    eb8a:	e8 f5 0e 00 00       	call   fa84 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
    eb8f:	84 c0                	test   %al,%al
    eb91:	75 32                	jne    ebc5 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x81>
    eb93:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    eb97:	48 89 c7             	mov    %rax,%rdi
    eb9a:	e8 07 0f 00 00       	call   faa6 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>
    eb9f:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    eba3:	48 89 c7             	mov    %rax,%rdi
    eba6:	e8 17 0f 00 00       	call   fac2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
    ebab:	48 89 c2             	mov    %rax,%rdx
    ebae:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    ebb2:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    ebb6:	48 89 ce             	mov    %rcx,%rsi
    ebb9:	48 89 c7             	mov    %rax,%rdi
    ebbc:	e8 1f 0f 00 00       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
    ebc1:	84 c0                	test   %al,%al
    ebc3:	74 07                	je     ebcc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x88>
    ebc5:	b8 01 00 00 00       	mov    $0x1,%eax
    ebca:	eb 05                	jmp    ebd1 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x8d>
    ebcc:	b8 00 00 00 00       	mov    $0x0,%eax
    ebd1:	84 c0                	test   %al,%al
    ebd3:	74 5d                	je     ec32 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0xee>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
    ebd5:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
					std::forward_as_tuple(std::move(__k)),
    ebd9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    ebdd:	48 89 c7             	mov    %rax,%rdi
    ebe0:	e8 50 08 00 00       	call   f435 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
    ebe5:	48 89 c2             	mov    %rax,%rdx
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
    ebe8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    ebec:	48 89 d6             	mov    %rdx,%rsi
    ebef:	48 89 c7             	mov    %rax,%rdi
    ebf2:	e8 12 0f 00 00       	call   fb09 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>
    ebf7:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    ebfb:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    ebff:	48 89 d6             	mov    %rdx,%rsi
    ec02:	48 89 c7             	mov    %rax,%rdi
    ec05:	e8 34 0f 00 00       	call   fb3e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>
    ec0a:	48 8d 4d df          	lea    -0x21(%rbp),%rcx
    ec0e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    ec12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ec16:	49 89 c8             	mov    %rcx,%r8
    ec19:	48 89 d1             	mov    %rdx,%rcx
    ec1c:	48 8d 15 6d 7b 00 00 	lea    0x7b6d(%rip),%rdx        # 16790 <_ZSt19piecewise_construct>
    ec23:	48 89 c6             	mov    %rax,%rsi
    ec26:	48 89 df             	mov    %rbx,%rdi
    ec29:	e8 2e 0f 00 00       	call   fb5c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
    ec2e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
					std::tuple<>());
	return (*__i).second;
    ec32:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    ec36:	48 89 c7             	mov    %rax,%rdi
    ec39:	e8 84 0e 00 00       	call   fac2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
    ec3e:	48 83 c0 20          	add    $0x20,%rax
      }
    ec42:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ec46:	c9                   	leave
    ec47:	c3                   	ret

000000000000ec48 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
    ec48:	55                   	push   %rbp
    ec49:	48 89 e5             	mov    %rsp,%rbp
    ec4c:	48 83 ec 20          	sub    $0x20,%rsp
    ec50:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return begin() == end(); }
    ec54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ec58:	48 89 c7             	mov    %rax,%rdi
    ec5b:	e8 1e 10 00 00       	call   fc7e <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE3endEv>
    ec60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ec64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ec68:	48 89 c7             	mov    %rax,%rdi
    ec6b:	e8 e8 0f 00 00       	call   fc58 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5beginEv>
    ec70:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ec74:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    ec78:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    ec7c:	48 89 d6             	mov    %rdx,%rsi
    ec7f:	48 89 c7             	mov    %rax,%rdi
    ec82:	e8 20 10 00 00       	call   fca7 <_ZN9__gnu_cxxeqIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    ec87:	c9                   	leave
    ec88:	c3                   	ret
    ec89:	90                   	nop

000000000000ec8a <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    ec8a:	55                   	push   %rbp
    ec8b:	48 89 e5             	mov    %rsp,%rbp
    ec8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ec92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
    ec96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ec9a:	48 8b 00             	mov    (%rax),%rax
    ec9d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    eca1:	48 c1 e2 03          	shl    $0x3,%rdx
    eca5:	48 01 d0             	add    %rdx,%rax
      }
    eca8:	5d                   	pop    %rbp
    eca9:	c3                   	ret

000000000000ecaa <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    ecaa:	55                   	push   %rbp
    ecab:	48 89 e5             	mov    %rsp,%rbp
    ecae:	48 83 ec 20          	sub    $0x20,%rsp
    ecb2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    ecb6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ecba:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    ecbe:	48 89 d6             	mov    %rdx,%rsi
    ecc1:	48 89 c7             	mov    %rax,%rdi
    ecc4:	e8 19 10 00 00       	call   fce2 <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    ecc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eccd:	c9                   	leave
    ecce:	c3                   	ret
    eccf:	90                   	nop

000000000000ecd0 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    ecd0:	55                   	push   %rbp
    ecd1:	48 89 e5             	mov    %rsp,%rbp
    ecd4:	48 83 ec 20          	sub    $0x20,%rsp
    ecd8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    ecdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ece0:	48 8d 50 08          	lea    0x8(%rax),%rdx
    ece4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    ece8:	48 89 d6             	mov    %rdx,%rsi
    eceb:	48 89 c7             	mov    %rax,%rdi
    ecee:	e8 ef 0f 00 00       	call   fce2 <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    ecf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ecf7:	c9                   	leave
    ecf8:	c3                   	ret

000000000000ecf9 <_ZN9__gnu_cxxneIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    ecf9:	55                   	push   %rbp
    ecfa:	48 89 e5             	mov    %rsp,%rbp
    ecfd:	53                   	push   %rbx
    ecfe:	48 83 ec 18          	sub    $0x18,%rsp
    ed02:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ed06:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    ed0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed0e:	48 89 c7             	mov    %rax,%rdi
    ed11:	e8 ea 0f 00 00       	call   fd00 <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>
    ed16:	48 8b 18             	mov    (%rax),%rbx
    ed19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ed1d:	48 89 c7             	mov    %rax,%rdi
    ed20:	e8 db 0f 00 00       	call   fd00 <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>
    ed25:	48 8b 00             	mov    (%rax),%rax
    ed28:	48 39 c3             	cmp    %rax,%rbx
    ed2b:	0f 95 c0             	setne  %al
    ed2e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ed32:	c9                   	leave
    ed33:	c3                   	ret

000000000000ed34 <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    ed34:	55                   	push   %rbp
    ed35:	48 89 e5             	mov    %rsp,%rbp
    ed38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    ed3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed40:	48 8b 00             	mov    (%rax),%rax
    ed43:	48 8d 50 08          	lea    0x8(%rax),%rdx
    ed47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed4b:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    ed4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    ed52:	5d                   	pop    %rbp
    ed53:	c3                   	ret

000000000000ed54 <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    ed54:	55                   	push   %rbp
    ed55:	48 89 e5             	mov    %rsp,%rbp
    ed58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    ed5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed60:	48 8b 00             	mov    (%rax),%rax
    ed63:	5d                   	pop    %rbp
    ed64:	c3                   	ret
    ed65:	90                   	nop

000000000000ed66 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    ed66:	55                   	push   %rbp
    ed67:	48 89 e5             	mov    %rsp,%rbp
    ed6a:	48 83 ec 20          	sub    $0x20,%rsp
    ed6e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    ed72:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ed76:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    ed7a:	48 89 d6             	mov    %rdx,%rsi
    ed7d:	48 89 c7             	mov    %rax,%rdi
    ed80:	e8 89 0f 00 00       	call   fd0e <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    ed85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed89:	c9                   	leave
    ed8a:	c3                   	ret
    ed8b:	90                   	nop

000000000000ed8c <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    ed8c:	55                   	push   %rbp
    ed8d:	48 89 e5             	mov    %rsp,%rbp
    ed90:	48 83 ec 20          	sub    $0x20,%rsp
    ed94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    ed98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed9c:	48 8d 50 08          	lea    0x8(%rax),%rdx
    eda0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    eda4:	48 89 d6             	mov    %rdx,%rsi
    eda7:	48 89 c7             	mov    %rax,%rdi
    edaa:	e8 5f 0f 00 00       	call   fd0e <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    edaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    edb3:	c9                   	leave
    edb4:	c3                   	ret

000000000000edb5 <_ZN9__gnu_cxxneIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    edb5:	55                   	push   %rbp
    edb6:	48 89 e5             	mov    %rsp,%rbp
    edb9:	53                   	push   %rbx
    edba:	48 83 ec 18          	sub    $0x18,%rsp
    edbe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    edc2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    edc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    edca:	48 89 c7             	mov    %rax,%rdi
    edcd:	e8 5a 0f 00 00       	call   fd2c <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEE4baseEv>
    edd2:	48 8b 18             	mov    (%rax),%rbx
    edd5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    edd9:	48 89 c7             	mov    %rax,%rdi
    eddc:	e8 4b 0f 00 00       	call   fd2c <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEE4baseEv>
    ede1:	48 8b 00             	mov    (%rax),%rax
    ede4:	48 39 c3             	cmp    %rax,%rbx
    ede7:	0f 95 c0             	setne  %al
    edea:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    edee:	c9                   	leave
    edef:	c3                   	ret

000000000000edf0 <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    edf0:	55                   	push   %rbp
    edf1:	48 89 e5             	mov    %rsp,%rbp
    edf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    edf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    edfc:	48 8b 00             	mov    (%rax),%rax
    edff:	48 8d 50 04          	lea    0x4(%rax),%rdx
    ee03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee07:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    ee0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    ee0e:	5d                   	pop    %rbp
    ee0f:	c3                   	ret

000000000000ee10 <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    ee10:	55                   	push   %rbp
    ee11:	48 89 e5             	mov    %rsp,%rbp
    ee14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    ee18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee1c:	48 8b 00             	mov    (%rax),%rax
    ee1f:	5d                   	pop    %rbp
    ee20:	c3                   	ret
    ee21:	90                   	nop

000000000000ee22 <_ZNSt6vectorIP9VkImage_TSaIS1_EEaSEOS3_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
    ee22:	55                   	push   %rbp
    ee23:	48 89 e5             	mov    %rsp,%rbp
    ee26:	48 83 ec 20          	sub    $0x20,%rsp
    ee2a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ee2e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	constexpr bool __move_storage =
    ee32:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
    ee36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ee3a:	48 89 c7             	mov    %rax,%rdi
    ee3d:	e8 f8 0e 00 00       	call   fd3a <_ZSt4moveIRSt6vectorIP9VkImage_TSaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
    ee42:	48 89 c2             	mov    %rax,%rdx
    ee45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ee49:	48 89 d6             	mov    %rdx,%rsi
    ee4c:	48 89 c7             	mov    %rax,%rdi
    ee4f:	e8 f4 0e 00 00       	call   fd48 <_ZNSt6vectorIP9VkImage_TSaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>
	return *this;
    ee54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
    ee58:	c9                   	leave
    ee59:	c3                   	ret

000000000000ee5a <_ZNKSt6vectorIP9VkImage_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    ee5a:	55                   	push   %rbp
    ee5b:	48 89 e5             	mov    %rsp,%rbp
    ee5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    ee62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee66:	48 8b 50 08          	mov    0x8(%rax),%rdx
    ee6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee6e:	48 8b 00             	mov    (%rax),%rax
    ee71:	48 29 c2             	sub    %rax,%rdx
    ee74:	48 89 d0             	mov    %rdx,%rax
    ee77:	48 c1 f8 03          	sar    $0x3,%rax
    ee7b:	5d                   	pop    %rbp
    ee7c:	c3                   	ret
    ee7d:	90                   	nop

000000000000ee7e <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
    ee7e:	55                   	push   %rbp
    ee7f:	48 89 e5             	mov    %rsp,%rbp
    ee82:	48 83 ec 10          	sub    $0x10,%rsp
    ee86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ee8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
    ee8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee92:	48 89 c7             	mov    %rax,%rdi
    ee95:	e8 50 0f 00 00       	call   fdea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
    ee9a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    ee9e:	0f 92 c0             	setb   %al
    eea1:	84 c0                	test   %al,%al
    eea3:	74 24                	je     eec9 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
    eea5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eea9:	48 89 c7             	mov    %rax,%rdi
    eeac:	e8 39 0f 00 00       	call   fdea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
    eeb1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    eeb5:	48 29 c2             	sub    %rax,%rdx
    eeb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eebc:	48 89 d6             	mov    %rdx,%rsi
    eebf:	48 89 c7             	mov    %rax,%rdi
    eec2:	e8 47 0f 00 00       	call   fe0e <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm>
      }
    eec7:	eb 38                	jmp    ef01 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
    eec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eecd:	48 89 c7             	mov    %rax,%rdi
    eed0:	e8 15 0f 00 00       	call   fdea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
    eed5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    eed9:	0f 92 c0             	setb   %al
    eedc:	84 c0                	test   %al,%al
    eede:	74 21                	je     ef01 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
    eee0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eee4:	48 8b 00             	mov    (%rax),%rax
    eee7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    eeeb:	48 c1 e2 03          	shl    $0x3,%rdx
    eeef:	48 01 c2             	add    %rax,%rdx
    eef2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eef6:	48 89 d6             	mov    %rdx,%rsi
    eef9:	48 89 c7             	mov    %rax,%rdi
    eefc:	e8 17 11 00 00       	call   10018 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
    ef01:	90                   	nop
    ef02:	c9                   	leave
    ef03:	c3                   	ret

000000000000ef04 <_ZNSt6vectorIP9VkImage_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    ef04:	55                   	push   %rbp
    ef05:	48 89 e5             	mov    %rsp,%rbp
    ef08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
    ef10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef14:	48 8b 00             	mov    (%rax),%rax
    ef17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ef1b:	48 c1 e2 03          	shl    $0x3,%rdx
    ef1f:	48 01 d0             	add    %rdx,%rax
      }
    ef22:	5d                   	pop    %rbp
    ef23:	c3                   	ret

000000000000ef24 <_ZNSt6vectorIP13VkImageView_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    ef24:	55                   	push   %rbp
    ef25:	48 89 e5             	mov    %rsp,%rbp
    ef28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
    ef30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef34:	48 8b 00             	mov    (%rax),%rax
    ef37:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ef3b:	48 c1 e2 03          	shl    $0x3,%rdx
    ef3f:	48 01 d0             	add    %rdx,%rax
      }
    ef42:	5d                   	pop    %rbp
    ef43:	c3                   	ret

000000000000ef44 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
    ef44:	55                   	push   %rbp
    ef45:	48 89 e5             	mov    %rsp,%rbp
    ef48:	48 83 ec 10          	sub    $0x10,%rsp
    ef4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
    ef50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef54:	48 89 c7             	mov    %rax,%rdi
    ef57:	e8 1c 11 00 00       	call   10078 <_ZNSaIP13VkImageView_TEC1Ev>
    ef5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef60:	48 89 c7             	mov    %rax,%rdi
    ef63:	e8 2c 11 00 00       	call   10094 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    ef68:	90                   	nop
    ef69:	c9                   	leave
    ef6a:	c3                   	ret
    ef6b:	90                   	nop

000000000000ef6c <_ZNSaIP13VkImageView_TED1Ev>:
    ef6c:	55                   	push   %rbp
    ef6d:	48 89 e5             	mov    %rsp,%rbp
    ef70:	48 83 ec 10          	sub    $0x10,%rsp
    ef74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef7c:	48 89 c7             	mov    %rax,%rdi
    ef7f:	e8 3e 11 00 00       	call   100c2 <_ZNSt15__new_allocatorIP13VkImageView_TED1Ev>
    ef84:	90                   	nop
    ef85:	c9                   	leave
    ef86:	c3                   	ret
    ef87:	90                   	nop

000000000000ef88 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    ef88:	55                   	push   %rbp
    ef89:	48 89 e5             	mov    %rsp,%rbp
    ef8c:	48 83 ec 10          	sub    $0x10,%rsp
    ef90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    ef94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef98:	48 8b 50 10          	mov    0x10(%rax),%rdx
    ef9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    efa0:	48 8b 00             	mov    (%rax),%rax
    efa3:	48 29 c2             	sub    %rax,%rdx
    efa6:	48 89 d0             	mov    %rdx,%rax
    efa9:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    efad:	48 89 c2             	mov    %rax,%rdx
    efb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    efb4:	48 8b 08             	mov    (%rax),%rcx
    efb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    efbb:	48 89 ce             	mov    %rcx,%rsi
    efbe:	48 89 c7             	mov    %rax,%rdi
    efc1:	e8 08 11 00 00       	call   100ce <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m>
      }
    efc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    efca:	48 89 c7             	mov    %rax,%rdi
    efcd:	e8 68 f4 ff ff       	call   e43a <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implD1Ev>
    efd2:	90                   	nop
    efd3:	c9                   	leave
    efd4:	c3                   	ret
    efd5:	90                   	nop

000000000000efd6 <_ZNSt6vectorIP13VkImageView_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    efd6:	55                   	push   %rbp
    efd7:	48 89 e5             	mov    %rsp,%rbp
    efda:	48 83 ec 10          	sub    $0x10,%rsp
    efde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    efe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    efe6:	48 89 c7             	mov    %rax,%rdi
    efe9:	e8 16 11 00 00       	call   10104 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
    efee:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    eff1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eff5:	48 8b 48 08          	mov    0x8(%rax),%rcx
    eff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    effd:	48 8b 00             	mov    (%rax),%rax
    f000:	48 89 ce             	mov    %rcx,%rsi
    f003:	48 89 c7             	mov    %rax,%rdi
    f006:	e8 07 11 00 00       	call   10112 <_ZSt8_DestroyIPP13VkImageView_TS1_EvT_S3_RSaIT0_E>
      }
    f00b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f00f:	48 89 c7             	mov    %rax,%rdi
    f012:	e8 71 ff ff ff       	call   ef88 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EED1Ev>
    f017:	90                   	nop
    f018:	c9                   	leave
    f019:	c3                   	ret

000000000000f01a <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
    f01a:	55                   	push   %rbp
    f01b:	48 89 e5             	mov    %rsp,%rbp
    f01e:	48 83 ec 10          	sub    $0x10,%rsp
    f022:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
    f026:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f02a:	48 89 c7             	mov    %rax,%rdi
    f02d:	e8 5c 86 ff ff       	call   768e <_ZNSaIP9VkImage_TEC1Ev>
    f032:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f036:	48 89 c7             	mov    %rax,%rdi
    f039:	e8 ec ab ff ff       	call   9c2a <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    f03e:	90                   	nop
    f03f:	c9                   	leave
    f040:	c3                   	ret
    f041:	90                   	nop

000000000000f042 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    f042:	55                   	push   %rbp
    f043:	48 89 e5             	mov    %rsp,%rbp
    f046:	48 83 ec 20          	sub    $0x20,%rsp
    f04a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    f04e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f052:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    f056:	48 89 d6             	mov    %rdx,%rsi
    f059:	48 89 c7             	mov    %rax,%rdi
    f05c:	e8 db 10 00 00       	call   1013c <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    f061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f065:	c9                   	leave
    f066:	c3                   	ret
    f067:	90                   	nop

000000000000f068 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    f068:	55                   	push   %rbp
    f069:	48 89 e5             	mov    %rsp,%rbp
    f06c:	48 83 ec 20          	sub    $0x20,%rsp
    f070:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    f074:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f078:	48 8d 50 08          	lea    0x8(%rax),%rdx
    f07c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    f080:	48 89 d6             	mov    %rdx,%rsi
    f083:	48 89 c7             	mov    %rax,%rdi
    f086:	e8 b1 10 00 00       	call   1013c <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    f08b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f08f:	c9                   	leave
    f090:	c3                   	ret

000000000000f091 <_ZN9__gnu_cxxneIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    f091:	55                   	push   %rbp
    f092:	48 89 e5             	mov    %rsp,%rbp
    f095:	53                   	push   %rbx
    f096:	48 83 ec 18          	sub    $0x18,%rsp
    f09a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f09e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    f0a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f0a6:	48 89 c7             	mov    %rax,%rdi
    f0a9:	e8 ac 10 00 00       	call   1015a <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEE4baseEv>
    f0ae:	48 8b 18             	mov    (%rax),%rbx
    f0b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f0b5:	48 89 c7             	mov    %rax,%rdi
    f0b8:	e8 9d 10 00 00       	call   1015a <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEE4baseEv>
    f0bd:	48 8b 00             	mov    (%rax),%rax
    f0c0:	48 39 c3             	cmp    %rax,%rbx
    f0c3:	0f 95 c0             	setne  %al
    f0c6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f0ca:	c9                   	leave
    f0cb:	c3                   	ret

000000000000f0cc <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    f0cc:	55                   	push   %rbp
    f0cd:	48 89 e5             	mov    %rsp,%rbp
    f0d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    f0d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0d8:	48 8b 00             	mov    (%rax),%rax
    f0db:	48 8d 50 08          	lea    0x8(%rax),%rdx
    f0df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0e3:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    f0e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    f0ea:	5d                   	pop    %rbp
    f0eb:	c3                   	ret

000000000000f0ec <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    f0ec:	55                   	push   %rbp
    f0ed:	48 89 e5             	mov    %rsp,%rbp
    f0f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    f0f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0f8:	48 8b 00             	mov    (%rax),%rax
    f0fb:	5d                   	pop    %rbp
    f0fc:	c3                   	ret
    f0fd:	90                   	nop

000000000000f0fe <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EEC1Ev>:
  Timer() {
    f0fe:	55                   	push   %rbp
    f0ff:	48 89 e5             	mov    %rsp,%rbp
    f102:	53                   	push   %rbx
    f103:	48 83 ec 18          	sub    $0x18,%rsp
    f107:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f10b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f10f:	48 89 c7             	mov    %rax,%rdi
    f112:	e8 51 10 00 00       	call   10168 <_ZNSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEEC1Ev>
    f117:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f11b:	48 83 c0 08          	add    $0x8,%rax
    f11f:	48 89 c7             	mov    %rax,%rdi
    f122:	e8 c9 43 ff ff       	call   34f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@plt>
      this->time_unit = "μs";
    f127:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f12b:	48 83 c0 08          	add    $0x8,%rax
    f12f:	48 8d 15 74 75 00 00 	lea    0x7574(%rip),%rdx        # 166aa <_ZN6__pstl9execution2v1L5unseqE+0x323>
    f136:	48 89 d6             	mov    %rdx,%rsi
    f139:	48 89 c7             	mov    %rax,%rdi
    f13c:	e8 7f 43 ff ff       	call   34c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>
    this->start = std::chrono::steady_clock::now();
    f141:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    f145:	e8 46 43 ff ff       	call   3490 <_ZNSt6chrono3_V212steady_clock3nowEv@plt>
    f14a:	48 89 03             	mov    %rax,(%rbx)
  }
    f14d:	eb 1e                	jmp    f16d <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EEC1Ev+0x6f>
    f14f:	48 89 c3             	mov    %rax,%rbx
    f152:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f156:	48 83 c0 08          	add    $0x8,%rax
    f15a:	48 89 c7             	mov    %rax,%rdi
    f15d:	e8 4e 40 ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    f162:	48 89 d8             	mov    %rbx,%rax
    f165:	48 89 c7             	mov    %rax,%rdi
    f168:	e8 83 44 ff ff       	call   35f0 <_Unwind_Resume@plt>
    f16d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f171:	c9                   	leave
    f172:	c3                   	ret
    f173:	90                   	nop

000000000000f174 <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EED1Ev>:
  ~Timer() {
    f174:	55                   	push   %rbp
    f175:	48 89 e5             	mov    %rsp,%rbp
    f178:	48 83 ec 20          	sub    $0x20,%rsp
    f17c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    auto stop = std::chrono::steady_clock::now();
    f180:	e8 0b 43 ff ff       	call   3490 <_ZNSt6chrono3_V212steady_clock3nowEv@plt>
    f185:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
    f189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f18d:	48 83 c0 08          	add    $0x8,%rax
    f191:	48 89 c7             	mov    %rax,%rdi
    f194:	e8 17 40 ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    f199:	90                   	nop
    f19a:	c9                   	leave
    f19b:	c3                   	ret

000000000000f19c <_ZNSt6chronomiINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIJT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE>:
      }

    /// The difference between two time points (as a duration)
    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr typename common_type<_Dur1, _Dur2>::type
      operator-(const time_point<_Clock, _Dur1>& __lhs,
    f19c:	55                   	push   %rbp
    f19d:	48 89 e5             	mov    %rsp,%rbp
    f1a0:	48 83 ec 20          	sub    $0x20,%rsp
    f1a4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f1a8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }
    f1ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f1b0:	48 89 c7             	mov    %rax,%rdi
    f1b3:	e8 d0 0f 00 00       	call   10188 <_ZNKSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv>
    f1b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f1bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f1c0:	48 89 c7             	mov    %rax,%rdi
    f1c3:	e8 c0 0f 00 00       	call   10188 <_ZNKSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv>
    f1c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f1cc:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    f1d0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    f1d4:	48 89 d6             	mov    %rdx,%rsi
    f1d7:	48 89 c7             	mov    %rax,%rdi
    f1da:	e8 ba 0f 00 00       	call   10199 <_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_>
    f1df:	c9                   	leave
    f1e0:	c3                   	ret

000000000000f1e1 <_ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES8_E4typeERKNS1_IT0_T1_EE>:
      duration_cast(const duration<_Rep, _Period>& __d)
    f1e1:	55                   	push   %rbp
    f1e2:	48 89 e5             	mov    %rsp,%rbp
    f1e5:	48 83 ec 10          	sub    $0x10,%rsp
    f1e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __dc::__cast(__d);
    f1ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1f1:	48 89 c7             	mov    %rax,%rdi
    f1f4:	e8 09 10 00 00       	call   10202 <_ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000EEEES2_ILl1ELl1000EElLb1ELb0EE6__castIlS2_ILl1ELl1000000000EEEES4_RKNS1_IT_T0_EE>
      }
    f1f9:	c9                   	leave
    f1fa:	c3                   	ret
    f1fb:	90                   	nop

000000000000f1fc <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000EEE5countEv>:
	count() const
    f1fc:	55                   	push   %rbp
    f1fd:	48 89 e5             	mov    %rsp,%rbp
    f200:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __r; }
    f204:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f208:	48 8b 00             	mov    (%rax),%rax
    f20b:	5d                   	pop    %rbp
    f20c:	c3                   	ret
    f20d:	90                   	nop

000000000000f20e <_ZN3vkh5TimerINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEELNS_14timer_behaviorE0EE5resetEv>:

  void reset() { start = std::chrono::steady_clock::now(); }
    f20e:	55                   	push   %rbp
    f20f:	48 89 e5             	mov    %rsp,%rbp
    f212:	53                   	push   %rbx
    f213:	48 83 ec 18          	sub    $0x18,%rsp
    f217:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f21b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    f21f:	e8 6c 42 ff ff       	call   3490 <_ZNSt6chrono3_V212steady_clock3nowEv@plt>
    f224:	48 89 03             	mov    %rax,(%rbx)
    f227:	90                   	nop
    f228:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f22c:	c9                   	leave
    f22d:	c3                   	ret

000000000000f22e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
#endif

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
    f22e:	55                   	push   %rbp
    f22f:	48 89 e5             	mov    %rsp,%rbp
    f232:	53                   	push   %rbx
    f233:	48 83 ec 38          	sub    $0x38,%rsp
    f237:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    f23b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    f23f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
    f243:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f247:	48 89 c7             	mov    %rax,%rdi
    f24a:	e8 3a 47 ff ff       	call   3989 <_ZNSt11char_traitsIcE6lengthEPKc>
    f24f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      __string_type __str(_Alloc_traits::_S_select_on_copy(
    f253:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    f257:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    f25b:	48 89 d6             	mov    %rdx,%rsi
    f25e:	48 89 c7             	mov    %rax,%rdi
    f261:	e8 6a 3e ff ff       	call   30d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv@plt>
    f266:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    f26a:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
    f26e:	48 89 d6             	mov    %rdx,%rsi
    f271:	48 89 c7             	mov    %rax,%rdi
    f274:	e8 e2 0f 00 00       	call   1025b <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
    f279:	48 8d 55 e6          	lea    -0x1a(%rbp),%rdx
    f27d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f281:	48 89 d6             	mov    %rdx,%rsi
    f284:	48 89 c7             	mov    %rax,%rdi
    f287:	e8 24 43 ff ff       	call   35b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_@plt>
    f28c:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    f290:	48 89 c7             	mov    %rax,%rdi
    f293:	e8 18 41 ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
    f298:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    f29c:	48 89 c7             	mov    %rax,%rdi
    f29f:	e8 0c 41 ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
    f2a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f2a8:	48 89 c7             	mov    %rax,%rdi
    f2ab:	e8 30 3f ff ff       	call   31e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@plt>
    f2b0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f2b4:	48 01 c2             	add    %rax,%rdx
    f2b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f2bb:	48 89 d6             	mov    %rdx,%rsi
    f2be:	48 89 c7             	mov    %rax,%rdi
    f2c1:	e8 9a 42 ff ff       	call   3560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>
      __str.append(__lhs, __len);
    f2c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f2ca:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    f2ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f2d2:	48 89 ce             	mov    %rcx,%rsi
    f2d5:	48 89 c7             	mov    %rax,%rdi
    f2d8:	e8 63 3d ff ff       	call   3040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm@plt>
      __str.append(__rhs);
    f2dd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    f2e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f2e5:	48 89 d6             	mov    %rdx,%rsi
    f2e8:	48 89 c7             	mov    %rax,%rdi
    f2eb:	e8 70 43 ff ff       	call   3660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_@plt>
      return __str;
    f2f0:	eb 34                	jmp    f326 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0xf8>
      __string_type __str(_Alloc_traits::_S_select_on_copy(
    f2f2:	48 89 c3             	mov    %rax,%rbx
    f2f5:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    f2f9:	48 89 c7             	mov    %rax,%rdi
    f2fc:	e8 af 40 ff ff       	call   33b0 <_ZNSaIcED1Ev@plt>
    f301:	48 89 d8             	mov    %rbx,%rax
    f304:	48 89 c7             	mov    %rax,%rdi
    f307:	e8 e4 42 ff ff       	call   35f0 <_Unwind_Resume@plt>
    }
    f30c:	48 89 c3             	mov    %rax,%rbx
    f30f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f313:	48 89 c7             	mov    %rax,%rdi
    f316:	e8 95 3e ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    f31b:	48 89 d8             	mov    %rbx,%rax
    f31e:	48 89 c7             	mov    %rax,%rdi
    f321:	e8 ca 42 ff ff       	call   35f0 <_Unwind_Resume@plt>
    f326:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f32a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f32e:	c9                   	leave
    f32f:	c3                   	ret

000000000000f330 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>:
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
    f330:	55                   	push   %rbp
    f331:	48 89 e5             	mov    %rsp,%rbp
    f334:	48 83 ec 20          	sub    $0x20,%rsp
    f338:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f33c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f340:	89 d0                	mov    %edx,%eax
    f342:	88 45 ec             	mov    %al,-0x14(%rbp)
	      _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
    f345:	0f be 55 ec          	movsbl -0x14(%rbp),%edx
    f349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f34d:	be 01 00 00 00       	mov    $0x1,%esi
    f352:	48 89 c7             	mov    %rax,%rdi
    f355:	e8 46 40 ff ff       	call   33a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc@plt>
    f35a:	48 89 c7             	mov    %rax,%rdi
    f35d:	e8 d3 00 00 00       	call   f435 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
    f362:	48 89 c2             	mov    %rax,%rdx
    f365:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f369:	48 89 d6             	mov    %rdx,%rsi
    f36c:	48 89 c7             	mov    %rax,%rdi
    f36f:	e8 2c 3e ff ff       	call   31a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@plt>
    f374:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f378:	c9                   	leave
    f379:	c3                   	ret

000000000000f37a <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
    f37a:	55                   	push   %rbp
    f37b:	48 89 e5             	mov    %rsp,%rbp
    f37e:	48 83 ec 20          	sub    $0x20,%rsp
    f382:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
    f386:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f38a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    f38e:	48 89 d6             	mov    %rdx,%rsi
    f391:	48 89 c7             	mov    %rax,%rdi
    f394:	e8 eb 0e 00 00       	call   10284 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
    f399:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f39d:	c9                   	leave
    f39e:	c3                   	ret
    f39f:	90                   	nop

000000000000f3a0 <_ZNKSt6vectorIPKcSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
    f3a0:	55                   	push   %rbp
    f3a1:	48 89 e5             	mov    %rsp,%rbp
    f3a4:	48 83 ec 20          	sub    $0x20,%rsp
    f3a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
    f3ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f3b0:	48 8d 50 08          	lea    0x8(%rax),%rdx
    f3b4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    f3b8:	48 89 d6             	mov    %rdx,%rsi
    f3bb:	48 89 c7             	mov    %rax,%rdi
    f3be:	e8 c1 0e 00 00       	call   10284 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
    f3c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3c7:	c9                   	leave
    f3c8:	c3                   	ret

000000000000f3c9 <_ZN9__gnu_cxxneIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    f3c9:	55                   	push   %rbp
    f3ca:	48 89 e5             	mov    %rsp,%rbp
    f3cd:	53                   	push   %rbx
    f3ce:	48 83 ec 18          	sub    $0x18,%rsp
    f3d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f3d6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    f3da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f3de:	48 89 c7             	mov    %rax,%rdi
    f3e1:	e8 bc 0e 00 00       	call   102a2 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
    f3e6:	48 8b 18             	mov    (%rax),%rbx
    f3e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f3ed:	48 89 c7             	mov    %rax,%rdi
    f3f0:	e8 ad 0e 00 00       	call   102a2 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
    f3f5:	48 8b 00             	mov    (%rax),%rax
    f3f8:	48 39 c3             	cmp    %rax,%rbx
    f3fb:	0f 95 c0             	setne  %al
    f3fe:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f402:	c9                   	leave
    f403:	c3                   	ret

000000000000f404 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    f404:	55                   	push   %rbp
    f405:	48 89 e5             	mov    %rsp,%rbp
    f408:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    f40c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f410:	48 8b 00             	mov    (%rax),%rax
    f413:	48 8d 50 08          	lea    0x8(%rax),%rdx
    f417:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f41b:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    f41e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    f422:	5d                   	pop    %rbp
    f423:	c3                   	ret

000000000000f424 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    f424:	55                   	push   %rbp
    f425:	48 89 e5             	mov    %rsp,%rbp
    f428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    f42c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f430:	48 8b 00             	mov    (%rax),%rax
    f433:	5d                   	pop    %rbp
    f434:	c3                   	ret

000000000000f435 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    f435:	55                   	push   %rbp
    f436:	48 89 e5             	mov    %rsp,%rbp
    f439:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    f43d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f441:	5d                   	pop    %rbp
    f442:	c3                   	ret
    f443:	90                   	nop

000000000000f444 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
    f444:	55                   	push   %rbp
    f445:	48 89 e5             	mov    %rsp,%rbp
    f448:	48 83 ec 10          	sub    $0x10,%rsp
    f44c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f450:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
    f454:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f458:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f45c:	48 89 d6             	mov    %rdx,%rsi
    f45f:	48 89 c7             	mov    %rax,%rdi
    f462:	e8 a3 96 ff ff       	call   8b0a <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
    f467:	90                   	nop
    f468:	c9                   	leave
    f469:	c3                   	ret

000000000000f46a <_ZNKSt16initializer_listIPKcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
    f46a:	55                   	push   %rbp
    f46b:	48 89 e5             	mov    %rsp,%rbp
    f46e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f472:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f476:	48 8b 00             	mov    (%rax),%rax
    f479:	5d                   	pop    %rbp
    f47a:	c3                   	ret
    f47b:	90                   	nop

000000000000f47c <_ZNKSt16initializer_listIPKcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    f47c:	55                   	push   %rbp
    f47d:	48 89 e5             	mov    %rsp,%rbp
    f480:	53                   	push   %rbx
    f481:	48 83 ec 18          	sub    $0x18,%rsp
    f485:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f489:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f48d:	48 89 c7             	mov    %rax,%rdi
    f490:	e8 d5 ff ff ff       	call   f46a <_ZNKSt16initializer_listIPKcE5beginEv>
    f495:	48 89 c3             	mov    %rax,%rbx
    f498:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f49c:	48 89 c7             	mov    %rax,%rdi
    f49f:	e8 0c 0e 00 00       	call   102b0 <_ZNKSt16initializer_listIPKcE4sizeEv>
    f4a4:	48 c1 e0 03          	shl    $0x3,%rax
    f4a8:	48 01 d8             	add    %rbx,%rax
    f4ab:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f4af:	c9                   	leave
    f4b0:	c3                   	ret

000000000000f4b1 <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
    f4b1:	55                   	push   %rbp
    f4b2:	48 89 e5             	mov    %rsp,%rbp
    f4b5:	48 83 ec 10          	sub    $0x10,%rsp
    f4b9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f4bd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
    f4c1:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    f4c5:	48 89 c7             	mov    %rax,%rdi
    f4c8:	e8 f5 0d 00 00       	call   102c2 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
    f4cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4d1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f4d5:	48 89 d6             	mov    %rdx,%rsi
    f4d8:	48 89 c7             	mov    %rax,%rdi
    f4db:	e8 ed 0d 00 00       	call   102cd <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
    }
    f4e0:	c9                   	leave
    f4e1:	c3                   	ret

000000000000f4e2 <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
    f4e2:	55                   	push   %rbp
    f4e3:	48 89 e5             	mov    %rsp,%rbp
    f4e6:	53                   	push   %rbx
    f4e7:	48 83 ec 38          	sub    $0x38,%rsp
    f4eb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    f4ef:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    f4f3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  const size_type __n = std::distance(__first, __last);
    f4f7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    f4fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f4ff:	48 89 d6             	mov    %rdx,%rsi
    f502:	48 89 c7             	mov    %rax,%rdi
    f505:	e8 a7 ff ff ff       	call   f4b1 <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>
    f50a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    f50e:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    f512:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f516:	48 89 c7             	mov    %rax,%rdi
    f519:	e8 62 87 ff ff       	call   7c80 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
    f51e:	48 89 c2             	mov    %rax,%rdx
    f521:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f525:	48 89 d6             	mov    %rdx,%rsi
    f528:	48 89 c7             	mov    %rax,%rdi
    f52b:	e8 51 86 ff ff       	call   7b81 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
    f530:	48 89 c6             	mov    %rax,%rsi
    f533:	48 89 df             	mov    %rbx,%rdi
    f536:	e8 5b a1 ff ff       	call   9696 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
    f53b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    f53f:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    f542:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f546:	48 8b 00             	mov    (%rax),%rax
    f549:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f54d:	48 c1 e2 03          	shl    $0x3,%rdx
    f551:	48 01 c2             	add    %rax,%rdx
    f554:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f558:	48 89 50 10          	mov    %rdx,0x10(%rax)
					_M_get_Tp_allocator());
    f55c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f560:	48 89 c7             	mov    %rax,%rdi
    f563:	e8 18 87 ff ff       	call   7c80 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
    f568:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
    f56b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f56f:	48 8b 10             	mov    (%rax),%rdx
    f572:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    f576:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f57a:	48 89 c7             	mov    %rax,%rdi
    f57d:	e8 65 0d 00 00       	call   102e7 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>
	  this->_M_impl._M_finish =
    f582:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    f586:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
    f58a:	90                   	nop
    f58b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f58f:	c9                   	leave
    f590:	c3                   	ret

000000000000f591 <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    f591:	55                   	push   %rbp
    f592:	48 89 e5             	mov    %rsp,%rbp
    f595:	48 83 ec 20          	sub    $0x20,%rsp
    f599:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f59d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f5a1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    f5a5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f5a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5ad:	48 89 d6             	mov    %rdx,%rsi
    f5b0:	48 89 c7             	mov    %rax,%rdi
    f5b3:	e8 60 0d 00 00       	call   10318 <_ZSt8_DestroyIPPKcEvT_S3_>
    }
    f5b8:	90                   	nop
    f5b9:	c9                   	leave
    f5ba:	c3                   	ret
    f5bb:	90                   	nop

000000000000f5bc <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    f5bc:	55                   	push   %rbp
    f5bd:	48 89 e5             	mov    %rsp,%rbp
    f5c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f5c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    f5c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f5cc:	48 8b 10             	mov    (%rax),%rdx
    f5cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5d3:	48 89 10             	mov    %rdx,(%rax)
    f5d6:	90                   	nop
    f5d7:	5d                   	pop    %rbp
    f5d8:	c3                   	ret
    f5d9:	90                   	nop

000000000000f5da <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    f5da:	55                   	push   %rbp
    f5db:	48 89 e5             	mov    %rsp,%rbp
    f5de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    f5e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5e6:	5d                   	pop    %rbp
    f5e7:	c3                   	ret

000000000000f5e8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    f5e8:	55                   	push   %rbp
    f5e9:	48 89 e5             	mov    %rsp,%rbp
    f5ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    f5f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5f4:	5d                   	pop    %rbp
    f5f5:	c3                   	ret

000000000000f5f6 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
    f5f6:	55                   	push   %rbp
    f5f7:	48 89 e5             	mov    %rsp,%rbp
    f5fa:	48 83 ec 20          	sub    $0x20,%rsp
    f5fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f602:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f606:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __a.construct(__p, std::forward<_Args>(__args)...);
    f60a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f60e:	48 89 c7             	mov    %rax,%rdi
    f611:	e8 d2 ff ff ff       	call   f5e8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
    f616:	48 89 c2             	mov    %rax,%rdx
    f619:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    f61d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f621:	48 89 ce             	mov    %rcx,%rsi
    f624:	48 89 c7             	mov    %rax,%rdi
    f627:	e8 12 0d 00 00       	call   1033e <_ZNSt15__new_allocatorIPKcE9constructIS1_JRS1_EEEvPT_DpOT0_>
	}
    f62c:	90                   	nop
    f62d:	c9                   	leave
    f62e:	c3                   	ret
    f62f:	90                   	nop

000000000000f630 <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJRS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
    f630:	55                   	push   %rbp
    f631:	48 89 e5             	mov    %rsp,%rbp
    f634:	53                   	push   %rbx
    f635:	48 83 ec 68          	sub    $0x68,%rsp
    f639:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    f63d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    f641:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
    f645:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f649:	48 8d 15 5e 70 00 00 	lea    0x705e(%rip),%rdx        # 166ae <_ZN6__pstl9execution2v1L5unseqE+0x327>
    f650:	be 01 00 00 00       	mov    $0x1,%esi
    f655:	48 89 c7             	mov    %rax,%rdi
    f658:	e8 23 0d 00 00       	call   10380 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>
    f65d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __old_start = this->_M_impl._M_start;
    f661:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f665:	48 8b 00             	mov    (%rax),%rax
    f668:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pointer __old_finish = this->_M_impl._M_finish;
    f66c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f670:	48 8b 40 08          	mov    0x8(%rax),%rax
    f674:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      const size_type __elems_before = __position - begin();
    f678:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f67c:	48 89 c7             	mov    %rax,%rdi
    f67f:	e8 5e ef ff ff       	call   e5e2 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
    f684:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    f688:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    f68c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    f690:	48 89 d6             	mov    %rdx,%rsi
    f693:	48 89 c7             	mov    %rax,%rdi
    f696:	e8 ad 0d 00 00       	call   10448 <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
    f69b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_start(this->_M_allocate(__len));
    f69f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f6a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f6a7:	48 89 d6             	mov    %rdx,%rsi
    f6aa:	48 89 c7             	mov    %rax,%rdi
    f6ad:	e8 e4 9f ff ff       	call   9696 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
    f6b2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      pointer __new_finish(__new_start);
    f6b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f6ba:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
    f6be:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    f6c2:	48 89 c7             	mov    %rax,%rdi
    f6c5:	e8 1e ff ff ff       	call   f5e8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
    f6ca:	48 89 c2             	mov    %rax,%rdx
				   __new_start + __elems_before,
    f6cd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f6d1:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
    f6d8:	00 
	  _Alloc_traits::construct(this->_M_impl,
    f6d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f6dd:	48 01 c1             	add    %rax,%rcx
    f6e0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f6e4:	48 89 ce             	mov    %rcx,%rsi
    f6e7:	48 89 c7             	mov    %rax,%rdi
    f6ea:	e8 07 ff ff ff       	call   f5f6 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
    f6ef:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    f6f6:	00 

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());
    f6f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f6fb:	48 89 c7             	mov    %rax,%rdi
    f6fe:	e8 7d 85 ff ff       	call   7c80 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
    f703:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__old_start, __position.base(),
    f706:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    f70a:	48 89 c7             	mov    %rax,%rdi
    f70d:	e8 c8 fe ff ff       	call   f5da <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
    f712:	48 8b 30             	mov    (%rax),%rsi
    f715:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    f719:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f71d:	48 89 d9             	mov    %rbx,%rcx
    f720:	48 89 c7             	mov    %rax,%rdi
    f723:	e8 62 0d 00 00       	call   1048a <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
    f728:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

	      ++__new_finish;
    f72c:	48 83 45 c0 08       	addq   $0x8,-0x40(%rbp)

	      __new_finish = _S_relocate(__position.base(), __old_finish,
					 __new_finish, _M_get_Tp_allocator());
    f731:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f735:	48 89 c7             	mov    %rax,%rdi
    f738:	e8 43 85 ff ff       	call   7c80 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
    f73d:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__position.base(), __old_finish,
    f740:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    f744:	48 89 c7             	mov    %rax,%rdi
    f747:	e8 8e fe ff ff       	call   f5da <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
    f74c:	48 8b 00             	mov    (%rax),%rax
    f74f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    f753:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    f757:	48 89 d9             	mov    %rbx,%rcx
    f75a:	48 89 c7             	mov    %rax,%rdi
    f75d:	e8 28 0d 00 00       	call   1048a <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
    f762:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
    f766:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
		    this->_M_impl._M_end_of_storage - __old_start);
    f76a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    f76e:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    f772:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
    f776:	48 c1 fa 03          	sar    $0x3,%rdx
      _M_deallocate(__old_start,
    f77a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    f77e:	48 89 ce             	mov    %rcx,%rsi
    f781:	48 89 c7             	mov    %rax,%rdi
    f784:	e8 2b 85 ff ff       	call   7cb4 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      this->_M_impl._M_start = __new_start;
    f789:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f78d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    f791:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
    f794:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f798:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    f79c:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
    f7a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f7a4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    f7ab:	00 
    f7ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f7b0:	48 01 c2             	add    %rax,%rdx
    f7b3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    f7b7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
    f7bb:	90                   	nop
    f7bc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f7c0:	c9                   	leave
    f7c1:	c3                   	ret

000000000000f7c2 <_ZNSt6vectorIPKcSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
    f7c2:	55                   	push   %rbp
    f7c3:	48 89 e5             	mov    %rsp,%rbp
    f7c6:	48 83 ec 20          	sub    $0x20,%rsp
    f7ca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
    f7ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f7d2:	48 89 c7             	mov    %rax,%rdi
    f7d5:	e8 2e ee ff ff       	call   e608 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
    f7da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f7de:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    f7e2:	be 01 00 00 00       	mov    $0x1,%esi
    f7e7:	48 89 c7             	mov    %rax,%rdi
    f7ea:	e8 cd 0c 00 00       	call   104bc <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>
    f7ef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f7f3:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    f7f7:	48 89 c7             	mov    %rax,%rdi
    f7fa:	e8 8d ee ff ff       	call   e68c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
      }
    f7ff:	c9                   	leave
    f800:	c3                   	ret
    f801:	90                   	nop

000000000000f802 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    f802:	55                   	push   %rbp
    f803:	48 89 e5             	mov    %rsp,%rbp
    f806:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f80a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    f80e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f812:	5d                   	pop    %rbp
    f813:	c3                   	ret

000000000000f814 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    f814:	55                   	push   %rbp
    f815:	48 89 e5             	mov    %rsp,%rbp
    f818:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    f81c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f820:	5d                   	pop    %rbp
    f821:	c3                   	ret

000000000000f822 <_ZSt7forwardIR23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    f822:	55                   	push   %rbp
    f823:	48 89 e5             	mov    %rsp,%rbp
    f826:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    f82a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f82e:	5d                   	pop    %rbp
    f82f:	c3                   	ret

000000000000f830 <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    f830:	55                   	push   %rbp
    f831:	48 89 e5             	mov    %rsp,%rbp
    f834:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    f838:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f83c:	5d                   	pop    %rbp
    f83d:	c3                   	ret

000000000000f83e <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
    f83e:	55                   	push   %rbp
    f83f:	48 89 e5             	mov    %rsp,%rbp
    f842:	48 83 ec 20          	sub    $0x20,%rsp
    f846:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f84a:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    f84e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f852:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f856:	48 89 d6             	mov    %rdx,%rsi
    f859:	48 89 c7             	mov    %rax,%rdi
    f85c:	e8 9d 0c 00 00       	call   104fe <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEEC1IJS2_EEESt10in_place_tDpOT_>
    f861:	90                   	nop
    f862:	c9                   	leave
    f863:	c3                   	ret

000000000000f864 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEC1IJS2_ELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
    f864:	55                   	push   %rbp
    f865:	48 89 e5             	mov    %rsp,%rbp
    f868:	53                   	push   %rbx
    f869:	48 83 ec 18          	sub    $0x18,%rsp
    f86d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f871:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_payload(in_place, std::forward<_Args>(__args)...)
    f875:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    f879:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f87d:	48 89 c7             	mov    %rax,%rdi
    f880:	e8 ab ff ff ff       	call   f830 <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>
    f885:	48 89 c6             	mov    %rax,%rsi
    f888:	48 89 df             	mov    %rbx,%rdi
    f88b:	e8 ae ff ff ff       	call   f83e <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>
	{ }
    f890:	90                   	nop
    f891:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f895:	c9                   	leave
    f896:	c3                   	ret
    f897:	90                   	nop

000000000000f898 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    f898:	55                   	push   %rbp
    f899:	48 89 e5             	mov    %rsp,%rbp
    f89c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f8a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    f8a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f8a8:	48 8b 10             	mov    (%rax),%rdx
    f8ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8af:	48 89 10             	mov    %rdx,(%rax)
    f8b2:	90                   	nop
    f8b3:	5d                   	pop    %rbp
    f8b4:	c3                   	ret
    f8b5:	90                   	nop

000000000000f8b6 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    f8b6:	55                   	push   %rbp
    f8b7:	48 89 e5             	mov    %rsp,%rbp
    f8ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    f8be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8c2:	5d                   	pop    %rbp
    f8c3:	c3                   	ret

000000000000f8c4 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_>:
      _M_copy_assign(const _Optional_payload_base& __other)
    f8c4:	55                   	push   %rbp
    f8c5:	48 89 e5             	mov    %rsp,%rbp
    f8c8:	53                   	push   %rbx
    f8c9:	48 83 ec 18          	sub    $0x18,%rsp
    f8cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f8d1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (this->_M_engaged && __other._M_engaged)
    f8d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f8d9:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
    f8dd:	84 c0                	test   %al,%al
    f8df:	74 35                	je     f916 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x52>
    f8e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f8e5:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
    f8e9:	84 c0                	test   %al,%al
    f8eb:	74 29                	je     f916 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x52>
	  this->_M_get() = __other._M_get();
    f8ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f8f1:	48 89 c7             	mov    %rax,%rdi
    f8f4:	e8 41 0c 00 00       	call   1053a <_ZNKSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>
    f8f9:	48 89 c3             	mov    %rax,%rbx
    f8fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f900:	48 89 c7             	mov    %rax,%rdi
    f903:	e8 4e 00 00 00       	call   f956 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>
    f908:	48 89 de             	mov    %rbx,%rsi
    f90b:	48 89 c7             	mov    %rax,%rdi
    f90e:	e8 35 0c 00 00       	call   10548 <_ZNSt4pairIj23VkQueueFamilyPropertiesEaSERKS1_>
    f913:	90                   	nop
      }
    f914:	eb 38                	jmp    f94e <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x8a>
	    if (__other._M_engaged)
    f916:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f91a:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
    f91e:	84 c0                	test   %al,%al
    f920:	74 20                	je     f942 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x7e>
	      this->_M_construct(__other._M_get());
    f922:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f926:	48 89 c7             	mov    %rax,%rdi
    f929:	e8 0c 0c 00 00       	call   1053a <_ZNKSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>
    f92e:	48 89 c2             	mov    %rax,%rdx
    f931:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f935:	48 89 d6             	mov    %rdx,%rsi
    f938:	48 89 c7             	mov    %rax,%rdi
    f93b:	e8 46 0c 00 00       	call   10586 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE12_M_constructIJRKS2_EEEvDpOT_>
      }
    f940:	eb 0c                	jmp    f94e <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x8a>
	      this->_M_reset();
    f942:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f946:	48 89 c7             	mov    %rax,%rdi
    f949:	e8 7e 0c 00 00       	call   105cc <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_M_resetEv>
      }
    f94e:	90                   	nop
    f94f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f953:	c9                   	leave
    f954:	c3                   	ret
    f955:	90                   	nop

000000000000f956 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>:
      _M_get() noexcept
    f956:	55                   	push   %rbp
    f957:	48 89 e5             	mov    %rsp,%rbp
    f95a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_payload._M_value; }
    f95e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f962:	5d                   	pop    %rbp
    f963:	c3                   	ret

000000000000f964 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    f964:	55                   	push   %rbp
    f965:	48 89 e5             	mov    %rsp,%rbp
    f968:	48 83 ec 10          	sub    $0x10,%rsp
    f96c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f974:	48 89 c7             	mov    %rax,%rdi
    f977:	e8 78 0c 00 00       	call   105f4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
    f97c:	90                   	nop
    f97d:	c9                   	leave
    f97e:	c3                   	ret
    f97f:	90                   	nop

000000000000f980 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
    f980:	55                   	push   %rbp
    f981:	48 89 e5             	mov    %rsp,%rbp
    f984:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { }
    f988:	90                   	nop
    f989:	5d                   	pop    %rbp
    f98a:	c3                   	ret
    f98b:	90                   	nop

000000000000f98c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    f98c:	55                   	push   %rbp
    f98d:	48 89 e5             	mov    %rsp,%rbp
    f990:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f994:	90                   	nop
    f995:	5d                   	pop    %rbp
    f996:	c3                   	ret
    f997:	90                   	nop

000000000000f998 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    f998:	55                   	push   %rbp
    f999:	48 89 e5             	mov    %rsp,%rbp
    f99c:	48 83 ec 20          	sub    $0x20,%rsp
    f9a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f9a4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
    f9a8:	eb 49                	jmp    f9f3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x5b>
	{
	  _M_erase(_S_right(__x));
    f9aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f9ae:	48 89 c7             	mov    %rax,%rdi
    f9b1:	e8 49 0c 00 00       	call   105ff <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
    f9b6:	48 89 c2             	mov    %rax,%rdx
    f9b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f9bd:	48 89 d6             	mov    %rdx,%rsi
    f9c0:	48 89 c7             	mov    %rax,%rdi
    f9c3:	e8 d0 ff ff ff       	call   f998 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
    f9c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f9cc:	48 89 c7             	mov    %rax,%rdi
    f9cf:	e8 3d 0c 00 00       	call   10611 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
    f9d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_drop_node(__x);
    f9d8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f9dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f9e0:	48 89 d6             	mov    %rdx,%rsi
    f9e3:	48 89 c7             	mov    %rax,%rdi
    f9e6:	e8 39 0c 00 00       	call   10624 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
    f9eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9ef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      while (__x != 0)
    f9f3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    f9f8:	75 b0                	jne    f9aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x12>
	}
    }
    f9fa:	90                   	nop
    f9fb:	90                   	nop
    f9fc:	c9                   	leave
    f9fd:	c3                   	ret

000000000000f9fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
    f9fe:	55                   	push   %rbp
    f9ff:	48 89 e5             	mov    %rsp,%rbp
    fa02:	48 83 ec 10          	sub    $0x10,%rsp
    fa06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_mbegin(); }
    fa0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa0e:	48 89 c7             	mov    %rax,%rdi
    fa11:	e8 48 0c 00 00       	call   1065e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>
    fa16:	c9                   	leave
    fa17:	c3                   	ret

000000000000fa18 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    fa18:	55                   	push   %rbp
    fa19:	48 89 e5             	mov    %rsp,%rbp
    fa1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fa20:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    fa24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fa28:	48 8b 10             	mov    (%rax),%rdx
    fa2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa2f:	48 89 10             	mov    %rdx,(%rax)
    fa32:	90                   	nop
    fa33:	5d                   	pop    %rbp
    fa34:	c3                   	ret
    fa35:	90                   	nop

000000000000fa36 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    fa36:	55                   	push   %rbp
    fa37:	48 89 e5             	mov    %rsp,%rbp
    fa3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    fa3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa42:	5d                   	pop    %rbp
    fa43:	c3                   	ret

000000000000fa44 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
    fa44:	55                   	push   %rbp
    fa45:	48 89 e5             	mov    %rsp,%rbp
    fa48:	48 83 ec 10          	sub    $0x10,%rsp
    fa4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fa50:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_t.lower_bound(__x); }
    fa54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa58:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    fa5c:	48 89 d6             	mov    %rdx,%rsi
    fa5f:	48 89 c7             	mov    %rax,%rdi
    fa62:	e8 09 0c 00 00       	call   10670 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>
    fa67:	c9                   	leave
    fa68:	c3                   	ret
    fa69:	90                   	nop

000000000000fa6a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    fa6a:	55                   	push   %rbp
    fa6b:	48 89 e5             	mov    %rsp,%rbp
    fa6e:	48 83 ec 10          	sub    $0x10,%rsp
    fa72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.end(); }
    fa76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa7a:	48 89 c7             	mov    %rax,%rdi
    fa7d:	e8 3a 0c 00 00       	call   106bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>
    fa82:	c9                   	leave
    fa83:	c3                   	ret

000000000000fa84 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    fa84:	55                   	push   %rbp
    fa85:	48 89 e5             	mov    %rsp,%rbp
    fa88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fa8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x._M_node == __y._M_node; }
    fa90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa94:	48 8b 10             	mov    (%rax),%rdx
    fa97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fa9b:	48 8b 00             	mov    (%rax),%rax
    fa9e:	48 39 c2             	cmp    %rax,%rdx
    faa1:	0f 94 c0             	sete   %al
    faa4:	5d                   	pop    %rbp
    faa5:	c3                   	ret

000000000000faa6 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>:
      key_comp() const
    faa6:	55                   	push   %rbp
    faa7:	48 89 e5             	mov    %rsp,%rbp
    faaa:	48 83 ec 10          	sub    $0x10,%rsp
    faae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.key_comp(); }
    fab2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fab6:	48 89 c7             	mov    %rax,%rdi
    fab9:	e8 28 0c 00 00       	call   106e6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>
    fabe:	90                   	nop
    fabf:	c9                   	leave
    fac0:	c3                   	ret
    fac1:	90                   	nop

000000000000fac2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    fac2:	55                   	push   %rbp
    fac3:	48 89 e5             	mov    %rsp,%rbp
    fac6:	48 83 ec 10          	sub    $0x10,%rsp
    faca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
    face:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fad2:	48 8b 00             	mov    (%rax),%rax
    fad5:	48 89 c7             	mov    %rax,%rdi
    fad8:	e8 15 0c 00 00       	call   106f2 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
    fadd:	c9                   	leave
    fade:	c3                   	ret
    fadf:	90                   	nop

000000000000fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
    fae0:	55                   	push   %rbp
    fae1:	48 89 e5             	mov    %rsp,%rbp
    fae4:	48 83 ec 20          	sub    $0x20,%rsp
    fae8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    faec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    faf0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return __x < __y; }
    faf4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    faf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fafc:	48 89 d6             	mov    %rdx,%rsi
    faff:	48 89 c7             	mov    %rax,%rdi
    fb02:	e8 09 0c 00 00       	call   10710 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
    fb07:	c9                   	leave
    fb08:	c3                   	ret

000000000000fb09 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    fb09:	55                   	push   %rbp
    fb0a:	48 89 e5             	mov    %rsp,%rbp
    fb0d:	48 83 ec 10          	sub    $0x10,%rsp
    fb11:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fb15:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
    fb19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fb1d:	48 89 c7             	mov    %rax,%rdi
    fb20:	e8 13 0c 00 00       	call   10738 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
    fb25:	48 89 c2             	mov    %rax,%rdx
    fb28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb2c:	48 89 d6             	mov    %rdx,%rsi
    fb2f:	48 89 c7             	mov    %rax,%rdi
    fb32:	e8 0f 0c 00 00       	call   10746 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>
    fb37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb3b:	c9                   	leave
    fb3c:	c3                   	ret
    fb3d:	90                   	nop

000000000000fb3e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
    fb3e:	55                   	push   %rbp
    fb3f:	48 89 e5             	mov    %rsp,%rbp
    fb42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fb46:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__it._M_node) { }
    fb4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fb4e:	48 8b 10             	mov    (%rax),%rdx
    fb51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb55:	48 89 10             	mov    %rdx,(%rax)
    fb58:	90                   	nop
    fb59:	5d                   	pop    %rbp
    fb5a:	c3                   	ret
    fb5b:	90                   	nop

000000000000fb5c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    fb5c:	55                   	push   %rbp
    fb5d:	48 89 e5             	mov    %rsp,%rbp
    fb60:	41 54                	push   %r12
    fb62:	53                   	push   %rbx
    fb63:	48 83 ec 60          	sub    $0x60,%rsp
    fb67:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    fb6b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    fb6f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    fb73:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    fb77:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
    fb7b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    fb7f:	48 89 c7             	mov    %rax,%rdi
    fb82:	e8 0e 0c 00 00       	call   10795 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
    fb87:	49 89 c4             	mov    %rax,%r12
    fb8a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    fb8e:	48 89 c7             	mov    %rax,%rdi
    fb91:	e8 f1 0b 00 00       	call   10787 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
    fb96:	48 89 c3             	mov    %rax,%rbx
    fb99:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    fb9d:	48 89 c7             	mov    %rax,%rdi
    fba0:	e8 d4 0b 00 00       	call   10779 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
    fba5:	48 89 c2             	mov    %rax,%rdx
    fba8:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    fbac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    fbb0:	4d 89 e0             	mov    %r12,%r8
    fbb3:	48 89 d9             	mov    %rbx,%rcx
    fbb6:	48 89 c7             	mov    %rax,%rdi
    fbb9:	e8 e6 0b 00 00       	call   107a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
    fbbe:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    fbc2:	48 89 c7             	mov    %rax,%rdi
    fbc5:	e8 da 10 00 00       	call   10ca4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>
    fbca:	48 89 c2             	mov    %rax,%rdx
    fbcd:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    fbd1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    fbd5:	48 89 ce             	mov    %rcx,%rsi
    fbd8:	48 89 c7             	mov    %rax,%rdi
    fbdb:	e8 76 0c 00 00       	call   10856 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>
    fbe0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    fbe4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__res.second)
    fbe8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fbec:	48 85 c0             	test   %rax,%rax
    fbef:	74 1c                	je     fc0d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb1>
	  return __z._M_insert(__res);
    fbf1:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    fbf5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    fbf9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    fbfd:	48 89 ce             	mov    %rcx,%rsi
    fc00:	48 89 c7             	mov    %rax,%rdi
    fc03:	e8 ba 10 00 00       	call   10cc2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>
    fc08:	48 89 c3             	mov    %rax,%rbx
    fc0b:	eb 17                	jmp    fc24 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc8>
	return iterator(__res.first);
    fc0d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    fc11:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    fc15:	48 89 d6             	mov    %rdx,%rsi
    fc18:	48 89 c7             	mov    %rax,%rdi
    fc1b:	e8 f8 10 00 00       	call   10d18 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
    fc20:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
      }
    fc24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    fc28:	48 89 c7             	mov    %rax,%rdi
    fc2b:	e8 f0 0b 00 00       	call   10820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
    fc30:	48 89 d8             	mov    %rbx,%rax
    fc33:	eb 1a                	jmp    fc4f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xf3>
    fc35:	48 89 c3             	mov    %rax,%rbx
    fc38:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    fc3c:	48 89 c7             	mov    %rax,%rdi
    fc3f:	e8 dc 0b 00 00       	call   10820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
    fc44:	48 89 d8             	mov    %rbx,%rax
    fc47:	48 89 c7             	mov    %rax,%rdi
    fc4a:	e8 a1 39 ff ff       	call   35f0 <_Unwind_Resume@plt>
    fc4f:	48 83 c4 60          	add    $0x60,%rsp
    fc53:	5b                   	pop    %rbx
    fc54:	41 5c                	pop    %r12
    fc56:	5d                   	pop    %rbp
    fc57:	c3                   	ret

000000000000fc58 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
    fc58:	55                   	push   %rbp
    fc59:	48 89 e5             	mov    %rsp,%rbp
    fc5c:	48 83 ec 20          	sub    $0x20,%rsp
    fc60:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
    fc64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    fc68:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    fc6c:	48 89 d6             	mov    %rdx,%rsi
    fc6f:	48 89 c7             	mov    %rax,%rdi
    fc72:	e8 bb 10 00 00       	call   10d32 <_ZN9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    fc77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc7b:	c9                   	leave
    fc7c:	c3                   	ret
    fc7d:	90                   	nop

000000000000fc7e <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
    fc7e:	55                   	push   %rbp
    fc7f:	48 89 e5             	mov    %rsp,%rbp
    fc82:	48 83 ec 20          	sub    $0x20,%rsp
    fc86:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
    fc8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fc8e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    fc92:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    fc96:	48 89 d6             	mov    %rdx,%rsi
    fc99:	48 89 c7             	mov    %rax,%rdi
    fc9c:	e8 91 10 00 00       	call   10d32 <_ZN9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    fca1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fca5:	c9                   	leave
    fca6:	c3                   	ret

000000000000fca7 <_ZN9__gnu_cxxeqIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
    fca7:	55                   	push   %rbp
    fca8:	48 89 e5             	mov    %rsp,%rbp
    fcab:	53                   	push   %rbx
    fcac:	48 83 ec 18          	sub    $0x18,%rsp
    fcb0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    fcb4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
    fcb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fcbc:	48 89 c7             	mov    %rax,%rdi
    fcbf:	e8 8c 10 00 00       	call   10d50 <_ZNK9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>
    fcc4:	48 8b 18             	mov    (%rax),%rbx
    fcc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fccb:	48 89 c7             	mov    %rax,%rdi
    fcce:	e8 7d 10 00 00       	call   10d50 <_ZNK9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>
    fcd3:	48 8b 00             	mov    (%rax),%rax
    fcd6:	48 39 c3             	cmp    %rax,%rbx
    fcd9:	0f 94 c0             	sete   %al
    fcdc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    fce0:	c9                   	leave
    fce1:	c3                   	ret

000000000000fce2 <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    fce2:	55                   	push   %rbp
    fce3:	48 89 e5             	mov    %rsp,%rbp
    fce6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fcea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    fcee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fcf2:	48 8b 10             	mov    (%rax),%rdx
    fcf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcf9:	48 89 10             	mov    %rdx,(%rax)
    fcfc:	90                   	nop
    fcfd:	5d                   	pop    %rbp
    fcfe:	c3                   	ret
    fcff:	90                   	nop

000000000000fd00 <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    fd00:	55                   	push   %rbp
    fd01:	48 89 e5             	mov    %rsp,%rbp
    fd04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    fd08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd0c:	5d                   	pop    %rbp
    fd0d:	c3                   	ret

000000000000fd0e <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    fd0e:	55                   	push   %rbp
    fd0f:	48 89 e5             	mov    %rsp,%rbp
    fd12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fd16:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    fd1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fd1e:	48 8b 10             	mov    (%rax),%rdx
    fd21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd25:	48 89 10             	mov    %rdx,(%rax)
    fd28:	90                   	nop
    fd29:	5d                   	pop    %rbp
    fd2a:	c3                   	ret
    fd2b:	90                   	nop

000000000000fd2c <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    fd2c:	55                   	push   %rbp
    fd2d:	48 89 e5             	mov    %rsp,%rbp
    fd30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    fd34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd38:	5d                   	pop    %rbp
    fd39:	c3                   	ret

000000000000fd3a <_ZSt4moveIRSt6vectorIP9VkImage_TSaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
    fd3a:	55                   	push   %rbp
    fd3b:	48 89 e5             	mov    %rsp,%rbp
    fd3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    fd42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd46:	5d                   	pop    %rbp
    fd47:	c3                   	ret

000000000000fd48 <_ZNSt6vectorIP9VkImage_TSaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, true_type) noexcept
    fd48:	55                   	push   %rbp
    fd49:	48 89 e5             	mov    %rsp,%rbp
    fd4c:	53                   	push   %rbx
    fd4d:	48 83 ec 38          	sub    $0x38,%rsp
    fd51:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    fd55:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	vector __tmp(get_allocator());
    fd59:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    fd5d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    fd61:	48 89 d6             	mov    %rdx,%rsi
    fd64:	48 89 c7             	mov    %rax,%rdi
    fd67:	e8 f2 0f 00 00       	call   10d5e <_ZNKSt12_Vector_baseIP9VkImage_TSaIS1_EE13get_allocatorEv>
    fd6c:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    fd70:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    fd74:	48 89 d6             	mov    %rdx,%rsi
    fd77:	48 89 c7             	mov    %rax,%rdi
    fd7a:	e8 13 10 00 00       	call   10d92 <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1ERKS2_>
    fd7f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    fd83:	48 89 c7             	mov    %rax,%rdi
    fd86:	e8 1f 79 ff ff       	call   76aa <_ZNSaIP9VkImage_TED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
    fd8b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fd8f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    fd93:	48 89 d6             	mov    %rdx,%rsi
    fd96:	48 89 c7             	mov    %rax,%rdi
    fd99:	e8 1a 10 00 00       	call   10db8 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
    fd9e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    fda2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    fda6:	48 89 d6             	mov    %rdx,%rsi
    fda9:	48 89 c7             	mov    %rax,%rdi
    fdac:	e8 07 10 00 00       	call   10db8 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
    fdb1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    fdb5:	48 89 c7             	mov    %rax,%rdi
    fdb8:	e8 a1 89 ff ff       	call   875e <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
    fdbd:	48 89 c3             	mov    %rax,%rbx
    fdc0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fdc4:	48 89 c7             	mov    %rax,%rdi
    fdc7:	e8 92 89 ff ff       	call   875e <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
    fdcc:	48 89 de             	mov    %rbx,%rsi
    fdcf:	48 89 c7             	mov    %rax,%rdi
    fdd2:	e8 39 10 00 00       	call   10e10 <_ZSt15__alloc_on_moveISaIP9VkImage_TEEvRT_S4_>
      }
    fdd7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    fddb:	48 89 c7             	mov    %rax,%rdi
    fdde:	e8 59 79 ff ff       	call   773c <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
    fde3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    fde7:	c9                   	leave
    fde8:	c3                   	ret
    fde9:	90                   	nop

000000000000fdea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    fdea:	55                   	push   %rbp
    fdeb:	48 89 e5             	mov    %rsp,%rbp
    fdee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    fdf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdf6:	48 8b 50 08          	mov    0x8(%rax),%rdx
    fdfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdfe:	48 8b 00             	mov    (%rax),%rax
    fe01:	48 29 c2             	sub    %rax,%rdx
    fe04:	48 89 d0             	mov    %rdx,%rax
    fe07:	48 c1 f8 03          	sar    $0x3,%rax
    fe0b:	5d                   	pop    %rbp
    fe0c:	c3                   	ret
    fe0d:	90                   	nop

000000000000fe0e <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    fe0e:	55                   	push   %rbp
    fe0f:	48 89 e5             	mov    %rsp,%rbp
    fe12:	53                   	push   %rbx
    fe13:	48 83 ec 38          	sub    $0x38,%rsp
    fe17:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    fe1b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    _M_default_append(size_type __n)
    {
      if (__n != 0)
    fe1f:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    fe24:	0f 84 e7 01 00 00    	je     10011 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x203>
	{
	  const size_type __size = size();
    fe2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fe2e:	48 89 c7             	mov    %rax,%rdi
    fe31:	e8 b4 ff ff ff       	call   fdea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
    fe36:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
    fe3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fe3e:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
    fe42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fe46:	48 8b 40 08          	mov    0x8(%rax),%rax
    fe4a:	48 29 c2             	sub    %rax,%rdx
    fe4d:	48 89 d0             	mov    %rdx,%rax
    fe50:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
    fe54:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	  if (__size > max_size() || __navail > max_size() - __size)
    fe58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fe5c:	48 89 c7             	mov    %rax,%rdi
    fe5f:	e8 cc 0f 00 00       	call   10e30 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
    fe64:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    fe68:	72 16                	jb     fe80 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x72>
    fe6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fe6e:	48 89 c7             	mov    %rax,%rdi
    fe71:	e8 ba 0f 00 00       	call   10e30 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
    fe76:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    fe7a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    fe7e:	73 07                	jae    fe87 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x79>
    fe80:	b8 01 00 00 00       	mov    $0x1,%eax
    fe85:	eb 05                	jmp    fe8c <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x7e>
    fe87:	b8 00 00 00 00       	mov    $0x0,%eax
    fe8c:	84 c0                	test   %al,%al
	    __builtin_unreachable();

	  if (__navail >= __n)
    fe8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fe92:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    fe96:	72 33                	jb     fecb <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0xbd>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
						 __n, _M_get_Tp_allocator());
    fe98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fe9c:	48 89 c7             	mov    %rax,%rdi
    fe9f:	e8 60 02 00 00       	call   10104 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
    fea4:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
    fea7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    feab:	48 8b 40 08          	mov    0x8(%rax),%rax
    feaf:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    feb3:	48 89 ce             	mov    %rcx,%rsi
    feb6:	48 89 c7             	mov    %rax,%rdi
    feb9:	e8 94 0f 00 00       	call   10e52 <_ZSt27__uninitialized_default_n_aIPP13VkImageView_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
    febe:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    fec2:	48 89 42 08          	mov    %rax,0x8(%rdx)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
    fec6:	e9 46 01 00 00       	jmp    10011 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
    fecb:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    fecf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fed3:	48 8d 15 ee 67 00 00 	lea    0x67ee(%rip),%rdx        # 166c8 <_ZN6__pstl9execution2v1L5unseqE+0x341>
    feda:	48 89 ce             	mov    %rcx,%rsi
    fedd:	48 89 c7             	mov    %rax,%rdi
    fee0:	e8 97 0f 00 00       	call   10e7c <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc>
    fee5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
    fee9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    feed:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    fef1:	48 89 d6             	mov    %rdx,%rsi
    fef4:	48 89 c7             	mov    %rax,%rdi
    fef7:	e8 48 10 00 00       	call   10f44 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE11_M_allocateEm>
    fefc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
    ff00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ff04:	48 89 c7             	mov    %rax,%rdi
    ff07:	e8 f8 01 00 00       	call   10104 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
    ff0c:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
    ff0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ff13:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
    ff1a:	00 
    ff1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ff1f:	48 01 c1             	add    %rax,%rcx
    ff22:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ff26:	48 89 c6             	mov    %rax,%rsi
    ff29:	48 89 cf             	mov    %rcx,%rdi
    ff2c:	e8 21 0f 00 00       	call   10e52 <_ZSt27__uninitialized_default_n_aIPP13VkImageView_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
    ff31:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ff35:	48 89 c7             	mov    %rax,%rdi
    ff38:	e8 c7 01 00 00       	call   10104 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
    ff3d:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
    ff40:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ff44:	48 8b 70 08          	mov    0x8(%rax),%rsi
    ff48:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ff4c:	48 8b 00             	mov    (%rax),%rax
    ff4f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ff53:	48 89 c7             	mov    %rax,%rdi
    ff56:	e8 1c 10 00 00       	call   10f77 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
    ff5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
    ff5f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    ff63:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
    ff67:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    ff6b:	48 8b 12             	mov    (%rdx),%rdx
    ff6e:	48 29 d1             	sub    %rdx,%rcx
    ff71:	48 c1 f9 03          	sar    $0x3,%rcx
    ff75:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
    ff78:	48 89 d6             	mov    %rdx,%rsi
    ff7b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    ff7f:	48 8b 0a             	mov    (%rdx),%rcx
    ff82:	48 89 f2             	mov    %rsi,%rdx
    ff85:	48 89 ce             	mov    %rcx,%rsi
    ff88:	48 89 c7             	mov    %rax,%rdi
    ff8b:	e8 3e 01 00 00       	call   100ce <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
    ff90:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ff94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ff98:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
    ff9b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ff9f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ffa3:	48 01 d0             	add    %rdx,%rax
    ffa6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ffad:	00 
    ffae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ffb2:	48 01 c2             	add    %rax,%rdx
    ffb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ffb9:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
    ffbd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ffc1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ffc8:	00 
    ffc9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ffcd:	48 01 c2             	add    %rax,%rdx
    ffd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ffd4:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
    ffd8:	eb 37                	jmp    10011 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
    ffda:	48 89 c7             	mov    %rax,%rdi
    ffdd:	e8 1e 31 ff ff       	call   3100 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
    ffe2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ffe6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ffea:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    ffee:	48 89 ce             	mov    %rcx,%rsi
    fff1:	48 89 c7             	mov    %rax,%rdi
    fff4:	e8 d5 00 00 00       	call   100ce <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
    fff9:	e8 12 35 ff ff       	call   3510 <__cxa_rethrow@plt>
		  __catch(...)
    fffe:	48 89 c3             	mov    %rax,%rbx
   10001:	e8 8a 35 ff ff       	call   3590 <__cxa_end_catch@plt>
   10006:	48 89 d8             	mov    %rbx,%rax
   10009:	48 89 c7             	mov    %rax,%rdi
   1000c:	e8 df 35 ff ff       	call   35f0 <_Unwind_Resume@plt>
    }
   10011:	90                   	nop
   10012:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   10016:	c9                   	leave
   10017:	c3                   	ret

0000000000010018 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   10018:	55                   	push   %rbp
   10019:	48 89 e5             	mov    %rsp,%rbp
   1001c:	48 83 ec 20          	sub    $0x20,%rsp
   10020:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   10024:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   10028:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1002c:	48 8b 40 08          	mov    0x8(%rax),%rax
   10030:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   10034:	48 c1 f8 03          	sar    $0x3,%rax
   10038:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1003c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   10041:	74 32                	je     10075 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   10043:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10047:	48 89 c7             	mov    %rax,%rdi
   1004a:	e8 b5 00 00 00       	call   10104 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1004f:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   10052:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10056:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1005a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1005e:	48 89 ce             	mov    %rcx,%rsi
   10061:	48 89 c7             	mov    %rax,%rdi
   10064:	e8 a9 00 00 00       	call   10112 <_ZSt8_DestroyIPP13VkImageView_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   10069:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1006d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   10071:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   10075:	90                   	nop
   10076:	c9                   	leave
   10077:	c3                   	ret

0000000000010078 <_ZNSaIP13VkImageView_TEC1Ev>:
   10078:	55                   	push   %rbp
   10079:	48 89 e5             	mov    %rsp,%rbp
   1007c:	48 83 ec 10          	sub    $0x10,%rsp
   10080:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10084:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10088:	48 89 c7             	mov    %rax,%rdi
   1008b:	e8 1a 0f 00 00       	call   10faa <_ZNSt15__new_allocatorIP13VkImageView_TEC1Ev>
   10090:	90                   	nop
   10091:	c9                   	leave
   10092:	c3                   	ret
   10093:	90                   	nop

0000000000010094 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   10094:	55                   	push   %rbp
   10095:	48 89 e5             	mov    %rsp,%rbp
   10098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1009c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100a0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   100a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100ab:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   100b2:	00 
   100b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100b7:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   100be:	00 
	{ }
   100bf:	90                   	nop
   100c0:	5d                   	pop    %rbp
   100c1:	c3                   	ret

00000000000100c2 <_ZNSt15__new_allocatorIP13VkImageView_TED1Ev>:
   100c2:	55                   	push   %rbp
   100c3:	48 89 e5             	mov    %rsp,%rbp
   100c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   100ca:	90                   	nop
   100cb:	5d                   	pop    %rbp
   100cc:	c3                   	ret
   100cd:	90                   	nop

00000000000100ce <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   100ce:	55                   	push   %rbp
   100cf:	48 89 e5             	mov    %rsp,%rbp
   100d2:	48 83 ec 20          	sub    $0x20,%rsp
   100d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   100da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   100de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   100e2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   100e7:	74 17                	je     10100 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   100e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   100f1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   100f5:	48 89 ce             	mov    %rcx,%rsi
   100f8:	48 89 c7             	mov    %rax,%rdi
   100fb:	e8 b5 0e 00 00       	call   10fb5 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE10deallocateERS2_PS1_m>
      }
   10100:	90                   	nop
   10101:	c9                   	leave
   10102:	c3                   	ret
   10103:	90                   	nop

0000000000010104 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   10104:	55                   	push   %rbp
   10105:	48 89 e5             	mov    %rsp,%rbp
   10108:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1010c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10110:	5d                   	pop    %rbp
   10111:	c3                   	ret

0000000000010112 <_ZSt8_DestroyIPP13VkImageView_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   10112:	55                   	push   %rbp
   10113:	48 89 e5             	mov    %rsp,%rbp
   10116:	48 83 ec 20          	sub    $0x20,%rsp
   1011a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1011e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10122:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   10126:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1012a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1012e:	48 89 d6             	mov    %rdx,%rsi
   10131:	48 89 c7             	mov    %rax,%rdi
   10134:	e8 aa 0e 00 00       	call   10fe3 <_ZSt8_DestroyIPP13VkImageView_TEvT_S3_>
    }
   10139:	90                   	nop
   1013a:	c9                   	leave
   1013b:	c3                   	ret

000000000001013c <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1013c:	55                   	push   %rbp
   1013d:	48 89 e5             	mov    %rsp,%rbp
   10140:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10144:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   10148:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1014c:	48 8b 10             	mov    (%rax),%rdx
   1014f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10153:	48 89 10             	mov    %rdx,(%rax)
   10156:	90                   	nop
   10157:	5d                   	pop    %rbp
   10158:	c3                   	ret
   10159:	90                   	nop

000000000001015a <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1015a:	55                   	push   %rbp
   1015b:	48 89 e5             	mov    %rsp,%rbp
   1015e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   10162:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10166:	5d                   	pop    %rbp
   10167:	c3                   	ret

0000000000010168 <_ZNSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEEC1Ev>:
	constexpr time_point() : __d(duration::zero())
   10168:	55                   	push   %rbp
   10169:	48 89 e5             	mov    %rsp,%rbp
   1016c:	53                   	push   %rbx
   1016d:	48 83 ec 18          	sub    $0x18,%rsp
   10171:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   10175:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   10179:	e8 58 e0 ff ff       	call   e1d6 <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE4zeroEv>
   1017e:	48 89 03             	mov    %rax,(%rbx)
	{ }
   10181:	90                   	nop
   10182:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   10186:	c9                   	leave
   10187:	c3                   	ret

0000000000010188 <_ZNKSt6chrono10time_pointINS_3_V212steady_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv>:
	time_since_epoch() const
   10188:	55                   	push   %rbp
   10189:	48 89 e5             	mov    %rsp,%rbp
   1018c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __d; }
   10190:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10194:	48 8b 00             	mov    (%rax),%rax
   10197:	5d                   	pop    %rbp
   10198:	c3                   	ret

0000000000010199 <_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_>:
      operator-(const duration<_Rep1, _Period1>& __lhs,
   10199:	55                   	push   %rbp
   1019a:	48 89 e5             	mov    %rsp,%rbp
   1019d:	53                   	push   %rbx
   1019e:	48 83 ec 38          	sub    $0x38,%rsp
   101a2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   101a6:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
   101aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   101ae:	48 8b 00             	mov    (%rax),%rax
   101b1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   101b5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   101b9:	48 89 c7             	mov    %rax,%rdi
   101bc:	e8 67 e0 ff ff       	call   e228 <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>
   101c1:	48 89 c3             	mov    %rax,%rbx
   101c4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   101c8:	48 8b 00             	mov    (%rax),%rax
   101cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   101cf:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   101d3:	48 89 c7             	mov    %rax,%rdi
   101d6:	e8 4d e0 ff ff       	call   e228 <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>
   101db:	48 29 c3             	sub    %rax,%rbx
   101de:	48 89 da             	mov    %rbx,%rdx
   101e1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   101e5:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   101e9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   101ed:	48 89 d6             	mov    %rdx,%rsi
   101f0:	48 89 c7             	mov    %rax,%rdi
   101f3:	e8 08 e0 ff ff       	call   e200 <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_>
   101f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
      }
   101fc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   10200:	c9                   	leave
   10201:	c3                   	ret

0000000000010202 <_ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000EEEES2_ILl1ELl1000EElLb1ELb0EE6__castIlS2_ILl1ELl1000000000EEEES4_RKNS1_IT_T0_EE>:
	  __cast(const duration<_Rep, _Period>& __d)
   10202:	55                   	push   %rbp
   10203:	48 89 e5             	mov    %rsp,%rbp
   10206:	48 83 ec 20          	sub    $0x20,%rsp
   1020a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   1020e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10212:	48 89 c7             	mov    %rax,%rdi
   10215:	e8 0e e0 ff ff       	call   e228 <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>
   1021a:	48 89 c1             	mov    %rax,%rcx
   1021d:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
   10224:	9b c4 20 
   10227:	48 89 c8             	mov    %rcx,%rax
   1022a:	48 f7 ea             	imul   %rdx
   1022d:	48 89 d0             	mov    %rdx,%rax
   10230:	48 c1 f8 07          	sar    $0x7,%rax
   10234:	48 c1 f9 3f          	sar    $0x3f,%rcx
   10238:	48 89 ca             	mov    %rcx,%rdx
   1023b:	48 29 d0             	sub    %rdx,%rax
	    return _ToDur(static_cast<__to_rep>(
   1023e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   10242:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   10246:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1024a:	48 89 d6             	mov    %rdx,%rsi
   1024d:	48 89 c7             	mov    %rax,%rdi
   10250:	e8 b5 0d 00 00       	call   1100a <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000EEEC1IlvEERKT_>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   10255:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	  }
   10259:	c9                   	leave
   1025a:	c3                   	ret

000000000001025b <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
   1025b:	55                   	push   %rbp
   1025c:	48 89 e5             	mov    %rsp,%rbp
   1025f:	48 83 ec 10          	sub    $0x10,%rsp
   10263:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10267:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _Base_type::select_on_container_copy_construction(__a); }
   1026b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1026f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   10273:	48 89 d6             	mov    %rdx,%rsi
   10276:	48 89 c7             	mov    %rax,%rdi
   10279:	e8 a9 0d 00 00       	call   11027 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
   1027e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10282:	c9                   	leave
   10283:	c3                   	ret

0000000000010284 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   10284:	55                   	push   %rbp
   10285:	48 89 e5             	mov    %rsp,%rbp
   10288:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1028c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   10290:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10294:	48 8b 10             	mov    (%rax),%rdx
   10297:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1029b:	48 89 10             	mov    %rdx,(%rax)
   1029e:	90                   	nop
   1029f:	5d                   	pop    %rbp
   102a0:	c3                   	ret
   102a1:	90                   	nop

00000000000102a2 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   102a2:	55                   	push   %rbp
   102a3:	48 89 e5             	mov    %rsp,%rbp
   102a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   102aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102ae:	5d                   	pop    %rbp
   102af:	c3                   	ret

00000000000102b0 <_ZNKSt16initializer_listIPKcE4sizeEv>:
      size() const noexcept { return _M_len; }
   102b0:	55                   	push   %rbp
   102b1:	48 89 e5             	mov    %rsp,%rbp
   102b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   102b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102bc:	48 8b 40 08          	mov    0x8(%rax),%rax
   102c0:	5d                   	pop    %rbp
   102c1:	c3                   	ret

00000000000102c2 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
   102c2:	55                   	push   %rbp
   102c3:	48 89 e5             	mov    %rsp,%rbp
   102c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   102ca:	90                   	nop
   102cb:	5d                   	pop    %rbp
   102cc:	c3                   	ret

00000000000102cd <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   102cd:	55                   	push   %rbp
   102ce:	48 89 e5             	mov    %rsp,%rbp
   102d1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   102d5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
   102d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   102dd:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   102e1:	48 c1 f8 03          	sar    $0x3,%rax
    }
   102e5:	5d                   	pop    %rbp
   102e6:	c3                   	ret

00000000000102e7 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   102e7:	55                   	push   %rbp
   102e8:	48 89 e5             	mov    %rsp,%rbp
   102eb:	48 83 ec 20          	sub    $0x20,%rsp
   102ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   102f3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   102f7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   102fb:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      return std::uninitialized_copy(__first, __last, __result);
   102ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10303:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   10307:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1030b:	48 89 ce             	mov    %rcx,%rsi
   1030e:	48 89 c7             	mov    %rax,%rdi
   10311:	e8 65 0d 00 00       	call   1107b <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>
    }
   10316:	c9                   	leave
   10317:	c3                   	ret

0000000000010318 <_ZSt8_DestroyIPPKcEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   10318:	55                   	push   %rbp
   10319:	48 89 e5             	mov    %rsp,%rbp
   1031c:	48 83 ec 10          	sub    $0x10,%rsp
   10320:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10324:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   10328:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1032c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10330:	48 89 d6             	mov    %rdx,%rsi
   10333:	48 89 c7             	mov    %rax,%rdi
   10336:	e8 75 0d 00 00       	call   110b0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>
    }
   1033b:	90                   	nop
   1033c:	c9                   	leave
   1033d:	c3                   	ret

000000000001033e <_ZNSt15__new_allocatorIPKcE9constructIS1_JRS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
   1033e:	55                   	push   %rbp
   1033f:	48 89 e5             	mov    %rsp,%rbp
   10342:	53                   	push   %rbx
   10343:	48 83 ec 28          	sub    $0x28,%rsp
   10347:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1034b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1034f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   10353:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   10357:	48 89 c6             	mov    %rax,%rsi
   1035a:	bf 08 00 00 00       	mov    $0x8,%edi
   1035f:	e8 fc 39 ff ff       	call   3d60 <_ZnwmPv>
   10364:	48 89 c3             	mov    %rax,%rbx
   10367:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1036b:	48 89 c7             	mov    %rax,%rdi
   1036e:	e8 75 f2 ff ff       	call   f5e8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
   10373:	48 8b 00             	mov    (%rax),%rax
   10376:	48 89 03             	mov    %rax,(%rbx)
   10379:	90                   	nop
   1037a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1037e:	c9                   	leave
   1037f:	c3                   	ret

0000000000010380 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>:
      _M_check_len(size_type __n, const char* __s) const
   10380:	55                   	push   %rbp
   10381:	48 89 e5             	mov    %rsp,%rbp
   10384:	53                   	push   %rbx
   10385:	48 83 ec 38          	sub    $0x38,%rsp
   10389:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1038d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   10391:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   10395:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10399:	48 89 c7             	mov    %rax,%rdi
   1039c:	e8 1f 0d 00 00       	call   110c0 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   103a1:	48 89 c3             	mov    %rax,%rbx
   103a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   103a8:	48 89 c7             	mov    %rax,%rdi
   103ab:	e8 92 e3 ff ff       	call   e742 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   103b0:	48 29 c3             	sub    %rax,%rbx
   103b3:	48 89 da             	mov    %rbx,%rdx
   103b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   103ba:	48 39 c2             	cmp    %rax,%rdx
   103bd:	0f 92 c0             	setb   %al
   103c0:	84 c0                	test   %al,%al
   103c2:	74 0c                	je     103d0 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0x50>
	  __throw_length_error(__N(__s));
   103c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   103c8:	48 89 c7             	mov    %rax,%rdi
   103cb:	e8 90 2d ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   103d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   103d4:	48 89 c7             	mov    %rax,%rdi
   103d7:	e8 66 e3 ff ff       	call   e742 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   103dc:	48 89 c3             	mov    %rax,%rbx
   103df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   103e3:	48 89 c7             	mov    %rax,%rdi
   103e6:	e8 57 e3 ff ff       	call   e742 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   103eb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   103ef:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   103f3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   103f7:	48 89 d6             	mov    %rdx,%rsi
   103fa:	48 89 c7             	mov    %rax,%rdi
   103fd:	e8 4e 0c 00 00       	call   11050 <_ZSt3maxImERKT_S2_S2_>
   10402:	48 8b 00             	mov    (%rax),%rax
   10405:	48 01 d8             	add    %rbx,%rax
   10408:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1040c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10410:	48 89 c7             	mov    %rax,%rdi
   10413:	e8 2a e3 ff ff       	call   e742 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   10418:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1041c:	72 12                	jb     10430 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xb0>
   1041e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10422:	48 89 c7             	mov    %rax,%rdi
   10425:	e8 96 0c 00 00       	call   110c0 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   1042a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1042e:	73 0e                	jae    1043e <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xbe>
   10430:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10434:	48 89 c7             	mov    %rax,%rdi
   10437:	e8 84 0c 00 00       	call   110c0 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   1043c:	eb 04                	jmp    10442 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xc2>
   1043e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   10442:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   10446:	c9                   	leave
   10447:	c3                   	ret

0000000000010448 <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
   10448:	55                   	push   %rbp
   10449:	48 89 e5             	mov    %rsp,%rbp
   1044c:	53                   	push   %rbx
   1044d:	48 83 ec 18          	sub    $0x18,%rsp
   10451:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   10455:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   10459:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1045d:	48 89 c7             	mov    %rax,%rdi
   10460:	e8 75 f1 ff ff       	call   f5da <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   10465:	48 8b 18             	mov    (%rax),%rbx
   10468:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1046c:	48 89 c7             	mov    %rax,%rdi
   1046f:	e8 66 f1 ff ff       	call   f5da <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   10474:	48 8b 00             	mov    (%rax),%rax
   10477:	48 89 da             	mov    %rbx,%rdx
   1047a:	48 29 c2             	sub    %rax,%rdx
   1047d:	48 89 d0             	mov    %rdx,%rax
   10480:	48 c1 f8 03          	sar    $0x3,%rax
   10484:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   10488:	c9                   	leave
   10489:	c3                   	ret

000000000001048a <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1048a:	55                   	push   %rbp
   1048b:	48 89 e5             	mov    %rsp,%rbp
   1048e:	48 83 ec 20          	sub    $0x20,%rsp
   10492:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10496:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1049a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1049e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   104a2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   104a6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   104aa:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   104ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104b2:	48 89 c7             	mov    %rax,%rdi
   104b5:	e8 28 0c 00 00       	call   110e2 <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   104ba:	c9                   	leave
   104bb:	c3                   	ret

00000000000104bc <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
   104bc:	55                   	push   %rbp
   104bd:	48 89 e5             	mov    %rsp,%rbp
   104c0:	48 83 ec 20          	sub    $0x20,%rsp
   104c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   104c8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
   104cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   104d0:	48 8b 00             	mov    (%rax),%rax
   104d3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   104d7:	48 c1 e2 03          	shl    $0x3,%rdx
   104db:	48 f7 da             	neg    %rdx
   104de:	48 01 d0             	add    %rdx,%rax
   104e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   104e5:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   104e9:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   104ed:	48 89 d6             	mov    %rdx,%rsi
   104f0:	48 89 c7             	mov    %rax,%rdi
   104f3:	e8 c4 f0 ff ff       	call   f5bc <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   104f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   104fc:	c9                   	leave
   104fd:	c3                   	ret

00000000000104fe <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEEC1IJS2_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
   104fe:	55                   	push   %rbp
   104ff:	48 89 e5             	mov    %rsp,%rbp
   10502:	53                   	push   %rbx
   10503:	48 83 ec 28          	sub    $0x28,%rsp
   10507:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1050b:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
   1050f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   10513:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10517:	48 89 c7             	mov    %rax,%rdi
   1051a:	e8 11 f3 ff ff       	call   f830 <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>
   1051f:	48 89 c6             	mov    %rax,%rsi
   10522:	48 89 df             	mov    %rbx,%rdi
   10525:	e8 1c 0c 00 00       	call   11146 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_StorageIS2_Lb1EEC1IJS2_EEESt10in_place_tDpOT_>
	  _M_engaged(true)
   1052a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1052e:	c6 40 1c 01          	movb   $0x1,0x1c(%rax)
	{ }
   10532:	90                   	nop
   10533:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   10537:	c9                   	leave
   10538:	c3                   	ret
   10539:	90                   	nop

000000000001053a <_ZNKSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>:
      _M_get() const noexcept
   1053a:	55                   	push   %rbp
   1053b:	48 89 e5             	mov    %rsp,%rbp
   1053e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_payload._M_value; }
   10542:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10546:	5d                   	pop    %rbp
   10547:	c3                   	ret

0000000000010548 <_ZNSt4pairIj23VkQueueFamilyPropertiesEaSERKS1_>:
	explicit constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }

      pair&
      operator=(__conditional_t<__and_<is_copy_assignable<_T1>,
   10548:	55                   	push   %rbp
   10549:	48 89 e5             	mov    %rsp,%rbp
   1054c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10550:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
				       is_copy_assignable<_T2>>::value,
				const pair&, const __nonesuch&> __p)
      {
	first = __p.first;
   10554:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10558:	8b 10                	mov    (%rax),%edx
   1055a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1055e:	89 10                	mov    %edx,(%rax)
	second = __p.second;
   10560:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   10564:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   10568:	48 8b 46 04          	mov    0x4(%rsi),%rax
   1056c:	48 8b 56 0c          	mov    0xc(%rsi),%rdx
   10570:	48 89 41 04          	mov    %rax,0x4(%rcx)
   10574:	48 89 51 0c          	mov    %rdx,0xc(%rcx)
   10578:	48 8b 46 14          	mov    0x14(%rsi),%rax
   1057c:	48 89 41 14          	mov    %rax,0x14(%rcx)
	return *this;
   10580:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   10584:	5d                   	pop    %rbp
   10585:	c3                   	ret

0000000000010586 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE12_M_constructIJRKS2_EEEvDpOT_>:
	_M_construct(_Args&&... __args)
   10586:	55                   	push   %rbp
   10587:	48 89 e5             	mov    %rsp,%rbp
   1058a:	53                   	push   %rbx
   1058b:	48 83 ec 18          	sub    $0x18,%rsp
   1058f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   10593:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  std::_Construct(std::__addressof(this->_M_payload._M_value),
   10597:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1059b:	48 89 c7             	mov    %rax,%rdi
   1059e:	e8 f5 0b 00 00       	call   11198 <_ZSt7forwardIRKSt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS5_E4typeE>
   105a3:	48 89 c3             	mov    %rax,%rbx
   105a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   105aa:	48 89 c7             	mov    %rax,%rdi
   105ad:	e8 d8 0b 00 00       	call   1118a <_ZSt11__addressofISt4pairIj23VkQueueFamilyPropertiesEEPT_RS3_>
   105b2:	48 89 de             	mov    %rbx,%rsi
   105b5:	48 89 c7             	mov    %rax,%rdi
   105b8:	e8 e9 0b 00 00       	call   111a6 <_ZSt10_ConstructISt4pairIj23VkQueueFamilyPropertiesEJRKS2_EEvPT_DpOT0_>
	  this->_M_engaged = true;
   105bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   105c1:	c6 40 1c 01          	movb   $0x1,0x1c(%rax)
	}
   105c5:	90                   	nop
   105c6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   105ca:	c9                   	leave
   105cb:	c3                   	ret

00000000000105cc <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_M_resetEv>:
      _M_reset() noexcept
   105cc:	55                   	push   %rbp
   105cd:	48 89 e5             	mov    %rsp,%rbp
   105d0:	48 83 ec 10          	sub    $0x10,%rsp
   105d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (this->_M_engaged)
   105d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105dc:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
   105e0:	84 c0                	test   %al,%al
   105e2:	74 0c                	je     105f0 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_M_resetEv+0x24>
	  _M_destroy();
   105e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105e8:	48 89 c7             	mov    %rax,%rdi
   105eb:	e8 10 0c 00 00       	call   11200 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE10_M_destroyEv>
      }
   105f0:	90                   	nop
   105f1:	c9                   	leave
   105f2:	c3                   	ret
   105f3:	90                   	nop

00000000000105f4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   105f4:	55                   	push   %rbp
   105f5:	48 89 e5             	mov    %rsp,%rbp
   105f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   105fc:	90                   	nop
   105fd:	5d                   	pop    %rbp
   105fe:	c3                   	ret

00000000000105ff <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   105ff:	55                   	push   %rbp
   10600:	48 89 e5             	mov    %rsp,%rbp
   10603:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_right); }
   10607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1060b:	48 8b 40 18          	mov    0x18(%rax),%rax
   1060f:	5d                   	pop    %rbp
   10610:	c3                   	ret

0000000000010611 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   10611:	55                   	push   %rbp
   10612:	48 89 e5             	mov    %rsp,%rbp
   10615:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_left); }
   10619:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1061d:	48 8b 40 10          	mov    0x10(%rax),%rax
   10621:	5d                   	pop    %rbp
   10622:	c3                   	ret
   10623:	90                   	nop

0000000000010624 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   10624:	55                   	push   %rbp
   10625:	48 89 e5             	mov    %rsp,%rbp
   10628:	48 83 ec 10          	sub    $0x10,%rsp
   1062c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10630:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	_M_destroy_node(__p);
   10634:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   10638:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1063c:	48 89 d6             	mov    %rdx,%rsi
   1063f:	48 89 c7             	mov    %rax,%rdi
   10642:	e8 cd 0b 00 00       	call   11214 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
   10647:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1064b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1064f:	48 89 d6             	mov    %rdx,%rsi
   10652:	48 89 c7             	mov    %rax,%rdi
   10655:	e8 f8 0b 00 00       	call   11252 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
   1065a:	90                   	nop
   1065b:	c9                   	leave
   1065c:	c3                   	ret
   1065d:	90                   	nop

000000000001065e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
   1065e:	55                   	push   %rbp
   1065f:	48 89 e5             	mov    %rsp,%rbp
   10662:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   10666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1066a:	48 8b 40 10          	mov    0x10(%rax),%rax
   1066e:	5d                   	pop    %rbp
   1066f:	c3                   	ret

0000000000010670 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>:
      lower_bound(const key_type& __k)
   10670:	55                   	push   %rbp
   10671:	48 89 e5             	mov    %rsp,%rbp
   10674:	53                   	push   %rbx
   10675:	48 83 ec 18          	sub    $0x18,%rsp
   10679:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1067d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   10681:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10685:	48 89 c7             	mov    %rax,%rdi
   10688:	e8 fb 0b 00 00       	call   11288 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1068d:	48 89 c3             	mov    %rax,%rbx
   10690:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10694:	48 89 c7             	mov    %rax,%rdi
   10697:	e8 62 f3 ff ff       	call   f9fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   1069c:	48 89 c6             	mov    %rax,%rsi
   1069f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   106a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   106a7:	48 89 d1             	mov    %rdx,%rcx
   106aa:	48 89 da             	mov    %rbx,%rdx
   106ad:	48 89 c7             	mov    %rax,%rdi
   106b0:	e8 e5 0b 00 00       	call   1129a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>
   106b5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   106b9:	c9                   	leave
   106ba:	c3                   	ret
   106bb:	90                   	nop

00000000000106bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   106bc:	55                   	push   %rbp
   106bd:	48 89 e5             	mov    %rsp,%rbp
   106c0:	48 83 ec 20          	sub    $0x20,%rsp
   106c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(&this->_M_impl._M_header); }
   106c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   106cc:	48 8d 50 08          	lea    0x8(%rax),%rdx
   106d0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   106d4:	48 89 d6             	mov    %rdx,%rsi
   106d7:	48 89 c7             	mov    %rax,%rdi
   106da:	e8 39 06 00 00       	call   10d18 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   106df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106e3:	c9                   	leave
   106e4:	c3                   	ret
   106e5:	90                   	nop

00000000000106e6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>:
      key_comp() const
   106e6:	55                   	push   %rbp
   106e7:	48 89 e5             	mov    %rsp,%rbp
   106ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_key_compare; }
   106ee:	90                   	nop
   106ef:	5d                   	pop    %rbp
   106f0:	c3                   	ret
   106f1:	90                   	nop

00000000000106f2 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr()
   106f2:	55                   	push   %rbp
   106f3:	48 89 e5             	mov    %rsp,%rbp
   106f6:	48 83 ec 10          	sub    $0x10,%rsp
   106fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   106fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10702:	48 83 c0 20          	add    $0x20,%rax
   10706:	48 89 c7             	mov    %rax,%rdi
   10709:	e8 22 0c 00 00       	call   11330 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   1070e:	c9                   	leave
   1070f:	c3                   	ret

0000000000010710 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   10710:	55                   	push   %rbp
   10711:	48 89 e5             	mov    %rsp,%rbp
   10714:	48 83 ec 10          	sub    $0x10,%rsp
   10718:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1071c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
   10720:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   10724:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10728:	48 89 d6             	mov    %rdx,%rsi
   1072b:	48 89 c7             	mov    %rax,%rdi
   1072e:	e8 fd 28 ff ff       	call   3030 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@plt>
   10733:	c1 e8 1f             	shr    $0x1f,%eax
   10736:	c9                   	leave
   10737:	c3                   	ret

0000000000010738 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10738:	55                   	push   %rbp
   10739:	48 89 e5             	mov    %rsp,%rbp
   1073c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   10740:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10744:	5d                   	pop    %rbp
   10745:	c3                   	ret

0000000000010746 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
   10746:	55                   	push   %rbp
   10747:	48 89 e5             	mov    %rsp,%rbp
   1074a:	53                   	push   %rbx
   1074b:	48 83 ec 18          	sub    $0x18,%rsp
   1074f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   10753:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Inherited(std::forward<_UElements>(__elements)...) { }
   10757:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1075b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1075f:	48 89 c7             	mov    %rax,%rdi
   10762:	e8 d1 ff ff ff       	call   10738 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   10767:	48 89 c6             	mov    %rax,%rsi
   1076a:	48 89 df             	mov    %rbx,%rdi
   1076d:	e8 d8 0b 00 00       	call   1134a <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>
   10772:	90                   	nop
   10773:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   10777:	c9                   	leave
   10778:	c3                   	ret

0000000000010779 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10779:	55                   	push   %rbp
   1077a:	48 89 e5             	mov    %rsp,%rbp
   1077d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   10781:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10785:	5d                   	pop    %rbp
   10786:	c3                   	ret

0000000000010787 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10787:	55                   	push   %rbp
   10788:	48 89 e5             	mov    %rsp,%rbp
   1078b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1078f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10793:	5d                   	pop    %rbp
   10794:	c3                   	ret

0000000000010795 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10795:	55                   	push   %rbp
   10796:	48 89 e5             	mov    %rsp,%rbp
   10799:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1079d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107a1:	5d                   	pop    %rbp
   107a2:	c3                   	ret
   107a3:	90                   	nop

00000000000107a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
   107a4:	55                   	push   %rbp
   107a5:	48 89 e5             	mov    %rsp,%rbp
   107a8:	41 54                	push   %r12
   107aa:	53                   	push   %rbx
   107ab:	48 83 ec 30          	sub    $0x30,%rsp
   107af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   107b3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   107b7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   107bb:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   107bf:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  : _M_t(__t),
   107c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   107c7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   107cb:	48 89 10             	mov    %rdx,(%rax)
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
   107ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   107d2:	48 89 c7             	mov    %rax,%rdi
   107d5:	e8 bb ff ff ff       	call   10795 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   107da:	49 89 c4             	mov    %rax,%r12
   107dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   107e1:	48 89 c7             	mov    %rax,%rdi
   107e4:	e8 9e ff ff ff       	call   10787 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   107e9:	48 89 c3             	mov    %rax,%rbx
   107ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   107f0:	48 89 c7             	mov    %rax,%rdi
   107f3:	e8 81 ff ff ff       	call   10779 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   107f8:	48 89 c6             	mov    %rax,%rsi
   107fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   107ff:	4c 89 e1             	mov    %r12,%rcx
   10802:	48 89 da             	mov    %rbx,%rdx
   10805:	48 89 c7             	mov    %rax,%rdi
   10808:	e8 71 0b 00 00       	call   1137e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
   1080d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10811:	48 89 42 08          	mov    %rax,0x8(%rdx)
	  { }
   10815:	90                   	nop
   10816:	48 83 c4 30          	add    $0x30,%rsp
   1081a:	5b                   	pop    %rbx
   1081b:	41 5c                	pop    %r12
   1081d:	5d                   	pop    %rbp
   1081e:	c3                   	ret
   1081f:	90                   	nop

0000000000010820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
   10820:	55                   	push   %rbp
   10821:	48 89 e5             	mov    %rsp,%rbp
   10824:	48 83 ec 10          	sub    $0x10,%rsp
   10828:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (_M_node)
   1082c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10830:	48 8b 40 08          	mov    0x8(%rax),%rax
   10834:	48 85 c0             	test   %rax,%rax
   10837:	74 1a                	je     10853 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev+0x33>
	    _M_t._M_drop_node(_M_node);
   10839:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1083d:	48 8b 00             	mov    (%rax),%rax
   10840:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10844:	48 8b 52 08          	mov    0x8(%rdx),%rdx
   10848:	48 89 d6             	mov    %rdx,%rsi
   1084b:	48 89 c7             	mov    %rax,%rdi
   1084e:	e8 d1 fd ff ff       	call   10624 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	}
   10853:	90                   	nop
   10854:	c9                   	leave
   10855:	c3                   	ret

0000000000010856 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   10856:	55                   	push   %rbp
   10857:	48 89 e5             	mov    %rsp,%rbp
   1085a:	53                   	push   %rbx
   1085b:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
   10862:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
   10869:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
   10870:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
      iterator __pos = __position._M_const_cast();
   10877:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1087e:	48 89 c7             	mov    %rax,%rdi
   10881:	e8 74 0b 00 00       	call   113fa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>
   10886:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
      if (__pos._M_node == _M_end())
   1088d:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   10894:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1089b:	48 89 c7             	mov    %rax,%rdi
   1089e:	e8 e5 09 00 00       	call   11288 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   108a3:	48 39 c3             	cmp    %rax,%rbx
   108a6:	0f 94 c0             	sete   %al
   108a9:	84 c0                	test   %al,%al
   108ab:	0f 84 c8 00 00 00    	je     10979 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x123>
	  if (size() > 0
   108b1:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   108b8:	48 89 c7             	mov    %rax,%rdi
   108bb:	e8 62 0b 00 00       	call   11422 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   108c0:	48 85 c0             	test   %rax,%rax
   108c3:	74 44                	je     10909 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   108c5:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   108cc:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   108d3:	48 89 c7             	mov    %rax,%rdi
   108d6:	e8 59 0b 00 00       	call   11434 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   108db:	48 8b 00             	mov    (%rax),%rax
   108de:	48 89 c7             	mov    %rax,%rdi
   108e1:	e8 60 0b 00 00       	call   11446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   108e6:	48 89 c1             	mov    %rax,%rcx
   108e9:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   108f0:	48 89 c2             	mov    %rax,%rdx
   108f3:	48 89 ce             	mov    %rcx,%rsi
   108f6:	48 89 df             	mov    %rbx,%rdi
   108f9:	e8 e2 f1 ff ff       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   108fe:	84 c0                	test   %al,%al
   10900:	74 07                	je     10909 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   10902:	b8 01 00 00 00       	mov    $0x1,%eax
   10907:	eb 05                	jmp    1090e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb8>
   10909:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (size() > 0
   1090e:	84 c0                	test   %al,%al
   10910:	74 49                	je     1095b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x105>
	    return _Res(0, _M_rightmost());
   10912:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   10919:	48 89 c7             	mov    %rax,%rdi
   1091c:	e8 13 0b 00 00       	call   11434 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   10921:	48 89 c2             	mov    %rax,%rdx
   10924:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
   1092b:	00 00 00 00 
   1092f:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
   10936:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1093d:	48 89 ce             	mov    %rcx,%rsi
   10940:	48 89 c7             	mov    %rax,%rdi
   10943:	e8 18 0b 00 00       	call   11460 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   10948:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   1094f:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
   10956:	e9 43 03 00 00       	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1095b:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   10962:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   10969:	48 89 d6             	mov    %rdx,%rsi
   1096c:	48 89 c7             	mov    %rax,%rdi
   1096f:	e8 1c 0b 00 00       	call   11490 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   10974:	e9 25 03 00 00       	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   10979:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   10980:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   10987:	48 89 c7             	mov    %rax,%rdi
   1098a:	e8 b7 0a 00 00       	call   11446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1098f:	48 89 c2             	mov    %rax,%rdx
   10992:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   10999:	48 89 c6             	mov    %rax,%rsi
   1099c:	48 89 df             	mov    %rbx,%rdi
   1099f:	e8 3c f1 ff ff       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   109a4:	84 c0                	test   %al,%al
   109a6:	0f 84 66 01 00 00    	je     10b12 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x2bc>
	  iterator __before = __pos;
   109ac:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   109b3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
	  if (__pos._M_node == _M_leftmost()) // begin()
   109ba:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   109c1:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   109c8:	48 89 c7             	mov    %rax,%rdi
   109cb:	e8 36 0c 00 00       	call   11606 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   109d0:	48 8b 00             	mov    (%rax),%rax
   109d3:	48 39 c3             	cmp    %rax,%rbx
   109d6:	0f 94 c0             	sete   %al
   109d9:	84 c0                	test   %al,%al
   109db:	74 4c                	je     10a29 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1d3>
	    return _Res(_M_leftmost(), _M_leftmost());
   109dd:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   109e4:	48 89 c7             	mov    %rax,%rdi
   109e7:	e8 1a 0c 00 00       	call   11606 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   109ec:	48 89 c3             	mov    %rax,%rbx
   109ef:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   109f6:	48 89 c7             	mov    %rax,%rdi
   109f9:	e8 08 0c 00 00       	call   11606 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   109fe:	48 89 c1             	mov    %rax,%rcx
   10a01:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   10a08:	48 89 da             	mov    %rbx,%rdx
   10a0b:	48 89 ce             	mov    %rcx,%rsi
   10a0e:	48 89 c7             	mov    %rax,%rdi
   10a11:	e8 02 0c 00 00       	call   11618 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
   10a16:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   10a1d:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
   10a24:	e9 75 02 00 00       	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   10a29:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   10a30:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
   10a37:	48 89 c7             	mov    %rax,%rdi
   10a3a:	e8 1d 0c 00 00       	call   1165c <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
   10a3f:	48 8b 00             	mov    (%rax),%rax
   10a42:	48 89 c7             	mov    %rax,%rdi
   10a45:	e8 fc 09 00 00       	call   11446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   10a4a:	48 89 c1             	mov    %rax,%rcx
   10a4d:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   10a54:	48 89 c2             	mov    %rax,%rdx
   10a57:	48 89 ce             	mov    %rcx,%rsi
   10a5a:	48 89 df             	mov    %rbx,%rdi
   10a5d:	e8 7e f0 ff ff       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   10a62:	84 c0                	test   %al,%al
   10a64:	0f 84 8a 00 00 00    	je     10af4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x29e>
	      if (_S_right(__before._M_node) == 0)
   10a6a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   10a71:	48 89 c7             	mov    %rax,%rdi
   10a74:	e8 86 fb ff ff       	call   105ff <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   10a79:	48 85 c0             	test   %rax,%rax
   10a7c:	0f 94 c0             	sete   %al
   10a7f:	84 c0                	test   %al,%al
   10a81:	74 3e                	je     10ac1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x26b>
		return _Res(0, __before._M_node);
   10a83:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   10a8a:	00 00 00 00 
   10a8e:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
   10a95:	48 8d 8d 68 ff ff ff 	lea    -0x98(%rbp),%rcx
   10a9c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   10aa3:	48 89 ce             	mov    %rcx,%rsi
   10aa6:	48 89 c7             	mov    %rax,%rdi
   10aa9:	e8 b2 09 00 00       	call   11460 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   10aae:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   10ab5:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
   10abc:	e9 dd 01 00 00       	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__pos._M_node, __pos._M_node);
   10ac1:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   10ac8:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   10acf:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   10ad6:	48 89 ce             	mov    %rcx,%rsi
   10ad9:	48 89 c7             	mov    %rax,%rdi
   10adc:	e8 37 0b 00 00       	call   11618 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
   10ae1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   10ae8:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   10aef:	e9 aa 01 00 00       	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   10af4:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   10afb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   10b02:	48 89 d6             	mov    %rdx,%rsi
   10b05:	48 89 c7             	mov    %rax,%rdi
   10b08:	e8 83 09 00 00       	call   11490 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   10b0d:	e9 8c 01 00 00       	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   10b12:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   10b19:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   10b20:	48 89 c7             	mov    %rax,%rdi
   10b23:	e8 1e 09 00 00       	call   11446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   10b28:	48 89 c1             	mov    %rax,%rcx
   10b2b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   10b32:	48 89 c2             	mov    %rax,%rdx
   10b35:	48 89 ce             	mov    %rcx,%rsi
   10b38:	48 89 df             	mov    %rbx,%rdi
   10b3b:	e8 a0 ef ff ff       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   10b40:	84 c0                	test   %al,%al
   10b42:	0f 84 2c 01 00 00    	je     10c74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x41e>
	  iterator __after = __pos;
   10b48:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   10b4f:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
	  if (__pos._M_node == _M_rightmost())
   10b56:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   10b5d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   10b64:	48 89 c7             	mov    %rax,%rdi
   10b67:	e8 c8 08 00 00       	call   11434 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   10b6c:	48 8b 00             	mov    (%rax),%rax
   10b6f:	48 39 c3             	cmp    %rax,%rbx
   10b72:	0f 94 c0             	sete   %al
   10b75:	84 c0                	test   %al,%al
   10b77:	74 3a                	je     10bb3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x35d>
	    return _Res(0, _M_rightmost());
   10b79:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   10b80:	48 89 c7             	mov    %rax,%rdi
   10b83:	e8 ac 08 00 00       	call   11434 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   10b88:	48 89 c2             	mov    %rax,%rdx
   10b8b:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
   10b92:	00 
   10b93:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
   10b97:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   10b9b:	48 89 ce             	mov    %rcx,%rsi
   10b9e:	48 89 c7             	mov    %rax,%rdi
   10ba1:	e8 ba 08 00 00       	call   11460 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   10ba6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   10baa:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   10bae:	e9 eb 00 00 00       	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   10bb3:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   10bba:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
   10bc1:	48 89 c7             	mov    %rax,%rdi
   10bc4:	e8 bb 0a 00 00       	call   11684 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>
   10bc9:	48 8b 00             	mov    (%rax),%rax
   10bcc:	48 89 c7             	mov    %rax,%rdi
   10bcf:	e8 72 08 00 00       	call   11446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   10bd4:	48 89 c2             	mov    %rax,%rdx
   10bd7:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   10bde:	48 89 c6             	mov    %rax,%rsi
   10be1:	48 89 df             	mov    %rbx,%rdi
   10be4:	e8 f7 ee ff ff       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   10be9:	84 c0                	test   %al,%al
   10beb:	74 6c                	je     10c59 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x403>
	      if (_S_right(__pos._M_node) == 0)
   10bed:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   10bf4:	48 89 c7             	mov    %rax,%rdi
   10bf7:	e8 03 fa ff ff       	call   105ff <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   10bfc:	48 85 c0             	test   %rax,%rax
   10bff:	0f 94 c0             	sete   %al
   10c02:	84 c0                	test   %al,%al
   10c04:	74 2c                	je     10c32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x3dc>
		return _Res(0, __pos._M_node);
   10c06:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   10c0d:	00 
   10c0e:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   10c15:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
   10c19:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   10c1d:	48 89 ce             	mov    %rcx,%rsi
   10c20:	48 89 c7             	mov    %rax,%rdi
   10c23:	e8 38 08 00 00       	call   11460 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   10c28:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   10c2c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   10c30:	eb 6c                	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__after._M_node, __after._M_node);
   10c32:	48 8d 95 08 ff ff ff 	lea    -0xf8(%rbp),%rdx
   10c39:	48 8d 8d 08 ff ff ff 	lea    -0xf8(%rbp),%rcx
   10c40:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   10c44:	48 89 ce             	mov    %rcx,%rsi
   10c47:	48 89 c7             	mov    %rax,%rdi
   10c4a:	e8 c9 09 00 00       	call   11618 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
   10c4f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   10c53:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   10c57:	eb 45                	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   10c59:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   10c60:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   10c67:	48 89 d6             	mov    %rdx,%rsi
   10c6a:	48 89 c7             	mov    %rax,%rdi
   10c6d:	e8 1e 08 00 00       	call   11490 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   10c72:	eb 2a                	jmp    10c9e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	return _Res(__pos._M_node, 0);
   10c74:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   10c7b:	00 
   10c7c:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   10c80:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   10c87:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   10c8b:	48 89 ce             	mov    %rcx,%rsi
   10c8e:	48 89 c7             	mov    %rax,%rdi
   10c91:	e8 ca 07 00 00       	call   11460 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   10c96:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   10c9a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   10c9e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   10ca2:	c9                   	leave
   10ca3:	c3                   	ret

0000000000010ca4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>:
	_M_key() const
   10ca4:	55                   	push   %rbp
   10ca5:	48 89 e5             	mov    %rsp,%rbp
   10ca8:	48 83 ec 10          	sub    $0x10,%rsp
   10cac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return _S_key(_M_node); }
   10cb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cb4:	48 8b 40 08          	mov    0x8(%rax),%rax
   10cb8:	48 89 c7             	mov    %rax,%rdi
   10cbb:	e8 ec 09 00 00       	call   116ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   10cc0:	c9                   	leave
   10cc1:	c3                   	ret

0000000000010cc2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
   10cc2:	55                   	push   %rbp
   10cc3:	48 89 e5             	mov    %rsp,%rbp
   10cc6:	48 83 ec 30          	sub    $0x30,%rsp
   10cca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   10cce:	48 89 d1             	mov    %rdx,%rcx
   10cd1:	48 89 f0             	mov    %rsi,%rax
   10cd4:	48 89 fa             	mov    %rdi,%rdx
   10cd7:	48 89 ca             	mov    %rcx,%rdx
   10cda:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   10cde:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
   10ce2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10ce6:	48 8b 00             	mov    (%rax),%rax
   10ce9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10ced:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
   10cf1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10cf5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   10cf9:	48 89 c7             	mov    %rax,%rdi
   10cfc:	e8 d7 09 00 00       	call   116d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
   10d01:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_node = nullptr;
   10d05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10d09:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   10d10:	00 
	  return __it;
   10d11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   10d15:	c9                   	leave
   10d16:	c3                   	ret
   10d17:	90                   	nop

0000000000010d18 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   10d18:	55                   	push   %rbp
   10d19:	48 89 e5             	mov    %rsp,%rbp
   10d1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10d20:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__x) { }
   10d24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d28:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   10d2c:	48 89 10             	mov    %rdx,(%rax)
   10d2f:	90                   	nop
   10d30:	5d                   	pop    %rbp
   10d31:	c3                   	ret

0000000000010d32 <_ZN9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   10d32:	55                   	push   %rbp
   10d33:	48 89 e5             	mov    %rsp,%rbp
   10d36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10d3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   10d3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10d42:	48 8b 10             	mov    (%rax),%rdx
   10d45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d49:	48 89 10             	mov    %rdx,(%rax)
   10d4c:	90                   	nop
   10d4d:	5d                   	pop    %rbp
   10d4e:	c3                   	ret
   10d4f:	90                   	nop

0000000000010d50 <_ZNK9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   10d50:	55                   	push   %rbp
   10d51:	48 89 e5             	mov    %rsp,%rbp
   10d54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   10d58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d5c:	5d                   	pop    %rbp
   10d5d:	c3                   	ret

0000000000010d5e <_ZNKSt12_Vector_baseIP9VkImage_TSaIS1_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
   10d5e:	55                   	push   %rbp
   10d5f:	48 89 e5             	mov    %rsp,%rbp
   10d62:	48 83 ec 10          	sub    $0x10,%rsp
   10d66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10d6a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return allocator_type(_M_get_Tp_allocator()); }
   10d6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10d72:	48 89 c7             	mov    %rax,%rdi
   10d75:	e8 22 0a 00 00       	call   1179c <_ZNKSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
   10d7a:	48 89 c2             	mov    %rax,%rdx
   10d7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d81:	48 89 d6             	mov    %rdx,%rsi
   10d84:	48 89 c7             	mov    %rax,%rdi
   10d87:	e8 1c 7a ff ff       	call   87a8 <_ZNSaIP9VkImage_TEC1ERKS1_>
   10d8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d90:	c9                   	leave
   10d91:	c3                   	ret

0000000000010d92 <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1ERKS2_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   10d92:	55                   	push   %rbp
   10d93:	48 89 e5             	mov    %rsp,%rbp
   10d96:	48 83 ec 10          	sub    $0x10,%rsp
   10d9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10d9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(__a) { }
   10da2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10da6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   10daa:	48 89 d6             	mov    %rdx,%rsi
   10dad:	48 89 c7             	mov    %rax,%rdi
   10db0:	e8 f5 09 00 00       	call   117aa <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1ERKS2_>
   10db5:	90                   	nop
   10db6:	c9                   	leave
   10db7:	c3                   	ret

0000000000010db8 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
   10db8:	55                   	push   %rbp
   10db9:	48 89 e5             	mov    %rsp,%rbp
   10dbc:	48 83 ec 30          	sub    $0x30,%rsp
   10dc0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   10dc4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	  _Vector_impl_data __tmp;
   10dc8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   10dcc:	48 89 c7             	mov    %rax,%rdi
   10dcf:	e8 56 8e ff ff       	call   9c2a <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
   10dd4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10dd8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   10ddc:	48 89 d6             	mov    %rdx,%rsi
   10ddf:	48 89 c7             	mov    %rax,%rdi
   10de2:	e8 e9 09 00 00       	call   117d0 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  _M_copy_data(__x);
   10de7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   10deb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10def:	48 89 d6             	mov    %rdx,%rsi
   10df2:	48 89 c7             	mov    %rax,%rdi
   10df5:	e8 d6 09 00 00       	call   117d0 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  __x._M_copy_data(__tmp);
   10dfa:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   10dfe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   10e02:	48 89 d6             	mov    %rdx,%rsi
   10e05:	48 89 c7             	mov    %rax,%rdi
   10e08:	e8 c3 09 00 00       	call   117d0 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	}
   10e0d:	90                   	nop
   10e0e:	c9                   	leave
   10e0f:	c3                   	ret

0000000000010e10 <_ZSt15__alloc_on_moveISaIP9VkImage_TEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
   10e10:	55                   	push   %rbp
   10e11:	48 89 e5             	mov    %rsp,%rbp
   10e14:	48 83 ec 10          	sub    $0x10,%rsp
   10e18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10e1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__one = std::move(__two);
   10e20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10e24:	48 89 c7             	mov    %rax,%rdi
   10e27:	e8 e1 09 00 00       	call   1180d <_ZSt4moveIRSaIP9VkImage_TEEONSt16remove_referenceIT_E4typeEOS5_>
    }
   10e2c:	90                   	nop
   10e2d:	c9                   	leave
   10e2e:	c3                   	ret
   10e2f:	90                   	nop

0000000000010e30 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   10e30:	55                   	push   %rbp
   10e31:	48 89 e5             	mov    %rsp,%rbp
   10e34:	48 83 ec 10          	sub    $0x10,%rsp
   10e38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   10e3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e40:	48 89 c7             	mov    %rax,%rdi
   10e43:	e8 16 0a 00 00       	call   1185e <_ZNKSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   10e48:	48 89 c7             	mov    %rax,%rdi
   10e4b:	e8 cb 09 00 00       	call   1181b <_ZNSt6vectorIP13VkImageView_TSaIS1_EE11_S_max_sizeERKS2_>
   10e50:	c9                   	leave
   10e51:	c3                   	ret

0000000000010e52 <_ZSt27__uninitialized_default_n_aIPP13VkImageView_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   10e52:	55                   	push   %rbp
   10e53:	48 89 e5             	mov    %rsp,%rbp
   10e56:	48 83 ec 20          	sub    $0x20,%rsp
   10e5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10e5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10e62:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   10e66:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   10e6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e6e:	48 89 d6             	mov    %rdx,%rsi
   10e71:	48 89 c7             	mov    %rax,%rdi
   10e74:	e8 f3 09 00 00       	call   1186c <_ZSt25__uninitialized_default_nIPP13VkImageView_TmET_S3_T0_>
   10e79:	c9                   	leave
   10e7a:	c3                   	ret
   10e7b:	90                   	nop

0000000000010e7c <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   10e7c:	55                   	push   %rbp
   10e7d:	48 89 e5             	mov    %rsp,%rbp
   10e80:	53                   	push   %rbx
   10e81:	48 83 ec 38          	sub    $0x38,%rsp
   10e85:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   10e89:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   10e8d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   10e91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10e95:	48 89 c7             	mov    %rax,%rdi
   10e98:	e8 93 ff ff ff       	call   10e30 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
   10e9d:	48 89 c3             	mov    %rax,%rbx
   10ea0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10ea4:	48 89 c7             	mov    %rax,%rdi
   10ea7:	e8 3e ef ff ff       	call   fdea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   10eac:	48 29 c3             	sub    %rax,%rbx
   10eaf:	48 89 da             	mov    %rbx,%rdx
   10eb2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   10eb6:	48 39 c2             	cmp    %rax,%rdx
   10eb9:	0f 92 c0             	setb   %al
   10ebc:	84 c0                	test   %al,%al
   10ebe:	74 0c                	je     10ecc <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   10ec0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   10ec4:	48 89 c7             	mov    %rax,%rdi
   10ec7:	e8 94 22 ff ff       	call   3160 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   10ecc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10ed0:	48 89 c7             	mov    %rax,%rdi
   10ed3:	e8 12 ef ff ff       	call   fdea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   10ed8:	48 89 c3             	mov    %rax,%rbx
   10edb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10edf:	48 89 c7             	mov    %rax,%rdi
   10ee2:	e8 03 ef ff ff       	call   fdea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   10ee7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   10eeb:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   10eef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   10ef3:	48 89 d6             	mov    %rdx,%rsi
   10ef6:	48 89 c7             	mov    %rax,%rdi
   10ef9:	e8 52 01 00 00       	call   11050 <_ZSt3maxImERKT_S2_S2_>
   10efe:	48 8b 00             	mov    (%rax),%rax
   10f01:	48 01 d8             	add    %rbx,%rax
   10f04:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   10f08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10f0c:	48 89 c7             	mov    %rax,%rdi
   10f0f:	e8 d6 ee ff ff       	call   fdea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   10f14:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   10f18:	72 12                	jb     10f2c <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   10f1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10f1e:	48 89 c7             	mov    %rax,%rdi
   10f21:	e8 0a ff ff ff       	call   10e30 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
   10f26:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   10f2a:	73 0e                	jae    10f3a <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   10f2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10f30:	48 89 c7             	mov    %rax,%rdi
   10f33:	e8 f8 fe ff ff       	call   10e30 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
   10f38:	eb 04                	jmp    10f3e <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   10f3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   10f3e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   10f42:	c9                   	leave
   10f43:	c3                   	ret

0000000000010f44 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   10f44:	55                   	push   %rbp
   10f45:	48 89 e5             	mov    %rsp,%rbp
   10f48:	48 83 ec 10          	sub    $0x10,%rsp
   10f4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10f50:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   10f54:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   10f59:	74 15                	je     10f70 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE11_M_allocateEm+0x2c>
   10f5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f5f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   10f63:	48 89 d6             	mov    %rdx,%rsi
   10f66:	48 89 c7             	mov    %rax,%rdi
   10f69:	e8 27 09 00 00       	call   11895 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE8allocateERS2_m>
   10f6e:	eb 05                	jmp    10f75 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE11_M_allocateEm+0x31>
   10f70:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   10f75:	c9                   	leave
   10f76:	c3                   	ret

0000000000010f77 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   10f77:	55                   	push   %rbp
   10f78:	48 89 e5             	mov    %rsp,%rbp
   10f7b:	48 83 ec 20          	sub    $0x20,%rsp
   10f7f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10f83:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10f87:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   10f8b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   10f8f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   10f93:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10f97:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   10f9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f9f:	48 89 c7             	mov    %rax,%rdi
   10fa2:	e8 18 09 00 00       	call   118bf <_ZSt12__relocate_aIPP13VkImageView_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   10fa7:	c9                   	leave
   10fa8:	c3                   	ret
   10fa9:	90                   	nop

0000000000010faa <_ZNSt15__new_allocatorIP13VkImageView_TEC1Ev>:
   10faa:	55                   	push   %rbp
   10fab:	48 89 e5             	mov    %rsp,%rbp
   10fae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10fb2:	90                   	nop
   10fb3:	5d                   	pop    %rbp
   10fb4:	c3                   	ret

0000000000010fb5 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   10fb5:	55                   	push   %rbp
   10fb6:	48 89 e5             	mov    %rsp,%rbp
   10fb9:	48 83 ec 20          	sub    $0x20,%rsp
   10fbd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10fc1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10fc5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   10fc9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10fcd:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   10fd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fd5:	48 89 ce             	mov    %rcx,%rsi
   10fd8:	48 89 c7             	mov    %rax,%rdi
   10fdb:	e8 42 09 00 00       	call   11922 <_ZNSt15__new_allocatorIP13VkImageView_TE10deallocateEPS1_m>
   10fe0:	90                   	nop
   10fe1:	c9                   	leave
   10fe2:	c3                   	ret

0000000000010fe3 <_ZSt8_DestroyIPP13VkImageView_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   10fe3:	55                   	push   %rbp
   10fe4:	48 89 e5             	mov    %rsp,%rbp
   10fe7:	48 83 ec 10          	sub    $0x10,%rsp
   10feb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10fef:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   10ff3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   10ff7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ffb:	48 89 d6             	mov    %rdx,%rsi
   10ffe:	48 89 c7             	mov    %rax,%rdi
   11001:	e8 4d 09 00 00       	call   11953 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13VkImageView_TEEvT_S5_>
    }
   11006:	90                   	nop
   11007:	c9                   	leave
   11008:	c3                   	ret
   11009:	90                   	nop

000000000001100a <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000EEEC1IlvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
   1100a:	55                   	push   %rbp
   1100b:	48 89 e5             	mov    %rsp,%rbp
   1100e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11012:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  : __r(static_cast<rep>(__rep)) { }
   11016:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1101a:	48 8b 10             	mov    (%rax),%rdx
   1101d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11021:	48 89 10             	mov    %rdx,(%rax)
   11024:	90                   	nop
   11025:	5d                   	pop    %rbp
   11026:	c3                   	ret

0000000000011027 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
   11027:	55                   	push   %rbp
   11028:	48 89 e5             	mov    %rsp,%rbp
   1102b:	48 83 ec 10          	sub    $0x10,%rsp
   1102f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11033:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __rhs; }
   11037:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1103b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1103f:	48 89 d6             	mov    %rdx,%rsi
   11042:	48 89 c7             	mov    %rax,%rdi
   11045:	e8 36 21 ff ff       	call   3180 <_ZNSaIcEC1ERKS_@plt>
   1104a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1104e:	c9                   	leave
   1104f:	c3                   	ret

0000000000011050 <_ZSt3maxImERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
   11050:	55                   	push   %rbp
   11051:	48 89 e5             	mov    %rsp,%rbp
   11054:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11058:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__a < __b)
   1105c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11060:	48 8b 10             	mov    (%rax),%rdx
   11063:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11067:	48 8b 00             	mov    (%rax),%rax
   1106a:	48 39 c2             	cmp    %rax,%rdx
   1106d:	73 06                	jae    11075 <_ZSt3maxImERKT_S2_S2_+0x25>
	return __b;
   1106f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11073:	eb 04                	jmp    11079 <_ZSt3maxImERKT_S2_S2_+0x29>
      return __a;
   11075:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   11079:	5d                   	pop    %rbp
   1107a:	c3                   	ret

000000000001107b <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   1107b:	55                   	push   %rbp
   1107c:	48 89 e5             	mov    %rsp,%rbp
   1107f:	48 83 ec 30          	sub    $0x30,%rsp
   11083:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11087:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1108b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   1108f:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
   11093:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   11097:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1109b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1109f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   110a3:	48 89 ce             	mov    %rcx,%rsi
   110a6:	48 89 c7             	mov    %rax,%rdi
   110a9:	e8 b4 08 00 00       	call   11962 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>
    }
   110ae:	c9                   	leave
   110af:	c3                   	ret

00000000000110b0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   110b0:	55                   	push   %rbp
   110b1:	48 89 e5             	mov    %rsp,%rbp
   110b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   110b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   110bc:	90                   	nop
   110bd:	5d                   	pop    %rbp
   110be:	c3                   	ret
   110bf:	90                   	nop

00000000000110c0 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   110c0:	55                   	push   %rbp
   110c1:	48 89 e5             	mov    %rsp,%rbp
   110c4:	48 83 ec 10          	sub    $0x10,%rsp
   110c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   110cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110d0:	48 89 c7             	mov    %rax,%rdi
   110d3:	e8 b8 08 00 00       	call   11990 <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   110d8:	48 89 c7             	mov    %rax,%rdi
   110db:	e8 e7 79 ff ff       	call   8ac7 <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
   110e0:	c9                   	leave
   110e1:	c3                   	ret

00000000000110e2 <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
   110e2:	55                   	push   %rbp
   110e3:	48 89 e5             	mov    %rsp,%rbp
   110e6:	41 54                	push   %r12
   110e8:	53                   	push   %rbx
   110e9:	48 83 ec 20          	sub    $0x20,%rsp
   110ed:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   110f1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   110f5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   110f9:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
   110fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11101:	48 89 c7             	mov    %rax,%rdi
   11104:	e8 95 08 00 00       	call   1199e <_ZSt12__niter_baseIPPKcET_S3_>
   11109:	49 89 c4             	mov    %rax,%r12
   1110c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11110:	48 89 c7             	mov    %rax,%rdi
   11113:	e8 86 08 00 00       	call   1199e <_ZSt12__niter_baseIPPKcET_S3_>
   11118:	48 89 c3             	mov    %rax,%rbx
   1111b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1111f:	48 89 c7             	mov    %rax,%rdi
   11122:	e8 77 08 00 00       	call   1199e <_ZSt12__niter_baseIPPKcET_S3_>
   11127:	48 89 c7             	mov    %rax,%rdi
   1112a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1112e:	48 89 c1             	mov    %rax,%rcx
   11131:	4c 89 e2             	mov    %r12,%rdx
   11134:	48 89 de             	mov    %rbx,%rsi
   11137:	e8 70 08 00 00       	call   119ac <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
   1113c:	48 83 c4 20          	add    $0x20,%rsp
   11140:	5b                   	pop    %rbx
   11141:	41 5c                	pop    %r12
   11143:	5d                   	pop    %rbp
   11144:	c3                   	ret
   11145:	90                   	nop

0000000000011146 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_StorageIS2_Lb1EEC1IJS2_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
   11146:	55                   	push   %rbp
   11147:	48 89 e5             	mov    %rsp,%rbp
   1114a:	48 83 ec 10          	sub    $0x10,%rsp
   1114e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11152:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    : _M_value(std::forward<_Args>(__args)...)
   11156:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1115a:	48 89 c7             	mov    %rax,%rdi
   1115d:	e8 ce e6 ff ff       	call   f830 <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>
   11162:	48 89 c1             	mov    %rax,%rcx
   11165:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   11169:	48 8b 01             	mov    (%rcx),%rax
   1116c:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   11170:	48 89 06             	mov    %rax,(%rsi)
   11173:	48 89 56 08          	mov    %rdx,0x8(%rsi)
   11177:	48 8b 41 0c          	mov    0xc(%rcx),%rax
   1117b:	48 8b 51 14          	mov    0x14(%rcx),%rdx
   1117f:	48 89 46 0c          	mov    %rax,0xc(%rsi)
   11183:	48 89 56 14          	mov    %rdx,0x14(%rsi)
	    { }
   11187:	90                   	nop
   11188:	c9                   	leave
   11189:	c3                   	ret

000000000001118a <_ZSt11__addressofISt4pairIj23VkQueueFamilyPropertiesEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1118a:	55                   	push   %rbp
   1118b:	48 89 e5             	mov    %rsp,%rbp
   1118e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   11192:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11196:	5d                   	pop    %rbp
   11197:	c3                   	ret

0000000000011198 <_ZSt7forwardIRKSt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   11198:	55                   	push   %rbp
   11199:	48 89 e5             	mov    %rsp,%rbp
   1119c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   111a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111a4:	5d                   	pop    %rbp
   111a5:	c3                   	ret

00000000000111a6 <_ZSt10_ConstructISt4pairIj23VkQueueFamilyPropertiesEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   111a6:	55                   	push   %rbp
   111a7:	48 89 e5             	mov    %rsp,%rbp
   111aa:	53                   	push   %rbx
   111ab:	48 83 ec 18          	sub    $0x18,%rsp
   111af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   111b3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   111b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   111bb:	48 89 c6             	mov    %rax,%rsi
   111be:	bf 1c 00 00 00       	mov    $0x1c,%edi
   111c3:	e8 98 2b ff ff       	call   3d60 <_ZnwmPv>
   111c8:	48 89 c3             	mov    %rax,%rbx
   111cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   111cf:	48 89 c7             	mov    %rax,%rdi
   111d2:	e8 c1 ff ff ff       	call   11198 <_ZSt7forwardIRKSt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS5_E4typeE>
   111d7:	48 89 c1             	mov    %rax,%rcx
   111da:	48 8b 01             	mov    (%rcx),%rax
   111dd:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   111e1:	48 89 03             	mov    %rax,(%rbx)
   111e4:	48 89 53 08          	mov    %rdx,0x8(%rbx)
   111e8:	48 8b 41 0c          	mov    0xc(%rcx),%rax
   111ec:	48 8b 51 14          	mov    0x14(%rcx),%rdx
   111f0:	48 89 43 0c          	mov    %rax,0xc(%rbx)
   111f4:	48 89 53 14          	mov    %rdx,0x14(%rbx)
    }
   111f8:	90                   	nop
   111f9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   111fd:	c9                   	leave
   111fe:	c3                   	ret
   111ff:	90                   	nop

0000000000011200 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE10_M_destroyEv>:
      _M_destroy() noexcept
   11200:	55                   	push   %rbp
   11201:	48 89 e5             	mov    %rsp,%rbp
   11204:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_engaged = false;
   11208:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1120c:	c6 40 1c 00          	movb   $0x0,0x1c(%rax)
      }
   11210:	90                   	nop
   11211:	5d                   	pop    %rbp
   11212:	c3                   	ret
   11213:	90                   	nop

0000000000011214 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   11214:	55                   	push   %rbp
   11215:	48 89 e5             	mov    %rsp,%rbp
   11218:	53                   	push   %rbx
   11219:	48 83 ec 18          	sub    $0x18,%rsp
   1121d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11221:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
   11225:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11229:	48 89 c7             	mov    %rax,%rdi
   1122c:	e8 c1 f4 ff ff       	call   106f2 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   11231:	48 89 c3             	mov    %rax,%rbx
   11234:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11238:	48 89 c7             	mov    %rax,%rdi
   1123b:	e8 d0 07 00 00       	call   11a10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   11240:	48 89 de             	mov    %rbx,%rsi
   11243:	48 89 c7             	mov    %rax,%rdi
   11246:	e8 d3 07 00 00       	call   11a1e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>
      }
   1124b:	90                   	nop
   1124c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   11250:	c9                   	leave
   11251:	c3                   	ret

0000000000011252 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   11252:	55                   	push   %rbp
   11253:	48 89 e5             	mov    %rsp,%rbp
   11256:	48 83 ec 10          	sub    $0x10,%rsp
   1125a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1125e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
   11262:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11266:	48 89 c7             	mov    %rax,%rdi
   11269:	e8 a2 07 00 00       	call   11a10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1126e:	48 89 c1             	mov    %rax,%rcx
   11271:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11275:	ba 01 00 00 00       	mov    $0x1,%edx
   1127a:	48 89 c6             	mov    %rax,%rsi
   1127d:	48 89 cf             	mov    %rcx,%rdi
   11280:	e8 bf 07 00 00       	call   11a44 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>
   11285:	90                   	nop
   11286:	c9                   	leave
   11287:	c3                   	ret

0000000000011288 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
   11288:	55                   	push   %rbp
   11289:	48 89 e5             	mov    %rsp,%rbp
   1128c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return &this->_M_impl._M_header; }
   11290:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11294:	48 83 c0 08          	add    $0x8,%rax
   11298:	5d                   	pop    %rbp
   11299:	c3                   	ret

000000000001129a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1129a:	55                   	push   %rbp
   1129b:	48 89 e5             	mov    %rsp,%rbp
   1129e:	53                   	push   %rbx
   1129f:	48 83 ec 38          	sub    $0x38,%rsp
   112a3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   112a7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   112ab:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   112af:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      while (__x != 0)
   112b3:	eb 56                	jmp    1130b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   112b5:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   112b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   112bd:	48 89 c7             	mov    %rax,%rdi
   112c0:	e8 e7 03 00 00       	call   116ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   112c5:	48 89 c1             	mov    %rax,%rcx
   112c8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   112cc:	48 89 c2             	mov    %rax,%rdx
   112cf:	48 89 ce             	mov    %rcx,%rsi
   112d2:	48 89 df             	mov    %rbx,%rdi
   112d5:	e8 06 e8 ff ff       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   112da:	83 f0 01             	xor    $0x1,%eax
   112dd:	84 c0                	test   %al,%al
   112df:	74 1a                	je     112fb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x61>
	  __y = __x, __x = _S_left(__x);
   112e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   112e5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   112e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   112ed:	48 89 c7             	mov    %rax,%rdi
   112f0:	e8 1c f3 ff ff       	call   10611 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   112f5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   112f9:	eb 10                	jmp    1130b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	  __x = _S_right(__x);
   112fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   112ff:	48 89 c7             	mov    %rax,%rdi
   11302:	e8 f8 f2 ff ff       	call   105ff <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   11307:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      while (__x != 0)
   1130b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   11310:	75 a3                	jne    112b5 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x1b>
      return iterator(__y);
   11312:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   11316:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1131a:	48 89 d6             	mov    %rdx,%rsi
   1131d:	48 89 c7             	mov    %rax,%rdi
   11320:	e8 f3 f9 ff ff       	call   10d18 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   11325:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   11329:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1132d:	c9                   	leave
   1132e:	c3                   	ret
   1132f:	90                   	nop

0000000000011330 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
   11330:	55                   	push   %rbp
   11331:	48 89 e5             	mov    %rsp,%rbp
   11334:	48 83 ec 10          	sub    $0x10,%rsp
   11338:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
   1133c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11340:	48 89 c7             	mov    %rax,%rdi
   11343:	e8 2a 07 00 00       	call   11a72 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   11348:	c9                   	leave
   11349:	c3                   	ret

000000000001134a <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>:
	_Tuple_impl(_UHead&& __head)
   1134a:	55                   	push   %rbp
   1134b:	48 89 e5             	mov    %rsp,%rbp
   1134e:	53                   	push   %rbx
   1134f:	48 83 ec 18          	sub    $0x18,%rsp
   11353:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11357:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::forward<_UHead>(__head))
   1135b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1135f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11363:	48 89 c7             	mov    %rax,%rdi
   11366:	e8 cd f3 ff ff       	call   10738 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1136b:	48 89 c6             	mov    %rax,%rsi
   1136e:	48 89 df             	mov    %rbx,%rdi
   11371:	e8 0a 07 00 00       	call   11a80 <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>
	{ }
   11376:	90                   	nop
   11377:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1137b:	c9                   	leave
   1137c:	c3                   	ret
   1137d:	90                   	nop

000000000001137e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
   1137e:	55                   	push   %rbp
   1137f:	48 89 e5             	mov    %rsp,%rbp
   11382:	41 54                	push   %r12
   11384:	53                   	push   %rbx
   11385:	48 83 ec 30          	sub    $0x30,%rsp
   11389:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1138d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   11391:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   11395:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	  _Link_type __tmp = _M_get_node();
   11399:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1139d:	48 89 c7             	mov    %rax,%rdi
   113a0:	e8 01 07 00 00       	call   11aa6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>
   113a5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   113a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   113ad:	48 89 c7             	mov    %rax,%rdi
   113b0:	e8 e0 f3 ff ff       	call   10795 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   113b5:	49 89 c4             	mov    %rax,%r12
   113b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   113bc:	48 89 c7             	mov    %rax,%rdi
   113bf:	e8 c3 f3 ff ff       	call   10787 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   113c4:	48 89 c3             	mov    %rax,%rbx
   113c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   113cb:	48 89 c7             	mov    %rax,%rdi
   113ce:	e8 a6 f3 ff ff       	call   10779 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   113d3:	48 89 c2             	mov    %rax,%rdx
   113d6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   113da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   113de:	4d 89 e0             	mov    %r12,%r8
   113e1:	48 89 d9             	mov    %rbx,%rcx
   113e4:	48 89 c7             	mov    %rax,%rdi
   113e7:	e8 e2 06 00 00       	call   11ace <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
   113ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   113f0:	48 83 c4 30          	add    $0x30,%rsp
   113f4:	5b                   	pop    %rbx
   113f5:	41 5c                	pop    %r12
   113f7:	5d                   	pop    %rbp
   113f8:	c3                   	ret
   113f9:	90                   	nop

00000000000113fa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
   113fa:	55                   	push   %rbp
   113fb:	48 89 e5             	mov    %rsp,%rbp
   113fe:	48 83 ec 20          	sub    $0x20,%rsp
   11402:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
   11406:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1140a:	48 8b 10             	mov    (%rax),%rdx
   1140d:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   11411:	48 89 d6             	mov    %rdx,%rsi
   11414:	48 89 c7             	mov    %rax,%rdi
   11417:	e8 fc f8 ff ff       	call   10d18 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1141c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11420:	c9                   	leave
   11421:	c3                   	ret

0000000000011422 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   11422:	55                   	push   %rbp
   11423:	48 89 e5             	mov    %rsp,%rbp
   11426:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_node_count; }
   1142a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1142e:	48 8b 40 28          	mov    0x28(%rax),%rax
   11432:	5d                   	pop    %rbp
   11433:	c3                   	ret

0000000000011434 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
   11434:	55                   	push   %rbp
   11435:	48 89 e5             	mov    %rsp,%rbp
   11438:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_right; }
   1143c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11440:	48 83 c0 20          	add    $0x20,%rax
   11444:	5d                   	pop    %rbp
   11445:	c3                   	ret

0000000000011446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
   11446:	55                   	push   %rbp
   11447:	48 89 e5             	mov    %rsp,%rbp
   1144a:	48 83 ec 10          	sub    $0x10,%rsp
   1144e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
   11452:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11456:	48 89 c7             	mov    %rax,%rdi
   11459:	e8 4e 02 00 00       	call   116ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1145e:	c9                   	leave
   1145f:	c3                   	ret

0000000000011460 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
   11460:	55                   	push   %rbp
   11461:	48 89 e5             	mov    %rsp,%rbp
   11464:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11468:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1146c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      : first(__a), second(__b) { }
   11470:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11474:	48 8b 10             	mov    (%rax),%rdx
   11477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1147b:	48 89 10             	mov    %rdx,(%rax)
   1147e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11482:	48 8b 10             	mov    (%rax),%rdx
   11485:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11489:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1148d:	90                   	nop
   1148e:	5d                   	pop    %rbp
   1148f:	c3                   	ret

0000000000011490 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   11490:	55                   	push   %rbp
   11491:	48 89 e5             	mov    %rsp,%rbp
   11494:	53                   	push   %rbx
   11495:	48 83 ec 78          	sub    $0x78,%rsp
   11499:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   1149d:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
      _Link_type __x = _M_begin();
   114a1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   114a5:	48 89 c7             	mov    %rax,%rdi
   114a8:	e8 51 e5 ff ff       	call   f9fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   114ad:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      _Base_ptr __y = _M_end();
   114b1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   114b5:	48 89 c7             	mov    %rax,%rdi
   114b8:	e8 cb fd ff ff       	call   11288 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   114bd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      bool __comp = true;
   114c1:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
      while (__x != 0)
   114c5:	eb 51                	jmp    11518 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x88>
	  __y = __x;
   114c7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   114cb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   114cf:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   114d3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   114d7:	48 89 c7             	mov    %rax,%rdi
   114da:	e8 cd 01 00 00       	call   116ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   114df:	48 89 c2             	mov    %rax,%rdx
   114e2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   114e6:	48 89 c6             	mov    %rax,%rsi
   114e9:	48 89 df             	mov    %rbx,%rdi
   114ec:	e8 ef e5 ff ff       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   114f1:	88 45 ef             	mov    %al,-0x11(%rbp)
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   114f4:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   114f8:	74 0e                	je     11508 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x78>
   114fa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   114fe:	48 89 c7             	mov    %rax,%rdi
   11501:	e8 0b f1 ff ff       	call   10611 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   11506:	eb 0c                	jmp    11514 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x84>
   11508:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1150c:	48 89 c7             	mov    %rax,%rdi
   1150f:	e8 eb f0 ff ff       	call   105ff <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   11514:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      while (__x != 0)
   11518:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1151c:	48 85 c0             	test   %rax,%rax
   1151f:	75 a6                	jne    114c7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x37>
      iterator __j = iterator(__y);
   11521:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   11525:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   11529:	48 89 d6             	mov    %rdx,%rsi
   1152c:	48 89 c7             	mov    %rax,%rdi
   1152f:	e8 e4 f7 ff ff       	call   10d18 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
   11534:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   11538:	74 54                	je     1158e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xfe>
	  if (__j == begin())
   1153a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1153e:	48 89 c7             	mov    %rax,%rdi
   11541:	e8 5a 06 00 00       	call   11ba0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>
   11546:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1154a:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
   1154e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   11552:	48 89 d6             	mov    %rdx,%rsi
   11555:	48 89 c7             	mov    %rax,%rdi
   11558:	e8 27 e5 ff ff       	call   fa84 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
   1155d:	84 c0                	test   %al,%al
   1155f:	74 21                	je     11582 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf2>
	    return _Res(__x, __y);
   11561:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   11565:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   11569:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1156d:	48 89 ce             	mov    %rcx,%rsi
   11570:	48 89 c7             	mov    %rax,%rdi
   11573:	e8 52 06 00 00       	call   11bca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_Lb1EEEOT_OT0_>
   11578:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1157c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   11580:	eb 7d                	jmp    115ff <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
	    --__j;
   11582:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   11586:	48 89 c7             	mov    %rax,%rdi
   11589:	e8 ce 00 00 00       	call   1165c <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1158e:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   11592:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   11596:	48 89 c7             	mov    %rax,%rdi
   11599:	e8 a8 fe ff ff       	call   11446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1159e:	48 89 c1             	mov    %rax,%rcx
   115a1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   115a5:	48 89 c2             	mov    %rax,%rdx
   115a8:	48 89 ce             	mov    %rcx,%rsi
   115ab:	48 89 df             	mov    %rbx,%rdi
   115ae:	e8 2d e5 ff ff       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   115b3:	84 c0                	test   %al,%al
   115b5:	74 21                	je     115d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x148>
	return _Res(__x, __y);
   115b7:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   115bb:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   115bf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   115c3:	48 89 ce             	mov    %rcx,%rsi
   115c6:	48 89 c7             	mov    %rax,%rdi
   115c9:	e8 fc 05 00 00       	call   11bca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_Lb1EEEOT_OT0_>
   115ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   115d2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   115d6:	eb 27                	jmp    115ff <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
      return _Res(__j._M_node, 0);
   115d8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   115df:	00 
   115e0:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   115e4:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
   115e8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   115ec:	48 89 ce             	mov    %rcx,%rsi
   115ef:	48 89 c7             	mov    %rax,%rdi
   115f2:	e8 69 fe ff ff       	call   11460 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   115f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   115fb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   115ff:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   11603:	c9                   	leave
   11604:	c3                   	ret
   11605:	90                   	nop

0000000000011606 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
   11606:	55                   	push   %rbp
   11607:	48 89 e5             	mov    %rsp,%rbp
   1160a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_left; }
   1160e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11612:	48 83 c0 18          	add    $0x18,%rax
   11616:	5d                   	pop    %rbp
   11617:	c3                   	ret

0000000000011618 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
   11618:	55                   	push   %rbp
   11619:	48 89 e5             	mov    %rsp,%rbp
   1161c:	48 83 ec 20          	sub    $0x20,%rsp
   11620:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11624:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11628:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   1162c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11630:	48 89 c7             	mov    %rax,%rdi
   11633:	e8 d6 05 00 00       	call   11c0e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   11638:	48 8b 10             	mov    (%rax),%rdx
   1163b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1163f:	48 89 10             	mov    %rdx,(%rax)
   11642:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11646:	48 89 c7             	mov    %rax,%rdi
   11649:	e8 c0 05 00 00       	call   11c0e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1164e:	48 8b 10             	mov    (%rax),%rdx
   11651:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11655:	48 89 50 08          	mov    %rdx,0x8(%rax)
   11659:	90                   	nop
   1165a:	c9                   	leave
   1165b:	c3                   	ret

000000000001165c <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
   1165c:	55                   	push   %rbp
   1165d:	48 89 e5             	mov    %rsp,%rbp
   11660:	48 83 ec 10          	sub    $0x10,%rsp
   11664:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_decrement(_M_node);
   11668:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1166c:	48 8b 00             	mov    (%rax),%rax
   1166f:	48 89 c7             	mov    %rax,%rdi
   11672:	e8 e9 1c ff ff       	call   3360 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>
   11677:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1167b:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   1167e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   11682:	c9                   	leave
   11683:	c3                   	ret

0000000000011684 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   11684:	55                   	push   %rbp
   11685:	48 89 e5             	mov    %rsp,%rbp
   11688:	48 83 ec 10          	sub    $0x10,%rsp
   1168c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_increment(_M_node);
   11690:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11694:	48 8b 00             	mov    (%rax),%rax
   11697:	48 89 c7             	mov    %rax,%rdi
   1169a:	e8 31 1b ff ff       	call   31d0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>
   1169f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   116a3:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   116a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   116aa:	c9                   	leave
   116ab:	c3                   	ret

00000000000116ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
   116ac:	55                   	push   %rbp
   116ad:	48 89 e5             	mov    %rsp,%rbp
   116b0:	48 83 ec 20          	sub    $0x20,%rsp
   116b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return _KeyOfValue()(*__x->_M_valptr());
   116b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   116bc:	48 89 c7             	mov    %rax,%rdi
   116bf:	e8 58 05 00 00       	call   11c1c <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   116c4:	48 89 c2             	mov    %rax,%rdx
   116c7:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   116cb:	48 89 d6             	mov    %rdx,%rsi
   116ce:	48 89 c7             	mov    %rax,%rdi
   116d1:	e8 64 05 00 00       	call   11c3a <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>
      }
   116d6:	c9                   	leave
   116d7:	c3                   	ret

00000000000116d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   116d8:	55                   	push   %rbp
   116d9:	48 89 e5             	mov    %rsp,%rbp
   116dc:	41 54                	push   %r12
   116de:	53                   	push   %rbx
   116df:	48 83 ec 30          	sub    $0x30,%rsp
   116e3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   116e7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   116eb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   116ef:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
			    || _M_impl._M_key_compare(_S_key(__z),
   116f3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   116f8:	75 43                	jne    1173d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
      bool __insert_left = (__x != 0 || __p == _M_end()
   116fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   116fe:	48 89 c7             	mov    %rax,%rdi
   11701:	e8 82 fb ff ff       	call   11288 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   11706:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
   1170a:	74 31                	je     1173d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
			    || _M_impl._M_key_compare(_S_key(__z),
   1170c:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   11710:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   11714:	48 89 c7             	mov    %rax,%rdi
   11717:	e8 2a fd ff ff       	call   11446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1171c:	49 89 c4             	mov    %rax,%r12
   1171f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   11723:	48 89 c7             	mov    %rax,%rdi
   11726:	e8 81 ff ff ff       	call   116ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1172b:	4c 89 e2             	mov    %r12,%rdx
   1172e:	48 89 c6             	mov    %rax,%rsi
   11731:	48 89 df             	mov    %rbx,%rdi
   11734:	e8 a7 e3 ff ff       	call   fae0 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   11739:	84 c0                	test   %al,%al
   1173b:	74 07                	je     11744 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x6c>
   1173d:	b8 01 00 00 00       	mov    $0x1,%eax
   11742:	eb 05                	jmp    11749 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x71>
   11744:	b8 00 00 00 00       	mov    $0x0,%eax
      bool __insert_left = (__x != 0 || __p == _M_end()
   11749:	88 45 ef             	mov    %al,-0x11(%rbp)
				    this->_M_impl._M_header);
   1174c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11750:	48 8d 48 08          	lea    0x8(%rax),%rcx
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   11754:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
   11758:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1175c:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   11760:	89 c7                	mov    %eax,%edi
   11762:	e8 e9 18 ff ff       	call   3050 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>
      ++_M_impl._M_node_count;
   11767:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1176b:	48 8b 40 28          	mov    0x28(%rax),%rax
   1176f:	48 8d 50 01          	lea    0x1(%rax),%rdx
   11773:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11777:	48 89 50 28          	mov    %rdx,0x28(%rax)
      return iterator(__z);
   1177b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1177f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   11783:	48 89 d6             	mov    %rdx,%rsi
   11786:	48 89 c7             	mov    %rax,%rdi
   11789:	e8 8a f5 ff ff       	call   10d18 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1178e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
   11792:	48 83 c4 30          	add    $0x30,%rsp
   11796:	5b                   	pop    %rbx
   11797:	41 5c                	pop    %r12
   11799:	5d                   	pop    %rbp
   1179a:	c3                   	ret
   1179b:	90                   	nop

000000000001179c <_ZNKSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1179c:	55                   	push   %rbp
   1179d:	48 89 e5             	mov    %rsp,%rbp
   117a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   117a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117a8:	5d                   	pop    %rbp
   117a9:	c3                   	ret

00000000000117aa <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   117aa:	55                   	push   %rbp
   117ab:	48 89 e5             	mov    %rsp,%rbp
   117ae:	48 83 ec 10          	sub    $0x10,%rsp
   117b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   117b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   117ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117be:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   117c2:	48 89 d6             	mov    %rdx,%rsi
   117c5:	48 89 c7             	mov    %rax,%rdi
   117c8:	e8 8f 7b ff ff       	call   935c <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1ERKS2_>
   117cd:	90                   	nop
   117ce:	c9                   	leave
   117cf:	c3                   	ret

00000000000117d0 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
   117d0:	55                   	push   %rbp
   117d1:	48 89 e5             	mov    %rsp,%rbp
   117d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   117d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  _M_start = __x._M_start;
   117dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   117e0:	48 8b 10             	mov    (%rax),%rdx
   117e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117e7:	48 89 10             	mov    %rdx,(%rax)
	  _M_finish = __x._M_finish;
   117ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   117ee:	48 8b 50 08          	mov    0x8(%rax),%rdx
   117f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117f6:	48 89 50 08          	mov    %rdx,0x8(%rax)
	  _M_end_of_storage = __x._M_end_of_storage;
   117fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   117fe:	48 8b 50 10          	mov    0x10(%rax),%rdx
   11802:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11806:	48 89 50 10          	mov    %rdx,0x10(%rax)
	}
   1180a:	90                   	nop
   1180b:	5d                   	pop    %rbp
   1180c:	c3                   	ret

000000000001180d <_ZSt4moveIRSaIP9VkImage_TEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
   1180d:	55                   	push   %rbp
   1180e:	48 89 e5             	mov    %rsp,%rbp
   11811:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   11815:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11819:	5d                   	pop    %rbp
   1181a:	c3                   	ret

000000000001181b <_ZNSt6vectorIP13VkImageView_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1181b:	55                   	push   %rbp
   1181c:	48 89 e5             	mov    %rsp,%rbp
   1181f:	48 83 ec 20          	sub    $0x20,%rsp
   11823:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   11827:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1182e:	ff ff 0f 
   11831:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   11835:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11839:	48 89 c7             	mov    %rax,%rdi
   1183c:	e8 0b 04 00 00       	call   11c4c <_ZNSt16allocator_traitsISaIP13VkImageView_TEE8max_sizeERKS2_>
   11841:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   11845:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   11849:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1184d:	48 89 d6             	mov    %rdx,%rsi
   11850:	48 89 c7             	mov    %rax,%rdi
   11853:	e8 d5 29 ff ff       	call   422d <_ZSt3minImERKT_S2_S2_>
   11858:	48 8b 00             	mov    (%rax),%rax
      }
   1185b:	c9                   	leave
   1185c:	c3                   	ret
   1185d:	90                   	nop

000000000001185e <_ZNKSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1185e:	55                   	push   %rbp
   1185f:	48 89 e5             	mov    %rsp,%rbp
   11862:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   11866:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1186a:	5d                   	pop    %rbp
   1186b:	c3                   	ret

000000000001186c <_ZSt25__uninitialized_default_nIPP13VkImageView_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1186c:	55                   	push   %rbp
   1186d:	48 89 e5             	mov    %rsp,%rbp
   11870:	48 83 ec 20          	sub    $0x20,%rsp
   11874:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11878:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1187c:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   11880:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   11884:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11888:	48 89 d6             	mov    %rdx,%rsi
   1188b:	48 89 c7             	mov    %rax,%rdi
   1188e:	e8 d3 03 00 00       	call   11c66 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP13VkImageView_TmEET_S5_T0_>
    }
   11893:	c9                   	leave
   11894:	c3                   	ret

0000000000011895 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   11895:	55                   	push   %rbp
   11896:	48 89 e5             	mov    %rsp,%rbp
   11899:	48 83 ec 10          	sub    $0x10,%rsp
   1189d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   118a1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   118a5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   118a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118ad:	ba 00 00 00 00       	mov    $0x0,%edx
   118b2:	48 89 ce             	mov    %rcx,%rsi
   118b5:	48 89 c7             	mov    %rax,%rdi
   118b8:	e8 07 04 00 00       	call   11cc4 <_ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv>
   118bd:	c9                   	leave
   118be:	c3                   	ret

00000000000118bf <_ZSt12__relocate_aIPP13VkImageView_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   118bf:	55                   	push   %rbp
   118c0:	48 89 e5             	mov    %rsp,%rbp
   118c3:	41 54                	push   %r12
   118c5:	53                   	push   %rbx
   118c6:	48 83 ec 20          	sub    $0x20,%rsp
   118ca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   118ce:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   118d2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   118d6:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   118da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   118de:	48 89 c7             	mov    %rax,%rdi
   118e1:	e8 3f 04 00 00       	call   11d25 <_ZSt12__niter_baseIPP13VkImageView_TET_S3_>
   118e6:	49 89 c4             	mov    %rax,%r12
   118e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   118ed:	48 89 c7             	mov    %rax,%rdi
   118f0:	e8 30 04 00 00       	call   11d25 <_ZSt12__niter_baseIPP13VkImageView_TET_S3_>
   118f5:	48 89 c3             	mov    %rax,%rbx
   118f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   118fc:	48 89 c7             	mov    %rax,%rdi
   118ff:	e8 21 04 00 00       	call   11d25 <_ZSt12__niter_baseIPP13VkImageView_TET_S3_>
   11904:	48 89 c7             	mov    %rax,%rdi
   11907:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1190b:	48 89 c1             	mov    %rax,%rcx
   1190e:	4c 89 e2             	mov    %r12,%rdx
   11911:	48 89 de             	mov    %rbx,%rsi
   11914:	e8 1a 04 00 00       	call   11d33 <_ZSt14__relocate_a_1IP13VkImageView_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   11919:	48 83 c4 20          	add    $0x20,%rsp
   1191d:	5b                   	pop    %rbx
   1191e:	41 5c                	pop    %r12
   11920:	5d                   	pop    %rbp
   11921:	c3                   	ret

0000000000011922 <_ZNSt15__new_allocatorIP13VkImageView_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   11922:	55                   	push   %rbp
   11923:	48 89 e5             	mov    %rsp,%rbp
   11926:	48 83 ec 20          	sub    $0x20,%rsp
   1192a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1192e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11932:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   11936:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1193a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   11941:	00 
   11942:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11946:	48 89 d6             	mov    %rdx,%rsi
   11949:	48 89 c7             	mov    %rax,%rdi
   1194c:	e8 cf 19 ff ff       	call   3320 <_ZdlPvm@plt>
      }
   11951:	c9                   	leave
   11952:	c3                   	ret

0000000000011953 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13VkImageView_TEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   11953:	55                   	push   %rbp
   11954:	48 89 e5             	mov    %rsp,%rbp
   11957:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1195b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1195f:	90                   	nop
   11960:	5d                   	pop    %rbp
   11961:	c3                   	ret

0000000000011962 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   11962:	55                   	push   %rbp
   11963:	48 89 e5             	mov    %rsp,%rbp
   11966:	48 83 ec 20          	sub    $0x20,%rsp
   1196a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1196e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11972:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
   11976:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1197a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1197e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11982:	48 89 ce             	mov    %rcx,%rsi
   11985:	48 89 c7             	mov    %rax,%rdi
   11988:	e8 09 04 00 00       	call   11d96 <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>
   1198d:	c9                   	leave
   1198e:	c3                   	ret
   1198f:	90                   	nop

0000000000011990 <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   11990:	55                   	push   %rbp
   11991:	48 89 e5             	mov    %rsp,%rbp
   11994:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   11998:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1199c:	5d                   	pop    %rbp
   1199d:	c3                   	ret

000000000001199e <_ZSt12__niter_baseIPPKcET_S3_>:
    __niter_base(_Iterator __it)
   1199e:	55                   	push   %rbp
   1199f:	48 89 e5             	mov    %rsp,%rbp
   119a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   119a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119aa:	5d                   	pop    %rbp
   119ab:	c3                   	ret

00000000000119ac <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   119ac:	55                   	push   %rbp
   119ad:	48 89 e5             	mov    %rsp,%rbp
   119b0:	48 83 ec 30          	sub    $0x30,%rsp
   119b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   119b8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   119bc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   119c0:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   119c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   119c8:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   119cc:	48 c1 f8 03          	sar    $0x3,%rax
   119d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   119d4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   119d9:	7e 1f                	jle    119fa <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x4e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   119db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119df:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   119e6:	00 
   119e7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   119eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   119ef:	48 89 ce             	mov    %rcx,%rsi
   119f2:	48 89 c7             	mov    %rax,%rdi
   119f5:	e8 86 1b ff ff       	call   3580 <memmove@plt>
      return __result + __count;
   119fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119fe:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   11a05:	00 
   11a06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11a0a:	48 01 d0             	add    %rdx,%rax
    }
   11a0d:	c9                   	leave
   11a0e:	c3                   	ret
   11a0f:	90                   	nop

0000000000011a10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
   11a10:	55                   	push   %rbp
   11a11:	48 89 e5             	mov    %rsp,%rbp
   11a14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   11a18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a1c:	5d                   	pop    %rbp
   11a1d:	c3                   	ret

0000000000011a1e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   11a1e:	55                   	push   %rbp
   11a1f:	48 89 e5             	mov    %rsp,%rbp
   11a22:	48 83 ec 10          	sub    $0x10,%rsp
   11a26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11a2a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  __a.destroy(__p);
   11a2e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   11a32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a36:	48 89 d6             	mov    %rdx,%rsi
   11a39:	48 89 c7             	mov    %rax,%rdi
   11a3c:	e8 bd 03 00 00       	call   11dfe <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE7destroyIS9_EEvPT_>
	}
   11a41:	90                   	nop
   11a42:	c9                   	leave
   11a43:	c3                   	ret

0000000000011a44 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   11a44:	55                   	push   %rbp
   11a45:	48 89 e5             	mov    %rsp,%rbp
   11a48:	48 83 ec 20          	sub    $0x20,%rsp
   11a4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11a50:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11a54:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   11a58:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   11a5c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   11a60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a64:	48 89 ce             	mov    %rcx,%rsi
   11a67:	48 89 c7             	mov    %rax,%rdi
   11a6a:	e8 af 03 00 00       	call   11e1e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>
   11a6f:	90                   	nop
   11a70:	c9                   	leave
   11a71:	c3                   	ret

0000000000011a72 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() noexcept
   11a72:	55                   	push   %rbp
   11a73:	48 89 e5             	mov    %rsp,%rbp
   11a76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
   11a7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a7e:	5d                   	pop    %rbp
   11a7f:	c3                   	ret

0000000000011a80 <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
   11a80:	55                   	push   %rbp
   11a81:	48 89 e5             	mov    %rsp,%rbp
   11a84:	48 83 ec 10          	sub    $0x10,%rsp
   11a88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11a8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   11a90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11a94:	48 89 c7             	mov    %rax,%rdi
   11a97:	e8 9c ec ff ff       	call   10738 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   11a9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11aa0:	48 89 02             	mov    %rax,(%rdx)
   11aa3:	90                   	nop
   11aa4:	c9                   	leave
   11aa5:	c3                   	ret

0000000000011aa6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
   11aa6:	55                   	push   %rbp
   11aa7:	48 89 e5             	mov    %rsp,%rbp
   11aaa:	48 83 ec 10          	sub    $0x10,%rsp
   11aae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
   11ab2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ab6:	48 89 c7             	mov    %rax,%rdi
   11ab9:	e8 52 ff ff ff       	call   11a10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   11abe:	be 01 00 00 00       	mov    $0x1,%esi
   11ac3:	48 89 c7             	mov    %rax,%rdi
   11ac6:	e8 8d 03 00 00       	call   11e58 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>
   11acb:	c9                   	leave
   11acc:	c3                   	ret
   11acd:	90                   	nop

0000000000011ace <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
   11ace:	55                   	push   %rbp
   11acf:	48 89 e5             	mov    %rsp,%rbp
   11ad2:	41 56                	push   %r14
   11ad4:	41 55                	push   %r13
   11ad6:	41 54                	push   %r12
   11ad8:	53                   	push   %rbx
   11ad9:	48 83 ec 30          	sub    $0x30,%rsp
   11add:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   11ae1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   11ae5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   11ae9:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   11aed:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	      ::new(__node) _Rb_tree_node<_Val>;
   11af1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11af5:	48 89 c6             	mov    %rax,%rsi
   11af8:	bf 48 00 00 00       	mov    $0x48,%edi
   11afd:	e8 5e 22 ff ff       	call   3d60 <_ZnwmPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
   11b02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   11b06:	48 89 c7             	mov    %rax,%rdi
   11b09:	e8 87 ec ff ff       	call   10795 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   11b0e:	49 89 c6             	mov    %rax,%r14
   11b11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   11b15:	48 89 c7             	mov    %rax,%rdi
   11b18:	e8 6a ec ff ff       	call   10787 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   11b1d:	49 89 c5             	mov    %rax,%r13
   11b20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   11b24:	48 89 c7             	mov    %rax,%rdi
   11b27:	e8 4d ec ff ff       	call   10779 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   11b2c:	49 89 c4             	mov    %rax,%r12
   11b2f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11b33:	48 89 c7             	mov    %rax,%rdi
   11b36:	e8 b7 eb ff ff       	call   106f2 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   11b3b:	48 89 c3             	mov    %rax,%rbx
   11b3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11b42:	48 89 c7             	mov    %rax,%rdi
   11b45:	e8 c6 fe ff ff       	call   11a10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   11b4a:	4d 89 f0             	mov    %r14,%r8
   11b4d:	4c 89 e9             	mov    %r13,%rcx
   11b50:	4c 89 e2             	mov    %r12,%rdx
   11b53:	48 89 de             	mov    %rbx,%rsi
   11b56:	48 89 c7             	mov    %rax,%rdi
   11b59:	e8 24 03 00 00       	call   11e82 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>
	}
   11b5e:	eb 33                	jmp    11b93 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_+0xc5>
	  __catch(...)
   11b60:	48 89 c7             	mov    %rax,%rdi
   11b63:	e8 98 15 ff ff       	call   3100 <__cxa_begin_catch@plt>
	      _M_put_node(__node);
   11b68:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   11b6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11b70:	48 89 d6             	mov    %rdx,%rsi
   11b73:	48 89 c7             	mov    %rax,%rdi
   11b76:	e8 d7 f6 ff ff       	call   11252 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
	      __throw_exception_again;
   11b7b:	e8 90 19 ff ff       	call   3510 <__cxa_rethrow@plt>
	  __catch(...)
   11b80:	48 89 c3             	mov    %rax,%rbx
   11b83:	e8 08 1a ff ff       	call   3590 <__cxa_end_catch@plt>
   11b88:	48 89 d8             	mov    %rbx,%rax
   11b8b:	48 89 c7             	mov    %rax,%rdi
   11b8e:	e8 5d 1a ff ff       	call   35f0 <_Unwind_Resume@plt>
	}
   11b93:	48 83 c4 30          	add    $0x30,%rsp
   11b97:	5b                   	pop    %rbx
   11b98:	41 5c                	pop    %r12
   11b9a:	41 5d                	pop    %r13
   11b9c:	41 5e                	pop    %r14
   11b9e:	5d                   	pop    %rbp
   11b9f:	c3                   	ret

0000000000011ba0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   11ba0:	55                   	push   %rbp
   11ba1:	48 89 e5             	mov    %rsp,%rbp
   11ba4:	48 83 ec 20          	sub    $0x20,%rsp
   11ba8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_header._M_left); }
   11bac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11bb0:	48 8b 50 18          	mov    0x18(%rax),%rdx
   11bb4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   11bb8:	48 89 d6             	mov    %rdx,%rsi
   11bbb:	48 89 c7             	mov    %rax,%rdi
   11bbe:	e8 55 f1 ff ff       	call   10d18 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   11bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bc7:	c9                   	leave
   11bc8:	c3                   	ret
   11bc9:	90                   	nop

0000000000011bca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
   11bca:	55                   	push   %rbp
   11bcb:	48 89 e5             	mov    %rsp,%rbp
   11bce:	48 83 ec 20          	sub    $0x20,%rsp
   11bd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11bd6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11bda:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   11bde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11be2:	48 89 c7             	mov    %rax,%rdi
   11be5:	e8 04 03 00 00       	call   11eee <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>
   11bea:	48 8b 10             	mov    (%rax),%rdx
   11bed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bf1:	48 89 10             	mov    %rdx,(%rax)
   11bf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11bf8:	48 89 c7             	mov    %rax,%rdi
   11bfb:	e8 0e 00 00 00       	call   11c0e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   11c00:	48 8b 10             	mov    (%rax),%rdx
   11c03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c07:	48 89 50 08          	mov    %rdx,0x8(%rax)
   11c0b:	90                   	nop
   11c0c:	c9                   	leave
   11c0d:	c3                   	ret

0000000000011c0e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   11c0e:	55                   	push   %rbp
   11c0f:	48 89 e5             	mov    %rsp,%rbp
   11c12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   11c16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c1a:	5d                   	pop    %rbp
   11c1b:	c3                   	ret

0000000000011c1c <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr() const
   11c1c:	55                   	push   %rbp
   11c1d:	48 89 e5             	mov    %rsp,%rbp
   11c20:	48 83 ec 10          	sub    $0x10,%rsp
   11c24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   11c28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c2c:	48 83 c0 20          	add    $0x20,%rax
   11c30:	48 89 c7             	mov    %rax,%rdi
   11c33:	e8 c4 02 00 00       	call   11efc <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   11c38:	c9                   	leave
   11c39:	c3                   	ret

0000000000011c3a <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
   11c3a:	55                   	push   %rbp
   11c3b:	48 89 e5             	mov    %rsp,%rbp
   11c3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11c42:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x.first; }
   11c46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11c4a:	5d                   	pop    %rbp
   11c4b:	c3                   	ret

0000000000011c4c <_ZNSt16allocator_traitsISaIP13VkImageView_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   11c4c:	55                   	push   %rbp
   11c4d:	48 89 e5             	mov    %rsp,%rbp
   11c50:	48 83 ec 10          	sub    $0x10,%rsp
   11c54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   11c58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c5c:	48 89 c7             	mov    %rax,%rdi
   11c5f:	e8 b2 02 00 00       	call   11f16 <_ZNKSt15__new_allocatorIP13VkImageView_TE8max_sizeEv>
      }
   11c64:	c9                   	leave
   11c65:	c3                   	ret

0000000000011c66 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP13VkImageView_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   11c66:	55                   	push   %rbp
   11c67:	48 89 e5             	mov    %rsp,%rbp
   11c6a:	48 83 ec 20          	sub    $0x20,%rsp
   11c6e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11c72:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   11c76:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   11c7b:	74 40                	je     11cbd <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP13VkImageView_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   11c7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c81:	48 89 c7             	mov    %rax,%rdi
   11c84:	e8 a7 02 00 00       	call   11f30 <_ZSt11__addressofIP13VkImageView_TEPT_RS2_>
   11c89:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   11c8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c91:	48 89 c7             	mov    %rax,%rdi
   11c94:	e8 a5 02 00 00       	call   11f3e <_ZSt10_ConstructIP13VkImageView_TJEEvPT_DpOT0_>
	      ++__first;
   11c99:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   11c9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11ca2:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   11ca6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11caa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11cae:	48 89 ce             	mov    %rcx,%rsi
   11cb1:	48 89 c7             	mov    %rax,%rdi
   11cb4:	e8 ac 02 00 00       	call   11f65 <_ZSt6fill_nIPP13VkImageView_TmS1_ET_S3_T0_RKT1_>
   11cb9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   11cbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   11cc1:	c9                   	leave
   11cc2:	c3                   	ret
   11cc3:	90                   	nop

0000000000011cc4 <_ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   11cc4:	55                   	push   %rbp
   11cc5:	48 89 e5             	mov    %rsp,%rbp
   11cc8:	48 83 ec 20          	sub    $0x20,%rsp
   11ccc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11cd0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11cd4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   11cd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cdc:	48 89 c7             	mov    %rax,%rdi
   11cdf:	e8 c6 02 00 00       	call   11faa <_ZNKSt15__new_allocatorIP13VkImageView_TE11_M_max_sizeEv>
   11ce4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   11ce8:	0f 92 c0             	setb   %al
   11ceb:	0f b6 c0             	movzbl %al,%eax
   11cee:	48 85 c0             	test   %rax,%rax
   11cf1:	0f 95 c0             	setne  %al
   11cf4:	84 c0                	test   %al,%al
   11cf6:	74 1a                	je     11d12 <_ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   11cf8:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   11cff:	ff ff 1f 
   11d02:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   11d06:	73 05                	jae    11d0d <_ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   11d08:	e8 23 15 ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   11d0d:	e8 ae 13 ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   11d12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11d16:	48 c1 e0 03          	shl    $0x3,%rax
   11d1a:	48 89 c7             	mov    %rax,%rdi
   11d1d:	e8 ee 15 ff ff       	call   3310 <_Znwm@plt>
   11d22:	90                   	nop
      }
   11d23:	c9                   	leave
   11d24:	c3                   	ret

0000000000011d25 <_ZSt12__niter_baseIPP13VkImageView_TET_S3_>:
    __niter_base(_Iterator __it)
   11d25:	55                   	push   %rbp
   11d26:	48 89 e5             	mov    %rsp,%rbp
   11d29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   11d2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d31:	5d                   	pop    %rbp
   11d32:	c3                   	ret

0000000000011d33 <_ZSt14__relocate_a_1IP13VkImageView_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   11d33:	55                   	push   %rbp
   11d34:	48 89 e5             	mov    %rsp,%rbp
   11d37:	48 83 ec 30          	sub    $0x30,%rsp
   11d3b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11d3f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   11d43:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   11d47:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   11d4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11d4f:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   11d53:	48 c1 f8 03          	sar    $0x3,%rax
   11d57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   11d5b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   11d60:	7e 1f                	jle    11d81 <_ZSt14__relocate_a_1IP13VkImageView_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x4e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   11d62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d66:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   11d6d:	00 
   11d6e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   11d72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11d76:	48 89 ce             	mov    %rcx,%rsi
   11d79:	48 89 c7             	mov    %rax,%rdi
   11d7c:	e8 ff 17 ff ff       	call   3580 <memmove@plt>
      return __result + __count;
   11d81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   11d8c:	00 
   11d8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11d91:	48 01 d0             	add    %rdx,%rax
    }
   11d94:	c9                   	leave
   11d95:	c3                   	ret

0000000000011d96 <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
   11d96:	55                   	push   %rbp
   11d97:	48 89 e5             	mov    %rsp,%rbp
   11d9a:	53                   	push   %rbx
   11d9b:	48 83 ec 28          	sub    $0x28,%rsp
   11d9f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11da3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   11da7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   11dab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11daf:	48 89 c7             	mov    %rax,%rdi
   11db2:	e8 07 02 00 00       	call   11fbe <_ZSt12__miter_baseIPKPKcET_S4_>
   11db7:	48 89 c3             	mov    %rax,%rbx
   11dba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11dbe:	48 89 c7             	mov    %rax,%rdi
   11dc1:	e8 f8 01 00 00       	call   11fbe <_ZSt12__miter_baseIPKPKcET_S4_>
   11dc6:	48 89 c1             	mov    %rax,%rcx
   11dc9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11dcd:	48 89 c2             	mov    %rax,%rdx
   11dd0:	48 89 de             	mov    %rbx,%rsi
   11dd3:	48 89 cf             	mov    %rcx,%rdi
   11dd6:	e8 f1 01 00 00       	call   11fcc <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>
    }
   11ddb:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   11ddf:	c9                   	leave
   11de0:	c3                   	ret
   11de1:	90                   	nop

0000000000011de2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>:
    struct pair
   11de2:	55                   	push   %rbp
   11de3:	48 89 e5             	mov    %rsp,%rbp
   11de6:	48 83 ec 10          	sub    $0x10,%rsp
   11dea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11dee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11df2:	48 89 c7             	mov    %rax,%rdi
   11df5:	e8 b6 13 ff ff       	call   31b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
   11dfa:	90                   	nop
   11dfb:	c9                   	leave
   11dfc:	c3                   	ret
   11dfd:	90                   	nop

0000000000011dfe <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE7destroyIS9_EEvPT_>:
	destroy(_Up* __p)
   11dfe:	55                   	push   %rbp
   11dff:	48 89 e5             	mov    %rsp,%rbp
   11e02:	48 83 ec 10          	sub    $0x10,%rsp
   11e06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11e0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __p->~_Up(); }
   11e0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11e12:	48 89 c7             	mov    %rax,%rdi
   11e15:	e8 c8 ff ff ff       	call   11de2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>
   11e1a:	90                   	nop
   11e1b:	c9                   	leave
   11e1c:	c3                   	ret
   11e1d:	90                   	nop

0000000000011e1e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   11e1e:	55                   	push   %rbp
   11e1f:	48 89 e5             	mov    %rsp,%rbp
   11e22:	48 83 ec 20          	sub    $0x20,%rsp
   11e26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11e2a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11e2e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   11e32:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   11e36:	48 89 d0             	mov    %rdx,%rax
   11e39:	48 c1 e0 03          	shl    $0x3,%rax
   11e3d:	48 01 d0             	add    %rdx,%rax
   11e40:	48 c1 e0 03          	shl    $0x3,%rax
   11e44:	48 89 c2             	mov    %rax,%rdx
   11e47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11e4b:	48 89 d6             	mov    %rdx,%rsi
   11e4e:	48 89 c7             	mov    %rax,%rdi
   11e51:	e8 ca 14 ff ff       	call   3320 <_ZdlPvm@plt>
      }
   11e56:	c9                   	leave
   11e57:	c3                   	ret

0000000000011e58 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>:
      allocate(allocator_type& __a, size_type __n)
   11e58:	55                   	push   %rbp
   11e59:	48 89 e5             	mov    %rsp,%rbp
   11e5c:	48 83 ec 10          	sub    $0x10,%rsp
   11e60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11e64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   11e68:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   11e6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e70:	ba 00 00 00 00       	mov    $0x0,%edx
   11e75:	48 89 ce             	mov    %rcx,%rsi
   11e78:	48 89 c7             	mov    %rax,%rdi
   11e7b:	e8 b6 01 00 00       	call   12036 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>
   11e80:	c9                   	leave
   11e81:	c3                   	ret

0000000000011e82 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   11e82:	55                   	push   %rbp
   11e83:	48 89 e5             	mov    %rsp,%rbp
   11e86:	41 54                	push   %r12
   11e88:	53                   	push   %rbx
   11e89:	48 83 ec 30          	sub    $0x30,%rsp
   11e8d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11e91:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   11e95:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   11e99:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   11e9d:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  __a.construct(__p, std::forward<_Args>(__args)...);
   11ea1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   11ea5:	48 89 c7             	mov    %rax,%rdi
   11ea8:	e8 e8 e8 ff ff       	call   10795 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   11ead:	49 89 c4             	mov    %rax,%r12
   11eb0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11eb4:	48 89 c7             	mov    %rax,%rdi
   11eb7:	e8 cb e8 ff ff       	call   10787 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   11ebc:	48 89 c3             	mov    %rax,%rbx
   11ebf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11ec3:	48 89 c7             	mov    %rax,%rdi
   11ec6:	e8 ae e8 ff ff       	call   10779 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   11ecb:	48 89 c2             	mov    %rax,%rdx
   11ece:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   11ed2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ed6:	4d 89 e0             	mov    %r12,%r8
   11ed9:	48 89 d9             	mov    %rbx,%rcx
   11edc:	48 89 c7             	mov    %rax,%rdi
   11edf:	e8 e4 01 00 00       	call   120c8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESG_IJEEEEEvPT_DpOT0_>
	}
   11ee4:	90                   	nop
   11ee5:	48 83 c4 30          	add    $0x30,%rsp
   11ee9:	5b                   	pop    %rbx
   11eea:	41 5c                	pop    %r12
   11eec:	5d                   	pop    %rbp
   11eed:	c3                   	ret

0000000000011eee <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   11eee:	55                   	push   %rbp
   11eef:	48 89 e5             	mov    %rsp,%rbp
   11ef2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   11ef6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11efa:	5d                   	pop    %rbp
   11efb:	c3                   	ret

0000000000011efc <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
   11efc:	55                   	push   %rbp
   11efd:	48 89 e5             	mov    %rsp,%rbp
   11f00:	48 83 ec 10          	sub    $0x10,%rsp
   11f04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Tp*>(_M_addr()); }
   11f08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f0c:	48 89 c7             	mov    %rax,%rdi
   11f0f:	e8 64 02 00 00       	call   12178 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   11f14:	c9                   	leave
   11f15:	c3                   	ret

0000000000011f16 <_ZNKSt15__new_allocatorIP13VkImageView_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   11f16:	55                   	push   %rbp
   11f17:	48 89 e5             	mov    %rsp,%rbp
   11f1a:	48 83 ec 10          	sub    $0x10,%rsp
   11f1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   11f22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f26:	48 89 c7             	mov    %rax,%rdi
   11f29:	e8 7c 00 00 00       	call   11faa <_ZNKSt15__new_allocatorIP13VkImageView_TE11_M_max_sizeEv>
   11f2e:	c9                   	leave
   11f2f:	c3                   	ret

0000000000011f30 <_ZSt11__addressofIP13VkImageView_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   11f30:	55                   	push   %rbp
   11f31:	48 89 e5             	mov    %rsp,%rbp
   11f34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   11f38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f3c:	5d                   	pop    %rbp
   11f3d:	c3                   	ret

0000000000011f3e <_ZSt10_ConstructIP13VkImageView_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   11f3e:	55                   	push   %rbp
   11f3f:	48 89 e5             	mov    %rsp,%rbp
   11f42:	48 83 ec 10          	sub    $0x10,%rsp
   11f46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   11f4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f4e:	48 89 c6             	mov    %rax,%rsi
   11f51:	bf 08 00 00 00       	mov    $0x8,%edi
   11f56:	e8 05 1e ff ff       	call   3d60 <_ZnwmPv>
   11f5b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   11f62:	90                   	nop
   11f63:	c9                   	leave
   11f64:	c3                   	ret

0000000000011f65 <_ZSt6fill_nIPP13VkImageView_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   11f65:	55                   	push   %rbp
   11f66:	48 89 e5             	mov    %rsp,%rbp
   11f69:	48 83 ec 20          	sub    $0x20,%rsp
   11f6d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11f71:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11f75:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   11f79:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   11f7d:	48 89 c7             	mov    %rax,%rdi
   11f80:	e8 01 02 00 00       	call   12186 <_ZSt19__iterator_categoryIPP13VkImageView_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   11f85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11f89:	48 89 c7             	mov    %rax,%rdi
   11f8c:	e8 e1 1d ff ff       	call   3d72 <_ZSt17__size_to_integerm>
   11f91:	48 89 c1             	mov    %rax,%rcx
   11f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f98:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   11f9c:	48 89 ce             	mov    %rcx,%rsi
   11f9f:	48 89 c7             	mov    %rax,%rdi
   11fa2:	e8 ea 01 00 00       	call   12191 <_ZSt10__fill_n_aIPP13VkImageView_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   11fa7:	c9                   	leave
   11fa8:	c3                   	ret
   11fa9:	90                   	nop

0000000000011faa <_ZNKSt15__new_allocatorIP13VkImageView_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   11faa:	55                   	push   %rbp
   11fab:	48 89 e5             	mov    %rsp,%rbp
   11fae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   11fb2:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   11fb9:	ff ff 0f 
      }
   11fbc:	5d                   	pop    %rbp
   11fbd:	c3                   	ret

0000000000011fbe <_ZSt12__miter_baseIPKPKcET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
   11fbe:	55                   	push   %rbp
   11fbf:	48 89 e5             	mov    %rsp,%rbp
   11fc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   11fc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fca:	5d                   	pop    %rbp
   11fcb:	c3                   	ret

0000000000011fcc <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   11fcc:	55                   	push   %rbp
   11fcd:	48 89 e5             	mov    %rsp,%rbp
   11fd0:	41 54                	push   %r12
   11fd2:	53                   	push   %rbx
   11fd3:	48 83 ec 20          	sub    $0x20,%rsp
   11fd7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11fdb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   11fdf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
   11fe3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11fe7:	48 89 c7             	mov    %rax,%rdi
   11fea:	e8 af f9 ff ff       	call   1199e <_ZSt12__niter_baseIPPKcET_S3_>
   11fef:	49 89 c4             	mov    %rax,%r12
   11ff2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11ff6:	48 89 c7             	mov    %rax,%rdi
   11ff9:	e8 f0 01 00 00       	call   121ee <_ZSt12__niter_baseIPKPKcET_S4_>
   11ffe:	48 89 c3             	mov    %rax,%rbx
   12001:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12005:	48 89 c7             	mov    %rax,%rdi
   12008:	e8 e1 01 00 00       	call   121ee <_ZSt12__niter_baseIPKPKcET_S4_>
   1200d:	4c 89 e2             	mov    %r12,%rdx
   12010:	48 89 de             	mov    %rbx,%rsi
   12013:	48 89 c7             	mov    %rax,%rdi
   12016:	e8 e1 01 00 00       	call   121fc <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   1201b:	48 89 c2             	mov    %rax,%rdx
   1201e:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   12022:	48 89 d6             	mov    %rdx,%rsi
   12025:	48 89 c7             	mov    %rax,%rdi
   12028:	e8 fc 01 00 00       	call   12229 <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>
    }
   1202d:	48 83 c4 20          	add    $0x20,%rsp
   12031:	5b                   	pop    %rbx
   12032:	41 5c                	pop    %r12
   12034:	5d                   	pop    %rbp
   12035:	c3                   	ret

0000000000012036 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   12036:	55                   	push   %rbp
   12037:	48 89 e5             	mov    %rsp,%rbp
   1203a:	48 83 ec 20          	sub    $0x20,%rsp
   1203e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12042:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   12046:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1204a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1204e:	48 89 c7             	mov    %rax,%rdi
   12051:	e8 e6 01 00 00       	call   1223c <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>
   12056:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1205a:	0f 92 c0             	setb   %al
   1205d:	0f b6 c0             	movzbl %al,%eax
   12060:	48 85 c0             	test   %rax,%rax
   12063:	0f 95 c0             	setne  %al
   12066:	84 c0                	test   %al,%al
   12068:	74 1a                	je     12084 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1206a:	48 b8 8e e3 38 8e e3 	movabs $0x38e38e38e38e38e,%rax
   12071:	38 8e 03 
   12074:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   12078:	73 05                	jae    1207f <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1207a:	e8 b1 11 ff ff       	call   3230 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1207f:	e8 3c 10 ff ff       	call   30c0 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   12084:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   12088:	48 89 d0             	mov    %rdx,%rax
   1208b:	48 c1 e0 03          	shl    $0x3,%rax
   1208f:	48 01 d0             	add    %rdx,%rax
   12092:	48 c1 e0 03          	shl    $0x3,%rax
   12096:	48 89 c7             	mov    %rax,%rdi
   12099:	e8 72 12 ff ff       	call   3310 <_Znwm@plt>
   1209e:	90                   	nop
      }
   1209f:	c9                   	leave
   120a0:	c3                   	ret
   120a1:	90                   	nop

00000000000120a2 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      constexpr tuple(tuple&&) = default;
   120a2:	55                   	push   %rbp
   120a3:	48 89 e5             	mov    %rsp,%rbp
   120a6:	48 83 ec 10          	sub    $0x10,%rsp
   120aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   120ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   120b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120b6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   120ba:	48 89 d6             	mov    %rdx,%rsi
   120bd:	48 89 c7             	mov    %rax,%rdi
   120c0:	e8 8b 01 00 00       	call   12250 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   120c5:	90                   	nop
   120c6:	c9                   	leave
   120c7:	c3                   	ret

00000000000120c8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESG_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
   120c8:	55                   	push   %rbp
   120c9:	48 89 e5             	mov    %rsp,%rbp
   120cc:	41 56                	push   %r14
   120ce:	41 55                	push   %r13
   120d0:	41 54                	push   %r12
   120d2:	53                   	push   %rbx
   120d3:	48 83 ec 40          	sub    $0x40,%rsp
   120d7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   120db:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   120df:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   120e3:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   120e7:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   120eb:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
   120ef:	48 89 de             	mov    %rbx,%rsi
   120f2:	bf 28 00 00 00       	mov    $0x28,%edi
   120f7:	e8 64 1c ff ff       	call   3d60 <_ZnwmPv>
   120fc:	49 89 c4             	mov    %rax,%r12
   120ff:	41 be 01 00 00 00    	mov    $0x1,%r14d
   12105:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   12109:	48 89 c7             	mov    %rax,%rdi
   1210c:	e8 84 e6 ff ff       	call   10795 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   12111:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   12115:	48 89 c7             	mov    %rax,%rdi
   12118:	e8 6a e6 ff ff       	call   10787 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1211d:	48 89 c2             	mov    %rax,%rdx
   12120:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   12124:	48 89 d6             	mov    %rdx,%rsi
   12127:	48 89 c7             	mov    %rax,%rdi
   1212a:	e8 73 ff ff ff       	call   120a2 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   1212f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12133:	48 89 c7             	mov    %rax,%rdi
   12136:	e8 3e e6 ff ff       	call   10779 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1213b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1213f:	48 89 c6             	mov    %rax,%rsi
   12142:	4c 89 e7             	mov    %r12,%rdi
   12145:	e8 24 01 00 00       	call   1226e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
   1214a:	eb 1e                	jmp    1216a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESG_IJEEEEEvPT_DpOT0_+0xa2>
   1214c:	49 89 c5             	mov    %rax,%r13
   1214f:	45 84 f6             	test   %r14b,%r14b
   12152:	74 0b                	je     1215f <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESG_IJEEEEEvPT_DpOT0_+0x97>
   12154:	48 89 de             	mov    %rbx,%rsi
   12157:	4c 89 e7             	mov    %r12,%rdi
   1215a:	e8 ec bf ff ff       	call   e14b <_ZdlPvS_>
   1215f:	4c 89 e8             	mov    %r13,%rax
   12162:	48 89 c7             	mov    %rax,%rdi
   12165:	e8 86 14 ff ff       	call   35f0 <_Unwind_Resume@plt>
   1216a:	48 83 c4 40          	add    $0x40,%rsp
   1216e:	5b                   	pop    %rbx
   1216f:	41 5c                	pop    %r12
   12171:	41 5d                	pop    %r13
   12173:	41 5e                	pop    %r14
   12175:	5d                   	pop    %rbp
   12176:	c3                   	ret
   12177:	90                   	nop

0000000000012178 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() const noexcept
   12178:	55                   	push   %rbp
   12179:	48 89 e5             	mov    %rsp,%rbp
   1217c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const void*>(&_M_storage); }
   12180:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12184:	5d                   	pop    %rbp
   12185:	c3                   	ret

0000000000012186 <_ZSt19__iterator_categoryIPP13VkImageView_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   12186:	55                   	push   %rbp
   12187:	48 89 e5             	mov    %rsp,%rbp
   1218a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1218e:	90                   	nop
   1218f:	5d                   	pop    %rbp
   12190:	c3                   	ret

0000000000012191 <_ZSt10__fill_n_aIPP13VkImageView_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   12191:	55                   	push   %rbp
   12192:	48 89 e5             	mov    %rsp,%rbp
   12195:	48 83 ec 20          	sub    $0x20,%rsp
   12199:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1219d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   121a1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   121a5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   121aa:	75 06                	jne    121b2 <_ZSt10__fill_n_aIPP13VkImageView_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   121ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121b0:	eb 3a                	jmp    121ec <_ZSt10__fill_n_aIPP13VkImageView_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   121b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   121b6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   121bd:	00 
   121be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121c2:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   121c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   121ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121ce:	48 89 ce             	mov    %rcx,%rsi
   121d1:	48 89 c7             	mov    %rax,%rdi
   121d4:	e8 bf 00 00 00       	call   12298 <_ZSt8__fill_aIPP13VkImageView_TS1_EvT_S3_RKT0_>
      return __first + __n;
   121d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   121dd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   121e4:	00 
   121e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121e9:	48 01 d0             	add    %rdx,%rax
    }
   121ec:	c9                   	leave
   121ed:	c3                   	ret

00000000000121ee <_ZSt12__niter_baseIPKPKcET_S4_>:
    __niter_base(_Iterator __it)
   121ee:	55                   	push   %rbp
   121ef:	48 89 e5             	mov    %rsp,%rbp
   121f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   121f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121fa:	5d                   	pop    %rbp
   121fb:	c3                   	ret

00000000000121fc <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   121fc:	55                   	push   %rbp
   121fd:	48 89 e5             	mov    %rsp,%rbp
   12200:	48 83 ec 20          	sub    $0x20,%rsp
   12204:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12208:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1220c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   12210:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   12214:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   12218:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1221c:	48 89 ce             	mov    %rcx,%rsi
   1221f:	48 89 c7             	mov    %rax,%rdi
   12222:	e8 9f 00 00 00       	call   122c6 <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   12227:	c9                   	leave
   12228:	c3                   	ret

0000000000012229 <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   12229:	55                   	push   %rbp
   1222a:	48 89 e5             	mov    %rsp,%rbp
   1222d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12231:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
   12235:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12239:	5d                   	pop    %rbp
   1223a:	c3                   	ret
   1223b:	90                   	nop

000000000001223c <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1223c:	55                   	push   %rbp
   1223d:	48 89 e5             	mov    %rsp,%rbp
   12240:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   12244:	48 b8 c7 71 1c c7 71 	movabs $0x1c71c71c71c71c7,%rax
   1224b:	1c c7 01 
      }
   1224e:	5d                   	pop    %rbp
   1224f:	c3                   	ret

0000000000012250 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
   12250:	55                   	push   %rbp
   12251:	48 89 e5             	mov    %rsp,%rbp
   12254:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12258:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(static_cast<_Base&&>(__in))
   1225c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12260:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   12264:	48 8b 12             	mov    (%rdx),%rdx
   12267:	48 89 10             	mov    %rdx,(%rax)
      { }
   1226a:	90                   	nop
   1226b:	5d                   	pop    %rbp
   1226c:	c3                   	ret
   1226d:	90                   	nop

000000000001226e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
   1226e:	55                   	push   %rbp
   1226f:	48 89 e5             	mov    %rsp,%rbp
   12272:	48 83 ec 20          	sub    $0x20,%rsp
   12276:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1227a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
   1227e:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   12282:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   12286:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1228a:	48 89 ce             	mov    %rcx,%rsi
   1228d:	48 89 c7             	mov    %rax,%rdi
   12290:	e8 5f 00 00 00       	call   122f4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
   12295:	90                   	nop
   12296:	c9                   	leave
   12297:	c3                   	ret

0000000000012298 <_ZSt8__fill_aIPP13VkImageView_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   12298:	55                   	push   %rbp
   12299:	48 89 e5             	mov    %rsp,%rbp
   1229c:	48 83 ec 20          	sub    $0x20,%rsp
   122a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   122a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   122a8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   122ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   122b0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   122b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122b8:	48 89 ce             	mov    %rcx,%rsi
   122bb:	48 89 c7             	mov    %rax,%rdi
   122be:	e8 7b 00 00 00       	call   1233e <_ZSt9__fill_a1IPP13VkImageView_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   122c3:	90                   	nop
   122c4:	c9                   	leave
   122c5:	c3                   	ret

00000000000122c6 <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   122c6:	55                   	push   %rbp
   122c7:	48 89 e5             	mov    %rsp,%rbp
   122ca:	48 83 ec 20          	sub    $0x20,%rsp
   122ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   122d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   122d6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
   122da:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   122de:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   122e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122e6:	48 89 ce             	mov    %rcx,%rsi
   122e9:	48 89 c7             	mov    %rax,%rdi
   122ec:	e8 88 00 00 00       	call   12379 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>
    }
   122f1:	c9                   	leave
   122f2:	c3                   	ret
   122f3:	90                   	nop

00000000000122f4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
   122f4:	55                   	push   %rbp
   122f5:	48 89 e5             	mov    %rsp,%rbp
   122f8:	53                   	push   %rbx
   122f9:	48 83 ec 28          	sub    $0x28,%rsp
   122fd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   12301:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   12305:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   12309:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1230d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   12311:	48 89 c7             	mov    %rax,%rdi
   12314:	e8 bf 00 00 00       	call   123d8 <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>
   12319:	48 89 c7             	mov    %rax,%rdi
   1231c:	e8 d1 00 00 00       	call   123f2 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
   12321:	48 89 c6             	mov    %rax,%rsi
   12324:	48 89 df             	mov    %rbx,%rdi
   12327:	e8 74 0e ff ff       	call   31a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@plt>
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   1232c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12330:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
      { }
   12337:	90                   	nop
   12338:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1233c:	c9                   	leave
   1233d:	c3                   	ret

000000000001233e <_ZSt9__fill_a1IPP13VkImageView_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1233e:	55                   	push   %rbp
   1233f:	48 89 e5             	mov    %rsp,%rbp
   12342:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   12346:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1234a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1234e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   12352:	48 8b 00             	mov    (%rax),%rax
   12355:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   12359:	eb 10                	jmp    1236b <_ZSt9__fill_a1IPP13VkImageView_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1235b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1235f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12363:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   12366:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1236b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1236f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   12373:	75 e6                	jne    1235b <_ZSt9__fill_a1IPP13VkImageView_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   12375:	90                   	nop
   12376:	90                   	nop
   12377:	5d                   	pop    %rbp
   12378:	c3                   	ret

0000000000012379 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   12379:	55                   	push   %rbp
   1237a:	48 89 e5             	mov    %rsp,%rbp
   1237d:	48 83 ec 30          	sub    $0x30,%rsp
   12381:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   12385:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   12389:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
   1238d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   12391:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   12395:	48 c1 f8 03          	sar    $0x3,%rax
   12399:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
   1239d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   123a2:	74 1f                	je     123c3 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_+0x4a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   123a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123a8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   123af:	00 
   123b0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   123b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   123b8:	48 89 ce             	mov    %rcx,%rsi
   123bb:	48 89 c7             	mov    %rax,%rdi
   123be:	e8 bd 11 ff ff       	call   3580 <memmove@plt>
	  return __result + _Num;
   123c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123c7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   123ce:	00 
   123cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   123d3:	48 01 d0             	add    %rdx,%rax
	}
   123d6:	c9                   	leave
   123d7:	c3                   	ret

00000000000123d8 <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>:
    get(tuple<_Elements...>& __t) noexcept
   123d8:	55                   	push   %rbp
   123d9:	48 89 e5             	mov    %rsp,%rbp
   123dc:	48 83 ec 10          	sub    $0x10,%rsp
   123e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
   123e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123e8:	48 89 c7             	mov    %rax,%rdi
   123eb:	e8 10 00 00 00       	call   12400 <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
   123f0:	c9                   	leave
   123f1:	c3                   	ret

00000000000123f2 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   123f2:	55                   	push   %rbp
   123f3:	48 89 e5             	mov    %rsp,%rbp
   123f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   123fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123fe:	5d                   	pop    %rbp
   123ff:	c3                   	ret

0000000000012400 <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   12400:	55                   	push   %rbp
   12401:	48 89 e5             	mov    %rsp,%rbp
   12404:	48 83 ec 10          	sub    $0x10,%rsp
   12408:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
   1240c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12410:	48 89 c7             	mov    %rax,%rdi
   12413:	e8 02 00 00 00       	call   1241a <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>
   12418:	c9                   	leave
   12419:	c3                   	ret

000000000001241a <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   1241a:	55                   	push   %rbp
   1241b:	48 89 e5             	mov    %rsp,%rbp
   1241e:	48 83 ec 10          	sub    $0x10,%rsp
   12422:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12426:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1242a:	48 89 c7             	mov    %rax,%rdi
   1242d:	e8 02 00 00 00       	call   12434 <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>
   12432:	c9                   	leave
   12433:	c3                   	ret

0000000000012434 <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   12434:	55                   	push   %rbp
   12435:	48 89 e5             	mov    %rsp,%rbp
   12438:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1243c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12440:	48 8b 00             	mov    (%rax),%rax
   12443:	5d                   	pop    %rbp
   12444:	c3                   	ret
   12445:	90                   	nop

0000000000012446 <_ZNSt19bad_optional_accessD1Ev>:
    virtual ~bad_optional_access() = default;
   12446:	55                   	push   %rbp
   12447:	48 89 e5             	mov    %rsp,%rbp
   1244a:	48 83 ec 10          	sub    $0x10,%rsp
   1244e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12452:	48 8d 15 67 f8 00 00 	lea    0xf867(%rip),%rdx        # 21cc0 <_ZTVSt19bad_optional_access+0x10>
   12459:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1245d:	48 89 10             	mov    %rdx,(%rax)
   12460:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12464:	48 89 c7             	mov    %rax,%rdi
   12467:	e8 c4 11 ff ff       	call   3630 <_ZNSt9exceptionD2Ev@plt>
   1246c:	90                   	nop
   1246d:	c9                   	leave
   1246e:	c3                   	ret
   1246f:	90                   	nop

0000000000012470 <_ZNSt19bad_optional_accessD0Ev>:
   12470:	55                   	push   %rbp
   12471:	48 89 e5             	mov    %rsp,%rbp
   12474:	48 83 ec 10          	sub    $0x10,%rsp
   12478:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1247c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12480:	48 89 c7             	mov    %rax,%rdi
   12483:	e8 be ff ff ff       	call   12446 <_ZNSt19bad_optional_accessD1Ev>
   12488:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1248c:	be 08 00 00 00       	mov    $0x8,%esi
   12491:	48 89 c7             	mov    %rax,%rdi
   12494:	e8 87 0e ff ff       	call   3320 <_ZdlPvm@plt>
   12499:	c9                   	leave
   1249a:	c3                   	ret

Disassembly of section .fini:

000000000001249c <_fini>:
   1249c:	48 83 ec 08          	sub    $0x8,%rsp
   124a0:	48 83 c4 08          	add    $0x8,%rsp
   124a4:	c3                   	ret
